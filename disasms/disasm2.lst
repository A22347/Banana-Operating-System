
kernel/KRNLP2.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 8b fd 00 00       	call   c000fdab <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 48 72 02 c0       	mov    eax,0xc0027248
c0000025:	3d 48 72 02 c0       	cmp    eax,0xc0027248
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 48 72 02 c0       	push   0xc0027248
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 48 72 02 c0       	mov    eax,0xc0027248
c0000051:	2d 48 72 02 c0       	sub    eax,0xc0027248
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 48 72 02 c0       	push   0xc0027248
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d c0 90 02 c0 00 	cmp    BYTE PTR ds:0xc00290c0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb d0 28 02 c0       	mov    ebx,0xc00228d0
c0000097:	81 eb cc 28 02 c0    	sub    ebx,0xc00228cc
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be cc 28 02 c0       	mov    esi,0xc00228cc
c00000a6:	a1 c4 90 02 c0       	mov    eax,ds:0xc00290c4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 c4 90 02 c0       	mov    ds:0xc00290c4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 c4 90 02 c0       	mov    eax,ds:0xc00290c4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 48 72 02 c0       	push   0xc0027248
c00000d8:	e8 23 ff ff 3f       	call   0 <SIG_STATE_STRUCT>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 c0 90 02 c0 01 	mov    BYTE PTR ds:0xc00290c0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 c8 90 02 c0       	push   0xc00290c8
c0000108:	68 48 72 02 c0       	push   0xc0027248
c000010d:	e8 ee fe ff 3f       	call   0 <SIG_STATE_STRUCT>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000297:	0f 20 d9             	mov    ecx,cr3
c000029a:	39 c8                	cmp    eax,ecx
c000029c:	74 03                	je     c00002a1 <commonThreadSwitch.doneVAS>
c000029e:	0f 22 d8             	mov    cr3,eax

c00002a1 <commonThreadSwitch.doneVAS>:
c00002a1:	85 d2                	test   edx,edx
c00002a3:	75 11                	jne    c00002b6 <commonThreadSwitch.firstTime>
c00002a5:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a8:	e8 a3 65 01 00       	call   c0016850 <changeTSS>
c00002ad:	5d                   	pop    ebp
c00002ae:	5f                   	pop    edi
c00002af:	5e                   	pop    esi
c00002b0:	5a                   	pop    edx
c00002b1:	59                   	pop    ecx
c00002b2:	5b                   	pop    ebx
c00002b3:	58                   	pop    eax
c00002b4:	9d                   	popf   
c00002b5:	c3                   	ret    

c00002b6 <commonThreadSwitch.firstTime>:
c00002b6:	fa                   	cli    
c00002b7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002ba:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002bf:	60                   	pusha  
c00002c0:	e8 e2 43 01 00       	call   c00146a7 <mapVASFirstTime>
c00002c5:	61                   	popa   
c00002c6:	89 c4                	mov    esp,eax
c00002c8:	56                   	push   esi
c00002c9:	52                   	push   edx
c00002ca:	e8 81 65 01 00       	call   c0016850 <changeTSS>
c00002cf:	5a                   	pop    edx
c00002d0:	5e                   	pop    esi
c00002d1:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	59                   	pop    ecx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	81 c4 04 00 00 00    	add    esp,0x4
c00002e5:	6a 02                	push   0x2
c00002e7:	9d                   	popf   
c00002e8:	52                   	push   edx
c00002e9:	e8 e2 6a 01 00       	call   c0016dd0 <taskStartupFunction>
c00002ee:	5a                   	pop    edx
c00002ef:	50                   	push   eax
c00002f0:	ff d2                	call   edx
c00002f2:	e8 39 70 01 00       	call   c0017330 <taskReturned>
c00002f7:	e9 fb ff ff ff       	jmp    c00002f7 <commonThreadSwitch.firstTime+0x41>

c00002fc <asmQuickAcquireLock>:
c00002fc:	55                   	push   ebp
c00002fd:	89 e5                	mov    ebp,esp
c00002ff:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000302 <asmQuickAcquireLock.retry>:
c0000302:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000307:	72 02                	jb     c000030b <asmQuickAcquireLock.spin_with_pause>
c0000309:	fa                   	cli    
c000030a:	c3                   	ret    

c000030b <asmQuickAcquireLock.spin_with_pause>:
c000030b:	f3 90                	pause  
c000030d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000313:	75 f6                	jne    c000030b <asmQuickAcquireLock.spin_with_pause>
c0000315:	e9 e8 ff ff ff       	jmp    c0000302 <asmQuickAcquireLock.retry>

c000031a <asmQuickReleaseLock>:
c000031a:	55                   	push   ebp
c000031b:	89 e5                	mov    ebp,esp
c000031d:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000324:	5d                   	pop    ebp
c0000325:	c3                   	ret    

c0000326 <asmAcquireLock>:
c0000326:	55                   	push   ebp
c0000327:	89 e5                	mov    ebp,esp
c0000329:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032c <asmAcquireLock.retry>:
c000032c:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000331:	72 05                	jb     c0000338 <asmAcquireLock.spin_with_pause>
c0000333:	9c                   	pushf  
c0000334:	58                   	pop    eax
c0000335:	fa                   	cli    
c0000336:	5d                   	pop    ebp
c0000337:	c3                   	ret    

c0000338 <asmAcquireLock.spin_with_pause>:
c0000338:	f3 90                	pause  
c000033a:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000340:	75 f6                	jne    c0000338 <asmAcquireLock.spin_with_pause>
c0000342:	e9 e5 ff ff ff       	jmp    c000032c <asmAcquireLock.retry>

c0000347 <asmReleaseLock>:
c0000347:	55                   	push   ebp
c0000348:	89 e5                	mov    ebp,esp
c000034a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000034d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000350:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000356:	52                   	push   edx
c0000357:	9d                   	popf   
c0000358:	5d                   	pop    ebp
c0000359:	c3                   	ret    

c000035a <loadGDT>:
c000035a:	0f 01 15 00 f1 02 c0 	lgdtd  ds:0xc002f100
c0000361:	66 b8 10 00          	mov    ax,0x10
c0000365:	66 8e d8             	mov    ds,ax
c0000368:	66 8e c0             	mov    es,ax
c000036b:	66 8e e0             	mov    fs,ax
c000036e:	66 8e e8             	mov    gs,ax
c0000371:	66 8e d0             	mov    ss,ax
c0000374:	e9 00 00 00 00       	jmp    c0000379 <flush2>

c0000379 <flush2>:
c0000379:	c3                   	ret    

c000037a <memcpy>:
c000037a:	e9 3a f0 00 00       	jmp    c000f3b9 <__not_memcpy>
c000037f:	90                   	nop

c0000380 <memcmp>:
c0000380:	56                   	push   esi
c0000381:	53                   	push   ebx
c0000382:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000038a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000038e:	85 f6                	test   esi,esi
c0000390:	74 21                	je     c00003b3 <memcmp+0x33>
c0000392:	8a 08                	mov    cl,BYTE PTR [eax]
c0000394:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000397:	38 d9                	cmp    cl,bl
c0000399:	75 25                	jne    c00003c0 <memcmp+0x40>
c000039b:	01 c6                	add    esi,eax
c000039d:	eb 0a                	jmp    c00003a9 <memcmp+0x29>
c000039f:	90                   	nop
c00003a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00003a5:	38 cb                	cmp    bl,cl
c00003a7:	75 17                	jne    c00003c0 <memcmp+0x40>
c00003a9:	83 c0 01             	add    eax,0x1
c00003ac:	83 c2 01             	add    edx,0x1
c00003af:	39 f0                	cmp    eax,esi
c00003b1:	75 ed                	jne    c00003a0 <memcmp+0x20>
c00003b3:	5b                   	pop    ebx
c00003b4:	31 c0                	xor    eax,eax
c00003b6:	5e                   	pop    esi
c00003b7:	c3                   	ret    
c00003b8:	90                   	nop
c00003b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00003c0:	0f b6 c1             	movzx  eax,cl
c00003c3:	29 d8                	sub    eax,ebx
c00003c5:	5b                   	pop    ebx
c00003c6:	5e                   	pop    esi
c00003c7:	c3                   	ret    
c00003c8:	90                   	nop
c00003c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c00003d0 <memmove>:
c00003d0:	55                   	push   ebp
c00003d1:	57                   	push   edi
c00003d2:	56                   	push   esi
c00003d3:	53                   	push   ebx
c00003d4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003d8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003e0:	39 dd                	cmp    ebp,ebx
c00003e2:	0f 83 a8 00 00 00    	jae    c0000490 <memmove+0xc0>
c00003e8:	85 d2                	test   edx,edx
c00003ea:	0f 84 8c 00 00 00    	je     c000047c <memmove+0xac>
c00003f0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00003f3:	8d 75 04             	lea    esi,[ebp+0x4]
c00003f6:	39 cd                	cmp    ebp,ecx
c00003f8:	0f 93 c1             	setae  cl
c00003fb:	39 f3                	cmp    ebx,esi
c00003fd:	0f 93 c0             	setae  al
c0000400:	89 c6                	mov    esi,eax
c0000402:	31 c0                	xor    eax,eax
c0000404:	09 f1                	or     ecx,esi
c0000406:	8d 72 ff             	lea    esi,[edx-0x1]
c0000409:	83 fe 06             	cmp    esi,0x6
c000040c:	0f 97 c0             	seta   al
c000040f:	89 c6                	mov    esi,eax
c0000411:	85 ce                	test   esi,ecx
c0000413:	0f 84 a7 00 00 00    	je     c00004c0 <memmove+0xf0>
c0000419:	89 e9                	mov    ecx,ebp
c000041b:	09 d9                	or     ecx,ebx
c000041d:	80 e1 03             	and    cl,0x3
c0000420:	0f 85 9a 00 00 00    	jne    c00004c0 <memmove+0xf0>
c0000426:	89 d7                	mov    edi,edx
c0000428:	89 d9                	mov    ecx,ebx
c000042a:	83 e7 fc             	and    edi,0xfffffffc
c000042d:	89 ee                	mov    esi,ebp
c000042f:	01 df                	add    edi,ebx
c0000431:	eb 0d                	jmp    c0000440 <memmove+0x70>
c0000433:	90                   	nop
c0000434:	90                   	nop
c0000435:	90                   	nop
c0000436:	90                   	nop
c0000437:	90                   	nop
c0000438:	90                   	nop
c0000439:	90                   	nop
c000043a:	90                   	nop
c000043b:	90                   	nop
c000043c:	90                   	nop
c000043d:	90                   	nop
c000043e:	90                   	nop
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c1 04             	add    ecx,0x4
c0000445:	83 c6 04             	add    esi,0x4
c0000448:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x70>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0xac>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0xac>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0xac>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0xac>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0xac>
c0000496:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0000499:	83 eb 01             	sub    ebx,0x1
c000049c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	83 ea 01             	sub    edx,0x1
c00004a9:	75 f5                	jne    c00004a0 <memmove+0xd0>
c00004ab:	5b                   	pop    ebx
c00004ac:	89 e8                	mov    eax,ebp
c00004ae:	5e                   	pop    esi
c00004af:	5f                   	pop    edi
c00004b0:	5d                   	pop    ebp
c00004b1:	c3                   	ret    
c00004b2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00004b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00004c0:	01 ea                	add    edx,ebp
c00004c2:	89 e9                	mov    ecx,ebp
c00004c4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ca:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004d0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004d2:	83 c1 01             	add    ecx,0x1
c00004d5:	83 c3 01             	add    ebx,0x1
c00004d8:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004db:	39 d1                	cmp    ecx,edx
c00004dd:	75 f1                	jne    c00004d0 <memmove+0x100>
c00004df:	eb 9b                	jmp    c000047c <memmove+0xac>
c00004e1:	eb 0d                	jmp    c00004f0 <memset>
c00004e3:	90                   	nop
c00004e4:	90                   	nop
c00004e5:	90                   	nop
c00004e6:	90                   	nop
c00004e7:	90                   	nop
c00004e8:	90                   	nop
c00004e9:	90                   	nop
c00004ea:	90                   	nop
c00004eb:	90                   	nop
c00004ec:	90                   	nop
c00004ed:	90                   	nop
c00004ee:	90                   	nop
c00004ef:	90                   	nop

c00004f0 <memset>:
c00004f0:	57                   	push   edi
c00004f1:	56                   	push   esi
c00004f2:	53                   	push   ebx
c00004f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00004f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00004fb:	85 d2                	test   edx,edx
c00004fd:	74 1d                	je     c000051c <memset+0x2c>
c00004ff:	83 fa 08             	cmp    edx,0x8
c0000502:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0000507:	89 f7                	mov    edi,esi
c0000509:	73 25                	jae    c0000530 <memset+0x40>
c000050b:	83 e2 07             	and    edx,0x7
c000050e:	74 0c                	je     c000051c <memset+0x2c>
c0000510:	31 c0                	xor    eax,eax
c0000512:	88 1c 07             	mov    BYTE PTR [edi+eax*1],bl
c0000515:	83 c0 01             	add    eax,0x1
c0000518:	39 d0                	cmp    eax,edx
c000051a:	72 f6                	jb     c0000512 <memset+0x22>
c000051c:	5b                   	pop    ebx
c000051d:	89 f0                	mov    eax,esi
c000051f:	5e                   	pop    esi
c0000520:	5f                   	pop    edi
c0000521:	c3                   	ret    
c0000522:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000529:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000530:	0f b6 c3             	movzx  eax,bl
c0000533:	88 c4                	mov    ah,al
c0000535:	89 c1                	mov    ecx,eax
c0000537:	c1 e1 10             	shl    ecx,0x10
c000053a:	09 c8                	or     eax,ecx
c000053c:	f7 c6 01 00 00 00    	test   esi,0x1
c0000542:	75 1d                	jne    c0000561 <memset+0x71>
c0000544:	f7 c7 02 00 00 00    	test   edi,0x2
c000054a:	75 1f                	jne    c000056b <memset+0x7b>
c000054c:	f7 c7 04 00 00 00    	test   edi,0x4
c0000552:	75 22                	jne    c0000576 <memset+0x86>
c0000554:	89 d1                	mov    ecx,edx
c0000556:	c1 e9 02             	shr    ecx,0x2
c0000559:	fc                   	cld    
c000055a:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c000055c:	83 e2 03             	and    edx,0x3
c000055f:	eb aa                	jmp    c000050b <memset+0x1b>
c0000561:	88 06                	mov    BYTE PTR [esi],al
c0000563:	8d 7e 01             	lea    edi,[esi+0x1]
c0000566:	83 ea 01             	sub    edx,0x1
c0000569:	eb d9                	jmp    c0000544 <memset+0x54>
c000056b:	66 89 07             	mov    WORD PTR [edi],ax
c000056e:	83 ea 02             	sub    edx,0x2
c0000571:	83 c7 02             	add    edi,0x2
c0000574:	eb d6                	jmp    c000054c <memset+0x5c>
c0000576:	89 07                	mov    DWORD PTR [edi],eax
c0000578:	83 ea 04             	sub    edx,0x4
c000057b:	83 c7 04             	add    edi,0x4
c000057e:	eb d4                	jmp    c0000554 <memset+0x64>

c0000580 <strlen>:
c0000580:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000584:	31 c0                	xor    eax,eax
c0000586:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000589:	74 15                	je     c00005a0 <strlen+0x20>
c000058b:	90                   	nop
c000058c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000590:	83 c0 01             	add    eax,0x1
c0000593:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000597:	75 f7                	jne    c0000590 <strlen+0x10>
c0000599:	c3                   	ret    
c000059a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00005a0:	c3                   	ret    
c00005a1:	eb 0d                	jmp    c00005b0 <strpbrk>
c00005a3:	90                   	nop
c00005a4:	90                   	nop
c00005a5:	90                   	nop
c00005a6:	90                   	nop
c00005a7:	90                   	nop
c00005a8:	90                   	nop
c00005a9:	90                   	nop
c00005aa:	90                   	nop
c00005ab:	90                   	nop
c00005ac:	90                   	nop
c00005ad:	90                   	nop
c00005ae:	90                   	nop
c00005af:	90                   	nop

c00005b0 <strpbrk>:
c00005b0:	57                   	push   edi
c00005b1:	56                   	push   esi
c00005b2:	53                   	push   ebx
c00005b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00005b7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00005bb:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005be:	85 db                	test   ebx,ebx
c00005c0:	74 36                	je     c00005f8 <strpbrk+0x48>
c00005c2:	0f be 37             	movsx  esi,BYTE PTR [edi]
c00005c5:	85 f6                	test   esi,esi
c00005c7:	74 25                	je     c00005ee <strpbrk+0x3e>
c00005c9:	39 de                	cmp    esi,ebx
c00005cb:	74 2d                	je     c00005fa <strpbrk+0x4a>
c00005cd:	89 fa                	mov    edx,edi
c00005cf:	eb 13                	jmp    c00005e4 <strpbrk+0x34>
c00005d1:	eb 0d                	jmp    c00005e0 <strpbrk+0x30>
c00005d3:	90                   	nop
c00005d4:	90                   	nop
c00005d5:	90                   	nop
c00005d6:	90                   	nop
c00005d7:	90                   	nop
c00005d8:	90                   	nop
c00005d9:	90                   	nop
c00005da:	90                   	nop
c00005db:	90                   	nop
c00005dc:	90                   	nop
c00005dd:	90                   	nop
c00005de:	90                   	nop
c00005df:	90                   	nop
c00005e0:	39 d9                	cmp    ecx,ebx
c00005e2:	74 16                	je     c00005fa <strpbrk+0x4a>
c00005e4:	83 c2 01             	add    edx,0x1
c00005e7:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c00005ea:	85 c9                	test   ecx,ecx
c00005ec:	75 f2                	jne    c00005e0 <strpbrk+0x30>
c00005ee:	83 c0 01             	add    eax,0x1
c00005f1:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005f4:	85 db                	test   ebx,ebx
c00005f6:	75 cd                	jne    c00005c5 <strpbrk+0x15>
c00005f8:	31 c0                	xor    eax,eax
c00005fa:	5b                   	pop    ebx
c00005fb:	5e                   	pop    esi
c00005fc:	5f                   	pop    edi
c00005fd:	c3                   	ret    
c00005fe:	66 90                	xchg   ax,ax

c0000600 <strtok>:
c0000600:	56                   	push   esi
c0000601:	53                   	push   ebx
c0000602:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0000606:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000060a:	85 db                	test   ebx,ebx
c000060c:	75 08                	jne    c0000616 <strtok+0x16>
c000060e:	eb 30                	jmp    c0000640 <strtok+0x40>
c0000610:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000613:	83 c3 01             	add    ebx,0x1
c0000616:	56                   	push   esi
c0000617:	53                   	push   ebx
c0000618:	e8 93 ff ff ff       	call   c00005b0 <strpbrk>
c000061d:	5a                   	pop    edx
c000061e:	59                   	pop    ecx
c000061f:	a3 e0 90 02 c0       	mov    ds:0xc00290e0,eax
c0000624:	39 d8                	cmp    eax,ebx
c0000626:	74 e8                	je     c0000610 <strtok+0x10>
c0000628:	85 c0                	test   eax,eax
c000062a:	74 1e                	je     c000064a <strtok+0x4a>
c000062c:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000062f:	8d 50 01             	lea    edx,[eax+0x1]
c0000632:	89 d8                	mov    eax,ebx
c0000634:	5b                   	pop    ebx
c0000635:	89 15 e0 90 02 c0    	mov    DWORD PTR ds:0xc00290e0,edx
c000063b:	5e                   	pop    esi
c000063c:	c3                   	ret    
c000063d:	8d 76 00             	lea    esi,[esi+0x0]
c0000640:	8b 1d e0 90 02 c0    	mov    ebx,DWORD PTR ds:0xc00290e0
c0000646:	85 db                	test   ebx,ebx
c0000648:	75 cc                	jne    c0000616 <strtok+0x16>
c000064a:	5b                   	pop    ebx
c000064b:	31 c0                	xor    eax,eax
c000064d:	5e                   	pop    esi
c000064e:	c3                   	ret    
c000064f:	90                   	nop

c0000650 <strcpy>:
c0000650:	53                   	push   ebx
c0000651:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000655:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000659:	8a 11                	mov    dl,BYTE PTR [ecx]
c000065b:	89 c3                	mov    ebx,eax
c000065d:	84 d2                	test   dl,dl
c000065f:	74 1d                	je     c000067e <strcpy+0x2e>
c0000661:	eb 0d                	jmp    c0000670 <strcpy+0x20>
c0000663:	90                   	nop
c0000664:	90                   	nop
c0000665:	90                   	nop
c0000666:	90                   	nop
c0000667:	90                   	nop
c0000668:	90                   	nop
c0000669:	90                   	nop
c000066a:	90                   	nop
c000066b:	90                   	nop
c000066c:	90                   	nop
c000066d:	90                   	nop
c000066e:	90                   	nop
c000066f:	90                   	nop
c0000670:	88 13                	mov    BYTE PTR [ebx],dl
c0000672:	83 c1 01             	add    ecx,0x1
c0000675:	83 c3 01             	add    ebx,0x1
c0000678:	8a 11                	mov    dl,BYTE PTR [ecx]
c000067a:	84 d2                	test   dl,dl
c000067c:	75 f2                	jne    c0000670 <strcpy+0x20>
c000067e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000681:	5b                   	pop    ebx
c0000682:	c3                   	ret    
c0000683:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000689:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000690 <strncpy>:
c0000690:	55                   	push   ebp
c0000691:	57                   	push   edi
c0000692:	56                   	push   esi
c0000693:	53                   	push   ebx
c0000694:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000698:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000069c:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c00006a0:	85 c9                	test   ecx,ecx
c00006a2:	74 43                	je     c00006e7 <strncpy+0x57>
c00006a4:	0f b6 75 00          	movzx  esi,BYTE PTR [ebp+0x0]
c00006a8:	8d 41 ff             	lea    eax,[ecx-0x1]
c00006ab:	8d 7a 01             	lea    edi,[edx+0x1]
c00006ae:	89 f3                	mov    ebx,esi
c00006b0:	88 1a                	mov    BYTE PTR [edx],bl
c00006b2:	84 db                	test   bl,bl
c00006b4:	74 3a                	je     c00006f0 <strncpy+0x60>
c00006b6:	85 c0                	test   eax,eax
c00006b8:	74 2d                	je     c00006e7 <strncpy+0x57>
c00006ba:	8a 5d 01             	mov    bl,BYTE PTR [ebp+0x1]
c00006bd:	8d 41 fe             	lea    eax,[ecx-0x2]
c00006c0:	8d 7a 02             	lea    edi,[edx+0x2]
c00006c3:	8d 4d 02             	lea    ecx,[ebp+0x2]
c00006c6:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c00006c9:	84 db                	test   bl,bl
c00006cb:	75 16                	jne    c00006e3 <strncpy+0x53>
c00006cd:	eb 21                	jmp    c00006f0 <strncpy+0x60>
c00006cf:	90                   	nop
c00006d0:	83 c1 01             	add    ecx,0x1
c00006d3:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00006d6:	83 c7 01             	add    edi,0x1
c00006d9:	83 e8 01             	sub    eax,0x1
c00006dc:	88 5f ff             	mov    BYTE PTR [edi-0x1],bl
c00006df:	84 db                	test   bl,bl
c00006e1:	74 0d                	je     c00006f0 <strncpy+0x60>
c00006e3:	85 c0                	test   eax,eax
c00006e5:	75 e9                	jne    c00006d0 <strncpy+0x40>
c00006e7:	5b                   	pop    ebx
c00006e8:	89 d0                	mov    eax,edx
c00006ea:	5e                   	pop    esi
c00006eb:	5f                   	pop    edi
c00006ec:	5d                   	pop    ebp
c00006ed:	c3                   	ret    
c00006ee:	66 90                	xchg   ax,ax
c00006f0:	85 c0                	test   eax,eax
c00006f2:	74 f3                	je     c00006e7 <strncpy+0x57>
c00006f4:	83 f8 08             	cmp    eax,0x8
c00006f7:	89 c3                	mov    ebx,eax
c00006f9:	73 35                	jae    c0000730 <strncpy+0xa0>
c00006fb:	f6 c3 04             	test   bl,0x4
c00006fe:	74 09                	je     c0000709 <strncpy+0x79>
c0000700:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0000706:	83 c7 04             	add    edi,0x4
c0000709:	f6 c3 02             	test   bl,0x2
c000070c:	74 08                	je     c0000716 <strncpy+0x86>
c000070e:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c0000713:	83 c7 02             	add    edi,0x2
c0000716:	80 e3 01             	and    bl,0x1
c0000719:	74 cc                	je     c00006e7 <strncpy+0x57>
c000071b:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000071e:	89 d0                	mov    eax,edx
c0000720:	5b                   	pop    ebx
c0000721:	5e                   	pop    esi
c0000722:	5f                   	pop    edi
c0000723:	5d                   	pop    ebp
c0000724:	c3                   	ret    
c0000725:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000729:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000730:	f7 c7 01 00 00 00    	test   edi,0x1
c0000736:	75 1f                	jne    c0000757 <strncpy+0xc7>
c0000738:	f7 c7 02 00 00 00    	test   edi,0x2
c000073e:	75 30                	jne    c0000770 <strncpy+0xe0>
c0000740:	f7 c7 04 00 00 00    	test   edi,0x4
c0000746:	75 1a                	jne    c0000762 <strncpy+0xd2>
c0000748:	89 d9                	mov    ecx,ebx
c000074a:	c1 e9 02             	shr    ecx,0x2
c000074d:	fc                   	cld    
c000074e:	31 c0                	xor    eax,eax
c0000750:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000752:	83 e3 03             	and    ebx,0x3
c0000755:	eb a4                	jmp    c00006fb <strncpy+0x6b>
c0000757:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000075a:	83 eb 01             	sub    ebx,0x1
c000075d:	83 c7 01             	add    edi,0x1
c0000760:	eb d6                	jmp    c0000738 <strncpy+0xa8>
c0000762:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0000768:	83 eb 04             	sub    ebx,0x4
c000076b:	83 c7 04             	add    edi,0x4
c000076e:	eb d8                	jmp    c0000748 <strncpy+0xb8>
c0000770:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c0000775:	83 eb 02             	sub    ebx,0x2
c0000778:	83 c7 02             	add    edi,0x2
c000077b:	eb c3                	jmp    c0000740 <strncpy+0xb0>
c000077d:	8d 76 00             	lea    esi,[esi+0x0]

c0000780 <strcmp>:
c0000780:	57                   	push   edi
c0000781:	56                   	push   esi
c0000782:	53                   	push   ebx
c0000783:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0000787:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000078b:	8a 17                	mov    dl,BYTE PTR [edi]
c000078d:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0000790:	38 c2                	cmp    dl,al
c0000792:	75 32                	jne    c00007c6 <strcmp+0x46>
c0000794:	85 c0                	test   eax,eax
c0000796:	74 28                	je     c00007c0 <strcmp+0x40>
c0000798:	b8 01 00 00 00       	mov    eax,0x1
c000079d:	eb 08                	jmp    c00007a7 <strcmp+0x27>
c000079f:	90                   	nop
c00007a0:	83 c0 01             	add    eax,0x1
c00007a3:	85 db                	test   ebx,ebx
c00007a5:	74 19                	je     c00007c0 <strcmp+0x40>
c00007a7:	0f be 1c 07          	movsx  ebx,BYTE PTR [edi+eax*1]
c00007ab:	8a 0c 06             	mov    cl,BYTE PTR [esi+eax*1]
c00007ae:	89 da                	mov    edx,ebx
c00007b0:	38 d9                	cmp    cl,bl
c00007b2:	74 ec                	je     c00007a0 <strcmp+0x20>
c00007b4:	5b                   	pop    ebx
c00007b5:	0f b6 c2             	movzx  eax,dl
c00007b8:	0f b6 c9             	movzx  ecx,cl
c00007bb:	29 c8                	sub    eax,ecx
c00007bd:	5e                   	pop    esi
c00007be:	5f                   	pop    edi
c00007bf:	c3                   	ret    
c00007c0:	5b                   	pop    ebx
c00007c1:	31 c0                	xor    eax,eax
c00007c3:	5e                   	pop    esi
c00007c4:	5f                   	pop    edi
c00007c5:	c3                   	ret    
c00007c6:	89 c1                	mov    ecx,eax
c00007c8:	eb ea                	jmp    c00007b4 <strcmp+0x34>
c00007ca:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00007d0 <strchr>:
c00007d0:	53                   	push   ebx
c00007d1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00007d5:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00007d8:	85 db                	test   ebx,ebx
c00007da:	74 22                	je     c00007fe <strchr+0x2e>
c00007dc:	0f be 54 24 0c       	movsx  edx,BYTE PTR [esp+0xc]
c00007e1:	39 d3                	cmp    ebx,edx
c00007e3:	74 1b                	je     c0000800 <strchr+0x30>
c00007e5:	89 d1                	mov    ecx,edx
c00007e7:	eb 0b                	jmp    c00007f4 <strchr+0x24>
c00007e9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007f0:	39 ca                	cmp    edx,ecx
c00007f2:	74 0c                	je     c0000800 <strchr+0x30>
c00007f4:	83 c0 01             	add    eax,0x1
c00007f7:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00007fa:	85 d2                	test   edx,edx
c00007fc:	75 f2                	jne    c00007f0 <strchr+0x20>
c00007fe:	31 c0                	xor    eax,eax
c0000800:	5b                   	pop    ebx
c0000801:	c3                   	ret    
c0000802:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000809:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000810 <strncmp>:
c0000810:	55                   	push   ebp
c0000811:	57                   	push   edi
c0000812:	56                   	push   esi
c0000813:	53                   	push   ebx
c0000814:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000818:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000081c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0000820:	85 f6                	test   esi,esi
c0000822:	74 35                	je     c0000859 <strncmp+0x49>
c0000824:	0f be 29             	movsx  ebp,BYTE PTR [ecx]
c0000827:	8a 17                	mov    dl,BYTE PTR [edi]
c0000829:	89 eb                	mov    ebx,ebp
c000082b:	38 da                	cmp    dl,bl
c000082d:	75 31                	jne    c0000860 <strncmp+0x50>
c000082f:	8d 47 01             	lea    eax,[edi+0x1]
c0000832:	85 ed                	test   ebp,ebp
c0000834:	74 23                	je     c0000859 <strncmp+0x49>
c0000836:	01 f7                	add    edi,esi
c0000838:	eb 18                	jmp    c0000852 <strncmp+0x42>
c000083a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000840:	0f be 30             	movsx  esi,BYTE PTR [eax]
c0000843:	8a 19                	mov    bl,BYTE PTR [ecx]
c0000845:	89 f2                	mov    edx,esi
c0000847:	38 d3                	cmp    bl,dl
c0000849:	75 15                	jne    c0000860 <strncmp+0x50>
c000084b:	83 c0 01             	add    eax,0x1
c000084e:	85 f6                	test   esi,esi
c0000850:	74 07                	je     c0000859 <strncmp+0x49>
c0000852:	83 c1 01             	add    ecx,0x1
c0000855:	39 c7                	cmp    edi,eax
c0000857:	75 e7                	jne    c0000840 <strncmp+0x30>
c0000859:	5b                   	pop    ebx
c000085a:	31 c0                	xor    eax,eax
c000085c:	5e                   	pop    esi
c000085d:	5f                   	pop    edi
c000085e:	5d                   	pop    ebp
c000085f:	c3                   	ret    
c0000860:	0f b6 db             	movzx  ebx,bl
c0000863:	0f b6 c2             	movzx  eax,dl
c0000866:	29 d8                	sub    eax,ebx
c0000868:	5b                   	pop    ebx
c0000869:	5e                   	pop    esi
c000086a:	5f                   	pop    edi
c000086b:	5d                   	pop    ebp
c000086c:	c3                   	ret    
c000086d:	8d 76 00             	lea    esi,[esi+0x0]

c0000870 <strcat>:
c0000870:	56                   	push   esi
c0000871:	53                   	push   ebx
c0000872:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000876:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000087a:	89 c3                	mov    ebx,eax
c000087c:	eb 04                	jmp    c0000882 <strcat+0x12>
c000087e:	66 90                	xchg   ax,ax
c0000880:	89 d3                	mov    ebx,edx
c0000882:	8d 53 01             	lea    edx,[ebx+0x1]
c0000885:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000889:	75 f5                	jne    c0000880 <strcat+0x10>
c000088b:	31 d2                	xor    edx,edx
c000088d:	8d 76 00             	lea    esi,[esi+0x0]
c0000890:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000893:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000896:	83 c2 01             	add    edx,0x1
c0000899:	84 c9                	test   cl,cl
c000089b:	75 f3                	jne    c0000890 <strcat+0x20>
c000089d:	5b                   	pop    ebx
c000089e:	5e                   	pop    esi
c000089f:	c3                   	ret    

c00008a0 <strncat>:
c00008a0:	56                   	push   esi
c00008a1:	53                   	push   ebx
c00008a2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00008a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00008aa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00008ae:	85 f6                	test   esi,esi
c00008b0:	74 32                	je     c00008e4 <strncat+0x44>
c00008b2:	89 c2                	mov    edx,eax
c00008b4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00008ba:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00008c0:	83 c2 01             	add    edx,0x1
c00008c3:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00008c7:	75 f7                	jne    c00008c0 <strncat+0x20>
c00008c9:	01 ce                	add    esi,ecx
c00008cb:	eb 0a                	jmp    c00008d7 <strncat+0x37>
c00008cd:	8d 76 00             	lea    esi,[esi+0x0]
c00008d0:	39 f1                	cmp    ecx,esi
c00008d2:	74 1c                	je     c00008f0 <strncat+0x50>
c00008d4:	83 c2 01             	add    edx,0x1
c00008d7:	83 c1 01             	add    ecx,0x1
c00008da:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008dd:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008e0:	84 db                	test   bl,bl
c00008e2:	75 ec                	jne    c00008d0 <strncat+0x30>
c00008e4:	5b                   	pop    ebx
c00008e5:	5e                   	pop    esi
c00008e6:	c3                   	ret    
c00008e7:	89 f6                	mov    esi,esi
c00008e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00008f0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008f3:	5b                   	pop    ebx
c00008f4:	5e                   	pop    esi
c00008f5:	c3                   	ret    
c00008f6:	8d 76 00             	lea    esi,[esi+0x0]
c00008f9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000900 <strstr>:
c0000900:	57                   	push   edi
c0000901:	56                   	push   esi
c0000902:	53                   	push   ebx
c0000903:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0000907:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000090b:	57                   	push   edi
c000090c:	e8 6f fc ff ff       	call   c0000580 <strlen>
c0000911:	59                   	pop    ecx
c0000912:	85 c0                	test   eax,eax
c0000914:	89 c6                	mov    esi,eax
c0000916:	75 1a                	jne    c0000932 <strstr+0x32>
c0000918:	eb 36                	jmp    c0000950 <strstr+0x50>
c000091a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000920:	56                   	push   esi
c0000921:	57                   	push   edi
c0000922:	53                   	push   ebx
c0000923:	e8 58 fa ff ff       	call   c0000380 <memcmp>
c0000928:	83 c4 0c             	add    esp,0xc
c000092b:	85 c0                	test   eax,eax
c000092d:	74 21                	je     c0000950 <strstr+0x50>
c000092f:	83 c3 01             	add    ebx,0x1
c0000932:	53                   	push   ebx
c0000933:	e8 48 fc ff ff       	call   c0000580 <strlen>
c0000938:	5a                   	pop    edx
c0000939:	39 f0                	cmp    eax,esi
c000093b:	73 e3                	jae    c0000920 <strstr+0x20>
c000093d:	5b                   	pop    ebx
c000093e:	31 c0                	xor    eax,eax
c0000940:	5e                   	pop    esi
c0000941:	5f                   	pop    edi
c0000942:	c3                   	ret    
c0000943:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000949:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000950:	89 d8                	mov    eax,ebx
c0000952:	5b                   	pop    ebx
c0000953:	5e                   	pop    esi
c0000954:	5f                   	pop    edi
c0000955:	c3                   	ret    
c0000956:	8d 76 00             	lea    esi,[esi+0x0]
c0000959:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000960 <toupper>:
c0000960:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000964:	0f b6 d0             	movzx  edx,al
c0000967:	f6 82 e0 28 02 c0 02 	test   BYTE PTR [edx-0x3ffdd720],0x2
c000096e:	74 03                	je     c0000973 <toupper+0x13>
c0000970:	83 e8 20             	sub    eax,0x20
c0000973:	c3                   	ret    
c0000974:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000097a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000980 <tolower>:
c0000980:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000984:	0f b6 d0             	movzx  edx,al
c0000987:	f6 82 e0 28 02 c0 01 	test   BYTE PTR [edx-0x3ffdd720],0x1
c000098e:	74 03                	je     c0000993 <tolower+0x13>
c0000990:	83 c0 20             	add    eax,0x20
c0000993:	c3                   	ret    
c0000994:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000099a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c00009a0 <simple_strtoul>:
c00009a0:	55                   	push   ebp
c00009a1:	57                   	push   edi
c00009a2:	56                   	push   esi
c00009a3:	53                   	push   ebx
c00009a4:	83 ec 08             	sub    esp,0x8
c00009a7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00009ab:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00009af:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00009b3:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c00009b6:	f6 82 e0 28 02 c0 08 	test   BYTE PTR [edx-0x3ffdd720],0x8
c00009bd:	75 11                	jne    c00009d0 <simple_strtoul+0x30>
c00009bf:	89 d0                	mov    eax,edx
c00009c1:	eb 1e                	jmp    c00009e1 <simple_strtoul+0x41>
c00009c3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00009c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00009d0:	83 c3 01             	add    ebx,0x1
c00009d3:	0f b6 13             	movzx  edx,BYTE PTR [ebx]
c00009d6:	f6 82 e0 28 02 c0 08 	test   BYTE PTR [edx-0x3ffdd720],0x8
c00009dd:	89 d0                	mov    eax,edx
c00009df:	75 ef                	jne    c00009d0 <simple_strtoul+0x30>
c00009e1:	0f be c0             	movsx  eax,al
c00009e4:	83 f8 09             	cmp    eax,0x9
c00009e7:	74 e7                	je     c00009d0 <simple_strtoul+0x30>
c00009e9:	83 f8 2d             	cmp    eax,0x2d
c00009ec:	0f 84 5e 01 00 00    	je     c0000b50 <simple_strtoul+0x1b0>
c00009f2:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00009fa:	83 f8 2b             	cmp    eax,0x2b
c00009fd:	0f 94 c0             	sete   al
c0000a00:	0f b6 c0             	movzx  eax,al
c0000a03:	01 c3                	add    ebx,eax
c0000a05:	85 ff                	test   edi,edi
c0000a07:	0f 85 d3 00 00 00    	jne    c0000ae0 <simple_strtoul+0x140>
c0000a0d:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a10:	bf 0a 00 00 00       	mov    edi,0xa
c0000a15:	83 fa 30             	cmp    edx,0x30
c0000a18:	89 d1                	mov    ecx,edx
c0000a1a:	0f 84 8b 01 00 00    	je     c0000bab <simple_strtoul+0x20b>
c0000a20:	85 d2                	test   edx,edx
c0000a22:	0f 84 58 01 00 00    	je     c0000b80 <simple_strtoul+0x1e0>
c0000a28:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000a2f:	31 ed                	xor    ebp,ebp
c0000a31:	31 f6                	xor    esi,esi
c0000a33:	eb 3a                	jmp    c0000a6f <simple_strtoul+0xcf>
c0000a35:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a39:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000a40:	83 e9 30             	sub    ecx,0x30
c0000a43:	39 f9                	cmp    ecx,edi
c0000a45:	73 59                	jae    c0000aa0 <simple_strtoul+0x100>
c0000a47:	89 c8                	mov    eax,ecx
c0000a49:	31 d2                	xor    edx,edx
c0000a4b:	f7 d0                	not    eax
c0000a4d:	f7 f7                	div    edi
c0000a4f:	39 f0                	cmp    eax,esi
c0000a51:	0f 82 e9 00 00 00    	jb     c0000b40 <simple_strtoul+0x1a0>
c0000a57:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000a5e:	0f af f7             	imul   esi,edi
c0000a61:	01 ce                	add    esi,ecx
c0000a63:	83 c3 01             	add    ebx,0x1
c0000a66:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a69:	85 d2                	test   edx,edx
c0000a6b:	89 d1                	mov    ecx,edx
c0000a6d:	74 31                	je     c0000aa0 <simple_strtoul+0x100>
c0000a6f:	0f b6 c9             	movzx  ecx,cl
c0000a72:	f6 81 e0 28 02 c0 04 	test   BYTE PTR [ecx-0x3ffdd720],0x4
c0000a79:	75 c5                	jne    c0000a40 <simple_strtoul+0xa0>
c0000a7b:	52                   	push   edx
c0000a7c:	e8 df fe ff ff       	call   c0000960 <toupper>
c0000a81:	59                   	pop    ecx
c0000a82:	0f b6 d0             	movzx  edx,al
c0000a85:	f6 82 e0 28 02 c0 01 	test   BYTE PTR [edx-0x3ffdd720],0x1
c0000a8c:	74 12                	je     c0000aa0 <simple_strtoul+0x100>
c0000a8e:	8d 48 c9             	lea    ecx,[eax-0x37]
c0000a91:	39 f9                	cmp    ecx,edi
c0000a93:	72 b2                	jb     c0000a47 <simple_strtoul+0xa7>
c0000a95:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a99:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000aa0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000aa4:	85 d2                	test   edx,edx
c0000aa6:	74 11                	je     c0000ab9 <simple_strtoul+0x119>
c0000aa8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000aab:	09 f0                	or     eax,esi
c0000aad:	0f 84 ad 00 00 00    	je     c0000b60 <simple_strtoul+0x1c0>
c0000ab3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000ab7:	89 18                	mov    DWORD PTR [eax],ebx
c0000ab9:	83 fd 01             	cmp    ebp,0x1
c0000abc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0000ac1:	0f 44 f0             	cmove  esi,eax
c0000ac4:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000ac9:	75 02                	jne    c0000acd <simple_strtoul+0x12d>
c0000acb:	f7 de                	neg    esi
c0000acd:	83 c4 08             	add    esp,0x8
c0000ad0:	89 f0                	mov    eax,esi
c0000ad2:	5b                   	pop    ebx
c0000ad3:	5e                   	pop    esi
c0000ad4:	5f                   	pop    edi
c0000ad5:	5d                   	pop    ebp
c0000ad6:	c3                   	ret    
c0000ad7:	89 f6                	mov    esi,esi
c0000ad9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000ae0:	8d 47 fe             	lea    eax,[edi-0x2]
c0000ae3:	83 f8 22             	cmp    eax,0x22
c0000ae6:	0f 87 94 00 00 00    	ja     c0000b80 <simple_strtoul+0x1e0>
c0000aec:	83 ff 08             	cmp    edi,0x8
c0000aef:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000af1:	0f 84 df 00 00 00    	je     c0000bd6 <simple_strtoul+0x236>
c0000af7:	83 ff 10             	cmp    edi,0x10
c0000afa:	0f 85 13 01 00 00    	jne    c0000c13 <simple_strtoul+0x273>
c0000b00:	0f be d1             	movsx  edx,cl
c0000b03:	bf 10 00 00 00       	mov    edi,0x10
c0000b08:	83 fa 30             	cmp    edx,0x30
c0000b0b:	0f 85 0f ff ff ff    	jne    c0000a20 <simple_strtoul+0x80>
c0000b11:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b15:	52                   	push   edx
c0000b16:	89 d1                	mov    ecx,edx
c0000b18:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b1c:	e8 5f fe ff ff       	call   c0000980 <tolower>
c0000b21:	5e                   	pop    esi
c0000b22:	83 f8 78             	cmp    eax,0x78
c0000b25:	0f 84 da 00 00 00    	je     c0000c05 <simple_strtoul+0x265>
c0000b2b:	83 c3 01             	add    ebx,0x1
c0000b2e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b31:	e9 ea fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000b36:	8d 76 00             	lea    esi,[esi+0x0]
c0000b39:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000b40:	bd 01 00 00 00       	mov    ebp,0x1
c0000b45:	31 f6                	xor    esi,esi
c0000b47:	e9 17 ff ff ff       	jmp    c0000a63 <simple_strtoul+0xc3>
c0000b4c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b50:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b58:	83 c3 01             	add    ebx,0x1
c0000b5b:	e9 a5 fe ff ff       	jmp    c0000a05 <simple_strtoul+0x65>
c0000b60:	85 db                	test   ebx,ebx
c0000b62:	74 39                	je     c0000b9d <simple_strtoul+0x1fd>
c0000b64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b68:	31 f6                	xor    esi,esi
c0000b6a:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000b6e:	89 38                	mov    DWORD PTR [eax],edi
c0000b70:	e9 44 ff ff ff       	jmp    c0000ab9 <simple_strtoul+0x119>
c0000b75:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b79:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000b80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b84:	85 c0                	test   eax,eax
c0000b86:	74 1c                	je     c0000ba4 <simple_strtoul+0x204>
c0000b88:	85 db                	test   ebx,ebx
c0000b8a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b8e:	74 68                	je     c0000bf8 <simple_strtoul+0x258>
c0000b90:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000b94:	31 f6                	xor    esi,esi
c0000b96:	89 38                	mov    DWORD PTR [eax],edi
c0000b98:	e9 27 ff ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000b9d:	31 f6                	xor    esi,esi
c0000b9f:	e9 0f ff ff ff       	jmp    c0000ab3 <simple_strtoul+0x113>
c0000ba4:	31 f6                	xor    esi,esi
c0000ba6:	e9 19 ff ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000bab:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000baf:	52                   	push   edx
c0000bb0:	89 d1                	mov    ecx,edx
c0000bb2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000bb6:	e8 c5 fd ff ff       	call   c0000980 <tolower>
c0000bbb:	5f                   	pop    edi
c0000bbc:	83 f8 78             	cmp    eax,0x78
c0000bbf:	74 2c                	je     c0000bed <simple_strtoul+0x24d>
c0000bc1:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000bc4:	83 c3 01             	add    ebx,0x1
c0000bc7:	83 fa 30             	cmp    edx,0x30
c0000bca:	74 16                	je     c0000be2 <simple_strtoul+0x242>
c0000bcc:	bf 08 00 00 00       	mov    edi,0x8
c0000bd1:	e9 4a fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000bd6:	0f be d1             	movsx  edx,cl
c0000bd9:	83 fa 30             	cmp    edx,0x30
c0000bdc:	0f 85 3e fe ff ff    	jne    c0000a20 <simple_strtoul+0x80>
c0000be2:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000be6:	83 c3 01             	add    ebx,0x1
c0000be9:	89 d1                	mov    ecx,edx
c0000beb:	eb df                	jmp    c0000bcc <simple_strtoul+0x22c>
c0000bed:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0000bf0:	83 c3 02             	add    ebx,0x2
c0000bf3:	e9 08 ff ff ff       	jmp    c0000b00 <simple_strtoul+0x160>
c0000bf8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000bfe:	31 f6                	xor    esi,esi
c0000c00:	e9 bf fe ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000c05:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0000c09:	83 c3 02             	add    ebx,0x2
c0000c0c:	89 d1                	mov    ecx,edx
c0000c0e:	e9 0d fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000c13:	0f be d1             	movsx  edx,cl
c0000c16:	e9 05 fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>

c0000c1b <largebin_index>:
c0000c1b:	89 c2                	mov    edx,eax
c0000c1d:	c1 ea 08             	shr    edx,0x8
c0000c20:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c26:	77 10                	ja     c0000c38 <largebin_index+0x1d>
c0000c28:	0f bd d2             	bsr    edx,edx
c0000c2b:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c2e:	d3 e8                	shr    eax,cl
c0000c30:	83 e0 03             	and    eax,0x3
c0000c33:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c37:	c3                   	ret    
c0000c38:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c3d:	c3                   	ret    

c0000c3e <malloc_init_state>:
c0000c3e:	8d 50 34             	lea    edx,[eax+0x34]
c0000c41:	53                   	push   ebx
c0000c42:	89 d1                	mov    ecx,edx
c0000c44:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c4a:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c4d:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c50:	83 c2 08             	add    edx,0x8
c0000c53:	39 da                	cmp    edx,ebx
c0000c55:	75 f3                	jne    c0000c4a <malloc_init_state+0xc>
c0000c57:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c61:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c63:	c7 80 54 03 00 00 00 00 01 00 	mov    DWORD PTR [eax+0x354],0x10000
c0000c6d:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c77:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c81:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c88:	83 e2 03             	and    edx,0x3
c0000c8b:	5b                   	pop    ebx
c0000c8c:	83 ca 48             	or     edx,0x48
c0000c8f:	89 10                	mov    DWORD PTR [eax],edx
c0000c91:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000c94:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000c9e:	c3                   	ret    

c0000c9f <malloc_consolidate>:
c0000c9f:	8b 10                	mov    edx,DWORD PTR [eax]
c0000ca1:	85 d2                	test   edx,edx
c0000ca3:	0f 84 d8 00 00 00    	je     c0000d81 <malloc_consolidate+0xe2>
c0000ca9:	55                   	push   ebp
c0000caa:	83 e2 fd             	and    edx,0xfffffffd
c0000cad:	57                   	push   edi
c0000cae:	89 c5                	mov    ebp,eax
c0000cb0:	56                   	push   esi
c0000cb1:	53                   	push   ebx
c0000cb2:	8d 78 34             	lea    edi,[eax+0x34]
c0000cb5:	83 ec 10             	sub    esp,0x10
c0000cb8:	89 10                	mov    DWORD PTR [eax],edx
c0000cba:	c1 ea 03             	shr    edx,0x3
c0000cbd:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000cc1:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cc5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cc9:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000ccc:	85 d2                	test   edx,edx
c0000cce:	0f 84 98 00 00 00    	je     c0000d6c <malloc_consolidate+0xcd>
c0000cd4:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000cdb:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cde:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000ce1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000ce5:	89 f9                	mov    ecx,edi
c0000ce7:	83 e1 fe             	and    ecx,0xfffffffe
c0000cea:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000ced:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cf0:	83 e3 fc             	and    ebx,0xfffffffc
c0000cf3:	83 e7 01             	and    edi,0x1
c0000cf6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000cf9:	75 14                	jne    c0000d0f <malloc_consolidate+0x70>
c0000cfb:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000cfd:	29 fa                	sub    edx,edi
c0000cff:	01 f9                	add    ecx,edi
c0000d01:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d04:	89 fb                	mov    ebx,edi
c0000d06:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d09:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d0c:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d0f:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d12:	74 40                	je     c0000d54 <malloc_consolidate+0xb5>
c0000d14:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d17:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d1a:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d1e:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d21:	83 e7 01             	and    edi,0x1
c0000d24:	75 0e                	jne    c0000d34 <malloc_consolidate+0x95>
c0000d26:	01 d9                	add    ecx,ebx
c0000d28:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d2b:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d2e:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d31:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d34:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d37:	89 ce                	mov    esi,ecx
c0000d39:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d3c:	83 ce 01             	or     esi,0x1
c0000d3f:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d42:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d45:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d49:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d4c:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d4f:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d52:	eb 0c                	jmp    c0000d60 <malloc_consolidate+0xc1>
c0000d54:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d57:	83 c9 01             	or     ecx,0x1
c0000d5a:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d5d:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d60:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d64:	85 d2                	test   edx,edx
c0000d66:	0f 85 6f ff ff ff    	jne    c0000cdb <malloc_consolidate+0x3c>
c0000d6c:	83 c5 04             	add    ebp,0x4
c0000d6f:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d73:	0f 85 50 ff ff ff    	jne    c0000cc9 <malloc_consolidate+0x2a>
c0000d79:	83 c4 10             	add    esp,0x10
c0000d7c:	5b                   	pop    ebx
c0000d7d:	5e                   	pop    esi
c0000d7e:	5f                   	pop    edi
c0000d7f:	5d                   	pop    ebp
c0000d80:	c3                   	ret    
c0000d81:	e9 b8 fe ff ff       	jmp    c0000c3e <malloc_init_state>

c0000d86 <dlfree>:
c0000d86:	57                   	push   edi
c0000d87:	56                   	push   esi
c0000d88:	53                   	push   ebx
c0000d89:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000d8d:	85 c9                	test   ecx,ecx
c0000d8f:	0f 84 01 01 00 00    	je     c0000e96 <dlfree+0x110>
c0000d95:	8b 71 fc             	mov    esi,DWORD PTR [ecx-0x4]
c0000d98:	8d 51 f8             	lea    edx,[ecx-0x8]
c0000d9b:	8b 1d 00 91 02 c0    	mov    ebx,DWORD PTR ds:0xc0029100
c0000da1:	89 f0                	mov    eax,esi
c0000da3:	83 e0 fc             	and    eax,0xfffffffc
c0000da6:	39 c3                	cmp    ebx,eax
c0000da8:	72 24                	jb     c0000dce <dlfree+0x48>
c0000daa:	c1 e8 03             	shr    eax,0x3
c0000dad:	83 cb 03             	or     ebx,0x3
c0000db0:	89 1d 00 91 02 c0    	mov    DWORD PTR ds:0xc0029100,ebx
c0000db6:	83 e8 02             	sub    eax,0x2
c0000db9:	8b 1c 85 04 91 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffd6efc]
c0000dc0:	89 19                	mov    DWORD PTR [ecx],ebx
c0000dc2:	89 14 85 04 91 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6efc],edx
c0000dc9:	e9 c8 00 00 00       	jmp    c0000e96 <dlfree+0x110>
c0000dce:	83 e6 02             	and    esi,0x2
c0000dd1:	0f 85 a0 00 00 00    	jne    c0000e77 <dlfree+0xf1>
c0000dd7:	8d 34 02             	lea    esi,[edx+eax*1]
c0000dda:	83 cb 01             	or     ebx,0x1
c0000ddd:	89 1d 00 91 02 c0    	mov    DWORD PTR ds:0xc0029100,ebx
c0000de3:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000de6:	83 e3 fc             	and    ebx,0xfffffffc
c0000de9:	f6 41 fc 01          	test   BYTE PTR [ecx-0x4],0x1
c0000ded:	75 13                	jne    c0000e02 <dlfree+0x7c>
c0000def:	8b 49 f8             	mov    ecx,DWORD PTR [ecx-0x8]
c0000df2:	29 ca                	sub    edx,ecx
c0000df4:	01 c8                	add    eax,ecx
c0000df6:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000df9:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0000dfc:	89 4f 0c             	mov    DWORD PTR [edi+0xc],ecx
c0000dff:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0000e02:	39 35 2c 91 02 c0    	cmp    DWORD PTR ds:0xc002912c,esi
c0000e08:	74 40                	je     c0000e4a <dlfree+0xc4>
c0000e0a:	8b 4c 1e 04          	mov    ecx,DWORD PTR [esi+ebx*1+0x4]
c0000e0e:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000e11:	80 e1 01             	and    cl,0x1
c0000e14:	75 0e                	jne    c0000e24 <dlfree+0x9e>
c0000e16:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e19:	01 d8                	add    eax,ebx
c0000e1b:	8b 4e 0c             	mov    ecx,DWORD PTR [esi+0xc]
c0000e1e:	89 4f 0c             	mov    DWORD PTR [edi+0xc],ecx
c0000e21:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0000e24:	8b 0d 3c 91 02 c0    	mov    ecx,DWORD PTR ds:0xc002913c
c0000e2a:	c7 42 0c 34 91 02 c0 	mov    DWORD PTR [edx+0xc],0xc0029134
c0000e31:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e34:	89 15 3c 91 02 c0    	mov    DWORD PTR ds:0xc002913c,edx
c0000e3a:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e3d:	89 c1                	mov    ecx,eax
c0000e3f:	83 c9 01             	or     ecx,0x1
c0000e42:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e45:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e48:	eb 10                	jmp    c0000e5a <dlfree+0xd4>
c0000e4a:	01 d8                	add    eax,ebx
c0000e4c:	89 c1                	mov    ecx,eax
c0000e4e:	83 c9 01             	or     ecx,0x1
c0000e51:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e54:	89 15 2c 91 02 c0    	mov    DWORD PTR ds:0xc002912c,edx
c0000e5a:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e5f:	76 35                	jbe    c0000e96 <dlfree+0x110>
c0000e61:	f6 05 00 91 02 c0 02 	test   BYTE PTR ds:0xc0029100,0x2
c0000e68:	74 2c                	je     c0000e96 <dlfree+0x110>
c0000e6a:	5b                   	pop    ebx
c0000e6b:	b8 00 91 02 c0       	mov    eax,0xc0029100
c0000e70:	5e                   	pop    esi
c0000e71:	5f                   	pop    edi
c0000e72:	e9 28 fe ff ff       	jmp    c0000c9f <malloc_consolidate>
c0000e77:	8b 49 f8             	mov    ecx,DWORD PTR [ecx-0x8]
c0000e7a:	53                   	push   ebx
c0000e7b:	53                   	push   ebx
c0000e7c:	ff 0d 50 94 02 c0    	dec    DWORD PTR ds:0xc0029450
c0000e82:	01 c8                	add    eax,ecx
c0000e84:	29 ca                	sub    edx,ecx
c0000e86:	50                   	push   eax
c0000e87:	52                   	push   edx
c0000e88:	29 05 64 94 02 c0    	sub    DWORD PTR ds:0xc0029464,eax
c0000e8e:	e8 67 ec 00 00       	call   c000fafa <munmap>
c0000e93:	83 c4 10             	add    esp,0x10
c0000e96:	5b                   	pop    ebx
c0000e97:	5e                   	pop    esi
c0000e98:	5f                   	pop    edi
c0000e99:	c3                   	ret    

c0000e9a <sYSMALLOc>:
c0000e9a:	55                   	push   ebp
c0000e9b:	57                   	push   edi
c0000e9c:	56                   	push   esi
c0000e9d:	53                   	push   ebx
c0000e9e:	89 d3                	mov    ebx,edx
c0000ea0:	83 ec 2c             	sub    esp,0x2c
c0000ea3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0000ea7:	8b 8a 5c 03 00 00    	mov    ecx,DWORD PTR [edx+0x35c]
c0000ead:	f6 02 02             	test   BYTE PTR [edx],0x2
c0000eb0:	8d 41 ff             	lea    eax,[ecx-0x1]
c0000eb3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000eb7:	74 1f                	je     c0000ed8 <sYSMALLOc+0x3e>
c0000eb9:	89 d0                	mov    eax,edx
c0000ebb:	e8 df fd ff ff       	call   c0000c9f <malloc_consolidate>
c0000ec0:	83 ec 0c             	sub    esp,0xc
c0000ec3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0000ec7:	83 e8 07             	sub    eax,0x7
c0000eca:	50                   	push   eax
c0000ecb:	e8 78 03 00 00       	call   c0001248 <dlmalloc>
c0000ed0:	83 c4 10             	add    esp,0x10
c0000ed3:	e9 68 03 00 00       	jmp    c0001240 <sYSMALLOc+0x3a6>
c0000ed8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000edc:	f7 d9                	neg    ecx
c0000ede:	39 82 4c 03 00 00    	cmp    DWORD PTR [edx+0x34c],eax
c0000ee4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0000ee8:	0f 87 be 00 00 00    	ja     c0000fac <sYSMALLOc+0x112>
c0000eee:	8b 82 54 03 00 00    	mov    eax,DWORD PTR [edx+0x354]
c0000ef4:	39 82 50 03 00 00    	cmp    DWORD PTR [edx+0x350],eax
c0000efa:	0f 8d ac 00 00 00    	jge    c0000fac <sYSMALLOc+0x112>
c0000f00:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0000f04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0000f08:	8d 74 38 0b          	lea    esi,[eax+edi*1+0xb]
c0000f0c:	21 ce                	and    esi,ecx
c0000f0e:	39 fe                	cmp    esi,edi
c0000f10:	0f 86 96 00 00 00    	jbe    c0000fac <sYSMALLOc+0x112>
c0000f16:	52                   	push   edx
c0000f17:	52                   	push   edx
c0000f18:	6a 00                	push   0x0
c0000f1a:	6a ff                	push   0xffffffff
c0000f1c:	6a 0c                	push   0xc
c0000f1e:	6a 03                	push   0x3
c0000f20:	56                   	push   esi
c0000f21:	6a 00                	push   0x0
c0000f23:	e8 74 eb 00 00       	call   c000fa9c <mmap>
c0000f28:	83 c4 20             	add    esp,0x20
c0000f2b:	83 f8 ff             	cmp    eax,0xffffffff
c0000f2e:	74 7c                	je     c0000fac <sYSMALLOc+0x112>
c0000f30:	89 c1                	mov    ecx,eax
c0000f32:	83 e1 07             	and    ecx,0x7
c0000f35:	74 13                	je     c0000f4a <sYSMALLOc+0xb0>
c0000f37:	ba 08 00 00 00       	mov    edx,0x8
c0000f3c:	89 f7                	mov    edi,esi
c0000f3e:	29 ca                	sub    edx,ecx
c0000f40:	01 d0                	add    eax,edx
c0000f42:	29 d7                	sub    edi,edx
c0000f44:	89 10                	mov    DWORD PTR [eax],edx
c0000f46:	89 fa                	mov    edx,edi
c0000f48:	eb 08                	jmp    c0000f52 <sYSMALLOc+0xb8>
c0000f4a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000f50:	89 f2                	mov    edx,esi
c0000f52:	83 ca 02             	or     edx,0x2
c0000f55:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0000f58:	8b bb 50 03 00 00    	mov    edi,DWORD PTR [ebx+0x350]
c0000f5e:	8d 57 01             	lea    edx,[edi+0x1]
c0000f61:	3b 93 58 03 00 00    	cmp    edx,DWORD PTR [ebx+0x358]
c0000f67:	89 93 50 03 00 00    	mov    DWORD PTR [ebx+0x350],edx
c0000f6d:	7e 06                	jle    c0000f75 <sYSMALLOc+0xdb>
c0000f6f:	89 93 58 03 00 00    	mov    DWORD PTR [ebx+0x358],edx
c0000f75:	03 b3 64 03 00 00    	add    esi,DWORD PTR [ebx+0x364]
c0000f7b:	3b b3 70 03 00 00    	cmp    esi,DWORD PTR [ebx+0x370]
c0000f81:	89 b3 64 03 00 00    	mov    DWORD PTR [ebx+0x364],esi
c0000f87:	76 06                	jbe    c0000f8f <sYSMALLOc+0xf5>
c0000f89:	89 b3 70 03 00 00    	mov    DWORD PTR [ebx+0x370],esi
c0000f8f:	03 b3 68 03 00 00    	add    esi,DWORD PTR [ebx+0x368]
c0000f95:	39 b3 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],esi
c0000f9b:	0f 83 41 01 00 00    	jae    c00010e2 <sYSMALLOc+0x248>
c0000fa1:	89 b3 74 03 00 00    	mov    DWORD PTR [ebx+0x374],esi
c0000fa7:	e9 36 01 00 00       	jmp    c00010e2 <sYSMALLOc+0x248>
c0000fac:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000faf:	8b ab 48 03 00 00    	mov    ebp,DWORD PTR [ebx+0x348]
c0000fb5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000fb9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0000fbc:	83 e0 fc             	and    eax,0xfffffffc
c0000fbf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000fc3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000fc7:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000fcb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000fcf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000fd3:	83 c0 10             	add    eax,0x10
c0000fd6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0000fda:	01 c5                	add    ebp,eax
c0000fdc:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000fe3:	74 04                	je     c0000fe9 <sYSMALLOc+0x14f>
c0000fe5:	2b 6c 24 04          	sub    ebp,DWORD PTR [esp+0x4]
c0000fe9:	03 6c 24 10          	add    ebp,DWORD PTR [esp+0x10]
c0000fed:	23 6c 24 14          	and    ebp,DWORD PTR [esp+0x14]
c0000ff1:	89 ee                	mov    esi,ebp
c0000ff3:	7f 19                	jg     c000100e <sYSMALLOc+0x174>
c0000ff5:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000ffc:	74 28                	je     c0001026 <sYSMALLOc+0x18c>
c0000ffe:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001002:	03 74 24 04          	add    esi,DWORD PTR [esp+0x4]
c0001006:	01 ee                	add    esi,ebp
c0001008:	23 74 24 14          	and    esi,DWORD PTR [esp+0x14]
c000100c:	eb 18                	jmp    c0001026 <sYSMALLOc+0x18c>
c000100e:	83 ec 0c             	sub    esp,0xc
c0001011:	55                   	push   ebp
c0001012:	e8 4f ea 00 00       	call   c000fa66 <sbrk_thunk>
c0001017:	83 c4 10             	add    esp,0x10
c000101a:	89 c7                	mov    edi,eax
c000101c:	83 c8 ff             	or     eax,0xffffffff
c000101f:	83 ff ff             	cmp    edi,0xffffffff
c0001022:	75 42                	jne    c0001066 <sYSMALLOc+0x1cc>
c0001024:	eb cf                	jmp    c0000ff5 <sYSMALLOc+0x15b>
c0001026:	81 fe ff bf 00 00    	cmp    esi,0xbfff
c000102c:	77 05                	ja     c0001033 <sYSMALLOc+0x199>
c000102e:	be 00 c0 00 00       	mov    esi,0xc000
c0001033:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0001037:	77 07                	ja     c0001040 <sYSMALLOc+0x1a6>
c0001039:	31 c0                	xor    eax,eax
c000103b:	e9 00 02 00 00       	jmp    c0001240 <sYSMALLOc+0x3a6>
c0001040:	50                   	push   eax
c0001041:	50                   	push   eax
c0001042:	6a 00                	push   0x0
c0001044:	6a ff                	push   0xffffffff
c0001046:	6a 0c                	push   0xc
c0001048:	6a 03                	push   0x3
c000104a:	56                   	push   esi
c000104b:	6a 00                	push   0x0
c000104d:	e8 4a ea 00 00       	call   c000fa9c <mmap>
c0001052:	83 c4 20             	add    esp,0x20
c0001055:	83 f8 ff             	cmp    eax,0xffffffff
c0001058:	89 c7                	mov    edi,eax
c000105a:	74 dd                	je     c0001039 <sYSMALLOc+0x19f>
c000105c:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001063:	8d 04 30             	lea    eax,[eax+esi*1]
c0001066:	8b 8b 68 03 00 00    	mov    ecx,DWORD PTR [ebx+0x368]
c000106c:	01 f1                	add    ecx,esi
c000106e:	39 7c 24 18          	cmp    DWORD PTR [esp+0x18],edi
c0001072:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c0001078:	75 70                	jne    c00010ea <sYSMALLOc+0x250>
c000107a:	83 f8 ff             	cmp    eax,0xffffffff
c000107d:	75 6b                	jne    c00010ea <sYSMALLOc+0x250>
c000107f:	03 74 24 04          	add    esi,DWORD PTR [esp+0x4]
c0001083:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001087:	83 ce 01             	or     esi,0x1
c000108a:	89 70 04             	mov    DWORD PTR [eax+0x4],esi
c000108d:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0001093:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0001099:	73 06                	jae    c00010a1 <sYSMALLOc+0x207>
c000109b:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c00010a1:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c00010a7:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c00010ad:	73 06                	jae    c00010b5 <sYSMALLOc+0x21b>
c00010af:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c00010b5:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00010b8:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010bb:	83 e2 fc             	and    edx,0xfffffffc
c00010be:	39 54 24 1c          	cmp    DWORD PTR [esp+0x1c],edx
c00010c2:	0f 87 71 ff ff ff    	ja     c0001039 <sYSMALLOc+0x19f>
c00010c8:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00010cc:	8d 0c 38             	lea    ecx,[eax+edi*1]
c00010cf:	29 fa                	sub    edx,edi
c00010d1:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00010d4:	89 fb                	mov    ebx,edi
c00010d6:	83 ca 01             	or     edx,0x1
c00010d9:	83 cb 01             	or     ebx,0x1
c00010dc:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00010df:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010e2:	83 c0 08             	add    eax,0x8
c00010e5:	e9 56 01 00 00       	jmp    c0001240 <sYSMALLOc+0x3a6>
c00010ea:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c00010f0:	f6 c2 01             	test   dl,0x1
c00010f3:	74 1e                	je     c0001113 <sYSMALLOc+0x279>
c00010f5:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00010fa:	0f 84 bb 00 00 00    	je     c00011bb <sYSMALLOc+0x321>
c0001100:	39 7c 24 18          	cmp    DWORD PTR [esp+0x18],edi
c0001104:	0f 86 b1 00 00 00    	jbe    c00011bb <sYSMALLOc+0x321>
c000110a:	83 e2 fe             	and    edx,0xfffffffe
c000110d:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0001113:	83 f8 ff             	cmp    eax,0xffffffff
c0001116:	89 fd                	mov    ebp,edi
c0001118:	75 24                	jne    c000113e <sYSMALLOc+0x2a4>
c000111a:	83 ec 0c             	sub    esp,0xc
c000111d:	89 fd                	mov    ebp,edi
c000111f:	6a 00                	push   0x0
c0001121:	e8 40 e9 00 00       	call   c000fa66 <sbrk_thunk>
c0001126:	83 c4 10             	add    esp,0x10
c0001129:	89 c2                	mov    edx,eax
c000112b:	29 fa                	sub    edx,edi
c000112d:	29 f2                	sub    edx,esi
c000112f:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0001135:	83 f8 ff             	cmp    eax,0xffffffff
c0001138:	0f 84 4f ff ff ff    	je     c000108d <sYSMALLOc+0x1f3>
c000113e:	31 c9                	xor    ecx,ecx
c0001140:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0001143:	29 e8                	sub    eax,ebp
c0001145:	01 c8                	add    eax,ecx
c0001147:	83 c8 01             	or     eax,0x1
c000114a:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000114d:	01 8b 68 03 00 00    	add    DWORD PTR [ebx+0x368],ecx
c0001153:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0001158:	0f 84 2f ff ff ff    	je     c000108d <sYSMALLOc+0x1f3>
c000115e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0001162:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0001166:	83 ee 0c             	sub    esi,0xc
c0001169:	83 e6 f8             	and    esi,0xfffffff8
c000116c:	89 f0                	mov    eax,esi
c000116e:	83 c8 01             	or     eax,0x1
c0001171:	83 fe 0f             	cmp    esi,0xf
c0001174:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0001177:	c7 44 37 04 05 00 00 00 	mov    DWORD PTR [edi+esi*1+0x4],0x5
c000117f:	c7 44 37 08 05 00 00 00 	mov    DWORD PTR [edi+esi*1+0x8],0x5
c0001187:	0f 86 00 ff ff ff    	jbe    c000108d <sYSMALLOc+0x1f3>
c000118d:	83 ec 0c             	sub    esp,0xc
c0001190:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0001196:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c00011a0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00011a4:	83 c0 08             	add    eax,0x8
c00011a7:	50                   	push   eax
c00011a8:	e8 d9 fb ff ff       	call   c0000d86 <dlfree>
c00011ad:	83 c4 10             	add    esp,0x10
c00011b0:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c00011b6:	e9 d2 fe ff ff       	jmp    c000108d <sYSMALLOc+0x1f3>
c00011bb:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00011c0:	74 0e                	je     c00011d0 <sYSMALLOc+0x336>
c00011c2:	89 f8                	mov    eax,edi
c00011c4:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c00011c8:	01 c1                	add    ecx,eax
c00011ca:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c00011d0:	89 fa                	mov    edx,edi
c00011d2:	83 e2 07             	and    edx,0x7
c00011d5:	74 0c                	je     c00011e3 <sYSMALLOc+0x349>
c00011d7:	b8 08 00 00 00       	mov    eax,0x8
c00011dc:	29 d0                	sub    eax,edx
c00011de:	8d 2c 07             	lea    ebp,[edi+eax*1]
c00011e1:	eb 04                	jmp    c00011e7 <sYSMALLOc+0x34d>
c00011e3:	89 fd                	mov    ebp,edi
c00011e5:	31 c0                	xor    eax,eax
c00011e7:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c00011eb:	83 ec 0c             	sub    esp,0xc
c00011ee:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00011f2:	8d 14 06             	lea    edx,[esi+eax*1]
c00011f5:	01 fa                	add    edx,edi
c00011f7:	01 d1                	add    ecx,edx
c00011f9:	29 d0                	sub    eax,edx
c00011fb:	23 4c 24 20          	and    ecx,DWORD PTR [esp+0x20]
c00011ff:	01 c1                	add    ecx,eax
c0001201:	51                   	push   ecx
c0001202:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0001206:	e8 5b e8 00 00       	call   c000fa66 <sbrk_thunk>
c000120b:	83 c4 10             	add    esp,0x10
c000120e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001212:	83 f8 ff             	cmp    eax,0xffffffff
c0001215:	75 12                	jne    c0001229 <sYSMALLOc+0x38f>
c0001217:	83 ec 0c             	sub    esp,0xc
c000121a:	6a 00                	push   0x0
c000121c:	e8 45 e8 00 00       	call   c000fa66 <sbrk_thunk>
c0001221:	83 c4 10             	add    esp,0x10
c0001224:	e9 0c ff ff ff       	jmp    c0001135 <sYSMALLOc+0x29b>
c0001229:	39 f8                	cmp    eax,edi
c000122b:	0f 83 0f ff ff ff    	jae    c0001140 <sYSMALLOc+0x2a6>
c0001231:	8d 04 37             	lea    eax,[edi+esi*1]
c0001234:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c000123b:	e9 f5 fe ff ff       	jmp    c0001135 <sYSMALLOc+0x29b>
c0001240:	83 c4 2c             	add    esp,0x2c
c0001243:	5b                   	pop    ebx
c0001244:	5e                   	pop    esi
c0001245:	5f                   	pop    edi
c0001246:	5d                   	pop    ebp
c0001247:	c3                   	ret    

c0001248 <dlmalloc>:
c0001248:	55                   	push   ebp
c0001249:	57                   	push   edi
c000124a:	56                   	push   esi
c000124b:	53                   	push   ebx
c000124c:	83 ec 1c             	sub    esp,0x1c
c000124f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001253:	83 f8 df             	cmp    eax,0xffffffdf
c0001256:	0f 87 70 03 00 00    	ja     c00015cc <dlmalloc+0x384>
c000125c:	83 c0 0b             	add    eax,0xb
c000125f:	be 10 00 00 00       	mov    esi,0x10
c0001264:	83 f8 0f             	cmp    eax,0xf
c0001267:	76 05                	jbe    c000126e <dlmalloc+0x26>
c0001269:	83 e0 f8             	and    eax,0xfffffff8
c000126c:	89 c6                	mov    esi,eax
c000126e:	8b 3d 00 91 02 c0    	mov    edi,DWORD PTR ds:0xc0029100
c0001274:	f7 c7 01 00 00 00    	test   edi,0x1
c000127a:	75 17                	jne    c0001293 <dlmalloc+0x4b>
c000127c:	85 ff                	test   edi,edi
c000127e:	0f 85 05 03 00 00    	jne    c0001589 <dlmalloc+0x341>
c0001284:	b8 00 91 02 c0       	mov    eax,0xc0029100
c0001289:	e8 11 fa ff ff       	call   c0000c9f <malloc_consolidate>
c000128e:	e9 f6 02 00 00       	jmp    c0001589 <dlmalloc+0x341>
c0001293:	39 f7                	cmp    edi,esi
c0001295:	72 1f                	jb     c00012b6 <dlmalloc+0x6e>
c0001297:	89 f2                	mov    edx,esi
c0001299:	c1 ea 03             	shr    edx,0x3
c000129c:	83 ea 02             	sub    edx,0x2
c000129f:	8b 04 95 04 91 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6efc]
c00012a6:	85 c0                	test   eax,eax
c00012a8:	74 0c                	je     c00012b6 <dlmalloc+0x6e>
c00012aa:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c00012ad:	89 0c 95 04 91 02 c0 	mov    DWORD PTR [edx*4-0x3ffd6efc],ecx
c00012b4:	eb 30                	jmp    c00012e6 <dlmalloc+0x9e>
c00012b6:	81 fe ff 00 00 00    	cmp    esi,0xff
c00012bc:	89 f0                	mov    eax,esi
c00012be:	77 2e                	ja     c00012ee <dlmalloc+0xa6>
c00012c0:	c1 e8 03             	shr    eax,0x3
c00012c3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00012c7:	8d 14 c5 34 91 02 c0 	lea    edx,[eax*8-0x3ffd6ecc]
c00012ce:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00012d1:	8d 5a f8             	lea    ebx,[edx-0x8]
c00012d4:	39 c3                	cmp    ebx,eax
c00012d6:	74 2e                	je     c0001306 <dlmalloc+0xbe>
c00012d8:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00012db:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00012e0:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00012e3:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00012e6:	83 c0 08             	add    eax,0x8
c00012e9:	e9 e0 02 00 00       	jmp    c00015ce <dlmalloc+0x386>
c00012ee:	e8 28 f9 ff ff       	call   c0000c1b <largebin_index>
c00012f3:	83 e7 02             	and    edi,0x2
c00012f6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00012fa:	74 0a                	je     c0001306 <dlmalloc+0xbe>
c00012fc:	b8 00 91 02 c0       	mov    eax,0xc0029100
c0001301:	e8 99 f9 ff ff       	call   c0000c9f <malloc_consolidate>
c0001306:	8d 46 10             	lea    eax,[esi+0x10]
c0001309:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000130d:	8b 1d 40 91 02 c0    	mov    ebx,DWORD PTR ds:0xc0029140
c0001313:	81 fb 34 91 02 c0    	cmp    ebx,0xc0029134
c0001319:	0f 84 13 01 00 00    	je     c0001432 <dlmalloc+0x1ea>
c000131f:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0001322:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0001325:	83 e7 fc             	and    edi,0xfffffffc
c0001328:	81 fe ff 00 00 00    	cmp    esi,0xff
c000132e:	77 4c                	ja     c000137c <dlmalloc+0x134>
c0001330:	3d 34 91 02 c0       	cmp    eax,0xc0029134
c0001335:	75 45                	jne    c000137c <dlmalloc+0x134>
c0001337:	39 1d 30 91 02 c0    	cmp    DWORD PTR ds:0xc0029130,ebx
c000133d:	75 3d                	jne    c000137c <dlmalloc+0x134>
c000133f:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0001343:	73 37                	jae    c000137c <dlmalloc+0x134>
c0001345:	8d 04 33             	lea    eax,[ebx+esi*1]
c0001348:	89 fa                	mov    edx,edi
c000134a:	a3 3c 91 02 c0       	mov    ds:0xc002913c,eax
c000134f:	29 f2                	sub    edx,esi
c0001351:	83 ce 01             	or     esi,0x1
c0001354:	a3 40 91 02 c0       	mov    ds:0xc0029140,eax
c0001359:	89 d1                	mov    ecx,edx
c000135b:	a3 30 91 02 c0       	mov    ds:0xc0029130,eax
c0001360:	83 c9 01             	or     ecx,0x1
c0001363:	c7 40 08 34 91 02 c0 	mov    DWORD PTR [eax+0x8],0xc0029134
c000136a:	c7 40 0c 34 91 02 c0 	mov    DWORD PTR [eax+0xc],0xc0029134
c0001371:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001374:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001377:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c000137a:	eb 15                	jmp    c0001391 <dlmalloc+0x149>
c000137c:	a3 40 91 02 c0       	mov    ds:0xc0029140,eax
c0001381:	39 fe                	cmp    esi,edi
c0001383:	c7 40 08 34 91 02 c0 	mov    DWORD PTR [eax+0x8],0xc0029134
c000138a:	75 0d                	jne    c0001399 <dlmalloc+0x151>
c000138c:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001391:	8d 43 08             	lea    eax,[ebx+0x8]
c0001394:	e9 35 02 00 00       	jmp    c00015ce <dlmalloc+0x386>
c0001399:	81 ff ff 00 00 00    	cmp    edi,0xff
c000139f:	89 f8                	mov    eax,edi
c00013a1:	77 19                	ja     c00013bc <dlmalloc+0x174>
c00013a3:	c1 e8 03             	shr    eax,0x3
c00013a6:	8d 14 00             	lea    edx,[eax+eax*1]
c00013a9:	83 c2 0d             	add    edx,0xd
c00013ac:	8d 2c 95 f8 90 02 c0 	lea    ebp,[edx*4-0x3ffd6f08]
c00013b3:	8b 14 95 00 91 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6f00]
c00013ba:	eb 46                	jmp    c0001402 <dlmalloc+0x1ba>
c00013bc:	e8 5a f8 ff ff       	call   c0000c1b <largebin_index>
c00013c1:	8d 14 00             	lea    edx,[eax+eax*1]
c00013c4:	83 c2 0d             	add    edx,0xd
c00013c7:	8d 0c 95 00 91 02 c0 	lea    ecx,[edx*4-0x3ffd6f00]
c00013ce:	8b 14 95 00 91 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6f00]
c00013d5:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00013d8:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00013dc:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00013e0:	89 d5                	mov    ebp,edx
c00013e2:	74 1e                	je     c0001402 <dlmalloc+0x1ba>
c00013e4:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00013e7:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00013ea:	77 12                	ja     c00013fe <dlmalloc+0x1b6>
c00013ec:	83 cf 01             	or     edi,0x1
c00013ef:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00013f2:	76 05                	jbe    c00013f9 <dlmalloc+0x1b1>
c00013f4:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00013f7:	eb f6                	jmp    c00013ef <dlmalloc+0x1a7>
c00013f9:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00013fc:	eb 04                	jmp    c0001402 <dlmalloc+0x1ba>
c00013fe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001402:	89 c7                	mov    edi,eax
c0001404:	88 c1                	mov    cl,al
c0001406:	c1 ff 05             	sar    edi,0x5
c0001409:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000140d:	bf 01 00 00 00       	mov    edi,0x1
c0001412:	d3 e7                	shl    edi,cl
c0001414:	89 f8                	mov    eax,edi
c0001416:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000141a:	09 04 bd 34 94 02 c0 	or     DWORD PTR [edi*4-0x3ffd6bcc],eax
c0001421:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c0001424:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0001427:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c000142a:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c000142d:	e9 db fe ff ff       	jmp    c000130d <dlmalloc+0xc5>
c0001432:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001438:	76 78                	jbe    c00014b2 <dlmalloc+0x26a>
c000143a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000143e:	8d 04 c5 34 91 02 c0 	lea    eax,[eax*8-0x3ffd6ecc]
c0001445:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001448:	8d 48 f8             	lea    ecx,[eax-0x8]
c000144b:	39 ca                	cmp    edx,ecx
c000144d:	74 63                	je     c00014b2 <dlmalloc+0x26a>
c000144f:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0001452:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001455:	83 e3 fc             	and    ebx,0xfffffffc
c0001458:	39 de                	cmp    esi,ebx
c000145a:	77 52                	ja     c00014ae <dlmalloc+0x266>
c000145c:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c000145f:	89 df                	mov    edi,ebx
c0001461:	01 d3                	add    ebx,edx
c0001463:	29 f7                	sub    edi,esi
c0001465:	83 ff 0f             	cmp    edi,0xf
c0001468:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000146b:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000146e:	8d 42 08             	lea    eax,[edx+0x8]
c0001471:	77 09                	ja     c000147c <dlmalloc+0x234>
c0001473:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001477:	e9 52 01 00 00       	jmp    c00015ce <dlmalloc+0x386>
c000147c:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000147f:	83 ce 01             	or     esi,0x1
c0001482:	89 0d 3c 91 02 c0    	mov    DWORD PTR ds:0xc002913c,ecx
c0001488:	89 0d 40 91 02 c0    	mov    DWORD PTR ds:0xc0029140,ecx
c000148e:	c7 41 08 34 91 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0029134
c0001495:	c7 41 0c 34 91 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0029134
c000149c:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000149f:	89 fa                	mov    edx,edi
c00014a1:	83 ca 01             	or     edx,0x1
c00014a4:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00014a7:	89 3b                	mov    DWORD PTR [ebx],edi
c00014a9:	e9 20 01 00 00       	jmp    c00015ce <dlmalloc+0x386>
c00014ae:	89 c2                	mov    edx,eax
c00014b0:	eb 99                	jmp    c000144b <dlmalloc+0x203>
c00014b2:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00014b6:	b8 01 00 00 00       	mov    eax,0x1
c00014bb:	41                   	inc    ecx
c00014bc:	8d 14 cd 2c 91 02 c0 	lea    edx,[ecx*8-0x3ffd6ed4]
c00014c3:	89 cb                	mov    ebx,ecx
c00014c5:	c1 eb 05             	shr    ebx,0x5
c00014c8:	8b 3c 9d 34 94 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd6bcc]
c00014cf:	d3 e0                	shl    eax,cl
c00014d1:	39 f8                	cmp    eax,edi
c00014d3:	77 04                	ja     c00014d9 <dlmalloc+0x291>
c00014d5:	85 c0                	test   eax,eax
c00014d7:	75 26                	jne    c00014ff <dlmalloc+0x2b7>
c00014d9:	43                   	inc    ebx
c00014da:	83 fb 02             	cmp    ebx,0x2
c00014dd:	0f 87 a6 00 00 00    	ja     c0001589 <dlmalloc+0x341>
c00014e3:	8b 3c 9d 34 94 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd6bcc]
c00014ea:	85 ff                	test   edi,edi
c00014ec:	74 eb                	je     c00014d9 <dlmalloc+0x291>
c00014ee:	89 d8                	mov    eax,ebx
c00014f0:	c1 e0 06             	shl    eax,0x6
c00014f3:	8d 14 85 2c 91 02 c0 	lea    edx,[eax*4-0x3ffd6ed4]
c00014fa:	b8 01 00 00 00       	mov    eax,0x1
c00014ff:	85 f8                	test   eax,edi
c0001501:	75 07                	jne    c000150a <dlmalloc+0x2c2>
c0001503:	83 c2 08             	add    edx,0x8
c0001506:	01 c0                	add    eax,eax
c0001508:	eb f5                	jmp    c00014ff <dlmalloc+0x2b7>
c000150a:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c000150d:	39 ca                	cmp    edx,ecx
c000150f:	75 14                	jne    c0001525 <dlmalloc+0x2dd>
c0001511:	89 c1                	mov    ecx,eax
c0001513:	83 c2 08             	add    edx,0x8
c0001516:	f7 d1                	not    ecx
c0001518:	01 c0                	add    eax,eax
c000151a:	21 cf                	and    edi,ecx
c000151c:	89 3c 9d 34 94 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd6bcc],edi
c0001523:	eb ac                	jmp    c00014d1 <dlmalloc+0x289>
c0001525:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0001528:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c000152b:	83 e0 fc             	and    eax,0xfffffffc
c000152e:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001531:	89 c3                	mov    ebx,eax
c0001533:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001536:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001539:	29 f3                	sub    ebx,esi
c000153b:	8d 41 08             	lea    eax,[ecx+0x8]
c000153e:	83 fb 0f             	cmp    ebx,0xf
c0001541:	77 09                	ja     c000154c <dlmalloc+0x304>
c0001543:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001547:	e9 82 00 00 00       	jmp    c00015ce <dlmalloc+0x386>
c000154c:	8d 3c 31             	lea    edi,[ecx+esi*1]
c000154f:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001555:	89 3d 3c 91 02 c0    	mov    DWORD PTR ds:0xc002913c,edi
c000155b:	89 3d 40 91 02 c0    	mov    DWORD PTR ds:0xc0029140,edi
c0001561:	c7 47 08 34 91 02 c0 	mov    DWORD PTR [edi+0x8],0xc0029134
c0001568:	c7 47 0c 34 91 02 c0 	mov    DWORD PTR [edi+0xc],0xc0029134
c000156f:	77 06                	ja     c0001577 <dlmalloc+0x32f>
c0001571:	89 3d 30 91 02 c0    	mov    DWORD PTR ds:0xc0029130,edi
c0001577:	83 ce 01             	or     esi,0x1
c000157a:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c000157d:	89 d9                	mov    ecx,ebx
c000157f:	83 c9 01             	or     ecx,0x1
c0001582:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001585:	89 1a                	mov    DWORD PTR [edx],ebx
c0001587:	eb 45                	jmp    c00015ce <dlmalloc+0x386>
c0001589:	a1 2c 91 02 c0       	mov    eax,ds:0xc002912c
c000158e:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001591:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001594:	83 e2 fc             	and    edx,0xfffffffc
c0001597:	39 d1                	cmp    ecx,edx
c0001599:	77 1e                	ja     c00015b9 <dlmalloc+0x371>
c000159b:	89 f3                	mov    ebx,esi
c000159d:	29 f2                	sub    edx,esi
c000159f:	8d 0c 30             	lea    ecx,[eax+esi*1]
c00015a2:	83 cb 01             	or     ebx,0x1
c00015a5:	89 0d 2c 91 02 c0    	mov    DWORD PTR ds:0xc002912c,ecx
c00015ab:	83 ca 01             	or     edx,0x1
c00015ae:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015b1:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00015b4:	e9 2d fd ff ff       	jmp    c00012e6 <dlmalloc+0x9e>
c00015b9:	83 c4 1c             	add    esp,0x1c
c00015bc:	89 f0                	mov    eax,esi
c00015be:	5b                   	pop    ebx
c00015bf:	ba 00 91 02 c0       	mov    edx,0xc0029100
c00015c4:	5e                   	pop    esi
c00015c5:	5f                   	pop    edi
c00015c6:	5d                   	pop    ebp
c00015c7:	e9 ce f8 ff ff       	jmp    c0000e9a <sYSMALLOc>
c00015cc:	31 c0                	xor    eax,eax
c00015ce:	83 c4 1c             	add    esp,0x1c
c00015d1:	5b                   	pop    ebx
c00015d2:	5e                   	pop    esi
c00015d3:	5f                   	pop    edi
c00015d4:	5d                   	pop    ebp
c00015d5:	c3                   	ret    

c00015d6 <iALLOc>:
c00015d6:	55                   	push   ebp
c00015d7:	89 c5                	mov    ebp,eax
c00015d9:	57                   	push   edi
c00015da:	56                   	push   esi
c00015db:	53                   	push   ebx
c00015dc:	83 ec 2c             	sub    esp,0x2c
c00015df:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00015e3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00015e7:	83 3d 00 91 02 c0 00 	cmp    DWORD PTR ds:0xc0029100,0x0
c00015ee:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00015f2:	75 12                	jne    c0001606 <iALLOc+0x30>
c00015f4:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00015f8:	b8 00 91 02 c0       	mov    eax,0xc0029100
c00015fd:	e8 9d f6 ff ff       	call   c0000c9f <malloc_consolidate>
c0001602:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001606:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000160b:	74 12                	je     c000161f <iALLOc+0x49>
c000160d:	85 ed                	test   ebp,ebp
c000160f:	0f 84 64 01 00 00    	je     c0001779 <iALLOc+0x1a3>
c0001615:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000161d:	eb 33                	jmp    c0001652 <iALLOc+0x7c>
c000161f:	85 ed                	test   ebp,ebp
c0001621:	75 14                	jne    c0001637 <iALLOc+0x61>
c0001623:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c000162b:	83 c4 2c             	add    esp,0x2c
c000162e:	5b                   	pop    ebx
c000162f:	5e                   	pop    esi
c0001630:	5f                   	pop    edi
c0001631:	5d                   	pop    ebp
c0001632:	e9 11 fc ff ff       	jmp    c0001248 <dlmalloc>
c0001637:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c000163f:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c0001646:	83 f8 0f             	cmp    eax,0xf
c0001649:	76 07                	jbe    c0001652 <iALLOc+0x7c>
c000164b:	83 e0 f8             	and    eax,0xfffffff8
c000164e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001652:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001657:	75 09                	jne    c0001662 <iALLOc+0x8c>
c0001659:	89 d0                	mov    eax,edx
c000165b:	31 f6                	xor    esi,esi
c000165d:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001660:	eb 3b                	jmp    c000169d <iALLOc+0xc7>
c0001662:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c000166a:	8b 02                	mov    eax,DWORD PTR [edx]
c000166c:	83 c0 0b             	add    eax,0xb
c000166f:	83 f8 0f             	cmp    eax,0xf
c0001672:	76 07                	jbe    c000167b <iALLOc+0xa5>
c0001674:	83 e0 f8             	and    eax,0xfffffff8
c0001677:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000167b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000167f:	0f af f5             	imul   esi,ebp
c0001682:	eb 25                	jmp    c00016a9 <iALLOc+0xd3>
c0001684:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001686:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001689:	bb 10 00 00 00       	mov    ebx,0x10
c000168e:	83 f9 0f             	cmp    ecx,0xf
c0001691:	76 05                	jbe    c0001698 <iALLOc+0xc2>
c0001693:	83 e1 f8             	and    ecx,0xfffffff8
c0001696:	89 cb                	mov    ebx,ecx
c0001698:	01 de                	add    esi,ebx
c000169a:	83 c0 04             	add    eax,0x4
c000169d:	39 c7                	cmp    edi,eax
c000169f:	75 e3                	jne    c0001684 <iALLOc+0xae>
c00016a1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00016a9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00016ad:	83 ec 0c             	sub    esp,0xc
c00016b0:	8b 1d 54 94 02 c0    	mov    ebx,DWORD PTR ds:0xc0029454
c00016b6:	c7 05 54 94 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029454,0x0
c00016c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00016c4:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c00016c8:	50                   	push   eax
c00016c9:	e8 7a fb ff ff       	call   c0001248 <dlmalloc>
c00016ce:	83 c4 10             	add    esp,0x10
c00016d1:	89 1d 54 94 02 c0    	mov    DWORD PTR ds:0xc0029454,ebx
c00016d7:	85 c0                	test   eax,eax
c00016d9:	0f 84 92 00 00 00    	je     c0001771 <iALLOc+0x19b>
c00016df:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00016e2:	8d 78 f8             	lea    edi,[eax-0x8]
c00016e5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00016e9:	83 e3 fc             	and    ebx,0xfffffffc
c00016ec:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00016f1:	74 1e                	je     c0001711 <iALLOc+0x13b>
c00016f3:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00016f7:	89 d9                	mov    ecx,ebx
c00016f9:	52                   	push   edx
c00016fa:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00016fe:	83 e9 04             	sub    ecx,0x4
c0001701:	51                   	push   ecx
c0001702:	6a 00                	push   0x0
c0001704:	50                   	push   eax
c0001705:	e8 e6 ed ff ff       	call   c00004f0 <memset>
c000170a:	83 c4 10             	add    esp,0x10
c000170d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001711:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0001716:	75 14                	jne    c000172c <iALLOc+0x156>
c0001718:	8d 04 37             	lea    eax,[edi+esi*1]
c000171b:	29 f3                	sub    ebx,esi
c000171d:	8d 48 08             	lea    ecx,[eax+0x8]
c0001720:	83 cb 01             	or     ebx,0x1
c0001723:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001726:	89 f3                	mov    ebx,esi
c0001728:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000172c:	31 c0                	xor    eax,eax
c000172e:	4d                   	dec    ebp
c000172f:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001733:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001736:	39 c5                	cmp    ebp,eax
c0001738:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c000173b:	74 2c                	je     c0001769 <iALLOc+0x193>
c000173d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001741:	85 c9                	test   ecx,ecx
c0001743:	75 15                	jne    c000175a <iALLOc+0x184>
c0001745:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001748:	8d 71 0b             	lea    esi,[ecx+0xb]
c000174b:	b9 10 00 00 00       	mov    ecx,0x10
c0001750:	83 fe 0f             	cmp    esi,0xf
c0001753:	76 05                	jbe    c000175a <iALLOc+0x184>
c0001755:	83 e6 f8             	and    esi,0xfffffff8
c0001758:	89 f1                	mov    ecx,esi
c000175a:	89 ce                	mov    esi,ecx
c000175c:	29 cb                	sub    ebx,ecx
c000175e:	83 ce 01             	or     esi,0x1
c0001761:	40                   	inc    eax
c0001762:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001765:	01 cf                	add    edi,ecx
c0001767:	eb c6                	jmp    c000172f <iALLOc+0x159>
c0001769:	83 cb 01             	or     ebx,0x1
c000176c:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000176f:	eb 08                	jmp    c0001779 <iALLOc+0x1a3>
c0001771:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001779:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000177d:	83 c4 2c             	add    esp,0x2c
c0001780:	5b                   	pop    ebx
c0001781:	5e                   	pop    esi
c0001782:	5f                   	pop    edi
c0001783:	5d                   	pop    ebp
c0001784:	c3                   	ret    

c0001785 <dlrealloc>:
c0001785:	55                   	push   ebp
c0001786:	57                   	push   edi
c0001787:	56                   	push   esi
c0001788:	53                   	push   ebx
c0001789:	83 ec 1c             	sub    esp,0x1c
c000178c:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001790:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001794:	85 db                	test   ebx,ebx
c0001796:	75 10                	jne    c00017a8 <dlrealloc+0x23>
c0001798:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000179c:	83 c4 1c             	add    esp,0x1c
c000179f:	5b                   	pop    ebx
c00017a0:	5e                   	pop    esi
c00017a1:	5f                   	pop    edi
c00017a2:	5d                   	pop    ebp
c00017a3:	e9 a0 fa ff ff       	jmp    c0001248 <dlmalloc>
c00017a8:	83 f8 df             	cmp    eax,0xffffffdf
c00017ab:	0f 87 a6 01 00 00    	ja     c0001957 <dlrealloc+0x1d2>
c00017b1:	83 c0 0b             	add    eax,0xb
c00017b4:	bd 10 00 00 00       	mov    ebp,0x10
c00017b9:	83 f8 0f             	cmp    eax,0xf
c00017bc:	76 05                	jbe    c00017c3 <dlrealloc+0x3e>
c00017be:	83 e0 f8             	and    eax,0xfffffff8
c00017c1:	89 c5                	mov    ebp,eax
c00017c3:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00017c6:	89 ce                	mov    esi,ecx
c00017c8:	83 e6 fc             	and    esi,0xfffffffc
c00017cb:	f6 c1 02             	test   cl,0x2
c00017ce:	0f 85 4e 01 00 00    	jne    c0001922 <dlrealloc+0x19d>
c00017d4:	8d 7b f8             	lea    edi,[ebx-0x8]
c00017d7:	39 f5                	cmp    ebp,esi
c00017d9:	0f 86 04 01 00 00    	jbe    c00018e3 <dlrealloc+0x15e>
c00017df:	8d 14 37             	lea    edx,[edi+esi*1]
c00017e2:	39 15 2c 91 02 c0    	cmp    DWORD PTR ds:0xc002912c,edx
c00017e8:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00017eb:	75 33                	jne    c0001820 <dlrealloc+0x9b>
c00017ed:	83 e0 fc             	and    eax,0xfffffffc
c00017f0:	01 f0                	add    eax,esi
c00017f2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00017f6:	8d 45 10             	lea    eax,[ebp+0x10]
c00017f9:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00017fd:	77 49                	ja     c0001848 <dlrealloc+0xc3>
c00017ff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001803:	83 e1 01             	and    ecx,0x1
c0001806:	01 ef                	add    edi,ebp
c0001808:	09 e9                	or     ecx,ebp
c000180a:	89 4b fc             	mov    DWORD PTR [ebx-0x4],ecx
c000180d:	89 3d 2c 91 02 c0    	mov    DWORD PTR ds:0xc002912c,edi
c0001813:	29 e8                	sub    eax,ebp
c0001815:	83 c8 01             	or     eax,0x1
c0001818:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c000181b:	e9 39 01 00 00       	jmp    c0001959 <dlrealloc+0x1d4>
c0001820:	89 c1                	mov    ecx,eax
c0001822:	83 e1 fe             	and    ecx,0xfffffffe
c0001825:	f6 44 0a 04 01       	test   BYTE PTR [edx+ecx*1+0x4],0x1
c000182a:	75 1c                	jne    c0001848 <dlrealloc+0xc3>
c000182c:	83 e0 fc             	and    eax,0xfffffffc
c000182f:	01 f0                	add    eax,esi
c0001831:	39 c5                	cmp    ebp,eax
c0001833:	77 13                	ja     c0001848 <dlrealloc+0xc3>
c0001835:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001838:	89 c6                	mov    esi,eax
c000183a:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000183d:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0001840:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0001843:	e9 9b 00 00 00       	jmp    c00018e3 <dlrealloc+0x15e>
c0001848:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000184c:	8d 45 f9             	lea    eax,[ebp-0x7]
c000184f:	83 ec 0c             	sub    esp,0xc
c0001852:	50                   	push   eax
c0001853:	e8 f0 f9 ff ff       	call   c0001248 <dlmalloc>
c0001858:	83 c4 10             	add    esp,0x10
c000185b:	85 c0                	test   eax,eax
c000185d:	0f 84 f4 00 00 00    	je     c0001957 <dlrealloc+0x1d2>
c0001863:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001867:	8d 48 f8             	lea    ecx,[eax-0x8]
c000186a:	39 ca                	cmp    edx,ecx
c000186c:	75 0a                	jne    c0001878 <dlrealloc+0xf3>
c000186e:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001871:	83 e0 fc             	and    eax,0xfffffffc
c0001874:	01 c6                	add    esi,eax
c0001876:	eb 6b                	jmp    c00018e3 <dlrealloc+0x15e>
c0001878:	8d 4e fc             	lea    ecx,[esi-0x4]
c000187b:	83 f9 27             	cmp    ecx,0x27
c000187e:	76 08                	jbe    c0001888 <dlrealloc+0x103>
c0001880:	89 de                	mov    esi,ebx
c0001882:	89 c7                	mov    edi,eax
c0001884:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001886:	eb 43                	jmp    c00018cb <dlrealloc+0x146>
c0001888:	8b 13                	mov    edx,DWORD PTR [ebx]
c000188a:	83 f9 13             	cmp    ecx,0x13
c000188d:	89 10                	mov    DWORD PTR [eax],edx
c000188f:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0001892:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0001895:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001898:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000189b:	76 2e                	jbe    c00018cb <dlrealloc+0x146>
c000189d:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00018a0:	83 f9 1b             	cmp    ecx,0x1b
c00018a3:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00018a6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00018a9:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00018ac:	76 1d                	jbe    c00018cb <dlrealloc+0x146>
c00018ae:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00018b1:	83 f9 23             	cmp    ecx,0x23
c00018b4:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00018b7:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00018ba:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00018bd:	76 0c                	jbe    c00018cb <dlrealloc+0x146>
c00018bf:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00018c2:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c00018c5:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00018c8:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00018cb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00018cf:	83 ec 0c             	sub    esp,0xc
c00018d2:	53                   	push   ebx
c00018d3:	e8 ae f4 ff ff       	call   c0000d86 <dlfree>
c00018d8:	83 c4 10             	add    esp,0x10
c00018db:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00018df:	89 c3                	mov    ebx,eax
c00018e1:	eb 76                	jmp    c0001959 <dlrealloc+0x1d4>
c00018e3:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00018e6:	8d 04 37             	lea    eax,[edi+esi*1]
c00018e9:	89 f2                	mov    edx,esi
c00018eb:	29 ea                	sub    edx,ebp
c00018ed:	83 e1 01             	and    ecx,0x1
c00018f0:	83 fa 0f             	cmp    edx,0xf
c00018f3:	77 0b                	ja     c0001900 <dlrealloc+0x17b>
c00018f5:	09 f1                	or     ecx,esi
c00018f7:	89 4b fc             	mov    DWORD PTR [ebx-0x4],ecx
c00018fa:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00018fe:	eb 59                	jmp    c0001959 <dlrealloc+0x1d4>
c0001900:	01 ef                	add    edi,ebp
c0001902:	83 ca 01             	or     edx,0x1
c0001905:	09 cd                	or     ebp,ecx
c0001907:	83 ec 0c             	sub    esp,0xc
c000190a:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c000190d:	83 c7 08             	add    edi,0x8
c0001910:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c0001913:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001917:	57                   	push   edi
c0001918:	e8 69 f4 ff ff       	call   c0000d86 <dlfree>
c000191d:	83 c4 10             	add    esp,0x10
c0001920:	eb 37                	jmp    c0001959 <dlrealloc+0x1d4>
c0001922:	8d 45 04             	lea    eax,[ebp+0x4]
c0001925:	39 f0                	cmp    eax,esi
c0001927:	76 30                	jbe    c0001959 <dlrealloc+0x1d4>
c0001929:	83 ec 0c             	sub    esp,0xc
c000192c:	83 ed 07             	sub    ebp,0x7
c000192f:	55                   	push   ebp
c0001930:	e8 13 f9 ff ff       	call   c0001248 <dlmalloc>
c0001935:	83 c4 10             	add    esp,0x10
c0001938:	85 c0                	test   eax,eax
c000193a:	89 c5                	mov    ebp,eax
c000193c:	74 19                	je     c0001957 <dlrealloc+0x1d2>
c000193e:	8d 4e f8             	lea    ecx,[esi-0x8]
c0001941:	89 c7                	mov    edi,eax
c0001943:	89 de                	mov    esi,ebx
c0001945:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001947:	83 ec 0c             	sub    esp,0xc
c000194a:	53                   	push   ebx
c000194b:	89 eb                	mov    ebx,ebp
c000194d:	e8 34 f4 ff ff       	call   c0000d86 <dlfree>
c0001952:	83 c4 10             	add    esp,0x10
c0001955:	eb 02                	jmp    c0001959 <dlrealloc+0x1d4>
c0001957:	31 db                	xor    ebx,ebx
c0001959:	83 c4 1c             	add    esp,0x1c
c000195c:	89 d8                	mov    eax,ebx
c000195e:	5b                   	pop    ebx
c000195f:	5e                   	pop    esi
c0001960:	5f                   	pop    edi
c0001961:	5d                   	pop    ebp
c0001962:	c3                   	ret    

c0001963 <dlmemalign>:
c0001963:	55                   	push   ebp
c0001964:	57                   	push   edi
c0001965:	56                   	push   esi
c0001966:	53                   	push   ebx
c0001967:	83 ec 0c             	sub    esp,0xc
c000196a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000196e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001972:	83 fa 08             	cmp    edx,0x8
c0001975:	77 10                	ja     c0001987 <dlmemalign+0x24>
c0001977:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000197b:	83 c4 0c             	add    esp,0xc
c000197e:	5b                   	pop    ebx
c000197f:	5e                   	pop    esi
c0001980:	5f                   	pop    edi
c0001981:	5d                   	pop    ebp
c0001982:	e9 c1 f8 ff ff       	jmp    c0001248 <dlmalloc>
c0001987:	83 fa 0f             	cmp    edx,0xf
c000198a:	bf 10 00 00 00       	mov    edi,0x10
c000198f:	76 13                	jbe    c00019a4 <dlmemalign+0x41>
c0001991:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001994:	85 d1                	test   ecx,edx
c0001996:	75 04                	jne    c000199c <dlmemalign+0x39>
c0001998:	89 d7                	mov    edi,edx
c000199a:	eb 08                	jmp    c00019a4 <dlmemalign+0x41>
c000199c:	39 d7                	cmp    edi,edx
c000199e:	73 04                	jae    c00019a4 <dlmemalign+0x41>
c00019a0:	01 ff                	add    edi,edi
c00019a2:	eb f8                	jmp    c000199c <dlmemalign+0x39>
c00019a4:	83 f8 df             	cmp    eax,0xffffffdf
c00019a7:	76 07                	jbe    c00019b0 <dlmemalign+0x4d>
c00019a9:	31 c0                	xor    eax,eax
c00019ab:	e9 ce 00 00 00       	jmp    c0001a7e <dlmemalign+0x11b>
c00019b0:	83 c0 0b             	add    eax,0xb
c00019b3:	bd 10 00 00 00       	mov    ebp,0x10
c00019b8:	83 f8 0f             	cmp    eax,0xf
c00019bb:	76 05                	jbe    c00019c2 <dlmemalign+0x5f>
c00019bd:	83 e0 f8             	and    eax,0xfffffff8
c00019c0:	89 c5                	mov    ebp,eax
c00019c2:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c00019c6:	83 ec 0c             	sub    esp,0xc
c00019c9:	50                   	push   eax
c00019ca:	e8 79 f8 ff ff       	call   c0001248 <dlmalloc>
c00019cf:	83 c4 10             	add    esp,0x10
c00019d2:	85 c0                	test   eax,eax
c00019d4:	89 c1                	mov    ecx,eax
c00019d6:	74 d1                	je     c00019a9 <dlmemalign+0x46>
c00019d8:	8d 70 f8             	lea    esi,[eax-0x8]
c00019db:	31 d2                	xor    edx,edx
c00019dd:	f7 f7                	div    edi
c00019df:	85 d2                	test   edx,edx
c00019e1:	74 62                	je     c0001a45 <dlmemalign+0xe2>
c00019e3:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c00019e7:	89 f8                	mov    eax,edi
c00019e9:	f7 d8                	neg    eax
c00019eb:	21 c3                	and    ebx,eax
c00019ed:	83 eb 08             	sub    ebx,0x8
c00019f0:	89 d8                	mov    eax,ebx
c00019f2:	29 f0                	sub    eax,esi
c00019f4:	83 f8 0f             	cmp    eax,0xf
c00019f7:	77 02                	ja     c00019fb <dlmemalign+0x98>
c00019f9:	01 fb                	add    ebx,edi
c00019fb:	89 d8                	mov    eax,ebx
c00019fd:	29 f0                	sub    eax,esi
c00019ff:	89 c6                	mov    esi,eax
c0001a01:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001a04:	89 c2                	mov    edx,eax
c0001a06:	83 e2 fc             	and    edx,0xfffffffc
c0001a09:	29 f2                	sub    edx,esi
c0001a0b:	a8 02                	test   al,0x2
c0001a0d:	74 10                	je     c0001a1f <dlmemalign+0xbc>
c0001a0f:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c0001a12:	83 ca 02             	or     edx,0x2
c0001a15:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001a18:	8d 43 08             	lea    eax,[ebx+0x8]
c0001a1b:	89 33                	mov    DWORD PTR [ebx],esi
c0001a1d:	eb 5f                	jmp    c0001a7e <dlmemalign+0x11b>
c0001a1f:	89 d0                	mov    eax,edx
c0001a21:	83 ec 0c             	sub    esp,0xc
c0001a24:	83 c8 01             	or     eax,0x1
c0001a27:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0001a2a:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001a2f:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001a32:	83 e0 01             	and    eax,0x1
c0001a35:	09 f0                	or     eax,esi
c0001a37:	89 de                	mov    esi,ebx
c0001a39:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c0001a3c:	51                   	push   ecx
c0001a3d:	e8 44 f3 ff ff       	call   c0000d86 <dlfree>
c0001a42:	83 c4 10             	add    esp,0x10
c0001a45:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001a48:	a8 02                	test   al,0x2
c0001a4a:	75 2f                	jne    c0001a7b <dlmemalign+0x118>
c0001a4c:	8d 55 10             	lea    edx,[ebp+0x10]
c0001a4f:	83 e0 fc             	and    eax,0xfffffffc
c0001a52:	39 c2                	cmp    edx,eax
c0001a54:	73 25                	jae    c0001a7b <dlmemalign+0x118>
c0001a56:	29 e8                	sub    eax,ebp
c0001a58:	83 ec 0c             	sub    esp,0xc
c0001a5b:	8d 14 2e             	lea    edx,[esi+ebp*1]
c0001a5e:	83 c8 01             	or     eax,0x1
c0001a61:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0001a64:	83 c2 08             	add    edx,0x8
c0001a67:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001a6a:	83 e0 01             	and    eax,0x1
c0001a6d:	09 c5                	or     ebp,eax
c0001a6f:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001a72:	52                   	push   edx
c0001a73:	e8 0e f3 ff ff       	call   c0000d86 <dlfree>
c0001a78:	83 c4 10             	add    esp,0x10
c0001a7b:	8d 46 08             	lea    eax,[esi+0x8]
c0001a7e:	83 c4 0c             	add    esp,0xc
c0001a81:	5b                   	pop    ebx
c0001a82:	5e                   	pop    esi
c0001a83:	5f                   	pop    edi
c0001a84:	5d                   	pop    ebp
c0001a85:	c3                   	ret    

c0001a86 <dlcalloc>:
c0001a86:	53                   	push   ebx
c0001a87:	83 ec 14             	sub    esp,0x14
c0001a8a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001a8e:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001a93:	50                   	push   eax
c0001a94:	e8 af f7 ff ff       	call   c0001248 <dlmalloc>
c0001a99:	83 c4 10             	add    esp,0x10
c0001a9c:	85 c0                	test   eax,eax
c0001a9e:	89 c3                	mov    ebx,eax
c0001aa0:	74 6e                	je     c0001b10 <dlcalloc+0x8a>
c0001aa2:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001aa5:	a8 02                	test   al,0x2
c0001aa7:	75 67                	jne    c0001b10 <dlcalloc+0x8a>
c0001aa9:	83 e0 fc             	and    eax,0xfffffffc
c0001aac:	83 e8 04             	sub    eax,0x4
c0001aaf:	83 f8 27             	cmp    eax,0x27
c0001ab2:	76 0f                	jbe    c0001ac3 <dlcalloc+0x3d>
c0001ab4:	52                   	push   edx
c0001ab5:	50                   	push   eax
c0001ab6:	6a 00                	push   0x0
c0001ab8:	53                   	push   ebx
c0001ab9:	e8 32 ea ff ff       	call   c00004f0 <memset>
c0001abe:	83 c4 10             	add    esp,0x10
c0001ac1:	eb 4d                	jmp    c0001b10 <dlcalloc+0x8a>
c0001ac3:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001ac9:	83 f8 13             	cmp    eax,0x13
c0001acc:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001ad3:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001ada:	76 34                	jbe    c0001b10 <dlcalloc+0x8a>
c0001adc:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001ae3:	83 f8 1b             	cmp    eax,0x1b
c0001ae6:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001aed:	76 21                	jbe    c0001b10 <dlcalloc+0x8a>
c0001aef:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001af6:	83 f8 23             	cmp    eax,0x23
c0001af9:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001b00:	76 0e                	jbe    c0001b10 <dlcalloc+0x8a>
c0001b02:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001b09:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001b10:	83 c4 08             	add    esp,0x8
c0001b13:	89 d8                	mov    eax,ebx
c0001b15:	5b                   	pop    ebx
c0001b16:	c3                   	ret    

c0001b17 <dlcfree>:
c0001b17:	e9 6a f2 ff ff       	jmp    c0000d86 <dlfree>

c0001b1c <dlindependent_calloc>:
c0001b1c:	83 ec 28             	sub    esp,0x28
c0001b1f:	b9 03 00 00 00       	mov    ecx,0x3
c0001b24:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001b28:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0001b2c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0001b30:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001b34:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001b38:	e8 99 fa ff ff       	call   c00015d6 <iALLOc>
c0001b3d:	83 c4 2c             	add    esp,0x2c
c0001b40:	c3                   	ret    

c0001b41 <dlindependent_comalloc>:
c0001b41:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001b45:	31 c9                	xor    ecx,ecx
c0001b47:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b4b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001b4f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001b53:	e9 7e fa ff ff       	jmp    c00015d6 <iALLOc>

c0001b58 <dlvalloc>:
c0001b58:	83 ec 0c             	sub    esp,0xc
c0001b5b:	83 3d 00 91 02 c0 00 	cmp    DWORD PTR ds:0xc0029100,0x0
c0001b62:	75 0a                	jne    c0001b6e <dlvalloc+0x16>
c0001b64:	b8 00 91 02 c0       	mov    eax,0xc0029100
c0001b69:	e8 31 f1 ff ff       	call   c0000c9f <malloc_consolidate>
c0001b6e:	50                   	push   eax
c0001b6f:	50                   	push   eax
c0001b70:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001b74:	ff 35 5c 94 02 c0    	push   DWORD PTR ds:0xc002945c
c0001b7a:	e8 e4 fd ff ff       	call   c0001963 <dlmemalign>
c0001b7f:	83 c4 1c             	add    esp,0x1c
c0001b82:	c3                   	ret    

c0001b83 <dlpvalloc>:
c0001b83:	83 ec 0c             	sub    esp,0xc
c0001b86:	83 3d 00 91 02 c0 00 	cmp    DWORD PTR ds:0xc0029100,0x0
c0001b8d:	75 0a                	jne    c0001b99 <dlpvalloc+0x16>
c0001b8f:	b8 00 91 02 c0       	mov    eax,0xc0029100
c0001b94:	e8 06 f1 ff ff       	call   c0000c9f <malloc_consolidate>
c0001b99:	52                   	push   edx
c0001b9a:	a1 5c 94 02 c0       	mov    eax,ds:0xc002945c
c0001b9f:	52                   	push   edx
c0001ba0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001ba4:	89 c1                	mov    ecx,eax
c0001ba6:	f7 d9                	neg    ecx
c0001ba8:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001bac:	21 ca                	and    edx,ecx
c0001bae:	52                   	push   edx
c0001baf:	50                   	push   eax
c0001bb0:	e8 ae fd ff ff       	call   c0001963 <dlmemalign>
c0001bb5:	83 c4 1c             	add    esp,0x1c
c0001bb8:	c3                   	ret    

c0001bb9 <dlmalloc_trim>:
c0001bb9:	b8 00 91 02 c0       	mov    eax,0xc0029100
c0001bbe:	e8 dc f0 ff ff       	call   c0000c9f <malloc_consolidate>
c0001bc3:	31 c0                	xor    eax,eax
c0001bc5:	c3                   	ret    

c0001bc6 <dlmalloc_usable_size>:
c0001bc6:	53                   	push   ebx
c0001bc7:	31 c0                	xor    eax,eax
c0001bc9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001bcd:	85 c9                	test   ecx,ecx
c0001bcf:	74 24                	je     c0001bf5 <dlmalloc_usable_size+0x2f>
c0001bd1:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001bd4:	f6 c2 02             	test   dl,0x2
c0001bd7:	74 08                	je     c0001be1 <dlmalloc_usable_size+0x1b>
c0001bd9:	83 e2 fc             	and    edx,0xfffffffc
c0001bdc:	8d 42 f8             	lea    eax,[edx-0x8]
c0001bdf:	eb 14                	jmp    c0001bf5 <dlmalloc_usable_size+0x2f>
c0001be1:	89 d3                	mov    ebx,edx
c0001be3:	31 c0                	xor    eax,eax
c0001be5:	83 e3 fe             	and    ebx,0xfffffffe
c0001be8:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001bed:	74 06                	je     c0001bf5 <dlmalloc_usable_size+0x2f>
c0001bef:	83 e2 fc             	and    edx,0xfffffffc
c0001bf2:	8d 42 fc             	lea    eax,[edx-0x4]
c0001bf5:	5b                   	pop    ebx
c0001bf6:	c3                   	ret    

c0001bf7 <dlmallinfo>:
c0001bf7:	55                   	push   ebp
c0001bf8:	57                   	push   edi
c0001bf9:	56                   	push   esi
c0001bfa:	53                   	push   ebx
c0001bfb:	83 ec 08             	sub    esp,0x8
c0001bfe:	83 3d 2c 91 02 c0 00 	cmp    DWORD PTR ds:0xc002912c,0x0
c0001c05:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001c09:	75 0a                	jne    c0001c15 <dlmallinfo+0x1e>
c0001c0b:	b8 00 91 02 c0       	mov    eax,0xc0029100
c0001c10:	e8 8a f0 ff ff       	call   c0000c9f <malloc_consolidate>
c0001c15:	a1 2c 91 02 c0       	mov    eax,ds:0xc002912c
c0001c1a:	31 ed                	xor    ebp,ebp
c0001c1c:	31 c9                	xor    ecx,ecx
c0001c1e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001c21:	83 e0 fc             	and    eax,0xfffffffc
c0001c24:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c28:	31 c0                	xor    eax,eax
c0001c2a:	8b 14 85 04 91 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd6efc]
c0001c31:	85 d2                	test   edx,edx
c0001c33:	74 0e                	je     c0001c43 <dlmallinfo+0x4c>
c0001c35:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001c38:	45                   	inc    ebp
c0001c39:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001c3c:	83 e6 fc             	and    esi,0xfffffffc
c0001c3f:	01 f1                	add    ecx,esi
c0001c41:	eb ee                	jmp    c0001c31 <dlmallinfo+0x3a>
c0001c43:	40                   	inc    eax
c0001c44:	83 f8 0a             	cmp    eax,0xa
c0001c47:	75 e1                	jne    c0001c2a <dlmallinfo+0x33>
c0001c49:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001c50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001c54:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001c57:	b8 34 91 02 c0       	mov    eax,0xc0029134
c0001c5c:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001c5f:	39 f0                	cmp    eax,esi
c0001c61:	74 10                	je     c0001c73 <dlmallinfo+0x7c>
c0001c63:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001c66:	ff 04 24             	inc    DWORD PTR [esp]
c0001c69:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001c6c:	83 e7 fc             	and    edi,0xfffffffc
c0001c6f:	01 fa                	add    edx,edi
c0001c71:	eb ec                	jmp    c0001c5f <dlmallinfo+0x68>
c0001c73:	83 c0 08             	add    eax,0x8
c0001c76:	3d 2c 94 02 c0       	cmp    eax,0xc002942c
c0001c7b:	75 df                	jne    c0001c5c <dlmallinfo+0x65>
c0001c7d:	8b 35 50 94 02 c0    	mov    esi,DWORD PTR ds:0xc0029450
c0001c83:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001c86:	a1 68 94 02 c0       	mov    eax,ds:0xc0029468
c0001c8b:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001c8e:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001c91:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001c94:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001c97:	8b 35 64 94 02 c0    	mov    esi,DWORD PTR ds:0xc0029464
c0001c9d:	89 03                	mov    DWORD PTR [ebx],eax
c0001c9f:	29 d0                	sub    eax,edx
c0001ca1:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001ca4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001ca8:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001cab:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001cae:	8b 35 74 94 02 c0    	mov    esi,DWORD PTR ds:0xc0029474
c0001cb4:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001cb7:	89 d8                	mov    eax,ebx
c0001cb9:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001cbc:	83 c4 08             	add    esp,0x8
c0001cbf:	5b                   	pop    ebx
c0001cc0:	5e                   	pop    esi
c0001cc1:	5f                   	pop    edi
c0001cc2:	5d                   	pop    ebp
c0001cc3:	c2 04 00             	ret    0x4

c0001cc6 <dlmalloc_stats>:
c0001cc6:	83 ec 30             	sub    esp,0x30
c0001cc9:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001ccd:	50                   	push   eax
c0001cce:	e8 24 ff ff ff       	call   c0001bf7 <dlmallinfo>
c0001cd3:	83 c4 30             	add    esp,0x30
c0001cd6:	c3                   	ret    

c0001cd7 <dlmallopt>:
c0001cd7:	56                   	push   esi
c0001cd8:	b8 00 91 02 c0       	mov    eax,0xc0029100
c0001cdd:	53                   	push   ebx
c0001cde:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001ce2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001ce6:	e8 b4 ef ff ff       	call   c0000c9f <malloc_consolidate>
c0001ceb:	8d 46 04             	lea    eax,[esi+0x4]
c0001cee:	83 f8 05             	cmp    eax,0x5
c0001cf1:	77 5d                	ja     c0001d50 <dlmallopt+0x79>
c0001cf3:	ff 24 85 e4 29 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdd61c]
c0001cfa:	83 fb 50             	cmp    ebx,0x50
c0001cfd:	77 51                	ja     c0001d50 <dlmallopt+0x79>
c0001cff:	85 db                	test   ebx,ebx
c0001d01:	ba 08 00 00 00       	mov    edx,0x8
c0001d06:	74 12                	je     c0001d1a <dlmallopt+0x43>
c0001d08:	83 c3 0b             	add    ebx,0xb
c0001d0b:	ba 10 00 00 00       	mov    edx,0x10
c0001d10:	83 fb 0f             	cmp    ebx,0xf
c0001d13:	76 05                	jbe    c0001d1a <dlmallopt+0x43>
c0001d15:	89 da                	mov    edx,ebx
c0001d17:	83 e2 f8             	and    edx,0xfffffff8
c0001d1a:	a1 00 91 02 c0       	mov    eax,ds:0xc0029100
c0001d1f:	83 e0 03             	and    eax,0x3
c0001d22:	09 d0                	or     eax,edx
c0001d24:	a3 00 91 02 c0       	mov    ds:0xc0029100,eax
c0001d29:	eb 27                	jmp    c0001d52 <dlmallopt+0x7b>
c0001d2b:	89 1d 44 94 02 c0    	mov    DWORD PTR ds:0xc0029444,ebx
c0001d31:	eb 16                	jmp    c0001d49 <dlmallopt+0x72>
c0001d33:	89 1d 48 94 02 c0    	mov    DWORD PTR ds:0xc0029448,ebx
c0001d39:	eb 0e                	jmp    c0001d49 <dlmallopt+0x72>
c0001d3b:	89 1d 4c 94 02 c0    	mov    DWORD PTR ds:0xc002944c,ebx
c0001d41:	eb 06                	jmp    c0001d49 <dlmallopt+0x72>
c0001d43:	89 1d 54 94 02 c0    	mov    DWORD PTR ds:0xc0029454,ebx
c0001d49:	be 01 00 00 00       	mov    esi,0x1
c0001d4e:	eb 02                	jmp    c0001d52 <dlmallopt+0x7b>
c0001d50:	31 f6                	xor    esi,esi
c0001d52:	5b                   	pop    ebx
c0001d53:	89 f0                	mov    eax,esi
c0001d55:	5e                   	pop    esi
c0001d56:	c3                   	ret    
c0001d57:	90                   	nop

c0001d58 <isblank>:
c0001d58:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001d5d:	74 09                	je     c0001d68 <isblank+0x10>
c0001d5f:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001d64:	75 0a                	jne    c0001d70 <isblank+0x18>
c0001d66:	66 90                	xchg   ax,ax
c0001d68:	b8 01 00 00 00       	mov    eax,0x1
c0001d6d:	c3                   	ret    
c0001d6e:	66 90                	xchg   ax,ax
c0001d70:	b8 00 00 00 00       	mov    eax,0x0
c0001d75:	c3                   	ret    
c0001d76:	66 90                	xchg   ax,ax

c0001d78 <iscntrl>:
c0001d78:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001d7d:	7e 09                	jle    c0001d88 <iscntrl+0x10>
c0001d7f:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001d84:	75 0a                	jne    c0001d90 <iscntrl+0x18>
c0001d86:	66 90                	xchg   ax,ax
c0001d88:	b8 01 00 00 00       	mov    eax,0x1
c0001d8d:	c3                   	ret    
c0001d8e:	66 90                	xchg   ax,ax
c0001d90:	b8 00 00 00 00       	mov    eax,0x0
c0001d95:	c3                   	ret    
c0001d96:	66 90                	xchg   ax,ax

c0001d98 <isdigit>:
c0001d98:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001d9d:	7e 0d                	jle    c0001dac <isdigit+0x14>
c0001d9f:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001da4:	7f 06                	jg     c0001dac <isdigit+0x14>
c0001da6:	b8 01 00 00 00       	mov    eax,0x1
c0001dab:	c3                   	ret    
c0001dac:	b8 00 00 00 00       	mov    eax,0x0
c0001db1:	c3                   	ret    
c0001db2:	66 90                	xchg   ax,ax

c0001db4 <islower>:
c0001db4:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001db9:	7e 0d                	jle    c0001dc8 <islower+0x14>
c0001dbb:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001dc0:	7f 06                	jg     c0001dc8 <islower+0x14>
c0001dc2:	b8 01 00 00 00       	mov    eax,0x1
c0001dc7:	c3                   	ret    
c0001dc8:	b8 00 00 00 00       	mov    eax,0x0
c0001dcd:	c3                   	ret    
c0001dce:	66 90                	xchg   ax,ax

c0001dd0 <isspace>:
c0001dd0:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001dd5:	7c 19                	jl     c0001df0 <isspace+0x20>
c0001dd7:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001ddc:	7e 0a                	jle    c0001de8 <isspace+0x18>
c0001dde:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001de3:	75 0b                	jne    c0001df0 <isspace+0x20>
c0001de5:	8d 76 00             	lea    esi,[esi+0x0]
c0001de8:	b8 01 00 00 00       	mov    eax,0x1
c0001ded:	c3                   	ret    
c0001dee:	66 90                	xchg   ax,ax
c0001df0:	b8 00 00 00 00       	mov    eax,0x0
c0001df5:	c3                   	ret    
c0001df6:	66 90                	xchg   ax,ax

c0001df8 <isupper>:
c0001df8:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001dfd:	7e 0d                	jle    c0001e0c <isupper+0x14>
c0001dff:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001e04:	7f 06                	jg     c0001e0c <isupper+0x14>
c0001e06:	b8 01 00 00 00       	mov    eax,0x1
c0001e0b:	c3                   	ret    
c0001e0c:	b8 00 00 00 00       	mov    eax,0x0
c0001e11:	c3                   	ret    
c0001e12:	66 90                	xchg   ax,ax

c0001e14 <isalpha>:
c0001e14:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e18:	e8 db ff ff ff       	call   c0001df8 <isupper>
c0001e1d:	83 c4 04             	add    esp,0x4
c0001e20:	85 c0                	test   eax,eax
c0001e22:	75 10                	jne    c0001e34 <isalpha+0x20>
c0001e24:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e28:	e8 87 ff ff ff       	call   c0001db4 <islower>
c0001e2d:	83 c4 04             	add    esp,0x4
c0001e30:	85 c0                	test   eax,eax
c0001e32:	74 08                	je     c0001e3c <isalpha+0x28>
c0001e34:	b8 01 00 00 00       	mov    eax,0x1
c0001e39:	c3                   	ret    
c0001e3a:	66 90                	xchg   ax,ax
c0001e3c:	b8 00 00 00 00       	mov    eax,0x0
c0001e41:	c3                   	ret    
c0001e42:	66 90                	xchg   ax,ax

c0001e44 <isalnum>:
c0001e44:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e48:	e8 c7 ff ff ff       	call   c0001e14 <isalpha>
c0001e4d:	83 c4 04             	add    esp,0x4
c0001e50:	85 c0                	test   eax,eax
c0001e52:	75 10                	jne    c0001e64 <isalnum+0x20>
c0001e54:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e58:	e8 3b ff ff ff       	call   c0001d98 <isdigit>
c0001e5d:	83 c4 04             	add    esp,0x4
c0001e60:	85 c0                	test   eax,eax
c0001e62:	74 08                	je     c0001e6c <isalnum+0x28>
c0001e64:	b8 01 00 00 00       	mov    eax,0x1
c0001e69:	c3                   	ret    
c0001e6a:	66 90                	xchg   ax,ax
c0001e6c:	b8 00 00 00 00       	mov    eax,0x0
c0001e71:	c3                   	ret    
c0001e72:	66 90                	xchg   ax,ax

c0001e74 <ispunct>:
c0001e74:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e78:	e8 c7 ff ff ff       	call   c0001e44 <isalnum>
c0001e7d:	83 c4 04             	add    esp,0x4
c0001e80:	85 c0                	test   eax,eax
c0001e82:	75 28                	jne    c0001eac <ispunct+0x38>
c0001e84:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e88:	e8 43 ff ff ff       	call   c0001dd0 <isspace>
c0001e8d:	83 c4 04             	add    esp,0x4
c0001e90:	85 c0                	test   eax,eax
c0001e92:	75 18                	jne    c0001eac <ispunct+0x38>
c0001e94:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e98:	e8 db fe ff ff       	call   c0001d78 <iscntrl>
c0001e9d:	83 c4 04             	add    esp,0x4
c0001ea0:	85 c0                	test   eax,eax
c0001ea2:	75 08                	jne    c0001eac <ispunct+0x38>
c0001ea4:	b8 01 00 00 00       	mov    eax,0x1
c0001ea9:	c3                   	ret    
c0001eaa:	66 90                	xchg   ax,ax
c0001eac:	b8 00 00 00 00       	mov    eax,0x0
c0001eb1:	c3                   	ret    
c0001eb2:	66 90                	xchg   ax,ax

c0001eb4 <isgraph>:
c0001eb4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001eb8:	e8 87 ff ff ff       	call   c0001e44 <isalnum>
c0001ebd:	83 c4 04             	add    esp,0x4
c0001ec0:	85 c0                	test   eax,eax
c0001ec2:	75 10                	jne    c0001ed4 <isgraph+0x20>
c0001ec4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001ec8:	e8 a7 ff ff ff       	call   c0001e74 <ispunct>
c0001ecd:	83 c4 04             	add    esp,0x4
c0001ed0:	85 c0                	test   eax,eax
c0001ed2:	74 08                	je     c0001edc <isgraph+0x28>
c0001ed4:	b8 01 00 00 00       	mov    eax,0x1
c0001ed9:	c3                   	ret    
c0001eda:	66 90                	xchg   ax,ax
c0001edc:	b8 00 00 00 00       	mov    eax,0x0
c0001ee1:	c3                   	ret    
c0001ee2:	66 90                	xchg   ax,ax

c0001ee4 <isprint>:
c0001ee4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001ee8:	e8 c7 ff ff ff       	call   c0001eb4 <isgraph>
c0001eed:	83 c4 04             	add    esp,0x4
c0001ef0:	85 c0                	test   eax,eax
c0001ef2:	75 08                	jne    c0001efc <isprint+0x18>
c0001ef4:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001ef9:	75 09                	jne    c0001f04 <isprint+0x20>
c0001efb:	90                   	nop
c0001efc:	b8 01 00 00 00       	mov    eax,0x1
c0001f01:	c3                   	ret    
c0001f02:	66 90                	xchg   ax,ax
c0001f04:	b8 00 00 00 00       	mov    eax,0x0
c0001f09:	c3                   	ret    
c0001f0a:	66 90                	xchg   ax,ax

c0001f0c <isxdigit>:
c0001f0c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001f10:	e8 83 fe ff ff       	call   c0001d98 <isdigit>
c0001f15:	83 c4 04             	add    esp,0x4
c0001f18:	85 c0                	test   eax,eax
c0001f1a:	75 20                	jne    c0001f3c <isxdigit+0x30>
c0001f1c:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001f21:	7e 09                	jle    c0001f2c <isxdigit+0x20>
c0001f23:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001f28:	7e 12                	jle    c0001f3c <isxdigit+0x30>
c0001f2a:	66 90                	xchg   ax,ax
c0001f2c:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001f31:	7e 11                	jle    c0001f44 <isxdigit+0x38>
c0001f33:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001f38:	7f 0a                	jg     c0001f44 <isxdigit+0x38>
c0001f3a:	66 90                	xchg   ax,ax
c0001f3c:	b8 01 00 00 00       	mov    eax,0x1
c0001f41:	c3                   	ret    
c0001f42:	66 90                	xchg   ax,ax
c0001f44:	b8 00 00 00 00       	mov    eax,0x0
c0001f49:	c3                   	ret    
c0001f4a:	66 90                	xchg   ax,ax

c0001f4c <LWIP_PLATFORM_HTONS>:
c0001f4c:	83 ec 04             	sub    esp,0x4
c0001f4f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001f53:	66 89 04 24          	mov    WORD PTR [esp],ax
c0001f57:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0001f5b:	c1 e8 08             	shr    eax,0x8
c0001f5e:	89 c2                	mov    edx,eax
c0001f60:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0001f64:	c1 e0 08             	shl    eax,0x8
c0001f67:	09 d0                	or     eax,edx
c0001f69:	83 c4 04             	add    esp,0x4
c0001f6c:	c3                   	ret    
c0001f6d:	8d 76 00             	lea    esi,[esi+0x0]

c0001f70 <LWIP_PLATFORM_HTONL>:
c0001f70:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f74:	c1 e8 18             	shr    eax,0x18
c0001f77:	89 c2                	mov    edx,eax
c0001f79:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f7d:	c1 e8 08             	shr    eax,0x8
c0001f80:	25 00 ff 00 00       	and    eax,0xff00
c0001f85:	09 c2                	or     edx,eax
c0001f87:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f8b:	c1 e0 08             	shl    eax,0x8
c0001f8e:	25 00 00 ff 00       	and    eax,0xff0000
c0001f93:	09 c2                	or     edx,eax
c0001f95:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f99:	c1 e0 18             	shl    eax,0x18
c0001f9c:	09 d0                	or     eax,edx
c0001f9e:	c3                   	ret    

c0001f9f <disk_status>:
c0001f9f:	31 c0                	xor    eax,eax
c0001fa1:	c3                   	ret    

c0001fa2 <disk_initialize>:
c0001fa2:	31 c0                	xor    eax,eax
c0001fa4:	c3                   	ret    

c0001fa5 <disk_read>:
c0001fa5:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001faa:	0f b6 04 85 20 fc 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd03e0]
c0001fb2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001fb6:	e9 99 a5 01 00       	jmp    c001c554 <fatWrapperReadDisk>

c0001fbb <disk_write>:
c0001fbb:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001fc0:	0f b6 04 85 20 fc 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd03e0]
c0001fc8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001fcc:	e9 c3 a5 01 00       	jmp    c001c594 <fatWrapperWriteDisk>

c0001fd1 <disk_ioctl>:
c0001fd1:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001fd6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001fda:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001fdf:	0f b6 04 85 20 fc 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd03e0]
c0001fe7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001feb:	e9 e4 a5 01 00       	jmp    c001c5d4 <fatWrapperIoctl>

c0001ff0 <ld_word>:
c0001ff0:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001ff4:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001ff7:	c1 e2 08             	shl    edx,0x8
c0001ffa:	09 d0                	or     eax,edx
c0001ffc:	c3                   	ret    

c0001ffd <ld_dword>:
c0001ffd:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0002001:	89 d1                	mov    ecx,edx
c0002003:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0002007:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000200a:	c1 e1 08             	shl    ecx,0x8
c000200d:	09 ca                	or     edx,ecx
c000200f:	c1 e2 08             	shl    edx,0x8
c0002012:	09 d0                	or     eax,edx
c0002014:	c3                   	ret    

c0002015 <st_word>:
c0002015:	66 89 10             	mov    WORD PTR [eax],dx
c0002018:	c3                   	ret    

c0002019 <st_dword>:
c0002019:	89 10                	mov    DWORD PTR [eax],edx
c000201b:	c3                   	ret    

c000201c <mem_cpy>:
c000201c:	85 c9                	test   ecx,ecx
c000201e:	74 10                	je     c0002030 <mem_cpy+0x14>
c0002020:	57                   	push   edi
c0002021:	01 c1                	add    ecx,eax
c0002023:	56                   	push   esi
c0002024:	89 c7                	mov    edi,eax
c0002026:	89 d6                	mov    esi,edx
c0002028:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0002029:	39 f9                	cmp    ecx,edi
c000202b:	75 fb                	jne    c0002028 <mem_cpy+0xc>
c000202d:	5e                   	pop    esi
c000202e:	5f                   	pop    edi
c000202f:	c3                   	ret    
c0002030:	c3                   	ret    

c0002031 <mem_set>:
c0002031:	01 c1                	add    ecx,eax
c0002033:	88 10                	mov    BYTE PTR [eax],dl
c0002035:	40                   	inc    eax
c0002036:	39 c8                	cmp    eax,ecx
c0002038:	75 f9                	jne    c0002033 <mem_set+0x2>
c000203a:	c3                   	ret    

c000203b <mem_cmp>:
c000203b:	57                   	push   edi
c000203c:	56                   	push   esi
c000203d:	89 c6                	mov    esi,eax
c000203f:	53                   	push   ebx
c0002040:	46                   	inc    esi
c0002041:	42                   	inc    edx
c0002042:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0002046:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c000204a:	29 fb                	sub    ebx,edi
c000204c:	89 cf                	mov    edi,ecx
c000204e:	29 f7                	sub    edi,esi
c0002050:	01 c7                	add    edi,eax
c0002052:	74 04                	je     c0002058 <mem_cmp+0x1d>
c0002054:	85 db                	test   ebx,ebx
c0002056:	74 e8                	je     c0002040 <mem_cmp+0x5>
c0002058:	89 d8                	mov    eax,ebx
c000205a:	5b                   	pop    ebx
c000205b:	5e                   	pop    esi
c000205c:	5f                   	pop    edi
c000205d:	c3                   	ret    

c000205e <chk_chr>:
c000205e:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0002061:	85 c9                	test   ecx,ecx
c0002063:	74 07                	je     c000206c <chk_chr+0xe>
c0002065:	39 d1                	cmp    ecx,edx
c0002067:	74 03                	je     c000206c <chk_chr+0xe>
c0002069:	40                   	inc    eax
c000206a:	eb f2                	jmp    c000205e <chk_chr>
c000206c:	89 c8                	mov    eax,ecx
c000206e:	c3                   	ret    

c000206f <dbc_1st>:
c000206f:	31 c0                	xor    eax,eax
c0002071:	c3                   	ret    

c0002072 <dbc_2nd>:
c0002072:	31 c0                	xor    eax,eax
c0002074:	c3                   	ret    

c0002075 <tchar2uni>:
c0002075:	57                   	push   edi
c0002076:	56                   	push   esi
c0002077:	53                   	push   ebx
c0002078:	8b 18                	mov    ebx,DWORD PTR [eax]
c000207a:	8a 0b                	mov    cl,BYTE PTR [ebx]
c000207c:	8d 73 01             	lea    esi,[ebx+0x1]
c000207f:	f6 c1 80             	test   cl,0x80
c0002082:	75 0a                	jne    c000208e <tchar2uni+0x19>
c0002084:	0f b6 d1             	movzx  edx,cl
c0002087:	89 f3                	mov    ebx,esi
c0002089:	e9 b2 00 00 00       	jmp    c0002140 <tchar2uni+0xcb>
c000208e:	89 ca                	mov    edx,ecx
c0002090:	81 e2 e0 00 00 00    	and    edx,0xe0
c0002096:	81 fa c0 00 00 00    	cmp    edx,0xc0
c000209c:	89 ca                	mov    edx,ecx
c000209e:	75 0a                	jne    c00020aa <tchar2uni+0x35>
c00020a0:	83 e2 1f             	and    edx,0x1f
c00020a3:	b9 01 00 00 00       	mov    ecx,0x1
c00020a8:	eb 37                	jmp    c00020e1 <tchar2uni+0x6c>
c00020aa:	81 e2 f0 00 00 00    	and    edx,0xf0
c00020b0:	81 fa e0 00 00 00    	cmp    edx,0xe0
c00020b6:	75 0c                	jne    c00020c4 <tchar2uni+0x4f>
c00020b8:	89 ca                	mov    edx,ecx
c00020ba:	b9 02 00 00 00       	mov    ecx,0x2
c00020bf:	83 e2 0f             	and    edx,0xf
c00020c2:	eb 1d                	jmp    c00020e1 <tchar2uni+0x6c>
c00020c4:	89 cf                	mov    edi,ecx
c00020c6:	83 ca ff             	or     edx,0xffffffff
c00020c9:	81 e7 f8 00 00 00    	and    edi,0xf8
c00020cf:	81 ff f0 00 00 00    	cmp    edi,0xf0
c00020d5:	75 70                	jne    c0002147 <tchar2uni+0xd2>
c00020d7:	89 ca                	mov    edx,ecx
c00020d9:	b9 03 00 00 00       	mov    ecx,0x3
c00020de:	83 e2 07             	and    edx,0x7
c00020e1:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c00020e5:	46                   	inc    esi
c00020e6:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c00020e9:	89 cf                	mov    edi,ecx
c00020eb:	81 e7 c0 00 00 00    	and    edi,0xc0
c00020f1:	83 c7 80             	add    edi,0xffffff80
c00020f4:	75 4e                	jne    c0002144 <tchar2uni+0xcf>
c00020f6:	c1 e2 06             	shl    edx,0x6
c00020f9:	83 e1 3f             	and    ecx,0x3f
c00020fc:	09 ca                	or     edx,ecx
c00020fe:	39 de                	cmp    esi,ebx
c0002100:	75 e3                	jne    c00020e5 <tchar2uni+0x70>
c0002102:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0002108:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c000210e:	76 34                	jbe    c0002144 <tchar2uni+0xcf>
c0002110:	8d 4a 80             	lea    ecx,[edx-0x80]
c0002113:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0002119:	77 29                	ja     c0002144 <tchar2uni+0xcf>
c000211b:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0002121:	76 1d                	jbe    c0002140 <tchar2uni+0xcb>
c0002123:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0002129:	81 e2 ff 03 00 00    	and    edx,0x3ff
c000212f:	c1 e1 06             	shl    ecx,0x6
c0002132:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0002138:	09 ca                	or     edx,ecx
c000213a:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0002140:	89 18                	mov    DWORD PTR [eax],ebx
c0002142:	eb 03                	jmp    c0002147 <tchar2uni+0xd2>
c0002144:	83 ca ff             	or     edx,0xffffffff
c0002147:	5b                   	pop    ebx
c0002148:	89 d0                	mov    eax,edx
c000214a:	5e                   	pop    esi
c000214b:	5f                   	pop    edi
c000214c:	c3                   	ret    

c000214d <put_utf>:
c000214d:	53                   	push   ebx
c000214e:	83 f8 7f             	cmp    eax,0x7f
c0002151:	89 c3                	mov    ebx,eax
c0002153:	b0 00                	mov    al,0x0
c0002155:	77 11                	ja     c0002168 <put_utf+0x1b>
c0002157:	85 c9                	test   ecx,ecx
c0002159:	0f 84 e5 00 00 00    	je     c0002244 <put_utf+0xf7>
c000215f:	88 1a                	mov    BYTE PTR [edx],bl
c0002161:	b0 01                	mov    al,0x1
c0002163:	e9 dc 00 00 00       	jmp    c0002244 <put_utf+0xf7>
c0002168:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c000216e:	77 23                	ja     c0002193 <put_utf+0x46>
c0002170:	83 f9 01             	cmp    ecx,0x1
c0002173:	0f 86 cb 00 00 00    	jbe    c0002244 <put_utf+0xf7>
c0002179:	89 d8                	mov    eax,ebx
c000217b:	83 e3 3f             	and    ebx,0x3f
c000217e:	c1 e8 06             	shr    eax,0x6
c0002181:	83 cb 80             	or     ebx,0xffffff80
c0002184:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0002187:	83 c8 c0             	or     eax,0xffffffc0
c000218a:	88 02                	mov    BYTE PTR [edx],al
c000218c:	b0 02                	mov    al,0x2
c000218e:	e9 b1 00 00 00       	jmp    c0002244 <put_utf+0xf7>
c0002193:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0002199:	77 40                	ja     c00021db <put_utf+0x8e>
c000219b:	83 f9 02             	cmp    ecx,0x2
c000219e:	0f 86 a0 00 00 00    	jbe    c0002244 <put_utf+0xf7>
c00021a4:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c00021aa:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c00021b0:	0f 86 8e 00 00 00    	jbe    c0002244 <put_utf+0xf7>
c00021b6:	89 d8                	mov    eax,ebx
c00021b8:	c1 e8 0c             	shr    eax,0xc
c00021bb:	83 c8 e0             	or     eax,0xffffffe0
c00021be:	88 02                	mov    BYTE PTR [edx],al
c00021c0:	89 d8                	mov    eax,ebx
c00021c2:	83 e3 3f             	and    ebx,0x3f
c00021c5:	c1 e8 06             	shr    eax,0x6
c00021c8:	83 cb 80             	or     ebx,0xffffff80
c00021cb:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c00021ce:	83 e0 3f             	and    eax,0x3f
c00021d1:	83 c8 80             	or     eax,0xffffff80
c00021d4:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c00021d7:	b0 03                	mov    al,0x3
c00021d9:	eb 69                	jmp    c0002244 <put_utf+0xf7>
c00021db:	83 f9 03             	cmp    ecx,0x3
c00021de:	76 64                	jbe    c0002244 <put_utf+0xf7>
c00021e0:	89 d9                	mov    ecx,ebx
c00021e2:	0f b7 c3             	movzx  eax,bx
c00021e5:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c00021eb:	66 31 c9             	xor    cx,cx
c00021ee:	81 c1 00 00 00 28    	add    ecx,0x28000000
c00021f4:	c1 e9 06             	shr    ecx,0x6
c00021f7:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c00021fd:	77 43                	ja     c0002242 <put_utf+0xf5>
c00021ff:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0002205:	77 3b                	ja     c0002242 <put_utf+0xf5>
c0002207:	09 cb                	or     ebx,ecx
c0002209:	81 c3 00 00 01 00    	add    ebx,0x10000
c000220f:	89 d8                	mov    eax,ebx
c0002211:	c1 e8 12             	shr    eax,0x12
c0002214:	83 c8 f0             	or     eax,0xfffffff0
c0002217:	88 02                	mov    BYTE PTR [edx],al
c0002219:	89 d8                	mov    eax,ebx
c000221b:	c1 e8 0c             	shr    eax,0xc
c000221e:	83 e0 3f             	and    eax,0x3f
c0002221:	83 c8 80             	or     eax,0xffffff80
c0002224:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0002227:	89 d8                	mov    eax,ebx
c0002229:	83 e3 3f             	and    ebx,0x3f
c000222c:	c1 e8 06             	shr    eax,0x6
c000222f:	83 cb 80             	or     ebx,0xffffff80
c0002232:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0002235:	83 e0 3f             	and    eax,0x3f
c0002238:	83 c8 80             	or     eax,0xffffff80
c000223b:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c000223e:	b0 04                	mov    al,0x4
c0002240:	eb 02                	jmp    c0002244 <put_utf+0xf7>
c0002242:	31 c0                	xor    eax,eax
c0002244:	5b                   	pop    ebx
c0002245:	c3                   	ret    

c0002246 <clst2sect>:
c0002246:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002249:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000224c:	83 ea 02             	sub    edx,0x2
c000224f:	39 ca                	cmp    edx,ecx
c0002251:	76 0d                	jbe    c0002260 <clst2sect+0x1a>
c0002253:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0002257:	0f af d1             	imul   edx,ecx
c000225a:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c000225d:	89 d0                	mov    eax,edx
c000225f:	c3                   	ret    
c0002260:	31 c0                	xor    eax,eax
c0002262:	c3                   	ret    

c0002263 <pick_lfn>:
c0002263:	55                   	push   ebp
c0002264:	57                   	push   edi
c0002265:	89 c7                	mov    edi,eax
c0002267:	56                   	push   esi
c0002268:	53                   	push   ebx
c0002269:	89 d3                	mov    ebx,edx
c000226b:	8d 42 1a             	lea    eax,[edx+0x1a]
c000226e:	e8 7d fd ff ff       	call   c0001ff0 <ld_word>
c0002273:	66 85 c0             	test   ax,ax
c0002276:	74 04                	je     c000227c <pick_lfn+0x19>
c0002278:	31 c0                	xor    eax,eax
c000227a:	eb 62                	jmp    c00022de <pick_lfn+0x7b>
c000227c:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000227f:	bd 01 00 00 00       	mov    ebp,0x1
c0002284:	31 f6                	xor    esi,esi
c0002286:	83 e1 bf             	and    ecx,0xffffffbf
c0002289:	49                   	dec    ecx
c000228a:	6b c9 0d             	imul   ecx,ecx,0xd
c000228d:	0f b6 86 40 2b 02 c0 	movzx  eax,BYTE PTR [esi-0x3ffdd4c0]
c0002294:	01 d8                	add    eax,ebx
c0002296:	e8 55 fd ff ff       	call   c0001ff0 <ld_word>
c000229b:	66 85 ed             	test   bp,bp
c000229e:	74 11                	je     c00022b1 <pick_lfn+0x4e>
c00022a0:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00022a6:	77 d0                	ja     c0002278 <pick_lfn+0x15>
c00022a8:	66 89 04 4f          	mov    WORD PTR [edi+ecx*2],ax
c00022ac:	89 c5                	mov    ebp,eax
c00022ae:	41                   	inc    ecx
c00022af:	eb 0a                	jmp    c00022bb <pick_lfn+0x58>
c00022b1:	0f b7 c0             	movzx  eax,ax
c00022b4:	3d ff ff 00 00       	cmp    eax,0xffff
c00022b9:	75 bd                	jne    c0002278 <pick_lfn+0x15>
c00022bb:	46                   	inc    esi
c00022bc:	83 fe 0d             	cmp    esi,0xd
c00022bf:	75 cc                	jne    c000228d <pick_lfn+0x2a>
c00022c1:	f6 03 40             	test   BYTE PTR [ebx],0x40
c00022c4:	74 13                	je     c00022d9 <pick_lfn+0x76>
c00022c6:	66 85 ed             	test   bp,bp
c00022c9:	74 0e                	je     c00022d9 <pick_lfn+0x76>
c00022cb:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00022d1:	77 a5                	ja     c0002278 <pick_lfn+0x15>
c00022d3:	66 c7 04 4f 00 00    	mov    WORD PTR [edi+ecx*2],0x0
c00022d9:	b8 01 00 00 00       	mov    eax,0x1
c00022de:	5b                   	pop    ebx
c00022df:	5e                   	pop    esi
c00022e0:	5f                   	pop    edi
c00022e1:	5d                   	pop    ebp
c00022e2:	c3                   	ret    

c00022e3 <put_lfn>:
c00022e3:	55                   	push   ebp
c00022e4:	57                   	push   edi
c00022e5:	89 d7                	mov    edi,edx
c00022e7:	56                   	push   esi
c00022e8:	31 f6                	xor    esi,esi
c00022ea:	53                   	push   ebx
c00022eb:	83 ec 0c             	sub    esp,0xc
c00022ee:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00022f2:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c00022f6:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c00022fc:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0002300:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0002303:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002306:	31 d2                	xor    edx,edx
c0002308:	e8 08 fd ff ff       	call   c0002015 <st_word>
c000230d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002314:	0f b6 d9             	movzx  ebx,cl
c0002317:	4b                   	dec    ebx
c0002318:	6b db 0d             	imul   ebx,ebx,0xd
c000231b:	0f b7 c6             	movzx  eax,si
c000231e:	3d ff ff 00 00       	cmp    eax,0xffff
c0002323:	74 09                	je     c000232e <put_lfn+0x4b>
c0002325:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002329:	0f b7 34 58          	movzx  esi,WORD PTR [eax+ebx*2]
c000232d:	43                   	inc    ebx
c000232e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002331:	0f b7 ee             	movzx  ebp,si
c0002334:	89 ea                	mov    edx,ebp
c0002336:	0f b6 80 40 2b 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdd4c0]
c000233d:	01 f8                	add    eax,edi
c000233f:	e8 d1 fc ff ff       	call   c0002015 <st_word>
c0002344:	85 ed                	test   ebp,ebp
c0002346:	75 05                	jne    c000234d <put_lfn+0x6a>
c0002348:	be ff ff 00 00       	mov    esi,0xffff
c000234d:	ff 04 24             	inc    DWORD PTR [esp]
c0002350:	83 3c 24 0d          	cmp    DWORD PTR [esp],0xd
c0002354:	75 c5                	jne    c000231b <put_lfn+0x38>
c0002356:	81 fe ff ff 00 00    	cmp    esi,0xffff
c000235c:	74 0b                	je     c0002369 <put_lfn+0x86>
c000235e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002362:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002367:	75 07                	jne    c0002370 <put_lfn+0x8d>
c0002369:	83 c9 40             	or     ecx,0x40
c000236c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002370:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0002374:	88 07                	mov    BYTE PTR [edi],al
c0002376:	83 c4 0c             	add    esp,0xc
c0002379:	5b                   	pop    ebx
c000237a:	5e                   	pop    esi
c000237b:	5f                   	pop    edi
c000237c:	5d                   	pop    ebp
c000237d:	c3                   	ret    

c000237e <gen_numname>:
c000237e:	57                   	push   edi
c000237f:	89 cf                	mov    edi,ecx
c0002381:	56                   	push   esi
c0002382:	b9 0b 00 00 00       	mov    ecx,0xb
c0002387:	53                   	push   ebx
c0002388:	89 c6                	mov    esi,eax
c000238a:	83 ec 10             	sub    esp,0x10
c000238d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002391:	e8 86 fc ff ff       	call   c000201c <mem_cpy>
c0002396:	83 fb 05             	cmp    ebx,0x5
c0002399:	76 30                	jbe    c00023cb <gen_numname+0x4d>
c000239b:	66 8b 07             	mov    ax,WORD PTR [edi]
c000239e:	66 85 c0             	test   ax,ax
c00023a1:	74 28                	je     c00023cb <gen_numname+0x4d>
c00023a3:	83 c7 02             	add    edi,0x2
c00023a6:	ba 10 00 00 00       	mov    edx,0x10
c00023ab:	89 c1                	mov    ecx,eax
c00023ad:	01 db                	add    ebx,ebx
c00023af:	c1 e0 10             	shl    eax,0x10
c00023b2:	83 e1 01             	and    ecx,0x1
c00023b5:	c1 e8 11             	shr    eax,0x11
c00023b8:	01 cb                	add    ebx,ecx
c00023ba:	0f ba e3 10          	bt     ebx,0x10
c00023be:	73 06                	jae    c00023c6 <gen_numname+0x48>
c00023c0:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00023c6:	4a                   	dec    edx
c00023c7:	75 e2                	jne    c00023ab <gen_numname+0x2d>
c00023c9:	eb d0                	jmp    c000239b <gen_numname+0x1d>
c00023cb:	b8 07 00 00 00       	mov    eax,0x7
c00023d0:	89 d9                	mov    ecx,ebx
c00023d2:	83 e1 0f             	and    ecx,0xf
c00023d5:	8d 79 30             	lea    edi,[ecx+0x30]
c00023d8:	83 ff 39             	cmp    edi,0x39
c00023db:	89 fa                	mov    edx,edi
c00023dd:	76 03                	jbe    c00023e2 <gen_numname+0x64>
c00023df:	8d 51 37             	lea    edx,[ecx+0x37]
c00023e2:	8d 48 ff             	lea    ecx,[eax-0x1]
c00023e5:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00023e9:	89 da                	mov    edx,ebx
c00023eb:	c1 ea 04             	shr    edx,0x4
c00023ee:	83 fb 0f             	cmp    ebx,0xf
c00023f1:	76 06                	jbe    c00023f9 <gen_numname+0x7b>
c00023f3:	89 c8                	mov    eax,ecx
c00023f5:	89 d3                	mov    ebx,edx
c00023f7:	eb d7                	jmp    c00023d0 <gen_numname+0x52>
c00023f9:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00023fe:	8d 58 fe             	lea    ebx,[eax-0x2]
c0002401:	31 d2                	xor    edx,edx
c0002403:	8d 04 16             	lea    eax,[esi+edx*1]
c0002406:	39 ca                	cmp    edx,ecx
c0002408:	73 19                	jae    c0002423 <gen_numname+0xa5>
c000240a:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000240d:	83 f8 20             	cmp    eax,0x20
c0002410:	74 11                	je     c0002423 <gen_numname+0xa5>
c0002412:	e8 58 fc ff ff       	call   c000206f <dbc_1st>
c0002417:	85 c0                	test   eax,eax
c0002419:	74 05                	je     c0002420 <gen_numname+0xa2>
c000241b:	39 d3                	cmp    ebx,edx
c000241d:	74 04                	je     c0002423 <gen_numname+0xa5>
c000241f:	42                   	inc    edx
c0002420:	42                   	inc    edx
c0002421:	eb e0                	jmp    c0002403 <gen_numname+0x85>
c0002423:	83 f9 07             	cmp    ecx,0x7
c0002426:	b0 20                	mov    al,0x20
c0002428:	77 05                	ja     c000242f <gen_numname+0xb1>
c000242a:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c000242e:	41                   	inc    ecx
c000242f:	42                   	inc    edx
c0002430:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002434:	83 fa 07             	cmp    edx,0x7
c0002437:	76 ea                	jbe    c0002423 <gen_numname+0xa5>
c0002439:	83 c4 10             	add    esp,0x10
c000243c:	5b                   	pop    ebx
c000243d:	5e                   	pop    esi
c000243e:	5f                   	pop    edi
c000243f:	c3                   	ret    

c0002440 <sum_sfn>:
c0002440:	53                   	push   ebx
c0002441:	31 c9                	xor    ecx,ecx
c0002443:	31 db                	xor    ebx,ebx
c0002445:	0f b6 d1             	movzx  edx,cl
c0002448:	d1 ea                	shr    edx,1
c000244a:	c1 e1 07             	shl    ecx,0x7
c000244d:	09 ca                	or     edx,ecx
c000244f:	8a 0c 18             	mov    cl,BYTE PTR [eax+ebx*1]
c0002452:	43                   	inc    ebx
c0002453:	01 ca                	add    edx,ecx
c0002455:	83 fb 0b             	cmp    ebx,0xb
c0002458:	88 d1                	mov    cl,dl
c000245a:	75 e9                	jne    c0002445 <sum_sfn+0x5>
c000245c:	5b                   	pop    ebx
c000245d:	88 d0                	mov    al,dl
c000245f:	c3                   	ret    

c0002460 <get_ldnumber>:
c0002460:	55                   	push   ebp
c0002461:	57                   	push   edi
c0002462:	56                   	push   esi
c0002463:	83 ce ff             	or     esi,0xffffffff
c0002466:	53                   	push   ebx
c0002467:	8b 10                	mov    edx,DWORD PTR [eax]
c0002469:	85 d2                	test   edx,edx
c000246b:	74 38                	je     c00024a5 <get_ldnumber+0x45>
c000246d:	89 c5                	mov    ebp,eax
c000246f:	89 d1                	mov    ecx,edx
c0002471:	41                   	inc    ecx
c0002472:	0f be 59 ff          	movsx  ebx,BYTE PTR [ecx-0x1]
c0002476:	80 fb 1f             	cmp    bl,0x1f
c0002479:	76 05                	jbe    c0002480 <get_ldnumber+0x20>
c000247b:	83 fb 3a             	cmp    ebx,0x3a
c000247e:	75 f1                	jne    c0002471 <get_ldnumber+0x11>
c0002480:	31 f6                	xor    esi,esi
c0002482:	83 fb 3a             	cmp    ebx,0x3a
c0002485:	75 1e                	jne    c00024a5 <get_ldnumber+0x45>
c0002487:	8a 1a                	mov    bl,BYTE PTR [edx]
c0002489:	83 ce ff             	or     esi,0xffffffff
c000248c:	8d 7b d0             	lea    edi,[ebx-0x30]
c000248f:	89 f8                	mov    eax,edi
c0002491:	3c 09                	cmp    al,0x9
c0002493:	77 10                	ja     c00024a5 <get_ldnumber+0x45>
c0002495:	83 c2 02             	add    edx,0x2
c0002498:	39 d1                	cmp    ecx,edx
c000249a:	75 09                	jne    c00024a5 <get_ldnumber+0x45>
c000249c:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c000249f:	0f be f3             	movsx  esi,bl
c00024a2:	83 ee 30             	sub    esi,0x30
c00024a5:	5b                   	pop    ebx
c00024a6:	89 f0                	mov    eax,esi
c00024a8:	5e                   	pop    esi
c00024a9:	5f                   	pop    edi
c00024aa:	5d                   	pop    ebp
c00024ab:	c3                   	ret    

c00024ac <validate>:
c00024ac:	56                   	push   esi
c00024ad:	85 c0                	test   eax,eax
c00024af:	53                   	push   ebx
c00024b0:	89 d6                	mov    esi,edx
c00024b2:	51                   	push   ecx
c00024b3:	75 09                	jne    c00024be <validate+0x12>
c00024b5:	b8 09 00 00 00       	mov    eax,0x9
c00024ba:	31 c9                	xor    ecx,ecx
c00024bc:	eb 2e                	jmp    c00024ec <validate+0x40>
c00024be:	89 c3                	mov    ebx,eax
c00024c0:	8b 00                	mov    eax,DWORD PTR [eax]
c00024c2:	85 c0                	test   eax,eax
c00024c4:	74 ef                	je     c00024b5 <validate+0x9>
c00024c6:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00024c9:	74 ea                	je     c00024b5 <validate+0x9>
c00024cb:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00024ce:	66 39 50 06          	cmp    WORD PTR [eax+0x6],dx
c00024d2:	75 e1                	jne    c00024b5 <validate+0x9>
c00024d4:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00024d8:	83 ec 0c             	sub    esp,0xc
c00024db:	50                   	push   eax
c00024dc:	e8 be fa ff ff       	call   c0001f9f <disk_status>
c00024e1:	83 c4 10             	add    esp,0x10
c00024e4:	a8 01                	test   al,0x1
c00024e6:	75 cd                	jne    c00024b5 <validate+0x9>
c00024e8:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00024ea:	31 c0                	xor    eax,eax
c00024ec:	89 0e                	mov    DWORD PTR [esi],ecx
c00024ee:	5a                   	pop    edx
c00024ef:	5b                   	pop    ebx
c00024f0:	5e                   	pop    esi
c00024f1:	c3                   	ret    

c00024f2 <sync_window>:
c00024f2:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00024f6:	74 58                	je     c0002550 <sync_window+0x5e>
c00024f8:	56                   	push   esi
c00024f9:	53                   	push   ebx
c00024fa:	89 c3                	mov    ebx,eax
c00024fc:	51                   	push   ecx
c00024fd:	6a 01                	push   0x1
c00024ff:	ff 70 30             	push   DWORD PTR [eax+0x30]
c0002502:	8d 70 34             	lea    esi,[eax+0x34]
c0002505:	56                   	push   esi
c0002506:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000250a:	50                   	push   eax
c000250b:	e8 ab fa ff ff       	call   c0001fbb <disk_write>
c0002510:	83 c4 10             	add    esp,0x10
c0002513:	ba 01 00 00 00       	mov    edx,0x1
c0002518:	85 c0                	test   eax,eax
c000251a:	75 2e                	jne    c000254a <sync_window+0x58>
c000251c:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0002520:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0002523:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0002526:	89 c1                	mov    ecx,eax
c0002528:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c000252b:	39 d1                	cmp    ecx,edx
c000252d:	73 19                	jae    c0002548 <sync_window+0x56>
c000252f:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002533:	75 13                	jne    c0002548 <sync_window+0x56>
c0002535:	6a 01                	push   0x1
c0002537:	01 d0                	add    eax,edx
c0002539:	50                   	push   eax
c000253a:	56                   	push   esi
c000253b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000253f:	50                   	push   eax
c0002540:	e8 76 fa ff ff       	call   c0001fbb <disk_write>
c0002545:	83 c4 10             	add    esp,0x10
c0002548:	31 d2                	xor    edx,edx
c000254a:	89 d0                	mov    eax,edx
c000254c:	5a                   	pop    edx
c000254d:	5b                   	pop    ebx
c000254e:	5e                   	pop    esi
c000254f:	c3                   	ret    
c0002550:	31 d2                	xor    edx,edx
c0002552:	89 d0                	mov    eax,edx
c0002554:	c3                   	ret    

c0002555 <move_window>:
c0002555:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c0002558:	74 3a                	je     c0002594 <move_window+0x3f>
c000255a:	56                   	push   esi
c000255b:	89 d6                	mov    esi,edx
c000255d:	53                   	push   ebx
c000255e:	89 c3                	mov    ebx,eax
c0002560:	51                   	push   ecx
c0002561:	e8 8c ff ff ff       	call   c00024f2 <sync_window>
c0002566:	85 c0                	test   eax,eax
c0002568:	75 2d                	jne    c0002597 <move_window+0x42>
c000256a:	6a 01                	push   0x1
c000256c:	56                   	push   esi
c000256d:	8d 43 34             	lea    eax,[ebx+0x34]
c0002570:	50                   	push   eax
c0002571:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002575:	50                   	push   eax
c0002576:	e8 2a fa ff ff       	call   c0001fa5 <disk_read>
c000257b:	83 c4 10             	add    esp,0x10
c000257e:	89 c2                	mov    edx,eax
c0002580:	31 c0                	xor    eax,eax
c0002582:	85 d2                	test   edx,edx
c0002584:	ba ff ff ff ff       	mov    edx,0xffffffff
c0002589:	0f 45 f2             	cmovne esi,edx
c000258c:	0f 95 c0             	setne  al
c000258f:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c0002592:	eb 03                	jmp    c0002597 <move_window+0x42>
c0002594:	31 c0                	xor    eax,eax
c0002596:	c3                   	ret    
c0002597:	5a                   	pop    edx
c0002598:	5b                   	pop    ebx
c0002599:	5e                   	pop    esi
c000259a:	c3                   	ret    

c000259b <check_fs>:
c000259b:	53                   	push   ebx
c000259c:	89 c3                	mov    ebx,eax
c000259e:	83 ec 08             	sub    esp,0x8
c00025a1:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00025a5:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c00025ac:	e8 a4 ff ff ff       	call   c0002555 <move_window>
c00025b1:	ba 04 00 00 00       	mov    edx,0x4
c00025b6:	85 c0                	test   eax,eax
c00025b8:	75 68                	jne    c0002622 <check_fs+0x87>
c00025ba:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00025c0:	e8 2b fa ff ff       	call   c0001ff0 <ld_word>
c00025c5:	ba 03 00 00 00       	mov    edx,0x3
c00025ca:	66 3d 55 aa          	cmp    ax,0xaa55
c00025ce:	75 52                	jne    c0002622 <check_fs+0x87>
c00025d0:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00025d3:	8d 50 18             	lea    edx,[eax+0x18]
c00025d6:	80 fa 01             	cmp    dl,0x1
c00025d9:	76 09                	jbe    c00025e4 <check_fs+0x49>
c00025db:	3c eb                	cmp    al,0xeb
c00025dd:	ba 02 00 00 00       	mov    edx,0x2
c00025e2:	75 3e                	jne    c0002622 <check_fs+0x87>
c00025e4:	ba 24 5e 02 c0       	mov    edx,0xc0025e24
c00025e9:	b9 03 00 00 00       	mov    ecx,0x3
c00025ee:	8d 43 6a             	lea    eax,[ebx+0x6a]
c00025f1:	e8 45 fa ff ff       	call   c000203b <mem_cmp>
c00025f6:	31 d2                	xor    edx,edx
c00025f8:	85 c0                	test   eax,eax
c00025fa:	74 26                	je     c0002622 <check_fs+0x87>
c00025fc:	ba fc 29 02 c0       	mov    edx,0xc00229fc
c0002601:	b9 05 00 00 00       	mov    ecx,0x5
c0002606:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c000260c:	e8 2a fa ff ff       	call   c000203b <mem_cmp>
c0002611:	31 d2                	xor    edx,edx
c0002613:	85 c0                	test   eax,eax
c0002615:	74 0b                	je     c0002622 <check_fs+0x87>
c0002617:	31 d2                	xor    edx,edx
c0002619:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c000261d:	0f 95 c2             	setne  dl
c0002620:	01 d2                	add    edx,edx
c0002622:	83 c4 08             	add    esp,0x8
c0002625:	89 d0                	mov    eax,edx
c0002627:	5b                   	pop    ebx
c0002628:	c3                   	ret    

c0002629 <find_volume>:
c0002629:	55                   	push   ebp
c000262a:	57                   	push   edi
c000262b:	56                   	push   esi
c000262c:	89 c6                	mov    esi,eax
c000262e:	53                   	push   ebx
c000262f:	89 d3                	mov    ebx,edx
c0002631:	83 ec 2c             	sub    esp,0x2c
c0002634:	31 d2                	xor    edx,edx
c0002636:	e8 60 ff ff ff       	call   c000259b <check_fs>
c000263b:	85 db                	test   ebx,ebx
c000263d:	0f 94 c2             	sete   dl
c0002640:	83 f8 02             	cmp    eax,0x2
c0002643:	74 07                	je     c000264c <find_volume+0x23>
c0002645:	77 63                	ja     c00026aa <find_volume+0x81>
c0002647:	f6 c2 01             	test   dl,0x1
c000264a:	75 5e                	jne    c00026aa <find_volume+0x81>
c000264c:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c0002652:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002656:	8d be fa 01 00 00    	lea    edi,[esi+0x1fa]
c000265c:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c0002660:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0002664:	89 f8                	mov    eax,edi
c0002666:	83 c7 10             	add    edi,0x10
c0002669:	e8 8f f9 ff ff       	call   c0001ffd <ld_dword>
c000266e:	83 c5 04             	add    ebp,0x4
c0002671:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0002675:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0002678:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
c000267c:	75 e2                	jne    c0002660 <find_volume+0x37>
c000267e:	83 fb 01             	cmp    ebx,0x1
c0002681:	0f b6 fa             	movzx  edi,dl
c0002684:	83 d3 ff             	adc    ebx,0xffffffff
c0002687:	8b 54 9c 10          	mov    edx,DWORD PTR [esp+ebx*4+0x10]
c000268b:	b8 03 00 00 00       	mov    eax,0x3
c0002690:	85 d2                	test   edx,edx
c0002692:	74 07                	je     c000269b <find_volume+0x72>
c0002694:	89 f0                	mov    eax,esi
c0002696:	e8 00 ff ff ff       	call   c000259b <check_fs>
c000269b:	83 f8 01             	cmp    eax,0x1
c000269e:	76 0a                	jbe    c00026aa <find_volume+0x81>
c00026a0:	85 ff                	test   edi,edi
c00026a2:	74 06                	je     c00026aa <find_volume+0x81>
c00026a4:	43                   	inc    ebx
c00026a5:	83 fb 03             	cmp    ebx,0x3
c00026a8:	76 dd                	jbe    c0002687 <find_volume+0x5e>
c00026aa:	83 c4 2c             	add    esp,0x2c
c00026ad:	5b                   	pop    ebx
c00026ae:	5e                   	pop    esi
c00026af:	5f                   	pop    edi
c00026b0:	5d                   	pop    ebp
c00026b1:	c3                   	ret    

c00026b2 <mount_volume>:
c00026b2:	55                   	push   ebp
c00026b3:	89 d5                	mov    ebp,edx
c00026b5:	57                   	push   edi
c00026b6:	89 cf                	mov    edi,ecx
c00026b8:	56                   	push   esi
c00026b9:	53                   	push   ebx
c00026ba:	bb 0b 00 00 00       	mov    ebx,0xb
c00026bf:	83 ec 2c             	sub    esp,0x2c
c00026c2:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00026c8:	e8 93 fd ff ff       	call   c0002460 <get_ldnumber>
c00026cd:	85 c0                	test   eax,eax
c00026cf:	0f 88 d0 02 00 00    	js     c00029a5 <mount_volume+0x2f3>
c00026d5:	8b 34 85 a0 94 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd6b60]
c00026dc:	89 c2                	mov    edx,eax
c00026de:	bb 0c 00 00 00       	mov    ebx,0xc
c00026e3:	85 f6                	test   esi,esi
c00026e5:	0f 84 ba 02 00 00    	je     c00029a5 <mount_volume+0x2f3>
c00026eb:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c00026ee:	83 e7 fe             	and    edi,0xfffffffe
c00026f1:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00026f4:	74 3c                	je     c0002732 <mount_volume+0x80>
c00026f6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00026fa:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00026fe:	83 ec 0c             	sub    esp,0xc
c0002701:	50                   	push   eax
c0002702:	e8 98 f8 ff ff       	call   c0001f9f <disk_status>
c0002707:	83 c4 10             	add    esp,0x10
c000270a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000270e:	a8 01                	test   al,0x1
c0002710:	75 20                	jne    c0002732 <mount_volume+0x80>
c0002712:	31 db                	xor    ebx,ebx
c0002714:	81 e7 fe 00 00 00    	and    edi,0xfe
c000271a:	0f 84 85 02 00 00    	je     c00029a5 <mount_volume+0x2f3>
c0002720:	a8 04                	test   al,0x4
c0002722:	0f 84 7d 02 00 00    	je     c00029a5 <mount_volume+0x2f3>
c0002728:	bb 0a 00 00 00       	mov    ebx,0xa
c000272d:	e9 73 02 00 00       	jmp    c00029a5 <mount_volume+0x2f3>
c0002732:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0002735:	83 ec 0c             	sub    esp,0xc
c0002738:	0f b6 c2             	movzx  eax,dl
c000273b:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c000273e:	bb 03 00 00 00       	mov    ebx,0x3
c0002743:	50                   	push   eax
c0002744:	e8 59 f8 ff ff       	call   c0001fa2 <disk_initialize>
c0002749:	83 c4 10             	add    esp,0x10
c000274c:	a8 01                	test   al,0x1
c000274e:	0f 85 51 02 00 00    	jne    c00029a5 <mount_volume+0x2f3>
c0002754:	81 e7 fe 00 00 00    	and    edi,0xfe
c000275a:	74 04                	je     c0002760 <mount_volume+0xae>
c000275c:	a8 04                	test   al,0x4
c000275e:	75 c8                	jne    c0002728 <mount_volume+0x76>
c0002760:	31 d2                	xor    edx,edx
c0002762:	89 f0                	mov    eax,esi
c0002764:	e8 c0 fe ff ff       	call   c0002629 <find_volume>
c0002769:	bb 01 00 00 00       	mov    ebx,0x1
c000276e:	83 f8 04             	cmp    eax,0x4
c0002771:	0f 84 2e 02 00 00    	je     c00029a5 <mount_volume+0x2f3>
c0002777:	83 f8 01             	cmp    eax,0x1
c000277a:	76 0a                	jbe    c0002786 <mount_volume+0xd4>
c000277c:	bb 0d 00 00 00       	mov    ebx,0xd
c0002781:	e9 1f 02 00 00       	jmp    c00029a5 <mount_volume+0x2f3>
c0002786:	8d 46 3f             	lea    eax,[esi+0x3f]
c0002789:	e8 62 f8 ff ff       	call   c0001ff0 <ld_word>
c000278e:	66 3d 00 02          	cmp    ax,0x200
c0002792:	75 e8                	jne    c000277c <mount_volume+0xca>
c0002794:	8d 46 4a             	lea    eax,[esi+0x4a]
c0002797:	e8 54 f8 ff ff       	call   c0001ff0 <ld_word>
c000279c:	0f b7 c0             	movzx  eax,ax
c000279f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00027a3:	85 c0                	test   eax,eax
c00027a5:	75 0c                	jne    c00027b3 <mount_volume+0x101>
c00027a7:	8d 46 58             	lea    eax,[esi+0x58]
c00027aa:	e8 4e f8 ff ff       	call   c0001ffd <ld_dword>
c00027af:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00027b3:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c00027b6:	8b 6e 44             	mov    ebp,DWORD PTR [esi+0x44]
c00027b9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00027bd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00027c1:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00027c4:	89 e8                	mov    eax,ebp
c00027c6:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00027c9:	8d 45 ff             	lea    eax,[ebp-0x1]
c00027cc:	3c 01                	cmp    al,0x1
c00027ce:	77 ac                	ja     c000277c <mount_volume+0xca>
c00027d0:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00027d4:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00027d8:	66 85 c0             	test   ax,ax
c00027db:	89 c3                	mov    ebx,eax
c00027dd:	74 9d                	je     c000277c <mount_volume+0xca>
c00027df:	8d 40 ff             	lea    eax,[eax-0x1]
c00027e2:	85 d8                	test   eax,ebx
c00027e4:	75 96                	jne    c000277c <mount_volume+0xca>
c00027e6:	8d 46 45             	lea    eax,[esi+0x45]
c00027e9:	e8 02 f8 ff ff       	call   c0001ff0 <ld_word>
c00027ee:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c00027f2:	a8 0f                	test   al,0xf
c00027f4:	89 c7                	mov    edi,eax
c00027f6:	75 84                	jne    c000277c <mount_volume+0xca>
c00027f8:	8d 46 47             	lea    eax,[esi+0x47]
c00027fb:	e8 f0 f7 ff ff       	call   c0001ff0 <ld_word>
c0002800:	0f b7 d0             	movzx  edx,ax
c0002803:	85 d2                	test   edx,edx
c0002805:	75 0a                	jne    c0002811 <mount_volume+0x15f>
c0002807:	8d 46 54             	lea    eax,[esi+0x54]
c000280a:	e8 ee f7 ff ff       	call   c0001ffd <ld_dword>
c000280f:	89 c2                	mov    edx,eax
c0002811:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002815:	8d 46 42             	lea    eax,[esi+0x42]
c0002818:	e8 d3 f7 ff ff       	call   c0001ff0 <ld_word>
c000281d:	0f b7 c8             	movzx  ecx,ax
c0002820:	85 c9                	test   ecx,ecx
c0002822:	0f 84 54 ff ff ff    	je     c000277c <mount_volume+0xca>
c0002828:	89 e8                	mov    eax,ebp
c000282a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000282e:	0f b6 e8             	movzx  ebp,al
c0002831:	0f b7 c7             	movzx  eax,di
c0002834:	0f af 6c 24 0c       	imul   ebp,DWORD PTR [esp+0xc]
c0002839:	c1 e8 04             	shr    eax,0x4
c000283c:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c0002840:	01 e8                	add    eax,ebp
c0002842:	01 c8                	add    eax,ecx
c0002844:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002848:	39 c2                	cmp    edx,eax
c000284a:	0f 82 2c ff ff ff    	jb     c000277c <mount_volume+0xca>
c0002850:	29 c2                	sub    edx,eax
c0002852:	89 d5                	mov    ebp,edx
c0002854:	89 d0                	mov    eax,edx
c0002856:	31 d2                	xor    edx,edx
c0002858:	f7 f3                	div    ebx
c000285a:	39 dd                	cmp    ebp,ebx
c000285c:	0f 82 1a ff ff ff    	jb     c000277c <mount_volume+0xca>
c0002862:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002867:	0f 87 0f ff ff ff    	ja     c000277c <mount_volume+0xca>
c000286d:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002872:	0f 86 1e 01 00 00    	jbe    c0002996 <mount_volume+0x2e4>
c0002878:	bb 03 00 00 00       	mov    ebx,0x3
c000287d:	8d 68 02             	lea    ebp,[eax+0x2]
c0002880:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002884:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c0002887:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000288b:	03 54 24 10          	add    edx,DWORD PTR [esp+0x10]
c000288f:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c0002892:	01 c8                	add    eax,ecx
c0002894:	83 fb 03             	cmp    ebx,0x3
c0002897:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c000289a:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c000289d:	75 23                	jne    c00028c2 <mount_volume+0x210>
c000289f:	8d 46 5e             	lea    eax,[esi+0x5e]
c00028a2:	e8 49 f7 ff ff       	call   c0001ff0 <ld_word>
c00028a7:	09 c7                	or     edi,eax
c00028a9:	66 85 ff             	test   di,di
c00028ac:	0f 85 ca fe ff ff    	jne    c000277c <mount_volume+0xca>
c00028b2:	8d 46 60             	lea    eax,[esi+0x60]
c00028b5:	e8 43 f7 ff ff       	call   c0001ffd <ld_dword>
c00028ba:	c1 e5 02             	shl    ebp,0x2
c00028bd:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00028c0:	eb 25                	jmp    c00028e7 <mount_volume+0x235>
c00028c2:	66 85 ff             	test   di,di
c00028c5:	0f 84 b1 fe ff ff    	je     c000277c <mount_volume+0xca>
c00028cb:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00028cf:	8d 54 6d 00          	lea    edx,[ebp+ebp*2+0x0]
c00028d3:	8d 7c 2d 00          	lea    edi,[ebp+ebp*1+0x0]
c00028d7:	83 e5 01             	and    ebp,0x1
c00028da:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00028dd:	d1 ea                	shr    edx,1
c00028df:	01 d5                	add    ebp,edx
c00028e1:	83 fb 02             	cmp    ebx,0x2
c00028e4:	0f 44 ef             	cmove  ebp,edi
c00028e7:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c00028ed:	c1 ed 09             	shr    ebp,0x9
c00028f0:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c00028f4:	0f 87 82 fe ff ff    	ja     c000277c <mount_volume+0xca>
c00028fa:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c0002901:	83 fb 03             	cmp    ebx,0x3
c0002904:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c000290b:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c000290f:	75 6e                	jne    c000297f <mount_volume+0x2cd>
c0002911:	8d 46 64             	lea    eax,[esi+0x64]
c0002914:	e8 d7 f6 ff ff       	call   c0001ff0 <ld_word>
c0002919:	66 48                	dec    ax
c000291b:	75 62                	jne    c000297f <mount_volume+0x2cd>
c000291d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0002921:	89 f0                	mov    eax,esi
c0002923:	42                   	inc    edx
c0002924:	e8 2c fc ff ff       	call   c0002555 <move_window>
c0002929:	85 c0                	test   eax,eax
c000292b:	75 52                	jne    c000297f <mount_volume+0x2cd>
c000292d:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c0002931:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c0002937:	e8 b4 f6 ff ff       	call   c0001ff0 <ld_word>
c000293c:	66 3d 55 aa          	cmp    ax,0xaa55
c0002940:	75 3d                	jne    c000297f <mount_volume+0x2cd>
c0002942:	8d 46 34             	lea    eax,[esi+0x34]
c0002945:	e8 b3 f6 ff ff       	call   c0001ffd <ld_dword>
c000294a:	3d 52 52 61 41       	cmp    eax,0x41615252
c000294f:	75 2e                	jne    c000297f <mount_volume+0x2cd>
c0002951:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c0002957:	e8 a1 f6 ff ff       	call   c0001ffd <ld_dword>
c000295c:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002961:	75 1c                	jne    c000297f <mount_volume+0x2cd>
c0002963:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c0002969:	e8 8f f6 ff ff       	call   c0001ffd <ld_dword>
c000296e:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0002971:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c0002977:	e8 81 f6 ff ff       	call   c0001ffd <ld_dword>
c000297c:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000297f:	88 1e                	mov    BYTE PTR [esi],bl
c0002981:	66 a1 80 94 02 c0    	mov    ax,ds:0xc0029480
c0002987:	31 db                	xor    ebx,ebx
c0002989:	40                   	inc    eax
c000298a:	66 a3 80 94 02 c0    	mov    ds:0xc0029480,ax
c0002990:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c0002994:	eb 0f                	jmp    c00029a5 <mount_volume+0x2f3>
c0002996:	3d f6 0f 00 00       	cmp    eax,0xff6
c000299b:	19 db                	sbb    ebx,ebx
c000299d:	83 c3 02             	add    ebx,0x2
c00029a0:	e9 d8 fe ff ff       	jmp    c000287d <mount_volume+0x1cb>
c00029a5:	83 c4 2c             	add    esp,0x2c
c00029a8:	89 d8                	mov    eax,ebx
c00029aa:	5b                   	pop    ebx
c00029ab:	5e                   	pop    esi
c00029ac:	5f                   	pop    edi
c00029ad:	5d                   	pop    ebp
c00029ae:	c3                   	ret    

c00029af <put_fat>:
c00029af:	55                   	push   ebp
c00029b0:	bd 02 00 00 00       	mov    ebp,0x2
c00029b5:	57                   	push   edi
c00029b6:	56                   	push   esi
c00029b7:	53                   	push   ebx
c00029b8:	83 ec 1c             	sub    esp,0x1c
c00029bb:	83 fa 01             	cmp    edx,0x1
c00029be:	0f 86 38 01 00 00    	jbe    c0002afc <put_fat+0x14d>
c00029c4:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c00029c7:	0f 86 2f 01 00 00    	jbe    c0002afc <put_fat+0x14d>
c00029cd:	89 c6                	mov    esi,eax
c00029cf:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00029d2:	89 cf                	mov    edi,ecx
c00029d4:	89 d3                	mov    ebx,edx
c00029d6:	83 f8 02             	cmp    eax,0x2
c00029d9:	0f 84 b1 00 00 00    	je     c0002a90 <put_fat+0xe1>
c00029df:	83 f8 03             	cmp    eax,0x3
c00029e2:	0f 84 d5 00 00 00    	je     c0002abd <put_fat+0x10e>
c00029e8:	48                   	dec    eax
c00029e9:	0f 85 0d 01 00 00    	jne    c0002afc <put_fat+0x14d>
c00029ef:	89 d1                	mov    ecx,edx
c00029f1:	89 f0                	mov    eax,esi
c00029f3:	d1 e9                	shr    ecx,1
c00029f5:	01 d1                	add    ecx,edx
c00029f7:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00029fb:	89 ca                	mov    edx,ecx
c00029fd:	c1 ea 09             	shr    edx,0x9
c0002a00:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002a03:	e8 4d fb ff ff       	call   c0002555 <move_window>
c0002a08:	85 c0                	test   eax,eax
c0002a0a:	89 c5                	mov    ebp,eax
c0002a0c:	0f 85 ea 00 00 00    	jne    c0002afc <put_fat+0x14d>
c0002a12:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002a16:	8d 46 34             	lea    eax,[esi+0x34]
c0002a19:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002a1d:	8d 41 01             	lea    eax,[ecx+0x1]
c0002a20:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0002a26:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002a2a:	83 e3 01             	and    ebx,0x1
c0002a2d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002a31:	89 f8                	mov    eax,edi
c0002a33:	74 11                	je     c0002a46 <put_fat+0x97>
c0002a35:	8a 11                	mov    dl,BYTE PTR [ecx]
c0002a37:	89 f8                	mov    eax,edi
c0002a39:	c1 e0 04             	shl    eax,0x4
c0002a3c:	25 f0 0f 00 00       	and    eax,0xff0
c0002a41:	83 e2 0f             	and    edx,0xf
c0002a44:	09 d0                	or     eax,edx
c0002a46:	88 01                	mov    BYTE PTR [ecx],al
c0002a48:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002a4c:	89 f0                	mov    eax,esi
c0002a4e:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002a52:	c1 ea 09             	shr    edx,0x9
c0002a55:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002a58:	e8 f8 fa ff ff       	call   c0002555 <move_window>
c0002a5d:	85 c0                	test   eax,eax
c0002a5f:	89 c5                	mov    ebp,eax
c0002a61:	0f 85 95 00 00 00    	jne    c0002afc <put_fat+0x14d>
c0002a67:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a6b:	25 ff 01 00 00       	and    eax,0x1ff
c0002a70:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002a74:	85 db                	test   ebx,ebx
c0002a76:	74 07                	je     c0002a7f <put_fat+0xd0>
c0002a78:	c1 ef 04             	shr    edi,0x4
c0002a7b:	89 f9                	mov    ecx,edi
c0002a7d:	eb 0d                	jmp    c0002a8c <put_fat+0xdd>
c0002a7f:	8a 08                	mov    cl,BYTE PTR [eax]
c0002a81:	c1 ef 08             	shr    edi,0x8
c0002a84:	83 e7 0f             	and    edi,0xf
c0002a87:	83 e1 f0             	and    ecx,0xfffffff0
c0002a8a:	09 f9                	or     ecx,edi
c0002a8c:	88 08                	mov    BYTE PTR [eax],cl
c0002a8e:	eb 27                	jmp    c0002ab7 <put_fat+0x108>
c0002a90:	c1 ea 08             	shr    edx,0x8
c0002a93:	89 f0                	mov    eax,esi
c0002a95:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002a98:	e8 b8 fa ff ff       	call   c0002555 <move_window>
c0002a9d:	85 c0                	test   eax,eax
c0002a9f:	89 c5                	mov    ebp,eax
c0002aa1:	75 59                	jne    c0002afc <put_fat+0x14d>
c0002aa3:	01 db                	add    ebx,ebx
c0002aa5:	0f b7 d7             	movzx  edx,di
c0002aa8:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002aae:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0002ab2:	e8 5e f5 ff ff       	call   c0002015 <st_word>
c0002ab7:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002abb:	eb 3f                	jmp    c0002afc <put_fat+0x14d>
c0002abd:	c1 ea 07             	shr    edx,0x7
c0002ac0:	89 f0                	mov    eax,esi
c0002ac2:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002ac5:	e8 8b fa ff ff       	call   c0002555 <move_window>
c0002aca:	85 c0                	test   eax,eax
c0002acc:	89 c5                	mov    ebp,eax
c0002ace:	75 2c                	jne    c0002afc <put_fat+0x14d>
c0002ad0:	c1 e3 02             	shl    ebx,0x2
c0002ad3:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002ad9:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002adf:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c0002ae3:	89 d8                	mov    eax,ebx
c0002ae5:	e8 13 f5 ff ff       	call   c0001ffd <ld_dword>
c0002aea:	25 00 00 00 f0       	and    eax,0xf0000000
c0002aef:	09 f8                	or     eax,edi
c0002af1:	89 c2                	mov    edx,eax
c0002af3:	89 d8                	mov    eax,ebx
c0002af5:	e8 1f f5 ff ff       	call   c0002019 <st_dword>
c0002afa:	eb bb                	jmp    c0002ab7 <put_fat+0x108>
c0002afc:	83 c4 1c             	add    esp,0x1c
c0002aff:	89 e8                	mov    eax,ebp
c0002b01:	5b                   	pop    ebx
c0002b02:	5e                   	pop    esi
c0002b03:	5f                   	pop    edi
c0002b04:	5d                   	pop    ebp
c0002b05:	c3                   	ret    

c0002b06 <dir_clear>:
c0002b06:	55                   	push   ebp
c0002b07:	57                   	push   edi
c0002b08:	56                   	push   esi
c0002b09:	89 c6                	mov    esi,eax
c0002b0b:	53                   	push   ebx
c0002b0c:	83 ec 1c             	sub    esp,0x1c
c0002b0f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002b13:	e8 da f9 ff ff       	call   c00024f2 <sync_window>
c0002b18:	85 c0                	test   eax,eax
c0002b1a:	0f 85 c1 00 00 00    	jne    c0002be1 <dir_clear+0xdb>
c0002b20:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002b24:	89 f0                	mov    eax,esi
c0002b26:	e8 1b f7 ff ff       	call   c0002246 <clst2sect>
c0002b2b:	31 d2                	xor    edx,edx
c0002b2d:	b9 00 02 00 00       	mov    ecx,0x200
c0002b32:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002b35:	89 c5                	mov    ebp,eax
c0002b37:	8d 46 34             	lea    eax,[esi+0x34]
c0002b3a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002b3e:	e8 ee f4 ff ff       	call   c0002031 <mem_set>
c0002b43:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0002b47:	b8 00 80 00 00       	mov    eax,0x8000
c0002b4c:	c1 e3 09             	shl    ebx,0x9
c0002b4f:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002b55:	0f 47 d8             	cmova  ebx,eax
c0002b58:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002b5e:	76 16                	jbe    c0002b76 <dir_clear+0x70>
c0002b60:	83 ec 0c             	sub    esp,0xc
c0002b63:	53                   	push   ebx
c0002b64:	e8 cb 32 00 00       	call   c0005e34 <ff_memalloc>
c0002b69:	83 c4 10             	add    esp,0x10
c0002b6c:	85 c0                	test   eax,eax
c0002b6e:	89 c7                	mov    edi,eax
c0002b70:	75 76                	jne    c0002be8 <dir_clear+0xe2>
c0002b72:	d1 eb                	shr    ebx,1
c0002b74:	eb e2                	jmp    c0002b58 <dir_clear+0x52>
c0002b76:	31 db                	xor    ebx,ebx
c0002b78:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002b7c:	39 d8                	cmp    eax,ebx
c0002b7e:	76 53                	jbe    c0002bd3 <dir_clear+0xcd>
c0002b80:	6a 01                	push   0x1
c0002b82:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002b85:	50                   	push   eax
c0002b86:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002b8a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002b8e:	50                   	push   eax
c0002b8f:	e8 27 f4 ff ff       	call   c0001fbb <disk_write>
c0002b94:	83 c4 10             	add    esp,0x10
c0002b97:	85 c0                	test   eax,eax
c0002b99:	75 38                	jne    c0002bd3 <dir_clear+0xcd>
c0002b9b:	43                   	inc    ebx
c0002b9c:	eb da                	jmp    c0002b78 <dir_clear+0x72>
c0002b9e:	52                   	push   edx
c0002b9f:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002ba2:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0002ba6:	50                   	push   eax
c0002ba7:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002bab:	57                   	push   edi
c0002bac:	50                   	push   eax
c0002bad:	e8 09 f4 ff ff       	call   c0001fbb <disk_write>
c0002bb2:	83 c4 10             	add    esp,0x10
c0002bb5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002bb9:	85 c0                	test   eax,eax
c0002bbb:	75 0a                	jne    c0002bc7 <dir_clear+0xc1>
c0002bbd:	01 d3                	add    ebx,edx
c0002bbf:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002bc3:	39 d8                	cmp    eax,ebx
c0002bc5:	77 d7                	ja     c0002b9e <dir_clear+0x98>
c0002bc7:	83 ec 0c             	sub    esp,0xc
c0002bca:	57                   	push   edi
c0002bcb:	e8 7c 32 00 00       	call   c0005e4c <ff_memfree>
c0002bd0:	83 c4 10             	add    esp,0x10
c0002bd3:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002bd7:	39 d8                	cmp    eax,ebx
c0002bd9:	0f 95 c0             	setne  al
c0002bdc:	0f b6 c0             	movzx  eax,al
c0002bdf:	eb 19                	jmp    c0002bfa <dir_clear+0xf4>
c0002be1:	b8 01 00 00 00       	mov    eax,0x1
c0002be6:	eb 12                	jmp    c0002bfa <dir_clear+0xf4>
c0002be8:	89 d9                	mov    ecx,ebx
c0002bea:	31 d2                	xor    edx,edx
c0002bec:	e8 40 f4 ff ff       	call   c0002031 <mem_set>
c0002bf1:	89 da                	mov    edx,ebx
c0002bf3:	31 db                	xor    ebx,ebx
c0002bf5:	c1 ea 09             	shr    edx,0x9
c0002bf8:	eb c5                	jmp    c0002bbf <dir_clear+0xb9>
c0002bfa:	83 c4 1c             	add    esp,0x1c
c0002bfd:	5b                   	pop    ebx
c0002bfe:	5e                   	pop    esi
c0002bff:	5f                   	pop    edi
c0002c00:	5d                   	pop    ebp
c0002c01:	c3                   	ret    

c0002c02 <create_name>:
c0002c02:	55                   	push   ebp
c0002c03:	89 c5                	mov    ebp,eax
c0002c05:	57                   	push   edi
c0002c06:	89 d7                	mov    edi,edx
c0002c08:	56                   	push   esi
c0002c09:	31 f6                	xor    esi,esi
c0002c0b:	53                   	push   ebx
c0002c0c:	83 ec 3c             	sub    esp,0x3c
c0002c0f:	8b 02                	mov    eax,DWORD PTR [edx]
c0002c11:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002c15:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0002c18:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002c1b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002c1f:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0002c23:	e8 4d f4 ff ff       	call   c0002075 <tchar2uni>
c0002c28:	83 f8 ff             	cmp    eax,0xffffffff
c0002c2b:	89 c3                	mov    ebx,eax
c0002c2d:	75 0a                	jne    c0002c39 <create_name+0x37>
c0002c2f:	b8 06 00 00 00       	mov    eax,0x6
c0002c34:	e9 7c 02 00 00       	jmp    c0002eb5 <create_name+0x2b3>
c0002c39:	3d ff ff 00 00       	cmp    eax,0xffff
c0002c3e:	76 0c                	jbe    c0002c4c <create_name+0x4a>
c0002c40:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002c44:	c1 e8 10             	shr    eax,0x10
c0002c47:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0002c4b:	46                   	inc    esi
c0002c4c:	0f b7 d3             	movzx  edx,bx
c0002c4f:	89 d8                	mov    eax,ebx
c0002c51:	83 fa 1f             	cmp    edx,0x1f
c0002c54:	76 30                	jbe    c0002c86 <create_name+0x84>
c0002c56:	83 fa 2f             	cmp    edx,0x2f
c0002c59:	74 2b                	je     c0002c86 <create_name+0x84>
c0002c5b:	83 fa 5c             	cmp    edx,0x5c
c0002c5e:	74 35                	je     c0002c95 <create_name+0x93>
c0002c60:	83 fa 7f             	cmp    edx,0x7f
c0002c63:	77 0e                	ja     c0002c73 <create_name+0x71>
c0002c65:	b8 02 2a 02 c0       	mov    eax,0xc0022a02
c0002c6a:	e8 ef f3 ff ff       	call   c000205e <chk_chr>
c0002c6f:	85 c0                	test   eax,eax
c0002c71:	75 bc                	jne    c0002c2f <create_name+0x2d>
c0002c73:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0002c79:	77 b4                	ja     c0002c2f <create_name+0x2d>
c0002c7b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002c7f:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002c83:	46                   	inc    esi
c0002c84:	eb 99                	jmp    c0002c1f <create_name+0x1d>
c0002c86:	66 83 f8 1f          	cmp    ax,0x1f
c0002c8a:	b3 04                	mov    bl,0x4
c0002c8c:	76 1a                	jbe    c0002ca8 <create_name+0xa6>
c0002c8e:	eb 05                	jmp    c0002c95 <create_name+0x93>
c0002c90:	40                   	inc    eax
c0002c91:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002c95:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002c99:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0002c9c:	83 fa 2f             	cmp    edx,0x2f
c0002c9f:	74 ef                	je     c0002c90 <create_name+0x8e>
c0002ca1:	83 fa 5c             	cmp    edx,0x5c
c0002ca4:	74 ea                	je     c0002c90 <create_name+0x8e>
c0002ca6:	31 db                	xor    ebx,ebx
c0002ca8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002cac:	89 07                	mov    DWORD PTR [edi],eax
c0002cae:	85 f6                	test   esi,esi
c0002cb0:	74 16                	je     c0002cc8 <create_name+0xc6>
c0002cb2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002cb6:	0f b7 44 70 fe       	movzx  eax,WORD PTR [eax+esi*2-0x2]
c0002cbb:	83 f8 20             	cmp    eax,0x20
c0002cbe:	74 05                	je     c0002cc5 <create_name+0xc3>
c0002cc0:	83 f8 2e             	cmp    eax,0x2e
c0002cc3:	75 03                	jne    c0002cc8 <create_name+0xc6>
c0002cc5:	4e                   	dec    esi
c0002cc6:	eb e6                	jmp    c0002cae <create_name+0xac>
c0002cc8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002ccc:	31 ff                	xor    edi,edi
c0002cce:	85 f6                	test   esi,esi
c0002cd0:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0002cd6:	0f 84 53 ff ff ff    	je     c0002c2f <create_name+0x2d>
c0002cdc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002ce0:	8d 57 01             	lea    edx,[edi+0x1]
c0002ce3:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002ce7:	83 f8 20             	cmp    eax,0x20
c0002cea:	75 04                	jne    c0002cf0 <create_name+0xee>
c0002cec:	89 d7                	mov    edi,edx
c0002cee:	eb ec                	jmp    c0002cdc <create_name+0xda>
c0002cf0:	85 ff                	test   edi,edi
c0002cf2:	75 05                	jne    c0002cf9 <create_name+0xf7>
c0002cf4:	83 f8 2e             	cmp    eax,0x2e
c0002cf7:	75 08                	jne    c0002d01 <create_name+0xff>
c0002cf9:	83 cb 03             	or     ebx,0x3
c0002cfc:	eb 03                	jmp    c0002d01 <create_name+0xff>
c0002cfe:	4e                   	dec    esi
c0002cff:	74 0c                	je     c0002d0d <create_name+0x10b>
c0002d01:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002d05:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0002d0b:	75 f1                	jne    c0002cfe <create_name+0xfc>
c0002d0d:	b9 0b 00 00 00       	mov    ecx,0xb
c0002d12:	ba 20 00 00 00       	mov    edx,0x20
c0002d17:	8d 45 20             	lea    eax,[ebp+0x20]
c0002d1a:	e8 12 f3 ff ff       	call   c0002031 <mem_set>
c0002d1f:	31 c9                	xor    ecx,ecx
c0002d21:	c7 44 24 14 08 00 00 00 	mov    DWORD PTR [esp+0x14],0x8
c0002d29:	c6 44 24 08 00       	mov    BYTE PTR [esp+0x8],0x0
c0002d2e:	8d 47 01             	lea    eax,[edi+0x1]
c0002d31:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002d35:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002d39:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002d3d:	85 c0                	test   eax,eax
c0002d3f:	89 c7                	mov    edi,eax
c0002d41:	0f 84 1d 01 00 00    	je     c0002e64 <create_name+0x262>
c0002d47:	83 f8 20             	cmp    eax,0x20
c0002d4a:	74 0b                	je     c0002d57 <create_name+0x155>
c0002d4c:	83 f8 2e             	cmp    eax,0x2e
c0002d4f:	75 0f                	jne    c0002d60 <create_name+0x15e>
c0002d51:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002d55:	74 09                	je     c0002d60 <create_name+0x15e>
c0002d57:	83 cb 03             	or     ebx,0x3
c0002d5a:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0002d5e:	eb ce                	jmp    c0002d2e <create_name+0x12c>
c0002d60:	3b 4c 24 14          	cmp    ecx,DWORD PTR [esp+0x14]
c0002d64:	73 06                	jae    c0002d6c <create_name+0x16a>
c0002d66:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002d6a:	75 3a                	jne    c0002da6 <create_name+0x1a4>
c0002d6c:	83 7c 24 14 0b       	cmp    DWORD PTR [esp+0x14],0xb
c0002d71:	75 08                	jne    c0002d7b <create_name+0x179>
c0002d73:	83 cb 03             	or     ebx,0x3
c0002d76:	e9 e9 00 00 00       	jmp    c0002e64 <create_name+0x262>
c0002d7b:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002d7f:	74 0d                	je     c0002d8e <create_name+0x18c>
c0002d81:	83 cb 03             	or     ebx,0x3
c0002d84:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002d88:	0f 87 d6 00 00 00    	ja     c0002e64 <create_name+0x262>
c0002d8e:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002d93:	b9 08 00 00 00       	mov    ecx,0x8
c0002d98:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0002d9c:	c7 44 24 14 0b 00 00 00 	mov    DWORD PTR [esp+0x14],0xb
c0002da4:	eb b4                	jmp    c0002d5a <create_name+0x158>
c0002da6:	0f b7 c7             	movzx  eax,di
c0002da9:	83 f8 7f             	cmp    eax,0x7f
c0002dac:	76 66                	jbe    c0002e14 <create_name+0x212>
c0002dae:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002db2:	89 d9                	mov    ecx,ebx
c0002db4:	83 c9 02             	or     ecx,0x2
c0002db7:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002dbb:	52                   	push   edx
c0002dbc:	52                   	push   edx
c0002dbd:	68 b5 01 00 00       	push   0x1b5
c0002dc2:	50                   	push   eax
c0002dc3:	e8 9c 30 00 00       	call   c0005e64 <ff_uni2oem>
c0002dc8:	83 c4 10             	add    esp,0x10
c0002dcb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002dcf:	a8 80                	test   al,0x80
c0002dd1:	89 c7                	mov    edi,eax
c0002dd3:	74 0c                	je     c0002de1 <create_name+0x1df>
c0002dd5:	83 e7 7f             	and    edi,0x7f
c0002dd8:	0f b6 bf c0 2a 02 c0 	movzx  edi,BYTE PTR [edi-0x3ffdd540]
c0002ddf:	eb 2a                	jmp    c0002e0b <create_name+0x209>
c0002de1:	0f b7 c0             	movzx  eax,ax
c0002de4:	3d ff 00 00 00       	cmp    eax,0xff
c0002de9:	76 20                	jbe    c0002e0b <create_name+0x209>
c0002deb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0002def:	4a                   	dec    edx
c0002df0:	39 ca                	cmp    edx,ecx
c0002df2:	77 0c                	ja     c0002e00 <create_name+0x1fe>
c0002df4:	83 cb 03             	or     ebx,0x3
c0002df7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0002dfb:	e9 5a ff ff ff       	jmp    c0002d5a <create_name+0x158>
c0002e00:	88 64 0d 20          	mov    BYTE PTR [ebp+ecx*1+0x20],ah
c0002e04:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002e08:	41                   	inc    ecx
c0002e09:	eb 4d                	jmp    c0002e58 <create_name+0x256>
c0002e0b:	66 85 ff             	test   di,di
c0002e0e:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002e12:	74 19                	je     c0002e2d <create_name+0x22b>
c0002e14:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002e18:	0f b7 d7             	movzx  edx,di
c0002e1b:	b8 0b 2a 02 c0       	mov    eax,0xc0022a0b
c0002e20:	e8 39 f2 ff ff       	call   c000205e <chk_chr>
c0002e25:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002e29:	85 c0                	test   eax,eax
c0002e2b:	74 0a                	je     c0002e37 <create_name+0x235>
c0002e2d:	83 cb 03             	or     ebx,0x3
c0002e30:	bf 5f 00 00 00       	mov    edi,0x5f
c0002e35:	eb 21                	jmp    c0002e58 <create_name+0x256>
c0002e37:	8d 47 bf             	lea    eax,[edi-0x41]
c0002e3a:	66 83 f8 19          	cmp    ax,0x19
c0002e3e:	77 07                	ja     c0002e47 <create_name+0x245>
c0002e40:	83 4c 24 08 02       	or     DWORD PTR [esp+0x8],0x2
c0002e45:	eb 11                	jmp    c0002e58 <create_name+0x256>
c0002e47:	8d 47 9f             	lea    eax,[edi-0x61]
c0002e4a:	66 83 f8 19          	cmp    ax,0x19
c0002e4e:	77 08                	ja     c0002e58 <create_name+0x256>
c0002e50:	83 4c 24 08 01       	or     DWORD PTR [esp+0x8],0x1
c0002e55:	83 ef 20             	sub    edi,0x20
c0002e58:	89 f8                	mov    eax,edi
c0002e5a:	88 44 0d 20          	mov    BYTE PTR [ebp+ecx*1+0x20],al
c0002e5e:	41                   	inc    ecx
c0002e5f:	e9 f6 fe ff ff       	jmp    c0002d5a <create_name+0x158>
c0002e64:	80 7d 20 e5          	cmp    BYTE PTR [ebp+0x20],0xe5
c0002e68:	75 04                	jne    c0002e6e <create_name+0x26c>
c0002e6a:	c6 45 20 05          	mov    BYTE PTR [ebp+0x20],0x5
c0002e6e:	83 7c 24 14 08       	cmp    DWORD PTR [esp+0x14],0x8
c0002e73:	75 05                	jne    c0002e7a <create_name+0x278>
c0002e75:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002e7a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002e7e:	83 e0 0c             	and    eax,0xc
c0002e81:	83 f8 0c             	cmp    eax,0xc
c0002e84:	74 0c                	je     c0002e92 <create_name+0x290>
c0002e86:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002e8a:	83 e0 03             	and    eax,0x3
c0002e8d:	83 f8 03             	cmp    eax,0x3
c0002e90:	75 05                	jne    c0002e97 <create_name+0x295>
c0002e92:	83 cb 02             	or     ebx,0x2
c0002e95:	eb 19                	jmp    c0002eb0 <create_name+0x2ae>
c0002e97:	f6 c3 02             	test   bl,0x2
c0002e9a:	75 14                	jne    c0002eb0 <create_name+0x2ae>
c0002e9c:	f6 44 24 08 01       	test   BYTE PTR [esp+0x8],0x1
c0002ea1:	74 03                	je     c0002ea6 <create_name+0x2a4>
c0002ea3:	83 cb 10             	or     ebx,0x10
c0002ea6:	f6 44 24 08 04       	test   BYTE PTR [esp+0x8],0x4
c0002eab:	74 03                	je     c0002eb0 <create_name+0x2ae>
c0002ead:	83 cb 08             	or     ebx,0x8
c0002eb0:	88 5d 2b             	mov    BYTE PTR [ebp+0x2b],bl
c0002eb3:	31 c0                	xor    eax,eax
c0002eb5:	83 c4 3c             	add    esp,0x3c
c0002eb8:	5b                   	pop    ebx
c0002eb9:	5e                   	pop    esi
c0002eba:	5f                   	pop    edi
c0002ebb:	5d                   	pop    ebp
c0002ebc:	c3                   	ret    

c0002ebd <cmp_lfn>:
c0002ebd:	55                   	push   ebp
c0002ebe:	57                   	push   edi
c0002ebf:	89 d7                	mov    edi,edx
c0002ec1:	56                   	push   esi
c0002ec2:	53                   	push   ebx
c0002ec3:	83 ec 1c             	sub    esp,0x1c
c0002ec6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002eca:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002ecd:	e8 1e f1 ff ff       	call   c0001ff0 <ld_word>
c0002ed2:	66 85 c0             	test   ax,ax
c0002ed5:	74 07                	je     c0002ede <cmp_lfn+0x21>
c0002ed7:	31 c0                	xor    eax,eax
c0002ed9:	e9 a4 00 00 00       	jmp    c0002f82 <cmp_lfn+0xc5>
c0002ede:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002ee0:	bd 01 00 00 00       	mov    ebp,0x1
c0002ee5:	31 c9                	xor    ecx,ecx
c0002ee7:	83 e3 3f             	and    ebx,0x3f
c0002eea:	4b                   	dec    ebx
c0002eeb:	6b db 0d             	imul   ebx,ebx,0xd
c0002eee:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002ef2:	0f b6 81 40 2b 02 c0 	movzx  eax,BYTE PTR [ecx-0x3ffdd4c0]
c0002ef9:	01 f8                	add    eax,edi
c0002efb:	e8 f0 f0 ff ff       	call   c0001ff0 <ld_word>
c0002f00:	66 85 ed             	test   bp,bp
c0002f03:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f07:	0f b7 f0             	movzx  esi,ax
c0002f0a:	74 44                	je     c0002f50 <cmp_lfn+0x93>
c0002f0c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002f10:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002f16:	77 bf                	ja     c0002ed7 <cmp_lfn+0x1a>
c0002f18:	83 ec 0c             	sub    esp,0xc
c0002f1b:	0f b7 c6             	movzx  eax,si
c0002f1e:	50                   	push   eax
c0002f1f:	e8 54 30 00 00       	call   c0005f78 <ff_wtoupper>
c0002f24:	89 c5                	mov    ebp,eax
c0002f26:	8d 43 01             	lea    eax,[ebx+0x1]
c0002f29:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002f2d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002f31:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002f35:	89 04 24             	mov    DWORD PTR [esp],eax
c0002f38:	e8 3b 30 00 00       	call   c0005f78 <ff_wtoupper>
c0002f3d:	83 c4 10             	add    esp,0x10
c0002f40:	39 c5                	cmp    ebp,eax
c0002f42:	75 93                	jne    c0002ed7 <cmp_lfn+0x1a>
c0002f44:	89 f5                	mov    ebp,esi
c0002f46:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0002f4a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002f4e:	eb 0c                	jmp    c0002f5c <cmp_lfn+0x9f>
c0002f50:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0002f56:	0f 85 7b ff ff ff    	jne    c0002ed7 <cmp_lfn+0x1a>
c0002f5c:	41                   	inc    ecx
c0002f5d:	83 f9 0d             	cmp    ecx,0xd
c0002f60:	75 8c                	jne    c0002eee <cmp_lfn+0x31>
c0002f62:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002f65:	74 16                	je     c0002f7d <cmp_lfn+0xc0>
c0002f67:	66 85 ed             	test   bp,bp
c0002f6a:	74 11                	je     c0002f7d <cmp_lfn+0xc0>
c0002f6c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002f70:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002f75:	0f 94 c0             	sete   al
c0002f78:	0f b6 c0             	movzx  eax,al
c0002f7b:	eb 05                	jmp    c0002f82 <cmp_lfn+0xc5>
c0002f7d:	b8 01 00 00 00       	mov    eax,0x1
c0002f82:	83 c4 1c             	add    esp,0x1c
c0002f85:	5b                   	pop    ebx
c0002f86:	5e                   	pop    esi
c0002f87:	5f                   	pop    edi
c0002f88:	5d                   	pop    ebp
c0002f89:	c3                   	ret    

c0002f8a <sync_fs>:
c0002f8a:	56                   	push   esi
c0002f8b:	53                   	push   ebx
c0002f8c:	53                   	push   ebx
c0002f8d:	89 c3                	mov    ebx,eax
c0002f8f:	e8 5e f5 ff ff       	call   c00024f2 <sync_window>
c0002f94:	85 c0                	test   eax,eax
c0002f96:	0f 85 9a 00 00 00    	jne    c0003036 <sync_fs+0xac>
c0002f9c:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002f9f:	75 7b                	jne    c000301c <sync_fs+0x92>
c0002fa1:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002fa5:	75 75                	jne    c000301c <sync_fs+0x92>
c0002fa7:	8d 73 34             	lea    esi,[ebx+0x34]
c0002faa:	b9 00 02 00 00       	mov    ecx,0x200
c0002faf:	31 d2                	xor    edx,edx
c0002fb1:	89 f0                	mov    eax,esi
c0002fb3:	e8 79 f0 ff ff       	call   c0002031 <mem_set>
c0002fb8:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002fbe:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002fc3:	e8 4d f0 ff ff       	call   c0002015 <st_word>
c0002fc8:	ba 52 52 61 41       	mov    edx,0x41615252
c0002fcd:	89 f0                	mov    eax,esi
c0002fcf:	e8 45 f0 ff ff       	call   c0002019 <st_dword>
c0002fd4:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002fda:	ba 72 72 41 61       	mov    edx,0x61417272
c0002fdf:	e8 35 f0 ff ff       	call   c0002019 <st_dword>
c0002fe4:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002fe7:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002fed:	e8 27 f0 ff ff       	call   c0002019 <st_dword>
c0002ff2:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002ff5:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002ffb:	e8 19 f0 ff ff       	call   c0002019 <st_dword>
c0003000:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0003003:	6a 01                	push   0x1
c0003005:	40                   	inc    eax
c0003006:	50                   	push   eax
c0003007:	56                   	push   esi
c0003008:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000300b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000300f:	50                   	push   eax
c0003010:	e8 a6 ef ff ff       	call   c0001fbb <disk_write>
c0003015:	83 c4 10             	add    esp,0x10
c0003018:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c000301c:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0003020:	51                   	push   ecx
c0003021:	6a 00                	push   0x0
c0003023:	6a 00                	push   0x0
c0003025:	50                   	push   eax
c0003026:	e8 a6 ef ff ff       	call   c0001fd1 <disk_ioctl>
c000302b:	83 c4 10             	add    esp,0x10
c000302e:	85 c0                	test   eax,eax
c0003030:	0f 95 c0             	setne  al
c0003033:	0f b6 c0             	movzx  eax,al
c0003036:	5a                   	pop    edx
c0003037:	5b                   	pop    ebx
c0003038:	5e                   	pop    esi
c0003039:	c3                   	ret    

c000303a <create_partition>:
c000303a:	55                   	push   ebp
c000303b:	0f b6 c0             	movzx  eax,al
c000303e:	57                   	push   edi
c000303f:	56                   	push   esi
c0003040:	53                   	push   ebx
c0003041:	83 ec 40             	sub    esp,0x40
c0003044:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003048:	8d 44 24 30          	lea    eax,[esp+0x30]
c000304c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0003050:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003054:	50                   	push   eax
c0003055:	6a 01                	push   0x1
c0003057:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000305b:	e8 71 ef ff ff       	call   c0001fd1 <disk_ioctl>
c0003060:	83 c4 10             	add    esp,0x10
c0003063:	85 c0                	test   eax,eax
c0003065:	0f 85 68 01 00 00    	jne    c00031d3 <create_partition+0x199>
c000306b:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c000306f:	b9 05 00 00 00       	mov    ecx,0x5
c0003074:	be 08 00 00 00       	mov    esi,0x8
c0003079:	89 f0                	mov    eax,esi
c000307b:	31 d2                	xor    edx,edx
c000307d:	0f b6 d8             	movzx  ebx,al
c0003080:	89 e8                	mov    eax,ebp
c0003082:	f7 f3                	div    ebx
c0003084:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0003089:	76 0a                	jbe    c0003095 <create_partition+0x5b>
c000308b:	d1 e6                	shl    esi,1
c000308d:	49                   	dec    ecx
c000308e:	75 e9                	jne    c0003079 <create_partition+0x3f>
c0003090:	be ff ff ff ff       	mov    esi,0xffffffff
c0003095:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0003099:	b9 00 02 00 00       	mov    ecx,0x200
c000309e:	31 d2                	xor    edx,edx
c00030a0:	e8 8c ef ff ff       	call   c0002031 <mem_set>
c00030a5:	b9 64 00 00 00       	mov    ecx,0x64
c00030aa:	89 e8                	mov    eax,ebp
c00030ac:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00030b4:	31 d2                	xor    edx,edx
c00030b6:	f7 f1                	div    ecx
c00030b8:	b9 3f 00 00 00       	mov    ecx,0x3f
c00030bd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00030c1:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00030c5:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c00030cb:	89 f0                	mov    eax,esi
c00030cd:	0f b6 c0             	movzx  eax,al
c00030d0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00030d4:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c00030d9:	0f 96 c0             	setbe  al
c00030dc:	31 d2                	xor    edx,edx
c00030de:	85 c9                	test   ecx,ecx
c00030e0:	0f 95 c2             	setne  dl
c00030e3:	85 c2                	test   edx,eax
c00030e5:	0f 84 b7 00 00 00    	je     c00031a2 <create_partition+0x168>
c00030eb:	39 e9                	cmp    ecx,ebp
c00030ed:	0f 83 af 00 00 00    	jae    c00031a2 <create_partition+0x168>
c00030f3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00030f7:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00030fb:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c00030fe:	83 fe 64             	cmp    esi,0x64
c0003101:	77 0b                	ja     c000310e <create_partition+0xd4>
c0003103:	74 07                	je     c000310c <create_partition+0xd2>
c0003105:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c000310a:	eb 02                	jmp    c000310e <create_partition+0xd4>
c000310c:	89 ee                	mov    esi,ebp
c000310e:	89 ca                	mov    edx,ecx
c0003110:	31 c0                	xor    eax,eax
c0003112:	01 f2                	add    edx,esi
c0003114:	0f 92 c0             	setb   al
c0003117:	39 ea                	cmp    edx,ebp
c0003119:	77 04                	ja     c000311f <create_partition+0xe5>
c000311b:	85 c0                	test   eax,eax
c000311d:	74 06                	je     c0003125 <create_partition+0xeb>
c000311f:	89 ee                	mov    esi,ebp
c0003121:	29 ce                	sub    esi,ecx
c0003123:	eb 04                	jmp    c0003129 <create_partition+0xef>
c0003125:	85 f6                	test   esi,esi
c0003127:	74 79                	je     c00031a2 <create_partition+0x168>
c0003129:	89 ca                	mov    edx,ecx
c000312b:	89 d8                	mov    eax,ebx
c000312d:	e8 e7 ee ff ff       	call   c0002019 <st_dword>
c0003132:	8d 43 04             	lea    eax,[ebx+0x4]
c0003135:	89 f2                	mov    edx,esi
c0003137:	e8 dd ee ff ff       	call   c0002019 <st_dword>
c000313c:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0003140:	bf 3f 00 00 00       	mov    edi,0x3f
c0003145:	31 d2                	xor    edx,edx
c0003147:	83 c3 10             	add    ebx,0x10
c000314a:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c000314e:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0003151:	89 c8                	mov    eax,ecx
c0003153:	01 f1                	add    ecx,esi
c0003155:	f7 f7                	div    edi
c0003157:	89 d7                	mov    edi,edx
c0003159:	31 d2                	xor    edx,edx
c000315b:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c000315f:	47                   	inc    edi
c0003160:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0003163:	89 c2                	mov    edx,eax
c0003165:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0003168:	c1 ea 02             	shr    edx,0x2
c000316b:	8d 41 ff             	lea    eax,[ecx-0x1]
c000316e:	83 e2 c0             	and    edx,0xffffffc0
c0003171:	09 fa                	or     edx,edi
c0003173:	bf 3f 00 00 00       	mov    edi,0x3f
c0003178:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c000317b:	31 d2                	xor    edx,edx
c000317d:	f7 f7                	div    edi
c000317f:	89 d6                	mov    esi,edx
c0003181:	31 d2                	xor    edx,edx
c0003183:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0003187:	46                   	inc    esi
c0003188:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c000318b:	89 c7                	mov    edi,eax
c000318d:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0003190:	c1 ef 02             	shr    edi,0x2
c0003193:	83 e7 c0             	and    edi,0xffffffc0
c0003196:	09 fe                	or     esi,edi
c0003198:	89 f2                	mov    edx,esi
c000319a:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c000319d:	e9 32 ff ff ff       	jmp    c00030d4 <create_partition+0x9a>
c00031a2:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00031a6:	ba 55 aa 00 00       	mov    edx,0xaa55
c00031ab:	05 fe 01 00 00       	add    eax,0x1fe
c00031b0:	e8 60 ee ff ff       	call   c0002015 <st_word>
c00031b5:	6a 01                	push   0x1
c00031b7:	6a 00                	push   0x0
c00031b9:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c00031bd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00031c1:	e8 f5 ed ff ff       	call   c0001fbb <disk_write>
c00031c6:	83 c4 10             	add    esp,0x10
c00031c9:	85 c0                	test   eax,eax
c00031cb:	0f 95 c0             	setne  al
c00031ce:	0f b6 c0             	movzx  eax,al
c00031d1:	eb 05                	jmp    c00031d8 <create_partition+0x19e>
c00031d3:	b8 01 00 00 00       	mov    eax,0x1
c00031d8:	83 c4 3c             	add    esp,0x3c
c00031db:	5b                   	pop    ebx
c00031dc:	5e                   	pop    esi
c00031dd:	5f                   	pop    edi
c00031de:	5d                   	pop    ebp
c00031df:	c3                   	ret    

c00031e0 <get_fileinfo>:
c00031e0:	55                   	push   ebp
c00031e1:	57                   	push   edi
c00031e2:	56                   	push   esi
c00031e3:	53                   	push   ebx
c00031e4:	83 ec 1c             	sub    esp,0x1c
c00031e7:	8b 30                	mov    esi,DWORD PTR [eax]
c00031e9:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c00031ed:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c00031f1:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00031f5:	0f 84 de 01 00 00    	je     c00033d9 <get_fileinfo+0x1f9>
c00031fb:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c00031ff:	89 d3                	mov    ebx,edx
c0003201:	89 c6                	mov    esi,eax
c0003203:	74 7d                	je     c0003282 <get_fileinfo+0xa2>
c0003205:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000320d:	31 ff                	xor    edi,edi
c000320f:	66 c7 44 24 06 00 00 	mov    WORD PTR [esp+0x6],0x0
c0003216:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000321a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000321e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003221:	0f b7 04 08          	movzx  eax,WORD PTR [eax+ecx*1]
c0003225:	85 c0                	test   eax,eax
c0003227:	89 c2                	mov    edx,eax
c0003229:	74 44                	je     c000326f <get_fileinfo+0x8f>
c000322b:	0f b7 6c 24 06       	movzx  ebp,WORD PTR [esp+0x6]
c0003230:	85 ed                	test   ebp,ebp
c0003232:	75 0d                	jne    c0003241 <get_fileinfo+0x61>
c0003234:	8d 8a 00 28 00 00    	lea    ecx,[edx+0x2800]
c000323a:	66 81 f9 ff 07       	cmp    cx,0x7ff
c000323f:	76 20                	jbe    c0003261 <get_fileinfo+0x81>
c0003241:	c1 e5 10             	shl    ebp,0x10
c0003244:	b9 ff 00 00 00       	mov    ecx,0xff
c0003249:	29 f9                	sub    ecx,edi
c000324b:	09 e8                	or     eax,ebp
c000324d:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c0003251:	e8 f7 ee ff ff       	call   c000214d <put_utf>
c0003256:	0f b6 c0             	movzx  eax,al
c0003259:	85 c0                	test   eax,eax
c000325b:	74 10                	je     c000326d <get_fileinfo+0x8d>
c000325d:	01 c7                	add    edi,eax
c000325f:	31 d2                	xor    edx,edx
c0003261:	83 44 24 08 02       	add    DWORD PTR [esp+0x8],0x2
c0003266:	66 89 54 24 06       	mov    WORD PTR [esp+0x6],dx
c000326b:	eb a9                	jmp    c0003216 <get_fileinfo+0x36>
c000326d:	31 ff                	xor    edi,edi
c000326f:	66 83 7c 24 06 00    	cmp    WORD PTR [esp+0x6],0x0
c0003275:	b8 00 00 00 00       	mov    eax,0x0
c000327a:	0f 45 f8             	cmovne edi,eax
c000327d:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c0003282:	31 ff                	xor    edi,edi
c0003284:	31 c9                	xor    ecx,ecx
c0003286:	83 f9 0a             	cmp    ecx,0xa
c0003289:	0f 87 ac 00 00 00    	ja     c000333b <get_fileinfo+0x15b>
c000328f:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003292:	8d 69 01             	lea    ebp,[ecx+0x1]
c0003295:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c0003299:	83 f8 20             	cmp    eax,0x20
c000329c:	89 c2                	mov    edx,eax
c000329e:	0f 84 90 00 00 00    	je     c0003334 <get_fileinfo+0x154>
c00032a4:	83 f8 05             	cmp    eax,0x5
c00032a7:	75 05                	jne    c00032ae <get_fileinfo+0xce>
c00032a9:	ba e5 00 00 00       	mov    edx,0xe5
c00032ae:	83 fd 09             	cmp    ebp,0x9
c00032b1:	75 0b                	jne    c00032be <get_fileinfo+0xde>
c00032b3:	83 ff 0b             	cmp    edi,0xb
c00032b6:	77 06                	ja     c00032be <get_fileinfo+0xde>
c00032b8:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c00032bd:	47                   	inc    edi
c00032be:	0f b7 c2             	movzx  eax,dx
c00032c1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00032c5:	e8 a5 ed ff ff       	call   c000206f <dbc_1st>
c00032ca:	85 c0                	test   eax,eax
c00032cc:	74 2f                	je     c00032fd <get_fileinfo+0x11d>
c00032ce:	83 fd 08             	cmp    ebp,0x8
c00032d1:	74 2a                	je     c00032fd <get_fileinfo+0x11d>
c00032d3:	83 fd 0b             	cmp    ebp,0xb
c00032d6:	74 25                	je     c00032fd <get_fileinfo+0x11d>
c00032d8:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00032db:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c00032df:	88 44 24 06          	mov    BYTE PTR [esp+0x6],al
c00032e3:	e8 8a ed ff ff       	call   c0002072 <dbc_2nd>
c00032e8:	85 c0                	test   eax,eax
c00032ea:	74 11                	je     c00032fd <get_fileinfo+0x11d>
c00032ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00032f0:	8d 69 02             	lea    ebp,[ecx+0x2]
c00032f3:	0f b6 54 24 06       	movzx  edx,BYTE PTR [esp+0x6]
c00032f8:	c1 e0 08             	shl    eax,0x8
c00032fb:	09 c2                	or     edx,eax
c00032fd:	50                   	push   eax
c00032fe:	0f b7 d2             	movzx  edx,dx
c0003301:	50                   	push   eax
c0003302:	68 b5 01 00 00       	push   0x1b5
c0003307:	52                   	push   edx
c0003308:	e8 f3 2b 00 00       	call   c0005f00 <ff_oem2uni>
c000330d:	83 c4 10             	add    esp,0x10
c0003310:	0f b7 c0             	movzx  eax,ax
c0003313:	85 c0                	test   eax,eax
c0003315:	75 04                	jne    c000331b <get_fileinfo+0x13b>
c0003317:	31 ff                	xor    edi,edi
c0003319:	eb 20                	jmp    c000333b <get_fileinfo+0x15b>
c000331b:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c000331f:	b9 0c 00 00 00       	mov    ecx,0xc
c0003324:	29 f9                	sub    ecx,edi
c0003326:	e8 22 ee ff ff       	call   c000214d <put_utf>
c000332b:	0f b6 c0             	movzx  eax,al
c000332e:	85 c0                	test   eax,eax
c0003330:	74 e5                	je     c0003317 <get_fileinfo+0x137>
c0003332:	01 c7                	add    edi,eax
c0003334:	89 e9                	mov    ecx,ebp
c0003336:	e9 4b ff ff ff       	jmp    c0003286 <get_fileinfo+0xa6>
c000333b:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c0003340:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c0003344:	75 5f                	jne    c00033a5 <get_fileinfo+0x1c5>
c0003346:	85 ff                	test   edi,edi
c0003348:	75 0b                	jne    c0003355 <get_fileinfo+0x175>
c000334a:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c000334e:	ba 01 00 00 00       	mov    edx,0x1
c0003353:	eb 3e                	jmp    c0003393 <get_fileinfo+0x1b3>
c0003355:	bf 08 00 00 00       	mov    edi,0x8
c000335a:	31 d2                	xor    edx,edx
c000335c:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0003362:	84 c0                	test   al,al
c0003364:	74 2d                	je     c0003393 <get_fileinfo+0x1b3>
c0003366:	66 83 f8 2e          	cmp    ax,0x2e
c000336a:	74 1b                	je     c0003387 <get_fileinfo+0x1a7>
c000336c:	8d 48 bf             	lea    ecx,[eax-0x41]
c000336f:	66 83 f9 19          	cmp    cx,0x19
c0003373:	77 17                	ja     c000338c <get_fileinfo+0x1ac>
c0003375:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003378:	8a 49 0c             	mov    cl,BYTE PTR [ecx+0xc]
c000337b:	21 f9                	and    ecx,edi
c000337d:	80 e1 18             	and    cl,0x18
c0003380:	74 0a                	je     c000338c <get_fileinfo+0x1ac>
c0003382:	83 c0 20             	add    eax,0x20
c0003385:	eb 05                	jmp    c000338c <get_fileinfo+0x1ac>
c0003387:	bf 10 00 00 00       	mov    edi,0x10
c000338c:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c0003390:	42                   	inc    edx
c0003391:	eb c9                	jmp    c000335c <get_fileinfo+0x17c>
c0003393:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c0003398:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000339b:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c000339f:	75 04                	jne    c00033a5 <get_fileinfo+0x1c5>
c00033a1:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c00033a5:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00033a8:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c00033ab:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c00033ae:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00033b1:	83 c0 1c             	add    eax,0x1c
c00033b4:	e8 44 ec ff ff       	call   c0001ffd <ld_dword>
c00033b9:	89 03                	mov    DWORD PTR [ebx],eax
c00033bb:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00033be:	83 c0 16             	add    eax,0x16
c00033c1:	e8 2a ec ff ff       	call   c0001ff0 <ld_word>
c00033c6:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c00033ca:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00033cd:	83 c0 18             	add    eax,0x18
c00033d0:	e8 1b ec ff ff       	call   c0001ff0 <ld_word>
c00033d5:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00033d9:	83 c4 1c             	add    esp,0x1c
c00033dc:	5b                   	pop    ebx
c00033dd:	5e                   	pop    esi
c00033de:	5f                   	pop    edi
c00033df:	5d                   	pop    ebp
c00033e0:	c3                   	ret    

c00033e1 <ld_clust.isra.0>:
c00033e1:	56                   	push   esi
c00033e2:	89 c6                	mov    esi,eax
c00033e4:	53                   	push   ebx
c00033e5:	89 d3                	mov    ebx,edx
c00033e7:	8d 42 1a             	lea    eax,[edx+0x1a]
c00033ea:	e8 01 ec ff ff       	call   c0001ff0 <ld_word>
c00033ef:	0f b7 c8             	movzx  ecx,ax
c00033f2:	89 f0                	mov    eax,esi
c00033f4:	3c 03                	cmp    al,0x3
c00033f6:	75 0d                	jne    c0003405 <ld_clust.isra.0+0x24>
c00033f8:	8d 43 14             	lea    eax,[ebx+0x14]
c00033fb:	e8 f0 eb ff ff       	call   c0001ff0 <ld_word>
c0003400:	c1 e0 10             	shl    eax,0x10
c0003403:	09 c1                	or     ecx,eax
c0003405:	5b                   	pop    ebx
c0003406:	89 c8                	mov    eax,ecx
c0003408:	5e                   	pop    esi
c0003409:	c3                   	ret    

c000340a <st_clust.isra.1>:
c000340a:	56                   	push   esi
c000340b:	89 c6                	mov    esi,eax
c000340d:	53                   	push   ebx
c000340e:	89 d3                	mov    ebx,edx
c0003410:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0003413:	0f b7 d1             	movzx  edx,cx
c0003416:	e8 fa eb ff ff       	call   c0002015 <st_word>
c000341b:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c000341e:	75 0f                	jne    c000342f <st_clust.isra.1+0x25>
c0003420:	8d 43 14             	lea    eax,[ebx+0x14]
c0003423:	5b                   	pop    ebx
c0003424:	c1 e9 10             	shr    ecx,0x10
c0003427:	89 ca                	mov    edx,ecx
c0003429:	5e                   	pop    esi
c000342a:	e9 e6 eb ff ff       	jmp    c0002015 <st_word>
c000342f:	5b                   	pop    ebx
c0003430:	5e                   	pop    esi
c0003431:	c3                   	ret    

c0003432 <get_fat.isra.2>:
c0003432:	83 fa 01             	cmp    edx,0x1
c0003435:	b9 01 00 00 00       	mov    ecx,0x1
c000343a:	0f 86 f4 00 00 00    	jbe    c0003534 <get_fat.isra.2+0x102>
c0003440:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0003443:	0f 83 eb 00 00 00    	jae    c0003534 <get_fat.isra.2+0x102>
c0003449:	55                   	push   ebp
c000344a:	57                   	push   edi
c000344b:	56                   	push   esi
c000344c:	89 c6                	mov    esi,eax
c000344e:	53                   	push   ebx
c000344f:	89 d3                	mov    ebx,edx
c0003451:	83 ec 0c             	sub    esp,0xc
c0003454:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0003457:	83 f8 02             	cmp    eax,0x2
c000345a:	74 79                	je     c00034d5 <get_fat.isra.2+0xa3>
c000345c:	83 f8 03             	cmp    eax,0x3
c000345f:	0f 84 97 00 00 00    	je     c00034fc <get_fat.isra.2+0xca>
c0003465:	48                   	dec    eax
c0003466:	0f 85 be 00 00 00    	jne    c000352a <get_fat.isra.2+0xf8>
c000346c:	89 d7                	mov    edi,edx
c000346e:	89 f0                	mov    eax,esi
c0003470:	d1 ef                	shr    edi,1
c0003472:	01 d7                	add    edi,edx
c0003474:	89 fa                	mov    edx,edi
c0003476:	c1 ea 09             	shr    edx,0x9
c0003479:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000347c:	e8 d4 f0 ff ff       	call   c0002555 <move_window>
c0003481:	85 c0                	test   eax,eax
c0003483:	74 08                	je     c000348d <get_fat.isra.2+0x5b>
c0003485:	83 c9 ff             	or     ecx,0xffffffff
c0003488:	e9 9d 00 00 00       	jmp    c000352a <get_fat.isra.2+0xf8>
c000348d:	8d 6f 01             	lea    ebp,[edi+0x1]
c0003490:	89 f0                	mov    eax,esi
c0003492:	89 ea                	mov    edx,ebp
c0003494:	81 e7 ff 01 00 00    	and    edi,0x1ff
c000349a:	c1 ea 09             	shr    edx,0x9
c000349d:	0f b6 7c 3e 34       	movzx  edi,BYTE PTR [esi+edi*1+0x34]
c00034a2:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00034a5:	e8 ab f0 ff ff       	call   c0002555 <move_window>
c00034aa:	85 c0                	test   eax,eax
c00034ac:	75 d7                	jne    c0003485 <get_fat.isra.2+0x53>
c00034ae:	89 f8                	mov    eax,edi
c00034b0:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00034b6:	0f b6 f8             	movzx  edi,al
c00034b9:	0f b6 44 2e 34       	movzx  eax,BYTE PTR [esi+ebp*1+0x34]
c00034be:	c1 e0 08             	shl    eax,0x8
c00034c1:	09 f8                	or     eax,edi
c00034c3:	89 c1                	mov    ecx,eax
c00034c5:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c00034cb:	80 e3 01             	and    bl,0x1
c00034ce:	74 5a                	je     c000352a <get_fat.isra.2+0xf8>
c00034d0:	c1 e8 04             	shr    eax,0x4
c00034d3:	eb 53                	jmp    c0003528 <get_fat.isra.2+0xf6>
c00034d5:	c1 ea 08             	shr    edx,0x8
c00034d8:	89 f0                	mov    eax,esi
c00034da:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00034dd:	e8 73 f0 ff ff       	call   c0002555 <move_window>
c00034e2:	85 c0                	test   eax,eax
c00034e4:	75 9f                	jne    c0003485 <get_fat.isra.2+0x53>
c00034e6:	01 db                	add    ebx,ebx
c00034e8:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c00034ee:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c00034f2:	e8 f9 ea ff ff       	call   c0001ff0 <ld_word>
c00034f7:	0f b7 c8             	movzx  ecx,ax
c00034fa:	eb 2e                	jmp    c000352a <get_fat.isra.2+0xf8>
c00034fc:	c1 ea 07             	shr    edx,0x7
c00034ff:	89 f0                	mov    eax,esi
c0003501:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0003504:	e8 4c f0 ff ff       	call   c0002555 <move_window>
c0003509:	85 c0                	test   eax,eax
c000350b:	0f 85 74 ff ff ff    	jne    c0003485 <get_fat.isra.2+0x53>
c0003511:	c1 e3 02             	shl    ebx,0x2
c0003514:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c000351a:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c000351e:	e8 da ea ff ff       	call   c0001ffd <ld_dword>
c0003523:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003528:	89 c1                	mov    ecx,eax
c000352a:	83 c4 0c             	add    esp,0xc
c000352d:	89 c8                	mov    eax,ecx
c000352f:	5b                   	pop    ebx
c0003530:	5e                   	pop    esi
c0003531:	5f                   	pop    edi
c0003532:	5d                   	pop    ebp
c0003533:	c3                   	ret    
c0003534:	89 c8                	mov    eax,ecx
c0003536:	c3                   	ret    

c0003537 <dir_sdi>:
c0003537:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c000353d:	0f 87 b6 00 00 00    	ja     c00035f9 <dir_sdi+0xc2>
c0003543:	55                   	push   ebp
c0003544:	57                   	push   edi
c0003545:	56                   	push   esi
c0003546:	53                   	push   ebx
c0003547:	89 d3                	mov    ebx,edx
c0003549:	83 ec 1c             	sub    esp,0x1c
c000354c:	f6 c2 1f             	test   dl,0x1f
c000354f:	74 0a                	je     c000355b <dir_sdi+0x24>
c0003551:	b8 02 00 00 00       	mov    eax,0x2
c0003556:	e9 96 00 00 00       	jmp    c00035f1 <dir_sdi+0xba>
c000355b:	89 c6                	mov    esi,eax
c000355d:	8b 28                	mov    ebp,DWORD PTR [eax]
c000355f:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c0003562:	8b 78 08             	mov    edi,DWORD PTR [eax+0x8]
c0003565:	85 ff                	test   edi,edi
c0003567:	75 21                	jne    c000358a <dir_sdi+0x53>
c0003569:	80 7d 00 02          	cmp    BYTE PTR [ebp+0x0],0x2
c000356d:	76 07                	jbe    c0003576 <dir_sdi+0x3f>
c000356f:	8b 45 28             	mov    eax,DWORD PTR [ebp+0x28]
c0003572:	85 c0                	test   eax,eax
c0003574:	75 12                	jne    c0003588 <dir_sdi+0x51>
c0003576:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000357a:	89 da                	mov    edx,ebx
c000357c:	c1 ea 05             	shr    edx,0x5
c000357f:	39 c2                	cmp    edx,eax
c0003581:	73 ce                	jae    c0003551 <dir_sdi+0x1a>
c0003583:	8b 45 28             	mov    eax,DWORD PTR [ebp+0x28]
c0003586:	eb 3c                	jmp    c00035c4 <dir_sdi+0x8d>
c0003588:	89 c7                	mov    edi,eax
c000358a:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c000358e:	c1 e1 09             	shl    ecx,0x9
c0003591:	39 cb                	cmp    ebx,ecx
c0003593:	72 26                	jb     c00035bb <dir_sdi+0x84>
c0003595:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003599:	8b 06                	mov    eax,DWORD PTR [esi]
c000359b:	89 fa                	mov    edx,edi
c000359d:	e8 90 fe ff ff       	call   c0003432 <get_fat.isra.2>
c00035a2:	83 f8 ff             	cmp    eax,0xffffffff
c00035a5:	89 c7                	mov    edi,eax
c00035a7:	74 43                	je     c00035ec <dir_sdi+0xb5>
c00035a9:	83 f8 01             	cmp    eax,0x1
c00035ac:	76 a3                	jbe    c0003551 <dir_sdi+0x1a>
c00035ae:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c00035b1:	76 9e                	jbe    c0003551 <dir_sdi+0x1a>
c00035b3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00035b7:	29 cb                	sub    ebx,ecx
c00035b9:	eb d6                	jmp    c0003591 <dir_sdi+0x5a>
c00035bb:	89 fa                	mov    edx,edi
c00035bd:	89 e8                	mov    eax,ebp
c00035bf:	e8 82 ec ff ff       	call   c0002246 <clst2sect>
c00035c4:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00035c7:	89 7e 14             	mov    DWORD PTR [esi+0x14],edi
c00035ca:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c00035cd:	85 d2                	test   edx,edx
c00035cf:	74 80                	je     c0003551 <dir_sdi+0x1a>
c00035d1:	89 d8                	mov    eax,ebx
c00035d3:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00035d9:	c1 e8 09             	shr    eax,0x9
c00035dc:	01 d0                	add    eax,edx
c00035de:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00035e1:	8d 44 1d 34          	lea    eax,[ebp+ebx*1+0x34]
c00035e5:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00035e8:	31 c0                	xor    eax,eax
c00035ea:	eb 05                	jmp    c00035f1 <dir_sdi+0xba>
c00035ec:	b8 01 00 00 00       	mov    eax,0x1
c00035f1:	83 c4 1c             	add    esp,0x1c
c00035f4:	5b                   	pop    ebx
c00035f5:	5e                   	pop    esi
c00035f6:	5f                   	pop    edi
c00035f7:	5d                   	pop    ebp
c00035f8:	c3                   	ret    
c00035f9:	b8 02 00 00 00       	mov    eax,0x2
c00035fe:	c3                   	ret    

c00035ff <create_chain>:
c00035ff:	55                   	push   ebp
c0003600:	89 c5                	mov    ebp,eax
c0003602:	57                   	push   edi
c0003603:	89 d7                	mov    edi,edx
c0003605:	56                   	push   esi
c0003606:	53                   	push   ebx
c0003607:	83 ec 1c             	sub    esp,0x1c
c000360a:	85 d2                	test   edx,edx
c000360c:	8b 18                	mov    ebx,DWORD PTR [eax]
c000360e:	75 0e                	jne    c000361e <create_chain+0x1f>
c0003610:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0003613:	85 c9                	test   ecx,ecx
c0003615:	74 32                	je     c0003649 <create_chain+0x4a>
c0003617:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000361a:	77 32                	ja     c000364e <create_chain+0x4f>
c000361c:	eb 2b                	jmp    c0003649 <create_chain+0x4a>
c000361e:	89 d8                	mov    eax,ebx
c0003620:	e8 0d fe ff ff       	call   c0003432 <get_fat.isra.2>
c0003625:	83 f8 01             	cmp    eax,0x1
c0003628:	77 0a                	ja     c0003634 <create_chain+0x35>
c000362a:	b8 01 00 00 00       	mov    eax,0x1
c000362f:	e9 fd 00 00 00       	jmp    c0003731 <create_chain+0x132>
c0003634:	83 f8 ff             	cmp    eax,0xffffffff
c0003637:	0f 84 f1 00 00 00    	je     c000372e <create_chain+0x12f>
c000363d:	39 43 18             	cmp    DWORD PTR [ebx+0x18],eax
c0003640:	89 f9                	mov    ecx,edi
c0003642:	76 0a                	jbe    c000364e <create_chain+0x4f>
c0003644:	e9 e8 00 00 00       	jmp    c0003731 <create_chain+0x132>
c0003649:	b9 01 00 00 00       	mov    ecx,0x1
c000364e:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0003652:	75 07                	jne    c000365b <create_chain+0x5c>
c0003654:	31 c0                	xor    eax,eax
c0003656:	e9 d6 00 00 00       	jmp    c0003731 <create_chain+0x132>
c000365b:	39 f9                	cmp    ecx,edi
c000365d:	75 49                	jne    c00036a8 <create_chain+0xa9>
c000365f:	8d 71 01             	lea    esi,[ecx+0x1]
c0003662:	39 73 18             	cmp    DWORD PTR [ebx+0x18],esi
c0003665:	77 05                	ja     c000366c <create_chain+0x6d>
c0003667:	be 02 00 00 00       	mov    esi,0x2
c000366c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003670:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003673:	89 f2                	mov    edx,esi
c0003675:	e8 b8 fd ff ff       	call   c0003432 <get_fat.isra.2>
c000367a:	83 f8 01             	cmp    eax,0x1
c000367d:	0f 84 ae 00 00 00    	je     c0003731 <create_chain+0x132>
c0003683:	83 f8 ff             	cmp    eax,0xffffffff
c0003686:	0f 84 a5 00 00 00    	je     c0003731 <create_chain+0x132>
c000368c:	85 c0                	test   eax,eax
c000368e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003692:	74 10                	je     c00036a4 <create_chain+0xa5>
c0003694:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003697:	83 f8 01             	cmp    eax,0x1
c000369a:	76 0c                	jbe    c00036a8 <create_chain+0xa9>
c000369c:	39 43 18             	cmp    DWORD PTR [ebx+0x18],eax
c000369f:	0f 47 c8             	cmova  ecx,eax
c00036a2:	eb 04                	jmp    c00036a8 <create_chain+0xa9>
c00036a4:	85 f6                	test   esi,esi
c00036a6:	75 3b                	jne    c00036e3 <create_chain+0xe4>
c00036a8:	89 ce                	mov    esi,ecx
c00036aa:	46                   	inc    esi
c00036ab:	39 73 18             	cmp    DWORD PTR [ebx+0x18],esi
c00036ae:	77 0a                	ja     c00036ba <create_chain+0xbb>
c00036b0:	83 f9 01             	cmp    ecx,0x1
c00036b3:	76 9f                	jbe    c0003654 <create_chain+0x55>
c00036b5:	be 02 00 00 00       	mov    esi,0x2
c00036ba:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00036be:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00036c1:	89 f2                	mov    edx,esi
c00036c3:	e8 6a fd ff ff       	call   c0003432 <get_fat.isra.2>
c00036c8:	85 c0                	test   eax,eax
c00036ca:	74 17                	je     c00036e3 <create_chain+0xe4>
c00036cc:	83 f8 01             	cmp    eax,0x1
c00036cf:	74 60                	je     c0003731 <create_chain+0x132>
c00036d1:	83 f8 ff             	cmp    eax,0xffffffff
c00036d4:	74 5b                	je     c0003731 <create_chain+0x132>
c00036d6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00036da:	39 ce                	cmp    esi,ecx
c00036dc:	75 cc                	jne    c00036aa <create_chain+0xab>
c00036de:	e9 71 ff ff ff       	jmp    c0003654 <create_chain+0x55>
c00036e3:	83 c9 ff             	or     ecx,0xffffffff
c00036e6:	89 f2                	mov    edx,esi
c00036e8:	89 d8                	mov    eax,ebx
c00036ea:	e8 c0 f2 ff ff       	call   c00029af <put_fat>
c00036ef:	85 c0                	test   eax,eax
c00036f1:	75 0f                	jne    c0003702 <create_chain+0x103>
c00036f3:	85 ff                	test   edi,edi
c00036f5:	74 0b                	je     c0003702 <create_chain+0x103>
c00036f7:	89 f1                	mov    ecx,esi
c00036f9:	89 fa                	mov    edx,edi
c00036fb:	89 d8                	mov    eax,ebx
c00036fd:	e8 ad f2 ff ff       	call   c00029af <put_fat>
c0003702:	85 c0                	test   eax,eax
c0003704:	75 21                	jne    c0003727 <create_chain+0x128>
c0003706:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0003709:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000370c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000370f:	8d 57 fe             	lea    edx,[edi-0x2]
c0003712:	39 d0                	cmp    eax,edx
c0003714:	77 04                	ja     c000371a <create_chain+0x11b>
c0003716:	48                   	dec    eax
c0003717:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000371a:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c000371d:	83 c8 01             	or     eax,0x1
c0003720:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c0003723:	89 f0                	mov    eax,esi
c0003725:	eb 0a                	jmp    c0003731 <create_chain+0x132>
c0003727:	48                   	dec    eax
c0003728:	0f 85 fc fe ff ff    	jne    c000362a <create_chain+0x2b>
c000372e:	83 c8 ff             	or     eax,0xffffffff
c0003731:	83 c4 1c             	add    esp,0x1c
c0003734:	5b                   	pop    ebx
c0003735:	5e                   	pop    esi
c0003736:	5f                   	pop    edi
c0003737:	5d                   	pop    ebp
c0003738:	c3                   	ret    

c0003739 <remove_chain>:
c0003739:	55                   	push   ebp
c000373a:	57                   	push   edi
c000373b:	56                   	push   esi
c000373c:	89 d6                	mov    esi,edx
c000373e:	53                   	push   ebx
c000373f:	83 ec 0c             	sub    esp,0xc
c0003742:	83 fa 01             	cmp    edx,0x1
c0003745:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003747:	76 6a                	jbe    c00037b3 <remove_chain+0x7a>
c0003749:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000374c:	76 65                	jbe    c00037b3 <remove_chain+0x7a>
c000374e:	85 c9                	test   ecx,ecx
c0003750:	89 c5                	mov    ebp,eax
c0003752:	89 ca                	mov    edx,ecx
c0003754:	74 0e                	je     c0003764 <remove_chain+0x2b>
c0003756:	83 c9 ff             	or     ecx,0xffffffff
c0003759:	89 d8                	mov    eax,ebx
c000375b:	e8 4f f2 ff ff       	call   c00029af <put_fat>
c0003760:	85 c0                	test   eax,eax
c0003762:	75 5b                	jne    c00037bf <remove_chain+0x86>
c0003764:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003767:	89 f2                	mov    edx,esi
c0003769:	e8 c4 fc ff ff       	call   c0003432 <get_fat.isra.2>
c000376e:	85 c0                	test   eax,eax
c0003770:	89 c7                	mov    edi,eax
c0003772:	75 04                	jne    c0003778 <remove_chain+0x3f>
c0003774:	31 c0                	xor    eax,eax
c0003776:	eb 47                	jmp    c00037bf <remove_chain+0x86>
c0003778:	83 f8 01             	cmp    eax,0x1
c000377b:	74 36                	je     c00037b3 <remove_chain+0x7a>
c000377d:	83 f8 ff             	cmp    eax,0xffffffff
c0003780:	74 38                	je     c00037ba <remove_chain+0x81>
c0003782:	31 c9                	xor    ecx,ecx
c0003784:	89 f2                	mov    edx,esi
c0003786:	89 d8                	mov    eax,ebx
c0003788:	e8 22 f2 ff ff       	call   c00029af <put_fat>
c000378d:	85 c0                	test   eax,eax
c000378f:	75 2e                	jne    c00037bf <remove_chain+0x86>
c0003791:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003794:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003797:	8d 4a fe             	lea    ecx,[edx-0x2]
c000379a:	39 c8                	cmp    eax,ecx
c000379c:	73 0d                	jae    c00037ab <remove_chain+0x72>
c000379e:	40                   	inc    eax
c000379f:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00037a2:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c00037a5:	83 c8 01             	or     eax,0x1
c00037a8:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c00037ab:	39 fa                	cmp    edx,edi
c00037ad:	89 fe                	mov    esi,edi
c00037af:	77 b3                	ja     c0003764 <remove_chain+0x2b>
c00037b1:	eb c1                	jmp    c0003774 <remove_chain+0x3b>
c00037b3:	b8 02 00 00 00       	mov    eax,0x2
c00037b8:	eb 05                	jmp    c00037bf <remove_chain+0x86>
c00037ba:	b8 01 00 00 00       	mov    eax,0x1
c00037bf:	83 c4 0c             	add    esp,0xc
c00037c2:	5b                   	pop    ebx
c00037c3:	5e                   	pop    esi
c00037c4:	5f                   	pop    edi
c00037c5:	5d                   	pop    ebp
c00037c6:	c3                   	ret    

c00037c7 <dir_next>:
c00037c7:	55                   	push   ebp
c00037c8:	57                   	push   edi
c00037c9:	56                   	push   esi
c00037ca:	53                   	push   ebx
c00037cb:	83 ec 1c             	sub    esp,0x1c
c00037ce:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00037d1:	8b 28                	mov    ebp,DWORD PTR [eax]
c00037d3:	83 c7 20             	add    edi,0x20
c00037d6:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00037dc:	76 07                	jbe    c00037e5 <dir_next+0x1e>
c00037de:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00037e5:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c00037e8:	b9 04 00 00 00       	mov    ecx,0x4
c00037ed:	85 f6                	test   esi,esi
c00037ef:	0f 84 cd 00 00 00    	je     c00038c2 <dir_next+0xfb>
c00037f5:	89 c3                	mov    ebx,eax
c00037f7:	89 f8                	mov    eax,edi
c00037f9:	25 ff 01 00 00       	and    eax,0x1ff
c00037fe:	89 d1                	mov    ecx,edx
c0003800:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003804:	0f 85 a8 00 00 00    	jne    c00038b2 <dir_next+0xeb>
c000380a:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000380d:	46                   	inc    esi
c000380e:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c0003811:	85 d2                	test   edx,edx
c0003813:	75 22                	jne    c0003837 <dir_next+0x70>
c0003815:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003819:	89 fa                	mov    edx,edi
c000381b:	c1 ea 05             	shr    edx,0x5
c000381e:	39 c2                	cmp    edx,eax
c0003820:	0f 82 8c 00 00 00    	jb     c00038b2 <dir_next+0xeb>
c0003826:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000382d:	b9 04 00 00 00       	mov    ecx,0x4
c0003832:	e9 8b 00 00 00       	jmp    c00038c2 <dir_next+0xfb>
c0003837:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000383b:	89 fe                	mov    esi,edi
c000383d:	c1 ee 09             	shr    esi,0x9
c0003840:	48                   	dec    eax
c0003841:	85 f0                	test   eax,esi
c0003843:	75 6d                	jne    c00038b2 <dir_next+0xeb>
c0003845:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003849:	89 e8                	mov    eax,ebp
c000384b:	e8 e2 fb ff ff       	call   c0003432 <get_fat.isra.2>
c0003850:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003854:	83 f8 01             	cmp    eax,0x1
c0003857:	89 c6                	mov    esi,eax
c0003859:	77 07                	ja     c0003862 <dir_next+0x9b>
c000385b:	b9 02 00 00 00       	mov    ecx,0x2
c0003860:	eb 60                	jmp    c00038c2 <dir_next+0xfb>
c0003862:	83 f8 ff             	cmp    eax,0xffffffff
c0003865:	75 07                	jne    c000386e <dir_next+0xa7>
c0003867:	b9 01 00 00 00       	mov    ecx,0x1
c000386c:	eb 54                	jmp    c00038c2 <dir_next+0xfb>
c000386e:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003871:	77 30                	ja     c00038a3 <dir_next+0xdc>
c0003873:	85 c9                	test   ecx,ecx
c0003875:	74 af                	je     c0003826 <dir_next+0x5f>
c0003877:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000387a:	89 d8                	mov    eax,ebx
c000387c:	e8 7e fd ff ff       	call   c00035ff <create_chain>
c0003881:	b9 07 00 00 00       	mov    ecx,0x7
c0003886:	85 c0                	test   eax,eax
c0003888:	89 c6                	mov    esi,eax
c000388a:	74 36                	je     c00038c2 <dir_next+0xfb>
c000388c:	83 f8 01             	cmp    eax,0x1
c000388f:	74 ca                	je     c000385b <dir_next+0x94>
c0003891:	83 f8 ff             	cmp    eax,0xffffffff
c0003894:	74 d1                	je     c0003867 <dir_next+0xa0>
c0003896:	89 c2                	mov    edx,eax
c0003898:	89 e8                	mov    eax,ebp
c000389a:	e8 67 f2 ff ff       	call   c0002b06 <dir_clear>
c000389f:	85 c0                	test   eax,eax
c00038a1:	75 c4                	jne    c0003867 <dir_next+0xa0>
c00038a3:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c00038a6:	89 f2                	mov    edx,esi
c00038a8:	89 e8                	mov    eax,ebp
c00038aa:	e8 97 e9 ff ff       	call   c0002246 <clst2sect>
c00038af:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00038b2:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c00038b5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00038b9:	31 c9                	xor    ecx,ecx
c00038bb:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c00038bf:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00038c2:	83 c4 1c             	add    esp,0x1c
c00038c5:	89 c8                	mov    eax,ecx
c00038c7:	5b                   	pop    ebx
c00038c8:	5e                   	pop    esi
c00038c9:	5f                   	pop    edi
c00038ca:	5d                   	pop    ebp
c00038cb:	c3                   	ret    

c00038cc <dir_alloc>:
c00038cc:	55                   	push   ebp
c00038cd:	89 c5                	mov    ebp,eax
c00038cf:	57                   	push   edi
c00038d0:	89 d7                	mov    edi,edx
c00038d2:	56                   	push   esi
c00038d3:	31 d2                	xor    edx,edx
c00038d5:	53                   	push   ebx
c00038d6:	83 ec 0c             	sub    esp,0xc
c00038d9:	8b 30                	mov    esi,DWORD PTR [eax]
c00038db:	e8 57 fc ff ff       	call   c0003537 <dir_sdi>
c00038e0:	85 c0                	test   eax,eax
c00038e2:	75 3b                	jne    c000391f <dir_alloc+0x53>
c00038e4:	31 db                	xor    ebx,ebx
c00038e6:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00038e9:	89 f0                	mov    eax,esi
c00038eb:	e8 65 ec ff ff       	call   c0002555 <move_window>
c00038f0:	85 c0                	test   eax,eax
c00038f2:	75 2b                	jne    c000391f <dir_alloc+0x53>
c00038f4:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c00038f7:	0f b6 12             	movzx  edx,BYTE PTR [edx]
c00038fa:	81 fa e5 00 00 00    	cmp    edx,0xe5
c0003900:	74 04                	je     c0003906 <dir_alloc+0x3a>
c0003902:	85 d2                	test   edx,edx
c0003904:	75 07                	jne    c000390d <dir_alloc+0x41>
c0003906:	43                   	inc    ebx
c0003907:	39 fb                	cmp    ebx,edi
c0003909:	75 04                	jne    c000390f <dir_alloc+0x43>
c000390b:	eb 1c                	jmp    c0003929 <dir_alloc+0x5d>
c000390d:	31 db                	xor    ebx,ebx
c000390f:	ba 01 00 00 00       	mov    edx,0x1
c0003914:	89 e8                	mov    eax,ebp
c0003916:	e8 ac fe ff ff       	call   c00037c7 <dir_next>
c000391b:	85 c0                	test   eax,eax
c000391d:	74 c7                	je     c00038e6 <dir_alloc+0x1a>
c000391f:	83 f8 04             	cmp    eax,0x4
c0003922:	75 05                	jne    c0003929 <dir_alloc+0x5d>
c0003924:	b8 07 00 00 00       	mov    eax,0x7
c0003929:	83 c4 0c             	add    esp,0xc
c000392c:	5b                   	pop    ebx
c000392d:	5e                   	pop    esi
c000392e:	5f                   	pop    edi
c000392f:	5d                   	pop    ebp
c0003930:	c3                   	ret    

c0003931 <dir_read>:
c0003931:	55                   	push   ebp
c0003932:	57                   	push   edi
c0003933:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003938:	56                   	push   esi
c0003939:	be 04 00 00 00       	mov    esi,0x4
c000393e:	53                   	push   ebx
c000393f:	89 c3                	mov    ebx,eax
c0003941:	83 ec 1c             	sub    esp,0x1c
c0003944:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003948:	8b 28                	mov    ebp,DWORD PTR [eax]
c000394a:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c000394f:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003952:	85 d2                	test   edx,edx
c0003954:	0f 84 e3 00 00 00    	je     c0003a3d <dir_read+0x10c>
c000395a:	89 e8                	mov    eax,ebp
c000395c:	e8 f4 eb ff ff       	call   c0002555 <move_window>
c0003961:	85 c0                	test   eax,eax
c0003963:	89 c6                	mov    esi,eax
c0003965:	0f 85 dd 00 00 00    	jne    c0003a48 <dir_read+0x117>
c000396b:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000396e:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0003971:	88 04 24             	mov    BYTE PTR [esp],al
c0003974:	85 c0                	test   eax,eax
c0003976:	0f 84 c7 00 00 00    	je     c0003a43 <dir_read+0x112>
c000397c:	8a 4a 0b             	mov    cl,BYTE PTR [edx+0xb]
c000397f:	83 e1 3f             	and    ecx,0x3f
c0003982:	3d e5 00 00 00       	cmp    eax,0xe5
c0003987:	88 4b 06             	mov    BYTE PTR [ebx+0x6],cl
c000398a:	0f 84 93 00 00 00    	je     c0003a23 <dir_read+0xf2>
c0003990:	83 f8 2e             	cmp    eax,0x2e
c0003993:	0f 84 8a 00 00 00    	je     c0003a23 <dir_read+0xf2>
c0003999:	0f b6 c9             	movzx  ecx,cl
c000399c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00039a0:	83 e1 df             	and    ecx,0xffffffdf
c00039a3:	83 f9 08             	cmp    ecx,0x8
c00039a6:	0f 94 c1             	sete   cl
c00039a9:	0f b6 c9             	movzx  ecx,cl
c00039ac:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00039b0:	75 71                	jne    c0003a23 <dir_read+0xf2>
c00039b2:	83 7c 24 08 0f       	cmp    DWORD PTR [esp+0x8],0xf
c00039b7:	75 4a                	jne    c0003a03 <dir_read+0xd2>
c00039b9:	f6 04 24 40          	test   BYTE PTR [esp],0x40
c00039bd:	74 16                	je     c00039d5 <dir_read+0xa4>
c00039bf:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00039c2:	81 24 24 bf 00 00 00 	and    DWORD PTR [esp],0xbf
c00039c9:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00039cd:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00039d0:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00039d3:	eb 0e                	jmp    c00039e3 <dir_read+0xb2>
c00039d5:	89 f9                	mov    ecx,edi
c00039d7:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039dc:	0f b6 c9             	movzx  ecx,cl
c00039df:	39 c1                	cmp    ecx,eax
c00039e1:	75 45                	jne    c0003a28 <dir_read+0xf7>
c00039e3:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00039e7:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039ec:	3a 42 0d             	cmp    al,BYTE PTR [edx+0xd]
c00039ef:	75 37                	jne    c0003a28 <dir_read+0xf7>
c00039f1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00039f4:	e8 6a e8 ff ff       	call   c0002263 <pick_lfn>
c00039f9:	85 c0                	test   eax,eax
c00039fb:	74 2b                	je     c0003a28 <dir_read+0xf7>
c00039fd:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0003a00:	4f                   	dec    edi
c0003a01:	eb 25                	jmp    c0003a28 <dir_read+0xf7>
c0003a03:	89 f8                	mov    eax,edi
c0003a05:	84 c0                	test   al,al
c0003a07:	75 11                	jne    c0003a1a <dir_read+0xe9>
c0003a09:	89 d0                	mov    eax,edx
c0003a0b:	e8 30 ea ff ff       	call   c0002440 <sum_sfn>
c0003a10:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c0003a14:	75 04                	jne    c0003a1a <dir_read+0xe9>
c0003a16:	31 f6                	xor    esi,esi
c0003a18:	eb 35                	jmp    c0003a4f <dir_read+0x11e>
c0003a1a:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003a21:	eb 2c                	jmp    c0003a4f <dir_read+0x11e>
c0003a23:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003a28:	31 d2                	xor    edx,edx
c0003a2a:	89 d8                	mov    eax,ebx
c0003a2c:	e8 96 fd ff ff       	call   c00037c7 <dir_next>
c0003a31:	85 c0                	test   eax,eax
c0003a33:	89 c6                	mov    esi,eax
c0003a35:	0f 84 14 ff ff ff    	je     c000394f <dir_read+0x1e>
c0003a3b:	eb 0b                	jmp    c0003a48 <dir_read+0x117>
c0003a3d:	85 f6                	test   esi,esi
c0003a3f:	74 d5                	je     c0003a16 <dir_read+0xe5>
c0003a41:	eb 05                	jmp    c0003a48 <dir_read+0x117>
c0003a43:	be 04 00 00 00       	mov    esi,0x4
c0003a48:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003a4f:	83 c4 1c             	add    esp,0x1c
c0003a52:	89 f0                	mov    eax,esi
c0003a54:	5b                   	pop    ebx
c0003a55:	5e                   	pop    esi
c0003a56:	5f                   	pop    edi
c0003a57:	5d                   	pop    ebp
c0003a58:	c3                   	ret    

c0003a59 <dir_remove>:
c0003a59:	57                   	push   edi
c0003a5a:	56                   	push   esi
c0003a5b:	53                   	push   ebx
c0003a5c:	89 c3                	mov    ebx,eax
c0003a5e:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003a61:	8b 30                	mov    esi,DWORD PTR [eax]
c0003a63:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003a66:	83 fa ff             	cmp    edx,0xffffffff
c0003a69:	74 09                	je     c0003a74 <dir_remove+0x1b>
c0003a6b:	e8 c7 fa ff ff       	call   c0003537 <dir_sdi>
c0003a70:	85 c0                	test   eax,eax
c0003a72:	75 34                	jne    c0003aa8 <dir_remove+0x4f>
c0003a74:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a77:	89 f0                	mov    eax,esi
c0003a79:	e8 d7 ea ff ff       	call   c0002555 <move_window>
c0003a7e:	85 c0                	test   eax,eax
c0003a80:	75 1c                	jne    c0003a9e <dir_remove+0x45>
c0003a82:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003a85:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003a88:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003a8c:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c0003a8f:	73 17                	jae    c0003aa8 <dir_remove+0x4f>
c0003a91:	31 d2                	xor    edx,edx
c0003a93:	89 d8                	mov    eax,ebx
c0003a95:	e8 2d fd ff ff       	call   c00037c7 <dir_next>
c0003a9a:	85 c0                	test   eax,eax
c0003a9c:	74 d6                	je     c0003a74 <dir_remove+0x1b>
c0003a9e:	83 f8 04             	cmp    eax,0x4
c0003aa1:	75 05                	jne    c0003aa8 <dir_remove+0x4f>
c0003aa3:	b8 02 00 00 00       	mov    eax,0x2
c0003aa8:	5b                   	pop    ebx
c0003aa9:	5e                   	pop    esi
c0003aaa:	5f                   	pop    edi
c0003aab:	c3                   	ret    

c0003aac <dir_find>:
c0003aac:	55                   	push   ebp
c0003aad:	31 d2                	xor    edx,edx
c0003aaf:	57                   	push   edi
c0003ab0:	56                   	push   esi
c0003ab1:	53                   	push   ebx
c0003ab2:	89 c3                	mov    ebx,eax
c0003ab4:	83 ec 1c             	sub    esp,0x1c
c0003ab7:	8b 00                	mov    eax,DWORD PTR [eax]
c0003ab9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003abd:	89 d8                	mov    eax,ebx
c0003abf:	e8 73 fa ff ff       	call   c0003537 <dir_sdi>
c0003ac4:	85 c0                	test   eax,eax
c0003ac6:	89 c6                	mov    esi,eax
c0003ac8:	0f 85 22 01 00 00    	jne    c0003bf0 <dir_find+0x144>
c0003ace:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003ad5:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003ada:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003adf:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003ae2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003ae6:	e8 6a ea ff ff       	call   c0002555 <move_window>
c0003aeb:	85 c0                	test   eax,eax
c0003aed:	89 c6                	mov    esi,eax
c0003aef:	0f 85 fb 00 00 00    	jne    c0003bf0 <dir_find+0x144>
c0003af5:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c0003af8:	0f b6 17             	movzx  edx,BYTE PTR [edi]
c0003afb:	85 d2                	test   edx,edx
c0003afd:	89 d1                	mov    ecx,edx
c0003aff:	0f 84 e6 00 00 00    	je     c0003beb <dir_find+0x13f>
c0003b05:	8a 47 0b             	mov    al,BYTE PTR [edi+0xb]
c0003b08:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003b0c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003b10:	83 e0 3f             	and    eax,0x3f
c0003b13:	81 fa e5 00 00 00    	cmp    edx,0xe5
c0003b19:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003b1c:	0f 84 a8 00 00 00    	je     c0003bca <dir_find+0x11e>
c0003b22:	f6 44 24 08 08       	test   BYTE PTR [esp+0x8],0x8
c0003b27:	0f b6 c0             	movzx  eax,al
c0003b2a:	74 0b                	je     c0003b37 <dir_find+0x8b>
c0003b2c:	83 f8 0f             	cmp    eax,0xf
c0003b2f:	0f 85 95 00 00 00    	jne    c0003bca <dir_find+0x11e>
c0003b35:	eb 05                	jmp    c0003b3c <dir_find+0x90>
c0003b37:	83 f8 0f             	cmp    eax,0xf
c0003b3a:	75 62                	jne    c0003b9e <dir_find+0xf2>
c0003b3c:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c0003b40:	0f 85 90 00 00 00    	jne    c0003bd6 <dir_find+0x12a>
c0003b46:	f6 c1 40             	test   cl,0x40
c0003b49:	74 15                	je     c0003b60 <dir_find+0xb4>
c0003b4b:	8a 47 0d             	mov    al,BYTE PTR [edi+0xd]
c0003b4e:	81 e1 bf 00 00 00    	and    ecx,0xbf
c0003b54:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003b58:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003b5b:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003b5e:	eb 11                	jmp    c0003b71 <dir_find+0xc5>
c0003b60:	89 e8                	mov    eax,ebp
c0003b62:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003b67:	0f b6 d0             	movzx  edx,al
c0003b6a:	0f b6 c1             	movzx  eax,cl
c0003b6d:	39 c2                	cmp    edx,eax
c0003b6f:	75 65                	jne    c0003bd6 <dir_find+0x12a>
c0003b71:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003b75:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003b7a:	3a 47 0d             	cmp    al,BYTE PTR [edi+0xd]
c0003b7d:	75 57                	jne    c0003bd6 <dir_find+0x12a>
c0003b7f:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003b83:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b87:	89 fa                	mov    edx,edi
c0003b89:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003b8c:	e8 2c f3 ff ff       	call   c0002ebd <cmp_lfn>
c0003b91:	85 c0                	test   eax,eax
c0003b93:	74 41                	je     c0003bd6 <dir_find+0x12a>
c0003b95:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003b99:	8d 69 ff             	lea    ebp,[ecx-0x1]
c0003b9c:	eb 38                	jmp    c0003bd6 <dir_find+0x12a>
c0003b9e:	89 e8                	mov    eax,ebp
c0003ba0:	84 c0                	test   al,al
c0003ba2:	75 0d                	jne    c0003bb1 <dir_find+0x105>
c0003ba4:	89 f8                	mov    eax,edi
c0003ba6:	e8 95 e8 ff ff       	call   c0002440 <sum_sfn>
c0003bab:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c0003baf:	74 3f                	je     c0003bf0 <dir_find+0x144>
c0003bb1:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c0003bb5:	75 13                	jne    c0003bca <dir_find+0x11e>
c0003bb7:	8d 53 20             	lea    edx,[ebx+0x20]
c0003bba:	b9 0b 00 00 00       	mov    ecx,0xb
c0003bbf:	89 f8                	mov    eax,edi
c0003bc1:	e8 75 e4 ff ff       	call   c000203b <mem_cmp>
c0003bc6:	85 c0                	test   eax,eax
c0003bc8:	74 26                	je     c0003bf0 <dir_find+0x144>
c0003bca:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003bd1:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003bd6:	31 d2                	xor    edx,edx
c0003bd8:	89 d8                	mov    eax,ebx
c0003bda:	e8 e8 fb ff ff       	call   c00037c7 <dir_next>
c0003bdf:	85 c0                	test   eax,eax
c0003be1:	89 c6                	mov    esi,eax
c0003be3:	0f 84 f6 fe ff ff    	je     c0003adf <dir_find+0x33>
c0003be9:	eb 05                	jmp    c0003bf0 <dir_find+0x144>
c0003beb:	be 04 00 00 00       	mov    esi,0x4
c0003bf0:	83 c4 1c             	add    esp,0x1c
c0003bf3:	89 f0                	mov    eax,esi
c0003bf5:	5b                   	pop    ebx
c0003bf6:	5e                   	pop    esi
c0003bf7:	5f                   	pop    edi
c0003bf8:	5d                   	pop    ebp
c0003bf9:	c3                   	ret    

c0003bfa <follow_path>:
c0003bfa:	56                   	push   esi
c0003bfb:	53                   	push   ebx
c0003bfc:	89 c3                	mov    ebx,eax
c0003bfe:	83 ec 14             	sub    esp,0x14
c0003c01:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003c05:	8b 30                	mov    esi,DWORD PTR [eax]
c0003c07:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003c0b:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0003c0e:	83 fa 2f             	cmp    edx,0x2f
c0003c11:	75 07                	jne    c0003c1a <follow_path+0x20>
c0003c13:	40                   	inc    eax
c0003c14:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003c18:	eb ed                	jmp    c0003c07 <follow_path+0xd>
c0003c1a:	83 fa 5c             	cmp    edx,0x5c
c0003c1d:	74 f4                	je     c0003c13 <follow_path+0x19>
c0003c1f:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0003c26:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0003c29:	77 3e                	ja     c0003c69 <follow_path+0x6f>
c0003c2b:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c0003c2f:	31 d2                	xor    edx,edx
c0003c31:	89 d8                	mov    eax,ebx
c0003c33:	e8 ff f8 ff ff       	call   c0003537 <dir_sdi>
c0003c38:	eb 57                	jmp    c0003c91 <follow_path+0x97>
c0003c3a:	89 d8                	mov    eax,ebx
c0003c3c:	e8 6b fe ff ff       	call   c0003aac <dir_find>
c0003c41:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c0003c44:	85 c0                	test   eax,eax
c0003c46:	75 32                	jne    c0003c7a <follow_path+0x80>
c0003c48:	80 e2 04             	and    dl,0x4
c0003c4b:	75 44                	jne    c0003c91 <follow_path+0x97>
c0003c4d:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003c51:	74 39                	je     c0003c8c <follow_path+0x92>
c0003c53:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003c56:	25 ff 01 00 00       	and    eax,0x1ff
c0003c5b:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003c5f:	8a 06                	mov    al,BYTE PTR [esi]
c0003c61:	e8 7b f7 ff ff       	call   c00033e1 <ld_clust.isra.0>
c0003c66:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003c69:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003c6d:	89 d8                	mov    eax,ebx
c0003c6f:	e8 8e ef ff ff       	call   c0002c02 <create_name>
c0003c74:	85 c0                	test   eax,eax
c0003c76:	74 c2                	je     c0003c3a <follow_path+0x40>
c0003c78:	eb 17                	jmp    c0003c91 <follow_path+0x97>
c0003c7a:	83 f8 04             	cmp    eax,0x4
c0003c7d:	75 12                	jne    c0003c91 <follow_path+0x97>
c0003c7f:	80 e2 04             	and    dl,0x4
c0003c82:	ba 05 00 00 00       	mov    edx,0x5
c0003c87:	0f 44 c2             	cmove  eax,edx
c0003c8a:	eb 05                	jmp    c0003c91 <follow_path+0x97>
c0003c8c:	b8 05 00 00 00       	mov    eax,0x5
c0003c91:	83 c4 14             	add    esp,0x14
c0003c94:	5b                   	pop    ebx
c0003c95:	5e                   	pop    esi
c0003c96:	c3                   	ret    

c0003c97 <dir_register>:
c0003c97:	55                   	push   ebp
c0003c98:	57                   	push   edi
c0003c99:	56                   	push   esi
c0003c9a:	be 06 00 00 00       	mov    esi,0x6
c0003c9f:	53                   	push   ebx
c0003ca0:	83 ec 2c             	sub    esp,0x2c
c0003ca3:	8a 50 2b             	mov    dl,BYTE PTR [eax+0x2b]
c0003ca6:	80 e2 a0             	and    dl,0xa0
c0003ca9:	0f 85 66 01 00 00    	jne    c0003e15 <dir_register+0x17e>
c0003caf:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003cb7:	8b 38                	mov    edi,DWORD PTR [eax]
c0003cb9:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003cbc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003cc0:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003cc5:	74 06                	je     c0003ccd <dir_register+0x36>
c0003cc7:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003ccb:	eb ef                	jmp    c0003cbc <dir_register+0x25>
c0003ccd:	89 c3                	mov    ebx,eax
c0003ccf:	b9 0c 00 00 00       	mov    ecx,0xc
c0003cd4:	8d 40 20             	lea    eax,[eax+0x20]
c0003cd7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003cdb:	89 c2                	mov    edx,eax
c0003cdd:	8d 44 24 14          	lea    eax,[esp+0x14]
c0003ce1:	e8 36 e3 ff ff       	call   c000201c <mem_cpy>
c0003ce6:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003ceb:	74 48                	je     c0003d35 <dir_register+0x9e>
c0003ced:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c0003cf1:	bd 01 00 00 00       	mov    ebp,0x1
c0003cf6:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003cf9:	55                   	push   ebp
c0003cfa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003cfe:	8d 54 24 18          	lea    edx,[esp+0x18]
c0003d02:	e8 77 e6 ff ff       	call   c000237e <gen_numname>
c0003d07:	58                   	pop    eax
c0003d08:	89 d8                	mov    eax,ebx
c0003d0a:	e8 9d fd ff ff       	call   c0003aac <dir_find>
c0003d0f:	85 c0                	test   eax,eax
c0003d11:	89 c6                	mov    esi,eax
c0003d13:	75 10                	jne    c0003d25 <dir_register+0x8e>
c0003d15:	45                   	inc    ebp
c0003d16:	83 fd 64             	cmp    ebp,0x64
c0003d19:	75 db                	jne    c0003cf6 <dir_register+0x5f>
c0003d1b:	be 07 00 00 00       	mov    esi,0x7
c0003d20:	e9 f0 00 00 00       	jmp    c0003e15 <dir_register+0x17e>
c0003d25:	83 f8 04             	cmp    eax,0x4
c0003d28:	0f 85 e7 00 00 00    	jne    c0003e15 <dir_register+0x17e>
c0003d2e:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0003d32:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c0003d35:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0003d3a:	bd 01 00 00 00       	mov    ebp,0x1
c0003d3f:	74 13                	je     c0003d54 <dir_register+0xbd>
c0003d41:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003d45:	b9 0d 00 00 00       	mov    ecx,0xd
c0003d4a:	31 d2                	xor    edx,edx
c0003d4c:	83 c0 0c             	add    eax,0xc
c0003d4f:	f7 f1                	div    ecx
c0003d51:	8d 68 01             	lea    ebp,[eax+0x1]
c0003d54:	89 ea                	mov    edx,ebp
c0003d56:	89 d8                	mov    eax,ebx
c0003d58:	e8 6f fb ff ff       	call   c00038cc <dir_alloc>
c0003d5d:	85 c0                	test   eax,eax
c0003d5f:	89 c6                	mov    esi,eax
c0003d61:	0f 85 ae 00 00 00    	jne    c0003e15 <dir_register+0x17e>
c0003d67:	4d                   	dec    ebp
c0003d68:	74 6b                	je     c0003dd5 <dir_register+0x13e>
c0003d6a:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003d6d:	89 e8                	mov    eax,ebp
c0003d6f:	c1 e0 05             	shl    eax,0x5
c0003d72:	29 c2                	sub    edx,eax
c0003d74:	89 d8                	mov    eax,ebx
c0003d76:	e8 bc f7 ff ff       	call   c0003537 <dir_sdi>
c0003d7b:	85 c0                	test   eax,eax
c0003d7d:	89 c6                	mov    esi,eax
c0003d7f:	0f 85 90 00 00 00    	jne    c0003e15 <dir_register+0x17e>
c0003d85:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003d89:	e8 b2 e6 ff ff       	call   c0002440 <sum_sfn>
c0003d8e:	0f b6 c0             	movzx  eax,al
c0003d91:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003d95:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003d98:	89 f8                	mov    eax,edi
c0003d9a:	e8 b6 e7 ff ff       	call   c0002555 <move_window>
c0003d9f:	85 c0                	test   eax,eax
c0003da1:	89 c6                	mov    esi,eax
c0003da3:	75 70                	jne    c0003e15 <dir_register+0x17e>
c0003da5:	83 ec 0c             	sub    esp,0xc
c0003da8:	89 e8                	mov    eax,ebp
c0003daa:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003dad:	0f b6 c8             	movzx  ecx,al
c0003db0:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003db3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0003db7:	e8 27 e5 ff ff       	call   c00022e3 <put_lfn>
c0003dbc:	31 d2                	xor    edx,edx
c0003dbe:	89 d8                	mov    eax,ebx
c0003dc0:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003dc4:	e8 fe f9 ff ff       	call   c00037c7 <dir_next>
c0003dc9:	83 c4 10             	add    esp,0x10
c0003dcc:	85 c0                	test   eax,eax
c0003dce:	89 c6                	mov    esi,eax
c0003dd0:	75 43                	jne    c0003e15 <dir_register+0x17e>
c0003dd2:	4d                   	dec    ebp
c0003dd3:	75 c0                	jne    c0003d95 <dir_register+0xfe>
c0003dd5:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003dd8:	89 f8                	mov    eax,edi
c0003dda:	e8 76 e7 ff ff       	call   c0002555 <move_window>
c0003ddf:	85 c0                	test   eax,eax
c0003de1:	89 c6                	mov    esi,eax
c0003de3:	75 30                	jne    c0003e15 <dir_register+0x17e>
c0003de5:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003de8:	b9 20 00 00 00       	mov    ecx,0x20
c0003ded:	31 d2                	xor    edx,edx
c0003def:	e8 3d e2 ff ff       	call   c0002031 <mem_set>
c0003df4:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003df7:	b9 0b 00 00 00       	mov    ecx,0xb
c0003dfc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003e00:	e8 17 e2 ff ff       	call   c000201c <mem_cpy>
c0003e05:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003e08:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003e0b:	83 e0 18             	and    eax,0x18
c0003e0e:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003e11:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003e15:	83 c4 2c             	add    esp,0x2c
c0003e18:	89 f0                	mov    eax,esi
c0003e1a:	5b                   	pop    ebx
c0003e1b:	5e                   	pop    esi
c0003e1c:	5f                   	pop    edi
c0003e1d:	5d                   	pop    ebp
c0003e1e:	c3                   	ret    

c0003e1f <f_mount>:
c0003e1f:	53                   	push   ebx
c0003e20:	83 ec 18             	sub    esp,0x18
c0003e23:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003e27:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003e2b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003e2f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003e33:	e8 28 e6 ff ff       	call   c0002460 <get_ldnumber>
c0003e38:	89 c2                	mov    edx,eax
c0003e3a:	b8 0b 00 00 00       	mov    eax,0xb
c0003e3f:	85 d2                	test   edx,edx
c0003e41:	78 39                	js     c0003e7c <f_mount+0x5d>
c0003e43:	8b 04 95 a0 94 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6b60]
c0003e4a:	85 c0                	test   eax,eax
c0003e4c:	74 03                	je     c0003e51 <f_mount+0x32>
c0003e4e:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003e51:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003e55:	85 c0                	test   eax,eax
c0003e57:	74 03                	je     c0003e5c <f_mount+0x3d>
c0003e59:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003e5c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003e60:	89 04 95 a0 94 02 c0 	mov    DWORD PTR [edx*4-0x3ffd6b60],eax
c0003e67:	31 c0                	xor    eax,eax
c0003e69:	84 db                	test   bl,bl
c0003e6b:	74 0f                	je     c0003e7c <f_mount+0x5d>
c0003e6d:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003e71:	31 c9                	xor    ecx,ecx
c0003e73:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003e77:	e8 36 e8 ff ff       	call   c00026b2 <mount_volume>
c0003e7c:	83 c4 18             	add    esp,0x18
c0003e7f:	5b                   	pop    ebx
c0003e80:	c3                   	ret    

c0003e81 <f_open>:
c0003e81:	55                   	push   ebp
c0003e82:	b8 09 00 00 00       	mov    eax,0x9
c0003e87:	57                   	push   edi
c0003e88:	56                   	push   esi
c0003e89:	53                   	push   ebx
c0003e8a:	83 ec 5c             	sub    esp,0x5c
c0003e8d:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003e91:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003e95:	85 db                	test   ebx,ebx
c0003e97:	0f 84 9f 02 00 00    	je     c000413c <f_open+0x2bb>
c0003e9d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003ea1:	89 fd                	mov    ebp,edi
c0003ea3:	83 e5 3f             	and    ebp,0x3f
c0003ea6:	89 e8                	mov    eax,ebp
c0003ea8:	89 ee                	mov    esi,ebp
c0003eaa:	0f b6 c8             	movzx  ecx,al
c0003ead:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003eb1:	e8 fc e7 ff ff       	call   c00026b2 <mount_volume>
c0003eb6:	85 c0                	test   eax,eax
c0003eb8:	0f 85 78 02 00 00    	jne    c0004136 <f_open+0x2b5>
c0003ebe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003ec2:	83 ec 0c             	sub    esp,0xc
c0003ec5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003ec9:	68 00 02 00 00       	push   0x200
c0003ece:	e8 61 1f 00 00       	call   c0005e34 <ff_memalloc>
c0003ed3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0003ed7:	83 c4 10             	add    esp,0x10
c0003eda:	b8 11 00 00 00       	mov    eax,0x11
c0003edf:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003ee4:	0f 84 52 02 00 00    	je     c000413c <f_open+0x2bb>
c0003eea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003eee:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003ef2:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003ef6:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0003ef9:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003efd:	e8 f8 fc ff ff       	call   c0003bfa <follow_path>
c0003f02:	85 c0                	test   eax,eax
c0003f04:	75 0d                	jne    c0003f13 <f_open+0x92>
c0003f06:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0003f0b:	ba 06 00 00 00       	mov    edx,0x6
c0003f10:	0f 45 c2             	cmovne eax,edx
c0003f13:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003f19:	0f 84 d5 00 00 00    	je     c0003ff4 <f_open+0x173>
c0003f1f:	85 c0                	test   eax,eax
c0003f21:	74 21                	je     c0003f44 <f_open+0xc3>
c0003f23:	83 f8 04             	cmp    eax,0x4
c0003f26:	0f 85 ef 01 00 00    	jne    c000411b <f_open+0x29a>
c0003f2c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003f30:	e8 62 fd ff ff       	call   c0003c97 <dir_register>
c0003f35:	85 c0                	test   eax,eax
c0003f37:	0f 85 de 01 00 00    	jne    c000411b <f_open+0x29a>
c0003f3d:	83 cd 08             	or     ebp,0x8
c0003f40:	89 ee                	mov    esi,ebp
c0003f42:	eb 2c                	jmp    c0003f70 <f_open+0xef>
c0003f44:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003f48:	b8 07 00 00 00       	mov    eax,0x7
c0003f4d:	80 e2 11             	and    dl,0x11
c0003f50:	0f 85 c5 01 00 00    	jne    c000411b <f_open+0x29a>
c0003f56:	f7 c7 04 00 00 00    	test   edi,0x4
c0003f5c:	b8 08 00 00 00       	mov    eax,0x8
c0003f61:	0f 85 b4 01 00 00    	jne    c000411b <f_open+0x29a>
c0003f67:	83 e7 08             	and    edi,0x8
c0003f6a:	0f 84 b1 00 00 00    	je     c0004021 <f_open+0x1a0>
c0003f70:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f74:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0003f78:	8a 00                	mov    al,BYTE PTR [eax]
c0003f7a:	89 ea                	mov    edx,ebp
c0003f7c:	e8 60 f4 ff ff       	call   c00033e1 <ld_clust.isra.0>
c0003f81:	ba 00 00 21 50       	mov    edx,0x50210000
c0003f86:	89 c7                	mov    edi,eax
c0003f88:	8d 45 0e             	lea    eax,[ebp+0xe]
c0003f8b:	e8 89 e0 ff ff       	call   c0002019 <st_dword>
c0003f90:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003f94:	31 c9                	xor    ecx,ecx
c0003f96:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003f9a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f9e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003fa2:	e8 63 f4 ff ff       	call   c000340a <st_clust.isra.1>
c0003fa7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003fab:	31 d2                	xor    edx,edx
c0003fad:	83 c0 1c             	add    eax,0x1c
c0003fb0:	e8 64 e0 ff ff       	call   c0002019 <st_dword>
c0003fb5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003fb9:	85 ff                	test   edi,edi
c0003fbb:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003fbf:	74 60                	je     c0004021 <f_open+0x1a0>
c0003fc1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003fc5:	31 c9                	xor    ecx,ecx
c0003fc7:	89 fa                	mov    edx,edi
c0003fc9:	8b 68 30             	mov    ebp,DWORD PTR [eax+0x30]
c0003fcc:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003fd0:	e8 64 f7 ff ff       	call   c0003739 <remove_chain>
c0003fd5:	85 c0                	test   eax,eax
c0003fd7:	0f 85 3e 01 00 00    	jne    c000411b <f_open+0x29a>
c0003fdd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003fe1:	89 ea                	mov    edx,ebp
c0003fe3:	4f                   	dec    edi
c0003fe4:	e8 6c e5 ff ff       	call   c0002555 <move_window>
c0003fe9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003fed:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003ff0:	85 c0                	test   eax,eax
c0003ff2:	eb 27                	jmp    c000401b <f_open+0x19a>
c0003ff4:	85 c0                	test   eax,eax
c0003ff6:	0f 85 1f 01 00 00    	jne    c000411b <f_open+0x29a>
c0003ffc:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0004000:	b8 04 00 00 00       	mov    eax,0x4
c0004005:	f6 c2 10             	test   dl,0x10
c0004008:	0f 85 0d 01 00 00    	jne    c000411b <f_open+0x29a>
c000400e:	83 e7 02             	and    edi,0x2
c0004011:	74 0e                	je     c0004021 <f_open+0x1a0>
c0004013:	b8 07 00 00 00       	mov    eax,0x7
c0004018:	80 e2 01             	and    dl,0x1
c000401b:	0f 85 fa 00 00 00    	jne    c000411b <f_open+0x29a>
c0004021:	f7 c6 08 00 00 00    	test   esi,0x8
c0004027:	74 03                	je     c000402c <f_open+0x1ab>
c0004029:	83 ce 40             	or     esi,0x40
c000402c:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0004030:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0004034:	8b 45 30             	mov    eax,DWORD PTR [ebp+0x30]
c0004037:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c000403a:	89 fa                	mov    edx,edi
c000403c:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000403f:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0004042:	e8 9a f3 ff ff       	call   c00033e1 <ld_clust.isra.0>
c0004047:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000404a:	8d 47 1c             	lea    eax,[edi+0x1c]
c000404d:	e8 ab df ff ff       	call   c0001ffd <ld_dword>
c0004052:	8d 7b 28             	lea    edi,[ebx+0x28]
c0004055:	31 d2                	xor    edx,edx
c0004057:	89 2b                	mov    DWORD PTR [ebx],ebp
c0004059:	b9 00 02 00 00       	mov    ecx,0x200
c000405e:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004061:	66 8b 45 06          	mov    ax,WORD PTR [ebp+0x6]
c0004065:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0004069:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0004070:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0004077:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000407b:	89 f0                	mov    eax,esi
c000407d:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004080:	89 f8                	mov    eax,edi
c0004082:	e8 aa df ff ff       	call   c0002031 <mem_set>
c0004087:	83 e6 20             	and    esi,0x20
c000408a:	75 07                	jne    c0004093 <f_open+0x212>
c000408c:	31 c0                	xor    eax,eax
c000408e:	e9 88 00 00 00       	jmp    c000411b <f_open+0x29a>
c0004093:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0004096:	85 f6                	test   esi,esi
c0004098:	74 f2                	je     c000408c <f_open+0x20b>
c000409a:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000409d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00040a1:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00040a4:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00040a8:	31 c0                	xor    eax,eax
c00040aa:	c1 e5 09             	shl    ebp,0x9
c00040ad:	85 c0                	test   eax,eax
c00040af:	75 23                	jne    c00040d4 <f_open+0x253>
c00040b1:	39 ee                	cmp    esi,ebp
c00040b3:	76 1f                	jbe    c00040d4 <f_open+0x253>
c00040b5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00040b7:	e8 76 f3 ff ff       	call   c0003432 <get_fat.isra.2>
c00040bc:	89 c2                	mov    edx,eax
c00040be:	b8 02 00 00 00       	mov    eax,0x2
c00040c3:	83 fa 01             	cmp    edx,0x1
c00040c6:	76 08                	jbe    c00040d0 <f_open+0x24f>
c00040c8:	31 c0                	xor    eax,eax
c00040ca:	83 fa ff             	cmp    edx,0xffffffff
c00040cd:	0f 94 c0             	sete   al
c00040d0:	29 ee                	sub    esi,ebp
c00040d2:	eb d9                	jmp    c00040ad <f_open+0x22c>
c00040d4:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00040d7:	85 c0                	test   eax,eax
c00040d9:	75 40                	jne    c000411b <f_open+0x29a>
c00040db:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c00040e1:	74 a9                	je     c000408c <f_open+0x20b>
c00040e3:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c00040e7:	89 e8                	mov    eax,ebp
c00040e9:	e8 58 e1 ff ff       	call   c0002246 <clst2sect>
c00040ee:	89 c2                	mov    edx,eax
c00040f0:	b8 02 00 00 00       	mov    eax,0x2
c00040f5:	85 d2                	test   edx,edx
c00040f7:	74 22                	je     c000411b <f_open+0x29a>
c00040f9:	c1 ee 09             	shr    esi,0x9
c00040fc:	8d 04 16             	lea    eax,[esi+edx*1]
c00040ff:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004102:	6a 01                	push   0x1
c0004104:	50                   	push   eax
c0004105:	57                   	push   edi
c0004106:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c000410a:	50                   	push   eax
c000410b:	e8 95 de ff ff       	call   c0001fa5 <disk_read>
c0004110:	83 c4 10             	add    esp,0x10
c0004113:	85 c0                	test   eax,eax
c0004115:	0f 95 c0             	setne  al
c0004118:	0f b6 c0             	movzx  eax,al
c000411b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000411f:	83 ec 0c             	sub    esp,0xc
c0004122:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0004126:	e8 21 1d 00 00       	call   c0005e4c <ff_memfree>
c000412b:	83 c4 10             	add    esp,0x10
c000412e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004132:	85 c0                	test   eax,eax
c0004134:	74 06                	je     c000413c <f_open+0x2bb>
c0004136:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000413c:	83 c4 5c             	add    esp,0x5c
c000413f:	5b                   	pop    ebx
c0004140:	5e                   	pop    esi
c0004141:	5f                   	pop    edi
c0004142:	5d                   	pop    ebp
c0004143:	c3                   	ret    

c0004144 <f_read>:
c0004144:	55                   	push   ebp
c0004145:	57                   	push   edi
c0004146:	56                   	push   esi
c0004147:	53                   	push   ebx
c0004148:	83 ec 2c             	sub    esp,0x2c
c000414b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000414f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004153:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004157:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c000415b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0004161:	89 d8                	mov    eax,ebx
c0004163:	e8 44 e3 ff ff       	call   c00024ac <validate>
c0004168:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000416c:	85 c0                	test   eax,eax
c000416e:	0f 85 a5 01 00 00    	jne    c0004319 <f_read+0x1d5>
c0004174:	0f b6 43 11          	movzx  eax,BYTE PTR [ebx+0x11]
c0004178:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000417c:	85 c0                	test   eax,eax
c000417e:	0f 85 95 01 00 00    	jne    c0004319 <f_read+0x1d5>
c0004184:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0004188:	0f 84 83 01 00 00    	je     c0004311 <f_read+0x1cd>
c000418e:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004191:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0004194:	39 f8                	cmp    eax,edi
c0004196:	0f 46 f8             	cmovbe edi,eax
c0004199:	85 ff                	test   edi,edi
c000419b:	0f 84 78 01 00 00    	je     c0004319 <f_read+0x1d5>
c00041a1:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041a4:	a9 ff 01 00 00       	test   eax,0x1ff
c00041a9:	0f 85 2b 01 00 00    	jne    c00042da <f_read+0x196>
c00041af:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00041b3:	0f b7 6a 0a          	movzx  ebp,WORD PTR [edx+0xa]
c00041b7:	89 c2                	mov    edx,eax
c00041b9:	c1 ea 09             	shr    edx,0x9
c00041bc:	4d                   	dec    ebp
c00041bd:	21 d5                	and    ebp,edx
c00041bf:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00041c3:	75 42                	jne    c0004207 <f_read+0xc3>
c00041c5:	85 c0                	test   eax,eax
c00041c7:	75 05                	jne    c00041ce <f_read+0x8a>
c00041c9:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00041cc:	eb 0a                	jmp    c00041d8 <f_read+0x94>
c00041ce:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00041d1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00041d3:	e8 5a f2 ff ff       	call   c0003432 <get_fat.isra.2>
c00041d8:	83 f8 01             	cmp    eax,0x1
c00041db:	77 11                	ja     c00041ee <f_read+0xaa>
c00041dd:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00041e1:	c7 44 24 04 02 00 00 00 	mov    DWORD PTR [esp+0x4],0x2
c00041e9:	e9 2b 01 00 00       	jmp    c0004319 <f_read+0x1d5>
c00041ee:	83 f8 ff             	cmp    eax,0xffffffff
c00041f1:	75 11                	jne    c0004204 <f_read+0xc0>
c00041f3:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00041f7:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c00041ff:	e9 15 01 00 00       	jmp    c0004319 <f_read+0x1d5>
c0004204:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004207:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000420b:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000420e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004212:	89 c8                	mov    eax,ecx
c0004214:	e8 2d e0 ff ff       	call   c0002246 <clst2sect>
c0004219:	85 c0                	test   eax,eax
c000421b:	74 c0                	je     c00041dd <f_read+0x99>
c000421d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0004221:	81 ff ff 01 00 00    	cmp    edi,0x1ff
c0004227:	8d 2c 01             	lea    ebp,[ecx+eax*1]
c000422a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000422e:	76 58                	jbe    c0004288 <f_read+0x144>
c0004230:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004234:	89 fe                	mov    esi,edi
c0004236:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c000423a:	c1 ee 09             	shr    esi,0x9
c000423d:	01 f2                	add    edx,esi
c000423f:	39 c2                	cmp    edx,eax
c0004241:	76 06                	jbe    c0004249 <f_read+0x105>
c0004243:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0004247:	89 c6                	mov    esi,eax
c0004249:	56                   	push   esi
c000424a:	55                   	push   ebp
c000424b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000424f:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004253:	50                   	push   eax
c0004254:	e8 4c dd ff ff       	call   c0001fa5 <disk_read>
c0004259:	83 c4 10             	add    esp,0x10
c000425c:	85 c0                	test   eax,eax
c000425e:	75 93                	jne    c00041f3 <f_read+0xaf>
c0004260:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c0004264:	74 1d                	je     c0004283 <f_read+0x13f>
c0004266:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004269:	29 e8                	sub    eax,ebp
c000426b:	39 f0                	cmp    eax,esi
c000426d:	73 14                	jae    c0004283 <f_read+0x13f>
c000426f:	c1 e0 09             	shl    eax,0x9
c0004272:	b9 00 02 00 00       	mov    ecx,0x200
c0004277:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000427b:	8d 53 28             	lea    edx,[ebx+0x28]
c000427e:	e8 99 dd ff ff       	call   c000201c <mem_cpy>
c0004283:	c1 e6 09             	shl    esi,0x9
c0004286:	eb 75                	jmp    c00042fd <f_read+0x1b9>
c0004288:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000428b:	39 e8                	cmp    eax,ebp
c000428d:	74 48                	je     c00042d7 <f_read+0x193>
c000428f:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c0004293:	8d 73 28             	lea    esi,[ebx+0x28]
c0004296:	74 22                	je     c00042ba <f_read+0x176>
c0004298:	6a 01                	push   0x1
c000429a:	50                   	push   eax
c000429b:	56                   	push   esi
c000429c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00042a0:	50                   	push   eax
c00042a1:	e8 15 dd ff ff       	call   c0001fbb <disk_write>
c00042a6:	83 c4 10             	add    esp,0x10
c00042a9:	85 c0                	test   eax,eax
c00042ab:	0f 85 42 ff ff ff    	jne    c00041f3 <f_read+0xaf>
c00042b1:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00042b4:	83 e0 7f             	and    eax,0x7f
c00042b7:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00042ba:	6a 01                	push   0x1
c00042bc:	55                   	push   ebp
c00042bd:	56                   	push   esi
c00042be:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00042c2:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00042c6:	50                   	push   eax
c00042c7:	e8 d9 dc ff ff       	call   c0001fa5 <disk_read>
c00042cc:	83 c4 10             	add    esp,0x10
c00042cf:	85 c0                	test   eax,eax
c00042d1:	0f 85 1c ff ff ff    	jne    c00041f3 <f_read+0xaf>
c00042d7:	89 6b 1c             	mov    DWORD PTR [ebx+0x1c],ebp
c00042da:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00042dd:	be 00 02 00 00       	mov    esi,0x200
c00042e2:	25 ff 01 00 00       	and    eax,0x1ff
c00042e7:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c00042eb:	29 c6                	sub    esi,eax
c00042ed:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00042f1:	39 f7                	cmp    edi,esi
c00042f3:	0f 46 f7             	cmovbe esi,edi
c00042f6:	89 f1                	mov    ecx,esi
c00042f8:	e8 1f dd ff ff       	call   c000201c <mem_cpy>
c00042fd:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004301:	29 f7                	sub    edi,esi
c0004303:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004307:	01 30                	add    DWORD PTR [eax],esi
c0004309:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c000430c:	e9 88 fe ff ff       	jmp    c0004199 <f_read+0x55>
c0004311:	c7 44 24 04 07 00 00 00 	mov    DWORD PTR [esp+0x4],0x7
c0004319:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000431d:	83 c4 2c             	add    esp,0x2c
c0004320:	5b                   	pop    ebx
c0004321:	5e                   	pop    esi
c0004322:	5f                   	pop    edi
c0004323:	5d                   	pop    ebp
c0004324:	c3                   	ret    

c0004325 <f_write>:
c0004325:	55                   	push   ebp
c0004326:	57                   	push   edi
c0004327:	56                   	push   esi
c0004328:	53                   	push   ebx
c0004329:	83 ec 2c             	sub    esp,0x2c
c000432c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004330:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004334:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004338:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000433e:	89 d8                	mov    eax,ebx
c0004340:	e8 67 e1 ff ff       	call   c00024ac <validate>
c0004345:	85 c0                	test   eax,eax
c0004347:	89 c7                	mov    edi,eax
c0004349:	0f 85 13 02 00 00    	jne    c0004562 <f_write+0x23d>
c000434f:	0f b6 7b 11          	movzx  edi,BYTE PTR [ebx+0x11]
c0004353:	85 ff                	test   edi,edi
c0004355:	0f 85 07 02 00 00    	jne    c0004562 <f_write+0x23d>
c000435b:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000435f:	0f 84 f8 01 00 00    	je     c000455d <f_write+0x238>
c0004365:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004368:	89 c1                	mov    ecx,eax
c000436a:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c000436e:	0f 83 ed 00 00 00    	jae    c0004461 <f_write+0x13c>
c0004374:	f7 d0                	not    eax
c0004376:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000437a:	e9 e2 00 00 00       	jmp    c0004461 <f_write+0x13c>
c000437f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004382:	a9 ff 01 00 00       	test   eax,0x1ff
c0004387:	0f 85 9b 01 00 00    	jne    c0004528 <f_write+0x203>
c000438d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004391:	0f b7 6a 0a          	movzx  ebp,WORD PTR [edx+0xa]
c0004395:	89 c2                	mov    edx,eax
c0004397:	c1 ea 09             	shr    edx,0x9
c000439a:	4d                   	dec    ebp
c000439b:	21 d5                	and    ebp,edx
c000439d:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00043a1:	0f 84 c7 00 00 00    	je     c000446e <f_write+0x149>
c00043a7:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00043ab:	0f 85 23 01 00 00    	jne    c00044d4 <f_write+0x1af>
c00043b1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00043b5:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00043b8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00043bc:	89 c8                	mov    eax,ecx
c00043be:	e8 83 de ff ff       	call   c0002246 <clst2sect>
c00043c3:	85 c0                	test   eax,eax
c00043c5:	0f 84 d3 00 00 00    	je     c000449e <f_write+0x179>
c00043cb:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00043cf:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00043d7:	8d 2c 01             	lea    ebp,[ecx+eax*1]
c00043da:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00043de:	0f 86 1c 01 00 00    	jbe    c0004500 <f_write+0x1db>
c00043e4:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00043e8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00043ec:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00043f0:	c1 ee 09             	shr    esi,0x9
c00043f3:	01 f2                	add    edx,esi
c00043f5:	39 c2                	cmp    edx,eax
c00043f7:	76 06                	jbe    c00043ff <f_write+0xda>
c00043f9:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00043fd:	89 c6                	mov    esi,eax
c00043ff:	56                   	push   esi
c0004400:	55                   	push   ebp
c0004401:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0004405:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004409:	50                   	push   eax
c000440a:	e8 ac db ff ff       	call   c0001fbb <disk_write>
c000440f:	83 c4 10             	add    esp,0x10
c0004412:	85 c0                	test   eax,eax
c0004414:	0f 85 97 00 00 00    	jne    c00044b1 <f_write+0x18c>
c000441a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000441d:	29 ea                	sub    edx,ebp
c000441f:	39 f2                	cmp    edx,esi
c0004421:	73 1d                	jae    c0004440 <f_write+0x11b>
c0004423:	c1 e2 09             	shl    edx,0x9
c0004426:	b9 00 02 00 00       	mov    ecx,0x200
c000442b:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c000442f:	8d 43 28             	lea    eax,[ebx+0x28]
c0004432:	e8 e5 db ff ff       	call   c000201c <mem_cpy>
c0004437:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000443a:	83 e0 7f             	and    eax,0x7f
c000443d:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004440:	c1 e6 09             	shl    esi,0x9
c0004443:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004447:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000444b:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000444f:	01 30                	add    DWORD PTR [eax],esi
c0004451:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0004454:	39 73 0c             	cmp    DWORD PTR [ebx+0xc],esi
c0004457:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000445a:	0f 43 73 0c          	cmovae esi,DWORD PTR [ebx+0xc]
c000445e:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0004461:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0004466:	0f 85 13 ff ff ff    	jne    c000437f <f_write+0x5a>
c000446c:	eb 1d                	jmp    c000448b <f_write+0x166>
c000446e:	85 c0                	test   eax,eax
c0004470:	75 0b                	jne    c000447d <f_write+0x158>
c0004472:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004475:	31 d2                	xor    edx,edx
c0004477:	85 c0                	test   eax,eax
c0004479:	75 1e                	jne    c0004499 <f_write+0x174>
c000447b:	eb 03                	jmp    c0004480 <f_write+0x15b>
c000447d:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004480:	89 d8                	mov    eax,ebx
c0004482:	e8 78 f1 ff ff       	call   c00035ff <create_chain>
c0004487:	85 c0                	test   eax,eax
c0004489:	75 0e                	jne    c0004499 <f_write+0x174>
c000448b:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000448e:	83 c8 40             	or     eax,0x40
c0004491:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004494:	e9 c9 00 00 00       	jmp    c0004562 <f_write+0x23d>
c0004499:	83 f8 01             	cmp    eax,0x1
c000449c:	75 0e                	jne    c00044ac <f_write+0x187>
c000449e:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00044a2:	bf 02 00 00 00       	mov    edi,0x2
c00044a7:	e9 b6 00 00 00       	jmp    c0004562 <f_write+0x23d>
c00044ac:	83 f8 ff             	cmp    eax,0xffffffff
c00044af:	75 0e                	jne    c00044bf <f_write+0x19a>
c00044b1:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00044b5:	bf 01 00 00 00       	mov    edi,0x1
c00044ba:	e9 a3 00 00 00       	jmp    c0004562 <f_write+0x23d>
c00044bf:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00044c3:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00044c6:	0f 85 db fe ff ff    	jne    c00043a7 <f_write+0x82>
c00044cc:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00044cf:	e9 d3 fe ff ff       	jmp    c00043a7 <f_write+0x82>
c00044d4:	6a 01                	push   0x1
c00044d6:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00044d9:	8d 43 28             	lea    eax,[ebx+0x28]
c00044dc:	50                   	push   eax
c00044dd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00044e1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00044e5:	50                   	push   eax
c00044e6:	e8 d0 da ff ff       	call   c0001fbb <disk_write>
c00044eb:	83 c4 10             	add    esp,0x10
c00044ee:	85 c0                	test   eax,eax
c00044f0:	75 bf                	jne    c00044b1 <f_write+0x18c>
c00044f2:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00044f5:	83 e0 7f             	and    eax,0x7f
c00044f8:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00044fb:	e9 b1 fe ff ff       	jmp    c00043b1 <f_write+0x8c>
c0004500:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0004503:	74 20                	je     c0004525 <f_write+0x200>
c0004505:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004508:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c000450b:	76 18                	jbe    c0004525 <f_write+0x200>
c000450d:	6a 01                	push   0x1
c000450f:	55                   	push   ebp
c0004510:	8d 43 28             	lea    eax,[ebx+0x28]
c0004513:	50                   	push   eax
c0004514:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004518:	50                   	push   eax
c0004519:	e8 87 da ff ff       	call   c0001fa5 <disk_read>
c000451e:	83 c4 10             	add    esp,0x10
c0004521:	85 c0                	test   eax,eax
c0004523:	75 8c                	jne    c00044b1 <f_write+0x18c>
c0004525:	89 6b 1c             	mov    DWORD PTR [ebx+0x1c],ebp
c0004528:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000452b:	be 00 02 00 00       	mov    esi,0x200
c0004530:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0004534:	25 ff 01 00 00       	and    eax,0x1ff
c0004539:	29 c6                	sub    esi,eax
c000453b:	39 74 24 48          	cmp    DWORD PTR [esp+0x48],esi
c000453f:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c0004543:	0f 46 74 24 48       	cmovbe esi,DWORD PTR [esp+0x48]
c0004548:	89 f1                	mov    ecx,esi
c000454a:	e8 cd da ff ff       	call   c000201c <mem_cpy>
c000454f:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004552:	83 c8 80             	or     eax,0xffffff80
c0004555:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004558:	e9 e6 fe ff ff       	jmp    c0004443 <f_write+0x11e>
c000455d:	bf 07 00 00 00       	mov    edi,0x7
c0004562:	83 c4 2c             	add    esp,0x2c
c0004565:	89 f8                	mov    eax,edi
c0004567:	5b                   	pop    ebx
c0004568:	5e                   	pop    esi
c0004569:	5f                   	pop    edi
c000456a:	5d                   	pop    ebp
c000456b:	c3                   	ret    

c000456c <f_sync>:
c000456c:	56                   	push   esi
c000456d:	53                   	push   ebx
c000456e:	83 ec 14             	sub    esp,0x14
c0004571:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004575:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004579:	89 d8                	mov    eax,ebx
c000457b:	e8 2c df ff ff       	call   c00024ac <validate>
c0004580:	85 c0                	test   eax,eax
c0004582:	0f 85 a3 00 00 00    	jne    c000462b <f_sync+0xbf>
c0004588:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000458b:	f6 c2 40             	test   dl,0x40
c000458e:	0f 84 97 00 00 00    	je     c000462b <f_sync+0xbf>
c0004594:	80 e2 80             	and    dl,0x80
c0004597:	74 2e                	je     c00045c7 <f_sync+0x5b>
c0004599:	6a 01                	push   0x1
c000459b:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000459e:	8d 43 28             	lea    eax,[ebx+0x28]
c00045a1:	50                   	push   eax
c00045a2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00045a6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00045aa:	50                   	push   eax
c00045ab:	e8 0b da ff ff       	call   c0001fbb <disk_write>
c00045b0:	83 c4 10             	add    esp,0x10
c00045b3:	89 c2                	mov    edx,eax
c00045b5:	b8 01 00 00 00       	mov    eax,0x1
c00045ba:	85 d2                	test   edx,edx
c00045bc:	75 6d                	jne    c000462b <f_sync+0xbf>
c00045be:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00045c1:	83 e0 7f             	and    eax,0x7f
c00045c4:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00045c7:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00045ca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00045ce:	e8 82 df ff ff       	call   c0002555 <move_window>
c00045d3:	85 c0                	test   eax,eax
c00045d5:	75 54                	jne    c000462b <f_sync+0xbf>
c00045d7:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00045da:	8a 46 0b             	mov    al,BYTE PTR [esi+0xb]
c00045dd:	89 f2                	mov    edx,esi
c00045df:	83 c8 20             	or     eax,0x20
c00045e2:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c00045e5:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00045e8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00045ea:	e8 1b ee ff ff       	call   c000340a <st_clust.isra.1>
c00045ef:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00045f2:	8d 46 1c             	lea    eax,[esi+0x1c]
c00045f5:	e8 1f da ff ff       	call   c0002019 <st_dword>
c00045fa:	8d 46 16             	lea    eax,[esi+0x16]
c00045fd:	ba 00 00 21 50       	mov    edx,0x50210000
c0004602:	e8 12 da ff ff       	call   c0002019 <st_dword>
c0004607:	8d 46 12             	lea    eax,[esi+0x12]
c000460a:	31 d2                	xor    edx,edx
c000460c:	e8 04 da ff ff       	call   c0002015 <st_word>
c0004611:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004615:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004619:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000461d:	e8 68 e9 ff ff       	call   c0002f8a <sync_fs>
c0004622:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004625:	83 e2 bf             	and    edx,0xffffffbf
c0004628:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c000462b:	83 c4 14             	add    esp,0x14
c000462e:	5b                   	pop    ebx
c000462f:	5e                   	pop    esi
c0004630:	c3                   	ret    

c0004631 <f_close>:
c0004631:	53                   	push   ebx
c0004632:	83 ec 24             	sub    esp,0x24
c0004635:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0004639:	53                   	push   ebx
c000463a:	e8 2d ff ff ff       	call   c000456c <f_sync>
c000463f:	83 c4 10             	add    esp,0x10
c0004642:	85 c0                	test   eax,eax
c0004644:	75 15                	jne    c000465b <f_close+0x2a>
c0004646:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000464a:	89 d8                	mov    eax,ebx
c000464c:	e8 5b de ff ff       	call   c00024ac <validate>
c0004651:	85 c0                	test   eax,eax
c0004653:	75 06                	jne    c000465b <f_close+0x2a>
c0004655:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000465b:	83 c4 18             	add    esp,0x18
c000465e:	5b                   	pop    ebx
c000465f:	c3                   	ret    

c0004660 <f_lseek>:
c0004660:	55                   	push   ebp
c0004661:	57                   	push   edi
c0004662:	56                   	push   esi
c0004663:	53                   	push   ebx
c0004664:	83 ec 2c             	sub    esp,0x2c
c0004667:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000466b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000466f:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0004673:	89 d8                	mov    eax,ebx
c0004675:	e8 32 de ff ff       	call   c00024ac <validate>
c000467a:	85 c0                	test   eax,eax
c000467c:	89 c5                	mov    ebp,eax
c000467e:	0f 85 82 01 00 00    	jne    c0004806 <f_lseek+0x1a6>
c0004684:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004688:	85 ed                	test   ebp,ebp
c000468a:	0f 85 76 01 00 00    	jne    c0004806 <f_lseek+0x1a6>
c0004690:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004693:	39 f0                	cmp    eax,esi
c0004695:	73 07                	jae    c000469e <f_lseek+0x3e>
c0004697:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000469b:	0f 44 f0             	cmove  esi,eax
c000469e:	85 f6                	test   esi,esi
c00046a0:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00046a3:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00046aa:	75 07                	jne    c00046b3 <f_lseek+0x53>
c00046ac:	31 f6                	xor    esi,esi
c00046ae:	e9 e2 00 00 00       	jmp    c0004795 <f_lseek+0x135>
c00046b3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00046b7:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c00046bb:	c1 e7 09             	shl    edi,0x9
c00046be:	85 c9                	test   ecx,ecx
c00046c0:	74 28                	je     c00046ea <f_lseek+0x8a>
c00046c2:	31 d2                	xor    edx,edx
c00046c4:	49                   	dec    ecx
c00046c5:	8d 46 ff             	lea    eax,[esi-0x1]
c00046c8:	f7 f7                	div    edi
c00046ca:	31 d2                	xor    edx,edx
c00046cc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00046d0:	89 c8                	mov    eax,ecx
c00046d2:	f7 f7                	div    edi
c00046d4:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00046d8:	72 10                	jb     c00046ea <f_lseek+0x8a>
c00046da:	89 f8                	mov    eax,edi
c00046dc:	f7 d8                	neg    eax
c00046de:	21 c1                	and    ecx,eax
c00046e0:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00046e3:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c00046e6:	29 ce                	sub    esi,ecx
c00046e8:	eb 3c                	jmp    c0004726 <f_lseek+0xc6>
c00046ea:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00046ed:	85 c0                	test   eax,eax
c00046ef:	75 32                	jne    c0004723 <f_lseek+0xc3>
c00046f1:	31 d2                	xor    edx,edx
c00046f3:	89 d8                	mov    eax,ebx
c00046f5:	e8 05 ef ff ff       	call   c00035ff <create_chain>
c00046fa:	83 f8 01             	cmp    eax,0x1
c00046fd:	75 0e                	jne    c000470d <f_lseek+0xad>
c00046ff:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004703:	bd 02 00 00 00       	mov    ebp,0x2
c0004708:	e9 f9 00 00 00       	jmp    c0004806 <f_lseek+0x1a6>
c000470d:	83 f8 ff             	cmp    eax,0xffffffff
c0004710:	75 0e                	jne    c0004720 <f_lseek+0xc0>
c0004712:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004716:	bd 01 00 00 00       	mov    ebp,0x1
c000471b:	e9 e6 00 00 00       	jmp    c0004806 <f_lseek+0x1a6>
c0004720:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004723:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004726:	85 c0                	test   eax,eax
c0004728:	74 82                	je     c00046ac <f_lseek+0x4c>
c000472a:	39 fe                	cmp    esi,edi
c000472c:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000472f:	76 3d                	jbe    c000476e <f_lseek+0x10e>
c0004731:	01 fa                	add    edx,edi
c0004733:	29 fe                	sub    esi,edi
c0004735:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004739:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c000473c:	89 c2                	mov    edx,eax
c000473e:	74 0d                	je     c000474d <f_lseek+0xed>
c0004740:	89 d8                	mov    eax,ebx
c0004742:	e8 b8 ee ff ff       	call   c00035ff <create_chain>
c0004747:	85 c0                	test   eax,eax
c0004749:	75 09                	jne    c0004754 <f_lseek+0xf4>
c000474b:	eb 1f                	jmp    c000476c <f_lseek+0x10c>
c000474d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000474f:	e8 de ec ff ff       	call   c0003432 <get_fat.isra.2>
c0004754:	83 f8 ff             	cmp    eax,0xffffffff
c0004757:	74 b9                	je     c0004712 <f_lseek+0xb2>
c0004759:	83 f8 01             	cmp    eax,0x1
c000475c:	76 a1                	jbe    c00046ff <f_lseek+0x9f>
c000475e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004762:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c0004765:	76 98                	jbe    c00046ff <f_lseek+0x9f>
c0004767:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000476a:	eb be                	jmp    c000472a <f_lseek+0xca>
c000476c:	31 f6                	xor    esi,esi
c000476e:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004771:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004777:	0f 84 2f ff ff ff    	je     c00046ac <f_lseek+0x4c>
c000477d:	89 c2                	mov    edx,eax
c000477f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004783:	e8 be da ff ff       	call   c0002246 <clst2sect>
c0004788:	85 c0                	test   eax,eax
c000478a:	0f 84 6f ff ff ff    	je     c00046ff <f_lseek+0x9f>
c0004790:	c1 ee 09             	shr    esi,0x9
c0004793:	01 c6                	add    esi,eax
c0004795:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004798:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000479b:	76 0c                	jbe    c00047a9 <f_lseek+0x149>
c000479d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00047a0:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00047a3:	83 ca 40             	or     edx,0x40
c00047a6:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00047a9:	a9 ff 01 00 00       	test   eax,0x1ff
c00047ae:	74 56                	je     c0004806 <f_lseek+0x1a6>
c00047b0:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00047b3:	39 f0                	cmp    eax,esi
c00047b5:	74 4f                	je     c0004806 <f_lseek+0x1a6>
c00047b7:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00047bb:	8d 7b 28             	lea    edi,[ebx+0x28]
c00047be:	74 26                	je     c00047e6 <f_lseek+0x186>
c00047c0:	6a 01                	push   0x1
c00047c2:	50                   	push   eax
c00047c3:	57                   	push   edi
c00047c4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00047c8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00047cc:	50                   	push   eax
c00047cd:	e8 e9 d7 ff ff       	call   c0001fbb <disk_write>
c00047d2:	83 c4 10             	add    esp,0x10
c00047d5:	85 c0                	test   eax,eax
c00047d7:	0f 85 35 ff ff ff    	jne    c0004712 <f_lseek+0xb2>
c00047dd:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00047e0:	83 e0 7f             	and    eax,0x7f
c00047e3:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00047e6:	6a 01                	push   0x1
c00047e8:	56                   	push   esi
c00047e9:	57                   	push   edi
c00047ea:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00047ee:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00047f2:	50                   	push   eax
c00047f3:	e8 ad d7 ff ff       	call   c0001fa5 <disk_read>
c00047f8:	83 c4 10             	add    esp,0x10
c00047fb:	85 c0                	test   eax,eax
c00047fd:	0f 85 0f ff ff ff    	jne    c0004712 <f_lseek+0xb2>
c0004803:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0004806:	83 c4 2c             	add    esp,0x2c
c0004809:	89 e8                	mov    eax,ebp
c000480b:	5b                   	pop    ebx
c000480c:	5e                   	pop    esi
c000480d:	5f                   	pop    edi
c000480e:	5d                   	pop    ebp
c000480f:	c3                   	ret    

c0004810 <f_opendir>:
c0004810:	56                   	push   esi
c0004811:	b8 09 00 00 00       	mov    eax,0x9
c0004816:	53                   	push   ebx
c0004817:	83 ec 24             	sub    esp,0x24
c000481a:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000481e:	85 db                	test   ebx,ebx
c0004820:	0f 84 af 00 00 00    	je     c00048d5 <f_opendir+0xc5>
c0004826:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000482a:	31 c9                	xor    ecx,ecx
c000482c:	8d 44 24 34          	lea    eax,[esp+0x34]
c0004830:	e8 7d de ff ff       	call   c00026b2 <mount_volume>
c0004835:	85 c0                	test   eax,eax
c0004837:	0f 85 92 00 00 00    	jne    c00048cf <f_opendir+0xbf>
c000483d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004841:	83 ec 0c             	sub    esp,0xc
c0004844:	89 03                	mov    DWORD PTR [ebx],eax
c0004846:	68 00 02 00 00       	push   0x200
c000484b:	e8 e4 15 00 00       	call   c0005e34 <ff_memalloc>
c0004850:	83 c4 10             	add    esp,0x10
c0004853:	89 c6                	mov    esi,eax
c0004855:	b8 11 00 00 00       	mov    eax,0x11
c000485a:	85 f6                	test   esi,esi
c000485c:	74 77                	je     c00048d5 <f_opendir+0xc5>
c000485e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004862:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0004866:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004869:	89 d8                	mov    eax,ebx
c000486b:	e8 8a f3 ff ff       	call   c0003bfa <follow_path>
c0004870:	85 c0                	test   eax,eax
c0004872:	75 37                	jne    c00048ab <f_opendir+0x9b>
c0004874:	f6 43 2b 80          	test   BYTE PTR [ebx+0x2b],0x80
c0004878:	75 1c                	jne    c0004896 <f_opendir+0x86>
c000487a:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c000487e:	b8 05 00 00 00       	mov    eax,0x5
c0004883:	74 26                	je     c00048ab <f_opendir+0x9b>
c0004885:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004889:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000488c:	8a 00                	mov    al,BYTE PTR [eax]
c000488e:	e8 4e eb ff ff       	call   c00033e1 <ld_clust.isra.0>
c0004893:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004896:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000489a:	31 d2                	xor    edx,edx
c000489c:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c00048a0:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00048a4:	89 d8                	mov    eax,ebx
c00048a6:	e8 8c ec ff ff       	call   c0003537 <dir_sdi>
c00048ab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00048af:	83 ec 0c             	sub    esp,0xc
c00048b2:	56                   	push   esi
c00048b3:	e8 94 15 00 00       	call   c0005e4c <ff_memfree>
c00048b8:	83 c4 10             	add    esp,0x10
c00048bb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00048bf:	83 f8 04             	cmp    eax,0x4
c00048c2:	74 06                	je     c00048ca <f_opendir+0xba>
c00048c4:	85 c0                	test   eax,eax
c00048c6:	74 0d                	je     c00048d5 <f_opendir+0xc5>
c00048c8:	eb 05                	jmp    c00048cf <f_opendir+0xbf>
c00048ca:	b8 05 00 00 00       	mov    eax,0x5
c00048cf:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00048d5:	83 c4 24             	add    esp,0x24
c00048d8:	5b                   	pop    ebx
c00048d9:	5e                   	pop    esi
c00048da:	c3                   	ret    

c00048db <f_closedir>:
c00048db:	53                   	push   ebx
c00048dc:	83 ec 18             	sub    esp,0x18
c00048df:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00048e3:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00048e7:	89 d8                	mov    eax,ebx
c00048e9:	e8 be db ff ff       	call   c00024ac <validate>
c00048ee:	85 c0                	test   eax,eax
c00048f0:	75 06                	jne    c00048f8 <f_closedir+0x1d>
c00048f2:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00048f8:	83 c4 18             	add    esp,0x18
c00048fb:	5b                   	pop    ebx
c00048fc:	c3                   	ret    

c00048fd <f_readdir>:
c00048fd:	57                   	push   edi
c00048fe:	56                   	push   esi
c00048ff:	53                   	push   ebx
c0004900:	83 ec 20             	sub    esp,0x20
c0004903:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004907:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000490b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000490f:	89 d8                	mov    eax,ebx
c0004911:	e8 96 db ff ff       	call   c00024ac <validate>
c0004916:	85 c0                	test   eax,eax
c0004918:	75 6e                	jne    c0004988 <f_readdir+0x8b>
c000491a:	85 ff                	test   edi,edi
c000491c:	75 0b                	jne    c0004929 <f_readdir+0x2c>
c000491e:	31 d2                	xor    edx,edx
c0004920:	89 d8                	mov    eax,ebx
c0004922:	e8 10 ec ff ff       	call   c0003537 <dir_sdi>
c0004927:	eb 5f                	jmp    c0004988 <f_readdir+0x8b>
c0004929:	83 ec 0c             	sub    esp,0xc
c000492c:	68 00 02 00 00       	push   0x200
c0004931:	e8 fe 14 00 00       	call   c0005e34 <ff_memalloc>
c0004936:	83 c4 10             	add    esp,0x10
c0004939:	89 c6                	mov    esi,eax
c000493b:	b8 11 00 00 00       	mov    eax,0x11
c0004940:	85 f6                	test   esi,esi
c0004942:	74 44                	je     c0004988 <f_readdir+0x8b>
c0004944:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004948:	31 d2                	xor    edx,edx
c000494a:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000494d:	89 d8                	mov    eax,ebx
c000494f:	e8 dd ef ff ff       	call   c0003931 <dir_read>
c0004954:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0004959:	75 19                	jne    c0004974 <f_readdir+0x77>
c000495b:	89 fa                	mov    edx,edi
c000495d:	89 d8                	mov    eax,ebx
c000495f:	e8 7c e8 ff ff       	call   c00031e0 <get_fileinfo>
c0004964:	31 d2                	xor    edx,edx
c0004966:	89 d8                	mov    eax,ebx
c0004968:	e8 5a ee ff ff       	call   c00037c7 <dir_next>
c000496d:	83 f8 04             	cmp    eax,0x4
c0004970:	75 02                	jne    c0004974 <f_readdir+0x77>
c0004972:	31 c0                	xor    eax,eax
c0004974:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004978:	83 ec 0c             	sub    esp,0xc
c000497b:	56                   	push   esi
c000497c:	e8 cb 14 00 00       	call   c0005e4c <ff_memfree>
c0004981:	83 c4 10             	add    esp,0x10
c0004984:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004988:	83 c4 20             	add    esp,0x20
c000498b:	5b                   	pop    ebx
c000498c:	5e                   	pop    esi
c000498d:	5f                   	pop    edi
c000498e:	c3                   	ret    

c000498f <f_stat>:
c000498f:	57                   	push   edi
c0004990:	31 c9                	xor    ecx,ecx
c0004992:	56                   	push   esi
c0004993:	53                   	push   ebx
c0004994:	83 ec 30             	sub    esp,0x30
c0004997:	8d 44 24 40          	lea    eax,[esp+0x40]
c000499b:	89 e2                	mov    edx,esp
c000499d:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00049a1:	e8 0c dd ff ff       	call   c00026b2 <mount_volume>
c00049a6:	85 c0                	test   eax,eax
c00049a8:	89 c3                	mov    ebx,eax
c00049aa:	75 59                	jne    c0004a05 <f_stat+0x76>
c00049ac:	83 ec 0c             	sub    esp,0xc
c00049af:	bb 11 00 00 00       	mov    ebx,0x11
c00049b4:	68 00 02 00 00       	push   0x200
c00049b9:	e8 76 14 00 00       	call   c0005e34 <ff_memalloc>
c00049be:	83 c4 10             	add    esp,0x10
c00049c1:	85 c0                	test   eax,eax
c00049c3:	89 c6                	mov    esi,eax
c00049c5:	74 3e                	je     c0004a05 <f_stat+0x76>
c00049c7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00049ca:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00049ce:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00049d1:	89 e0                	mov    eax,esp
c00049d3:	e8 22 f2 ff ff       	call   c0003bfa <follow_path>
c00049d8:	85 c0                	test   eax,eax
c00049da:	89 c3                	mov    ebx,eax
c00049dc:	75 1b                	jne    c00049f9 <f_stat+0x6a>
c00049de:	f6 44 24 2b 80       	test   BYTE PTR [esp+0x2b],0x80
c00049e3:	75 0f                	jne    c00049f4 <f_stat+0x65>
c00049e5:	85 ff                	test   edi,edi
c00049e7:	74 10                	je     c00049f9 <f_stat+0x6a>
c00049e9:	89 fa                	mov    edx,edi
c00049eb:	89 e0                	mov    eax,esp
c00049ed:	e8 ee e7 ff ff       	call   c00031e0 <get_fileinfo>
c00049f2:	eb 05                	jmp    c00049f9 <f_stat+0x6a>
c00049f4:	bb 06 00 00 00       	mov    ebx,0x6
c00049f9:	83 ec 0c             	sub    esp,0xc
c00049fc:	56                   	push   esi
c00049fd:	e8 4a 14 00 00       	call   c0005e4c <ff_memfree>
c0004a02:	83 c4 10             	add    esp,0x10
c0004a05:	83 c4 30             	add    esp,0x30
c0004a08:	89 d8                	mov    eax,ebx
c0004a0a:	5b                   	pop    ebx
c0004a0b:	5e                   	pop    esi
c0004a0c:	5f                   	pop    edi
c0004a0d:	c3                   	ret    

c0004a0e <f_getfree>:
c0004a0e:	55                   	push   ebp
c0004a0f:	31 c9                	xor    ecx,ecx
c0004a11:	57                   	push   edi
c0004a12:	56                   	push   esi
c0004a13:	53                   	push   ebx
c0004a14:	83 ec 2c             	sub    esp,0x2c
c0004a17:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004a1b:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004a1f:	e8 8e dc ff ff       	call   c00026b2 <mount_volume>
c0004a24:	85 c0                	test   eax,eax
c0004a26:	89 c6                	mov    esi,eax
c0004a28:	0f 85 df 00 00 00    	jne    c0004b0d <f_getfree+0xff>
c0004a2e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0004a32:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004a36:	89 18                	mov    DWORD PTR [eax],ebx
c0004a38:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c0004a3b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004a3e:	8d 57 fe             	lea    edx,[edi-0x2]
c0004a41:	39 d0                	cmp    eax,edx
c0004a43:	77 0b                	ja     c0004a50 <f_getfree+0x42>
c0004a45:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0004a49:	89 01                	mov    DWORD PTR [ecx],eax
c0004a4b:	e9 bd 00 00 00       	jmp    c0004b0d <f_getfree+0xff>
c0004a50:	80 3b 01             	cmp    BYTE PTR [ebx],0x1
c0004a53:	75 29                	jne    c0004a7e <f_getfree+0x70>
c0004a55:	bf 02 00 00 00       	mov    edi,0x2
c0004a5a:	31 ed                	xor    ebp,ebp
c0004a5c:	89 fa                	mov    edx,edi
c0004a5e:	89 d8                	mov    eax,ebx
c0004a60:	e8 cd e9 ff ff       	call   c0003432 <get_fat.isra.2>
c0004a65:	83 f8 ff             	cmp    eax,0xffffffff
c0004a68:	74 7d                	je     c0004ae7 <f_getfree+0xd9>
c0004a6a:	83 f8 01             	cmp    eax,0x1
c0004a6d:	74 7f                	je     c0004aee <f_getfree+0xe0>
c0004a6f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a73:	83 d5 00             	adc    ebp,0x0
c0004a76:	47                   	inc    edi
c0004a77:	39 78 18             	cmp    DWORD PTR [eax+0x18],edi
c0004a7a:	77 e0                	ja     c0004a5c <f_getfree+0x4e>
c0004a7c:	eb 79                	jmp    c0004af7 <f_getfree+0xe9>
c0004a7e:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0004a81:	31 ed                	xor    ebp,ebp
c0004a83:	31 db                	xor    ebx,ebx
c0004a85:	85 db                	test   ebx,ebx
c0004a87:	75 18                	jne    c0004aa1 <f_getfree+0x93>
c0004a89:	8d 42 01             	lea    eax,[edx+0x1]
c0004a8c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004a90:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a94:	e8 bc da ff ff       	call   c0002555 <move_window>
c0004a99:	85 c0                	test   eax,eax
c0004a9b:	75 58                	jne    c0004af5 <f_getfree+0xe7>
c0004a9d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004aa1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004aa5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004aa9:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c0004aac:	8d 44 19 34          	lea    eax,[ecx+ebx*1+0x34]
c0004ab0:	75 13                	jne    c0004ac5 <f_getfree+0xb7>
c0004ab2:	e8 39 d5 ff ff       	call   c0001ff0 <ld_word>
c0004ab7:	0f b7 c0             	movzx  eax,ax
c0004aba:	83 f8 01             	cmp    eax,0x1
c0004abd:	83 d5 00             	adc    ebp,0x0
c0004ac0:	83 c3 02             	add    ebx,0x2
c0004ac3:	eb 13                	jmp    c0004ad8 <f_getfree+0xca>
c0004ac5:	e8 33 d5 ff ff       	call   c0001ffd <ld_dword>
c0004aca:	25 ff ff ff 0f       	and    eax,0xfffffff
c0004acf:	83 f8 01             	cmp    eax,0x1
c0004ad2:	83 d5 00             	adc    ebp,0x0
c0004ad5:	83 c3 04             	add    ebx,0x4
c0004ad8:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0004ade:	4f                   	dec    edi
c0004adf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004ae3:	75 a0                	jne    c0004a85 <f_getfree+0x77>
c0004ae5:	eb 10                	jmp    c0004af7 <f_getfree+0xe9>
c0004ae7:	be 01 00 00 00       	mov    esi,0x1
c0004aec:	eb 09                	jmp    c0004af7 <f_getfree+0xe9>
c0004aee:	be 02 00 00 00       	mov    esi,0x2
c0004af3:	eb 02                	jmp    c0004af7 <f_getfree+0xe9>
c0004af5:	89 c6                	mov    esi,eax
c0004af7:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0004afb:	89 28                	mov    DWORD PTR [eax],ebp
c0004afd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004b01:	89 68 14             	mov    DWORD PTR [eax+0x14],ebp
c0004b04:	8a 50 04             	mov    dl,BYTE PTR [eax+0x4]
c0004b07:	83 ca 01             	or     edx,0x1
c0004b0a:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c0004b0d:	83 c4 2c             	add    esp,0x2c
c0004b10:	89 f0                	mov    eax,esi
c0004b12:	5b                   	pop    ebx
c0004b13:	5e                   	pop    esi
c0004b14:	5f                   	pop    edi
c0004b15:	5d                   	pop    ebp
c0004b16:	c3                   	ret    

c0004b17 <f_truncate>:
c0004b17:	56                   	push   esi
c0004b18:	53                   	push   ebx
c0004b19:	83 ec 14             	sub    esp,0x14
c0004b1c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004b20:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004b24:	89 d8                	mov    eax,ebx
c0004b26:	e8 81 d9 ff ff       	call   c00024ac <validate>
c0004b2b:	85 c0                	test   eax,eax
c0004b2d:	89 c6                	mov    esi,eax
c0004b2f:	0f 85 c4 00 00 00    	jne    c0004bf9 <f_truncate+0xe2>
c0004b35:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0004b39:	85 f6                	test   esi,esi
c0004b3b:	0f 85 b8 00 00 00    	jne    c0004bf9 <f_truncate+0xe2>
c0004b41:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004b45:	0f 84 a9 00 00 00    	je     c0004bf4 <f_truncate+0xdd>
c0004b4b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004b4e:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004b51:	0f 83 a2 00 00 00    	jae    c0004bf9 <f_truncate+0xe2>
c0004b57:	85 c0                	test   eax,eax
c0004b59:	75 15                	jne    c0004b70 <f_truncate+0x59>
c0004b5b:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004b5e:	31 c9                	xor    ecx,ecx
c0004b60:	89 d8                	mov    eax,ebx
c0004b62:	e8 d2 eb ff ff       	call   c0003739 <remove_chain>
c0004b67:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004b6e:	eb 35                	jmp    c0004ba5 <f_truncate+0x8e>
c0004b70:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004b73:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004b75:	e8 b8 e8 ff ff       	call   c0003432 <get_fat.isra.2>
c0004b7a:	89 c2                	mov    edx,eax
c0004b7c:	b8 01 00 00 00       	mov    eax,0x1
c0004b81:	83 fa ff             	cmp    edx,0xffffffff
c0004b84:	74 1f                	je     c0004ba5 <f_truncate+0x8e>
c0004b86:	83 fa 01             	cmp    edx,0x1
c0004b89:	b8 02 00 00 00       	mov    eax,0x2
c0004b8e:	74 15                	je     c0004ba5 <f_truncate+0x8e>
c0004b90:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004b94:	31 c0                	xor    eax,eax
c0004b96:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004b99:	76 0a                	jbe    c0004ba5 <f_truncate+0x8e>
c0004b9b:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c0004b9e:	89 d8                	mov    eax,ebx
c0004ba0:	e8 94 eb ff ff       	call   c0003739 <remove_chain>
c0004ba5:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004ba8:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004bab:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004bae:	83 ca 40             	or     edx,0x40
c0004bb1:	85 c0                	test   eax,eax
c0004bb3:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004bb6:	75 35                	jne    c0004bed <f_truncate+0xd6>
c0004bb8:	80 e2 80             	and    dl,0x80
c0004bbb:	74 3c                	je     c0004bf9 <f_truncate+0xe2>
c0004bbd:	6a 01                	push   0x1
c0004bbf:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004bc2:	8d 43 28             	lea    eax,[ebx+0x28]
c0004bc5:	50                   	push   eax
c0004bc6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004bca:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004bce:	50                   	push   eax
c0004bcf:	e8 e7 d3 ff ff       	call   c0001fbb <disk_write>
c0004bd4:	83 c4 10             	add    esp,0x10
c0004bd7:	85 c0                	test   eax,eax
c0004bd9:	75 0d                	jne    c0004be8 <f_truncate+0xd1>
c0004bdb:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004bde:	31 f6                	xor    esi,esi
c0004be0:	83 e0 7f             	and    eax,0x7f
c0004be3:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004be6:	eb 11                	jmp    c0004bf9 <f_truncate+0xe2>
c0004be8:	b8 01 00 00 00       	mov    eax,0x1
c0004bed:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c0004bf0:	89 c6                	mov    esi,eax
c0004bf2:	eb 05                	jmp    c0004bf9 <f_truncate+0xe2>
c0004bf4:	be 07 00 00 00       	mov    esi,0x7
c0004bf9:	83 c4 14             	add    esp,0x14
c0004bfc:	89 f0                	mov    eax,esi
c0004bfe:	5b                   	pop    ebx
c0004bff:	5e                   	pop    esi
c0004c00:	c3                   	ret    

c0004c01 <f_unlink>:
c0004c01:	55                   	push   ebp
c0004c02:	b9 02 00 00 00       	mov    ecx,0x2
c0004c07:	57                   	push   edi
c0004c08:	56                   	push   esi
c0004c09:	53                   	push   ebx
c0004c0a:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004c10:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004c14:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c0004c1b:	e8 92 da ff ff       	call   c00026b2 <mount_volume>
c0004c20:	85 c0                	test   eax,eax
c0004c22:	0f 85 ee 00 00 00    	jne    c0004d16 <f_unlink+0x115>
c0004c28:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c2c:	83 ec 0c             	sub    esp,0xc
c0004c2f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004c33:	68 00 02 00 00       	push   0x200
c0004c38:	e8 f7 11 00 00       	call   c0005e34 <ff_memalloc>
c0004c3d:	83 c4 10             	add    esp,0x10
c0004c40:	89 c3                	mov    ebx,eax
c0004c42:	b8 11 00 00 00       	mov    eax,0x11
c0004c47:	85 db                	test   ebx,ebx
c0004c49:	0f 84 c7 00 00 00    	je     c0004d16 <f_unlink+0x115>
c0004c4f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c53:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004c5a:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004c5d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c61:	e8 94 ef ff ff       	call   c0003bfa <follow_path>
c0004c66:	85 c0                	test   eax,eax
c0004c68:	0f 85 94 00 00 00    	jne    c0004d02 <f_unlink+0x101>
c0004c6e:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0004c73:	b8 06 00 00 00       	mov    eax,0x6
c0004c78:	0f 85 84 00 00 00    	jne    c0004d02 <f_unlink+0x101>
c0004c7e:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c0004c83:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004c89:	74 07                	je     c0004c92 <f_unlink+0x91>
c0004c8b:	b8 07 00 00 00       	mov    eax,0x7
c0004c90:	eb 70                	jmp    c0004d02 <f_unlink+0x101>
c0004c92:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004c96:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004c9a:	8a 07                	mov    al,BYTE PTR [edi]
c0004c9c:	e8 40 e7 ff ff       	call   c00033e1 <ld_clust.isra.0>
c0004ca1:	83 e5 10             	and    ebp,0x10
c0004ca4:	89 c6                	mov    esi,eax
c0004ca6:	75 20                	jne    c0004cc8 <f_unlink+0xc7>
c0004ca8:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004cac:	e8 a8 ed ff ff       	call   c0003a59 <dir_remove>
c0004cb1:	85 c0                	test   eax,eax
c0004cb3:	75 40                	jne    c0004cf5 <f_unlink+0xf4>
c0004cb5:	85 f6                	test   esi,esi
c0004cb7:	74 3c                	je     c0004cf5 <f_unlink+0xf4>
c0004cb9:	31 c9                	xor    ecx,ecx
c0004cbb:	89 f2                	mov    edx,esi
c0004cbd:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004cc1:	e8 73 ea ff ff       	call   c0003739 <remove_chain>
c0004cc6:	eb 2d                	jmp    c0004cf5 <f_unlink+0xf4>
c0004cc8:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004ccc:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004cd0:	31 d2                	xor    edx,edx
c0004cd2:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0004cd6:	e8 5c e8 ff ff       	call   c0003537 <dir_sdi>
c0004cdb:	85 c0                	test   eax,eax
c0004cdd:	75 23                	jne    c0004d02 <f_unlink+0x101>
c0004cdf:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004ce3:	31 d2                	xor    edx,edx
c0004ce5:	e8 47 ec ff ff       	call   c0003931 <dir_read>
c0004cea:	85 c0                	test   eax,eax
c0004cec:	74 9d                	je     c0004c8b <f_unlink+0x8a>
c0004cee:	83 f8 04             	cmp    eax,0x4
c0004cf1:	75 0f                	jne    c0004d02 <f_unlink+0x101>
c0004cf3:	eb b3                	jmp    c0004ca8 <f_unlink+0xa7>
c0004cf5:	85 c0                	test   eax,eax
c0004cf7:	75 09                	jne    c0004d02 <f_unlink+0x101>
c0004cf9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004cfd:	e8 88 e2 ff ff       	call   c0002f8a <sync_fs>
c0004d02:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004d06:	83 ec 0c             	sub    esp,0xc
c0004d09:	53                   	push   ebx
c0004d0a:	e8 3d 11 00 00       	call   c0005e4c <ff_memfree>
c0004d0f:	83 c4 10             	add    esp,0x10
c0004d12:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d16:	81 c4 8c 00 00 00    	add    esp,0x8c
c0004d1c:	5b                   	pop    ebx
c0004d1d:	5e                   	pop    esi
c0004d1e:	5f                   	pop    edi
c0004d1f:	5d                   	pop    ebp
c0004d20:	c3                   	ret    

c0004d21 <f_mkdir>:
c0004d21:	57                   	push   edi
c0004d22:	b9 02 00 00 00       	mov    ecx,0x2
c0004d27:	56                   	push   esi
c0004d28:	53                   	push   ebx
c0004d29:	83 ec 50             	sub    esp,0x50
c0004d2c:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004d30:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004d34:	e8 79 d9 ff ff       	call   c00026b2 <mount_volume>
c0004d39:	85 c0                	test   eax,eax
c0004d3b:	89 c3                	mov    ebx,eax
c0004d3d:	0f 85 70 01 00 00    	jne    c0004eb3 <f_mkdir+0x192>
c0004d43:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d47:	83 ec 0c             	sub    esp,0xc
c0004d4a:	bb 11 00 00 00       	mov    ebx,0x11
c0004d4f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004d53:	68 00 02 00 00       	push   0x200
c0004d58:	e8 d7 10 00 00       	call   c0005e34 <ff_memalloc>
c0004d5d:	83 c4 10             	add    esp,0x10
c0004d60:	85 c0                	test   eax,eax
c0004d62:	89 c7                	mov    edi,eax
c0004d64:	0f 84 49 01 00 00    	je     c0004eb3 <f_mkdir+0x192>
c0004d6a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d6e:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004d72:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004d75:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d79:	e8 7c ee ff ff       	call   c0003bfa <follow_path>
c0004d7e:	85 c0                	test   eax,eax
c0004d80:	89 c3                	mov    ebx,eax
c0004d82:	74 3e                	je     c0004dc2 <f_mkdir+0xa1>
c0004d84:	83 f8 04             	cmp    eax,0x4
c0004d87:	75 3e                	jne    c0004dc7 <f_mkdir+0xa6>
c0004d89:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d8d:	31 d2                	xor    edx,edx
c0004d8f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004d93:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004d97:	e8 63 e8 ff ff       	call   c00035ff <create_chain>
c0004d9c:	85 c0                	test   eax,eax
c0004d9e:	89 c6                	mov    esi,eax
c0004da0:	74 0c                	je     c0004dae <f_mkdir+0x8d>
c0004da2:	83 f8 01             	cmp    eax,0x1
c0004da5:	bb 02 00 00 00       	mov    ebx,0x2
c0004daa:	74 07                	je     c0004db3 <f_mkdir+0x92>
c0004dac:	eb 2a                	jmp    c0004dd8 <f_mkdir+0xb7>
c0004dae:	bb 07 00 00 00       	mov    ebx,0x7
c0004db3:	31 c9                	xor    ecx,ecx
c0004db5:	89 f2                	mov    edx,esi
c0004db7:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004dbb:	e8 79 e9 ff ff       	call   c0003739 <remove_chain>
c0004dc0:	eb 05                	jmp    c0004dc7 <f_mkdir+0xa6>
c0004dc2:	bb 08 00 00 00       	mov    ebx,0x8
c0004dc7:	83 ec 0c             	sub    esp,0xc
c0004dca:	57                   	push   edi
c0004dcb:	e8 7c 10 00 00       	call   c0005e4c <ff_memfree>
c0004dd0:	83 c4 10             	add    esp,0x10
c0004dd3:	e9 db 00 00 00       	jmp    c0004eb3 <f_mkdir+0x192>
c0004dd8:	83 f8 ff             	cmp    eax,0xffffffff
c0004ddb:	bb 01 00 00 00       	mov    ebx,0x1
c0004de0:	74 d1                	je     c0004db3 <f_mkdir+0x92>
c0004de2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004de6:	89 f2                	mov    edx,esi
c0004de8:	e8 19 dd ff ff       	call   c0002b06 <dir_clear>
c0004ded:	85 c0                	test   eax,eax
c0004def:	89 c3                	mov    ebx,eax
c0004df1:	75 c0                	jne    c0004db3 <f_mkdir+0x92>
c0004df3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004df7:	b9 0b 00 00 00       	mov    ecx,0xb
c0004dfc:	ba 20 00 00 00       	mov    edx,0x20
c0004e01:	83 c0 34             	add    eax,0x34
c0004e04:	e8 28 d2 ff ff       	call   c0002031 <mem_set>
c0004e09:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e0d:	ba 00 00 21 50       	mov    edx,0x50210000
c0004e12:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004e16:	83 c0 4a             	add    eax,0x4a
c0004e19:	c6 40 f5 10          	mov    BYTE PTR [eax-0xb],0x10
c0004e1d:	e8 f7 d1 ff ff       	call   c0002019 <st_dword>
c0004e22:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e26:	89 f1                	mov    ecx,esi
c0004e28:	8d 50 34             	lea    edx,[eax+0x34]
c0004e2b:	e8 da e5 ff ff       	call   c000340a <st_clust.isra.1>
c0004e30:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e34:	b9 20 00 00 00       	mov    ecx,0x20
c0004e39:	8d 50 34             	lea    edx,[eax+0x34]
c0004e3c:	83 c0 54             	add    eax,0x54
c0004e3f:	e8 d8 d1 ff ff       	call   c000201c <mem_cpy>
c0004e44:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e48:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004e4c:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004e50:	8d 50 54             	lea    edx,[eax+0x54]
c0004e53:	e8 b2 e5 ff ff       	call   c000340a <st_clust.isra.1>
c0004e58:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e5c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e60:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004e64:	e8 2e ee ff ff       	call   c0003c97 <dir_register>
c0004e69:	85 c0                	test   eax,eax
c0004e6b:	89 c3                	mov    ebx,eax
c0004e6d:	0f 85 40 ff ff ff    	jne    c0004db3 <f_mkdir+0x92>
c0004e73:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004e77:	ba 00 00 21 50       	mov    edx,0x50210000
c0004e7c:	83 c0 16             	add    eax,0x16
c0004e7f:	e8 95 d1 ff ff       	call   c0002019 <st_dword>
c0004e84:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004e88:	89 f1                	mov    ecx,esi
c0004e8a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e8e:	e8 77 e5 ff ff       	call   c000340a <st_clust.isra.1>
c0004e93:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004e97:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004e9b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e9f:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004ea3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ea7:	e8 de e0 ff ff       	call   c0002f8a <sync_fs>
c0004eac:	89 c3                	mov    ebx,eax
c0004eae:	e9 14 ff ff ff       	jmp    c0004dc7 <f_mkdir+0xa6>
c0004eb3:	83 c4 50             	add    esp,0x50
c0004eb6:	89 d8                	mov    eax,ebx
c0004eb8:	5b                   	pop    ebx
c0004eb9:	5e                   	pop    esi
c0004eba:	5f                   	pop    edi
c0004ebb:	c3                   	ret    

c0004ebc <f_rename>:
c0004ebc:	57                   	push   edi
c0004ebd:	56                   	push   esi
c0004ebe:	53                   	push   ebx
c0004ebf:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004ec5:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004ecc:	e8 8f d5 ff ff       	call   c0002460 <get_ldnumber>
c0004ed1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004ed5:	b9 02 00 00 00       	mov    ecx,0x2
c0004eda:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004ee1:	e8 cc d7 ff ff       	call   c00026b2 <mount_volume>
c0004ee6:	85 c0                	test   eax,eax
c0004ee8:	0f 85 7c 01 00 00    	jne    c000506a <f_rename+0x1ae>
c0004eee:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ef2:	83 ec 0c             	sub    esp,0xc
c0004ef5:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004ef9:	68 00 02 00 00       	push   0x200
c0004efe:	e8 31 0f 00 00       	call   c0005e34 <ff_memalloc>
c0004f03:	83 c4 10             	add    esp,0x10
c0004f06:	89 c6                	mov    esi,eax
c0004f08:	b8 11 00 00 00       	mov    eax,0x11
c0004f0d:	85 f6                	test   esi,esi
c0004f0f:	0f 84 55 01 00 00    	je     c000506a <f_rename+0x1ae>
c0004f15:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f19:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004f20:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004f23:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004f27:	e8 ce ec ff ff       	call   c0003bfa <follow_path>
c0004f2c:	85 c0                	test   eax,eax
c0004f2e:	0f 85 22 01 00 00    	jne    c0005056 <f_rename+0x19a>
c0004f34:	8a 54 24 6b          	mov    dl,BYTE PTR [esp+0x6b]
c0004f38:	b8 06 00 00 00       	mov    eax,0x6
c0004f3d:	80 e2 a0             	and    dl,0xa0
c0004f40:	0f 85 10 01 00 00    	jne    c0005056 <f_rename+0x19a>
c0004f46:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004f4a:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004f4e:	b9 20 00 00 00       	mov    ecx,0x20
c0004f53:	e8 c4 d0 ff ff       	call   c000201c <mem_cpy>
c0004f58:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004f5c:	b9 30 00 00 00       	mov    ecx,0x30
c0004f61:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004f65:	e8 b2 d0 ff ff       	call   c000201c <mem_cpy>
c0004f6a:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004f71:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004f75:	e8 80 ec ff ff       	call   c0003bfa <follow_path>
c0004f7a:	85 c0                	test   eax,eax
c0004f7c:	75 20                	jne    c0004f9e <f_rename+0xe2>
c0004f7e:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004f82:	b8 08 00 00 00       	mov    eax,0x8
c0004f87:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004f8b:	0f 85 c5 00 00 00    	jne    c0005056 <f_rename+0x19a>
c0004f91:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004f95:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004f9c:	eb 03                	jmp    c0004fa1 <f_rename+0xe5>
c0004f9e:	83 f8 04             	cmp    eax,0x4
c0004fa1:	0f 85 af 00 00 00    	jne    c0005056 <f_rename+0x19a>
c0004fa7:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004fab:	e8 e7 ec ff ff       	call   c0003c97 <dir_register>
c0004fb0:	85 c0                	test   eax,eax
c0004fb2:	0f 85 9e 00 00 00    	jne    c0005056 <f_rename+0x19a>
c0004fb8:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004fbf:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004fc3:	b9 13 00 00 00       	mov    ecx,0x13
c0004fc8:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004fcb:	e8 4c d0 ff ff       	call   c000201c <mem_cpy>
c0004fd0:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004fd4:	a8 10                	test   al,0x10
c0004fd6:	75 03                	jne    c0004fdb <f_rename+0x11f>
c0004fd8:	83 c8 20             	or     eax,0x20
c0004fdb:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004fde:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fe2:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004fe6:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004fea:	74 54                	je     c0005040 <f_rename+0x184>
c0004fec:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004ff0:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004ff4:	74 4a                	je     c0005040 <f_rename+0x184>
c0004ff6:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004ffa:	89 da                	mov    edx,ebx
c0004ffc:	8a 07                	mov    al,BYTE PTR [edi]
c0004ffe:	e8 de e3 ff ff       	call   c00033e1 <ld_clust.isra.0>
c0005003:	89 c2                	mov    edx,eax
c0005005:	89 f8                	mov    eax,edi
c0005007:	e8 3a d2 ff ff       	call   c0002246 <clst2sect>
c000500c:	89 c2                	mov    edx,eax
c000500e:	b8 02 00 00 00       	mov    eax,0x2
c0005013:	85 d2                	test   edx,edx
c0005015:	74 3f                	je     c0005056 <f_rename+0x19a>
c0005017:	89 f8                	mov    eax,edi
c0005019:	e8 37 d5 ff ff       	call   c0002555 <move_window>
c000501e:	85 c0                	test   eax,eax
c0005020:	75 34                	jne    c0005056 <f_rename+0x19a>
c0005022:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005026:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c000502a:	75 14                	jne    c0005040 <f_rename+0x184>
c000502c:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0005030:	8d 50 54             	lea    edx,[eax+0x54]
c0005033:	e8 d2 e3 ff ff       	call   c000340a <st_clust.isra.1>
c0005038:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000503c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005040:	8d 44 24 40          	lea    eax,[esp+0x40]
c0005044:	e8 10 ea ff ff       	call   c0003a59 <dir_remove>
c0005049:	85 c0                	test   eax,eax
c000504b:	75 09                	jne    c0005056 <f_rename+0x19a>
c000504d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005051:	e8 34 df ff ff       	call   c0002f8a <sync_fs>
c0005056:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000505a:	83 ec 0c             	sub    esp,0xc
c000505d:	56                   	push   esi
c000505e:	e8 e9 0d 00 00       	call   c0005e4c <ff_memfree>
c0005063:	83 c4 10             	add    esp,0x10
c0005066:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000506a:	81 c4 a0 00 00 00    	add    esp,0xa0
c0005070:	5b                   	pop    ebx
c0005071:	5e                   	pop    esi
c0005072:	5f                   	pop    edi
c0005073:	c3                   	ret    

c0005074 <f_chmod>:
c0005074:	57                   	push   edi
c0005075:	b9 02 00 00 00       	mov    ecx,0x2
c000507a:	56                   	push   esi
c000507b:	53                   	push   ebx
c000507c:	83 ec 50             	sub    esp,0x50
c000507f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005083:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0005087:	8d 44 24 60          	lea    eax,[esp+0x60]
c000508b:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c000508f:	e8 1e d6 ff ff       	call   c00026b2 <mount_volume>
c0005094:	85 c0                	test   eax,eax
c0005096:	0f 85 81 00 00 00    	jne    c000511d <f_chmod+0xa9>
c000509c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050a0:	83 ec 0c             	sub    esp,0xc
c00050a3:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00050a7:	68 00 02 00 00       	push   0x200
c00050ac:	e8 83 0d 00 00       	call   c0005e34 <ff_memalloc>
c00050b1:	83 c4 10             	add    esp,0x10
c00050b4:	89 c6                	mov    esi,eax
c00050b6:	b8 11 00 00 00       	mov    eax,0x11
c00050bb:	85 f6                	test   esi,esi
c00050bd:	74 5e                	je     c000511d <f_chmod+0xa9>
c00050bf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050c3:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00050c7:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00050ca:	8d 44 24 20          	lea    eax,[esp+0x20]
c00050ce:	e8 27 eb ff ff       	call   c0003bfa <follow_path>
c00050d3:	85 c0                	test   eax,eax
c00050d5:	75 32                	jne    c0005109 <f_chmod+0x95>
c00050d7:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c00050db:	b8 06 00 00 00       	mov    eax,0x6
c00050e0:	80 e2 a0             	and    dl,0xa0
c00050e3:	75 24                	jne    c0005109 <f_chmod+0x95>
c00050e5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050e9:	8a 50 0b             	mov    dl,BYTE PTR [eax+0xb]
c00050ec:	31 d7                	xor    edi,edx
c00050ee:	21 fb                	and    ebx,edi
c00050f0:	83 e3 27             	and    ebx,0x27
c00050f3:	31 d3                	xor    ebx,edx
c00050f5:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c00050f8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050fc:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005100:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005104:	e8 81 de ff ff       	call   c0002f8a <sync_fs>
c0005109:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000510d:	83 ec 0c             	sub    esp,0xc
c0005110:	56                   	push   esi
c0005111:	e8 36 0d 00 00       	call   c0005e4c <ff_memfree>
c0005116:	83 c4 10             	add    esp,0x10
c0005119:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000511d:	83 c4 50             	add    esp,0x50
c0005120:	5b                   	pop    ebx
c0005121:	5e                   	pop    esi
c0005122:	5f                   	pop    edi
c0005123:	c3                   	ret    

c0005124 <f_utime>:
c0005124:	56                   	push   esi
c0005125:	b9 02 00 00 00       	mov    ecx,0x2
c000512a:	53                   	push   ebx
c000512b:	83 ec 54             	sub    esp,0x54
c000512e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005132:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0005136:	8d 44 24 60          	lea    eax,[esp+0x60]
c000513a:	e8 73 d5 ff ff       	call   c00026b2 <mount_volume>
c000513f:	85 c0                	test   eax,eax
c0005141:	0f 85 87 00 00 00    	jne    c00051ce <f_utime+0xaa>
c0005147:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000514b:	83 ec 0c             	sub    esp,0xc
c000514e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005152:	68 00 02 00 00       	push   0x200
c0005157:	e8 d8 0c 00 00       	call   c0005e34 <ff_memalloc>
c000515c:	83 c4 10             	add    esp,0x10
c000515f:	89 c3                	mov    ebx,eax
c0005161:	b8 11 00 00 00       	mov    eax,0x11
c0005166:	85 db                	test   ebx,ebx
c0005168:	74 64                	je     c00051ce <f_utime+0xaa>
c000516a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000516e:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0005172:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0005175:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005179:	e8 7c ea ff ff       	call   c0003bfa <follow_path>
c000517e:	85 c0                	test   eax,eax
c0005180:	75 38                	jne    c00051ba <f_utime+0x96>
c0005182:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0005186:	b8 06 00 00 00       	mov    eax,0x6
c000518b:	80 e2 a0             	and    dl,0xa0
c000518e:	75 2a                	jne    c00051ba <f_utime+0x96>
c0005190:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0005194:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0005198:	c1 e2 10             	shl    edx,0x10
c000519b:	09 c2                	or     edx,eax
c000519d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00051a1:	83 c0 16             	add    eax,0x16
c00051a4:	e8 70 ce ff ff       	call   c0002019 <st_dword>
c00051a9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00051ad:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00051b1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00051b5:	e8 d0 dd ff ff       	call   c0002f8a <sync_fs>
c00051ba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00051be:	83 ec 0c             	sub    esp,0xc
c00051c1:	53                   	push   ebx
c00051c2:	e8 85 0c 00 00       	call   c0005e4c <ff_memfree>
c00051c7:	83 c4 10             	add    esp,0x10
c00051ca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00051ce:	83 c4 54             	add    esp,0x54
c00051d1:	5b                   	pop    ebx
c00051d2:	5e                   	pop    esi
c00051d3:	c3                   	ret    

c00051d4 <f_getlabel>:
c00051d4:	55                   	push   ebp
c00051d5:	31 c9                	xor    ecx,ecx
c00051d7:	57                   	push   edi
c00051d8:	56                   	push   esi
c00051d9:	53                   	push   ebx
c00051da:	83 ec 5c             	sub    esp,0x5c
c00051dd:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00051e1:	8b 7c 24 74          	mov    edi,DWORD PTR [esp+0x74]
c00051e5:	8d 44 24 70          	lea    eax,[esp+0x70]
c00051e9:	e8 c4 d4 ff ff       	call   c00026b2 <mount_volume>
c00051ee:	85 c0                	test   eax,eax
c00051f0:	89 c3                	mov    ebx,eax
c00051f2:	0f 85 d9 00 00 00    	jne    c00052d1 <f_getlabel+0xfd>
c00051f8:	85 ff                	test   edi,edi
c00051fa:	0f 84 d1 00 00 00    	je     c00052d1 <f_getlabel+0xfd>
c0005200:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0005208:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000520c:	31 d2                	xor    edx,edx
c000520e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005212:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005216:	e8 1c e3 ff ff       	call   c0003537 <dir_sdi>
c000521b:	85 c0                	test   eax,eax
c000521d:	89 c3                	mov    ebx,eax
c000521f:	0f 85 a2 00 00 00    	jne    c00052c7 <f_getlabel+0xf3>
c0005225:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005229:	ba 01 00 00 00       	mov    edx,0x1
c000522e:	e8 fe e6 ff ff       	call   c0003931 <dir_read>
c0005233:	85 c0                	test   eax,eax
c0005235:	89 c3                	mov    ebx,eax
c0005237:	0f 85 8a 00 00 00    	jne    c00052c7 <f_getlabel+0xf3>
c000523d:	31 f6                	xor    esi,esi
c000523f:	31 d2                	xor    edx,edx
c0005241:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005245:	8d 6a 01             	lea    ebp,[edx+0x1]
c0005248:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000524c:	0f b6 0c 10          	movzx  ecx,BYTE PTR [eax+edx*1]
c0005250:	66 89 4c 24 0c       	mov    WORD PTR [esp+0xc],cx
c0005255:	89 c8                	mov    eax,ecx
c0005257:	e8 13 ce ff ff       	call   c000206f <dbc_1st>
c000525c:	85 c0                	test   eax,eax
c000525e:	74 19                	je     c0005279 <f_getlabel+0xa5>
c0005260:	83 fd 0b             	cmp    ebp,0xb
c0005263:	74 14                	je     c0005279 <f_getlabel+0xa5>
c0005265:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005269:	c1 e1 08             	shl    ecx,0x8
c000526c:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0005270:	8d 6a 02             	lea    ebp,[edx+0x2]
c0005273:	09 c1                	or     ecx,eax
c0005275:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005279:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000527e:	52                   	push   edx
c000527f:	52                   	push   edx
c0005280:	68 b5 01 00 00       	push   0x1b5
c0005285:	50                   	push   eax
c0005286:	e8 75 0c 00 00       	call   c0005f00 <ff_oem2uni>
c000528b:	83 c4 10             	add    esp,0x10
c000528e:	0f b7 c0             	movzx  eax,ax
c0005291:	85 c0                	test   eax,eax
c0005293:	74 1f                	je     c00052b4 <f_getlabel+0xe0>
c0005295:	8d 14 37             	lea    edx,[edi+esi*1]
c0005298:	b9 04 00 00 00       	mov    ecx,0x4
c000529d:	e8 ab ce ff ff       	call   c000214d <put_utf>
c00052a2:	0f b6 c0             	movzx  eax,al
c00052a5:	85 c0                	test   eax,eax
c00052a7:	74 0b                	je     c00052b4 <f_getlabel+0xe0>
c00052a9:	01 c6                	add    esi,eax
c00052ab:	83 fd 0b             	cmp    ebp,0xb
c00052ae:	74 06                	je     c00052b6 <f_getlabel+0xe2>
c00052b0:	89 ea                	mov    edx,ebp
c00052b2:	eb 8d                	jmp    c0005241 <f_getlabel+0x6d>
c00052b4:	31 f6                	xor    esi,esi
c00052b6:	01 fe                	add    esi,edi
c00052b8:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00052bb:	39 f7                	cmp    edi,esi
c00052bd:	74 12                	je     c00052d1 <f_getlabel+0xfd>
c00052bf:	4e                   	dec    esi
c00052c0:	80 3e 20             	cmp    BYTE PTR [esi],0x20
c00052c3:	74 f3                	je     c00052b8 <f_getlabel+0xe4>
c00052c5:	eb 0a                	jmp    c00052d1 <f_getlabel+0xfd>
c00052c7:	83 fb 04             	cmp    ebx,0x4
c00052ca:	75 05                	jne    c00052d1 <f_getlabel+0xfd>
c00052cc:	c6 07 00             	mov    BYTE PTR [edi],0x0
c00052cf:	31 db                	xor    ebx,ebx
c00052d1:	85 db                	test   ebx,ebx
c00052d3:	75 49                	jne    c000531e <f_getlabel+0x14a>
c00052d5:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c00052da:	74 42                	je     c000531e <f_getlabel+0x14a>
c00052dc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00052e0:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00052e3:	e8 6d d2 ff ff       	call   c0002555 <move_window>
c00052e8:	85 c0                	test   eax,eax
c00052ea:	89 c3                	mov    ebx,eax
c00052ec:	75 30                	jne    c000531e <f_getlabel+0x14a>
c00052ee:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00052f2:	b8 43 00 00 00       	mov    eax,0x43
c00052f7:	0f b6 0a             	movzx  ecx,BYTE PTR [edx]
c00052fa:	83 f9 03             	cmp    ecx,0x3
c00052fd:	74 10                	je     c000530f <f_getlabel+0x13b>
c00052ff:	83 f9 04             	cmp    ecx,0x4
c0005302:	b8 64 00 00 00       	mov    eax,0x64
c0005307:	b9 27 00 00 00       	mov    ecx,0x27
c000530c:	0f 45 c1             	cmovne eax,ecx
c000530f:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0005313:	e8 e5 cc ff ff       	call   c0001ffd <ld_dword>
c0005318:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c000531c:	89 07                	mov    DWORD PTR [edi],eax
c000531e:	83 c4 5c             	add    esp,0x5c
c0005321:	89 d8                	mov    eax,ebx
c0005323:	5b                   	pop    ebx
c0005324:	5e                   	pop    esi
c0005325:	5f                   	pop    edi
c0005326:	5d                   	pop    ebp
c0005327:	c3                   	ret    

c0005328 <f_setlabel>:
c0005328:	57                   	push   edi
c0005329:	b9 02 00 00 00       	mov    ecx,0x2
c000532e:	56                   	push   esi
c000532f:	53                   	push   ebx
c0005330:	83 ec 50             	sub    esp,0x50
c0005333:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005337:	8d 44 24 60          	lea    eax,[esp+0x60]
c000533b:	e8 72 d3 ff ff       	call   c00026b2 <mount_volume>
c0005340:	85 c0                	test   eax,eax
c0005342:	89 c6                	mov    esi,eax
c0005344:	0f 85 65 01 00 00    	jne    c00054af <f_setlabel+0x187>
c000534a:	b9 0b 00 00 00       	mov    ecx,0xb
c000534f:	ba 20 00 00 00       	mov    edx,0x20
c0005354:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0005358:	31 db                	xor    ebx,ebx
c000535a:	e8 d2 cc ff ff       	call   c0002031 <mem_set>
c000535f:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0005363:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0005366:	76 5d                	jbe    c00053c5 <f_setlabel+0x9d>
c0005368:	8d 44 24 60          	lea    eax,[esp+0x60]
c000536c:	e8 04 cd ff ff       	call   c0002075 <tchar2uni>
c0005371:	3d ff ff 00 00       	cmp    eax,0xffff
c0005376:	76 0a                	jbe    c0005382 <f_setlabel+0x5a>
c0005378:	be 06 00 00 00       	mov    esi,0x6
c000537d:	e9 2d 01 00 00       	jmp    c00054af <f_setlabel+0x187>
c0005382:	83 ec 0c             	sub    esp,0xc
c0005385:	50                   	push   eax
c0005386:	e8 ed 0b 00 00       	call   c0005f78 <ff_wtoupper>
c000538b:	5a                   	pop    edx
c000538c:	59                   	pop    ecx
c000538d:	68 b5 01 00 00       	push   0x1b5
c0005392:	50                   	push   eax
c0005393:	e8 cc 0a 00 00       	call   c0005e64 <ff_uni2oem>
c0005398:	83 c4 10             	add    esp,0x10
c000539b:	0f b7 f0             	movzx  esi,ax
c000539e:	85 f6                	test   esi,esi
c00053a0:	89 f7                	mov    edi,esi
c00053a2:	74 d4                	je     c0005378 <f_setlabel+0x50>
c00053a4:	89 f2                	mov    edx,esi
c00053a6:	b8 90 2a 02 c0       	mov    eax,0xc0022a90
c00053ab:	e8 ae cc ff ff       	call   c000205e <chk_chr>
c00053b0:	85 c0                	test   eax,eax
c00053b2:	75 c4                	jne    c0005378 <f_setlabel+0x50>
c00053b4:	81 fe ff 00 00 00    	cmp    esi,0xff
c00053ba:	0f 87 c9 00 00 00    	ja     c0005489 <f_setlabel+0x161>
c00053c0:	e9 e0 00 00 00       	jmp    c00054a5 <f_setlabel+0x17d>
c00053c5:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c00053ca:	74 ac                	je     c0005378 <f_setlabel+0x50>
c00053cc:	85 db                	test   ebx,ebx
c00053ce:	74 0e                	je     c00053de <f_setlabel+0xb6>
c00053d0:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c00053d5:	8d 43 ff             	lea    eax,[ebx-0x1]
c00053d8:	75 04                	jne    c00053de <f_setlabel+0xb6>
c00053da:	89 c3                	mov    ebx,eax
c00053dc:	eb ee                	jmp    c00053cc <f_setlabel+0xa4>
c00053de:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00053e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00053ea:	31 d2                	xor    edx,edx
c00053ec:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00053f0:	8d 44 24 20          	lea    eax,[esp+0x20]
c00053f4:	e8 3e e1 ff ff       	call   c0003537 <dir_sdi>
c00053f9:	85 c0                	test   eax,eax
c00053fb:	89 c6                	mov    esi,eax
c00053fd:	0f 85 ac 00 00 00    	jne    c00054af <f_setlabel+0x187>
c0005403:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005407:	ba 01 00 00 00       	mov    edx,0x1
c000540c:	e8 20 e5 ff ff       	call   c0003931 <dir_read>
c0005411:	85 c0                	test   eax,eax
c0005413:	75 18                	jne    c000542d <f_setlabel+0x105>
c0005415:	85 db                	test   ebx,ebx
c0005417:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000541b:	74 0b                	je     c0005428 <f_setlabel+0x100>
c000541d:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005421:	b9 0b 00 00 00       	mov    ecx,0xb
c0005426:	eb 47                	jmp    c000546f <f_setlabel+0x147>
c0005428:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c000542b:	eb 47                	jmp    c0005474 <f_setlabel+0x14c>
c000542d:	83 f8 04             	cmp    eax,0x4
c0005430:	75 53                	jne    c0005485 <f_setlabel+0x15d>
c0005432:	85 db                	test   ebx,ebx
c0005434:	74 79                	je     c00054af <f_setlabel+0x187>
c0005436:	8d 44 24 20          	lea    eax,[esp+0x20]
c000543a:	ba 01 00 00 00       	mov    edx,0x1
c000543f:	e8 88 e4 ff ff       	call   c00038cc <dir_alloc>
c0005444:	85 c0                	test   eax,eax
c0005446:	89 c6                	mov    esi,eax
c0005448:	75 65                	jne    c00054af <f_setlabel+0x187>
c000544a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000544e:	b9 20 00 00 00       	mov    ecx,0x20
c0005453:	31 d2                	xor    edx,edx
c0005455:	e8 d7 cb ff ff       	call   c0002031 <mem_set>
c000545a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000545e:	b9 0b 00 00 00       	mov    ecx,0xb
c0005463:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005467:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c000546b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000546f:	e8 a8 cb ff ff       	call   c000201c <mem_cpy>
c0005474:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005478:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000547c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005480:	e8 05 db ff ff       	call   c0002f8a <sync_fs>
c0005485:	89 c6                	mov    esi,eax
c0005487:	eb 26                	jmp    c00054af <f_setlabel+0x187>
c0005489:	83 fb 09             	cmp    ebx,0x9
c000548c:	0f 87 e6 fe ff ff    	ja     c0005378 <f_setlabel+0x50>
c0005492:	89 f0                	mov    eax,esi
c0005494:	88 64 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],ah
c0005498:	43                   	inc    ebx
c0005499:	89 f8                	mov    eax,edi
c000549b:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c000549f:	43                   	inc    ebx
c00054a0:	e9 ba fe ff ff       	jmp    c000535f <f_setlabel+0x37>
c00054a5:	83 fb 0a             	cmp    ebx,0xa
c00054a8:	76 ef                	jbe    c0005499 <f_setlabel+0x171>
c00054aa:	e9 c9 fe ff ff       	jmp    c0005378 <f_setlabel+0x50>
c00054af:	83 c4 50             	add    esp,0x50
c00054b2:	89 f0                	mov    eax,esi
c00054b4:	5b                   	pop    ebx
c00054b5:	5e                   	pop    esi
c00054b6:	5f                   	pop    edi
c00054b7:	c3                   	ret    

c00054b8 <f_expand>:
c00054b8:	55                   	push   ebp
c00054b9:	57                   	push   edi
c00054ba:	56                   	push   esi
c00054bb:	53                   	push   ebx
c00054bc:	83 ec 2c             	sub    esp,0x2c
c00054bf:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00054c3:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00054c7:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00054cb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00054cf:	89 d8                	mov    eax,ebx
c00054d1:	e8 d6 cf ff ff       	call   c00024ac <validate>
c00054d6:	85 c0                	test   eax,eax
c00054d8:	89 c6                	mov    esi,eax
c00054da:	0f 85 3b 01 00 00    	jne    c000561b <f_expand+0x163>
c00054e0:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c00054e4:	85 f6                	test   esi,esi
c00054e6:	0f 85 2f 01 00 00    	jne    c000561b <f_expand+0x163>
c00054ec:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c00054f1:	75 0a                	jne    c00054fd <f_expand+0x45>
c00054f3:	be 07 00 00 00       	mov    esi,0x7
c00054f8:	e9 1e 01 00 00       	jmp    c000561b <f_expand+0x163>
c00054fd:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c0005501:	75 f0                	jne    c00054f3 <f_expand+0x3b>
c0005503:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0005507:	74 ea                	je     c00054f3 <f_expand+0x3b>
c0005509:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000550d:	0f b7 79 0a          	movzx  edi,WORD PTR [ecx+0xa]
c0005511:	c1 e7 09             	shl    edi,0x9
c0005514:	8d 47 ff             	lea    eax,[edi-0x1]
c0005517:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c000551b:	0f 95 c0             	setne  al
c000551e:	31 d2                	xor    edx,edx
c0005520:	0f b6 c0             	movzx  eax,al
c0005523:	89 c5                	mov    ebp,eax
c0005525:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005529:	f7 f7                	div    edi
c000552b:	8b 79 10             	mov    edi,DWORD PTR [ecx+0x10]
c000552e:	01 e8                	add    eax,ebp
c0005530:	83 ff 01             	cmp    edi,0x1
c0005533:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005537:	76 05                	jbe    c000553e <f_expand+0x86>
c0005539:	39 79 18             	cmp    DWORD PTR [ecx+0x18],edi
c000553c:	77 05                	ja     c0005543 <f_expand+0x8b>
c000553e:	bf 02 00 00 00       	mov    edi,0x2
c0005543:	89 3c 24             	mov    DWORD PTR [esp],edi
c0005546:	89 fd                	mov    ebp,edi
c0005548:	31 c9                	xor    ecx,ecx
c000554a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000554e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005550:	89 ea                	mov    edx,ebp
c0005552:	45                   	inc    ebp
c0005553:	e8 da de ff ff       	call   c0003432 <get_fat.isra.2>
c0005558:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000555c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005560:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c0005563:	77 05                	ja     c000556a <f_expand+0xb2>
c0005565:	bd 02 00 00 00       	mov    ebp,0x2
c000556a:	83 f8 01             	cmp    eax,0x1
c000556d:	74 20                	je     c000558f <f_expand+0xd7>
c000556f:	83 f8 ff             	cmp    eax,0xffffffff
c0005572:	74 25                	je     c0005599 <f_expand+0xe1>
c0005574:	85 c0                	test   eax,eax
c0005576:	75 09                	jne    c0005581 <f_expand+0xc9>
c0005578:	41                   	inc    ecx
c0005579:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c000557d:	75 07                	jne    c0005586 <f_expand+0xce>
c000557f:	eb 1f                	jmp    c00055a0 <f_expand+0xe8>
c0005581:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0005584:	31 c9                	xor    ecx,ecx
c0005586:	39 fd                	cmp    ebp,edi
c0005588:	75 c0                	jne    c000554a <f_expand+0x92>
c000558a:	e9 64 ff ff ff       	jmp    c00054f3 <f_expand+0x3b>
c000558f:	be 02 00 00 00       	mov    esi,0x2
c0005594:	e9 82 00 00 00       	jmp    c000561b <f_expand+0x163>
c0005599:	be 01 00 00 00       	mov    esi,0x1
c000559e:	eb 7b                	jmp    c000561b <f_expand+0x163>
c00055a0:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00055a5:	74 2b                	je     c00055d2 <f_expand+0x11a>
c00055a7:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00055aa:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c00055ae:	85 ed                	test   ebp,ebp
c00055b0:	74 24                	je     c00055d6 <f_expand+0x11e>
c00055b2:	83 c9 ff             	or     ecx,0xffffffff
c00055b5:	83 fd 01             	cmp    ebp,0x1
c00055b8:	74 03                	je     c00055bd <f_expand+0x105>
c00055ba:	8d 4f 01             	lea    ecx,[edi+0x1]
c00055bd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00055c1:	89 fa                	mov    edx,edi
c00055c3:	e8 e7 d3 ff ff       	call   c00029af <put_fat>
c00055c8:	85 c0                	test   eax,eax
c00055ca:	75 4d                	jne    c0005619 <f_expand+0x161>
c00055cc:	89 f8                	mov    eax,edi
c00055ce:	4d                   	dec    ebp
c00055cf:	47                   	inc    edi
c00055d0:	eb dc                	jmp    c00055ae <f_expand+0xf6>
c00055d2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00055d5:	48                   	dec    eax
c00055d6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00055da:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00055df:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c00055e2:	74 37                	je     c000561b <f_expand+0x163>
c00055e4:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00055e7:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00055ea:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055ee:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00055f1:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00055f4:	83 c8 40             	or     eax,0x40
c00055f7:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00055fa:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c00055fd:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0005600:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0005603:	39 c8                	cmp    eax,ecx
c0005605:	77 14                	ja     c000561b <f_expand+0x163>
c0005607:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000560b:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000560e:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0005611:	83 c8 01             	or     eax,0x1
c0005614:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0005617:	eb 02                	jmp    c000561b <f_expand+0x163>
c0005619:	89 c6                	mov    esi,eax
c000561b:	83 c4 2c             	add    esp,0x2c
c000561e:	89 f0                	mov    eax,esi
c0005620:	5b                   	pop    ebx
c0005621:	5e                   	pop    esi
c0005622:	5f                   	pop    edi
c0005623:	5d                   	pop    ebp
c0005624:	c3                   	ret    

c0005625 <f_mkfs>:
c0005625:	55                   	push   ebp
c0005626:	57                   	push   edi
c0005627:	56                   	push   esi
c0005628:	be 0b 00 00 00       	mov    esi,0xb
c000562d:	53                   	push   ebx
c000562e:	83 ec 5c             	sub    esp,0x5c
c0005631:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005635:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0005639:	8b 6c 24 78          	mov    ebp,DWORD PTR [esp+0x78]
c000563d:	e8 1e ce ff ff       	call   c0002460 <get_ldnumber>
c0005642:	85 c0                	test   eax,eax
c0005644:	0f 88 e0 07 00 00    	js     c0005e2a <f_mkfs+0x805>
c000564a:	8b 14 85 a0 94 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd6b60]
c0005651:	85 d2                	test   edx,edx
c0005653:	74 03                	je     c0005658 <f_mkfs+0x33>
c0005655:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0005658:	85 db                	test   ebx,ebx
c000565a:	75 05                	jne    c0005661 <f_mkfs+0x3c>
c000565c:	bb 80 2a 02 c0       	mov    ebx,0xc0022a80
c0005661:	0f b6 c0             	movzx  eax,al
c0005664:	83 ec 0c             	sub    esp,0xc
c0005667:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000566b:	be 03 00 00 00       	mov    esi,0x3
c0005670:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005674:	e8 29 c9 ff ff       	call   c0001fa2 <disk_initialize>
c0005679:	83 c4 10             	add    esp,0x10
c000567c:	a8 01                	test   al,0x1
c000567e:	0f 85 a6 07 00 00    	jne    c0005e2a <f_mkfs+0x805>
c0005684:	a8 04                	test   al,0x4
c0005686:	be 0a 00 00 00       	mov    esi,0xa
c000568b:	0f 85 99 07 00 00    	jne    c0005e2a <f_mkfs+0x805>
c0005691:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0005694:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0005698:	85 c0                	test   eax,eax
c000569a:	75 20                	jne    c00056bc <f_mkfs+0x97>
c000569c:	51                   	push   ecx
c000569d:	8d 44 24 44          	lea    eax,[esp+0x44]
c00056a1:	50                   	push   eax
c00056a2:	6a 03                	push   0x3
c00056a4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00056a8:	e8 24 c9 ff ff       	call   c0001fd1 <disk_ioctl>
c00056ad:	83 c4 10             	add    esp,0x10
c00056b0:	85 c0                	test   eax,eax
c00056b2:	74 08                	je     c00056bc <f_mkfs+0x97>
c00056b4:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00056bc:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00056c0:	8d 42 ff             	lea    eax,[edx-0x1]
c00056c3:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00056c8:	77 04                	ja     c00056ce <f_mkfs+0xa9>
c00056ca:	85 c2                	test   edx,eax
c00056cc:	74 08                	je     c00056d6 <f_mkfs+0xb1>
c00056ce:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00056d6:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00056d9:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00056dd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00056e1:	48                   	dec    eax
c00056e2:	3c 01                	cmp    al,0x1
c00056e4:	76 05                	jbe    c00056eb <f_mkfs+0xc6>
c00056e6:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c00056eb:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00056ee:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00056f2:	48                   	dec    eax
c00056f3:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00056f8:	77 15                	ja     c000570f <f_mkfs+0xea>
c00056fa:	f6 44 24 10 0f       	test   BYTE PTR [esp+0x10],0xf
c00056ff:	b8 00 02 00 00       	mov    eax,0x200
c0005704:	0f 44 44 24 10       	cmove  eax,DWORD PTR [esp+0x10]
c0005709:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000570d:	eb 08                	jmp    c0005717 <f_mkfs+0xf2>
c000570f:	c7 44 24 10 00 02 00 00 	mov    DWORD PTR [esp+0x10],0x200
c0005717:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c000571a:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c0005720:	77 0f                	ja     c0005731 <f_mkfs+0x10c>
c0005722:	8d 47 ff             	lea    eax,[edi-0x1]
c0005725:	85 f8                	test   eax,edi
c0005727:	b8 00 00 00 00       	mov    eax,0x0
c000572c:	0f 45 f8             	cmovne edi,eax
c000572f:	eb 02                	jmp    c0005733 <f_mkfs+0x10e>
c0005731:	31 ff                	xor    edi,edi
c0005733:	81 7c 24 7c ff 01 00 00 	cmp    DWORD PTR [esp+0x7c],0x1ff
c000573b:	77 0a                	ja     c0005747 <f_mkfs+0x122>
c000573d:	be 11 00 00 00       	mov    esi,0x11
c0005742:	e9 e3 06 00 00       	jmp    c0005e2a <f_mkfs+0x805>
c0005747:	85 ed                	test   ebp,ebp
c0005749:	8b 33                	mov    esi,DWORD PTR [ebx]
c000574b:	89 eb                	mov    ebx,ebp
c000574d:	75 1e                	jne    c000576d <f_mkfs+0x148>
c000574f:	83 ec 0c             	sub    esp,0xc
c0005752:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0005759:	25 00 fe ff ff       	and    eax,0xfffffe00
c000575e:	50                   	push   eax
c000575f:	e8 d0 06 00 00       	call   c0005e34 <ff_memalloc>
c0005764:	83 c4 10             	add    esp,0x10
c0005767:	85 c0                	test   eax,eax
c0005769:	89 c3                	mov    ebx,eax
c000576b:	74 d0                	je     c000573d <f_mkfs+0x118>
c000576d:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0005775:	52                   	push   edx
c0005776:	8d 44 24 48          	lea    eax,[esp+0x48]
c000577a:	50                   	push   eax
c000577b:	6a 01                	push   0x1
c000577d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005781:	e8 4b c8 ff ff       	call   c0001fd1 <disk_ioctl>
c0005786:	83 c4 10             	add    esp,0x10
c0005789:	85 c0                	test   eax,eax
c000578b:	0f 85 42 06 00 00    	jne    c0005dd3 <f_mkfs+0x7ae>
c0005791:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005799:	89 f0                	mov    eax,esi
c000579b:	83 e0 08             	and    eax,0x8
c000579e:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00057a2:	75 18                	jne    c00057bc <f_mkfs+0x197>
c00057a4:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00057a8:	83 f8 3f             	cmp    eax,0x3f
c00057ab:	76 0f                	jbe    c00057bc <f_mkfs+0x197>
c00057ad:	c7 44 24 14 3f 00 00 00 	mov    DWORD PTR [esp+0x14],0x3f
c00057b5:	83 e8 3f             	sub    eax,0x3f
c00057b8:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00057bc:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00057c0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00057c4:	83 f8 7f             	cmp    eax,0x7f
c00057c7:	0f 86 5f 02 00 00    	jbe    c0005a2c <f_mkfs+0x407>
c00057cd:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c00057d3:	b9 80 00 00 00       	mov    ecx,0x80
c00057d8:	77 05                	ja     c00057df <f_mkfs+0x1ba>
c00057da:	c1 ef 09             	shr    edi,0x9
c00057dd:	89 f9                	mov    ecx,edi
c00057df:	89 f0                	mov    eax,esi
c00057e1:	89 f7                	mov    edi,esi
c00057e3:	83 e0 01             	and    eax,0x1
c00057e6:	83 e7 02             	and    edi,0x2
c00057e9:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c00057ed:	0f b6 c0             	movzx  eax,al
c00057f0:	74 0a                	je     c00057fc <f_mkfs+0x1d7>
c00057f2:	85 c0                	test   eax,eax
c00057f4:	0f 84 53 01 00 00    	je     c000594d <f_mkfs+0x328>
c00057fa:	eb 37                	jmp    c0005833 <f_mkfs+0x20e>
c00057fc:	85 c0                	test   eax,eax
c00057fe:	be 13 00 00 00       	mov    esi,0x13
c0005803:	75 2e                	jne    c0005833 <f_mkfs+0x20e>
c0005805:	e9 e0 05 00 00       	jmp    c0005dea <f_mkfs+0x7c5>
c000580a:	83 f8 02             	cmp    eax,0x2
c000580d:	0f 85 11 02 00 00    	jne    c0005a24 <f_mkfs+0x3ff>
c0005813:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005819:	0f 86 e8 01 00 00    	jbe    c0005a07 <f_mkfs+0x3e2>
c000581f:	85 c9                	test   ecx,ecx
c0005821:	0f 85 d5 05 00 00    	jne    c0005dfc <f_mkfs+0x7d7>
c0005827:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c000582a:	83 f9 40             	cmp    ecx,0x40
c000582d:	0f 87 d9 05 00 00    	ja     c0005e0c <f_mkfs+0x7e7>
c0005833:	85 c9                	test   ecx,ecx
c0005835:	89 cf                	mov    edi,ecx
c0005837:	75 1c                	jne    c0005855 <f_mkfs+0x230>
c0005839:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000583d:	b8 60 2a 02 c0       	mov    eax,0xc0022a60
c0005842:	bf 01 00 00 00       	mov    edi,0x1
c0005847:	c1 ee 0c             	shr    esi,0xc
c000584a:	0f b7 10             	movzx  edx,WORD PTR [eax]
c000584d:	85 d2                	test   edx,edx
c000584f:	0f 85 67 01 00 00    	jne    c00059bc <f_mkfs+0x397>
c0005855:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005859:	31 d2                	xor    edx,edx
c000585b:	f7 f7                	div    edi
c000585d:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005862:	0f 86 66 01 00 00    	jbe    c00059ce <f_mkfs+0x3a9>
c0005868:	c6 44 24 0b 02       	mov    BYTE PTR [esp+0xb],0x2
c000586d:	83 c0 02             	add    eax,0x2
c0005870:	01 c0                	add    eax,eax
c0005872:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c000587a:	05 ff 01 00 00       	add    eax,0x1ff
c000587f:	c1 e8 09             	shr    eax,0x9
c0005882:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005886:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000588a:	c1 e0 05             	shl    eax,0x5
c000588d:	c1 e8 09             	shr    eax,0x9
c0005890:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0005894:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0005899:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000589d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00058a1:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c00058a5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00058a9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00058ad:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c00058b2:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c00058b6:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00058ba:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00058be:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00058c2:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00058c6:	8d 74 10 ff          	lea    esi,[eax+edx*1-0x1]
c00058ca:	f7 d8                	neg    eax
c00058cc:	21 c6                	and    esi,eax
c00058ce:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00058d3:	29 d6                	sub    esi,edx
c00058d5:	83 f8 03             	cmp    eax,0x3
c00058d8:	0f 85 03 01 00 00    	jne    c00059e1 <f_mkfs+0x3bc>
c00058de:	01 74 24 24          	add    DWORD PTR [esp+0x24],esi
c00058e2:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c00058e6:	89 f8                	mov    eax,edi
c00058e8:	c1 e0 04             	shl    eax,0x4
c00058eb:	2b 44 24 14          	sub    eax,DWORD PTR [esp+0x14]
c00058ef:	03 44 24 34          	add    eax,DWORD PTR [esp+0x34]
c00058f3:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c00058f7:	0f 82 2f 01 00 00    	jb     c0005a2c <f_mkfs+0x407>
c00058fd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005901:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c0005905:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0005909:	89 c2                	mov    edx,eax
c000590b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000590f:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c0005914:	29 c2                	sub    edx,eax
c0005916:	89 d0                	mov    eax,edx
c0005918:	31 d2                	xor    edx,edx
c000591a:	f7 f7                	div    edi
c000591c:	89 c6                	mov    esi,eax
c000591e:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005923:	83 f8 03             	cmp    eax,0x3
c0005926:	0f 85 de fe ff ff    	jne    c000580a <f_mkfs+0x1e5>
c000592c:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005932:	0f 87 03 01 00 00    	ja     c0005a3b <f_mkfs+0x416>
c0005938:	85 c9                	test   ecx,ecx
c000593a:	0f 85 ec 00 00 00    	jne    c0005a2c <f_mkfs+0x407>
c0005940:	83 ff 01             	cmp    edi,0x1
c0005943:	0f 86 e3 00 00 00    	jbe    c0005a2c <f_mkfs+0x407>
c0005949:	d1 ef                	shr    edi,1
c000594b:	89 f9                	mov    ecx,edi
c000594d:	85 c9                	test   ecx,ecx
c000594f:	89 ce                	mov    esi,ecx
c0005951:	75 25                	jne    c0005978 <f_mkfs+0x353>
c0005953:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005957:	b8 70 2a 02 c0       	mov    eax,0xc0022a70
c000595c:	b9 01 00 00 00       	mov    ecx,0x1
c0005961:	c1 ee 11             	shr    esi,0x11
c0005964:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0005967:	85 d2                	test   edx,edx
c0005969:	74 0b                	je     c0005976 <f_mkfs+0x351>
c000596b:	83 c0 02             	add    eax,0x2
c000596e:	39 f2                	cmp    edx,esi
c0005970:	77 04                	ja     c0005976 <f_mkfs+0x351>
c0005972:	01 c9                	add    ecx,ecx
c0005974:	eb ee                	jmp    c0005964 <f_mkfs+0x33f>
c0005976:	31 f6                	xor    esi,esi
c0005978:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000597c:	31 d2                	xor    edx,edx
c000597e:	f7 f1                	div    ecx
c0005980:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0005987:	2d f6 ff 00 00       	sub    eax,0xfff6
c000598c:	c1 ea 09             	shr    edx,0x9
c000598f:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0005994:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0005998:	0f 87 8e 00 00 00    	ja     c0005a2c <f_mkfs+0x407>
c000599e:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c00059a6:	89 cf                	mov    edi,ecx
c00059a8:	89 f1                	mov    ecx,esi
c00059aa:	c7 44 24 24 20 00 00 00 	mov    DWORD PTR [esp+0x24],0x20
c00059b2:	c6 44 24 0b 03       	mov    BYTE PTR [esp+0xb],0x3
c00059b7:	e9 d8 fe ff ff       	jmp    c0005894 <f_mkfs+0x26f>
c00059bc:	83 c0 02             	add    eax,0x2
c00059bf:	39 f2                	cmp    edx,esi
c00059c1:	0f 87 8e fe ff ff    	ja     c0005855 <f_mkfs+0x230>
c00059c7:	01 ff                	add    edi,edi
c00059c9:	e9 7c fe ff ff       	jmp    c000584a <f_mkfs+0x225>
c00059ce:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c00059d3:	8d 04 40             	lea    eax,[eax+eax*2]
c00059d6:	40                   	inc    eax
c00059d7:	d1 e8                	shr    eax,1
c00059d9:	83 c0 03             	add    eax,0x3
c00059dc:	e9 91 fe ff ff       	jmp    c0005872 <f_mkfs+0x24d>
c00059e1:	31 d2                	xor    edx,edx
c00059e3:	89 f0                	mov    eax,esi
c00059e5:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00059e9:	85 d2                	test   edx,edx
c00059eb:	74 09                	je     c00059f6 <f_mkfs+0x3d1>
c00059ed:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c00059f1:	4e                   	dec    esi
c00059f2:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c00059f6:	89 f0                	mov    eax,esi
c00059f8:	31 d2                	xor    edx,edx
c00059fa:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00059fe:	01 44 24 18          	add    DWORD PTR [esp+0x18],eax
c0005a02:	e9 df fe ff ff       	jmp    c00058e6 <f_mkfs+0x2c1>
c0005a07:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c0005a0d:	77 2c                	ja     c0005a3b <f_mkfs+0x416>
c0005a0f:	85 c9                	test   ecx,ecx
c0005a11:	75 19                	jne    c0005a2c <f_mkfs+0x407>
c0005a13:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005a16:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005a1c:	0f 86 11 fe ff ff    	jbe    c0005833 <f_mkfs+0x20e>
c0005a22:	eb 08                	jmp    c0005a2c <f_mkfs+0x407>
c0005a24:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c0005a2a:	76 0a                	jbe    c0005a36 <f_mkfs+0x411>
c0005a2c:	be 0e 00 00 00       	mov    esi,0xe
c0005a31:	e9 b4 03 00 00       	jmp    c0005dea <f_mkfs+0x7c5>
c0005a36:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c0005a3b:	31 d2                	xor    edx,edx
c0005a3d:	b9 00 02 00 00       	mov    ecx,0x200
c0005a42:	89 d8                	mov    eax,ebx
c0005a44:	e8 e8 c5 ff ff       	call   c0002031 <mem_set>
c0005a49:	b9 0b 00 00 00       	mov    ecx,0xb
c0005a4e:	ba 12 2a 02 c0       	mov    edx,0xc0022a12
c0005a53:	89 d8                	mov    eax,ebx
c0005a55:	e8 c2 c5 ff ff       	call   c000201c <mem_cpy>
c0005a5a:	8d 43 0b             	lea    eax,[ebx+0xb]
c0005a5d:	ba 00 02 00 00       	mov    edx,0x200
c0005a62:	e8 ae c5 ff ff       	call   c0002015 <st_word>
c0005a67:	0f b7 54 24 24       	movzx  edx,WORD PTR [esp+0x24]
c0005a6c:	89 f8                	mov    eax,edi
c0005a6e:	88 43 0d             	mov    BYTE PTR [ebx+0xd],al
c0005a71:	8d 43 0e             	lea    eax,[ebx+0xe]
c0005a74:	e8 9c c5 ff ff       	call   c0002015 <st_word>
c0005a79:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c0005a7d:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0005a80:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005a85:	83 f8 03             	cmp    eax,0x3
c0005a88:	b8 00 00 00 00       	mov    eax,0x0
c0005a8d:	0f 45 44 24 10       	cmovne eax,DWORD PTR [esp+0x10]
c0005a92:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005a96:	8d 43 11             	lea    eax,[ebx+0x11]
c0005a99:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005a9d:	e8 73 c5 ff ff       	call   c0002015 <st_word>
c0005aa2:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0005aa6:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0005aac:	77 0a                	ja     c0005ab8 <f_mkfs+0x493>
c0005aae:	8d 43 13             	lea    eax,[ebx+0x13]
c0005ab1:	e8 5f c5 ff ff       	call   c0002015 <st_word>
c0005ab6:	eb 08                	jmp    c0005ac0 <f_mkfs+0x49b>
c0005ab8:	8d 43 20             	lea    eax,[ebx+0x20]
c0005abb:	e8 59 c5 ff ff       	call   c0002019 <st_dword>
c0005ac0:	c6 43 15 f8          	mov    BYTE PTR [ebx+0x15],0xf8
c0005ac4:	8d 43 18             	lea    eax,[ebx+0x18]
c0005ac7:	ba 3f 00 00 00       	mov    edx,0x3f
c0005acc:	e8 44 c5 ff ff       	call   c0002015 <st_word>
c0005ad1:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0005ad4:	ba ff 00 00 00       	mov    edx,0xff
c0005ad9:	e8 37 c5 ff ff       	call   c0002015 <st_word>
c0005ade:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005ae2:	8d 43 1c             	lea    eax,[ebx+0x1c]
c0005ae5:	e8 2f c5 ff ff       	call   c0002019 <st_dword>
c0005aea:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005aef:	83 f8 03             	cmp    eax,0x3
c0005af2:	75 57                	jne    c0005b4b <f_mkfs+0x526>
c0005af4:	8d 43 43             	lea    eax,[ebx+0x43]
c0005af7:	ba 00 00 21 50       	mov    edx,0x50210000
c0005afc:	e8 18 c5 ff ff       	call   c0002019 <st_dword>
c0005b01:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0005b05:	8d 43 24             	lea    eax,[ebx+0x24]
c0005b08:	e8 0c c5 ff ff       	call   c0002019 <st_dword>
c0005b0d:	8d 43 2c             	lea    eax,[ebx+0x2c]
c0005b10:	ba 02 00 00 00       	mov    edx,0x2
c0005b15:	e8 ff c4 ff ff       	call   c0002019 <st_dword>
c0005b1a:	8d 43 30             	lea    eax,[ebx+0x30]
c0005b1d:	ba 01 00 00 00       	mov    edx,0x1
c0005b22:	e8 ee c4 ff ff       	call   c0002015 <st_word>
c0005b27:	8d 43 32             	lea    eax,[ebx+0x32]
c0005b2a:	ba 06 00 00 00       	mov    edx,0x6
c0005b2f:	e8 e1 c4 ff ff       	call   c0002015 <st_word>
c0005b34:	8d 43 47             	lea    eax,[ebx+0x47]
c0005b37:	b9 13 00 00 00       	mov    ecx,0x13
c0005b3c:	c6 43 40 80          	mov    BYTE PTR [ebx+0x40],0x80
c0005b40:	ba 1e 2a 02 c0       	mov    edx,0xc0022a1e
c0005b45:	c6 43 42 29          	mov    BYTE PTR [ebx+0x42],0x29
c0005b49:	eb 2f                	jmp    c0005b7a <f_mkfs+0x555>
c0005b4b:	8d 43 27             	lea    eax,[ebx+0x27]
c0005b4e:	ba 00 00 21 50       	mov    edx,0x50210000
c0005b53:	e8 c1 c4 ff ff       	call   c0002019 <st_dword>
c0005b58:	0f b7 54 24 18       	movzx  edx,WORD PTR [esp+0x18]
c0005b5d:	8d 43 16             	lea    eax,[ebx+0x16]
c0005b60:	e8 b0 c4 ff ff       	call   c0002015 <st_word>
c0005b65:	8d 43 2b             	lea    eax,[ebx+0x2b]
c0005b68:	b9 13 00 00 00       	mov    ecx,0x13
c0005b6d:	c6 43 24 80          	mov    BYTE PTR [ebx+0x24],0x80
c0005b71:	ba 32 2a 02 c0       	mov    edx,0xc0022a32
c0005b76:	c6 43 26 29          	mov    BYTE PTR [ebx+0x26],0x29
c0005b7a:	e8 9d c4 ff ff       	call   c000201c <mem_cpy>
c0005b7f:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005b85:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005b8a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005b8e:	e8 82 c4 ff ff       	call   c0002015 <st_word>
c0005b93:	6a 01                	push   0x1
c0005b95:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b99:	53                   	push   ebx
c0005b9a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b9e:	e8 18 c4 ff ff       	call   c0001fbb <disk_write>
c0005ba3:	83 c4 10             	add    esp,0x10
c0005ba6:	85 c0                	test   eax,eax
c0005ba8:	0f 85 25 02 00 00    	jne    c0005dd3 <f_mkfs+0x7ae>
c0005bae:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005bb3:	83 f8 03             	cmp    eax,0x3
c0005bb6:	0f 85 98 00 00 00    	jne    c0005c54 <f_mkfs+0x62f>
c0005bbc:	6a 01                	push   0x1
c0005bbe:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005bc2:	83 c0 06             	add    eax,0x6
c0005bc5:	50                   	push   eax
c0005bc6:	53                   	push   ebx
c0005bc7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005bcb:	e8 eb c3 ff ff       	call   c0001fbb <disk_write>
c0005bd0:	b9 00 02 00 00       	mov    ecx,0x200
c0005bd5:	31 d2                	xor    edx,edx
c0005bd7:	89 d8                	mov    eax,ebx
c0005bd9:	e8 53 c4 ff ff       	call   c0002031 <mem_set>
c0005bde:	ba 52 52 61 41       	mov    edx,0x41615252
c0005be3:	89 d8                	mov    eax,ebx
c0005be5:	e8 2f c4 ff ff       	call   c0002019 <st_dword>
c0005bea:	8d 83 e4 01 00 00    	lea    eax,[ebx+0x1e4]
c0005bf0:	ba 72 72 41 61       	mov    edx,0x61417272
c0005bf5:	e8 1f c4 ff ff       	call   c0002019 <st_dword>
c0005bfa:	8d 56 ff             	lea    edx,[esi-0x1]
c0005bfd:	8d 83 e8 01 00 00    	lea    eax,[ebx+0x1e8]
c0005c03:	e8 11 c4 ff ff       	call   c0002019 <st_dword>
c0005c08:	8d 83 ec 01 00 00    	lea    eax,[ebx+0x1ec]
c0005c0e:	ba 02 00 00 00       	mov    edx,0x2
c0005c13:	e8 01 c4 ff ff       	call   c0002019 <st_dword>
c0005c18:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005c1e:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005c23:	e8 ed c3 ff ff       	call   c0002015 <st_word>
c0005c28:	6a 01                	push   0x1
c0005c2a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0005c2e:	83 c0 07             	add    eax,0x7
c0005c31:	50                   	push   eax
c0005c32:	53                   	push   ebx
c0005c33:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0005c37:	e8 7f c3 ff ff       	call   c0001fbb <disk_write>
c0005c3c:	83 c4 20             	add    esp,0x20
c0005c3f:	6a 01                	push   0x1
c0005c41:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005c45:	40                   	inc    eax
c0005c46:	50                   	push   eax
c0005c47:	53                   	push   ebx
c0005c48:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005c4c:	e8 6a c3 ff ff       	call   c0001fbb <disk_write>
c0005c51:	83 c4 10             	add    esp,0x10
c0005c54:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0005c58:	31 d2                	xor    edx,edx
c0005c5a:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0005c5e:	c1 e8 09             	shr    eax,0x9
c0005c61:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005c65:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0005c6b:	89 d8                	mov    eax,ebx
c0005c6d:	e8 bf c3 ff ff       	call   c0002031 <mem_set>
c0005c72:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005c77:	b9 f8 ff ff 00       	mov    ecx,0xfffff8
c0005c7c:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0005c84:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005c89:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005c8d:	83 f8 01             	cmp    eax,0x1
c0005c90:	0f 44 d1             	cmove  edx,ecx
c0005c93:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0005c97:	83 7c 24 2c 03       	cmp    DWORD PTR [esp+0x2c],0x3
c0005c9c:	75 21                	jne    c0005cbf <f_mkfs+0x69a>
c0005c9e:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005ca3:	89 d8                	mov    eax,ebx
c0005ca5:	e8 6f c3 ff ff       	call   c0002019 <st_dword>
c0005caa:	8d 43 04             	lea    eax,[ebx+0x4]
c0005cad:	83 ca ff             	or     edx,0xffffffff
c0005cb0:	e8 64 c3 ff ff       	call   c0002019 <st_dword>
c0005cb5:	8d 43 08             	lea    eax,[ebx+0x8]
c0005cb8:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0005cbd:	eb 06                	jmp    c0005cc5 <f_mkfs+0x6a0>
c0005cbf:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0005cc3:	89 d8                	mov    eax,ebx
c0005cc5:	e8 4f c3 ff ff       	call   c0002019 <st_dword>
c0005cca:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0005cce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005cd2:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0005cd6:	0f 46 c6             	cmovbe eax,esi
c0005cd9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005cdd:	50                   	push   eax
c0005cde:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005ce2:	53                   	push   ebx
c0005ce3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005ce7:	e8 cf c2 ff ff       	call   c0001fbb <disk_write>
c0005cec:	83 c4 10             	add    esp,0x10
c0005cef:	85 c0                	test   eax,eax
c0005cf1:	0f 85 dc 00 00 00    	jne    c0005dd3 <f_mkfs+0x7ae>
c0005cf7:	b9 00 02 00 00       	mov    ecx,0x200
c0005cfc:	31 d2                	xor    edx,edx
c0005cfe:	89 d8                	mov    eax,ebx
c0005d00:	e8 2c c3 ff ff       	call   c0002031 <mem_set>
c0005d05:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0005d09:	01 4c 24 20          	add    DWORD PTR [esp+0x20],ecx
c0005d0d:	29 ce                	sub    esi,ecx
c0005d0f:	75 bd                	jne    c0005cce <f_mkfs+0x6a9>
c0005d11:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005d15:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0005d1d:	40                   	inc    eax
c0005d1e:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c0005d22:	0f 87 6f ff ff ff    	ja     c0005c97 <f_mkfs+0x672>
c0005d28:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005d2d:	83 f8 03             	cmp    eax,0x3
c0005d30:	0f 45 7c 24 30       	cmovne edi,DWORD PTR [esp+0x30]
c0005d35:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005d39:	3b 7c 24 10          	cmp    edi,DWORD PTR [esp+0x10]
c0005d3d:	0f 46 f7             	cmovbe esi,edi
c0005d40:	56                   	push   esi
c0005d41:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005d45:	53                   	push   ebx
c0005d46:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005d4a:	e8 6c c2 ff ff       	call   c0001fbb <disk_write>
c0005d4f:	83 c4 10             	add    esp,0x10
c0005d52:	85 c0                	test   eax,eax
c0005d54:	75 7d                	jne    c0005dd3 <f_mkfs+0x7ae>
c0005d56:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005d5a:	29 f7                	sub    edi,esi
c0005d5c:	75 d7                	jne    c0005d35 <f_mkfs+0x710>
c0005d5e:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005d63:	b9 0c 00 00 00       	mov    ecx,0xc
c0005d68:	83 f8 03             	cmp    eax,0x3
c0005d6b:	74 1e                	je     c0005d8b <f_mkfs+0x766>
c0005d6d:	81 7c 24 44 ff ff 00 00 	cmp    DWORD PTR [esp+0x44],0xffff
c0005d75:	b9 06 00 00 00       	mov    ecx,0x6
c0005d7a:	77 0f                	ja     c0005d8b <f_mkfs+0x766>
c0005d7c:	83 f8 02             	cmp    eax,0x2
c0005d7f:	b9 04 00 00 00       	mov    ecx,0x4
c0005d84:	74 05                	je     c0005d8b <f_mkfs+0x766>
c0005d86:	b9 01 00 00 00       	mov    ecx,0x1
c0005d8b:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c0005d90:	75 2a                	jne    c0005dbc <f_mkfs+0x797>
c0005d92:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0005d9a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005d9e:	83 ec 0c             	sub    esp,0xc
c0005da1:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0005da5:	53                   	push   ebx
c0005da6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005daa:	8d 54 24 58          	lea    edx,[esp+0x58]
c0005dae:	e8 87 d2 ff ff       	call   c000303a <create_partition>
c0005db3:	83 c4 10             	add    esp,0x10
c0005db6:	85 c0                	test   eax,eax
c0005db8:	89 c6                	mov    esi,eax
c0005dba:	75 2e                	jne    c0005dea <f_mkfs+0x7c5>
c0005dbc:	50                   	push   eax
c0005dbd:	31 f6                	xor    esi,esi
c0005dbf:	6a 00                	push   0x0
c0005dc1:	6a 00                	push   0x0
c0005dc3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005dc7:	e8 05 c2 ff ff       	call   c0001fd1 <disk_ioctl>
c0005dcc:	83 c4 10             	add    esp,0x10
c0005dcf:	85 c0                	test   eax,eax
c0005dd1:	74 17                	je     c0005dea <f_mkfs+0x7c5>
c0005dd3:	85 ed                	test   ebp,ebp
c0005dd5:	75 0c                	jne    c0005de3 <f_mkfs+0x7be>
c0005dd7:	83 ec 0c             	sub    esp,0xc
c0005dda:	53                   	push   ebx
c0005ddb:	e8 6c 00 00 00       	call   c0005e4c <ff_memfree>
c0005de0:	83 c4 10             	add    esp,0x10
c0005de3:	be 01 00 00 00       	mov    esi,0x1
c0005de8:	eb 40                	jmp    c0005e2a <f_mkfs+0x805>
c0005dea:	85 ed                	test   ebp,ebp
c0005dec:	75 3c                	jne    c0005e2a <f_mkfs+0x805>
c0005dee:	83 ec 0c             	sub    esp,0xc
c0005df1:	53                   	push   ebx
c0005df2:	e8 55 00 00 00       	call   c0005e4c <ff_memfree>
c0005df7:	83 c4 10             	add    esp,0x10
c0005dfa:	eb 2e                	jmp    c0005e2a <f_mkfs+0x805>
c0005dfc:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005e01:	0f 85 46 fb ff ff    	jne    c000594d <f_mkfs+0x328>
c0005e07:	e9 20 fc ff ff       	jmp    c0005a2c <f_mkfs+0x407>
c0005e0c:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005e11:	0f 85 3c fb ff ff    	jne    c0005953 <f_mkfs+0x32e>
c0005e17:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005e1d:	89 cf                	mov    edi,ecx
c0005e1f:	0f 86 30 fa ff ff    	jbe    c0005855 <f_mkfs+0x230>
c0005e25:	e9 02 fc ff ff       	jmp    c0005a2c <f_mkfs+0x407>
c0005e2a:	83 c4 5c             	add    esp,0x5c
c0005e2d:	89 f0                	mov    eax,esi
c0005e2f:	5b                   	pop    ebx
c0005e30:	5e                   	pop    esi
c0005e31:	5f                   	pop    edi
c0005e32:	5d                   	pop    ebp
c0005e33:	c3                   	ret    

c0005e34 <ff_memalloc>:
c0005e34:	83 ec 0c             	sub    esp,0xc
c0005e37:	83 ec 0c             	sub    esp,0xc
c0005e3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005e3e:	e8 39 9d 00 00       	call   c000fb7c <malloc>
c0005e43:	83 c4 10             	add    esp,0x10
c0005e46:	83 c4 0c             	add    esp,0xc
c0005e49:	c3                   	ret    
c0005e4a:	66 90                	xchg   ax,ax

c0005e4c <ff_memfree>:
c0005e4c:	83 ec 0c             	sub    esp,0xc
c0005e4f:	83 ec 0c             	sub    esp,0xc
c0005e52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005e56:	e8 31 9d 00 00       	call   c000fb8c <free>
c0005e5b:	83 c4 10             	add    esp,0x10
c0005e5e:	90                   	nop
c0005e5f:	83 c4 0c             	add    esp,0xc
c0005e62:	c3                   	ret    
c0005e63:	90                   	nop

c0005e64 <ff_uni2oem>:
c0005e64:	83 ec 14             	sub    esp,0x14
c0005e67:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005e6b:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005e6f:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005e76:	c7 44 24 0c 60 2e 02 c0 	mov    DWORD PTR [esp+0xc],0xc0022e60
c0005e7e:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005e83:	77 0b                	ja     c0005e90 <ff_uni2oem+0x2c>
c0005e85:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005e89:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005e8e:	eb 64                	jmp    c0005ef4 <ff_uni2oem+0x90>
c0005e90:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005e98:	77 5a                	ja     c0005ef4 <ff_uni2oem+0x90>
c0005e9a:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005e9e:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005ea3:	75 4f                	jne    c0005ef4 <ff_uni2oem+0x90>
c0005ea5:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005eac:	eb 12                	jmp    c0005ec0 <ff_uni2oem+0x5c>
c0005eae:	66 90                	xchg   ax,ax
c0005eb0:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005eb5:	83 c0 01             	add    eax,0x1
c0005eb8:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ebd:	8d 76 00             	lea    esi,[esi+0x0]
c0005ec0:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005ec5:	83 f8 7f             	cmp    eax,0x7f
c0005ec8:	77 1a                	ja     c0005ee4 <ff_uni2oem+0x80>
c0005eca:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005ecf:	8d 14 00             	lea    edx,[eax+eax*1]
c0005ed2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005ed6:	01 d0                	add    eax,edx
c0005ed8:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005edb:	0f b7 c0             	movzx  eax,ax
c0005ede:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005ee2:	75 cc                	jne    c0005eb0 <ff_uni2oem+0x4c>
c0005ee4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ee9:	83 e8 80             	sub    eax,0xffffff80
c0005eec:	0f b6 c0             	movzx  eax,al
c0005eef:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ef4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ef9:	83 c4 14             	add    esp,0x14
c0005efc:	c3                   	ret    
c0005efd:	8d 76 00             	lea    esi,[esi+0x0]

c0005f00 <ff_oem2uni>:
c0005f00:	83 ec 18             	sub    esp,0x18
c0005f03:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005f07:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005f0b:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005f10:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005f14:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005f1b:	c7 44 24 10 60 2e 02 c0 	mov    DWORD PTR [esp+0x10],0xc0022e60
c0005f23:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f28:	83 f8 7f             	cmp    eax,0x7f
c0005f2b:	77 0b                	ja     c0005f38 <ff_oem2uni+0x38>
c0005f2d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005f31:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005f36:	eb 34                	jmp    c0005f6c <ff_oem2uni+0x6c>
c0005f38:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005f3c:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005f41:	75 29                	jne    c0005f6c <ff_oem2uni+0x6c>
c0005f43:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f48:	3d ff 00 00 00       	cmp    eax,0xff
c0005f4d:	77 1d                	ja     c0005f6c <ff_oem2uni+0x6c>
c0005f4f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f54:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005f59:	8d 14 00             	lea    edx,[eax+eax*1]
c0005f5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005f60:	01 d0                	add    eax,edx
c0005f62:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005f65:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005f6a:	66 90                	xchg   ax,ax
c0005f6c:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005f71:	83 c4 18             	add    esp,0x18
c0005f74:	c3                   	ret    
c0005f75:	8d 76 00             	lea    esi,[esi+0x0]

c0005f78 <ff_wtoupper>:
c0005f78:	83 ec 10             	sub    esp,0x10
c0005f7b:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005f83:	0f 87 a7 01 00 00    	ja     c0006130 <ff_wtoupper+0x1b8>
c0005f89:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005f8d:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005f92:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005f97:	3d ff 0f 00 00       	cmp    eax,0xfff
c0005f9c:	77 0a                	ja     c0005fa8 <ff_wtoupper+0x30>
c0005f9e:	b8 60 2c 02 c0       	mov    eax,0xc0022c60
c0005fa3:	eb 0b                	jmp    c0005fb0 <ff_wtoupper+0x38>
c0005fa5:	8d 76 00             	lea    esi,[esi+0x0]
c0005fa8:	b8 a0 2b 02 c0       	mov    eax,0xc0022ba0
c0005fad:	8d 76 00             	lea    esi,[esi+0x0]
c0005fb0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005fb4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005fb8:	8d 50 02             	lea    edx,[eax+0x2]
c0005fbb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005fbf:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005fc2:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005fc7:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005fcc:	85 c0                	test   eax,eax
c0005fce:	0f 84 50 01 00 00    	je     c0006124 <ff_wtoupper+0x1ac>
c0005fd4:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005fd9:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005fde:	39 c2                	cmp    edx,eax
c0005fe0:	0f 82 3e 01 00 00    	jb     c0006124 <ff_wtoupper+0x1ac>
c0005fe6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005fea:	8d 50 02             	lea    edx,[eax+0x2]
c0005fed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005ff1:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005ff4:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005ff9:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005ffe:	c1 e8 08             	shr    eax,0x8
c0006001:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0006006:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c000600b:	0f b6 c0             	movzx  eax,al
c000600e:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0006013:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0006018:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c000601d:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0006022:	01 ca                	add    edx,ecx
c0006024:	39 d0                	cmp    eax,edx
c0006026:	0f 8d d4 00 00 00    	jge    c0006100 <ff_wtoupper+0x188>
c000602c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0006031:	83 f8 08             	cmp    eax,0x8
c0006034:	0f 87 e6 00 00 00    	ja     c0006120 <ff_wtoupper+0x1a8>
c000603a:	8b 04 85 60 2b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd4a0]
c0006041:	ff e0                	jmp    eax
c0006043:	90                   	nop
c0006044:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0006049:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c000604e:	29 c2                	sub    edx,eax
c0006050:	89 d0                	mov    eax,edx
c0006052:	8d 14 00             	lea    edx,[eax+eax*1]
c0006055:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006059:	01 d0                	add    eax,edx
c000605b:	66 8b 00             	mov    ax,WORD PTR [eax]
c000605e:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006063:	e9 94 00 00 00       	jmp    c00060fc <ff_wtoupper+0x184>
c0006068:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c000606d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006071:	89 d1                	mov    ecx,edx
c0006073:	29 c1                	sub    ecx,eax
c0006075:	89 c8                	mov    eax,ecx
c0006077:	83 e0 01             	and    eax,0x1
c000607a:	89 c2                	mov    edx,eax
c000607c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0006081:	29 d0                	sub    eax,edx
c0006083:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006088:	eb 72                	jmp    c00060fc <ff_wtoupper+0x184>
c000608a:	66 90                	xchg   ax,ax
c000608c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0006091:	83 e8 10             	sub    eax,0x10
c0006094:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006099:	eb 61                	jmp    c00060fc <ff_wtoupper+0x184>
c000609b:	90                   	nop
c000609c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060a1:	83 e8 20             	sub    eax,0x20
c00060a4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060a9:	eb 51                	jmp    c00060fc <ff_wtoupper+0x184>
c00060ab:	90                   	nop
c00060ac:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060b1:	83 e8 30             	sub    eax,0x30
c00060b4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060b9:	eb 41                	jmp    c00060fc <ff_wtoupper+0x184>
c00060bb:	90                   	nop
c00060bc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060c1:	83 e8 1a             	sub    eax,0x1a
c00060c4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060c9:	eb 31                	jmp    c00060fc <ff_wtoupper+0x184>
c00060cb:	90                   	nop
c00060cc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060d1:	83 c0 08             	add    eax,0x8
c00060d4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060d9:	eb 21                	jmp    c00060fc <ff_wtoupper+0x184>
c00060db:	90                   	nop
c00060dc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060e1:	83 e8 50             	sub    eax,0x50
c00060e4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060e9:	eb 11                	jmp    c00060fc <ff_wtoupper+0x184>
c00060eb:	90                   	nop
c00060ec:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060f1:	2d 60 1c 00 00       	sub    eax,0x1c60
c00060f6:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060fb:	90                   	nop
c00060fc:	eb 22                	jmp    c0006120 <ff_wtoupper+0x1a8>
c00060fe:	66 90                	xchg   ax,ax
c0006100:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0006105:	85 c0                	test   eax,eax
c0006107:	0f 85 a7 fe ff ff    	jne    c0005fb4 <ff_wtoupper+0x3c>
c000610d:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0006112:	d1 e0                	shl    eax,1
c0006114:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0006118:	e9 97 fe ff ff       	jmp    c0005fb4 <ff_wtoupper+0x3c>
c000611d:	8d 76 00             	lea    esi,[esi+0x0]
c0006120:	90                   	nop
c0006121:	8d 76 00             	lea    esi,[esi+0x0]
c0006124:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0006129:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000612d:	8d 76 00             	lea    esi,[esi+0x0]
c0006130:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006134:	83 c4 10             	add    esp,0x10
c0006137:	c3                   	ret    

c0006138 <utf2ucs>:
c0006138:	57                   	push   edi
c0006139:	31 c9                	xor    ecx,ecx
c000613b:	56                   	push   esi
c000613c:	89 d7                	mov    edi,edx
c000613e:	53                   	push   ebx
c000613f:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c0006143:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0006147:	89 de                	mov    esi,ebx
c0006149:	c1 fe 08             	sar    esi,0x8
c000614c:	89 f2                	mov    edx,esi
c000614e:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c0006151:	41                   	inc    ecx
c0006152:	85 db                	test   ebx,ebx
c0006154:	75 e9                	jne    c000613f <utf2ucs+0x7>
c0006156:	5b                   	pop    ebx
c0006157:	5e                   	pop    esi
c0006158:	5f                   	pop    edi
c0006159:	c3                   	ret    

c000615a <ucs2utfn>:
c000615a:	83 e1 fe             	and    ecx,0xfffffffe
c000615d:	01 d1                	add    ecx,edx
c000615f:	39 d1                	cmp    ecx,edx
c0006161:	75 04                	jne    c0006167 <ucs2utfn+0xd>
c0006163:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006166:	c3                   	ret    
c0006167:	57                   	push   edi
c0006168:	56                   	push   esi
c0006169:	53                   	push   ebx
c000616a:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c000616d:	83 c2 02             	add    edx,0x2
c0006170:	89 de                	mov    esi,ebx
c0006172:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0006176:	c1 e6 08             	shl    esi,0x8
c0006179:	09 f3                	or     ebx,esi
c000617b:	83 fb 3b             	cmp    ebx,0x3b
c000617e:	74 50                	je     c00061d0 <ucs2utfn+0x76>
c0006180:	83 fb 7f             	cmp    ebx,0x7f
c0006183:	7f 05                	jg     c000618a <ucs2utfn+0x30>
c0006185:	88 18                	mov    BYTE PTR [eax],bl
c0006187:	40                   	inc    eax
c0006188:	eb 42                	jmp    c00061cc <ucs2utfn+0x72>
c000618a:	89 df                	mov    edi,ebx
c000618c:	89 de                	mov    esi,ebx
c000618e:	c1 fe 06             	sar    esi,0x6
c0006191:	83 e7 3f             	and    edi,0x3f
c0006194:	83 cf 80             	or     edi,0xffffff80
c0006197:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c000619d:	7f 12                	jg     c00061b1 <ucs2utfn+0x57>
c000619f:	83 ce c0             	or     esi,0xffffffc0
c00061a2:	83 c0 02             	add    eax,0x2
c00061a5:	89 f3                	mov    ebx,esi
c00061a7:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c00061aa:	89 fb                	mov    ebx,edi
c00061ac:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c00061af:	eb 1b                	jmp    c00061cc <ucs2utfn+0x72>
c00061b1:	c1 fb 0c             	sar    ebx,0xc
c00061b4:	83 e6 3f             	and    esi,0x3f
c00061b7:	83 cb e0             	or     ebx,0xffffffe0
c00061ba:	83 ce 80             	or     esi,0xffffff80
c00061bd:	88 18                	mov    BYTE PTR [eax],bl
c00061bf:	89 f3                	mov    ebx,esi
c00061c1:	83 c0 03             	add    eax,0x3
c00061c4:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c00061c7:	89 fb                	mov    ebx,edi
c00061c9:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c00061cc:	39 d1                	cmp    ecx,edx
c00061ce:	75 9a                	jne    c000616a <ucs2utfn+0x10>
c00061d0:	5b                   	pop    ebx
c00061d1:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00061d4:	5e                   	pop    esi
c00061d5:	5f                   	pop    edi
c00061d6:	c3                   	ret    

c00061d7 <isjoliet>:
c00061d7:	31 d2                	xor    edx,edx
c00061d9:	80 38 25             	cmp    BYTE PTR [eax],0x25
c00061dc:	75 26                	jne    c0006204 <isjoliet+0x2d>
c00061de:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c00061e2:	75 20                	jne    c0006204 <isjoliet+0x2d>
c00061e4:	0f be 40 02          	movsx  eax,BYTE PTR [eax+0x2]
c00061e8:	ba 02 00 00 00       	mov    edx,0x2
c00061ed:	83 f8 43             	cmp    eax,0x43
c00061f0:	74 12                	je     c0006204 <isjoliet+0x2d>
c00061f2:	83 f8 45             	cmp    eax,0x45
c00061f5:	ba 03 00 00 00       	mov    edx,0x3
c00061fa:	74 08                	je     c0006204 <isjoliet+0x2d>
c00061fc:	31 d2                	xor    edx,edx
c00061fe:	83 f8 40             	cmp    eax,0x40
c0006201:	0f 94 c2             	sete   dl
c0006204:	89 d0                	mov    eax,edx
c0006206:	c3                   	ret    

c0006207 <htohl_32>:
c0006207:	8b 00                	mov    eax,DWORD PTR [eax]
c0006209:	c3                   	ret    

c000620a <iso_733>:
c000620a:	eb fb                	jmp    c0006207 <htohl_32>

c000620c <bgrad_cache>:
c000620c:	83 fa 0e             	cmp    edx,0xe
c000620f:	77 16                	ja     c0006227 <bgrad_cache+0x1b>
c0006211:	53                   	push   ebx
c0006212:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c0006215:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c0006219:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c000621c:	42                   	inc    edx
c000621d:	83 fa 0f             	cmp    edx,0xf
c0006220:	75 f3                	jne    c0006215 <bgrad_cache+0x9>
c0006222:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0006225:	5b                   	pop    ebx
c0006226:	c3                   	ret    
c0006227:	c3                   	ret    

c0006228 <ucscompare>:
c0006228:	55                   	push   ebp
c0006229:	57                   	push   edi
c000622a:	89 c7                	mov    edi,eax
c000622c:	56                   	push   esi
c000622d:	89 d6                	mov    esi,edx
c000622f:	53                   	push   ebx
c0006230:	31 d2                	xor    edx,edx
c0006232:	83 ec 1c             	sub    esp,0x1c
c0006235:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c0006239:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c000623e:	c1 e3 08             	shl    ebx,0x8
c0006241:	09 c3                	or     ebx,eax
c0006243:	39 ca                	cmp    edx,ecx
c0006245:	7d 42                	jge    c0006289 <ucscompare+0x61>
c0006247:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000624b:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c000624f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0006253:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c0006258:	c1 e0 08             	shl    eax,0x8
c000625b:	09 e8                	or     eax,ebp
c000625d:	83 f8 3b             	cmp    eax,0x3b
c0006260:	74 27                	je     c0006289 <ucscompare+0x61>
c0006262:	83 ec 0c             	sub    esp,0xc
c0006265:	50                   	push   eax
c0006266:	e8 15 a7 ff ff       	call   c0000980 <tolower>
c000626b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000626e:	89 c5                	mov    ebp,eax
c0006270:	e8 0b a7 ff ff       	call   c0000980 <tolower>
c0006275:	83 c4 10             	add    esp,0x10
c0006278:	39 c5                	cmp    ebp,eax
c000627a:	75 20                	jne    c000629c <ucscompare+0x74>
c000627c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006280:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006284:	83 c2 02             	add    edx,0x2
c0006287:	eb ac                	jmp    c0006235 <ucscompare+0xd>
c0006289:	83 fb 2f             	cmp    ebx,0x2f
c000628c:	0f 95 c2             	setne  dl
c000628f:	31 c0                	xor    eax,eax
c0006291:	85 db                	test   ebx,ebx
c0006293:	0f 95 c0             	setne  al
c0006296:	21 d0                	and    eax,edx
c0006298:	f7 d8                	neg    eax
c000629a:	eb 03                	jmp    c000629f <ucscompare+0x77>
c000629c:	83 c8 ff             	or     eax,0xffffffff
c000629f:	83 c4 1c             	add    esp,0x1c
c00062a2:	5b                   	pop    ebx
c00062a3:	5e                   	pop    esi
c00062a4:	5f                   	pop    edi
c00062a5:	5d                   	pop    ebp
c00062a6:	c3                   	ret    

c00062a7 <fncompare>:
c00062a7:	55                   	push   ebp
c00062a8:	57                   	push   edi
c00062a9:	89 c7                	mov    edi,eax
c00062ab:	56                   	push   esi
c00062ac:	89 ce                	mov    esi,ecx
c00062ae:	53                   	push   ebx
c00062af:	31 db                	xor    ebx,ebx
c00062b1:	83 ec 1c             	sub    esp,0x1c
c00062b4:	39 d3                	cmp    ebx,edx
c00062b6:	7d 45                	jge    c00062fd <fncompare+0x56>
c00062b8:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c00062bc:	83 f8 3b             	cmp    eax,0x3b
c00062bf:	74 3c                	je     c00062fd <fncompare+0x56>
c00062c1:	83 f8 2e             	cmp    eax,0x2e
c00062c4:	75 0e                	jne    c00062d4 <fncompare+0x2d>
c00062c6:	8d 4a ff             	lea    ecx,[edx-0x1]
c00062c9:	39 d9                	cmp    ecx,ebx
c00062cb:	74 30                	je     c00062fd <fncompare+0x56>
c00062cd:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c00062d2:	74 29                	je     c00062fd <fncompare+0x56>
c00062d4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00062d8:	83 ec 0c             	sub    esp,0xc
c00062db:	50                   	push   eax
c00062dc:	e8 9f a6 ff ff       	call   c0000980 <tolower>
c00062e1:	89 c5                	mov    ebp,eax
c00062e3:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c00062e7:	89 04 24             	mov    DWORD PTR [esp],eax
c00062ea:	e8 91 a6 ff ff       	call   c0000980 <tolower>
c00062ef:	83 c4 10             	add    esp,0x10
c00062f2:	39 c5                	cmp    ebp,eax
c00062f4:	75 1e                	jne    c0006314 <fncompare+0x6d>
c00062f6:	43                   	inc    ebx
c00062f7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00062fb:	eb b7                	jmp    c00062b4 <fncompare+0xd>
c00062fd:	0f be 14 1e          	movsx  edx,BYTE PTR [esi+ebx*1]
c0006301:	83 fa 2f             	cmp    edx,0x2f
c0006304:	0f 95 c1             	setne  cl
c0006307:	31 c0                	xor    eax,eax
c0006309:	85 d2                	test   edx,edx
c000630b:	0f 95 c0             	setne  al
c000630e:	21 c8                	and    eax,ecx
c0006310:	f7 d8                	neg    eax
c0006312:	eb 03                	jmp    c0006317 <fncompare+0x70>
c0006314:	83 c8 ff             	or     eax,0xffffffff
c0006317:	83 c4 1c             	add    esp,0x1c
c000631a:	5b                   	pop    ebx
c000631b:	5e                   	pop    esi
c000631c:	5f                   	pop    edi
c000631d:	5d                   	pop    ebp
c000631e:	c3                   	ret    

c000631f <bclear_cache>:
c000631f:	83 ec 18             	sub    esp,0x18
c0006322:	68 60 2f 02 c0       	push   0xc0022f60
c0006327:	e8 cc 6b 01 00       	call   c001cef8 <iso_kprintf>
c000632c:	83 c4 10             	add    esp,0x10
c000632f:	31 c0                	xor    eax,eax
c0006331:	8b 14 85 20 90 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd6fe0]
c0006338:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c000633e:	8b 14 85 80 90 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd6f80]
c0006345:	40                   	inc    eax
c0006346:	83 f8 10             	cmp    eax,0x10
c0006349:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c000634f:	75 e0                	jne    c0006331 <bclear_cache+0x12>
c0006351:	83 c4 0c             	add    esp,0xc
c0006354:	c3                   	ret    

c0006355 <bclear>:
c0006355:	eb c8                	jmp    c000631f <bclear_cache>

c0006357 <iso_break_all>:
c0006357:	83 ec 18             	sub    esp,0x18
c000635a:	68 6e 2f 02 c0       	push   0xc0022f6e
c000635f:	e8 94 6b 01 00       	call   c001cef8 <iso_kprintf>
c0006364:	83 c4 10             	add    esp,0x10
c0006367:	31 c0                	xor    eax,eax
c0006369:	c7 80 d0 95 02 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffd6a30],0x1
c0006373:	05 94 00 00 00       	add    eax,0x94
c0006378:	3d 40 09 00 00       	cmp    eax,0x940
c000637d:	75 ea                	jne    c0006369 <iso_break_all+0x12>
c000637f:	83 c4 0c             	add    esp,0xc
c0006382:	c3                   	ret    

c0006383 <isoReadDiscSector>:
c0006383:	83 ec 0c             	sub    esp,0xc
c0006386:	0f be 05 60 90 02 c0 	movsx  eax,BYTE PTR ds:0xc0029060
c000638d:	50                   	push   eax
c000638e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006392:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006396:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000639a:	e8 fd 6a 01 00       	call   c001ce9c <isoReadDiscSectorHelper>
c000639f:	83 c4 1c             	add    esp,0x1c
c00063a2:	c3                   	ret    

c00063a3 <bread_cache>:
c00063a3:	55                   	push   ebp
c00063a4:	57                   	push   edi
c00063a5:	89 d7                	mov    edi,edx
c00063a7:	56                   	push   esi
c00063a8:	ba 0f 00 00 00       	mov    edx,0xf
c00063ad:	53                   	push   ebx
c00063ae:	89 c6                	mov    esi,eax
c00063b0:	83 ec 0c             	sub    esp,0xc
c00063b3:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c00063b6:	39 38                	cmp    DWORD PTR [eax],edi
c00063b8:	74 3c                	je     c00063f6 <bread_cache+0x53>
c00063ba:	4a                   	dec    edx
c00063bb:	83 fa ff             	cmp    edx,0xffffffff
c00063be:	75 f3                	jne    c00063b3 <bread_cache+0x10>
c00063c0:	31 db                	xor    ebx,ebx
c00063c2:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c00063c5:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c00063c8:	74 08                	je     c00063d2 <bread_cache+0x2f>
c00063ca:	43                   	inc    ebx
c00063cb:	83 fb 10             	cmp    ebx,0x10
c00063ce:	75 f2                	jne    c00063c2 <bread_cache+0x1f>
c00063d0:	31 db                	xor    ebx,ebx
c00063d2:	50                   	push   eax
c00063d3:	6a 01                	push   0x1
c00063d5:	57                   	push   edi
c00063d6:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c00063d9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00063dc:	83 c0 04             	add    eax,0x4
c00063df:	50                   	push   eax
c00063e0:	e8 9e ff ff ff       	call   c0006383 <isoReadDiscSector>
c00063e5:	83 c4 10             	add    esp,0x10
c00063e8:	83 c9 ff             	or     ecx,0xffffffff
c00063eb:	85 c0                	test   eax,eax
c00063ed:	78 13                	js     c0006402 <bread_cache+0x5f>
c00063ef:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00063f2:	89 da                	mov    edx,ebx
c00063f4:	89 38                	mov    DWORD PTR [eax],edi
c00063f6:	89 f0                	mov    eax,esi
c00063f8:	e8 0f fe ff ff       	call   c000620c <bgrad_cache>
c00063fd:	b9 0f 00 00 00       	mov    ecx,0xf
c0006402:	83 c4 0c             	add    esp,0xc
c0006405:	89 c8                	mov    eax,ecx
c0006407:	5b                   	pop    ebx
c0006408:	5e                   	pop    esi
c0006409:	5f                   	pop    edi
c000640a:	5d                   	pop    ebp
c000640b:	c3                   	ret    

c000640c <biread>:
c000640c:	89 c2                	mov    edx,eax
c000640e:	b8 80 90 02 c0       	mov    eax,0xc0029080
c0006413:	eb 8e                	jmp    c00063a3 <bread_cache>

c0006415 <bdread>:
c0006415:	89 c2                	mov    edx,eax
c0006417:	b8 20 90 02 c0       	mov    eax,0xc0029020
c000641c:	eb 85                	jmp    c00063a3 <bread_cache>

c000641e <strnicmp>:
c000641e:	55                   	push   ebp
c000641f:	57                   	push   edi
c0006420:	31 ff                	xor    edi,edi
c0006422:	56                   	push   esi
c0006423:	53                   	push   ebx
c0006424:	83 ec 0c             	sub    esp,0xc
c0006427:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000642b:	3b 7c 24 28          	cmp    edi,DWORD PTR [esp+0x28]
c000642f:	74 43                	je     c0006474 <strnicmp+0x56>
c0006431:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006435:	0f be 04 38          	movsx  eax,BYTE PTR [eax+edi*1]
c0006439:	85 c0                	test   eax,eax
c000643b:	74 37                	je     c0006474 <strnicmp+0x56>
c000643d:	0f be 14 3e          	movsx  edx,BYTE PTR [esi+edi*1]
c0006441:	85 d2                	test   edx,edx
c0006443:	74 2f                	je     c0006474 <strnicmp+0x56>
c0006445:	8d 6f 01             	lea    ebp,[edi+0x1]
c0006448:	39 d0                	cmp    eax,edx
c000644a:	75 04                	jne    c0006450 <strnicmp+0x32>
c000644c:	89 ef                	mov    edi,ebp
c000644e:	eb db                	jmp    c000642b <strnicmp+0xd>
c0006450:	83 ec 0c             	sub    esp,0xc
c0006453:	50                   	push   eax
c0006454:	e8 27 a5 ff ff       	call   c0000980 <tolower>
c0006459:	89 c3                	mov    ebx,eax
c000645b:	0f be 04 3e          	movsx  eax,BYTE PTR [esi+edi*1]
c000645f:	89 ef                	mov    edi,ebp
c0006461:	89 04 24             	mov    DWORD PTR [esp],eax
c0006464:	e8 17 a5 ff ff       	call   c0000980 <tolower>
c0006469:	83 c4 10             	add    esp,0x10
c000646c:	29 c3                	sub    ebx,eax
c000646e:	89 d8                	mov    eax,ebx
c0006470:	74 b9                	je     c000642b <strnicmp+0xd>
c0006472:	eb 02                	jmp    c0006476 <strnicmp+0x58>
c0006474:	31 c0                	xor    eax,eax
c0006476:	83 c4 0c             	add    esp,0xc
c0006479:	5b                   	pop    ebx
c000647a:	5e                   	pop    esi
c000647b:	5f                   	pop    edi
c000647c:	5d                   	pop    ebp
c000647d:	c3                   	ret    

c000647e <find_object>:
c000647e:	55                   	push   ebp
c000647f:	57                   	push   edi
c0006480:	89 c7                	mov    edi,eax
c0006482:	56                   	push   esi
c0006483:	53                   	push   ebx
c0006484:	89 d3                	mov    ebx,edx
c0006486:	81 ec 2c 01 00 00    	sub    esp,0x12c
c000648c:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0006490:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0006497:	83 3d b4 9e 02 c0 00 	cmp    DWORD PTR ds:0xc0029eb4,0x0
c000649e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00064a2:	74 0b                	je     c00064af <find_object+0x31>
c00064a4:	8d 44 24 20          	lea    eax,[esp+0x20]
c00064a8:	89 fa                	mov    edx,edi
c00064aa:	e8 89 fc ff ff       	call   c0006138 <utf2ucs>
c00064af:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c00064b2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00064b6:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00064bb:	7e 11                	jle    c00064ce <find_object+0x50>
c00064bd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00064c1:	e8 46 ff ff ff       	call   c000640c <biread>
c00064c6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00064ca:	85 c0                	test   eax,eax
c00064cc:	79 07                	jns    c00064d5 <find_object+0x57>
c00064ce:	31 db                	xor    ebx,ebx
c00064d0:	e9 47 01 00 00       	jmp    c000661c <find_object+0x19e>
c00064d5:	31 ed                	xor    ebp,ebp
c00064d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00064db:	8b 04 85 80 90 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6f80]
c00064e2:	8d 5c 28 04          	lea    ebx,[eax+ebp*1+0x4]
c00064e6:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c00064e9:	85 f6                	test   esi,esi
c00064eb:	75 0e                	jne    c00064fb <find_object+0x7d>
c00064ed:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00064f1:	81 6c 24 08 00 08 00 00 	sub    DWORD PTR [esp+0x8],0x800
c00064f9:	eb bb                	jmp    c00064b6 <find_object+0x38>
c00064fb:	8b 0d b4 9e 02 c0    	mov    ecx,DWORD PTR ds:0xc0029eb4
c0006501:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c0006505:	85 c9                	test   ecx,ecx
c0006507:	89 d0                	mov    eax,edx
c0006509:	74 2b                	je     c0006536 <find_object+0xb8>
c000650b:	8d 43 21             	lea    eax,[ebx+0x21]
c000650e:	89 d1                	mov    ecx,edx
c0006510:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006514:	e8 0f fd ff ff       	call   c0006228 <ucscompare>
c0006519:	85 c0                	test   eax,eax
c000651b:	0f 84 cd 00 00 00    	je     c00065ee <find_object+0x170>
c0006521:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c0006524:	01 c5                	add    ebp,eax
c0006526:	81 fd ff 07 00 00    	cmp    ebp,0x7ff
c000652c:	7f bf                	jg     c00064ed <find_object+0x6f>
c000652e:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0006532:	7f a3                	jg     c00064d7 <find_object+0x59>
c0006534:	eb b7                	jmp    c00064ed <find_object+0x6f>
c0006536:	29 d6                	sub    esi,edx
c0006538:	a8 01                	test   al,0x1
c000653a:	8d 54 13 21          	lea    edx,[ebx+edx*1+0x21]
c000653e:	74 05                	je     c0006545 <find_object+0xc7>
c0006540:	83 ee 21             	sub    esi,0x21
c0006543:	eb 6a                	jmp    c00065af <find_object+0x131>
c0006545:	42                   	inc    edx
c0006546:	83 ee 22             	sub    esi,0x22
c0006549:	eb 64                	jmp    c00065af <find_object+0x131>
c000654b:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c000654e:	48                   	dec    eax
c000654f:	3c 01                	cmp    al,0x1
c0006551:	77 61                	ja     c00065b4 <find_object+0x136>
c0006553:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006557:	50                   	push   eax
c0006558:	6a 02                	push   0x2
c000655a:	68 7d 2f 02 c0       	push   0xc0022f7d
c000655f:	52                   	push   edx
c0006560:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0006564:	e8 a7 a2 ff ff       	call   c0000810 <strncmp>
c0006569:	83 c4 10             	add    esp,0x10
c000656c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006570:	85 c0                	test   eax,eax
c0006572:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006576:	75 2f                	jne    c00065a7 <find_object+0x129>
c0006578:	0f be 4a 02          	movsx  ecx,BYTE PTR [edx+0x2]
c000657c:	50                   	push   eax
c000657d:	8d 42 05             	lea    eax,[edx+0x5]
c0006580:	83 e9 05             	sub    ecx,0x5
c0006583:	51                   	push   ecx
c0006584:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0006588:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000658c:	50                   	push   eax
c000658d:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006591:	50                   	push   eax
c0006592:	e8 f9 a0 ff ff       	call   c0000690 <strncpy>
c0006597:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000659b:	c6 44 0c 30 00       	mov    BYTE PTR [esp+ecx*1+0x30],0x0
c00065a0:	83 c4 10             	add    esp,0x10
c00065a3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00065a7:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c00065ab:	29 c6                	sub    esi,eax
c00065ad:	01 c2                	add    edx,eax
c00065af:	83 fe 03             	cmp    esi,0x3
c00065b2:	7f 97                	jg     c000654b <find_object+0xcd>
c00065b4:	85 c9                	test   ecx,ecx
c00065b6:	7e 40                	jle    c00065f8 <find_object+0x17a>
c00065b8:	51                   	push   ecx
c00065b9:	51                   	push   ecx
c00065ba:	6a 2f                	push   0x2f
c00065bc:	57                   	push   edi
c00065bd:	e8 0e a2 ff ff       	call   c00007d0 <strchr>
c00065c2:	83 c4 10             	add    esp,0x10
c00065c5:	85 c0                	test   eax,eax
c00065c7:	74 04                	je     c00065cd <find_object+0x14f>
c00065c9:	29 f8                	sub    eax,edi
c00065cb:	eb 0c                	jmp    c00065d9 <find_object+0x15b>
c00065cd:	83 ec 0c             	sub    esp,0xc
c00065d0:	57                   	push   edi
c00065d1:	e8 aa 9f ff ff       	call   c0000580 <strlen>
c00065d6:	83 c4 10             	add    esp,0x10
c00065d9:	52                   	push   edx
c00065da:	50                   	push   eax
c00065db:	57                   	push   edi
c00065dc:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00065e0:	50                   	push   eax
c00065e1:	e8 38 fe ff ff       	call   c000641e <strnicmp>
c00065e6:	83 c4 10             	add    esp,0x10
c00065e9:	e9 2b ff ff ff       	jmp    c0006519 <find_object+0x9b>
c00065ee:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00065f2:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00065f6:	eb 1e                	jmp    c0006616 <find_object+0x198>
c00065f8:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c00065fc:	8d 43 21             	lea    eax,[ebx+0x21]
c00065ff:	89 f9                	mov    ecx,edi
c0006601:	e8 a1 fc ff ff       	call   c00062a7 <fncompare>
c0006606:	85 c0                	test   eax,eax
c0006608:	0f 85 13 ff ff ff    	jne    c0006521 <find_object+0xa3>
c000660e:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c0006612:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0006616:	0f 85 05 ff ff ff    	jne    c0006521 <find_object+0xa3>
c000661c:	81 c4 2c 01 00 00    	add    esp,0x12c
c0006622:	89 d8                	mov    eax,ebx
c0006624:	5b                   	pop    ebx
c0006625:	5e                   	pop    esi
c0006626:	5f                   	pop    edi
c0006627:	5d                   	pop    ebp
c0006628:	c3                   	ret    

c0006629 <find_object_path>:
c0006629:	55                   	push   ebp
c000662a:	57                   	push   edi
c000662b:	89 d7                	mov    edi,edx
c000662d:	56                   	push   esi
c000662e:	89 c6                	mov    esi,eax
c0006630:	53                   	push   ebx
c0006631:	89 cb                	mov    ebx,ecx
c0006633:	83 ec 0c             	sub    esp,0xc
c0006636:	50                   	push   eax
c0006637:	50                   	push   eax
c0006638:	6a 2f                	push   0x2f
c000663a:	56                   	push   esi
c000663b:	e8 90 a1 ff ff       	call   c00007d0 <strchr>
c0006640:	83 c4 10             	add    esp,0x10
c0006643:	85 c0                	test   eax,eax
c0006645:	89 c5                	mov    ebp,eax
c0006647:	74 3a                	je     c0006683 <find_object_path+0x5a>
c0006649:	39 ee                	cmp    esi,ebp
c000664b:	74 31                	je     c000667e <find_object_path+0x55>
c000664d:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006650:	e8 b5 fb ff ff       	call   c000620a <iso_733>
c0006655:	89 c2                	mov    edx,eax
c0006657:	8d 43 02             	lea    eax,[ebx+0x2]
c000665a:	e8 ab fb ff ff       	call   c000620a <iso_733>
c000665f:	83 ec 0c             	sub    esp,0xc
c0006662:	52                   	push   edx
c0006663:	89 c1                	mov    ecx,eax
c0006665:	ba 01 00 00 00       	mov    edx,0x1
c000666a:	89 f0                	mov    eax,esi
c000666c:	e8 0d fe ff ff       	call   c000647e <find_object>
c0006671:	83 c4 10             	add    esp,0x10
c0006674:	85 c0                	test   eax,eax
c0006676:	89 c3                	mov    ebx,eax
c0006678:	75 04                	jne    c000667e <find_object_path+0x55>
c000667a:	31 db                	xor    ebx,ebx
c000667c:	eb 36                	jmp    c00066b4 <find_object_path+0x8b>
c000667e:	8d 75 01             	lea    esi,[ebp+0x1]
c0006681:	eb b3                	jmp    c0006636 <find_object_path+0xd>
c0006683:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006686:	74 28                	je     c00066b0 <find_object_path+0x87>
c0006688:	8d 43 0a             	lea    eax,[ebx+0xa]
c000668b:	e8 7a fb ff ff       	call   c000620a <iso_733>
c0006690:	89 c2                	mov    edx,eax
c0006692:	8d 43 02             	lea    eax,[ebx+0x2]
c0006695:	e8 70 fb ff ff       	call   c000620a <iso_733>
c000669a:	83 ec 0c             	sub    esp,0xc
c000669d:	52                   	push   edx
c000669e:	89 c1                	mov    ecx,eax
c00066a0:	89 fa                	mov    edx,edi
c00066a2:	89 f0                	mov    eax,esi
c00066a4:	e8 d5 fd ff ff       	call   c000647e <find_object>
c00066a9:	83 c4 10             	add    esp,0x10
c00066ac:	89 c3                	mov    ebx,eax
c00066ae:	eb 04                	jmp    c00066b4 <find_object_path+0x8b>
c00066b0:	85 ff                	test   edi,edi
c00066b2:	74 c6                	je     c000667a <find_object_path+0x51>
c00066b4:	83 c4 0c             	add    esp,0xc
c00066b7:	89 d8                	mov    eax,ebx
c00066b9:	5b                   	pop    ebx
c00066ba:	5e                   	pop    esi
c00066bb:	5f                   	pop    edi
c00066bc:	5d                   	pop    ebp
c00066bd:	c3                   	ret    

c00066be <stricmp>:
c00066be:	57                   	push   edi
c00066bf:	56                   	push   esi
c00066c0:	31 f6                	xor    esi,esi
c00066c2:	53                   	push   ebx
c00066c3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00066c7:	83 ec 0c             	sub    esp,0xc
c00066ca:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00066ce:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00066d2:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00066d6:	46                   	inc    esi
c00066d7:	50                   	push   eax
c00066d8:	e8 83 a2 ff ff       	call   c0000960 <toupper>
c00066dd:	89 04 24             	mov    DWORD PTR [esp],eax
c00066e0:	e8 9b a2 ff ff       	call   c0000980 <tolower>
c00066e5:	89 3c 24             	mov    DWORD PTR [esp],edi
c00066e8:	89 c3                	mov    ebx,eax
c00066ea:	e8 71 a2 ff ff       	call   c0000960 <toupper>
c00066ef:	89 04 24             	mov    DWORD PTR [esp],eax
c00066f2:	e8 89 a2 ff ff       	call   c0000980 <tolower>
c00066f7:	83 c4 10             	add    esp,0x10
c00066fa:	39 c3                	cmp    ebx,eax
c00066fc:	75 04                	jne    c0006702 <stricmp+0x44>
c00066fe:	85 db                	test   ebx,ebx
c0006700:	75 c1                	jne    c00066c3 <stricmp+0x5>
c0006702:	29 c3                	sub    ebx,eax
c0006704:	89 d8                	mov    eax,ebx
c0006706:	5b                   	pop    ebx
c0006707:	5e                   	pop    esi
c0006708:	5f                   	pop    edi
c0006709:	c3                   	ret    

c000670a <iso_open>:
c000670a:	57                   	push   edi
c000670b:	31 c0                	xor    eax,eax
c000670d:	56                   	push   esi
c000670e:	b9 80 9e 02 c0       	mov    ecx,0xc0029e80
c0006713:	53                   	push   ebx
c0006714:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0006719:	0f 95 c0             	setne  al
c000671c:	89 c2                	mov    edx,eax
c000671e:	89 c6                	mov    esi,eax
c0006720:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006724:	e8 00 ff ff ff       	call   c0006629 <find_object_path>
c0006729:	83 ca ff             	or     edx,0xffffffff
c000672c:	85 c0                	test   eax,eax
c000672e:	74 5e                	je     c000678e <iso_open+0x84>
c0006730:	89 c1                	mov    ecx,eax
c0006732:	31 d2                	xor    edx,edx
c0006734:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c000673a:	83 bf 40 95 02 c0 00 	cmp    DWORD PTR [edi-0x3ffd6ac0],0x0
c0006741:	75 42                	jne    c0006785 <iso_open+0x7b>
c0006743:	c7 87 40 95 02 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffd6ac0],0xffffffff
c000674d:	8d 41 02             	lea    eax,[ecx+0x2]
c0006750:	e8 b5 fa ff ff       	call   c000620a <iso_733>
c0006755:	89 b7 44 95 02 c0    	mov    DWORD PTR [edi-0x3ffd6abc],esi
c000675b:	c7 87 48 95 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffd6ab8],0x0
c0006765:	89 87 40 95 02 c0    	mov    DWORD PTR [edi-0x3ffd6ac0],eax
c000676b:	8d 41 0a             	lea    eax,[ecx+0xa]
c000676e:	e8 97 fa ff ff       	call   c000620a <iso_733>
c0006773:	c7 87 d0 95 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffd6a30],0x0
c000677d:	89 87 4c 95 02 c0    	mov    DWORD PTR [edi-0x3ffd6ab4],eax
c0006783:	eb 09                	jmp    c000678e <iso_open+0x84>
c0006785:	42                   	inc    edx
c0006786:	83 fa 10             	cmp    edx,0x10
c0006789:	75 a9                	jne    c0006734 <iso_open+0x2a>
c000678b:	83 ca ff             	or     edx,0xffffffff
c000678e:	5b                   	pop    ebx
c000678f:	89 d0                	mov    eax,edx
c0006791:	5e                   	pop    esi
c0006792:	5f                   	pop    edi
c0006793:	c3                   	ret    

c0006794 <iso_close>:
c0006794:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006798:	83 f8 0f             	cmp    eax,0xf
c000679b:	7f 10                	jg     c00067ad <iso_close+0x19>
c000679d:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c00067a3:	c7 80 40 95 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6ac0],0x0
c00067ad:	e9 6d fb ff ff       	jmp    c000631f <bclear_cache>

c00067b2 <iso_read>:
c00067b2:	55                   	push   ebp
c00067b3:	57                   	push   edi
c00067b4:	56                   	push   esi
c00067b5:	53                   	push   ebx
c00067b6:	83 ec 1c             	sub    esp,0x1c
c00067b9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00067bd:	83 fd 0f             	cmp    ebp,0xf
c00067c0:	7e 0a                	jle    c00067cc <iso_read+0x1a>
c00067c2:	83 c8 ff             	or     eax,0xffffffff
c00067c5:	89 c2                	mov    edx,eax
c00067c7:	e9 f4 00 00 00       	jmp    c00068c0 <iso_read+0x10e>
c00067cc:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00067d2:	83 bd 40 95 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffd6ac0],0x0
c00067d9:	74 e7                	je     c00067c2 <iso_read+0x10>
c00067db:	8b 95 d0 95 02 c0    	mov    edx,DWORD PTR [ebp-0x3ffd6a30]
c00067e1:	85 d2                	test   edx,edx
c00067e3:	75 dd                	jne    c00067c2 <iso_read+0x10>
c00067e5:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00067ea:	0f 84 cd 00 00 00    	je     c00068bd <iso_read+0x10b>
c00067f0:	8b 85 48 95 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffd6ab8]
c00067f6:	8b 9d 4c 95 02 c0    	mov    ebx,DWORD PTR [ebp-0x3ffd6ab4]
c00067fc:	29 c3                	sub    ebx,eax
c00067fe:	3b 5c 24 38          	cmp    ebx,DWORD PTR [esp+0x38]
c0006802:	89 d9                	mov    ecx,ebx
c0006804:	0f 47 4c 24 38       	cmova  ecx,DWORD PTR [esp+0x38]
c0006809:	85 c9                	test   ecx,ecx
c000680b:	0f 84 ac 00 00 00    	je     c00068bd <iso_read+0x10b>
c0006811:	89 c6                	mov    esi,eax
c0006813:	bb 00 08 00 00       	mov    ebx,0x800
c0006818:	c1 e8 0b             	shr    eax,0xb
c000681b:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006821:	03 85 40 95 02 c0    	add    eax,DWORD PTR [ebp-0x3ffd6ac0]
c0006827:	29 f3                	sub    ebx,esi
c0006829:	81 fb 00 08 00 00    	cmp    ebx,0x800
c000682f:	75 3f                	jne    c0006870 <iso_read+0xbe>
c0006831:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006837:	7e 37                	jle    c0006870 <iso_read+0xbe>
c0006839:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c000683f:	be 20 00 00 00       	mov    esi,0x20
c0006844:	7f 05                	jg     c000684b <iso_read+0x99>
c0006846:	89 ce                	mov    esi,ecx
c0006848:	c1 fe 0b             	sar    esi,0xb
c000684b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000684f:	89 f3                	mov    ebx,esi
c0006851:	52                   	push   edx
c0006852:	56                   	push   esi
c0006853:	50                   	push   eax
c0006854:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0006858:	c1 e3 0b             	shl    ebx,0xb
c000685b:	e8 23 fb ff ff       	call   c0006383 <isoReadDiscSector>
c0006860:	83 c4 10             	add    esp,0x10
c0006863:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006867:	85 c0                	test   eax,eax
c0006869:	7f 3d                	jg     c00068a8 <iso_read+0xf6>
c000686b:	e9 52 ff ff ff       	jmp    c00067c2 <iso_read+0x10>
c0006870:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006874:	39 d9                	cmp    ecx,ebx
c0006876:	0f 4e d9             	cmovle ebx,ecx
c0006879:	e8 97 fb ff ff       	call   c0006415 <bdread>
c000687e:	85 c0                	test   eax,eax
c0006880:	0f 88 3c ff ff ff    	js     c00067c2 <iso_read+0x10>
c0006886:	8b 0c 85 20 90 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd6fe0]
c000688d:	8b 85 48 95 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffd6ab8]
c0006893:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0006897:	25 ff 07 00 00       	and    eax,0x7ff
c000689c:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c00068a0:	89 d9                	mov    ecx,ebx
c00068a2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00068a4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00068a8:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c00068ac:	01 da                	add    edx,ebx
c00068ae:	01 9d 48 95 02 c0    	add    DWORD PTR [ebp-0x3ffd6ab8],ebx
c00068b4:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00068b8:	e9 28 ff ff ff       	jmp    c00067e5 <iso_read+0x33>
c00068bd:	89 d0                	mov    eax,edx
c00068bf:	99                   	cdq    
c00068c0:	83 c4 1c             	add    esp,0x1c
c00068c3:	5b                   	pop    ebx
c00068c4:	5e                   	pop    esi
c00068c5:	5f                   	pop    edi
c00068c6:	5d                   	pop    ebp
c00068c7:	c3                   	ret    

c00068c8 <iso_seek>:
c00068c8:	55                   	push   ebp
c00068c9:	83 c8 ff             	or     eax,0xffffffff
c00068cc:	57                   	push   edi
c00068cd:	89 c2                	mov    edx,eax
c00068cf:	56                   	push   esi
c00068d0:	53                   	push   ebx
c00068d1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00068d5:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00068d9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00068dd:	83 fe 0f             	cmp    esi,0xf
c00068e0:	7f 65                	jg     c0006947 <iso_seek+0x7f>
c00068e2:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c00068e8:	83 bd 40 95 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffd6ac0],0x0
c00068ef:	8d 8d 40 95 02 c0    	lea    ecx,[ebp-0x3ffd6ac0]
c00068f5:	74 50                	je     c0006947 <iso_seek+0x7f>
c00068f7:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c00068fe:	75 47                	jne    c0006947 <iso_seek+0x7f>
c0006900:	83 fb 01             	cmp    ebx,0x1
c0006903:	74 0e                	je     c0006913 <iso_seek+0x4b>
c0006905:	83 fb 02             	cmp    ebx,0x2
c0006908:	74 0e                	je     c0006918 <iso_seek+0x50>
c000690a:	85 db                	test   ebx,ebx
c000690c:	75 39                	jne    c0006947 <iso_seek+0x7f>
c000690e:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0006911:	eb 0d                	jmp    c0006920 <iso_seek+0x58>
c0006913:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c0006916:	eb 08                	jmp    c0006920 <iso_seek+0x58>
c0006918:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c000691b:	01 f8                	add    eax,edi
c000691d:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0006920:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c0006926:	8b 88 4c 95 02 c0    	mov    ecx,DWORD PTR [eax-0x3ffd6ab4]
c000692c:	05 40 95 02 c0       	add    eax,0xc0029540
c0006931:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c0006934:	76 03                	jbe    c0006939 <iso_seek+0x71>
c0006936:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0006939:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c000693f:	8b 82 48 95 02 c0    	mov    eax,DWORD PTR [edx-0x3ffd6ab8]
c0006945:	31 d2                	xor    edx,edx
c0006947:	5b                   	pop    ebx
c0006948:	5e                   	pop    esi
c0006949:	5f                   	pop    edi
c000694a:	5d                   	pop    ebp
c000694b:	c3                   	ret    

c000694c <iso_tell>:
c000694c:	53                   	push   ebx
c000694d:	83 c8 ff             	or     eax,0xffffffff
c0006950:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006954:	89 c2                	mov    edx,eax
c0006956:	83 f9 0f             	cmp    ecx,0xf
c0006959:	7f 20                	jg     c000697b <iso_tell+0x2f>
c000695b:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c0006961:	83 bb 40 95 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffd6ac0],0x0
c0006968:	74 11                	je     c000697b <iso_tell+0x2f>
c000696a:	83 bb d0 95 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffd6a30],0x0
c0006971:	75 08                	jne    c000697b <iso_tell+0x2f>
c0006973:	8b 83 48 95 02 c0    	mov    eax,DWORD PTR [ebx-0x3ffd6ab8]
c0006979:	31 d2                	xor    edx,edx
c000697b:	5b                   	pop    ebx
c000697c:	c3                   	ret    

c000697d <iso_total>:
c000697d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006981:	83 c8 ff             	or     eax,0xffffffff
c0006984:	83 fa 0f             	cmp    edx,0xf
c0006987:	7f 1e                	jg     c00069a7 <iso_total+0x2a>
c0006989:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c000698f:	83 ba 40 95 02 c0 00 	cmp    DWORD PTR [edx-0x3ffd6ac0],0x0
c0006996:	74 0f                	je     c00069a7 <iso_total+0x2a>
c0006998:	83 ba d0 95 02 c0 00 	cmp    DWORD PTR [edx-0x3ffd6a30],0x0
c000699f:	75 06                	jne    c00069a7 <iso_total+0x2a>
c00069a1:	8b 82 4c 95 02 c0    	mov    eax,DWORD PTR [edx-0x3ffd6ab4]
c00069a7:	c3                   	ret    

c00069a8 <fn_postprocess>:
c00069a8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00069ac:	89 d0                	mov    eax,edx
c00069ae:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c00069b1:	85 c9                	test   ecx,ecx
c00069b3:	74 08                	je     c00069bd <fn_postprocess+0x15>
c00069b5:	83 f9 3b             	cmp    ecx,0x3b
c00069b8:	74 03                	je     c00069bd <fn_postprocess+0x15>
c00069ba:	40                   	inc    eax
c00069bb:	eb f1                	jmp    c00069ae <fn_postprocess+0x6>
c00069bd:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00069c0:	39 d0                	cmp    eax,edx
c00069c2:	76 0a                	jbe    c00069ce <fn_postprocess+0x26>
c00069c4:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00069c8:	75 04                	jne    c00069ce <fn_postprocess+0x26>
c00069ca:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00069ce:	c3                   	ret    

c00069cf <iso_readdir>:
c00069cf:	55                   	push   ebp
c00069d0:	57                   	push   edi
c00069d1:	56                   	push   esi
c00069d2:	53                   	push   ebx
c00069d3:	83 ec 1c             	sub    esp,0x1c
c00069d6:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00069da:	83 fb 0f             	cmp    ebx,0xf
c00069dd:	7f 28                	jg     c0006a07 <iso_readdir+0x38>
c00069df:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c00069e5:	83 b8 40 95 02 c0 00 	cmp    DWORD PTR [eax-0x3ffd6ac0],0x0
c00069ec:	8d b8 40 95 02 c0    	lea    edi,[eax-0x3ffd6ac0]
c00069f2:	74 13                	je     c0006a07 <iso_readdir+0x38>
c00069f4:	83 7f 04 00          	cmp    DWORD PTR [edi+0x4],0x0
c00069f8:	74 0d                	je     c0006a07 <iso_readdir+0x38>
c00069fa:	83 bf 90 00 00 00 00 	cmp    DWORD PTR [edi+0x90],0x0
c0006a01:	0f 84 b1 00 00 00    	je     c0006ab8 <iso_readdir+0xe9>
c0006a07:	83 ec 0c             	sub    esp,0xc
c0006a0a:	68 80 2f 02 c0       	push   0xc0022f80
c0006a0f:	e8 e4 64 01 00       	call   c001cef8 <iso_kprintf>
c0006a14:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006a17:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006a1d:	e8 f2 64 01 00       	call   c001cf14 <iso_kprintfd>
c0006a22:	c7 04 24 85 2f 02 c0 	mov    DWORD PTR [esp],0xc0022f85
c0006a29:	e8 ca 64 01 00       	call   c001cef8 <iso_kprintf>
c0006a2e:	58                   	pop    eax
c0006a2f:	ff b3 40 95 02 c0    	push   DWORD PTR [ebx-0x3ffd6ac0]
c0006a35:	e8 da 64 01 00       	call   c001cf14 <iso_kprintfd>
c0006a3a:	c7 04 24 8b 2f 02 c0 	mov    DWORD PTR [esp],0xc0022f8b
c0006a41:	e8 b2 64 01 00       	call   c001cef8 <iso_kprintf>
c0006a46:	58                   	pop    eax
c0006a47:	ff b3 44 95 02 c0    	push   DWORD PTR [ebx-0x3ffd6abc]
c0006a4d:	e8 c2 64 01 00       	call   c001cf14 <iso_kprintfd>
c0006a52:	c7 04 24 91 2f 02 c0 	mov    DWORD PTR [esp],0xc0022f91
c0006a59:	e8 9a 64 01 00       	call   c001cef8 <iso_kprintf>
c0006a5e:	58                   	pop    eax
c0006a5f:	ff b3 d0 95 02 c0    	push   DWORD PTR [ebx-0x3ffd6a30]
c0006a65:	e8 aa 64 01 00       	call   c001cf14 <iso_kprintfd>
c0006a6a:	83 c4 10             	add    esp,0x10
c0006a6d:	eb 42                	jmp    c0006ab1 <iso_readdir+0xe2>
c0006a6f:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006a72:	8b 34 85 80 90 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd6f80]
c0006a79:	89 d1                	mov    ecx,edx
c0006a7b:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0006a81:	8d 74 0e 04          	lea    esi,[esi+ecx*1+0x4]
c0006a85:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006a88:	75 35                	jne    c0006abf <iso_readdir+0xf0>
c0006a8a:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c0006a90:	81 c2 00 08 00 00    	add    edx,0x800
c0006a96:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0006a99:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006a9c:	3b 57 0c             	cmp    edx,DWORD PTR [edi+0xc]
c0006a9f:	73 1e                	jae    c0006abf <iso_readdir+0xf0>
c0006aa1:	8b 07                	mov    eax,DWORD PTR [edi]
c0006aa3:	c1 ea 0b             	shr    edx,0xb
c0006aa6:	01 d0                	add    eax,edx
c0006aa8:	e8 5f f9 ff ff       	call   c000640c <biread>
c0006aad:	85 c0                	test   eax,eax
c0006aaf:	79 be                	jns    c0006a6f <iso_readdir+0xa0>
c0006ab1:	31 c0                	xor    eax,eax
c0006ab3:	e9 6a 01 00 00       	jmp    c0006c22 <iso_readdir+0x253>
c0006ab8:	31 f6                	xor    esi,esi
c0006aba:	83 c8 ff             	or     eax,0xffffffff
c0006abd:	eb da                	jmp    c0006a99 <iso_readdir+0xca>
c0006abf:	69 d3 94 00 00 00    	imul   edx,ebx,0x94
c0006ac5:	8b ba 48 95 02 c0    	mov    edi,DWORD PTR [edx-0x3ffd6ab8]
c0006acb:	81 c2 40 95 02 c0    	add    edx,0xc0029540
c0006ad1:	3b 7a 0c             	cmp    edi,DWORD PTR [edx+0xc]
c0006ad4:	73 db                	jae    c0006ab1 <iso_readdir+0xe2>
c0006ad6:	80 7e 21 00          	cmp    BYTE PTR [esi+0x21],0x0
c0006ada:	75 34                	jne    c0006b10 <iso_readdir+0x141>
c0006adc:	80 7e 20 01          	cmp    BYTE PTR [esi+0x20],0x1
c0006ae0:	75 2e                	jne    c0006b10 <iso_readdir+0x141>
c0006ae2:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0006ae5:	8b 34 85 80 90 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd6f80]
c0006aec:	01 f9                	add    ecx,edi
c0006aee:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0006af1:	89 c8                	mov    eax,ecx
c0006af3:	25 ff 07 00 00       	and    eax,0x7ff
c0006af8:	0f b6 44 06 04       	movzx  eax,BYTE PTR [esi+eax*1+0x4]
c0006afd:	01 c8                	add    eax,ecx
c0006aff:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0006b02:	25 ff 07 00 00       	and    eax,0x7ff
c0006b07:	8d 74 06 04          	lea    esi,[esi+eax*1+0x4]
c0006b0b:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006b0e:	74 a1                	je     c0006ab1 <iso_readdir+0xe2>
c0006b10:	69 fb 94 00 00 00    	imul   edi,ebx,0x94
c0006b16:	0f b6 4e 20          	movzx  ecx,BYTE PTR [esi+0x20]
c0006b1a:	83 3d b4 9e 02 c0 00 	cmp    DWORD PTR ds:0xc0029eb4,0x0
c0006b21:	8d 56 21             	lea    edx,[esi+0x21]
c0006b24:	8d af 58 95 02 c0    	lea    ebp,[edi-0x3ffd6aa8]
c0006b2a:	74 0c                	je     c0006b38 <iso_readdir+0x169>
c0006b2c:	89 e8                	mov    eax,ebp
c0006b2e:	e8 27 f6 ff ff       	call   c000615a <ucs2utfn>
c0006b33:	e9 b1 00 00 00       	jmp    c0006be9 <iso_readdir+0x21a>
c0006b38:	50                   	push   eax
c0006b39:	51                   	push   ecx
c0006b3a:	52                   	push   edx
c0006b3b:	55                   	push   ebp
c0006b3c:	e8 4f 9b ff ff       	call   c0000690 <strncpy>
c0006b41:	0f b6 46 20          	movzx  eax,BYTE PTR [esi+0x20]
c0006b45:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0006b48:	c6 84 07 58 95 02 c0 00 	mov    BYTE PTR [edi+eax*1-0x3ffd6aa8],0x0
c0006b50:	e8 53 fe ff ff       	call   c00069a8 <fn_postprocess>
c0006b55:	0f b6 56 20          	movzx  edx,BYTE PTR [esi+0x20]
c0006b59:	83 c4 10             	add    esp,0x10
c0006b5c:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006b5f:	89 d1                	mov    ecx,edx
c0006b61:	29 d0                	sub    eax,edx
c0006b63:	80 e1 01             	and    cl,0x1
c0006b66:	8d 54 16 21          	lea    edx,[esi+edx*1+0x21]
c0006b6a:	74 05                	je     c0006b71 <iso_readdir+0x1a2>
c0006b6c:	83 e8 21             	sub    eax,0x21
c0006b6f:	eb 04                	jmp    c0006b75 <iso_readdir+0x1a6>
c0006b71:	42                   	inc    edx
c0006b72:	83 e8 22             	sub    eax,0x22
c0006b75:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006b79:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006b7f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006b83:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c0006b88:	7e 5f                	jle    c0006be9 <iso_readdir+0x21a>
c0006b8a:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c0006b8d:	48                   	dec    eax
c0006b8e:	3c 01                	cmp    al,0x1
c0006b90:	77 57                	ja     c0006be9 <iso_readdir+0x21a>
c0006b92:	51                   	push   ecx
c0006b93:	6a 02                	push   0x2
c0006b95:	68 7d 2f 02 c0       	push   0xc0022f7d
c0006b9a:	52                   	push   edx
c0006b9b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0006b9f:	e8 6c 9c ff ff       	call   c0000810 <strncmp>
c0006ba4:	83 c4 10             	add    esp,0x10
c0006ba7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006bab:	85 c0                	test   eax,eax
c0006bad:	75 2e                	jne    c0006bdd <iso_readdir+0x20e>
c0006baf:	50                   	push   eax
c0006bb0:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006bb4:	83 e8 05             	sub    eax,0x5
c0006bb7:	50                   	push   eax
c0006bb8:	8d 42 05             	lea    eax,[edx+0x5]
c0006bbb:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0006bbf:	50                   	push   eax
c0006bc0:	55                   	push   ebp
c0006bc1:	e8 ca 9a ff ff       	call   c0000690 <strncpy>
c0006bc6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006bca:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0006bce:	83 c4 10             	add    esp,0x10
c0006bd1:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006bd5:	c6 84 08 53 95 02 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffd6aad],0x0
c0006bdd:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006be1:	29 44 24 04          	sub    DWORD PTR [esp+0x4],eax
c0006be5:	01 c2                	add    edx,eax
c0006be7:	eb 9a                	jmp    c0006b83 <iso_readdir+0x1b4>
c0006be9:	83 c8 ff             	or     eax,0xffffffff
c0006bec:	f6 46 19 02          	test   BYTE PTR [esi+0x19],0x2
c0006bf0:	89 c2                	mov    edx,eax
c0006bf2:	75 0a                	jne    c0006bfe <iso_readdir+0x22f>
c0006bf4:	8d 46 0a             	lea    eax,[esi+0xa]
c0006bf7:	e8 0e f6 ff ff       	call   c000620a <iso_733>
c0006bfc:	31 d2                	xor    edx,edx
c0006bfe:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006c04:	89 83 50 95 02 c0    	mov    DWORD PTR [ebx-0x3ffd6ab0],eax
c0006c0a:	89 93 54 95 02 c0    	mov    DWORD PTR [ebx-0x3ffd6aac],edx
c0006c10:	81 c3 40 95 02 c0    	add    ebx,0xc0029540
c0006c16:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006c19:	01 43 08             	add    DWORD PTR [ebx+0x8],eax
c0006c1c:	8d 87 50 95 02 c0    	lea    eax,[edi-0x3ffd6ab0]
c0006c22:	83 c4 1c             	add    esp,0x1c
c0006c25:	5b                   	pop    ebx
c0006c26:	5e                   	pop    esi
c0006c27:	5f                   	pop    edi
c0006c28:	5d                   	pop    ebp
c0006c29:	c3                   	ret    

c0006c2a <iso_reset>:
c0006c2a:	83 ec 18             	sub    esp,0x18
c0006c2d:	68 9a 2f 02 c0       	push   0xc0022f9a
c0006c32:	e8 c1 62 01 00       	call   c001cef8 <iso_kprintf>
c0006c37:	e8 1b f7 ff ff       	call   c0006357 <iso_break_all>
c0006c3c:	e8 14 f7 ff ff       	call   c0006355 <bclear>
c0006c41:	31 c0                	xor    eax,eax
c0006c43:	83 c4 1c             	add    esp,0x1c
c0006c46:	c3                   	ret    

c0006c47 <init_percd>:
c0006c47:	57                   	push   edi
c0006c48:	56                   	push   esi
c0006c49:	53                   	push   ebx
c0006c4a:	bb 01 00 00 00       	mov    ebx,0x1
c0006c4f:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0006c53:	a2 60 90 02 c0       	mov    ds:0xc0029060,al
c0006c58:	e8 cd ff ff ff       	call   c0006c2a <iso_reset>
c0006c5d:	c7 05 b4 9e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029eb4,0x0
c0006c67:	a1 ac 9e 02 c0       	mov    eax,ds:0xc0029eac
c0006c6c:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006c70:	e8 97 f7 ff ff       	call   c000640c <biread>
c0006c75:	85 c0                	test   eax,eax
c0006c77:	89 c6                	mov    esi,eax
c0006c79:	0f 88 ba 00 00 00    	js     c0006d39 <init_percd+0xf2>
c0006c7f:	8b 04 85 80 90 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6f80]
c0006c86:	52                   	push   edx
c0006c87:	6a 06                	push   0x6
c0006c89:	68 a5 2f 02 c0       	push   0xc0022fa5
c0006c8e:	83 c0 04             	add    eax,0x4
c0006c91:	50                   	push   eax
c0006c92:	e8 e9 96 ff ff       	call   c0000380 <memcmp>
c0006c97:	83 c4 10             	add    esp,0x10
c0006c9a:	85 c0                	test   eax,eax
c0006c9c:	74 08                	je     c0006ca6 <init_percd+0x5f>
c0006c9e:	43                   	inc    ebx
c0006c9f:	83 fb 04             	cmp    ebx,0x4
c0006ca2:	75 c3                	jne    c0006c67 <init_percd+0x20>
c0006ca4:	eb 1a                	jmp    c0006cc0 <init_percd+0x79>
c0006ca6:	8b 04 b5 80 90 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffd6f80]
c0006cad:	83 c0 5c             	add    eax,0x5c
c0006cb0:	e8 22 f5 ff ff       	call   c00061d7 <isjoliet>
c0006cb5:	a3 b4 9e 02 c0       	mov    ds:0xc0029eb4,eax
c0006cba:	85 c0                	test   eax,eax
c0006cbc:	74 e0                	je     c0006c9e <init_percd+0x57>
c0006cbe:	eb 3e                	jmp    c0006cfe <init_percd+0xb7>
c0006cc0:	83 3d b4 9e 02 c0 00 	cmp    DWORD PTR ds:0xc0029eb4,0x0
c0006cc7:	75 35                	jne    c0006cfe <init_percd+0xb7>
c0006cc9:	a1 ac 9e 02 c0       	mov    eax,ds:0xc0029eac
c0006cce:	83 c0 10             	add    eax,0x10
c0006cd1:	e8 36 f7 ff ff       	call   c000640c <biread>
c0006cd6:	85 c0                	test   eax,eax
c0006cd8:	89 c6                	mov    esi,eax
c0006cda:	78 5f                	js     c0006d3b <init_percd+0xf4>
c0006cdc:	50                   	push   eax
c0006cdd:	8b 04 b5 80 90 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffd6f80]
c0006ce4:	83 cb ff             	or     ebx,0xffffffff
c0006ce7:	6a 06                	push   0x6
c0006ce9:	68 ac 2f 02 c0       	push   0xc0022fac
c0006cee:	83 c0 04             	add    eax,0x4
c0006cf1:	50                   	push   eax
c0006cf2:	e8 89 96 ff ff       	call   c0000380 <memcmp>
c0006cf7:	83 c4 10             	add    esp,0x10
c0006cfa:	85 c0                	test   eax,eax
c0006cfc:	75 3d                	jne    c0006d3b <init_percd+0xf4>
c0006cfe:	8b 34 b5 80 90 02 c0 	mov    esi,DWORD PTR [esi*4-0x3ffd6f80]
c0006d05:	bf 80 9e 02 c0       	mov    edi,0xc0029e80
c0006d0a:	b9 22 00 00 00       	mov    ecx,0x22
c0006d0f:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006d15:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006d17:	b8 82 9e 02 c0       	mov    eax,0xc0029e82
c0006d1c:	31 db                	xor    ebx,ebx
c0006d1e:	e8 e7 f4 ff ff       	call   c000620a <iso_733>
c0006d23:	a3 a8 9e 02 c0       	mov    ds:0xc0029ea8,eax
c0006d28:	b8 8a 9e 02 c0       	mov    eax,0xc0029e8a
c0006d2d:	e8 d8 f4 ff ff       	call   c000620a <iso_733>
c0006d32:	a3 a4 9e 02 c0       	mov    ds:0xc0029ea4,eax
c0006d37:	eb 02                	jmp    c0006d3b <init_percd+0xf4>
c0006d39:	89 c3                	mov    ebx,eax
c0006d3b:	89 d8                	mov    eax,ebx
c0006d3d:	5b                   	pop    ebx
c0006d3e:	5e                   	pop    esi
c0006d3f:	5f                   	pop    edi
c0006d40:	c3                   	ret    

c0006d41 <iso_ioctl>:
c0006d41:	83 ec 18             	sub    esp,0x18
c0006d44:	68 b3 2f 02 c0       	push   0xc0022fb3
c0006d49:	e8 aa 61 01 00       	call   c001cef8 <iso_kprintf>
c0006d4e:	e8 d7 fe ff ff       	call   c0006c2a <iso_reset>
c0006d53:	31 c0                	xor    eax,eax
c0006d55:	83 c4 1c             	add    esp,0x1c
c0006d58:	c3                   	ret    

c0006d59 <fs_iso9660_init>:
c0006d59:	53                   	push   ebx
c0006d5a:	31 db                	xor    ebx,ebx
c0006d5c:	83 ec 14             	sub    esp,0x14
c0006d5f:	68 be 2f 02 c0       	push   0xc0022fbe
c0006d64:	e8 8f 61 01 00       	call   c001cef8 <iso_kprintf>
c0006d69:	83 c4 0c             	add    esp,0xc
c0006d6c:	68 40 09 00 00       	push   0x940
c0006d71:	6a 00                	push   0x0
c0006d73:	68 40 95 02 c0       	push   0xc0029540
c0006d78:	e8 73 97 ff ff       	call   c00004f0 <memset>
c0006d7d:	c7 05 40 95 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0029540,0xffffffff
c0006d87:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006d8e:	e8 e9 8d 00 00       	call   c000fb7c <malloc>
c0006d93:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006d9a:	a3 b0 9e 02 c0       	mov    ds:0xc0029eb0,eax
c0006d9f:	e8 d8 8d 00 00       	call   c000fb7c <malloc>
c0006da4:	83 c4 10             	add    esp,0x10
c0006da7:	a3 20 95 02 c0       	mov    ds:0xc0029520,eax
c0006dac:	83 ec 0c             	sub    esp,0xc
c0006daf:	68 04 08 00 00       	push   0x804
c0006db4:	e8 c3 8d 00 00       	call   c000fb7c <malloc>
c0006db9:	89 04 9d 80 90 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd6f80],eax
c0006dc0:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006dc6:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006dcd:	e8 aa 8d 00 00       	call   c000fb7c <malloc>
c0006dd2:	83 c4 10             	add    esp,0x10
c0006dd5:	89 04 9d 20 90 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd6fe0],eax
c0006ddc:	43                   	inc    ebx
c0006ddd:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006de3:	83 fb 10             	cmp    ebx,0x10
c0006de6:	75 c4                	jne    c0006dac <fs_iso9660_init+0x53>
c0006de8:	83 c4 08             	add    esp,0x8
c0006deb:	31 c0                	xor    eax,eax
c0006ded:	5b                   	pop    ebx
c0006dee:	c3                   	ret    

c0006def <fs_iso9660_shutdown>:
c0006def:	53                   	push   ebx
c0006df0:	31 db                	xor    ebx,ebx
c0006df2:	83 ec 08             	sub    esp,0x8
c0006df5:	83 ec 0c             	sub    esp,0xc
c0006df8:	ff 34 9d 80 90 02 c0 	push   DWORD PTR [ebx*4-0x3ffd6f80]
c0006dff:	e8 88 8d 00 00       	call   c000fb8c <free>
c0006e04:	58                   	pop    eax
c0006e05:	ff 34 9d 20 90 02 c0 	push   DWORD PTR [ebx*4-0x3ffd6fe0]
c0006e0c:	43                   	inc    ebx
c0006e0d:	e8 7a 8d 00 00       	call   c000fb8c <free>
c0006e12:	83 c4 10             	add    esp,0x10
c0006e15:	83 fb 10             	cmp    ebx,0x10
c0006e18:	75 db                	jne    c0006df5 <fs_iso9660_shutdown+0x6>
c0006e1a:	a1 b0 9e 02 c0       	mov    eax,ds:0xc0029eb0
c0006e1f:	85 c0                	test   eax,eax
c0006e21:	74 0c                	je     c0006e2f <fs_iso9660_shutdown+0x40>
c0006e23:	83 ec 0c             	sub    esp,0xc
c0006e26:	50                   	push   eax
c0006e27:	e8 60 8d 00 00       	call   c000fb8c <free>
c0006e2c:	83 c4 10             	add    esp,0x10
c0006e2f:	a1 20 95 02 c0       	mov    eax,ds:0xc0029520
c0006e34:	85 c0                	test   eax,eax
c0006e36:	74 0c                	je     c0006e44 <fs_iso9660_shutdown+0x55>
c0006e38:	83 ec 0c             	sub    esp,0xc
c0006e3b:	50                   	push   eax
c0006e3c:	e8 4b 8d 00 00       	call   c000fb8c <free>
c0006e41:	83 c4 10             	add    esp,0x10
c0006e44:	c7 05 20 95 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029520,0x0
c0006e4e:	31 c0                	xor    eax,eax
c0006e50:	c7 05 b0 9e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029eb0,0x0
c0006e5a:	83 c4 08             	add    esp,0x8
c0006e5d:	5b                   	pop    ebx
c0006e5e:	c3                   	ret    

c0006e5f <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0006e5f:	55                   	push   ebp
c0006e60:	57                   	push   edi
c0006e61:	56                   	push   esi
c0006e62:	53                   	push   ebx
c0006e63:	83 ec 20             	sub    esp,0x20
c0006e66:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0006e6a:	c7 44 24 0f 30 31 32 33 	mov    DWORD PTR [esp+0xf],0x33323130
c0006e72:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0006e76:	c7 44 24 13 34 35 36 37 	mov    DWORD PTR [esp+0x13],0x37363534
c0006e7e:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0006e82:	c7 44 24 17 38 39 41 42 	mov    DWORD PTR [esp+0x17],0x42413938
c0006e8a:	c7 44 24 1b 43 44 45 46 	mov    DWORD PTR [esp+0x1b],0x46454443
c0006e92:	89 f7                	mov    edi,esi
c0006e94:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0006e99:	89 eb                	mov    ebx,ebp
c0006e9b:	eb 02                	jmp    c0006e9f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x40>
c0006e9d:	89 c7                	mov    edi,eax
c0006e9f:	31 d2                	xor    edx,edx
c0006ea1:	89 f8                	mov    eax,edi
c0006ea3:	f7 f1                	div    ecx
c0006ea5:	83 c3 01             	add    ebx,0x1
c0006ea8:	39 cf                	cmp    edi,ecx
c0006eaa:	73 f1                	jae    c0006e9d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3e>
c0006eac:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006eaf:	eb 02                	jmp    c0006eb3 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x54>
c0006eb1:	89 c6                	mov    esi,eax
c0006eb3:	31 d2                	xor    edx,edx
c0006eb5:	89 f0                	mov    eax,esi
c0006eb7:	f7 f1                	div    ecx
c0006eb9:	83 eb 01             	sub    ebx,0x1
c0006ebc:	39 ce                	cmp    esi,ecx
c0006ebe:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c0006ec2:	88 13                	mov    BYTE PTR [ebx],dl
c0006ec4:	73 eb                	jae    c0006eb1 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x52>
c0006ec6:	83 c4 20             	add    esp,0x20
c0006ec9:	89 e8                	mov    eax,ebp
c0006ecb:	5b                   	pop    ebx
c0006ecc:	5e                   	pop    esi
c0006ecd:	5f                   	pop    edi
c0006ece:	5d                   	pop    ebp
c0006ecf:	c3                   	ret    

c0006ed0 <Dbg::logc(char)>:
c0006ed0:	53                   	push   ebx
c0006ed1:	83 ec 14             	sub    esp,0x14
c0006ed4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0006ed8:	6a 10                	push   0x10
c0006eda:	e8 09 63 00 00       	call   c000d1e8 <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c0006edf:	83 c4 10             	add    esp,0x10
c0006ee2:	84 c0                	test   al,al
c0006ee4:	75 12                	jne    c0006ef8 <Dbg::logc(char)+0x28>
c0006ee6:	ba fd 03 00 00       	mov    edx,0x3fd
c0006eeb:	ec                   	in     al,dx
c0006eec:	a8 20                	test   al,0x20
c0006eee:	74 fb                	je     c0006eeb <Dbg::logc(char)+0x1b>
c0006ef0:	ba f8 03 00 00       	mov    edx,0x3f8
c0006ef5:	88 d8                	mov    al,bl
c0006ef7:	ee                   	out    dx,al
c0006ef8:	83 c4 08             	add    esp,0x8
c0006efb:	5b                   	pop    ebx
c0006efc:	c3                   	ret    

c0006efd <Dbg::logs(char*)>:
c0006efd:	53                   	push   ebx
c0006efe:	83 ec 08             	sub    esp,0x8
c0006f01:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0006f05:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0006f08:	85 c0                	test   eax,eax
c0006f0a:	74 16                	je     c0006f22 <Dbg::logs(char*)+0x25>
c0006f0c:	83 ec 0c             	sub    esp,0xc
c0006f0f:	83 c3 01             	add    ebx,0x1
c0006f12:	50                   	push   eax
c0006f13:	e8 b8 ff ff ff       	call   c0006ed0 <Dbg::logc(char)>
c0006f18:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0006f1b:	83 c4 10             	add    esp,0x10
c0006f1e:	85 c0                	test   eax,eax
c0006f20:	75 ea                	jne    c0006f0c <Dbg::logs(char*)+0xf>
c0006f22:	83 c4 08             	add    esp,0x8
c0006f25:	5b                   	pop    ebx
c0006f26:	c3                   	ret    

c0006f27 <Dbg::logWriteInt(unsigned int)>:
c0006f27:	83 ec 1c             	sub    esp,0x1c
c0006f2a:	6a 0a                	push   0xa
c0006f2c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0006f30:	50                   	push   eax
c0006f31:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0006f35:	50                   	push   eax
c0006f36:	e8 24 ff ff ff       	call   c0006e5f <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0006f3b:	50                   	push   eax
c0006f3c:	e8 bc ff ff ff       	call   c0006efd <Dbg::logs(char*)>
c0006f41:	83 c4 2c             	add    esp,0x2c
c0006f44:	c3                   	ret    

c0006f45 <Dbg::logWriteIntBase(unsigned int, int)>:
c0006f45:	83 ec 1c             	sub    esp,0x1c
c0006f48:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006f4c:	50                   	push   eax
c0006f4d:	8d 44 24 08          	lea    eax,[esp+0x8]
c0006f51:	50                   	push   eax
c0006f52:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0006f56:	52                   	push   edx
c0006f57:	e8 03 ff ff ff       	call   c0006e5f <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0006f5c:	50                   	push   eax
c0006f5d:	e8 9b ff ff ff       	call   c0006efd <Dbg::logs(char*)>
c0006f62:	83 c4 2c             	add    esp,0x2c
c0006f65:	c3                   	ret    

c0006f66 <Dbg::kprintf(char const*, ...)>:
c0006f66:	55                   	push   ebp
c0006f67:	57                   	push   edi
c0006f68:	56                   	push   esi
c0006f69:	53                   	push   ebx
c0006f6a:	83 ec 1c             	sub    esp,0x1c
c0006f6d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006f71:	85 db                	test   ebx,ebx
c0006f73:	0f 84 4c 01 00 00    	je     c00070c5 <Dbg::kprintf(char const*, ...)+0x15f>
c0006f79:	83 ec 0c             	sub    esp,0xc
c0006f7c:	6a 10                	push   0x10
c0006f7e:	e8 65 62 00 00       	call   c000d1e8 <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c0006f83:	83 c4 10             	add    esp,0x10
c0006f86:	84 c0                	test   al,al
c0006f88:	74 08                	je     c0006f92 <Dbg::kprintf(char const*, ...)+0x2c>
c0006f8a:	83 c4 1c             	add    esp,0x1c
c0006f8d:	5b                   	pop    ebx
c0006f8e:	5e                   	pop    esi
c0006f8f:	5f                   	pop    edi
c0006f90:	5d                   	pop    ebp
c0006f91:	c3                   	ret    
c0006f92:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006f96:	31 ff                	xor    edi,edi
c0006f98:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006f9c:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0006f9f:	85 c0                	test   eax,eax
c0006fa1:	74 e7                	je     c0006f8a <Dbg::kprintf(char const*, ...)+0x24>
c0006fa3:	8d 77 01             	lea    esi,[edi+0x1]
c0006fa6:	83 f8 25             	cmp    eax,0x25
c0006fa9:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c0006fac:	75 4c                	jne    c0006ffa <Dbg::kprintf(char const*, ...)+0x94>
c0006fae:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0006fb1:	83 c7 02             	add    edi,0x2
c0006fb4:	8d 34 3b             	lea    esi,[ebx+edi*1]
c0006fb7:	83 e8 25             	sub    eax,0x25
c0006fba:	0f b6 c0             	movzx  eax,al
c0006fbd:	83 f8 53             	cmp    eax,0x53
c0006fc0:	0f 87 e1 00 00 00    	ja     c00070a7 <Dbg::kprintf(char const*, ...)+0x141>
c0006fc6:	ff 24 85 08 30 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdcff8]
c0006fcd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006fd1:	83 ec 0c             	sub    esp,0xc
c0006fd4:	89 c8                	mov    eax,ecx
c0006fd6:	83 c1 04             	add    ecx,0x4
c0006fd9:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0006fdd:	8b 00                	mov    eax,DWORD PTR [eax]
c0006fdf:	50                   	push   eax
c0006fe0:	e8 42 ff ff ff       	call   c0006f27 <Dbg::logWriteInt(unsigned int)>
c0006fe5:	83 c4 10             	add    esp,0x10
c0006fe8:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0006feb:	85 c0                	test   eax,eax
c0006fed:	74 9b                	je     c0006f8a <Dbg::kprintf(char const*, ...)+0x24>
c0006fef:	8d 77 01             	lea    esi,[edi+0x1]
c0006ff2:	83 f8 25             	cmp    eax,0x25
c0006ff5:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c0006ff8:	74 b4                	je     c0006fae <Dbg::kprintf(char const*, ...)+0x48>
c0006ffa:	83 ec 0c             	sub    esp,0xc
c0006ffd:	89 f7                	mov    edi,esi
c0006fff:	50                   	push   eax
c0007000:	89 ee                	mov    esi,ebp
c0007002:	e8 c9 fe ff ff       	call   c0006ed0 <Dbg::logc(char)>
c0007007:	83 c4 10             	add    esp,0x10
c000700a:	eb dc                	jmp    c0006fe8 <Dbg::kprintf(char const*, ...)+0x82>
c000700c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007010:	83 ec 0c             	sub    esp,0xc
c0007013:	89 c8                	mov    eax,ecx
c0007015:	83 c1 04             	add    ecx,0x4
c0007018:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000701c:	8b 28                	mov    ebp,DWORD PTR [eax]
c000701e:	55                   	push   ebp
c000701f:	e8 d9 fe ff ff       	call   c0006efd <Dbg::logs(char*)>
c0007024:	83 c4 10             	add    esp,0x10
c0007027:	eb bf                	jmp    c0006fe8 <Dbg::kprintf(char const*, ...)+0x82>
c0007029:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000702d:	83 ec 0c             	sub    esp,0xc
c0007030:	89 d0                	mov    eax,edx
c0007032:	83 c2 04             	add    edx,0x4
c0007035:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0007039:	8b 08                	mov    ecx,DWORD PTR [eax]
c000703b:	51                   	push   ecx
c000703c:	e8 e6 fe ff ff       	call   c0006f27 <Dbg::logWriteInt(unsigned int)>
c0007041:	83 c4 10             	add    esp,0x10
c0007044:	eb a2                	jmp    c0006fe8 <Dbg::kprintf(char const*, ...)+0x82>
c0007046:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000704a:	83 ec 0c             	sub    esp,0xc
c000704d:	89 d0                	mov    eax,edx
c000704f:	83 c2 04             	add    edx,0x4
c0007052:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0007056:	0f be 00             	movsx  eax,BYTE PTR [eax]
c0007059:	50                   	push   eax
c000705a:	e8 71 fe ff ff       	call   c0006ed0 <Dbg::logc(char)>
c000705f:	83 c4 10             	add    esp,0x10
c0007062:	eb 84                	jmp    c0006fe8 <Dbg::kprintf(char const*, ...)+0x82>
c0007064:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007068:	89 c8                	mov    eax,ecx
c000706a:	83 c1 04             	add    ecx,0x4
c000706d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007071:	83 ec 08             	sub    esp,0x8
c0007074:	6a 10                	push   0x10
c0007076:	8b 10                	mov    edx,DWORD PTR [eax]
c0007078:	52                   	push   edx
c0007079:	e8 c7 fe ff ff       	call   c0006f45 <Dbg::logWriteIntBase(unsigned int, int)>
c000707e:	83 c4 10             	add    esp,0x10
c0007081:	e9 62 ff ff ff       	jmp    c0006fe8 <Dbg::kprintf(char const*, ...)+0x82>
c0007086:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000708a:	89 d0                	mov    eax,edx
c000708c:	83 c2 08             	add    edx,0x8
c000708f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007093:	eb dc                	jmp    c0007071 <Dbg::kprintf(char const*, ...)+0x10b>
c0007095:	83 ec 0c             	sub    esp,0xc
c0007098:	6a 25                	push   0x25
c000709a:	e8 31 fe ff ff       	call   c0006ed0 <Dbg::logc(char)>
c000709f:	83 c4 10             	add    esp,0x10
c00070a2:	e9 41 ff ff ff       	jmp    c0006fe8 <Dbg::kprintf(char const*, ...)+0x82>
c00070a7:	83 ec 0c             	sub    esp,0xc
c00070aa:	6a 25                	push   0x25
c00070ac:	e8 1f fe ff ff       	call   c0006ed0 <Dbg::logc(char)>
c00070b1:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c00070b5:	89 04 24             	mov    DWORD PTR [esp],eax
c00070b8:	e8 13 fe ff ff       	call   c0006ed0 <Dbg::logc(char)>
c00070bd:	83 c4 10             	add    esp,0x10
c00070c0:	e9 23 ff ff ff       	jmp    c0006fe8 <Dbg::kprintf(char const*, ...)+0x82>
c00070c5:	83 ec 0c             	sub    esp,0xc
c00070c8:	68 d0 2f 02 c0       	push   0xc0022fd0
c00070cd:	e8 94 fe ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00070d2:	83 c4 10             	add    esp,0x10
c00070d5:	83 c4 1c             	add    esp,0x1c
c00070d8:	5b                   	pop    ebx
c00070d9:	5e                   	pop    esi
c00070da:	5f                   	pop    edi
c00070db:	5d                   	pop    ebp
c00070dc:	c3                   	ret    
c00070dd:	66 90                	xchg   ax,ax
c00070df:	90                   	nop

c00070e0 <KiUbsanPrintDetails(char const*, void*)>:
c00070e0:	83 ec 1c             	sub    esp,0x1c
c00070e3:	83 ec 08             	sub    esp,0x8
c00070e6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00070ea:	68 58 31 02 c0       	push   0xc0023158
c00070ef:	e8 72 fe ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00070f4:	83 c4 10             	add    esp,0x10
c00070f7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00070fb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00070ff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007103:	8b 00                	mov    eax,DWORD PTR [eax]
c0007105:	83 ec 08             	sub    esp,0x8
c0007108:	50                   	push   eax
c0007109:	68 6c 31 02 c0       	push   0xc002316c
c000710e:	e8 53 fe ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0007113:	83 c4 10             	add    esp,0x10
c0007116:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000711a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000711d:	83 ec 08             	sub    esp,0x8
c0007120:	50                   	push   eax
c0007121:	68 76 31 02 c0       	push   0xc0023176
c0007126:	e8 3b fe ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000712b:	83 c4 10             	add    esp,0x10
c000712e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007132:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0007135:	83 ec 08             	sub    esp,0x8
c0007138:	50                   	push   eax
c0007139:	68 80 31 02 c0       	push   0xc0023180
c000713e:	e8 23 fe ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0007143:	83 c4 10             	add    esp,0x10
c0007146:	90                   	nop
c0007147:	83 c4 1c             	add    esp,0x1c
c000714a:	c3                   	ret    
c000714b:	90                   	nop

c000714c <__ubsan_handle_type_mismatch_v1>:
c000714c:	83 ec 0c             	sub    esp,0xc
c000714f:	83 ec 08             	sub    esp,0x8
c0007152:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007156:	68 c4 32 02 c0       	push   0xc00232c4
c000715b:	e8 80 ff ff ff       	call   c00070e0 <KiUbsanPrintDetails(char const*, void*)>
c0007160:	83 c4 10             	add    esp,0x10
c0007163:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0007168:	75 16                	jne    c0007180 <__ubsan_handle_type_mismatch_v1+0x34>
c000716a:	83 ec 0c             	sub    esp,0xc
c000716d:	68 8a 31 02 c0       	push   0xc002318a
c0007172:	e8 ef fd ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0007177:	83 c4 10             	add    esp,0x10
c000717a:	e9 91 00 00 00       	jmp    c0007210 <__ubsan_handle_type_mismatch_v1+0xc4>
c000717f:	90                   	nop
c0007180:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007184:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0007187:	85 c0                	test   eax,eax
c0007189:	74 29                	je     c00071b4 <__ubsan_handle_type_mismatch_v1+0x68>
c000718b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000718f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0007192:	83 e8 01             	sub    eax,0x1
c0007195:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0007199:	75 19                	jne    c00071b4 <__ubsan_handle_type_mismatch_v1+0x68>
c000719b:	83 ec 08             	sub    esp,0x8
c000719e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00071a2:	68 e4 32 02 c0       	push   0xc00232e4
c00071a7:	e8 ba fd ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00071ac:	83 c4 10             	add    esp,0x10
c00071af:	eb 5f                	jmp    c0007210 <__ubsan_handle_type_mismatch_v1+0xc4>
c00071b1:	8d 76 00             	lea    esi,[esi+0x0]
c00071b4:	83 ec 0c             	sub    esp,0xc
c00071b7:	68 9f 31 02 c0       	push   0xc002319f
c00071bc:	e8 a5 fd ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00071c1:	83 c4 10             	add    esp,0x10
c00071c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00071c8:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c00071cb:	0f b6 c0             	movzx  eax,al
c00071ce:	83 ec 08             	sub    esp,0x8
c00071d1:	50                   	push   eax
c00071d2:	68 b9 31 02 c0       	push   0xc00231b9
c00071d7:	e8 8a fd ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00071dc:	83 c4 10             	add    esp,0x10
c00071df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00071e3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00071e6:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c00071e9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00071ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00071f1:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c00071f4:	0f b6 c0             	movzx  eax,al
c00071f7:	8b 04 85 e0 67 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9820]
c00071fe:	51                   	push   ecx
c00071ff:	52                   	push   edx
c0007200:	50                   	push   eax
c0007201:	68 0c 33 02 c0       	push   0xc002330c
c0007206:	e8 5b fd ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000720b:	83 c4 10             	add    esp,0x10
c000720e:	66 90                	xchg   ax,ax
c0007210:	83 ec 0c             	sub    esp,0xc
c0007213:	68 c4 32 02 c0       	push   0xc00232c4
c0007218:	e8 6d 8c 00 00       	call   c000fe8a <KePanic(char const*)>
c000721d:	83 c4 10             	add    esp,0x10
c0007220:	90                   	nop
c0007221:	83 c4 0c             	add    esp,0xc
c0007224:	c3                   	ret    
c0007225:	8d 76 00             	lea    esi,[esi+0x0]

c0007228 <__ubsan_handle_pointer_overflow>:
c0007228:	83 ec 0c             	sub    esp,0xc
c000722b:	83 ec 08             	sub    esp,0x8
c000722e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007232:	68 54 33 02 c0       	push   0xc0023354
c0007237:	e8 a4 fe ff ff       	call   c00070e0 <KiUbsanPrintDetails(char const*, void*)>
c000723c:	83 c4 10             	add    esp,0x10
c000723f:	83 ec 0c             	sub    esp,0xc
c0007242:	68 54 33 02 c0       	push   0xc0023354
c0007247:	e8 3e 8c 00 00       	call   c000fe8a <KePanic(char const*)>
c000724c:	83 c4 10             	add    esp,0x10
c000724f:	90                   	nop
c0007250:	83 c4 0c             	add    esp,0xc
c0007253:	c3                   	ret    

c0007254 <__ubsan_handle_out_of_bounds>:
c0007254:	83 ec 0c             	sub    esp,0xc
c0007257:	83 ec 08             	sub    esp,0x8
c000725a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000725e:	68 c4 31 02 c0       	push   0xc00231c4
c0007263:	e8 78 fe ff ff       	call   c00070e0 <KiUbsanPrintDetails(char const*, void*)>
c0007268:	83 c4 10             	add    esp,0x10
c000726b:	83 ec 0c             	sub    esp,0xc
c000726e:	68 c4 31 02 c0       	push   0xc00231c4
c0007273:	e8 12 8c 00 00       	call   c000fe8a <KePanic(char const*)>
c0007278:	83 c4 10             	add    esp,0x10
c000727b:	90                   	nop
c000727c:	83 c4 0c             	add    esp,0xc
c000727f:	c3                   	ret    

c0007280 <__ubsan_handle_add_overflow>:
c0007280:	83 ec 0c             	sub    esp,0xc
c0007283:	83 ec 08             	sub    esp,0x8
c0007286:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000728a:	68 e1 31 02 c0       	push   0xc00231e1
c000728f:	e8 4c fe ff ff       	call   c00070e0 <KiUbsanPrintDetails(char const*, void*)>
c0007294:	83 c4 10             	add    esp,0x10
c0007297:	83 ec 0c             	sub    esp,0xc
c000729a:	68 e1 31 02 c0       	push   0xc00231e1
c000729f:	e8 e6 8b 00 00       	call   c000fe8a <KePanic(char const*)>
c00072a4:	83 c4 10             	add    esp,0x10
c00072a7:	90                   	nop
c00072a8:	83 c4 0c             	add    esp,0xc
c00072ab:	c3                   	ret    

c00072ac <__ubsan_handle_load_invalid_value>:
c00072ac:	83 ec 0c             	sub    esp,0xc
c00072af:	83 ec 08             	sub    esp,0x8
c00072b2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00072b6:	68 74 33 02 c0       	push   0xc0023374
c00072bb:	e8 20 fe ff ff       	call   c00070e0 <KiUbsanPrintDetails(char const*, void*)>
c00072c0:	83 c4 10             	add    esp,0x10
c00072c3:	83 ec 0c             	sub    esp,0xc
c00072c6:	68 74 33 02 c0       	push   0xc0023374
c00072cb:	e8 ba 8b 00 00       	call   c000fe8a <KePanic(char const*)>
c00072d0:	83 c4 10             	add    esp,0x10
c00072d3:	90                   	nop
c00072d4:	83 c4 0c             	add    esp,0xc
c00072d7:	c3                   	ret    

c00072d8 <__ubsan_handle_divrem_overflow>:
c00072d8:	83 ec 0c             	sub    esp,0xc
c00072db:	83 ec 08             	sub    esp,0x8
c00072de:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00072e2:	68 98 33 02 c0       	push   0xc0023398
c00072e7:	e8 f4 fd ff ff       	call   c00070e0 <KiUbsanPrintDetails(char const*, void*)>
c00072ec:	83 c4 10             	add    esp,0x10
c00072ef:	83 ec 0c             	sub    esp,0xc
c00072f2:	68 98 33 02 c0       	push   0xc0023398
c00072f7:	e8 8e 8b 00 00       	call   c000fe8a <KePanic(char const*)>
c00072fc:	83 c4 10             	add    esp,0x10
c00072ff:	90                   	nop
c0007300:	83 c4 0c             	add    esp,0xc
c0007303:	c3                   	ret    

c0007304 <__ubsan_handle_mul_overflow>:
c0007304:	83 ec 0c             	sub    esp,0xc
c0007307:	83 ec 08             	sub    esp,0x8
c000730a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000730e:	68 fd 31 02 c0       	push   0xc00231fd
c0007313:	e8 c8 fd ff ff       	call   c00070e0 <KiUbsanPrintDetails(char const*, void*)>
c0007318:	83 c4 10             	add    esp,0x10
c000731b:	83 ec 0c             	sub    esp,0xc
c000731e:	68 fd 31 02 c0       	push   0xc00231fd
c0007323:	e8 62 8b 00 00       	call   c000fe8a <KePanic(char const*)>
c0007328:	83 c4 10             	add    esp,0x10
c000732b:	90                   	nop
c000732c:	83 c4 0c             	add    esp,0xc
c000732f:	c3                   	ret    

c0007330 <__ubsan_handle_sub_overflow>:
c0007330:	83 ec 0c             	sub    esp,0xc
c0007333:	83 ec 08             	sub    esp,0x8
c0007336:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000733a:	68 19 32 02 c0       	push   0xc0023219
c000733f:	e8 9c fd ff ff       	call   c00070e0 <KiUbsanPrintDetails(char const*, void*)>
c0007344:	83 c4 10             	add    esp,0x10
c0007347:	83 ec 0c             	sub    esp,0xc
c000734a:	68 19 32 02 c0       	push   0xc0023219
c000734f:	e8 36 8b 00 00       	call   c000fe8a <KePanic(char const*)>
c0007354:	83 c4 10             	add    esp,0x10
c0007357:	90                   	nop
c0007358:	83 c4 0c             	add    esp,0xc
c000735b:	c3                   	ret    

c000735c <__ubsan_handle_shift_out_of_bounds>:
c000735c:	83 ec 0c             	sub    esp,0xc
c000735f:	83 ec 08             	sub    esp,0x8
c0007362:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007366:	68 b8 33 02 c0       	push   0xc00233b8
c000736b:	e8 70 fd ff ff       	call   c00070e0 <KiUbsanPrintDetails(char const*, void*)>
c0007370:	83 c4 10             	add    esp,0x10
c0007373:	83 ec 0c             	sub    esp,0xc
c0007376:	68 b8 33 02 c0       	push   0xc00233b8
c000737b:	e8 0a 8b 00 00       	call   c000fe8a <KePanic(char const*)>
c0007380:	83 c4 10             	add    esp,0x10
c0007383:	90                   	nop
c0007384:	83 c4 0c             	add    esp,0xc
c0007387:	c3                   	ret    

c0007388 <__ubsan_handle_negate_overflow>:
c0007388:	83 ec 0c             	sub    esp,0xc
c000738b:	83 ec 08             	sub    esp,0x8
c000738e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007392:	68 dc 33 02 c0       	push   0xc00233dc
c0007397:	e8 44 fd ff ff       	call   c00070e0 <KiUbsanPrintDetails(char const*, void*)>
c000739c:	83 c4 10             	add    esp,0x10
c000739f:	83 ec 0c             	sub    esp,0xc
c00073a2:	68 dc 33 02 c0       	push   0xc00233dc
c00073a7:	e8 de 8a 00 00       	call   c000fe8a <KePanic(char const*)>
c00073ac:	83 c4 10             	add    esp,0x10
c00073af:	90                   	nop
c00073b0:	83 c4 0c             	add    esp,0xc
c00073b3:	c3                   	ret    

c00073b4 <KiIsHashInTable(unsigned short)>:
c00073b4:	0f b7 d0             	movzx  edx,ax
c00073b7:	83 e0 07             	and    eax,0x7
c00073ba:	c1 fa 03             	sar    edx,0x3
c00073bd:	88 c1                	mov    cl,al
c00073bf:	0f b6 92 00 a3 02 c0 	movzx  edx,BYTE PTR [edx-0x3ffd5d00]
c00073c6:	d3 fa                	sar    edx,cl
c00073c8:	89 d0                	mov    eax,edx
c00073ca:	83 e0 01             	and    eax,0x1
c00073cd:	c3                   	ret    

c00073ce <KiSetHashInTable(unsigned short, bool)>:
c00073ce:	56                   	push   esi
c00073cf:	53                   	push   ebx
c00073d0:	0f b7 d8             	movzx  ebx,ax
c00073d3:	c1 fb 03             	sar    ebx,0x3
c00073d6:	83 e0 07             	and    eax,0x7
c00073d9:	89 c1                	mov    ecx,eax
c00073db:	b8 01 00 00 00       	mov    eax,0x1
c00073e0:	0f b6 b3 00 a3 02 c0 	movzx  esi,BYTE PTR [ebx-0x3ffd5d00]
c00073e7:	d3 e0                	shl    eax,cl
c00073e9:	84 d2                	test   dl,dl
c00073eb:	74 04                	je     c00073f1 <KiSetHashInTable(unsigned short, bool)+0x23>
c00073ed:	09 f0                	or     eax,esi
c00073ef:	eb 04                	jmp    c00073f5 <KiSetHashInTable(unsigned short, bool)+0x27>
c00073f1:	f7 d0                	not    eax
c00073f3:	21 f0                	and    eax,esi
c00073f5:	88 83 00 a3 02 c0    	mov    BYTE PTR [ebx-0x3ffd5d00],al
c00073fb:	5b                   	pop    ebx
c00073fc:	5e                   	pop    esi
c00073fd:	c3                   	ret    

c00073fe <KiFlushSymlinkChanges()>:
c00073fe:	57                   	push   edi
c00073ff:	56                   	push   esi
c0007400:	53                   	push   ebx
c0007401:	83 ec 1c             	sub    esp,0x1c
c0007404:	68 14 01 00 00       	push   0x114
c0007409:	e8 6e 87 00 00       	call   c000fb7c <malloc>
c000740e:	83 c4 0c             	add    esp,0xc
c0007411:	ff 35 78 fa 02 c0    	push   DWORD PTR ds:0xc002fa78
c0007417:	68 fb 33 02 c0       	push   0xc00233fb
c000741c:	50                   	push   eax
c000741d:	89 c3                	mov    ebx,eax
c000741f:	e8 64 0d 00 00       	call   c0008188 <File::File(char const*, Process*)>
c0007424:	83 c4 10             	add    esp,0x10
c0007427:	85 db                	test   ebx,ebx
c0007429:	75 10                	jne    c000743b <KiFlushSymlinkChanges()+0x3d>
c000742b:	83 ec 0c             	sub    esp,0xc
c000742e:	68 19 34 02 c0       	push   0xc0023419
c0007433:	e8 52 8a 00 00       	call   c000fe8a <KePanic(char const*)>
c0007438:	83 c4 10             	add    esp,0x10
c000743b:	50                   	push   eax
c000743c:	50                   	push   eax
c000743d:	6a 06                	push   0x6
c000743f:	53                   	push   ebx
c0007440:	e8 61 0d 00 00       	call   c00081a6 <File::open(FileOpenMode)>
c0007445:	83 c4 10             	add    esp,0x10
c0007448:	85 c0                	test   eax,eax
c000744a:	74 10                	je     c000745c <KiFlushSymlinkChanges()+0x5e>
c000744c:	83 ec 0c             	sub    esp,0xc
c000744f:	68 33 34 02 c0       	push   0xc0023433
c0007454:	e8 31 8a 00 00       	call   c000fe8a <KePanic(char const*)>
c0007459:	83 c4 10             	add    esp,0x10
c000745c:	31 f6                	xor    esi,esi
c000745e:	39 35 c0 9e 02 c0    	cmp    DWORD PTR ds:0xc0029ec0,esi
c0007464:	7e 70                	jle    c00074d6 <KiFlushSymlinkChanges()+0xd8>
c0007466:	83 ec 0c             	sub    esp,0xc
c0007469:	89 f0                	mov    eax,esi
c000746b:	8b 13                	mov    edx,DWORD PTR [ebx]
c000746d:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0007471:	c1 e0 08             	shl    eax,0x8
c0007474:	57                   	push   edi
c0007475:	05 00 9f 02 c0       	add    eax,0xc0029f00
c000747a:	50                   	push   eax
c000747b:	6a 00                	push   0x0
c000747d:	68 00 01 00 00       	push   0x100
c0007482:	53                   	push   ebx
c0007483:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0007486:	83 c4 20             	add    esp,0x20
c0007489:	81 7c 24 0c 00 01 00 00 	cmp    DWORD PTR [esp+0xc],0x100
c0007491:	74 10                	je     c00074a3 <KiFlushSymlinkChanges()+0xa5>
c0007493:	83 ec 0c             	sub    esp,0xc
c0007496:	68 4d 34 02 c0       	push   0xc002344d
c000749b:	e8 ea 89 00 00       	call   c000fe8a <KePanic(char const*)>
c00074a0:	83 c4 10             	add    esp,0x10
c00074a3:	8b 03                	mov    eax,DWORD PTR [ebx]
c00074a5:	8d 14 f5 e0 9e 02 c0 	lea    edx,[esi*8-0x3ffd6120]
c00074ac:	83 ec 0c             	sub    esp,0xc
c00074af:	57                   	push   edi
c00074b0:	52                   	push   edx
c00074b1:	6a 00                	push   0x0
c00074b3:	6a 08                	push   0x8
c00074b5:	53                   	push   ebx
c00074b6:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00074b9:	83 c4 20             	add    esp,0x20
c00074bc:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c00074c1:	74 10                	je     c00074d3 <KiFlushSymlinkChanges()+0xd5>
c00074c3:	83 ec 0c             	sub    esp,0xc
c00074c6:	68 67 34 02 c0       	push   0xc0023467
c00074cb:	e8 ba 89 00 00       	call   c000fe8a <KePanic(char const*)>
c00074d0:	83 c4 10             	add    esp,0x10
c00074d3:	46                   	inc    esi
c00074d4:	eb 88                	jmp    c000745e <KiFlushSymlinkChanges()+0x60>
c00074d6:	83 ec 0c             	sub    esp,0xc
c00074d9:	53                   	push   ebx
c00074da:	e8 25 0d 00 00       	call   c0008204 <File::close()>
c00074df:	83 c4 10             	add    esp,0x10
c00074e2:	85 db                	test   ebx,ebx
c00074e4:	74 0c                	je     c00074f2 <KiFlushSymlinkChanges()+0xf4>
c00074e6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00074e8:	83 ec 0c             	sub    esp,0xc
c00074eb:	53                   	push   ebx
c00074ec:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00074ef:	83 c4 10             	add    esp,0x10
c00074f2:	c7 05 c0 9e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029ec0,0x0
c00074fc:	83 c4 10             	add    esp,0x10
c00074ff:	5b                   	pop    ebx
c0007500:	5e                   	pop    esi
c0007501:	5f                   	pop    edi
c0007502:	c3                   	ret    

c0007503 <KiDeinitialiseSymlinks(void*)>:
c0007503:	e9 f6 fe ff ff       	jmp    c00073fe <KiFlushSymlinkChanges()>

c0007508 <KiGetSymlinkHash(char const*)>:
c0007508:	53                   	push   ebx
c0007509:	89 c3                	mov    ebx,eax
c000750b:	83 ec 14             	sub    esp,0x14
c000750e:	50                   	push   eax
c000750f:	e8 6c 90 ff ff       	call   c0000580 <strlen>
c0007514:	5a                   	pop    edx
c0007515:	59                   	pop    ecx
c0007516:	50                   	push   eax
c0007517:	53                   	push   ebx
c0007518:	e8 4e 6e 00 00       	call   c000e36b <KeCalculateCRC32(unsigned char*, int)>
c000751d:	83 c4 18             	add    esp,0x18
c0007520:	5b                   	pop    ebx
c0007521:	89 c2                	mov    edx,eax
c0007523:	c1 ea 10             	shr    edx,0x10
c0007526:	31 d0                	xor    eax,edx
c0007528:	c3                   	ret    

c0007529 <KiCreateSymlinkID()>:
c0007529:	55                   	push   ebp
c000752a:	57                   	push   edi
c000752b:	56                   	push   esi
c000752c:	53                   	push   ebx
c000752d:	31 db                	xor    ebx,ebx
c000752f:	83 ec 1c             	sub    esp,0x1c
c0007532:	e8 42 93 00 00       	call   c0010879 <KeRand()>
c0007537:	8b 2d 00 c3 02 c0    	mov    ebp,DWORD PTR ds:0xc002c300
c000753d:	31 d2                	xor    edx,edx
c000753f:	43                   	inc    ebx
c0007540:	31 ff                	xor    edi,edi
c0007542:	8d 4d 01             	lea    ecx,[ebp+0x1]
c0007545:	89 ee                	mov    esi,ebp
c0007547:	89 0d 00 c3 02 c0    	mov    DWORD PTR ds:0xc002c300,ecx
c000754d:	0f a4 c2 1f          	shld   edx,eax,0x1f
c0007551:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007555:	c1 e0 1f             	shl    eax,0x1f
c0007558:	81 fb 9a 02 00 00    	cmp    ebx,0x29a
c000755e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007562:	75 10                	jne    c0007574 <KiCreateSymlinkID()+0x4b>
c0007564:	83 ec 0c             	sub    esp,0xc
c0007567:	68 81 34 02 c0       	push   0xc0023481
c000756c:	e8 19 89 00 00       	call   c000fe8a <KePanic(char const*)>
c0007571:	83 c4 10             	add    esp,0x10
c0007574:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0007578:	75 06                	jne    c0007580 <KiCreateSymlinkID()+0x57>
c000757a:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c000757e:	74 b2                	je     c0007532 <KiCreateSymlinkID()+0x9>
c0007580:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007584:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007588:	83 c4 1c             	add    esp,0x1c
c000758b:	5b                   	pop    ebx
c000758c:	31 f0                	xor    eax,esi
c000758e:	5e                   	pop    esi
c000758f:	31 fa                	xor    edx,edi
c0007591:	5f                   	pop    edi
c0007592:	5d                   	pop    ebp
c0007593:	c3                   	ret    

c0007594 <KeRegisterSymlink(char const*, unsigned long long)>:
c0007594:	53                   	push   ebx
c0007595:	83 ec 0c             	sub    esp,0xc
c0007598:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000759c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00075a0:	a1 c0 9e 02 c0       	mov    eax,ds:0xc0029ec0
c00075a5:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00075a9:	68 00 01 00 00       	push   0x100
c00075ae:	6a 00                	push   0x0
c00075b0:	89 0c c5 e4 9e 02 c0 	mov    DWORD PTR [eax*8-0x3ffd611c],ecx
c00075b7:	89 14 c5 e0 9e 02 c0 	mov    DWORD PTR [eax*8-0x3ffd6120],edx
c00075be:	c1 e0 08             	shl    eax,0x8
c00075c1:	05 00 9f 02 c0       	add    eax,0xc0029f00
c00075c6:	50                   	push   eax
c00075c7:	e8 24 8f ff ff       	call   c00004f0 <memset>
c00075cc:	58                   	pop    eax
c00075cd:	a1 c0 9e 02 c0       	mov    eax,ds:0xc0029ec0
c00075d2:	5a                   	pop    edx
c00075d3:	c1 e0 08             	shl    eax,0x8
c00075d6:	53                   	push   ebx
c00075d7:	05 00 9f 02 c0       	add    eax,0xc0029f00
c00075dc:	50                   	push   eax
c00075dd:	e8 6e 90 ff ff       	call   c0000650 <strcpy>
c00075e2:	89 d8                	mov    eax,ebx
c00075e4:	e8 1f ff ff ff       	call   c0007508 <KiGetSymlinkHash(char const*)>
c00075e9:	ba 01 00 00 00       	mov    edx,0x1
c00075ee:	0f b7 c0             	movzx  eax,ax
c00075f1:	e8 d8 fd ff ff       	call   c00073ce <KiSetHashInTable(unsigned short, bool)>
c00075f6:	a1 c0 9e 02 c0       	mov    eax,ds:0xc0029ec0
c00075fb:	83 c4 10             	add    esp,0x10
c00075fe:	40                   	inc    eax
c00075ff:	a3 c0 9e 02 c0       	mov    ds:0xc0029ec0,eax
c0007604:	83 f8 03             	cmp    eax,0x3
c0007607:	7e 09                	jle    c0007612 <KeRegisterSymlink(char const*, unsigned long long)+0x7e>
c0007609:	83 c4 08             	add    esp,0x8
c000760c:	5b                   	pop    ebx
c000760d:	e9 ec fd ff ff       	jmp    c00073fe <KiFlushSymlinkChanges()>
c0007612:	83 c4 08             	add    esp,0x8
c0007615:	5b                   	pop    ebx
c0007616:	c3                   	ret    

c0007617 <KeInitialiseSymlinks()>:
c0007617:	57                   	push   edi
c0007618:	56                   	push   esi
c0007619:	53                   	push   ebx
c000761a:	81 ec 14 01 00 00    	sub    esp,0x114
c0007620:	68 00 20 00 00       	push   0x2000
c0007625:	6a 00                	push   0x0
c0007627:	68 00 a3 02 c0       	push   0xc002a300
c000762c:	c7 05 00 c3 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c300,0x0
c0007636:	c7 05 c0 9e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029ec0,0x0
c0007640:	e8 ab 8e ff ff       	call   c00004f0 <memset>
c0007645:	59                   	pop    ecx
c0007646:	5b                   	pop    ebx
c0007647:	6a 00                	push   0x0
c0007649:	68 03 75 00 c0       	push   0xc0007503
c000764e:	e8 fe 5a 00 00       	call   c000d151 <KeRegisterAtexit(void (*)(void*), void*)>
c0007653:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c000765a:	e8 1d 85 00 00       	call   c000fb7c <malloc>
c000765f:	83 c4 0c             	add    esp,0xc
c0007662:	ff 35 78 fa 02 c0    	push   DWORD PTR ds:0xc002fa78
c0007668:	68 fb 33 02 c0       	push   0xc00233fb
c000766d:	50                   	push   eax
c000766e:	89 c3                	mov    ebx,eax
c0007670:	e8 13 0b 00 00       	call   c0008188 <File::File(char const*, Process*)>
c0007675:	83 c4 10             	add    esp,0x10
c0007678:	85 db                	test   ebx,ebx
c000767a:	75 10                	jne    c000768c <KeInitialiseSymlinks()+0x75>
c000767c:	83 ec 0c             	sub    esp,0xc
c000767f:	68 8a 34 02 c0       	push   0xc002348a
c0007684:	e8 01 88 00 00       	call   c000fe8a <KePanic(char const*)>
c0007689:	83 c4 10             	add    esp,0x10
c000768c:	83 ec 0c             	sub    esp,0xc
c000768f:	53                   	push   ebx
c0007690:	e8 d5 0d 00 00       	call   c000846a <File::exists()>
c0007695:	83 c4 10             	add    esp,0x10
c0007698:	84 c0                	test   al,al
c000769a:	75 3a                	jne    c00076d6 <KeInitialiseSymlinks()+0xbf>
c000769c:	52                   	push   edx
c000769d:	52                   	push   edx
c000769e:	6a 12                	push   0x12
c00076a0:	53                   	push   ebx
c00076a1:	e8 00 0b 00 00       	call   c00081a6 <File::open(FileOpenMode)>
c00076a6:	83 c4 10             	add    esp,0x10
c00076a9:	85 c0                	test   eax,eax
c00076ab:	74 10                	je     c00076bd <KeInitialiseSymlinks()+0xa6>
c00076ad:	83 ec 0c             	sub    esp,0xc
c00076b0:	68 a7 34 02 c0       	push   0xc00234a7
c00076b5:	e8 d0 87 00 00       	call   c000fe8a <KePanic(char const*)>
c00076ba:	83 c4 10             	add    esp,0x10
c00076bd:	83 ec 0c             	sub    esp,0xc
c00076c0:	53                   	push   ebx
c00076c1:	e8 3e 0b 00 00       	call   c0008204 <File::close()>
c00076c6:	83 c4 10             	add    esp,0x10
c00076c9:	85 db                	test   ebx,ebx
c00076cb:	0f 84 9e 00 00 00    	je     c000776f <KeInitialiseSymlinks()+0x158>
c00076d1:	e9 8d 00 00 00       	jmp    c0007763 <KeInitialiseSymlinks()+0x14c>
c00076d6:	50                   	push   eax
c00076d7:	50                   	push   eax
c00076d8:	6a 01                	push   0x1
c00076da:	53                   	push   ebx
c00076db:	e8 c6 0a 00 00       	call   c00081a6 <File::open(FileOpenMode)>
c00076e0:	83 c4 10             	add    esp,0x10
c00076e3:	85 c0                	test   eax,eax
c00076e5:	74 10                	je     c00076f7 <KeInitialiseSymlinks()+0xe0>
c00076e7:	83 ec 0c             	sub    esp,0xc
c00076ea:	68 c4 34 02 c0       	push   0xc00234c4
c00076ef:	e8 96 87 00 00       	call   c000fe8a <KePanic(char const*)>
c00076f4:	83 c4 10             	add    esp,0x10
c00076f7:	ff 05 00 c3 02 c0    	inc    DWORD PTR ds:0xc002c300
c00076fd:	83 ec 0c             	sub    esp,0xc
c0007700:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0007704:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007706:	57                   	push   edi
c0007707:	8d 74 24 20          	lea    esi,[esp+0x20]
c000770b:	56                   	push   esi
c000770c:	6a 00                	push   0x0
c000770e:	68 00 01 00 00       	push   0x100
c0007713:	53                   	push   ebx
c0007714:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0007717:	83 c4 20             	add    esp,0x20
c000771a:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c0007722:	75 33                	jne    c0007757 <KeInitialiseSymlinks()+0x140>
c0007724:	83 ec 0c             	sub    esp,0xc
c0007727:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007729:	57                   	push   edi
c000772a:	8d 54 24 18          	lea    edx,[esp+0x18]
c000772e:	52                   	push   edx
c000772f:	6a 00                	push   0x0
c0007731:	6a 08                	push   0x8
c0007733:	53                   	push   ebx
c0007734:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0007737:	83 c4 20             	add    esp,0x20
c000773a:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000773f:	75 16                	jne    c0007757 <KeInitialiseSymlinks()+0x140>
c0007741:	89 f0                	mov    eax,esi
c0007743:	e8 c0 fd ff ff       	call   c0007508 <KiGetSymlinkHash(char const*)>
c0007748:	ba 01 00 00 00       	mov    edx,0x1
c000774d:	0f b7 c0             	movzx  eax,ax
c0007750:	e8 79 fc ff ff       	call   c00073ce <KiSetHashInTable(unsigned short, bool)>
c0007755:	eb a0                	jmp    c00076f7 <KeInitialiseSymlinks()+0xe0>
c0007757:	83 ec 0c             	sub    esp,0xc
c000775a:	53                   	push   ebx
c000775b:	e8 a4 0a 00 00       	call   c0008204 <File::close()>
c0007760:	83 c4 10             	add    esp,0x10
c0007763:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007765:	83 ec 0c             	sub    esp,0xc
c0007768:	53                   	push   ebx
c0007769:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000776c:	83 c4 10             	add    esp,0x10
c000776f:	81 c4 10 01 00 00    	add    esp,0x110
c0007775:	5b                   	pop    ebx
c0007776:	5e                   	pop    esi
c0007777:	5f                   	pop    edi
c0007778:	c3                   	ret    

c0007779 <KiIsSymlinkRegistered(char const*)>:
c0007779:	55                   	push   ebp
c000777a:	57                   	push   edi
c000777b:	56                   	push   esi
c000777c:	53                   	push   ebx
c000777d:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0007783:	8b b4 24 30 01 00 00 	mov    esi,DWORD PTR [esp+0x130]
c000778a:	89 f0                	mov    eax,esi
c000778c:	e8 77 fd ff ff       	call   c0007508 <KiGetSymlinkHash(char const*)>
c0007791:	0f b7 c0             	movzx  eax,ax
c0007794:	e8 1b fc ff ff       	call   c00073b4 <KiIsHashInTable(unsigned short)>
c0007799:	31 d2                	xor    edx,edx
c000779b:	88 c1                	mov    cl,al
c000779d:	31 c0                	xor    eax,eax
c000779f:	84 c9                	test   cl,cl
c00077a1:	0f 84 31 01 00 00    	je     c00078d8 <KiIsSymlinkRegistered(char const*)+0x15f>
c00077a7:	31 db                	xor    ebx,ebx
c00077a9:	39 1d c0 9e 02 c0    	cmp    DWORD PTR ds:0xc0029ec0,ebx
c00077af:	7e 30                	jle    c00077e1 <KiIsSymlinkRegistered(char const*)+0x68>
c00077b1:	89 d8                	mov    eax,ebx
c00077b3:	c1 e0 08             	shl    eax,0x8
c00077b6:	51                   	push   ecx
c00077b7:	05 00 9f 02 c0       	add    eax,0xc0029f00
c00077bc:	51                   	push   ecx
c00077bd:	50                   	push   eax
c00077be:	56                   	push   esi
c00077bf:	e8 bc 8f ff ff       	call   c0000780 <strcmp>
c00077c4:	83 c4 10             	add    esp,0x10
c00077c7:	85 c0                	test   eax,eax
c00077c9:	75 13                	jne    c00077de <KiIsSymlinkRegistered(char const*)+0x65>
c00077cb:	8b 04 dd e0 9e 02 c0 	mov    eax,DWORD PTR [ebx*8-0x3ffd6120]
c00077d2:	8b 14 dd e4 9e 02 c0 	mov    edx,DWORD PTR [ebx*8-0x3ffd611c]
c00077d9:	e9 fa 00 00 00       	jmp    c00078d8 <KiIsSymlinkRegistered(char const*)+0x15f>
c00077de:	43                   	inc    ebx
c00077df:	eb c8                	jmp    c00077a9 <KiIsSymlinkRegistered(char const*)+0x30>
c00077e1:	83 ec 0c             	sub    esp,0xc
c00077e4:	68 14 01 00 00       	push   0x114
c00077e9:	e8 8e 83 00 00       	call   c000fb7c <malloc>
c00077ee:	83 c4 0c             	add    esp,0xc
c00077f1:	ff 35 78 fa 02 c0    	push   DWORD PTR ds:0xc002fa78
c00077f7:	68 fb 33 02 c0       	push   0xc00233fb
c00077fc:	50                   	push   eax
c00077fd:	89 c3                	mov    ebx,eax
c00077ff:	e8 84 09 00 00       	call   c0008188 <File::File(char const*, Process*)>
c0007804:	83 c4 10             	add    esp,0x10
c0007807:	85 db                	test   ebx,ebx
c0007809:	75 12                	jne    c000781d <KiIsSymlinkRegistered(char const*)+0xa4>
c000780b:	83 ec 0c             	sub    esp,0xc
c000780e:	68 df 34 02 c0       	push   0xc00234df
c0007813:	e8 72 86 00 00       	call   c000fe8a <KePanic(char const*)>
c0007818:	83 c4 10             	add    esp,0x10
c000781b:	eb 10                	jmp    c000782d <KiIsSymlinkRegistered(char const*)+0xb4>
c000781d:	83 ec 0c             	sub    esp,0xc
c0007820:	53                   	push   ebx
c0007821:	e8 44 0c 00 00       	call   c000846a <File::exists()>
c0007826:	83 c4 10             	add    esp,0x10
c0007829:	84 c0                	test   al,al
c000782b:	74 de                	je     c000780b <KiIsSymlinkRegistered(char const*)+0x92>
c000782d:	52                   	push   edx
c000782e:	52                   	push   edx
c000782f:	6a 01                	push   0x1
c0007831:	53                   	push   ebx
c0007832:	e8 6f 09 00 00       	call   c00081a6 <File::open(FileOpenMode)>
c0007837:	83 c4 10             	add    esp,0x10
c000783a:	85 c0                	test   eax,eax
c000783c:	74 10                	je     c000784e <KiIsSymlinkRegistered(char const*)+0xd5>
c000783e:	83 ec 0c             	sub    esp,0xc
c0007841:	68 fa 34 02 c0       	push   0xc00234fa
c0007846:	e8 3f 86 00 00       	call   c000fe8a <KePanic(char const*)>
c000784b:	83 c4 10             	add    esp,0x10
c000784e:	83 ec 0c             	sub    esp,0xc
c0007851:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007853:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c0007857:	55                   	push   ebp
c0007858:	8d 7c 24 20          	lea    edi,[esp+0x20]
c000785c:	57                   	push   edi
c000785d:	6a 00                	push   0x0
c000785f:	68 00 01 00 00       	push   0x100
c0007864:	53                   	push   ebx
c0007865:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0007868:	83 c4 20             	add    esp,0x20
c000786b:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c0007873:	75 4b                	jne    c00078c0 <KiIsSymlinkRegistered(char const*)+0x147>
c0007875:	83 ec 0c             	sub    esp,0xc
c0007878:	8b 03                	mov    eax,DWORD PTR [ebx]
c000787a:	55                   	push   ebp
c000787b:	8d 54 24 18          	lea    edx,[esp+0x18]
c000787f:	52                   	push   edx
c0007880:	6a 00                	push   0x0
c0007882:	6a 08                	push   0x8
c0007884:	53                   	push   ebx
c0007885:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0007888:	83 c4 20             	add    esp,0x20
c000788b:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0007890:	75 2e                	jne    c00078c0 <KiIsSymlinkRegistered(char const*)+0x147>
c0007892:	50                   	push   eax
c0007893:	50                   	push   eax
c0007894:	57                   	push   edi
c0007895:	56                   	push   esi
c0007896:	e8 e5 8e ff ff       	call   c0000780 <strcmp>
c000789b:	83 c4 10             	add    esp,0x10
c000789e:	85 c0                	test   eax,eax
c00078a0:	75 ac                	jne    c000784e <KiIsSymlinkRegistered(char const*)+0xd5>
c00078a2:	83 ec 0c             	sub    esp,0xc
c00078a5:	53                   	push   ebx
c00078a6:	e8 59 09 00 00       	call   c0008204 <File::close()>
c00078ab:	8b 03                	mov    eax,DWORD PTR [ebx]
c00078ad:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00078b0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00078b3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00078b7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00078bb:	83 c4 10             	add    esp,0x10
c00078be:	eb 18                	jmp    c00078d8 <KiIsSymlinkRegistered(char const*)+0x15f>
c00078c0:	83 ec 0c             	sub    esp,0xc
c00078c3:	53                   	push   ebx
c00078c4:	e8 3b 09 00 00       	call   c0008204 <File::close()>
c00078c9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00078cb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00078ce:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00078d1:	83 c4 10             	add    esp,0x10
c00078d4:	31 c0                	xor    eax,eax
c00078d6:	31 d2                	xor    edx,edx
c00078d8:	81 c4 1c 01 00 00    	add    esp,0x11c
c00078de:	5b                   	pop    ebx
c00078df:	5e                   	pop    esi
c00078e0:	5f                   	pop    edi
c00078e1:	5d                   	pop    ebp
c00078e2:	c3                   	ret    

c00078e3 <KeDereferenceSymlink(char const*, char*)>:
c00078e3:	55                   	push   ebp
c00078e4:	57                   	push   edi
c00078e5:	56                   	push   esi
c00078e6:	53                   	push   ebx
c00078e7:	83 ec 48             	sub    esp,0x48
c00078ea:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c00078ee:	56                   	push   esi
c00078ef:	e8 85 fe ff ff       	call   c0007779 <KiIsSymlinkRegistered(char const*)>
c00078f4:	83 c4 10             	add    esp,0x10
c00078f7:	89 c7                	mov    edi,eax
c00078f9:	89 d0                	mov    eax,edx
c00078fb:	09 f8                	or     eax,edi
c00078fd:	75 07                	jne    c0007906 <KeDereferenceSymlink(char const*, char*)+0x23>
c00078ff:	31 c0                	xor    eax,eax
c0007901:	e9 7c 01 00 00       	jmp    c0007a82 <KeDereferenceSymlink(char const*, char*)+0x19f>
c0007906:	83 ec 0c             	sub    esp,0xc
c0007909:	89 d5                	mov    ebp,edx
c000790b:	68 14 01 00 00       	push   0x114
c0007910:	e8 67 82 00 00       	call   c000fb7c <malloc>
c0007915:	83 c4 0c             	add    esp,0xc
c0007918:	ff 35 78 fa 02 c0    	push   DWORD PTR ds:0xc002fa78
c000791e:	56                   	push   esi
c000791f:	50                   	push   eax
c0007920:	89 c3                	mov    ebx,eax
c0007922:	e8 61 08 00 00       	call   c0008188 <File::File(char const*, Process*)>
c0007927:	83 c4 10             	add    esp,0x10
c000792a:	85 db                	test   ebx,ebx
c000792c:	0f 84 32 01 00 00    	je     c0007a64 <KeDereferenceSymlink(char const*, char*)+0x181>
c0007932:	56                   	push   esi
c0007933:	56                   	push   esi
c0007934:	6a 01                	push   0x1
c0007936:	53                   	push   ebx
c0007937:	e8 6a 08 00 00       	call   c00081a6 <File::open(FileOpenMode)>
c000793c:	83 c4 10             	add    esp,0x10
c000793f:	85 c0                	test   eax,eax
c0007941:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007943:	74 09                	je     c000794e <KeDereferenceSymlink(char const*, char*)+0x6b>
c0007945:	83 ec 0c             	sub    esp,0xc
c0007948:	53                   	push   ebx
c0007949:	e9 10 01 00 00       	jmp    c0007a5e <KeDereferenceSymlink(char const*, char*)+0x17b>
c000794e:	83 ec 0c             	sub    esp,0xc
c0007951:	8d 74 24 18          	lea    esi,[esp+0x18]
c0007955:	56                   	push   esi
c0007956:	8d 54 24 37          	lea    edx,[esp+0x37]
c000795a:	52                   	push   edx
c000795b:	6a 00                	push   0x0
c000795d:	6a 08                	push   0x8
c000795f:	53                   	push   ebx
c0007960:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0007963:	83 c4 20             	add    esp,0x20
c0007966:	85 c0                	test   eax,eax
c0007968:	0f 85 e2 00 00 00    	jne    c0007a50 <KeDereferenceSymlink(char const*, char*)+0x16d>
c000796e:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c0007973:	0f 85 d7 00 00 00    	jne    c0007a50 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0007979:	83 ec 0c             	sub    esp,0xc
c000797c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000797e:	56                   	push   esi
c000797f:	8d 54 24 20          	lea    edx,[esp+0x20]
c0007983:	52                   	push   edx
c0007984:	6a 00                	push   0x0
c0007986:	6a 08                	push   0x8
c0007988:	53                   	push   ebx
c0007989:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000798c:	83 c4 20             	add    esp,0x20
c000798f:	85 c0                	test   eax,eax
c0007991:	0f 85 b9 00 00 00    	jne    c0007a50 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0007997:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000799c:	0f 85 ae 00 00 00    	jne    c0007a50 <KeDereferenceSymlink(char const*, char*)+0x16d>
c00079a2:	39 6c 24 14          	cmp    DWORD PTR [esp+0x14],ebp
c00079a6:	0f 85 53 ff ff ff    	jne    c00078ff <KeDereferenceSymlink(char const*, char*)+0x1c>
c00079ac:	39 7c 24 10          	cmp    DWORD PTR [esp+0x10],edi
c00079b0:	0f 85 49 ff ff ff    	jne    c00078ff <KeDereferenceSymlink(char const*, char*)+0x1c>
c00079b6:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00079be:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00079c6:	51                   	push   ecx
c00079c7:	8d 44 24 0f          	lea    eax,[esp+0xf]
c00079cb:	50                   	push   eax
c00079cc:	8d 44 24 20          	lea    eax,[esp+0x20]
c00079d0:	50                   	push   eax
c00079d1:	53                   	push   ebx
c00079d2:	e8 d1 0a 00 00       	call   c00084a8 <File::stat(unsigned long long*, bool*)>
c00079d7:	83 c4 10             	add    esp,0x10
c00079da:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00079df:	75 6f                	jne    c0007a50 <KeDereferenceSymlink(char const*, char*)+0x16d>
c00079e1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00079e5:	31 c9                	xor    ecx,ecx
c00079e7:	bf 0f 00 00 00       	mov    edi,0xf
c00079ec:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00079f0:	39 c7                	cmp    edi,eax
c00079f2:	89 cf                	mov    edi,ecx
c00079f4:	19 d7                	sbb    edi,edx
c00079f6:	73 58                	jae    c0007a50 <KeDereferenceSymlink(char const*, char*)+0x16d>
c00079f8:	83 c0 f0             	add    eax,0xfffffff0
c00079fb:	bf ff 00 00 00       	mov    edi,0xff
c0007a00:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007a04:	83 d2 ff             	adc    edx,0xffffffff
c0007a07:	39 c7                	cmp    edi,eax
c0007a09:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007a0d:	19 d1                	sbb    ecx,edx
c0007a0f:	72 53                	jb     c0007a64 <KeDereferenceSymlink(char const*, char*)+0x181>
c0007a11:	40                   	inc    eax
c0007a12:	52                   	push   edx
c0007a13:	50                   	push   eax
c0007a14:	6a 00                	push   0x0
c0007a16:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0007a1a:	e8 d1 8a ff ff       	call   c00004f0 <memset>
c0007a1f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007a21:	89 34 24             	mov    DWORD PTR [esp],esi
c0007a24:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c0007a28:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0007a2c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0007a30:	53                   	push   ebx
c0007a31:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0007a34:	83 c4 20             	add    esp,0x20
c0007a37:	85 c0                	test   eax,eax
c0007a39:	75 15                	jne    c0007a50 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0007a3b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007a3f:	89 c7                	mov    edi,eax
c0007a41:	c1 ff 1f             	sar    edi,0x1f
c0007a44:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0007a48:	75 06                	jne    c0007a50 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0007a4a:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0007a4e:	74 19                	je     c0007a69 <KeDereferenceSymlink(char const*, char*)+0x186>
c0007a50:	83 ec 0c             	sub    esp,0xc
c0007a53:	53                   	push   ebx
c0007a54:	e8 ab 07 00 00       	call   c0008204 <File::close()>
c0007a59:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007a5b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007a5e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007a61:	83 c4 10             	add    esp,0x10
c0007a64:	83 c8 ff             	or     eax,0xffffffff
c0007a67:	eb 19                	jmp    c0007a82 <KeDereferenceSymlink(char const*, char*)+0x19f>
c0007a69:	83 ec 0c             	sub    esp,0xc
c0007a6c:	53                   	push   ebx
c0007a6d:	e8 92 07 00 00       	call   c0008204 <File::close()>
c0007a72:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007a74:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007a77:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007a7a:	83 c4 10             	add    esp,0x10
c0007a7d:	b8 01 00 00 00       	mov    eax,0x1
c0007a82:	83 c4 3c             	add    esp,0x3c
c0007a85:	5b                   	pop    ebx
c0007a86:	5e                   	pop    esi
c0007a87:	5f                   	pop    edi
c0007a88:	5d                   	pop    ebp
c0007a89:	c3                   	ret    

c0007a8a <KeCreateSymlink(char const*, char const*)>:
c0007a8a:	55                   	push   ebp
c0007a8b:	57                   	push   edi
c0007a8c:	56                   	push   esi
c0007a8d:	53                   	push   ebx
c0007a8e:	83 ec 38             	sub    esp,0x38
c0007a91:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0007a95:	68 14 01 00 00       	push   0x114
c0007a9a:	e8 dd 80 00 00       	call   c000fb7c <malloc>
c0007a9f:	6a 00                	push   0x0
c0007aa1:	ff 35 78 fa 02 c0    	push   DWORD PTR ds:0xc002fa78
c0007aa7:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007aab:	89 c3                	mov    ebx,eax
c0007aad:	50                   	push   eax
c0007aae:	e8 d7 05 00 00       	call   c000808a <File::File(char const*, Process*, bool)>
c0007ab3:	83 c4 20             	add    esp,0x20
c0007ab6:	85 db                	test   ebx,ebx
c0007ab8:	b8 01 00 00 00       	mov    eax,0x1
c0007abd:	0f 84 fb 00 00 00    	je     c0007bbe <KeCreateSymlink(char const*, char const*)+0x134>
c0007ac3:	52                   	push   edx
c0007ac4:	52                   	push   edx
c0007ac5:	6a 12                	push   0x12
c0007ac7:	53                   	push   ebx
c0007ac8:	e8 d9 06 00 00       	call   c00081a6 <File::open(FileOpenMode)>
c0007acd:	83 c4 10             	add    esp,0x10
c0007ad0:	85 c0                	test   eax,eax
c0007ad2:	74 0b                	je     c0007adf <KeCreateSymlink(char const*, char const*)+0x55>
c0007ad4:	83 ec 0c             	sub    esp,0xc
c0007ad7:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007ad9:	53                   	push   ebx
c0007ada:	e9 d4 00 00 00       	jmp    c0007bb3 <KeCreateSymlink(char const*, char const*)+0x129>
c0007adf:	8d 7c 24 17          	lea    edi,[esp+0x17]
c0007ae3:	be 15 35 02 c0       	mov    esi,0xc0023515
c0007ae8:	b9 09 00 00 00       	mov    ecx,0x9
c0007aed:	fc                   	cld    
c0007aee:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0007af0:	83 ec 0c             	sub    esp,0xc
c0007af3:	8d 74 24 10          	lea    esi,[esp+0x10]
c0007af7:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007af9:	56                   	push   esi
c0007afa:	8d 54 24 27          	lea    edx,[esp+0x27]
c0007afe:	52                   	push   edx
c0007aff:	6a 00                	push   0x0
c0007b01:	6a 08                	push   0x8
c0007b03:	53                   	push   ebx
c0007b04:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0007b07:	83 c4 20             	add    esp,0x20
c0007b0a:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0007b0f:	0f 85 90 00 00 00    	jne    c0007ba5 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007b15:	85 c0                	test   eax,eax
c0007b17:	0f 85 88 00 00 00    	jne    c0007ba5 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007b1d:	e8 07 fa ff ff       	call   c0007529 <KiCreateSymlinkID()>
c0007b22:	83 ec 0c             	sub    esp,0xc
c0007b25:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0007b29:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0007b2d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007b2f:	56                   	push   esi
c0007b30:	8d 54 24 18          	lea    edx,[esp+0x18]
c0007b34:	52                   	push   edx
c0007b35:	6a 00                	push   0x0
c0007b37:	6a 08                	push   0x8
c0007b39:	53                   	push   ebx
c0007b3a:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0007b3d:	83 c4 20             	add    esp,0x20
c0007b40:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0007b45:	75 5e                	jne    c0007ba5 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007b47:	85 c0                	test   eax,eax
c0007b49:	75 5a                	jne    c0007ba5 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007b4b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007b4d:	83 ec 0c             	sub    esp,0xc
c0007b50:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0007b53:	55                   	push   ebp
c0007b54:	e8 27 8a ff ff       	call   c0000580 <strlen>
c0007b59:	31 d2                	xor    edx,edx
c0007b5b:	89 34 24             	mov    DWORD PTR [esp],esi
c0007b5e:	55                   	push   ebp
c0007b5f:	52                   	push   edx
c0007b60:	50                   	push   eax
c0007b61:	53                   	push   ebx
c0007b62:	ff d7                	call   edi
c0007b64:	83 c4 14             	add    esp,0x14
c0007b67:	55                   	push   ebp
c0007b68:	89 c6                	mov    esi,eax
c0007b6a:	e8 11 8a ff ff       	call   c0000580 <strlen>
c0007b6f:	83 c4 10             	add    esp,0x10
c0007b72:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0007b76:	75 2d                	jne    c0007ba5 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007b78:	85 f6                	test   esi,esi
c0007b7a:	75 29                	jne    c0007ba5 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007b7c:	50                   	push   eax
c0007b7d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0007b81:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0007b85:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0007b89:	e8 06 fa ff ff       	call   c0007594 <KeRegisterSymlink(char const*, unsigned long long)>
c0007b8e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007b91:	e8 6e 06 00 00       	call   c0008204 <File::close()>
c0007b96:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007b98:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007b9b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007b9e:	83 c4 10             	add    esp,0x10
c0007ba1:	31 c0                	xor    eax,eax
c0007ba3:	eb 19                	jmp    c0007bbe <KeCreateSymlink(char const*, char const*)+0x134>
c0007ba5:	83 ec 0c             	sub    esp,0xc
c0007ba8:	53                   	push   ebx
c0007ba9:	e8 56 06 00 00       	call   c0008204 <File::close()>
c0007bae:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007bb0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007bb3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007bb6:	83 c4 10             	add    esp,0x10
c0007bb9:	b8 01 00 00 00       	mov    eax,0x1
c0007bbe:	83 c4 2c             	add    esp,0x2c
c0007bc1:	5b                   	pop    ebx
c0007bc2:	5e                   	pop    esi
c0007bc3:	5f                   	pop    edi
c0007bc4:	5d                   	pop    ebp
c0007bc5:	c3                   	ret    

c0007bc6 <File::read(unsigned long long, void*, int*)>:
c0007bc6:	53                   	push   ebx
c0007bc7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007bcb:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0007bcf:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0007bd6:	83 f8 19             	cmp    eax,0x19
c0007bd9:	77 35                	ja     c0007c10 <File::read(unsigned long long, void*, int*)+0x4a>
c0007bdb:	8b 04 85 e0 ca 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3520]
c0007be2:	85 c0                	test   eax,eax
c0007be4:	74 2a                	je     c0007c10 <File::read(unsigned long long, void*, int*)+0x4a>
c0007be6:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0007bec:	85 c0                	test   eax,eax
c0007bee:	74 20                	je     c0007c10 <File::read(unsigned long long, void*, int*)+0x4a>
c0007bf0:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0007bf4:	74 21                	je     c0007c17 <File::read(unsigned long long, void*, int*)+0x51>
c0007bf6:	8b 08                	mov    ecx,DWORD PTR [eax]
c0007bf8:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0007bfc:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0007c02:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007c06:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007c0a:	5b                   	pop    ebx
c0007c0b:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c0007c0e:	ff e0                	jmp    eax
c0007c10:	b8 0b 00 00 00       	mov    eax,0xb
c0007c15:	eb 05                	jmp    c0007c1c <File::read(unsigned long long, void*, int*)+0x56>
c0007c17:	b8 05 00 00 00       	mov    eax,0x5
c0007c1c:	5b                   	pop    ebx
c0007c1d:	c3                   	ret    

c0007c1e <File::write(unsigned long long, void*, int*)>:
c0007c1e:	53                   	push   ebx
c0007c1f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007c23:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0007c27:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0007c2e:	83 f8 19             	cmp    eax,0x19
c0007c31:	77 35                	ja     c0007c68 <File::write(unsigned long long, void*, int*)+0x4a>
c0007c33:	8b 04 85 e0 ca 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3520]
c0007c3a:	85 c0                	test   eax,eax
c0007c3c:	74 2a                	je     c0007c68 <File::write(unsigned long long, void*, int*)+0x4a>
c0007c3e:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0007c44:	85 c0                	test   eax,eax
c0007c46:	74 20                	je     c0007c68 <File::write(unsigned long long, void*, int*)+0x4a>
c0007c48:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0007c4c:	74 21                	je     c0007c6f <File::write(unsigned long long, void*, int*)+0x51>
c0007c4e:	8b 08                	mov    ecx,DWORD PTR [eax]
c0007c50:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0007c54:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0007c5a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007c5e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007c62:	5b                   	pop    ebx
c0007c63:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c0007c66:	ff e0                	jmp    eax
c0007c68:	b8 0b 00 00 00       	mov    eax,0xb
c0007c6d:	eb 05                	jmp    c0007c74 <File::write(unsigned long long, void*, int*)+0x56>
c0007c6f:	b8 05 00 00 00       	mov    eax,0x5
c0007c74:	5b                   	pop    ebx
c0007c75:	c3                   	ret    

c0007c76 <Directory::read(unsigned long long, void*, int*)>:
c0007c76:	53                   	push   ebx
c0007c77:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007c7b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0007c7f:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0007c86:	83 f8 19             	cmp    eax,0x19
c0007c89:	77 35                	ja     c0007cc0 <Directory::read(unsigned long long, void*, int*)+0x4a>
c0007c8b:	8b 04 85 e0 ca 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3520]
c0007c92:	85 c0                	test   eax,eax
c0007c94:	74 2a                	je     c0007cc0 <Directory::read(unsigned long long, void*, int*)+0x4a>
c0007c96:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0007c9c:	85 c0                	test   eax,eax
c0007c9e:	74 20                	je     c0007cc0 <Directory::read(unsigned long long, void*, int*)+0x4a>
c0007ca0:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0007ca4:	74 21                	je     c0007cc7 <Directory::read(unsigned long long, void*, int*)+0x51>
c0007ca6:	8b 08                	mov    ecx,DWORD PTR [eax]
c0007ca8:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0007cac:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0007cb2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007cb6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007cba:	5b                   	pop    ebx
c0007cbb:	8b 41 54             	mov    eax,DWORD PTR [ecx+0x54]
c0007cbe:	ff e0                	jmp    eax
c0007cc0:	b8 0b 00 00 00       	mov    eax,0xb
c0007cc5:	eb 05                	jmp    c0007ccc <Directory::read(unsigned long long, void*, int*)+0x56>
c0007cc7:	b8 05 00 00 00       	mov    eax,0x5
c0007ccc:	5b                   	pop    ebx
c0007ccd:	c3                   	ret    

c0007cce <Directory::write(unsigned long long, void*, int*)>:
c0007cce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007cd2:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0007cd9:	b8 0b 00 00 00       	mov    eax,0xb
c0007cde:	83 fa 19             	cmp    edx,0x19
c0007ce1:	77 18                	ja     c0007cfb <Directory::write(unsigned long long, void*, int*)+0x2d>
c0007ce3:	8b 14 95 e0 ca 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3520]
c0007cea:	85 d2                	test   edx,edx
c0007cec:	74 0d                	je     c0007cfb <Directory::write(unsigned long long, void*, int*)+0x2d>
c0007cee:	83 ba 74 01 00 00 01 	cmp    DWORD PTR [edx+0x174],0x1
c0007cf5:	19 c0                	sbb    eax,eax
c0007cf7:	83 e0 0a             	and    eax,0xa
c0007cfa:	40                   	inc    eax
c0007cfb:	c3                   	ret    

c0007cfc <File::isAtty()>:
c0007cfc:	31 c0                	xor    eax,eax
c0007cfe:	c3                   	ret    
c0007cff:	90                   	nop

c0007d00 <Directory::isAtty()>:
c0007d00:	31 c0                	xor    eax,eax
c0007d02:	c3                   	ret    
c0007d03:	90                   	nop

c0007d04 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0007d04:	b8 0a 00 00 00       	mov    eax,0xa
c0007d09:	c3                   	ret    

c0007d0a <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c0007d0a:	b8 0a 00 00 00       	mov    eax,0xa
c0007d0f:	c3                   	ret    

c0007d10 <Filesystem::allocateSwapfile(char const*, int)>:
c0007d10:	31 c0                	xor    eax,eax
c0007d12:	31 d2                	xor    edx,edx
c0007d14:	c3                   	ret    
c0007d15:	90                   	nop

c0007d16 <File::~File()>:
c0007d16:	83 ec 0c             	sub    esp,0xc
c0007d19:	ba ec 35 02 c0       	mov    edx,0xc00235ec
c0007d1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d22:	89 10                	mov    DWORD PTR [eax],edx
c0007d24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d28:	83 ec 0c             	sub    esp,0xc
c0007d2b:	50                   	push   eax
c0007d2c:	e8 95 b3 00 00       	call   c00130c6 <UnixFile::~UnixFile()>
c0007d31:	83 c4 10             	add    esp,0x10
c0007d34:	90                   	nop
c0007d35:	83 c4 0c             	add    esp,0xc
c0007d38:	c3                   	ret    
c0007d39:	90                   	nop

c0007d3a <File::~File()>:
c0007d3a:	83 ec 0c             	sub    esp,0xc
c0007d3d:	83 ec 0c             	sub    esp,0xc
c0007d40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007d44:	e8 cd ff ff ff       	call   c0007d16 <File::~File()>
c0007d49:	83 c4 10             	add    esp,0x10
c0007d4c:	83 ec 08             	sub    esp,0x8
c0007d4f:	68 14 01 00 00       	push   0x114
c0007d54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007d58:	e8 98 55 00 00       	call   c000d2f5 <operator delete(void*, unsigned long)>
c0007d5d:	83 c4 10             	add    esp,0x10
c0007d60:	83 c4 0c             	add    esp,0xc
c0007d63:	c3                   	ret    

c0007d64 <Directory::~Directory()>:
c0007d64:	83 ec 0c             	sub    esp,0xc
c0007d67:	ba 08 36 02 c0       	mov    edx,0xc0023608
c0007d6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d70:	89 10                	mov    DWORD PTR [eax],edx
c0007d72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d76:	83 ec 0c             	sub    esp,0xc
c0007d79:	50                   	push   eax
c0007d7a:	e8 47 b3 00 00       	call   c00130c6 <UnixFile::~UnixFile()>
c0007d7f:	83 c4 10             	add    esp,0x10
c0007d82:	90                   	nop
c0007d83:	83 c4 0c             	add    esp,0xc
c0007d86:	c3                   	ret    
c0007d87:	90                   	nop

c0007d88 <Directory::~Directory()>:
c0007d88:	83 ec 0c             	sub    esp,0xc
c0007d8b:	83 ec 0c             	sub    esp,0xc
c0007d8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007d92:	e8 cd ff ff ff       	call   c0007d64 <Directory::~Directory()>
c0007d97:	83 c4 10             	add    esp,0x10
c0007d9a:	83 ec 08             	sub    esp,0x8
c0007d9d:	68 14 01 00 00       	push   0x114
c0007da2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007da6:	e8 4a 55 00 00       	call   c000d2f5 <operator delete(void*, unsigned long)>
c0007dab:	83 c4 10             	add    esp,0x10
c0007dae:	83 c4 0c             	add    esp,0xc
c0007db1:	c3                   	ret    

c0007db2 <Filesystem::Filesystem()>:
c0007db2:	ba 80 35 02 c0       	mov    edx,0xc0023580
c0007db7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007dbb:	89 10                	mov    DWORD PTR [eax],edx
c0007dbd:	8b 15 04 c3 02 c0    	mov    edx,DWORD PTR ds:0xc002c304
c0007dc3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007dc7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0007dca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007dce:	a3 04 c3 02 c0       	mov    ds:0xc002c304,eax
c0007dd3:	90                   	nop
c0007dd4:	c3                   	ret    
c0007dd5:	90                   	nop

c0007dd6 <Filesystem::~Filesystem()>:
c0007dd6:	ba 80 35 02 c0       	mov    edx,0xc0023580
c0007ddb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007ddf:	89 10                	mov    DWORD PTR [eax],edx
c0007de1:	90                   	nop
c0007de2:	c3                   	ret    
c0007de3:	90                   	nop

c0007de4 <Filesystem::~Filesystem()>:
c0007de4:	83 ec 0c             	sub    esp,0xc
c0007de7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0007deb:	e8 e6 ff ff ff       	call   c0007dd6 <Filesystem::~Filesystem()>
c0007df0:	83 c4 04             	add    esp,0x4
c0007df3:	83 ec 08             	sub    esp,0x8
c0007df6:	6a 08                	push   0x8
c0007df8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007dfc:	e8 f4 54 00 00       	call   c000d2f5 <operator delete(void*, unsigned long)>
c0007e01:	83 c4 10             	add    esp,0x10
c0007e04:	83 c4 0c             	add    esp,0xc
c0007e07:	c3                   	ret    

c0007e08 <Fs::getcwd(Process*, char*, int)>:
c0007e08:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007e0c:	31 c0                	xor    eax,eax
c0007e0e:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0007e12:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0007e15:	7d 15                	jge    c0007e2c <Fs::getcwd(Process*, char*, int)+0x24>
c0007e17:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007e1b:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0007e22:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0007e25:	84 c9                	test   cl,cl
c0007e27:	74 06                	je     c0007e2f <Fs::getcwd(Process*, char*, int)+0x27>
c0007e29:	40                   	inc    eax
c0007e2a:	eb e2                	jmp    c0007e0e <Fs::getcwd(Process*, char*, int)+0x6>
c0007e2c:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0007e2f:	31 c0                	xor    eax,eax
c0007e31:	c3                   	ret    

c0007e32 <Fs::initVFS()>:
c0007e32:	83 ec 18             	sub    esp,0x18
c0007e35:	6a 08                	push   0x8
c0007e37:	e8 40 7d 00 00       	call   c000fb7c <malloc>
c0007e3c:	89 04 24             	mov    DWORD PTR [esp],eax
c0007e3f:	e8 b0 48 01 00       	call   c001c6f4 <FAT::FAT()>
c0007e44:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0007e4b:	e8 2c 7d 00 00       	call   c000fb7c <malloc>
c0007e50:	89 04 24             	mov    DWORD PTR [esp],eax
c0007e53:	e8 ca 57 01 00       	call   c001d622 <ISO9660::ISO9660()>
c0007e58:	83 c4 1c             	add    esp,0x1c
c0007e5b:	c3                   	ret    

c0007e5c <Fs::standardiseFiles(char*, char const*, char const*, bool)>:
c0007e5c:	55                   	push   ebp
c0007e5d:	57                   	push   edi
c0007e5e:	56                   	push   esi
c0007e5f:	53                   	push   ebx
c0007e60:	81 ec 20 04 00 00    	sub    esp,0x420
c0007e66:	8a 84 24 40 04 00 00 	mov    al,BYTE PTR [esp+0x440]
c0007e6d:	8b b4 24 38 04 00 00 	mov    esi,DWORD PTR [esp+0x438]
c0007e74:	8b 9c 24 34 04 00 00 	mov    ebx,DWORD PTR [esp+0x434]
c0007e7b:	8b ac 24 3c 04 00 00 	mov    ebp,DWORD PTR [esp+0x43c]
c0007e82:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0007e86:	68 00 04 00 00       	push   0x400
c0007e8b:	6a 00                	push   0x0
c0007e8d:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0007e91:	57                   	push   edi
c0007e92:	e8 59 86 ff ff       	call   c00004f0 <memset>
c0007e97:	83 c4 10             	add    esp,0x10
c0007e9a:	80 7e 01 3a          	cmp    BYTE PTR [esi+0x1],0x3a
c0007e9e:	75 0b                	jne    c0007eab <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x4f>
c0007ea0:	50                   	push   eax
c0007ea1:	50                   	push   eax
c0007ea2:	56                   	push   esi
c0007ea3:	57                   	push   edi
c0007ea4:	e8 a7 87 ff ff       	call   c0000650 <strcpy>
c0007ea9:	eb 45                	jmp    c0007ef0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x94>
c0007eab:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0007eae:	83 f8 2f             	cmp    eax,0x2f
c0007eb1:	74 05                	je     c0007eb8 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x5c>
c0007eb3:	83 f8 5c             	cmp    eax,0x5c
c0007eb6:	75 19                	jne    c0007ed1 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x75>
c0007eb8:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0007ebb:	3c 60                	cmp    al,0x60
c0007ebd:	7e 03                	jle    c0007ec2 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x66>
c0007ebf:	83 e8 20             	sub    eax,0x20
c0007ec2:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0007ec6:	66 c7 44 24 11 3a 2f 	mov    WORD PTR [esp+0x11],0x2f3a
c0007ecd:	50                   	push   eax
c0007ece:	50                   	push   eax
c0007ecf:	eb 18                	jmp    c0007ee9 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x8d>
c0007ed1:	50                   	push   eax
c0007ed2:	50                   	push   eax
c0007ed3:	55                   	push   ebp
c0007ed4:	57                   	push   edi
c0007ed5:	e8 76 87 ff ff       	call   c0000650 <strcpy>
c0007eda:	58                   	pop    eax
c0007edb:	5a                   	pop    edx
c0007edc:	68 91 53 02 c0       	push   0xc0025391
c0007ee1:	57                   	push   edi
c0007ee2:	e8 89 89 ff ff       	call   c0000870 <strcat>
c0007ee7:	59                   	pop    ecx
c0007ee8:	5d                   	pop    ebp
c0007ee9:	56                   	push   esi
c0007eea:	57                   	push   edi
c0007eeb:	e8 80 89 ff ff       	call   c0000870 <strcat>
c0007ef0:	83 c4 10             	add    esp,0x10
c0007ef3:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0007ef7:	3c 60                	cmp    al,0x60
c0007ef9:	7e 03                	jle    c0007efe <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xa2>
c0007efb:	83 e8 20             	sub    eax,0x20
c0007efe:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0007f02:	be 03 00 00 00       	mov    esi,0x3
c0007f07:	88 03                	mov    BYTE PTR [ebx],al
c0007f09:	b8 03 00 00 00       	mov    eax,0x3
c0007f0e:	66 c7 44 24 11 3a 2f 	mov    WORD PTR [esp+0x11],0x2f3a
c0007f15:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c0007f1b:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0007f1f:	0f b6 7c 34 10       	movzx  edi,BYTE PTR [esp+esi*1+0x10]
c0007f24:	89 fa                	mov    edx,edi
c0007f26:	0f be ea             	movsx  ebp,dl
c0007f29:	85 ed                	test   ebp,ebp
c0007f2b:	0f 84 a1 00 00 00    	je     c0007fd2 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x176>
c0007f31:	8d 56 01             	lea    edx,[esi+0x1]
c0007f34:	83 fd 2f             	cmp    ebp,0x2f
c0007f37:	74 05                	je     c0007f3e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xe2>
c0007f39:	83 fd 5c             	cmp    ebp,0x5c
c0007f3c:	75 12                	jne    c0007f50 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf4>
c0007f3e:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0007f43:	89 c5                	mov    ebp,eax
c0007f45:	74 09                	je     c0007f50 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf4>
c0007f47:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c0007f4b:	40                   	inc    eax
c0007f4c:	89 d6                	mov    esi,edx
c0007f4e:	eb cf                	jmp    c0007f1f <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xc3>
c0007f50:	80 7c 34 0f 2f       	cmp    BYTE PTR [esp+esi*1+0xf],0x2f
c0007f55:	89 f9                	mov    ecx,edi
c0007f57:	0f be e9             	movsx  ebp,cl
c0007f5a:	75 61                	jne    c0007fbd <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x161>
c0007f5c:	83 fd 2e             	cmp    ebp,0x2e
c0007f5f:	75 5c                	jne    c0007fbd <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x161>
c0007f61:	80 7c 14 10 2e       	cmp    BYTE PTR [esp+edx*1+0x10],0x2e
c0007f66:	0f be 6c 34 12       	movsx  ebp,BYTE PTR [esp+esi*1+0x12]
c0007f6b:	74 19                	je     c0007f86 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x12a>
c0007f6d:	83 fd 2e             	cmp    ebp,0x2e
c0007f70:	74 55                	je     c0007fc7 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x16b>
c0007f72:	89 f2                	mov    edx,esi
c0007f74:	42                   	inc    edx
c0007f75:	0f be 4c 14 10       	movsx  ecx,BYTE PTR [esp+edx*1+0x10]
c0007f7a:	83 f9 2f             	cmp    ecx,0x2f
c0007f7d:	74 f5                	je     c0007f74 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x118>
c0007f7f:	83 f9 5c             	cmp    ecx,0x5c
c0007f82:	74 f0                	je     c0007f74 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x118>
c0007f84:	eb c6                	jmp    c0007f4c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0007f86:	83 fd 2e             	cmp    ebp,0x2e
c0007f89:	74 3c                	je     c0007fc7 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x16b>
c0007f8b:	83 f8 03             	cmp    eax,0x3
c0007f8e:	74 bc                	je     c0007f4c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0007f90:	42                   	inc    edx
c0007f91:	0f be 4c 14 10       	movsx  ecx,BYTE PTR [esp+edx*1+0x10]
c0007f96:	83 f9 2f             	cmp    ecx,0x2f
c0007f99:	74 f5                	je     c0007f90 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x134>
c0007f9b:	83 f9 5c             	cmp    ecx,0x5c
c0007f9e:	74 f0                	je     c0007f90 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x134>
c0007fa0:	48                   	dec    eax
c0007fa1:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0007fa5:	75 06                	jne    c0007fad <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x151>
c0007fa7:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0007fab:	eb f3                	jmp    c0007fa0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x144>
c0007fad:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0007fb1:	74 07                	je     c0007fba <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x15e>
c0007fb3:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0007fb7:	48                   	dec    eax
c0007fb8:	eb f3                	jmp    c0007fad <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x151>
c0007fba:	40                   	inc    eax
c0007fbb:	eb 8f                	jmp    c0007f4c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0007fbd:	83 fd 2f             	cmp    ebp,0x2f
c0007fc0:	74 8a                	je     c0007f4c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0007fc2:	83 fd 5c             	cmp    ebp,0x5c
c0007fc5:	74 85                	je     c0007f4c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0007fc7:	89 f9                	mov    ecx,edi
c0007fc9:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0007fcc:	40                   	inc    eax
c0007fcd:	e9 7a ff ff ff       	jmp    c0007f4c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0007fd2:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0007fd6:	83 ec 0c             	sub    esp,0xc
c0007fd9:	53                   	push   ebx
c0007fda:	e8 a1 85 ff ff       	call   c0000580 <strlen>
c0007fdf:	83 c4 10             	add    esp,0x10
c0007fe2:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c0007fe7:	74 1c                	je     c0008005 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1a9>
c0007fe9:	83 ec 0c             	sub    esp,0xc
c0007fec:	53                   	push   ebx
c0007fed:	e8 8e 85 ff ff       	call   c0000580 <strlen>
c0007ff2:	83 c4 10             	add    esp,0x10
c0007ff5:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0007ffa:	74 09                	je     c0008005 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1a9>
c0007ffc:	31 ff                	xor    edi,edi
c0007ffe:	0f b6 74 24 0f       	movzx  esi,BYTE PTR [esp+0xf]
c0008003:	eb 5c                	jmp    c0008061 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x205>
c0008005:	83 ec 0c             	sub    esp,0xc
c0008008:	53                   	push   ebx
c0008009:	e8 72 85 ff ff       	call   c0000580 <strlen>
c000800e:	83 c4 10             	add    esp,0x10
c0008011:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c0008016:	74 e4                	je     c0007ffc <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1a0>
c0008018:	83 ec 0c             	sub    esp,0xc
c000801b:	53                   	push   ebx
c000801c:	e8 5f 85 ff ff       	call   c0000580 <strlen>
c0008021:	83 c4 10             	add    esp,0x10
c0008024:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0008029:	eb ab                	jmp    c0007fd6 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x17a>
c000802b:	52                   	push   edx
c000802c:	52                   	push   edx
c000802d:	53                   	push   ebx
c000802e:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0008032:	55                   	push   ebp
c0008033:	e8 18 86 ff ff       	call   c0000650 <strcpy>
c0008038:	59                   	pop    ecx
c0008039:	58                   	pop    eax
c000803a:	53                   	push   ebx
c000803b:	55                   	push   ebp
c000803c:	e8 a2 f8 ff ff       	call   c00078e3 <KeDereferenceSymlink(char const*, char*)>
c0008041:	83 c4 10             	add    esp,0x10
c0008044:	48                   	dec    eax
c0008045:	75 37                	jne    c000807e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x222>
c0008047:	50                   	push   eax
c0008048:	53                   	push   ebx
c0008049:	55                   	push   ebp
c000804a:	68 1e 35 02 c0       	push   0xc002351e
c000804f:	e8 12 ef ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0008054:	8d 47 01             	lea    eax,[edi+0x1]
c0008057:	83 c4 10             	add    esp,0x10
c000805a:	83 ff 14             	cmp    edi,0x14
c000805d:	74 08                	je     c0008067 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x20b>
c000805f:	89 c7                	mov    edi,eax
c0008061:	85 f6                	test   esi,esi
c0008063:	75 c6                	jne    c000802b <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1cf>
c0008065:	eb 17                	jmp    c000807e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x222>
c0008067:	83 ec 0c             	sub    esp,0xc
c000806a:	bf 15 00 00 00       	mov    edi,0x15
c000806f:	68 39 35 02 c0       	push   0xc0023539
c0008074:	e8 11 7e 00 00       	call   c000fe8a <KePanic(char const*)>
c0008079:	83 c4 10             	add    esp,0x10
c000807c:	eb e3                	jmp    c0008061 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x205>
c000807e:	81 c4 1c 04 00 00    	add    esp,0x41c
c0008084:	5b                   	pop    ebx
c0008085:	5e                   	pop    esi
c0008086:	5f                   	pop    edi
c0008087:	5d                   	pop    ebp
c0008088:	c3                   	ret    
c0008089:	90                   	nop

c000808a <File::File(char const*, Process*, bool)>:
c000808a:	83 ec 1c             	sub    esp,0x1c
c000808d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008091:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0008095:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008099:	83 ec 08             	sub    esp,0x8
c000809c:	6a 00                	push   0x0
c000809e:	50                   	push   eax
c000809f:	e8 3c ae 00 00       	call   c0012ee0 <UnixFile::UnixFile(int)>
c00080a4:	83 c4 10             	add    esp,0x10
c00080a7:	ba ec 35 02 c0       	mov    edx,0xc00235ec
c00080ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00080b0:	89 10                	mov    DWORD PTR [eax],edx
c00080b2:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00080b7:	85 c0                	test   eax,eax
c00080b9:	74 0f                	je     c00080ca <File::File(char const*, Process*, bool)+0x40>
c00080bb:	a1 78 fa 02 c0       	mov    eax,ds:0xc002fa78
c00080c0:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c00080c4:	74 04                	je     c00080ca <File::File(char const*, Process*, bool)+0x40>
c00080c6:	b0 01                	mov    al,0x1
c00080c8:	eb 02                	jmp    c00080cc <File::File(char const*, Process*, bool)+0x42>
c00080ca:	b0 00                	mov    al,0x0
c00080cc:	0f b6 c0             	movzx  eax,al
c00080cf:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00080d3:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c00080d9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00080dd:	83 c2 0d             	add    edx,0xd
c00080e0:	50                   	push   eax
c00080e1:	51                   	push   ecx
c00080e2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00080e6:	52                   	push   edx
c00080e7:	e8 70 fd ff ff       	call   c0007e5c <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00080ec:	83 c4 10             	add    esp,0x10
c00080ef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00080f3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00080f6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00080fa:	83 c2 0d             	add    edx,0xd
c00080fd:	83 ec 04             	sub    esp,0x4
c0008100:	50                   	push   eax
c0008101:	52                   	push   edx
c0008102:	68 5f 35 02 c0       	push   0xc002355f
c0008107:	e8 5a ee ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000810c:	83 c4 10             	add    esp,0x10
c000810f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008113:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0008116:	83 e8 41             	sub    eax,0x41
c0008119:	88 c2                	mov    dl,al
c000811b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000811f:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0008125:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008129:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000812d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008131:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c0008137:	0f b6 c0             	movzx  eax,al
c000813a:	8b 04 85 e0 ca 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3520]
c0008141:	85 c0                	test   eax,eax
c0008143:	74 3e                	je     c0008183 <File::File(char const*, Process*, bool)+0xf9>
c0008145:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008149:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000814f:	0f b6 c0             	movzx  eax,al
c0008152:	8b 04 85 e0 ca 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3520]
c0008159:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000815f:	85 c0                	test   eax,eax
c0008161:	75 20                	jne    c0008183 <File::File(char const*, Process*, bool)+0xf9>
c0008163:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008167:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000816d:	0f b6 c0             	movzx  eax,al
c0008170:	8b 04 85 e0 ca 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3520]
c0008177:	83 ec 0c             	sub    esp,0xc
c000817a:	50                   	push   eax
c000817b:	e8 0a 28 00 00       	call   c000a98a <LogicalDisk::mount()>
c0008180:	83 c4 10             	add    esp,0x10
c0008183:	90                   	nop
c0008184:	83 c4 1c             	add    esp,0x1c
c0008187:	c3                   	ret    

c0008188 <File::File(char const*, Process*)>:
c0008188:	83 ec 0c             	sub    esp,0xc
c000818b:	6a 01                	push   0x1
c000818d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008191:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008195:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008199:	e8 ec fe ff ff       	call   c000808a <File::File(char const*, Process*, bool)>
c000819e:	83 c4 10             	add    esp,0x10
c00081a1:	90                   	nop
c00081a2:	83 c4 0c             	add    esp,0xc
c00081a5:	c3                   	ret    

c00081a6 <File::open(FileOpenMode)>:
c00081a6:	53                   	push   ebx
c00081a7:	b8 0b 00 00 00       	mov    eax,0xb
c00081ac:	83 ec 08             	sub    esp,0x8
c00081af:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00081b3:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c00081ba:	83 fa 19             	cmp    edx,0x19
c00081bd:	77 40                	ja     c00081ff <File::open(FileOpenMode)+0x59>
c00081bf:	8b 14 95 e0 ca 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3520]
c00081c6:	85 d2                	test   edx,edx
c00081c8:	74 35                	je     c00081ff <File::open(FileOpenMode)+0x59>
c00081ca:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c00081d0:	85 d2                	test   edx,edx
c00081d2:	74 2b                	je     c00081ff <File::open(FileOpenMode)+0x59>
c00081d4:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c00081d8:	b8 06 00 00 00       	mov    eax,0x6
c00081dd:	75 20                	jne    c00081ff <File::open(FileOpenMode)+0x59>
c00081df:	8b 02                	mov    eax,DWORD PTR [edx]
c00081e1:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c00081e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00081eb:	51                   	push   ecx
c00081ec:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c00081ef:	51                   	push   ecx
c00081f0:	52                   	push   edx
c00081f1:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00081f4:	83 c4 10             	add    esp,0x10
c00081f7:	85 c0                	test   eax,eax
c00081f9:	75 04                	jne    c00081ff <File::open(FileOpenMode)+0x59>
c00081fb:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c00081ff:	83 c4 08             	add    esp,0x8
c0008202:	5b                   	pop    ebx
c0008203:	c3                   	ret    

c0008204 <File::close()>:
c0008204:	53                   	push   ebx
c0008205:	b8 0b 00 00 00       	mov    eax,0xb
c000820a:	83 ec 08             	sub    esp,0x8
c000820d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008211:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008218:	83 f9 19             	cmp    ecx,0x19
c000821b:	77 41                	ja     c000825e <File::close()+0x5a>
c000821d:	8b 1c 8d e0 ca 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd3520]
c0008224:	85 db                	test   ebx,ebx
c0008226:	74 36                	je     c000825e <File::close()+0x5a>
c0008228:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000822f:	74 2d                	je     c000825e <File::close()+0x5a>
c0008231:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008235:	b8 05 00 00 00       	mov    eax,0x5
c000823a:	74 22                	je     c000825e <File::close()+0x5a>
c000823c:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c0008240:	8b 04 8d e0 ca 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd3520]
c0008247:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000824d:	53                   	push   ebx
c000824e:	53                   	push   ebx
c000824f:	8b 08                	mov    ecx,DWORD PTR [eax]
c0008251:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0008257:	50                   	push   eax
c0008258:	ff 51 1c             	call   DWORD PTR [ecx+0x1c]
c000825b:	83 c4 10             	add    esp,0x10
c000825e:	83 c4 08             	add    esp,0x8
c0008261:	5b                   	pop    ebx
c0008262:	c3                   	ret    
c0008263:	90                   	nop

c0008264 <File::seek(unsigned long long)>:
c0008264:	56                   	push   esi
c0008265:	b8 0b 00 00 00       	mov    eax,0xb
c000826a:	53                   	push   ebx
c000826b:	51                   	push   ecx
c000826c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008270:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008274:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0008278:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000827f:	83 fa 19             	cmp    edx,0x19
c0008282:	77 31                	ja     c00082b5 <File::seek(unsigned long long)+0x51>
c0008284:	8b 14 95 e0 ca 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3520]
c000828b:	85 d2                	test   edx,edx
c000828d:	74 26                	je     c00082b5 <File::seek(unsigned long long)+0x51>
c000828f:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c0008295:	85 d2                	test   edx,edx
c0008297:	74 1c                	je     c00082b5 <File::seek(unsigned long long)+0x51>
c0008299:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000829d:	b8 05 00 00 00       	mov    eax,0x5
c00082a2:	74 11                	je     c00082b5 <File::seek(unsigned long long)+0x51>
c00082a4:	8b 02                	mov    eax,DWORD PTR [edx]
c00082a6:	53                   	push   ebx
c00082a7:	51                   	push   ecx
c00082a8:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c00082ae:	52                   	push   edx
c00082af:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00082b2:	83 c4 10             	add    esp,0x10
c00082b5:	5a                   	pop    edx
c00082b6:	5b                   	pop    ebx
c00082b7:	5e                   	pop    esi
c00082b8:	c3                   	ret    
c00082b9:	90                   	nop

c00082ba <File::truncate(unsigned long long)>:
c00082ba:	56                   	push   esi
c00082bb:	b8 0b 00 00 00       	mov    eax,0xb
c00082c0:	53                   	push   ebx
c00082c1:	51                   	push   ecx
c00082c2:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00082c6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00082ca:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00082ce:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c00082d5:	83 fa 19             	cmp    edx,0x19
c00082d8:	77 31                	ja     c000830b <File::truncate(unsigned long long)+0x51>
c00082da:	8b 14 95 e0 ca 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3520]
c00082e1:	85 d2                	test   edx,edx
c00082e3:	74 26                	je     c000830b <File::truncate(unsigned long long)+0x51>
c00082e5:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c00082eb:	85 d2                	test   edx,edx
c00082ed:	74 1c                	je     c000830b <File::truncate(unsigned long long)+0x51>
c00082ef:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c00082f3:	b8 05 00 00 00       	mov    eax,0x5
c00082f8:	74 11                	je     c000830b <File::truncate(unsigned long long)+0x51>
c00082fa:	8b 02                	mov    eax,DWORD PTR [edx]
c00082fc:	53                   	push   ebx
c00082fd:	51                   	push   ecx
c00082fe:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c0008304:	52                   	push   edx
c0008305:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c0008308:	83 c4 10             	add    esp,0x10
c000830b:	5a                   	pop    edx
c000830c:	5b                   	pop    ebx
c000830d:	5e                   	pop    esi
c000830e:	c3                   	ret    
c000830f:	90                   	nop

c0008310 <File::tell(unsigned long long*)>:
c0008310:	83 ec 0c             	sub    esp,0xc
c0008313:	b8 0b 00 00 00       	mov    eax,0xb
c0008318:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000831c:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0008323:	83 fa 19             	cmp    edx,0x19
c0008326:	77 34                	ja     c000835c <File::tell(unsigned long long*)+0x4c>
c0008328:	8b 14 95 e0 ca 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3520]
c000832f:	85 d2                	test   edx,edx
c0008331:	74 29                	je     c000835c <File::tell(unsigned long long*)+0x4c>
c0008333:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c0008339:	85 d2                	test   edx,edx
c000833b:	74 1f                	je     c000835c <File::tell(unsigned long long*)+0x4c>
c000833d:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0008341:	b8 05 00 00 00       	mov    eax,0x5
c0008346:	74 14                	je     c000835c <File::tell(unsigned long long*)+0x4c>
c0008348:	50                   	push   eax
c0008349:	8b 02                	mov    eax,DWORD PTR [edx]
c000834b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000834f:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0008355:	52                   	push   edx
c0008356:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0008359:	83 c4 10             	add    esp,0x10
c000835c:	83 c4 0c             	add    esp,0xc
c000835f:	c3                   	ret    

c0008360 <File::rewind()>:
c0008360:	83 ec 10             	sub    esp,0x10
c0008363:	6a 00                	push   0x0
c0008365:	6a 00                	push   0x0
c0008367:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000836b:	e8 f4 fe ff ff       	call   c0008264 <File::seek(unsigned long long)>
c0008370:	83 c4 1c             	add    esp,0x1c
c0008373:	c3                   	ret    

c0008374 <File::unlink()>:
c0008374:	83 ec 0c             	sub    esp,0xc
c0008377:	b8 0b 00 00 00       	mov    eax,0xb
c000837c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008380:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008387:	83 f9 19             	cmp    ecx,0x19
c000838a:	77 2f                	ja     c00083bb <File::unlink()+0x47>
c000838c:	8b 0c 8d e0 ca 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3520]
c0008393:	85 c9                	test   ecx,ecx
c0008395:	74 24                	je     c00083bb <File::unlink()+0x47>
c0008397:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000839d:	85 c9                	test   ecx,ecx
c000839f:	74 1a                	je     c00083bb <File::unlink()+0x47>
c00083a1:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00083a5:	b8 06 00 00 00       	mov    eax,0x6
c00083aa:	75 0f                	jne    c00083bb <File::unlink()+0x47>
c00083ac:	50                   	push   eax
c00083ad:	83 c2 0d             	add    edx,0xd
c00083b0:	50                   	push   eax
c00083b1:	8b 01                	mov    eax,DWORD PTR [ecx]
c00083b3:	52                   	push   edx
c00083b4:	51                   	push   ecx
c00083b5:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c00083b8:	83 c4 10             	add    esp,0x10
c00083bb:	83 c4 0c             	add    esp,0xc
c00083be:	c3                   	ret    
c00083bf:	90                   	nop

c00083c0 <File::rename(char const*)>:
c00083c0:	83 ec 0c             	sub    esp,0xc
c00083c3:	b8 0b 00 00 00       	mov    eax,0xb
c00083c8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00083cc:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00083d3:	83 f9 19             	cmp    ecx,0x19
c00083d6:	77 32                	ja     c000840a <File::rename(char const*)+0x4a>
c00083d8:	8b 0c 8d e0 ca 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3520]
c00083df:	85 c9                	test   ecx,ecx
c00083e1:	74 27                	je     c000840a <File::rename(char const*)+0x4a>
c00083e3:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c00083e9:	85 c9                	test   ecx,ecx
c00083eb:	74 1d                	je     c000840a <File::rename(char const*)+0x4a>
c00083ed:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00083f1:	b8 06 00 00 00       	mov    eax,0x6
c00083f6:	75 12                	jne    c000840a <File::rename(char const*)+0x4a>
c00083f8:	50                   	push   eax
c00083f9:	83 c2 0d             	add    edx,0xd
c00083fc:	8b 01                	mov    eax,DWORD PTR [ecx]
c00083fe:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008402:	52                   	push   edx
c0008403:	51                   	push   ecx
c0008404:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0008407:	83 c4 10             	add    esp,0x10
c000840a:	83 c4 0c             	add    esp,0xc
c000840d:	c3                   	ret    

c000840e <File::chfatattr(unsigned char, unsigned char)>:
c000840e:	57                   	push   edi
c000840f:	b8 0b 00 00 00       	mov    eax,0xb
c0008414:	56                   	push   esi
c0008415:	53                   	push   ebx
c0008416:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000841a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000841e:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008422:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008429:	83 f9 19             	cmp    ecx,0x19
c000842c:	77 37                	ja     c0008465 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000842e:	8b 0c 8d e0 ca 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3520]
c0008435:	85 c9                	test   ecx,ecx
c0008437:	74 2c                	je     c0008465 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0008439:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000843f:	85 c9                	test   ecx,ecx
c0008441:	74 22                	je     c0008465 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0008443:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008447:	b8 06 00 00 00       	mov    eax,0x6
c000844c:	75 17                	jne    c0008465 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000844e:	89 f0                	mov    eax,esi
c0008450:	8b 39                	mov    edi,DWORD PTR [ecx]
c0008452:	0f b6 db             	movzx  ebx,bl
c0008455:	0f b6 f0             	movzx  esi,al
c0008458:	83 c2 0d             	add    edx,0xd
c000845b:	56                   	push   esi
c000845c:	53                   	push   ebx
c000845d:	52                   	push   edx
c000845e:	51                   	push   ecx
c000845f:	ff 57 38             	call   DWORD PTR [edi+0x38]
c0008462:	83 c4 10             	add    esp,0x10
c0008465:	5b                   	pop    ebx
c0008466:	5e                   	pop    esi
c0008467:	5f                   	pop    edi
c0008468:	c3                   	ret    
c0008469:	90                   	nop

c000846a <File::exists()>:
c000846a:	83 ec 0c             	sub    esp,0xc
c000846d:	31 c0                	xor    eax,eax
c000846f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008473:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000847a:	83 f9 19             	cmp    ecx,0x19
c000847d:	77 24                	ja     c00084a3 <File::exists()+0x39>
c000847f:	8b 0c 8d e0 ca 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3520]
c0008486:	85 c9                	test   ecx,ecx
c0008488:	74 19                	je     c00084a3 <File::exists()+0x39>
c000848a:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008490:	85 c9                	test   ecx,ecx
c0008492:	74 0f                	je     c00084a3 <File::exists()+0x39>
c0008494:	50                   	push   eax
c0008495:	83 c2 0d             	add    edx,0xd
c0008498:	50                   	push   eax
c0008499:	8b 01                	mov    eax,DWORD PTR [ecx]
c000849b:	52                   	push   edx
c000849c:	51                   	push   ecx
c000849d:	ff 50 48             	call   DWORD PTR [eax+0x48]
c00084a0:	83 c4 10             	add    esp,0x10
c00084a3:	83 c4 0c             	add    esp,0xc
c00084a6:	c3                   	ret    
c00084a7:	90                   	nop

c00084a8 <File::stat(unsigned long long*, bool*)>:
c00084a8:	56                   	push   esi
c00084a9:	53                   	push   ebx
c00084aa:	50                   	push   eax
c00084ab:	b8 0b 00 00 00       	mov    eax,0xb
c00084b0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00084b4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00084b8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00084bc:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00084c3:	83 f9 19             	cmp    ecx,0x19
c00084c6:	77 3d                	ja     c0008505 <File::stat(unsigned long long*, bool*)+0x5d>
c00084c8:	8b 0c 8d e0 ca 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3520]
c00084cf:	85 c9                	test   ecx,ecx
c00084d1:	74 32                	je     c0008505 <File::stat(unsigned long long*, bool*)+0x5d>
c00084d3:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c00084d9:	85 c9                	test   ecx,ecx
c00084db:	74 28                	je     c0008505 <File::stat(unsigned long long*, bool*)+0x5d>
c00084dd:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00084e1:	8b 01                	mov    eax,DWORD PTR [ecx]
c00084e3:	74 13                	je     c00084f8 <File::stat(unsigned long long*, bool*)+0x50>
c00084e5:	83 ec 04             	sub    esp,0x4
c00084e8:	56                   	push   esi
c00084e9:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c00084ef:	51                   	push   ecx
c00084f0:	ff 50 30             	call   DWORD PTR [eax+0x30]
c00084f3:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00084f6:	eb 0a                	jmp    c0008502 <File::stat(unsigned long long*, bool*)+0x5a>
c00084f8:	53                   	push   ebx
c00084f9:	83 c2 0d             	add    edx,0xd
c00084fc:	56                   	push   esi
c00084fd:	52                   	push   edx
c00084fe:	51                   	push   ecx
c00084ff:	ff 50 34             	call   DWORD PTR [eax+0x34]
c0008502:	83 c4 10             	add    esp,0x10
c0008505:	5a                   	pop    edx
c0008506:	5b                   	pop    ebx
c0008507:	5e                   	pop    esi
c0008508:	c3                   	ret    

c0008509 <Fs::setcwd(Process*, char*)>:
c0008509:	55                   	push   ebp
c000850a:	57                   	push   edi
c000850b:	56                   	push   esi
c000850c:	53                   	push   ebx
c000850d:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0008513:	8b ac 24 30 02 00 00 	mov    ebp,DWORD PTR [esp+0x230]
c000851a:	6a 00                	push   0x0
c000851c:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c0008522:	57                   	push   edi
c0008523:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000852a:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000852e:	56                   	push   esi
c000852f:	e8 28 f9 ff ff       	call   c0007e5c <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0008534:	89 34 24             	mov    DWORD PTR [esp],esi
c0008537:	e8 44 80 ff ff       	call   c0000580 <strlen>
c000853c:	83 c4 10             	add    esp,0x10
c000853f:	83 f8 02             	cmp    eax,0x2
c0008542:	77 15                	ja     c0008559 <Fs::setcwd(Process*, char*)+0x50>
c0008544:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c0008549:	83 eb 41             	sub    ebx,0x41
c000854c:	8b 04 9d e0 ca 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd3520]
c0008553:	85 c0                	test   eax,eax
c0008555:	75 1c                	jne    c0008573 <Fs::setcwd(Process*, char*)+0x6a>
c0008557:	eb 2f                	jmp    c0008588 <Fs::setcwd(Process*, char*)+0x7f>
c0008559:	83 ec 0c             	sub    esp,0xc
c000855c:	56                   	push   esi
c000855d:	e8 1e 80 ff ff       	call   c0000580 <strlen>
c0008562:	83 c4 10             	add    esp,0x10
c0008565:	83 f8 03             	cmp    eax,0x3
c0008568:	75 57                	jne    c00085c1 <Fs::setcwd(Process*, char*)+0xb8>
c000856a:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000856f:	75 50                	jne    c00085c1 <Fs::setcwd(Process*, char*)+0xb8>
c0008571:	eb d1                	jmp    c0008544 <Fs::setcwd(Process*, char*)+0x3b>
c0008573:	83 b8 74 01 00 00 00 	cmp    DWORD PTR [eax+0x174],0x0
c000857a:	75 0c                	jne    c0008588 <Fs::setcwd(Process*, char*)+0x7f>
c000857c:	83 ec 0c             	sub    esp,0xc
c000857f:	50                   	push   eax
c0008580:	e8 05 24 00 00       	call   c000a98a <LogicalDisk::mount()>
c0008585:	83 c4 10             	add    esp,0x10
c0008588:	83 fb 19             	cmp    ebx,0x19
c000858b:	b8 03 00 00 00       	mov    eax,0x3
c0008590:	0f 87 c6 00 00 00    	ja     c000865c <Fs::setcwd(Process*, char*)+0x153>
c0008596:	8b 14 9d e0 ca 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffd3520]
c000859d:	b8 05 00 00 00       	mov    eax,0x5
c00085a2:	85 d2                	test   edx,edx
c00085a4:	0f 84 b2 00 00 00    	je     c000865c <Fs::setcwd(Process*, char*)+0x153>
c00085aa:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c00085b1:	b8 06 00 00 00       	mov    eax,0x6
c00085b6:	0f 85 92 00 00 00    	jne    c000864e <Fs::setcwd(Process*, char*)+0x145>
c00085bc:	e9 9b 00 00 00       	jmp    c000865c <Fs::setcwd(Process*, char*)+0x153>
c00085c1:	83 ec 0c             	sub    esp,0xc
c00085c4:	68 14 01 00 00       	push   0x114
c00085c9:	e8 ae 75 00 00       	call   c000fb7c <malloc>
c00085ce:	83 c4 0c             	add    esp,0xc
c00085d1:	55                   	push   ebp
c00085d2:	56                   	push   esi
c00085d3:	50                   	push   eax
c00085d4:	89 c3                	mov    ebx,eax
c00085d6:	e8 ad fb ff ff       	call   c0008188 <File::File(char const*, Process*)>
c00085db:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c00085e0:	83 c4 0c             	add    esp,0xc
c00085e3:	8d 44 24 0b          	lea    eax,[esp+0xb]
c00085e7:	50                   	push   eax
c00085e8:	8d 44 24 10          	lea    eax,[esp+0x10]
c00085ec:	50                   	push   eax
c00085ed:	53                   	push   ebx
c00085ee:	e8 b5 fe ff ff       	call   c00084a8 <File::stat(unsigned long long*, bool*)>
c00085f3:	83 c4 10             	add    esp,0x10
c00085f6:	83 f8 02             	cmp    eax,0x2
c00085f9:	74 27                	je     c0008622 <Fs::setcwd(Process*, char*)+0x119>
c00085fb:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c0008600:	75 1c                	jne    c000861e <Fs::setcwd(Process*, char*)+0x115>
c0008602:	85 db                	test   ebx,ebx
c0008604:	b8 02 00 00 00       	mov    eax,0x2
c0008609:	74 51                	je     c000865c <Fs::setcwd(Process*, char*)+0x153>
c000860b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000860d:	83 ec 0c             	sub    esp,0xc
c0008610:	53                   	push   ebx
c0008611:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0008614:	83 c4 10             	add    esp,0x10
c0008617:	b8 02 00 00 00       	mov    eax,0x2
c000861c:	eb 3e                	jmp    c000865c <Fs::setcwd(Process*, char*)+0x153>
c000861e:	85 c0                	test   eax,eax
c0008620:	74 1c                	je     c000863e <Fs::setcwd(Process*, char*)+0x135>
c0008622:	85 db                	test   ebx,ebx
c0008624:	b8 01 00 00 00       	mov    eax,0x1
c0008629:	74 31                	je     c000865c <Fs::setcwd(Process*, char*)+0x153>
c000862b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000862d:	83 ec 0c             	sub    esp,0xc
c0008630:	53                   	push   ebx
c0008631:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0008634:	83 c4 10             	add    esp,0x10
c0008637:	b8 01 00 00 00       	mov    eax,0x1
c000863c:	eb 1e                	jmp    c000865c <Fs::setcwd(Process*, char*)+0x153>
c000863e:	85 db                	test   ebx,ebx
c0008640:	74 0c                	je     c000864e <Fs::setcwd(Process*, char*)+0x145>
c0008642:	8b 03                	mov    eax,DWORD PTR [ebx]
c0008644:	83 ec 0c             	sub    esp,0xc
c0008647:	53                   	push   ebx
c0008648:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000864b:	83 c4 10             	add    esp,0x10
c000864e:	50                   	push   eax
c000864f:	50                   	push   eax
c0008650:	56                   	push   esi
c0008651:	57                   	push   edi
c0008652:	e8 f9 7f ff ff       	call   c0000650 <strcpy>
c0008657:	83 c4 10             	add    esp,0x10
c000865a:	31 c0                	xor    eax,eax
c000865c:	81 c4 1c 02 00 00    	add    esp,0x21c
c0008662:	5b                   	pop    ebx
c0008663:	5e                   	pop    esi
c0008664:	5f                   	pop    edi
c0008665:	5d                   	pop    ebp
c0008666:	c3                   	ret    
c0008667:	90                   	nop

c0008668 <Directory::Directory(char const*, Process*)>:
c0008668:	83 ec 0c             	sub    esp,0xc
c000866b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000866f:	83 ec 08             	sub    esp,0x8
c0008672:	6a 00                	push   0x0
c0008674:	50                   	push   eax
c0008675:	e8 66 a8 00 00       	call   c0012ee0 <UnixFile::UnixFile(int)>
c000867a:	83 c4 10             	add    esp,0x10
c000867d:	ba 08 36 02 c0       	mov    edx,0xc0023608
c0008682:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008686:	89 10                	mov    DWORD PTR [eax],edx
c0008688:	a1 78 fa 02 c0       	mov    eax,ds:0xc002fa78
c000868d:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0008691:	0f 95 c0             	setne  al
c0008694:	0f b6 c0             	movzx  eax,al
c0008697:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000869b:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c00086a1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00086a5:	83 c2 0d             	add    edx,0xd
c00086a8:	50                   	push   eax
c00086a9:	51                   	push   ecx
c00086aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00086ae:	52                   	push   edx
c00086af:	e8 a8 f7 ff ff       	call   c0007e5c <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00086b4:	83 c4 10             	add    esp,0x10
c00086b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00086bb:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c00086be:	83 e8 41             	sub    eax,0x41
c00086c1:	88 c2                	mov    dl,al
c00086c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00086c7:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c00086cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00086d1:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c00086d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00086d9:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c00086df:	0f b6 c0             	movzx  eax,al
c00086e2:	8b 04 85 e0 ca 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3520]
c00086e9:	85 c0                	test   eax,eax
c00086eb:	74 3e                	je     c000872b <Directory::Directory(char const*, Process*)+0xc3>
c00086ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00086f1:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c00086f7:	0f b6 c0             	movzx  eax,al
c00086fa:	8b 04 85 e0 ca 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3520]
c0008701:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0008707:	85 c0                	test   eax,eax
c0008709:	75 20                	jne    c000872b <Directory::Directory(char const*, Process*)+0xc3>
c000870b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000870f:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c0008715:	0f b6 c0             	movzx  eax,al
c0008718:	8b 04 85 e0 ca 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3520]
c000871f:	83 ec 0c             	sub    esp,0xc
c0008722:	50                   	push   eax
c0008723:	e8 62 22 00 00       	call   c000a98a <LogicalDisk::mount()>
c0008728:	83 c4 10             	add    esp,0x10
c000872b:	90                   	nop
c000872c:	83 c4 0c             	add    esp,0xc
c000872f:	c3                   	ret    

c0008730 <Directory::open()>:
c0008730:	53                   	push   ebx
c0008731:	b8 0b 00 00 00       	mov    eax,0xb
c0008736:	83 ec 08             	sub    esp,0x8
c0008739:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000873d:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0008744:	83 fa 19             	cmp    edx,0x19
c0008747:	77 3d                	ja     c0008786 <Directory::open()+0x56>
c0008749:	8b 14 95 e0 ca 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3520]
c0008750:	85 d2                	test   edx,edx
c0008752:	74 32                	je     c0008786 <Directory::open()+0x56>
c0008754:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000875a:	85 d2                	test   edx,edx
c000875c:	74 28                	je     c0008786 <Directory::open()+0x56>
c000875e:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0008762:	b8 06 00 00 00       	mov    eax,0x6
c0008767:	75 1d                	jne    c0008786 <Directory::open()+0x56>
c0008769:	50                   	push   eax
c000876a:	8b 02                	mov    eax,DWORD PTR [edx]
c000876c:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0008772:	51                   	push   ecx
c0008773:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0008776:	51                   	push   ecx
c0008777:	52                   	push   edx
c0008778:	ff 50 50             	call   DWORD PTR [eax+0x50]
c000877b:	83 c4 10             	add    esp,0x10
c000877e:	85 c0                	test   eax,eax
c0008780:	75 04                	jne    c0008786 <Directory::open()+0x56>
c0008782:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0008786:	83 c4 08             	add    esp,0x8
c0008789:	5b                   	pop    ebx
c000878a:	c3                   	ret    
c000878b:	90                   	nop

c000878c <Directory::close()>:
c000878c:	53                   	push   ebx
c000878d:	b8 0b 00 00 00       	mov    eax,0xb
c0008792:	83 ec 08             	sub    esp,0x8
c0008795:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008799:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00087a0:	83 f9 19             	cmp    ecx,0x19
c00087a3:	77 41                	ja     c00087e6 <Directory::close()+0x5a>
c00087a5:	8b 1c 8d e0 ca 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd3520]
c00087ac:	85 db                	test   ebx,ebx
c00087ae:	74 36                	je     c00087e6 <Directory::close()+0x5a>
c00087b0:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c00087b7:	74 2d                	je     c00087e6 <Directory::close()+0x5a>
c00087b9:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00087bd:	b8 05 00 00 00       	mov    eax,0x5
c00087c2:	74 22                	je     c00087e6 <Directory::close()+0x5a>
c00087c4:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c00087c8:	8b 04 8d e0 ca 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd3520]
c00087cf:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c00087d5:	53                   	push   ebx
c00087d6:	53                   	push   ebx
c00087d7:	8b 08                	mov    ecx,DWORD PTR [eax]
c00087d9:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c00087df:	50                   	push   eax
c00087e0:	ff 51 20             	call   DWORD PTR [ecx+0x20]
c00087e3:	83 c4 10             	add    esp,0x10
c00087e6:	83 c4 08             	add    esp,0x8
c00087e9:	5b                   	pop    ebx
c00087ea:	c3                   	ret    
c00087eb:	90                   	nop

c00087ec <Directory::unlink()>:
c00087ec:	83 ec 0c             	sub    esp,0xc
c00087ef:	b8 0b 00 00 00       	mov    eax,0xb
c00087f4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00087f8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00087ff:	83 f9 19             	cmp    ecx,0x19
c0008802:	77 2f                	ja     c0008833 <Directory::unlink()+0x47>
c0008804:	8b 0c 8d e0 ca 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3520]
c000880b:	85 c9                	test   ecx,ecx
c000880d:	74 24                	je     c0008833 <Directory::unlink()+0x47>
c000880f:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008815:	85 c9                	test   ecx,ecx
c0008817:	74 1a                	je     c0008833 <Directory::unlink()+0x47>
c0008819:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000881d:	b8 06 00 00 00       	mov    eax,0x6
c0008822:	75 0f                	jne    c0008833 <Directory::unlink()+0x47>
c0008824:	50                   	push   eax
c0008825:	83 c2 0d             	add    edx,0xd
c0008828:	50                   	push   eax
c0008829:	8b 01                	mov    eax,DWORD PTR [ecx]
c000882b:	52                   	push   edx
c000882c:	51                   	push   ecx
c000882d:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c0008830:	83 c4 10             	add    esp,0x10
c0008833:	83 c4 0c             	add    esp,0xc
c0008836:	c3                   	ret    
c0008837:	90                   	nop

c0008838 <Directory::rename(char const*)>:
c0008838:	83 ec 0c             	sub    esp,0xc
c000883b:	b8 0b 00 00 00       	mov    eax,0xb
c0008840:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008844:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000884b:	83 f9 19             	cmp    ecx,0x19
c000884e:	77 32                	ja     c0008882 <Directory::rename(char const*)+0x4a>
c0008850:	8b 0c 8d e0 ca 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3520]
c0008857:	85 c9                	test   ecx,ecx
c0008859:	74 27                	je     c0008882 <Directory::rename(char const*)+0x4a>
c000885b:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008861:	85 c9                	test   ecx,ecx
c0008863:	74 1d                	je     c0008882 <Directory::rename(char const*)+0x4a>
c0008865:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008869:	b8 06 00 00 00       	mov    eax,0x6
c000886e:	75 12                	jne    c0008882 <Directory::rename(char const*)+0x4a>
c0008870:	50                   	push   eax
c0008871:	83 c2 0d             	add    edx,0xd
c0008874:	8b 01                	mov    eax,DWORD PTR [ecx]
c0008876:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000887a:	52                   	push   edx
c000887b:	51                   	push   ecx
c000887c:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000887f:	83 c4 10             	add    esp,0x10
c0008882:	83 c4 0c             	add    esp,0xc
c0008885:	c3                   	ret    

c0008886 <Directory::exists()>:
c0008886:	83 ec 0c             	sub    esp,0xc
c0008889:	31 c0                	xor    eax,eax
c000888b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000888f:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008896:	83 f9 19             	cmp    ecx,0x19
c0008899:	77 24                	ja     c00088bf <Directory::exists()+0x39>
c000889b:	8b 0c 8d e0 ca 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3520]
c00088a2:	85 c9                	test   ecx,ecx
c00088a4:	74 19                	je     c00088bf <Directory::exists()+0x39>
c00088a6:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c00088ac:	85 c9                	test   ecx,ecx
c00088ae:	74 0f                	je     c00088bf <Directory::exists()+0x39>
c00088b0:	50                   	push   eax
c00088b1:	83 c2 0d             	add    edx,0xd
c00088b4:	50                   	push   eax
c00088b5:	8b 01                	mov    eax,DWORD PTR [ecx]
c00088b7:	52                   	push   edx
c00088b8:	51                   	push   ecx
c00088b9:	ff 50 48             	call   DWORD PTR [eax+0x48]
c00088bc:	83 c4 10             	add    esp,0x10
c00088bf:	83 c4 0c             	add    esp,0xc
c00088c2:	c3                   	ret    
c00088c3:	90                   	nop

c00088c4 <Directory::read(dirent*)>:
c00088c4:	83 ec 1c             	sub    esp,0x1c
c00088c7:	b8 0b 00 00 00       	mov    eax,0xb
c00088cc:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00088d0:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00088d7:	83 f9 19             	cmp    ecx,0x19
c00088da:	77 30                	ja     c000890c <Directory::read(dirent*)+0x48>
c00088dc:	8b 0c 8d e0 ca 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3520]
c00088e3:	85 c9                	test   ecx,ecx
c00088e5:	74 25                	je     c000890c <Directory::read(dirent*)+0x48>
c00088e7:	83 b9 74 01 00 00 00 	cmp    DWORD PTR [ecx+0x174],0x0
c00088ee:	74 1c                	je     c000890c <Directory::read(dirent*)+0x48>
c00088f0:	83 ec 0c             	sub    esp,0xc
c00088f3:	8b 02                	mov    eax,DWORD PTR [edx]
c00088f5:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c00088f9:	51                   	push   ecx
c00088fa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00088fe:	6a 00                	push   0x0
c0008900:	68 10 01 00 00       	push   0x110
c0008905:	52                   	push   edx
c0008906:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0008909:	83 c4 20             	add    esp,0x20
c000890c:	83 c4 1c             	add    esp,0x1c
c000890f:	c3                   	ret    

c0008910 <Directory::create()>:
c0008910:	83 ec 0c             	sub    esp,0xc
c0008913:	b8 0b 00 00 00       	mov    eax,0xb
c0008918:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000891c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008923:	83 f9 19             	cmp    ecx,0x19
c0008926:	77 2f                	ja     c0008957 <Directory::create()+0x47>
c0008928:	8b 0c 8d e0 ca 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3520]
c000892f:	85 c9                	test   ecx,ecx
c0008931:	74 24                	je     c0008957 <Directory::create()+0x47>
c0008933:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008939:	85 c9                	test   ecx,ecx
c000893b:	74 1a                	je     c0008957 <Directory::create()+0x47>
c000893d:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008941:	b8 06 00 00 00       	mov    eax,0x6
c0008946:	75 0f                	jne    c0008957 <Directory::create()+0x47>
c0008948:	50                   	push   eax
c0008949:	83 c2 0d             	add    edx,0xd
c000894c:	50                   	push   eax
c000894d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000894f:	52                   	push   edx
c0008950:	51                   	push   ecx
c0008951:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0008954:	83 c4 10             	add    esp,0x10
c0008957:	83 c4 0c             	add    esp,0xc
c000895a:	c3                   	ret    
c000895b:	90                   	nop

c000895c <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000895c:	b8 0a 00 00 00       	mov    eax,0xa
c0008961:	c3                   	ret    
c0008962:	66 90                	xchg   ax,ax

c0008964 <Bus::Bus(char const*)>:
c0008964:	83 ec 0c             	sub    esp,0xc
c0008967:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000896b:	83 ec 08             	sub    esp,0x8
c000896e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008972:	50                   	push   eax
c0008973:	e8 e0 11 00 00       	call   c0009b58 <Device::Device(char const*)>
c0008978:	83 c4 10             	add    esp,0x10
c000897b:	ba 24 36 02 c0       	mov    edx,0xc0023624
c0008980:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008984:	89 10                	mov    DWORD PTR [eax],edx
c0008986:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000898a:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0008994:	90                   	nop
c0008995:	83 c4 0c             	add    esp,0xc
c0008998:	c3                   	ret    
c0008999:	90                   	nop
c000899a:	66 90                	xchg   ax,ax

c000899c <Bus::~Bus()>:
c000899c:	83 ec 0c             	sub    esp,0xc
c000899f:	ba 24 36 02 c0       	mov    edx,0xc0023624
c00089a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089a8:	89 10                	mov    DWORD PTR [eax],edx
c00089aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089ae:	83 ec 0c             	sub    esp,0xc
c00089b1:	50                   	push   eax
c00089b2:	e8 41 0f 00 00       	call   c00098f8 <Device::~Device()>
c00089b7:	83 c4 10             	add    esp,0x10
c00089ba:	90                   	nop
c00089bb:	83 c4 0c             	add    esp,0xc
c00089be:	c3                   	ret    
c00089bf:	90                   	nop

c00089c0 <Bus::~Bus()>:
c00089c0:	83 ec 0c             	sub    esp,0xc
c00089c3:	83 ec 0c             	sub    esp,0xc
c00089c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089ca:	e8 cd ff ff ff       	call   c000899c <Bus::~Bus()>
c00089cf:	83 c4 10             	add    esp,0x10
c00089d2:	83 ec 08             	sub    esp,0x8
c00089d5:	68 58 01 00 00       	push   0x158
c00089da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089de:	e8 12 49 00 00       	call   c000d2f5 <operator delete(void*, unsigned long)>
c00089e3:	83 c4 10             	add    esp,0x10
c00089e6:	83 c4 0c             	add    esp,0xc
c00089e9:	c3                   	ret    

c00089ea <KeBeepThread(void*)>:
c00089ea:	83 ec 0c             	sub    esp,0xc
c00089ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089f1:	f0 ff 0d 50 fa 02 c0 	lock dec DWORD PTR ds:0xc002fa50
c00089f8:	83 3d 50 fa 02 c0 00 	cmp    DWORD PTR ds:0xc002fa50,0x0
c00089ff:	75 01                	jne    c0008a02 <KeBeepThread(void*)+0x18>
c0008a01:	fb                   	sti    
c0008a02:	6b c0 0a             	imul   eax,eax,0xa
c0008a05:	52                   	push   edx
c0008a06:	52                   	push   edx
c0008a07:	99                   	cdq    
c0008a08:	52                   	push   edx
c0008a09:	50                   	push   eax
c0008a0a:	e8 b1 e8 00 00       	call   c00172c0 <milliTenthSleep(unsigned long long)>
c0008a0f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008a16:	e8 13 1f 01 00       	call   c001a92e <HalMakeBeep(int)>
c0008a1b:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c0008a23:	83 c4 1c             	add    esp,0x1c
c0008a26:	e9 61 e7 00 00       	jmp    c001718c <blockTask(TaskState)>

c0008a2b <KeBeep(int, int, bool)>:
c0008a2b:	56                   	push   esi
c0008a2c:	53                   	push   ebx
c0008a2d:	83 ec 10             	sub    esp,0x10
c0008a30:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008a34:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008a38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008a3c:	e8 ed 1e 01 00       	call   c001a92e <HalMakeBeep(int)>
c0008a41:	89 f0                	mov    eax,esi
c0008a43:	83 c4 10             	add    esp,0x10
c0008a46:	84 c0                	test   al,al
c0008a48:	74 1f                	je     c0008a69 <KeBeep(int, int, bool)+0x3e>
c0008a4a:	50                   	push   eax
c0008a4b:	50                   	push   eax
c0008a4c:	6b c3 0a             	imul   eax,ebx,0xa
c0008a4f:	99                   	cdq    
c0008a50:	52                   	push   edx
c0008a51:	50                   	push   eax
c0008a52:	e8 69 e8 00 00       	call   c00172c0 <milliTenthSleep(unsigned long long)>
c0008a57:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0008a5f:	83 c4 14             	add    esp,0x14
c0008a62:	5b                   	pop    ebx
c0008a63:	5e                   	pop    esi
c0008a64:	e9 c5 1e 01 00       	jmp    c001a92e <HalMakeBeep(int)>
c0008a69:	68 e6 00 00 00       	push   0xe6
c0008a6e:	53                   	push   ebx
c0008a6f:	68 ea 89 00 c0       	push   0xc00089ea
c0008a74:	ff 35 78 fa 02 c0    	push   DWORD PTR ds:0xc002fa78
c0008a7a:	e8 a5 e3 00 00       	call   c0016e24 <Process::createThread(void (*)(void*), void*, int)>
c0008a7f:	83 c4 14             	add    esp,0x14
c0008a82:	5b                   	pop    ebx
c0008a83:	5e                   	pop    esi
c0008a84:	c3                   	ret    
c0008a85:	90                   	nop

c0008a86 <KeLoadTimezoneStrings()>:
c0008a86:	55                   	push   ebp
c0008a87:	89 e5                	mov    ebp,esp
c0008a89:	53                   	push   ebx
c0008a8a:	83 ec 44             	sub    esp,0x44
c0008a8d:	c6 05 20 c3 02 c0 01 	mov    BYTE PTR ds:0xc002c320,0x1
c0008a94:	c7 45 dc 14 01 00 00 	mov    DWORD PTR [ebp-0x24],0x114
c0008a9b:	83 ec 0c             	sub    esp,0xc
c0008a9e:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
c0008aa1:	e8 d6 70 00 00       	call   c000fb7c <malloc>
c0008aa6:	83 c4 10             	add    esp,0x10
c0008aa9:	89 c3                	mov    ebx,eax
c0008aab:	a1 78 fa 02 c0       	mov    eax,ds:0xc002fa78
c0008ab0:	83 ec 04             	sub    esp,0x4
c0008ab3:	50                   	push   eax
c0008ab4:	68 60 36 02 c0       	push   0xc0023660
c0008ab9:	53                   	push   ebx
c0008aba:	e8 c9 f6 ff ff       	call   c0008188 <File::File(char const*, Process*)>
c0008abf:	83 c4 10             	add    esp,0x10
c0008ac2:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c0008ac5:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0008ac9:	75 10                	jne    c0008adb <KeLoadTimezoneStrings()+0x55>
c0008acb:	83 ec 0c             	sub    esp,0xc
c0008ace:	68 7f 36 02 c0       	push   0xc002367f
c0008ad3:	e8 b2 73 00 00       	call   c000fe8a <KePanic(char const*)>
c0008ad8:	83 c4 10             	add    esp,0x10
c0008adb:	83 ec 08             	sub    esp,0x8
c0008ade:	6a 01                	push   0x1
c0008ae0:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0008ae3:	e8 be f6 ff ff       	call   c00081a6 <File::open(FileOpenMode)>
c0008ae8:	83 c4 10             	add    esp,0x10
c0008aeb:	83 ec 04             	sub    esp,0x4
c0008aee:	8d 45 cf             	lea    eax,[ebp-0x31]
c0008af1:	50                   	push   eax
c0008af2:	8d 45 d0             	lea    eax,[ebp-0x30]
c0008af5:	50                   	push   eax
c0008af6:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0008af9:	e8 aa f9 ff ff       	call   c00084a8 <File::stat(unsigned long long*, bool*)>
c0008afe:	83 c4 10             	add    esp,0x10
c0008b01:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0008b04:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0008b07:	83 ec 08             	sub    esp,0x8
c0008b0a:	50                   	push   eax
c0008b0b:	68 95 36 02 c0       	push   0xc0023695
c0008b10:	e8 51 e4 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0008b15:	83 c4 10             	add    esp,0x10
c0008b18:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0008b1b:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0008b1e:	83 c0 01             	add    eax,0x1
c0008b21:	83 ec 0c             	sub    esp,0xc
c0008b24:	50                   	push   eax
c0008b25:	e8 52 70 00 00       	call   c000fb7c <malloc>
c0008b2a:	83 c4 10             	add    esp,0x10
c0008b2d:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0008b30:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0008b33:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0008b36:	83 ec 04             	sub    esp,0x4
c0008b39:	50                   	push   eax
c0008b3a:	6a 00                	push   0x0
c0008b3c:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0008b3f:	e8 ac 79 ff ff       	call   c00004f0 <memset>
c0008b44:	83 c4 10             	add    esp,0x10
c0008b47:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0008b4a:	8b 00                	mov    eax,DWORD PTR [eax]
c0008b4c:	83 c0 0c             	add    eax,0xc
c0008b4f:	8b 08                	mov    ecx,DWORD PTR [eax]
c0008b51:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0008b54:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0008b57:	83 ec 0c             	sub    esp,0xc
c0008b5a:	8d 5d c8             	lea    ebx,[ebp-0x38]
c0008b5d:	53                   	push   ebx
c0008b5e:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0008b61:	52                   	push   edx
c0008b62:	50                   	push   eax
c0008b63:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0008b66:	ff d1                	call   ecx
c0008b68:	83 c4 20             	add    esp,0x20
c0008b6b:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0008b6e:	83 ec 08             	sub    esp,0x8
c0008b71:	50                   	push   eax
c0008b72:	68 a5 36 02 c0       	push   0xc00236a5
c0008b77:	e8 ea e3 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0008b7c:	83 c4 10             	add    esp,0x10
c0008b7f:	83 ec 0c             	sub    esp,0xc
c0008b82:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0008b85:	e8 7a f6 ff ff       	call   c0008204 <File::close()>
c0008b8a:	83 c4 10             	add    esp,0x10
c0008b8d:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0008b91:	74 15                	je     c0008ba8 <KeLoadTimezoneStrings()+0x122>
c0008b93:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0008b96:	8b 00                	mov    eax,DWORD PTR [eax]
c0008b98:	83 c0 08             	add    eax,0x8
c0008b9b:	8b 00                	mov    eax,DWORD PTR [eax]
c0008b9d:	83 ec 0c             	sub    esp,0xc
c0008ba0:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0008ba3:	ff d0                	call   eax
c0008ba5:	83 c4 10             	add    esp,0x10
c0008ba8:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0008baf:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c0008bb6:	81 7d f0 c7 00 00 00 	cmp    DWORD PTR [ebp-0x10],0xc7
c0008bbd:	7f 3a                	jg     c0008bf9 <KeLoadTimezoneStrings()+0x173>
c0008bbf:	83 ec 0c             	sub    esp,0xc
c0008bc2:	6a 78                	push   0x78
c0008bc4:	e8 b3 6f 00 00       	call   c000fb7c <malloc>
c0008bc9:	83 c4 10             	add    esp,0x10
c0008bcc:	89 c2                	mov    edx,eax
c0008bce:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0008bd1:	89 14 85 40 c3 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3cc0],edx
c0008bd8:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0008bdb:	8b 04 85 40 c3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3cc0]
c0008be2:	83 ec 08             	sub    esp,0x8
c0008be5:	68 ae 36 02 c0       	push   0xc00236ae
c0008bea:	50                   	push   eax
c0008beb:	e8 60 7a ff ff       	call   c0000650 <strcpy>
c0008bf0:	83 c4 10             	add    esp,0x10
c0008bf3:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c0008bf7:	eb bd                	jmp    c0008bb6 <KeLoadTimezoneStrings()+0x130>
c0008bf9:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0008c00:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0008c03:	8d 50 01             	lea    edx,[eax+0x1]
c0008c06:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0008c09:	89 c2                	mov    edx,eax
c0008c0b:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0008c0e:	01 d0                	add    eax,edx
c0008c10:	8a 00                	mov    al,BYTE PTR [eax]
c0008c12:	88 45 c6             	mov    BYTE PTR [ebp-0x3a],al
c0008c15:	c6 45 c7 00          	mov    BYTE PTR [ebp-0x39],0x0
c0008c19:	8a 45 c6             	mov    al,BYTE PTR [ebp-0x3a]
c0008c1c:	0f be c0             	movsx  eax,al
c0008c1f:	83 f8 0d             	cmp    eax,0xd
c0008c22:	0f 84 82 01 00 00    	je     c0008daa <KeLoadTimezoneStrings()+0x324>
c0008c28:	8a 45 c6             	mov    al,BYTE PTR [ebp-0x3a]
c0008c2b:	0f be c0             	movsx  eax,al
c0008c2e:	83 f8 09             	cmp    eax,0x9
c0008c31:	75 44                	jne    c0008c77 <KeLoadTimezoneStrings()+0x1f1>
c0008c33:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008c36:	8b 04 85 40 c3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3cc0]
c0008c3d:	83 ec 0c             	sub    esp,0xc
c0008c40:	50                   	push   eax
c0008c41:	e8 3a 79 ff ff       	call   c0000580 <strlen>
c0008c46:	83 c4 10             	add    esp,0x10
c0008c49:	83 f8 08             	cmp    eax,0x8
c0008c4c:	0f 96 c0             	setbe  al
c0008c4f:	0f b6 c0             	movzx  eax,al
c0008c52:	85 c0                	test   eax,eax
c0008c54:	0f 84 56 01 00 00    	je     c0008db0 <KeLoadTimezoneStrings()+0x32a>
c0008c5a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008c5d:	8b 04 85 40 c3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3cc0]
c0008c64:	83 ec 08             	sub    esp,0x8
c0008c67:	68 ae 36 02 c0       	push   0xc00236ae
c0008c6c:	50                   	push   eax
c0008c6d:	e8 fe 7b ff ff       	call   c0000870 <strcat>
c0008c72:	83 c4 10             	add    esp,0x10
c0008c75:	eb bc                	jmp    c0008c33 <KeLoadTimezoneStrings()+0x1ad>
c0008c77:	8a 45 c6             	mov    al,BYTE PTR [ebp-0x3a]
c0008c7a:	0f be c0             	movsx  eax,al
c0008c7d:	83 f8 0a             	cmp    eax,0xa
c0008c80:	0f 85 9b 00 00 00    	jne    c0008d21 <KeLoadTimezoneStrings()+0x29b>
c0008c86:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008c89:	8b 04 85 40 c3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3cc0]
c0008c90:	83 ec 0c             	sub    esp,0xc
c0008c93:	50                   	push   eax
c0008c94:	e8 e7 78 ff ff       	call   c0000580 <strlen>
c0008c99:	83 c4 10             	add    esp,0x10
c0008c9c:	83 f8 35             	cmp    eax,0x35
c0008c9f:	0f 96 c0             	setbe  al
c0008ca2:	0f b6 c0             	movzx  eax,al
c0008ca5:	85 c0                	test   eax,eax
c0008ca7:	74 1d                	je     c0008cc6 <KeLoadTimezoneStrings()+0x240>
c0008ca9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008cac:	8b 04 85 40 c3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3cc0]
c0008cb3:	83 ec 08             	sub    esp,0x8
c0008cb6:	68 ae 36 02 c0       	push   0xc00236ae
c0008cbb:	50                   	push   eax
c0008cbc:	e8 af 7b ff ff       	call   c0000870 <strcat>
c0008cc1:	83 c4 10             	add    esp,0x10
c0008cc4:	eb c0                	jmp    c0008c86 <KeLoadTimezoneStrings()+0x200>
c0008cc6:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c0008cca:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0008ccd:	89 c2                	mov    edx,eax
c0008ccf:	c1 fa 1f             	sar    edx,0x1f
c0008cd2:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0008cd5:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0008cd8:	39 c8                	cmp    eax,ecx
c0008cda:	89 d0                	mov    eax,edx
c0008cdc:	19 d8                	sbb    eax,ebx
c0008cde:	0f 82 d2 00 00 00    	jb     c0008db6 <KeLoadTimezoneStrings()+0x330>
c0008ce4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008ce7:	a3 24 c3 02 c0       	mov    ds:0xc002c324,eax
c0008cec:	83 ec 08             	sub    esp,0x8
c0008cef:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0008cf2:	68 b0 36 02 c0       	push   0xc00236b0
c0008cf7:	e8 6a e2 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0008cfc:	83 c4 10             	add    esp,0x10
c0008cff:	a1 24 c3 02 c0       	mov    eax,ds:0xc002c324
c0008d04:	83 ec 08             	sub    esp,0x8
c0008d07:	50                   	push   eax
c0008d08:	68 c5 36 02 c0       	push   0xc00236c5
c0008d0d:	e8 54 e2 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0008d12:	83 c4 10             	add    esp,0x10
c0008d15:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
c0008d1c:	e9 9b 00 00 00       	jmp    c0008dbc <KeLoadTimezoneStrings()+0x336>
c0008d21:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008d24:	8b 04 85 40 c3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3cc0]
c0008d2b:	83 ec 0c             	sub    esp,0xc
c0008d2e:	50                   	push   eax
c0008d2f:	e8 4c 78 ff ff       	call   c0000580 <strlen>
c0008d34:	83 c4 10             	add    esp,0x10
c0008d37:	83 f8 31             	cmp    eax,0x31
c0008d3a:	0f 96 c0             	setbe  al
c0008d3d:	0f b6 c0             	movzx  eax,al
c0008d40:	85 c0                	test   eax,eax
c0008d42:	74 1f                	je     c0008d63 <KeLoadTimezoneStrings()+0x2dd>
c0008d44:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008d47:	8b 04 85 40 c3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3cc0]
c0008d4e:	83 ec 08             	sub    esp,0x8
c0008d51:	8d 55 c6             	lea    edx,[ebp-0x3a]
c0008d54:	52                   	push   edx
c0008d55:	50                   	push   eax
c0008d56:	e8 15 7b ff ff       	call   c0000870 <strcat>
c0008d5b:	83 c4 10             	add    esp,0x10
c0008d5e:	e9 9d fe ff ff       	jmp    c0008c00 <KeLoadTimezoneStrings()+0x17a>
c0008d63:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008d66:	8b 04 85 40 c3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3cc0]
c0008d6d:	83 ec 0c             	sub    esp,0xc
c0008d70:	50                   	push   eax
c0008d71:	e8 0a 78 ff ff       	call   c0000580 <strlen>
c0008d76:	83 c4 10             	add    esp,0x10
c0008d79:	83 f8 32             	cmp    eax,0x32
c0008d7c:	0f 94 c0             	sete   al
c0008d7f:	0f b6 c0             	movzx  eax,al
c0008d82:	85 c0                	test   eax,eax
c0008d84:	0f 84 76 fe ff ff    	je     c0008c00 <KeLoadTimezoneStrings()+0x17a>
c0008d8a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008d8d:	8b 04 85 40 c3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3cc0]
c0008d94:	83 ec 08             	sub    esp,0x8
c0008d97:	68 c9 36 02 c0       	push   0xc00236c9
c0008d9c:	50                   	push   eax
c0008d9d:	e8 ce 7a ff ff       	call   c0000870 <strcat>
c0008da2:	83 c4 10             	add    esp,0x10
c0008da5:	e9 56 fe ff ff       	jmp    c0008c00 <KeLoadTimezoneStrings()+0x17a>
c0008daa:	90                   	nop
c0008dab:	e9 50 fe ff ff       	jmp    c0008c00 <KeLoadTimezoneStrings()+0x17a>
c0008db0:	90                   	nop
c0008db1:	e9 4a fe ff ff       	jmp    c0008c00 <KeLoadTimezoneStrings()+0x17a>
c0008db6:	90                   	nop
c0008db7:	e9 44 fe ff ff       	jmp    c0008c00 <KeLoadTimezoneStrings()+0x17a>
c0008dbc:	a1 24 c3 02 c0       	mov    eax,ds:0xc002c324
c0008dc1:	39 45 e8             	cmp    DWORD PTR [ebp-0x18],eax
c0008dc4:	7d 49                	jge    c0008e0f <KeLoadTimezoneStrings()+0x389>
c0008dc6:	a1 24 c3 02 c0       	mov    eax,ds:0xc002c324
c0008dcb:	39 45 e8             	cmp    DWORD PTR [ebp-0x18],eax
c0008dce:	0f 9c c0             	setl   al
c0008dd1:	0f b6 d0             	movzx  edx,al
c0008dd4:	a1 24 c3 02 c0       	mov    eax,ds:0xc002c324
c0008dd9:	52                   	push   edx
c0008dda:	50                   	push   eax
c0008ddb:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c0008dde:	68 ce 36 02 c0       	push   0xc00236ce
c0008de3:	e8 7e e1 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0008de8:	83 c4 10             	add    esp,0x10
c0008deb:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0008dee:	8b 04 85 40 c3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3cc0]
c0008df5:	83 ec 04             	sub    esp,0x4
c0008df8:	50                   	push   eax
c0008df9:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c0008dfc:	68 dc 36 02 c0       	push   0xc00236dc
c0008e01:	e8 60 e1 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0008e06:	83 c4 10             	add    esp,0x10
c0008e09:	83 45 e8 01          	add    DWORD PTR [ebp-0x18],0x1
c0008e0d:	eb ad                	jmp    c0008dbc <KeLoadTimezoneStrings()+0x336>
c0008e0f:	90                   	nop
c0008e10:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0008e13:	c9                   	leave  
c0008e14:	c3                   	ret    

c0008e15 <KeGetTimezoneStringFromID(int)>:
c0008e15:	55                   	push   ebp
c0008e16:	89 e5                	mov    ebp,esp
c0008e18:	83 ec 08             	sub    esp,0x8
c0008e1b:	83 ec 08             	sub    esp,0x8
c0008e1e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0008e21:	68 e5 36 02 c0       	push   0xc00236e5
c0008e26:	e8 3b e1 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0008e2b:	83 c4 10             	add    esp,0x10
c0008e2e:	a0 20 c3 02 c0       	mov    al,ds:0xc002c320
c0008e33:	83 f0 01             	xor    eax,0x1
c0008e36:	0f b6 c0             	movzx  eax,al
c0008e39:	85 c0                	test   eax,eax
c0008e3b:	74 15                	je     c0008e52 <KeGetTimezoneStringFromID(int)+0x3d>
c0008e3d:	e8 44 fc ff ff       	call   c0008a86 <KeLoadTimezoneStrings()>
c0008e42:	83 ec 0c             	sub    esp,0xc
c0008e45:	68 03 37 02 c0       	push   0xc0023703
c0008e4a:	e8 17 e1 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0008e4f:	83 c4 10             	add    esp,0x10
c0008e52:	a1 24 c3 02 c0       	mov    eax,ds:0xc002c324
c0008e57:	83 ec 04             	sub    esp,0x4
c0008e5a:	50                   	push   eax
c0008e5b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0008e5e:	68 14 37 02 c0       	push   0xc0023714
c0008e63:	e8 fe e0 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0008e68:	83 c4 10             	add    esp,0x10
c0008e6b:	a1 24 c3 02 c0       	mov    eax,ds:0xc002c324
c0008e70:	39 45 08             	cmp    DWORD PTR [ebp+0x8],eax
c0008e73:	7d 06                	jge    c0008e7b <KeGetTimezoneStringFromID(int)+0x66>
c0008e75:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
c0008e79:	79 07                	jns    c0008e82 <KeGetTimezoneStringFromID(int)+0x6d>
c0008e7b:	b8 00 00 00 00       	mov    eax,0x0
c0008e80:	eb 2e                	jmp    c0008eb0 <KeGetTimezoneStringFromID(int)+0x9b>
c0008e82:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008e85:	8b 04 85 40 c3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3cc0]
c0008e8c:	83 c0 01             	add    eax,0x1
c0008e8f:	83 ec 04             	sub    esp,0x4
c0008e92:	50                   	push   eax
c0008e93:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0008e96:	68 27 37 02 c0       	push   0xc0023727
c0008e9b:	e8 c6 e0 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0008ea0:	83 c4 10             	add    esp,0x10
c0008ea3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ea6:	8b 04 85 40 c3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3cc0]
c0008ead:	83 c0 01             	add    eax,0x1
c0008eb0:	c9                   	leave  
c0008eb1:	c3                   	ret    

c0008eb2 <KeUpdateTimezone(char const*)>:
c0008eb2:	55                   	push   ebp
c0008eb3:	89 e5                	mov    ebp,esp
c0008eb5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008eb8:	8a 00                	mov    al,BYTE PTR [eax]
c0008eba:	0f be c0             	movsx  eax,al
c0008ebd:	83 f8 2b             	cmp    eax,0x2b
c0008ec0:	74 11                	je     c0008ed3 <KeUpdateTimezone(char const*)+0x21>
c0008ec2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ec5:	8a 00                	mov    al,BYTE PTR [eax]
c0008ec7:	0f be c0             	movsx  eax,al
c0008eca:	83 f8 2d             	cmp    eax,0x2d
c0008ecd:	0f 85 be 00 00 00    	jne    c0008f91 <KeUpdateTimezone(char const*)+0xdf>
c0008ed3:	c6 05 60 c6 02 c0 00 	mov    BYTE PTR ds:0xc002c660,0x0
c0008eda:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008edd:	83 c0 02             	add    eax,0x2
c0008ee0:	8a 00                	mov    al,BYTE PTR [eax]
c0008ee2:	0f be c0             	movsx  eax,al
c0008ee5:	83 f8 2e             	cmp    eax,0x2e
c0008ee8:	75 10                	jne    c0008efa <KeUpdateTimezone(char const*)+0x48>
c0008eea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008eed:	83 c0 03             	add    eax,0x3
c0008ef0:	8a 00                	mov    al,BYTE PTR [eax]
c0008ef2:	0f be c0             	movsx  eax,al
c0008ef5:	83 f8 35             	cmp    eax,0x35
c0008ef8:	74 20                	je     c0008f1a <KeUpdateTimezone(char const*)+0x68>
c0008efa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008efd:	83 c0 03             	add    eax,0x3
c0008f00:	8a 00                	mov    al,BYTE PTR [eax]
c0008f02:	0f be c0             	movsx  eax,al
c0008f05:	83 f8 2e             	cmp    eax,0x2e
c0008f08:	75 14                	jne    c0008f1e <KeUpdateTimezone(char const*)+0x6c>
c0008f0a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f0d:	83 c0 04             	add    eax,0x4
c0008f10:	8a 00                	mov    al,BYTE PTR [eax]
c0008f12:	0f be c0             	movsx  eax,al
c0008f15:	83 f8 35             	cmp    eax,0x35
c0008f18:	75 04                	jne    c0008f1e <KeUpdateTimezone(char const*)+0x6c>
c0008f1a:	b0 01                	mov    al,0x1
c0008f1c:	eb 02                	jmp    c0008f20 <KeUpdateTimezone(char const*)+0x6e>
c0008f1e:	b0 00                	mov    al,0x0
c0008f20:	a2 61 c6 02 c0       	mov    ds:0xc002c661,al
c0008f25:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f28:	83 c0 01             	add    eax,0x1
c0008f2b:	8a 00                	mov    al,BYTE PTR [eax]
c0008f2d:	0f be c0             	movsx  eax,al
c0008f30:	83 e8 30             	sub    eax,0x30
c0008f33:	a3 64 c6 02 c0       	mov    ds:0xc002c664,eax
c0008f38:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f3b:	83 c0 03             	add    eax,0x3
c0008f3e:	8a 00                	mov    al,BYTE PTR [eax]
c0008f40:	0f be c0             	movsx  eax,al
c0008f43:	83 f8 2e             	cmp    eax,0x2e
c0008f46:	75 2e                	jne    c0008f76 <KeUpdateTimezone(char const*)+0xc4>
c0008f48:	8b 15 64 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c664
c0008f4e:	89 d0                	mov    eax,edx
c0008f50:	c1 e0 02             	shl    eax,0x2
c0008f53:	01 d0                	add    eax,edx
c0008f55:	d1 e0                	shl    eax,1
c0008f57:	a3 64 c6 02 c0       	mov    ds:0xc002c664,eax
c0008f5c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f5f:	83 c0 02             	add    eax,0x2
c0008f62:	8a 00                	mov    al,BYTE PTR [eax]
c0008f64:	0f be c0             	movsx  eax,al
c0008f67:	8d 50 d0             	lea    edx,[eax-0x30]
c0008f6a:	a1 64 c6 02 c0       	mov    eax,ds:0xc002c664
c0008f6f:	01 d0                	add    eax,edx
c0008f71:	a3 64 c6 02 c0       	mov    ds:0xc002c664,eax
c0008f76:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f79:	8a 00                	mov    al,BYTE PTR [eax]
c0008f7b:	0f be c0             	movsx  eax,al
c0008f7e:	83 f8 2d             	cmp    eax,0x2d
c0008f81:	75 26                	jne    c0008fa9 <KeUpdateTimezone(char const*)+0xf7>
c0008f83:	a1 64 c6 02 c0       	mov    eax,ds:0xc002c664
c0008f88:	f7 d8                	neg    eax
c0008f8a:	a3 64 c6 02 c0       	mov    ds:0xc002c664,eax
c0008f8f:	eb 18                	jmp    c0008fa9 <KeUpdateTimezone(char const*)+0xf7>
c0008f91:	c6 05 60 c6 02 c0 00 	mov    BYTE PTR ds:0xc002c660,0x0
c0008f98:	c6 05 61 c6 02 c0 00 	mov    BYTE PTR ds:0xc002c661,0x0
c0008f9f:	c7 05 64 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c664,0x0
c0008fa9:	90                   	nop
c0008faa:	5d                   	pop    ebp
c0008fab:	c3                   	ret    

c0008fac <KeSetTimezone(char const*)>:
c0008fac:	55                   	push   ebp
c0008fad:	89 e5                	mov    ebp,esp
c0008faf:	83 ec 18             	sub    esp,0x18
c0008fb2:	83 ec 0c             	sub    esp,0xc
c0008fb5:	68 34 37 02 c0       	push   0xc0023734
c0008fba:	e8 89 43 00 00       	call   c000d348 <CmOpen(char const*)>
c0008fbf:	83 c4 10             	add    esp,0x10
c0008fc2:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0008fc5:	83 ec 08             	sub    esp,0x8
c0008fc8:	68 59 37 02 c0       	push   0xc0023759
c0008fcd:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0008fd0:	e8 6e 4f 00 00       	call   c000df43 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0008fd5:	83 c4 10             	add    esp,0x10
c0008fd8:	83 ec 04             	sub    esp,0x4
c0008fdb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0008fde:	50                   	push   eax
c0008fdf:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0008fe2:	e8 33 48 00 00       	call   c000d81a <CmSetString(Reghive_Tag*, int, char const*)>
c0008fe7:	83 c4 10             	add    esp,0x10
c0008fea:	83 ec 0c             	sub    esp,0xc
c0008fed:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0008ff0:	e8 71 44 00 00       	call   c000d466 <CmClose(Reghive_Tag*)>
c0008ff5:	83 c4 10             	add    esp,0x10
c0008ff8:	83 ec 0c             	sub    esp,0xc
c0008ffb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0008ffe:	e8 af fe ff ff       	call   c0008eb2 <KeUpdateTimezone(char const*)>
c0009003:	83 c4 10             	add    esp,0x10
c0009006:	90                   	nop
c0009007:	c9                   	leave  
c0009008:	c3                   	ret    

c0009009 <KeSetTimezone(int)>:
c0009009:	55                   	push   ebp
c000900a:	89 e5                	mov    ebp,esp
c000900c:	83 ec 18             	sub    esp,0x18
c000900f:	83 ec 0c             	sub    esp,0xc
c0009012:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0009015:	e8 fb fd ff ff       	call   c0008e15 <KeGetTimezoneStringFromID(int)>
c000901a:	83 c4 10             	add    esp,0x10
c000901d:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0009020:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0009024:	74 12                	je     c0009038 <KeSetTimezone(int)+0x2f>
c0009026:	83 ec 0c             	sub    esp,0xc
c0009029:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000902c:	e8 7b ff ff ff       	call   c0008fac <KeSetTimezone(char const*)>
c0009031:	83 c4 10             	add    esp,0x10
c0009034:	b0 01                	mov    al,0x1
c0009036:	eb 02                	jmp    c000903a <KeSetTimezone(int)+0x31>
c0009038:	b0 00                	mov    al,0x0
c000903a:	c9                   	leave  
c000903b:	c3                   	ret    

c000903c <KeLoadTimezone()>:
c000903c:	55                   	push   ebp
c000903d:	89 e5                	mov    ebp,esp
c000903f:	81 ec 68 02 00 00    	sub    esp,0x268
c0009045:	c6 85 98 fd ff ff 00 	mov    BYTE PTR [ebp-0x268],0x0
c000904c:	83 ec 0c             	sub    esp,0xc
c000904f:	68 34 37 02 c0       	push   0xc0023734
c0009054:	e8 ef 42 00 00       	call   c000d348 <CmOpen(char const*)>
c0009059:	83 c4 10             	add    esp,0x10
c000905c:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000905f:	83 ec 08             	sub    esp,0x8
c0009062:	68 59 37 02 c0       	push   0xc0023759
c0009067:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000906a:	e8 d4 4e 00 00       	call   c000df43 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c000906f:	83 c4 10             	add    esp,0x10
c0009072:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0009075:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
c0009079:	7e 18                	jle    c0009093 <KeLoadTimezone()+0x57>
c000907b:	83 ec 04             	sub    esp,0x4
c000907e:	8d 85 98 fd ff ff    	lea    eax,[ebp-0x268]
c0009084:	50                   	push   eax
c0009085:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0009088:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000908b:	e8 28 44 00 00       	call   c000d4b8 <CmGetString(Reghive_Tag*, int, char*)>
c0009090:	83 c4 10             	add    esp,0x10
c0009093:	83 ec 0c             	sub    esp,0xc
c0009096:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0009099:	e8 c8 43 00 00       	call   c000d466 <CmClose(Reghive_Tag*)>
c000909e:	83 c4 10             	add    esp,0x10
c00090a1:	83 ec 0c             	sub    esp,0xc
c00090a4:	8d 85 98 fd ff ff    	lea    eax,[ebp-0x268]
c00090aa:	50                   	push   eax
c00090ab:	e8 02 fe ff ff       	call   c0008eb2 <KeUpdateTimezone(char const*)>
c00090b0:	83 c4 10             	add    esp,0x10
c00090b3:	90                   	nop
c00090b4:	c9                   	leave  
c00090b5:	c3                   	ret    

c00090b6 <Clock::Clock(char const*)>:
c00090b6:	83 ec 0c             	sub    esp,0xc
c00090b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090bd:	83 ec 08             	sub    esp,0x8
c00090c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090c4:	50                   	push   eax
c00090c5:	e8 8e 0a 00 00       	call   c0009b58 <Device::Device(char const*)>
c00090ca:	83 c4 10             	add    esp,0x10
c00090cd:	ba b8 37 02 c0       	mov    edx,0xc00237b8
c00090d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090d6:	89 10                	mov    DWORD PTR [eax],edx
c00090d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090dc:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c00090e6:	90                   	nop
c00090e7:	83 c4 0c             	add    esp,0xc
c00090ea:	c3                   	ret    
c00090eb:	90                   	nop

c00090ec <Clock::~Clock()>:
c00090ec:	83 ec 0c             	sub    esp,0xc
c00090ef:	ba b8 37 02 c0       	mov    edx,0xc00237b8
c00090f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090f8:	89 10                	mov    DWORD PTR [eax],edx
c00090fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090fe:	83 ec 0c             	sub    esp,0xc
c0009101:	50                   	push   eax
c0009102:	e8 f1 07 00 00       	call   c00098f8 <Device::~Device()>
c0009107:	83 c4 10             	add    esp,0x10
c000910a:	90                   	nop
c000910b:	83 c4 0c             	add    esp,0xc
c000910e:	c3                   	ret    
c000910f:	90                   	nop

c0009110 <Clock::~Clock()>:
c0009110:	83 ec 0c             	sub    esp,0xc
c0009113:	83 ec 0c             	sub    esp,0xc
c0009116:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000911a:	e8 cd ff ff ff       	call   c00090ec <Clock::~Clock()>
c000911f:	83 c4 10             	add    esp,0x10
c0009122:	83 ec 08             	sub    esp,0x8
c0009125:	68 58 01 00 00       	push   0x158
c000912a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000912e:	e8 c2 41 00 00       	call   c000d2f5 <operator delete(void*, unsigned long)>
c0009133:	83 c4 10             	add    esp,0x10
c0009136:	83 c4 0c             	add    esp,0xc
c0009139:	c3                   	ret    

c000913a <Clock::timeInSecondsLocal()>:
c000913a:	55                   	push   ebp
c000913b:	89 e5                	mov    ebp,esp
c000913d:	53                   	push   ebx
c000913e:	83 ec 04             	sub    esp,0x4
c0009141:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009144:	8b 00                	mov    eax,DWORD PTR [eax]
c0009146:	83 c0 24             	add    eax,0x24
c0009149:	8b 00                	mov    eax,DWORD PTR [eax]
c000914b:	83 ec 0c             	sub    esp,0xc
c000914e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0009151:	ff d0                	call   eax
c0009153:	83 c4 10             	add    esp,0x10
c0009156:	89 c1                	mov    ecx,eax
c0009158:	89 d3                	mov    ebx,edx
c000915a:	a0 60 c6 02 c0       	mov    al,ds:0xc002c660
c000915f:	0f b6 d0             	movzx  edx,al
c0009162:	a1 64 c6 02 c0       	mov    eax,ds:0xc002c664
c0009167:	01 d0                	add    eax,edx
c0009169:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000916f:	89 c2                	mov    edx,eax
c0009171:	c1 fa 1f             	sar    edx,0x1f
c0009174:	01 c1                	add    ecx,eax
c0009176:	11 d3                	adc    ebx,edx
c0009178:	a0 61 c6 02 c0       	mov    al,ds:0xc002c661
c000917d:	0f b6 c0             	movzx  eax,al
c0009180:	85 c0                	test   eax,eax
c0009182:	74 0c                	je     c0009190 <Clock::timeInSecondsLocal()+0x56>
c0009184:	b8 08 07 00 00       	mov    eax,0x708
c0009189:	ba 00 00 00 00       	mov    edx,0x0
c000918e:	eb 0a                	jmp    c000919a <Clock::timeInSecondsLocal()+0x60>
c0009190:	b8 00 00 00 00       	mov    eax,0x0
c0009195:	ba 00 00 00 00       	mov    edx,0x0
c000919a:	01 c8                	add    eax,ecx
c000919c:	11 da                	adc    edx,ebx
c000919e:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00091a1:	c9                   	leave  
c00091a2:	c3                   	ret    
c00091a3:	90                   	nop

c00091a4 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c00091a4:	55                   	push   ebp
c00091a5:	89 e5                	mov    ebp,esp
c00091a7:	56                   	push   esi
c00091a8:	53                   	push   ebx
c00091a9:	83 ec 10             	sub    esp,0x10
c00091ac:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00091af:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00091b2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00091b5:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00091b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00091bb:	8b 00                	mov    eax,DWORD PTR [eax]
c00091bd:	83 c0 2c             	add    eax,0x2c
c00091c0:	8b 30                	mov    esi,DWORD PTR [eax]
c00091c2:	a0 60 c6 02 c0       	mov    al,ds:0xc002c660
c00091c7:	0f b6 d0             	movzx  edx,al
c00091ca:	a1 64 c6 02 c0       	mov    eax,ds:0xc002c664
c00091cf:	01 d0                	add    eax,edx
c00091d1:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c00091d7:	89 c2                	mov    edx,eax
c00091d9:	c1 fa 1f             	sar    edx,0x1f
c00091dc:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c00091df:	8b 5d f4             	mov    ebx,DWORD PTR [ebp-0xc]
c00091e2:	29 c1                	sub    ecx,eax
c00091e4:	19 d3                	sbb    ebx,edx
c00091e6:	a0 61 c6 02 c0       	mov    al,ds:0xc002c661
c00091eb:	0f b6 c0             	movzx  eax,al
c00091ee:	85 c0                	test   eax,eax
c00091f0:	74 0c                	je     c00091fe <Clock::setTimeInSecondsLocal(unsigned long long)+0x5a>
c00091f2:	b8 08 07 00 00       	mov    eax,0x708
c00091f7:	ba 00 00 00 00       	mov    edx,0x0
c00091fc:	eb 0a                	jmp    c0009208 <Clock::setTimeInSecondsLocal(unsigned long long)+0x64>
c00091fe:	b8 00 00 00 00       	mov    eax,0x0
c0009203:	ba 00 00 00 00       	mov    edx,0x0
c0009208:	29 c1                	sub    ecx,eax
c000920a:	19 d3                	sbb    ebx,edx
c000920c:	89 c8                	mov    eax,ecx
c000920e:	89 da                	mov    edx,ebx
c0009210:	83 ec 04             	sub    esp,0x4
c0009213:	52                   	push   edx
c0009214:	50                   	push   eax
c0009215:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0009218:	ff d6                	call   esi
c000921a:	83 c4 10             	add    esp,0x10
c000921d:	8d 65 f8             	lea    esp,[ebp-0x8]
c0009220:	5b                   	pop    ebx
c0009221:	5e                   	pop    esi
c0009222:	5d                   	pop    ebp
c0009223:	c3                   	ret    

c0009224 <KeDatetimeToSeconds(datetime_t)>:
c0009224:	55                   	push   ebp
c0009225:	89 e5                	mov    ebp,esp
c0009227:	53                   	push   ebx
c0009228:	83 ec 24             	sub    esp,0x24
c000922b:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c000922f:	2d 6c 07 00 00       	sub    eax,0x76c
c0009234:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0009238:	8a 45 09             	mov    al,BYTE PTR [ebp+0x9]
c000923b:	83 e8 01             	sub    eax,0x1
c000923e:	88 45 09             	mov    BYTE PTR [ebp+0x9],al
c0009241:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
c0009248:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c000924f:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0009256:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c000925d:	8a 45 0e             	mov    al,BYTE PTR [ebp+0xe]
c0009260:	0f b6 c8             	movzx  ecx,al
c0009263:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0009266:	0f b6 d0             	movzx  edx,al
c0009269:	89 d0                	mov    eax,edx
c000926b:	c1 e0 04             	shl    eax,0x4
c000926e:	29 d0                	sub    eax,edx
c0009270:	c1 e0 02             	shl    eax,0x2
c0009273:	8d 14 01             	lea    edx,[ecx+eax*1]
c0009276:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0009279:	0f b6 c0             	movzx  eax,al
c000927c:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0009282:	01 d0                	add    eax,edx
c0009284:	89 c2                	mov    edx,eax
c0009286:	c1 fa 1f             	sar    edx,0x1f
c0009289:	01 45 e8             	add    DWORD PTR [ebp-0x18],eax
c000928c:	11 55 ec             	adc    DWORD PTR [ebp-0x14],edx
c000928f:	8a 45 08             	mov    al,BYTE PTR [ebp+0x8]
c0009292:	0f b6 c0             	movzx  eax,al
c0009295:	83 e8 01             	sub    eax,0x1
c0009298:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
c000929b:	8a 45 09             	mov    al,BYTE PTR [ebp+0x9]
c000929e:	0f b6 c0             	movzx  eax,al
c00092a1:	8b 04 85 80 37 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc880]
c00092a8:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
c00092ab:	8a 45 09             	mov    al,BYTE PTR [ebp+0x9]
c00092ae:	0f b6 c0             	movzx  eax,al
c00092b1:	83 f8 01             	cmp    eax,0x1
c00092b4:	76 7c                	jbe    c0009332 <KeDatetimeToSeconds(datetime_t)+0x10e>
c00092b6:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c00092ba:	0f b7 c0             	movzx  eax,ax
c00092bd:	83 e0 03             	and    eax,0x3
c00092c0:	85 c0                	test   eax,eax
c00092c2:	75 6e                	jne    c0009332 <KeDatetimeToSeconds(datetime_t)+0x10e>
c00092c4:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c00092c8:	0f b7 c8             	movzx  ecx,ax
c00092cb:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
c00092d0:	89 c8                	mov    eax,ecx
c00092d2:	f7 e2                	mul    edx
c00092d4:	c1 ea 05             	shr    edx,0x5
c00092d7:	89 d0                	mov    eax,edx
c00092d9:	c1 e0 02             	shl    eax,0x2
c00092dc:	01 d0                	add    eax,edx
c00092de:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00092e5:	01 d0                	add    eax,edx
c00092e7:	c1 e0 02             	shl    eax,0x2
c00092ea:	29 c1                	sub    ecx,eax
c00092ec:	89 c8                	mov    eax,ecx
c00092ee:	0f b7 c0             	movzx  eax,ax
c00092f1:	85 c0                	test   eax,eax
c00092f3:	75 39                	jne    c000932e <KeDatetimeToSeconds(datetime_t)+0x10a>
c00092f5:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c00092f9:	0f b7 c0             	movzx  eax,ax
c00092fc:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
c0009302:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c0009307:	f7 e9                	imul   ecx
c0009309:	c1 fa 07             	sar    edx,0x7
c000930c:	89 c8                	mov    eax,ecx
c000930e:	c1 f8 1f             	sar    eax,0x1f
c0009311:	29 c2                	sub    edx,eax
c0009313:	89 d0                	mov    eax,edx
c0009315:	c1 e0 02             	shl    eax,0x2
c0009318:	01 d0                	add    eax,edx
c000931a:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0009321:	01 d0                	add    eax,edx
c0009323:	c1 e0 04             	shl    eax,0x4
c0009326:	29 c1                	sub    ecx,eax
c0009328:	89 ca                	mov    edx,ecx
c000932a:	85 d2                	test   edx,edx
c000932c:	75 04                	jne    c0009332 <KeDatetimeToSeconds(datetime_t)+0x10e>
c000932e:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c0009332:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c0009336:	0f b7 c0             	movzx  eax,ax
c0009339:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000933c:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000933f:	83 f8 46             	cmp    eax,0x46
c0009342:	0f 9f c0             	setg   al
c0009345:	0f b6 c0             	movzx  eax,al
c0009348:	85 c0                	test   eax,eax
c000934a:	0f 84 a4 00 00 00    	je     c00093f4 <KeDatetimeToSeconds(datetime_t)+0x1d0>
c0009350:	c7 45 e0 46 00 00 00 	mov    DWORD PTR [ebp-0x20],0x46
c0009357:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c000935b:	0f b7 d0             	movzx  edx,ax
c000935e:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009361:	39 c2                	cmp    edx,eax
c0009363:	0f 8e b8 01 00 00    	jle    c0009521 <KeDatetimeToSeconds(datetime_t)+0x2fd>
c0009369:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000936c:	83 e0 03             	and    eax,0x3
c000936f:	85 c0                	test   eax,eax
c0009371:	75 6b                	jne    c00093de <KeDatetimeToSeconds(datetime_t)+0x1ba>
c0009373:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0009376:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c000937b:	f7 e9                	imul   ecx
c000937d:	c1 fa 05             	sar    edx,0x5
c0009380:	89 c8                	mov    eax,ecx
c0009382:	c1 f8 1f             	sar    eax,0x1f
c0009385:	29 c2                	sub    edx,eax
c0009387:	89 d0                	mov    eax,edx
c0009389:	c1 e0 02             	shl    eax,0x2
c000938c:	01 d0                	add    eax,edx
c000938e:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0009395:	01 d0                	add    eax,edx
c0009397:	c1 e0 02             	shl    eax,0x2
c000939a:	29 c1                	sub    ecx,eax
c000939c:	89 ca                	mov    edx,ecx
c000939e:	85 d2                	test   edx,edx
c00093a0:	75 35                	jne    c00093d7 <KeDatetimeToSeconds(datetime_t)+0x1b3>
c00093a2:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00093a5:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
c00093ab:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c00093b0:	f7 e9                	imul   ecx
c00093b2:	c1 fa 07             	sar    edx,0x7
c00093b5:	89 c8                	mov    eax,ecx
c00093b7:	c1 f8 1f             	sar    eax,0x1f
c00093ba:	29 c2                	sub    edx,eax
c00093bc:	89 d0                	mov    eax,edx
c00093be:	c1 e0 02             	shl    eax,0x2
c00093c1:	01 d0                	add    eax,edx
c00093c3:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00093ca:	01 d0                	add    eax,edx
c00093cc:	c1 e0 04             	shl    eax,0x4
c00093cf:	29 c1                	sub    ecx,eax
c00093d1:	89 ca                	mov    edx,ecx
c00093d3:	85 d2                	test   edx,edx
c00093d5:	75 07                	jne    c00093de <KeDatetimeToSeconds(datetime_t)+0x1ba>
c00093d7:	b8 6e 01 00 00       	mov    eax,0x16e
c00093dc:	eb 05                	jmp    c00093e3 <KeDatetimeToSeconds(datetime_t)+0x1bf>
c00093de:	b8 6d 01 00 00       	mov    eax,0x16d
c00093e3:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
c00093e6:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00093e9:	83 c0 01             	add    eax,0x1
c00093ec:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00093ef:	e9 63 ff ff ff       	jmp    c0009357 <KeDatetimeToSeconds(datetime_t)+0x133>
c00093f4:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00093f7:	83 f8 45             	cmp    eax,0x45
c00093fa:	0f 8f 21 01 00 00    	jg     c0009521 <KeDatetimeToSeconds(datetime_t)+0x2fd>
c0009400:	c7 45 e0 45 00 00 00 	mov    DWORD PTR [ebp-0x20],0x45
c0009407:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c000940b:	0f b7 d0             	movzx  edx,ax
c000940e:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009411:	39 c2                	cmp    edx,eax
c0009413:	0f 8d 8b 00 00 00    	jge    c00094a4 <KeDatetimeToSeconds(datetime_t)+0x280>
c0009419:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000941c:	83 e0 03             	and    eax,0x3
c000941f:	85 c0                	test   eax,eax
c0009421:	75 6b                	jne    c000948e <KeDatetimeToSeconds(datetime_t)+0x26a>
c0009423:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0009426:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c000942b:	f7 e9                	imul   ecx
c000942d:	c1 fa 05             	sar    edx,0x5
c0009430:	89 c8                	mov    eax,ecx
c0009432:	c1 f8 1f             	sar    eax,0x1f
c0009435:	29 c2                	sub    edx,eax
c0009437:	89 d0                	mov    eax,edx
c0009439:	c1 e0 02             	shl    eax,0x2
c000943c:	01 d0                	add    eax,edx
c000943e:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0009445:	01 d0                	add    eax,edx
c0009447:	c1 e0 02             	shl    eax,0x2
c000944a:	29 c1                	sub    ecx,eax
c000944c:	89 ca                	mov    edx,ecx
c000944e:	85 d2                	test   edx,edx
c0009450:	75 35                	jne    c0009487 <KeDatetimeToSeconds(datetime_t)+0x263>
c0009452:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009455:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
c000945b:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c0009460:	f7 e9                	imul   ecx
c0009462:	c1 fa 07             	sar    edx,0x7
c0009465:	89 c8                	mov    eax,ecx
c0009467:	c1 f8 1f             	sar    eax,0x1f
c000946a:	29 c2                	sub    edx,eax
c000946c:	89 d0                	mov    eax,edx
c000946e:	c1 e0 02             	shl    eax,0x2
c0009471:	01 d0                	add    eax,edx
c0009473:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000947a:	01 d0                	add    eax,edx
c000947c:	c1 e0 04             	shl    eax,0x4
c000947f:	29 c1                	sub    ecx,eax
c0009481:	89 ca                	mov    edx,ecx
c0009483:	85 d2                	test   edx,edx
c0009485:	75 07                	jne    c000948e <KeDatetimeToSeconds(datetime_t)+0x26a>
c0009487:	b8 6e 01 00 00       	mov    eax,0x16e
c000948c:	eb 05                	jmp    c0009493 <KeDatetimeToSeconds(datetime_t)+0x26f>
c000948e:	b8 6d 01 00 00       	mov    eax,0x16d
c0009493:	29 45 f4             	sub    DWORD PTR [ebp-0xc],eax
c0009496:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009499:	83 e8 01             	sub    eax,0x1
c000949c:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000949f:	e9 63 ff ff ff       	jmp    c0009407 <KeDatetimeToSeconds(datetime_t)+0x1e3>
c00094a4:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00094a7:	83 e0 03             	and    eax,0x3
c00094aa:	85 c0                	test   eax,eax
c00094ac:	75 6b                	jne    c0009519 <KeDatetimeToSeconds(datetime_t)+0x2f5>
c00094ae:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00094b1:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c00094b6:	f7 e9                	imul   ecx
c00094b8:	c1 fa 05             	sar    edx,0x5
c00094bb:	89 c8                	mov    eax,ecx
c00094bd:	c1 f8 1f             	sar    eax,0x1f
c00094c0:	29 c2                	sub    edx,eax
c00094c2:	89 d0                	mov    eax,edx
c00094c4:	c1 e0 02             	shl    eax,0x2
c00094c7:	01 d0                	add    eax,edx
c00094c9:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00094d0:	01 d0                	add    eax,edx
c00094d2:	c1 e0 02             	shl    eax,0x2
c00094d5:	29 c1                	sub    ecx,eax
c00094d7:	89 ca                	mov    edx,ecx
c00094d9:	85 d2                	test   edx,edx
c00094db:	75 35                	jne    c0009512 <KeDatetimeToSeconds(datetime_t)+0x2ee>
c00094dd:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00094e0:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
c00094e6:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c00094eb:	f7 e9                	imul   ecx
c00094ed:	c1 fa 07             	sar    edx,0x7
c00094f0:	89 c8                	mov    eax,ecx
c00094f2:	c1 f8 1f             	sar    eax,0x1f
c00094f5:	29 c2                	sub    edx,eax
c00094f7:	89 d0                	mov    eax,edx
c00094f9:	c1 e0 02             	shl    eax,0x2
c00094fc:	01 d0                	add    eax,edx
c00094fe:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0009505:	01 d0                	add    eax,edx
c0009507:	c1 e0 04             	shl    eax,0x4
c000950a:	29 c1                	sub    ecx,eax
c000950c:	89 ca                	mov    edx,ecx
c000950e:	85 d2                	test   edx,edx
c0009510:	75 07                	jne    c0009519 <KeDatetimeToSeconds(datetime_t)+0x2f5>
c0009512:	b8 6e 01 00 00       	mov    eax,0x16e
c0009517:	eb 05                	jmp    c000951e <KeDatetimeToSeconds(datetime_t)+0x2fa>
c0009519:	b8 6d 01 00 00       	mov    eax,0x16d
c000951e:	29 45 f4             	sub    DWORD PTR [ebp-0xc],eax
c0009521:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0009524:	89 c2                	mov    edx,eax
c0009526:	c1 fa 1f             	sar    edx,0x1f
c0009529:	69 da 80 51 01 00    	imul   ebx,edx,0x15180
c000952f:	6b c8 00             	imul   ecx,eax,0x0
c0009532:	01 d9                	add    ecx,ebx
c0009534:	bb 80 51 01 00       	mov    ebx,0x15180
c0009539:	f7 e3                	mul    ebx
c000953b:	01 d1                	add    ecx,edx
c000953d:	89 ca                	mov    edx,ecx
c000953f:	01 45 e8             	add    DWORD PTR [ebp-0x18],eax
c0009542:	11 55 ec             	adc    DWORD PTR [ebp-0x14],edx
c0009545:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0009548:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c000954b:	83 c4 24             	add    esp,0x24
c000954e:	5b                   	pop    ebx
c000954f:	5d                   	pop    ebp
c0009550:	c3                   	ret    
c0009551:	90                   	nop

c0009552 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c0009552:	55                   	push   ebp
c0009553:	89 e5                	mov    ebp,esp
c0009555:	56                   	push   esi
c0009556:	53                   	push   ebx
c0009557:	83 ec 20             	sub    esp,0x20
c000955a:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c000955d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0009560:	e8 bf fc ff ff       	call   c0009224 <KeDatetimeToSeconds(datetime_t)>
c0009565:	83 c4 08             	add    esp,0x8
c0009568:	89 c3                	mov    ebx,eax
c000956a:	89 d6                	mov    esi,edx
c000956c:	a0 60 c6 02 c0       	mov    al,ds:0xc002c660
c0009571:	0f b6 d0             	movzx  edx,al
c0009574:	a1 64 c6 02 c0       	mov    eax,ds:0xc002c664
c0009579:	01 d0                	add    eax,edx
c000957b:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0009581:	89 c2                	mov    edx,eax
c0009583:	c1 fa 1f             	sar    edx,0x1f
c0009586:	29 c3                	sub    ebx,eax
c0009588:	19 d6                	sbb    esi,edx
c000958a:	a0 61 c6 02 c0       	mov    al,ds:0xc002c661
c000958f:	0f b6 c0             	movzx  eax,al
c0009592:	85 c0                	test   eax,eax
c0009594:	74 0c                	je     c00095a2 <Clock::setTimeInDatetimeLocal(datetime_t)+0x50>
c0009596:	b8 08 07 00 00       	mov    eax,0x708
c000959b:	ba 00 00 00 00       	mov    edx,0x0
c00095a0:	eb 0a                	jmp    c00095ac <Clock::setTimeInDatetimeLocal(datetime_t)+0x5a>
c00095a2:	b8 00 00 00 00       	mov    eax,0x0
c00095a7:	ba 00 00 00 00       	mov    edx,0x0
c00095ac:	29 c3                	sub    ebx,eax
c00095ae:	19 d6                	sbb    esi,edx
c00095b0:	89 d8                	mov    eax,ebx
c00095b2:	89 f2                	mov    edx,esi
c00095b4:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00095b7:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00095ba:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00095bd:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00095c0:	89 d0                	mov    eax,edx
c00095c2:	31 d2                	xor    edx,edx
c00095c4:	89 c3                	mov    ebx,eax
c00095c6:	89 d6                	mov    esi,edx
c00095c8:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c00095cb:	80 e5 ff             	and    ch,0xff
c00095ce:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c00095d1:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
c00095d4:	83 e1 00             	and    ecx,0x0
c00095d7:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c00095da:	83 ec 0c             	sub    esp,0xc
c00095dd:	56                   	push   esi
c00095de:	53                   	push   ebx
c00095df:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c00095e2:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c00095e5:	68 6e 37 02 c0       	push   0xc002376e
c00095ea:	e8 77 d9 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00095ef:	83 c4 20             	add    esp,0x20
c00095f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00095f5:	8b 00                	mov    eax,DWORD PTR [eax]
c00095f7:	83 c0 2c             	add    eax,0x2c
c00095fa:	8b 00                	mov    eax,DWORD PTR [eax]
c00095fc:	83 ec 04             	sub    esp,0x4
c00095ff:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0009602:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0009605:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0009608:	ff d0                	call   eax
c000960a:	83 c4 10             	add    esp,0x10
c000960d:	8d 65 f8             	lea    esp,[ebp-0x8]
c0009610:	5b                   	pop    ebx
c0009611:	5e                   	pop    esi
c0009612:	5d                   	pop    ebp
c0009613:	c3                   	ret    

c0009614 <KeSecondsToDatetime(unsigned long long)>:
c0009614:	55                   	push   ebp
c0009615:	89 e5                	mov    ebp,esp
c0009617:	83 ec 48             	sub    esp,0x48
c000961a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000961d:	89 45 c0             	mov    DWORD PTR [ebp-0x40],eax
c0009620:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0009623:	89 45 c4             	mov    DWORD PTR [ebp-0x3c],eax
c0009626:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0009629:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c000962c:	6a 00                	push   0x0
c000962e:	68 80 51 01 00       	push   0x15180
c0009633:	52                   	push   edx
c0009634:	50                   	push   eax
c0009635:	e8 ca 85 01 00       	call   c0021c04 <__udivdi3>
c000963a:	83 c4 10             	add    esp,0x10
c000963d:	05 6c fa 0a 00       	add    eax,0xafa6c
c0009642:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0009645:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0009648:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c000964b:	6a 00                	push   0x0
c000964d:	68 80 51 01 00       	push   0x15180
c0009652:	52                   	push   edx
c0009653:	50                   	push   eax
c0009654:	e8 ab 86 01 00       	call   c0021d04 <__umoddi3>
c0009659:	83 c4 10             	add    esp,0x10
c000965c:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000965f:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
c0009663:	79 0b                	jns    c0009670 <KeSecondsToDatetime(unsigned long long)+0x5c>
c0009665:	81 45 f0 80 51 01 00 	add    DWORD PTR [ebp-0x10],0x15180
c000966c:	83 6d f4 01          	sub    DWORD PTR [ebp-0xc],0x1
c0009670:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0009673:	ba c5 b3 a2 91       	mov    edx,0x91a2b3c5
c0009678:	89 c8                	mov    eax,ecx
c000967a:	f7 ea                	imul   edx
c000967c:	8d 04 0a             	lea    eax,[edx+ecx*1]
c000967f:	c1 f8 0b             	sar    eax,0xb
c0009682:	89 c2                	mov    edx,eax
c0009684:	89 c8                	mov    eax,ecx
c0009686:	c1 f8 1f             	sar    eax,0x1f
c0009689:	29 c2                	sub    edx,eax
c000968b:	89 d0                	mov    eax,edx
c000968d:	88 c2                	mov    dl,al
c000968f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009692:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c0009695:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0009698:	ba c5 b3 a2 91       	mov    edx,0x91a2b3c5
c000969d:	89 c8                	mov    eax,ecx
c000969f:	f7 ea                	imul   edx
c00096a1:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00096a4:	c1 f8 0b             	sar    eax,0xb
c00096a7:	89 c2                	mov    edx,eax
c00096a9:	89 c8                	mov    eax,ecx
c00096ab:	c1 f8 1f             	sar    eax,0x1f
c00096ae:	29 c2                	sub    edx,eax
c00096b0:	89 d0                	mov    eax,edx
c00096b2:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c00096b8:	29 c1                	sub    ecx,eax
c00096ba:	89 c8                	mov    eax,ecx
c00096bc:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00096bf:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c00096c2:	ba 89 88 88 88       	mov    edx,0x88888889
c00096c7:	89 c8                	mov    eax,ecx
c00096c9:	f7 ea                	imul   edx
c00096cb:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00096ce:	c1 f8 05             	sar    eax,0x5
c00096d1:	89 c2                	mov    edx,eax
c00096d3:	89 c8                	mov    eax,ecx
c00096d5:	c1 f8 1f             	sar    eax,0x1f
c00096d8:	29 c2                	sub    edx,eax
c00096da:	89 d0                	mov    eax,edx
c00096dc:	88 c2                	mov    dl,al
c00096de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00096e1:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00096e4:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c00096e7:	ba 89 88 88 88       	mov    edx,0x88888889
c00096ec:	89 c8                	mov    eax,ecx
c00096ee:	f7 ea                	imul   edx
c00096f0:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00096f3:	c1 f8 05             	sar    eax,0x5
c00096f6:	89 c2                	mov    edx,eax
c00096f8:	89 c8                	mov    eax,ecx
c00096fa:	c1 f8 1f             	sar    eax,0x1f
c00096fd:	29 c2                	sub    edx,eax
c00096ff:	89 d0                	mov    eax,edx
c0009701:	c1 e0 04             	shl    eax,0x4
c0009704:	29 d0                	sub    eax,edx
c0009706:	c1 e0 02             	shl    eax,0x2
c0009709:	29 c1                	sub    ecx,eax
c000970b:	89 ca                	mov    edx,ecx
c000970d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009710:	88 50 06             	mov    BYTE PTR [eax+0x6],dl
c0009713:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0009717:	79 20                	jns    c0009739 <KeSecondsToDatetime(unsigned long long)+0x125>
c0009719:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000971c:	8d 88 50 c5 fd ff    	lea    ecx,[eax-0x23ab0]
c0009722:	ba bd 06 6b 39       	mov    edx,0x396b06bd
c0009727:	89 c8                	mov    eax,ecx
c0009729:	f7 ea                	imul   edx
c000972b:	c1 fa 0f             	sar    edx,0xf
c000972e:	89 c8                	mov    eax,ecx
c0009730:	c1 f8 1f             	sar    eax,0x1f
c0009733:	29 c2                	sub    edx,eax
c0009735:	89 d0                	mov    eax,edx
c0009737:	eb 18                	jmp    c0009751 <KeSecondsToDatetime(unsigned long long)+0x13d>
c0009739:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
c000973c:	ba bd 06 6b 39       	mov    edx,0x396b06bd
c0009741:	89 c8                	mov    eax,ecx
c0009743:	f7 ea                	imul   edx
c0009745:	c1 fa 0f             	sar    edx,0xf
c0009748:	89 c8                	mov    eax,ecx
c000974a:	c1 f8 1f             	sar    eax,0x1f
c000974d:	29 c2                	sub    edx,eax
c000974f:	89 d0                	mov    eax,edx
c0009751:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0009754:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0009757:	69 d0 4f c5 fd ff    	imul   edx,eax,0xfffdc54f
c000975d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0009760:	01 d0                	add    eax,edx
c0009762:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0009765:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0009768:	c1 e8 02             	shr    eax,0x2
c000976b:	ba d9 7c c6 59       	mov    edx,0x59c67cd9
c0009770:	f7 e2                	mul    edx
c0009772:	c1 ea 07             	shr    edx,0x7
c0009775:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0009778:	29 d0                	sub    eax,edx
c000977a:	89 c1                	mov    ecx,eax
c000977c:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c000977f:	c1 e8 02             	shr    eax,0x2
c0009782:	ba 7f 20 6b 39       	mov    edx,0x396b207f
c0009787:	f7 e2                	mul    edx
c0009789:	89 d0                	mov    eax,edx
c000978b:	c1 e8 0b             	shr    eax,0xb
c000978e:	01 c1                	add    ecx,eax
c0009790:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0009793:	c1 e8 04             	shr    eax,0x4
c0009796:	ba 41 d6 72 00       	mov    edx,0x72d641
c000979b:	f7 e2                	mul    edx
c000979d:	89 d0                	mov    eax,edx
c000979f:	c1 e8 04             	shr    eax,0x4
c00097a2:	29 c1                	sub    ecx,eax
c00097a4:	ba 61 f3 19 67       	mov    edx,0x6719f361
c00097a9:	89 c8                	mov    eax,ecx
c00097ab:	f7 e2                	mul    edx
c00097ad:	89 c8                	mov    eax,ecx
c00097af:	29 d0                	sub    eax,edx
c00097b1:	d1 e8                	shr    eax,1
c00097b3:	01 d0                	add    eax,edx
c00097b5:	c1 e8 08             	shr    eax,0x8
c00097b8:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c00097bb:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00097be:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
c00097c3:	f7 e2                	mul    edx
c00097c5:	89 d1                	mov    ecx,edx
c00097c7:	c1 e9 05             	shr    ecx,0x5
c00097ca:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00097cd:	89 d0                	mov    eax,edx
c00097cf:	c1 e0 03             	shl    eax,0x3
c00097d2:	01 d0                	add    eax,edx
c00097d4:	c1 e0 03             	shl    eax,0x3
c00097d7:	01 d0                	add    eax,edx
c00097d9:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00097e0:	01 c2                	add    edx,eax
c00097e2:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00097e5:	c1 e8 02             	shr    eax,0x2
c00097e8:	01 d0                	add    eax,edx
c00097ea:	29 c1                	sub    ecx,eax
c00097ec:	89 ca                	mov    edx,ecx
c00097ee:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00097f1:	01 d0                	add    eax,edx
c00097f3:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00097f6:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00097f9:	89 d0                	mov    eax,edx
c00097fb:	c1 e0 02             	shl    eax,0x2
c00097fe:	01 d0                	add    eax,edx
c0009800:	83 c0 02             	add    eax,0x2
c0009803:	ba d7 80 2b d6       	mov    edx,0xd62b80d7
c0009808:	f7 e2                	mul    edx
c000980a:	89 d0                	mov    eax,edx
c000980c:	c1 e8 07             	shr    eax,0x7
c000980f:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0009812:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0009815:	89 d0                	mov    eax,edx
c0009817:	c1 e0 03             	shl    eax,0x3
c000981a:	01 d0                	add    eax,edx
c000981c:	89 c2                	mov    edx,eax
c000981e:	c1 e2 04             	shl    edx,0x4
c0009821:	01 d0                	add    eax,edx
c0009823:	83 c0 02             	add    eax,0x2
c0009826:	ba cd cc cc cc       	mov    edx,0xcccccccd
c000982b:	f7 e2                	mul    edx
c000982d:	c1 ea 02             	shr    edx,0x2
c0009830:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009833:	29 d0                	sub    eax,edx
c0009835:	83 c0 01             	add    eax,0x1
c0009838:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c000983b:	83 7d dc 09          	cmp    DWORD PTR [ebp-0x24],0x9
c000983f:	77 07                	ja     c0009848 <KeSecondsToDatetime(unsigned long long)+0x234>
c0009841:	b8 02 00 00 00       	mov    eax,0x2
c0009846:	eb 05                	jmp    c000984d <KeSecondsToDatetime(unsigned long long)+0x239>
c0009848:	b8 f6 ff ff ff       	mov    eax,0xfffffff6
c000984d:	01 45 dc             	add    DWORD PTR [ebp-0x24],eax
c0009850:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0009853:	89 d0                	mov    eax,edx
c0009855:	c1 e0 02             	shl    eax,0x2
c0009858:	01 d0                	add    eax,edx
c000985a:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0009861:	01 d0                	add    eax,edx
c0009863:	c1 e0 04             	shl    eax,0x4
c0009866:	89 c2                	mov    edx,eax
c0009868:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c000986b:	01 c2                	add    edx,eax
c000986d:	83 7d dc 01          	cmp    DWORD PTR [ebp-0x24],0x1
c0009871:	0f 96 c0             	setbe  al
c0009874:	0f b6 c0             	movzx  eax,al
c0009877:	01 d0                	add    eax,edx
c0009879:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c000987c:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c000987f:	89 c2                	mov    edx,eax
c0009881:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009884:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0009888:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c000988b:	83 c0 01             	add    eax,0x1
c000988e:	88 c2                	mov    dl,al
c0009890:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009893:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0009896:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0009899:	88 c2                	mov    dl,al
c000989b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000989e:	88 10                	mov    BYTE PTR [eax],dl
c00098a0:	90                   	nop
c00098a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00098a4:	c9                   	leave  
c00098a5:	c2 04 00             	ret    0x4

c00098a8 <Clock::timeInDatetimeLocal()>:
c00098a8:	55                   	push   ebp
c00098a9:	89 e5                	mov    ebp,esp
c00098ab:	83 ec 08             	sub    esp,0x8
c00098ae:	83 ec 0c             	sub    esp,0xc
c00098b1:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00098b4:	e8 81 f8 ff ff       	call   c000913a <Clock::timeInSecondsLocal()>
c00098b9:	83 c4 10             	add    esp,0x10
c00098bc:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00098bf:	83 ec 04             	sub    esp,0x4
c00098c2:	52                   	push   edx
c00098c3:	50                   	push   eax
c00098c4:	51                   	push   ecx
c00098c5:	e8 4a fd ff ff       	call   c0009614 <KeSecondsToDatetime(unsigned long long)>
c00098ca:	83 c4 0c             	add    esp,0xc
c00098cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00098d0:	c9                   	leave  
c00098d1:	c2 04 00             	ret    0x4

c00098d4 <Device::hibernate()>:
c00098d4:	c3                   	ret    
c00098d5:	90                   	nop

c00098d6 <Device::wake()>:
c00098d6:	c3                   	ret    
c00098d7:	90                   	nop

c00098d8 <Device::detect()>:
c00098d8:	c3                   	ret    
c00098d9:	90                   	nop

c00098da <Device::disableLegacy()>:
c00098da:	c3                   	ret    
c00098db:	90                   	nop

c00098dc <Device::powerSaving(PowerSavingLevel)>:
c00098dc:	c3                   	ret    
c00098dd:	90                   	nop

c00098de <DriverlessDevice::close(int, int, void*)>:
c00098de:	31 c0                	xor    eax,eax
c00098e0:	c3                   	ret    
c00098e1:	90                   	nop

c00098e2 <DriverlessDevice::detect()>:
c00098e2:	c3                   	ret    
c00098e3:	90                   	nop

c00098e4 <DriverlessDevice::open(int, int, void*)>:
c00098e4:	83 ec 18             	sub    esp,0x18
c00098e7:	68 ec 37 02 c0       	push   0xc00237ec
c00098ec:	e8 99 65 00 00       	call   c000fe8a <KePanic(char const*)>
c00098f1:	83 c8 ff             	or     eax,0xffffffff
c00098f4:	83 c4 1c             	add    esp,0x1c
c00098f7:	c3                   	ret    

c00098f8 <Device::~Device()>:
c00098f8:	ba 90 38 02 c0       	mov    edx,0xc0023890
c00098fd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009901:	89 10                	mov    DWORD PTR [eax],edx
c0009903:	90                   	nop
c0009904:	c3                   	ret    
c0009905:	90                   	nop

c0009906 <Device::~Device()>:
c0009906:	83 ec 0c             	sub    esp,0xc
c0009909:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000990d:	e8 e6 ff ff ff       	call   c00098f8 <Device::~Device()>
c0009912:	83 c4 04             	add    esp,0x4
c0009915:	83 ec 08             	sub    esp,0x8
c0009918:	68 58 01 00 00       	push   0x158
c000991d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009921:	e8 cf 39 00 00       	call   c000d2f5 <operator delete(void*, unsigned long)>
c0009926:	83 c4 10             	add    esp,0x10
c0009929:	83 c4 0c             	add    esp,0xc
c000992c:	c3                   	ret    
c000992d:	90                   	nop

c000992e <Device::findAndLoadDriver()>:
c000992e:	c7 44 24 04 0a 38 02 c0 	mov    DWORD PTR [esp+0x4],0xc002380a
c0009936:	e9 2b d6 ff ff       	jmp    c0006f66 <Dbg::kprintf(char const*, ...)>
c000993b:	90                   	nop

c000993c <Device::preOpenPCI(PCIDeviceInfo)>:
c000993c:	57                   	push   edi
c000993d:	b9 09 00 00 00       	mov    ecx,0x9
c0009942:	56                   	push   esi
c0009943:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0009947:	8d 74 24 10          	lea    esi,[esp+0x10]
c000994b:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c0009955:	81 c7 18 01 00 00    	add    edi,0x118
c000995b:	fc                   	cld    
c000995c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000995e:	5e                   	pop    esi
c000995f:	5f                   	pop    edi
c0009960:	c3                   	ret    
c0009961:	90                   	nop

c0009962 <Device::preOpenACPI(void*, char*, char*)>:
c0009962:	57                   	push   edi
c0009963:	b9 1e 00 00 00       	mov    ecx,0x1e
c0009968:	56                   	push   esi
c0009969:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000996d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0009971:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0009975:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000997f:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c0009985:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000998b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000998d:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c0009993:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0009997:	b9 0e 00 00 00       	mov    ecx,0xe
c000999c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000999e:	5e                   	pop    esi
c000999f:	5f                   	pop    edi
c00099a0:	c3                   	ret    
c00099a1:	90                   	nop

c00099a2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00099a2:	53                   	push   ebx
c00099a3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00099a7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00099ab:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00099af:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00099b3:	0f b6 c0             	movzx  eax,al
c00099b6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00099ba:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00099be:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00099c2:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00099c6:	5b                   	pop    ebx
c00099c7:	e9 39 13 01 00       	jmp    c001ad05 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c00099cc <Device::getParent()>:
c00099cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00099d0:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c00099d6:	c3                   	ret    
c00099d7:	90                   	nop

c00099d8 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c00099d8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00099dc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00099e0:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c00099e5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00099e9:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00099ed:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00099f1:	e9 80 14 01 00       	jmp    c001ae76 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c00099f6 <Device::addChild(Device*)>:
c00099f6:	53                   	push   ebx
c00099f7:	83 ec 08             	sub    esp,0x8
c00099fa:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00099fe:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009a02:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0009a08:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0009a0e:	8b 13                	mov    edx,DWORD PTR [ebx]
c0009a10:	85 d2                	test   edx,edx
c0009a12:	74 04                	je     c0009a18 <Device::addChild(Device*)+0x22>
c0009a14:	89 d3                	mov    ebx,edx
c0009a16:	eb f6                	jmp    c0009a0e <Device::addChild(Device*)+0x18>
c0009a18:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009a1b:	83 ec 0c             	sub    esp,0xc
c0009a1e:	6a 08                	push   0x8
c0009a20:	e8 57 61 00 00       	call   c000fb7c <malloc>
c0009a25:	89 03                	mov    DWORD PTR [ebx],eax
c0009a27:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0009a2d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009a34:	83 c4 18             	add    esp,0x18
c0009a37:	5b                   	pop    ebx
c0009a38:	c3                   	ret    
c0009a39:	90                   	nop

c0009a3a <Device::removeAllChildren()>:
c0009a3a:	56                   	push   esi
c0009a3b:	53                   	push   ebx
c0009a3c:	52                   	push   edx
c0009a3d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0009a41:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c0009a47:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009a4a:	74 17                	je     c0009a63 <Device::removeAllChildren()+0x29>
c0009a4c:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009a4f:	85 c0                	test   eax,eax
c0009a51:	74 0c                	je     c0009a5f <Device::removeAllChildren()+0x25>
c0009a53:	8b 10                	mov    edx,DWORD PTR [eax]
c0009a55:	83 ec 0c             	sub    esp,0xc
c0009a58:	50                   	push   eax
c0009a59:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0009a5c:	83 c4 10             	add    esp,0x10
c0009a5f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009a61:	eb e4                	jmp    c0009a47 <Device::removeAllChildren()+0xd>
c0009a63:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0009a69:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0009a6f:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0009a75:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009a7c:	58                   	pop    eax
c0009a7d:	5b                   	pop    ebx
c0009a7e:	5e                   	pop    esi
c0009a7f:	c3                   	ret    

c0009a80 <Device::hibernateAll()>:
c0009a80:	53                   	push   ebx
c0009a81:	83 ec 14             	sub    esp,0x14
c0009a84:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009a88:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009a8a:	53                   	push   ebx
c0009a8b:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0009a8e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009a94:	83 c4 10             	add    esp,0x10
c0009a97:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009a9a:	74 0f                	je     c0009aab <Device::hibernateAll()+0x2b>
c0009a9c:	83 ec 0c             	sub    esp,0xc
c0009a9f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009aa2:	e8 d9 ff ff ff       	call   c0009a80 <Device::hibernateAll()>
c0009aa7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009aa9:	eb e9                	jmp    c0009a94 <Device::hibernateAll()+0x14>
c0009aab:	83 c4 08             	add    esp,0x8
c0009aae:	5b                   	pop    ebx
c0009aaf:	c3                   	ret    

c0009ab0 <Device::wakeAll()>:
c0009ab0:	53                   	push   ebx
c0009ab1:	83 ec 14             	sub    esp,0x14
c0009ab4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009ab8:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009aba:	53                   	push   ebx
c0009abb:	ff 50 14             	call   DWORD PTR [eax+0x14]
c0009abe:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009ac4:	83 c4 10             	add    esp,0x10
c0009ac7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009aca:	74 0f                	je     c0009adb <Device::wakeAll()+0x2b>
c0009acc:	83 ec 0c             	sub    esp,0xc
c0009acf:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009ad2:	e8 d9 ff ff ff       	call   c0009ab0 <Device::wakeAll()>
c0009ad7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009ad9:	eb e9                	jmp    c0009ac4 <Device::wakeAll()+0x14>
c0009adb:	83 c4 08             	add    esp,0x8
c0009ade:	5b                   	pop    ebx
c0009adf:	c3                   	ret    

c0009ae0 <Device::detectAll()>:
c0009ae0:	53                   	push   ebx
c0009ae1:	83 ec 14             	sub    esp,0x14
c0009ae4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009ae8:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009aea:	53                   	push   ebx
c0009aeb:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0009aee:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009af4:	83 c4 10             	add    esp,0x10
c0009af7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009afa:	74 0f                	je     c0009b0b <Device::detectAll()+0x2b>
c0009afc:	83 ec 0c             	sub    esp,0xc
c0009aff:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009b02:	e8 d9 ff ff ff       	call   c0009ae0 <Device::detectAll()>
c0009b07:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009b09:	eb e9                	jmp    c0009af4 <Device::detectAll()+0x14>
c0009b0b:	83 c4 08             	add    esp,0x8
c0009b0e:	5b                   	pop    ebx
c0009b0f:	c3                   	ret    

c0009b10 <Device::disableLegacyAll()>:
c0009b10:	c3                   	ret    
c0009b11:	90                   	nop

c0009b12 <Device::loadDriversForAll()>:
c0009b12:	c3                   	ret    
c0009b13:	90                   	nop

c0009b14 <Device::powerSavingAll(PowerSavingLevel)>:
c0009b14:	56                   	push   esi
c0009b15:	53                   	push   ebx
c0009b16:	83 ec 0c             	sub    esp,0xc
c0009b19:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0009b1d:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0009b21:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009b23:	56                   	push   esi
c0009b24:	53                   	push   ebx
c0009b25:	ff 50 20             	call   DWORD PTR [eax+0x20]
c0009b28:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009b2e:	83 c4 10             	add    esp,0x10
c0009b31:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009b34:	74 0f                	je     c0009b45 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c0009b36:	52                   	push   edx
c0009b37:	52                   	push   edx
c0009b38:	56                   	push   esi
c0009b39:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009b3c:	e8 d3 ff ff ff       	call   c0009b14 <Device::powerSavingAll(PowerSavingLevel)>
c0009b41:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009b43:	eb e9                	jmp    c0009b2e <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c0009b45:	58                   	pop    eax
c0009b46:	5b                   	pop    ebx
c0009b47:	5e                   	pop    esi
c0009b48:	c3                   	ret    
c0009b49:	90                   	nop

c0009b4a <Device::setName(char const*)>:
c0009b4a:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c0009b52:	e9 f9 6a ff ff       	jmp    c0000650 <strcpy>
c0009b57:	90                   	nop

c0009b58 <Device::Device(char const*)>:
c0009b58:	83 ec 1c             	sub    esp,0x1c
c0009b5b:	ba 90 38 02 c0       	mov    edx,0xc0023890
c0009b60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009b64:	89 10                	mov    DWORD PTR [eax],edx
c0009b66:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009b6a:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c0009b74:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009b78:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0009b82:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009b86:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0009b90:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009b94:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0009b9e:	83 ec 08             	sub    esp,0x8
c0009ba1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ba5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ba9:	e8 9c ff ff ff       	call   c0009b4a <Device::setName(char const*)>
c0009bae:	83 c4 10             	add    esp,0x10
c0009bb1:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c0009bb9:	83 ec 0c             	sub    esp,0xc
c0009bbc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009bc0:	e8 b7 5f 00 00       	call   c000fb7c <malloc>
c0009bc5:	83 c4 10             	add    esp,0x10
c0009bc8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0009bce:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009bd5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009bd9:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c0009bdf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009be3:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0009be9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0009bef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009bf3:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0009bf9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009c00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c04:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0009c0b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c0f:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c0009c16:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c1a:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0009c24:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c28:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0009c32:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c36:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0009c40:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c44:	c7 80 10 01 00 00 14 00 00 00 	mov    DWORD PTR [eax+0x110],0x14
c0009c4e:	90                   	nop
c0009c4f:	83 c4 1c             	add    esp,0x1c
c0009c52:	c3                   	ret    
c0009c53:	90                   	nop

c0009c54 <Device::getName()>:
c0009c54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c58:	05 d0 00 00 00       	add    eax,0xd0
c0009c5d:	c3                   	ret    

c0009c5e <Device::closeAll()>:
c0009c5e:	53                   	push   ebx
c0009c5f:	83 ec 08             	sub    esp,0x8
c0009c62:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009c66:	53                   	push   ebx
c0009c67:	e8 e8 ff ff ff       	call   c0009c54 <Device::getName()>
c0009c6c:	52                   	push   edx
c0009c6d:	50                   	push   eax
c0009c6e:	68 44 38 02 c0       	push   0xc0023844
c0009c73:	e8 ee d2 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0009c78:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009c7a:	6a 00                	push   0x0
c0009c7c:	6a 00                	push   0x0
c0009c7e:	6a 00                	push   0x0
c0009c80:	53                   	push   ebx
c0009c81:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0009c84:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009c8a:	83 c4 20             	add    esp,0x20
c0009c8d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009c90:	74 12                	je     c0009ca4 <Device::closeAll()+0x46>
c0009c92:	83 ec 0c             	sub    esp,0xc
c0009c95:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009c98:	e8 c1 ff ff ff       	call   c0009c5e <Device::closeAll()>
c0009c9d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009c9f:	83 c4 10             	add    esp,0x10
c0009ca2:	eb e9                	jmp    c0009c8d <Device::closeAll()+0x2f>
c0009ca4:	83 c4 08             	add    esp,0x8
c0009ca7:	5b                   	pop    ebx
c0009ca8:	c3                   	ret    
c0009ca9:	90                   	nop

c0009caa <DriverlessDevice::DriverlessDevice(char const*)>:
c0009caa:	83 ec 0c             	sub    esp,0xc
c0009cad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009cb1:	83 ec 08             	sub    esp,0x8
c0009cb4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cb8:	50                   	push   eax
c0009cb9:	e8 9a fe ff ff       	call   c0009b58 <Device::Device(char const*)>
c0009cbe:	83 c4 10             	add    esp,0x10
c0009cc1:	ba bc 38 02 c0       	mov    edx,0xc00238bc
c0009cc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009cca:	89 10                	mov    DWORD PTR [eax],edx
c0009ccc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009cd0:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c0009cda:	90                   	nop
c0009cdb:	83 c4 0c             	add    esp,0xc
c0009cde:	c3                   	ret    
c0009cdf:	90                   	nop

c0009ce0 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c0009ce0:	57                   	push   edi
c0009ce1:	56                   	push   esi
c0009ce2:	53                   	push   ebx
c0009ce3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009ce7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0009ceb:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0009cef:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c0009cf5:	75 0c                	jne    c0009d03 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c0009cf7:	52                   	push   edx
c0009cf8:	52                   	push   edx
c0009cf9:	53                   	push   ebx
c0009cfa:	56                   	push   esi
c0009cfb:	e8 7c 81 01 00       	call   c0021e7c <LinkedList<Device>::addElement(Device*)>
c0009d00:	83 c4 10             	add    esp,0x10
c0009d03:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009d09:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009d0c:	74 12                	je     c0009d20 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c0009d0e:	50                   	push   eax
c0009d0f:	57                   	push   edi
c0009d10:	56                   	push   esi
c0009d11:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009d14:	e8 c7 ff ff ff       	call   c0009ce0 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0009d19:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009d1b:	83 c4 10             	add    esp,0x10
c0009d1e:	eb e9                	jmp    c0009d09 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c0009d20:	5b                   	pop    ebx
c0009d21:	5e                   	pop    esi
c0009d22:	5f                   	pop    edi
c0009d23:	c3                   	ret    

c0009d24 <getDevicesOfType(DeviceType)>:
c0009d24:	53                   	push   ebx
c0009d25:	83 ec 14             	sub    esp,0x14
c0009d28:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009d2c:	53                   	push   ebx
c0009d2d:	e8 26 82 01 00       	call   c0021f58 <LinkedList<Device>::LinkedList()>
c0009d32:	83 c4 0c             	add    esp,0xc
c0009d35:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009d39:	53                   	push   ebx
c0009d3a:	ff 35 d4 d0 02 c0    	push   DWORD PTR ds:0xc002d0d4
c0009d40:	e8 9b ff ff ff       	call   c0009ce0 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0009d45:	83 c4 18             	add    esp,0x18
c0009d48:	89 d8                	mov    eax,ebx
c0009d4a:	5b                   	pop    ebx
c0009d4b:	c2 04 00             	ret    0x4
c0009d4e:	66 90                	xchg   ax,ax

c0009d50 <HardDiskController::HardDiskController(char const*)>:
c0009d50:	83 ec 0c             	sub    esp,0xc
c0009d53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d57:	83 ec 08             	sub    esp,0x8
c0009d5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009d5e:	50                   	push   eax
c0009d5f:	e8 f4 fd ff ff       	call   c0009b58 <Device::Device(char const*)>
c0009d64:	83 c4 10             	add    esp,0x10
c0009d67:	ba e8 38 02 c0       	mov    edx,0xc00238e8
c0009d6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d70:	89 10                	mov    DWORD PTR [eax],edx
c0009d72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d76:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c0009d80:	90                   	nop
c0009d81:	83 c4 0c             	add    esp,0xc
c0009d84:	c3                   	ret    
c0009d85:	90                   	nop
c0009d86:	66 90                	xchg   ax,ax

c0009d88 <HardDiskController::~HardDiskController()>:
c0009d88:	83 ec 0c             	sub    esp,0xc
c0009d8b:	ba e8 38 02 c0       	mov    edx,0xc00238e8
c0009d90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d94:	89 10                	mov    DWORD PTR [eax],edx
c0009d96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d9a:	83 ec 0c             	sub    esp,0xc
c0009d9d:	50                   	push   eax
c0009d9e:	e8 55 fb ff ff       	call   c00098f8 <Device::~Device()>
c0009da3:	83 c4 10             	add    esp,0x10
c0009da6:	90                   	nop
c0009da7:	83 c4 0c             	add    esp,0xc
c0009daa:	c3                   	ret    
c0009dab:	90                   	nop

c0009dac <HardDiskController::~HardDiskController()>:
c0009dac:	83 ec 0c             	sub    esp,0xc
c0009daf:	83 ec 0c             	sub    esp,0xc
c0009db2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009db6:	e8 cd ff ff ff       	call   c0009d88 <HardDiskController::~HardDiskController()>
c0009dbb:	83 c4 10             	add    esp,0x10
c0009dbe:	83 ec 08             	sub    esp,0x8
c0009dc1:	68 58 01 00 00       	push   0x158
c0009dc6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009dca:	e8 26 35 00 00       	call   c000d2f5 <operator delete(void*, unsigned long)>
c0009dcf:	83 c4 10             	add    esp,0x10
c0009dd2:	83 c4 0c             	add    esp,0xc
c0009dd5:	c3                   	ret    

c0009dd6 <PhysicalDisk::eject()>:
c0009dd6:	83 c8 ff             	or     eax,0xffffffff
c0009dd9:	c3                   	ret    

c0009dda <PhysicalDisk::PhysicalDisk(char const*, int)>:
c0009dda:	83 ec 0c             	sub    esp,0xc
c0009ddd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009de1:	83 ec 08             	sub    esp,0x8
c0009de4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009de8:	50                   	push   eax
c0009de9:	e8 6a fd ff ff       	call   c0009b58 <Device::Device(char const*)>
c0009dee:	83 c4 10             	add    esp,0x10
c0009df1:	ba 14 39 02 c0       	mov    edx,0xc0023914
c0009df6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009dfa:	89 10                	mov    DWORD PTR [eax],edx
c0009dfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009e00:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0009e07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009e0b:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c0009e12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009e16:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c0009e20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009e24:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009e28:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0009e2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009e32:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0009e3c:	90                   	nop
c0009e3d:	83 c4 0c             	add    esp,0xc
c0009e40:	c3                   	ret    
c0009e41:	90                   	nop

c0009e42 <PhysicalDisk::startCache()>:
c0009e42:	56                   	push   esi
c0009e43:	53                   	push   ebx
c0009e44:	83 ec 10             	sub    esp,0x10
c0009e47:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009e4b:	6a 44                	push   0x44
c0009e4d:	e8 2a 5d 00 00       	call   c000fb7c <malloc>
c0009e52:	89 c6                	mov    esi,eax
c0009e54:	58                   	pop    eax
c0009e55:	5a                   	pop    edx
c0009e56:	53                   	push   ebx
c0009e57:	56                   	push   esi
c0009e58:	e8 d3 13 00 00       	call   c000b230 <VCache::VCache(PhysicalDisk*)>
c0009e5d:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c0009e63:	83 c4 14             	add    esp,0x14
c0009e66:	5b                   	pop    ebx
c0009e67:	5e                   	pop    esi
c0009e68:	c3                   	ret    
c0009e69:	90                   	nop

c0009e6a <PhysicalDisk::~PhysicalDisk()>:
c0009e6a:	83 ec 0c             	sub    esp,0xc
c0009e6d:	ba 14 39 02 c0       	mov    edx,0xc0023914
c0009e72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009e76:	89 10                	mov    DWORD PTR [eax],edx
c0009e78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009e7c:	83 ec 0c             	sub    esp,0xc
c0009e7f:	50                   	push   eax
c0009e80:	e8 73 fa ff ff       	call   c00098f8 <Device::~Device()>
c0009e85:	83 c4 10             	add    esp,0x10
c0009e88:	90                   	nop
c0009e89:	83 c4 0c             	add    esp,0xc
c0009e8c:	c3                   	ret    
c0009e8d:	90                   	nop

c0009e8e <PhysicalDisk::~PhysicalDisk()>:
c0009e8e:	83 ec 0c             	sub    esp,0xc
c0009e91:	83 ec 0c             	sub    esp,0xc
c0009e94:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e98:	e8 cd ff ff ff       	call   c0009e6a <PhysicalDisk::~PhysicalDisk()>
c0009e9d:	83 c4 10             	add    esp,0x10
c0009ea0:	83 ec 08             	sub    esp,0x8
c0009ea3:	68 6c 01 00 00       	push   0x16c
c0009ea8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009eac:	e8 44 34 00 00       	call   c000d2f5 <operator delete(void*, unsigned long)>
c0009eb1:	83 c4 10             	add    esp,0x10
c0009eb4:	83 c4 0c             	add    esp,0xc
c0009eb7:	c3                   	ret    

c0009eb8 <startGUI(void*)>:
c0009eb8:	55                   	push   ebp
c0009eb9:	89 e5                	mov    ebp,esp
c0009ebb:	53                   	push   ebx
c0009ebc:	83 ec 04             	sub    esp,0x4
c0009ebf:	f0 83 2d 50 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa50,0x1
c0009ec7:	a1 50 fa 02 c0       	mov    eax,ds:0xc002fa50
c0009ecc:	85 c0                	test   eax,eax
c0009ece:	75 01                	jne    c0009ed1 <startGUI(void*)+0x19>
c0009ed0:	fb                   	sti    
c0009ed1:	8b 1d d4 d0 02 c0    	mov    ebx,DWORD PTR ds:0xc002d0d4
c0009ed7:	83 ec 08             	sub    esp,0x8
c0009eda:	6a 01                	push   0x1
c0009edc:	68 44 39 02 c0       	push   0xc0023944
c0009ee1:	e8 48 c6 00 00       	call   c001652e <Thr::loadDLL(char const*, bool)>
c0009ee6:	83 c4 10             	add    esp,0x10
c0009ee9:	83 ec 08             	sub    esp,0x8
c0009eec:	53                   	push   ebx
c0009eed:	50                   	push   eax
c0009eee:	e8 9c c8 00 00       	call   c001678f <Thr::executeDLL(unsigned long, void*)>
c0009ef3:	83 c4 10             	add    esp,0x10
c0009ef6:	8b 1d d4 d0 02 c0    	mov    ebx,DWORD PTR ds:0xc002d0d4
c0009efc:	83 ec 08             	sub    esp,0x8
c0009eff:	6a 01                	push   0x1
c0009f01:	68 5e 39 02 c0       	push   0xc002395e
c0009f06:	e8 23 c6 00 00       	call   c001652e <Thr::loadDLL(char const*, bool)>
c0009f0b:	83 c4 10             	add    esp,0x10
c0009f0e:	83 ec 08             	sub    esp,0x8
c0009f11:	53                   	push   ebx
c0009f12:	50                   	push   eax
c0009f13:	e8 77 c8 00 00       	call   c001678f <Thr::executeDLL(unsigned long, void*)>
c0009f18:	83 c4 10             	add    esp,0x10
c0009f1b:	eb fe                	jmp    c0009f1b <startGUI(void*)+0x63>

c0009f1d <startGUIVESA(void*)>:
c0009f1d:	55                   	push   ebp
c0009f1e:	89 e5                	mov    ebp,esp
c0009f20:	53                   	push   ebx
c0009f21:	83 ec 04             	sub    esp,0x4
c0009f24:	f0 83 2d 50 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa50,0x1
c0009f2c:	a1 50 fa 02 c0       	mov    eax,ds:0xc002fa50
c0009f31:	85 c0                	test   eax,eax
c0009f33:	75 01                	jne    c0009f36 <startGUIVESA(void*)+0x19>
c0009f35:	fb                   	sti    
c0009f36:	8b 1d d4 d0 02 c0    	mov    ebx,DWORD PTR ds:0xc002d0d4
c0009f3c:	83 ec 08             	sub    esp,0x8
c0009f3f:	6a 01                	push   0x1
c0009f41:	68 7c 39 02 c0       	push   0xc002397c
c0009f46:	e8 e3 c5 00 00       	call   c001652e <Thr::loadDLL(char const*, bool)>
c0009f4b:	83 c4 10             	add    esp,0x10
c0009f4e:	83 ec 08             	sub    esp,0x8
c0009f51:	53                   	push   ebx
c0009f52:	50                   	push   eax
c0009f53:	e8 37 c8 00 00       	call   c001678f <Thr::executeDLL(unsigned long, void*)>
c0009f58:	83 c4 10             	add    esp,0x10
c0009f5b:	8b 1d d4 d0 02 c0    	mov    ebx,DWORD PTR ds:0xc002d0d4
c0009f61:	83 ec 08             	sub    esp,0x8
c0009f64:	6a 01                	push   0x1
c0009f66:	68 5e 39 02 c0       	push   0xc002395e
c0009f6b:	e8 be c5 00 00       	call   c001652e <Thr::loadDLL(char const*, bool)>
c0009f70:	83 c4 10             	add    esp,0x10
c0009f73:	83 ec 08             	sub    esp,0x8
c0009f76:	53                   	push   ebx
c0009f77:	50                   	push   eax
c0009f78:	e8 12 c8 00 00       	call   c001678f <Thr::executeDLL(unsigned long, void*)>
c0009f7d:	83 c4 10             	add    esp,0x10
c0009f80:	eb fe                	jmp    c0009f80 <startGUIVESA(void*)+0x63>

c0009f82 <sendKeyToTerminal(unsigned char)>:
c0009f82:	55                   	push   ebp
c0009f83:	89 e5                	mov    ebp,esp
c0009f85:	83 ec 28             	sub    esp,0x28
c0009f88:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009f8b:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0009f8e:	a1 d4 f1 02 c0       	mov    eax,ds:0xc002f1d4
c0009f93:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c0009f97:	83 ec 08             	sub    esp,0x8
c0009f9a:	52                   	push   edx
c0009f9b:	50                   	push   eax
c0009f9c:	e8 d1 8a 00 00       	call   c0012a72 <VgaText::receiveKey(unsigned char)>
c0009fa1:	83 c4 10             	add    esp,0x10
c0009fa4:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0009fa8:	83 f8 0a             	cmp    eax,0xa
c0009fab:	74 16                	je     c0009fc3 <sendKeyToTerminal(unsigned char)+0x41>
c0009fad:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0009fb1:	83 f8 03             	cmp    eax,0x3
c0009fb4:	74 0d                	je     c0009fc3 <sendKeyToTerminal(unsigned char)+0x41>
c0009fb6:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0009fba:	83 f8 1c             	cmp    eax,0x1c
c0009fbd:	0f 85 92 00 00 00    	jne    c000a055 <sendKeyToTerminal(unsigned char)+0xd3>
c0009fc3:	fa                   	cli    
c0009fc4:	a1 50 fa 02 c0       	mov    eax,ds:0xc002fa50
c0009fc9:	83 c0 01             	add    eax,0x1
c0009fcc:	a3 50 fa 02 c0       	mov    ds:0xc002fa50,eax
c0009fd1:	a1 4c fa 02 c0       	mov    eax,ds:0xc002fa4c
c0009fd6:	83 c0 01             	add    eax,0x1
c0009fd9:	a3 4c fa 02 c0       	mov    ds:0xc002fa4c,eax
c0009fde:	a1 80 c6 02 c0       	mov    eax,ds:0xc002c680
c0009fe3:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0009fe6:	c7 05 80 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c680,0x0
c0009ff0:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0009ff4:	74 1f                	je     c000a015 <sendKeyToTerminal(unsigned char)+0x93>
c0009ff6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0009ff9:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0009ffc:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0009fff:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000a002:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000a005:	83 ec 0c             	sub    esp,0xc
c000a008:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000a00b:	e8 14 d4 00 00       	call   c0017424 <unblockTask(ThreadControlBlock*)>
c000a010:	83 c4 10             	add    esp,0x10
c000a013:	eb db                	jmp    c0009ff0 <sendKeyToTerminal(unsigned char)+0x6e>
c000a015:	a1 4c fa 02 c0       	mov    eax,ds:0xc002fa4c
c000a01a:	83 e8 01             	sub    eax,0x1
c000a01d:	a3 4c fa 02 c0       	mov    ds:0xc002fa4c,eax
c000a022:	a1 4c fa 02 c0       	mov    eax,ds:0xc002fa4c
c000a027:	85 c0                	test   eax,eax
c000a029:	75 18                	jne    c000a043 <sendKeyToTerminal(unsigned char)+0xc1>
c000a02b:	a1 48 fa 02 c0       	mov    eax,ds:0xc002fa48
c000a030:	85 c0                	test   eax,eax
c000a032:	74 0f                	je     c000a043 <sendKeyToTerminal(unsigned char)+0xc1>
c000a034:	c7 05 48 fa 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fa48,0x0
c000a03e:	e8 89 d0 00 00       	call   c00170cc <schedule()>
c000a043:	f0 83 2d 50 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa50,0x1
c000a04b:	a1 50 fa 02 c0       	mov    eax,ds:0xc002fa50
c000a050:	85 c0                	test   eax,eax
c000a052:	75 01                	jne    c000a055 <sendKeyToTerminal(unsigned char)+0xd3>
c000a054:	fb                   	sti    
c000a055:	90                   	nop
c000a056:	c9                   	leave  
c000a057:	c3                   	ret    

c000a058 <sendKeyboardToken(KeyboardToken)>:
c000a058:	55                   	push   ebp
c000a059:	89 e5                	mov    ebp,esp
c000a05b:	83 ec 18             	sub    esp,0x18
c000a05e:	e8 52 67 00 00       	call   c00107b5 <KeUserIOReceived()>
c000a063:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000a066:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a069:	0f b7 c0             	movzx  eax,ax
c000a06c:	83 f2 01             	xor    edx,0x1
c000a06f:	88 90 a0 c6 02 c0    	mov    BYTE PTR [eax-0x3ffd3960],dl
c000a075:	a1 88 c6 02 c0       	mov    eax,ds:0xc002c688
c000a07a:	85 c0                	test   eax,eax
c000a07c:	74 24                	je     c000a0a2 <sendKeyboardToken(KeyboardToken)+0x4a>
c000a07e:	8b 15 88 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c688
c000a084:	83 ec 04             	sub    esp,0x4
c000a087:	68 a0 c6 02 c0       	push   0xc002c6a0
c000a08c:	83 ec 08             	sub    esp,0x8
c000a08f:	89 e0                	mov    eax,esp
c000a091:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c000a094:	89 08                	mov    DWORD PTR [eax],ecx
c000a096:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000a099:	66 89 48 04          	mov    WORD PTR [eax+0x4],cx
c000a09d:	ff d2                	call   edx
c000a09f:	83 c4 10             	add    esp,0x10
c000a0a2:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000a0a6:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000a0a9:	0f b6 c0             	movzx  eax,al
c000a0ac:	85 c0                	test   eax,eax
c000a0ae:	0f 84 da 00 00 00    	je     c000a18e <sendKeyboardToken(KeyboardToken)+0x136>
c000a0b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a0b7:	0f b7 c0             	movzx  eax,ax
c000a0ba:	3d 18 03 00 00       	cmp    eax,0x318
c000a0bf:	75 06                	jne    c000a0c7 <sendKeyboardToken(KeyboardToken)+0x6f>
c000a0c1:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000a0c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a0ca:	0f b7 c0             	movzx  eax,ax
c000a0cd:	3d 19 03 00 00       	cmp    eax,0x319
c000a0d2:	75 06                	jne    c000a0da <sendKeyboardToken(KeyboardToken)+0x82>
c000a0d4:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000a0da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a0dd:	0f b7 c0             	movzx  eax,ax
c000a0e0:	3d 1a 03 00 00       	cmp    eax,0x31a
c000a0e5:	75 06                	jne    c000a0ed <sendKeyboardToken(KeyboardToken)+0x95>
c000a0e7:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000a0ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a0f0:	0f b7 c0             	movzx  eax,ax
c000a0f3:	3d 1b 03 00 00       	cmp    eax,0x31b
c000a0f8:	75 06                	jne    c000a100 <sendKeyboardToken(KeyboardToken)+0xa8>
c000a0fa:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000a100:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a103:	0f b7 c0             	movzx  eax,ax
c000a106:	3d 1c 03 00 00       	cmp    eax,0x31c
c000a10b:	75 06                	jne    c000a113 <sendKeyboardToken(KeyboardToken)+0xbb>
c000a10d:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000a113:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a116:	0f b7 c0             	movzx  eax,ax
c000a119:	3d 1d 03 00 00       	cmp    eax,0x31d
c000a11e:	75 06                	jne    c000a126 <sendKeyboardToken(KeyboardToken)+0xce>
c000a120:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000a126:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a129:	0f b7 c0             	movzx  eax,ax
c000a12c:	3d 1e 03 00 00       	cmp    eax,0x31e
c000a131:	75 06                	jne    c000a139 <sendKeyboardToken(KeyboardToken)+0xe1>
c000a133:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000a139:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a13c:	0f b7 c0             	movzx  eax,ax
c000a13f:	3d 1f 03 00 00       	cmp    eax,0x31f
c000a144:	75 06                	jne    c000a14c <sendKeyboardToken(KeyboardToken)+0xf4>
c000a146:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000a14c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a14f:	0f b7 c0             	movzx  eax,ax
c000a152:	3d 20 03 00 00       	cmp    eax,0x320
c000a157:	75 06                	jne    c000a15f <sendKeyboardToken(KeyboardToken)+0x107>
c000a159:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000a15f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a162:	0f b7 c0             	movzx  eax,ax
c000a165:	3d 21 03 00 00       	cmp    eax,0x321
c000a16a:	75 06                	jne    c000a172 <sendKeyboardToken(KeyboardToken)+0x11a>
c000a16c:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000a172:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a175:	0f b7 c0             	movzx  eax,ax
c000a178:	3d 22 03 00 00       	cmp    eax,0x322
c000a17d:	0f 85 f1 00 00 00    	jne    c000a274 <sendKeyboardToken(KeyboardToken)+0x21c>
c000a183:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000a189:	e9 e6 00 00 00       	jmp    c000a274 <sendKeyboardToken(KeyboardToken)+0x21c>
c000a18e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a191:	0f b7 c0             	movzx  eax,ax
c000a194:	3d 18 03 00 00       	cmp    eax,0x318
c000a199:	75 0a                	jne    c000a1a5 <sendKeyboardToken(KeyboardToken)+0x14d>
c000a19b:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000a1a1:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a1a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a1a8:	0f b7 c0             	movzx  eax,ax
c000a1ab:	3d 19 03 00 00       	cmp    eax,0x319
c000a1b0:	75 0a                	jne    c000a1bc <sendKeyboardToken(KeyboardToken)+0x164>
c000a1b2:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000a1b8:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a1bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a1bf:	0f b7 c0             	movzx  eax,ax
c000a1c2:	3d 1a 03 00 00       	cmp    eax,0x31a
c000a1c7:	75 0a                	jne    c000a1d3 <sendKeyboardToken(KeyboardToken)+0x17b>
c000a1c9:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000a1cf:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a1d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a1d6:	0f b7 c0             	movzx  eax,ax
c000a1d9:	3d 1b 03 00 00       	cmp    eax,0x31b
c000a1de:	75 0a                	jne    c000a1ea <sendKeyboardToken(KeyboardToken)+0x192>
c000a1e0:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000a1e6:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a1ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a1ed:	0f b7 c0             	movzx  eax,ax
c000a1f0:	3d 1c 03 00 00       	cmp    eax,0x31c
c000a1f5:	75 0a                	jne    c000a201 <sendKeyboardToken(KeyboardToken)+0x1a9>
c000a1f7:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000a1fd:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a201:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a204:	0f b7 c0             	movzx  eax,ax
c000a207:	3d 1d 03 00 00       	cmp    eax,0x31d
c000a20c:	75 0a                	jne    c000a218 <sendKeyboardToken(KeyboardToken)+0x1c0>
c000a20e:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000a214:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a218:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a21b:	0f b7 c0             	movzx  eax,ax
c000a21e:	3d 1e 03 00 00       	cmp    eax,0x31e
c000a223:	75 0a                	jne    c000a22f <sendKeyboardToken(KeyboardToken)+0x1d7>
c000a225:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000a22b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a22f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a232:	0f b7 c0             	movzx  eax,ax
c000a235:	3d 1f 03 00 00       	cmp    eax,0x31f
c000a23a:	75 0a                	jne    c000a246 <sendKeyboardToken(KeyboardToken)+0x1ee>
c000a23c:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000a242:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a246:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a249:	0f b7 c0             	movzx  eax,ax
c000a24c:	3d 20 03 00 00       	cmp    eax,0x320
c000a251:	75 0a                	jne    c000a25d <sendKeyboardToken(KeyboardToken)+0x205>
c000a253:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000a259:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a25d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a260:	0f b7 c0             	movzx  eax,ax
c000a263:	3d 21 03 00 00       	cmp    eax,0x321
c000a268:	75 0a                	jne    c000a274 <sendKeyboardToken(KeyboardToken)+0x21c>
c000a26a:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000a270:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a274:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a277:	0f b7 c0             	movzx  eax,ax
c000a27a:	3d 00 02 00 00       	cmp    eax,0x200
c000a27f:	75 2f                	jne    c000a2b0 <sendKeyboardToken(KeyboardToken)+0x258>
c000a281:	a0 a0 ca 02 c0       	mov    al,ds:0xc002caa0
c000a286:	83 f0 01             	xor    eax,0x1
c000a289:	0f b6 c0             	movzx  eax,al
c000a28c:	85 c0                	test   eax,eax
c000a28e:	74 20                	je     c000a2b0 <sendKeyboardToken(KeyboardToken)+0x258>
c000a290:	a1 78 fa 02 c0       	mov    eax,ds:0xc002fa78
c000a295:	6a 01                	push   0x1
c000a297:	6a 00                	push   0x0
c000a299:	68 b8 9e 00 c0       	push   0xc0009eb8
c000a29e:	50                   	push   eax
c000a29f:	e8 80 cb 00 00       	call   c0016e24 <Process::createThread(void (*)(void*), void*, int)>
c000a2a4:	83 c4 10             	add    esp,0x10
c000a2a7:	c6 05 a0 ca 02 c0 01 	mov    BYTE PTR ds:0xc002caa0,0x1
c000a2ae:	eb 3a                	jmp    c000a2ea <sendKeyboardToken(KeyboardToken)+0x292>
c000a2b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a2b3:	0f b7 c0             	movzx  eax,ax
c000a2b6:	3d 01 02 00 00       	cmp    eax,0x201
c000a2bb:	75 2d                	jne    c000a2ea <sendKeyboardToken(KeyboardToken)+0x292>
c000a2bd:	a0 a0 ca 02 c0       	mov    al,ds:0xc002caa0
c000a2c2:	83 f0 01             	xor    eax,0x1
c000a2c5:	0f b6 c0             	movzx  eax,al
c000a2c8:	85 c0                	test   eax,eax
c000a2ca:	74 1e                	je     c000a2ea <sendKeyboardToken(KeyboardToken)+0x292>
c000a2cc:	a1 78 fa 02 c0       	mov    eax,ds:0xc002fa78
c000a2d1:	6a 01                	push   0x1
c000a2d3:	6a 00                	push   0x0
c000a2d5:	68 1d 9f 00 c0       	push   0xc0009f1d
c000a2da:	50                   	push   eax
c000a2db:	e8 44 cb 00 00       	call   c0016e24 <Process::createThread(void (*)(void*), void*, int)>
c000a2e0:	83 c4 10             	add    esp,0x10
c000a2e3:	c6 05 a0 ca 02 c0 01 	mov    BYTE PTR ds:0xc002caa0,0x1
c000a2ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a2ed:	0f b7 c0             	movzx  eax,ax
c000a2f0:	3d 25 03 00 00       	cmp    eax,0x325
c000a2f5:	75 06                	jne    c000a2fd <sendKeyboardToken(KeyboardToken)+0x2a5>
c000a2f7:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000a2fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a300:	0f b7 c0             	movzx  eax,ax
c000a303:	3d 24 03 00 00       	cmp    eax,0x324
c000a308:	75 06                	jne    c000a310 <sendKeyboardToken(KeyboardToken)+0x2b8>
c000a30a:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000a310:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a313:	0f b7 c0             	movzx  eax,ax
c000a316:	3d 23 03 00 00       	cmp    eax,0x323
c000a31b:	75 06                	jne    c000a323 <sendKeyboardToken(KeyboardToken)+0x2cb>
c000a31d:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000a323:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a326:	0f b7 c0             	movzx  eax,ax
c000a329:	3d 26 03 00 00       	cmp    eax,0x326
c000a32e:	75 06                	jne    c000a336 <sendKeyboardToken(KeyboardToken)+0x2de>
c000a330:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000a336:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a339:	0f b7 c0             	movzx  eax,ax
c000a33c:	3d 27 03 00 00       	cmp    eax,0x327
c000a341:	75 06                	jne    c000a349 <sendKeyboardToken(KeyboardToken)+0x2f1>
c000a343:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000a349:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a34c:	0f b7 c0             	movzx  eax,ax
c000a34f:	3d 22 03 00 00       	cmp    eax,0x322
c000a354:	75 06                	jne    c000a35c <sendKeyboardToken(KeyboardToken)+0x304>
c000a356:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000a35c:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000a360:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000a363:	83 f0 01             	xor    eax,0x1
c000a366:	0f b6 c0             	movzx  eax,al
c000a369:	85 c0                	test   eax,eax
c000a36b:	74 7c                	je     c000a3e9 <sendKeyboardToken(KeyboardToken)+0x391>
c000a36d:	a0 a1 c7 02 c0       	mov    al,ds:0xc002c7a1
c000a372:	0f b6 c0             	movzx  eax,al
c000a375:	85 c0                	test   eax,eax
c000a377:	74 43                	je     c000a3bc <sendKeyboardToken(KeyboardToken)+0x364>
c000a379:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000a37d:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c000a381:	85 c0                	test   eax,eax
c000a383:	74 2b                	je     c000a3b0 <sendKeyboardToken(KeyboardToken)+0x358>
c000a385:	8b 15 a4 ca 02 c0    	mov    edx,DWORD PTR ds:0xc002caa4
c000a38b:	89 d0                	mov    eax,edx
c000a38d:	c1 e0 02             	shl    eax,0x2
c000a390:	01 d0                	add    eax,edx
c000a392:	d1 e0                	shl    eax,1
c000a394:	a3 a4 ca 02 c0       	mov    ds:0xc002caa4,eax
c000a399:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a39c:	0f b7 c0             	movzx  eax,ax
c000a39f:	8d 50 d0             	lea    edx,[eax-0x30]
c000a3a2:	a1 a4 ca 02 c0       	mov    eax,ds:0xc002caa4
c000a3a7:	01 d0                	add    eax,edx
c000a3a9:	a3 a4 ca 02 c0       	mov    ds:0xc002caa4,eax
c000a3ae:	eb 71                	jmp    c000a421 <sendKeyboardToken(KeyboardToken)+0x3c9>
c000a3b0:	c7 05 a4 ca 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002caa4,0x0
c000a3ba:	eb 65                	jmp    c000a421 <sendKeyboardToken(KeyboardToken)+0x3c9>
c000a3bc:	a1 a4 ca 02 c0       	mov    eax,ds:0xc002caa4
c000a3c1:	85 c0                	test   eax,eax
c000a3c3:	74 18                	je     c000a3dd <sendKeyboardToken(KeyboardToken)+0x385>
c000a3c5:	a1 a4 ca 02 c0       	mov    eax,ds:0xc002caa4
c000a3ca:	0f b6 c0             	movzx  eax,al
c000a3cd:	83 ec 0c             	sub    esp,0xc
c000a3d0:	50                   	push   eax
c000a3d1:	e8 ac fb ff ff       	call   c0009f82 <sendKeyToTerminal(unsigned char)>
c000a3d6:	83 c4 10             	add    esp,0x10
c000a3d9:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000a3dd:	c7 05 a4 ca 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002caa4,0x0
c000a3e7:	eb 38                	jmp    c000a421 <sendKeyboardToken(KeyboardToken)+0x3c9>
c000a3e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a3ec:	0f b7 c0             	movzx  eax,ax
c000a3ef:	3d 01 01 00 00       	cmp    eax,0x101
c000a3f4:	75 2b                	jne    c000a421 <sendKeyboardToken(KeyboardToken)+0x3c9>
c000a3f6:	a1 a4 ca 02 c0       	mov    eax,ds:0xc002caa4
c000a3fb:	85 c0                	test   eax,eax
c000a3fd:	74 18                	je     c000a417 <sendKeyboardToken(KeyboardToken)+0x3bf>
c000a3ff:	a1 a4 ca 02 c0       	mov    eax,ds:0xc002caa4
c000a404:	0f b6 c0             	movzx  eax,al
c000a407:	83 ec 0c             	sub    esp,0xc
c000a40a:	50                   	push   eax
c000a40b:	e8 72 fb ff ff       	call   c0009f82 <sendKeyToTerminal(unsigned char)>
c000a410:	83 c4 10             	add    esp,0x10
c000a413:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000a417:	c7 05 a4 ca 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002caa4,0x0
c000a421:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000a424:	83 f0 01             	xor    eax,0x1
c000a427:	0f b6 c0             	movzx  eax,al
c000a42a:	85 c0                	test   eax,eax
c000a42c:	74 5a                	je     c000a488 <sendKeyboardToken(KeyboardToken)+0x430>
c000a42e:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000a431:	83 f0 01             	xor    eax,0x1
c000a434:	0f b6 c0             	movzx  eax,al
c000a437:	85 c0                	test   eax,eax
c000a439:	74 4d                	je     c000a488 <sendKeyboardToken(KeyboardToken)+0x430>
c000a43b:	a0 a0 c7 02 c0       	mov    al,ds:0xc002c7a0
c000a440:	83 f0 01             	xor    eax,0x1
c000a443:	0f b6 c0             	movzx  eax,al
c000a446:	85 c0                	test   eax,eax
c000a448:	74 3e                	je     c000a488 <sendKeyboardToken(KeyboardToken)+0x430>
c000a44a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a44d:	0f b7 c0             	movzx  eax,ax
c000a450:	83 f8 1f             	cmp    eax,0x1f
c000a453:	76 0b                	jbe    c000a460 <sendKeyboardToken(KeyboardToken)+0x408>
c000a455:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a458:	0f b7 c0             	movzx  eax,ax
c000a45b:	83 f8 7e             	cmp    eax,0x7e
c000a45e:	76 16                	jbe    c000a476 <sendKeyboardToken(KeyboardToken)+0x41e>
c000a460:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a463:	0f b7 c0             	movzx  eax,ax
c000a466:	83 f8 0a             	cmp    eax,0xa
c000a469:	74 0b                	je     c000a476 <sendKeyboardToken(KeyboardToken)+0x41e>
c000a46b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a46e:	0f b7 c0             	movzx  eax,ax
c000a471:	83 f8 08             	cmp    eax,0x8
c000a474:	75 12                	jne    c000a488 <sendKeyboardToken(KeyboardToken)+0x430>
c000a476:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a479:	0f b6 c0             	movzx  eax,al
c000a47c:	83 ec 0c             	sub    esp,0xc
c000a47f:	50                   	push   eax
c000a480:	e8 fd fa ff ff       	call   c0009f82 <sendKeyToTerminal(unsigned char)>
c000a485:	83 c4 10             	add    esp,0x10
c000a488:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000a48b:	83 f0 01             	xor    eax,0x1
c000a48e:	0f b6 c0             	movzx  eax,al
c000a491:	85 c0                	test   eax,eax
c000a493:	74 5d                	je     c000a4f2 <sendKeyboardToken(KeyboardToken)+0x49a>
c000a495:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000a498:	83 f0 01             	xor    eax,0x1
c000a49b:	0f b6 c0             	movzx  eax,al
c000a49e:	85 c0                	test   eax,eax
c000a4a0:	74 50                	je     c000a4f2 <sendKeyboardToken(KeyboardToken)+0x49a>
c000a4a2:	a0 a0 c7 02 c0       	mov    al,ds:0xc002c7a0
c000a4a7:	0f b6 c0             	movzx  eax,al
c000a4aa:	85 c0                	test   eax,eax
c000a4ac:	74 44                	je     c000a4f2 <sendKeyboardToken(KeyboardToken)+0x49a>
c000a4ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a4b1:	0f b7 c0             	movzx  eax,ax
c000a4b4:	83 f8 3f             	cmp    eax,0x3f
c000a4b7:	76 39                	jbe    c000a4f2 <sendKeyboardToken(KeyboardToken)+0x49a>
c000a4b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a4bc:	0f b7 c0             	movzx  eax,ax
c000a4bf:	83 f8 7f             	cmp    eax,0x7f
c000a4c2:	77 2e                	ja     c000a4f2 <sendKeyboardToken(KeyboardToken)+0x49a>
c000a4c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a4c7:	88 c2                	mov    dl,al
c000a4c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a4cc:	0f b7 c0             	movzx  eax,ax
c000a4cf:	83 f8 5f             	cmp    eax,0x5f
c000a4d2:	76 04                	jbe    c000a4d8 <sendKeyboardToken(KeyboardToken)+0x480>
c000a4d4:	b0 20                	mov    al,0x20
c000a4d6:	eb 02                	jmp    c000a4da <sendKeyboardToken(KeyboardToken)+0x482>
c000a4d8:	b0 00                	mov    al,0x0
c000a4da:	89 d1                	mov    ecx,edx
c000a4dc:	29 c1                	sub    ecx,eax
c000a4de:	89 c8                	mov    eax,ecx
c000a4e0:	83 e8 40             	sub    eax,0x40
c000a4e3:	0f b6 c0             	movzx  eax,al
c000a4e6:	83 ec 0c             	sub    esp,0xc
c000a4e9:	50                   	push   eax
c000a4ea:	e8 93 fa ff ff       	call   c0009f82 <sendKeyToTerminal(unsigned char)>
c000a4ef:	83 c4 10             	add    esp,0x10
c000a4f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a4f5:	0f b7 c0             	movzx  eax,ax
c000a4f8:	3d 00 03 00 00       	cmp    eax,0x300
c000a4fd:	75 12                	jne    c000a511 <sendKeyboardToken(KeyboardToken)+0x4b9>
c000a4ff:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000a502:	83 f0 01             	xor    eax,0x1
c000a505:	0f b6 c0             	movzx  eax,al
c000a508:	85 c0                	test   eax,eax
c000a50a:	74 05                	je     c000a511 <sendKeyboardToken(KeyboardToken)+0x4b9>
c000a50c:	e8 66 7c 00 00       	call   c0012177 <doTerminalCycle()>
c000a511:	90                   	nop
c000a512:	c9                   	leave  
c000a513:	c3                   	ret    

c000a514 <clearInternalKeybuffer(VgaText*)>:
c000a514:	55                   	push   ebp
c000a515:	89 e5                	mov    ebp,esp
c000a517:	83 ec 08             	sub    esp,0x8
c000a51a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a51d:	05 02 01 00 00       	add    eax,0x102
c000a522:	83 ec 0c             	sub    esp,0xc
c000a525:	50                   	push   eax
c000a526:	e8 55 60 ff ff       	call   c0000580 <strlen>
c000a52b:	83 c4 10             	add    esp,0x10
c000a52e:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000a531:	81 c2 02 01 00 00    	add    edx,0x102
c000a537:	83 ec 04             	sub    esp,0x4
c000a53a:	50                   	push   eax
c000a53b:	6a 00                	push   0x0
c000a53d:	52                   	push   edx
c000a53e:	e8 ad 5f ff ff       	call   c00004f0 <memset>
c000a543:	83 c4 10             	add    esp,0x10
c000a546:	90                   	nop
c000a547:	c9                   	leave  
c000a548:	c3                   	ret    

c000a549 <readKeyboard(VgaText*, char*, unsigned long)>:
c000a549:	55                   	push   ebp
c000a54a:	89 e5                	mov    ebp,esp
c000a54c:	83 ec 18             	sub    esp,0x18
c000a54f:	a1 88 c6 02 c0       	mov    eax,ds:0xc002c688
c000a554:	85 c0                	test   eax,eax
c000a556:	74 2a                	je     c000a582 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000a558:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000a55e:	8b 15 88 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c688
c000a564:	83 ec 04             	sub    esp,0x4
c000a567:	68 a0 c6 02 c0       	push   0xc002c6a0
c000a56c:	83 ec 08             	sub    esp,0x8
c000a56f:	89 e0                	mov    eax,esp
c000a571:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c000a574:	89 08                	mov    DWORD PTR [eax],ecx
c000a576:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c000a579:	66 89 48 04          	mov    WORD PTR [eax+0x4],cx
c000a57d:	ff d2                	call   edx
c000a57f:	83 c4 10             	add    esp,0x10
c000a582:	fb                   	sti    
c000a583:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000a58a:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000a58e:	0f 84 08 01 00 00    	je     c000a69c <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000a594:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a597:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000a59d:	0f be c0             	movsx  eax,al
c000a5a0:	85 c0                	test   eax,eax
c000a5a2:	75 27                	jne    c000a5cb <readKeyboard(VgaText*, char*, unsigned long)+0x82>
c000a5a4:	fa                   	cli    
c000a5a5:	a1 50 fa 02 c0       	mov    eax,ds:0xc002fa50
c000a5aa:	83 c0 01             	add    eax,0x1
c000a5ad:	a3 50 fa 02 c0       	mov    ds:0xc002fa50,eax
c000a5b2:	e8 15 cb 00 00       	call   c00170cc <schedule()>
c000a5b7:	f0 83 2d 50 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa50,0x1
c000a5bf:	a1 50 fa 02 c0       	mov    eax,ds:0xc002fa50
c000a5c4:	85 c0                	test   eax,eax
c000a5c6:	75 cc                	jne    c000a594 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000a5c8:	fb                   	sti    
c000a5c9:	eb c9                	jmp    c000a594 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000a5cb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000a5ce:	8d 50 01             	lea    edx,[eax+0x1]
c000a5d1:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000a5d4:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000a5d7:	8a 92 02 01 00 00    	mov    dl,BYTE PTR [edx+0x102]
c000a5dd:	88 10                	mov    BYTE PTR [eax],dl
c000a5df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a5e2:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000a5e8:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000a5eb:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000a5ef:	83 f8 03             	cmp    eax,0x3
c000a5f2:	75 1e                	jne    c000a612 <readKeyboard(VgaText*, char*, unsigned long)+0xc9>
c000a5f4:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000a5f9:	8b 00                	mov    eax,DWORD PTR [eax]
c000a5fb:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000a5fe:	8b 80 c0 07 00 00    	mov    eax,DWORD PTR [eax+0x7c0]
c000a604:	83 ec 08             	sub    esp,0x8
c000a607:	6a 02                	push   0x2
c000a609:	50                   	push   eax
c000a60a:	e8 f0 69 00 00       	call   c0010fff <KeRaiseSignal(SigHandlerBlock*, int)>
c000a60f:	83 c4 10             	add    esp,0x10
c000a612:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000a616:	83 f8 1c             	cmp    eax,0x1c
c000a619:	75 1e                	jne    c000a639 <readKeyboard(VgaText*, char*, unsigned long)+0xf0>
c000a61b:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000a620:	8b 00                	mov    eax,DWORD PTR [eax]
c000a622:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000a625:	8b 80 c0 07 00 00    	mov    eax,DWORD PTR [eax+0x7c0]
c000a62b:	83 ec 08             	sub    esp,0x8
c000a62e:	6a 09                	push   0x9
c000a630:	50                   	push   eax
c000a631:	e8 c9 69 00 00       	call   c0010fff <KeRaiseSignal(SigHandlerBlock*, int)>
c000a636:	83 c4 10             	add    esp,0x10
c000a639:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a63c:	05 02 01 00 00       	add    eax,0x102
c000a641:	83 ec 0c             	sub    esp,0xc
c000a644:	50                   	push   eax
c000a645:	e8 36 5f ff ff       	call   c0000580 <strlen>
c000a64a:	83 c4 10             	add    esp,0x10
c000a64d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000a650:	81 c2 02 01 00 00    	add    edx,0x102
c000a656:	8d 4a 01             	lea    ecx,[edx+0x1]
c000a659:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000a65c:	81 c2 02 01 00 00    	add    edx,0x102
c000a662:	83 ec 04             	sub    esp,0x4
c000a665:	50                   	push   eax
c000a666:	51                   	push   ecx
c000a667:	52                   	push   edx
c000a668:	e8 63 5d ff ff       	call   c00003d0 <memmove>
c000a66d:	83 c4 10             	add    esp,0x10
c000a670:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
c000a674:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c000a678:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000a67c:	83 f8 0a             	cmp    eax,0xa
c000a67f:	74 16                	je     c000a697 <readKeyboard(VgaText*, char*, unsigned long)+0x14e>
c000a681:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000a685:	83 f8 03             	cmp    eax,0x3
c000a688:	74 0d                	je     c000a697 <readKeyboard(VgaText*, char*, unsigned long)+0x14e>
c000a68a:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000a68e:	83 f8 1c             	cmp    eax,0x1c
c000a691:	0f 85 f3 fe ff ff    	jne    c000a58a <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000a697:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000a69a:	eb 03                	jmp    c000a69f <readKeyboard(VgaText*, char*, unsigned long)+0x156>
c000a69c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000a69f:	c9                   	leave  
c000a6a0:	c3                   	ret    
c000a6a1:	90                   	nop

c000a6a2 <Keyboard::Keyboard(char const*)>:
c000a6a2:	83 ec 0c             	sub    esp,0xc
c000a6a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a6a9:	83 ec 08             	sub    esp,0x8
c000a6ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a6b0:	50                   	push   eax
c000a6b1:	e8 a2 f4 ff ff       	call   c0009b58 <Device::Device(char const*)>
c000a6b6:	83 c4 10             	add    esp,0x10
c000a6b9:	ba a0 39 02 c0       	mov    edx,0xc00239a0
c000a6be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a6c2:	89 10                	mov    DWORD PTR [eax],edx
c000a6c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a6c8:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000a6d2:	c6 05 84 c6 02 c0 01 	mov    BYTE PTR ds:0xc002c684,0x1
c000a6d9:	90                   	nop
c000a6da:	83 c4 0c             	add    esp,0xc
c000a6dd:	c3                   	ret    

c000a6de <Keyboard::~Keyboard()>:
c000a6de:	83 ec 0c             	sub    esp,0xc
c000a6e1:	ba a0 39 02 c0       	mov    edx,0xc00239a0
c000a6e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a6ea:	89 10                	mov    DWORD PTR [eax],edx
c000a6ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a6f0:	83 ec 0c             	sub    esp,0xc
c000a6f3:	50                   	push   eax
c000a6f4:	e8 ff f1 ff ff       	call   c00098f8 <Device::~Device()>
c000a6f9:	83 c4 10             	add    esp,0x10
c000a6fc:	90                   	nop
c000a6fd:	83 c4 0c             	add    esp,0xc
c000a700:	c3                   	ret    
c000a701:	90                   	nop

c000a702 <Keyboard::~Keyboard()>:
c000a702:	83 ec 0c             	sub    esp,0xc
c000a705:	83 ec 0c             	sub    esp,0xc
c000a708:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a70c:	e8 cd ff ff ff       	call   c000a6de <Keyboard::~Keyboard()>
c000a711:	83 c4 10             	add    esp,0x10
c000a714:	83 ec 08             	sub    esp,0x8
c000a717:	68 5c 01 00 00       	push   0x15c
c000a71c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a720:	e8 d0 2b 00 00       	call   c000d2f5 <operator delete(void*, unsigned long)>
c000a725:	83 c4 10             	add    esp,0x10
c000a728:	83 c4 0c             	add    esp,0xc
c000a72b:	c3                   	ret    

c000a72c <LogicalDisk::close(int, int, void*)>:
c000a72c:	83 c8 ff             	or     eax,0xffffffff
c000a72f:	c3                   	ret    

c000a730 <LogicalDisk::~LogicalDisk()>:
c000a730:	83 ec 0c             	sub    esp,0xc
c000a733:	ba 18 3a 02 c0       	mov    edx,0xc0023a18
c000a738:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a73c:	89 10                	mov    DWORD PTR [eax],edx
c000a73e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a742:	83 ec 0c             	sub    esp,0xc
c000a745:	50                   	push   eax
c000a746:	e8 ad f1 ff ff       	call   c00098f8 <Device::~Device()>
c000a74b:	83 c4 10             	add    esp,0x10
c000a74e:	90                   	nop
c000a74f:	83 c4 0c             	add    esp,0xc
c000a752:	c3                   	ret    
c000a753:	90                   	nop

c000a754 <LogicalDisk::~LogicalDisk()>:
c000a754:	83 ec 0c             	sub    esp,0xc
c000a757:	83 ec 0c             	sub    esp,0xc
c000a75a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a75e:	e8 cd ff ff ff       	call   c000a730 <LogicalDisk::~LogicalDisk()>
c000a763:	83 c4 10             	add    esp,0x10
c000a766:	83 ec 08             	sub    esp,0x8
c000a769:	68 78 01 00 00       	push   0x178
c000a76e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a772:	e8 7e 2b 00 00       	call   c000d2f5 <operator delete(void*, unsigned long)>
c000a777:	83 c4 10             	add    esp,0x10
c000a77a:	83 c4 0c             	add    esp,0xc
c000a77d:	c3                   	ret    

c000a77e <LogicalDisk::open(int, int, void*)>:
c000a77e:	83 ec 18             	sub    esp,0x18
c000a781:	68 cc 39 02 c0       	push   0xc00239cc
c000a786:	e8 ff 56 00 00       	call   c000fe8a <KePanic(char const*)>
c000a78b:	83 c8 ff             	or     eax,0xffffffff
c000a78e:	83 c4 1c             	add    esp,0x1c
c000a791:	c3                   	ret    

c000a792 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000a792:	53                   	push   ebx
c000a793:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a797:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a79b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000a79f:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000a7a5:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000a7ab:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000a7b1:	77 10                	ja     c000a7c3 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000a7b3:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000a7b9:	89 d3                	mov    ebx,edx
c000a7bb:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000a7c1:	72 05                	jb     c000a7c8 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000a7c3:	83 c8 ff             	or     eax,0xffffffff
c000a7c6:	89 c2                	mov    edx,eax
c000a7c8:	5b                   	pop    ebx
c000a7c9:	c3                   	ret    

c000a7ca <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000a7ca:	56                   	push   esi
c000a7cb:	83 c8 ff             	or     eax,0xffffffff
c000a7ce:	53                   	push   ebx
c000a7cf:	89 c2                	mov    edx,eax
c000a7d1:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000a7d5:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000a7d9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000a7dd:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000a7e3:	77 27                	ja     c000a80c <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000a7e5:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000a7eb:	89 d8                	mov    eax,ebx
c000a7ed:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000a7f3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000a7f8:	89 c2                	mov    edx,eax
c000a7fa:	73 10                	jae    c000a80c <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000a7fc:	89 c8                	mov    eax,ecx
c000a7fe:	89 da                	mov    edx,ebx
c000a800:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000a806:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000a80c:	5b                   	pop    ebx
c000a80d:	5e                   	pop    esi
c000a80e:	c3                   	ret    
c000a80f:	90                   	nop

c000a810 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000a810:	83 ec 1c             	sub    esp,0x1c
c000a813:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000a817:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a81b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a81f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a823:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a827:	89 04 24             	mov    DWORD PTR [esp],eax
c000a82a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a82e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a832:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a836:	83 ec 08             	sub    esp,0x8
c000a839:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a83d:	50                   	push   eax
c000a83e:	e8 15 f3 ff ff       	call   c0009b58 <Device::Device(char const*)>
c000a843:	83 c4 10             	add    esp,0x10
c000a846:	ba 18 3a 02 c0       	mov    edx,0xc0023a18
c000a84b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a84f:	89 10                	mov    DWORD PTR [eax],edx
c000a851:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a855:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000a85c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a860:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c000a867:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a86b:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000a872:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a876:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000a880:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a884:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000a888:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a88c:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000a892:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000a898:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a89c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000a89f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a8a3:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000a8a9:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000a8af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a8b3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000a8b7:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000a8bd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a8c1:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000a8cb:	90                   	nop
c000a8cc:	83 c4 1c             	add    esp,0x1c
c000a8cf:	c3                   	ret    

c000a8d0 <LogicalDisk::assignDriveLetter()>:
c000a8d0:	55                   	push   ebp
c000a8d1:	57                   	push   edi
c000a8d2:	56                   	push   esi
c000a8d3:	53                   	push   ebx
c000a8d4:	83 ec 14             	sub    esp,0x14
c000a8d7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a8db:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000a8e1:	b0 41                	mov    al,0x41
c000a8e3:	8a 93 69 01 00 00    	mov    dl,BYTE PTR [ebx+0x169]
c000a8e9:	84 d2                	test   dl,dl
c000a8eb:	75 02                	jne    c000a8ef <LogicalDisk::assignDriveLetter()+0x1f>
c000a8ed:	b0 43                	mov    al,0x43
c000a8ef:	8b 3d c0 ca 02 c0    	mov    edi,DWORD PTR ds:0xc002cac0
c000a8f5:	0f b6 ca             	movzx  ecx,dl
c000a8f8:	0f be e8             	movsx  ebp,al
c000a8fb:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000a8ff:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c000a903:	8b 3d c4 ca 02 c0    	mov    edi,DWORD PTR ds:0xc002cac4
c000a909:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000a90d:	3c 43                	cmp    al,0x43
c000a90f:	75 10                	jne    c000a921 <LogicalDisk::assignDriveLetter()+0x51>
c000a911:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000a918:	75 5a                	jne    c000a974 <LogicalDisk::assignDriveLetter()+0xa4>
c000a91a:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000a91f:	75 53                	jne    c000a974 <LogicalDisk::assignDriveLetter()+0xa4>
c000a921:	8d 75 bf             	lea    esi,[ebp-0x41]
c000a924:	ba 01 00 00 00       	mov    edx,0x1
c000a929:	89 34 24             	mov    DWORD PTR [esp],esi
c000a92c:	8a 0c 24             	mov    cl,BYTE PTR [esp]
c000a92f:	d3 e2                	shl    edx,cl
c000a931:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a935:	89 d7                	mov    edi,edx
c000a937:	89 d6                	mov    esi,edx
c000a939:	23 54 24 04          	and    edx,DWORD PTR [esp+0x4]
c000a93d:	c1 ff 1f             	sar    edi,0x1f
c000a940:	21 f9                	and    ecx,edi
c000a942:	09 d1                	or     ecx,edx
c000a944:	75 2e                	jne    c000a974 <LogicalDisk::assignDriveLetter()+0xa4>
c000a946:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a94a:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000a94e:	09 f2                	or     edx,esi
c000a950:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000a953:	89 15 c0 ca 02 c0    	mov    DWORD PTR ds:0xc002cac0,edx
c000a959:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a95d:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000a963:	89 1c b5 e0 ca 02 c0 	mov    DWORD PTR [esi*4-0x3ffd3520],ebx
c000a96a:	09 fa                	or     edx,edi
c000a96c:	89 15 c4 ca 02 c0    	mov    DWORD PTR ds:0xc002cac4,edx
c000a972:	eb 0d                	jmp    c000a981 <LogicalDisk::assignDriveLetter()+0xb1>
c000a974:	8d 50 01             	lea    edx,[eax+0x1]
c000a977:	45                   	inc    ebp
c000a978:	80 fa 5b             	cmp    dl,0x5b
c000a97b:	88 d0                	mov    al,dl
c000a97d:	75 8e                	jne    c000a90d <LogicalDisk::assignDriveLetter()+0x3d>
c000a97f:	31 c0                	xor    eax,eax
c000a981:	83 c4 14             	add    esp,0x14
c000a984:	5b                   	pop    ebx
c000a985:	5e                   	pop    esi
c000a986:	5f                   	pop    edi
c000a987:	5d                   	pop    ebp
c000a988:	c3                   	ret    
c000a989:	90                   	nop

c000a98a <LogicalDisk::mount()>:
c000a98a:	56                   	push   esi
c000a98b:	53                   	push   ebx
c000a98c:	53                   	push   ebx
c000a98d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000a991:	8b 1d 04 c3 02 c0    	mov    ebx,DWORD PTR ds:0xc002c304
c000a997:	c7 86 74 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x174],0x0
c000a9a1:	85 db                	test   ebx,ebx
c000a9a3:	74 27                	je     c000a9cc <LogicalDisk::mount()+0x42>
c000a9a5:	51                   	push   ecx
c000a9a6:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000a9ad:	8b 13                	mov    edx,DWORD PTR [ebx]
c000a9af:	83 e8 41             	sub    eax,0x41
c000a9b2:	50                   	push   eax
c000a9b3:	56                   	push   esi
c000a9b4:	53                   	push   ebx
c000a9b5:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000a9b8:	83 c4 10             	add    esp,0x10
c000a9bb:	84 c0                	test   al,al
c000a9bd:	74 08                	je     c000a9c7 <LogicalDisk::mount()+0x3d>
c000a9bf:	89 9e 74 01 00 00    	mov    DWORD PTR [esi+0x174],ebx
c000a9c5:	eb 07                	jmp    c000a9ce <LogicalDisk::mount()+0x44>
c000a9c7:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000a9ca:	eb d5                	jmp    c000a9a1 <LogicalDisk::mount()+0x17>
c000a9cc:	31 c0                	xor    eax,eax
c000a9ce:	5a                   	pop    edx
c000a9cf:	5b                   	pop    ebx
c000a9d0:	5e                   	pop    esi
c000a9d1:	c3                   	ret    

c000a9d2 <LogicalDisk::unmount()>:
c000a9d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a9d6:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000a9e0:	c3                   	ret    
c000a9e1:	90                   	nop

c000a9e2 <LogicalDisk::eject()>:
c000a9e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a9e6:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000a9ec:	8b 10                	mov    edx,DWORD PTR [eax]
c000a9ee:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a9f2:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000a9f5:	90                   	nop

c000a9f6 <LogicalDisk::unassignDriveLetter()>:
c000a9f6:	57                   	push   edi
c000a9f7:	56                   	push   esi
c000a9f8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a9fc:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000aa03:	85 c9                	test   ecx,ecx
c000aa05:	75 0f                	jne    c000aa16 <LogicalDisk::unassignDriveLetter()+0x20>
c000aa07:	c7 44 24 0c f0 39 02 c0 	mov    DWORD PTR [esp+0xc],0xc00239f0
c000aa0f:	5e                   	pop    esi
c000aa10:	5f                   	pop    edi
c000aa11:	e9 74 54 00 00       	jmp    c000fe8a <KePanic(char const*)>
c000aa16:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000aa1d:	83 e9 41             	sub    ecx,0x41
c000aa20:	b8 01 00 00 00       	mov    eax,0x1
c000aa25:	c7 04 8d e0 ca 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd3520],0x0
c000aa30:	d3 e0                	shl    eax,cl
c000aa32:	89 c7                	mov    edi,eax
c000aa34:	f7 d0                	not    eax
c000aa36:	c1 ff 1f             	sar    edi,0x1f
c000aa39:	21 05 c0 ca 02 c0    	and    DWORD PTR ds:0xc002cac0,eax
c000aa3f:	89 fe                	mov    esi,edi
c000aa41:	f7 d6                	not    esi
c000aa43:	21 35 c4 ca 02 c0    	and    DWORD PTR ds:0xc002cac4,esi
c000aa49:	5e                   	pop    esi
c000aa4a:	5f                   	pop    edi
c000aa4b:	c3                   	ret    

c000aa4c <LogicalDisk::read(unsigned long long, int, void*)>:
c000aa4c:	57                   	push   edi
c000aa4d:	56                   	push   esi
c000aa4e:	53                   	push   ebx
c000aa4f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000aa53:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000aa57:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000aa5b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000aa5f:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000aa65:	77 41                	ja     c000aaa8 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000aa67:	99                   	cdq    
c000aa68:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000aa6e:	01 c8                	add    eax,ecx
c000aa70:	11 da                	adc    edx,ebx
c000aa72:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000aa78:	19 d7                	sbb    edi,edx
c000aa7a:	72 33                	jb     c000aaaf <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000aa7c:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000aa82:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000aa88:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000aa8c:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000aa90:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000aa96:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000aa9c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aaa0:	5b                   	pop    ebx
c000aaa1:	5e                   	pop    esi
c000aaa2:	5f                   	pop    edi
c000aaa3:	e9 a2 0b 00 00       	jmp    c000b64a <VCache::read(unsigned long long, int, void*)>
c000aaa8:	b8 05 00 00 00       	mov    eax,0x5
c000aaad:	eb 05                	jmp    c000aab4 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000aaaf:	b8 07 00 00 00       	mov    eax,0x7
c000aab4:	5b                   	pop    ebx
c000aab5:	5e                   	pop    esi
c000aab6:	5f                   	pop    edi
c000aab7:	c3                   	ret    

c000aab8 <LogicalDisk::write(unsigned long long, int, void*)>:
c000aab8:	57                   	push   edi
c000aab9:	56                   	push   esi
c000aaba:	53                   	push   ebx
c000aabb:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000aabf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000aac3:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000aac7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000aacb:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000aad1:	77 41                	ja     c000ab14 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000aad3:	99                   	cdq    
c000aad4:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000aada:	01 c8                	add    eax,ecx
c000aadc:	11 da                	adc    edx,ebx
c000aade:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000aae4:	19 d7                	sbb    edi,edx
c000aae6:	72 33                	jb     c000ab1b <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000aae8:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000aaee:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000aaf4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000aaf8:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000aafc:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000ab02:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000ab08:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ab0c:	5b                   	pop    ebx
c000ab0d:	5e                   	pop    esi
c000ab0e:	5f                   	pop    edi
c000ab0f:	e9 68 09 00 00       	jmp    c000b47c <VCache::write(unsigned long long, int, void*)>
c000ab14:	b8 05 00 00 00       	mov    eax,0x5
c000ab19:	eb 05                	jmp    c000ab20 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000ab1b:	b8 07 00 00 00       	mov    eax,0x7
c000ab20:	5b                   	pop    ebx
c000ab21:	5e                   	pop    esi
c000ab22:	5f                   	pop    edi
c000ab23:	c3                   	ret    

c000ab24 <Mouse::Mouse(char const*)>:
c000ab24:	83 ec 0c             	sub    esp,0xc
c000ab27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab2b:	83 ec 08             	sub    esp,0x8
c000ab2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab32:	50                   	push   eax
c000ab33:	e8 20 f0 ff ff       	call   c0009b58 <Device::Device(char const*)>
c000ab38:	83 c4 10             	add    esp,0x10
c000ab3b:	ba 44 3a 02 c0       	mov    edx,0xc0023a44
c000ab40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab44:	89 10                	mov    DWORD PTR [eax],edx
c000ab46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab4a:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000ab54:	90                   	nop
c000ab55:	83 c4 0c             	add    esp,0xc
c000ab58:	c3                   	ret    
c000ab59:	90                   	nop
c000ab5a:	66 90                	xchg   ax,ax

c000ab5c <Mouse::~Mouse()>:
c000ab5c:	83 ec 0c             	sub    esp,0xc
c000ab5f:	ba 44 3a 02 c0       	mov    edx,0xc0023a44
c000ab64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab68:	89 10                	mov    DWORD PTR [eax],edx
c000ab6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab6e:	83 ec 0c             	sub    esp,0xc
c000ab71:	50                   	push   eax
c000ab72:	e8 81 ed ff ff       	call   c00098f8 <Device::~Device()>
c000ab77:	83 c4 10             	add    esp,0x10
c000ab7a:	90                   	nop
c000ab7b:	83 c4 0c             	add    esp,0xc
c000ab7e:	c3                   	ret    
c000ab7f:	90                   	nop

c000ab80 <Mouse::~Mouse()>:
c000ab80:	83 ec 0c             	sub    esp,0xc
c000ab83:	83 ec 0c             	sub    esp,0xc
c000ab86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab8a:	e8 cd ff ff ff       	call   c000ab5c <Mouse::~Mouse()>
c000ab8f:	83 c4 10             	add    esp,0x10
c000ab92:	83 ec 08             	sub    esp,0x8
c000ab95:	68 58 01 00 00       	push   0x158
c000ab9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab9e:	e8 52 27 00 00       	call   c000d2f5 <operator delete(void*, unsigned long)>
c000aba3:	83 c4 10             	add    esp,0x10
c000aba6:	83 c4 0c             	add    esp,0xc
c000aba9:	c3                   	ret    

c000abaa <NIC::getMAC()>:
c000abaa:	31 c0                	xor    eax,eax
c000abac:	31 d2                	xor    edx,edx
c000abae:	c3                   	ret    
c000abaf:	90                   	nop

c000abb0 <NIC::write(int, unsigned char*, int*)>:
c000abb0:	b8 01 00 00 00       	mov    eax,0x1
c000abb5:	c3                   	ret    

c000abb6 <NIC::NIC(char const*)>:
c000abb6:	83 ec 0c             	sub    esp,0xc
c000abb9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abbd:	83 ec 08             	sub    esp,0x8
c000abc0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000abc4:	50                   	push   eax
c000abc5:	e8 8e ef ff ff       	call   c0009b58 <Device::Device(char const*)>
c000abca:	83 c4 10             	add    esp,0x10
c000abcd:	ba 70 3a 02 c0       	mov    edx,0xc0023a70
c000abd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abd6:	89 10                	mov    DWORD PTR [eax],edx
c000abd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abdc:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000abe6:	90                   	nop
c000abe7:	83 c4 0c             	add    esp,0xc
c000abea:	c3                   	ret    
c000abeb:	90                   	nop

c000abec <NIC::~NIC()>:
c000abec:	83 ec 0c             	sub    esp,0xc
c000abef:	ba 70 3a 02 c0       	mov    edx,0xc0023a70
c000abf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abf8:	89 10                	mov    DWORD PTR [eax],edx
c000abfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abfe:	83 ec 0c             	sub    esp,0xc
c000ac01:	50                   	push   eax
c000ac02:	e8 f1 ec ff ff       	call   c00098f8 <Device::~Device()>
c000ac07:	83 c4 10             	add    esp,0x10
c000ac0a:	90                   	nop
c000ac0b:	83 c4 0c             	add    esp,0xc
c000ac0e:	c3                   	ret    
c000ac0f:	90                   	nop

c000ac10 <NIC::~NIC()>:
c000ac10:	83 ec 0c             	sub    esp,0xc
c000ac13:	83 ec 0c             	sub    esp,0xc
c000ac16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac1a:	e8 cd ff ff ff       	call   c000abec <NIC::~NIC()>
c000ac1f:	83 c4 10             	add    esp,0x10
c000ac22:	83 ec 08             	sub    esp,0x8
c000ac25:	68 58 01 00 00       	push   0x158
c000ac2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac2e:	e8 c2 26 00 00       	call   c000d2f5 <operator delete(void*, unsigned long)>
c000ac33:	83 c4 10             	add    esp,0x10
c000ac36:	83 c4 0c             	add    esp,0xc
c000ac39:	c3                   	ret    

c000ac3a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000ac3a:	55                   	push   ebp
c000ac3b:	57                   	push   edi
c000ac3c:	56                   	push   esi
c000ac3d:	53                   	push   ebx
c000ac3e:	81 ec 28 01 00 00    	sub    esp,0x128
c000ac44:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
c000ac4b:	8b 94 24 4c 01 00 00 	mov    edx,DWORD PTR [esp+0x14c]
c000ac52:	8b b4 24 40 01 00 00 	mov    esi,DWORD PTR [esp+0x140]
c000ac59:	8b bc 24 44 01 00 00 	mov    edi,DWORD PTR [esp+0x144]
c000ac60:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ac64:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000ac68:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000ac6f:	e8 e0 ef ff ff       	call   c0009c54 <Device::getName()>
c000ac74:	5a                   	pop    edx
c000ac75:	59                   	pop    ecx
c000ac76:	50                   	push   eax
c000ac77:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000ac7b:	55                   	push   ebp
c000ac7c:	e8 cf 59 ff ff       	call   c0000650 <strcpy>
c000ac81:	5b                   	pop    ebx
c000ac82:	58                   	pop    eax
c000ac83:	68 9c 3a 02 c0       	push   0xc0023a9c
c000ac88:	55                   	push   ebp
c000ac89:	e8 e2 5b ff ff       	call   c0000870 <strcat>
c000ac8e:	c7 04 24 78 01 00 00 	mov    DWORD PTR [esp],0x178
c000ac95:	e8 e2 4e 00 00       	call   c000fb7c <malloc>
c000ac9a:	83 c4 0c             	add    esp,0xc
c000ac9d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000aca1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000aca5:	89 c3                	mov    ebx,eax
c000aca7:	57                   	push   edi
c000aca8:	56                   	push   esi
c000aca9:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000acb0:	55                   	push   ebp
c000acb1:	50                   	push   eax
c000acb2:	e8 59 fb ff ff       	call   c000a810 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000acb7:	83 c4 14             	add    esp,0x14
c000acba:	53                   	push   ebx
c000acbb:	e8 10 fc ff ff       	call   c000a8d0 <LogicalDisk::assignDriveLetter()>
c000acc0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000acc3:	e8 c2 fc ff ff       	call   c000a98a <LogicalDisk::mount()>
c000acc8:	58                   	pop    eax
c000acc9:	5a                   	pop    edx
c000acca:	53                   	push   ebx
c000accb:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000acd2:	e8 1f ed ff ff       	call   c00099f6 <Device::addChild(Device*)>
c000acd7:	81 c4 2c 01 00 00    	add    esp,0x12c
c000acdd:	5b                   	pop    ebx
c000acde:	5e                   	pop    esi
c000acdf:	5f                   	pop    edi
c000ace0:	5d                   	pop    ebp
c000ace1:	c3                   	ret    

c000ace2 <createPartitionsForDisk(PhysicalDisk*)>:
c000ace2:	55                   	push   ebp
c000ace3:	57                   	push   edi
c000ace4:	56                   	push   esi
c000ace5:	53                   	push   ebx
c000ace6:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000acec:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000acf3:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000acf9:	3d 00 02 00 00       	cmp    eax,0x200
c000acfe:	74 27                	je     c000ad27 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000ad00:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000ad06:	83 ec 10             	sub    esp,0x10
c000ad09:	99                   	cdq    
c000ad0a:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000ad10:	52                   	push   edx
c000ad11:	50                   	push   eax
c000ad12:	0f a4 f7 0a          	shld   edi,esi,0xa
c000ad16:	c1 e6 0a             	shl    esi,0xa
c000ad19:	89 fd                	mov    ebp,edi
c000ad1b:	55                   	push   ebp
c000ad1c:	56                   	push   esi
c000ad1d:	e8 e2 6e 01 00       	call   c0021c04 <__udivdi3>
c000ad22:	e9 b9 00 00 00       	jmp    c000ade0 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000ad27:	83 ec 0c             	sub    esp,0xc
c000ad2a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ad2c:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000ad30:	56                   	push   esi
c000ad31:	6a 01                	push   0x1
c000ad33:	6a 00                	push   0x0
c000ad35:	6a 00                	push   0x0
c000ad37:	53                   	push   ebx
c000ad38:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000ad3b:	83 c4 20             	add    esp,0x20
c000ad3e:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000ad46:	75 0a                	jne    c000ad52 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000ad48:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000ad50:	74 2c                	je     c000ad7e <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000ad52:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000ad58:	83 ec 10             	sub    esp,0x10
c000ad5b:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ad61:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000ad67:	89 f7                	mov    edi,esi
c000ad69:	c1 ff 1f             	sar    edi,0x1f
c000ad6c:	57                   	push   edi
c000ad6d:	0f a4 c2 0a          	shld   edx,eax,0xa
c000ad71:	56                   	push   esi
c000ad72:	c1 e0 0a             	shl    eax,0xa
c000ad75:	52                   	push   edx
c000ad76:	50                   	push   eax
c000ad77:	e8 88 6e 01 00       	call   c0021c04 <__udivdi3>
c000ad7c:	eb 62                	jmp    c000ade0 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000ad7e:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000ad85:	8a 94 24 1e 02 00 00 	mov    dl,BYTE PTR [esp+0x21e]
c000ad8c:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000ad93:	89 cf                	mov    edi,ecx
c000ad95:	83 e2 7f             	and    edx,0x7f
c000ad98:	83 e7 7f             	and    edi,0x7f
c000ad9b:	8d 0c 17             	lea    ecx,[edi+edx*1]
c000ad9e:	83 e0 7f             	and    eax,0x7f
c000ada1:	8d 14 01             	lea    edx,[ecx+eax*1]
c000ada4:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000adab:	83 e0 7f             	and    eax,0x7f
c000adae:	01 d0                	add    eax,edx
c000adb0:	84 c0                	test   al,al
c000adb2:	89 c5                	mov    ebp,eax
c000adb4:	74 41                	je     c000adf7 <createPartitionsForDisk(PhysicalDisk*)+0x115>
c000adb6:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000adbc:	83 ec 10             	sub    esp,0x10
c000adbf:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000adc5:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000adcb:	89 f7                	mov    edi,esi
c000adcd:	c1 ff 1f             	sar    edi,0x1f
c000add0:	57                   	push   edi
c000add1:	0f a4 c2 0a          	shld   edx,eax,0xa
c000add5:	56                   	push   esi
c000add6:	c1 e0 0a             	shl    eax,0xa
c000add9:	52                   	push   edx
c000adda:	50                   	push   eax
c000addb:	e8 24 6e 01 00       	call   c0021c04 <__udivdi3>
c000ade0:	83 c4 14             	add    esp,0x14
c000ade3:	52                   	push   edx
c000ade4:	50                   	push   eax
c000ade5:	6a 00                	push   0x0
c000ade7:	6a 00                	push   0x0
c000ade9:	53                   	push   ebx
c000adea:	e8 4b fe ff ff       	call   c000ac3a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000adef:	83 c4 20             	add    esp,0x20
c000adf2:	e9 73 01 00 00       	jmp    c000af6a <createPartitionsForDisk(PhysicalDisk*)+0x288>
c000adf7:	89 f0                	mov    eax,esi
c000adf9:	31 c9                	xor    ecx,ecx
c000adfb:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000ae02:	75 02                	jne    c000ae06 <createPartitionsForDisk(PhysicalDisk*)+0x124>
c000ae04:	89 cd                	mov    ebp,ecx
c000ae06:	c7 44 cc 14 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x14],0x0
c000ae0e:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000ae15:	83 c0 10             	add    eax,0x10
c000ae18:	c7 44 cc 34 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x34],0x0
c000ae20:	0f b6 b0 b8 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b8]
c000ae27:	c1 e2 08             	shl    edx,0x8
c000ae2a:	c1 e6 10             	shl    esi,0x10
c000ae2d:	09 f2                	or     edx,esi
c000ae2f:	0f b6 b0 b6 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b6]
c000ae36:	09 f2                	or     edx,esi
c000ae38:	0f b6 b0 b9 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b9]
c000ae3f:	c1 e6 18             	shl    esi,0x18
c000ae42:	09 f2                	or     edx,esi
c000ae44:	0f b6 b0 bc 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bc]
c000ae4b:	89 54 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],edx
c000ae4f:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000ae56:	c1 e6 10             	shl    esi,0x10
c000ae59:	c1 e2 08             	shl    edx,0x8
c000ae5c:	09 f2                	or     edx,esi
c000ae5e:	0f b6 b0 ba 01 00 00 	movzx  esi,BYTE PTR [eax+0x1ba]
c000ae65:	09 f2                	or     edx,esi
c000ae67:	0f b6 b0 bd 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bd]
c000ae6e:	c1 e6 18             	shl    esi,0x18
c000ae71:	09 f2                	or     edx,esi
c000ae73:	89 54 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],edx
c000ae77:	41                   	inc    ecx
c000ae78:	83 f9 04             	cmp    ecx,0x4
c000ae7b:	0f 85 7a ff ff ff    	jne    c000adfb <createPartitionsForDisk(PhysicalDisk*)+0x119>
c000ae81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae85:	83 f0 01             	xor    eax,0x1
c000ae88:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000ae8c:	75 4f                	jne    c000aedd <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000ae8e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ae92:	83 f0 01             	xor    eax,0x1
c000ae95:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000ae99:	75 42                	jne    c000aedd <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000ae9b:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000aea1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000aea9:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000aeaf:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000aeb7:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000aebd:	89 f7                	mov    edi,esi
c000aebf:	c1 ff 1f             	sar    edi,0x1f
c000aec2:	57                   	push   edi
c000aec3:	56                   	push   esi
c000aec4:	0f a4 c2 0a          	shld   edx,eax,0xa
c000aec8:	52                   	push   edx
c000aec9:	c1 e0 0a             	shl    eax,0xa
c000aecc:	50                   	push   eax
c000aecd:	e8 32 6d 01 00       	call   c0021c04 <__udivdi3>
c000aed2:	83 c4 10             	add    esp,0x10
c000aed5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000aed9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000aedd:	89 e8                	mov    eax,ebp
c000aedf:	0f b6 e8             	movzx  ebp,al
c000aee2:	85 ed                	test   ebp,ebp
c000aee4:	74 50                	je     c000af36 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000aee6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000aeea:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000aeee:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000aef2:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000aef6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aefa:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000aefe:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000af02:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000af06:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000af0a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000af0e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000af12:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000af16:	89 74 ec 10          	mov    DWORD PTR [esp+ebp*8+0x10],esi
c000af1a:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000af1e:	89 7c ec 14          	mov    DWORD PTR [esp+ebp*8+0x14],edi
c000af22:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000af26:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000af2a:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000af2e:	89 44 ec 30          	mov    DWORD PTR [esp+ebp*8+0x30],eax
c000af32:	89 54 ec 34          	mov    DWORD PTR [esp+ebp*8+0x34],edx
c000af36:	31 ed                	xor    ebp,ebp
c000af38:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000af3c:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000af40:	89 f8                	mov    eax,edi
c000af42:	09 f0                	or     eax,esi
c000af44:	74 1e                	je     c000af64 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000af46:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000af4a:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000af4e:	89 d1                	mov    ecx,edx
c000af50:	09 c1                	or     ecx,eax
c000af52:	74 10                	je     c000af64 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000af54:	83 ec 0c             	sub    esp,0xc
c000af57:	57                   	push   edi
c000af58:	56                   	push   esi
c000af59:	52                   	push   edx
c000af5a:	50                   	push   eax
c000af5b:	53                   	push   ebx
c000af5c:	e8 d9 fc ff ff       	call   c000ac3a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000af61:	83 c4 20             	add    esp,0x20
c000af64:	45                   	inc    ebp
c000af65:	83 fd 04             	cmp    ebp,0x4
c000af68:	75 ce                	jne    c000af38 <createPartitionsForDisk(PhysicalDisk*)+0x256>
c000af6a:	81 c4 5c 02 00 00    	add    esp,0x25c
c000af70:	5b                   	pop    ebx
c000af71:	5e                   	pop    esi
c000af72:	5f                   	pop    edi
c000af73:	5d                   	pop    ebp
c000af74:	c3                   	ret    
c000af75:	66 90                	xchg   ax,ax
c000af77:	90                   	nop

c000af78 <Serial::Serial(char const*)>:
c000af78:	83 ec 0c             	sub    esp,0xc
c000af7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af7f:	83 ec 08             	sub    esp,0x8
c000af82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000af86:	50                   	push   eax
c000af87:	e8 cc eb ff ff       	call   c0009b58 <Device::Device(char const*)>
c000af8c:	83 c4 10             	add    esp,0x10
c000af8f:	ba b0 3a 02 c0       	mov    edx,0xc0023ab0
c000af94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af98:	89 10                	mov    DWORD PTR [eax],edx
c000af9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af9e:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000afa8:	90                   	nop
c000afa9:	83 c4 0c             	add    esp,0xc
c000afac:	c3                   	ret    
c000afad:	90                   	nop
c000afae:	66 90                	xchg   ax,ax

c000afb0 <Serial::~Serial()>:
c000afb0:	83 ec 0c             	sub    esp,0xc
c000afb3:	ba b0 3a 02 c0       	mov    edx,0xc0023ab0
c000afb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afbc:	89 10                	mov    DWORD PTR [eax],edx
c000afbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afc2:	83 ec 0c             	sub    esp,0xc
c000afc5:	50                   	push   eax
c000afc6:	e8 2d e9 ff ff       	call   c00098f8 <Device::~Device()>
c000afcb:	83 c4 10             	add    esp,0x10
c000afce:	90                   	nop
c000afcf:	83 c4 0c             	add    esp,0xc
c000afd2:	c3                   	ret    
c000afd3:	90                   	nop

c000afd4 <Serial::~Serial()>:
c000afd4:	83 ec 0c             	sub    esp,0xc
c000afd7:	83 ec 0c             	sub    esp,0xc
c000afda:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000afde:	e8 cd ff ff ff       	call   c000afb0 <Serial::~Serial()>
c000afe3:	83 c4 10             	add    esp,0x10
c000afe6:	83 ec 08             	sub    esp,0x8
c000afe9:	68 58 01 00 00       	push   0x158
c000afee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aff2:	e8 fe 22 00 00       	call   c000d2f5 <operator delete(void*, unsigned long)>
c000aff7:	83 c4 10             	add    esp,0x10
c000affa:	83 c4 0c             	add    esp,0xc
c000affd:	c3                   	ret    
c000affe:	66 90                	xchg   ax,ax

c000b000 <Timer::Timer(char const*)>:
c000b000:	83 ec 0c             	sub    esp,0xc
c000b003:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b007:	83 ec 08             	sub    esp,0x8
c000b00a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b00e:	50                   	push   eax
c000b00f:	e8 44 eb ff ff       	call   c0009b58 <Device::Device(char const*)>
c000b014:	83 c4 10             	add    esp,0x10
c000b017:	ba 8c 3b 02 c0       	mov    edx,0xc0023b8c
c000b01c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b020:	89 10                	mov    DWORD PTR [eax],edx
c000b022:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b026:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000b030:	90                   	nop
c000b031:	83 c4 0c             	add    esp,0xc
c000b034:	c3                   	ret    
c000b035:	90                   	nop
c000b036:	66 90                	xchg   ax,ax

c000b038 <Timer::~Timer()>:
c000b038:	83 ec 0c             	sub    esp,0xc
c000b03b:	ba 8c 3b 02 c0       	mov    edx,0xc0023b8c
c000b040:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b044:	89 10                	mov    DWORD PTR [eax],edx
c000b046:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b04a:	83 ec 0c             	sub    esp,0xc
c000b04d:	50                   	push   eax
c000b04e:	e8 a5 e8 ff ff       	call   c00098f8 <Device::~Device()>
c000b053:	83 c4 10             	add    esp,0x10
c000b056:	90                   	nop
c000b057:	83 c4 0c             	add    esp,0xc
c000b05a:	c3                   	ret    
c000b05b:	90                   	nop

c000b05c <Timer::~Timer()>:
c000b05c:	83 ec 0c             	sub    esp,0xc
c000b05f:	83 ec 0c             	sub    esp,0xc
c000b062:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b066:	e8 cd ff ff ff       	call   c000b038 <Timer::~Timer()>
c000b06b:	83 c4 10             	add    esp,0x10
c000b06e:	83 ec 08             	sub    esp,0x8
c000b071:	68 5c 01 00 00       	push   0x15c
c000b076:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b07a:	e8 76 22 00 00       	call   c000d2f5 <operator delete(void*, unsigned long)>
c000b07f:	83 c4 10             	add    esp,0x10
c000b082:	83 c4 0c             	add    esp,0xc
c000b085:	c3                   	ret    

c000b086 <Timer::read()>:
c000b086:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b08a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000b090:	c3                   	ret    

c000b091 <setupTimer(int)>:
c000b091:	53                   	push   ebx
c000b092:	83 ec 14             	sub    esp,0x14
c000b095:	68 5c 01 00 00       	push   0x15c
c000b09a:	e8 dd 4a 00 00       	call   c000fb7c <malloc>
c000b09f:	89 04 24             	mov    DWORD PTR [esp],eax
c000b0a2:	89 c3                	mov    ebx,eax
c000b0a4:	e8 0f 64 01 00       	call   c00214b8 <PIT::PIT()>
c000b0a9:	58                   	pop    eax
c000b0aa:	5a                   	pop    edx
c000b0ab:	53                   	push   ebx
c000b0ac:	ff 35 d4 d0 02 c0    	push   DWORD PTR ds:0xc002d0d4
c000b0b2:	e8 3f e9 ff ff       	call   c00099f6 <Device::addChild(Device*)>
c000b0b7:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b0b9:	6a 00                	push   0x0
c000b0bb:	6a 00                	push   0x0
c000b0bd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000b0c1:	53                   	push   ebx
c000b0c2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b0c5:	83 c4 28             	add    esp,0x28
c000b0c8:	89 d8                	mov    eax,ebx
c000b0ca:	5b                   	pop    ebx
c000b0cb:	c3                   	ret    

c000b0cc <timerHandler(unsigned int)>:
c000b0cc:	57                   	push   edi
c000b0cd:	31 d2                	xor    edx,edx
c000b0cf:	56                   	push   esi
c000b0d0:	53                   	push   ebx
c000b0d1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b0d5:	01 1d 50 cb 02 c0    	add    DWORD PTR ds:0xc002cb50,ebx
c000b0db:	11 15 54 cb 02 c0    	adc    DWORD PTR ds:0xc002cb54,edx
c000b0e1:	80 3d d9 d0 02 c0 00 	cmp    BYTE PTR ds:0xc002d0d9,0x0
c000b0e8:	75 12                	jne    c000b0fc <timerHandler(unsigned int)+0x30>
c000b0ea:	c7 44 24 10 3f 3b 02 c0 	mov    DWORD PTR [esp+0x10],0xc0023b3f
c000b0f2:	5b                   	pop    ebx
c000b0f3:	5e                   	pop    esi
c000b0f4:	5f                   	pop    edi
c000b0f5:	e9 6c be ff ff       	jmp    c0006f66 <Dbg::kprintf(char const*, ...)>
c000b0fa:	66 90                	xchg   ax,ax
c000b0fc:	fa                   	cli    
c000b0fd:	ff 05 50 fa 02 c0    	inc    DWORD PTR ds:0xc002fa50
c000b103:	83 ec 0c             	sub    esp,0xc
c000b106:	68 60 fa 02 c0       	push   0xc002fa60
c000b10b:	e8 8c 6e 01 00       	call   c0021f9c <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000b110:	83 c4 10             	add    esp,0x10
c000b113:	84 c0                	test   al,al
c000b115:	0f 85 a9 00 00 00    	jne    c000b1c4 <timerHandler(unsigned int)+0xf8>
c000b11b:	83 ec 0c             	sub    esp,0xc
c000b11e:	68 60 fa 02 c0       	push   0xc002fa60
c000b123:	e8 90 6e 01 00       	call   c0021fb8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000b128:	83 c4 10             	add    esp,0x10
c000b12b:	89 c6                	mov    esi,eax
c000b12d:	8d 76 00             	lea    esi,[esi+0x0]
c000b130:	83 ec 0c             	sub    esp,0xc
c000b133:	68 60 fa 02 c0       	push   0xc002fa60
c000b138:	e8 7b 6e 01 00       	call   c0021fb8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000b13d:	c7 04 24 60 fa 02 c0 	mov    DWORD PTR [esp],0xc002fa60
c000b144:	89 c7                	mov    edi,eax
c000b146:	e8 75 6e 01 00       	call   c0021fc0 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000b14b:	8b 57 2c             	mov    edx,DWORD PTR [edi+0x2c]
c000b14e:	83 c4 10             	add    esp,0x10
c000b151:	8b 4f 30             	mov    ecx,DWORD PTR [edi+0x30]
c000b154:	a1 54 cb 02 c0       	mov    eax,ds:0xc002cb54
c000b159:	39 15 50 cb 02 c0    	cmp    DWORD PTR ds:0xc002cb50,edx
c000b15f:	19 c8                	sbb    eax,ecx
c000b161:	72 21                	jb     c000b184 <timerHandler(unsigned int)+0xb8>
c000b163:	83 ec 0c             	sub    esp,0xc
c000b166:	57                   	push   edi
c000b167:	e8 b8 c2 00 00       	call   c0017424 <unblockTask(ThreadControlBlock*)>
c000b16c:	83 c4 10             	add    esp,0x10
c000b16f:	39 fe                	cmp    esi,edi
c000b171:	75 25                	jne    c000b198 <timerHandler(unsigned int)+0xcc>
c000b173:	83 ec 0c             	sub    esp,0xc
c000b176:	68 60 fa 02 c0       	push   0xc002fa60
c000b17b:	e8 38 6e 01 00       	call   c0021fb8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000b180:	89 c6                	mov    esi,eax
c000b182:	eb 10                	jmp    c000b194 <timerHandler(unsigned int)+0xc8>
c000b184:	50                   	push   eax
c000b185:	50                   	push   eax
c000b186:	57                   	push   edi
c000b187:	68 60 fa 02 c0       	push   0xc002fa60
c000b18c:	e8 eb 6e 01 00       	call   c002207c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000b191:	8d 76 00             	lea    esi,[esi+0x0]
c000b194:	83 c4 10             	add    esp,0x10
c000b197:	90                   	nop
c000b198:	83 ec 0c             	sub    esp,0xc
c000b19b:	68 60 fa 02 c0       	push   0xc002fa60
c000b1a0:	e8 f7 6d 01 00       	call   c0021f9c <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000b1a5:	83 c4 10             	add    esp,0x10
c000b1a8:	84 c0                	test   al,al
c000b1aa:	75 18                	jne    c000b1c4 <timerHandler(unsigned int)+0xf8>
c000b1ac:	83 ec 0c             	sub    esp,0xc
c000b1af:	68 60 fa 02 c0       	push   0xc002fa60
c000b1b4:	e8 ff 6d 01 00       	call   c0021fb8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000b1b9:	83 c4 10             	add    esp,0x10
c000b1bc:	39 f0                	cmp    eax,esi
c000b1be:	0f 85 6c ff ff ff    	jne    c000b130 <timerHandler(unsigned int)+0x64>
c000b1c4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000b1c9:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000b1cc:	85 c0                	test   eax,eax
c000b1ce:	74 48                	je     c000b218 <timerHandler(unsigned int)+0x14c>
c000b1d0:	80 3d d8 d0 02 c0 00 	cmp    BYTE PTR ds:0xc002d0d8,0x0
c000b1d7:	74 3f                	je     c000b218 <timerHandler(unsigned int)+0x14c>
c000b1d9:	3d e8 03 00 00       	cmp    eax,0x3e8
c000b1de:	76 1c                	jbe    c000b1fc <timerHandler(unsigned int)+0x130>
c000b1e0:	83 ec 0c             	sub    esp,0xc
c000b1e3:	68 55 3b 02 c0       	push   0xc0023b55
c000b1e8:	e8 79 bd ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000b1ed:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000b1f2:	83 c4 10             	add    esp,0x10
c000b1f5:	c7 40 38 e8 03 00 00 	mov    DWORD PTR [eax+0x38],0x3e8
c000b1fc:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000b202:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c000b205:	89 c1                	mov    ecx,eax
c000b207:	29 d9                	sub    ecx,ebx
c000b209:	39 d8                	cmp    eax,ebx
c000b20b:	89 4a 38             	mov    DWORD PTR [edx+0x38],ecx
c000b20e:	77 08                	ja     c000b218 <timerHandler(unsigned int)+0x14c>
c000b210:	e8 b7 be 00 00       	call   c00170cc <schedule()>
c000b215:	8d 76 00             	lea    esi,[esi+0x0]
c000b218:	f0 ff 0d 50 fa 02 c0 	lock dec DWORD PTR ds:0xc002fa50
c000b21f:	83 3d 50 fa 02 c0 00 	cmp    DWORD PTR ds:0xc002fa50,0x0
c000b226:	75 04                	jne    c000b22c <timerHandler(unsigned int)+0x160>
c000b228:	fb                   	sti    
c000b229:	8d 76 00             	lea    esi,[esi+0x0]
c000b22c:	5b                   	pop    ebx
c000b22d:	5e                   	pop    esi
c000b22e:	5f                   	pop    edi
c000b22f:	c3                   	ret    

c000b230 <VCache::VCache(PhysicalDisk*)>:
c000b230:	53                   	push   ebx
c000b231:	83 ec 18             	sub    esp,0x18
c000b234:	ba fc 3b 02 c0       	mov    edx,0xc0023bfc
c000b239:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b23d:	89 10                	mov    DWORD PTR [eax],edx
c000b23f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b243:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000b24a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b24e:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000b255:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b259:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000b260:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000b267:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b26b:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000b272:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000b279:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b27d:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000b284:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b288:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000b28c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b290:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000b297:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000b29e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b2a2:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000b2a6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b2aa:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000b2ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b2b2:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000b2b6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b2ba:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000b2c1:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000b2c9:	83 ec 0c             	sub    esp,0xc
c000b2cc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b2d0:	e8 a7 48 00 00       	call   c000fb7c <malloc>
c000b2d5:	83 c4 10             	add    esp,0x10
c000b2d8:	89 c3                	mov    ebx,eax
c000b2da:	83 ec 0c             	sub    esp,0xc
c000b2dd:	53                   	push   ebx
c000b2de:	e8 8d 4b 00 00       	call   c000fe70 <Mutex::Mutex()>
c000b2e3:	83 c4 10             	add    esp,0x10
c000b2e6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b2ea:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000b2ed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b2f1:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000b2f5:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000b2f8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b2fc:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000b303:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b307:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000b30d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b311:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000b314:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b318:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000b31e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000b324:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b328:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000b32b:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000b32e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b332:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000b336:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b33a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000b340:	05 00 01 00 00       	add    eax,0x100
c000b345:	c1 e0 04             	shl    eax,0x4
c000b348:	83 ec 0c             	sub    esp,0xc
c000b34b:	50                   	push   eax
c000b34c:	e8 2b 48 00 00       	call   c000fb7c <malloc>
c000b351:	83 c4 10             	add    esp,0x10
c000b354:	89 c2                	mov    edx,eax
c000b356:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b35a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000b35d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b361:	c7 40 40 08 00 00 00 	mov    DWORD PTR [eax+0x40],0x8
c000b368:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b36c:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000b370:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b374:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000b37a:	89 d0                	mov    eax,edx
c000b37c:	c1 e0 02             	shl    eax,0x2
c000b37f:	01 d0                	add    eax,edx
c000b381:	c1 e0 04             	shl    eax,0x4
c000b384:	83 ec 0c             	sub    esp,0xc
c000b387:	50                   	push   eax
c000b388:	e8 ef 47 00 00       	call   c000fb7c <malloc>
c000b38d:	83 c4 10             	add    esp,0x10
c000b390:	89 c2                	mov    edx,eax
c000b392:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b396:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000b399:	90                   	nop
c000b39a:	83 c4 18             	add    esp,0x18
c000b39d:	5b                   	pop    ebx
c000b39e:	c3                   	ret    
c000b39f:	90                   	nop

c000b3a0 <VCache::invalidateReadBuffer()>:
c000b3a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3a4:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000b3aa:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000b3ae:	c3                   	ret    
c000b3af:	90                   	nop

c000b3b0 <VCache::writeWriteBuffer()>:
c000b3b0:	53                   	push   ebx
c000b3b1:	83 ec 08             	sub    esp,0x8
c000b3b4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b3b8:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000b3bc:	74 1e                	je     c000b3dc <VCache::writeWriteBuffer()+0x2c>
c000b3be:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000b3c1:	83 ec 0c             	sub    esp,0xc
c000b3c4:	8b 10                	mov    edx,DWORD PTR [eax]
c000b3c6:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000b3c9:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000b3cc:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000b3cf:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000b3d2:	50                   	push   eax
c000b3d3:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000b3d6:	83 c4 20             	add    esp,0x20
c000b3d9:	8d 76 00             	lea    esi,[esi+0x0]
c000b3dc:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000b3e3:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000b3ea:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000b3ee:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000b3f5:	83 c4 08             	add    esp,0x8
c000b3f8:	5b                   	pop    ebx
c000b3f9:	c3                   	ret    
c000b3fa:	66 90                	xchg   ax,ax

c000b3fc <VCache::~VCache()>:
c000b3fc:	83 ec 0c             	sub    esp,0xc
c000b3ff:	ba fc 3b 02 c0       	mov    edx,0xc0023bfc
c000b404:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b408:	89 10                	mov    DWORD PTR [eax],edx
c000b40a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b40e:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000b411:	0f b6 c0             	movzx  eax,al
c000b414:	85 c0                	test   eax,eax
c000b416:	74 10                	je     c000b428 <VCache::~VCache()+0x2c>
c000b418:	83 ec 0c             	sub    esp,0xc
c000b41b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b41f:	e8 8c ff ff ff       	call   c000b3b0 <VCache::writeWriteBuffer()>
c000b424:	83 c4 10             	add    esp,0x10
c000b427:	90                   	nop
c000b428:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b42c:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000b42f:	83 ec 0c             	sub    esp,0xc
c000b432:	50                   	push   eax
c000b433:	e8 54 47 00 00       	call   c000fb8c <free>
c000b438:	83 c4 10             	add    esp,0x10
c000b43b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b43f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000b442:	83 ec 0c             	sub    esp,0xc
c000b445:	50                   	push   eax
c000b446:	e8 41 47 00 00       	call   c000fb8c <free>
c000b44b:	83 c4 10             	add    esp,0x10
c000b44e:	90                   	nop
c000b44f:	83 c4 0c             	add    esp,0xc
c000b452:	c3                   	ret    
c000b453:	90                   	nop

c000b454 <VCache::~VCache()>:
c000b454:	83 ec 0c             	sub    esp,0xc
c000b457:	83 ec 0c             	sub    esp,0xc
c000b45a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b45e:	e8 99 ff ff ff       	call   c000b3fc <VCache::~VCache()>
c000b463:	83 c4 10             	add    esp,0x10
c000b466:	83 ec 08             	sub    esp,0x8
c000b469:	6a 44                	push   0x44
c000b46b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b46f:	e8 81 1e 00 00       	call   c000d2f5 <operator delete(void*, unsigned long)>
c000b474:	83 c4 10             	add    esp,0x10
c000b477:	83 c4 0c             	add    esp,0xc
c000b47a:	c3                   	ret    
c000b47b:	90                   	nop

c000b47c <VCache::write(unsigned long long, int, void*)>:
c000b47c:	55                   	push   ebp
c000b47d:	57                   	push   edi
c000b47e:	56                   	push   esi
c000b47f:	53                   	push   ebx
c000b480:	83 ec 1c             	sub    esp,0x1c
c000b483:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000b487:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000b48b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000b48f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000b493:	e8 44 b9 00 00       	call   c0016ddc <KeDisablePreemption()>
c000b498:	b9 00 10 00 00       	mov    ecx,0x1000
c000b49d:	50                   	push   eax
c000b49e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000b4a1:	0f af c3             	imul   eax,ebx
c000b4a4:	05 ff 0f 00 00       	add    eax,0xfff
c000b4a9:	99                   	cdq    
c000b4aa:	f7 f9                	idiv   ecx
c000b4ac:	50                   	push   eax
c000b4ad:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000b4b1:	ff 35 70 f2 02 c0    	push   DWORD PTR ds:0xc002f270
c000b4b7:	e8 dc 8b 00 00       	call   c0014098 <VAS::canLockPages(unsigned long, int)>
c000b4bc:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c000b4c0:	83 c4 10             	add    esp,0x10
c000b4c3:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000b4c8:	74 2a                	je     c000b4f4 <VCache::write(unsigned long long, int, void*)+0x78>
c000b4ca:	50                   	push   eax
c000b4cb:	b9 00 10 00 00       	mov    ecx,0x1000
c000b4d0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000b4d3:	0f af c3             	imul   eax,ebx
c000b4d6:	05 ff 0f 00 00       	add    eax,0xfff
c000b4db:	99                   	cdq    
c000b4dc:	f7 f9                	idiv   ecx
c000b4de:	50                   	push   eax
c000b4df:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000b4e3:	ff 35 70 f2 02 c0    	push   DWORD PTR ds:0xc002f270
c000b4e9:	e8 a4 8f 00 00       	call   c0014492 <VAS::lockPages(unsigned long, int)>
c000b4ee:	83 c4 10             	add    esp,0x10
c000b4f1:	8d 76 00             	lea    esi,[esi+0x0]
c000b4f4:	80 7d 3c 00          	cmp    BYTE PTR [ebp+0x3c],0x0
c000b4f8:	74 0e                	je     c000b508 <VCache::write(unsigned long long, int, void*)+0x8c>
c000b4fa:	83 ec 0c             	sub    esp,0xc
c000b4fd:	55                   	push   ebp
c000b4fe:	e8 9d fe ff ff       	call   c000b3a0 <VCache::invalidateReadBuffer()>
c000b503:	83 c4 10             	add    esp,0x10
c000b506:	66 90                	xchg   ax,ax
c000b508:	80 7d 2c 00          	cmp    BYTE PTR [ebp+0x2c],0x0
c000b50c:	74 72                	je     c000b580 <VCache::write(unsigned long long, int, void*)+0x104>
c000b50e:	8b 4d 24             	mov    ecx,DWORD PTR [ebp+0x24]
c000b511:	89 c8                	mov    eax,ecx
c000b513:	99                   	cdq    
c000b514:	03 45 1c             	add    eax,DWORD PTR [ebp+0x1c]
c000b517:	13 55 20             	adc    edx,DWORD PTR [ebp+0x20]
c000b51a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b51e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b522:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b526:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b52a:	31 f0                	xor    eax,esi
c000b52c:	31 fa                	xor    edx,edi
c000b52e:	09 d0                	or     eax,edx
c000b530:	75 42                	jne    c000b574 <VCache::write(unsigned long long, int, void*)+0xf8>
c000b532:	83 fb 01             	cmp    ebx,0x1
c000b535:	75 3d                	jne    c000b574 <VCache::write(unsigned long long, int, void*)+0xf8>
c000b537:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b53a:	89 cf                	mov    edi,ecx
c000b53c:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000b540:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000b546:	0f af f8             	imul   edi,eax
c000b549:	89 c1                	mov    ecx,eax
c000b54b:	03 7d 28             	add    edi,DWORD PTR [ebp+0x28]
c000b54e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b550:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c000b553:	40                   	inc    eax
c000b554:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c000b557:	83 f8 50             	cmp    eax,0x50
c000b55a:	0f 85 a8 00 00 00    	jne    c000b608 <VCache::write(unsigned long long, int, void*)+0x18c>
c000b560:	83 ec 0c             	sub    esp,0xc
c000b563:	55                   	push   ebp
c000b564:	e8 47 fe ff ff       	call   c000b3b0 <VCache::writeWriteBuffer()>
c000b569:	83 c4 10             	add    esp,0x10
c000b56c:	e9 97 00 00 00       	jmp    c000b608 <VCache::write(unsigned long long, int, void*)+0x18c>
c000b571:	8d 76 00             	lea    esi,[esi+0x0]
c000b574:	83 ec 0c             	sub    esp,0xc
c000b577:	55                   	push   ebp
c000b578:	e8 33 fe ff ff       	call   c000b3b0 <VCache::writeWriteBuffer()>
c000b57d:	83 c4 10             	add    esp,0x10
c000b580:	83 fb 4f             	cmp    ebx,0x4f
c000b583:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b586:	7f 20                	jg     c000b5a8 <VCache::write(unsigned long long, int, void*)+0x12c>
c000b588:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c000b58b:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000b58f:	89 7d 20             	mov    DWORD PTR [ebp+0x20],edi
c000b592:	8b 7d 28             	mov    edi,DWORD PTR [ebp+0x28]
c000b595:	89 5d 24             	mov    DWORD PTR [ebp+0x24],ebx
c000b598:	c6 45 2c 01          	mov    BYTE PTR [ebp+0x2c],0x1
c000b59c:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000b5a2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b5a4:	eb 62                	jmp    c000b608 <VCache::write(unsigned long long, int, void*)+0x18c>
c000b5a6:	66 90                	xchg   ax,ax
c000b5a8:	83 ec 0c             	sub    esp,0xc
c000b5ab:	8b 10                	mov    edx,DWORD PTR [eax]
c000b5ad:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000b5b1:	53                   	push   ebx
c000b5b2:	57                   	push   edi
c000b5b3:	56                   	push   esi
c000b5b4:	50                   	push   eax
c000b5b5:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000b5b8:	83 c4 20             	add    esp,0x20
c000b5bb:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000b5c0:	89 c6                	mov    esi,eax
c000b5c2:	74 28                	je     c000b5ec <VCache::write(unsigned long long, int, void*)+0x170>
c000b5c4:	52                   	push   edx
c000b5c5:	b9 00 10 00 00       	mov    ecx,0x1000
c000b5ca:	0f af 5d 0c          	imul   ebx,DWORD PTR [ebp+0xc]
c000b5ce:	8d 83 ff 0f 00 00    	lea    eax,[ebx+0xfff]
c000b5d4:	99                   	cdq    
c000b5d5:	f7 f9                	idiv   ecx
c000b5d7:	50                   	push   eax
c000b5d8:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000b5dc:	ff 35 70 f2 02 c0    	push   DWORD PTR ds:0xc002f270
c000b5e2:	e8 ed 8a 00 00       	call   c00140d4 <VAS::unlockPages(unsigned long, int)>
c000b5e7:	83 c4 10             	add    esp,0x10
c000b5ea:	66 90                	xchg   ax,ax
c000b5ec:	e8 13 b8 00 00       	call   c0016e04 <KeRestorePreemption()>
c000b5f1:	85 f6                	test   esi,esi
c000b5f3:	74 4b                	je     c000b640 <VCache::write(unsigned long long, int, void*)+0x1c4>
c000b5f5:	83 ec 0c             	sub    esp,0xc
c000b5f8:	68 b4 3b 02 c0       	push   0xc0023bb4
c000b5fd:	e8 64 b9 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000b602:	83 c4 10             	add    esp,0x10
c000b605:	eb 39                	jmp    c000b640 <VCache::write(unsigned long long, int, void*)+0x1c4>
c000b607:	90                   	nop
c000b608:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000b60d:	74 29                	je     c000b638 <VCache::write(unsigned long long, int, void*)+0x1bc>
c000b60f:	50                   	push   eax
c000b610:	b9 00 10 00 00       	mov    ecx,0x1000
c000b615:	0f af 5d 0c          	imul   ebx,DWORD PTR [ebp+0xc]
c000b619:	8d 83 ff 0f 00 00    	lea    eax,[ebx+0xfff]
c000b61f:	99                   	cdq    
c000b620:	f7 f9                	idiv   ecx
c000b622:	50                   	push   eax
c000b623:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000b627:	ff 35 70 f2 02 c0    	push   DWORD PTR ds:0xc002f270
c000b62d:	e8 a2 8a 00 00       	call   c00140d4 <VAS::unlockPages(unsigned long, int)>
c000b632:	83 c4 10             	add    esp,0x10
c000b635:	8d 76 00             	lea    esi,[esi+0x0]
c000b638:	e8 c7 b7 00 00       	call   c0016e04 <KeRestorePreemption()>
c000b63d:	31 f6                	xor    esi,esi
c000b63f:	90                   	nop
c000b640:	83 c4 1c             	add    esp,0x1c
c000b643:	89 f0                	mov    eax,esi
c000b645:	5b                   	pop    ebx
c000b646:	5e                   	pop    esi
c000b647:	5f                   	pop    edi
c000b648:	5d                   	pop    ebp
c000b649:	c3                   	ret    

c000b64a <VCache::read(unsigned long long, int, void*)>:
c000b64a:	55                   	push   ebp
c000b64b:	bd 00 10 00 00       	mov    ebp,0x1000
c000b650:	57                   	push   edi
c000b651:	56                   	push   esi
c000b652:	53                   	push   ebx
c000b653:	83 ec 2c             	sub    esp,0x2c
c000b656:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000b65a:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c000b65e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000b662:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c000b666:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b66a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b66e:	e8 69 b7 00 00       	call   c0016ddc <KeDisablePreemption()>
c000b673:	50                   	push   eax
c000b674:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000b677:	0f af c6             	imul   eax,esi
c000b67a:	05 ff 0f 00 00       	add    eax,0xfff
c000b67f:	99                   	cdq    
c000b680:	f7 fd                	idiv   ebp
c000b682:	50                   	push   eax
c000b683:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c000b687:	ff 35 70 f2 02 c0    	push   DWORD PTR ds:0xc002f270
c000b68d:	e8 06 8a 00 00       	call   c0014098 <VAS::canLockPages(unsigned long, int)>
c000b692:	83 c4 10             	add    esp,0x10
c000b695:	84 c0                	test   al,al
c000b697:	89 c7                	mov    edi,eax
c000b699:	74 25                	je     c000b6c0 <VCache::read(unsigned long long, int, void*)+0x76>
c000b69b:	50                   	push   eax
c000b69c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000b69f:	0f af c6             	imul   eax,esi
c000b6a2:	05 ff 0f 00 00       	add    eax,0xfff
c000b6a7:	99                   	cdq    
c000b6a8:	f7 fd                	idiv   ebp
c000b6aa:	50                   	push   eax
c000b6ab:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c000b6af:	ff 35 70 f2 02 c0    	push   DWORD PTR ds:0xc002f270
c000b6b5:	e8 d8 8d 00 00       	call   c0014492 <VAS::lockPages(unsigned long, int)>
c000b6ba:	83 c4 10             	add    esp,0x10
c000b6bd:	8d 76 00             	lea    esi,[esi+0x0]
c000b6c0:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000b6c4:	74 0e                	je     c000b6d4 <VCache::read(unsigned long long, int, void*)+0x8a>
c000b6c6:	83 ec 0c             	sub    esp,0xc
c000b6c9:	53                   	push   ebx
c000b6ca:	e8 e1 fc ff ff       	call   c000b3b0 <VCache::writeWriteBuffer()>
c000b6cf:	83 c4 10             	add    esp,0x10
c000b6d2:	66 90                	xchg   ax,ax
c000b6d4:	83 fe 01             	cmp    esi,0x1
c000b6d7:	0f 85 fb 00 00 00    	jne    c000b7d8 <VCache::read(unsigned long long, int, void*)+0x18e>
c000b6dd:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000b6e0:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c000b6e7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b6eb:	0f 85 e7 00 00 00    	jne    c000b7d8 <VCache::read(unsigned long long, int, void*)+0x18e>
c000b6f1:	8b 6b 40             	mov    ebp,DWORD PTR [ebx+0x40]
c000b6f4:	89 ee                	mov    esi,ebp
c000b6f6:	f7 de                	neg    esi
c000b6f8:	89 f0                	mov    eax,esi
c000b6fa:	c1 f8 1f             	sar    eax,0x1f
c000b6fd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b701:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000b705:	23 4c 24 0c          	and    ecx,DWORD PTR [esp+0xc]
c000b709:	23 74 24 08          	and    esi,DWORD PTR [esp+0x8]
c000b70d:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000b711:	89 ca                	mov    edx,ecx
c000b713:	89 f9                	mov    ecx,edi
c000b715:	0f b6 f9             	movzx  edi,cl
c000b718:	89 f0                	mov    eax,esi
c000b71a:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000b71e:	74 0c                	je     c000b72c <VCache::read(unsigned long long, int, void*)+0xe2>
c000b720:	39 53 34             	cmp    DWORD PTR [ebx+0x34],edx
c000b723:	75 07                	jne    c000b72c <VCache::read(unsigned long long, int, void*)+0xe2>
c000b725:	39 73 30             	cmp    DWORD PTR [ebx+0x30],esi
c000b728:	74 56                	je     c000b780 <VCache::read(unsigned long long, int, void*)+0x136>
c000b72a:	66 90                	xchg   ax,ax
c000b72c:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c000b730:	83 ec 0c             	sub    esp,0xc
c000b733:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000b736:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000b73a:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000b73d:	8b 37                	mov    esi,DWORD PTR [edi]
c000b73f:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000b742:	55                   	push   ebp
c000b743:	52                   	push   edx
c000b744:	50                   	push   eax
c000b745:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b749:	ff 56 28             	call   DWORD PTR [esi+0x28]
c000b74c:	83 c4 20             	add    esp,0x20
c000b74f:	85 c0                	test   eax,eax
c000b751:	89 c5                	mov    ebp,eax
c000b753:	74 2b                	je     c000b780 <VCache::read(unsigned long long, int, void*)+0x136>
c000b755:	83 ec 0c             	sub    esp,0xc
c000b758:	68 cc 3b 02 c0       	push   0xc0023bcc
c000b75d:	e8 04 b8 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000b762:	83 c4 10             	add    esp,0x10
c000b765:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000b76a:	0f 84 bc 00 00 00    	je     c000b82c <VCache::read(unsigned long long, int, void*)+0x1e2>
c000b770:	56                   	push   esi
c000b771:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000b774:	05 ff 0f 00 00       	add    eax,0xfff
c000b779:	e9 92 00 00 00       	jmp    c000b810 <VCache::read(unsigned long long, int, void*)+0x1c6>
c000b77e:	66 90                	xchg   ax,ax
c000b780:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000b783:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000b787:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000b78d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b790:	8d 70 ff             	lea    esi,[eax-0x1]
c000b793:	23 74 24 08          	and    esi,DWORD PTR [esp+0x8]
c000b797:	0f af f1             	imul   esi,ecx
c000b79a:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c000b79d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b79f:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000b7a4:	74 26                	je     c000b7cc <VCache::read(unsigned long long, int, void*)+0x182>
c000b7a6:	51                   	push   ecx
c000b7a7:	b9 00 10 00 00       	mov    ecx,0x1000
c000b7ac:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000b7af:	05 ff 0f 00 00       	add    eax,0xfff
c000b7b4:	99                   	cdq    
c000b7b5:	f7 f9                	idiv   ecx
c000b7b7:	50                   	push   eax
c000b7b8:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c000b7bc:	ff 35 70 f2 02 c0    	push   DWORD PTR ds:0xc002f270
c000b7c2:	e8 0d 89 00 00       	call   c00140d4 <VAS::unlockPages(unsigned long, int)>
c000b7c7:	83 c4 10             	add    esp,0x10
c000b7ca:	66 90                	xchg   ax,ax
c000b7cc:	e8 33 b6 00 00       	call   c0016e04 <KeRestorePreemption()>
c000b7d1:	31 ed                	xor    ebp,ebp
c000b7d3:	eb 5f                	jmp    c000b834 <VCache::read(unsigned long long, int, void*)+0x1ea>
c000b7d5:	8d 76 00             	lea    esi,[esi+0x0]
c000b7d8:	83 ec 0c             	sub    esp,0xc
c000b7db:	53                   	push   ebx
c000b7dc:	e8 bf fb ff ff       	call   c000b3a0 <VCache::invalidateReadBuffer()>
c000b7e1:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000b7e4:	5a                   	pop    edx
c000b7e5:	8b 10                	mov    edx,DWORD PTR [eax]
c000b7e7:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000b7eb:	56                   	push   esi
c000b7ec:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b7f0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b7f4:	50                   	push   eax
c000b7f5:	ff 52 28             	call   DWORD PTR [edx+0x28]
c000b7f8:	83 c4 20             	add    esp,0x20
c000b7fb:	89 c5                	mov    ebp,eax
c000b7fd:	89 f8                	mov    eax,edi
c000b7ff:	84 c0                	test   al,al
c000b801:	74 29                	je     c000b82c <VCache::read(unsigned long long, int, void*)+0x1e2>
c000b803:	50                   	push   eax
c000b804:	0f af 73 0c          	imul   esi,DWORD PTR [ebx+0xc]
c000b808:	8d 86 ff 0f 00 00    	lea    eax,[esi+0xfff]
c000b80e:	66 90                	xchg   ax,ax
c000b810:	b9 00 10 00 00       	mov    ecx,0x1000
c000b815:	99                   	cdq    
c000b816:	f7 f9                	idiv   ecx
c000b818:	50                   	push   eax
c000b819:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c000b81d:	ff 35 70 f2 02 c0    	push   DWORD PTR ds:0xc002f270
c000b823:	e8 ac 88 00 00       	call   c00140d4 <VAS::unlockPages(unsigned long, int)>
c000b828:	83 c4 10             	add    esp,0x10
c000b82b:	90                   	nop
c000b82c:	e8 d3 b5 00 00       	call   c0016e04 <KeRestorePreemption()>
c000b831:	8d 76 00             	lea    esi,[esi+0x0]
c000b834:	83 c4 2c             	add    esp,0x2c
c000b837:	89 e8                	mov    eax,ebp
c000b839:	5b                   	pop    ebx
c000b83a:	5e                   	pop    esi
c000b83b:	5f                   	pop    edi
c000b83c:	5d                   	pop    ebp
c000b83d:	c3                   	ret    

c000b83e <Video::putrect(int, int, int, int, unsigned int)>:
c000b83e:	55                   	push   ebp
c000b83f:	57                   	push   edi
c000b840:	56                   	push   esi
c000b841:	53                   	push   ebx
c000b842:	83 ec 1c             	sub    esp,0x1c
c000b845:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000b849:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b84d:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000b851:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000b855:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000b859:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b85d:	01 df                	add    edi,ebx
c000b85f:	39 fb                	cmp    ebx,edi
c000b861:	7d 1f                	jge    c000b882 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000b863:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000b867:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000b86b:	7d 12                	jge    c000b87f <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000b86d:	8b 16                	mov    edx,DWORD PTR [esi]
c000b86f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b873:	53                   	push   ebx
c000b874:	55                   	push   ebp
c000b875:	45                   	inc    ebp
c000b876:	56                   	push   esi
c000b877:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000b87a:	83 c4 10             	add    esp,0x10
c000b87d:	eb e8                	jmp    c000b867 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000b87f:	43                   	inc    ebx
c000b880:	eb dd                	jmp    c000b85f <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000b882:	83 c4 1c             	add    esp,0x1c
c000b885:	5b                   	pop    ebx
c000b886:	5e                   	pop    esi
c000b887:	5f                   	pop    edi
c000b888:	5d                   	pop    ebp
c000b889:	c3                   	ret    

c000b88a <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000b88a:	55                   	push   ebp
c000b88b:	57                   	push   edi
c000b88c:	31 ff                	xor    edi,edi
c000b88e:	56                   	push   esi
c000b88f:	53                   	push   ebx
c000b890:	83 ec 1c             	sub    esp,0x1c
c000b893:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000b897:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000b89b:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000b8a2:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000b8a7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b8ab:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000b8af:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000b8b3:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000b8b6:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000b8ba:	01 f9                	add    ecx,edi
c000b8bc:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000b8c0:	7d 2f                	jge    c000b8f1 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000b8c2:	31 f6                	xor    esi,esi
c000b8c4:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000b8c8:	01 f2                	add    edx,esi
c000b8ca:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000b8ce:	7d 1a                	jge    c000b8ea <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000b8d0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000b8d3:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000b8d6:	46                   	inc    esi
c000b8d7:	51                   	push   ecx
c000b8d8:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000b8dc:	52                   	push   edx
c000b8dd:	55                   	push   ebp
c000b8de:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000b8e1:	83 c4 10             	add    esp,0x10
c000b8e4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000b8e8:	eb da                	jmp    c000b8c4 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000b8ea:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000b8ee:	47                   	inc    edi
c000b8ef:	eb c5                	jmp    c000b8b6 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000b8f1:	83 c4 1c             	add    esp,0x1c
c000b8f4:	5b                   	pop    ebx
c000b8f5:	5e                   	pop    esi
c000b8f6:	5f                   	pop    edi
c000b8f7:	5d                   	pop    ebp
c000b8f8:	c3                   	ret    
c000b8f9:	90                   	nop

c000b8fa <Video::blit(unsigned int*, int, int, int, int)>:
c000b8fa:	55                   	push   ebp
c000b8fb:	ba 00 00 00 00       	mov    edx,0x0
c000b900:	57                   	push   edi
c000b901:	56                   	push   esi
c000b902:	53                   	push   ebx
c000b903:	83 ec 1c             	sub    esp,0x1c
c000b906:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000b90a:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000b90e:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000b912:	85 c0                	test   eax,eax
c000b914:	0f 49 d0             	cmovns edx,eax
c000b917:	8d 1c 95 00 00 00 00 	lea    ebx,[edx*4+0x0]
c000b91e:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000b922:	89 eb                	mov    ebx,ebp
c000b924:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000b928:	01 ea                	add    edx,ebp
c000b92a:	39 da                	cmp    edx,ebx
c000b92c:	7e 54                	jle    c000b982 <Video::blit(unsigned int*, int, int, int, int)+0x88>
c000b92e:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000b934:	7c 4c                	jl     c000b982 <Video::blit(unsigned int*, int, int, int, int)+0x88>
c000b936:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000b93a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000b93e:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000b942:	01 c1                	add    ecx,eax
c000b944:	39 f9                	cmp    ecx,edi
c000b946:	7e 2f                	jle    c000b977 <Video::blit(unsigned int*, int, int, int, int)+0x7d>
c000b948:	83 c2 04             	add    edx,0x4
c000b94b:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000b951:	7c 21                	jl     c000b974 <Video::blit(unsigned int*, int, int, int, int)+0x7a>
c000b953:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000b957:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000b959:	ff 72 fc             	push   DWORD PTR [edx-0x4]
c000b95c:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000b960:	55                   	push   ebp
c000b961:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000b965:	56                   	push   esi
c000b966:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000b969:	83 c4 10             	add    esp,0x10
c000b96c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000b970:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b974:	47                   	inc    edi
c000b975:	eb c7                	jmp    c000b93e <Video::blit(unsigned int*, int, int, int, int)+0x44>
c000b977:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000b97b:	43                   	inc    ebx
c000b97c:	01 7c 24 34          	add    DWORD PTR [esp+0x34],edi
c000b980:	eb a2                	jmp    c000b924 <Video::blit(unsigned int*, int, int, int, int)+0x2a>
c000b982:	83 c4 1c             	add    esp,0x1c
c000b985:	5b                   	pop    ebx
c000b986:	5e                   	pop    esi
c000b987:	5f                   	pop    edi
c000b988:	5d                   	pop    ebp
c000b989:	c3                   	ret    

c000b98a <Video::clearScreen(unsigned int)>:
c000b98a:	57                   	push   edi
c000b98b:	56                   	push   esi
c000b98c:	53                   	push   ebx
c000b98d:	31 db                	xor    ebx,ebx
c000b98f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b993:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000b999:	7e 1f                	jle    c000b9ba <Video::clearScreen(unsigned int)+0x30>
c000b99b:	31 ff                	xor    edi,edi
c000b99d:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000b9a3:	7e 12                	jle    c000b9b7 <Video::clearScreen(unsigned int)+0x2d>
c000b9a5:	8b 06                	mov    eax,DWORD PTR [esi]
c000b9a7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b9ab:	53                   	push   ebx
c000b9ac:	57                   	push   edi
c000b9ad:	47                   	inc    edi
c000b9ae:	56                   	push   esi
c000b9af:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000b9b2:	83 c4 10             	add    esp,0x10
c000b9b5:	eb e6                	jmp    c000b99d <Video::clearScreen(unsigned int)+0x13>
c000b9b7:	43                   	inc    ebx
c000b9b8:	eb d9                	jmp    c000b993 <Video::clearScreen(unsigned int)+0x9>
c000b9ba:	5b                   	pop    ebx
c000b9bb:	5e                   	pop    esi
c000b9bc:	5f                   	pop    edi
c000b9bd:	c3                   	ret    

c000b9be <Video::putpixel(int, int, unsigned int)>:
c000b9be:	c7 44 24 04 04 3c 02 c0 	mov    DWORD PTR [esp+0x4],0xc0023c04
c000b9c6:	e9 bf 44 00 00       	jmp    c000fe8a <KePanic(char const*)>
c000b9cb:	90                   	nop

c000b9cc <Video::readPixelApprox(int, int)>:
c000b9cc:	83 ec 18             	sub    esp,0x18
c000b9cf:	68 25 3c 02 c0       	push   0xc0023c25
c000b9d4:	e8 b1 44 00 00       	call   c000fe8a <KePanic(char const*)>
c000b9d9:	31 c0                	xor    eax,eax
c000b9db:	83 c4 1c             	add    esp,0x1c
c000b9de:	c3                   	ret    
c000b9df:	90                   	nop

c000b9e0 <Video::Video(char const*)>:
c000b9e0:	83 ec 0c             	sub    esp,0xc
c000b9e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b9e7:	83 ec 08             	sub    esp,0x8
c000b9ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b9ee:	50                   	push   eax
c000b9ef:	e8 64 e1 ff ff       	call   c0009b58 <Device::Device(char const*)>
c000b9f4:	83 c4 10             	add    esp,0x10
c000b9f7:	ba c8 3c 02 c0       	mov    edx,0xc0023cc8
c000b9fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ba00:	89 10                	mov    DWORD PTR [eax],edx
c000ba02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ba06:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000ba10:	90                   	nop
c000ba11:	83 c4 0c             	add    esp,0xc
c000ba14:	c3                   	ret    
c000ba15:	90                   	nop

c000ba16 <Video::~Video()>:
c000ba16:	83 ec 0c             	sub    esp,0xc
c000ba19:	ba c8 3c 02 c0       	mov    edx,0xc0023cc8
c000ba1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ba22:	89 10                	mov    DWORD PTR [eax],edx
c000ba24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ba28:	83 ec 0c             	sub    esp,0xc
c000ba2b:	50                   	push   eax
c000ba2c:	e8 c7 de ff ff       	call   c00098f8 <Device::~Device()>
c000ba31:	83 c4 10             	add    esp,0x10
c000ba34:	90                   	nop
c000ba35:	83 c4 0c             	add    esp,0xc
c000ba38:	c3                   	ret    
c000ba39:	90                   	nop

c000ba3a <Video::~Video()>:
c000ba3a:	83 ec 0c             	sub    esp,0xc
c000ba3d:	83 ec 0c             	sub    esp,0xc
c000ba40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba44:	e8 cd ff ff ff       	call   c000ba16 <Video::~Video()>
c000ba49:	83 c4 10             	add    esp,0x10
c000ba4c:	83 ec 08             	sub    esp,0x8
c000ba4f:	68 64 01 00 00       	push   0x164
c000ba54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba58:	e8 98 18 00 00       	call   c000d2f5 <operator delete(void*, unsigned long)>
c000ba5d:	83 c4 10             	add    esp,0x10
c000ba60:	83 c4 0c             	add    esp,0xc
c000ba63:	c3                   	ret    

c000ba64 <Video::isMonochrome()>:
c000ba64:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ba68:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000ba6e:	c3                   	ret    
c000ba6f:	90                   	nop

c000ba70 <Video::getWidth()>:
c000ba70:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ba74:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000ba7a:	c3                   	ret    
c000ba7b:	90                   	nop

c000ba7c <Video::getHeight()>:
c000ba7c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ba80:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000ba86:	c3                   	ret    
c000ba87:	90                   	nop

c000ba88 <Video::drawCursor(int, int, unsigned int*, int)>:
c000ba88:	55                   	push   ebp
c000ba89:	57                   	push   edi
c000ba8a:	56                   	push   esi
c000ba8b:	53                   	push   ebx
c000ba8c:	83 ec 2c             	sub    esp,0x2c
c000ba8f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000ba93:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000ba97:	83 f8 01             	cmp    eax,0x1
c000ba9a:	19 c9                	sbb    ecx,ecx
c000ba9c:	31 db                	xor    ebx,ebx
c000ba9e:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000baa2:	89 ce                	mov    esi,ecx
c000baa4:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000baac:	f7 d6                	not    esi
c000baae:	81 e6 ff ff ff 00    	and    esi,0xffffff
c000bab4:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000bab8:	01 d8                	add    eax,ebx
c000baba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000babe:	57                   	push   edi
c000babf:	e8 b8 ff ff ff       	call   c000ba7c <Video::getHeight()>
c000bac4:	59                   	pop    ecx
c000bac5:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000bac9:	7e 70                	jle    c000bb3b <Video::drawCursor(int, int, unsigned int*, int)+0xb3>
c000bacb:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000bacf:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c000bad3:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000bad6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bada:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000bade:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000bae5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bae9:	89 e8                	mov    eax,ebp
c000baeb:	83 c0 20             	add    eax,0x20
c000baee:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000baf2:	57                   	push   edi
c000baf3:	e8 78 ff ff ff       	call   c000ba70 <Video::getWidth()>
c000baf8:	5a                   	pop    edx
c000baf9:	39 c5                	cmp    ebp,eax
c000bafb:	7d 34                	jge    c000bb31 <Video::drawCursor(int, int, unsigned int*, int)+0xa9>
c000bafd:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000bb02:	74 05                	je     c000bb09 <Video::drawCursor(int, int, unsigned int*, int)+0x81>
c000bb04:	8b 07                	mov    eax,DWORD PTR [edi]
c000bb06:	56                   	push   esi
c000bb07:	eb 0d                	jmp    c000bb16 <Video::drawCursor(int, int, unsigned int*, int)+0x8e>
c000bb09:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000bb0e:	74 12                	je     c000bb22 <Video::drawCursor(int, int, unsigned int*, int)+0x9a>
c000bb10:	8b 07                	mov    eax,DWORD PTR [edi]
c000bb12:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bb16:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000bb1a:	55                   	push   ebp
c000bb1b:	57                   	push   edi
c000bb1c:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000bb1f:	83 c4 10             	add    esp,0x10
c000bb22:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000bb26:	45                   	inc    ebp
c000bb27:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000bb2b:	3b 6c 24 1c          	cmp    ebp,DWORD PTR [esp+0x1c]
c000bb2f:	75 c1                	jne    c000baf2 <Video::drawCursor(int, int, unsigned int*, int)+0x6a>
c000bb31:	43                   	inc    ebx
c000bb32:	83 fb 20             	cmp    ebx,0x20
c000bb35:	0f 85 79 ff ff ff    	jne    c000bab4 <Video::drawCursor(int, int, unsigned int*, int)+0x2c>
c000bb3b:	83 c4 2c             	add    esp,0x2c
c000bb3e:	5b                   	pop    ebx
c000bb3f:	5e                   	pop    esi
c000bb40:	5f                   	pop    edi
c000bb41:	5d                   	pop    ebp
c000bb42:	c3                   	ret    
c000bb43:	90                   	nop

c000bb44 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000bb44:	55                   	push   ebp
c000bb45:	57                   	push   edi
c000bb46:	56                   	push   esi
c000bb47:	53                   	push   ebx
c000bb48:	83 ec 48             	sub    esp,0x48
c000bb4b:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000bb4f:	0f b6 43 0d          	movzx  eax,BYTE PTR [ebx+0xd]
c000bb53:	0f b6 53 0c          	movzx  edx,BYTE PTR [ebx+0xc]
c000bb57:	c1 e0 08             	shl    eax,0x8
c000bb5a:	01 d0                	add    eax,edx
c000bb5c:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c000bb60:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bb64:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c000bb68:	c1 e0 08             	shl    eax,0x8
c000bb6b:	01 d0                	add    eax,edx
c000bb6d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bb71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb75:	0f af 44 24 14       	imul   eax,DWORD PTR [esp+0x14]
c000bb7a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bb7e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bb82:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000bb89:	50                   	push   eax
c000bb8a:	e8 ed 3f 00 00       	call   c000fb7c <malloc>
c000bb8f:	83 c4 10             	add    esp,0x10
c000bb92:	85 c0                	test   eax,eax
c000bb94:	89 c5                	mov    ebp,eax
c000bb96:	75 10                	jne    c000bba8 <Video::tgaParse(unsigned char*, int, int*, int*)+0x64>
c000bb98:	83 ec 0c             	sub    esp,0xc
c000bb9b:	68 50 3c 02 c0       	push   0xc0023c50
c000bba0:	e8 e5 42 00 00       	call   c000fe8a <KePanic(char const*)>
c000bba5:	83 c4 10             	add    esp,0x10
c000bba8:	52                   	push   edx
c000bba9:	bf 12 00 00 00       	mov    edi,0x12
c000bbae:	52                   	push   edx
c000bbaf:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000bbb3:	50                   	push   eax
c000bbb4:	68 60 3c 02 c0       	push   0xc0023c60
c000bbb9:	e8 a8 b3 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000bbbe:	8a 43 11             	mov    al,BYTE PTR [ebx+0x11]
c000bbc1:	83 e0 20             	and    eax,0x20
c000bbc4:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c000bbc8:	85 c0                	test   eax,eax
c000bbca:	59                   	pop    ecx
c000bbcb:	0f 94 c0             	sete   al
c000bbce:	0f b6 c0             	movzx  eax,al
c000bbd1:	5e                   	pop    esi
c000bbd2:	50                   	push   eax
c000bbd3:	68 6a 3c 02 c0       	push   0xc0023c6a
c000bbd8:	e8 89 b3 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000bbdd:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000bbe1:	83 c4 10             	add    esp,0x10
c000bbe4:	85 c0                	test   eax,eax
c000bbe6:	89 c2                	mov    edx,eax
c000bbe8:	74 11                	je     c000bbfb <Video::tgaParse(unsigned char*, int, int*, int*)+0xb7>
c000bbea:	0f b6 7b 07          	movzx  edi,BYTE PTR [ebx+0x7]
c000bbee:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000bbf2:	c1 ff 03             	sar    edi,0x3
c000bbf5:	0f af f9             	imul   edi,ecx
c000bbf8:	83 c7 12             	add    edi,0x12
c000bbfb:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c000bc00:	74 07                	je     c000bc09 <Video::tgaParse(unsigned char*, int, int*, int*)+0xc5>
c000bc02:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000bc07:	75 12                	jne    c000bc1b <Video::tgaParse(unsigned char*, int, int*, int*)+0xd7>
c000bc09:	83 ec 0c             	sub    esp,0xc
c000bc0c:	68 78 3c 02 c0       	push   0xc0023c78
c000bc11:	e8 50 b3 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000bc16:	e9 aa 02 00 00       	jmp    c000bec5 <Video::tgaParse(unsigned char*, int, int*, int*)+0x381>
c000bc1b:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000bc1f:	83 f9 02             	cmp    ecx,0x2
c000bc22:	74 0e                	je     c000bc32 <Video::tgaParse(unsigned char*, int, int*, int*)+0xee>
c000bc24:	83 f9 0a             	cmp    ecx,0xa
c000bc27:	0f 84 d1 00 00 00    	je     c000bcfe <Video::tgaParse(unsigned char*, int, int*, int*)+0x1ba>
c000bc2d:	e9 7e 02 00 00       	jmp    c000beb0 <Video::tgaParse(unsigned char*, int, int*, int*)+0x36c>
c000bc32:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000bc37:	75 0e                	jne    c000bc47 <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c000bc39:	84 d2                	test   dl,dl
c000bc3b:	75 0a                	jne    c000bc47 <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c000bc3d:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000bc40:	83 e8 18             	sub    eax,0x18
c000bc43:	a8 f7                	test   al,0xf7
c000bc45:	74 0d                	je     c000bc54 <Video::tgaParse(unsigned char*, int, int*, int*)+0x110>
c000bc47:	83 ec 0c             	sub    esp,0xc
c000bc4a:	68 8d 3c 02 c0       	push   0xc0023c8d
c000bc4f:	e9 64 02 00 00       	jmp    c000beb8 <Video::tgaParse(unsigned char*, int, int*, int*)+0x374>
c000bc54:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bc5c:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c000bc61:	31 c0                	xor    eax,eax
c000bc63:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000bc67:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000bc6f:	89 c6                	mov    esi,eax
c000bc71:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000bc76:	75 15                	jne    c000bc8d <Video::tgaParse(unsigned char*, int, int*, int*)+0x149>
c000bc78:	99                   	cdq    
c000bc79:	f7 7c 24 04          	idiv   DWORD PTR [esp+0x4]
c000bc7d:	85 d2                	test   edx,edx
c000bc7f:	75 0c                	jne    c000bc8d <Video::tgaParse(unsigned char*, int, int*, int*)+0x149>
c000bc81:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000bc85:	29 c6                	sub    esi,eax
c000bc87:	4e                   	dec    esi
c000bc88:	0f af 74 24 04       	imul   esi,DWORD PTR [esp+0x4]
c000bc8d:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000bc91:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000bc99:	75 0c                	jne    c000bca7 <Video::tgaParse(unsigned char*, int, int*, int*)+0x163>
c000bc9b:	0f b6 54 3b 03       	movzx  edx,BYTE PTR [ebx+edi*1+0x3]
c000bca0:	c1 e2 18             	shl    edx,0x18
c000bca3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bca7:	0f b6 4c 3b 02       	movzx  ecx,BYTE PTR [ebx+edi*1+0x2]
c000bcac:	8d 46 01             	lea    eax,[esi+0x1]
c000bcaf:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c000bcb3:	c1 e1 10             	shl    ecx,0x10
c000bcb6:	89 ca                	mov    edx,ecx
c000bcb8:	0f b6 4c 3b 01       	movzx  ecx,BYTE PTR [ebx+edi*1+0x1]
c000bcbd:	c1 e1 08             	shl    ecx,0x8
c000bcc0:	09 d1                	or     ecx,edx
c000bcc2:	0f b6 14 3b          	movzx  edx,BYTE PTR [ebx+edi*1]
c000bcc6:	09 d1                	or     ecx,edx
c000bcc8:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c000bccc:	89 4c b5 00          	mov    DWORD PTR [ebp+esi*4+0x0],ecx
c000bcd0:	0f b6 53 10          	movzx  edx,BYTE PTR [ebx+0x10]
c000bcd4:	c1 fa 03             	sar    edx,0x3
c000bcd7:	01 d7                	add    edi,edx
c000bcd9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bcdd:	39 54 24 04          	cmp    DWORD PTR [esp+0x4],edx
c000bce1:	7e 04                	jle    c000bce7 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1a3>
c000bce3:	89 c6                	mov    esi,eax
c000bce5:	eb 8a                	jmp    c000bc71 <Video::tgaParse(unsigned char*, int, int*, int*)+0x12d>
c000bce7:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000bceb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000bcef:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c000bcf3:	0f 8f 6e ff ff ff    	jg     c000bc67 <Video::tgaParse(unsigned char*, int, int*, int*)+0x123>
c000bcf9:	e9 ce 01 00 00       	jmp    c000becc <Video::tgaParse(unsigned char*, int, int*, int*)+0x388>
c000bcfe:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000bd03:	75 0e                	jne    c000bd13 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1cf>
c000bd05:	85 c0                	test   eax,eax
c000bd07:	75 0a                	jne    c000bd13 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1cf>
c000bd09:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000bd0c:	83 e8 18             	sub    eax,0x18
c000bd0f:	a8 f7                	test   al,0xf7
c000bd11:	74 0d                	je     c000bd20 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1dc>
c000bd13:	83 ec 0c             	sub    esp,0xc
c000bd16:	68 9b 3c 02 c0       	push   0xc0023c9b
c000bd1b:	e9 98 01 00 00       	jmp    c000beb8 <Video::tgaParse(unsigned char*, int, int*, int*)+0x374>
c000bd20:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000bd28:	31 c9                	xor    ecx,ecx
c000bd2a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000bd32:	3b 7c 24 58          	cmp    edi,DWORD PTR [esp+0x58]
c000bd36:	0f 8d 90 01 00 00    	jge    c000becc <Video::tgaParse(unsigned char*, int, int*, int*)+0x388>
c000bd3c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000bd40:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c000bd44:	0f 8e 82 01 00 00    	jle    c000becc <Video::tgaParse(unsigned char*, int, int*, int*)+0x388>
c000bd4a:	0f b6 14 3b          	movzx  edx,BYTE PTR [ebx+edi*1]
c000bd4e:	8d 77 01             	lea    esi,[edi+0x1]
c000bd51:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bd55:	83 fa 7f             	cmp    edx,0x7f
c000bd58:	89 d0                	mov    eax,edx
c000bd5a:	0f 8e a3 00 00 00    	jle    c000be03 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2bf>
c000bd60:	83 e0 7f             	and    eax,0x7f
c000bd63:	31 d2                	xor    edx,edx
c000bd65:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bd69:	40                   	inc    eax
c000bd6a:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000bd6e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000bd72:	75 08                	jne    c000bd7c <Video::tgaParse(unsigned char*, int, int*, int*)+0x238>
c000bd74:	0f b6 54 3b 04       	movzx  edx,BYTE PTR [ebx+edi*1+0x4]
c000bd79:	c1 e2 18             	shl    edx,0x18
c000bd7c:	0f b6 44 3b 03       	movzx  eax,BYTE PTR [ebx+edi*1+0x3]
c000bd81:	c1 e0 10             	shl    eax,0x10
c000bd84:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000bd88:	0f b6 44 3b 02       	movzx  eax,BYTE PTR [ebx+edi*1+0x2]
c000bd8d:	0f b6 3c 33          	movzx  edi,BYTE PTR [ebx+esi*1]
c000bd91:	c1 e0 08             	shl    eax,0x8
c000bd94:	0b 44 24 24          	or     eax,DWORD PTR [esp+0x24]
c000bd98:	09 f8                	or     eax,edi
c000bd9a:	31 ff                	xor    edi,edi
c000bd9c:	09 d0                	or     eax,edx
c000bd9e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000bda2:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c000bda7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bdab:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000bdb0:	75 1d                	jne    c000bdcf <Video::tgaParse(unsigned char*, int, int*, int*)+0x28b>
c000bdb2:	89 c8                	mov    eax,ecx
c000bdb4:	99                   	cdq    
c000bdb5:	f7 7c 24 04          	idiv   DWORD PTR [esp+0x4]
c000bdb9:	85 d2                	test   edx,edx
c000bdbb:	75 12                	jne    c000bdcf <Video::tgaParse(unsigned char*, int, int*, int*)+0x28b>
c000bdbd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000bdc1:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c000bdc5:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000bdc9:	49                   	dec    ecx
c000bdca:	0f af 4c 24 04       	imul   ecx,DWORD PTR [esp+0x4]
c000bdcf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000bdd3:	8d 51 01             	lea    edx,[ecx+0x1]
c000bdd6:	39 7c 24 18          	cmp    DWORD PTR [esp+0x18],edi
c000bdda:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c000bdde:	8d 47 01             	lea    eax,[edi+0x1]
c000bde1:	7e 06                	jle    c000bde9 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2a5>
c000bde3:	89 c7                	mov    edi,eax
c000bde5:	89 d1                	mov    ecx,edx
c000bde7:	eb c2                	jmp    c000bdab <Video::tgaParse(unsigned char*, int, int*, int*)+0x267>
c000bde9:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000bded:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000bdf1:	01 7c 24 10          	add    DWORD PTR [esp+0x10],edi
c000bdf5:	c1 f8 03             	sar    eax,0x3
c000bdf8:	01 c6                	add    esi,eax
c000bdfa:	89 d1                	mov    ecx,edx
c000bdfc:	89 f7                	mov    edi,esi
c000bdfe:	e9 2f ff ff ff       	jmp    c000bd32 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1ee>
c000be03:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000be0b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000be0f:	40                   	inc    eax
c000be10:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be14:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c000be19:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000be1d:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c000be22:	75 1d                	jne    c000be41 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2fd>
c000be24:	89 c8                	mov    eax,ecx
c000be26:	99                   	cdq    
c000be27:	f7 7c 24 04          	idiv   DWORD PTR [esp+0x4]
c000be2b:	85 d2                	test   edx,edx
c000be2d:	75 12                	jne    c000be41 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2fd>
c000be2f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000be33:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c000be37:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000be3b:	49                   	dec    ecx
c000be3c:	0f af 4c 24 04       	imul   ecx,DWORD PTR [esp+0x4]
c000be41:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000be45:	c7 44 24 24 00 00 00 ff 	mov    DWORD PTR [esp+0x24],0xff000000
c000be4d:	75 0c                	jne    c000be5b <Video::tgaParse(unsigned char*, int, int*, int*)+0x317>
c000be4f:	0f b6 7c 33 03       	movzx  edi,BYTE PTR [ebx+esi*1+0x3]
c000be54:	c1 e7 18             	shl    edi,0x18
c000be57:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000be5b:	0f b6 44 33 02       	movzx  eax,BYTE PTR [ebx+esi*1+0x2]
c000be60:	8d 51 01             	lea    edx,[ecx+0x1]
c000be63:	c1 e0 10             	shl    eax,0x10
c000be66:	89 c7                	mov    edi,eax
c000be68:	0f b6 44 33 01       	movzx  eax,BYTE PTR [ebx+esi*1+0x1]
c000be6d:	c1 e0 08             	shl    eax,0x8
c000be70:	09 f8                	or     eax,edi
c000be72:	0f b6 3c 33          	movzx  edi,BYTE PTR [ebx+esi*1]
c000be76:	09 f8                	or     eax,edi
c000be78:	0b 44 24 24          	or     eax,DWORD PTR [esp+0x24]
c000be7c:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c000be80:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000be84:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000be88:	c1 f8 03             	sar    eax,0x3
c000be8b:	01 c6                	add    esi,eax
c000be8d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000be91:	40                   	inc    eax
c000be92:	39 4c 24 18          	cmp    DWORD PTR [esp+0x18],ecx
c000be96:	7e 0b                	jle    c000bea3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x35f>
c000be98:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000be9c:	89 d1                	mov    ecx,edx
c000be9e:	e9 7a ff ff ff       	jmp    c000be1d <Video::tgaParse(unsigned char*, int, int*, int*)+0x2d9>
c000bea3:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000bea7:	01 7c 24 10          	add    DWORD PTR [esp+0x10],edi
c000beab:	e9 4a ff ff ff       	jmp    c000bdfa <Video::tgaParse(unsigned char*, int, int*, int*)+0x2b6>
c000beb0:	50                   	push   eax
c000beb1:	50                   	push   eax
c000beb2:	51                   	push   ecx
c000beb3:	68 aa 3c 02 c0       	push   0xc0023caa
c000beb8:	e8 a9 b0 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000bebd:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000bec0:	e8 c7 3c 00 00       	call   c000fb8c <free>
c000bec5:	83 c4 10             	add    esp,0x10
c000bec8:	31 ed                	xor    ebp,ebp
c000beca:	eb 14                	jmp    c000bee0 <Video::tgaParse(unsigned char*, int, int*, int*)+0x39c>
c000becc:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000bed0:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c000bed4:	89 18                	mov    DWORD PTR [eax],ebx
c000bed6:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000beda:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000bede:	89 18                	mov    DWORD PTR [eax],ebx
c000bee0:	83 c4 3c             	add    esp,0x3c
c000bee3:	89 e8                	mov    eax,ebp
c000bee5:	5b                   	pop    ebx
c000bee6:	5e                   	pop    esi
c000bee7:	5f                   	pop    edi
c000bee8:	5d                   	pop    ebp
c000bee9:	c3                   	ret    

c000beea <Video::putTGA(int, int, unsigned char*, int)>:
c000beea:	55                   	push   ebp
c000beeb:	57                   	push   edi
c000beec:	56                   	push   esi
c000beed:	53                   	push   ebx
c000beee:	83 ec 28             	sub    esp,0x28
c000bef1:	8d 44 24 18          	lea    eax,[esp+0x18]
c000bef5:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000bef9:	50                   	push   eax
c000befa:	8d 44 24 18          	lea    eax,[esp+0x18]
c000befe:	50                   	push   eax
c000beff:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000bf03:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000bf07:	55                   	push   ebp
c000bf08:	e8 37 fc ff ff       	call   c000bb44 <Video::tgaParse(unsigned char*, int, int*, int*)>
c000bf0d:	83 c4 20             	add    esp,0x20
c000bf10:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000bf14:	85 c0                	test   eax,eax
c000bf16:	74 3b                	je     c000bf53 <Video::putTGA(int, int, unsigned char*, int)+0x69>
c000bf18:	89 c6                	mov    esi,eax
c000bf1a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000bf1e:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000bf22:	39 d8                	cmp    eax,ebx
c000bf24:	7e 2d                	jle    c000bf53 <Video::putTGA(int, int, unsigned char*, int)+0x69>
c000bf26:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000bf2a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bf2e:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000bf32:	39 f8                	cmp    eax,edi
c000bf34:	7e 1a                	jle    c000bf50 <Video::putTGA(int, int, unsigned char*, int)+0x66>
c000bf36:	83 c6 04             	add    esi,0x4
c000bf39:	8b 46 fc             	mov    eax,DWORD PTR [esi-0x4]
c000bf3c:	85 c0                	test   eax,eax
c000bf3e:	79 0d                	jns    c000bf4d <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000bf40:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c000bf43:	50                   	push   eax
c000bf44:	53                   	push   ebx
c000bf45:	57                   	push   edi
c000bf46:	55                   	push   ebp
c000bf47:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000bf4a:	83 c4 10             	add    esp,0x10
c000bf4d:	47                   	inc    edi
c000bf4e:	eb da                	jmp    c000bf2a <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000bf50:	43                   	inc    ebx
c000bf51:	eb c7                	jmp    c000bf1a <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000bf53:	83 c4 1c             	add    esp,0x1c
c000bf56:	5b                   	pop    ebx
c000bf57:	5e                   	pop    esi
c000bf58:	5f                   	pop    edi
c000bf59:	5d                   	pop    ebp
c000bf5a:	c3                   	ret    
c000bf5b:	90                   	nop

c000bf5c <ACPI::close(int, int, void*)>:
c000bf5c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000bf61:	c3                   	ret    
c000bf62:	66 90                	xchg   ax,ax

c000bf64 <loadACPITables(unsigned char*)>:
c000bf64:	57                   	push   edi
c000bf65:	56                   	push   esi
c000bf66:	53                   	push   ebx
c000bf67:	83 ec 60             	sub    esp,0x60
c000bf6a:	83 7c 24 70 00       	cmp    DWORD PTR [esp+0x70],0x0
c000bf6f:	0f 84 43 02 00 00    	je     c000c1b8 <loadACPITables(unsigned char*)+0x254>
c000bf75:	a0 80 cd 02 c0       	mov    al,ds:0xc002cd80
c000bf7a:	0f b6 c0             	movzx  eax,al
c000bf7d:	85 c0                	test   eax,eax
c000bf7f:	74 7b                	je     c000bffc <loadACPITables(unsigned char*)+0x98>
c000bf81:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000bf85:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bf89:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000bf8d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000bf90:	83 e8 24             	sub    eax,0x24
c000bf93:	c1 e8 03             	shr    eax,0x3
c000bf96:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bf9a:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000bfa2:	66 90                	xchg   ax,ax
c000bfa4:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000bfa8:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000bfac:	0f 8d ba 00 00 00    	jge    c000c06c <loadACPITables(unsigned char*)+0x108>
c000bfb2:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000bfb6:	83 c0 24             	add    eax,0x24
c000bfb9:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bfbd:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000bfc1:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000bfc5:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000bfc9:	c1 e0 03             	shl    eax,0x3
c000bfcc:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000bfd0:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000bfd4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000bfd7:	8b 00                	mov    eax,DWORD PTR [eax]
c000bfd9:	89 c1                	mov    ecx,eax
c000bfdb:	a1 60 cb 02 c0       	mov    eax,ds:0xc002cb60
c000bfe0:	8d 50 01             	lea    edx,[eax+0x1]
c000bfe3:	89 15 60 cb 02 c0    	mov    DWORD PTR ds:0xc002cb60,edx
c000bfe9:	89 ca                	mov    edx,ecx
c000bfeb:	89 14 c5 84 cb 02 c0 	mov    DWORD PTR [eax*8-0x3ffd347c],edx
c000bff2:	83 44 24 5c 01       	add    DWORD PTR [esp+0x5c],0x1
c000bff7:	eb ab                	jmp    c000bfa4 <loadACPITables(unsigned char*)+0x40>
c000bff9:	8d 76 00             	lea    esi,[esi+0x0]
c000bffc:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000c000:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c004:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c008:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c00b:	83 e8 24             	sub    eax,0x24
c000c00e:	c1 e8 02             	shr    eax,0x2
c000c011:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000c015:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000c01d:	8d 76 00             	lea    esi,[esi+0x0]
c000c020:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000c024:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000c028:	7d 42                	jge    c000c06c <loadACPITables(unsigned char*)+0x108>
c000c02a:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000c02e:	83 c0 24             	add    eax,0x24
c000c031:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c035:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c039:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000c03d:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000c041:	c1 e0 02             	shl    eax,0x2
c000c044:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000c048:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c04c:	8b 08                	mov    ecx,DWORD PTR [eax]
c000c04e:	a1 60 cb 02 c0       	mov    eax,ds:0xc002cb60
c000c053:	8d 50 01             	lea    edx,[eax+0x1]
c000c056:	89 15 60 cb 02 c0    	mov    DWORD PTR ds:0xc002cb60,edx
c000c05c:	89 ca                	mov    edx,ecx
c000c05e:	89 14 c5 84 cb 02 c0 	mov    DWORD PTR [eax*8-0x3ffd347c],edx
c000c065:	83 44 24 58 01       	add    DWORD PTR [esp+0x58],0x1
c000c06a:	eb b4                	jmp    c000c020 <loadACPITables(unsigned char*)+0xbc>
c000c06c:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000c074:	a1 60 cb 02 c0       	mov    eax,ds:0xc002cb60
c000c079:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000c07d:	0f 8d 39 01 00 00    	jge    c000c1bc <loadACPITables(unsigned char*)+0x258>
c000c083:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000c087:	8b 04 c5 84 cb 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd347c]
c000c08e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c092:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c096:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c09a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c09e:	25 ff 0f 00 00       	and    eax,0xfff
c000c0a3:	89 c6                	mov    esi,eax
c000c0a5:	8b 1d 70 f2 02 c0    	mov    ebx,DWORD PTR ds:0xc002f270
c000c0ab:	83 ec 0c             	sub    esp,0xc
c000c0ae:	6a 01                	push   0x1
c000c0b0:	e8 8c 72 00 00       	call   c0013341 <Virt::allocateKernelVirtualPages(int)>
c000c0b5:	83 c4 10             	add    esp,0x10
c000c0b8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000c0bc:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000c0c2:	83 ec 0c             	sub    esp,0xc
c000c0c5:	6a 01                	push   0x1
c000c0c7:	6a 01                	push   0x1
c000c0c9:	50                   	push   eax
c000c0ca:	52                   	push   edx
c000c0cb:	53                   	push   ebx
c000c0cc:	e8 43 7b 00 00       	call   c0013c14 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c0d1:	83 c4 20             	add    esp,0x20
c000c0d4:	09 f0                	or     eax,esi
c000c0d6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c0da:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000c0de:	c1 e0 03             	shl    eax,0x3
c000c0e1:	05 80 cb 02 c0       	add    eax,0xc002cb80
c000c0e6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000c0ea:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c0ee:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c0f2:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000c0fa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c0fe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c102:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c106:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c10a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c10e:	89 c6                	mov    esi,eax
c000c110:	89 d7                	mov    edi,edx
c000c112:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c114:	89 c8                	mov    eax,ecx
c000c116:	89 fa                	mov    edx,edi
c000c118:	89 f3                	mov    ebx,esi
c000c11a:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000c11e:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c122:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c126:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c12a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c12d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c131:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c135:	05 00 10 00 00       	add    eax,0x1000
c000c13a:	c1 e8 0c             	shr    eax,0xc
c000c13d:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c141:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c145:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c149:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c14d:	25 ff 0f 00 00       	and    eax,0xfff
c000c152:	89 c6                	mov    esi,eax
c000c154:	8b 1d 70 f2 02 c0    	mov    ebx,DWORD PTR ds:0xc002f270
c000c15a:	83 ec 0c             	sub    esp,0xc
c000c15d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000c161:	e8 db 71 00 00       	call   c0013341 <Virt::allocateKernelVirtualPages(int)>
c000c166:	83 c4 10             	add    esp,0x10
c000c169:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000c16d:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000c173:	83 ec 0c             	sub    esp,0xc
c000c176:	6a 01                	push   0x1
c000c178:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c17c:	50                   	push   eax
c000c17d:	52                   	push   edx
c000c17e:	53                   	push   ebx
c000c17f:	e8 90 7a 00 00       	call   c0013c14 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c184:	83 c4 20             	add    esp,0x20
c000c187:	09 f0                	or     eax,esi
c000c189:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c18d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c191:	83 ec 0c             	sub    esp,0xc
c000c194:	50                   	push   eax
c000c195:	e8 a5 74 00 00       	call   c001363f <Virt::freeKernelVirtualPages(unsigned long)>
c000c19a:	83 c4 10             	add    esp,0x10
c000c19d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000c1a1:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000c1a5:	89 14 c5 84 cb 02 c0 	mov    DWORD PTR [eax*8-0x3ffd347c],edx
c000c1ac:	83 44 24 54 01       	add    DWORD PTR [esp+0x54],0x1
c000c1b1:	e9 be fe ff ff       	jmp    c000c074 <loadACPITables(unsigned char*)+0x110>
c000c1b6:	66 90                	xchg   ax,ax
c000c1b8:	90                   	nop
c000c1b9:	8d 76 00             	lea    esi,[esi+0x0]
c000c1bc:	83 c4 60             	add    esp,0x60
c000c1bf:	5b                   	pop    ebx
c000c1c0:	5e                   	pop    esi
c000c1c1:	5f                   	pop    edi
c000c1c2:	c3                   	ret    
c000c1c3:	90                   	nop

c000c1c4 <findRSDT(unsigned char*)>:
c000c1c4:	57                   	push   edi
c000c1c5:	56                   	push   esi
c000c1c6:	53                   	push   ebx
c000c1c7:	83 ec 50             	sub    esp,0x50
c000c1ca:	a1 88 cd 02 c0       	mov    eax,ds:0xc002cd88
c000c1cf:	85 c0                	test   eax,eax
c000c1d1:	75 0d                	jne    c000c1e0 <findRSDT(unsigned char*)+0x1c>
c000c1d3:	b8 00 00 00 00       	mov    eax,0x0
c000c1d8:	e9 2b 01 00 00       	jmp    c000c308 <findRSDT(unsigned char*)+0x144>
c000c1dd:	8d 76 00             	lea    esi,[esi+0x0]
c000c1e0:	89 e0                	mov    eax,esp
c000c1e2:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000c1e6:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000c1ea:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c1ee:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000c1f6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c1fa:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c1fe:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c202:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000c206:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000c20a:	89 c6                	mov    esi,eax
c000c20c:	89 d7                	mov    edi,edx
c000c20e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c210:	89 c8                	mov    eax,ecx
c000c212:	89 fa                	mov    edx,edi
c000c214:	89 f3                	mov    ebx,esi
c000c216:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000c21a:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000c21e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c222:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000c226:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000c22a:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000c232:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c236:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c23a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000c23e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c242:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c246:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000c24a:	25 ff 0f 00 00       	and    eax,0xfff
c000c24f:	89 c6                	mov    esi,eax
c000c251:	8b 1d 70 f2 02 c0    	mov    ebx,DWORD PTR ds:0xc002f270
c000c257:	83 ec 0c             	sub    esp,0xc
c000c25a:	6a 02                	push   0x2
c000c25c:	e8 e0 70 00 00       	call   c0013341 <Virt::allocateKernelVirtualPages(int)>
c000c261:	83 c4 10             	add    esp,0x10
c000c264:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000c268:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000c26e:	83 ec 0c             	sub    esp,0xc
c000c271:	6a 01                	push   0x1
c000c273:	6a 02                	push   0x2
c000c275:	50                   	push   eax
c000c276:	52                   	push   edx
c000c277:	53                   	push   ebx
c000c278:	e8 97 79 00 00       	call   c0013c14 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c27d:	83 c4 20             	add    esp,0x20
c000c280:	09 f0                	or     eax,esi
c000c282:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000c286:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c28a:	25 ff 0f 00 00       	and    eax,0xfff
c000c28f:	89 c6                	mov    esi,eax
c000c291:	8b 1d 70 f2 02 c0    	mov    ebx,DWORD PTR ds:0xc002f270
c000c297:	83 ec 0c             	sub    esp,0xc
c000c29a:	6a 02                	push   0x2
c000c29c:	e8 a0 70 00 00       	call   c0013341 <Virt::allocateKernelVirtualPages(int)>
c000c2a1:	83 c4 10             	add    esp,0x10
c000c2a4:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000c2a8:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000c2ae:	83 ec 0c             	sub    esp,0xc
c000c2b1:	6a 01                	push   0x1
c000c2b3:	6a 02                	push   0x2
c000c2b5:	50                   	push   eax
c000c2b6:	52                   	push   edx
c000c2b7:	53                   	push   ebx
c000c2b8:	e8 57 79 00 00       	call   c0013c14 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c2bd:	83 c4 20             	add    esp,0x20
c000c2c0:	09 f0                	or     eax,esi
c000c2c2:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c2c6:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000c2cb:	85 c0                	test   eax,eax
c000c2cd:	75 11                	jne    c000c2e0 <findRSDT(unsigned char*)+0x11c>
c000c2cf:	c6 05 80 cd 02 c0 00 	mov    BYTE PTR ds:0xc002cd80,0x0
c000c2d6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c2da:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c2de:	eb 24                	jmp    c000c304 <findRSDT(unsigned char*)+0x140>
c000c2e0:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000c2e5:	83 f8 02             	cmp    eax,0x2
c000c2e8:	75 12                	jne    c000c2fc <findRSDT(unsigned char*)+0x138>
c000c2ea:	c6 05 80 cd 02 c0 01 	mov    BYTE PTR ds:0xc002cd80,0x1
c000c2f1:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000c2f5:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c2f9:	eb 09                	jmp    c000c304 <findRSDT(unsigned char*)+0x140>
c000c2fb:	90                   	nop
c000c2fc:	b8 00 00 00 00       	mov    eax,0x0
c000c301:	eb 05                	jmp    c000c308 <findRSDT(unsigned char*)+0x144>
c000c303:	90                   	nop
c000c304:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000c308:	83 c4 50             	add    esp,0x50
c000c30b:	5b                   	pop    ebx
c000c30c:	5e                   	pop    esi
c000c30d:	5f                   	pop    edi
c000c30e:	c3                   	ret    
c000c30f:	90                   	nop

c000c310 <findDataTable(unsigned char*, char*)>:
c000c310:	83 ec 1c             	sub    esp,0x1c
c000c313:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c000c318:	75 0a                	jne    c000c324 <findDataTable(unsigned char*, char*)+0x14>
c000c31a:	b8 00 00 00 00       	mov    eax,0x0
c000c31f:	eb 5f                	jmp    c000c380 <findDataTable(unsigned char*, char*)+0x70>
c000c321:	8d 76 00             	lea    esi,[esi+0x0]
c000c324:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000c32c:	a1 60 cb 02 c0       	mov    eax,ds:0xc002cb60
c000c331:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000c335:	7d 41                	jge    c000c378 <findDataTable(unsigned char*, char*)+0x68>
c000c337:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c33b:	c1 e0 03             	shl    eax,0x3
c000c33e:	05 80 cb 02 c0       	add    eax,0xc002cb80
c000c343:	83 ec 04             	sub    esp,0x4
c000c346:	6a 04                	push   0x4
c000c348:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c34c:	50                   	push   eax
c000c34d:	e8 2e 40 ff ff       	call   c0000380 <memcmp>
c000c352:	83 c4 10             	add    esp,0x10
c000c355:	85 c0                	test   eax,eax
c000c357:	0f 94 c0             	sete   al
c000c35a:	0f b6 c0             	movzx  eax,al
c000c35d:	85 c0                	test   eax,eax
c000c35f:	74 0f                	je     c000c370 <findDataTable(unsigned char*, char*)+0x60>
c000c361:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c365:	8b 04 c5 84 cb 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd347c]
c000c36c:	eb 12                	jmp    c000c380 <findDataTable(unsigned char*, char*)+0x70>
c000c36e:	66 90                	xchg   ax,ax
c000c370:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c000c375:	eb b5                	jmp    c000c32c <findDataTable(unsigned char*, char*)+0x1c>
c000c377:	90                   	nop
c000c378:	b8 00 00 00 00       	mov    eax,0x0
c000c37d:	8d 76 00             	lea    esi,[esi+0x0]
c000c380:	83 c4 1c             	add    esp,0x1c
c000c383:	c3                   	ret    

c000c384 <scanMADT()>:
c000c384:	53                   	push   ebx
c000c385:	83 ec 38             	sub    esp,0x38
c000c388:	c7 05 88 cd 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002cd88,0x0
c000c392:	c7 05 84 cd 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002cd84,0x0
c000c39c:	83 ec 0c             	sub    esp,0xc
c000c39f:	68 0c 3d 02 c0       	push   0xc0023d0c
c000c3a4:	e8 bd ab ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000c3a9:	83 c4 10             	add    esp,0x10
c000c3ac:	e8 8f db 00 00       	call   c0019f40 <HalFindRSDP()>
c000c3b1:	a3 88 cd 02 c0       	mov    ds:0xc002cd88,eax
c000c3b6:	a1 88 cd 02 c0       	mov    eax,ds:0xc002cd88
c000c3bb:	85 c0                	test   eax,eax
c000c3bd:	0f 84 59 04 00 00    	je     c000c81c <scanMADT()+0x498>
c000c3c3:	83 ec 0c             	sub    esp,0xc
c000c3c6:	68 1a 3d 02 c0       	push   0xc0023d1a
c000c3cb:	e8 96 ab ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000c3d0:	83 c4 10             	add    esp,0x10
c000c3d3:	a1 88 cd 02 c0       	mov    eax,ds:0xc002cd88
c000c3d8:	83 ec 0c             	sub    esp,0xc
c000c3db:	50                   	push   eax
c000c3dc:	e8 e3 fd ff ff       	call   c000c1c4 <findRSDT(unsigned char*)>
c000c3e1:	83 c4 10             	add    esp,0x10
c000c3e4:	a3 84 cd 02 c0       	mov    ds:0xc002cd84,eax
c000c3e9:	a1 84 cd 02 c0       	mov    eax,ds:0xc002cd84
c000c3ee:	85 c0                	test   eax,eax
c000c3f0:	0f 84 2a 04 00 00    	je     c000c820 <scanMADT()+0x49c>
c000c3f6:	8b 15 84 cd 02 c0    	mov    edx,DWORD PTR ds:0xc002cd84
c000c3fc:	a1 88 cd 02 c0       	mov    eax,ds:0xc002cd88
c000c401:	83 ec 04             	sub    esp,0x4
c000c404:	52                   	push   edx
c000c405:	50                   	push   eax
c000c406:	68 c4 3e 02 c0       	push   0xc0023ec4
c000c40b:	e8 56 ab ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000c410:	83 c4 10             	add    esp,0x10
c000c413:	a1 84 cd 02 c0       	mov    eax,ds:0xc002cd84
c000c418:	83 ec 0c             	sub    esp,0xc
c000c41b:	50                   	push   eax
c000c41c:	e8 43 fb ff ff       	call   c000bf64 <loadACPITables(unsigned char*)>
c000c421:	83 c4 10             	add    esp,0x10
c000c424:	a1 84 cd 02 c0       	mov    eax,ds:0xc002cd84
c000c429:	83 ec 08             	sub    esp,0x8
c000c42c:	68 29 3d 02 c0       	push   0xc0023d29
c000c431:	50                   	push   eax
c000c432:	e8 d9 fe ff ff       	call   c000c310 <findDataTable(unsigned char*, char*)>
c000c437:	83 c4 10             	add    esp,0x10
c000c43a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c43e:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000c443:	0f 84 db 03 00 00    	je     c000c824 <scanMADT()+0x4a0>
c000c449:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000c451:	8d 76 00             	lea    esi,[esi+0x0]
c000c454:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c458:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c45b:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000c45f:	0f 87 c7 03 00 00    	ja     c000c82c <scanMADT()+0x4a8>
c000c465:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000c46d:	0f 87 b9 03 00 00    	ja     c000c82c <scanMADT()+0x4a8>
c000c473:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c477:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c47b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c47f:	8d 50 01             	lea    edx,[eax+0x1]
c000c482:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c486:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c48a:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000c48e:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000c492:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c496:	8d 50 01             	lea    edx,[eax+0x1]
c000c499:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c49d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c4a1:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000c4a5:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000c4a9:	0f b6 44 24 22       	movzx  eax,BYTE PTR [esp+0x22]
c000c4ae:	83 f8 02             	cmp    eax,0x2
c000c4b1:	0f 86 71 03 00 00    	jbe    c000c828 <scanMADT()+0x4a4>
c000c4b7:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000c4bc:	85 c0                	test   eax,eax
c000c4be:	75 58                	jne    c000c518 <scanMADT()+0x194>
c000c4c0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c4c4:	8d 50 01             	lea    edx,[eax+0x1]
c000c4c7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4cb:	8a 15 80 cf 02 c0    	mov    dl,BYTE PTR ds:0xc002cf80
c000c4d1:	0f b6 d2             	movzx  edx,dl
c000c4d4:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000c4d8:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000c4dc:	88 82 c0 cf 02 c0    	mov    BYTE PTR [edx-0x3ffd3040],al
c000c4e2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c4e6:	8d 50 01             	lea    edx,[eax+0x1]
c000c4e9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4ed:	8a 15 80 cf 02 c0    	mov    dl,BYTE PTR ds:0xc002cf80
c000c4f3:	8d 4a 01             	lea    ecx,[edx+0x1]
c000c4f6:	88 0d 80 cf 02 c0    	mov    BYTE PTR ds:0xc002cf80,cl
c000c4fc:	0f b6 d2             	movzx  edx,dl
c000c4ff:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000c503:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000c507:	88 82 a0 cf 02 c0    	mov    BYTE PTR [edx-0x3ffd3060],al
c000c50d:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000c512:	e9 f1 02 00 00       	jmp    c000c808 <scanMADT()+0x484>
c000c517:	90                   	nop
c000c518:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000c51d:	83 f8 01             	cmp    eax,0x1
c000c520:	0f 85 32 01 00 00    	jne    c000c658 <scanMADT()+0x2d4>
c000c526:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c52a:	8d 50 01             	lea    edx,[eax+0x1]
c000c52d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c531:	8a 15 40 ce 02 c0    	mov    dl,BYTE PTR ds:0xc002ce40
c000c537:	0f b6 d2             	movzx  edx,dl
c000c53a:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000c53e:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000c542:	88 82 60 ce 02 c0    	mov    BYTE PTR [edx-0x3ffd31a0],al
c000c548:	83 44 24 2c 01       	add    DWORD PTR [esp+0x2c],0x1
c000c54d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c551:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c555:	01 d0                	add    eax,edx
c000c557:	83 c0 2c             	add    eax,0x2c
c000c55a:	8a 00                	mov    al,BYTE PTR [eax]
c000c55c:	0f b6 d0             	movzx  edx,al
c000c55f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c563:	8d 48 01             	lea    ecx,[eax+0x1]
c000c566:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c56a:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000c56e:	0f b6 c0             	movzx  eax,al
c000c571:	c1 e0 08             	shl    eax,0x8
c000c574:	89 d1                	mov    ecx,edx
c000c576:	09 c1                	or     ecx,eax
c000c578:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c57c:	8d 50 02             	lea    edx,[eax+0x2]
c000c57f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c583:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000c587:	0f b6 c0             	movzx  eax,al
c000c58a:	c1 e0 10             	shl    eax,0x10
c000c58d:	09 c1                	or     ecx,eax
c000c58f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c593:	8d 50 03             	lea    edx,[eax+0x3]
c000c596:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c59a:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000c59e:	0f b6 c0             	movzx  eax,al
c000c5a1:	c1 e0 18             	shl    eax,0x18
c000c5a4:	09 c1                	or     ecx,eax
c000c5a6:	89 ca                	mov    edx,ecx
c000c5a8:	a0 40 ce 02 c0       	mov    al,ds:0xc002ce40
c000c5ad:	0f b6 c0             	movzx  eax,al
c000c5b0:	89 14 85 80 ce 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3180],edx
c000c5b7:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000c5bc:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c5c0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c5c4:	01 d0                	add    eax,edx
c000c5c6:	83 c0 2c             	add    eax,0x2c
c000c5c9:	8a 00                	mov    al,BYTE PTR [eax]
c000c5cb:	0f b6 d0             	movzx  edx,al
c000c5ce:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c5d2:	8d 48 01             	lea    ecx,[eax+0x1]
c000c5d5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c5d9:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000c5dd:	0f b6 c0             	movzx  eax,al
c000c5e0:	c1 e0 08             	shl    eax,0x8
c000c5e3:	89 d1                	mov    ecx,edx
c000c5e5:	09 c1                	or     ecx,eax
c000c5e7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c5eb:	8d 50 02             	lea    edx,[eax+0x2]
c000c5ee:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c5f2:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000c5f6:	0f b6 c0             	movzx  eax,al
c000c5f9:	c1 e0 10             	shl    eax,0x10
c000c5fc:	09 c1                	or     ecx,eax
c000c5fe:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c602:	8d 50 03             	lea    edx,[eax+0x3]
c000c605:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c609:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000c60d:	0f b6 c0             	movzx  eax,al
c000c610:	c1 e0 18             	shl    eax,0x18
c000c613:	09 c1                	or     ecx,eax
c000c615:	89 ca                	mov    edx,ecx
c000c617:	a0 40 ce 02 c0       	mov    al,ds:0xc002ce40
c000c61c:	0f b6 c0             	movzx  eax,al
c000c61f:	89 14 85 00 cf 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3100],edx
c000c626:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000c62b:	a0 40 ce 02 c0       	mov    al,ds:0xc002ce40
c000c630:	83 c0 01             	add    eax,0x1
c000c633:	a2 40 ce 02 c0       	mov    ds:0xc002ce40,al
c000c638:	a0 40 ce 02 c0       	mov    al,ds:0xc002ce40
c000c63d:	0f b6 c0             	movzx  eax,al
c000c640:	83 ec 08             	sub    esp,0x8
c000c643:	50                   	push   eax
c000c644:	68 2e 3d 02 c0       	push   0xc0023d2e
c000c649:	e8 18 a9 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000c64e:	83 c4 10             	add    esp,0x10
c000c651:	e9 b2 01 00 00       	jmp    c000c808 <scanMADT()+0x484>
c000c656:	66 90                	xchg   ax,ax
c000c658:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000c65d:	83 f8 02             	cmp    eax,0x2
c000c660:	0f 85 ea 00 00 00    	jne    c000c750 <scanMADT()+0x3cc>
c000c666:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c66a:	8d 50 01             	lea    edx,[eax+0x1]
c000c66d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c671:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c675:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000c679:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000c67d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c681:	8d 50 01             	lea    edx,[eax+0x1]
c000c684:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c688:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c68c:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000c690:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000c694:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c698:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c69c:	01 d0                	add    eax,edx
c000c69e:	83 c0 2c             	add    eax,0x2c
c000c6a1:	8a 00                	mov    al,BYTE PTR [eax]
c000c6a3:	0f b6 d0             	movzx  edx,al
c000c6a6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c6aa:	8d 48 01             	lea    ecx,[eax+0x1]
c000c6ad:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c6b1:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000c6b5:	0f b6 c0             	movzx  eax,al
c000c6b8:	c1 e0 08             	shl    eax,0x8
c000c6bb:	89 d1                	mov    ecx,edx
c000c6bd:	09 c1                	or     ecx,eax
c000c6bf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c6c3:	8d 50 02             	lea    edx,[eax+0x2]
c000c6c6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c6ca:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000c6ce:	0f b6 c0             	movzx  eax,al
c000c6d1:	c1 e0 10             	shl    eax,0x10
c000c6d4:	09 c1                	or     ecx,eax
c000c6d6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c6da:	8d 50 03             	lea    edx,[eax+0x3]
c000c6dd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c6e1:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000c6e5:	0f b6 c0             	movzx  eax,al
c000c6e8:	c1 e0 18             	shl    eax,0x18
c000c6eb:	09 c8                	or     eax,ecx
c000c6ed:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000c6f1:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000c6f6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c6fa:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c6fe:	01 d0                	add    eax,edx
c000c700:	83 c0 2c             	add    eax,0x2c
c000c703:	8a 00                	mov    al,BYTE PTR [eax]
c000c705:	0f b6 d0             	movzx  edx,al
c000c708:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c70c:	8d 48 01             	lea    ecx,[eax+0x1]
c000c70f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c713:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000c717:	0f b6 c0             	movzx  eax,al
c000c71a:	c1 e0 08             	shl    eax,0x8
c000c71d:	09 d0                	or     eax,edx
c000c71f:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000c724:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000c729:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000c72e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c732:	88 90 08 68 02 c0    	mov    BYTE PTR [eax-0x3ffd97f8],dl
c000c738:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000c73d:	66 8b 54 24 1a       	mov    dx,WORD PTR [esp+0x1a]
c000c742:	66 89 94 00 20 ce 02 c0 	mov    WORD PTR [eax+eax*1-0x3ffd31e0],dx
c000c74a:	e9 b9 00 00 00       	jmp    c000c808 <scanMADT()+0x484>
c000c74f:	90                   	nop
c000c750:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000c755:	83 f8 04             	cmp    eax,0x4
c000c758:	0f 85 9a 00 00 00    	jne    c000c7f8 <scanMADT()+0x474>
c000c75e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c762:	8d 50 01             	lea    edx,[eax+0x1]
c000c765:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c769:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c76d:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000c771:	0f b6 c0             	movzx  eax,al
c000c774:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c778:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c77c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c780:	01 d0                	add    eax,edx
c000c782:	83 c0 2c             	add    eax,0x2c
c000c785:	8a 00                	mov    al,BYTE PTR [eax]
c000c787:	0f b6 d0             	movzx  edx,al
c000c78a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c78e:	8d 48 01             	lea    ecx,[eax+0x1]
c000c791:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c795:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000c799:	0f b6 c0             	movzx  eax,al
c000c79c:	c1 e0 08             	shl    eax,0x8
c000c79f:	09 d0                	or     eax,edx
c000c7a1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c7a5:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000c7aa:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c7ae:	8d 50 01             	lea    edx,[eax+0x1]
c000c7b1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c7b5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c7b9:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000c7bd:	0f b6 c0             	movzx  eax,al
c000c7c0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c7c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c7c8:	c1 e0 08             	shl    eax,0x8
c000c7cb:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000c7cf:	89 c1                	mov    ecx,eax
c000c7d1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c7d5:	c1 e0 18             	shl    eax,0x18
c000c7d8:	89 c3                	mov    ebx,eax
c000c7da:	a1 8c cd 02 c0       	mov    eax,ds:0xc002cd8c
c000c7df:	8d 50 01             	lea    edx,[eax+0x1]
c000c7e2:	89 15 8c cd 02 c0    	mov    DWORD PTR ds:0xc002cd8c,edx
c000c7e8:	09 d9                	or     ecx,ebx
c000c7ea:	89 ca                	mov    edx,ecx
c000c7ec:	89 14 85 a0 cd 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3260],edx
c000c7f3:	eb 13                	jmp    c000c808 <scanMADT()+0x484>
c000c7f5:	8d 76 00             	lea    esi,[esi+0x0]
c000c7f8:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000c7fd:	83 f8 05             	cmp    eax,0x5
c000c800:	75 06                	jne    c000c808 <scanMADT()+0x484>
c000c802:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000c807:	90                   	nop
c000c808:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c000c80d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c811:	01 d0                	add    eax,edx
c000c813:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c817:	e9 38 fc ff ff       	jmp    c000c454 <scanMADT()+0xd0>
c000c81c:	90                   	nop
c000c81d:	eb 0d                	jmp    c000c82c <scanMADT()+0x4a8>
c000c81f:	90                   	nop
c000c820:	90                   	nop
c000c821:	eb 09                	jmp    c000c82c <scanMADT()+0x4a8>
c000c823:	90                   	nop
c000c824:	90                   	nop
c000c825:	eb 05                	jmp    c000c82c <scanMADT()+0x4a8>
c000c827:	90                   	nop
c000c828:	90                   	nop
c000c829:	8d 76 00             	lea    esi,[esi+0x0]
c000c82c:	83 c4 38             	add    esp,0x38
c000c82f:	5b                   	pop    ebx
c000c830:	c3                   	ret    
c000c831:	90                   	nop
c000c832:	66 90                	xchg   ax,ax

c000c834 <ACPI::ACPI()>:
c000c834:	83 ec 0c             	sub    esp,0xc
c000c837:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c83b:	83 ec 08             	sub    esp,0x8
c000c83e:	68 4a 3d 02 c0       	push   0xc0023d4a
c000c843:	50                   	push   eax
c000c844:	e8 0f d3 ff ff       	call   c0009b58 <Device::Device(char const*)>
c000c849:	83 c4 10             	add    esp,0x10
c000c84c:	ba 68 3f 02 c0       	mov    edx,0xc0023f68
c000c851:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c855:	89 10                	mov    DWORD PTR [eax],edx
c000c857:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c85b:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000c862:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c866:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000c870:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c874:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000c87e:	90                   	nop
c000c87f:	83 c4 0c             	add    esp,0xc
c000c882:	c3                   	ret    
c000c883:	90                   	nop

c000c884 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000c884:	83 ec 2c             	sub    esp,0x2c
c000c887:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000c88b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c88f:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c000c893:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c000c897:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000c89c:	88 c8                	mov    al,cl
c000c89e:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000c8a2:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000c8a7:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c8af:	90                   	nop
c000c8b0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c8b4:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000c8ba:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000c8be:	0f 8d b0 00 00 00    	jge    c000c974 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xf0>
c000c8c4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c8c8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c8cc:	83 c2 2a             	add    edx,0x2a
c000c8cf:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000c8d3:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c000c8d8:	0f b7 c0             	movzx  eax,ax
c000c8db:	39 c2                	cmp    edx,eax
c000c8dd:	0f 85 85 00 00 00    	jne    c000c968 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000c8e3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c8e7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c8eb:	83 c2 2a             	add    edx,0x2a
c000c8ee:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000c8f2:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c000c8f7:	0f b6 c0             	movzx  eax,al
c000c8fa:	39 c2                	cmp    edx,eax
c000c8fc:	75 6a                	jne    c000c968 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000c8fe:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000c903:	85 c0                	test   eax,eax
c000c905:	74 3d                	je     c000c944 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xc0>
c000c907:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c90b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c90f:	83 c2 2a             	add    edx,0x2a
c000c912:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000c916:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c91a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c91d:	39 c2                	cmp    edx,eax
c000c91f:	74 13                	je     c000c934 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xb0>
c000c921:	83 ec 0c             	sub    esp,0xc
c000c924:	68 e8 3e 02 c0       	push   0xc0023ee8
c000c929:	e8 5c 35 00 00       	call   c000fe8a <KePanic(char const*)>
c000c92e:	83 c4 10             	add    esp,0x10
c000c931:	8d 76 00             	lea    esi,[esi+0x0]
c000c934:	83 ec 0c             	sub    esp,0xc
c000c937:	68 4f 3d 02 c0       	push   0xc0023d4f
c000c93c:	e8 49 35 00 00       	call   c000fe8a <KePanic(char const*)>
c000c941:	83 c4 10             	add    esp,0x10
c000c944:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000c948:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c94c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c950:	83 c2 2a             	add    edx,0x2a
c000c953:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000c957:	8b 02                	mov    eax,DWORD PTR [edx]
c000c959:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000c95c:	89 01                	mov    DWORD PTR [ecx],eax
c000c95e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000c961:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000c966:	66 90                	xchg   ax,ax
c000c968:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000c96d:	e9 3e ff ff ff       	jmp    c000c8b0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000c972:	66 90                	xchg   ax,ax
c000c974:	90                   	nop
c000c975:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c979:	83 c4 2c             	add    esp,0x2c
c000c97c:	c2 04 00             	ret    0x4
c000c97f:	90                   	nop

c000c980 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000c980:	83 ec 1c             	sub    esp,0x1c
c000c983:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c987:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000c98b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000c98f:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000c994:	88 c8                	mov    al,cl
c000c996:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000c99a:	88 d0                	mov    al,dl
c000c99c:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000c9a0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9a4:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000c9aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9ae:	83 c2 2a             	add    edx,0x2a
c000c9b1:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c000c9b5:	88 4c d0 0f          	mov    BYTE PTR [eax+edx*8+0xf],cl
c000c9b9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9bd:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000c9c3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9c7:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000c9ca:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c9ce:	66 89 54 c8 0c       	mov    WORD PTR [eax+ecx*8+0xc],dx
c000c9d3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9d7:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000c9dd:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000c9e1:	83 c0 01             	add    eax,0x1
c000c9e4:	88 c1                	mov    cl,al
c000c9e6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9ea:	83 c2 2a             	add    edx,0x2a
c000c9ed:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000c9f1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9f5:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000c9fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9ff:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000ca02:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000ca06:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000ca0a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca0e:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000ca14:	8d 50 01             	lea    edx,[eax+0x1]
c000ca17:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca1b:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000ca21:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca25:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000ca2b:	3d 00 02 00 00       	cmp    eax,0x200
c000ca30:	75 12                	jne    c000ca44 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc4>
c000ca32:	83 ec 0c             	sub    esp,0xc
c000ca35:	68 5e 3d 02 c0       	push   0xc0023d5e
c000ca3a:	e8 4b 34 00 00       	call   c000fe8a <KePanic(char const*)>
c000ca3f:	83 c4 10             	add    esp,0x10
c000ca42:	66 90                	xchg   ax,ax
c000ca44:	90                   	nop
c000ca45:	83 c4 1c             	add    esp,0x1c
c000ca48:	c3                   	ret    
c000ca49:	90                   	nop
c000ca4a:	66 90                	xchg   ax,ax

c000ca4c <ACPI::setScreenBrightnessLevel(void*, int)>:
c000ca4c:	b8 00 00 00 00       	mov    eax,0x0
c000ca51:	c3                   	ret    
c000ca52:	66 90                	xchg   ax,ax

c000ca54 <ACPI::detectPCI()>:
c000ca54:	53                   	push   ebx
c000ca55:	83 ec 28             	sub    esp,0x28
c000ca58:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000ca5d:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000ca62:	a1 84 cd 02 c0       	mov    eax,ds:0xc002cd84
c000ca67:	83 ec 08             	sub    esp,0x8
c000ca6a:	68 7b 3d 02 c0       	push   0xc0023d7b
c000ca6f:	50                   	push   eax
c000ca70:	e8 9b f8 ff ff       	call   c000c310 <findDataTable(unsigned char*, char*)>
c000ca75:	83 c4 10             	add    esp,0x10
c000ca78:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ca7c:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000ca81:	74 0d                	je     c000ca90 <ACPI::detectPCI()+0x3c>
c000ca83:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000ca88:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000ca8d:	8d 76 00             	lea    esi,[esi+0x0]
c000ca90:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000ca98:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ca9c:	8a 00                	mov    al,BYTE PTR [eax]
c000ca9e:	0f b6 c0             	movzx  eax,al
c000caa1:	83 f8 01             	cmp    eax,0x1
c000caa4:	75 0e                	jne    c000cab4 <ACPI::detectPCI()+0x60>
c000caa6:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000caab:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000cab0:	eb 2e                	jmp    c000cae0 <ACPI::detectPCI()+0x8c>
c000cab2:	66 90                	xchg   ax,ax
c000cab4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000cab8:	8a 00                	mov    al,BYTE PTR [eax]
c000caba:	0f b6 c0             	movzx  eax,al
c000cabd:	83 f8 02             	cmp    eax,0x2
c000cac0:	75 1e                	jne    c000cae0 <ACPI::detectPCI()+0x8c>
c000cac2:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000cac7:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000cacc:	85 c0                	test   eax,eax
c000cace:	74 10                	je     c000cae0 <ACPI::detectPCI()+0x8c>
c000cad0:	83 ec 0c             	sub    esp,0xc
c000cad3:	68 18 3f 02 c0       	push   0xc0023f18
c000cad8:	e8 ad 33 00 00       	call   c000fe8a <KePanic(char const*)>
c000cadd:	83 c4 10             	add    esp,0x10
c000cae0:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000cae4:	83 f0 01             	xor    eax,0x1
c000cae7:	0f b6 c0             	movzx  eax,al
c000caea:	85 c0                	test   eax,eax
c000caec:	74 46                	je     c000cb34 <ACPI::detectPCI()+0xe0>
c000caee:	e8 3d 36 ff ff       	call   c0000130 <manualPCIProbe>
c000caf3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000caf7:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000cafc:	75 0e                	jne    c000cb0c <ACPI::detectPCI()+0xb8>
c000cafe:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000cb03:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000cb08:	eb 2a                	jmp    c000cb34 <ACPI::detectPCI()+0xe0>
c000cb0a:	66 90                	xchg   ax,ax
c000cb0c:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000cb11:	75 21                	jne    c000cb34 <ACPI::detectPCI()+0xe0>
c000cb13:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000cb18:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000cb1d:	85 c0                	test   eax,eax
c000cb1f:	74 13                	je     c000cb34 <ACPI::detectPCI()+0xe0>
c000cb21:	83 ec 0c             	sub    esp,0xc
c000cb24:	68 18 3f 02 c0       	push   0xc0023f18
c000cb29:	e8 5c 33 00 00       	call   c000fe8a <KePanic(char const*)>
c000cb2e:	83 c4 10             	add    esp,0x10
c000cb31:	8d 76 00             	lea    esi,[esi+0x0]
c000cb34:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000cb39:	85 c0                	test   eax,eax
c000cb3b:	0f 84 87 00 00 00    	je     c000cbc8 <ACPI::detectPCI()+0x174>
c000cb41:	83 ec 0c             	sub    esp,0xc
c000cb44:	68 80 3d 02 c0       	push   0xc0023d80
c000cb49:	e8 e7 06 00 00       	call   c000d235 <KeSetBootMessage(char const*)>
c000cb4e:	83 c4 10             	add    esp,0x10
c000cb51:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000cb59:	83 ec 0c             	sub    esp,0xc
c000cb5c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000cb60:	e8 17 30 00 00       	call   c000fb7c <malloc>
c000cb65:	83 c4 10             	add    esp,0x10
c000cb68:	89 c3                	mov    ebx,eax
c000cb6a:	83 ec 0c             	sub    esp,0xc
c000cb6d:	53                   	push   ebx
c000cb6e:	e8 97 11 01 00       	call   c001dd0a <PCI::PCI()>
c000cb73:	83 c4 10             	add    esp,0x10
c000cb76:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000cb7a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cb7e:	83 ec 08             	sub    esp,0x8
c000cb81:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cb85:	50                   	push   eax
c000cb86:	e8 6b ce ff ff       	call   c00099f6 <Device::addChild(Device*)>
c000cb8b:	83 c4 10             	add    esp,0x10
c000cb8e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000cb92:	8b 00                	mov    eax,DWORD PTR [eax]
c000cb94:	83 c0 08             	add    eax,0x8
c000cb97:	8b 00                	mov    eax,DWORD PTR [eax]
c000cb99:	0f b6 54 24 1e       	movzx  edx,BYTE PTR [esp+0x1e]
c000cb9e:	85 d2                	test   edx,edx
c000cba0:	74 0a                	je     c000cbac <ACPI::detectPCI()+0x158>
c000cba2:	ba 01 00 00 00       	mov    edx,0x1
c000cba7:	eb 0b                	jmp    c000cbb4 <ACPI::detectPCI()+0x160>
c000cba9:	8d 76 00             	lea    esi,[esi+0x0]
c000cbac:	ba 02 00 00 00       	mov    edx,0x2
c000cbb1:	8d 76 00             	lea    esi,[esi+0x0]
c000cbb4:	6a 00                	push   0x0
c000cbb6:	6a 00                	push   0x0
c000cbb8:	52                   	push   edx
c000cbb9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cbbd:	ff d0                	call   eax
c000cbbf:	83 c4 10             	add    esp,0x10
c000cbc2:	e9 91 00 00 00       	jmp    c000cc58 <ACPI::detectPCI()+0x204>
c000cbc7:	90                   	nop
c000cbc8:	83 ec 0c             	sub    esp,0xc
c000cbcb:	68 98 3d 02 c0       	push   0xc0023d98
c000cbd0:	e8 60 06 00 00       	call   c000d235 <KeSetBootMessage(char const*)>
c000cbd5:	83 c4 10             	add    esp,0x10
c000cbd8:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000cbdf:	83 ec 0c             	sub    esp,0xc
c000cbe2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cbe6:	e8 91 2f 00 00       	call   c000fb7c <malloc>
c000cbeb:	83 c4 10             	add    esp,0x10
c000cbee:	89 c3                	mov    ebx,eax
c000cbf0:	83 ec 0c             	sub    esp,0xc
c000cbf3:	53                   	push   ebx
c000cbf4:	e8 19 1d 01 00       	call   c001e912 <IDE::IDE()>
c000cbf9:	83 c4 10             	add    esp,0x10
c000cbfc:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000cc00:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cc04:	83 ec 08             	sub    esp,0x8
c000cc07:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000cc0b:	50                   	push   eax
c000cc0c:	e8 e5 cd ff ff       	call   c00099f6 <Device::addChild(Device*)>
c000cc11:	83 c4 10             	add    esp,0x10
c000cc14:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cc18:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000cc22:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cc26:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000cc2f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cc33:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000cc3c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cc40:	8b 00                	mov    eax,DWORD PTR [eax]
c000cc42:	83 c0 08             	add    eax,0x8
c000cc45:	8b 00                	mov    eax,DWORD PTR [eax]
c000cc47:	6a 00                	push   0x0
c000cc49:	6a 00                	push   0x0
c000cc4b:	6a 00                	push   0x0
c000cc4d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc51:	ff d0                	call   eax
c000cc53:	83 c4 10             	add    esp,0x10
c000cc56:	66 90                	xchg   ax,ax
c000cc58:	90                   	nop
c000cc59:	83 c4 28             	add    esp,0x28
c000cc5c:	5b                   	pop    ebx
c000cc5d:	c3                   	ret    
c000cc5e:	66 90                	xchg   ax,ax

c000cc60 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000cc60:	83 ec 0c             	sub    esp,0xc
c000cc63:	83 ec 0c             	sub    esp,0xc
c000cc66:	68 ad 3d 02 c0       	push   0xc0023dad
c000cc6b:	e8 1a 32 00 00       	call   c000fe8a <KePanic(char const*)>
c000cc70:	83 c4 10             	add    esp,0x10
c000cc73:	90                   	nop
c000cc74:	83 c4 0c             	add    esp,0xc
c000cc77:	c3                   	ret    

c000cc78 <ACPI::open(int, int, void*)>:
c000cc78:	55                   	push   ebp
c000cc79:	89 e5                	mov    ebp,esp
c000cc7b:	53                   	push   ebx
c000cc7c:	81 ec 74 01 00 00    	sub    esp,0x174
c000cc82:	83 ec 0c             	sub    esp,0xc
c000cc85:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000cc88:	e8 c7 fd ff ff       	call   c000ca54 <ACPI::detectPCI()>
c000cc8d:	83 c4 10             	add    esp,0x10
c000cc90:	83 ec 0c             	sub    esp,0xc
c000cc93:	68 40 3f 02 c0       	push   0xc0023f40
c000cc98:	e8 98 05 00 00       	call   c000d235 <KeSetBootMessage(char const*)>
c000cc9d:	83 c4 10             	add    esp,0x10
c000cca0:	b8 4c 05 00 00       	mov    eax,0x54c
c000cca5:	8a 00                	mov    al,BYTE PTR [eax]
c000cca7:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c000ccaa:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
c000ccae:	83 f8 01             	cmp    eax,0x1
c000ccb1:	75 15                	jne    c000ccc8 <ACPI::open(int, int, void*)+0x50>
c000ccb3:	83 ec 0c             	sub    esp,0xc
c000ccb6:	68 be 3d 02 c0       	push   0xc0023dbe
c000ccbb:	e8 36 8d 00 00       	call   c00159f6 <Thr::loadKernelSymbolTable(char const*)>
c000ccc0:	83 c4 10             	add    esp,0x10
c000ccc3:	eb 33                	jmp    c000ccf8 <ACPI::open(int, int, void*)+0x80>
c000ccc5:	8d 76 00             	lea    esi,[esi+0x0]
c000ccc8:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
c000cccc:	3d bb 00 00 00       	cmp    eax,0xbb
c000ccd1:	75 15                	jne    c000cce8 <ACPI::open(int, int, void*)+0x70>
c000ccd3:	83 ec 0c             	sub    esp,0xc
c000ccd6:	68 dc 3d 02 c0       	push   0xc0023ddc
c000ccdb:	e8 16 8d 00 00       	call   c00159f6 <Thr::loadKernelSymbolTable(char const*)>
c000cce0:	83 c4 10             	add    esp,0x10
c000cce3:	eb 13                	jmp    c000ccf8 <ACPI::open(int, int, void*)+0x80>
c000cce5:	8d 76 00             	lea    esi,[esi+0x0]
c000cce8:	83 ec 0c             	sub    esp,0xc
c000cceb:	68 fa 3d 02 c0       	push   0xc0023dfa
c000ccf0:	e8 95 31 00 00       	call   c000fe8a <KePanic(char const*)>
c000ccf5:	83 c4 10             	add    esp,0x10
c000ccf8:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000ccfc:	c7 45 cc 14 01 00 00 	mov    DWORD PTR [ebp-0x34],0x114
c000cd03:	83 ec 0c             	sub    esp,0xc
c000cd06:	ff 75 cc             	push   DWORD PTR [ebp-0x34]
c000cd09:	e8 6e 2e 00 00       	call   c000fb7c <malloc>
c000cd0e:	83 c4 10             	add    esp,0x10
c000cd11:	89 c3                	mov    ebx,eax
c000cd13:	a1 78 fa 02 c0       	mov    eax,ds:0xc002fa78
c000cd18:	83 ec 04             	sub    esp,0x4
c000cd1b:	50                   	push   eax
c000cd1c:	68 14 3e 02 c0       	push   0xc0023e14
c000cd21:	53                   	push   ebx
c000cd22:	e8 61 b4 ff ff       	call   c0008188 <File::File(char const*, Process*)>
c000cd27:	83 c4 10             	add    esp,0x10
c000cd2a:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c000cd2d:	83 ec 08             	sub    esp,0x8
c000cd30:	6a 01                	push   0x1
c000cd32:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000cd35:	e8 6c b4 ff ff       	call   c00081a6 <File::open(FileOpenMode)>
c000cd3a:	83 c4 10             	add    esp,0x10
c000cd3d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c000cd40:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c000cd44:	75 12                	jne    c000cd58 <ACPI::open(int, int, void*)+0xe0>
c000cd46:	83 ec 0c             	sub    esp,0xc
c000cd49:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000cd4c:	e8 b3 b4 ff ff       	call   c0008204 <File::close()>
c000cd51:	83 c4 10             	add    esp,0x10
c000cd54:	eb 06                	jmp    c000cd5c <ACPI::open(int, int, void*)+0xe4>
c000cd56:	66 90                	xchg   ax,ax
c000cd58:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cd5c:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
c000cd60:	74 16                	je     c000cd78 <ACPI::open(int, int, void*)+0x100>
c000cd62:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000cd65:	8b 00                	mov    eax,DWORD PTR [eax]
c000cd67:	83 c0 08             	add    eax,0x8
c000cd6a:	8b 00                	mov    eax,DWORD PTR [eax]
c000cd6c:	83 ec 0c             	sub    esp,0xc
c000cd6f:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000cd72:	ff d0                	call   eax
c000cd74:	83 c4 10             	add    esp,0x10
c000cd77:	90                   	nop
c000cd78:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c000cd7b:	83 f0 01             	xor    eax,0x1
c000cd7e:	0f b6 c0             	movzx  eax,al
c000cd81:	85 c0                	test   eax,eax
c000cd83:	74 27                	je     c000cdac <ACPI::open(int, int, void*)+0x134>
c000cd85:	83 ec 0c             	sub    esp,0xc
c000cd88:	68 32 3e 02 c0       	push   0xc0023e32
c000cd8d:	e8 a3 04 00 00       	call   c000d235 <KeSetBootMessage(char const*)>
c000cd92:	83 c4 10             	add    esp,0x10
c000cd95:	c7 45 e8 0c 00 00 00 	mov    DWORD PTR [ebp-0x18],0xc
c000cd9c:	83 ec 0c             	sub    esp,0xc
c000cd9f:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c000cda2:	e8 bf 67 00 00       	call   c0013566 <Virt::setupPageSwapping(int)>
c000cda7:	83 c4 10             	add    esp,0x10
c000cdaa:	66 90                	xchg   ax,ax
c000cdac:	83 ec 0c             	sub    esp,0xc
c000cdaf:	68 4d 3e 02 c0       	push   0xc0023e4d
c000cdb4:	e8 7c 04 00 00       	call   c000d235 <KeSetBootMessage(char const*)>
c000cdb9:	83 c4 10             	add    esp,0x10
c000cdbc:	8d 45 b8             	lea    eax,[ebp-0x48]
c000cdbf:	83 ec 08             	sub    esp,0x8
c000cdc2:	6a 13                	push   0x13
c000cdc4:	50                   	push   eax
c000cdc5:	e8 5a cf ff ff       	call   c0009d24 <getDevicesOfType(DeviceType)>
c000cdca:	83 c4 0c             	add    esp,0xc
c000cdcd:	8d 76 00             	lea    esi,[esi+0x0]
c000cdd0:	83 ec 0c             	sub    esp,0xc
c000cdd3:	8d 45 b8             	lea    eax,[ebp-0x48]
c000cdd6:	50                   	push   eax
c000cdd7:	e8 d0 53 01 00       	call   c00221ac <LinkedList<Device>::isEmpty()>
c000cddc:	83 c4 10             	add    esp,0x10
c000cddf:	83 f0 01             	xor    eax,0x1
c000cde2:	0f b6 c0             	movzx  eax,al
c000cde5:	85 c0                	test   eax,eax
c000cde7:	0f 84 1f 01 00 00    	je     c000cf0c <ACPI::open(int, int, void*)+0x294>
c000cded:	83 ec 0c             	sub    esp,0xc
c000cdf0:	8d 45 b8             	lea    eax,[ebp-0x48]
c000cdf3:	50                   	push   eax
c000cdf4:	e8 cf 53 01 00       	call   c00221c8 <LinkedList<Device>::getFirstElement()>
c000cdf9:	83 c4 10             	add    esp,0x10
c000cdfc:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c000cdff:	83 ec 0c             	sub    esp,0xc
c000ce02:	8d 45 b8             	lea    eax,[ebp-0x48]
c000ce05:	50                   	push   eax
c000ce06:	e8 c5 53 01 00       	call   c00221d0 <LinkedList<Device>::removeFirst()>
c000ce0b:	83 c4 10             	add    esp,0x10
c000ce0e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c000ce11:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000ce14:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c000ce17:	b8 24 00 00 00       	mov    eax,0x24
c000ce1c:	83 e0 fc             	and    eax,0xfffffffc
c000ce1f:	89 c3                	mov    ebx,eax
c000ce21:	b8 00 00 00 00       	mov    eax,0x0
c000ce26:	66 90                	xchg   ax,ax
c000ce28:	8b 94 01 18 01 00 00 	mov    edx,DWORD PTR [ecx+eax*1+0x118]
c000ce2f:	89 94 05 94 fe ff ff 	mov    DWORD PTR [ebp+eax*1-0x16c],edx
c000ce36:	83 c0 04             	add    eax,0x4
c000ce39:	39 d8                	cmp    eax,ebx
c000ce3b:	72 eb                	jb     c000ce28 <ACPI::open(int, int, void*)+0x1b0>
c000ce3d:	83 ec 08             	sub    esp,0x8
c000ce40:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
c000ce46:	50                   	push   eax
c000ce47:	83 ec 24             	sub    esp,0x24
c000ce4a:	89 e1                	mov    ecx,esp
c000ce4c:	b8 24 00 00 00       	mov    eax,0x24
c000ce51:	83 e0 fc             	and    eax,0xfffffffc
c000ce54:	89 c3                	mov    ebx,eax
c000ce56:	b8 00 00 00 00       	mov    eax,0x0
c000ce5b:	90                   	nop
c000ce5c:	8b 94 05 94 fe ff ff 	mov    edx,DWORD PTR [ebp+eax*1-0x16c]
c000ce63:	89 14 01             	mov    DWORD PTR [ecx+eax*1],edx
c000ce66:	83 c0 04             	add    eax,0x4
c000ce69:	39 d8                	cmp    eax,ebx
c000ce6b:	72 ef                	jb     c000ce5c <ACPI::open(int, int, void*)+0x1e4>
c000ce6d:	e8 80 13 01 00       	call   c001e1f2 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000ce72:	83 c4 30             	add    esp,0x30
c000ce75:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c000ce78:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c000ce7c:	0f 84 4e ff ff ff    	je     c000cdd0 <ACPI::open(int, int, void*)+0x158>
c000ce82:	c7 45 c8 14 01 00 00 	mov    DWORD PTR [ebp-0x38],0x114
c000ce89:	83 ec 0c             	sub    esp,0xc
c000ce8c:	ff 75 c8             	push   DWORD PTR [ebp-0x38]
c000ce8f:	e8 e8 2c 00 00       	call   c000fb7c <malloc>
c000ce94:	83 c4 10             	add    esp,0x10
c000ce97:	89 c3                	mov    ebx,eax
c000ce99:	a1 78 fa 02 c0       	mov    eax,ds:0xc002fa78
c000ce9e:	83 ec 04             	sub    esp,0x4
c000cea1:	50                   	push   eax
c000cea2:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
c000cea5:	53                   	push   ebx
c000cea6:	e8 dd b2 ff ff       	call   c0008188 <File::File(char const*, Process*)>
c000ceab:	83 c4 10             	add    esp,0x10
c000ceae:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c000ceb1:	83 ec 0c             	sub    esp,0xc
c000ceb4:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
c000ceb7:	e8 ae b5 ff ff       	call   c000846a <File::exists()>
c000cebc:	83 c4 10             	add    esp,0x10
c000cebf:	0f b6 c0             	movzx  eax,al
c000cec2:	85 c0                	test   eax,eax
c000cec4:	74 22                	je     c000cee8 <ACPI::open(int, int, void*)+0x270>
c000cec6:	83 ec 08             	sub    esp,0x8
c000cec9:	6a 01                	push   0x1
c000cecb:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
c000cece:	e8 5b 96 00 00       	call   c001652e <Thr::loadDLL(char const*, bool)>
c000ced3:	83 c4 10             	add    esp,0x10
c000ced6:	83 ec 08             	sub    esp,0x8
c000ced9:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c000cedc:	50                   	push   eax
c000cedd:	e8 ad 98 00 00       	call   c001678f <Thr::executeDLL(unsigned long, void*)>
c000cee2:	83 c4 10             	add    esp,0x10
c000cee5:	8d 76 00             	lea    esi,[esi+0x0]
c000cee8:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c000ceec:	0f 84 de fe ff ff    	je     c000cdd0 <ACPI::open(int, int, void*)+0x158>
c000cef2:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c000cef5:	8b 00                	mov    eax,DWORD PTR [eax]
c000cef7:	83 c0 08             	add    eax,0x8
c000cefa:	8b 00                	mov    eax,DWORD PTR [eax]
c000cefc:	83 ec 0c             	sub    esp,0xc
c000ceff:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
c000cf02:	ff d0                	call   eax
c000cf04:	83 c4 10             	add    esp,0x10
c000cf07:	e9 c4 fe ff ff       	jmp    c000cdd0 <ACPI::open(int, int, void*)+0x158>
c000cf0c:	83 ec 0c             	sub    esp,0xc
c000cf0f:	8d 45 b8             	lea    eax,[ebp-0x48]
c000cf12:	50                   	push   eax
c000cf13:	e8 90 52 01 00       	call   c00221a8 <LinkedList<Device>::~LinkedList()>
c000cf18:	83 c4 10             	add    esp,0x10
c000cf1b:	8b 1d d4 d0 02 c0    	mov    ebx,DWORD PTR ds:0xc002d0d4
c000cf21:	83 ec 08             	sub    esp,0x8
c000cf24:	6a 01                	push   0x1
c000cf26:	68 67 3e 02 c0       	push   0xc0023e67
c000cf2b:	e8 fe 95 00 00       	call   c001652e <Thr::loadDLL(char const*, bool)>
c000cf30:	83 c4 10             	add    esp,0x10
c000cf33:	83 ec 08             	sub    esp,0x8
c000cf36:	53                   	push   ebx
c000cf37:	50                   	push   eax
c000cf38:	e8 52 98 00 00       	call   c001678f <Thr::executeDLL(unsigned long, void*)>
c000cf3d:	83 c4 10             	add    esp,0x10
c000cf40:	a1 84 cd 02 c0       	mov    eax,ds:0xc002cd84
c000cf45:	85 c0                	test   eax,eax
c000cf47:	0f 84 ef 00 00 00    	je     c000d03c <ACPI::open(int, int, void*)+0x3c4>
c000cf4d:	a1 88 cd 02 c0       	mov    eax,ds:0xc002cd88
c000cf52:	85 c0                	test   eax,eax
c000cf54:	0f 84 e2 00 00 00    	je     c000d03c <ACPI::open(int, int, void*)+0x3c4>
c000cf5a:	83 ec 0c             	sub    esp,0xc
c000cf5d:	68 84 3e 02 c0       	push   0xc0023e84
c000cf62:	e8 ce 02 00 00       	call   c000d235 <KeSetBootMessage(char const*)>
c000cf67:	83 c4 10             	add    esp,0x10
c000cf6a:	c7 45 c4 14 01 00 00 	mov    DWORD PTR [ebp-0x3c],0x114
c000cf71:	83 ec 0c             	sub    esp,0xc
c000cf74:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
c000cf77:	e8 00 2c 00 00       	call   c000fb7c <malloc>
c000cf7c:	83 c4 10             	add    esp,0x10
c000cf7f:	89 c3                	mov    ebx,eax
c000cf81:	a1 78 fa 02 c0       	mov    eax,ds:0xc002fa78
c000cf86:	83 ec 04             	sub    esp,0x4
c000cf89:	50                   	push   eax
c000cf8a:	68 a1 3e 02 c0       	push   0xc0023ea1
c000cf8f:	53                   	push   ebx
c000cf90:	e8 f3 b1 ff ff       	call   c0008188 <File::File(char const*, Process*)>
c000cf95:	83 c4 10             	add    esp,0x10
c000cf98:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c000cf9b:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c000cf9f:	74 1b                	je     c000cfbc <ACPI::open(int, int, void*)+0x344>
c000cfa1:	83 ec 0c             	sub    esp,0xc
c000cfa4:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
c000cfa7:	e8 be b4 ff ff       	call   c000846a <File::exists()>
c000cfac:	83 c4 10             	add    esp,0x10
c000cfaf:	0f b6 c0             	movzx  eax,al
c000cfb2:	85 c0                	test   eax,eax
c000cfb4:	74 06                	je     c000cfbc <ACPI::open(int, int, void*)+0x344>
c000cfb6:	b0 01                	mov    al,0x1
c000cfb8:	eb 06                	jmp    c000cfc0 <ACPI::open(int, int, void*)+0x348>
c000cfba:	66 90                	xchg   ax,ax
c000cfbc:	b0 00                	mov    al,0x0
c000cfbe:	66 90                	xchg   ax,ax
c000cfc0:	0f b6 c0             	movzx  eax,al
c000cfc3:	85 c0                	test   eax,eax
c000cfc5:	74 21                	je     c000cfe8 <ACPI::open(int, int, void*)+0x370>
c000cfc7:	83 ec 08             	sub    esp,0x8
c000cfca:	6a 01                	push   0x1
c000cfcc:	68 a1 3e 02 c0       	push   0xc0023ea1
c000cfd1:	e8 58 95 00 00       	call   c001652e <Thr::loadDLL(char const*, bool)>
c000cfd6:	83 c4 10             	add    esp,0x10
c000cfd9:	83 ec 08             	sub    esp,0x8
c000cfdc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000cfdf:	50                   	push   eax
c000cfe0:	e8 aa 97 00 00       	call   c001678f <Thr::executeDLL(unsigned long, void*)>
c000cfe5:	83 c4 10             	add    esp,0x10
c000cfe8:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c000cfec:	74 1e                	je     c000d00c <ACPI::open(int, int, void*)+0x394>
c000cfee:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c000cff2:	74 18                	je     c000d00c <ACPI::open(int, int, void*)+0x394>
c000cff4:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c000cff7:	8b 00                	mov    eax,DWORD PTR [eax]
c000cff9:	83 c0 08             	add    eax,0x8
c000cffc:	8b 00                	mov    eax,DWORD PTR [eax]
c000cffe:	83 ec 0c             	sub    esp,0xc
c000d001:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
c000d004:	ff d0                	call   eax
c000d006:	83 c4 10             	add    esp,0x10
c000d009:	8d 76 00             	lea    esi,[esi+0x0]
c000d00c:	a1 84 cd 02 c0       	mov    eax,ds:0xc002cd84
c000d011:	83 ec 08             	sub    esp,0x8
c000d014:	68 be 3e 02 c0       	push   0xc0023ebe
c000d019:	50                   	push   eax
c000d01a:	e8 f1 f2 ff ff       	call   c000c310 <findDataTable(unsigned char*, char*)>
c000d01f:	83 c4 10             	add    esp,0x10
c000d022:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c000d025:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c000d029:	74 11                	je     c000d03c <ACPI::open(int, int, void*)+0x3c4>
c000d02b:	83 ec 08             	sub    esp,0x8
c000d02e:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c000d031:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000d034:	e8 27 fc ff ff       	call   c000cc60 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c000d039:	83 c4 10             	add    esp,0x10
c000d03c:	b8 00 00 00 00       	mov    eax,0x0
c000d041:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000d044:	c9                   	leave  
c000d045:	c3                   	ret    
c000d046:	66 90                	xchg   ax,ax

c000d048 <KeAssertionFailed(char*, char const*, char const*, int)>:
c000d048:	81 ec 2c 02 00 00    	sub    esp,0x22c
c000d04e:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c000d055:	89 c2                	mov    edx,eax
c000d057:	c1 fa 1f             	sar    edx,0x1f
c000d05a:	83 ec 04             	sub    esp,0x4
c000d05d:	8d 4c 24 04          	lea    ecx,[esp+0x4]
c000d061:	51                   	push   ecx
c000d062:	52                   	push   edx
c000d063:	50                   	push   eax
c000d064:	e8 0b 29 00 00       	call   c000f974 <KeItoa(long long, char*)>
c000d069:	83 c4 10             	add    esp,0x10
c000d06c:	83 ec 08             	sub    esp,0x8
c000d06f:	68 8c 3f 02 c0       	push   0xc0023f8c
c000d074:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d078:	50                   	push   eax
c000d079:	e8 d2 35 ff ff       	call   c0000650 <strcpy>
c000d07e:	83 c4 10             	add    esp,0x10
c000d081:	83 ec 08             	sub    esp,0x8
c000d084:	ff b4 24 38 02 00 00 	push   DWORD PTR [esp+0x238]
c000d08b:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d08f:	50                   	push   eax
c000d090:	e8 db 37 ff ff       	call   c0000870 <strcat>
c000d095:	83 c4 10             	add    esp,0x10
c000d098:	83 ec 08             	sub    esp,0x8
c000d09b:	68 9a 3f 02 c0       	push   0xc0023f9a
c000d0a0:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d0a4:	50                   	push   eax
c000d0a5:	e8 c6 37 ff ff       	call   c0000870 <strcat>
c000d0aa:	83 c4 10             	add    esp,0x10
c000d0ad:	83 ec 08             	sub    esp,0x8
c000d0b0:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000d0b7:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d0bb:	50                   	push   eax
c000d0bc:	e8 af 37 ff ff       	call   c0000870 <strcat>
c000d0c1:	83 c4 10             	add    esp,0x10
c000d0c4:	83 ec 08             	sub    esp,0x8
c000d0c7:	68 9d 3f 02 c0       	push   0xc0023f9d
c000d0cc:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d0d0:	50                   	push   eax
c000d0d1:	e8 9a 37 ff ff       	call   c0000870 <strcat>
c000d0d6:	83 c4 10             	add    esp,0x10
c000d0d9:	83 ec 08             	sub    esp,0x8
c000d0dc:	ff b4 24 40 02 00 00 	push   DWORD PTR [esp+0x240]
c000d0e3:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d0e7:	50                   	push   eax
c000d0e8:	e8 83 37 ff ff       	call   c0000870 <strcat>
c000d0ed:	83 c4 10             	add    esp,0x10
c000d0f0:	83 ec 08             	sub    esp,0x8
c000d0f3:	68 9d 3f 02 c0       	push   0xc0023f9d
c000d0f8:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d0fc:	50                   	push   eax
c000d0fd:	e8 6e 37 ff ff       	call   c0000870 <strcat>
c000d102:	83 c4 10             	add    esp,0x10
c000d105:	83 ec 08             	sub    esp,0x8
c000d108:	8d 44 24 08          	lea    eax,[esp+0x8]
c000d10c:	50                   	push   eax
c000d10d:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d111:	50                   	push   eax
c000d112:	e8 59 37 ff ff       	call   c0000870 <strcat>
c000d117:	83 c4 10             	add    esp,0x10
c000d11a:	83 ec 0c             	sub    esp,0xc
c000d11d:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d121:	50                   	push   eax
c000d122:	e8 63 2d 00 00       	call   c000fe8a <KePanic(char const*)>
c000d127:	83 c4 10             	add    esp,0x10
c000d12a:	90                   	nop
c000d12b:	81 c4 2c 02 00 00    	add    esp,0x22c
c000d131:	c3                   	ret    

c000d132 <KeInitialiseAtexit()>:
c000d132:	83 ec 10             	sub    esp,0x10
c000d135:	6a 60                	push   0x60
c000d137:	6a 00                	push   0x0
c000d139:	68 60 d0 02 c0       	push   0xc002d060
c000d13e:	c7 05 e0 cf 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002cfe0,0x0
c000d148:	e8 a3 33 ff ff       	call   c00004f0 <memset>
c000d14d:	83 c4 1c             	add    esp,0x1c
c000d150:	c3                   	ret    

c000d151 <KeRegisterAtexit(void (*)(void*), void*)>:
c000d151:	a1 e0 cf 02 c0       	mov    eax,ds:0xc002cfe0
c000d156:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d15a:	89 14 85 60 d0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2fa0],edx
c000d161:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d165:	89 14 85 00 d0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3000],edx
c000d16c:	40                   	inc    eax
c000d16d:	a3 e0 cf 02 c0       	mov    ds:0xc002cfe0,eax
c000d172:	83 f8 17             	cmp    eax,0x17
c000d175:	7e 0d                	jle    c000d184 <KeRegisterAtexit(void (*)(void*), void*)+0x33>
c000d177:	c7 44 24 04 9f 3f 02 c0 	mov    DWORD PTR [esp+0x4],0xc0023f9f
c000d17f:	e9 06 2d 00 00       	jmp    c000fe8a <KePanic(char const*)>
c000d184:	c3                   	ret    

c000d185 <KeExecuteAtexit()>:
c000d185:	53                   	push   ebx
c000d186:	31 db                	xor    ebx,ebx
c000d188:	83 ec 08             	sub    esp,0x8
c000d18b:	39 1d e0 cf 02 c0    	cmp    DWORD PTR ds:0xc002cfe0,ebx
c000d191:	7e 50                	jle    c000d1e3 <KeExecuteAtexit()+0x5e>
c000d193:	8b 04 9d 60 d0 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd2fa0]
c000d19a:	85 c0                	test   eax,eax
c000d19c:	74 42                	je     c000d1e0 <KeExecuteAtexit()+0x5b>
c000d19e:	51                   	push   ecx
c000d19f:	50                   	push   eax
c000d1a0:	53                   	push   ebx
c000d1a1:	68 b8 3f 02 c0       	push   0xc0023fb8
c000d1a6:	e8 bb 9d ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000d1ab:	58                   	pop    eax
c000d1ac:	ff 34 9d 00 d0 02 c0 	push   DWORD PTR [ebx*4-0x3ffd3000]
c000d1b3:	ff 14 9d 60 d0 02 c0 	call   DWORD PTR [ebx*4-0x3ffd2fa0]
c000d1ba:	c7 04 24 da 3f 02 c0 	mov    DWORD PTR [esp],0xc0023fda
c000d1c1:	e8 a0 9d ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000d1c6:	c7 04 24 8c 46 02 c0 	mov    DWORD PTR [esp],0xc002468c
c000d1cd:	c7 04 9d 60 d0 02 c0 00 00 00 00 	mov    DWORD PTR [ebx*4-0x3ffd2fa0],0x0
c000d1d8:	e8 89 9d ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000d1dd:	83 c4 10             	add    esp,0x10
c000d1e0:	43                   	inc    ebx
c000d1e1:	eb a8                	jmp    c000d18b <KeExecuteAtexit()+0x6>
c000d1e3:	83 c4 08             	add    esp,0x8
c000d1e6:	5b                   	pop    ebx
c000d1e7:	c3                   	ret    

c000d1e8 <KeGetBootConfigurationFlag(BootConfigurationFlag)>:
c000d1e8:	8b 15 c0 d0 02 c0    	mov    edx,DWORD PTR ds:0xc002d0c0
c000d1ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d1f2:	21 d0                	and    eax,edx
c000d1f4:	0f 95 c0             	setne  al
c000d1f7:	c3                   	ret    

c000d1f8 <KeInitialiseBootConfigurationFlags()>:
c000d1f8:	b8 00 05 00 00       	mov    eax,0x500
c000d1fd:	8b 00                	mov    eax,DWORD PTR [eax]
c000d1ff:	a3 c0 d0 02 c0       	mov    ds:0xc002d0c0,eax
c000d204:	90                   	nop
c000d205:	c3                   	ret    

c000d206 <KeDisplaySplashScreen()>:
c000d206:	53                   	push   ebx
c000d207:	bb 01 00 00 00       	mov    ebx,0x1
c000d20c:	83 ec 08             	sub    esp,0x8
c000d20f:	43                   	inc    ebx
c000d210:	0f be 83 dd 3f 02 c0 	movsx  eax,BYTE PTR [ebx-0x3ffdc023]
c000d217:	85 c0                	test   eax,eax
c000d219:	74 15                	je     c000d230 <KeDisplaySplashScreen()+0x2a>
c000d21b:	83 ec 0c             	sub    esp,0xc
c000d21e:	6a 01                	push   0x1
c000d220:	53                   	push   ebx
c000d221:	6a 00                	push   0x0
c000d223:	6a 0f                	push   0xf
c000d225:	50                   	push   eax
c000d226:	e8 91 e6 00 00       	call   c001b8bc <HalConsoleWriteCharacter(char, int, int, int, int)>
c000d22b:	83 c4 20             	add    esp,0x20
c000d22e:	eb df                	jmp    c000d20f <KeDisplaySplashScreen()+0x9>
c000d230:	83 c4 08             	add    esp,0x8
c000d233:	5b                   	pop    ebx
c000d234:	c3                   	ret    

c000d235 <KeSetBootMessage(char const*)>:
c000d235:	57                   	push   edi
c000d236:	56                   	push   esi
c000d237:	53                   	push   ebx
c000d238:	81 ec a4 00 00 00    	sub    esp,0xa4
c000d23e:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c000d245:	68 9e 00 00 00       	push   0x9e
c000d24a:	6a 00                	push   0x0
c000d24c:	8d 74 24 0e          	lea    esi,[esp+0xe]
c000d250:	56                   	push   esi
c000d251:	e8 9a 32 ff ff       	call   c00004f0 <memset>
c000d256:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d259:	e8 22 33 ff ff       	call   c0000580 <strlen>
c000d25e:	ba 50 00 00 00       	mov    edx,0x50
c000d263:	83 c4 10             	add    esp,0x10
c000d266:	31 c9                	xor    ecx,ecx
c000d268:	29 c2                	sub    edx,eax
c000d26a:	83 e2 fe             	and    edx,0xfffffffe
c000d26d:	01 f2                	add    edx,esi
c000d26f:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c000d274:	84 c0                	test   al,al
c000d276:	74 0a                	je     c000d282 <KeSetBootMessage(char const*)+0x4d>
c000d278:	80 cc 07             	or     ah,0x7
c000d27b:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c000d27f:	41                   	inc    ecx
c000d280:	eb ed                	jmp    c000d26f <KeSetBootMessage(char const*)+0x3a>
c000d282:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c000d287:	b9 9e 00 00 00       	mov    ecx,0x9e
c000d28c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d28e:	50                   	push   eax
c000d28f:	50                   	push   eax
c000d290:	53                   	push   ebx
c000d291:	68 f2 3f 02 c0       	push   0xc0023ff2
c000d296:	e8 cb 9c ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000d29b:	81 c4 b0 00 00 00    	add    esp,0xb0
c000d2a1:	5b                   	pop    ebx
c000d2a2:	5e                   	pop    esi
c000d2a3:	5f                   	pop    edi
c000d2a4:	c3                   	ret    

c000d2a5 <__cxa_atexit>:
c000d2a5:	31 c0                	xor    eax,eax
c000d2a7:	c3                   	ret    

c000d2a8 <__cxa_finalize>:
c000d2a8:	c3                   	ret    

c000d2a9 <__stack_chk_fail>:
c000d2a9:	55                   	push   ebp
c000d2aa:	89 e5                	mov    ebp,esp
c000d2ac:	83 ec 10             	sub    esp,0x10
c000d2af:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d2b2:	68 00 40 02 c0       	push   0xc0024000
c000d2b7:	e8 aa 9c ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000d2bc:	58                   	pop    eax
c000d2bd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d2c0:	5a                   	pop    edx
c000d2c1:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d2c4:	68 00 40 02 c0       	push   0xc0024000
c000d2c9:	e8 98 9c ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000d2ce:	c7 04 24 08 40 02 c0 	mov    DWORD PTR [esp],0xc0024008
c000d2d5:	e8 b0 2b 00 00       	call   c000fe8a <KePanic(char const*)>
c000d2da:	83 c4 10             	add    esp,0x10
c000d2dd:	c9                   	leave  
c000d2de:	c3                   	ret    

c000d2df <__cxa_pure_virtual>:
c000d2df:	83 ec 18             	sub    esp,0x18
c000d2e2:	68 20 40 02 c0       	push   0xc0024020
c000d2e7:	e8 9e 2b 00 00       	call   c000fe8a <KePanic(char const*)>
c000d2ec:	83 c4 1c             	add    esp,0x1c
c000d2ef:	c3                   	ret    

c000d2f0 <operator new[](unsigned long)>:
c000d2f0:	e9 87 28 00 00       	jmp    c000fb7c <malloc>

c000d2f5 <operator delete(void*, unsigned long)>:
c000d2f5:	e9 a2 28 00 00       	jmp    c000fb9c <rfree>

c000d2fa <operator delete[](void*)>:
c000d2fa:	e9 9d 28 00 00       	jmp    c000fb9c <rfree>

c000d2ff <operator delete[](void*, unsigned long)>:
c000d2ff:	e9 98 28 00 00       	jmp    c000fb9c <rfree>

c000d304 <CUnlockScheduler>:
c000d304:	f0 83 2d 50 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa50,0x1
c000d30c:	a1 50 fa 02 c0       	mov    eax,ds:0xc002fa50
c000d311:	85 c0                	test   eax,eax
c000d313:	75 03                	jne    c000d318 <CUnlockScheduler+0x14>
c000d315:	fb                   	sti    
c000d316:	66 90                	xchg   ax,ax
c000d318:	90                   	nop
c000d319:	c3                   	ret    
c000d31a:	66 90                	xchg   ax,ax

c000d31c <CLockScheduler>:
c000d31c:	fa                   	cli    
c000d31d:	a1 50 fa 02 c0       	mov    eax,ds:0xc002fa50
c000d322:	83 c0 01             	add    eax,0x1
c000d325:	a3 50 fa 02 c0       	mov    ds:0xc002fa50,eax
c000d32a:	90                   	nop
c000d32b:	c3                   	ret    

c000d32c <CPrintf>:
c000d32c:	83 ec 0c             	sub    esp,0xc
c000d32f:	83 ec 08             	sub    esp,0x8
c000d332:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d336:	68 33 40 02 c0       	push   0xc0024033
c000d33b:	e8 26 9c ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000d340:	83 c4 10             	add    esp,0x10
c000d343:	90                   	nop
c000d344:	83 c4 0c             	add    esp,0xc
c000d347:	c3                   	ret    

c000d348 <CmOpen(char const*)>:
c000d348:	57                   	push   edi
c000d349:	56                   	push   esi
c000d34a:	53                   	push   ebx
c000d34b:	83 ec 1c             	sub    esp,0x1c
c000d34e:	6a 30                	push   0x30
c000d350:	e8 27 28 00 00       	call   c000fb7c <malloc>
c000d355:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c000d35c:	89 c3                	mov    ebx,eax
c000d35e:	e8 19 28 00 00       	call   c000fb7c <malloc>
c000d363:	83 c4 0c             	add    esp,0xc
c000d366:	ff 35 78 fa 02 c0    	push   DWORD PTR ds:0xc002fa78
c000d36c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d370:	89 c6                	mov    esi,eax
c000d372:	50                   	push   eax
c000d373:	e8 10 ae ff ff       	call   c0008188 <File::File(char const*, Process*)>
c000d378:	83 c4 0c             	add    esp,0xc
c000d37b:	89 33                	mov    DWORD PTR [ebx],esi
c000d37d:	8d 44 24 07          	lea    eax,[esp+0x7]
c000d381:	50                   	push   eax
c000d382:	8d 44 24 10          	lea    eax,[esp+0x10]
c000d386:	50                   	push   eax
c000d387:	56                   	push   esi
c000d388:	e8 1b b1 ff ff       	call   c00084a8 <File::stat(unsigned long long*, bool*)>
c000d38d:	5a                   	pop    edx
c000d38e:	59                   	pop    ecx
c000d38f:	6a 01                	push   0x1
c000d391:	ff 33                	push   DWORD PTR [ebx]
c000d393:	e8 0e ae ff ff       	call   c00081a6 <File::open(FileOpenMode)>
c000d398:	5e                   	pop    esi
c000d399:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d39d:	e8 da 27 00 00       	call   c000fb7c <malloc>
c000d3a2:	5a                   	pop    edx
c000d3a3:	8d 74 24 10          	lea    esi,[esp+0x10]
c000d3a7:	89 c7                	mov    edi,eax
c000d3a9:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d3ab:	8b 10                	mov    edx,DWORD PTR [eax]
c000d3ad:	56                   	push   esi
c000d3ae:	57                   	push   edi
c000d3af:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000d3b3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000d3b7:	50                   	push   eax
c000d3b8:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000d3bb:	83 c4 14             	add    esp,0x14
c000d3be:	ff 33                	push   DWORD PTR [ebx]
c000d3c0:	e8 3f ae ff ff       	call   c0008204 <File::close()>
c000d3c5:	59                   	pop    ecx
c000d3c6:	58                   	pop    eax
c000d3c7:	6a 13                	push   0x13
c000d3c9:	ff 33                	push   DWORD PTR [ebx]
c000d3cb:	e8 d6 ad ff ff       	call   c00081a6 <File::open(FileOpenMode)>
c000d3d0:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d3d2:	8b 10                	mov    edx,DWORD PTR [eax]
c000d3d4:	89 34 24             	mov    DWORD PTR [esp],esi
c000d3d7:	57                   	push   edi
c000d3d8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000d3dc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000d3e0:	50                   	push   eax
c000d3e1:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000d3e4:	83 c4 14             	add    esp,0x14
c000d3e7:	57                   	push   edi
c000d3e8:	e8 9f 27 00 00       	call   c000fb8c <free>
c000d3ed:	83 c4 10             	add    esp,0x10
c000d3f0:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000d3f3:	75 10                	jne    c000d405 <CmOpen(char const*)+0xbd>
c000d3f5:	83 ec 0c             	sub    esp,0xc
c000d3f8:	68 36 40 02 c0       	push   0xc0024036
c000d3fd:	e8 88 2a 00 00       	call   c000fe8a <KePanic(char const*)>
c000d402:	83 c4 10             	add    esp,0x10
c000d405:	50                   	push   eax
c000d406:	6a 00                	push   0x0
c000d408:	6a 00                	push   0x0
c000d40a:	ff 33                	push   DWORD PTR [ebx]
c000d40c:	8d 7b 05             	lea    edi,[ebx+0x5]
c000d40f:	e8 50 ae ff ff       	call   c0008264 <File::seek(unsigned long long)>
c000d414:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d416:	8b 10                	mov    edx,DWORD PTR [eax]
c000d418:	89 34 24             	mov    DWORD PTR [esp],esi
c000d41b:	57                   	push   edi
c000d41c:	6a 00                	push   0x0
c000d41e:	6a 2b                	push   0x2b
c000d420:	50                   	push   eax
c000d421:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000d424:	83 c4 1c             	add    esp,0x1c
c000d427:	6a 00                	push   0x0
c000d429:	6a 00                	push   0x0
c000d42b:	ff 33                	push   DWORD PTR [ebx]
c000d42d:	e8 32 ae ff ff       	call   c0008264 <File::seek(unsigned long long)>
c000d432:	83 c4 0c             	add    esp,0xc
c000d435:	6a 08                	push   0x8
c000d437:	68 47 40 02 c0       	push   0xc0024047
c000d43c:	57                   	push   edi
c000d43d:	e8 3e 2f ff ff       	call   c0000380 <memcmp>
c000d442:	83 c4 10             	add    esp,0x10
c000d445:	85 c0                	test   eax,eax
c000d447:	74 10                	je     c000d459 <CmOpen(char const*)+0x111>
c000d449:	83 ec 0c             	sub    esp,0xc
c000d44c:	68 50 40 02 c0       	push   0xc0024050
c000d451:	e8 34 2a 00 00       	call   c000fe8a <KePanic(char const*)>
c000d456:	83 c4 10             	add    esp,0x10
c000d459:	c6 43 04 01          	mov    BYTE PTR [ebx+0x4],0x1
c000d45d:	83 c4 10             	add    esp,0x10
c000d460:	89 d8                	mov    eax,ebx
c000d462:	5b                   	pop    ebx
c000d463:	5e                   	pop    esi
c000d464:	5f                   	pop    edi
c000d465:	c3                   	ret    

c000d466 <CmClose(Reghive_Tag*)>:
c000d466:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d46a:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c000d46e:	74 0b                	je     c000d47b <CmClose(Reghive_Tag*)+0x15>
c000d470:	8b 00                	mov    eax,DWORD PTR [eax]
c000d472:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000d476:	e9 89 ad ff ff       	jmp    c0008204 <File::close()>
c000d47b:	c3                   	ret    

c000d47c <CmReadExtent(Reghive_Tag*, int, unsigned char*)>:
c000d47c:	53                   	push   ebx
c000d47d:	83 ec 18             	sub    esp,0x18
c000d480:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000d484:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c000d488:	74 29                	je     c000d4b3 <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c000d48a:	50                   	push   eax
c000d48b:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c000d490:	99                   	cdq    
c000d491:	52                   	push   edx
c000d492:	50                   	push   eax
c000d493:	ff 33                	push   DWORD PTR [ebx]
c000d495:	e8 ca ad ff ff       	call   c0008264 <File::seek(unsigned long long)>
c000d49a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d49c:	5a                   	pop    edx
c000d49d:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000d4a1:	8b 10                	mov    edx,DWORD PTR [eax]
c000d4a3:	51                   	push   ecx
c000d4a4:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000d4a8:	6a 00                	push   0x0
c000d4aa:	6a 2b                	push   0x2b
c000d4ac:	50                   	push   eax
c000d4ad:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000d4b0:	83 c4 20             	add    esp,0x20
c000d4b3:	83 c4 18             	add    esp,0x18
c000d4b6:	5b                   	pop    ebx
c000d4b7:	c3                   	ret    

c000d4b8 <CmGetString(Reghive_Tag*, int, char*)>:
c000d4b8:	55                   	push   ebp
c000d4b9:	57                   	push   edi
c000d4ba:	56                   	push   esi
c000d4bb:	53                   	push   ebx
c000d4bc:	31 db                	xor    ebx,ebx
c000d4be:	83 ec 70             	sub    esp,0x70
c000d4c1:	8d 44 24 0e          	lea    eax,[esp+0xe]
c000d4c5:	8b ac 24 84 00 00 00 	mov    ebp,DWORD PTR [esp+0x84]
c000d4cc:	50                   	push   eax
c000d4cd:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c000d4d4:	55                   	push   ebp
c000d4d5:	e8 a2 ff ff ff       	call   c000d47c <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d4da:	83 c4 10             	add    esp,0x10
c000d4dd:	0f b6 44 1c 22       	movzx  eax,BYTE PTR [esp+ebx*1+0x22]
c000d4e2:	c1 e0 08             	shl    eax,0x8
c000d4e5:	89 c2                	mov    edx,eax
c000d4e7:	0f b6 44 1c 21       	movzx  eax,BYTE PTR [esp+ebx*1+0x21]
c000d4ec:	09 d0                	or     eax,edx
c000d4ee:	0f b6 54 1c 20       	movzx  edx,BYTE PTR [esp+ebx*1+0x20]
c000d4f3:	c1 e0 08             	shl    eax,0x8
c000d4f6:	09 d0                	or     eax,edx
c000d4f8:	74 25                	je     c000d51f <CmGetString(Reghive_Tag*, int, char*)+0x67>
c000d4fa:	52                   	push   edx
c000d4fb:	8d 54 24 39          	lea    edx,[esp+0x39]
c000d4ff:	52                   	push   edx
c000d500:	6b fb 0d             	imul   edi,ebx,0xd
c000d503:	50                   	push   eax
c000d504:	55                   	push   ebp
c000d505:	e8 72 ff ff ff       	call   c000d47c <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d50a:	8d 74 24 49          	lea    esi,[esp+0x49]
c000d50e:	b9 27 00 00 00       	mov    ecx,0x27
c000d513:	03 bc 24 98 00 00 00 	add    edi,DWORD PTR [esp+0x98]
c000d51a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d51c:	83 c4 10             	add    esp,0x10
c000d51f:	83 c3 03             	add    ebx,0x3
c000d522:	83 fb 15             	cmp    ebx,0x15
c000d525:	75 b6                	jne    c000d4dd <CmGetString(Reghive_Tag*, int, char*)+0x25>
c000d527:	83 c4 6c             	add    esp,0x6c
c000d52a:	5b                   	pop    ebx
c000d52b:	5e                   	pop    esi
c000d52c:	5f                   	pop    edi
c000d52d:	5d                   	pop    ebp
c000d52e:	c3                   	ret    

c000d52f <CmEnterDirectory(Reghive_Tag*, int)>:
c000d52f:	83 ec 40             	sub    esp,0x40
c000d532:	8d 44 24 09          	lea    eax,[esp+0x9]
c000d536:	50                   	push   eax
c000d537:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d53b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d53f:	e8 38 ff ff ff       	call   c000d47c <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d544:	83 c4 10             	add    esp,0x10
c000d547:	83 c8 ff             	or     eax,0xffffffff
c000d54a:	80 7c 24 05 4e       	cmp    BYTE PTR [esp+0x5],0x4e
c000d54f:	75 19                	jne    c000d56a <CmEnterDirectory(Reghive_Tag*, int)+0x3b>
c000d551:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000d556:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c000d55b:	c1 e0 08             	shl    eax,0x8
c000d55e:	09 c2                	or     edx,eax
c000d560:	0f b6 44 24 1d       	movzx  eax,BYTE PTR [esp+0x1d]
c000d565:	c1 e0 10             	shl    eax,0x10
c000d568:	09 d0                	or     eax,edx
c000d56a:	83 c4 3c             	add    esp,0x3c
c000d56d:	c3                   	ret    

c000d56e <CmGetNext(Reghive_Tag*, int)>:
c000d56e:	83 ec 40             	sub    esp,0x40
c000d571:	8d 44 24 09          	lea    eax,[esp+0x9]
c000d575:	50                   	push   eax
c000d576:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d57a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d57e:	e8 f9 fe ff ff       	call   c000d47c <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d583:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c000d588:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c000d58d:	c1 e0 08             	shl    eax,0x8
c000d590:	09 c2                	or     edx,eax
c000d592:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c000d597:	83 c4 4c             	add    esp,0x4c
c000d59a:	c1 e0 10             	shl    eax,0x10
c000d59d:	09 d0                	or     eax,edx
c000d59f:	c3                   	ret    

c000d5a0 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>:
c000d5a0:	53                   	push   ebx
c000d5a1:	83 ec 18             	sub    esp,0x18
c000d5a4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000d5a8:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c000d5ac:	74 29                	je     c000d5d7 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c000d5ae:	50                   	push   eax
c000d5af:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c000d5b4:	99                   	cdq    
c000d5b5:	52                   	push   edx
c000d5b6:	50                   	push   eax
c000d5b7:	ff 33                	push   DWORD PTR [ebx]
c000d5b9:	e8 a6 ac ff ff       	call   c0008264 <File::seek(unsigned long long)>
c000d5be:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d5c0:	5a                   	pop    edx
c000d5c1:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000d5c5:	8b 10                	mov    edx,DWORD PTR [eax]
c000d5c7:	51                   	push   ecx
c000d5c8:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000d5cc:	6a 00                	push   0x0
c000d5ce:	6a 2b                	push   0x2b
c000d5d0:	50                   	push   eax
c000d5d1:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000d5d4:	83 c4 20             	add    esp,0x20
c000d5d7:	83 c4 18             	add    esp,0x18
c000d5da:	5b                   	pop    ebx
c000d5db:	c3                   	ret    

c000d5dc <CmFreeExtent(Reghive_Tag*, int)>:
c000d5dc:	53                   	push   ebx
c000d5dd:	83 ec 3c             	sub    esp,0x3c
c000d5e0:	6a 2b                	push   0x2b
c000d5e2:	6a 00                	push   0x0
c000d5e4:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c000d5e8:	53                   	push   ebx
c000d5e9:	e8 02 2f ff ff       	call   c00004f0 <memset>
c000d5ee:	83 c4 0c             	add    esp,0xc
c000d5f1:	53                   	push   ebx
c000d5f2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d5f6:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d5fa:	e8 a1 ff ff ff       	call   c000d5a0 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000d5ff:	83 c4 48             	add    esp,0x48
c000d602:	5b                   	pop    ebx
c000d603:	c3                   	ret    

c000d604 <CmUpdateHeader(Reghive_Tag*)>:
c000d604:	83 ec 0c             	sub    esp,0xc
c000d607:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d60b:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c000d60f:	74 10                	je     c000d621 <CmUpdateHeader(Reghive_Tag*)+0x1d>
c000d611:	52                   	push   edx
c000d612:	8d 50 05             	lea    edx,[eax+0x5]
c000d615:	52                   	push   edx
c000d616:	6a 00                	push   0x0
c000d618:	50                   	push   eax
c000d619:	e8 82 ff ff ff       	call   c000d5a0 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000d61e:	83 c4 10             	add    esp,0x10
c000d621:	83 c4 0c             	add    esp,0xc
c000d624:	c3                   	ret    

c000d625 <CmExpand(Reghive_Tag*, int)>:
c000d625:	55                   	push   ebp
c000d626:	57                   	push   edi
c000d627:	83 cf ff             	or     edi,0xffffffff
c000d62a:	56                   	push   esi
c000d62b:	53                   	push   ebx
c000d62c:	83 ec 3c             	sub    esp,0x3c
c000d62f:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c000d633:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000d637:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c000d63b:	74 59                	je     c000d696 <CmExpand(Reghive_Tag*, int)+0x71>
c000d63d:	50                   	push   eax
c000d63e:	31 d2                	xor    edx,edx
c000d640:	6b 43 0d 2b          	imul   eax,DWORD PTR [ebx+0xd],0x2b
c000d644:	31 ff                	xor    edi,edi
c000d646:	52                   	push   edx
c000d647:	50                   	push   eax
c000d648:	ff 33                	push   DWORD PTR [ebx]
c000d64a:	e8 15 ac ff ff       	call   c0008264 <File::seek(unsigned long long)>
c000d64f:	83 c4 0c             	add    esp,0xc
c000d652:	6a 2b                	push   0x2b
c000d654:	6a 00                	push   0x0
c000d656:	8d 6c 24 11          	lea    ebp,[esp+0x11]
c000d65a:	55                   	push   ebp
c000d65b:	e8 90 2e ff ff       	call   c00004f0 <memset>
c000d660:	83 c4 10             	add    esp,0x10
c000d663:	39 f7                	cmp    edi,esi
c000d665:	7d 1b                	jge    c000d682 <CmExpand(Reghive_Tag*, int)+0x5d>
c000d667:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d669:	83 ec 0c             	sub    esp,0xc
c000d66c:	47                   	inc    edi
c000d66d:	8d 4c 24 0c          	lea    ecx,[esp+0xc]
c000d671:	8b 10                	mov    edx,DWORD PTR [eax]
c000d673:	51                   	push   ecx
c000d674:	55                   	push   ebp
c000d675:	6a 00                	push   0x0
c000d677:	6a 2b                	push   0x2b
c000d679:	50                   	push   eax
c000d67a:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000d67d:	83 c4 20             	add    esp,0x20
c000d680:	eb e1                	jmp    c000d663 <CmExpand(Reghive_Tag*, int)+0x3e>
c000d682:	8b 7b 0d             	mov    edi,DWORD PTR [ebx+0xd]
c000d685:	83 ec 0c             	sub    esp,0xc
c000d688:	01 fe                	add    esi,edi
c000d68a:	89 73 0d             	mov    DWORD PTR [ebx+0xd],esi
c000d68d:	53                   	push   ebx
c000d68e:	e8 71 ff ff ff       	call   c000d604 <CmUpdateHeader(Reghive_Tag*)>
c000d693:	83 c4 10             	add    esp,0x10
c000d696:	83 c4 3c             	add    esp,0x3c
c000d699:	89 f8                	mov    eax,edi
c000d69b:	5b                   	pop    ebx
c000d69c:	5e                   	pop    esi
c000d69d:	5f                   	pop    edi
c000d69e:	5d                   	pop    ebp
c000d69f:	c3                   	ret    

c000d6a0 <CmFindUnusedExtent(Reghive_Tag*)>:
c000d6a0:	55                   	push   ebp
c000d6a1:	57                   	push   edi
c000d6a2:	56                   	push   esi
c000d6a3:	53                   	push   ebx
c000d6a4:	83 cb ff             	or     ebx,0xffffffff
c000d6a7:	83 ec 1c             	sub    esp,0x1c
c000d6aa:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000d6ae:	80 7d 04 00          	cmp    BYTE PTR [ebp+0x4],0x0
c000d6b2:	74 68                	je     c000d71c <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c000d6b4:	51                   	push   ecx
c000d6b5:	be 2b 00 00 00       	mov    esi,0x2b
c000d6ba:	6a 00                	push   0x0
c000d6bc:	31 ff                	xor    edi,edi
c000d6be:	6a 00                	push   0x0
c000d6c0:	31 db                	xor    ebx,ebx
c000d6c2:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d6c5:	e8 9a ab ff ff       	call   c0008264 <File::seek(unsigned long long)>
c000d6ca:	83 c4 10             	add    esp,0x10
c000d6cd:	39 5d 0d             	cmp    DWORD PTR [ebp+0xd],ebx
c000d6d0:	76 3b                	jbe    c000d70d <CmFindUnusedExtent(Reghive_Tag*)+0x6d>
c000d6d2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d6d5:	83 ec 0c             	sub    esp,0xc
c000d6d8:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000d6dc:	8b 10                	mov    edx,DWORD PTR [eax]
c000d6de:	51                   	push   ecx
c000d6df:	8d 4c 24 1b          	lea    ecx,[esp+0x1b]
c000d6e3:	51                   	push   ecx
c000d6e4:	6a 00                	push   0x0
c000d6e6:	6a 01                	push   0x1
c000d6e8:	50                   	push   eax
c000d6e9:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000d6ec:	83 c4 20             	add    esp,0x20
c000d6ef:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000d6f4:	74 26                	je     c000d71c <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c000d6f6:	52                   	push   edx
c000d6f7:	43                   	inc    ebx
c000d6f8:	57                   	push   edi
c000d6f9:	56                   	push   esi
c000d6fa:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d6fd:	e8 62 ab ff ff       	call   c0008264 <File::seek(unsigned long long)>
c000d702:	83 c6 2b             	add    esi,0x2b
c000d705:	83 d7 00             	adc    edi,0x0
c000d708:	83 c4 10             	add    esp,0x10
c000d70b:	eb c0                	jmp    c000d6cd <CmFindUnusedExtent(Reghive_Tag*)+0x2d>
c000d70d:	50                   	push   eax
c000d70e:	50                   	push   eax
c000d70f:	6a 40                	push   0x40
c000d711:	55                   	push   ebp
c000d712:	e8 0e ff ff ff       	call   c000d625 <CmExpand(Reghive_Tag*, int)>
c000d717:	83 c4 10             	add    esp,0x10
c000d71a:	89 c3                	mov    ebx,eax
c000d71c:	83 c4 1c             	add    esp,0x1c
c000d71f:	89 d8                	mov    eax,ebx
c000d721:	5b                   	pop    ebx
c000d722:	5e                   	pop    esi
c000d723:	5f                   	pop    edi
c000d724:	5d                   	pop    ebp
c000d725:	c3                   	ret    

c000d726 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>:
c000d726:	55                   	push   ebp
c000d727:	57                   	push   edi
c000d728:	56                   	push   esi
c000d729:	53                   	push   ebx
c000d72a:	81 ec 88 00 00 00    	sub    esp,0x88
c000d730:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c000d737:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000d73e:	e8 5d ff ff ff       	call   c000d6a0 <CmFindUnusedExtent(Reghive_Tag*)>
c000d743:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000d747:	83 c4 0c             	add    esp,0xc
c000d74a:	6a 2b                	push   0x2b
c000d74c:	6a 00                	push   0x0
c000d74e:	8d 6c 24 26          	lea    ebp,[esp+0x26]
c000d752:	55                   	push   ebp
c000d753:	e8 98 2d ff ff       	call   c00004f0 <memset>
c000d758:	83 c4 10             	add    esp,0x10
c000d75b:	85 db                	test   ebx,ebx
c000d75d:	74 12                	je     c000d771 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x4b>
c000d75f:	51                   	push   ecx
c000d760:	55                   	push   ebp
c000d761:	53                   	push   ebx
c000d762:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000d769:	e8 0e fd ff ff       	call   c000d47c <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d76e:	83 c4 10             	add    esp,0x10
c000d771:	8d 7c 24 45          	lea    edi,[esp+0x45]
c000d775:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c000d77c:	b9 2b 00 00 00       	mov    ecx,0x2b
c000d781:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d783:	85 db                	test   ebx,ebx
c000d785:	74 49                	je     c000d7d0 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xaa>
c000d787:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c000d78c:	0f b6 4c 24 1b       	movzx  ecx,BYTE PTR [esp+0x1b]
c000d791:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d795:	c1 e0 08             	shl    eax,0x8
c000d798:	81 e2 ff ff ff 00    	and    edx,0xffffff
c000d79e:	09 c8                	or     eax,ecx
c000d7a0:	74 11                	je     c000d7b3 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x8d>
c000d7a2:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c000d7a6:	88 64 24 47          	mov    BYTE PTR [esp+0x47],ah
c000d7aa:	c1 e8 10             	shr    eax,0x10
c000d7ad:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c000d7b1:	eb 0f                	jmp    c000d7c2 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x9c>
c000d7b3:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c000d7b8:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c000d7bd:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c000d7c2:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c000d7c6:	c1 ea 08             	shr    edx,0x8
c000d7c9:	66 89 54 24 1c       	mov    WORD PTR [esp+0x1c],dx
c000d7ce:	eb 0f                	jmp    c000d7df <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xb9>
c000d7d0:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c000d7d5:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c000d7da:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c000d7df:	52                   	push   edx
c000d7e0:	8d 44 24 49          	lea    eax,[esp+0x49]
c000d7e4:	50                   	push   eax
c000d7e5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d7e9:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000d7f0:	e8 ab fd ff ff       	call   c000d5a0 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000d7f5:	83 c4 10             	add    esp,0x10
c000d7f8:	85 db                	test   ebx,ebx
c000d7fa:	74 12                	je     c000d80e <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xe8>
c000d7fc:	50                   	push   eax
c000d7fd:	55                   	push   ebp
c000d7fe:	53                   	push   ebx
c000d7ff:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000d806:	e8 95 fd ff ff       	call   c000d5a0 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000d80b:	83 c4 10             	add    esp,0x10
c000d80e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d812:	83 c4 7c             	add    esp,0x7c
c000d815:	5b                   	pop    ebx
c000d816:	5e                   	pop    esi
c000d817:	5f                   	pop    edi
c000d818:	5d                   	pop    ebp
c000d819:	c3                   	ret    

c000d81a <CmSetString(Reghive_Tag*, int, char const*)>:
c000d81a:	55                   	push   ebp
c000d81b:	57                   	push   edi
c000d81c:	56                   	push   esi
c000d81d:	53                   	push   ebx
c000d81e:	bb 27 00 00 00       	mov    ebx,0x27
c000d823:	81 ec 88 00 00 00    	sub    esp,0x88
c000d829:	8b bc 24 9c 00 00 00 	mov    edi,DWORD PTR [esp+0x9c]
c000d830:	ff b4 24 a4 00 00 00 	push   DWORD PTR [esp+0xa4]
c000d837:	e8 44 2d ff ff       	call   c0000580 <strlen>
c000d83c:	8d 48 26             	lea    ecx,[eax+0x26]
c000d83f:	89 c8                	mov    eax,ecx
c000d841:	99                   	cdq    
c000d842:	f7 fb                	idiv   ebx
c000d844:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000d848:	83 c4 10             	add    esp,0x10
c000d84b:	81 f9 37 01 00 00    	cmp    ecx,0x137
c000d851:	7e 10                	jle    c000d863 <CmSetString(Reghive_Tag*, int, char const*)+0x49>
c000d853:	83 ec 0c             	sub    esp,0xc
c000d856:	68 61 40 02 c0       	push   0xc0024061
c000d85b:	e8 2a 26 00 00       	call   c000fe8a <KePanic(char const*)>
c000d860:	83 c4 10             	add    esp,0x10
c000d863:	53                   	push   ebx
c000d864:	31 ed                	xor    ebp,ebp
c000d866:	8d 5c 24 1e          	lea    ebx,[esp+0x1e]
c000d86a:	53                   	push   ebx
c000d86b:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000d872:	57                   	push   edi
c000d873:	e8 04 fc ff ff       	call   c000d47c <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d878:	83 c4 10             	add    esp,0x10
c000d87b:	0f b6 73 18          	movzx  esi,BYTE PTR [ebx+0x18]
c000d87f:	89 f0                	mov    eax,esi
c000d881:	0f b6 73 17          	movzx  esi,BYTE PTR [ebx+0x17]
c000d885:	c1 e0 08             	shl    eax,0x8
c000d888:	09 c6                	or     esi,eax
c000d88a:	0f b6 43 16          	movzx  eax,BYTE PTR [ebx+0x16]
c000d88e:	c1 e6 08             	shl    esi,0x8
c000d891:	09 c6                	or     esi,eax
c000d893:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c000d897:	7e 72                	jle    c000d90b <CmSetString(Reghive_Tag*, int, char const*)+0xf1>
c000d899:	85 f6                	test   esi,esi
c000d89b:	75 25                	jne    c000d8c2 <CmSetString(Reghive_Tag*, int, char const*)+0xa8>
c000d89d:	c6 44 24 45 13       	mov    BYTE PTR [esp+0x45],0x13
c000d8a2:	8d 44 24 45          	lea    eax,[esp+0x45]
c000d8a6:	50                   	push   eax
c000d8a7:	6a 00                	push   0x0
c000d8a9:	6a 00                	push   0x0
c000d8ab:	57                   	push   edi
c000d8ac:	e8 75 fe ff ff       	call   c000d726 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000d8b1:	83 c4 10             	add    esp,0x10
c000d8b4:	88 43 16             	mov    BYTE PTR [ebx+0x16],al
c000d8b7:	89 c6                	mov    esi,eax
c000d8b9:	88 63 17             	mov    BYTE PTR [ebx+0x17],ah
c000d8bc:	c1 f8 10             	sar    eax,0x10
c000d8bf:	88 43 18             	mov    BYTE PTR [ebx+0x18],al
c000d8c2:	51                   	push   ecx
c000d8c3:	8d 54 24 49          	lea    edx,[esp+0x49]
c000d8c7:	52                   	push   edx
c000d8c8:	56                   	push   esi
c000d8c9:	57                   	push   edi
c000d8ca:	e8 ad fb ff ff       	call   c000d47c <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d8cf:	83 c4 0c             	add    esp,0xc
c000d8d2:	6a 27                	push   0x27
c000d8d4:	6a 00                	push   0x0
c000d8d6:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c000d8da:	51                   	push   ecx
c000d8db:	e8 10 2c ff ff       	call   c00004f0 <memset>
c000d8e0:	6b c5 27             	imul   eax,ebp,0x27
c000d8e3:	83 c4 0c             	add    esp,0xc
c000d8e6:	6a 27                	push   0x27
c000d8e8:	03 84 24 a0 00 00 00 	add    eax,DWORD PTR [esp+0xa0]
c000d8ef:	50                   	push   eax
c000d8f0:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c000d8f4:	51                   	push   ecx
c000d8f5:	e8 96 2d ff ff       	call   c0000690 <strncpy>
c000d8fa:	83 c4 0c             	add    esp,0xc
c000d8fd:	8d 54 24 49          	lea    edx,[esp+0x49]
c000d901:	52                   	push   edx
c000d902:	56                   	push   esi
c000d903:	57                   	push   edi
c000d904:	e8 97 fc ff ff       	call   c000d5a0 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000d909:	eb 19                	jmp    c000d924 <CmSetString(Reghive_Tag*, int, char const*)+0x10a>
c000d90b:	85 f6                	test   esi,esi
c000d90d:	74 18                	je     c000d927 <CmSetString(Reghive_Tag*, int, char const*)+0x10d>
c000d90f:	52                   	push   edx
c000d910:	52                   	push   edx
c000d911:	56                   	push   esi
c000d912:	57                   	push   edi
c000d913:	e8 c4 fc ff ff       	call   c000d5dc <CmFreeExtent(Reghive_Tag*, int)>
c000d918:	c6 43 16 00          	mov    BYTE PTR [ebx+0x16],0x0
c000d91c:	c6 43 17 00          	mov    BYTE PTR [ebx+0x17],0x0
c000d920:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c000d924:	83 c4 10             	add    esp,0x10
c000d927:	45                   	inc    ebp
c000d928:	83 c3 03             	add    ebx,0x3
c000d92b:	83 fd 07             	cmp    ebp,0x7
c000d92e:	0f 85 47 ff ff ff    	jne    c000d87b <CmSetString(Reghive_Tag*, int, char const*)+0x61>
c000d934:	50                   	push   eax
c000d935:	8d 44 24 1e          	lea    eax,[esp+0x1e]
c000d939:	50                   	push   eax
c000d93a:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000d941:	57                   	push   edi
c000d942:	e8 59 fc ff ff       	call   c000d5a0 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000d947:	81 c4 8c 00 00 00    	add    esp,0x8c
c000d94d:	5b                   	pop    ebx
c000d94e:	5e                   	pop    esi
c000d94f:	5f                   	pop    edi
c000d950:	5d                   	pop    ebp
c000d951:	c3                   	ret    

c000d952 <CmGetMatch(char*, char*, bool, bool*)>:
c000d952:	56                   	push   esi
c000d953:	53                   	push   ebx
c000d954:	50                   	push   eax
c000d955:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000d95a:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000d95e:	74 25                	je     c000d985 <CmGetMatch(char*, char*, bool, bool*)+0x33>
c000d960:	c6 06 01             	mov    BYTE PTR [esi],0x1
c000d963:	31 db                	xor    ebx,ebx
c000d965:	50                   	push   eax
c000d966:	50                   	push   eax
c000d967:	8d 04 9d 20 68 02 c0 	lea    eax,[ebx*4-0x3ffd97e0]
c000d96e:	50                   	push   eax
c000d96f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d973:	e8 08 2e ff ff       	call   c0000780 <strcmp>
c000d978:	83 c4 10             	add    esp,0x10
c000d97b:	85 c0                	test   eax,eax
c000d97d:	74 2e                	je     c000d9ad <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c000d97f:	43                   	inc    ebx
c000d980:	83 fb 3f             	cmp    ebx,0x3f
c000d983:	75 e0                	jne    c000d965 <CmGetMatch(char*, char*, bool, bool*)+0x13>
c000d985:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000d988:	31 db                	xor    ebx,ebx
c000d98a:	51                   	push   ecx
c000d98b:	51                   	push   ecx
c000d98c:	8d 04 9d 20 68 02 c0 	lea    eax,[ebx*4-0x3ffd97e0]
c000d993:	50                   	push   eax
c000d994:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000d998:	e8 e3 2d ff ff       	call   c0000780 <strcmp>
c000d99d:	83 c4 10             	add    esp,0x10
c000d9a0:	85 c0                	test   eax,eax
c000d9a2:	74 09                	je     c000d9ad <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c000d9a4:	43                   	inc    ebx
c000d9a5:	83 fb 3f             	cmp    ebx,0x3f
c000d9a8:	75 e0                	jne    c000d98a <CmGetMatch(char*, char*, bool, bool*)+0x38>
c000d9aa:	83 cb ff             	or     ebx,0xffffffff
c000d9ad:	5a                   	pop    edx
c000d9ae:	89 d8                	mov    eax,ebx
c000d9b0:	5b                   	pop    ebx
c000d9b1:	5e                   	pop    esi
c000d9b2:	c3                   	ret    

c000d9b3 <CmAddShift(unsigned int*, int*, unsigned char, int)>:
c000d9b3:	55                   	push   ebp
c000d9b4:	31 c0                	xor    eax,eax
c000d9b6:	57                   	push   edi
c000d9b7:	56                   	push   esi
c000d9b8:	53                   	push   ebx
c000d9b9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d9bd:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000d9c1:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000d9c5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d9c9:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c000d9cb:	8d 2c 31             	lea    ebp,[ecx+esi*1]
c000d9ce:	83 fd 1f             	cmp    ebp,0x1f
c000d9d1:	7f 0b                	jg     c000d9de <CmAddShift(unsigned int*, int*, unsigned char, int)+0x2b>
c000d9d3:	0f b6 c2             	movzx  eax,dl
c000d9d6:	d3 e0                	shl    eax,cl
c000d9d8:	09 07                	or     DWORD PTR [edi],eax
c000d9da:	b0 01                	mov    al,0x1
c000d9dc:	01 33                	add    DWORD PTR [ebx],esi
c000d9de:	5b                   	pop    ebx
c000d9df:	5e                   	pop    esi
c000d9e0:	5f                   	pop    edi
c000d9e1:	5d                   	pop    ebp
c000d9e2:	c3                   	ret    

c000d9e3 <CmGetShift(unsigned int*, int*, int, bool*)>:
c000d9e3:	57                   	push   edi
c000d9e4:	56                   	push   esi
c000d9e5:	53                   	push   ebx
c000d9e6:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000d9ea:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000d9ee:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000d9f2:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000d9f6:	39 0b                	cmp    DWORD PTR [ebx],ecx
c000d9f8:	7c 17                	jl     c000da11 <CmGetShift(unsigned int*, int*, int, bool*)+0x2e>
c000d9fa:	8b 17                	mov    edx,DWORD PTR [edi]
c000d9fc:	b8 01 00 00 00       	mov    eax,0x1
c000da01:	d3 e0                	shl    eax,cl
c000da03:	48                   	dec    eax
c000da04:	21 d0                	and    eax,edx
c000da06:	d3 ea                	shr    edx,cl
c000da08:	89 17                	mov    DWORD PTR [edi],edx
c000da0a:	29 0b                	sub    DWORD PTR [ebx],ecx
c000da0c:	c6 06 01             	mov    BYTE PTR [esi],0x1
c000da0f:	eb 05                	jmp    c000da16 <CmGetShift(unsigned int*, int*, int, bool*)+0x33>
c000da11:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000da14:	31 c0                	xor    eax,eax
c000da16:	5b                   	pop    ebx
c000da17:	5e                   	pop    esi
c000da18:	5f                   	pop    edi
c000da19:	c3                   	ret    

c000da1a <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>:
c000da1a:	83 ec 40             	sub    esp,0x40
c000da1d:	8d 44 24 09          	lea    eax,[esp+0x9]
c000da21:	50                   	push   eax
c000da22:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000da26:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000da2a:	e8 4d fa ff ff       	call   c000d47c <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000da2f:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000da33:	8b 54 24 2b          	mov    edx,DWORD PTR [esp+0x2b]
c000da37:	8b 4c 24 2f          	mov    ecx,DWORD PTR [esp+0x2f]
c000da3b:	89 10                	mov    DWORD PTR [eax],edx
c000da3d:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000da40:	83 c4 4c             	add    esp,0x4c
c000da43:	c3                   	ret    

c000da44 <CmSetInteger(Reghive_Tag*, int, unsigned long long)>:
c000da44:	55                   	push   ebp
c000da45:	57                   	push   edi
c000da46:	56                   	push   esi
c000da47:	53                   	push   ebx
c000da48:	83 ec 40             	sub    esp,0x40
c000da4b:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c000da4f:	8d 5c 24 09          	lea    ebx,[esp+0x9]
c000da53:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c000da57:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000da5b:	53                   	push   ebx
c000da5c:	56                   	push   esi
c000da5d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000da61:	e8 16 fa ff ff       	call   c000d47c <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000da66:	89 7c 24 2b          	mov    DWORD PTR [esp+0x2b],edi
c000da6a:	89 6c 24 2f          	mov    DWORD PTR [esp+0x2f],ebp
c000da6e:	83 c4 0c             	add    esp,0xc
c000da71:	53                   	push   ebx
c000da72:	56                   	push   esi
c000da73:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000da77:	e8 24 fb ff ff       	call   c000d5a0 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000da7c:	83 c4 4c             	add    esp,0x4c
c000da7f:	5b                   	pop    ebx
c000da80:	5e                   	pop    esi
c000da81:	5f                   	pop    edi
c000da82:	5d                   	pop    ebp
c000da83:	c3                   	ret    

c000da84 <CmConvertFromInternalFilename(unsigned char const*, char*)>:
c000da84:	55                   	push   ebp
c000da85:	57                   	push   edi
c000da86:	56                   	push   esi
c000da87:	31 f6                	xor    esi,esi
c000da89:	53                   	push   ebx
c000da8a:	31 db                	xor    ebx,ebx
c000da8c:	83 ec 40             	sub    esp,0x40
c000da8f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000da97:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000da9f:	6a 12                	push   0x12
c000daa1:	68 ee 00 00 00       	push   0xee
c000daa6:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c000daaa:	e8 41 2a ff ff       	call   c00004f0 <memset>
c000daaf:	83 c4 10             	add    esp,0x10
c000dab2:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000dab6:	6a 08                	push   0x8
c000dab8:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000dabc:	0f b6 04 18          	movzx  eax,BYTE PTR [eax+ebx*1]
c000dac0:	50                   	push   eax
c000dac1:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000dac5:	55                   	push   ebp
c000dac6:	57                   	push   edi
c000dac7:	e8 e7 fe ff ff       	call   c000d9b3 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c000dacc:	83 c4 10             	add    esp,0x10
c000dacf:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000dad3:	50                   	push   eax
c000dad4:	6a 06                	push   0x6
c000dad6:	55                   	push   ebp
c000dad7:	57                   	push   edi
c000dad8:	e8 06 ff ff ff       	call   c000d9e3 <CmGetShift(unsigned int*, int*, int, bool*)>
c000dadd:	83 c4 10             	add    esp,0x10
c000dae0:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000dae5:	74 07                	je     c000daee <CmConvertFromInternalFilename(unsigned char const*, char*)+0x6a>
c000dae7:	46                   	inc    esi
c000dae8:	88 44 34 17          	mov    BYTE PTR [esp+esi*1+0x17],al
c000daec:	eb e1                	jmp    c000dacf <CmConvertFromInternalFilename(unsigned char const*, char*)+0x4b>
c000daee:	43                   	inc    ebx
c000daef:	83 fb 12             	cmp    ebx,0x12
c000daf2:	75 c2                	jne    c000dab6 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x32>
c000daf4:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000daf8:	31 f6                	xor    esi,esi
c000dafa:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000dafd:	50                   	push   eax
c000dafe:	50                   	push   eax
c000daff:	0f b6 44 34 20       	movzx  eax,BYTE PTR [esp+esi*1+0x20]
c000db04:	46                   	inc    esi
c000db05:	8d 04 85 20 68 02 c0 	lea    eax,[eax*4-0x3ffd97e0]
c000db0c:	50                   	push   eax
c000db0d:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c000db11:	e8 5a 2d ff ff       	call   c0000870 <strcat>
c000db16:	83 c4 10             	add    esp,0x10
c000db19:	83 fe 18             	cmp    esi,0x18
c000db1c:	75 df                	jne    c000dafd <CmConvertFromInternalFilename(unsigned char const*, char*)+0x79>
c000db1e:	83 c4 3c             	add    esp,0x3c
c000db21:	31 c0                	xor    eax,eax
c000db23:	5b                   	pop    ebx
c000db24:	5e                   	pop    esi
c000db25:	5f                   	pop    edi
c000db26:	5d                   	pop    ebp
c000db27:	c3                   	ret    

c000db28 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>:
c000db28:	83 ec 40             	sub    esp,0x40
c000db2b:	8d 44 24 09          	lea    eax,[esp+0x9]
c000db2f:	50                   	push   eax
c000db30:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db34:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db38:	e8 3f f9 ff ff       	call   c000d47c <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000db3d:	58                   	pop    eax
c000db3e:	5a                   	pop    edx
c000db3f:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c000db43:	8d 44 24 15          	lea    eax,[esp+0x15]
c000db47:	50                   	push   eax
c000db48:	e8 37 ff ff ff       	call   c000da84 <CmConvertFromInternalFilename(unsigned char const*, char*)>
c000db4d:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c000db52:	83 c4 4c             	add    esp,0x4c
c000db55:	c3                   	ret    

c000db56 <CmConvertToInternalFilename(char const*, unsigned char*)>:
c000db56:	55                   	push   ebp
c000db57:	57                   	push   edi
c000db58:	56                   	push   esi
c000db59:	53                   	push   ebx
c000db5a:	31 db                	xor    ebx,ebx
c000db5c:	83 ec 70             	sub    esp,0x70
c000db5f:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
c000db66:	6a 30                	push   0x30
c000db68:	6a 00                	push   0x0
c000db6a:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c000db6e:	56                   	push   esi
c000db6f:	e8 7c 29 ff ff       	call   c00004f0 <memset>
c000db74:	83 c4 10             	add    esp,0x10
c000db77:	83 ec 0c             	sub    esp,0xc
c000db7a:	57                   	push   edi
c000db7b:	e8 00 2a ff ff       	call   c0000580 <strlen>
c000db80:	83 c4 10             	add    esp,0x10
c000db83:	39 d8                	cmp    eax,ebx
c000db85:	76 16                	jbe    c000db9d <CmConvertToInternalFilename(char const*, unsigned char*)+0x47>
c000db87:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c000db8b:	83 ec 0c             	sub    esp,0xc
c000db8e:	50                   	push   eax
c000db8f:	e8 cc 2d ff ff       	call   c0000960 <toupper>
c000db94:	83 c4 10             	add    esp,0x10
c000db97:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c000db9a:	43                   	inc    ebx
c000db9b:	eb da                	jmp    c000db77 <CmConvertToInternalFilename(char const*, unsigned char*)+0x21>
c000db9d:	52                   	push   edx
c000db9e:	31 db                	xor    ebx,ebx
c000dba0:	6a 18                	push   0x18
c000dba2:	31 ff                	xor    edi,edi
c000dba4:	6a 3f                	push   0x3f
c000dba6:	8d 44 24 24          	lea    eax,[esp+0x24]
c000dbaa:	50                   	push   eax
c000dbab:	e8 40 29 ff ff       	call   c00004f0 <memset>
c000dbb0:	83 c4 10             	add    esp,0x10
c000dbb3:	8a 44 1c 30          	mov    al,BYTE PTR [esp+ebx*1+0x30]
c000dbb7:	8d 74 24 10          	lea    esi,[esp+0x10]
c000dbbb:	84 c0                	test   al,al
c000dbbd:	0f 84 af 00 00 00    	je     c000dc72 <CmConvertToInternalFilename(char const*, unsigned char*)+0x11c>
c000dbc3:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c000dbc7:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000dbca:	83 ec 0c             	sub    esp,0xc
c000dbcd:	c6 44 24 22 00       	mov    BYTE PTR [esp+0x22],0x0
c000dbd2:	8a 54 2c 3c          	mov    dl,BYTE PTR [esp+ebp*1+0x3c]
c000dbd6:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c000dbda:	c6 44 24 1d 00       	mov    BYTE PTR [esp+0x1d],0x0
c000dbdf:	88 54 24 21          	mov    BYTE PTR [esp+0x21],dl
c000dbe3:	56                   	push   esi
c000dbe4:	e8 97 29 ff ff       	call   c0000580 <strlen>
c000dbe9:	83 c4 10             	add    esp,0x10
c000dbec:	85 c0                	test   eax,eax
c000dbee:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000dbf2:	74 0b                	je     c000dbff <CmConvertToInternalFilename(char const*, unsigned char*)+0xa9>
c000dbf4:	50                   	push   eax
c000dbf5:	6a 01                	push   0x1
c000dbf7:	56                   	push   esi
c000dbf8:	8d 44 24 20          	lea    eax,[esp+0x20]
c000dbfc:	50                   	push   eax
c000dbfd:	eb 0a                	jmp    c000dc09 <CmConvertToInternalFilename(char const*, unsigned char*)+0xb3>
c000dbff:	50                   	push   eax
c000dc00:	6a 00                	push   0x0
c000dc02:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c000dc06:	50                   	push   eax
c000dc07:	6a 00                	push   0x0
c000dc09:	e8 44 fd ff ff       	call   c000d952 <CmGetMatch(char*, char*, bool, bool*)>
c000dc0e:	83 c4 10             	add    esp,0x10
c000dc11:	83 f8 ff             	cmp    eax,0xffffffff
c000dc14:	75 1a                	jne    c000dc30 <CmConvertToInternalFilename(char const*, unsigned char*)+0xda>
c000dc16:	83 ec 0c             	sub    esp,0xc
c000dc19:	68 76 40 02 c0       	push   0xc0024076
c000dc1e:	e8 67 22 00 00       	call   c000fe8a <KePanic(char const*)>
c000dc23:	83 c4 10             	add    esp,0x10
c000dc26:	b8 02 00 00 00       	mov    eax,0x2
c000dc2b:	e9 bb 00 00 00       	jmp    c000dceb <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c000dc30:	83 ff 18             	cmp    edi,0x18
c000dc33:	75 1a                	jne    c000dc4f <CmConvertToInternalFilename(char const*, unsigned char*)+0xf9>
c000dc35:	83 ec 0c             	sub    esp,0xc
c000dc38:	68 8b 40 02 c0       	push   0xc002408b
c000dc3d:	e8 48 22 00 00       	call   c000fe8a <KePanic(char const*)>
c000dc42:	83 c4 10             	add    esp,0x10
c000dc45:	b8 01 00 00 00       	mov    eax,0x1
c000dc4a:	e9 9c 00 00 00       	jmp    c000dceb <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c000dc4f:	47                   	inc    edi
c000dc50:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000dc55:	88 44 3c 17          	mov    BYTE PTR [esp+edi*1+0x17],al
c000dc59:	0f 45 dd             	cmovne ebx,ebp
c000dc5c:	83 ec 0c             	sub    esp,0xc
c000dc5f:	56                   	push   esi
c000dc60:	e8 1b 29 ff ff       	call   c0000580 <strlen>
c000dc65:	83 c4 10             	add    esp,0x10
c000dc68:	85 c0                	test   eax,eax
c000dc6a:	74 06                	je     c000dc72 <CmConvertToInternalFilename(char const*, unsigned char*)+0x11c>
c000dc6c:	43                   	inc    ebx
c000dc6d:	e9 41 ff ff ff       	jmp    c000dbb3 <CmConvertToInternalFilename(char const*, unsigned char*)+0x5d>
c000dc72:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000dc7a:	31 db                	xor    ebx,ebx
c000dc7c:	31 ff                	xor    edi,edi
c000dc7e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000dc86:	50                   	push   eax
c000dc87:	6a 12                	push   0x12
c000dc89:	68 ee 00 00 00       	push   0xee
c000dc8e:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c000dc95:	e8 56 28 ff ff       	call   c00004f0 <memset>
c000dc9a:	83 c4 10             	add    esp,0x10
c000dc9d:	8d 6c 24 14          	lea    ebp,[esp+0x14]
c000dca1:	83 fb 17             	cmp    ebx,0x17
c000dca4:	7e 26                	jle    c000dccc <CmConvertToInternalFilename(char const*, unsigned char*)+0x176>
c000dca6:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000dcaa:	50                   	push   eax
c000dcab:	6a 08                	push   0x8
c000dcad:	55                   	push   ebp
c000dcae:	56                   	push   esi
c000dcaf:	e8 2f fd ff ff       	call   c000d9e3 <CmGetShift(unsigned int*, int*, int, bool*)>
c000dcb4:	83 c4 10             	add    esp,0x10
c000dcb7:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000dcbc:	74 26                	je     c000dce4 <CmConvertToInternalFilename(char const*, unsigned char*)+0x18e>
c000dcbe:	8b 8c 24 84 00 00 00 	mov    ecx,DWORD PTR [esp+0x84]
c000dcc5:	4b                   	dec    ebx
c000dcc6:	88 04 39             	mov    BYTE PTR [ecx+edi*1],al
c000dcc9:	47                   	inc    edi
c000dcca:	eb 1c                	jmp    c000dce8 <CmConvertToInternalFilename(char const*, unsigned char*)+0x192>
c000dccc:	6a 06                	push   0x6
c000dcce:	0f b6 44 1c 1c       	movzx  eax,BYTE PTR [esp+ebx*1+0x1c]
c000dcd3:	50                   	push   eax
c000dcd4:	55                   	push   ebp
c000dcd5:	56                   	push   esi
c000dcd6:	e8 d8 fc ff ff       	call   c000d9b3 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c000dcdb:	83 c4 10             	add    esp,0x10
c000dcde:	84 c0                	test   al,al
c000dce0:	75 06                	jne    c000dce8 <CmConvertToInternalFilename(char const*, unsigned char*)+0x192>
c000dce2:	eb c2                	jmp    c000dca6 <CmConvertToInternalFilename(char const*, unsigned char*)+0x150>
c000dce4:	31 c0                	xor    eax,eax
c000dce6:	eb 03                	jmp    c000dceb <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c000dce8:	43                   	inc    ebx
c000dce9:	eb b2                	jmp    c000dc9d <CmConvertToInternalFilename(char const*, unsigned char*)+0x147>
c000dceb:	83 c4 6c             	add    esp,0x6c
c000dcee:	5b                   	pop    ebx
c000dcef:	5e                   	pop    esi
c000dcf0:	5f                   	pop    edi
c000dcf1:	5d                   	pop    ebp
c000dcf2:	c3                   	ret    

c000dcf3 <CmCreateString(Reghive_Tag*, int, char const*)>:
c000dcf3:	53                   	push   ebx
c000dcf4:	83 ec 3c             	sub    esp,0x3c
c000dcf7:	6a 2b                	push   0x2b
c000dcf9:	6a 00                	push   0x0
c000dcfb:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c000dcff:	53                   	push   ebx
c000dd00:	e8 eb 27 ff ff       	call   c00004f0 <memset>
c000dd05:	58                   	pop    eax
c000dd06:	5a                   	pop    edx
c000dd07:	8d 44 24 11          	lea    eax,[esp+0x11]
c000dd0b:	50                   	push   eax
c000dd0c:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000dd10:	e8 41 fe ff ff       	call   c000db56 <CmConvertToInternalFilename(char const*, unsigned char*)>
c000dd15:	c6 44 24 15 c1       	mov    BYTE PTR [esp+0x15],0xc1
c000dd1a:	83 c4 0c             	add    esp,0xc
c000dd1d:	6a 15                	push   0x15
c000dd1f:	6a 00                	push   0x0
c000dd21:	8d 44 24 27          	lea    eax,[esp+0x27]
c000dd25:	50                   	push   eax
c000dd26:	e8 c5 27 ff ff       	call   c00004f0 <memset>
c000dd2b:	53                   	push   ebx
c000dd2c:	6a 00                	push   0x0
c000dd2e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000dd32:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000dd36:	e8 eb f9 ff ff       	call   c000d726 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000dd3b:	83 c4 58             	add    esp,0x58
c000dd3e:	5b                   	pop    ebx
c000dd3f:	c3                   	ret    

c000dd40 <CmFindInDirectory(Reghive_Tag*, int, char const*)>:
c000dd40:	56                   	push   esi
c000dd41:	53                   	push   ebx
c000dd42:	83 ec 48             	sub    esp,0x48
c000dd45:	6a 12                	push   0x12
c000dd47:	68 ff 00 00 00       	push   0xff
c000dd4c:	8d 74 24 0f          	lea    esi,[esp+0xf]
c000dd50:	56                   	push   esi
c000dd51:	e8 9a 27 ff ff       	call   c00004f0 <memset>
c000dd56:	5a                   	pop    edx
c000dd57:	59                   	pop    ecx
c000dd58:	56                   	push   esi
c000dd59:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000dd5d:	e8 f4 fd ff ff       	call   c000db56 <CmConvertToInternalFilename(char const*, unsigned char*)>
c000dd62:	83 c4 10             	add    esp,0x10
c000dd65:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c000dd69:	85 db                	test   ebx,ebx
c000dd6b:	74 42                	je     c000ddaf <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x6f>
c000dd6d:	50                   	push   eax
c000dd6e:	8d 44 24 19          	lea    eax,[esp+0x19]
c000dd72:	50                   	push   eax
c000dd73:	53                   	push   ebx
c000dd74:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000dd78:	e8 ff f6 ff ff       	call   c000d47c <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000dd7d:	83 c4 0c             	add    esp,0xc
c000dd80:	6a 12                	push   0x12
c000dd82:	8d 44 24 21          	lea    eax,[esp+0x21]
c000dd86:	50                   	push   eax
c000dd87:	56                   	push   esi
c000dd88:	e8 f3 25 ff ff       	call   c0000380 <memcmp>
c000dd8d:	83 c4 10             	add    esp,0x10
c000dd90:	85 c0                	test   eax,eax
c000dd92:	74 1e                	je     c000ddb2 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x72>
c000dd94:	0f b6 5c 24 17       	movzx  ebx,BYTE PTR [esp+0x17]
c000dd99:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c000dd9e:	c1 e3 08             	shl    ebx,0x8
c000dda1:	09 d8                	or     eax,ebx
c000dda3:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c000dda8:	c1 e3 10             	shl    ebx,0x10
c000ddab:	09 c3                	or     ebx,eax
c000ddad:	eb ba                	jmp    c000dd69 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x29>
c000ddaf:	83 cb ff             	or     ebx,0xffffffff
c000ddb2:	83 c4 44             	add    esp,0x44
c000ddb5:	89 d8                	mov    eax,ebx
c000ddb7:	5b                   	pop    ebx
c000ddb8:	5e                   	pop    esi
c000ddb9:	c3                   	ret    

c000ddba <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>:
c000ddba:	57                   	push   edi
c000ddbb:	56                   	push   esi
c000ddbc:	53                   	push   ebx
c000ddbd:	83 ec 34             	sub    esp,0x34
c000ddc0:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000ddc4:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000ddc8:	6a 2b                	push   0x2b
c000ddca:	6a 00                	push   0x0
c000ddcc:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c000ddd0:	53                   	push   ebx
c000ddd1:	e8 1a 27 ff ff       	call   c00004f0 <memset>
c000ddd6:	58                   	pop    eax
c000ddd7:	5a                   	pop    edx
c000ddd8:	8d 44 24 11          	lea    eax,[esp+0x11]
c000dddc:	50                   	push   eax
c000dddd:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000dde1:	e8 70 fd ff ff       	call   c000db56 <CmConvertToInternalFilename(char const*, unsigned char*)>
c000dde6:	8a 44 24 64          	mov    al,BYTE PTR [esp+0x64]
c000ddea:	89 74 24 2b          	mov    DWORD PTR [esp+0x2b],esi
c000ddee:	89 7c 24 2f          	mov    DWORD PTR [esp+0x2f],edi
c000ddf2:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c000ddf6:	53                   	push   ebx
c000ddf7:	6a 00                	push   0x0
c000ddf9:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ddfd:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000de01:	e8 20 f9 ff ff       	call   c000d726 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000de06:	83 c4 50             	add    esp,0x50
c000de09:	5b                   	pop    ebx
c000de0a:	5e                   	pop    esi
c000de0b:	5f                   	pop    edi
c000de0c:	c3                   	ret    

c000de0d <CmCreateDirectory(Reghive_Tag*, int, char const*)>:
c000de0d:	55                   	push   ebp
c000de0e:	57                   	push   edi
c000de0f:	56                   	push   esi
c000de10:	53                   	push   ebx
c000de11:	83 ec 40             	sub    esp,0x40
c000de14:	8b 6c 24 58          	mov    ebp,DWORD PTR [esp+0x58]
c000de18:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c000de1c:	6a 2b                	push   0x2b
c000de1e:	6a 00                	push   0x0
c000de20:	8d 74 24 11          	lea    esi,[esp+0x11]
c000de24:	56                   	push   esi
c000de25:	e8 c6 26 ff ff       	call   c00004f0 <memset>
c000de2a:	5f                   	pop    edi
c000de2b:	89 ef                	mov    edi,ebp
c000de2d:	58                   	pop    eax
c000de2e:	8d 44 24 11          	lea    eax,[esp+0x11]
c000de32:	50                   	push   eax
c000de33:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000de37:	e8 1a fd ff ff       	call   c000db56 <CmConvertToInternalFilename(char const*, unsigned char*)>
c000de3c:	c6 44 24 15 4e       	mov    BYTE PTR [esp+0x15],0x4e
c000de41:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c000de46:	c6 44 24 2c 00       	mov    BYTE PTR [esp+0x2c],0x0
c000de4b:	c6 44 24 2d 00       	mov    BYTE PTR [esp+0x2d],0x0
c000de50:	83 c4 10             	add    esp,0x10
c000de53:	85 ed                	test   ebp,ebp
c000de55:	74 14                	je     c000de6b <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c000de57:	51                   	push   ecx
c000de58:	51                   	push   ecx
c000de59:	57                   	push   edi
c000de5a:	53                   	push   ebx
c000de5b:	e8 0e f7 ff ff       	call   c000d56e <CmGetNext(Reghive_Tag*, int)>
c000de60:	83 c4 10             	add    esp,0x10
c000de63:	85 c0                	test   eax,eax
c000de65:	74 04                	je     c000de6b <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c000de67:	89 c7                	mov    edi,eax
c000de69:	eb e8                	jmp    c000de53 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x46>
c000de6b:	56                   	push   esi
c000de6c:	6a 00                	push   0x0
c000de6e:	57                   	push   edi
c000de6f:	53                   	push   ebx
c000de70:	e8 b1 f8 ff ff       	call   c000d726 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000de75:	83 c4 0c             	add    esp,0xc
c000de78:	56                   	push   esi
c000de79:	50                   	push   eax
c000de7a:	89 c7                	mov    edi,eax
c000de7c:	53                   	push   ebx
c000de7d:	e8 fa f5 ff ff       	call   c000d47c <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000de82:	58                   	pop    eax
c000de83:	5a                   	pop    edx
c000de84:	6a 6c                	push   0x6c
c000de86:	6a 00                	push   0x0
c000de88:	6a 00                	push   0x0
c000de8a:	68 9c 40 02 c0       	push   0xc002409c
c000de8f:	57                   	push   edi
c000de90:	53                   	push   ebx
c000de91:	e8 24 ff ff ff       	call   c000ddba <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>
c000de96:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c000de9a:	88 64 24 3c          	mov    BYTE PTR [esp+0x3c],ah
c000de9e:	c1 e8 10             	shr    eax,0x10
c000dea1:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c000dea5:	83 c4 1c             	add    esp,0x1c
c000dea8:	56                   	push   esi
c000dea9:	57                   	push   edi
c000deaa:	53                   	push   ebx
c000deab:	e8 f0 f6 ff ff       	call   c000d5a0 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000deb0:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c000deb5:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c000deba:	c1 e0 08             	shl    eax,0x8
c000debd:	09 c2                	or     edx,eax
c000debf:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c000dec4:	83 c4 4c             	add    esp,0x4c
c000dec7:	5b                   	pop    ebx
c000dec8:	5e                   	pop    esi
c000dec9:	c1 e0 10             	shl    eax,0x10
c000decc:	09 d0                	or     eax,edx
c000dece:	5f                   	pop    edi
c000decf:	5d                   	pop    ebp
c000ded0:	c3                   	ret    

c000ded1 <zStrtok(char*, char const*)>:
c000ded1:	55                   	push   ebp
c000ded2:	57                   	push   edi
c000ded3:	56                   	push   esi
c000ded4:	53                   	push   ebx
c000ded5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ded9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000dedd:	85 db                	test   ebx,ebx
c000dedf:	74 2f                	je     c000df10 <zStrtok(char*, char const*)+0x3f>
c000dee1:	85 c0                	test   eax,eax
c000dee3:	75 09                	jne    c000deee <zStrtok(char*, char const*)+0x1d>
c000dee5:	a1 c4 d0 02 c0       	mov    eax,ds:0xc002d0c4
c000deea:	85 c0                	test   eax,eax
c000deec:	74 50                	je     c000df3e <zStrtok(char*, char const*)+0x6d>
c000deee:	31 c9                	xor    ecx,ecx
c000def0:	80 3c 08 00          	cmp    BYTE PTR [eax+ecx*1],0x0
c000def4:	74 03                	je     c000def9 <zStrtok(char*, char const*)+0x28>
c000def6:	41                   	inc    ecx
c000def7:	eb f7                	jmp    c000def0 <zStrtok(char*, char const*)+0x1f>
c000def9:	31 d2                	xor    edx,edx
c000defb:	39 ca                	cmp    edx,ecx
c000defd:	74 15                	je     c000df14 <zStrtok(char*, char const*)+0x43>
c000deff:	0f be 34 10          	movsx  esi,BYTE PTR [eax+edx*1]
c000df03:	8d 3c 10             	lea    edi,[eax+edx*1]
c000df06:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c000df09:	39 ee                	cmp    esi,ebp
c000df0b:	74 13                	je     c000df20 <zStrtok(char*, char const*)+0x4f>
c000df0d:	42                   	inc    edx
c000df0e:	eb eb                	jmp    c000defb <zStrtok(char*, char const*)+0x2a>
c000df10:	31 c0                	xor    eax,eax
c000df12:	eb 2a                	jmp    c000df3e <zStrtok(char*, char const*)+0x6d>
c000df14:	c7 05 c4 d0 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d0c4,0x0
c000df1e:	eb 1e                	jmp    c000df3e <zStrtok(char*, char const*)+0x6d>
c000df20:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c000df23:	39 ce                	cmp    esi,ecx
c000df25:	75 0a                	jne    c000df31 <zStrtok(char*, char const*)+0x60>
c000df27:	40                   	inc    eax
c000df28:	a3 c4 d0 02 c0       	mov    ds:0xc002d0c4,eax
c000df2d:	89 d8                	mov    eax,ebx
c000df2f:	eb 0d                	jmp    c000df3e <zStrtok(char*, char const*)+0x6d>
c000df31:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000df34:	8d 54 10 01          	lea    edx,[eax+edx*1+0x1]
c000df38:	89 15 c4 d0 02 c0    	mov    DWORD PTR ds:0xc002d0c4,edx
c000df3e:	5b                   	pop    ebx
c000df3f:	5e                   	pop    esi
c000df40:	5f                   	pop    edi
c000df41:	5d                   	pop    ebp
c000df42:	c3                   	ret    

c000df43 <CmFindObjectFromPath(Reghive_Tag*, char const*)>:
c000df43:	57                   	push   edi
c000df44:	56                   	push   esi
c000df45:	53                   	push   ebx
c000df46:	81 ec 08 01 00 00    	sub    esp,0x108
c000df4c:	8b bc 24 18 01 00 00 	mov    edi,DWORD PTR [esp+0x118]
c000df53:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c000df5a:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000df5e:	53                   	push   ebx
c000df5f:	e8 ec 26 ff ff       	call   c0000650 <strcpy>
c000df64:	59                   	pop    ecx
c000df65:	5e                   	pop    esi
c000df66:	68 91 53 02 c0       	push   0xc0025391
c000df6b:	53                   	push   ebx
c000df6c:	bb 01 00 00 00       	mov    ebx,0x1
c000df71:	e8 5b ff ff ff       	call   c000ded1 <zStrtok(char*, char const*)>
c000df76:	83 c4 10             	add    esp,0x10
c000df79:	85 c0                	test   eax,eax
c000df7b:	74 3b                	je     c000dfb8 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c000df7d:	52                   	push   edx
c000df7e:	50                   	push   eax
c000df7f:	6a 01                	push   0x1
c000df81:	57                   	push   edi
c000df82:	e8 b9 fd ff ff       	call   c000dd40 <CmFindInDirectory(Reghive_Tag*, int, char const*)>
c000df87:	59                   	pop    ecx
c000df88:	5e                   	pop    esi
c000df89:	89 c3                	mov    ebx,eax
c000df8b:	68 91 53 02 c0       	push   0xc0025391
c000df90:	6a 00                	push   0x0
c000df92:	e8 3a ff ff ff       	call   c000ded1 <zStrtok(char*, char const*)>
c000df97:	83 c4 10             	add    esp,0x10
c000df9a:	85 c0                	test   eax,eax
c000df9c:	89 c6                	mov    esi,eax
c000df9e:	74 18                	je     c000dfb8 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c000dfa0:	52                   	push   edx
c000dfa1:	52                   	push   edx
c000dfa2:	53                   	push   ebx
c000dfa3:	57                   	push   edi
c000dfa4:	e8 86 f5 ff ff       	call   c000d52f <CmEnterDirectory(Reghive_Tag*, int)>
c000dfa9:	83 c4 10             	add    esp,0x10
c000dfac:	83 f8 ff             	cmp    eax,0xffffffff
c000dfaf:	89 c3                	mov    ebx,eax
c000dfb1:	74 05                	je     c000dfb8 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c000dfb3:	50                   	push   eax
c000dfb4:	56                   	push   esi
c000dfb5:	53                   	push   ebx
c000dfb6:	eb c9                	jmp    c000df81 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x3e>
c000dfb8:	81 c4 00 01 00 00    	add    esp,0x100
c000dfbe:	89 d8                	mov    eax,ebx
c000dfc0:	5b                   	pop    ebx
c000dfc1:	5e                   	pop    esi
c000dfc2:	5f                   	pop    edi
c000dfc3:	c3                   	ret    

c000dfc4 <CmDisplayTree(Reghive_Tag*, int, int)>:
c000dfc4:	55                   	push   ebp
c000dfc5:	57                   	push   edi
c000dfc6:	56                   	push   esi
c000dfc7:	53                   	push   ebx
c000dfc8:	83 ec 5c             	sub    esp,0x5c
c000dfcb:	8b 74 24 70          	mov    esi,DWORD PTR [esp+0x70]
c000dfcf:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000dfd3:	85 db                	test   ebx,ebx
c000dfd5:	0f 8e 84 00 00 00    	jle    c000e05f <CmDisplayTree(Reghive_Tag*, int, int)+0x9b>
c000dfdb:	57                   	push   edi
c000dfdc:	31 ed                	xor    ebp,ebp
c000dfde:	6a 32                	push   0x32
c000dfe0:	6a 00                	push   0x0
c000dfe2:	8d 7c 24 2a          	lea    edi,[esp+0x2a]
c000dfe6:	57                   	push   edi
c000dfe7:	e8 04 25 ff ff       	call   c00004f0 <memset>
c000dfec:	83 c4 0c             	add    esp,0xc
c000dfef:	57                   	push   edi
c000dff0:	53                   	push   ebx
c000dff1:	56                   	push   esi
c000dff2:	e8 31 fb ff ff       	call   c000db28 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c000dff7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000dffb:	83 c4 10             	add    esp,0x10
c000dffe:	3b 6c 24 78          	cmp    ebp,DWORD PTR [esp+0x78]
c000e002:	7d 13                	jge    c000e017 <CmDisplayTree(Reghive_Tag*, int, int)+0x53>
c000e004:	83 ec 0c             	sub    esp,0xc
c000e007:	45                   	inc    ebp
c000e008:	68 07 5c 02 c0       	push   0xc0025c07
c000e00d:	e8 54 8f ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000e012:	83 c4 10             	add    esp,0x10
c000e015:	eb e7                	jmp    c000dffe <CmDisplayTree(Reghive_Tag*, int, int)+0x3a>
c000e017:	51                   	push   ecx
c000e018:	57                   	push   edi
c000e019:	53                   	push   ebx
c000e01a:	68 a2 40 02 c0       	push   0xc00240a2
c000e01f:	e8 42 8f ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000e024:	83 c4 10             	add    esp,0x10
c000e027:	83 7c 24 0c 4e       	cmp    DWORD PTR [esp+0xc],0x4e
c000e02c:	75 1e                	jne    c000e04c <CmDisplayTree(Reghive_Tag*, int, int)+0x88>
c000e02e:	52                   	push   edx
c000e02f:	52                   	push   edx
c000e030:	53                   	push   ebx
c000e031:	56                   	push   esi
c000e032:	e8 f8 f4 ff ff       	call   c000d52f <CmEnterDirectory(Reghive_Tag*, int)>
c000e037:	83 c4 0c             	add    esp,0xc
c000e03a:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000e03e:	8d 51 04             	lea    edx,[ecx+0x4]
c000e041:	52                   	push   edx
c000e042:	50                   	push   eax
c000e043:	56                   	push   esi
c000e044:	e8 7b ff ff ff       	call   c000dfc4 <CmDisplayTree(Reghive_Tag*, int, int)>
c000e049:	83 c4 10             	add    esp,0x10
c000e04c:	50                   	push   eax
c000e04d:	50                   	push   eax
c000e04e:	53                   	push   ebx
c000e04f:	56                   	push   esi
c000e050:	e8 19 f5 ff ff       	call   c000d56e <CmGetNext(Reghive_Tag*, int)>
c000e055:	83 c4 10             	add    esp,0x10
c000e058:	89 c3                	mov    ebx,eax
c000e05a:	e9 74 ff ff ff       	jmp    c000dfd3 <CmDisplayTree(Reghive_Tag*, int, int)+0xf>
c000e05f:	83 c4 5c             	add    esp,0x5c
c000e062:	5b                   	pop    ebx
c000e063:	5e                   	pop    esi
c000e064:	5f                   	pop    edi
c000e065:	5d                   	pop    ebp
c000e066:	c3                   	ret    

c000e067 <CmSplitFinalSlashInPlace(char*)>:
c000e067:	53                   	push   ebx
c000e068:	83 ec 14             	sub    esp,0x14
c000e06b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e06f:	53                   	push   ebx
c000e070:	e8 0b 25 ff ff       	call   c0000580 <strlen>
c000e075:	83 c4 10             	add    esp,0x10
c000e078:	48                   	dec    eax
c000e079:	85 c0                	test   eax,eax
c000e07b:	74 15                	je     c000e092 <CmSplitFinalSlashInPlace(char*)+0x2b>
c000e07d:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000e081:	8d 14 03             	lea    edx,[ebx+eax*1]
c000e084:	75 09                	jne    c000e08f <CmSplitFinalSlashInPlace(char*)+0x28>
c000e086:	c6 02 00             	mov    BYTE PTR [edx],0x0
c000e089:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c000e08d:	eb 05                	jmp    c000e094 <CmSplitFinalSlashInPlace(char*)+0x2d>
c000e08f:	48                   	dec    eax
c000e090:	eb e7                	jmp    c000e079 <CmSplitFinalSlashInPlace(char*)+0x12>
c000e092:	31 c0                	xor    eax,eax
c000e094:	83 c4 08             	add    esp,0x8
c000e097:	5b                   	pop    ebx
c000e098:	c3                   	ret    
c000e099:	66 90                	xchg   ax,ax
c000e09b:	90                   	nop

c000e09c <Krnl::handlePowerButton()>:
c000e09c:	83 ec 0c             	sub    esp,0xc
c000e09f:	e8 1c 27 00 00       	call   c00107c0 <KeHandlePowerButton()>
c000e0a4:	90                   	nop
c000e0a5:	83 c4 0c             	add    esp,0xc
c000e0a8:	c3                   	ret    
c000e0a9:	8d 76 00             	lea    esi,[esi+0x0]

c000e0ac <Krnl::handleSleepButton()>:
c000e0ac:	83 ec 0c             	sub    esp,0xc
c000e0af:	e8 24 27 00 00       	call   c00107d8 <KeHandleSleepButton()>
c000e0b4:	90                   	nop
c000e0b5:	83 c4 0c             	add    esp,0xc
c000e0b8:	c3                   	ret    
c000e0b9:	90                   	nop

c000e0ba <Computer::close(int, int, void*)>:
c000e0ba:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e0bf:	c3                   	ret    

c000e0c0 <KeFirstTask()>:
c000e0c0:	53                   	push   ebx
c000e0c1:	83 ec 14             	sub    esp,0x14
c000e0c4:	fb                   	sti    
c000e0c5:	68 ac 40 02 c0       	push   0xc00240ac
c000e0ca:	e8 66 f1 ff ff       	call   c000d235 <KeSetBootMessage(char const*)>
c000e0cf:	c7 04 24 c4 07 00 00 	mov    DWORD PTR [esp],0x7c4
c000e0d6:	e8 a1 1a 00 00       	call   c000fb7c <malloc>
c000e0db:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e0e2:	89 c3                	mov    ebx,eax
c000e0e4:	a1 78 fa 02 c0       	mov    eax,ds:0xc002fa78
c000e0e9:	50                   	push   eax
c000e0ea:	68 c5 40 02 c0       	push   0xc00240c5
c000e0ef:	6a 01                	push   0x1
c000e0f1:	53                   	push   ebx
c000e0f2:	e8 ed 8a 00 00       	call   c0016be4 <Process::Process(bool, char const*, Process*, char**)>
c000e0f7:	83 c4 20             	add    esp,0x20
c000e0fa:	68 ff 00 00 00       	push   0xff
c000e0ff:	6a 00                	push   0x0
c000e101:	68 a5 ee 00 c0       	push   0xc000eea5
c000e106:	53                   	push   ebx
c000e107:	e8 18 8d 00 00       	call   c0016e24 <Process::createThread(void (*)(void*), void*, int)>
c000e10c:	8b 15 78 fa 02 c0    	mov    edx,DWORD PTR ds:0xc002fa78
c000e112:	6a 7a                	push   0x7a
c000e114:	6a 00                	push   0x0
c000e116:	68 a8 77 01 c0       	push   0xc00177a8
c000e11b:	52                   	push   edx
c000e11c:	e8 03 8d 00 00       	call   c0016e24 <Process::createThread(void (*)(void*), void*, int)>
c000e121:	83 c4 14             	add    esp,0x14
c000e124:	68 58 41 02 c0       	push   0xc0024158
c000e129:	a3 30 fa 02 c0       	mov    ds:0xc002fa30,eax
c000e12e:	e8 02 f1 ff ff       	call   c000d235 <KeSetBootMessage(char const*)>
c000e133:	c6 05 d9 d0 02 c0 01 	mov    BYTE PTR ds:0xc002d0d9,0x1
c000e13a:	e8 a3 27 00 00       	call   c00108e2 <KeInitRand()>
c000e13f:	e8 42 9a 00 00       	call   c0017b86 <Vm::initialise8086()>
c000e144:	e8 e9 9c ff ff       	call   c0007e32 <Fs::initVFS()>
c000e149:	c7 04 24 4d 3e 02 c0 	mov    DWORD PTR [esp],0xc0023e4d
c000e150:	e8 e0 f0 ff ff       	call   c000d235 <KeSetBootMessage(char const*)>
c000e155:	a1 d4 d0 02 c0       	mov    eax,ds:0xc002d0d4
c000e15a:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c000e160:	8b 10                	mov    edx,DWORD PTR [eax]
c000e162:	6a 00                	push   0x0
c000e164:	6a 00                	push   0x0
c000e166:	6a 00                	push   0x0
c000e168:	50                   	push   eax
c000e169:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e16c:	83 c4 14             	add    esp,0x14
c000e16f:	68 58 41 02 c0       	push   0xc0024158
c000e174:	e8 bc f0 ff ff       	call   c000d235 <KeSetBootMessage(char const*)>
c000e179:	e8 99 94 ff ff       	call   c0007617 <KeInitialiseSymlinks()>
c000e17e:	e8 c9 06 00 00       	call   c000e84c <KeLoadSystemEnv()>
c000e183:	e8 68 26 00 00       	call   c00107f0 <KeSetupPowerManager()>
c000e188:	c7 04 24 7c 41 02 c0 	mov    DWORD PTR [esp],0xc002417c
c000e18f:	e8 a1 f0 ff ff       	call   c000d235 <KeSetBootMessage(char const*)>
c000e194:	a1 d4 d0 02 c0       	mov    eax,ds:0xc002d0d4
c000e199:	59                   	pop    ecx
c000e19a:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c000e1a0:	53                   	push   ebx
c000e1a1:	e8 6c b9 ff ff       	call   c0009b12 <Device::loadDriversForAll()>
c000e1a6:	c7 04 24 d2 40 02 c0 	mov    DWORD PTR [esp],0xc00240d2
c000e1ad:	e8 83 f0 ff ff       	call   c000d235 <KeSetBootMessage(char const*)>
c000e1b2:	8b 1d d4 d0 02 c0    	mov    ebx,DWORD PTR ds:0xc002d0d4
c000e1b8:	58                   	pop    eax
c000e1b9:	5a                   	pop    edx
c000e1ba:	6a 01                	push   0x1
c000e1bc:	68 e3 40 02 c0       	push   0xc00240e3
c000e1c1:	e8 68 83 00 00       	call   c001652e <Thr::loadDLL(char const*, bool)>
c000e1c6:	59                   	pop    ecx
c000e1c7:	5a                   	pop    edx
c000e1c8:	53                   	push   ebx
c000e1c9:	50                   	push   eax
c000e1ca:	e8 c0 85 00 00       	call   c001678f <Thr::executeDLL(unsigned long, void*)>
c000e1cf:	83 c4 10             	add    esp,0x10
c000e1d2:	83 ec 0c             	sub    esp,0xc
c000e1d5:	6a 02                	push   0x2
c000e1d7:	e8 b0 8f 00 00       	call   c001718c <blockTask(TaskState)>
c000e1dc:	83 c4 10             	add    esp,0x10
c000e1df:	eb f1                	jmp    c000e1d2 <KeFirstTask()+0x112>
c000e1e1:	90                   	nop

c000e1e2 <Computer::Computer()>:
c000e1e2:	83 ec 0c             	sub    esp,0xc
c000e1e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e1e9:	83 ec 08             	sub    esp,0x8
c000e1ec:	68 ff 40 02 c0       	push   0xc00240ff
c000e1f1:	50                   	push   eax
c000e1f2:	e8 61 b9 ff ff       	call   c0009b58 <Device::Device(char const*)>
c000e1f7:	83 c4 10             	add    esp,0x10
c000e1fa:	ba 18 42 02 c0       	mov    edx,0xc0024218
c000e1ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e203:	89 10                	mov    DWORD PTR [eax],edx
c000e205:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e209:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000e213:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e217:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000e221:	90                   	nop
c000e222:	83 c4 0c             	add    esp,0xc
c000e225:	c3                   	ret    

c000e226 <KePrepareShutdown()>:
c000e226:	83 ec 0c             	sub    esp,0xc
c000e229:	e8 57 ef ff ff       	call   c000d185 <KeExecuteAtexit()>
c000e22e:	a1 d4 d0 02 c0       	mov    eax,ds:0xc002d0d4
c000e233:	83 ec 0c             	sub    esp,0xc
c000e236:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c000e23c:	50                   	push   eax
c000e23d:	e8 1c ba ff ff       	call   c0009c5e <Device::closeAll()>
c000e242:	83 c4 1c             	add    esp,0x1c
c000e245:	c3                   	ret    

c000e246 <KeShutdown()>:
c000e246:	83 ec 0c             	sub    esp,0xc
c000e249:	e8 d8 ff ff ff       	call   c000e226 <KePrepareShutdown()>
c000e24e:	a1 d0 d0 02 c0       	mov    eax,ds:0xc002d0d0
c000e253:	85 c0                	test   eax,eax
c000e255:	74 02                	je     c000e259 <KeShutdown()+0x13>
c000e257:	ff d0                	call   eax
c000e259:	83 ec 0c             	sub    esp,0xc
c000e25c:	68 9c 41 02 c0       	push   0xc002419c
c000e261:	e8 24 1c 00 00       	call   c000fe8a <KePanic(char const*)>
c000e266:	83 c4 1c             	add    esp,0x1c
c000e269:	c3                   	ret    

c000e26a <KeSleep()>:
c000e26a:	a1 c8 d0 02 c0       	mov    eax,ds:0xc002d0c8
c000e26f:	85 c0                	test   eax,eax
c000e271:	74 02                	je     c000e275 <KeSleep()+0xb>
c000e273:	ff e0                	jmp    eax
c000e275:	c3                   	ret    

c000e276 <KeRestart()>:
c000e276:	83 ec 0c             	sub    esp,0xc
c000e279:	e8 a8 ff ff ff       	call   c000e226 <KePrepareShutdown()>
c000e27e:	a1 cc d0 02 c0       	mov    eax,ds:0xc002d0cc
c000e283:	85 c0                	test   eax,eax
c000e285:	74 02                	je     c000e289 <KeRestart()+0x13>
c000e287:	ff d0                	call   eax
c000e289:	e4 64                	in     al,0x64
c000e28b:	a8 02                	test   al,0x2
c000e28d:	75 fa                	jne    c000e289 <KeRestart()+0x13>
c000e28f:	b0 fe                	mov    al,0xfe
c000e291:	e6 64                	out    0x64,al
c000e293:	83 c4 0c             	add    esp,0xc
c000e296:	c3                   	ret    
c000e297:	90                   	nop

c000e298 <Computer::open(int, int, void*)>:
c000e298:	56                   	push   esi
c000e299:	53                   	push   ebx
c000e29a:	83 ec 04             	sub    esp,0x4
c000e29d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e2a1:	39 1d d4 d0 02 c0    	cmp    DWORD PTR ds:0xc002d0d4,ebx
c000e2a7:	74 10                	je     c000e2b9 <Computer::open(int, int, void*)+0x21>
c000e2a9:	83 ec 0c             	sub    esp,0xc
c000e2ac:	68 c0 41 02 c0       	push   0xc00241c0
c000e2b1:	e8 d4 1b 00 00       	call   c000fe8a <KePanic(char const*)>
c000e2b6:	83 c4 10             	add    esp,0x10
c000e2b9:	83 ec 0c             	sub    esp,0xc
c000e2bc:	68 08 41 02 c0       	push   0xc0024108
c000e2c1:	e8 6f ef ff ff       	call   c000d235 <KeSetBootMessage(char const*)>
c000e2c6:	e8 b0 bb 00 00       	call   c0019e7b <HalEnableNMI()>
c000e2cb:	c7 04 24 78 11 00 00 	mov    DWORD PTR [esp],0x1178
c000e2d2:	e8 a5 18 00 00       	call   c000fb7c <malloc>
c000e2d7:	89 04 24             	mov    DWORD PTR [esp],eax
c000e2da:	89 c6                	mov    esi,eax
c000e2dc:	e8 b9 c6 00 00       	call   c001a99a <CPU::CPU()>
c000e2e1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e2e5:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000e2eb:	50                   	push   eax
c000e2ec:	6a 00                	push   0x0
c000e2ee:	6a 00                	push   0x0
c000e2f0:	56                   	push   esi
c000e2f1:	e8 86 c8 00 00       	call   c001ab7c <CPU::open(int, int, void*)>
c000e2f6:	83 c4 14             	add    esp,0x14
c000e2f9:	68 22 41 02 c0       	push   0xc0024122
c000e2fe:	e8 32 ef ff ff       	call   c000d235 <KeSetBootMessage(char const*)>
c000e303:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c000e30a:	e8 6d 18 00 00       	call   c000fb7c <malloc>
c000e30f:	89 04 24             	mov    DWORD PTR [esp],eax
c000e312:	89 c6                	mov    esi,eax
c000e314:	e8 1b e5 ff ff       	call   c000c834 <ACPI::ACPI()>
c000e319:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c000e31f:	5a                   	pop    edx
c000e320:	59                   	pop    ecx
c000e321:	56                   	push   esi
c000e322:	53                   	push   ebx
c000e323:	e8 ce b6 ff ff       	call   c00099f6 <Device::addChild(Device*)>
c000e328:	5e                   	pop    esi
c000e329:	58                   	pop    eax
c000e32a:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000e330:	50                   	push   eax
c000e331:	53                   	push   ebx
c000e332:	e8 bf b6 ff ff       	call   c00099f6 <Device::addChild(Device*)>
c000e337:	c7 04 24 ec 41 02 c0 	mov    DWORD PTR [esp],0xc00241ec
c000e33e:	e8 f2 ee ff ff       	call   c000d235 <KeSetBootMessage(char const*)>
c000e343:	e8 93 c2 00 00       	call   c001a5db <HalInitialiseCoprocessor()>
c000e348:	c7 04 24 3a 41 02 c0 	mov    DWORD PTR [esp],0xc002413a
c000e34f:	e8 e1 ee ff ff       	call   c000d235 <KeSetBootMessage(char const*)>
c000e354:	c7 04 24 c0 e0 00 c0 	mov    DWORD PTR [esp],0xc000e0c0
c000e35b:	e8 24 8c 00 00       	call   c0016f84 <setupMultitasking(void (*)())>
c000e360:	83 c4 14             	add    esp,0x14
c000e363:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e368:	5b                   	pop    ebx
c000e369:	5e                   	pop    esi
c000e36a:	c3                   	ret    

c000e36b <KeCalculateCRC32(unsigned char*, int)>:
c000e36b:	53                   	push   ebx
c000e36c:	83 c8 ff             	or     eax,0xffffffff
c000e36f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000e373:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000e377:	01 cb                	add    ebx,ecx
c000e379:	39 d9                	cmp    ecx,ebx
c000e37b:	74 15                	je     c000e392 <KeCalculateCRC32(unsigned char*, int)+0x27>
c000e37d:	41                   	inc    ecx
c000e37e:	8a 51 ff             	mov    dl,BYTE PTR [ecx-0x1]
c000e381:	31 c2                	xor    edx,eax
c000e383:	c1 e8 08             	shr    eax,0x8
c000e386:	0f b6 d2             	movzx  edx,dl
c000e389:	33 04 95 20 69 02 c0 	xor    eax,DWORD PTR [edx*4-0x3ffd96e0]
c000e390:	eb e7                	jmp    c000e379 <KeCalculateCRC32(unsigned char*, int)+0xe>
c000e392:	5b                   	pop    ebx
c000e393:	f7 d0                	not    eax
c000e395:	c3                   	ret    

c000e396 <EnvVarContainer::getEnv(char const*)>:
c000e396:	57                   	push   edi
c000e397:	56                   	push   esi
c000e398:	53                   	push   ebx
c000e399:	31 db                	xor    ebx,ebx
c000e39b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e39f:	39 1e                	cmp    DWORD PTR [esi],ebx
c000e3a1:	7e 2b                	jle    c000e3ce <EnvVarContainer::getEnv(char const*)+0x38>
c000e3a3:	50                   	push   eax
c000e3a4:	50                   	push   eax
c000e3a5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e3a8:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c000e3af:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000e3b2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000e3b6:	e8 c5 23 ff ff       	call   c0000780 <strcmp>
c000e3bb:	83 c4 10             	add    esp,0x10
c000e3be:	85 c0                	test   eax,eax
c000e3c0:	75 09                	jne    c000e3cb <EnvVarContainer::getEnv(char const*)+0x35>
c000e3c2:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e3c5:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c000e3c9:	eb 05                	jmp    c000e3d0 <EnvVarContainer::getEnv(char const*)+0x3a>
c000e3cb:	43                   	inc    ebx
c000e3cc:	eb d1                	jmp    c000e39f <EnvVarContainer::getEnv(char const*)+0x9>
c000e3ce:	31 c0                	xor    eax,eax
c000e3d0:	5b                   	pop    ebx
c000e3d1:	5e                   	pop    esi
c000e3d2:	5f                   	pop    edi
c000e3d3:	c3                   	ret    

c000e3d4 <EnvVarContainer::setEnv(char const*, char const*)>:
c000e3d4:	55                   	push   ebp
c000e3d5:	57                   	push   edi
c000e3d6:	56                   	push   esi
c000e3d7:	53                   	push   ebx
c000e3d8:	83 ec 28             	sub    esp,0x28
c000e3db:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000e3df:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000e3e3:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000e3e7:	56                   	push   esi
c000e3e8:	e8 93 21 ff ff       	call   c0000580 <strlen>
c000e3ed:	40                   	inc    eax
c000e3ee:	89 04 24             	mov    DWORD PTR [esp],eax
c000e3f1:	e8 86 17 00 00       	call   c000fb7c <malloc>
c000e3f6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e3f9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e3fd:	e8 7e 21 ff ff       	call   c0000580 <strlen>
c000e402:	40                   	inc    eax
c000e403:	89 04 24             	mov    DWORD PTR [esp],eax
c000e406:	e8 71 17 00 00       	call   c000fb7c <malloc>
c000e40b:	89 34 24             	mov    DWORD PTR [esp],esi
c000e40e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e412:	e8 69 21 ff ff       	call   c0000580 <strlen>
c000e417:	83 c4 0c             	add    esp,0xc
c000e41a:	40                   	inc    eax
c000e41b:	50                   	push   eax
c000e41c:	6a 00                	push   0x0
c000e41e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e422:	e8 c9 20 ff ff       	call   c00004f0 <memset>
c000e427:	89 34 24             	mov    DWORD PTR [esp],esi
c000e42a:	e8 51 21 ff ff       	call   c0000580 <strlen>
c000e42f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000e433:	8d 48 01             	lea    ecx,[eax+0x1]
c000e436:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e438:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e43b:	89 de                	mov    esi,ebx
c000e43d:	e8 3e 21 ff ff       	call   c0000580 <strlen>
c000e442:	83 c4 0c             	add    esp,0xc
c000e445:	40                   	inc    eax
c000e446:	50                   	push   eax
c000e447:	6a 00                	push   0x0
c000e449:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e44d:	e8 9e 20 ff ff       	call   c00004f0 <memset>
c000e452:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e455:	e8 26 21 ff ff       	call   c0000580 <strlen>
c000e45a:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e45e:	8d 48 01             	lea    ecx,[eax+0x1]
c000e461:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e463:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000e466:	40                   	inc    eax
c000e467:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000e46a:	c1 e0 03             	shl    eax,0x3
c000e46d:	5a                   	pop    edx
c000e46e:	59                   	pop    ecx
c000e46f:	50                   	push   eax
c000e470:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000e473:	e8 f0 16 00 00       	call   c000fb68 <realloc>
c000e478:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000e47b:	8d 74 24 18          	lea    esi,[esp+0x18]
c000e47f:	b9 08 00 00 00       	mov    ecx,0x8
c000e484:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000e487:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000e48b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e48d:	83 c4 2c             	add    esp,0x2c
c000e490:	5b                   	pop    ebx
c000e491:	5e                   	pop    esi
c000e492:	5f                   	pop    edi
c000e493:	5d                   	pop    ebp
c000e494:	c3                   	ret    
c000e495:	90                   	nop

c000e496 <EnvVarContainer::deleteEnv(char const*)>:
c000e496:	c3                   	ret    
c000e497:	90                   	nop

c000e498 <EnvVarContainer::loadFrom(char const*, char const*)>:
c000e498:	55                   	push   ebp
c000e499:	57                   	push   edi
c000e49a:	56                   	push   esi
c000e49b:	53                   	push   ebx
c000e49c:	81 ec 38 01 00 00    	sub    esp,0x138
c000e4a2:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c000e4a9:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c000e4b0:	68 14 01 00 00       	push   0x114
c000e4b5:	e8 c2 16 00 00       	call   c000fb7c <malloc>
c000e4ba:	83 c4 0c             	add    esp,0xc
c000e4bd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000e4c0:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000e4c7:	89 c3                	mov    ebx,eax
c000e4c9:	50                   	push   eax
c000e4ca:	e8 b9 9c ff ff       	call   c0008188 <File::File(char const*, Process*)>
c000e4cf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e4d2:	e8 93 9f ff ff       	call   c000846a <File::exists()>
c000e4d7:	83 c4 10             	add    esp,0x10
c000e4da:	84 c0                	test   al,al
c000e4dc:	75 31                	jne    c000e50f <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c000e4de:	50                   	push   eax
c000e4df:	50                   	push   eax
c000e4e0:	6a 12                	push   0x12
c000e4e2:	53                   	push   ebx
c000e4e3:	e8 be 9c ff ff       	call   c00081a6 <File::open(FileOpenMode)>
c000e4e8:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e4ea:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000e4ed:	89 34 24             	mov    DWORD PTR [esp],esi
c000e4f0:	e8 8b 20 ff ff       	call   c0000580 <strlen>
c000e4f5:	5a                   	pop    edx
c000e4f6:	8d 54 24 20          	lea    edx,[esp+0x20]
c000e4fa:	52                   	push   edx
c000e4fb:	31 d2                	xor    edx,edx
c000e4fd:	56                   	push   esi
c000e4fe:	52                   	push   edx
c000e4ff:	50                   	push   eax
c000e500:	53                   	push   ebx
c000e501:	ff d7                	call   edi
c000e503:	83 c4 14             	add    esp,0x14
c000e506:	53                   	push   ebx
c000e507:	e8 f8 9c ff ff       	call   c0008204 <File::close()>
c000e50c:	83 c4 10             	add    esp,0x10
c000e50f:	56                   	push   esi
c000e510:	31 f6                	xor    esi,esi
c000e512:	68 00 01 00 00       	push   0x100
c000e517:	6a 00                	push   0x0
c000e519:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000e51d:	50                   	push   eax
c000e51e:	e8 cd 1f ff ff       	call   c00004f0 <memset>
c000e523:	5f                   	pop    edi
c000e524:	58                   	pop    eax
c000e525:	6a 01                	push   0x1
c000e527:	53                   	push   ebx
c000e528:	e8 79 9c ff ff       	call   c00081a6 <File::open(FileOpenMode)>
c000e52d:	83 c4 10             	add    esp,0x10
c000e530:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000e538:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000e540:	83 ec 0c             	sub    esp,0xc
c000e543:	8d 54 24 20          	lea    edx,[esp+0x20]
c000e547:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e549:	52                   	push   edx
c000e54a:	8d 4c 24 23          	lea    ecx,[esp+0x23]
c000e54e:	51                   	push   ecx
c000e54f:	6a 00                	push   0x0
c000e551:	6a 01                	push   0x1
c000e553:	53                   	push   ebx
c000e554:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000e557:	0f be 44 24 33       	movsx  eax,BYTE PTR [esp+0x33]
c000e55c:	83 c4 20             	add    esp,0x20
c000e55f:	85 c0                	test   eax,eax
c000e561:	89 c1                	mov    ecx,eax
c000e563:	0f 84 36 01 00 00    	je     c000e69f <EnvVarContainer::loadFrom(char const*, char const*)+0x207>
c000e569:	83 f8 0d             	cmp    eax,0xd
c000e56c:	0f 84 22 01 00 00    	je     c000e694 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000e572:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000e577:	0f 84 f0 00 00 00    	je     c000e66d <EnvVarContainer::loadFrom(char const*, char const*)+0x1d5>
c000e57d:	83 f8 0a             	cmp    eax,0xa
c000e580:	74 13                	je     c000e595 <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c000e582:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000e587:	74 0c                	je     c000e595 <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c000e589:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000e58f:	0f 8e f6 00 00 00    	jle    c000e68b <EnvVarContainer::loadFrom(char const*, char const*)+0x1f3>
c000e595:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e599:	83 ec 0c             	sub    esp,0xc
c000e59c:	8d 78 01             	lea    edi,[eax+0x1]
c000e59f:	57                   	push   edi
c000e5a0:	e8 d7 15 00 00       	call   c000fb7c <malloc>
c000e5a5:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c000e5a9:	8d 56 04             	lea    edx,[esi+0x4]
c000e5ac:	89 14 24             	mov    DWORD PTR [esp],edx
c000e5af:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e5b3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e5b7:	e8 c0 15 00 00       	call   c000fb7c <malloc>
c000e5bc:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e5c0:	83 c4 0c             	add    esp,0xc
c000e5c3:	57                   	push   edi
c000e5c4:	6a 00                	push   0x0
c000e5c6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e5ca:	e8 21 1f ff ff       	call   c00004f0 <memset>
c000e5cf:	8d 74 24 30          	lea    esi,[esp+0x30]
c000e5d3:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000e5d7:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000e5db:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e5dd:	83 c4 0c             	add    esp,0xc
c000e5e0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e5e4:	52                   	push   edx
c000e5e5:	6a 00                	push   0x0
c000e5e7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e5eb:	e8 00 1f ff ff       	call   c00004f0 <memset>
c000e5f0:	8d 74 24 30          	lea    esi,[esp+0x30]
c000e5f4:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c000e5f8:	89 34 24             	mov    DWORD PTR [esp],esi
c000e5fb:	e8 80 1f ff ff       	call   c0000580 <strlen>
c000e600:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c000e604:	89 c1                	mov    ecx,eax
c000e606:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e608:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000e60b:	83 c4 10             	add    esp,0x10
c000e60e:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000e611:	40                   	inc    eax
c000e612:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000e615:	85 d2                	test   edx,edx
c000e617:	75 0c                	jne    c000e625 <EnvVarContainer::loadFrom(char const*, char const*)+0x18d>
c000e619:	83 ec 0c             	sub    esp,0xc
c000e61c:	6a 08                	push   0x8
c000e61e:	e8 59 15 00 00       	call   c000fb7c <malloc>
c000e623:	eb 0c                	jmp    c000e631 <EnvVarContainer::loadFrom(char const*, char const*)+0x199>
c000e625:	51                   	push   ecx
c000e626:	51                   	push   ecx
c000e627:	c1 e0 03             	shl    eax,0x3
c000e62a:	50                   	push   eax
c000e62b:	52                   	push   edx
c000e62c:	e8 37 15 00 00       	call   c000fb68 <realloc>
c000e631:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000e634:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000e637:	83 c4 10             	add    esp,0x10
c000e63a:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c000e63d:	8d 74 24 18          	lea    esi,[esp+0x18]
c000e641:	b9 08 00 00 00       	mov    ecx,0x8
c000e646:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000e64a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e64c:	50                   	push   eax
c000e64d:	31 f6                	xor    esi,esi
c000e64f:	68 00 01 00 00       	push   0x100
c000e654:	6a 00                	push   0x0
c000e656:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000e65a:	50                   	push   eax
c000e65b:	e8 90 1e ff ff       	call   c00004f0 <memset>
c000e660:	83 c4 10             	add    esp,0x10
c000e663:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000e66b:	eb 27                	jmp    c000e694 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000e66d:	83 f8 3d             	cmp    eax,0x3d
c000e670:	74 1e                	je     c000e690 <EnvVarContainer::loadFrom(char const*, char const*)+0x1f8>
c000e672:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000e678:	7f 07                	jg     c000e681 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e9>
c000e67a:	88 4c 34 20          	mov    BYTE PTR [esp+esi*1+0x20],cl
c000e67e:	46                   	inc    esi
c000e67f:	eb 13                	jmp    c000e694 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000e681:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c000e689:	eb 09                	jmp    c000e694 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000e68b:	83 f8 3d             	cmp    eax,0x3d
c000e68e:	75 ea                	jne    c000e67a <EnvVarContainer::loadFrom(char const*, char const*)+0x1e2>
c000e690:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000e694:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000e699:	0f 85 99 fe ff ff    	jne    c000e538 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c000e69f:	83 ec 0c             	sub    esp,0xc
c000e6a2:	53                   	push   ebx
c000e6a3:	e8 5c 9b ff ff       	call   c0008204 <File::close()>
c000e6a8:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e6aa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e6ad:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000e6b0:	81 c4 3c 01 00 00    	add    esp,0x13c
c000e6b6:	5b                   	pop    ebx
c000e6b7:	5e                   	pop    esi
c000e6b8:	5f                   	pop    edi
c000e6b9:	5d                   	pop    ebp
c000e6ba:	c3                   	ret    
c000e6bb:	90                   	nop

c000e6bc <EnvVarContainer::__loadSystem()>:
c000e6bc:	83 ec 10             	sub    esp,0x10
c000e6bf:	68 20 6d 02 c0       	push   0xc0026d20
c000e6c4:	68 3c 42 02 c0       	push   0xc002423c
c000e6c9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e6cd:	e8 c6 fd ff ff       	call   c000e498 <EnvVarContainer::loadFrom(char const*, char const*)>
c000e6d2:	83 c4 1c             	add    esp,0x1c
c000e6d5:	c3                   	ret    

c000e6d6 <EnvVarContainer::__loadUser()>:
c000e6d6:	c3                   	ret    
c000e6d7:	90                   	nop

c000e6d8 <EnvVarContainer::EnvVarContainer(Process*)>:
c000e6d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e6dc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e6e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e6e6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e6ea:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000e6ed:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e6f1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e6f8:	90                   	nop
c000e6f9:	c3                   	ret    

c000e6fa <EnvVarContainer::~EnvVarContainer()>:
c000e6fa:	83 ec 0c             	sub    esp,0xc
c000e6fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e701:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e704:	85 c0                	test   eax,eax
c000e706:	74 1d                	je     c000e725 <EnvVarContainer::~EnvVarContainer()+0x2b>
c000e708:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e70c:	8b 00                	mov    eax,DWORD PTR [eax]
c000e70e:	85 c0                	test   eax,eax
c000e710:	74 13                	je     c000e725 <EnvVarContainer::~EnvVarContainer()+0x2b>
c000e712:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e716:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e719:	83 ec 0c             	sub    esp,0xc
c000e71c:	50                   	push   eax
c000e71d:	e8 6a 14 00 00       	call   c000fb8c <free>
c000e722:	83 c4 10             	add    esp,0x10
c000e725:	90                   	nop
c000e726:	83 c4 0c             	add    esp,0xc
c000e729:	c3                   	ret    

c000e72a <KeGetEnv(Process*, char const*)>:
c000e72a:	53                   	push   ebx
c000e72b:	83 ec 08             	sub    esp,0x8
c000e72e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e732:	39 05 78 fa 02 c0    	cmp    DWORD PTR ds:0xc002fa78,eax
c000e738:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000e73c:	74 04                	je     c000e742 <KeGetEnv(Process*, char const*)+0x18>
c000e73e:	85 c0                	test   eax,eax
c000e740:	75 0b                	jne    c000e74d <KeGetEnv(Process*, char const*)+0x23>
c000e742:	a1 dc d0 02 c0       	mov    eax,ds:0xc002d0dc
c000e747:	85 c0                	test   eax,eax
c000e749:	75 19                	jne    c000e764 <KeGetEnv(Process*, char const*)+0x3a>
c000e74b:	eb 27                	jmp    c000e774 <KeGetEnv(Process*, char const*)+0x4a>
c000e74d:	52                   	push   edx
c000e74e:	52                   	push   edx
c000e74f:	53                   	push   ebx
c000e750:	ff b0 ba 07 00 00    	push   DWORD PTR [eax+0x7ba]
c000e756:	e8 3b fc ff ff       	call   c000e396 <EnvVarContainer::getEnv(char const*)>
c000e75b:	83 c4 10             	add    esp,0x10
c000e75e:	85 c0                	test   eax,eax
c000e760:	75 28                	jne    c000e78a <KeGetEnv(Process*, char const*)+0x60>
c000e762:	eb de                	jmp    c000e742 <KeGetEnv(Process*, char const*)+0x18>
c000e764:	52                   	push   edx
c000e765:	52                   	push   edx
c000e766:	53                   	push   ebx
c000e767:	50                   	push   eax
c000e768:	e8 29 fc ff ff       	call   c000e396 <EnvVarContainer::getEnv(char const*)>
c000e76d:	83 c4 10             	add    esp,0x10
c000e770:	85 c0                	test   eax,eax
c000e772:	75 16                	jne    c000e78a <KeGetEnv(Process*, char const*)+0x60>
c000e774:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000e778:	a1 e0 d0 02 c0       	mov    eax,ds:0xc002d0e0
c000e77d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e781:	83 c4 08             	add    esp,0x8
c000e784:	5b                   	pop    ebx
c000e785:	e9 0c fc ff ff       	jmp    c000e396 <EnvVarContainer::getEnv(char const*)>
c000e78a:	83 c4 08             	add    esp,0x8
c000e78d:	5b                   	pop    ebx
c000e78e:	c3                   	ret    

c000e78f <KeSetEnvSystem(char const*, char const*)>:
c000e78f:	83 ec 10             	sub    esp,0x10
c000e792:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e796:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e79a:	ff 35 e0 d0 02 c0    	push   DWORD PTR ds:0xc002d0e0
c000e7a0:	e8 2f fc ff ff       	call   c000e3d4 <EnvVarContainer::setEnv(char const*, char const*)>
c000e7a5:	83 c4 1c             	add    esp,0x1c
c000e7a8:	c3                   	ret    

c000e7a9 <KeSetEnvUser(char const*, char const*)>:
c000e7a9:	a1 dc d0 02 c0       	mov    eax,ds:0xc002d0dc
c000e7ae:	85 c0                	test   eax,eax
c000e7b0:	74 15                	je     c000e7c7 <KeSetEnvUser(char const*, char const*)+0x1e>
c000e7b2:	83 ec 10             	sub    esp,0x10
c000e7b5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e7b9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e7bd:	50                   	push   eax
c000e7be:	e8 11 fc ff ff       	call   c000e3d4 <EnvVarContainer::setEnv(char const*, char const*)>
c000e7c3:	83 c4 1c             	add    esp,0x1c
c000e7c6:	c3                   	ret    
c000e7c7:	c3                   	ret    

c000e7c8 <KeSetEnvProcess(Process*, char const*, char const*)>:
c000e7c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e7cc:	8b 80 ba 07 00 00    	mov    eax,DWORD PTR [eax+0x7ba]
c000e7d2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e7d6:	e9 f9 fb ff ff       	jmp    c000e3d4 <EnvVarContainer::setEnv(char const*, char const*)>

c000e7db <KeDeleteEnvSystem(char const*)>:
c000e7db:	c3                   	ret    

c000e7dc <KeDeleteEnvUser(char const*)>:
c000e7dc:	c3                   	ret    

c000e7dd <KeDeleteEnvProcess(Process*, char const*)>:
c000e7dd:	c3                   	ret    

c000e7de <KeNewProcessEnv(Process*)>:
c000e7de:	83 ec 28             	sub    esp,0x28
c000e7e1:	6a 0c                	push   0xc
c000e7e3:	e8 94 13 00 00       	call   c000fb7c <malloc>
c000e7e8:	5a                   	pop    edx
c000e7e9:	59                   	pop    ecx
c000e7ea:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e7ee:	50                   	push   eax
c000e7ef:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e7f3:	e8 e0 fe ff ff       	call   c000e6d8 <EnvVarContainer::EnvVarContainer(Process*)>
c000e7f8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e7fc:	83 c4 2c             	add    esp,0x2c
c000e7ff:	c3                   	ret    

c000e800 <KeCopyProcessEnv(Process*, Process*)>:
c000e800:	57                   	push   edi
c000e801:	56                   	push   esi
c000e802:	53                   	push   ebx
c000e803:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e807:	83 ec 0c             	sub    esp,0xc
c000e80a:	8b b8 ba 07 00 00    	mov    edi,DWORD PTR [eax+0x7ba]
c000e810:	6a 0c                	push   0xc
c000e812:	e8 65 13 00 00       	call   c000fb7c <malloc>
c000e817:	89 c3                	mov    ebx,eax
c000e819:	58                   	pop    eax
c000e81a:	5a                   	pop    edx
c000e81b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e81f:	53                   	push   ebx
c000e820:	e8 b3 fe ff ff       	call   c000e6d8 <EnvVarContainer::EnvVarContainer(Process*)>
c000e825:	8b 07                	mov    eax,DWORD PTR [edi]
c000e827:	89 03                	mov    DWORD PTR [ebx],eax
c000e829:	c1 e0 03             	shl    eax,0x3
c000e82c:	89 04 24             	mov    DWORD PTR [esp],eax
c000e82f:	e8 48 13 00 00       	call   c000fb7c <malloc>
c000e834:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000e837:	8b 0f                	mov    ecx,DWORD PTR [edi]
c000e839:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c000e83c:	89 c7                	mov    edi,eax
c000e83e:	c1 e1 03             	shl    ecx,0x3
c000e841:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e843:	83 c4 10             	add    esp,0x10
c000e846:	89 d8                	mov    eax,ebx
c000e848:	5b                   	pop    ebx
c000e849:	5e                   	pop    esi
c000e84a:	5f                   	pop    edi
c000e84b:	c3                   	ret    

c000e84c <KeLoadSystemEnv()>:
c000e84c:	53                   	push   ebx
c000e84d:	83 ec 14             	sub    esp,0x14
c000e850:	6a 0c                	push   0xc
c000e852:	e8 25 13 00 00       	call   c000fb7c <malloc>
c000e857:	89 c3                	mov    ebx,eax
c000e859:	58                   	pop    eax
c000e85a:	5a                   	pop    edx
c000e85b:	ff 35 78 fa 02 c0    	push   DWORD PTR ds:0xc002fa78
c000e861:	53                   	push   ebx
c000e862:	e8 71 fe ff ff       	call   c000e6d8 <EnvVarContainer::EnvVarContainer(Process*)>
c000e867:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e86a:	89 1d e0 d0 02 c0    	mov    DWORD PTR ds:0xc002d0e0,ebx
c000e870:	e8 47 fe ff ff       	call   c000e6bc <EnvVarContainer::__loadSystem()>
c000e875:	83 c4 18             	add    esp,0x18
c000e878:	5b                   	pop    ebx
c000e879:	c3                   	ret    

c000e87a <KeLoadUserEnv()>:
c000e87a:	53                   	push   ebx
c000e87b:	83 ec 14             	sub    esp,0x14
c000e87e:	6a 0c                	push   0xc
c000e880:	e8 f7 12 00 00       	call   c000fb7c <malloc>
c000e885:	89 c3                	mov    ebx,eax
c000e887:	58                   	pop    eax
c000e888:	5a                   	pop    edx
c000e889:	ff 35 78 fa 02 c0    	push   DWORD PTR ds:0xc002fa78
c000e88f:	53                   	push   ebx
c000e890:	e8 43 fe ff ff       	call   c000e6d8 <EnvVarContainer::EnvVarContainer(Process*)>
c000e895:	89 1d dc d0 02 c0    	mov    DWORD PTR ds:0xc002d0dc,ebx
c000e89b:	83 c4 18             	add    esp,0x18
c000e89e:	5b                   	pop    ebx
c000e89f:	c3                   	ret    

c000e8a0 <KeFlushEnv()>:
c000e8a0:	c3                   	ret    

c000e8a1 <KeGetProcessTotalEnvCount(Process*)>:
c000e8a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e8a5:	8b 15 dc d0 02 c0    	mov    edx,DWORD PTR ds:0xc002d0dc
c000e8ab:	8b 88 ba 07 00 00    	mov    ecx,DWORD PTR [eax+0x7ba]
c000e8b1:	a1 e0 d0 02 c0       	mov    eax,ds:0xc002d0e0
c000e8b6:	8b 00                	mov    eax,DWORD PTR [eax]
c000e8b8:	03 01                	add    eax,DWORD PTR [ecx]
c000e8ba:	85 d2                	test   edx,edx
c000e8bc:	74 02                	je     c000e8c0 <KeGetProcessTotalEnvCount(Process*)+0x1f>
c000e8be:	03 02                	add    eax,DWORD PTR [edx]
c000e8c0:	c3                   	ret    

c000e8c1 <KeGetProcessEnvPair(Process*, int)>:
c000e8c1:	57                   	push   edi
c000e8c2:	56                   	push   esi
c000e8c3:	8b 35 dc d0 02 c0    	mov    esi,DWORD PTR ds:0xc002d0dc
c000e8c9:	53                   	push   ebx
c000e8ca:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e8ce:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e8d2:	85 f6                	test   esi,esi
c000e8d4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e8d8:	8b 88 ba 07 00 00    	mov    ecx,DWORD PTR [eax+0x7ba]
c000e8de:	8b 01                	mov    eax,DWORD PTR [ecx]
c000e8e0:	75 16                	jne    c000e8f8 <KeGetProcessEnvPair(Process*, int)+0x37>
c000e8e2:	39 c2                	cmp    edx,eax
c000e8e4:	7c 16                	jl     c000e8fc <KeGetProcessEnvPair(Process*, int)+0x3b>
c000e8e6:	8b 0d e0 d0 02 c0    	mov    ecx,DWORD PTR ds:0xc002d0e0
c000e8ec:	8b 31                	mov    esi,DWORD PTR [ecx]
c000e8ee:	01 c6                	add    esi,eax
c000e8f0:	39 d6                	cmp    esi,edx
c000e8f2:	7e 3c                	jle    c000e930 <KeGetProcessEnvPair(Process*, int)+0x6f>
c000e8f4:	29 c2                	sub    edx,eax
c000e8f6:	eb 04                	jmp    c000e8fc <KeGetProcessEnvPair(Process*, int)+0x3b>
c000e8f8:	39 c2                	cmp    edx,eax
c000e8fa:	7d 05                	jge    c000e901 <KeGetProcessEnvPair(Process*, int)+0x40>
c000e8fc:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c000e8ff:	eb 20                	jmp    c000e921 <KeGetProcessEnvPair(Process*, int)+0x60>
c000e901:	8b 3e                	mov    edi,DWORD PTR [esi]
c000e903:	8d 0c 07             	lea    ecx,[edi+eax*1]
c000e906:	39 d1                	cmp    ecx,edx
c000e908:	7e 04                	jle    c000e90e <KeGetProcessEnvPair(Process*, int)+0x4d>
c000e90a:	29 c2                	sub    edx,eax
c000e90c:	eb 10                	jmp    c000e91e <KeGetProcessEnvPair(Process*, int)+0x5d>
c000e90e:	8b 35 e0 d0 02 c0    	mov    esi,DWORD PTR ds:0xc002d0e0
c000e914:	03 0e                	add    ecx,DWORD PTR [esi]
c000e916:	39 d1                	cmp    ecx,edx
c000e918:	7e 16                	jle    c000e930 <KeGetProcessEnvPair(Process*, int)+0x6f>
c000e91a:	29 c2                	sub    edx,eax
c000e91c:	29 fa                	sub    edx,edi
c000e91e:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e921:	8d 14 d0             	lea    edx,[eax+edx*8]
c000e924:	8b 02                	mov    eax,DWORD PTR [edx]
c000e926:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000e929:	89 03                	mov    DWORD PTR [ebx],eax
c000e92b:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000e92e:	eb 1d                	jmp    c000e94d <KeGetProcessEnvPair(Process*, int)+0x8c>
c000e930:	83 ec 0c             	sub    esp,0xc
c000e933:	68 5e 42 02 c0       	push   0xc002425e
c000e938:	e8 4d 15 00 00       	call   c000fe8a <KePanic(char const*)>
c000e93d:	83 c4 10             	add    esp,0x10
c000e940:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000e946:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000e94d:	89 d8                	mov    eax,ebx
c000e94f:	5b                   	pop    ebx
c000e950:	5e                   	pop    esi
c000e951:	5f                   	pop    edi
c000e952:	c2 04 00             	ret    0x4
c000e955:	66 90                	xchg   ax,ax
c000e957:	90                   	nop

c000e958 <KeSetupInterrupts()>:
c000e958:	83 ec 10             	sub    esp,0x10
c000e95b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000e963:	90                   	nop
c000e964:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c000e96c:	7f 5a                	jg     c000e9c8 <KeSetupInterrupts()+0x70>
c000e96e:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000e976:	66 90                	xchg   ax,ax
c000e978:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c000e97d:	7f 41                	jg     c000e9c0 <KeSetupInterrupts()+0x68>
c000e97f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e983:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000e98a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e98e:	01 d0                	add    eax,edx
c000e990:	c7 04 85 00 e1 02 c0 00 00 00 00 	mov    DWORD PTR [eax*4-0x3ffd1f00],0x0
c000e99b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e99f:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000e9a6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e9aa:	01 d0                	add    eax,edx
c000e9ac:	c7 04 85 00 d1 02 c0 00 00 00 00 	mov    DWORD PTR [eax*4-0x3ffd2f00],0x0
c000e9b7:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c000e9bc:	eb ba                	jmp    c000e978 <KeSetupInterrupts()+0x20>
c000e9be:	66 90                	xchg   ax,ax
c000e9c0:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c000e9c5:	eb 9d                	jmp    c000e964 <KeSetupInterrupts()+0xc>
c000e9c7:	90                   	nop
c000e9c8:	90                   	nop
c000e9c9:	83 c4 10             	add    esp,0x10
c000e9cc:	c3                   	ret    
c000e9cd:	8d 76 00             	lea    esi,[esi+0x0]

c000e9d0 <int_handler>:
c000e9d0:	83 ec 2c             	sub    esp,0x2c
c000e9d3:	90                   	nop
c000e9d4:	a0 44 f1 02 c0       	mov    al,ds:0xc002f144
c000e9d9:	0f b6 c0             	movzx  eax,al
c000e9dc:	85 c0                	test   eax,eax
c000e9de:	74 04                	je     c000e9e4 <int_handler+0x14>
c000e9e0:	fa                   	cli    
c000e9e1:	f4                   	hlt    
c000e9e2:	eb f0                	jmp    c000e9d4 <int_handler+0x4>
c000e9e4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e9e8:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c000e9eb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e9ef:	83 7c 24 18 1f       	cmp    DWORD PTR [esp+0x18],0x1f
c000e9f4:	7e 1a                	jle    c000ea10 <int_handler+0x40>
c000e9f6:	83 7c 24 18 37       	cmp    DWORD PTR [esp+0x18],0x37
c000e9fb:	7f 13                	jg     c000ea10 <int_handler+0x40>
c000e9fd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ea01:	83 e8 20             	sub    eax,0x20
c000ea04:	83 ec 0c             	sub    esp,0xc
c000ea07:	50                   	push   eax
c000ea08:	e8 5e bf 00 00       	call   c001a96b <HalEndOfInterrupt(int)>
c000ea0d:	83 c4 10             	add    esp,0x10
c000ea10:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ea14:	c1 e0 04             	shl    eax,0x4
c000ea17:	05 00 e1 02 c0       	add    eax,0xc002e100
c000ea1c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ea20:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ea24:	c1 e0 04             	shl    eax,0x4
c000ea27:	05 00 d1 02 c0       	add    eax,0xc002d100
c000ea2c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ea30:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000ea38:	83 7c 24 1c 03       	cmp    DWORD PTR [esp+0x1c],0x3
c000ea3d:	0f 8f ad 00 00 00    	jg     c000eaf0 <int_handler+0x120>
c000ea43:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ea47:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000ea4e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ea52:	01 d0                	add    eax,edx
c000ea54:	8b 00                	mov    eax,DWORD PTR [eax]
c000ea56:	85 c0                	test   eax,eax
c000ea58:	0f 84 86 00 00 00    	je     c000eae4 <int_handler+0x114>
c000ea5e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ea62:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c000ea65:	83 f8 60             	cmp    eax,0x60
c000ea68:	75 46                	jne    c000eab0 <int_handler+0xe0>
c000ea6a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ea6e:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000ea75:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ea79:	01 d0                	add    eax,edx
c000ea7b:	8b 00                	mov    eax,DWORD PTR [eax]
c000ea7d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ea81:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c000ea88:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ea8c:	01 ca                	add    edx,ecx
c000ea8e:	8b 12                	mov    edx,DWORD PTR [edx]
c000ea90:	83 ec 08             	sub    esp,0x8
c000ea93:	52                   	push   edx
c000ea94:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ea98:	ff d0                	call   eax
c000ea9a:	83 c4 10             	add    esp,0x10
c000ea9d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000eaa1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000eaa5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eaa9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000eaad:	eb 4d                	jmp    c000eafc <int_handler+0x12c>
c000eaaf:	90                   	nop
c000eab0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000eab4:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000eabb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000eabf:	01 d0                	add    eax,edx
c000eac1:	8b 00                	mov    eax,DWORD PTR [eax]
c000eac3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000eac7:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c000eace:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ead2:	01 ca                	add    edx,ecx
c000ead4:	8b 12                	mov    edx,DWORD PTR [edx]
c000ead6:	83 ec 08             	sub    esp,0x8
c000ead9:	52                   	push   edx
c000eada:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000eade:	ff d0                	call   eax
c000eae0:	83 c4 10             	add    esp,0x10
c000eae3:	90                   	nop
c000eae4:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000eae9:	e9 4a ff ff ff       	jmp    c000ea38 <int_handler+0x68>
c000eaee:	66 90                	xchg   ax,ax
c000eaf0:	b8 00 00 00 00       	mov    eax,0x0
c000eaf5:	ba 00 00 00 00       	mov    edx,0x0
c000eafa:	66 90                	xchg   ax,ax
c000eafc:	83 c4 2c             	add    esp,0x2c
c000eaff:	c3                   	ret    

c000eb00 <KeDisplayProgramFault(char const*)>:
c000eb00:	83 ec 0c             	sub    esp,0xc
c000eb03:	83 ec 0c             	sub    esp,0xc
c000eb06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eb0a:	e8 57 84 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000eb0f:	83 c4 10             	add    esp,0x10
c000eb12:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000eb17:	8b 00                	mov    eax,DWORD PTR [eax]
c000eb19:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000eb1c:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c000eb22:	85 c0                	test   eax,eax
c000eb24:	74 22                	je     c000eb48 <KeDisplayProgramFault(char const*)+0x48>
c000eb26:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000eb2b:	8b 00                	mov    eax,DWORD PTR [eax]
c000eb2d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000eb30:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c000eb36:	6a 04                	push   0x4
c000eb38:	6a 0f                	push   0xf
c000eb3a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000eb3e:	50                   	push   eax
c000eb3f:	e8 54 3c 00 00       	call   c0012798 <VgaText::puts(char const*, VgaColour, VgaColour)>
c000eb44:	83 c4 10             	add    esp,0x10
c000eb47:	90                   	nop
c000eb48:	90                   	nop
c000eb49:	83 c4 0c             	add    esp,0xc
c000eb4c:	c3                   	ret    
c000eb4d:	8d 76 00             	lea    esi,[esi+0x0]

c000eb50 <KeGeneralProtectionFault(void*, void*)>:
c000eb50:	83 ec 0c             	sub    esp,0xc
c000eb53:	83 ec 0c             	sub    esp,0xc
c000eb56:	68 78 42 02 c0       	push   0xc0024278
c000eb5b:	e8 06 84 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000eb60:	83 c4 10             	add    esp,0x10
c000eb63:	83 ec 08             	sub    esp,0x8
c000eb66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eb6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eb6e:	e8 b7 b3 00 00       	call   c0019f2a <HalHandleGeneralProtectionFault(void*, void*)>
c000eb73:	83 c4 10             	add    esp,0x10
c000eb76:	0f b6 c0             	movzx  eax,al
c000eb79:	85 c0                	test   eax,eax
c000eb7b:	75 2f                	jne    c000ebac <KeGeneralProtectionFault(void*, void*)+0x5c>
c000eb7d:	83 ec 0c             	sub    esp,0xc
c000eb80:	68 83 42 02 c0       	push   0xc0024283
c000eb85:	e8 76 ff ff ff       	call   c000eb00 <KeDisplayProgramFault(char const*)>
c000eb8a:	83 c4 10             	add    esp,0x10
c000eb8d:	83 ec 0c             	sub    esp,0xc
c000eb90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eb94:	e8 f5 b4 00 00       	call   c001a08e <HalDisplayDebugInfo(void*)>
c000eb99:	83 c4 10             	add    esp,0x10
c000eb9c:	83 ec 0c             	sub    esp,0xc
c000eb9f:	6a 00                	push   0x0
c000eba1:	e8 2a 8e 00 00       	call   c00179d0 <Thr::terminateFromIRQ(int)>
c000eba6:	83 c4 10             	add    esp,0x10
c000eba9:	eb 05                	jmp    c000ebb0 <KeGeneralProtectionFault(void*, void*)+0x60>
c000ebab:	90                   	nop
c000ebac:	90                   	nop
c000ebad:	8d 76 00             	lea    esi,[esi+0x0]
c000ebb0:	83 c4 0c             	add    esp,0xc
c000ebb3:	c3                   	ret    

c000ebb4 <KePageFault(void*, void*)>:
c000ebb4:	83 ec 0c             	sub    esp,0xc
c000ebb7:	83 ec 0c             	sub    esp,0xc
c000ebba:	68 9c 42 02 c0       	push   0xc002429c
c000ebbf:	e8 a2 83 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000ebc4:	83 c4 10             	add    esp,0x10
c000ebc7:	83 ec 08             	sub    esp,0x8
c000ebca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ebce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ebd2:	e8 46 b4 00 00       	call   c001a01d <HalHandlePageFault(void*, void*)>
c000ebd7:	83 c4 10             	add    esp,0x10
c000ebda:	0f b6 c0             	movzx  eax,al
c000ebdd:	85 c0                	test   eax,eax
c000ebdf:	75 2f                	jne    c000ec10 <KePageFault(void*, void*)+0x5c>
c000ebe1:	83 ec 0c             	sub    esp,0xc
c000ebe4:	68 a9 42 02 c0       	push   0xc00242a9
c000ebe9:	e8 12 ff ff ff       	call   c000eb00 <KeDisplayProgramFault(char const*)>
c000ebee:	83 c4 10             	add    esp,0x10
c000ebf1:	83 ec 0c             	sub    esp,0xc
c000ebf4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ebf8:	e8 91 b4 00 00       	call   c001a08e <HalDisplayDebugInfo(void*)>
c000ebfd:	83 c4 10             	add    esp,0x10
c000ec00:	83 ec 0c             	sub    esp,0xc
c000ec03:	6a 00                	push   0x0
c000ec05:	e8 c6 8d 00 00       	call   c00179d0 <Thr::terminateFromIRQ(int)>
c000ec0a:	83 c4 10             	add    esp,0x10
c000ec0d:	eb 05                	jmp    c000ec14 <KePageFault(void*, void*)+0x60>
c000ec0f:	90                   	nop
c000ec10:	90                   	nop
c000ec11:	8d 76 00             	lea    esi,[esi+0x0]
c000ec14:	83 c4 0c             	add    esp,0xc
c000ec17:	c3                   	ret    

c000ec18 <KeNonMaskableInterrupt(void*, void*)>:
c000ec18:	83 ec 0c             	sub    esp,0xc
c000ec1b:	e8 fc b7 00 00       	call   c001a41c <HalReceivedNMI()>
c000ec20:	90                   	nop
c000ec21:	83 c4 0c             	add    esp,0xc
c000ec24:	c3                   	ret    
c000ec25:	8d 76 00             	lea    esi,[esi+0x0]

c000ec28 <KeOtherFault(void*, void*)>:
c000ec28:	83 ec 0c             	sub    esp,0xc
c000ec2b:	83 ec 0c             	sub    esp,0xc
c000ec2e:	68 b4 42 02 c0       	push   0xc00242b4
c000ec33:	e8 c8 fe ff ff       	call   c000eb00 <KeDisplayProgramFault(char const*)>
c000ec38:	83 c4 10             	add    esp,0x10
c000ec3b:	83 ec 0c             	sub    esp,0xc
c000ec3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ec42:	e8 47 b4 00 00       	call   c001a08e <HalDisplayDebugInfo(void*)>
c000ec47:	83 c4 10             	add    esp,0x10
c000ec4a:	83 ec 0c             	sub    esp,0xc
c000ec4d:	6a 00                	push   0x0
c000ec4f:	e8 7c 8d 00 00       	call   c00179d0 <Thr::terminateFromIRQ(int)>
c000ec54:	83 c4 10             	add    esp,0x10
c000ec57:	90                   	nop
c000ec58:	83 c4 0c             	add    esp,0xc
c000ec5b:	c3                   	ret    

c000ec5c <KeOpcodeFault(void*, void*)>:
c000ec5c:	55                   	push   ebp
c000ec5d:	89 e5                	mov    ebp,esp
c000ec5f:	83 ec 08             	sub    esp,0x8
c000ec62:	83 ec 08             	sub    esp,0x8
c000ec65:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c000ec68:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000ec6b:	e8 dc b3 00 00       	call   c001a04c <HalHandleOpcodeFault(void*, void*)>
c000ec70:	83 c4 10             	add    esp,0x10
c000ec73:	0f b6 c0             	movzx  eax,al
c000ec76:	85 c0                	test   eax,eax
c000ec78:	75 2e                	jne    c000eca8 <KeOpcodeFault(void*, void*)+0x4c>
c000ec7a:	83 ec 0c             	sub    esp,0xc
c000ec7d:	68 dc 42 02 c0       	push   0xc00242dc
c000ec82:	e8 79 fe ff ff       	call   c000eb00 <KeDisplayProgramFault(char const*)>
c000ec87:	83 c4 10             	add    esp,0x10
c000ec8a:	83 ec 0c             	sub    esp,0xc
c000ec8d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000ec90:	e8 f9 b3 00 00       	call   c001a08e <HalDisplayDebugInfo(void*)>
c000ec95:	83 c4 10             	add    esp,0x10
c000ec98:	83 ec 0c             	sub    esp,0xc
c000ec9b:	6a 00                	push   0x0
c000ec9d:	e8 2e 8d 00 00       	call   c00179d0 <Thr::terminateFromIRQ(int)>
c000eca2:	83 c4 10             	add    esp,0x10
c000eca5:	eb 05                	jmp    c000ecac <KeOpcodeFault(void*, void*)+0x50>
c000eca7:	90                   	nop
c000eca8:	90                   	nop
c000eca9:	8d 76 00             	lea    esi,[esi+0x0]
c000ecac:	c9                   	leave  
c000ecad:	c3                   	ret    
c000ecae:	66 90                	xchg   ax,ax

c000ecb0 <KeDoubleFault(void*, void*)>:
c000ecb0:	55                   	push   ebp
c000ecb1:	89 e5                	mov    ebp,esp
c000ecb3:	83 ec 08             	sub    esp,0x8
c000ecb6:	83 ec 0c             	sub    esp,0xc
c000ecb9:	68 e9 42 02 c0       	push   0xc00242e9
c000ecbe:	e8 c7 11 00 00       	call   c000fe8a <KePanic(char const*)>
c000ecc3:	83 c4 10             	add    esp,0x10
c000ecc6:	90                   	nop
c000ecc7:	c9                   	leave  
c000ecc8:	c3                   	ret    
c000ecc9:	90                   	nop

c000ecca <GDTEntry::setBase(unsigned int)>:
c000ecca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ecce:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ecd2:	89 c1                	mov    ecx,eax
c000ecd4:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000ecd8:	c1 e9 10             	shr    ecx,0x10
c000ecdb:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000ecde:	c1 e8 18             	shr    eax,0x18
c000ece1:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000ece4:	c3                   	ret    
c000ece5:	90                   	nop

c000ece6 <GDTEntry::setLimit(unsigned int)>:
c000ece6:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ecea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ecee:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000ecf1:	66 89 01             	mov    WORD PTR [ecx],ax
c000ecf4:	c1 e8 10             	shr    eax,0x10
c000ecf7:	83 e0 0f             	and    eax,0xf
c000ecfa:	83 e2 f0             	and    edx,0xfffffff0
c000ecfd:	09 d0                	or     eax,edx
c000ecff:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000ed02:	c3                   	ret    
c000ed03:	90                   	nop

c000ed04 <GDT::GDT()>:
c000ed04:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ed08:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ed0e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ed12:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ed18:	90                   	nop
c000ed19:	c3                   	ret    

c000ed1a <GDT::addEntry(GDTEntry)>:
c000ed1a:	53                   	push   ebx
c000ed1b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ed1f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ed23:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ed27:	8b 02                	mov    eax,DWORD PTR [edx]
c000ed29:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c000ed2d:	8d 48 01             	lea    ecx,[eax+0x1]
c000ed30:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c000ed34:	c1 e0 03             	shl    eax,0x3
c000ed37:	89 0a                	mov    DWORD PTR [edx],ecx
c000ed39:	5b                   	pop    ebx
c000ed3a:	c3                   	ret    
c000ed3b:	90                   	nop

c000ed3c <GDT::getNumberOfEntries()>:
c000ed3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ed40:	8b 00                	mov    eax,DWORD PTR [eax]
c000ed42:	c3                   	ret    
c000ed43:	90                   	nop

c000ed44 <GDT::flush()>:
c000ed44:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ed48:	8b 10                	mov    edx,DWORD PTR [eax]
c000ed4a:	83 c0 04             	add    eax,0x4
c000ed4d:	a3 02 f1 02 c0       	mov    ds:0xc002f102,eax
c000ed52:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000ed59:	66 89 15 00 f1 02 c0 	mov    WORD PTR ds:0xc002f100,dx
c000ed60:	e9 f5 15 ff ff       	jmp    c000035a <loadGDT>
c000ed65:	90                   	nop

c000ed66 <GDT::setup()>:
c000ed66:	57                   	push   edi
c000ed67:	56                   	push   esi
c000ed68:	53                   	push   ebx
c000ed69:	83 ec 30             	sub    esp,0x30
c000ed6c:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000ed70:	6a 00                	push   0x0
c000ed72:	8d 74 24 14          	lea    esi,[esp+0x14]
c000ed76:	56                   	push   esi
c000ed77:	e8 4e ff ff ff       	call   c000ecca <GDTEntry::setBase(unsigned int)>
c000ed7c:	6a 00                	push   0x0
c000ed7e:	56                   	push   esi
c000ed7f:	e8 62 ff ff ff       	call   c000ece6 <GDTEntry::setLimit(unsigned int)>
c000ed84:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c000ed8c:	6a 00                	push   0x0
c000ed8e:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c000ed92:	56                   	push   esi
c000ed93:	e8 32 ff ff ff       	call   c000ecca <GDTEntry::setBase(unsigned int)>
c000ed98:	68 ff ff ff 00       	push   0xffffff
c000ed9d:	56                   	push   esi
c000ed9e:	e8 43 ff ff ff       	call   c000ece6 <GDTEntry::setLimit(unsigned int)>
c000eda3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000eda7:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000edab:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000edb0:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000edb4:	0d 00 9a c0 00       	or     eax,0xc09a00
c000edb9:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000edbd:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c000edc1:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000edc5:	89 f8                	mov    eax,edi
c000edc7:	89 fa                	mov    edx,edi
c000edc9:	80 e4 f7             	and    ah,0xf7
c000edcc:	80 ce 60             	or     dh,0x60
c000edcf:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000edd3:	89 c7                	mov    edi,eax
c000edd5:	80 cc 60             	or     ah,0x60
c000edd8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000eddc:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000ede0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ede4:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000ede8:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000edec:	83 c4 20             	add    esp,0x20
c000edef:	6a 00                	push   0x0
c000edf1:	8d 44 24 24          	lea    eax,[esp+0x24]
c000edf5:	50                   	push   eax
c000edf6:	e8 cf fe ff ff       	call   c000ecca <GDTEntry::setBase(unsigned int)>
c000edfb:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c000edff:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000ee03:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000ee07:	83 e0 3f             	and    eax,0x3f
c000ee0a:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c000ee0e:	6a 00                	push   0x0
c000ee10:	8d 44 24 34          	lea    eax,[esp+0x34]
c000ee14:	50                   	push   eax
c000ee15:	e8 b0 fe ff ff       	call   c000ecca <GDTEntry::setBase(unsigned int)>
c000ee1a:	8a 44 24 3e          	mov    al,BYTE PTR [esp+0x3e]
c000ee1e:	83 e0 3f             	and    eax,0x3f
c000ee21:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c000ee25:	83 c4 0c             	add    esp,0xc
c000ee28:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ee2c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ee30:	53                   	push   ebx
c000ee31:	e8 e4 fe ff ff       	call   c000ed1a <GDT::addEntry(GDTEntry)>
c000ee36:	83 c4 0c             	add    esp,0xc
c000ee39:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ee3d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ee41:	53                   	push   ebx
c000ee42:	e8 d3 fe ff ff       	call   c000ed1a <GDT::addEntry(GDTEntry)>
c000ee47:	83 c4 0c             	add    esp,0xc
c000ee4a:	57                   	push   edi
c000ee4b:	56                   	push   esi
c000ee4c:	53                   	push   ebx
c000ee4d:	e8 c8 fe ff ff       	call   c000ed1a <GDT::addEntry(GDTEntry)>
c000ee52:	83 c4 0c             	add    esp,0xc
c000ee55:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000ee59:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000ee5d:	53                   	push   ebx
c000ee5e:	e8 b7 fe ff ff       	call   c000ed1a <GDT::addEntry(GDTEntry)>
c000ee63:	83 c4 0c             	add    esp,0xc
c000ee66:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ee6a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ee6e:	53                   	push   ebx
c000ee6f:	e8 a6 fe ff ff       	call   c000ed1a <GDT::addEntry(GDTEntry)>
c000ee74:	83 c4 0c             	add    esp,0xc
c000ee77:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ee7b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ee7f:	53                   	push   ebx
c000ee80:	e8 95 fe ff ff       	call   c000ed1a <GDT::addEntry(GDTEntry)>
c000ee85:	83 c4 0c             	add    esp,0xc
c000ee88:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000ee8c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000ee90:	53                   	push   ebx
c000ee91:	e8 84 fe ff ff       	call   c000ed1a <GDT::addEntry(GDTEntry)>
c000ee96:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ee99:	e8 a6 fe ff ff       	call   c000ed44 <GDT::flush()>
c000ee9e:	83 c4 40             	add    esp,0x40
c000eea1:	5b                   	pop    ebx
c000eea2:	5e                   	pop    esi
c000eea3:	5f                   	pop    edi
c000eea4:	c3                   	ret    

c000eea5 <idleFunction(void*)>:
c000eea5:	83 ec 0c             	sub    esp,0xc
c000eea8:	f0 ff 0d 50 fa 02 c0 	lock dec DWORD PTR ds:0xc002fa50
c000eeaf:	83 3d 50 fa 02 c0 00 	cmp    DWORD PTR ds:0xc002fa50,0x0
c000eeb6:	75 01                	jne    c000eeb9 <idleFunction(void*)+0x14>
c000eeb8:	fb                   	sti    
c000eeb9:	e8 f9 b5 00 00       	call   c001a4b7 <HalSystemIdle()>
c000eebe:	e8 13 34 01 00       	call   c00222d6 <idleCommon()>
c000eec3:	eb f4                	jmp    c000eeb9 <idleFunction(void*)+0x14>
c000eec5:	66 90                	xchg   ax,ax
c000eec7:	90                   	nop

c000eec8 <IDTEntry::IDTEntry(bool)>:
c000eec8:	53                   	push   ebx
c000eec9:	83 ec 04             	sub    esp,0x4
c000eecc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eed0:	88 04 24             	mov    BYTE PTR [esp],al
c000eed3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eed7:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000eedd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eee1:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000eee5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eee9:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000eeec:	83 e2 f0             	and    edx,0xfffffff0
c000eeef:	83 ca 0e             	or     edx,0xe
c000eef2:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000eef5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eef9:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000eefc:	83 e2 ef             	and    edx,0xffffffef
c000eeff:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ef02:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c000ef06:	85 c0                	test   eax,eax
c000ef08:	74 06                	je     c000ef10 <IDTEntry::IDTEntry(bool)+0x48>
c000ef0a:	b2 03                	mov    dl,0x3
c000ef0c:	eb 06                	jmp    c000ef14 <IDTEntry::IDTEntry(bool)+0x4c>
c000ef0e:	66 90                	xchg   ax,ax
c000ef10:	b2 00                	mov    dl,0x0
c000ef12:	66 90                	xchg   ax,ax
c000ef14:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ef18:	83 e2 03             	and    edx,0x3
c000ef1b:	89 d3                	mov    ebx,edx
c000ef1d:	c1 e3 05             	shl    ebx,0x5
c000ef20:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000ef23:	83 e2 9f             	and    edx,0xffffff9f
c000ef26:	88 d1                	mov    cl,dl
c000ef28:	88 da                	mov    dl,bl
c000ef2a:	09 ca                	or     edx,ecx
c000ef2c:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ef2f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ef33:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000ef36:	83 ca 80             	or     edx,0xffffff80
c000ef39:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ef3c:	90                   	nop
c000ef3d:	83 c4 04             	add    esp,0x4
c000ef40:	5b                   	pop    ebx
c000ef41:	c3                   	ret    

c000ef42 <IDTEntry::setOffset(unsigned int)>:
c000ef42:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ef46:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ef4a:	66 89 02             	mov    WORD PTR [edx],ax
c000ef4d:	c1 e8 10             	shr    eax,0x10
c000ef50:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000ef54:	c3                   	ret    
c000ef55:	90                   	nop
c000ef56:	66 90                	xchg   ax,ax

c000ef58 <IDT::IDT()>:
c000ef58:	90                   	nop
c000ef59:	c3                   	ret    

c000ef5a <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000ef5a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ef5e:	83 c0 30             	add    eax,0x30
c000ef61:	c3                   	ret    

c000ef62 <IDT::addEntry(IDTEntry, int)>:
c000ef62:	53                   	push   ebx
c000ef63:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ef67:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ef6b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ef6f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ef73:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000ef76:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000ef7a:	5b                   	pop    ebx
c000ef7b:	c3                   	ret    

c000ef7c <IDT::addEntry(int, void (*)(), bool)>:
c000ef7c:	53                   	push   ebx
c000ef7d:	83 ec 10             	sub    esp,0x10
c000ef80:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000ef85:	50                   	push   eax
c000ef86:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000ef8a:	53                   	push   ebx
c000ef8b:	e8 38 ff ff ff       	call   c000eec8 <IDTEntry::IDTEntry(bool)>
c000ef90:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ef94:	53                   	push   ebx
c000ef95:	e8 a8 ff ff ff       	call   c000ef42 <IDTEntry::setOffset(unsigned int)>
c000ef9a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ef9e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000efa2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000efa6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000efaa:	e8 b3 ff ff ff       	call   c000ef62 <IDT::addEntry(IDTEntry, int)>
c000efaf:	83 c4 30             	add    esp,0x30
c000efb2:	5b                   	pop    ebx
c000efb3:	c3                   	ret    

c000efb4 <IDT::flush()>:
c000efb4:	66 c7 05 08 f1 02 c0 ff 07 	mov    WORD PTR ds:0xc002f108,0x7ff
c000efbd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000efc1:	a3 0a f1 02 c0       	mov    ds:0xc002f10a,eax
c000efc6:	0f 01 1d 08 f1 02 c0 	lidtd  ds:0xc002f108
c000efcd:	c3                   	ret    

c000efce <IDT::setup()>:
c000efce:	57                   	push   edi
c000efcf:	56                   	push   esi
c000efd0:	53                   	push   ebx
c000efd1:	83 ec 10             	sub    esp,0x10
c000efd4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000efd8:	6a 00                	push   0x0
c000efda:	68 b0 15 02 c0       	push   0xc00215b0
c000efdf:	6a 00                	push   0x0
c000efe1:	53                   	push   ebx
c000efe2:	e8 95 ff ff ff       	call   c000ef7c <IDT::addEntry(int, void (*)(), bool)>
c000efe7:	6a 00                	push   0x0
c000efe9:	68 c0 15 02 c0       	push   0xc00215c0
c000efee:	6a 01                	push   0x1
c000eff0:	53                   	push   ebx
c000eff1:	e8 86 ff ff ff       	call   c000ef7c <IDT::addEntry(int, void (*)(), bool)>
c000eff6:	83 c4 20             	add    esp,0x20
c000eff9:	6a 00                	push   0x0
c000effb:	68 ca 15 02 c0       	push   0xc00215ca
c000f000:	6a 02                	push   0x2
c000f002:	53                   	push   ebx
c000f003:	e8 74 ff ff ff       	call   c000ef7c <IDT::addEntry(int, void (*)(), bool)>
c000f008:	6a 00                	push   0x0
c000f00a:	68 d4 15 02 c0       	push   0xc00215d4
c000f00f:	6a 03                	push   0x3
c000f011:	53                   	push   ebx
c000f012:	e8 65 ff ff ff       	call   c000ef7c <IDT::addEntry(int, void (*)(), bool)>
c000f017:	83 c4 20             	add    esp,0x20
c000f01a:	6a 00                	push   0x0
c000f01c:	68 de 15 02 c0       	push   0xc00215de
c000f021:	6a 04                	push   0x4
c000f023:	53                   	push   ebx
c000f024:	e8 53 ff ff ff       	call   c000ef7c <IDT::addEntry(int, void (*)(), bool)>
c000f029:	6a 00                	push   0x0
c000f02b:	68 e8 15 02 c0       	push   0xc00215e8
c000f030:	6a 05                	push   0x5
c000f032:	53                   	push   ebx
c000f033:	e8 44 ff ff ff       	call   c000ef7c <IDT::addEntry(int, void (*)(), bool)>
c000f038:	83 c4 20             	add    esp,0x20
c000f03b:	6a 00                	push   0x0
c000f03d:	68 f2 15 02 c0       	push   0xc00215f2
c000f042:	6a 06                	push   0x6
c000f044:	53                   	push   ebx
c000f045:	e8 32 ff ff ff       	call   c000ef7c <IDT::addEntry(int, void (*)(), bool)>
c000f04a:	6a 00                	push   0x0
c000f04c:	68 fc 15 02 c0       	push   0xc00215fc
c000f051:	6a 07                	push   0x7
c000f053:	53                   	push   ebx
c000f054:	e8 23 ff ff ff       	call   c000ef7c <IDT::addEntry(int, void (*)(), bool)>
c000f059:	83 c4 20             	add    esp,0x20
c000f05c:	6a 00                	push   0x0
c000f05e:	68 06 16 02 c0       	push   0xc0021606
c000f063:	6a 08                	push   0x8
c000f065:	53                   	push   ebx
c000f066:	e8 11 ff ff ff       	call   c000ef7c <IDT::addEntry(int, void (*)(), bool)>
c000f06b:	6a 00                	push   0x0
c000f06d:	68 0e 16 02 c0       	push   0xc002160e
c000f072:	6a 09                	push   0x9
c000f074:	53                   	push   ebx
c000f075:	e8 02 ff ff ff       	call   c000ef7c <IDT::addEntry(int, void (*)(), bool)>
c000f07a:	83 c4 20             	add    esp,0x20
c000f07d:	6a 00                	push   0x0
c000f07f:	68 18 16 02 c0       	push   0xc0021618
c000f084:	6a 0a                	push   0xa
c000f086:	53                   	push   ebx
c000f087:	e8 f0 fe ff ff       	call   c000ef7c <IDT::addEntry(int, void (*)(), bool)>
c000f08c:	6a 00                	push   0x0
c000f08e:	68 20 16 02 c0       	push   0xc0021620
c000f093:	6a 0b                	push   0xb
c000f095:	53                   	push   ebx
c000f096:	e8 e1 fe ff ff       	call   c000ef7c <IDT::addEntry(int, void (*)(), bool)>
c000f09b:	83 c4 20             	add    esp,0x20
c000f09e:	6a 00                	push   0x0
c000f0a0:	68 28 16 02 c0       	push   0xc0021628
c000f0a5:	6a 0c                	push   0xc
c000f0a7:	53                   	push   ebx
c000f0a8:	e8 cf fe ff ff       	call   c000ef7c <IDT::addEntry(int, void (*)(), bool)>
c000f0ad:	6a 00                	push   0x0
c000f0af:	68 30 16 02 c0       	push   0xc0021630
c000f0b4:	6a 0d                	push   0xd
c000f0b6:	53                   	push   ebx
c000f0b7:	e8 c0 fe ff ff       	call   c000ef7c <IDT::addEntry(int, void (*)(), bool)>
c000f0bc:	83 c4 20             	add    esp,0x20
c000f0bf:	6a 00                	push   0x0
c000f0c1:	68 4a 16 02 c0       	push   0xc002164a
c000f0c6:	6a 0e                	push   0xe
c000f0c8:	53                   	push   ebx
c000f0c9:	e8 ae fe ff ff       	call   c000ef7c <IDT::addEntry(int, void (*)(), bool)>
c000f0ce:	6a 00                	push   0x0
c000f0d0:	68 52 16 02 c0       	push   0xc0021652
c000f0d5:	6a 0f                	push   0xf
c000f0d7:	53                   	push   ebx
c000f0d8:	e8 9f fe ff ff       	call   c000ef7c <IDT::addEntry(int, void (*)(), bool)>
c000f0dd:	83 c4 20             	add    esp,0x20
c000f0e0:	6a 00                	push   0x0
c000f0e2:	68 5c 16 02 c0       	push   0xc002165c
c000f0e7:	6a 10                	push   0x10
c000f0e9:	53                   	push   ebx
c000f0ea:	e8 8d fe ff ff       	call   c000ef7c <IDT::addEntry(int, void (*)(), bool)>
c000f0ef:	6a 00                	push   0x0
c000f0f1:	68 66 16 02 c0       	push   0xc0021666
c000f0f6:	6a 11                	push   0x11
c000f0f8:	53                   	push   ebx
c000f0f9:	e8 7e fe ff ff       	call   c000ef7c <IDT::addEntry(int, void (*)(), bool)>
c000f0fe:	83 c4 20             	add    esp,0x20
c000f101:	6a 00                	push   0x0
c000f103:	68 70 16 02 c0       	push   0xc0021670
c000f108:	6a 12                	push   0x12
c000f10a:	53                   	push   ebx
c000f10b:	e8 6c fe ff ff       	call   c000ef7c <IDT::addEntry(int, void (*)(), bool)>
c000f110:	6a 01                	push   0x1
c000f112:	68 0a 17 02 c0       	push   0xc002170a
c000f117:	6a 60                	push   0x60
c000f119:	53                   	push   ebx
c000f11a:	e8 5d fe ff ff       	call   c000ef7c <IDT::addEntry(int, void (*)(), bool)>
c000f11f:	83 c4 20             	add    esp,0x20
c000f122:	6a 00                	push   0x0
c000f124:	68 11 17 02 c0       	push   0xc0021711
c000f129:	6a 20                	push   0x20
c000f12b:	53                   	push   ebx
c000f12c:	e8 4b fe ff ff       	call   c000ef7c <IDT::addEntry(int, void (*)(), bool)>
c000f131:	6a 00                	push   0x0
c000f133:	68 fc 16 02 c0       	push   0xc00216fc
c000f138:	6a 21                	push   0x21
c000f13a:	53                   	push   ebx
c000f13b:	e8 3c fe ff ff       	call   c000ef7c <IDT::addEntry(int, void (*)(), bool)>
c000f140:	83 c4 20             	add    esp,0x20
c000f143:	6a 00                	push   0x0
c000f145:	68 03 17 02 c0       	push   0xc0021703
c000f14a:	6a 22                	push   0x22
c000f14c:	53                   	push   ebx
c000f14d:	e8 2a fe ff ff       	call   c000ef7c <IDT::addEntry(int, void (*)(), bool)>
c000f152:	6a 00                	push   0x0
c000f154:	68 7a 16 02 c0       	push   0xc002167a
c000f159:	6a 23                	push   0x23
c000f15b:	53                   	push   ebx
c000f15c:	e8 1b fe ff ff       	call   c000ef7c <IDT::addEntry(int, void (*)(), bool)>
c000f161:	83 c4 20             	add    esp,0x20
c000f164:	6a 00                	push   0x0
c000f166:	68 84 16 02 c0       	push   0xc0021684
c000f16b:	6a 24                	push   0x24
c000f16d:	53                   	push   ebx
c000f16e:	e8 09 fe ff ff       	call   c000ef7c <IDT::addEntry(int, void (*)(), bool)>
c000f173:	6a 00                	push   0x0
c000f175:	68 8e 16 02 c0       	push   0xc002168e
c000f17a:	6a 25                	push   0x25
c000f17c:	53                   	push   ebx
c000f17d:	e8 fa fd ff ff       	call   c000ef7c <IDT::addEntry(int, void (*)(), bool)>
c000f182:	83 c4 20             	add    esp,0x20
c000f185:	6a 00                	push   0x0
c000f187:	68 98 16 02 c0       	push   0xc0021698
c000f18c:	6a 26                	push   0x26
c000f18e:	53                   	push   ebx
c000f18f:	e8 e8 fd ff ff       	call   c000ef7c <IDT::addEntry(int, void (*)(), bool)>
c000f194:	6a 00                	push   0x0
c000f196:	68 a2 16 02 c0       	push   0xc00216a2
c000f19b:	6a 27                	push   0x27
c000f19d:	53                   	push   ebx
c000f19e:	e8 d9 fd ff ff       	call   c000ef7c <IDT::addEntry(int, void (*)(), bool)>
c000f1a3:	83 c4 20             	add    esp,0x20
c000f1a6:	6a 00                	push   0x0
c000f1a8:	68 ac 16 02 c0       	push   0xc00216ac
c000f1ad:	6a 28                	push   0x28
c000f1af:	53                   	push   ebx
c000f1b0:	e8 c7 fd ff ff       	call   c000ef7c <IDT::addEntry(int, void (*)(), bool)>
c000f1b5:	6a 00                	push   0x0
c000f1b7:	68 b6 16 02 c0       	push   0xc00216b6
c000f1bc:	6a 29                	push   0x29
c000f1be:	53                   	push   ebx
c000f1bf:	e8 b8 fd ff ff       	call   c000ef7c <IDT::addEntry(int, void (*)(), bool)>
c000f1c4:	83 c4 20             	add    esp,0x20
c000f1c7:	6a 00                	push   0x0
c000f1c9:	68 c0 16 02 c0       	push   0xc00216c0
c000f1ce:	6a 2a                	push   0x2a
c000f1d0:	53                   	push   ebx
c000f1d1:	e8 a6 fd ff ff       	call   c000ef7c <IDT::addEntry(int, void (*)(), bool)>
c000f1d6:	6a 00                	push   0x0
c000f1d8:	68 ca 16 02 c0       	push   0xc00216ca
c000f1dd:	6a 2b                	push   0x2b
c000f1df:	53                   	push   ebx
c000f1e0:	e8 97 fd ff ff       	call   c000ef7c <IDT::addEntry(int, void (*)(), bool)>
c000f1e5:	83 c4 20             	add    esp,0x20
c000f1e8:	6a 00                	push   0x0
c000f1ea:	68 d4 16 02 c0       	push   0xc00216d4
c000f1ef:	6a 2c                	push   0x2c
c000f1f1:	53                   	push   ebx
c000f1f2:	e8 85 fd ff ff       	call   c000ef7c <IDT::addEntry(int, void (*)(), bool)>
c000f1f7:	6a 00                	push   0x0
c000f1f9:	68 de 16 02 c0       	push   0xc00216de
c000f1fe:	6a 2d                	push   0x2d
c000f200:	53                   	push   ebx
c000f201:	e8 76 fd ff ff       	call   c000ef7c <IDT::addEntry(int, void (*)(), bool)>
c000f206:	83 c4 20             	add    esp,0x20
c000f209:	6a 00                	push   0x0
c000f20b:	68 e8 16 02 c0       	push   0xc00216e8
c000f210:	6a 2e                	push   0x2e
c000f212:	53                   	push   ebx
c000f213:	e8 64 fd ff ff       	call   c000ef7c <IDT::addEntry(int, void (*)(), bool)>
c000f218:	6a 00                	push   0x0
c000f21a:	68 f2 16 02 c0       	push   0xc00216f2
c000f21f:	6a 2f                	push   0x2f
c000f221:	53                   	push   ebx
c000f222:	e8 55 fd ff ff       	call   c000ef7c <IDT::addEntry(int, void (*)(), bool)>
c000f227:	83 c4 20             	add    esp,0x20
c000f22a:	6a 00                	push   0x0
c000f22c:	68 14 18 02 c0       	push   0xc0021814
c000f231:	6a 30                	push   0x30
c000f233:	53                   	push   ebx
c000f234:	e8 43 fd ff ff       	call   c000ef7c <IDT::addEntry(int, void (*)(), bool)>
c000f239:	6a 00                	push   0x0
c000f23b:	68 1e 18 02 c0       	push   0xc002181e
c000f240:	6a 31                	push   0x31
c000f242:	53                   	push   ebx
c000f243:	e8 34 fd ff ff       	call   c000ef7c <IDT::addEntry(int, void (*)(), bool)>
c000f248:	83 c4 20             	add    esp,0x20
c000f24b:	6a 00                	push   0x0
c000f24d:	68 28 18 02 c0       	push   0xc0021828
c000f252:	6a 32                	push   0x32
c000f254:	53                   	push   ebx
c000f255:	e8 22 fd ff ff       	call   c000ef7c <IDT::addEntry(int, void (*)(), bool)>
c000f25a:	6a 00                	push   0x0
c000f25c:	68 32 18 02 c0       	push   0xc0021832
c000f261:	6a 33                	push   0x33
c000f263:	53                   	push   ebx
c000f264:	e8 13 fd ff ff       	call   c000ef7c <IDT::addEntry(int, void (*)(), bool)>
c000f269:	83 c4 20             	add    esp,0x20
c000f26c:	6a 00                	push   0x0
c000f26e:	68 3c 18 02 c0       	push   0xc002183c
c000f273:	6a 34                	push   0x34
c000f275:	53                   	push   ebx
c000f276:	e8 01 fd ff ff       	call   c000ef7c <IDT::addEntry(int, void (*)(), bool)>
c000f27b:	6a 00                	push   0x0
c000f27d:	68 46 18 02 c0       	push   0xc0021846
c000f282:	6a 35                	push   0x35
c000f284:	53                   	push   ebx
c000f285:	e8 f2 fc ff ff       	call   c000ef7c <IDT::addEntry(int, void (*)(), bool)>
c000f28a:	83 c4 20             	add    esp,0x20
c000f28d:	6a 00                	push   0x0
c000f28f:	68 50 18 02 c0       	push   0xc0021850
c000f294:	6a 36                	push   0x36
c000f296:	53                   	push   ebx
c000f297:	e8 e0 fc ff ff       	call   c000ef7c <IDT::addEntry(int, void (*)(), bool)>
c000f29c:	6a 00                	push   0x0
c000f29e:	68 5a 18 02 c0       	push   0xc002185a
c000f2a3:	6a 37                	push   0x37
c000f2a5:	53                   	push   ebx
c000f2a6:	e8 d1 fc ff ff       	call   c000ef7c <IDT::addEntry(int, void (*)(), bool)>
c000f2ab:	83 c4 1c             	add    esp,0x1c
c000f2ae:	6a 03                	push   0x3
c000f2b0:	6a 02                	push   0x2
c000f2b2:	ff 35 70 f2 02 c0    	push   DWORD PTR ds:0xc002f270
c000f2b8:	e8 65 48 00 00       	call   c0013b22 <VAS::allocatePages(int, int)>
c000f2bd:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f2c4:	89 c6                	mov    esi,eax
c000f2c6:	e8 b1 08 00 00       	call   c000fb7c <malloc>
c000f2cb:	81 c6 00 20 00 00    	add    esi,0x2000
c000f2d1:	89 04 24             	mov    DWORD PTR [esp],eax
c000f2d4:	89 c7                	mov    edi,eax
c000f2d6:	e8 09 39 00 00       	call   c0012be4 <TSS::TSS()>
c000f2db:	83 c4 0c             	add    esp,0xc
c000f2de:	68 06 16 02 c0       	push   0xc0021606
c000f2e3:	56                   	push   esi
c000f2e4:	57                   	push   edi
c000f2e5:	e8 3e 39 00 00       	call   c0012c28 <TSS::setup(unsigned long, unsigned long)>
c000f2ea:	89 c6                	mov    esi,eax
c000f2ec:	58                   	pop    eax
c000f2ed:	5a                   	pop    edx
c000f2ee:	6a 00                	push   0x0
c000f2f0:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f2f4:	50                   	push   eax
c000f2f5:	e8 ce fb ff ff       	call   c000eec8 <IDTEntry::IDTEntry(bool)>
c000f2fa:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f2fe:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f303:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f30a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f30e:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f314:	80 ce 05             	or     dh,0x5
c000f317:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f31b:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f31e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f322:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f325:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f328:	e8 87 fc ff ff       	call   c000efb4 <IDT::flush()>
c000f32d:	83 c4 20             	add    esp,0x20
c000f330:	5b                   	pop    ebx
c000f331:	5e                   	pop    esi
c000f332:	5f                   	pop    edi
c000f333:	c3                   	ret    

c000f334 <CPU::current()>:
c000f334:	a1 d4 d0 02 c0       	mov    eax,ds:0xc002d0d4
c000f339:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000f33f:	c3                   	ret    

c000f340 <operator new(unsigned long)>:
c000f340:	e9 37 08 00 00       	jmp    c000fb7c <malloc>

c000f345 <operator delete(void*)>:
c000f345:	e9 52 08 00 00       	jmp    c000fb9c <rfree>

c000f34a <disableIRQs()>:
c000f34a:	fa                   	cli    
c000f34b:	c3                   	ret    

c000f34c <enableIRQs()>:
c000f34c:	fb                   	sti    
c000f34d:	c3                   	ret    

c000f34e <lockScheduler()>:
c000f34e:	fa                   	cli    
c000f34f:	ff 05 50 fa 02 c0    	inc    DWORD PTR ds:0xc002fa50
c000f355:	c3                   	ret    

c000f356 <unlockScheduler()>:
c000f356:	f0 ff 0d 50 fa 02 c0 	lock dec DWORD PTR ds:0xc002fa50
c000f35d:	83 3d 50 fa 02 c0 00 	cmp    DWORD PTR ds:0xc002fa50,0x0
c000f364:	75 01                	jne    c000f367 <unlockScheduler()+0x11>
c000f366:	fb                   	sti    
c000f367:	c3                   	ret    

c000f368 <lockStuff()>:
c000f368:	fa                   	cli    
c000f369:	ff 05 50 fa 02 c0    	inc    DWORD PTR ds:0xc002fa50
c000f36f:	ff 05 4c fa 02 c0    	inc    DWORD PTR ds:0xc002fa4c
c000f375:	c3                   	ret    

c000f376 <unlockStuff()>:
c000f376:	83 ec 0c             	sub    esp,0xc
c000f379:	a1 4c fa 02 c0       	mov    eax,ds:0xc002fa4c
c000f37e:	48                   	dec    eax
c000f37f:	a3 4c fa 02 c0       	mov    ds:0xc002fa4c,eax
c000f384:	75 18                	jne    c000f39e <unlockStuff()+0x28>
c000f386:	83 3d 48 fa 02 c0 00 	cmp    DWORD PTR ds:0xc002fa48,0x0
c000f38d:	74 0f                	je     c000f39e <unlockStuff()+0x28>
c000f38f:	c7 05 48 fa 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fa48,0x0
c000f399:	e8 2e 7d 00 00       	call   c00170cc <schedule()>
c000f39e:	f0 ff 0d 50 fa 02 c0 	lock dec DWORD PTR ds:0xc002fa50
c000f3a5:	83 3d 50 fa 02 c0 00 	cmp    DWORD PTR ds:0xc002fa50,0x0
c000f3ac:	75 01                	jne    c000f3af <unlockStuff()+0x39>
c000f3ae:	fb                   	sti    
c000f3af:	83 c4 0c             	add    esp,0xc
c000f3b2:	c3                   	ret    

c000f3b3 <Virt::getAKernelVAS()>:
c000f3b3:	a1 70 f2 02 c0       	mov    eax,ds:0xc002f270
c000f3b8:	c3                   	ret    

c000f3b9 <__not_memcpy>:
c000f3b9:	57                   	push   edi
c000f3ba:	56                   	push   esi
c000f3bb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f3bf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000f3c3:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000f3c7:	89 c7                	mov    edi,eax
c000f3c9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f3cb:	5e                   	pop    esi
c000f3cc:	5f                   	pop    edi
c000f3cd:	c3                   	ret    

c000f3ce <KeFormatDate(char*, int, int, int, int, bool)>:
c000f3ce:	55                   	push   ebp
c000f3cf:	57                   	push   edi
c000f3d0:	56                   	push   esi
c000f3d1:	be e8 03 00 00       	mov    esi,0x3e8
c000f3d6:	53                   	push   ebx
c000f3d7:	bb 0a 00 00 00       	mov    ebx,0xa
c000f3dc:	81 ec ac 00 00 00    	sub    esp,0xac
c000f3e2:	c6 44 24 20 00       	mov    BYTE PTR [esp+0x20],0x0
c000f3e7:	8b 8c 24 d0 00 00 00 	mov    ecx,DWORD PTR [esp+0xd0]
c000f3ee:	89 c8                	mov    eax,ecx
c000f3f0:	99                   	cdq    
c000f3f1:	f7 fb                	idiv   ebx
c000f3f3:	89 d5                	mov    ebp,edx
c000f3f5:	99                   	cdq    
c000f3f6:	f7 fb                	idiv   ebx
c000f3f8:	8d 42 30             	lea    eax,[edx+0x30]
c000f3fb:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000f3ff:	8d 45 30             	lea    eax,[ebp+0x30]
c000f402:	0f b6 ac 24 d4 00 00 00 	movzx  ebp,BYTE PTR [esp+0xd4]
c000f40a:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c000f40e:	89 c8                	mov    eax,ecx
c000f410:	99                   	cdq    
c000f411:	f7 fe                	idiv   esi
c000f413:	be 64 00 00 00       	mov    esi,0x64
c000f418:	99                   	cdq    
c000f419:	f7 fb                	idiv   ebx
c000f41b:	8d 42 30             	lea    eax,[edx+0x30]
c000f41e:	88 44 24 06          	mov    BYTE PTR [esp+0x6],al
c000f422:	89 c8                	mov    eax,ecx
c000f424:	99                   	cdq    
c000f425:	f7 fe                	idiv   esi
c000f427:	99                   	cdq    
c000f428:	f7 fb                	idiv   ebx
c000f42a:	31 db                	xor    ebx,ebx
c000f42c:	8d 42 30             	lea    eax,[edx+0x30]
c000f42f:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000f433:	0f be 8b 24 f1 02 c0 	movsx  ecx,BYTE PTR [ebx-0x3ffd0edc]
c000f43a:	83 f9 59             	cmp    ecx,0x59
c000f43d:	0f 84 1f 01 00 00    	je     c000f562 <KeFormatDate(char*, int, int, int, int, bool)+0x194>
c000f443:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000f447:	8b 94 24 c8 00 00 00 	mov    edx,DWORD PTR [esp+0xc8]
c000f44e:	83 f9 4d             	cmp    ecx,0x4d
c000f451:	0f 44 94 24 cc 00 00 00 	cmove  edx,DWORD PTR [esp+0xcc]
c000f459:	57                   	push   edi
c000f45a:	57                   	push   edi
c000f45b:	89 d7                	mov    edi,edx
c000f45d:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000f461:	c1 ff 1f             	sar    edi,0x1f
c000f464:	57                   	push   edi
c000f465:	52                   	push   edx
c000f466:	e8 6d 04 00 00       	call   c000f8d8 <KeGetDigitsInNumber(long long)>
c000f46b:	83 c4 10             	add    esp,0x10
c000f46e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f472:	48                   	dec    eax
c000f473:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f477:	75 1c                	jne    c000f495 <KeFormatDate(char*, int, int, int, int, bool)+0xc7>
c000f479:	83 f9 44             	cmp    ecx,0x44
c000f47c:	75 09                	jne    c000f487 <KeFormatDate(char*, int, int, int, int, bool)+0xb9>
c000f47e:	80 3d 40 f1 02 c0 00 	cmp    BYTE PTR ds:0xc002f140,0x0
c000f485:	eb 0c                	jmp    c000f493 <KeFormatDate(char*, int, int, int, int, bool)+0xc5>
c000f487:	83 f9 4d             	cmp    ecx,0x4d
c000f48a:	75 60                	jne    c000f4ec <KeFormatDate(char*, int, int, int, int, bool)+0x11e>
c000f48c:	80 3d 41 f1 02 c0 00 	cmp    BYTE PTR ds:0xc002f141,0x0
c000f493:	74 57                	je     c000f4ec <KeFormatDate(char*, int, int, int, int, bool)+0x11e>
c000f495:	89 d0                	mov    eax,edx
c000f497:	b9 0a 00 00 00       	mov    ecx,0xa
c000f49c:	99                   	cdq    
c000f49d:	f7 f9                	idiv   ecx
c000f49f:	89 d6                	mov    esi,edx
c000f4a1:	99                   	cdq    
c000f4a2:	f7 f9                	idiv   ecx
c000f4a4:	83 c2 30             	add    edx,0x30
c000f4a7:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c000f4ab:	8d 56 30             	lea    edx,[esi+0x30]
c000f4ae:	88 54 24 1c          	mov    BYTE PTR [esp+0x1c],dl
c000f4b2:	c6 44 24 1d 00       	mov    BYTE PTR [esp+0x1d],0x0
c000f4b7:	56                   	push   esi
c000f4b8:	56                   	push   esi
c000f4b9:	8d 7c 24 23          	lea    edi,[esp+0x23]
c000f4bd:	57                   	push   edi
c000f4be:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c000f4c2:	56                   	push   esi
c000f4c3:	e8 a8 13 ff ff       	call   c0000870 <strcat>
c000f4c8:	83 c4 10             	add    esp,0x10
c000f4cb:	83 fb 02             	cmp    ebx,0x2
c000f4ce:	74 34                	je     c000f504 <KeFormatDate(char*, int, int, int, int, bool)+0x136>
c000f4d0:	c6 44 24 1c 00       	mov    BYTE PTR [esp+0x1c],0x0
c000f4d5:	a0 28 f1 02 c0       	mov    al,ds:0xc002f128
c000f4da:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c000f4de:	51                   	push   ecx
c000f4df:	51                   	push   ecx
c000f4e0:	57                   	push   edi
c000f4e1:	56                   	push   esi
c000f4e2:	e8 89 13 ff ff       	call   c0000870 <strcat>
c000f4e7:	83 c4 10             	add    esp,0x10
c000f4ea:	eb 18                	jmp    c000f504 <KeFormatDate(char*, int, int, int, int, bool)+0x136>
c000f4ec:	c6 44 24 1c 00       	mov    BYTE PTR [esp+0x1c],0x0
c000f4f1:	89 d0                	mov    eax,edx
c000f4f3:	b9 0a 00 00 00       	mov    ecx,0xa
c000f4f8:	99                   	cdq    
c000f4f9:	f7 f9                	idiv   ecx
c000f4fb:	83 c2 30             	add    edx,0x30
c000f4fe:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c000f502:	eb b3                	jmp    c000f4b7 <KeFormatDate(char*, int, int, int, int, bool)+0xe9>
c000f504:	43                   	inc    ebx
c000f505:	83 fb 03             	cmp    ebx,0x3
c000f508:	0f 85 25 ff ff ff    	jne    c000f433 <KeFormatDate(char*, int, int, int, int, bool)+0x65>
c000f50e:	52                   	push   edx
c000f50f:	ff b4 24 c8 00 00 00 	push   DWORD PTR [esp+0xc8]
c000f516:	6a 00                	push   0x0
c000f518:	ff b4 24 cc 00 00 00 	push   DWORD PTR [esp+0xcc]
c000f51f:	e8 cc 0f ff ff       	call   c00004f0 <memset>
c000f524:	89 34 24             	mov    DWORD PTR [esp],esi
c000f527:	e8 54 10 ff ff       	call   c0000580 <strlen>
c000f52c:	83 c4 10             	add    esp,0x10
c000f52f:	40                   	inc    eax
c000f530:	39 84 24 c4 00 00 00 	cmp    DWORD PTR [esp+0xc4],eax
c000f537:	72 14                	jb     c000f54d <KeFormatDate(char*, int, int, int, int, bool)+0x17f>
c000f539:	50                   	push   eax
c000f53a:	50                   	push   eax
c000f53b:	56                   	push   esi
c000f53c:	ff b4 24 cc 00 00 00 	push   DWORD PTR [esp+0xcc]
c000f543:	e8 08 11 ff ff       	call   c0000650 <strcpy>
c000f548:	83 c4 10             	add    esp,0x10
c000f54b:	eb 58                	jmp    c000f5a5 <KeFormatDate(char*, int, int, int, int, bool)+0x1d7>
c000f54d:	8b 84 24 c4 00 00 00 	mov    eax,DWORD PTR [esp+0xc4]
c000f554:	8b bc 24 c0 00 00 00 	mov    edi,DWORD PTR [esp+0xc0]
c000f55b:	8d 48 ff             	lea    ecx,[eax-0x1]
c000f55e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f560:	eb 43                	jmp    c000f5a5 <KeFormatDate(char*, int, int, int, int, bool)+0x1d7>
c000f562:	85 ed                	test   ebp,ebp
c000f564:	74 2a                	je     c000f590 <KeFormatDate(char*, int, int, int, int, bool)+0x1c2>
c000f566:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000f56b:	8a 44 24 06          	mov    al,BYTE PTR [esp+0x6]
c000f56f:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c000f573:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000f577:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c000f57b:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000f57f:	88 44 24 1d          	mov    BYTE PTR [esp+0x1d],al
c000f583:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c000f587:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c000f58b:	e9 27 ff ff ff       	jmp    c000f4b7 <KeFormatDate(char*, int, int, int, int, bool)+0xe9>
c000f590:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000f594:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c000f598:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c000f59c:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c000f5a0:	e9 0d ff ff ff       	jmp    c000f4b2 <KeFormatDate(char*, int, int, int, int, bool)+0xe4>
c000f5a5:	81 c4 ac 00 00 00    	add    esp,0xac
c000f5ab:	5b                   	pop    ebx
c000f5ac:	5e                   	pop    esi
c000f5ad:	5f                   	pop    edi
c000f5ae:	5d                   	pop    ebp
c000f5af:	c3                   	ret    

c000f5b0 <KeFormatShortDate(char*, int, int, int, int)>:
c000f5b0:	83 ec 14             	sub    esp,0x14
c000f5b3:	6a 00                	push   0x0
c000f5b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f5b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f5bd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f5c1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f5c5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f5c9:	e8 00 fe ff ff       	call   c000f3ce <KeFormatDate(char*, int, int, int, int, bool)>
c000f5ce:	83 c4 2c             	add    esp,0x2c
c000f5d1:	c3                   	ret    

c000f5d2 <KeFormatLongDate(char*, int, int, int, int)>:
c000f5d2:	83 ec 14             	sub    esp,0x14
c000f5d5:	6a 01                	push   0x1
c000f5d7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f5db:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f5df:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f5e3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f5e7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f5eb:	e8 de fd ff ff       	call   c000f3ce <KeFormatDate(char*, int, int, int, int, bool)>
c000f5f0:	83 c4 2c             	add    esp,0x2c
c000f5f3:	c3                   	ret    

c000f5f4 <KeSetLocale(klocale_t)>:
c000f5f4:	57                   	push   edi
c000f5f5:	b9 09 00 00 00       	mov    ecx,0x9
c000f5fa:	56                   	push   esi
c000f5fb:	bf 20 f1 02 c0       	mov    edi,0xc002f120
c000f600:	fc                   	cld    
c000f601:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000f605:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000f607:	5e                   	pop    esi
c000f608:	5f                   	pop    edi
c000f609:	c3                   	ret    

c000f60a <KeInitialiseLocale()>:
c000f60a:	57                   	push   edi
c000f60b:	56                   	push   esi
c000f60c:	83 ec 3c             	sub    esp,0x3c
c000f60f:	c7 44 24 14 24 00 00 00 	mov    DWORD PTR [esp+0x14],0x24
c000f617:	c7 44 24 1c 2f 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2f
c000f61f:	c7 44 24 20 2e 00 00 00 	mov    DWORD PTR [esp+0x20],0x2e
c000f627:	c7 44 24 24 2c 00 00 00 	mov    DWORD PTR [esp+0x24],0x2c
c000f62f:	66 c7 44 24 28 02 03 	mov    WORD PTR [esp+0x28],0x302
c000f636:	c7 44 24 2c 2d 00 00 00 	mov    DWORD PTR [esp+0x2c],0x2d
c000f63e:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c000f646:	66 c7 44 24 34 00 00 	mov    WORD PTR [esp+0x34],0x0
c000f64d:	68 f6 42 02 c0       	push   0xc00242f6
c000f652:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c000f656:	8d 74 24 18          	lea    esi,[esp+0x18]
c000f65a:	50                   	push   eax
c000f65b:	e8 f0 0f ff ff       	call   c0000650 <strcpy>
c000f660:	83 ec 20             	sub    esp,0x20
c000f663:	b9 09 00 00 00       	mov    ecx,0x9
c000f668:	fc                   	cld    
c000f669:	89 e7                	mov    edi,esp
c000f66b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000f66d:	e8 82 ff ff ff       	call   c000f5f4 <KeSetLocale(klocale_t)>
c000f672:	83 c4 64             	add    esp,0x64
c000f675:	5e                   	pop    esi
c000f676:	5f                   	pop    edi
c000f677:	c3                   	ret    

c000f678 <KeFormatCurrency(char*, int, long long, long long)>:
c000f678:	c3                   	ret    

c000f679 <KeFormatCurrency(char*, int, double)>:
c000f679:	c3                   	ret    

c000f67a <KeFormatNumber(char*, long long, long long)>:
c000f67a:	c3                   	ret    

c000f67b <KeFormatNumber(char*, double)>:
c000f67b:	c3                   	ret    

c000f67c <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)>:
c000f67c:	55                   	push   ebp
c000f67d:	57                   	push   edi
c000f67e:	56                   	push   esi
c000f67f:	53                   	push   ebx
c000f680:	83 ec 4c             	sub    esp,0x4c
c000f683:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f687:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f68b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000f68f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f693:	c7 44 24 1f 30 31 32 33 	mov    DWORD PTR [esp+0x1f],0x33323130
c000f69b:	c7 44 24 23 34 35 36 37 	mov    DWORD PTR [esp+0x23],0x37363534
c000f6a3:	c7 44 24 27 38 39 41 42 	mov    DWORD PTR [esp+0x27],0x42413938
c000f6ab:	c7 44 24 2b 43 44 45 46 	mov    DWORD PTR [esp+0x2b],0x46454443
c000f6b3:	c6 44 24 2f 00       	mov    BYTE PTR [esp+0x2f],0x0
c000f6b8:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c000f6bc:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f6c0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f6c4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f6c8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f6cc:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000f6d0:	83 44 24 3c 01       	add    DWORD PTR [esp+0x3c],0x1
c000f6d5:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000f6d9:	89 c2                	mov    edx,eax
c000f6db:	c1 fa 1f             	sar    edx,0x1f
c000f6de:	52                   	push   edx
c000f6df:	50                   	push   eax
c000f6e0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000f6e4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000f6e8:	e8 17 25 01 00       	call   c0021c04 <__udivdi3>
c000f6ed:	83 c4 10             	add    esp,0x10
c000f6f0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f6f4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000f6f8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f6fc:	80 f4 00             	xor    ah,0x0
c000f6ff:	89 c7                	mov    edi,eax
c000f701:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f705:	80 f4 00             	xor    ah,0x0
c000f708:	89 c5                	mov    ebp,eax
c000f70a:	89 e8                	mov    eax,ebp
c000f70c:	09 f8                	or     eax,edi
c000f70e:	74 04                	je     c000f714 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0x98>
c000f710:	eb be                	jmp    c000f6d0 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0x54>
c000f712:	66 90                	xchg   ax,ax
c000f714:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f718:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000f71b:	90                   	nop
c000f71c:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000f720:	89 c7                	mov    edi,eax
c000f722:	89 c5                	mov    ebp,eax
c000f724:	c1 fd 1f             	sar    ebp,0x1f
c000f727:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f72b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f72f:	55                   	push   ebp
c000f730:	57                   	push   edi
c000f731:	52                   	push   edx
c000f732:	50                   	push   eax
c000f733:	e8 cc 25 01 00       	call   c0021d04 <__umoddi3>
c000f738:	83 c4 10             	add    esp,0x10
c000f73b:	83 6c 24 3c 01       	sub    DWORD PTR [esp+0x3c],0x1
c000f740:	8d 4c 24 1f          	lea    ecx,[esp+0x1f]
c000f744:	01 c8                	add    eax,ecx
c000f746:	8a 10                	mov    dl,BYTE PTR [eax]
c000f748:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f74c:	88 10                	mov    BYTE PTR [eax],dl
c000f74e:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000f752:	89 c2                	mov    edx,eax
c000f754:	c1 fa 1f             	sar    edx,0x1f
c000f757:	52                   	push   edx
c000f758:	50                   	push   eax
c000f759:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f75d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f761:	e8 9e 24 01 00       	call   c0021c04 <__udivdi3>
c000f766:	83 c4 10             	add    esp,0x10
c000f769:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f76d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f771:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f775:	80 f4 00             	xor    ah,0x0
c000f778:	89 c3                	mov    ebx,eax
c000f77a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f77e:	80 f4 00             	xor    ah,0x0
c000f781:	89 c6                	mov    esi,eax
c000f783:	89 f0                	mov    eax,esi
c000f785:	09 d8                	or     eax,ebx
c000f787:	74 03                	je     c000f78c <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0x110>
c000f789:	eb 91                	jmp    c000f71c <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0xa0>
c000f78b:	90                   	nop
c000f78c:	90                   	nop
c000f78d:	83 c4 4c             	add    esp,0x4c
c000f790:	5b                   	pop    ebx
c000f791:	5e                   	pop    esi
c000f792:	5f                   	pop    edi
c000f793:	5d                   	pop    ebp
c000f794:	c3                   	ret    
c000f795:	8d 76 00             	lea    esi,[esi+0x0]

c000f798 <KeBasedSignedIntegerToString(long long, char*, int)>:
c000f798:	55                   	push   ebp
c000f799:	57                   	push   edi
c000f79a:	56                   	push   esi
c000f79b:	53                   	push   ebx
c000f79c:	83 ec 4c             	sub    esp,0x4c
c000f79f:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f7a3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f7a7:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000f7ab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f7af:	c7 44 24 1f 30 31 32 33 	mov    DWORD PTR [esp+0x1f],0x33323130
c000f7b7:	c7 44 24 23 34 35 36 37 	mov    DWORD PTR [esp+0x23],0x37363534
c000f7bf:	c7 44 24 27 38 39 41 42 	mov    DWORD PTR [esp+0x27],0x42413938
c000f7c7:	c7 44 24 2b 43 44 45 46 	mov    DWORD PTR [esp+0x2b],0x46454443
c000f7cf:	c6 44 24 2f 00       	mov    BYTE PTR [esp+0x2f],0x0
c000f7d4:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c000f7d8:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f7dc:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000f7e1:	79 1d                	jns    c000f800 <KeBasedSignedIntegerToString(long long, char*, int)+0x68>
c000f7e3:	f7 5c 24 08          	neg    DWORD PTR [esp+0x8]
c000f7e7:	83 54 24 0c 00       	adc    DWORD PTR [esp+0xc],0x0
c000f7ec:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c000f7f0:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f7f4:	8d 50 01             	lea    edx,[eax+0x1]
c000f7f7:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000f7fb:	c6 00 2d             	mov    BYTE PTR [eax],0x2d
c000f7fe:	66 90                	xchg   ax,ax
c000f800:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f804:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f808:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f80c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000f810:	83 44 24 3c 01       	add    DWORD PTR [esp+0x3c],0x1
c000f815:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000f819:	89 c2                	mov    edx,eax
c000f81b:	c1 fa 1f             	sar    edx,0x1f
c000f81e:	52                   	push   edx
c000f81f:	50                   	push   eax
c000f820:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000f824:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000f828:	e8 d7 23 01 00       	call   c0021c04 <__udivdi3>
c000f82d:	83 c4 10             	add    esp,0x10
c000f830:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f834:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000f838:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f83c:	80 f4 00             	xor    ah,0x0
c000f83f:	89 c7                	mov    edi,eax
c000f841:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f845:	80 f4 00             	xor    ah,0x0
c000f848:	89 c5                	mov    ebp,eax
c000f84a:	89 e8                	mov    eax,ebp
c000f84c:	09 f8                	or     eax,edi
c000f84e:	74 04                	je     c000f854 <KeBasedSignedIntegerToString(long long, char*, int)+0xbc>
c000f850:	eb be                	jmp    c000f810 <KeBasedSignedIntegerToString(long long, char*, int)+0x78>
c000f852:	66 90                	xchg   ax,ax
c000f854:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f858:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000f85b:	90                   	nop
c000f85c:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000f860:	89 c7                	mov    edi,eax
c000f862:	89 c5                	mov    ebp,eax
c000f864:	c1 fd 1f             	sar    ebp,0x1f
c000f867:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f86b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f86f:	55                   	push   ebp
c000f870:	57                   	push   edi
c000f871:	52                   	push   edx
c000f872:	50                   	push   eax
c000f873:	e8 0c 22 01 00       	call   c0021a84 <__moddi3>
c000f878:	83 c4 10             	add    esp,0x10
c000f87b:	83 6c 24 3c 01       	sub    DWORD PTR [esp+0x3c],0x1
c000f880:	8d 4c 24 1f          	lea    ecx,[esp+0x1f]
c000f884:	01 c8                	add    eax,ecx
c000f886:	8a 10                	mov    dl,BYTE PTR [eax]
c000f888:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f88c:	88 10                	mov    BYTE PTR [eax],dl
c000f88e:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000f892:	89 c2                	mov    edx,eax
c000f894:	c1 fa 1f             	sar    edx,0x1f
c000f897:	52                   	push   edx
c000f898:	50                   	push   eax
c000f899:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f89d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f8a1:	e8 92 20 01 00       	call   c0021938 <__divdi3>
c000f8a6:	83 c4 10             	add    esp,0x10
c000f8a9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f8ad:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f8b1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f8b5:	80 f4 00             	xor    ah,0x0
c000f8b8:	89 c3                	mov    ebx,eax
c000f8ba:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f8be:	80 f4 00             	xor    ah,0x0
c000f8c1:	89 c6                	mov    esi,eax
c000f8c3:	89 f0                	mov    eax,esi
c000f8c5:	09 d8                	or     eax,ebx
c000f8c7:	74 03                	je     c000f8cc <KeBasedSignedIntegerToString(long long, char*, int)+0x134>
c000f8c9:	eb 91                	jmp    c000f85c <KeBasedSignedIntegerToString(long long, char*, int)+0xc4>
c000f8cb:	90                   	nop
c000f8cc:	90                   	nop
c000f8cd:	83 c4 4c             	add    esp,0x4c
c000f8d0:	5b                   	pop    ebx
c000f8d1:	5e                   	pop    esi
c000f8d2:	5f                   	pop    edi
c000f8d3:	5d                   	pop    ebp
c000f8d4:	c3                   	ret    
c000f8d5:	8d 76 00             	lea    esi,[esi+0x0]

c000f8d8 <KeGetDigitsInNumber(long long)>:
c000f8d8:	56                   	push   esi
c000f8d9:	53                   	push   ebx
c000f8da:	83 ec 24             	sub    esp,0x24
c000f8dd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f8e1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f8e5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f8e9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f8ed:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000f8f5:	8d 76 00             	lea    esi,[esi+0x0]
c000f8f8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f8fc:	80 f4 00             	xor    ah,0x0
c000f8ff:	89 c3                	mov    ebx,eax
c000f901:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f905:	80 f4 00             	xor    ah,0x0
c000f908:	89 c6                	mov    esi,eax
c000f90a:	89 f0                	mov    eax,esi
c000f90c:	09 d8                	or     eax,ebx
c000f90e:	74 28                	je     c000f938 <KeGetDigitsInNumber(long long)+0x60>
c000f910:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f914:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f918:	6a 00                	push   0x0
c000f91a:	6a 0a                	push   0xa
c000f91c:	52                   	push   edx
c000f91d:	50                   	push   eax
c000f91e:	e8 15 20 01 00       	call   c0021938 <__divdi3>
c000f923:	83 c4 10             	add    esp,0x10
c000f926:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f92a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f92e:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000f933:	eb c3                	jmp    c000f8f8 <KeGetDigitsInNumber(long long)+0x20>
c000f935:	8d 76 00             	lea    esi,[esi+0x0]
c000f938:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f93c:	83 c4 24             	add    esp,0x24
c000f93f:	5b                   	pop    ebx
c000f940:	5e                   	pop    esi
c000f941:	c3                   	ret    
c000f942:	66 90                	xchg   ax,ax

c000f944 <KeItoa(unsigned long long, char*)>:
c000f944:	83 ec 1c             	sub    esp,0x1c
c000f947:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f94b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f94f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f953:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f957:	6a 0a                	push   0xa
c000f959:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f95d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f961:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f965:	e8 12 fd ff ff       	call   c000f67c <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)>
c000f96a:	83 c4 10             	add    esp,0x10
c000f96d:	90                   	nop
c000f96e:	83 c4 1c             	add    esp,0x1c
c000f971:	c3                   	ret    
c000f972:	66 90                	xchg   ax,ax

c000f974 <KeItoa(long long, char*)>:
c000f974:	83 ec 1c             	sub    esp,0x1c
c000f977:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f97b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f97f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f983:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f987:	6a 0a                	push   0xa
c000f989:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f98d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f991:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f995:	e8 fe fd ff ff       	call   c000f798 <KeBasedSignedIntegerToString(long long, char*, int)>
c000f99a:	83 c4 10             	add    esp,0x10
c000f99d:	90                   	nop
c000f99e:	83 c4 1c             	add    esp,0x1c
c000f9a1:	c3                   	ret    
c000f9a2:	66 90                	xchg   ax,ax

c000f9a4 <KeXtoa(unsigned long long, char*)>:
c000f9a4:	83 ec 1c             	sub    esp,0x1c
c000f9a7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f9ab:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f9af:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f9b3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f9b7:	6a 10                	push   0x10
c000f9b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f9bd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f9c1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f9c5:	e8 b2 fc ff ff       	call   c000f67c <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)>
c000f9ca:	83 c4 10             	add    esp,0x10
c000f9cd:	90                   	nop
c000f9ce:	83 c4 1c             	add    esp,0x1c
c000f9d1:	c3                   	ret    

c000f9d2 <sbrk>:
c000f9d2:	55                   	push   ebp
c000f9d3:	57                   	push   edi
c000f9d4:	56                   	push   esi
c000f9d5:	53                   	push   ebx
c000f9d6:	83 ec 1c             	sub    esp,0x1c
c000f9d9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f9dd:	85 c0                	test   eax,eax
c000f9df:	74 66                	je     c000fa47 <sbrk+0x75>
c000f9e1:	78 6b                	js     c000fa4e <sbrk+0x7c>
c000f9e3:	8b 15 70 6d 02 c0    	mov    edx,DWORD PTR ds:0xc0026d70
c000f9e9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f9ed:	8d a8 fe 1f 00 00    	lea    ebp,[eax+0x1ffe]
c000f9f3:	05 ff 0f 00 00       	add    eax,0xfff
c000f9f8:	0f 49 e8             	cmovns ebp,eax
c000f9fb:	c1 fd 0c             	sar    ebp,0xc
c000f9fe:	bb 00 00 00 00       	mov    ebx,0x0
c000fa03:	8b 35 70 f2 02 c0    	mov    esi,DWORD PTR ds:0xc002f270
c000fa09:	8b 3d 70 6d 02 c0    	mov    edi,DWORD PTR ds:0xc0026d70
c000fa0f:	e8 70 06 00 00       	call   c0010084 <Phys::allocatePage()>
c000fa14:	68 01 04 00 00       	push   0x401
c000fa19:	57                   	push   edi
c000fa1a:	50                   	push   eax
c000fa1b:	56                   	push   esi
c000fa1c:	e8 f9 3f 00 00       	call   c0013a1a <VAS::mapPage(unsigned long, unsigned long, int)>
c000fa21:	81 05 70 6d 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc0026d70,0x1000
c000fa2b:	83 c3 01             	add    ebx,0x1
c000fa2e:	83 c4 10             	add    esp,0x10
c000fa31:	39 dd                	cmp    ebp,ebx
c000fa33:	75 ce                	jne    c000fa03 <sbrk+0x31>
c000fa35:	0f 20 d8             	mov    eax,cr3
c000fa38:	0f 22 d8             	mov    cr3,eax
c000fa3b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fa3f:	83 c4 1c             	add    esp,0x1c
c000fa42:	5b                   	pop    ebx
c000fa43:	5e                   	pop    esi
c000fa44:	5f                   	pop    edi
c000fa45:	5d                   	pop    ebp
c000fa46:	c3                   	ret    
c000fa47:	a1 70 6d 02 c0       	mov    eax,ds:0xc0026d70
c000fa4c:	eb f1                	jmp    c000fa3f <sbrk+0x6d>
c000fa4e:	83 ec 08             	sub    esp,0x8
c000fa51:	50                   	push   eax
c000fa52:	68 fc 42 02 c0       	push   0xc00242fc
c000fa57:	e8 0a 75 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000fa5c:	83 c4 10             	add    esp,0x10
c000fa5f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000fa64:	eb d9                	jmp    c000fa3f <sbrk+0x6d>

c000fa66 <sbrk_thunk>:
c000fa66:	83 ec 0c             	sub    esp,0xc
c000fa69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fa6d:	3d ff bf 00 00       	cmp    eax,0xbfff
c000fa72:	7f 10                	jg     c000fa84 <sbrk_thunk+0x1e>
c000fa74:	83 ec 0c             	sub    esp,0xc
c000fa77:	50                   	push   eax
c000fa78:	e8 55 ff ff ff       	call   c000f9d2 <sbrk>
c000fa7d:	83 c4 10             	add    esp,0x10
c000fa80:	83 c4 0c             	add    esp,0xc
c000fa83:	c3                   	ret    
c000fa84:	83 ec 08             	sub    esp,0x8
c000fa87:	50                   	push   eax
c000fa88:	68 2c 43 02 c0       	push   0xc002432c
c000fa8d:	e8 d4 74 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000fa92:	83 c4 10             	add    esp,0x10
c000fa95:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000fa9a:	eb e4                	jmp    c000fa80 <sbrk_thunk+0x1a>

c000fa9c <mmap>:
c000fa9c:	55                   	push   ebp
c000fa9d:	57                   	push   edi
c000fa9e:	56                   	push   esi
c000fa9f:	53                   	push   ebx
c000faa0:	83 ec 18             	sub    esp,0x18
c000faa3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000faa7:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c000faad:	89 fb                	mov    ebx,edi
c000faaf:	c1 eb 0c             	shr    ebx,0xc
c000fab2:	53                   	push   ebx
c000fab3:	e8 89 38 00 00       	call   c0013341 <Virt::allocateKernelVirtualPages(int)>
c000fab8:	89 c5                	mov    ebp,eax
c000faba:	83 c4 10             	add    esp,0x10
c000fabd:	85 db                	test   ebx,ebx
c000fabf:	7e 2f                	jle    c000faf0 <mmap+0x54>
c000fac1:	81 e7 00 f0 ff ff    	and    edi,0xfffff000
c000fac7:	01 c7                	add    edi,eax
c000fac9:	89 c3                	mov    ebx,eax
c000facb:	8b 35 70 f2 02 c0    	mov    esi,DWORD PTR ds:0xc002f270
c000fad1:	e8 ae 05 00 00       	call   c0010084 <Phys::allocatePage()>
c000fad6:	68 01 04 00 00       	push   0x401
c000fadb:	53                   	push   ebx
c000fadc:	50                   	push   eax
c000fadd:	56                   	push   esi
c000fade:	e8 37 3f 00 00       	call   c0013a1a <VAS::mapPage(unsigned long, unsigned long, int)>
c000fae3:	81 c3 00 10 00 00    	add    ebx,0x1000
c000fae9:	83 c4 10             	add    esp,0x10
c000faec:	39 fb                	cmp    ebx,edi
c000faee:	75 db                	jne    c000facb <mmap+0x2f>
c000faf0:	89 e8                	mov    eax,ebp
c000faf2:	83 c4 0c             	add    esp,0xc
c000faf5:	5b                   	pop    ebx
c000faf6:	5e                   	pop    esi
c000faf7:	5f                   	pop    edi
c000faf8:	5d                   	pop    ebp
c000faf9:	c3                   	ret    

c000fafa <munmap>:
c000fafa:	83 ec 18             	sub    esp,0x18
c000fafd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fb01:	e8 39 3b 00 00       	call   c001363f <Virt::freeKernelVirtualPages(unsigned long)>
c000fb06:	b8 00 00 00 00       	mov    eax,0x0
c000fb0b:	83 c4 1c             	add    esp,0x1c
c000fb0e:	c3                   	ret    

c000fb0f <liballoc_lock()>:
c000fb0f:	fa                   	cli    
c000fb10:	83 05 50 fa 02 c0 01 	add    DWORD PTR ds:0xc002fa50,0x1
c000fb17:	b8 00 00 00 00       	mov    eax,0x0
c000fb1c:	c3                   	ret    

c000fb1d <liballoc_unlock()>:
c000fb1d:	f0 83 2d 50 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa50,0x1
c000fb25:	83 3d 50 fa 02 c0 00 	cmp    DWORD PTR ds:0xc002fa50,0x0
c000fb2c:	75 01                	jne    c000fb2f <liballoc_unlock()+0x12>
c000fb2e:	fb                   	sti    
c000fb2f:	b8 00 00 00 00       	mov    eax,0x0
c000fb34:	c3                   	ret    

c000fb35 <liballoc_alloc(int)>:
c000fb35:	83 ec 10             	sub    esp,0x10
c000fb38:	6a 01                	push   0x1
c000fb3a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fb3e:	ff 35 70 f2 02 c0    	push   DWORD PTR ds:0xc002f270
c000fb44:	e8 d9 3f 00 00       	call   c0013b22 <VAS::allocatePages(int, int)>
c000fb49:	83 c4 1c             	add    esp,0x1c
c000fb4c:	c3                   	ret    

c000fb4d <liballoc_free(void*, int)>:
c000fb4d:	83 ec 14             	sub    esp,0x14
c000fb50:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fb54:	ff 35 70 f2 02 c0    	push   DWORD PTR ds:0xc002f270
c000fb5a:	e8 1d 3c 00 00       	call   c001377c <VAS::freeAllocatedPages(unsigned long)>
c000fb5f:	b8 00 00 00 00       	mov    eax,0x0
c000fb64:	83 c4 1c             	add    esp,0x1c
c000fb67:	c3                   	ret    

c000fb68 <realloc>:
c000fb68:	83 ec 14             	sub    esp,0x14
c000fb6b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fb6f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fb73:	e8 0d 1c ff ff       	call   c0001785 <dlrealloc>
c000fb78:	83 c4 1c             	add    esp,0x1c
c000fb7b:	c3                   	ret    

c000fb7c <malloc>:
c000fb7c:	83 ec 18             	sub    esp,0x18
c000fb7f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fb83:	e8 c0 16 ff ff       	call   c0001248 <dlmalloc>
c000fb88:	83 c4 1c             	add    esp,0x1c
c000fb8b:	c3                   	ret    

c000fb8c <free>:
c000fb8c:	83 ec 18             	sub    esp,0x18
c000fb8f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fb93:	e8 ee 11 ff ff       	call   c0000d86 <dlfree>
c000fb98:	83 c4 1c             	add    esp,0x1c
c000fb9b:	c3                   	ret    

c000fb9c <rfree>:
c000fb9c:	83 ec 18             	sub    esp,0x18
c000fb9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fba3:	e8 de 11 ff ff       	call   c0000d86 <dlfree>
c000fba8:	83 c4 1c             	add    esp,0x1c
c000fbab:	c3                   	ret    

c000fbac <calloc>:
c000fbac:	56                   	push   esi
c000fbad:	53                   	push   ebx
c000fbae:	83 ec 10             	sub    esp,0x10
c000fbb1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000fbb5:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000fbba:	53                   	push   ebx
c000fbbb:	e8 bc ff ff ff       	call   c000fb7c <malloc>
c000fbc0:	89 c6                	mov    esi,eax
c000fbc2:	83 c4 0c             	add    esp,0xc
c000fbc5:	53                   	push   ebx
c000fbc6:	6a 00                	push   0x0
c000fbc8:	50                   	push   eax
c000fbc9:	e8 22 09 ff ff       	call   c00004f0 <memset>
c000fbce:	89 f0                	mov    eax,esi
c000fbd0:	83 c4 14             	add    esp,0x14
c000fbd3:	5b                   	pop    ebx
c000fbd4:	5e                   	pop    esi
c000fbd5:	c3                   	ret    
c000fbd6:	66 90                	xchg   ax,ax

c000fbd8 <KeMailboxTryPost(Mailbox*, void*)>:
c000fbd8:	83 ec 10             	sub    esp,0x10
c000fbdb:	fa                   	cli    
c000fbdc:	a1 50 fa 02 c0       	mov    eax,ds:0xc002fa50
c000fbe1:	83 c0 01             	add    eax,0x1
c000fbe4:	a3 50 fa 02 c0       	mov    ds:0xc002fa50,eax
c000fbe9:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000fbee:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fbf2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fbf5:	85 c0                	test   eax,eax
c000fbf7:	75 23                	jne    c000fc1c <KeMailboxTryPost(Mailbox*, void*)+0x44>
c000fbf9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fbfd:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000fc01:	89 10                	mov    DWORD PTR [eax],edx
c000fc03:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fc07:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fc0a:	8d 50 01             	lea    edx,[eax+0x1]
c000fc0d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fc11:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000fc14:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000fc19:	8d 76 00             	lea    esi,[esi+0x0]
c000fc1c:	f0 83 2d 50 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa50,0x1
c000fc24:	a1 50 fa 02 c0       	mov    eax,ds:0xc002fa50
c000fc29:	85 c0                	test   eax,eax
c000fc2b:	75 03                	jne    c000fc30 <KeMailboxTryPost(Mailbox*, void*)+0x58>
c000fc2d:	fb                   	sti    
c000fc2e:	66 90                	xchg   ax,ax
c000fc30:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000fc34:	83 c4 10             	add    esp,0x10
c000fc37:	c3                   	ret    

c000fc38 <KeMailboxTryGet(Mailbox*, void**)>:
c000fc38:	83 ec 10             	sub    esp,0x10
c000fc3b:	fa                   	cli    
c000fc3c:	a1 50 fa 02 c0       	mov    eax,ds:0xc002fa50
c000fc41:	83 c0 01             	add    eax,0x1
c000fc44:	a3 50 fa 02 c0       	mov    ds:0xc002fa50,eax
c000fc49:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000fc4e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fc52:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fc55:	83 f8 01             	cmp    eax,0x1
c000fc58:	75 22                	jne    c000fc7c <KeMailboxTryGet(Mailbox*, void**)+0x44>
c000fc5a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fc5e:	8b 10                	mov    edx,DWORD PTR [eax]
c000fc60:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000fc64:	89 10                	mov    DWORD PTR [eax],edx
c000fc66:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fc6a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fc6d:	8d 50 ff             	lea    edx,[eax-0x1]
c000fc70:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fc74:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000fc77:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000fc7c:	f0 83 2d 50 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa50,0x1
c000fc84:	a1 50 fa 02 c0       	mov    eax,ds:0xc002fa50
c000fc89:	85 c0                	test   eax,eax
c000fc8b:	75 03                	jne    c000fc90 <KeMailboxTryGet(Mailbox*, void**)+0x58>
c000fc8d:	fb                   	sti    
c000fc8e:	66 90                	xchg   ax,ax
c000fc90:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000fc94:	83 c4 10             	add    esp,0x10
c000fc97:	c3                   	ret    

c000fc98 <KeMailboxCreate()>:
c000fc98:	83 ec 1c             	sub    esp,0x1c
c000fc9b:	83 ec 0c             	sub    esp,0xc
c000fc9e:	6a 08                	push   0x8
c000fca0:	e8 d7 fe ff ff       	call   c000fb7c <malloc>
c000fca5:	83 c4 10             	add    esp,0x10
c000fca8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fcac:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fcb0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000fcb6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fcba:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000fcc1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fcc5:	83 c4 1c             	add    esp,0x1c
c000fcc8:	c3                   	ret    
c000fcc9:	8d 76 00             	lea    esi,[esi+0x0]

c000fccc <KeMailboxPost(Mailbox*, void*)>:
c000fccc:	83 ec 1c             	sub    esp,0x1c
c000fccf:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000fcd4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000fcd8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000fcdc:	e8 f7 fe ff ff       	call   c000fbd8 <KeMailboxTryPost(Mailbox*, void*)>
c000fce1:	83 c4 08             	add    esp,0x8
c000fce4:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000fce8:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000fcec:	83 f0 01             	xor    eax,0x1
c000fcef:	0f b6 c0             	movzx  eax,al
c000fcf2:	85 c0                	test   eax,eax
c000fcf4:	74 26                	je     c000fd1c <KeMailboxPost(Mailbox*, void*)+0x50>
c000fcf6:	fa                   	cli    
c000fcf7:	a1 50 fa 02 c0       	mov    eax,ds:0xc002fa50
c000fcfc:	83 c0 01             	add    eax,0x1
c000fcff:	a3 50 fa 02 c0       	mov    ds:0xc002fa50,eax
c000fd04:	e8 c3 73 00 00       	call   c00170cc <schedule()>
c000fd09:	f0 83 2d 50 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa50,0x1
c000fd11:	a1 50 fa 02 c0       	mov    eax,ds:0xc002fa50
c000fd16:	85 c0                	test   eax,eax
c000fd18:	75 02                	jne    c000fd1c <KeMailboxPost(Mailbox*, void*)+0x50>
c000fd1a:	fb                   	sti    
c000fd1b:	90                   	nop
c000fd1c:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000fd21:	85 c0                	test   eax,eax
c000fd23:	75 03                	jne    c000fd28 <KeMailboxPost(Mailbox*, void*)+0x5c>
c000fd25:	eb ad                	jmp    c000fcd4 <KeMailboxPost(Mailbox*, void*)+0x8>
c000fd27:	90                   	nop
c000fd28:	90                   	nop
c000fd29:	83 c4 1c             	add    esp,0x1c
c000fd2c:	c3                   	ret    
c000fd2d:	8d 76 00             	lea    esi,[esi+0x0]

c000fd30 <KeMailboxGet(Mailbox*, void**)>:
c000fd30:	83 ec 1c             	sub    esp,0x1c
c000fd33:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000fd38:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000fd3c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000fd40:	e8 f3 fe ff ff       	call   c000fc38 <KeMailboxTryGet(Mailbox*, void**)>
c000fd45:	83 c4 08             	add    esp,0x8
c000fd48:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000fd4c:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000fd50:	83 f0 01             	xor    eax,0x1
c000fd53:	0f b6 c0             	movzx  eax,al
c000fd56:	85 c0                	test   eax,eax
c000fd58:	74 26                	je     c000fd80 <KeMailboxGet(Mailbox*, void**)+0x50>
c000fd5a:	fa                   	cli    
c000fd5b:	a1 50 fa 02 c0       	mov    eax,ds:0xc002fa50
c000fd60:	83 c0 01             	add    eax,0x1
c000fd63:	a3 50 fa 02 c0       	mov    ds:0xc002fa50,eax
c000fd68:	e8 5f 73 00 00       	call   c00170cc <schedule()>
c000fd6d:	f0 83 2d 50 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa50,0x1
c000fd75:	a1 50 fa 02 c0       	mov    eax,ds:0xc002fa50
c000fd7a:	85 c0                	test   eax,eax
c000fd7c:	75 02                	jne    c000fd80 <KeMailboxGet(Mailbox*, void**)+0x50>
c000fd7e:	fb                   	sti    
c000fd7f:	90                   	nop
c000fd80:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000fd85:	85 c0                	test   eax,eax
c000fd87:	75 03                	jne    c000fd8c <KeMailboxGet(Mailbox*, void**)+0x5c>
c000fd89:	eb ad                	jmp    c000fd38 <KeMailboxGet(Mailbox*, void**)+0x8>
c000fd8b:	90                   	nop
c000fd8c:	90                   	nop
c000fd8d:	83 c4 1c             	add    esp,0x1c
c000fd90:	c3                   	ret    
c000fd91:	8d 76 00             	lea    esi,[esi+0x0]

c000fd94 <KeMailboxDestroy(Mailbox*)>:
c000fd94:	83 ec 0c             	sub    esp,0xc
c000fd97:	83 ec 0c             	sub    esp,0xc
c000fd9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fd9e:	e8 e9 fd ff ff       	call   c000fb8c <free>
c000fda3:	83 c4 10             	add    esp,0x10
c000fda6:	90                   	nop
c000fda7:	83 c4 0c             	add    esp,0xc
c000fdaa:	c3                   	ret    

c000fdab <KeEntryPoint>:
c000fdab:	57                   	push   edi
c000fdac:	bf f9 03 00 00       	mov    edi,0x3f9
c000fdb1:	56                   	push   esi
c000fdb2:	31 f6                	xor    esi,esi
c000fdb4:	53                   	push   ebx
c000fdb5:	83 ec 20             	sub    esp,0x20
c000fdb8:	e8 3b d4 ff ff       	call   c000d1f8 <KeInitialiseBootConfigurationFlags()>
c000fdbd:	89 f0                	mov    eax,esi
c000fdbf:	89 fa                	mov    edx,edi
c000fdc1:	ee                   	out    dx,al
c000fdc2:	bb fb 03 00 00       	mov    ebx,0x3fb
c000fdc7:	b0 80                	mov    al,0x80
c000fdc9:	89 da                	mov    edx,ebx
c000fdcb:	ee                   	out    dx,al
c000fdcc:	b1 03                	mov    cl,0x3
c000fdce:	ba f8 03 00 00       	mov    edx,0x3f8
c000fdd3:	88 c8                	mov    al,cl
c000fdd5:	ee                   	out    dx,al
c000fdd6:	89 f0                	mov    eax,esi
c000fdd8:	89 fa                	mov    edx,edi
c000fdda:	ee                   	out    dx,al
c000fddb:	88 c8                	mov    al,cl
c000fddd:	89 da                	mov    edx,ebx
c000fddf:	ee                   	out    dx,al
c000fde0:	b0 c7                	mov    al,0xc7
c000fde2:	ba fa 03 00 00       	mov    edx,0x3fa
c000fde7:	ee                   	out    dx,al
c000fde8:	b0 0b                	mov    al,0xb
c000fdea:	ba fc 03 00 00       	mov    edx,0x3fc
c000fdef:	ee                   	out    dx,al
c000fdf0:	83 ec 0c             	sub    esp,0xc
c000fdf3:	68 3b 43 02 c0       	push   0xc002433b
c000fdf8:	e8 69 71 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000fdfd:	e8 04 d4 ff ff       	call   c000d206 <KeDisplaySplashScreen()>
c000fe02:	a1 24 05 00 00       	mov    eax,ds:0x524
c000fe07:	05 ff 0f 00 00       	add    eax,0xfff
c000fe0c:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fe11:	89 04 24             	mov    DWORD PTR [esp],eax
c000fe14:	e8 fc 03 00 00       	call   c0010215 <Phys::physicalMemorySetup(unsigned int)>
c000fe19:	e8 f7 36 00 00       	call   c0013515 <Virt::virtualMemorySetup()>
c000fe1e:	e8 0f d3 ff ff       	call   c000d132 <KeInitialiseAtexit()>
c000fe23:	58                   	pop    eax
c000fe24:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c000fe28:	53                   	push   ebx
c000fe29:	e8 ce 39 00 00       	call   c00137fc <VAS::VAS()>
c000fe2e:	89 1d 70 f2 02 c0    	mov    DWORD PTR ds:0xc002f270,ebx
c000fe34:	e8 e5 1f 01 00       	call   c0021e1e <_init>
c000fe39:	c7 04 24 6c 01 00 00 	mov    DWORD PTR [esp],0x16c
c000fe40:	e8 37 fd ff ff       	call   c000fb7c <malloc>
c000fe45:	89 04 24             	mov    DWORD PTR [esp],eax
c000fe48:	89 c6                	mov    esi,eax
c000fe4a:	e8 93 e3 ff ff       	call   c000e1e2 <Computer::Computer()>
c000fe4f:	53                   	push   ebx
c000fe50:	6a 00                	push   0x0
c000fe52:	6a 00                	push   0x0
c000fe54:	56                   	push   esi
c000fe55:	89 35 d4 d0 02 c0    	mov    DWORD PTR ds:0xc002d0d4,esi
c000fe5b:	e8 38 e4 ff ff       	call   c000e298 <Computer::open(int, int, void*)>
c000fe60:	83 c4 14             	add    esp,0x14
c000fe63:	53                   	push   ebx
c000fe64:	e8 49 3a 00 00       	call   c00138b2 <VAS::~VAS()>
c000fe69:	83 c4 30             	add    esp,0x30
c000fe6c:	5b                   	pop    ebx
c000fe6d:	5e                   	pop    esi
c000fe6e:	5f                   	pop    edi
c000fe6f:	c3                   	ret    

c000fe70 <Mutex::Mutex()>:
c000fe70:	83 ec 0c             	sub    esp,0xc
c000fe73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe77:	83 ec 08             	sub    esp,0x8
c000fe7a:	6a 01                	push   0x1
c000fe7c:	50                   	push   eax
c000fe7d:	e8 4e 0c 00 00       	call   c0010ad0 <Semaphore::Semaphore(int)>
c000fe82:	83 c4 10             	add    esp,0x10
c000fe85:	90                   	nop
c000fe86:	83 c4 0c             	add    esp,0xc
c000fe89:	c3                   	ret    

c000fe8a <KePanic(char const*)>:
c000fe8a:	c6 05 44 f1 02 c0 01 	mov    BYTE PTR ds:0xc002f144,0x1
c000fe91:	e9 c9 a7 00 00       	jmp    c001a65f <HalPanic(char const*)>

c000fe96 <Phys::allocateDMA(unsigned long)>:
c000fe96:	55                   	push   ebp
c000fe97:	31 ed                	xor    ebp,ebp
c000fe99:	57                   	push   edi
c000fe9a:	56                   	push   esi
c000fe9b:	31 f6                	xor    esi,esi
c000fe9d:	53                   	push   ebx
c000fe9e:	31 db                	xor    ebx,ebx
c000fea0:	83 ec 1c             	sub    esp,0x1c
c000fea3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fea7:	05 ff 0f 00 00       	add    eax,0xfff
c000feac:	c1 e8 0c             	shr    eax,0xc
c000feaf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000feb3:	31 c0                	xor    eax,eax
c000feb5:	eb 1b                	jmp    c000fed2 <Phys::allocateDMA(unsigned long)+0x3c>
c000feb7:	8d 78 01             	lea    edi,[eax+0x1]
c000feba:	85 c0                	test   eax,eax
c000febc:	0f 44 eb             	cmove  ebp,ebx
c000febf:	0f 44 f3             	cmove  esi,ebx
c000fec2:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c000fec6:	74 37                	je     c000feff <Phys::allocateDMA(unsigned long)+0x69>
c000fec8:	89 f8                	mov    eax,edi
c000feca:	83 c3 01             	add    ebx,0x1
c000fecd:	83 fb 0f             	cmp    ebx,0xf
c000fed0:	7f 13                	jg     c000fee5 <Phys::allocateDMA(unsigned long)+0x4f>
c000fed2:	80 bb 60 f1 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffd0ea0],0x0
c000fed9:	74 dc                	je     c000feb7 <Phys::allocateDMA(unsigned long)+0x21>
c000fedb:	31 c0                	xor    eax,eax
c000fedd:	83 c3 01             	add    ebx,0x1
c000fee0:	83 fb 0f             	cmp    ebx,0xf
c000fee3:	7e ed                	jle    c000fed2 <Phys::allocateDMA(unsigned long)+0x3c>
c000fee5:	83 ec 0c             	sub    esp,0xc
c000fee8:	68 54 43 02 c0       	push   0xc0024354
c000feed:	e8 98 ff ff ff       	call   c000fe8a <KePanic(char const*)>
c000fef2:	83 c4 10             	add    esp,0x10
c000fef5:	31 c0                	xor    eax,eax
c000fef7:	83 c4 1c             	add    esp,0x1c
c000fefa:	5b                   	pop    ebx
c000fefb:	5e                   	pop    esi
c000fefc:	5f                   	pop    edi
c000fefd:	5d                   	pop    ebp
c000fefe:	c3                   	ret    
c000feff:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000ff03:	89 f2                	mov    edx,esi
c000ff05:	c1 fa 04             	sar    edx,0x4
c000ff08:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ff0c:	01 f1                	add    ecx,esi
c000ff0e:	8d 51 0e             	lea    edx,[ecx+0xe]
c000ff11:	83 e9 01             	sub    ecx,0x1
c000ff14:	0f 48 ca             	cmovs  ecx,edx
c000ff17:	c1 f9 04             	sar    ecx,0x4
c000ff1a:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c000ff1e:	74 06                	je     c000ff26 <Phys::allocateDMA(unsigned long)+0x90>
c000ff20:	89 eb                	mov    ebx,ebp
c000ff22:	31 c0                	xor    eax,eax
c000ff24:	eb b7                	jmp    c000fedd <Phys::allocateDMA(unsigned long)+0x47>
c000ff26:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ff2a:	85 d2                	test   edx,edx
c000ff2c:	74 17                	je     c000ff45 <Phys::allocateDMA(unsigned long)+0xaf>
c000ff2e:	8d 96 60 f1 02 c0    	lea    edx,[esi-0x3ffd0ea0]
c000ff34:	8d 84 06 61 f1 02 c0 	lea    eax,[esi+eax*1-0x3ffd0e9f]
c000ff3b:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000ff3e:	83 c2 01             	add    edx,0x1
c000ff41:	39 d0                	cmp    eax,edx
c000ff43:	75 f6                	jne    c000ff3b <Phys::allocateDMA(unsigned long)+0xa5>
c000ff45:	8b 15 58 f1 02 c0    	mov    edx,DWORD PTR ds:0xc002f158
c000ff4b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ff4f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ff53:	01 c2                	add    edx,eax
c000ff55:	89 15 58 f1 02 c0    	mov    DWORD PTR ds:0xc002f158,edx
c000ff5b:	85 c9                	test   ecx,ecx
c000ff5d:	74 17                	je     c000ff76 <Phys::allocateDMA(unsigned long)+0xe0>
c000ff5f:	83 ec 0c             	sub    esp,0xc
c000ff62:	68 54 43 02 c0       	push   0xc0024354
c000ff67:	e8 1e ff ff ff       	call   c000fe8a <KePanic(char const*)>
c000ff6c:	83 c4 10             	add    esp,0x10
c000ff6f:	89 f8                	mov    eax,edi
c000ff71:	e9 54 ff ff ff       	jmp    c000feca <Phys::allocateDMA(unsigned long)+0x34>
c000ff76:	c1 e6 0c             	shl    esi,0xc
c000ff79:	8d 86 00 00 01 c2    	lea    eax,[esi-0x3dff0000]
c000ff7f:	e9 73 ff ff ff       	jmp    c000fef7 <Phys::allocateDMA(unsigned long)+0x61>

c000ff84 <Phys::freeDMA(unsigned long, unsigned long)>:
c000ff84:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ff88:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000ff8e:	a1 58 f1 02 c0       	mov    eax,ds:0xc002f158
c000ff93:	c1 ea 0c             	shr    edx,0xc
c000ff96:	29 d0                	sub    eax,edx
c000ff98:	a3 58 f1 02 c0       	mov    ds:0xc002f158,eax
c000ff9d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ffa1:	05 00 00 ff 3d       	add    eax,0x3dff0000
c000ffa6:	c1 e8 0c             	shr    eax,0xc
c000ffa9:	85 d2                	test   edx,edx
c000ffab:	74 11                	je     c000ffbe <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c000ffad:	05 60 f1 02 c0       	add    eax,0xc002f160
c000ffb2:	01 c2                	add    edx,eax
c000ffb4:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000ffb7:	83 c0 01             	add    eax,0x1
c000ffba:	39 d0                	cmp    eax,edx
c000ffbc:	75 f6                	jne    c000ffb4 <Phys::freeDMA(unsigned long, unsigned long)+0x30>
c000ffbe:	c3                   	ret    

c000ffbf <Phys::setPageState(unsigned long, bool)>:
c000ffbf:	57                   	push   edi
c000ffc0:	56                   	push   esi
c000ffc1:	8b 35 74 6d 02 c0    	mov    esi,DWORD PTR ds:0xc0026d74
c000ffc7:	53                   	push   ebx
c000ffc8:	bb fe ff ff ff       	mov    ebx,0xfffffffe
c000ffcd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ffd1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ffd5:	89 ca                	mov    edx,ecx
c000ffd7:	83 e1 07             	and    ecx,0x7
c000ffda:	c1 ea 03             	shr    edx,0x3
c000ffdd:	0f b6 c0             	movzx  eax,al
c000ffe0:	d3 c3                	rol    ebx,cl
c000ffe2:	01 d6                	add    esi,edx
c000ffe4:	0f b6 3e             	movzx  edi,BYTE PTR [esi]
c000ffe7:	d3 e0                	shl    eax,cl
c000ffe9:	21 fb                	and    ebx,edi
c000ffeb:	88 1e                	mov    BYTE PTR [esi],bl
c000ffed:	8b 1d 74 6d 02 c0    	mov    ebx,DWORD PTR ds:0xc0026d74
c000fff3:	01 da                	add    edx,ebx
c000fff5:	8a 0a                	mov    cl,BYTE PTR [edx]
c000fff7:	09 c8                	or     eax,ecx
c000fff9:	88 02                	mov    BYTE PTR [edx],al
c000fffb:	5b                   	pop    ebx
c000fffc:	5e                   	pop    esi
c000fffd:	5f                   	pop    edi
c000fffe:	c3                   	ret    

c000ffff <Phys::getPageState(unsigned long)>:
c000ffff:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0010003:	8b 15 74 6d 02 c0    	mov    edx,DWORD PTR ds:0xc0026d74
c0010009:	89 c8                	mov    eax,ecx
c001000b:	83 e1 07             	and    ecx,0x7
c001000e:	c1 e8 03             	shr    eax,0x3
c0010011:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c0010015:	d3 f8                	sar    eax,cl
c0010017:	83 e0 01             	and    eax,0x1
c001001a:	c3                   	ret    

c001001b <Phys::freePage(unsigned long)>:
c001001b:	53                   	push   ebx
c001001c:	83 ec 08             	sub    esp,0x8
c001001f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010023:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c0010029:	81 fa ff ff 00 00    	cmp    edx,0xffff
c001002f:	76 41                	jbe    c0010072 <Phys::freePage(unsigned long)+0x57>
c0010031:	c1 e8 0c             	shr    eax,0xc
c0010034:	50                   	push   eax
c0010035:	89 c3                	mov    ebx,eax
c0010037:	e8 c3 ff ff ff       	call   c000ffff <Phys::getPageState(unsigned long)>
c001003c:	5a                   	pop    edx
c001003d:	84 c0                	test   al,al
c001003f:	74 20                	je     c0010061 <Phys::freePage(unsigned long)+0x46>
c0010041:	a1 58 f1 02 c0       	mov    eax,ds:0xc002f158
c0010046:	83 ec 08             	sub    esp,0x8
c0010049:	6a 00                	push   0x0
c001004b:	53                   	push   ebx
c001004c:	83 e8 01             	sub    eax,0x1
c001004f:	a3 58 f1 02 c0       	mov    ds:0xc002f158,eax
c0010054:	e8 66 ff ff ff       	call   c000ffbf <Phys::setPageState(unsigned long, bool)>
c0010059:	83 c4 10             	add    esp,0x10
c001005c:	83 c4 08             	add    esp,0x8
c001005f:	5b                   	pop    ebx
c0010060:	c3                   	ret    
c0010061:	c7 44 24 10 59 44 02 c0 	mov    DWORD PTR [esp+0x10],0xc0024459
c0010069:	83 c4 08             	add    esp,0x8
c001006c:	5b                   	pop    ebx
c001006d:	e9 18 fe ff ff       	jmp    c000fe8a <KePanic(char const*)>
c0010072:	68 00 10 00 00       	push   0x1000
c0010077:	50                   	push   eax
c0010078:	e8 07 ff ff ff       	call   c000ff84 <Phys::freeDMA(unsigned long, unsigned long)>
c001007d:	59                   	pop    ecx
c001007e:	5b                   	pop    ebx
c001007f:	83 c4 08             	add    esp,0x8
c0010082:	5b                   	pop    ebx
c0010083:	c3                   	ret    

c0010084 <Phys::allocatePage()>:
c0010084:	56                   	push   esi
c0010085:	53                   	push   ebx
c0010086:	83 ec 14             	sub    esp,0x14
c0010089:	8b 35 4c f1 02 c0    	mov    esi,DWORD PTR ds:0xc002f14c
c001008f:	89 f3                	mov    ebx,esi
c0010091:	eb 0a                	jmp    c001009d <Phys::allocatePage()+0x19>
c0010093:	89 1d 4c f1 02 c0    	mov    DWORD PTR ds:0xc002f14c,ebx
c0010099:	39 de                	cmp    esi,ebx
c001009b:	74 26                	je     c00100c3 <Phys::allocatePage()+0x3f>
c001009d:	53                   	push   ebx
c001009e:	e8 5c ff ff ff       	call   c000ffff <Phys::getPageState(unsigned long)>
c00100a3:	59                   	pop    ecx
c00100a4:	84 c0                	test   al,al
c00100a6:	74 67                	je     c001010f <Phys::allocatePage()+0x8b>
c00100a8:	83 c3 01             	add    ebx,0x1
c00100ab:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c00100b1:	75 e0                	jne    c0010093 <Phys::allocatePage()+0xf>
c00100b3:	c7 05 4c f1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f14c,0x0
c00100bd:	31 db                	xor    ebx,ebx
c00100bf:	39 de                	cmp    esi,ebx
c00100c1:	75 da                	jne    c001009d <Phys::allocatePage()+0x19>
c00100c3:	a0 70 f1 02 c0       	mov    al,ds:0xc002f170
c00100c8:	83 ec 0c             	sub    esp,0xc
c00100cb:	83 f0 01             	xor    eax,0x1
c00100ce:	a2 70 f1 02 c0       	mov    ds:0xc002f170,al
c00100d3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00100d8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00100db:	8b 88 b2 05 00 00    	mov    ecx,DWORD PTR [eax+0x5b2]
c00100e1:	51                   	push   ecx
c00100e2:	e8 87 44 00 00       	call   c001456e <VAS::scanForEviction()>
c00100e7:	83 c4 10             	add    esp,0x10
c00100ea:	85 c0                	test   eax,eax
c00100ec:	75 48                	jne    c0010136 <Phys::allocatePage()+0xb2>
c00100ee:	83 ec 0c             	sub    esp,0xc
c00100f1:	68 7c 43 02 c0       	push   0xc002437c
c00100f6:	e8 8f fd ff ff       	call   c000fe8a <KePanic(char const*)>
c00100fb:	8b 1d 4c f1 02 c0    	mov    ebx,DWORD PTR ds:0xc002f14c
c0010101:	83 c4 10             	add    esp,0x10
c0010104:	53                   	push   ebx
c0010105:	e8 f5 fe ff ff       	call   c000ffff <Phys::getPageState(unsigned long)>
c001010a:	59                   	pop    ecx
c001010b:	84 c0                	test   al,al
c001010d:	75 99                	jne    c00100a8 <Phys::allocatePage()+0x24>
c001010f:	6a 01                	push   0x1
c0010111:	53                   	push   ebx
c0010112:	e8 a8 fe ff ff       	call   c000ffbf <Phys::setPageState(unsigned long, bool)>
c0010117:	8b 1d 58 f1 02 c0    	mov    ebx,DWORD PTR ds:0xc002f158
c001011d:	5e                   	pop    esi
c001011e:	a1 4c f1 02 c0       	mov    eax,ds:0xc002f14c
c0010123:	5a                   	pop    edx
c0010124:	83 c3 01             	add    ebx,0x1
c0010127:	89 1d 58 f1 02 c0    	mov    DWORD PTR ds:0xc002f158,ebx
c001012d:	c1 e0 0c             	shl    eax,0xc
c0010130:	83 c4 14             	add    esp,0x14
c0010133:	5b                   	pop    ebx
c0010134:	5e                   	pop    esi
c0010135:	c3                   	ret    
c0010136:	8b 15 58 f1 02 c0    	mov    edx,DWORD PTR ds:0xc002f158
c001013c:	83 ec 08             	sub    esp,0x8
c001013f:	6a 01                	push   0x1
c0010141:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010145:	83 c2 01             	add    edx,0x1
c0010148:	89 15 58 f1 02 c0    	mov    DWORD PTR ds:0xc002f158,edx
c001014e:	89 c2                	mov    edx,eax
c0010150:	c1 ea 0c             	shr    edx,0xc
c0010153:	52                   	push   edx
c0010154:	e8 66 fe ff ff       	call   c000ffbf <Phys::setPageState(unsigned long, bool)>
c0010159:	83 c4 10             	add    esp,0x10
c001015c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010160:	eb ce                	jmp    c0010130 <Phys::allocatePage()+0xac>

c0010162 <Phys::allocateContiguousPages(int)>:
c0010162:	57                   	push   edi
c0010163:	56                   	push   esi
c0010164:	53                   	push   ebx
c0010165:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0010169:	fa                   	cli    
c001016a:	8b 15 50 fa 02 c0    	mov    edx,DWORD PTR ds:0xc002fa50
c0010170:	83 ec 0c             	sub    esp,0xc
c0010173:	31 db                	xor    ebx,ebx
c0010175:	68 ac 43 02 c0       	push   0xc00243ac
c001017a:	83 c2 01             	add    edx,0x1
c001017d:	89 15 50 fa 02 c0    	mov    DWORD PTR ds:0xc002fa50,edx
c0010183:	e8 de 6d ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0010188:	83 c4 10             	add    esp,0x10
c001018b:	85 db                	test   ebx,ebx
c001018d:	75 11                	jne    c00101a0 <Phys::allocateContiguousPages(int)+0x3e>
c001018f:	e8 f0 fe ff ff       	call   c0010084 <Phys::allocatePage()>
c0010194:	83 ff 01             	cmp    edi,0x1
c0010197:	89 c6                	mov    esi,eax
c0010199:	74 21                	je     c00101bc <Phys::allocateContiguousPages(int)+0x5a>
c001019b:	bb 01 00 00 00       	mov    ebx,0x1
c00101a0:	e8 df fe ff ff       	call   c0010084 <Phys::allocatePage()>
c00101a5:	89 da                	mov    edx,ebx
c00101a7:	c1 e2 0c             	shl    edx,0xc
c00101aa:	01 f2                	add    edx,esi
c00101ac:	39 c2                	cmp    edx,eax
c00101ae:	74 24                	je     c00101d4 <Phys::allocateContiguousPages(int)+0x72>
c00101b0:	83 ff 01             	cmp    edi,0x1
c00101b3:	bb 01 00 00 00       	mov    ebx,0x1
c00101b8:	89 c6                	mov    esi,eax
c00101ba:	75 e4                	jne    c00101a0 <Phys::allocateContiguousPages(int)+0x3e>
c00101bc:	f0 83 2d 50 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa50,0x1
c00101c4:	a1 50 fa 02 c0       	mov    eax,ds:0xc002fa50
c00101c9:	85 c0                	test   eax,eax
c00101cb:	75 01                	jne    c00101ce <Phys::allocateContiguousPages(int)+0x6c>
c00101cd:	fb                   	sti    
c00101ce:	5b                   	pop    ebx
c00101cf:	89 f0                	mov    eax,esi
c00101d1:	5e                   	pop    esi
c00101d2:	5f                   	pop    edi
c00101d3:	c3                   	ret    
c00101d4:	83 c3 01             	add    ebx,0x1
c00101d7:	39 fb                	cmp    ebx,edi
c00101d9:	75 b0                	jne    c001018b <Phys::allocateContiguousPages(int)+0x29>
c00101db:	eb df                	jmp    c00101bc <Phys::allocateContiguousPages(int)+0x5a>

c00101dd <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c00101dd:	56                   	push   esi
c00101de:	53                   	push   ebx
c00101df:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00101e3:	39 1d 50 f1 02 c0    	cmp    DWORD PTR ds:0xc002f150,ebx
c00101e9:	73 06                	jae    c00101f1 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c00101eb:	89 1d 50 f1 02 c0    	mov    DWORD PTR ds:0xc002f150,ebx
c00101f1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00101f5:	c1 eb 0c             	shr    ebx,0xc
c00101f8:	c1 e8 0c             	shr    eax,0xc
c00101fb:	39 d8                	cmp    eax,ebx
c00101fd:	73 13                	jae    c0010212 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c00101ff:	6a 00                	push   0x0
c0010201:	50                   	push   eax
c0010202:	8d 70 01             	lea    esi,[eax+0x1]
c0010205:	e8 b5 fd ff ff       	call   c000ffbf <Phys::setPageState(unsigned long, bool)>
c001020a:	39 f3                	cmp    ebx,esi
c001020c:	89 f0                	mov    eax,esi
c001020e:	5a                   	pop    edx
c001020f:	59                   	pop    ecx
c0010210:	75 ed                	jne    c00101ff <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0010212:	5b                   	pop    ebx
c0010213:	5e                   	pop    esi
c0010214:	c3                   	ret    

c0010215 <Phys::physicalMemorySetup(unsigned int)>:
c0010215:	55                   	push   ebp
c0010216:	57                   	push   edi
c0010217:	56                   	push   esi
c0010218:	53                   	push   ebx
c0010219:	31 db                	xor    ebx,ebx
c001021b:	83 ec 40             	sub    esp,0x40
c001021e:	6a 10                	push   0x10
c0010220:	6a 00                	push   0x0
c0010222:	68 60 f1 02 c0       	push   0xc002f160
c0010227:	e8 c4 02 ff ff       	call   c00004f0 <memset>
c001022c:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0010230:	25 00 f0 ff ff       	and    eax,0xfffff000
c0010235:	05 00 10 00 00       	add    eax,0x1000
c001023a:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001023e:	5a                   	pop    edx
c001023f:	59                   	pop    ecx
c0010240:	50                   	push   eax
c0010241:	68 6f 44 02 c0       	push   0xc002446f
c0010246:	e8 1b 6d ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001024b:	83 c4 10             	add    esp,0x10
c001024e:	83 ec 08             	sub    esp,0x8
c0010251:	6a 01                	push   0x1
c0010253:	53                   	push   ebx
c0010254:	83 c3 01             	add    ebx,0x1
c0010257:	e8 63 fd ff ff       	call   c000ffbf <Phys::setPageState(unsigned long, bool)>
c001025c:	83 c4 10             	add    esp,0x10
c001025f:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0010265:	75 e7                	jne    c001024e <Phys::physicalMemorySetup(unsigned int)+0x39>
c0010267:	0f b6 05 14 05 00 c2 	movzx  eax,BYTE PTR ds:0xc2000514
c001026e:	0f b6 15 13 05 00 c2 	movzx  edx,BYTE PTR ds:0xc2000513
c0010275:	c1 e0 08             	shl    eax,0x8
c0010278:	09 c2                	or     edx,eax
c001027a:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001027e:	0f 84 43 01 00 00    	je     c00103c7 <Phys::physicalMemorySetup(unsigned int)+0x1b2>
c0010284:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001028c:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0010291:	e9 82 00 00 00       	jmp    c0010318 <Phys::physicalMemorySetup(unsigned int)+0x103>
c0010296:	ba 00 00 08 00       	mov    edx,0x80000
c001029b:	89 c1                	mov    ecx,eax
c001029d:	39 f2                	cmp    edx,esi
c001029f:	19 f9                	sbb    ecx,edi
c00102a1:	0f 82 c0 00 00 00    	jb     c0010367 <Phys::physicalMemorySetup(unsigned int)+0x152>
c00102a7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00102ab:	89 c5                	mov    ebp,eax
c00102ad:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c00102b1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00102b5:	19 cd                	sbb    ebp,ecx
c00102b7:	0f 83 af 00 00 00    	jae    c001036c <Phys::physicalMemorySetup(unsigned int)+0x157>
c00102bd:	89 d6                	mov    esi,edx
c00102bf:	ba 00 00 0a 00       	mov    edx,0xa0000
c00102c4:	39 f2                	cmp    edx,esi
c00102c6:	89 cf                	mov    edi,ecx
c00102c8:	19 c8                	sbb    eax,ecx
c00102ca:	73 07                	jae    c00102d3 <Phys::physicalMemorySetup(unsigned int)+0xbe>
c00102cc:	be 00 00 0a 00       	mov    esi,0xa0000
c00102d1:	31 ff                	xor    edi,edi
c00102d3:	89 f2                	mov    edx,esi
c00102d5:	b8 ff 1f 00 00       	mov    eax,0x1fff
c00102da:	81 c2 00 00 f8 ff    	add    edx,0xfff80000
c00102e0:	89 f9                	mov    ecx,edi
c00102e2:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00102e6:	83 d1 ff             	adc    ecx,0xffffffff
c00102e9:	39 d0                	cmp    eax,edx
c00102eb:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c00102ef:	b8 00 00 00 00       	mov    eax,0x0
c00102f4:	19 c8                	sbb    eax,ecx
c00102f6:	0f 82 9d 01 00 00    	jb     c0010499 <Phys::physicalMemorySetup(unsigned int)+0x284>
c00102fc:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010300:	83 c3 18             	add    ebx,0x18
c0010303:	83 c6 01             	add    esi,0x1
c0010306:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001030a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001030e:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c0010312:	0f 84 bf 00 00 00    	je     c00103d7 <Phys::physicalMemorySetup(unsigned int)+0x1c2>
c0010318:	8b 33                	mov    esi,DWORD PTR [ebx]
c001031a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001031d:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0010320:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0010323:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0010327:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c001032a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001032e:	01 f0                	add    eax,esi
c0010330:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0010334:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0010338:	55                   	push   ebp
c0010339:	11 fa                	adc    edx,edi
c001033b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001033f:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0010343:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010347:	50                   	push   eax
c0010348:	56                   	push   esi
c0010349:	68 0c 44 02 c0       	push   0xc002440c
c001034e:	e8 13 6c ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0010353:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010357:	83 c4 10             	add    esp,0x10
c001035a:	09 f8                	or     eax,edi
c001035c:	75 79                	jne    c00103d7 <Phys::physicalMemorySetup(unsigned int)+0x1c2>
c001035e:	83 fd 01             	cmp    ebp,0x1
c0010361:	0f 84 2f ff ff ff    	je     c0010296 <Phys::physicalMemorySetup(unsigned int)+0x81>
c0010367:	83 fd 01             	cmp    ebp,0x1
c001036a:	75 90                	jne    c00102fc <Phys::physicalMemorySetup(unsigned int)+0xe7>
c001036c:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0010370:	31 d2                	xor    edx,edx
c0010372:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c0010376:	89 c8                	mov    eax,ecx
c0010378:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001037c:	19 d1                	sbb    ecx,edx
c001037e:	0f 82 78 ff ff ff    	jb     c00102fc <Phys::physicalMemorySetup(unsigned int)+0xe7>
c0010384:	b9 ff 1f 00 00       	mov    ecx,0x1fff
c0010389:	3b 4c 24 18          	cmp    ecx,DWORD PTR [esp+0x18]
c001038d:	b9 00 00 00 00       	mov    ecx,0x0
c0010392:	1b 4c 24 1c          	sbb    ecx,DWORD PTR [esp+0x1c]
c0010396:	0f 83 60 ff ff ff    	jae    c00102fc <Phys::physicalMemorySetup(unsigned int)+0xe7>
c001039c:	39 c6                	cmp    esi,eax
c001039e:	19 d7                	sbb    edi,edx
c00103a0:	0f 83 ff 00 00 00    	jae    c00104a5 <Phys::physicalMemorySetup(unsigned int)+0x290>
c00103a6:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00103aa:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c00103ae:	29 c7                	sub    edi,eax
c00103b0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00103b4:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c00103b8:	19 d5                	sbb    ebp,edx
c00103ba:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c00103be:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00103c2:	e9 de 00 00 00       	jmp    c00104a5 <Phys::physicalMemorySetup(unsigned int)+0x290>
c00103c7:	83 ec 0c             	sub    esp,0xc
c00103ca:	68 87 44 02 c0       	push   0xc0024487
c00103cf:	e8 b6 fa ff ff       	call   c000fe8a <KePanic(char const*)>
c00103d4:	83 c4 10             	add    esp,0x10
c00103d7:	83 ec 08             	sub    esp,0x8
c00103da:	bb 60 00 00 00       	mov    ebx,0x60
c00103df:	6a 00                	push   0x0
c00103e1:	6a 06                	push   0x6
c00103e3:	e8 d7 fb ff ff       	call   c000ffbf <Phys::setPageState(unsigned long, bool)>
c00103e8:	58                   	pop    eax
c00103e9:	5a                   	pop    edx
c00103ea:	6a 00                	push   0x0
c00103ec:	6a 07                	push   0x7
c00103ee:	e8 cc fb ff ff       	call   c000ffbf <Phys::setPageState(unsigned long, bool)>
c00103f3:	8b 0d 5c f1 02 c0    	mov    ecx,DWORD PTR ds:0xc002f15c
c00103f9:	83 c4 10             	add    esp,0x10
c00103fc:	83 c1 02             	add    ecx,0x2
c00103ff:	89 0d 5c f1 02 c0    	mov    DWORD PTR ds:0xc002f15c,ecx
c0010405:	83 ec 08             	sub    esp,0x8
c0010408:	6a 00                	push   0x0
c001040a:	53                   	push   ebx
c001040b:	83 c3 01             	add    ebx,0x1
c001040e:	e8 ac fb ff ff       	call   c000ffbf <Phys::setPageState(unsigned long, bool)>
c0010413:	83 c4 10             	add    esp,0x10
c0010416:	81 fb 80 00 00 00    	cmp    ebx,0x80
c001041c:	75 e7                	jne    c0010405 <Phys::physicalMemorySetup(unsigned int)+0x1f0>
c001041e:	a1 5c f1 02 c0       	mov    eax,ds:0xc002f15c
c0010423:	bb 40 01 00 00       	mov    ebx,0x140
c0010428:	83 c0 20             	add    eax,0x20
c001042b:	a3 5c f1 02 c0       	mov    ds:0xc002f15c,eax
c0010430:	eb 26                	jmp    c0010458 <Phys::physicalMemorySetup(unsigned int)+0x243>
c0010432:	83 ec 08             	sub    esp,0x8
c0010435:	6a 00                	push   0x0
c0010437:	53                   	push   ebx
c0010438:	83 c3 01             	add    ebx,0x1
c001043b:	e8 7f fb ff ff       	call   c000ffbf <Phys::setPageState(unsigned long, bool)>
c0010440:	a1 5c f1 02 c0       	mov    eax,ds:0xc002f15c
c0010445:	83 c4 10             	add    esp,0x10
c0010448:	83 c0 01             	add    eax,0x1
c001044b:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c0010451:	a3 5c f1 02 c0       	mov    ds:0xc002f15c,eax
c0010456:	74 07                	je     c001045f <Phys::physicalMemorySetup(unsigned int)+0x24a>
c0010458:	3d ff 03 00 00       	cmp    eax,0x3ff
c001045d:	7e d3                	jle    c0010432 <Phys::physicalMemorySetup(unsigned int)+0x21d>
c001045f:	bb d0 01 00 00       	mov    ebx,0x1d0
c0010464:	3d ff 07 00 00       	cmp    eax,0x7ff
c0010469:	7f 26                	jg     c0010491 <Phys::physicalMemorySetup(unsigned int)+0x27c>
c001046b:	83 ec 08             	sub    esp,0x8
c001046e:	6a 00                	push   0x0
c0010470:	53                   	push   ebx
c0010471:	83 c3 01             	add    ebx,0x1
c0010474:	e8 46 fb ff ff       	call   c000ffbf <Phys::setPageState(unsigned long, bool)>
c0010479:	a1 5c f1 02 c0       	mov    eax,ds:0xc002f15c
c001047e:	83 c4 10             	add    esp,0x10
c0010481:	83 c0 01             	add    eax,0x1
c0010484:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c001048a:	a3 5c f1 02 c0       	mov    ds:0xc002f15c,eax
c001048f:	75 d3                	jne    c0010464 <Phys::physicalMemorySetup(unsigned int)+0x24f>
c0010491:	83 c4 3c             	add    esp,0x3c
c0010494:	5b                   	pop    ebx
c0010495:	5e                   	pop    esi
c0010496:	5f                   	pop    edi
c0010497:	5d                   	pop    ebp
c0010498:	c3                   	ret    
c0010499:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c001049d:	c7 44 24 20 00 00 08 00 	mov    DWORD PTR [esp+0x20],0x80000
c00104a5:	83 ec 04             	sub    esp,0x4
c00104a8:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00104ac:	56                   	push   esi
c00104ad:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00104b1:	57                   	push   edi
c00104b2:	68 30 44 02 c0       	push   0xc0024430
c00104b7:	e8 aa 6a ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00104bc:	5d                   	pop    ebp
c00104bd:	58                   	pop    eax
c00104be:	56                   	push   esi
c00104bf:	57                   	push   edi
c00104c0:	e8 18 fd ff ff       	call   c00101dd <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c00104c5:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00104c9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00104cd:	83 c4 0c             	add    esp,0xc
c00104d0:	8b 35 5c f1 02 c0    	mov    esi,DWORD PTR ds:0xc002f15c
c00104d6:	0f ac d0 0c          	shrd   eax,edx,0xc
c00104da:	01 f0                	add    eax,esi
c00104dc:	a3 5c f1 02 c0       	mov    ds:0xc002f15c,eax
c00104e1:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00104e8:	52                   	push   edx
c00104e9:	50                   	push   eax
c00104ea:	68 95 44 02 c0       	push   0xc0024495
c00104ef:	e8 72 6a ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00104f4:	83 c4 10             	add    esp,0x10
c00104f7:	e9 00 fe ff ff       	jmp    c00102fc <Phys::physicalMemorySetup(unsigned int)+0xe7>

c00104fc <Pipe::isAtty()>:
c00104fc:	31 c0                	xor    eax,eax
c00104fe:	c3                   	ret    
c00104ff:	90                   	nop

c0010500 <Pipe::~Pipe()>:
c0010500:	83 ec 0c             	sub    esp,0xc
c0010503:	ba f4 44 02 c0       	mov    edx,0xc00244f4
c0010508:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001050c:	89 10                	mov    DWORD PTR [eax],edx
c001050e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010512:	83 ec 0c             	sub    esp,0xc
c0010515:	50                   	push   eax
c0010516:	e8 ab 2b 00 00       	call   c00130c6 <UnixFile::~UnixFile()>
c001051b:	83 c4 10             	add    esp,0x10
c001051e:	90                   	nop
c001051f:	83 c4 0c             	add    esp,0xc
c0010522:	c3                   	ret    
c0010523:	90                   	nop

c0010524 <Pipe::~Pipe()>:
c0010524:	83 ec 0c             	sub    esp,0xc
c0010527:	83 ec 0c             	sub    esp,0xc
c001052a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001052e:	e8 cd ff ff ff       	call   c0010500 <Pipe::~Pipe()>
c0010533:	83 c4 10             	add    esp,0x10
c0010536:	83 ec 08             	sub    esp,0x8
c0010539:	6a 20                	push   0x20
c001053b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001053f:	e8 b1 cd ff ff       	call   c000d2f5 <operator delete(void*, unsigned long)>
c0010544:	83 c4 10             	add    esp,0x10
c0010547:	83 c4 0c             	add    esp,0xc
c001054a:	c3                   	ret    
c001054b:	90                   	nop

c001054c <Pipe::write(unsigned long long, void*, int*)>:
c001054c:	55                   	push   ebp
c001054d:	57                   	push   edi
c001054e:	56                   	push   esi
c001054f:	53                   	push   ebx
c0010550:	83 ec 1c             	sub    esp,0x1c
c0010553:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0010557:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001055b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001055f:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0010562:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010566:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0010569:	89 04 24             	mov    DWORD PTR [esp],eax
c001056c:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0010570:	89 d8                	mov    eax,ebx
c0010572:	89 d6                	mov    esi,edx
c0010574:	89 d7                	mov    edi,edx
c0010576:	c1 ff 1f             	sar    edi,0x1f
c0010579:	03 34 24             	add    esi,DWORD PTR [esp]
c001057c:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0010580:	c1 f8 1f             	sar    eax,0x1f
c0010583:	39 f3                	cmp    ebx,esi
c0010585:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010589:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001058d:	19 f8                	sbb    eax,edi
c001058f:	b8 01 00 00 00       	mov    eax,0x1
c0010594:	72 72                	jb     c0010608 <Pipe::write(unsigned long long, void*, int*)+0xbc>
c0010596:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0010599:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c001059d:	01 d0                	add    eax,edx
c001059f:	99                   	cdq    
c00105a0:	f7 fb                	idiv   ebx
c00105a2:	89 d8                	mov    eax,ebx
c00105a4:	29 d0                	sub    eax,edx
c00105a6:	89 d6                	mov    esi,edx
c00105a8:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00105ab:	89 c3                	mov    ebx,eax
c00105ad:	c1 fb 1f             	sar    ebx,0x1f
c00105b0:	39 c2                	cmp    edx,eax
c00105b2:	19 df                	sbb    edi,ebx
c00105b4:	bb 00 00 00 00       	mov    ebx,0x0
c00105b9:	72 04                	jb     c00105bf <Pipe::write(unsigned long long, void*, int*)+0x73>
c00105bb:	89 d3                	mov    ebx,edx
c00105bd:	29 c3                	sub    ebx,eax
c00105bf:	89 d0                	mov    eax,edx
c00105c1:	29 d8                	sub    eax,ebx
c00105c3:	74 0d                	je     c00105d2 <Pipe::write(unsigned long long, void*, int*)+0x86>
c00105c5:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00105c8:	89 c1                	mov    ecx,eax
c00105ca:	01 f7                	add    edi,esi
c00105cc:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00105d0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00105d2:	85 db                	test   ebx,ebx
c00105d4:	74 0d                	je     c00105e3 <Pipe::write(unsigned long long, void*, int*)+0x97>
c00105d6:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c00105da:	89 d9                	mov    ecx,ebx
c00105dc:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00105df:	89 c6                	mov    esi,eax
c00105e1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00105e3:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c00105e6:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00105eb:	75 10                	jne    c00105fd <Pipe::write(unsigned long long, void*, int*)+0xb1>
c00105ed:	83 ec 0c             	sub    esp,0xc
c00105f0:	68 b1 44 02 c0       	push   0xc00244b1
c00105f5:	e8 90 f8 ff ff       	call   c000fe8a <KePanic(char const*)>
c00105fa:	83 c4 10             	add    esp,0x10
c00105fd:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010601:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0010604:	89 08                	mov    DWORD PTR [eax],ecx
c0010606:	31 c0                	xor    eax,eax
c0010608:	83 c4 1c             	add    esp,0x1c
c001060b:	5b                   	pop    ebx
c001060c:	5e                   	pop    esi
c001060d:	5f                   	pop    edi
c001060e:	5d                   	pop    ebp
c001060f:	c3                   	ret    

c0010610 <Pipe::read(unsigned long long, void*, int*)>:
c0010610:	55                   	push   ebp
c0010611:	57                   	push   edi
c0010612:	56                   	push   esi
c0010613:	53                   	push   ebx
c0010614:	83 ec 1c             	sub    esp,0x1c
c0010617:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001061b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001061f:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0010623:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0010626:	89 c8                	mov    eax,ecx
c0010628:	99                   	cdq    
c0010629:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c001062d:	74 27                	je     c0010656 <Pipe::read(unsigned long long, void*, int*)+0x46>
c001062f:	39 f9                	cmp    ecx,edi
c0010631:	89 d1                	mov    ecx,edx
c0010633:	19 f1                	sbb    ecx,esi
c0010635:	73 1f                	jae    c0010656 <Pipe::read(unsigned long long, void*, int*)+0x46>
c0010637:	fa                   	cli    
c0010638:	ff 05 50 fa 02 c0    	inc    DWORD PTR ds:0xc002fa50
c001063e:	e8 89 6a 00 00       	call   c00170cc <schedule()>
c0010643:	f0 ff 0d 50 fa 02 c0 	lock dec DWORD PTR ds:0xc002fa50
c001064a:	83 3d 50 fa 02 c0 00 	cmp    DWORD PTR ds:0xc002fa50,0x0
c0010651:	75 d0                	jne    c0010623 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0010653:	fb                   	sti    
c0010654:	eb cd                	jmp    c0010623 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0010656:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c001065a:	39 f8                	cmp    eax,edi
c001065c:	89 d1                	mov    ecx,edx
c001065e:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0010662:	19 f1                	sbb    ecx,esi
c0010664:	73 08                	jae    c001066e <Pipe::read(unsigned long long, void*, int*)+0x5e>
c0010666:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001066a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001066e:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c0010671:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c0010674:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0010678:	29 f7                	sub    edi,esi
c001067a:	89 f8                	mov    eax,edi
c001067c:	99                   	cdq    
c001067d:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0010681:	89 d0                	mov    eax,edx
c0010683:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010687:	19 c2                	sbb    edx,eax
c0010689:	89 f8                	mov    eax,edi
c001068b:	0f 42 44 24 08       	cmovb  eax,DWORD PTR [esp+0x8]
c0010690:	89 ea                	mov    edx,ebp
c0010692:	29 c2                	sub    edx,eax
c0010694:	85 c0                	test   eax,eax
c0010696:	74 0b                	je     c00106a3 <Pipe::read(unsigned long long, void*, int*)+0x93>
c0010698:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c001069b:	89 c1                	mov    ecx,eax
c001069d:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00106a1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00106a3:	85 d2                	test   edx,edx
c00106a5:	74 0d                	je     c00106b4 <Pipe::read(unsigned long long, void*, int*)+0xa4>
c00106a7:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c00106ab:	89 d1                	mov    ecx,edx
c00106ad:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c00106b0:	89 c7                	mov    edi,eax
c00106b2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00106b4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00106b7:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c00106ba:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c00106bd:	99                   	cdq    
c00106be:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00106c2:	89 f7                	mov    edi,esi
c00106c4:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00106c8:	c1 ff 1f             	sar    edi,0x1f
c00106cb:	57                   	push   edi
c00106cc:	56                   	push   esi
c00106cd:	52                   	push   edx
c00106ce:	50                   	push   eax
c00106cf:	e8 30 16 01 00       	call   c0021d04 <__umoddi3>
c00106d4:	83 c4 10             	add    esp,0x10
c00106d7:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00106dc:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00106df:	75 10                	jne    c00106f1 <Pipe::read(unsigned long long, void*, int*)+0xe1>
c00106e1:	83 ec 0c             	sub    esp,0xc
c00106e4:	68 ce 44 02 c0       	push   0xc00244ce
c00106e9:	e8 9c f7 ff ff       	call   c000fe8a <KePanic(char const*)>
c00106ee:	83 c4 10             	add    esp,0x10
c00106f1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00106f5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00106f9:	89 10                	mov    DWORD PTR [eax],edx
c00106fb:	83 c4 1c             	add    esp,0x1c
c00106fe:	31 c0                	xor    eax,eax
c0010700:	5b                   	pop    ebx
c0010701:	5e                   	pop    esi
c0010702:	5f                   	pop    edi
c0010703:	5d                   	pop    ebp
c0010704:	c3                   	ret    
c0010705:	90                   	nop

c0010706 <Pipe::Pipe(int)>:
c0010706:	83 ec 0c             	sub    esp,0xc
c0010709:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001070d:	83 ec 08             	sub    esp,0x8
c0010710:	6a 00                	push   0x0
c0010712:	50                   	push   eax
c0010713:	e8 c8 27 00 00       	call   c0012ee0 <UnixFile::UnixFile(int)>
c0010718:	83 c4 10             	add    esp,0x10
c001071b:	ba f4 44 02 c0       	mov    edx,0xc00244f4
c0010720:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010724:	89 10                	mov    DWORD PTR [eax],edx
c0010726:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001072a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001072e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0010731:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010735:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c001073c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010740:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0010747:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001074b:	83 ec 0c             	sub    esp,0xc
c001074e:	50                   	push   eax
c001074f:	e8 28 f4 ff ff       	call   c000fb7c <malloc>
c0010754:	83 c4 10             	add    esp,0x10
c0010757:	89 c2                	mov    edx,eax
c0010759:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001075d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010760:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010764:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c0010768:	90                   	nop
c0010769:	83 c4 0c             	add    esp,0xc
c001076c:	c3                   	ret    

c001076d <KePowerThread(void*)>:
c001076d:	83 ec 0c             	sub    esp,0xc
c0010770:	f0 ff 0d 50 fa 02 c0 	lock dec DWORD PTR ds:0xc002fa50
c0010777:	83 3d 50 fa 02 c0 00 	cmp    DWORD PTR ds:0xc002fa50,0x0
c001077e:	75 01                	jne    c0010781 <KePowerThread(void*)+0x14>
c0010780:	fb                   	sti    
c0010781:	50                   	push   eax
c0010782:	50                   	push   eax
c0010783:	6a 00                	push   0x0
c0010785:	6a 0a                	push   0xa
c0010787:	c6 05 80 f1 02 c0 00 	mov    BYTE PTR ds:0xc002f180,0x0
c001078e:	e8 45 6b 00 00       	call   c00172d8 <sleep(unsigned long long)>
c0010793:	83 c4 10             	add    esp,0x10
c0010796:	83 05 c4 f1 02 c0 0a 	add    DWORD PTR ds:0xc002f1c4,0xa
c001079d:	eb e2                	jmp    c0010781 <KePowerThread(void*)+0x14>

c001079f <KeChangePowerSettings(PowerSettings)>:
c001079f:	57                   	push   edi
c00107a0:	b9 09 00 00 00       	mov    ecx,0x9
c00107a5:	56                   	push   esi
c00107a6:	bf a0 f1 02 c0       	mov    edi,0xc002f1a0
c00107ab:	fc                   	cld    
c00107ac:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00107b0:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00107b2:	5e                   	pop    esi
c00107b3:	5f                   	pop    edi
c00107b4:	c3                   	ret    

c00107b5 <KeUserIOReceived()>:
c00107b5:	c7 05 c4 f1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f1c4,0x0
c00107bf:	c3                   	ret    

c00107c0 <KeHandlePowerButton()>:
c00107c0:	a1 a0 f1 02 c0       	mov    eax,ds:0xc002f1a0
c00107c5:	83 f8 02             	cmp    eax,0x2
c00107c8:	75 05                	jne    c00107cf <KeHandlePowerButton()+0xf>
c00107ca:	e9 77 da ff ff       	jmp    c000e246 <KeShutdown()>
c00107cf:	48                   	dec    eax
c00107d0:	75 05                	jne    c00107d7 <KeHandlePowerButton()+0x17>
c00107d2:	e9 93 da ff ff       	jmp    c000e26a <KeSleep()>
c00107d7:	c3                   	ret    

c00107d8 <KeHandleSleepButton()>:
c00107d8:	a1 a4 f1 02 c0       	mov    eax,ds:0xc002f1a4
c00107dd:	83 f8 02             	cmp    eax,0x2
c00107e0:	75 05                	jne    c00107e7 <KeHandleSleepButton()+0xf>
c00107e2:	e9 5f da ff ff       	jmp    c000e246 <KeShutdown()>
c00107e7:	48                   	dec    eax
c00107e8:	75 05                	jne    c00107ef <KeHandleSleepButton()+0x17>
c00107ea:	e9 7b da ff ff       	jmp    c000e26a <KeSleep()>
c00107ef:	c3                   	ret    

c00107f0 <KeSetupPowerManager()>:
c00107f0:	83 ec 0c             	sub    esp,0xc
c00107f3:	68 f0 00 00 00       	push   0xf0
c00107f8:	6a 00                	push   0x0
c00107fa:	68 6d 07 01 c0       	push   0xc001076d
c00107ff:	ff 35 78 fa 02 c0    	push   DWORD PTR ds:0xc002fa78
c0010805:	c7 05 c4 f1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f1c4,0x0
c001080f:	c6 05 80 f1 02 c0 00 	mov    BYTE PTR ds:0xc002f180,0x0
c0010816:	e8 09 66 00 00       	call   c0016e24 <Process::createThread(void (*)(void*), void*, int)>
c001081b:	c7 05 a0 f1 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc002f1a0,0x2
c0010825:	c7 05 a4 f1 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002f1a4,0x1
c001082f:	c7 05 a8 f1 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc002f1a8,0x3
c0010839:	c7 05 ac f1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f1ac,0x0
c0010843:	c7 05 b8 f1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f1b8,0x0
c001084d:	c7 05 b0 f1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f1b0,0x0
c0010857:	c7 05 bc f1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f1bc,0x0
c0010861:	c7 05 b4 f1 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc002f1b4,0x3c
c001086b:	c7 05 c0 f1 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc002f1c0,0x3c
c0010875:	83 c4 1c             	add    esp,0x1c
c0010878:	c3                   	ret    

c0010879 <KeRand()>:
c0010879:	69 05 c8 f1 02 c0 75 28 00 00 	imul   eax,DWORD PTR ds:0xc002f1c8,0x2875
c0010883:	69 0d cc f1 02 c0 75 b1 e7 a2 	imul   ecx,DWORD PTR ds:0xc002f1cc,0xa2e7b175
c001088d:	53                   	push   ebx
c001088e:	01 c1                	add    ecx,eax
c0010890:	b8 75 b1 e7 a2       	mov    eax,0xa2e7b175
c0010895:	f7 25 c8 f1 02 c0    	mul    DWORD PTR ds:0xc002f1c8
c001089b:	01 ca                	add    edx,ecx
c001089d:	05 ef 04 b5 00       	add    eax,0xb504ef
c00108a2:	a3 c8 f1 02 c0       	mov    ds:0xc002f1c8,eax
c00108a7:	83 d2 00             	adc    edx,0x0
c00108aa:	0f b7 da             	movzx  ebx,dx
c00108ad:	89 1d cc f1 02 c0    	mov    DWORD PTR ds:0xc002f1cc,ebx
c00108b3:	0f ac d8 0e          	shrd   eax,ebx,0xe
c00108b7:	5b                   	pop    ebx
c00108b8:	c3                   	ret    

c00108b9 <KeSeedRand(unsigned int)>:
c00108b9:	53                   	push   ebx
c00108ba:	83 ec 08             	sub    esp,0x8
c00108bd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00108c1:	e8 a2 a0 00 00       	call   c001a968 <HalGetRand()>
c00108c6:	c7 05 cc f1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f1cc,0x0
c00108d0:	31 d8                	xor    eax,ebx
c00108d2:	a3 c8 f1 02 c0       	mov    ds:0xc002f1c8,eax
c00108d7:	e8 9d ff ff ff       	call   c0010879 <KeRand()>
c00108dc:	83 c4 08             	add    esp,0x8
c00108df:	5b                   	pop    ebx
c00108e0:	eb 97                	jmp    c0010879 <KeRand()>

c00108e2 <KeInitRand()>:
c00108e2:	83 ec 0c             	sub    esp,0xc
c00108e5:	e8 89 9e 00 00       	call   c001a773 <HalQueryPerformanceCounter()>
c00108ea:	0f 20 da             	mov    edx,cr3
c00108ed:	0f 22 da             	mov    cr3,edx
c00108f0:	0f 20 da             	mov    edx,cr3
c00108f3:	0f 22 da             	mov    cr3,edx
c00108f6:	0f 20 da             	mov    edx,cr3
c00108f9:	0f 22 da             	mov    cr3,edx
c00108fc:	0f 20 da             	mov    edx,cr3
c00108ff:	0f 22 da             	mov    cr3,edx
c0010902:	83 ec 0c             	sub    esp,0xc
c0010905:	35 03 8a 95 38       	xor    eax,0x38958a03
c001090a:	50                   	push   eax
c001090b:	e8 a9 ff ff ff       	call   c00108b9 <KeSeedRand(unsigned int)>
c0010910:	83 c4 1c             	add    esp,0x1c
c0010913:	c3                   	ret    

c0010914 <KeResolveCompatibilitySymbol(char*)>:
c0010914:	83 ec 0c             	sub    esp,0xc
c0010917:	83 ec 08             	sub    esp,0x8
c001091a:	68 08 45 02 c0       	push   0xc0024508
c001091f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010923:	e8 58 fe fe ff       	call   c0000780 <strcmp>
c0010928:	83 c4 10             	add    esp,0x10
c001092b:	85 c0                	test   eax,eax
c001092d:	0f 94 c0             	sete   al
c0010930:	0f b6 c0             	movzx  eax,al
c0010933:	85 c0                	test   eax,eax
c0010935:	74 0d                	je     c0010944 <KeResolveCompatibilitySymbol(char*)+0x30>
c0010937:	b8 d4 d0 02 c0       	mov    eax,0xc002d0d4
c001093c:	e9 8b 01 00 00       	jmp    c0010acc <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010941:	8d 76 00             	lea    esi,[esi+0x0]
c0010944:	83 ec 08             	sub    esp,0x8
c0010947:	68 11 45 02 c0       	push   0xc0024511
c001094c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010950:	e8 2b fe fe ff       	call   c0000780 <strcmp>
c0010955:	83 c4 10             	add    esp,0x10
c0010958:	85 c0                	test   eax,eax
c001095a:	0f 94 c0             	sete   al
c001095d:	0f b6 c0             	movzx  eax,al
c0010960:	85 c0                	test   eax,eax
c0010962:	74 0c                	je     c0010970 <KeResolveCompatibilitySymbol(char*)+0x5c>
c0010964:	b8 04 1c 02 c0       	mov    eax,0xc0021c04
c0010969:	e9 5e 01 00 00       	jmp    c0010acc <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001096e:	66 90                	xchg   ax,ax
c0010970:	83 ec 08             	sub    esp,0x8
c0010973:	68 1b 45 02 c0       	push   0xc002451b
c0010978:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001097c:	e8 ff fd fe ff       	call   c0000780 <strcmp>
c0010981:	83 c4 10             	add    esp,0x10
c0010984:	85 c0                	test   eax,eax
c0010986:	0f 94 c0             	sete   al
c0010989:	0f b6 c0             	movzx  eax,al
c001098c:	85 c0                	test   eax,eax
c001098e:	74 0c                	je     c001099c <KeResolveCompatibilitySymbol(char*)+0x88>
c0010990:	b8 38 19 02 c0       	mov    eax,0xc0021938
c0010995:	e9 32 01 00 00       	jmp    c0010acc <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001099a:	66 90                	xchg   ax,ax
c001099c:	83 ec 08             	sub    esp,0x8
c001099f:	68 24 45 02 c0       	push   0xc0024524
c00109a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00109a8:	e8 d3 fd fe ff       	call   c0000780 <strcmp>
c00109ad:	83 c4 10             	add    esp,0x10
c00109b0:	85 c0                	test   eax,eax
c00109b2:	0f 94 c0             	sete   al
c00109b5:	0f b6 c0             	movzx  eax,al
c00109b8:	85 c0                	test   eax,eax
c00109ba:	74 0c                	je     c00109c8 <KeResolveCompatibilitySymbol(char*)+0xb4>
c00109bc:	b8 8a fe 00 c0       	mov    eax,0xc000fe8a
c00109c1:	e9 06 01 00 00       	jmp    c0010acc <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00109c6:	66 90                	xchg   ax,ax
c00109c8:	83 ec 08             	sub    esp,0x8
c00109cb:	68 37 45 02 c0       	push   0xc0024537
c00109d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00109d4:	e8 a7 fd fe ff       	call   c0000780 <strcmp>
c00109d9:	83 c4 10             	add    esp,0x10
c00109dc:	85 c0                	test   eax,eax
c00109de:	0f 94 c0             	sete   al
c00109e1:	0f b6 c0             	movzx  eax,al
c00109e4:	85 c0                	test   eax,eax
c00109e6:	74 0c                	je     c00109f4 <KeResolveCompatibilitySymbol(char*)+0xe0>
c00109e8:	b8 35 d2 00 c0       	mov    eax,0xc000d235
c00109ed:	e9 da 00 00 00       	jmp    c0010acc <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00109f2:	66 90                	xchg   ax,ax
c00109f4:	83 ec 08             	sub    esp,0x8
c00109f7:	68 54 45 02 c0       	push   0xc0024554
c00109fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a00:	e8 7b fd fe ff       	call   c0000780 <strcmp>
c0010a05:	83 c4 10             	add    esp,0x10
c0010a08:	85 c0                	test   eax,eax
c0010a0a:	0f 94 c0             	sete   al
c0010a0d:	0f b6 c0             	movzx  eax,al
c0010a10:	85 c0                	test   eax,eax
c0010a12:	74 0c                	je     c0010a20 <KeResolveCompatibilitySymbol(char*)+0x10c>
c0010a14:	b8 04 1d 02 c0       	mov    eax,0xc0021d04
c0010a19:	e9 ae 00 00 00       	jmp    c0010acc <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010a1e:	66 90                	xchg   ax,ax
c0010a20:	83 ec 08             	sub    esp,0x8
c0010a23:	68 5e 45 02 c0       	push   0xc002455e
c0010a28:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a2c:	e8 4f fd fe ff       	call   c0000780 <strcmp>
c0010a31:	83 c4 10             	add    esp,0x10
c0010a34:	85 c0                	test   eax,eax
c0010a36:	0f 94 c0             	sete   al
c0010a39:	0f b6 c0             	movzx  eax,al
c0010a3c:	85 c0                	test   eax,eax
c0010a3e:	74 0c                	je     c0010a4c <KeResolveCompatibilitySymbol(char*)+0x138>
c0010a40:	b8 84 1a 02 c0       	mov    eax,0xc0021a84
c0010a45:	e9 82 00 00 00       	jmp    c0010acc <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010a4a:	66 90                	xchg   ax,ax
c0010a4c:	83 ec 08             	sub    esp,0x8
c0010a4f:	68 67 45 02 c0       	push   0xc0024567
c0010a54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a58:	e8 23 fd fe ff       	call   c0000780 <strcmp>
c0010a5d:	83 c4 10             	add    esp,0x10
c0010a60:	85 c0                	test   eax,eax
c0010a62:	0f 94 c0             	sete   al
c0010a65:	0f b6 c0             	movzx  eax,al
c0010a68:	85 c0                	test   eax,eax
c0010a6a:	74 08                	je     c0010a74 <KeResolveCompatibilitySymbol(char*)+0x160>
c0010a6c:	b8 d8 d0 02 c0       	mov    eax,0xc002d0d8
c0010a71:	eb 59                	jmp    c0010acc <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010a73:	90                   	nop
c0010a74:	83 ec 08             	sub    esp,0x8
c0010a77:	68 7f 45 02 c0       	push   0xc002457f
c0010a7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a80:	e8 fb fc fe ff       	call   c0000780 <strcmp>
c0010a85:	83 c4 10             	add    esp,0x10
c0010a88:	85 c0                	test   eax,eax
c0010a8a:	0f 94 c0             	sete   al
c0010a8d:	0f b6 c0             	movzx  eax,al
c0010a90:	85 c0                	test   eax,eax
c0010a92:	74 08                	je     c0010a9c <KeResolveCompatibilitySymbol(char*)+0x188>
c0010a94:	b8 d8 d0 02 c0       	mov    eax,0xc002d0d8
c0010a99:	eb 31                	jmp    c0010acc <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010a9b:	90                   	nop
c0010a9c:	83 ec 08             	sub    esp,0x8
c0010a9f:	68 8c 45 02 c0       	push   0xc002458c
c0010aa4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010aa8:	e8 d3 fc fe ff       	call   c0000780 <strcmp>
c0010aad:	83 c4 10             	add    esp,0x10
c0010ab0:	85 c0                	test   eax,eax
c0010ab2:	0f 94 c0             	sete   al
c0010ab5:	0f b6 c0             	movzx  eax,al
c0010ab8:	85 c0                	test   eax,eax
c0010aba:	74 08                	je     c0010ac4 <KeResolveCompatibilitySymbol(char*)+0x1b0>
c0010abc:	b8 d9 d0 02 c0       	mov    eax,0xc002d0d9
c0010ac1:	eb 09                	jmp    c0010acc <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010ac3:	90                   	nop
c0010ac4:	b8 00 00 00 00       	mov    eax,0x0
c0010ac9:	8d 76 00             	lea    esi,[esi+0x0]
c0010acc:	83 c4 0c             	add    esp,0xc
c0010acf:	c3                   	ret    

c0010ad0 <Semaphore::Semaphore(int)>:
c0010ad0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010ad4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010ad8:	89 10                	mov    DWORD PTR [eax],edx
c0010ada:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010ade:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0010ae5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010ae9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010af0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010af4:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0010afb:	90                   	nop
c0010afc:	c3                   	ret    
c0010afd:	90                   	nop
c0010afe:	66 90                	xchg   ax,ax

c0010b00 <Semaphore::tryAcquire()>:
c0010b00:	83 ec 0c             	sub    esp,0xc
c0010b03:	fa                   	cli    
c0010b04:	a1 50 fa 02 c0       	mov    eax,ds:0xc002fa50
c0010b09:	83 c0 01             	add    eax,0x1
c0010b0c:	a3 50 fa 02 c0       	mov    ds:0xc002fa50,eax
c0010b11:	a1 4c fa 02 c0       	mov    eax,ds:0xc002fa4c
c0010b16:	83 c0 01             	add    eax,0x1
c0010b19:	a3 4c fa 02 c0       	mov    ds:0xc002fa4c,eax
c0010b1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b22:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0010b25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b29:	8b 00                	mov    eax,DWORD PTR [eax]
c0010b2b:	39 c2                	cmp    edx,eax
c0010b2d:	7d 59                	jge    c0010b88 <Semaphore::tryAcquire()+0x88>
c0010b2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b33:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010b36:	8d 50 01             	lea    edx,[eax+0x1]
c0010b39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b3d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010b40:	a1 4c fa 02 c0       	mov    eax,ds:0xc002fa4c
c0010b45:	83 e8 01             	sub    eax,0x1
c0010b48:	a3 4c fa 02 c0       	mov    ds:0xc002fa4c,eax
c0010b4d:	a1 4c fa 02 c0       	mov    eax,ds:0xc002fa4c
c0010b52:	85 c0                	test   eax,eax
c0010b54:	75 1a                	jne    c0010b70 <Semaphore::tryAcquire()+0x70>
c0010b56:	a1 48 fa 02 c0       	mov    eax,ds:0xc002fa48
c0010b5b:	85 c0                	test   eax,eax
c0010b5d:	74 11                	je     c0010b70 <Semaphore::tryAcquire()+0x70>
c0010b5f:	c7 05 48 fa 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fa48,0x0
c0010b69:	e8 5e 65 00 00       	call   c00170cc <schedule()>
c0010b6e:	66 90                	xchg   ax,ax
c0010b70:	f0 83 2d 50 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa50,0x1
c0010b78:	a1 50 fa 02 c0       	mov    eax,ds:0xc002fa50
c0010b7d:	85 c0                	test   eax,eax
c0010b7f:	75 03                	jne    c0010b84 <Semaphore::tryAcquire()+0x84>
c0010b81:	fb                   	sti    
c0010b82:	66 90                	xchg   ax,ax
c0010b84:	b0 01                	mov    al,0x1
c0010b86:	eb 48                	jmp    c0010bd0 <Semaphore::tryAcquire()+0xd0>
c0010b88:	a1 4c fa 02 c0       	mov    eax,ds:0xc002fa4c
c0010b8d:	83 e8 01             	sub    eax,0x1
c0010b90:	a3 4c fa 02 c0       	mov    ds:0xc002fa4c,eax
c0010b95:	a1 4c fa 02 c0       	mov    eax,ds:0xc002fa4c
c0010b9a:	85 c0                	test   eax,eax
c0010b9c:	75 1a                	jne    c0010bb8 <Semaphore::tryAcquire()+0xb8>
c0010b9e:	a1 48 fa 02 c0       	mov    eax,ds:0xc002fa48
c0010ba3:	85 c0                	test   eax,eax
c0010ba5:	74 11                	je     c0010bb8 <Semaphore::tryAcquire()+0xb8>
c0010ba7:	c7 05 48 fa 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fa48,0x0
c0010bb1:	e8 16 65 00 00       	call   c00170cc <schedule()>
c0010bb6:	66 90                	xchg   ax,ax
c0010bb8:	f0 83 2d 50 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa50,0x1
c0010bc0:	a1 50 fa 02 c0       	mov    eax,ds:0xc002fa50
c0010bc5:	85 c0                	test   eax,eax
c0010bc7:	75 03                	jne    c0010bcc <Semaphore::tryAcquire()+0xcc>
c0010bc9:	fb                   	sti    
c0010bca:	66 90                	xchg   ax,ax
c0010bcc:	b0 00                	mov    al,0x0
c0010bce:	66 90                	xchg   ax,ax
c0010bd0:	83 c4 0c             	add    esp,0xc
c0010bd3:	c3                   	ret    

c0010bd4 <Semaphore::assertLocked(char const*)>:
c0010bd4:	83 ec 0c             	sub    esp,0xc
c0010bd7:	fa                   	cli    
c0010bd8:	a1 50 fa 02 c0       	mov    eax,ds:0xc002fa50
c0010bdd:	83 c0 01             	add    eax,0x1
c0010be0:	a3 50 fa 02 c0       	mov    ds:0xc002fa50,eax
c0010be5:	a1 4c fa 02 c0       	mov    eax,ds:0xc002fa4c
c0010bea:	83 c0 01             	add    eax,0x1
c0010bed:	a3 4c fa 02 c0       	mov    ds:0xc002fa4c,eax
c0010bf2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010bf6:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0010bf9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010bfd:	8b 00                	mov    eax,DWORD PTR [eax]
c0010bff:	39 c2                	cmp    edx,eax
c0010c01:	7d 11                	jge    c0010c14 <Semaphore::assertLocked(char const*)+0x40>
c0010c03:	83 ec 0c             	sub    esp,0xc
c0010c06:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0010c0a:	e8 7b f2 ff ff       	call   c000fe8a <KePanic(char const*)>
c0010c0f:	83 c4 10             	add    esp,0x10
c0010c12:	66 90                	xchg   ax,ax
c0010c14:	a1 4c fa 02 c0       	mov    eax,ds:0xc002fa4c
c0010c19:	83 e8 01             	sub    eax,0x1
c0010c1c:	a3 4c fa 02 c0       	mov    ds:0xc002fa4c,eax
c0010c21:	a1 4c fa 02 c0       	mov    eax,ds:0xc002fa4c
c0010c26:	85 c0                	test   eax,eax
c0010c28:	75 1a                	jne    c0010c44 <Semaphore::assertLocked(char const*)+0x70>
c0010c2a:	a1 48 fa 02 c0       	mov    eax,ds:0xc002fa48
c0010c2f:	85 c0                	test   eax,eax
c0010c31:	74 11                	je     c0010c44 <Semaphore::assertLocked(char const*)+0x70>
c0010c33:	c7 05 48 fa 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fa48,0x0
c0010c3d:	e8 8a 64 00 00       	call   c00170cc <schedule()>
c0010c42:	66 90                	xchg   ax,ax
c0010c44:	f0 83 2d 50 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa50,0x1
c0010c4c:	a1 50 fa 02 c0       	mov    eax,ds:0xc002fa50
c0010c51:	85 c0                	test   eax,eax
c0010c53:	75 03                	jne    c0010c58 <Semaphore::assertLocked(char const*)+0x84>
c0010c55:	fb                   	sti    
c0010c56:	66 90                	xchg   ax,ax
c0010c58:	90                   	nop
c0010c59:	83 c4 0c             	add    esp,0xc
c0010c5c:	c3                   	ret    
c0010c5d:	90                   	nop
c0010c5e:	66 90                	xchg   ax,ax

c0010c60 <Semaphore::acquire(int)>:
c0010c60:	83 ec 1c             	sub    esp,0x1c
c0010c63:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0010c68:	0f 84 ae 00 00 00    	je     c0010d1c <Semaphore::acquire(int)+0xbc>
c0010c6e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010c76:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c0010c7b:	90                   	nop
c0010c7c:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0010c81:	85 c0                	test   eax,eax
c0010c83:	0f 84 87 00 00 00    	je     c0010d10 <Semaphore::acquire(int)+0xb0>
c0010c89:	83 ec 0c             	sub    esp,0xc
c0010c8c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010c90:	e8 6b fe ff ff       	call   c0010b00 <Semaphore::tryAcquire()>
c0010c95:	83 c4 10             	add    esp,0x10
c0010c98:	83 f0 01             	xor    eax,0x1
c0010c9b:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0010c9f:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0010ca3:	83 f0 01             	xor    eax,0x1
c0010ca6:	0f b6 c0             	movzx  eax,al
c0010ca9:	85 c0                	test   eax,eax
c0010cab:	75 5f                	jne    c0010d0c <Semaphore::acquire(int)+0xac>
c0010cad:	83 7c 24 24 28       	cmp    DWORD PTR [esp+0x24],0x28
c0010cb2:	7f 34                	jg     c0010ce8 <Semaphore::acquire(int)+0x88>
c0010cb4:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0010cb8:	89 d0                	mov    eax,edx
c0010cba:	c1 e0 02             	shl    eax,0x2
c0010cbd:	01 d0                	add    eax,edx
c0010cbf:	d1 e0                	shl    eax,1
c0010cc1:	89 c2                	mov    edx,eax
c0010cc3:	c1 fa 1f             	sar    edx,0x1f
c0010cc6:	83 ec 08             	sub    esp,0x8
c0010cc9:	52                   	push   edx
c0010cca:	50                   	push   eax
c0010ccb:	e8 f0 65 00 00       	call   c00172c0 <milliTenthSleep(unsigned long long)>
c0010cd0:	83 c4 10             	add    esp,0x10
c0010cd3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010cd7:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0010cdb:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0010ce3:	eb 97                	jmp    c0010c7c <Semaphore::acquire(int)+0x1c>
c0010ce5:	8d 76 00             	lea    esi,[esi+0x0]
c0010ce8:	83 ec 08             	sub    esp,0x8
c0010ceb:	6a 00                	push   0x0
c0010ced:	68 90 01 00 00       	push   0x190
c0010cf2:	e8 c9 65 00 00       	call   c00172c0 <milliTenthSleep(unsigned long long)>
c0010cf7:	83 c4 10             	add    esp,0x10
c0010cfa:	83 44 24 0c 28       	add    DWORD PTR [esp+0xc],0x28
c0010cff:	83 6c 24 24 28       	sub    DWORD PTR [esp+0x24],0x28
c0010d04:	e9 73 ff ff ff       	jmp    c0010c7c <Semaphore::acquire(int)+0x1c>
c0010d09:	8d 76 00             	lea    esi,[esi+0x0]
c0010d0c:	90                   	nop
c0010d0d:	8d 76 00             	lea    esi,[esi+0x0]
c0010d10:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010d14:	e9 fb 00 00 00       	jmp    c0010e14 <Semaphore::acquire(int)+0x1b4>
c0010d19:	8d 76 00             	lea    esi,[esi+0x0]
c0010d1c:	fa                   	cli    
c0010d1d:	a1 50 fa 02 c0       	mov    eax,ds:0xc002fa50
c0010d22:	83 c0 01             	add    eax,0x1
c0010d25:	a3 50 fa 02 c0       	mov    ds:0xc002fa50,eax
c0010d2a:	a1 4c fa 02 c0       	mov    eax,ds:0xc002fa4c
c0010d2f:	83 c0 01             	add    eax,0x1
c0010d32:	a3 4c fa 02 c0       	mov    ds:0xc002fa4c,eax
c0010d37:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010d3b:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0010d3e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010d42:	8b 00                	mov    eax,DWORD PTR [eax]
c0010d44:	39 c2                	cmp    edx,eax
c0010d46:	7d 14                	jge    c0010d5c <Semaphore::acquire(int)+0xfc>
c0010d48:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010d4c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010d4f:	8d 50 01             	lea    edx,[eax+0x1]
c0010d52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010d56:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010d59:	eb 6d                	jmp    c0010dc8 <Semaphore::acquire(int)+0x168>
c0010d5b:	90                   	nop
c0010d5c:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0010d61:	8b 00                	mov    eax,DWORD PTR [eax]
c0010d63:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0010d6a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010d6e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010d71:	85 c0                	test   eax,eax
c0010d73:	75 13                	jne    c0010d88 <Semaphore::acquire(int)+0x128>
c0010d75:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0010d7a:	8b 10                	mov    edx,DWORD PTR [eax]
c0010d7c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010d80:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010d83:	eb 17                	jmp    c0010d9c <Semaphore::acquire(int)+0x13c>
c0010d85:	8d 76 00             	lea    esi,[esi+0x0]
c0010d88:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0010d8d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010d91:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0010d94:	8b 12                	mov    edx,DWORD PTR [edx]
c0010d96:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0010d99:	8d 76 00             	lea    esi,[esi+0x0]
c0010d9c:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0010da1:	8b 10                	mov    edx,DWORD PTR [eax]
c0010da3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010da7:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0010daa:	83 ec 0c             	sub    esp,0xc
c0010dad:	68 9c 45 02 c0       	push   0xc002459c
c0010db2:	e8 af 61 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0010db7:	83 c4 10             	add    esp,0x10
c0010dba:	83 ec 0c             	sub    esp,0xc
c0010dbd:	6a 05                	push   0x5
c0010dbf:	e8 c8 63 00 00       	call   c001718c <blockTask(TaskState)>
c0010dc4:	83 c4 10             	add    esp,0x10
c0010dc7:	90                   	nop
c0010dc8:	a1 4c fa 02 c0       	mov    eax,ds:0xc002fa4c
c0010dcd:	83 e8 01             	sub    eax,0x1
c0010dd0:	a3 4c fa 02 c0       	mov    ds:0xc002fa4c,eax
c0010dd5:	a1 4c fa 02 c0       	mov    eax,ds:0xc002fa4c
c0010dda:	85 c0                	test   eax,eax
c0010ddc:	75 1a                	jne    c0010df8 <Semaphore::acquire(int)+0x198>
c0010dde:	a1 48 fa 02 c0       	mov    eax,ds:0xc002fa48
c0010de3:	85 c0                	test   eax,eax
c0010de5:	74 11                	je     c0010df8 <Semaphore::acquire(int)+0x198>
c0010de7:	c7 05 48 fa 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fa48,0x0
c0010df1:	e8 d6 62 00 00       	call   c00170cc <schedule()>
c0010df6:	66 90                	xchg   ax,ax
c0010df8:	f0 83 2d 50 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa50,0x1
c0010e00:	a1 50 fa 02 c0       	mov    eax,ds:0xc002fa50
c0010e05:	85 c0                	test   eax,eax
c0010e07:	75 03                	jne    c0010e0c <Semaphore::acquire(int)+0x1ac>
c0010e09:	fb                   	sti    
c0010e0a:	66 90                	xchg   ax,ax
c0010e0c:	b8 00 00 00 00       	mov    eax,0x0
c0010e11:	8d 76 00             	lea    esi,[esi+0x0]
c0010e14:	83 c4 1c             	add    esp,0x1c
c0010e17:	c3                   	ret    

c0010e18 <Semaphore::acquire()>:
c0010e18:	83 ec 0c             	sub    esp,0xc
c0010e1b:	83 ec 08             	sub    esp,0x8
c0010e1e:	6a 00                	push   0x0
c0010e20:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e24:	e8 37 fe ff ff       	call   c0010c60 <Semaphore::acquire(int)>
c0010e29:	83 c4 10             	add    esp,0x10
c0010e2c:	90                   	nop
c0010e2d:	83 c4 0c             	add    esp,0xc
c0010e30:	c3                   	ret    
c0010e31:	90                   	nop
c0010e32:	66 90                	xchg   ax,ax

c0010e34 <Semaphore::release()>:
c0010e34:	83 ec 1c             	sub    esp,0x1c
c0010e37:	fa                   	cli    
c0010e38:	a1 50 fa 02 c0       	mov    eax,ds:0xc002fa50
c0010e3d:	83 c0 01             	add    eax,0x1
c0010e40:	a3 50 fa 02 c0       	mov    ds:0xc002fa50,eax
c0010e45:	a1 4c fa 02 c0       	mov    eax,ds:0xc002fa4c
c0010e4a:	83 c0 01             	add    eax,0x1
c0010e4d:	a3 4c fa 02 c0       	mov    ds:0xc002fa4c,eax
c0010e52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010e56:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e59:	85 c0                	test   eax,eax
c0010e5b:	74 2b                	je     c0010e88 <Semaphore::release()+0x54>
c0010e5d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010e61:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e64:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010e68:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010e6c:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0010e6f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010e73:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010e76:	83 ec 0c             	sub    esp,0xc
c0010e79:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010e7d:	e8 a2 65 00 00       	call   c0017424 <unblockTask(ThreadControlBlock*)>
c0010e82:	83 c4 10             	add    esp,0x10
c0010e85:	eb 15                	jmp    c0010e9c <Semaphore::release()+0x68>
c0010e87:	90                   	nop
c0010e88:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010e8c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010e8f:	8d 50 ff             	lea    edx,[eax-0x1]
c0010e92:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010e96:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010e99:	8d 76 00             	lea    esi,[esi+0x0]
c0010e9c:	a1 4c fa 02 c0       	mov    eax,ds:0xc002fa4c
c0010ea1:	83 e8 01             	sub    eax,0x1
c0010ea4:	a3 4c fa 02 c0       	mov    ds:0xc002fa4c,eax
c0010ea9:	a1 4c fa 02 c0       	mov    eax,ds:0xc002fa4c
c0010eae:	85 c0                	test   eax,eax
c0010eb0:	75 1a                	jne    c0010ecc <Semaphore::release()+0x98>
c0010eb2:	a1 48 fa 02 c0       	mov    eax,ds:0xc002fa48
c0010eb7:	85 c0                	test   eax,eax
c0010eb9:	74 11                	je     c0010ecc <Semaphore::release()+0x98>
c0010ebb:	c7 05 48 fa 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fa48,0x0
c0010ec5:	e8 02 62 00 00       	call   c00170cc <schedule()>
c0010eca:	66 90                	xchg   ax,ax
c0010ecc:	f0 83 2d 50 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa50,0x1
c0010ed4:	a1 50 fa 02 c0       	mov    eax,ds:0xc002fa50
c0010ed9:	85 c0                	test   eax,eax
c0010edb:	75 03                	jne    c0010ee0 <Semaphore::release()+0xac>
c0010edd:	fb                   	sti    
c0010ede:	66 90                	xchg   ax,ax
c0010ee0:	90                   	nop
c0010ee1:	83 c4 1c             	add    esp,0x1c
c0010ee4:	c3                   	ret    

c0010ee5 <KiSigKill(int)>:
c0010ee5:	83 ec 0c             	sub    esp,0xc
c0010ee8:	6a 00                	push   0x0
c0010eea:	6a 00                	push   0x0
c0010eec:	6a ff                	push   0xffffffff
c0010eee:	6a 01                	push   0x1
c0010ef0:	e8 5d 71 01 00       	call   c0028052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0010ef5:	83 c4 1c             	add    esp,0x1c
c0010ef8:	c3                   	ret    

c0010ef9 <KiDefaultSignalHandlerIgnore(int)>:
c0010ef9:	c3                   	ret    

c0010efa <KiDefaultSignalHandlerPause(int)>:
c0010efa:	57                   	push   edi
c0010efb:	b9 07 00 00 00       	mov    ecx,0x7
c0010f00:	56                   	push   esi
c0010f01:	be f7 45 02 c0       	mov    esi,0xc00245f7
c0010f06:	83 ec 24             	sub    esp,0x24
c0010f09:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0010f0d:	fc                   	cld    
c0010f0e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010f10:	8d 44 24 04          	lea    eax,[esp+0x4]
c0010f14:	50                   	push   eax
c0010f15:	6a 00                	push   0x0
c0010f17:	6a 00                	push   0x0
c0010f19:	6a 27                	push   0x27
c0010f1b:	e8 32 71 01 00       	call   c0028052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0010f20:	83 c4 34             	add    esp,0x34
c0010f23:	5e                   	pop    esi
c0010f24:	5f                   	pop    edi
c0010f25:	c3                   	ret    

c0010f26 <KiDefaultSignalHandlerResume(int)>:
c0010f26:	57                   	push   edi
c0010f27:	b9 1d 00 00 00       	mov    ecx,0x1d
c0010f2c:	56                   	push   esi
c0010f2d:	be 13 46 02 c0       	mov    esi,0xc0024613
c0010f32:	83 ec 24             	sub    esp,0x24
c0010f35:	8d 7c 24 03          	lea    edi,[esp+0x3]
c0010f39:	fc                   	cld    
c0010f3a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010f3c:	8d 44 24 03          	lea    eax,[esp+0x3]
c0010f40:	50                   	push   eax
c0010f41:	6a 00                	push   0x0
c0010f43:	6a 00                	push   0x0
c0010f45:	6a 27                	push   0x27
c0010f47:	e8 06 71 01 00       	call   c0028052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0010f4c:	83 c4 34             	add    esp,0x34
c0010f4f:	5e                   	pop    esi
c0010f50:	5f                   	pop    edi
c0010f51:	c3                   	ret    

c0010f52 <KeDeinitSignals(SigHandlerBlock*)>:
c0010f52:	e9 35 ec ff ff       	jmp    c000fb8c <free>

c0010f57 <KeInitSignals()>:
c0010f57:	53                   	push   ebx
c0010f58:	83 ec 14             	sub    esp,0x14
c0010f5b:	68 c8 00 00 00       	push   0xc8
c0010f60:	e8 17 ec ff ff       	call   c000fb7c <malloc>
c0010f65:	83 c4 0c             	add    esp,0xc
c0010f68:	6a 04                	push   0x4
c0010f6a:	6a 00                	push   0x0
c0010f6c:	50                   	push   eax
c0010f6d:	89 c3                	mov    ebx,eax
c0010f6f:	e8 7c f5 fe ff       	call   c00004f0 <memset>
c0010f74:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c0010f7a:	83 c4 0c             	add    esp,0xc
c0010f7d:	c7 83 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xbc],0x0
c0010f87:	c7 83 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xc0],0x0
c0010f91:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c0010f98:	6a 20                	push   0x20
c0010f9a:	6a 00                	push   0x0
c0010f9c:	50                   	push   eax
c0010f9d:	e8 4e f5 fe ff       	call   c00004f0 <memset>
c0010fa2:	83 c4 0c             	add    esp,0xc
c0010fa5:	6a 44                	push   0x44
c0010fa7:	6a 00                	push   0x0
c0010fa9:	53                   	push   ebx
c0010faa:	e8 41 f5 fe ff       	call   c00004f0 <memset>
c0010faf:	8d 83 88 00 00 00    	lea    eax,[ebx+0x88]
c0010fb5:	83 c4 0c             	add    esp,0xc
c0010fb8:	6a 11                	push   0x11
c0010fba:	6a 00                	push   0x0
c0010fbc:	50                   	push   eax
c0010fbd:	e8 2e f5 fe ff       	call   c00004f0 <memset>
c0010fc2:	83 c4 18             	add    esp,0x18
c0010fc5:	89 d8                	mov    eax,ebx
c0010fc7:	5b                   	pop    ebx
c0010fc8:	c3                   	ret    

c0010fc9 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c0010fc9:	53                   	push   ebx
c0010fca:	b8 01 00 00 00       	mov    eax,0x1
c0010fcf:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010fd3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010fd7:	83 f9 10             	cmp    ecx,0x10
c0010fda:	7f 21                	jg     c0010ffd <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c0010fdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010fe0:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c0010fe3:	89 03                	mov    DWORD PTR [ebx],eax
c0010fe5:	b8 01 00 00 00       	mov    eax,0x1
c0010fea:	d3 e0                	shl    eax,cl
c0010fec:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0010ff0:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0010ff3:	31 c0                	xor    eax,eax
c0010ff5:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c0010ffd:	5b                   	pop    ebx
c0010ffe:	c3                   	ret    

c0010fff <KeRaiseSignal(SigHandlerBlock*, int)>:
c0010fff:	55                   	push   ebp
c0011000:	57                   	push   edi
c0011001:	bf 08 00 00 00       	mov    edi,0x8
c0011006:	56                   	push   esi
c0011007:	53                   	push   ebx
c0011008:	83 ec 14             	sub    esp,0x14
c001100b:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001100f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011013:	68 30 46 02 c0       	push   0xc0024630
c0011018:	e8 49 5f ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001101d:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c0011023:	83 c4 10             	add    esp,0x10
c0011026:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c001102d:	31 c9                	xor    ecx,ecx
c001102f:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0011033:	99                   	cdq    
c0011034:	f7 ff                	idiv   edi
c0011036:	8d 42 24             	lea    eax,[edx+0x24]
c0011039:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c001103d:	85 f6                	test   esi,esi
c001103f:	75 1a                	jne    c001105b <KeRaiseSignal(SigHandlerBlock*, int)+0x5c>
c0011041:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0011045:	89 7c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],edi
c0011049:	50                   	push   eax
c001104a:	50                   	push   eax
c001104b:	52                   	push   edx
c001104c:	68 46 46 02 c0       	push   0xc0024646
c0011051:	e8 10 5f ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0011056:	83 c4 10             	add    esp,0x10
c0011059:	eb 1b                	jmp    c0011076 <KeRaiseSignal(SigHandlerBlock*, int)+0x77>
c001105b:	41                   	inc    ecx
c001105c:	83 f9 08             	cmp    ecx,0x8
c001105f:	75 ce                	jne    c001102f <KeRaiseSignal(SigHandlerBlock*, int)+0x30>
c0011061:	83 ec 0c             	sub    esp,0xc
c0011064:	be 01 00 00 00       	mov    esi,0x1
c0011069:	68 67 46 02 c0       	push   0xc0024667
c001106e:	e8 f3 5e ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0011073:	83 c4 10             	add    esp,0x10
c0011076:	83 c4 0c             	add    esp,0xc
c0011079:	89 f0                	mov    eax,esi
c001107b:	5b                   	pop    ebx
c001107c:	5e                   	pop    esi
c001107d:	5f                   	pop    edi
c001107e:	5d                   	pop    ebp
c001107f:	c3                   	ret    

c0011080 <KeCheckSignal(SigHandlerBlock*, int*)>:
c0011080:	55                   	push   ebp
c0011081:	57                   	push   edi
c0011082:	56                   	push   esi
c0011083:	53                   	push   ebx
c0011084:	83 ec 1c             	sub    esp,0x1c
c0011087:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001108b:	85 db                	test   ebx,ebx
c001108d:	0f 84 e0 00 00 00    	je     c0011173 <KeCheckSignal(SigHandlerBlock*, int*)+0xf3>
c0011093:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c001109a:	0f 84 d3 00 00 00    	je     c0011173 <KeCheckSignal(SigHandlerBlock*, int*)+0xf3>
c00110a0:	31 c9                	xor    ecx,ecx
c00110a2:	bf 08 00 00 00       	mov    edi,0x8
c00110a7:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c00110ad:	8d 04 0e             	lea    eax,[esi+ecx*1]
c00110b0:	99                   	cdq    
c00110b1:	f7 ff                	idiv   edi
c00110b3:	8b ac 93 9c 00 00 00 	mov    ebp,DWORD PTR [ebx+edx*4+0x9c]
c00110ba:	85 ed                	test   ebp,ebp
c00110bc:	0f 84 d2 00 00 00    	je     c0011194 <KeCheckSignal(SigHandlerBlock*, int*)+0x114>
c00110c2:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c00110c8:	89 e9                	mov    ecx,ebp
c00110ca:	bf 01 00 00 00       	mov    edi,0x1
c00110cf:	d3 e7                	shl    edi,cl
c00110d1:	31 c9                	xor    ecx,ecx
c00110d3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00110d7:	b8 01 00 00 00       	mov    eax,0x1
c00110dc:	d3 e0                	shl    eax,cl
c00110de:	85 44 24 0c          	test   DWORD PTR [esp+0xc],eax
c00110e2:	74 0a                	je     c00110ee <KeCheckSignal(SigHandlerBlock*, int*)+0x6e>
c00110e4:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c00110e8:	0f 85 85 00 00 00    	jne    c0011173 <KeCheckSignal(SigHandlerBlock*, int*)+0xf3>
c00110ee:	41                   	inc    ecx
c00110ef:	83 f9 11             	cmp    ecx,0x11
c00110f2:	75 e3                	jne    c00110d7 <KeCheckSignal(SigHandlerBlock*, int*)+0x57>
c00110f4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00110f8:	46                   	inc    esi
c00110f9:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c00110ff:	c7 84 93 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+edx*4+0x9c],0x0
c001110a:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c0011111:	09 f8                	or     eax,edi
c0011113:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c0011119:	31 c0                	xor    eax,eax
c001111b:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c0011123:	74 09                	je     c001112e <KeCheckSignal(SigHandlerBlock*, int*)+0xae>
c0011125:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c001112c:	eb 06                	jmp    c0011134 <KeCheckSignal(SigHandlerBlock*, int*)+0xb4>
c001112e:	40                   	inc    eax
c001112f:	83 f8 08             	cmp    eax,0x8
c0011132:	75 e7                	jne    c001111b <KeCheckSignal(SigHandlerBlock*, int*)+0x9b>
c0011134:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0011138:	83 fd 09             	cmp    ebp,0x9
c001113b:	8b 04 ab             	mov    eax,DWORD PTR [ebx+ebp*4]
c001113e:	89 2a                	mov    DWORD PTR [edx],ebp
c0011140:	75 14                	jne    c0011156 <KeCheckSignal(SigHandlerBlock*, int*)+0xd6>
c0011142:	83 ec 0c             	sub    esp,0xc
c0011145:	68 78 46 02 c0       	push   0xc0024678
c001114a:	e8 17 5e ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001114f:	b8 e5 0e 01 c0       	mov    eax,0xc0010ee5
c0011154:	eb 39                	jmp    c001118f <KeCheckSignal(SigHandlerBlock*, int*)+0x10f>
c0011156:	83 f8 01             	cmp    eax,0x1
c0011159:	75 1c                	jne    c0011177 <KeCheckSignal(SigHandlerBlock*, int*)+0xf7>
c001115b:	83 ec 0c             	sub    esp,0xc
c001115e:	f7 d7                	not    edi
c0011160:	68 82 46 02 c0       	push   0xc0024682
c0011165:	e8 fc 5d ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001116a:	83 c4 10             	add    esp,0x10
c001116d:	21 bb c0 00 00 00    	and    DWORD PTR [ebx+0xc0],edi
c0011173:	31 c0                	xor    eax,eax
c0011175:	eb 30                	jmp    c00111a7 <KeCheckSignal(SigHandlerBlock*, int*)+0x127>
c0011177:	85 c0                	test   eax,eax
c0011179:	75 2c                	jne    c00111a7 <KeCheckSignal(SigHandlerBlock*, int*)+0x127>
c001117b:	83 ec 0c             	sub    esp,0xc
c001117e:	68 8f 46 02 c0       	push   0xc002468f
c0011183:	e8 de 5d ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0011188:	8b 04 ad 80 6d 02 c0 	mov    eax,DWORD PTR [ebp*4-0x3ffd9280]
c001118f:	83 c4 10             	add    esp,0x10
c0011192:	eb 13                	jmp    c00111a7 <KeCheckSignal(SigHandlerBlock*, int*)+0x127>
c0011194:	41                   	inc    ecx
c0011195:	46                   	inc    esi
c0011196:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c001119c:	83 f9 08             	cmp    ecx,0x8
c001119f:	0f 85 02 ff ff ff    	jne    c00110a7 <KeCheckSignal(SigHandlerBlock*, int*)+0x27>
c00111a5:	eb cc                	jmp    c0011173 <KeCheckSignal(SigHandlerBlock*, int*)+0xf3>
c00111a7:	83 c4 1c             	add    esp,0x1c
c00111aa:	5b                   	pop    ebx
c00111ab:	5e                   	pop    esi
c00111ac:	5f                   	pop    edi
c00111ad:	5d                   	pop    ebp
c00111ae:	c3                   	ret    

c00111af <KiCheckSignalZ>:
c00111af:	80 3d d8 d0 02 c0 00 	cmp    BYTE PTR ds:0xc002d0d8,0x0
c00111b6:	74 43                	je     c00111fb <KiCheckSignalZ+0x4c>
c00111b8:	83 ec 24             	sub    esp,0x24
c00111bb:	8d 44 24 14          	lea    eax,[esp+0x14]
c00111bf:	50                   	push   eax
c00111c0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00111c5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00111c8:	ff b0 c0 07 00 00    	push   DWORD PTR [eax+0x7c0]
c00111ce:	e8 ad fe ff ff       	call   c0011080 <KeCheckSignal(SigHandlerBlock*, int*)>
c00111d3:	83 c4 10             	add    esp,0x10
c00111d6:	31 d2                	xor    edx,edx
c00111d8:	85 c0                	test   eax,eax
c00111da:	74 19                	je     c00111f5 <KiCheckSignalZ+0x46>
c00111dc:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00111e2:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00111e5:	89 02                	mov    DWORD PTR [edx],eax
c00111e7:	c7 42 04 00 00 00 00 	mov    DWORD PTR [edx+0x4],0x0
c00111ee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00111f2:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c00111f5:	89 d0                	mov    eax,edx
c00111f7:	83 c4 1c             	add    esp,0x1c
c00111fa:	c3                   	ret    
c00111fb:	31 d2                	xor    edx,edx
c00111fd:	89 d0                	mov    eax,edx
c00111ff:	c3                   	ret    

c0011200 <KeCompleteSignal(SigHandlerBlock*, int)>:
c0011200:	56                   	push   esi
c0011201:	53                   	push   ebx
c0011202:	bb 01 00 00 00       	mov    ebx,0x1
c0011207:	52                   	push   edx
c0011208:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001120c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011210:	d3 e3                	shl    ebx,cl
c0011212:	83 f9 10             	cmp    ecx,0x10
c0011215:	7f 08                	jg     c001121f <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c0011217:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c001121d:	75 10                	jne    c001122f <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c001121f:	83 ec 0c             	sub    esp,0xc
c0011222:	68 b2 46 02 c0       	push   0xc00246b2
c0011227:	e8 5e ec ff ff       	call   c000fe8a <KePanic(char const*)>
c001122c:	83 c4 10             	add    esp,0x10
c001122f:	f7 d3                	not    ebx
c0011231:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c0011237:	58                   	pop    eax
c0011238:	5b                   	pop    ebx
c0011239:	5e                   	pop    esi
c001123a:	c3                   	ret    

c001123b <KiFinishSignalZ>:
c001123b:	53                   	push   ebx
c001123c:	83 ec 08             	sub    esp,0x8
c001123f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011244:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011248:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001124b:	83 fa 08             	cmp    edx,0x8
c001124e:	75 0c                	jne    c001125c <KiFinishSignalZ+0x21>
c0011250:	83 ec 0c             	sub    esp,0xc
c0011253:	50                   	push   eax
c0011254:	e8 cb 61 00 00       	call   c0017424 <unblockTask(ThreadControlBlock*)>
c0011259:	83 c4 10             	add    esp,0x10
c001125c:	50                   	push   eax
c001125d:	50                   	push   eax
c001125e:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c0011261:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011266:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011269:	ff b0 c0 07 00 00    	push   DWORD PTR [eax+0x7c0]
c001126f:	e8 8c ff ff ff       	call   c0011200 <KeCompleteSignal(SigHandlerBlock*, int)>
c0011274:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001127a:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0011281:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0011288:	83 c4 18             	add    esp,0x18
c001128b:	5b                   	pop    ebx
c001128c:	c3                   	ret    

c001128d <SysSeekDir(regs*)>:
c001128d:	31 c0                	xor    eax,eax
c001128f:	31 d2                	xor    edx,edx
c0011291:	c3                   	ret    

c0011292 <SysTellDir(regs*)>:
c0011292:	31 c0                	xor    eax,eax
c0011294:	31 d2                	xor    edx,edx
c0011296:	c3                   	ret    

c0011297 <SysVerify(regs*)>:
c0011297:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001129b:	31 d2                	xor    edx,edx
c001129d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00112a0:	c3                   	ret    

c00112a1 <SysGetArgc(regs*)>:
c00112a1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00112a6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00112a9:	8b 80 b6 05 00 00    	mov    eax,DWORD PTR [eax+0x5b6]
c00112af:	89 c2                	mov    edx,eax
c00112b1:	c1 fa 1f             	sar    edx,0x1f
c00112b4:	c3                   	ret    

c00112b5 <SysTTYName(regs*)>:
c00112b5:	b8 01 00 00 00       	mov    eax,0x1
c00112ba:	31 d2                	xor    edx,edx
c00112bc:	c3                   	ret    

c00112bd <SysFormatDisk(regs*)>:
c00112bd:	56                   	push   esi
c00112be:	53                   	push   ebx
c00112bf:	83 ec 04             	sub    esp,0x4
c00112c2:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00112c6:	8b 1d 04 c3 02 c0    	mov    ebx,DWORD PTR ds:0xc002c304
c00112cc:	eb 2a                	jmp    c00112f8 <SysFormatDisk(regs*)+0x3b>
c00112ce:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c00112d1:	83 ec 0c             	sub    esp,0xc
c00112d4:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00112d7:	8b 13                	mov    edx,DWORD PTR [ebx]
c00112d9:	51                   	push   ecx
c00112da:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c00112dd:	51                   	push   ecx
c00112de:	50                   	push   eax
c00112df:	8b 04 85 e0 ca 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3520]
c00112e6:	50                   	push   eax
c00112e7:	53                   	push   ebx
c00112e8:	ff 52 4c             	call   DWORD PTR [edx+0x4c]
c00112eb:	83 c4 20             	add    esp,0x20
c00112ee:	83 f8 08             	cmp    eax,0x8
c00112f1:	89 c1                	mov    ecx,eax
c00112f3:	75 14                	jne    c0011309 <SysFormatDisk(regs*)+0x4c>
c00112f5:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c00112f8:	85 db                	test   ebx,ebx
c00112fa:	75 d2                	jne    c00112ce <SysFormatDisk(regs*)+0x11>
c00112fc:	b8 03 00 00 00       	mov    eax,0x3
c0011301:	31 d2                	xor    edx,edx
c0011303:	83 c4 04             	add    esp,0x4
c0011306:	5b                   	pop    ebx
c0011307:	5e                   	pop    esi
c0011308:	c3                   	ret    
c0011309:	85 c0                	test   eax,eax
c001130b:	74 13                	je     c0011320 <SysFormatDisk(regs*)+0x63>
c001130d:	31 d2                	xor    edx,edx
c001130f:	83 f9 09             	cmp    ecx,0x9
c0011312:	b8 01 00 00 00       	mov    eax,0x1
c0011317:	74 ea                	je     c0011303 <SysFormatDisk(regs*)+0x46>
c0011319:	b8 02 00 00 00       	mov    eax,0x2
c001131e:	eb e1                	jmp    c0011301 <SysFormatDisk(regs*)+0x44>
c0011320:	31 c0                	xor    eax,eax
c0011322:	eb dd                	jmp    c0011301 <SysFormatDisk(regs*)+0x44>

c0011324 <SysSetDiskVolumeLabel(regs*)>:
c0011324:	56                   	push   esi
c0011325:	53                   	push   ebx
c0011326:	83 ec 04             	sub    esp,0x4
c0011329:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001132d:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0011330:	83 f8 19             	cmp    eax,0x19
c0011333:	77 33                	ja     c0011368 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011335:	8b 0c 85 e0 ca 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd3520]
c001133c:	85 c9                	test   ecx,ecx
c001133e:	74 28                	je     c0011368 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011340:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c0011343:	85 db                	test   ebx,ebx
c0011345:	74 21                	je     c0011368 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011347:	8b 91 74 01 00 00    	mov    edx,DWORD PTR [ecx+0x174]
c001134d:	85 d2                	test   edx,edx
c001134f:	74 17                	je     c0011368 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011351:	8b 32                	mov    esi,DWORD PTR [edx]
c0011353:	53                   	push   ebx
c0011354:	50                   	push   eax
c0011355:	51                   	push   ecx
c0011356:	52                   	push   edx
c0011357:	ff 56 5c             	call   DWORD PTR [esi+0x5c]
c001135a:	83 c4 10             	add    esp,0x10
c001135d:	83 c4 04             	add    esp,0x4
c0011360:	5b                   	pop    ebx
c0011361:	5e                   	pop    esi
c0011362:	89 c2                	mov    edx,eax
c0011364:	c1 fa 1f             	sar    edx,0x1f
c0011367:	c3                   	ret    
c0011368:	83 c4 04             	add    esp,0x4
c001136b:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011370:	5b                   	pop    ebx
c0011371:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011376:	5e                   	pop    esi
c0011377:	c3                   	ret    

c0011378 <SysGetDiskVolumeLabel(regs*)>:
c0011378:	57                   	push   edi
c0011379:	56                   	push   esi
c001137a:	53                   	push   ebx
c001137b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001137f:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0011382:	83 fa 19             	cmp    edx,0x19
c0011385:	77 3c                	ja     c00113c3 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011387:	8b 0c 95 e0 ca 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd3520]
c001138e:	85 c9                	test   ecx,ecx
c0011390:	74 31                	je     c00113c3 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011392:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0011395:	85 db                	test   ebx,ebx
c0011397:	74 2a                	je     c00113c3 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011399:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001139c:	85 f6                	test   esi,esi
c001139e:	74 23                	je     c00113c3 <SysGetDiskVolumeLabel(regs*)+0x4b>
c00113a0:	8b 81 74 01 00 00    	mov    eax,DWORD PTR [ecx+0x174]
c00113a6:	85 c0                	test   eax,eax
c00113a8:	74 19                	je     c00113c3 <SysGetDiskVolumeLabel(regs*)+0x4b>
c00113aa:	83 ec 0c             	sub    esp,0xc
c00113ad:	8b 38                	mov    edi,DWORD PTR [eax]
c00113af:	56                   	push   esi
c00113b0:	53                   	push   ebx
c00113b1:	52                   	push   edx
c00113b2:	51                   	push   ecx
c00113b3:	50                   	push   eax
c00113b4:	ff 57 58             	call   DWORD PTR [edi+0x58]
c00113b7:	83 c4 20             	add    esp,0x20
c00113ba:	5b                   	pop    ebx
c00113bb:	5e                   	pop    esi
c00113bc:	89 c2                	mov    edx,eax
c00113be:	c1 fa 1f             	sar    edx,0x1f
c00113c1:	5f                   	pop    edi
c00113c2:	c3                   	ret    
c00113c3:	5b                   	pop    ebx
c00113c4:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00113c9:	ba ff ff ff ff       	mov    edx,0xffffffff
c00113ce:	5e                   	pop    esi
c00113cf:	5f                   	pop    edi
c00113d0:	c3                   	ret    

c00113d1 <SysRealpath(regs*)>:
c00113d1:	53                   	push   ebx
c00113d2:	83 ec 08             	sub    esp,0x8
c00113d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00113d9:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c00113dc:	85 c9                	test   ecx,ecx
c00113de:	74 36                	je     c0011416 <SysRealpath(regs*)+0x45>
c00113e0:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c00113e3:	31 d2                	xor    edx,edx
c00113e5:	b8 01 00 00 00       	mov    eax,0x1
c00113ea:	85 db                	test   ebx,ebx
c00113ec:	75 05                	jne    c00113f3 <SysRealpath(regs*)+0x22>
c00113ee:	83 c4 08             	add    esp,0x8
c00113f1:	5b                   	pop    ebx
c00113f2:	c3                   	ret    
c00113f3:	6a 00                	push   0x0
c00113f5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00113fa:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00113fd:	05 0c 01 00 00       	add    eax,0x10c
c0011402:	50                   	push   eax
c0011403:	51                   	push   ecx
c0011404:	53                   	push   ebx
c0011405:	e8 52 6a ff ff       	call   c0007e5c <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c001140a:	83 c4 10             	add    esp,0x10
c001140d:	31 c0                	xor    eax,eax
c001140f:	31 d2                	xor    edx,edx
c0011411:	83 c4 08             	add    esp,0x8
c0011414:	5b                   	pop    ebx
c0011415:	c3                   	ret    
c0011416:	b8 01 00 00 00       	mov    eax,0x1
c001141b:	31 d2                	xor    edx,edx
c001141d:	eb f2                	jmp    c0011411 <SysRealpath(regs*)+0x40>

c001141f <SysReadDir(regs*)>:
c001141f:	53                   	push   ebx
c0011420:	83 ec 18             	sub    esp,0x18
c0011423:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011427:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001142a:	83 f8 02             	cmp    eax,0x2
c001142d:	76 4f                	jbe    c001147e <SysReadDir(regs*)+0x5f>
c001142f:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c0011436:	77 52                	ja     c001148a <SysReadDir(regs*)+0x6b>
c0011438:	83 ec 0c             	sub    esp,0xc
c001143b:	50                   	push   eax
c001143c:	e8 94 1d 00 00       	call   c00131d5 <KeGetFileFromDescriptor(int)>
c0011441:	83 c4 10             	add    esp,0x10
c0011444:	85 c0                	test   eax,eax
c0011446:	74 42                	je     c001148a <SysReadDir(regs*)+0x6b>
c0011448:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011450:	83 ec 0c             	sub    esp,0xc
c0011453:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0011457:	8b 10                	mov    edx,DWORD PTR [eax]
c0011459:	51                   	push   ecx
c001145a:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c001145d:	51                   	push   ecx
c001145e:	6a 00                	push   0x0
c0011460:	68 10 01 00 00       	push   0x110
c0011465:	50                   	push   eax
c0011466:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011469:	83 c4 20             	add    esp,0x20
c001146c:	85 c0                	test   eax,eax
c001146e:	89 c1                	mov    ecx,eax
c0011470:	74 27                	je     c0011499 <SysReadDir(regs*)+0x7a>
c0011472:	31 d2                	xor    edx,edx
c0011474:	83 f9 07             	cmp    ecx,0x7
c0011477:	b8 02 00 00 00       	mov    eax,0x2
c001147c:	75 16                	jne    c0011494 <SysReadDir(regs*)+0x75>
c001147e:	b8 01 00 00 00       	mov    eax,0x1
c0011483:	31 d2                	xor    edx,edx
c0011485:	83 c4 18             	add    esp,0x18
c0011488:	5b                   	pop    ebx
c0011489:	c3                   	ret    
c001148a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001148f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011494:	83 c4 18             	add    esp,0x18
c0011497:	5b                   	pop    ebx
c0011498:	c3                   	ret    
c0011499:	31 c0                	xor    eax,eax
c001149b:	31 d2                	xor    edx,edx
c001149d:	eb e6                	jmp    c0011485 <SysReadDir(regs*)+0x66>

c001149f <SysIsATTY(regs*)>:
c001149f:	83 ec 0c             	sub    esp,0xc
c00114a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00114a6:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00114a9:	83 f8 02             	cmp    eax,0x2
c00114ac:	76 07                	jbe    c00114b5 <SysIsATTY(regs*)+0x16>
c00114ae:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00114b3:	75 26                	jne    c00114db <SysIsATTY(regs*)+0x3c>
c00114b5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00114ba:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00114bd:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c00114c3:	85 c0                	test   eax,eax
c00114c5:	74 24                	je     c00114eb <SysIsATTY(regs*)+0x4c>
c00114c7:	8b 10                	mov    edx,DWORD PTR [eax]
c00114c9:	83 ec 0c             	sub    esp,0xc
c00114cc:	50                   	push   eax
c00114cd:	ff 12                	call   DWORD PTR [edx]
c00114cf:	83 c4 10             	add    esp,0x10
c00114d2:	31 d2                	xor    edx,edx
c00114d4:	83 c4 0c             	add    esp,0xc
c00114d7:	0f b6 c0             	movzx  eax,al
c00114da:	c3                   	ret    
c00114db:	83 ec 0c             	sub    esp,0xc
c00114de:	50                   	push   eax
c00114df:	e8 f1 1c 00 00       	call   c00131d5 <KeGetFileFromDescriptor(int)>
c00114e4:	83 c4 10             	add    esp,0x10
c00114e7:	85 c0                	test   eax,eax
c00114e9:	75 dc                	jne    c00114c7 <SysIsATTY(regs*)+0x28>
c00114eb:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00114f0:	ba ff ff ff ff       	mov    edx,0xffffffff
c00114f5:	83 c4 0c             	add    esp,0xc
c00114f8:	c3                   	ret    

c00114f9 <SysSeek(regs*)>:
c00114f9:	53                   	push   ebx
c00114fa:	83 ec 08             	sub    esp,0x8
c00114fd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011501:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011504:	8d 50 fd             	lea    edx,[eax-0x3]
c0011507:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c001150d:	77 39                	ja     c0011548 <SysSeek(regs*)+0x4f>
c001150f:	83 ec 0c             	sub    esp,0xc
c0011512:	50                   	push   eax
c0011513:	e8 bd 1c 00 00       	call   c00131d5 <KeGetFileFromDescriptor(int)>
c0011518:	83 c4 10             	add    esp,0x10
c001151b:	85 c0                	test   eax,eax
c001151d:	74 29                	je     c0011548 <SysSeek(regs*)+0x4f>
c001151f:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0011522:	83 ec 04             	sub    esp,0x4
c0011525:	31 db                	xor    ebx,ebx
c0011527:	53                   	push   ebx
c0011528:	51                   	push   ecx
c0011529:	50                   	push   eax
c001152a:	e8 35 6d ff ff       	call   c0008264 <File::seek(unsigned long long)>
c001152f:	83 c4 10             	add    esp,0x10
c0011532:	85 c0                	test   eax,eax
c0011534:	0f 95 c0             	setne  al
c0011537:	31 d2                	xor    edx,edx
c0011539:	0f b6 c0             	movzx  eax,al
c001153c:	f7 d8                	neg    eax
c001153e:	83 d2 00             	adc    edx,0x0
c0011541:	83 c4 08             	add    esp,0x8
c0011544:	5b                   	pop    ebx
c0011545:	f7 da                	neg    edx
c0011547:	c3                   	ret    
c0011548:	83 c4 08             	add    esp,0x8
c001154b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011550:	5b                   	pop    ebx
c0011551:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011556:	c3                   	ret    

c0011557 <SysTell(regs*)>:
c0011557:	53                   	push   ebx
c0011558:	83 ec 08             	sub    esp,0x8
c001155b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001155f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011562:	83 f8 02             	cmp    eax,0x2
c0011565:	76 56                	jbe    c00115bd <SysTell(regs*)+0x66>
c0011567:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001156c:	76 19                	jbe    c0011587 <SysTell(regs*)+0x30>
c001156e:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011571:	31 d2                	xor    edx,edx
c0011573:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011579:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011580:	83 c4 08             	add    esp,0x8
c0011583:	31 c0                	xor    eax,eax
c0011585:	5b                   	pop    ebx
c0011586:	c3                   	ret    
c0011587:	83 ec 0c             	sub    esp,0xc
c001158a:	50                   	push   eax
c001158b:	e8 45 1c 00 00       	call   c00131d5 <KeGetFileFromDescriptor(int)>
c0011590:	83 c4 10             	add    esp,0x10
c0011593:	85 c0                	test   eax,eax
c0011595:	74 26                	je     c00115bd <SysTell(regs*)+0x66>
c0011597:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001159a:	83 ec 08             	sub    esp,0x8
c001159d:	52                   	push   edx
c001159e:	50                   	push   eax
c001159f:	e8 6c 6d ff ff       	call   c0008310 <File::tell(unsigned long long*)>
c00115a4:	83 c4 10             	add    esp,0x10
c00115a7:	85 c0                	test   eax,eax
c00115a9:	0f 95 c0             	setne  al
c00115ac:	31 d2                	xor    edx,edx
c00115ae:	0f b6 c0             	movzx  eax,al
c00115b1:	f7 d8                	neg    eax
c00115b3:	83 d2 00             	adc    edx,0x0
c00115b6:	83 c4 08             	add    esp,0x8
c00115b9:	5b                   	pop    ebx
c00115ba:	f7 da                	neg    edx
c00115bc:	c3                   	ret    
c00115bd:	83 c4 08             	add    esp,0x8
c00115c0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00115c5:	5b                   	pop    ebx
c00115c6:	ba ff ff ff ff       	mov    edx,0xffffffff
c00115cb:	c3                   	ret    

c00115cc <SysSize(regs*)>:
c00115cc:	53                   	push   ebx
c00115cd:	83 ec 18             	sub    esp,0x18
c00115d0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00115d4:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00115d7:	83 f8 02             	cmp    eax,0x2
c00115da:	76 5b                	jbe    c0011637 <SysSize(regs*)+0x6b>
c00115dc:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00115e1:	76 19                	jbe    c00115fc <SysSize(regs*)+0x30>
c00115e3:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00115e6:	31 d2                	xor    edx,edx
c00115e8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00115ee:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00115f5:	83 c4 18             	add    esp,0x18
c00115f8:	31 c0                	xor    eax,eax
c00115fa:	5b                   	pop    ebx
c00115fb:	c3                   	ret    
c00115fc:	83 ec 0c             	sub    esp,0xc
c00115ff:	50                   	push   eax
c0011600:	e8 d0 1b 00 00       	call   c00131d5 <KeGetFileFromDescriptor(int)>
c0011605:	83 c4 10             	add    esp,0x10
c0011608:	85 c0                	test   eax,eax
c001160a:	74 2b                	je     c0011637 <SysSize(regs*)+0x6b>
c001160c:	83 ec 04             	sub    esp,0x4
c001160f:	8d 54 24 13          	lea    edx,[esp+0x13]
c0011613:	52                   	push   edx
c0011614:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011617:	52                   	push   edx
c0011618:	50                   	push   eax
c0011619:	e8 8a 6e ff ff       	call   c00084a8 <File::stat(unsigned long long*, bool*)>
c001161e:	83 c4 10             	add    esp,0x10
c0011621:	85 c0                	test   eax,eax
c0011623:	0f 95 c0             	setne  al
c0011626:	31 d2                	xor    edx,edx
c0011628:	0f b6 c0             	movzx  eax,al
c001162b:	f7 d8                	neg    eax
c001162d:	83 d2 00             	adc    edx,0x0
c0011630:	83 c4 18             	add    esp,0x18
c0011633:	5b                   	pop    ebx
c0011634:	f7 da                	neg    edx
c0011636:	c3                   	ret    
c0011637:	83 c4 18             	add    esp,0x18
c001163a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001163f:	5b                   	pop    ebx
c0011640:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011645:	c3                   	ret    

c0011646 <SysSizeFromFilename(regs*)>:
c0011646:	55                   	push   ebp
c0011647:	57                   	push   edi
c0011648:	56                   	push   esi
c0011649:	53                   	push   ebx
c001164a:	81 ec 4c 02 00 00    	sub    esp,0x24c
c0011650:	8b 9c 24 60 02 00 00 	mov    ebx,DWORD PTR [esp+0x260]
c0011657:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001165a:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c001165d:	85 f6                	test   esi,esi
c001165f:	89 f8                	mov    eax,edi
c0011661:	74 09                	je     c001166c <SysSizeFromFilename(regs*)+0x26>
c0011663:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0011669:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001166c:	83 f8 02             	cmp    eax,0x2
c001166f:	0f 86 c9 00 00 00    	jbe    c001173e <SysSizeFromFilename(regs*)+0xf8>
c0011675:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001167a:	76 1f                	jbe    c001169b <SysSizeFromFilename(regs*)+0x55>
c001167c:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001167f:	31 d2                	xor    edx,edx
c0011681:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011687:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001168e:	31 c0                	xor    eax,eax
c0011690:	81 c4 4c 02 00 00    	add    esp,0x24c
c0011696:	5b                   	pop    ebx
c0011697:	5e                   	pop    esi
c0011698:	5f                   	pop    edi
c0011699:	5d                   	pop    ebp
c001169a:	c3                   	ret    
c001169b:	83 ec 0c             	sub    esp,0xc
c001169e:	68 14 01 00 00       	push   0x114
c00116a3:	e8 d4 e4 ff ff       	call   c000fb7c <malloc>
c00116a8:	6a 01                	push   0x1
c00116aa:	89 c5                	mov    ebp,eax
c00116ac:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00116b1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00116b4:	50                   	push   eax
c00116b5:	57                   	push   edi
c00116b6:	55                   	push   ebp
c00116b7:	e8 ce 69 ff ff       	call   c000808a <File::File(char const*, Process*, bool)>
c00116bc:	83 c4 20             	add    esp,0x20
c00116bf:	85 ed                	test   ebp,ebp
c00116c1:	74 7b                	je     c001173e <SysSizeFromFilename(regs*)+0xf8>
c00116c3:	83 ec 04             	sub    esp,0x4
c00116c6:	8d 44 24 13          	lea    eax,[esp+0x13]
c00116ca:	50                   	push   eax
c00116cb:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00116ce:	51                   	push   ecx
c00116cf:	55                   	push   ebp
c00116d0:	e8 d3 6d ff ff       	call   c00084a8 <File::stat(unsigned long long*, bool*)>
c00116d5:	89 c3                	mov    ebx,eax
c00116d7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00116da:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00116dd:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00116e0:	83 c4 10             	add    esp,0x10
c00116e3:	85 db                	test   ebx,ebx
c00116e5:	75 57                	jne    c001173e <SysSizeFromFilename(regs*)+0xf8>
c00116e7:	6a 00                	push   0x0
c00116e9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00116ee:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00116f1:	05 0c 01 00 00       	add    eax,0x10c
c00116f6:	50                   	push   eax
c00116f7:	57                   	push   edi
c00116f8:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c00116ff:	53                   	push   ebx
c0011700:	e8 57 67 ff ff       	call   c0007e5c <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0011705:	58                   	pop    eax
c0011706:	5a                   	pop    edx
c0011707:	8d 44 24 18          	lea    eax,[esp+0x18]
c001170b:	50                   	push   eax
c001170c:	53                   	push   ebx
c001170d:	e8 d1 61 ff ff       	call   c00078e3 <KeDereferenceSymlink(char const*, char*)>
c0011712:	83 c4 10             	add    esp,0x10
c0011715:	ba 00 00 00 00       	mov    edx,0x0
c001171a:	83 f8 01             	cmp    eax,0x1
c001171d:	b8 00 00 00 00       	mov    eax,0x0
c0011722:	74 2f                	je     c0011753 <SysSizeFromFilename(regs*)+0x10d>
c0011724:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011729:	74 3b                	je     c0011766 <SysSizeFromFilename(regs*)+0x120>
c001172b:	85 f6                	test   esi,esi
c001172d:	0f 84 5d ff ff ff    	je     c0011690 <SysSizeFromFilename(regs*)+0x4a>
c0011733:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0011739:	e9 52 ff ff ff       	jmp    c0011690 <SysSizeFromFilename(regs*)+0x4a>
c001173e:	81 c4 4c 02 00 00    	add    esp,0x24c
c0011744:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011749:	5b                   	pop    ebx
c001174a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001174f:	5e                   	pop    esi
c0011750:	5f                   	pop    edi
c0011751:	5d                   	pop    ebp
c0011752:	c3                   	ret    
c0011753:	85 f6                	test   esi,esi
c0011755:	0f 84 35 ff ff ff    	je     c0011690 <SysSizeFromFilename(regs*)+0x4a>
c001175b:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c0011761:	e9 2a ff ff ff       	jmp    c0011690 <SysSizeFromFilename(regs*)+0x4a>
c0011766:	85 f6                	test   esi,esi
c0011768:	0f 84 22 ff ff ff    	je     c0011690 <SysSizeFromFilename(regs*)+0x4a>
c001176e:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0011774:	e9 17 ff ff ff       	jmp    c0011690 <SysSizeFromFilename(regs*)+0x4a>

c0011779 <SysSizeFromFilenameNoSymlink(regs*)>:
c0011779:	55                   	push   ebp
c001177a:	57                   	push   edi
c001177b:	56                   	push   esi
c001177c:	53                   	push   ebx
c001177d:	81 ec 4c 02 00 00    	sub    esp,0x24c
c0011783:	8b 9c 24 60 02 00 00 	mov    ebx,DWORD PTR [esp+0x260]
c001178a:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001178d:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0011790:	85 f6                	test   esi,esi
c0011792:	89 f8                	mov    eax,edi
c0011794:	74 09                	je     c001179f <SysSizeFromFilenameNoSymlink(regs*)+0x26>
c0011796:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c001179c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001179f:	83 f8 02             	cmp    eax,0x2
c00117a2:	0f 86 c9 00 00 00    	jbe    c0011871 <SysSizeFromFilenameNoSymlink(regs*)+0xf8>
c00117a8:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00117ad:	76 1f                	jbe    c00117ce <SysSizeFromFilenameNoSymlink(regs*)+0x55>
c00117af:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00117b2:	31 d2                	xor    edx,edx
c00117b4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00117ba:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00117c1:	31 c0                	xor    eax,eax
c00117c3:	81 c4 4c 02 00 00    	add    esp,0x24c
c00117c9:	5b                   	pop    ebx
c00117ca:	5e                   	pop    esi
c00117cb:	5f                   	pop    edi
c00117cc:	5d                   	pop    ebp
c00117cd:	c3                   	ret    
c00117ce:	83 ec 0c             	sub    esp,0xc
c00117d1:	68 14 01 00 00       	push   0x114
c00117d6:	e8 a1 e3 ff ff       	call   c000fb7c <malloc>
c00117db:	6a 00                	push   0x0
c00117dd:	89 c5                	mov    ebp,eax
c00117df:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00117e4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00117e7:	50                   	push   eax
c00117e8:	57                   	push   edi
c00117e9:	55                   	push   ebp
c00117ea:	e8 9b 68 ff ff       	call   c000808a <File::File(char const*, Process*, bool)>
c00117ef:	83 c4 20             	add    esp,0x20
c00117f2:	85 ed                	test   ebp,ebp
c00117f4:	74 7b                	je     c0011871 <SysSizeFromFilenameNoSymlink(regs*)+0xf8>
c00117f6:	83 ec 04             	sub    esp,0x4
c00117f9:	8d 44 24 13          	lea    eax,[esp+0x13]
c00117fd:	50                   	push   eax
c00117fe:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0011801:	51                   	push   ecx
c0011802:	55                   	push   ebp
c0011803:	e8 a0 6c ff ff       	call   c00084a8 <File::stat(unsigned long long*, bool*)>
c0011808:	89 c3                	mov    ebx,eax
c001180a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001180d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0011810:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011813:	83 c4 10             	add    esp,0x10
c0011816:	85 db                	test   ebx,ebx
c0011818:	75 57                	jne    c0011871 <SysSizeFromFilenameNoSymlink(regs*)+0xf8>
c001181a:	6a 00                	push   0x0
c001181c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011821:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011824:	05 0c 01 00 00       	add    eax,0x10c
c0011829:	50                   	push   eax
c001182a:	57                   	push   edi
c001182b:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c0011832:	53                   	push   ebx
c0011833:	e8 24 66 ff ff       	call   c0007e5c <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0011838:	58                   	pop    eax
c0011839:	5a                   	pop    edx
c001183a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001183e:	50                   	push   eax
c001183f:	53                   	push   ebx
c0011840:	e8 9e 60 ff ff       	call   c00078e3 <KeDereferenceSymlink(char const*, char*)>
c0011845:	83 c4 10             	add    esp,0x10
c0011848:	ba 00 00 00 00       	mov    edx,0x0
c001184d:	83 f8 01             	cmp    eax,0x1
c0011850:	b8 00 00 00 00       	mov    eax,0x0
c0011855:	74 2f                	je     c0011886 <SysSizeFromFilenameNoSymlink(regs*)+0x10d>
c0011857:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001185c:	74 3b                	je     c0011899 <SysSizeFromFilenameNoSymlink(regs*)+0x120>
c001185e:	85 f6                	test   esi,esi
c0011860:	0f 84 5d ff ff ff    	je     c00117c3 <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c0011866:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c001186c:	e9 52 ff ff ff       	jmp    c00117c3 <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c0011871:	81 c4 4c 02 00 00    	add    esp,0x24c
c0011877:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001187c:	5b                   	pop    ebx
c001187d:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011882:	5e                   	pop    esi
c0011883:	5f                   	pop    edi
c0011884:	5d                   	pop    ebp
c0011885:	c3                   	ret    
c0011886:	85 f6                	test   esi,esi
c0011888:	0f 84 35 ff ff ff    	je     c00117c3 <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c001188e:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c0011894:	e9 2a ff ff ff       	jmp    c00117c3 <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c0011899:	85 f6                	test   esi,esi
c001189b:	0f 84 22 ff ff ff    	je     c00117c3 <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c00118a1:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c00118a7:	e9 17 ff ff ff       	jmp    c00117c3 <SysSizeFromFilenameNoSymlink(regs*)+0x4a>

c00118ac <SysClose(regs*)>:
c00118ac:	57                   	push   edi
c00118ad:	56                   	push   esi
c00118ae:	53                   	push   ebx
c00118af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118b3:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00118b6:	83 f8 02             	cmp    eax,0x2
c00118b9:	76 44                	jbe    c00118ff <SysClose(regs*)+0x53>
c00118bb:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c00118c1:	31 f6                	xor    esi,esi
c00118c3:	31 ff                	xor    edi,edi
c00118c5:	83 fa 01             	cmp    edx,0x1
c00118c8:	76 2d                	jbe    c00118f7 <SysClose(regs*)+0x4b>
c00118ca:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00118cf:	77 2e                	ja     c00118ff <SysClose(regs*)+0x53>
c00118d1:	83 ec 0c             	sub    esp,0xc
c00118d4:	50                   	push   eax
c00118d5:	e8 fb 18 00 00       	call   c00131d5 <KeGetFileFromDescriptor(int)>
c00118da:	83 c4 10             	add    esp,0x10
c00118dd:	85 c0                	test   eax,eax
c00118df:	89 c3                	mov    ebx,eax
c00118e1:	74 1c                	je     c00118ff <SysClose(regs*)+0x53>
c00118e3:	83 ec 0c             	sub    esp,0xc
c00118e6:	50                   	push   eax
c00118e7:	e8 18 69 ff ff       	call   c0008204 <File::close()>
c00118ec:	8b 03                	mov    eax,DWORD PTR [ebx]
c00118ee:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00118f1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00118f4:	83 c4 10             	add    esp,0x10
c00118f7:	5b                   	pop    ebx
c00118f8:	89 f0                	mov    eax,esi
c00118fa:	89 fa                	mov    edx,edi
c00118fc:	5e                   	pop    esi
c00118fd:	5f                   	pop    edi
c00118fe:	c3                   	ret    
c00118ff:	5b                   	pop    ebx
c0011900:	be ff ff ff ff       	mov    esi,0xffffffff
c0011905:	89 f0                	mov    eax,esi
c0011907:	bf ff ff ff ff       	mov    edi,0xffffffff
c001190c:	89 fa                	mov    edx,edi
c001190e:	5e                   	pop    esi
c001190f:	5f                   	pop    edi
c0011910:	c3                   	ret    

c0011911 <SysOpenDir(regs*)>:
c0011911:	56                   	push   esi
c0011912:	53                   	push   ebx
c0011913:	83 ec 04             	sub    esp,0x4
c0011916:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001191a:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001191d:	85 c9                	test   ecx,ecx
c001191f:	74 5d                	je     c001197e <SysOpenDir(regs*)+0x6d>
c0011921:	83 ec 0c             	sub    esp,0xc
c0011924:	68 14 01 00 00       	push   0x114
c0011929:	e8 4e e2 ff ff       	call   c000fb7c <malloc>
c001192e:	83 c4 0c             	add    esp,0xc
c0011931:	89 c6                	mov    esi,eax
c0011933:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011938:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001193b:	50                   	push   eax
c001193c:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001193f:	52                   	push   edx
c0011940:	56                   	push   esi
c0011941:	e8 22 6d ff ff       	call   c0008668 <Directory::Directory(char const*, Process*)>
c0011946:	83 c4 10             	add    esp,0x10
c0011949:	85 f6                	test   esi,esi
c001194b:	74 31                	je     c001197e <SysOpenDir(regs*)+0x6d>
c001194d:	83 ec 0c             	sub    esp,0xc
c0011950:	56                   	push   esi
c0011951:	e8 da 6d ff ff       	call   c0008730 <Directory::open()>
c0011956:	83 c4 10             	add    esp,0x10
c0011959:	85 c0                	test   eax,eax
c001195b:	75 21                	jne    c001197e <SysOpenDir(regs*)+0x6d>
c001195d:	83 ec 0c             	sub    esp,0xc
c0011960:	56                   	push   esi
c0011961:	e8 72 15 00 00       	call   c0012ed8 <UnixFile::getFileDescriptor()>
c0011966:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0011969:	83 c4 10             	add    esp,0x10
c001196c:	89 02                	mov    DWORD PTR [edx],eax
c001196e:	c1 f8 1f             	sar    eax,0x1f
c0011971:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011974:	83 c4 04             	add    esp,0x4
c0011977:	31 c0                	xor    eax,eax
c0011979:	5b                   	pop    ebx
c001197a:	31 d2                	xor    edx,edx
c001197c:	5e                   	pop    esi
c001197d:	c3                   	ret    
c001197e:	83 c4 04             	add    esp,0x4
c0011981:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011986:	5b                   	pop    ebx
c0011987:	ba ff ff ff ff       	mov    edx,0xffffffff
c001198c:	5e                   	pop    esi
c001198d:	c3                   	ret    

c001198e <SysMakeDir(regs*)>:
c001198e:	56                   	push   esi
c001198f:	53                   	push   ebx
c0011990:	83 ec 10             	sub    esp,0x10
c0011993:	68 14 01 00 00       	push   0x114
c0011998:	e8 df e1 ff ff       	call   c000fb7c <malloc>
c001199d:	83 c4 0c             	add    esp,0xc
c00119a0:	89 c3                	mov    ebx,eax
c00119a2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00119a7:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00119aa:	50                   	push   eax
c00119ab:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00119af:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c00119b2:	52                   	push   edx
c00119b3:	53                   	push   ebx
c00119b4:	e8 af 6c ff ff       	call   c0008668 <Directory::Directory(char const*, Process*)>
c00119b9:	83 c4 10             	add    esp,0x10
c00119bc:	85 db                	test   ebx,ebx
c00119be:	74 2c                	je     c00119ec <SysMakeDir(regs*)+0x5e>
c00119c0:	83 ec 0c             	sub    esp,0xc
c00119c3:	53                   	push   ebx
c00119c4:	e8 47 6f ff ff       	call   c0008910 <Directory::create()>
c00119c9:	89 c6                	mov    esi,eax
c00119cb:	8b 03                	mov    eax,DWORD PTR [ebx]
c00119cd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00119d0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00119d3:	83 c4 10             	add    esp,0x10
c00119d6:	31 c0                	xor    eax,eax
c00119d8:	85 f6                	test   esi,esi
c00119da:	0f 95 c0             	setne  al
c00119dd:	31 d2                	xor    edx,edx
c00119df:	f7 d8                	neg    eax
c00119e1:	83 d2 00             	adc    edx,0x0
c00119e4:	83 c4 04             	add    esp,0x4
c00119e7:	5b                   	pop    ebx
c00119e8:	f7 da                	neg    edx
c00119ea:	5e                   	pop    esi
c00119eb:	c3                   	ret    
c00119ec:	83 c4 04             	add    esp,0x4
c00119ef:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00119f4:	5b                   	pop    ebx
c00119f5:	ba ff ff ff ff       	mov    edx,0xffffffff
c00119fa:	5e                   	pop    esi
c00119fb:	c3                   	ret    

c00119fc <SysCloseDir(regs*)>:
c00119fc:	53                   	push   ebx
c00119fd:	83 ec 08             	sub    esp,0x8
c0011a00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011a04:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011a07:	8d 50 fd             	lea    edx,[eax-0x3]
c0011a0a:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0011a10:	77 2f                	ja     c0011a41 <SysCloseDir(regs*)+0x45>
c0011a12:	83 ec 0c             	sub    esp,0xc
c0011a15:	50                   	push   eax
c0011a16:	e8 ba 17 00 00       	call   c00131d5 <KeGetFileFromDescriptor(int)>
c0011a1b:	83 c4 10             	add    esp,0x10
c0011a1e:	85 c0                	test   eax,eax
c0011a20:	89 c3                	mov    ebx,eax
c0011a22:	74 1d                	je     c0011a41 <SysCloseDir(regs*)+0x45>
c0011a24:	83 ec 0c             	sub    esp,0xc
c0011a27:	50                   	push   eax
c0011a28:	e8 5f 6d ff ff       	call   c000878c <Directory::close()>
c0011a2d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011a2f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011a32:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011a35:	83 c4 10             	add    esp,0x10
c0011a38:	31 c0                	xor    eax,eax
c0011a3a:	83 c4 08             	add    esp,0x8
c0011a3d:	31 d2                	xor    edx,edx
c0011a3f:	5b                   	pop    ebx
c0011a40:	c3                   	ret    
c0011a41:	83 c4 08             	add    esp,0x8
c0011a44:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011a49:	5b                   	pop    ebx
c0011a4a:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011a4f:	c3                   	ret    

c0011a50 <SysWait(regs*)>:
c0011a50:	83 ec 10             	sub    esp,0x10
c0011a53:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011a57:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0011a5a:	52                   	push   edx
c0011a5b:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c0011a5e:	51                   	push   ecx
c0011a5f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011a62:	50                   	push   eax
c0011a63:	e8 60 57 00 00       	call   c00171c8 <waitTask(int, int*, int)>
c0011a68:	83 c4 1c             	add    esp,0x1c
c0011a6b:	89 c2                	mov    edx,eax
c0011a6d:	c1 fa 1f             	sar    edx,0x1f
c0011a70:	c3                   	ret    

c0011a71 <SysNotImpl(regs*)>:
c0011a71:	83 ec 18             	sub    esp,0x18
c0011a74:	68 c3 46 02 c0       	push   0xc00246c3
c0011a79:	e8 0c e4 ff ff       	call   c000fe8a <KePanic(char const*)>
c0011a7e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011a83:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011a88:	83 c4 1c             	add    esp,0x1c
c0011a8b:	c3                   	ret    

c0011a8c <SysPanic(regs*)>:
c0011a8c:	83 ec 18             	sub    esp,0x18
c0011a8f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011a93:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0011a96:	50                   	push   eax
c0011a97:	e8 ee e3 ff ff       	call   c000fe8a <KePanic(char const*)>
c0011a9c:	b8 01 00 00 00       	mov    eax,0x1
c0011aa1:	31 d2                	xor    edx,edx
c0011aa3:	83 c4 1c             	add    esp,0x1c
c0011aa6:	c3                   	ret    

c0011aa7 <SysRmdir(regs*)>:
c0011aa7:	56                   	push   esi
c0011aa8:	53                   	push   ebx
c0011aa9:	83 ec 10             	sub    esp,0x10
c0011aac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011ab0:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0011ab3:	68 14 01 00 00       	push   0x114
c0011ab8:	e8 bf e0 ff ff       	call   c000fb7c <malloc>
c0011abd:	6a 00                	push   0x0
c0011abf:	89 c3                	mov    ebx,eax
c0011ac1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011ac6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011ac9:	50                   	push   eax
c0011aca:	56                   	push   esi
c0011acb:	53                   	push   ebx
c0011acc:	e8 b9 65 ff ff       	call   c000808a <File::File(char const*, Process*, bool)>
c0011ad1:	83 c4 14             	add    esp,0x14
c0011ad4:	53                   	push   ebx
c0011ad5:	e8 9a 68 ff ff       	call   c0008374 <File::unlink()>
c0011ada:	83 c4 10             	add    esp,0x10
c0011add:	85 db                	test   ebx,ebx
c0011adf:	89 c6                	mov    esi,eax
c0011ae1:	74 0c                	je     c0011aef <SysRmdir(regs*)+0x48>
c0011ae3:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011ae5:	83 ec 0c             	sub    esp,0xc
c0011ae8:	53                   	push   ebx
c0011ae9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011aec:	83 c4 10             	add    esp,0x10
c0011aef:	31 c0                	xor    eax,eax
c0011af1:	85 f6                	test   esi,esi
c0011af3:	0f 95 c0             	setne  al
c0011af6:	31 d2                	xor    edx,edx
c0011af8:	f7 d8                	neg    eax
c0011afa:	83 d2 00             	adc    edx,0x0
c0011afd:	83 c4 04             	add    esp,0x4
c0011b00:	5b                   	pop    ebx
c0011b01:	f7 da                	neg    edx
c0011b03:	5e                   	pop    esi
c0011b04:	c3                   	ret    

c0011b05 <SysUnlink(regs*)>:
c0011b05:	56                   	push   esi
c0011b06:	53                   	push   ebx
c0011b07:	83 ec 10             	sub    esp,0x10
c0011b0a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011b0e:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0011b11:	68 14 01 00 00       	push   0x114
c0011b16:	e8 61 e0 ff ff       	call   c000fb7c <malloc>
c0011b1b:	6a 00                	push   0x0
c0011b1d:	89 c3                	mov    ebx,eax
c0011b1f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011b24:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011b27:	50                   	push   eax
c0011b28:	56                   	push   esi
c0011b29:	53                   	push   ebx
c0011b2a:	e8 5b 65 ff ff       	call   c000808a <File::File(char const*, Process*, bool)>
c0011b2f:	83 c4 14             	add    esp,0x14
c0011b32:	53                   	push   ebx
c0011b33:	e8 3c 68 ff ff       	call   c0008374 <File::unlink()>
c0011b38:	83 c4 10             	add    esp,0x10
c0011b3b:	85 db                	test   ebx,ebx
c0011b3d:	89 c6                	mov    esi,eax
c0011b3f:	74 0c                	je     c0011b4d <SysUnlink(regs*)+0x48>
c0011b41:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011b43:	83 ec 0c             	sub    esp,0xc
c0011b46:	53                   	push   ebx
c0011b47:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011b4a:	83 c4 10             	add    esp,0x10
c0011b4d:	31 c0                	xor    eax,eax
c0011b4f:	85 f6                	test   esi,esi
c0011b51:	0f 95 c0             	setne  al
c0011b54:	31 d2                	xor    edx,edx
c0011b56:	f7 d8                	neg    eax
c0011b58:	83 d2 00             	adc    edx,0x0
c0011b5b:	83 c4 04             	add    esp,0x4
c0011b5e:	5b                   	pop    ebx
c0011b5f:	f7 da                	neg    edx
c0011b61:	5e                   	pop    esi
c0011b62:	c3                   	ret    

c0011b63 <SysGetArgv(regs*)>:
c0011b63:	83 ec 0c             	sub    esp,0xc
c0011b66:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011b6a:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0011b6d:	85 c0                	test   eax,eax
c0011b6f:	78 2c                	js     c0011b9d <SysGetArgv(regs*)+0x3a>
c0011b71:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0011b77:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c0011b7a:	3b 81 b6 05 00 00    	cmp    eax,DWORD PTR [ecx+0x5b6]
c0011b80:	7d 1b                	jge    c0011b9d <SysGetArgv(regs*)+0x3a>
c0011b82:	8b 84 81 ba 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x5ba]
c0011b89:	85 c0                	test   eax,eax
c0011b8b:	74 18                	je     c0011ba5 <SysGetArgv(regs*)+0x42>
c0011b8d:	83 ec 08             	sub    esp,0x8
c0011b90:	50                   	push   eax
c0011b91:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c0011b94:	50                   	push   eax
c0011b95:	e8 b6 ea fe ff       	call   c0000650 <strcpy>
c0011b9a:	83 c4 10             	add    esp,0x10
c0011b9d:	31 c0                	xor    eax,eax
c0011b9f:	31 d2                	xor    edx,edx
c0011ba1:	83 c4 0c             	add    esp,0xc
c0011ba4:	c3                   	ret    
c0011ba5:	b8 01 00 00 00       	mov    eax,0x1
c0011baa:	31 d2                	xor    edx,edx
c0011bac:	83 c4 0c             	add    esp,0xc
c0011baf:	c3                   	ret    

c0011bb0 <SysUSleep(regs*)>:
c0011bb0:	83 ec 1c             	sub    esp,0x1c
c0011bb3:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0011bb7:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c0011bba:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0011bbd:	6a 00                	push   0x0
c0011bbf:	6a 64                	push   0x64
c0011bc1:	52                   	push   edx
c0011bc2:	50                   	push   eax
c0011bc3:	e8 3c 00 01 00       	call   c0021c04 <__udivdi3>
c0011bc8:	83 c4 18             	add    esp,0x18
c0011bcb:	52                   	push   edx
c0011bcc:	50                   	push   eax
c0011bcd:	e8 ee 56 00 00       	call   c00172c0 <milliTenthSleep(unsigned long long)>
c0011bd2:	31 c0                	xor    eax,eax
c0011bd4:	31 d2                	xor    edx,edx
c0011bd6:	83 c4 1c             	add    esp,0x1c
c0011bd9:	c3                   	ret    

c0011bda <SysSpawn(regs*)>:
c0011bda:	56                   	push   esi
c0011bdb:	53                   	push   ebx
c0011bdc:	83 ec 04             	sub    esp,0x4
c0011bdf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011be3:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0011be6:	85 f6                	test   esi,esi
c0011be8:	75 0a                	jne    c0011bf4 <SysSpawn(regs*)+0x1a>
c0011bea:	83 c4 04             	add    esp,0x4
c0011bed:	31 c0                	xor    eax,eax
c0011bef:	5b                   	pop    ebx
c0011bf0:	31 d2                	xor    edx,edx
c0011bf2:	5e                   	pop    esi
c0011bf3:	c3                   	ret    
c0011bf4:	83 ec 0c             	sub    esp,0xc
c0011bf7:	68 c4 07 00 00       	push   0x7c4
c0011bfc:	e8 7b df ff ff       	call   c000fb7c <malloc>
c0011c01:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0011c04:	83 c4 10             	add    esp,0x10
c0011c07:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011c0a:	89 c6                	mov    esi,eax
c0011c0c:	31 c0                	xor    eax,eax
c0011c0e:	85 c9                	test   ecx,ecx
c0011c10:	74 08                	je     c0011c1a <SysSpawn(regs*)+0x40>
c0011c12:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011c17:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011c1a:	52                   	push   edx
c0011c1b:	50                   	push   eax
c0011c1c:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011c1f:	50                   	push   eax
c0011c20:	56                   	push   esi
c0011c21:	e8 86 4d 00 00       	call   c00169ac <Process::Process(char const*, Process*, char**)>
c0011c26:	83 c4 10             	add    esp,0x10
c0011c29:	80 be be 07 00 00 00 	cmp    BYTE PTR [esi+0x7be],0x0
c0011c30:	75 b8                	jne    c0011bea <SysSpawn(regs*)+0x10>
c0011c32:	83 ec 0c             	sub    esp,0xc
c0011c35:	56                   	push   esi
c0011c36:	e8 29 53 00 00       	call   c0016f64 <Process::createUserThread()>
c0011c3b:	8b 06                	mov    eax,DWORD PTR [esi]
c0011c3d:	83 c4 10             	add    esp,0x10
c0011c40:	83 c4 04             	add    esp,0x4
c0011c43:	5b                   	pop    ebx
c0011c44:	89 c2                	mov    edx,eax
c0011c46:	c1 fa 1f             	sar    edx,0x1f
c0011c49:	5e                   	pop    esi
c0011c4a:	c3                   	ret    

c0011c4b <SysGetEnv(regs*)>:
c0011c4b:	57                   	push   edi
c0011c4c:	56                   	push   esi
c0011c4d:	53                   	push   ebx
c0011c4e:	83 ec 1c             	sub    esp,0x1c
c0011c51:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011c56:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011c5a:	8b 48 40             	mov    ecx,DWORD PTR [eax+0x40]
c0011c5d:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0011c60:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0011c63:	51                   	push   ecx
c0011c64:	e8 38 cc ff ff       	call   c000e8a1 <KeGetProcessTotalEnvCount(Process*)>
c0011c69:	83 c4 10             	add    esp,0x10
c0011c6c:	39 c7                	cmp    edi,eax
c0011c6e:	7c 12                	jl     c0011c82 <SysGetEnv(regs*)+0x37>
c0011c70:	31 c0                	xor    eax,eax
c0011c72:	31 d2                	xor    edx,edx
c0011c74:	85 f6                	test   esi,esi
c0011c76:	74 03                	je     c0011c7b <SysGetEnv(regs*)+0x30>
c0011c78:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0011c7b:	83 c4 10             	add    esp,0x10
c0011c7e:	5b                   	pop    ebx
c0011c7f:	5e                   	pop    esi
c0011c80:	5f                   	pop    edi
c0011c81:	c3                   	ret    
c0011c82:	8d 44 24 08          	lea    eax,[esp+0x8]
c0011c86:	83 ec 04             	sub    esp,0x4
c0011c89:	57                   	push   edi
c0011c8a:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0011c90:	8b 7a 40             	mov    edi,DWORD PTR [edx+0x40]
c0011c93:	57                   	push   edi
c0011c94:	50                   	push   eax
c0011c95:	e8 27 cc ff ff       	call   c000e8c1 <KeGetProcessEnvPair(Process*, int)>
c0011c9a:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011c9d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011ca1:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0011ca5:	83 c4 0c             	add    esp,0xc
c0011ca8:	85 d2                	test   edx,edx
c0011caa:	75 23                	jne    c0011ccf <SysGetEnv(regs*)+0x84>
c0011cac:	83 ec 0c             	sub    esp,0xc
c0011caf:	50                   	push   eax
c0011cb0:	e8 cb e8 fe ff       	call   c0000580 <strlen>
c0011cb5:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011cb8:	89 c3                	mov    ebx,eax
c0011cba:	e8 c1 e8 fe ff       	call   c0000580 <strlen>
c0011cbf:	83 c4 10             	add    esp,0x10
c0011cc2:	31 d2                	xor    edx,edx
c0011cc4:	83 c4 10             	add    esp,0x10
c0011cc7:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0011ccb:	5b                   	pop    ebx
c0011ccc:	5e                   	pop    esi
c0011ccd:	5f                   	pop    edi
c0011cce:	c3                   	ret    
c0011ccf:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0011cd2:	83 ec 08             	sub    esp,0x8
c0011cd5:	50                   	push   eax
c0011cd6:	56                   	push   esi
c0011cd7:	e8 74 e9 fe ff       	call   c0000650 <strcpy>
c0011cdc:	58                   	pop    eax
c0011cdd:	5a                   	pop    edx
c0011cde:	68 dd 46 02 c0       	push   0xc00246dd
c0011ce3:	56                   	push   esi
c0011ce4:	e8 87 eb fe ff       	call   c0000870 <strcat>
c0011ce9:	59                   	pop    ecx
c0011cea:	5b                   	pop    ebx
c0011ceb:	57                   	push   edi
c0011cec:	56                   	push   esi
c0011ced:	e8 7e eb fe ff       	call   c0000870 <strcat>
c0011cf2:	83 c4 10             	add    esp,0x10
c0011cf5:	31 c0                	xor    eax,eax
c0011cf7:	83 c4 10             	add    esp,0x10
c0011cfa:	31 d2                	xor    edx,edx
c0011cfc:	5b                   	pop    ebx
c0011cfd:	5e                   	pop    esi
c0011cfe:	5f                   	pop    edi
c0011cff:	c3                   	ret    

c0011d00 <SysSetFatAttrib(regs*)>:
c0011d00:	57                   	push   edi
c0011d01:	56                   	push   esi
c0011d02:	53                   	push   ebx
c0011d03:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011d07:	83 ec 0c             	sub    esp,0xc
c0011d0a:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0011d0d:	68 14 01 00 00       	push   0x114
c0011d12:	e8 65 de ff ff       	call   c000fb7c <malloc>
c0011d17:	83 c4 0c             	add    esp,0xc
c0011d1a:	89 c3                	mov    ebx,eax
c0011d1c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011d21:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011d24:	50                   	push   eax
c0011d25:	57                   	push   edi
c0011d26:	53                   	push   ebx
c0011d27:	e8 5c 64 ff ff       	call   c0008188 <File::File(char const*, Process*)>
c0011d2c:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0011d2f:	83 c4 0c             	add    esp,0xc
c0011d32:	0f b6 d4             	movzx  edx,ah
c0011d35:	0f b6 c0             	movzx  eax,al
c0011d38:	52                   	push   edx
c0011d39:	50                   	push   eax
c0011d3a:	53                   	push   ebx
c0011d3b:	e8 ce 66 ff ff       	call   c000840e <File::chfatattr(unsigned char, unsigned char)>
c0011d40:	83 c4 10             	add    esp,0x10
c0011d43:	85 db                	test   ebx,ebx
c0011d45:	89 c6                	mov    esi,eax
c0011d47:	74 0c                	je     c0011d55 <SysSetFatAttrib(regs*)+0x55>
c0011d49:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011d4b:	83 ec 0c             	sub    esp,0xc
c0011d4e:	53                   	push   ebx
c0011d4f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011d52:	83 c4 10             	add    esp,0x10
c0011d55:	5b                   	pop    ebx
c0011d56:	31 c0                	xor    eax,eax
c0011d58:	85 f6                	test   esi,esi
c0011d5a:	0f 95 c0             	setne  al
c0011d5d:	31 d2                	xor    edx,edx
c0011d5f:	5e                   	pop    esi
c0011d60:	f7 d8                	neg    eax
c0011d62:	83 d2 00             	adc    edx,0x0
c0011d65:	f7 da                	neg    edx
c0011d67:	5f                   	pop    edi
c0011d68:	c3                   	ret    

c0011d69 <SysShutdown(regs*)>:
c0011d69:	83 ec 1c             	sub    esp,0x1c
c0011d6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011d70:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0011d73:	85 c9                	test   ecx,ecx
c0011d75:	74 18                	je     c0011d8f <SysShutdown(regs*)+0x26>
c0011d77:	83 f9 01             	cmp    ecx,0x1
c0011d7a:	74 26                	je     c0011da2 <SysShutdown(regs*)+0x39>
c0011d7c:	83 f9 02             	cmp    ecx,0x2
c0011d7f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011d84:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011d89:	74 24                	je     c0011daf <SysShutdown(regs*)+0x46>
c0011d8b:	83 c4 1c             	add    esp,0x1c
c0011d8e:	c3                   	ret    
c0011d8f:	e8 b2 c4 ff ff       	call   c000e246 <KeShutdown()>
c0011d94:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011d99:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011d9e:	83 c4 1c             	add    esp,0x1c
c0011da1:	c3                   	ret    
c0011da2:	e8 c3 c4 ff ff       	call   c000e26a <KeSleep()>
c0011da7:	31 c0                	xor    eax,eax
c0011da9:	31 d2                	xor    edx,edx
c0011dab:	83 c4 1c             	add    esp,0x1c
c0011dae:	c3                   	ret    
c0011daf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011db3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011db7:	e8 ba c4 ff ff       	call   c000e276 <KeRestart()>
c0011dbc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011dc0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011dc4:	eb c5                	jmp    c0011d8b <SysShutdown(regs*)+0x22>

c0011dc6 <SysPipe(regs*)>:
c0011dc6:	57                   	push   edi
c0011dc7:	56                   	push   esi
c0011dc8:	53                   	push   ebx
c0011dc9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011dcd:	83 ec 0c             	sub    esp,0xc
c0011dd0:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0011dd3:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0011dd6:	6a 20                	push   0x20
c0011dd8:	e8 9f dd ff ff       	call   c000fb7c <malloc>
c0011ddd:	89 c3                	mov    ebx,eax
c0011ddf:	58                   	pop    eax
c0011de0:	5a                   	pop    edx
c0011de1:	68 00 50 00 00       	push   0x5000
c0011de6:	53                   	push   ebx
c0011de7:	e8 1a e9 ff ff       	call   c0010706 <Pipe::Pipe(int)>
c0011dec:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011def:	e8 e4 10 00 00       	call   c0012ed8 <UnixFile::getFileDescriptor()>
c0011df4:	89 07                	mov    DWORD PTR [edi],eax
c0011df6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011df9:	e8 da 10 00 00       	call   c0012ed8 <UnixFile::getFileDescriptor()>
c0011dfe:	83 c4 10             	add    esp,0x10
c0011e01:	31 d2                	xor    edx,edx
c0011e03:	89 06                	mov    DWORD PTR [esi],eax
c0011e05:	31 c0                	xor    eax,eax
c0011e07:	5b                   	pop    ebx
c0011e08:	5e                   	pop    esi
c0011e09:	5f                   	pop    edi
c0011e0a:	c3                   	ret    

c0011e0b <SysGetUnixTime(regs*)>:
c0011e0b:	83 ec 0c             	sub    esp,0xc
c0011e0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e12:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011e15:	83 f8 01             	cmp    eax,0x1
c0011e18:	74 34                	je     c0011e4e <SysGetUnixTime(regs*)+0x43>
c0011e1a:	83 f8 02             	cmp    eax,0x2
c0011e1d:	74 17                	je     c0011e36 <SysGetUnixTime(regs*)+0x2b>
c0011e1f:	a1 d4 d0 02 c0       	mov    eax,ds:0xc002d0d4
c0011e24:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0011e2a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011e2e:	83 c4 0c             	add    esp,0xc
c0011e31:	e9 04 73 ff ff       	jmp    c000913a <Clock::timeInSecondsLocal()>
c0011e36:	6b 0d 54 cb 02 c0 64 	imul   ecx,DWORD PTR ds:0xc002cb54,0x64
c0011e3d:	b8 64 00 00 00       	mov    eax,0x64
c0011e42:	f7 25 50 cb 02 c0    	mul    DWORD PTR ds:0xc002cb50
c0011e48:	83 c4 0c             	add    esp,0xc
c0011e4b:	01 ca                	add    edx,ecx
c0011e4d:	c3                   	ret    
c0011e4e:	a1 d4 d0 02 c0       	mov    eax,ds:0xc002d0d4
c0011e53:	83 ec 0c             	sub    esp,0xc
c0011e56:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0011e5c:	50                   	push   eax
c0011e5d:	e8 d8 72 ff ff       	call   c000913a <Clock::timeInSecondsLocal()>
c0011e62:	83 c4 10             	add    esp,0x10
c0011e65:	83 c4 0c             	add    esp,0xc
c0011e68:	69 ca 40 42 0f 00    	imul   ecx,edx,0xf4240
c0011e6e:	ba 40 42 0f 00       	mov    edx,0xf4240
c0011e73:	f7 e2                	mul    edx
c0011e75:	01 ca                	add    edx,ecx
c0011e77:	c3                   	ret    

c0011e78 <string_ends_with(char const*, char const*)>:
c0011e78:	57                   	push   edi
c0011e79:	56                   	push   esi
c0011e7a:	53                   	push   ebx
c0011e7b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011e7f:	83 ec 0c             	sub    esp,0xc
c0011e82:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0011e86:	53                   	push   ebx
c0011e87:	e8 f4 e6 fe ff       	call   c0000580 <strlen>
c0011e8c:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011e8f:	89 c6                	mov    esi,eax
c0011e91:	e8 ea e6 fe ff       	call   c0000580 <strlen>
c0011e96:	83 c4 10             	add    esp,0x10
c0011e99:	31 d2                	xor    edx,edx
c0011e9b:	39 c6                	cmp    esi,eax
c0011e9d:	7d 06                	jge    c0011ea5 <string_ends_with(char const*, char const*)+0x2d>
c0011e9f:	5b                   	pop    ebx
c0011ea0:	89 d0                	mov    eax,edx
c0011ea2:	5e                   	pop    esi
c0011ea3:	5f                   	pop    edi
c0011ea4:	c3                   	ret    
c0011ea5:	83 ec 08             	sub    esp,0x8
c0011ea8:	29 c6                	sub    esi,eax
c0011eaa:	57                   	push   edi
c0011eab:	01 f3                	add    ebx,esi
c0011ead:	53                   	push   ebx
c0011eae:	e8 cd e8 fe ff       	call   c0000780 <strcmp>
c0011eb3:	83 c4 10             	add    esp,0x10
c0011eb6:	31 d2                	xor    edx,edx
c0011eb8:	5b                   	pop    ebx
c0011eb9:	5e                   	pop    esi
c0011eba:	85 c0                	test   eax,eax
c0011ebc:	5f                   	pop    edi
c0011ebd:	0f 94 c2             	sete   dl
c0011ec0:	89 d0                	mov    eax,edx
c0011ec2:	c3                   	ret    

c0011ec3 <SysOpen(regs*)>:
c0011ec3:	56                   	push   esi
c0011ec4:	53                   	push   ebx
c0011ec5:	81 ec 04 01 00 00    	sub    esp,0x104
c0011ecb:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0011ed2:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011ed5:	85 c0                	test   eax,eax
c0011ed7:	0f 84 c4 01 00 00    	je     c00120a1 <SysOpen(regs*)+0x1de>
c0011edd:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011ee0:	85 c0                	test   eax,eax
c0011ee2:	0f 84 b9 01 00 00    	je     c00120a1 <SysOpen(regs*)+0x1de>
c0011ee8:	6a 00                	push   0x0
c0011eea:	68 df 46 02 c0       	push   0xc00246df
c0011eef:	50                   	push   eax
c0011ef0:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0011ef4:	56                   	push   esi
c0011ef5:	e8 62 5f ff ff       	call   c0007e5c <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0011efa:	89 34 24             	mov    DWORD PTR [esp],esi
c0011efd:	e8 7e e6 fe ff       	call   c0000580 <strlen>
c0011f02:	83 c4 10             	add    esp,0x10
c0011f05:	83 e8 01             	sub    eax,0x1
c0011f08:	74 29                	je     c0011f33 <SysOpen(regs*)+0x70>
c0011f0a:	0f be 14 04          	movsx  edx,BYTE PTR [esp+eax*1]
c0011f0e:	83 fa 2e             	cmp    edx,0x2e
c0011f11:	74 1c                	je     c0011f2f <SysOpen(regs*)+0x6c>
c0011f13:	83 fa 3a             	cmp    edx,0x3a
c0011f16:	74 17                	je     c0011f2f <SysOpen(regs*)+0x6c>
c0011f18:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0011f1c:	83 e8 01             	sub    eax,0x1
c0011f1f:	74 12                	je     c0011f33 <SysOpen(regs*)+0x70>
c0011f21:	0f be 14 06          	movsx  edx,BYTE PTR [esi+eax*1]
c0011f25:	83 fa 3a             	cmp    edx,0x3a
c0011f28:	74 05                	je     c0011f2f <SysOpen(regs*)+0x6c>
c0011f2a:	83 fa 2e             	cmp    edx,0x2e
c0011f2d:	75 e9                	jne    c0011f18 <SysOpen(regs*)+0x55>
c0011f2f:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c0011f33:	83 ec 08             	sub    esp,0x8
c0011f36:	68 e3 46 02 c0       	push   0xc00246e3
c0011f3b:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011f3e:	50                   	push   eax
c0011f3f:	e8 34 ff ff ff       	call   c0011e78 <string_ends_with(char const*, char const*)>
c0011f44:	83 c4 10             	add    esp,0x10
c0011f47:	85 c0                	test   eax,eax
c0011f49:	74 1d                	je     c0011f68 <SysOpen(regs*)+0xa5>
c0011f4b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011f4e:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0011f54:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011f5b:	81 c4 04 01 00 00    	add    esp,0x104
c0011f61:	31 c0                	xor    eax,eax
c0011f63:	5b                   	pop    ebx
c0011f64:	31 d2                	xor    edx,edx
c0011f66:	5e                   	pop    esi
c0011f67:	c3                   	ret    
c0011f68:	83 ec 08             	sub    esp,0x8
c0011f6b:	68 e8 46 02 c0       	push   0xc00246e8
c0011f70:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011f73:	50                   	push   eax
c0011f74:	e8 ff fe ff ff       	call   c0011e78 <string_ends_with(char const*, char const*)>
c0011f79:	83 c4 10             	add    esp,0x10
c0011f7c:	85 c0                	test   eax,eax
c0011f7e:	75 cb                	jne    c0011f4b <SysOpen(regs*)+0x88>
c0011f80:	83 ec 08             	sub    esp,0x8
c0011f83:	68 e4 46 02 c0       	push   0xc00246e4
c0011f88:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011f8b:	50                   	push   eax
c0011f8c:	e8 ef e7 fe ff       	call   c0000780 <strcmp>
c0011f91:	83 c4 10             	add    esp,0x10
c0011f94:	85 c0                	test   eax,eax
c0011f96:	74 b3                	je     c0011f4b <SysOpen(regs*)+0x88>
c0011f98:	83 ec 08             	sub    esp,0x8
c0011f9b:	68 e3 46 02 c0       	push   0xc00246e3
c0011fa0:	56                   	push   esi
c0011fa1:	e8 d2 fe ff ff       	call   c0011e78 <string_ends_with(char const*, char const*)>
c0011fa6:	83 c4 10             	add    esp,0x10
c0011fa9:	85 c0                	test   eax,eax
c0011fab:	75 9e                	jne    c0011f4b <SysOpen(regs*)+0x88>
c0011fad:	83 ec 08             	sub    esp,0x8
c0011fb0:	68 ed 46 02 c0       	push   0xc00246ed
c0011fb5:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011fb8:	50                   	push   eax
c0011fb9:	e8 ba fe ff ff       	call   c0011e78 <string_ends_with(char const*, char const*)>
c0011fbe:	83 c4 10             	add    esp,0x10
c0011fc1:	85 c0                	test   eax,eax
c0011fc3:	0f 85 eb 00 00 00    	jne    c00120b4 <SysOpen(regs*)+0x1f1>
c0011fc9:	83 ec 08             	sub    esp,0x8
c0011fcc:	68 f2 46 02 c0       	push   0xc00246f2
c0011fd1:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011fd4:	50                   	push   eax
c0011fd5:	e8 9e fe ff ff       	call   c0011e78 <string_ends_with(char const*, char const*)>
c0011fda:	83 c4 10             	add    esp,0x10
c0011fdd:	85 c0                	test   eax,eax
c0011fdf:	0f 85 cf 00 00 00    	jne    c00120b4 <SysOpen(regs*)+0x1f1>
c0011fe5:	83 ec 08             	sub    esp,0x8
c0011fe8:	68 ee 46 02 c0       	push   0xc00246ee
c0011fed:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0011ff0:	51                   	push   ecx
c0011ff1:	e8 8a e7 fe ff       	call   c0000780 <strcmp>
c0011ff6:	83 c4 10             	add    esp,0x10
c0011ff9:	85 c0                	test   eax,eax
c0011ffb:	0f 84 b3 00 00 00    	je     c00120b4 <SysOpen(regs*)+0x1f1>
c0012001:	83 ec 08             	sub    esp,0x8
c0012004:	68 ed 46 02 c0       	push   0xc00246ed
c0012009:	56                   	push   esi
c001200a:	e8 69 fe ff ff       	call   c0011e78 <string_ends_with(char const*, char const*)>
c001200f:	83 c4 10             	add    esp,0x10
c0012012:	85 c0                	test   eax,eax
c0012014:	0f 85 9a 00 00 00    	jne    c00120b4 <SysOpen(regs*)+0x1f1>
c001201a:	83 ec 0c             	sub    esp,0xc
c001201d:	68 14 01 00 00       	push   0x114
c0012022:	e8 55 db ff ff       	call   c000fb7c <malloc>
c0012027:	83 c4 0c             	add    esp,0xc
c001202a:	89 c6                	mov    esi,eax
c001202c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012031:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0012034:	50                   	push   eax
c0012035:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0012038:	52                   	push   edx
c0012039:	56                   	push   esi
c001203a:	e8 49 61 ff ff       	call   c0008188 <File::File(char const*, Process*)>
c001203f:	83 c4 10             	add    esp,0x10
c0012042:	85 f6                	test   esi,esi
c0012044:	74 5b                	je     c00120a1 <SysOpen(regs*)+0x1de>
c0012046:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0012049:	0f b6 c2             	movzx  eax,dl
c001204c:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001204f:	89 d0                	mov    eax,edx
c0012051:	83 e0 01             	and    eax,0x1
c0012054:	f6 c2 02             	test   dl,0x2
c0012057:	74 03                	je     c001205c <SysOpen(regs*)+0x199>
c0012059:	83 c8 02             	or     eax,0x2
c001205c:	f6 c2 04             	test   dl,0x4
c001205f:	74 03                	je     c0012064 <SysOpen(regs*)+0x1a1>
c0012061:	83 c8 04             	or     eax,0x4
c0012064:	f6 c2 08             	test   dl,0x8
c0012067:	74 03                	je     c001206c <SysOpen(regs*)+0x1a9>
c0012069:	83 c8 0a             	or     eax,0xa
c001206c:	80 e2 10             	and    dl,0x10
c001206f:	74 03                	je     c0012074 <SysOpen(regs*)+0x1b1>
c0012071:	83 c8 12             	or     eax,0x12
c0012074:	83 ec 08             	sub    esp,0x8
c0012077:	50                   	push   eax
c0012078:	56                   	push   esi
c0012079:	e8 28 61 ff ff       	call   c00081a6 <File::open(FileOpenMode)>
c001207e:	83 c4 10             	add    esp,0x10
c0012081:	85 c0                	test   eax,eax
c0012083:	75 1c                	jne    c00120a1 <SysOpen(regs*)+0x1de>
c0012085:	83 ec 0c             	sub    esp,0xc
c0012088:	56                   	push   esi
c0012089:	e8 4a 0e 00 00       	call   c0012ed8 <UnixFile::getFileDescriptor()>
c001208e:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0012091:	83 c4 10             	add    esp,0x10
c0012094:	89 02                	mov    DWORD PTR [edx],eax
c0012096:	c1 f8 1f             	sar    eax,0x1f
c0012099:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001209c:	e9 ba fe ff ff       	jmp    c0011f5b <SysOpen(regs*)+0x98>
c00120a1:	81 c4 04 01 00 00    	add    esp,0x104
c00120a7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00120ac:	5b                   	pop    ebx
c00120ad:	ba ff ff ff ff       	mov    edx,0xffffffff
c00120b2:	5e                   	pop    esi
c00120b3:	c3                   	ret    
c00120b4:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00120b7:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c00120bd:	e9 92 fe ff ff       	jmp    c0011f54 <SysOpen(regs*)+0x91>

c00120c2 <KeSystemCall(regs*, void*)>:
c00120c2:	53                   	push   ebx
c00120c3:	83 ec 08             	sub    esp,0x8
c00120c6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00120ca:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00120cd:	83 f8 48             	cmp    eax,0x48
c00120d0:	77 16                	ja     c00120e8 <KeSystemCall(regs*, void*)+0x26>
c00120d2:	8b 14 85 e0 6d 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9220]
c00120d9:	85 d2                	test   edx,edx
c00120db:	74 0b                	je     c00120e8 <KeSystemCall(regs*, void*)+0x26>
c00120dd:	83 ec 0c             	sub    esp,0xc
c00120e0:	53                   	push   ebx
c00120e1:	ff d2                	call   edx
c00120e3:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00120e6:	eb 0d                	jmp    c00120f5 <KeSystemCall(regs*, void*)+0x33>
c00120e8:	52                   	push   edx
c00120e9:	52                   	push   edx
c00120ea:	50                   	push   eax
c00120eb:	68 f7 46 02 c0       	push   0xc00246f7
c00120f0:	e8 71 4e ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00120f5:	83 c4 10             	add    esp,0x10
c00120f8:	b8 ef be ad de       	mov    eax,0xdeadbeef
c00120fd:	83 c4 08             	add    esp,0x8
c0012100:	31 d2                	xor    edx,edx
c0012102:	5b                   	pop    ebx
c0012103:	c3                   	ret    

c0012104 <VgaText::isAtty()>:
c0012104:	b0 01                	mov    al,0x1
c0012106:	c3                   	ret    
c0012107:	90                   	nop

c0012108 <VgaText::~VgaText()>:
c0012108:	83 ec 0c             	sub    esp,0xc
c001210b:	ba 74 47 02 c0       	mov    edx,0xc0024774
c0012110:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012114:	89 10                	mov    DWORD PTR [eax],edx
c0012116:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001211a:	83 ec 0c             	sub    esp,0xc
c001211d:	50                   	push   eax
c001211e:	e8 a3 0f 00 00       	call   c00130c6 <UnixFile::~UnixFile()>
c0012123:	83 c4 10             	add    esp,0x10
c0012126:	90                   	nop
c0012127:	83 c4 0c             	add    esp,0xc
c001212a:	c3                   	ret    
c001212b:	90                   	nop

c001212c <VgaText::~VgaText()>:
c001212c:	83 ec 0c             	sub    esp,0xc
c001212f:	83 ec 0c             	sub    esp,0xc
c0012132:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012136:	e8 cd ff ff ff       	call   c0012108 <VgaText::~VgaText()>
c001213b:	83 c4 10             	add    esp,0x10
c001213e:	83 ec 08             	sub    esp,0x8
c0012141:	68 84 01 00 00       	push   0x184
c0012146:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001214a:	e8 a6 b1 ff ff       	call   c000d2f5 <operator delete(void*, unsigned long)>
c001214f:	83 c4 10             	add    esp,0x10
c0012152:	83 c4 0c             	add    esp,0xc
c0012155:	c3                   	ret    

c0012156 <VgaText::read(unsigned long long, void*, int*)>:
c0012156:	83 ec 10             	sub    esp,0x10
c0012159:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001215d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0012161:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012165:	e8 df 83 ff ff       	call   c000a549 <readKeyboard(VgaText*, char*, unsigned long)>
c001216a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001216e:	89 02                	mov    DWORD PTR [edx],eax
c0012170:	31 c0                	xor    eax,eax
c0012172:	83 c4 1c             	add    esp,0x1c
c0012175:	c3                   	ret    

c0012176 <setTerminalScrollLock(bool)>:
c0012176:	c3                   	ret    

c0012177 <doTerminalCycle()>:
c0012177:	c3                   	ret    

c0012178 <addToTerminalCycle(VgaText*)>:
c0012178:	c3                   	ret    

c0012179 <scrollTerminalScrollLock(int)>:
c0012179:	c3                   	ret    

c001217a <VgaText::updateTitle()>:
c001217a:	c3                   	ret    
c001217b:	90                   	nop

c001217c <VgaText::load()>:
c001217c:	c3                   	ret    
c001217d:	90                   	nop

c001217e <VgaText::updateCursor()>:
c001217e:	83 ec 14             	sub    esp,0x14
c0012181:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012185:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0012188:	ff 70 14             	push   DWORD PTR [eax+0x14]
c001218b:	e8 90 97 00 00       	call   c001b920 <HalConsoleCursorUpdate(int, int)>
c0012190:	83 c4 1c             	add    esp,0x1c
c0012193:	c3                   	ret    

c0012194 <VgaText::doANSI_SGR(int)>:
c0012194:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012198:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001219c:	85 d2                	test   edx,edx
c001219e:	75 0b                	jne    c00121ab <VgaText::doANSI_SGR(int)+0x17>
c00121a0:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00121a3:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00121a6:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00121a9:	eb 59                	jmp    c0012204 <VgaText::doANSI_SGR(int)+0x70>
c00121ab:	83 fa 07             	cmp    edx,0x7
c00121ae:	75 0b                	jne    c00121bb <VgaText::doANSI_SGR(int)+0x27>
c00121b0:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c00121b3:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c00121b6:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c00121b9:	eb 49                	jmp    c0012204 <VgaText::doANSI_SGR(int)+0x70>
c00121bb:	83 fa 1b             	cmp    edx,0x1b
c00121be:	74 e0                	je     c00121a0 <VgaText::doANSI_SGR(int)+0xc>
c00121c0:	8d 4a e2             	lea    ecx,[edx-0x1e]
c00121c3:	83 f9 07             	cmp    ecx,0x7
c00121c6:	77 09                	ja     c00121d1 <VgaText::doANSI_SGR(int)+0x3d>
c00121c8:	8b 14 8d 40 6f 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd90c0]
c00121cf:	eb 20                	jmp    c00121f1 <VgaText::doANSI_SGR(int)+0x5d>
c00121d1:	8d 4a d8             	lea    ecx,[edx-0x28]
c00121d4:	83 f9 07             	cmp    ecx,0x7
c00121d7:	77 09                	ja     c00121e2 <VgaText::doANSI_SGR(int)+0x4e>
c00121d9:	8b 14 8d 40 6f 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd90c0]
c00121e0:	eb 22                	jmp    c0012204 <VgaText::doANSI_SGR(int)+0x70>
c00121e2:	8d 4a a6             	lea    ecx,[edx-0x5a]
c00121e5:	83 f9 07             	cmp    ecx,0x7
c00121e8:	77 0b                	ja     c00121f5 <VgaText::doANSI_SGR(int)+0x61>
c00121ea:	8b 14 95 f8 6d 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9208]
c00121f1:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00121f4:	c3                   	ret    
c00121f5:	8d 4a 9c             	lea    ecx,[edx-0x64]
c00121f8:	83 f9 07             	cmp    ecx,0x7
c00121fb:	77 0a                	ja     c0012207 <VgaText::doANSI_SGR(int)+0x73>
c00121fd:	8b 14 95 d0 6d 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9230]
c0012204:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0012207:	c3                   	ret    

c0012208 <VgaText::setDefaultBgColour(VgaColour)>:
c0012208:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001220c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012210:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0012213:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0012216:	c3                   	ret    
c0012217:	90                   	nop

c0012218 <VgaText::setDefaultFgColour(VgaColour)>:
c0012218:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001221c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012220:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0012223:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0012226:	c3                   	ret    
c0012227:	90                   	nop

c0012228 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c0012228:	53                   	push   ebx
c0012229:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001222d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012231:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012235:	51                   	push   ecx
c0012236:	e8 cd ff ff ff       	call   c0012208 <VgaText::setDefaultBgColour(VgaColour)>
c001223b:	58                   	pop    eax
c001223c:	5a                   	pop    edx
c001223d:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0012241:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0012245:	5b                   	pop    ebx
c0012246:	eb d0                	jmp    c0012218 <VgaText::setDefaultFgColour(VgaColour)>

c0012248 <VgaText::setTitleTextColour(VgaColour)>:
c0012248:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001224c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012250:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0012253:	c3                   	ret    

c0012254 <VgaText::setTitleColour(VgaColour)>:
c0012254:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012258:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001225c:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001225f:	c3                   	ret    

c0012260 <VgaText::setTitle(char*)>:
c0012260:	c3                   	ret    
c0012261:	90                   	nop

c0012262 <VgaText::combineColours(unsigned char, unsigned char)>:
c0012262:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012266:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001226b:	83 e0 0f             	and    eax,0xf
c001226e:	c1 e2 04             	shl    edx,0x4
c0012271:	09 d0                	or     eax,edx
c0012273:	c3                   	ret    

c0012274 <VgaText::scrollScreen()>:
c0012274:	55                   	push   ebp
c0012275:	57                   	push   edi
c0012276:	56                   	push   esi
c0012277:	be 01 00 00 00       	mov    esi,0x1
c001227c:	53                   	push   ebx
c001227d:	83 ec 0c             	sub    esp,0xc
c0012280:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012284:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0012287:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c001228d:	31 ff                	xor    edi,edi
c001228f:	01 e9                	add    ecx,ebp
c0012291:	8a 01                	mov    al,BYTE PTR [ecx]
c0012293:	83 fe 18             	cmp    esi,0x18
c0012296:	88 81 60 ff ff ff    	mov    BYTE PTR [ecx-0xa0],al
c001229c:	75 20                	jne    c00122be <VgaText::scrollScreen()+0x4a>
c001229e:	f7 c7 01 00 00 00    	test   edi,0x1
c00122a4:	74 15                	je     c00122bb <VgaText::scrollScreen()+0x47>
c00122a6:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c00122aa:	50                   	push   eax
c00122ab:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c00122af:	50                   	push   eax
c00122b0:	e8 ad ff ff ff       	call   c0012262 <VgaText::combineColours(unsigned char, unsigned char)>
c00122b5:	5a                   	pop    edx
c00122b6:	5a                   	pop    edx
c00122b7:	88 01                	mov    BYTE PTR [ecx],al
c00122b9:	eb 03                	jmp    c00122be <VgaText::scrollScreen()+0x4a>
c00122bb:	c6 01 20             	mov    BYTE PTR [ecx],0x20
c00122be:	47                   	inc    edi
c00122bf:	41                   	inc    ecx
c00122c0:	81 ff a0 00 00 00    	cmp    edi,0xa0
c00122c6:	75 c9                	jne    c0012291 <VgaText::scrollScreen()+0x1d>
c00122c8:	46                   	inc    esi
c00122c9:	83 fe 19             	cmp    esi,0x19
c00122cc:	75 b9                	jne    c0012287 <VgaText::scrollScreen()+0x13>
c00122ce:	39 1d d4 f1 02 c0    	cmp    DWORD PTR ds:0xc002f1d4,ebx
c00122d4:	75 1f                	jne    c00122f5 <VgaText::scrollScreen()+0x81>
c00122d6:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c00122da:	74 05                	je     c00122e1 <VgaText::scrollScreen()+0x6d>
c00122dc:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c00122df:	eb 14                	jmp    c00122f5 <VgaText::scrollScreen()+0x81>
c00122e1:	50                   	push   eax
c00122e2:	50                   	push   eax
c00122e3:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c00122e7:	50                   	push   eax
c00122e8:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c00122ec:	50                   	push   eax
c00122ed:	e8 c2 94 00 00       	call   c001b7b4 <HalConsoleScroll(int, int)>
c00122f2:	83 c4 10             	add    esp,0x10
c00122f5:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00122f9:	83 c4 0c             	add    esp,0xc
c00122fc:	5b                   	pop    ebx
c00122fd:	5e                   	pop    esi
c00122fe:	5f                   	pop    edi
c00122ff:	5d                   	pop    ebp
c0012300:	e9 79 fe ff ff       	jmp    c001217e <VgaText::updateCursor()>
c0012305:	90                   	nop

c0012306 <VgaText::combineCharAndColour(char, unsigned char)>:
c0012306:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001230b:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c0012310:	c1 e0 08             	shl    eax,0x8
c0012313:	09 d0                	or     eax,edx
c0012315:	c3                   	ret    

c0012316 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c0012316:	55                   	push   ebp
c0012317:	57                   	push   edi
c0012318:	56                   	push   esi
c0012319:	53                   	push   ebx
c001231a:	83 ec 1c             	sub    esp,0x1c
c001231d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012321:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0012325:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0012329:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001232d:	8b 6f 0c             	mov    ebp,DWORD PTR [edi+0xc]
c0012330:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012334:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012338:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001233c:	85 ed                	test   ebp,ebp
c001233e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012342:	75 14                	jne    c0012358 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x42>
c0012344:	c7 44 24 30 0b 47 02 c0 	mov    DWORD PTR [esp+0x30],0xc002470b
c001234c:	83 c4 1c             	add    esp,0x1c
c001234f:	5b                   	pop    ebx
c0012350:	5e                   	pop    esi
c0012351:	5f                   	pop    edi
c0012352:	5d                   	pop    ebp
c0012353:	e9 32 db ff ff       	jmp    c000fe8a <KePanic(char const*)>
c0012358:	50                   	push   eax
c0012359:	50                   	push   eax
c001235a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001235f:	50                   	push   eax
c0012360:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0012365:	50                   	push   eax
c0012366:	e8 f7 fe ff ff       	call   c0012262 <VgaText::combineColours(unsigned char, unsigned char)>
c001236b:	5a                   	pop    edx
c001236c:	5a                   	pop    edx
c001236d:	0f b6 c0             	movzx  eax,al
c0012370:	0f be c9             	movsx  ecx,cl
c0012373:	50                   	push   eax
c0012374:	51                   	push   ecx
c0012375:	e8 8c ff ff ff       	call   c0012306 <VgaText::combineCharAndColour(char, unsigned char)>
c001237a:	6b d6 50             	imul   edx,esi,0x50
c001237d:	83 c4 10             	add    esp,0x10
c0012380:	01 da                	add    edx,ebx
c0012382:	0f b7 d2             	movzx  edx,dx
c0012385:	66 89 44 55 00       	mov    WORD PTR [ebp+edx*2+0x0],ax
c001238a:	39 3d d4 f1 02 c0    	cmp    DWORD PTR ds:0xc002f1d4,edi
c0012390:	75 28                	jne    c00123ba <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0xa4>
c0012392:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0012396:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001239a:	89 5c 24 3c          	mov    DWORD PTR [esp+0x3c],ebx
c001239e:	89 4c 24 30          	mov    DWORD PTR [esp+0x30],ecx
c00123a2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00123a6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00123aa:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00123ae:	83 c4 1c             	add    esp,0x1c
c00123b1:	5b                   	pop    ebx
c00123b2:	5e                   	pop    esi
c00123b3:	5f                   	pop    edi
c00123b4:	5d                   	pop    ebp
c00123b5:	e9 02 95 00 00       	jmp    c001b8bc <HalConsoleWriteCharacter(char, int, int, int, int)>
c00123ba:	83 c4 1c             	add    esp,0x1c
c00123bd:	5b                   	pop    ebx
c00123be:	5e                   	pop    esi
c00123bf:	5f                   	pop    edi
c00123c0:	5d                   	pop    ebp
c00123c1:	c3                   	ret    

c00123c2 <VgaText::getCursorX()>:
c00123c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00123c6:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00123c9:	c3                   	ret    

c00123ca <VgaText::getCursorY()>:
c00123ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00123ce:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00123d1:	c3                   	ret    

c00123d2 <VgaText::setCursor(int, int)>:
c00123d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00123d6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00123da:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00123dd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00123e1:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00123e4:	e9 95 fd ff ff       	jmp    c001217e <VgaText::updateCursor()>

c00123e9 <setActiveTerminal(VgaText*)>:
c00123e9:	53                   	push   ebx
c00123ea:	83 ec 08             	sub    esp,0x8
c00123ed:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00123f1:	85 db                	test   ebx,ebx
c00123f3:	75 11                	jne    c0012406 <setActiveTerminal(VgaText*)+0x1d>
c00123f5:	c7 44 24 10 1b 47 02 c0 	mov    DWORD PTR [esp+0x10],0xc002471b
c00123fd:	83 c4 08             	add    esp,0x8
c0012400:	5b                   	pop    ebx
c0012401:	e9 84 da ff ff       	jmp    c000fe8a <KePanic(char const*)>
c0012406:	a1 d4 f1 02 c0       	mov    eax,ds:0xc002f1d4
c001240b:	85 c0                	test   eax,eax
c001240d:	74 0c                	je     c001241b <setActiveTerminal(VgaText*)+0x32>
c001240f:	83 ec 0c             	sub    esp,0xc
c0012412:	50                   	push   eax
c0012413:	e8 66 fd ff ff       	call   c001217e <VgaText::updateCursor()>
c0012418:	83 c4 10             	add    esp,0x10
c001241b:	50                   	push   eax
c001241c:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c001241f:	89 1d d4 f1 02 c0    	mov    DWORD PTR ds:0xc002f1d4,ebx
c0012425:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0012428:	53                   	push   ebx
c0012429:	e8 a4 ff ff ff       	call   c00123d2 <VgaText::setCursor(int, int)>
c001242e:	83 c4 18             	add    esp,0x18
c0012431:	5b                   	pop    ebx
c0012432:	c3                   	ret    
c0012433:	90                   	nop

c0012434 <VgaText::clearScreen()>:
c0012434:	57                   	push   edi
c0012435:	56                   	push   esi
c0012436:	31 f6                	xor    esi,esi
c0012438:	53                   	push   ebx
c0012439:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001243d:	52                   	push   edx
c001243e:	6a 00                	push   0x0
c0012440:	6a 00                	push   0x0
c0012442:	53                   	push   ebx
c0012443:	e8 8a ff ff ff       	call   c00123d2 <VgaText::setCursor(int, int)>
c0012448:	83 c4 10             	add    esp,0x10
c001244b:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0012452:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c0012455:	7e 20                	jle    c0012477 <VgaText::clearScreen()+0x43>
c0012457:	31 ff                	xor    edi,edi
c0012459:	50                   	push   eax
c001245a:	50                   	push   eax
c001245b:	56                   	push   esi
c001245c:	57                   	push   edi
c001245d:	47                   	inc    edi
c001245e:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0012461:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0012464:	6a 20                	push   0x20
c0012466:	53                   	push   ebx
c0012467:	e8 aa fe ff ff       	call   c0012316 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c001246c:	83 c4 20             	add    esp,0x20
c001246f:	83 ff 50             	cmp    edi,0x50
c0012472:	75 e5                	jne    c0012459 <VgaText::clearScreen()+0x25>
c0012474:	46                   	inc    esi
c0012475:	eb db                	jmp    c0012452 <VgaText::clearScreen()+0x1e>
c0012477:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c001247e:	5b                   	pop    ebx
c001247f:	5e                   	pop    esi
c0012480:	5f                   	pop    edi
c0012481:	c3                   	ret    

c0012482 <VgaText::setCursorX(int)>:
c0012482:	83 ec 10             	sub    esp,0x10
c0012485:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012489:	ff 70 18             	push   DWORD PTR [eax+0x18]
c001248c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012490:	50                   	push   eax
c0012491:	e8 3c ff ff ff       	call   c00123d2 <VgaText::setCursor(int, int)>
c0012496:	83 c4 1c             	add    esp,0x1c
c0012499:	c3                   	ret    

c001249a <VgaText::setCursorY(int)>:
c001249a:	83 ec 10             	sub    esp,0x10
c001249d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00124a1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00124a5:	ff 70 14             	push   DWORD PTR [eax+0x14]
c00124a8:	50                   	push   eax
c00124a9:	e8 24 ff ff ff       	call   c00123d2 <VgaText::setCursor(int, int)>
c00124ae:	83 c4 1c             	add    esp,0x1c
c00124b1:	c3                   	ret    

c00124b2 <VgaText::incrementCursor(bool)>:
c00124b2:	56                   	push   esi
c00124b3:	53                   	push   ebx
c00124b4:	51                   	push   ecx
c00124b5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00124b9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00124bd:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00124c0:	40                   	inc    eax
c00124c1:	83 f8 50             	cmp    eax,0x50
c00124c4:	74 05                	je     c00124cb <VgaText::incrementCursor(bool)+0x19>
c00124c6:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00124c9:	eb 24                	jmp    c00124ef <VgaText::incrementCursor(bool)+0x3d>
c00124cb:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00124d2:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00124d5:	8d 50 01             	lea    edx,[eax+0x1]
c00124d8:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00124db:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00124de:	75 0f                	jne    c00124ef <VgaText::incrementCursor(bool)+0x3d>
c00124e0:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00124e3:	83 ec 0c             	sub    esp,0xc
c00124e6:	53                   	push   ebx
c00124e7:	e8 88 fd ff ff       	call   c0012274 <VgaText::scrollScreen()>
c00124ec:	83 c4 10             	add    esp,0x10
c00124ef:	89 f0                	mov    eax,esi
c00124f1:	84 c0                	test   al,al
c00124f3:	74 0c                	je     c0012501 <VgaText::incrementCursor(bool)+0x4f>
c00124f5:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00124f9:	5a                   	pop    edx
c00124fa:	5b                   	pop    ebx
c00124fb:	5e                   	pop    esi
c00124fc:	e9 7d fc ff ff       	jmp    c001217e <VgaText::updateCursor()>
c0012501:	58                   	pop    eax
c0012502:	5b                   	pop    ebx
c0012503:	5e                   	pop    esi
c0012504:	c3                   	ret    
c0012505:	90                   	nop

c0012506 <VgaText::decrementCursor(bool)>:
c0012506:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001250a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001250e:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0012511:	85 c0                	test   eax,eax
c0012513:	74 04                	je     c0012519 <VgaText::decrementCursor(bool)+0x13>
c0012515:	48                   	dec    eax
c0012516:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0012519:	84 c9                	test   cl,cl
c001251b:	74 09                	je     c0012526 <VgaText::decrementCursor(bool)+0x20>
c001251d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012521:	e9 58 fc ff ff       	jmp    c001217e <VgaText::updateCursor()>
c0012526:	c3                   	ret    
c0012527:	90                   	nop

c0012528 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0012528:	53                   	push   ebx
c0012529:	83 ec 08             	sub    esp,0x8
c001252c:	0f be 44 24 14       	movsx  eax,BYTE PTR [esp+0x14]
c0012531:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012535:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012539:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001253d:	83 f8 07             	cmp    eax,0x7
c0012540:	75 21                	jne    c0012563 <VgaText::putchar(char, VgaColour, VgaColour)+0x3b>
c0012542:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001254a:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c0012552:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c001255a:	83 c4 08             	add    esp,0x8
c001255d:	5b                   	pop    ebx
c001255e:	e9 c8 64 ff ff       	jmp    c0008a2b <KeBeep(int, int, bool)>
c0012563:	83 f8 0d             	cmp    eax,0xd
c0012566:	75 09                	jne    c0012571 <VgaText::putchar(char, VgaColour, VgaColour)+0x49>
c0012568:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001256f:	eb 2d                	jmp    c001259e <VgaText::putchar(char, VgaColour, VgaColour)+0x76>
c0012571:	83 f8 0a             	cmp    eax,0xa
c0012574:	75 31                	jne    c00125a7 <VgaText::putchar(char, VgaColour, VgaColour)+0x7f>
c0012576:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001257d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0012580:	8d 50 01             	lea    edx,[eax+0x1]
c0012583:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0012586:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0012589:	75 0f                	jne    c001259a <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c001258b:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c001258e:	83 ec 0c             	sub    esp,0xc
c0012591:	53                   	push   ebx
c0012592:	e8 dd fc ff ff       	call   c0012274 <VgaText::scrollScreen()>
c0012597:	83 c4 10             	add    esp,0x10
c001259a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001259e:	83 c4 08             	add    esp,0x8
c00125a1:	5b                   	pop    ebx
c00125a2:	e9 d7 fb ff ff       	jmp    c001217e <VgaText::updateCursor()>
c00125a7:	83 f8 08             	cmp    eax,0x8
c00125aa:	75 25                	jne    c00125d1 <VgaText::putchar(char, VgaColour, VgaColour)+0xa9>
c00125ac:	50                   	push   eax
c00125ad:	50                   	push   eax
c00125ae:	6a 01                	push   0x1
c00125b0:	53                   	push   ebx
c00125b1:	e8 50 ff ff ff       	call   c0012506 <VgaText::decrementCursor(bool)>
c00125b6:	5a                   	pop    edx
c00125b7:	59                   	pop    ecx
c00125b8:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00125bb:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00125be:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00125c1:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00125c4:	6a 20                	push   0x20
c00125c6:	53                   	push   ebx
c00125c7:	e8 4a fd ff ff       	call   c0012316 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00125cc:	83 c4 28             	add    esp,0x28
c00125cf:	5b                   	pop    ebx
c00125d0:	c3                   	ret    
c00125d1:	83 ec 08             	sub    esp,0x8
c00125d4:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00125d7:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00125da:	51                   	push   ecx
c00125db:	52                   	push   edx
c00125dc:	50                   	push   eax
c00125dd:	53                   	push   ebx
c00125de:	e8 33 fd ff ff       	call   c0012316 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00125e3:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c00125e7:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c00125ef:	83 c4 28             	add    esp,0x28
c00125f2:	5b                   	pop    ebx
c00125f3:	e9 ba fe ff ff       	jmp    c00124b2 <VgaText::incrementCursor(bool)>

c00125f8 <VgaText::putchar(char)>:
c00125f8:	57                   	push   edi
c00125f9:	56                   	push   esi
c00125fa:	53                   	push   ebx
c00125fb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00125ff:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012603:	0f be c2             	movsx  eax,dl
c0012606:	83 f8 5b             	cmp    eax,0x5b
c0012609:	75 18                	jne    c0012623 <VgaText::putchar(char)+0x2b>
c001260b:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c001260f:	74 20                	je     c0012631 <VgaText::putchar(char)+0x39>
c0012611:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c0012617:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c001261e:	e9 b8 00 00 00       	jmp    c00126db <VgaText::putchar(char)+0xe3>
c0012623:	83 f8 1b             	cmp    eax,0x1b
c0012626:	75 09                	jne    c0012631 <VgaText::putchar(char)+0x39>
c0012628:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c001262c:	e9 aa 00 00 00       	jmp    c00126db <VgaText::putchar(char)+0xe3>
c0012631:	0f b6 7b 41          	movzx  edi,BYTE PTR [ebx+0x41]
c0012635:	89 f9                	mov    ecx,edi
c0012637:	84 c9                	test   cl,cl
c0012639:	0f 84 8c 00 00 00    	je     c00126cb <VgaText::putchar(char)+0xd3>
c001263f:	8d 4a c0             	lea    ecx,[edx-0x40]
c0012642:	80 f9 3e             	cmp    cl,0x3e
c0012645:	77 70                	ja     c00126b7 <VgaText::putchar(char)+0xbf>
c0012647:	83 f8 6d             	cmp    eax,0x6d
c001264a:	75 3f                	jne    c001268b <VgaText::putchar(char)+0x93>
c001264c:	31 f6                	xor    esi,esi
c001264e:	31 d2                	xor    edx,edx
c0012650:	31 c0                	xor    eax,eax
c0012652:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c0012655:	7e 25                	jle    c001267c <VgaText::putchar(char)+0x84>
c0012657:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c001265c:	83 fa 3b             	cmp    edx,0x3b
c001265f:	75 0f                	jne    c0012670 <VgaText::putchar(char)+0x78>
c0012661:	50                   	push   eax
c0012662:	53                   	push   ebx
c0012663:	e8 2c fb ff ff       	call   c0012194 <VgaText::doANSI_SGR(int)>
c0012668:	31 d2                	xor    edx,edx
c001266a:	59                   	pop    ecx
c001266b:	58                   	pop    eax
c001266c:	31 c0                	xor    eax,eax
c001266e:	eb 09                	jmp    c0012679 <VgaText::putchar(char)+0x81>
c0012670:	6b c0 0a             	imul   eax,eax,0xa
c0012673:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0012677:	89 fa                	mov    edx,edi
c0012679:	46                   	inc    esi
c001267a:	eb d6                	jmp    c0012652 <VgaText::putchar(char)+0x5a>
c001267c:	84 d2                	test   dl,dl
c001267e:	74 2f                	je     c00126af <VgaText::putchar(char)+0xb7>
c0012680:	50                   	push   eax
c0012681:	53                   	push   ebx
c0012682:	e8 0d fb ff ff       	call   c0012194 <VgaText::doANSI_SGR(int)>
c0012687:	58                   	pop    eax
c0012688:	5a                   	pop    edx
c0012689:	eb 24                	jmp    c00126af <VgaText::putchar(char)+0xb7>
c001268b:	83 f8 4a             	cmp    eax,0x4a
c001268e:	75 1f                	jne    c00126af <VgaText::putchar(char)+0xb7>
c0012690:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0012694:	75 19                	jne    c00126af <VgaText::putchar(char)+0xb7>
c0012696:	83 ec 0c             	sub    esp,0xc
c0012699:	53                   	push   ebx
c001269a:	e8 95 fd ff ff       	call   c0012434 <VgaText::clearScreen()>
c001269f:	83 c4 0c             	add    esp,0xc
c00126a2:	6a 00                	push   0x0
c00126a4:	6a 00                	push   0x0
c00126a6:	53                   	push   ebx
c00126a7:	e8 26 fd ff ff       	call   c00123d2 <VgaText::setCursor(int, int)>
c00126ac:	83 c4 10             	add    esp,0x10
c00126af:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c00126b5:	eb 24                	jmp    c00126db <VgaText::putchar(char)+0xe3>
c00126b7:	8b 43 54             	mov    eax,DWORD PTR [ebx+0x54]
c00126ba:	83 f8 0e             	cmp    eax,0xe
c00126bd:	7f 1c                	jg     c00126db <VgaText::putchar(char)+0xe3>
c00126bf:	8d 48 01             	lea    ecx,[eax+0x1]
c00126c2:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c00126c5:	88 54 03 42          	mov    BYTE PTR [ebx+eax*1+0x42],dl
c00126c9:	eb 10                	jmp    c00126db <VgaText::putchar(char)+0xe3>
c00126cb:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00126ce:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00126d1:	50                   	push   eax
c00126d2:	53                   	push   ebx
c00126d3:	e8 50 fe ff ff       	call   c0012528 <VgaText::putchar(char, VgaColour, VgaColour)>
c00126d8:	83 c4 10             	add    esp,0x10
c00126db:	5b                   	pop    ebx
c00126dc:	5e                   	pop    esi
c00126dd:	5f                   	pop    edi
c00126de:	c3                   	ret    
c00126df:	90                   	nop

c00126e0 <VgaText::putx(unsigned int)>:
c00126e0:	57                   	push   edi
c00126e1:	b9 11 00 00 00       	mov    ecx,0x11
c00126e6:	56                   	push   esi
c00126e7:	be 29 47 02 c0       	mov    esi,0xc0024729
c00126ec:	53                   	push   ebx
c00126ed:	83 ec 20             	sub    esp,0x20
c00126f0:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00126f4:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c00126f8:	fc                   	cld    
c00126f9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00126fb:	be 08 00 00 00       	mov    esi,0x8
c0012700:	50                   	push   eax
c0012701:	50                   	push   eax
c0012702:	89 d8                	mov    eax,ebx
c0012704:	c1 e8 1c             	shr    eax,0x1c
c0012707:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c001270c:	c1 e3 04             	shl    ebx,0x4
c001270f:	50                   	push   eax
c0012710:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012714:	e8 df fe ff ff       	call   c00125f8 <VgaText::putchar(char)>
c0012719:	83 c4 10             	add    esp,0x10
c001271c:	4e                   	dec    esi
c001271d:	75 e1                	jne    c0012700 <VgaText::putx(unsigned int)+0x20>
c001271f:	83 c4 20             	add    esp,0x20
c0012722:	5b                   	pop    ebx
c0012723:	5e                   	pop    esi
c0012724:	5f                   	pop    edi
c0012725:	c3                   	ret    

c0012726 <VgaText::puts(char const*)>:
c0012726:	53                   	push   ebx
c0012727:	83 ec 08             	sub    esp,0x8
c001272a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001272e:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012731:	85 c0                	test   eax,eax
c0012733:	74 12                	je     c0012747 <VgaText::puts(char const*)+0x21>
c0012735:	51                   	push   ecx
c0012736:	43                   	inc    ebx
c0012737:	51                   	push   ecx
c0012738:	50                   	push   eax
c0012739:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001273d:	e8 b6 fe ff ff       	call   c00125f8 <VgaText::putchar(char)>
c0012742:	83 c4 10             	add    esp,0x10
c0012745:	eb e7                	jmp    c001272e <VgaText::puts(char const*)+0x8>
c0012747:	83 c4 08             	add    esp,0x8
c001274a:	5b                   	pop    ebx
c001274b:	c3                   	ret    

c001274c <VgaText::write(unsigned long long, void*, int*)>:
c001274c:	55                   	push   ebp
c001274d:	57                   	push   edi
c001274e:	56                   	push   esi
c001274f:	53                   	push   ebx
c0012750:	83 ec 0c             	sub    esp,0xc
c0012753:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012757:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001275b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001275f:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0012766:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0012769:	39 eb                	cmp    ebx,ebp
c001276b:	74 13                	je     c0012780 <VgaText::write(unsigned long long, void*, int*)+0x34>
c001276d:	50                   	push   eax
c001276e:	43                   	inc    ebx
c001276f:	50                   	push   eax
c0012770:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0012774:	50                   	push   eax
c0012775:	56                   	push   esi
c0012776:	e8 7d fe ff ff       	call   c00125f8 <VgaText::putchar(char)>
c001277b:	83 c4 10             	add    esp,0x10
c001277e:	eb e9                	jmp    c0012769 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0012780:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0012787:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001278b:	89 38                	mov    DWORD PTR [eax],edi
c001278d:	83 c4 0c             	add    esp,0xc
c0012790:	31 c0                	xor    eax,eax
c0012792:	5b                   	pop    ebx
c0012793:	5e                   	pop    esi
c0012794:	5f                   	pop    edi
c0012795:	5d                   	pop    ebp
c0012796:	c3                   	ret    
c0012797:	90                   	nop

c0012798 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0012798:	55                   	push   ebp
c0012799:	57                   	push   edi
c001279a:	56                   	push   esi
c001279b:	53                   	push   ebx
c001279c:	83 ec 1c             	sub    esp,0x1c
c001279f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00127a3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00127a7:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00127ab:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c00127af:	8b 5f 0c             	mov    ebx,DWORD PTR [edi+0xc]
c00127b2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00127b6:	85 db                	test   ebx,ebx
c00127b8:	75 14                	jne    c00127ce <VgaText::puts(char const*, VgaColour, VgaColour)+0x36>
c00127ba:	c7 44 24 30 3a 47 02 c0 	mov    DWORD PTR [esp+0x30],0xc002473a
c00127c2:	83 c4 1c             	add    esp,0x1c
c00127c5:	5b                   	pop    ebx
c00127c6:	5e                   	pop    esi
c00127c7:	5f                   	pop    edi
c00127c8:	5d                   	pop    ebp
c00127c9:	e9 bc d6 ff ff       	jmp    c000fe8a <KePanic(char const*)>
c00127ce:	c6 87 81 00 00 00 01 	mov    BYTE PTR [edi+0x81],0x1
c00127d5:	50                   	push   eax
c00127d6:	50                   	push   eax
c00127d7:	89 e8                	mov    eax,ebp
c00127d9:	0f b6 c0             	movzx  eax,al
c00127dc:	50                   	push   eax
c00127dd:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00127e2:	50                   	push   eax
c00127e3:	e8 7a fa ff ff       	call   c0012262 <VgaText::combineColours(unsigned char, unsigned char)>
c00127e8:	83 c4 10             	add    esp,0x10
c00127eb:	6b 4f 18 50          	imul   ecx,DWORD PTR [edi+0x18],0x50
c00127ef:	03 4f 14             	add    ecx,DWORD PTR [edi+0x14]
c00127f2:	0f b6 c0             	movzx  eax,al
c00127f5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00127f9:	0f b7 c9             	movzx  ecx,cx
c00127fc:	01 c9                	add    ecx,ecx
c00127fe:	01 cb                	add    ebx,ecx
c0012800:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0012803:	85 c0                	test   eax,eax
c0012805:	0f 84 ef 00 00 00    	je     c00128fa <VgaText::puts(char const*, VgaColour, VgaColour)+0x162>
c001280b:	83 f8 0d             	cmp    eax,0xd
c001280e:	75 0c                	jne    c001281c <VgaText::puts(char const*, VgaColour, VgaColour)+0x84>
c0012810:	c7 47 14 00 00 00 00 	mov    DWORD PTR [edi+0x14],0x0
c0012817:	e9 d8 00 00 00       	jmp    c00128f4 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15c>
c001281c:	83 f8 0a             	cmp    eax,0xa
c001281f:	75 44                	jne    c0012865 <VgaText::puts(char const*, VgaColour, VgaColour)+0xcd>
c0012821:	c7 47 14 00 00 00 00 	mov    DWORD PTR [edi+0x14],0x0
c0012828:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001282b:	8d 48 01             	lea    ecx,[eax+0x1]
c001282e:	3b 4f 10             	cmp    ecx,DWORD PTR [edi+0x10]
c0012831:	89 4f 18             	mov    DWORD PTR [edi+0x18],ecx
c0012834:	75 0f                	jne    c0012845 <VgaText::puts(char const*, VgaColour, VgaColour)+0xad>
c0012836:	89 47 18             	mov    DWORD PTR [edi+0x18],eax
c0012839:	83 ec 0c             	sub    esp,0xc
c001283c:	57                   	push   edi
c001283d:	e8 32 fa ff ff       	call   c0012274 <VgaText::scrollScreen()>
c0012842:	83 c4 10             	add    esp,0x10
c0012845:	83 ec 0c             	sub    esp,0xc
c0012848:	57                   	push   edi
c0012849:	e8 30 f9 ff ff       	call   c001217e <VgaText::updateCursor()>
c001284e:	83 c4 10             	add    esp,0x10
c0012851:	6b 5f 18 50          	imul   ebx,DWORD PTR [edi+0x18],0x50
c0012855:	03 5f 14             	add    ebx,DWORD PTR [edi+0x14]
c0012858:	0f b7 db             	movzx  ebx,bx
c001285b:	01 db                	add    ebx,ebx
c001285d:	03 5f 0c             	add    ebx,DWORD PTR [edi+0xc]
c0012860:	e9 8f 00 00 00       	jmp    c00128f4 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15c>
c0012865:	83 f8 08             	cmp    eax,0x8
c0012868:	75 34                	jne    c001289e <VgaText::puts(char const*, VgaColour, VgaColour)+0x106>
c001286a:	51                   	push   ecx
c001286b:	51                   	push   ecx
c001286c:	6a 01                	push   0x1
c001286e:	57                   	push   edi
c001286f:	e8 92 fc ff ff       	call   c0012506 <VgaText::decrementCursor(bool)>
c0012874:	5b                   	pop    ebx
c0012875:	58                   	pop    eax
c0012876:	ff 77 18             	push   DWORD PTR [edi+0x18]
c0012879:	ff 77 14             	push   DWORD PTR [edi+0x14]
c001287c:	ff 77 30             	push   DWORD PTR [edi+0x30]
c001287f:	ff 77 34             	push   DWORD PTR [edi+0x34]
c0012882:	6a 20                	push   0x20
c0012884:	57                   	push   edi
c0012885:	e8 8c fa ff ff       	call   c0012316 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c001288a:	83 c4 20             	add    esp,0x20
c001288d:	6b 5f 18 50          	imul   ebx,DWORD PTR [edi+0x18],0x50
c0012891:	03 5f 14             	add    ebx,DWORD PTR [edi+0x14]
c0012894:	0f b7 db             	movzx  ebx,bx
c0012897:	01 db                	add    ebx,ebx
c0012899:	03 5f 0c             	add    ebx,DWORD PTR [edi+0xc]
c001289c:	eb 56                	jmp    c00128f4 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15c>
c001289e:	52                   	push   edx
c001289f:	52                   	push   edx
c00128a0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00128a4:	50                   	push   eax
c00128a5:	e8 5c fa ff ff       	call   c0012306 <VgaText::combineCharAndColour(char, unsigned char)>
c00128aa:	83 c4 10             	add    esp,0x10
c00128ad:	66 89 03             	mov    WORD PTR [ebx],ax
c00128b0:	39 3d d4 f1 02 c0    	cmp    DWORD PTR ds:0xc002f1d4,edi
c00128b6:	75 1a                	jne    c00128d2 <VgaText::puts(char const*, VgaColour, VgaColour)+0x13a>
c00128b8:	83 ec 0c             	sub    esp,0xc
c00128bb:	ff 77 18             	push   DWORD PTR [edi+0x18]
c00128be:	ff 77 14             	push   DWORD PTR [edi+0x14]
c00128c1:	55                   	push   ebp
c00128c2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00128c6:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00128c9:	50                   	push   eax
c00128ca:	e8 ed 8f 00 00       	call   c001b8bc <HalConsoleWriteCharacter(char, int, int, int, int)>
c00128cf:	83 c4 20             	add    esp,0x20
c00128d2:	50                   	push   eax
c00128d3:	83 c3 02             	add    ebx,0x2
c00128d6:	50                   	push   eax
c00128d7:	6a 00                	push   0x0
c00128d9:	57                   	push   edi
c00128da:	e8 d3 fb ff ff       	call   c00124b2 <VgaText::incrementCursor(bool)>
c00128df:	83 c4 10             	add    esp,0x10
c00128e2:	83 7f 14 00          	cmp    DWORD PTR [edi+0x14],0x0
c00128e6:	75 0c                	jne    c00128f4 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15c>
c00128e8:	6b 5f 18 50          	imul   ebx,DWORD PTR [edi+0x18],0x50
c00128ec:	0f b7 db             	movzx  ebx,bx
c00128ef:	01 db                	add    ebx,ebx
c00128f1:	03 5f 0c             	add    ebx,DWORD PTR [edi+0xc]
c00128f4:	46                   	inc    esi
c00128f5:	e9 06 ff ff ff       	jmp    c0012800 <VgaText::puts(char const*, VgaColour, VgaColour)+0x68>
c00128fa:	83 ec 0c             	sub    esp,0xc
c00128fd:	57                   	push   edi
c00128fe:	e8 7b f8 ff ff       	call   c001217e <VgaText::updateCursor()>
c0012903:	c6 87 81 00 00 00 00 	mov    BYTE PTR [edi+0x81],0x0
c001290a:	83 c4 2c             	add    esp,0x2c
c001290d:	5b                   	pop    ebx
c001290e:	5e                   	pop    esi
c001290f:	5f                   	pop    edi
c0012910:	5d                   	pop    ebp
c0012911:	c3                   	ret    

c0012912 <VgaText::VgaText(char const*)>:
c0012912:	56                   	push   esi
c0012913:	53                   	push   ebx
c0012914:	83 ec 04             	sub    esp,0x4
c0012917:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001291b:	83 ec 08             	sub    esp,0x8
c001291e:	6a 00                	push   0x0
c0012920:	50                   	push   eax
c0012921:	e8 ba 05 00 00       	call   c0012ee0 <UnixFile::UnixFile(int)>
c0012926:	83 c4 10             	add    esp,0x10
c0012929:	ba 74 47 02 c0       	mov    edx,0xc0024774
c001292e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012932:	89 10                	mov    DWORD PTR [eax],edx
c0012934:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012938:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c001293f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012943:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c001294a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001294e:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0012952:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012956:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c001295a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001295e:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c0012965:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012969:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0012970:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012974:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c001297b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001297f:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0012986:	83 ec 0c             	sub    esp,0xc
c0012989:	68 4a 47 02 c0       	push   0xc002474a
c001298e:	e8 d3 45 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0012993:	83 c4 10             	add    esp,0x10
c0012996:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001299a:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c00129a1:	83 ec 0c             	sub    esp,0xc
c00129a4:	6a 01                	push   0x1
c00129a6:	e8 96 09 00 00       	call   c0013341 <Virt::allocateKernelVirtualPages(int)>
c00129ab:	83 c4 10             	add    esp,0x10
c00129ae:	89 c2                	mov    edx,eax
c00129b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00129b4:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00129b7:	8b 1d 70 f2 02 c0    	mov    ebx,DWORD PTR ds:0xc002f270
c00129bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00129c1:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00129c4:	89 c6                	mov    esi,eax
c00129c6:	e8 b9 d6 ff ff       	call   c0010084 <Phys::allocatePage()>
c00129cb:	68 05 0c 00 00       	push   0xc05
c00129d0:	56                   	push   esi
c00129d1:	50                   	push   eax
c00129d2:	53                   	push   ebx
c00129d3:	e8 42 10 00 00       	call   c0013a1a <VAS::mapPage(unsigned long, unsigned long, int)>
c00129d8:	83 c4 10             	add    esp,0x10
c00129db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00129df:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00129e2:	83 ec 04             	sub    esp,0x4
c00129e5:	68 a0 0f 00 00       	push   0xfa0
c00129ea:	6a 00                	push   0x0
c00129ec:	50                   	push   eax
c00129ed:	e8 fe da fe ff       	call   c00004f0 <memset>
c00129f2:	83 c4 10             	add    esp,0x10
c00129f5:	83 ec 04             	sub    esp,0x4
c00129f8:	6a 00                	push   0x0
c00129fa:	6a 07                	push   0x7
c00129fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012a00:	e8 23 f8 ff ff       	call   c0012228 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0012a05:	83 c4 10             	add    esp,0x10
c0012a08:	83 ec 04             	sub    esp,0x4
c0012a0b:	6a 00                	push   0x0
c0012a0d:	6a 00                	push   0x0
c0012a0f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012a13:	e8 ba f9 ff ff       	call   c00123d2 <VgaText::setCursor(int, int)>
c0012a18:	83 c4 10             	add    esp,0x10
c0012a1b:	83 ec 0c             	sub    esp,0xc
c0012a1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012a22:	e8 0d fa ff ff       	call   c0012434 <VgaText::clearScreen()>
c0012a27:	83 c4 10             	add    esp,0x10
c0012a2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012a2e:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0012a32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012a36:	05 82 00 00 00       	add    eax,0x82
c0012a3b:	83 ec 04             	sub    esp,0x4
c0012a3e:	68 80 00 00 00       	push   0x80
c0012a43:	6a 00                	push   0x0
c0012a45:	50                   	push   eax
c0012a46:	e8 a5 da fe ff       	call   c00004f0 <memset>
c0012a4b:	83 c4 10             	add    esp,0x10
c0012a4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012a52:	05 02 01 00 00       	add    eax,0x102
c0012a57:	83 ec 04             	sub    esp,0x4
c0012a5a:	68 80 00 00 00       	push   0x80
c0012a5f:	6a 00                	push   0x0
c0012a61:	50                   	push   eax
c0012a62:	e8 89 da fe ff       	call   c00004f0 <memset>
c0012a67:	83 c4 10             	add    esp,0x10
c0012a6a:	90                   	nop
c0012a6b:	83 c4 04             	add    esp,0x4
c0012a6e:	5b                   	pop    ebx
c0012a6f:	5e                   	pop    esi
c0012a70:	c3                   	ret    
c0012a71:	90                   	nop

c0012a72 <VgaText::receiveKey(unsigned char)>:
c0012a72:	55                   	push   ebp
c0012a73:	57                   	push   edi
c0012a74:	56                   	push   esi
c0012a75:	53                   	push   ebx
c0012a76:	83 ec 2c             	sub    esp,0x2c
c0012a79:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0012a7d:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0012a81:	89 fd                	mov    ebp,edi
c0012a83:	81 e5 ff 00 00 00    	and    ebp,0xff
c0012a89:	0f 84 48 01 00 00    	je     c0012bd7 <VgaText::receiveKey(unsigned char)+0x165>
c0012a8f:	8d b3 82 00 00 00    	lea    esi,[ebx+0x82]
c0012a95:	83 fd 08             	cmp    ebp,0x8
c0012a98:	75 6a                	jne    c0012b04 <VgaText::receiveKey(unsigned char)+0x92>
c0012a9a:	83 ec 0c             	sub    esp,0xc
c0012a9d:	56                   	push   esi
c0012a9e:	e8 dd da fe ff       	call   c0000580 <strlen>
c0012aa3:	83 c4 10             	add    esp,0x10
c0012aa6:	85 c0                	test   eax,eax
c0012aa8:	0f 84 ef 00 00 00    	je     c0012b9d <VgaText::receiveKey(unsigned char)+0x12b>
c0012aae:	50                   	push   eax
c0012aaf:	50                   	push   eax
c0012ab0:	6a 08                	push   0x8
c0012ab2:	53                   	push   ebx
c0012ab3:	e8 40 fb ff ff       	call   c00125f8 <VgaText::putchar(char)>
c0012ab8:	89 34 24             	mov    DWORD PTR [esp],esi
c0012abb:	e8 c0 da fe ff       	call   c0000580 <strlen>
c0012ac0:	83 c4 10             	add    esp,0x10
c0012ac3:	0f be 94 03 81 00 00 00 	movsx  edx,BYTE PTR [ebx+eax*1+0x81]
c0012acb:	83 fa 1f             	cmp    edx,0x1f
c0012ace:	89 d0                	mov    eax,edx
c0012ad0:	7f 1c                	jg     c0012aee <VgaText::receiveKey(unsigned char)+0x7c>
c0012ad2:	83 e8 08             	sub    eax,0x8
c0012ad5:	3c 02                	cmp    al,0x2
c0012ad7:	76 15                	jbe    c0012aee <VgaText::receiveKey(unsigned char)+0x7c>
c0012ad9:	83 fa 0d             	cmp    edx,0xd
c0012adc:	74 10                	je     c0012aee <VgaText::receiveKey(unsigned char)+0x7c>
c0012ade:	57                   	push   edi
c0012adf:	57                   	push   edi
c0012ae0:	68 5d 47 02 c0       	push   0xc002475d
c0012ae5:	53                   	push   ebx
c0012ae6:	e8 3b fc ff ff       	call   c0012726 <VgaText::puts(char const*)>
c0012aeb:	83 c4 10             	add    esp,0x10
c0012aee:	83 ec 0c             	sub    esp,0xc
c0012af1:	56                   	push   esi
c0012af2:	e8 89 da fe ff       	call   c0000580 <strlen>
c0012af7:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c0012aff:	e9 96 00 00 00       	jmp    c0012b9a <VgaText::receiveKey(unsigned char)+0x128>
c0012b04:	8d 83 02 01 00 00    	lea    eax,[ebx+0x102]
c0012b0a:	83 ec 0c             	sub    esp,0xc
c0012b0d:	50                   	push   eax
c0012b0e:	e8 6d da fe ff       	call   c0000580 <strlen>
c0012b13:	89 34 24             	mov    DWORD PTR [esp],esi
c0012b16:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012b1a:	e8 61 da fe ff       	call   c0000580 <strlen>
c0012b1f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012b23:	83 c4 10             	add    esp,0x10
c0012b26:	8d 44 02 03          	lea    eax,[edx+eax*1+0x3]
c0012b2a:	3d 80 00 00 00       	cmp    eax,0x80
c0012b2f:	0f 87 a2 00 00 00    	ja     c0012bd7 <VgaText::receiveKey(unsigned char)+0x165>
c0012b35:	8d 47 ff             	lea    eax,[edi-0x1]
c0012b38:	3c 1e                	cmp    al,0x1e
c0012b3a:	77 35                	ja     c0012b71 <VgaText::receiveKey(unsigned char)+0xff>
c0012b3c:	8d 47 f7             	lea    eax,[edi-0x9]
c0012b3f:	3c 01                	cmp    al,0x1
c0012b41:	76 2e                	jbe    c0012b71 <VgaText::receiveKey(unsigned char)+0xff>
c0012b43:	83 fd 0d             	cmp    ebp,0xd
c0012b46:	74 29                	je     c0012b71 <VgaText::receiveKey(unsigned char)+0xff>
c0012b48:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0012b4b:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0012b4e:	68 63 47 02 c0       	push   0xc0024763
c0012b53:	53                   	push   ebx
c0012b54:	e8 3f fc ff ff       	call   c0012798 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0012b59:	8d 47 40             	lea    eax,[edi+0x40]
c0012b5c:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0012b5f:	0f b6 c0             	movzx  eax,al
c0012b62:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0012b65:	50                   	push   eax
c0012b66:	53                   	push   ebx
c0012b67:	e8 bc f9 ff ff       	call   c0012528 <VgaText::putchar(char, VgaColour, VgaColour)>
c0012b6c:	83 c4 20             	add    esp,0x20
c0012b6f:	eb 11                	jmp    c0012b82 <VgaText::receiveKey(unsigned char)+0x110>
c0012b71:	51                   	push   ecx
c0012b72:	89 f8                	mov    eax,edi
c0012b74:	51                   	push   ecx
c0012b75:	0f be c0             	movsx  eax,al
c0012b78:	50                   	push   eax
c0012b79:	53                   	push   ebx
c0012b7a:	e8 79 fa ff ff       	call   c00125f8 <VgaText::putchar(char)>
c0012b7f:	83 c4 10             	add    esp,0x10
c0012b82:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0012b87:	89 f8                	mov    eax,edi
c0012b89:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0012b8d:	52                   	push   edx
c0012b8e:	52                   	push   edx
c0012b8f:	8d 44 24 26          	lea    eax,[esp+0x26]
c0012b93:	50                   	push   eax
c0012b94:	56                   	push   esi
c0012b95:	e8 d6 dc fe ff       	call   c0000870 <strcat>
c0012b9a:	83 c4 10             	add    esp,0x10
c0012b9d:	80 bb 80 00 00 00 00 	cmp    BYTE PTR [ebx+0x80],0x0
c0012ba4:	75 0f                	jne    c0012bb5 <VgaText::receiveKey(unsigned char)+0x143>
c0012ba6:	83 fd 1c             	cmp    ebp,0x1c
c0012ba9:	77 2c                	ja     c0012bd7 <VgaText::receiveKey(unsigned char)+0x165>
c0012bab:	b8 08 04 00 10       	mov    eax,0x10000408
c0012bb0:	0f a3 e8             	bt     eax,ebp
c0012bb3:	73 22                	jae    c0012bd7 <VgaText::receiveKey(unsigned char)+0x165>
c0012bb5:	50                   	push   eax
c0012bb6:	81 c3 02 01 00 00    	add    ebx,0x102
c0012bbc:	50                   	push   eax
c0012bbd:	56                   	push   esi
c0012bbe:	53                   	push   ebx
c0012bbf:	e8 ac dc fe ff       	call   c0000870 <strcat>
c0012bc4:	83 c4 0c             	add    esp,0xc
c0012bc7:	68 80 00 00 00       	push   0x80
c0012bcc:	6a 00                	push   0x0
c0012bce:	56                   	push   esi
c0012bcf:	e8 1c d9 fe ff       	call   c00004f0 <memset>
c0012bd4:	83 c4 10             	add    esp,0x10
c0012bd7:	83 c4 2c             	add    esp,0x2c
c0012bda:	5b                   	pop    ebx
c0012bdb:	5e                   	pop    esi
c0012bdc:	5f                   	pop    edi
c0012bdd:	5d                   	pop    ebp
c0012bde:	c3                   	ret    
c0012bdf:	90                   	nop

c0012be0 <VgaText::doUpdate()>:
c0012be0:	c3                   	ret    
c0012be1:	66 90                	xchg   ax,ax
c0012be3:	90                   	nop

c0012be4 <TSS::TSS()>:
c0012be4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012be8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012bef:	90                   	nop
c0012bf0:	c3                   	ret    
c0012bf1:	90                   	nop
c0012bf2:	66 90                	xchg   ax,ax

c0012bf4 <TSS::setESP(unsigned long)>:
c0012bf4:	55                   	push   ebp
c0012bf5:	89 e5                	mov    ebp,esp
c0012bf7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012bfa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012bfd:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0012c00:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0012c03:	90                   	nop
c0012c04:	5d                   	pop    ebp
c0012c05:	c3                   	ret    
c0012c06:	66 90                	xchg   ax,ax

c0012c08 <TSS::flush()>:
c0012c08:	55                   	push   ebp
c0012c09:	89 e5                	mov    ebp,esp
c0012c0b:	83 ec 10             	sub    esp,0x10
c0012c0e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012c11:	8b 00                	mov    eax,DWORD PTR [eax]
c0012c13:	83 c8 03             	or     eax,0x3
c0012c16:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0012c1a:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0012c1e:	66 89 d0             	mov    ax,dx
c0012c21:	0f 00 d8             	ltr    ax
c0012c24:	90                   	nop
c0012c25:	c9                   	leave  
c0012c26:	c3                   	ret    
c0012c27:	90                   	nop

c0012c28 <TSS::setup(unsigned long, unsigned long)>:
c0012c28:	55                   	push   ebp
c0012c29:	89 e5                	mov    ebp,esp
c0012c2b:	83 ec 18             	sub    esp,0x18
c0012c2e:	83 ec 0c             	sub    esp,0xc
c0012c31:	6a 68                	push   0x68
c0012c33:	e8 44 cf ff ff       	call   c000fb7c <malloc>
c0012c38:	83 c4 10             	add    esp,0x10
c0012c3b:	89 c2                	mov    edx,eax
c0012c3d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012c40:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0012c43:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012c46:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012c49:	83 ec 08             	sub    esp,0x8
c0012c4c:	50                   	push   eax
c0012c4d:	68 88 47 02 c0       	push   0xc0024788
c0012c52:	e8 0f 43 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0012c57:	83 c4 10             	add    esp,0x10
c0012c5a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012c5d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012c60:	83 ec 04             	sub    esp,0x4
c0012c63:	6a 68                	push   0x68
c0012c65:	6a 00                	push   0x0
c0012c67:	50                   	push   eax
c0012c68:	e8 83 d8 fe ff       	call   c00004f0 <memset>
c0012c6d:	83 c4 10             	add    esp,0x10
c0012c70:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012c73:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012c76:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0012c7c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012c7f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012c82:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0012c88:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012c8b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012c8e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0012c91:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0012c94:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012c97:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012c9a:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0012ca0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012ca3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012ca6:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0012cac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012caf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012cb2:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0012cb8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012cbb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012cbe:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0012cc4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012cc7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012cca:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0012cd0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012cd3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012cd6:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0012cdc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012cdf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012ce2:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0012ce5:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0012ce8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012ceb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012cee:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0012cf1:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0012cf4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012cf7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012cfa:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0012d01:	83 ec 0c             	sub    esp,0xc
c0012d04:	68 9f 47 02 c0       	push   0xc002479f
c0012d09:	e8 58 42 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0012d0e:	83 c4 10             	add    esp,0x10
c0012d11:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012d14:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012d17:	0f 20 da             	mov    edx,cr3
c0012d1a:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0012d1d:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0012d20:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0012d23:	83 ec 0c             	sub    esp,0xc
c0012d26:	68 a2 47 02 c0       	push   0xc00247a2
c0012d2b:	e8 36 42 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0012d30:	83 c4 10             	add    esp,0x10
c0012d33:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012d36:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012d39:	83 ec 08             	sub    esp,0x8
c0012d3c:	50                   	push   eax
c0012d3d:	8d 45 ec             	lea    eax,[ebp-0x14]
c0012d40:	50                   	push   eax
c0012d41:	e8 84 bf ff ff       	call   c000ecca <GDTEntry::setBase(unsigned int)>
c0012d46:	83 c4 10             	add    esp,0x10
c0012d49:	83 ec 08             	sub    esp,0x8
c0012d4c:	6a 68                	push   0x68
c0012d4e:	8d 45 ec             	lea    eax,[ebp-0x14]
c0012d51:	50                   	push   eax
c0012d52:	e8 8f bf ff ff       	call   c000ece6 <GDTEntry::setLimit(unsigned int)>
c0012d57:	83 c4 10             	add    esp,0x10
c0012d5a:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0012d5e:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0012d61:	83 e0 0f             	and    eax,0xf
c0012d64:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0012d67:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0012d6a:	83 c8 40             	or     eax,0x40
c0012d6d:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0012d70:	83 ec 0c             	sub    esp,0xc
c0012d73:	68 a5 47 02 c0       	push   0xc00247a5
c0012d78:	e8 e9 41 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0012d7d:	83 c4 10             	add    esp,0x10
c0012d80:	a1 d4 d0 02 c0       	mov    eax,ds:0xc002d0d4
c0012d85:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012d8b:	83 ec 08             	sub    esp,0x8
c0012d8e:	50                   	push   eax
c0012d8f:	68 a8 47 02 c0       	push   0xc00247a8
c0012d94:	e8 cd 41 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0012d99:	83 c4 10             	add    esp,0x10
c0012d9c:	a1 d4 d0 02 c0       	mov    eax,ds:0xc002d0d4
c0012da1:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012da7:	05 64 01 00 00       	add    eax,0x164
c0012dac:	83 ec 04             	sub    esp,0x4
c0012daf:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0012db2:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0012db5:	50                   	push   eax
c0012db6:	e8 5f bf ff ff       	call   c000ed1a <GDT::addEntry(GDTEntry)>
c0012dbb:	83 c4 10             	add    esp,0x10
c0012dbe:	89 c2                	mov    edx,eax
c0012dc0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012dc3:	89 10                	mov    DWORD PTR [eax],edx
c0012dc5:	83 ec 0c             	sub    esp,0xc
c0012dc8:	68 bd 47 02 c0       	push   0xc00247bd
c0012dcd:	e8 94 41 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0012dd2:	83 c4 10             	add    esp,0x10
c0012dd5:	a1 d4 d0 02 c0       	mov    eax,ds:0xc002d0d4
c0012dda:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012de0:	05 64 01 00 00       	add    eax,0x164
c0012de5:	83 ec 0c             	sub    esp,0xc
c0012de8:	50                   	push   eax
c0012de9:	e8 56 bf ff ff       	call   c000ed44 <GDT::flush()>
c0012dee:	83 c4 10             	add    esp,0x10
c0012df1:	83 ec 0c             	sub    esp,0xc
c0012df4:	68 c0 47 02 c0       	push   0xc00247c0
c0012df9:	e8 68 41 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0012dfe:	83 c4 10             	add    esp,0x10
c0012e01:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012e04:	8b 00                	mov    eax,DWORD PTR [eax]
c0012e06:	c9                   	leave  
c0012e07:	c3                   	ret    

c0012e08 <ReservedFilename::read(unsigned long long, void*, int*)>:
c0012e08:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012e0c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0012e10:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012e13:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0012e18:	75 08                	jne    c0012e22 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0012e1a:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0012e20:	eb 38                	jmp    c0012e5a <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0012e22:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0012e27:	75 17                	jne    c0012e40 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0012e29:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012e2e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0012e31:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0012e37:	8b 10                	mov    edx,DWORD PTR [eax]
c0012e39:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012e3d:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0012e40:	89 c1                	mov    ecx,eax
c0012e42:	83 e1 fd             	and    ecx,0xfffffffd
c0012e45:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0012e4b:	74 cd                	je     c0012e1a <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0012e4d:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0012e52:	83 e0 ef             	and    eax,0xffffffef
c0012e55:	83 f8 08             	cmp    eax,0x8
c0012e58:	76 c0                	jbe    c0012e1a <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0012e5a:	31 c0                	xor    eax,eax
c0012e5c:	c3                   	ret    
c0012e5d:	90                   	nop

c0012e5e <ReservedFilename::isAtty()>:
c0012e5e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012e62:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0012e65:	31 c0                	xor    eax,eax
c0012e67:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0012e6d:	74 09                	je     c0012e78 <ReservedFilename::isAtty()+0x1a>
c0012e6f:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0012e75:	0f 94 c0             	sete   al
c0012e78:	c3                   	ret    
c0012e79:	90                   	nop

c0012e7a <ReservedFilename::write(unsigned long long, void*, int*)>:
c0012e7a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012e7e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0012e82:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0012e86:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012e89:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0012e8e:	75 08                	jne    c0012e98 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0012e90:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0012e96:	eb 3d                	jmp    c0012ed5 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0012e98:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0012e9d:	75 17                	jne    c0012eb6 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0012e9f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012ea4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0012ea7:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0012ead:	8b 10                	mov    edx,DWORD PTR [eax]
c0012eaf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012eb3:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0012eb6:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0012ebb:	75 04                	jne    c0012ec1 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0012ebd:	89 0a                	mov    DWORD PTR [edx],ecx
c0012ebf:	eb 14                	jmp    c0012ed5 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0012ec1:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0012ec6:	74 c8                	je     c0012e90 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0012ec8:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0012ecd:	83 e0 ef             	and    eax,0xffffffef
c0012ed0:	83 f8 08             	cmp    eax,0x8
c0012ed3:	76 bb                	jbe    c0012e90 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0012ed5:	31 c0                	xor    eax,eax
c0012ed7:	c3                   	ret    

c0012ed8 <UnixFile::getFileDescriptor()>:
c0012ed8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012edc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012edf:	c3                   	ret    

c0012ee0 <UnixFile::UnixFile(int)>:
c0012ee0:	53                   	push   ebx
c0012ee1:	83 ec 28             	sub    esp,0x28
c0012ee4:	ba 10 48 02 c0       	mov    edx,0xc0024810
c0012ee9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012eed:	89 10                	mov    DWORD PTR [eax],edx
c0012eef:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0012ef7:	0f 8f 90 01 00 00    	jg     c001308d <UnixFile::UnixFile(int)+0x1ad>
c0012efd:	a1 80 6f 02 c0       	mov    eax,ds:0xc0026f80
c0012f02:	8d 50 01             	lea    edx,[eax+0x1]
c0012f05:	89 15 80 6f 02 c0    	mov    DWORD PTR ds:0xc0026f80,edx
c0012f0b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0012f0f:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0012f12:	83 ec 08             	sub    esp,0x8
c0012f15:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012f19:	68 58 f2 02 c0       	push   0xc002f258
c0012f1e:	e8 1b f4 00 00       	call   c002233e <LinkedList<UnixFile>::addElement(UnixFile*)>
c0012f23:	83 c4 10             	add    esp,0x10
c0012f26:	a0 54 f2 02 c0       	mov    al,ds:0xc002f254
c0012f2b:	83 f0 01             	xor    eax,0x1
c0012f2e:	0f b6 c0             	movzx  eax,al
c0012f31:	85 c0                	test   eax,eax
c0012f33:	0f 84 55 01 00 00    	je     c001308e <UnixFile::UnixFile(int)+0x1ae>
c0012f39:	c6 05 54 f2 02 c0 01 	mov    BYTE PTR ds:0xc002f254,0x1
c0012f40:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0012f48:	83 ec 0c             	sub    esp,0xc
c0012f4b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012f4f:	e8 28 cc ff ff       	call   c000fb7c <malloc>
c0012f54:	83 c4 10             	add    esp,0x10
c0012f57:	89 c3                	mov    ebx,eax
c0012f59:	83 ec 08             	sub    esp,0x8
c0012f5c:	68 03 ff ff 0f       	push   0xfffff03
c0012f61:	53                   	push   ebx
c0012f62:	e8 2d 01 00 00       	call   c0013094 <ReservedFilename::ReservedFilename(int)>
c0012f67:	83 c4 10             	add    esp,0x10
c0012f6a:	89 1d 4c f2 02 c0    	mov    DWORD PTR ds:0xc002f24c,ebx
c0012f70:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0012f78:	83 ec 0c             	sub    esp,0xc
c0012f7b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012f7f:	e8 f8 cb ff ff       	call   c000fb7c <malloc>
c0012f84:	83 c4 10             	add    esp,0x10
c0012f87:	89 c3                	mov    ebx,eax
c0012f89:	83 ec 08             	sub    esp,0x8
c0012f8c:	68 01 ff ff 0f       	push   0xfffff01
c0012f91:	53                   	push   ebx
c0012f92:	e8 fd 00 00 00       	call   c0013094 <ReservedFilename::ReservedFilename(int)>
c0012f97:	83 c4 10             	add    esp,0x10
c0012f9a:	89 1d 50 f2 02 c0    	mov    DWORD PTR ds:0xc002f250,ebx
c0012fa0:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0012fa8:	83 ec 0c             	sub    esp,0xc
c0012fab:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012faf:	e8 c8 cb ff ff       	call   c000fb7c <malloc>
c0012fb4:	83 c4 10             	add    esp,0x10
c0012fb7:	89 c3                	mov    ebx,eax
c0012fb9:	83 ec 08             	sub    esp,0x8
c0012fbc:	68 00 ff ff 0f       	push   0xfffff00
c0012fc1:	53                   	push   ebx
c0012fc2:	e8 cd 00 00 00       	call   c0013094 <ReservedFilename::ReservedFilename(int)>
c0012fc7:	83 c4 10             	add    esp,0x10
c0012fca:	89 1d 44 f2 02 c0    	mov    DWORD PTR ds:0xc002f244,ebx
c0012fd0:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0012fd8:	83 ec 0c             	sub    esp,0xc
c0012fdb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0012fdf:	e8 98 cb ff ff       	call   c000fb7c <malloc>
c0012fe4:	83 c4 10             	add    esp,0x10
c0012fe7:	89 c3                	mov    ebx,eax
c0012fe9:	83 ec 08             	sub    esp,0x8
c0012fec:	68 02 ff ff 0f       	push   0xfffff02
c0012ff1:	53                   	push   ebx
c0012ff2:	e8 9d 00 00 00       	call   c0013094 <ReservedFilename::ReservedFilename(int)>
c0012ff7:	83 c4 10             	add    esp,0x10
c0012ffa:	89 1d 48 f2 02 c0    	mov    DWORD PTR ds:0xc002f248,ebx
c0013000:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0013008:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c001300d:	7f 7f                	jg     c001308e <UnixFile::UnixFile(int)+0x1ae>
c001300f:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0013017:	83 ec 0c             	sub    esp,0xc
c001301a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001301e:	e8 59 cb ff ff       	call   c000fb7c <malloc>
c0013023:	83 c4 10             	add    esp,0x10
c0013026:	89 c3                	mov    ebx,eax
c0013028:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001302c:	05 10 ff ff 0f       	add    eax,0xfffff10
c0013031:	83 ec 08             	sub    esp,0x8
c0013034:	50                   	push   eax
c0013035:	53                   	push   ebx
c0013036:	e8 59 00 00 00       	call   c0013094 <ReservedFilename::ReservedFilename(int)>
c001303b:	83 c4 10             	add    esp,0x10
c001303e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013042:	89 1c 85 20 f2 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0de0],ebx
c0013049:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0013051:	83 ec 0c             	sub    esp,0xc
c0013054:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013058:	e8 1f cb ff ff       	call   c000fb7c <malloc>
c001305d:	83 c4 10             	add    esp,0x10
c0013060:	89 c3                	mov    ebx,eax
c0013062:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013066:	05 20 ff ff 0f       	add    eax,0xfffff20
c001306b:	83 ec 08             	sub    esp,0x8
c001306e:	50                   	push   eax
c001306f:	53                   	push   ebx
c0013070:	e8 1f 00 00 00       	call   c0013094 <ReservedFilename::ReservedFilename(int)>
c0013075:	83 c4 10             	add    esp,0x10
c0013078:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001307c:	89 1c 85 e0 f1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0e20],ebx
c0013083:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0013088:	e9 7b ff ff ff       	jmp    c0013008 <UnixFile::UnixFile(int)+0x128>
c001308d:	90                   	nop
c001308e:	83 c4 28             	add    esp,0x28
c0013091:	5b                   	pop    ebx
c0013092:	c3                   	ret    
c0013093:	90                   	nop

c0013094 <ReservedFilename::ReservedFilename(int)>:
c0013094:	83 ec 0c             	sub    esp,0xc
c0013097:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001309b:	83 ec 08             	sub    esp,0x8
c001309e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00130a2:	50                   	push   eax
c00130a3:	e8 38 fe ff ff       	call   c0012ee0 <UnixFile::UnixFile(int)>
c00130a8:	83 c4 10             	add    esp,0x10
c00130ab:	ba 2c 48 02 c0       	mov    edx,0xc002482c
c00130b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130b4:	89 10                	mov    DWORD PTR [eax],edx
c00130b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130ba:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00130be:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00130c1:	90                   	nop
c00130c2:	83 c4 0c             	add    esp,0xc
c00130c5:	c3                   	ret    

c00130c6 <UnixFile::~UnixFile()>:
c00130c6:	83 ec 1c             	sub    esp,0x1c
c00130c9:	ba 10 48 02 c0       	mov    edx,0xc0024810
c00130ce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00130d2:	89 10                	mov    DWORD PTR [eax],edx
c00130d4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00130d8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00130db:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c00130e0:	7f 76                	jg     c0013158 <UnixFile::~UnixFile()+0x92>
c00130e2:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00130ea:	83 ec 0c             	sub    esp,0xc
c00130ed:	68 58 f2 02 c0       	push   0xc002f258
c00130f2:	e8 1b f3 00 00       	call   c0022412 <LinkedList<UnixFile>::getFirstElement()>
c00130f7:	83 c4 10             	add    esp,0x10
c00130fa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00130fe:	83 ec 0c             	sub    esp,0xc
c0013101:	68 58 f2 02 c0       	push   0xc002f258
c0013106:	e8 0f f3 00 00       	call   c002241a <LinkedList<UnixFile>::removeFirst()>
c001310b:	83 c4 10             	add    esp,0x10
c001310e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013112:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0013116:	74 43                	je     c001315b <UnixFile::~UnixFile()+0x95>
c0013118:	83 ec 08             	sub    esp,0x8
c001311b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001311f:	68 58 f2 02 c0       	push   0xc002f258
c0013124:	e8 15 f2 00 00       	call   c002233e <LinkedList<UnixFile>::addElement(UnixFile*)>
c0013129:	83 c4 10             	add    esp,0x10
c001312c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013130:	8d 50 01             	lea    edx,[eax+0x1]
c0013133:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0013137:	3d 20 a1 07 00       	cmp    eax,0x7a120
c001313c:	0f 94 c0             	sete   al
c001313f:	0f b6 c0             	movzx  eax,al
c0013142:	85 c0                	test   eax,eax
c0013144:	74 a4                	je     c00130ea <UnixFile::~UnixFile()+0x24>
c0013146:	83 ec 0c             	sub    esp,0xc
c0013149:	68 c4 47 02 c0       	push   0xc00247c4
c001314e:	e8 37 cd ff ff       	call   c000fe8a <KePanic(char const*)>
c0013153:	83 c4 10             	add    esp,0x10
c0013156:	eb 92                	jmp    c00130ea <UnixFile::~UnixFile()+0x24>
c0013158:	90                   	nop
c0013159:	eb 01                	jmp    c001315c <UnixFile::~UnixFile()+0x96>
c001315b:	90                   	nop
c001315c:	90                   	nop
c001315d:	83 c4 1c             	add    esp,0x1c
c0013160:	c3                   	ret    
c0013161:	90                   	nop

c0013162 <UnixFile::~UnixFile()>:
c0013162:	83 ec 0c             	sub    esp,0xc
c0013165:	83 ec 0c             	sub    esp,0xc
c0013168:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001316c:	e8 55 ff ff ff       	call   c00130c6 <UnixFile::~UnixFile()>
c0013171:	83 c4 10             	add    esp,0x10
c0013174:	83 ec 08             	sub    esp,0x8
c0013177:	6a 0c                	push   0xc
c0013179:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001317d:	e8 73 a1 ff ff       	call   c000d2f5 <operator delete(void*, unsigned long)>
c0013182:	83 c4 10             	add    esp,0x10
c0013185:	83 c4 0c             	add    esp,0xc
c0013188:	c3                   	ret    
c0013189:	90                   	nop

c001318a <ReservedFilename::~ReservedFilename()>:
c001318a:	83 ec 0c             	sub    esp,0xc
c001318d:	ba 2c 48 02 c0       	mov    edx,0xc002482c
c0013192:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013196:	89 10                	mov    DWORD PTR [eax],edx
c0013198:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001319c:	83 ec 0c             	sub    esp,0xc
c001319f:	50                   	push   eax
c00131a0:	e8 21 ff ff ff       	call   c00130c6 <UnixFile::~UnixFile()>
c00131a5:	83 c4 10             	add    esp,0x10
c00131a8:	90                   	nop
c00131a9:	83 c4 0c             	add    esp,0xc
c00131ac:	c3                   	ret    
c00131ad:	90                   	nop

c00131ae <ReservedFilename::~ReservedFilename()>:
c00131ae:	83 ec 0c             	sub    esp,0xc
c00131b1:	83 ec 0c             	sub    esp,0xc
c00131b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00131b8:	e8 cd ff ff ff       	call   c001318a <ReservedFilename::~ReservedFilename()>
c00131bd:	83 c4 10             	add    esp,0x10
c00131c0:	83 ec 08             	sub    esp,0x8
c00131c3:	6a 0c                	push   0xc
c00131c5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00131c9:	e8 27 a1 ff ff       	call   c000d2f5 <operator delete(void*, unsigned long)>
c00131ce:	83 c4 10             	add    esp,0x10
c00131d1:	83 c4 0c             	add    esp,0xc
c00131d4:	c3                   	ret    

c00131d5 <KeGetFileFromDescriptor(int)>:
c00131d5:	53                   	push   ebx
c00131d6:	83 ec 10             	sub    esp,0x10
c00131d9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00131dd:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c00131e3:	53                   	push   ebx
c00131e4:	68 e4 47 02 c0       	push   0xc00247e4
c00131e9:	e8 78 3d ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00131ee:	83 c4 10             	add    esp,0x10
c00131f1:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c00131f7:	7f 30                	jg     c0013229 <KeGetFileFromDescriptor(int)+0x54>
c00131f9:	83 ec 0c             	sub    esp,0xc
c00131fc:	68 58 f2 02 c0       	push   0xc002f258
c0013201:	e8 0c f2 00 00       	call   c0022412 <LinkedList<UnixFile>::getFirstElement()>
c0013206:	8d 50 ff             	lea    edx,[eax-0x1]
c0013209:	83 c4 10             	add    esp,0x10
c001320c:	83 fa fd             	cmp    edx,0xfffffffd
c001320f:	76 04                	jbe    c0013215 <KeGetFileFromDescriptor(int)+0x40>
c0013211:	31 c0                	xor    eax,eax
c0013213:	eb 6e                	jmp    c0013283 <KeGetFileFromDescriptor(int)+0xae>
c0013215:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0013218:	74 69                	je     c0013283 <KeGetFileFromDescriptor(int)+0xae>
c001321a:	52                   	push   edx
c001321b:	52                   	push   edx
c001321c:	50                   	push   eax
c001321d:	68 58 f2 02 c0       	push   0xc002f258
c0013222:	e8 95 f2 00 00       	call   c00224bc <LinkedList<UnixFile>::getNext(UnixFile*)>
c0013227:	eb dd                	jmp    c0013206 <KeGetFileFromDescriptor(int)+0x31>
c0013229:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c001322f:	a1 4c f2 02 c0       	mov    eax,ds:0xc002f24c
c0013234:	74 4d                	je     c0013283 <KeGetFileFromDescriptor(int)+0xae>
c0013236:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c001323c:	a1 50 f2 02 c0       	mov    eax,ds:0xc002f250
c0013241:	74 40                	je     c0013283 <KeGetFileFromDescriptor(int)+0xae>
c0013243:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0013249:	a1 48 f2 02 c0       	mov    eax,ds:0xc002f248
c001324e:	74 33                	je     c0013283 <KeGetFileFromDescriptor(int)+0xae>
c0013250:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0013256:	a1 44 f2 02 c0       	mov    eax,ds:0xc002f244
c001325b:	74 26                	je     c0013283 <KeGetFileFromDescriptor(int)+0xae>
c001325d:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0013263:	83 f8 08             	cmp    eax,0x8
c0013266:	77 09                	ja     c0013271 <KeGetFileFromDescriptor(int)+0x9c>
c0013268:	8b 04 85 20 f2 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0de0]
c001326f:	eb 12                	jmp    c0013283 <KeGetFileFromDescriptor(int)+0xae>
c0013271:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0013277:	83 fb 08             	cmp    ebx,0x8
c001327a:	77 95                	ja     c0013211 <KeGetFileFromDescriptor(int)+0x3c>
c001327c:	8b 04 9d e0 f1 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd0e20]
c0013283:	83 c4 08             	add    esp,0x8
c0013286:	5b                   	pop    ebx
c0013287:	c3                   	ret    

c0013288 <__static_initialization_and_destruction_0(int, int)>:
c0013288:	83 ec 0c             	sub    esp,0xc
c001328b:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0013290:	75 34                	jne    c00132c6 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0013292:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001329a:	75 2a                	jne    c00132c6 <__static_initialization_and_destruction_0(int, int)+0x3e>
c001329c:	83 ec 0c             	sub    esp,0xc
c001329f:	68 58 f2 02 c0       	push   0xc002f258
c00132a4:	e8 53 f0 00 00       	call   c00222fc <LinkedList<UnixFile>::LinkedList()>
c00132a9:	83 c4 10             	add    esp,0x10
c00132ac:	83 ec 04             	sub    esp,0x4
c00132af:	68 d0 67 02 c0       	push   0xc00267d0
c00132b4:	68 58 f2 02 c0       	push   0xc002f258
c00132b9:	68 fa 22 02 c0       	push   0xc00222fa
c00132be:	e8 e2 9f ff ff       	call   c000d2a5 <__cxa_atexit>
c00132c3:	83 c4 10             	add    esp,0x10
c00132c6:	90                   	nop
c00132c7:	83 c4 0c             	add    esp,0xc
c00132ca:	c3                   	ret    

c00132cb <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c00132cb:	83 ec 0c             	sub    esp,0xc
c00132ce:	83 ec 08             	sub    esp,0x8
c00132d1:	68 ff ff 00 00       	push   0xffff
c00132d6:	6a 01                	push   0x1
c00132d8:	e8 ab ff ff ff       	call   c0013288 <__static_initialization_and_destruction_0(int, int)>
c00132dd:	83 c4 10             	add    esp,0x10
c00132e0:	83 c4 0c             	add    esp,0xc
c00132e3:	c3                   	ret    

c00132e4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c00132e4:	53                   	push   ebx
c00132e5:	8b 15 88 6f 02 c0    	mov    edx,DWORD PTR ds:0xc0026f88
c00132eb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00132ef:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00132f3:	8d 98 00 80 f3 ff    	lea    ebx,[eax-0xc8000]
c00132f9:	89 d8                	mov    eax,ebx
c00132fb:	d1 e8                	shr    eax,1
c00132fd:	01 d0                	add    eax,edx
c00132ff:	80 e3 01             	and    bl,0x1
c0013302:	8a 10                	mov    dl,BYTE PTR [eax]
c0013304:	75 09                	jne    c001330f <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x2b>
c0013306:	83 e2 f0             	and    edx,0xfffffff0
c0013309:	09 ca                	or     edx,ecx
c001330b:	88 10                	mov    BYTE PTR [eax],dl
c001330d:	5b                   	pop    ebx
c001330e:	c3                   	ret    
c001330f:	0f b6 c9             	movzx  ecx,cl
c0013312:	83 e2 0f             	and    edx,0xf
c0013315:	c1 e1 04             	shl    ecx,0x4
c0013318:	09 ca                	or     edx,ecx
c001331a:	88 10                	mov    BYTE PTR [eax],dl
c001331c:	5b                   	pop    ebx
c001331d:	c3                   	ret    

c001331e <Virt::getPageState(unsigned long)>:
c001331e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013322:	8b 0d 88 6f 02 c0    	mov    ecx,DWORD PTR ds:0xc0026f88
c0013328:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c001332e:	89 d0                	mov    eax,edx
c0013330:	d1 e8                	shr    eax,1
c0013332:	80 e2 01             	and    dl,0x1
c0013335:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0013338:	74 03                	je     c001333d <Virt::getPageState(unsigned long)+0x1f>
c001333a:	c1 e8 04             	shr    eax,0x4
c001333d:	83 e0 0f             	and    eax,0xf
c0013340:	c3                   	ret    

c0013341 <Virt::allocateKernelVirtualPages(int)>:
c0013341:	55                   	push   ebp
c0013342:	57                   	push   edi
c0013343:	56                   	push   esi
c0013344:	31 f6                	xor    esi,esi
c0013346:	53                   	push   ebx
c0013347:	31 db                	xor    ebx,ebx
c0013349:	83 ec 1c             	sub    esp,0x1c
c001334c:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0013351:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0013355:	8b 2d 84 6f 02 c0    	mov    ebp,DWORD PTR ds:0xc0026f84
c001335b:	55                   	push   ebp
c001335c:	e8 bd ff ff ff       	call   c001331e <Virt::getPageState(unsigned long)>
c0013361:	5a                   	pop    edx
c0013362:	84 c0                	test   al,al
c0013364:	75 3d                	jne    c00133a3 <Virt::allocateKernelVirtualPages(int)+0x62>
c0013366:	85 db                	test   ebx,ebx
c0013368:	0f 44 f5             	cmove  esi,ebp
c001336b:	83 c3 01             	add    ebx,0x1
c001336e:	39 fb                	cmp    ebx,edi
c0013370:	74 5e                	je     c00133d0 <Virt::allocateKernelVirtualPages(int)+0x8f>
c0013372:	83 c5 01             	add    ebp,0x1
c0013375:	81 fd ff ff 0e 00    	cmp    ebp,0xeffff
c001337b:	76 33                	jbe    c00133b0 <Virt::allocateKernelVirtualPages(int)+0x6f>
c001337d:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0013382:	c7 05 84 6f 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0026f84,0xc8000
c001338c:	75 2a                	jne    c00133b8 <Virt::allocateKernelVirtualPages(int)+0x77>
c001338e:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0013393:	bd 00 80 0c 00       	mov    ebp,0xc8000
c0013398:	55                   	push   ebp
c0013399:	e8 80 ff ff ff       	call   c001331e <Virt::getPageState(unsigned long)>
c001339e:	5a                   	pop    edx
c001339f:	84 c0                	test   al,al
c00133a1:	74 c3                	je     c0013366 <Virt::allocateKernelVirtualPages(int)+0x25>
c00133a3:	83 c5 01             	add    ebp,0x1
c00133a6:	31 db                	xor    ebx,ebx
c00133a8:	81 fd ff ff 0e 00    	cmp    ebp,0xeffff
c00133ae:	77 cd                	ja     c001337d <Virt::allocateKernelVirtualPages(int)+0x3c>
c00133b0:	89 2d 84 6f 02 c0    	mov    DWORD PTR ds:0xc0026f84,ebp
c00133b6:	eb a3                	jmp    c001335b <Virt::allocateKernelVirtualPages(int)+0x1a>
c00133b8:	83 ec 0c             	sub    esp,0xc
c00133bb:	68 40 48 02 c0       	push   0xc0024840
c00133c0:	e8 c5 ca ff ff       	call   c000fe8a <KePanic(char const*)>
c00133c5:	8b 2d 84 6f 02 c0    	mov    ebp,DWORD PTR ds:0xc0026f84
c00133cb:	83 c4 10             	add    esp,0x10
c00133ce:	eb 8b                	jmp    c001335b <Virt::allocateKernelVirtualPages(int)+0x1a>
c00133d0:	89 35 84 6f 02 c0    	mov    DWORD PTR ds:0xc0026f84,esi
c00133d6:	83 fb 01             	cmp    ebx,0x1
c00133d9:	74 63                	je     c001343e <Virt::allocateKernelVirtualPages(int)+0xfd>
c00133db:	85 ff                	test   edi,edi
c00133dd:	74 41                	je     c0013420 <Virt::allocateKernelVirtualPages(int)+0xdf>
c00133df:	89 f0                	mov    eax,esi
c00133e1:	31 db                	xor    ebx,ebx
c00133e3:	8d 6f ff             	lea    ebp,[edi-0x1]
c00133e6:	eb 16                	jmp    c00133fe <Virt::allocateKernelVirtualPages(int)+0xbd>
c00133e8:	6a 01                	push   0x1
c00133ea:	83 c3 01             	add    ebx,0x1
c00133ed:	50                   	push   eax
c00133ee:	e8 f1 fe ff ff       	call   c00132e4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00133f3:	39 fb                	cmp    ebx,edi
c00133f5:	58                   	pop    eax
c00133f6:	5a                   	pop    edx
c00133f7:	74 27                	je     c0013420 <Virt::allocateKernelVirtualPages(int)+0xdf>
c00133f9:	a1 84 6f 02 c0       	mov    eax,ds:0xc0026f84
c00133fe:	8d 50 01             	lea    edx,[eax+0x1]
c0013401:	85 db                	test   ebx,ebx
c0013403:	89 15 84 6f 02 c0    	mov    DWORD PTR ds:0xc0026f84,edx
c0013409:	74 22                	je     c001342d <Virt::allocateKernelVirtualPages(int)+0xec>
c001340b:	39 dd                	cmp    ebp,ebx
c001340d:	75 d9                	jne    c00133e8 <Virt::allocateKernelVirtualPages(int)+0xa7>
c001340f:	6a 03                	push   0x3
c0013411:	83 c3 01             	add    ebx,0x1
c0013414:	50                   	push   eax
c0013415:	e8 ca fe ff ff       	call   c00132e4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001341a:	39 fb                	cmp    ebx,edi
c001341c:	59                   	pop    ecx
c001341d:	58                   	pop    eax
c001341e:	75 d9                	jne    c00133f9 <Virt::allocateKernelVirtualPages(int)+0xb8>
c0013420:	83 c4 1c             	add    esp,0x1c
c0013423:	89 f0                	mov    eax,esi
c0013425:	5b                   	pop    ebx
c0013426:	c1 e0 0c             	shl    eax,0xc
c0013429:	5e                   	pop    esi
c001342a:	5f                   	pop    edi
c001342b:	5d                   	pop    ebp
c001342c:	c3                   	ret    
c001342d:	6a 02                	push   0x2
c001342f:	bb 01 00 00 00       	mov    ebx,0x1
c0013434:	50                   	push   eax
c0013435:	e8 aa fe ff ff       	call   c00132e4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001343a:	58                   	pop    eax
c001343b:	5a                   	pop    edx
c001343c:	eb bb                	jmp    c00133f9 <Virt::allocateKernelVirtualPages(int)+0xb8>
c001343e:	6a 04                	push   0x4
c0013440:	56                   	push   esi
c0013441:	8d 46 01             	lea    eax,[esi+0x1]
c0013444:	a3 84 6f 02 c0       	mov    ds:0xc0026f84,eax
c0013449:	e8 96 fe ff ff       	call   c00132e4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001344e:	89 f0                	mov    eax,esi
c0013450:	59                   	pop    ecx
c0013451:	c1 e0 0c             	shl    eax,0xc
c0013454:	5b                   	pop    ebx
c0013455:	83 c4 1c             	add    esp,0x1c
c0013458:	5b                   	pop    ebx
c0013459:	5e                   	pop    esi
c001345a:	5f                   	pop    edi
c001345b:	5d                   	pop    ebp
c001345c:	c3                   	ret    

c001345d <Virt::freeSwapfilePage(unsigned long)>:
c001345d:	53                   	push   ebx
c001345e:	8b 15 6c f2 02 c0    	mov    edx,DWORD PTR ds:0xc002f26c
c0013464:	b8 01 00 00 00       	mov    eax,0x1
c0013469:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001346d:	d3 e0                	shl    eax,cl
c001346f:	89 cb                	mov    ebx,ecx
c0013471:	c1 eb 05             	shr    ebx,0x5
c0013474:	f7 d0                	not    eax
c0013476:	8b 0c 9a             	mov    ecx,DWORD PTR [edx+ebx*4]
c0013479:	21 c1                	and    ecx,eax
c001347b:	89 0c 9a             	mov    DWORD PTR [edx+ebx*4],ecx
c001347e:	5b                   	pop    ebx
c001347f:	c3                   	ret    

c0013480 <Virt::swapIDToSector(unsigned long)>:
c0013480:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013484:	8b 15 8c 6f 02 c0    	mov    edx,DWORD PTR ds:0xc0026f8c
c001348a:	8b 0d 94 6f 02 c0    	mov    ecx,DWORD PTR ds:0xc0026f94
c0013490:	0f af c2             	imul   eax,edx
c0013493:	01 c8                	add    eax,ecx
c0013495:	c3                   	ret    

c0013496 <Virt::allocateSwapfilePage()>:
c0013496:	55                   	push   ebp
c0013497:	31 d2                	xor    edx,edx
c0013499:	57                   	push   edi
c001349a:	56                   	push   esi
c001349b:	53                   	push   ebx
c001349c:	83 ec 0c             	sub    esp,0xc
c001349f:	8b 1d 90 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026f90
c00134a5:	8b 0d 8c 6f 02 c0    	mov    ecx,DWORD PTR ds:0xc0026f8c
c00134ab:	89 d8                	mov    eax,ebx
c00134ad:	f7 f1                	div    ecx
c00134af:	39 cb                	cmp    ebx,ecx
c00134b1:	72 2f                	jb     c00134e2 <Virt::allocateSwapfilePage()+0x4c>
c00134b3:	8b 35 6c f2 02 c0    	mov    esi,DWORD PTR ds:0xc002f26c
c00134b9:	8b 16                	mov    edx,DWORD PTR [esi]
c00134bb:	f6 c2 01             	test   dl,0x1
c00134be:	74 3e                	je     c00134fe <Virt::allocateSwapfilePage()+0x68>
c00134c0:	31 c9                	xor    ecx,ecx
c00134c2:	bf 01 00 00 00       	mov    edi,0x1
c00134c7:	eb 12                	jmp    c00134db <Virt::allocateSwapfilePage()+0x45>
c00134c9:	89 ca                	mov    edx,ecx
c00134cb:	89 fd                	mov    ebp,edi
c00134cd:	c1 ea 05             	shr    edx,0x5
c00134d0:	8d 1c 96             	lea    ebx,[esi+edx*4]
c00134d3:	8b 13                	mov    edx,DWORD PTR [ebx]
c00134d5:	d3 e5                	shl    ebp,cl
c00134d7:	85 ea                	test   edx,ebp
c00134d9:	74 2c                	je     c0013507 <Virt::allocateSwapfilePage()+0x71>
c00134db:	83 c1 01             	add    ecx,0x1
c00134de:	39 c8                	cmp    eax,ecx
c00134e0:	77 e7                	ja     c00134c9 <Virt::allocateSwapfilePage()+0x33>
c00134e2:	83 ec 0c             	sub    esp,0xc
c00134e5:	68 c3 4d 02 c0       	push   0xc0024dc3
c00134ea:	e8 9b c9 ff ff       	call   c000fe8a <KePanic(char const*)>
c00134ef:	83 c4 10             	add    esp,0x10
c00134f2:	31 c9                	xor    ecx,ecx
c00134f4:	83 c4 0c             	add    esp,0xc
c00134f7:	89 c8                	mov    eax,ecx
c00134f9:	5b                   	pop    ebx
c00134fa:	5e                   	pop    esi
c00134fb:	5f                   	pop    edi
c00134fc:	5d                   	pop    ebp
c00134fd:	c3                   	ret    
c00134fe:	89 f3                	mov    ebx,esi
c0013500:	bd 01 00 00 00       	mov    ebp,0x1
c0013505:	31 c9                	xor    ecx,ecx
c0013507:	09 ea                	or     edx,ebp
c0013509:	89 c8                	mov    eax,ecx
c001350b:	89 13                	mov    DWORD PTR [ebx],edx
c001350d:	83 c4 0c             	add    esp,0xc
c0013510:	5b                   	pop    ebx
c0013511:	5e                   	pop    esi
c0013512:	5f                   	pop    edi
c0013513:	5d                   	pop    ebp
c0013514:	c3                   	ret    

c0013515 <Virt::virtualMemorySetup()>:
c0013515:	53                   	push   ebx
c0013516:	bb 00 80 0c 00       	mov    ebx,0xc8000
c001351b:	6a 0f                	push   0xf
c001351d:	53                   	push   ebx
c001351e:	83 c3 01             	add    ebx,0x1
c0013521:	e8 be fd ff ff       	call   c00132e4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0013526:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c001352c:	58                   	pop    eax
c001352d:	5a                   	pop    edx
c001352e:	75 eb                	jne    c001351b <Virt::virtualMemorySetup()+0x6>
c0013530:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0013535:	6a 00                	push   0x0
c0013537:	53                   	push   ebx
c0013538:	83 c3 01             	add    ebx,0x1
c001353b:	e8 a4 fd ff ff       	call   c00132e4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0013540:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0013546:	59                   	pop    ecx
c0013547:	58                   	pop    eax
c0013548:	75 eb                	jne    c0013535 <Virt::virtualMemorySetup()+0x20>
c001354a:	bb 00 00 0d 00       	mov    ebx,0xd0000
c001354f:	6a 0f                	push   0xf
c0013551:	53                   	push   ebx
c0013552:	83 c3 01             	add    ebx,0x1
c0013555:	e8 8a fd ff ff       	call   c00132e4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001355a:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0013560:	58                   	pop    eax
c0013561:	5a                   	pop    edx
c0013562:	75 eb                	jne    c001354f <Virt::virtualMemorySetup()+0x3a>
c0013564:	5b                   	pop    ebx
c0013565:	c3                   	ret    

c0013566 <Virt::setupPageSwapping(int)>:
c0013566:	53                   	push   ebx
c0013567:	83 ec 0c             	sub    esp,0xc
c001356a:	a1 e8 ca 02 c0       	mov    eax,ds:0xc002cae8
c001356f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0013573:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0013579:	8b 10                	mov    edx,DWORD PTR [eax]
c001357b:	53                   	push   ebx
c001357c:	68 da 4d 02 c0       	push   0xc0024dda
c0013581:	50                   	push   eax
c0013582:	ff 52 60             	call   DWORD PTR [edx+0x60]
c0013585:	c1 e3 0b             	shl    ebx,0xb
c0013588:	89 1d 90 6f 02 c0    	mov    DWORD PTR ds:0xc0026f90,ebx
c001358e:	c1 eb 08             	shr    ebx,0x8
c0013591:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013594:	c6 05 98 6f 02 c0 43 	mov    BYTE PTR ds:0xc0026f98,0x43
c001359b:	c7 05 8c 6f 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc0026f8c,0x8
c00135a5:	a3 94 6f 02 c0       	mov    ds:0xc0026f94,eax
c00135aa:	e8 cd c5 ff ff       	call   c000fb7c <malloc>
c00135af:	31 d2                	xor    edx,edx
c00135b1:	83 c4 0c             	add    esp,0xc
c00135b4:	a3 6c f2 02 c0       	mov    ds:0xc002f26c,eax
c00135b9:	89 c1                	mov    ecx,eax
c00135bb:	a1 90 6f 02 c0       	mov    eax,ds:0xc0026f90
c00135c0:	f7 35 8c 6f 02 c0    	div    DWORD PTR ds:0xc0026f8c
c00135c6:	c1 e8 05             	shr    eax,0x5
c00135c9:	50                   	push   eax
c00135ca:	6a 00                	push   0x0
c00135cc:	51                   	push   ecx
c00135cd:	e8 1e cf fe ff       	call   c00004f0 <memset>
c00135d2:	83 c4 18             	add    esp,0x18
c00135d5:	5b                   	pop    ebx
c00135d6:	c3                   	ret    
c00135d7:	90                   	nop

c00135d8 <VAS::setCPUSpecific(unsigned long)>:
c00135d8:	c3                   	ret    
c00135d9:	90                   	nop

c00135da <VAS::VAS(VAS*)>:
c00135da:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00135de:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00135e5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00135e9:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00135f0:	90                   	nop
c00135f1:	c3                   	ret    

c00135f2 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c00135f2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00135f6:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c00135fb:	89 c2                	mov    edx,eax
c00135fd:	c1 ea 16             	shr    edx,0x16
c0013600:	c1 e8 0a             	shr    eax,0xa
c0013603:	83 f9 01             	cmp    ecx,0x1
c0013606:	19 c9                	sbb    ecx,ecx
c0013608:	25 fc 0f 00 00       	and    eax,0xffc
c001360d:	c1 e2 0c             	shl    edx,0xc
c0013610:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0013616:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c001361d:	01 d0                	add    eax,edx
c001361f:	c3                   	ret    

c0013620 <VAS::getPageTableEntry(unsigned long)>:
c0013620:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0013624:	89 ca                	mov    edx,ecx
c0013626:	c1 ea 16             	shr    edx,0x16
c0013629:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c001362f:	c1 e9 0a             	shr    ecx,0xa
c0013632:	c1 e0 0c             	shl    eax,0xc
c0013635:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c001363b:	8d 04 08             	lea    eax,[eax+ecx*1]
c001363e:	c3                   	ret    

c001363f <Virt::freeKernelVirtualPages(unsigned long)>:
c001363f:	55                   	push   ebp
c0013640:	57                   	push   edi
c0013641:	bf 01 00 00 00       	mov    edi,0x1
c0013646:	56                   	push   esi
c0013647:	53                   	push   ebx
c0013648:	83 ec 1c             	sub    esp,0x1c
c001364b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001364f:	c1 ee 0c             	shr    esi,0xc
c0013652:	eb 48                	jmp    c001369c <Virt::freeKernelVirtualPages(unsigned long)+0x5d>
c0013654:	a1 70 f2 02 c0       	mov    eax,ds:0xc002f270
c0013659:	83 ec 08             	sub    esp,0x8
c001365c:	55                   	push   ebp
c001365d:	50                   	push   eax
c001365e:	e8 bd ff ff ff       	call   c0013620 <VAS::getPageTableEntry(unsigned long)>
c0013663:	83 c4 10             	add    esp,0x10
c0013666:	8b 10                	mov    edx,DWORD PTR [eax]
c0013668:	f6 c6 04             	test   dh,0x4
c001366b:	75 70                	jne    c00136dd <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c001366d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013673:	83 fb 04             	cmp    ebx,0x4
c0013676:	0f 84 8a 00 00 00    	je     c0013706 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c001367c:	83 fb 02             	cmp    ebx,0x2
c001367f:	0f 84 9a 00 00 00    	je     c001371f <Virt::freeKernelVirtualPages(unsigned long)+0xe0>
c0013685:	83 fb 03             	cmp    ebx,0x3
c0013688:	0f 84 be 00 00 00    	je     c001374c <Virt::freeKernelVirtualPages(unsigned long)+0x10d>
c001368e:	83 fb 01             	cmp    ebx,0x1
c0013691:	0f 84 a2 00 00 00    	je     c0013739 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c0013697:	83 c6 01             	add    esi,0x1
c001369a:	31 ff                	xor    edi,edi
c001369c:	56                   	push   esi
c001369d:	89 f5                	mov    ebp,esi
c001369f:	e8 7a fc ff ff       	call   c001331e <Virt::getPageState(unsigned long)>
c00136a4:	c1 e5 0c             	shl    ebp,0xc
c00136a7:	5a                   	pop    edx
c00136a8:	0f b6 d8             	movzx  ebx,al
c00136ab:	85 db                	test   ebx,ebx
c00136ad:	75 a5                	jne    c0013654 <Virt::freeKernelVirtualPages(unsigned long)+0x15>
c00136af:	83 ec 0c             	sub    esp,0xc
c00136b2:	68 f1 4d 02 c0       	push   0xc0024df1
c00136b7:	e8 ce c7 ff ff       	call   c000fe8a <KePanic(char const*)>
c00136bc:	5a                   	pop    edx
c00136bd:	59                   	pop    ecx
c00136be:	55                   	push   ebp
c00136bf:	8b 2d 70 f2 02 c0    	mov    ebp,DWORD PTR ds:0xc002f270
c00136c5:	55                   	push   ebp
c00136c6:	e8 55 ff ff ff       	call   c0013620 <VAS::getPageTableEntry(unsigned long)>
c00136cb:	83 c4 10             	add    esp,0x10
c00136ce:	8b 10                	mov    edx,DWORD PTR [eax]
c00136d0:	f6 c6 04             	test   dh,0x4
c00136d3:	75 08                	jne    c00136dd <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c00136d5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00136db:	eb ba                	jmp    c0013697 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c00136dd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00136e1:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00136e7:	83 ec 0c             	sub    esp,0xc
c00136ea:	52                   	push   edx
c00136eb:	e8 2b c9 ff ff       	call   c001001b <Phys::freePage(unsigned long)>
c00136f0:	83 c4 10             	add    esp,0x10
c00136f3:	83 fb 04             	cmp    ebx,0x4
c00136f6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00136fa:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013700:	0f 85 76 ff ff ff    	jne    c001367c <Virt::freeKernelVirtualPages(unsigned long)+0x3d>
c0013706:	83 e7 01             	and    edi,0x1
c0013709:	75 46                	jne    c0013751 <Virt::freeKernelVirtualPages(unsigned long)+0x112>
c001370b:	c7 44 24 30 60 48 02 c0 	mov    DWORD PTR [esp+0x30],0xc0024860
c0013713:	83 c4 1c             	add    esp,0x1c
c0013716:	5b                   	pop    ebx
c0013717:	5e                   	pop    esi
c0013718:	5f                   	pop    edi
c0013719:	5d                   	pop    ebp
c001371a:	e9 6b c7 ff ff       	jmp    c000fe8a <KePanic(char const*)>
c001371f:	83 e7 01             	and    edi,0x1
c0013722:	75 15                	jne    c0013739 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c0013724:	83 ec 0c             	sub    esp,0xc
c0013727:	68 0d 4e 02 c0       	push   0xc0024e0d
c001372c:	e8 59 c7 ff ff       	call   c000fe8a <KePanic(char const*)>
c0013731:	83 c4 10             	add    esp,0x10
c0013734:	e9 5e ff ff ff       	jmp    c0013697 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0013739:	83 ec 08             	sub    esp,0x8
c001373c:	6a 00                	push   0x0
c001373e:	56                   	push   esi
c001373f:	e8 a0 fb ff ff       	call   c00132e4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0013744:	83 c4 10             	add    esp,0x10
c0013747:	e9 4b ff ff ff       	jmp    c0013697 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c001374c:	83 e7 01             	and    edi,0x1
c001374f:	75 16                	jne    c0013767 <Virt::freeKernelVirtualPages(unsigned long)+0x128>
c0013751:	83 ec 08             	sub    esp,0x8
c0013754:	6a 00                	push   0x0
c0013756:	56                   	push   esi
c0013757:	e8 88 fb ff ff       	call   c00132e4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001375c:	83 c4 10             	add    esp,0x10
c001375f:	83 c4 1c             	add    esp,0x1c
c0013762:	5b                   	pop    ebx
c0013763:	5e                   	pop    esi
c0013764:	5f                   	pop    edi
c0013765:	5d                   	pop    ebp
c0013766:	c3                   	ret    
c0013767:	c7 44 24 30 29 4e 02 c0 	mov    DWORD PTR [esp+0x30],0xc0024e29
c001376f:	83 c4 1c             	add    esp,0x1c
c0013772:	5b                   	pop    ebx
c0013773:	5e                   	pop    esi
c0013774:	5f                   	pop    edi
c0013775:	5d                   	pop    ebp
c0013776:	e9 0f c7 ff ff       	jmp    c000fe8a <KePanic(char const*)>
c001377b:	90                   	nop

c001377c <VAS::freeAllocatedPages(unsigned long)>:
c001377c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013780:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013784:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0013788:	74 09                	je     c0013793 <VAS::freeAllocatedPages(unsigned long)+0x17>
c001378a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001378e:	e9 ac fe ff ff       	jmp    c001363f <Virt::freeKernelVirtualPages(unsigned long)>
c0013793:	c7 44 24 04 84 48 02 c0 	mov    DWORD PTR [esp+0x4],0xc0024884
c001379b:	e9 c6 37 ff ff       	jmp    c0006f66 <Dbg::kprintf(char const*, ...)>

c00137a0 <VAS::virtualToPhysical(unsigned long)>:
c00137a0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00137a4:	50                   	push   eax
c00137a5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00137a9:	52                   	push   edx
c00137aa:	e8 71 fe ff ff       	call   c0013620 <VAS::getPageTableEntry(unsigned long)>
c00137af:	59                   	pop    ecx
c00137b0:	5a                   	pop    edx
c00137b1:	8b 00                	mov    eax,DWORD PTR [eax]
c00137b3:	25 00 f0 ff ff       	and    eax,0xfffff000
c00137b8:	c3                   	ret    
c00137b9:	90                   	nop

c00137ba <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>:
c00137ba:	55                   	push   ebp
c00137bb:	57                   	push   edi
c00137bc:	56                   	push   esi
c00137bd:	53                   	push   ebx
c00137be:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00137c2:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00137c6:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00137ca:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00137ce:	85 db                	test   ebx,ebx
c00137d0:	7e 24                	jle    c00137f6 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x3c>
c00137d2:	c1 e3 0c             	shl    ebx,0xc
c00137d5:	01 f3                	add    ebx,esi
c00137d7:	56                   	push   esi
c00137d8:	81 c6 00 10 00 00    	add    esi,0x1000
c00137de:	55                   	push   ebp
c00137df:	e8 3c fe ff ff       	call   c0013620 <VAS::getPageTableEntry(unsigned long)>
c00137e4:	5a                   	pop    edx
c00137e5:	59                   	pop    ecx
c00137e6:	8b 08                	mov    ecx,DWORD PTR [eax]
c00137e8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00137ec:	21 f9                	and    ecx,edi
c00137ee:	09 d1                	or     ecx,edx
c00137f0:	39 f3                	cmp    ebx,esi
c00137f2:	89 08                	mov    DWORD PTR [eax],ecx
c00137f4:	75 e1                	jne    c00137d7 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x1d>
c00137f6:	5b                   	pop    ebx
c00137f7:	5e                   	pop    esi
c00137f8:	5f                   	pop    edi
c00137f9:	5d                   	pop    ebp
c00137fa:	c3                   	ret    
c00137fb:	90                   	nop

c00137fc <VAS::VAS()>:
c00137fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013800:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013807:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001380b:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0013812:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013816:	a3 70 f2 02 c0       	mov    ds:0xc002f270,eax
c001381b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001381f:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0013823:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013827:	c6 00 01             	mov    BYTE PTR [eax],0x1
c001382a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001382e:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0013835:	ba 7d 80 02 c0       	mov    edx,0xc002807d
c001383a:	b8 00 80 02 c0       	mov    eax,0xc0028000
c001383f:	29 c2                	sub    edx,eax
c0013841:	89 d0                	mov    eax,edx
c0013843:	05 ff 0f 00 00       	add    eax,0xfff
c0013848:	c1 e8 0c             	shr    eax,0xc
c001384b:	89 c2                	mov    edx,eax
c001384d:	b8 00 80 02 c0       	mov    eax,0xc0028000
c0013852:	6a 04                	push   0x4
c0013854:	6a ff                	push   0xffffffff
c0013856:	52                   	push   edx
c0013857:	50                   	push   eax
c0013858:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001385c:	e8 59 ff ff ff       	call   c00137ba <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0013861:	83 c4 14             	add    esp,0x14
c0013864:	90                   	nop
c0013865:	c3                   	ret    

c0013866 <VAS::setToWriteCombining(unsigned long, int)>:
c0013866:	a1 48 fb 02 c0       	mov    eax,ds:0xc002fb48
c001386b:	50                   	push   eax
c001386c:	6a ff                	push   0xffffffff
c001386e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0013872:	52                   	push   edx
c0013873:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0013877:	51                   	push   ecx
c0013878:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001387c:	50                   	push   eax
c001387d:	e8 38 ff ff ff       	call   c00137ba <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0013882:	83 c4 14             	add    esp,0x14
c0013885:	c3                   	ret    

c0013886 <VAS::mapOtherVASIn(bool, VAS*)>:
c0013886:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001388a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001388d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013891:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0013894:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0013899:	83 f8 01             	cmp    eax,0x1
c001389c:	19 c0                	sbb    eax,eax
c001389e:	83 ca 03             	or     edx,0x3
c00138a1:	83 e0 fc             	and    eax,0xfffffffc
c00138a4:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c00138ab:	0f 20 d8             	mov    eax,cr3
c00138ae:	0f 22 d8             	mov    cr3,eax
c00138b1:	c3                   	ret    

c00138b2 <VAS::~VAS()>:
c00138b2:	83 ec 2c             	sub    esp,0x2c
c00138b5:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00138bd:	fa                   	cli    
c00138be:	a1 50 fa 02 c0       	mov    eax,ds:0xc002fa50
c00138c3:	83 c0 01             	add    eax,0x1
c00138c6:	a3 50 fa 02 c0       	mov    ds:0xc002fa50,eax
c00138cb:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00138d0:	8b 00                	mov    eax,DWORD PTR [eax]
c00138d2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00138d5:	8b 80 b2 05 00 00    	mov    eax,DWORD PTR [eax+0x5b2]
c00138db:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00138df:	6a 01                	push   0x1
c00138e1:	50                   	push   eax
c00138e2:	e8 9f ff ff ff       	call   c0013886 <VAS::mapOtherVASIn(bool, VAS*)>
c00138e7:	83 c4 0c             	add    esp,0xc
c00138ea:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00138f2:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c00138fa:	0f 8f d8 00 00 00    	jg     c00139d8 <VAS::~VAS()+0x126>
c0013900:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013904:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013907:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001390b:	c1 e2 02             	shl    edx,0x2
c001390e:	01 d0                	add    eax,edx
c0013910:	8b 00                	mov    eax,DWORD PTR [eax]
c0013912:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013916:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001391a:	83 e0 01             	and    eax,0x1
c001391d:	0f 84 ab 00 00 00    	je     c00139ce <VAS::~VAS()+0x11c>
c0013923:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001392b:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0013933:	7f 74                	jg     c00139a9 <VAS::~VAS()+0xf7>
c0013935:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013939:	c1 e0 0a             	shl    eax,0xa
c001393c:	89 c2                	mov    edx,eax
c001393e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013942:	01 d0                	add    eax,edx
c0013944:	c1 e0 0c             	shl    eax,0xc
c0013947:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001394b:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0013950:	8b 00                	mov    eax,DWORD PTR [eax]
c0013952:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0013955:	8b 80 b2 05 00 00    	mov    eax,DWORD PTR [eax+0x5b2]
c001395b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001395f:	6a 01                	push   0x1
c0013961:	50                   	push   eax
c0013962:	e8 8b fc ff ff       	call   c00135f2 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0013967:	83 c4 0c             	add    esp,0xc
c001396a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001396e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013972:	8b 00                	mov    eax,DWORD PTR [eax]
c0013974:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013978:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001397c:	25 01 04 00 00       	and    eax,0x401
c0013981:	3d 01 04 00 00       	cmp    eax,0x401
c0013986:	75 1a                	jne    c00139a2 <VAS::~VAS()+0xf0>
c0013988:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001398c:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013991:	83 ec 0c             	sub    esp,0xc
c0013994:	50                   	push   eax
c0013995:	e8 81 c6 ff ff       	call   c001001b <Phys::freePage(unsigned long)>
c001399a:	83 c4 10             	add    esp,0x10
c001399d:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c00139a2:	83 44 24 14 01       	add    DWORD PTR [esp+0x14],0x1
c00139a7:	eb 82                	jmp    c001392b <VAS::~VAS()+0x79>
c00139a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00139ad:	25 00 04 00 00       	and    eax,0x400
c00139b2:	74 1a                	je     c00139ce <VAS::~VAS()+0x11c>
c00139b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00139b8:	25 00 f0 ff ff       	and    eax,0xfffff000
c00139bd:	83 ec 0c             	sub    esp,0xc
c00139c0:	50                   	push   eax
c00139c1:	e8 55 c6 ff ff       	call   c001001b <Phys::freePage(unsigned long)>
c00139c6:	83 c4 10             	add    esp,0x10
c00139c9:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c00139ce:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c00139d3:	e9 1a ff ff ff       	jmp    c00138f2 <VAS::~VAS()+0x40>
c00139d8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00139dc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00139df:	83 ec 0c             	sub    esp,0xc
c00139e2:	50                   	push   eax
c00139e3:	e8 57 fc ff ff       	call   c001363f <Virt::freeKernelVirtualPages(unsigned long)>
c00139e8:	83 c4 10             	add    esp,0x10
c00139eb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00139ef:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00139f2:	83 ec 0c             	sub    esp,0xc
c00139f5:	50                   	push   eax
c00139f6:	e8 20 c6 ff ff       	call   c001001b <Phys::freePage(unsigned long)>
c00139fb:	83 c4 10             	add    esp,0x10
c00139fe:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0013a03:	f0 83 2d 50 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa50,0x1
c0013a0b:	a1 50 fa 02 c0       	mov    eax,ds:0xc002fa50
c0013a10:	85 c0                	test   eax,eax
c0013a12:	75 01                	jne    c0013a15 <VAS::~VAS()+0x163>
c0013a14:	fb                   	sti    
c0013a15:	90                   	nop
c0013a16:	83 c4 2c             	add    esp,0x2c
c0013a19:	c3                   	ret    

c0013a1a <VAS::mapPage(unsigned long, unsigned long, int)>:
c0013a1a:	55                   	push   ebp
c0013a1b:	57                   	push   edi
c0013a1c:	56                   	push   esi
c0013a1d:	53                   	push   ebx
c0013a1e:	83 ec 1c             	sub    esp,0x1c
c0013a21:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0013a25:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0013a29:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0013a2d:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0013a33:	77 08                	ja     c0013a3d <VAS::mapPage(unsigned long, unsigned long, int)+0x23>
c0013a35:	0f 20 d8             	mov    eax,cr3
c0013a38:	39 45 10             	cmp    DWORD PTR [ebp+0x10],eax
c0013a3b:	75 43                	jne    c0013a80 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c0013a3d:	89 d8                	mov    eax,ebx
c0013a3f:	09 f8                	or     eax,edi
c0013a41:	a9 ff 0f 00 00       	test   eax,0xfff
c0013a46:	75 53                	jne    c0013a9b <VAS::mapPage(unsigned long, unsigned long, int)+0x81>
c0013a48:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0013a4b:	89 de                	mov    esi,ebx
c0013a4d:	c1 ee 16             	shr    esi,0x16
c0013a50:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0013a57:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0013a5b:	74 50                	je     c0013aad <VAS::mapPage(unsigned long, unsigned long, int)+0x93>
c0013a5d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0013a61:	c1 eb 0a             	shr    ebx,0xa
c0013a64:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0013a6a:	c1 e6 0c             	shl    esi,0xc
c0013a6d:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0013a73:	09 c7                	or     edi,eax
c0013a75:	89 3c 33             	mov    DWORD PTR [ebx+esi*1],edi
c0013a78:	83 c4 1c             	add    esp,0x1c
c0013a7b:	5b                   	pop    ebx
c0013a7c:	5e                   	pop    esi
c0013a7d:	5f                   	pop    edi
c0013a7e:	5d                   	pop    ebp
c0013a7f:	c3                   	ret    
c0013a80:	83 ec 0c             	sub    esp,0xc
c0013a83:	68 a8 48 02 c0       	push   0xc00248a8
c0013a88:	e8 d9 34 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0013a8d:	89 d8                	mov    eax,ebx
c0013a8f:	83 c4 10             	add    esp,0x10
c0013a92:	09 f8                	or     eax,edi
c0013a94:	a9 ff 0f 00 00       	test   eax,0xfff
c0013a99:	74 ad                	je     c0013a48 <VAS::mapPage(unsigned long, unsigned long, int)+0x2e>
c0013a9b:	83 ec 0c             	sub    esp,0xc
c0013a9e:	68 10 49 02 c0       	push   0xc0024910
c0013aa3:	e8 e2 c3 ff ff       	call   c000fe8a <KePanic(char const*)>
c0013aa8:	83 c4 10             	add    esp,0x10
c0013aab:	eb 9b                	jmp    c0013a48 <VAS::mapPage(unsigned long, unsigned long, int)+0x2e>
c0013aad:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0013ab1:	e8 ce c5 ff ff       	call   c0010084 <Phys::allocatePage()>
c0013ab6:	8b 0d 70 f2 02 c0    	mov    ecx,DWORD PTR ds:0xc002f270
c0013abc:	83 ec 0c             	sub    esp,0xc
c0013abf:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0013ac3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013ac7:	6a 01                	push   0x1
c0013ac9:	e8 73 f8 ff ff       	call   c0013341 <Virt::allocateKernelVirtualPages(int)>
c0013ace:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0013ad5:	6a 01                	push   0x1
c0013ad7:	50                   	push   eax
c0013ad8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013adc:	52                   	push   edx
c0013add:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0013ae1:	51                   	push   ecx
c0013ae2:	e8 2d 01 00 00       	call   c0013c14 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0013ae7:	83 c4 1c             	add    esp,0x1c
c0013aea:	68 00 10 00 00       	push   0x1000
c0013aef:	6a 00                	push   0x0
c0013af1:	50                   	push   eax
c0013af2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013af6:	e8 f5 c9 fe ff       	call   c00004f0 <memset>
c0013afb:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0013aff:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0013b02:	e8 38 fb ff ff       	call   c001363f <Virt::freeKernelVirtualPages(unsigned long)>
c0013b07:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013b0b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013b0f:	83 c4 10             	add    esp,0x10
c0013b12:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0013b15:	0d 07 04 00 00       	or     eax,0x407
c0013b1a:	89 04 11             	mov    DWORD PTR [ecx+edx*1],eax
c0013b1d:	e9 3b ff ff ff       	jmp    c0013a5d <VAS::mapPage(unsigned long, unsigned long, int)+0x43>

c0013b22 <VAS::allocatePages(int, int)>:
c0013b22:	55                   	push   ebp
c0013b23:	57                   	push   edi
c0013b24:	56                   	push   esi
c0013b25:	53                   	push   ebx
c0013b26:	83 ec 1c             	sub    esp,0x1c
c0013b29:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0013b2d:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0013b31:	80 7e 01 00          	cmp    BYTE PTR [esi+0x1],0x0
c0013b35:	75 75                	jne    c0013bac <VAS::allocatePages(int, int)+0x8a>
c0013b37:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0013b3a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013b3e:	85 c0                	test   eax,eax
c0013b40:	74 49                	je     c0013b8b <VAS::allocatePages(int, int)+0x69>
c0013b42:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013b46:	89 d5                	mov    ebp,edx
c0013b48:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0013b4c:	c1 e5 0c             	shl    ebp,0xc
c0013b4f:	01 dd                	add    ebp,ebx
c0013b51:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0013b54:	81 cf 00 04 00 00    	or     edi,0x400
c0013b5a:	85 d2                	test   edx,edx
c0013b5c:	7e 1b                	jle    c0013b79 <VAS::allocatePages(int, int)+0x57>
c0013b5e:	e8 21 c5 ff ff       	call   c0010084 <Phys::allocatePage()>
c0013b63:	57                   	push   edi
c0013b64:	53                   	push   ebx
c0013b65:	81 c3 00 10 00 00    	add    ebx,0x1000
c0013b6b:	50                   	push   eax
c0013b6c:	56                   	push   esi
c0013b6d:	e8 a8 fe ff ff       	call   c0013a1a <VAS::mapPage(unsigned long, unsigned long, int)>
c0013b72:	83 c4 10             	add    esp,0x10
c0013b75:	39 dd                	cmp    ebp,ebx
c0013b77:	75 e5                	jne    c0013b5e <VAS::allocatePages(int, int)+0x3c>
c0013b79:	0f 20 d8             	mov    eax,cr3
c0013b7c:	0f 22 d8             	mov    cr3,eax
c0013b7f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013b83:	83 c4 1c             	add    esp,0x1c
c0013b86:	5b                   	pop    ebx
c0013b87:	5e                   	pop    esi
c0013b88:	5f                   	pop    edi
c0013b89:	5d                   	pop    ebp
c0013b8a:	c3                   	ret    
c0013b8b:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0013b8f:	83 ec 0c             	sub    esp,0xc
c0013b92:	68 34 49 02 c0       	push   0xc0024934
c0013b97:	e8 ee c2 ff ff       	call   c000fe8a <KePanic(char const*)>
c0013b9c:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0013b9f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013ba3:	83 c4 10             	add    esp,0x10
c0013ba6:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0013baa:	eb 96                	jmp    c0013b42 <VAS::allocatePages(int, int)+0x20>
c0013bac:	83 ec 0c             	sub    esp,0xc
c0013baf:	52                   	push   edx
c0013bb0:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0013bb4:	e8 88 f7 ff ff       	call   c0013341 <Virt::allocateKernelVirtualPages(int)>
c0013bb9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013bbd:	83 c4 10             	add    esp,0x10
c0013bc0:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0013bc5:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0013bc9:	77 38                	ja     c0013c03 <VAS::allocatePages(int, int)+0xe1>
c0013bcb:	85 d2                	test   edx,edx
c0013bcd:	7e aa                	jle    c0013b79 <VAS::allocatePages(int, int)+0x57>
c0013bcf:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0013bd3:	c1 e2 0c             	shl    edx,0xc
c0013bd6:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013bda:	81 cf 00 04 00 00    	or     edi,0x400
c0013be0:	8d 2c 1a             	lea    ebp,[edx+ebx*1]
c0013be3:	e8 9c c4 ff ff       	call   c0010084 <Phys::allocatePage()>
c0013be8:	57                   	push   edi
c0013be9:	53                   	push   ebx
c0013bea:	81 c3 00 10 00 00    	add    ebx,0x1000
c0013bf0:	50                   	push   eax
c0013bf1:	56                   	push   esi
c0013bf2:	e8 23 fe ff ff       	call   c0013a1a <VAS::mapPage(unsigned long, unsigned long, int)>
c0013bf7:	83 c4 10             	add    esp,0x10
c0013bfa:	39 dd                	cmp    ebp,ebx
c0013bfc:	75 e5                	jne    c0013be3 <VAS::allocatePages(int, int)+0xc1>
c0013bfe:	e9 76 ff ff ff       	jmp    c0013b79 <VAS::allocatePages(int, int)+0x57>
c0013c03:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0013c07:	a1 4c fb 02 c0       	mov    eax,ds:0xc002fb4c
c0013c0c:	09 c1                	or     ecx,eax
c0013c0e:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0013c12:	eb b7                	jmp    c0013bcb <VAS::allocatePages(int, int)+0xa9>

c0013c14 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0013c14:	55                   	push   ebp
c0013c15:	57                   	push   edi
c0013c16:	56                   	push   esi
c0013c17:	53                   	push   ebx
c0013c18:	83 ec 1c             	sub    esp,0x1c
c0013c1b:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0013c1f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0013c23:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0013c27:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0013c2b:	85 db                	test   ebx,ebx
c0013c2d:	7e 2c                	jle    c0013c5b <VAS::mapRange(unsigned long, unsigned long, int, int)+0x47>
c0013c2f:	c1 e3 0c             	shl    ebx,0xc
c0013c32:	8d 04 33             	lea    eax,[ebx+esi*1]
c0013c35:	89 f3                	mov    ebx,esi
c0013c37:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013c3b:	55                   	push   ebp
c0013c3c:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0013c40:	29 f2                	sub    edx,esi
c0013c42:	01 da                	add    edx,ebx
c0013c44:	52                   	push   edx
c0013c45:	53                   	push   ebx
c0013c46:	81 c3 00 10 00 00    	add    ebx,0x1000
c0013c4c:	57                   	push   edi
c0013c4d:	e8 c8 fd ff ff       	call   c0013a1a <VAS::mapPage(unsigned long, unsigned long, int)>
c0013c52:	83 c4 10             	add    esp,0x10
c0013c55:	3b 5c 24 0c          	cmp    ebx,DWORD PTR [esp+0xc]
c0013c59:	75 e0                	jne    c0013c3b <VAS::mapRange(unsigned long, unsigned long, int, int)+0x27>
c0013c5b:	0f 20 d8             	mov    eax,cr3
c0013c5e:	0f 22 d8             	mov    cr3,eax
c0013c61:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0013c65:	83 c4 1c             	add    esp,0x1c
c0013c68:	5b                   	pop    ebx
c0013c69:	5e                   	pop    esi
c0013c6a:	5f                   	pop    edi
c0013c6b:	5d                   	pop    ebp
c0013c6c:	c3                   	ret    
c0013c6d:	90                   	nop

c0013c6e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0013c6e:	55                   	push   ebp
c0013c6f:	57                   	push   edi
c0013c70:	56                   	push   esi
c0013c71:	53                   	push   ebx
c0013c72:	83 ec 1c             	sub    esp,0x1c
c0013c75:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013c79:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0013c7d:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0013c81:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013c85:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0013c89:	09 d8                	or     eax,ebx
c0013c8b:	a9 ff 0f 00 00       	test   eax,0xfff
c0013c90:	75 4b                	jne    c0013cdd <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x6f>
c0013c92:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0013c95:	89 de                	mov    esi,ebx
c0013c97:	c1 ee 16             	shr    esi,0x16
c0013c9a:	8d 2c b5 00 00 00 00 	lea    ebp,[esi*4+0x0]
c0013ca1:	f6 04 28 01          	test   BYTE PTR [eax+ebp*1],0x1
c0013ca5:	74 48                	je     c0013cef <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x81>
c0013ca7:	0f b6 7c 24 04       	movzx  edi,BYTE PTR [esp+0x4]
c0013cac:	c1 eb 0a             	shr    ebx,0xa
c0013caf:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0013cb3:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0013cb7:	83 ff 01             	cmp    edi,0x1
c0013cba:	19 c0                	sbb    eax,eax
c0013cbc:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0013cc2:	c1 e6 0c             	shl    esi,0xc
c0013cc5:	25 00 00 c0 ff       	and    eax,0xffc00000
c0013cca:	01 f3                	add    ebx,esi
c0013ccc:	09 ca                	or     edx,ecx
c0013cce:	89 94 18 00 00 c0 c2 	mov    DWORD PTR [eax+ebx*1-0x3d400000],edx
c0013cd5:	83 c4 1c             	add    esp,0x1c
c0013cd8:	5b                   	pop    ebx
c0013cd9:	5e                   	pop    esi
c0013cda:	5f                   	pop    edi
c0013cdb:	5d                   	pop    ebp
c0013cdc:	c3                   	ret    
c0013cdd:	83 ec 0c             	sub    esp,0xc
c0013ce0:	68 60 49 02 c0       	push   0xc0024960
c0013ce5:	e8 a0 c1 ff ff       	call   c000fe8a <KePanic(char const*)>
c0013cea:	83 c4 10             	add    esp,0x10
c0013ced:	eb a3                	jmp    c0013c92 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x24>
c0013cef:	e8 90 c3 ff ff       	call   c0010084 <Phys::allocatePage()>
c0013cf4:	8b 0d 70 f2 02 c0    	mov    ecx,DWORD PTR ds:0xc002f270
c0013cfa:	83 ec 0c             	sub    esp,0xc
c0013cfd:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0013d01:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013d05:	6a 01                	push   0x1
c0013d07:	e8 35 f6 ff ff       	call   c0013341 <Virt::allocateKernelVirtualPages(int)>
c0013d0c:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0013d13:	6a 01                	push   0x1
c0013d15:	50                   	push   eax
c0013d16:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d1a:	50                   	push   eax
c0013d1b:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0013d1f:	51                   	push   ecx
c0013d20:	e8 ef fe ff ff       	call   c0013c14 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0013d25:	83 c4 1c             	add    esp,0x1c
c0013d28:	68 00 10 00 00       	push   0x1000
c0013d2d:	6a 00                	push   0x0
c0013d2f:	50                   	push   eax
c0013d30:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013d34:	e8 b7 c7 fe ff       	call   c00004f0 <memset>
c0013d39:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0013d3d:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0013d40:	e8 fa f8 ff ff       	call   c001363f <Virt::freeKernelVirtualPages(unsigned long)>
c0013d45:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013d49:	83 c4 10             	add    esp,0x10
c0013d4c:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0013d4f:	81 ca 07 04 00 00    	or     edx,0x407
c0013d55:	89 14 28             	mov    DWORD PTR [eax+ebp*1],edx
c0013d58:	e9 4a ff ff ff       	jmp    c0013ca7 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x39>
c0013d5d:	90                   	nop

c0013d5e <VAS::VAS(bool)>:
c0013d5e:	53                   	push   ebx
c0013d5f:	83 ec 28             	sub    esp,0x28
c0013d62:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013d66:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0013d6a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013d6e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013d75:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013d79:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0013d80:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013d84:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0013d88:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0013d8b:	e8 f4 c2 ff ff       	call   c0010084 <Phys::allocatePage()>
c0013d90:	89 c2                	mov    edx,eax
c0013d92:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013d96:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0013d99:	8b 1d 70 f2 02 c0    	mov    ebx,DWORD PTR ds:0xc002f270
c0013d9f:	83 ec 0c             	sub    esp,0xc
c0013da2:	6a 01                	push   0x1
c0013da4:	e8 98 f5 ff ff       	call   c0013341 <Virt::allocateKernelVirtualPages(int)>
c0013da9:	83 c4 10             	add    esp,0x10
c0013dac:	89 c2                	mov    edx,eax
c0013dae:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013db2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0013db5:	83 ec 0c             	sub    esp,0xc
c0013db8:	6a 03                	push   0x3
c0013dba:	6a 01                	push   0x1
c0013dbc:	52                   	push   edx
c0013dbd:	50                   	push   eax
c0013dbe:	53                   	push   ebx
c0013dbf:	e8 50 fe ff ff       	call   c0013c14 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0013dc4:	83 c4 20             	add    esp,0x20
c0013dc7:	89 c2                	mov    edx,eax
c0013dc9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013dcd:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0013dd0:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0013dd8:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0013de0:	7f 1d                	jg     c0013dff <VAS::VAS(bool)+0xa1>
c0013de2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013de6:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013de9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013ded:	c1 e2 02             	shl    edx,0x2
c0013df0:	01 d0                	add    eax,edx
c0013df2:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0013df8:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0013dfd:	eb d9                	jmp    c0013dd8 <VAS::VAS(bool)+0x7a>
c0013dff:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0013e07:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0013e0f:	7f 59                	jg     c0013e6a <VAS::VAS(bool)+0x10c>
c0013e11:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013e15:	2d 00 02 00 00       	sub    eax,0x200
c0013e1a:	c1 e0 0c             	shl    eax,0xc
c0013e1d:	89 c2                	mov    edx,eax
c0013e1f:	a1 4c fb 02 c0       	mov    eax,ds:0xc002fb4c
c0013e24:	89 d1                	mov    ecx,edx
c0013e26:	09 c1                	or     ecx,eax
c0013e28:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013e2c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013e2f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013e33:	c1 e2 02             	shl    edx,0x2
c0013e36:	01 d0                	add    eax,edx
c0013e38:	83 c9 05             	or     ecx,0x5
c0013e3b:	89 ca                	mov    edx,ecx
c0013e3d:	89 10                	mov    DWORD PTR [eax],edx
c0013e3f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013e43:	2d 40 03 00 00       	sub    eax,0x340
c0013e48:	83 f8 7f             	cmp    eax,0x7f
c0013e4b:	77 16                	ja     c0013e63 <VAS::VAS(bool)+0x105>
c0013e4d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013e51:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013e54:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013e58:	c1 e2 02             	shl    edx,0x2
c0013e5b:	01 d0                	add    eax,edx
c0013e5d:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0013e63:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c0013e68:	eb 9d                	jmp    c0013e07 <VAS::VAS(bool)+0xa9>
c0013e6a:	8b 15 4c fb 02 c0    	mov    edx,DWORD PTR ds:0xc002fb4c
c0013e70:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013e74:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013e77:	05 20 0c 00 00       	add    eax,0xc20
c0013e7c:	81 ca 03 40 00 00    	or     edx,0x4003
c0013e82:	89 10                	mov    DWORD PTR [eax],edx
c0013e84:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013e88:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0013e8b:	a1 4c fb 02 c0       	mov    eax,ds:0xc002fb4c
c0013e90:	09 c2                	or     edx,eax
c0013e92:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013e96:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013e99:	05 fc 0f 00 00       	add    eax,0xffc
c0013e9e:	83 ca 03             	or     edx,0x3
c0013ea1:	89 10                	mov    DWORD PTR [eax],edx
c0013ea3:	a1 d4 d0 02 c0       	mov    eax,ds:0xc002d0d4
c0013ea8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013eae:	83 ec 0c             	sub    esp,0xc
c0013eb1:	50                   	push   eax
c0013eb2:	e8 9d 5d ff ff       	call   c0009c54 <Device::getName()>
c0013eb7:	83 c4 10             	add    esp,0x10
c0013eba:	83 ec 08             	sub    esp,0x8
c0013ebd:	68 43 4e 02 c0       	push   0xc0024e43
c0013ec2:	50                   	push   eax
c0013ec3:	e8 b8 c8 fe ff       	call   c0000780 <strcmp>
c0013ec8:	83 c4 10             	add    esp,0x10
c0013ecb:	85 c0                	test   eax,eax
c0013ecd:	0f 94 c0             	sete   al
c0013ed0:	0f b6 c0             	movzx  eax,al
c0013ed3:	85 c0                	test   eax,eax
c0013ed5:	74 68                	je     c0013f3f <VAS::VAS(bool)+0x1e1>
c0013ed7:	fa                   	cli    
c0013ed8:	a1 d4 d0 02 c0       	mov    eax,ds:0xc002d0d4
c0013edd:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013ee3:	05 68 09 00 00       	add    eax,0x968
c0013ee8:	83 ec 0c             	sub    esp,0xc
c0013eeb:	50                   	push   eax
c0013eec:	e8 69 b0 ff ff       	call   c000ef5a <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0013ef1:	83 c4 10             	add    esp,0x10
c0013ef4:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013ef9:	89 c3                	mov    ebx,eax
c0013efb:	a1 d4 d0 02 c0       	mov    eax,ds:0xc002d0d4
c0013f00:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013f06:	05 68 09 00 00       	add    eax,0x968
c0013f0b:	83 ec 0c             	sub    esp,0xc
c0013f0e:	50                   	push   eax
c0013f0f:	e8 46 b0 ff ff       	call   c000ef5a <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0013f14:	83 c4 10             	add    esp,0x10
c0013f17:	83 ec 08             	sub    esp,0x8
c0013f1a:	50                   	push   eax
c0013f1b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0013f1f:	e8 fc f6 ff ff       	call   c0013620 <VAS::getPageTableEntry(unsigned long)>
c0013f24:	83 c4 10             	add    esp,0x10
c0013f27:	8b 00                	mov    eax,DWORD PTR [eax]
c0013f29:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013f2e:	6a 11                	push   0x11
c0013f30:	53                   	push   ebx
c0013f31:	50                   	push   eax
c0013f32:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0013f36:	e8 df fa ff ff       	call   c0013a1a <VAS::mapPage(unsigned long, unsigned long, int)>
c0013f3b:	83 c4 10             	add    esp,0x10
c0013f3e:	fb                   	sti    
c0013f3f:	90                   	nop
c0013f40:	83 c4 28             	add    esp,0x28
c0013f43:	5b                   	pop    ebx
c0013f44:	c3                   	ret    
c0013f45:	90                   	nop

c0013f46 <VAS::evict(unsigned long)>:
c0013f46:	55                   	push   ebp
c0013f47:	57                   	push   edi
c0013f48:	56                   	push   esi
c0013f49:	53                   	push   ebx
c0013f4a:	83 ec 24             	sub    esp,0x24
c0013f4d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0013f51:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0013f55:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013f59:	a1 50 fa 02 c0       	mov    eax,ds:0xc002fa50
c0013f5e:	50                   	push   eax
c0013f5f:	68 51 4e 02 c0       	push   0xc0024e51
c0013f64:	e8 fd 2f ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0013f69:	e8 28 f5 ff ff       	call   c0013496 <Virt::allocateSwapfilePage()>
c0013f6e:	83 c4 10             	add    esp,0x10
c0013f71:	89 c7                	mov    edi,eax
c0013f73:	a1 8c 6f 02 c0       	mov    eax,ds:0xc0026f8c
c0013f78:	85 c0                	test   eax,eax
c0013f7a:	7e 40                	jle    c0013fbc <VAS::evict(unsigned long)+0x76>
c0013f7c:	89 ee                	mov    esi,ebp
c0013f7e:	31 db                	xor    ebx,ebx
c0013f80:	83 ec 0c             	sub    esp,0xc
c0013f83:	57                   	push   edi
c0013f84:	e8 f7 f4 ff ff       	call   c0013480 <Virt::swapIDToSector(unsigned long)>
c0013f89:	31 d2                	xor    edx,edx
c0013f8b:	89 34 24             	mov    DWORD PTR [esp],esi
c0013f8e:	81 c6 00 02 00 00    	add    esi,0x200
c0013f94:	6a 01                	push   0x1
c0013f96:	52                   	push   edx
c0013f97:	01 d8                	add    eax,ebx
c0013f99:	83 c3 01             	add    ebx,0x1
c0013f9c:	50                   	push   eax
c0013f9d:	0f be 05 98 6f 02 c0 	movsx  eax,BYTE PTR ds:0xc0026f98
c0013fa4:	8b 04 85 dc c9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3624]
c0013fab:	50                   	push   eax
c0013fac:	e8 07 6b ff ff       	call   c000aab8 <LogicalDisk::write(unsigned long long, int, void*)>
c0013fb1:	83 c4 20             	add    esp,0x20
c0013fb4:	39 1d 8c 6f 02 c0    	cmp    DWORD PTR ds:0xc0026f8c,ebx
c0013fba:	7f c4                	jg     c0013f80 <VAS::evict(unsigned long)+0x3a>
c0013fbc:	c1 e7 0c             	shl    edi,0xc
c0013fbf:	83 ec 08             	sub    esp,0x8
c0013fc2:	55                   	push   ebp
c0013fc3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013fc7:	50                   	push   eax
c0013fc8:	e8 53 f6 ff ff       	call   c0013620 <VAS::getPageTableEntry(unsigned long)>
c0013fcd:	8b 10                	mov    edx,DWORD PTR [eax]
c0013fcf:	89 d3                	mov    ebx,edx
c0013fd1:	81 e2 fe 07 00 00    	and    edx,0x7fe
c0013fd7:	09 d7                	or     edi,edx
c0013fd9:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0013fdf:	89 38                	mov    DWORD PTR [eax],edi
c0013fe1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013fe4:	8b 15 68 f2 02 c0    	mov    edx,DWORD PTR ds:0xc002f268
c0013fea:	83 c2 01             	add    edx,0x1
c0013fed:	89 15 68 f2 02 c0    	mov    DWORD PTR ds:0xc002f268,edx
c0013ff3:	e8 23 c0 ff ff       	call   c001001b <Phys::freePage(unsigned long)>
c0013ff8:	0f 20 d8             	mov    eax,cr3
c0013ffb:	0f 22 d8             	mov    cr3,eax
c0013ffe:	8b 0d 68 f2 02 c0    	mov    ecx,DWORD PTR ds:0xc002f268
c0014004:	51                   	push   ecx
c0014005:	55                   	push   ebp
c0014006:	53                   	push   ebx
c0014007:	68 84 49 02 c0       	push   0xc0024984
c001400c:	e8 55 2f ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0014011:	a1 64 f2 02 c0       	mov    eax,ds:0xc002f264
c0014016:	83 c4 18             	add    esp,0x18
c0014019:	50                   	push   eax
c001401a:	68 66 4e 02 c0       	push   0xc0024e66
c001401f:	8d 50 01             	lea    edx,[eax+0x1]
c0014022:	89 15 64 f2 02 c0    	mov    DWORD PTR ds:0xc002f264,edx
c0014028:	e8 39 2f ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001402d:	a1 50 fa 02 c0       	mov    eax,ds:0xc002fa50
c0014032:	c7 44 24 40 78 4e 02 c0 	mov    DWORD PTR [esp+0x40],0xc0024e78
c001403a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001403e:	83 c4 2c             	add    esp,0x2c
c0014041:	5b                   	pop    ebx
c0014042:	5e                   	pop    esi
c0014043:	5f                   	pop    edi
c0014044:	5d                   	pop    ebp
c0014045:	e9 1c 2f ff ff       	jmp    c0006f66 <Dbg::kprintf(char const*, ...)>

c001404a <VAS::canLockPage(unsigned long)>:
c001404a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001404e:	50                   	push   eax
c001404f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014053:	52                   	push   edx
c0014054:	e8 c7 f5 ff ff       	call   c0013620 <VAS::getPageTableEntry(unsigned long)>
c0014059:	59                   	pop    ecx
c001405a:	5a                   	pop    edx
c001405b:	8b 00                	mov    eax,DWORD PTR [eax]
c001405d:	c1 e8 0b             	shr    eax,0xb
c0014060:	83 e0 01             	and    eax,0x1
c0014063:	c3                   	ret    

c0014064 <VAS::unlockPage(unsigned long)>:
c0014064:	83 ec 0c             	sub    esp,0xc
c0014067:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001406b:	50                   	push   eax
c001406c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014070:	52                   	push   edx
c0014071:	e8 aa f5 ff ff       	call   c0013620 <VAS::getPageTableEntry(unsigned long)>
c0014076:	59                   	pop    ecx
c0014077:	5a                   	pop    edx
c0014078:	8b 10                	mov    edx,DWORD PTR [eax]
c001407a:	f6 c6 08             	test   dh,0x8
c001407d:	75 09                	jne    c0014088 <VAS::unlockPage(unsigned long)+0x24>
c001407f:	80 ce 08             	or     dh,0x8
c0014082:	89 10                	mov    DWORD PTR [eax],edx
c0014084:	83 c4 0c             	add    esp,0xc
c0014087:	c3                   	ret    
c0014088:	c7 44 24 10 b8 49 02 c0 	mov    DWORD PTR [esp+0x10],0xc00249b8
c0014090:	83 c4 0c             	add    esp,0xc
c0014093:	e9 f2 bd ff ff       	jmp    c000fe8a <KePanic(char const*)>

c0014098 <VAS::canLockPages(unsigned long, int)>:
c0014098:	55                   	push   ebp
c0014099:	57                   	push   edi
c001409a:	56                   	push   esi
c001409b:	53                   	push   ebx
c001409c:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00140a0:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00140a4:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00140a8:	85 ff                	test   edi,edi
c00140aa:	7e 23                	jle    c00140cf <VAS::canLockPages(unsigned long, int)+0x37>
c00140ac:	31 f6                	xor    esi,esi
c00140ae:	eb 0d                	jmp    c00140bd <VAS::canLockPages(unsigned long, int)+0x25>
c00140b0:	83 c6 01             	add    esi,0x1
c00140b3:	81 c3 00 10 00 00    	add    ebx,0x1000
c00140b9:	39 f7                	cmp    edi,esi
c00140bb:	74 0d                	je     c00140ca <VAS::canLockPages(unsigned long, int)+0x32>
c00140bd:	53                   	push   ebx
c00140be:	55                   	push   ebp
c00140bf:	e8 86 ff ff ff       	call   c001404a <VAS::canLockPage(unsigned long)>
c00140c4:	5a                   	pop    edx
c00140c5:	59                   	pop    ecx
c00140c6:	84 c0                	test   al,al
c00140c8:	75 e6                	jne    c00140b0 <VAS::canLockPages(unsigned long, int)+0x18>
c00140ca:	5b                   	pop    ebx
c00140cb:	5e                   	pop    esi
c00140cc:	5f                   	pop    edi
c00140cd:	5d                   	pop    ebp
c00140ce:	c3                   	ret    
c00140cf:	b0 01                	mov    al,0x1
c00140d1:	eb f7                	jmp    c00140ca <VAS::canLockPages(unsigned long, int)+0x32>
c00140d3:	90                   	nop

c00140d4 <VAS::unlockPages(unsigned long, int)>:
c00140d4:	55                   	push   ebp
c00140d5:	57                   	push   edi
c00140d6:	56                   	push   esi
c00140d7:	53                   	push   ebx
c00140d8:	83 ec 0c             	sub    esp,0xc
c00140db:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00140df:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00140e3:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c00140e7:	85 ff                	test   edi,edi
c00140e9:	7e 1c                	jle    c0014107 <VAS::unlockPages(unsigned long, int)+0x33>
c00140eb:	31 f6                	xor    esi,esi
c00140ed:	83 ec 08             	sub    esp,0x8
c00140f0:	83 c6 01             	add    esi,0x1
c00140f3:	53                   	push   ebx
c00140f4:	81 c3 00 10 00 00    	add    ebx,0x1000
c00140fa:	55                   	push   ebp
c00140fb:	e8 64 ff ff ff       	call   c0014064 <VAS::unlockPage(unsigned long)>
c0014100:	83 c4 10             	add    esp,0x10
c0014103:	39 f7                	cmp    edi,esi
c0014105:	75 e6                	jne    c00140ed <VAS::unlockPages(unsigned long, int)+0x19>
c0014107:	83 c4 0c             	add    esp,0xc
c001410a:	5b                   	pop    ebx
c001410b:	5e                   	pop    esi
c001410c:	5f                   	pop    edi
c001410d:	5d                   	pop    ebp
c001410e:	c3                   	ret    
c001410f:	90                   	nop

c0014110 <VAS::tryLoadBackOffDisk(unsigned long)>:
c0014110:	55                   	push   ebp
c0014111:	57                   	push   edi
c0014112:	56                   	push   esi
c0014113:	53                   	push   ebx
c0014114:	81 ec 0c 10 00 00    	sub    esp,0x100c
c001411a:	8b b4 24 24 10 00 00 	mov    esi,DWORD PTR [esp+0x1024]
c0014121:	89 f3                	mov    ebx,esi
c0014123:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0014129:	53                   	push   ebx
c001412a:	8b 84 24 24 10 00 00 	mov    eax,DWORD PTR [esp+0x1024]
c0014131:	50                   	push   eax
c0014132:	e8 e9 f4 ff ff       	call   c0013620 <VAS::getPageTableEntry(unsigned long)>
c0014137:	81 fe ff ff bf ff    	cmp    esi,0xffbfffff
c001413d:	5a                   	pop    edx
c001413e:	59                   	pop    ecx
c001413f:	89 c5                	mov    ebp,eax
c0014141:	0f 87 cb 00 00 00    	ja     c0014212 <VAS::tryLoadBackOffDisk(unsigned long)+0x102>
c0014147:	83 ec 08             	sub    esp,0x8
c001414a:	56                   	push   esi
c001414b:	68 e8 49 02 c0       	push   0xc00249e8
c0014150:	e8 11 2e ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0014155:	a1 2c fa 02 c0       	mov    eax,ds:0xc002fa2c
c001415a:	5e                   	pop    esi
c001415b:	5f                   	pop    edi
c001415c:	50                   	push   eax
c001415d:	68 18 4a 02 c0       	push   0xc0024a18
c0014162:	e8 ff 2d ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0014167:	8b 0d 50 fa 02 c0    	mov    ecx,DWORD PTR ds:0xc002fa50
c001416d:	58                   	pop    eax
c001416e:	5a                   	pop    edx
c001416f:	51                   	push   ecx
c0014170:	68 3c 4a 02 c0       	push   0xc0024a3c
c0014175:	e8 ec 2d ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001417a:	83 c4 10             	add    esp,0x10
c001417d:	85 db                	test   ebx,ebx
c001417f:	74 5b                	je     c00141dc <VAS::tryLoadBackOffDisk(unsigned long)+0xcc>
c0014181:	85 ed                	test   ebp,ebp
c0014183:	74 21                	je     c00141a6 <VAS::tryLoadBackOffDisk(unsigned long)+0x96>
c0014185:	8b 75 00             	mov    esi,DWORD PTR [ebp+0x0]
c0014188:	f7 c6 00 02 00 00    	test   esi,0x200
c001418e:	0f 85 c5 00 00 00    	jne    c0014259 <VAS::tryLoadBackOffDisk(unsigned long)+0x149>
c0014194:	89 f0                	mov    eax,esi
c0014196:	25 01 04 00 00       	and    eax,0x401
c001419b:	3d 00 04 00 00       	cmp    eax,0x400
c00141a0:	0f 84 39 01 00 00    	je     c00142df <VAS::tryLoadBackOffDisk(unsigned long)+0x1cf>
c00141a6:	a1 2c fa 02 c0       	mov    eax,ds:0xc002fa2c
c00141ab:	83 ec 08             	sub    esp,0x8
c00141ae:	50                   	push   eax
c00141af:	68 30 4c 02 c0       	push   0xc0024c30
c00141b4:	e8 ad 2d ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00141b9:	8b 1d 50 fa 02 c0    	mov    ebx,DWORD PTR ds:0xc002fa50
c00141bf:	5a                   	pop    edx
c00141c0:	59                   	pop    ecx
c00141c1:	53                   	push   ebx
c00141c2:	68 54 4c 02 c0       	push   0xc0024c54
c00141c7:	e8 9a 2d ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00141cc:	83 c4 10             	add    esp,0x10
c00141cf:	31 c0                	xor    eax,eax
c00141d1:	81 c4 0c 10 00 00    	add    esp,0x100c
c00141d7:	5b                   	pop    ebx
c00141d8:	5e                   	pop    esi
c00141d9:	5f                   	pop    edi
c00141da:	5d                   	pop    ebp
c00141db:	c3                   	ret    
c00141dc:	a1 2c fa 02 c0       	mov    eax,ds:0xc002fa2c
c00141e1:	83 ec 08             	sub    esp,0x8
c00141e4:	50                   	push   eax
c00141e5:	68 60 4a 02 c0       	push   0xc0024a60
c00141ea:	e8 77 2d ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00141ef:	8b 0d 50 fa 02 c0    	mov    ecx,DWORD PTR ds:0xc002fa50
c00141f5:	58                   	pop    eax
c00141f6:	5a                   	pop    edx
c00141f7:	51                   	push   ecx
c00141f8:	68 84 4a 02 c0       	push   0xc0024a84
c00141fd:	e8 64 2d ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0014202:	83 c4 10             	add    esp,0x10
c0014205:	31 c0                	xor    eax,eax
c0014207:	81 c4 0c 10 00 00    	add    esp,0x100c
c001420d:	5b                   	pop    ebx
c001420e:	5e                   	pop    esi
c001420f:	5f                   	pop    edi
c0014210:	5d                   	pop    ebp
c0014211:	c3                   	ret    
c0014212:	83 ec 0c             	sub    esp,0xc
c0014215:	68 8d 4e 02 c0       	push   0xc0024e8d
c001421a:	e8 6b bc ff ff       	call   c000fe8a <KePanic(char const*)>
c001421f:	5f                   	pop    edi
c0014220:	58                   	pop    eax
c0014221:	56                   	push   esi
c0014222:	68 e8 49 02 c0       	push   0xc00249e8
c0014227:	e8 3a 2d ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001422c:	8b 0d 2c fa 02 c0    	mov    ecx,DWORD PTR ds:0xc002fa2c
c0014232:	58                   	pop    eax
c0014233:	5a                   	pop    edx
c0014234:	51                   	push   ecx
c0014235:	68 18 4a 02 c0       	push   0xc0024a18
c001423a:	e8 27 2d ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001423f:	a1 50 fa 02 c0       	mov    eax,ds:0xc002fa50
c0014244:	5e                   	pop    esi
c0014245:	5f                   	pop    edi
c0014246:	50                   	push   eax
c0014247:	68 3c 4a 02 c0       	push   0xc0024a3c
c001424c:	e8 15 2d ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0014251:	83 c4 10             	add    esp,0x10
c0014254:	e9 28 ff ff ff       	jmp    c0014181 <VAS::tryLoadBackOffDisk(unsigned long)+0x71>
c0014259:	83 ec 0c             	sub    esp,0xc
c001425c:	68 a8 4a 02 c0       	push   0xc0024aa8
c0014261:	e8 00 2d ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0014266:	e8 19 be ff ff       	call   c0010084 <Phys::allocatePage()>
c001426b:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001426e:	83 ca 01             	or     edx,0x1
c0014271:	89 55 00             	mov    DWORD PTR [ebp+0x0],edx
c0014274:	0f 20 da             	mov    edx,cr3
c0014277:	0f 22 da             	mov    cr3,edx
c001427a:	ba 00 10 00 00       	mov    edx,0x1000
c001427f:	89 de                	mov    esi,ebx
c0014281:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0014285:	89 d1                	mov    ecx,edx
c0014287:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014289:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001428c:	81 e1 ff 0d 00 00    	and    ecx,0xdff
c0014292:	09 c8                	or     eax,ecx
c0014294:	83 c8 02             	or     eax,0x2
c0014297:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c001429a:	0f 20 d8             	mov    eax,cr3
c001429d:	0f 22 d8             	mov    cr3,eax
c00142a0:	8d 74 24 10          	lea    esi,[esp+0x10]
c00142a4:	89 df                	mov    edi,ebx
c00142a6:	89 d1                	mov    ecx,edx
c00142a8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00142aa:	59                   	pop    ecx
c00142ab:	8b 35 2c fa 02 c0    	mov    esi,DWORD PTR ds:0xc002fa2c
c00142b1:	5b                   	pop    ebx
c00142b2:	56                   	push   esi
c00142b3:	68 c8 4a 02 c0       	push   0xc0024ac8
c00142b8:	e8 a9 2c ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00142bd:	a1 50 fa 02 c0       	mov    eax,ds:0xc002fa50
c00142c2:	5f                   	pop    edi
c00142c3:	5d                   	pop    ebp
c00142c4:	50                   	push   eax
c00142c5:	68 ec 4a 02 c0       	push   0xc0024aec
c00142ca:	e8 97 2c ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00142cf:	83 c4 10             	add    esp,0x10
c00142d2:	b0 01                	mov    al,0x1
c00142d4:	81 c4 0c 10 00 00    	add    esp,0x100c
c00142da:	5b                   	pop    ebx
c00142db:	5e                   	pop    esi
c00142dc:	5f                   	pop    edi
c00142dd:	5d                   	pop    ebp
c00142de:	c3                   	ret    
c00142df:	a1 50 fa 02 c0       	mov    eax,ds:0xc002fa50
c00142e4:	c1 ee 0c             	shr    esi,0xc
c00142e7:	83 ec 08             	sub    esp,0x8
c00142ea:	50                   	push   eax
c00142eb:	68 10 4b 02 c0       	push   0xc0024b10
c00142f0:	e8 71 2c ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00142f5:	e8 8a bd ff ff       	call   c0010084 <Phys::allocatePage()>
c00142fa:	8b 0d 50 fa 02 c0    	mov    ecx,DWORD PTR ds:0xc002fa50
c0014300:	89 c7                	mov    edi,eax
c0014302:	58                   	pop    eax
c0014303:	5a                   	pop    edx
c0014304:	51                   	push   ecx
c0014305:	68 34 4b 02 c0       	push   0xc0024b34
c001430a:	e8 57 2c ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001430f:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0014312:	83 c4 10             	add    esp,0x10
c0014315:	81 e2 ff 0f 00 00    	and    edx,0xfff
c001431b:	09 fa                	or     edx,edi
c001431d:	31 ff                	xor    edi,edi
c001431f:	81 ca 01 08 00 00    	or     edx,0x801
c0014325:	89 55 00             	mov    DWORD PTR [ebp+0x0],edx
c0014328:	89 dd                	mov    ebp,ebx
c001432a:	a1 8c 6f 02 c0       	mov    eax,ds:0xc0026f8c
c001432f:	85 c0                	test   eax,eax
c0014331:	7e 61                	jle    c0014394 <VAS::tryLoadBackOffDisk(unsigned long)+0x284>
c0014333:	a1 50 fa 02 c0       	mov    eax,ds:0xc002fa50
c0014338:	83 ec 08             	sub    esp,0x8
c001433b:	50                   	push   eax
c001433c:	68 e8 4b 02 c0       	push   0xc0024be8
c0014341:	e8 20 2c ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0014346:	89 34 24             	mov    DWORD PTR [esp],esi
c0014349:	e8 32 f1 ff ff       	call   c0013480 <Virt::swapIDToSector(unsigned long)>
c001434e:	31 d2                	xor    edx,edx
c0014350:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014353:	81 c5 00 02 00 00    	add    ebp,0x200
c0014359:	6a 01                	push   0x1
c001435b:	52                   	push   edx
c001435c:	01 f8                	add    eax,edi
c001435e:	83 c7 01             	add    edi,0x1
c0014361:	50                   	push   eax
c0014362:	0f be 05 98 6f 02 c0 	movsx  eax,BYTE PTR ds:0xc0026f98
c0014369:	8b 04 85 dc c9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3624]
c0014370:	50                   	push   eax
c0014371:	e8 d6 66 ff ff       	call   c000aa4c <LogicalDisk::read(unsigned long long, int, void*)>
c0014376:	a1 50 fa 02 c0       	mov    eax,ds:0xc002fa50
c001437b:	83 c4 18             	add    esp,0x18
c001437e:	50                   	push   eax
c001437f:	68 0c 4c 02 c0       	push   0xc0024c0c
c0014384:	e8 dd 2b ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0014389:	83 c4 10             	add    esp,0x10
c001438c:	39 3d 8c 6f 02 c0    	cmp    DWORD PTR ds:0xc0026f8c,edi
c0014392:	7f 9f                	jg     c0014333 <VAS::tryLoadBackOffDisk(unsigned long)+0x223>
c0014394:	a1 50 fa 02 c0       	mov    eax,ds:0xc002fa50
c0014399:	83 ec 08             	sub    esp,0x8
c001439c:	50                   	push   eax
c001439d:	68 58 4b 02 c0       	push   0xc0024b58
c00143a2:	e8 bf 2b ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00143a7:	a1 68 f2 02 c0       	mov    eax,ds:0xc002f268
c00143ac:	83 c4 0c             	add    esp,0xc
c00143af:	83 e8 01             	sub    eax,0x1
c00143b2:	50                   	push   eax
c00143b3:	53                   	push   ebx
c00143b4:	68 9f 4e 02 c0       	push   0xc0024e9f
c00143b9:	a3 68 f2 02 c0       	mov    ds:0xc002f268,eax
c00143be:	e8 a3 2b ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00143c3:	89 34 24             	mov    DWORD PTR [esp],esi
c00143c6:	e8 92 f0 ff ff       	call   c001345d <Virt::freeSwapfilePage(unsigned long)>
c00143cb:	8b 0d 50 fa 02 c0    	mov    ecx,DWORD PTR ds:0xc002fa50
c00143d1:	58                   	pop    eax
c00143d2:	5a                   	pop    edx
c00143d3:	51                   	push   ecx
c00143d4:	68 7c 4b 02 c0       	push   0xc0024b7c
c00143d9:	e8 88 2b ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00143de:	0f 20 d8             	mov    eax,cr3
c00143e1:	0f 22 d8             	mov    cr3,eax
c00143e4:	c7 04 24 b4 4e 02 c0 	mov    DWORD PTR [esp],0xc0024eb4
c00143eb:	e8 76 2b ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00143f0:	8b 3d 2c fa 02 c0    	mov    edi,DWORD PTR ds:0xc002fa2c
c00143f6:	5b                   	pop    ebx
c00143f7:	5e                   	pop    esi
c00143f8:	57                   	push   edi
c00143f9:	68 a0 4b 02 c0       	push   0xc0024ba0
c00143fe:	e8 63 2b ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0014403:	5d                   	pop    ebp
c0014404:	58                   	pop    eax
c0014405:	a1 50 fa 02 c0       	mov    eax,ds:0xc002fa50
c001440a:	50                   	push   eax
c001440b:	68 c4 4b 02 c0       	push   0xc0024bc4
c0014410:	e8 51 2b ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0014415:	83 c4 10             	add    esp,0x10
c0014418:	b0 01                	mov    al,0x1
c001441a:	e9 b2 fd ff ff       	jmp    c00141d1 <VAS::tryLoadBackOffDisk(unsigned long)+0xc1>
c001441f:	90                   	nop

c0014420 <VAS::lockPage(unsigned long)>:
c0014420:	56                   	push   esi
c0014421:	53                   	push   ebx
c0014422:	83 ec 04             	sub    esp,0x4
c0014425:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014429:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001442d:	50                   	push   eax
c001442e:	56                   	push   esi
c001442f:	e8 ec f1 ff ff       	call   c0013620 <VAS::getPageTableEntry(unsigned long)>
c0014434:	5a                   	pop    edx
c0014435:	59                   	pop    ecx
c0014436:	89 c3                	mov    ebx,eax
c0014438:	8b 00                	mov    eax,DWORD PTR [eax]
c001443a:	a8 01                	test   al,0x1
c001443c:	74 10                	je     c001444e <VAS::lockPage(unsigned long)+0x2e>
c001443e:	f6 c4 08             	test   ah,0x8
c0014441:	74 28                	je     c001446b <VAS::lockPage(unsigned long)+0x4b>
c0014443:	80 e4 f7             	and    ah,0xf7
c0014446:	89 03                	mov    DWORD PTR [ebx],eax
c0014448:	83 c4 04             	add    esp,0x4
c001444b:	5b                   	pop    ebx
c001444c:	5e                   	pop    esi
c001444d:	c3                   	ret    
c001444e:	83 ec 08             	sub    esp,0x8
c0014451:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014456:	50                   	push   eax
c0014457:	56                   	push   esi
c0014458:	e8 b3 fc ff ff       	call   c0014110 <VAS::tryLoadBackOffDisk(unsigned long)>
c001445d:	83 c4 10             	add    esp,0x10
c0014460:	84 c0                	test   al,al
c0014462:	74 19                	je     c001447d <VAS::lockPage(unsigned long)+0x5d>
c0014464:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014466:	f6 c4 08             	test   ah,0x8
c0014469:	75 d8                	jne    c0014443 <VAS::lockPage(unsigned long)+0x23>
c001446b:	c7 44 24 10 b8 49 02 c0 	mov    DWORD PTR [esp+0x10],0xc00249b8
c0014473:	83 c4 04             	add    esp,0x4
c0014476:	5b                   	pop    ebx
c0014477:	5e                   	pop    esi
c0014478:	e9 0d ba ff ff       	jmp    c000fe8a <KePanic(char const*)>
c001447d:	83 ec 0c             	sub    esp,0xc
c0014480:	68 78 4c 02 c0       	push   0xc0024c78
c0014485:	e8 00 ba ff ff       	call   c000fe8a <KePanic(char const*)>
c001448a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001448c:	83 c4 10             	add    esp,0x10
c001448f:	eb ad                	jmp    c001443e <VAS::lockPage(unsigned long)+0x1e>
c0014491:	90                   	nop

c0014492 <VAS::lockPages(unsigned long, int)>:
c0014492:	55                   	push   ebp
c0014493:	57                   	push   edi
c0014494:	56                   	push   esi
c0014495:	53                   	push   ebx
c0014496:	83 ec 0c             	sub    esp,0xc
c0014499:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001449d:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00144a1:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c00144a5:	85 ff                	test   edi,edi
c00144a7:	7e 1c                	jle    c00144c5 <VAS::lockPages(unsigned long, int)+0x33>
c00144a9:	31 f6                	xor    esi,esi
c00144ab:	83 ec 08             	sub    esp,0x8
c00144ae:	83 c6 01             	add    esi,0x1
c00144b1:	53                   	push   ebx
c00144b2:	81 c3 00 10 00 00    	add    ebx,0x1000
c00144b8:	55                   	push   ebp
c00144b9:	e8 62 ff ff ff       	call   c0014420 <VAS::lockPage(unsigned long)>
c00144be:	83 c4 10             	add    esp,0x10
c00144c1:	39 f7                	cmp    edi,esi
c00144c3:	75 e6                	jne    c00144ab <VAS::lockPages(unsigned long, int)+0x19>
c00144c5:	83 c4 0c             	add    esp,0xc
c00144c8:	5b                   	pop    ebx
c00144c9:	5e                   	pop    esi
c00144ca:	5f                   	pop    edi
c00144cb:	5d                   	pop    ebp
c00144cc:	c3                   	ret    
c00144cd:	90                   	nop

c00144ce <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)>:
c00144ce:	55                   	push   ebp
c00144cf:	57                   	push   edi
c00144d0:	56                   	push   esi
c00144d1:	53                   	push   ebx
c00144d2:	83 ec 28             	sub    esp,0x28
c00144d5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00144d9:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00144dd:	50                   	push   eax
c00144de:	e8 5e ee ff ff       	call   c0013341 <Virt::allocateKernelVirtualPages(int)>
c00144e3:	83 c4 0c             	add    esp,0xc
c00144e6:	6a 07                	push   0x7
c00144e8:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00144ec:	52                   	push   edx
c00144ed:	89 c5                	mov    ebp,eax
c00144ef:	53                   	push   ebx
c00144f0:	e8 2d f6 ff ff       	call   c0013b22 <VAS::allocatePages(int, int)>
c00144f5:	83 c4 10             	add    esp,0x10
c00144f8:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c00144fc:	89 c7                	mov    edi,eax
c00144fe:	85 c9                	test   ecx,ecx
c0014500:	74 2f                	je     c0014531 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x63>
c0014502:	31 f6                	xor    esi,esi
c0014504:	e8 7b bb ff ff       	call   c0010084 <Phys::allocatePage()>
c0014509:	83 c6 01             	add    esi,0x1
c001450c:	6a 03                	push   0x3
c001450e:	55                   	push   ebp
c001450f:	50                   	push   eax
c0014510:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014514:	53                   	push   ebx
c0014515:	e8 00 f5 ff ff       	call   c0013a1a <VAS::mapPage(unsigned long, unsigned long, int)>
c001451a:	6a 07                	push   0x7
c001451c:	57                   	push   edi
c001451d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014521:	50                   	push   eax
c0014522:	53                   	push   ebx
c0014523:	e8 f2 f4 ff ff       	call   c0013a1a <VAS::mapPage(unsigned long, unsigned long, int)>
c0014528:	83 c4 20             	add    esp,0x20
c001452b:	39 74 24 34          	cmp    DWORD PTR [esp+0x34],esi
c001452f:	75 d3                	jne    c0014504 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x36>
c0014531:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0014535:	89 28                	mov    DWORD PTR [eax],ebp
c0014537:	83 c4 1c             	add    esp,0x1c
c001453a:	89 f8                	mov    eax,edi
c001453c:	5b                   	pop    ebx
c001453d:	5e                   	pop    esi
c001453e:	5f                   	pop    edi
c001453f:	5d                   	pop    ebp
c0014540:	c3                   	ret    
c0014541:	90                   	nop

c0014542 <VAS::freeSharedMemoryWithKernel(unsigned long, unsigned long)>:
c0014542:	53                   	push   ebx
c0014543:	83 ec 14             	sub    esp,0x14
c0014546:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001454a:	68 a8 4c 02 c0       	push   0xc0024ca8
c001454f:	e8 12 2a ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0014554:	c7 04 24 08 4d 02 c0 	mov    DWORD PTR [esp],0xc0024d08
c001455b:	e8 06 2a ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0014560:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0014564:	83 c4 18             	add    esp,0x18
c0014567:	5b                   	pop    ebx
c0014568:	e9 d2 f0 ff ff       	jmp    c001363f <Virt::freeKernelVirtualPages(unsigned long)>
c001456d:	90                   	nop

c001456e <VAS::scanForEviction()>:
c001456e:	57                   	push   edi
c001456f:	56                   	push   esi
c0014570:	31 f6                	xor    esi,esi
c0014572:	53                   	push   ebx
c0014573:	83 ec 18             	sub    esp,0x18
c0014576:	a1 50 fa 02 c0       	mov    eax,ds:0xc002fa50
c001457b:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001457f:	50                   	push   eax
c0014580:	68 84 4d 02 c0       	push   0xc0024d84
c0014585:	e8 dc 29 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001458a:	c7 04 24 bb 4e 02 c0 	mov    DWORD PTR [esp],0xc0024ebb
c0014591:	e8 d0 29 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0014596:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0014599:	83 c4 10             	add    esp,0x10
c001459c:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c00145a2:	75 0e                	jne    c00145b2 <VAS::scanForEviction()+0x44>
c00145a4:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00145a7:	89 da                	mov    edx,ebx
c00145a9:	c1 ea 16             	shr    edx,0x16
c00145ac:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c00145b0:	74 5b                	je     c001460d <VAS::scanForEviction()+0x9f>
c00145b2:	83 ec 08             	sub    esp,0x8
c00145b5:	53                   	push   ebx
c00145b6:	57                   	push   edi
c00145b7:	e8 64 f0 ff ff       	call   c0013620 <VAS::getPageTableEntry(unsigned long)>
c00145bc:	83 c4 10             	add    esp,0x10
c00145bf:	8b 10                	mov    edx,DWORD PTR [eax]
c00145c1:	89 d1                	mov    ecx,edx
c00145c3:	c1 e9 0c             	shr    ecx,0xc
c00145c6:	74 10                	je     c00145d8 <VAS::scanForEviction()+0x6a>
c00145c8:	89 d1                	mov    ecx,edx
c00145ca:	81 e1 01 08 00 00    	and    ecx,0x801
c00145d0:	81 f9 01 08 00 00    	cmp    ecx,0x801
c00145d6:	74 40                	je     c0014618 <VAS::scanForEviction()+0xaa>
c00145d8:	81 c3 00 10 00 00    	add    ebx,0x1000
c00145de:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c00145e4:	76 2d                	jbe    c0014613 <VAS::scanForEviction()+0xa5>
c00145e6:	c7 47 08 00 00 00 00 	mov    DWORD PTR [edi+0x8],0x0
c00145ed:	83 c6 01             	add    esi,0x1
c00145f0:	83 fe 03             	cmp    esi,0x3
c00145f3:	74 32                	je     c0014627 <VAS::scanForEviction()+0xb9>
c00145f5:	31 db                	xor    ebx,ebx
c00145f7:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c00145fd:	75 b3                	jne    c00145b2 <VAS::scanForEviction()+0x44>
c00145ff:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0014602:	89 da                	mov    edx,ebx
c0014604:	c1 ea 16             	shr    edx,0x16
c0014607:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c001460b:	75 a5                	jne    c00145b2 <VAS::scanForEviction()+0x44>
c001460d:	81 c3 00 00 40 00    	add    ebx,0x400000
c0014613:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0014616:	eb 84                	jmp    c001459c <VAS::scanForEviction()+0x2e>
c0014618:	f6 c2 20             	test   dl,0x20
c001461b:	74 13                	je     c0014630 <VAS::scanForEviction()+0xc2>
c001461d:	83 e2 df             	and    edx,0xffffffdf
c0014620:	89 10                	mov    DWORD PTR [eax],edx
c0014622:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0014625:	eb b1                	jmp    c00145d8 <VAS::scanForEviction()+0x6a>
c0014627:	83 c4 10             	add    esp,0x10
c001462a:	31 c0                	xor    eax,eax
c001462c:	5b                   	pop    ebx
c001462d:	5e                   	pop    esi
c001462e:	5f                   	pop    edi
c001462f:	c3                   	ret    
c0014630:	89 d0                	mov    eax,edx
c0014632:	83 ec 08             	sub    esp,0x8
c0014635:	25 00 f0 ff ff       	and    eax,0xfffff000
c001463a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001463e:	53                   	push   ebx
c001463f:	68 d7 4e 02 c0       	push   0xc0024ed7
c0014644:	e8 1d 29 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0014649:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c001464c:	58                   	pop    eax
c001464d:	5a                   	pop    edx
c001464e:	51                   	push   ecx
c001464f:	57                   	push   edi
c0014650:	e8 f1 f8 ff ff       	call   c0013f46 <VAS::evict(unsigned long)>
c0014655:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0014658:	5b                   	pop    ebx
c0014659:	5e                   	pop    esi
c001465a:	50                   	push   eax
c001465b:	68 eb 4e 02 c0       	push   0xc0024eeb
c0014660:	e8 01 29 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0014665:	58                   	pop    eax
c0014666:	5a                   	pop    edx
c0014667:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001466b:	50                   	push   eax
c001466c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014670:	68 fe 4e 02 c0       	push   0xc0024efe
c0014675:	e8 ec 28 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001467a:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c001467d:	81 c1 00 10 00 00    	add    ecx,0x1000
c0014683:	89 4f 08             	mov    DWORD PTR [edi+0x8],ecx
c0014686:	8b 3d 50 fa 02 c0    	mov    edi,DWORD PTR ds:0xc002fa50
c001468c:	5b                   	pop    ebx
c001468d:	5e                   	pop    esi
c001468e:	57                   	push   edi
c001468f:	68 a4 4d 02 c0       	push   0xc0024da4
c0014694:	e8 cd 28 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0014699:	83 c4 10             	add    esp,0x10
c001469c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00146a0:	83 c4 10             	add    esp,0x10
c00146a3:	5b                   	pop    ebx
c00146a4:	5e                   	pop    esi
c00146a5:	5f                   	pop    edi
c00146a6:	c3                   	ret    

c00146a7 <mapVASFirstTime>:
c00146a7:	55                   	push   ebp
c00146a8:	57                   	push   edi
c00146a9:	56                   	push   esi
c00146aa:	53                   	push   ebx
c00146ab:	83 ec 0c             	sub    esp,0xc
c00146ae:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00146b3:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00146b6:	83 fa 01             	cmp    edx,0x1
c00146b9:	0f 84 cb 00 00 00    	je     c001478a <mapVASFirstTime+0xe3>
c00146bf:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c00146c2:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c00146c7:	bf 00 90 e7 01       	mov    edi,0x1e79000
c00146cc:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c00146cf:	8b b2 b2 05 00 00    	mov    esi,DWORD PTR [edx+0x5b2]
c00146d5:	c1 e5 15             	shl    ebp,0x15
c00146d8:	29 eb                	sub    ebx,ebp
c00146da:	29 ef                	sub    edi,ebp
c00146dc:	e8 a3 b9 ff ff       	call   c0010084 <Phys::allocatePage()>
c00146e1:	83 ec 0c             	sub    esp,0xc
c00146e4:	68 03 04 00 00       	push   0x403
c00146e9:	6a 01                	push   0x1
c00146eb:	53                   	push   ebx
c00146ec:	81 eb 00 10 00 00    	sub    ebx,0x1000
c00146f2:	50                   	push   eax
c00146f3:	56                   	push   esi
c00146f4:	e8 1b f5 ff ff       	call   c0013c14 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00146f9:	83 c4 20             	add    esp,0x20
c00146fc:	39 fb                	cmp    ebx,edi
c00146fe:	75 dc                	jne    c00146dc <mapVASFirstTime+0x35>
c0014700:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c0014705:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c001470a:	29 eb                	sub    ebx,ebp
c001470c:	29 ef                	sub    edi,ebp
c001470e:	e8 71 b9 ff ff       	call   c0010084 <Phys::allocatePage()>
c0014713:	0f b6 56 01          	movzx  edx,BYTE PTR [esi+0x1]
c0014717:	83 fa 01             	cmp    edx,0x1
c001471a:	19 d2                	sbb    edx,edx
c001471c:	83 ec 0c             	sub    esp,0xc
c001471f:	83 e2 04             	and    edx,0x4
c0014722:	81 c2 03 04 00 00    	add    edx,0x403
c0014728:	52                   	push   edx
c0014729:	6a 01                	push   0x1
c001472b:	53                   	push   ebx
c001472c:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0014732:	50                   	push   eax
c0014733:	56                   	push   esi
c0014734:	e8 db f4 ff ff       	call   c0013c14 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0014739:	83 c4 20             	add    esp,0x20
c001473c:	39 df                	cmp    edi,ebx
c001473e:	75 ce                	jne    c001470e <mapVASFirstTime+0x67>
c0014740:	83 ec 0c             	sub    esp,0xc
c0014743:	bb 7c 90 02 c0       	mov    ebx,0xc002907c
c0014748:	6a 04                	push   0x4
c001474a:	81 eb 00 80 02 c0    	sub    ebx,0xc0028000
c0014750:	6a ff                	push   0xffffffff
c0014752:	c1 eb 0c             	shr    ebx,0xc
c0014755:	53                   	push   ebx
c0014756:	68 00 80 02 c0       	push   0xc0028000
c001475b:	56                   	push   esi
c001475c:	e8 59 f0 ff ff       	call   c00137ba <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0014761:	83 c4 14             	add    esp,0x14
c0014764:	a1 70 f2 02 c0       	mov    eax,ds:0xc002f270
c0014769:	6a 04                	push   0x4
c001476b:	6a ff                	push   0xffffffff
c001476d:	53                   	push   ebx
c001476e:	68 00 80 02 c0       	push   0xc0028000
c0014773:	50                   	push   eax
c0014774:	e8 41 f0 ff ff       	call   c00137ba <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0014779:	0f 20 d8             	mov    eax,cr3
c001477c:	0f 22 d8             	mov    cr3,eax
c001477f:	83 c4 20             	add    esp,0x20
c0014782:	83 c4 0c             	add    esp,0xc
c0014785:	5b                   	pop    ebx
c0014786:	5e                   	pop    esi
c0014787:	5f                   	pop    edi
c0014788:	5d                   	pop    ebp
c0014789:	c3                   	ret    
c001478a:	83 ec 0c             	sub    esp,0xc
c001478d:	68 0b 4f 02 c0       	push   0xc0024f0b
c0014792:	e8 cf 27 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0014797:	83 c4 10             	add    esp,0x10
c001479a:	83 c4 0c             	add    esp,0xc
c001479d:	5b                   	pop    ebx
c001479e:	5e                   	pop    esi
c001479f:	5f                   	pop    edi
c00147a0:	5d                   	pop    ebp
c00147a1:	c3                   	ret    

c00147a2 <SysAlarm(regs*)>:
c00147a2:	53                   	push   ebx
c00147a3:	83 ec 10             	sub    esp,0x10
c00147a6:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00147aa:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00147ad:	68 24 4f 02 c0       	push   0xc0024f24
c00147b2:	e8 af 27 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00147b7:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00147ba:	83 c4 0c             	add    esp,0xc
c00147bd:	31 d2                	xor    edx,edx
c00147bf:	52                   	push   edx
c00147c0:	50                   	push   eax
c00147c1:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c00147c7:	e8 e4 09 00 00       	call   c00151b0 <KeAlarm(ThreadControlBlock*, unsigned long long)>
c00147cc:	83 c4 18             	add    esp,0x18
c00147cf:	5b                   	pop    ebx
c00147d0:	c3                   	ret    

c00147d1 <SysEject(regs*)>:
c00147d1:	83 ec 0c             	sub    esp,0xc
c00147d4:	83 ca ff             	or     edx,0xffffffff
c00147d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147db:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c00147de:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00147e3:	83 e9 41             	sub    ecx,0x41
c00147e6:	83 f9 19             	cmp    ecx,0x19
c00147e9:	77 18                	ja     c0014803 <SysEject(regs*)+0x32>
c00147eb:	8b 0c 8d e0 ca 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3520]
c00147f2:	85 c9                	test   ecx,ecx
c00147f4:	74 0d                	je     c0014803 <SysEject(regs*)+0x32>
c00147f6:	83 ec 0c             	sub    esp,0xc
c00147f9:	51                   	push   ecx
c00147fa:	e8 e3 61 ff ff       	call   c000a9e2 <LogicalDisk::eject()>
c00147ff:	83 c4 10             	add    esp,0x10
c0014802:	99                   	cdq    
c0014803:	83 c4 0c             	add    esp,0xc
c0014806:	c3                   	ret    

c0014807 <SysExit(regs*)>:
c0014807:	83 ec 18             	sub    esp,0x18
c001480a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001480e:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014811:	e8 aa 30 00 00       	call   c00178c0 <terminateTask(int)>
c0014816:	83 c8 ff             	or     eax,0xffffffff
c0014819:	83 c4 1c             	add    esp,0x1c
c001481c:	89 c2                	mov    edx,eax
c001481e:	c3                   	ret    

c001481f <SysGetCwd(regs*)>:
c001481f:	83 ec 10             	sub    esp,0x10
c0014822:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014826:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0014829:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001482c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014831:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0014834:	e8 cf 35 ff ff       	call   c0007e08 <Fs::getcwd(Process*, char*, int)>
c0014839:	83 c4 1c             	add    esp,0x1c
c001483c:	99                   	cdq    
c001483d:	c3                   	ret    

c001483e <SysGetPID(regs*)>:
c001483e:	83 ec 14             	sub    esp,0x14
c0014841:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014846:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014849:	ff 30                	push   DWORD PTR [eax]
c001484b:	68 39 4f 02 c0       	push   0xc0024f39
c0014850:	e8 11 27 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0014855:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001485a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001485d:	8b 00                	mov    eax,DWORD PTR [eax]
c001485f:	83 c4 1c             	add    esp,0x1c
c0014862:	99                   	cdq    
c0014863:	c3                   	ret    

c0014864 <SysGetRAMData(regs*)>:
c0014864:	a1 68 f2 02 c0       	mov    eax,ds:0xc002f268
c0014869:	03 05 58 f1 02 c0    	add    eax,DWORD PTR ds:0xc002f158
c001486f:	8b 0d 5c f1 02 c0    	mov    ecx,DWORD PTR ds:0xc002f15c
c0014875:	69 c0 c8 00 00 00    	imul   eax,eax,0xc8
c001487b:	99                   	cdq    
c001487c:	f7 f9                	idiv   ecx
c001487e:	c1 e0 18             	shl    eax,0x18
c0014881:	09 c8                	or     eax,ecx
c0014883:	99                   	cdq    
c0014884:	c3                   	ret    

c0014885 <SysGetVGAPtr(regs*)>:
c0014885:	55                   	push   ebp
c0014886:	57                   	push   edi
c0014887:	56                   	push   esi
c0014888:	53                   	push   ebx
c0014889:	83 ec 1c             	sub    esp,0x1c
c001488c:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0014890:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0014893:	83 f8 ff             	cmp    eax,0xffffffff
c0014896:	74 23                	je     c00148bb <SysGetVGAPtr(regs*)+0x36>
c0014898:	83 ec 0c             	sub    esp,0xc
c001489b:	50                   	push   eax
c001489c:	e8 d7 2a 00 00       	call   c0017378 <Thr::processFromPID(int)>
c00148a1:	31 d2                	xor    edx,edx
c00148a3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00148a7:	83 c4 10             	add    esp,0x10
c00148aa:	b8 01 00 00 00       	mov    eax,0x1
c00148af:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00148b4:	75 11                	jne    c00148c7 <SysGetVGAPtr(regs*)+0x42>
c00148b6:	e9 95 00 00 00       	jmp    c0014950 <SysGetVGAPtr(regs*)+0xcb>
c00148bb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00148c0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00148c3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00148c7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00148cb:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c00148cf:	8b a8 a6 05 00 00    	mov    ebp,DWORD PTR [eax+0x5a6]
c00148d5:	74 0c                	je     c00148e3 <SysGetVGAPtr(regs*)+0x5e>
c00148d7:	83 ec 0c             	sub    esp,0xc
c00148da:	55                   	push   ebp
c00148db:	e8 09 db ff ff       	call   c00123e9 <setActiveTerminal(VgaText*)>
c00148e0:	83 c4 10             	add    esp,0x10
c00148e3:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c00148e6:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c00148eb:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c00148ee:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00148f0:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c00148f3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00148f6:	89 88 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],ecx
c00148fc:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c00148ff:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014902:	89 88 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],ecx
c0014908:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001490c:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001490f:	0f b6 80 76 02 00 00 	movzx  eax,BYTE PTR [eax+0x276]
c0014916:	c1 e8 07             	shr    eax,0x7
c0014919:	89 81 a8 0f 00 00    	mov    DWORD PTR [ecx+0xfa8],eax
c001491f:	50                   	push   eax
c0014920:	50                   	push   eax
c0014921:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014924:	ff b0 a8 0f 00 00    	push   DWORD PTR [eax+0xfa8]
c001492a:	68 48 4f 02 c0       	push   0xc0024f48
c001492f:	e8 32 26 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0014934:	5a                   	pop    edx
c0014935:	59                   	pop    ecx
c0014936:	68 51 4f 02 c0       	push   0xc0024f51
c001493b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001493e:	05 ac 0f 00 00       	add    eax,0xfac
c0014943:	50                   	push   eax
c0014944:	e8 07 bd fe ff       	call   c0000650 <strcpy>
c0014949:	83 c4 10             	add    esp,0x10
c001494c:	31 c0                	xor    eax,eax
c001494e:	31 d2                	xor    edx,edx
c0014950:	83 c4 1c             	add    esp,0x1c
c0014953:	5b                   	pop    ebx
c0014954:	5e                   	pop    esi
c0014955:	5f                   	pop    edi
c0014956:	5d                   	pop    ebp
c0014957:	c3                   	ret    

c0014958 <SysKill(regs*)>:
c0014958:	53                   	push   ebx
c0014959:	83 ec 08             	sub    esp,0x8
c001495c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014960:	83 7b 28 ff          	cmp    DWORD PTR [ebx+0x28],0xffffffff
c0014964:	75 16                	jne    c001497c <SysKill(regs*)+0x24>
c0014966:	83 ec 0c             	sub    esp,0xc
c0014969:	68 5b 4f 02 c0       	push   0xc0024f5b
c001496e:	e8 17 b5 ff ff       	call   c000fe8a <KePanic(char const*)>
c0014973:	83 c4 10             	add    esp,0x10
c0014976:	e9 89 00 00 00       	jmp    c0014a04 <SysKill(regs*)+0xac>
c001497b:	90                   	nop
c001497c:	83 ec 0c             	sub    esp,0xc
c001497f:	68 6c fa 02 c0       	push   0xc002fa6c
c0014984:	e8 2f d6 00 00       	call   c0021fb8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0014989:	8d 76 00             	lea    esi,[esi+0x0]
c001498c:	83 c4 10             	add    esp,0x10
c001498f:	85 c0                	test   eax,eax
c0014991:	74 19                	je     c00149ac <SysKill(regs*)+0x54>
c0014993:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c0014996:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0014999:	39 0a                	cmp    DWORD PTR [edx],ecx
c001499b:	74 33                	je     c00149d0 <SysKill(regs*)+0x78>
c001499d:	52                   	push   edx
c001499e:	52                   	push   edx
c001499f:	50                   	push   eax
c00149a0:	68 6c fa 02 c0       	push   0xc002fa6c
c00149a5:	e8 1a db 00 00       	call   c00224c4 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c00149aa:	eb e0                	jmp    c001498c <SysKill(regs*)+0x34>
c00149ac:	83 ec 0c             	sub    esp,0xc
c00149af:	68 60 fa 02 c0       	push   0xc002fa60
c00149b4:	e8 ff d5 00 00       	call   c0021fb8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00149b9:	8d 76 00             	lea    esi,[esi+0x0]
c00149bc:	83 c4 10             	add    esp,0x10
c00149bf:	85 c0                	test   eax,eax
c00149c1:	74 41                	je     c0014a04 <SysKill(regs*)+0xac>
c00149c3:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c00149c6:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00149c9:	39 0a                	cmp    DWORD PTR [edx],ecx
c00149cb:	75 27                	jne    c00149f4 <SysKill(regs*)+0x9c>
c00149cd:	8d 76 00             	lea    esi,[esi+0x0]
c00149d0:	51                   	push   ecx
c00149d1:	51                   	push   ecx
c00149d2:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00149d5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00149da:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00149dd:	ff b0 c0 07 00 00    	push   DWORD PTR [eax+0x7c0]
c00149e3:	e8 17 c6 ff ff       	call   c0010fff <KeRaiseSignal(SigHandlerBlock*, int)>
c00149e8:	83 c4 10             	add    esp,0x10
c00149eb:	31 c0                	xor    eax,eax
c00149ed:	31 d2                	xor    edx,edx
c00149ef:	eb 1b                	jmp    c0014a0c <SysKill(regs*)+0xb4>
c00149f1:	8d 76 00             	lea    esi,[esi+0x0]
c00149f4:	52                   	push   edx
c00149f5:	52                   	push   edx
c00149f6:	50                   	push   eax
c00149f7:	68 60 fa 02 c0       	push   0xc002fa60
c00149fc:	e8 c3 da 00 00       	call   c00224c4 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0014a01:	eb b9                	jmp    c00149bc <SysKill(regs*)+0x64>
c0014a03:	90                   	nop
c0014a04:	83 c8 ff             	or     eax,0xffffffff
c0014a07:	89 c2                	mov    edx,eax
c0014a09:	8d 76 00             	lea    esi,[esi+0x0]
c0014a0c:	83 c4 08             	add    esp,0x8
c0014a0f:	5b                   	pop    ebx
c0014a10:	c3                   	ret    

c0014a11 <SysLoadDLL(regs*)>:
c0014a11:	56                   	push   esi
c0014a12:	31 d2                	xor    edx,edx
c0014a14:	53                   	push   ebx
c0014a15:	b8 01 00 00 00       	mov    eax,0x1
c0014a1a:	51                   	push   ecx
c0014a1b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014a1f:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0014a23:	0f 84 8c 00 00 00    	je     c0014ab5 <SysLoadDLL(regs*)+0xa4>
c0014a29:	83 ec 0c             	sub    esp,0xc
c0014a2c:	68 14 01 00 00       	push   0x114
c0014a31:	e8 46 b1 ff ff       	call   c000fb7c <malloc>
c0014a36:	83 c4 0c             	add    esp,0xc
c0014a39:	89 c3                	mov    ebx,eax
c0014a3b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014a40:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0014a43:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0014a46:	53                   	push   ebx
c0014a47:	e8 3c 37 ff ff       	call   c0008188 <File::File(char const*, Process*)>
c0014a4c:	83 c4 10             	add    esp,0x10
c0014a4f:	31 d2                	xor    edx,edx
c0014a51:	85 db                	test   ebx,ebx
c0014a53:	b8 02 00 00 00       	mov    eax,0x2
c0014a58:	74 5b                	je     c0014ab5 <SysLoadDLL(regs*)+0xa4>
c0014a5a:	83 ec 0c             	sub    esp,0xc
c0014a5d:	53                   	push   ebx
c0014a5e:	e8 07 3a ff ff       	call   c000846a <File::exists()>
c0014a63:	83 c4 10             	add    esp,0x10
c0014a66:	84 c0                	test   al,al
c0014a68:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014a6a:	75 11                	jne    c0014a7d <SysLoadDLL(regs*)+0x6c>
c0014a6c:	83 ec 0c             	sub    esp,0xc
c0014a6f:	53                   	push   ebx
c0014a70:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014a73:	83 c4 10             	add    esp,0x10
c0014a76:	b8 03 00 00 00       	mov    eax,0x3
c0014a7b:	eb 36                	jmp    c0014ab3 <SysLoadDLL(regs*)+0xa2>
c0014a7d:	83 ec 0c             	sub    esp,0xc
c0014a80:	53                   	push   ebx
c0014a81:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014a84:	58                   	pop    eax
c0014a85:	5a                   	pop    edx
c0014a86:	6a 00                	push   0x0
c0014a88:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0014a8b:	e8 9e 1a 00 00       	call   c001652e <Thr::loadDLL(char const*, bool)>
c0014a90:	83 c4 10             	add    esp,0x10
c0014a93:	31 d2                	xor    edx,edx
c0014a95:	89 c1                	mov    ecx,eax
c0014a97:	b8 04 00 00 00       	mov    eax,0x4
c0014a9c:	85 c9                	test   ecx,ecx
c0014a9e:	74 15                	je     c0014ab5 <SysLoadDLL(regs*)+0xa4>
c0014aa0:	53                   	push   ebx
c0014aa1:	53                   	push   ebx
c0014aa2:	ff 35 d4 d0 02 c0    	push   DWORD PTR ds:0xc002d0d4
c0014aa8:	51                   	push   ecx
c0014aa9:	e8 e1 1c 00 00       	call   c001678f <Thr::executeDLL(unsigned long, void*)>
c0014aae:	83 c4 10             	add    esp,0x10
c0014ab1:	31 c0                	xor    eax,eax
c0014ab3:	31 d2                	xor    edx,edx
c0014ab5:	59                   	pop    ecx
c0014ab6:	5b                   	pop    ebx
c0014ab7:	5e                   	pop    esi
c0014ab8:	c3                   	ret    

c0014ab9 <SysPause(regs*)>:
c0014ab9:	83 ec 18             	sub    esp,0x18
c0014abc:	6a 08                	push   0x8
c0014abe:	e8 c9 26 00 00       	call   c001718c <blockTask(TaskState)>
c0014ac3:	31 c0                	xor    eax,eax
c0014ac5:	31 d2                	xor    edx,edx
c0014ac7:	83 c4 1c             	add    esp,0x1c
c0014aca:	c3                   	ret    

c0014acb <SysPthreadCreate(regs*)>:
c0014acb:	83 ec 18             	sub    esp,0x18
c0014ace:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014ad3:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0014ad6:	e8 89 24 00 00       	call   c0016f64 <Process::createUserThread()>
c0014adb:	31 c0                	xor    eax,eax
c0014add:	31 d2                	xor    edx,edx
c0014adf:	83 c4 1c             	add    esp,0x1c
c0014ae2:	c3                   	ret    

c0014ae3 <SysPthreadGetTID(regs*)>:
c0014ae3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014ae8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014aeb:	99                   	cdq    
c0014aec:	c3                   	ret    

c0014aed <SysInternalPthreadGetContext(regs*)>:
c0014aed:	31 c0                	xor    eax,eax
c0014aef:	31 d2                	xor    edx,edx
c0014af1:	c3                   	ret    

c0014af2 <SysInternalPthreadGetStartLocation(regs*)>:
c0014af2:	31 c0                	xor    eax,eax
c0014af4:	31 d2                	xor    edx,edx
c0014af6:	c3                   	ret    

c0014af7 <SysPthreadJoin(regs*)>:
c0014af7:	31 c0                	xor    eax,eax
c0014af9:	31 d2                	xor    edx,edx
c0014afb:	c3                   	ret    

c0014afc <SysPthreadExit(regs*)>:
c0014afc:	83 ec 18             	sub    esp,0x18
c0014aff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014b03:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014b06:	e8 b5 2d 00 00       	call   c00178c0 <terminateTask(int)>
c0014b0b:	83 c8 ff             	or     eax,0xffffffff
c0014b0e:	83 c4 1c             	add    esp,0x1c
c0014b11:	89 c2                	mov    edx,eax
c0014b13:	c3                   	ret    

c0014b14 <SysRead(regs*)>:
c0014b14:	57                   	push   edi
c0014b15:	56                   	push   esi
c0014b16:	53                   	push   ebx
c0014b17:	83 ec 10             	sub    esp,0x10
c0014b1a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0014b1e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014b21:	83 f8 02             	cmp    eax,0x2
c0014b24:	77 10                	ja     c0014b36 <SysRead(regs*)+0x22>
c0014b26:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014b2b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014b2e:	8b 88 a6 05 00 00    	mov    ecx,DWORD PTR [eax+0x5a6]
c0014b34:	eb 0e                	jmp    c0014b44 <SysRead(regs*)+0x30>
c0014b36:	83 ec 0c             	sub    esp,0xc
c0014b39:	50                   	push   eax
c0014b3a:	e8 96 e6 ff ff       	call   c00131d5 <KeGetFileFromDescriptor(int)>
c0014b3f:	83 c4 10             	add    esp,0x10
c0014b42:	89 c1                	mov    ecx,eax
c0014b44:	83 c8 ff             	or     eax,0xffffffff
c0014b47:	85 c9                	test   ecx,ecx
c0014b49:	89 c2                	mov    edx,eax
c0014b4b:	74 28                	je     c0014b75 <SysRead(regs*)+0x61>
c0014b4d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014b55:	83 ec 0c             	sub    esp,0xc
c0014b58:	31 ff                	xor    edi,edi
c0014b5a:	8d 54 24 18          	lea    edx,[esp+0x18]
c0014b5e:	8b 01                	mov    eax,DWORD PTR [ecx]
c0014b60:	52                   	push   edx
c0014b61:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014b64:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0014b67:	57                   	push   edi
c0014b68:	56                   	push   esi
c0014b69:	51                   	push   ecx
c0014b6a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014b6d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0014b71:	83 c4 20             	add    esp,0x20
c0014b74:	99                   	cdq    
c0014b75:	83 c4 10             	add    esp,0x10
c0014b78:	5b                   	pop    ebx
c0014b79:	5e                   	pop    esi
c0014b7a:	5f                   	pop    edi
c0014b7b:	c3                   	ret    

c0014b7c <SysRegisterSignal(regs*)>:
c0014b7c:	83 ec 18             	sub    esp,0x18
c0014b7f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014b83:	6a 00                	push   0x0
c0014b85:	6a 00                	push   0x0
c0014b87:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0014b8a:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014b8d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014b92:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014b95:	ff b0 c0 07 00 00    	push   DWORD PTR [eax+0x7c0]
c0014b9b:	e8 29 c4 ff ff       	call   c0010fc9 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c0014ba0:	83 c4 2c             	add    esp,0x2c
c0014ba3:	99                   	cdq    
c0014ba4:	c3                   	ret    

c0014ba5 <SysRegistryGetTypeFromPath(regs*)>:
c0014ba5:	53                   	push   ebx
c0014ba6:	81 ec 40 01 00 00    	sub    esp,0x140
c0014bac:	8b 9c 24 48 01 00 00 	mov    ebx,DWORD PTR [esp+0x148]
c0014bb3:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014bb6:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014bb9:	e8 85 93 ff ff       	call   c000df43 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0014bbe:	83 c4 10             	add    esp,0x10
c0014bc1:	85 c0                	test   eax,eax
c0014bc3:	89 c1                	mov    ecx,eax
c0014bc5:	74 15                	je     c0014bdc <SysRegistryGetTypeFromPath(regs*)+0x37>
c0014bc7:	50                   	push   eax
c0014bc8:	8d 44 24 08          	lea    eax,[esp+0x8]
c0014bcc:	50                   	push   eax
c0014bcd:	51                   	push   ecx
c0014bce:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014bd1:	e8 52 8f ff ff       	call   c000db28 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0014bd6:	83 c4 10             	add    esp,0x10
c0014bd9:	99                   	cdq    
c0014bda:	eb 05                	jmp    c0014be1 <SysRegistryGetTypeFromPath(regs*)+0x3c>
c0014bdc:	83 c8 ff             	or     eax,0xffffffff
c0014bdf:	89 c2                	mov    edx,eax
c0014be1:	81 c4 38 01 00 00    	add    esp,0x138
c0014be7:	5b                   	pop    ebx
c0014be8:	c3                   	ret    

c0014be9 <SysRegistryReadExtent(regs*)>:
c0014be9:	83 ec 1c             	sub    esp,0x1c
c0014bec:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014bf0:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0014bf3:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c0014bf6:	85 c0                	test   eax,eax
c0014bf8:	79 1f                	jns    c0014c19 <SysRegistryReadExtent(regs*)+0x30>
c0014bfa:	52                   	push   edx
c0014bfb:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0014c00:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0014c04:	52                   	push   edx
c0014c05:	50                   	push   eax
c0014c06:	51                   	push   ecx
c0014c07:	e8 0e 8e ff ff       	call   c000da1a <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c0014c0c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014c10:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0014c14:	83 c4 10             	add    esp,0x10
c0014c17:	eb 14                	jmp    c0014c2d <SysRegistryReadExtent(regs*)+0x44>
c0014c19:	83 ec 04             	sub    esp,0x4
c0014c1c:	ff 72 24             	push   DWORD PTR [edx+0x24]
c0014c1f:	50                   	push   eax
c0014c20:	51                   	push   ecx
c0014c21:	e8 92 88 ff ff       	call   c000d4b8 <CmGetString(Reghive_Tag*, int, char*)>
c0014c26:	83 c4 10             	add    esp,0x10
c0014c29:	31 c0                	xor    eax,eax
c0014c2b:	31 d2                	xor    edx,edx
c0014c2d:	83 c4 1c             	add    esp,0x1c
c0014c30:	c3                   	ret    

c0014c31 <SysRegistryPathToExtentLookup(regs*)>:
c0014c31:	83 ec 14             	sub    esp,0x14
c0014c34:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014c38:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0014c3b:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014c3e:	e8 00 93 ff ff       	call   c000df43 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0014c43:	83 c4 1c             	add    esp,0x1c
c0014c46:	99                   	cdq    
c0014c47:	c3                   	ret    

c0014c48 <SysRegistryEnterDirectory(regs*)>:
c0014c48:	83 ec 14             	sub    esp,0x14
c0014c4b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014c4f:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0014c52:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014c55:	e8 d5 88 ff ff       	call   c000d52f <CmEnterDirectory(Reghive_Tag*, int)>
c0014c5a:	83 c4 1c             	add    esp,0x1c
c0014c5d:	99                   	cdq    
c0014c5e:	c3                   	ret    

c0014c5f <SysRegistryGetNext(regs*)>:
c0014c5f:	83 ec 14             	sub    esp,0x14
c0014c62:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014c66:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0014c69:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014c6c:	e8 fd 88 ff ff       	call   c000d56e <CmGetNext(Reghive_Tag*, int)>
c0014c71:	83 c4 1c             	add    esp,0x1c
c0014c74:	99                   	cdq    
c0014c75:	c3                   	ret    

c0014c76 <SysRegistryGetNameAndTypeFromExtent(regs*)>:
c0014c76:	57                   	push   edi
c0014c77:	56                   	push   esi
c0014c78:	53                   	push   ebx
c0014c79:	81 ec 34 01 00 00    	sub    esp,0x134
c0014c7f:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0014c86:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0014c8a:	57                   	push   edi
c0014c8b:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0014c8e:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0014c91:	e8 92 8e ff ff       	call   c000db28 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0014c96:	89 c3                	mov    ebx,eax
c0014c98:	58                   	pop    eax
c0014c99:	5a                   	pop    edx
c0014c9a:	57                   	push   edi
c0014c9b:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0014c9e:	e8 ad b9 fe ff       	call   c0000650 <strcpy>
c0014ca3:	81 c4 40 01 00 00    	add    esp,0x140
c0014ca9:	89 d8                	mov    eax,ebx
c0014cab:	5b                   	pop    ebx
c0014cac:	99                   	cdq    
c0014cad:	5e                   	pop    esi
c0014cae:	5f                   	pop    edi
c0014caf:	c3                   	ret    

c0014cb0 <SysRegistryOpen(regs*)>:
c0014cb0:	83 ec 18             	sub    esp,0x18
c0014cb3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014cb7:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0014cba:	e8 89 86 ff ff       	call   c000d348 <CmOpen(char const*)>
c0014cbf:	83 c4 1c             	add    esp,0x1c
c0014cc2:	99                   	cdq    
c0014cc3:	c3                   	ret    

c0014cc4 <SysRegistryClose(regs*)>:
c0014cc4:	83 ec 18             	sub    esp,0x18
c0014cc7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014ccb:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014cce:	e8 93 87 ff ff       	call   c000d466 <CmClose(Reghive_Tag*)>
c0014cd3:	31 c0                	xor    eax,eax
c0014cd5:	31 d2                	xor    edx,edx
c0014cd7:	83 c4 1c             	add    esp,0x1c
c0014cda:	c3                   	ret    

c0014cdb <SysRegistryEasyReadString(regs*)>:
c0014cdb:	57                   	push   edi
c0014cdc:	56                   	push   esi
c0014cdd:	53                   	push   ebx
c0014cde:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014ce2:	83 ec 0c             	sub    esp,0xc
c0014ce5:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0014ce8:	e8 5b 86 ff ff       	call   c000d348 <CmOpen(char const*)>
c0014ced:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c0014cf0:	5a                   	pop    edx
c0014cf1:	59                   	pop    ecx
c0014cf2:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0014cf5:	89 c3                	mov    ebx,eax
c0014cf7:	50                   	push   eax
c0014cf8:	e8 46 92 ff ff       	call   c000df43 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0014cfd:	83 c4 10             	add    esp,0x10
c0014d00:	89 c1                	mov    ecx,eax
c0014d02:	b8 01 00 00 00       	mov    eax,0x1
c0014d07:	85 c9                	test   ecx,ecx
c0014d09:	7e 16                	jle    c0014d21 <SysRegistryEasyReadString(regs*)+0x46>
c0014d0b:	50                   	push   eax
c0014d0c:	57                   	push   edi
c0014d0d:	51                   	push   ecx
c0014d0e:	53                   	push   ebx
c0014d0f:	e8 a4 87 ff ff       	call   c000d4b8 <CmGetString(Reghive_Tag*, int, char*)>
c0014d14:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014d17:	e8 4a 87 ff ff       	call   c000d466 <CmClose(Reghive_Tag*)>
c0014d1c:	83 c4 10             	add    esp,0x10
c0014d1f:	31 c0                	xor    eax,eax
c0014d21:	5b                   	pop    ebx
c0014d22:	31 d2                	xor    edx,edx
c0014d24:	5e                   	pop    esi
c0014d25:	5f                   	pop    edi
c0014d26:	c3                   	ret    

c0014d27 <SysRegistryEasyReadInteger(regs*)>:
c0014d27:	56                   	push   esi
c0014d28:	53                   	push   ebx
c0014d29:	83 ec 10             	sub    esp,0x10
c0014d2c:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0014d30:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0014d33:	e8 10 86 ff ff       	call   c000d348 <CmOpen(char const*)>
c0014d38:	5a                   	pop    edx
c0014d39:	59                   	pop    ecx
c0014d3a:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0014d3d:	89 c3                	mov    ebx,eax
c0014d3f:	50                   	push   eax
c0014d40:	e8 fe 91 ff ff       	call   c000df43 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0014d45:	83 c4 10             	add    esp,0x10
c0014d48:	89 c1                	mov    ecx,eax
c0014d4a:	b8 01 00 00 00       	mov    eax,0x1
c0014d4f:	85 c9                	test   ecx,ecx
c0014d51:	7e 18                	jle    c0014d6b <SysRegistryEasyReadInteger(regs*)+0x44>
c0014d53:	50                   	push   eax
c0014d54:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0014d57:	51                   	push   ecx
c0014d58:	53                   	push   ebx
c0014d59:	e8 bc 8c ff ff       	call   c000da1a <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c0014d5e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014d61:	e8 00 87 ff ff       	call   c000d466 <CmClose(Reghive_Tag*)>
c0014d66:	83 c4 10             	add    esp,0x10
c0014d69:	31 c0                	xor    eax,eax
c0014d6b:	59                   	pop    ecx
c0014d6c:	31 d2                	xor    edx,edx
c0014d6e:	5b                   	pop    ebx
c0014d6f:	5e                   	pop    esi
c0014d70:	c3                   	ret    

c0014d71 <SysSbrk(regs*)>:
c0014d71:	56                   	push   esi
c0014d72:	53                   	push   ebx
c0014d73:	50                   	push   eax
c0014d74:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014d79:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014d7d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014d80:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c0014d83:	8b 88 b2 05 00 00    	mov    ecx,DWORD PTR [eax+0x5b2]
c0014d89:	85 db                	test   ebx,ebx
c0014d8b:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c0014d8e:	74 02                	je     c0014d92 <SysSbrk(regs*)+0x21>
c0014d90:	79 06                	jns    c0014d98 <SysSbrk(regs*)+0x27>
c0014d92:	89 f0                	mov    eax,esi
c0014d94:	31 d2                	xor    edx,edx
c0014d96:	eb 2a                	jmp    c0014dc2 <SysSbrk(regs*)+0x51>
c0014d98:	83 c8 ff             	or     eax,0xffffffff
c0014d9b:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0014da1:	89 c2                	mov    edx,eax
c0014da3:	77 1d                	ja     c0014dc2 <SysSbrk(regs*)+0x51>
c0014da5:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0014dab:	50                   	push   eax
c0014dac:	68 07 0c 00 00       	push   0xc07
c0014db1:	c1 ea 0c             	shr    edx,0xc
c0014db4:	52                   	push   edx
c0014db5:	51                   	push   ecx
c0014db6:	e8 67 ed ff ff       	call   c0013b22 <VAS::allocatePages(int, int)>
c0014dbb:	89 f0                	mov    eax,esi
c0014dbd:	31 d2                	xor    edx,edx
c0014dbf:	83 c4 10             	add    esp,0x10
c0014dc2:	59                   	pop    ecx
c0014dc3:	5b                   	pop    ebx
c0014dc4:	5e                   	pop    esi
c0014dc5:	c3                   	ret    

c0014dc6 <SysSetCwd(regs*)>:
c0014dc6:	83 ec 14             	sub    esp,0x14
c0014dc9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014dcd:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014dd0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014dd5:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0014dd8:	e8 2c 37 ff ff       	call   c0008509 <Fs::setcwd(Process*, char*)>
c0014ddd:	83 c4 1c             	add    esp,0x1c
c0014de0:	99                   	cdq    
c0014de1:	c3                   	ret    

c0014de2 <SysSetTime(regs*)>:
c0014de2:	55                   	push   ebp
c0014de3:	31 d2                	xor    edx,edx
c0014de5:	57                   	push   edi
c0014de6:	56                   	push   esi
c0014de7:	53                   	push   ebx
c0014de8:	bb 3c 00 00 00       	mov    ebx,0x3c
c0014ded:	83 ec 30             	sub    esp,0x30
c0014df0:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0014df4:	8b 71 20             	mov    esi,DWORD PTR [ecx+0x20]
c0014df7:	89 f0                	mov    eax,esi
c0014df9:	f7 f3                	div    ebx
c0014dfb:	89 d7                	mov    edi,edx
c0014dfd:	31 d2                	xor    edx,edx
c0014dff:	f7 f3                	div    ebx
c0014e01:	bb 10 0e 00 00       	mov    ebx,0xe10
c0014e06:	89 f0                	mov    eax,esi
c0014e08:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0014e0c:	31 d2                	xor    edx,edx
c0014e0e:	f7 f3                	div    ebx
c0014e10:	bb 18 00 00 00       	mov    ebx,0x18
c0014e15:	31 d2                	xor    edx,edx
c0014e17:	f7 f3                	div    ebx
c0014e19:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0014e1c:	bb 0c 00 00 00       	mov    ebx,0xc
c0014e21:	89 c6                	mov    esi,eax
c0014e23:	c1 e8 05             	shr    eax,0x5
c0014e26:	83 e6 1f             	and    esi,0x1f
c0014e29:	46                   	inc    esi
c0014e2a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0014e2e:	31 d2                	xor    edx,edx
c0014e30:	f7 f3                	div    ebx
c0014e32:	31 db                	xor    ebx,ebx
c0014e34:	57                   	push   edi
c0014e35:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014e39:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014e3d:	0f b7 69 24          	movzx  ebp,WORD PTR [ecx+0x24]
c0014e41:	55                   	push   ebp
c0014e42:	52                   	push   edx
c0014e43:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0014e47:	56                   	push   esi
c0014e48:	68 7c 4f 02 c0       	push   0xc0024f7c
c0014e4d:	e8 14 21 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0014e52:	83 c4 1c             	add    esp,0x1c
c0014e55:	57                   	push   edi
c0014e56:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014e5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014e5e:	55                   	push   ebp
c0014e5f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0014e63:	52                   	push   edx
c0014e64:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0014e68:	56                   	push   esi
c0014e69:	68 9e 4f 02 c0       	push   0xc0024f9e
c0014e6e:	e8 f3 20 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0014e73:	a1 d4 d0 02 c0       	mov    eax,ds:0xc002d0d4
c0014e78:	31 c9                	xor    ecx,ecx
c0014e7a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0014e7e:	8a 5c 24 30          	mov    bl,BYTE PTR [esp+0x30]
c0014e82:	8a 7c 24 2c          	mov    bh,BYTE PTR [esp+0x2c]
c0014e86:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0014e8c:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0014e90:	89 f0                	mov    eax,esi
c0014e92:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c0014e96:	88 c1                	mov    cl,al
c0014e98:	89 e8                	mov    eax,ebp
c0014e9a:	88 d5                	mov    ch,dl
c0014e9c:	83 c4 1c             	add    esp,0x1c
c0014e9f:	c1 e0 10             	shl    eax,0x10
c0014ea2:	0f b7 d1             	movzx  edx,cx
c0014ea5:	09 c2                	or     edx,eax
c0014ea7:	89 f8                	mov    eax,edi
c0014ea9:	c1 e0 10             	shl    eax,0x10
c0014eac:	89 d1                	mov    ecx,edx
c0014eae:	89 da                	mov    edx,ebx
c0014eb0:	81 e2 ff ff 00 ff    	and    edx,0xff00ffff
c0014eb6:	09 c2                	or     edx,eax
c0014eb8:	52                   	push   edx
c0014eb9:	51                   	push   ecx
c0014eba:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014ebe:	e8 8f 46 ff ff       	call   c0009552 <Clock::setTimeInDatetimeLocal(datetime_t)>
c0014ec3:	83 c4 3c             	add    esp,0x3c
c0014ec6:	31 d2                	xor    edx,edx
c0014ec8:	5b                   	pop    ebx
c0014ec9:	5e                   	pop    esi
c0014eca:	83 f0 01             	xor    eax,0x1
c0014ecd:	5f                   	pop    edi
c0014ece:	0f b6 c0             	movzx  eax,al
c0014ed1:	5d                   	pop    ebp
c0014ed2:	c3                   	ret    

c0014ed3 <SysSymlink(regs*)>:
c0014ed3:	56                   	push   esi
c0014ed4:	83 c8 ff             	or     eax,0xffffffff
c0014ed7:	53                   	push   ebx
c0014ed8:	89 c2                	mov    edx,eax
c0014eda:	81 ec 34 02 00 00    	sub    esp,0x234
c0014ee0:	8b 9c 24 40 02 00 00 	mov    ebx,DWORD PTR [esp+0x240]
c0014ee7:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0014eeb:	74 50                	je     c0014f3d <SysSymlink(regs*)+0x6a>
c0014eed:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0014ef0:	85 c9                	test   ecx,ecx
c0014ef2:	74 49                	je     c0014f3d <SysSymlink(regs*)+0x6a>
c0014ef4:	6a 01                	push   0x1
c0014ef6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014efb:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014efe:	05 0c 01 00 00       	add    eax,0x10c
c0014f03:	50                   	push   eax
c0014f04:	51                   	push   ecx
c0014f05:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0014f09:	56                   	push   esi
c0014f0a:	e8 4d 2f ff ff       	call   c0007e5c <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0014f0f:	6a 01                	push   0x1
c0014f11:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014f16:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014f19:	05 0c 01 00 00       	add    eax,0x10c
c0014f1e:	50                   	push   eax
c0014f1f:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014f22:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c0014f29:	53                   	push   ebx
c0014f2a:	e8 2d 2f ff ff       	call   c0007e5c <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0014f2f:	83 c4 18             	add    esp,0x18
c0014f32:	56                   	push   esi
c0014f33:	53                   	push   ebx
c0014f34:	e8 51 2b ff ff       	call   c0007a8a <KeCreateSymlink(char const*, char const*)>
c0014f39:	83 c4 10             	add    esp,0x10
c0014f3c:	99                   	cdq    
c0014f3d:	81 c4 34 02 00 00    	add    esp,0x234
c0014f43:	5b                   	pop    ebx
c0014f44:	5e                   	pop    esi
c0014f45:	c3                   	ret    

c0014f46 <SysTimezone(regs*)>:
c0014f46:	83 ec 0c             	sub    esp,0xc
c0014f49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014f4d:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c0014f51:	75 17                	jne    c0014f6a <SysTimezone(regs*)+0x24>
c0014f53:	83 ec 0c             	sub    esp,0xc
c0014f56:	68 c0 4f 02 c0       	push   0xc0024fc0
c0014f5b:	e8 06 20 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0014f60:	83 c8 ff             	or     eax,0xffffffff
c0014f63:	83 c4 10             	add    esp,0x10
c0014f66:	89 c2                	mov    edx,eax
c0014f68:	eb 16                	jmp    c0014f80 <SysTimezone(regs*)+0x3a>
c0014f6a:	83 ec 0c             	sub    esp,0xc
c0014f6d:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014f70:	e8 94 40 ff ff       	call   c0009009 <KeSetTimezone(int)>
c0014f75:	31 d2                	xor    edx,edx
c0014f77:	83 c4 10             	add    esp,0x10
c0014f7a:	83 f0 01             	xor    eax,0x1
c0014f7d:	0f b6 c0             	movzx  eax,al
c0014f80:	83 c4 0c             	add    esp,0xc
c0014f83:	c3                   	ret    

c0014f84 <SysTruncate(regs*)>:
c0014f84:	55                   	push   ebp
c0014f85:	57                   	push   edi
c0014f86:	31 ff                	xor    edi,edi
c0014f88:	56                   	push   esi
c0014f89:	53                   	push   ebx
c0014f8a:	83 ec 0c             	sub    esp,0xc
c0014f8d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014f91:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0014f94:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c0014f98:	8b 68 24             	mov    ebp,DWORD PTR [eax+0x24]
c0014f9b:	89 ce                	mov    esi,ecx
c0014f9d:	0f 84 9a 00 00 00    	je     c001503d <SysTruncate(regs*)+0xb9>
c0014fa3:	83 ec 0c             	sub    esp,0xc
c0014fa6:	68 14 01 00 00       	push   0x114
c0014fab:	e8 cc ab ff ff       	call   c000fb7c <malloc>
c0014fb0:	83 c4 0c             	add    esp,0xc
c0014fb3:	89 c3                	mov    ebx,eax
c0014fb5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014fba:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0014fbd:	55                   	push   ebp
c0014fbe:	53                   	push   ebx
c0014fbf:	e8 c4 31 ff ff       	call   c0008188 <File::File(char const*, Process*)>
c0014fc4:	83 c4 10             	add    esp,0x10
c0014fc7:	31 d2                	xor    edx,edx
c0014fc9:	85 db                	test   ebx,ebx
c0014fcb:	b8 03 00 00 00       	mov    eax,0x3
c0014fd0:	0f 84 a2 00 00 00    	je     c0015078 <SysTruncate(regs*)+0xf4>
c0014fd6:	51                   	push   ecx
c0014fd7:	51                   	push   ecx
c0014fd8:	6a 02                	push   0x2
c0014fda:	53                   	push   ebx
c0014fdb:	e8 c6 31 ff ff       	call   c00081a6 <File::open(FileOpenMode)>
c0014fe0:	83 c4 10             	add    esp,0x10
c0014fe3:	85 c0                	test   eax,eax
c0014fe5:	74 13                	je     c0014ffa <SysTruncate(regs*)+0x76>
c0014fe7:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014fe9:	83 ec 0c             	sub    esp,0xc
c0014fec:	53                   	push   ebx
c0014fed:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014ff0:	83 c4 10             	add    esp,0x10
c0014ff3:	b8 04 00 00 00       	mov    eax,0x4
c0014ff8:	eb 7c                	jmp    c0015076 <SysTruncate(regs*)+0xf2>
c0014ffa:	52                   	push   edx
c0014ffb:	57                   	push   edi
c0014ffc:	56                   	push   esi
c0014ffd:	53                   	push   ebx
c0014ffe:	e8 b7 32 ff ff       	call   c00082ba <File::truncate(unsigned long long)>
c0015003:	83 c4 10             	add    esp,0x10
c0015006:	85 c0                	test   eax,eax
c0015008:	74 1b                	je     c0015025 <SysTruncate(regs*)+0xa1>
c001500a:	83 ec 0c             	sub    esp,0xc
c001500d:	53                   	push   ebx
c001500e:	e8 f1 31 ff ff       	call   c0008204 <File::close()>
c0015013:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015015:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015018:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001501b:	83 c4 10             	add    esp,0x10
c001501e:	b8 05 00 00 00       	mov    eax,0x5
c0015023:	eb 51                	jmp    c0015076 <SysTruncate(regs*)+0xf2>
c0015025:	83 ec 0c             	sub    esp,0xc
c0015028:	53                   	push   ebx
c0015029:	e8 d6 31 ff ff       	call   c0008204 <File::close()>
c001502e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015030:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015033:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015036:	83 c4 10             	add    esp,0x10
c0015039:	31 c0                	xor    eax,eax
c001503b:	eb 39                	jmp    c0015076 <SysTruncate(regs*)+0xf2>
c001503d:	31 d2                	xor    edx,edx
c001503f:	83 fd 02             	cmp    ebp,0x2
c0015042:	b8 01 00 00 00       	mov    eax,0x1
c0015047:	7e 2f                	jle    c0015078 <SysTruncate(regs*)+0xf4>
c0015049:	83 ec 0c             	sub    esp,0xc
c001504c:	51                   	push   ecx
c001504d:	e8 83 e1 ff ff       	call   c00131d5 <KeGetFileFromDescriptor(int)>
c0015052:	83 c4 10             	add    esp,0x10
c0015055:	31 d2                	xor    edx,edx
c0015057:	89 c1                	mov    ecx,eax
c0015059:	b8 02 00 00 00       	mov    eax,0x2
c001505e:	85 c9                	test   ecx,ecx
c0015060:	74 16                	je     c0015078 <SysTruncate(regs*)+0xf4>
c0015062:	50                   	push   eax
c0015063:	57                   	push   edi
c0015064:	56                   	push   esi
c0015065:	51                   	push   ecx
c0015066:	e8 4f 32 ff ff       	call   c00082ba <File::truncate(unsigned long long)>
c001506b:	83 c4 10             	add    esp,0x10
c001506e:	85 c0                	test   eax,eax
c0015070:	0f 95 c0             	setne  al
c0015073:	0f b6 c0             	movzx  eax,al
c0015076:	31 d2                	xor    edx,edx
c0015078:	83 c4 0c             	add    esp,0xc
c001507b:	5b                   	pop    ebx
c001507c:	5e                   	pop    esi
c001507d:	5f                   	pop    edi
c001507e:	5d                   	pop    ebp
c001507f:	c3                   	ret    

c0015080 <SysWrite(regs*)>:
c0015080:	57                   	push   edi
c0015081:	56                   	push   esi
c0015082:	53                   	push   ebx
c0015083:	83 ec 10             	sub    esp,0x10
c0015086:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001508a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001508d:	83 f8 02             	cmp    eax,0x2
c0015090:	77 10                	ja     c00150a2 <SysWrite(regs*)+0x22>
c0015092:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015097:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001509a:	8b 88 a6 05 00 00    	mov    ecx,DWORD PTR [eax+0x5a6]
c00150a0:	eb 0e                	jmp    c00150b0 <SysWrite(regs*)+0x30>
c00150a2:	83 ec 0c             	sub    esp,0xc
c00150a5:	50                   	push   eax
c00150a6:	e8 2a e1 ff ff       	call   c00131d5 <KeGetFileFromDescriptor(int)>
c00150ab:	83 c4 10             	add    esp,0x10
c00150ae:	89 c1                	mov    ecx,eax
c00150b0:	83 c8 ff             	or     eax,0xffffffff
c00150b3:	85 c9                	test   ecx,ecx
c00150b5:	89 c2                	mov    edx,eax
c00150b7:	74 28                	je     c00150e1 <SysWrite(regs*)+0x61>
c00150b9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00150c1:	83 ec 0c             	sub    esp,0xc
c00150c4:	31 ff                	xor    edi,edi
c00150c6:	8d 54 24 18          	lea    edx,[esp+0x18]
c00150ca:	8b 01                	mov    eax,DWORD PTR [ecx]
c00150cc:	52                   	push   edx
c00150cd:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00150d0:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c00150d3:	57                   	push   edi
c00150d4:	56                   	push   esi
c00150d5:	51                   	push   ecx
c00150d6:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00150d9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00150dd:	83 c4 20             	add    esp,0x20
c00150e0:	99                   	cdq    
c00150e1:	83 c4 10             	add    esp,0x10
c00150e4:	5b                   	pop    ebx
c00150e5:	5e                   	pop    esi
c00150e6:	5f                   	pop    edi
c00150e7:	c3                   	ret    

c00150e8 <SysWsbe(regs*)>:
c00150e8:	55                   	push   ebp
c00150e9:	57                   	push   edi
c00150ea:	56                   	push   esi
c00150eb:	53                   	push   ebx
c00150ec:	83 ec 3c             	sub    esp,0x3c
c00150ef:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c00150f3:	81 7b 20 96 78 34 a5 	cmp    DWORD PTR [ebx+0x20],0xa5347896
c00150fa:	75 2d                	jne    c0015129 <SysWsbe(regs*)+0x41>
c00150fc:	81 7b 28 f7 7f 77 4f 	cmp    DWORD PTR [ebx+0x28],0x4f777ff7
c0015103:	75 24                	jne    c0015129 <SysWsbe(regs*)+0x41>
c0015105:	81 7b 24 55 55 23 11 	cmp    DWORD PTR [ebx+0x24],0x11235555
c001510c:	75 1b                	jne    c0015129 <SysWsbe(regs*)+0x41>
c001510e:	6a 01                	push   0x1
c0015110:	6a 00                	push   0x0
c0015112:	68 1d 9f 00 c0       	push   0xc0009f1d
c0015117:	ff 35 78 fa 02 c0    	push   DWORD PTR ds:0xc002fa78
c001511d:	e8 02 1d 00 00       	call   c0016e24 <Process::createThread(void (*)(void*), void*, int)>
c0015122:	83 c4 10             	add    esp,0x10
c0015125:	31 c0                	xor    eax,eax
c0015127:	eb 52                	jmp    c001517b <SysWsbe(regs*)+0x93>
c0015129:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001512d:	be d5 4f 02 c0       	mov    esi,0xc0024fd5
c0015132:	b9 0b 00 00 00       	mov    ecx,0xb
c0015137:	fc                   	cld    
c0015138:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001513a:	83 ec 0c             	sub    esp,0xc
c001513d:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0015141:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015146:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015149:	8b b0 a6 05 00 00    	mov    esi,DWORD PTR [eax+0x5a6]
c001514f:	8b 06                	mov    eax,DWORD PTR [esi]
c0015151:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0015154:	57                   	push   edi
c0015155:	e8 26 b4 fe ff       	call   c0000580 <strlen>
c001515a:	5a                   	pop    edx
c001515b:	8d 54 24 0c          	lea    edx,[esp+0xc]
c001515f:	52                   	push   edx
c0015160:	31 d2                	xor    edx,edx
c0015162:	57                   	push   edi
c0015163:	52                   	push   edx
c0015164:	50                   	push   eax
c0015165:	56                   	push   esi
c0015166:	ff d5                	call   ebp
c0015168:	83 c4 14             	add    esp,0x14
c001516b:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001516e:	e8 4d 27 00 00       	call   c00178c0 <terminateTask(int)>
c0015173:	83 c4 10             	add    esp,0x10
c0015176:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001517b:	83 c4 3c             	add    esp,0x3c
c001517e:	31 d2                	xor    edx,edx
c0015180:	5b                   	pop    ebx
c0015181:	5e                   	pop    esi
c0015182:	5f                   	pop    edi
c0015183:	5d                   	pop    ebp
c0015184:	c3                   	ret    

c0015185 <SysYield(regs*)>:
c0015185:	83 ec 0c             	sub    esp,0xc
c0015188:	fa                   	cli    
c0015189:	ff 05 50 fa 02 c0    	inc    DWORD PTR ds:0xc002fa50
c001518f:	e8 38 1f 00 00       	call   c00170cc <schedule()>
c0015194:	f0 ff 0d 50 fa 02 c0 	lock dec DWORD PTR ds:0xc002fa50
c001519b:	83 3d 50 fa 02 c0 00 	cmp    DWORD PTR ds:0xc002fa50,0x0
c00151a2:	75 01                	jne    c00151a5 <SysYield(regs*)+0x20>
c00151a4:	fb                   	sti    
c00151a5:	31 c0                	xor    eax,eax
c00151a7:	31 d2                	xor    edx,edx
c00151a9:	83 c4 0c             	add    esp,0xc
c00151ac:	c3                   	ret    
c00151ad:	66 90                	xchg   ax,ax
c00151af:	90                   	nop

c00151b0 <KeAlarm(ThreadControlBlock*, unsigned long long)>:
c00151b0:	55                   	push   ebp
c00151b1:	57                   	push   edi
c00151b2:	56                   	push   esi
c00151b3:	53                   	push   ebx
c00151b4:	83 ec 2c             	sub    esp,0x2c
c00151b7:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00151bb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00151bf:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00151c3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00151c7:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00151cb:	8b 7a 63             	mov    edi,DWORD PTR [edx+0x63]
c00151ce:	0f b6 72 67          	movzx  esi,BYTE PTR [edx+0x67]
c00151d2:	0f b6 42 68          	movzx  eax,BYTE PTR [edx+0x68]
c00151d6:	c1 e0 08             	shl    eax,0x8
c00151d9:	09 c6                	or     esi,eax
c00151db:	0f b6 42 69          	movzx  eax,BYTE PTR [edx+0x69]
c00151df:	c1 e0 10             	shl    eax,0x10
c00151e2:	09 c6                	or     esi,eax
c00151e4:	0f b6 42 6a          	movzx  eax,BYTE PTR [edx+0x6a]
c00151e8:	83 e0 7f             	and    eax,0x7f
c00151eb:	c1 e0 18             	shl    eax,0x18
c00151ee:	09 f0                	or     eax,esi
c00151f0:	89 c5                	mov    ebp,eax
c00151f2:	89 f8                	mov    eax,edi
c00151f4:	80 f4 00             	xor    ah,0x0
c00151f7:	89 c1                	mov    ecx,eax
c00151f9:	89 e8                	mov    eax,ebp
c00151fb:	80 f4 00             	xor    ah,0x0
c00151fe:	89 c3                	mov    ebx,eax
c0015200:	89 d8                	mov    eax,ebx
c0015202:	09 c8                	or     eax,ecx
c0015204:	74 42                	je     c0015248 <KeAlarm(ThreadControlBlock*, unsigned long long)+0x98>
c0015206:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001520a:	8b 4a 63             	mov    ecx,DWORD PTR [edx+0x63]
c001520d:	0f b6 72 67          	movzx  esi,BYTE PTR [edx+0x67]
c0015211:	0f b6 42 68          	movzx  eax,BYTE PTR [edx+0x68]
c0015215:	c1 e0 08             	shl    eax,0x8
c0015218:	09 c6                	or     esi,eax
c001521a:	0f b6 42 69          	movzx  eax,BYTE PTR [edx+0x69]
c001521e:	c1 e0 10             	shl    eax,0x10
c0015221:	09 c6                	or     esi,eax
c0015223:	0f b6 42 6a          	movzx  eax,BYTE PTR [edx+0x6a]
c0015227:	83 e0 7f             	and    eax,0x7f
c001522a:	c1 e0 18             	shl    eax,0x18
c001522d:	09 f0                	or     eax,esi
c001522f:	89 c3                	mov    ebx,eax
c0015231:	a1 50 cb 02 c0       	mov    eax,ds:0xc002cb50
c0015236:	8b 15 54 cb 02 c0    	mov    edx,DWORD PTR ds:0xc002cb54
c001523c:	29 c1                	sub    ecx,eax
c001523e:	19 d3                	sbb    ebx,edx
c0015240:	89 c8                	mov    eax,ecx
c0015242:	89 da                	mov    edx,ebx
c0015244:	eb 0e                	jmp    c0015254 <KeAlarm(ThreadControlBlock*, unsigned long long)+0xa4>
c0015246:	66 90                	xchg   ax,ax
c0015248:	b8 00 00 00 00       	mov    eax,0x0
c001524d:	ba 00 00 00 00       	mov    edx,0x0
c0015252:	66 90                	xchg   ax,ax
c0015254:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0015258:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c001525c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015260:	80 f4 00             	xor    ah,0x0
c0015263:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015267:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001526b:	80 f4 00             	xor    ah,0x0
c001526e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015272:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0015276:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c001527a:	89 e8                	mov    eax,ebp
c001527c:	09 f8                	or     eax,edi
c001527e:	74 30                	je     c00152b0 <KeAlarm(ThreadControlBlock*, unsigned long long)+0x100>
c0015280:	8b 0d 50 cb 02 c0    	mov    ecx,DWORD PTR ds:0xc002cb50
c0015286:	8b 1d 54 cb 02 c0    	mov    ebx,DWORD PTR ds:0xc002cb54
c001528c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015290:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0015294:	01 c8                	add    eax,ecx
c0015296:	11 da                	adc    edx,ebx
c0015298:	89 c7                	mov    edi,eax
c001529a:	83 e7 ff             	and    edi,0xffffffff
c001529d:	89 3c 24             	mov    DWORD PTR [esp],edi
c00152a0:	89 d0                	mov    eax,edx
c00152a2:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00152a7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00152ab:	eb 13                	jmp    c00152c0 <KeAlarm(ThreadControlBlock*, unsigned long long)+0x110>
c00152ad:	8d 76 00             	lea    esi,[esi+0x0]
c00152b0:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00152b7:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00152bf:	90                   	nop
c00152c0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00152c4:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00152c7:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c00152cb:	89 cf                	mov    edi,ecx
c00152cd:	89 78 63             	mov    DWORD PTR [eax+0x63],edi
c00152d0:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00152d3:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c00152d7:	0f b6 5c 24 04       	movzx  ebx,BYTE PTR [esp+0x4]
c00152dc:	8a 50 67             	mov    dl,BYTE PTR [eax+0x67]
c00152df:	83 e2 00             	and    edx,0x0
c00152e2:	88 d1                	mov    cl,dl
c00152e4:	88 da                	mov    dl,bl
c00152e6:	09 ca                	or     edx,ecx
c00152e8:	88 50 67             	mov    BYTE PTR [eax+0x67],dl
c00152eb:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00152ef:	c1 ea 08             	shr    edx,0x8
c00152f2:	0f b6 da             	movzx  ebx,dl
c00152f5:	8a 50 68             	mov    dl,BYTE PTR [eax+0x68]
c00152f8:	83 e2 00             	and    edx,0x0
c00152fb:	88 d1                	mov    cl,dl
c00152fd:	88 da                	mov    dl,bl
c00152ff:	09 ca                	or     edx,ecx
c0015301:	88 50 68             	mov    BYTE PTR [eax+0x68],dl
c0015304:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015308:	c1 ea 10             	shr    edx,0x10
c001530b:	0f b6 da             	movzx  ebx,dl
c001530e:	8a 50 69             	mov    dl,BYTE PTR [eax+0x69]
c0015311:	83 e2 00             	and    edx,0x0
c0015314:	88 d1                	mov    cl,dl
c0015316:	88 da                	mov    dl,bl
c0015318:	09 ca                	or     edx,ecx
c001531a:	88 50 69             	mov    BYTE PTR [eax+0x69],dl
c001531d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015321:	c1 ea 18             	shr    edx,0x18
c0015324:	83 e2 7f             	and    edx,0x7f
c0015327:	89 d3                	mov    ebx,edx
c0015329:	83 e3 7f             	and    ebx,0x7f
c001532c:	8a 50 6a             	mov    dl,BYTE PTR [eax+0x6a]
c001532f:	83 e2 80             	and    edx,0xffffff80
c0015332:	88 d1                	mov    cl,dl
c0015334:	88 da                	mov    dl,bl
c0015336:	09 ca                	or     edx,ecx
c0015338:	88 50 6a             	mov    BYTE PTR [eax+0x6a],dl
c001533b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001533f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015343:	83 c4 2c             	add    esp,0x2c
c0015346:	5b                   	pop    ebx
c0015347:	5e                   	pop    esi
c0015348:	5f                   	pop    edi
c0015349:	5d                   	pop    ebp
c001534a:	c3                   	ret    
c001534b:	90                   	nop

c001534c <KeCheckAlarm(ThreadControlBlock*)>:
c001534c:	55                   	push   ebp
c001534d:	57                   	push   edi
c001534e:	56                   	push   esi
c001534f:	53                   	push   ebx
c0015350:	83 ec 0c             	sub    esp,0xc
c0015353:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015357:	8b 50 63             	mov    edx,DWORD PTR [eax+0x63]
c001535a:	0f b6 78 67          	movzx  edi,BYTE PTR [eax+0x67]
c001535e:	0f b6 68 68          	movzx  ebp,BYTE PTR [eax+0x68]
c0015362:	c1 e5 08             	shl    ebp,0x8
c0015365:	09 fd                	or     ebp,edi
c0015367:	0f b6 78 69          	movzx  edi,BYTE PTR [eax+0x69]
c001536b:	c1 e7 10             	shl    edi,0x10
c001536e:	09 ef                	or     edi,ebp
c0015370:	0f b6 40 6a          	movzx  eax,BYTE PTR [eax+0x6a]
c0015374:	83 e0 7f             	and    eax,0x7f
c0015377:	c1 e0 18             	shl    eax,0x18
c001537a:	09 f8                	or     eax,edi
c001537c:	89 c1                	mov    ecx,eax
c001537e:	89 d0                	mov    eax,edx
c0015380:	80 f4 00             	xor    ah,0x0
c0015383:	89 c3                	mov    ebx,eax
c0015385:	89 c8                	mov    eax,ecx
c0015387:	80 f4 00             	xor    ah,0x0
c001538a:	89 c6                	mov    esi,eax
c001538c:	89 f0                	mov    eax,esi
c001538e:	09 d8                	or     eax,ebx
c0015390:	0f 84 9e 00 00 00    	je     c0015434 <KeCheckAlarm(ThreadControlBlock*)+0xe8>
c0015396:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001539a:	8b 50 63             	mov    edx,DWORD PTR [eax+0x63]
c001539d:	0f b6 58 67          	movzx  ebx,BYTE PTR [eax+0x67]
c00153a1:	0f b6 70 68          	movzx  esi,BYTE PTR [eax+0x68]
c00153a5:	c1 e6 08             	shl    esi,0x8
c00153a8:	09 de                	or     esi,ebx
c00153aa:	0f b6 58 69          	movzx  ebx,BYTE PTR [eax+0x69]
c00153ae:	c1 e3 10             	shl    ebx,0x10
c00153b1:	09 f3                	or     ebx,esi
c00153b3:	0f b6 40 6a          	movzx  eax,BYTE PTR [eax+0x6a]
c00153b7:	83 e0 7f             	and    eax,0x7f
c00153ba:	c1 e0 18             	shl    eax,0x18
c00153bd:	09 d8                	or     eax,ebx
c00153bf:	89 c1                	mov    ecx,eax
c00153c1:	89 cb                	mov    ebx,ecx
c00153c3:	89 d1                	mov    ecx,edx
c00153c5:	a1 50 cb 02 c0       	mov    eax,ds:0xc002cb50
c00153ca:	8b 15 54 cb 02 c0    	mov    edx,DWORD PTR ds:0xc002cb54
c00153d0:	39 c8                	cmp    eax,ecx
c00153d2:	89 d0                	mov    eax,edx
c00153d4:	19 d8                	sbb    eax,ebx
c00153d6:	72 5c                	jb     c0015434 <KeCheckAlarm(ThreadControlBlock*)+0xe8>
c00153d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00153dc:	c7 40 63 00 00 00 00 	mov    DWORD PTR [eax+0x63],0x0
c00153e3:	8a 50 67             	mov    dl,BYTE PTR [eax+0x67]
c00153e6:	83 e2 00             	and    edx,0x0
c00153e9:	88 50 67             	mov    BYTE PTR [eax+0x67],dl
c00153ec:	8a 50 68             	mov    dl,BYTE PTR [eax+0x68]
c00153ef:	83 e2 00             	and    edx,0x0
c00153f2:	88 50 68             	mov    BYTE PTR [eax+0x68],dl
c00153f5:	8a 50 69             	mov    dl,BYTE PTR [eax+0x69]
c00153f8:	83 e2 00             	and    edx,0x0
c00153fb:	88 50 69             	mov    BYTE PTR [eax+0x69],dl
c00153fe:	8a 50 6a             	mov    dl,BYTE PTR [eax+0x6a]
c0015401:	83 e2 80             	and    edx,0xffffff80
c0015404:	88 50 6a             	mov    BYTE PTR [eax+0x6a],dl
c0015407:	83 ec 0c             	sub    esp,0xc
c001540a:	68 01 50 02 c0       	push   0xc0025001
c001540f:	e8 52 1b ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0015414:	83 c4 10             	add    esp,0x10
c0015417:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001541b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001541e:	8b 80 c0 07 00 00    	mov    eax,DWORD PTR [eax+0x7c0]
c0015424:	83 ec 08             	sub    esp,0x8
c0015427:	6a 0e                	push   0xe
c0015429:	50                   	push   eax
c001542a:	e8 d0 bb ff ff       	call   c0010fff <KeRaiseSignal(SigHandlerBlock*, int)>
c001542f:	83 c4 10             	add    esp,0x10
c0015432:	66 90                	xchg   ax,ax
c0015434:	90                   	nop
c0015435:	83 c4 0c             	add    esp,0xc
c0015438:	5b                   	pop    ebx
c0015439:	5e                   	pop    esi
c001543a:	5f                   	pop    edi
c001543b:	5d                   	pop    ebp
c001543c:	c3                   	ret    

c001543d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001543d:	55                   	push   ebp
c001543e:	57                   	push   edi
c001543f:	56                   	push   esi
c0015440:	53                   	push   ebx
c0015441:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0015447:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c0015452:	74 3b                	je     c001548f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c0015454:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c001545c:	74 31                	je     c001548f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c001545e:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c0015466:	75 27                	jne    c001548f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c0015468:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c001546f:	05 00 10 00 00       	add    eax,0x1000
c0015474:	89 c2                	mov    edx,eax
c0015476:	25 00 f0 ff ff       	and    eax,0xfffff000
c001547b:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c0015482:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c0015488:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c001548f:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c0015496:	83 ec 0c             	sub    esp,0xc
c0015499:	6a 01                	push   0x1
c001549b:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c00154a1:	e8 9b de ff ff       	call   c0013341 <Virt::allocateKernelVirtualPages(int)>
c00154a6:	83 c4 10             	add    esp,0x10
c00154a9:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c00154af:	89 c3                	mov    ebx,eax
c00154b1:	0f 86 27 01 00 00    	jbe    c00155de <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a1>
c00154b7:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00154bf:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c00154c6:	c1 ee 0c             	shr    esi,0xc
c00154c9:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00154cd:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c00154d4:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c00154db:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00154df:	29 ef                	sub    edi,ebp
c00154e1:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c00154e5:	0f 83 fa 00 00 00    	jae    c00155e5 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a8>
c00154eb:	81 ff 00 10 00 00    	cmp    edi,0x1000
c00154f1:	b8 00 10 00 00       	mov    eax,0x1000
c00154f6:	0f 47 f8             	cmova  edi,eax
c00154f9:	83 ec 0c             	sub    esp,0xc
c00154fc:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0015503:	31 d2                	xor    edx,edx
c0015505:	8b 08                	mov    ecx,DWORD PTR [eax]
c0015507:	8d 44 24 28          	lea    eax,[esp+0x28]
c001550b:	50                   	push   eax
c001550c:	8d 74 24 30          	lea    esi,[esp+0x30]
c0015510:	56                   	push   esi
c0015511:	52                   	push   edx
c0015512:	57                   	push   edi
c0015513:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c001551a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001551d:	83 c4 20             	add    esp,0x20
c0015520:	85 c0                	test   eax,eax
c0015522:	75 06                	jne    c001552a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xed>
c0015524:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0015528:	74 13                	je     c001553d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x100>
c001552a:	83 ec 0c             	sub    esp,0xc
c001552d:	53                   	push   ebx
c001552e:	e8 0c e1 ff ff       	call   c001363f <Virt::freeKernelVirtualPages(unsigned long)>
c0015533:	83 c4 10             	add    esp,0x10
c0015536:	31 c0                	xor    eax,eax
c0015538:	e9 80 01 00 00       	jmp    c00156bd <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x280>
c001553d:	fa                   	cli    
c001553e:	ff 05 50 fa 02 c0    	inc    DWORD PTR ds:0xc002fa50
c0015544:	e8 3b ab ff ff       	call   c0010084 <Phys::allocatePage()>
c0015549:	6a 07                	push   0x7
c001554b:	53                   	push   ebx
c001554c:	50                   	push   eax
c001554d:	89 c7                	mov    edi,eax
c001554f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015554:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015557:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c001555d:	e8 b8 e4 ff ff       	call   c0013a1a <VAS::mapPage(unsigned long, unsigned long, int)>
c0015562:	83 c4 0c             	add    esp,0xc
c0015565:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001556c:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c0015572:	6a 00                	push   0x0
c0015574:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015579:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001557c:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c0015582:	e8 ff e2 ff ff       	call   c0013886 <VAS::mapOtherVASIn(bool, VAS*)>
c0015587:	58                   	pop    eax
c0015588:	5a                   	pop    edx
c0015589:	68 07 0c 00 00       	push   0xc07
c001558e:	55                   	push   ebp
c001558f:	57                   	push   edi
c0015590:	89 df                	mov    edi,ebx
c0015592:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0015599:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c001559f:	6a 00                	push   0x0
c00155a1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00155a6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00155a9:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c00155af:	e8 ba e6 ff ff       	call   c0013c6e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00155b4:	b9 00 10 00 00       	mov    ecx,0x1000
c00155b9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00155bb:	f0 ff 0d 50 fa 02 c0 	lock dec DWORD PTR ds:0xc002fa50
c00155c2:	83 c4 20             	add    esp,0x20
c00155c5:	83 3d 50 fa 02 c0 00 	cmp    DWORD PTR ds:0xc002fa50,0x0
c00155cc:	75 01                	jne    c00155cf <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x192>
c00155ce:	fb                   	sti    
c00155cf:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c00155d3:	81 c5 00 10 00 00    	add    ebp,0x1000
c00155d9:	e9 ef fe ff ff       	jmp    c00154cd <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x90>
c00155de:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c00155e5:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c00155ec:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c00155f2:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c00155f8:	0f 86 b1 00 00 00    	jbe    c00156af <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x272>
c00155fe:	fa                   	cli    
c00155ff:	51                   	push   ecx
c0015600:	31 ff                	xor    edi,edi
c0015602:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0015609:	c1 ee 0c             	shr    esi,0xc
c001560c:	ff 05 50 fa 02 c0    	inc    DWORD PTR ds:0xc002fa50
c0015612:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c0015618:	6a 00                	push   0x0
c001561a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001561f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015622:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c0015628:	e8 59 e2 ff ff       	call   c0013886 <VAS::mapOtherVASIn(bool, VAS*)>
c001562d:	83 c4 10             	add    esp,0x10
c0015630:	e8 4f aa ff ff       	call   c0010084 <Phys::allocatePage()>
c0015635:	47                   	inc    edi
c0015636:	6a 07                	push   0x7
c0015638:	53                   	push   ebx
c0015639:	50                   	push   eax
c001563a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001563e:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0015644:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0015647:	ff b2 b2 05 00 00    	push   DWORD PTR [edx+0x5b2]
c001564d:	e8 c8 e3 ff ff       	call   c0013a1a <VAS::mapPage(unsigned long, unsigned long, int)>
c0015652:	58                   	pop    eax
c0015653:	5a                   	pop    edx
c0015654:	68 07 0c 00 00       	push   0xc07
c0015659:	55                   	push   ebp
c001565a:	81 c5 00 10 00 00    	add    ebp,0x1000
c0015660:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015664:	50                   	push   eax
c0015665:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001566c:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c0015672:	6a 00                	push   0x0
c0015674:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015679:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001567c:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c0015682:	e8 e7 e5 ff ff       	call   c0013c6e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0015687:	83 c4 1c             	add    esp,0x1c
c001568a:	68 00 10 00 00       	push   0x1000
c001568f:	6a 00                	push   0x0
c0015691:	53                   	push   ebx
c0015692:	e8 59 ae fe ff       	call   c00004f0 <memset>
c0015697:	83 c4 10             	add    esp,0x10
c001569a:	39 fe                	cmp    esi,edi
c001569c:	77 92                	ja     c0015630 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f3>
c001569e:	f0 ff 0d 50 fa 02 c0 	lock dec DWORD PTR ds:0xc002fa50
c00156a5:	83 3d 50 fa 02 c0 00 	cmp    DWORD PTR ds:0xc002fa50,0x0
c00156ac:	75 01                	jne    c00156af <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x272>
c00156ae:	fb                   	sti    
c00156af:	83 ec 0c             	sub    esp,0xc
c00156b2:	53                   	push   ebx
c00156b3:	e8 87 df ff ff       	call   c001363f <Virt::freeKernelVirtualPages(unsigned long)>
c00156b8:	83 c4 10             	add    esp,0x10
c00156bb:	b0 01                	mov    al,0x1
c00156bd:	81 c4 2c 10 00 00    	add    esp,0x102c
c00156c3:	5b                   	pop    ebx
c00156c4:	5e                   	pop    esi
c00156c5:	5f                   	pop    edi
c00156c6:	5d                   	pop    ebp
c00156c7:	c3                   	ret    

c00156c8 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c00156c8:	55                   	push   ebp
c00156c9:	57                   	push   edi
c00156ca:	56                   	push   esi
c00156cb:	53                   	push   ebx
c00156cc:	83 ec 68             	sub    esp,0x68
c00156cf:	68 14 01 00 00       	push   0x114
c00156d4:	e8 a3 a4 ff ff       	call   c000fb7c <malloc>
c00156d9:	83 c4 0c             	add    esp,0xc
c00156dc:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c00156e0:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c00156e4:	89 c6                	mov    esi,eax
c00156e6:	50                   	push   eax
c00156e7:	e8 9c 2a ff ff       	call   c0008188 <File::File(char const*, Process*)>
c00156ec:	58                   	pop    eax
c00156ed:	5a                   	pop    edx
c00156ee:	6a 01                	push   0x1
c00156f0:	56                   	push   esi
c00156f1:	e8 b0 2a ff ff       	call   c00081a6 <File::open(FileOpenMode)>
c00156f6:	83 c4 10             	add    esp,0x10
c00156f9:	85 c0                	test   eax,eax
c00156fb:	0f 85 f6 01 00 00    	jne    c00158f7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x22f>
c0015701:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0015709:	83 ec 0c             	sub    esp,0xc
c001570c:	6a 34                	push   0x34
c001570e:	e8 69 a4 ff ff       	call   c000fb7c <malloc>
c0015713:	89 c3                	mov    ebx,eax
c0015715:	58                   	pop    eax
c0015716:	8b 06                	mov    eax,DWORD PTR [esi]
c0015718:	8d 7c 24 34          	lea    edi,[esp+0x34]
c001571c:	57                   	push   edi
c001571d:	53                   	push   ebx
c001571e:	6a 00                	push   0x0
c0015720:	6a 34                	push   0x34
c0015722:	56                   	push   esi
c0015723:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015726:	83 c4 20             	add    esp,0x20
c0015729:	85 c0                	test   eax,eax
c001572b:	0f 85 c6 01 00 00    	jne    c00158f7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x22f>
c0015731:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0015737:	0f 85 ba 01 00 00    	jne    c00158f7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x22f>
c001573d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0015740:	85 c0                	test   eax,eax
c0015742:	0f 84 af 01 00 00    	je     c00158f7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x22f>
c0015748:	31 d2                	xor    edx,edx
c001574a:	55                   	push   ebp
c001574b:	52                   	push   edx
c001574c:	50                   	push   eax
c001574d:	56                   	push   esi
c001574e:	e8 11 2b ff ff       	call   c0008264 <File::seek(unsigned long long)>
c0015753:	83 c4 10             	add    esp,0x10
c0015756:	85 c0                	test   eax,eax
c0015758:	0f 85 99 01 00 00    	jne    c00158f7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x22f>
c001575e:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0015761:	83 ec 0c             	sub    esp,0xc
c0015764:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0015768:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001576c:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0015770:	0f af c2             	imul   eax,edx
c0015773:	50                   	push   eax
c0015774:	e8 03 a4 ff ff       	call   c000fb7c <malloc>
c0015779:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001577b:	89 3c 24             	mov    DWORD PTR [esp],edi
c001577e:	31 ff                	xor    edi,edi
c0015780:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0015784:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015788:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001578c:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0015790:	0f af c2             	imul   eax,edx
c0015793:	99                   	cdq    
c0015794:	52                   	push   edx
c0015795:	50                   	push   eax
c0015796:	56                   	push   esi
c0015797:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001579a:	83 c4 20             	add    esp,0x20
c001579d:	66 3b 7b 30          	cmp    di,WORD PTR [ebx+0x30]
c00157a1:	0f b7 c7             	movzx  eax,di
c00157a4:	0f 83 98 00 00 00    	jae    c0015842 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17a>
c00157aa:	52                   	push   edx
c00157ab:	0f b7 53 32          	movzx  edx,WORD PTR [ebx+0x32]
c00157af:	6b c0 28             	imul   eax,eax,0x28
c00157b2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00157b6:	6b d2 28             	imul   edx,edx,0x28
c00157b9:	8b 04 01             	mov    eax,DWORD PTR [ecx+eax*1]
c00157bc:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c00157c0:	31 d2                	xor    edx,edx
c00157c2:	52                   	push   edx
c00157c3:	50                   	push   eax
c00157c4:	56                   	push   esi
c00157c5:	e8 9a 2a ff ff       	call   c0008264 <File::seek(unsigned long long)>
c00157ca:	83 c4 0c             	add    esp,0xc
c00157cd:	6a 20                	push   0x20
c00157cf:	6a 00                	push   0x0
c00157d1:	8d 6c 24 3c          	lea    ebp,[esp+0x3c]
c00157d5:	55                   	push   ebp
c00157d6:	e8 15 ad fe ff       	call   c00004f0 <memset>
c00157db:	8b 06                	mov    eax,DWORD PTR [esi]
c00157dd:	59                   	pop    ecx
c00157de:	8d 54 24 38          	lea    edx,[esp+0x38]
c00157e2:	52                   	push   edx
c00157e3:	55                   	push   ebp
c00157e4:	6a 00                	push   0x0
c00157e6:	6a 1f                	push   0x1f
c00157e8:	56                   	push   esi
c00157e9:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00157ec:	83 c4 18             	add    esp,0x18
c00157ef:	55                   	push   ebp
c00157f0:	68 12 50 02 c0       	push   0xc0025012
c00157f5:	e8 86 af fe ff       	call   c0000780 <strcmp>
c00157fa:	83 c4 10             	add    esp,0x10
c00157fd:	85 c0                	test   eax,eax
c00157ff:	75 27                	jne    c0015828 <Thr::loadProgramIntoMemory(Process*, char const*)+0x160>
c0015801:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0015805:	83 ec 0c             	sub    esp,0xc
c0015808:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c001580c:	8a 80 76 02 00 00    	mov    al,BYTE PTR [eax+0x276]
c0015812:	83 c8 80             	or     eax,0xffffff80
c0015815:	88 82 76 02 00 00    	mov    BYTE PTR [edx+0x276],al
c001581b:	68 21 50 02 c0       	push   0xc0025021
c0015820:	e8 41 17 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0015825:	83 c4 10             	add    esp,0x10
c0015828:	55                   	push   ebp
c0015829:	47                   	inc    edi
c001582a:	55                   	push   ebp
c001582b:	8d 44 24 38          	lea    eax,[esp+0x38]
c001582f:	50                   	push   eax
c0015830:	68 33 50 02 c0       	push   0xc0025033
c0015835:	e8 2c 17 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001583a:	83 c4 10             	add    esp,0x10
c001583d:	e9 5b ff ff ff       	jmp    c001579d <Thr::loadProgramIntoMemory(Process*, char const*)+0xd5>
c0015842:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0015845:	85 c0                	test   eax,eax
c0015847:	0f 84 aa 00 00 00    	je     c00158f7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x22f>
c001584d:	31 d2                	xor    edx,edx
c001584f:	57                   	push   edi
c0015850:	52                   	push   edx
c0015851:	50                   	push   eax
c0015852:	56                   	push   esi
c0015853:	e8 0c 2a ff ff       	call   c0008264 <File::seek(unsigned long long)>
c0015858:	83 c4 10             	add    esp,0x10
c001585b:	85 c0                	test   eax,eax
c001585d:	0f 85 94 00 00 00    	jne    c00158f7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x22f>
c0015863:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0015867:	83 ec 0c             	sub    esp,0xc
c001586a:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001586e:	0f af c2             	imul   eax,edx
c0015871:	50                   	push   eax
c0015872:	e8 05 a3 ff ff       	call   c000fb7c <malloc>
c0015877:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001587b:	59                   	pop    ecx
c001587c:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001587e:	8d 44 24 34          	lea    eax,[esp+0x34]
c0015882:	50                   	push   eax
c0015883:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0015887:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001588b:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001588f:	0f af c2             	imul   eax,edx
c0015892:	99                   	cdq    
c0015893:	52                   	push   edx
c0015894:	50                   	push   eax
c0015895:	56                   	push   esi
c0015896:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015899:	83 c4 20             	add    esp,0x20
c001589c:	31 c9                	xor    ecx,ecx
c001589e:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00158a6:	66 3b 4b 2c          	cmp    cx,WORD PTR [ebx+0x2c]
c00158aa:	0f b7 e9             	movzx  ebp,cx
c00158ad:	0f 83 89 00 00 00    	jae    c001593c <Thr::loadProgramIntoMemory(Process*, char const*)+0x274>
c00158b3:	c1 e5 05             	shl    ebp,0x5
c00158b6:	03 6c 24 10          	add    ebp,DWORD PTR [esp+0x10]
c00158ba:	83 7d 00 01          	cmp    DWORD PTR [ebp+0x0],0x1
c00158be:	75 76                	jne    c0015936 <Thr::loadProgramIntoMemory(Process*, char const*)+0x26e>
c00158c0:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c00158c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158c7:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
c00158ca:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00158ce:	52                   	push   edx
c00158cf:	31 d2                	xor    edx,edx
c00158d1:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c00158d4:	52                   	push   edx
c00158d5:	50                   	push   eax
c00158d6:	56                   	push   esi
c00158d7:	e8 88 29 ff ff       	call   c0008264 <File::seek(unsigned long long)>
c00158dc:	83 c4 10             	add    esp,0x10
c00158df:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00158e3:	85 c0                	test   eax,eax
c00158e5:	74 17                	je     c00158fe <Thr::loadProgramIntoMemory(Process*, char const*)+0x236>
c00158e7:	83 ec 0c             	sub    esp,0xc
c00158ea:	68 4a 50 02 c0       	push   0xc002504a
c00158ef:	e8 72 16 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00158f4:	83 c4 10             	add    esp,0x10
c00158f7:	31 c0                	xor    eax,eax
c00158f9:	e9 8e 00 00 00       	jmp    c001598c <Thr::loadProgramIntoMemory(Process*, char const*)+0x2c4>
c00158fe:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0015902:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0015905:	83 ec 0c             	sub    esp,0xc
c0015908:	2b 45 10             	sub    eax,DWORD PTR [ebp+0x10]
c001590b:	50                   	push   eax
c001590c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0015910:	57                   	push   edi
c0015911:	56                   	push   esi
c0015912:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0015919:	e8 1f fb ff ff       	call   c001543d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001591e:	03 7c 24 34          	add    edi,DWORD PTR [esp+0x34]
c0015922:	83 c4 20             	add    esp,0x20
c0015925:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0015929:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001592d:	0f 43 7c 24 08       	cmovae edi,DWORD PTR [esp+0x8]
c0015932:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0015936:	41                   	inc    ecx
c0015937:	e9 6a ff ff ff       	jmp    c00158a6 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1de>
c001593c:	8b 4c 24 70          	mov    ecx,DWORD PTR [esp+0x70]
c0015940:	83 ec 0c             	sub    esp,0xc
c0015943:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015947:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001594b:	8b 91 b2 05 00 00    	mov    edx,DWORD PTR [ecx+0x5b2]
c0015951:	25 00 f0 ff ff       	and    eax,0xfffff000
c0015956:	89 b9 ae 05 00 00    	mov    DWORD PTR [ecx+0x5ae],edi
c001595c:	05 00 10 00 00       	add    eax,0x1000
c0015961:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0015964:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015968:	e8 1f a2 ff ff       	call   c000fb8c <free>
c001596d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015970:	e8 17 a2 ff ff       	call   c000fb8c <free>
c0015975:	58                   	pop    eax
c0015976:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001597a:	e8 0d a2 ff ff       	call   c000fb8c <free>
c001597f:	89 34 24             	mov    DWORD PTR [esp],esi
c0015982:	e8 7d 28 ff ff       	call   c0008204 <File::close()>
c0015987:	83 c4 10             	add    esp,0x10
c001598a:	b0 01                	mov    al,0x1
c001598c:	83 c4 5c             	add    esp,0x5c
c001598f:	5b                   	pop    ebx
c0015990:	5e                   	pop    esi
c0015991:	5f                   	pop    edi
c0015992:	5d                   	pop    ebp
c0015993:	c3                   	ret    

c0015994 <Thr::runtimeReferenceHelper()>:
c0015994:	83 ec 18             	sub    esp,0x18
c0015997:	68 52 50 02 c0       	push   0xc0025052
c001599c:	e8 c5 15 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00159a1:	fa                   	cli    
c00159a2:	83 c4 10             	add    esp,0x10
c00159a5:	eb fe                	jmp    c00159a5 <Thr::runtimeReferenceHelper()+0x11>

c00159a7 <Thr::getAddressOfKernelSymbol(char const*)>:
c00159a7:	57                   	push   edi
c00159a8:	56                   	push   esi
c00159a9:	53                   	push   ebx
c00159aa:	31 db                	xor    ebx,ebx
c00159ac:	39 1d 20 fa 02 c0    	cmp    DWORD PTR ds:0xc002fa20,ebx
c00159b2:	7e 3c                	jle    c00159f0 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c00159b4:	8b 34 9d a0 f9 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd0660]
c00159bb:	31 ff                	xor    edi,edi
c00159bd:	39 3c 9d a0 f8 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd0760],edi
c00159c4:	7e 27                	jle    c00159ed <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c00159c6:	50                   	push   eax
c00159c7:	50                   	push   eax
c00159c8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00159cc:	8b 06                	mov    eax,DWORD PTR [esi]
c00159ce:	03 04 9d 20 f9 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd06e0]
c00159d5:	50                   	push   eax
c00159d6:	e8 a5 ad fe ff       	call   c0000780 <strcmp>
c00159db:	83 c4 10             	add    esp,0x10
c00159de:	85 c0                	test   eax,eax
c00159e0:	75 05                	jne    c00159e7 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c00159e2:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00159e5:	eb 0b                	jmp    c00159f2 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c00159e7:	83 c6 10             	add    esi,0x10
c00159ea:	47                   	inc    edi
c00159eb:	eb d0                	jmp    c00159bd <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c00159ed:	43                   	inc    ebx
c00159ee:	eb bc                	jmp    c00159ac <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c00159f0:	31 c0                	xor    eax,eax
c00159f2:	5b                   	pop    ebx
c00159f3:	5e                   	pop    esi
c00159f4:	5f                   	pop    edi
c00159f5:	c3                   	ret    

c00159f6 <Thr::loadKernelSymbolTable(char const*)>:
c00159f6:	55                   	push   ebp
c00159f7:	57                   	push   edi
c00159f8:	56                   	push   esi
c00159f9:	53                   	push   ebx
c00159fa:	83 ec 68             	sub    esp,0x68
c00159fd:	68 14 01 00 00       	push   0x114
c0015a02:	8b 35 78 fa 02 c0    	mov    esi,DWORD PTR ds:0xc002fa78
c0015a08:	e8 6f a1 ff ff       	call   c000fb7c <malloc>
c0015a0d:	83 c4 0c             	add    esp,0xc
c0015a10:	56                   	push   esi
c0015a11:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0015a15:	89 c3                	mov    ebx,eax
c0015a17:	50                   	push   eax
c0015a18:	e8 6b 27 ff ff       	call   c0008188 <File::File(char const*, Process*)>
c0015a1d:	5e                   	pop    esi
c0015a1e:	5f                   	pop    edi
c0015a1f:	6a 01                	push   0x1
c0015a21:	53                   	push   ebx
c0015a22:	e8 7f 27 ff ff       	call   c00081a6 <File::open(FileOpenMode)>
c0015a27:	83 c4 10             	add    esp,0x10
c0015a2a:	85 c0                	test   eax,eax
c0015a2c:	74 0a                	je     c0015a38 <Thr::loadKernelSymbolTable(char const*)+0x42>
c0015a2e:	83 ec 0c             	sub    esp,0xc
c0015a31:	68 74 50 02 c0       	push   0xc0025074
c0015a36:	eb 34                	jmp    c0015a6c <Thr::loadKernelSymbolTable(char const*)+0x76>
c0015a38:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0015a40:	83 ec 0c             	sub    esp,0xc
c0015a43:	6a 34                	push   0x34
c0015a45:	e8 32 a1 ff ff       	call   c000fb7c <malloc>
c0015a4a:	59                   	pop    ecx
c0015a4b:	8d 74 24 34          	lea    esi,[esp+0x34]
c0015a4f:	89 c7                	mov    edi,eax
c0015a51:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015a53:	56                   	push   esi
c0015a54:	57                   	push   edi
c0015a55:	6a 00                	push   0x0
c0015a57:	6a 34                	push   0x34
c0015a59:	53                   	push   ebx
c0015a5a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015a5d:	83 c4 20             	add    esp,0x20
c0015a60:	85 c0                	test   eax,eax
c0015a62:	74 17                	je     c0015a7b <Thr::loadKernelSymbolTable(char const*)+0x85>
c0015a64:	83 ec 0c             	sub    esp,0xc
c0015a67:	68 8b 50 02 c0       	push   0xc002508b
c0015a6c:	e8 19 a4 ff ff       	call   c000fe8a <KePanic(char const*)>
c0015a71:	83 c4 10             	add    esp,0x10
c0015a74:	31 c0                	xor    eax,eax
c0015a76:	e9 31 02 00 00       	jmp    c0015cac <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0015a7b:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0015a81:	75 e1                	jne    c0015a64 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0015a83:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0015a86:	85 c0                	test   eax,eax
c0015a88:	74 da                	je     c0015a64 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0015a8a:	52                   	push   edx
c0015a8b:	31 d2                	xor    edx,edx
c0015a8d:	52                   	push   edx
c0015a8e:	50                   	push   eax
c0015a8f:	53                   	push   ebx
c0015a90:	e8 cf 27 ff ff       	call   c0008264 <File::seek(unsigned long long)>
c0015a95:	83 c4 10             	add    esp,0x10
c0015a98:	85 c0                	test   eax,eax
c0015a9a:	75 c8                	jne    c0015a64 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0015a9c:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0015aa0:	83 ec 0c             	sub    esp,0xc
c0015aa3:	31 ed                	xor    ebp,ebp
c0015aa5:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0015aa9:	0f af c2             	imul   eax,edx
c0015aac:	50                   	push   eax
c0015aad:	e8 ca a0 ff ff       	call   c000fb7c <malloc>
c0015ab2:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0015ab4:	89 34 24             	mov    DWORD PTR [esp],esi
c0015ab7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0015abb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015abf:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0015ac3:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0015ac7:	0f af c2             	imul   eax,edx
c0015aca:	99                   	cdq    
c0015acb:	52                   	push   edx
c0015acc:	50                   	push   eax
c0015acd:	53                   	push   ebx
c0015ace:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015ad1:	83 c4 20             	add    esp,0x20
c0015ad4:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0015adc:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0015ae4:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0015aec:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0015af4:	66 3b 6f 30          	cmp    bp,WORD PTR [edi+0x30]
c0015af8:	0f b7 f5             	movzx  esi,bp
c0015afb:	0f 83 a7 00 00 00    	jae    c0015ba8 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c0015b01:	6b f6 28             	imul   esi,esi,0x28
c0015b04:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0015b08:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0015b0b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0015b0f:	50                   	push   eax
c0015b10:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0015b14:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015b18:	8b 16                	mov    edx,DWORD PTR [esi]
c0015b1a:	6b c0 28             	imul   eax,eax,0x28
c0015b1d:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0015b21:	89 d0                	mov    eax,edx
c0015b23:	31 d2                	xor    edx,edx
c0015b25:	52                   	push   edx
c0015b26:	50                   	push   eax
c0015b27:	53                   	push   ebx
c0015b28:	e8 37 27 ff ff       	call   c0008264 <File::seek(unsigned long long)>
c0015b2d:	83 c4 0c             	add    esp,0xc
c0015b30:	6a 20                	push   0x20
c0015b32:	6a 00                	push   0x0
c0015b34:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0015b38:	52                   	push   edx
c0015b39:	e8 b2 a9 fe ff       	call   c00004f0 <memset>
c0015b3e:	58                   	pop    eax
c0015b3f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015b41:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0015b45:	51                   	push   ecx
c0015b46:	8d 54 24 40          	lea    edx,[esp+0x40]
c0015b4a:	52                   	push   edx
c0015b4b:	6a 00                	push   0x0
c0015b4d:	6a 1f                	push   0x1f
c0015b4f:	53                   	push   ebx
c0015b50:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015b53:	83 c4 18             	add    esp,0x18
c0015b56:	68 a2 50 02 c0       	push   0xc00250a2
c0015b5b:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0015b5f:	52                   	push   edx
c0015b60:	e8 1b ac fe ff       	call   c0000780 <strcmp>
c0015b65:	83 c4 10             	add    esp,0x10
c0015b68:	85 c0                	test   eax,eax
c0015b6a:	75 0f                	jne    c0015b7b <Thr::loadKernelSymbolTable(char const*)+0x185>
c0015b6c:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0015b6f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015b73:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015b77:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015b7b:	50                   	push   eax
c0015b7c:	50                   	push   eax
c0015b7d:	68 aa 50 02 c0       	push   0xc00250aa
c0015b82:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0015b86:	50                   	push   eax
c0015b87:	e8 f4 ab fe ff       	call   c0000780 <strcmp>
c0015b8c:	83 c4 10             	add    esp,0x10
c0015b8f:	85 c0                	test   eax,eax
c0015b91:	75 0f                	jne    c0015ba2 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0015b93:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0015b96:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0015b9a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015b9e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015ba2:	45                   	inc    ebp
c0015ba3:	e9 4c ff ff ff       	jmp    c0015af4 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0015ba8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0015bad:	75 10                	jne    c0015bbf <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c0015baf:	83 ec 0c             	sub    esp,0xc
c0015bb2:	68 b2 50 02 c0       	push   0xc00250b2
c0015bb7:	e8 ce a2 ff ff       	call   c000fe8a <KePanic(char const*)>
c0015bbc:	83 c4 10             	add    esp,0x10
c0015bbf:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0015bc4:	75 10                	jne    c0015bd6 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c0015bc6:	83 ec 0c             	sub    esp,0xc
c0015bc9:	68 b2 50 02 c0       	push   0xc00250b2
c0015bce:	e8 b7 a2 ff ff       	call   c000fe8a <KePanic(char const*)>
c0015bd3:	83 c4 10             	add    esp,0x10
c0015bd6:	50                   	push   eax
c0015bd7:	31 d2                	xor    edx,edx
c0015bd9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015bdd:	52                   	push   edx
c0015bde:	50                   	push   eax
c0015bdf:	53                   	push   ebx
c0015be0:	e8 7f 26 ff ff       	call   c0008264 <File::seek(unsigned long long)>
c0015be5:	5a                   	pop    edx
c0015be6:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015bea:	e8 8d 9f ff ff       	call   c000fb7c <malloc>
c0015bef:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0015bf3:	31 c9                	xor    ecx,ecx
c0015bf5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0015bf9:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015bfb:	5e                   	pop    esi
c0015bfc:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0015c00:	55                   	push   ebp
c0015c01:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015c05:	51                   	push   ecx
c0015c06:	52                   	push   edx
c0015c07:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0015c0b:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0015c0f:	53                   	push   ebx
c0015c10:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015c13:	83 c4 14             	add    esp,0x14
c0015c16:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0015c1a:	e8 5d 9f ff ff       	call   c000fb7c <malloc>
c0015c1f:	89 c6                	mov    esi,eax
c0015c21:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015c23:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0015c26:	56                   	push   esi
c0015c27:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0015c2b:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0015c2f:	51                   	push   ecx
c0015c30:	52                   	push   edx
c0015c31:	53                   	push   ebx
c0015c32:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015c35:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0015c39:	83 c4 1c             	add    esp,0x1c
c0015c3c:	8b 15 20 fa 02 c0    	mov    edx,DWORD PTR ds:0xc002fa20
c0015c42:	c1 e8 04             	shr    eax,0x4
c0015c45:	89 04 95 a0 f8 02 c0 	mov    DWORD PTR [edx*4-0x3ffd0760],eax
c0015c4c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015c50:	31 d2                	xor    edx,edx
c0015c52:	52                   	push   edx
c0015c53:	50                   	push   eax
c0015c54:	53                   	push   ebx
c0015c55:	e8 0a 26 ff ff       	call   c0008264 <File::seek(unsigned long long)>
c0015c5a:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0015c5c:	31 d2                	xor    edx,edx
c0015c5e:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0015c61:	56                   	push   esi
c0015c62:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015c66:	52                   	push   edx
c0015c67:	50                   	push   eax
c0015c68:	53                   	push   ebx
c0015c69:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015c6c:	83 c4 14             	add    esp,0x14
c0015c6f:	53                   	push   ebx
c0015c70:	e8 8f 25 ff ff       	call   c0008204 <File::close()>
c0015c75:	5d                   	pop    ebp
c0015c76:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015c7a:	e8 0d 9f ff ff       	call   c000fb8c <free>
c0015c7f:	89 3c 24             	mov    DWORD PTR [esp],edi
c0015c82:	e8 05 9f ff ff       	call   c000fb8c <free>
c0015c87:	a1 20 fa 02 c0       	mov    eax,ds:0xc002fa20
c0015c8c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0015c90:	83 c4 10             	add    esp,0x10
c0015c93:	89 34 85 20 f9 02 c0 	mov    DWORD PTR [eax*4-0x3ffd06e0],esi
c0015c9a:	8d 50 01             	lea    edx,[eax+0x1]
c0015c9d:	89 0c 85 a0 f9 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0660],ecx
c0015ca4:	b0 01                	mov    al,0x1
c0015ca6:	89 15 20 fa 02 c0    	mov    DWORD PTR ds:0xc002fa20,edx
c0015cac:	83 c4 5c             	add    esp,0x5c
c0015caf:	5b                   	pop    ebx
c0015cb0:	5e                   	pop    esi
c0015cb1:	5f                   	pop    edi
c0015cb2:	5d                   	pop    ebp
c0015cb3:	c3                   	ret    

c0015cb4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0015cb4:	55                   	push   ebp
c0015cb5:	57                   	push   edi
c0015cb6:	56                   	push   esi
c0015cb7:	53                   	push   ebx
c0015cb8:	81 ec 78 03 00 00    	sub    esp,0x378
c0015cbe:	8a 84 24 94 03 00 00 	mov    al,BYTE PTR [esp+0x394]
c0015cc5:	8b 35 78 fa 02 c0    	mov    esi,DWORD PTR ds:0xc002fa78
c0015ccb:	88 44 24 57          	mov    BYTE PTR [esp+0x57],al
c0015ccf:	68 14 01 00 00       	push   0x114
c0015cd4:	e8 a3 9e ff ff       	call   c000fb7c <malloc>
c0015cd9:	83 c4 0c             	add    esp,0xc
c0015cdc:	56                   	push   esi
c0015cdd:	ff b4 24 88 03 00 00 	push   DWORD PTR [esp+0x388]
c0015ce4:	50                   	push   eax
c0015ce5:	89 c3                	mov    ebx,eax
c0015ce7:	e8 9c 24 ff ff       	call   c0008188 <File::File(char const*, Process*)>
c0015cec:	5f                   	pop    edi
c0015ced:	5d                   	pop    ebp
c0015cee:	6a 01                	push   0x1
c0015cf0:	53                   	push   ebx
c0015cf1:	e8 b0 24 ff ff       	call   c00081a6 <File::open(FileOpenMode)>
c0015cf6:	83 c4 10             	add    esp,0x10
c0015cf9:	85 c0                	test   eax,eax
c0015cfb:	0f 85 67 07 00 00    	jne    c0016468 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x7b4>
c0015d01:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0015d09:	83 ec 0c             	sub    esp,0xc
c0015d0c:	6a 34                	push   0x34
c0015d0e:	e8 69 9e ff ff       	call   c000fb7c <malloc>
c0015d13:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0015d17:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015d19:	5e                   	pop    esi
c0015d1a:	8d 74 24 64          	lea    esi,[esp+0x64]
c0015d1e:	56                   	push   esi
c0015d1f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015d23:	6a 00                	push   0x0
c0015d25:	6a 34                	push   0x34
c0015d27:	53                   	push   ebx
c0015d28:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015d2b:	83 c4 20             	add    esp,0x20
c0015d2e:	85 c0                	test   eax,eax
c0015d30:	0f 85 32 07 00 00    	jne    c0016468 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x7b4>
c0015d36:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015d3a:	81 38 7f 45 4c 46    	cmp    DWORD PTR [eax],0x464c457f
c0015d40:	0f 85 22 07 00 00    	jne    c0016468 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x7b4>
c0015d46:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015d49:	85 c0                	test   eax,eax
c0015d4b:	0f 84 17 07 00 00    	je     c0016468 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x7b4>
c0015d51:	31 d2                	xor    edx,edx
c0015d53:	51                   	push   ecx
c0015d54:	52                   	push   edx
c0015d55:	50                   	push   eax
c0015d56:	53                   	push   ebx
c0015d57:	e8 08 25 ff ff       	call   c0008264 <File::seek(unsigned long long)>
c0015d5c:	83 c4 10             	add    esp,0x10
c0015d5f:	85 c0                	test   eax,eax
c0015d61:	0f 85 01 07 00 00    	jne    c0016468 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x7b4>
c0015d67:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015d6b:	83 ec 0c             	sub    esp,0xc
c0015d6e:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0015d71:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0015d75:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0015d79:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015d7d:	0f b7 51 2e          	movzx  edx,WORD PTR [ecx+0x2e]
c0015d81:	0f b7 40 30          	movzx  eax,WORD PTR [eax+0x30]
c0015d85:	0f af c2             	imul   eax,edx
c0015d88:	50                   	push   eax
c0015d89:	e8 ee 9d ff ff       	call   c000fb7c <malloc>
c0015d8e:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0015d90:	89 34 24             	mov    DWORD PTR [esp],esi
c0015d93:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0015d97:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0015d9b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015d9f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015da3:	0f b7 40 30          	movzx  eax,WORD PTR [eax+0x30]
c0015da7:	0f b7 52 2e          	movzx  edx,WORD PTR [edx+0x2e]
c0015dab:	0f af c2             	imul   eax,edx
c0015dae:	99                   	cdq    
c0015daf:	52                   	push   edx
c0015db0:	50                   	push   eax
c0015db1:	53                   	push   ebx
c0015db2:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015db5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015db9:	83 c4 20             	add    esp,0x20
c0015dbc:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0015dbf:	85 c0                	test   eax,eax
c0015dc1:	0f 84 a1 06 00 00    	je     c0016468 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x7b4>
c0015dc7:	52                   	push   edx
c0015dc8:	31 d2                	xor    edx,edx
c0015dca:	52                   	push   edx
c0015dcb:	50                   	push   eax
c0015dcc:	53                   	push   ebx
c0015dcd:	e8 92 24 ff ff       	call   c0008264 <File::seek(unsigned long long)>
c0015dd2:	83 c4 10             	add    esp,0x10
c0015dd5:	85 c0                	test   eax,eax
c0015dd7:	0f 85 8b 06 00 00    	jne    c0016468 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x7b4>
c0015ddd:	83 ec 0c             	sub    esp,0xc
c0015de0:	31 ed                	xor    ebp,ebp
c0015de2:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0015de6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015dea:	0f b7 51 2a          	movzx  edx,WORD PTR [ecx+0x2a]
c0015dee:	0f b7 40 2c          	movzx  eax,WORD PTR [eax+0x2c]
c0015df2:	0f af c2             	imul   eax,edx
c0015df5:	50                   	push   eax
c0015df6:	e8 81 9d ff ff       	call   c000fb7c <malloc>
c0015dfb:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0015dfd:	89 34 24             	mov    DWORD PTR [esp],esi
c0015e00:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0015e04:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0015e08:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015e0c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015e10:	0f b7 40 2c          	movzx  eax,WORD PTR [eax+0x2c]
c0015e14:	0f b7 52 2a          	movzx  edx,WORD PTR [edx+0x2a]
c0015e18:	0f af c2             	imul   eax,edx
c0015e1b:	99                   	cdq    
c0015e1c:	52                   	push   edx
c0015e1d:	50                   	push   eax
c0015e1e:	53                   	push   ebx
c0015e1f:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015e22:	83 c4 20             	add    esp,0x20
c0015e25:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015e29:	0f b7 fd             	movzx  edi,bp
c0015e2c:	66 3b 68 2c          	cmp    bp,WORD PTR [eax+0x2c]
c0015e30:	73 72                	jae    c0015ea4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1f0>
c0015e32:	c1 e7 05             	shl    edi,0x5
c0015e35:	03 7c 24 20          	add    edi,DWORD PTR [esp+0x20]
c0015e39:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0015e3c:	75 63                	jne    c0015ea1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1ed>
c0015e3e:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0015e41:	31 d2                	xor    edx,edx
c0015e43:	8b 77 08             	mov    esi,DWORD PTR [edi+0x8]
c0015e46:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015e4a:	50                   	push   eax
c0015e4b:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0015e4e:	52                   	push   edx
c0015e4f:	50                   	push   eax
c0015e50:	53                   	push   ebx
c0015e51:	e8 0e 24 ff ff       	call   c0008264 <File::seek(unsigned long long)>
c0015e56:	83 c4 10             	add    esp,0x10
c0015e59:	85 c0                	test   eax,eax
c0015e5b:	0f 85 07 06 00 00    	jne    c0016468 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x7b4>
c0015e61:	8b 84 24 84 03 00 00 	mov    eax,DWORD PTR [esp+0x384]
c0015e68:	83 ec 0c             	sub    esp,0xc
c0015e6b:	31 d2                	xor    edx,edx
c0015e6d:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0015e71:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0015e73:	01 c6                	add    esi,eax
c0015e75:	8d 84 24 6c 02 00 00 	lea    eax,[esp+0x26c]
c0015e7c:	50                   	push   eax
c0015e7d:	56                   	push   esi
c0015e7e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0015e82:	52                   	push   edx
c0015e83:	50                   	push   eax
c0015e84:	53                   	push   ebx
c0015e85:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015e88:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0015e8b:	83 c4 1c             	add    esp,0x1c
c0015e8e:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c0015e91:	50                   	push   eax
c0015e92:	6a 00                	push   0x0
c0015e94:	03 74 24 1c          	add    esi,DWORD PTR [esp+0x1c]
c0015e98:	56                   	push   esi
c0015e99:	e8 52 a6 fe ff       	call   c00004f0 <memset>
c0015e9e:	83 c4 10             	add    esp,0x10
c0015ea1:	45                   	inc    ebp
c0015ea2:	eb 81                	jmp    c0015e25 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x171>
c0015ea4:	51                   	push   ecx
c0015ea5:	68 00 01 00 00       	push   0x100
c0015eaa:	6a 00                	push   0x0
c0015eac:	8d 44 24 6c          	lea    eax,[esp+0x6c]
c0015eb0:	50                   	push   eax
c0015eb1:	e8 3a a6 fe ff       	call   c00004f0 <memset>
c0015eb6:	83 c4 0c             	add    esp,0xc
c0015eb9:	68 00 01 00 00       	push   0x100
c0015ebe:	6a 00                	push   0x0
c0015ec0:	8d 84 24 6c 01 00 00 	lea    eax,[esp+0x16c]
c0015ec7:	50                   	push   eax
c0015ec8:	e8 23 a6 fe ff       	call   c00004f0 <memset>
c0015ecd:	83 c4 10             	add    esp,0x10
c0015ed0:	66 c7 44 24 28 00 00 	mov    WORD PTR [esp+0x28],0x0
c0015ed7:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0015edf:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0015ee7:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c0015eef:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0015ef7:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0015eff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015f03:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0015f07:	0f b7 7c 24 28       	movzx  edi,WORD PTR [esp+0x28]
c0015f0c:	66 3b 48 30          	cmp    cx,WORD PTR [eax+0x30]
c0015f10:	0f 83 12 01 00 00    	jae    c0016028 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x374>
c0015f16:	6b ff 28             	imul   edi,edi,0x28
c0015f19:	03 7c 24 14          	add    edi,DWORD PTR [esp+0x14]
c0015f1d:	8b 77 10             	mov    esi,DWORD PTR [edi+0x10]
c0015f20:	50                   	push   eax
c0015f21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015f25:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0015f29:	0f b7 50 32          	movzx  edx,WORD PTR [eax+0x32]
c0015f2d:	8b 07                	mov    eax,DWORD PTR [edi]
c0015f2f:	6b d2 28             	imul   edx,edx,0x28
c0015f32:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0015f36:	31 d2                	xor    edx,edx
c0015f38:	52                   	push   edx
c0015f39:	50                   	push   eax
c0015f3a:	53                   	push   ebx
c0015f3b:	e8 24 23 ff ff       	call   c0008264 <File::seek(unsigned long long)>
c0015f40:	83 c4 0c             	add    esp,0xc
c0015f43:	6a 20                	push   0x20
c0015f45:	6a 00                	push   0x0
c0015f47:	8d ac 24 6c 02 00 00 	lea    ebp,[esp+0x26c]
c0015f4e:	55                   	push   ebp
c0015f4f:	e8 9c a5 fe ff       	call   c00004f0 <memset>
c0015f54:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015f56:	5a                   	pop    edx
c0015f57:	8d 54 24 68          	lea    edx,[esp+0x68]
c0015f5b:	52                   	push   edx
c0015f5c:	55                   	push   ebp
c0015f5d:	6a 00                	push   0x0
c0015f5f:	6a 1f                	push   0x1f
c0015f61:	53                   	push   ebx
c0015f62:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015f65:	83 c4 1c             	add    esp,0x1c
c0015f68:	6a 09                	push   0x9
c0015f6a:	68 cc 50 02 c0       	push   0xc00250cc
c0015f6f:	55                   	push   ebp
c0015f70:	e8 0b a4 fe ff       	call   c0000380 <memcmp>
c0015f75:	83 c4 10             	add    esp,0x10
c0015f78:	85 c0                	test   eax,eax
c0015f7a:	75 1d                	jne    c0015f99 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2e5>
c0015f7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015f80:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015f84:	89 74 84 60          	mov    DWORD PTR [esp+eax*4+0x60],esi
c0015f88:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0015f8b:	89 84 8c 60 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x160],eax
c0015f92:	89 c8                	mov    eax,ecx
c0015f94:	40                   	inc    eax
c0015f95:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015f99:	50                   	push   eax
c0015f9a:	6a 09                	push   0x9
c0015f9c:	68 d6 50 02 c0       	push   0xc00250d6
c0015fa1:	8d 84 24 6c 02 00 00 	lea    eax,[esp+0x26c]
c0015fa8:	50                   	push   eax
c0015fa9:	e8 d2 a3 fe ff       	call   c0000380 <memcmp>
c0015fae:	83 c4 10             	add    esp,0x10
c0015fb1:	85 c0                	test   eax,eax
c0015fb3:	75 1d                	jne    c0015fd2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x31e>
c0015fb5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015fb9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015fbd:	89 74 84 60          	mov    DWORD PTR [esp+eax*4+0x60],esi
c0015fc1:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0015fc4:	89 84 8c 60 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x160],eax
c0015fcb:	89 c8                	mov    eax,ecx
c0015fcd:	40                   	inc    eax
c0015fce:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015fd2:	50                   	push   eax
c0015fd3:	50                   	push   eax
c0015fd4:	68 a2 50 02 c0       	push   0xc00250a2
c0015fd9:	8d 84 24 6c 02 00 00 	lea    eax,[esp+0x26c]
c0015fe0:	50                   	push   eax
c0015fe1:	e8 9a a7 fe ff       	call   c0000780 <strcmp>
c0015fe6:	83 c4 10             	add    esp,0x10
c0015fe9:	85 c0                	test   eax,eax
c0015feb:	75 0b                	jne    c0015ff8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x344>
c0015fed:	89 74 24 2c          	mov    DWORD PTR [esp+0x2c],esi
c0015ff1:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0015ff4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0015ff8:	50                   	push   eax
c0015ff9:	50                   	push   eax
c0015ffa:	68 aa 50 02 c0       	push   0xc00250aa
c0015fff:	8d 84 24 6c 02 00 00 	lea    eax,[esp+0x26c]
c0016006:	50                   	push   eax
c0016007:	e8 74 a7 fe ff       	call   c0000780 <strcmp>
c001600c:	83 c4 10             	add    esp,0x10
c001600f:	85 c0                	test   eax,eax
c0016011:	75 0b                	jne    c001601e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x36a>
c0016013:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0016017:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001601a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001601e:	66 ff 44 24 28       	inc    WORD PTR [esp+0x28]
c0016023:	e9 d7 fe ff ff       	jmp    c0015eff <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x24b>
c0016028:	55                   	push   ebp
c0016029:	31 d2                	xor    edx,edx
c001602b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001602f:	52                   	push   edx
c0016030:	50                   	push   eax
c0016031:	53                   	push   ebx
c0016032:	e8 2d 22 ff ff       	call   c0008264 <File::seek(unsigned long long)>
c0016037:	58                   	pop    eax
c0016038:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001603c:	e8 3b 9b ff ff       	call   c000fb7c <malloc>
c0016041:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0016043:	31 d2                	xor    edx,edx
c0016045:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0016049:	58                   	pop    eax
c001604a:	8d 74 24 64          	lea    esi,[esp+0x64]
c001604e:	56                   	push   esi
c001604f:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0016053:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016057:	52                   	push   edx
c0016058:	50                   	push   eax
c0016059:	53                   	push   ebx
c001605a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001605d:	83 c4 14             	add    esp,0x14
c0016060:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016064:	e8 13 9b ff ff       	call   c000fb7c <malloc>
c0016069:	31 d2                	xor    edx,edx
c001606b:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c001606f:	83 c4 0c             	add    esp,0xc
c0016072:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016076:	52                   	push   edx
c0016077:	50                   	push   eax
c0016078:	53                   	push   ebx
c0016079:	e8 e6 21 ff ff       	call   c0008264 <File::seek(unsigned long long)>
c001607e:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0016080:	31 d2                	xor    edx,edx
c0016082:	89 34 24             	mov    DWORD PTR [esp],esi
c0016085:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0016089:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001608d:	52                   	push   edx
c001608e:	50                   	push   eax
c001608f:	53                   	push   ebx
c0016090:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016093:	83 c4 20             	add    esp,0x20
c0016096:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c001609b:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00160a3:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00160a7:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00160ab:	39 4c 24 10          	cmp    DWORD PTR [esp+0x10],ecx
c00160af:	0f 84 b7 03 00 00    	je     c001646c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x7b8>
c00160b5:	8b 84 8c 60 01 00 00 	mov    eax,DWORD PTR [esp+ecx*4+0x160]
c00160bc:	31 d2                	xor    edx,edx
c00160be:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00160c2:	c1 e8 03             	shr    eax,0x3
c00160c5:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00160c9:	51                   	push   ecx
c00160ca:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00160ce:	8b 44 84 64          	mov    eax,DWORD PTR [esp+eax*4+0x64]
c00160d2:	52                   	push   edx
c00160d3:	50                   	push   eax
c00160d4:	53                   	push   ebx
c00160d5:	e8 8a 21 ff ff       	call   c0008264 <File::seek(unsigned long long)>
c00160da:	5e                   	pop    esi
c00160db:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00160df:	ff b4 84 6c 01 00 00 	push   DWORD PTR [esp+eax*4+0x16c]
c00160e6:	e8 91 9a ff ff       	call   c000fb7c <malloc>
c00160eb:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00160ed:	31 d2                	xor    edx,edx
c00160ef:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00160f3:	5f                   	pop    edi
c00160f4:	8d 44 24 68          	lea    eax,[esp+0x68]
c00160f8:	50                   	push   eax
c00160f9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00160fd:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016101:	8b 84 84 74 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x174]
c0016108:	52                   	push   edx
c0016109:	50                   	push   eax
c001610a:	53                   	push   ebx
c001610b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001610e:	83 c4 20             	add    esp,0x20
c0016111:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0016119:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c001611d:	39 4c 24 2c          	cmp    DWORD PTR [esp+0x2c],ecx
c0016121:	0f 8d 29 03 00 00    	jge    c0016450 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x79c>
c0016127:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001612b:	83 ec 0c             	sub    esp,0xc
c001612e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016132:	8b 04 d0             	mov    eax,DWORD PTR [eax+edx*8]
c0016135:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0016139:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001613d:	8b 6c d0 04          	mov    ebp,DWORD PTR [eax+edx*8+0x4]
c0016141:	89 e8                	mov    eax,ebp
c0016143:	c1 e8 08             	shr    eax,0x8
c0016146:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c001614a:	89 c7                	mov    edi,eax
c001614c:	c1 e7 04             	shl    edi,0x4
c001614f:	03 7c 24 50          	add    edi,DWORD PTR [esp+0x50]
c0016153:	89 7c 24 48          	mov    DWORD PTR [esp+0x48],edi
c0016157:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c001615a:	89 f8                	mov    eax,edi
c001615c:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0016160:	03 38                	add    edi,DWORD PTR [eax]
c0016162:	55                   	push   ebp
c0016163:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0016167:	56                   	push   esi
c0016168:	57                   	push   edi
c0016169:	68 e0 50 02 c0       	push   0xc00250e0
c001616e:	e8 f3 0d ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0016173:	83 c4 20             	add    esp,0x20
c0016176:	85 f6                	test   esi,esi
c0016178:	c6 44 24 30 00       	mov    BYTE PTR [esp+0x30],0x0
c001617d:	0f 85 8c 00 00 00    	jne    c001620f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x55b>
c0016183:	83 ec 0c             	sub    esp,0xc
c0016186:	57                   	push   edi
c0016187:	e8 1b f8 ff ff       	call   c00159a7 <Thr::getAddressOfKernelSymbol(char const*)>
c001618c:	83 c4 10             	add    esp,0x10
c001618f:	c6 44 24 30 01       	mov    BYTE PTR [esp+0x30],0x1
c0016194:	85 c0                	test   eax,eax
c0016196:	89 c6                	mov    esi,eax
c0016198:	75 75                	jne    c001620f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x55b>
c001619a:	83 ec 0c             	sub    esp,0xc
c001619d:	57                   	push   edi
c001619e:	e8 71 a7 ff ff       	call   c0010914 <KeResolveCompatibilitySymbol(char*)>
c00161a3:	83 c4 10             	add    esp,0x10
c00161a6:	85 c0                	test   eax,eax
c00161a8:	89 c6                	mov    esi,eax
c00161aa:	75 63                	jne    c001620f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x55b>
c00161ac:	50                   	push   eax
c00161ad:	50                   	push   eax
c00161ae:	57                   	push   edi
c00161af:	68 13 51 02 c0       	push   0xc0025113
c00161b4:	e8 ad 0d ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00161b9:	58                   	pop    eax
c00161ba:	5a                   	pop    edx
c00161bb:	68 2d 51 02 c0       	push   0xc002512d
c00161c0:	8d bc 24 6c 02 00 00 	lea    edi,[esp+0x26c]
c00161c7:	57                   	push   edi
c00161c8:	e8 83 a4 fe ff       	call   c0000650 <strcpy>
c00161cd:	59                   	pop    ecx
c00161ce:	58                   	pop    eax
c00161cf:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c00161d3:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00161d7:	03 01                	add    eax,DWORD PTR [ecx]
c00161d9:	50                   	push   eax
c00161da:	57                   	push   edi
c00161db:	e8 90 a6 fe ff       	call   c0000870 <strcat>
c00161e0:	58                   	pop    eax
c00161e1:	5a                   	pop    edx
c00161e2:	68 cf 52 02 c0       	push   0xc00252cf
c00161e7:	57                   	push   edi
c00161e8:	e8 83 a6 fe ff       	call   c0000870 <strcat>
c00161ed:	83 c4 10             	add    esp,0x10
c00161f0:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00161f5:	0f 84 0e 02 00 00    	je     c0016409 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x755>
c00161fb:	83 ec 0c             	sub    esp,0xc
c00161fe:	57                   	push   edi
c00161ff:	e8 86 9c ff ff       	call   c000fe8a <KePanic(char const*)>
c0016204:	83 c4 10             	add    esp,0x10
c0016207:	8a 44 24 4b          	mov    al,BYTE PTR [esp+0x4b]
c001620b:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c001620f:	89 e8                	mov    eax,ebp
c0016211:	0f b6 c0             	movzx  eax,al
c0016214:	83 f8 01             	cmp    eax,0x1
c0016217:	0f 85 e2 00 00 00    	jne    c00162ff <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x64b>
c001621d:	8b 94 24 84 03 00 00 	mov    edx,DWORD PTR [esp+0x384]
c0016224:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0016228:	2b 54 24 1c          	sub    edx,DWORD PTR [esp+0x1c]
c001622c:	01 d7                	add    edi,edx
c001622e:	81 fd 01 01 00 00    	cmp    ebp,0x101
c0016234:	0f 94 c0             	sete   al
c0016237:	81 fd 01 04 00 00    	cmp    ebp,0x401
c001623d:	0f 94 c1             	sete   cl
c0016240:	09 c8                	or     eax,ecx
c0016242:	80 7c 24 30 00       	cmp    BYTE PTR [esp+0x30],0x0
c0016247:	0f b6 c0             	movzx  eax,al
c001624a:	74 56                	je     c00162a2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ee>
c001624c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0016250:	83 ec 0c             	sub    esp,0xc
c0016253:	68 44 51 02 c0       	push   0xc0025144
c0016258:	e8 09 0d ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001625d:	83 c4 10             	add    esp,0x10
c0016260:	8b 2f                	mov    ebp,DWORD PTR [edi]
c0016262:	01 f5                	add    ebp,esi
c0016264:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016268:	85 c0                	test   eax,eax
c001626a:	75 19                	jne    c0016285 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d1>
c001626c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016270:	0f b7 40 30          	movzx  eax,WORD PTR [eax+0x30]
c0016274:	66 83 f8 0c          	cmp    ax,0xc
c0016278:	76 05                	jbe    c001627f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5cb>
c001627a:	b8 0c 00 00 00       	mov    eax,0xc
c001627f:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c0016283:	76 6c                	jbe    c00162f1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x63d>
c0016285:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c001628a:	0f 84 79 01 00 00    	je     c0016409 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x755>
c0016290:	83 ec 0c             	sub    esp,0xc
c0016293:	68 4e 51 02 c0       	push   0xc002514e
c0016298:	e8 ed 9b ff ff       	call   c000fe8a <KePanic(char const*)>
c001629d:	83 c4 10             	add    esp,0x10
c00162a0:	eb 4f                	jmp    c00162f1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x63d>
c00162a2:	8b 2f                	mov    ebp,DWORD PTR [edi]
c00162a4:	01 d5                	add    ebp,edx
c00162a6:	85 c0                	test   eax,eax
c00162a8:	75 0e                	jne    c00162b8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x604>
c00162aa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00162ae:	0f b7 40 30          	movzx  eax,WORD PTR [eax+0x30]
c00162b2:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c00162b6:	76 0e                	jbe    c00162c6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x612>
c00162b8:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00162bc:	83 ec 0c             	sub    esp,0xc
c00162bf:	68 6a 51 02 c0       	push   0xc002516a
c00162c4:	eb 0e                	jmp    c00162d4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x620>
c00162c6:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00162ca:	83 ec 0c             	sub    esp,0xc
c00162cd:	01 f5                	add    ebp,esi
c00162cf:	68 73 51 02 c0       	push   0xc0025173
c00162d4:	e8 8d 0c ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00162d9:	8d 85 00 00 00 28    	lea    eax,[ebp+0x28000000]
c00162df:	83 c4 10             	add    esp,0x10
c00162e2:	3d ff ff ff 00       	cmp    eax,0xffffff
c00162e7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00162eb:	77 04                	ja     c00162f1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x63d>
c00162ed:	03 17                	add    edx,DWORD PTR [edi]
c00162ef:	89 d5                	mov    ebp,edx
c00162f1:	55                   	push   ebp
c00162f2:	57                   	push   edi
c00162f3:	ff 37                	push   DWORD PTR [edi]
c00162f5:	68 7c 51 02 c0       	push   0xc002517c
c00162fa:	e9 bc 00 00 00       	jmp    c00163bb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x707>
c00162ff:	83 f8 02             	cmp    eax,0x2
c0016302:	0f 85 d8 00 00 00    	jne    c00163e0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72c>
c0016308:	8b bc 24 84 03 00 00 	mov    edi,DWORD PTR [esp+0x384]
c001630f:	2b 7c 24 1c          	sub    edi,DWORD PTR [esp+0x1c]
c0016313:	03 7c 24 28          	add    edi,DWORD PTR [esp+0x28]
c0016317:	81 fd 01 01 00 00    	cmp    ebp,0x101
c001631d:	74 23                	je     c0016342 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x68e>
c001631f:	81 fd 01 04 00 00    	cmp    ebp,0x401
c0016325:	74 1b                	je     c0016342 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x68e>
c0016327:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001632b:	0f b7 50 30          	movzx  edx,WORD PTR [eax+0x30]
c001632f:	b8 0a 00 00 00       	mov    eax,0xa
c0016334:	83 fa 0e             	cmp    edx,0xe
c0016337:	77 03                	ja     c001633c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x688>
c0016339:	8d 42 fc             	lea    eax,[edx-0x4]
c001633c:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c0016340:	76 45                	jbe    c0016387 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0016342:	55                   	push   ebp
c0016343:	57                   	push   edi
c0016344:	ff 37                	push   DWORD PTR [edi]
c0016346:	68 ed 51 02 c0       	push   0xc00251ed
c001634b:	e8 16 0c ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0016350:	58                   	pop    eax
c0016351:	ff 37                	push   DWORD PTR [edi]
c0016353:	ff b4 24 94 03 00 00 	push   DWORD PTR [esp+0x394]
c001635a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001635e:	56                   	push   esi
c001635f:	68 b7 51 02 c0       	push   0xc00251b7
c0016364:	e8 fd 0b ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0016369:	83 c4 20             	add    esp,0x20
c001636c:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0016371:	0f 84 92 00 00 00    	je     c0016409 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x755>
c0016377:	83 ec 0c             	sub    esp,0xc
c001637a:	68 2b 52 02 c0       	push   0xc002522b
c001637f:	e8 06 9b ff ff       	call   c000fe8a <KePanic(char const*)>
c0016384:	83 c4 10             	add    esp,0x10
c0016387:	80 7c 24 30 00       	cmp    BYTE PTR [esp+0x30],0x0
c001638c:	8b 07                	mov    eax,DWORD PTR [edi]
c001638e:	74 13                	je     c00163a3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6ef>
c0016390:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0016394:	2b ac 24 84 03 00 00 	sub    ebp,DWORD PTR [esp+0x384]
c001639b:	2b 6c 24 28          	sub    ebp,DWORD PTR [esp+0x28]
c001639f:	01 c5                	add    ebp,eax
c00163a1:	eb 06                	jmp    c00163a9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f5>
c00163a3:	89 c5                	mov    ebp,eax
c00163a5:	2b 6c 24 28          	sub    ebp,DWORD PTR [esp+0x28]
c00163a9:	01 f5                	add    ebp,esi
c00163ab:	3d fe ff 0f 00       	cmp    eax,0xffffe
c00163b0:	0f 46 e8             	cmovbe ebp,eax
c00163b3:	55                   	push   ebp
c00163b4:	57                   	push   edi
c00163b5:	50                   	push   eax
c00163b6:	68 47 52 02 c0       	push   0xc0025247
c00163bb:	e8 a6 0b ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00163c0:	59                   	pop    ecx
c00163c1:	ff 37                	push   DWORD PTR [edi]
c00163c3:	ff b4 24 94 03 00 00 	push   DWORD PTR [esp+0x394]
c00163ca:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00163ce:	56                   	push   esi
c00163cf:	68 b7 51 02 c0       	push   0xc00251b7
c00163d4:	e8 8d 0b ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00163d9:	83 c4 20             	add    esp,0x20
c00163dc:	89 2f                	mov    DWORD PTR [edi],ebp
c00163de:	eb 67                	jmp    c0016447 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x793>
c00163e0:	52                   	push   edx
c00163e1:	52                   	push   edx
c00163e2:	50                   	push   eax
c00163e3:	68 84 52 02 c0       	push   0xc0025284
c00163e8:	e8 79 0b ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00163ed:	83 c4 10             	add    esp,0x10
c00163f0:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00163f5:	74 12                	je     c0016409 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x755>
c00163f7:	83 ec 0c             	sub    esp,0xc
c00163fa:	68 8f 52 02 c0       	push   0xc002528f
c00163ff:	e8 86 9a ff ff       	call   c000fe8a <KePanic(char const*)>
c0016404:	83 c4 10             	add    esp,0x10
c0016407:	eb 3e                	jmp    c0016447 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x793>
c0016409:	83 ec 0c             	sub    esp,0xc
c001640c:	53                   	push   ebx
c001640d:	e8 f2 1d ff ff       	call   c0008204 <File::close()>
c0016412:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016414:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016417:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001641a:	5b                   	pop    ebx
c001641b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001641f:	e8 68 97 ff ff       	call   c000fb8c <free>
c0016424:	5e                   	pop    esi
c0016425:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016429:	e8 5e 97 ff ff       	call   c000fb8c <free>
c001642e:	5f                   	pop    edi
c001642f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016433:	e8 54 97 ff ff       	call   c000fb8c <free>
c0016438:	5d                   	pop    ebp
c0016439:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001643d:	e8 4a 97 ff ff       	call   c000fb8c <free>
c0016442:	83 c4 10             	add    esp,0x10
c0016445:	eb 21                	jmp    c0016468 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x7b4>
c0016447:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c001644b:	e9 c9 fc ff ff       	jmp    c0016119 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x465>
c0016450:	83 ec 0c             	sub    esp,0xc
c0016453:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0016457:	e8 30 97 ff ff       	call   c000fb8c <free>
c001645c:	ff 44 24 34          	inc    DWORD PTR [esp+0x34]
c0016460:	83 c4 10             	add    esp,0x10
c0016463:	e9 3f fc ff ff       	jmp    c00160a7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3f3>
c0016468:	31 c0                	xor    eax,eax
c001646a:	eb 34                	jmp    c00164a0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x7ec>
c001646c:	83 ec 0c             	sub    esp,0xc
c001646f:	53                   	push   ebx
c0016470:	e8 8f 1d ff ff       	call   c0008204 <File::close()>
c0016475:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016477:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001647a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001647d:	58                   	pop    eax
c001647e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016482:	e8 05 97 ff ff       	call   c000fb8c <free>
c0016487:	5a                   	pop    edx
c0016488:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001648c:	e8 fb 96 ff ff       	call   c000fb8c <free>
c0016491:	59                   	pop    ecx
c0016492:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016496:	e8 f1 96 ff ff       	call   c000fb8c <free>
c001649b:	83 c4 10             	add    esp,0x10
c001649e:	b0 01                	mov    al,0x1
c00164a0:	81 c4 6c 03 00 00    	add    esp,0x36c
c00164a6:	5b                   	pop    ebx
c00164a7:	5e                   	pop    esi
c00164a8:	5f                   	pop    edi
c00164a9:	5d                   	pop    ebp
c00164aa:	c3                   	ret    

c00164ab <Thr::getDriverBaseFromAddress(unsigned long)>:
c00164ab:	56                   	push   esi
c00164ac:	31 d2                	xor    edx,edx
c00164ae:	53                   	push   ebx
c00164af:	8b 1d 80 f2 02 c0    	mov    ebx,DWORD PTR ds:0xc002f280
c00164b5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00164b9:	39 d3                	cmp    ebx,edx
c00164bb:	7e 1b                	jle    c00164d8 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c00164bd:	8b 04 95 a0 f4 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd0b60]
c00164c4:	39 c8                	cmp    eax,ecx
c00164c6:	77 0d                	ja     c00164d5 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c00164c8:	8b 34 95 a0 f2 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd0d60]
c00164cf:	01 c6                	add    esi,eax
c00164d1:	39 ce                	cmp    esi,ecx
c00164d3:	77 05                	ja     c00164da <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c00164d5:	42                   	inc    edx
c00164d6:	eb e1                	jmp    c00164b9 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c00164d8:	31 c0                	xor    eax,eax
c00164da:	5b                   	pop    ebx
c00164db:	5e                   	pop    esi
c00164dc:	c3                   	ret    

c00164dd <Thr::getDriverNameFromAddress(unsigned long)>:
c00164dd:	53                   	push   ebx
c00164de:	8b 1d 80 f2 02 c0    	mov    ebx,DWORD PTR ds:0xc002f280
c00164e4:	31 c0                	xor    eax,eax
c00164e6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00164ea:	39 c3                	cmp    ebx,eax
c00164ec:	7e 22                	jle    c0016510 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c00164ee:	8b 14 85 a0 f4 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd0b60]
c00164f5:	39 ca                	cmp    edx,ecx
c00164f7:	77 14                	ja     c001650d <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c00164f9:	03 14 85 a0 f2 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd0d60]
c0016500:	39 ca                	cmp    edx,ecx
c0016502:	76 09                	jbe    c001650d <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0016504:	8b 04 85 a0 f6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0960]
c001650b:	eb 05                	jmp    c0016512 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001650d:	40                   	inc    eax
c001650e:	eb da                	jmp    c00164ea <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c0016510:	31 c0                	xor    eax,eax
c0016512:	5b                   	pop    ebx
c0016513:	c3                   	ret    

c0016514 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c0016514:	53                   	push   ebx
c0016515:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0016519:	53                   	push   ebx
c001651a:	e8 8c ff ff ff       	call   c00164ab <Thr::getDriverBaseFromAddress(unsigned long)>
c001651f:	5a                   	pop    edx
c0016520:	31 d2                	xor    edx,edx
c0016522:	85 c0                	test   eax,eax
c0016524:	74 04                	je     c001652a <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c0016526:	89 da                	mov    edx,ebx
c0016528:	29 c2                	sub    edx,eax
c001652a:	5b                   	pop    ebx
c001652b:	89 d0                	mov    eax,edx
c001652d:	c3                   	ret    

c001652e <Thr::loadDLL(char const*, bool)>:
c001652e:	55                   	push   ebp
c001652f:	57                   	push   edi
c0016530:	56                   	push   esi
c0016531:	53                   	push   ebx
c0016532:	81 ec 34 01 00 00    	sub    esp,0x134
c0016538:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001653f:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c0016546:	56                   	push   esi
c0016547:	68 a7 52 02 c0       	push   0xc00252a7
c001654c:	e8 15 0a ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0016551:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0016558:	e8 1f 96 ff ff       	call   c000fb7c <malloc>
c001655d:	83 c4 0c             	add    esp,0xc
c0016560:	ff 35 78 fa 02 c0    	push   DWORD PTR ds:0xc002fa78
c0016566:	56                   	push   esi
c0016567:	50                   	push   eax
c0016568:	89 c3                	mov    ebx,eax
c001656a:	e8 19 1c ff ff       	call   c0008188 <File::File(char const*, Process*)>
c001656f:	83 c4 10             	add    esp,0x10
c0016572:	85 db                	test   ebx,ebx
c0016574:	75 3c                	jne    c00165b2 <Thr::loadDLL(char const*, bool)+0x84>
c0016576:	89 e8                	mov    eax,ebp
c0016578:	84 c0                	test   al,al
c001657a:	0f 84 02 02 00 00    	je     c0016782 <Thr::loadDLL(char const*, bool)+0x254>
c0016580:	50                   	push   eax
c0016581:	50                   	push   eax
c0016582:	68 b8 52 02 c0       	push   0xc00252b8
c0016587:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
c001658b:	57                   	push   edi
c001658c:	e8 bf a0 fe ff       	call   c0000650 <strcpy>
c0016591:	58                   	pop    eax
c0016592:	5a                   	pop    edx
c0016593:	56                   	push   esi
c0016594:	57                   	push   edi
c0016595:	e8 d6 a2 fe ff       	call   c0000870 <strcat>
c001659a:	59                   	pop    ecx
c001659b:	58                   	pop    eax
c001659c:	68 cf 52 02 c0       	push   0xc00252cf
c00165a1:	57                   	push   edi
c00165a2:	e8 c9 a2 fe ff       	call   c0000870 <strcat>
c00165a7:	89 3c 24             	mov    DWORD PTR [esp],edi
c00165aa:	e8 db 98 ff ff       	call   c000fe8a <KePanic(char const*)>
c00165af:	83 c4 10             	add    esp,0x10
c00165b2:	50                   	push   eax
c00165b3:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c00165b7:	50                   	push   eax
c00165b8:	8d 44 24 20          	lea    eax,[esp+0x20]
c00165bc:	50                   	push   eax
c00165bd:	53                   	push   ebx
c00165be:	e8 e5 1e ff ff       	call   c00084a8 <File::stat(unsigned long long*, bool*)>
c00165c3:	83 c4 10             	add    esp,0x10
c00165c6:	85 db                	test   ebx,ebx
c00165c8:	89 c7                	mov    edi,eax
c00165ca:	74 0c                	je     c00165d8 <Thr::loadDLL(char const*, bool)+0xaa>
c00165cc:	8b 03                	mov    eax,DWORD PTR [ebx]
c00165ce:	83 ec 0c             	sub    esp,0xc
c00165d1:	53                   	push   ebx
c00165d2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00165d5:	83 c4 10             	add    esp,0x10
c00165d8:	83 ec 0c             	sub    esp,0xc
c00165db:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c00165e0:	50                   	push   eax
c00165e1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00165e5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00165e9:	57                   	push   edi
c00165ea:	68 d1 52 02 c0       	push   0xc00252d1
c00165ef:	e8 72 09 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00165f4:	83 c4 20             	add    esp,0x20
c00165f7:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c00165fc:	75 0a                	jne    c0016608 <Thr::loadDLL(char const*, bool)+0xda>
c00165fe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016602:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0016606:	75 3e                	jne    c0016646 <Thr::loadDLL(char const*, bool)+0x118>
c0016608:	89 e8                	mov    eax,ebp
c001660a:	31 db                	xor    ebx,ebx
c001660c:	84 c0                	test   al,al
c001660e:	0f 84 6e 01 00 00    	je     c0016782 <Thr::loadDLL(char const*, bool)+0x254>
c0016614:	50                   	push   eax
c0016615:	50                   	push   eax
c0016616:	68 f2 52 02 c0       	push   0xc00252f2
c001661b:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001661f:	53                   	push   ebx
c0016620:	e8 2b a0 fe ff       	call   c0000650 <strcpy>
c0016625:	58                   	pop    eax
c0016626:	5a                   	pop    edx
c0016627:	56                   	push   esi
c0016628:	53                   	push   ebx
c0016629:	e8 42 a2 fe ff       	call   c0000870 <strcat>
c001662e:	59                   	pop    ecx
c001662f:	5f                   	pop    edi
c0016630:	68 cf 52 02 c0       	push   0xc00252cf
c0016635:	53                   	push   ebx
c0016636:	e8 35 a2 fe ff       	call   c0000870 <strcat>
c001663b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001663e:	e8 47 98 ff ff       	call   c000fe8a <KePanic(char const*)>
c0016643:	83 c4 10             	add    esp,0x10
c0016646:	53                   	push   ebx
c0016647:	6a 03                	push   0x3
c0016649:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001664d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0016651:	05 ff 0f 00 00       	add    eax,0xfff
c0016656:	83 d2 00             	adc    edx,0x0
c0016659:	0f ac d0 0c          	shrd   eax,edx,0xc
c001665d:	50                   	push   eax
c001665e:	ff 35 70 f2 02 c0    	push   DWORD PTR ds:0xc002f270
c0016664:	e8 b9 d4 ff ff       	call   c0013b22 <VAS::allocatePages(int, int)>
c0016669:	89 c3                	mov    ebx,eax
c001666b:	58                   	pop    eax
c001666c:	5a                   	pop    edx
c001666d:	53                   	push   ebx
c001666e:	68 7a 44 02 c0       	push   0xc002447a
c0016673:	e8 ee 08 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0016678:	89 34 24             	mov    DWORD PTR [esp],esi
c001667b:	e8 00 9f fe ff       	call   c0000580 <strlen>
c0016680:	8b 3d 80 f2 02 c0    	mov    edi,DWORD PTR ds:0xc002f280
c0016686:	40                   	inc    eax
c0016687:	89 04 24             	mov    DWORD PTR [esp],eax
c001668a:	e8 ed 94 ff ff       	call   c000fb7c <malloc>
c001668f:	59                   	pop    ecx
c0016690:	89 04 bd a0 f6 02 c0 	mov    DWORD PTR [edi*4-0x3ffd0960],eax
c0016697:	a1 80 f2 02 c0       	mov    eax,ds:0xc002f280
c001669c:	5f                   	pop    edi
c001669d:	56                   	push   esi
c001669e:	ff 34 85 a0 f6 02 c0 	push   DWORD PTR [eax*4-0x3ffd0960]
c00166a5:	e8 a6 9f fe ff       	call   c0000650 <strcpy>
c00166aa:	a1 80 f2 02 c0       	mov    eax,ds:0xc002f280
c00166af:	89 1c 85 a0 f4 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0b60],ebx
c00166b6:	8d 50 01             	lea    edx,[eax+0x1]
c00166b9:	89 15 80 f2 02 c0    	mov    DWORD PTR ds:0xc002f280,edx
c00166bf:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00166c3:	83 c4 0c             	add    esp,0xc
c00166c6:	6a 01                	push   0x1
c00166c8:	53                   	push   ebx
c00166c9:	56                   	push   esi
c00166ca:	89 14 85 a0 f2 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0d60],edx
c00166d1:	e8 de f5 ff ff       	call   c0015cb4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c00166d6:	83 c4 10             	add    esp,0x10
c00166d9:	89 c7                	mov    edi,eax
c00166db:	89 f8                	mov    eax,edi
c00166dd:	83 f0 01             	xor    eax,0x1
c00166e0:	84 c0                	test   al,al
c00166e2:	74 18                	je     c00166fc <Thr::loadDLL(char const*, bool)+0x1ce>
c00166e4:	89 e8                	mov    eax,ebp
c00166e6:	84 c0                	test   al,al
c00166e8:	74 12                	je     c00166fc <Thr::loadDLL(char const*, bool)+0x1ce>
c00166ea:	83 ec 0c             	sub    esp,0xc
c00166ed:	68 0b 53 02 c0       	push   0xc002530b
c00166f2:	e8 93 97 ff ff       	call   c000fe8a <KePanic(char const*)>
c00166f7:	83 c4 10             	add    esp,0x10
c00166fa:	eb 06                	jmp    c0016702 <Thr::loadDLL(char const*, bool)+0x1d4>
c00166fc:	89 f8                	mov    eax,edi
c00166fe:	84 c0                	test   al,al
c0016700:	75 10                	jne    c0016712 <Thr::loadDLL(char const*, bool)+0x1e4>
c0016702:	83 ec 0c             	sub    esp,0xc
c0016705:	68 2a 53 02 c0       	push   0xc002532a
c001670a:	e8 7b 97 ff ff       	call   c000fe8a <KePanic(char const*)>
c001670f:	83 c4 10             	add    esp,0x10
c0016712:	31 f6                	xor    esi,esi
c0016714:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016718:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001671c:	05 ff 0f 00 00       	add    eax,0xfff
c0016721:	83 d2 00             	adc    edx,0x0
c0016724:	0f ac d0 0c          	shrd   eax,edx,0xc
c0016728:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001672c:	c1 ea 0c             	shr    edx,0xc
c001672f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016733:	ba 00 00 00 00       	mov    edx,0x0
c0016738:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c001673c:	89 d0                	mov    eax,edx
c001673e:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0016742:	73 32                	jae    c0016776 <Thr::loadDLL(char const*, bool)+0x248>
c0016744:	50                   	push   eax
c0016745:	50                   	push   eax
c0016746:	89 f0                	mov    eax,esi
c0016748:	c1 e0 0c             	shl    eax,0xc
c001674b:	01 d8                	add    eax,ebx
c001674d:	50                   	push   eax
c001674e:	ff 35 70 f2 02 c0    	push   DWORD PTR ds:0xc002f270
c0016754:	e8 c7 ce ff ff       	call   c0013620 <VAS::getPageTableEntry(unsigned long)>
c0016759:	83 c4 10             	add    esp,0x10
c001675c:	8b 00                	mov    eax,DWORD PTR [eax]
c001675e:	a8 60                	test   al,0x60
c0016760:	75 11                	jne    c0016773 <Thr::loadDLL(char const*, bool)+0x245>
c0016762:	83 ec 0c             	sub    esp,0xc
c0016765:	25 00 f0 ff ff       	and    eax,0xfffff000
c001676a:	50                   	push   eax
c001676b:	e8 ab 98 ff ff       	call   c001001b <Phys::freePage(unsigned long)>
c0016770:	83 c4 10             	add    esp,0x10
c0016773:	46                   	inc    esi
c0016774:	eb 9e                	jmp    c0016714 <Thr::loadDLL(char const*, bool)+0x1e6>
c0016776:	89 f8                	mov    eax,edi
c0016778:	84 c0                	test   al,al
c001677a:	b8 00 00 00 00       	mov    eax,0x0
c001677f:	0f 44 d8             	cmove  ebx,eax
c0016782:	81 c4 2c 01 00 00    	add    esp,0x12c
c0016788:	89 d8                	mov    eax,ebx
c001678a:	5b                   	pop    ebx
c001678b:	5e                   	pop    esi
c001678c:	5f                   	pop    edi
c001678d:	5d                   	pop    ebp
c001678e:	c3                   	ret    

c001678f <Thr::executeDLL(unsigned long, void*)>:
c001678f:	56                   	push   esi
c0016790:	53                   	push   ebx
c0016791:	52                   	push   edx
c0016792:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016796:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001679a:	85 db                	test   ebx,ebx
c001679c:	75 10                	jne    c00167ae <Thr::executeDLL(unsigned long, void*)+0x1f>
c001679e:	83 ec 0c             	sub    esp,0xc
c00167a1:	68 46 53 02 c0       	push   0xc0025346
c00167a6:	e8 df 96 ff ff       	call   c000fe8a <KePanic(char const*)>
c00167ab:	83 c4 10             	add    esp,0x10
c00167ae:	50                   	push   eax
c00167af:	50                   	push   eax
c00167b0:	53                   	push   ebx
c00167b1:	68 70 53 02 c0       	push   0xc0025370
c00167b6:	e8 ab 07 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00167bb:	89 d8                	mov    eax,ebx
c00167bd:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c00167c1:	83 c4 14             	add    esp,0x14
c00167c4:	5b                   	pop    ebx
c00167c5:	5e                   	pop    esi
c00167c6:	ff e0                	jmp    eax

c00167c8 <KeProcessExec(Process*, char const*)>:
c00167c8:	56                   	push   esi
c00167c9:	53                   	push   ebx
c00167ca:	83 ec 04             	sub    esp,0x4
c00167cd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00167d1:	8b b3 b2 05 00 00    	mov    esi,DWORD PTR [ebx+0x5b2]
c00167d7:	85 f6                	test   esi,esi
c00167d9:	74 16                	je     c00167f1 <KeProcessExec(Process*, char const*)+0x29>
c00167db:	83 ec 0c             	sub    esp,0xc
c00167de:	56                   	push   esi
c00167df:	e8 ce d0 ff ff       	call   c00138b2 <VAS::~VAS()>
c00167e4:	58                   	pop    eax
c00167e5:	5a                   	pop    edx
c00167e6:	6a 14                	push   0x14
c00167e8:	56                   	push   esi
c00167e9:	e8 07 6b ff ff       	call   c000d2f5 <operator delete(void*, unsigned long)>
c00167ee:	83 c4 10             	add    esp,0x10
c00167f1:	83 ec 0c             	sub    esp,0xc
c00167f4:	6a 14                	push   0x14
c00167f6:	e8 81 93 ff ff       	call   c000fb7c <malloc>
c00167fb:	89 c6                	mov    esi,eax
c00167fd:	58                   	pop    eax
c00167fe:	5a                   	pop    edx
c00167ff:	6a 00                	push   0x0
c0016801:	56                   	push   esi
c0016802:	e8 57 d5 ff ff       	call   c0013d5e <VAS::VAS(bool)>
c0016807:	89 b3 b2 05 00 00    	mov    DWORD PTR [ebx+0x5b2],esi
c001680d:	59                   	pop    ecx
c001680e:	5e                   	pop    esi
c001680f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016813:	50                   	push   eax
c0016814:	53                   	push   ebx
c0016815:	e8 ae ee ff ff       	call   c00156c8 <Thr::loadProgramIntoMemory(Process*, char const*)>
c001681a:	83 c4 14             	add    esp,0x14
c001681d:	31 c0                	xor    eax,eax
c001681f:	5b                   	pop    ebx
c0016820:	5e                   	pop    esi
c0016821:	c3                   	ret    
c0016822:	66 90                	xchg   ax,ax

c0016824 <userModeEntryPoint(void*)>:
c0016824:	f0 83 2d 50 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa50,0x1
c001682c:	a1 50 fa 02 c0       	mov    eax,ds:0xc002fa50
c0016831:	85 c0                	test   eax,eax
c0016833:	75 03                	jne    c0016838 <userModeEntryPoint(void*)+0x14>
c0016835:	fb                   	sti    
c0016836:	66 90                	xchg   ax,ax
c0016838:	fb                   	sti    
c0016839:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001683e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016841:	8b 80 ae 05 00 00    	mov    eax,DWORD PTR [eax+0x5ae]
c0016847:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001684b:	e9 ef 99 fe ff       	jmp    c000023f <goToUsermode>

c0016850 <changeTSS>:
c0016850:	83 ec 14             	sub    esp,0x14
c0016853:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016858:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001685b:	b8 00 00 e8 01       	mov    eax,0x1e80000
c0016860:	c1 e2 15             	shl    edx,0x15
c0016863:	29 d0                	sub    eax,edx
c0016865:	50                   	push   eax
c0016866:	a1 d4 d0 02 c0       	mov    eax,ds:0xc002d0d4
c001686b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016871:	05 68 11 00 00       	add    eax,0x1168
c0016876:	50                   	push   eax
c0016877:	e8 78 c3 ff ff       	call   c0012bf4 <TSS::setESP(unsigned long)>
c001687c:	83 c4 1c             	add    esp,0x1c
c001687f:	c3                   	ret    

c0016880 <switchToThread(ThreadControlBlock*)>:
c0016880:	57                   	push   edi
c0016881:	8b 0d 4c fa 02 c0    	mov    ecx,DWORD PTR ds:0xc002fa4c
c0016887:	56                   	push   esi
c0016888:	53                   	push   ebx
c0016889:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001688d:	85 c9                	test   ecx,ecx
c001688f:	0f 85 9b 00 00 00    	jne    c0016930 <switchToThread(ThreadControlBlock*)+0xb0>
c0016895:	0f b6 53 44          	movzx  edx,BYTE PTR [ebx+0x44]
c0016899:	81 fa ff 00 00 00    	cmp    edx,0xff
c001689f:	0f 84 87 00 00 00    	je     c001692c <switchToThread(ThreadControlBlock*)+0xac>
c00168a5:	b8 00 04 00 00       	mov    eax,0x400
c00168aa:	29 d0                	sub    eax,edx
c00168ac:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00168af:	d1 f8                	sar    eax,1
c00168b1:	01 d0                	add    eax,edx
c00168b3:	90                   	nop
c00168b4:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00168b7:	e8 b7 3e 00 00       	call   c001a773 <HalQueryPerformanceCounter()>
c00168bc:	a3 90 fa 02 c0       	mov    ds:0xc002fa90,eax
c00168c1:	89 c6                	mov    esi,eax
c00168c3:	89 d7                	mov    edi,edx
c00168c5:	2b 35 80 fa 02 c0    	sub    esi,DWORD PTR ds:0xc002fa80
c00168cb:	a3 80 fa 02 c0       	mov    ds:0xc002fa80,eax
c00168d0:	1b 3d 84 fa 02 c0    	sbb    edi,DWORD PTR ds:0xc002fa84
c00168d6:	89 35 88 fa 02 c0    	mov    DWORD PTR ds:0xc002fa88,esi
c00168dc:	89 15 94 fa 02 c0    	mov    DWORD PTR ds:0xc002fa94,edx
c00168e2:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00168e8:	89 15 84 fa 02 c0    	mov    DWORD PTR ds:0xc002fa84,edx
c00168ee:	89 3d 8c fa 02 c0    	mov    DWORD PTR ds:0xc002fa8c,edi
c00168f4:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c00168f7:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c00168fa:	01 c6                	add    esi,eax
c00168fc:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c00168ff:	11 d7                	adc    edi,edx
c0016901:	83 ec 0c             	sub    esp,0xc
c0016904:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c0016907:	53                   	push   ebx
c0016908:	e8 6a 99 fe ff       	call   c0000277 <switchToThreadASM>
c001690d:	0f 20 c0             	mov    eax,cr0
c0016910:	83 c8 08             	or     eax,0x8
c0016913:	0f 22 c0             	mov    cr0,eax
c0016916:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001691b:	83 c4 10             	add    esp,0x10
c001691e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016922:	5b                   	pop    ebx
c0016923:	5e                   	pop    esi
c0016924:	5f                   	pop    edi
c0016925:	e9 22 ea ff ff       	jmp    c001534c <KeCheckAlarm(ThreadControlBlock*)>
c001692a:	66 90                	xchg   ax,ax
c001692c:	31 c0                	xor    eax,eax
c001692e:	eb 84                	jmp    c00168b4 <switchToThread(ThreadControlBlock*)+0x34>
c0016930:	5b                   	pop    ebx
c0016931:	c7 05 48 fa 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002fa48,0x1
c001693b:	5e                   	pop    esi
c001693c:	5f                   	pop    edi
c001693d:	c3                   	ret    
c001693e:	66 90                	xchg   ax,ax

c0016940 <Process::addArgs(char**)>:
c0016940:	57                   	push   edi
c0016941:	56                   	push   esi
c0016942:	53                   	push   ebx
c0016943:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0016947:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001694b:	85 f6                	test   esi,esi
c001694d:	c7 87 b6 05 00 00 00 00 00 00 	mov    DWORD PTR [edi+0x5b6],0x0
c0016957:	74 4f                	je     c00169a8 <Process::addArgs(char**)+0x68>
c0016959:	8b 06                	mov    eax,DWORD PTR [esi]
c001695b:	85 c0                	test   eax,eax
c001695d:	74 49                	je     c00169a8 <Process::addArgs(char**)+0x68>
c001695f:	31 db                	xor    ebx,ebx
c0016961:	8d 76 00             	lea    esi,[esi+0x0]
c0016964:	83 ec 0c             	sub    esp,0xc
c0016967:	50                   	push   eax
c0016968:	e8 13 9c fe ff       	call   c0000580 <strlen>
c001696d:	83 c0 01             	add    eax,0x1
c0016970:	89 04 24             	mov    DWORD PTR [esp],eax
c0016973:	e8 04 92 ff ff       	call   c000fb7c <malloc>
c0016978:	89 84 9f ba 05 00 00 	mov    DWORD PTR [edi+ebx*4+0x5ba],eax
c001697f:	5a                   	pop    edx
c0016980:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c0016983:	83 c3 01             	add    ebx,0x1
c0016986:	59                   	pop    ecx
c0016987:	52                   	push   edx
c0016988:	50                   	push   eax
c0016989:	e8 c2 9c fe ff       	call   c0000650 <strcpy>
c001698e:	8b 8f b6 05 00 00    	mov    ecx,DWORD PTR [edi+0x5b6]
c0016994:	83 c4 10             	add    esp,0x10
c0016997:	83 c1 01             	add    ecx,0x1
c001699a:	89 8f b6 05 00 00    	mov    DWORD PTR [edi+0x5b6],ecx
c00169a0:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c00169a3:	85 c0                	test   eax,eax
c00169a5:	75 bd                	jne    c0016964 <Process::addArgs(char**)+0x24>
c00169a7:	90                   	nop
c00169a8:	5b                   	pop    ebx
c00169a9:	5e                   	pop    esi
c00169aa:	5f                   	pop    edi
c00169ab:	c3                   	ret    

c00169ac <Process::Process(char const*, Process*, char**)>:
c00169ac:	56                   	push   esi
c00169ad:	53                   	push   ebx
c00169ae:	83 ec 14             	sub    esp,0x14
c00169b1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00169b5:	05 0c 02 00 00       	add    eax,0x20c
c00169ba:	bb 07 00 00 00       	mov    ebx,0x7
c00169bf:	89 c6                	mov    esi,eax
c00169c1:	8d 76 00             	lea    esi,[esi+0x0]
c00169c4:	85 db                	test   ebx,ebx
c00169c6:	78 14                	js     c00169dc <Process::Process(char const*, Process*, char**)+0x30>
c00169c8:	83 ec 0c             	sub    esp,0xc
c00169cb:	56                   	push   esi
c00169cc:	e8 ff ba 00 00       	call   c00224d0 <ThreadControlBlock::ThreadControlBlock()>
c00169d1:	83 c4 10             	add    esp,0x10
c00169d4:	83 c6 73             	add    esi,0x73
c00169d7:	83 eb 01             	sub    ebx,0x1
c00169da:	eb e8                	jmp    c00169c4 <Process::Process(char const*, Process*, char**)+0x18>
c00169dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00169e0:	c6 80 be 07 00 00 00 	mov    BYTE PTR [eax+0x7be],0x0
c00169e7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00169eb:	c6 80 bf 07 00 00 00 	mov    BYTE PTR [eax+0x7bf],0x0
c00169f2:	83 ec 0c             	sub    esp,0xc
c00169f5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00169f9:	e8 e0 7d ff ff       	call   c000e7de <KeNewProcessEnv(Process*)>
c00169fe:	83 c4 10             	add    esp,0x10
c0016a01:	89 c2                	mov    edx,eax
c0016a03:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a07:	89 90 ba 07 00 00    	mov    DWORD PTR [eax+0x7ba],edx
c0016a0d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a11:	66 c7 80 a4 05 00 00 00 00 	mov    WORD PTR [eax+0x5a4],0x0
c0016a1a:	a1 9c 6f 02 c0       	mov    eax,ds:0xc0026f9c
c0016a1f:	8d 50 01             	lea    edx,[eax+0x1]
c0016a22:	89 15 9c 6f 02 c0    	mov    DWORD PTR ds:0xc0026f9c,edx
c0016a28:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016a2c:	89 02                	mov    DWORD PTR [edx],eax
c0016a2e:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c0016a36:	83 ec 0c             	sub    esp,0xc
c0016a39:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016a3d:	e8 3a 91 ff ff       	call   c000fb7c <malloc>
c0016a42:	83 c4 10             	add    esp,0x10
c0016a45:	89 c3                	mov    ebx,eax
c0016a47:	83 ec 08             	sub    esp,0x8
c0016a4a:	6a 00                	push   0x0
c0016a4c:	53                   	push   ebx
c0016a4d:	e8 0c d3 ff ff       	call   c0013d5e <VAS::VAS(bool)>
c0016a52:	83 c4 10             	add    esp,0x10
c0016a55:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a59:	89 98 b2 05 00 00    	mov    DWORD PTR [eax+0x5b2],ebx
c0016a5f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a63:	c7 80 b6 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x5b6],0x0
c0016a6d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a71:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016a75:	89 90 aa 05 00 00    	mov    DWORD PTR [eax+0x5aa],edx
c0016a7b:	e8 d7 a4 ff ff       	call   c0010f57 <KeInitSignals()>
c0016a80:	89 c2                	mov    edx,eax
c0016a82:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a86:	89 90 c0 07 00 00    	mov    DWORD PTR [eax+0x7c0],edx
c0016a8c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a90:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c0016a96:	85 c0                	test   eax,eax
c0016a98:	74 42                	je     c0016adc <Process::Process(char const*, Process*, char**)+0x130>
c0016a9a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a9e:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c0016aa4:	8b 90 a6 05 00 00    	mov    edx,DWORD PTR [eax+0x5a6]
c0016aaa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016aae:	89 90 a6 05 00 00    	mov    DWORD PTR [eax+0x5a6],edx
c0016ab4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ab8:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c0016abe:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0016ac4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ac8:	05 0c 01 00 00       	add    eax,0x10c
c0016acd:	83 ec 08             	sub    esp,0x8
c0016ad0:	52                   	push   edx
c0016ad1:	50                   	push   eax
c0016ad2:	e8 79 9b fe ff       	call   c0000650 <strcpy>
c0016ad7:	83 c4 10             	add    esp,0x10
c0016ada:	eb 7c                	jmp    c0016b58 <Process::Process(char const*, Process*, char**)+0x1ac>
c0016adc:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c0016ae4:	83 ec 0c             	sub    esp,0xc
c0016ae7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016aeb:	e8 8c 90 ff ff       	call   c000fb7c <malloc>
c0016af0:	83 c4 10             	add    esp,0x10
c0016af3:	89 c3                	mov    ebx,eax
c0016af5:	83 ec 08             	sub    esp,0x8
c0016af8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016afc:	53                   	push   ebx
c0016afd:	e8 10 be ff ff       	call   c0012912 <VgaText::VgaText(char const*)>
c0016b02:	83 c4 10             	add    esp,0x10
c0016b05:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b09:	89 98 a6 05 00 00    	mov    DWORD PTR [eax+0x5a6],ebx
c0016b0f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b13:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0016b19:	83 ec 0c             	sub    esp,0xc
c0016b1c:	50                   	push   eax
c0016b1d:	e8 56 b6 ff ff       	call   c0012178 <addToTerminalCycle(VgaText*)>
c0016b22:	83 c4 10             	add    esp,0x10
c0016b25:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b29:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0016b2f:	83 ec 0c             	sub    esp,0xc
c0016b32:	50                   	push   eax
c0016b33:	e8 b1 b8 ff ff       	call   c00123e9 <setActiveTerminal(VgaText*)>
c0016b38:	83 c4 10             	add    esp,0x10
c0016b3b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b3f:	05 0c 01 00 00       	add    eax,0x10c
c0016b44:	83 ec 08             	sub    esp,0x8
c0016b47:	68 8f 53 02 c0       	push   0xc002538f
c0016b4c:	50                   	push   eax
c0016b4d:	e8 fe 9a fe ff       	call   c0000650 <strcpy>
c0016b52:	83 c4 10             	add    esp,0x10
c0016b55:	8d 76 00             	lea    esi,[esi+0x0]
c0016b58:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b5c:	83 c0 0c             	add    eax,0xc
c0016b5f:	83 ec 08             	sub    esp,0x8
c0016b62:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016b66:	50                   	push   eax
c0016b67:	e8 e4 9a fe ff       	call   c0000650 <strcpy>
c0016b6c:	83 c4 10             	add    esp,0x10
c0016b6f:	83 ec 08             	sub    esp,0x8
c0016b72:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0016b76:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016b7a:	e8 c1 fd ff ff       	call   c0016940 <Process::addArgs(char**)>
c0016b7f:	83 c4 10             	add    esp,0x10
c0016b82:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b86:	8a 90 76 02 00 00    	mov    dl,BYTE PTR [eax+0x276]
c0016b8c:	83 e2 7f             	and    edx,0x7f
c0016b8f:	88 90 76 02 00 00    	mov    BYTE PTR [eax+0x276],dl
c0016b95:	83 ec 08             	sub    esp,0x8
c0016b98:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016b9c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016ba0:	e8 23 eb ff ff       	call   c00156c8 <Thr::loadProgramIntoMemory(Process*, char const*)>
c0016ba5:	83 c4 10             	add    esp,0x10
c0016ba8:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0016bac:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0016bb0:	83 f0 01             	xor    eax,0x1
c0016bb3:	88 c2                	mov    dl,al
c0016bb5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016bb9:	88 90 be 07 00 00    	mov    BYTE PTR [eax+0x7be],dl
c0016bbf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016bc3:	8b 10                	mov    edx,DWORD PTR [eax]
c0016bc5:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0016bca:	52                   	push   edx
c0016bcb:	50                   	push   eax
c0016bcc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016bd0:	68 e8 53 02 c0       	push   0xc00253e8
c0016bd5:	e8 8c 03 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0016bda:	83 c4 10             	add    esp,0x10
c0016bdd:	90                   	nop
c0016bde:	83 c4 14             	add    esp,0x14
c0016be1:	5b                   	pop    ebx
c0016be2:	5e                   	pop    esi
c0016be3:	c3                   	ret    

c0016be4 <Process::Process(bool, char const*, Process*, char**)>:
c0016be4:	56                   	push   esi
c0016be5:	53                   	push   ebx
c0016be6:	83 ec 24             	sub    esp,0x24
c0016be9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016bed:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0016bf1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016bf5:	05 0c 02 00 00       	add    eax,0x20c
c0016bfa:	bb 07 00 00 00       	mov    ebx,0x7
c0016bff:	89 c6                	mov    esi,eax
c0016c01:	8d 76 00             	lea    esi,[esi+0x0]
c0016c04:	85 db                	test   ebx,ebx
c0016c06:	78 14                	js     c0016c1c <Process::Process(bool, char const*, Process*, char**)+0x38>
c0016c08:	83 ec 0c             	sub    esp,0xc
c0016c0b:	56                   	push   esi
c0016c0c:	e8 bf b8 00 00       	call   c00224d0 <ThreadControlBlock::ThreadControlBlock()>
c0016c11:	83 c4 10             	add    esp,0x10
c0016c14:	83 c6 73             	add    esi,0x73
c0016c17:	83 eb 01             	sub    ebx,0x1
c0016c1a:	eb e8                	jmp    c0016c04 <Process::Process(bool, char const*, Process*, char**)+0x20>
c0016c1c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016c20:	c6 80 be 07 00 00 00 	mov    BYTE PTR [eax+0x7be],0x0
c0016c27:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016c2b:	c6 80 bf 07 00 00 00 	mov    BYTE PTR [eax+0x7bf],0x0
c0016c32:	83 ec 0c             	sub    esp,0xc
c0016c35:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0016c39:	e8 a0 7b ff ff       	call   c000e7de <KeNewProcessEnv(Process*)>
c0016c3e:	83 c4 10             	add    esp,0x10
c0016c41:	89 c2                	mov    edx,eax
c0016c43:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016c47:	89 90 ba 07 00 00    	mov    DWORD PTR [eax+0x7ba],edx
c0016c4d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016c51:	66 c7 80 a4 05 00 00 00 00 	mov    WORD PTR [eax+0x5a4],0x0
c0016c5a:	a1 9c 6f 02 c0       	mov    eax,ds:0xc0026f9c
c0016c5f:	8d 50 01             	lea    edx,[eax+0x1]
c0016c62:	89 15 9c 6f 02 c0    	mov    DWORD PTR ds:0xc0026f9c,edx
c0016c68:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0016c6c:	89 02                	mov    DWORD PTR [edx],eax
c0016c6e:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c0016c76:	83 ec 0c             	sub    esp,0xc
c0016c79:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0016c7d:	e8 fa 8e ff ff       	call   c000fb7c <malloc>
c0016c82:	83 c4 10             	add    esp,0x10
c0016c85:	89 c3                	mov    ebx,eax
c0016c87:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0016c8c:	83 ec 08             	sub    esp,0x8
c0016c8f:	50                   	push   eax
c0016c90:	53                   	push   ebx
c0016c91:	e8 c8 d0 ff ff       	call   c0013d5e <VAS::VAS(bool)>
c0016c96:	83 c4 10             	add    esp,0x10
c0016c99:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016c9d:	89 98 b2 05 00 00    	mov    DWORD PTR [eax+0x5b2],ebx
c0016ca3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016ca7:	c7 80 b6 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x5b6],0x0
c0016cb1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016cb5:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0016cb9:	89 90 aa 05 00 00    	mov    DWORD PTR [eax+0x5aa],edx
c0016cbf:	e8 93 a2 ff ff       	call   c0010f57 <KeInitSignals()>
c0016cc4:	89 c2                	mov    edx,eax
c0016cc6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016cca:	89 90 c0 07 00 00    	mov    DWORD PTR [eax+0x7c0],edx
c0016cd0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016cd4:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c0016cda:	85 c0                	test   eax,eax
c0016cdc:	74 42                	je     c0016d20 <Process::Process(bool, char const*, Process*, char**)+0x13c>
c0016cde:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016ce2:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c0016ce8:	8b 90 a6 05 00 00    	mov    edx,DWORD PTR [eax+0x5a6]
c0016cee:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016cf2:	89 90 a6 05 00 00    	mov    DWORD PTR [eax+0x5a6],edx
c0016cf8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016cfc:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c0016d02:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0016d08:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016d0c:	05 0c 01 00 00       	add    eax,0x10c
c0016d11:	83 ec 08             	sub    esp,0x8
c0016d14:	52                   	push   edx
c0016d15:	50                   	push   eax
c0016d16:	e8 35 99 fe ff       	call   c0000650 <strcpy>
c0016d1b:	83 c4 10             	add    esp,0x10
c0016d1e:	eb 7c                	jmp    c0016d9c <Process::Process(bool, char const*, Process*, char**)+0x1b8>
c0016d20:	c7 44 24 18 84 01 00 00 	mov    DWORD PTR [esp+0x18],0x184
c0016d28:	83 ec 0c             	sub    esp,0xc
c0016d2b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0016d2f:	e8 48 8e ff ff       	call   c000fb7c <malloc>
c0016d34:	83 c4 10             	add    esp,0x10
c0016d37:	89 c3                	mov    ebx,eax
c0016d39:	83 ec 08             	sub    esp,0x8
c0016d3c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016d40:	53                   	push   ebx
c0016d41:	e8 cc bb ff ff       	call   c0012912 <VgaText::VgaText(char const*)>
c0016d46:	83 c4 10             	add    esp,0x10
c0016d49:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016d4d:	89 98 a6 05 00 00    	mov    DWORD PTR [eax+0x5a6],ebx
c0016d53:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016d57:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0016d5d:	83 ec 0c             	sub    esp,0xc
c0016d60:	50                   	push   eax
c0016d61:	e8 12 b4 ff ff       	call   c0012178 <addToTerminalCycle(VgaText*)>
c0016d66:	83 c4 10             	add    esp,0x10
c0016d69:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016d6d:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0016d73:	83 ec 0c             	sub    esp,0xc
c0016d76:	50                   	push   eax
c0016d77:	e8 6d b6 ff ff       	call   c00123e9 <setActiveTerminal(VgaText*)>
c0016d7c:	83 c4 10             	add    esp,0x10
c0016d7f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016d83:	05 0c 01 00 00       	add    eax,0x10c
c0016d88:	83 ec 08             	sub    esp,0x8
c0016d8b:	68 8f 53 02 c0       	push   0xc002538f
c0016d90:	50                   	push   eax
c0016d91:	e8 ba 98 fe ff       	call   c0000650 <strcpy>
c0016d96:	83 c4 10             	add    esp,0x10
c0016d99:	8d 76 00             	lea    esi,[esi+0x0]
c0016d9c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016da0:	83 c0 0c             	add    eax,0xc
c0016da3:	83 ec 08             	sub    esp,0x8
c0016da6:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016daa:	50                   	push   eax
c0016dab:	e8 a0 98 fe ff       	call   c0000650 <strcpy>
c0016db0:	83 c4 10             	add    esp,0x10
c0016db3:	83 ec 08             	sub    esp,0x8
c0016db6:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016dba:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0016dbe:	e8 7d fb ff ff       	call   c0016940 <Process::addArgs(char**)>
c0016dc3:	83 c4 10             	add    esp,0x10
c0016dc6:	90                   	nop
c0016dc7:	83 c4 24             	add    esp,0x24
c0016dca:	5b                   	pop    ebx
c0016dcb:	5e                   	pop    esi
c0016dcc:	c3                   	ret    
c0016dcd:	8d 76 00             	lea    esi,[esi+0x0]

c0016dd0 <taskStartupFunction>:
c0016dd0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016dd5:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0016dd8:	c3                   	ret    
c0016dd9:	8d 76 00             	lea    esi,[esi+0x0]

c0016ddc <KeDisablePreemption()>:
c0016ddc:	a1 2c fa 02 c0       	mov    eax,ds:0xc002fa2c
c0016de1:	85 c0                	test   eax,eax
c0016de3:	75 13                	jne    c0016df8 <KeDisablePreemption()+0x1c>
c0016de5:	8a 15 d8 d0 02 c0    	mov    dl,BYTE PTR ds:0xc002d0d8
c0016deb:	c6 05 d8 d0 02 c0 00 	mov    BYTE PTR ds:0xc002d0d8,0x0
c0016df2:	88 15 28 fa 02 c0    	mov    BYTE PTR ds:0xc002fa28,dl
c0016df8:	83 c0 01             	add    eax,0x1
c0016dfb:	a3 2c fa 02 c0       	mov    ds:0xc002fa2c,eax
c0016e00:	c3                   	ret    
c0016e01:	8d 76 00             	lea    esi,[esi+0x0]

c0016e04 <KeRestorePreemption()>:
c0016e04:	a1 2c fa 02 c0       	mov    eax,ds:0xc002fa2c
c0016e09:	83 e8 01             	sub    eax,0x1
c0016e0c:	a3 2c fa 02 c0       	mov    ds:0xc002fa2c,eax
c0016e11:	75 0d                	jne    c0016e20 <KeRestorePreemption()+0x1c>
c0016e13:	a0 28 fa 02 c0       	mov    al,ds:0xc002fa28
c0016e18:	a2 d8 d0 02 c0       	mov    ds:0xc002d0d8,al
c0016e1d:	8d 76 00             	lea    esi,[esi+0x0]
c0016e20:	c3                   	ret    
c0016e21:	90                   	nop
c0016e22:	66 90                	xchg   ax,ax

c0016e24 <Process::createThread(void (*)(void*), void*, int)>:
c0016e24:	55                   	push   ebp
c0016e25:	31 c9                	xor    ecx,ecx
c0016e27:	57                   	push   edi
c0016e28:	56                   	push   esi
c0016e29:	53                   	push   ebx
c0016e2a:	83 ec 0c             	sub    esp,0xc
c0016e2d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0016e31:	66 8b b3 a4 05 00 00 	mov    si,WORD PTR [ebx+0x5a4]
c0016e38:	89 f2                	mov    edx,esi
c0016e3a:	66 90                	xchg   ax,ax
c0016e3c:	0f b7 c2             	movzx  eax,dx
c0016e3f:	80 e2 01             	and    dl,0x1
c0016e42:	74 18                	je     c0016e5c <Process::createThread(void (*)(void*), void*, int)+0x38>
c0016e44:	d1 f8                	sar    eax,1
c0016e46:	83 c1 01             	add    ecx,0x1
c0016e49:	83 f9 10             	cmp    ecx,0x10
c0016e4c:	89 c2                	mov    edx,eax
c0016e4e:	75 ec                	jne    c0016e3c <Process::createThread(void (*)(void*), void*, int)+0x18>
c0016e50:	83 c4 0c             	add    esp,0xc
c0016e53:	31 db                	xor    ebx,ebx
c0016e55:	89 d8                	mov    eax,ebx
c0016e57:	5b                   	pop    ebx
c0016e58:	5e                   	pop    esi
c0016e59:	5f                   	pop    edi
c0016e5a:	5d                   	pop    ebp
c0016e5b:	c3                   	ret    
c0016e5c:	b8 01 00 00 00       	mov    eax,0x1
c0016e61:	d3 e0                	shl    eax,cl
c0016e63:	09 c6                	or     esi,eax
c0016e65:	66 89 b3 a4 05 00 00 	mov    WORD PTR [ebx+0x5a4],si
c0016e6c:	6b c1 73             	imul   eax,ecx,0x73
c0016e6f:	01 d8                	add    eax,ebx
c0016e71:	80 b8 6e 02 00 00 00 	cmp    BYTE PTR [eax+0x26e],0x0
c0016e78:	75 0a                	jne    c0016e84 <Process::createThread(void (*)(void*), void*, int)+0x60>
c0016e7a:	c7 80 65 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x265],0x0
c0016e84:	8b 83 b2 05 00 00    	mov    eax,DWORD PTR [ebx+0x5b2]
c0016e8a:	6b f9 73             	imul   edi,ecx,0x73
c0016e8d:	83 ec 0c             	sub    esp,0xc
c0016e90:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0016e93:	8d 04 3b             	lea    eax,[ebx+edi*1]
c0016e96:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c0016e9c:	8d b0 00 02 00 00    	lea    esi,[eax+0x200]
c0016ea2:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c0016ea8:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c0016eaf:	c7 80 44 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x244],0x0
c0016eb9:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0016ebf:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0016ec3:	c7 80 6f 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x26f],0x0
c0016ecd:	c6 80 73 02 00 00 00 	mov    BYTE PTR [eax+0x273],0x0
c0016ed4:	c6 80 74 02 00 00 00 	mov    BYTE PTR [eax+0x274],0x0
c0016edb:	89 90 51 02 00 00    	mov    DWORD PTR [eax+0x251],edx
c0016ee1:	89 ca                	mov    edx,ecx
c0016ee3:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0016ee7:	c6 80 75 02 00 00 00 	mov    BYTE PTR [eax+0x275],0x0
c0016eee:	f7 da                	neg    edx
c0016ef0:	c1 e2 15             	shl    edx,0x15
c0016ef3:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0016ef9:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0016eff:	8a 54 24 38          	mov    dl,BYTE PTR [esp+0x38]
c0016f03:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0016f0d:	89 88 18 02 00 00    	mov    DWORD PTR [eax+0x218],ecx
c0016f13:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0016f1d:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c0016f23:	8a 90 76 02 00 00    	mov    dl,BYTE PTR [eax+0x276]
c0016f29:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0016f33:	83 e2 80             	and    edx,0xffffff80
c0016f36:	88 90 76 02 00 00    	mov    BYTE PTR [eax+0x276],dl
c0016f3c:	68 00 01 00 00       	push   0x100
c0016f41:	e8 36 8c ff ff       	call   c000fb7c <malloc>
c0016f46:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0016f49:	58                   	pop    eax
c0016f4a:	5a                   	pop    edx
c0016f4b:	53                   	push   ebx
c0016f4c:	68 6c fa 02 c0       	push   0xc002fa6c
c0016f51:	e8 26 b1 00 00       	call   c002207c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016f56:	83 c4 10             	add    esp,0x10
c0016f59:	89 d8                	mov    eax,ebx
c0016f5b:	83 c4 0c             	add    esp,0xc
c0016f5e:	5b                   	pop    ebx
c0016f5f:	5e                   	pop    esi
c0016f60:	5f                   	pop    edi
c0016f61:	5d                   	pop    ebp
c0016f62:	c3                   	ret    
c0016f63:	90                   	nop

c0016f64 <Process::createUserThread()>:
c0016f64:	83 ec 0c             	sub    esp,0xc
c0016f67:	68 80 00 00 00       	push   0x80
c0016f6c:	6a 00                	push   0x0
c0016f6e:	68 24 68 01 c0       	push   0xc0016824
c0016f73:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016f77:	50                   	push   eax
c0016f78:	e8 a7 fe ff ff       	call   c0016e24 <Process::createThread(void (*)(void*), void*, int)>
c0016f7d:	83 c4 1c             	add    esp,0x1c
c0016f80:	c3                   	ret    
c0016f81:	8d 76 00             	lea    esi,[esi+0x0]

c0016f84 <setupMultitasking(void (*)())>:
c0016f84:	56                   	push   esi
c0016f85:	53                   	push   ebx
c0016f86:	83 ec 04             	sub    esp,0x4
c0016f89:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016f8d:	eb 11                	jmp    c0016fa0 <setupMultitasking(void (*)())+0x1c>
c0016f8f:	90                   	nop
c0016f90:	83 ec 0c             	sub    esp,0xc
c0016f93:	68 6c fa 02 c0       	push   0xc002fa6c
c0016f98:	e8 23 b0 00 00       	call   c0021fc0 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016f9d:	83 c4 10             	add    esp,0x10
c0016fa0:	83 ec 0c             	sub    esp,0xc
c0016fa3:	68 6c fa 02 c0       	push   0xc002fa6c
c0016fa8:	e8 ef af 00 00       	call   c0021f9c <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016fad:	83 c4 10             	add    esp,0x10
c0016fb0:	84 c0                	test   al,al
c0016fb2:	74 dc                	je     c0016f90 <setupMultitasking(void (*)())+0xc>
c0016fb4:	83 ec 0c             	sub    esp,0xc
c0016fb7:	68 c4 07 00 00       	push   0x7c4
c0016fbc:	e8 bb 8b ff ff       	call   c000fb7c <malloc>
c0016fc1:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0016fc8:	6a 00                	push   0x0
c0016fca:	68 93 53 02 c0       	push   0xc0025393
c0016fcf:	6a 01                	push   0x1
c0016fd1:	50                   	push   eax
c0016fd2:	89 c3                	mov    ebx,eax
c0016fd4:	e8 0b fc ff ff       	call   c0016be4 <Process::Process(bool, char const*, Process*, char**)>
c0016fd9:	8b 83 a6 05 00 00    	mov    eax,DWORD PTR [ebx+0x5a6]
c0016fdf:	83 c4 14             	add    esp,0x14
c0016fe2:	89 1d 78 fa 02 c0    	mov    DWORD PTR ds:0xc002fa78,ebx
c0016fe8:	50                   	push   eax
c0016fe9:	e8 fb b3 ff ff       	call   c00123e9 <setActiveTerminal(VgaText*)>
c0016fee:	66 8b 83 a4 05 00 00 	mov    ax,WORD PTR [ebx+0x5a4]
c0016ff5:	c7 83 65 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x265],0x0
c0016fff:	83 c8 01             	or     eax,0x1
c0017002:	66 89 83 a4 05 00 00 	mov    WORD PTR [ebx+0x5a4],ax
c0017009:	8b 83 b2 05 00 00    	mov    eax,DWORD PTR [ebx+0x5b2]
c001700f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0017012:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c001701c:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c0017022:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c001702c:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0017032:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001703c:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0017046:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001704c:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0017052:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001705c:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0017066:	c7 04 24 00 01 00 00 	mov    DWORD PTR [esp],0x100
c001706d:	e8 0a 8b ff ff       	call   c000fb7c <malloc>
c0017072:	c7 83 6f 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x26f],0x0
c001707c:	c6 83 73 02 00 00 00 	mov    BYTE PTR [ebx+0x273],0x0
c0017083:	c6 83 74 02 00 00 00 	mov    BYTE PTR [ebx+0x274],0x0
c001708a:	c6 83 75 02 00 00 00 	mov    BYTE PTR [ebx+0x275],0x0
c0017091:	c6 83 76 02 00 00 00 	mov    BYTE PTR [ebx+0x276],0x0
c0017098:	89 83 14 02 00 00    	mov    DWORD PTR [ebx+0x214],eax
c001709e:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c00170a4:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c00170aa:	5a                   	pop    edx
c00170ab:	59                   	pop    ecx
c00170ac:	68 8f 53 02 c0       	push   0xc002538f
c00170b1:	50                   	push   eax
c00170b2:	e8 99 95 fe ff       	call   c0000650 <strcpy>
c00170b7:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c00170be:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c00170c2:	83 c4 14             	add    esp,0x14
c00170c5:	5b                   	pop    ebx
c00170c6:	5e                   	pop    esi
c00170c7:	e9 9d 91 fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>

c00170cc <schedule()>:
c00170cc:	8b 15 4c fa 02 c0    	mov    edx,DWORD PTR ds:0xc002fa4c
c00170d2:	85 d2                	test   edx,edx
c00170d4:	74 0e                	je     c00170e4 <schedule()+0x18>
c00170d6:	c7 05 48 fa 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002fa48,0x1
c00170e0:	c3                   	ret    
c00170e1:	8d 76 00             	lea    esi,[esi+0x0]
c00170e4:	53                   	push   ebx
c00170e5:	83 ec 14             	sub    esp,0x14
c00170e8:	68 6c fa 02 c0       	push   0xc002fa6c
c00170ed:	e8 aa ae 00 00       	call   c0021f9c <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00170f2:	83 c4 10             	add    esp,0x10
c00170f5:	84 c0                	test   al,al
c00170f7:	75 3f                	jne    c0017138 <schedule()+0x6c>
c00170f9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00170fe:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0017101:	83 fa 01             	cmp    edx,0x1
c0017104:	74 3a                	je     c0017140 <schedule()+0x74>
c0017106:	66 90                	xchg   ax,ax
c0017108:	83 ec 0c             	sub    esp,0xc
c001710b:	68 6c fa 02 c0       	push   0xc002fa6c
c0017110:	e8 a3 ae 00 00       	call   c0021fb8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0017115:	c7 04 24 6c fa 02 c0 	mov    DWORD PTR [esp],0xc002fa6c
c001711c:	89 c3                	mov    ebx,eax
c001711e:	e8 9d ae 00 00       	call   c0021fc0 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0017123:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001712a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001712d:	e8 4e f7 ff ff       	call   c0016880 <switchToThread(ThreadControlBlock*)>
c0017132:	83 c4 10             	add    esp,0x10
c0017135:	8d 76 00             	lea    esi,[esi+0x0]
c0017138:	83 c4 08             	add    esp,0x8
c001713b:	5b                   	pop    ebx
c001713c:	c3                   	ret    
c001713d:	8d 76 00             	lea    esi,[esi+0x0]
c0017140:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0017147:	83 ec 08             	sub    esp,0x8
c001714a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001714f:	50                   	push   eax
c0017150:	68 6c fa 02 c0       	push   0xc002fa6c
c0017155:	e8 22 af 00 00       	call   c002207c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001715a:	83 c4 10             	add    esp,0x10
c001715d:	eb a9                	jmp    c0017108 <schedule()+0x3c>
c001715f:	90                   	nop

c0017160 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0017160:	83 ec 0c             	sub    esp,0xc
c0017163:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017168:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001716c:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001716f:	e8 58 ff ff ff       	call   c00170cc <schedule()>
c0017174:	f0 83 2d 50 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa50,0x1
c001717c:	a1 50 fa 02 c0       	mov    eax,ds:0xc002fa50
c0017181:	85 c0                	test   eax,eax
c0017183:	75 03                	jne    c0017188 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x28>
c0017185:	fb                   	sti    
c0017186:	66 90                	xchg   ax,ax
c0017188:	83 c4 0c             	add    esp,0xc
c001718b:	c3                   	ret    

c001718c <blockTask(TaskState)>:
c001718c:	83 ec 0c             	sub    esp,0xc
c001718f:	fa                   	cli    
c0017190:	a1 50 fa 02 c0       	mov    eax,ds:0xc002fa50
c0017195:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017199:	83 c0 01             	add    eax,0x1
c001719c:	a3 50 fa 02 c0       	mov    ds:0xc002fa50,eax
c00171a1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00171a6:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00171a9:	e8 1e ff ff ff       	call   c00170cc <schedule()>
c00171ae:	f0 83 2d 50 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa50,0x1
c00171b6:	8b 15 50 fa 02 c0    	mov    edx,DWORD PTR ds:0xc002fa50
c00171bc:	85 d2                	test   edx,edx
c00171be:	75 04                	jne    c00171c4 <blockTask(TaskState)+0x38>
c00171c0:	fb                   	sti    
c00171c1:	8d 76 00             	lea    esi,[esi+0x0]
c00171c4:	83 c4 0c             	add    esp,0xc
c00171c7:	c3                   	ret    

c00171c8 <waitTask(int, int*, int)>:
c00171c8:	83 ec 18             	sub    esp,0x18
c00171cb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00171d0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00171d4:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c00171d7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00171db:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00171e0:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c00171e3:	6a 07                	push   0x7
c00171e5:	e8 a2 ff ff ff       	call   c001718c <blockTask(TaskState)>
c00171ea:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00171ef:	83 c4 10             	add    esp,0x10
c00171f2:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c00171f5:	85 d2                	test   edx,edx
c00171f7:	74 0b                	je     c0017204 <waitTask(int, int*, int)+0x3c>
c00171f9:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c00171fc:	89 02                	mov    DWORD PTR [edx],eax
c00171fe:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017203:	90                   	nop
c0017204:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c0017207:	83 c4 0c             	add    esp,0xc
c001720a:	c3                   	ret    
c001720b:	90                   	nop

c001720c <milliTenthSleepUntil(unsigned long long)>:
c001720c:	83 ec 0c             	sub    esp,0xc
c001720f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017213:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017217:	3b 05 50 cb 02 c0    	cmp    eax,DWORD PTR ds:0xc002cb50
c001721d:	89 d1                	mov    ecx,edx
c001721f:	1b 0d 54 cb 02 c0    	sbb    ecx,DWORD PTR ds:0xc002cb54
c0017225:	73 05                	jae    c001722c <milliTenthSleepUntil(unsigned long long)+0x20>
c0017227:	90                   	nop
c0017228:	83 c4 0c             	add    esp,0xc
c001722b:	c3                   	ret    
c001722c:	fa                   	cli    
c001722d:	8b 0d 50 fa 02 c0    	mov    ecx,DWORD PTR ds:0xc002fa50
c0017233:	83 ec 08             	sub    esp,0x8
c0017236:	83 c1 01             	add    ecx,0x1
c0017239:	89 0d 50 fa 02 c0    	mov    DWORD PTR ds:0xc002fa50,ecx
c001723f:	8b 0d 4c fa 02 c0    	mov    ecx,DWORD PTR ds:0xc002fa4c
c0017245:	83 c1 01             	add    ecx,0x1
c0017248:	89 0d 4c fa 02 c0    	mov    DWORD PTR ds:0xc002fa4c,ecx
c001724e:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0017254:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c0017257:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001725a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001725f:	50                   	push   eax
c0017260:	68 60 fa 02 c0       	push   0xc002fa60
c0017265:	e8 12 ae 00 00       	call   c002207c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001726a:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0017271:	e8 16 ff ff ff       	call   c001718c <blockTask(TaskState)>
c0017276:	a1 4c fa 02 c0       	mov    eax,ds:0xc002fa4c
c001727b:	83 c4 10             	add    esp,0x10
c001727e:	83 e8 01             	sub    eax,0x1
c0017281:	a3 4c fa 02 c0       	mov    ds:0xc002fa4c,eax
c0017286:	85 c0                	test   eax,eax
c0017288:	75 0a                	jne    c0017294 <milliTenthSleepUntil(unsigned long long)+0x88>
c001728a:	8b 15 48 fa 02 c0    	mov    edx,DWORD PTR ds:0xc002fa48
c0017290:	85 d2                	test   edx,edx
c0017292:	75 18                	jne    c00172ac <milliTenthSleepUntil(unsigned long long)+0xa0>
c0017294:	f0 83 2d 50 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa50,0x1
c001729c:	a1 50 fa 02 c0       	mov    eax,ds:0xc002fa50
c00172a1:	85 c0                	test   eax,eax
c00172a3:	75 83                	jne    c0017228 <milliTenthSleepUntil(unsigned long long)+0x1c>
c00172a5:	fb                   	sti    
c00172a6:	83 c4 0c             	add    esp,0xc
c00172a9:	c3                   	ret    
c00172aa:	66 90                	xchg   ax,ax
c00172ac:	c7 05 48 fa 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fa48,0x0
c00172b6:	e8 11 fe ff ff       	call   c00170cc <schedule()>
c00172bb:	eb d7                	jmp    c0017294 <milliTenthSleepUntil(unsigned long long)+0x88>
c00172bd:	8d 76 00             	lea    esi,[esi+0x0]

c00172c0 <milliTenthSleep(unsigned long long)>:
c00172c0:	a1 50 cb 02 c0       	mov    eax,ds:0xc002cb50
c00172c5:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c00172c9:	8b 15 54 cb 02 c0    	mov    edx,DWORD PTR ds:0xc002cb54
c00172cf:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c00172d3:	e9 34 ff ff ff       	jmp    c001720c <milliTenthSleepUntil(unsigned long long)>

c00172d8 <sleep(unsigned long long)>:
c00172d8:	69 4c 24 08 10 27 00 00 	imul   ecx,DWORD PTR [esp+0x8],0x2710
c00172e0:	b8 10 27 00 00       	mov    eax,0x2710
c00172e5:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c00172e9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00172ed:	01 ca                	add    edx,ecx
c00172ef:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00172f3:	eb cb                	jmp    c00172c0 <milliTenthSleep(unsigned long long)>
c00172f5:	8d 76 00             	lea    esi,[esi+0x0]

c00172f8 <sleep(unsigned int)>:
c00172f8:	83 ec 14             	sub    esp,0x14
c00172fb:	b8 10 27 00 00       	mov    eax,0x2710
c0017300:	f7 64 24 18          	mul    DWORD PTR [esp+0x18]
c0017304:	52                   	push   edx
c0017305:	50                   	push   eax
c0017306:	e8 b5 ff ff ff       	call   c00172c0 <milliTenthSleep(unsigned long long)>
c001730b:	83 c4 1c             	add    esp,0x1c
c001730e:	c3                   	ret    
c001730f:	90                   	nop

c0017310 <milliTenthSleep(unsigned int)>:
c0017310:	83 ec 14             	sub    esp,0x14
c0017313:	31 d2                	xor    edx,edx
c0017315:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017319:	03 05 50 cb 02 c0    	add    eax,DWORD PTR ds:0xc002cb50
c001731f:	13 15 54 cb 02 c0    	adc    edx,DWORD PTR ds:0xc002cb54
c0017325:	52                   	push   edx
c0017326:	50                   	push   eax
c0017327:	e8 e0 fe ff ff       	call   c001720c <milliTenthSleepUntil(unsigned long long)>
c001732c:	83 c4 1c             	add    esp,0x1c
c001732f:	c3                   	ret    

c0017330 <taskReturned>:
c0017330:	83 ec 18             	sub    esp,0x18
c0017333:	68 1c 54 02 c0       	push   0xc002541c
c0017338:	e8 4d 8b ff ff       	call   c000fe8a <KePanic(char const*)>
c001733d:	83 c4 10             	add    esp,0x10
c0017340:	83 ec 0c             	sub    esp,0xc
c0017343:	6a 02                	push   0x2
c0017345:	e8 42 fe ff ff       	call   c001718c <blockTask(TaskState)>
c001734a:	fa                   	cli    
c001734b:	a1 50 fa 02 c0       	mov    eax,ds:0xc002fa50
c0017350:	83 c0 01             	add    eax,0x1
c0017353:	a3 50 fa 02 c0       	mov    ds:0xc002fa50,eax
c0017358:	e8 6f fd ff ff       	call   c00170cc <schedule()>
c001735d:	f0 83 2d 50 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa50,0x1
c0017365:	8b 15 50 fa 02 c0    	mov    edx,DWORD PTR ds:0xc002fa50
c001736b:	83 c4 10             	add    esp,0x10
c001736e:	85 d2                	test   edx,edx
c0017370:	75 ce                	jne    c0017340 <taskReturned+0x10>
c0017372:	fb                   	sti    
c0017373:	eb cb                	jmp    c0017340 <taskReturned+0x10>
c0017375:	8d 76 00             	lea    esi,[esi+0x0]

c0017378 <Thr::processFromPID(int)>:
c0017378:	57                   	push   edi
c0017379:	56                   	push   esi
c001737a:	53                   	push   ebx
c001737b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001737f:	fa                   	cli    
c0017380:	8b 0d 50 fa 02 c0    	mov    ecx,DWORD PTR ds:0xc002fa50
c0017386:	83 ec 0c             	sub    esp,0xc
c0017389:	68 6c fa 02 c0       	push   0xc002fa6c
c001738e:	83 c1 01             	add    ecx,0x1
c0017391:	89 0d 50 fa 02 c0    	mov    DWORD PTR ds:0xc002fa50,ecx
c0017397:	e8 1c ac 00 00       	call   c0021fb8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001739c:	83 c4 10             	add    esp,0x10
c001739f:	89 c7                	mov    edi,eax
c00173a1:	eb 15                	jmp    c00173b8 <Thr::processFromPID(int)+0x40>
c00173a3:	90                   	nop
c00173a4:	83 ec 0c             	sub    esp,0xc
c00173a7:	68 6c fa 02 c0       	push   0xc002fa6c
c00173ac:	e8 07 ac 00 00       	call   c0021fb8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00173b1:	83 c4 10             	add    esp,0x10
c00173b4:	39 f8                	cmp    eax,edi
c00173b6:	74 50                	je     c0017408 <Thr::processFromPID(int)+0x90>
c00173b8:	83 ec 0c             	sub    esp,0xc
c00173bb:	68 6c fa 02 c0       	push   0xc002fa6c
c00173c0:	e8 f3 ab 00 00       	call   c0021fb8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00173c5:	c7 04 24 6c fa 02 c0 	mov    DWORD PTR [esp],0xc002fa6c
c00173cc:	89 c3                	mov    ebx,eax
c00173ce:	e8 ed ab 00 00       	call   c0021fc0 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00173d3:	58                   	pop    eax
c00173d4:	5a                   	pop    edx
c00173d5:	53                   	push   ebx
c00173d6:	68 6c fa 02 c0       	push   0xc002fa6c
c00173db:	e8 9c ac 00 00       	call   c002207c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00173e0:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00173e3:	83 c4 10             	add    esp,0x10
c00173e6:	39 30                	cmp    DWORD PTR [eax],esi
c00173e8:	75 ba                	jne    c00173a4 <Thr::processFromPID(int)+0x2c>
c00173ea:	f0 83 2d 50 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa50,0x1
c00173f2:	8b 0d 50 fa 02 c0    	mov    ecx,DWORD PTR ds:0xc002fa50
c00173f8:	85 c9                	test   ecx,ecx
c00173fa:	74 08                	je     c0017404 <Thr::processFromPID(int)+0x8c>
c00173fc:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00173ff:	90                   	nop
c0017400:	5b                   	pop    ebx
c0017401:	5e                   	pop    esi
c0017402:	5f                   	pop    edi
c0017403:	c3                   	ret    
c0017404:	fb                   	sti    
c0017405:	eb f5                	jmp    c00173fc <Thr::processFromPID(int)+0x84>
c0017407:	90                   	nop
c0017408:	f0 83 2d 50 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa50,0x1
c0017410:	8b 15 50 fa 02 c0    	mov    edx,DWORD PTR ds:0xc002fa50
c0017416:	31 c0                	xor    eax,eax
c0017418:	85 d2                	test   edx,edx
c001741a:	75 e4                	jne    c0017400 <Thr::processFromPID(int)+0x88>
c001741c:	fb                   	sti    
c001741d:	5b                   	pop    ebx
c001741e:	5e                   	pop    esi
c001741f:	5f                   	pop    edi
c0017420:	c3                   	ret    
c0017421:	8d 76 00             	lea    esi,[esi+0x0]

c0017424 <unblockTask(ThreadControlBlock*)>:
c0017424:	53                   	push   ebx
c0017425:	83 ec 08             	sub    esp,0x8
c0017428:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001742c:	fa                   	cli    
c001742d:	8b 15 50 fa 02 c0    	mov    edx,DWORD PTR ds:0xc002fa50
c0017433:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0017436:	83 c2 01             	add    edx,0x1
c0017439:	89 15 50 fa 02 c0    	mov    DWORD PTR ds:0xc002fa50,edx
c001743f:	85 c0                	test   eax,eax
c0017441:	74 6d                	je     c00174b0 <unblockTask(ThreadControlBlock*)+0x8c>
c0017443:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0017446:	83 f8 01             	cmp    eax,0x1
c0017449:	74 39                	je     c0017484 <unblockTask(ThreadControlBlock*)+0x60>
c001744b:	83 ec 0c             	sub    esp,0xc
c001744e:	68 6c fa 02 c0       	push   0xc002fa6c
c0017453:	e8 60 ab 00 00       	call   c0021fb8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0017458:	83 c4 10             	add    esp,0x10
c001745b:	85 c0                	test   eax,eax
c001745d:	75 1d                	jne    c001747c <unblockTask(ThreadControlBlock*)+0x58>
c001745f:	eb 63                	jmp    c00174c4 <unblockTask(ThreadControlBlock*)+0xa0>
c0017461:	8d 76 00             	lea    esi,[esi+0x0]
c0017464:	83 ec 08             	sub    esp,0x8
c0017467:	50                   	push   eax
c0017468:	68 6c fa 02 c0       	push   0xc002fa6c
c001746d:	e8 52 b0 00 00       	call   c00224c4 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0017472:	83 c4 10             	add    esp,0x10
c0017475:	85 c0                	test   eax,eax
c0017477:	74 4b                	je     c00174c4 <unblockTask(ThreadControlBlock*)+0xa0>
c0017479:	8d 76 00             	lea    esi,[esi+0x0]
c001747c:	39 c3                	cmp    ebx,eax
c001747e:	75 e4                	jne    c0017464 <unblockTask(ThreadControlBlock*)+0x40>
c0017480:	eb 12                	jmp    c0017494 <unblockTask(ThreadControlBlock*)+0x70>
c0017482:	66 90                	xchg   ax,ax
c0017484:	83 ec 0c             	sub    esp,0xc
c0017487:	68 b1 53 02 c0       	push   0xc00253b1
c001748c:	e8 d5 fa fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0017491:	83 c4 10             	add    esp,0x10
c0017494:	f0 83 2d 50 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa50,0x1
c001749c:	a1 50 fa 02 c0       	mov    eax,ds:0xc002fa50
c00174a1:	85 c0                	test   eax,eax
c00174a3:	75 03                	jne    c00174a8 <unblockTask(ThreadControlBlock*)+0x84>
c00174a5:	fb                   	sti    
c00174a6:	66 90                	xchg   ax,ax
c00174a8:	83 c4 08             	add    esp,0x8
c00174ab:	5b                   	pop    ebx
c00174ac:	c3                   	ret    
c00174ad:	8d 76 00             	lea    esi,[esi+0x0]
c00174b0:	83 ec 0c             	sub    esp,0xc
c00174b3:	68 9a 53 02 c0       	push   0xc002539a
c00174b8:	e8 a9 fa fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00174bd:	83 c4 10             	add    esp,0x10
c00174c0:	eb d2                	jmp    c0017494 <unblockTask(ThreadControlBlock*)+0x70>
c00174c2:	66 90                	xchg   ax,ax
c00174c4:	83 ec 08             	sub    esp,0x8
c00174c7:	53                   	push   ebx
c00174c8:	68 6c fa 02 c0       	push   0xc002fa6c
c00174cd:	e8 aa ab 00 00       	call   c002207c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00174d2:	83 c4 10             	add    esp,0x10
c00174d5:	eb bd                	jmp    c0017494 <unblockTask(ThreadControlBlock*)+0x70>
c00174d7:	90                   	nop

c00174d8 <cleanupTerminatedTask(ThreadControlBlock*)>:
c00174d8:	55                   	push   ebp
c00174d9:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00174de:	57                   	push   edi
c00174df:	56                   	push   esi
c00174e0:	53                   	push   ebx
c00174e1:	83 ec 1c             	sub    esp,0x1c
c00174e4:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00174e8:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c00174eb:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c00174ee:	d3 c0                	rol    eax,cl
c00174f0:	66 8b 8a a4 05 00 00 	mov    cx,WORD PTR [edx+0x5a4]
c00174f7:	21 c8                	and    eax,ecx
c00174f9:	66 89 82 a4 05 00 00 	mov    WORD PTR [edx+0x5a4],ax
c0017500:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0017503:	66 83 b8 a4 05 00 00 00 	cmp    WORD PTR [eax+0x5a4],0x0
c001750b:	0f 85 af 01 00 00    	jne    c00176c0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e8>
c0017511:	8b a8 b6 05 00 00    	mov    ebp,DWORD PTR [eax+0x5b6]
c0017517:	85 ed                	test   ebp,ebp
c0017519:	7e 29                	jle    c0017544 <cleanupTerminatedTask(ThreadControlBlock*)+0x6c>
c001751b:	31 f6                	xor    esi,esi
c001751d:	8d 76 00             	lea    esi,[esi+0x0]
c0017520:	8b bc b0 ba 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x5ba]
c0017527:	83 ec 0c             	sub    esp,0xc
c001752a:	83 c6 01             	add    esi,0x1
c001752d:	57                   	push   edi
c001752e:	e8 59 86 ff ff       	call   c000fb8c <free>
c0017533:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0017536:	83 c4 10             	add    esp,0x10
c0017539:	39 b0 b6 05 00 00    	cmp    DWORD PTR [eax+0x5b6],esi
c001753f:	7f df                	jg     c0017520 <cleanupTerminatedTask(ThreadControlBlock*)+0x48>
c0017541:	8d 76 00             	lea    esi,[esi+0x0]
c0017544:	c7 80 b6 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x5b6],0x0
c001754e:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c0017551:	8b ae ba 07 00 00    	mov    ebp,DWORD PTR [esi+0x7ba]
c0017557:	89 f7                	mov    edi,esi
c0017559:	85 ed                	test   ebp,ebp
c001755b:	74 1b                	je     c0017578 <cleanupTerminatedTask(ThreadControlBlock*)+0xa0>
c001755d:	83 ec 0c             	sub    esp,0xc
c0017560:	55                   	push   ebp
c0017561:	e8 94 71 ff ff       	call   c000e6fa <EnvVarContainer::~EnvVarContainer()>
c0017566:	59                   	pop    ecx
c0017567:	5e                   	pop    esi
c0017568:	6a 0c                	push   0xc
c001756a:	55                   	push   ebp
c001756b:	e8 85 5d ff ff       	call   c000d2f5 <operator delete(void*, unsigned long)>
c0017570:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c0017573:	83 c4 10             	add    esp,0x10
c0017576:	89 f7                	mov    edi,esi
c0017578:	8b 86 aa 05 00 00    	mov    eax,DWORD PTR [esi+0x5aa]
c001757e:	85 c0                	test   eax,eax
c0017580:	0f 84 ae 00 00 00    	je     c0017634 <cleanupTerminatedTask(ThreadControlBlock*)+0x15c>
c0017586:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c0017589:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001758d:	31 c9                	xor    ecx,ecx
c001758f:	eb 17                	jmp    c00175a8 <cleanupTerminatedTask(ThreadControlBlock*)+0xd0>
c0017591:	8d 76 00             	lea    esi,[esi+0x0]
c0017594:	83 c1 01             	add    ecx,0x1
c0017597:	83 f9 10             	cmp    ecx,0x10
c001759a:	0f 84 94 00 00 00    	je     c0017634 <cleanupTerminatedTask(ThreadControlBlock*)+0x15c>
c00175a0:	8b 86 aa 05 00 00    	mov    eax,DWORD PTR [esi+0x5aa]
c00175a6:	66 90                	xchg   ax,ax
c00175a8:	0f b7 90 a4 05 00 00 	movzx  edx,WORD PTR [eax+0x5a4]
c00175af:	d3 fa                	sar    edx,cl
c00175b1:	80 e2 01             	and    dl,0x1
c00175b4:	74 de                	je     c0017594 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00175b6:	6b d1 73             	imul   edx,ecx,0x73
c00175b9:	01 d0                	add    eax,edx
c00175bb:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c00175c1:	83 fd 07             	cmp    ebp,0x7
c00175c4:	75 ce                	jne    c0017594 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00175c6:	05 40 02 00 00       	add    eax,0x240
c00175cb:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c00175ce:	83 fd ff             	cmp    ebp,0xffffffff
c00175d1:	0f 8c f1 00 00 00    	jl     c00176c8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f0>
c00175d7:	0f 84 af 01 00 00    	je     c001778c <cleanupTerminatedTask(ThreadControlBlock*)+0x2b4>
c00175dd:	85 ed                	test   ebp,ebp
c00175df:	0f 84 93 01 00 00    	je     c0017778 <cleanupTerminatedTask(ThreadControlBlock*)+0x2a0>
c00175e5:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c00175e7:	75 ab                	jne    c0017594 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00175e9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00175ed:	8b 86 aa 05 00 00    	mov    eax,DWORD PTR [esi+0x5aa]
c00175f3:	01 d0                	add    eax,edx
c00175f5:	8d 76 00             	lea    esi,[esi+0x0]
c00175f8:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00175fc:	83 ec 0c             	sub    esp,0xc
c00175ff:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c0017605:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0017608:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c001760e:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0017615:	50                   	push   eax
c0017616:	e8 09 fe ff ff       	call   c0017424 <unblockTask(ThreadControlBlock*)>
c001761b:	83 c4 10             	add    esp,0x10
c001761e:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c0017621:	89 f7                	mov    edi,esi
c0017623:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017627:	83 c1 01             	add    ecx,0x1
c001762a:	83 f9 10             	cmp    ecx,0x10
c001762d:	0f 85 6d ff ff ff    	jne    c00175a0 <cleanupTerminatedTask(ThreadControlBlock*)+0xc8>
c0017633:	90                   	nop
c0017634:	8b 86 a6 05 00 00    	mov    eax,DWORD PTR [esi+0x5a6]
c001763a:	85 c0                	test   eax,eax
c001763c:	74 62                	je     c00176a0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c8>
c001763e:	8b 96 aa 05 00 00    	mov    edx,DWORD PTR [esi+0x5aa]
c0017644:	3b 82 a6 05 00 00    	cmp    eax,DWORD PTR [edx+0x5a6]
c001764a:	74 54                	je     c00176a0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c8>
c001764c:	83 ec 0c             	sub    esp,0xc
c001764f:	68 6c fa 02 c0       	push   0xc002fa6c
c0017654:	e8 5f a9 00 00       	call   c0021fb8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0017659:	c7 04 24 6c fa 02 c0 	mov    DWORD PTR [esp],0xc002fa6c
c0017660:	89 c7                	mov    edi,eax
c0017662:	e8 35 a9 00 00       	call   c0021f9c <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0017667:	83 c4 10             	add    esp,0x10
c001766a:	84 c0                	test   al,al
c001766c:	0f 84 ce 00 00 00    	je     c0017740 <cleanupTerminatedTask(ThreadControlBlock*)+0x268>
c0017672:	66 90                	xchg   ax,ax
c0017674:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0017677:	8b 90 a6 05 00 00    	mov    edx,DWORD PTR [eax+0x5a6]
c001767d:	85 d2                	test   edx,edx
c001767f:	74 0f                	je     c0017690 <cleanupTerminatedTask(ThreadControlBlock*)+0x1b8>
c0017681:	8b 02                	mov    eax,DWORD PTR [edx]
c0017683:	83 ec 0c             	sub    esp,0xc
c0017686:	52                   	push   edx
c0017687:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001768a:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001768d:	83 c4 10             	add    esp,0x10
c0017690:	c7 80 a6 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x5a6],0x0
c001769a:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001769d:	8d 76 00             	lea    esi,[esi+0x0]
c00176a0:	8b 9f b2 05 00 00    	mov    ebx,DWORD PTR [edi+0x5b2]
c00176a6:	85 db                	test   ebx,ebx
c00176a8:	74 16                	je     c00176c0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e8>
c00176aa:	83 ec 0c             	sub    esp,0xc
c00176ad:	53                   	push   ebx
c00176ae:	e8 ff c1 ff ff       	call   c00138b2 <VAS::~VAS()>
c00176b3:	58                   	pop    eax
c00176b4:	5a                   	pop    edx
c00176b5:	6a 14                	push   0x14
c00176b7:	53                   	push   ebx
c00176b8:	e8 38 5c ff ff       	call   c000d2f5 <operator delete(void*, unsigned long)>
c00176bd:	83 c4 10             	add    esp,0x10
c00176c0:	83 c4 1c             	add    esp,0x1c
c00176c3:	5b                   	pop    ebx
c00176c4:	5e                   	pop    esi
c00176c5:	5f                   	pop    edi
c00176c6:	5d                   	pop    ebp
c00176c7:	c3                   	ret    
c00176c8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00176cc:	83 ec 0c             	sub    esp,0xc
c00176cf:	68 50 54 02 c0       	push   0xc0025450
c00176d4:	e8 b1 87 ff ff       	call   c000fe8a <KePanic(char const*)>
c00176d9:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c00176dc:	83 c4 10             	add    esp,0x10
c00176df:	89 f7                	mov    edi,esi
c00176e1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00176e5:	e9 aa fe ff ff       	jmp    c0017594 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00176ea:	66 90                	xchg   ax,ax
c00176ec:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c00176f2:	39 82 a6 05 00 00    	cmp    DWORD PTR [edx+0x5a6],eax
c00176f8:	75 1e                	jne    c0017718 <cleanupTerminatedTask(ThreadControlBlock*)+0x240>
c00176fa:	83 ec 0c             	sub    esp,0xc
c00176fd:	68 b8 54 02 c0       	push   0xc00254b8
c0017702:	e8 5f f8 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0017707:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001770e:	e8 79 fa ff ff       	call   c001718c <blockTask(TaskState)>
c0017713:	83 c4 10             	add    esp,0x10
c0017716:	66 90                	xchg   ax,ax
c0017718:	83 ec 08             	sub    esp,0x8
c001771b:	56                   	push   esi
c001771c:	68 6c fa 02 c0       	push   0xc002fa6c
c0017721:	e8 56 a9 00 00       	call   c002207c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0017726:	c7 04 24 6c fa 02 c0 	mov    DWORD PTR [esp],0xc002fa6c
c001772d:	e8 86 a8 00 00       	call   c0021fb8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0017732:	83 c4 10             	add    esp,0x10
c0017735:	39 f8                	cmp    eax,edi
c0017737:	0f 84 37 ff ff ff    	je     c0017674 <cleanupTerminatedTask(ThreadControlBlock*)+0x19c>
c001773d:	8d 76 00             	lea    esi,[esi+0x0]
c0017740:	83 ec 0c             	sub    esp,0xc
c0017743:	68 6c fa 02 c0       	push   0xc002fa6c
c0017748:	e8 6b a8 00 00       	call   c0021fb8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001774d:	c7 04 24 6c fa 02 c0 	mov    DWORD PTR [esp],0xc002fa6c
c0017754:	89 c6                	mov    esi,eax
c0017756:	e8 65 a8 00 00       	call   c0021fc0 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001775b:	83 c4 10             	add    esp,0x10
c001775e:	39 f3                	cmp    ebx,esi
c0017760:	74 b6                	je     c0017718 <cleanupTerminatedTask(ThreadControlBlock*)+0x240>
c0017762:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c0017765:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0017768:	39 82 aa 05 00 00    	cmp    DWORD PTR [edx+0x5aa],eax
c001776e:	75 a8                	jne    c0017718 <cleanupTerminatedTask(ThreadControlBlock*)+0x240>
c0017770:	e9 77 ff ff ff       	jmp    c00176ec <cleanupTerminatedTask(ThreadControlBlock*)+0x214>
c0017775:	8d 76 00             	lea    esi,[esi+0x0]
c0017778:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001777c:	83 ec 0c             	sub    esp,0xc
c001777f:	68 84 54 02 c0       	push   0xc0025484
c0017784:	e9 4b ff ff ff       	jmp    c00176d4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1fc>
c0017789:	8d 76 00             	lea    esi,[esi+0x0]
c001778c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0017790:	8b 36                	mov    esi,DWORD PTR [esi]
c0017792:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c0017795:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0017798:	8b b8 aa 05 00 00    	mov    edi,DWORD PTR [eax+0x5aa]
c001779e:	01 d7                	add    edi,edx
c00177a0:	89 f8                	mov    eax,edi
c00177a2:	e9 51 fe ff ff       	jmp    c00175f8 <cleanupTerminatedTask(ThreadControlBlock*)+0x120>
c00177a7:	90                   	nop

c00177a8 <cleanerTaskFunction(void*)>:
c00177a8:	53                   	push   ebx
c00177a9:	83 ec 08             	sub    esp,0x8
c00177ac:	f0 83 2d 50 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa50,0x1
c00177b4:	a1 50 fa 02 c0       	mov    eax,ds:0xc002fa50
c00177b9:	85 c0                	test   eax,eax
c00177bb:	75 03                	jne    c00177c0 <cleanerTaskFunction(void*)+0x18>
c00177bd:	fb                   	sti    
c00177be:	66 90                	xchg   ax,ax
c00177c0:	fa                   	cli    
c00177c1:	a1 50 fa 02 c0       	mov    eax,ds:0xc002fa50
c00177c6:	83 c0 01             	add    eax,0x1
c00177c9:	80 3d 34 fa 02 c0 00 	cmp    BYTE PTR ds:0xc002fa34,0x0
c00177d0:	a3 50 fa 02 c0       	mov    ds:0xc002fa50,eax
c00177d5:	0f 85 c9 00 00 00    	jne    c00178a4 <cleanerTaskFunction(void*)+0xfc>
c00177db:	83 ec 0c             	sub    esp,0xc
c00177de:	6a 02                	push   0x2
c00177e0:	e8 7b f9 ff ff       	call   c0017160 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00177e5:	83 c4 10             	add    esp,0x10
c00177e8:	c6 05 34 fa 02 c0 00 	mov    BYTE PTR ds:0xc002fa34,0x0
c00177ef:	fa                   	cli    
c00177f0:	8b 0d 50 fa 02 c0    	mov    ecx,DWORD PTR ds:0xc002fa50
c00177f6:	8b 1d 4c fa 02 c0    	mov    ebx,DWORD PTR ds:0xc002fa4c
c00177fc:	83 c1 01             	add    ecx,0x1
c00177ff:	89 0d 50 fa 02 c0    	mov    DWORD PTR ds:0xc002fa50,ecx
c0017805:	83 c3 01             	add    ebx,0x1
c0017808:	89 1d 4c fa 02 c0    	mov    DWORD PTR ds:0xc002fa4c,ebx
c001780e:	fa                   	cli    
c001780f:	a1 50 fa 02 c0       	mov    eax,ds:0xc002fa50
c0017814:	83 c0 01             	add    eax,0x1
c0017817:	a3 50 fa 02 c0       	mov    ds:0xc002fa50,eax
c001781c:	eb 2a                	jmp    c0017848 <cleanerTaskFunction(void*)+0xa0>
c001781e:	66 90                	xchg   ax,ax
c0017820:	83 ec 0c             	sub    esp,0xc
c0017823:	68 54 fa 02 c0       	push   0xc002fa54
c0017828:	e8 8b a7 00 00       	call   c0021fb8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001782d:	c7 04 24 54 fa 02 c0 	mov    DWORD PTR [esp],0xc002fa54
c0017834:	89 c3                	mov    ebx,eax
c0017836:	e8 85 a7 00 00       	call   c0021fc0 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001783b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001783e:	e8 95 fc ff ff       	call   c00174d8 <cleanupTerminatedTask(ThreadControlBlock*)>
c0017843:	83 c4 10             	add    esp,0x10
c0017846:	66 90                	xchg   ax,ax
c0017848:	83 ec 0c             	sub    esp,0xc
c001784b:	68 54 fa 02 c0       	push   0xc002fa54
c0017850:	e8 47 a7 00 00       	call   c0021f9c <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0017855:	83 c4 10             	add    esp,0x10
c0017858:	84 c0                	test   al,al
c001785a:	74 c4                	je     c0017820 <cleanerTaskFunction(void*)+0x78>
c001785c:	f0 83 2d 50 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa50,0x1
c0017864:	8b 15 50 fa 02 c0    	mov    edx,DWORD PTR ds:0xc002fa50
c001786a:	85 d2                	test   edx,edx
c001786c:	75 02                	jne    c0017870 <cleanerTaskFunction(void*)+0xc8>
c001786e:	fb                   	sti    
c001786f:	90                   	nop
c0017870:	a1 4c fa 02 c0       	mov    eax,ds:0xc002fa4c
c0017875:	83 e8 01             	sub    eax,0x1
c0017878:	a3 4c fa 02 c0       	mov    ds:0xc002fa4c,eax
c001787d:	0f 85 29 ff ff ff    	jne    c00177ac <cleanerTaskFunction(void*)+0x4>
c0017883:	a1 48 fa 02 c0       	mov    eax,ds:0xc002fa48
c0017888:	85 c0                	test   eax,eax
c001788a:	0f 84 1c ff ff ff    	je     c00177ac <cleanerTaskFunction(void*)+0x4>
c0017890:	c7 05 48 fa 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fa48,0x0
c001789a:	e8 2d f8 ff ff       	call   c00170cc <schedule()>
c001789f:	e9 08 ff ff ff       	jmp    c00177ac <cleanerTaskFunction(void*)+0x4>
c00178a4:	f0 83 2d 50 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa50,0x1
c00178ac:	a1 50 fa 02 c0       	mov    eax,ds:0xc002fa50
c00178b1:	85 c0                	test   eax,eax
c00178b3:	0f 85 2f ff ff ff    	jne    c00177e8 <cleanerTaskFunction(void*)+0x40>
c00178b9:	fb                   	sti    
c00178ba:	e9 29 ff ff ff       	jmp    c00177e8 <cleanerTaskFunction(void*)+0x40>
c00178bf:	90                   	nop

c00178c0 <terminateTask(int)>:
c00178c0:	83 ec 14             	sub    esp,0x14
c00178c3:	fa                   	cli    
c00178c4:	a1 50 fa 02 c0       	mov    eax,ds:0xc002fa50
c00178c9:	83 c0 01             	add    eax,0x1
c00178cc:	a3 50 fa 02 c0       	mov    ds:0xc002fa50,eax
c00178d1:	a1 4c fa 02 c0       	mov    eax,ds:0xc002fa4c
c00178d6:	83 c0 01             	add    eax,0x1
c00178d9:	a3 4c fa 02 c0       	mov    ds:0xc002fa4c,eax
c00178de:	fa                   	cli    
c00178df:	a1 50 fa 02 c0       	mov    eax,ds:0xc002fa50
c00178e4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00178e8:	83 c0 01             	add    eax,0x1
c00178eb:	a3 50 fa 02 c0       	mov    ds:0xc002fa50,eax
c00178f0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00178f5:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c00178f8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00178fd:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0017900:	50                   	push   eax
c0017901:	68 54 fa 02 c0       	push   0xc002fa54
c0017906:	e8 71 a7 00 00       	call   c002207c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001790b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017910:	83 c4 10             	add    esp,0x10
c0017913:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001791a:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c001791f:	85 c0                	test   eax,eax
c0017921:	0f 84 81 00 00 00    	je     c00179a8 <terminateTask(int)+0xe8>
c0017927:	c6 05 34 fa 02 c0 01 	mov    BYTE PTR ds:0xc002fa34,0x1
c001792e:	83 ec 0c             	sub    esp,0xc
c0017931:	50                   	push   eax
c0017932:	e8 ed fa ff ff       	call   c0017424 <unblockTask(ThreadControlBlock*)>
c0017937:	83 c4 10             	add    esp,0x10
c001793a:	66 90                	xchg   ax,ax
c001793c:	f0 83 2d 50 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa50,0x1
c0017944:	a1 50 fa 02 c0       	mov    eax,ds:0xc002fa50
c0017949:	85 c0                	test   eax,eax
c001794b:	75 03                	jne    c0017950 <terminateTask(int)+0x90>
c001794d:	fb                   	sti    
c001794e:	66 90                	xchg   ax,ax
c0017950:	a1 4c fa 02 c0       	mov    eax,ds:0xc002fa4c
c0017955:	83 e8 01             	sub    eax,0x1
c0017958:	a3 4c fa 02 c0       	mov    ds:0xc002fa4c,eax
c001795d:	75 09                	jne    c0017968 <terminateTask(int)+0xa8>
c001795f:	83 3d 48 fa 02 c0 00 	cmp    DWORD PTR ds:0xc002fa48,0x0
c0017966:	75 54                	jne    c00179bc <terminateTask(int)+0xfc>
c0017968:	f0 83 2d 50 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa50,0x1
c0017970:	8b 0d 50 fa 02 c0    	mov    ecx,DWORD PTR ds:0xc002fa50
c0017976:	85 c9                	test   ecx,ecx
c0017978:	75 06                	jne    c0017980 <terminateTask(int)+0xc0>
c001797a:	66 90                	xchg   ax,ax
c001797c:	fb                   	sti    
c001797d:	8d 76 00             	lea    esi,[esi+0x0]
c0017980:	fa                   	cli    
c0017981:	a1 50 fa 02 c0       	mov    eax,ds:0xc002fa50
c0017986:	83 c0 01             	add    eax,0x1
c0017989:	a3 50 fa 02 c0       	mov    ds:0xc002fa50,eax
c001798e:	e8 39 f7 ff ff       	call   c00170cc <schedule()>
c0017993:	f0 83 2d 50 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa50,0x1
c001799b:	8b 15 50 fa 02 c0    	mov    edx,DWORD PTR ds:0xc002fa50
c00179a1:	85 d2                	test   edx,edx
c00179a3:	75 db                	jne    c0017980 <terminateTask(int)+0xc0>
c00179a5:	eb d5                	jmp    c001797c <terminateTask(int)+0xbc>
c00179a7:	90                   	nop
c00179a8:	83 ec 0c             	sub    esp,0xc
c00179ab:	68 c8 53 02 c0       	push   0xc00253c8
c00179b0:	e8 b1 f5 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00179b5:	83 c4 10             	add    esp,0x10
c00179b8:	eb 82                	jmp    c001793c <terminateTask(int)+0x7c>
c00179ba:	66 90                	xchg   ax,ax
c00179bc:	c7 05 48 fa 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fa48,0x0
c00179c6:	e8 01 f7 ff ff       	call   c00170cc <schedule()>
c00179cb:	eb 9b                	jmp    c0017968 <terminateTask(int)+0xa8>
c00179cd:	8d 76 00             	lea    esi,[esi+0x0]

c00179d0 <Thr::terminateFromIRQ(int)>:
c00179d0:	83 ec 18             	sub    esp,0x18
c00179d3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00179d7:	50                   	push   eax
c00179d8:	e8 e3 fe ff ff       	call   c00178c0 <terminateTask(int)>
c00179dd:	8d 76 00             	lea    esi,[esi+0x0]

c00179e0 <__static_initialization_and_destruction_0(int, int)>:
c00179e0:	83 ec 0c             	sub    esp,0xc
c00179e3:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00179e8:	0f 85 8e 00 00 00    	jne    c0017a7c <__static_initialization_and_destruction_0(int, int)+0x9c>
c00179ee:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00179f6:	0f 85 80 00 00 00    	jne    c0017a7c <__static_initialization_and_destruction_0(int, int)+0x9c>
c00179fc:	83 ec 0c             	sub    esp,0xc
c00179ff:	68 6c fa 02 c0       	push   0xc002fa6c
c0017a04:	e8 13 ab 00 00       	call   c002251c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0017a09:	83 c4 10             	add    esp,0x10
c0017a0c:	83 ec 04             	sub    esp,0x4
c0017a0f:	68 d0 67 02 c0       	push   0xc00267d0
c0017a14:	68 6c fa 02 c0       	push   0xc002fa6c
c0017a19:	68 cc 24 02 c0       	push   0xc00224cc
c0017a1e:	e8 82 58 ff ff       	call   c000d2a5 <__cxa_atexit>
c0017a23:	83 c4 10             	add    esp,0x10
c0017a26:	83 ec 0c             	sub    esp,0xc
c0017a29:	68 60 fa 02 c0       	push   0xc002fa60
c0017a2e:	e8 e9 aa 00 00       	call   c002251c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0017a33:	83 c4 10             	add    esp,0x10
c0017a36:	83 ec 04             	sub    esp,0x4
c0017a39:	68 d0 67 02 c0       	push   0xc00267d0
c0017a3e:	68 60 fa 02 c0       	push   0xc002fa60
c0017a43:	68 cc 24 02 c0       	push   0xc00224cc
c0017a48:	e8 58 58 ff ff       	call   c000d2a5 <__cxa_atexit>
c0017a4d:	83 c4 10             	add    esp,0x10
c0017a50:	83 ec 0c             	sub    esp,0xc
c0017a53:	68 54 fa 02 c0       	push   0xc002fa54
c0017a58:	e8 bf aa 00 00       	call   c002251c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0017a5d:	83 c4 10             	add    esp,0x10
c0017a60:	83 ec 04             	sub    esp,0x4
c0017a63:	68 d0 67 02 c0       	push   0xc00267d0
c0017a68:	68 54 fa 02 c0       	push   0xc002fa54
c0017a6d:	68 cc 24 02 c0       	push   0xc00224cc
c0017a72:	e8 2e 58 ff ff       	call   c000d2a5 <__cxa_atexit>
c0017a77:	83 c4 10             	add    esp,0x10
c0017a7a:	66 90                	xchg   ax,ax
c0017a7c:	90                   	nop
c0017a7d:	83 c4 0c             	add    esp,0xc
c0017a80:	c3                   	ret    
c0017a81:	8d 76 00             	lea    esi,[esi+0x0]

c0017a84 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0017a84:	83 ec 0c             	sub    esp,0xc
c0017a87:	83 ec 08             	sub    esp,0x8
c0017a8a:	68 ff ff 00 00       	push   0xffff
c0017a8f:	6a 01                	push   0x1
c0017a91:	e8 4a ff ff ff       	call   c00179e0 <__static_initialization_and_destruction_0(int, int)>
c0017a96:	83 c4 10             	add    esp,0x10
c0017a99:	83 c4 0c             	add    esp,0xc
c0017a9c:	c3                   	ret    

c0017a9d <Vm::inbv(unsigned short)>:
c0017a9d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0017aa1:	66 81 fa fe fe       	cmp    dx,0xfefe
c0017aa6:	74 02                	je     c0017aaa <Vm::inbv(unsigned short)+0xd>
c0017aa8:	ec                   	in     al,dx
c0017aa9:	c3                   	ret    
c0017aaa:	a0 b0 fa 02 c0       	mov    al,ds:0xc002fab0
c0017aaf:	c3                   	ret    

c0017ab0 <Vm::outbv(unsigned short, unsigned char)>:
c0017ab0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0017ab4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017ab8:	66 81 fa fe fe       	cmp    dx,0xfefe
c0017abd:	74 02                	je     c0017ac1 <Vm::outbv(unsigned short, unsigned char)+0x11>
c0017abf:	ee                   	out    dx,al
c0017ac0:	c3                   	ret    
c0017ac1:	8b 0d b0 fa 02 c0    	mov    ecx,DWORD PTR ds:0xc002fab0
c0017ac7:	88 81 c0 fa 02 c0    	mov    BYTE PTR [ecx-0x3ffd0540],al
c0017acd:	8d 51 01             	lea    edx,[ecx+0x1]
c0017ad0:	b8 1f 00 00 00       	mov    eax,0x1f
c0017ad5:	83 fa 20             	cmp    edx,0x20
c0017ad8:	0f 44 d0             	cmove  edx,eax
c0017adb:	89 15 b0 fa 02 c0    	mov    DWORD PTR ds:0xc002fab0,edx
c0017ae1:	c3                   	ret    

c0017ae2 <Vm::realToLinear(unsigned short, unsigned short)>:
c0017ae2:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0017ae7:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0017aec:	c1 e0 04             	shl    eax,0x4
c0017aef:	01 d0                	add    eax,edx
c0017af1:	c3                   	ret    

c0017af2 <Vm::getSegment(unsigned int)>:
c0017af2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017af6:	c1 e8 10             	shr    eax,0x10
c0017af9:	c3                   	ret    

c0017afa <Vm::getOffset(unsigned int)>:
c0017afa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017afe:	c3                   	ret    

c0017aff <Vm::mainloop2()>:
c0017aff:	83 ec 18             	sub    esp,0x18
c0017b02:	fa                   	cli    
c0017b03:	6a 02                	push   0x2
c0017b05:	a1 50 fa 02 c0       	mov    eax,ds:0xc002fa50
c0017b0a:	c6 05 a9 fa 02 c0 01 	mov    BYTE PTR ds:0xc002faa9,0x1
c0017b11:	83 c0 01             	add    eax,0x1
c0017b14:	a3 50 fa 02 c0       	mov    ds:0xc002fa50,eax
c0017b19:	e8 42 f6 ff ff       	call   c0017160 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0017b1e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017b23:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c0017b27:	52                   	push   edx
c0017b28:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c0017b2c:	52                   	push   edx
c0017b2d:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0017b31:	52                   	push   edx
c0017b32:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c0017b36:	50                   	push   eax
c0017b37:	e8 d3 86 fe ff       	call   c000020f <goToVM86>
c0017b3c:	83 c4 2c             	add    esp,0x2c
c0017b3f:	c3                   	ret    

c0017b40 <Vm::mainVm8086Loop(void*)>:
c0017b40:	f0 83 2d 50 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa50,0x1
c0017b48:	a1 50 fa 02 c0       	mov    eax,ds:0xc002fa50
c0017b4d:	85 c0                	test   eax,eax
c0017b4f:	75 01                	jne    c0017b52 <Vm::mainVm8086Loop(void*)+0x12>
c0017b51:	fb                   	sti    
c0017b52:	eb ab                	jmp    c0017aff <Vm::mainloop2()>

c0017b54 <Vm::mainloop3(unsigned long)>:
c0017b54:	83 ec 18             	sub    esp,0x18
c0017b57:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017b5b:	fa                   	cli    
c0017b5c:	6a 02                	push   0x2
c0017b5e:	8b 15 50 fa 02 c0    	mov    edx,DWORD PTR ds:0xc002fa50
c0017b64:	c6 05 a8 fa 02 c0 01 	mov    BYTE PTR ds:0xc002faa8,0x1
c0017b6b:	a3 a4 fa 02 c0       	mov    ds:0xc002faa4,eax
c0017b70:	83 c2 01             	add    edx,0x1
c0017b73:	89 15 50 fa 02 c0    	mov    DWORD PTR ds:0xc002fa50,edx
c0017b79:	e8 e2 f5 ff ff       	call   c0017160 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0017b7e:	83 c4 1c             	add    esp,0x1c
c0017b81:	e9 79 ff ff ff       	jmp    c0017aff <Vm::mainloop2()>

c0017b86 <Vm::initialise8086()>:
c0017b86:	83 ec 0c             	sub    esp,0xc
c0017b89:	68 80 00 00 00       	push   0x80
c0017b8e:	a1 78 fa 02 c0       	mov    eax,ds:0xc002fa78
c0017b93:	6a 00                	push   0x0
c0017b95:	68 40 7b 01 c0       	push   0xc0017b40
c0017b9a:	50                   	push   eax
c0017b9b:	e8 84 f2 ff ff       	call   c0016e24 <Process::createThread(void (*)(void*), void*, int)>
c0017ba0:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0017ba7:	68 10 01 00 00       	push   0x110
c0017bac:	6a 00                	push   0x0
c0017bae:	6a 00                	push   0x0
c0017bb0:	a3 ac fa 02 c0       	mov    ds:0xc002faac,eax
c0017bb5:	a1 78 fa 02 c0       	mov    eax,ds:0xc002fa78
c0017bba:	8b 90 b2 05 00 00    	mov    edx,DWORD PTR [eax+0x5b2]
c0017bc0:	52                   	push   edx
c0017bc1:	e8 4e c0 ff ff       	call   c0013c14 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017bc6:	83 c4 2c             	add    esp,0x2c
c0017bc9:	c3                   	ret    

c0017bca <Vm::resetConventionalMemory8086()>:
c0017bca:	c3                   	ret    

c0017bcb <Vm::finish8086()>:
c0017bcb:	53                   	push   ebx
c0017bcc:	83 ec 08             	sub    esp,0x8
c0017bcf:	eb 17                	jmp    c0017be8 <Vm::finish8086()+0x1d>
c0017bd1:	e8 f6 f4 ff ff       	call   c00170cc <schedule()>
c0017bd6:	f0 83 2d 50 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa50,0x1
c0017bde:	8b 0d 50 fa 02 c0    	mov    ecx,DWORD PTR ds:0xc002fa50
c0017be4:	85 c9                	test   ecx,ecx
c0017be6:	74 51                	je     c0017c39 <Vm::finish8086()+0x6e>
c0017be8:	fa                   	cli    
c0017be9:	8b 1d 50 fa 02 c0    	mov    ebx,DWORD PTR ds:0xc002fa50
c0017bef:	83 c3 01             	add    ebx,0x1
c0017bf2:	80 3d a8 fa 02 c0 00 	cmp    BYTE PTR ds:0xc002faa8,0x0
c0017bf9:	89 1d 50 fa 02 c0    	mov    DWORD PTR ds:0xc002fa50,ebx
c0017bff:	74 d0                	je     c0017bd1 <Vm::finish8086()+0x6>
c0017c01:	a1 ac fa 02 c0       	mov    eax,ds:0xc002faac
c0017c06:	83 ec 0c             	sub    esp,0xc
c0017c09:	c6 05 a8 fa 02 c0 00 	mov    BYTE PTR ds:0xc002faa8,0x0
c0017c10:	8b 1d a4 fa 02 c0    	mov    ebx,DWORD PTR ds:0xc002faa4
c0017c16:	50                   	push   eax
c0017c17:	e8 08 f8 ff ff       	call   c0017424 <unblockTask(ThreadControlBlock*)>
c0017c1c:	f0 83 2d 50 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa50,0x1
c0017c24:	8b 15 50 fa 02 c0    	mov    edx,DWORD PTR ds:0xc002fa50
c0017c2a:	83 c4 10             	add    esp,0x10
c0017c2d:	85 d2                	test   edx,edx
c0017c2f:	75 01                	jne    c0017c32 <Vm::finish8086()+0x67>
c0017c31:	fb                   	sti    
c0017c32:	83 c4 08             	add    esp,0x8
c0017c35:	89 d8                	mov    eax,ebx
c0017c37:	5b                   	pop    ebx
c0017c38:	c3                   	ret    
c0017c39:	fb                   	sti    
c0017c3a:	eb ac                	jmp    c0017be8 <Vm::finish8086()+0x1d>

c0017c3c <Vm::getOutput8086(unsigned char*)>:
c0017c3c:	57                   	push   edi
c0017c3d:	8b 0d b0 fa 02 c0    	mov    ecx,DWORD PTR ds:0xc002fab0
c0017c43:	56                   	push   esi
c0017c44:	be c0 fa 02 c0       	mov    esi,0xc002fac0
c0017c49:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0017c4d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017c4f:	5e                   	pop    esi
c0017c50:	a1 b0 fa 02 c0       	mov    eax,ds:0xc002fab0
c0017c55:	c7 05 b0 fa 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fab0,0x0
c0017c5f:	5f                   	pop    edi
c0017c60:	c3                   	ret    

c0017c61 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0017c61:	55                   	push   ebp
c0017c62:	57                   	push   edi
c0017c63:	56                   	push   esi
c0017c64:	53                   	push   ebx
c0017c65:	83 ec 2c             	sub    esp,0x2c
c0017c68:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0017c6c:	80 3d a0 fa 02 c0 00 	cmp    BYTE PTR ds:0xc002faa0,0x0
c0017c73:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0017c77:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0017c7b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017c7f:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c0017c83:	75 20                	jne    c0017ca5 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x44>
c0017c85:	e9 c0 00 00 00       	jmp    c0017d4a <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xe9>
c0017c8a:	e8 3d f4 ff ff       	call   c00170cc <schedule()>
c0017c8f:	f0 83 2d 50 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa50,0x1
c0017c97:	8b 3d 50 fa 02 c0    	mov    edi,DWORD PTR ds:0xc002fa50
c0017c9d:	85 ff                	test   edi,edi
c0017c9f:	0f 84 9f 00 00 00    	je     c0017d44 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xe3>
c0017ca5:	fa                   	cli    
c0017ca6:	a1 50 fa 02 c0       	mov    eax,ds:0xc002fa50
c0017cab:	83 c0 01             	add    eax,0x1
c0017cae:	80 3d a9 fa 02 c0 00 	cmp    BYTE PTR ds:0xc002faa9,0x0
c0017cb5:	a3 50 fa 02 c0       	mov    ds:0xc002fa50,eax
c0017cba:	74 ce                	je     c0017c8a <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x29>
c0017cbc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017cc0:	83 ec 04             	sub    esp,0x4
c0017cc3:	c7 05 b0 fa 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fab0,0x0
c0017ccd:	a1 ac fa 02 c0       	mov    eax,ds:0xc002faac
c0017cd2:	66 89 70 59          	mov    WORD PTR [eax+0x59],si
c0017cd6:	0f b7 f6             	movzx  esi,si
c0017cd9:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0017cdd:	0f b7 db             	movzx  ebx,bx
c0017ce0:	66 89 68 5d          	mov    WORD PTR [eax+0x5d],bp
c0017ce4:	66 89 50 5f          	mov    WORD PTR [eax+0x5f],dx
c0017ce8:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c0017cec:	6a 20                	push   0x20
c0017cee:	6a 00                	push   0x0
c0017cf0:	68 c0 fa 02 c0       	push   0xc002fac0
c0017cf5:	e8 f6 87 fe ff       	call   c00004f0 <memset>
c0017cfa:	5a                   	pop    edx
c0017cfb:	59                   	pop    ecx
c0017cfc:	56                   	push   esi
c0017cfd:	53                   	push   ebx
c0017cfe:	e8 df fd ff ff       	call   c0017ae2 <Vm::realToLinear(unsigned short, unsigned short)>
c0017d03:	83 c4 10             	add    esp,0x10
c0017d06:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0017d0a:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0017d0e:	89 c7                	mov    edi,eax
c0017d10:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017d12:	c6 05 a9 fa 02 c0 00 	mov    BYTE PTR ds:0xc002faa9,0x0
c0017d19:	f0 83 2d 50 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa50,0x1
c0017d21:	8b 1d 50 fa 02 c0    	mov    ebx,DWORD PTR ds:0xc002fa50
c0017d27:	85 db                	test   ebx,ebx
c0017d29:	75 01                	jne    c0017d2c <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xcb>
c0017d2b:	fb                   	sti    
c0017d2c:	a1 ac fa 02 c0       	mov    eax,ds:0xc002faac
c0017d31:	83 ec 0c             	sub    esp,0xc
c0017d34:	50                   	push   eax
c0017d35:	e8 ea f6 ff ff       	call   c0017424 <unblockTask(ThreadControlBlock*)>
c0017d3a:	83 c4 3c             	add    esp,0x3c
c0017d3d:	b0 01                	mov    al,0x1
c0017d3f:	5b                   	pop    ebx
c0017d40:	5e                   	pop    esi
c0017d41:	5f                   	pop    edi
c0017d42:	5d                   	pop    ebp
c0017d43:	c3                   	ret    
c0017d44:	fb                   	sti    
c0017d45:	e9 5b ff ff ff       	jmp    c0017ca5 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x44>
c0017d4a:	83 ec 0c             	sub    esp,0xc
c0017d4d:	68 14 01 00 00       	push   0x114
c0017d52:	e8 25 7e ff ff       	call   c000fb7c <malloc>
c0017d57:	83 c4 0c             	add    esp,0xc
c0017d5a:	89 c7                	mov    edi,eax
c0017d5c:	a1 78 fa 02 c0       	mov    eax,ds:0xc002fa78
c0017d61:	50                   	push   eax
c0017d62:	68 e0 54 02 c0       	push   0xc00254e0
c0017d67:	57                   	push   edi
c0017d68:	e8 1b 04 ff ff       	call   c0008188 <File::File(char const*, Process*)>
c0017d6d:	58                   	pop    eax
c0017d6e:	5a                   	pop    edx
c0017d6f:	6a 12                	push   0x12
c0017d71:	57                   	push   edi
c0017d72:	e8 2f 04 ff ff       	call   c00081a6 <File::open(FileOpenMode)>
c0017d77:	8b 07                	mov    eax,DWORD PTR [edi]
c0017d79:	59                   	pop    ecx
c0017d7a:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c0017d7e:	51                   	push   ecx
c0017d7f:	6a 00                	push   0x0
c0017d81:	6a 00                	push   0x0
c0017d83:	68 00 00 11 00       	push   0x110000
c0017d88:	57                   	push   edi
c0017d89:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0017d8c:	83 c4 14             	add    esp,0x14
c0017d8f:	57                   	push   edi
c0017d90:	e8 6f 04 ff ff       	call   c0008204 <File::close()>
c0017d95:	8b 07                	mov    eax,DWORD PTR [edi]
c0017d97:	89 3c 24             	mov    DWORD PTR [esp],edi
c0017d9a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017d9d:	83 c4 10             	add    esp,0x10
c0017da0:	c6 05 a0 fa 02 c0 01 	mov    BYTE PTR ds:0xc002faa0,0x1
c0017da7:	e9 f9 fe ff ff       	jmp    c0017ca5 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x44>

c0017dac <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0017dac:	55                   	push   ebp
c0017dad:	57                   	push   edi
c0017dae:	56                   	push   esi
c0017daf:	53                   	push   ebx
c0017db0:	83 ec 2c             	sub    esp,0x2c
c0017db3:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0017db7:	80 3d a0 fa 02 c0 00 	cmp    BYTE PTR ds:0xc002faa0,0x0
c0017dbe:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0017dc2:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0017dc6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017dca:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0017dce:	0f 84 5a 01 00 00    	je     c0017f2e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x182>
c0017dd4:	83 ec 08             	sub    esp,0x8
c0017dd7:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0017ddb:	51                   	push   ecx
c0017ddc:	68 44 55 02 c0       	push   0xc0025544
c0017de1:	e8 80 f1 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0017de6:	83 c4 10             	add    esp,0x10
c0017de9:	eb 1a                	jmp    c0017e05 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x59>
c0017deb:	e8 dc f2 ff ff       	call   c00170cc <schedule()>
c0017df0:	f0 83 2d 50 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa50,0x1
c0017df8:	a1 50 fa 02 c0       	mov    eax,ds:0xc002fa50
c0017dfd:	85 c0                	test   eax,eax
c0017dff:	0f 84 23 01 00 00    	je     c0017f28 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17c>
c0017e05:	fa                   	cli    
c0017e06:	8b 15 50 fa 02 c0    	mov    edx,DWORD PTR ds:0xc002fa50
c0017e0c:	8a 1d a9 fa 02 c0    	mov    bl,BYTE PTR ds:0xc002faa9
c0017e12:	83 c2 01             	add    edx,0x1
c0017e15:	89 15 50 fa 02 c0    	mov    DWORD PTR ds:0xc002fa50,edx
c0017e1b:	84 db                	test   bl,bl
c0017e1d:	74 cc                	je     c0017deb <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x3f>
c0017e1f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017e23:	83 ec 04             	sub    esp,0x4
c0017e26:	c7 05 b0 fa 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fab0,0x0
c0017e30:	a1 ac fa 02 c0       	mov    eax,ds:0xc002faac
c0017e35:	66 89 50 5b          	mov    WORD PTR [eax+0x5b],dx
c0017e39:	66 89 78 5f          	mov    WORD PTR [eax+0x5f],di
c0017e3d:	66 89 70 59          	mov    WORD PTR [eax+0x59],si
c0017e41:	66 89 68 5d          	mov    WORD PTR [eax+0x5d],bp
c0017e45:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c0017e49:	6a 20                	push   0x20
c0017e4b:	6a 00                	push   0x0
c0017e4d:	68 c0 fa 02 c0       	push   0xc002fac0
c0017e52:	e8 99 86 fe ff       	call   c00004f0 <memset>
c0017e57:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0017e5e:	e8 19 7d ff ff       	call   c000fb7c <malloc>
c0017e63:	83 c4 0c             	add    esp,0xc
c0017e66:	89 c7                	mov    edi,eax
c0017e68:	a1 78 fa 02 c0       	mov    eax,ds:0xc002fa78
c0017e6d:	50                   	push   eax
c0017e6e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0017e72:	50                   	push   eax
c0017e73:	57                   	push   edi
c0017e74:	e8 0f 03 ff ff       	call   c0008188 <File::File(char const*, Process*)>
c0017e79:	83 c4 10             	add    esp,0x10
c0017e7c:	85 ff                	test   edi,edi
c0017e7e:	0f 84 63 01 00 00    	je     c0017fe7 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x23b>
c0017e84:	83 ec 04             	sub    esp,0x4
c0017e87:	8d 44 24 17          	lea    eax,[esp+0x17]
c0017e8b:	50                   	push   eax
c0017e8c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0017e90:	50                   	push   eax
c0017e91:	57                   	push   edi
c0017e92:	e8 11 06 ff ff       	call   c00084a8 <File::stat(unsigned long long*, bool*)>
c0017e97:	0f b6 6c 24 23       	movzx  ebp,BYTE PTR [esp+0x23]
c0017e9c:	83 c4 10             	add    esp,0x10
c0017e9f:	89 e8                	mov    eax,ebp
c0017ea1:	84 c0                	test   al,al
c0017ea3:	0f 85 e7 00 00 00    	jne    c0017f90 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x1e4>
c0017ea9:	83 ec 08             	sub    esp,0x8
c0017eac:	6a 01                	push   0x1
c0017eae:	57                   	push   edi
c0017eaf:	e8 f2 02 ff ff       	call   c00081a6 <File::open(FileOpenMode)>
c0017eb4:	83 c4 10             	add    esp,0x10
c0017eb7:	85 c0                	test   eax,eax
c0017eb9:	0f 85 ff 00 00 00    	jne    c0017fbe <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x212>
c0017ebf:	83 ec 08             	sub    esp,0x8
c0017ec2:	0f b7 f6             	movzx  esi,si
c0017ec5:	56                   	push   esi
c0017ec6:	0f b7 44 24 18       	movzx  eax,WORD PTR [esp+0x18]
c0017ecb:	50                   	push   eax
c0017ecc:	e8 11 fc ff ff       	call   c0017ae2 <Vm::realToLinear(unsigned short, unsigned short)>
c0017ed1:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0017ed3:	5a                   	pop    edx
c0017ed4:	8d 54 24 20          	lea    edx,[esp+0x20]
c0017ed8:	52                   	push   edx
c0017ed9:	50                   	push   eax
c0017eda:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0017ede:	56                   	push   esi
c0017edf:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0017ee3:	55                   	push   ebp
c0017ee4:	57                   	push   edi
c0017ee5:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017ee8:	83 c4 14             	add    esp,0x14
c0017eeb:	57                   	push   edi
c0017eec:	e8 13 03 ff ff       	call   c0008204 <File::close()>
c0017ef1:	c6 05 a9 fa 02 c0 00 	mov    BYTE PTR ds:0xc002faa9,0x0
c0017ef8:	f0 83 2d 50 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa50,0x1
c0017f00:	a1 50 fa 02 c0       	mov    eax,ds:0xc002fa50
c0017f05:	83 c4 10             	add    esp,0x10
c0017f08:	85 c0                	test   eax,eax
c0017f0a:	75 01                	jne    c0017f0d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x161>
c0017f0c:	fb                   	sti    
c0017f0d:	a1 ac fa 02 c0       	mov    eax,ds:0xc002faac
c0017f12:	83 ec 0c             	sub    esp,0xc
c0017f15:	50                   	push   eax
c0017f16:	e8 09 f5 ff ff       	call   c0017424 <unblockTask(ThreadControlBlock*)>
c0017f1b:	83 c4 10             	add    esp,0x10
c0017f1e:	83 c4 2c             	add    esp,0x2c
c0017f21:	88 d8                	mov    al,bl
c0017f23:	5b                   	pop    ebx
c0017f24:	5e                   	pop    esi
c0017f25:	5f                   	pop    edi
c0017f26:	5d                   	pop    ebp
c0017f27:	c3                   	ret    
c0017f28:	fb                   	sti    
c0017f29:	e9 d7 fe ff ff       	jmp    c0017e05 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x59>
c0017f2e:	83 ec 0c             	sub    esp,0xc
c0017f31:	68 14 01 00 00       	push   0x114
c0017f36:	e8 41 7c ff ff       	call   c000fb7c <malloc>
c0017f3b:	83 c4 0c             	add    esp,0xc
c0017f3e:	89 c3                	mov    ebx,eax
c0017f40:	a1 78 fa 02 c0       	mov    eax,ds:0xc002fa78
c0017f45:	50                   	push   eax
c0017f46:	68 e0 54 02 c0       	push   0xc00254e0
c0017f4b:	53                   	push   ebx
c0017f4c:	e8 37 02 ff ff       	call   c0008188 <File::File(char const*, Process*)>
c0017f51:	58                   	pop    eax
c0017f52:	5a                   	pop    edx
c0017f53:	6a 12                	push   0x12
c0017f55:	53                   	push   ebx
c0017f56:	e8 4b 02 ff ff       	call   c00081a6 <File::open(FileOpenMode)>
c0017f5b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017f5d:	59                   	pop    ecx
c0017f5e:	8d 4c 24 24          	lea    ecx,[esp+0x24]
c0017f62:	51                   	push   ecx
c0017f63:	6a 00                	push   0x0
c0017f65:	6a 00                	push   0x0
c0017f67:	68 00 00 11 00       	push   0x110000
c0017f6c:	53                   	push   ebx
c0017f6d:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0017f70:	83 c4 14             	add    esp,0x14
c0017f73:	53                   	push   ebx
c0017f74:	e8 8b 02 ff ff       	call   c0008204 <File::close()>
c0017f79:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017f7b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017f7e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017f81:	83 c4 10             	add    esp,0x10
c0017f84:	c6 05 a0 fa 02 c0 01 	mov    BYTE PTR ds:0xc002faa0,0x1
c0017f8b:	e9 44 fe ff ff       	jmp    c0017dd4 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x28>
c0017f90:	83 ec 0c             	sub    esp,0xc
c0017f93:	68 0f 55 02 c0       	push   0xc002550f
c0017f98:	e8 ed 7e ff ff       	call   c000fe8a <KePanic(char const*)>
c0017f9d:	f0 83 2d 50 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa50,0x1
c0017fa5:	a1 50 fa 02 c0       	mov    eax,ds:0xc002fa50
c0017faa:	83 c4 10             	add    esp,0x10
c0017fad:	85 c0                	test   eax,eax
c0017faf:	75 01                	jne    c0017fb2 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x206>
c0017fb1:	fb                   	sti    
c0017fb2:	83 c4 2c             	add    esp,0x2c
c0017fb5:	31 db                	xor    ebx,ebx
c0017fb7:	88 d8                	mov    al,bl
c0017fb9:	5b                   	pop    ebx
c0017fba:	5e                   	pop    esi
c0017fbb:	5f                   	pop    edi
c0017fbc:	5d                   	pop    ebp
c0017fbd:	c3                   	ret    
c0017fbe:	83 ec 0c             	sub    esp,0xc
c0017fc1:	68 28 55 02 c0       	push   0xc0025528
c0017fc6:	e8 bf 7e ff ff       	call   c000fe8a <KePanic(char const*)>
c0017fcb:	f0 83 2d 50 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa50,0x1
c0017fd3:	a1 50 fa 02 c0       	mov    eax,ds:0xc002fa50
c0017fd8:	83 c4 10             	add    esp,0x10
c0017fdb:	85 c0                	test   eax,eax
c0017fdd:	75 d3                	jne    c0017fb2 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x206>
c0017fdf:	fb                   	sti    
c0017fe0:	89 eb                	mov    ebx,ebp
c0017fe2:	e9 37 ff ff ff       	jmp    c0017f1e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x172>
c0017fe7:	83 ec 0c             	sub    esp,0xc
c0017fea:	68 fb 54 02 c0       	push   0xc00254fb
c0017fef:	eb a7                	jmp    c0017f98 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x1ec>

c0017ff1 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0017ff1:	57                   	push   edi
c0017ff2:	56                   	push   esi
c0017ff3:	53                   	push   ebx
c0017ff4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ff8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0017ffc:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0018000:	83 e8 06             	sub    eax,0x6
c0018003:	0f b7 c0             	movzx  eax,ax
c0018006:	50                   	push   eax
c0018007:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001800c:	50                   	push   eax
c001800d:	e8 d0 fa ff ff       	call   c0017ae2 <Vm::realToLinear(unsigned short, unsigned short)>
c0018012:	5a                   	pop    edx
c0018013:	5e                   	pop    esi
c0018014:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c0018017:	8d 56 fa             	lea    edx,[esi-0x6]
c001801a:	8b 71 38             	mov    esi,DWORD PTR [ecx+0x38]
c001801d:	81 e2 ff ff 00 00    	and    edx,0xffff
c0018023:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c0018026:	8d 56 02             	lea    edx,[esi+0x2]
c0018029:	66 89 10             	mov    WORD PTR [eax],dx
c001802c:	66 8b 51 3c          	mov    dx,WORD PTR [ecx+0x3c]
c0018030:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0018034:	66 8b 79 40          	mov    di,WORD PTR [ecx+0x40]
c0018038:	8b 71 40             	mov    esi,DWORD PTR [ecx+0x40]
c001803b:	66 89 78 04          	mov    WORD PTR [eax+0x4],di
c001803f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0018045:	89 f2                	mov    edx,esi
c0018047:	0f b6 d6             	movzx  edx,dh
c001804a:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001804e:	89 d7                	mov    edi,edx
c0018050:	74 36                	je     c0018088 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x97>
c0018052:	c1 e7 08             	shl    edi,0x8
c0018055:	89 f2                	mov    edx,esi
c0018057:	0f b6 f2             	movzx  esi,dl
c001805a:	09 f7                	or     edi,esi
c001805c:	89 fa                	mov    edx,edi
c001805e:	80 ce 02             	or     dh,0x2
c0018061:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0018065:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001806a:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001806e:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c0018076:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c0018079:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c0018081:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c0018084:	5b                   	pop    ebx
c0018085:	5e                   	pop    esi
c0018086:	5f                   	pop    edi
c0018087:	c3                   	ret    
c0018088:	c1 e7 08             	shl    edi,0x8
c001808b:	89 f2                	mov    edx,esi
c001808d:	0f b6 f2             	movzx  esi,dl
c0018090:	09 f7                	or     edi,esi
c0018092:	89 fa                	mov    edx,edi
c0018094:	80 e6 fd             	and    dh,0xfd
c0018097:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001809b:	eb c8                	jmp    c0018065 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x74>

c001809d <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001809d:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00180a2:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00180a7:	c1 e0 04             	shl    eax,0x4
c00180aa:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c00180ad:	c3                   	ret    

c00180ae <Vm::readWordFromReal(unsigned short, unsigned short)>:
c00180ae:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00180b3:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00180b8:	c1 e0 04             	shl    eax,0x4
c00180bb:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c00180bf:	c3                   	ret    

c00180c0 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c00180c0:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00180c5:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00180ca:	c1 e0 04             	shl    eax,0x4
c00180cd:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c00180d0:	c3                   	ret    

c00180d1 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c00180d1:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00180d6:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00180db:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00180df:	c1 e0 04             	shl    eax,0x4
c00180e2:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c00180e5:	c3                   	ret    

c00180e6 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c00180e6:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00180eb:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00180f0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00180f4:	c1 e0 04             	shl    eax,0x4
c00180f7:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c00180fb:	c3                   	ret    

c00180fc <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c00180fc:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018101:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018106:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001810a:	c1 e0 04             	shl    eax,0x4
c001810d:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c0018110:	c3                   	ret    

c0018111 <Vm::faultHandler(regs*)>:
c0018111:	55                   	push   ebp
c0018112:	57                   	push   edi
c0018113:	56                   	push   esi
c0018114:	53                   	push   ebx
c0018115:	83 ec 1c             	sub    esp,0x1c
c0018118:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001811c:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c0018120:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018123:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0018128:	0f b7 c0             	movzx  eax,ax
c001812b:	52                   	push   edx
c001812c:	50                   	push   eax
c001812d:	e8 b0 f9 ff ff       	call   c0017ae2 <Vm::realToLinear(unsigned short, unsigned short)>
c0018132:	59                   	pop    ecx
c0018133:	5e                   	pop    esi
c0018134:	89 c1                	mov    ecx,eax
c0018136:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0018139:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001813d:	0f b7 e8             	movzx  ebp,ax
c0018140:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0018143:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018147:	0f b7 f8             	movzx  edi,ax
c001814a:	55                   	push   ebp
c001814b:	57                   	push   edi
c001814c:	e8 91 f9 ff ff       	call   c0017ae2 <Vm::realToLinear(unsigned short, unsigned short)>
c0018151:	5a                   	pop    edx
c0018152:	5e                   	pop    esi
c0018153:	c6 44 24 04 06       	mov    BYTE PTR [esp+0x4],0x6
c0018158:	c6 44 24 05 00       	mov    BYTE PTR [esp+0x5],0x0
c001815d:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c0018162:	0f b6 31             	movzx  esi,BYTE PTR [ecx]
c0018165:	8d 56 da             	lea    edx,[esi-0x26]
c0018168:	0f b6 d2             	movzx  edx,dl
c001816b:	81 fa d5 00 00 00    	cmp    edx,0xd5
c0018171:	0f 87 00 04 00 00    	ja     c0018577 <Vm::faultHandler(regs*)+0x466>
c0018177:	ff 24 95 c8 55 02 c0 	jmp    DWORD PTR [edx*4-0x3ffdaa38]
c001817e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018183:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c0018187:	b0 01                	mov    al,0x1
c0018189:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001818c:	83 c5 01             	add    ebp,0x1
c001818f:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c0018192:	83 c4 1c             	add    esp,0x1c
c0018195:	5b                   	pop    ebx
c0018196:	5e                   	pop    esi
c0018197:	5f                   	pop    edi
c0018198:	5d                   	pop    ebp
c0018199:	c3                   	ret    
c001819a:	c6 44 24 04 02       	mov    BYTE PTR [esp+0x4],0x2
c001819f:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00181a2:	83 c2 01             	add    edx,0x1
c00181a5:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c00181a8:	83 c1 01             	add    ecx,0x1
c00181ab:	eb b5                	jmp    c0018162 <Vm::faultHandler(regs*)+0x51>
c00181ad:	c6 44 24 04 00       	mov    BYTE PTR [esp+0x4],0x0
c00181b2:	8b 73 38             	mov    esi,DWORD PTR [ebx+0x38]
c00181b5:	83 c6 01             	add    esi,0x1
c00181b8:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00181bb:	eb eb                	jmp    c00181a8 <Vm::faultHandler(regs*)+0x97>
c00181bd:	c6 44 24 04 05       	mov    BYTE PTR [esp+0x4],0x5
c00181c2:	8b 73 38             	mov    esi,DWORD PTR [ebx+0x38]
c00181c5:	83 c6 01             	add    esi,0x1
c00181c8:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00181cb:	eb db                	jmp    c00181a8 <Vm::faultHandler(regs*)+0x97>
c00181cd:	c6 44 24 04 01       	mov    BYTE PTR [esp+0x4],0x1
c00181d2:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00181d5:	83 c2 01             	add    edx,0x1
c00181d8:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c00181db:	eb cb                	jmp    c00181a8 <Vm::faultHandler(regs*)+0x97>
c00181dd:	c6 44 24 04 03       	mov    BYTE PTR [esp+0x4],0x3
c00181e2:	8b 73 38             	mov    esi,DWORD PTR [ebx+0x38]
c00181e5:	83 c6 01             	add    esi,0x1
c00181e8:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00181eb:	eb bb                	jmp    c00181a8 <Vm::faultHandler(regs*)+0x97>
c00181ed:	c6 44 24 04 04       	mov    BYTE PTR [esp+0x4],0x4
c00181f2:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00181f5:	83 c2 01             	add    edx,0x1
c00181f8:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c00181fb:	eb ab                	jmp    c00181a8 <Vm::faultHandler(regs*)+0x97>
c00181fd:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c0018202:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0018205:	83 c2 01             	add    edx,0x1
c0018208:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c001820b:	eb 9b                	jmp    c00181a8 <Vm::faultHandler(regs*)+0x97>
c001820d:	c6 44 24 05 01       	mov    BYTE PTR [esp+0x5],0x1
c0018212:	8b 73 38             	mov    esi,DWORD PTR [ebx+0x38]
c0018215:	83 c6 01             	add    esi,0x1
c0018218:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c001821b:	eb 8b                	jmp    c00181a8 <Vm::faultHandler(regs*)+0x97>
c001821d:	f6 44 24 05 01       	test   BYTE PTR [esp+0x5],0x1
c0018222:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0018225:	74 0d                	je     c0018234 <Vm::faultHandler(regs*)+0x123>
c0018227:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c001822e:	0f 87 be 06 00 00    	ja     c00188f2 <Vm::faultHandler(regs*)+0x7e1>
c0018234:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0018238:	83 ec 0c             	sub    esp,0xc
c001823b:	0f b7 f6             	movzx  esi,si
c001823e:	50                   	push   eax
c001823f:	e8 59 f8 ff ff       	call   c0017a9d <Vm::inbv(unsigned short)>
c0018244:	83 c4 0c             	add    esp,0xc
c0018247:	0f b6 c0             	movzx  eax,al
c001824a:	50                   	push   eax
c001824b:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c001824f:	50                   	push   eax
c0018250:	56                   	push   esi
c0018251:	e8 7b fe ff ff       	call   c00180d1 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0018256:	83 c4 10             	add    esp,0x10
c0018259:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001825c:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0018260:	0f 84 0a 06 00 00    	je     c0018870 <Vm::faultHandler(regs*)+0x75f>
c0018266:	83 e8 01             	sub    eax,0x1
c0018269:	0f b7 c0             	movzx  eax,ax
c001826c:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c001826f:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0018272:	83 c0 01             	add    eax,0x1
c0018275:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0018278:	83 c4 1c             	add    esp,0x1c
c001827b:	b0 01                	mov    al,0x1
c001827d:	5b                   	pop    ebx
c001827e:	5e                   	pop    esi
c001827f:	5f                   	pop    edi
c0018280:	5d                   	pop    ebp
c0018281:	c3                   	ret    
c0018282:	f6 44 24 05 01       	test   BYTE PTR [esp+0x5],0x1
c0018287:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001828a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001828d:	0f 85 a0 04 00 00    	jne    c0018733 <Vm::faultHandler(regs*)+0x622>
c0018293:	f6 44 24 03 01       	test   BYTE PTR [esp+0x3],0x1
c0018298:	0f b7 c8             	movzx  ecx,ax
c001829b:	0f b7 f6             	movzx  esi,si
c001829e:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00182a1:	0f 84 69 05 00 00    	je     c0018810 <Vm::faultHandler(regs*)+0x6ff>
c00182a7:	ed                   	in     eax,dx
c00182a8:	83 ec 04             	sub    esp,0x4
c00182ab:	50                   	push   eax
c00182ac:	51                   	push   ecx
c00182ad:	56                   	push   esi
c00182ae:	e8 49 fe ff ff       	call   c00180fc <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c00182b3:	83 c4 10             	add    esp,0x10
c00182b6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00182b9:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00182bd:	0f 84 d1 05 00 00    	je     c0018894 <Vm::faultHandler(regs*)+0x783>
c00182c3:	83 e8 04             	sub    eax,0x4
c00182c6:	25 ff ff 00 00       	and    eax,0xffff
c00182cb:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00182ce:	eb 9f                	jmp    c001826f <Vm::faultHandler(regs*)+0x15e>
c00182d0:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00182d5:	83 f8 06             	cmp    eax,0x6
c00182d8:	0f 87 66 03 00 00    	ja     c0018644 <Vm::faultHandler(regs*)+0x533>
c00182de:	ff 24 85 20 59 02 c0 	jmp    DWORD PTR [eax*4-0x3ffda6e0]
c00182e5:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00182ea:	83 f8 06             	cmp    eax,0x6
c00182ed:	0f 87 f5 02 00 00    	ja     c00185e8 <Vm::faultHandler(regs*)+0x4d7>
c00182f3:	ff 24 85 3c 59 02 c0 	jmp    DWORD PTR [eax*4-0x3ffda6c4]
c00182fa:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c00182fe:	83 ec 08             	sub    esp,0x8
c0018301:	50                   	push   eax
c0018302:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0018306:	50                   	push   eax
c0018307:	e8 a4 f7 ff ff       	call   c0017ab0 <Vm::outbv(unsigned short, unsigned char)>
c001830c:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c001830f:	83 c4 10             	add    esp,0x10
c0018312:	83 c0 02             	add    eax,0x2
c0018315:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0018318:	b0 01                	mov    al,0x1
c001831a:	e9 73 fe ff ff       	jmp    c0018192 <Vm::faultHandler(regs*)+0x81>
c001831f:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0018323:	3d ee 00 00 00       	cmp    eax,0xee
c0018328:	0f 84 62 04 00 00    	je     c0018790 <Vm::faultHandler(regs*)+0x67f>
c001832e:	83 ec 0c             	sub    esp,0xc
c0018331:	55                   	push   ebp
c0018332:	57                   	push   edi
c0018333:	51                   	push   ecx
c0018334:	50                   	push   eax
c0018335:	53                   	push   ebx
c0018336:	e8 b6 fc ff ff       	call   c0017ff1 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001833b:	83 c4 20             	add    esp,0x20
c001833e:	b0 01                	mov    al,0x1
c0018340:	e9 4d fe ff ff       	jmp    c0018192 <Vm::faultHandler(regs*)+0x81>
c0018345:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0018349:	89 d1                	mov    ecx,edx
c001834b:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c001834e:	c1 e1 08             	shl    ecx,0x8
c0018351:	09 ca                	or     edx,ecx
c0018353:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0018356:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c001835a:	89 d1                	mov    ecx,edx
c001835c:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0018360:	c1 e1 08             	shl    ecx,0x8
c0018363:	09 ca                	or     edx,ecx
c0018365:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0018368:	0f b6 50 05          	movzx  edx,BYTE PTR [eax+0x5]
c001836c:	89 d1                	mov    ecx,edx
c001836e:	0f b6 50 04          	movzx  edx,BYTE PTR [eax+0x4]
c0018372:	c1 e1 08             	shl    ecx,0x8
c0018375:	09 ca                	or     edx,ecx
c0018377:	81 ca 00 02 02 00    	or     edx,0x20200
c001837d:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0018380:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
c0018384:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001838a:	d1 e8                	shr    eax,1
c001838c:	83 e0 01             	and    eax,0x1
c001838f:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c0018392:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0018395:	83 c0 06             	add    eax,0x6
c0018398:	25 ff ff 00 00       	and    eax,0xffff
c001839d:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c00183a0:	b0 01                	mov    al,0x1
c00183a2:	e9 eb fd ff ff       	jmp    c0018192 <Vm::faultHandler(regs*)+0x81>
c00183a7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00183aa:	83 ec 0c             	sub    esp,0xc
c00183ad:	b0 00                	mov    al,0x0
c00183af:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00183b2:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00183b6:	50                   	push   eax
c00183b7:	e8 e1 f6 ff ff       	call   c0017a9d <Vm::inbv(unsigned short)>
c00183bc:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00183bf:	83 c4 10             	add    esp,0x10
c00183c2:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c00183c5:	83 c1 02             	add    ecx,0x2
c00183c8:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c00183cb:	0f b6 c0             	movzx  eax,al
c00183ce:	09 c2                	or     edx,eax
c00183d0:	b0 01                	mov    al,0x1
c00183d2:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c00183d5:	e9 b8 fd ff ff       	jmp    c0018192 <Vm::faultHandler(regs*)+0x81>
c00183da:	f6 44 24 03 01       	test   BYTE PTR [esp+0x3],0x1
c00183df:	0f 85 8a 03 00 00    	jne    c001876f <Vm::faultHandler(regs*)+0x65e>
c00183e5:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c00183e8:	81 e6 00 00 ff ff    	and    esi,0xffff0000
c00183ee:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00183f1:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00183f5:	66 ed                	in     ax,dx
c00183f7:	0f b7 c0             	movzx  eax,ax
c00183fa:	09 f0                	or     eax,esi
c00183fc:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00183ff:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0018402:	83 c0 02             	add    eax,0x2
c0018405:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0018408:	83 c4 1c             	add    esp,0x1c
c001840b:	b0 01                	mov    al,0x1
c001840d:	5b                   	pop    ebx
c001840e:	5e                   	pop    esi
c001840f:	5f                   	pop    edi
c0018410:	5d                   	pop    ebp
c0018411:	c3                   	ret    
c0018412:	f6 44 24 03 01       	test   BYTE PTR [esp+0x3],0x1
c0018417:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c001841a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001841e:	0f 84 e3 02 00 00    	je     c0018707 <Vm::faultHandler(regs*)+0x5f6>
c0018424:	83 ea 04             	sub    edx,0x4
c0018427:	81 e1 ff 0d 00 00    	and    ecx,0xdff
c001842d:	81 e2 ff ff 00 00    	and    edx,0xffff
c0018433:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0018436:	89 48 fc             	mov    DWORD PTR [eax-0x4],ecx
c0018439:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001843f:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c0018443:	0f 84 26 fe ff ff    	je     c001826f <Vm::faultHandler(regs*)+0x15e>
c0018449:	80 cd 02             	or     ch,0x2
c001844c:	89 48 fc             	mov    DWORD PTR [eax-0x4],ecx
c001844f:	e9 1b fe ff ff       	jmp    c001826f <Vm::faultHandler(regs*)+0x15e>
c0018454:	f6 44 24 03 01       	test   BYTE PTR [esp+0x3],0x1
c0018459:	0f 84 77 02 00 00    	je     c00186d6 <Vm::faultHandler(regs*)+0x5c5>
c001845f:	8b 10                	mov    edx,DWORD PTR [eax]
c0018461:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0018467:	81 ca 00 02 02 00    	or     edx,0x20200
c001846d:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0018470:	8b 00                	mov    eax,DWORD PTR [eax]
c0018472:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0018478:	c1 e8 09             	shr    eax,0x9
c001847b:	83 e0 01             	and    eax,0x1
c001847e:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c0018481:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0018484:	83 c0 04             	add    eax,0x4
c0018487:	25 ff ff 00 00       	and    eax,0xffff
c001848c:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001848f:	e9 db fd ff ff       	jmp    c001826f <Vm::faultHandler(regs*)+0x15e>
c0018494:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0018498:	83 ec 08             	sub    esp,0x8
c001849b:	50                   	push   eax
c001849c:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00184a0:	50                   	push   eax
c00184a1:	e8 0a f6 ff ff       	call   c0017ab0 <Vm::outbv(unsigned short, unsigned char)>
c00184a6:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00184a9:	83 c4 10             	add    esp,0x10
c00184ac:	b0 01                	mov    al,0x1
c00184ae:	83 c2 01             	add    edx,0x1
c00184b1:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c00184b4:	e9 d9 fc ff ff       	jmp    c0018192 <Vm::faultHandler(regs*)+0x81>
c00184b9:	f6 44 24 03 01       	test   BYTE PTR [esp+0x3],0x1
c00184be:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00184c1:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00184c4:	0f 84 b8 02 00 00    	je     c0018782 <Vm::faultHandler(regs*)+0x671>
c00184ca:	ef                   	out    dx,eax
c00184cb:	e9 9f fd ff ff       	jmp    c001826f <Vm::faultHandler(regs*)+0x15e>
c00184d0:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00184d3:	83 c2 01             	add    edx,0x1
c00184d6:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c00184d9:	e9 ca fc ff ff       	jmp    c00181a8 <Vm::faultHandler(regs*)+0x97>
c00184de:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00184e3:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c00184e7:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00184ea:	83 c0 01             	add    eax,0x1
c00184ed:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00184f0:	b0 01                	mov    al,0x1
c00184f2:	e9 9b fc ff ff       	jmp    c0018192 <Vm::faultHandler(regs*)+0x81>
c00184f7:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c00184fa:	83 ec 0c             	sub    esp,0xc
c00184fd:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0018501:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c0018507:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c001850a:	50                   	push   eax
c001850b:	e8 8d f5 ff ff       	call   c0017a9d <Vm::inbv(unsigned short)>
c0018510:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0018513:	83 c4 10             	add    esp,0x10
c0018516:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0018519:	83 c5 01             	add    ebp,0x1
c001851c:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c001851f:	0f b6 c0             	movzx  eax,al
c0018522:	09 c7                	or     edi,eax
c0018524:	b0 01                	mov    al,0x1
c0018526:	89 7b 2c             	mov    DWORD PTR [ebx+0x2c],edi
c0018529:	e9 64 fc ff ff       	jmp    c0018192 <Vm::faultHandler(regs*)+0x81>
c001852e:	f6 44 24 03 01       	test   BYTE PTR [esp+0x3],0x1
c0018533:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0018536:	0f 85 40 02 00 00    	jne    c001877c <Vm::faultHandler(regs*)+0x66b>
c001853c:	66 ed                	in     ax,dx
c001853e:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0018541:	0f b7 c0             	movzx  eax,ax
c0018544:	81 e2 00 00 ff ff    	and    edx,0xffff0000
c001854a:	09 d0                	or     eax,edx
c001854c:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001854f:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0018552:	b0 01                	mov    al,0x1
c0018554:	83 c1 01             	add    ecx,0x1
c0018557:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c001855a:	e9 33 fc ff ff       	jmp    c0018192 <Vm::faultHandler(regs*)+0x81>
c001855f:	f6 44 24 03 01       	test   BYTE PTR [esp+0x3],0x1
c0018564:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0018567:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001856b:	0f 84 18 02 00 00    	je     c0018789 <Vm::faultHandler(regs*)+0x678>
c0018571:	ef                   	out    dx,eax
c0018572:	e9 88 fe ff ff       	jmp    c00183ff <Vm::faultHandler(regs*)+0x2ee>
c0018577:	89 f0                	mov    eax,esi
c0018579:	0f b6 f0             	movzx  esi,al
c001857c:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0018580:	50                   	push   eax
c0018581:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0018585:	50                   	push   eax
c0018586:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001858a:	50                   	push   eax
c001858b:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001858f:	50                   	push   eax
c0018590:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0018594:	50                   	push   eax
c0018595:	56                   	push   esi
c0018596:	56                   	push   esi
c0018597:	68 98 55 02 c0       	push   0xc0025598
c001859c:	e8 c5 e9 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00185a1:	83 c4 20             	add    esp,0x20
c00185a4:	83 ec 0c             	sub    esp,0xc
c00185a7:	6a 60                	push   0x60
c00185a9:	e8 ef f4 ff ff       	call   c0017a9d <Vm::inbv(unsigned short)>
c00185ae:	83 c4 10             	add    esp,0x10
c00185b1:	0f b6 c0             	movzx  eax,al
c00185b4:	83 f8 1c             	cmp    eax,0x1c
c00185b7:	74 17                	je     c00185d0 <Vm::faultHandler(regs*)+0x4bf>
c00185b9:	83 f8 5a             	cmp    eax,0x5a
c00185bc:	75 e6                	jne    c00185a4 <Vm::faultHandler(regs*)+0x493>
c00185be:	eb 10                	jmp    c00185d0 <Vm::faultHandler(regs*)+0x4bf>
c00185c0:	83 ec 0c             	sub    esp,0xc
c00185c3:	6a 60                	push   0x60
c00185c5:	e8 d3 f4 ff ff       	call   c0017a9d <Vm::inbv(unsigned short)>
c00185ca:	83 c4 10             	add    esp,0x10
c00185cd:	0f b6 c0             	movzx  eax,al
c00185d0:	83 f8 1c             	cmp    eax,0x1c
c00185d3:	74 eb                	je     c00185c0 <Vm::faultHandler(regs*)+0x4af>
c00185d5:	83 f8 5a             	cmp    eax,0x5a
c00185d8:	74 e6                	je     c00185c0 <Vm::faultHandler(regs*)+0x4af>
c00185da:	31 c0                	xor    eax,eax
c00185dc:	e9 b1 fb ff ff       	jmp    c0018192 <Vm::faultHandler(regs*)+0x81>
c00185e1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00185e3:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c00185e8:	f6 44 24 05 01       	test   BYTE PTR [esp+0x5],0x1
c00185ed:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c00185f0:	0f 85 a3 00 00 00    	jne    c0018699 <Vm::faultHandler(regs*)+0x588>
c00185f6:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c00185f9:	0f b7 c6             	movzx  eax,si
c00185fc:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0018601:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0018604:	81 e1 00 04 00 00    	and    ecx,0x400
c001860a:	f6 44 24 03 01       	test   BYTE PTR [esp+0x3],0x1
c001860f:	0f 84 2b 02 00 00    	je     c0018840 <Vm::faultHandler(regs*)+0x72f>
c0018615:	83 ec 08             	sub    esp,0x8
c0018618:	50                   	push   eax
c0018619:	52                   	push   edx
c001861a:	e8 a1 fa ff ff       	call   c00180c0 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001861f:	83 c4 10             	add    esp,0x10
c0018622:	89 fa                	mov    edx,edi
c0018624:	ef                   	out    dx,eax
c0018625:	85 c9                	test   ecx,ecx
c0018627:	0f 84 77 02 00 00    	je     c00188a4 <Vm::faultHandler(regs*)+0x793>
c001862d:	8d 46 fc             	lea    eax,[esi-0x4]
c0018630:	25 ff ff 00 00       	and    eax,0xffff
c0018635:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0018638:	e9 32 fc ff ff       	jmp    c001826f <Vm::faultHandler(regs*)+0x15e>
c001863d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001863f:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0018644:	f6 44 24 05 01       	test   BYTE PTR [esp+0x5],0x1
c0018649:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001864c:	74 0b                	je     c0018659 <Vm::faultHandler(regs*)+0x548>
c001864e:	3d ff ff 00 00       	cmp    eax,0xffff
c0018653:	0f 87 68 02 00 00    	ja     c00188c1 <Vm::faultHandler(regs*)+0x7b0>
c0018659:	83 ec 08             	sub    esp,0x8
c001865c:	0f b7 c0             	movzx  eax,ax
c001865f:	50                   	push   eax
c0018660:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0018665:	50                   	push   eax
c0018666:	e8 32 fa ff ff       	call   c001809d <Vm::readByteFromReal(unsigned short, unsigned short)>
c001866b:	5e                   	pop    esi
c001866c:	5f                   	pop    edi
c001866d:	0f b6 c0             	movzx  eax,al
c0018670:	50                   	push   eax
c0018671:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0018675:	50                   	push   eax
c0018676:	e8 35 f4 ff ff       	call   c0017ab0 <Vm::outbv(unsigned short, unsigned char)>
c001867b:	83 c4 10             	add    esp,0x10
c001867e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0018681:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0018685:	0f 84 da 01 00 00    	je     c0018865 <Vm::faultHandler(regs*)+0x754>
c001868b:	83 e8 01             	sub    eax,0x1
c001868e:	0f b7 c0             	movzx  eax,ax
c0018691:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0018694:	e9 d6 fb ff ff       	jmp    c001826f <Vm::faultHandler(regs*)+0x15e>
c0018699:	81 fe ff ff 00 00    	cmp    esi,0xffff
c001869f:	0f 86 51 ff ff ff    	jbe    c00185f6 <Vm::faultHandler(regs*)+0x4e5>
c00186a5:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00186a9:	50                   	push   eax
c00186aa:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00186ae:	50                   	push   eax
c00186af:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00186b3:	50                   	push   eax
c00186b4:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00186b8:	50                   	push   eax
c00186b9:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00186bd:	50                   	push   eax
c00186be:	6a 6f                	push   0x6f
c00186c0:	6a 6f                	push   0x6f
c00186c2:	68 68 55 02 c0       	push   0xc0025568
c00186c7:	e8 9a e8 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00186cc:	83 c4 20             	add    esp,0x20
c00186cf:	31 c0                	xor    eax,eax
c00186d1:	e9 bc fa ff ff       	jmp    c0018192 <Vm::faultHandler(regs*)+0x81>
c00186d6:	0f b7 10             	movzx  edx,WORD PTR [eax]
c00186d9:	81 ca 00 02 02 00    	or     edx,0x20200
c00186df:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00186e2:	0f b7 00             	movzx  eax,WORD PTR [eax]
c00186e5:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00186eb:	c1 e8 09             	shr    eax,0x9
c00186ee:	83 e0 01             	and    eax,0x1
c00186f1:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c00186f4:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00186f7:	83 c0 02             	add    eax,0x2
c00186fa:	25 ff ff 00 00       	and    eax,0xffff
c00186ff:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0018702:	e9 68 fb ff ff       	jmp    c001826f <Vm::faultHandler(regs*)+0x15e>
c0018707:	83 ea 02             	sub    edx,0x2
c001870a:	81 e2 ff ff 00 00    	and    edx,0xffff
c0018710:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0018713:	66 89 48 fe          	mov    WORD PTR [eax-0x2],cx
c0018717:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001871d:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c0018721:	0f 84 54 01 00 00    	je     c001887b <Vm::faultHandler(regs*)+0x76a>
c0018727:	80 cd 02             	or     ch,0x2
c001872a:	66 89 48 fe          	mov    WORD PTR [eax-0x2],cx
c001872e:	e9 3c fb ff ff       	jmp    c001826f <Vm::faultHandler(regs*)+0x15e>
c0018733:	3d ff ff 00 00       	cmp    eax,0xffff
c0018738:	0f 86 55 fb ff ff    	jbe    c0018293 <Vm::faultHandler(regs*)+0x182>
c001873e:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0018742:	50                   	push   eax
c0018743:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0018747:	50                   	push   eax
c0018748:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001874c:	50                   	push   eax
c001874d:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0018751:	50                   	push   eax
c0018752:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0018756:	50                   	push   eax
c0018757:	6a 6d                	push   0x6d
c0018759:	6a 6d                	push   0x6d
c001875b:	68 68 55 02 c0       	push   0xc0025568
c0018760:	e8 01 e8 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0018765:	83 c4 20             	add    esp,0x20
c0018768:	31 c0                	xor    eax,eax
c001876a:	e9 23 fa ff ff       	jmp    c0018192 <Vm::faultHandler(regs*)+0x81>
c001876f:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0018773:	ed                   	in     eax,dx
c0018774:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0018777:	e9 83 fc ff ff       	jmp    c00183ff <Vm::faultHandler(regs*)+0x2ee>
c001877c:	ed                   	in     eax,dx
c001877d:	e9 ca fd ff ff       	jmp    c001854c <Vm::faultHandler(regs*)+0x43b>
c0018782:	66 ef                	out    dx,ax
c0018784:	e9 e6 fa ff ff       	jmp    c001826f <Vm::faultHandler(regs*)+0x15e>
c0018789:	66 ef                	out    dx,ax
c001878b:	e9 6f fc ff ff       	jmp    c00183ff <Vm::faultHandler(regs*)+0x2ee>
c0018790:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0018793:	83 ec 0c             	sub    esp,0xc
c0018796:	50                   	push   eax
c0018797:	e8 b8 f3 ff ff       	call   c0017b54 <Vm::mainloop3(unsigned long)>
c001879c:	83 c4 10             	add    esp,0x10
c001879f:	b0 01                	mov    al,0x1
c00187a1:	e9 ec f9 ff ff       	jmp    c0018192 <Vm::faultHandler(regs*)+0x81>
c00187a6:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00187a9:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c00187ae:	e9 35 fe ff ff       	jmp    c00185e8 <Vm::faultHandler(regs*)+0x4d7>
c00187b3:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00187b6:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c00187bb:	e9 28 fe ff ff       	jmp    c00185e8 <Vm::faultHandler(regs*)+0x4d7>
c00187c0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00187c3:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c00187c8:	e9 1b fe ff ff       	jmp    c00185e8 <Vm::faultHandler(regs*)+0x4d7>
c00187cd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00187d1:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c00187d6:	e9 0d fe ff ff       	jmp    c00185e8 <Vm::faultHandler(regs*)+0x4d7>
c00187db:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00187de:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c00187e3:	e9 5c fe ff ff       	jmp    c0018644 <Vm::faultHandler(regs*)+0x533>
c00187e8:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00187eb:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c00187f0:	e9 4f fe ff ff       	jmp    c0018644 <Vm::faultHandler(regs*)+0x533>
c00187f5:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00187f8:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c00187fd:	e9 42 fe ff ff       	jmp    c0018644 <Vm::faultHandler(regs*)+0x533>
c0018802:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018806:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c001880b:	e9 34 fe ff ff       	jmp    c0018644 <Vm::faultHandler(regs*)+0x533>
c0018810:	66 ed                	in     ax,dx
c0018812:	83 ec 04             	sub    esp,0x4
c0018815:	0f b7 c0             	movzx  eax,ax
c0018818:	50                   	push   eax
c0018819:	51                   	push   ecx
c001881a:	56                   	push   esi
c001881b:	e8 c6 f8 ff ff       	call   c00180e6 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0018820:	83 c4 10             	add    esp,0x10
c0018823:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0018826:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001882a:	0f 84 84 00 00 00    	je     c00188b4 <Vm::faultHandler(regs*)+0x7a3>
c0018830:	83 e8 02             	sub    eax,0x2
c0018833:	25 ff ff 00 00       	and    eax,0xffff
c0018838:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c001883b:	e9 2f fa ff ff       	jmp    c001826f <Vm::faultHandler(regs*)+0x15e>
c0018840:	83 ec 08             	sub    esp,0x8
c0018843:	50                   	push   eax
c0018844:	52                   	push   edx
c0018845:	e8 64 f8 ff ff       	call   c00180ae <Vm::readWordFromReal(unsigned short, unsigned short)>
c001884a:	83 c4 10             	add    esp,0x10
c001884d:	89 fa                	mov    edx,edi
c001884f:	66 ef                	out    dx,ax
c0018851:	85 c9                	test   ecx,ecx
c0018853:	74 32                	je     c0018887 <Vm::faultHandler(regs*)+0x776>
c0018855:	8d 46 fe             	lea    eax,[esi-0x2]
c0018858:	25 ff ff 00 00       	and    eax,0xffff
c001885d:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0018860:	e9 0a fa ff ff       	jmp    c001826f <Vm::faultHandler(regs*)+0x15e>
c0018865:	83 c0 01             	add    eax,0x1
c0018868:	0f b7 c0             	movzx  eax,ax
c001886b:	e9 21 fe ff ff       	jmp    c0018691 <Vm::faultHandler(regs*)+0x580>
c0018870:	83 c0 01             	add    eax,0x1
c0018873:	0f b7 c0             	movzx  eax,ax
c0018876:	e9 f1 f9 ff ff       	jmp    c001826c <Vm::faultHandler(regs*)+0x15b>
c001887b:	80 e5 fd             	and    ch,0xfd
c001887e:	66 89 48 fe          	mov    WORD PTR [eax-0x2],cx
c0018882:	e9 e8 f9 ff ff       	jmp    c001826f <Vm::faultHandler(regs*)+0x15e>
c0018887:	8d 46 02             	lea    eax,[esi+0x2]
c001888a:	25 ff ff 00 00       	and    eax,0xffff
c001888f:	e9 fd fd ff ff       	jmp    c0018691 <Vm::faultHandler(regs*)+0x580>
c0018894:	83 c0 04             	add    eax,0x4
c0018897:	25 ff ff 00 00       	and    eax,0xffff
c001889c:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c001889f:	e9 cb f9 ff ff       	jmp    c001826f <Vm::faultHandler(regs*)+0x15e>
c00188a4:	8d 46 04             	lea    eax,[esi+0x4]
c00188a7:	25 ff ff 00 00       	and    eax,0xffff
c00188ac:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00188af:	e9 bb f9 ff ff       	jmp    c001826f <Vm::faultHandler(regs*)+0x15e>
c00188b4:	83 c0 02             	add    eax,0x2
c00188b7:	25 ff ff 00 00       	and    eax,0xffff
c00188bc:	e9 ab f9 ff ff       	jmp    c001826c <Vm::faultHandler(regs*)+0x15b>
c00188c1:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00188c5:	50                   	push   eax
c00188c6:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00188ca:	50                   	push   eax
c00188cb:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00188cf:	50                   	push   eax
c00188d0:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00188d4:	50                   	push   eax
c00188d5:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00188d9:	50                   	push   eax
c00188da:	6a 6e                	push   0x6e
c00188dc:	6a 6e                	push   0x6e
c00188de:	68 68 55 02 c0       	push   0xc0025568
c00188e3:	e8 7e e6 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00188e8:	83 c4 20             	add    esp,0x20
c00188eb:	31 c0                	xor    eax,eax
c00188ed:	e9 a0 f8 ff ff       	jmp    c0018192 <Vm::faultHandler(regs*)+0x81>
c00188f2:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00188f6:	50                   	push   eax
c00188f7:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00188fb:	50                   	push   eax
c00188fc:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0018900:	50                   	push   eax
c0018901:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0018905:	50                   	push   eax
c0018906:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001890a:	50                   	push   eax
c001890b:	6a 6c                	push   0x6c
c001890d:	6a 6c                	push   0x6c
c001890f:	68 68 55 02 c0       	push   0xc0025568
c0018914:	e8 4d e6 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0018919:	83 c4 20             	add    esp,0x20
c001891c:	31 c0                	xor    eax,eax
c001891e:	e9 6f f8 ff ff       	jmp    c0018192 <Vm::faultHandler(regs*)+0x81>
c0018923:	90                   	nop

c0018924 <IOAPIC::close(int, int, void*)>:
c0018924:	b8 00 00 00 00       	mov    eax,0x0
c0018929:	c3                   	ret    

c001892a <apicGetBase()>:
c001892a:	55                   	push   ebp
c001892b:	89 e5                	mov    ebp,esp
c001892d:	83 ec 18             	sub    esp,0x18
c0018930:	a0 70 fb 02 c0       	mov    al,ds:0xc002fb70
c0018935:	83 e0 08             	and    eax,0x8
c0018938:	0f b6 c0             	movzx  eax,al
c001893b:	85 c0                	test   eax,eax
c001893d:	75 07                	jne    c0018946 <apicGetBase()+0x1c>
c001893f:	b8 00 00 00 00       	mov    eax,0x0
c0018944:	eb 1b                	jmp    c0018961 <apicGetBase()+0x37>
c0018946:	83 ec 0c             	sub    esp,0xc
c0018949:	6a 1b                	push   0x1b
c001894b:	e8 57 15 00 00       	call   c0019ea7 <x86rdmsr(unsigned int)>
c0018950:	83 c4 10             	add    esp,0x10
c0018953:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0018956:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0018959:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001895c:	25 00 00 ff ff       	and    eax,0xffff0000
c0018961:	c9                   	leave  
c0018962:	c3                   	ret    
c0018963:	90                   	nop

c0018964 <IOAPIC::IOAPIC()>:
c0018964:	83 ec 0c             	sub    esp,0xc
c0018967:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001896b:	83 ec 08             	sub    esp,0x8
c001896e:	68 58 59 02 c0       	push   0xc0025958
c0018973:	50                   	push   eax
c0018974:	e8 df 11 ff ff       	call   c0009b58 <Device::Device(char const*)>
c0018979:	83 c4 10             	add    esp,0x10
c001897c:	ba 78 59 02 c0       	mov    edx,0xc0025978
c0018981:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018985:	89 10                	mov    DWORD PTR [eax],edx
c0018987:	90                   	nop
c0018988:	83 c4 0c             	add    esp,0xc
c001898b:	c3                   	ret    

c001898c <apicOpen()>:
c001898c:	55                   	push   ebp
c001898d:	89 e5                	mov    ebp,esp
c001898f:	53                   	push   ebx
c0018990:	83 ec 34             	sub    esp,0x34
c0018993:	83 ec 0c             	sub    esp,0xc
c0018996:	68 60 59 02 c0       	push   0xc0025960
c001899b:	e8 c6 e5 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00189a0:	83 c4 10             	add    esp,0x10
c00189a3:	a0 20 fb 02 c0       	mov    al,ds:0xc002fb20
c00189a8:	83 f0 01             	xor    eax,0x1
c00189ab:	0f b6 c0             	movzx  eax,al
c00189ae:	85 c0                	test   eax,eax
c00189b0:	0f 84 a3 00 00 00    	je     c0018a59 <apicOpen()+0xcd>
c00189b6:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c00189ba:	a0 40 ce 02 c0       	mov    al,ds:0xc002ce40
c00189bf:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c00189c3:	0f b6 c0             	movzx  eax,al
c00189c6:	39 c2                	cmp    edx,eax
c00189c8:	0f 83 84 00 00 00    	jae    c0018a52 <apicOpen()+0xc6>
c00189ce:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c00189d5:	83 ec 0c             	sub    esp,0xc
c00189d8:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c00189db:	e8 9c 71 ff ff       	call   c000fb7c <malloc>
c00189e0:	83 c4 10             	add    esp,0x10
c00189e3:	89 c3                	mov    ebx,eax
c00189e5:	83 ec 0c             	sub    esp,0xc
c00189e8:	53                   	push   ebx
c00189e9:	e8 76 ff ff ff       	call   c0018964 <IOAPIC::IOAPIC()>
c00189ee:	83 c4 10             	add    esp,0x10
c00189f1:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c00189f4:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c00189f8:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00189fb:	89 14 85 00 fb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0500],edx
c0018a02:	a1 e0 fa 02 c0       	mov    eax,ds:0xc002fae0
c0018a07:	83 c0 01             	add    eax,0x1
c0018a0a:	a3 e0 fa 02 c0       	mov    ds:0xc002fae0,eax
c0018a0f:	a1 d4 d0 02 c0       	mov    eax,ds:0xc002d0d4
c0018a14:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0018a1a:	83 ec 08             	sub    esp,0x8
c0018a1d:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0018a20:	50                   	push   eax
c0018a21:	e8 d0 0f ff ff       	call   c00099f6 <Device::addChild(Device*)>
c0018a26:	83 c4 10             	add    esp,0x10
c0018a29:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0018a2c:	8b 00                	mov    eax,DWORD PTR [eax]
c0018a2e:	83 c0 08             	add    eax,0x8
c0018a31:	8b 00                	mov    eax,DWORD PTR [eax]
c0018a33:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c0018a37:	6a 00                	push   0x0
c0018a39:	6a 00                	push   0x0
c0018a3b:	52                   	push   edx
c0018a3c:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0018a3f:	ff d0                	call   eax
c0018a41:	83 c4 10             	add    esp,0x10
c0018a44:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c0018a47:	83 c0 01             	add    eax,0x1
c0018a4a:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
c0018a4d:	e9 68 ff ff ff       	jmp    c00189ba <apicOpen()+0x2e>
c0018a52:	c6 05 20 fb 02 c0 01 	mov    BYTE PTR ds:0xc002fb20,0x1
c0018a59:	e8 cc fe ff ff       	call   c001892a <apicGetBase()>
c0018a5e:	05 f0 00 00 00       	add    eax,0xf0
c0018a63:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0018a66:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0018a69:	8b 00                	mov    eax,DWORD PTR [eax]
c0018a6b:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0018a6e:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c0018a75:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c0018a7c:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0018a7f:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0018a82:	89 10                	mov    DWORD PTR [eax],edx
c0018a84:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c0018a8b:	a1 8c cd 02 c0       	mov    eax,ds:0xc002cd8c
c0018a90:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c0018a93:	7d 7c                	jge    c0018b11 <apicOpen()+0x185>
c0018a95:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0018a98:	8b 04 85 a0 cd 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3260]
c0018a9f:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c0018aa2:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0018aa5:	8b 04 85 a0 cd 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3260]
c0018aac:	c1 e8 08             	shr    eax,0x8
c0018aaf:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c0018ab3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0018ab6:	8b 04 85 a0 cd 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3260]
c0018abd:	c1 e8 18             	shr    eax,0x18
c0018ac0:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c0018ac3:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c0018ac7:	3d ff 00 00 00       	cmp    eax,0xff
c0018acc:	75 3a                	jne    c0018b08 <apicOpen()+0x17c>
c0018ace:	e8 57 fe ff ff       	call   c001892a <apicGetBase()>
c0018ad3:	0f b6 55 df          	movzx  edx,BYTE PTR [ebp-0x21]
c0018ad7:	83 fa 01             	cmp    edx,0x1
c0018ada:	75 07                	jne    c0018ae3 <apicOpen()+0x157>
c0018adc:	ba 60 03 00 00       	mov    edx,0x360
c0018ae1:	eb 05                	jmp    c0018ae8 <apicOpen()+0x15c>
c0018ae3:	ba 50 03 00 00       	mov    edx,0x350
c0018ae8:	01 d0                	add    eax,edx
c0018aea:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0018aed:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0018af0:	8b 00                	mov    eax,DWORD PTR [eax]
c0018af2:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0018af5:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c0018afc:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c0018b00:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0018b03:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0018b06:	89 10                	mov    DWORD PTR [eax],edx
c0018b08:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c0018b0c:	e9 7a ff ff ff       	jmp    c0018a8b <apicOpen()+0xff>
c0018b11:	90                   	nop
c0018b12:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0018b15:	c9                   	leave  
c0018b16:	c3                   	ret    
c0018b17:	90                   	nop

c0018b18 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c0018b18:	55                   	push   ebp
c0018b19:	89 e5                	mov    ebp,esp
c0018b1b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018b1e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0018b24:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0018b27:	72 1d                	jb     c0018b46 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0018b29:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018b2c:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c0018b32:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018b35:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c0018b3b:	01 d0                	add    eax,edx
c0018b3d:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0018b40:	73 04                	jae    c0018b46 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0018b42:	b0 01                	mov    al,0x1
c0018b44:	eb 02                	jmp    c0018b48 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c0018b46:	b0 00                	mov    al,0x0
c0018b48:	5d                   	pop    ebp
c0018b49:	c3                   	ret    

c0018b4a <IOAPIC::read(int)>:
c0018b4a:	55                   	push   ebp
c0018b4b:	89 e5                	mov    ebp,esp
c0018b4d:	83 ec 10             	sub    esp,0x10
c0018b50:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018b53:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0018b59:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0018b5c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0018b5f:	0f b6 d0             	movzx  edx,al
c0018b62:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0018b65:	89 10                	mov    DWORD PTR [eax],edx
c0018b67:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0018b6a:	83 c0 10             	add    eax,0x10
c0018b6d:	8b 00                	mov    eax,DWORD PTR [eax]
c0018b6f:	c9                   	leave  
c0018b70:	c3                   	ret    
c0018b71:	90                   	nop

c0018b72 <IOAPIC::open(int, int, void*)>:
c0018b72:	55                   	push   ebp
c0018b73:	89 e5                	mov    ebp,esp
c0018b75:	57                   	push   edi
c0018b76:	56                   	push   esi
c0018b77:	53                   	push   ebx
c0018b78:	83 ec 04             	sub    esp,0x4
c0018b7b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018b7e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0018b81:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0018b87:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018b8a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0018b90:	8b 14 85 80 ce 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd3180]
c0018b97:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018b9a:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0018ba0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018ba3:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0018ba9:	8b 14 85 00 cf 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd3100]
c0018bb0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018bb3:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0018bb9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018bbc:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0018bc2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018bc5:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0018bcb:	0f b6 f0             	movzx  esi,al
c0018bce:	89 d0                	mov    eax,edx
c0018bd0:	ba 00 00 00 00       	mov    edx,0x0
c0018bd5:	89 c7                	mov    edi,eax
c0018bd7:	83 e7 ff             	and    edi,0xffffffff
c0018bda:	89 f9                	mov    ecx,edi
c0018bdc:	0f b6 da             	movzx  ebx,dl
c0018bdf:	89 c8                	mov    eax,ecx
c0018be1:	89 da                	mov    edx,ebx
c0018be3:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0018be6:	8d 5e 08             	lea    ebx,[esi+0x8]
c0018be9:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0018bed:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0018bf1:	83 e0 00             	and    eax,0x0
c0018bf4:	09 d0                	or     eax,edx
c0018bf6:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0018bfa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018bfd:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0018c03:	8d 50 01             	lea    edx,[eax+0x1]
c0018c06:	88 d1                	mov    cl,dl
c0018c08:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0018c0b:	88 8a c5 00 00 00    	mov    BYTE PTR [edx+0xc5],cl
c0018c11:	0f b6 d0             	movzx  edx,al
c0018c14:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018c17:	83 c2 08             	add    edx,0x8
c0018c1a:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0018c1e:	0f b6 c9             	movzx  ecx,cl
c0018c21:	81 c9 00 ad de 00    	or     ecx,0xdead00
c0018c27:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0018c2b:	6a 01                	push   0x1
c0018c2d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0018c30:	e8 15 ff ff ff       	call   c0018b4a <IOAPIC::read(int)>
c0018c35:	83 c4 08             	add    esp,0x8
c0018c38:	c1 f8 10             	sar    eax,0x10
c0018c3b:	0f b6 c0             	movzx  eax,al
c0018c3e:	8d 50 01             	lea    edx,[eax+0x1]
c0018c41:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018c44:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c0018c4a:	b8 00 00 00 00       	mov    eax,0x0
c0018c4f:	8d 65 f4             	lea    esp,[ebp-0xc]
c0018c52:	5b                   	pop    ebx
c0018c53:	5e                   	pop    esi
c0018c54:	5f                   	pop    edi
c0018c55:	5d                   	pop    ebp
c0018c56:	c3                   	ret    
c0018c57:	90                   	nop

c0018c58 <IOAPIC::write(int, int)>:
c0018c58:	55                   	push   ebp
c0018c59:	89 e5                	mov    ebp,esp
c0018c5b:	83 ec 10             	sub    esp,0x10
c0018c5e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018c61:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0018c67:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0018c6a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0018c6d:	0f b6 d0             	movzx  edx,al
c0018c70:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0018c73:	89 10                	mov    DWORD PTR [eax],edx
c0018c75:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0018c78:	8d 50 10             	lea    edx,[eax+0x10]
c0018c7b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0018c7e:	89 02                	mov    DWORD PTR [edx],eax
c0018c80:	90                   	nop
c0018c81:	c9                   	leave  
c0018c82:	c3                   	ret    
c0018c83:	90                   	nop

c0018c84 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c0018c84:	55                   	push   ebp
c0018c85:	89 e5                	mov    ebp,esp
c0018c87:	53                   	push   ebx
c0018c88:	83 ec 2c             	sub    esp,0x2c
c0018c8b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0018c8e:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0018c91:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c0018c94:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c0018c97:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0018c9a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0018c9d:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0018ca0:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0018ca3:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0018ca6:	88 d8                	mov    al,bl
c0018ca8:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c0018cab:	88 c8                	mov    al,cl
c0018cad:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0018cb0:	88 d0                	mov    al,dl
c0018cb2:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c0018cb5:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0018cb9:	83 c0 08             	add    eax,0x8
c0018cbc:	d1 e0                	shl    eax,1
c0018cbe:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0018cc1:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0018cc5:	83 c0 08             	add    eax,0x8
c0018cc8:	d1 e0                	shl    eax,1
c0018cca:	83 c0 01             	add    eax,0x1
c0018ccd:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0018cd0:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0018cd3:	50                   	push   eax
c0018cd4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0018cd7:	e8 6e fe ff ff       	call   c0018b4a <IOAPIC::read(int)>
c0018cdc:	83 c4 08             	add    esp,0x8
c0018cdf:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0018ce2:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c0018ce9:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0018cec:	c1 e0 18             	shl    eax,0x18
c0018cef:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c0018cf2:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0018cf5:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0018cf8:	52                   	push   edx
c0018cf9:	50                   	push   eax
c0018cfa:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0018cfd:	e8 56 ff ff ff       	call   c0018c58 <IOAPIC::write(int, int)>
c0018d02:	83 c4 0c             	add    esp,0xc
c0018d05:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0018d08:	50                   	push   eax
c0018d09:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0018d0c:	e8 39 fe ff ff       	call   c0018b4a <IOAPIC::read(int)>
c0018d11:	83 c4 08             	add    esp,0x8
c0018d14:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0018d17:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c0018d1e:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c0018d25:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c0018d2c:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
c0018d30:	85 c0                	test   eax,eax
c0018d32:	74 09                	je     c0018d3d <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb9>
c0018d34:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c0018d3b:	eb 07                	jmp    c0018d44 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc0>
c0018d3d:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c0018d44:	0f b6 45 d0          	movzx  eax,BYTE PTR [ebp-0x30]
c0018d48:	85 c0                	test   eax,eax
c0018d4a:	74 09                	je     c0018d55 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd1>
c0018d4c:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c0018d53:	eb 07                	jmp    c0018d5c <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd8>
c0018d55:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c0018d5c:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c0018d63:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c0018d67:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c0018d6a:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0018d6d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0018d70:	52                   	push   edx
c0018d71:	50                   	push   eax
c0018d72:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0018d75:	e8 de fe ff ff       	call   c0018c58 <IOAPIC::write(int, int)>
c0018d7a:	83 c4 0c             	add    esp,0xc
c0018d7d:	90                   	nop
c0018d7e:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0018d81:	c9                   	leave  
c0018d82:	c3                   	ret    
c0018d83:	90                   	nop

c0018d84 <noCopro(unsigned long)>:
c0018d84:	c3                   	ret    
c0018d85:	90                   	nop

c0018d86 <CPU::close(int, int, void*)>:
c0018d86:	31 c0                	xor    eax,eax
c0018d88:	c3                   	ret    

c0018d89 <x86ReadCMOS(unsigned char)>:
c0018d89:	83 ec 14             	sub    esp,0x14
c0018d8c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018d90:	88 04 24             	mov    BYTE PTR [esp],al
c0018d93:	a0 50 fb 02 c0       	mov    al,ds:0xc002fb50
c0018d98:	0f b6 c0             	movzx  eax,al
c0018d9b:	85 c0                	test   eax,eax
c0018d9d:	74 04                	je     c0018da3 <x86ReadCMOS(unsigned char)+0x1a>
c0018d9f:	b2 00                	mov    dl,0x0
c0018da1:	eb 02                	jmp    c0018da5 <x86ReadCMOS(unsigned char)+0x1c>
c0018da3:	b2 80                	mov    dl,0x80
c0018da5:	8a 04 24             	mov    al,BYTE PTR [esp]
c0018da8:	09 d0                	or     eax,edx
c0018daa:	0f b6 c0             	movzx  eax,al
c0018dad:	66 c7 44 24 0e 70 00 	mov    WORD PTR [esp+0xe],0x70
c0018db4:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0018db8:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0018dbc:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c0018dc1:	ee                   	out    dx,al
c0018dc2:	66 c7 44 24 12 71 00 	mov    WORD PTR [esp+0x12],0x71
c0018dc9:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0018dce:	89 c2                	mov    edx,eax
c0018dd0:	ec                   	in     al,dx
c0018dd1:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0018dd5:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0018dd9:	83 c4 14             	add    esp,0x14
c0018ddc:	c3                   	ret    

c0018ddd <x86WriteCMOS(unsigned char, unsigned char)>:
c0018ddd:	83 ec 18             	sub    esp,0x18
c0018de0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018de4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018de8:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0018dec:	88 d0                	mov    al,dl
c0018dee:	88 04 24             	mov    BYTE PTR [esp],al
c0018df1:	a0 50 fb 02 c0       	mov    al,ds:0xc002fb50
c0018df6:	0f b6 c0             	movzx  eax,al
c0018df9:	85 c0                	test   eax,eax
c0018dfb:	74 04                	je     c0018e01 <x86WriteCMOS(unsigned char, unsigned char)+0x24>
c0018dfd:	b2 00                	mov    dl,0x0
c0018dff:	eb 02                	jmp    c0018e03 <x86WriteCMOS(unsigned char, unsigned char)+0x26>
c0018e01:	b2 80                	mov    dl,0x80
c0018e03:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0018e07:	09 d0                	or     eax,edx
c0018e09:	0f b6 c0             	movzx  eax,al
c0018e0c:	66 c7 44 24 12 70 00 	mov    WORD PTR [esp+0x12],0x70
c0018e13:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0018e17:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0018e1b:	66 8b 54 24 12       	mov    dx,WORD PTR [esp+0x12]
c0018e20:	ee                   	out    dx,al
c0018e21:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c0018e25:	66 c7 44 24 16 71 00 	mov    WORD PTR [esp+0x16],0x71
c0018e2c:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c0018e30:	8a 44 24 15          	mov    al,BYTE PTR [esp+0x15]
c0018e34:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c0018e39:	ee                   	out    dx,al
c0018e3a:	90                   	nop
c0018e3b:	83 c4 18             	add    esp,0x18
c0018e3e:	c3                   	ret    

c0018e3f <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>:
c0018e3f:	60                   	pusha  
c0018e40:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018e44:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018e48:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018e4c:	9c                   	pushf  
c0018e4d:	fa                   	cli    
c0018e4e:	0f 09                	wbinvd 
c0018e50:	0f 30                	wrmsr  
c0018e52:	9d                   	popf   
c0018e53:	89 c2                	mov    edx,eax
c0018e55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e59:	89 10                	mov    DWORD PTR [eax],edx
c0018e5b:	61                   	popa   
c0018e5c:	90                   	nop
c0018e5d:	c3                   	ret    

c0018e5e <AMD_K6_read_msr(unsigned int, REGS*)>:
c0018e5e:	60                   	pusha  
c0018e5f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018e63:	89 c1                	mov    ecx,eax
c0018e65:	9c                   	pushf  
c0018e66:	fa                   	cli    
c0018e67:	0f 09                	wbinvd 
c0018e69:	31 c0                	xor    eax,eax
c0018e6b:	31 d2                	xor    edx,edx
c0018e6d:	0f 32                	rdmsr  
c0018e6f:	9d                   	popf   
c0018e70:	89 c2                	mov    edx,eax
c0018e72:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018e76:	89 10                	mov    DWORD PTR [eax],edx
c0018e78:	61                   	popa   
c0018e79:	90                   	nop
c0018e7a:	c3                   	ret    

c0018e7b <AMD_K6_writeback(int, int, int)>:
c0018e7b:	83 ec 20             	sub    esp,0x20
c0018e7e:	a1 50 f1 02 c0       	mov    eax,ds:0xc002f150
c0018e83:	c1 e8 14             	shr    eax,0x14
c0018e86:	c1 e8 02             	shr    eax,0x2
c0018e89:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018e8d:	83 7c 24 24 05       	cmp    DWORD PTR [esp+0x24],0x5
c0018e92:	0f 85 9e 00 00 00    	jne    c0018f36 <AMD_K6_writeback(int, int, int)+0xbb>
c0018e98:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018e9c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018ea0:	83 7c 24 28 08       	cmp    DWORD PTR [esp+0x28],0x8
c0018ea5:	75 19                	jne    c0018ec0 <AMD_K6_writeback(int, int, int)+0x45>
c0018ea7:	83 7c 24 2c 07       	cmp    DWORD PTR [esp+0x2c],0x7
c0018eac:	7f 0a                	jg     c0018eb8 <AMD_K6_writeback(int, int, int)+0x3d>
c0018eae:	c7 44 24 1c 07 00 00 00 	mov    DWORD PTR [esp+0x1c],0x7
c0018eb6:	eb 08                	jmp    c0018ec0 <AMD_K6_writeback(int, int, int)+0x45>
c0018eb8:	c7 44 24 1c 09 00 00 00 	mov    DWORD PTR [esp+0x1c],0x9
c0018ec0:	83 7c 24 1c 06       	cmp    DWORD PTR [esp+0x1c],0x6
c0018ec5:	7c 6e                	jl     c0018f35 <AMD_K6_writeback(int, int, int)+0xba>
c0018ec7:	83 7c 24 1c 07       	cmp    DWORD PTR [esp+0x1c],0x7
c0018ecc:	7e 09                	jle    c0018ed7 <AMD_K6_writeback(int, int, int)+0x5c>
c0018ece:	83 7c 24 1c 09       	cmp    DWORD PTR [esp+0x1c],0x9
c0018ed3:	74 36                	je     c0018f0b <AMD_K6_writeback(int, int, int)+0x90>
c0018ed5:	eb 5e                	jmp    c0018f35 <AMD_K6_writeback(int, int, int)+0xba>
c0018ed7:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018edb:	50                   	push   eax
c0018edc:	68 82 00 00 c0       	push   0xc0000082
c0018ee1:	e8 78 ff ff ff       	call   c0018e5e <AMD_K6_read_msr(unsigned int, REGS*)>
c0018ee6:	83 c4 08             	add    esp,0x8
c0018ee9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018eed:	d1 e0                	shl    eax,1
c0018eef:	83 e0 7f             	and    eax,0x7f
c0018ef2:	89 c2                	mov    edx,eax
c0018ef4:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018ef8:	50                   	push   eax
c0018ef9:	6a 00                	push   0x0
c0018efb:	52                   	push   edx
c0018efc:	68 82 00 00 c0       	push   0xc0000082
c0018f01:	e8 39 ff ff ff       	call   c0018e3f <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>
c0018f06:	83 c4 10             	add    esp,0x10
c0018f09:	eb 2b                	jmp    c0018f36 <AMD_K6_writeback(int, int, int)+0xbb>
c0018f0b:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018f0f:	50                   	push   eax
c0018f10:	68 82 00 00 c0       	push   0xc0000082
c0018f15:	e8 44 ff ff ff       	call   c0018e5e <AMD_K6_read_msr(unsigned int, REGS*)>
c0018f1a:	83 c4 08             	add    esp,0x8
c0018f1d:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018f21:	50                   	push   eax
c0018f22:	6a 00                	push   0x0
c0018f24:	6a 00                	push   0x0
c0018f26:	68 82 00 00 c0       	push   0xc0000082
c0018f2b:	e8 0f ff ff ff       	call   c0018e3f <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>
c0018f30:	83 c4 10             	add    esp,0x10
c0018f33:	eb 01                	jmp    c0018f36 <AMD_K6_writeback(int, int, int)+0xbb>
c0018f35:	90                   	nop
c0018f36:	90                   	nop
c0018f37:	83 c4 20             	add    esp,0x20
c0018f3a:	c3                   	ret    

c0018f3b <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0018f3b:	56                   	push   esi
c0018f3c:	53                   	push   ebx
c0018f3d:	a1 40 72 02 c0       	mov    eax,ds:0xc0027240
c0018f42:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0018f46:	75 32                	jne    c0018f7a <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0018f48:	8b 15 44 fb 02 c0    	mov    edx,DWORD PTR ds:0xc002fb44
c0018f4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018f52:	89 10                	mov    DWORD PTR [eax],edx
c0018f54:	8b 15 40 fb 02 c0    	mov    edx,DWORD PTR ds:0xc002fb40
c0018f5a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018f5e:	89 10                	mov    DWORD PTR [eax],edx
c0018f60:	8b 15 3c fb 02 c0    	mov    edx,DWORD PTR ds:0xc002fb3c
c0018f66:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018f6a:	89 10                	mov    DWORD PTR [eax],edx
c0018f6c:	8b 15 38 fb 02 c0    	mov    edx,DWORD PTR ds:0xc002fb38
c0018f72:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018f76:	89 10                	mov    DWORD PTR [eax],edx
c0018f78:	eb 5c                	jmp    c0018fd6 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x9b>
c0018f7a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018f7e:	ba 00 00 00 00       	mov    edx,0x0
c0018f83:	89 d1                	mov    ecx,edx
c0018f85:	0f a2                	cpuid  
c0018f87:	89 c6                	mov    esi,eax
c0018f89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018f8d:	89 30                	mov    DWORD PTR [eax],esi
c0018f8f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018f93:	89 18                	mov    DWORD PTR [eax],ebx
c0018f95:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018f99:	89 08                	mov    DWORD PTR [eax],ecx
c0018f9b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018f9f:	89 10                	mov    DWORD PTR [eax],edx
c0018fa1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018fa5:	a3 40 72 02 c0       	mov    ds:0xc0027240,eax
c0018faa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018fae:	8b 00                	mov    eax,DWORD PTR [eax]
c0018fb0:	a3 44 fb 02 c0       	mov    ds:0xc002fb44,eax
c0018fb5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018fb9:	8b 00                	mov    eax,DWORD PTR [eax]
c0018fbb:	a3 40 fb 02 c0       	mov    ds:0xc002fb40,eax
c0018fc0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018fc4:	8b 00                	mov    eax,DWORD PTR [eax]
c0018fc6:	a3 3c fb 02 c0       	mov    ds:0xc002fb3c,eax
c0018fcb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018fcf:	8b 00                	mov    eax,DWORD PTR [eax]
c0018fd1:	a3 38 fb 02 c0       	mov    ds:0xc002fb38,eax
c0018fd6:	5b                   	pop    ebx
c0018fd7:	5e                   	pop    esi
c0018fd8:	c3                   	ret    

c0018fd9 <cpuidCheckEDX(unsigned int)>:
c0018fd9:	83 ec 10             	sub    esp,0x10
c0018fdc:	89 e0                	mov    eax,esp
c0018fde:	50                   	push   eax
c0018fdf:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018fe3:	50                   	push   eax
c0018fe4:	8d 44 24 10          	lea    eax,[esp+0x10]
c0018fe8:	50                   	push   eax
c0018fe9:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018fed:	50                   	push   eax
c0018fee:	6a 01                	push   0x1
c0018ff0:	e8 46 ff ff ff       	call   c0018f3b <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018ff5:	83 c4 14             	add    esp,0x14
c0018ff8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0018ffb:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0018fff:	0f 95 c0             	setne  al
c0019002:	83 c4 10             	add    esp,0x10
c0019005:	c3                   	ret    

c0019006 <cpuidCheckECX(unsigned int)>:
c0019006:	83 ec 10             	sub    esp,0x10
c0019009:	89 e0                	mov    eax,esp
c001900b:	50                   	push   eax
c001900c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019010:	50                   	push   eax
c0019011:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019015:	50                   	push   eax
c0019016:	8d 44 24 18          	lea    eax,[esp+0x18]
c001901a:	50                   	push   eax
c001901b:	6a 01                	push   0x1
c001901d:	e8 19 ff ff ff       	call   c0018f3b <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019022:	83 c4 14             	add    esp,0x14
c0019025:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019029:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c001902d:	0f 95 c0             	setne  al
c0019030:	83 c4 10             	add    esp,0x10
c0019033:	c3                   	ret    

c0019034 <cpuidCheckExtendedEBX(unsigned int)>:
c0019034:	83 ec 10             	sub    esp,0x10
c0019037:	89 e0                	mov    eax,esp
c0019039:	50                   	push   eax
c001903a:	8d 44 24 08          	lea    eax,[esp+0x8]
c001903e:	50                   	push   eax
c001903f:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019043:	50                   	push   eax
c0019044:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019048:	50                   	push   eax
c0019049:	6a 07                	push   0x7
c001904b:	e8 eb fe ff ff       	call   c0018f3b <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019050:	83 c4 14             	add    esp,0x14
c0019053:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019057:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c001905b:	0f 95 c0             	setne  al
c001905e:	83 c4 10             	add    esp,0x10
c0019061:	c3                   	ret    

c0019062 <cpuidCheckExtendedECX(unsigned int)>:
c0019062:	83 ec 10             	sub    esp,0x10
c0019065:	89 e0                	mov    eax,esp
c0019067:	50                   	push   eax
c0019068:	8d 44 24 08          	lea    eax,[esp+0x8]
c001906c:	50                   	push   eax
c001906d:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019071:	50                   	push   eax
c0019072:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019076:	50                   	push   eax
c0019077:	6a 07                	push   0x7
c0019079:	e8 bd fe ff ff       	call   c0018f3b <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001907e:	83 c4 14             	add    esp,0x14
c0019081:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019085:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0019089:	0f 95 c0             	setne  al
c001908c:	83 c4 10             	add    esp,0x10
c001908f:	c3                   	ret    

c0019090 <HalDetectFeatures()>:
c0019090:	57                   	push   edi
c0019091:	56                   	push   esi
c0019092:	53                   	push   ebx
c0019093:	81 ec 90 00 00 00    	sub    esp,0x90
c0019099:	83 ec 04             	sub    esp,0x4
c001909c:	6a 08                	push   0x8
c001909e:	6a 00                	push   0x0
c00190a0:	68 70 fb 02 c0       	push   0xc002fb70
c00190a5:	e8 46 74 fe ff       	call   c00004f0 <memset>
c00190aa:	83 c4 10             	add    esp,0x10
c00190ad:	a0 70 fb 02 c0       	mov    al,ds:0xc002fb70
c00190b2:	83 c8 04             	or     eax,0x4
c00190b5:	a2 70 fb 02 c0       	mov    ds:0xc002fb70,al
c00190ba:	83 ec 0c             	sub    esp,0xc
c00190bd:	68 9c 59 02 c0       	push   0xc002599c
c00190c2:	e8 9f de fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00190c7:	83 c4 10             	add    esp,0x10
c00190ca:	e8 2a 71 fe ff       	call   c00001f9 <detectCPUID>
c00190cf:	85 c0                	test   eax,eax
c00190d1:	0f 95 c0             	setne  al
c00190d4:	83 e0 01             	and    eax,0x1
c00190d7:	83 e0 01             	and    eax,0x1
c00190da:	8d 0c 00             	lea    ecx,[eax+eax*1]
c00190dd:	a0 70 fb 02 c0       	mov    al,ds:0xc002fb70
c00190e2:	83 e0 fd             	and    eax,0xfffffffd
c00190e5:	88 c2                	mov    dl,al
c00190e7:	88 c8                	mov    al,cl
c00190e9:	09 d0                	or     eax,edx
c00190eb:	a2 70 fb 02 c0       	mov    ds:0xc002fb70,al
c00190f0:	a0 70 fb 02 c0       	mov    al,ds:0xc002fb70
c00190f5:	83 e0 02             	and    eax,0x2
c00190f8:	0f b6 c0             	movzx  eax,al
c00190fb:	85 c0                	test   eax,eax
c00190fd:	0f 84 84 02 00 00    	je     c0019387 <HalDetectFeatures()+0x2f7>
c0019103:	83 ec 0c             	sub    esp,0xc
c0019106:	6a 20                	push   0x20
c0019108:	e8 cc fe ff ff       	call   c0018fd9 <cpuidCheckEDX(unsigned int)>
c001910d:	83 c4 10             	add    esp,0x10
c0019110:	83 e0 01             	and    eax,0x1
c0019113:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c001911a:	a0 70 fb 02 c0       	mov    al,ds:0xc002fb70
c001911f:	83 e0 f7             	and    eax,0xfffffff7
c0019122:	88 c2                	mov    dl,al
c0019124:	88 c8                	mov    al,cl
c0019126:	09 d0                	or     eax,edx
c0019128:	a2 70 fb 02 c0       	mov    ds:0xc002fb70,al
c001912d:	83 ec 0c             	sub    esp,0xc
c0019130:	68 00 00 00 04       	push   0x4000000
c0019135:	e8 9f fe ff ff       	call   c0018fd9 <cpuidCheckEDX(unsigned int)>
c001913a:	83 c4 10             	add    esp,0x10
c001913d:	89 c1                	mov    ecx,eax
c001913f:	83 e1 01             	and    ecx,0x1
c0019142:	a0 71 fb 02 c0       	mov    al,ds:0xc002fb71
c0019147:	83 e0 fe             	and    eax,0xfffffffe
c001914a:	88 c2                	mov    dl,al
c001914c:	88 c8                	mov    al,cl
c001914e:	09 d0                	or     eax,edx
c0019150:	a2 71 fb 02 c0       	mov    ds:0xc002fb71,al
c0019155:	83 ec 0c             	sub    esp,0xc
c0019158:	68 80 00 00 00       	push   0x80
c001915d:	e8 77 fe ff ff       	call   c0018fd9 <cpuidCheckEDX(unsigned int)>
c0019162:	83 c4 10             	add    esp,0x10
c0019165:	89 c1                	mov    ecx,eax
c0019167:	c1 e1 07             	shl    ecx,0x7
c001916a:	a0 71 fb 02 c0       	mov    al,ds:0xc002fb71
c001916f:	83 e0 7f             	and    eax,0x7f
c0019172:	88 c2                	mov    dl,al
c0019174:	88 c8                	mov    al,cl
c0019176:	09 d0                	or     eax,edx
c0019178:	a2 71 fb 02 c0       	mov    ds:0xc002fb71,al
c001917d:	83 ec 0c             	sub    esp,0xc
c0019180:	68 00 00 80 00       	push   0x800000
c0019185:	e8 4f fe ff ff       	call   c0018fd9 <cpuidCheckEDX(unsigned int)>
c001918a:	83 c4 10             	add    esp,0x10
c001918d:	83 e0 01             	and    eax,0x1
c0019190:	89 c1                	mov    ecx,eax
c0019192:	c1 e1 05             	shl    ecx,0x5
c0019195:	a0 70 fb 02 c0       	mov    al,ds:0xc002fb70
c001919a:	83 e0 df             	and    eax,0xffffffdf
c001919d:	88 c2                	mov    dl,al
c001919f:	88 c8                	mov    al,cl
c00191a1:	09 d0                	or     eax,edx
c00191a3:	a2 70 fb 02 c0       	mov    ds:0xc002fb70,al
c00191a8:	83 ec 0c             	sub    esp,0xc
c00191ab:	6a 01                	push   0x1
c00191ad:	e8 36 40 ff ff       	call   c000d1e8 <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c00191b2:	83 c4 10             	add    esp,0x10
c00191b5:	0f b6 c0             	movzx  eax,al
c00191b8:	85 c0                	test   eax,eax
c00191ba:	75 17                	jne    c00191d3 <HalDetectFeatures()+0x143>
c00191bc:	83 ec 0c             	sub    esp,0xc
c00191bf:	68 00 04 00 00       	push   0x400
c00191c4:	e8 1f 40 ff ff       	call   c000d1e8 <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c00191c9:	83 c4 10             	add    esp,0x10
c00191cc:	0f b6 c0             	movzx  eax,al
c00191cf:	85 c0                	test   eax,eax
c00191d1:	74 04                	je     c00191d7 <HalDetectFeatures()+0x147>
c00191d3:	b0 01                	mov    al,0x1
c00191d5:	eb 02                	jmp    c00191d9 <HalDetectFeatures()+0x149>
c00191d7:	b0 00                	mov    al,0x0
c00191d9:	0f b6 c0             	movzx  eax,al
c00191dc:	85 c0                	test   eax,eax
c00191de:	74 0f                	je     c00191ef <HalDetectFeatures()+0x15f>
c00191e0:	a0 70 fb 02 c0       	mov    al,ds:0xc002fb70
c00191e5:	83 e0 fe             	and    eax,0xfffffffe
c00191e8:	a2 70 fb 02 c0       	mov    ds:0xc002fb70,al
c00191ed:	eb 28                	jmp    c0019217 <HalDetectFeatures()+0x187>
c00191ef:	83 ec 0c             	sub    esp,0xc
c00191f2:	68 00 02 00 00       	push   0x200
c00191f7:	e8 dd fd ff ff       	call   c0018fd9 <cpuidCheckEDX(unsigned int)>
c00191fc:	83 c4 10             	add    esp,0x10
c00191ff:	89 c1                	mov    ecx,eax
c0019201:	83 e1 01             	and    ecx,0x1
c0019204:	a0 70 fb 02 c0       	mov    al,ds:0xc002fb70
c0019209:	83 e0 fe             	and    eax,0xfffffffe
c001920c:	88 c2                	mov    dl,al
c001920e:	88 c8                	mov    al,cl
c0019210:	09 d0                	or     eax,edx
c0019212:	a2 70 fb 02 c0       	mov    ds:0xc002fb70,al
c0019217:	a0 70 fb 02 c0       	mov    al,ds:0xc002fb70
c001921c:	83 e0 01             	and    eax,0x1
c001921f:	0f b6 c0             	movzx  eax,al
c0019222:	85 c0                	test   eax,eax
c0019224:	74 1c                	je     c0019242 <HalDetectFeatures()+0x1b2>
c0019226:	a0 70 fb 02 c0       	mov    al,ds:0xc002fb70
c001922b:	83 e0 08             	and    eax,0x8
c001922e:	0f b6 c0             	movzx  eax,al
c0019231:	85 c0                	test   eax,eax
c0019233:	75 0d                	jne    c0019242 <HalDetectFeatures()+0x1b2>
c0019235:	a0 70 fb 02 c0       	mov    al,ds:0xc002fb70
c001923a:	83 e0 fe             	and    eax,0xfffffffe
c001923d:	a2 70 fb 02 c0       	mov    ds:0xc002fb70,al
c0019242:	c6 84 24 8f 00 00 00 01 	mov    BYTE PTR [esp+0x8f],0x1
c001924a:	c6 84 24 8f 00 00 00 00 	mov    BYTE PTR [esp+0x8f],0x0
c0019252:	0f b6 84 24 8f 00 00 00 	movzx  eax,BYTE PTR [esp+0x8f]
c001925a:	85 c0                	test   eax,eax
c001925c:	0f 84 ab 00 00 00    	je     c001930d <HalDetectFeatures()+0x27d>
c0019262:	83 ec 0c             	sub    esp,0xc
c0019265:	6a 01                	push   0x1
c0019267:	e8 9a fd ff ff       	call   c0019006 <cpuidCheckECX(unsigned int)>
c001926c:	83 c4 10             	add    esp,0x10
c001926f:	83 e0 01             	and    eax,0x1
c0019272:	8d 0c 00             	lea    ecx,[eax+eax*1]
c0019275:	a0 71 fb 02 c0       	mov    al,ds:0xc002fb71
c001927a:	83 e0 fd             	and    eax,0xfffffffd
c001927d:	88 c2                	mov    dl,al
c001927f:	88 c8                	mov    al,cl
c0019281:	09 d0                	or     eax,edx
c0019283:	a2 71 fb 02 c0       	mov    ds:0xc002fb71,al
c0019288:	83 ec 0c             	sub    esp,0xc
c001928b:	68 00 02 00 00       	push   0x200
c0019290:	e8 71 fd ff ff       	call   c0019006 <cpuidCheckECX(unsigned int)>
c0019295:	83 c4 10             	add    esp,0x10
c0019298:	83 e0 01             	and    eax,0x1
c001929b:	89 c1                	mov    ecx,eax
c001929d:	c1 e1 04             	shl    ecx,0x4
c00192a0:	a0 71 fb 02 c0       	mov    al,ds:0xc002fb71
c00192a5:	83 e0 ef             	and    eax,0xffffffef
c00192a8:	88 c2                	mov    dl,al
c00192aa:	88 c8                	mov    al,cl
c00192ac:	09 d0                	or     eax,edx
c00192ae:	a2 71 fb 02 c0       	mov    ds:0xc002fb71,al
c00192b3:	83 ec 0c             	sub    esp,0xc
c00192b6:	68 00 00 08 00       	push   0x80000
c00192bb:	e8 46 fd ff ff       	call   c0019006 <cpuidCheckECX(unsigned int)>
c00192c0:	83 c4 10             	add    esp,0x10
c00192c3:	83 e0 01             	and    eax,0x1
c00192c6:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
c00192cd:	a0 71 fb 02 c0       	mov    al,ds:0xc002fb71
c00192d2:	83 e0 fb             	and    eax,0xfffffffb
c00192d5:	88 c2                	mov    dl,al
c00192d7:	88 c8                	mov    al,cl
c00192d9:	09 d0                	or     eax,edx
c00192db:	a2 71 fb 02 c0       	mov    ds:0xc002fb71,al
c00192e0:	83 ec 0c             	sub    esp,0xc
c00192e3:	68 00 00 10 00       	push   0x100000
c00192e8:	e8 19 fd ff ff       	call   c0019006 <cpuidCheckECX(unsigned int)>
c00192ed:	83 c4 10             	add    esp,0x10
c00192f0:	83 e0 01             	and    eax,0x1
c00192f3:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c00192fa:	a0 71 fb 02 c0       	mov    al,ds:0xc002fb71
c00192ff:	83 e0 f7             	and    eax,0xfffffff7
c0019302:	88 c2                	mov    dl,al
c0019304:	88 c8                	mov    al,cl
c0019306:	09 d0                	or     eax,edx
c0019308:	a2 71 fb 02 c0       	mov    ds:0xc002fb71,al
c001930d:	83 ec 0c             	sub    esp,0xc
c0019310:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019314:	50                   	push   eax
c0019315:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0019319:	50                   	push   eax
c001931a:	8d 44 24 34          	lea    eax,[esp+0x34]
c001931e:	50                   	push   eax
c001931f:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0019323:	50                   	push   eax
c0019324:	68 00 00 00 80       	push   0x80000000
c0019329:	e8 0d fc ff ff       	call   c0018f3b <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001932e:	83 c4 20             	add    esp,0x20
c0019331:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0019335:	3d 00 00 00 80       	cmp    eax,0x80000000
c001933a:	76 4b                	jbe    c0019387 <HalDetectFeatures()+0x2f7>
c001933c:	83 ec 0c             	sub    esp,0xc
c001933f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019343:	50                   	push   eax
c0019344:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0019348:	50                   	push   eax
c0019349:	8d 44 24 34          	lea    eax,[esp+0x34]
c001934d:	50                   	push   eax
c001934e:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0019352:	50                   	push   eax
c0019353:	68 01 00 00 80       	push   0x80000001
c0019358:	e8 de fb ff ff       	call   c0018f3b <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001935d:	83 c4 20             	add    esp,0x20
c0019360:	a0 70 fb 02 c0       	mov    al,ds:0xc002fb70
c0019365:	83 e0 bf             	and    eax,0xffffffbf
c0019368:	a2 70 fb 02 c0       	mov    ds:0xc002fb70,al
c001936d:	a0 72 fb 02 c0       	mov    al,ds:0xc002fb72
c0019372:	83 e0 fd             	and    eax,0xfffffffd
c0019375:	a2 72 fb 02 c0       	mov    ds:0xc002fb72,al
c001937a:	a0 72 fb 02 c0       	mov    al,ds:0xc002fb72
c001937f:	83 e0 fe             	and    eax,0xfffffffe
c0019382:	a2 72 fb 02 c0       	mov    ds:0xc002fb72,al
c0019387:	83 ec 0c             	sub    esp,0xc
c001938a:	68 00 04 00 00       	push   0x400
c001938f:	e8 54 3e ff ff       	call   c000d1e8 <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c0019394:	83 c4 10             	add    esp,0x10
c0019397:	0f b6 c0             	movzx  eax,al
c001939a:	85 c0                	test   eax,eax
c001939c:	74 0d                	je     c00193ab <HalDetectFeatures()+0x31b>
c001939e:	a0 70 fb 02 c0       	mov    al,ds:0xc002fb70
c00193a3:	83 e0 fb             	and    eax,0xfffffffb
c00193a6:	a2 70 fb 02 c0       	mov    ds:0xc002fb70,al
c00193ab:	c6 05 6c fb 02 c0 01 	mov    BYTE PTR ds:0xc002fb6c,0x1
c00193b2:	83 ec 04             	sub    esp,0x4
c00193b5:	6a 0d                	push   0xd
c00193b7:	6a 00                	push   0x0
c00193b9:	68 54 fb 02 c0       	push   0xc002fb54
c00193be:	e8 2d 71 fe ff       	call   c00004f0 <memset>
c00193c3:	83 c4 10             	add    esp,0x10
c00193c6:	a0 70 fb 02 c0       	mov    al,ds:0xc002fb70
c00193cb:	83 e0 02             	and    eax,0x2
c00193ce:	0f b6 c0             	movzx  eax,al
c00193d1:	85 c0                	test   eax,eax
c00193d3:	0f 84 16 08 00 00    	je     c0019bef <HalDetectFeatures()+0xb5f>
c00193d9:	83 ec 0c             	sub    esp,0xc
c00193dc:	6a 10                	push   0x10
c00193de:	e8 f6 fb ff ff       	call   c0018fd9 <cpuidCheckEDX(unsigned int)>
c00193e3:	83 c4 10             	add    esp,0x10
c00193e6:	83 e0 01             	and    eax,0x1
c00193e9:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c00193f0:	a0 72 fb 02 c0       	mov    al,ds:0xc002fb72
c00193f5:	83 e0 f7             	and    eax,0xfffffff7
c00193f8:	88 c2                	mov    dl,al
c00193fa:	88 c8                	mov    al,cl
c00193fc:	09 d0                	or     eax,edx
c00193fe:	a2 72 fb 02 c0       	mov    ds:0xc002fb72,al
c0019403:	83 ec 0c             	sub    esp,0xc
c0019406:	6a 40                	push   0x40
c0019408:	e8 cc fb ff ff       	call   c0018fd9 <cpuidCheckEDX(unsigned int)>
c001940d:	83 c4 10             	add    esp,0x10
c0019410:	83 e0 01             	and    eax,0x1
c0019413:	89 c1                	mov    ecx,eax
c0019415:	c1 e1 04             	shl    ecx,0x4
c0019418:	a0 72 fb 02 c0       	mov    al,ds:0xc002fb72
c001941d:	83 e0 ef             	and    eax,0xffffffef
c0019420:	88 c2                	mov    dl,al
c0019422:	88 c8                	mov    al,cl
c0019424:	09 d0                	or     eax,edx
c0019426:	a2 72 fb 02 c0       	mov    ds:0xc002fb72,al
c001942b:	83 ec 0c             	sub    esp,0xc
c001942e:	6a 08                	push   0x8
c0019430:	e8 a4 fb ff ff       	call   c0018fd9 <cpuidCheckEDX(unsigned int)>
c0019435:	83 c4 10             	add    esp,0x10
c0019438:	83 e0 01             	and    eax,0x1
c001943b:	89 c1                	mov    ecx,eax
c001943d:	c1 e1 05             	shl    ecx,0x5
c0019440:	a0 72 fb 02 c0       	mov    al,ds:0xc002fb72
c0019445:	83 e0 df             	and    eax,0xffffffdf
c0019448:	88 c2                	mov    dl,al
c001944a:	88 c8                	mov    al,cl
c001944c:	09 d0                	or     eax,edx
c001944e:	a2 72 fb 02 c0       	mov    ds:0xc002fb72,al
c0019453:	83 ec 0c             	sub    esp,0xc
c0019456:	68 00 20 00 00       	push   0x2000
c001945b:	e8 79 fb ff ff       	call   c0018fd9 <cpuidCheckEDX(unsigned int)>
c0019460:	83 c4 10             	add    esp,0x10
c0019463:	83 e0 01             	and    eax,0x1
c0019466:	89 c1                	mov    ecx,eax
c0019468:	c1 e1 06             	shl    ecx,0x6
c001946b:	a0 72 fb 02 c0       	mov    al,ds:0xc002fb72
c0019470:	83 e0 bf             	and    eax,0xffffffbf
c0019473:	88 c2                	mov    dl,al
c0019475:	88 c8                	mov    al,cl
c0019477:	09 d0                	or     eax,edx
c0019479:	a2 72 fb 02 c0       	mov    ds:0xc002fb72,al
c001947e:	83 ec 0c             	sub    esp,0xc
c0019481:	68 00 00 01 00       	push   0x10000
c0019486:	e8 4e fb ff ff       	call   c0018fd9 <cpuidCheckEDX(unsigned int)>
c001948b:	83 c4 10             	add    esp,0x10
c001948e:	89 c1                	mov    ecx,eax
c0019490:	c1 e1 07             	shl    ecx,0x7
c0019493:	a0 72 fb 02 c0       	mov    al,ds:0xc002fb72
c0019498:	83 e0 7f             	and    eax,0x7f
c001949b:	88 c2                	mov    dl,al
c001949d:	88 c8                	mov    al,cl
c001949f:	09 d0                	or     eax,edx
c00194a1:	a2 72 fb 02 c0       	mov    ds:0xc002fb72,al
c00194a6:	83 ec 0c             	sub    esp,0xc
c00194a9:	6a 01                	push   0x1
c00194ab:	e8 29 fb ff ff       	call   c0018fd9 <cpuidCheckEDX(unsigned int)>
c00194b0:	83 c4 10             	add    esp,0x10
c00194b3:	83 e0 01             	and    eax,0x1
c00194b6:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c00194bd:	a0 74 fb 02 c0       	mov    al,ds:0xc002fb74
c00194c2:	83 e0 f7             	and    eax,0xfffffff7
c00194c5:	88 c2                	mov    dl,al
c00194c7:	88 c8                	mov    al,cl
c00194c9:	09 d0                	or     eax,edx
c00194cb:	a2 74 fb 02 c0       	mov    ds:0xc002fb74,al
c00194d0:	83 ec 0c             	sub    esp,0xc
c00194d3:	68 00 08 00 00       	push   0x800
c00194d8:	e8 fc fa ff ff       	call   c0018fd9 <cpuidCheckEDX(unsigned int)>
c00194dd:	83 c4 10             	add    esp,0x10
c00194e0:	89 c1                	mov    ecx,eax
c00194e2:	83 e1 01             	and    ecx,0x1
c00194e5:	a0 74 fb 02 c0       	mov    al,ds:0xc002fb74
c00194ea:	83 e0 fe             	and    eax,0xfffffffe
c00194ed:	88 c2                	mov    dl,al
c00194ef:	88 c8                	mov    al,cl
c00194f1:	09 d0                	or     eax,edx
c00194f3:	a2 74 fb 02 c0       	mov    ds:0xc002fb74,al
c00194f8:	a0 72 fb 02 c0       	mov    al,ds:0xc002fb72
c00194fd:	83 e0 40             	and    eax,0x40
c0019500:	0f b6 c0             	movzx  eax,al
c0019503:	85 c0                	test   eax,eax
c0019505:	74 0a                	je     c0019511 <HalDetectFeatures()+0x481>
c0019507:	c7 05 4c fb 02 c0 00 01 00 00 	mov    DWORD PTR ds:0xc002fb4c,0x100
c0019511:	a0 72 fb 02 c0       	mov    al,ds:0xc002fb72
c0019516:	83 e0 80             	and    eax,0xffffff80
c0019519:	0f b6 c0             	movzx  eax,al
c001951c:	85 c0                	test   eax,eax
c001951e:	74 0a                	je     c001952a <HalDetectFeatures()+0x49a>
c0019520:	c7 05 48 fb 02 c0 80 00 00 00 	mov    DWORD PTR ds:0xc002fb48,0x80
c001952a:	83 ec 0c             	sub    esp,0xc
c001952d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019531:	50                   	push   eax
c0019532:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0019536:	50                   	push   eax
c0019537:	8d 44 24 24          	lea    eax,[esp+0x24]
c001953b:	50                   	push   eax
c001953c:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0019540:	50                   	push   eax
c0019541:	6a 00                	push   0x0
c0019543:	e8 f3 f9 ff ff       	call   c0018f3b <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019548:	83 c4 20             	add    esp,0x20
c001954b:	c7 44 24 48 54 fb 02 c0 	mov    DWORD PTR [esp+0x48],0xc002fb54
c0019553:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019557:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001955b:	c7 44 24 40 04 00 00 00 	mov    DWORD PTR [esp+0x40],0x4
c0019563:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0019567:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001956b:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001956f:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0019573:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0019577:	89 c6                	mov    esi,eax
c0019579:	89 d7                	mov    edi,edx
c001957b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001957d:	89 c8                	mov    eax,ecx
c001957f:	89 fa                	mov    edx,edi
c0019581:	89 f3                	mov    ebx,esi
c0019583:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c0019587:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001958b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001958f:	b8 58 fb 02 c0       	mov    eax,0xc002fb58
c0019594:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0019598:	8d 44 24 08          	lea    eax,[esp+0x8]
c001959c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00195a0:	c7 44 24 5c 04 00 00 00 	mov    DWORD PTR [esp+0x5c],0x4
c00195a8:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c00195ac:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c00195b0:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00195b4:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c00195b8:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c00195bc:	89 c6                	mov    esi,eax
c00195be:	89 d7                	mov    edi,edx
c00195c0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00195c2:	89 c8                	mov    eax,ecx
c00195c4:	89 fa                	mov    edx,edi
c00195c6:	89 f3                	mov    ebx,esi
c00195c8:	89 5c 24 54          	mov    DWORD PTR [esp+0x54],ebx
c00195cc:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c00195d0:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00195d4:	b8 5c fb 02 c0       	mov    eax,0xc002fb5c
c00195d9:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00195e0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00195e4:	89 44 24 7c          	mov    DWORD PTR [esp+0x7c],eax
c00195e8:	c7 44 24 78 04 00 00 00 	mov    DWORD PTR [esp+0x78],0x4
c00195f0:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c00195f7:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c00195fb:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c00195ff:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0019606:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c001960a:	89 c6                	mov    esi,eax
c001960c:	89 d7                	mov    edi,edx
c001960e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019610:	89 c8                	mov    eax,ecx
c0019612:	89 fa                	mov    edx,edi
c0019614:	89 f3                	mov    ebx,esi
c0019616:	89 5c 24 70          	mov    DWORD PTR [esp+0x70],ebx
c001961a:	89 54 24 6c          	mov    DWORD PTR [esp+0x6c],edx
c001961e:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c0019622:	83 ec 08             	sub    esp,0x8
c0019625:	68 b1 59 02 c0       	push   0xc00259b1
c001962a:	68 54 fb 02 c0       	push   0xc002fb54
c001962f:	e8 4c 71 fe ff       	call   c0000780 <strcmp>
c0019634:	83 c4 10             	add    esp,0x10
c0019637:	85 c0                	test   eax,eax
c0019639:	74 19                	je     c0019654 <HalDetectFeatures()+0x5c4>
c001963b:	83 ec 08             	sub    esp,0x8
c001963e:	68 be 59 02 c0       	push   0xc00259be
c0019643:	68 54 fb 02 c0       	push   0xc002fb54
c0019648:	e8 33 71 fe ff       	call   c0000780 <strcmp>
c001964d:	83 c4 10             	add    esp,0x10
c0019650:	85 c0                	test   eax,eax
c0019652:	75 04                	jne    c0019658 <HalDetectFeatures()+0x5c8>
c0019654:	b0 01                	mov    al,0x1
c0019656:	eb 02                	jmp    c001965a <HalDetectFeatures()+0x5ca>
c0019658:	b0 00                	mov    al,0x0
c001965a:	0f b6 c0             	movzx  eax,al
c001965d:	85 c0                	test   eax,eax
c001965f:	74 0f                	je     c0019670 <HalDetectFeatures()+0x5e0>
c0019661:	c7 05 68 fb 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc002fb68,0x2
c001966b:	e9 0d 03 00 00       	jmp    c001997d <HalDetectFeatures()+0x8ed>
c0019670:	83 ec 08             	sub    esp,0x8
c0019673:	68 cb 59 02 c0       	push   0xc00259cb
c0019678:	68 54 fb 02 c0       	push   0xc002fb54
c001967d:	e8 fe 70 fe ff       	call   c0000780 <strcmp>
c0019682:	83 c4 10             	add    esp,0x10
c0019685:	85 c0                	test   eax,eax
c0019687:	74 19                	je     c00196a2 <HalDetectFeatures()+0x612>
c0019689:	83 ec 08             	sub    esp,0x8
c001968c:	68 d8 59 02 c0       	push   0xc00259d8
c0019691:	68 54 fb 02 c0       	push   0xc002fb54
c0019696:	e8 e5 70 fe ff       	call   c0000780 <strcmp>
c001969b:	83 c4 10             	add    esp,0x10
c001969e:	85 c0                	test   eax,eax
c00196a0:	75 04                	jne    c00196a6 <HalDetectFeatures()+0x616>
c00196a2:	b0 01                	mov    al,0x1
c00196a4:	eb 02                	jmp    c00196a8 <HalDetectFeatures()+0x618>
c00196a6:	b0 00                	mov    al,0x0
c00196a8:	0f b6 c0             	movzx  eax,al
c00196ab:	85 c0                	test   eax,eax
c00196ad:	74 0f                	je     c00196be <HalDetectFeatures()+0x62e>
c00196af:	c7 05 68 fb 02 c0 04 00 00 00 	mov    DWORD PTR ds:0xc002fb68,0x4
c00196b9:	e9 bf 02 00 00       	jmp    c001997d <HalDetectFeatures()+0x8ed>
c00196be:	83 ec 08             	sub    esp,0x8
c00196c1:	68 e5 59 02 c0       	push   0xc00259e5
c00196c6:	68 54 fb 02 c0       	push   0xc002fb54
c00196cb:	e8 b0 70 fe ff       	call   c0000780 <strcmp>
c00196d0:	83 c4 10             	add    esp,0x10
c00196d3:	85 c0                	test   eax,eax
c00196d5:	74 19                	je     c00196f0 <HalDetectFeatures()+0x660>
c00196d7:	83 ec 08             	sub    esp,0x8
c00196da:	68 f2 59 02 c0       	push   0xc00259f2
c00196df:	68 54 fb 02 c0       	push   0xc002fb54
c00196e4:	e8 97 70 fe ff       	call   c0000780 <strcmp>
c00196e9:	83 c4 10             	add    esp,0x10
c00196ec:	85 c0                	test   eax,eax
c00196ee:	75 04                	jne    c00196f4 <HalDetectFeatures()+0x664>
c00196f0:	b0 01                	mov    al,0x1
c00196f2:	eb 02                	jmp    c00196f6 <HalDetectFeatures()+0x666>
c00196f4:	b0 00                	mov    al,0x0
c00196f6:	0f b6 c0             	movzx  eax,al
c00196f9:	85 c0                	test   eax,eax
c00196fb:	74 0f                	je     c001970c <HalDetectFeatures()+0x67c>
c00196fd:	c7 05 68 fb 02 c0 05 00 00 00 	mov    DWORD PTR ds:0xc002fb68,0x5
c0019707:	e9 71 02 00 00       	jmp    c001997d <HalDetectFeatures()+0x8ed>
c001970c:	83 ec 08             	sub    esp,0x8
c001970f:	68 ff 59 02 c0       	push   0xc00259ff
c0019714:	68 54 fb 02 c0       	push   0xc002fb54
c0019719:	e8 62 70 fe ff       	call   c0000780 <strcmp>
c001971e:	83 c4 10             	add    esp,0x10
c0019721:	85 c0                	test   eax,eax
c0019723:	0f 94 c0             	sete   al
c0019726:	0f b6 c0             	movzx  eax,al
c0019729:	85 c0                	test   eax,eax
c001972b:	74 0f                	je     c001973c <HalDetectFeatures()+0x6ac>
c001972d:	c7 05 68 fb 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002fb68,0x1
c0019737:	e9 41 02 00 00       	jmp    c001997d <HalDetectFeatures()+0x8ed>
c001973c:	83 ec 08             	sub    esp,0x8
c001973f:	68 0c 5a 02 c0       	push   0xc0025a0c
c0019744:	68 54 fb 02 c0       	push   0xc002fb54
c0019749:	e8 32 70 fe ff       	call   c0000780 <strcmp>
c001974e:	83 c4 10             	add    esp,0x10
c0019751:	85 c0                	test   eax,eax
c0019753:	0f 94 c0             	sete   al
c0019756:	0f b6 c0             	movzx  eax,al
c0019759:	85 c0                	test   eax,eax
c001975b:	74 0f                	je     c001976c <HalDetectFeatures()+0x6dc>
c001975d:	c7 05 68 fb 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc002fb68,0x3
c0019767:	e9 11 02 00 00       	jmp    c001997d <HalDetectFeatures()+0x8ed>
c001976c:	83 ec 08             	sub    esp,0x8
c001976f:	68 cb 59 02 c0       	push   0xc00259cb
c0019774:	68 54 fb 02 c0       	push   0xc002fb54
c0019779:	e8 02 70 fe ff       	call   c0000780 <strcmp>
c001977e:	83 c4 10             	add    esp,0x10
c0019781:	85 c0                	test   eax,eax
c0019783:	0f 94 c0             	sete   al
c0019786:	0f b6 c0             	movzx  eax,al
c0019789:	85 c0                	test   eax,eax
c001978b:	74 0f                	je     c001979c <HalDetectFeatures()+0x70c>
c001978d:	c7 05 68 fb 02 c0 06 00 00 00 	mov    DWORD PTR ds:0xc002fb68,0x6
c0019797:	e9 e1 01 00 00       	jmp    c001997d <HalDetectFeatures()+0x8ed>
c001979c:	83 ec 08             	sub    esp,0x8
c001979f:	68 19 5a 02 c0       	push   0xc0025a19
c00197a4:	68 54 fb 02 c0       	push   0xc002fb54
c00197a9:	e8 d2 6f fe ff       	call   c0000780 <strcmp>
c00197ae:	83 c4 10             	add    esp,0x10
c00197b1:	85 c0                	test   eax,eax
c00197b3:	0f 94 c0             	sete   al
c00197b6:	0f b6 c0             	movzx  eax,al
c00197b9:	85 c0                	test   eax,eax
c00197bb:	74 0f                	je     c00197cc <HalDetectFeatures()+0x73c>
c00197bd:	c7 05 68 fb 02 c0 07 00 00 00 	mov    DWORD PTR ds:0xc002fb68,0x7
c00197c7:	e9 b1 01 00 00       	jmp    c001997d <HalDetectFeatures()+0x8ed>
c00197cc:	83 ec 08             	sub    esp,0x8
c00197cf:	68 26 5a 02 c0       	push   0xc0025a26
c00197d4:	68 54 fb 02 c0       	push   0xc002fb54
c00197d9:	e8 a2 6f fe ff       	call   c0000780 <strcmp>
c00197de:	83 c4 10             	add    esp,0x10
c00197e1:	85 c0                	test   eax,eax
c00197e3:	0f 94 c0             	sete   al
c00197e6:	0f b6 c0             	movzx  eax,al
c00197e9:	85 c0                	test   eax,eax
c00197eb:	74 0f                	je     c00197fc <HalDetectFeatures()+0x76c>
c00197ed:	c7 05 68 fb 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002fb68,0x8
c00197f7:	e9 81 01 00 00       	jmp    c001997d <HalDetectFeatures()+0x8ed>
c00197fc:	83 ec 08             	sub    esp,0x8
c00197ff:	68 33 5a 02 c0       	push   0xc0025a33
c0019804:	68 54 fb 02 c0       	push   0xc002fb54
c0019809:	e8 72 6f fe ff       	call   c0000780 <strcmp>
c001980e:	83 c4 10             	add    esp,0x10
c0019811:	85 c0                	test   eax,eax
c0019813:	0f 94 c0             	sete   al
c0019816:	0f b6 c0             	movzx  eax,al
c0019819:	85 c0                	test   eax,eax
c001981b:	74 0f                	je     c001982c <HalDetectFeatures()+0x79c>
c001981d:	c7 05 68 fb 02 c0 09 00 00 00 	mov    DWORD PTR ds:0xc002fb68,0x9
c0019827:	e9 51 01 00 00       	jmp    c001997d <HalDetectFeatures()+0x8ed>
c001982c:	83 ec 08             	sub    esp,0x8
c001982f:	68 40 5a 02 c0       	push   0xc0025a40
c0019834:	68 54 fb 02 c0       	push   0xc002fb54
c0019839:	e8 42 6f fe ff       	call   c0000780 <strcmp>
c001983e:	83 c4 10             	add    esp,0x10
c0019841:	85 c0                	test   eax,eax
c0019843:	0f 94 c0             	sete   al
c0019846:	0f b6 c0             	movzx  eax,al
c0019849:	85 c0                	test   eax,eax
c001984b:	74 0f                	je     c001985c <HalDetectFeatures()+0x7cc>
c001984d:	c7 05 68 fb 02 c0 0a 00 00 00 	mov    DWORD PTR ds:0xc002fb68,0xa
c0019857:	e9 21 01 00 00       	jmp    c001997d <HalDetectFeatures()+0x8ed>
c001985c:	83 ec 08             	sub    esp,0x8
c001985f:	68 4d 5a 02 c0       	push   0xc0025a4d
c0019864:	68 54 fb 02 c0       	push   0xc002fb54
c0019869:	e8 12 6f fe ff       	call   c0000780 <strcmp>
c001986e:	83 c4 10             	add    esp,0x10
c0019871:	85 c0                	test   eax,eax
c0019873:	0f 94 c0             	sete   al
c0019876:	0f b6 c0             	movzx  eax,al
c0019879:	85 c0                	test   eax,eax
c001987b:	74 0f                	je     c001988c <HalDetectFeatures()+0x7fc>
c001987d:	c7 05 68 fb 02 c0 0b 00 00 00 	mov    DWORD PTR ds:0xc002fb68,0xb
c0019887:	e9 f1 00 00 00       	jmp    c001997d <HalDetectFeatures()+0x8ed>
c001988c:	83 ec 08             	sub    esp,0x8
c001988f:	68 5a 5a 02 c0       	push   0xc0025a5a
c0019894:	68 54 fb 02 c0       	push   0xc002fb54
c0019899:	e8 e2 6e fe ff       	call   c0000780 <strcmp>
c001989e:	83 c4 10             	add    esp,0x10
c00198a1:	85 c0                	test   eax,eax
c00198a3:	0f 94 c0             	sete   al
c00198a6:	0f b6 c0             	movzx  eax,al
c00198a9:	85 c0                	test   eax,eax
c00198ab:	74 0f                	je     c00198bc <HalDetectFeatures()+0x82c>
c00198ad:	c7 05 68 fb 02 c0 0c 00 00 00 	mov    DWORD PTR ds:0xc002fb68,0xc
c00198b7:	e9 c1 00 00 00       	jmp    c001997d <HalDetectFeatures()+0x8ed>
c00198bc:	83 ec 08             	sub    esp,0x8
c00198bf:	68 67 5a 02 c0       	push   0xc0025a67
c00198c4:	68 54 fb 02 c0       	push   0xc002fb54
c00198c9:	e8 b2 6e fe ff       	call   c0000780 <strcmp>
c00198ce:	83 c4 10             	add    esp,0x10
c00198d1:	85 c0                	test   eax,eax
c00198d3:	0f 94 c0             	sete   al
c00198d6:	0f b6 c0             	movzx  eax,al
c00198d9:	85 c0                	test   eax,eax
c00198db:	74 0f                	je     c00198ec <HalDetectFeatures()+0x85c>
c00198dd:	c7 05 68 fb 02 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc002fb68,0xd
c00198e7:	e9 91 00 00 00       	jmp    c001997d <HalDetectFeatures()+0x8ed>
c00198ec:	83 ec 08             	sub    esp,0x8
c00198ef:	68 74 5a 02 c0       	push   0xc0025a74
c00198f4:	68 54 fb 02 c0       	push   0xc002fb54
c00198f9:	e8 82 6e fe ff       	call   c0000780 <strcmp>
c00198fe:	83 c4 10             	add    esp,0x10
c0019901:	85 c0                	test   eax,eax
c0019903:	0f 94 c0             	sete   al
c0019906:	0f b6 c0             	movzx  eax,al
c0019909:	85 c0                	test   eax,eax
c001990b:	74 0c                	je     c0019919 <HalDetectFeatures()+0x889>
c001990d:	c7 05 68 fb 02 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc002fb68,0xd
c0019917:	eb 64                	jmp    c001997d <HalDetectFeatures()+0x8ed>
c0019919:	83 ec 08             	sub    esp,0x8
c001991c:	68 81 5a 02 c0       	push   0xc0025a81
c0019921:	68 54 fb 02 c0       	push   0xc002fb54
c0019926:	e8 55 6e fe ff       	call   c0000780 <strcmp>
c001992b:	83 c4 10             	add    esp,0x10
c001992e:	85 c0                	test   eax,eax
c0019930:	0f 94 c0             	sete   al
c0019933:	0f b6 c0             	movzx  eax,al
c0019936:	85 c0                	test   eax,eax
c0019938:	74 0c                	je     c0019946 <HalDetectFeatures()+0x8b6>
c001993a:	c7 05 68 fb 02 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc002fb68,0xd
c0019944:	eb 37                	jmp    c001997d <HalDetectFeatures()+0x8ed>
c0019946:	83 ec 08             	sub    esp,0x8
c0019949:	68 8e 5a 02 c0       	push   0xc0025a8e
c001994e:	68 54 fb 02 c0       	push   0xc002fb54
c0019953:	e8 28 6e fe ff       	call   c0000780 <strcmp>
c0019958:	83 c4 10             	add    esp,0x10
c001995b:	85 c0                	test   eax,eax
c001995d:	0f 94 c0             	sete   al
c0019960:	0f b6 c0             	movzx  eax,al
c0019963:	85 c0                	test   eax,eax
c0019965:	74 0c                	je     c0019973 <HalDetectFeatures()+0x8e3>
c0019967:	c7 05 68 fb 02 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc002fb68,0xd
c0019971:	eb 0a                	jmp    c001997d <HalDetectFeatures()+0x8ed>
c0019973:	c7 05 68 fb 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fb68,0x0
c001997d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019981:	83 f8 06             	cmp    eax,0x6
c0019984:	0f 86 cc 00 00 00    	jbe    c0019a56 <HalDetectFeatures()+0x9c6>
c001998a:	83 ec 0c             	sub    esp,0xc
c001998d:	68 80 00 00 00       	push   0x80
c0019992:	e8 9d f6 ff ff       	call   c0019034 <cpuidCheckExtendedEBX(unsigned int)>
c0019997:	83 c4 10             	add    esp,0x10
c001999a:	89 c1                	mov    ecx,eax
c001999c:	83 e1 01             	and    ecx,0x1
c001999f:	a0 73 fb 02 c0       	mov    al,ds:0xc002fb73
c00199a4:	83 e0 fe             	and    eax,0xfffffffe
c00199a7:	88 c2                	mov    dl,al
c00199a9:	88 c8                	mov    al,cl
c00199ab:	09 d0                	or     eax,edx
c00199ad:	a2 73 fb 02 c0       	mov    ds:0xc002fb73,al
c00199b2:	83 ec 0c             	sub    esp,0xc
c00199b5:	68 00 00 10 00       	push   0x100000
c00199ba:	e8 75 f6 ff ff       	call   c0019034 <cpuidCheckExtendedEBX(unsigned int)>
c00199bf:	83 c4 10             	add    esp,0x10
c00199c2:	83 e0 01             	and    eax,0x1
c00199c5:	89 c1                	mov    ecx,eax
c00199c7:	c1 e1 06             	shl    ecx,0x6
c00199ca:	a0 73 fb 02 c0       	mov    al,ds:0xc002fb73
c00199cf:	83 e0 bf             	and    eax,0xffffffbf
c00199d2:	88 c2                	mov    dl,al
c00199d4:	88 c8                	mov    al,cl
c00199d6:	09 d0                	or     eax,edx
c00199d8:	a2 73 fb 02 c0       	mov    ds:0xc002fb73,al
c00199dd:	83 ec 0c             	sub    esp,0xc
c00199e0:	68 00 00 04 00       	push   0x40000
c00199e5:	e8 4a f6 ff ff       	call   c0019034 <cpuidCheckExtendedEBX(unsigned int)>
c00199ea:	83 c4 10             	add    esp,0x10
c00199ed:	83 e0 01             	and    eax,0x1
c00199f0:	8d 0c 00             	lea    ecx,[eax+eax*1]
c00199f3:	a0 73 fb 02 c0       	mov    al,ds:0xc002fb73
c00199f8:	83 e0 fd             	and    eax,0xfffffffd
c00199fb:	88 c2                	mov    dl,al
c00199fd:	88 c8                	mov    al,cl
c00199ff:	09 d0                	or     eax,edx
c0019a01:	a2 73 fb 02 c0       	mov    ds:0xc002fb73,al
c0019a06:	83 ec 0c             	sub    esp,0xc
c0019a09:	6a 04                	push   0x4
c0019a0b:	e8 52 f6 ff ff       	call   c0019062 <cpuidCheckExtendedECX(unsigned int)>
c0019a10:	83 c4 10             	add    esp,0x10
c0019a13:	83 e0 01             	and    eax,0x1
c0019a16:	89 c1                	mov    ecx,eax
c0019a18:	c1 e1 05             	shl    ecx,0x5
c0019a1b:	a0 73 fb 02 c0       	mov    al,ds:0xc002fb73
c0019a20:	83 e0 df             	and    eax,0xffffffdf
c0019a23:	88 c2                	mov    dl,al
c0019a25:	88 c8                	mov    al,cl
c0019a27:	09 d0                	or     eax,edx
c0019a29:	a2 73 fb 02 c0       	mov    ds:0xc002fb73,al
c0019a2e:	83 ec 0c             	sub    esp,0xc
c0019a31:	6a 20                	push   0x20
c0019a33:	e8 2a f6 ff ff       	call   c0019062 <cpuidCheckExtendedECX(unsigned int)>
c0019a38:	83 c4 10             	add    esp,0x10
c0019a3b:	83 e0 01             	and    eax,0x1
c0019a3e:	89 c1                	mov    ecx,eax
c0019a40:	c1 e1 04             	shl    ecx,0x4
c0019a43:	a0 74 fb 02 c0       	mov    al,ds:0xc002fb74
c0019a48:	83 e0 ef             	and    eax,0xffffffef
c0019a4b:	88 c2                	mov    dl,al
c0019a4d:	88 c8                	mov    al,cl
c0019a4f:	09 d0                	or     eax,edx
c0019a51:	a2 74 fb 02 c0       	mov    ds:0xc002fb74,al
c0019a56:	83 ec 0c             	sub    esp,0xc
c0019a59:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019a5d:	50                   	push   eax
c0019a5e:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0019a62:	50                   	push   eax
c0019a63:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019a67:	50                   	push   eax
c0019a68:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0019a6c:	50                   	push   eax
c0019a6d:	6a 01                	push   0x1
c0019a6f:	e8 c7 f4 ff ff       	call   c0018f3b <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019a74:	83 c4 20             	add    esp,0x20
c0019a77:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019a7b:	83 e0 0f             	and    eax,0xf
c0019a7e:	a2 64 fb 02 c0       	mov    ds:0xc002fb64,al
c0019a83:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019a87:	c1 e8 04             	shr    eax,0x4
c0019a8a:	83 e0 0f             	and    eax,0xf
c0019a8d:	a2 62 fb 02 c0       	mov    ds:0xc002fb62,al
c0019a92:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019a96:	c1 e8 08             	shr    eax,0x8
c0019a99:	83 e0 0f             	and    eax,0xf
c0019a9c:	a2 61 fb 02 c0       	mov    ds:0xc002fb61,al
c0019aa1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019aa5:	c1 e8 0c             	shr    eax,0xc
c0019aa8:	83 e0 03             	and    eax,0x3
c0019aab:	a2 63 fb 02 c0       	mov    ds:0xc002fb63,al
c0019ab0:	a0 61 fb 02 c0       	mov    al,ds:0xc002fb61
c0019ab5:	0f b6 c0             	movzx  eax,al
c0019ab8:	83 f8 06             	cmp    eax,0x6
c0019abb:	74 0d                	je     c0019aca <HalDetectFeatures()+0xa3a>
c0019abd:	a0 61 fb 02 c0       	mov    al,ds:0xc002fb61
c0019ac2:	0f b6 c0             	movzx  eax,al
c0019ac5:	83 f8 0f             	cmp    eax,0xf
c0019ac8:	75 18                	jne    c0019ae2 <HalDetectFeatures()+0xa52>
c0019aca:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019ace:	c1 e8 10             	shr    eax,0x10
c0019ad1:	c1 e0 04             	shl    eax,0x4
c0019ad4:	88 c2                	mov    dl,al
c0019ad6:	a0 62 fb 02 c0       	mov    al,ds:0xc002fb62
c0019adb:	09 d0                	or     eax,edx
c0019add:	a2 62 fb 02 c0       	mov    ds:0xc002fb62,al
c0019ae2:	a0 61 fb 02 c0       	mov    al,ds:0xc002fb61
c0019ae7:	0f b6 c0             	movzx  eax,al
c0019aea:	83 f8 0f             	cmp    eax,0xf
c0019aed:	75 15                	jne    c0019b04 <HalDetectFeatures()+0xa74>
c0019aef:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019af3:	c1 e8 14             	shr    eax,0x14
c0019af6:	88 c2                	mov    dl,al
c0019af8:	a0 61 fb 02 c0       	mov    al,ds:0xc002fb61
c0019afd:	01 d0                	add    eax,edx
c0019aff:	a2 61 fb 02 c0       	mov    ds:0xc002fb61,al
c0019b04:	c6 84 24 8e 00 00 00 00 	mov    BYTE PTR [esp+0x8e],0x0
c0019b0c:	0f b6 84 24 8e 00 00 00 	movzx  eax,BYTE PTR [esp+0x8e]
c0019b14:	85 c0                	test   eax,eax
c0019b16:	74 2d                	je     c0019b45 <HalDetectFeatures()+0xab5>
c0019b18:	83 ec 0c             	sub    esp,0xc
c0019b1b:	68 00 00 00 40       	push   0x40000000
c0019b20:	e8 e1 f4 ff ff       	call   c0019006 <cpuidCheckECX(unsigned int)>
c0019b25:	83 c4 10             	add    esp,0x10
c0019b28:	83 e0 01             	and    eax,0x1
c0019b2b:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
c0019b32:	a0 72 fb 02 c0       	mov    al,ds:0xc002fb72
c0019b37:	83 e0 fb             	and    eax,0xfffffffb
c0019b3a:	88 c2                	mov    dl,al
c0019b3c:	88 c8                	mov    al,cl
c0019b3e:	09 d0                	or     eax,edx
c0019b40:	a2 72 fb 02 c0       	mov    ds:0xc002fb72,al
c0019b45:	a0 73 fb 02 c0       	mov    al,ds:0xc002fb73
c0019b4a:	83 c8 04             	or     eax,0x4
c0019b4d:	a2 73 fb 02 c0       	mov    ds:0xc002fb73,al
c0019b52:	a0 73 fb 02 c0       	mov    al,ds:0xc002fb73
c0019b57:	83 c8 08             	or     eax,0x8
c0019b5a:	a2 73 fb 02 c0       	mov    ds:0xc002fb73,al
c0019b5f:	a0 73 fb 02 c0       	mov    al,ds:0xc002fb73
c0019b64:	83 c8 10             	or     eax,0x10
c0019b67:	a2 73 fb 02 c0       	mov    ds:0xc002fb73,al
c0019b6c:	83 ec 0c             	sub    esp,0xc
c0019b6f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019b73:	50                   	push   eax
c0019b74:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0019b78:	50                   	push   eax
c0019b79:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019b7d:	50                   	push   eax
c0019b7e:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0019b82:	50                   	push   eax
c0019b83:	68 00 00 00 80       	push   0x80000000
c0019b88:	e8 ae f3 ff ff       	call   c0018f3b <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019b8d:	83 c4 20             	add    esp,0x20
c0019b90:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019b94:	3d 00 00 00 80       	cmp    eax,0x80000000
c0019b99:	0f 86 96 01 00 00    	jbe    c0019d35 <HalDetectFeatures()+0xca5>
c0019b9f:	83 ec 0c             	sub    esp,0xc
c0019ba2:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019ba6:	50                   	push   eax
c0019ba7:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0019bab:	50                   	push   eax
c0019bac:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019bb0:	50                   	push   eax
c0019bb1:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0019bb5:	50                   	push   eax
c0019bb6:	68 01 00 00 80       	push   0x80000001
c0019bbb:	e8 7b f3 ff ff       	call   c0018f3b <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019bc0:	83 c4 20             	add    esp,0x20
c0019bc3:	a0 73 fb 02 c0       	mov    al,ds:0xc002fb73
c0019bc8:	83 e0 7f             	and    eax,0x7f
c0019bcb:	a2 73 fb 02 c0       	mov    ds:0xc002fb73,al
c0019bd0:	a0 74 fb 02 c0       	mov    al,ds:0xc002fb74
c0019bd5:	83 e0 fb             	and    eax,0xfffffffb
c0019bd8:	a2 74 fb 02 c0       	mov    ds:0xc002fb74,al
c0019bdd:	a0 74 fb 02 c0       	mov    al,ds:0xc002fb74
c0019be2:	83 e0 fd             	and    eax,0xfffffffd
c0019be5:	a2 74 fb 02 c0       	mov    ds:0xc002fb74,al
c0019bea:	e9 46 01 00 00       	jmp    c0019d35 <HalDetectFeatures()+0xca5>
c0019bef:	83 ec 08             	sub    esp,0x8
c0019bf2:	68 ff 59 02 c0       	push   0xc00259ff
c0019bf7:	68 54 fb 02 c0       	push   0xc002fb54
c0019bfc:	e8 4f 6a fe ff       	call   c0000650 <strcpy>
c0019c01:	83 c4 10             	add    esp,0x10
c0019c04:	c7 05 68 fb 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002fb68,0x1
c0019c0e:	e8 b0 65 fe ff       	call   c00001c3 <is486>
c0019c13:	85 c0                	test   eax,eax
c0019c15:	0f 95 c0             	setne  al
c0019c18:	0f b6 c0             	movzx  eax,al
c0019c1b:	85 c0                	test   eax,eax
c0019c1d:	0f 84 8d 00 00 00    	je     c0019cb0 <HalDetectFeatures()+0xc20>
c0019c23:	a0 73 fb 02 c0       	mov    al,ds:0xc002fb73
c0019c28:	83 c8 04             	or     eax,0x4
c0019c2b:	a2 73 fb 02 c0       	mov    ds:0xc002fb73,al
c0019c30:	a0 73 fb 02 c0       	mov    al,ds:0xc002fb73
c0019c35:	83 c8 08             	or     eax,0x8
c0019c38:	a2 73 fb 02 c0       	mov    ds:0xc002fb73,al
c0019c3d:	a0 73 fb 02 c0       	mov    al,ds:0xc002fb73
c0019c42:	83 c8 10             	or     eax,0x10
c0019c45:	a2 73 fb 02 c0       	mov    ds:0xc002fb73,al
c0019c4a:	0f 20 c0             	mov    eax,cr0
c0019c4d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0019c51:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0019c55:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
c0019c5c:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0019c63:	83 e0 04             	and    eax,0x4
c0019c66:	74 1e                	je     c0019c86 <HalDetectFeatures()+0xbf6>
c0019c68:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0019c6f:	83 e0 10             	and    eax,0x10
c0019c72:	75 12                	jne    c0019c86 <HalDetectFeatures()+0xbf6>
c0019c74:	a0 74 fb 02 c0       	mov    al,ds:0xc002fb74
c0019c79:	83 e0 f7             	and    eax,0xfffffff7
c0019c7c:	a2 74 fb 02 c0       	mov    ds:0xc002fb74,al
c0019c81:	e9 af 00 00 00       	jmp    c0019d35 <HalDetectFeatures()+0xca5>
c0019c86:	e8 13 65 fe ff       	call   c000019e <hasLegacyFPU>
c0019c8b:	83 e0 01             	and    eax,0x1
c0019c8e:	83 e0 01             	and    eax,0x1
c0019c91:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0019c98:	a0 74 fb 02 c0       	mov    al,ds:0xc002fb74
c0019c9d:	83 e0 f7             	and    eax,0xfffffff7
c0019ca0:	88 c2                	mov    dl,al
c0019ca2:	88 c8                	mov    al,cl
c0019ca4:	09 d0                	or     eax,edx
c0019ca6:	a2 74 fb 02 c0       	mov    ds:0xc002fb74,al
c0019cab:	e9 85 00 00 00       	jmp    c0019d35 <HalDetectFeatures()+0xca5>
c0019cb0:	a0 73 fb 02 c0       	mov    al,ds:0xc002fb73
c0019cb5:	83 e0 fb             	and    eax,0xfffffffb
c0019cb8:	a2 73 fb 02 c0       	mov    ds:0xc002fb73,al
c0019cbd:	a0 73 fb 02 c0       	mov    al,ds:0xc002fb73
c0019cc2:	83 e0 f7             	and    eax,0xfffffff7
c0019cc5:	a2 73 fb 02 c0       	mov    ds:0xc002fb73,al
c0019cca:	a0 73 fb 02 c0       	mov    al,ds:0xc002fb73
c0019ccf:	83 e0 ef             	and    eax,0xffffffef
c0019cd2:	a2 73 fb 02 c0       	mov    ds:0xc002fb73,al
c0019cd7:	0f 20 c0             	mov    eax,cr0
c0019cda:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0019cde:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019ce2:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c0019ce9:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0019cf0:	83 e0 04             	and    eax,0x4
c0019cf3:	74 1b                	je     c0019d10 <HalDetectFeatures()+0xc80>
c0019cf5:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0019cfc:	83 e0 10             	and    eax,0x10
c0019cff:	75 0f                	jne    c0019d10 <HalDetectFeatures()+0xc80>
c0019d01:	a0 74 fb 02 c0       	mov    al,ds:0xc002fb74
c0019d06:	83 e0 f7             	and    eax,0xfffffff7
c0019d09:	a2 74 fb 02 c0       	mov    ds:0xc002fb74,al
c0019d0e:	eb 25                	jmp    c0019d35 <HalDetectFeatures()+0xca5>
c0019d10:	e8 89 64 fe ff       	call   c000019e <hasLegacyFPU>
c0019d15:	83 e0 01             	and    eax,0x1
c0019d18:	83 e0 01             	and    eax,0x1
c0019d1b:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0019d22:	a0 74 fb 02 c0       	mov    al,ds:0xc002fb74
c0019d27:	83 e0 f7             	and    eax,0xfffffff7
c0019d2a:	88 c2                	mov    dl,al
c0019d2c:	88 c8                	mov    al,cl
c0019d2e:	09 d0                	or     eax,edx
c0019d30:	a2 74 fb 02 c0       	mov    ds:0xc002fb74,al
c0019d35:	a0 74 fb 02 c0       	mov    al,ds:0xc002fb74
c0019d3a:	83 e0 08             	and    eax,0x8
c0019d3d:	0f b6 c0             	movzx  eax,al
c0019d40:	85 c0                	test   eax,eax
c0019d42:	75 25                	jne    c0019d69 <HalDetectFeatures()+0xcd9>
c0019d44:	e8 55 64 fe ff       	call   c000019e <hasLegacyFPU>
c0019d49:	83 e0 01             	and    eax,0x1
c0019d4c:	83 e0 01             	and    eax,0x1
c0019d4f:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0019d56:	a0 74 fb 02 c0       	mov    al,ds:0xc002fb74
c0019d5b:	83 e0 f7             	and    eax,0xfffffff7
c0019d5e:	88 c2                	mov    dl,al
c0019d60:	88 c8                	mov    al,cl
c0019d62:	09 d0                	or     eax,edx
c0019d64:	a2 74 fb 02 c0       	mov    ds:0xc002fb74,al
c0019d69:	a0 74 fb 02 c0       	mov    al,ds:0xc002fb74
c0019d6e:	83 e0 08             	and    eax,0x8
c0019d71:	0f b6 c0             	movzx  eax,al
c0019d74:	85 c0                	test   eax,eax
c0019d76:	74 0d                	je     c0019d85 <HalDetectFeatures()+0xcf5>
c0019d78:	a0 70 fb 02 c0       	mov    al,ds:0xc002fb70
c0019d7d:	83 c8 10             	or     eax,0x10
c0019d80:	a2 70 fb 02 c0       	mov    ds:0xc002fb70,al
c0019d85:	a0 70 fb 02 c0       	mov    al,ds:0xc002fb70
c0019d8a:	83 e0 10             	and    eax,0x10
c0019d8d:	0f b6 c0             	movzx  eax,al
c0019d90:	85 c0                	test   eax,eax
c0019d92:	75 23                	jne    c0019db7 <HalDetectFeatures()+0xd27>
c0019d94:	e8 2d 7b 00 00       	call   c00218c6 <x87Detect>
c0019d99:	83 e0 01             	and    eax,0x1
c0019d9c:	83 e0 01             	and    eax,0x1
c0019d9f:	89 c1                	mov    ecx,eax
c0019da1:	c1 e1 04             	shl    ecx,0x4
c0019da4:	a0 70 fb 02 c0       	mov    al,ds:0xc002fb70
c0019da9:	83 e0 ef             	and    eax,0xffffffef
c0019dac:	88 c2                	mov    dl,al
c0019dae:	88 c8                	mov    al,cl
c0019db0:	09 d0                	or     eax,edx
c0019db2:	a2 70 fb 02 c0       	mov    ds:0xc002fb70,al
c0019db7:	a0 71 fb 02 c0       	mov    al,ds:0xc002fb71
c0019dbc:	83 e0 01             	and    eax,0x1
c0019dbf:	0f b6 c0             	movzx  eax,al
c0019dc2:	85 c0                	test   eax,eax
c0019dc4:	75 2d                	jne    c0019df3 <HalDetectFeatures()+0xd63>
c0019dc6:	a0 71 fb 02 c0       	mov    al,ds:0xc002fb71
c0019dcb:	83 e0 02             	and    eax,0x2
c0019dce:	0f b6 c0             	movzx  eax,al
c0019dd1:	85 c0                	test   eax,eax
c0019dd3:	75 1e                	jne    c0019df3 <HalDetectFeatures()+0xd63>
c0019dd5:	a0 71 fb 02 c0       	mov    al,ds:0xc002fb71
c0019dda:	83 e0 04             	and    eax,0x4
c0019ddd:	0f b6 c0             	movzx  eax,al
c0019de0:	85 c0                	test   eax,eax
c0019de2:	75 0f                	jne    c0019df3 <HalDetectFeatures()+0xd63>
c0019de4:	a0 71 fb 02 c0       	mov    al,ds:0xc002fb71
c0019de9:	83 e0 08             	and    eax,0x8
c0019dec:	0f b6 c0             	movzx  eax,al
c0019def:	85 c0                	test   eax,eax
c0019df1:	74 0d                	je     c0019e00 <HalDetectFeatures()+0xd70>
c0019df3:	a0 70 fb 02 c0       	mov    al,ds:0xc002fb70
c0019df8:	83 c8 80             	or     eax,0xffffff80
c0019dfb:	a2 70 fb 02 c0       	mov    ds:0xc002fb70,al
c0019e00:	a0 70 fb 02 c0       	mov    al,ds:0xc002fb70
c0019e05:	83 e0 10             	and    eax,0x10
c0019e08:	0f b6 c0             	movzx  eax,al
c0019e0b:	85 c0                	test   eax,eax
c0019e0d:	74 2f                	je     c0019e3e <HalDetectFeatures()+0xdae>
c0019e0f:	a0 70 fb 02 c0       	mov    al,ds:0xc002fb70
c0019e14:	83 e0 80             	and    eax,0xffffff80
c0019e17:	0f b6 c0             	movzx  eax,al
c0019e1a:	85 c0                	test   eax,eax
c0019e1c:	75 20                	jne    c0019e3e <HalDetectFeatures()+0xdae>
c0019e1e:	e8 5d 7a 00 00       	call   c0021880 <sseDetect>
c0019e23:	83 e0 01             	and    eax,0x1
c0019e26:	89 c1                	mov    ecx,eax
c0019e28:	c1 e1 07             	shl    ecx,0x7
c0019e2b:	a0 70 fb 02 c0       	mov    al,ds:0xc002fb70
c0019e30:	83 e0 7f             	and    eax,0x7f
c0019e33:	88 c2                	mov    dl,al
c0019e35:	88 c8                	mov    al,cl
c0019e37:	09 d0                	or     eax,edx
c0019e39:	a2 70 fb 02 c0       	mov    ds:0xc002fb70,al
c0019e3e:	a0 70 fb 02 c0       	mov    al,ds:0xc002fb70
c0019e43:	83 e0 80             	and    eax,0xffffff80
c0019e46:	0f b6 c0             	movzx  eax,al
c0019e49:	85 c0                	test   eax,eax
c0019e4b:	74 1c                	je     c0019e69 <HalDetectFeatures()+0xdd9>
c0019e4d:	a0 71 fb 02 c0       	mov    al,ds:0xc002fb71
c0019e52:	83 e0 20             	and    eax,0x20
c0019e55:	0f b6 c0             	movzx  eax,al
c0019e58:	85 c0                	test   eax,eax
c0019e5a:	75 0d                	jne    c0019e69 <HalDetectFeatures()+0xdd9>
c0019e5c:	a0 71 fb 02 c0       	mov    al,ds:0xc002fb71
c0019e61:	83 e0 df             	and    eax,0xffffffdf
c0019e64:	a2 71 fb 02 c0       	mov    ds:0xc002fb71,al
c0019e69:	c6 05 6c fb 02 c0 00 	mov    BYTE PTR ds:0xc002fb6c,0x0
c0019e70:	90                   	nop
c0019e71:	81 c4 90 00 00 00    	add    esp,0x90
c0019e77:	5b                   	pop    ebx
c0019e78:	5e                   	pop    esi
c0019e79:	5f                   	pop    edi
c0019e7a:	c3                   	ret    

c0019e7b <HalEnableNMI()>:
c0019e7b:	c6 05 50 fb 02 c0 01 	mov    BYTE PTR ds:0xc002fb50,0x1
c0019e82:	6a 10                	push   0x10
c0019e84:	e8 00 ef ff ff       	call   c0018d89 <x86ReadCMOS(unsigned char)>
c0019e89:	83 c4 04             	add    esp,0x4
c0019e8c:	90                   	nop
c0019e8d:	c3                   	ret    

c0019e8e <HalDisableNMI()>:
c0019e8e:	c6 05 50 fb 02 c0 00 	mov    BYTE PTR ds:0xc002fb50,0x0
c0019e95:	6a 10                	push   0x10
c0019e97:	e8 ed ee ff ff       	call   c0018d89 <x86ReadCMOS(unsigned char)>
c0019e9c:	83 c4 04             	add    esp,0x4
c0019e9f:	90                   	nop
c0019ea0:	c3                   	ret    

c0019ea1 <HalGetNMIState()>:
c0019ea1:	a0 50 fb 02 c0       	mov    al,ds:0xc002fb50
c0019ea6:	c3                   	ret    

c0019ea7 <x86rdmsr(unsigned int)>:
c0019ea7:	83 ec 1c             	sub    esp,0x1c
c0019eaa:	a0 70 fb 02 c0       	mov    al,ds:0xc002fb70
c0019eaf:	83 e0 08             	and    eax,0x8
c0019eb2:	0f b6 c0             	movzx  eax,al
c0019eb5:	85 c0                	test   eax,eax
c0019eb7:	75 10                	jne    c0019ec9 <x86rdmsr(unsigned int)+0x22>
c0019eb9:	83 ec 0c             	sub    esp,0xc
c0019ebc:	68 9a 5a 02 c0       	push   0xc0025a9a
c0019ec1:	e8 c4 5f ff ff       	call   c000fe8a <KePanic(char const*)>
c0019ec6:	83 c4 10             	add    esp,0x10
c0019ec9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019ecd:	89 c1                	mov    ecx,eax
c0019ecf:	0f 32                	rdmsr  
c0019ed1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019ed5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0019ed9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019edd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019ee1:	83 c4 1c             	add    esp,0x1c
c0019ee4:	c3                   	ret    

c0019ee5 <x86wrmsr(unsigned int, unsigned long long)>:
c0019ee5:	83 ec 1c             	sub    esp,0x1c
c0019ee8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0019eec:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019ef0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019ef4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019ef8:	a0 70 fb 02 c0       	mov    al,ds:0xc002fb70
c0019efd:	83 e0 08             	and    eax,0x8
c0019f00:	0f b6 c0             	movzx  eax,al
c0019f03:	85 c0                	test   eax,eax
c0019f05:	75 10                	jne    c0019f17 <x86wrmsr(unsigned int, unsigned long long)+0x32>
c0019f07:	83 ec 0c             	sub    esp,0xc
c0019f0a:	68 a0 5a 02 c0       	push   0xc0025aa0
c0019f0f:	e8 76 5f ff ff       	call   c000fe8a <KePanic(char const*)>
c0019f14:	83 c4 10             	add    esp,0x10
c0019f17:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0019f1b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019f1f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019f23:	0f 30                	wrmsr  
c0019f25:	90                   	nop
c0019f26:	83 c4 1c             	add    esp,0x1c
c0019f29:	c3                   	ret    

c0019f2a <HalHandleGeneralProtectionFault(void*, void*)>:
c0019f2a:	83 ec 0c             	sub    esp,0xc
c0019f2d:	83 ec 0c             	sub    esp,0xc
c0019f30:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019f34:	e8 d8 e1 ff ff       	call   c0018111 <Vm::faultHandler(regs*)>
c0019f39:	83 c4 10             	add    esp,0x10
c0019f3c:	83 c4 0c             	add    esp,0xc
c0019f3f:	c3                   	ret    

c0019f40 <HalFindRSDP()>:
c0019f40:	83 ec 1c             	sub    esp,0x1c
c0019f43:	a1 5c f1 02 c0       	mov    eax,ds:0xc002f15c
c0019f48:	3d ff 07 00 00       	cmp    eax,0x7ff
c0019f4d:	7e 17                	jle    c0019f66 <HalFindRSDP()+0x26>
c0019f4f:	83 ec 0c             	sub    esp,0xc
c0019f52:	68 00 04 00 00       	push   0x400
c0019f57:	e8 8c 32 ff ff       	call   c000d1e8 <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c0019f5c:	83 c4 10             	add    esp,0x10
c0019f5f:	0f b6 c0             	movzx  eax,al
c0019f62:	85 c0                	test   eax,eax
c0019f64:	74 04                	je     c0019f6a <HalFindRSDP()+0x2a>
c0019f66:	b0 01                	mov    al,0x1
c0019f68:	eb 02                	jmp    c0019f6c <HalFindRSDP()+0x2c>
c0019f6a:	b0 00                	mov    al,0x0
c0019f6c:	0f b6 c0             	movzx  eax,al
c0019f6f:	85 c0                	test   eax,eax
c0019f71:	74 1d                	je     c0019f90 <HalFindRSDP()+0x50>
c0019f73:	a0 70 fb 02 c0       	mov    al,ds:0xc002fb70
c0019f78:	83 e0 fb             	and    eax,0xfffffffb
c0019f7b:	a2 70 fb 02 c0       	mov    ds:0xc002fb70,al
c0019f80:	83 ec 0c             	sub    esp,0xc
c0019f83:	68 a6 5a 02 c0       	push   0xc0025aa6
c0019f88:	e8 d9 cf fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0019f8d:	83 c4 10             	add    esp,0x10
c0019f90:	a0 70 fb 02 c0       	mov    al,ds:0xc002fb70
c0019f95:	83 e0 04             	and    eax,0x4
c0019f98:	0f b6 c0             	movzx  eax,al
c0019f9b:	85 c0                	test   eax,eax
c0019f9d:	75 17                	jne    c0019fb6 <HalFindRSDP()+0x76>
c0019f9f:	83 ec 0c             	sub    esp,0xc
c0019fa2:	68 b5 5a 02 c0       	push   0xc0025ab5
c0019fa7:	e8 ba cf fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0019fac:	83 c4 10             	add    esp,0x10
c0019faf:	b8 00 00 00 00       	mov    eax,0x0
c0019fb4:	eb 63                	jmp    c001a019 <HalFindRSDP()+0xd9>
c0019fb6:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0019fbe:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0019fc6:	77 2f                	ja     c0019ff7 <HalFindRSDP()+0xb7>
c0019fc8:	83 ec 04             	sub    esp,0x4
c0019fcb:	6a 08                	push   0x8
c0019fcd:	68 bf 5a 02 c0       	push   0xc0025abf
c0019fd2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019fd6:	e8 a5 63 fe ff       	call   c0000380 <memcmp>
c0019fdb:	83 c4 10             	add    esp,0x10
c0019fde:	85 c0                	test   eax,eax
c0019fe0:	0f 94 c0             	sete   al
c0019fe3:	0f b6 c0             	movzx  eax,al
c0019fe6:	85 c0                	test   eax,eax
c0019fe8:	74 06                	je     c0019ff0 <HalFindRSDP()+0xb0>
c0019fea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019fee:	eb 29                	jmp    c001a019 <HalFindRSDP()+0xd9>
c0019ff0:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0019ff5:	eb c7                	jmp    c0019fbe <HalFindRSDP()+0x7e>
c0019ff7:	83 ec 0c             	sub    esp,0xc
c0019ffa:	68 c8 5a 02 c0       	push   0xc0025ac8
c0019fff:	e8 62 cf fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001a004:	83 c4 10             	add    esp,0x10
c001a007:	a0 70 fb 02 c0       	mov    al,ds:0xc002fb70
c001a00c:	83 e0 fb             	and    eax,0xfffffffb
c001a00f:	a2 70 fb 02 c0       	mov    ds:0xc002fb70,al
c001a014:	b8 00 00 00 00       	mov    eax,0x0
c001a019:	83 c4 1c             	add    esp,0x1c
c001a01c:	c3                   	ret    

c001a01d <HalHandlePageFault(void*, void*)>:
c001a01d:	83 ec 1c             	sub    esp,0x1c
c001a020:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001a025:	8b 00                	mov    eax,DWORD PTR [eax]
c001a027:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a02a:	8b 80 b2 05 00 00    	mov    eax,DWORD PTR [eax+0x5b2]
c001a030:	0f 20 d2             	mov    edx,cr2
c001a033:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001a037:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a03b:	83 ec 08             	sub    esp,0x8
c001a03e:	52                   	push   edx
c001a03f:	50                   	push   eax
c001a040:	e8 cb a0 ff ff       	call   c0014110 <VAS::tryLoadBackOffDisk(unsigned long)>
c001a045:	83 c4 10             	add    esp,0x10
c001a048:	83 c4 1c             	add    esp,0x1c
c001a04b:	c3                   	ret    

c001a04c <HalHandleOpcodeFault(void*, void*)>:
c001a04c:	83 ec 1c             	sub    esp,0x1c
c001a04f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a053:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a057:	a0 6c fb 02 c0       	mov    al,ds:0xc002fb6c
c001a05c:	0f b6 c0             	movzx  eax,al
c001a05f:	85 c0                	test   eax,eax
c001a061:	74 25                	je     c001a088 <HalHandleOpcodeFault(void*, void*)+0x3c>
c001a063:	83 ec 0c             	sub    esp,0xc
c001a066:	68 c0 5c 02 c0       	push   0xc0025cc0
c001a06b:	e8 f6 ce fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001a070:	83 c4 10             	add    esp,0x10
c001a073:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a077:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001a07a:	8d 50 19             	lea    edx,[eax+0x19]
c001a07d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a081:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001a084:	b0 01                	mov    al,0x1
c001a086:	eb 02                	jmp    c001a08a <HalHandleOpcodeFault(void*, void*)+0x3e>
c001a088:	b0 00                	mov    al,0x0
c001a08a:	83 c4 1c             	add    esp,0x1c
c001a08d:	c3                   	ret    

c001a08e <HalDisplayDebugInfo(void*)>:
c001a08e:	83 ec 2c             	sub    esp,0x2c
c001a091:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a095:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a099:	0f 20 c0             	mov    eax,cr0
c001a09c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a0a0:	0f 20 d0             	mov    eax,cr2
c001a0a3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a0a7:	0f 20 d8             	mov    eax,cr3
c001a0aa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a0ae:	0f 20 e0             	mov    eax,cr4
c001a0b1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a0b5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a0b9:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c001a0bc:	83 ec 08             	sub    esp,0x8
c001a0bf:	50                   	push   eax
c001a0c0:	68 e2 5a 02 c0       	push   0xc0025ae2
c001a0c5:	e8 9c ce fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001a0ca:	83 c4 10             	add    esp,0x10
c001a0cd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a0d1:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c001a0d4:	83 ec 08             	sub    esp,0x8
c001a0d7:	50                   	push   eax
c001a0d8:	68 d3 5a 02 c0       	push   0xc0025ad3
c001a0dd:	e8 84 ce fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001a0e2:	83 c4 10             	add    esp,0x10
c001a0e5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a0e9:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c001a0ec:	83 ec 08             	sub    esp,0x8
c001a0ef:	50                   	push   eax
c001a0f0:	68 de 5a 02 c0       	push   0xc0025ade
c001a0f5:	e8 6c ce fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001a0fa:	83 c4 10             	add    esp,0x10
c001a0fd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a101:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001a104:	83 ec 08             	sub    esp,0x8
c001a107:	50                   	push   eax
c001a108:	68 ed 5a 02 c0       	push   0xc0025aed
c001a10d:	e8 54 ce fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001a112:	83 c4 10             	add    esp,0x10
c001a115:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a119:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c001a11c:	83 ec 08             	sub    esp,0x8
c001a11f:	50                   	push   eax
c001a120:	68 f8 5a 02 c0       	push   0xc0025af8
c001a125:	e8 3c ce fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001a12a:	83 c4 10             	add    esp,0x10
c001a12d:	83 ec 08             	sub    esp,0x8
c001a130:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a134:	68 03 5b 02 c0       	push   0xc0025b03
c001a139:	e8 28 ce fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001a13e:	83 c4 10             	add    esp,0x10
c001a141:	83 ec 08             	sub    esp,0x8
c001a144:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a148:	68 0e 5b 02 c0       	push   0xc0025b0e
c001a14d:	e8 14 ce fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001a152:	83 c4 10             	add    esp,0x10
c001a155:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a159:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c001a15c:	c1 e0 05             	shl    eax,0x5
c001a15f:	8d 90 a0 6f 02 c0    	lea    edx,[eax-0x3ffd9060]
c001a165:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a169:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c001a16c:	83 ec 04             	sub    esp,0x4
c001a16f:	52                   	push   edx
c001a170:	50                   	push   eax
c001a171:	68 19 5b 02 c0       	push   0xc0025b19
c001a176:	e8 eb cd fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001a17b:	83 c4 10             	add    esp,0x10
c001a17e:	a1 78 fa 02 c0       	mov    eax,ds:0xc002fa78
c001a183:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a189:	83 ec 0c             	sub    esp,0xc
c001a18c:	50                   	push   eax
c001a18d:	e8 57 82 ff ff       	call   c00123e9 <setActiveTerminal(VgaText*)>
c001a192:	83 c4 10             	add    esp,0x10
c001a195:	a1 78 fa 02 c0       	mov    eax,ds:0xc002fa78
c001a19a:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a1a0:	83 ec 08             	sub    esp,0x8
c001a1a3:	68 28 5b 02 c0       	push   0xc0025b28
c001a1a8:	50                   	push   eax
c001a1a9:	e8 78 85 ff ff       	call   c0012726 <VgaText::puts(char const*)>
c001a1ae:	83 c4 10             	add    esp,0x10
c001a1b1:	a1 78 fa 02 c0       	mov    eax,ds:0xc002fa78
c001a1b6:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a1bc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a1c0:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
c001a1c3:	83 ec 08             	sub    esp,0x8
c001a1c6:	52                   	push   edx
c001a1c7:	50                   	push   eax
c001a1c8:	e8 13 85 ff ff       	call   c00126e0 <VgaText::putx(unsigned int)>
c001a1cd:	83 c4 10             	add    esp,0x10
c001a1d0:	a1 78 fa 02 c0       	mov    eax,ds:0xc002fa78
c001a1d5:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a1db:	83 ec 08             	sub    esp,0x8
c001a1de:	68 36 5b 02 c0       	push   0xc0025b36
c001a1e3:	50                   	push   eax
c001a1e4:	e8 3d 85 ff ff       	call   c0012726 <VgaText::puts(char const*)>
c001a1e9:	83 c4 10             	add    esp,0x10
c001a1ec:	a1 78 fa 02 c0       	mov    eax,ds:0xc002fa78
c001a1f1:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a1f7:	ba 00 20 00 c2       	mov    edx,0xc2002000
c001a1fc:	8b 12                	mov    edx,DWORD PTR [edx]
c001a1fe:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001a201:	83 c2 0c             	add    edx,0xc
c001a204:	83 ec 08             	sub    esp,0x8
c001a207:	52                   	push   edx
c001a208:	50                   	push   eax
c001a209:	e8 18 85 ff ff       	call   c0012726 <VgaText::puts(char const*)>
c001a20e:	83 c4 10             	add    esp,0x10
c001a211:	a1 78 fa 02 c0       	mov    eax,ds:0xc002fa78
c001a216:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a21c:	83 ec 08             	sub    esp,0x8
c001a21f:	68 3f 5b 02 c0       	push   0xc0025b3f
c001a224:	50                   	push   eax
c001a225:	e8 fc 84 ff ff       	call   c0012726 <VgaText::puts(char const*)>
c001a22a:	83 c4 10             	add    esp,0x10
c001a22d:	a1 78 fa 02 c0       	mov    eax,ds:0xc002fa78
c001a232:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a238:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a23c:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c001a23f:	83 ec 08             	sub    esp,0x8
c001a242:	52                   	push   edx
c001a243:	50                   	push   eax
c001a244:	e8 97 84 ff ff       	call   c00126e0 <VgaText::putx(unsigned int)>
c001a249:	83 c4 10             	add    esp,0x10
c001a24c:	a1 78 fa 02 c0       	mov    eax,ds:0xc002fa78
c001a251:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a257:	83 ec 08             	sub    esp,0x8
c001a25a:	68 47 5b 02 c0       	push   0xc0025b47
c001a25f:	50                   	push   eax
c001a260:	e8 c1 84 ff ff       	call   c0012726 <VgaText::puts(char const*)>
c001a265:	83 c4 10             	add    esp,0x10
c001a268:	a1 78 fa 02 c0       	mov    eax,ds:0xc002fa78
c001a26d:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a273:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a277:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c001a27a:	83 ec 08             	sub    esp,0x8
c001a27d:	52                   	push   edx
c001a27e:	50                   	push   eax
c001a27f:	e8 5c 84 ff ff       	call   c00126e0 <VgaText::putx(unsigned int)>
c001a284:	83 c4 10             	add    esp,0x10
c001a287:	a1 78 fa 02 c0       	mov    eax,ds:0xc002fa78
c001a28c:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a292:	83 ec 08             	sub    esp,0x8
c001a295:	68 4f 5b 02 c0       	push   0xc0025b4f
c001a29a:	50                   	push   eax
c001a29b:	e8 86 84 ff ff       	call   c0012726 <VgaText::puts(char const*)>
c001a2a0:	83 c4 10             	add    esp,0x10
c001a2a3:	a1 78 fa 02 c0       	mov    eax,ds:0xc002fa78
c001a2a8:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a2ae:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a2b2:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c001a2b5:	83 ec 08             	sub    esp,0x8
c001a2b8:	52                   	push   edx
c001a2b9:	50                   	push   eax
c001a2ba:	e8 21 84 ff ff       	call   c00126e0 <VgaText::putx(unsigned int)>
c001a2bf:	83 c4 10             	add    esp,0x10
c001a2c2:	a1 78 fa 02 c0       	mov    eax,ds:0xc002fa78
c001a2c7:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a2cd:	83 ec 08             	sub    esp,0x8
c001a2d0:	68 57 5b 02 c0       	push   0xc0025b57
c001a2d5:	50                   	push   eax
c001a2d6:	e8 4b 84 ff ff       	call   c0012726 <VgaText::puts(char const*)>
c001a2db:	83 c4 10             	add    esp,0x10
c001a2de:	a1 78 fa 02 c0       	mov    eax,ds:0xc002fa78
c001a2e3:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a2e9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a2ed:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c001a2f0:	83 ec 08             	sub    esp,0x8
c001a2f3:	52                   	push   edx
c001a2f4:	50                   	push   eax
c001a2f5:	e8 e6 83 ff ff       	call   c00126e0 <VgaText::putx(unsigned int)>
c001a2fa:	83 c4 10             	add    esp,0x10
c001a2fd:	a1 78 fa 02 c0       	mov    eax,ds:0xc002fa78
c001a302:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a308:	83 ec 08             	sub    esp,0x8
c001a30b:	68 5f 5b 02 c0       	push   0xc0025b5f
c001a310:	50                   	push   eax
c001a311:	e8 10 84 ff ff       	call   c0012726 <VgaText::puts(char const*)>
c001a316:	83 c4 10             	add    esp,0x10
c001a319:	a1 78 fa 02 c0       	mov    eax,ds:0xc002fa78
c001a31e:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a324:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a328:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c001a32b:	83 ec 08             	sub    esp,0x8
c001a32e:	52                   	push   edx
c001a32f:	50                   	push   eax
c001a330:	e8 ab 83 ff ff       	call   c00126e0 <VgaText::putx(unsigned int)>
c001a335:	83 c4 10             	add    esp,0x10
c001a338:	a1 78 fa 02 c0       	mov    eax,ds:0xc002fa78
c001a33d:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a343:	83 ec 08             	sub    esp,0x8
c001a346:	68 67 5b 02 c0       	push   0xc0025b67
c001a34b:	50                   	push   eax
c001a34c:	e8 d5 83 ff ff       	call   c0012726 <VgaText::puts(char const*)>
c001a351:	83 c4 10             	add    esp,0x10
c001a354:	a1 78 fa 02 c0       	mov    eax,ds:0xc002fa78
c001a359:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a35f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a363:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001a366:	83 ec 08             	sub    esp,0x8
c001a369:	52                   	push   edx
c001a36a:	50                   	push   eax
c001a36b:	e8 70 83 ff ff       	call   c00126e0 <VgaText::putx(unsigned int)>
c001a370:	83 c4 10             	add    esp,0x10
c001a373:	a1 78 fa 02 c0       	mov    eax,ds:0xc002fa78
c001a378:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a37e:	83 ec 08             	sub    esp,0x8
c001a381:	68 6f 5b 02 c0       	push   0xc0025b6f
c001a386:	50                   	push   eax
c001a387:	e8 9a 83 ff ff       	call   c0012726 <VgaText::puts(char const*)>
c001a38c:	83 c4 10             	add    esp,0x10
c001a38f:	a1 78 fa 02 c0       	mov    eax,ds:0xc002fa78
c001a394:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a39a:	83 ec 08             	sub    esp,0x8
c001a39d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001a3a1:	50                   	push   eax
c001a3a2:	e8 39 83 ff ff       	call   c00126e0 <VgaText::putx(unsigned int)>
c001a3a7:	83 c4 10             	add    esp,0x10
c001a3aa:	a1 78 fa 02 c0       	mov    eax,ds:0xc002fa78
c001a3af:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a3b5:	83 ec 08             	sub    esp,0x8
c001a3b8:	68 78 5b 02 c0       	push   0xc0025b78
c001a3bd:	50                   	push   eax
c001a3be:	e8 63 83 ff ff       	call   c0012726 <VgaText::puts(char const*)>
c001a3c3:	83 c4 10             	add    esp,0x10
c001a3c6:	a1 78 fa 02 c0       	mov    eax,ds:0xc002fa78
c001a3cb:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a3d1:	83 ec 08             	sub    esp,0x8
c001a3d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a3d8:	50                   	push   eax
c001a3d9:	e8 02 83 ff ff       	call   c00126e0 <VgaText::putx(unsigned int)>
c001a3de:	83 c4 10             	add    esp,0x10
c001a3e1:	a1 78 fa 02 c0       	mov    eax,ds:0xc002fa78
c001a3e6:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a3ec:	83 ec 08             	sub    esp,0x8
c001a3ef:	68 80 5b 02 c0       	push   0xc0025b80
c001a3f4:	50                   	push   eax
c001a3f5:	e8 2c 83 ff ff       	call   c0012726 <VgaText::puts(char const*)>
c001a3fa:	83 c4 10             	add    esp,0x10
c001a3fd:	a1 78 fa 02 c0       	mov    eax,ds:0xc002fa78
c001a402:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a408:	83 ec 08             	sub    esp,0x8
c001a40b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a40f:	50                   	push   eax
c001a410:	e8 cb 82 ff ff       	call   c00126e0 <VgaText::putx(unsigned int)>
c001a415:	83 c4 10             	add    esp,0x10
c001a418:	fa                   	cli    
c001a419:	f4                   	hlt    
c001a41a:	eb fe                	jmp    c001a41a <HalDisplayDebugInfo(void*)+0x38c>

c001a41c <HalReceivedNMI()>:
c001a41c:	83 ec 1c             	sub    esp,0x1c
c001a41f:	66 c7 44 24 08 92 00 	mov    WORD PTR [esp+0x8],0x92
c001a426:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a42a:	89 c2                	mov    edx,eax
c001a42c:	ec                   	in     al,dx
c001a42d:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c001a431:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c001a435:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001a439:	66 c7 44 24 0c 61 00 	mov    WORD PTR [esp+0xc],0x61
c001a440:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a444:	89 c2                	mov    edx,eax
c001a446:	ec                   	in     al,dx
c001a447:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001a44b:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c001a44f:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001a453:	83 ec 0c             	sub    esp,0xc
c001a456:	68 88 5b 02 c0       	push   0xc0025b88
c001a45b:	e8 06 cb fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001a460:	83 c4 10             	add    esp,0x10
c001a463:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001a468:	83 e0 10             	and    eax,0x10
c001a46b:	74 10                	je     c001a47d <HalReceivedNMI()+0x61>
c001a46d:	83 ec 0c             	sub    esp,0xc
c001a470:	68 99 5b 02 c0       	push   0xc0025b99
c001a475:	e8 10 5a ff ff       	call   c000fe8a <KePanic(char const*)>
c001a47a:	83 c4 10             	add    esp,0x10
c001a47d:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c001a482:	83 e0 40             	and    eax,0x40
c001a485:	74 10                	je     c001a497 <HalReceivedNMI()+0x7b>
c001a487:	83 ec 0c             	sub    esp,0xc
c001a48a:	68 a6 5b 02 c0       	push   0xc0025ba6
c001a48f:	e8 f6 59 ff ff       	call   c000fe8a <KePanic(char const*)>
c001a494:	83 c4 10             	add    esp,0x10
c001a497:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c001a49b:	0f be c0             	movsx  eax,al
c001a49e:	85 c0                	test   eax,eax
c001a4a0:	79 10                	jns    c001a4b2 <HalReceivedNMI()+0x96>
c001a4a2:	83 ec 0c             	sub    esp,0xc
c001a4a5:	68 b0 5b 02 c0       	push   0xc0025bb0
c001a4aa:	e8 db 59 ff ff       	call   c000fe8a <KePanic(char const*)>
c001a4af:	83 c4 10             	add    esp,0x10
c001a4b2:	90                   	nop
c001a4b3:	83 c4 1c             	add    esp,0x1c
c001a4b6:	c3                   	ret    

c001a4b7 <HalSystemIdle()>:
c001a4b7:	56                   	push   esi
c001a4b8:	53                   	push   ebx
c001a4b9:	83 ec 14             	sub    esp,0x14
c001a4bc:	a0 74 fb 02 c0       	mov    al,ds:0xc002fb74
c001a4c1:	83 e0 10             	and    eax,0x10
c001a4c4:	0f b6 c0             	movzx  eax,al
c001a4c7:	85 c0                	test   eax,eax
c001a4c9:	74 43                	je     c001a50e <HalSystemIdle()+0x57>
c001a4cb:	83 ec 0c             	sub    esp,0xc
c001a4ce:	68 e1 00 00 00       	push   0xe1
c001a4d3:	e8 cf f9 ff ff       	call   c0019ea7 <x86rdmsr(unsigned int)>
c001a4d8:	83 c4 10             	add    esp,0x10
c001a4db:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a4df:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001a4e3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a4e7:	83 e0 02             	and    eax,0x2
c001a4ea:	89 c3                	mov    ebx,eax
c001a4ec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a4f0:	83 e0 00             	and    eax,0x0
c001a4f3:	89 c6                	mov    esi,eax
c001a4f5:	83 ec 04             	sub    esp,0x4
c001a4f8:	56                   	push   esi
c001a4f9:	53                   	push   ebx
c001a4fa:	68 e1 00 00 00       	push   0xe1
c001a4ff:	e8 e1 f9 ff ff       	call   c0019ee5 <x86wrmsr(unsigned int, unsigned long long)>
c001a504:	83 c4 10             	add    esp,0x10
c001a507:	e8 88 5c fe ff       	call   c0000194 <doTPAUSE>
c001a50c:	eb 01                	jmp    c001a50f <HalSystemIdle()+0x58>
c001a50e:	f4                   	hlt    
c001a50f:	90                   	nop
c001a510:	83 c4 14             	add    esp,0x14
c001a513:	5b                   	pop    ebx
c001a514:	5e                   	pop    esi
c001a515:	c3                   	ret    

c001a516 <i386SaveCoprocessor(void*)>:
c001a516:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a51a:	83 c0 3f             	add    eax,0x3f
c001a51d:	83 e0 c0             	and    eax,0xffffffc0
c001a520:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a524:	ff 25 34 fb 02 c0    	jmp    DWORD PTR ds:0xc002fb34

c001a52a <i386LoadCoprocessor(void*)>:
c001a52a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a52e:	83 c0 3f             	add    eax,0x3f
c001a531:	83 e0 c0             	and    eax,0xffffffc0
c001a534:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a538:	ff 25 30 fb 02 c0    	jmp    DWORD PTR ds:0xc002fb30

c001a53e <x87EmulHandler(regs*, void*)>:
c001a53e:	53                   	push   ebx
c001a53f:	83 ec 08             	sub    esp,0x8
c001a542:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a547:	80 78 62 00          	cmp    BYTE PTR [eax+0x62],0x0
c001a54b:	74 10                	je     c001a55d <x87EmulHandler(regs*, void*)+0x1f>
c001a54d:	83 ec 0c             	sub    esp,0xc
c001a550:	68 bd 5b 02 c0       	push   0xc0025bbd
c001a555:	e8 30 59 ff ff       	call   c000fe8a <KePanic(char const*)>
c001a55a:	83 c4 10             	add    esp,0x10
c001a55d:	0f 20 c0             	mov    eax,cr0
c001a560:	a8 08                	test   al,0x8
c001a562:	74 59                	je     c001a5bd <x87EmulHandler(regs*, void*)+0x7f>
c001a564:	0f 06                	clts   
c001a566:	a1 2c fb 02 c0       	mov    eax,ds:0xc002fb2c
c001a56b:	85 c0                	test   eax,eax
c001a56d:	74 0e                	je     c001a57d <x87EmulHandler(regs*, void*)+0x3f>
c001a56f:	83 ec 0c             	sub    esp,0xc
c001a572:	ff 70 59             	push   DWORD PTR [eax+0x59]
c001a575:	e8 9c ff ff ff       	call   c001a516 <i386SaveCoprocessor(void*)>
c001a57a:	83 c4 10             	add    esp,0x10
c001a57d:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c001a583:	83 7b 59 00          	cmp    DWORD PTR [ebx+0x59],0x0
c001a587:	75 12                	jne    c001a59b <x87EmulHandler(regs*, void*)+0x5d>
c001a589:	83 ec 0c             	sub    esp,0xc
c001a58c:	68 40 02 00 00       	push   0x240
c001a591:	e8 e6 55 ff ff       	call   c000fb7c <malloc>
c001a596:	89 43 59             	mov    DWORD PTR [ebx+0x59],eax
c001a599:	eb 10                	jmp    c001a5ab <x87EmulHandler(regs*, void*)+0x6d>
c001a59b:	a1 2c fb 02 c0       	mov    eax,ds:0xc002fb2c
c001a5a0:	83 ec 0c             	sub    esp,0xc
c001a5a3:	ff 70 59             	push   DWORD PTR [eax+0x59]
c001a5a6:	e8 7f ff ff ff       	call   c001a52a <i386LoadCoprocessor(void*)>
c001a5ab:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a5b0:	83 c4 10             	add    esp,0x10
c001a5b3:	a3 2c fb 02 c0       	mov    ds:0xc002fb2c,eax
c001a5b8:	83 c4 08             	add    esp,0x8
c001a5bb:	5b                   	pop    ebx
c001a5bc:	c3                   	ret    
c001a5bd:	83 ec 0c             	sub    esp,0xc
c001a5c0:	68 d1 5b 02 c0       	push   0xc0025bd1
c001a5c5:	e8 9c c9 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001a5ca:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001a5d2:	83 c4 18             	add    esp,0x18
c001a5d5:	5b                   	pop    ebx
c001a5d6:	e9 f5 d3 ff ff       	jmp    c00179d0 <Thr::terminateFromIRQ(int)>

c001a5db <HalInitialiseCoprocessor()>:
c001a5db:	83 ec 10             	sub    esp,0x10
c001a5de:	6a 00                	push   0x0
c001a5e0:	68 3e a5 01 c0       	push   0xc001a53e
c001a5e5:	6a 07                	push   0x7
c001a5e7:	c7 05 2c fb 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fb2c,0x0
c001a5f1:	e8 c5 06 00 00       	call   c001acbb <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a5f6:	a0 70 fb 02 c0       	mov    al,ds:0xc002fb70
c001a5fb:	83 c4 10             	add    esp,0x10
c001a5fe:	a8 80                	test   al,0x80
c001a600:	74 1c                	je     c001a61e <HalInitialiseCoprocessor()+0x43>
c001a602:	c7 05 34 fb 02 c0 98 18 02 c0 	mov    DWORD PTR ds:0xc002fb34,0xc0021898
c001a60c:	c7 05 30 fb 02 c0 a0 18 02 c0 	mov    DWORD PTR ds:0xc002fb30,0xc00218a0
c001a616:	83 c4 0c             	add    esp,0xc
c001a619:	e9 8a 72 00 00       	jmp    c00218a8 <sseInit>
c001a61e:	a8 10                	test   al,0x10
c001a620:	74 1c                	je     c001a63e <HalInitialiseCoprocessor()+0x63>
c001a622:	c7 05 34 fb 02 c0 e7 18 02 c0 	mov    DWORD PTR ds:0xc002fb34,0xc00218e7
c001a62c:	c7 05 30 fb 02 c0 ee 18 02 c0 	mov    DWORD PTR ds:0xc002fb30,0xc00218ee
c001a636:	83 c4 0c             	add    esp,0xc
c001a639:	e9 b7 72 00 00       	jmp    c00218f5 <x87Init>
c001a63e:	c7 05 34 fb 02 c0 84 8d 01 c0 	mov    DWORD PTR ds:0xc002fb34,0xc0018d84
c001a648:	c7 05 30 fb 02 c0 84 8d 01 c0 	mov    DWORD PTR ds:0xc002fb30,0xc0018d84
c001a652:	0f 20 c0             	mov    eax,cr0
c001a655:	83 c8 04             	or     eax,0x4
c001a658:	0f 22 c0             	mov    cr0,eax
c001a65b:	83 c4 0c             	add    esp,0xc
c001a65e:	c3                   	ret    

c001a65f <HalPanic(char const*)>:
c001a65f:	53                   	push   ebx
c001a660:	83 ec 10             	sub    esp,0x10
c001a663:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a667:	fa                   	cli    
c001a668:	53                   	push   ebx
c001a669:	68 e7 5b 02 c0       	push   0xc0025be7
c001a66e:	e8 f3 c8 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001a673:	a1 28 fb 02 c0       	mov    eax,ds:0xc002fb28
c001a678:	83 c4 10             	add    esp,0x10
c001a67b:	85 c0                	test   eax,eax
c001a67d:	74 09                	je     c001a688 <HalPanic(char const*)+0x29>
c001a67f:	83 ec 0c             	sub    esp,0xc
c001a682:	53                   	push   ebx
c001a683:	ff d0                	call   eax
c001a685:	83 c4 10             	add    esp,0x10
c001a688:	a1 d4 f1 02 c0       	mov    eax,ds:0xc002f1d4
c001a68d:	85 c0                	test   eax,eax
c001a68f:	0f 84 dc 00 00 00    	je     c001a771 <HalPanic(char const*)+0x112>
c001a695:	52                   	push   edx
c001a696:	6a 01                	push   0x1
c001a698:	6a 0f                	push   0xf
c001a69a:	50                   	push   eax
c001a69b:	e8 88 7b ff ff       	call   c0012228 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001a6a0:	59                   	pop    ecx
c001a6a1:	ff 35 d4 f1 02 c0    	push   DWORD PTR ds:0xc002f1d4
c001a6a7:	e8 88 7d ff ff       	call   c0012434 <VgaText::clearScreen()>
c001a6ac:	58                   	pop    eax
c001a6ad:	5a                   	pop    edx
c001a6ae:	68 62 47 02 c0       	push   0xc0024762
c001a6b3:	ff 35 d4 f1 02 c0    	push   DWORD PTR ds:0xc002f1d4
c001a6b9:	e8 a2 7b ff ff       	call   c0012260 <VgaText::setTitle(char*)>
c001a6be:	83 c4 0c             	add    esp,0xc
c001a6c1:	6a 01                	push   0x1
c001a6c3:	6a 0f                	push   0xf
c001a6c5:	ff 35 d4 f1 02 c0    	push   DWORD PTR ds:0xc002f1d4
c001a6cb:	e8 58 7b ff ff       	call   c0012228 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001a6d0:	59                   	pop    ecx
c001a6d1:	58                   	pop    eax
c001a6d2:	68 00 5c 02 c0       	push   0xc0025c00
c001a6d7:	ff 35 d4 f1 02 c0    	push   DWORD PTR ds:0xc002f1d4
c001a6dd:	e8 44 80 ff ff       	call   c0012726 <VgaText::puts(char const*)>
c001a6e2:	83 c4 0c             	add    esp,0xc
c001a6e5:	6a 0f                	push   0xf
c001a6e7:	6a 01                	push   0x1
c001a6e9:	ff 35 d4 f1 02 c0    	push   DWORD PTR ds:0xc002f1d4
c001a6ef:	e8 34 7b ff ff       	call   c0012228 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001a6f4:	58                   	pop    eax
c001a6f5:	5a                   	pop    edx
c001a6f6:	68 09 5c 02 c0       	push   0xc0025c09
c001a6fb:	ff 35 d4 f1 02 c0    	push   DWORD PTR ds:0xc002f1d4
c001a701:	e8 20 80 ff ff       	call   c0012726 <VgaText::puts(char const*)>
c001a706:	83 c4 0c             	add    esp,0xc
c001a709:	6a 01                	push   0x1
c001a70b:	6a 0f                	push   0xf
c001a70d:	ff 35 d4 f1 02 c0    	push   DWORD PTR ds:0xc002f1d4
c001a713:	e8 10 7b ff ff       	call   c0012228 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001a718:	59                   	pop    ecx
c001a719:	58                   	pop    eax
c001a71a:	68 4d 5c 02 c0       	push   0xc0025c4d
c001a71f:	ff 35 d4 f1 02 c0    	push   DWORD PTR ds:0xc002f1d4
c001a725:	e8 fc 7f ff ff       	call   c0012726 <VgaText::puts(char const*)>
c001a72a:	58                   	pop    eax
c001a72b:	5a                   	pop    edx
c001a72c:	68 16 5c 02 c0       	push   0xc0025c16
c001a731:	ff 35 d4 f1 02 c0    	push   DWORD PTR ds:0xc002f1d4
c001a737:	e8 ea 7f ff ff       	call   c0012726 <VgaText::puts(char const*)>
c001a73c:	59                   	pop    ecx
c001a73d:	58                   	pop    eax
c001a73e:	68 50 5c 02 c0       	push   0xc0025c50
c001a743:	ff 35 d4 f1 02 c0    	push   DWORD PTR ds:0xc002f1d4
c001a749:	e8 d8 7f ff ff       	call   c0012726 <VgaText::puts(char const*)>
c001a74e:	58                   	pop    eax
c001a74f:	5a                   	pop    edx
c001a750:	53                   	push   ebx
c001a751:	ff 35 d4 f1 02 c0    	push   DWORD PTR ds:0xc002f1d4
c001a757:	e8 ca 7f ff ff       	call   c0012726 <VgaText::puts(char const*)>
c001a75c:	59                   	pop    ecx
c001a75d:	5b                   	pop    ebx
c001a75e:	68 4d 5c 02 c0       	push   0xc0025c4d
c001a763:	ff 35 d4 f1 02 c0    	push   DWORD PTR ds:0xc002f1d4
c001a769:	e8 b8 7f ff ff       	call   c0012726 <VgaText::puts(char const*)>
c001a76e:	83 c4 10             	add    esp,0x10
c001a771:	eb fe                	jmp    c001a771 <HalPanic(char const*)+0x112>

c001a773 <HalQueryPerformanceCounter()>:
c001a773:	31 c0                	xor    eax,eax
c001a775:	31 d2                	xor    edx,edx
c001a777:	f6 05 72 fb 02 c0 08 	test   BYTE PTR ds:0xc002fb72,0x8
c001a77e:	75 02                	jne    c001a782 <HalQueryPerformanceCounter()+0xf>
c001a780:	0f 31                	rdtsc  
c001a782:	c3                   	ret    

c001a783 <HalInitialise()>:
c001a783:	53                   	push   ebx
c001a784:	83 ec 08             	sub    esp,0x8
c001a787:	e8 04 e9 ff ff       	call   c0019090 <HalDetectFeatures()>
c001a78c:	e8 f3 1b ff ff       	call   c000c384 <scanMADT()>
c001a791:	80 3d 40 ce 02 c0 00 	cmp    BYTE PTR ds:0xc002ce40,0x0
c001a798:	75 0d                	jne    c001a7a7 <HalInitialise()+0x24>
c001a79a:	a0 70 fb 02 c0       	mov    al,ds:0xc002fb70
c001a79f:	83 e0 fe             	and    eax,0xfffffffe
c001a7a2:	a2 70 fb 02 c0       	mov    ds:0xc002fb70,al
c001a7a7:	a0 70 fb 02 c0       	mov    al,ds:0xc002fb70
c001a7ac:	83 e0 01             	and    eax,0x1
c001a7af:	a2 24 fb 02 c0       	mov    ds:0xc002fb24,al
c001a7b4:	e8 e7 07 00 00       	call   c001afa0 <picOpen()>
c001a7b9:	80 3d 24 fb 02 c0 00 	cmp    BYTE PTR ds:0xc002fb24,0x0
c001a7c0:	74 0a                	je     c001a7cc <HalInitialise()+0x49>
c001a7c2:	e8 29 07 00 00       	call   c001aef0 <picDisable()>
c001a7c7:	e8 c0 e1 ff ff       	call   c001898c <apicOpen()>
c001a7cc:	50                   	push   eax
c001a7cd:	bb 0f 00 00 00       	mov    ebx,0xf
c001a7d2:	6a 00                	push   0x0
c001a7d4:	68 28 ec 00 c0       	push   0xc000ec28
c001a7d9:	6a 00                	push   0x0
c001a7db:	e8 db 04 00 00       	call   c001acbb <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a7e0:	83 c4 0c             	add    esp,0xc
c001a7e3:	6a 00                	push   0x0
c001a7e5:	68 28 ec 00 c0       	push   0xc000ec28
c001a7ea:	6a 01                	push   0x1
c001a7ec:	e8 ca 04 00 00       	call   c001acbb <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a7f1:	83 c4 0c             	add    esp,0xc
c001a7f4:	6a 00                	push   0x0
c001a7f6:	68 18 ec 00 c0       	push   0xc000ec18
c001a7fb:	6a 02                	push   0x2
c001a7fd:	e8 b9 04 00 00       	call   c001acbb <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a802:	83 c4 0c             	add    esp,0xc
c001a805:	6a 00                	push   0x0
c001a807:	68 28 ec 00 c0       	push   0xc000ec28
c001a80c:	6a 03                	push   0x3
c001a80e:	e8 a8 04 00 00       	call   c001acbb <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a813:	83 c4 0c             	add    esp,0xc
c001a816:	6a 00                	push   0x0
c001a818:	68 28 ec 00 c0       	push   0xc000ec28
c001a81d:	6a 04                	push   0x4
c001a81f:	e8 97 04 00 00       	call   c001acbb <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a824:	83 c4 0c             	add    esp,0xc
c001a827:	6a 00                	push   0x0
c001a829:	68 28 ec 00 c0       	push   0xc000ec28
c001a82e:	6a 05                	push   0x5
c001a830:	e8 86 04 00 00       	call   c001acbb <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a835:	83 c4 0c             	add    esp,0xc
c001a838:	6a 00                	push   0x0
c001a83a:	68 5c ec 00 c0       	push   0xc000ec5c
c001a83f:	6a 06                	push   0x6
c001a841:	e8 75 04 00 00       	call   c001acbb <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a846:	83 c4 0c             	add    esp,0xc
c001a849:	6a 00                	push   0x0
c001a84b:	68 b0 ec 00 c0       	push   0xc000ecb0
c001a850:	6a 08                	push   0x8
c001a852:	e8 64 04 00 00       	call   c001acbb <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a857:	83 c4 0c             	add    esp,0xc
c001a85a:	6a 00                	push   0x0
c001a85c:	68 28 ec 00 c0       	push   0xc000ec28
c001a861:	6a 09                	push   0x9
c001a863:	e8 53 04 00 00       	call   c001acbb <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a868:	83 c4 0c             	add    esp,0xc
c001a86b:	6a 00                	push   0x0
c001a86d:	68 28 ec 00 c0       	push   0xc000ec28
c001a872:	6a 0a                	push   0xa
c001a874:	e8 42 04 00 00       	call   c001acbb <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a879:	83 c4 0c             	add    esp,0xc
c001a87c:	6a 00                	push   0x0
c001a87e:	68 28 ec 00 c0       	push   0xc000ec28
c001a883:	6a 0b                	push   0xb
c001a885:	e8 31 04 00 00       	call   c001acbb <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a88a:	83 c4 0c             	add    esp,0xc
c001a88d:	6a 00                	push   0x0
c001a88f:	68 50 eb 00 c0       	push   0xc000eb50
c001a894:	6a 0d                	push   0xd
c001a896:	e8 20 04 00 00       	call   c001acbb <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a89b:	83 c4 0c             	add    esp,0xc
c001a89e:	6a 00                	push   0x0
c001a8a0:	68 b4 eb 00 c0       	push   0xc000ebb4
c001a8a5:	6a 0e                	push   0xe
c001a8a7:	e8 0f 04 00 00       	call   c001acbb <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a8ac:	83 c4 10             	add    esp,0x10
c001a8af:	50                   	push   eax
c001a8b0:	6a 00                	push   0x0
c001a8b2:	68 28 ec 00 c0       	push   0xc000ec28
c001a8b7:	53                   	push   ebx
c001a8b8:	43                   	inc    ebx
c001a8b9:	e8 fd 03 00 00       	call   c001acbb <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a8be:	83 c4 10             	add    esp,0x10
c001a8c1:	83 fb 1e             	cmp    ebx,0x1e
c001a8c4:	75 e9                	jne    c001a8af <HalInitialise()+0x12c>
c001a8c6:	50                   	push   eax
c001a8c7:	6a 00                	push   0x0
c001a8c9:	68 c2 20 01 c0       	push   0xc00120c2
c001a8ce:	6a 60                	push   0x60
c001a8d0:	e8 e6 03 00 00       	call   c001acbb <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a8d5:	a1 d4 d0 02 c0       	mov    eax,ds:0xc002d0d4
c001a8da:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c001a8e4:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c001a8eb:	e8 8c 52 ff ff       	call   c000fb7c <malloc>
c001a8f0:	89 04 24             	mov    DWORD PTR [esp],eax
c001a8f3:	89 c3                	mov    ebx,eax
c001a8f5:	e8 0e 0e 00 00       	call   c001b708 <RTC::RTC()>
c001a8fa:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c001a904:	5a                   	pop    edx
c001a905:	59                   	pop    ecx
c001a906:	53                   	push   ebx
c001a907:	ff 35 d4 d0 02 c0    	push   DWORD PTR ds:0xc002d0d4
c001a90d:	e8 e4 f0 fe ff       	call   c00099f6 <Device::addChild(Device*)>
c001a912:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a914:	6a 00                	push   0x0
c001a916:	6a 00                	push   0x0
c001a918:	6a 00                	push   0x0
c001a91a:	53                   	push   ebx
c001a91b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a91e:	a1 d4 d0 02 c0       	mov    eax,ds:0xc002d0d4
c001a923:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c001a929:	83 c4 28             	add    esp,0x28
c001a92c:	5b                   	pop    ebx
c001a92d:	c3                   	ret    

c001a92e <HalMakeBeep(int)>:
c001a92e:	53                   	push   ebx
c001a92f:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001a933:	85 db                	test   ebx,ebx
c001a935:	75 07                	jne    c001a93e <HalMakeBeep(int)+0x10>
c001a937:	e4 61                	in     al,0x61
c001a939:	83 e0 fc             	and    eax,0xfffffffc
c001a93c:	eb 26                	jmp    c001a964 <HalMakeBeep(int)+0x36>
c001a93e:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001a943:	99                   	cdq    
c001a944:	f7 fb                	idiv   ebx
c001a946:	89 c1                	mov    ecx,eax
c001a948:	b0 b6                	mov    al,0xb6
c001a94a:	e6 43                	out    0x43,al
c001a94c:	88 c8                	mov    al,cl
c001a94e:	e6 42                	out    0x42,al
c001a950:	89 c8                	mov    eax,ecx
c001a952:	c1 e8 08             	shr    eax,0x8
c001a955:	e6 42                	out    0x42,al
c001a957:	e4 61                	in     al,0x61
c001a959:	89 c2                	mov    edx,eax
c001a95b:	83 ca 03             	or     edx,0x3
c001a95e:	38 d0                	cmp    al,dl
c001a960:	74 04                	je     c001a966 <HalMakeBeep(int)+0x38>
c001a962:	88 d0                	mov    al,dl
c001a964:	e6 61                	out    0x61,al
c001a966:	5b                   	pop    ebx
c001a967:	c3                   	ret    

c001a968 <HalGetRand()>:
c001a968:	31 c0                	xor    eax,eax
c001a96a:	c3                   	ret    

c001a96b <HalEndOfInterrupt(int)>:
c001a96b:	80 3d 24 fb 02 c0 00 	cmp    BYTE PTR ds:0xc002fb24,0x0
c001a972:	74 1d                	je     c001a991 <HalEndOfInterrupt(int)+0x26>
c001a974:	83 ec 18             	sub    esp,0x18
c001a977:	6a 1b                	push   0x1b
c001a979:	e8 29 f5 ff ff       	call   c0019ea7 <x86rdmsr(unsigned int)>
c001a97e:	25 00 f0 ff ff       	and    eax,0xfffff000
c001a983:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c001a98d:	83 c4 1c             	add    esp,0x1c
c001a990:	c3                   	ret    
c001a991:	e9 8e 07 00 00       	jmp    c001b124 <picEOI(int)>

c001a996 <HalRestart()>:
c001a996:	c3                   	ret    

c001a997 <HalShutdown()>:
c001a997:	c3                   	ret    

c001a998 <HalSleep()>:
c001a998:	c3                   	ret    
c001a999:	90                   	nop

c001a99a <CPU::CPU()>:
c001a99a:	83 ec 0c             	sub    esp,0xc
c001a99d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a9a1:	83 ec 08             	sub    esp,0x8
c001a9a4:	68 ee 59 02 c0       	push   0xc00259ee
c001a9a9:	50                   	push   eax
c001a9aa:	e8 a9 f1 fe ff       	call   c0009b58 <Device::Device(char const*)>
c001a9af:	83 c4 10             	add    esp,0x10
c001a9b2:	ba ec 5c 02 c0       	mov    edx,0xc0025cec
c001a9b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a9bb:	89 10                	mov    DWORD PTR [eax],edx
c001a9bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a9c1:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001a9cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a9cf:	05 64 01 00 00       	add    eax,0x164
c001a9d4:	83 ec 0c             	sub    esp,0xc
c001a9d7:	50                   	push   eax
c001a9d8:	e8 27 43 ff ff       	call   c000ed04 <GDT::GDT()>
c001a9dd:	83 c4 10             	add    esp,0x10
c001a9e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a9e4:	05 68 09 00 00       	add    eax,0x968
c001a9e9:	83 ec 0c             	sub    esp,0xc
c001a9ec:	50                   	push   eax
c001a9ed:	e8 66 45 ff ff       	call   c000ef58 <IDT::IDT()>
c001a9f2:	83 c4 10             	add    esp,0x10
c001a9f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a9f9:	05 68 11 00 00       	add    eax,0x1168
c001a9fe:	83 ec 0c             	sub    esp,0xc
c001aa01:	50                   	push   eax
c001aa02:	e8 dd 81 ff ff       	call   c0012be4 <TSS::TSS()>
c001aa07:	83 c4 10             	add    esp,0x10
c001aa0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aa0e:	c7 80 10 01 00 00 11 00 00 00 	mov    DWORD PTR [eax+0x110],0x11
c001aa18:	90                   	nop
c001aa19:	83 c4 0c             	add    esp,0xc
c001aa1c:	c3                   	ret    
c001aa1d:	90                   	nop

c001aa1e <CPU::setupSMEP()>:
c001aa1e:	0f 20 e0             	mov    eax,cr4
c001aa21:	0d 00 00 10 00       	or     eax,0x100000
c001aa26:	0f 22 e0             	mov    cr4,eax
c001aa29:	c3                   	ret    

c001aa2a <CPU::setupUMIP()>:
c001aa2a:	0f 20 e0             	mov    eax,cr4
c001aa2d:	80 cc 08             	or     ah,0x8
c001aa30:	0f 22 e0             	mov    cr4,eax
c001aa33:	c3                   	ret    

c001aa34 <CPU::setupTSC()>:
c001aa34:	0f 20 e0             	mov    eax,cr4
c001aa37:	83 c8 04             	or     eax,0x4
c001aa3a:	0f 22 e0             	mov    cr4,eax
c001aa3d:	c3                   	ret    

c001aa3e <CPU::setupLargePages()>:
c001aa3e:	0f 20 e0             	mov    eax,cr4
c001aa41:	83 c8 10             	or     eax,0x10
c001aa44:	0f 22 e0             	mov    cr4,eax
c001aa47:	c3                   	ret    

c001aa48 <CPU::setupPAT()>:
c001aa48:	f6 05 70 fb 02 c0 08 	test   BYTE PTR ds:0xc002fb70,0x8
c001aa4f:	74 28                	je     c001aa79 <CPU::setupPAT()+0x31>
c001aa51:	53                   	push   ebx
c001aa52:	83 ec 14             	sub    esp,0x14
c001aa55:	68 77 02 00 00       	push   0x277
c001aa5a:	e8 48 f4 ff ff       	call   c0019ea7 <x86rdmsr(unsigned int)>
c001aa5f:	83 c4 0c             	add    esp,0xc
c001aa62:	83 e2 f8             	and    edx,0xfffffff8
c001aa65:	83 ca 01             	or     edx,0x1
c001aa68:	52                   	push   edx
c001aa69:	50                   	push   eax
c001aa6a:	68 77 02 00 00       	push   0x277
c001aa6f:	e8 71 f4 ff ff       	call   c0019ee5 <x86wrmsr(unsigned int, unsigned long long)>
c001aa74:	83 c4 18             	add    esp,0x18
c001aa77:	5b                   	pop    ebx
c001aa78:	c3                   	ret    
c001aa79:	c3                   	ret    

c001aa7a <CPU::setupMTRR()>:
c001aa7a:	c3                   	ret    
c001aa7b:	90                   	nop

c001aa7c <CPU::setupGlobalPages()>:
c001aa7c:	0f 20 e0             	mov    eax,cr4
c001aa7f:	0c 80                	or     al,0x80
c001aa81:	0f 22 e0             	mov    cr4,eax
c001aa84:	c3                   	ret    
c001aa85:	90                   	nop

c001aa86 <CPU::allowUsermodeDataAccess()>:
c001aa86:	f6 05 73 fb 02 c0 40 	test   BYTE PTR ds:0xc002fb73,0x40
c001aa8d:	74 03                	je     c001aa92 <CPU::allowUsermodeDataAccess()+0xc>
c001aa8f:	0f 01 cb             	stac   
c001aa92:	c3                   	ret    
c001aa93:	90                   	nop

c001aa94 <CPU::prohibitUsermodeDataAccess()>:
c001aa94:	f6 05 73 fb 02 c0 40 	test   BYTE PTR ds:0xc002fb73,0x40
c001aa9b:	74 03                	je     c001aaa0 <CPU::prohibitUsermodeDataAccess()+0xc>
c001aa9d:	0f 01 ca             	clac   
c001aaa0:	c3                   	ret    
c001aaa1:	90                   	nop

c001aaa2 <CPU::setupSMAP()>:
c001aaa2:	0f 20 e0             	mov    eax,cr4
c001aaa5:	0d 00 00 20 00       	or     eax,0x200000
c001aaaa:	0f 22 e0             	mov    cr4,eax
c001aaad:	eb e5                	jmp    c001aa94 <CPU::prohibitUsermodeDataAccess()>
c001aaaf:	90                   	nop

c001aab0 <CPU::setupFeatures()>:
c001aab0:	53                   	push   ebx
c001aab1:	83 ec 08             	sub    esp,0x8
c001aab4:	f6 05 73 fb 02 c0 20 	test   BYTE PTR ds:0xc002fb73,0x20
c001aabb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001aabf:	74 18                	je     c001aad9 <CPU::setupFeatures()+0x29>
c001aac1:	83 ec 0c             	sub    esp,0xc
c001aac4:	68 5b 5c 02 c0       	push   0xc0025c5b
c001aac9:	e8 98 c4 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001aace:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001aad1:	e8 54 ff ff ff       	call   c001aa2a <CPU::setupUMIP()>
c001aad6:	83 c4 10             	add    esp,0x10
c001aad9:	f6 05 72 fb 02 c0 08 	test   BYTE PTR ds:0xc002fb72,0x8
c001aae0:	74 18                	je     c001aafa <CPU::setupFeatures()+0x4a>
c001aae2:	83 ec 0c             	sub    esp,0xc
c001aae5:	68 65 5c 02 c0       	push   0xc0025c65
c001aaea:	e8 77 c4 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001aaef:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001aaf2:	e8 3d ff ff ff       	call   c001aa34 <CPU::setupTSC()>
c001aaf7:	83 c4 10             	add    esp,0x10
c001aafa:	f6 05 72 fb 02 c0 20 	test   BYTE PTR ds:0xc002fb72,0x20
c001ab01:	74 18                	je     c001ab1b <CPU::setupFeatures()+0x6b>
c001ab03:	83 ec 0c             	sub    esp,0xc
c001ab06:	68 6e 5c 02 c0       	push   0xc0025c6e
c001ab0b:	e8 56 c4 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001ab10:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ab13:	e8 26 ff ff ff       	call   c001aa3e <CPU::setupLargePages()>
c001ab18:	83 c4 10             	add    esp,0x10
c001ab1b:	f6 05 72 fb 02 c0 40 	test   BYTE PTR ds:0xc002fb72,0x40
c001ab22:	74 18                	je     c001ab3c <CPU::setupFeatures()+0x8c>
c001ab24:	83 ec 0c             	sub    esp,0xc
c001ab27:	68 77 5c 02 c0       	push   0xc0025c77
c001ab2c:	e8 35 c4 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001ab31:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ab34:	e8 43 ff ff ff       	call   c001aa7c <CPU::setupGlobalPages()>
c001ab39:	83 c4 10             	add    esp,0x10
c001ab3c:	f6 05 72 fb 02 c0 80 	test   BYTE PTR ds:0xc002fb72,0x80
c001ab43:	74 18                	je     c001ab5d <CPU::setupFeatures()+0xad>
c001ab45:	83 ec 0c             	sub    esp,0xc
c001ab48:	68 89 5c 02 c0       	push   0xc0025c89
c001ab4d:	e8 14 c4 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001ab52:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ab55:	e8 ee fe ff ff       	call   c001aa48 <CPU::setupPAT()>
c001ab5a:	83 c4 10             	add    esp,0x10
c001ab5d:	f6 05 74 fb 02 c0 04 	test   BYTE PTR ds:0xc002fb74,0x4
c001ab64:	74 11                	je     c001ab77 <CPU::setupFeatures()+0xc7>
c001ab66:	c7 44 24 10 92 5c 02 c0 	mov    DWORD PTR [esp+0x10],0xc0025c92
c001ab6e:	83 c4 08             	add    esp,0x8
c001ab71:	5b                   	pop    ebx
c001ab72:	e9 ef c3 fe ff       	jmp    c0006f66 <Dbg::kprintf(char const*, ...)>
c001ab77:	83 c4 08             	add    esp,0x8
c001ab7a:	5b                   	pop    ebx
c001ab7b:	c3                   	ret    

c001ab7c <CPU::open(int, int, void*)>:
c001ab7c:	55                   	push   ebp
c001ab7d:	57                   	push   edi
c001ab7e:	56                   	push   esi
c001ab7f:	53                   	push   ebx
c001ab80:	83 ec 18             	sub    esp,0x18
c001ab83:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001ab87:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001ab8b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001ab8f:	8d 83 64 01 00 00    	lea    eax,[ebx+0x164]
c001ab95:	89 bb 60 01 00 00    	mov    DWORD PTR [ebx+0x160],edi
c001ab9b:	8d ab 68 11 00 00    	lea    ebp,[ebx+0x1168]
c001aba1:	50                   	push   eax
c001aba2:	e8 bf 41 ff ff       	call   c000ed66 <GDT::setup()>
c001aba7:	83 c4 0c             	add    esp,0xc
c001abaa:	6a 00                	push   0x0
c001abac:	68 ef be ad de       	push   0xdeadbeef
c001abb1:	55                   	push   ebp
c001abb2:	e8 71 80 ff ff       	call   c0012c28 <TSS::setup(unsigned long, unsigned long)>
c001abb7:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001abba:	e8 49 80 ff ff       	call   c0012c08 <TSS::flush()>
c001abbf:	8d 83 68 09 00 00    	lea    eax,[ebx+0x968]
c001abc5:	89 04 24             	mov    DWORD PTR [esp],eax
c001abc8:	e8 01 44 ff ff       	call   c000efce <IDT::setup()>
c001abcd:	b8 00 04 00 00       	mov    eax,0x400
c001abd2:	0f 23 f8             	mov    dr7,eax
c001abd5:	c7 83 5c 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x15c],0xc2400000
c001abdf:	e8 a0 54 ff ff       	call   c0010084 <Phys::allocatePage()>
c001abe4:	83 c4 10             	add    esp,0x10
c001abe7:	85 f6                	test   esi,esi
c001abe9:	89 83 58 01 00 00    	mov    DWORD PTR [ebx+0x158],eax
c001abef:	89 38                	mov    DWORD PTR [eax],edi
c001abf1:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001abf7:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c001abfa:	74 10                	je     c001ac0c <CPU::open(int, int, void*)+0x90>
c001abfc:	50                   	push   eax
c001abfd:	50                   	push   eax
c001abfe:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001ac04:	56                   	push   esi
c001ac05:	e8 ce 89 ff ff       	call   c00135d8 <VAS::setCPUSpecific(unsigned long)>
c001ac0a:	eb 0d                	jmp    c001ac19 <CPU::open(int, int, void*)+0x9d>
c001ac0c:	83 ec 0c             	sub    esp,0xc
c001ac0f:	68 9c 5c 02 c0       	push   0xc0025c9c
c001ac14:	e8 71 52 ff ff       	call   c000fe8a <KePanic(char const*)>
c001ac19:	83 c4 10             	add    esp,0x10
c001ac1c:	83 ec 0c             	sub    esp,0xc
c001ac1f:	68 aa 5c 02 c0       	push   0xc0025caa
c001ac24:	e8 0c 26 ff ff       	call   c000d235 <KeSetBootMessage(char const*)>
c001ac29:	e8 55 fb ff ff       	call   c001a783 <HalInitialise()>
c001ac2e:	c7 04 24 10 00 00 00 	mov    DWORD PTR [esp],0x10
c001ac35:	e8 ae 25 ff ff       	call   c000d1e8 <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c001ac3a:	0f b6 c0             	movzx  eax,al
c001ac3d:	83 f8 01             	cmp    eax,0x1
c001ac40:	19 c0                	sbb    eax,eax
c001ac42:	83 e0 46             	and    eax,0x46
c001ac45:	83 c0 1e             	add    eax,0x1e
c001ac48:	89 04 24             	mov    DWORD PTR [esp],eax
c001ac4b:	e8 41 04 ff ff       	call   c000b091 <setupTimer(int)>
c001ac50:	89 83 74 11 00 00    	mov    DWORD PTR [ebx+0x1174],eax
c001ac56:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c001ac5d:	e8 86 25 ff ff       	call   c000d1e8 <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c001ac62:	83 c4 10             	add    esp,0x10
c001ac65:	84 c0                	test   al,al
c001ac67:	74 0c                	je     c001ac75 <CPU::open(int, int, void*)+0xf9>
c001ac69:	83 ec 0c             	sub    esp,0xc
c001ac6c:	53                   	push   ebx
c001ac6d:	e8 3e fe ff ff       	call   c001aab0 <CPU::setupFeatures()>
c001ac72:	83 c4 10             	add    esp,0x10
c001ac75:	83 c4 0c             	add    esp,0xc
c001ac78:	31 c0                	xor    eax,eax
c001ac7a:	5b                   	pop    ebx
c001ac7b:	5e                   	pop    esi
c001ac7c:	5f                   	pop    edi
c001ac7d:	5d                   	pop    ebp
c001ac7e:	c3                   	ret    

c001ac7f <convertLegacyIRQNumber(int)>:
c001ac7f:	83 ec 0c             	sub    esp,0xc
c001ac82:	f6 05 70 fb 02 c0 01 	test   BYTE PTR ds:0xc002fb70,0x1
c001ac89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac8d:	74 0c                	je     c001ac9b <convertLegacyIRQNumber(int)+0x1c>
c001ac8f:	83 f8 0f             	cmp    eax,0xf
c001ac92:	7f 0b                	jg     c001ac9f <convertLegacyIRQNumber(int)+0x20>
c001ac94:	0f b6 80 08 68 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd97f8]
c001ac9b:	83 c4 0c             	add    esp,0xc
c001ac9e:	c3                   	ret    
c001ac9f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001aca3:	83 ec 0c             	sub    esp,0xc
c001aca6:	68 10 5d 02 c0       	push   0xc0025d10
c001acab:	e8 da 51 ff ff       	call   c000fe8a <KePanic(char const*)>
c001acb0:	83 c4 10             	add    esp,0x10
c001acb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001acb7:	83 c4 0c             	add    esp,0xc
c001acba:	c3                   	ret    

c001acbb <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>:
c001acbb:	56                   	push   esi
c001acbc:	31 c0                	xor    eax,eax
c001acbe:	53                   	push   ebx
c001acbf:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001acc3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001acc7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001accb:	89 ca                	mov    edx,ecx
c001accd:	c1 e2 04             	shl    edx,0x4
c001acd0:	83 bc 82 00 e1 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffd1f00],0x0
c001acd8:	74 17                	je     c001acf1 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)+0x36>
c001acda:	83 c0 01             	add    eax,0x1
c001acdd:	83 f8 04             	cmp    eax,0x4
c001ace0:	75 ee                	jne    c001acd0 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c001ace2:	c7 44 24 0c 71 5d 02 c0 	mov    DWORD PTR [esp+0xc],0xc0025d71
c001acea:	5b                   	pop    ebx
c001aceb:	5e                   	pop    esi
c001acec:	e9 99 51 ff ff       	jmp    c000fe8a <KePanic(char const*)>
c001acf1:	8d 04 88             	lea    eax,[eax+ecx*4]
c001acf4:	89 1c 85 00 e1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1f00],ebx
c001acfb:	5b                   	pop    ebx
c001acfc:	89 34 85 00 d1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2f00],esi
c001ad03:	5e                   	pop    esi
c001ad04:	c3                   	ret    

c001ad05 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001ad05:	55                   	push   ebp
c001ad06:	57                   	push   edi
c001ad07:	56                   	push   esi
c001ad08:	53                   	push   ebx
c001ad09:	83 ec 0c             	sub    esp,0xc
c001ad0c:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001ad10:	f6 05 70 fb 02 c0 01 	test   BYTE PTR ds:0xc002fb70,0x1
c001ad17:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ad1b:	8d 6e 20             	lea    ebp,[esi+0x20]
c001ad1e:	74 57                	je     c001ad77 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x72>
c001ad20:	84 c0                	test   al,al
c001ad22:	89 c7                	mov    edi,eax
c001ad24:	74 1d                	je     c001ad43 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3e>
c001ad26:	83 fe 0f             	cmp    esi,0xf
c001ad29:	0f 8f d9 00 00 00    	jg     c001ae08 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x103>
c001ad2f:	0f b6 b6 08 68 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd97f8]
c001ad36:	0f b7 bc 36 20 ce 02 c0 	movzx  edi,WORD PTR [esi+esi*1-0x3ffd31e0]
c001ad3e:	d1 ef                	shr    edi,1
c001ad40:	83 e7 01             	and    edi,0x1
c001ad43:	a1 e0 fa 02 c0       	mov    eax,ds:0xc002fae0
c001ad48:	83 ec 08             	sub    esp,0x8
c001ad4b:	31 db                	xor    ebx,ebx
c001ad4d:	50                   	push   eax
c001ad4e:	68 7e 5d 02 c0       	push   0xc0025d7e
c001ad53:	e8 0e c2 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001ad58:	a1 e0 fa 02 c0       	mov    eax,ds:0xc002fae0
c001ad5d:	83 c4 10             	add    esp,0x10
c001ad60:	85 c0                	test   eax,eax
c001ad62:	7f 59                	jg     c001adbd <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb8>
c001ad64:	8d 6e 20             	lea    ebp,[esi+0x20]
c001ad67:	83 ec 0c             	sub    esp,0xc
c001ad6a:	68 95 5d 02 c0       	push   0xc0025d95
c001ad6f:	e8 16 51 ff ff       	call   c000fe8a <KePanic(char const*)>
c001ad74:	83 c4 10             	add    esp,0x10
c001ad77:	89 e8                	mov    eax,ebp
c001ad79:	31 d2                	xor    edx,edx
c001ad7b:	c1 e0 04             	shl    eax,0x4
c001ad7e:	8b 8c 90 00 e1 02 c0 	mov    ecx,DWORD PTR [eax+edx*4-0x3ffd1f00]
c001ad85:	85 c9                	test   ecx,ecx
c001ad87:	0f 84 92 00 00 00    	je     c001ae1f <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x11a>
c001ad8d:	83 c2 01             	add    edx,0x1
c001ad90:	83 fa 04             	cmp    edx,0x4
c001ad93:	75 e9                	jne    c001ad7e <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x79>
c001ad95:	83 ec 0c             	sub    esp,0xc
c001ad98:	68 4c 5d 02 c0       	push   0xc0025d4c
c001ad9d:	e8 e8 50 ff ff       	call   c000fe8a <KePanic(char const*)>
c001ada2:	83 c4 10             	add    esp,0x10
c001ada5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001adaa:	83 c4 0c             	add    esp,0xc
c001adad:	5b                   	pop    ebx
c001adae:	5e                   	pop    esi
c001adaf:	5f                   	pop    edi
c001adb0:	5d                   	pop    ebp
c001adb1:	c3                   	ret    
c001adb2:	83 c3 01             	add    ebx,0x1
c001adb5:	39 1d e0 fa 02 c0    	cmp    DWORD PTR ds:0xc002fae0,ebx
c001adbb:	7e a7                	jle    c001ad64 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x5f>
c001adbd:	8b 2c 9d 00 fb 02 c0 	mov    ebp,DWORD PTR [ebx*4-0x3ffd0500]
c001adc4:	83 ec 08             	sub    esp,0x8
c001adc7:	56                   	push   esi
c001adc8:	55                   	push   ebp
c001adc9:	e8 4a dd ff ff       	call   c0018b18 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c001adce:	83 c4 10             	add    esp,0x10
c001add1:	84 c0                	test   al,al
c001add3:	74 dd                	je     c001adb2 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xad>
c001add5:	89 f8                	mov    eax,edi
c001add7:	83 ec 04             	sub    esp,0x4
c001adda:	8b 1c 9d 00 fb 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd0500]
c001ade1:	8d 6e 20             	lea    ebp,[esi+0x20]
c001ade4:	0f b6 f8             	movzx  edi,al
c001ade7:	57                   	push   edi
c001ade8:	89 e8                	mov    eax,ebp
c001adea:	6a 00                	push   0x0
c001adec:	0f b6 c0             	movzx  eax,al
c001adef:	50                   	push   eax
c001adf0:	89 f0                	mov    eax,esi
c001adf2:	6a 00                	push   0x0
c001adf4:	0f b6 c0             	movzx  eax,al
c001adf7:	6a 00                	push   0x0
c001adf9:	50                   	push   eax
c001adfa:	53                   	push   ebx
c001adfb:	e8 84 de ff ff       	call   c0018c84 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c001ae00:	83 c4 20             	add    esp,0x20
c001ae03:	e9 6f ff ff ff       	jmp    c001ad77 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x72>
c001ae08:	83 ec 0c             	sub    esp,0xc
c001ae0b:	31 ff                	xor    edi,edi
c001ae0d:	68 10 5d 02 c0       	push   0xc0025d10
c001ae12:	e8 73 50 ff ff       	call   c000fe8a <KePanic(char const*)>
c001ae17:	83 c4 10             	add    esp,0x10
c001ae1a:	e9 24 ff ff ff       	jmp    c001ad43 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3e>
c001ae1f:	8d 04 aa             	lea    eax,[edx+ebp*4]
c001ae22:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001ae26:	89 14 85 00 e1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1f00],edx
c001ae2d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001ae31:	89 14 85 00 d1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2f00],edx
c001ae38:	83 c4 0c             	add    esp,0xc
c001ae3b:	89 f0                	mov    eax,esi
c001ae3d:	5b                   	pop    ebx
c001ae3e:	5e                   	pop    esi
c001ae3f:	5f                   	pop    edi
c001ae40:	5d                   	pop    ebp
c001ae41:	c3                   	ret    

c001ae42 <HalUninstallISRHandler(int, void (*)(regs*, void*))>:
c001ae42:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ae46:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001ae4a:	c1 e0 04             	shl    eax,0x4
c001ae4d:	8d 50 10             	lea    edx,[eax+0x10]
c001ae50:	39 88 00 e1 02 c0    	cmp    DWORD PTR [eax-0x3ffd1f00],ecx
c001ae56:	74 08                	je     c001ae60 <HalUninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c001ae58:	83 c0 04             	add    eax,0x4
c001ae5b:	39 d0                	cmp    eax,edx
c001ae5d:	75 f1                	jne    c001ae50 <HalUninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c001ae5f:	c3                   	ret    
c001ae60:	c7 80 00 e1 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd1f00],0x0
c001ae6a:	c7 80 00 d1 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd2f00],0x0
c001ae74:	eb e2                	jmp    c001ae58 <HalUninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c001ae76 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c001ae76:	56                   	push   esi
c001ae77:	53                   	push   ebx
c001ae78:	83 ec 04             	sub    esp,0x4
c001ae7b:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001ae80:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ae84:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001ae88:	74 09                	je     c001ae93 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c001ae8a:	f6 05 70 fb 02 c0 01 	test   BYTE PTR ds:0xc002fb70,0x1
c001ae91:	75 34                	jne    c001aec7 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x51>
c001ae93:	8d 43 20             	lea    eax,[ebx+0x20]
c001ae96:	c1 e0 04             	shl    eax,0x4
c001ae99:	8d 50 10             	lea    edx,[eax+0x10]
c001ae9c:	39 b0 00 e1 02 c0    	cmp    DWORD PTR [eax-0x3ffd1f00],esi
c001aea2:	74 0d                	je     c001aeb1 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c001aea4:	83 c0 04             	add    eax,0x4
c001aea7:	39 d0                	cmp    eax,edx
c001aea9:	75 f1                	jne    c001ae9c <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x26>
c001aeab:	83 c4 04             	add    esp,0x4
c001aeae:	5b                   	pop    ebx
c001aeaf:	5e                   	pop    esi
c001aeb0:	c3                   	ret    
c001aeb1:	c7 80 00 e1 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd1f00],0x0
c001aebb:	c7 80 00 d1 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd2f00],0x0
c001aec5:	eb dd                	jmp    c001aea4 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2e>
c001aec7:	83 fb 0f             	cmp    ebx,0xf
c001aeca:	7f 09                	jg     c001aed5 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x5f>
c001aecc:	0f b6 9b 08 68 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd97f8]
c001aed3:	eb be                	jmp    c001ae93 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c001aed5:	83 ec 0c             	sub    esp,0xc
c001aed8:	68 a2 5d 02 c0       	push   0xc0025da2
c001aedd:	e8 a8 4f ff ff       	call   c000fe8a <KePanic(char const*)>
c001aee2:	83 c4 10             	add    esp,0x10
c001aee5:	eb ac                	jmp    c001ae93 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c001aee7:	90                   	nop

c001aee8 <picIoWait()>:
c001aee8:	eb 00                	jmp    c001aeea <picIoWait()+0x2>
c001aeea:	eb 00                	jmp    c001aeec <picIoWait()+0x4>
c001aeec:	90                   	nop
c001aeed:	c3                   	ret    
c001aeee:	66 90                	xchg   ax,ax

c001aef0 <picDisable()>:
c001aef0:	83 ec 10             	sub    esp,0x10
c001aef3:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c001aefa:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c001aeff:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001af03:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001af08:	ee                   	out    dx,al
c001af09:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c001af10:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c001af15:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c001af19:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c001af1e:	ee                   	out    dx,al
c001af1f:	90                   	nop
c001af20:	83 c4 10             	add    esp,0x10
c001af23:	c3                   	ret    

c001af24 <picGetIRQReg(int)>:
c001af24:	83 ec 10             	sub    esp,0x10
c001af27:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001af2b:	0f b6 c0             	movzx  eax,al
c001af2e:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c001af35:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c001af39:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001af3d:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001af42:	ee                   	out    dx,al
c001af43:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001af47:	0f b6 c0             	movzx  eax,al
c001af4a:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c001af51:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001af55:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001af59:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001af5e:	ee                   	out    dx,al
c001af5f:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c001af66:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c001af6b:	89 c2                	mov    edx,eax
c001af6d:	ec                   	in     al,dx
c001af6e:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001af72:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001af76:	0f b6 c0             	movzx  eax,al
c001af79:	c1 e0 08             	shl    eax,0x8
c001af7c:	89 c1                	mov    ecx,eax
c001af7e:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c001af85:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c001af8a:	89 c2                	mov    edx,eax
c001af8c:	ec                   	in     al,dx
c001af8d:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001af91:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c001af95:	0f b6 c0             	movzx  eax,al
c001af98:	09 c8                	or     eax,ecx
c001af9a:	83 c4 10             	add    esp,0x10
c001af9d:	c3                   	ret    
c001af9e:	66 90                	xchg   ax,ax

c001afa0 <picOpen()>:
c001afa0:	83 ec 50             	sub    esp,0x50
c001afa3:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c001afaa:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001afaf:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001afb3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001afb7:	ee                   	out    dx,al
c001afb8:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c001afbf:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001afc4:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c001afc8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001afcc:	ee                   	out    dx,al
c001afcd:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c001afd5:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c001afdd:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c001afe4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001afe8:	89 c2                	mov    edx,eax
c001afea:	ec                   	in     al,dx
c001afeb:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c001afef:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c001aff3:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c001aff7:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c001affe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b002:	89 c2                	mov    edx,eax
c001b004:	ec                   	in     al,dx
c001b005:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001b009:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c001b00d:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c001b011:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c001b018:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c001b01d:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001b021:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001b025:	ee                   	out    dx,al
c001b026:	e8 bd fe ff ff       	call   c001aee8 <picIoWait()>
c001b02b:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c001b032:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c001b037:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c001b03b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001b03f:	ee                   	out    dx,al
c001b040:	e8 a3 fe ff ff       	call   c001aee8 <picIoWait()>
c001b045:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001b049:	0f b6 c0             	movzx  eax,al
c001b04c:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c001b053:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c001b057:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c001b05b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b05f:	ee                   	out    dx,al
c001b060:	e8 83 fe ff ff       	call   c001aee8 <picIoWait()>
c001b065:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001b069:	0f b6 c0             	movzx  eax,al
c001b06c:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c001b073:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001b077:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001b07b:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001b07f:	ee                   	out    dx,al
c001b080:	e8 63 fe ff ff       	call   c001aee8 <picIoWait()>
c001b085:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c001b08c:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c001b091:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c001b095:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001b099:	ee                   	out    dx,al
c001b09a:	e8 49 fe ff ff       	call   c001aee8 <picIoWait()>
c001b09f:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c001b0a6:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c001b0ab:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001b0af:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001b0b3:	ee                   	out    dx,al
c001b0b4:	e8 2f fe ff ff       	call   c001aee8 <picIoWait()>
c001b0b9:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c001b0c0:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c001b0c5:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c001b0c9:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001b0cd:	ee                   	out    dx,al
c001b0ce:	e8 15 fe ff ff       	call   c001aee8 <picIoWait()>
c001b0d3:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c001b0da:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c001b0df:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c001b0e3:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001b0e7:	ee                   	out    dx,al
c001b0e8:	e8 fb fd ff ff       	call   c001aee8 <picIoWait()>
c001b0ed:	0f b6 44 24 47       	movzx  eax,BYTE PTR [esp+0x47]
c001b0f2:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c001b0f9:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c001b0fd:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c001b101:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001b105:	ee                   	out    dx,al
c001b106:	0f b6 44 24 46       	movzx  eax,BYTE PTR [esp+0x46]
c001b10b:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c001b112:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001b116:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c001b11a:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001b11e:	ee                   	out    dx,al
c001b11f:	90                   	nop
c001b120:	83 c4 50             	add    esp,0x50
c001b123:	c3                   	ret    

c001b124 <picEOI(int)>:
c001b124:	83 ec 10             	sub    esp,0x10
c001b127:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c001b12c:	75 1e                	jne    c001b14c <picEOI(int)+0x28>
c001b12e:	6a 0b                	push   0xb
c001b130:	e8 ef fd ff ff       	call   c001af24 <picGetIRQReg(int)>
c001b135:	83 c4 04             	add    esp,0x4
c001b138:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c001b13d:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c001b142:	25 80 00 00 00       	and    eax,0x80
c001b147:	74 73                	je     c001b1bc <picEOI(int)+0x98>
c001b149:	8d 76 00             	lea    esi,[esi+0x0]
c001b14c:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c001b151:	75 31                	jne    c001b184 <picEOI(int)+0x60>
c001b153:	6a 0b                	push   0xb
c001b155:	e8 ca fd ff ff       	call   c001af24 <picGetIRQReg(int)>
c001b15a:	83 c4 04             	add    esp,0x4
c001b15d:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c001b162:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b166:	98                   	cwde   
c001b167:	85 c0                	test   eax,eax
c001b169:	78 19                	js     c001b184 <picEOI(int)+0x60>
c001b16b:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c001b172:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c001b177:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001b17b:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001b180:	ee                   	out    dx,al
c001b181:	eb 3d                	jmp    c001b1c0 <picEOI(int)+0x9c>
c001b183:	90                   	nop
c001b184:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c001b189:	7e 19                	jle    c001b1a4 <picEOI(int)+0x80>
c001b18b:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c001b192:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c001b197:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001b19b:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001b1a0:	ee                   	out    dx,al
c001b1a1:	8d 76 00             	lea    esi,[esi+0x0]
c001b1a4:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c001b1ab:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c001b1b0:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001b1b4:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001b1b9:	ee                   	out    dx,al
c001b1ba:	eb 04                	jmp    c001b1c0 <picEOI(int)+0x9c>
c001b1bc:	90                   	nop
c001b1bd:	8d 76 00             	lea    esi,[esi+0x0]
c001b1c0:	83 c4 10             	add    esp,0x10
c001b1c3:	c3                   	ret    

c001b1c4 <RTC::open(int, int, void*)>:
c001b1c4:	31 c0                	xor    eax,eax
c001b1c6:	c3                   	ret    
c001b1c7:	90                   	nop

c001b1c8 <RTC::close(int, int, void*)>:
c001b1c8:	31 c0                	xor    eax,eax
c001b1ca:	c3                   	ret    
c001b1cb:	90                   	nop

c001b1cc <RTC::timeInSecondsUTC()>:
c001b1cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b1d0:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001b1d6:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001b1dc:	c3                   	ret    
c001b1dd:	90                   	nop

c001b1de <RTC::timeInDatetimeUTC()>:
c001b1de:	53                   	push   ebx
c001b1df:	83 ec 14             	sub    esp,0x14
c001b1e2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b1e6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b1ea:	8b 10                	mov    edx,DWORD PTR [eax]
c001b1ec:	50                   	push   eax
c001b1ed:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001b1f0:	83 c4 0c             	add    esp,0xc
c001b1f3:	52                   	push   edx
c001b1f4:	50                   	push   eax
c001b1f5:	53                   	push   ebx
c001b1f6:	e8 19 e4 fe ff       	call   c0009614 <KeSecondsToDatetime(unsigned long long)>
c001b1fb:	89 d8                	mov    eax,ebx
c001b1fd:	83 c4 14             	add    esp,0x14
c001b200:	5b                   	pop    ebx
c001b201:	c2 04 00             	ret    0x4

c001b204 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c001b204:	56                   	push   esi
c001b205:	53                   	push   ebx
c001b206:	83 ec 14             	sub    esp,0x14
c001b209:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b20d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b20f:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c001b212:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b216:	52                   	push   edx
c001b217:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b21b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b21f:	50                   	push   eax
c001b220:	e8 ef e3 fe ff       	call   c0009614 <KeSecondsToDatetime(unsigned long long)>
c001b225:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c001b229:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b22d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b231:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001b235:	89 f0                	mov    eax,esi
c001b237:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001b23b:	83 c4 20             	add    esp,0x20
c001b23e:	5b                   	pop    ebx
c001b23f:	5e                   	pop    esi
c001b240:	ff e0                	jmp    eax

c001b242 <RTC::~RTC()>:
c001b242:	83 ec 0c             	sub    esp,0xc
c001b245:	ba cc 5d 02 c0       	mov    edx,0xc0025dcc
c001b24a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b24e:	89 10                	mov    DWORD PTR [eax],edx
c001b250:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b254:	83 ec 0c             	sub    esp,0xc
c001b257:	50                   	push   eax
c001b258:	e8 8f de fe ff       	call   c00090ec <Clock::~Clock()>
c001b25d:	83 c4 10             	add    esp,0x10
c001b260:	90                   	nop
c001b261:	83 c4 0c             	add    esp,0xc
c001b264:	c3                   	ret    
c001b265:	90                   	nop

c001b266 <RTC::~RTC()>:
c001b266:	83 ec 0c             	sub    esp,0xc
c001b269:	83 ec 0c             	sub    esp,0xc
c001b26c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b270:	e8 cd ff ff ff       	call   c001b242 <RTC::~RTC()>
c001b275:	83 c4 10             	add    esp,0x10
c001b278:	83 ec 08             	sub    esp,0x8
c001b27b:	68 60 01 00 00       	push   0x160
c001b280:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b284:	e8 6c 20 ff ff       	call   c000d2f5 <operator delete(void*, unsigned long)>
c001b289:	83 c4 10             	add    esp,0x10
c001b28c:	83 c4 0c             	add    esp,0xc
c001b28f:	c3                   	ret    

c001b290 <RTC::get_update_in_progress_flag()>:
c001b290:	83 ec 18             	sub    esp,0x18
c001b293:	6a 0a                	push   0xa
c001b295:	e8 ef da ff ff       	call   c0018d89 <x86ReadCMOS(unsigned char)>
c001b29a:	83 c4 1c             	add    esp,0x1c
c001b29d:	0f b6 c0             	movzx  eax,al
c001b2a0:	c1 e8 07             	shr    eax,0x7
c001b2a3:	c3                   	ret    

c001b2a4 <RTC::completeRTCRefresh()>:
c001b2a4:	55                   	push   ebp
c001b2a5:	57                   	push   edi
c001b2a6:	56                   	push   esi
c001b2a7:	53                   	push   ebx
c001b2a8:	83 ec 3c             	sub    esp,0x3c
c001b2ab:	8b 1d 50 cb 02 c0    	mov    ebx,DWORD PTR ds:0xc002cb50
c001b2b1:	83 ec 0c             	sub    esp,0xc
c001b2b4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001b2b8:	e8 d3 ff ff ff       	call   c001b290 <RTC::get_update_in_progress_flag()>
c001b2bd:	83 c4 10             	add    esp,0x10
c001b2c0:	84 c0                	test   al,al
c001b2c2:	74 0e                	je     c001b2d2 <RTC::completeRTCRefresh()+0x2e>
c001b2c4:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c001b2ca:	3b 05 50 cb 02 c0    	cmp    eax,DWORD PTR ds:0xc002cb50
c001b2d0:	73 df                	jae    c001b2b1 <RTC::completeRTCRefresh()+0xd>
c001b2d2:	83 ec 0c             	sub    esp,0xc
c001b2d5:	6a 00                	push   0x0
c001b2d7:	e8 ad da ff ff       	call   c0018d89 <x86ReadCMOS(unsigned char)>
c001b2dc:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c001b2e3:	89 c7                	mov    edi,eax
c001b2e5:	e8 9f da ff ff       	call   c0018d89 <x86ReadCMOS(unsigned char)>
c001b2ea:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001b2f1:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c001b2f5:	e8 8f da ff ff       	call   c0018d89 <x86ReadCMOS(unsigned char)>
c001b2fa:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001b301:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c001b305:	e8 7f da ff ff       	call   c0018d89 <x86ReadCMOS(unsigned char)>
c001b30a:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001b311:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c001b315:	e8 6f da ff ff       	call   c0018d89 <x86ReadCMOS(unsigned char)>
c001b31a:	c7 04 24 09 00 00 00 	mov    DWORD PTR [esp],0x9
c001b321:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001b325:	e8 5f da ff ff       	call   c0018d89 <x86ReadCMOS(unsigned char)>
c001b32a:	0f b6 c0             	movzx  eax,al
c001b32d:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001b331:	83 c4 10             	add    esp,0x10
c001b334:	8b 1d 50 cb 02 c0    	mov    ebx,DWORD PTR ds:0xc002cb50
c001b33a:	83 ec 0c             	sub    esp,0xc
c001b33d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001b341:	e8 4a ff ff ff       	call   c001b290 <RTC::get_update_in_progress_flag()>
c001b346:	83 c4 10             	add    esp,0x10
c001b349:	84 c0                	test   al,al
c001b34b:	74 0e                	je     c001b35b <RTC::completeRTCRefresh()+0xb7>
c001b34d:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c001b353:	3b 05 50 cb 02 c0    	cmp    eax,DWORD PTR ds:0xc002cb50
c001b359:	73 df                	jae    c001b33a <RTC::completeRTCRefresh()+0x96>
c001b35b:	83 ec 0c             	sub    esp,0xc
c001b35e:	6a 00                	push   0x0
c001b360:	e8 24 da ff ff       	call   c0018d89 <x86ReadCMOS(unsigned char)>
c001b365:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c001b36c:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001b370:	e8 14 da ff ff       	call   c0018d89 <x86ReadCMOS(unsigned char)>
c001b375:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001b37c:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001b380:	e8 04 da ff ff       	call   c0018d89 <x86ReadCMOS(unsigned char)>
c001b385:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001b38c:	88 c3                	mov    bl,al
c001b38e:	e8 f6 d9 ff ff       	call   c0018d89 <x86ReadCMOS(unsigned char)>
c001b393:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001b39a:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001b39e:	e8 e6 d9 ff ff       	call   c0018d89 <x86ReadCMOS(unsigned char)>
c001b3a3:	c7 04 24 09 00 00 00 	mov    DWORD PTR [esp],0x9
c001b3aa:	89 c6                	mov    esi,eax
c001b3ac:	e8 d8 d9 ff ff       	call   c0018d89 <x86ReadCMOS(unsigned char)>
c001b3b1:	89 f9                	mov    ecx,edi
c001b3b3:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001b3b7:	83 c4 10             	add    esp,0x10
c001b3ba:	0f b6 e8             	movzx  ebp,al
c001b3bd:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b3c2:	38 4c 24 08          	cmp    BYTE PTR [esp+0x8],cl
c001b3c6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001b3ca:	74 27                	je     c001b3f3 <RTC::completeRTCRefresh()+0x14f>
c001b3cc:	89 6c 24 24          	mov    DWORD PTR [esp+0x24],ebp
c001b3d0:	89 f0                	mov    eax,esi
c001b3d2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001b3d6:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c001b3da:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001b3de:	88 5c 24 1c          	mov    BYTE PTR [esp+0x1c],bl
c001b3e2:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c001b3e6:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001b3ea:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001b3ee:	e9 41 ff ff ff       	jmp    c001b334 <RTC::completeRTCRefresh()+0x90>
c001b3f3:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b3f8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001b3fc:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001b400:	3a 44 24 18          	cmp    al,BYTE PTR [esp+0x18]
c001b404:	75 c6                	jne    c001b3cc <RTC::completeRTCRefresh()+0x128>
c001b406:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001b40b:	89 f1                	mov    ecx,esi
c001b40d:	0f b6 fb             	movzx  edi,bl
c001b410:	3a 5c 24 1c          	cmp    bl,BYTE PTR [esp+0x1c]
c001b414:	0f b6 c9             	movzx  ecx,cl
c001b417:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c001b41b:	89 f1                	mov    ecx,esi
c001b41d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b421:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001b425:	0f 94 c2             	sete   dl
c001b428:	3a 44 24 22          	cmp    al,BYTE PTR [esp+0x22]
c001b42c:	0f 94 c0             	sete   al
c001b42f:	21 d0                	and    eax,edx
c001b431:	31 d2                	xor    edx,edx
c001b433:	3a 4c 24 23          	cmp    cl,BYTE PTR [esp+0x23]
c001b437:	0f 94 c2             	sete   dl
c001b43a:	85 c2                	test   edx,eax
c001b43c:	74 8e                	je     c001b3cc <RTC::completeRTCRefresh()+0x128>
c001b43e:	39 6c 24 24          	cmp    DWORD PTR [esp+0x24],ebp
c001b442:	75 88                	jne    c001b3cc <RTC::completeRTCRefresh()+0x128>
c001b444:	83 ec 0c             	sub    esp,0xc
c001b447:	6a 0b                	push   0xb
c001b449:	e8 3b d9 ff ff       	call   c0018d89 <x86ReadCMOS(unsigned char)>
c001b44e:	83 c4 10             	add    esp,0x10
c001b451:	a8 04                	test   al,0x4
c001b453:	75 7a                	jne    c001b4cf <RTC::completeRTCRefresh()+0x22b>
c001b455:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b459:	c1 ef 04             	shr    edi,0x4
c001b45c:	83 e6 0f             	and    esi,0xf
c001b45f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001b463:	c1 ed 04             	shr    ebp,0x4
c001b466:	6b ed 0a             	imul   ebp,ebp,0xa
c001b469:	c1 ea 04             	shr    edx,0x4
c001b46c:	6b d2 0a             	imul   edx,edx,0xa
c001b46f:	83 e1 0f             	and    ecx,0xf
c001b472:	01 d1                	add    ecx,edx
c001b474:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001b478:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c001b47c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001b480:	c1 ea 04             	shr    edx,0x4
c001b483:	6b d2 0a             	imul   edx,edx,0xa
c001b486:	83 e1 0f             	and    ecx,0xf
c001b489:	01 d1                	add    ecx,edx
c001b48b:	89 fa                	mov    edx,edi
c001b48d:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c001b491:	83 e2 07             	and    edx,0x7
c001b494:	89 d9                	mov    ecx,ebx
c001b496:	6b d2 0a             	imul   edx,edx,0xa
c001b499:	83 e1 0f             	and    ecx,0xf
c001b49c:	83 e3 80             	and    ebx,0xffffff80
c001b49f:	01 d1                	add    ecx,edx
c001b4a1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b4a5:	09 cb                	or     ebx,ecx
c001b4a7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b4ab:	c1 ea 04             	shr    edx,0x4
c001b4ae:	6b d2 0a             	imul   edx,edx,0xa
c001b4b1:	83 e1 0f             	and    ecx,0xf
c001b4b4:	01 d1                	add    ecx,edx
c001b4b6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b4ba:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c001b4be:	c1 ea 04             	shr    edx,0x4
c001b4c1:	6b d2 0a             	imul   edx,edx,0xa
c001b4c4:	01 d6                	add    esi,edx
c001b4c6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b4ca:	83 e2 0f             	and    edx,0xf
c001b4cd:	01 d5                	add    ebp,edx
c001b4cf:	a8 02                	test   al,0x2
c001b4d1:	75 15                	jne    c001b4e8 <RTC::completeRTCRefresh()+0x244>
c001b4d3:	f6 c3 80             	test   bl,0x80
c001b4d6:	74 10                	je     c001b4e8 <RTC::completeRTCRefresh()+0x244>
c001b4d8:	83 e3 7f             	and    ebx,0x7f
c001b4db:	b9 18 00 00 00       	mov    ecx,0x18
c001b4e0:	8d 43 0c             	lea    eax,[ebx+0xc]
c001b4e3:	99                   	cdq    
c001b4e4:	f7 f9                	idiv   ecx
c001b4e6:	88 d3                	mov    bl,dl
c001b4e8:	8d bd 6c 07 00 00    	lea    edi,[ebp+0x76c]
c001b4ee:	81 ff b1 07 00 00    	cmp    edi,0x7b1
c001b4f4:	77 06                	ja     c001b4fc <RTC::completeRTCRefresh()+0x258>
c001b4f6:	8d bd d0 07 00 00    	lea    edi,[ebp+0x7d0]
c001b4fc:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b501:	31 c9                	xor    ecx,ecx
c001b503:	31 d2                	xor    edx,edx
c001b505:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c001b509:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c001b50d:	89 cd                	mov    ebp,ecx
c001b50f:	8a 74 24 08          	mov    dh,BYTE PTR [esp+0x8]
c001b513:	c1 e7 10             	shl    edi,0x10
c001b516:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c001b51c:	c1 e0 10             	shl    eax,0x10
c001b51f:	09 c5                	or     ebp,eax
c001b521:	89 e9                	mov    ecx,ebp
c001b523:	0f b7 c2             	movzx  eax,dx
c001b526:	8a 6c 24 0c          	mov    ch,BYTE PTR [esp+0xc]
c001b52a:	09 f8                	or     eax,edi
c001b52c:	89 c2                	mov    edx,eax
c001b52e:	50                   	push   eax
c001b52f:	50                   	push   eax
c001b530:	88 d9                	mov    cl,bl
c001b532:	51                   	push   ecx
c001b533:	52                   	push   edx
c001b534:	e8 eb dc fe ff       	call   c0009224 <KeDatetimeToSeconds(datetime_t)>
c001b539:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c001b53d:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c001b543:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c001b549:	83 c4 4c             	add    esp,0x4c
c001b54c:	5b                   	pop    ebx
c001b54d:	5e                   	pop    esi
c001b54e:	5f                   	pop    edi
c001b54f:	5d                   	pop    ebp
c001b550:	c3                   	ret    
c001b551:	90                   	nop

c001b552 <RTC::setTimeInDatetimeUTC(datetime_t)>:
c001b552:	55                   	push   ebp
c001b553:	57                   	push   edi
c001b554:	56                   	push   esi
c001b555:	53                   	push   ebx
c001b556:	83 ec 34             	sub    esp,0x34
c001b559:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c001b55d:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001b561:	6a 00                	push   0x0
c001b563:	6a 00                	push   0x0
c001b565:	e8 73 d8 ff ff       	call   c0018ddd <x86WriteCMOS(unsigned char, unsigned char)>
c001b56a:	5d                   	pop    ebp
c001b56b:	89 fb                	mov    ebx,edi
c001b56d:	58                   	pop    eax
c001b56e:	6a 00                	push   0x0
c001b570:	6a 02                	push   0x2
c001b572:	e8 66 d8 ff ff       	call   c0018ddd <x86WriteCMOS(unsigned char, unsigned char)>
c001b577:	89 f8                	mov    eax,edi
c001b579:	89 f9                	mov    ecx,edi
c001b57b:	0f b6 c4             	movzx  eax,ah
c001b57e:	31 d2                	xor    edx,edx
c001b580:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b584:	c1 e9 10             	shr    ecx,0x10
c001b587:	89 f0                	mov    eax,esi
c001b589:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001b58d:	89 f0                	mov    eax,esi
c001b58f:	88 4c 24 1c          	mov    BYTE PTR [esp+0x1c],cl
c001b593:	0f b6 c4             	movzx  eax,ah
c001b596:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b59a:	89 f0                	mov    eax,esi
c001b59c:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c001b5a0:	c1 e8 10             	shr    eax,0x10
c001b5a3:	b9 64 00 00 00       	mov    ecx,0x64
c001b5a8:	f7 f1                	div    ecx
c001b5aa:	c7 04 24 0b 00 00 00 	mov    DWORD PTR [esp],0xb
c001b5b1:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001b5b5:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001b5b9:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001b5bd:	e8 c7 d7 ff ff       	call   c0018d89 <x86ReadCMOS(unsigned char)>
c001b5c2:	83 c4 10             	add    esp,0x10
c001b5c5:	a8 04                	test   al,0x4
c001b5c7:	89 c5                	mov    ebp,eax
c001b5c9:	75 6e                	jne    c001b639 <RTC::setTimeInDatetimeUTC(datetime_t)+0xe7>
c001b5cb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001b5cf:	31 d2                	xor    edx,edx
c001b5d1:	0f b6 c1             	movzx  eax,cl
c001b5d4:	b9 0a 00 00 00       	mov    ecx,0xa
c001b5d9:	f7 f1                	div    ecx
c001b5db:	c1 e0 04             	shl    eax,0x4
c001b5de:	09 d0                	or     eax,edx
c001b5e0:	31 d2                	xor    edx,edx
c001b5e2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b5e6:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001b5eb:	f7 f1                	div    ecx
c001b5ed:	c1 e0 04             	shl    eax,0x4
c001b5f0:	09 d0                	or     eax,edx
c001b5f2:	31 d2                	xor    edx,edx
c001b5f4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b5f8:	0f b6 c3             	movzx  eax,bl
c001b5fb:	f7 f1                	div    ecx
c001b5fd:	c1 e0 04             	shl    eax,0x4
c001b600:	09 d0                	or     eax,edx
c001b602:	31 d2                	xor    edx,edx
c001b604:	89 c3                	mov    ebx,eax
c001b606:	89 f0                	mov    eax,esi
c001b608:	0f b6 c0             	movzx  eax,al
c001b60b:	f7 f1                	div    ecx
c001b60d:	c1 e0 04             	shl    eax,0x4
c001b610:	09 d0                	or     eax,edx
c001b612:	31 d2                	xor    edx,edx
c001b614:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001b618:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b61d:	f7 f1                	div    ecx
c001b61f:	c1 e0 04             	shl    eax,0x4
c001b622:	09 d0                	or     eax,edx
c001b624:	31 d2                	xor    edx,edx
c001b626:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b62a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b62e:	f7 f1                	div    ecx
c001b630:	c1 e0 04             	shl    eax,0x4
c001b633:	09 d0                	or     eax,edx
c001b635:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b639:	83 e5 02             	and    ebp,0x2
c001b63c:	75 1e                	jne    c001b65c <RTC::setTimeInDatetimeUTC(datetime_t)+0x10a>
c001b63e:	0f b6 c3             	movzx  eax,bl
c001b641:	83 f8 0b             	cmp    eax,0xb
c001b644:	76 10                	jbe    c001b656 <RTC::setTimeInDatetimeUTC(datetime_t)+0x104>
c001b646:	8d 53 f4             	lea    edx,[ebx-0xc]
c001b649:	84 d2                	test   dl,dl
c001b64b:	88 d3                	mov    bl,dl
c001b64d:	75 02                	jne    c001b651 <RTC::setTimeInDatetimeUTC(datetime_t)+0xff>
c001b64f:	b3 0c                	mov    bl,0xc
c001b651:	83 cb 80             	or     ebx,0xffffff80
c001b654:	eb 06                	jmp    c001b65c <RTC::setTimeInDatetimeUTC(datetime_t)+0x10a>
c001b656:	85 c0                	test   eax,eax
c001b658:	75 02                	jne    c001b65c <RTC::setTimeInDatetimeUTC(datetime_t)+0x10a>
c001b65a:	b3 0c                	mov    bl,0xc
c001b65c:	50                   	push   eax
c001b65d:	0f b6 db             	movzx  ebx,bl
c001b660:	50                   	push   eax
c001b661:	0f b6 54 24 14       	movzx  edx,BYTE PTR [esp+0x14]
c001b666:	52                   	push   edx
c001b667:	6a 00                	push   0x0
c001b669:	e8 6f d7 ff ff       	call   c0018ddd <x86WriteCMOS(unsigned char, unsigned char)>
c001b66e:	5a                   	pop    edx
c001b66f:	59                   	pop    ecx
c001b670:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b675:	50                   	push   eax
c001b676:	6a 02                	push   0x2
c001b678:	e8 60 d7 ff ff       	call   c0018ddd <x86WriteCMOS(unsigned char, unsigned char)>
c001b67d:	5e                   	pop    esi
c001b67e:	5f                   	pop    edi
c001b67f:	53                   	push   ebx
c001b680:	6a 04                	push   0x4
c001b682:	e8 56 d7 ff ff       	call   c0018ddd <x86WriteCMOS(unsigned char, unsigned char)>
c001b687:	5d                   	pop    ebp
c001b688:	58                   	pop    eax
c001b689:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c001b68e:	52                   	push   edx
c001b68f:	6a 07                	push   0x7
c001b691:	e8 47 d7 ff ff       	call   c0018ddd <x86WriteCMOS(unsigned char, unsigned char)>
c001b696:	58                   	pop    eax
c001b697:	5a                   	pop    edx
c001b698:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001b69d:	50                   	push   eax
c001b69e:	6a 08                	push   0x8
c001b6a0:	e8 38 d7 ff ff       	call   c0018ddd <x86WriteCMOS(unsigned char, unsigned char)>
c001b6a5:	59                   	pop    ecx
c001b6a6:	5b                   	pop    ebx
c001b6a7:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c001b6ac:	55                   	push   ebp
c001b6ad:	6a 09                	push   0x9
c001b6af:	e8 29 d7 ff ff       	call   c0018ddd <x86WriteCMOS(unsigned char, unsigned char)>
c001b6b4:	5e                   	pop    esi
c001b6b5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001b6b9:	e8 e6 fb ff ff       	call   c001b2a4 <RTC::completeRTCRefresh()>
c001b6be:	83 c4 3c             	add    esp,0x3c
c001b6c1:	b0 01                	mov    al,0x1
c001b6c3:	5b                   	pop    ebx
c001b6c4:	5e                   	pop    esi
c001b6c5:	5f                   	pop    edi
c001b6c6:	5d                   	pop    ebp
c001b6c7:	c3                   	ret    

c001b6c8 <rtcIRQHandler(regs*, void*)>:
c001b6c8:	53                   	push   ebx
c001b6c9:	83 ec 14             	sub    esp,0x14
c001b6cc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b6d0:	6a 0c                	push   0xc
c001b6d2:	e8 b2 d6 ff ff       	call   c0018d89 <x86ReadCMOS(unsigned char)>
c001b6d7:	83 c4 10             	add    esp,0x10
c001b6da:	a8 80                	test   al,0x80
c001b6dc:	74 24                	je     c001b702 <rtcIRQHandler(regs*, void*)+0x3a>
c001b6de:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c001b6e5:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c001b6ec:	66 ff 05 78 fb 02 c0 	inc    WORD PTR ds:0xc002fb78
c001b6f3:	75 0d                	jne    c001b702 <rtcIRQHandler(regs*, void*)+0x3a>
c001b6f5:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001b6f9:	83 c4 08             	add    esp,0x8
c001b6fc:	5b                   	pop    ebx
c001b6fd:	e9 a2 fb ff ff       	jmp    c001b2a4 <RTC::completeRTCRefresh()>
c001b702:	83 c4 08             	add    esp,0x8
c001b705:	5b                   	pop    ebx
c001b706:	c3                   	ret    
c001b707:	90                   	nop

c001b708 <RTC::RTC()>:
c001b708:	83 ec 1c             	sub    esp,0x1c
c001b70b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b70f:	83 ec 08             	sub    esp,0x8
c001b712:	68 af 5d 02 c0       	push   0xc0025daf
c001b717:	50                   	push   eax
c001b718:	e8 99 d9 fe ff       	call   c00090b6 <Clock::Clock(char const*)>
c001b71d:	83 c4 10             	add    esp,0x10
c001b720:	ba cc 5d 02 c0       	mov    edx,0xc0025dcc
c001b725:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b729:	89 10                	mov    DWORD PTR [eax],edx
c001b72b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b72f:	83 ec 0c             	sub    esp,0xc
c001b732:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b736:	6a 01                	push   0x1
c001b738:	68 c8 b6 01 c0       	push   0xc001b6c8
c001b73d:	6a 08                	push   0x8
c001b73f:	50                   	push   eax
c001b740:	e8 5d e2 fe ff       	call   c00099a2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b745:	83 c4 20             	add    esp,0x20
c001b748:	89 c2                	mov    edx,eax
c001b74a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b74e:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001b754:	fa                   	cli    
c001b755:	a1 50 fa 02 c0       	mov    eax,ds:0xc002fa50
c001b75a:	83 c0 01             	add    eax,0x1
c001b75d:	a3 50 fa 02 c0       	mov    ds:0xc002fa50,eax
c001b762:	83 ec 0c             	sub    esp,0xc
c001b765:	6a 0b                	push   0xb
c001b767:	e8 1d d6 ff ff       	call   c0018d89 <x86ReadCMOS(unsigned char)>
c001b76c:	83 c4 10             	add    esp,0x10
c001b76f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001b773:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001b777:	83 c8 10             	or     eax,0x10
c001b77a:	0f b6 c0             	movzx  eax,al
c001b77d:	83 ec 08             	sub    esp,0x8
c001b780:	50                   	push   eax
c001b781:	6a 0b                	push   0xb
c001b783:	e8 55 d6 ff ff       	call   c0018ddd <x86WriteCMOS(unsigned char, unsigned char)>
c001b788:	83 c4 10             	add    esp,0x10
c001b78b:	83 ec 0c             	sub    esp,0xc
c001b78e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b792:	e8 0d fb ff ff       	call   c001b2a4 <RTC::completeRTCRefresh()>
c001b797:	83 c4 10             	add    esp,0x10
c001b79a:	f0 83 2d 50 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa50,0x1
c001b7a2:	a1 50 fa 02 c0       	mov    eax,ds:0xc002fa50
c001b7a7:	85 c0                	test   eax,eax
c001b7a9:	75 01                	jne    c001b7ac <RTC::RTC()+0xa4>
c001b7ab:	fb                   	sti    
c001b7ac:	90                   	nop
c001b7ad:	83 c4 1c             	add    esp,0x1c
c001b7b0:	c3                   	ret    
c001b7b1:	66 90                	xchg   ax,ax
c001b7b3:	90                   	nop

c001b7b4 <HalConsoleScroll(int, int)>:
c001b7b4:	83 ec 10             	sub    esp,0x10
c001b7b7:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c001b7bf:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c001b7c7:	90                   	nop
c001b7c8:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c001b7cd:	0f 8f e1 00 00 00    	jg     c001b8b4 <HalConsoleScroll(int, int)+0x100>
c001b7d3:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001b7db:	90                   	nop
c001b7dc:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c001b7e4:	0f 8f be 00 00 00    	jg     c001b8a8 <HalConsoleScroll(int, int)+0xf4>
c001b7ea:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b7ee:	89 d0                	mov    eax,edx
c001b7f0:	c1 e0 02             	shl    eax,0x2
c001b7f3:	01 d0                	add    eax,edx
c001b7f5:	c1 e0 05             	shl    eax,0x5
c001b7f8:	89 c2                	mov    edx,eax
c001b7fa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b7fe:	01 d0                	add    eax,edx
c001b800:	89 c2                	mov    edx,eax
c001b802:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b806:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001b809:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b80d:	89 d0                	mov    eax,edx
c001b80f:	c1 e0 02             	shl    eax,0x2
c001b812:	01 d0                	add    eax,edx
c001b814:	c1 e0 05             	shl    eax,0x5
c001b817:	89 c2                	mov    edx,eax
c001b819:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b81d:	01 d0                	add    eax,edx
c001b81f:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c001b825:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b829:	01 d0                	add    eax,edx
c001b82b:	8a 11                	mov    dl,BYTE PTR [ecx]
c001b82d:	88 10                	mov    BYTE PTR [eax],dl
c001b82f:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c001b834:	75 66                	jne    c001b89c <HalConsoleScroll(int, int)+0xe8>
c001b836:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b83a:	83 e0 01             	and    eax,0x1
c001b83d:	74 39                	je     c001b878 <HalConsoleScroll(int, int)+0xc4>
c001b83f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b843:	83 e0 0f             	and    eax,0xf
c001b846:	88 c2                	mov    dl,al
c001b848:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b84c:	c1 e0 04             	shl    eax,0x4
c001b84f:	09 d0                	or     eax,edx
c001b851:	88 c1                	mov    cl,al
c001b853:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b857:	89 d0                	mov    eax,edx
c001b859:	c1 e0 02             	shl    eax,0x2
c001b85c:	01 d0                	add    eax,edx
c001b85e:	c1 e0 05             	shl    eax,0x5
c001b861:	89 c2                	mov    edx,eax
c001b863:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b867:	01 d0                	add    eax,edx
c001b869:	89 c2                	mov    edx,eax
c001b86b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b86f:	01 d0                	add    eax,edx
c001b871:	88 ca                	mov    dl,cl
c001b873:	88 10                	mov    BYTE PTR [eax],dl
c001b875:	eb 25                	jmp    c001b89c <HalConsoleScroll(int, int)+0xe8>
c001b877:	90                   	nop
c001b878:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b87c:	89 d0                	mov    eax,edx
c001b87e:	c1 e0 02             	shl    eax,0x2
c001b881:	01 d0                	add    eax,edx
c001b883:	c1 e0 05             	shl    eax,0x5
c001b886:	89 c2                	mov    edx,eax
c001b888:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b88c:	01 d0                	add    eax,edx
c001b88e:	89 c2                	mov    edx,eax
c001b890:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b894:	01 d0                	add    eax,edx
c001b896:	c6 00 20             	mov    BYTE PTR [eax],0x20
c001b899:	8d 76 00             	lea    esi,[esi+0x0]
c001b89c:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c001b8a1:	e9 36 ff ff ff       	jmp    c001b7dc <HalConsoleScroll(int, int)+0x28>
c001b8a6:	66 90                	xchg   ax,ax
c001b8a8:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001b8ad:	e9 16 ff ff ff       	jmp    c001b7c8 <HalConsoleScroll(int, int)+0x14>
c001b8b2:	66 90                	xchg   ax,ax
c001b8b4:	90                   	nop
c001b8b5:	83 c4 10             	add    esp,0x10
c001b8b8:	c3                   	ret    
c001b8b9:	8d 76 00             	lea    esi,[esi+0x0]

c001b8bc <HalConsoleWriteCharacter(char, int, int, int, int)>:
c001b8bc:	83 ec 14             	sub    esp,0x14
c001b8bf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b8c3:	88 04 24             	mov    BYTE PTR [esp],al
c001b8c6:	8a 04 24             	mov    al,BYTE PTR [esp]
c001b8c9:	0f b6 c0             	movzx  eax,al
c001b8cc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b8d0:	89 d1                	mov    ecx,edx
c001b8d2:	83 e1 0f             	and    ecx,0xf
c001b8d5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001b8d9:	c1 e2 04             	shl    edx,0x4
c001b8dc:	0f b6 d2             	movzx  edx,dl
c001b8df:	09 ca                	or     edx,ecx
c001b8e1:	c1 e2 08             	shl    edx,0x8
c001b8e4:	09 d0                	or     eax,edx
c001b8e6:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c001b8eb:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c001b8f3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b8f7:	89 d0                	mov    eax,edx
c001b8f9:	c1 e0 02             	shl    eax,0x2
c001b8fc:	01 d0                	add    eax,edx
c001b8fe:	c1 e0 04             	shl    eax,0x4
c001b901:	89 c2                	mov    edx,eax
c001b903:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b907:	01 d0                	add    eax,edx
c001b909:	d1 e0                	shl    eax,1
c001b90b:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c001b90f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b913:	66 8b 54 24 12       	mov    dx,WORD PTR [esp+0x12]
c001b918:	66 89 10             	mov    WORD PTR [eax],dx
c001b91b:	90                   	nop
c001b91c:	83 c4 14             	add    esp,0x14
c001b91f:	c3                   	ret    

c001b920 <HalConsoleCursorUpdate(int, int)>:
c001b920:	83 ec 20             	sub    esp,0x20
c001b923:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b927:	89 c2                	mov    edx,eax
c001b929:	c1 e2 02             	shl    edx,0x2
c001b92c:	01 d0                	add    eax,edx
c001b92e:	c1 e0 04             	shl    eax,0x4
c001b931:	89 c2                	mov    edx,eax
c001b933:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b937:	01 d0                	add    eax,edx
c001b939:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c001b93e:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c001b945:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c001b94a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001b94e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b952:	ee                   	out    dx,al
c001b953:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001b958:	0f b6 c0             	movzx  eax,al
c001b95b:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c001b962:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c001b966:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c001b96a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b96e:	ee                   	out    dx,al
c001b96f:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c001b976:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c001b97b:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c001b97f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b983:	ee                   	out    dx,al
c001b984:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c001b989:	c1 e8 08             	shr    eax,0x8
c001b98c:	0f b6 c0             	movzx  eax,al
c001b98f:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c001b996:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001b99a:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c001b99e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b9a2:	ee                   	out    dx,al
c001b9a3:	90                   	nop
c001b9a4:	83 c4 20             	add    esp,0x20
c001b9a7:	c3                   	ret    

c001b9a8 <FAT::getName()>:
c001b9a8:	b8 00 5e 02 c0       	mov    eax,0xc0025e00
c001b9ad:	c3                   	ret    
c001b9ae:	66 90                	xchg   ax,ax

c001b9b0 <FAT::tell(void*, unsigned long long*)>:
c001b9b0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001b9b5:	75 09                	jne    c001b9c0 <FAT::tell(void*, unsigned long long*)+0x10>
c001b9b7:	b8 04 00 00 00       	mov    eax,0x4
c001b9bc:	c3                   	ret    
c001b9bd:	8d 76 00             	lea    esi,[esi+0x0]
c001b9c0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001b9c5:	75 09                	jne    c001b9d0 <FAT::tell(void*, unsigned long long*)+0x20>
c001b9c7:	b8 04 00 00 00       	mov    eax,0x4
c001b9cc:	c3                   	ret    
c001b9cd:	8d 76 00             	lea    esi,[esi+0x0]
c001b9d0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b9d4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001b9d7:	ba 00 00 00 00       	mov    edx,0x0
c001b9dc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001b9e0:	89 01                	mov    DWORD PTR [ecx],eax
c001b9e2:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001b9e5:	b8 00 00 00 00       	mov    eax,0x0
c001b9ea:	c3                   	ret    
c001b9eb:	90                   	nop

c001b9ec <FAT::stat(void*, unsigned long long*)>:
c001b9ec:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001b9f1:	75 09                	jne    c001b9fc <FAT::stat(void*, unsigned long long*)+0x10>
c001b9f3:	b8 04 00 00 00       	mov    eax,0x4
c001b9f8:	c3                   	ret    
c001b9f9:	8d 76 00             	lea    esi,[esi+0x0]
c001b9fc:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001ba01:	75 09                	jne    c001ba0c <FAT::stat(void*, unsigned long long*)+0x20>
c001ba03:	b8 04 00 00 00       	mov    eax,0x4
c001ba08:	c3                   	ret    
c001ba09:	8d 76 00             	lea    esi,[esi+0x0]
c001ba0c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ba10:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001ba13:	ba 00 00 00 00       	mov    edx,0x0
c001ba18:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ba1c:	89 01                	mov    DWORD PTR [ecx],eax
c001ba1e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001ba21:	b8 00 00 00 00       	mov    eax,0x0
c001ba26:	c3                   	ret    
c001ba27:	90                   	nop

c001ba28 <FAT::~FAT()>:
c001ba28:	83 ec 0c             	sub    esp,0xc
c001ba2b:	ba 4c 5e 02 c0       	mov    edx,0xc0025e4c
c001ba30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba34:	89 10                	mov    DWORD PTR [eax],edx
c001ba36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba3a:	83 ec 0c             	sub    esp,0xc
c001ba3d:	50                   	push   eax
c001ba3e:	e8 93 c3 fe ff       	call   c0007dd6 <Filesystem::~Filesystem()>
c001ba43:	83 c4 10             	add    esp,0x10
c001ba46:	90                   	nop
c001ba47:	83 c4 0c             	add    esp,0xc
c001ba4a:	c3                   	ret    
c001ba4b:	90                   	nop

c001ba4c <FAT::~FAT()>:
c001ba4c:	83 ec 0c             	sub    esp,0xc
c001ba4f:	83 ec 0c             	sub    esp,0xc
c001ba52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ba56:	e8 cd ff ff ff       	call   c001ba28 <FAT::~FAT()>
c001ba5b:	83 c4 10             	add    esp,0x10
c001ba5e:	83 ec 08             	sub    esp,0x8
c001ba61:	6a 08                	push   0x8
c001ba63:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ba67:	e8 89 18 ff ff       	call   c000d2f5 <operator delete(void*, unsigned long)>
c001ba6c:	83 c4 10             	add    esp,0x10
c001ba6f:	83 c4 0c             	add    esp,0xc
c001ba72:	c3                   	ret    
c001ba73:	90                   	nop

c001ba74 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001ba74:	83 ec 1c             	sub    esp,0x1c
c001ba77:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001ba7e:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001ba83:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ba87:	8b 04 85 a0 fb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0460]
c001ba8e:	83 f8 ff             	cmp    eax,0xffffffff
c001ba91:	75 35                	jne    c001bac8 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c001ba93:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001ba97:	88 c2                	mov    dl,al
c001ba99:	a1 80 fb 02 c0       	mov    eax,ds:0xc002fb80
c001ba9e:	01 d0                	add    eax,edx
c001baa0:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001baa4:	8b 15 80 fb 02 c0    	mov    edx,DWORD PTR ds:0xc002fb80
c001baaa:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001baae:	89 14 85 a0 fb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0460],edx
c001bab5:	a1 80 fb 02 c0       	mov    eax,ds:0xc002fb80
c001baba:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001babe:	89 14 85 20 fc 02 c0 	mov    DWORD PTR [eax*4-0x3ffd03e0],edx
c001bac5:	eb 19                	jmp    c001bae0 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c001bac7:	90                   	nop
c001bac8:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001bacc:	88 c2                	mov    dl,al
c001bace:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001bad2:	8b 04 85 a0 fb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0460]
c001bad9:	01 d0                	add    eax,edx
c001badb:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001badf:	90                   	nop
c001bae0:	83 ec 04             	sub    esp,0x4
c001bae3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001bae7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001baeb:	8d 44 24 15          	lea    eax,[esp+0x15]
c001baef:	50                   	push   eax
c001baf0:	e8 df 96 fe ff       	call   c00051d4 <f_getlabel>
c001baf5:	83 c4 10             	add    esp,0x10
c001baf8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bafc:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001bb01:	75 09                	jne    c001bb0c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c001bb03:	b8 00 00 00 00       	mov    eax,0x0
c001bb08:	eb 0a                	jmp    c001bb14 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c001bb0a:	66 90                	xchg   ax,ax
c001bb0c:	b8 01 00 00 00       	mov    eax,0x1
c001bb11:	8d 76 00             	lea    esi,[esi+0x0]
c001bb14:	83 c4 1c             	add    esp,0x1c
c001bb17:	c3                   	ret    

c001bb18 <FAT::setlabel(LogicalDisk*, int, char*)>:
c001bb18:	53                   	push   ebx
c001bb19:	83 ec 58             	sub    esp,0x58
c001bb1c:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001bb24:	8d 54 24 10          	lea    edx,[esp+0x10]
c001bb28:	b9 00 00 00 00       	mov    ecx,0x0
c001bb2d:	b8 3c 00 00 00       	mov    eax,0x3c
c001bb32:	83 e0 f8             	and    eax,0xfffffff8
c001bb35:	89 c3                	mov    ebx,eax
c001bb37:	b8 00 00 00 00       	mov    eax,0x0
c001bb3c:	89 4c 04 10          	mov    DWORD PTR [esp+eax*1+0x10],ecx
c001bb40:	89 4c 04 14          	mov    DWORD PTR [esp+eax*1+0x14],ecx
c001bb44:	83 c0 08             	add    eax,0x8
c001bb47:	39 d8                	cmp    eax,ebx
c001bb49:	72 f1                	jb     c001bb3c <FAT::setlabel(LogicalDisk*, int, char*)+0x24>
c001bb4b:	01 c2                	add    edx,eax
c001bb4d:	89 0a                	mov    DWORD PTR [edx],ecx
c001bb4f:	83 c2 04             	add    edx,0x4
c001bb52:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001bb56:	8b 04 85 a0 fb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0460]
c001bb5d:	83 f8 ff             	cmp    eax,0xffffffff
c001bb60:	75 36                	jne    c001bb98 <FAT::setlabel(LogicalDisk*, int, char*)+0x80>
c001bb62:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001bb66:	88 c2                	mov    dl,al
c001bb68:	a1 80 fb 02 c0       	mov    eax,ds:0xc002fb80
c001bb6d:	01 d0                	add    eax,edx
c001bb6f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001bb73:	8b 15 80 fb 02 c0    	mov    edx,DWORD PTR ds:0xc002fb80
c001bb79:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001bb7d:	89 14 85 a0 fb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0460],edx
c001bb84:	a1 80 fb 02 c0       	mov    eax,ds:0xc002fb80
c001bb89:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001bb8d:	89 14 85 20 fc 02 c0 	mov    DWORD PTR [eax*4-0x3ffd03e0],edx
c001bb94:	eb 1a                	jmp    c001bbb0 <FAT::setlabel(LogicalDisk*, int, char*)+0x98>
c001bb96:	66 90                	xchg   ax,ax
c001bb98:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001bb9c:	88 c2                	mov    dl,al
c001bb9e:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001bba2:	8b 04 85 a0 fb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0460]
c001bba9:	01 d0                	add    eax,edx
c001bbab:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001bbaf:	90                   	nop
c001bbb0:	83 ec 08             	sub    esp,0x8
c001bbb3:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001bbb7:	8d 44 24 18          	lea    eax,[esp+0x18]
c001bbbb:	50                   	push   eax
c001bbbc:	e8 af 4c fe ff       	call   c0000870 <strcat>
c001bbc1:	83 c4 10             	add    esp,0x10
c001bbc4:	83 ec 0c             	sub    esp,0xc
c001bbc7:	8d 44 24 18          	lea    eax,[esp+0x18]
c001bbcb:	50                   	push   eax
c001bbcc:	e8 57 97 fe ff       	call   c0005328 <f_setlabel>
c001bbd1:	83 c4 10             	add    esp,0x10
c001bbd4:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001bbd8:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c001bbdd:	75 09                	jne    c001bbe8 <FAT::setlabel(LogicalDisk*, int, char*)+0xd0>
c001bbdf:	b8 00 00 00 00       	mov    eax,0x0
c001bbe4:	eb 0a                	jmp    c001bbf0 <FAT::setlabel(LogicalDisk*, int, char*)+0xd8>
c001bbe6:	66 90                	xchg   ax,ax
c001bbe8:	b8 01 00 00 00       	mov    eax,0x1
c001bbed:	8d 76 00             	lea    esi,[esi+0x0]
c001bbf0:	83 c4 58             	add    esp,0x58
c001bbf3:	5b                   	pop    ebx
c001bbf4:	c3                   	ret    
c001bbf5:	90                   	nop
c001bbf6:	66 90                	xchg   ax,ax

c001bbf8 <FAT::format(LogicalDisk*, int, char const*, int)>:
c001bbf8:	83 ec 2c             	sub    esp,0x2c
c001bbfb:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001bc03:	83 ec 08             	sub    esp,0x8
c001bc06:	68 24 5e 02 c0       	push   0xc0025e24
c001bc0b:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001bc0f:	e8 6c 4b fe ff       	call   c0000780 <strcmp>
c001bc14:	83 c4 10             	add    esp,0x10
c001bc17:	85 c0                	test   eax,eax
c001bc19:	0f 94 c0             	sete   al
c001bc1c:	0f b6 c0             	movzx  eax,al
c001bc1f:	85 c0                	test   eax,eax
c001bc21:	74 0d                	je     c001bc30 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c001bc23:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001bc2b:	e9 c0 00 00 00       	jmp    c001bcf0 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001bc30:	83 ec 08             	sub    esp,0x8
c001bc33:	68 16 5e 02 c0       	push   0xc0025e16
c001bc38:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001bc3c:	e8 3f 4b fe ff       	call   c0000780 <strcmp>
c001bc41:	83 c4 10             	add    esp,0x10
c001bc44:	85 c0                	test   eax,eax
c001bc46:	0f 94 c0             	sete   al
c001bc49:	0f b6 c0             	movzx  eax,al
c001bc4c:	85 c0                	test   eax,eax
c001bc4e:	74 10                	je     c001bc60 <FAT::format(LogicalDisk*, int, char const*, int)+0x68>
c001bc50:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001bc58:	e9 93 00 00 00       	jmp    c001bcf0 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001bc5d:	8d 76 00             	lea    esi,[esi+0x0]
c001bc60:	83 ec 08             	sub    esp,0x8
c001bc63:	68 1c 5e 02 c0       	push   0xc0025e1c
c001bc68:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001bc6c:	e8 0f 4b fe ff       	call   c0000780 <strcmp>
c001bc71:	83 c4 10             	add    esp,0x10
c001bc74:	85 c0                	test   eax,eax
c001bc76:	0f 94 c0             	sete   al
c001bc79:	0f b6 c0             	movzx  eax,al
c001bc7c:	85 c0                	test   eax,eax
c001bc7e:	74 0c                	je     c001bc8c <FAT::format(LogicalDisk*, int, char const*, int)+0x94>
c001bc80:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001bc88:	eb 66                	jmp    c001bcf0 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001bc8a:	66 90                	xchg   ax,ax
c001bc8c:	83 ec 08             	sub    esp,0x8
c001bc8f:	68 fc 29 02 c0       	push   0xc00229fc
c001bc94:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001bc98:	e8 e3 4a fe ff       	call   c0000780 <strcmp>
c001bc9d:	83 c4 10             	add    esp,0x10
c001bca0:	85 c0                	test   eax,eax
c001bca2:	0f 94 c0             	sete   al
c001bca5:	0f b6 c0             	movzx  eax,al
c001bca8:	85 c0                	test   eax,eax
c001bcaa:	74 0c                	je     c001bcb8 <FAT::format(LogicalDisk*, int, char const*, int)+0xc0>
c001bcac:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c001bcb4:	eb 3a                	jmp    c001bcf0 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001bcb6:	66 90                	xchg   ax,ax
c001bcb8:	83 ec 08             	sub    esp,0x8
c001bcbb:	68 22 5e 02 c0       	push   0xc0025e22
c001bcc0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001bcc4:	e8 b7 4a fe ff       	call   c0000780 <strcmp>
c001bcc9:	83 c4 10             	add    esp,0x10
c001bccc:	85 c0                	test   eax,eax
c001bcce:	0f 94 c0             	sete   al
c001bcd1:	0f b6 c0             	movzx  eax,al
c001bcd4:	85 c0                	test   eax,eax
c001bcd6:	74 0c                	je     c001bce4 <FAT::format(LogicalDisk*, int, char const*, int)+0xec>
c001bcd8:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c001bce0:	eb 0e                	jmp    c001bcf0 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001bce2:	66 90                	xchg   ax,ax
c001bce4:	b8 08 00 00 00       	mov    eax,0x8
c001bce9:	e9 ea 00 00 00       	jmp    c001bdd8 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c001bcee:	66 90                	xchg   ax,ax
c001bcf0:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001bcf7:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001bcfc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001bd00:	8b 04 85 a0 fb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0460]
c001bd07:	83 f8 ff             	cmp    eax,0xffffffff
c001bd0a:	75 34                	jne    c001bd40 <FAT::format(LogicalDisk*, int, char const*, int)+0x148>
c001bd0c:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001bd10:	88 c2                	mov    dl,al
c001bd12:	a1 80 fb 02 c0       	mov    eax,ds:0xc002fb80
c001bd17:	01 d0                	add    eax,edx
c001bd19:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001bd1d:	8b 15 80 fb 02 c0    	mov    edx,DWORD PTR ds:0xc002fb80
c001bd23:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001bd27:	89 14 85 a0 fb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0460],edx
c001bd2e:	a1 80 fb 02 c0       	mov    eax,ds:0xc002fb80
c001bd33:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001bd37:	89 14 85 20 fc 02 c0 	mov    DWORD PTR [eax*4-0x3ffd03e0],edx
c001bd3e:	eb 18                	jmp    c001bd58 <FAT::format(LogicalDisk*, int, char const*, int)+0x160>
c001bd40:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001bd44:	88 c2                	mov    dl,al
c001bd46:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001bd4a:	8b 04 85 a0 fb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0460]
c001bd51:	01 d0                	add    eax,edx
c001bd53:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001bd57:	90                   	nop
c001bd58:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001bd5c:	88 04 24             	mov    BYTE PTR [esp],al
c001bd5f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001bd63:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bd67:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001bd6f:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c001bd74:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001bd7c:	83 ec 0c             	sub    esp,0xc
c001bd7f:	68 00 20 00 00       	push   0x2000
c001bd84:	e8 f3 3d ff ff       	call   c000fb7c <malloc>
c001bd89:	83 c4 10             	add    esp,0x10
c001bd8c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001bd90:	68 00 20 00 00       	push   0x2000
c001bd95:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bd99:	8d 44 24 08          	lea    eax,[esp+0x8]
c001bd9d:	50                   	push   eax
c001bd9e:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001bda2:	50                   	push   eax
c001bda3:	e8 7d 98 fe ff       	call   c0005625 <f_mkfs>
c001bda8:	83 c4 10             	add    esp,0x10
c001bdab:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001bdaf:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001bdb4:	75 0a                	jne    c001bdc0 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c001bdb6:	b8 00 00 00 00       	mov    eax,0x0
c001bdbb:	eb 1b                	jmp    c001bdd8 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c001bdbd:	8d 76 00             	lea    esi,[esi+0x0]
c001bdc0:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c001bdc5:	75 09                	jne    c001bdd0 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d8>
c001bdc7:	b8 09 00 00 00       	mov    eax,0x9
c001bdcc:	eb 0a                	jmp    c001bdd8 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c001bdce:	66 90                	xchg   ax,ax
c001bdd0:	b8 01 00 00 00       	mov    eax,0x1
c001bdd5:	8d 76 00             	lea    esi,[esi+0x0]
c001bdd8:	83 c4 2c             	add    esp,0x2c
c001bddb:	c3                   	ret    

c001bddc <FAT::tryMount(LogicalDisk*, int)>:
c001bddc:	81 ec 4c 03 00 00    	sub    esp,0x34c
c001bde2:	a1 80 fb 02 c0       	mov    eax,ds:0xc002fb80
c001bde7:	83 f8 14             	cmp    eax,0x14
c001bdea:	75 18                	jne    c001be04 <FAT::tryMount(LogicalDisk*, int)+0x28>
c001bdec:	83 ec 0c             	sub    esp,0xc
c001bdef:	68 28 5e 02 c0       	push   0xc0025e28
c001bdf4:	e8 91 40 ff ff       	call   c000fe8a <KePanic(char const*)>
c001bdf9:	83 c4 10             	add    esp,0x10
c001bdfc:	b0 00                	mov    al,0x0
c001bdfe:	e9 ed 01 00 00       	jmp    c001bff0 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001be03:	90                   	nop
c001be04:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001be0b:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001be11:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001be17:	3d 00 02 00 00       	cmp    eax,0x200
c001be1c:	74 0a                	je     c001be28 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c001be1e:	b0 00                	mov    al,0x0
c001be20:	e9 cb 01 00 00       	jmp    c001bff0 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001be25:	8d 76 00             	lea    esi,[esi+0x0]
c001be28:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c001be30:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c001be37:	8b 04 85 a0 fb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0460]
c001be3e:	83 f8 ff             	cmp    eax,0xffffffff
c001be41:	74 09                	je     c001be4c <FAT::tryMount(LogicalDisk*, int)+0x70>
c001be43:	b0 01                	mov    al,0x1
c001be45:	e9 a6 01 00 00       	jmp    c001bff0 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001be4a:	66 90                	xchg   ax,ax
c001be4c:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c001be56:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c001be5e:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c001be65:	88 c2                	mov    dl,al
c001be67:	a1 80 fb 02 c0       	mov    eax,ds:0xc002fb80
c001be6c:	01 d0                	add    eax,edx
c001be6e:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c001be75:	8b 15 80 fb 02 c0    	mov    edx,DWORD PTR ds:0xc002fb80
c001be7b:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c001be82:	89 14 85 a0 fb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0460],edx
c001be89:	a1 80 fb 02 c0       	mov    eax,ds:0xc002fb80
c001be8e:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c001be95:	89 14 85 20 fc 02 c0 	mov    DWORD PTR [eax*4-0x3ffd03e0],edx
c001be9c:	83 ec 0c             	sub    esp,0xc
c001be9f:	68 34 02 00 00       	push   0x234
c001bea4:	e8 d3 3c ff ff       	call   c000fb7c <malloc>
c001bea9:	83 c4 10             	add    esp,0x10
c001beac:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c001beb3:	83 ec 04             	sub    esp,0x4
c001beb6:	6a 00                	push   0x0
c001beb8:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001bebf:	50                   	push   eax
c001bec0:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001bec7:	e8 53 7f fe ff       	call   c0003e1f <f_mount>
c001becc:	83 c4 10             	add    esp,0x10
c001becf:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c001bed6:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c001bede:	74 1c                	je     c001befc <FAT::tryMount(LogicalDisk*, int)+0x120>
c001bee0:	83 ec 0c             	sub    esp,0xc
c001bee3:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001beea:	e8 ad 3c ff ff       	call   c000fb9c <rfree>
c001beef:	83 c4 10             	add    esp,0x10
c001bef2:	b0 00                	mov    al,0x0
c001bef4:	e9 f7 00 00 00       	jmp    c001bff0 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001bef9:	8d 76 00             	lea    esi,[esi+0x0]
c001befc:	83 ec 04             	sub    esp,0x4
c001beff:	68 00 01 00 00       	push   0x100
c001bf04:	6a 00                	push   0x0
c001bf06:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c001bf0d:	50                   	push   eax
c001bf0e:	e8 dd 45 fe ff       	call   c00004f0 <memset>
c001bf13:	83 c4 10             	add    esp,0x10
c001bf16:	83 ec 08             	sub    esp,0x8
c001bf19:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001bf20:	50                   	push   eax
c001bf21:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c001bf28:	50                   	push   eax
c001bf29:	e8 42 49 fe ff       	call   c0000870 <strcat>
c001bf2e:	83 c4 10             	add    esp,0x10
c001bf31:	83 ec 08             	sub    esp,0x8
c001bf34:	68 36 5e 02 c0       	push   0xc0025e36
c001bf39:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c001bf40:	50                   	push   eax
c001bf41:	e8 2a 49 fe ff       	call   c0000870 <strcat>
c001bf46:	83 c4 10             	add    esp,0x10
c001bf49:	83 ec 04             	sub    esp,0x4
c001bf4c:	6a 01                	push   0x1
c001bf4e:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c001bf55:	50                   	push   eax
c001bf56:	8d 44 24 14          	lea    eax,[esp+0x14]
c001bf5a:	50                   	push   eax
c001bf5b:	e8 21 7f fe ff       	call   c0003e81 <f_open>
c001bf60:	83 c4 10             	add    esp,0x10
c001bf63:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c001bf6a:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c001bf71:	85 c0                	test   eax,eax
c001bf73:	74 0b                	je     c001bf80 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c001bf75:	78 31                	js     c001bfa8 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001bf77:	83 e8 04             	sub    eax,0x4
c001bf7a:	83 f8 01             	cmp    eax,0x1
c001bf7d:	77 29                	ja     c001bfa8 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001bf7f:	90                   	nop
c001bf80:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c001bf88:	83 ec 0c             	sub    esp,0xc
c001bf8b:	8d 44 24 14          	lea    eax,[esp+0x14]
c001bf8f:	50                   	push   eax
c001bf90:	e8 9c 86 fe ff       	call   c0004631 <f_close>
c001bf95:	83 c4 10             	add    esp,0x10
c001bf98:	90                   	nop
c001bf99:	0f b6 84 24 3f 03 00 00 	movzx  eax,BYTE PTR [esp+0x33f]
c001bfa1:	85 c0                	test   eax,eax
c001bfa3:	74 43                	je     c001bfe8 <FAT::tryMount(LogicalDisk*, int)+0x20c>
c001bfa5:	eb 31                	jmp    c001bfd8 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c001bfa7:	90                   	nop
c001bfa8:	83 ec 0c             	sub    esp,0xc
c001bfab:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001bfb2:	e8 e5 3b ff ff       	call   c000fb9c <rfree>
c001bfb7:	83 c4 10             	add    esp,0x10
c001bfba:	83 ec 04             	sub    esp,0x4
c001bfbd:	6a 00                	push   0x0
c001bfbf:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001bfc6:	50                   	push   eax
c001bfc7:	6a 00                	push   0x0
c001bfc9:	e8 51 7e fe ff       	call   c0003e1f <f_mount>
c001bfce:	83 c4 10             	add    esp,0x10
c001bfd1:	b0 00                	mov    al,0x0
c001bfd3:	eb 1b                	jmp    c001bff0 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001bfd5:	8d 76 00             	lea    esi,[esi+0x0]
c001bfd8:	a1 80 fb 02 c0       	mov    eax,ds:0xc002fb80
c001bfdd:	83 c0 01             	add    eax,0x1
c001bfe0:	a3 80 fb 02 c0       	mov    ds:0xc002fb80,eax
c001bfe5:	8d 76 00             	lea    esi,[esi+0x0]
c001bfe8:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c001bfef:	90                   	nop
c001bff0:	81 c4 4c 03 00 00    	add    esp,0x34c
c001bff6:	c3                   	ret    
c001bff7:	90                   	nop

c001bff8 <FAT::allocateSwapfile(char const*, int)>:
c001bff8:	55                   	push   ebp
c001bff9:	57                   	push   edi
c001bffa:	56                   	push   esi
c001bffb:	53                   	push   ebx
c001bffc:	81 ec 3c 04 00 00    	sub    esp,0x43c
c001c002:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c001c00d:	83 ec 0c             	sub    esp,0xc
c001c010:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c001c017:	e8 60 3b ff ff       	call   c000fb7c <malloc>
c001c01c:	83 c4 10             	add    esp,0x10
c001c01f:	89 c7                	mov    edi,eax
c001c021:	a1 78 fa 02 c0       	mov    eax,ds:0xc002fa78
c001c026:	83 ec 04             	sub    esp,0x4
c001c029:	50                   	push   eax
c001c02a:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c001c031:	57                   	push   edi
c001c032:	e8 51 c1 fe ff       	call   c0008188 <File::File(char const*, Process*)>
c001c037:	83 c4 10             	add    esp,0x10
c001c03a:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c001c041:	83 ec 04             	sub    esp,0x4
c001c044:	8d 44 24 13          	lea    eax,[esp+0x13]
c001c048:	50                   	push   eax
c001c049:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c04d:	50                   	push   eax
c001c04e:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001c055:	e8 4e c4 fe ff       	call   c00084a8 <File::stat(unsigned long long*, bool*)>
c001c05a:	83 c4 10             	add    esp,0x10
c001c05d:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001c064:	c1 e0 14             	shl    eax,0x14
c001c067:	89 c7                	mov    edi,eax
c001c069:	89 c5                	mov    ebp,eax
c001c06b:	c1 fd 1f             	sar    ebp,0x1f
c001c06e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c072:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c076:	89 f9                	mov    ecx,edi
c001c078:	31 c1                	xor    ecx,eax
c001c07a:	89 cb                	mov    ebx,ecx
c001c07c:	89 e9                	mov    ecx,ebp
c001c07e:	31 d1                	xor    ecx,edx
c001c080:	89 ce                	mov    esi,ecx
c001c082:	89 f0                	mov    eax,esi
c001c084:	09 d8                	or     eax,ebx
c001c086:	0f 84 9c 00 00 00    	je     c001c128 <FAT::allocateSwapfile(char const*, int)+0x130>
c001c08c:	83 ec 0c             	sub    esp,0xc
c001c08f:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001c096:	e8 d9 c2 fe ff       	call   c0008374 <File::unlink()>
c001c09b:	83 c4 10             	add    esp,0x10
c001c09e:	83 ec 08             	sub    esp,0x8
c001c0a1:	6a 12                	push   0x12
c001c0a3:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001c0aa:	e8 f7 c0 fe ff       	call   c00081a6 <File::open(FileOpenMode)>
c001c0af:	83 c4 10             	add    esp,0x10
c001c0b2:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001c0b9:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001c0bf:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001c0c6:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001c0cd:	c1 e0 14             	shl    eax,0x14
c001c0d0:	83 ec 04             	sub    esp,0x4
c001c0d3:	6a 01                	push   0x1
c001c0d5:	50                   	push   eax
c001c0d6:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c001c0dd:	e8 d6 93 fe ff       	call   c00054b8 <f_expand>
c001c0e2:	83 c4 10             	add    esp,0x10
c001c0e5:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001c0ec:	8b 00                	mov    eax,DWORD PTR [eax]
c001c0ee:	83 c0 10             	add    eax,0x10
c001c0f1:	8b 00                	mov    eax,DWORD PTR [eax]
c001c0f3:	83 ec 0c             	sub    esp,0xc
c001c0f6:	8d 54 24 24          	lea    edx,[esp+0x24]
c001c0fa:	52                   	push   edx
c001c0fb:	8d 54 24 30          	lea    edx,[esp+0x30]
c001c0ff:	52                   	push   edx
c001c100:	6a 00                	push   0x0
c001c102:	68 00 04 00 00       	push   0x400
c001c107:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001c10e:	ff d0                	call   eax
c001c110:	83 c4 20             	add    esp,0x20
c001c113:	83 ec 0c             	sub    esp,0xc
c001c116:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001c11d:	e8 e2 c0 fe ff       	call   c0008204 <File::close()>
c001c122:	83 c4 10             	add    esp,0x10
c001c125:	8d 76 00             	lea    esi,[esi+0x0]
c001c128:	83 ec 08             	sub    esp,0x8
c001c12b:	6a 01                	push   0x1
c001c12d:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001c134:	e8 6d c0 fe ff       	call   c00081a6 <File::open(FileOpenMode)>
c001c139:	83 c4 10             	add    esp,0x10
c001c13c:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001c143:	8b 00                	mov    eax,DWORD PTR [eax]
c001c145:	83 c0 0c             	add    eax,0xc
c001c148:	8b 00                	mov    eax,DWORD PTR [eax]
c001c14a:	83 ec 0c             	sub    esp,0xc
c001c14d:	8d 54 24 24          	lea    edx,[esp+0x24]
c001c151:	52                   	push   edx
c001c152:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c001c156:	52                   	push   edx
c001c157:	6a 00                	push   0x0
c001c159:	6a 04                	push   0x4
c001c15b:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001c162:	ff d0                	call   eax
c001c164:	83 c4 20             	add    esp,0x20
c001c167:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001c16e:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001c174:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001c17b:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c001c182:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c001c185:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c001c18c:	83 ec 0c             	sub    esp,0xc
c001c18f:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001c196:	e8 69 c0 fe ff       	call   c0008204 <File::close()>
c001c19b:	83 c4 10             	add    esp,0x10
c001c19e:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c001c1a5:	ba 00 00 00 00       	mov    edx,0x0
c001c1aa:	81 c4 3c 04 00 00    	add    esp,0x43c
c001c1b0:	5b                   	pop    ebx
c001c1b1:	5e                   	pop    esi
c001c1b2:	5f                   	pop    edi
c001c1b3:	5d                   	pop    ebp
c001c1b4:	c3                   	ret    
c001c1b5:	90                   	nop
c001c1b6:	66 90                	xchg   ax,ax

c001c1b8 <FAT::readDir(void*, unsigned long, void*, int*)>:
c001c1b8:	57                   	push   edi
c001c1b9:	56                   	push   esi
c001c1ba:	53                   	push   ebx
c001c1bb:	81 ec 50 02 00 00    	sub    esp,0x250
c001c1c1:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c001c1c9:	74 0d                	je     c001c1d8 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c001c1cb:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c001c1d3:	75 0f                	jne    c001c1e4 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c001c1d5:	8d 76 00             	lea    esi,[esi+0x0]
c001c1d8:	b8 04 00 00 00       	mov    eax,0x4
c001c1dd:	e9 3a 01 00 00       	jmp    c001c31c <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001c1e2:	66 90                	xchg   ax,ax
c001c1e4:	83 ec 08             	sub    esp,0x8
c001c1e7:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001c1ee:	50                   	push   eax
c001c1ef:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c001c1f6:	e8 02 87 fe ff       	call   c00048fd <f_readdir>
c001c1fb:	83 c4 10             	add    esp,0x10
c001c1fe:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c001c205:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c001c20c:	83 ec 0c             	sub    esp,0xc
c001c20f:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001c216:	83 c0 16             	add    eax,0x16
c001c219:	50                   	push   eax
c001c21a:	e8 61 43 fe ff       	call   c0000580 <strlen>
c001c21f:	83 c4 10             	add    esp,0x10
c001c222:	ba 00 00 00 00       	mov    edx,0x0
c001c227:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c22b:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001c22f:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c001c236:	0f b6 c0             	movzx  eax,al
c001c239:	83 e0 10             	and    eax,0x10
c001c23c:	74 0a                	je     c001c248 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c001c23e:	b8 02 00 00 00       	mov    eax,0x2
c001c243:	eb 0b                	jmp    c001c250 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c001c245:	8d 76 00             	lea    esi,[esi+0x0]
c001c248:	b8 01 00 00 00       	mov    eax,0x1
c001c24d:	8d 76 00             	lea    esi,[esi+0x0]
c001c250:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c254:	83 ec 08             	sub    esp,0x8
c001c257:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001c25e:	83 c0 16             	add    eax,0x16
c001c261:	50                   	push   eax
c001c262:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c266:	83 c0 10             	add    eax,0x10
c001c269:	50                   	push   eax
c001c26a:	e8 e1 43 fe ff       	call   c0000650 <strcpy>
c001c26f:	83 c4 10             	add    esp,0x10
c001c272:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c001c279:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c001c280:	8d 44 24 08          	lea    eax,[esp+0x8]
c001c284:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c001c28b:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c001c292:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c001c299:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c001c2a0:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c001c2a7:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c001c2ae:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c001c2b5:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c001c2bc:	89 c6                	mov    esi,eax
c001c2be:	89 d7                	mov    edi,edx
c001c2c0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c2c2:	89 c8                	mov    eax,ecx
c001c2c4:	89 fa                	mov    edx,edi
c001c2c6:	89 f3                	mov    ebx,esi
c001c2c8:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c001c2cf:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c001c2d6:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c001c2dd:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c001c2e4:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001c2ea:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c001c2f1:	0f be c0             	movsx  eax,al
c001c2f4:	85 c0                	test   eax,eax
c001c2f6:	75 08                	jne    c001c300 <FAT::readDir(void*, unsigned long, void*, int*)+0x148>
c001c2f8:	b8 07 00 00 00       	mov    eax,0x7
c001c2fd:	eb 1d                	jmp    c001c31c <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001c2ff:	90                   	nop
c001c300:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c001c307:	85 c0                	test   eax,eax
c001c309:	75 09                	jne    c001c314 <FAT::readDir(void*, unsigned long, void*, int*)+0x15c>
c001c30b:	b8 00 00 00 00       	mov    eax,0x0
c001c310:	eb 0a                	jmp    c001c31c <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001c312:	66 90                	xchg   ax,ax
c001c314:	b8 01 00 00 00       	mov    eax,0x1
c001c319:	8d 76 00             	lea    esi,[esi+0x0]
c001c31c:	81 c4 50 02 00 00    	add    esp,0x250
c001c322:	5b                   	pop    ebx
c001c323:	5e                   	pop    esi
c001c324:	5f                   	pop    edi
c001c325:	c3                   	ret    
c001c326:	66 90                	xchg   ax,ax

c001c328 <FAT::read(void*, unsigned long, void*, int*)>:
c001c328:	83 ec 1c             	sub    esp,0x1c
c001c32b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001c330:	74 0a                	je     c001c33c <FAT::read(void*, unsigned long, void*, int*)+0x14>
c001c332:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001c337:	75 0b                	jne    c001c344 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c001c339:	8d 76 00             	lea    esi,[esi+0x0]
c001c33c:	b8 04 00 00 00       	mov    eax,0x4
c001c341:	eb 41                	jmp    c001c384 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001c343:	90                   	nop
c001c344:	8d 44 24 08          	lea    eax,[esp+0x8]
c001c348:	50                   	push   eax
c001c349:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c34d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001c351:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c355:	e8 ea 7d fe ff       	call   c0004144 <f_read>
c001c35a:	83 c4 10             	add    esp,0x10
c001c35d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c361:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c365:	89 c2                	mov    edx,eax
c001c367:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001c36b:	89 10                	mov    DWORD PTR [eax],edx
c001c36d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c371:	85 c0                	test   eax,eax
c001c373:	75 07                	jne    c001c37c <FAT::read(void*, unsigned long, void*, int*)+0x54>
c001c375:	b8 00 00 00 00       	mov    eax,0x0
c001c37a:	eb 08                	jmp    c001c384 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001c37c:	b8 01 00 00 00       	mov    eax,0x1
c001c381:	8d 76 00             	lea    esi,[esi+0x0]
c001c384:	83 c4 1c             	add    esp,0x1c
c001c387:	c3                   	ret    

c001c388 <FAT::write(void*, unsigned long, void*, int*)>:
c001c388:	83 ec 1c             	sub    esp,0x1c
c001c38b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001c390:	74 0a                	je     c001c39c <FAT::write(void*, unsigned long, void*, int*)+0x14>
c001c392:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001c397:	75 0b                	jne    c001c3a4 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c001c399:	8d 76 00             	lea    esi,[esi+0x0]
c001c39c:	b8 04 00 00 00       	mov    eax,0x4
c001c3a1:	eb 41                	jmp    c001c3e4 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001c3a3:	90                   	nop
c001c3a4:	8d 44 24 08          	lea    eax,[esp+0x8]
c001c3a8:	50                   	push   eax
c001c3a9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c3ad:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001c3b1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c3b5:	e8 6b 7f fe ff       	call   c0004325 <f_write>
c001c3ba:	83 c4 10             	add    esp,0x10
c001c3bd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c3c1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c3c5:	89 c2                	mov    edx,eax
c001c3c7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001c3cb:	89 10                	mov    DWORD PTR [eax],edx
c001c3cd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c3d1:	85 c0                	test   eax,eax
c001c3d3:	75 07                	jne    c001c3dc <FAT::write(void*, unsigned long, void*, int*)+0x54>
c001c3d5:	b8 00 00 00 00       	mov    eax,0x0
c001c3da:	eb 08                	jmp    c001c3e4 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001c3dc:	b8 01 00 00 00       	mov    eax,0x1
c001c3e1:	8d 76 00             	lea    esi,[esi+0x0]
c001c3e4:	83 c4 1c             	add    esp,0x1c
c001c3e7:	c3                   	ret    

c001c3e8 <FAT::close(void*)>:
c001c3e8:	83 ec 1c             	sub    esp,0x1c
c001c3eb:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001c3f0:	75 0a                	jne    c001c3fc <FAT::close(void*)+0x14>
c001c3f2:	b8 04 00 00 00       	mov    eax,0x4
c001c3f7:	eb 3f                	jmp    c001c438 <FAT::close(void*)+0x50>
c001c3f9:	8d 76 00             	lea    esi,[esi+0x0]
c001c3fc:	83 ec 0c             	sub    esp,0xc
c001c3ff:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c403:	e8 29 82 fe ff       	call   c0004631 <f_close>
c001c408:	83 c4 10             	add    esp,0x10
c001c40b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c40f:	83 ec 0c             	sub    esp,0xc
c001c412:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c416:	e8 71 37 ff ff       	call   c000fb8c <free>
c001c41b:	83 c4 10             	add    esp,0x10
c001c41e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c422:	85 c0                	test   eax,eax
c001c424:	75 0a                	jne    c001c430 <FAT::close(void*)+0x48>
c001c426:	b8 00 00 00 00       	mov    eax,0x0
c001c42b:	eb 0b                	jmp    c001c438 <FAT::close(void*)+0x50>
c001c42d:	8d 76 00             	lea    esi,[esi+0x0]
c001c430:	b8 01 00 00 00       	mov    eax,0x1
c001c435:	8d 76 00             	lea    esi,[esi+0x0]
c001c438:	83 c4 1c             	add    esp,0x1c
c001c43b:	c3                   	ret    

c001c43c <FAT::closeDir(void*)>:
c001c43c:	83 ec 1c             	sub    esp,0x1c
c001c43f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001c444:	75 0a                	jne    c001c450 <FAT::closeDir(void*)+0x14>
c001c446:	b8 04 00 00 00       	mov    eax,0x4
c001c44b:	eb 3f                	jmp    c001c48c <FAT::closeDir(void*)+0x50>
c001c44d:	8d 76 00             	lea    esi,[esi+0x0]
c001c450:	83 ec 0c             	sub    esp,0xc
c001c453:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c457:	e8 7f 84 fe ff       	call   c00048db <f_closedir>
c001c45c:	83 c4 10             	add    esp,0x10
c001c45f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c463:	83 ec 0c             	sub    esp,0xc
c001c466:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c46a:	e8 1d 37 ff ff       	call   c000fb8c <free>
c001c46f:	83 c4 10             	add    esp,0x10
c001c472:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c476:	85 c0                	test   eax,eax
c001c478:	75 0a                	jne    c001c484 <FAT::closeDir(void*)+0x48>
c001c47a:	b8 00 00 00 00       	mov    eax,0x0
c001c47f:	eb 0b                	jmp    c001c48c <FAT::closeDir(void*)+0x50>
c001c481:	8d 76 00             	lea    esi,[esi+0x0]
c001c484:	b8 01 00 00 00       	mov    eax,0x1
c001c489:	8d 76 00             	lea    esi,[esi+0x0]
c001c48c:	83 c4 1c             	add    esp,0x1c
c001c48f:	c3                   	ret    

c001c490 <FAT::truncate(void*, unsigned long long)>:
c001c490:	83 ec 2c             	sub    esp,0x2c
c001c493:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c497:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c49b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c49f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c4a3:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001c4a8:	75 0a                	jne    c001c4b4 <FAT::truncate(void*, unsigned long long)+0x24>
c001c4aa:	b8 04 00 00 00       	mov    eax,0x4
c001c4af:	eb 47                	jmp    c001c4f8 <FAT::truncate(void*, unsigned long long)+0x68>
c001c4b1:	8d 76 00             	lea    esi,[esi+0x0]
c001c4b4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c4b8:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001c4bb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c4bf:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001c4c7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c4cb:	83 ec 08             	sub    esp,0x8
c001c4ce:	50                   	push   eax
c001c4cf:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001c4d3:	e8 88 81 fe ff       	call   c0004660 <f_lseek>
c001c4d8:	83 c4 10             	add    esp,0x10
c001c4db:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c4df:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c4e3:	85 c0                	test   eax,eax
c001c4e5:	75 09                	jne    c001c4f0 <FAT::truncate(void*, unsigned long long)+0x60>
c001c4e7:	b8 00 00 00 00       	mov    eax,0x0
c001c4ec:	eb 0a                	jmp    c001c4f8 <FAT::truncate(void*, unsigned long long)+0x68>
c001c4ee:	66 90                	xchg   ax,ax
c001c4f0:	b8 01 00 00 00       	mov    eax,0x1
c001c4f5:	8d 76 00             	lea    esi,[esi+0x0]
c001c4f8:	83 c4 2c             	add    esp,0x2c
c001c4fb:	c3                   	ret    

c001c4fc <FAT::seek(void*, unsigned long long)>:
c001c4fc:	83 ec 2c             	sub    esp,0x2c
c001c4ff:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c503:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c507:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c50b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c50f:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001c514:	75 0a                	jne    c001c520 <FAT::seek(void*, unsigned long long)+0x24>
c001c516:	b8 04 00 00 00       	mov    eax,0x4
c001c51b:	eb 33                	jmp    c001c550 <FAT::seek(void*, unsigned long long)+0x54>
c001c51d:	8d 76 00             	lea    esi,[esi+0x0]
c001c520:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c524:	83 ec 08             	sub    esp,0x8
c001c527:	50                   	push   eax
c001c528:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001c52c:	e8 2f 81 fe ff       	call   c0004660 <f_lseek>
c001c531:	83 c4 10             	add    esp,0x10
c001c534:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c538:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c53c:	85 c0                	test   eax,eax
c001c53e:	75 08                	jne    c001c548 <FAT::seek(void*, unsigned long long)+0x4c>
c001c540:	b8 00 00 00 00       	mov    eax,0x0
c001c545:	eb 09                	jmp    c001c550 <FAT::seek(void*, unsigned long long)+0x54>
c001c547:	90                   	nop
c001c548:	b8 01 00 00 00       	mov    eax,0x1
c001c54d:	8d 76 00             	lea    esi,[esi+0x0]
c001c550:	83 c4 2c             	add    esp,0x2c
c001c553:	c3                   	ret    

c001c554 <fatWrapperReadDisk>:
c001c554:	53                   	push   ebx
c001c555:	83 ec 18             	sub    esp,0x18
c001c558:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c55c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001c560:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c565:	8b 0c 85 e0 ca 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd3520]
c001c56c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001c570:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c574:	ba 00 00 00 00       	mov    edx,0x0
c001c579:	83 ec 0c             	sub    esp,0xc
c001c57c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c580:	53                   	push   ebx
c001c581:	52                   	push   edx
c001c582:	50                   	push   eax
c001c583:	51                   	push   ecx
c001c584:	e8 c3 e4 fe ff       	call   c000aa4c <LogicalDisk::read(unsigned long long, int, void*)>
c001c589:	83 c4 20             	add    esp,0x20
c001c58c:	83 c4 18             	add    esp,0x18
c001c58f:	5b                   	pop    ebx
c001c590:	c3                   	ret    
c001c591:	8d 76 00             	lea    esi,[esi+0x0]

c001c594 <fatWrapperWriteDisk>:
c001c594:	53                   	push   ebx
c001c595:	83 ec 18             	sub    esp,0x18
c001c598:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c59c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001c5a0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c5a5:	8b 0c 85 e0 ca 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd3520]
c001c5ac:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001c5b0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c5b4:	ba 00 00 00 00       	mov    edx,0x0
c001c5b9:	83 ec 0c             	sub    esp,0xc
c001c5bc:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c5c0:	53                   	push   ebx
c001c5c1:	52                   	push   edx
c001c5c2:	50                   	push   eax
c001c5c3:	51                   	push   ecx
c001c5c4:	e8 ef e4 fe ff       	call   c000aab8 <LogicalDisk::write(unsigned long long, int, void*)>
c001c5c9:	83 c4 20             	add    esp,0x20
c001c5cc:	83 c4 18             	add    esp,0x18
c001c5cf:	5b                   	pop    ebx
c001c5d0:	c3                   	ret    
c001c5d1:	8d 76 00             	lea    esi,[esi+0x0]

c001c5d4 <fatWrapperIoctl>:
c001c5d4:	53                   	push   ebx
c001c5d5:	83 ec 28             	sub    esp,0x28
c001c5d8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001c5dc:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001c5e0:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001c5e4:	88 d0                	mov    al,dl
c001c5e6:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001c5ea:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c5ef:	83 f8 02             	cmp    eax,0x2
c001c5f2:	75 34                	jne    c001c628 <fatWrapperIoctl+0x54>
c001c5f4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c5f8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c5fc:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c601:	8b 04 85 e0 ca 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3520]
c001c608:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001c60e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001c614:	89 c2                	mov    edx,eax
c001c616:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c61a:	66 89 10             	mov    WORD PTR [eax],dx
c001c61d:	b8 00 00 00 00       	mov    eax,0x0
c001c622:	e9 c5 00 00 00       	jmp    c001c6ec <fatWrapperIoctl+0x118>
c001c627:	90                   	nop
c001c628:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c62d:	83 f8 01             	cmp    eax,0x1
c001c630:	75 6a                	jne    c001c69c <fatWrapperIoctl+0xc8>
c001c632:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c636:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c63a:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c63f:	8b 04 85 e0 ca 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3520]
c001c646:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001c64c:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001c652:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c001c658:	89 c8                	mov    eax,ecx
c001c65a:	89 da                	mov    edx,ebx
c001c65c:	0f a4 c2 0a          	shld   edx,eax,0xa
c001c660:	c1 e0 0a             	shl    eax,0xa
c001c663:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001c668:	8b 0c 8d e0 ca 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3520]
c001c66f:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c001c675:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001c67b:	89 cb                	mov    ebx,ecx
c001c67d:	c1 fb 1f             	sar    ebx,0x1f
c001c680:	53                   	push   ebx
c001c681:	51                   	push   ecx
c001c682:	52                   	push   edx
c001c683:	50                   	push   eax
c001c684:	e8 7b 55 00 00       	call   c0021c04 <__udivdi3>
c001c689:	83 c4 10             	add    esp,0x10
c001c68c:	89 c2                	mov    edx,eax
c001c68e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c692:	89 10                	mov    DWORD PTR [eax],edx
c001c694:	b8 00 00 00 00       	mov    eax,0x0
c001c699:	eb 51                	jmp    c001c6ec <fatWrapperIoctl+0x118>
c001c69b:	90                   	nop
c001c69c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c6a1:	85 c0                	test   eax,eax
c001c6a3:	75 07                	jne    c001c6ac <fatWrapperIoctl+0xd8>
c001c6a5:	b8 00 00 00 00       	mov    eax,0x0
c001c6aa:	eb 40                	jmp    c001c6ec <fatWrapperIoctl+0x118>
c001c6ac:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c6b1:	83 f8 03             	cmp    eax,0x3
c001c6b4:	75 1a                	jne    c001c6d0 <fatWrapperIoctl+0xfc>
c001c6b6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c6ba:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c6be:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c6c2:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001c6c8:	b8 00 00 00 00       	mov    eax,0x0
c001c6cd:	eb 1d                	jmp    c001c6ec <fatWrapperIoctl+0x118>
c001c6cf:	90                   	nop
c001c6d0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c6d5:	83 f8 04             	cmp    eax,0x4
c001c6d8:	75 0a                	jne    c001c6e4 <fatWrapperIoctl+0x110>
c001c6da:	b8 00 00 00 00       	mov    eax,0x0
c001c6df:	eb 0b                	jmp    c001c6ec <fatWrapperIoctl+0x118>
c001c6e1:	8d 76 00             	lea    esi,[esi+0x0]
c001c6e4:	b8 04 00 00 00       	mov    eax,0x4
c001c6e9:	8d 76 00             	lea    esi,[esi+0x0]
c001c6ec:	83 c4 28             	add    esp,0x28
c001c6ef:	5b                   	pop    ebx
c001c6f0:	c3                   	ret    
c001c6f1:	90                   	nop
c001c6f2:	66 90                	xchg   ax,ax

c001c6f4 <FAT::FAT()>:
c001c6f4:	83 ec 1c             	sub    esp,0x1c
c001c6f7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c6fb:	83 ec 0c             	sub    esp,0xc
c001c6fe:	50                   	push   eax
c001c6ff:	e8 ae b6 fe ff       	call   c0007db2 <Filesystem::Filesystem()>
c001c704:	83 c4 10             	add    esp,0x10
c001c707:	ba 4c 5e 02 c0       	mov    edx,0xc0025e4c
c001c70c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c710:	89 10                	mov    DWORD PTR [eax],edx
c001c712:	c7 05 80 fb 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fb80,0x0
c001c71c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001c724:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c001c729:	7f 19                	jg     c001c744 <FAT::FAT()+0x50>
c001c72b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c72f:	c7 04 85 a0 fb 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd0460],0xffffffff
c001c73a:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001c73f:	eb e3                	jmp    c001c724 <FAT::FAT()+0x30>
c001c741:	8d 76 00             	lea    esi,[esi+0x0]
c001c744:	90                   	nop
c001c745:	83 c4 1c             	add    esp,0x1c
c001c748:	c3                   	ret    
c001c749:	90                   	nop
c001c74a:	66 90                	xchg   ax,ax

c001c74c <FAT::fixFilepath(char*)>:
c001c74c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c750:	8a 00                	mov    al,BYTE PTR [eax]
c001c752:	0f be c0             	movsx  eax,al
c001c755:	83 f8 40             	cmp    eax,0x40
c001c758:	7e 2e                	jle    c001c788 <FAT::fixFilepath(char*)+0x3c>
c001c75a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c75e:	8a 00                	mov    al,BYTE PTR [eax]
c001c760:	83 e8 41             	sub    eax,0x41
c001c763:	88 c2                	mov    dl,al
c001c765:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c769:	88 10                	mov    BYTE PTR [eax],dl
c001c76b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c76f:	8a 00                	mov    al,BYTE PTR [eax]
c001c771:	0f be c0             	movsx  eax,al
c001c774:	8b 04 85 a0 fb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0460]
c001c77b:	83 c0 30             	add    eax,0x30
c001c77e:	88 c2                	mov    dl,al
c001c780:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c784:	88 10                	mov    BYTE PTR [eax],dl
c001c786:	66 90                	xchg   ax,ax
c001c788:	90                   	nop
c001c789:	c3                   	ret    
c001c78a:	66 90                	xchg   ax,ax

c001c78c <FAT::open(char const*, void**, FileOpenMode)>:
c001c78c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001c792:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001c79a:	74 0c                	je     c001c7a8 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c001c79c:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001c7a4:	75 0e                	jne    c001c7b4 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c001c7a6:	66 90                	xchg   ax,ax
c001c7a8:	b8 04 00 00 00       	mov    eax,0x4
c001c7ad:	e9 46 01 00 00       	jmp    c001c8f8 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c001c7b2:	66 90                	xchg   ax,ax
c001c7b4:	83 ec 08             	sub    esp,0x8
c001c7b7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c7be:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c7c2:	50                   	push   eax
c001c7c3:	e8 88 3e fe ff       	call   c0000650 <strcpy>
c001c7c8:	83 c4 10             	add    esp,0x10
c001c7cb:	83 ec 08             	sub    esp,0x8
c001c7ce:	8d 44 24 10          	lea    eax,[esp+0x10]
c001c7d2:	50                   	push   eax
c001c7d3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c7da:	e8 6d ff ff ff       	call   c001c74c <FAT::fixFilepath(char*)>
c001c7df:	83 c4 10             	add    esp,0x10
c001c7e2:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001c7ea:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001c7f1:	83 e0 01             	and    eax,0x1
c001c7f4:	74 12                	je     c001c808 <FAT::open(char const*, void**, FileOpenMode)+0x7c>
c001c7f6:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001c7fd:	83 c8 01             	or     eax,0x1
c001c800:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001c807:	90                   	nop
c001c808:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001c80f:	83 e0 04             	and    eax,0x4
c001c812:	74 24                	je     c001c838 <FAT::open(char const*, void**, FileOpenMode)+0xac>
c001c814:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001c81b:	83 c8 30             	or     eax,0x30
c001c81e:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001c825:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001c82c:	83 c8 02             	or     eax,0x2
c001c82f:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001c836:	66 90                	xchg   ax,ax
c001c838:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001c83f:	83 e0 02             	and    eax,0x2
c001c842:	74 14                	je     c001c858 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c001c844:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001c84b:	83 c8 02             	or     eax,0x2
c001c84e:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001c855:	8d 76 00             	lea    esi,[esi+0x0]
c001c858:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001c85f:	83 e0 08             	and    eax,0x8
c001c862:	74 14                	je     c001c878 <FAT::open(char const*, void**, FileOpenMode)+0xec>
c001c864:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001c86b:	83 c8 04             	or     eax,0x4
c001c86e:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001c875:	8d 76 00             	lea    esi,[esi+0x0]
c001c878:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001c87f:	83 e0 10             	and    eax,0x10
c001c882:	74 14                	je     c001c898 <FAT::open(char const*, void**, FileOpenMode)+0x10c>
c001c884:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001c88b:	83 c8 08             	or     eax,0x8
c001c88e:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001c895:	8d 76 00             	lea    esi,[esi+0x0]
c001c898:	83 ec 0c             	sub    esp,0xc
c001c89b:	68 28 02 00 00       	push   0x228
c001c8a0:	e8 d7 32 ff ff       	call   c000fb7c <malloc>
c001c8a5:	83 c4 10             	add    esp,0x10
c001c8a8:	89 c2                	mov    edx,eax
c001c8aa:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001c8b1:	89 10                	mov    DWORD PTR [eax],edx
c001c8b3:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c001c8bb:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001c8c2:	8b 00                	mov    eax,DWORD PTR [eax]
c001c8c4:	83 ec 04             	sub    esp,0x4
c001c8c7:	52                   	push   edx
c001c8c8:	8d 54 24 10          	lea    edx,[esp+0x10]
c001c8cc:	52                   	push   edx
c001c8cd:	50                   	push   eax
c001c8ce:	e8 ae 75 fe ff       	call   c0003e81 <f_open>
c001c8d3:	83 c4 10             	add    esp,0x10
c001c8d6:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c001c8dd:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c001c8e5:	74 09                	je     c001c8f0 <FAT::open(char const*, void**, FileOpenMode)+0x164>
c001c8e7:	b8 01 00 00 00       	mov    eax,0x1
c001c8ec:	eb 0a                	jmp    c001c8f8 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c001c8ee:	66 90                	xchg   ax,ax
c001c8f0:	b8 00 00 00 00       	mov    eax,0x0
c001c8f5:	8d 76 00             	lea    esi,[esi+0x0]
c001c8f8:	81 c4 1c 01 00 00    	add    esp,0x11c
c001c8fe:	c3                   	ret    
c001c8ff:	90                   	nop

c001c900 <FAT::openDir(char const*, void**)>:
c001c900:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001c906:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001c90e:	74 0c                	je     c001c91c <FAT::openDir(char const*, void**)+0x1c>
c001c910:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001c918:	75 0e                	jne    c001c928 <FAT::openDir(char const*, void**)+0x28>
c001c91a:	66 90                	xchg   ax,ax
c001c91c:	b8 04 00 00 00       	mov    eax,0x4
c001c921:	e9 82 00 00 00       	jmp    c001c9a8 <FAT::openDir(char const*, void**)+0xa8>
c001c926:	66 90                	xchg   ax,ax
c001c928:	83 ec 08             	sub    esp,0x8
c001c92b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c932:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c936:	50                   	push   eax
c001c937:	e8 14 3d fe ff       	call   c0000650 <strcpy>
c001c93c:	83 c4 10             	add    esp,0x10
c001c93f:	83 ec 08             	sub    esp,0x8
c001c942:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c946:	50                   	push   eax
c001c947:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c94e:	e8 f9 fd ff ff       	call   c001c74c <FAT::fixFilepath(char*)>
c001c953:	83 c4 10             	add    esp,0x10
c001c956:	83 ec 0c             	sub    esp,0xc
c001c959:	6a 30                	push   0x30
c001c95b:	e8 1c 32 ff ff       	call   c000fb7c <malloc>
c001c960:	83 c4 10             	add    esp,0x10
c001c963:	89 c2                	mov    edx,eax
c001c965:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001c96c:	89 10                	mov    DWORD PTR [eax],edx
c001c96e:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001c975:	8b 00                	mov    eax,DWORD PTR [eax]
c001c977:	83 ec 08             	sub    esp,0x8
c001c97a:	8d 54 24 14          	lea    edx,[esp+0x14]
c001c97e:	52                   	push   edx
c001c97f:	50                   	push   eax
c001c980:	e8 8b 7e fe ff       	call   c0004810 <f_opendir>
c001c985:	83 c4 10             	add    esp,0x10
c001c988:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001c98f:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c001c997:	74 07                	je     c001c9a0 <FAT::openDir(char const*, void**)+0xa0>
c001c999:	b8 01 00 00 00       	mov    eax,0x1
c001c99e:	eb 08                	jmp    c001c9a8 <FAT::openDir(char const*, void**)+0xa8>
c001c9a0:	b8 00 00 00 00       	mov    eax,0x0
c001c9a5:	8d 76 00             	lea    esi,[esi+0x0]
c001c9a8:	81 c4 1c 01 00 00    	add    esp,0x11c
c001c9ae:	c3                   	ret    
c001c9af:	90                   	nop

c001c9b0 <FAT::stat(char const*, unsigned long long*, bool*)>:
c001c9b0:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001c9b6:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c001c9be:	75 0c                	jne    c001c9cc <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c001c9c0:	b8 04 00 00 00       	mov    eax,0x4
c001c9c5:	e9 d6 00 00 00       	jmp    c001caa0 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001c9ca:	66 90                	xchg   ax,ax
c001c9cc:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c001c9d4:	75 0a                	jne    c001c9e0 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c001c9d6:	b8 04 00 00 00       	mov    eax,0x4
c001c9db:	e9 c0 00 00 00       	jmp    c001caa0 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001c9e0:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c001c9e8:	75 0a                	jne    c001c9f4 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c001c9ea:	b8 04 00 00 00       	mov    eax,0x4
c001c9ef:	e9 ac 00 00 00       	jmp    c001caa0 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001c9f4:	83 ec 08             	sub    esp,0x8
c001c9f7:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001c9fe:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001ca05:	50                   	push   eax
c001ca06:	e8 45 3c fe ff       	call   c0000650 <strcpy>
c001ca0b:	83 c4 10             	add    esp,0x10
c001ca0e:	83 ec 08             	sub    esp,0x8
c001ca11:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001ca18:	50                   	push   eax
c001ca19:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001ca20:	e8 27 fd ff ff       	call   c001c74c <FAT::fixFilepath(char*)>
c001ca25:	83 c4 10             	add    esp,0x10
c001ca28:	83 ec 08             	sub    esp,0x8
c001ca2b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001ca2f:	50                   	push   eax
c001ca30:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001ca37:	50                   	push   eax
c001ca38:	e8 52 7f fe ff       	call   c000498f <f_stat>
c001ca3d:	83 c4 10             	add    esp,0x10
c001ca40:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001ca47:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001ca4e:	85 c0                	test   eax,eax
c001ca50:	74 0a                	je     c001ca5c <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c001ca52:	83 f8 04             	cmp    eax,0x4
c001ca55:	74 39                	je     c001ca90 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c001ca57:	eb 3f                	jmp    c001ca98 <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c001ca59:	8d 76 00             	lea    esi,[esi+0x0]
c001ca5c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001ca60:	0f b6 c0             	movzx  eax,al
c001ca63:	83 e0 10             	and    eax,0x10
c001ca66:	0f 95 c2             	setne  dl
c001ca69:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c001ca70:	88 10                	mov    BYTE PTR [eax],dl
c001ca72:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca76:	ba 00 00 00 00       	mov    edx,0x0
c001ca7b:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c001ca82:	89 01                	mov    DWORD PTR [ecx],eax
c001ca84:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001ca87:	b8 00 00 00 00       	mov    eax,0x0
c001ca8c:	eb 12                	jmp    c001caa0 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001ca8e:	66 90                	xchg   ax,ax
c001ca90:	b8 02 00 00 00       	mov    eax,0x2
c001ca95:	eb 09                	jmp    c001caa0 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001ca97:	90                   	nop
c001ca98:	b8 01 00 00 00       	mov    eax,0x1
c001ca9d:	8d 76 00             	lea    esi,[esi+0x0]
c001caa0:	81 c4 2c 02 00 00    	add    esp,0x22c
c001caa6:	c3                   	ret    
c001caa7:	90                   	nop

c001caa8 <FAT::unlink(char const*)>:
c001caa8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001caae:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001cab6:	75 08                	jne    c001cac0 <FAT::unlink(char const*)+0x18>
c001cab8:	b8 04 00 00 00       	mov    eax,0x4
c001cabd:	eb 61                	jmp    c001cb20 <FAT::unlink(char const*)+0x78>
c001cabf:	90                   	nop
c001cac0:	83 ec 08             	sub    esp,0x8
c001cac3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001caca:	8d 44 24 18          	lea    eax,[esp+0x18]
c001cace:	50                   	push   eax
c001cacf:	e8 7c 3b fe ff       	call   c0000650 <strcpy>
c001cad4:	83 c4 10             	add    esp,0x10
c001cad7:	83 ec 08             	sub    esp,0x8
c001cada:	8d 44 24 14          	lea    eax,[esp+0x14]
c001cade:	50                   	push   eax
c001cadf:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001cae6:	e8 61 fc ff ff       	call   c001c74c <FAT::fixFilepath(char*)>
c001caeb:	83 c4 10             	add    esp,0x10
c001caee:	83 ec 0c             	sub    esp,0xc
c001caf1:	8d 44 24 18          	lea    eax,[esp+0x18]
c001caf5:	50                   	push   eax
c001caf6:	e8 06 81 fe ff       	call   c0004c01 <f_unlink>
c001cafb:	83 c4 10             	add    esp,0x10
c001cafe:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001cb05:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001cb0c:	85 c0                	test   eax,eax
c001cb0e:	75 08                	jne    c001cb18 <FAT::unlink(char const*)+0x70>
c001cb10:	b8 00 00 00 00       	mov    eax,0x0
c001cb15:	eb 09                	jmp    c001cb20 <FAT::unlink(char const*)+0x78>
c001cb17:	90                   	nop
c001cb18:	b8 01 00 00 00       	mov    eax,0x1
c001cb1d:	8d 76 00             	lea    esi,[esi+0x0]
c001cb20:	81 c4 1c 01 00 00    	add    esp,0x11c
c001cb26:	c3                   	ret    
c001cb27:	90                   	nop

c001cb28 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001cb28:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001cb2e:	8b 84 24 38 01 00 00 	mov    eax,DWORD PTR [esp+0x138]
c001cb35:	8b 94 24 3c 01 00 00 	mov    edx,DWORD PTR [esp+0x13c]
c001cb3c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001cb40:	88 d0                	mov    al,dl
c001cb42:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001cb46:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001cb4e:	75 0c                	jne    c001cb5c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x34>
c001cb50:	b8 04 00 00 00       	mov    eax,0x4
c001cb55:	e9 7e 01 00 00       	jmp    c001ccd8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1b0>
c001cb5a:	66 90                	xchg   ax,ax
c001cb5c:	83 ec 08             	sub    esp,0x8
c001cb5f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001cb66:	8d 44 24 24          	lea    eax,[esp+0x24]
c001cb6a:	50                   	push   eax
c001cb6b:	e8 e0 3a fe ff       	call   c0000650 <strcpy>
c001cb70:	83 c4 10             	add    esp,0x10
c001cb73:	83 ec 08             	sub    esp,0x8
c001cb76:	8d 44 24 20          	lea    eax,[esp+0x20]
c001cb7a:	50                   	push   eax
c001cb7b:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001cb82:	e8 c5 fb ff ff       	call   c001c74c <FAT::fixFilepath(char*)>
c001cb87:	83 c4 10             	add    esp,0x10
c001cb8a:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001cb92:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001cb9a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001cb9f:	83 e0 01             	and    eax,0x1
c001cba2:	74 14                	je     c001cbb8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x90>
c001cba4:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001cbab:	83 c8 01             	or     eax,0x1
c001cbae:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001cbb5:	8d 76 00             	lea    esi,[esi+0x0]
c001cbb8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001cbbd:	83 e0 02             	and    eax,0x2
c001cbc0:	74 12                	je     c001cbd4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xac>
c001cbc2:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001cbc9:	83 c8 20             	or     eax,0x20
c001cbcc:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001cbd3:	90                   	nop
c001cbd4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001cbd9:	83 e0 04             	and    eax,0x4
c001cbdc:	74 12                	je     c001cbf0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c001cbde:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001cbe5:	83 c8 04             	or     eax,0x4
c001cbe8:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001cbef:	90                   	nop
c001cbf0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001cbf5:	83 e0 08             	and    eax,0x8
c001cbf8:	74 12                	je     c001cc0c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c001cbfa:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001cc01:	83 c8 02             	or     eax,0x2
c001cc04:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001cc0b:	90                   	nop
c001cc0c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001cc11:	83 e0 01             	and    eax,0x1
c001cc14:	74 12                	je     c001cc28 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x100>
c001cc16:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001cc1d:	83 c8 01             	or     eax,0x1
c001cc20:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001cc27:	90                   	nop
c001cc28:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001cc2d:	83 e0 02             	and    eax,0x2
c001cc30:	74 12                	je     c001cc44 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x11c>
c001cc32:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001cc39:	83 c8 20             	or     eax,0x20
c001cc3c:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001cc43:	90                   	nop
c001cc44:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001cc49:	83 e0 04             	and    eax,0x4
c001cc4c:	74 12                	je     c001cc60 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x138>
c001cc4e:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001cc55:	83 c8 04             	or     eax,0x4
c001cc58:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001cc5f:	90                   	nop
c001cc60:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001cc65:	83 e0 08             	and    eax,0x8
c001cc68:	74 12                	je     c001cc7c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x154>
c001cc6a:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001cc71:	83 c8 02             	or     eax,0x2
c001cc74:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001cc7b:	90                   	nop
c001cc7c:	8a 94 24 1e 01 00 00 	mov    dl,BYTE PTR [esp+0x11e]
c001cc83:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001cc8a:	09 d0                	or     eax,edx
c001cc8c:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001cc93:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c001cc9b:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c001cca3:	83 ec 04             	sub    esp,0x4
c001cca6:	52                   	push   edx
c001cca7:	50                   	push   eax
c001cca8:	8d 44 24 24          	lea    eax,[esp+0x24]
c001ccac:	50                   	push   eax
c001ccad:	e8 c2 83 fe ff       	call   c0005074 <f_chmod>
c001ccb2:	83 c4 10             	add    esp,0x10
c001ccb5:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001ccbc:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001ccc3:	85 c0                	test   eax,eax
c001ccc5:	75 09                	jne    c001ccd0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1a8>
c001ccc7:	b8 00 00 00 00       	mov    eax,0x0
c001cccc:	eb 0a                	jmp    c001ccd8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1b0>
c001ccce:	66 90                	xchg   ax,ax
c001ccd0:	b8 01 00 00 00       	mov    eax,0x1
c001ccd5:	8d 76 00             	lea    esi,[esi+0x0]
c001ccd8:	81 c4 2c 01 00 00    	add    esp,0x12c
c001ccde:	c3                   	ret    
c001ccdf:	90                   	nop

c001cce0 <FAT::rename(char const*, char const*)>:
c001cce0:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001cce6:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001ccee:	74 0c                	je     c001ccfc <FAT::rename(char const*, char const*)+0x1c>
c001ccf0:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001ccf8:	75 0e                	jne    c001cd08 <FAT::rename(char const*, char const*)+0x28>
c001ccfa:	66 90                	xchg   ax,ax
c001ccfc:	b8 04 00 00 00       	mov    eax,0x4
c001cd01:	e9 9e 00 00 00       	jmp    c001cda4 <FAT::rename(char const*, char const*)+0xc4>
c001cd06:	66 90                	xchg   ax,ax
c001cd08:	83 ec 08             	sub    esp,0x8
c001cd0b:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001cd12:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001cd19:	50                   	push   eax
c001cd1a:	e8 31 39 fe ff       	call   c0000650 <strcpy>
c001cd1f:	83 c4 10             	add    esp,0x10
c001cd22:	83 ec 08             	sub    esp,0x8
c001cd25:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001cd2c:	50                   	push   eax
c001cd2d:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001cd34:	e8 13 fa ff ff       	call   c001c74c <FAT::fixFilepath(char*)>
c001cd39:	83 c4 10             	add    esp,0x10
c001cd3c:	83 ec 08             	sub    esp,0x8
c001cd3f:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001cd46:	8d 44 24 18          	lea    eax,[esp+0x18]
c001cd4a:	50                   	push   eax
c001cd4b:	e8 00 39 fe ff       	call   c0000650 <strcpy>
c001cd50:	83 c4 10             	add    esp,0x10
c001cd53:	83 ec 08             	sub    esp,0x8
c001cd56:	8d 44 24 14          	lea    eax,[esp+0x14]
c001cd5a:	50                   	push   eax
c001cd5b:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001cd62:	e8 e5 f9 ff ff       	call   c001c74c <FAT::fixFilepath(char*)>
c001cd67:	83 c4 10             	add    esp,0x10
c001cd6a:	83 ec 08             	sub    esp,0x8
c001cd6d:	8d 44 24 14          	lea    eax,[esp+0x14]
c001cd71:	50                   	push   eax
c001cd72:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001cd79:	50                   	push   eax
c001cd7a:	e8 3d 81 fe ff       	call   c0004ebc <f_rename>
c001cd7f:	83 c4 10             	add    esp,0x10
c001cd82:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001cd89:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001cd90:	85 c0                	test   eax,eax
c001cd92:	75 08                	jne    c001cd9c <FAT::rename(char const*, char const*)+0xbc>
c001cd94:	b8 00 00 00 00       	mov    eax,0x0
c001cd99:	eb 09                	jmp    c001cda4 <FAT::rename(char const*, char const*)+0xc4>
c001cd9b:	90                   	nop
c001cd9c:	b8 01 00 00 00       	mov    eax,0x1
c001cda1:	8d 76 00             	lea    esi,[esi+0x0]
c001cda4:	81 c4 1c 02 00 00    	add    esp,0x21c
c001cdaa:	c3                   	ret    
c001cdab:	90                   	nop

c001cdac <FAT::mkdir(char const*)>:
c001cdac:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001cdb2:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001cdba:	75 08                	jne    c001cdc4 <FAT::mkdir(char const*)+0x18>
c001cdbc:	b8 04 00 00 00       	mov    eax,0x4
c001cdc1:	eb 61                	jmp    c001ce24 <FAT::mkdir(char const*)+0x78>
c001cdc3:	90                   	nop
c001cdc4:	83 ec 08             	sub    esp,0x8
c001cdc7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001cdce:	8d 44 24 18          	lea    eax,[esp+0x18]
c001cdd2:	50                   	push   eax
c001cdd3:	e8 78 38 fe ff       	call   c0000650 <strcpy>
c001cdd8:	83 c4 10             	add    esp,0x10
c001cddb:	83 ec 08             	sub    esp,0x8
c001cdde:	8d 44 24 14          	lea    eax,[esp+0x14]
c001cde2:	50                   	push   eax
c001cde3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001cdea:	e8 5d f9 ff ff       	call   c001c74c <FAT::fixFilepath(char*)>
c001cdef:	83 c4 10             	add    esp,0x10
c001cdf2:	83 ec 0c             	sub    esp,0xc
c001cdf5:	8d 44 24 18          	lea    eax,[esp+0x18]
c001cdf9:	50                   	push   eax
c001cdfa:	e8 22 7f fe ff       	call   c0004d21 <f_mkdir>
c001cdff:	83 c4 10             	add    esp,0x10
c001ce02:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001ce09:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001ce10:	85 c0                	test   eax,eax
c001ce12:	75 08                	jne    c001ce1c <FAT::mkdir(char const*)+0x70>
c001ce14:	b8 00 00 00 00       	mov    eax,0x0
c001ce19:	eb 09                	jmp    c001ce24 <FAT::mkdir(char const*)+0x78>
c001ce1b:	90                   	nop
c001ce1c:	b8 01 00 00 00       	mov    eax,0x1
c001ce21:	8d 76 00             	lea    esi,[esi+0x0]
c001ce24:	81 c4 1c 01 00 00    	add    esp,0x11c
c001ce2a:	c3                   	ret    
c001ce2b:	90                   	nop

c001ce2c <FAT::exists(char const*)>:
c001ce2c:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001ce32:	83 ec 08             	sub    esp,0x8
c001ce35:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001ce3c:	8d 44 24 10          	lea    eax,[esp+0x10]
c001ce40:	50                   	push   eax
c001ce41:	e8 0a 38 fe ff       	call   c0000650 <strcpy>
c001ce46:	83 c4 10             	add    esp,0x10
c001ce49:	83 ec 08             	sub    esp,0x8
c001ce4c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001ce50:	50                   	push   eax
c001ce51:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001ce58:	e8 ef f8 ff ff       	call   c001c74c <FAT::fixFilepath(char*)>
c001ce5d:	83 c4 10             	add    esp,0x10
c001ce60:	83 ec 08             	sub    esp,0x8
c001ce63:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c001ce6a:	50                   	push   eax
c001ce6b:	8d 44 24 10          	lea    eax,[esp+0x10]
c001ce6f:	50                   	push   eax
c001ce70:	e8 1a 7b fe ff       	call   c000498f <f_stat>
c001ce75:	83 c4 10             	add    esp,0x10
c001ce78:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001ce7f:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001ce86:	85 c0                	test   eax,eax
c001ce88:	75 06                	jne    c001ce90 <FAT::exists(char const*)+0x64>
c001ce8a:	b0 01                	mov    al,0x1
c001ce8c:	eb 06                	jmp    c001ce94 <FAT::exists(char const*)+0x68>
c001ce8e:	66 90                	xchg   ax,ax
c001ce90:	b0 00                	mov    al,0x0
c001ce92:	66 90                	xchg   ax,ax
c001ce94:	81 c4 2c 02 00 00    	add    esp,0x22c
c001ce9a:	c3                   	ret    
c001ce9b:	90                   	nop

c001ce9c <isoReadDiscSectorHelper>:
c001ce9c:	83 ec 2c             	sub    esp,0x2c
c001ce9f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001cea3:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001cea7:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001ceac:	83 e8 41             	sub    eax,0x41
c001ceaf:	8b 0c 85 e0 ca 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd3520]
c001ceb6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ceba:	ba 00 00 00 00       	mov    edx,0x0
c001cebf:	83 ec 0c             	sub    esp,0xc
c001cec2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001cec6:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001ceca:	52                   	push   edx
c001cecb:	50                   	push   eax
c001cecc:	51                   	push   ecx
c001cecd:	e8 7a db fe ff       	call   c000aa4c <LogicalDisk::read(unsigned long long, int, void*)>
c001ced2:	83 c4 20             	add    esp,0x20
c001ced5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ced9:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001cede:	74 0c                	je     c001ceec <isoReadDiscSectorHelper+0x50>
c001cee0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001cee4:	c1 e0 0b             	shl    eax,0xb
c001cee7:	eb 0b                	jmp    c001cef4 <isoReadDiscSectorHelper+0x58>
c001cee9:	8d 76 00             	lea    esi,[esi+0x0]
c001ceec:	b8 00 00 00 00       	mov    eax,0x0
c001cef1:	8d 76 00             	lea    esi,[esi+0x0]
c001cef4:	83 c4 2c             	add    esp,0x2c
c001cef7:	c3                   	ret    

c001cef8 <iso_kprintf>:
c001cef8:	83 ec 0c             	sub    esp,0xc
c001cefb:	83 ec 08             	sub    esp,0x8
c001cefe:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cf02:	68 24 5b 02 c0       	push   0xc0025b24
c001cf07:	e8 5a a0 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001cf0c:	83 c4 10             	add    esp,0x10
c001cf0f:	90                   	nop
c001cf10:	83 c4 0c             	add    esp,0xc
c001cf13:	c3                   	ret    

c001cf14 <iso_kprintfd>:
c001cf14:	83 ec 0c             	sub    esp,0xc
c001cf17:	83 ec 08             	sub    esp,0x8
c001cf1a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cf1e:	68 f8 4e 02 c0       	push   0xc0024ef8
c001cf23:	e8 3e a0 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001cf28:	83 c4 10             	add    esp,0x10
c001cf2b:	90                   	nop
c001cf2c:	83 c4 0c             	add    esp,0xc
c001cf2f:	c3                   	ret    

c001cf30 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001cf30:	b8 08 00 00 00       	mov    eax,0x8
c001cf35:	c3                   	ret    

c001cf36 <ISO9660::truncate(void*, unsigned long long)>:
c001cf36:	b8 01 00 00 00       	mov    eax,0x1
c001cf3b:	c3                   	ret    

c001cf3c <ISO9660::getName()>:
c001cf3c:	b8 b0 5e 02 c0       	mov    eax,0xc0025eb0
c001cf41:	c3                   	ret    

c001cf42 <ISO9660::closeDir(void*)>:
c001cf42:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cf46:	8b 00                	mov    eax,DWORD PTR [eax]
c001cf48:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c001cf4b:	90                   	nop

c001cf4c <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001cf4c:	b8 01 00 00 00       	mov    eax,0x1
c001cf51:	c3                   	ret    

c001cf52 <ISO9660::unlink(char const*)>:
c001cf52:	b8 01 00 00 00       	mov    eax,0x1
c001cf57:	c3                   	ret    

c001cf58 <ISO9660::write(void*, unsigned long, void*, int*)>:
c001cf58:	b8 03 00 00 00       	mov    eax,0x3
c001cf5d:	c3                   	ret    

c001cf5e <ISO9660::rename(char const*, char const*)>:
c001cf5e:	b8 01 00 00 00       	mov    eax,0x1
c001cf63:	c3                   	ret    

c001cf64 <ISO9660::mkdir(char const*)>:
c001cf64:	b8 01 00 00 00       	mov    eax,0x1
c001cf69:	c3                   	ret    

c001cf6a <ISO9660::~ISO9660()>:
c001cf6a:	83 ec 0c             	sub    esp,0xc
c001cf6d:	ba f0 5f 02 c0       	mov    edx,0xc0025ff0
c001cf72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf76:	89 10                	mov    DWORD PTR [eax],edx
c001cf78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf7c:	83 ec 0c             	sub    esp,0xc
c001cf7f:	50                   	push   eax
c001cf80:	e8 51 ae fe ff       	call   c0007dd6 <Filesystem::~Filesystem()>
c001cf85:	83 c4 10             	add    esp,0x10
c001cf88:	90                   	nop
c001cf89:	83 c4 0c             	add    esp,0xc
c001cf8c:	c3                   	ret    
c001cf8d:	90                   	nop

c001cf8e <ISO9660::~ISO9660()>:
c001cf8e:	83 ec 0c             	sub    esp,0xc
c001cf91:	83 ec 0c             	sub    esp,0xc
c001cf94:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cf98:	e8 cd ff ff ff       	call   c001cf6a <ISO9660::~ISO9660()>
c001cf9d:	83 c4 10             	add    esp,0x10
c001cfa0:	83 ec 08             	sub    esp,0x8
c001cfa3:	6a 08                	push   0x8
c001cfa5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cfa9:	e8 47 03 ff ff       	call   c000d2f5 <operator delete(void*, unsigned long)>
c001cfae:	83 c4 10             	add    esp,0x10
c001cfb1:	83 c4 0c             	add    esp,0xc
c001cfb4:	c3                   	ret    
c001cfb5:	90                   	nop

c001cfb6 <ISO9660::exists(char const*)>:
c001cfb6:	83 ec 18             	sub    esp,0x18
c001cfb9:	68 cb 5e 02 c0       	push   0xc0025ecb
c001cfbe:	e8 c7 2e ff ff       	call   c000fe8a <KePanic(char const*)>
c001cfc3:	31 c0                	xor    eax,eax
c001cfc5:	83 c4 1c             	add    esp,0x1c
c001cfc8:	c3                   	ret    
c001cfc9:	90                   	nop

c001cfca <ISO9660::open(char const*, void**, FileOpenMode)>:
c001cfca:	56                   	push   esi
c001cfcb:	53                   	push   ebx
c001cfcc:	53                   	push   ebx
c001cfcd:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001cfd1:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001cfd5:	85 db                	test   ebx,ebx
c001cfd7:	0f 84 ca 00 00 00    	je     c001d0a7 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001cfdd:	85 f6                	test   esi,esi
c001cfdf:	0f 84 c2 00 00 00    	je     c001d0a7 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001cfe5:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c001cfea:	b8 03 00 00 00       	mov    eax,0x3
c001cfef:	0f 85 b7 00 00 00    	jne    c001d0ac <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001cff5:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001cff7:	38 0d 80 fc 02 c0    	cmp    BYTE PTR ds:0xc002fc80,cl
c001cffd:	0f be 05 80 fc 02 c0 	movsx  eax,BYTE PTR ds:0xc002fc80
c001d004:	74 1b                	je     c001d021 <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c001d006:	85 c0                	test   eax,eax
c001d008:	74 10                	je     c001d01a <ISO9660::open(char const*, void**, FileOpenMode)+0x50>
c001d00a:	83 ec 0c             	sub    esp,0xc
c001d00d:	68 e9 5e 02 c0       	push   0xc0025ee9
c001d012:	e8 73 2e ff ff       	call   c000fe8a <KePanic(char const*)>
c001d017:	83 c4 10             	add    esp,0x10
c001d01a:	8a 03                	mov    al,BYTE PTR [ebx]
c001d01c:	a2 80 fc 02 c0       	mov    ds:0xc002fc80,al
c001d021:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001d024:	8b 04 85 dc c9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3624]
c001d02b:	85 c0                	test   eax,eax
c001d02d:	74 09                	je     c001d038 <ISO9660::open(char const*, void**, FileOpenMode)+0x6e>
c001d02f:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001d036:	74 48                	je     c001d080 <ISO9660::open(char const*, void**, FileOpenMode)+0xb6>
c001d038:	83 ec 0c             	sub    esp,0xc
c001d03b:	68 f9 5e 02 c0       	push   0xc0025ef9
c001d040:	e8 21 9f fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001d045:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001d048:	83 c4 10             	add    esp,0x10
c001d04b:	8b 04 85 dc c9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3624]
c001d052:	85 c0                	test   eax,eax
c001d054:	74 17                	je     c001d06d <ISO9660::open(char const*, void**, FileOpenMode)+0xa3>
c001d056:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001d05d:	83 ec 0c             	sub    esp,0xc
c001d060:	68 19 5f 02 c0       	push   0xc0025f19
c001d065:	e8 fc 9e fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001d06a:	83 c4 10             	add    esp,0x10
c001d06d:	0f be 05 80 fc 02 c0 	movsx  eax,BYTE PTR ds:0xc002fc80
c001d074:	83 ec 0c             	sub    esp,0xc
c001d077:	50                   	push   eax
c001d078:	e8 ca 9b fe ff       	call   c0006c47 <init_percd>
c001d07d:	83 c4 10             	add    esp,0x10
c001d080:	51                   	push   ecx
c001d081:	83 c3 03             	add    ebx,0x3
c001d084:	51                   	push   ecx
c001d085:	6a 00                	push   0x0
c001d087:	53                   	push   ebx
c001d088:	e8 7d 96 fe ff       	call   c000670a <iso_open>
c001d08d:	83 c4 10             	add    esp,0x10
c001d090:	89 c2                	mov    edx,eax
c001d092:	b8 01 00 00 00       	mov    eax,0x1
c001d097:	83 fa ff             	cmp    edx,0xffffffff
c001d09a:	74 10                	je     c001d0ac <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001d09c:	83 c2 32             	add    edx,0x32
c001d09f:	31 c0                	xor    eax,eax
c001d0a1:	01 d2                	add    edx,edx
c001d0a3:	89 16                	mov    DWORD PTR [esi],edx
c001d0a5:	eb 05                	jmp    c001d0ac <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001d0a7:	b8 04 00 00 00       	mov    eax,0x4
c001d0ac:	5a                   	pop    edx
c001d0ad:	5b                   	pop    ebx
c001d0ae:	5e                   	pop    esi
c001d0af:	c3                   	ret    

c001d0b0 <ISO9660::read(void*, unsigned long, void*, int*)>:
c001d0b0:	53                   	push   ebx
c001d0b1:	83 ec 08             	sub    esp,0x8
c001d0b4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d0b8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d0bc:	85 c0                	test   eax,eax
c001d0be:	74 2d                	je     c001d0ed <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001d0c0:	85 db                	test   ebx,ebx
c001d0c2:	74 29                	je     c001d0ed <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001d0c4:	52                   	push   edx
c001d0c5:	b9 02 00 00 00       	mov    ecx,0x2
c001d0ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d0ce:	99                   	cdq    
c001d0cf:	f7 f9                	idiv   ecx
c001d0d1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001d0d5:	83 e8 32             	sub    eax,0x32
c001d0d8:	50                   	push   eax
c001d0d9:	e8 d4 96 fe ff       	call   c00067b2 <iso_read>
c001d0de:	83 c4 10             	add    esp,0x10
c001d0e1:	89 03                	mov    DWORD PTR [ebx],eax
c001d0e3:	09 d0                	or     eax,edx
c001d0e5:	0f 94 c0             	sete   al
c001d0e8:	0f b6 c0             	movzx  eax,al
c001d0eb:	eb 05                	jmp    c001d0f2 <ISO9660::read(void*, unsigned long, void*, int*)+0x42>
c001d0ed:	b8 04 00 00 00       	mov    eax,0x4
c001d0f2:	83 c4 08             	add    esp,0x8
c001d0f5:	5b                   	pop    ebx
c001d0f6:	c3                   	ret    
c001d0f7:	90                   	nop

c001d0f8 <ISO9660::seek(void*, unsigned long long)>:
c001d0f8:	57                   	push   edi
c001d0f9:	b8 04 00 00 00       	mov    eax,0x4
c001d0fe:	56                   	push   esi
c001d0ff:	51                   	push   ecx
c001d100:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d104:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001d108:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001d10c:	85 d2                	test   edx,edx
c001d10e:	74 26                	je     c001d136 <ISO9660::seek(void*, unsigned long long)+0x3e>
c001d110:	89 d0                	mov    eax,edx
c001d112:	b9 02 00 00 00       	mov    ecx,0x2
c001d117:	6a 00                	push   0x0
c001d119:	99                   	cdq    
c001d11a:	f7 f9                	idiv   ecx
c001d11c:	57                   	push   edi
c001d11d:	56                   	push   esi
c001d11e:	83 e8 32             	sub    eax,0x32
c001d121:	50                   	push   eax
c001d122:	e8 a1 97 fe ff       	call   c00068c8 <iso_seek>
c001d127:	83 c4 10             	add    esp,0x10
c001d12a:	31 f0                	xor    eax,esi
c001d12c:	31 fa                	xor    edx,edi
c001d12e:	09 d0                	or     eax,edx
c001d130:	0f 95 c0             	setne  al
c001d133:	0f b6 c0             	movzx  eax,al
c001d136:	5a                   	pop    edx
c001d137:	5e                   	pop    esi
c001d138:	5f                   	pop    edi
c001d139:	c3                   	ret    

c001d13a <ISO9660::tell(void*, unsigned long long*)>:
c001d13a:	53                   	push   ebx
c001d13b:	83 ec 08             	sub    esp,0x8
c001d13e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d142:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001d146:	85 c0                	test   eax,eax
c001d148:	74 24                	je     c001d16e <ISO9660::tell(void*, unsigned long long*)+0x34>
c001d14a:	85 db                	test   ebx,ebx
c001d14c:	74 20                	je     c001d16e <ISO9660::tell(void*, unsigned long long*)+0x34>
c001d14e:	b9 02 00 00 00       	mov    ecx,0x2
c001d153:	99                   	cdq    
c001d154:	f7 f9                	idiv   ecx
c001d156:	83 ec 0c             	sub    esp,0xc
c001d159:	83 e8 32             	sub    eax,0x32
c001d15c:	50                   	push   eax
c001d15d:	e8 ea 97 fe ff       	call   c000694c <iso_tell>
c001d162:	83 c4 10             	add    esp,0x10
c001d165:	89 03                	mov    DWORD PTR [ebx],eax
c001d167:	31 c0                	xor    eax,eax
c001d169:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c001d16c:	eb 05                	jmp    c001d173 <ISO9660::tell(void*, unsigned long long*)+0x39>
c001d16e:	b8 04 00 00 00       	mov    eax,0x4
c001d173:	83 c4 08             	add    esp,0x8
c001d176:	5b                   	pop    ebx
c001d177:	c3                   	ret    

c001d178 <ISO9660::stat(void*, unsigned long long*)>:
c001d178:	56                   	push   esi
c001d179:	53                   	push   ebx
c001d17a:	83 ec 10             	sub    esp,0x10
c001d17d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d181:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001d185:	68 3d 5f 02 c0       	push   0xc0025f3d
c001d18a:	e8 d7 9d fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001d18f:	83 c4 10             	add    esp,0x10
c001d192:	85 db                	test   ebx,ebx
c001d194:	74 2a                	je     c001d1c0 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001d196:	85 f6                	test   esi,esi
c001d198:	74 26                	je     c001d1c0 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001d19a:	89 d8                	mov    eax,ebx
c001d19c:	b9 02 00 00 00       	mov    ecx,0x2
c001d1a1:	99                   	cdq    
c001d1a2:	83 ec 0c             	sub    esp,0xc
c001d1a5:	f7 f9                	idiv   ecx
c001d1a7:	83 e8 32             	sub    eax,0x32
c001d1aa:	50                   	push   eax
c001d1ab:	e8 cd 97 fe ff       	call   c000697d <iso_total>
c001d1b0:	83 c4 10             	add    esp,0x10
c001d1b3:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c001d1ba:	89 06                	mov    DWORD PTR [esi],eax
c001d1bc:	31 c0                	xor    eax,eax
c001d1be:	eb 05                	jmp    c001d1c5 <ISO9660::stat(void*, unsigned long long*)+0x4d>
c001d1c0:	b8 04 00 00 00       	mov    eax,0x4
c001d1c5:	5a                   	pop    edx
c001d1c6:	5b                   	pop    ebx
c001d1c7:	5e                   	pop    esi
c001d1c8:	c3                   	ret    
c001d1c9:	90                   	nop

c001d1ca <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001d1ca:	55                   	push   ebp
c001d1cb:	57                   	push   edi
c001d1cc:	56                   	push   esi
c001d1cd:	53                   	push   ebx
c001d1ce:	83 ec 18             	sub    esp,0x18
c001d1d1:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001d1d5:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001d1d9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d1dd:	68 45 5f 02 c0       	push   0xc0025f45
c001d1e2:	e8 7f 9d fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001d1e7:	83 c4 10             	add    esp,0x10
c001d1ea:	85 ff                	test   edi,edi
c001d1ec:	0f 94 c0             	sete   al
c001d1ef:	85 f6                	test   esi,esi
c001d1f1:	0f 94 c2             	sete   dl
c001d1f4:	09 d0                	or     eax,edx
c001d1f6:	a8 01                	test   al,0x1
c001d1f8:	0f 85 dd 00 00 00    	jne    c001d2db <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001d1fe:	85 db                	test   ebx,ebx
c001d200:	0f 84 d5 00 00 00    	je     c001d2db <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001d206:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001d209:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c001d20f:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001d216:	0f be 05 80 fc 02 c0 	movsx  eax,BYTE PTR ds:0xc002fc80
c001d21d:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001d21f:	38 0d 80 fc 02 c0    	cmp    BYTE PTR ds:0xc002fc80,cl
c001d225:	74 1b                	je     c001d242 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x78>
c001d227:	85 c0                	test   eax,eax
c001d229:	74 10                	je     c001d23b <ISO9660::stat(char const*, unsigned long long*, bool*)+0x71>
c001d22b:	83 ec 0c             	sub    esp,0xc
c001d22e:	68 e9 5e 02 c0       	push   0xc0025ee9
c001d233:	e8 52 2c ff ff       	call   c000fe8a <KePanic(char const*)>
c001d238:	83 c4 10             	add    esp,0x10
c001d23b:	8a 03                	mov    al,BYTE PTR [ebx]
c001d23d:	a2 80 fc 02 c0       	mov    ds:0xc002fc80,al
c001d242:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001d245:	8b 04 85 dc c9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3624]
c001d24c:	85 c0                	test   eax,eax
c001d24e:	74 09                	je     c001d259 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8f>
c001d250:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001d257:	74 51                	je     c001d2aa <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe0>
c001d259:	83 ec 0c             	sub    esp,0xc
c001d25c:	68 4d 5f 02 c0       	push   0xc0025f4d
c001d261:	e8 00 9d fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001d266:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001d269:	83 c4 10             	add    esp,0x10
c001d26c:	83 3c 85 dc c9 02 c0 00 	cmp    DWORD PTR [eax*4-0x3ffd3624],0x0
c001d274:	74 21                	je     c001d297 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xcd>
c001d276:	83 ec 0c             	sub    esp,0xc
c001d279:	68 6d 5f 02 c0       	push   0xc0025f6d
c001d27e:	e8 e3 9c fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001d283:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001d286:	83 c4 10             	add    esp,0x10
c001d289:	8b 04 85 dc c9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3624]
c001d290:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001d297:	0f be 05 80 fc 02 c0 	movsx  eax,BYTE PTR ds:0xc002fc80
c001d29e:	83 ec 0c             	sub    esp,0xc
c001d2a1:	50                   	push   eax
c001d2a2:	e8 a0 99 fe ff       	call   c0006c47 <init_percd>
c001d2a7:	83 c4 10             	add    esp,0x10
c001d2aa:	52                   	push   edx
c001d2ab:	83 c3 03             	add    ebx,0x3
c001d2ae:	52                   	push   edx
c001d2af:	6a 00                	push   0x0
c001d2b1:	53                   	push   ebx
c001d2b2:	e8 53 94 fe ff       	call   c000670a <iso_open>
c001d2b7:	83 c4 10             	add    esp,0x10
c001d2ba:	83 f8 ff             	cmp    eax,0xffffffff
c001d2bd:	89 c5                	mov    ebp,eax
c001d2bf:	75 21                	jne    c001d2e2 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x118>
c001d2c1:	50                   	push   eax
c001d2c2:	50                   	push   eax
c001d2c3:	6a 01                	push   0x1
c001d2c5:	53                   	push   ebx
c001d2c6:	e8 3f 94 fe ff       	call   c000670a <iso_open>
c001d2cb:	83 c4 10             	add    esp,0x10
c001d2ce:	ba 02 00 00 00       	mov    edx,0x2
c001d2d3:	40                   	inc    eax
c001d2d4:	74 2b                	je     c001d301 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001d2d6:	c6 06 01             	mov    BYTE PTR [esi],0x1
c001d2d9:	eb 24                	jmp    c001d2ff <ISO9660::stat(char const*, unsigned long long*, bool*)+0x135>
c001d2db:	ba 04 00 00 00       	mov    edx,0x4
c001d2e0:	eb 1f                	jmp    c001d301 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001d2e2:	83 ec 0c             	sub    esp,0xc
c001d2e5:	50                   	push   eax
c001d2e6:	e8 92 96 fe ff       	call   c000697d <iso_total>
c001d2eb:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001d2f2:	89 07                	mov    DWORD PTR [edi],eax
c001d2f4:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d2f7:	e8 98 94 fe ff       	call   c0006794 <iso_close>
c001d2fc:	83 c4 10             	add    esp,0x10
c001d2ff:	31 d2                	xor    edx,edx
c001d301:	83 c4 0c             	add    esp,0xc
c001d304:	89 d0                	mov    eax,edx
c001d306:	5b                   	pop    ebx
c001d307:	5e                   	pop    esi
c001d308:	5f                   	pop    edi
c001d309:	5d                   	pop    ebp
c001d30a:	c3                   	ret    
c001d30b:	90                   	nop

c001d30c <ISO9660::close(void*)>:
c001d30c:	83 ec 0c             	sub    esp,0xc
c001d30f:	b8 04 00 00 00       	mov    eax,0x4
c001d314:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d318:	85 d2                	test   edx,edx
c001d31a:	74 1b                	je     c001d337 <ISO9660::close(void*)+0x2b>
c001d31c:	89 d0                	mov    eax,edx
c001d31e:	b9 02 00 00 00       	mov    ecx,0x2
c001d323:	99                   	cdq    
c001d324:	83 ec 0c             	sub    esp,0xc
c001d327:	f7 f9                	idiv   ecx
c001d329:	83 e8 32             	sub    eax,0x32
c001d32c:	50                   	push   eax
c001d32d:	e8 62 94 fe ff       	call   c0006794 <iso_close>
c001d332:	83 c4 10             	add    esp,0x10
c001d335:	31 c0                	xor    eax,eax
c001d337:	83 c4 0c             	add    esp,0xc
c001d33a:	c3                   	ret    
c001d33b:	90                   	nop

c001d33c <ISO9660::openDir(char const*, void**)>:
c001d33c:	56                   	push   esi
c001d33d:	53                   	push   ebx
c001d33e:	50                   	push   eax
c001d33f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d343:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001d347:	85 db                	test   ebx,ebx
c001d349:	0f 84 bd 00 00 00    	je     c001d40c <ISO9660::openDir(char const*, void**)+0xd0>
c001d34f:	85 f6                	test   esi,esi
c001d351:	0f 84 b5 00 00 00    	je     c001d40c <ISO9660::openDir(char const*, void**)+0xd0>
c001d357:	8a 13                	mov    dl,BYTE PTR [ebx]
c001d359:	38 15 80 fc 02 c0    	cmp    BYTE PTR ds:0xc002fc80,dl
c001d35f:	0f be 05 80 fc 02 c0 	movsx  eax,BYTE PTR ds:0xc002fc80
c001d366:	74 1b                	je     c001d383 <ISO9660::openDir(char const*, void**)+0x47>
c001d368:	85 c0                	test   eax,eax
c001d36a:	74 10                	je     c001d37c <ISO9660::openDir(char const*, void**)+0x40>
c001d36c:	83 ec 0c             	sub    esp,0xc
c001d36f:	68 e9 5e 02 c0       	push   0xc0025ee9
c001d374:	e8 11 2b ff ff       	call   c000fe8a <KePanic(char const*)>
c001d379:	83 c4 10             	add    esp,0x10
c001d37c:	8a 03                	mov    al,BYTE PTR [ebx]
c001d37e:	a2 80 fc 02 c0       	mov    ds:0xc002fc80,al
c001d383:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001d386:	8b 04 85 dc c9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3624]
c001d38d:	85 c0                	test   eax,eax
c001d38f:	74 10                	je     c001d3a1 <ISO9660::openDir(char const*, void**)+0x65>
c001d391:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001d398:	74 1a                	je     c001d3b4 <ISO9660::openDir(char const*, void**)+0x78>
c001d39a:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001d3a1:	0f be 05 80 fc 02 c0 	movsx  eax,BYTE PTR ds:0xc002fc80
c001d3a8:	83 ec 0c             	sub    esp,0xc
c001d3ab:	50                   	push   eax
c001d3ac:	e8 96 98 fe ff       	call   c0006c47 <init_percd>
c001d3b1:	83 c4 10             	add    esp,0x10
c001d3b4:	50                   	push   eax
c001d3b5:	83 c3 03             	add    ebx,0x3
c001d3b8:	50                   	push   eax
c001d3b9:	6a 01                	push   0x1
c001d3bb:	53                   	push   ebx
c001d3bc:	e8 49 93 fe ff       	call   c000670a <iso_open>
c001d3c1:	83 c4 10             	add    esp,0x10
c001d3c4:	83 f8 ff             	cmp    eax,0xffffffff
c001d3c7:	89 c3                	mov    ebx,eax
c001d3c9:	a1 78 fa 02 c0       	mov    eax,ds:0xc002fa78
c001d3ce:	75 1c                	jne    c001d3ec <ISO9660::openDir(char const*, void**)+0xb0>
c001d3d0:	53                   	push   ebx
c001d3d1:	53                   	push   ebx
c001d3d2:	68 91 5f 02 c0       	push   0xc0025f91
c001d3d7:	ff b0 a6 05 00 00    	push   DWORD PTR [eax+0x5a6]
c001d3dd:	e8 44 53 ff ff       	call   c0012726 <VgaText::puts(char const*)>
c001d3e2:	83 c4 10             	add    esp,0x10
c001d3e5:	b8 01 00 00 00       	mov    eax,0x1
c001d3ea:	eb 25                	jmp    c001d411 <ISO9660::openDir(char const*, void**)+0xd5>
c001d3ec:	51                   	push   ecx
c001d3ed:	01 db                	add    ebx,ebx
c001d3ef:	51                   	push   ecx
c001d3f0:	83 c3 65             	add    ebx,0x65
c001d3f3:	68 a4 5f 02 c0       	push   0xc0025fa4
c001d3f8:	ff b0 a6 05 00 00    	push   DWORD PTR [eax+0x5a6]
c001d3fe:	e8 23 53 ff ff       	call   c0012726 <VgaText::puts(char const*)>
c001d403:	83 c4 10             	add    esp,0x10
c001d406:	31 c0                	xor    eax,eax
c001d408:	89 1e                	mov    DWORD PTR [esi],ebx
c001d40a:	eb 05                	jmp    c001d411 <ISO9660::openDir(char const*, void**)+0xd5>
c001d40c:	b8 04 00 00 00       	mov    eax,0x4
c001d411:	5a                   	pop    edx
c001d412:	5b                   	pop    ebx
c001d413:	5e                   	pop    esi
c001d414:	c3                   	ret    
c001d415:	90                   	nop

c001d416 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001d416:	55                   	push   ebp
c001d417:	57                   	push   edi
c001d418:	56                   	push   esi
c001d419:	53                   	push   ebx
c001d41a:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001d420:	8b 9c 24 34 01 00 00 	mov    ebx,DWORD PTR [esp+0x134]
c001d427:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c001d42e:	8b ac 24 40 01 00 00 	mov    ebp,DWORD PTR [esp+0x140]
c001d435:	85 db                	test   ebx,ebx
c001d437:	0f 84 e4 00 00 00    	je     c001d521 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10b>
c001d43d:	85 ed                	test   ebp,ebp
c001d43f:	0f 84 dc 00 00 00    	je     c001d521 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10b>
c001d445:	83 ec 0c             	sub    esp,0xc
c001d448:	68 b7 5f 02 c0       	push   0xc0025fb7
c001d44d:	e8 14 9b fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001d452:	89 d8                	mov    eax,ebx
c001d454:	b9 02 00 00 00       	mov    ecx,0x2
c001d459:	99                   	cdq    
c001d45a:	f7 f9                	idiv   ecx
c001d45c:	83 e8 32             	sub    eax,0x32
c001d45f:	89 04 24             	mov    DWORD PTR [esp],eax
c001d462:	e8 68 95 fe ff       	call   c00069cf <iso_readdir>
c001d467:	83 c4 10             	add    esp,0x10
c001d46a:	85 c0                	test   eax,eax
c001d46c:	89 c3                	mov    ebx,eax
c001d46e:	75 38                	jne    c001d4a8 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x92>
c001d470:	a1 78 fa 02 c0       	mov    eax,ds:0xc002fa78
c001d475:	53                   	push   ebx
c001d476:	53                   	push   ebx
c001d477:	68 c2 5f 02 c0       	push   0xc0025fc2
c001d47c:	ff b0 a6 05 00 00    	push   DWORD PTR [eax+0x5a6]
c001d482:	e8 9f 52 ff ff       	call   c0012726 <VgaText::puts(char const*)>
c001d487:	83 c4 0c             	add    esp,0xc
c001d48a:	68 10 01 00 00       	push   0x110
c001d48f:	6a 00                	push   0x0
c001d491:	57                   	push   edi
c001d492:	e8 59 30 fe ff       	call   c00004f0 <memset>
c001d497:	83 c4 10             	add    esp,0x10
c001d49a:	b8 01 00 00 00       	mov    eax,0x1
c001d49f:	c7 45 00 00 00 00 00 	mov    DWORD PTR [ebp+0x0],0x0
c001d4a6:	eb 7e                	jmp    c001d526 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x110>
c001d4a8:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001d4ae:	8d 70 08             	lea    esi,[eax+0x8]
c001d4b1:	83 ec 0c             	sub    esp,0xc
c001d4b4:	56                   	push   esi
c001d4b5:	e8 c6 30 fe ff       	call   c0000580 <strlen>
c001d4ba:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001d4c2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d4c6:	83 c4 10             	add    esp,0x10
c001d4c9:	83 7b 04 ff          	cmp    DWORD PTR [ebx+0x4],0xffffffff
c001d4cd:	75 0a                	jne    c001d4d9 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc3>
c001d4cf:	83 3b ff             	cmp    DWORD PTR [ebx],0xffffffff
c001d4d2:	b8 02 00 00 00       	mov    eax,0x2
c001d4d7:	74 05                	je     c001d4de <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc8>
c001d4d9:	b8 01 00 00 00       	mov    eax,0x1
c001d4de:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d4e2:	50                   	push   eax
c001d4e3:	50                   	push   eax
c001d4e4:	56                   	push   esi
c001d4e5:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d4e9:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001d4ed:	50                   	push   eax
c001d4ee:	e8 5d 31 fe ff       	call   c0000650 <strcpy>
c001d4f3:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001d4fa:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d4fc:	c7 45 00 10 01 00 00 	mov    DWORD PTR [ebp+0x0],0x110
c001d503:	5a                   	pop    edx
c001d504:	a1 78 fa 02 c0       	mov    eax,ds:0xc002fa78
c001d509:	59                   	pop    ecx
c001d50a:	68 d5 5f 02 c0       	push   0xc0025fd5
c001d50f:	ff b0 a6 05 00 00    	push   DWORD PTR [eax+0x5a6]
c001d515:	e8 0c 52 ff ff       	call   c0012726 <VgaText::puts(char const*)>
c001d51a:	83 c4 10             	add    esp,0x10
c001d51d:	31 c0                	xor    eax,eax
c001d51f:	eb 05                	jmp    c001d526 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x110>
c001d521:	b8 04 00 00 00       	mov    eax,0x4
c001d526:	81 c4 1c 01 00 00    	add    esp,0x11c
c001d52c:	5b                   	pop    ebx
c001d52d:	5e                   	pop    esi
c001d52e:	5f                   	pop    edi
c001d52f:	5d                   	pop    ebp
c001d530:	c3                   	ret    

c001d531 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001d531:	57                   	push   edi
c001d532:	56                   	push   esi
c001d533:	53                   	push   ebx
c001d534:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d538:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001d53c:	39 35 84 fc 02 c0    	cmp    DWORD PTR ds:0xc002fc84,esi
c001d542:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001d546:	0f be cb             	movsx  ecx,bl
c001d549:	75 0b                	jne    c001d556 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x25>
c001d54b:	0f be 05 44 72 02 c0 	movsx  eax,BYTE PTR ds:0xc0027244
c001d552:	39 c8                	cmp    eax,ecx
c001d554:	74 47                	je     c001d59d <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001d556:	83 ec 0c             	sub    esp,0xc
c001d559:	31 d2                	xor    edx,edx
c001d55b:	68 a0 fc 02 c0       	push   0xc002fca0
c001d560:	6a 01                	push   0x1
c001d562:	52                   	push   edx
c001d563:	56                   	push   esi
c001d564:	ff 34 8d dc c9 02 c0 	push   DWORD PTR [ecx*4-0x3ffd3624]
c001d56b:	e8 dc d4 fe ff       	call   c000aa4c <LogicalDisk::read(unsigned long long, int, void*)>
c001d570:	83 c4 20             	add    esp,0x20
c001d573:	85 c0                	test   eax,eax
c001d575:	75 0e                	jne    c001d585 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x54>
c001d577:	89 35 84 fc 02 c0    	mov    DWORD PTR ds:0xc002fc84,esi
c001d57d:	88 1d 44 72 02 c0    	mov    BYTE PTR ds:0xc0027244,bl
c001d583:	eb 18                	jmp    c001d59d <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001d585:	50                   	push   eax
c001d586:	68 00 08 00 00       	push   0x800
c001d58b:	6a 00                	push   0x0
c001d58d:	57                   	push   edi
c001d58e:	e8 5d 2f fe ff       	call   c00004f0 <memset>
c001d593:	83 c4 10             	add    esp,0x10
c001d596:	b8 01 00 00 00       	mov    eax,0x1
c001d59b:	eb 0e                	jmp    c001d5ab <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x7a>
c001d59d:	be a0 fc 02 c0       	mov    esi,0xc002fca0
c001d5a2:	b9 00 08 00 00       	mov    ecx,0x800
c001d5a7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d5a9:	31 c0                	xor    eax,eax
c001d5ab:	5b                   	pop    ebx
c001d5ac:	5e                   	pop    esi
c001d5ad:	5f                   	pop    edi
c001d5ae:	c3                   	ret    
c001d5af:	90                   	nop

c001d5b0 <ISO9660::tryMount(LogicalDisk*, int)>:
c001d5b0:	53                   	push   ebx
c001d5b1:	81 ec 0c 08 00 00    	sub    esp,0x80c
c001d5b7:	c7 05 84 fc 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc002fc84,0xdeadbeef
c001d5c1:	8b 84 24 1c 08 00 00 	mov    eax,DWORD PTR [esp+0x81c]
c001d5c8:	8d 58 41             	lea    ebx,[eax+0x41]
c001d5cb:	0f be db             	movsx  ebx,bl
c001d5ce:	53                   	push   ebx
c001d5cf:	8d 44 24 08          	lea    eax,[esp+0x8]
c001d5d3:	50                   	push   eax
c001d5d4:	6a 10                	push   0x10
c001d5d6:	e8 56 ff ff ff       	call   c001d531 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001d5db:	83 c4 10             	add    esp,0x10
c001d5de:	31 d2                	xor    edx,edx
c001d5e0:	85 c0                	test   eax,eax
c001d5e2:	75 33                	jne    c001d617 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001d5e4:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001d5e9:	75 2c                	jne    c001d617 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001d5eb:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001d5f0:	75 25                	jne    c001d617 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001d5f2:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001d5f7:	75 1e                	jne    c001d617 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001d5f9:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001d5fe:	75 17                	jne    c001d617 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001d600:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001d605:	75 10                	jne    c001d617 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001d607:	83 ec 0c             	sub    esp,0xc
c001d60a:	53                   	push   ebx
c001d60b:	e8 37 96 fe ff       	call   c0006c47 <init_percd>
c001d610:	83 c4 10             	add    esp,0x10
c001d613:	40                   	inc    eax
c001d614:	0f 95 c2             	setne  dl
c001d617:	81 c4 08 08 00 00    	add    esp,0x808
c001d61d:	88 d0                	mov    al,dl
c001d61f:	5b                   	pop    ebx
c001d620:	c3                   	ret    
c001d621:	90                   	nop

c001d622 <ISO9660::ISO9660()>:
c001d622:	83 ec 0c             	sub    esp,0xc
c001d625:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d629:	83 ec 0c             	sub    esp,0xc
c001d62c:	50                   	push   eax
c001d62d:	e8 80 a7 fe ff       	call   c0007db2 <Filesystem::Filesystem()>
c001d632:	83 c4 10             	add    esp,0x10
c001d635:	ba f0 5f 02 c0       	mov    edx,0xc0025ff0
c001d63a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d63e:	89 10                	mov    DWORD PTR [eax],edx
c001d640:	e8 14 97 fe ff       	call   c0006d59 <fs_iso9660_init>
c001d645:	90                   	nop
c001d646:	83 c4 0c             	add    esp,0xc
c001d649:	c3                   	ret    

c001d64a <SoundCard::beginPlayback()>:
c001d64a:	c7 44 24 04 54 60 02 c0 	mov    DWORD PTR [esp+0x4],0xc0026054
c001d652:	e9 33 28 ff ff       	jmp    c000fe8a <KePanic(char const*)>
c001d657:	90                   	nop

c001d658 <SoundCard::stopPlayback()>:
c001d658:	c7 44 24 04 54 60 02 c0 	mov    DWORD PTR [esp+0x4],0xc0026054
c001d660:	e9 25 28 ff ff       	jmp    c000fe8a <KePanic(char const*)>
c001d665:	90                   	nop

c001d666 <SoundCard::SoundCard(char const*)>:
c001d666:	83 ec 1c             	sub    esp,0x1c
c001d669:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d66d:	83 ec 08             	sub    esp,0x8
c001d670:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d674:	50                   	push   eax
c001d675:	e8 de c4 fe ff       	call   c0009b58 <Device::Device(char const*)>
c001d67a:	83 c4 10             	add    esp,0x10
c001d67d:	ba a0 60 02 c0       	mov    edx,0xc00260a0
c001d682:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d686:	89 10                	mov    DWORD PTR [eax],edx
c001d688:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d68c:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001d693:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d697:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c001d6a1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d6a5:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c001d6af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d6b3:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c001d6bd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d6c1:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001d6cb:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001d6d3:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001d6d8:	7f 1a                	jg     c001d6f4 <SoundCard::SoundCard(char const*)+0x8e>
c001d6da:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d6de:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d6e2:	83 c2 54             	add    edx,0x54
c001d6e5:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001d6ed:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001d6f2:	eb df                	jmp    c001d6d3 <SoundCard::SoundCard(char const*)+0x6d>
c001d6f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d6f8:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001d6ff:	90                   	nop
c001d700:	83 c4 1c             	add    esp,0x1c
c001d703:	c3                   	ret    

c001d704 <SoundCard::~SoundCard()>:
c001d704:	83 ec 0c             	sub    esp,0xc
c001d707:	ba a0 60 02 c0       	mov    edx,0xc00260a0
c001d70c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d710:	89 10                	mov    DWORD PTR [eax],edx
c001d712:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d716:	83 ec 0c             	sub    esp,0xc
c001d719:	50                   	push   eax
c001d71a:	e8 d9 c1 fe ff       	call   c00098f8 <Device::~Device()>
c001d71f:	83 c4 10             	add    esp,0x10
c001d722:	90                   	nop
c001d723:	83 c4 0c             	add    esp,0xc
c001d726:	c3                   	ret    
c001d727:	90                   	nop

c001d728 <SoundCard::~SoundCard()>:
c001d728:	83 ec 0c             	sub    esp,0xc
c001d72b:	83 ec 0c             	sub    esp,0xc
c001d72e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d732:	e8 cd ff ff ff       	call   c001d704 <SoundCard::~SoundCard()>
c001d737:	83 c4 10             	add    esp,0x10
c001d73a:	83 ec 08             	sub    esp,0x8
c001d73d:	68 e8 01 00 00       	push   0x1e8
c001d742:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d746:	e8 aa fb fe ff       	call   c000d2f5 <operator delete(void*, unsigned long)>
c001d74b:	83 c4 10             	add    esp,0x10
c001d74e:	83 c4 0c             	add    esp,0xc
c001d751:	c3                   	ret    

c001d752 <SoundCard::configureRates(int, int, int)>:
c001d752:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d756:	31 c0                	xor    eax,eax
c001d758:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c001d75f:	75 20                	jne    c001d781 <SoundCard::configureRates(int, int, int)+0x2f>
c001d761:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d765:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c001d76b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d76f:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c001d775:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d779:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c001d77f:	b0 01                	mov    al,0x1
c001d781:	c3                   	ret    

c001d782 <SoundCard::getSamples16(int, short*)>:
c001d782:	55                   	push   ebp
c001d783:	57                   	push   edi
c001d784:	31 ff                	xor    edi,edi
c001d786:	56                   	push   esi
c001d787:	53                   	push   ebx
c001d788:	31 db                	xor    ebx,ebx
c001d78a:	83 ec 10             	sub    esp,0x10
c001d78d:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001d791:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001d795:	8d 04 36             	lea    eax,[esi+esi*1]
c001d798:	50                   	push   eax
c001d799:	6a 00                	push   0x0
c001d79b:	55                   	push   ebp
c001d79c:	e8 4f 2d fe ff       	call   c00004f0 <memset>
c001d7a1:	83 c4 10             	add    esp,0x10
c001d7a4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d7a8:	8b 84 b8 58 01 00 00 	mov    eax,DWORD PTR [eax+edi*4+0x158]
c001d7af:	85 c0                	test   eax,eax
c001d7b1:	74 1a                	je     c001d7cd <SoundCard::getSamples16(int, short*)+0x4b>
c001d7b3:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001d7b7:	75 14                	jne    c001d7cd <SoundCard::getSamples16(int, short*)+0x4b>
c001d7b9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d7bd:	55                   	push   ebp
c001d7be:	56                   	push   esi
c001d7bf:	50                   	push   eax
c001d7c0:	e8 8f 03 00 00       	call   c001db54 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c001d7c5:	83 c4 10             	add    esp,0x10
c001d7c8:	39 c3                	cmp    ebx,eax
c001d7ca:	0f 4c d8             	cmovl  ebx,eax
c001d7cd:	47                   	inc    edi
c001d7ce:	83 ff 20             	cmp    edi,0x20
c001d7d1:	75 d1                	jne    c001d7a4 <SoundCard::getSamples16(int, short*)+0x22>
c001d7d3:	83 c4 0c             	add    esp,0xc
c001d7d6:	89 d8                	mov    eax,ebx
c001d7d8:	5b                   	pop    ebx
c001d7d9:	5e                   	pop    esi
c001d7da:	5f                   	pop    edi
c001d7db:	5d                   	pop    ebp
c001d7dc:	c3                   	ret    
c001d7dd:	90                   	nop

c001d7de <SoundCard::getSamples32(int, int*)>:
c001d7de:	55                   	push   ebp
c001d7df:	57                   	push   edi
c001d7e0:	31 ff                	xor    edi,edi
c001d7e2:	56                   	push   esi
c001d7e3:	31 f6                	xor    esi,esi
c001d7e5:	53                   	push   ebx
c001d7e6:	83 ec 10             	sub    esp,0x10
c001d7e9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d7ed:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001d7f1:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001d7f5:	c1 e0 02             	shl    eax,0x2
c001d7f8:	50                   	push   eax
c001d7f9:	6a 00                	push   0x0
c001d7fb:	55                   	push   ebp
c001d7fc:	e8 ef 2c fe ff       	call   c00004f0 <memset>
c001d801:	83 c4 10             	add    esp,0x10
c001d804:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c001d80b:	85 c0                	test   eax,eax
c001d80d:	74 1a                	je     c001d829 <SoundCard::getSamples32(int, int*)+0x4b>
c001d80f:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001d813:	75 14                	jne    c001d829 <SoundCard::getSamples32(int, int*)+0x4b>
c001d815:	53                   	push   ebx
c001d816:	55                   	push   ebp
c001d817:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d81b:	50                   	push   eax
c001d81c:	e8 03 04 00 00       	call   c001dc24 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001d821:	83 c4 10             	add    esp,0x10
c001d824:	39 c6                	cmp    esi,eax
c001d826:	0f 4c f0             	cmovl  esi,eax
c001d829:	47                   	inc    edi
c001d82a:	83 ff 20             	cmp    edi,0x20
c001d82d:	75 d5                	jne    c001d804 <SoundCard::getSamples32(int, int*)+0x26>
c001d82f:	85 f6                	test   esi,esi
c001d831:	0f b6 83 d8 01 00 00 	movzx  eax,BYTE PTR [ebx+0x1d8]
c001d838:	75 0f                	jne    c001d849 <SoundCard::getSamples32(int, int*)+0x6b>
c001d83a:	85 c0                	test   eax,eax
c001d83c:	74 1b                	je     c001d859 <SoundCard::getSamples32(int, int*)+0x7b>
c001d83e:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d840:	83 ec 0c             	sub    esp,0xc
c001d843:	53                   	push   ebx
c001d844:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001d847:	eb 0d                	jmp    c001d856 <SoundCard::getSamples32(int, int*)+0x78>
c001d849:	85 c0                	test   eax,eax
c001d84b:	75 0c                	jne    c001d859 <SoundCard::getSamples32(int, int*)+0x7b>
c001d84d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d84f:	83 ec 0c             	sub    esp,0xc
c001d852:	53                   	push   ebx
c001d853:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001d856:	83 c4 10             	add    esp,0x10
c001d859:	83 c4 0c             	add    esp,0xc
c001d85c:	89 f0                	mov    eax,esi
c001d85e:	5b                   	pop    ebx
c001d85f:	5e                   	pop    esi
c001d860:	5f                   	pop    edi
c001d861:	5d                   	pop    ebp
c001d862:	c3                   	ret    
c001d863:	90                   	nop

c001d864 <SoundCard::addChannel(SoundPort*)>:
c001d864:	83 ec 0c             	sub    esp,0xc
c001d867:	31 c0                	xor    eax,eax
c001d869:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001d86d:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c001d875:	74 1b                	je     c001d892 <SoundCard::addChannel(SoundPort*)+0x2e>
c001d877:	40                   	inc    eax
c001d878:	83 f8 20             	cmp    eax,0x20
c001d87b:	75 f0                	jne    c001d86d <SoundCard::addChannel(SoundPort*)+0x9>
c001d87d:	83 ec 0c             	sub    esp,0xc
c001d880:	68 79 60 02 c0       	push   0xc0026079
c001d885:	e8 00 26 ff ff       	call   c000fe8a <KePanic(char const*)>
c001d88a:	83 c4 10             	add    esp,0x10
c001d88d:	83 c8 ff             	or     eax,0xffffffff
c001d890:	eb 0b                	jmp    c001d89d <SoundCard::addChannel(SoundPort*)+0x39>
c001d892:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001d896:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c001d89d:	83 c4 0c             	add    esp,0xc
c001d8a0:	c3                   	ret    
c001d8a1:	90                   	nop

c001d8a2 <SoundCard::removeChannel(int)>:
c001d8a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d8a6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d8aa:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001d8b5:	c3                   	ret    
c001d8b6:	66 90                	xchg   ax,ax

c001d8b8 <SoundPort::SoundPort(int, int, int, int)>:
c001d8b8:	83 ec 0c             	sub    esp,0xc
c001d8bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d8bf:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001d8c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d8ca:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001d8ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d8d2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d8d6:	89 10                	mov    DWORD PTR [eax],edx
c001d8d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d8dc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001d8e0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001d8e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d8e7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d8eb:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001d8ee:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001d8f3:	75 13                	jne    c001d908 <SoundPort::SoundPort(int, int, int, int)+0x50>
c001d8f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d8f9:	8b 00                	mov    eax,DWORD PTR [eax]
c001d8fb:	05 a0 0f 00 00       	add    eax,0xfa0
c001d900:	d1 e0                	shl    eax,1
c001d902:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d906:	66 90                	xchg   ax,ax
c001d908:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d90c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d910:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001d913:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d917:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001d91e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d922:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001d925:	c1 e0 02             	shl    eax,0x2
c001d928:	83 ec 0c             	sub    esp,0xc
c001d92b:	50                   	push   eax
c001d92c:	e8 4b 22 ff ff       	call   c000fb7c <malloc>
c001d931:	83 c4 10             	add    esp,0x10
c001d934:	89 c2                	mov    edx,eax
c001d936:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d93a:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001d93d:	90                   	nop
c001d93e:	83 c4 0c             	add    esp,0xc
c001d941:	c3                   	ret    
c001d942:	66 90                	xchg   ax,ax

c001d944 <SoundPort::~SoundPort()>:
c001d944:	83 ec 0c             	sub    esp,0xc
c001d947:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d94b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001d94e:	85 c0                	test   eax,eax
c001d950:	74 1e                	je     c001d970 <SoundPort::~SoundPort()+0x2c>
c001d952:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d956:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001d959:	83 ec 0c             	sub    esp,0xc
c001d95c:	50                   	push   eax
c001d95d:	e8 2a 22 ff ff       	call   c000fb8c <free>
c001d962:	83 c4 10             	add    esp,0x10
c001d965:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d969:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001d970:	90                   	nop
c001d971:	83 c4 0c             	add    esp,0xc
c001d974:	c3                   	ret    
c001d975:	90                   	nop
c001d976:	66 90                	xchg   ax,ax

c001d978 <SoundPort::unpause()>:
c001d978:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d97c:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c001d980:	c3                   	ret    
c001d981:	90                   	nop
c001d982:	66 90                	xchg   ax,ax

c001d984 <SoundPort::pause()>:
c001d984:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d988:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001d98c:	c3                   	ret    
c001d98d:	90                   	nop
c001d98e:	66 90                	xchg   ax,ax

c001d990 <SoundPort::getBufferUsed()>:
c001d990:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d994:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001d997:	c3                   	ret    

c001d998 <SoundPort::getBufferSize()>:
c001d998:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d99c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001d99f:	c3                   	ret    

c001d9a0 <SoundPort::buffer8(signed char*, int)>:
c001d9a0:	55                   	push   ebp
c001d9a1:	57                   	push   edi
c001d9a2:	56                   	push   esi
c001d9a3:	53                   	push   ebx
c001d9a4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d9a8:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c001d9ac:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001d9af:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001d9b2:	74 70                	je     c001da24 <SoundPort::buffer8(signed char*, int)+0x84>
c001d9b4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d9b8:	85 c9                	test   ecx,ecx
c001d9ba:	7e 68                	jle    c001da24 <SoundPort::buffer8(signed char*, int)+0x84>
c001d9bc:	0f be 75 00          	movsx  esi,BYTE PTR [ebp+0x0]
c001d9c0:	8d 48 01             	lea    ecx,[eax+0x1]
c001d9c3:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001d9c6:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001d9c9:	89 f1                	mov    ecx,esi
c001d9cb:	c1 e1 18             	shl    ecx,0x18
c001d9ce:	29 f1                	sub    ecx,esi
c001d9d0:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001d9d3:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d9d6:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d9d9:	74 51                	je     c001da2c <SoundPort::buffer8(signed char*, int)+0x8c>
c001d9db:	31 ff                	xor    edi,edi
c001d9dd:	eb 25                	jmp    c001da04 <SoundPort::buffer8(signed char*, int)+0x64>
c001d9df:	90                   	nop
c001d9e0:	0f be 74 05 00       	movsx  esi,BYTE PTR [ebp+eax*1+0x0]
c001d9e5:	8d 59 01             	lea    ebx,[ecx+0x1]
c001d9e8:	89 5a 14             	mov    DWORD PTR [edx+0x14],ebx
c001d9eb:	89 f3                	mov    ebx,esi
c001d9ed:	c1 e3 18             	shl    ebx,0x18
c001d9f0:	29 f3                	sub    ebx,esi
c001d9f2:	8b 72 0c             	mov    esi,DWORD PTR [edx+0xc]
c001d9f5:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c001d9f8:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d9fb:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d9fe:	74 1c                	je     c001da1c <SoundPort::buffer8(signed char*, int)+0x7c>
c001da00:	89 c7                	mov    edi,eax
c001da02:	66 90                	xchg   ax,ax
c001da04:	8d 47 01             	lea    eax,[edi+0x1]
c001da07:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c001da0b:	75 d3                	jne    c001d9e0 <SoundPort::buffer8(signed char*, int)+0x40>
c001da0d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001da11:	8d 76 00             	lea    esi,[esi+0x0]
c001da14:	5b                   	pop    ebx
c001da15:	5e                   	pop    esi
c001da16:	5f                   	pop    edi
c001da17:	5d                   	pop    ebp
c001da18:	c3                   	ret    
c001da19:	8d 76 00             	lea    esi,[esi+0x0]
c001da1c:	5b                   	pop    ebx
c001da1d:	8d 47 02             	lea    eax,[edi+0x2]
c001da20:	5e                   	pop    esi
c001da21:	5f                   	pop    edi
c001da22:	5d                   	pop    ebp
c001da23:	c3                   	ret    
c001da24:	5b                   	pop    ebx
c001da25:	31 c0                	xor    eax,eax
c001da27:	5e                   	pop    esi
c001da28:	5f                   	pop    edi
c001da29:	5d                   	pop    ebp
c001da2a:	c3                   	ret    
c001da2b:	90                   	nop
c001da2c:	b8 01 00 00 00       	mov    eax,0x1
c001da31:	eb e1                	jmp    c001da14 <SoundPort::buffer8(signed char*, int)+0x74>
c001da33:	90                   	nop

c001da34 <SoundPort::buffer16(short*, int)>:
c001da34:	55                   	push   ebp
c001da35:	57                   	push   edi
c001da36:	56                   	push   esi
c001da37:	53                   	push   ebx
c001da38:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001da3c:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c001da40:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001da43:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001da46:	74 70                	je     c001dab8 <SoundPort::buffer16(short*, int)+0x84>
c001da48:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001da4c:	85 c9                	test   ecx,ecx
c001da4e:	7e 68                	jle    c001dab8 <SoundPort::buffer16(short*, int)+0x84>
c001da50:	0f bf 75 00          	movsx  esi,WORD PTR [ebp+0x0]
c001da54:	8d 48 01             	lea    ecx,[eax+0x1]
c001da57:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001da5a:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001da5d:	89 f1                	mov    ecx,esi
c001da5f:	c1 e1 10             	shl    ecx,0x10
c001da62:	29 f1                	sub    ecx,esi
c001da64:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001da67:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001da6a:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001da6d:	74 51                	je     c001dac0 <SoundPort::buffer16(short*, int)+0x8c>
c001da6f:	31 ff                	xor    edi,edi
c001da71:	eb 25                	jmp    c001da98 <SoundPort::buffer16(short*, int)+0x64>
c001da73:	90                   	nop
c001da74:	0f bf 74 45 00       	movsx  esi,WORD PTR [ebp+eax*2+0x0]
c001da79:	8d 59 01             	lea    ebx,[ecx+0x1]
c001da7c:	89 5a 14             	mov    DWORD PTR [edx+0x14],ebx
c001da7f:	89 f3                	mov    ebx,esi
c001da81:	c1 e3 10             	shl    ebx,0x10
c001da84:	29 f3                	sub    ebx,esi
c001da86:	8b 72 0c             	mov    esi,DWORD PTR [edx+0xc]
c001da89:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c001da8c:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001da8f:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001da92:	74 1c                	je     c001dab0 <SoundPort::buffer16(short*, int)+0x7c>
c001da94:	89 c7                	mov    edi,eax
c001da96:	66 90                	xchg   ax,ax
c001da98:	8d 47 01             	lea    eax,[edi+0x1]
c001da9b:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c001da9f:	75 d3                	jne    c001da74 <SoundPort::buffer16(short*, int)+0x40>
c001daa1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001daa5:	8d 76 00             	lea    esi,[esi+0x0]
c001daa8:	5b                   	pop    ebx
c001daa9:	5e                   	pop    esi
c001daaa:	5f                   	pop    edi
c001daab:	5d                   	pop    ebp
c001daac:	c3                   	ret    
c001daad:	8d 76 00             	lea    esi,[esi+0x0]
c001dab0:	5b                   	pop    ebx
c001dab1:	8d 47 02             	lea    eax,[edi+0x2]
c001dab4:	5e                   	pop    esi
c001dab5:	5f                   	pop    edi
c001dab6:	5d                   	pop    ebp
c001dab7:	c3                   	ret    
c001dab8:	5b                   	pop    ebx
c001dab9:	31 c0                	xor    eax,eax
c001dabb:	5e                   	pop    esi
c001dabc:	5f                   	pop    edi
c001dabd:	5d                   	pop    ebp
c001dabe:	c3                   	ret    
c001dabf:	90                   	nop
c001dac0:	b8 01 00 00 00       	mov    eax,0x1
c001dac5:	eb e1                	jmp    c001daa8 <SoundPort::buffer16(short*, int)+0x74>
c001dac7:	90                   	nop

c001dac8 <SoundPort::buffer32(int*, int)>:
c001dac8:	55                   	push   ebp
c001dac9:	57                   	push   edi
c001daca:	56                   	push   esi
c001dacb:	53                   	push   ebx
c001dacc:	83 ec 04             	sub    esp,0x4
c001dacf:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001dad3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dad7:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001dadb:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001dade:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001dae1:	89 04 24             	mov    DWORD PTR [esp],eax
c001dae4:	74 5a                	je     c001db40 <SoundPort::buffer32(int*, int)+0x78>
c001dae6:	85 c0                	test   eax,eax
c001dae8:	7e 56                	jle    c001db40 <SoundPort::buffer32(int*, int)+0x78>
c001daea:	8d 71 01             	lea    esi,[ecx+0x1]
c001daed:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001daf0:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001daf3:	8b 37                	mov    esi,DWORD PTR [edi]
c001daf5:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001daf8:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001dafb:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001dafe:	74 4c                	je     c001db4c <SoundPort::buffer32(int*, int)+0x84>
c001db00:	31 f6                	xor    esi,esi
c001db02:	eb 1c                	jmp    c001db20 <SoundPort::buffer32(int*, int)+0x58>
c001db04:	8d 69 01             	lea    ebp,[ecx+0x1]
c001db07:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001db0a:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c001db0d:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001db10:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001db14:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001db17:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001db1a:	74 18                	je     c001db34 <SoundPort::buffer32(int*, int)+0x6c>
c001db1c:	89 de                	mov    esi,ebx
c001db1e:	66 90                	xchg   ax,ax
c001db20:	8d 5e 01             	lea    ebx,[esi+0x1]
c001db23:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c001db26:	75 dc                	jne    c001db04 <SoundPort::buffer32(int*, int)+0x3c>
c001db28:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001db2b:	90                   	nop
c001db2c:	83 c4 04             	add    esp,0x4
c001db2f:	5b                   	pop    ebx
c001db30:	5e                   	pop    esi
c001db31:	5f                   	pop    edi
c001db32:	5d                   	pop    ebp
c001db33:	c3                   	ret    
c001db34:	8d 46 02             	lea    eax,[esi+0x2]
c001db37:	83 c4 04             	add    esp,0x4
c001db3a:	5b                   	pop    ebx
c001db3b:	5e                   	pop    esi
c001db3c:	5f                   	pop    edi
c001db3d:	5d                   	pop    ebp
c001db3e:	c3                   	ret    
c001db3f:	90                   	nop
c001db40:	83 c4 04             	add    esp,0x4
c001db43:	31 c0                	xor    eax,eax
c001db45:	5b                   	pop    ebx
c001db46:	5e                   	pop    esi
c001db47:	5f                   	pop    edi
c001db48:	5d                   	pop    ebp
c001db49:	c3                   	ret    
c001db4a:	66 90                	xchg   ax,ax
c001db4c:	b8 01 00 00 00       	mov    eax,0x1
c001db51:	eb d9                	jmp    c001db2c <SoundPort::buffer32(int*, int)+0x64>
c001db53:	90                   	nop

c001db54 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c001db54:	55                   	push   ebp
c001db55:	57                   	push   edi
c001db56:	56                   	push   esi
c001db57:	53                   	push   ebx
c001db58:	83 ec 0c             	sub    esp,0xc
c001db5b:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001db5f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001db63:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001db67:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001db6b:	8b 85 e0 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e0]
c001db71:	39 03                	cmp    DWORD PTR [ebx],eax
c001db73:	74 13                	je     c001db88 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x34>
c001db75:	83 ec 0c             	sub    esp,0xc
c001db78:	68 cc 60 02 c0       	push   0xc00260cc
c001db7d:	e8 08 23 ff ff       	call   c000fe8a <KePanic(char const*)>
c001db82:	83 c4 10             	add    esp,0x10
c001db85:	8d 76 00             	lea    esi,[esi+0x0]
c001db88:	8b 85 dc 01 00 00    	mov    eax,DWORD PTR [ebp+0x1dc]
c001db8e:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001db91:	74 11                	je     c001dba4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x50>
c001db93:	83 ec 0c             	sub    esp,0xc
c001db96:	68 0b 61 02 c0       	push   0xc002610b
c001db9b:	e8 ea 22 ff ff       	call   c000fe8a <KePanic(char const*)>
c001dba0:	83 c4 10             	add    esp,0x10
c001dba3:	90                   	nop
c001dba4:	8b 85 e4 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e4]
c001dbaa:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001dbad:	74 11                	je     c001dbc0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x6c>
c001dbaf:	83 ec 0c             	sub    esp,0xc
c001dbb2:	68 0b 61 02 c0       	push   0xc002610b
c001dbb7:	e8 ce 22 ff ff       	call   c000fe8a <KePanic(char const*)>
c001dbbc:	83 c4 10             	add    esp,0x10
c001dbbf:	90                   	nop
c001dbc0:	39 73 14             	cmp    DWORD PTR [ebx+0x14],esi
c001dbc3:	0f 4e 73 14          	cmovle esi,DWORD PTR [ebx+0x14]
c001dbc7:	85 f6                	test   esi,esi
c001dbc9:	7e 2d                	jle    c001dbf8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa4>
c001dbcb:	31 c0                	xor    eax,eax
c001dbcd:	8d 76 00             	lea    esi,[esi+0x0]
c001dbd0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001dbd3:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c001dbd6:	8d 91 ff 7f 00 00    	lea    edx,[ecx+0x7fff]
c001dbdc:	85 c9                	test   ecx,ecx
c001dbde:	0f 49 d1             	cmovns edx,ecx
c001dbe1:	66 8b 0c 47          	mov    cx,WORD PTR [edi+eax*2]
c001dbe5:	c1 fa 0f             	sar    edx,0xf
c001dbe8:	01 d1                	add    ecx,edx
c001dbea:	66 89 0c 47          	mov    WORD PTR [edi+eax*2],cx
c001dbee:	83 c0 01             	add    eax,0x1
c001dbf1:	39 f0                	cmp    eax,esi
c001dbf3:	75 db                	jne    c001dbd0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x7c>
c001dbf5:	8d 76 00             	lea    esi,[esi+0x0]
c001dbf8:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001dbfb:	83 ec 04             	sub    esp,0x4
c001dbfe:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001dc01:	29 f0                	sub    eax,esi
c001dc03:	c1 e0 02             	shl    eax,0x2
c001dc06:	50                   	push   eax
c001dc07:	8d 04 b2             	lea    eax,[edx+esi*4]
c001dc0a:	50                   	push   eax
c001dc0b:	52                   	push   edx
c001dc0c:	e8 bf 27 fe ff       	call   c00003d0 <memmove>
c001dc11:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001dc14:	29 f0                	sub    eax,esi
c001dc16:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001dc19:	83 c4 1c             	add    esp,0x1c
c001dc1c:	89 f0                	mov    eax,esi
c001dc1e:	5b                   	pop    ebx
c001dc1f:	5e                   	pop    esi
c001dc20:	5f                   	pop    edi
c001dc21:	5d                   	pop    ebp
c001dc22:	c3                   	ret    
c001dc23:	90                   	nop

c001dc24 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c001dc24:	55                   	push   ebp
c001dc25:	57                   	push   edi
c001dc26:	56                   	push   esi
c001dc27:	53                   	push   ebx
c001dc28:	83 ec 0c             	sub    esp,0xc
c001dc2b:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001dc2f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001dc33:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001dc37:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001dc3b:	8b 85 e0 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e0]
c001dc41:	39 03                	cmp    DWORD PTR [ebx],eax
c001dc43:	74 13                	je     c001dc58 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x34>
c001dc45:	83 ec 0c             	sub    esp,0xc
c001dc48:	68 ec 60 02 c0       	push   0xc00260ec
c001dc4d:	e8 38 22 ff ff       	call   c000fe8a <KePanic(char const*)>
c001dc52:	83 c4 10             	add    esp,0x10
c001dc55:	8d 76 00             	lea    esi,[esi+0x0]
c001dc58:	8b 85 dc 01 00 00    	mov    eax,DWORD PTR [ebp+0x1dc]
c001dc5e:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001dc61:	74 11                	je     c001dc74 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x50>
c001dc63:	83 ec 0c             	sub    esp,0xc
c001dc66:	68 27 61 02 c0       	push   0xc0026127
c001dc6b:	e8 1a 22 ff ff       	call   c000fe8a <KePanic(char const*)>
c001dc70:	83 c4 10             	add    esp,0x10
c001dc73:	90                   	nop
c001dc74:	8b 85 e4 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e4]
c001dc7a:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001dc7d:	74 11                	je     c001dc90 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x6c>
c001dc7f:	83 ec 0c             	sub    esp,0xc
c001dc82:	68 27 61 02 c0       	push   0xc0026127
c001dc87:	e8 fe 21 ff ff       	call   c000fe8a <KePanic(char const*)>
c001dc8c:	83 c4 10             	add    esp,0x10
c001dc8f:	90                   	nop
c001dc90:	39 7b 14             	cmp    DWORD PTR [ebx+0x14],edi
c001dc93:	0f 4e 7b 14          	cmovle edi,DWORD PTR [ebx+0x14]
c001dc97:	85 ff                	test   edi,edi
c001dc99:	7e 21                	jle    c001dcbc <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x98>
c001dc9b:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c001dca2:	31 c0                	xor    eax,eax
c001dca4:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001dca7:	8b 2c 06             	mov    ebp,DWORD PTR [esi+eax*1]
c001dcaa:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001dcad:	01 d5                	add    ebp,edx
c001dcaf:	89 2c 06             	mov    DWORD PTR [esi+eax*1],ebp
c001dcb2:	83 c0 04             	add    eax,0x4
c001dcb5:	39 c1                	cmp    ecx,eax
c001dcb7:	75 eb                	jne    c001dca4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x80>
c001dcb9:	8d 76 00             	lea    esi,[esi+0x0]
c001dcbc:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001dcbf:	83 ec 04             	sub    esp,0x4
c001dcc2:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001dcc5:	29 f8                	sub    eax,edi
c001dcc7:	c1 e0 02             	shl    eax,0x2
c001dcca:	50                   	push   eax
c001dccb:	8d 04 ba             	lea    eax,[edx+edi*4]
c001dcce:	50                   	push   eax
c001dccf:	52                   	push   edx
c001dcd0:	e8 fb 26 fe ff       	call   c00003d0 <memmove>
c001dcd5:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001dcd8:	29 f8                	sub    eax,edi
c001dcda:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001dcdd:	83 c4 1c             	add    esp,0x1c
c001dce0:	89 f8                	mov    eax,edi
c001dce2:	5b                   	pop    ebx
c001dce3:	5e                   	pop    esi
c001dce4:	5f                   	pop    edi
c001dce5:	5d                   	pop    ebp
c001dce6:	c3                   	ret    
c001dce7:	90                   	nop

c001dce8 <PCI::open(int, int, void*)>:
c001dce8:	83 ec 18             	sub    esp,0x18
c001dceb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001dcef:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001dcf3:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001dcf9:	8b 10                	mov    edx,DWORD PTR [eax]
c001dcfb:	50                   	push   eax
c001dcfc:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001dcff:	31 c0                	xor    eax,eax
c001dd01:	83 c4 1c             	add    esp,0x1c
c001dd04:	c3                   	ret    
c001dd05:	90                   	nop

c001dd06 <PCI::close(int, int, void*)>:
c001dd06:	31 c0                	xor    eax,eax
c001dd08:	c3                   	ret    
c001dd09:	90                   	nop

c001dd0a <PCI::PCI()>:
c001dd0a:	83 ec 0c             	sub    esp,0xc
c001dd0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd11:	83 ec 08             	sub    esp,0x8
c001dd14:	68 43 61 02 c0       	push   0xc0026143
c001dd19:	50                   	push   eax
c001dd1a:	e8 45 ac fe ff       	call   c0008964 <Bus::Bus(char const*)>
c001dd1f:	83 c4 10             	add    esp,0x10
c001dd22:	ba 50 62 02 c0       	mov    edx,0xc0026250
c001dd27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd2b:	89 10                	mov    DWORD PTR [eax],edx
c001dd2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd31:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001dd3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd3f:	a3 a0 04 03 c0       	mov    ds:0xc00304a0,eax
c001dd44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd48:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001dd4e:	0f b6 d0             	movzx  edx,al
c001dd51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd55:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001dd5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd60:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001dd66:	0f b6 d0             	movzx  edx,al
c001dd69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd6d:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001dd72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd76:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001dd7c:	8d 50 01             	lea    edx,[eax+0x1]
c001dd7f:	88 d1                	mov    cl,dl
c001dd81:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001dd85:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001dd8b:	0f b6 d0             	movzx  edx,al
c001dd8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd92:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001dd96:	83 c9 c0             	or     ecx,0xffffffc0
c001dd99:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001dd9d:	90                   	nop
c001dd9e:	83 c4 0c             	add    esp,0xc
c001dda1:	c3                   	ret    

c001dda2 <PCI::readBAR8(unsigned int, int)>:
c001dda2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001dda6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ddaa:	f6 c2 01             	test   dl,0x1
c001ddad:	74 07                	je     c001ddb6 <PCI::readBAR8(unsigned int, int)+0x14>
c001ddaf:	83 e2 fc             	and    edx,0xfffffffc
c001ddb2:	01 c2                	add    edx,eax
c001ddb4:	ec                   	in     al,dx
c001ddb5:	c3                   	ret    
c001ddb6:	83 e2 f0             	and    edx,0xfffffff0
c001ddb9:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001ddbc:	c3                   	ret    
c001ddbd:	90                   	nop

c001ddbe <PCI::readBAR16(unsigned int, int)>:
c001ddbe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ddc2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ddc6:	f6 c2 01             	test   dl,0x1
c001ddc9:	74 08                	je     c001ddd3 <PCI::readBAR16(unsigned int, int)+0x15>
c001ddcb:	83 e2 fc             	and    edx,0xfffffffc
c001ddce:	01 c2                	add    edx,eax
c001ddd0:	66 ed                	in     ax,dx
c001ddd2:	c3                   	ret    
c001ddd3:	83 e2 f0             	and    edx,0xfffffff0
c001ddd6:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001ddda:	c3                   	ret    
c001dddb:	90                   	nop

c001dddc <PCI::readBAR32(unsigned int, int)>:
c001dddc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001dde0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001dde4:	f6 c2 01             	test   dl,0x1
c001dde7:	74 07                	je     c001ddf0 <PCI::readBAR32(unsigned int, int)+0x14>
c001dde9:	83 e2 fc             	and    edx,0xfffffffc
c001ddec:	01 c2                	add    edx,eax
c001ddee:	ed                   	in     eax,dx
c001ddef:	c3                   	ret    
c001ddf0:	83 e2 f0             	and    edx,0xfffffff0
c001ddf3:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001ddf6:	c3                   	ret    
c001ddf7:	90                   	nop

c001ddf8 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001ddf8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ddfc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001de00:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001de04:	f6 c2 01             	test   dl,0x1
c001de07:	74 07                	je     c001de10 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001de09:	83 e2 fc             	and    edx,0xfffffffc
c001de0c:	01 ca                	add    edx,ecx
c001de0e:	ee                   	out    dx,al
c001de0f:	c3                   	ret    
c001de10:	83 e2 f0             	and    edx,0xfffffff0
c001de13:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001de16:	c3                   	ret    
c001de17:	90                   	nop

c001de18 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001de18:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001de1c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001de20:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001de24:	f6 c2 01             	test   dl,0x1
c001de27:	74 08                	je     c001de31 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001de29:	83 e2 fc             	and    edx,0xfffffffc
c001de2c:	01 ca                	add    edx,ecx
c001de2e:	66 ef                	out    dx,ax
c001de30:	c3                   	ret    
c001de31:	83 e2 f0             	and    edx,0xfffffff0
c001de34:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001de38:	c3                   	ret    
c001de39:	90                   	nop

c001de3a <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001de3a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001de3e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001de42:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001de46:	f6 c2 01             	test   dl,0x1
c001de49:	74 07                	je     c001de52 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001de4b:	83 e2 fc             	and    edx,0xfffffffc
c001de4e:	01 ca                	add    edx,ecx
c001de50:	ef                   	out    dx,eax
c001de51:	c3                   	ret    
c001de52:	83 e2 f0             	and    edx,0xfffffff0
c001de55:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001de58:	c3                   	ret    
c001de59:	90                   	nop

c001de5a <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001de5a:	55                   	push   ebp
c001de5b:	57                   	push   edi
c001de5c:	56                   	push   esi
c001de5d:	53                   	push   ebx
c001de5e:	83 ec 0c             	sub    esp,0xc
c001de61:	0f b6 74 24 2c       	movzx  esi,BYTE PTR [esp+0x2c]
c001de66:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001de6a:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001de6e:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001de72:	83 fe 07             	cmp    esi,0x7
c001de75:	76 10                	jbe    c001de87 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001de77:	83 ec 0c             	sub    esp,0xc
c001de7a:	68 4b 61 02 c0       	push   0xc002614b
c001de7f:	e8 06 20 ff ff       	call   c000fe8a <KePanic(char const*)>
c001de84:	83 c4 10             	add    esp,0x10
c001de87:	0f b6 db             	movzx  ebx,bl
c001de8a:	83 fb 0f             	cmp    ebx,0xf
c001de8d:	76 10                	jbe    c001de9f <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x45>
c001de8f:	83 ec 0c             	sub    esp,0xc
c001de92:	68 7b 61 02 c0       	push   0xc002617b
c001de97:	e8 ee 1f ff ff       	call   c000fe8a <KePanic(char const*)>
c001de9c:	83 c4 10             	add    esp,0x10
c001de9f:	8d 04 36             	lea    eax,[esi+esi*1]
c001dea2:	ba f8 0c 00 00       	mov    edx,0xcf8
c001dea7:	83 c8 f0             	or     eax,0xfffffff0
c001deaa:	ee                   	out    dx,al
c001deab:	ba fa 0c 00 00       	mov    edx,0xcfa
c001deb0:	89 e8                	mov    eax,ebp
c001deb2:	ee                   	out    dx,al
c001deb3:	89 f9                	mov    ecx,edi
c001deb5:	89 d8                	mov    eax,ebx
c001deb7:	0f b6 d9             	movzx  ebx,cl
c001deba:	83 c4 0c             	add    esp,0xc
c001debd:	c1 e0 08             	shl    eax,0x8
c001dec0:	83 e3 fc             	and    ebx,0xfffffffc
c001dec3:	09 d8                	or     eax,ebx
c001dec5:	5b                   	pop    ebx
c001dec6:	0d 00 c0 ff ff       	or     eax,0xffffc000
c001decb:	5e                   	pop    esi
c001decc:	5f                   	pop    edi
c001decd:	5d                   	pop    ebp
c001dece:	c3                   	ret    
c001decf:	90                   	nop

c001ded0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001ded0:	57                   	push   edi
c001ded1:	56                   	push   esi
c001ded2:	53                   	push   ebx
c001ded3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ded7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001dedb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001dedf:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001dee3:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001dee9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001deed:	83 ff 01             	cmp    edi,0x1
c001def0:	75 3f                	jne    c001df31 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x61>
c001def2:	89 de                	mov    esi,ebx
c001def4:	0f b6 c0             	movzx  eax,al
c001def7:	c1 e0 10             	shl    eax,0x10
c001defa:	81 e6 fc 00 00 00    	and    esi,0xfc
c001df00:	0f b6 c9             	movzx  ecx,cl
c001df03:	09 f0                	or     eax,esi
c001df05:	c1 e1 08             	shl    ecx,0x8
c001df08:	0f b6 d2             	movzx  edx,dl
c001df0b:	c1 e2 0b             	shl    edx,0xb
c001df0e:	09 c8                	or     eax,ecx
c001df10:	09 d0                	or     eax,edx
c001df12:	ba f8 0c 00 00       	mov    edx,0xcf8
c001df17:	0d 00 00 00 80       	or     eax,0x80000000
c001df1c:	ef                   	out    dx,eax
c001df1d:	ba fc 0c 00 00       	mov    edx,0xcfc
c001df22:	ed                   	in     eax,dx
c001df23:	83 e3 02             	and    ebx,0x2
c001df26:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001df2d:	d3 e8                	shr    eax,cl
c001df2f:	eb 44                	jmp    c001df75 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001df31:	83 ff 02             	cmp    edi,0x2
c001df34:	75 2d                	jne    c001df63 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x93>
c001df36:	83 ec 0c             	sub    esp,0xc
c001df39:	0f b6 fb             	movzx  edi,bl
c001df3c:	57                   	push   edi
c001df3d:	0f b6 c9             	movzx  ecx,cl
c001df40:	51                   	push   ecx
c001df41:	0f b6 d2             	movzx  edx,dl
c001df44:	52                   	push   edx
c001df45:	0f b6 c0             	movzx  eax,al
c001df48:	50                   	push   eax
c001df49:	56                   	push   esi
c001df4a:	e8 0b ff ff ff       	call   c001de5a <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001df4f:	89 c2                	mov    edx,eax
c001df51:	ed                   	in     eax,dx
c001df52:	83 e3 02             	and    ebx,0x2
c001df55:	83 c4 20             	add    esp,0x20
c001df58:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001df5f:	d3 e8                	shr    eax,cl
c001df61:	eb 12                	jmp    c001df75 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001df63:	83 ec 0c             	sub    esp,0xc
c001df66:	68 ab 61 02 c0       	push   0xc00261ab
c001df6b:	e8 1a 1f ff ff       	call   c000fe8a <KePanic(char const*)>
c001df70:	83 c4 10             	add    esp,0x10
c001df73:	31 c0                	xor    eax,eax
c001df75:	5b                   	pop    ebx
c001df76:	5e                   	pop    esi
c001df77:	5f                   	pop    edi
c001df78:	c3                   	ret    
c001df79:	90                   	nop

c001df7a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001df7a:	83 ec 18             	sub    esp,0x18
c001df7d:	6a 00                	push   0x0
c001df7f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001df84:	50                   	push   eax
c001df85:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001df8a:	50                   	push   eax
c001df8b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001df90:	50                   	push   eax
c001df91:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001df95:	e8 36 ff ff ff       	call   c001ded0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001df9a:	83 c4 2c             	add    esp,0x2c
c001df9d:	c3                   	ret    

c001df9e <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001df9e:	83 ec 18             	sub    esp,0x18
c001dfa1:	6a 0e                	push   0xe
c001dfa3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001dfa8:	50                   	push   eax
c001dfa9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001dfae:	50                   	push   eax
c001dfaf:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001dfb4:	50                   	push   eax
c001dfb5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dfb9:	e8 12 ff ff ff       	call   c001ded0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001dfbe:	83 c4 2c             	add    esp,0x2c
c001dfc1:	0f b6 c0             	movzx  eax,al
c001dfc4:	c3                   	ret    
c001dfc5:	90                   	nop

c001dfc6 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001dfc6:	55                   	push   ebp
c001dfc7:	57                   	push   edi
c001dfc8:	56                   	push   esi
c001dfc9:	53                   	push   ebx
c001dfca:	83 ec 18             	sub    esp,0x18
c001dfcd:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001dfd2:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001dfd7:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001dfdc:	6a 0a                	push   0xa
c001dfde:	56                   	push   esi
c001dfdf:	55                   	push   ebp
c001dfe0:	57                   	push   edi
c001dfe1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001dfe5:	e8 e6 fe ff ff       	call   c001ded0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001dfea:	83 c4 14             	add    esp,0x14
c001dfed:	6a 0a                	push   0xa
c001dfef:	56                   	push   esi
c001dff0:	55                   	push   ebp
c001dff1:	57                   	push   edi
c001dff2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001dff6:	89 c3                	mov    ebx,eax
c001dff8:	0f b6 db             	movzx  ebx,bl
c001dffb:	e8 d0 fe ff ff       	call   c001ded0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e000:	83 c4 2c             	add    esp,0x2c
c001e003:	25 00 ff 00 00       	and    eax,0xff00
c001e008:	09 d8                	or     eax,ebx
c001e00a:	5b                   	pop    ebx
c001e00b:	5e                   	pop    esi
c001e00c:	5f                   	pop    edi
c001e00d:	5d                   	pop    ebp
c001e00e:	c3                   	ret    
c001e00f:	90                   	nop

c001e010 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001e010:	83 ec 18             	sub    esp,0x18
c001e013:	6a 08                	push   0x8
c001e015:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e01a:	50                   	push   eax
c001e01b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e020:	50                   	push   eax
c001e021:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e026:	50                   	push   eax
c001e027:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e02b:	e8 a0 fe ff ff       	call   c001ded0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e030:	83 c4 2c             	add    esp,0x2c
c001e033:	0f b6 c4             	movzx  eax,ah
c001e036:	c3                   	ret    
c001e037:	90                   	nop

c001e038 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001e038:	83 ec 18             	sub    esp,0x18
c001e03b:	6a 08                	push   0x8
c001e03d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e042:	50                   	push   eax
c001e043:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e048:	50                   	push   eax
c001e049:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e04e:	50                   	push   eax
c001e04f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e053:	e8 78 fe ff ff       	call   c001ded0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e058:	83 c4 2c             	add    esp,0x2c
c001e05b:	c3                   	ret    

c001e05c <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001e05c:	83 ec 18             	sub    esp,0x18
c001e05f:	6a 3c                	push   0x3c
c001e061:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e066:	50                   	push   eax
c001e067:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e06c:	50                   	push   eax
c001e06d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e072:	50                   	push   eax
c001e073:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e077:	e8 54 fe ff ff       	call   c001ded0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e07c:	83 c4 2c             	add    esp,0x2c
c001e07f:	c3                   	ret    

c001e080 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001e080:	83 ec 18             	sub    esp,0x18
c001e083:	6a 18                	push   0x18
c001e085:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e08a:	50                   	push   eax
c001e08b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e090:	50                   	push   eax
c001e091:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e096:	50                   	push   eax
c001e097:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e09b:	e8 30 fe ff ff       	call   c001ded0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e0a0:	83 c4 2c             	add    esp,0x2c
c001e0a3:	0f b6 c4             	movzx  eax,ah
c001e0a6:	c3                   	ret    
c001e0a7:	90                   	nop

c001e0a8 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001e0a8:	55                   	push   ebp
c001e0a9:	57                   	push   edi
c001e0aa:	56                   	push   esi
c001e0ab:	53                   	push   ebx
c001e0ac:	83 ec 28             	sub    esp,0x28
c001e0af:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001e0b3:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001e0b8:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001e0bd:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001e0c2:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001e0c9:	8d 43 12             	lea    eax,[ebx+0x12]
c001e0cc:	83 c3 10             	add    ebx,0x10
c001e0cf:	0f b6 c0             	movzx  eax,al
c001e0d2:	0f b6 db             	movzx  ebx,bl
c001e0d5:	50                   	push   eax
c001e0d6:	51                   	push   ecx
c001e0d7:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001e0db:	57                   	push   edi
c001e0dc:	55                   	push   ebp
c001e0dd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001e0e1:	e8 ea fd ff ff       	call   c001ded0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e0e6:	83 c4 14             	add    esp,0x14
c001e0e9:	53                   	push   ebx
c001e0ea:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001e0ee:	51                   	push   ecx
c001e0ef:	89 c6                	mov    esi,eax
c001e0f1:	57                   	push   edi
c001e0f2:	55                   	push   ebp
c001e0f3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001e0f7:	c1 e6 10             	shl    esi,0x10
c001e0fa:	e8 d1 fd ff ff       	call   c001ded0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e0ff:	83 c4 3c             	add    esp,0x3c
c001e102:	5b                   	pop    ebx
c001e103:	0f b7 c0             	movzx  eax,ax
c001e106:	09 f0                	or     eax,esi
c001e108:	5e                   	pop    esi
c001e109:	5f                   	pop    edi
c001e10a:	5d                   	pop    ebp
c001e10b:	c3                   	ret    

c001e10c <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001e10c:	55                   	push   ebp
c001e10d:	57                   	push   edi
c001e10e:	56                   	push   esi
c001e10f:	53                   	push   ebx
c001e110:	83 ec 0c             	sub    esp,0xc
c001e113:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001e117:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001e11b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e11f:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c001e123:	8b 8d 58 01 00 00    	mov    ecx,DWORD PTR [ebp+0x158]
c001e129:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001e12d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e131:	83 f9 01             	cmp    ecx,0x1
c001e134:	75 5d                	jne    c001e193 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x87>
c001e136:	0f b6 c8             	movzx  ecx,al
c001e139:	89 f0                	mov    eax,esi
c001e13b:	25 fc 00 00 00       	and    eax,0xfc
c001e140:	0f b6 d2             	movzx  edx,dl
c001e143:	c1 e1 10             	shl    ecx,0x10
c001e146:	c1 e2 0b             	shl    edx,0xb
c001e149:	09 c1                	or     ecx,eax
c001e14b:	89 f8                	mov    eax,edi
c001e14d:	0f b6 f8             	movzx  edi,al
c001e150:	c1 e7 08             	shl    edi,0x8
c001e153:	09 f9                	or     ecx,edi
c001e155:	09 d1                	or     ecx,edx
c001e157:	ba f8 0c 00 00       	mov    edx,0xcf8
c001e15c:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001e162:	89 c8                	mov    eax,ecx
c001e164:	ef                   	out    dx,eax
c001e165:	ba fc 0c 00 00       	mov    edx,0xcfc
c001e16a:	ed                   	in     eax,dx
c001e16b:	83 e6 02             	and    esi,0x2
c001e16e:	0f b7 db             	movzx  ebx,bx
c001e171:	74 0a                	je     c001e17d <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x71>
c001e173:	c1 e3 10             	shl    ebx,0x10
c001e176:	0f b7 d0             	movzx  edx,ax
c001e179:	09 d3                	or     ebx,edx
c001e17b:	eb 05                	jmp    c001e182 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x76>
c001e17d:	66 31 c0             	xor    ax,ax
c001e180:	09 c3                	or     ebx,eax
c001e182:	ba f8 0c 00 00       	mov    edx,0xcf8
c001e187:	89 c8                	mov    eax,ecx
c001e189:	ef                   	out    dx,eax
c001e18a:	ba fc 0c 00 00       	mov    edx,0xcfc
c001e18f:	89 d8                	mov    eax,ebx
c001e191:	eb 41                	jmp    c001e1d4 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc8>
c001e193:	83 f9 02             	cmp    ecx,0x2
c001e196:	75 45                	jne    c001e1dd <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd1>
c001e198:	89 f1                	mov    ecx,esi
c001e19a:	83 ec 0c             	sub    esp,0xc
c001e19d:	0f b6 f1             	movzx  esi,cl
c001e1a0:	89 f9                	mov    ecx,edi
c001e1a2:	56                   	push   esi
c001e1a3:	0f b6 f9             	movzx  edi,cl
c001e1a6:	57                   	push   edi
c001e1a7:	0f b6 d2             	movzx  edx,dl
c001e1aa:	52                   	push   edx
c001e1ab:	0f b6 c0             	movzx  eax,al
c001e1ae:	50                   	push   eax
c001e1af:	55                   	push   ebp
c001e1b0:	e8 a5 fc ff ff       	call   c001de5a <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e1b5:	89 c2                	mov    edx,eax
c001e1b7:	ed                   	in     eax,dx
c001e1b8:	83 c4 20             	add    esp,0x20
c001e1bb:	f6 c2 02             	test   dl,0x2
c001e1be:	0f b7 db             	movzx  ebx,bx
c001e1c1:	74 0c                	je     c001e1cf <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc3>
c001e1c3:	0f b7 c8             	movzx  ecx,ax
c001e1c6:	89 d8                	mov    eax,ebx
c001e1c8:	c1 e0 10             	shl    eax,0x10
c001e1cb:	09 c8                	or     eax,ecx
c001e1cd:	eb 05                	jmp    c001e1d4 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc8>
c001e1cf:	66 31 c0             	xor    ax,ax
c001e1d2:	09 d8                	or     eax,ebx
c001e1d4:	ef                   	out    dx,eax
c001e1d5:	83 c4 0c             	add    esp,0xc
c001e1d8:	5b                   	pop    ebx
c001e1d9:	5e                   	pop    esi
c001e1da:	5f                   	pop    edi
c001e1db:	5d                   	pop    ebp
c001e1dc:	c3                   	ret    
c001e1dd:	c7 44 24 20 ab 61 02 c0 	mov    DWORD PTR [esp+0x20],0xc00261ab
c001e1e5:	83 c4 0c             	add    esp,0xc
c001e1e8:	5b                   	pop    ebx
c001e1e9:	5e                   	pop    esi
c001e1ea:	5f                   	pop    edi
c001e1eb:	5d                   	pop    ebp
c001e1ec:	e9 99 1c ff ff       	jmp    c000fe8a <KePanic(char const*)>
c001e1f1:	90                   	nop

c001e1f2 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001e1f2:	55                   	push   ebp
c001e1f3:	57                   	push   edi
c001e1f4:	56                   	push   esi
c001e1f5:	53                   	push   ebx
c001e1f6:	81 ec 4c 01 00 00    	sub    esp,0x14c
c001e1fc:	80 3d ac 04 03 c0 00 	cmp    BYTE PTR ds:0xc00304ac,0x0
c001e203:	8b b4 24 84 01 00 00 	mov    esi,DWORD PTR [esp+0x184]
c001e20a:	0f 85 bd 00 00 00    	jne    c001e2cd <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdb>
c001e210:	83 ec 0c             	sub    esp,0xc
c001e213:	68 14 01 00 00       	push   0x114
c001e218:	e8 5f 19 ff ff       	call   c000fb7c <malloc>
c001e21d:	83 c4 0c             	add    esp,0xc
c001e220:	ff 35 78 fa 02 c0    	push   DWORD PTR ds:0xc002fa78
c001e226:	68 b1 61 02 c0       	push   0xc00261b1
c001e22b:	50                   	push   eax
c001e22c:	89 c3                	mov    ebx,eax
c001e22e:	e8 55 9f fe ff       	call   c0008188 <File::File(char const*, Process*)>
c001e233:	83 c4 10             	add    esp,0x10
c001e236:	85 db                	test   ebx,ebx
c001e238:	0f 84 6b 02 00 00    	je     c001e4a9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001e23e:	57                   	push   edi
c001e23f:	57                   	push   edi
c001e240:	6a 01                	push   0x1
c001e242:	53                   	push   ebx
c001e243:	e8 5e 9f fe ff       	call   c00081a6 <File::open(FileOpenMode)>
c001e248:	83 c4 10             	add    esp,0x10
c001e24b:	85 c0                	test   eax,eax
c001e24d:	0f 85 56 02 00 00    	jne    c001e4a9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001e253:	52                   	push   edx
c001e254:	8d 44 24 3f          	lea    eax,[esp+0x3f]
c001e258:	50                   	push   eax
c001e259:	8d 44 24 48          	lea    eax,[esp+0x48]
c001e25d:	50                   	push   eax
c001e25e:	53                   	push   ebx
c001e25f:	e8 44 a2 fe ff       	call   c00084a8 <File::stat(unsigned long long*, bool*)>
c001e264:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001e268:	40                   	inc    eax
c001e269:	89 04 24             	mov    DWORD PTR [esp],eax
c001e26c:	e8 0b 19 ff ff       	call   c000fb7c <malloc>
c001e271:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001e275:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001e279:	59                   	pop    ecx
c001e27a:	a3 a8 04 03 c0       	mov    ds:0xc00304a8,eax
c001e27f:	8b 13                	mov    edx,DWORD PTR [ebx]
c001e281:	8d 4c 24 48          	lea    ecx,[esp+0x48]
c001e285:	51                   	push   ecx
c001e286:	50                   	push   eax
c001e287:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001e28b:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001e28f:	53                   	push   ebx
c001e290:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001e293:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c001e297:	83 c4 20             	add    esp,0x20
c001e29a:	89 c8                	mov    eax,ecx
c001e29c:	99                   	cdq    
c001e29d:	3b 54 24 44          	cmp    edx,DWORD PTR [esp+0x44]
c001e2a1:	0f 85 02 02 00 00    	jne    c001e4a9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001e2a7:	3b 4c 24 40          	cmp    ecx,DWORD PTR [esp+0x40]
c001e2ab:	0f 85 f8 01 00 00    	jne    c001e4a9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001e2b1:	83 ec 0c             	sub    esp,0xc
c001e2b4:	53                   	push   ebx
c001e2b5:	e8 4a 9f fe ff       	call   c0008204 <File::close()>
c001e2ba:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001e2be:	83 c4 10             	add    esp,0x10
c001e2c1:	c6 05 ac 04 03 c0 01 	mov    BYTE PTR ds:0xc00304ac,0x1
c001e2c8:	a3 a4 04 03 c0       	mov    ds:0xc00304a4,eax
c001e2cd:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c001e2d5:	31 c9                	xor    ecx,ecx
c001e2d7:	66 c7 44 24 10 00 00 	mov    WORD PTR [esp+0x10],0x0
c001e2de:	8b 2d a4 04 03 c0    	mov    ebp,DWORD PTR ds:0xc00304a4
c001e2e4:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c001e2eb:	8b 15 a8 04 03 c0    	mov    edx,DWORD PTR ds:0xc00304a8
c001e2f1:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c001e2f6:	66 8b 84 24 82 01 00 00 	mov    ax,WORD PTR [esp+0x182]
c001e2fe:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c001e303:	0f b6 84 24 60 01 00 00 	movzx  eax,BYTE PTR [esp+0x160]
c001e30b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001e30f:	0f b6 84 24 61 01 00 00 	movzx  eax,BYTE PTR [esp+0x161]
c001e317:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001e31b:	39 cd                	cmp    ebp,ecx
c001e31d:	0f 8e 86 01 00 00    	jle    c001e4a9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001e323:	8a 04 0a             	mov    al,BYTE PTR [edx+ecx*1]
c001e326:	d4 40                	aam    0x40
c001e328:	d5 39                	aad    0x39
c001e32a:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001e32e:	8a 44 0a 01          	mov    al,BYTE PTR [edx+ecx*1+0x1]
c001e332:	d4 40                	aam    0x40
c001e334:	d5 39                	aad    0x39
c001e336:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001e33a:	8a 44 0a 03          	mov    al,BYTE PTR [edx+ecx*1+0x3]
c001e33e:	d4 40                	aam    0x40
c001e340:	d5 39                	aad    0x39
c001e342:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001e346:	8a 44 0a 04          	mov    al,BYTE PTR [edx+ecx*1+0x4]
c001e34a:	d4 40                	aam    0x40
c001e34c:	d5 39                	aad    0x39
c001e34e:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001e352:	8a 44 0a 06          	mov    al,BYTE PTR [edx+ecx*1+0x6]
c001e356:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c001e35a:	3c 56                	cmp    al,0x56
c001e35c:	74 47                	je     c001e3a5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b3>
c001e35e:	d4 40                	aam    0x40
c001e360:	d5 39                	aad    0x39
c001e362:	8d 58 d0             	lea    ebx,[eax-0x30]
c001e365:	8a 44 0a 07          	mov    al,BYTE PTR [edx+ecx*1+0x7]
c001e369:	0f b6 db             	movzx  ebx,bl
c001e36c:	c1 e3 04             	shl    ebx,0x4
c001e36f:	d4 40                	aam    0x40
c001e371:	d5 39                	aad    0x39
c001e373:	83 e8 30             	sub    eax,0x30
c001e376:	0f b6 c0             	movzx  eax,al
c001e379:	09 c3                	or     ebx,eax
c001e37b:	8a 44 0a 08          	mov    al,BYTE PTR [edx+ecx*1+0x8]
c001e37f:	c1 e3 04             	shl    ebx,0x4
c001e382:	d4 40                	aam    0x40
c001e384:	d5 39                	aad    0x39
c001e386:	83 e8 30             	sub    eax,0x30
c001e389:	0f b6 c0             	movzx  eax,al
c001e38c:	09 c3                	or     ebx,eax
c001e38e:	8a 44 0a 09          	mov    al,BYTE PTR [edx+ecx*1+0x9]
c001e392:	c1 e3 04             	shl    ebx,0x4
c001e395:	d4 40                	aam    0x40
c001e397:	d5 39                	aad    0x39
c001e399:	83 e8 30             	sub    eax,0x30
c001e39c:	0f b6 c0             	movzx  eax,al
c001e39f:	09 c3                	or     ebx,eax
c001e3a1:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001e3a5:	8a 5c 0a 0b          	mov    bl,BYTE PTR [edx+ecx*1+0xb]
c001e3a9:	80 fb 58             	cmp    bl,0x58
c001e3ac:	74 49                	je     c001e3f7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x205>
c001e3ae:	88 d8                	mov    al,bl
c001e3b0:	d4 40                	aam    0x40
c001e3b2:	d5 39                	aad    0x39
c001e3b4:	83 e8 30             	sub    eax,0x30
c001e3b7:	0f b6 f8             	movzx  edi,al
c001e3ba:	8a 44 0a 0c          	mov    al,BYTE PTR [edx+ecx*1+0xc]
c001e3be:	c1 e7 04             	shl    edi,0x4
c001e3c1:	d4 40                	aam    0x40
c001e3c3:	d5 39                	aad    0x39
c001e3c5:	83 e8 30             	sub    eax,0x30
c001e3c8:	0f b6 c0             	movzx  eax,al
c001e3cb:	09 c7                	or     edi,eax
c001e3cd:	8a 44 0a 0d          	mov    al,BYTE PTR [edx+ecx*1+0xd]
c001e3d1:	c1 e7 04             	shl    edi,0x4
c001e3d4:	d4 40                	aam    0x40
c001e3d6:	d5 39                	aad    0x39
c001e3d8:	83 e8 30             	sub    eax,0x30
c001e3db:	0f b6 c0             	movzx  eax,al
c001e3de:	09 c7                	or     edi,eax
c001e3e0:	8a 44 0a 0e          	mov    al,BYTE PTR [edx+ecx*1+0xe]
c001e3e4:	c1 e7 04             	shl    edi,0x4
c001e3e7:	d4 40                	aam    0x40
c001e3e9:	d5 39                	aad    0x39
c001e3eb:	83 e8 30             	sub    eax,0x30
c001e3ee:	0f b6 c0             	movzx  eax,al
c001e3f1:	09 c7                	or     edi,eax
c001e3f3:	89 7c 24 10          	mov    DWORD PTR [esp+0x10],edi
c001e3f7:	8d 41 10             	lea    eax,[ecx+0x10]
c001e3fa:	8d 7c 24 40          	lea    edi,[esp+0x40]
c001e3fe:	0f be 0c 02          	movsx  ecx,BYTE PTR [edx+eax*1]
c001e402:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001e406:	83 f9 0a             	cmp    ecx,0xa
c001e409:	74 07                	je     c001e412 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x220>
c001e40b:	47                   	inc    edi
c001e40c:	39 c5                	cmp    ebp,eax
c001e40e:	75 16                	jne    c001e426 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x234>
c001e410:	89 e8                	mov    eax,ebp
c001e412:	83 f9 0a             	cmp    ecx,0xa
c001e415:	0f 94 c1             	sete   cl
c001e418:	0f b6 c9             	movzx  ecx,cl
c001e41b:	01 c1                	add    ecx,eax
c001e41d:	80 7c 24 0a 56       	cmp    BYTE PTR [esp+0xa],0x56
c001e422:	75 0f                	jne    c001e433 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x241>
c001e424:	eb 1c                	jmp    c001e442 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x250>
c001e426:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001e429:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c001e42d:	40                   	inc    eax
c001e42e:	88 4f ff             	mov    BYTE PTR [edi-0x1],cl
c001e431:	eb cb                	jmp    c001e3fe <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x20c>
c001e433:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001e437:	66 39 7c 24 0c       	cmp    WORD PTR [esp+0xc],di
c001e43c:	0f 85 d9 fe ff ff    	jne    c001e31b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001e442:	80 fb 58             	cmp    bl,0x58
c001e445:	74 10                	je     c001e457 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x265>
c001e447:	66 8b 7c 24 16       	mov    di,WORD PTR [esp+0x16]
c001e44c:	66 39 7c 24 10       	cmp    WORD PTR [esp+0x10],di
c001e451:	0f 85 c4 fe ff ff    	jne    c001e31b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001e457:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e45b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001e45f:	83 e8 30             	sub    eax,0x30
c001e462:	c1 e0 04             	shl    eax,0x4
c001e465:	83 eb 30             	sub    ebx,0x30
c001e468:	09 d8                	or     eax,ebx
c001e46a:	0f b6 c0             	movzx  eax,al
c001e46d:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c001e471:	0f 85 a4 fe ff ff    	jne    c001e31b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001e477:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e47b:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001e47f:	83 e8 30             	sub    eax,0x30
c001e482:	c1 e0 04             	shl    eax,0x4
c001e485:	83 eb 30             	sub    ebx,0x30
c001e488:	09 d8                	or     eax,ebx
c001e48a:	0f b6 c0             	movzx  eax,al
c001e48d:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c001e491:	0f 85 84 fe ff ff    	jne    c001e31b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001e497:	50                   	push   eax
c001e498:	50                   	push   eax
c001e499:	8d 44 24 48          	lea    eax,[esp+0x48]
c001e49d:	50                   	push   eax
c001e49e:	56                   	push   esi
c001e49f:	e8 ac 21 fe ff       	call   c0000650 <strcpy>
c001e4a4:	83 c4 10             	add    esp,0x10
c001e4a7:	eb 05                	jmp    c001e4ae <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2bc>
c001e4a9:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001e4ac:	31 f6                	xor    esi,esi
c001e4ae:	81 c4 4c 01 00 00    	add    esp,0x14c
c001e4b4:	89 f0                	mov    eax,esi
c001e4b6:	5b                   	pop    ebx
c001e4b7:	5e                   	pop    esi
c001e4b8:	5f                   	pop    edi
c001e4b9:	5d                   	pop    ebp
c001e4ba:	c3                   	ret    
c001e4bb:	90                   	nop

c001e4bc <PCI::checkBus(unsigned char)>:
c001e4bc:	56                   	push   esi
c001e4bd:	53                   	push   ebx
c001e4be:	31 db                	xor    ebx,ebx
c001e4c0:	51                   	push   ecx
c001e4c1:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001e4c6:	52                   	push   edx
c001e4c7:	53                   	push   ebx
c001e4c8:	43                   	inc    ebx
c001e4c9:	56                   	push   esi
c001e4ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e4ce:	e8 6f 03 00 00       	call   c001e842 <PCI::checkDevice(unsigned char, unsigned char)>
c001e4d3:	83 c4 10             	add    esp,0x10
c001e4d6:	83 fb 20             	cmp    ebx,0x20
c001e4d9:	75 eb                	jne    c001e4c6 <PCI::checkBus(unsigned char)+0xa>
c001e4db:	58                   	pop    eax
c001e4dc:	5b                   	pop    ebx
c001e4dd:	5e                   	pop    esi
c001e4de:	c3                   	ret    
c001e4df:	90                   	nop

c001e4e0 <PCI::foundDevice(PCIDeviceInfo)>:
c001e4e0:	55                   	push   ebp
c001e4e1:	57                   	push   edi
c001e4e2:	56                   	push   esi
c001e4e3:	53                   	push   ebx
c001e4e4:	81 ec 8c 00 00 00    	sub    esp,0x8c
c001e4ea:	0f b7 84 24 a6 00 00 00 	movzx  eax,WORD PTR [esp+0xa6]
c001e4f2:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c001e4f9:	3d ff ff 00 00       	cmp    eax,0xffff
c001e4fe:	0f 84 b6 01 00 00    	je     c001e6ba <PCI::foundDevice(PCIDeviceInfo)+0x1da>
c001e504:	0f b7 ac 24 a4 00 00 00 	movzx  ebp,WORD PTR [esp+0xa4]
c001e50c:	66 81 fd 06 04       	cmp    bp,0x406
c001e511:	75 32                	jne    c001e545 <PCI::foundDevice(PCIDeviceInfo)+0x65>
c001e513:	0f b6 84 24 aa 00 00 00 	movzx  eax,BYTE PTR [esp+0xaa]
c001e51b:	50                   	push   eax
c001e51c:	0f b6 84 24 ad 00 00 00 	movzx  eax,BYTE PTR [esp+0xad]
c001e524:	50                   	push   eax
c001e525:	0f b6 84 24 b0 00 00 00 	movzx  eax,BYTE PTR [esp+0xb0]
c001e52d:	50                   	push   eax
c001e52e:	53                   	push   ebx
c001e52f:	e8 4c fb ff ff       	call   c001e080 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001e534:	59                   	pop    ecx
c001e535:	5e                   	pop    esi
c001e536:	0f b6 c0             	movzx  eax,al
c001e539:	50                   	push   eax
c001e53a:	53                   	push   ebx
c001e53b:	e8 7c ff ff ff       	call   c001e4bc <PCI::checkBus(unsigned char)>
c001e540:	e9 15 01 00 00       	jmp    c001e65a <PCI::foundDevice(PCIDeviceInfo)+0x17a>
c001e545:	0f b6 94 24 c4 00 00 00 	movzx  edx,BYTE PTR [esp+0xc4]
c001e54d:	8b 83 cc 00 00 00    	mov    eax,DWORD PTR [ebx+0xcc]
c001e553:	8b 8c 24 a4 00 00 00 	mov    ecx,DWORD PTR [esp+0xa4]
c001e55a:	8b b4 24 ac 00 00 00 	mov    esi,DWORD PTR [esp+0xac]
c001e561:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e565:	85 c0                	test   eax,eax
c001e567:	74 34                	je     c001e59d <PCI::foundDevice(PCIDeviceInfo)+0xbd>
c001e569:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001e56c:	85 d2                	test   edx,edx
c001e56e:	74 29                	je     c001e599 <PCI::foundDevice(PCIDeviceInfo)+0xb9>
c001e570:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c001e576:	31 cf                	xor    edi,ecx
c001e578:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c001e57e:	75 19                	jne    c001e599 <PCI::foundDevice(PCIDeviceInfo)+0xb9>
c001e580:	39 b2 20 01 00 00    	cmp    DWORD PTR [edx+0x120],esi
c001e586:	75 11                	jne    c001e599 <PCI::foundDevice(PCIDeviceInfo)+0xb9>
c001e588:	0f b6 92 38 01 00 00 	movzx  edx,BYTE PTR [edx+0x138]
c001e58f:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c001e593:	0f 84 21 01 00 00    	je     c001e6ba <PCI::foundDevice(PCIDeviceInfo)+0x1da>
c001e599:	8b 00                	mov    eax,DWORD PTR [eax]
c001e59b:	eb c8                	jmp    c001e565 <PCI::foundDevice(PCIDeviceInfo)+0x85>
c001e59d:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001e5a1:	be e4 61 02 c0       	mov    esi,0xc00261e4
c001e5a6:	b9 07 00 00 00       	mov    ecx,0x7
c001e5ab:	fc                   	cld    
c001e5ac:	31 d2                	xor    edx,edx
c001e5ae:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001e5b0:	b9 12 00 00 00       	mov    ecx,0x12
c001e5b5:	66 c7 44 24 35 30 30 	mov    WORD PTR [esp+0x35],0x3030
c001e5bc:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001e5c0:	83 ec 0c             	sub    esp,0xc
c001e5c3:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e5c5:	0f b6 84 24 b0 00 00 00 	movzx  eax,BYTE PTR [esp+0xb0]
c001e5cd:	b9 0a 00 00 00       	mov    ecx,0xa
c001e5d2:	f7 f1                	div    ecx
c001e5d4:	83 c0 30             	add    eax,0x30
c001e5d7:	83 c2 30             	add    edx,0x30
c001e5da:	88 44 24 39          	mov    BYTE PTR [esp+0x39],al
c001e5de:	0f b6 84 24 b1 00 00 00 	movzx  eax,BYTE PTR [esp+0xb1]
c001e5e6:	88 54 24 3a          	mov    BYTE PTR [esp+0x3a],dl
c001e5ea:	31 d2                	xor    edx,edx
c001e5ec:	f7 f1                	div    ecx
c001e5ee:	83 c0 30             	add    eax,0x30
c001e5f1:	83 c2 30             	add    edx,0x30
c001e5f4:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c001e5f8:	88 54 24 3e          	mov    BYTE PTR [esp+0x3e],dl
c001e5fc:	8d 44 24 28          	lea    eax,[esp+0x28]
c001e600:	50                   	push   eax
c001e601:	e8 2f ec fe ff       	call   c000d235 <KeSetBootMessage(char const*)>
c001e606:	83 c4 10             	add    esp,0x10
c001e609:	81 fd 01 06 00 00    	cmp    ebp,0x601
c001e60f:	8d b4 24 a4 00 00 00 	lea    esi,[esp+0xa4]
c001e616:	75 47                	jne    c001e65f <PCI::foundDevice(PCIDeviceInfo)+0x17f>
c001e618:	83 ec 0c             	sub    esp,0xc
c001e61b:	68 64 01 00 00       	push   0x164
c001e620:	e8 57 15 ff ff       	call   c000fb7c <malloc>
c001e625:	89 04 24             	mov    DWORD PTR [esp],eax
c001e628:	89 c5                	mov    ebp,eax
c001e62a:	e8 37 11 00 00       	call   c001f766 <SATABus::SATABus()>
c001e62f:	58                   	pop    eax
c001e630:	5a                   	pop    edx
c001e631:	55                   	push   ebp
c001e632:	53                   	push   ebx
c001e633:	e8 be b3 fe ff       	call   c00099f6 <Device::addChild(Device*)>
c001e638:	83 ec 1c             	sub    esp,0x1c
c001e63b:	b9 09 00 00 00       	mov    ecx,0x9
c001e640:	89 e7                	mov    edi,esp
c001e642:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001e644:	55                   	push   ebp
c001e645:	e8 f2 b2 fe ff       	call   c000993c <Device::preOpenPCI(PCIDeviceInfo)>
c001e64a:	83 c4 30             	add    esp,0x30
c001e64d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001e650:	6a 00                	push   0x0
c001e652:	6a 00                	push   0x0
c001e654:	6a 00                	push   0x0
c001e656:	55                   	push   ebp
c001e657:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001e65a:	83 c4 10             	add    esp,0x10
c001e65d:	eb 5b                	jmp    c001e6ba <PCI::foundDevice(PCIDeviceInfo)+0x1da>
c001e65f:	81 fd 01 01 00 00    	cmp    ebp,0x101
c001e665:	75 19                	jne    c001e680 <PCI::foundDevice(PCIDeviceInfo)+0x1a0>
c001e667:	83 ec 0c             	sub    esp,0xc
c001e66a:	68 70 02 00 00       	push   0x270
c001e66f:	e8 08 15 ff ff       	call   c000fb7c <malloc>
c001e674:	89 04 24             	mov    DWORD PTR [esp],eax
c001e677:	89 c5                	mov    ebp,eax
c001e679:	e8 94 02 00 00       	call   c001e912 <IDE::IDE()>
c001e67e:	eb af                	jmp    c001e62f <PCI::foundDevice(PCIDeviceInfo)+0x14f>
c001e680:	83 ec 0c             	sub    esp,0xc
c001e683:	68 58 01 00 00       	push   0x158
c001e688:	e8 ef 14 ff ff       	call   c000fb7c <malloc>
c001e68d:	89 c5                	mov    ebp,eax
c001e68f:	58                   	pop    eax
c001e690:	5a                   	pop    edx
c001e691:	68 ca 61 02 c0       	push   0xc00261ca
c001e696:	55                   	push   ebp
c001e697:	e8 0e b6 fe ff       	call   c0009caa <DriverlessDevice::DriverlessDevice(char const*)>
c001e69c:	59                   	pop    ecx
c001e69d:	5f                   	pop    edi
c001e69e:	55                   	push   ebp
c001e69f:	53                   	push   ebx
c001e6a0:	e8 51 b3 fe ff       	call   c00099f6 <Device::addChild(Device*)>
c001e6a5:	83 ec 1c             	sub    esp,0x1c
c001e6a8:	b9 09 00 00 00       	mov    ecx,0x9
c001e6ad:	89 e7                	mov    edi,esp
c001e6af:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001e6b1:	55                   	push   ebp
c001e6b2:	e8 85 b2 fe ff       	call   c000993c <Device::preOpenPCI(PCIDeviceInfo)>
c001e6b7:	83 c4 30             	add    esp,0x30
c001e6ba:	81 c4 8c 00 00 00    	add    esp,0x8c
c001e6c0:	5b                   	pop    ebx
c001e6c1:	5e                   	pop    esi
c001e6c2:	5f                   	pop    edi
c001e6c3:	5d                   	pop    ebp
c001e6c4:	c3                   	ret    
c001e6c5:	90                   	nop

c001e6c6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001e6c6:	55                   	push   ebp
c001e6c7:	57                   	push   edi
c001e6c8:	56                   	push   esi
c001e6c9:	53                   	push   ebx
c001e6ca:	83 ec 68             	sub    esp,0x68
c001e6cd:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001e6d4:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c001e6d8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001e6dc:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001e6e3:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c001e6e8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001e6ec:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001e6f3:	0f b6 5c 24 24       	movzx  ebx,BYTE PTR [esp+0x24]
c001e6f8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001e6fc:	0f b6 7c 24 28       	movzx  edi,BYTE PTR [esp+0x28]
c001e701:	6a 0c                	push   0xc
c001e703:	57                   	push   edi
c001e704:	53                   	push   ebx
c001e705:	56                   	push   esi
c001e706:	55                   	push   ebp
c001e707:	e8 c4 f7 ff ff       	call   c001ded0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e70c:	83 c4 20             	add    esp,0x20
c001e70f:	57                   	push   edi
c001e710:	53                   	push   ebx
c001e711:	56                   	push   esi
c001e712:	55                   	push   ebp
c001e713:	e8 ae f8 ff ff       	call   c001dfc6 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001e718:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c001e71d:	57                   	push   edi
c001e71e:	53                   	push   ebx
c001e71f:	56                   	push   esi
c001e720:	55                   	push   ebp
c001e721:	e8 36 f9 ff ff       	call   c001e05c <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001e726:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001e72a:	83 c4 14             	add    esp,0x14
c001e72d:	6a 3c                	push   0x3c
c001e72f:	57                   	push   edi
c001e730:	53                   	push   ebx
c001e731:	56                   	push   esi
c001e732:	55                   	push   ebp
c001e733:	e8 98 f7 ff ff       	call   c001ded0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e738:	0f b6 c4             	movzx  eax,ah
c001e73b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001e73f:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001e743:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001e747:	a1 d4 d0 02 c0       	mov    eax,ds:0xc002d0d4
c001e74c:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c001e752:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c001e758:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001e75c:	83 c4 20             	add    esp,0x20
c001e75f:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c001e764:	74 30                	je     c001e796 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001e766:	31 c0                	xor    eax,eax
c001e768:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001e76c:	7e 28                	jle    c001e796 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001e76e:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c001e776:	39 cb                	cmp    ebx,ecx
c001e778:	75 19                	jne    c001e793 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001e77a:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c001e782:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001e786:	75 0b                	jne    c001e793 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001e788:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c001e78f:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001e793:	40                   	inc    eax
c001e794:	eb d2                	jmp    c001e768 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c001e796:	31 d2                	xor    edx,edx
c001e798:	83 ec 0c             	sub    esp,0xc
c001e79b:	57                   	push   edi
c001e79c:	53                   	push   ebx
c001e79d:	56                   	push   esi
c001e79e:	52                   	push   edx
c001e79f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001e7a3:	55                   	push   ebp
c001e7a4:	e8 ff f8 ff ff       	call   c001e0a8 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e7a9:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001e7ad:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001e7b1:	42                   	inc    edx
c001e7b2:	83 c4 20             	add    esp,0x20
c001e7b5:	83 fa 06             	cmp    edx,0x6
c001e7b8:	75 de                	jne    c001e798 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c001e7ba:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001e7be:	83 ec 0c             	sub    esp,0xc
c001e7c1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e7c5:	c1 e2 08             	shl    edx,0x8
c001e7c8:	0f b6 c4             	movzx  eax,ah
c001e7cb:	09 d0                	or     eax,edx
c001e7cd:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c001e7d2:	6a 02                	push   0x2
c001e7d4:	57                   	push   edi
c001e7d5:	53                   	push   ebx
c001e7d6:	56                   	push   esi
c001e7d7:	55                   	push   ebp
c001e7d8:	e8 f3 f6 ff ff       	call   c001ded0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e7dd:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c001e7e2:	83 c4 20             	add    esp,0x20
c001e7e5:	57                   	push   edi
c001e7e6:	53                   	push   ebx
c001e7e7:	56                   	push   esi
c001e7e8:	55                   	push   ebp
c001e7e9:	e8 22 f8 ff ff       	call   c001e010 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001e7ee:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001e7f2:	57                   	push   edi
c001e7f3:	53                   	push   ebx
c001e7f4:	56                   	push   esi
c001e7f5:	55                   	push   ebp
c001e7f6:	e8 7f f7 ff ff       	call   c001df7a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001e7fb:	b9 09 00 00 00       	mov    ecx,0x9
c001e800:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c001e805:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001e809:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001e80d:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001e811:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c001e815:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001e819:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c001e81d:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c001e821:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c001e825:	83 ec 0c             	sub    esp,0xc
c001e828:	fc                   	cld    
c001e829:	8d 74 24 58          	lea    esi,[esp+0x58]
c001e82d:	89 e7                	mov    edi,esp
c001e82f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001e831:	55                   	push   ebp
c001e832:	e8 a9 fc ff ff       	call   c001e4e0 <PCI::foundDevice(PCIDeviceInfo)>
c001e837:	81 c4 8c 00 00 00    	add    esp,0x8c
c001e83d:	5b                   	pop    ebx
c001e83e:	5e                   	pop    esi
c001e83f:	5f                   	pop    edi
c001e840:	5d                   	pop    ebp
c001e841:	c3                   	ret    

c001e842 <PCI::checkDevice(unsigned char, unsigned char)>:
c001e842:	55                   	push   ebp
c001e843:	57                   	push   edi
c001e844:	56                   	push   esi
c001e845:	53                   	push   ebx
c001e846:	83 ec 0c             	sub    esp,0xc
c001e849:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001e84e:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001e853:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001e857:	6a 00                	push   0x0
c001e859:	56                   	push   esi
c001e85a:	57                   	push   edi
c001e85b:	55                   	push   ebp
c001e85c:	e8 19 f7 ff ff       	call   c001df7a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001e861:	6a 00                	push   0x0
c001e863:	56                   	push   esi
c001e864:	57                   	push   edi
c001e865:	55                   	push   ebp
c001e866:	e8 5b fe ff ff       	call   c001e6c6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001e86b:	83 c4 20             	add    esp,0x20
c001e86e:	6a 00                	push   0x0
c001e870:	56                   	push   esi
c001e871:	57                   	push   edi
c001e872:	55                   	push   ebp
c001e873:	e8 26 f7 ff ff       	call   c001df9e <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001e878:	83 c4 10             	add    esp,0x10
c001e87b:	a8 80                	test   al,0x80
c001e87d:	74 2d                	je     c001e8ac <PCI::checkDevice(unsigned char, unsigned char)+0x6a>
c001e87f:	bb 01 00 00 00       	mov    ebx,0x1
c001e884:	53                   	push   ebx
c001e885:	56                   	push   esi
c001e886:	57                   	push   edi
c001e887:	55                   	push   ebp
c001e888:	e8 ed f6 ff ff       	call   c001df7a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001e88d:	83 c4 10             	add    esp,0x10
c001e890:	0f b7 c0             	movzx  eax,ax
c001e893:	3d ff ff 00 00       	cmp    eax,0xffff
c001e898:	74 0c                	je     c001e8a6 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001e89a:	53                   	push   ebx
c001e89b:	56                   	push   esi
c001e89c:	57                   	push   edi
c001e89d:	55                   	push   ebp
c001e89e:	e8 23 fe ff ff       	call   c001e6c6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001e8a3:	83 c4 10             	add    esp,0x10
c001e8a6:	43                   	inc    ebx
c001e8a7:	83 fb 08             	cmp    ebx,0x8
c001e8aa:	75 d8                	jne    c001e884 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001e8ac:	83 c4 0c             	add    esp,0xc
c001e8af:	5b                   	pop    ebx
c001e8b0:	5e                   	pop    esi
c001e8b1:	5f                   	pop    edi
c001e8b2:	5d                   	pop    ebp
c001e8b3:	c3                   	ret    

c001e8b4 <PCI::detect()>:
c001e8b4:	56                   	push   esi
c001e8b5:	53                   	push   ebx
c001e8b6:	53                   	push   ebx
c001e8b7:	31 db                	xor    ebx,ebx
c001e8b9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e8bd:	6a 00                	push   0x0
c001e8bf:	6a 00                	push   0x0
c001e8c1:	6a 00                	push   0x0
c001e8c3:	56                   	push   esi
c001e8c4:	e8 d5 f6 ff ff       	call   c001df9e <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001e8c9:	83 c4 10             	add    esp,0x10
c001e8cc:	a8 80                	test   al,0x80
c001e8ce:	75 21                	jne    c001e8f1 <PCI::detect()+0x3d>
c001e8d0:	51                   	push   ecx
c001e8d1:	51                   	push   ecx
c001e8d2:	6a 00                	push   0x0
c001e8d4:	56                   	push   esi
c001e8d5:	e8 e2 fb ff ff       	call   c001e4bc <PCI::checkBus(unsigned char)>
c001e8da:	83 c4 10             	add    esp,0x10
c001e8dd:	eb 2a                	jmp    c001e909 <PCI::detect()+0x55>
c001e8df:	52                   	push   edx
c001e8e0:	52                   	push   edx
c001e8e1:	53                   	push   ebx
c001e8e2:	43                   	inc    ebx
c001e8e3:	56                   	push   esi
c001e8e4:	e8 d3 fb ff ff       	call   c001e4bc <PCI::checkBus(unsigned char)>
c001e8e9:	83 c4 10             	add    esp,0x10
c001e8ec:	83 fb 08             	cmp    ebx,0x8
c001e8ef:	74 18                	je     c001e909 <PCI::detect()+0x55>
c001e8f1:	53                   	push   ebx
c001e8f2:	6a 00                	push   0x0
c001e8f4:	6a 00                	push   0x0
c001e8f6:	56                   	push   esi
c001e8f7:	e8 7e f6 ff ff       	call   c001df7a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001e8fc:	83 c4 10             	add    esp,0x10
c001e8ff:	0f b7 c0             	movzx  eax,ax
c001e902:	3d ff ff 00 00       	cmp    eax,0xffff
c001e907:	74 d6                	je     c001e8df <PCI::detect()+0x2b>
c001e909:	58                   	pop    eax
c001e90a:	5b                   	pop    ebx
c001e90b:	5e                   	pop    esi
c001e90c:	c3                   	ret    
c001e90d:	90                   	nop

c001e90e <IDE::close(int, int, void*)>:
c001e90e:	83 c8 ff             	or     eax,0xffffffff
c001e911:	c3                   	ret    

c001e912 <IDE::IDE()>:
c001e912:	83 ec 0c             	sub    esp,0xc
c001e915:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e919:	83 ec 08             	sub    esp,0x8
c001e91c:	68 74 62 02 c0       	push   0xc0026274
c001e921:	50                   	push   eax
c001e922:	e8 29 b4 fe ff       	call   c0009d50 <HardDiskController::HardDiskController(char const*)>
c001e927:	83 c4 10             	add    esp,0x10
c001e92a:	ba a0 63 02 c0       	mov    edx,0xc00263a0
c001e92f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e933:	89 10                	mov    DWORD PTR [eax],edx
c001e935:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e939:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001e940:	90                   	nop
c001e941:	83 c4 0c             	add    esp,0xc
c001e944:	c3                   	ret    
c001e945:	90                   	nop

c001e946 <IDE::prepareInterrupt(unsigned char)>:
c001e946:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001e94b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e94f:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001e957:	c3                   	ret    

c001e958 <selectDrive(unsigned char, unsigned char)>:
c001e958:	c3                   	ret    
c001e959:	90                   	nop

c001e95a <IDE::getBase(unsigned char)>:
c001e95a:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001e95f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e963:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001e96b:	c3                   	ret    

c001e96c <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001e96c:	55                   	push   ebp
c001e96d:	57                   	push   edi
c001e96e:	56                   	push   esi
c001e96f:	53                   	push   ebx
c001e970:	83 ec 1c             	sub    esp,0x1c
c001e973:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001e977:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001e97b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001e97f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001e983:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001e986:	80 f9 03             	cmp    cl,0x3
c001e989:	77 4f                	ja     c001e9da <IDE::write(unsigned char, unsigned char, unsigned char)+0x6e>
c001e98b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e98f:	0f b6 f2             	movzx  esi,dl
c001e992:	0f b6 db             	movzx  ebx,bl
c001e995:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001e998:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001e99d:	80 ca 80             	or     dl,0x80
c001e9a0:	52                   	push   edx
c001e9a1:	6a 0c                	push   0xc
c001e9a3:	56                   	push   esi
c001e9a4:	57                   	push   edi
c001e9a5:	e8 c2 ff ff ff       	call   c001e96c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e9aa:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c001e9af:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e9b3:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001e9b7:	ee                   	out    dx,al
c001e9b8:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001e9bd:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001e9c1:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001e9c5:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001e9cd:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001e9d1:	83 c4 2c             	add    esp,0x2c
c001e9d4:	5b                   	pop    ebx
c001e9d5:	5e                   	pop    esi
c001e9d6:	5f                   	pop    edi
c001e9d7:	5d                   	pop    ebp
c001e9d8:	eb 92                	jmp    c001e96c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e9da:	0f b6 cb             	movzx  ecx,bl
c001e9dd:	83 f9 07             	cmp    ecx,0x7
c001e9e0:	77 12                	ja     c001e9f4 <IDE::write(unsigned char, unsigned char, unsigned char)+0x88>
c001e9e2:	0f b6 d2             	movzx  edx,dl
c001e9e5:	0f b6 db             	movzx  ebx,bl
c001e9e8:	66 8b 94 d7 5a 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15a]
c001e9f0:	01 da                	add    edx,ebx
c001e9f2:	eb 2f                	jmp    c001ea23 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001e9f4:	83 f9 0d             	cmp    ecx,0xd
c001e9f7:	77 13                	ja     c001ea0c <IDE::write(unsigned char, unsigned char, unsigned char)+0xa0>
c001e9f9:	0f b6 d2             	movzx  edx,dl
c001e9fc:	0f b6 db             	movzx  ebx,bl
c001e9ff:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001ea06:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001ea0a:	eb 17                	jmp    c001ea23 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001ea0c:	83 f9 15             	cmp    ecx,0x15
c001ea0f:	77 13                	ja     c001ea24 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb8>
c001ea11:	0f b6 d2             	movzx  edx,dl
c001ea14:	0f b6 db             	movzx  ebx,bl
c001ea17:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001ea1f:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001ea23:	ee                   	out    dx,al
c001ea24:	83 c4 1c             	add    esp,0x1c
c001ea27:	5b                   	pop    ebx
c001ea28:	5e                   	pop    esi
c001ea29:	5f                   	pop    edi
c001ea2a:	5d                   	pop    ebp
c001ea2b:	c3                   	ret    

c001ea2c <IDE::read(unsigned char, unsigned char)>:
c001ea2c:	57                   	push   edi
c001ea2d:	56                   	push   esi
c001ea2e:	53                   	push   ebx
c001ea2f:	83 ec 10             	sub    esp,0x10
c001ea32:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001ea36:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001ea3a:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001ea3e:	8d 42 f8             	lea    eax,[edx-0x8]
c001ea41:	3c 03                	cmp    al,0x3
c001ea43:	77 48                	ja     c001ea8d <IDE::read(unsigned char, unsigned char)+0x61>
c001ea45:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001ea49:	0f b6 f1             	movzx  esi,cl
c001ea4c:	8d 7e 2a             	lea    edi,[esi+0x2a]
c001ea4f:	0f b6 44 fb 10       	movzx  eax,BYTE PTR [ebx+edi*8+0x10]
c001ea54:	0c 80                	or     al,0x80
c001ea56:	50                   	push   eax
c001ea57:	6a 0c                	push   0xc
c001ea59:	56                   	push   esi
c001ea5a:	53                   	push   ebx
c001ea5b:	e8 0c ff ff ff       	call   c001e96c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ea60:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ea64:	66 8b 44 fb 0a       	mov    ax,WORD PTR [ebx+edi*8+0xa]
c001ea69:	0f b6 d2             	movzx  edx,dl
c001ea6c:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001ea70:	ec                   	in     al,dx
c001ea71:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001ea75:	0f b6 54 fb 10       	movzx  edx,BYTE PTR [ebx+edi*8+0x10]
c001ea7a:	52                   	push   edx
c001ea7b:	6a 0c                	push   0xc
c001ea7d:	56                   	push   esi
c001ea7e:	53                   	push   ebx
c001ea7f:	e8 e8 fe ff ff       	call   c001e96c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ea84:	83 c4 20             	add    esp,0x20
c001ea87:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001ea8b:	eb 4c                	jmp    c001ead9 <IDE::read(unsigned char, unsigned char)+0xad>
c001ea8d:	0f b6 f2             	movzx  esi,dl
c001ea90:	83 fe 07             	cmp    esi,0x7
c001ea93:	77 12                	ja     c001eaa7 <IDE::read(unsigned char, unsigned char)+0x7b>
c001ea95:	0f b6 c9             	movzx  ecx,cl
c001ea98:	0f b6 d2             	movzx  edx,dl
c001ea9b:	66 8b 84 cb 5a 01 00 00 	mov    ax,WORD PTR [ebx+ecx*8+0x15a]
c001eaa3:	01 c2                	add    edx,eax
c001eaa5:	eb 31                	jmp    c001ead8 <IDE::read(unsigned char, unsigned char)+0xac>
c001eaa7:	83 fe 0d             	cmp    esi,0xd
c001eaaa:	77 13                	ja     c001eabf <IDE::read(unsigned char, unsigned char)+0x93>
c001eaac:	0f b6 c9             	movzx  ecx,cl
c001eaaf:	0f b6 d2             	movzx  edx,dl
c001eab2:	8b 84 cb 5c 01 00 00 	mov    eax,DWORD PTR [ebx+ecx*8+0x15c]
c001eab9:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001eabd:	eb 19                	jmp    c001ead8 <IDE::read(unsigned char, unsigned char)+0xac>
c001eabf:	31 c0                	xor    eax,eax
c001eac1:	83 fe 15             	cmp    esi,0x15
c001eac4:	77 13                	ja     c001ead9 <IDE::read(unsigned char, unsigned char)+0xad>
c001eac6:	0f b6 c9             	movzx  ecx,cl
c001eac9:	0f b6 d2             	movzx  edx,dl
c001eacc:	66 8b 84 cb 5e 01 00 00 	mov    ax,WORD PTR [ebx+ecx*8+0x15e]
c001ead4:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001ead8:	ec                   	in     al,dx
c001ead9:	83 c4 10             	add    esp,0x10
c001eadc:	5b                   	pop    ebx
c001eadd:	5e                   	pop    esi
c001eade:	5f                   	pop    edi
c001eadf:	c3                   	ret    

c001eae0 <IDE::waitInterrupt(unsigned char)>:
c001eae0:	55                   	push   ebp
c001eae1:	57                   	push   edi
c001eae2:	56                   	push   esi
c001eae3:	53                   	push   ebx
c001eae4:	31 db                	xor    ebx,ebx
c001eae6:	83 ec 0c             	sub    esp,0xc
c001eae9:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001eaed:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001eaf2:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001eafa:	89 e8                	mov    eax,ebp
c001eafc:	84 c0                	test   al,al
c001eafe:	75 31                	jne    c001eb31 <IDE::waitInterrupt(unsigned char)+0x51>
c001eb00:	52                   	push   edx
c001eb01:	6a 0c                	push   0xc
c001eb03:	56                   	push   esi
c001eb04:	57                   	push   edi
c001eb05:	e8 22 ff ff ff       	call   c001ea2c <IDE::read(unsigned char, unsigned char)>
c001eb0a:	83 c4 10             	add    esp,0x10
c001eb0d:	a8 01                	test   al,0x1
c001eb0f:	75 28                	jne    c001eb39 <IDE::waitInterrupt(unsigned char)+0x59>
c001eb11:	f6 c3 04             	test   bl,0x4
c001eb14:	75 13                	jne    c001eb29 <IDE::waitInterrupt(unsigned char)+0x49>
c001eb16:	83 fb 32             	cmp    ebx,0x32
c001eb19:	7e 0e                	jle    c001eb29 <IDE::waitInterrupt(unsigned char)+0x49>
c001eb1b:	50                   	push   eax
c001eb1c:	50                   	push   eax
c001eb1d:	6a 00                	push   0x0
c001eb1f:	6a 64                	push   0x64
c001eb21:	e8 9a 87 ff ff       	call   c00172c0 <milliTenthSleep(unsigned long long)>
c001eb26:	83 c4 10             	add    esp,0x10
c001eb29:	83 fb 3c             	cmp    ebx,0x3c
c001eb2c:	74 0b                	je     c001eb39 <IDE::waitInterrupt(unsigned char)+0x59>
c001eb2e:	43                   	inc    ebx
c001eb2f:	eb c1                	jmp    c001eaf2 <IDE::waitInterrupt(unsigned char)+0x12>
c001eb31:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001eb39:	83 c4 0c             	add    esp,0xc
c001eb3c:	89 e8                	mov    eax,ebp
c001eb3e:	5b                   	pop    ebx
c001eb3f:	5e                   	pop    esi
c001eb40:	5f                   	pop    edi
c001eb41:	5d                   	pop    ebp
c001eb42:	c3                   	ret    

c001eb43 <ideChannel0IRQHandler(regs*, void*)>:
c001eb43:	83 ec 10             	sub    esp,0x10
c001eb46:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001eb4a:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001eb51:	6a 07                	push   0x7
c001eb53:	6a 00                	push   0x0
c001eb55:	50                   	push   eax
c001eb56:	e8 d1 fe ff ff       	call   c001ea2c <IDE::read(unsigned char, unsigned char)>
c001eb5b:	83 c4 1c             	add    esp,0x1c
c001eb5e:	c3                   	ret    

c001eb5f <ideChannel1IRQHandler(regs*, void*)>:
c001eb5f:	83 ec 10             	sub    esp,0x10
c001eb62:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001eb66:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001eb6d:	6a 07                	push   0x7
c001eb6f:	6a 01                	push   0x1
c001eb71:	50                   	push   eax
c001eb72:	e8 b5 fe ff ff       	call   c001ea2c <IDE::read(unsigned char, unsigned char)>
c001eb77:	83 c4 1c             	add    esp,0x1c
c001eb7a:	c3                   	ret    
c001eb7b:	90                   	nop

c001eb7c <IDE::enableIRQs(unsigned char, bool)>:
c001eb7c:	57                   	push   edi
c001eb7d:	b8 02 00 00 00       	mov    eax,0x2
c001eb82:	56                   	push   esi
c001eb83:	53                   	push   ebx
c001eb84:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001eb89:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001eb8d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001eb91:	74 02                	je     c001eb95 <IDE::enableIRQs(unsigned char, bool)+0x19>
c001eb93:	31 c0                	xor    eax,eax
c001eb95:	0f b6 db             	movzx  ebx,bl
c001eb98:	bf 04 00 00 00       	mov    edi,0x4
c001eb9d:	88 84 de 60 01 00 00 	mov    BYTE PTR [esi+ebx*8+0x160],al
c001eba4:	50                   	push   eax
c001eba5:	6a 0c                	push   0xc
c001eba7:	53                   	push   ebx
c001eba8:	56                   	push   esi
c001eba9:	e8 be fd ff ff       	call   c001e96c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ebae:	83 c4 10             	add    esp,0x10
c001ebb1:	50                   	push   eax
c001ebb2:	6a 0c                	push   0xc
c001ebb4:	53                   	push   ebx
c001ebb5:	56                   	push   esi
c001ebb6:	e8 71 fe ff ff       	call   c001ea2c <IDE::read(unsigned char, unsigned char)>
c001ebbb:	83 c4 10             	add    esp,0x10
c001ebbe:	4f                   	dec    edi
c001ebbf:	75 f0                	jne    c001ebb1 <IDE::enableIRQs(unsigned char, bool)+0x35>
c001ebc1:	5b                   	pop    ebx
c001ebc2:	5e                   	pop    esi
c001ebc3:	5f                   	pop    edi
c001ebc4:	c3                   	ret    
c001ebc5:	90                   	nop

c001ebc6 <IDE::open(int, int, void*)>:
c001ebc6:	55                   	push   ebp
c001ebc7:	57                   	push   edi
c001ebc8:	56                   	push   esi
c001ebc9:	53                   	push   ebx
c001ebca:	83 ec 1c             	sub    esp,0x1c
c001ebcd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001ebd1:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001ebd8:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001ebe1:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001ebea:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001ebf1:	0f 85 80 02 00 00    	jne    c001ee77 <IDE::open(int, int, void*)+0x2b1>
c001ebf7:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001ebfd:	a8 70                	test   al,0x70
c001ebff:	75 44                	jne    c001ec45 <IDE::open(int, int, void*)+0x7f>
c001ec01:	ba 20 84 00 00       	mov    edx,0x8420
c001ec06:	0f a3 c2             	bt     edx,eax
c001ec09:	73 3a                	jae    c001ec45 <IDE::open(int, int, void*)+0x7f>
c001ec0b:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001ec11:	83 ec 0c             	sub    esp,0xc
c001ec14:	83 e0 fc             	and    eax,0xfffffffc
c001ec17:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001ec1e:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001ec24:	83 e0 fc             	and    eax,0xfffffffc
c001ec27:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001ec2e:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001ec34:	83 e0 fc             	and    eax,0xfffffffc
c001ec37:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001ec3e:	68 dd 34 02 c0       	push   0xc00234dd
c001ec43:	eb 60                	jmp    c001eca5 <IDE::open(int, int, void*)+0xdf>
c001ec45:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001ec4f:	be 64 00 00 00       	mov    esi,0x64
c001ec54:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001ec5e:	57                   	push   edi
c001ec5f:	57                   	push   edi
c001ec60:	68 8c 62 02 c0       	push   0xc002628c
c001ec65:	8d 7c 24 12          	lea    edi,[esp+0x12]
c001ec69:	57                   	push   edi
c001ec6a:	e8 e1 19 fe ff       	call   c0000650 <strcpy>
c001ec6f:	0f b6 8b 1f 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11f]
c001ec76:	31 d2                	xor    edx,edx
c001ec78:	89 3c 24             	mov    DWORD PTR [esp],edi
c001ec7b:	89 c8                	mov    eax,ecx
c001ec7d:	f7 f6                	div    esi
c001ec7f:	be 0a 00 00 00       	mov    esi,0xa
c001ec84:	31 d2                	xor    edx,edx
c001ec86:	83 c0 30             	add    eax,0x30
c001ec89:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001ec8d:	89 c8                	mov    eax,ecx
c001ec8f:	f7 f6                	div    esi
c001ec91:	89 d1                	mov    ecx,edx
c001ec93:	31 d2                	xor    edx,edx
c001ec95:	f7 f6                	div    esi
c001ec97:	83 c1 30             	add    ecx,0x30
c001ec9a:	88 4c 24 1a          	mov    BYTE PTR [esp+0x1a],cl
c001ec9e:	83 c2 30             	add    edx,0x30
c001eca1:	88 54 24 19          	mov    BYTE PTR [esp+0x19],dl
c001eca5:	e8 8b e5 fe ff       	call   c000d235 <KeSetBootMessage(char const*)>
c001ecaa:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001ecb1:	bf f8 0c 00 00       	mov    edi,0xcf8
c001ecb6:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001ecbd:	83 c4 10             	add    esp,0x10
c001ecc0:	89 fa                	mov    edx,edi
c001ecc2:	c1 e1 10             	shl    ecx,0x10
c001ecc5:	c1 e0 0b             	shl    eax,0xb
c001ecc8:	09 c1                	or     ecx,eax
c001ecca:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001ecd1:	c1 e0 08             	shl    eax,0x8
c001ecd4:	09 c1                	or     ecx,eax
c001ecd6:	89 c8                	mov    eax,ecx
c001ecd8:	0d 08 00 00 80       	or     eax,0x80000008
c001ecdd:	ef                   	out    dx,eax
c001ecde:	be fc 0c 00 00       	mov    esi,0xcfc
c001ece3:	89 f2                	mov    edx,esi
c001ece5:	ed                   	in     eax,dx
c001ece6:	c1 e8 10             	shr    eax,0x10
c001ece9:	3d ff ff 00 00       	cmp    eax,0xffff
c001ecee:	0f 84 e1 00 00 00    	je     c001edd5 <IDE::open(int, int, void*)+0x20f>
c001ecf4:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001ecfa:	89 fa                	mov    edx,edi
c001ecfc:	89 c8                	mov    eax,ecx
c001ecfe:	ef                   	out    dx,eax
c001ecff:	b0 fe                	mov    al,0xfe
c001ed01:	89 f2                	mov    edx,esi
c001ed03:	ee                   	out    dx,al
c001ed04:	89 c8                	mov    eax,ecx
c001ed06:	89 fa                	mov    edx,edi
c001ed08:	ef                   	out    dx,eax
c001ed09:	89 f2                	mov    edx,esi
c001ed0b:	ed                   	in     eax,dx
c001ed0c:	3c fe                	cmp    al,0xfe
c001ed0e:	0f 85 83 00 00 00    	jne    c001ed97 <IDE::open(int, int, void*)+0x1d1>
c001ed14:	83 ec 0c             	sub    esp,0xc
c001ed17:	68 13 35 02 c0       	push   0xc0023513
c001ed1c:	e8 14 e5 fe ff       	call   c000d235 <KeSetBootMessage(char const*)>
c001ed21:	c7 04 24 92 62 02 c0 	mov    DWORD PTR [esp],0xc0026292
c001ed28:	e8 39 82 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001ed2d:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001ed37:	c7 04 24 08 38 02 c0 	mov    DWORD PTR [esp],0xc0023808
c001ed3e:	e8 f2 e4 fe ff       	call   c000d235 <KeSetBootMessage(char const*)>
c001ed43:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001ed4a:	89 fa                	mov    edx,edi
c001ed4c:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001ed53:	c1 e1 10             	shl    ecx,0x10
c001ed56:	c1 e0 08             	shl    eax,0x8
c001ed59:	09 c1                	or     ecx,eax
c001ed5b:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001ed62:	c1 e0 0b             	shl    eax,0xb
c001ed65:	09 c1                	or     ecx,eax
c001ed67:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001ed6d:	89 c8                	mov    eax,ecx
c001ed6f:	ef                   	out    dx,eax
c001ed70:	8b ab 50 01 00 00    	mov    ebp,DWORD PTR [ebx+0x150]
c001ed76:	89 f2                	mov    edx,esi
c001ed78:	89 e8                	mov    eax,ebp
c001ed7a:	ee                   	out    dx,al
c001ed7b:	89 c8                	mov    eax,ecx
c001ed7d:	89 fa                	mov    edx,edi
c001ed7f:	ef                   	out    dx,eax
c001ed80:	89 f2                	mov    edx,esi
c001ed82:	ed                   	in     eax,dx
c001ed83:	0f b6 c0             	movzx  eax,al
c001ed86:	83 c4 10             	add    esp,0x10
c001ed89:	39 e8                	cmp    eax,ebp
c001ed8b:	74 58                	je     c001ede5 <IDE::open(int, int, void*)+0x21f>
c001ed8d:	83 ec 0c             	sub    esp,0xc
c001ed90:	68 a7 62 02 c0       	push   0xc00262a7
c001ed95:	eb 46                	jmp    c001eddd <IDE::open(int, int, void*)+0x217>
c001ed97:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001eda0:	75 29                	jne    c001edcb <IDE::open(int, int, void*)+0x205>
c001eda2:	0f b6 83 1f 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11f]
c001eda9:	3d 8a 00 00 00       	cmp    eax,0x8a
c001edae:	74 05                	je     c001edb5 <IDE::open(int, int, void*)+0x1ef>
c001edb0:	83 c0 80             	add    eax,0xffffff80
c001edb3:	75 16                	jne    c001edcb <IDE::open(int, int, void*)+0x205>
c001edb5:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001edbc:	83 ec 0c             	sub    esp,0xc
c001edbf:	68 38 47 02 c0       	push   0xc0024738
c001edc4:	e8 6c e4 fe ff       	call   c000d235 <KeSetBootMessage(char const*)>
c001edc9:	eb 17                	jmp    c001ede2 <IDE::open(int, int, void*)+0x21c>
c001edcb:	83 ec 0c             	sub    esp,0xc
c001edce:	68 af 62 02 c0       	push   0xc00262af
c001edd3:	eb 08                	jmp    c001eddd <IDE::open(int, int, void*)+0x217>
c001edd5:	83 ec 0c             	sub    esp,0xc
c001edd8:	68 e0 62 02 c0       	push   0xc00262e0
c001eddd:	e8 a8 10 ff ff       	call   c000fe8a <KePanic(char const*)>
c001ede2:	83 c4 10             	add    esp,0x10
c001ede5:	f6 83 1f 01 00 00 80 	test   BYTE PTR [ebx+0x11f],0x80
c001edec:	0f 84 bf 00 00 00    	je     c001eeb1 <IDE::open(int, int, void*)+0x2eb>
c001edf2:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001edf8:	83 ec 0c             	sub    esp,0xc
c001edfb:	83 e0 fc             	and    eax,0xfffffffc
c001edfe:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001ee05:	83 c0 08             	add    eax,0x8
c001ee08:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001ee0f:	68 0a 63 02 c0       	push   0xc002630a
c001ee14:	e8 4d 81 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001ee19:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001ee20:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001ee27:	50                   	push   eax
c001ee28:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001ee2f:	50                   	push   eax
c001ee30:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001ee37:	50                   	push   eax
c001ee38:	ff 35 a0 04 03 c0    	push   DWORD PTR ds:0xc00304a0
c001ee3e:	e8 8d f0 ff ff       	call   c001ded0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ee43:	83 c4 18             	add    esp,0x18
c001ee46:	83 c8 07             	or     eax,0x7
c001ee49:	0f b7 c0             	movzx  eax,ax
c001ee4c:	50                   	push   eax
c001ee4d:	6a 04                	push   0x4
c001ee4f:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001ee56:	50                   	push   eax
c001ee57:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001ee5e:	50                   	push   eax
c001ee5f:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001ee66:	50                   	push   eax
c001ee67:	ff 35 a0 04 03 c0    	push   DWORD PTR ds:0xc00304a0
c001ee6d:	e8 9a f2 ff ff       	call   c001e10c <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>
c001ee72:	83 c4 20             	add    esp,0x20
c001ee75:	eb 3a                	jmp    c001eeb1 <IDE::open(int, int, void*)+0x2eb>
c001ee77:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001ee7e:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001ee84:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001ee8b:	05 06 02 00 00       	add    eax,0x206
c001ee90:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001ee97:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001ee9e:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001eea5:	05 06 02 00 00       	add    eax,0x206
c001eeaa:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001eeb1:	83 ec 0c             	sub    esp,0xc
c001eeb4:	68 bc 3d 02 c0       	push   0xc0023dbc
c001eeb9:	e8 77 e3 fe ff       	call   c000d235 <KeSetBootMessage(char const*)>
c001eebe:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001eec4:	83 c4 10             	add    esp,0x10
c001eec7:	89 c2                	mov    edx,eax
c001eec9:	83 e2 0f             	and    edx,0xf
c001eecc:	83 fa 08             	cmp    edx,0x8
c001eecf:	75 0a                	jne    c001eedb <IDE::open(int, int, void*)+0x315>
c001eed1:	83 e8 02             	sub    eax,0x2
c001eed4:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001eedb:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001eee1:	89 c2                	mov    edx,eax
c001eee3:	83 e2 0f             	and    edx,0xf
c001eee6:	83 fa 08             	cmp    edx,0x8
c001eee9:	75 0a                	jne    c001eef5 <IDE::open(int, int, void*)+0x32f>
c001eeeb:	83 e8 02             	sub    eax,0x2
c001eeee:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001eef5:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001eefc:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001ef03:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001ef06:	89 d0                	mov    eax,edx
c001ef08:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001ef0c:	8d 7a 01             	lea    edi,[edx+0x1]
c001ef0f:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001ef13:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001ef17:	83 e1 3f             	and    ecx,0x3f
c001ef1a:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001ef1e:	89 f9                	mov    ecx,edi
c001ef20:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001ef27:	8d 78 02             	lea    edi,[eax+0x2]
c001ef2a:	0f b6 c9             	movzx  ecx,cl
c001ef2d:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001ef30:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001ef34:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001ef38:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001ef3c:	83 e2 3f             	and    edx,0x3f
c001ef3f:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001ef43:	89 f9                	mov    ecx,edi
c001ef45:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001ef4b:	8d 78 03             	lea    edi,[eax+0x3]
c001ef4e:	0f b6 d1             	movzx  edx,cl
c001ef51:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001ef54:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001ef58:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001ef5c:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001ef60:	83 e1 3f             	and    ecx,0x3f
c001ef63:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001ef67:	89 fa                	mov    edx,edi
c001ef69:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001ef6f:	8d 78 04             	lea    edi,[eax+0x4]
c001ef72:	0f b6 ca             	movzx  ecx,dl
c001ef75:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001ef78:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001ef7c:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001ef80:	89 fa                	mov    edx,edi
c001ef82:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001ef88:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001ef8c:	83 e2 3f             	and    edx,0x3f
c001ef8f:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001ef93:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001ef9a:	66 85 f6             	test   si,si
c001ef9d:	74 24                	je     c001efc3 <IDE::open(int, int, void*)+0x3fd>
c001ef9f:	89 f9                	mov    ecx,edi
c001efa1:	83 c0 05             	add    eax,0x5
c001efa4:	0f b6 d1             	movzx  edx,cl
c001efa7:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001efaa:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001efae:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001efb2:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001efb8:	8a 44 93 07          	mov    al,BYTE PTR [ebx+edx*4+0x7]
c001efbc:	83 e0 3f             	and    eax,0x3f
c001efbf:	88 44 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],al
c001efc3:	83 ec 0c             	sub    esp,0xc
c001efc6:	68 22 63 02 c0       	push   0xc0026322
c001efcb:	e8 65 e2 fe ff       	call   c000d235 <KeSetBootMessage(char const*)>
c001efd0:	58                   	pop    eax
c001efd1:	5a                   	pop    edx
c001efd2:	6a 00                	push   0x0
c001efd4:	53                   	push   ebx
c001efd5:	e8 6c f9 ff ff       	call   c001e946 <IDE::prepareInterrupt(unsigned char)>
c001efda:	59                   	pop    ecx
c001efdb:	5e                   	pop    esi
c001efdc:	6a 01                	push   0x1
c001efde:	53                   	push   ebx
c001efdf:	e8 62 f9 ff ff       	call   c001e946 <IDE::prepareInterrupt(unsigned char)>
c001efe4:	c7 04 24 a4 5b 02 c0 	mov    DWORD PTR [esp],0xc0025ba4
c001efeb:	e8 45 e2 fe ff       	call   c000d235 <KeSetBootMessage(char const*)>
c001eff0:	83 c4 0c             	add    esp,0xc
c001eff3:	6a 00                	push   0x0
c001eff5:	6a 00                	push   0x0
c001eff7:	53                   	push   ebx
c001eff8:	e8 7f fb ff ff       	call   c001eb7c <IDE::enableIRQs(unsigned char, bool)>
c001effd:	83 c4 0c             	add    esp,0xc
c001f000:	6a 00                	push   0x0
c001f002:	6a 01                	push   0x1
c001f004:	53                   	push   ebx
c001f005:	e8 72 fb ff ff       	call   c001eb7c <IDE::enableIRQs(unsigned char, bool)>
c001f00a:	c7 04 24 24 63 02 c0 	mov    DWORD PTR [esp],0xc0026324
c001f011:	e8 1f e2 fe ff       	call   c000d235 <KeSetBootMessage(char const*)>
c001f016:	83 c4 10             	add    esp,0x10
c001f019:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001f020:	74 3c                	je     c001f05e <IDE::open(int, int, void*)+0x498>
c001f022:	83 ec 0c             	sub    esp,0xc
c001f025:	53                   	push   ebx
c001f026:	6a 01                	push   0x1
c001f028:	68 43 eb 01 c0       	push   0xc001eb43
c001f02d:	6a 0e                	push   0xe
c001f02f:	53                   	push   ebx
c001f030:	e8 6d a9 fe ff       	call   c00099a2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001f035:	83 c4 14             	add    esp,0x14
c001f038:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001f03e:	53                   	push   ebx
c001f03f:	6a 01                	push   0x1
c001f041:	68 5f eb 01 c0       	push   0xc001eb5f
c001f046:	6a 0f                	push   0xf
c001f048:	53                   	push   ebx
c001f049:	e8 54 a9 fe ff       	call   c00099a2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001f04e:	83 c4 14             	add    esp,0x14
c001f051:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001f057:	68 0e 3a 02 c0       	push   0xc0023a0e
c001f05c:	eb 40                	jmp    c001f09e <IDE::open(int, int, void*)+0x4d8>
c001f05e:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001f068:	83 ec 0c             	sub    esp,0xc
c001f06b:	53                   	push   ebx
c001f06c:	6a 00                	push   0x0
c001f06e:	68 43 eb 01 c0       	push   0xc001eb43
c001f073:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001f079:	53                   	push   ebx
c001f07a:	e8 23 a9 fe ff       	call   c00099a2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001f07f:	83 c4 14             	add    esp,0x14
c001f082:	53                   	push   ebx
c001f083:	6a 00                	push   0x0
c001f085:	68 5f eb 01 c0       	push   0xc001eb5f
c001f08a:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001f090:	53                   	push   ebx
c001f091:	e8 0c a9 fe ff       	call   c00099a2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001f096:	83 c4 14             	add    esp,0x14
c001f099:	68 27 47 02 c0       	push   0xc0024727
c001f09e:	e8 92 e1 fe ff       	call   c000d235 <KeSetBootMessage(char const*)>
c001f0a3:	83 c4 10             	add    esp,0x10
c001f0a6:	83 ec 0c             	sub    esp,0xc
c001f0a9:	68 26 63 02 c0       	push   0xc0026326
c001f0ae:	e8 82 e1 fe ff       	call   c000d235 <KeSetBootMessage(char const*)>
c001f0b3:	8b 03                	mov    eax,DWORD PTR [ebx]
c001f0b5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f0b8:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001f0bb:	c7 04 24 41 4e 02 c0 	mov    DWORD PTR [esp],0xc0024e41
c001f0c2:	e8 6e e1 fe ff       	call   c000d235 <KeSetBootMessage(char const*)>
c001f0c7:	83 c4 0c             	add    esp,0xc
c001f0ca:	6a 07                	push   0x7
c001f0cc:	6a 00                	push   0x0
c001f0ce:	53                   	push   ebx
c001f0cf:	e8 58 f9 ff ff       	call   c001ea2c <IDE::read(unsigned char, unsigned char)>
c001f0d4:	83 c4 0c             	add    esp,0xc
c001f0d7:	6a 07                	push   0x7
c001f0d9:	6a 01                	push   0x1
c001f0db:	53                   	push   ebx
c001f0dc:	e8 4b f9 ff ff       	call   c001ea2c <IDE::read(unsigned char, unsigned char)>
c001f0e1:	c7 04 24 e8 44 02 c0 	mov    DWORD PTR [esp],0xc00244e8
c001f0e8:	e8 48 e1 fe ff       	call   c000d235 <KeSetBootMessage(char const*)>
c001f0ed:	83 c4 0c             	add    esp,0xc
c001f0f0:	6a 01                	push   0x1
c001f0f2:	6a 00                	push   0x0
c001f0f4:	53                   	push   ebx
c001f0f5:	e8 82 fa ff ff       	call   c001eb7c <IDE::enableIRQs(unsigned char, bool)>
c001f0fa:	83 c4 0c             	add    esp,0xc
c001f0fd:	6a 01                	push   0x1
c001f0ff:	6a 01                	push   0x1
c001f101:	53                   	push   ebx
c001f102:	e8 75 fa ff ff       	call   c001eb7c <IDE::enableIRQs(unsigned char, bool)>
c001f107:	c7 04 24 29 63 02 c0 	mov    DWORD PTR [esp],0xc0026329
c001f10e:	e8 22 e1 fe ff       	call   c000d235 <KeSetBootMessage(char const*)>
c001f113:	83 c4 2c             	add    esp,0x2c
c001f116:	31 c0                	xor    eax,eax
c001f118:	5b                   	pop    ebx
c001f119:	5e                   	pop    esi
c001f11a:	5f                   	pop    edi
c001f11b:	5d                   	pop    ebp
c001f11c:	c3                   	ret    
c001f11d:	90                   	nop

c001f11e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001f11e:	55                   	push   ebp
c001f11f:	57                   	push   edi
c001f120:	56                   	push   esi
c001f121:	53                   	push   ebx
c001f122:	83 ec 1c             	sub    esp,0x1c
c001f125:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001f129:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001f12d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f131:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001f135:	8d 42 f8             	lea    eax,[edx-0x8]
c001f138:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001f13c:	3c 03                	cmp    al,0x3
c001f13e:	77 5a                	ja     c001f19a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x7c>
c001f140:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001f144:	0f b6 db             	movzx  ebx,bl
c001f147:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001f14b:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001f14e:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001f153:	0c 80                	or     al,0x80
c001f155:	50                   	push   eax
c001f156:	6a 0c                	push   0xc
c001f158:	53                   	push   ebx
c001f159:	56                   	push   esi
c001f15a:	e8 0d f8 ff ff       	call   c001e96c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f15f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001f163:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001f168:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001f16c:	0f b6 d2             	movzx  edx,dl
c001f16f:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001f173:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001f175:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001f17a:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001f17e:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001f182:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001f18a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001f18e:	83 c4 2c             	add    esp,0x2c
c001f191:	5b                   	pop    ebx
c001f192:	5e                   	pop    esi
c001f193:	5f                   	pop    edi
c001f194:	5d                   	pop    ebp
c001f195:	e9 d2 f7 ff ff       	jmp    c001e96c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f19a:	0f b6 c2             	movzx  eax,dl
c001f19d:	83 f8 07             	cmp    eax,0x7
c001f1a0:	77 12                	ja     c001f1b4 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x96>
c001f1a2:	0f b6 db             	movzx  ebx,bl
c001f1a5:	0f b6 c2             	movzx  eax,dl
c001f1a8:	66 8b 94 de 5a 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15a]
c001f1b0:	01 c2                	add    edx,eax
c001f1b2:	eb 2f                	jmp    c001f1e3 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001f1b4:	83 f8 0d             	cmp    eax,0xd
c001f1b7:	77 13                	ja     c001f1cc <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xae>
c001f1b9:	0f b6 db             	movzx  ebx,bl
c001f1bc:	0f b6 d2             	movzx  edx,dl
c001f1bf:	8b 84 de 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*8+0x15c]
c001f1c6:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001f1ca:	eb 17                	jmp    c001f1e3 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001f1cc:	83 f8 15             	cmp    eax,0x15
c001f1cf:	77 14                	ja     c001f1e5 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc7>
c001f1d1:	0f b6 db             	movzx  ebx,bl
c001f1d4:	0f b6 d2             	movzx  edx,dl
c001f1d7:	66 8b 84 de 5e 01 00 00 	mov    ax,WORD PTR [esi+ebx*8+0x15e]
c001f1df:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001f1e3:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001f1e5:	83 c4 1c             	add    esp,0x1c
c001f1e8:	5b                   	pop    ebx
c001f1e9:	5e                   	pop    esi
c001f1ea:	5f                   	pop    edi
c001f1eb:	5d                   	pop    ebp
c001f1ec:	c3                   	ret    
c001f1ed:	90                   	nop

c001f1ee <IDE::detect()>:
c001f1ee:	55                   	push   ebp
c001f1ef:	57                   	push   edi
c001f1f0:	56                   	push   esi
c001f1f1:	53                   	push   ebx
c001f1f2:	81 ec 28 02 00 00    	sub    esp,0x228
c001f1f8:	8b 9c 24 3c 02 00 00 	mov    ebx,DWORD PTR [esp+0x23c]
c001f1ff:	68 2b 63 02 c0       	push   0xc002632b
c001f204:	e8 2c e0 fe ff       	call   c000d235 <KeSetBootMessage(char const*)>
c001f209:	8a 83 58 01 00 00    	mov    al,BYTE PTR [ebx+0x158]
c001f20f:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c001f213:	83 c4 10             	add    esp,0x10
c001f216:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c001f21b:	0f 85 26 04 00 00    	jne    c001f647 <IDE::detect()+0x459>
c001f221:	83 ec 0c             	sub    esp,0xc
c001f224:	31 f6                	xor    esi,esi
c001f226:	68 2e 63 02 c0       	push   0xc002632e
c001f22b:	31 ff                	xor    edi,edi
c001f22d:	e8 03 e0 fe ff       	call   c000d235 <KeSetBootMessage(char const*)>
c001f232:	83 c4 10             	add    esp,0x10
c001f235:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001f23c:	83 ec 0c             	sub    esp,0xc
c001f23f:	68 31 63 02 c0       	push   0xc0026331
c001f244:	e8 ec df fe ff       	call   c000d235 <KeSetBootMessage(char const*)>
c001f249:	83 c4 10             	add    esp,0x10
c001f24c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f253:	83 ec 0c             	sub    esp,0xc
c001f256:	31 ed                	xor    ebp,ebp
c001f258:	68 34 63 02 c0       	push   0xc0026334
c001f25d:	e8 d3 df fe ff       	call   c000d235 <KeSetBootMessage(char const*)>
c001f262:	89 f8                	mov    eax,edi
c001f264:	c1 e0 06             	shl    eax,0x6
c001f267:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001f26f:	c7 04 24 37 63 02 c0 	mov    DWORD PTR [esp],0xc0026337
c001f276:	e8 ba df fe ff       	call   c000d235 <KeSetBootMessage(char const*)>
c001f27b:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001f27f:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001f283:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f287:	c1 e0 04             	shl    eax,0x4
c001f28a:	83 c8 a0             	or     eax,0xffffffa0
c001f28d:	0f b6 c0             	movzx  eax,al
c001f290:	50                   	push   eax
c001f291:	6a 06                	push   0x6
c001f293:	56                   	push   esi
c001f294:	53                   	push   ebx
c001f295:	e8 d2 f6 ff ff       	call   c001e96c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f29a:	83 c4 1c             	add    esp,0x1c
c001f29d:	6a 0c                	push   0xc
c001f29f:	56                   	push   esi
c001f2a0:	53                   	push   ebx
c001f2a1:	e8 86 f7 ff ff       	call   c001ea2c <IDE::read(unsigned char, unsigned char)>
c001f2a6:	83 c4 0c             	add    esp,0xc
c001f2a9:	6a 0c                	push   0xc
c001f2ab:	56                   	push   esi
c001f2ac:	53                   	push   ebx
c001f2ad:	e8 7a f7 ff ff       	call   c001ea2c <IDE::read(unsigned char, unsigned char)>
c001f2b2:	83 c4 0c             	add    esp,0xc
c001f2b5:	6a 0c                	push   0xc
c001f2b7:	56                   	push   esi
c001f2b8:	53                   	push   ebx
c001f2b9:	e8 6e f7 ff ff       	call   c001ea2c <IDE::read(unsigned char, unsigned char)>
c001f2be:	83 c4 0c             	add    esp,0xc
c001f2c1:	6a 0c                	push   0xc
c001f2c3:	56                   	push   esi
c001f2c4:	53                   	push   ebx
c001f2c5:	e8 62 f7 ff ff       	call   c001ea2c <IDE::read(unsigned char, unsigned char)>
c001f2ca:	c7 04 24 3a 63 02 c0 	mov    DWORD PTR [esp],0xc002633a
c001f2d1:	e8 5f df fe ff       	call   c000d235 <KeSetBootMessage(char const*)>
c001f2d6:	68 ec 00 00 00       	push   0xec
c001f2db:	6a 07                	push   0x7
c001f2dd:	56                   	push   esi
c001f2de:	53                   	push   ebx
c001f2df:	e8 88 f6 ff ff       	call   c001e96c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f2e4:	83 c4 1c             	add    esp,0x1c
c001f2e7:	6a 0c                	push   0xc
c001f2e9:	56                   	push   esi
c001f2ea:	53                   	push   ebx
c001f2eb:	e8 3c f7 ff ff       	call   c001ea2c <IDE::read(unsigned char, unsigned char)>
c001f2f0:	83 c4 0c             	add    esp,0xc
c001f2f3:	6a 0c                	push   0xc
c001f2f5:	56                   	push   esi
c001f2f6:	53                   	push   ebx
c001f2f7:	e8 30 f7 ff ff       	call   c001ea2c <IDE::read(unsigned char, unsigned char)>
c001f2fc:	83 c4 0c             	add    esp,0xc
c001f2ff:	6a 0c                	push   0xc
c001f301:	56                   	push   esi
c001f302:	53                   	push   ebx
c001f303:	e8 24 f7 ff ff       	call   c001ea2c <IDE::read(unsigned char, unsigned char)>
c001f308:	83 c4 0c             	add    esp,0xc
c001f30b:	6a 0c                	push   0xc
c001f30d:	56                   	push   esi
c001f30e:	53                   	push   ebx
c001f30f:	e8 18 f7 ff ff       	call   c001ea2c <IDE::read(unsigned char, unsigned char)>
c001f314:	c7 04 24 3d 63 02 c0 	mov    DWORD PTR [esp],0xc002633d
c001f31b:	e8 15 df fe ff       	call   c000d235 <KeSetBootMessage(char const*)>
c001f320:	83 c4 0c             	add    esp,0xc
c001f323:	6a 0c                	push   0xc
c001f325:	56                   	push   esi
c001f326:	53                   	push   ebx
c001f327:	e8 00 f7 ff ff       	call   c001ea2c <IDE::read(unsigned char, unsigned char)>
c001f32c:	83 c4 10             	add    esp,0x10
c001f32f:	84 c0                	test   al,al
c001f331:	75 1f                	jne    c001f352 <IDE::detect()+0x164>
c001f333:	83 ec 0c             	sub    esp,0xc
c001f336:	68 40 63 02 c0       	push   0xc0026340
c001f33b:	e8 f5 de fe ff       	call   c000d235 <KeSetBootMessage(char const*)>
c001f340:	e9 e0 02 00 00       	jmp    c001f625 <IDE::detect()+0x437>
c001f345:	a8 80                	test   al,0x80
c001f347:	74 21                	je     c001f36a <IDE::detect()+0x17c>
c001f349:	45                   	inc    ebp
c001f34a:	81 fd 17 01 00 00    	cmp    ebp,0x117
c001f350:	7f 1e                	jg     c001f370 <IDE::detect()+0x182>
c001f352:	50                   	push   eax
c001f353:	6a 0c                	push   0xc
c001f355:	56                   	push   esi
c001f356:	53                   	push   ebx
c001f357:	e8 d0 f6 ff ff       	call   c001ea2c <IDE::read(unsigned char, unsigned char)>
c001f35c:	83 c4 10             	add    esp,0x10
c001f35f:	a8 01                	test   al,0x1
c001f361:	74 e2                	je     c001f345 <IDE::detect()+0x157>
c001f363:	c6 44 24 06 01       	mov    BYTE PTR [esp+0x6],0x1
c001f368:	eb 23                	jmp    c001f38d <IDE::detect()+0x19f>
c001f36a:	a8 08                	test   al,0x8
c001f36c:	74 db                	je     c001f349 <IDE::detect()+0x15b>
c001f36e:	eb 18                	jmp    c001f388 <IDE::detect()+0x19a>
c001f370:	50                   	push   eax
c001f371:	50                   	push   eax
c001f372:	6a 00                	push   0x0
c001f374:	6a 32                	push   0x32
c001f376:	e8 45 7f ff ff       	call   c00172c0 <milliTenthSleep(unsigned long long)>
c001f37b:	83 c4 10             	add    esp,0x10
c001f37e:	81 fd 2c 01 00 00    	cmp    ebp,0x12c
c001f384:	75 cc                	jne    c001f352 <IDE::detect()+0x164>
c001f386:	eb db                	jmp    c001f363 <IDE::detect()+0x175>
c001f388:	c6 44 24 06 00       	mov    BYTE PTR [esp+0x6],0x0
c001f38d:	83 ec 0c             	sub    esp,0xc
c001f390:	68 43 63 02 c0       	push   0xc0026343
c001f395:	e8 9b de fe ff       	call   c000d235 <KeSetBootMessage(char const*)>
c001f39a:	83 c4 10             	add    esp,0x10
c001f39d:	f6 44 24 06 01       	test   BYTE PTR [esp+0x6],0x1
c001f3a2:	74 56                	je     c001f3fa <IDE::detect()+0x20c>
c001f3a4:	51                   	push   ecx
c001f3a5:	6a 04                	push   0x4
c001f3a7:	56                   	push   esi
c001f3a8:	53                   	push   ebx
c001f3a9:	e8 7e f6 ff ff       	call   c001ea2c <IDE::read(unsigned char, unsigned char)>
c001f3ae:	83 c4 0c             	add    esp,0xc
c001f3b1:	6a 05                	push   0x5
c001f3b3:	56                   	push   esi
c001f3b4:	53                   	push   ebx
c001f3b5:	89 c5                	mov    ebp,eax
c001f3b7:	e8 70 f6 ff ff       	call   c001ea2c <IDE::read(unsigned char, unsigned char)>
c001f3bc:	89 e9                	mov    ecx,ebp
c001f3be:	83 c4 10             	add    esp,0x10
c001f3c1:	0f b6 e9             	movzx  ebp,cl
c001f3c4:	83 fd 14             	cmp    ebp,0x14
c001f3c7:	75 04                	jne    c001f3cd <IDE::detect()+0x1df>
c001f3c9:	3c eb                	cmp    al,0xeb
c001f3cb:	74 11                	je     c001f3de <IDE::detect()+0x1f0>
c001f3cd:	83 fd 69             	cmp    ebp,0x69
c001f3d0:	0f 85 52 02 00 00    	jne    c001f628 <IDE::detect()+0x43a>
c001f3d6:	3c 96                	cmp    al,0x96
c001f3d8:	0f 85 4a 02 00 00    	jne    c001f628 <IDE::detect()+0x43a>
c001f3de:	68 a1 00 00 00       	push   0xa1
c001f3e3:	6a 07                	push   0x7
c001f3e5:	56                   	push   esi
c001f3e6:	53                   	push   ebx
c001f3e7:	e8 80 f5 ff ff       	call   c001e96c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f3ec:	58                   	pop    eax
c001f3ed:	5a                   	pop    edx
c001f3ee:	6a 00                	push   0x0
c001f3f0:	6a 0a                	push   0xa
c001f3f2:	e8 c9 7e ff ff       	call   c00172c0 <milliTenthSleep(unsigned long long)>
c001f3f7:	83 c4 10             	add    esp,0x10
c001f3fa:	83 ec 0c             	sub    esp,0xc
c001f3fd:	89 fd                	mov    ebp,edi
c001f3ff:	68 46 63 02 c0       	push   0xc0026346
c001f404:	e8 2c de fe ff       	call   c000d235 <KeSetBootMessage(char const*)>
c001f409:	8d 54 24 20          	lea    edx,[esp+0x20]
c001f40d:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c001f414:	c1 e5 06             	shl    ebp,0x6
c001f417:	52                   	push   edx
c001f418:	01 dd                	add    ebp,ebx
c001f41a:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001f41e:	6a 00                	push   0x0
c001f420:	56                   	push   esi
c001f421:	53                   	push   ebx
c001f422:	e8 f7 fc ff ff       	call   c001f11e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001f427:	83 c4 14             	add    esp,0x14
c001f42a:	68 4a 63 02 c0       	push   0xc002634a
c001f42f:	e8 01 de fe ff       	call   c000d235 <KeSetBootMessage(char const*)>
c001f434:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c001f439:	c6 85 6c 01 00 00 01 	mov    BYTE PTR [ebp+0x16c],0x1
c001f440:	66 89 85 70 01 00 00 	mov    WORD PTR [ebp+0x170],ax
c001f447:	89 f0                	mov    eax,esi
c001f449:	88 85 6d 01 00 00    	mov    BYTE PTR [ebp+0x16d],al
c001f44f:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001f453:	88 85 6e 01 00 00    	mov    BYTE PTR [ebp+0x16e],al
c001f459:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f45d:	66 89 85 72 01 00 00 	mov    WORD PTR [ebp+0x172],ax
c001f464:	66 8b 84 24 82 00 00 00 	mov    ax,WORD PTR [esp+0x82]
c001f46c:	66 89 85 74 01 00 00 	mov    WORD PTR [ebp+0x174],ax
c001f473:	0f b6 84 24 c4 00 00 00 	movzx  eax,BYTE PTR [esp+0xc4]
c001f47b:	89 85 78 01 00 00    	mov    DWORD PTR [ebp+0x178],eax
c001f481:	c7 04 24 4e 63 02 c0 	mov    DWORD PTR [esp],0xc002634e
c001f488:	e8 a8 dd fe ff       	call   c000d235 <KeSetBootMessage(char const*)>
c001f48d:	83 c4 10             	add    esp,0x10
c001f490:	f6 85 7b 01 00 00 04 	test   BYTE PTR [ebp+0x17b],0x4
c001f497:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f49b:	74 09                	je     c001f4a6 <IDE::detect()+0x2b8>
c001f49d:	8b 8c 24 d8 00 00 00 	mov    ecx,DWORD PTR [esp+0xd8]
c001f4a4:	eb 07                	jmp    c001f4ad <IDE::detect()+0x2bf>
c001f4a6:	8b 8c 24 88 00 00 00 	mov    ecx,DWORD PTR [esp+0x88]
c001f4ad:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001f4b1:	89 f8                	mov    eax,edi
c001f4b3:	83 ec 0c             	sub    esp,0xc
c001f4b6:	c1 e0 06             	shl    eax,0x6
c001f4b9:	8d 2c 03             	lea    ebp,[ebx+eax*1]
c001f4bc:	89 8d 7c 01 00 00    	mov    DWORD PTR [ebp+0x17c],ecx
c001f4c2:	68 52 63 02 c0       	push   0xc0026352
c001f4c7:	e8 69 dd fe ff       	call   c000d235 <KeSetBootMessage(char const*)>
c001f4cc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001f4d0:	89 e8                	mov    eax,ebp
c001f4d2:	83 c4 10             	add    esp,0x10
c001f4d5:	8d 6a 28             	lea    ebp,[edx+0x28]
c001f4d8:	8a 4a 37             	mov    cl,BYTE PTR [edx+0x37]
c001f4db:	83 c2 02             	add    edx,0x2
c001f4de:	83 c0 02             	add    eax,0x2
c001f4e1:	88 88 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],cl
c001f4e7:	8a 4a 34             	mov    cl,BYTE PTR [edx+0x34]
c001f4ea:	88 88 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],cl
c001f4f0:	39 d5                	cmp    ebp,edx
c001f4f2:	75 e4                	jne    c001f4d8 <IDE::detect()+0x2ea>
c001f4f4:	89 f8                	mov    eax,edi
c001f4f6:	c1 e0 06             	shl    eax,0x6
c001f4f9:	01 d8                	add    eax,ebx
c001f4fb:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001f502:	0f b7 90 74 01 00 00 	movzx  edx,WORD PTR [eax+0x174]
c001f509:	c1 ea 09             	shr    edx,0x9
c001f50c:	83 e2 01             	and    edx,0x1
c001f50f:	f6 80 75 01 00 00 01 	test   BYTE PTR [eax+0x175],0x1
c001f516:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001f51c:	8a 54 24 07          	mov    dl,BYTE PTR [esp+0x7]
c001f520:	74 0c                	je     c001f52e <IDE::detect()+0x340>
c001f522:	66 83 bc f3 5e 01 00 00 00 	cmp    WORD PTR [ebx+esi*8+0x15e],0x0
c001f52b:	0f 95 c2             	setne  dl
c001f52e:	89 fd                	mov    ebp,edi
c001f530:	83 ec 0c             	sub    esp,0xc
c001f533:	c1 e5 06             	shl    ebp,0x6
c001f536:	01 dd                	add    ebp,ebx
c001f538:	88 95 ab 01 00 00    	mov    BYTE PTR [ebp+0x1ab],dl
c001f53e:	68 56 63 02 c0       	push   0xc0026356
c001f543:	e8 ed dc fe ff       	call   c000d235 <KeSetBootMessage(char const*)>
c001f548:	83 c4 10             	add    esp,0x10
c001f54b:	f6 44 24 06 01       	test   BYTE PTR [esp+0x6],0x1
c001f550:	75 66                	jne    c001f5b8 <IDE::detect()+0x3ca>
c001f552:	83 bd 7c 01 00 00 00 	cmp    DWORD PTR [ebp+0x17c],0x0
c001f559:	0f 84 b8 00 00 00    	je     c001f617 <IDE::detect()+0x429>
c001f55f:	83 ec 0c             	sub    esp,0xc
c001f562:	68 5a 63 02 c0       	push   0xc002635a
c001f567:	e8 c9 dc fe ff       	call   c000d235 <KeSetBootMessage(char const*)>
c001f56c:	c7 04 24 8c 01 00 00 	mov    DWORD PTR [esp],0x18c
c001f573:	e8 04 06 ff ff       	call   c000fb7c <malloc>
c001f578:	89 04 24             	mov    DWORD PTR [esp],eax
c001f57b:	89 c5                	mov    ebp,eax
c001f57d:	e8 44 05 00 00       	call   c001fac6 <ATA::ATA()>
c001f582:	c7 04 24 5e 63 02 c0 	mov    DWORD PTR [esp],0xc002635e
c001f589:	e8 a7 dc fe ff       	call   c000d235 <KeSetBootMessage(char const*)>
c001f58e:	59                   	pop    ecx
c001f58f:	58                   	pop    eax
c001f590:	55                   	push   ebp
c001f591:	53                   	push   ebx
c001f592:	e8 5f a4 fe ff       	call   c00099f6 <Device::addChild(Device*)>
c001f597:	c7 04 24 63 63 02 c0 	mov    DWORD PTR [esp],0xc0026363
c001f59e:	e8 92 dc fe ff       	call   c000d235 <KeSetBootMessage(char const*)>
c001f5a3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001f5a6:	53                   	push   ebx
c001f5a7:	57                   	push   edi
c001f5a8:	6a 00                	push   0x0
c001f5aa:	55                   	push   ebp
c001f5ab:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001f5ae:	83 c4 14             	add    esp,0x14
c001f5b1:	68 68 63 02 c0       	push   0xc0026368
c001f5b6:	eb 57                	jmp    c001f60f <IDE::detect()+0x421>
c001f5b8:	83 ec 0c             	sub    esp,0xc
c001f5bb:	68 6d 63 02 c0       	push   0xc002636d
c001f5c0:	e8 70 dc fe ff       	call   c000d235 <KeSetBootMessage(char const*)>
c001f5c5:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001f5cc:	e8 ab 05 ff ff       	call   c000fb7c <malloc>
c001f5d1:	89 04 24             	mov    DWORD PTR [esp],eax
c001f5d4:	89 c5                	mov    ebp,eax
c001f5d6:	e8 b1 0c 00 00       	call   c002028c <ATAPI::ATAPI()>
c001f5db:	c7 04 24 73 63 02 c0 	mov    DWORD PTR [esp],0xc0026373
c001f5e2:	e8 4e dc fe ff       	call   c000d235 <KeSetBootMessage(char const*)>
c001f5e7:	58                   	pop    eax
c001f5e8:	5a                   	pop    edx
c001f5e9:	55                   	push   ebp
c001f5ea:	53                   	push   ebx
c001f5eb:	e8 06 a4 fe ff       	call   c00099f6 <Device::addChild(Device*)>
c001f5f0:	c7 04 24 7a 63 02 c0 	mov    DWORD PTR [esp],0xc002637a
c001f5f7:	e8 39 dc fe ff       	call   c000d235 <KeSetBootMessage(char const*)>
c001f5fc:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001f5ff:	53                   	push   ebx
c001f600:	57                   	push   edi
c001f601:	6a 00                	push   0x0
c001f603:	55                   	push   ebp
c001f604:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001f607:	83 c4 14             	add    esp,0x14
c001f60a:	68 81 63 02 c0       	push   0xc0026381
c001f60f:	e8 21 dc fe ff       	call   c000d235 <KeSetBootMessage(char const*)>
c001f614:	83 c4 10             	add    esp,0x10
c001f617:	83 ec 0c             	sub    esp,0xc
c001f61a:	47                   	inc    edi
c001f61b:	68 88 63 02 c0       	push   0xc0026388
c001f620:	e8 10 dc fe ff       	call   c000d235 <KeSetBootMessage(char const*)>
c001f625:	83 c4 10             	add    esp,0x10
c001f628:	83 3c 24 01          	cmp    DWORD PTR [esp],0x1
c001f62c:	74 0c                	je     c001f63a <IDE::detect()+0x44c>
c001f62e:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c001f635:	e9 19 fc ff ff       	jmp    c001f253 <IDE::detect()+0x65>
c001f63a:	4e                   	dec    esi
c001f63b:	74 0a                	je     c001f647 <IDE::detect()+0x459>
c001f63d:	be 01 00 00 00       	mov    esi,0x1
c001f642:	e9 f5 fb ff ff       	jmp    c001f23c <IDE::detect()+0x4e>
c001f647:	81 c4 1c 02 00 00    	add    esp,0x21c
c001f64d:	5b                   	pop    ebx
c001f64e:	5e                   	pop    esi
c001f64f:	5f                   	pop    edi
c001f650:	5d                   	pop    ebp
c001f651:	c3                   	ret    

c001f652 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001f652:	55                   	push   ebp
c001f653:	57                   	push   edi
c001f654:	56                   	push   esi
c001f655:	53                   	push   ebx
c001f656:	83 ec 1c             	sub    esp,0x1c
c001f659:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001f65d:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001f661:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001f665:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f669:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001f66d:	88 c3                	mov    bl,al
c001f66f:	25 ff 00 00 00       	and    eax,0xff
c001f674:	0f 84 88 00 00 00    	je     c001f702 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001f67a:	83 ec 0c             	sub    esp,0xc
c001f67d:	89 c7                	mov    edi,eax
c001f67f:	68 8c 63 02 c0       	push   0xc002638c
c001f684:	e8 dd 78 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001f689:	83 c4 10             	add    esp,0x10
c001f68c:	83 ff 01             	cmp    edi,0x1
c001f68f:	74 6b                	je     c001f6fc <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaa>
c001f691:	83 ff 02             	cmp    edi,0x2
c001f694:	75 58                	jne    c001f6ee <IDE::printError(unsigned char, unsigned char, unsigned char)+0x9c>
c001f696:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c001f69b:	50                   	push   eax
c001f69c:	6a 01                	push   0x1
c001f69e:	01 ff                	add    edi,edi
c001f6a0:	09 fe                	or     esi,edi
c001f6a2:	89 f0                	mov    eax,esi
c001f6a4:	0f b6 f0             	movzx  esi,al
c001f6a7:	c1 e6 06             	shl    esi,0x6
c001f6aa:	0f b6 84 35 6d 01 00 00 	movzx  eax,BYTE PTR [ebp+esi*1+0x16d]
c001f6b2:	50                   	push   eax
c001f6b3:	55                   	push   ebp
c001f6b4:	e8 73 f3 ff ff       	call   c001ea2c <IDE::read(unsigned char, unsigned char)>
c001f6b9:	83 c4 10             	add    esp,0x10
c001f6bc:	a8 01                	test   al,0x1
c001f6be:	74 02                	je     c001f6c2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x70>
c001f6c0:	b3 07                	mov    bl,0x7
c001f6c2:	a8 02                	test   al,0x2
c001f6c4:	74 02                	je     c001f6c8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x76>
c001f6c6:	b3 03                	mov    bl,0x3
c001f6c8:	a8 04                	test   al,0x4
c001f6ca:	74 02                	je     c001f6ce <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7c>
c001f6cc:	b3 14                	mov    bl,0x14
c001f6ce:	a8 08                	test   al,0x8
c001f6d0:	74 02                	je     c001f6d4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x82>
c001f6d2:	b3 03                	mov    bl,0x3
c001f6d4:	a8 10                	test   al,0x10
c001f6d6:	74 02                	je     c001f6da <IDE::printError(unsigned char, unsigned char, unsigned char)+0x88>
c001f6d8:	b3 15                	mov    bl,0x15
c001f6da:	a8 20                	test   al,0x20
c001f6dc:	74 02                	je     c001f6e0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8e>
c001f6de:	b3 03                	mov    bl,0x3
c001f6e0:	a8 40                	test   al,0x40
c001f6e2:	74 02                	je     c001f6e6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001f6e4:	b3 16                	mov    bl,0x16
c001f6e6:	a8 80                	test   al,0x80
c001f6e8:	74 18                	je     c001f702 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001f6ea:	b3 0d                	mov    bl,0xd
c001f6ec:	eb 14                	jmp    c001f702 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001f6ee:	83 ff 03             	cmp    edi,0x3
c001f6f1:	74 0d                	je     c001f700 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xae>
c001f6f3:	83 ff 04             	cmp    edi,0x4
c001f6f6:	75 0a                	jne    c001f702 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001f6f8:	b3 08                	mov    bl,0x8
c001f6fa:	eb 06                	jmp    c001f702 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001f6fc:	b3 13                	mov    bl,0x13
c001f6fe:	eb 02                	jmp    c001f702 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001f700:	b3 17                	mov    bl,0x17
c001f702:	83 c4 1c             	add    esp,0x1c
c001f705:	88 d8                	mov    al,bl
c001f707:	5b                   	pop    ebx
c001f708:	5e                   	pop    esi
c001f709:	5f                   	pop    edi
c001f70a:	5d                   	pop    ebp
c001f70b:	c3                   	ret    

c001f70c <IDE::polling(unsigned char, unsigned int)>:
c001f70c:	57                   	push   edi
c001f70d:	56                   	push   esi
c001f70e:	53                   	push   ebx
c001f70f:	bb 04 00 00 00       	mov    ebx,0x4
c001f714:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001f718:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001f71d:	52                   	push   edx
c001f71e:	6a 0c                	push   0xc
c001f720:	56                   	push   esi
c001f721:	57                   	push   edi
c001f722:	e8 05 f3 ff ff       	call   c001ea2c <IDE::read(unsigned char, unsigned char)>
c001f727:	83 c4 10             	add    esp,0x10
c001f72a:	4b                   	dec    ebx
c001f72b:	75 f0                	jne    c001f71d <IDE::polling(unsigned char, unsigned int)+0x11>
c001f72d:	bb a0 86 01 00       	mov    ebx,0x186a0
c001f732:	50                   	push   eax
c001f733:	6a 0c                	push   0xc
c001f735:	56                   	push   esi
c001f736:	57                   	push   edi
c001f737:	e8 f0 f2 ff ff       	call   c001ea2c <IDE::read(unsigned char, unsigned char)>
c001f73c:	83 c4 10             	add    esp,0x10
c001f73f:	a8 01                	test   al,0x1
c001f741:	75 17                	jne    c001f75a <IDE::polling(unsigned char, unsigned int)+0x4e>
c001f743:	a8 20                	test   al,0x20
c001f745:	75 0f                	jne    c001f756 <IDE::polling(unsigned char, unsigned int)+0x4a>
c001f747:	4b                   	dec    ebx
c001f748:	74 10                	je     c001f75a <IDE::polling(unsigned char, unsigned int)+0x4e>
c001f74a:	a8 80                	test   al,0x80
c001f74c:	75 e4                	jne    c001f732 <IDE::polling(unsigned char, unsigned int)+0x26>
c001f74e:	a8 08                	test   al,0x8
c001f750:	74 e0                	je     c001f732 <IDE::polling(unsigned char, unsigned int)+0x26>
c001f752:	31 c0                	xor    eax,eax
c001f754:	eb 06                	jmp    c001f75c <IDE::polling(unsigned char, unsigned int)+0x50>
c001f756:	b0 01                	mov    al,0x1
c001f758:	eb 02                	jmp    c001f75c <IDE::polling(unsigned char, unsigned int)+0x50>
c001f75a:	b0 02                	mov    al,0x2
c001f75c:	5b                   	pop    ebx
c001f75d:	5e                   	pop    esi
c001f75e:	5f                   	pop    edi
c001f75f:	c3                   	ret    

c001f760 <SATABus::close(int, int, void*)>:
c001f760:	31 c0                	xor    eax,eax
c001f762:	c3                   	ret    
c001f763:	90                   	nop

c001f764 <SATABus::detect()>:
c001f764:	c3                   	ret    
c001f765:	90                   	nop

c001f766 <SATABus::SATABus()>:
c001f766:	83 ec 0c             	sub    esp,0xc
c001f769:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f76d:	83 ec 08             	sub    esp,0x8
c001f770:	68 c4 63 02 c0       	push   0xc00263c4
c001f775:	50                   	push   eax
c001f776:	e8 d5 a5 fe ff       	call   c0009d50 <HardDiskController::HardDiskController(char const*)>
c001f77b:	83 c4 10             	add    esp,0x10
c001f77e:	ba f0 63 02 c0       	mov    edx,0xc00263f0
c001f783:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f787:	89 10                	mov    DWORD PTR [eax],edx
c001f789:	83 ec 0c             	sub    esp,0xc
c001f78c:	6a 50                	push   0x50
c001f78e:	e8 cf 09 ff ff       	call   c0010162 <Phys::allocateContiguousPages(int)>
c001f793:	83 c4 10             	add    esp,0x10
c001f796:	89 c2                	mov    edx,eax
c001f798:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f79c:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001f7a2:	83 ec 0c             	sub    esp,0xc
c001f7a5:	6a 50                	push   0x50
c001f7a7:	e8 95 3b ff ff       	call   c0013341 <Virt::allocateKernelVirtualPages(int)>
c001f7ac:	83 c4 10             	add    esp,0x10
c001f7af:	89 c2                	mov    edx,eax
c001f7b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7b5:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001f7bb:	a1 70 f2 02 c0       	mov    eax,ds:0xc002f270
c001f7c0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f7c4:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001f7ca:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f7ce:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001f7d4:	83 ec 0c             	sub    esp,0xc
c001f7d7:	6a 03                	push   0x3
c001f7d9:	6a 50                	push   0x50
c001f7db:	51                   	push   ecx
c001f7dc:	52                   	push   edx
c001f7dd:	50                   	push   eax
c001f7de:	e8 31 44 ff ff       	call   c0013c14 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001f7e3:	83 c4 20             	add    esp,0x20
c001f7e6:	90                   	nop
c001f7e7:	83 c4 0c             	add    esp,0xc
c001f7ea:	c3                   	ret    
c001f7eb:	90                   	nop

c001f7ec <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001f7ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f7f0:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001f7f3:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001f7f6:	09 c2                	or     edx,eax
c001f7f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f7fc:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001f802:	8b 08                	mov    ecx,DWORD PTR [eax]
c001f804:	31 c0                	xor    eax,eax
c001f806:	c1 e9 08             	shr    ecx,0x8
c001f809:	83 e1 0f             	and    ecx,0xf
c001f80c:	39 c8                	cmp    eax,ecx
c001f80e:	74 0a                	je     c001f81a <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c001f810:	f6 c2 01             	test   dl,0x1
c001f813:	74 08                	je     c001f81d <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001f815:	d1 ea                	shr    edx,1
c001f817:	40                   	inc    eax
c001f818:	eb f2                	jmp    c001f80c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001f81a:	83 c8 ff             	or     eax,0xffffffff
c001f81d:	c3                   	ret    

c001f81e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001f81e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f822:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001f825:	89 c2                	mov    edx,eax
c001f827:	c1 ea 08             	shr    edx,0x8
c001f82a:	83 e2 0f             	and    edx,0xf
c001f82d:	4a                   	dec    edx
c001f82e:	75 32                	jne    c001f862 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001f830:	83 e0 0f             	and    eax,0xf
c001f833:	83 f8 03             	cmp    eax,0x3
c001f836:	75 2a                	jne    c001f862 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001f838:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001f83b:	b8 02 00 00 00       	mov    eax,0x2
c001f840:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001f846:	74 1c                	je     c001f864 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001f848:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001f84e:	b8 04 00 00 00       	mov    eax,0x4
c001f853:	74 0f                	je     c001f864 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001f855:	31 c0                	xor    eax,eax
c001f857:	83 fa 03             	cmp    edx,0x3
c001f85a:	0f 94 c0             	sete   al
c001f85d:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001f861:	c3                   	ret    
c001f862:	31 c0                	xor    eax,eax
c001f864:	c3                   	ret    
c001f865:	90                   	nop

c001f866 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001f866:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f86a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f86d:	0f ba e2 0f          	bt     edx,0xf
c001f871:	72 f7                	jb     c001f86a <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001f873:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f876:	83 ca 10             	or     edx,0x10
c001f879:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f87c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f87f:	83 ca 01             	or     edx,0x1
c001f882:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f885:	c3                   	ret    

c001f886 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001f886:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f88a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f88d:	83 e2 fe             	and    edx,0xfffffffe
c001f890:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f893:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f896:	83 e2 ef             	and    edx,0xffffffef
c001f899:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f89c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f89f:	0f ba e2 0e          	bt     edx,0xe
c001f8a3:	72 f7                	jb     c001f89c <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001f8a5:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f8a8:	0f ba e2 0f          	bt     edx,0xf
c001f8ac:	72 ee                	jb     c001f89c <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001f8ae:	c3                   	ret    
c001f8af:	90                   	nop

c001f8b0 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001f8b0:	55                   	push   ebp
c001f8b1:	57                   	push   edi
c001f8b2:	56                   	push   esi
c001f8b3:	53                   	push   ebx
c001f8b4:	83 ec 1c             	sub    esp,0x1c
c001f8b7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f8bb:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001f8bf:	53                   	push   ebx
c001f8c0:	57                   	push   edi
c001f8c1:	e8 c0 ff ff ff       	call   c001f886 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001f8c6:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001f8ca:	83 ec 0c             	sub    esp,0xc
c001f8cd:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001f8d3:	c1 e5 0a             	shl    ebp,0xa
c001f8d6:	01 e8                	add    eax,ebp
c001f8d8:	89 03                	mov    DWORD PTR [ebx],eax
c001f8da:	8b 03                	mov    eax,DWORD PTR [ebx]
c001f8dc:	68 00 04 00 00       	push   0x400
c001f8e1:	6a 00                	push   0x0
c001f8e3:	50                   	push   eax
c001f8e4:	e8 07 0c fe ff       	call   c00004f0 <memset>
c001f8e9:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001f8ef:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c001f8f3:	83 c4 1c             	add    esp,0x1c
c001f8f6:	01 e8                	add    eax,ebp
c001f8f8:	89 03                	mov    DWORD PTR [ebx],eax
c001f8fa:	c1 e6 08             	shl    esi,0x8
c001f8fd:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001f904:	81 c6 00 80 00 00    	add    esi,0x8000
c001f90a:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001f910:	01 f0                	add    eax,esi
c001f912:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001f915:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001f918:	68 00 01 00 00       	push   0x100
c001f91d:	6a 00                	push   0x0
c001f91f:	50                   	push   eax
c001f920:	e8 cb 0b fe ff       	call   c00004f0 <memset>
c001f925:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001f92b:	31 d2                	xor    edx,edx
c001f92d:	01 f0                	add    eax,esi
c001f92f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001f932:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001f939:	8b b7 58 01 00 00    	mov    esi,DWORD PTR [edi+0x158]
c001f93f:	01 ee                	add    esi,ebp
c001f941:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001f945:	83 c4 10             	add    esp,0x10
c001f948:	c1 e5 0d             	shl    ebp,0xd
c001f94b:	81 c5 00 a0 00 00    	add    ebp,0xa000
c001f951:	66 c7 46 02 08 00    	mov    WORD PTR [esi+0x2],0x8
c001f957:	83 c6 20             	add    esi,0x20
c001f95a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001f95e:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001f964:	01 e8                	add    eax,ebp
c001f966:	01 d0                	add    eax,edx
c001f968:	89 46 e8             	mov    DWORD PTR [esi-0x18],eax
c001f96b:	52                   	push   edx
c001f96c:	68 00 01 00 00       	push   0x100
c001f971:	6a 00                	push   0x0
c001f973:	50                   	push   eax
c001f974:	e8 77 0b fe ff       	call   c00004f0 <memset>
c001f979:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001f97f:	c7 46 ec 00 00 00 00 	mov    DWORD PTR [esi-0x14],0x0
c001f986:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001f98a:	83 c4 10             	add    esp,0x10
c001f98d:	01 e8                	add    eax,ebp
c001f98f:	01 d0                	add    eax,edx
c001f991:	81 c2 00 01 00 00    	add    edx,0x100
c001f997:	89 46 e8             	mov    DWORD PTR [esi-0x18],eax
c001f99a:	81 fa 00 20 00 00    	cmp    edx,0x2000
c001f9a0:	75 af                	jne    c001f951 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa1>
c001f9a2:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001f9a9:	50                   	push   eax
c001f9aa:	50                   	push   eax
c001f9ab:	53                   	push   ebx
c001f9ac:	57                   	push   edi
c001f9ad:	e8 b4 fe ff ff       	call   c001f866 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001f9b2:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001f9b9:	83 c4 2c             	add    esp,0x2c
c001f9bc:	5b                   	pop    ebx
c001f9bd:	5e                   	pop    esi
c001f9be:	5f                   	pop    edi
c001f9bf:	5d                   	pop    ebp
c001f9c0:	c3                   	ret    
c001f9c1:	90                   	nop

c001f9c2 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001f9c2:	55                   	push   ebp
c001f9c3:	57                   	push   edi
c001f9c4:	56                   	push   esi
c001f9c5:	53                   	push   ebx
c001f9c6:	31 db                	xor    ebx,ebx
c001f9c8:	83 ec 0c             	sub    esp,0xc
c001f9cb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001f9cf:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001f9d3:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c001f9d6:	f7 c7 01 00 00 00    	test   edi,0x1
c001f9dc:	74 7a                	je     c001fa58 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001f9de:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001f9e2:	89 d8                	mov    eax,ebx
c001f9e4:	c1 e0 07             	shl    eax,0x7
c001f9e7:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c001f9ee:	55                   	push   ebp
c001f9ef:	56                   	push   esi
c001f9f0:	e8 29 fe ff ff       	call   c001f81e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001f9f5:	5a                   	pop    edx
c001f9f6:	59                   	pop    ecx
c001f9f7:	83 f8 01             	cmp    eax,0x1
c001f9fa:	75 21                	jne    c001fa1d <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c001f9fc:	50                   	push   eax
c001f9fd:	53                   	push   ebx
c001f9fe:	55                   	push   ebp
c001f9ff:	56                   	push   esi
c001fa00:	e8 ab fe ff ff       	call   c001f8b0 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001fa05:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001fa0c:	e8 6b 01 ff ff       	call   c000fb7c <malloc>
c001fa11:	89 04 24             	mov    DWORD PTR [esp],eax
c001fa14:	89 c5                	mov    ebp,eax
c001fa16:	e8 37 0f 00 00       	call   c0020952 <SATA::SATA()>
c001fa1b:	eb 24                	jmp    c001fa41 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c001fa1d:	83 f8 04             	cmp    eax,0x4
c001fa20:	75 36                	jne    c001fa58 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001fa22:	51                   	push   ecx
c001fa23:	53                   	push   ebx
c001fa24:	55                   	push   ebp
c001fa25:	56                   	push   esi
c001fa26:	e8 85 fe ff ff       	call   c001f8b0 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001fa2b:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001fa32:	e8 45 01 ff ff       	call   c000fb7c <malloc>
c001fa37:	89 04 24             	mov    DWORD PTR [esp],eax
c001fa3a:	89 c5                	mov    ebp,eax
c001fa3c:	e8 a7 12 00 00       	call   c0020ce8 <SATAPI::SATAPI()>
c001fa41:	58                   	pop    eax
c001fa42:	5a                   	pop    edx
c001fa43:	55                   	push   ebp
c001fa44:	56                   	push   esi
c001fa45:	e8 ac 9f fe ff       	call   c00099f6 <Device::addChild(Device*)>
c001fa4a:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001fa4d:	56                   	push   esi
c001fa4e:	6a 00                	push   0x0
c001fa50:	53                   	push   ebx
c001fa51:	55                   	push   ebp
c001fa52:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001fa55:	83 c4 20             	add    esp,0x20
c001fa58:	d1 ef                	shr    edi,1
c001fa5a:	43                   	inc    ebx
c001fa5b:	83 fb 20             	cmp    ebx,0x20
c001fa5e:	0f 85 72 ff ff ff    	jne    c001f9d6 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c001fa64:	83 c4 0c             	add    esp,0xc
c001fa67:	5b                   	pop    ebx
c001fa68:	5e                   	pop    esi
c001fa69:	5f                   	pop    edi
c001fa6a:	5d                   	pop    ebp
c001fa6b:	c3                   	ret    

c001fa6c <SATABus::open(int, int, void*)>:
c001fa6c:	53                   	push   ebx
c001fa6d:	83 ec 08             	sub    esp,0x8
c001fa70:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001fa74:	8b 83 34 01 00 00    	mov    eax,DWORD PTR [ebx+0x134]
c001fa7a:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001fa80:	e8 57 73 ff ff       	call   c0016ddc <KeDisablePreemption()>
c001fa85:	52                   	push   edx
c001fa86:	52                   	push   edx
c001fa87:	ff b3 60 01 00 00    	push   DWORD PTR [ebx+0x160]
c001fa8d:	53                   	push   ebx
c001fa8e:	e8 2f ff ff ff       	call   c001f9c2 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001fa93:	e8 6c 73 ff ff       	call   c0016e04 <KeRestorePreemption()>
c001fa98:	83 c4 18             	add    esp,0x18
c001fa9b:	31 c0                	xor    eax,eax
c001fa9d:	5b                   	pop    ebx
c001fa9e:	c3                   	ret    
c001fa9f:	90                   	nop

c001faa0 <ATA::close(int, int, void*)>:
c001faa0:	83 ec 0c             	sub    esp,0xc
c001faa3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001faa7:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001faad:	85 c0                	test   eax,eax
c001faaf:	74 0c                	je     c001fabd <ATA::close(int, int, void*)+0x1d>
c001fab1:	8b 10                	mov    edx,DWORD PTR [eax]
c001fab3:	83 ec 0c             	sub    esp,0xc
c001fab6:	50                   	push   eax
c001fab7:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001faba:	83 c4 10             	add    esp,0x10
c001fabd:	31 c0                	xor    eax,eax
c001fabf:	83 c4 0c             	add    esp,0xc
c001fac2:	c3                   	ret    
c001fac3:	90                   	nop

c001fac4 <ATA::powerSaving(PowerSavingLevel)>:
c001fac4:	c3                   	ret    
c001fac5:	90                   	nop

c001fac6 <ATA::ATA()>:
c001fac6:	83 ec 0c             	sub    esp,0xc
c001fac9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001facd:	83 ec 04             	sub    esp,0x4
c001fad0:	68 00 02 00 00       	push   0x200
c001fad5:	68 71 65 02 c0       	push   0xc0026571
c001fada:	50                   	push   eax
c001fadb:	e8 fa a2 fe ff       	call   c0009dda <PhysicalDisk::PhysicalDisk(char const*, int)>
c001fae0:	83 c4 10             	add    esp,0x10
c001fae3:	ba d8 64 02 c0       	mov    edx,0xc00264d8
c001fae8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001faec:	89 10                	mov    DWORD PTR [eax],edx
c001faee:	90                   	nop
c001faef:	83 c4 0c             	add    esp,0xc
c001faf2:	c3                   	ret    
c001faf3:	90                   	nop

c001faf4 <ATA::flush(bool)>:
c001faf4:	53                   	push   ebx
c001faf5:	83 ec 08             	sub    esp,0x8
c001faf8:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001fafd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001fb01:	83 f8 01             	cmp    eax,0x1
c001fb04:	19 c0                	sbb    eax,eax
c001fb06:	83 e0 fd             	and    eax,0xfffffffd
c001fb09:	05 ea 00 00 00       	add    eax,0xea
c001fb0e:	50                   	push   eax
c001fb0f:	6a 07                	push   0x7
c001fb11:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fb18:	50                   	push   eax
c001fb19:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fb1f:	e8 48 ee ff ff       	call   c001e96c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fb24:	83 c4 0c             	add    esp,0xc
c001fb27:	6a 00                	push   0x0
c001fb29:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fb30:	50                   	push   eax
c001fb31:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fb37:	e8 d0 fb ff ff       	call   c001f70c <IDE::polling(unsigned char, unsigned int)>
c001fb3c:	83 c4 18             	add    esp,0x18
c001fb3f:	5b                   	pop    ebx
c001fb40:	c3                   	ret    
c001fb41:	90                   	nop

c001fb42 <ATA::readyForCommand()>:
c001fb42:	56                   	push   esi
c001fb43:	53                   	push   ebx
c001fb44:	31 db                	xor    ebx,ebx
c001fb46:	50                   	push   eax
c001fb47:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001fb4b:	50                   	push   eax
c001fb4c:	6a 0c                	push   0xc
c001fb4e:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001fb55:	50                   	push   eax
c001fb56:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001fb5c:	e8 cb ee ff ff       	call   c001ea2c <IDE::read(unsigned char, unsigned char)>
c001fb61:	83 c4 10             	add    esp,0x10
c001fb64:	a8 88                	test   al,0x88
c001fb66:	74 20                	je     c001fb88 <ATA::readyForCommand()+0x46>
c001fb68:	43                   	inc    ebx
c001fb69:	83 fb 63             	cmp    ebx,0x63
c001fb6c:	7e dd                	jle    c001fb4b <ATA::readyForCommand()+0x9>
c001fb6e:	51                   	push   ecx
c001fb6f:	51                   	push   ecx
c001fb70:	6a 00                	push   0x0
c001fb72:	6a 0a                	push   0xa
c001fb74:	e8 47 77 ff ff       	call   c00172c0 <milliTenthSleep(unsigned long long)>
c001fb79:	83 c4 10             	add    esp,0x10
c001fb7c:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001fb82:	75 c7                	jne    c001fb4b <ATA::readyForCommand()+0x9>
c001fb84:	31 c0                	xor    eax,eax
c001fb86:	eb 02                	jmp    c001fb8a <ATA::readyForCommand()+0x48>
c001fb88:	b0 01                	mov    al,0x1
c001fb8a:	5a                   	pop    edx
c001fb8b:	5b                   	pop    ebx
c001fb8c:	5e                   	pop    esi
c001fb8d:	c3                   	ret    

c001fb8e <ATA::access(unsigned long long, int, void*, bool)>:
c001fb8e:	55                   	push   ebp
c001fb8f:	57                   	push   edi
c001fb90:	56                   	push   esi
c001fb91:	53                   	push   ebx
c001fb92:	83 ec 2c             	sub    esp,0x2c
c001fb95:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001fb99:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001fb9d:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001fba1:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001fba5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001fba9:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001fbad:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001fbb1:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001fbb7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001fbbb:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001fbc1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001fbc5:	c1 e0 06             	shl    eax,0x6
c001fbc8:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001fbd0:	74 5b                	je     c001fc2d <ATA::access(unsigned long long, int, void*, bool)+0x9f>
c001fbd2:	89 fa                	mov    edx,edi
c001fbd4:	89 f0                	mov    eax,esi
c001fbd6:	c1 ea 1c             	shr    edx,0x1c
c001fbd9:	0f ac f8 1c          	shrd   eax,edi,0x1c
c001fbdd:	89 d1                	mov    ecx,edx
c001fbdf:	09 c1                	or     ecx,eax
c001fbe1:	74 25                	je     c001fc08 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001fbe3:	31 ed                	xor    ebp,ebp
c001fbe5:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001fbec:	89 fa                	mov    edx,edi
c001fbee:	89 f0                	mov    eax,esi
c001fbf0:	0f ad d0             	shrd   eax,edx,cl
c001fbf3:	d3 ea                	shr    edx,cl
c001fbf5:	f6 c1 20             	test   cl,0x20
c001fbf8:	74 02                	je     c001fbfc <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001fbfa:	89 d0                	mov    eax,edx
c001fbfc:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001fc00:	45                   	inc    ebp
c001fc01:	83 fd 06             	cmp    ebp,0x6
c001fc04:	75 df                	jne    c001fbe5 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001fc06:	eb 71                	jmp    c001fc79 <ATA::access(unsigned long long, int, void*, bool)+0xeb>
c001fc08:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001fc0d:	89 f0                	mov    eax,esi
c001fc0f:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001fc16:	0f ac f8 10          	shrd   eax,edi,0x10
c001fc1a:	bf 01 00 00 00       	mov    edi,0x1
c001fc1f:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001fc23:	c1 ee 18             	shr    esi,0x18
c001fc26:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001fc2b:	eb 53                	jmp    c001fc80 <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c001fc2d:	6a 00                	push   0x0
c001fc2f:	6a 3f                	push   0x3f
c001fc31:	57                   	push   edi
c001fc32:	56                   	push   esi
c001fc33:	e8 cc 20 00 00       	call   c0021d04 <__umoddi3>
c001fc38:	83 c4 10             	add    esp,0x10
c001fc3b:	40                   	inc    eax
c001fc3c:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001fc40:	6a 00                	push   0x0
c001fc42:	68 f0 03 00 00       	push   0x3f0
c001fc47:	57                   	push   edi
c001fc48:	56                   	push   esi
c001fc49:	e8 b6 1f 00 00       	call   c0021c04 <__udivdi3>
c001fc4e:	83 c4 10             	add    esp,0x10
c001fc51:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001fc56:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001fc5d:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001fc62:	6a 00                	push   0x0
c001fc64:	6a 3f                	push   0x3f
c001fc66:	57                   	push   edi
c001fc67:	31 ff                	xor    edi,edi
c001fc69:	56                   	push   esi
c001fc6a:	e8 95 1f 00 00       	call   c0021c04 <__udivdi3>
c001fc6f:	83 c4 10             	add    esp,0x10
c001fc72:	83 e0 0f             	and    eax,0xf
c001fc75:	89 c6                	mov    esi,eax
c001fc77:	eb 07                	jmp    c001fc80 <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c001fc79:	31 f6                	xor    esi,esi
c001fc7b:	bf 02 00 00 00       	mov    edi,0x2
c001fc80:	55                   	push   ebp
c001fc81:	6a 00                	push   0x0
c001fc83:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fc8a:	50                   	push   eax
c001fc8b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001fc8f:	e8 e8 ee ff ff       	call   c001eb7c <IDE::enableIRQs(unsigned char, bool)>
c001fc94:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fc97:	e8 a6 fe ff ff       	call   c001fb42 <ATA::readyForCommand()>
c001fc9c:	83 c4 10             	add    esp,0x10
c001fc9f:	84 c0                	test   al,al
c001fca1:	75 0a                	jne    c001fcad <ATA::access(unsigned long long, int, void*, bool)+0x11f>
c001fca3:	be 01 00 00 00       	mov    esi,0x1
c001fca8:	e9 df 02 00 00       	jmp    c001ff8c <ATA::access(unsigned long long, int, void*, bool)+0x3fe>
c001fcad:	fa                   	cli    
c001fcae:	ff 05 50 fa 02 c0    	inc    DWORD PTR ds:0xc002fa50
c001fcb4:	f7 c7 03 00 00 00    	test   edi,0x3
c001fcba:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001fcc0:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001fcc6:	75 0a                	jne    c001fcd2 <ATA::access(unsigned long long, int, void*, bool)+0x144>
c001fcc8:	c1 e0 04             	shl    eax,0x4
c001fccb:	09 c6                	or     esi,eax
c001fccd:	83 ce a0             	or     esi,0xffffffa0
c001fcd0:	eb 08                	jmp    c001fcda <ATA::access(unsigned long long, int, void*, bool)+0x14c>
c001fcd2:	c1 e0 04             	shl    eax,0x4
c001fcd5:	09 c6                	or     esi,eax
c001fcd7:	83 ce e0             	or     esi,0xffffffe0
c001fcda:	89 f0                	mov    eax,esi
c001fcdc:	0f b6 d2             	movzx  edx,dl
c001fcdf:	0f b6 f0             	movzx  esi,al
c001fce2:	56                   	push   esi
c001fce3:	6a 06                	push   0x6
c001fce5:	52                   	push   edx
c001fce6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fcec:	e8 7b ec ff ff       	call   c001e96c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fcf1:	83 c4 10             	add    esp,0x10
c001fcf4:	6a 00                	push   0x0
c001fcf6:	6a 01                	push   0x1
c001fcf8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fcff:	50                   	push   eax
c001fd00:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fd06:	e8 61 ec ff ff       	call   c001e96c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fd0b:	89 f8                	mov    eax,edi
c001fd0d:	83 c4 10             	add    esp,0x10
c001fd10:	0f b6 f0             	movzx  esi,al
c001fd13:	83 fe 02             	cmp    esi,0x2
c001fd16:	75 6e                	jne    c001fd86 <ATA::access(unsigned long long, int, void*, bool)+0x1f8>
c001fd18:	6a 00                	push   0x0
c001fd1a:	6a 08                	push   0x8
c001fd1c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fd23:	50                   	push   eax
c001fd24:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fd2a:	e8 3d ec ff ff       	call   c001e96c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fd2f:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001fd34:	50                   	push   eax
c001fd35:	6a 09                	push   0x9
c001fd37:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fd3e:	50                   	push   eax
c001fd3f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fd45:	e8 22 ec ff ff       	call   c001e96c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fd4a:	83 c4 20             	add    esp,0x20
c001fd4d:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001fd52:	50                   	push   eax
c001fd53:	6a 0a                	push   0xa
c001fd55:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fd5c:	50                   	push   eax
c001fd5d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fd63:	e8 04 ec ff ff       	call   c001e96c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fd68:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001fd6d:	50                   	push   eax
c001fd6e:	6a 0b                	push   0xb
c001fd70:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fd77:	50                   	push   eax
c001fd78:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fd7e:	e8 e9 eb ff ff       	call   c001e96c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fd83:	83 c4 20             	add    esp,0x20
c001fd86:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001fd8b:	50                   	push   eax
c001fd8c:	6a 02                	push   0x2
c001fd8e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fd95:	50                   	push   eax
c001fd96:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fd9c:	e8 cb eb ff ff       	call   c001e96c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fda1:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001fda6:	50                   	push   eax
c001fda7:	6a 03                	push   0x3
c001fda9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fdb0:	50                   	push   eax
c001fdb1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fdb7:	e8 b0 eb ff ff       	call   c001e96c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fdbc:	83 c4 20             	add    esp,0x20
c001fdbf:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001fdc4:	50                   	push   eax
c001fdc5:	6a 04                	push   0x4
c001fdc7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fdce:	50                   	push   eax
c001fdcf:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fdd5:	e8 92 eb ff ff       	call   c001e96c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fdda:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001fddf:	50                   	push   eax
c001fde0:	6a 05                	push   0x5
c001fde2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fde9:	50                   	push   eax
c001fdea:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fdf0:	e8 77 eb ff ff       	call   c001e96c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fdf5:	83 c4 20             	add    esp,0x20
c001fdf8:	83 fe 02             	cmp    esi,0x2
c001fdfb:	0f 94 44 24 08       	sete   BYTE PTR [esp+0x8]
c001fe00:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c001fe05:	85 c9                	test   ecx,ecx
c001fe07:	74 07                	je     c001fe10 <ATA::access(unsigned long long, int, void*, bool)+0x282>
c001fe09:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001fe0e:	75 45                	jne    c001fe55 <ATA::access(unsigned long long, int, void*, bool)+0x2c7>
c001fe10:	89 f8                	mov    eax,edi
c001fe12:	0f b6 f8             	movzx  edi,al
c001fe15:	31 c0                	xor    eax,eax
c001fe17:	4f                   	dec    edi
c001fe18:	0f 94 c0             	sete   al
c001fe1b:	89 c6                	mov    esi,eax
c001fe1d:	75 0c                	jne    c001fe2b <ATA::access(unsigned long long, int, void*, bool)+0x29d>
c001fe1f:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001fe24:	b8 30 00 00 00       	mov    eax,0x30
c001fe29:	75 2f                	jne    c001fe5a <ATA::access(unsigned long long, int, void*, bool)+0x2cc>
c001fe2b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001fe2f:	83 f2 01             	xor    edx,0x1
c001fe32:	85 c9                	test   ecx,ecx
c001fe34:	74 09                	je     c001fe3f <ATA::access(unsigned long long, int, void*, bool)+0x2b1>
c001fe36:	84 d2                	test   dl,dl
c001fe38:	b8 24 00 00 00       	mov    eax,0x24
c001fe3d:	75 1b                	jne    c001fe5a <ATA::access(unsigned long long, int, void*, bool)+0x2cc>
c001fe3f:	85 f6                	test   esi,esi
c001fe41:	0f 84 5c fe ff ff    	je     c001fca3 <ATA::access(unsigned long long, int, void*, bool)+0x115>
c001fe47:	84 d2                	test   dl,dl
c001fe49:	b8 20 00 00 00       	mov    eax,0x20
c001fe4e:	75 0a                	jne    c001fe5a <ATA::access(unsigned long long, int, void*, bool)+0x2cc>
c001fe50:	e9 4e fe ff ff       	jmp    c001fca3 <ATA::access(unsigned long long, int, void*, bool)+0x115>
c001fe55:	b8 34 00 00 00       	mov    eax,0x34
c001fe5a:	50                   	push   eax
c001fe5b:	6a 07                	push   0x7
c001fe5d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fe64:	50                   	push   eax
c001fe65:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fe6b:	e8 fc ea ff ff       	call   c001e96c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fe70:	f0 ff 0d 50 fa 02 c0 	lock dec DWORD PTR ds:0xc002fa50
c001fe77:	83 c4 10             	add    esp,0x10
c001fe7a:	83 3d 50 fa 02 c0 00 	cmp    DWORD PTR ds:0xc002fa50,0x0
c001fe81:	75 01                	jne    c001fe84 <ATA::access(unsigned long long, int, void*, bool)+0x2f6>
c001fe83:	fb                   	sti    
c001fe84:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c001fe88:	0f b6 6c 24 0e       	movzx  ebp,BYTE PTR [esp+0xe]
c001fe8d:	85 f6                	test   esi,esi
c001fe8f:	0f 84 dd 00 00 00    	je     c001ff72 <ATA::access(unsigned long long, int, void*, bool)+0x3e4>
c001fe95:	57                   	push   edi
c001fe96:	6a 01                	push   0x1
c001fe98:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fe9f:	50                   	push   eax
c001fea0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fea6:	e8 61 f8 ff ff       	call   c001f70c <IDE::polling(unsigned char, unsigned int)>
c001feab:	83 c4 10             	add    esp,0x10
c001feae:	0f b6 c0             	movzx  eax,al
c001feb1:	85 c0                	test   eax,eax
c001feb3:	74 23                	je     c001fed8 <ATA::access(unsigned long long, int, void*, bool)+0x34a>
c001feb5:	50                   	push   eax
c001feb6:	89 c6                	mov    esi,eax
c001feb8:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001febf:	50                   	push   eax
c001fec0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fec7:	50                   	push   eax
c001fec8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fece:	e8 7f f7 ff ff       	call   c001f652 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001fed3:	e9 b1 00 00 00       	jmp    c001ff89 <ATA::access(unsigned long long, int, void*, bool)+0x3fb>
c001fed8:	85 ed                	test   ebp,ebp
c001feda:	74 49                	je     c001ff25 <ATA::access(unsigned long long, int, void*, bool)+0x397>
c001fedc:	fa                   	cli    
c001fedd:	ff 05 50 fa 02 c0    	inc    DWORD PTR ds:0xc002fa50
c001fee3:	31 ff                	xor    edi,edi
c001fee5:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001fee9:	66 8b 04 78          	mov    ax,WORD PTR [eax+edi*2]
c001feed:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c001fef2:	51                   	push   ecx
c001fef3:	51                   	push   ecx
c001fef4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fefb:	50                   	push   eax
c001fefc:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ff02:	e8 53 ea ff ff       	call   c001e95a <IDE::getBase(unsigned char)>
c001ff07:	89 c2                	mov    edx,eax
c001ff09:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001ff0e:	66 ef                	out    dx,ax
c001ff10:	47                   	inc    edi
c001ff11:	83 c4 10             	add    esp,0x10
c001ff14:	81 ff 00 01 00 00    	cmp    edi,0x100
c001ff1a:	75 c9                	jne    c001fee5 <ATA::access(unsigned long long, int, void*, bool)+0x357>
c001ff1c:	f0 ff 0d 50 fa 02 c0 	lock dec DWORD PTR ds:0xc002fa50
c001ff23:	eb 35                	jmp    c001ff5a <ATA::access(unsigned long long, int, void*, bool)+0x3cc>
c001ff25:	fa                   	cli    
c001ff26:	52                   	push   edx
c001ff27:	52                   	push   edx
c001ff28:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ff2f:	ff 05 50 fa 02 c0    	inc    DWORD PTR ds:0xc002fa50
c001ff35:	50                   	push   eax
c001ff36:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ff3c:	e8 19 ea ff ff       	call   c001e95a <IDE::getBase(unsigned char)>
c001ff41:	b9 00 01 00 00       	mov    ecx,0x100
c001ff46:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001ff4a:	89 c2                	mov    edx,eax
c001ff4c:	fc                   	cld    
c001ff4d:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001ff50:	f0 ff 0d 50 fa 02 c0 	lock dec DWORD PTR ds:0xc002fa50
c001ff57:	83 c4 10             	add    esp,0x10
c001ff5a:	83 3d 50 fa 02 c0 00 	cmp    DWORD PTR ds:0xc002fa50,0x0
c001ff61:	75 01                	jne    c001ff64 <ATA::access(unsigned long long, int, void*, bool)+0x3d6>
c001ff63:	fb                   	sti    
c001ff64:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001ff6c:	4e                   	dec    esi
c001ff6d:	e9 1b ff ff ff       	jmp    c001fe8d <ATA::access(unsigned long long, int, void*, bool)+0x2ff>
c001ff72:	31 f6                	xor    esi,esi
c001ff74:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001ff79:	74 11                	je     c001ff8c <ATA::access(unsigned long long, int, void*, bool)+0x3fe>
c001ff7b:	50                   	push   eax
c001ff7c:	50                   	push   eax
c001ff7d:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001ff82:	50                   	push   eax
c001ff83:	53                   	push   ebx
c001ff84:	e8 6b fb ff ff       	call   c001faf4 <ATA::flush(bool)>
c001ff89:	83 c4 10             	add    esp,0x10
c001ff8c:	83 c4 2c             	add    esp,0x2c
c001ff8f:	89 f0                	mov    eax,esi
c001ff91:	5b                   	pop    ebx
c001ff92:	5e                   	pop    esi
c001ff93:	5f                   	pop    edi
c001ff94:	5d                   	pop    ebp
c001ff95:	c3                   	ret    

c001ff96 <ATA::read(unsigned long long, int, void*)>:
c001ff96:	57                   	push   edi
c001ff97:	b8 04 00 00 00       	mov    eax,0x4
c001ff9c:	56                   	push   esi
c001ff9d:	53                   	push   ebx
c001ff9e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ffa2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001ffa6:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001ffaa:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001ffae:	8d 7a ff             	lea    edi,[edx-0x1]
c001ffb1:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001ffb7:	77 25                	ja     c001ffde <ATA::read(unsigned long long, int, void*)+0x48>
c001ffb9:	85 f6                	test   esi,esi
c001ffbb:	b8 06 00 00 00       	mov    eax,0x6
c001ffc0:	74 1c                	je     c001ffde <ATA::read(unsigned long long, int, void*)+0x48>
c001ffc2:	50                   	push   eax
c001ffc3:	50                   	push   eax
c001ffc4:	6a 00                	push   0x0
c001ffc6:	56                   	push   esi
c001ffc7:	52                   	push   edx
c001ffc8:	53                   	push   ebx
c001ffc9:	51                   	push   ecx
c001ffca:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ffce:	e8 bb fb ff ff       	call   c001fb8e <ATA::access(unsigned long long, int, void*, bool)>
c001ffd3:	83 c4 20             	add    esp,0x20
c001ffd6:	85 c0                	test   eax,eax
c001ffd8:	0f 95 c0             	setne  al
c001ffdb:	0f b6 c0             	movzx  eax,al
c001ffde:	5b                   	pop    ebx
c001ffdf:	5e                   	pop    esi
c001ffe0:	5f                   	pop    edi
c001ffe1:	c3                   	ret    

c001ffe2 <ATA::write(unsigned long long, int, void*)>:
c001ffe2:	57                   	push   edi
c001ffe3:	b8 04 00 00 00       	mov    eax,0x4
c001ffe8:	56                   	push   esi
c001ffe9:	53                   	push   ebx
c001ffea:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ffee:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001fff2:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001fff6:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001fffa:	8d 7a ff             	lea    edi,[edx-0x1]
c001fffd:	81 ff fe 00 00 00    	cmp    edi,0xfe
c0020003:	77 25                	ja     c002002a <ATA::write(unsigned long long, int, void*)+0x48>
c0020005:	85 f6                	test   esi,esi
c0020007:	b8 06 00 00 00       	mov    eax,0x6
c002000c:	74 1c                	je     c002002a <ATA::write(unsigned long long, int, void*)+0x48>
c002000e:	50                   	push   eax
c002000f:	50                   	push   eax
c0020010:	6a 01                	push   0x1
c0020012:	56                   	push   esi
c0020013:	52                   	push   edx
c0020014:	53                   	push   ebx
c0020015:	51                   	push   ecx
c0020016:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002001a:	e8 6f fb ff ff       	call   c001fb8e <ATA::access(unsigned long long, int, void*, bool)>
c002001f:	83 c4 20             	add    esp,0x20
c0020022:	85 c0                	test   eax,eax
c0020024:	0f 95 c0             	setne  al
c0020027:	0f b6 c0             	movzx  eax,al
c002002a:	5b                   	pop    ebx
c002002b:	5e                   	pop    esi
c002002c:	5f                   	pop    edi
c002002d:	c3                   	ret    

c002002e <ATA::detectCHS()>:
c002002e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0020032:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c0020038:	c1 e0 06             	shl    eax,0x6
c002003b:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c0020041:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c002004b:	c7 44 24 04 14 64 02 c0 	mov    DWORD PTR [esp+0x4],0xc0026414
c0020053:	e9 32 fe fe ff       	jmp    c000fe8a <KePanic(char const*)>

c0020058 <ATA::open(int, int, void*)>:
c0020058:	53                   	push   ebx
c0020059:	83 ec 08             	sub    esp,0x8
c002005c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0020060:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0020064:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020068:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c002006e:	c1 e0 06             	shl    eax,0x6
c0020071:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0020077:	01 d0                	add    eax,edx
c0020079:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c0020080:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c0020086:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c002008d:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0020097:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c002009e:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c00200a4:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c00200ab:	75 0c                	jne    c00200b9 <ATA::open(int, int, void*)+0x61>
c00200ad:	83 ec 0c             	sub    esp,0xc
c00200b0:	53                   	push   ebx
c00200b1:	e8 78 ff ff ff       	call   c002002e <ATA::detectCHS()>
c00200b6:	83 c4 10             	add    esp,0x10
c00200b9:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c00200bf:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c00200c5:	c1 e0 06             	shl    eax,0x6
c00200c8:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c00200cf:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c00200d9:	d1 e8                	shr    eax,1
c00200db:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c00200e1:	6a 04                	push   0x4
c00200e3:	6a 0c                	push   0xc
c00200e5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00200ec:	50                   	push   eax
c00200ed:	52                   	push   edx
c00200ee:	e8 79 e8 ff ff       	call   c001e96c <IDE::write(unsigned char, unsigned char, unsigned char)>
c00200f3:	90                   	nop
c00200f4:	90                   	nop
c00200f5:	6a 00                	push   0x0
c00200f7:	6a 0c                	push   0xc
c00200f9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0020100:	50                   	push   eax
c0020101:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0020107:	e8 60 e8 ff ff       	call   c001e96c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002010c:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0020112:	83 c4 20             	add    esp,0x20
c0020115:	c1 e0 06             	shl    eax,0x6
c0020118:	03 83 6c 01 00 00    	add    eax,DWORD PTR [ebx+0x16c]
c002011e:	80 b8 ab 01 00 00 00 	cmp    BYTE PTR [eax+0x1ab],0x0
c0020125:	0f 84 00 01 00 00    	je     c002022b <ATA::open(int, int, void*)+0x1d3>
c002012b:	83 ec 0c             	sub    esp,0xc
c002012e:	6a 08                	push   0x8
c0020130:	e8 2d 00 ff ff       	call   c0010162 <Phys::allocateContiguousPages(int)>
c0020135:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c002013b:	c7 04 24 26 64 02 c0 	mov    DWORD PTR [esp],0xc0026426
c0020142:	e8 1f 6e fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0020147:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c002014e:	e8 ee 31 ff ff       	call   c0013341 <Virt::allocateKernelVirtualPages(int)>
c0020153:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c0020159:	6a 03                	push   0x3
c002015b:	50                   	push   eax
c002015c:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c0020162:	ff 35 70 f2 02 c0    	push   DWORD PTR ds:0xc002f270
c0020168:	e8 ad 38 ff ff       	call   c0013a1a <VAS::mapPage(unsigned long, unsigned long, int)>
c002016d:	83 c4 20             	add    esp,0x20
c0020170:	e8 0f ff fe ff       	call   c0010084 <Phys::allocatePage()>
c0020175:	83 ec 0c             	sub    esp,0xc
c0020178:	89 83 84 01 00 00    	mov    DWORD PTR [ebx+0x184],eax
c002017e:	6a 01                	push   0x1
c0020180:	e8 bc 31 ff ff       	call   c0013341 <Virt::allocateKernelVirtualPages(int)>
c0020185:	89 83 88 01 00 00    	mov    DWORD PTR [ebx+0x188],eax
c002018b:	6a 03                	push   0x3
c002018d:	50                   	push   eax
c002018e:	ff b3 84 01 00 00    	push   DWORD PTR [ebx+0x184]
c0020194:	ff 35 70 f2 02 c0    	push   DWORD PTR ds:0xc002f270
c002019a:	e8 7b 38 ff ff       	call   c0013a1a <VAS::mapPage(unsigned long, unsigned long, int)>
c002019f:	83 c4 14             	add    esp,0x14
c00201a2:	68 5f 64 02 c0       	push   0xc002645f
c00201a7:	e8 ba 6d fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00201ac:	0f b6 83 84 01 00 00 	movzx  eax,BYTE PTR [ebx+0x184]
c00201b3:	50                   	push   eax
c00201b4:	6a 12                	push   0x12
c00201b6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00201bd:	50                   	push   eax
c00201be:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00201c4:	e8 a3 e7 ff ff       	call   c001e96c <IDE::write(unsigned char, unsigned char, unsigned char)>
c00201c9:	8b 83 84 01 00 00    	mov    eax,DWORD PTR [ebx+0x184]
c00201cf:	83 c4 20             	add    esp,0x20
c00201d2:	0f b6 c4             	movzx  eax,ah
c00201d5:	50                   	push   eax
c00201d6:	6a 13                	push   0x13
c00201d8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00201df:	50                   	push   eax
c00201e0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00201e6:	e8 81 e7 ff ff       	call   c001e96c <IDE::write(unsigned char, unsigned char, unsigned char)>
c00201eb:	0f b6 83 86 01 00 00 	movzx  eax,BYTE PTR [ebx+0x186]
c00201f2:	50                   	push   eax
c00201f3:	6a 14                	push   0x14
c00201f5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00201fc:	50                   	push   eax
c00201fd:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0020203:	e8 64 e7 ff ff       	call   c001e96c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020208:	0f b6 83 87 01 00 00 	movzx  eax,BYTE PTR [ebx+0x187]
c002020f:	83 c4 20             	add    esp,0x20
c0020212:	50                   	push   eax
c0020213:	6a 15                	push   0x15
c0020215:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002021c:	50                   	push   eax
c002021d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0020223:	e8 44 e7 ff ff       	call   c001e96c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020228:	83 c4 10             	add    esp,0x10
c002022b:	83 ec 0c             	sub    esp,0xc
c002022e:	53                   	push   ebx
c002022f:	e8 0e 9c fe ff       	call   c0009e42 <PhysicalDisk::startCache()>
c0020234:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0020237:	e8 a6 aa fe ff       	call   c000ace2 <createPartitionsForDisk(PhysicalDisk*)>
c002023c:	83 c4 18             	add    esp,0x18
c002023f:	31 c0                	xor    eax,eax
c0020241:	5b                   	pop    ebx
c0020242:	c3                   	ret    

c0020243 <combineCharAndColour(char, unsigned char)>:
c0020243:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020248:	66 0f be 54 24 04    	movsx  dx,BYTE PTR [esp+0x4]
c002024e:	c1 e0 08             	shl    eax,0x8
c0020251:	09 d0                	or     eax,edx
c0020253:	c3                   	ret    

c0020254 <combineColours(unsigned char, unsigned char)>:
c0020254:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020259:	c1 e0 04             	shl    eax,0x4
c002025c:	0b 44 24 04          	or     eax,DWORD PTR [esp+0x4]
c0020260:	c3                   	ret    
c0020261:	90                   	nop

c0020262 <ATAPI::write(unsigned long long, int, void*)>:
c0020262:	b8 03 00 00 00       	mov    eax,0x3
c0020267:	c3                   	ret    

c0020268 <ATAPI::close(int, int, void*)>:
c0020268:	83 ec 0c             	sub    esp,0xc
c002026b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002026f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0020275:	85 c0                	test   eax,eax
c0020277:	74 0c                	je     c0020285 <ATAPI::close(int, int, void*)+0x1d>
c0020279:	8b 10                	mov    edx,DWORD PTR [eax]
c002027b:	83 ec 0c             	sub    esp,0xc
c002027e:	50                   	push   eax
c002027f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0020282:	83 c4 10             	add    esp,0x10
c0020285:	31 c0                	xor    eax,eax
c0020287:	83 c4 0c             	add    esp,0xc
c002028a:	c3                   	ret    
c002028b:	90                   	nop

c002028c <ATAPI::ATAPI()>:
c002028c:	83 ec 0c             	sub    esp,0xc
c002028f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020293:	83 ec 04             	sub    esp,0x4
c0020296:	68 00 08 00 00       	push   0x800
c002029b:	68 11 66 02 c0       	push   0xc0026611
c00202a0:	50                   	push   eax
c00202a1:	e8 34 9b fe ff       	call   c0009dda <PhysicalDisk::PhysicalDisk(char const*, int)>
c00202a6:	83 c4 10             	add    esp,0x10
c00202a9:	ba 20 65 02 c0       	mov    edx,0xc0026520
c00202ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00202b2:	89 10                	mov    DWORD PTR [eax],edx
c00202b4:	90                   	nop
c00202b5:	83 c4 0c             	add    esp,0xc
c00202b8:	c3                   	ret    
c00202b9:	90                   	nop

c00202ba <ATAPI::readyForCommand()>:
c00202ba:	56                   	push   esi
c00202bb:	53                   	push   ebx
c00202bc:	31 db                	xor    ebx,ebx
c00202be:	50                   	push   eax
c00202bf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00202c3:	50                   	push   eax
c00202c4:	6a 0c                	push   0xc
c00202c6:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c00202cd:	50                   	push   eax
c00202ce:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c00202d4:	e8 53 e7 ff ff       	call   c001ea2c <IDE::read(unsigned char, unsigned char)>
c00202d9:	83 c4 10             	add    esp,0x10
c00202dc:	a8 88                	test   al,0x88
c00202de:	74 26                	je     c0020306 <ATAPI::readyForCommand()+0x4c>
c00202e0:	43                   	inc    ebx
c00202e1:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c00202e7:	7e da                	jle    c00202c3 <ATAPI::readyForCommand()+0x9>
c00202e9:	51                   	push   ecx
c00202ea:	51                   	push   ecx
c00202eb:	6a 00                	push   0x0
c00202ed:	68 5e 01 00 00       	push   0x15e
c00202f2:	e8 c9 6f ff ff       	call   c00172c0 <milliTenthSleep(unsigned long long)>
c00202f7:	83 c4 10             	add    esp,0x10
c00202fa:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c0020300:	75 c1                	jne    c00202c3 <ATAPI::readyForCommand()+0x9>
c0020302:	31 c0                	xor    eax,eax
c0020304:	eb 02                	jmp    c0020308 <ATAPI::readyForCommand()+0x4e>
c0020306:	b0 01                	mov    al,0x1
c0020308:	5a                   	pop    edx
c0020309:	5b                   	pop    ebx
c002030a:	5e                   	pop    esi
c002030b:	c3                   	ret    

c002030c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c002030c:	55                   	push   ebp
c002030d:	57                   	push   edi
c002030e:	56                   	push   esi
c002030f:	53                   	push   ebx
c0020310:	83 ec 20             	sub    esp,0x20
c0020313:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0020317:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c002031b:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c002031f:	6a 01                	push   0x1
c0020321:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020328:	50                   	push   eax
c0020329:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002032f:	e8 48 e8 ff ff       	call   c001eb7c <IDE::enableIRQs(unsigned char, bool)>
c0020334:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002033b:	59                   	pop    ecx
c002033c:	5e                   	pop    esi
c002033d:	50                   	push   eax
c002033e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020344:	e8 fd e5 ff ff       	call   c001e946 <IDE::prepareInterrupt(unsigned char)>
c0020349:	89 3c 24             	mov    DWORD PTR [esp],edi
c002034c:	e8 69 ff ff ff       	call   c00202ba <ATAPI::readyForCommand()>
c0020351:	83 c4 10             	add    esp,0x10
c0020354:	84 c0                	test   al,al
c0020356:	75 0a                	jne    c0020362 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x56>
c0020358:	bb 01 00 00 00       	mov    ebx,0x1
c002035d:	e9 5f 02 00 00       	jmp    c00205c1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0020362:	8b 87 74 01 00 00    	mov    eax,DWORD PTR [edi+0x174]
c0020368:	c1 e0 04             	shl    eax,0x4
c002036b:	0f b6 c0             	movzx  eax,al
c002036e:	50                   	push   eax
c002036f:	6a 06                	push   0x6
c0020371:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020378:	50                   	push   eax
c0020379:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002037f:	e8 e8 e5 ff ff       	call   c001e96c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020384:	6a 00                	push   0x0
c0020386:	6a 01                	push   0x1
c0020388:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002038f:	50                   	push   eax
c0020390:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020396:	e8 d1 e5 ff ff       	call   c001e96c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002039b:	83 c4 20             	add    esp,0x20
c002039e:	0f b6 c3             	movzx  eax,bl
c00203a1:	50                   	push   eax
c00203a2:	0f b6 df             	movzx  ebx,bh
c00203a5:	6a 04                	push   0x4
c00203a7:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00203ae:	50                   	push   eax
c00203af:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00203b5:	e8 b2 e5 ff ff       	call   c001e96c <IDE::write(unsigned char, unsigned char, unsigned char)>
c00203ba:	53                   	push   ebx
c00203bb:	6a 05                	push   0x5
c00203bd:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00203c4:	50                   	push   eax
c00203c5:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00203cb:	e8 9c e5 ff ff       	call   c001e96c <IDE::write(unsigned char, unsigned char, unsigned char)>
c00203d0:	83 c4 20             	add    esp,0x20
c00203d3:	68 a0 00 00 00       	push   0xa0
c00203d8:	6a 07                	push   0x7
c00203da:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00203e1:	50                   	push   eax
c00203e2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00203e8:	e8 7f e5 ff ff       	call   c001e96c <IDE::write(unsigned char, unsigned char, unsigned char)>
c00203ed:	83 c4 0c             	add    esp,0xc
c00203f0:	6a 01                	push   0x1
c00203f2:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00203f9:	50                   	push   eax
c00203fa:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020400:	e8 07 f3 ff ff       	call   c001f70c <IDE::polling(unsigned char, unsigned int)>
c0020405:	83 c4 10             	add    esp,0x10
c0020408:	0f b6 d8             	movzx  ebx,al
c002040b:	8b 87 70 01 00 00    	mov    eax,DWORD PTR [edi+0x170]
c0020411:	85 db                	test   ebx,ebx
c0020413:	74 20                	je     c0020435 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x129>
c0020415:	53                   	push   ebx
c0020416:	0f b6 c0             	movzx  eax,al
c0020419:	0f b6 97 74 01 00 00 	movzx  edx,BYTE PTR [edi+0x174]
c0020420:	52                   	push   edx
c0020421:	50                   	push   eax
c0020422:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020428:	e8 25 f2 ff ff       	call   c001f652 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c002042d:	83 c4 10             	add    esp,0x10
c0020430:	e9 8c 01 00 00       	jmp    c00205c1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0020435:	52                   	push   edx
c0020436:	0f b6 c0             	movzx  eax,al
c0020439:	52                   	push   edx
c002043a:	50                   	push   eax
c002043b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020441:	e8 14 e5 ff ff       	call   c001e95a <IDE::getBase(unsigned char)>
c0020446:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c002044a:	b9 06 00 00 00       	mov    ecx,0x6
c002044f:	89 c2                	mov    edx,eax
c0020451:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c0020454:	89 e8                	mov    eax,ebp
c0020456:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c002045a:	83 c4 10             	add    esp,0x10
c002045d:	0f b6 c0             	movzx  eax,al
c0020460:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020464:	85 db                	test   ebx,ebx
c0020466:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c002046c:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0020473:	0f 84 eb 00 00 00    	je     c0020564 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c0020479:	55                   	push   ebp
c002047a:	55                   	push   ebp
c002047b:	52                   	push   edx
c002047c:	50                   	push   eax
c002047d:	e8 5e e6 ff ff       	call   c001eae0 <IDE::waitInterrupt(unsigned char)>
c0020482:	83 c4 10             	add    esp,0x10
c0020485:	84 c0                	test   al,al
c0020487:	0f 84 cb fe ff ff    	je     c0020358 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x4c>
c002048d:	56                   	push   esi
c002048e:	56                   	push   esi
c002048f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020496:	50                   	push   eax
c0020497:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002049d:	e8 a4 e4 ff ff       	call   c001e946 <IDE::prepareInterrupt(unsigned char)>
c00204a2:	83 c4 0c             	add    esp,0xc
c00204a5:	6a 04                	push   0x4
c00204a7:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00204ae:	50                   	push   eax
c00204af:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00204b5:	e8 72 e5 ff ff       	call   c001ea2c <IDE::read(unsigned char, unsigned char)>
c00204ba:	83 c4 0c             	add    esp,0xc
c00204bd:	6a 05                	push   0x5
c00204bf:	89 c6                	mov    esi,eax
c00204c1:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00204c8:	50                   	push   eax
c00204c9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00204cf:	e8 58 e5 ff ff       	call   c001ea2c <IDE::read(unsigned char, unsigned char)>
c00204d4:	83 c4 10             	add    esp,0x10
c00204d7:	0f b6 e8             	movzx  ebp,al
c00204da:	89 f0                	mov    eax,esi
c00204dc:	c1 e5 08             	shl    ebp,0x8
c00204df:	0f b6 f0             	movzx  esi,al
c00204e2:	09 f5                	or     ebp,esi
c00204e4:	31 f6                	xor    esi,esi
c00204e6:	d1 fd                	sar    ebp,1
c00204e8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00204ed:	74 5c                	je     c002054b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x23f>
c00204ef:	39 ee                	cmp    esi,ebp
c00204f1:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c00204f7:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c00204fe:	75 0d                	jne    c002050d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x201>
c0020500:	8d 0c 36             	lea    ecx,[esi+esi*1]
c0020503:	01 4c 24 40          	add    DWORD PTR [esp+0x40],ecx
c0020507:	4b                   	dec    ebx
c0020508:	e9 57 ff ff ff       	jmp    c0020464 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x158>
c002050d:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0020511:	66 8b 0c 71          	mov    cx,WORD PTR [ecx+esi*2]
c0020515:	66 89 4c 24 0a       	mov    WORD PTR [esp+0xa],cx
c002051a:	51                   	push   ecx
c002051b:	51                   	push   ecx
c002051c:	52                   	push   edx
c002051d:	50                   	push   eax
c002051e:	e8 37 e4 ff ff       	call   c001e95a <IDE::getBase(unsigned char)>
c0020523:	89 c2                	mov    edx,eax
c0020525:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c002052a:	66 ef                	out    dx,ax
c002052c:	46                   	inc    esi
c002052d:	83 c4 10             	add    esp,0x10
c0020530:	eb bd                	jmp    c00204ef <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e3>
c0020532:	51                   	push   ecx
c0020533:	51                   	push   ecx
c0020534:	52                   	push   edx
c0020535:	50                   	push   eax
c0020536:	e8 1f e4 ff ff       	call   c001e95a <IDE::getBase(unsigned char)>
c002053b:	89 c2                	mov    edx,eax
c002053d:	66 ed                	in     ax,dx
c002053f:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0020543:	83 c4 10             	add    esp,0x10
c0020546:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c002054a:	46                   	inc    esi
c002054b:	39 ee                	cmp    esi,ebp
c002054d:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0020553:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002055a:	75 d6                	jne    c0020532 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x226>
c002055c:	01 f6                	add    esi,esi
c002055e:	01 74 24 40          	add    DWORD PTR [esp+0x40],esi
c0020562:	eb a3                	jmp    c0020507 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fb>
c0020564:	51                   	push   ecx
c0020565:	51                   	push   ecx
c0020566:	52                   	push   edx
c0020567:	50                   	push   eax
c0020568:	e8 73 e5 ff ff       	call   c001eae0 <IDE::waitInterrupt(unsigned char)>
c002056d:	83 c4 10             	add    esp,0x10
c0020570:	84 c0                	test   al,al
c0020572:	0f 84 e0 fd ff ff    	je     c0020358 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x4c>
c0020578:	52                   	push   edx
c0020579:	bb a0 86 01 00       	mov    ebx,0x186a0
c002057e:	52                   	push   edx
c002057f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020586:	50                   	push   eax
c0020587:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002058d:	e8 b4 e3 ff ff       	call   c001e946 <IDE::prepareInterrupt(unsigned char)>
c0020592:	83 c4 10             	add    esp,0x10
c0020595:	50                   	push   eax
c0020596:	50                   	push   eax
c0020597:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002059e:	50                   	push   eax
c002059f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00205a5:	e8 b0 e3 ff ff       	call   c001e95a <IDE::getBase(unsigned char)>
c00205aa:	8d 50 07             	lea    edx,[eax+0x7]
c00205ad:	ec                   	in     al,dx
c00205ae:	83 c4 10             	add    esp,0x10
c00205b1:	a8 88                	test   al,0x88
c00205b3:	74 0a                	je     c00205bf <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c00205b5:	4b                   	dec    ebx
c00205b6:	75 dd                	jne    c0020595 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c00205b8:	bb 02 00 00 00       	mov    ebx,0x2
c00205bd:	eb 02                	jmp    c00205c1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c00205bf:	31 db                	xor    ebx,ebx
c00205c1:	83 c4 1c             	add    esp,0x1c
c00205c4:	89 d8                	mov    eax,ebx
c00205c6:	5b                   	pop    ebx
c00205c7:	5e                   	pop    esi
c00205c8:	5f                   	pop    edi
c00205c9:	5d                   	pop    ebp
c00205ca:	c3                   	ret    
c00205cb:	90                   	nop

c00205cc <ATAPI::diskRemoved()>:
c00205cc:	53                   	push   ebx
c00205cd:	83 ec 14             	sub    esp,0x14
c00205d0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00205d4:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c00205db:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c00205e1:	e8 ec a3 fe ff       	call   c000a9d2 <LogicalDisk::unmount()>
c00205e6:	58                   	pop    eax
c00205e7:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c00205ed:	e8 be ad fe ff       	call   c000b3b0 <VCache::writeWriteBuffer()>
c00205f2:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c00205f8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00205fc:	83 c4 18             	add    esp,0x18
c00205ff:	5b                   	pop    ebx
c0020600:	e9 9b ad fe ff       	jmp    c000b3a0 <VCache::invalidateReadBuffer()>
c0020605:	90                   	nop

c0020606 <ATAPI::eject()>:
c0020606:	57                   	push   edi
c0020607:	b9 03 00 00 00       	mov    ecx,0x3
c002060c:	53                   	push   ebx
c002060d:	83 ec 14             	sub    esp,0x14
c0020610:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0020614:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0020618:	fc                   	cld    
c0020619:	31 c0                	xor    eax,eax
c002061b:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002061d:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0020622:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0020627:	50                   	push   eax
c0020628:	50                   	push   eax
c0020629:	6a 00                	push   0x0
c002062b:	6a 00                	push   0x0
c002062d:	6a 00                	push   0x0
c002062f:	6a 02                	push   0x2
c0020631:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0020635:	50                   	push   eax
c0020636:	53                   	push   ebx
c0020637:	e8 d0 fc ff ff       	call   c002030c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002063c:	83 c4 14             	add    esp,0x14
c002063f:	53                   	push   ebx
c0020640:	e8 87 ff ff ff       	call   c00205cc <ATAPI::diskRemoved()>
c0020645:	83 c4 24             	add    esp,0x24
c0020648:	31 c0                	xor    eax,eax
c002064a:	5b                   	pop    ebx
c002064b:	5f                   	pop    edi
c002064c:	c3                   	ret    
c002064d:	90                   	nop

c002064e <ATAPI::diskInserted()>:
c002064e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020652:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c0020659:	c3                   	ret    

c002065a <ATAPI::detectMedia()>:
c002065a:	56                   	push   esi
c002065b:	53                   	push   ebx
c002065c:	83 ec 28             	sub    esp,0x28
c002065f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0020663:	6a 0c                	push   0xc
c0020665:	6a 00                	push   0x0
c0020667:	8d 74 24 0e          	lea    esi,[esp+0xe]
c002066b:	56                   	push   esi
c002066c:	e8 7f fe fd ff       	call   c00004f0 <memset>
c0020671:	58                   	pop    eax
c0020672:	5a                   	pop    edx
c0020673:	6a 00                	push   0x0
c0020675:	6a 00                	push   0x0
c0020677:	6a 00                	push   0x0
c0020679:	6a 00                	push   0x0
c002067b:	56                   	push   esi
c002067c:	53                   	push   ebx
c002067d:	e8 8a fc ff ff       	call   c002030c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0020682:	83 c4 1c             	add    esp,0x1c
c0020685:	6a 0c                	push   0xc
c0020687:	6a 00                	push   0x0
c0020689:	56                   	push   esi
c002068a:	e8 61 fe fd ff       	call   c00004f0 <memset>
c002068f:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0020694:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0020699:	59                   	pop    ecx
c002069a:	58                   	pop    eax
c002069b:	6a 01                	push   0x1
c002069d:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c00206a1:	50                   	push   eax
c00206a2:	6a 00                	push   0x0
c00206a4:	6a 12                	push   0x12
c00206a6:	56                   	push   esi
c00206a7:	53                   	push   ebx
c00206a8:	e8 5f fc ff ff       	call   c002030c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00206ad:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c00206b1:	83 c4 20             	add    esp,0x20
c00206b4:	83 e0 7f             	and    eax,0x7f
c00206b7:	83 f8 70             	cmp    eax,0x70
c00206ba:	74 15                	je     c00206d1 <ATAPI::detectMedia()+0x77>
c00206bc:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00206c3:	75 0c                	jne    c00206d1 <ATAPI::detectMedia()+0x77>
c00206c5:	83 ec 0c             	sub    esp,0xc
c00206c8:	53                   	push   ebx
c00206c9:	e8 80 ff ff ff       	call   c002064e <ATAPI::diskInserted()>
c00206ce:	83 c4 10             	add    esp,0x10
c00206d1:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00206d5:	83 e0 0f             	and    eax,0xf
c00206d8:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c00206dd:	0f b6 c0             	movzx  eax,al
c00206e0:	75 19                	jne    c00206fb <ATAPI::detectMedia()+0xa1>
c00206e2:	83 f8 02             	cmp    eax,0x2
c00206e5:	75 14                	jne    c00206fb <ATAPI::detectMedia()+0xa1>
c00206e7:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00206ee:	74 24                	je     c0020714 <ATAPI::detectMedia()+0xba>
c00206f0:	83 ec 0c             	sub    esp,0xc
c00206f3:	53                   	push   ebx
c00206f4:	e8 d3 fe ff ff       	call   c00205cc <ATAPI::diskRemoved()>
c00206f9:	eb 16                	jmp    c0020711 <ATAPI::detectMedia()+0xb7>
c00206fb:	85 c0                	test   eax,eax
c00206fd:	75 15                	jne    c0020714 <ATAPI::detectMedia()+0xba>
c00206ff:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0020706:	75 0c                	jne    c0020714 <ATAPI::detectMedia()+0xba>
c0020708:	83 ec 0c             	sub    esp,0xc
c002070b:	53                   	push   ebx
c002070c:	e8 3d ff ff ff       	call   c002064e <ATAPI::diskInserted()>
c0020711:	83 c4 10             	add    esp,0x10
c0020714:	83 c4 24             	add    esp,0x24
c0020717:	5b                   	pop    ebx
c0020718:	5e                   	pop    esi
c0020719:	c3                   	ret    

c002071a <ATAPI::open(int, int, void*)>:
c002071a:	56                   	push   esi
c002071b:	53                   	push   ebx
c002071c:	50                   	push   eax
c002071d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0020721:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0020725:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020729:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c002072f:	c1 e0 06             	shl    eax,0x6
c0020732:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0020738:	01 d0                	add    eax,edx
c002073a:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c0020741:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c0020747:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c002074e:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0020758:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c002075f:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0020765:	6a 04                	push   0x4
c0020767:	6a 0c                	push   0xc
c0020769:	51                   	push   ecx
c002076a:	52                   	push   edx
c002076b:	e8 fc e1 ff ff       	call   c001e96c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020770:	90                   	nop
c0020771:	90                   	nop
c0020772:	6a 00                	push   0x0
c0020774:	6a 0c                	push   0xc
c0020776:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002077d:	50                   	push   eax
c002077e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0020784:	e8 e3 e1 ff ff       	call   c001e96c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020789:	83 c4 14             	add    esp,0x14
c002078c:	68 78 01 00 00       	push   0x178
c0020791:	e8 e6 f3 fe ff       	call   c000fb7c <malloc>
c0020796:	83 c4 0c             	add    esp,0xc
c0020799:	6a 00                	push   0x0
c002079b:	68 ff ff ff 7f       	push   0x7fffffff
c00207a0:	6a 00                	push   0x0
c00207a2:	6a 00                	push   0x0
c00207a4:	53                   	push   ebx
c00207a5:	68 c3 66 02 c0       	push   0xc00266c3
c00207aa:	89 c6                	mov    esi,eax
c00207ac:	50                   	push   eax
c00207ad:	e8 5e a0 fe ff       	call   c000a810 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c00207b2:	83 c4 14             	add    esp,0x14
c00207b5:	56                   	push   esi
c00207b6:	e8 15 a1 fe ff       	call   c000a8d0 <LogicalDisk::assignDriveLetter()>
c00207bb:	5a                   	pop    edx
c00207bc:	59                   	pop    ecx
c00207bd:	0f be c0             	movsx  eax,al
c00207c0:	50                   	push   eax
c00207c1:	68 08 65 02 c0       	push   0xc0026508
c00207c6:	e8 9b 67 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00207cb:	58                   	pop    eax
c00207cc:	5a                   	pop    edx
c00207cd:	56                   	push   esi
c00207ce:	53                   	push   ebx
c00207cf:	e8 22 92 fe ff       	call   c00099f6 <Device::addChild(Device*)>
c00207d4:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c00207da:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00207dd:	e8 60 96 fe ff       	call   c0009e42 <PhysicalDisk::startCache()>
c00207e2:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c00207e9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00207ec:	e8 69 fe ff ff       	call   c002065a <ATAPI::detectMedia()>
c00207f1:	83 c4 14             	add    esp,0x14
c00207f4:	31 c0                	xor    eax,eax
c00207f6:	5b                   	pop    ebx
c00207f7:	5e                   	pop    esi
c00207f8:	c3                   	ret    
c00207f9:	90                   	nop

c00207fa <ATAPI::read(unsigned long long, int, void*)>:
c00207fa:	55                   	push   ebp
c00207fb:	57                   	push   edi
c00207fc:	56                   	push   esi
c00207fd:	53                   	push   ebx
c00207fe:	83 ec 1c             	sub    esp,0x1c
c0020801:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0020805:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0020809:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c002080d:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0020814:	74 3c                	je     c0020852 <ATAPI::read(unsigned long long, int, void*)+0x58>
c0020816:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002081a:	b9 03 00 00 00       	mov    ecx,0x3
c002081f:	fc                   	cld    
c0020820:	31 c0                	xor    eax,eax
c0020822:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0020824:	89 e8                	mov    eax,ebp
c0020826:	0f ce                	bswap  esi
c0020828:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c002082c:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0020831:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c0020835:	50                   	push   eax
c0020836:	50                   	push   eax
c0020837:	55                   	push   ebp
c0020838:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002083c:	c1 e5 0b             	shl    ebp,0xb
c002083f:	6a 00                	push   0x0
c0020841:	55                   	push   ebp
c0020842:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0020846:	50                   	push   eax
c0020847:	53                   	push   ebx
c0020848:	e8 bf fa ff ff       	call   c002030c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002084d:	83 c4 20             	add    esp,0x20
c0020850:	eb 1a                	jmp    c002086c <ATAPI::read(unsigned long long, int, void*)+0x72>
c0020852:	83 ec 0c             	sub    esp,0xc
c0020855:	53                   	push   ebx
c0020856:	e8 ff fd ff ff       	call   c002065a <ATAPI::detectMedia()>
c002085b:	83 c4 10             	add    esp,0x10
c002085e:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0020865:	75 af                	jne    c0020816 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c0020867:	b8 02 00 00 00       	mov    eax,0x2
c002086c:	83 c4 1c             	add    esp,0x1c
c002086f:	5b                   	pop    ebx
c0020870:	5e                   	pop    esi
c0020871:	5f                   	pop    edi
c0020872:	5d                   	pop    ebp
c0020873:	c3                   	ret    

c0020874 <SATA::close(int, int, void*)>:
c0020874:	83 ec 0c             	sub    esp,0xc
c0020877:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002087b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0020881:	85 c0                	test   eax,eax
c0020883:	74 0c                	je     c0020891 <SATA::close(int, int, void*)+0x1d>
c0020885:	8b 10                	mov    edx,DWORD PTR [eax]
c0020887:	83 ec 0c             	sub    esp,0xc
c002088a:	50                   	push   eax
c002088b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002088e:	83 c4 10             	add    esp,0x10
c0020891:	31 c0                	xor    eax,eax
c0020893:	83 c4 0c             	add    esp,0xc
c0020896:	c3                   	ret    
c0020897:	90                   	nop

c0020898 <SATA::powerSaving(PowerSavingLevel)>:
c0020898:	c3                   	ret    
c0020899:	90                   	nop

c002089a <SATA::open(int, int, void*)>:
c002089a:	56                   	push   esi
c002089b:	53                   	push   ebx
c002089c:	83 ec 10             	sub    esp,0x10
c002089f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00208a3:	68 50 65 02 c0       	push   0xc0026550
c00208a8:	e8 b9 66 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00208ad:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00208b1:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c00208bb:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c00208c5:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c00208cb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00208cf:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c00208d9:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c00208e0:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c00208e6:	e8 99 f7 fe ff       	call   c0010084 <Phys::allocatePage()>
c00208eb:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c00208f1:	89 c6                	mov    esi,eax
c00208f3:	e8 8c f7 fe ff       	call   c0010084 <Phys::allocatePage()>
c00208f8:	81 c6 00 10 00 00    	add    esi,0x1000
c00208fe:	83 c4 10             	add    esp,0x10
c0020901:	39 c6                	cmp    esi,eax
c0020903:	74 10                	je     c0020915 <SATA::open(int, int, void*)+0x7b>
c0020905:	83 ec 0c             	sub    esp,0xc
c0020908:	68 5c 65 02 c0       	push   0xc002655c
c002090d:	e8 78 f5 fe ff       	call   c000fe8a <KePanic(char const*)>
c0020912:	83 c4 10             	add    esp,0x10
c0020915:	83 ec 0c             	sub    esp,0xc
c0020918:	6a 02                	push   0x2
c002091a:	e8 22 2a ff ff       	call   c0013341 <Virt::allocateKernelVirtualPages(int)>
c002091f:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0020925:	6a 03                	push   0x3
c0020927:	50                   	push   eax
c0020928:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c002092e:	ff 35 70 f2 02 c0    	push   DWORD PTR ds:0xc002f270
c0020934:	e8 e1 30 ff ff       	call   c0013a1a <VAS::mapPage(unsigned long, unsigned long, int)>
c0020939:	83 c4 14             	add    esp,0x14
c002093c:	53                   	push   ebx
c002093d:	e8 00 95 fe ff       	call   c0009e42 <PhysicalDisk::startCache()>
c0020942:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0020945:	e8 98 a3 fe ff       	call   c000ace2 <createPartitionsForDisk(PhysicalDisk*)>
c002094a:	83 c4 14             	add    esp,0x14
c002094d:	31 c0                	xor    eax,eax
c002094f:	5b                   	pop    ebx
c0020950:	5e                   	pop    esi
c0020951:	c3                   	ret    

c0020952 <SATA::SATA()>:
c0020952:	83 ec 0c             	sub    esp,0xc
c0020955:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020959:	83 ec 04             	sub    esp,0x4
c002095c:	68 00 02 00 00       	push   0x200
c0020961:	68 70 65 02 c0       	push   0xc0026570
c0020966:	50                   	push   eax
c0020967:	e8 6e 94 fe ff       	call   c0009dda <PhysicalDisk::PhysicalDisk(char const*, int)>
c002096c:	83 c4 10             	add    esp,0x10
c002096f:	ba e0 65 02 c0       	mov    edx,0xc00265e0
c0020974:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020978:	89 10                	mov    DWORD PTR [eax],edx
c002097a:	90                   	nop
c002097b:	83 c4 0c             	add    esp,0xc
c002097e:	c3                   	ret    
c002097f:	90                   	nop

c0020980 <SATA::access(unsigned long long, int, void*, bool)>:
c0020980:	55                   	push   ebp
c0020981:	57                   	push   edi
c0020982:	56                   	push   esi
c0020983:	53                   	push   ebx
c0020984:	83 ec 2c             	sub    esp,0x2c
c0020987:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c002098b:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c002098f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020993:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0020997:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002099b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c002099f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00209a3:	fa                   	cli    
c00209a4:	ff 05 50 fa 02 c0    	inc    DWORD PTR ds:0xc002fa50
c00209aa:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c00209af:	7e 10                	jle    c00209c1 <SATA::access(unsigned long long, int, void*, bool)+0x41>
c00209b1:	83 ec 0c             	sub    esp,0xc
c00209b4:	68 80 65 02 c0       	push   0xc0026580
c00209b9:	e8 cc f4 fe ff       	call   c000fe8a <KePanic(char const*)>
c00209be:	83 c4 10             	add    esp,0x10
c00209c1:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c00209c7:	8b ab 6c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x16c]
c00209cd:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c00209d3:	89 e8                	mov    eax,ebp
c00209d5:	c1 e0 07             	shl    eax,0x7
c00209d8:	01 d0                	add    eax,edx
c00209da:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c00209e4:	8d 45 02             	lea    eax,[ebp+0x2]
c00209e7:	51                   	push   ecx
c00209e8:	c1 e0 07             	shl    eax,0x7
c00209eb:	51                   	push   ecx
c00209ec:	01 d0                	add    eax,edx
c00209ee:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00209f2:	50                   	push   eax
c00209f3:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c00209f9:	e8 ee ed ff ff       	call   c001f7ec <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c00209fe:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020a02:	83 c4 10             	add    esp,0x10
c0020a05:	83 7c 24 0c ff       	cmp    DWORD PTR [esp+0xc],0xffffffff
c0020a0a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0020a0e:	0f 84 a6 01 00 00    	je     c0020bba <SATA::access(unsigned long long, int, void*, bool)+0x23a>
c0020a14:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0020a18:	c1 e0 09             	shl    eax,0x9
c0020a1b:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0020a20:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0020a24:	74 0e                	je     c0020a34 <SATA::access(unsigned long long, int, void*, bool)+0xb4>
c0020a26:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c0020a2c:	89 c1                	mov    ecx,eax
c0020a2e:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0020a32:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020a34:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0020a38:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c0020a3e:	8d 45 02             	lea    eax,[ebp+0x2]
c0020a41:	c1 e0 07             	shl    eax,0x7
c0020a44:	01 d0                	add    eax,edx
c0020a46:	8b 00                	mov    eax,DWORD PTR [eax]
c0020a48:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0020a4e:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0020a54:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0020a58:	c1 e1 05             	shl    ecx,0x5
c0020a5b:	01 c8                	add    eax,ecx
c0020a5d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0020a61:	83 e1 01             	and    ecx,0x1
c0020a64:	89 ce                	mov    esi,ecx
c0020a66:	8a 08                	mov    cl,BYTE PTR [eax]
c0020a68:	c1 e6 06             	shl    esi,0x6
c0020a6b:	83 e1 bf             	and    ecx,0xffffffbf
c0020a6e:	09 f1                	or     ecx,esi
c0020a70:	88 08                	mov    BYTE PTR [eax],cl
c0020a72:	8b 08                	mov    ecx,DWORD PTR [eax]
c0020a74:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c0020a7a:	81 c9 05 00 01 00    	or     ecx,0x10005
c0020a80:	89 08                	mov    DWORD PTR [eax],ecx
c0020a82:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c0020a88:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c0020a8e:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c0020a94:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c0020a97:	50                   	push   eax
c0020a98:	68 90 00 00 00       	push   0x90
c0020a9d:	6a 00                	push   0x0
c0020a9f:	56                   	push   esi
c0020aa0:	e8 4b fa fd ff       	call   c00004f0 <memset>
c0020aa5:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0020aab:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c0020ab1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020ab5:	83 c4 10             	add    esp,0x10
c0020ab8:	48                   	dec    eax
c0020ab9:	25 ff ff 3f 00       	and    eax,0x3fffff
c0020abe:	89 c1                	mov    ecx,eax
c0020ac0:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c0020ac6:	25 00 00 c0 ff       	and    eax,0xffc00000
c0020acb:	09 c8                	or     eax,ecx
c0020acd:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c0020ad3:	8a 86 8f 00 00 00    	mov    al,BYTE PTR [esi+0x8f]
c0020ad9:	83 c8 80             	or     eax,0xffffff80
c0020adc:	88 86 8f 00 00 00    	mov    BYTE PTR [esi+0x8f],al
c0020ae2:	66 8b 06             	mov    ax,WORD PTR [esi]
c0020ae5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020ae9:	25 00 7f 00 00       	and    eax,0x7f00
c0020aee:	0d 27 80 ff ff       	or     eax,0xffff8027
c0020af3:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0020af8:	66 89 06             	mov    WORD PTR [esi],ax
c0020afb:	b0 35                	mov    al,0x35
c0020afd:	75 02                	jne    c0020b01 <SATA::access(unsigned long long, int, void*, bool)+0x181>
c0020aff:	b0 25                	mov    al,0x25
c0020b01:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0020b04:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020b08:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c0020b0c:	66 89 46 04          	mov    WORD PTR [esi+0x4],ax
c0020b10:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020b14:	c1 e8 10             	shr    eax,0x10
c0020b17:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c0020b1a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020b1e:	c1 e8 18             	shr    eax,0x18
c0020b21:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c0020b24:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0020b28:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c0020b2b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0020b2f:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c0020b32:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0020b36:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c0020b3a:	89 ee                	mov    esi,ebp
c0020b3c:	31 c0                	xor    eax,eax
c0020b3e:	c1 e6 07             	shl    esi,0x7
c0020b41:	01 d6                	add    esi,edx
c0020b43:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c0020b49:	80 e1 88             	and    cl,0x88
c0020b4c:	74 0a                	je     c0020b58 <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c0020b4e:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0020b53:	74 0a                	je     c0020b5f <SATA::access(unsigned long long, int, void*, bool)+0x1df>
c0020b55:	40                   	inc    eax
c0020b56:	eb eb                	jmp    c0020b43 <SATA::access(unsigned long long, int, void*, bool)+0x1c3>
c0020b58:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0020b5d:	75 0a                	jne    c0020b69 <SATA::access(unsigned long long, int, void*, bool)+0x1e9>
c0020b5f:	83 ec 0c             	sub    esp,0xc
c0020b62:	68 b9 65 02 c0       	push   0xc00265b9
c0020b67:	eb 34                	jmp    c0020b9d <SATA::access(unsigned long long, int, void*, bool)+0x21d>
c0020b69:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0020b6d:	c1 e5 07             	shl    ebp,0x7
c0020b70:	b8 01 00 00 00       	mov    eax,0x1
c0020b75:	01 ea                	add    edx,ebp
c0020b77:	d3 e0                	shl    eax,cl
c0020b79:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c0020b7f:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c0020b85:	85 c8                	test   eax,ecx
c0020b87:	74 25                	je     c0020bae <SATA::access(unsigned long long, int, void*, bool)+0x22e>
c0020b89:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c0020b8f:	0f ba e1 1e          	bt     ecx,0x1e
c0020b93:	73 ea                	jae    c0020b7f <SATA::access(unsigned long long, int, void*, bool)+0x1ff>
c0020b95:	83 ec 0c             	sub    esp,0xc
c0020b98:	68 c7 65 02 c0       	push   0xc00265c7
c0020b9d:	e8 c4 63 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0020ba2:	f0 ff 0d 50 fa 02 c0 	lock dec DWORD PTR ds:0xc002fa50
c0020ba9:	83 c4 10             	add    esp,0x10
c0020bac:	eb 13                	jmp    c0020bc1 <SATA::access(unsigned long long, int, void*, bool)+0x241>
c0020bae:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c0020bb4:	0f ba e0 1e          	bt     eax,0x1e
c0020bb8:	73 18                	jae    c0020bd2 <SATA::access(unsigned long long, int, void*, bool)+0x252>
c0020bba:	f0 ff 0d 50 fa 02 c0 	lock dec DWORD PTR ds:0xc002fa50
c0020bc1:	83 3d 50 fa 02 c0 00 	cmp    DWORD PTR ds:0xc002fa50,0x0
c0020bc8:	75 01                	jne    c0020bcb <SATA::access(unsigned long long, int, void*, bool)+0x24b>
c0020bca:	fb                   	sti    
c0020bcb:	b8 01 00 00 00       	mov    eax,0x1
c0020bd0:	eb 2c                	jmp    c0020bfe <SATA::access(unsigned long long, int, void*, bool)+0x27e>
c0020bd2:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0020bd7:	75 10                	jne    c0020be9 <SATA::access(unsigned long long, int, void*, bool)+0x269>
c0020bd9:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c0020bdf:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0020be3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0020be7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020be9:	f0 ff 0d 50 fa 02 c0 	lock dec DWORD PTR ds:0xc002fa50
c0020bf0:	a1 50 fa 02 c0       	mov    eax,ds:0xc002fa50
c0020bf5:	85 c0                	test   eax,eax
c0020bf7:	75 03                	jne    c0020bfc <SATA::access(unsigned long long, int, void*, bool)+0x27c>
c0020bf9:	fb                   	sti    
c0020bfa:	eb 02                	jmp    c0020bfe <SATA::access(unsigned long long, int, void*, bool)+0x27e>
c0020bfc:	31 c0                	xor    eax,eax
c0020bfe:	83 c4 2c             	add    esp,0x2c
c0020c01:	5b                   	pop    ebx
c0020c02:	5e                   	pop    esi
c0020c03:	5f                   	pop    edi
c0020c04:	5d                   	pop    ebp
c0020c05:	c3                   	ret    

c0020c06 <SATA::read(unsigned long long, int, void*)>:
c0020c06:	57                   	push   edi
c0020c07:	b8 04 00 00 00       	mov    eax,0x4
c0020c0c:	56                   	push   esi
c0020c0d:	53                   	push   ebx
c0020c0e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020c12:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0020c16:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0020c1a:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0020c1e:	8d 7a ff             	lea    edi,[edx-0x1]
c0020c21:	81 ff fe 00 00 00    	cmp    edi,0xfe
c0020c27:	77 25                	ja     c0020c4e <SATA::read(unsigned long long, int, void*)+0x48>
c0020c29:	85 f6                	test   esi,esi
c0020c2b:	b8 06 00 00 00       	mov    eax,0x6
c0020c30:	74 1c                	je     c0020c4e <SATA::read(unsigned long long, int, void*)+0x48>
c0020c32:	50                   	push   eax
c0020c33:	50                   	push   eax
c0020c34:	6a 00                	push   0x0
c0020c36:	56                   	push   esi
c0020c37:	52                   	push   edx
c0020c38:	53                   	push   ebx
c0020c39:	51                   	push   ecx
c0020c3a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020c3e:	e8 3d fd ff ff       	call   c0020980 <SATA::access(unsigned long long, int, void*, bool)>
c0020c43:	83 c4 20             	add    esp,0x20
c0020c46:	85 c0                	test   eax,eax
c0020c48:	0f 95 c0             	setne  al
c0020c4b:	0f b6 c0             	movzx  eax,al
c0020c4e:	5b                   	pop    ebx
c0020c4f:	5e                   	pop    esi
c0020c50:	5f                   	pop    edi
c0020c51:	c3                   	ret    

c0020c52 <SATA::write(unsigned long long, int, void*)>:
c0020c52:	55                   	push   ebp
c0020c53:	b8 04 00 00 00       	mov    eax,0x4
c0020c58:	57                   	push   edi
c0020c59:	56                   	push   esi
c0020c5a:	53                   	push   ebx
c0020c5b:	83 ec 0c             	sub    esp,0xc
c0020c5e:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0020c62:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0020c66:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0020c6a:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0020c6e:	8d 73 ff             	lea    esi,[ebx-0x1]
c0020c71:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0020c77:	77 3d                	ja     c0020cb6 <SATA::write(unsigned long long, int, void*)+0x64>
c0020c79:	85 ed                	test   ebp,ebp
c0020c7b:	b8 06 00 00 00       	mov    eax,0x6
c0020c80:	74 34                	je     c0020cb6 <SATA::write(unsigned long long, int, void*)+0x64>
c0020c82:	c1 e3 09             	shl    ebx,0x9
c0020c85:	01 eb                	add    ebx,ebp
c0020c87:	50                   	push   eax
c0020c88:	89 d6                	mov    esi,edx
c0020c8a:	50                   	push   eax
c0020c8b:	83 c6 01             	add    esi,0x1
c0020c8e:	6a 01                	push   0x1
c0020c90:	89 cf                	mov    edi,ecx
c0020c92:	55                   	push   ebp
c0020c93:	83 d7 00             	adc    edi,0x0
c0020c96:	6a 01                	push   0x1
c0020c98:	81 c5 00 02 00 00    	add    ebp,0x200
c0020c9e:	51                   	push   ecx
c0020c9f:	52                   	push   edx
c0020ca0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0020ca4:	e8 d7 fc ff ff       	call   c0020980 <SATA::access(unsigned long long, int, void*, bool)>
c0020ca9:	83 c4 20             	add    esp,0x20
c0020cac:	39 dd                	cmp    ebp,ebx
c0020cae:	89 f2                	mov    edx,esi
c0020cb0:	89 f9                	mov    ecx,edi
c0020cb2:	75 d3                	jne    c0020c87 <SATA::write(unsigned long long, int, void*)+0x35>
c0020cb4:	31 c0                	xor    eax,eax
c0020cb6:	83 c4 0c             	add    esp,0xc
c0020cb9:	5b                   	pop    ebx
c0020cba:	5e                   	pop    esi
c0020cbb:	5f                   	pop    edi
c0020cbc:	5d                   	pop    ebp
c0020cbd:	c3                   	ret    

c0020cbe <SATAPI::write(unsigned long long, int, void*)>:
c0020cbe:	b8 03 00 00 00       	mov    eax,0x3
c0020cc3:	c3                   	ret    

c0020cc4 <SATAPI::close(int, int, void*)>:
c0020cc4:	83 ec 0c             	sub    esp,0xc
c0020cc7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020ccb:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0020cd1:	85 c0                	test   eax,eax
c0020cd3:	74 0c                	je     c0020ce1 <SATAPI::close(int, int, void*)+0x1d>
c0020cd5:	8b 10                	mov    edx,DWORD PTR [eax]
c0020cd7:	83 ec 0c             	sub    esp,0xc
c0020cda:	50                   	push   eax
c0020cdb:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0020cde:	83 c4 10             	add    esp,0x10
c0020ce1:	31 c0                	xor    eax,eax
c0020ce3:	83 c4 0c             	add    esp,0xc
c0020ce6:	c3                   	ret    
c0020ce7:	90                   	nop

c0020ce8 <SATAPI::SATAPI()>:
c0020ce8:	83 ec 0c             	sub    esp,0xc
c0020ceb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020cef:	83 ec 04             	sub    esp,0x4
c0020cf2:	68 00 08 00 00       	push   0x800
c0020cf7:	68 10 66 02 c0       	push   0xc0026610
c0020cfc:	50                   	push   eax
c0020cfd:	e8 d8 90 fe ff       	call   c0009dda <PhysicalDisk::PhysicalDisk(char const*, int)>
c0020d02:	83 c4 10             	add    esp,0x10
c0020d05:	ba 04 67 02 c0       	mov    edx,0xc0026704
c0020d0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020d0e:	89 10                	mov    DWORD PTR [eax],edx
c0020d10:	90                   	nop
c0020d11:	83 c4 0c             	add    esp,0xc
c0020d14:	c3                   	ret    
c0020d15:	90                   	nop

c0020d16 <SATAPI::diskRemoved()>:
c0020d16:	c3                   	ret    
c0020d17:	90                   	nop

c0020d18 <SATAPI::diskInserted()>:
c0020d18:	83 ec 18             	sub    esp,0x18
c0020d1b:	68 1c 66 02 c0       	push   0xc002661c
c0020d20:	e8 41 62 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0020d25:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020d29:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c0020d30:	83 c4 1c             	add    esp,0x1c
c0020d33:	c3                   	ret    

c0020d34 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c0020d34:	55                   	push   ebp
c0020d35:	57                   	push   edi
c0020d36:	56                   	push   esi
c0020d37:	53                   	push   ebx
c0020d38:	83 ec 34             	sub    esp,0x34
c0020d3b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0020d3f:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0020d43:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020d47:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0020d4b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0020d4f:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c0020d55:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0020d5b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0020d5f:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c0020d65:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020d69:	83 c0 02             	add    eax,0x2
c0020d6c:	c1 e0 07             	shl    eax,0x7
c0020d6f:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0020d73:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020d77:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020d7b:	c1 e0 07             	shl    eax,0x7
c0020d7e:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0020d82:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020d86:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0020d90:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0020d94:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0020d9a:	e8 4d ea ff ff       	call   c001f7ec <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0020d9f:	83 c4 10             	add    esp,0x10
c0020da2:	89 c2                	mov    edx,eax
c0020da4:	b8 01 00 00 00       	mov    eax,0x1
c0020da9:	83 fa ff             	cmp    edx,0xffffffff
c0020dac:	0f 84 63 02 00 00    	je     c0021015 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2e1>
c0020db2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0020db6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020dba:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0020dc0:	8b 00                	mov    eax,DWORD PTR [eax]
c0020dc2:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0020dc8:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0020dce:	89 d1                	mov    ecx,edx
c0020dd0:	c1 e1 05             	shl    ecx,0x5
c0020dd3:	01 c8                	add    eax,ecx
c0020dd5:	8b 08                	mov    ecx,DWORD PTR [eax]
c0020dd7:	81 e1 80 ff 00 00    	and    ecx,0xff80
c0020ddd:	81 c9 25 00 01 00    	or     ecx,0x10025
c0020de3:	89 08                	mov    DWORD PTR [eax],ecx
c0020de5:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0020deb:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0020df1:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0020df7:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0020dfa:	50                   	push   eax
c0020dfb:	68 90 00 00 00       	push   0x90
c0020e00:	6a 00                	push   0x0
c0020e02:	53                   	push   ebx
c0020e03:	e8 e8 f6 fd ff       	call   c00004f0 <memset>
c0020e08:	8d 7b 40             	lea    edi,[ebx+0x40]
c0020e0b:	b9 0c 00 00 00       	mov    ecx,0xc
c0020e10:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0020e14:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020e16:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c0020e1c:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c0020e20:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0020e24:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0020e2a:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0020e2e:	48                   	dec    eax
c0020e2f:	25 ff ff 3f 00       	and    eax,0x3fffff
c0020e34:	89 c1                	mov    ecx,eax
c0020e36:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0020e3c:	25 00 00 c0 ff       	and    eax,0xffc00000
c0020e41:	09 c8                	or     eax,ecx
c0020e43:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0020e49:	8a 83 8f 00 00 00    	mov    al,BYTE PTR [ebx+0x8f]
c0020e4f:	83 c8 80             	or     eax,0xffffff80
c0020e52:	88 83 8f 00 00 00    	mov    BYTE PTR [ebx+0x8f],al
c0020e58:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0020e5b:	25 00 7f 00 00       	and    eax,0x7f00
c0020e60:	0d 27 80 ff ff       	or     eax,0xffff8027
c0020e65:	66 89 03             	mov    WORD PTR [ebx],ax
c0020e68:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020e6c:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0020e70:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020e74:	c1 e8 10             	shr    eax,0x10
c0020e77:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0020e7a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020e7e:	c1 e8 18             	shr    eax,0x18
c0020e81:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0020e84:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0020e88:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0020e8b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020e8f:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0020e92:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020e96:	83 c4 10             	add    esp,0x10
c0020e99:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020e9d:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0020ea1:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0020ea5:	31 c0                	xor    eax,eax
c0020ea7:	8b 8b 20 01 00 00    	mov    ecx,DWORD PTR [ebx+0x120]
c0020ead:	80 e1 88             	and    cl,0x88
c0020eb0:	74 0a                	je     c0020ebc <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x188>
c0020eb2:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0020eb7:	74 0a                	je     c0020ec3 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x18f>
c0020eb9:	40                   	inc    eax
c0020eba:	eb eb                	jmp    c0020ea7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x173>
c0020ebc:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0020ec1:	75 43                	jne    c0020f06 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d2>
c0020ec3:	83 ec 0c             	sub    esp,0xc
c0020ec6:	68 34 66 02 c0       	push   0xc0026634
c0020ecb:	e8 96 60 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0020ed0:	58                   	pop    eax
c0020ed1:	5a                   	pop    edx
c0020ed2:	68 49 66 02 c0       	push   0xc0026649
c0020ed7:	ff 35 d4 f1 02 c0    	push   DWORD PTR ds:0xc002f1d4
c0020edd:	e8 44 18 ff ff       	call   c0012726 <VgaText::puts(char const*)>
c0020ee2:	59                   	pop    ecx
c0020ee3:	5b                   	pop    ebx
c0020ee4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0020ee8:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0020eee:	e8 93 e9 ff ff       	call   c001f886 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0020ef3:	5e                   	pop    esi
c0020ef4:	5f                   	pop    edi
c0020ef5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0020ef9:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0020eff:	e8 62 e9 ff ff       	call   c001f866 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c0020f04:	eb 48                	jmp    c0020f4e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21a>
c0020f06:	b8 01 00 00 00       	mov    eax,0x1
c0020f0b:	88 d1                	mov    cl,dl
c0020f0d:	d3 e0                	shl    eax,cl
c0020f0f:	be a8 e4 ff ff       	mov    esi,0xffffe4a8
c0020f14:	89 83 38 01 00 00    	mov    DWORD PTR [ebx+0x138],eax
c0020f1a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0020f1e:	89 c7                	mov    edi,eax
c0020f20:	c1 e3 07             	shl    ebx,0x7
c0020f23:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c0020f27:	8b 83 38 01 00 00    	mov    eax,DWORD PTR [ebx+0x138]
c0020f2d:	85 c7                	test   edi,eax
c0020f2f:	8b 83 10 01 00 00    	mov    eax,DWORD PTR [ebx+0x110]
c0020f35:	0f 84 a7 00 00 00    	je     c0020fe2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2ae>
c0020f3b:	0f ba e0 1e          	bt     eax,0x1e
c0020f3f:	73 1a                	jae    c0020f5b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x227>
c0020f41:	83 ec 0c             	sub    esp,0xc
c0020f44:	68 5b 66 02 c0       	push   0xc002665b
c0020f49:	e8 18 60 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0020f4e:	83 c4 10             	add    esp,0x10
c0020f51:	b8 01 00 00 00       	mov    eax,0x1
c0020f56:	e9 ba 00 00 00       	jmp    c0021015 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2e1>
c0020f5b:	8d 86 70 17 00 00    	lea    eax,[esi+0x1770]
c0020f61:	83 f8 0d             	cmp    eax,0xd
c0020f64:	77 0b                	ja     c0020f71 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x23d>
c0020f66:	50                   	push   eax
c0020f67:	50                   	push   eax
c0020f68:	6a 00                	push   0x0
c0020f6a:	68 c8 00 00 00       	push   0xc8
c0020f6f:	eb 2a                	jmp    c0020f9b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x267>
c0020f71:	8d 86 88 13 00 00    	lea    eax,[esi+0x1388]
c0020f77:	83 f8 0d             	cmp    eax,0xd
c0020f7a:	77 0b                	ja     c0020f87 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x253>
c0020f7c:	51                   	push   ecx
c0020f7d:	51                   	push   ecx
c0020f7e:	6a 00                	push   0x0
c0020f80:	68 58 02 00 00       	push   0x258
c0020f85:	eb 14                	jmp    c0020f9b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x267>
c0020f87:	8d 86 a0 0f 00 00    	lea    eax,[esi+0xfa0]
c0020f8d:	83 f8 06             	cmp    eax,0x6
c0020f90:	77 11                	ja     c0020fa3 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x26f>
c0020f92:	52                   	push   edx
c0020f93:	52                   	push   edx
c0020f94:	6a 00                	push   0x0
c0020f96:	68 dc 05 00 00       	push   0x5dc
c0020f9b:	e8 20 63 ff ff       	call   c00172c0 <milliTenthSleep(unsigned long long)>
c0020fa0:	83 c4 10             	add    esp,0x10
c0020fa3:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0020fa7:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c0020faa:	75 06                	jne    c0020fb2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x27e>
c0020fac:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c0020fb0:	74 16                	je     c0020fc8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x294>
c0020fb2:	83 fe 06             	cmp    esi,0x6
c0020fb5:	77 11                	ja     c0020fc8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x294>
c0020fb7:	50                   	push   eax
c0020fb8:	50                   	push   eax
c0020fb9:	6a 00                	push   0x0
c0020fbb:	68 c4 09 00 00       	push   0x9c4
c0020fc0:	e8 fb 62 ff ff       	call   c00172c0 <milliTenthSleep(unsigned long long)>
c0020fc5:	83 c4 10             	add    esp,0x10
c0020fc8:	46                   	inc    esi
c0020fc9:	81 fe b9 0b 00 00    	cmp    esi,0xbb9
c0020fcf:	0f 85 52 ff ff ff    	jne    c0020f27 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f3>
c0020fd5:	83 ec 0c             	sub    esp,0xc
c0020fd8:	68 6e 66 02 c0       	push   0xc002666e
c0020fdd:	e9 67 ff ff ff       	jmp    c0020f49 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x215>
c0020fe2:	0f ba e0 1e          	bt     eax,0x1e
c0020fe6:	73 0d                	jae    c0020ff5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2c1>
c0020fe8:	83 ec 0c             	sub    esp,0xc
c0020feb:	68 82 66 02 c0       	push   0xc0026682
c0020ff0:	e9 54 ff ff ff       	jmp    c0020f49 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x215>
c0020ff5:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0020ffa:	74 17                	je     c0021013 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2df>
c0020ffc:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c0021001:	74 10                	je     c0021013 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2df>
c0021003:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c0021009:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c002100d:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0021011:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0021013:	31 c0                	xor    eax,eax
c0021015:	83 c4 2c             	add    esp,0x2c
c0021018:	5b                   	pop    ebx
c0021019:	5e                   	pop    esi
c002101a:	5f                   	pop    edi
c002101b:	5d                   	pop    ebp
c002101c:	c3                   	ret    
c002101d:	90                   	nop

c002101e <SATAPI::eject()>:
c002101e:	57                   	push   edi
c002101f:	b9 03 00 00 00       	mov    ecx,0x3
c0021024:	83 ec 18             	sub    esp,0x18
c0021027:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002102b:	fc                   	cld    
c002102c:	31 c0                	xor    eax,eax
c002102e:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0021030:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0021035:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c002103a:	50                   	push   eax
c002103b:	6a 00                	push   0x0
c002103d:	6a 00                	push   0x0
c002103f:	6a 00                	push   0x0
c0021041:	6a 00                	push   0x0
c0021043:	6a 02                	push   0x2
c0021045:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021049:	50                   	push   eax
c002104a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002104e:	e8 e1 fc ff ff       	call   c0020d34 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0021053:	83 c4 38             	add    esp,0x38
c0021056:	31 c0                	xor    eax,eax
c0021058:	5f                   	pop    edi
c0021059:	c3                   	ret    

c002105a <SATAPI::detectMedia()>:
c002105a:	53                   	push   ebx
c002105b:	83 ec 14             	sub    esp,0x14
c002105e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0021062:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c0021068:	e8 43 a3 fe ff       	call   c000b3b0 <VCache::writeWriteBuffer()>
c002106d:	59                   	pop    ecx
c002106e:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c0021074:	e8 27 a3 fe ff       	call   c000b3a0 <VCache::invalidateReadBuffer()>
c0021079:	c7 04 24 97 66 02 c0 	mov    DWORD PTR [esp],0xc0026697
c0021080:	e8 e1 5e fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0021085:	83 c4 10             	add    esp,0x10
c0021088:	31 c0                	xor    eax,eax
c002108a:	8b 14 85 e0 ca 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd3520]
c0021091:	85 d2                	test   edx,edx
c0021093:	74 0f                	je     c00210a4 <SATAPI::detectMedia()+0x4a>
c0021095:	39 9a 6c 01 00 00    	cmp    DWORD PTR [edx+0x16c],ebx
c002109b:	75 07                	jne    c00210a4 <SATAPI::detectMedia()+0x4a>
c002109d:	c6 82 70 01 00 00 01 	mov    BYTE PTR [edx+0x170],0x1
c00210a4:	40                   	inc    eax
c00210a5:	83 f8 1a             	cmp    eax,0x1a
c00210a8:	75 e0                	jne    c002108a <SATAPI::detectMedia()+0x30>
c00210aa:	83 c4 08             	add    esp,0x8
c00210ad:	5b                   	pop    ebx
c00210ae:	c3                   	ret    
c00210af:	90                   	nop

c00210b0 <SATAPI::open(int, int, void*)>:
c00210b0:	56                   	push   esi
c00210b1:	53                   	push   ebx
c00210b2:	51                   	push   ecx
c00210b3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00210b7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00210bb:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c00210c5:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c00210cb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00210cf:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c00210d9:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c00210e3:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c00210ea:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c00210f0:	e8 8f ef fe ff       	call   c0010084 <Phys::allocatePage()>
c00210f5:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c00210fb:	89 c6                	mov    esi,eax
c00210fd:	e8 82 ef fe ff       	call   c0010084 <Phys::allocatePage()>
c0021102:	81 c6 00 10 00 00    	add    esi,0x1000
c0021108:	39 c6                	cmp    esi,eax
c002110a:	74 10                	je     c002111c <SATAPI::open(int, int, void*)+0x6c>
c002110c:	83 ec 0c             	sub    esp,0xc
c002110f:	68 ac 66 02 c0       	push   0xc00266ac
c0021114:	e8 71 ed fe ff       	call   c000fe8a <KePanic(char const*)>
c0021119:	83 c4 10             	add    esp,0x10
c002111c:	83 ec 0c             	sub    esp,0xc
c002111f:	6a 02                	push   0x2
c0021121:	e8 1b 22 ff ff       	call   c0013341 <Virt::allocateKernelVirtualPages(int)>
c0021126:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c002112c:	6a 03                	push   0x3
c002112e:	50                   	push   eax
c002112f:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c0021135:	ff 35 70 f2 02 c0    	push   DWORD PTR ds:0xc002f270
c002113b:	e8 da 28 ff ff       	call   c0013a1a <VAS::mapPage(unsigned long, unsigned long, int)>
c0021140:	83 c4 14             	add    esp,0x14
c0021143:	68 78 01 00 00       	push   0x178
c0021148:	e8 2f ea fe ff       	call   c000fb7c <malloc>
c002114d:	83 c4 0c             	add    esp,0xc
c0021150:	6a 00                	push   0x0
c0021152:	68 ff ff ff 7f       	push   0x7fffffff
c0021157:	6a 00                	push   0x0
c0021159:	6a 00                	push   0x0
c002115b:	53                   	push   ebx
c002115c:	68 c2 66 02 c0       	push   0xc00266c2
c0021161:	89 c6                	mov    esi,eax
c0021163:	50                   	push   eax
c0021164:	e8 a7 96 fe ff       	call   c000a810 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0021169:	83 c4 14             	add    esp,0x14
c002116c:	56                   	push   esi
c002116d:	e8 5e 97 fe ff       	call   c000a8d0 <LogicalDisk::assignDriveLetter()>
c0021172:	5a                   	pop    edx
c0021173:	59                   	pop    ecx
c0021174:	0f be c0             	movsx  eax,al
c0021177:	50                   	push   eax
c0021178:	68 08 65 02 c0       	push   0xc0026508
c002117d:	e8 e4 5d fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0021182:	58                   	pop    eax
c0021183:	5a                   	pop    edx
c0021184:	56                   	push   esi
c0021185:	53                   	push   ebx
c0021186:	e8 6b 88 fe ff       	call   c00099f6 <Device::addChild(Device*)>
c002118b:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c0021191:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0021194:	e8 a9 8c fe ff       	call   c0009e42 <PhysicalDisk::startCache()>
c0021199:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c00211a0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00211a3:	e8 b2 fe ff ff       	call   c002105a <SATAPI::detectMedia()>
c00211a8:	83 c4 14             	add    esp,0x14
c00211ab:	31 c0                	xor    eax,eax
c00211ad:	5b                   	pop    ebx
c00211ae:	5e                   	pop    esi
c00211af:	c3                   	ret    

c00211b0 <SATAPI::read(unsigned long long, int, void*)>:
c00211b0:	55                   	push   ebp
c00211b1:	57                   	push   edi
c00211b2:	56                   	push   esi
c00211b3:	53                   	push   ebx
c00211b4:	83 ec 3c             	sub    esp,0x3c
c00211b7:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c00211bb:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00211bf:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00211c3:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c00211c7:	83 fd 04             	cmp    ebp,0x4
c00211ca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00211ce:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00211d2:	7e 10                	jle    c00211e4 <SATAPI::read(unsigned long long, int, void*)+0x34>
c00211d4:	83 ec 0c             	sub    esp,0xc
c00211d7:	68 d0 66 02 c0       	push   0xc00266d0
c00211dc:	e8 a9 ec fe ff       	call   c000fe8a <KePanic(char const*)>
c00211e1:	83 c4 10             	add    esp,0x10
c00211e4:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c00211ea:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c00211f0:	51                   	push   ecx
c00211f1:	50                   	push   eax
c00211f2:	83 c0 02             	add    eax,0x2
c00211f5:	c1 e0 07             	shl    eax,0x7
c00211f8:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c00211fe:	50                   	push   eax
c00211ff:	52                   	push   edx
c0021200:	e8 ab e6 ff ff       	call   c001f8b0 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0021205:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0021209:	b9 03 00 00 00       	mov    ecx,0x3
c002120e:	fc                   	cld    
c002120f:	31 c0                	xor    eax,eax
c0021211:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0021213:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c0021218:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c002121d:	83 c4 0c             	add    esp,0xc
c0021220:	6a 00                	push   0x0
c0021222:	6a 00                	push   0x0
c0021224:	6a 00                	push   0x0
c0021226:	6a 00                	push   0x0
c0021228:	6a 02                	push   0x2
c002122a:	8d 44 24 30          	lea    eax,[esp+0x30]
c002122e:	50                   	push   eax
c002122f:	53                   	push   ebx
c0021230:	e8 ff fa ff ff       	call   c0020d34 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0021235:	83 c4 20             	add    esp,0x20
c0021238:	85 c0                	test   eax,eax
c002123a:	89 c6                	mov    esi,eax
c002123c:	75 46                	jne    c0021284 <SATAPI::read(unsigned long long, int, void*)+0xd4>
c002123e:	8d 7c 24 24          	lea    edi,[esp+0x24]
c0021242:	b9 03 00 00 00       	mov    ecx,0x3
c0021247:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0021249:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002124d:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c0021252:	0f c8                	bswap  eax
c0021254:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c0021258:	89 e8                	mov    eax,ebp
c002125a:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c002125e:	50                   	push   eax
c002125f:	55                   	push   ebp
c0021260:	ff 74 24 68          	push   DWORD PTR [esp+0x68]
c0021264:	c1 e5 0b             	shl    ebp,0xb
c0021267:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002126b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002126f:	55                   	push   ebp
c0021270:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0021274:	50                   	push   eax
c0021275:	53                   	push   ebx
c0021276:	e8 b9 fa ff ff       	call   c0020d34 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c002127b:	83 c4 20             	add    esp,0x20
c002127e:	85 c0                	test   eax,eax
c0021280:	89 c6                	mov    esi,eax
c0021282:	74 0c                	je     c0021290 <SATAPI::read(unsigned long long, int, void*)+0xe0>
c0021284:	83 ec 0c             	sub    esp,0xc
c0021287:	53                   	push   ebx
c0021288:	e8 cd fd ff ff       	call   c002105a <SATAPI::detectMedia()>
c002128d:	83 c4 10             	add    esp,0x10
c0021290:	83 c4 3c             	add    esp,0x3c
c0021293:	89 f0                	mov    eax,esi
c0021295:	5b                   	pop    ebx
c0021296:	5e                   	pop    esi
c0021297:	5f                   	pop    edi
c0021298:	5d                   	pop    ebp
c0021299:	c3                   	ret    
c002129a:	66 90                	xchg   ax,ax

c002129c <APICTimer::close(int, int, void*)>:
c002129c:	b8 00 00 00 00       	mov    eax,0x0
c00212a1:	c3                   	ret    
c00212a2:	66 90                	xchg   ax,ax

c00212a4 <apicTimerHandler(regs*, void*)>:
c00212a4:	83 ec 0c             	sub    esp,0xc
c00212a7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00212ab:	8b 08                	mov    ecx,DWORD PTR [eax]
c00212ad:	b8 10 27 00 00       	mov    eax,0x2710
c00212b2:	ba 00 00 00 00       	mov    edx,0x0
c00212b7:	f7 f1                	div    ecx
c00212b9:	83 ec 0c             	sub    esp,0xc
c00212bc:	50                   	push   eax
c00212bd:	e8 0a 9e fe ff       	call   c000b0cc <timerHandler(unsigned int)>
c00212c2:	83 c4 10             	add    esp,0x10
c00212c5:	90                   	nop
c00212c6:	83 c4 0c             	add    esp,0xc
c00212c9:	c3                   	ret    
c00212ca:	66 90                	xchg   ax,ax

c00212cc <APICTimer::open(int, int, void*)>:
c00212cc:	83 ec 0c             	sub    esp,0xc
c00212cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00212d3:	8b 00                	mov    eax,DWORD PTR [eax]
c00212d5:	83 c0 24             	add    eax,0x24
c00212d8:	8b 00                	mov    eax,DWORD PTR [eax]
c00212da:	83 ec 08             	sub    esp,0x8
c00212dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00212e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00212e5:	ff d0                	call   eax
c00212e7:	83 c4 10             	add    esp,0x10
c00212ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00212ee:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00212f2:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00212f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00212fc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0021300:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c0021306:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002130a:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0021310:	83 ec 0c             	sub    esp,0xc
c0021313:	51                   	push   ecx
c0021314:	6a 01                	push   0x1
c0021316:	68 a4 12 02 c0       	push   0xc00212a4
c002131b:	52                   	push   edx
c002131c:	50                   	push   eax
c002131d:	e8 80 86 fe ff       	call   c00099a2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0021322:	83 c4 20             	add    esp,0x20
c0021325:	89 c2                	mov    edx,eax
c0021327:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002132b:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0021331:	b8 00 00 00 00       	mov    eax,0x0
c0021336:	83 c4 0c             	add    esp,0xc
c0021339:	c3                   	ret    
c002133a:	66 90                	xchg   ax,ax

c002133c <APICTimer::write(int)>:
c002133c:	83 ec 0c             	sub    esp,0xc
c002133f:	83 ec 0c             	sub    esp,0xc
c0021342:	68 34 67 02 c0       	push   0xc0026734
c0021347:	e8 3e eb fe ff       	call   c000fe8a <KePanic(char const*)>
c002134c:	83 c4 10             	add    esp,0x10
c002134f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021353:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021357:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002135d:	90                   	nop
c002135e:	83 c4 0c             	add    esp,0xc
c0021361:	c3                   	ret    
c0021362:	66 90                	xchg   ax,ax

c0021364 <APICTimer::APICTimer()>:
c0021364:	83 ec 0c             	sub    esp,0xc
c0021367:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002136b:	83 ec 08             	sub    esp,0x8
c002136e:	68 44 67 02 c0       	push   0xc0026744
c0021373:	50                   	push   eax
c0021374:	e8 87 9c fe ff       	call   c000b000 <Timer::Timer(char const*)>
c0021379:	83 c4 10             	add    esp,0x10
c002137c:	ba 58 67 02 c0       	mov    edx,0xc0026758
c0021381:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021385:	89 10                	mov    DWORD PTR [eax],edx
c0021387:	90                   	nop
c0021388:	83 c4 0c             	add    esp,0xc
c002138b:	c3                   	ret    

c002138c <PIT::write(int)>:
c002138c:	83 ec 10             	sub    esp,0x10
c002138f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021393:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0021397:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002139d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00213a1:	a3 b8 04 03 c0       	mov    ds:0xc00304b8,eax
c00213a6:	b8 dc 34 12 00       	mov    eax,0x1234dc
c00213ab:	89 c2                	mov    edx,eax
c00213ad:	c1 fa 1f             	sar    edx,0x1f
c00213b0:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c00213b4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00213b8:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c00213bf:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c00213c4:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c00213c8:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c00213cd:	ee                   	out    dx,al
c00213ce:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00213d2:	0f b6 c0             	movzx  eax,al
c00213d5:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c00213dc:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c00213e0:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c00213e4:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c00213e9:	ee                   	out    dx,al
c00213ea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00213ee:	c1 f8 08             	sar    eax,0x8
c00213f1:	0f b6 c0             	movzx  eax,al
c00213f4:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c00213fb:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00213ff:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0021403:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0021408:	ee                   	out    dx,al
c0021409:	90                   	nop
c002140a:	83 c4 10             	add    esp,0x10
c002140d:	c3                   	ret    
c002140e:	66 90                	xchg   ax,ax

c0021410 <pitHandler(regs*, void*)>:
c0021410:	83 ec 0c             	sub    esp,0xc
c0021413:	8b 0d b8 04 03 c0    	mov    ecx,DWORD PTR ds:0xc00304b8
c0021419:	b8 10 27 00 00       	mov    eax,0x2710
c002141e:	89 c2                	mov    edx,eax
c0021420:	c1 fa 1f             	sar    edx,0x1f
c0021423:	f7 f9                	idiv   ecx
c0021425:	83 ec 0c             	sub    esp,0xc
c0021428:	50                   	push   eax
c0021429:	e8 9e 9c fe ff       	call   c000b0cc <timerHandler(unsigned int)>
c002142e:	83 c4 10             	add    esp,0x10
c0021431:	90                   	nop
c0021432:	83 c4 0c             	add    esp,0xc
c0021435:	c3                   	ret    
c0021436:	66 90                	xchg   ax,ax

c0021438 <PIT::open(int, int, void*)>:
c0021438:	83 ec 0c             	sub    esp,0xc
c002143b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002143f:	8b 00                	mov    eax,DWORD PTR [eax]
c0021441:	83 c0 24             	add    eax,0x24
c0021444:	8b 00                	mov    eax,DWORD PTR [eax]
c0021446:	83 ec 08             	sub    esp,0x8
c0021449:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002144d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021451:	ff d0                	call   eax
c0021453:	83 c4 10             	add    esp,0x10
c0021456:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002145a:	83 ec 0c             	sub    esp,0xc
c002145d:	6a 00                	push   0x0
c002145f:	6a 01                	push   0x1
c0021461:	68 10 14 02 c0       	push   0xc0021410
c0021466:	6a 00                	push   0x0
c0021468:	50                   	push   eax
c0021469:	e8 34 85 fe ff       	call   c00099a2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002146e:	83 c4 20             	add    esp,0x20
c0021471:	89 c2                	mov    edx,eax
c0021473:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021477:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c002147d:	b8 00 00 00 00       	mov    eax,0x0
c0021482:	83 c4 0c             	add    esp,0xc
c0021485:	c3                   	ret    
c0021486:	66 90                	xchg   ax,ax

c0021488 <PIT::close(int, int, void*)>:
c0021488:	83 ec 0c             	sub    esp,0xc
c002148b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002148f:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0021499:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002149d:	6a 01                	push   0x1
c002149f:	68 10 14 02 c0       	push   0xc0021410
c00214a4:	6a 00                	push   0x0
c00214a6:	50                   	push   eax
c00214a7:	e8 2c 85 fe ff       	call   c00099d8 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c00214ac:	83 c4 10             	add    esp,0x10
c00214af:	b8 00 00 00 00       	mov    eax,0x0
c00214b4:	83 c4 0c             	add    esp,0xc
c00214b7:	c3                   	ret    

c00214b8 <PIT::PIT()>:
c00214b8:	83 ec 0c             	sub    esp,0xc
c00214bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00214bf:	83 ec 08             	sub    esp,0x8
c00214c2:	68 80 67 02 c0       	push   0xc0026780
c00214c7:	50                   	push   eax
c00214c8:	e8 33 9b fe ff       	call   c000b000 <Timer::Timer(char const*)>
c00214cd:	83 c4 10             	add    esp,0x10
c00214d0:	ba a8 67 02 c0       	mov    edx,0xc00267a8
c00214d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00214d9:	89 10                	mov    DWORD PTR [eax],edx
c00214db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00214df:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00214e5:	0f b6 d0             	movzx  edx,al
c00214e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00214ec:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c00214f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00214f7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00214fd:	0f b6 d0             	movzx  edx,al
c0021500:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021504:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c0021509:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002150d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0021513:	8d 50 01             	lea    edx,[eax+0x1]
c0021516:	88 d1                	mov    cl,dl
c0021518:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002151c:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c0021522:	0f b6 d0             	movzx  edx,al
c0021525:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021529:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c002152d:	83 e1 3f             	and    ecx,0x3f
c0021530:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0021534:	90                   	nop
c0021535:	83 c4 0c             	add    esp,0xc
c0021538:	c3                   	ret    
c0021539:	66 90                	xchg   ax,ax
c002153b:	66 90                	xchg   ax,ax
c002153d:	66 90                	xchg   ax,ax
c002153f:	90                   	nop

c0021540 <avxDetect>:
c0021540:	b8 01 00 00 00       	mov    eax,0x1
c0021545:	0f a2                	cpuid  
c0021547:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c002154d:	74 15                	je     c0021564 <avxDetect.noAVX>
c002154f:	b8 01 00 00 00       	mov    eax,0x1
c0021554:	0f a2                	cpuid  
c0021556:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c002155c:	74 06                	je     c0021564 <avxDetect.noAVX>
c002155e:	b8 01 00 00 00       	mov    eax,0x1
c0021563:	c3                   	ret    

c0021564 <avxDetect.noAVX>:
c0021564:	b8 00 00 00 00       	mov    eax,0x0
c0021569:	c3                   	ret    

c002156a <avxSave>:
c002156a:	53                   	push   ebx
c002156b:	52                   	push   edx
c002156c:	31 c0                	xor    eax,eax
c002156e:	48                   	dec    eax
c002156f:	89 c2                	mov    edx,eax
c0021571:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0021575:	0f ae 23             	xsave  [ebx]
c0021578:	5a                   	pop    edx
c0021579:	5b                   	pop    ebx
c002157a:	c3                   	ret    

c002157b <avxLoad>:
c002157b:	53                   	push   ebx
c002157c:	52                   	push   edx
c002157d:	31 c0                	xor    eax,eax
c002157f:	48                   	dec    eax
c0021580:	89 c2                	mov    edx,eax
c0021582:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0021586:	0f ae 2b             	xrstor [ebx]
c0021589:	5a                   	pop    edx
c002158a:	5b                   	pop    ebx
c002158b:	c3                   	ret    

c002158c <avxInit>:
c002158c:	e8 17 03 00 00       	call   c00218a8 <sseInit>
c0021591:	50                   	push   eax
c0021592:	51                   	push   ecx
c0021593:	0f 20 e0             	mov    eax,cr4
c0021596:	0d 00 00 04 00       	or     eax,0x40000
c002159b:	0f 22 e0             	mov    cr4,eax
c002159e:	31 c9                	xor    ecx,ecx
c00215a0:	0f 01 d0             	xgetbv 
c00215a3:	0d 07 00 00 00       	or     eax,0x7
c00215a8:	0f 01 d1             	xsetbv 
c00215ab:	59                   	pop    ecx
c00215ac:	58                   	pop    eax
c00215ad:	c3                   	ret    

c00215ae <avxClose>:
c00215ae:	c3                   	ret    
c00215af:	90                   	nop

c00215b0 <isr0>:
c00215b0:	fa                   	cli    
c00215b1:	68 00 00 00 00       	push   0x0
c00215b6:	68 00 00 00 00       	push   0x0
c00215bb:	e9 56 01 00 00       	jmp    c0021716 <int_common_stub>

c00215c0 <isr1>:
c00215c0:	fa                   	cli    
c00215c1:	6a 00                	push   0x0
c00215c3:	6a 01                	push   0x1
c00215c5:	e9 4c 01 00 00       	jmp    c0021716 <int_common_stub>

c00215ca <isr2>:
c00215ca:	fa                   	cli    
c00215cb:	6a 00                	push   0x0
c00215cd:	6a 02                	push   0x2
c00215cf:	e9 42 01 00 00       	jmp    c0021716 <int_common_stub>

c00215d4 <isr3>:
c00215d4:	fa                   	cli    
c00215d5:	6a 00                	push   0x0
c00215d7:	6a 03                	push   0x3
c00215d9:	e9 38 01 00 00       	jmp    c0021716 <int_common_stub>

c00215de <isr4>:
c00215de:	fa                   	cli    
c00215df:	6a 00                	push   0x0
c00215e1:	6a 04                	push   0x4
c00215e3:	e9 2e 01 00 00       	jmp    c0021716 <int_common_stub>

c00215e8 <isr5>:
c00215e8:	fa                   	cli    
c00215e9:	6a 00                	push   0x0
c00215eb:	6a 05                	push   0x5
c00215ed:	e9 24 01 00 00       	jmp    c0021716 <int_common_stub>

c00215f2 <isr6>:
c00215f2:	fa                   	cli    
c00215f3:	6a 00                	push   0x0
c00215f5:	6a 06                	push   0x6
c00215f7:	e9 1a 01 00 00       	jmp    c0021716 <int_common_stub>

c00215fc <isr7>:
c00215fc:	fa                   	cli    
c00215fd:	6a 00                	push   0x0
c00215ff:	6a 07                	push   0x7
c0021601:	e9 10 01 00 00       	jmp    c0021716 <int_common_stub>

c0021606 <isr8>:
c0021606:	fa                   	cli    
c0021607:	6a 08                	push   0x8
c0021609:	e9 08 01 00 00       	jmp    c0021716 <int_common_stub>

c002160e <isr9>:
c002160e:	fa                   	cli    
c002160f:	6a 00                	push   0x0
c0021611:	6a 09                	push   0x9
c0021613:	e9 fe 00 00 00       	jmp    c0021716 <int_common_stub>

c0021618 <isr10>:
c0021618:	fa                   	cli    
c0021619:	6a 0a                	push   0xa
c002161b:	e9 f6 00 00 00       	jmp    c0021716 <int_common_stub>

c0021620 <isr11>:
c0021620:	fa                   	cli    
c0021621:	6a 0b                	push   0xb
c0021623:	e9 ee 00 00 00       	jmp    c0021716 <int_common_stub>

c0021628 <isr12>:
c0021628:	fa                   	cli    
c0021629:	6a 0c                	push   0xc
c002162b:	e9 e6 00 00 00       	jmp    c0021716 <int_common_stub>

c0021630 <isr13>:
c0021630:	fa                   	cli    
c0021631:	6a 0d                	push   0xd
c0021633:	53                   	push   ebx
c0021634:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0021638:	81 fb d5 17 02 c0    	cmp    ebx,0xc00217d5
c002163e:	5b                   	pop    ebx
c002163f:	0f 84 92 01 00 00    	je     c00217d7 <finishSignal2>
c0021645:	e9 cc 00 00 00       	jmp    c0021716 <int_common_stub>

c002164a <isr14>:
c002164a:	fa                   	cli    
c002164b:	6a 0e                	push   0xe
c002164d:	e9 c4 00 00 00       	jmp    c0021716 <int_common_stub>

c0021652 <isr15>:
c0021652:	fa                   	cli    
c0021653:	6a 00                	push   0x0
c0021655:	6a 0f                	push   0xf
c0021657:	e9 ba 00 00 00       	jmp    c0021716 <int_common_stub>

c002165c <isr16>:
c002165c:	fa                   	cli    
c002165d:	6a 00                	push   0x0
c002165f:	6a 10                	push   0x10
c0021661:	e9 b0 00 00 00       	jmp    c0021716 <int_common_stub>

c0021666 <isr17>:
c0021666:	fa                   	cli    
c0021667:	6a 00                	push   0x0
c0021669:	6a 11                	push   0x11
c002166b:	e9 a6 00 00 00       	jmp    c0021716 <int_common_stub>

c0021670 <isr18>:
c0021670:	fa                   	cli    
c0021671:	6a 00                	push   0x0
c0021673:	6a 12                	push   0x12
c0021675:	e9 9c 00 00 00       	jmp    c0021716 <int_common_stub>

c002167a <irq3>:
c002167a:	fa                   	cli    
c002167b:	6a 00                	push   0x0
c002167d:	6a 23                	push   0x23
c002167f:	e9 92 00 00 00       	jmp    c0021716 <int_common_stub>

c0021684 <irq4>:
c0021684:	fa                   	cli    
c0021685:	6a 00                	push   0x0
c0021687:	6a 24                	push   0x24
c0021689:	e9 88 00 00 00       	jmp    c0021716 <int_common_stub>

c002168e <irq5>:
c002168e:	fa                   	cli    
c002168f:	6a 00                	push   0x0
c0021691:	6a 25                	push   0x25
c0021693:	e9 7e 00 00 00       	jmp    c0021716 <int_common_stub>

c0021698 <irq6>:
c0021698:	fa                   	cli    
c0021699:	6a 00                	push   0x0
c002169b:	6a 26                	push   0x26
c002169d:	e9 74 00 00 00       	jmp    c0021716 <int_common_stub>

c00216a2 <irq7>:
c00216a2:	fa                   	cli    
c00216a3:	6a 00                	push   0x0
c00216a5:	6a 27                	push   0x27
c00216a7:	e9 6a 00 00 00       	jmp    c0021716 <int_common_stub>

c00216ac <irq8>:
c00216ac:	fa                   	cli    
c00216ad:	6a 00                	push   0x0
c00216af:	6a 28                	push   0x28
c00216b1:	e9 60 00 00 00       	jmp    c0021716 <int_common_stub>

c00216b6 <irq9>:
c00216b6:	fa                   	cli    
c00216b7:	6a 00                	push   0x0
c00216b9:	6a 29                	push   0x29
c00216bb:	e9 56 00 00 00       	jmp    c0021716 <int_common_stub>

c00216c0 <irq10>:
c00216c0:	fa                   	cli    
c00216c1:	6a 00                	push   0x0
c00216c3:	6a 2a                	push   0x2a
c00216c5:	e9 4c 00 00 00       	jmp    c0021716 <int_common_stub>

c00216ca <irq11>:
c00216ca:	fa                   	cli    
c00216cb:	6a 00                	push   0x0
c00216cd:	6a 2b                	push   0x2b
c00216cf:	e9 42 00 00 00       	jmp    c0021716 <int_common_stub>

c00216d4 <irq12>:
c00216d4:	fa                   	cli    
c00216d5:	6a 00                	push   0x0
c00216d7:	6a 2c                	push   0x2c
c00216d9:	e9 38 00 00 00       	jmp    c0021716 <int_common_stub>

c00216de <irq13>:
c00216de:	fa                   	cli    
c00216df:	6a 00                	push   0x0
c00216e1:	6a 2d                	push   0x2d
c00216e3:	e9 2e 00 00 00       	jmp    c0021716 <int_common_stub>

c00216e8 <irq14>:
c00216e8:	fa                   	cli    
c00216e9:	6a 00                	push   0x0
c00216eb:	6a 2e                	push   0x2e
c00216ed:	e9 24 00 00 00       	jmp    c0021716 <int_common_stub>

c00216f2 <irq15>:
c00216f2:	fa                   	cli    
c00216f3:	6a 00                	push   0x0
c00216f5:	6a 2f                	push   0x2f
c00216f7:	e9 1a 00 00 00       	jmp    c0021716 <int_common_stub>

c00216fc <irq1>:
c00216fc:	fa                   	cli    
c00216fd:	6a 00                	push   0x0
c00216ff:	6a 21                	push   0x21
c0021701:	eb 13                	jmp    c0021716 <int_common_stub>

c0021703 <irq2>:
c0021703:	fa                   	cli    
c0021704:	6a 00                	push   0x0
c0021706:	6a 22                	push   0x22
c0021708:	eb 0c                	jmp    c0021716 <int_common_stub>

c002170a <isr96>:
c002170a:	6a 00                	push   0x0
c002170c:	6a 60                	push   0x60
c002170e:	fb                   	sti    
c002170f:	eb 05                	jmp    c0021716 <int_common_stub>

c0021711 <irq0>:
c0021711:	fa                   	cli    
c0021712:	6a 00                	push   0x0
c0021714:	6a 20                	push   0x20

c0021716 <int_common_stub>:
c0021716:	60                   	pusha  
c0021717:	1e                   	push   ds
c0021718:	06                   	push   es
c0021719:	0f a0                	push   fs
c002171b:	0f a8                	push   gs
c002171d:	66 b8 10 00          	mov    ax,0x10
c0021721:	66 8e d8             	mov    ds,ax
c0021724:	66 8e c0             	mov    es,ax
c0021727:	66 8e e0             	mov    fs,ax
c002172a:	66 8e e8             	mov    gs,ax
c002172d:	54                   	push   esp
c002172e:	fc                   	cld    
c002172f:	e8 9c d2 fe ff       	call   c000e9d0 <int_handler>
c0021734:	81 c4 04 00 00 00    	add    esp,0x4
c002173a:	0f a9                	pop    gs
c002173c:	0f a1                	pop    fs
c002173e:	07                   	pop    es
c002173f:	1f                   	pop    ds
c0021740:	e8 6a fa fe ff       	call   c00111af <KiCheckSignalZ>
c0021745:	85 c0                	test   eax,eax
c0021747:	75 08                	jne    c0021751 <doSignals>
c0021749:	61                   	popa   
c002174a:	81 c4 08 00 00 00    	add    esp,0x8
c0021750:	cf                   	iret   

c0021751 <doSignals>:
c0021751:	a3 08 20 00 c2       	mov    ds:0xc2002008,eax
c0021756:	61                   	popa   
c0021757:	53                   	push   ebx
c0021758:	8b 1d 08 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002008
c002175e:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0021761:	5b                   	pop    ebx
c0021762:	a1 08 20 00 c2       	mov    eax,ds:0xc2002008
c0021767:	89 58 10             	mov    DWORD PTR [eax+0x10],ebx
c002176a:	89 48 14             	mov    DWORD PTR [eax+0x14],ecx
c002176d:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0021770:	89 70 1c             	mov    DWORD PTR [eax+0x1c],esi
c0021773:	89 78 20             	mov    DWORD PTR [eax+0x20],edi
c0021776:	89 68 24             	mov    DWORD PTR [eax+0x24],ebp
c0021779:	81 c4 08 00 00 00    	add    esp,0x8
c002177f:	5e                   	pop    esi
c0021780:	5b                   	pop    ebx
c0021781:	59                   	pop    ecx
c0021782:	5a                   	pop    edx
c0021783:	89 70 2c             	mov    DWORD PTR [eax+0x2c],esi
c0021786:	89 48 30             	mov    DWORD PTR [eax+0x30],ecx
c0021789:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c002178c:	52                   	push   edx
c002178d:	51                   	push   ecx
c002178e:	53                   	push   ebx
c002178f:	56                   	push   esi
c0021790:	81 ec 08 00 00 00    	sub    esp,0x8
c0021796:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c0021799:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c002179c:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
c002179f:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00217a2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00217a5:	60                   	pusha  
c00217a6:	8b 35 08 20 00 c2    	mov    esi,DWORD PTR ds:0xc2002008
c00217ac:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c00217af:	89 e3                	mov    ebx,esp
c00217b1:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c00217b4:	52                   	push   edx
c00217b5:	68 d5 17 02 c0       	push   0xc00217d5
c00217ba:	89 63 34             	mov    DWORD PTR [ebx+0x34],esp
c00217bd:	89 dc                	mov    esp,ebx
c00217bf:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00217c2:	68 23 00 00 00       	push   0x23
c00217c7:	51                   	push   ecx
c00217c8:	68 02 02 00 00       	push   0x202
c00217cd:	68 1b 00 00 00       	push   0x1b
c00217d2:	ff 36                	push   DWORD PTR [esi]
c00217d4:	cf                   	iret   

c00217d5 <finishSignal>:
c00217d5:	cd 0f                	int    0xf

c00217d7 <finishSignal2>:
c00217d7:	ff 35 08 20 00 c2    	push   DWORD PTR ds:0xc2002008
c00217dd:	e8 59 fa fe ff       	call   c001123b <KiFinishSignalZ>
c00217e2:	8b 2d 08 20 00 c2    	mov    ebp,DWORD PTR ds:0xc2002008
c00217e8:	68 23 00 00 00       	push   0x23
c00217ed:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c00217f0:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c00217f3:	68 1b 00 00 00       	push   0x1b
c00217f8:	ff 75 2c             	push   DWORD PTR [ebp+0x2c]
c00217fb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00217fe:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c0021801:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0021804:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0021807:	8b 75 1c             	mov    esi,DWORD PTR [ebp+0x1c]
c002180a:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c002180d:	8b 6d 24             	mov    ebp,DWORD PTR [ebp+0x24]
c0021810:	cf                   	iret   
c0021811:	90                   	nop
c0021812:	90                   	nop
c0021813:	90                   	nop

c0021814 <irq16>:
c0021814:	fa                   	cli    
c0021815:	6a 00                	push   0x0
c0021817:	6a 30                	push   0x30
c0021819:	e9 f8 fe ff ff       	jmp    c0021716 <int_common_stub>

c002181e <irq17>:
c002181e:	fa                   	cli    
c002181f:	6a 00                	push   0x0
c0021821:	6a 31                	push   0x31
c0021823:	e9 ee fe ff ff       	jmp    c0021716 <int_common_stub>

c0021828 <irq18>:
c0021828:	fa                   	cli    
c0021829:	6a 00                	push   0x0
c002182b:	6a 32                	push   0x32
c002182d:	e9 e4 fe ff ff       	jmp    c0021716 <int_common_stub>

c0021832 <irq19>:
c0021832:	fa                   	cli    
c0021833:	6a 00                	push   0x0
c0021835:	6a 33                	push   0x33
c0021837:	e9 da fe ff ff       	jmp    c0021716 <int_common_stub>

c002183c <irq20>:
c002183c:	fa                   	cli    
c002183d:	6a 00                	push   0x0
c002183f:	6a 34                	push   0x34
c0021841:	e9 d0 fe ff ff       	jmp    c0021716 <int_common_stub>

c0021846 <irq21>:
c0021846:	fa                   	cli    
c0021847:	6a 00                	push   0x0
c0021849:	6a 35                	push   0x35
c002184b:	e9 c6 fe ff ff       	jmp    c0021716 <int_common_stub>

c0021850 <irq22>:
c0021850:	fa                   	cli    
c0021851:	6a 00                	push   0x0
c0021853:	6a 36                	push   0x36
c0021855:	e9 bc fe ff ff       	jmp    c0021716 <int_common_stub>

c002185a <irq23>:
c002185a:	fa                   	cli    
c002185b:	6a 00                	push   0x0
c002185d:	6a 37                	push   0x37
c002185f:	e9 b2 fe ff ff       	jmp    c0021716 <int_common_stub>
c0021864:	66 90                	xchg   ax,ax
c0021866:	66 90                	xchg   ax,ax
c0021868:	66 90                	xchg   ax,ax
c002186a:	66 90                	xchg   ax,ax
c002186c:	66 90                	xchg   ax,ax
c002186e:	66 90                	xchg   ax,ax

c0021870 <i386GetRDRAND>:
c0021870:	b9 64 00 00 00       	mov    ecx,0x64

c0021875 <retry>:
c0021875:	0f c7 f0             	rdrand eax
c0021878:	72 05                	jb     c002187f <retry.done>
c002187a:	e2 f9                	loop   c0021875 <retry>

c002187c <retry.fail>:
c002187c:	31 c0                	xor    eax,eax
c002187e:	c3                   	ret    

c002187f <retry.done>:
c002187f:	c3                   	ret    

c0021880 <sseDetect>:
c0021880:	b8 01 00 00 00       	mov    eax,0x1
c0021885:	0f a2                	cpuid  
c0021887:	f7 c2 00 00 00 02    	test   edx,0x2000000
c002188d:	74 06                	je     c0021895 <sseDetect.noSSE>
c002188f:	b8 01 00 00 00       	mov    eax,0x1
c0021894:	c3                   	ret    

c0021895 <sseDetect.noSSE>:
c0021895:	31 c0                	xor    eax,eax
c0021897:	c3                   	ret    

c0021898 <sseSave>:
c0021898:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002189c:	0f ae 00             	fxsave [eax]
c002189f:	c3                   	ret    

c00218a0 <sseLoad>:
c00218a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00218a4:	0f ae 08             	fxrstor [eax]
c00218a7:	c3                   	ret    

c00218a8 <sseInit>:
c00218a8:	e8 48 00 00 00       	call   c00218f5 <x87Init>
c00218ad:	0f 20 e0             	mov    eax,cr4
c00218b0:	66 0d 00 06          	or     ax,0x600
c00218b4:	0f 22 e0             	mov    cr4,eax
c00218b7:	c3                   	ret    

c00218b8 <sseClose>:
c00218b8:	c3                   	ret    
c00218b9:	66 90                	xchg   ax,ax
c00218bb:	66 90                	xchg   ax,ax
c00218bd:	66 90                	xchg   ax,ax
c00218bf:	90                   	nop

c00218c0 <value_37F>:
c00218c0:	7f 03                	jg     c00218c5 <value_37A+0x1>

c00218c2 <value_37E>:
c00218c2:	7e 03                	jle    c00218c7 <x87Detect+0x1>

c00218c4 <value_37A>:
c00218c4:	7a 03                	jp     c00218c9 <x87Detect+0x3>

c00218c6 <x87Detect>:
c00218c6:	53                   	push   ebx
c00218c7:	51                   	push   ecx
c00218c8:	52                   	push   edx
c00218c9:	b8 01 00 00 00       	mov    eax,0x1
c00218ce:	0f a2                	cpuid  
c00218d0:	f7 c2 01 00 00 00    	test   edx,0x1
c00218d6:	74 06                	je     c00218de <x87Detect.nox87>
c00218d8:	b8 01 00 00 00       	mov    eax,0x1
c00218dd:	c3                   	ret    

c00218de <x87Detect.nox87>:
c00218de:	b8 00 00 00 00       	mov    eax,0x0
c00218e3:	5a                   	pop    edx
c00218e4:	59                   	pop    ecx
c00218e5:	5b                   	pop    ebx
c00218e6:	c3                   	ret    

c00218e7 <x87Save>:
c00218e7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00218eb:	dd 30                	fnsave [eax]
c00218ed:	c3                   	ret    

c00218ee <x87Load>:
c00218ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00218f2:	dd 20                	frstor [eax]
c00218f4:	c3                   	ret    

c00218f5 <x87Init>:
c00218f5:	0f 20 c0             	mov    eax,cr0
c00218f8:	66 25 fb ff          	and    ax,0xfffb
c00218fc:	66 0d 22 00          	or     ax,0x22
c0021900:	0f 22 c0             	mov    cr0,eax
c0021903:	db e3                	fninit 
c0021905:	0f 06                	clts   
c0021907:	d9 2d c4 18 02 c0    	fldcw  WORD PTR ds:0xc00218c4
c002190d:	c3                   	ret    

c002190e <x87Close>:
c002190e:	c3                   	ret    
c002190f:	90                   	nop

c0021910 <__do_global_ctors_aux>:
c0021910:	a1 c4 28 02 c0       	mov    eax,ds:0xc00228c4
c0021915:	83 f8 ff             	cmp    eax,0xffffffff
c0021918:	74 1a                	je     c0021934 <__do_global_ctors_aux+0x24>
c002191a:	55                   	push   ebp
c002191b:	89 e5                	mov    ebp,esp
c002191d:	53                   	push   ebx
c002191e:	52                   	push   edx
c002191f:	bb c4 28 02 c0       	mov    ebx,0xc00228c4
c0021924:	ff d0                	call   eax
c0021926:	83 eb 04             	sub    ebx,0x4
c0021929:	8b 03                	mov    eax,DWORD PTR [ebx]
c002192b:	83 f8 ff             	cmp    eax,0xffffffff
c002192e:	75 f4                	jne    c0021924 <__do_global_ctors_aux+0x14>
c0021930:	58                   	pop    eax
c0021931:	5b                   	pop    ebx
c0021932:	5d                   	pop    ebp
c0021933:	c3                   	ret    
c0021934:	c3                   	ret    
c0021935:	66 90                	xchg   ax,ax
c0021937:	90                   	nop

c0021938 <__divdi3>:
c0021938:	55                   	push   ebp
c0021939:	57                   	push   edi
c002193a:	56                   	push   esi
c002193b:	53                   	push   ebx
c002193c:	83 ec 1c             	sub    esp,0x1c
c002193f:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0021943:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0021947:	89 0c 24             	mov    DWORD PTR [esp],ecx
c002194a:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c002194e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0021952:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0021956:	85 db                	test   ebx,ebx
c0021958:	0f 88 8e 00 00 00    	js     c00219ec <__divdi3+0xb4>
c002195e:	89 dd                	mov    ebp,ebx
c0021960:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0021968:	89 d3                	mov    ebx,edx
c002196a:	85 d2                	test   edx,edx
c002196c:	79 0d                	jns    c002197b <__divdi3+0x43>
c002196e:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c0021972:	f7 d8                	neg    eax
c0021974:	83 d2 00             	adc    edx,0x0
c0021977:	f7 da                	neg    edx
c0021979:	89 d3                	mov    ebx,edx
c002197b:	89 c7                	mov    edi,eax
c002197d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021980:	85 db                	test   ebx,ebx
c0021982:	75 48                	jne    c00219cc <__divdi3+0x94>
c0021984:	39 ef                	cmp    edi,ebp
c0021986:	76 24                	jbe    c00219ac <__divdi3+0x74>
c0021988:	89 ea                	mov    edx,ebp
c002198a:	f7 f7                	div    edi
c002198c:	89 c1                	mov    ecx,eax
c002198e:	31 f6                	xor    esi,esi
c0021990:	89 c8                	mov    eax,ecx
c0021992:	89 f2                	mov    edx,esi
c0021994:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0021998:	85 c9                	test   ecx,ecx
c002199a:	74 07                	je     c00219a3 <__divdi3+0x6b>
c002199c:	f7 d8                	neg    eax
c002199e:	83 d2 00             	adc    edx,0x0
c00219a1:	f7 da                	neg    edx
c00219a3:	83 c4 1c             	add    esp,0x1c
c00219a6:	5b                   	pop    ebx
c00219a7:	5e                   	pop    esi
c00219a8:	5f                   	pop    edi
c00219a9:	5d                   	pop    ebp
c00219aa:	c3                   	ret    
c00219ab:	90                   	nop
c00219ac:	85 ff                	test   edi,edi
c00219ae:	75 0b                	jne    c00219bb <__divdi3+0x83>
c00219b0:	b8 01 00 00 00       	mov    eax,0x1
c00219b5:	31 d2                	xor    edx,edx
c00219b7:	f7 f3                	div    ebx
c00219b9:	89 c7                	mov    edi,eax
c00219bb:	31 d2                	xor    edx,edx
c00219bd:	89 e8                	mov    eax,ebp
c00219bf:	f7 f7                	div    edi
c00219c1:	89 c6                	mov    esi,eax
c00219c3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00219c6:	f7 f7                	div    edi
c00219c8:	89 c1                	mov    ecx,eax
c00219ca:	eb c4                	jmp    c0021990 <__divdi3+0x58>
c00219cc:	39 eb                	cmp    ebx,ebp
c00219ce:	77 3c                	ja     c0021a0c <__divdi3+0xd4>
c00219d0:	0f bd f3             	bsr    esi,ebx
c00219d3:	83 f6 1f             	xor    esi,0x1f
c00219d6:	75 40                	jne    c0021a18 <__divdi3+0xe0>
c00219d8:	39 eb                	cmp    ebx,ebp
c00219da:	72 09                	jb     c00219e5 <__divdi3+0xad>
c00219dc:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c00219df:	0f 87 97 00 00 00    	ja     c0021a7c <__divdi3+0x144>
c00219e5:	b9 01 00 00 00       	mov    ecx,0x1
c00219ea:	eb a4                	jmp    c0021990 <__divdi3+0x58>
c00219ec:	f7 d9                	neg    ecx
c00219ee:	83 d3 00             	adc    ebx,0x0
c00219f1:	f7 db                	neg    ebx
c00219f3:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00219f6:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c00219fa:	89 dd                	mov    ebp,ebx
c00219fc:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c0021a04:	e9 5f ff ff ff       	jmp    c0021968 <__divdi3+0x30>
c0021a09:	8d 76 00             	lea    esi,[esi+0x0]
c0021a0c:	31 f6                	xor    esi,esi
c0021a0e:	31 c9                	xor    ecx,ecx
c0021a10:	e9 7b ff ff ff       	jmp    c0021990 <__divdi3+0x58>
c0021a15:	8d 76 00             	lea    esi,[esi+0x0]
c0021a18:	b8 20 00 00 00       	mov    eax,0x20
c0021a1d:	29 f0                	sub    eax,esi
c0021a1f:	89 f1                	mov    ecx,esi
c0021a21:	d3 e3                	shl    ebx,cl
c0021a23:	89 fa                	mov    edx,edi
c0021a25:	88 c1                	mov    cl,al
c0021a27:	d3 ea                	shr    edx,cl
c0021a29:	09 da                	or     edx,ebx
c0021a2b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021a2f:	89 f1                	mov    ecx,esi
c0021a31:	d3 e7                	shl    edi,cl
c0021a33:	89 eb                	mov    ebx,ebp
c0021a35:	88 c1                	mov    cl,al
c0021a37:	d3 eb                	shr    ebx,cl
c0021a39:	89 f1                	mov    ecx,esi
c0021a3b:	d3 e5                	shl    ebp,cl
c0021a3d:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0021a40:	88 c1                	mov    cl,al
c0021a42:	d3 ea                	shr    edx,cl
c0021a44:	09 d5                	or     ebp,edx
c0021a46:	89 e8                	mov    eax,ebp
c0021a48:	89 da                	mov    edx,ebx
c0021a4a:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c0021a4e:	89 d3                	mov    ebx,edx
c0021a50:	89 c5                	mov    ebp,eax
c0021a52:	f7 e7                	mul    edi
c0021a54:	39 d3                	cmp    ebx,edx
c0021a56:	72 18                	jb     c0021a70 <__divdi3+0x138>
c0021a58:	74 0a                	je     c0021a64 <__divdi3+0x12c>
c0021a5a:	89 e9                	mov    ecx,ebp
c0021a5c:	31 f6                	xor    esi,esi
c0021a5e:	e9 2d ff ff ff       	jmp    c0021990 <__divdi3+0x58>
c0021a63:	90                   	nop
c0021a64:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0021a67:	89 f1                	mov    ecx,esi
c0021a69:	d3 e7                	shl    edi,cl
c0021a6b:	39 c7                	cmp    edi,eax
c0021a6d:	73 eb                	jae    c0021a5a <__divdi3+0x122>
c0021a6f:	90                   	nop
c0021a70:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0021a73:	31 f6                	xor    esi,esi
c0021a75:	e9 16 ff ff ff       	jmp    c0021990 <__divdi3+0x58>
c0021a7a:	66 90                	xchg   ax,ax
c0021a7c:	31 c9                	xor    ecx,ecx
c0021a7e:	e9 0d ff ff ff       	jmp    c0021990 <__divdi3+0x58>
c0021a83:	90                   	nop

c0021a84 <__moddi3>:
c0021a84:	55                   	push   ebp
c0021a85:	57                   	push   edi
c0021a86:	56                   	push   esi
c0021a87:	53                   	push   ebx
c0021a88:	83 ec 2c             	sub    esp,0x2c
c0021a8b:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0021a8f:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0021a93:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0021a97:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0021a9b:	85 db                	test   ebx,ebx
c0021a9d:	0f 88 85 00 00 00    	js     c0021b28 <__moddi3+0xa4>
c0021aa3:	89 de                	mov    esi,ebx
c0021aa5:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0021aad:	89 d7                	mov    edi,edx
c0021aaf:	85 d2                	test   edx,edx
c0021ab1:	79 09                	jns    c0021abc <__moddi3+0x38>
c0021ab3:	f7 d8                	neg    eax
c0021ab5:	83 d2 00             	adc    edx,0x0
c0021ab8:	f7 da                	neg    edx
c0021aba:	89 d7                	mov    edi,edx
c0021abc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021ac0:	89 cd                	mov    ebp,ecx
c0021ac2:	85 ff                	test   edi,edi
c0021ac4:	75 52                	jne    c0021b18 <__moddi3+0x94>
c0021ac6:	89 c3                	mov    ebx,eax
c0021ac8:	39 f0                	cmp    eax,esi
c0021aca:	76 24                	jbe    c0021af0 <__moddi3+0x6c>
c0021acc:	89 c8                	mov    eax,ecx
c0021ace:	89 f2                	mov    edx,esi
c0021ad0:	f7 f3                	div    ebx
c0021ad2:	89 d6                	mov    esi,edx
c0021ad4:	89 f0                	mov    eax,esi
c0021ad6:	31 d2                	xor    edx,edx
c0021ad8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021adc:	85 c9                	test   ecx,ecx
c0021ade:	74 07                	je     c0021ae7 <__moddi3+0x63>
c0021ae0:	f7 d8                	neg    eax
c0021ae2:	83 d2 00             	adc    edx,0x0
c0021ae5:	f7 da                	neg    edx
c0021ae7:	83 c4 2c             	add    esp,0x2c
c0021aea:	5b                   	pop    ebx
c0021aeb:	5e                   	pop    esi
c0021aec:	5f                   	pop    edi
c0021aed:	5d                   	pop    ebp
c0021aee:	c3                   	ret    
c0021aef:	90                   	nop
c0021af0:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0021af4:	85 db                	test   ebx,ebx
c0021af6:	75 0d                	jne    c0021b05 <__moddi3+0x81>
c0021af8:	b8 01 00 00 00       	mov    eax,0x1
c0021afd:	31 d2                	xor    edx,edx
c0021aff:	f7 f7                	div    edi
c0021b01:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021b05:	89 f0                	mov    eax,esi
c0021b07:	31 d2                	xor    edx,edx
c0021b09:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0021b0d:	f7 f7                	div    edi
c0021b0f:	89 e8                	mov    eax,ebp
c0021b11:	f7 f7                	div    edi
c0021b13:	89 d6                	mov    esi,edx
c0021b15:	eb bd                	jmp    c0021ad4 <__moddi3+0x50>
c0021b17:	90                   	nop
c0021b18:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0021b1c:	39 f7                	cmp    edi,esi
c0021b1e:	76 20                	jbe    c0021b40 <__moddi3+0xbc>
c0021b20:	89 c8                	mov    eax,ecx
c0021b22:	89 f2                	mov    edx,esi
c0021b24:	eb b2                	jmp    c0021ad8 <__moddi3+0x54>
c0021b26:	66 90                	xchg   ax,ax
c0021b28:	f7 d9                	neg    ecx
c0021b2a:	83 d3 00             	adc    ebx,0x0
c0021b2d:	f7 db                	neg    ebx
c0021b2f:	89 de                	mov    esi,ebx
c0021b31:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0021b39:	e9 6f ff ff ff       	jmp    c0021aad <__moddi3+0x29>
c0021b3e:	66 90                	xchg   ax,ax
c0021b40:	0f bd c7             	bsr    eax,edi
c0021b43:	83 f0 1f             	xor    eax,0x1f
c0021b46:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021b4a:	75 24                	jne    c0021b70 <__moddi3+0xec>
c0021b4c:	39 f7                	cmp    edi,esi
c0021b4e:	72 06                	jb     c0021b56 <__moddi3+0xd2>
c0021b50:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0021b54:	77 0c                	ja     c0021b62 <__moddi3+0xde>
c0021b56:	89 e9                	mov    ecx,ebp
c0021b58:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0021b5c:	19 fe                	sbb    esi,edi
c0021b5e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0021b62:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021b66:	89 f2                	mov    edx,esi
c0021b68:	e9 6b ff ff ff       	jmp    c0021ad8 <__moddi3+0x54>
c0021b6d:	8d 76 00             	lea    esi,[esi+0x0]
c0021b70:	b8 20 00 00 00       	mov    eax,0x20
c0021b75:	89 c2                	mov    edx,eax
c0021b77:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0021b7b:	29 da                	sub    edx,ebx
c0021b7d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0021b81:	88 d9                	mov    cl,bl
c0021b83:	d3 e7                	shl    edi,cl
c0021b85:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021b89:	88 d1                	mov    cl,dl
c0021b8b:	d3 e8                	shr    eax,cl
c0021b8d:	09 c7                	or     edi,eax
c0021b8f:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0021b93:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0021b97:	89 d8                	mov    eax,ebx
c0021b99:	88 d9                	mov    cl,bl
c0021b9b:	d3 e7                	shl    edi,cl
c0021b9d:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0021ba1:	89 f3                	mov    ebx,esi
c0021ba3:	88 d1                	mov    cl,dl
c0021ba5:	d3 eb                	shr    ebx,cl
c0021ba7:	89 c7                	mov    edi,eax
c0021ba9:	88 c1                	mov    cl,al
c0021bab:	d3 e6                	shl    esi,cl
c0021bad:	89 e8                	mov    eax,ebp
c0021baf:	88 d1                	mov    cl,dl
c0021bb1:	d3 e8                	shr    eax,cl
c0021bb3:	09 f0                	or     eax,esi
c0021bb5:	89 f9                	mov    ecx,edi
c0021bb7:	d3 e5                	shl    ebp,cl
c0021bb9:	89 da                	mov    edx,ebx
c0021bbb:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c0021bbf:	89 d3                	mov    ebx,edx
c0021bc1:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0021bc5:	89 c6                	mov    esi,eax
c0021bc7:	89 d1                	mov    ecx,edx
c0021bc9:	39 d3                	cmp    ebx,edx
c0021bcb:	72 27                	jb     c0021bf4 <__moddi3+0x170>
c0021bcd:	74 21                	je     c0021bf0 <__moddi3+0x16c>
c0021bcf:	29 f5                	sub    ebp,esi
c0021bd1:	19 cb                	sbb    ebx,ecx
c0021bd3:	89 de                	mov    esi,ebx
c0021bd5:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0021bd9:	d3 e6                	shl    esi,cl
c0021bdb:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0021bdf:	89 f9                	mov    ecx,edi
c0021be1:	d3 ed                	shr    ebp,cl
c0021be3:	09 ee                	or     esi,ebp
c0021be5:	89 f0                	mov    eax,esi
c0021be7:	d3 eb                	shr    ebx,cl
c0021be9:	89 da                	mov    edx,ebx
c0021beb:	e9 e8 fe ff ff       	jmp    c0021ad8 <__moddi3+0x54>
c0021bf0:	39 c5                	cmp    ebp,eax
c0021bf2:	73 db                	jae    c0021bcf <__moddi3+0x14b>
c0021bf4:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0021bf8:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0021bfc:	89 d1                	mov    ecx,edx
c0021bfe:	89 c6                	mov    esi,eax
c0021c00:	eb cd                	jmp    c0021bcf <__moddi3+0x14b>
c0021c02:	66 90                	xchg   ax,ax

c0021c04 <__udivdi3>:
c0021c04:	55                   	push   ebp
c0021c05:	57                   	push   edi
c0021c06:	56                   	push   esi
c0021c07:	53                   	push   ebx
c0021c08:	83 ec 1c             	sub    esp,0x1c
c0021c0b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0021c0f:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0021c13:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0021c17:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0021c1b:	85 d2                	test   edx,edx
c0021c1d:	75 41                	jne    c0021c60 <__udivdi3+0x5c>
c0021c1f:	39 f7                	cmp    edi,esi
c0021c21:	76 15                	jbe    c0021c38 <__udivdi3+0x34>
c0021c23:	89 e8                	mov    eax,ebp
c0021c25:	89 f2                	mov    edx,esi
c0021c27:	f7 f7                	div    edi
c0021c29:	31 db                	xor    ebx,ebx
c0021c2b:	89 da                	mov    edx,ebx
c0021c2d:	83 c4 1c             	add    esp,0x1c
c0021c30:	5b                   	pop    ebx
c0021c31:	5e                   	pop    esi
c0021c32:	5f                   	pop    edi
c0021c33:	5d                   	pop    ebp
c0021c34:	c3                   	ret    
c0021c35:	8d 76 00             	lea    esi,[esi+0x0]
c0021c38:	89 f9                	mov    ecx,edi
c0021c3a:	85 ff                	test   edi,edi
c0021c3c:	75 0b                	jne    c0021c49 <__udivdi3+0x45>
c0021c3e:	b8 01 00 00 00       	mov    eax,0x1
c0021c43:	31 d2                	xor    edx,edx
c0021c45:	f7 f7                	div    edi
c0021c47:	89 c1                	mov    ecx,eax
c0021c49:	31 d2                	xor    edx,edx
c0021c4b:	89 f0                	mov    eax,esi
c0021c4d:	f7 f1                	div    ecx
c0021c4f:	89 c3                	mov    ebx,eax
c0021c51:	89 e8                	mov    eax,ebp
c0021c53:	f7 f1                	div    ecx
c0021c55:	89 da                	mov    edx,ebx
c0021c57:	83 c4 1c             	add    esp,0x1c
c0021c5a:	5b                   	pop    ebx
c0021c5b:	5e                   	pop    esi
c0021c5c:	5f                   	pop    edi
c0021c5d:	5d                   	pop    ebp
c0021c5e:	c3                   	ret    
c0021c5f:	90                   	nop
c0021c60:	39 f2                	cmp    edx,esi
c0021c62:	77 1c                	ja     c0021c80 <__udivdi3+0x7c>
c0021c64:	0f bd da             	bsr    ebx,edx
c0021c67:	83 f3 1f             	xor    ebx,0x1f
c0021c6a:	75 24                	jne    c0021c90 <__udivdi3+0x8c>
c0021c6c:	39 f2                	cmp    edx,esi
c0021c6e:	72 08                	jb     c0021c78 <__udivdi3+0x74>
c0021c70:	39 ef                	cmp    edi,ebp
c0021c72:	0f 87 84 00 00 00    	ja     c0021cfc <__udivdi3+0xf8>
c0021c78:	b8 01 00 00 00       	mov    eax,0x1
c0021c7d:	eb ac                	jmp    c0021c2b <__udivdi3+0x27>
c0021c7f:	90                   	nop
c0021c80:	31 db                	xor    ebx,ebx
c0021c82:	31 c0                	xor    eax,eax
c0021c84:	89 da                	mov    edx,ebx
c0021c86:	83 c4 1c             	add    esp,0x1c
c0021c89:	5b                   	pop    ebx
c0021c8a:	5e                   	pop    esi
c0021c8b:	5f                   	pop    edi
c0021c8c:	5d                   	pop    ebp
c0021c8d:	c3                   	ret    
c0021c8e:	66 90                	xchg   ax,ax
c0021c90:	b8 20 00 00 00       	mov    eax,0x20
c0021c95:	29 d8                	sub    eax,ebx
c0021c97:	88 d9                	mov    cl,bl
c0021c99:	d3 e2                	shl    edx,cl
c0021c9b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0021c9f:	89 fa                	mov    edx,edi
c0021ca1:	88 c1                	mov    cl,al
c0021ca3:	d3 ea                	shr    edx,cl
c0021ca5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0021ca9:	09 d1                	or     ecx,edx
c0021cab:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0021caf:	88 d9                	mov    cl,bl
c0021cb1:	d3 e7                	shl    edi,cl
c0021cb3:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0021cb7:	89 f7                	mov    edi,esi
c0021cb9:	88 c1                	mov    cl,al
c0021cbb:	d3 ef                	shr    edi,cl
c0021cbd:	88 d9                	mov    cl,bl
c0021cbf:	d3 e6                	shl    esi,cl
c0021cc1:	89 ea                	mov    edx,ebp
c0021cc3:	88 c1                	mov    cl,al
c0021cc5:	d3 ea                	shr    edx,cl
c0021cc7:	09 d6                	or     esi,edx
c0021cc9:	89 f0                	mov    eax,esi
c0021ccb:	89 fa                	mov    edx,edi
c0021ccd:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0021cd1:	89 d7                	mov    edi,edx
c0021cd3:	89 c6                	mov    esi,eax
c0021cd5:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0021cd9:	39 d7                	cmp    edi,edx
c0021cdb:	72 13                	jb     c0021cf0 <__udivdi3+0xec>
c0021cdd:	74 09                	je     c0021ce8 <__udivdi3+0xe4>
c0021cdf:	89 f0                	mov    eax,esi
c0021ce1:	31 db                	xor    ebx,ebx
c0021ce3:	e9 43 ff ff ff       	jmp    c0021c2b <__udivdi3+0x27>
c0021ce8:	88 d9                	mov    cl,bl
c0021cea:	d3 e5                	shl    ebp,cl
c0021cec:	39 c5                	cmp    ebp,eax
c0021cee:	73 ef                	jae    c0021cdf <__udivdi3+0xdb>
c0021cf0:	8d 46 ff             	lea    eax,[esi-0x1]
c0021cf3:	31 db                	xor    ebx,ebx
c0021cf5:	e9 31 ff ff ff       	jmp    c0021c2b <__udivdi3+0x27>
c0021cfa:	66 90                	xchg   ax,ax
c0021cfc:	31 c0                	xor    eax,eax
c0021cfe:	e9 28 ff ff ff       	jmp    c0021c2b <__udivdi3+0x27>
c0021d03:	90                   	nop

c0021d04 <__umoddi3>:
c0021d04:	55                   	push   ebp
c0021d05:	57                   	push   edi
c0021d06:	56                   	push   esi
c0021d07:	53                   	push   ebx
c0021d08:	83 ec 1c             	sub    esp,0x1c
c0021d0b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0021d0f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0021d13:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0021d17:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0021d1b:	89 da                	mov    edx,ebx
c0021d1d:	85 c0                	test   eax,eax
c0021d1f:	75 37                	jne    c0021d58 <__umoddi3+0x54>
c0021d21:	39 df                	cmp    edi,ebx
c0021d23:	76 13                	jbe    c0021d38 <__umoddi3+0x34>
c0021d25:	89 f0                	mov    eax,esi
c0021d27:	f7 f7                	div    edi
c0021d29:	89 d0                	mov    eax,edx
c0021d2b:	31 d2                	xor    edx,edx
c0021d2d:	83 c4 1c             	add    esp,0x1c
c0021d30:	5b                   	pop    ebx
c0021d31:	5e                   	pop    esi
c0021d32:	5f                   	pop    edi
c0021d33:	5d                   	pop    ebp
c0021d34:	c3                   	ret    
c0021d35:	8d 76 00             	lea    esi,[esi+0x0]
c0021d38:	89 fd                	mov    ebp,edi
c0021d3a:	85 ff                	test   edi,edi
c0021d3c:	75 0b                	jne    c0021d49 <__umoddi3+0x45>
c0021d3e:	b8 01 00 00 00       	mov    eax,0x1
c0021d43:	31 d2                	xor    edx,edx
c0021d45:	f7 f7                	div    edi
c0021d47:	89 c5                	mov    ebp,eax
c0021d49:	89 d8                	mov    eax,ebx
c0021d4b:	31 d2                	xor    edx,edx
c0021d4d:	f7 f5                	div    ebp
c0021d4f:	89 f0                	mov    eax,esi
c0021d51:	f7 f5                	div    ebp
c0021d53:	89 d0                	mov    eax,edx
c0021d55:	eb d4                	jmp    c0021d2b <__umoddi3+0x27>
c0021d57:	90                   	nop
c0021d58:	89 f1                	mov    ecx,esi
c0021d5a:	39 d8                	cmp    eax,ebx
c0021d5c:	76 0a                	jbe    c0021d68 <__umoddi3+0x64>
c0021d5e:	89 f0                	mov    eax,esi
c0021d60:	83 c4 1c             	add    esp,0x1c
c0021d63:	5b                   	pop    ebx
c0021d64:	5e                   	pop    esi
c0021d65:	5f                   	pop    edi
c0021d66:	5d                   	pop    ebp
c0021d67:	c3                   	ret    
c0021d68:	0f bd e8             	bsr    ebp,eax
c0021d6b:	83 f5 1f             	xor    ebp,0x1f
c0021d6e:	75 1c                	jne    c0021d8c <__umoddi3+0x88>
c0021d70:	39 d8                	cmp    eax,ebx
c0021d72:	72 04                	jb     c0021d78 <__umoddi3+0x74>
c0021d74:	39 f7                	cmp    edi,esi
c0021d76:	77 08                	ja     c0021d80 <__umoddi3+0x7c>
c0021d78:	89 da                	mov    edx,ebx
c0021d7a:	29 fe                	sub    esi,edi
c0021d7c:	19 c2                	sbb    edx,eax
c0021d7e:	89 f1                	mov    ecx,esi
c0021d80:	89 c8                	mov    eax,ecx
c0021d82:	83 c4 1c             	add    esp,0x1c
c0021d85:	5b                   	pop    ebx
c0021d86:	5e                   	pop    esi
c0021d87:	5f                   	pop    edi
c0021d88:	5d                   	pop    ebp
c0021d89:	c3                   	ret    
c0021d8a:	66 90                	xchg   ax,ax
c0021d8c:	ba 20 00 00 00       	mov    edx,0x20
c0021d91:	29 ea                	sub    edx,ebp
c0021d93:	89 e9                	mov    ecx,ebp
c0021d95:	d3 e0                	shl    eax,cl
c0021d97:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021d9b:	89 f8                	mov    eax,edi
c0021d9d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021da1:	88 d1                	mov    cl,dl
c0021da3:	d3 e8                	shr    eax,cl
c0021da5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0021da9:	09 c1                	or     ecx,eax
c0021dab:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0021daf:	89 e9                	mov    ecx,ebp
c0021db1:	d3 e7                	shl    edi,cl
c0021db3:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0021db7:	89 d8                	mov    eax,ebx
c0021db9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021dbd:	88 d1                	mov    cl,dl
c0021dbf:	d3 e8                	shr    eax,cl
c0021dc1:	89 c7                	mov    edi,eax
c0021dc3:	89 e9                	mov    ecx,ebp
c0021dc5:	d3 e3                	shl    ebx,cl
c0021dc7:	89 f0                	mov    eax,esi
c0021dc9:	88 d1                	mov    cl,dl
c0021dcb:	d3 e8                	shr    eax,cl
c0021dcd:	09 d8                	or     eax,ebx
c0021dcf:	89 e9                	mov    ecx,ebp
c0021dd1:	d3 e6                	shl    esi,cl
c0021dd3:	89 f3                	mov    ebx,esi
c0021dd5:	89 fa                	mov    edx,edi
c0021dd7:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0021ddb:	89 d1                	mov    ecx,edx
c0021ddd:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0021de1:	89 c6                	mov    esi,eax
c0021de3:	89 d7                	mov    edi,edx
c0021de5:	39 d1                	cmp    ecx,edx
c0021de7:	72 27                	jb     c0021e10 <__umoddi3+0x10c>
c0021de9:	74 21                	je     c0021e0c <__umoddi3+0x108>
c0021deb:	89 ca                	mov    edx,ecx
c0021ded:	29 f3                	sub    ebx,esi
c0021def:	19 fa                	sbb    edx,edi
c0021df1:	89 d0                	mov    eax,edx
c0021df3:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0021df7:	d3 e0                	shl    eax,cl
c0021df9:	89 e9                	mov    ecx,ebp
c0021dfb:	d3 eb                	shr    ebx,cl
c0021dfd:	09 d8                	or     eax,ebx
c0021dff:	d3 ea                	shr    edx,cl
c0021e01:	83 c4 1c             	add    esp,0x1c
c0021e04:	5b                   	pop    ebx
c0021e05:	5e                   	pop    esi
c0021e06:	5f                   	pop    edi
c0021e07:	5d                   	pop    ebp
c0021e08:	c3                   	ret    
c0021e09:	8d 76 00             	lea    esi,[esi+0x0]
c0021e0c:	39 c3                	cmp    ebx,eax
c0021e0e:	73 db                	jae    c0021deb <__umoddi3+0xe7>
c0021e10:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0021e14:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0021e18:	89 d7                	mov    edi,edx
c0021e1a:	89 c6                	mov    esi,eax
c0021e1c:	eb cd                	jmp    c0021deb <__umoddi3+0xe7>

Disassembly of section .init:

c0021e1e <_init>:
c0021e1e:	55                   	push   ebp
c0021e1f:	89 e5                	mov    ebp,esp
c0021e21:	e8 ce e2 fd ff       	call   c00000f4 <frame_dummy>
c0021e26:	e8 e5 fa ff ff       	call   c0021910 <__do_global_ctors_aux>
c0021e2b:	5d                   	pop    ebp
c0021e2c:	c3                   	ret    

Disassembly of section .fini:

c0021e2d <_fini>:
c0021e2d:	55                   	push   ebp
c0021e2e:	89 e5                	mov    ebp,esp
c0021e30:	e8 4f e2 fd ff       	call   c0000084 <__do_global_dtors_aux>
c0021e35:	5d                   	pop    ebp
c0021e36:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c0021e38 <DriverlessDevice::~DriverlessDevice()>:
c0021e38:	ba bc 38 02 c0       	mov    edx,0xc00238bc
c0021e3d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021e41:	89 10                	mov    DWORD PTR [eax],edx
c0021e43:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021e47:	50                   	push   eax
c0021e48:	e8 ab 7a fe ff       	call   c00098f8 <Device::~Device()>
c0021e4d:	83 c4 04             	add    esp,0x4
c0021e50:	90                   	nop
c0021e51:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c0021e52 <DriverlessDevice::~DriverlessDevice()>:
c0021e52:	83 ec 0c             	sub    esp,0xc
c0021e55:	83 ec 0c             	sub    esp,0xc
c0021e58:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021e5c:	e8 d7 ff ff ff       	call   c0021e38 <DriverlessDevice::~DriverlessDevice()>
c0021e61:	83 c4 10             	add    esp,0x10
c0021e64:	83 ec 08             	sub    esp,0x8
c0021e67:	68 58 01 00 00       	push   0x158
c0021e6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021e70:	e8 80 b4 fe ff       	call   c000d2f5 <operator delete(void*, unsigned long)>
c0021e75:	83 c4 10             	add    esp,0x10
c0021e78:	83 c4 0c             	add    esp,0xc
c0021e7b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c0021e7c <LinkedList<Device>::addElement(Device*)>:
c0021e7c:	83 ec 0c             	sub    esp,0xc
c0021e7f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0021e84:	75 10                	jne    c0021e96 <LinkedList<Device>::addElement(Device*)+0x1a>
c0021e86:	83 ec 0c             	sub    esp,0xc
c0021e89:	68 50 38 02 c0       	push   0xc0023850
c0021e8e:	e8 f7 df fe ff       	call   c000fe8a <KePanic(char const*)>
c0021e93:	83 c4 10             	add    esp,0x10
c0021e96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021e9a:	8b 00                	mov    eax,DWORD PTR [eax]
c0021e9c:	85 c0                	test   eax,eax
c0021e9e:	74 3a                	je     c0021eda <LinkedList<Device>::addElement(Device*)+0x5e>
c0021ea0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ea4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021ea7:	85 c0                	test   eax,eax
c0021ea9:	74 2f                	je     c0021eda <LinkedList<Device>::addElement(Device*)+0x5e>
c0021eab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021eaf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021eb2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021eb6:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c0021ebc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ec0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021ec4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0021ec7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ecb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021ece:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0021ed8:	eb 68                	jmp    c0021f42 <LinkedList<Device>::addElement(Device*)+0xc6>
c0021eda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ede:	8b 00                	mov    eax,DWORD PTR [eax]
c0021ee0:	85 c0                	test   eax,eax
c0021ee2:	75 4e                	jne    c0021f32 <LinkedList<Device>::addElement(Device*)+0xb6>
c0021ee4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ee8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021eeb:	85 c0                	test   eax,eax
c0021eed:	75 43                	jne    c0021f32 <LinkedList<Device>::addElement(Device*)+0xb6>
c0021eef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ef3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021ef7:	89 10                	mov    DWORD PTR [eax],edx
c0021ef9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021efd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021f01:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0021f04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f08:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021f0b:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0021f15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f19:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021f1c:	85 c0                	test   eax,eax
c0021f1e:	74 22                	je     c0021f42 <LinkedList<Device>::addElement(Device*)+0xc6>
c0021f20:	83 ec 0c             	sub    esp,0xc
c0021f23:	68 72 38 02 c0       	push   0xc0023872
c0021f28:	e8 5d df fe ff       	call   c000fe8a <KePanic(char const*)>
c0021f2d:	83 c4 10             	add    esp,0x10
c0021f30:	eb 10                	jmp    c0021f42 <LinkedList<Device>::addElement(Device*)+0xc6>
c0021f32:	83 ec 0c             	sub    esp,0xc
c0021f35:	68 7c 38 02 c0       	push   0xc002387c
c0021f3a:	e8 4b df fe ff       	call   c000fe8a <KePanic(char const*)>
c0021f3f:	83 c4 10             	add    esp,0x10
c0021f42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f46:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021f49:	8d 50 01             	lea    edx,[eax+0x1]
c0021f4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f50:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021f53:	90                   	nop
c0021f54:	83 c4 0c             	add    esp,0xc
c0021f57:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c0021f58 <LinkedList<Device>::LinkedList()>:
c0021f58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021f5c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021f62:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021f66:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021f6d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021f71:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0021f78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021f7c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021f82:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021f86:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021f8d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021f91:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0021f98:	90                   	nop
c0021f99:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c0021f9c <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c0021f9c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021fa0:	8b 00                	mov    eax,DWORD PTR [eax]
c0021fa2:	85 c0                	test   eax,eax
c0021fa4:	75 0e                	jne    c0021fb4 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0021fa6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021faa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021fad:	85 c0                	test   eax,eax
c0021faf:	75 03                	jne    c0021fb4 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0021fb1:	b0 01                	mov    al,0x1
c0021fb3:	c3                   	ret    
c0021fb4:	b0 00                	mov    al,0x0
c0021fb6:	90                   	nop
c0021fb7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c0021fb8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c0021fb8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021fbc:	8b 00                	mov    eax,DWORD PTR [eax]
c0021fbe:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0021fc0 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0021fc0:	83 ec 0c             	sub    esp,0xc
c0021fc3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021fc7:	8b 00                	mov    eax,DWORD PTR [eax]
c0021fc9:	85 c0                	test   eax,eax
c0021fcb:	75 17                	jne    c0021fe4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c0021fcd:	83 ec 0c             	sub    esp,0xc
c0021fd0:	68 ec 3a 02 c0       	push   0xc0023aec
c0021fd5:	e8 b0 de fe ff       	call   c000fe8a <KePanic(char const*)>
c0021fda:	83 c4 10             	add    esp,0x10
c0021fdd:	e9 96 00 00 00       	jmp    c0022078 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb8>
c0021fe2:	66 90                	xchg   ax,ax
c0021fe4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021fe8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021feb:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0021fee:	85 c0                	test   eax,eax
c0021ff0:	0f 95 c0             	setne  al
c0021ff3:	0f b6 c0             	movzx  eax,al
c0021ff6:	85 c0                	test   eax,eax
c0021ff8:	74 12                	je     c002200c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x4c>
c0021ffa:	83 ec 0c             	sub    esp,0xc
c0021ffd:	68 37 3b 02 c0       	push   0xc0023b37
c0022002:	e8 83 de fe ff       	call   c000fe8a <KePanic(char const*)>
c0022007:	83 c4 10             	add    esp,0x10
c002200a:	66 90                	xchg   ax,ax
c002200c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022010:	8b 00                	mov    eax,DWORD PTR [eax]
c0022012:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0022015:	85 c0                	test   eax,eax
c0022017:	0f 94 c0             	sete   al
c002201a:	0f b6 c0             	movzx  eax,al
c002201d:	85 c0                	test   eax,eax
c002201f:	74 33                	je     c0022054 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x94>
c0022021:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022025:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002202b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002202f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0022036:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002203a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002203d:	83 f8 01             	cmp    eax,0x1
c0022040:	74 22                	je     c0022064 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c0022042:	83 ec 0c             	sub    esp,0xc
c0022045:	68 10 3b 02 c0       	push   0xc0023b10
c002204a:	e8 3b de fe ff       	call   c000fe8a <KePanic(char const*)>
c002204f:	83 c4 10             	add    esp,0x10
c0022052:	eb 10                	jmp    c0022064 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c0022054:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022058:	8b 00                	mov    eax,DWORD PTR [eax]
c002205a:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c002205d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022061:	89 10                	mov    DWORD PTR [eax],edx
c0022063:	90                   	nop
c0022064:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022068:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002206b:	8d 50 ff             	lea    edx,[eax-0x1]
c002206e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022072:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022075:	8d 76 00             	lea    esi,[esi+0x0]
c0022078:	83 c4 0c             	add    esp,0xc
c002207b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c002207c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c002207c:	83 ec 0c             	sub    esp,0xc
c002207f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0022084:	75 12                	jne    c0022098 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c0022086:	83 ec 0c             	sub    esp,0xc
c0022089:	68 50 38 02 c0       	push   0xc0023850
c002208e:	e8 f7 dd fe ff       	call   c000fe8a <KePanic(char const*)>
c0022093:	83 c4 10             	add    esp,0x10
c0022096:	66 90                	xchg   ax,ax
c0022098:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002209c:	8b 00                	mov    eax,DWORD PTR [eax]
c002209e:	85 c0                	test   eax,eax
c00220a0:	74 36                	je     c00220d8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c00220a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00220a6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00220a9:	85 c0                	test   eax,eax
c00220ab:	74 2b                	je     c00220d8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c00220ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00220b1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00220b4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00220b8:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00220bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00220bf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00220c3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00220c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00220ca:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00220cd:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00220d4:	eb 6a                	jmp    c0022140 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c00220d6:	66 90                	xchg   ax,ax
c00220d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00220dc:	8b 00                	mov    eax,DWORD PTR [eax]
c00220de:	85 c0                	test   eax,eax
c00220e0:	75 4e                	jne    c0022130 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c00220e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00220e6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00220e9:	85 c0                	test   eax,eax
c00220eb:	75 43                	jne    c0022130 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c00220ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00220f1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00220f5:	89 10                	mov    DWORD PTR [eax],edx
c00220f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00220fb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00220ff:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0022102:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022106:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022109:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0022110:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022114:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022117:	85 c0                	test   eax,eax
c0022119:	74 25                	je     c0022140 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c002211b:	83 ec 0c             	sub    esp,0xc
c002211e:	68 72 38 02 c0       	push   0xc0023872
c0022123:	e8 62 dd fe ff       	call   c000fe8a <KePanic(char const*)>
c0022128:	83 c4 10             	add    esp,0x10
c002212b:	eb 13                	jmp    c0022140 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c002212d:	8d 76 00             	lea    esi,[esi+0x0]
c0022130:	83 ec 0c             	sub    esp,0xc
c0022133:	68 7c 38 02 c0       	push   0xc002387c
c0022138:	e8 4d dd fe ff       	call   c000fe8a <KePanic(char const*)>
c002213d:	83 c4 10             	add    esp,0x10
c0022140:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022144:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022147:	8d 50 01             	lea    edx,[eax+0x1]
c002214a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002214e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022151:	90                   	nop
c0022152:	83 c4 0c             	add    esp,0xc
c0022155:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0022158 <ACPI::~ACPI()>:
c0022158:	83 ec 0c             	sub    esp,0xc
c002215b:	ba 68 3f 02 c0       	mov    edx,0xc0023f68
c0022160:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022164:	89 10                	mov    DWORD PTR [eax],edx
c0022166:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002216a:	83 ec 0c             	sub    esp,0xc
c002216d:	50                   	push   eax
c002216e:	e8 85 77 fe ff       	call   c00098f8 <Device::~Device()>
c0022173:	83 c4 10             	add    esp,0x10
c0022176:	90                   	nop
c0022177:	83 c4 0c             	add    esp,0xc
c002217a:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c002217c <ACPI::~ACPI()>:
c002217c:	83 ec 0c             	sub    esp,0xc
c002217f:	83 ec 0c             	sub    esp,0xc
c0022182:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022186:	e8 cd ff ff ff       	call   c0022158 <ACPI::~ACPI()>
c002218b:	83 c4 10             	add    esp,0x10
c002218e:	83 ec 08             	sub    esp,0x8
c0022191:	68 64 12 00 00       	push   0x1264
c0022196:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002219a:	e8 56 b1 fe ff       	call   c000d2f5 <operator delete(void*, unsigned long)>
c002219f:	83 c4 10             	add    esp,0x10
c00221a2:	83 c4 0c             	add    esp,0xc
c00221a5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c00221a8 <LinkedList<Device>::~LinkedList()>:
c00221a8:	90                   	nop
c00221a9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c00221ac <LinkedList<Device>::isEmpty()>:
c00221ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00221b0:	8b 00                	mov    eax,DWORD PTR [eax]
c00221b2:	85 c0                	test   eax,eax
c00221b4:	75 0e                	jne    c00221c4 <LinkedList<Device>::isEmpty()+0x18>
c00221b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00221ba:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00221bd:	85 c0                	test   eax,eax
c00221bf:	75 03                	jne    c00221c4 <LinkedList<Device>::isEmpty()+0x18>
c00221c1:	b0 01                	mov    al,0x1
c00221c3:	c3                   	ret    
c00221c4:	b0 00                	mov    al,0x0
c00221c6:	90                   	nop
c00221c7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c00221c8 <LinkedList<Device>::getFirstElement()>:
c00221c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00221cc:	8b 00                	mov    eax,DWORD PTR [eax]
c00221ce:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c00221d0 <LinkedList<Device>::removeFirst()>:
c00221d0:	83 ec 0c             	sub    esp,0xc
c00221d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221d7:	8b 00                	mov    eax,DWORD PTR [eax]
c00221d9:	85 c0                	test   eax,eax
c00221db:	75 17                	jne    c00221f4 <LinkedList<Device>::removeFirst()+0x24>
c00221dd:	83 ec 0c             	sub    esp,0xc
c00221e0:	68 ec 3a 02 c0       	push   0xc0023aec
c00221e5:	e8 a0 dc fe ff       	call   c000fe8a <KePanic(char const*)>
c00221ea:	83 c4 10             	add    esp,0x10
c00221ed:	e9 92 00 00 00       	jmp    c0022284 <LinkedList<Device>::removeFirst()+0xb4>
c00221f2:	66 90                	xchg   ax,ax
c00221f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221f8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00221fb:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0022201:	85 c0                	test   eax,eax
c0022203:	74 13                	je     c0022218 <LinkedList<Device>::removeFirst()+0x48>
c0022205:	83 ec 0c             	sub    esp,0xc
c0022208:	68 37 3b 02 c0       	push   0xc0023b37
c002220d:	e8 78 dc fe ff       	call   c000fe8a <KePanic(char const*)>
c0022212:	83 c4 10             	add    esp,0x10
c0022215:	8d 76 00             	lea    esi,[esi+0x0]
c0022218:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002221c:	8b 00                	mov    eax,DWORD PTR [eax]
c002221e:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0022224:	85 c0                	test   eax,eax
c0022226:	75 34                	jne    c002225c <LinkedList<Device>::removeFirst()+0x8c>
c0022228:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002222c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022232:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022236:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002223d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022241:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022244:	83 f8 01             	cmp    eax,0x1
c0022247:	74 27                	je     c0022270 <LinkedList<Device>::removeFirst()+0xa0>
c0022249:	83 ec 0c             	sub    esp,0xc
c002224c:	68 10 3b 02 c0       	push   0xc0023b10
c0022251:	e8 34 dc fe ff       	call   c000fe8a <KePanic(char const*)>
c0022256:	83 c4 10             	add    esp,0x10
c0022259:	eb 15                	jmp    c0022270 <LinkedList<Device>::removeFirst()+0xa0>
c002225b:	90                   	nop
c002225c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022260:	8b 00                	mov    eax,DWORD PTR [eax]
c0022262:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c0022268:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002226c:	89 10                	mov    DWORD PTR [eax],edx
c002226e:	66 90                	xchg   ax,ax
c0022270:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022274:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022277:	8d 50 ff             	lea    edx,[eax-0x1]
c002227a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002227e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022281:	8d 76 00             	lea    esi,[esi+0x0]
c0022284:	83 c4 0c             	add    esp,0xc
c0022287:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0022288 <Computer::~Computer()>:
c0022288:	83 ec 0c             	sub    esp,0xc
c002228b:	ba 18 42 02 c0       	mov    edx,0xc0024218
c0022290:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022294:	89 10                	mov    DWORD PTR [eax],edx
c0022296:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002229a:	83 ec 0c             	sub    esp,0xc
c002229d:	50                   	push   eax
c002229e:	e8 55 76 fe ff       	call   c00098f8 <Device::~Device()>
c00222a3:	83 c4 10             	add    esp,0x10
c00222a6:	90                   	nop
c00222a7:	83 c4 0c             	add    esp,0xc
c00222aa:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c00222ac <Computer::~Computer()>:
c00222ac:	83 ec 0c             	sub    esp,0xc
c00222af:	83 ec 0c             	sub    esp,0xc
c00222b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00222b6:	e8 cd ff ff ff       	call   c0022288 <Computer::~Computer()>
c00222bb:	83 c4 10             	add    esp,0x10
c00222be:	83 ec 08             	sub    esp,0x8
c00222c1:	68 6c 01 00 00       	push   0x16c
c00222c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00222ca:	e8 26 b0 fe ff       	call   c000d2f5 <operator delete(void*, unsigned long)>
c00222cf:	83 c4 10             	add    esp,0x10
c00222d2:	83 c4 0c             	add    esp,0xc
c00222d5:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c00222d6 <idleCommon()>:
c00222d6:	83 ec 0c             	sub    esp,0xc
c00222d9:	fa                   	cli    
c00222da:	ff 05 50 fa 02 c0    	inc    DWORD PTR ds:0xc002fa50
c00222e0:	e8 e7 4d ff ff       	call   c00170cc <schedule()>
c00222e5:	f0 ff 0d 50 fa 02 c0 	lock dec DWORD PTR ds:0xc002fa50
c00222ec:	83 3d 50 fa 02 c0 00 	cmp    DWORD PTR ds:0xc002fa50,0x0
c00222f3:	75 01                	jne    c00222f6 <idleCommon()+0x20>
c00222f5:	fb                   	sti    
c00222f6:	83 c4 0c             	add    esp,0xc
c00222f9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c00222fa <LinkedList<UnixFile>::~LinkedList()>:
c00222fa:	90                   	nop
c00222fb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c00222fc <LinkedList<UnixFile>::LinkedList()>:
c00222fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022300:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022306:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002230a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0022311:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022315:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002231c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022320:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022326:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002232a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0022331:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022335:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002233c:	90                   	nop
c002233d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c002233e <LinkedList<UnixFile>::addElement(UnixFile*)>:
c002233e:	83 ec 0c             	sub    esp,0xc
c0022341:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0022346:	75 10                	jne    c0022358 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c0022348:	83 ec 0c             	sub    esp,0xc
c002234b:	68 50 38 02 c0       	push   0xc0023850
c0022350:	e8 35 db fe ff       	call   c000fe8a <KePanic(char const*)>
c0022355:	83 c4 10             	add    esp,0x10
c0022358:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002235c:	8b 00                	mov    eax,DWORD PTR [eax]
c002235e:	85 c0                	test   eax,eax
c0022360:	74 34                	je     c0022396 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0022362:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022366:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022369:	85 c0                	test   eax,eax
c002236b:	74 29                	je     c0022396 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c002236d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022371:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022374:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022378:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002237b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002237f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022383:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0022386:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002238a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002238d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0022394:	eb 65                	jmp    c00223fb <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0022396:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002239a:	8b 00                	mov    eax,DWORD PTR [eax]
c002239c:	85 c0                	test   eax,eax
c002239e:	75 4b                	jne    c00223eb <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c00223a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00223a4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00223a7:	85 c0                	test   eax,eax
c00223a9:	75 40                	jne    c00223eb <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c00223ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00223af:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00223b3:	89 10                	mov    DWORD PTR [eax],edx
c00223b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00223b9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00223bd:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00223c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00223c4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00223c7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00223ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00223d2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00223d5:	85 c0                	test   eax,eax
c00223d7:	74 22                	je     c00223fb <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00223d9:	83 ec 0c             	sub    esp,0xc
c00223dc:	68 72 38 02 c0       	push   0xc0023872
c00223e1:	e8 a4 da fe ff       	call   c000fe8a <KePanic(char const*)>
c00223e6:	83 c4 10             	add    esp,0x10
c00223e9:	eb 10                	jmp    c00223fb <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00223eb:	83 ec 0c             	sub    esp,0xc
c00223ee:	68 7c 38 02 c0       	push   0xc002387c
c00223f3:	e8 92 da fe ff       	call   c000fe8a <KePanic(char const*)>
c00223f8:	83 c4 10             	add    esp,0x10
c00223fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00223ff:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022402:	8d 50 01             	lea    edx,[eax+0x1]
c0022405:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022409:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002240c:	90                   	nop
c002240d:	83 c4 0c             	add    esp,0xc
c0022410:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c0022412 <LinkedList<UnixFile>::getFirstElement()>:
c0022412:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022416:	8b 00                	mov    eax,DWORD PTR [eax]
c0022418:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c002241a <LinkedList<UnixFile>::removeFirst()>:
c002241a:	83 ec 0c             	sub    esp,0xc
c002241d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022421:	8b 00                	mov    eax,DWORD PTR [eax]
c0022423:	85 c0                	test   eax,eax
c0022425:	75 12                	jne    c0022439 <LinkedList<UnixFile>::removeFirst()+0x1f>
c0022427:	83 ec 0c             	sub    esp,0xc
c002242a:	68 ec 3a 02 c0       	push   0xc0023aec
c002242f:	e8 56 da fe ff       	call   c000fe8a <KePanic(char const*)>
c0022434:	83 c4 10             	add    esp,0x10
c0022437:	eb 7e                	jmp    c00224b7 <LinkedList<UnixFile>::removeFirst()+0x9d>
c0022439:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002243d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022440:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022443:	85 c0                	test   eax,eax
c0022445:	74 10                	je     c0022457 <LinkedList<UnixFile>::removeFirst()+0x3d>
c0022447:	83 ec 0c             	sub    esp,0xc
c002244a:	68 37 3b 02 c0       	push   0xc0023b37
c002244f:	e8 36 da fe ff       	call   c000fe8a <KePanic(char const*)>
c0022454:	83 c4 10             	add    esp,0x10
c0022457:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002245b:	8b 00                	mov    eax,DWORD PTR [eax]
c002245d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022460:	85 c0                	test   eax,eax
c0022462:	75 33                	jne    c0022497 <LinkedList<UnixFile>::removeFirst()+0x7d>
c0022464:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022468:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002246e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022472:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0022479:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002247d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022480:	83 f8 01             	cmp    eax,0x1
c0022483:	74 21                	je     c00224a6 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0022485:	83 ec 0c             	sub    esp,0xc
c0022488:	68 10 3b 02 c0       	push   0xc0023b10
c002248d:	e8 f8 d9 fe ff       	call   c000fe8a <KePanic(char const*)>
c0022492:	83 c4 10             	add    esp,0x10
c0022495:	eb 0f                	jmp    c00224a6 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0022497:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002249b:	8b 00                	mov    eax,DWORD PTR [eax]
c002249d:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c00224a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00224a4:	89 10                	mov    DWORD PTR [eax],edx
c00224a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00224aa:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00224ad:	8d 50 ff             	lea    edx,[eax-0x1]
c00224b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00224b4:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00224b7:	83 c4 0c             	add    esp,0xc
c00224ba:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c00224bc <LinkedList<UnixFile>::getNext(UnixFile*)>:
c00224bc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00224c0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00224c3:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c00224c4 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c00224c4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00224c8:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00224cb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c00224cc <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c00224cc:	90                   	nop
c00224cd:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c00224d0 <ThreadControlBlock::ThreadControlBlock()>:
c00224d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00224d4:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00224db:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00224df:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c00224e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00224ea:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c00224f1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00224f5:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c00224fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022500:	c7 40 59 00 00 00 00 	mov    DWORD PTR [eax+0x59],0x0
c0022507:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002250b:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c002250f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022513:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c0022517:	90                   	nop
c0022518:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c002251c <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c002251c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022520:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022526:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002252a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0022531:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022535:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002253c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022540:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022546:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002254a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0022551:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022555:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002255c:	90                   	nop
c002255d:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c002255e <IOAPIC::~IOAPIC()>:
c002255e:	83 ec 0c             	sub    esp,0xc
c0022561:	ba 78 59 02 c0       	mov    edx,0xc0025978
c0022566:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002256a:	89 10                	mov    DWORD PTR [eax],edx
c002256c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022570:	83 ec 0c             	sub    esp,0xc
c0022573:	50                   	push   eax
c0022574:	e8 7f 73 fe ff       	call   c00098f8 <Device::~Device()>
c0022579:	83 c4 10             	add    esp,0x10
c002257c:	90                   	nop
c002257d:	83 c4 0c             	add    esp,0xc
c0022580:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0022582 <IOAPIC::~IOAPIC()>:
c0022582:	83 ec 0c             	sub    esp,0xc
c0022585:	83 ec 0c             	sub    esp,0xc
c0022588:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002258c:	e8 cd ff ff ff       	call   c002255e <IOAPIC::~IOAPIC()>
c0022591:	83 c4 10             	add    esp,0x10
c0022594:	83 ec 08             	sub    esp,0x8
c0022597:	68 68 01 00 00       	push   0x168
c002259c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00225a0:	e8 50 ad fe ff       	call   c000d2f5 <operator delete(void*, unsigned long)>
c00225a5:	83 c4 10             	add    esp,0x10
c00225a8:	83 c4 0c             	add    esp,0xc
c00225ab:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c00225ac <CPU::~CPU()>:
c00225ac:	83 ec 0c             	sub    esp,0xc
c00225af:	ba ec 5c 02 c0       	mov    edx,0xc0025cec
c00225b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00225b8:	89 10                	mov    DWORD PTR [eax],edx
c00225ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00225be:	83 ec 0c             	sub    esp,0xc
c00225c1:	50                   	push   eax
c00225c2:	e8 31 73 fe ff       	call   c00098f8 <Device::~Device()>
c00225c7:	83 c4 10             	add    esp,0x10
c00225ca:	90                   	nop
c00225cb:	83 c4 0c             	add    esp,0xc
c00225ce:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c00225d0 <CPU::~CPU()>:
c00225d0:	83 ec 0c             	sub    esp,0xc
c00225d3:	83 ec 0c             	sub    esp,0xc
c00225d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00225da:	e8 cd ff ff ff       	call   c00225ac <CPU::~CPU()>
c00225df:	83 c4 10             	add    esp,0x10
c00225e2:	83 ec 08             	sub    esp,0x8
c00225e5:	68 78 11 00 00       	push   0x1178
c00225ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00225ee:	e8 02 ad fe ff       	call   c000d2f5 <operator delete(void*, unsigned long)>
c00225f3:	83 c4 10             	add    esp,0x10
c00225f6:	83 c4 0c             	add    esp,0xc
c00225f9:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c00225fa <PCI::~PCI()>:
c00225fa:	83 ec 0c             	sub    esp,0xc
c00225fd:	ba 50 62 02 c0       	mov    edx,0xc0026250
c0022602:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022606:	89 10                	mov    DWORD PTR [eax],edx
c0022608:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002260c:	83 ec 0c             	sub    esp,0xc
c002260f:	50                   	push   eax
c0022610:	e8 87 63 fe ff       	call   c000899c <Bus::~Bus()>
c0022615:	83 c4 10             	add    esp,0x10
c0022618:	90                   	nop
c0022619:	83 c4 0c             	add    esp,0xc
c002261c:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c002261e <PCI::~PCI()>:
c002261e:	83 ec 0c             	sub    esp,0xc
c0022621:	83 ec 0c             	sub    esp,0xc
c0022624:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022628:	e8 cd ff ff ff       	call   c00225fa <PCI::~PCI()>
c002262d:	83 c4 10             	add    esp,0x10
c0022630:	83 ec 08             	sub    esp,0x8
c0022633:	68 5c 01 00 00       	push   0x15c
c0022638:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002263c:	e8 b4 ac fe ff       	call   c000d2f5 <operator delete(void*, unsigned long)>
c0022641:	83 c4 10             	add    esp,0x10
c0022644:	83 c4 0c             	add    esp,0xc
c0022647:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0022648 <IDE::~IDE()>:
c0022648:	83 ec 0c             	sub    esp,0xc
c002264b:	ba a0 63 02 c0       	mov    edx,0xc00263a0
c0022650:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022654:	89 10                	mov    DWORD PTR [eax],edx
c0022656:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002265a:	83 ec 0c             	sub    esp,0xc
c002265d:	50                   	push   eax
c002265e:	e8 25 77 fe ff       	call   c0009d88 <HardDiskController::~HardDiskController()>
c0022663:	83 c4 10             	add    esp,0x10
c0022666:	90                   	nop
c0022667:	83 c4 0c             	add    esp,0xc
c002266a:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c002266c <IDE::~IDE()>:
c002266c:	83 ec 0c             	sub    esp,0xc
c002266f:	83 ec 0c             	sub    esp,0xc
c0022672:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022676:	e8 cd ff ff ff       	call   c0022648 <IDE::~IDE()>
c002267b:	83 c4 10             	add    esp,0x10
c002267e:	83 ec 08             	sub    esp,0x8
c0022681:	68 70 02 00 00       	push   0x270
c0022686:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002268a:	e8 66 ac fe ff       	call   c000d2f5 <operator delete(void*, unsigned long)>
c002268f:	83 c4 10             	add    esp,0x10
c0022692:	83 c4 0c             	add    esp,0xc
c0022695:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0022696 <SATABus::~SATABus()>:
c0022696:	83 ec 0c             	sub    esp,0xc
c0022699:	ba f0 63 02 c0       	mov    edx,0xc00263f0
c002269e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00226a2:	89 10                	mov    DWORD PTR [eax],edx
c00226a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00226a8:	83 ec 0c             	sub    esp,0xc
c00226ab:	50                   	push   eax
c00226ac:	e8 d7 76 fe ff       	call   c0009d88 <HardDiskController::~HardDiskController()>
c00226b1:	83 c4 10             	add    esp,0x10
c00226b4:	90                   	nop
c00226b5:	83 c4 0c             	add    esp,0xc
c00226b8:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c00226ba <SATABus::~SATABus()>:
c00226ba:	83 ec 0c             	sub    esp,0xc
c00226bd:	83 ec 0c             	sub    esp,0xc
c00226c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00226c4:	e8 cd ff ff ff       	call   c0022696 <SATABus::~SATABus()>
c00226c9:	83 c4 10             	add    esp,0x10
c00226cc:	83 ec 08             	sub    esp,0x8
c00226cf:	68 64 01 00 00       	push   0x164
c00226d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00226d8:	e8 18 ac fe ff       	call   c000d2f5 <operator delete(void*, unsigned long)>
c00226dd:	83 c4 10             	add    esp,0x10
c00226e0:	83 c4 0c             	add    esp,0xc
c00226e3:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c00226e4 <ATA::~ATA()>:
c00226e4:	83 ec 0c             	sub    esp,0xc
c00226e7:	ba d8 64 02 c0       	mov    edx,0xc00264d8
c00226ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00226f0:	89 10                	mov    DWORD PTR [eax],edx
c00226f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00226f6:	83 ec 0c             	sub    esp,0xc
c00226f9:	50                   	push   eax
c00226fa:	e8 6b 77 fe ff       	call   c0009e6a <PhysicalDisk::~PhysicalDisk()>
c00226ff:	83 c4 10             	add    esp,0x10
c0022702:	90                   	nop
c0022703:	83 c4 0c             	add    esp,0xc
c0022706:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0022708 <ATA::~ATA()>:
c0022708:	83 ec 0c             	sub    esp,0xc
c002270b:	83 ec 0c             	sub    esp,0xc
c002270e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022712:	e8 cd ff ff ff       	call   c00226e4 <ATA::~ATA()>
c0022717:	83 c4 10             	add    esp,0x10
c002271a:	83 ec 08             	sub    esp,0x8
c002271d:	68 8c 01 00 00       	push   0x18c
c0022722:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022726:	e8 ca ab fe ff       	call   c000d2f5 <operator delete(void*, unsigned long)>
c002272b:	83 c4 10             	add    esp,0x10
c002272e:	83 c4 0c             	add    esp,0xc
c0022731:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0022732 <ATAPI::~ATAPI()>:
c0022732:	83 ec 0c             	sub    esp,0xc
c0022735:	ba 20 65 02 c0       	mov    edx,0xc0026520
c002273a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002273e:	89 10                	mov    DWORD PTR [eax],edx
c0022740:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022744:	83 ec 0c             	sub    esp,0xc
c0022747:	50                   	push   eax
c0022748:	e8 1d 77 fe ff       	call   c0009e6a <PhysicalDisk::~PhysicalDisk()>
c002274d:	83 c4 10             	add    esp,0x10
c0022750:	90                   	nop
c0022751:	83 c4 0c             	add    esp,0xc
c0022754:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0022756 <ATAPI::~ATAPI()>:
c0022756:	83 ec 0c             	sub    esp,0xc
c0022759:	83 ec 0c             	sub    esp,0xc
c002275c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022760:	e8 cd ff ff ff       	call   c0022732 <ATAPI::~ATAPI()>
c0022765:	83 c4 10             	add    esp,0x10
c0022768:	83 ec 08             	sub    esp,0x8
c002276b:	68 84 01 00 00       	push   0x184
c0022770:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022774:	e8 7c ab fe ff       	call   c000d2f5 <operator delete(void*, unsigned long)>
c0022779:	83 c4 10             	add    esp,0x10
c002277c:	83 c4 0c             	add    esp,0xc
c002277f:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0022780 <SATA::~SATA()>:
c0022780:	83 ec 0c             	sub    esp,0xc
c0022783:	ba e0 65 02 c0       	mov    edx,0xc00265e0
c0022788:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002278c:	89 10                	mov    DWORD PTR [eax],edx
c002278e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022792:	83 ec 0c             	sub    esp,0xc
c0022795:	50                   	push   eax
c0022796:	e8 cf 76 fe ff       	call   c0009e6a <PhysicalDisk::~PhysicalDisk()>
c002279b:	83 c4 10             	add    esp,0x10
c002279e:	90                   	nop
c002279f:	83 c4 0c             	add    esp,0xc
c00227a2:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c00227a4 <SATA::~SATA()>:
c00227a4:	83 ec 0c             	sub    esp,0xc
c00227a7:	83 ec 0c             	sub    esp,0xc
c00227aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00227ae:	e8 cd ff ff ff       	call   c0022780 <SATA::~SATA()>
c00227b3:	83 c4 10             	add    esp,0x10
c00227b6:	83 ec 08             	sub    esp,0x8
c00227b9:	68 7c 01 00 00       	push   0x17c
c00227be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00227c2:	e8 2e ab fe ff       	call   c000d2f5 <operator delete(void*, unsigned long)>
c00227c7:	83 c4 10             	add    esp,0x10
c00227ca:	83 c4 0c             	add    esp,0xc
c00227cd:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c00227ce <SATAPI::~SATAPI()>:
c00227ce:	83 ec 0c             	sub    esp,0xc
c00227d1:	ba 04 67 02 c0       	mov    edx,0xc0026704
c00227d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00227da:	89 10                	mov    DWORD PTR [eax],edx
c00227dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00227e0:	83 ec 0c             	sub    esp,0xc
c00227e3:	50                   	push   eax
c00227e4:	e8 81 76 fe ff       	call   c0009e6a <PhysicalDisk::~PhysicalDisk()>
c00227e9:	83 c4 10             	add    esp,0x10
c00227ec:	90                   	nop
c00227ed:	83 c4 0c             	add    esp,0xc
c00227f0:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c00227f2 <SATAPI::~SATAPI()>:
c00227f2:	83 ec 0c             	sub    esp,0xc
c00227f5:	83 ec 0c             	sub    esp,0xc
c00227f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00227fc:	e8 cd ff ff ff       	call   c00227ce <SATAPI::~SATAPI()>
c0022801:	83 c4 10             	add    esp,0x10
c0022804:	83 ec 08             	sub    esp,0x8
c0022807:	68 84 01 00 00       	push   0x184
c002280c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022810:	e8 e0 aa fe ff       	call   c000d2f5 <operator delete(void*, unsigned long)>
c0022815:	83 c4 10             	add    esp,0x10
c0022818:	83 c4 0c             	add    esp,0xc
c002281b:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c002281c <APICTimer::~APICTimer()>:
c002281c:	83 ec 0c             	sub    esp,0xc
c002281f:	ba 58 67 02 c0       	mov    edx,0xc0026758
c0022824:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022828:	89 10                	mov    DWORD PTR [eax],edx
c002282a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002282e:	83 ec 0c             	sub    esp,0xc
c0022831:	50                   	push   eax
c0022832:	e8 01 88 fe ff       	call   c000b038 <Timer::~Timer()>
c0022837:	83 c4 10             	add    esp,0x10
c002283a:	90                   	nop
c002283b:	83 c4 0c             	add    esp,0xc
c002283e:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0022840 <APICTimer::~APICTimer()>:
c0022840:	83 ec 0c             	sub    esp,0xc
c0022843:	83 ec 0c             	sub    esp,0xc
c0022846:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002284a:	e8 cd ff ff ff       	call   c002281c <APICTimer::~APICTimer()>
c002284f:	83 c4 10             	add    esp,0x10
c0022852:	83 ec 08             	sub    esp,0x8
c0022855:	68 60 01 00 00       	push   0x160
c002285a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002285e:	e8 92 aa fe ff       	call   c000d2f5 <operator delete(void*, unsigned long)>
c0022863:	83 c4 10             	add    esp,0x10
c0022866:	83 c4 0c             	add    esp,0xc
c0022869:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c002286c <PIT::~PIT()>:
c002286c:	83 ec 0c             	sub    esp,0xc
c002286f:	ba a8 67 02 c0       	mov    edx,0xc00267a8
c0022874:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022878:	89 10                	mov    DWORD PTR [eax],edx
c002287a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002287e:	83 ec 0c             	sub    esp,0xc
c0022881:	50                   	push   eax
c0022882:	e8 b1 87 fe ff       	call   c000b038 <Timer::~Timer()>
c0022887:	83 c4 10             	add    esp,0x10
c002288a:	90                   	nop
c002288b:	83 c4 0c             	add    esp,0xc
c002288e:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0022890 <PIT::~PIT()>:
c0022890:	83 ec 0c             	sub    esp,0xc
c0022893:	83 ec 0c             	sub    esp,0xc
c0022896:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002289a:	e8 cd ff ff ff       	call   c002286c <PIT::~PIT()>
c002289f:	83 c4 10             	add    esp,0x10
c00228a2:	83 ec 08             	sub    esp,0x8
c00228a5:	68 5c 01 00 00       	push   0x15c
c00228aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00228ae:	e8 42 aa fe ff       	call   c000d2f5 <operator delete(void*, unsigned long)>
c00228b3:	83 c4 10             	add    esp,0x10
c00228b6:	83 c4 0c             	add    esp,0xc
c00228b9:	c3                   	ret    

Disassembly of section userkernel:

c0028000 <KiDefaultSignalHandlerAbort(int)>:
c0028000:	57                   	push   edi
c0028001:	b9 07 00 00 00       	mov    ecx,0x7
c0028006:	56                   	push   esi
c0028007:	be bb 45 02 c0       	mov    esi,0xc00245bb
c002800c:	83 ec 24             	sub    esp,0x24
c002800f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0028013:	fc                   	cld    
c0028014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0028016:	8d 44 24 04          	lea    eax,[esp+0x4]
c002801a:	50                   	push   eax
c002801b:	6a 00                	push   0x0
c002801d:	6a 38                	push   0x38
c002801f:	6a 01                	push   0x1
c0028021:	e8 2c 00 00 00       	call   c0028052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0028026:	83 c4 34             	add    esp,0x34
c0028029:	5e                   	pop    esi
c002802a:	5f                   	pop    edi
c002802b:	c3                   	ret    

c002802c <KiDefaultSignalHandlerTerminate(int)>:
c002802c:	57                   	push   edi
c002802d:	b9 08 00 00 00       	mov    ecx,0x8
c0028032:	56                   	push   esi
c0028033:	be d7 45 02 c0       	mov    esi,0xc00245d7
c0028038:	83 ec 24             	sub    esp,0x24
c002803b:	89 e7                	mov    edi,esp
c002803d:	fc                   	cld    
c002803e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0028040:	54                   	push   esp
c0028041:	6a 00                	push   0x0
c0028043:	6a 37                	push   0x37
c0028045:	6a 01                	push   0x1
c0028047:	e8 06 00 00 00       	call   c0028052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c002804c:	83 c4 34             	add    esp,0x34
c002804f:	5e                   	pop    esi
c0028050:	5f                   	pop    edi
c0028051:	c3                   	ret    

c0028052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0028052:	53                   	push   ebx
c0028053:	83 ec 10             	sub    esp,0x10
c0028056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002805a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c002805e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0028062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0028066:	cd 60                	int    0x60
c0028068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002806c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0028070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0028074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028078:	83 c4 10             	add    esp,0x10
c002807b:	5b                   	pop    ebx
c002807c:	c3                   	ret    

Disassembly of section align_previous:

c0029000 <DO_NOT_DELETE()>:
c0029000:	c3                   	ret    
