
kernel/KRNLP2.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 ef ea 00 00       	call   c000eb0f <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 a8 44 02 c0       	mov    eax,0xc00244a8
c0000025:	3d a8 44 02 c0       	cmp    eax,0xc00244a8
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 a8 44 02 c0       	push   0xc00244a8
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 a8 44 02 c0       	mov    eax,0xc00244a8
c0000051:	2d a8 44 02 c0       	sub    eax,0xc00244a8
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 a8 44 02 c0       	push   0xc00244a8
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d c0 60 02 c0 00 	cmp    BYTE PTR ds:0xc00260c0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb 20 07 02 c0       	mov    ebx,0xc0020720
c0000097:	81 eb 1c 07 02 c0    	sub    ebx,0xc002071c
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be 1c 07 02 c0       	mov    esi,0xc002071c
c00000a6:	a1 c4 60 02 c0       	mov    eax,ds:0xc00260c4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 c4 60 02 c0       	mov    ds:0xc00260c4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 c4 60 02 c0       	mov    eax,ds:0xc00260c4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 a8 44 02 c0       	push   0xc00244a8
c00000d8:	e8 23 ff ff 3f       	call   0 <SIG_STATE_STRUCT>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 c0 60 02 c0 01 	mov    BYTE PTR ds:0xc00260c0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 c8 60 02 c0       	push   0xc00260c8
c0000108:	68 a8 44 02 c0       	push   0xc00244a8
c000010d:	e8 ee fe ff 3f       	call   0 <SIG_STATE_STRUCT>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000297:	0f 20 d9             	mov    ecx,cr3
c000029a:	39 c8                	cmp    eax,ecx
c000029c:	74 03                	je     c00002a1 <commonThreadSwitch.doneVAS>
c000029e:	0f 22 d8             	mov    cr3,eax

c00002a1 <commonThreadSwitch.doneVAS>:
c00002a1:	85 d2                	test   edx,edx
c00002a3:	75 11                	jne    c00002b6 <commonThreadSwitch.firstTime>
c00002a5:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a8:	e8 77 49 01 00       	call   c0014c24 <changeTSS>
c00002ad:	5d                   	pop    ebp
c00002ae:	5f                   	pop    edi
c00002af:	5e                   	pop    esi
c00002b0:	5a                   	pop    edx
c00002b1:	59                   	pop    ecx
c00002b2:	5b                   	pop    ebx
c00002b3:	58                   	pop    eax
c00002b4:	9d                   	popf   
c00002b5:	c3                   	ret    

c00002b6 <commonThreadSwitch.firstTime>:
c00002b6:	fa                   	cli    
c00002b7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002ba:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002bf:	60                   	pusha  
c00002c0:	e8 0a 2d 01 00       	call   c0012fcf <mapVASFirstTime>
c00002c5:	61                   	popa   
c00002c6:	89 c4                	mov    esp,eax
c00002c8:	56                   	push   esi
c00002c9:	52                   	push   edx
c00002ca:	e8 55 49 01 00       	call   c0014c24 <changeTSS>
c00002cf:	5a                   	pop    edx
c00002d0:	5e                   	pop    esi
c00002d1:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	59                   	pop    ecx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	81 c4 04 00 00 00    	add    esp,0x4
c00002e5:	6a 02                	push   0x2
c00002e7:	9d                   	popf   
c00002e8:	52                   	push   edx
c00002e9:	e8 62 4e 01 00       	call   c0015150 <taskStartupFunction>
c00002ee:	5a                   	pop    edx
c00002ef:	50                   	push   eax
c00002f0:	ff d2                	call   edx
c00002f2:	e8 f5 52 01 00       	call   c00155ec <taskReturned>
c00002f7:	e9 fb ff ff ff       	jmp    c00002f7 <commonThreadSwitch.firstTime+0x41>

c00002fc <asmQuickAcquireLock>:
c00002fc:	55                   	push   ebp
c00002fd:	89 e5                	mov    ebp,esp
c00002ff:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000302 <asmQuickAcquireLock.retry>:
c0000302:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000307:	72 02                	jb     c000030b <asmQuickAcquireLock.spin_with_pause>
c0000309:	fa                   	cli    
c000030a:	c3                   	ret    

c000030b <asmQuickAcquireLock.spin_with_pause>:
c000030b:	f3 90                	pause  
c000030d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000313:	75 f6                	jne    c000030b <asmQuickAcquireLock.spin_with_pause>
c0000315:	e9 e8 ff ff ff       	jmp    c0000302 <asmQuickAcquireLock.retry>

c000031a <asmQuickReleaseLock>:
c000031a:	55                   	push   ebp
c000031b:	89 e5                	mov    ebp,esp
c000031d:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000324:	5d                   	pop    ebp
c0000325:	c3                   	ret    

c0000326 <asmAcquireLock>:
c0000326:	55                   	push   ebp
c0000327:	89 e5                	mov    ebp,esp
c0000329:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032c <asmAcquireLock.retry>:
c000032c:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000331:	72 05                	jb     c0000338 <asmAcquireLock.spin_with_pause>
c0000333:	9c                   	pushf  
c0000334:	58                   	pop    eax
c0000335:	fa                   	cli    
c0000336:	5d                   	pop    ebp
c0000337:	c3                   	ret    

c0000338 <asmAcquireLock.spin_with_pause>:
c0000338:	f3 90                	pause  
c000033a:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000340:	75 f6                	jne    c0000338 <asmAcquireLock.spin_with_pause>
c0000342:	e9 e5 ff ff ff       	jmp    c000032c <asmAcquireLock.retry>

c0000347 <asmReleaseLock>:
c0000347:	55                   	push   ebp
c0000348:	89 e5                	mov    ebp,esp
c000034a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000034d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000350:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000356:	52                   	push   edx
c0000357:	9d                   	popf   
c0000358:	5d                   	pop    ebp
c0000359:	c3                   	ret    

c000035a <loadGDT>:
c000035a:	0f 01 15 80 bd 02 c0 	lgdtd  ds:0xc002bd80
c0000361:	66 b8 10 00          	mov    ax,0x10
c0000365:	66 8e d8             	mov    ds,ax
c0000368:	66 8e c0             	mov    es,ax
c000036b:	66 8e e0             	mov    fs,ax
c000036e:	66 8e e8             	mov    gs,ax
c0000371:	66 8e d0             	mov    ss,ax
c0000374:	e9 00 00 00 00       	jmp    c0000379 <flush2>

c0000379 <flush2>:
c0000379:	c3                   	ret    

c000037a <memcpy>:
c000037a:	e9 94 e3 00 00       	jmp    c000e713 <__not_memcpy>
c000037f:	90                   	nop

c0000380 <memcmp>:
c0000380:	56                   	push   esi
c0000381:	53                   	push   ebx
c0000382:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000038a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000038e:	85 f6                	test   esi,esi
c0000390:	74 21                	je     c00003b3 <memcmp+0x33>
c0000392:	8a 08                	mov    cl,BYTE PTR [eax]
c0000394:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000397:	38 d9                	cmp    cl,bl
c0000399:	75 25                	jne    c00003c0 <memcmp+0x40>
c000039b:	01 c6                	add    esi,eax
c000039d:	eb 0a                	jmp    c00003a9 <memcmp+0x29>
c000039f:	90                   	nop
c00003a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00003a5:	38 cb                	cmp    bl,cl
c00003a7:	75 17                	jne    c00003c0 <memcmp+0x40>
c00003a9:	83 c0 01             	add    eax,0x1
c00003ac:	83 c2 01             	add    edx,0x1
c00003af:	39 f0                	cmp    eax,esi
c00003b1:	75 ed                	jne    c00003a0 <memcmp+0x20>
c00003b3:	5b                   	pop    ebx
c00003b4:	31 c0                	xor    eax,eax
c00003b6:	5e                   	pop    esi
c00003b7:	c3                   	ret    
c00003b8:	90                   	nop
c00003b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00003c0:	0f b6 c1             	movzx  eax,cl
c00003c3:	29 d8                	sub    eax,ebx
c00003c5:	5b                   	pop    ebx
c00003c6:	5e                   	pop    esi
c00003c7:	c3                   	ret    
c00003c8:	90                   	nop
c00003c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c00003d0 <memmove>:
c00003d0:	55                   	push   ebp
c00003d1:	57                   	push   edi
c00003d2:	56                   	push   esi
c00003d3:	53                   	push   ebx
c00003d4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003d8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003e0:	39 dd                	cmp    ebp,ebx
c00003e2:	0f 83 a8 00 00 00    	jae    c0000490 <memmove+0xc0>
c00003e8:	85 d2                	test   edx,edx
c00003ea:	0f 84 8c 00 00 00    	je     c000047c <memmove+0xac>
c00003f0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00003f3:	8d 75 04             	lea    esi,[ebp+0x4]
c00003f6:	39 cd                	cmp    ebp,ecx
c00003f8:	0f 93 c1             	setae  cl
c00003fb:	39 f3                	cmp    ebx,esi
c00003fd:	0f 93 c0             	setae  al
c0000400:	89 c6                	mov    esi,eax
c0000402:	31 c0                	xor    eax,eax
c0000404:	09 f1                	or     ecx,esi
c0000406:	8d 72 ff             	lea    esi,[edx-0x1]
c0000409:	83 fe 06             	cmp    esi,0x6
c000040c:	0f 97 c0             	seta   al
c000040f:	89 c6                	mov    esi,eax
c0000411:	85 ce                	test   esi,ecx
c0000413:	0f 84 a7 00 00 00    	je     c00004c0 <memmove+0xf0>
c0000419:	89 e9                	mov    ecx,ebp
c000041b:	09 d9                	or     ecx,ebx
c000041d:	80 e1 03             	and    cl,0x3
c0000420:	0f 85 9a 00 00 00    	jne    c00004c0 <memmove+0xf0>
c0000426:	89 d7                	mov    edi,edx
c0000428:	89 d9                	mov    ecx,ebx
c000042a:	83 e7 fc             	and    edi,0xfffffffc
c000042d:	89 ee                	mov    esi,ebp
c000042f:	01 df                	add    edi,ebx
c0000431:	eb 0d                	jmp    c0000440 <memmove+0x70>
c0000433:	90                   	nop
c0000434:	90                   	nop
c0000435:	90                   	nop
c0000436:	90                   	nop
c0000437:	90                   	nop
c0000438:	90                   	nop
c0000439:	90                   	nop
c000043a:	90                   	nop
c000043b:	90                   	nop
c000043c:	90                   	nop
c000043d:	90                   	nop
c000043e:	90                   	nop
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c1 04             	add    ecx,0x4
c0000445:	83 c6 04             	add    esi,0x4
c0000448:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x70>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0xac>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0xac>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0xac>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0xac>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0xac>
c0000496:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0000499:	83 eb 01             	sub    ebx,0x1
c000049c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	83 ea 01             	sub    edx,0x1
c00004a9:	75 f5                	jne    c00004a0 <memmove+0xd0>
c00004ab:	5b                   	pop    ebx
c00004ac:	89 e8                	mov    eax,ebp
c00004ae:	5e                   	pop    esi
c00004af:	5f                   	pop    edi
c00004b0:	5d                   	pop    ebp
c00004b1:	c3                   	ret    
c00004b2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00004b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00004c0:	01 ea                	add    edx,ebp
c00004c2:	89 e9                	mov    ecx,ebp
c00004c4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ca:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004d0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004d2:	83 c1 01             	add    ecx,0x1
c00004d5:	83 c3 01             	add    ebx,0x1
c00004d8:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004db:	39 d1                	cmp    ecx,edx
c00004dd:	75 f1                	jne    c00004d0 <memmove+0x100>
c00004df:	eb 9b                	jmp    c000047c <memmove+0xac>
c00004e1:	eb 0d                	jmp    c00004f0 <memset>
c00004e3:	90                   	nop
c00004e4:	90                   	nop
c00004e5:	90                   	nop
c00004e6:	90                   	nop
c00004e7:	90                   	nop
c00004e8:	90                   	nop
c00004e9:	90                   	nop
c00004ea:	90                   	nop
c00004eb:	90                   	nop
c00004ec:	90                   	nop
c00004ed:	90                   	nop
c00004ee:	90                   	nop
c00004ef:	90                   	nop

c00004f0 <memset>:
c00004f0:	57                   	push   edi
c00004f1:	56                   	push   esi
c00004f2:	53                   	push   ebx
c00004f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00004f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00004fb:	85 d2                	test   edx,edx
c00004fd:	74 1d                	je     c000051c <memset+0x2c>
c00004ff:	83 fa 08             	cmp    edx,0x8
c0000502:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0000507:	89 f7                	mov    edi,esi
c0000509:	73 25                	jae    c0000530 <memset+0x40>
c000050b:	83 e2 07             	and    edx,0x7
c000050e:	74 0c                	je     c000051c <memset+0x2c>
c0000510:	31 c0                	xor    eax,eax
c0000512:	88 1c 07             	mov    BYTE PTR [edi+eax*1],bl
c0000515:	83 c0 01             	add    eax,0x1
c0000518:	39 d0                	cmp    eax,edx
c000051a:	72 f6                	jb     c0000512 <memset+0x22>
c000051c:	5b                   	pop    ebx
c000051d:	89 f0                	mov    eax,esi
c000051f:	5e                   	pop    esi
c0000520:	5f                   	pop    edi
c0000521:	c3                   	ret    
c0000522:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000529:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000530:	0f b6 c3             	movzx  eax,bl
c0000533:	88 c4                	mov    ah,al
c0000535:	89 c1                	mov    ecx,eax
c0000537:	c1 e1 10             	shl    ecx,0x10
c000053a:	09 c8                	or     eax,ecx
c000053c:	f7 c6 01 00 00 00    	test   esi,0x1
c0000542:	75 1d                	jne    c0000561 <memset+0x71>
c0000544:	f7 c7 02 00 00 00    	test   edi,0x2
c000054a:	75 1f                	jne    c000056b <memset+0x7b>
c000054c:	f7 c7 04 00 00 00    	test   edi,0x4
c0000552:	75 22                	jne    c0000576 <memset+0x86>
c0000554:	89 d1                	mov    ecx,edx
c0000556:	c1 e9 02             	shr    ecx,0x2
c0000559:	fc                   	cld    
c000055a:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c000055c:	83 e2 03             	and    edx,0x3
c000055f:	eb aa                	jmp    c000050b <memset+0x1b>
c0000561:	88 06                	mov    BYTE PTR [esi],al
c0000563:	8d 7e 01             	lea    edi,[esi+0x1]
c0000566:	83 ea 01             	sub    edx,0x1
c0000569:	eb d9                	jmp    c0000544 <memset+0x54>
c000056b:	66 89 07             	mov    WORD PTR [edi],ax
c000056e:	83 ea 02             	sub    edx,0x2
c0000571:	83 c7 02             	add    edi,0x2
c0000574:	eb d6                	jmp    c000054c <memset+0x5c>
c0000576:	89 07                	mov    DWORD PTR [edi],eax
c0000578:	83 ea 04             	sub    edx,0x4
c000057b:	83 c7 04             	add    edi,0x4
c000057e:	eb d4                	jmp    c0000554 <memset+0x64>

c0000580 <strlen>:
c0000580:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000584:	31 c0                	xor    eax,eax
c0000586:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000589:	74 15                	je     c00005a0 <strlen+0x20>
c000058b:	90                   	nop
c000058c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000590:	83 c0 01             	add    eax,0x1
c0000593:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000597:	75 f7                	jne    c0000590 <strlen+0x10>
c0000599:	c3                   	ret    
c000059a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00005a0:	c3                   	ret    
c00005a1:	eb 0d                	jmp    c00005b0 <strpbrk>
c00005a3:	90                   	nop
c00005a4:	90                   	nop
c00005a5:	90                   	nop
c00005a6:	90                   	nop
c00005a7:	90                   	nop
c00005a8:	90                   	nop
c00005a9:	90                   	nop
c00005aa:	90                   	nop
c00005ab:	90                   	nop
c00005ac:	90                   	nop
c00005ad:	90                   	nop
c00005ae:	90                   	nop
c00005af:	90                   	nop

c00005b0 <strpbrk>:
c00005b0:	57                   	push   edi
c00005b1:	56                   	push   esi
c00005b2:	53                   	push   ebx
c00005b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00005b7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00005bb:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005be:	85 db                	test   ebx,ebx
c00005c0:	74 36                	je     c00005f8 <strpbrk+0x48>
c00005c2:	0f be 37             	movsx  esi,BYTE PTR [edi]
c00005c5:	85 f6                	test   esi,esi
c00005c7:	74 25                	je     c00005ee <strpbrk+0x3e>
c00005c9:	39 de                	cmp    esi,ebx
c00005cb:	74 2d                	je     c00005fa <strpbrk+0x4a>
c00005cd:	89 fa                	mov    edx,edi
c00005cf:	eb 13                	jmp    c00005e4 <strpbrk+0x34>
c00005d1:	eb 0d                	jmp    c00005e0 <strpbrk+0x30>
c00005d3:	90                   	nop
c00005d4:	90                   	nop
c00005d5:	90                   	nop
c00005d6:	90                   	nop
c00005d7:	90                   	nop
c00005d8:	90                   	nop
c00005d9:	90                   	nop
c00005da:	90                   	nop
c00005db:	90                   	nop
c00005dc:	90                   	nop
c00005dd:	90                   	nop
c00005de:	90                   	nop
c00005df:	90                   	nop
c00005e0:	39 d9                	cmp    ecx,ebx
c00005e2:	74 16                	je     c00005fa <strpbrk+0x4a>
c00005e4:	83 c2 01             	add    edx,0x1
c00005e7:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c00005ea:	85 c9                	test   ecx,ecx
c00005ec:	75 f2                	jne    c00005e0 <strpbrk+0x30>
c00005ee:	83 c0 01             	add    eax,0x1
c00005f1:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005f4:	85 db                	test   ebx,ebx
c00005f6:	75 cd                	jne    c00005c5 <strpbrk+0x15>
c00005f8:	31 c0                	xor    eax,eax
c00005fa:	5b                   	pop    ebx
c00005fb:	5e                   	pop    esi
c00005fc:	5f                   	pop    edi
c00005fd:	c3                   	ret    
c00005fe:	66 90                	xchg   ax,ax

c0000600 <strtok>:
c0000600:	56                   	push   esi
c0000601:	53                   	push   ebx
c0000602:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0000606:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000060a:	85 db                	test   ebx,ebx
c000060c:	75 08                	jne    c0000616 <strtok+0x16>
c000060e:	eb 30                	jmp    c0000640 <strtok+0x40>
c0000610:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000613:	83 c3 01             	add    ebx,0x1
c0000616:	56                   	push   esi
c0000617:	53                   	push   ebx
c0000618:	e8 93 ff ff ff       	call   c00005b0 <strpbrk>
c000061d:	5a                   	pop    edx
c000061e:	59                   	pop    ecx
c000061f:	a3 e0 60 02 c0       	mov    ds:0xc00260e0,eax
c0000624:	39 d8                	cmp    eax,ebx
c0000626:	74 e8                	je     c0000610 <strtok+0x10>
c0000628:	85 c0                	test   eax,eax
c000062a:	74 1e                	je     c000064a <strtok+0x4a>
c000062c:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000062f:	8d 50 01             	lea    edx,[eax+0x1]
c0000632:	89 d8                	mov    eax,ebx
c0000634:	5b                   	pop    ebx
c0000635:	89 15 e0 60 02 c0    	mov    DWORD PTR ds:0xc00260e0,edx
c000063b:	5e                   	pop    esi
c000063c:	c3                   	ret    
c000063d:	8d 76 00             	lea    esi,[esi+0x0]
c0000640:	8b 1d e0 60 02 c0    	mov    ebx,DWORD PTR ds:0xc00260e0
c0000646:	85 db                	test   ebx,ebx
c0000648:	75 cc                	jne    c0000616 <strtok+0x16>
c000064a:	5b                   	pop    ebx
c000064b:	31 c0                	xor    eax,eax
c000064d:	5e                   	pop    esi
c000064e:	c3                   	ret    
c000064f:	90                   	nop

c0000650 <strcpy>:
c0000650:	53                   	push   ebx
c0000651:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000655:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000659:	8a 11                	mov    dl,BYTE PTR [ecx]
c000065b:	89 c3                	mov    ebx,eax
c000065d:	84 d2                	test   dl,dl
c000065f:	74 1d                	je     c000067e <strcpy+0x2e>
c0000661:	eb 0d                	jmp    c0000670 <strcpy+0x20>
c0000663:	90                   	nop
c0000664:	90                   	nop
c0000665:	90                   	nop
c0000666:	90                   	nop
c0000667:	90                   	nop
c0000668:	90                   	nop
c0000669:	90                   	nop
c000066a:	90                   	nop
c000066b:	90                   	nop
c000066c:	90                   	nop
c000066d:	90                   	nop
c000066e:	90                   	nop
c000066f:	90                   	nop
c0000670:	88 13                	mov    BYTE PTR [ebx],dl
c0000672:	83 c1 01             	add    ecx,0x1
c0000675:	83 c3 01             	add    ebx,0x1
c0000678:	8a 11                	mov    dl,BYTE PTR [ecx]
c000067a:	84 d2                	test   dl,dl
c000067c:	75 f2                	jne    c0000670 <strcpy+0x20>
c000067e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000681:	5b                   	pop    ebx
c0000682:	c3                   	ret    
c0000683:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000689:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000690 <strncpy>:
c0000690:	55                   	push   ebp
c0000691:	57                   	push   edi
c0000692:	56                   	push   esi
c0000693:	53                   	push   ebx
c0000694:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000698:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000069c:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c00006a0:	85 c9                	test   ecx,ecx
c00006a2:	74 43                	je     c00006e7 <strncpy+0x57>
c00006a4:	0f b6 75 00          	movzx  esi,BYTE PTR [ebp+0x0]
c00006a8:	8d 41 ff             	lea    eax,[ecx-0x1]
c00006ab:	8d 7a 01             	lea    edi,[edx+0x1]
c00006ae:	89 f3                	mov    ebx,esi
c00006b0:	88 1a                	mov    BYTE PTR [edx],bl
c00006b2:	84 db                	test   bl,bl
c00006b4:	74 3a                	je     c00006f0 <strncpy+0x60>
c00006b6:	85 c0                	test   eax,eax
c00006b8:	74 2d                	je     c00006e7 <strncpy+0x57>
c00006ba:	8a 5d 01             	mov    bl,BYTE PTR [ebp+0x1]
c00006bd:	8d 41 fe             	lea    eax,[ecx-0x2]
c00006c0:	8d 7a 02             	lea    edi,[edx+0x2]
c00006c3:	8d 4d 02             	lea    ecx,[ebp+0x2]
c00006c6:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c00006c9:	84 db                	test   bl,bl
c00006cb:	75 16                	jne    c00006e3 <strncpy+0x53>
c00006cd:	eb 21                	jmp    c00006f0 <strncpy+0x60>
c00006cf:	90                   	nop
c00006d0:	83 c1 01             	add    ecx,0x1
c00006d3:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00006d6:	83 c7 01             	add    edi,0x1
c00006d9:	83 e8 01             	sub    eax,0x1
c00006dc:	88 5f ff             	mov    BYTE PTR [edi-0x1],bl
c00006df:	84 db                	test   bl,bl
c00006e1:	74 0d                	je     c00006f0 <strncpy+0x60>
c00006e3:	85 c0                	test   eax,eax
c00006e5:	75 e9                	jne    c00006d0 <strncpy+0x40>
c00006e7:	5b                   	pop    ebx
c00006e8:	89 d0                	mov    eax,edx
c00006ea:	5e                   	pop    esi
c00006eb:	5f                   	pop    edi
c00006ec:	5d                   	pop    ebp
c00006ed:	c3                   	ret    
c00006ee:	66 90                	xchg   ax,ax
c00006f0:	85 c0                	test   eax,eax
c00006f2:	74 f3                	je     c00006e7 <strncpy+0x57>
c00006f4:	83 f8 08             	cmp    eax,0x8
c00006f7:	89 c3                	mov    ebx,eax
c00006f9:	73 35                	jae    c0000730 <strncpy+0xa0>
c00006fb:	f6 c3 04             	test   bl,0x4
c00006fe:	74 09                	je     c0000709 <strncpy+0x79>
c0000700:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0000706:	83 c7 04             	add    edi,0x4
c0000709:	f6 c3 02             	test   bl,0x2
c000070c:	74 08                	je     c0000716 <strncpy+0x86>
c000070e:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c0000713:	83 c7 02             	add    edi,0x2
c0000716:	80 e3 01             	and    bl,0x1
c0000719:	74 cc                	je     c00006e7 <strncpy+0x57>
c000071b:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000071e:	89 d0                	mov    eax,edx
c0000720:	5b                   	pop    ebx
c0000721:	5e                   	pop    esi
c0000722:	5f                   	pop    edi
c0000723:	5d                   	pop    ebp
c0000724:	c3                   	ret    
c0000725:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000729:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000730:	f7 c7 01 00 00 00    	test   edi,0x1
c0000736:	75 1f                	jne    c0000757 <strncpy+0xc7>
c0000738:	f7 c7 02 00 00 00    	test   edi,0x2
c000073e:	75 30                	jne    c0000770 <strncpy+0xe0>
c0000740:	f7 c7 04 00 00 00    	test   edi,0x4
c0000746:	75 1a                	jne    c0000762 <strncpy+0xd2>
c0000748:	89 d9                	mov    ecx,ebx
c000074a:	c1 e9 02             	shr    ecx,0x2
c000074d:	fc                   	cld    
c000074e:	31 c0                	xor    eax,eax
c0000750:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000752:	83 e3 03             	and    ebx,0x3
c0000755:	eb a4                	jmp    c00006fb <strncpy+0x6b>
c0000757:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000075a:	83 eb 01             	sub    ebx,0x1
c000075d:	83 c7 01             	add    edi,0x1
c0000760:	eb d6                	jmp    c0000738 <strncpy+0xa8>
c0000762:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0000768:	83 eb 04             	sub    ebx,0x4
c000076b:	83 c7 04             	add    edi,0x4
c000076e:	eb d8                	jmp    c0000748 <strncpy+0xb8>
c0000770:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c0000775:	83 eb 02             	sub    ebx,0x2
c0000778:	83 c7 02             	add    edi,0x2
c000077b:	eb c3                	jmp    c0000740 <strncpy+0xb0>
c000077d:	8d 76 00             	lea    esi,[esi+0x0]

c0000780 <strcmp>:
c0000780:	57                   	push   edi
c0000781:	56                   	push   esi
c0000782:	53                   	push   ebx
c0000783:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0000787:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000078b:	8a 17                	mov    dl,BYTE PTR [edi]
c000078d:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0000790:	38 c2                	cmp    dl,al
c0000792:	75 32                	jne    c00007c6 <strcmp+0x46>
c0000794:	85 c0                	test   eax,eax
c0000796:	74 28                	je     c00007c0 <strcmp+0x40>
c0000798:	b8 01 00 00 00       	mov    eax,0x1
c000079d:	eb 08                	jmp    c00007a7 <strcmp+0x27>
c000079f:	90                   	nop
c00007a0:	83 c0 01             	add    eax,0x1
c00007a3:	85 db                	test   ebx,ebx
c00007a5:	74 19                	je     c00007c0 <strcmp+0x40>
c00007a7:	0f be 1c 07          	movsx  ebx,BYTE PTR [edi+eax*1]
c00007ab:	8a 0c 06             	mov    cl,BYTE PTR [esi+eax*1]
c00007ae:	89 da                	mov    edx,ebx
c00007b0:	38 d9                	cmp    cl,bl
c00007b2:	74 ec                	je     c00007a0 <strcmp+0x20>
c00007b4:	5b                   	pop    ebx
c00007b5:	0f b6 c2             	movzx  eax,dl
c00007b8:	0f b6 c9             	movzx  ecx,cl
c00007bb:	29 c8                	sub    eax,ecx
c00007bd:	5e                   	pop    esi
c00007be:	5f                   	pop    edi
c00007bf:	c3                   	ret    
c00007c0:	5b                   	pop    ebx
c00007c1:	31 c0                	xor    eax,eax
c00007c3:	5e                   	pop    esi
c00007c4:	5f                   	pop    edi
c00007c5:	c3                   	ret    
c00007c6:	89 c1                	mov    ecx,eax
c00007c8:	eb ea                	jmp    c00007b4 <strcmp+0x34>
c00007ca:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00007d0 <strchr>:
c00007d0:	53                   	push   ebx
c00007d1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00007d5:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00007d8:	85 db                	test   ebx,ebx
c00007da:	74 22                	je     c00007fe <strchr+0x2e>
c00007dc:	0f be 54 24 0c       	movsx  edx,BYTE PTR [esp+0xc]
c00007e1:	39 d3                	cmp    ebx,edx
c00007e3:	74 1b                	je     c0000800 <strchr+0x30>
c00007e5:	89 d1                	mov    ecx,edx
c00007e7:	eb 0b                	jmp    c00007f4 <strchr+0x24>
c00007e9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007f0:	39 ca                	cmp    edx,ecx
c00007f2:	74 0c                	je     c0000800 <strchr+0x30>
c00007f4:	83 c0 01             	add    eax,0x1
c00007f7:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00007fa:	85 d2                	test   edx,edx
c00007fc:	75 f2                	jne    c00007f0 <strchr+0x20>
c00007fe:	31 c0                	xor    eax,eax
c0000800:	5b                   	pop    ebx
c0000801:	c3                   	ret    
c0000802:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000809:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000810 <strncmp>:
c0000810:	55                   	push   ebp
c0000811:	57                   	push   edi
c0000812:	56                   	push   esi
c0000813:	53                   	push   ebx
c0000814:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000818:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000081c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0000820:	85 f6                	test   esi,esi
c0000822:	74 35                	je     c0000859 <strncmp+0x49>
c0000824:	0f be 29             	movsx  ebp,BYTE PTR [ecx]
c0000827:	8a 17                	mov    dl,BYTE PTR [edi]
c0000829:	89 eb                	mov    ebx,ebp
c000082b:	38 da                	cmp    dl,bl
c000082d:	75 31                	jne    c0000860 <strncmp+0x50>
c000082f:	8d 47 01             	lea    eax,[edi+0x1]
c0000832:	85 ed                	test   ebp,ebp
c0000834:	74 23                	je     c0000859 <strncmp+0x49>
c0000836:	01 f7                	add    edi,esi
c0000838:	eb 18                	jmp    c0000852 <strncmp+0x42>
c000083a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000840:	0f be 30             	movsx  esi,BYTE PTR [eax]
c0000843:	8a 19                	mov    bl,BYTE PTR [ecx]
c0000845:	89 f2                	mov    edx,esi
c0000847:	38 d3                	cmp    bl,dl
c0000849:	75 15                	jne    c0000860 <strncmp+0x50>
c000084b:	83 c0 01             	add    eax,0x1
c000084e:	85 f6                	test   esi,esi
c0000850:	74 07                	je     c0000859 <strncmp+0x49>
c0000852:	83 c1 01             	add    ecx,0x1
c0000855:	39 c7                	cmp    edi,eax
c0000857:	75 e7                	jne    c0000840 <strncmp+0x30>
c0000859:	5b                   	pop    ebx
c000085a:	31 c0                	xor    eax,eax
c000085c:	5e                   	pop    esi
c000085d:	5f                   	pop    edi
c000085e:	5d                   	pop    ebp
c000085f:	c3                   	ret    
c0000860:	0f b6 db             	movzx  ebx,bl
c0000863:	0f b6 c2             	movzx  eax,dl
c0000866:	29 d8                	sub    eax,ebx
c0000868:	5b                   	pop    ebx
c0000869:	5e                   	pop    esi
c000086a:	5f                   	pop    edi
c000086b:	5d                   	pop    ebp
c000086c:	c3                   	ret    
c000086d:	8d 76 00             	lea    esi,[esi+0x0]

c0000870 <strcat>:
c0000870:	56                   	push   esi
c0000871:	53                   	push   ebx
c0000872:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000876:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000087a:	89 c3                	mov    ebx,eax
c000087c:	eb 04                	jmp    c0000882 <strcat+0x12>
c000087e:	66 90                	xchg   ax,ax
c0000880:	89 d3                	mov    ebx,edx
c0000882:	8d 53 01             	lea    edx,[ebx+0x1]
c0000885:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000889:	75 f5                	jne    c0000880 <strcat+0x10>
c000088b:	31 d2                	xor    edx,edx
c000088d:	8d 76 00             	lea    esi,[esi+0x0]
c0000890:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000893:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000896:	83 c2 01             	add    edx,0x1
c0000899:	84 c9                	test   cl,cl
c000089b:	75 f3                	jne    c0000890 <strcat+0x20>
c000089d:	5b                   	pop    ebx
c000089e:	5e                   	pop    esi
c000089f:	c3                   	ret    

c00008a0 <strncat>:
c00008a0:	56                   	push   esi
c00008a1:	53                   	push   ebx
c00008a2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00008a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00008aa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00008ae:	85 f6                	test   esi,esi
c00008b0:	74 32                	je     c00008e4 <strncat+0x44>
c00008b2:	89 c2                	mov    edx,eax
c00008b4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00008ba:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00008c0:	83 c2 01             	add    edx,0x1
c00008c3:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00008c7:	75 f7                	jne    c00008c0 <strncat+0x20>
c00008c9:	01 ce                	add    esi,ecx
c00008cb:	eb 0a                	jmp    c00008d7 <strncat+0x37>
c00008cd:	8d 76 00             	lea    esi,[esi+0x0]
c00008d0:	39 f1                	cmp    ecx,esi
c00008d2:	74 1c                	je     c00008f0 <strncat+0x50>
c00008d4:	83 c2 01             	add    edx,0x1
c00008d7:	83 c1 01             	add    ecx,0x1
c00008da:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008dd:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008e0:	84 db                	test   bl,bl
c00008e2:	75 ec                	jne    c00008d0 <strncat+0x30>
c00008e4:	5b                   	pop    ebx
c00008e5:	5e                   	pop    esi
c00008e6:	c3                   	ret    
c00008e7:	89 f6                	mov    esi,esi
c00008e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00008f0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008f3:	5b                   	pop    ebx
c00008f4:	5e                   	pop    esi
c00008f5:	c3                   	ret    
c00008f6:	8d 76 00             	lea    esi,[esi+0x0]
c00008f9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000900 <strstr>:
c0000900:	57                   	push   edi
c0000901:	56                   	push   esi
c0000902:	53                   	push   ebx
c0000903:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0000907:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000090b:	57                   	push   edi
c000090c:	e8 6f fc ff ff       	call   c0000580 <strlen>
c0000911:	59                   	pop    ecx
c0000912:	85 c0                	test   eax,eax
c0000914:	89 c6                	mov    esi,eax
c0000916:	75 1a                	jne    c0000932 <strstr+0x32>
c0000918:	eb 36                	jmp    c0000950 <strstr+0x50>
c000091a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000920:	56                   	push   esi
c0000921:	57                   	push   edi
c0000922:	53                   	push   ebx
c0000923:	e8 58 fa ff ff       	call   c0000380 <memcmp>
c0000928:	83 c4 0c             	add    esp,0xc
c000092b:	85 c0                	test   eax,eax
c000092d:	74 21                	je     c0000950 <strstr+0x50>
c000092f:	83 c3 01             	add    ebx,0x1
c0000932:	53                   	push   ebx
c0000933:	e8 48 fc ff ff       	call   c0000580 <strlen>
c0000938:	5a                   	pop    edx
c0000939:	39 f0                	cmp    eax,esi
c000093b:	73 e3                	jae    c0000920 <strstr+0x20>
c000093d:	5b                   	pop    ebx
c000093e:	31 c0                	xor    eax,eax
c0000940:	5e                   	pop    esi
c0000941:	5f                   	pop    edi
c0000942:	c3                   	ret    
c0000943:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000949:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000950:	89 d8                	mov    eax,ebx
c0000952:	5b                   	pop    ebx
c0000953:	5e                   	pop    esi
c0000954:	5f                   	pop    edi
c0000955:	c3                   	ret    
c0000956:	8d 76 00             	lea    esi,[esi+0x0]
c0000959:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000960 <toupper>:
c0000960:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000964:	0f b6 d0             	movzx  edx,al
c0000967:	f6 82 40 07 02 c0 02 	test   BYTE PTR [edx-0x3ffdf8c0],0x2
c000096e:	74 03                	je     c0000973 <toupper+0x13>
c0000970:	83 e8 20             	sub    eax,0x20
c0000973:	c3                   	ret    
c0000974:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000097a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000980 <tolower>:
c0000980:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000984:	0f b6 d0             	movzx  edx,al
c0000987:	f6 82 40 07 02 c0 01 	test   BYTE PTR [edx-0x3ffdf8c0],0x1
c000098e:	74 03                	je     c0000993 <tolower+0x13>
c0000990:	83 c0 20             	add    eax,0x20
c0000993:	c3                   	ret    
c0000994:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000099a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c00009a0 <simple_strtoul>:
c00009a0:	55                   	push   ebp
c00009a1:	57                   	push   edi
c00009a2:	56                   	push   esi
c00009a3:	53                   	push   ebx
c00009a4:	83 ec 08             	sub    esp,0x8
c00009a7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00009ab:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00009af:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00009b3:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c00009b6:	f6 82 40 07 02 c0 08 	test   BYTE PTR [edx-0x3ffdf8c0],0x8
c00009bd:	75 11                	jne    c00009d0 <simple_strtoul+0x30>
c00009bf:	89 d0                	mov    eax,edx
c00009c1:	eb 1e                	jmp    c00009e1 <simple_strtoul+0x41>
c00009c3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00009c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00009d0:	83 c3 01             	add    ebx,0x1
c00009d3:	0f b6 13             	movzx  edx,BYTE PTR [ebx]
c00009d6:	f6 82 40 07 02 c0 08 	test   BYTE PTR [edx-0x3ffdf8c0],0x8
c00009dd:	89 d0                	mov    eax,edx
c00009df:	75 ef                	jne    c00009d0 <simple_strtoul+0x30>
c00009e1:	0f be c0             	movsx  eax,al
c00009e4:	83 f8 09             	cmp    eax,0x9
c00009e7:	74 e7                	je     c00009d0 <simple_strtoul+0x30>
c00009e9:	83 f8 2d             	cmp    eax,0x2d
c00009ec:	0f 84 5e 01 00 00    	je     c0000b50 <simple_strtoul+0x1b0>
c00009f2:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00009fa:	83 f8 2b             	cmp    eax,0x2b
c00009fd:	0f 94 c0             	sete   al
c0000a00:	0f b6 c0             	movzx  eax,al
c0000a03:	01 c3                	add    ebx,eax
c0000a05:	85 ff                	test   edi,edi
c0000a07:	0f 85 d3 00 00 00    	jne    c0000ae0 <simple_strtoul+0x140>
c0000a0d:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a10:	bf 0a 00 00 00       	mov    edi,0xa
c0000a15:	83 fa 30             	cmp    edx,0x30
c0000a18:	89 d1                	mov    ecx,edx
c0000a1a:	0f 84 8b 01 00 00    	je     c0000bab <simple_strtoul+0x20b>
c0000a20:	85 d2                	test   edx,edx
c0000a22:	0f 84 58 01 00 00    	je     c0000b80 <simple_strtoul+0x1e0>
c0000a28:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000a2f:	31 ed                	xor    ebp,ebp
c0000a31:	31 f6                	xor    esi,esi
c0000a33:	eb 3a                	jmp    c0000a6f <simple_strtoul+0xcf>
c0000a35:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a39:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000a40:	83 e9 30             	sub    ecx,0x30
c0000a43:	39 f9                	cmp    ecx,edi
c0000a45:	73 59                	jae    c0000aa0 <simple_strtoul+0x100>
c0000a47:	89 c8                	mov    eax,ecx
c0000a49:	31 d2                	xor    edx,edx
c0000a4b:	f7 d0                	not    eax
c0000a4d:	f7 f7                	div    edi
c0000a4f:	39 f0                	cmp    eax,esi
c0000a51:	0f 82 e9 00 00 00    	jb     c0000b40 <simple_strtoul+0x1a0>
c0000a57:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000a5e:	0f af f7             	imul   esi,edi
c0000a61:	01 ce                	add    esi,ecx
c0000a63:	83 c3 01             	add    ebx,0x1
c0000a66:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a69:	85 d2                	test   edx,edx
c0000a6b:	89 d1                	mov    ecx,edx
c0000a6d:	74 31                	je     c0000aa0 <simple_strtoul+0x100>
c0000a6f:	0f b6 c9             	movzx  ecx,cl
c0000a72:	f6 81 40 07 02 c0 04 	test   BYTE PTR [ecx-0x3ffdf8c0],0x4
c0000a79:	75 c5                	jne    c0000a40 <simple_strtoul+0xa0>
c0000a7b:	52                   	push   edx
c0000a7c:	e8 df fe ff ff       	call   c0000960 <toupper>
c0000a81:	59                   	pop    ecx
c0000a82:	0f b6 d0             	movzx  edx,al
c0000a85:	f6 82 40 07 02 c0 01 	test   BYTE PTR [edx-0x3ffdf8c0],0x1
c0000a8c:	74 12                	je     c0000aa0 <simple_strtoul+0x100>
c0000a8e:	8d 48 c9             	lea    ecx,[eax-0x37]
c0000a91:	39 f9                	cmp    ecx,edi
c0000a93:	72 b2                	jb     c0000a47 <simple_strtoul+0xa7>
c0000a95:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a99:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000aa0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000aa4:	85 d2                	test   edx,edx
c0000aa6:	74 11                	je     c0000ab9 <simple_strtoul+0x119>
c0000aa8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000aab:	09 f0                	or     eax,esi
c0000aad:	0f 84 ad 00 00 00    	je     c0000b60 <simple_strtoul+0x1c0>
c0000ab3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000ab7:	89 18                	mov    DWORD PTR [eax],ebx
c0000ab9:	83 fd 01             	cmp    ebp,0x1
c0000abc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0000ac1:	0f 44 f0             	cmove  esi,eax
c0000ac4:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000ac9:	75 02                	jne    c0000acd <simple_strtoul+0x12d>
c0000acb:	f7 de                	neg    esi
c0000acd:	83 c4 08             	add    esp,0x8
c0000ad0:	89 f0                	mov    eax,esi
c0000ad2:	5b                   	pop    ebx
c0000ad3:	5e                   	pop    esi
c0000ad4:	5f                   	pop    edi
c0000ad5:	5d                   	pop    ebp
c0000ad6:	c3                   	ret    
c0000ad7:	89 f6                	mov    esi,esi
c0000ad9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000ae0:	8d 47 fe             	lea    eax,[edi-0x2]
c0000ae3:	83 f8 22             	cmp    eax,0x22
c0000ae6:	0f 87 94 00 00 00    	ja     c0000b80 <simple_strtoul+0x1e0>
c0000aec:	83 ff 08             	cmp    edi,0x8
c0000aef:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000af1:	0f 84 df 00 00 00    	je     c0000bd6 <simple_strtoul+0x236>
c0000af7:	83 ff 10             	cmp    edi,0x10
c0000afa:	0f 85 13 01 00 00    	jne    c0000c13 <simple_strtoul+0x273>
c0000b00:	0f be d1             	movsx  edx,cl
c0000b03:	bf 10 00 00 00       	mov    edi,0x10
c0000b08:	83 fa 30             	cmp    edx,0x30
c0000b0b:	0f 85 0f ff ff ff    	jne    c0000a20 <simple_strtoul+0x80>
c0000b11:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b15:	52                   	push   edx
c0000b16:	89 d1                	mov    ecx,edx
c0000b18:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b1c:	e8 5f fe ff ff       	call   c0000980 <tolower>
c0000b21:	5e                   	pop    esi
c0000b22:	83 f8 78             	cmp    eax,0x78
c0000b25:	0f 84 da 00 00 00    	je     c0000c05 <simple_strtoul+0x265>
c0000b2b:	83 c3 01             	add    ebx,0x1
c0000b2e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b31:	e9 ea fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000b36:	8d 76 00             	lea    esi,[esi+0x0]
c0000b39:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000b40:	bd 01 00 00 00       	mov    ebp,0x1
c0000b45:	31 f6                	xor    esi,esi
c0000b47:	e9 17 ff ff ff       	jmp    c0000a63 <simple_strtoul+0xc3>
c0000b4c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b50:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b58:	83 c3 01             	add    ebx,0x1
c0000b5b:	e9 a5 fe ff ff       	jmp    c0000a05 <simple_strtoul+0x65>
c0000b60:	85 db                	test   ebx,ebx
c0000b62:	74 39                	je     c0000b9d <simple_strtoul+0x1fd>
c0000b64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b68:	31 f6                	xor    esi,esi
c0000b6a:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000b6e:	89 38                	mov    DWORD PTR [eax],edi
c0000b70:	e9 44 ff ff ff       	jmp    c0000ab9 <simple_strtoul+0x119>
c0000b75:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b79:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000b80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b84:	85 c0                	test   eax,eax
c0000b86:	74 1c                	je     c0000ba4 <simple_strtoul+0x204>
c0000b88:	85 db                	test   ebx,ebx
c0000b8a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b8e:	74 68                	je     c0000bf8 <simple_strtoul+0x258>
c0000b90:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000b94:	31 f6                	xor    esi,esi
c0000b96:	89 38                	mov    DWORD PTR [eax],edi
c0000b98:	e9 27 ff ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000b9d:	31 f6                	xor    esi,esi
c0000b9f:	e9 0f ff ff ff       	jmp    c0000ab3 <simple_strtoul+0x113>
c0000ba4:	31 f6                	xor    esi,esi
c0000ba6:	e9 19 ff ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000bab:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000baf:	52                   	push   edx
c0000bb0:	89 d1                	mov    ecx,edx
c0000bb2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000bb6:	e8 c5 fd ff ff       	call   c0000980 <tolower>
c0000bbb:	5f                   	pop    edi
c0000bbc:	83 f8 78             	cmp    eax,0x78
c0000bbf:	74 2c                	je     c0000bed <simple_strtoul+0x24d>
c0000bc1:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000bc4:	83 c3 01             	add    ebx,0x1
c0000bc7:	83 fa 30             	cmp    edx,0x30
c0000bca:	74 16                	je     c0000be2 <simple_strtoul+0x242>
c0000bcc:	bf 08 00 00 00       	mov    edi,0x8
c0000bd1:	e9 4a fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000bd6:	0f be d1             	movsx  edx,cl
c0000bd9:	83 fa 30             	cmp    edx,0x30
c0000bdc:	0f 85 3e fe ff ff    	jne    c0000a20 <simple_strtoul+0x80>
c0000be2:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000be6:	83 c3 01             	add    ebx,0x1
c0000be9:	89 d1                	mov    ecx,edx
c0000beb:	eb df                	jmp    c0000bcc <simple_strtoul+0x22c>
c0000bed:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0000bf0:	83 c3 02             	add    ebx,0x2
c0000bf3:	e9 08 ff ff ff       	jmp    c0000b00 <simple_strtoul+0x160>
c0000bf8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000bfe:	31 f6                	xor    esi,esi
c0000c00:	e9 bf fe ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000c05:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0000c09:	83 c3 02             	add    ebx,0x2
c0000c0c:	89 d1                	mov    ecx,edx
c0000c0e:	e9 0d fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000c13:	0f be d1             	movsx  edx,cl
c0000c16:	e9 05 fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>

c0000c1b <largebin_index>:
c0000c1b:	89 c2                	mov    edx,eax
c0000c1d:	c1 ea 08             	shr    edx,0x8
c0000c20:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c26:	77 10                	ja     c0000c38 <largebin_index+0x1d>
c0000c28:	0f bd d2             	bsr    edx,edx
c0000c2b:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c2e:	d3 e8                	shr    eax,cl
c0000c30:	83 e0 03             	and    eax,0x3
c0000c33:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c37:	c3                   	ret    
c0000c38:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c3d:	c3                   	ret    

c0000c3e <malloc_init_state>:
c0000c3e:	8d 50 34             	lea    edx,[eax+0x34]
c0000c41:	53                   	push   ebx
c0000c42:	89 d1                	mov    ecx,edx
c0000c44:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c4a:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c4d:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c50:	83 c2 08             	add    edx,0x8
c0000c53:	39 da                	cmp    edx,ebx
c0000c55:	75 f3                	jne    c0000c4a <malloc_init_state+0xc>
c0000c57:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c61:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c63:	c7 80 54 03 00 00 00 00 01 00 	mov    DWORD PTR [eax+0x354],0x10000
c0000c6d:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c77:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c81:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c88:	83 e2 03             	and    edx,0x3
c0000c8b:	5b                   	pop    ebx
c0000c8c:	83 ca 48             	or     edx,0x48
c0000c8f:	89 10                	mov    DWORD PTR [eax],edx
c0000c91:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000c94:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000c9e:	c3                   	ret    

c0000c9f <malloc_consolidate>:
c0000c9f:	8b 10                	mov    edx,DWORD PTR [eax]
c0000ca1:	85 d2                	test   edx,edx
c0000ca3:	0f 84 d8 00 00 00    	je     c0000d81 <malloc_consolidate+0xe2>
c0000ca9:	55                   	push   ebp
c0000caa:	83 e2 fd             	and    edx,0xfffffffd
c0000cad:	57                   	push   edi
c0000cae:	89 c5                	mov    ebp,eax
c0000cb0:	56                   	push   esi
c0000cb1:	53                   	push   ebx
c0000cb2:	8d 78 34             	lea    edi,[eax+0x34]
c0000cb5:	83 ec 10             	sub    esp,0x10
c0000cb8:	89 10                	mov    DWORD PTR [eax],edx
c0000cba:	c1 ea 03             	shr    edx,0x3
c0000cbd:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000cc1:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cc5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cc9:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000ccc:	85 d2                	test   edx,edx
c0000cce:	0f 84 98 00 00 00    	je     c0000d6c <malloc_consolidate+0xcd>
c0000cd4:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000cdb:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cde:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000ce1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000ce5:	89 f9                	mov    ecx,edi
c0000ce7:	83 e1 fe             	and    ecx,0xfffffffe
c0000cea:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000ced:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cf0:	83 e3 fc             	and    ebx,0xfffffffc
c0000cf3:	83 e7 01             	and    edi,0x1
c0000cf6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000cf9:	75 14                	jne    c0000d0f <malloc_consolidate+0x70>
c0000cfb:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000cfd:	29 fa                	sub    edx,edi
c0000cff:	01 f9                	add    ecx,edi
c0000d01:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d04:	89 fb                	mov    ebx,edi
c0000d06:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d09:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d0c:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d0f:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d12:	74 40                	je     c0000d54 <malloc_consolidate+0xb5>
c0000d14:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d17:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d1a:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d1e:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d21:	83 e7 01             	and    edi,0x1
c0000d24:	75 0e                	jne    c0000d34 <malloc_consolidate+0x95>
c0000d26:	01 d9                	add    ecx,ebx
c0000d28:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d2b:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d2e:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d31:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d34:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d37:	89 ce                	mov    esi,ecx
c0000d39:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d3c:	83 ce 01             	or     esi,0x1
c0000d3f:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d42:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d45:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d49:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d4c:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d4f:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d52:	eb 0c                	jmp    c0000d60 <malloc_consolidate+0xc1>
c0000d54:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d57:	83 c9 01             	or     ecx,0x1
c0000d5a:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d5d:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d60:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d64:	85 d2                	test   edx,edx
c0000d66:	0f 85 6f ff ff ff    	jne    c0000cdb <malloc_consolidate+0x3c>
c0000d6c:	83 c5 04             	add    ebp,0x4
c0000d6f:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d73:	0f 85 50 ff ff ff    	jne    c0000cc9 <malloc_consolidate+0x2a>
c0000d79:	83 c4 10             	add    esp,0x10
c0000d7c:	5b                   	pop    ebx
c0000d7d:	5e                   	pop    esi
c0000d7e:	5f                   	pop    edi
c0000d7f:	5d                   	pop    ebp
c0000d80:	c3                   	ret    
c0000d81:	e9 b8 fe ff ff       	jmp    c0000c3e <malloc_init_state>

c0000d86 <dlfree>:
c0000d86:	57                   	push   edi
c0000d87:	56                   	push   esi
c0000d88:	53                   	push   ebx
c0000d89:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000d8d:	85 c9                	test   ecx,ecx
c0000d8f:	0f 84 01 01 00 00    	je     c0000e96 <dlfree+0x110>
c0000d95:	8b 71 fc             	mov    esi,DWORD PTR [ecx-0x4]
c0000d98:	8d 51 f8             	lea    edx,[ecx-0x8]
c0000d9b:	8b 1d 00 61 02 c0    	mov    ebx,DWORD PTR ds:0xc0026100
c0000da1:	89 f0                	mov    eax,esi
c0000da3:	83 e0 fc             	and    eax,0xfffffffc
c0000da6:	39 c3                	cmp    ebx,eax
c0000da8:	72 24                	jb     c0000dce <dlfree+0x48>
c0000daa:	c1 e8 03             	shr    eax,0x3
c0000dad:	83 cb 03             	or     ebx,0x3
c0000db0:	89 1d 00 61 02 c0    	mov    DWORD PTR ds:0xc0026100,ebx
c0000db6:	83 e8 02             	sub    eax,0x2
c0000db9:	8b 1c 85 04 61 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffd9efc]
c0000dc0:	89 19                	mov    DWORD PTR [ecx],ebx
c0000dc2:	89 14 85 04 61 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9efc],edx
c0000dc9:	e9 c8 00 00 00       	jmp    c0000e96 <dlfree+0x110>
c0000dce:	83 e6 02             	and    esi,0x2
c0000dd1:	0f 85 a0 00 00 00    	jne    c0000e77 <dlfree+0xf1>
c0000dd7:	8d 34 02             	lea    esi,[edx+eax*1]
c0000dda:	83 cb 01             	or     ebx,0x1
c0000ddd:	89 1d 00 61 02 c0    	mov    DWORD PTR ds:0xc0026100,ebx
c0000de3:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000de6:	83 e3 fc             	and    ebx,0xfffffffc
c0000de9:	f6 41 fc 01          	test   BYTE PTR [ecx-0x4],0x1
c0000ded:	75 13                	jne    c0000e02 <dlfree+0x7c>
c0000def:	8b 49 f8             	mov    ecx,DWORD PTR [ecx-0x8]
c0000df2:	29 ca                	sub    edx,ecx
c0000df4:	01 c8                	add    eax,ecx
c0000df6:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000df9:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0000dfc:	89 4f 0c             	mov    DWORD PTR [edi+0xc],ecx
c0000dff:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0000e02:	39 35 2c 61 02 c0    	cmp    DWORD PTR ds:0xc002612c,esi
c0000e08:	74 40                	je     c0000e4a <dlfree+0xc4>
c0000e0a:	8b 4c 1e 04          	mov    ecx,DWORD PTR [esi+ebx*1+0x4]
c0000e0e:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000e11:	80 e1 01             	and    cl,0x1
c0000e14:	75 0e                	jne    c0000e24 <dlfree+0x9e>
c0000e16:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e19:	01 d8                	add    eax,ebx
c0000e1b:	8b 4e 0c             	mov    ecx,DWORD PTR [esi+0xc]
c0000e1e:	89 4f 0c             	mov    DWORD PTR [edi+0xc],ecx
c0000e21:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0000e24:	8b 0d 3c 61 02 c0    	mov    ecx,DWORD PTR ds:0xc002613c
c0000e2a:	c7 42 0c 34 61 02 c0 	mov    DWORD PTR [edx+0xc],0xc0026134
c0000e31:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e34:	89 15 3c 61 02 c0    	mov    DWORD PTR ds:0xc002613c,edx
c0000e3a:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e3d:	89 c1                	mov    ecx,eax
c0000e3f:	83 c9 01             	or     ecx,0x1
c0000e42:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e45:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e48:	eb 10                	jmp    c0000e5a <dlfree+0xd4>
c0000e4a:	01 d8                	add    eax,ebx
c0000e4c:	89 c1                	mov    ecx,eax
c0000e4e:	83 c9 01             	or     ecx,0x1
c0000e51:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e54:	89 15 2c 61 02 c0    	mov    DWORD PTR ds:0xc002612c,edx
c0000e5a:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e5f:	76 35                	jbe    c0000e96 <dlfree+0x110>
c0000e61:	f6 05 00 61 02 c0 02 	test   BYTE PTR ds:0xc0026100,0x2
c0000e68:	74 2c                	je     c0000e96 <dlfree+0x110>
c0000e6a:	5b                   	pop    ebx
c0000e6b:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0000e70:	5e                   	pop    esi
c0000e71:	5f                   	pop    edi
c0000e72:	e9 28 fe ff ff       	jmp    c0000c9f <malloc_consolidate>
c0000e77:	8b 49 f8             	mov    ecx,DWORD PTR [ecx-0x8]
c0000e7a:	53                   	push   ebx
c0000e7b:	53                   	push   ebx
c0000e7c:	ff 0d 50 64 02 c0    	dec    DWORD PTR ds:0xc0026450
c0000e82:	01 c8                	add    eax,ecx
c0000e84:	29 ca                	sub    edx,ecx
c0000e86:	50                   	push   eax
c0000e87:	52                   	push   edx
c0000e88:	29 05 64 64 02 c0    	sub    DWORD PTR ds:0xc0026464,eax
c0000e8e:	e8 bd d9 00 00       	call   c000e850 <munmap>
c0000e93:	83 c4 10             	add    esp,0x10
c0000e96:	5b                   	pop    ebx
c0000e97:	5e                   	pop    esi
c0000e98:	5f                   	pop    edi
c0000e99:	c3                   	ret    

c0000e9a <sYSMALLOc>:
c0000e9a:	55                   	push   ebp
c0000e9b:	57                   	push   edi
c0000e9c:	56                   	push   esi
c0000e9d:	53                   	push   ebx
c0000e9e:	89 d3                	mov    ebx,edx
c0000ea0:	83 ec 2c             	sub    esp,0x2c
c0000ea3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0000ea7:	8b 8a 5c 03 00 00    	mov    ecx,DWORD PTR [edx+0x35c]
c0000ead:	f6 02 02             	test   BYTE PTR [edx],0x2
c0000eb0:	8d 41 ff             	lea    eax,[ecx-0x1]
c0000eb3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000eb7:	74 1f                	je     c0000ed8 <sYSMALLOc+0x3e>
c0000eb9:	89 d0                	mov    eax,edx
c0000ebb:	e8 df fd ff ff       	call   c0000c9f <malloc_consolidate>
c0000ec0:	83 ec 0c             	sub    esp,0xc
c0000ec3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0000ec7:	83 e8 07             	sub    eax,0x7
c0000eca:	50                   	push   eax
c0000ecb:	e8 78 03 00 00       	call   c0001248 <dlmalloc>
c0000ed0:	83 c4 10             	add    esp,0x10
c0000ed3:	e9 68 03 00 00       	jmp    c0001240 <sYSMALLOc+0x3a6>
c0000ed8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000edc:	f7 d9                	neg    ecx
c0000ede:	39 82 4c 03 00 00    	cmp    DWORD PTR [edx+0x34c],eax
c0000ee4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0000ee8:	0f 87 be 00 00 00    	ja     c0000fac <sYSMALLOc+0x112>
c0000eee:	8b 82 54 03 00 00    	mov    eax,DWORD PTR [edx+0x354]
c0000ef4:	39 82 50 03 00 00    	cmp    DWORD PTR [edx+0x350],eax
c0000efa:	0f 8d ac 00 00 00    	jge    c0000fac <sYSMALLOc+0x112>
c0000f00:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0000f04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0000f08:	8d 74 38 0b          	lea    esi,[eax+edi*1+0xb]
c0000f0c:	21 ce                	and    esi,ecx
c0000f0e:	39 fe                	cmp    esi,edi
c0000f10:	0f 86 96 00 00 00    	jbe    c0000fac <sYSMALLOc+0x112>
c0000f16:	52                   	push   edx
c0000f17:	52                   	push   edx
c0000f18:	6a 00                	push   0x0
c0000f1a:	6a ff                	push   0xffffffff
c0000f1c:	6a 0c                	push   0xc
c0000f1e:	6a 03                	push   0x3
c0000f20:	56                   	push   esi
c0000f21:	6a 00                	push   0x0
c0000f23:	e8 ca d8 00 00       	call   c000e7f2 <mmap>
c0000f28:	83 c4 20             	add    esp,0x20
c0000f2b:	83 f8 ff             	cmp    eax,0xffffffff
c0000f2e:	74 7c                	je     c0000fac <sYSMALLOc+0x112>
c0000f30:	89 c1                	mov    ecx,eax
c0000f32:	83 e1 07             	and    ecx,0x7
c0000f35:	74 13                	je     c0000f4a <sYSMALLOc+0xb0>
c0000f37:	ba 08 00 00 00       	mov    edx,0x8
c0000f3c:	89 f7                	mov    edi,esi
c0000f3e:	29 ca                	sub    edx,ecx
c0000f40:	01 d0                	add    eax,edx
c0000f42:	29 d7                	sub    edi,edx
c0000f44:	89 10                	mov    DWORD PTR [eax],edx
c0000f46:	89 fa                	mov    edx,edi
c0000f48:	eb 08                	jmp    c0000f52 <sYSMALLOc+0xb8>
c0000f4a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000f50:	89 f2                	mov    edx,esi
c0000f52:	83 ca 02             	or     edx,0x2
c0000f55:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0000f58:	8b bb 50 03 00 00    	mov    edi,DWORD PTR [ebx+0x350]
c0000f5e:	8d 57 01             	lea    edx,[edi+0x1]
c0000f61:	3b 93 58 03 00 00    	cmp    edx,DWORD PTR [ebx+0x358]
c0000f67:	89 93 50 03 00 00    	mov    DWORD PTR [ebx+0x350],edx
c0000f6d:	7e 06                	jle    c0000f75 <sYSMALLOc+0xdb>
c0000f6f:	89 93 58 03 00 00    	mov    DWORD PTR [ebx+0x358],edx
c0000f75:	03 b3 64 03 00 00    	add    esi,DWORD PTR [ebx+0x364]
c0000f7b:	3b b3 70 03 00 00    	cmp    esi,DWORD PTR [ebx+0x370]
c0000f81:	89 b3 64 03 00 00    	mov    DWORD PTR [ebx+0x364],esi
c0000f87:	76 06                	jbe    c0000f8f <sYSMALLOc+0xf5>
c0000f89:	89 b3 70 03 00 00    	mov    DWORD PTR [ebx+0x370],esi
c0000f8f:	03 b3 68 03 00 00    	add    esi,DWORD PTR [ebx+0x368]
c0000f95:	39 b3 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],esi
c0000f9b:	0f 83 41 01 00 00    	jae    c00010e2 <sYSMALLOc+0x248>
c0000fa1:	89 b3 74 03 00 00    	mov    DWORD PTR [ebx+0x374],esi
c0000fa7:	e9 36 01 00 00       	jmp    c00010e2 <sYSMALLOc+0x248>
c0000fac:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000faf:	8b ab 48 03 00 00    	mov    ebp,DWORD PTR [ebx+0x348]
c0000fb5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000fb9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0000fbc:	83 e0 fc             	and    eax,0xfffffffc
c0000fbf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000fc3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000fc7:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000fcb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000fcf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000fd3:	83 c0 10             	add    eax,0x10
c0000fd6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0000fda:	01 c5                	add    ebp,eax
c0000fdc:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000fe3:	74 04                	je     c0000fe9 <sYSMALLOc+0x14f>
c0000fe5:	2b 6c 24 04          	sub    ebp,DWORD PTR [esp+0x4]
c0000fe9:	03 6c 24 10          	add    ebp,DWORD PTR [esp+0x10]
c0000fed:	23 6c 24 14          	and    ebp,DWORD PTR [esp+0x14]
c0000ff1:	89 ee                	mov    esi,ebp
c0000ff3:	7f 19                	jg     c000100e <sYSMALLOc+0x174>
c0000ff5:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000ffc:	74 28                	je     c0001026 <sYSMALLOc+0x18c>
c0000ffe:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001002:	03 74 24 04          	add    esi,DWORD PTR [esp+0x4]
c0001006:	01 ee                	add    esi,ebp
c0001008:	23 74 24 14          	and    esi,DWORD PTR [esp+0x14]
c000100c:	eb 18                	jmp    c0001026 <sYSMALLOc+0x18c>
c000100e:	83 ec 0c             	sub    esp,0xc
c0001011:	55                   	push   ebp
c0001012:	e8 a5 d7 00 00       	call   c000e7bc <sbrk_thunk>
c0001017:	83 c4 10             	add    esp,0x10
c000101a:	89 c7                	mov    edi,eax
c000101c:	83 c8 ff             	or     eax,0xffffffff
c000101f:	83 ff ff             	cmp    edi,0xffffffff
c0001022:	75 42                	jne    c0001066 <sYSMALLOc+0x1cc>
c0001024:	eb cf                	jmp    c0000ff5 <sYSMALLOc+0x15b>
c0001026:	81 fe ff bf 00 00    	cmp    esi,0xbfff
c000102c:	77 05                	ja     c0001033 <sYSMALLOc+0x199>
c000102e:	be 00 c0 00 00       	mov    esi,0xc000
c0001033:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0001037:	77 07                	ja     c0001040 <sYSMALLOc+0x1a6>
c0001039:	31 c0                	xor    eax,eax
c000103b:	e9 00 02 00 00       	jmp    c0001240 <sYSMALLOc+0x3a6>
c0001040:	50                   	push   eax
c0001041:	50                   	push   eax
c0001042:	6a 00                	push   0x0
c0001044:	6a ff                	push   0xffffffff
c0001046:	6a 0c                	push   0xc
c0001048:	6a 03                	push   0x3
c000104a:	56                   	push   esi
c000104b:	6a 00                	push   0x0
c000104d:	e8 a0 d7 00 00       	call   c000e7f2 <mmap>
c0001052:	83 c4 20             	add    esp,0x20
c0001055:	83 f8 ff             	cmp    eax,0xffffffff
c0001058:	89 c7                	mov    edi,eax
c000105a:	74 dd                	je     c0001039 <sYSMALLOc+0x19f>
c000105c:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001063:	8d 04 30             	lea    eax,[eax+esi*1]
c0001066:	8b 8b 68 03 00 00    	mov    ecx,DWORD PTR [ebx+0x368]
c000106c:	01 f1                	add    ecx,esi
c000106e:	39 7c 24 18          	cmp    DWORD PTR [esp+0x18],edi
c0001072:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c0001078:	75 70                	jne    c00010ea <sYSMALLOc+0x250>
c000107a:	83 f8 ff             	cmp    eax,0xffffffff
c000107d:	75 6b                	jne    c00010ea <sYSMALLOc+0x250>
c000107f:	03 74 24 04          	add    esi,DWORD PTR [esp+0x4]
c0001083:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001087:	83 ce 01             	or     esi,0x1
c000108a:	89 70 04             	mov    DWORD PTR [eax+0x4],esi
c000108d:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0001093:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0001099:	73 06                	jae    c00010a1 <sYSMALLOc+0x207>
c000109b:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c00010a1:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c00010a7:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c00010ad:	73 06                	jae    c00010b5 <sYSMALLOc+0x21b>
c00010af:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c00010b5:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00010b8:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010bb:	83 e2 fc             	and    edx,0xfffffffc
c00010be:	39 54 24 1c          	cmp    DWORD PTR [esp+0x1c],edx
c00010c2:	0f 87 71 ff ff ff    	ja     c0001039 <sYSMALLOc+0x19f>
c00010c8:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00010cc:	8d 0c 38             	lea    ecx,[eax+edi*1]
c00010cf:	29 fa                	sub    edx,edi
c00010d1:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00010d4:	89 fb                	mov    ebx,edi
c00010d6:	83 ca 01             	or     edx,0x1
c00010d9:	83 cb 01             	or     ebx,0x1
c00010dc:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00010df:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010e2:	83 c0 08             	add    eax,0x8
c00010e5:	e9 56 01 00 00       	jmp    c0001240 <sYSMALLOc+0x3a6>
c00010ea:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c00010f0:	f6 c2 01             	test   dl,0x1
c00010f3:	74 1e                	je     c0001113 <sYSMALLOc+0x279>
c00010f5:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00010fa:	0f 84 bb 00 00 00    	je     c00011bb <sYSMALLOc+0x321>
c0001100:	39 7c 24 18          	cmp    DWORD PTR [esp+0x18],edi
c0001104:	0f 86 b1 00 00 00    	jbe    c00011bb <sYSMALLOc+0x321>
c000110a:	83 e2 fe             	and    edx,0xfffffffe
c000110d:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0001113:	83 f8 ff             	cmp    eax,0xffffffff
c0001116:	89 fd                	mov    ebp,edi
c0001118:	75 24                	jne    c000113e <sYSMALLOc+0x2a4>
c000111a:	83 ec 0c             	sub    esp,0xc
c000111d:	89 fd                	mov    ebp,edi
c000111f:	6a 00                	push   0x0
c0001121:	e8 96 d6 00 00       	call   c000e7bc <sbrk_thunk>
c0001126:	83 c4 10             	add    esp,0x10
c0001129:	89 c2                	mov    edx,eax
c000112b:	29 fa                	sub    edx,edi
c000112d:	29 f2                	sub    edx,esi
c000112f:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0001135:	83 f8 ff             	cmp    eax,0xffffffff
c0001138:	0f 84 4f ff ff ff    	je     c000108d <sYSMALLOc+0x1f3>
c000113e:	31 c9                	xor    ecx,ecx
c0001140:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0001143:	29 e8                	sub    eax,ebp
c0001145:	01 c8                	add    eax,ecx
c0001147:	83 c8 01             	or     eax,0x1
c000114a:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000114d:	01 8b 68 03 00 00    	add    DWORD PTR [ebx+0x368],ecx
c0001153:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0001158:	0f 84 2f ff ff ff    	je     c000108d <sYSMALLOc+0x1f3>
c000115e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0001162:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0001166:	83 ee 0c             	sub    esi,0xc
c0001169:	83 e6 f8             	and    esi,0xfffffff8
c000116c:	89 f0                	mov    eax,esi
c000116e:	83 c8 01             	or     eax,0x1
c0001171:	83 fe 0f             	cmp    esi,0xf
c0001174:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0001177:	c7 44 37 04 05 00 00 00 	mov    DWORD PTR [edi+esi*1+0x4],0x5
c000117f:	c7 44 37 08 05 00 00 00 	mov    DWORD PTR [edi+esi*1+0x8],0x5
c0001187:	0f 86 00 ff ff ff    	jbe    c000108d <sYSMALLOc+0x1f3>
c000118d:	83 ec 0c             	sub    esp,0xc
c0001190:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0001196:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c00011a0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00011a4:	83 c0 08             	add    eax,0x8
c00011a7:	50                   	push   eax
c00011a8:	e8 d9 fb ff ff       	call   c0000d86 <dlfree>
c00011ad:	83 c4 10             	add    esp,0x10
c00011b0:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c00011b6:	e9 d2 fe ff ff       	jmp    c000108d <sYSMALLOc+0x1f3>
c00011bb:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00011c0:	74 0e                	je     c00011d0 <sYSMALLOc+0x336>
c00011c2:	89 f8                	mov    eax,edi
c00011c4:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c00011c8:	01 c1                	add    ecx,eax
c00011ca:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c00011d0:	89 fa                	mov    edx,edi
c00011d2:	83 e2 07             	and    edx,0x7
c00011d5:	74 0c                	je     c00011e3 <sYSMALLOc+0x349>
c00011d7:	b8 08 00 00 00       	mov    eax,0x8
c00011dc:	29 d0                	sub    eax,edx
c00011de:	8d 2c 07             	lea    ebp,[edi+eax*1]
c00011e1:	eb 04                	jmp    c00011e7 <sYSMALLOc+0x34d>
c00011e3:	89 fd                	mov    ebp,edi
c00011e5:	31 c0                	xor    eax,eax
c00011e7:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c00011eb:	83 ec 0c             	sub    esp,0xc
c00011ee:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00011f2:	8d 14 06             	lea    edx,[esi+eax*1]
c00011f5:	01 fa                	add    edx,edi
c00011f7:	01 d1                	add    ecx,edx
c00011f9:	29 d0                	sub    eax,edx
c00011fb:	23 4c 24 20          	and    ecx,DWORD PTR [esp+0x20]
c00011ff:	01 c1                	add    ecx,eax
c0001201:	51                   	push   ecx
c0001202:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0001206:	e8 b1 d5 00 00       	call   c000e7bc <sbrk_thunk>
c000120b:	83 c4 10             	add    esp,0x10
c000120e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001212:	83 f8 ff             	cmp    eax,0xffffffff
c0001215:	75 12                	jne    c0001229 <sYSMALLOc+0x38f>
c0001217:	83 ec 0c             	sub    esp,0xc
c000121a:	6a 00                	push   0x0
c000121c:	e8 9b d5 00 00       	call   c000e7bc <sbrk_thunk>
c0001221:	83 c4 10             	add    esp,0x10
c0001224:	e9 0c ff ff ff       	jmp    c0001135 <sYSMALLOc+0x29b>
c0001229:	39 f8                	cmp    eax,edi
c000122b:	0f 83 0f ff ff ff    	jae    c0001140 <sYSMALLOc+0x2a6>
c0001231:	8d 04 37             	lea    eax,[edi+esi*1]
c0001234:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c000123b:	e9 f5 fe ff ff       	jmp    c0001135 <sYSMALLOc+0x29b>
c0001240:	83 c4 2c             	add    esp,0x2c
c0001243:	5b                   	pop    ebx
c0001244:	5e                   	pop    esi
c0001245:	5f                   	pop    edi
c0001246:	5d                   	pop    ebp
c0001247:	c3                   	ret    

c0001248 <dlmalloc>:
c0001248:	55                   	push   ebp
c0001249:	57                   	push   edi
c000124a:	56                   	push   esi
c000124b:	53                   	push   ebx
c000124c:	83 ec 1c             	sub    esp,0x1c
c000124f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001253:	83 f8 df             	cmp    eax,0xffffffdf
c0001256:	0f 87 70 03 00 00    	ja     c00015cc <dlmalloc+0x384>
c000125c:	83 c0 0b             	add    eax,0xb
c000125f:	be 10 00 00 00       	mov    esi,0x10
c0001264:	83 f8 0f             	cmp    eax,0xf
c0001267:	76 05                	jbe    c000126e <dlmalloc+0x26>
c0001269:	83 e0 f8             	and    eax,0xfffffff8
c000126c:	89 c6                	mov    esi,eax
c000126e:	8b 3d 00 61 02 c0    	mov    edi,DWORD PTR ds:0xc0026100
c0001274:	f7 c7 01 00 00 00    	test   edi,0x1
c000127a:	75 17                	jne    c0001293 <dlmalloc+0x4b>
c000127c:	85 ff                	test   edi,edi
c000127e:	0f 85 05 03 00 00    	jne    c0001589 <dlmalloc+0x341>
c0001284:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001289:	e8 11 fa ff ff       	call   c0000c9f <malloc_consolidate>
c000128e:	e9 f6 02 00 00       	jmp    c0001589 <dlmalloc+0x341>
c0001293:	39 f7                	cmp    edi,esi
c0001295:	72 1f                	jb     c00012b6 <dlmalloc+0x6e>
c0001297:	89 f2                	mov    edx,esi
c0001299:	c1 ea 03             	shr    edx,0x3
c000129c:	83 ea 02             	sub    edx,0x2
c000129f:	8b 04 95 04 61 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd9efc]
c00012a6:	85 c0                	test   eax,eax
c00012a8:	74 0c                	je     c00012b6 <dlmalloc+0x6e>
c00012aa:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c00012ad:	89 0c 95 04 61 02 c0 	mov    DWORD PTR [edx*4-0x3ffd9efc],ecx
c00012b4:	eb 30                	jmp    c00012e6 <dlmalloc+0x9e>
c00012b6:	81 fe ff 00 00 00    	cmp    esi,0xff
c00012bc:	89 f0                	mov    eax,esi
c00012be:	77 2e                	ja     c00012ee <dlmalloc+0xa6>
c00012c0:	c1 e8 03             	shr    eax,0x3
c00012c3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00012c7:	8d 14 c5 34 61 02 c0 	lea    edx,[eax*8-0x3ffd9ecc]
c00012ce:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00012d1:	8d 5a f8             	lea    ebx,[edx-0x8]
c00012d4:	39 c3                	cmp    ebx,eax
c00012d6:	74 2e                	je     c0001306 <dlmalloc+0xbe>
c00012d8:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00012db:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00012e0:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00012e3:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00012e6:	83 c0 08             	add    eax,0x8
c00012e9:	e9 e0 02 00 00       	jmp    c00015ce <dlmalloc+0x386>
c00012ee:	e8 28 f9 ff ff       	call   c0000c1b <largebin_index>
c00012f3:	83 e7 02             	and    edi,0x2
c00012f6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00012fa:	74 0a                	je     c0001306 <dlmalloc+0xbe>
c00012fc:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001301:	e8 99 f9 ff ff       	call   c0000c9f <malloc_consolidate>
c0001306:	8d 46 10             	lea    eax,[esi+0x10]
c0001309:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000130d:	8b 1d 40 61 02 c0    	mov    ebx,DWORD PTR ds:0xc0026140
c0001313:	81 fb 34 61 02 c0    	cmp    ebx,0xc0026134
c0001319:	0f 84 13 01 00 00    	je     c0001432 <dlmalloc+0x1ea>
c000131f:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0001322:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0001325:	83 e7 fc             	and    edi,0xfffffffc
c0001328:	81 fe ff 00 00 00    	cmp    esi,0xff
c000132e:	77 4c                	ja     c000137c <dlmalloc+0x134>
c0001330:	3d 34 61 02 c0       	cmp    eax,0xc0026134
c0001335:	75 45                	jne    c000137c <dlmalloc+0x134>
c0001337:	39 1d 30 61 02 c0    	cmp    DWORD PTR ds:0xc0026130,ebx
c000133d:	75 3d                	jne    c000137c <dlmalloc+0x134>
c000133f:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0001343:	73 37                	jae    c000137c <dlmalloc+0x134>
c0001345:	8d 04 33             	lea    eax,[ebx+esi*1]
c0001348:	89 fa                	mov    edx,edi
c000134a:	a3 3c 61 02 c0       	mov    ds:0xc002613c,eax
c000134f:	29 f2                	sub    edx,esi
c0001351:	83 ce 01             	or     esi,0x1
c0001354:	a3 40 61 02 c0       	mov    ds:0xc0026140,eax
c0001359:	89 d1                	mov    ecx,edx
c000135b:	a3 30 61 02 c0       	mov    ds:0xc0026130,eax
c0001360:	83 c9 01             	or     ecx,0x1
c0001363:	c7 40 08 34 61 02 c0 	mov    DWORD PTR [eax+0x8],0xc0026134
c000136a:	c7 40 0c 34 61 02 c0 	mov    DWORD PTR [eax+0xc],0xc0026134
c0001371:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001374:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001377:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c000137a:	eb 15                	jmp    c0001391 <dlmalloc+0x149>
c000137c:	a3 40 61 02 c0       	mov    ds:0xc0026140,eax
c0001381:	39 fe                	cmp    esi,edi
c0001383:	c7 40 08 34 61 02 c0 	mov    DWORD PTR [eax+0x8],0xc0026134
c000138a:	75 0d                	jne    c0001399 <dlmalloc+0x151>
c000138c:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001391:	8d 43 08             	lea    eax,[ebx+0x8]
c0001394:	e9 35 02 00 00       	jmp    c00015ce <dlmalloc+0x386>
c0001399:	81 ff ff 00 00 00    	cmp    edi,0xff
c000139f:	89 f8                	mov    eax,edi
c00013a1:	77 19                	ja     c00013bc <dlmalloc+0x174>
c00013a3:	c1 e8 03             	shr    eax,0x3
c00013a6:	8d 14 00             	lea    edx,[eax+eax*1]
c00013a9:	83 c2 0d             	add    edx,0xd
c00013ac:	8d 2c 95 f8 60 02 c0 	lea    ebp,[edx*4-0x3ffd9f08]
c00013b3:	8b 14 95 00 61 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9f00]
c00013ba:	eb 46                	jmp    c0001402 <dlmalloc+0x1ba>
c00013bc:	e8 5a f8 ff ff       	call   c0000c1b <largebin_index>
c00013c1:	8d 14 00             	lea    edx,[eax+eax*1]
c00013c4:	83 c2 0d             	add    edx,0xd
c00013c7:	8d 0c 95 00 61 02 c0 	lea    ecx,[edx*4-0x3ffd9f00]
c00013ce:	8b 14 95 00 61 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9f00]
c00013d5:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00013d8:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00013dc:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00013e0:	89 d5                	mov    ebp,edx
c00013e2:	74 1e                	je     c0001402 <dlmalloc+0x1ba>
c00013e4:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00013e7:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00013ea:	77 12                	ja     c00013fe <dlmalloc+0x1b6>
c00013ec:	83 cf 01             	or     edi,0x1
c00013ef:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00013f2:	76 05                	jbe    c00013f9 <dlmalloc+0x1b1>
c00013f4:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00013f7:	eb f6                	jmp    c00013ef <dlmalloc+0x1a7>
c00013f9:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00013fc:	eb 04                	jmp    c0001402 <dlmalloc+0x1ba>
c00013fe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001402:	89 c7                	mov    edi,eax
c0001404:	88 c1                	mov    cl,al
c0001406:	c1 ff 05             	sar    edi,0x5
c0001409:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000140d:	bf 01 00 00 00       	mov    edi,0x1
c0001412:	d3 e7                	shl    edi,cl
c0001414:	89 f8                	mov    eax,edi
c0001416:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000141a:	09 04 bd 34 64 02 c0 	or     DWORD PTR [edi*4-0x3ffd9bcc],eax
c0001421:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c0001424:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0001427:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c000142a:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c000142d:	e9 db fe ff ff       	jmp    c000130d <dlmalloc+0xc5>
c0001432:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001438:	76 78                	jbe    c00014b2 <dlmalloc+0x26a>
c000143a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000143e:	8d 04 c5 34 61 02 c0 	lea    eax,[eax*8-0x3ffd9ecc]
c0001445:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001448:	8d 48 f8             	lea    ecx,[eax-0x8]
c000144b:	39 ca                	cmp    edx,ecx
c000144d:	74 63                	je     c00014b2 <dlmalloc+0x26a>
c000144f:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0001452:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001455:	83 e3 fc             	and    ebx,0xfffffffc
c0001458:	39 de                	cmp    esi,ebx
c000145a:	77 52                	ja     c00014ae <dlmalloc+0x266>
c000145c:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c000145f:	89 df                	mov    edi,ebx
c0001461:	01 d3                	add    ebx,edx
c0001463:	29 f7                	sub    edi,esi
c0001465:	83 ff 0f             	cmp    edi,0xf
c0001468:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000146b:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000146e:	8d 42 08             	lea    eax,[edx+0x8]
c0001471:	77 09                	ja     c000147c <dlmalloc+0x234>
c0001473:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001477:	e9 52 01 00 00       	jmp    c00015ce <dlmalloc+0x386>
c000147c:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000147f:	83 ce 01             	or     esi,0x1
c0001482:	89 0d 3c 61 02 c0    	mov    DWORD PTR ds:0xc002613c,ecx
c0001488:	89 0d 40 61 02 c0    	mov    DWORD PTR ds:0xc0026140,ecx
c000148e:	c7 41 08 34 61 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0026134
c0001495:	c7 41 0c 34 61 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0026134
c000149c:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000149f:	89 fa                	mov    edx,edi
c00014a1:	83 ca 01             	or     edx,0x1
c00014a4:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00014a7:	89 3b                	mov    DWORD PTR [ebx],edi
c00014a9:	e9 20 01 00 00       	jmp    c00015ce <dlmalloc+0x386>
c00014ae:	89 c2                	mov    edx,eax
c00014b0:	eb 99                	jmp    c000144b <dlmalloc+0x203>
c00014b2:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00014b6:	b8 01 00 00 00       	mov    eax,0x1
c00014bb:	41                   	inc    ecx
c00014bc:	8d 14 cd 2c 61 02 c0 	lea    edx,[ecx*8-0x3ffd9ed4]
c00014c3:	89 cb                	mov    ebx,ecx
c00014c5:	c1 eb 05             	shr    ebx,0x5
c00014c8:	8b 3c 9d 34 64 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd9bcc]
c00014cf:	d3 e0                	shl    eax,cl
c00014d1:	39 f8                	cmp    eax,edi
c00014d3:	77 04                	ja     c00014d9 <dlmalloc+0x291>
c00014d5:	85 c0                	test   eax,eax
c00014d7:	75 26                	jne    c00014ff <dlmalloc+0x2b7>
c00014d9:	43                   	inc    ebx
c00014da:	83 fb 02             	cmp    ebx,0x2
c00014dd:	0f 87 a6 00 00 00    	ja     c0001589 <dlmalloc+0x341>
c00014e3:	8b 3c 9d 34 64 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd9bcc]
c00014ea:	85 ff                	test   edi,edi
c00014ec:	74 eb                	je     c00014d9 <dlmalloc+0x291>
c00014ee:	89 d8                	mov    eax,ebx
c00014f0:	c1 e0 06             	shl    eax,0x6
c00014f3:	8d 14 85 2c 61 02 c0 	lea    edx,[eax*4-0x3ffd9ed4]
c00014fa:	b8 01 00 00 00       	mov    eax,0x1
c00014ff:	85 f8                	test   eax,edi
c0001501:	75 07                	jne    c000150a <dlmalloc+0x2c2>
c0001503:	83 c2 08             	add    edx,0x8
c0001506:	01 c0                	add    eax,eax
c0001508:	eb f5                	jmp    c00014ff <dlmalloc+0x2b7>
c000150a:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c000150d:	39 ca                	cmp    edx,ecx
c000150f:	75 14                	jne    c0001525 <dlmalloc+0x2dd>
c0001511:	89 c1                	mov    ecx,eax
c0001513:	83 c2 08             	add    edx,0x8
c0001516:	f7 d1                	not    ecx
c0001518:	01 c0                	add    eax,eax
c000151a:	21 cf                	and    edi,ecx
c000151c:	89 3c 9d 34 64 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd9bcc],edi
c0001523:	eb ac                	jmp    c00014d1 <dlmalloc+0x289>
c0001525:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0001528:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c000152b:	83 e0 fc             	and    eax,0xfffffffc
c000152e:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001531:	89 c3                	mov    ebx,eax
c0001533:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001536:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001539:	29 f3                	sub    ebx,esi
c000153b:	8d 41 08             	lea    eax,[ecx+0x8]
c000153e:	83 fb 0f             	cmp    ebx,0xf
c0001541:	77 09                	ja     c000154c <dlmalloc+0x304>
c0001543:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001547:	e9 82 00 00 00       	jmp    c00015ce <dlmalloc+0x386>
c000154c:	8d 3c 31             	lea    edi,[ecx+esi*1]
c000154f:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001555:	89 3d 3c 61 02 c0    	mov    DWORD PTR ds:0xc002613c,edi
c000155b:	89 3d 40 61 02 c0    	mov    DWORD PTR ds:0xc0026140,edi
c0001561:	c7 47 08 34 61 02 c0 	mov    DWORD PTR [edi+0x8],0xc0026134
c0001568:	c7 47 0c 34 61 02 c0 	mov    DWORD PTR [edi+0xc],0xc0026134
c000156f:	77 06                	ja     c0001577 <dlmalloc+0x32f>
c0001571:	89 3d 30 61 02 c0    	mov    DWORD PTR ds:0xc0026130,edi
c0001577:	83 ce 01             	or     esi,0x1
c000157a:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c000157d:	89 d9                	mov    ecx,ebx
c000157f:	83 c9 01             	or     ecx,0x1
c0001582:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001585:	89 1a                	mov    DWORD PTR [edx],ebx
c0001587:	eb 45                	jmp    c00015ce <dlmalloc+0x386>
c0001589:	a1 2c 61 02 c0       	mov    eax,ds:0xc002612c
c000158e:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001591:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001594:	83 e2 fc             	and    edx,0xfffffffc
c0001597:	39 d1                	cmp    ecx,edx
c0001599:	77 1e                	ja     c00015b9 <dlmalloc+0x371>
c000159b:	89 f3                	mov    ebx,esi
c000159d:	29 f2                	sub    edx,esi
c000159f:	8d 0c 30             	lea    ecx,[eax+esi*1]
c00015a2:	83 cb 01             	or     ebx,0x1
c00015a5:	89 0d 2c 61 02 c0    	mov    DWORD PTR ds:0xc002612c,ecx
c00015ab:	83 ca 01             	or     edx,0x1
c00015ae:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015b1:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00015b4:	e9 2d fd ff ff       	jmp    c00012e6 <dlmalloc+0x9e>
c00015b9:	83 c4 1c             	add    esp,0x1c
c00015bc:	89 f0                	mov    eax,esi
c00015be:	5b                   	pop    ebx
c00015bf:	ba 00 61 02 c0       	mov    edx,0xc0026100
c00015c4:	5e                   	pop    esi
c00015c5:	5f                   	pop    edi
c00015c6:	5d                   	pop    ebp
c00015c7:	e9 ce f8 ff ff       	jmp    c0000e9a <sYSMALLOc>
c00015cc:	31 c0                	xor    eax,eax
c00015ce:	83 c4 1c             	add    esp,0x1c
c00015d1:	5b                   	pop    ebx
c00015d2:	5e                   	pop    esi
c00015d3:	5f                   	pop    edi
c00015d4:	5d                   	pop    ebp
c00015d5:	c3                   	ret    

c00015d6 <iALLOc>:
c00015d6:	55                   	push   ebp
c00015d7:	89 c5                	mov    ebp,eax
c00015d9:	57                   	push   edi
c00015da:	56                   	push   esi
c00015db:	53                   	push   ebx
c00015dc:	83 ec 2c             	sub    esp,0x2c
c00015df:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00015e3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00015e7:	83 3d 00 61 02 c0 00 	cmp    DWORD PTR ds:0xc0026100,0x0
c00015ee:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00015f2:	75 12                	jne    c0001606 <iALLOc+0x30>
c00015f4:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00015f8:	b8 00 61 02 c0       	mov    eax,0xc0026100
c00015fd:	e8 9d f6 ff ff       	call   c0000c9f <malloc_consolidate>
c0001602:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001606:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000160b:	74 12                	je     c000161f <iALLOc+0x49>
c000160d:	85 ed                	test   ebp,ebp
c000160f:	0f 84 64 01 00 00    	je     c0001779 <iALLOc+0x1a3>
c0001615:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000161d:	eb 33                	jmp    c0001652 <iALLOc+0x7c>
c000161f:	85 ed                	test   ebp,ebp
c0001621:	75 14                	jne    c0001637 <iALLOc+0x61>
c0001623:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c000162b:	83 c4 2c             	add    esp,0x2c
c000162e:	5b                   	pop    ebx
c000162f:	5e                   	pop    esi
c0001630:	5f                   	pop    edi
c0001631:	5d                   	pop    ebp
c0001632:	e9 11 fc ff ff       	jmp    c0001248 <dlmalloc>
c0001637:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c000163f:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c0001646:	83 f8 0f             	cmp    eax,0xf
c0001649:	76 07                	jbe    c0001652 <iALLOc+0x7c>
c000164b:	83 e0 f8             	and    eax,0xfffffff8
c000164e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001652:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001657:	75 09                	jne    c0001662 <iALLOc+0x8c>
c0001659:	89 d0                	mov    eax,edx
c000165b:	31 f6                	xor    esi,esi
c000165d:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001660:	eb 3b                	jmp    c000169d <iALLOc+0xc7>
c0001662:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c000166a:	8b 02                	mov    eax,DWORD PTR [edx]
c000166c:	83 c0 0b             	add    eax,0xb
c000166f:	83 f8 0f             	cmp    eax,0xf
c0001672:	76 07                	jbe    c000167b <iALLOc+0xa5>
c0001674:	83 e0 f8             	and    eax,0xfffffff8
c0001677:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000167b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000167f:	0f af f5             	imul   esi,ebp
c0001682:	eb 25                	jmp    c00016a9 <iALLOc+0xd3>
c0001684:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001686:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001689:	bb 10 00 00 00       	mov    ebx,0x10
c000168e:	83 f9 0f             	cmp    ecx,0xf
c0001691:	76 05                	jbe    c0001698 <iALLOc+0xc2>
c0001693:	83 e1 f8             	and    ecx,0xfffffff8
c0001696:	89 cb                	mov    ebx,ecx
c0001698:	01 de                	add    esi,ebx
c000169a:	83 c0 04             	add    eax,0x4
c000169d:	39 c7                	cmp    edi,eax
c000169f:	75 e3                	jne    c0001684 <iALLOc+0xae>
c00016a1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00016a9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00016ad:	83 ec 0c             	sub    esp,0xc
c00016b0:	8b 1d 54 64 02 c0    	mov    ebx,DWORD PTR ds:0xc0026454
c00016b6:	c7 05 54 64 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026454,0x0
c00016c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00016c4:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c00016c8:	50                   	push   eax
c00016c9:	e8 7a fb ff ff       	call   c0001248 <dlmalloc>
c00016ce:	83 c4 10             	add    esp,0x10
c00016d1:	89 1d 54 64 02 c0    	mov    DWORD PTR ds:0xc0026454,ebx
c00016d7:	85 c0                	test   eax,eax
c00016d9:	0f 84 92 00 00 00    	je     c0001771 <iALLOc+0x19b>
c00016df:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00016e2:	8d 78 f8             	lea    edi,[eax-0x8]
c00016e5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00016e9:	83 e3 fc             	and    ebx,0xfffffffc
c00016ec:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00016f1:	74 1e                	je     c0001711 <iALLOc+0x13b>
c00016f3:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00016f7:	89 d9                	mov    ecx,ebx
c00016f9:	52                   	push   edx
c00016fa:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00016fe:	83 e9 04             	sub    ecx,0x4
c0001701:	51                   	push   ecx
c0001702:	6a 00                	push   0x0
c0001704:	50                   	push   eax
c0001705:	e8 e6 ed ff ff       	call   c00004f0 <memset>
c000170a:	83 c4 10             	add    esp,0x10
c000170d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001711:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0001716:	75 14                	jne    c000172c <iALLOc+0x156>
c0001718:	8d 04 37             	lea    eax,[edi+esi*1]
c000171b:	29 f3                	sub    ebx,esi
c000171d:	8d 48 08             	lea    ecx,[eax+0x8]
c0001720:	83 cb 01             	or     ebx,0x1
c0001723:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001726:	89 f3                	mov    ebx,esi
c0001728:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000172c:	31 c0                	xor    eax,eax
c000172e:	4d                   	dec    ebp
c000172f:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001733:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001736:	39 c5                	cmp    ebp,eax
c0001738:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c000173b:	74 2c                	je     c0001769 <iALLOc+0x193>
c000173d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001741:	85 c9                	test   ecx,ecx
c0001743:	75 15                	jne    c000175a <iALLOc+0x184>
c0001745:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001748:	8d 71 0b             	lea    esi,[ecx+0xb]
c000174b:	b9 10 00 00 00       	mov    ecx,0x10
c0001750:	83 fe 0f             	cmp    esi,0xf
c0001753:	76 05                	jbe    c000175a <iALLOc+0x184>
c0001755:	83 e6 f8             	and    esi,0xfffffff8
c0001758:	89 f1                	mov    ecx,esi
c000175a:	89 ce                	mov    esi,ecx
c000175c:	29 cb                	sub    ebx,ecx
c000175e:	83 ce 01             	or     esi,0x1
c0001761:	40                   	inc    eax
c0001762:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001765:	01 cf                	add    edi,ecx
c0001767:	eb c6                	jmp    c000172f <iALLOc+0x159>
c0001769:	83 cb 01             	or     ebx,0x1
c000176c:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000176f:	eb 08                	jmp    c0001779 <iALLOc+0x1a3>
c0001771:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001779:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000177d:	83 c4 2c             	add    esp,0x2c
c0001780:	5b                   	pop    ebx
c0001781:	5e                   	pop    esi
c0001782:	5f                   	pop    edi
c0001783:	5d                   	pop    ebp
c0001784:	c3                   	ret    

c0001785 <dlrealloc>:
c0001785:	55                   	push   ebp
c0001786:	57                   	push   edi
c0001787:	56                   	push   esi
c0001788:	53                   	push   ebx
c0001789:	83 ec 1c             	sub    esp,0x1c
c000178c:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001790:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001794:	85 db                	test   ebx,ebx
c0001796:	75 10                	jne    c00017a8 <dlrealloc+0x23>
c0001798:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000179c:	83 c4 1c             	add    esp,0x1c
c000179f:	5b                   	pop    ebx
c00017a0:	5e                   	pop    esi
c00017a1:	5f                   	pop    edi
c00017a2:	5d                   	pop    ebp
c00017a3:	e9 a0 fa ff ff       	jmp    c0001248 <dlmalloc>
c00017a8:	83 f8 df             	cmp    eax,0xffffffdf
c00017ab:	0f 87 a6 01 00 00    	ja     c0001957 <dlrealloc+0x1d2>
c00017b1:	83 c0 0b             	add    eax,0xb
c00017b4:	bd 10 00 00 00       	mov    ebp,0x10
c00017b9:	83 f8 0f             	cmp    eax,0xf
c00017bc:	76 05                	jbe    c00017c3 <dlrealloc+0x3e>
c00017be:	83 e0 f8             	and    eax,0xfffffff8
c00017c1:	89 c5                	mov    ebp,eax
c00017c3:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00017c6:	89 ce                	mov    esi,ecx
c00017c8:	83 e6 fc             	and    esi,0xfffffffc
c00017cb:	f6 c1 02             	test   cl,0x2
c00017ce:	0f 85 4e 01 00 00    	jne    c0001922 <dlrealloc+0x19d>
c00017d4:	8d 7b f8             	lea    edi,[ebx-0x8]
c00017d7:	39 f5                	cmp    ebp,esi
c00017d9:	0f 86 04 01 00 00    	jbe    c00018e3 <dlrealloc+0x15e>
c00017df:	8d 14 37             	lea    edx,[edi+esi*1]
c00017e2:	39 15 2c 61 02 c0    	cmp    DWORD PTR ds:0xc002612c,edx
c00017e8:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00017eb:	75 33                	jne    c0001820 <dlrealloc+0x9b>
c00017ed:	83 e0 fc             	and    eax,0xfffffffc
c00017f0:	01 f0                	add    eax,esi
c00017f2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00017f6:	8d 45 10             	lea    eax,[ebp+0x10]
c00017f9:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00017fd:	77 49                	ja     c0001848 <dlrealloc+0xc3>
c00017ff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001803:	83 e1 01             	and    ecx,0x1
c0001806:	01 ef                	add    edi,ebp
c0001808:	09 e9                	or     ecx,ebp
c000180a:	89 4b fc             	mov    DWORD PTR [ebx-0x4],ecx
c000180d:	89 3d 2c 61 02 c0    	mov    DWORD PTR ds:0xc002612c,edi
c0001813:	29 e8                	sub    eax,ebp
c0001815:	83 c8 01             	or     eax,0x1
c0001818:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c000181b:	e9 39 01 00 00       	jmp    c0001959 <dlrealloc+0x1d4>
c0001820:	89 c1                	mov    ecx,eax
c0001822:	83 e1 fe             	and    ecx,0xfffffffe
c0001825:	f6 44 0a 04 01       	test   BYTE PTR [edx+ecx*1+0x4],0x1
c000182a:	75 1c                	jne    c0001848 <dlrealloc+0xc3>
c000182c:	83 e0 fc             	and    eax,0xfffffffc
c000182f:	01 f0                	add    eax,esi
c0001831:	39 c5                	cmp    ebp,eax
c0001833:	77 13                	ja     c0001848 <dlrealloc+0xc3>
c0001835:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001838:	89 c6                	mov    esi,eax
c000183a:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000183d:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0001840:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0001843:	e9 9b 00 00 00       	jmp    c00018e3 <dlrealloc+0x15e>
c0001848:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000184c:	8d 45 f9             	lea    eax,[ebp-0x7]
c000184f:	83 ec 0c             	sub    esp,0xc
c0001852:	50                   	push   eax
c0001853:	e8 f0 f9 ff ff       	call   c0001248 <dlmalloc>
c0001858:	83 c4 10             	add    esp,0x10
c000185b:	85 c0                	test   eax,eax
c000185d:	0f 84 f4 00 00 00    	je     c0001957 <dlrealloc+0x1d2>
c0001863:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001867:	8d 48 f8             	lea    ecx,[eax-0x8]
c000186a:	39 ca                	cmp    edx,ecx
c000186c:	75 0a                	jne    c0001878 <dlrealloc+0xf3>
c000186e:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001871:	83 e0 fc             	and    eax,0xfffffffc
c0001874:	01 c6                	add    esi,eax
c0001876:	eb 6b                	jmp    c00018e3 <dlrealloc+0x15e>
c0001878:	8d 4e fc             	lea    ecx,[esi-0x4]
c000187b:	83 f9 27             	cmp    ecx,0x27
c000187e:	76 08                	jbe    c0001888 <dlrealloc+0x103>
c0001880:	89 de                	mov    esi,ebx
c0001882:	89 c7                	mov    edi,eax
c0001884:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001886:	eb 43                	jmp    c00018cb <dlrealloc+0x146>
c0001888:	8b 13                	mov    edx,DWORD PTR [ebx]
c000188a:	83 f9 13             	cmp    ecx,0x13
c000188d:	89 10                	mov    DWORD PTR [eax],edx
c000188f:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0001892:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0001895:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001898:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000189b:	76 2e                	jbe    c00018cb <dlrealloc+0x146>
c000189d:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00018a0:	83 f9 1b             	cmp    ecx,0x1b
c00018a3:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00018a6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00018a9:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00018ac:	76 1d                	jbe    c00018cb <dlrealloc+0x146>
c00018ae:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00018b1:	83 f9 23             	cmp    ecx,0x23
c00018b4:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00018b7:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00018ba:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00018bd:	76 0c                	jbe    c00018cb <dlrealloc+0x146>
c00018bf:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00018c2:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c00018c5:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00018c8:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00018cb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00018cf:	83 ec 0c             	sub    esp,0xc
c00018d2:	53                   	push   ebx
c00018d3:	e8 ae f4 ff ff       	call   c0000d86 <dlfree>
c00018d8:	83 c4 10             	add    esp,0x10
c00018db:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00018df:	89 c3                	mov    ebx,eax
c00018e1:	eb 76                	jmp    c0001959 <dlrealloc+0x1d4>
c00018e3:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00018e6:	8d 04 37             	lea    eax,[edi+esi*1]
c00018e9:	89 f2                	mov    edx,esi
c00018eb:	29 ea                	sub    edx,ebp
c00018ed:	83 e1 01             	and    ecx,0x1
c00018f0:	83 fa 0f             	cmp    edx,0xf
c00018f3:	77 0b                	ja     c0001900 <dlrealloc+0x17b>
c00018f5:	09 f1                	or     ecx,esi
c00018f7:	89 4b fc             	mov    DWORD PTR [ebx-0x4],ecx
c00018fa:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00018fe:	eb 59                	jmp    c0001959 <dlrealloc+0x1d4>
c0001900:	01 ef                	add    edi,ebp
c0001902:	83 ca 01             	or     edx,0x1
c0001905:	09 cd                	or     ebp,ecx
c0001907:	83 ec 0c             	sub    esp,0xc
c000190a:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c000190d:	83 c7 08             	add    edi,0x8
c0001910:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c0001913:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001917:	57                   	push   edi
c0001918:	e8 69 f4 ff ff       	call   c0000d86 <dlfree>
c000191d:	83 c4 10             	add    esp,0x10
c0001920:	eb 37                	jmp    c0001959 <dlrealloc+0x1d4>
c0001922:	8d 45 04             	lea    eax,[ebp+0x4]
c0001925:	39 f0                	cmp    eax,esi
c0001927:	76 30                	jbe    c0001959 <dlrealloc+0x1d4>
c0001929:	83 ec 0c             	sub    esp,0xc
c000192c:	83 ed 07             	sub    ebp,0x7
c000192f:	55                   	push   ebp
c0001930:	e8 13 f9 ff ff       	call   c0001248 <dlmalloc>
c0001935:	83 c4 10             	add    esp,0x10
c0001938:	85 c0                	test   eax,eax
c000193a:	89 c5                	mov    ebp,eax
c000193c:	74 19                	je     c0001957 <dlrealloc+0x1d2>
c000193e:	8d 4e f8             	lea    ecx,[esi-0x8]
c0001941:	89 c7                	mov    edi,eax
c0001943:	89 de                	mov    esi,ebx
c0001945:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001947:	83 ec 0c             	sub    esp,0xc
c000194a:	53                   	push   ebx
c000194b:	89 eb                	mov    ebx,ebp
c000194d:	e8 34 f4 ff ff       	call   c0000d86 <dlfree>
c0001952:	83 c4 10             	add    esp,0x10
c0001955:	eb 02                	jmp    c0001959 <dlrealloc+0x1d4>
c0001957:	31 db                	xor    ebx,ebx
c0001959:	83 c4 1c             	add    esp,0x1c
c000195c:	89 d8                	mov    eax,ebx
c000195e:	5b                   	pop    ebx
c000195f:	5e                   	pop    esi
c0001960:	5f                   	pop    edi
c0001961:	5d                   	pop    ebp
c0001962:	c3                   	ret    

c0001963 <dlmemalign>:
c0001963:	55                   	push   ebp
c0001964:	57                   	push   edi
c0001965:	56                   	push   esi
c0001966:	53                   	push   ebx
c0001967:	83 ec 0c             	sub    esp,0xc
c000196a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000196e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001972:	83 fa 08             	cmp    edx,0x8
c0001975:	77 10                	ja     c0001987 <dlmemalign+0x24>
c0001977:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000197b:	83 c4 0c             	add    esp,0xc
c000197e:	5b                   	pop    ebx
c000197f:	5e                   	pop    esi
c0001980:	5f                   	pop    edi
c0001981:	5d                   	pop    ebp
c0001982:	e9 c1 f8 ff ff       	jmp    c0001248 <dlmalloc>
c0001987:	83 fa 0f             	cmp    edx,0xf
c000198a:	bf 10 00 00 00       	mov    edi,0x10
c000198f:	76 13                	jbe    c00019a4 <dlmemalign+0x41>
c0001991:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001994:	85 d1                	test   ecx,edx
c0001996:	75 04                	jne    c000199c <dlmemalign+0x39>
c0001998:	89 d7                	mov    edi,edx
c000199a:	eb 08                	jmp    c00019a4 <dlmemalign+0x41>
c000199c:	39 d7                	cmp    edi,edx
c000199e:	73 04                	jae    c00019a4 <dlmemalign+0x41>
c00019a0:	01 ff                	add    edi,edi
c00019a2:	eb f8                	jmp    c000199c <dlmemalign+0x39>
c00019a4:	83 f8 df             	cmp    eax,0xffffffdf
c00019a7:	76 07                	jbe    c00019b0 <dlmemalign+0x4d>
c00019a9:	31 c0                	xor    eax,eax
c00019ab:	e9 ce 00 00 00       	jmp    c0001a7e <dlmemalign+0x11b>
c00019b0:	83 c0 0b             	add    eax,0xb
c00019b3:	bd 10 00 00 00       	mov    ebp,0x10
c00019b8:	83 f8 0f             	cmp    eax,0xf
c00019bb:	76 05                	jbe    c00019c2 <dlmemalign+0x5f>
c00019bd:	83 e0 f8             	and    eax,0xfffffff8
c00019c0:	89 c5                	mov    ebp,eax
c00019c2:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c00019c6:	83 ec 0c             	sub    esp,0xc
c00019c9:	50                   	push   eax
c00019ca:	e8 79 f8 ff ff       	call   c0001248 <dlmalloc>
c00019cf:	83 c4 10             	add    esp,0x10
c00019d2:	85 c0                	test   eax,eax
c00019d4:	89 c1                	mov    ecx,eax
c00019d6:	74 d1                	je     c00019a9 <dlmemalign+0x46>
c00019d8:	8d 70 f8             	lea    esi,[eax-0x8]
c00019db:	31 d2                	xor    edx,edx
c00019dd:	f7 f7                	div    edi
c00019df:	85 d2                	test   edx,edx
c00019e1:	74 62                	je     c0001a45 <dlmemalign+0xe2>
c00019e3:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c00019e7:	89 f8                	mov    eax,edi
c00019e9:	f7 d8                	neg    eax
c00019eb:	21 c3                	and    ebx,eax
c00019ed:	83 eb 08             	sub    ebx,0x8
c00019f0:	89 d8                	mov    eax,ebx
c00019f2:	29 f0                	sub    eax,esi
c00019f4:	83 f8 0f             	cmp    eax,0xf
c00019f7:	77 02                	ja     c00019fb <dlmemalign+0x98>
c00019f9:	01 fb                	add    ebx,edi
c00019fb:	89 d8                	mov    eax,ebx
c00019fd:	29 f0                	sub    eax,esi
c00019ff:	89 c6                	mov    esi,eax
c0001a01:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001a04:	89 c2                	mov    edx,eax
c0001a06:	83 e2 fc             	and    edx,0xfffffffc
c0001a09:	29 f2                	sub    edx,esi
c0001a0b:	a8 02                	test   al,0x2
c0001a0d:	74 10                	je     c0001a1f <dlmemalign+0xbc>
c0001a0f:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c0001a12:	83 ca 02             	or     edx,0x2
c0001a15:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001a18:	8d 43 08             	lea    eax,[ebx+0x8]
c0001a1b:	89 33                	mov    DWORD PTR [ebx],esi
c0001a1d:	eb 5f                	jmp    c0001a7e <dlmemalign+0x11b>
c0001a1f:	89 d0                	mov    eax,edx
c0001a21:	83 ec 0c             	sub    esp,0xc
c0001a24:	83 c8 01             	or     eax,0x1
c0001a27:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0001a2a:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001a2f:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001a32:	83 e0 01             	and    eax,0x1
c0001a35:	09 f0                	or     eax,esi
c0001a37:	89 de                	mov    esi,ebx
c0001a39:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c0001a3c:	51                   	push   ecx
c0001a3d:	e8 44 f3 ff ff       	call   c0000d86 <dlfree>
c0001a42:	83 c4 10             	add    esp,0x10
c0001a45:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001a48:	a8 02                	test   al,0x2
c0001a4a:	75 2f                	jne    c0001a7b <dlmemalign+0x118>
c0001a4c:	8d 55 10             	lea    edx,[ebp+0x10]
c0001a4f:	83 e0 fc             	and    eax,0xfffffffc
c0001a52:	39 c2                	cmp    edx,eax
c0001a54:	73 25                	jae    c0001a7b <dlmemalign+0x118>
c0001a56:	29 e8                	sub    eax,ebp
c0001a58:	83 ec 0c             	sub    esp,0xc
c0001a5b:	8d 14 2e             	lea    edx,[esi+ebp*1]
c0001a5e:	83 c8 01             	or     eax,0x1
c0001a61:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0001a64:	83 c2 08             	add    edx,0x8
c0001a67:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001a6a:	83 e0 01             	and    eax,0x1
c0001a6d:	09 c5                	or     ebp,eax
c0001a6f:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001a72:	52                   	push   edx
c0001a73:	e8 0e f3 ff ff       	call   c0000d86 <dlfree>
c0001a78:	83 c4 10             	add    esp,0x10
c0001a7b:	8d 46 08             	lea    eax,[esi+0x8]
c0001a7e:	83 c4 0c             	add    esp,0xc
c0001a81:	5b                   	pop    ebx
c0001a82:	5e                   	pop    esi
c0001a83:	5f                   	pop    edi
c0001a84:	5d                   	pop    ebp
c0001a85:	c3                   	ret    

c0001a86 <dlcalloc>:
c0001a86:	53                   	push   ebx
c0001a87:	83 ec 14             	sub    esp,0x14
c0001a8a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001a8e:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001a93:	50                   	push   eax
c0001a94:	e8 af f7 ff ff       	call   c0001248 <dlmalloc>
c0001a99:	83 c4 10             	add    esp,0x10
c0001a9c:	85 c0                	test   eax,eax
c0001a9e:	89 c3                	mov    ebx,eax
c0001aa0:	74 6e                	je     c0001b10 <dlcalloc+0x8a>
c0001aa2:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001aa5:	a8 02                	test   al,0x2
c0001aa7:	75 67                	jne    c0001b10 <dlcalloc+0x8a>
c0001aa9:	83 e0 fc             	and    eax,0xfffffffc
c0001aac:	83 e8 04             	sub    eax,0x4
c0001aaf:	83 f8 27             	cmp    eax,0x27
c0001ab2:	76 0f                	jbe    c0001ac3 <dlcalloc+0x3d>
c0001ab4:	52                   	push   edx
c0001ab5:	50                   	push   eax
c0001ab6:	6a 00                	push   0x0
c0001ab8:	53                   	push   ebx
c0001ab9:	e8 32 ea ff ff       	call   c00004f0 <memset>
c0001abe:	83 c4 10             	add    esp,0x10
c0001ac1:	eb 4d                	jmp    c0001b10 <dlcalloc+0x8a>
c0001ac3:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001ac9:	83 f8 13             	cmp    eax,0x13
c0001acc:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001ad3:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001ada:	76 34                	jbe    c0001b10 <dlcalloc+0x8a>
c0001adc:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001ae3:	83 f8 1b             	cmp    eax,0x1b
c0001ae6:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001aed:	76 21                	jbe    c0001b10 <dlcalloc+0x8a>
c0001aef:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001af6:	83 f8 23             	cmp    eax,0x23
c0001af9:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001b00:	76 0e                	jbe    c0001b10 <dlcalloc+0x8a>
c0001b02:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001b09:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001b10:	83 c4 08             	add    esp,0x8
c0001b13:	89 d8                	mov    eax,ebx
c0001b15:	5b                   	pop    ebx
c0001b16:	c3                   	ret    

c0001b17 <dlcfree>:
c0001b17:	e9 6a f2 ff ff       	jmp    c0000d86 <dlfree>

c0001b1c <dlindependent_calloc>:
c0001b1c:	83 ec 28             	sub    esp,0x28
c0001b1f:	b9 03 00 00 00       	mov    ecx,0x3
c0001b24:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001b28:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0001b2c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0001b30:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001b34:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001b38:	e8 99 fa ff ff       	call   c00015d6 <iALLOc>
c0001b3d:	83 c4 2c             	add    esp,0x2c
c0001b40:	c3                   	ret    

c0001b41 <dlindependent_comalloc>:
c0001b41:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001b45:	31 c9                	xor    ecx,ecx
c0001b47:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b4b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001b4f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001b53:	e9 7e fa ff ff       	jmp    c00015d6 <iALLOc>

c0001b58 <dlvalloc>:
c0001b58:	83 ec 0c             	sub    esp,0xc
c0001b5b:	83 3d 00 61 02 c0 00 	cmp    DWORD PTR ds:0xc0026100,0x0
c0001b62:	75 0a                	jne    c0001b6e <dlvalloc+0x16>
c0001b64:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001b69:	e8 31 f1 ff ff       	call   c0000c9f <malloc_consolidate>
c0001b6e:	50                   	push   eax
c0001b6f:	50                   	push   eax
c0001b70:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001b74:	ff 35 5c 64 02 c0    	push   DWORD PTR ds:0xc002645c
c0001b7a:	e8 e4 fd ff ff       	call   c0001963 <dlmemalign>
c0001b7f:	83 c4 1c             	add    esp,0x1c
c0001b82:	c3                   	ret    

c0001b83 <dlpvalloc>:
c0001b83:	83 ec 0c             	sub    esp,0xc
c0001b86:	83 3d 00 61 02 c0 00 	cmp    DWORD PTR ds:0xc0026100,0x0
c0001b8d:	75 0a                	jne    c0001b99 <dlpvalloc+0x16>
c0001b8f:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001b94:	e8 06 f1 ff ff       	call   c0000c9f <malloc_consolidate>
c0001b99:	52                   	push   edx
c0001b9a:	a1 5c 64 02 c0       	mov    eax,ds:0xc002645c
c0001b9f:	52                   	push   edx
c0001ba0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001ba4:	89 c1                	mov    ecx,eax
c0001ba6:	f7 d9                	neg    ecx
c0001ba8:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001bac:	21 ca                	and    edx,ecx
c0001bae:	52                   	push   edx
c0001baf:	50                   	push   eax
c0001bb0:	e8 ae fd ff ff       	call   c0001963 <dlmemalign>
c0001bb5:	83 c4 1c             	add    esp,0x1c
c0001bb8:	c3                   	ret    

c0001bb9 <dlmalloc_trim>:
c0001bb9:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001bbe:	e8 dc f0 ff ff       	call   c0000c9f <malloc_consolidate>
c0001bc3:	31 c0                	xor    eax,eax
c0001bc5:	c3                   	ret    

c0001bc6 <dlmalloc_usable_size>:
c0001bc6:	53                   	push   ebx
c0001bc7:	31 c0                	xor    eax,eax
c0001bc9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001bcd:	85 c9                	test   ecx,ecx
c0001bcf:	74 24                	je     c0001bf5 <dlmalloc_usable_size+0x2f>
c0001bd1:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001bd4:	f6 c2 02             	test   dl,0x2
c0001bd7:	74 08                	je     c0001be1 <dlmalloc_usable_size+0x1b>
c0001bd9:	83 e2 fc             	and    edx,0xfffffffc
c0001bdc:	8d 42 f8             	lea    eax,[edx-0x8]
c0001bdf:	eb 14                	jmp    c0001bf5 <dlmalloc_usable_size+0x2f>
c0001be1:	89 d3                	mov    ebx,edx
c0001be3:	31 c0                	xor    eax,eax
c0001be5:	83 e3 fe             	and    ebx,0xfffffffe
c0001be8:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001bed:	74 06                	je     c0001bf5 <dlmalloc_usable_size+0x2f>
c0001bef:	83 e2 fc             	and    edx,0xfffffffc
c0001bf2:	8d 42 fc             	lea    eax,[edx-0x4]
c0001bf5:	5b                   	pop    ebx
c0001bf6:	c3                   	ret    

c0001bf7 <dlmallinfo>:
c0001bf7:	55                   	push   ebp
c0001bf8:	57                   	push   edi
c0001bf9:	56                   	push   esi
c0001bfa:	53                   	push   ebx
c0001bfb:	83 ec 08             	sub    esp,0x8
c0001bfe:	83 3d 2c 61 02 c0 00 	cmp    DWORD PTR ds:0xc002612c,0x0
c0001c05:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001c09:	75 0a                	jne    c0001c15 <dlmallinfo+0x1e>
c0001c0b:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001c10:	e8 8a f0 ff ff       	call   c0000c9f <malloc_consolidate>
c0001c15:	a1 2c 61 02 c0       	mov    eax,ds:0xc002612c
c0001c1a:	31 ed                	xor    ebp,ebp
c0001c1c:	31 c9                	xor    ecx,ecx
c0001c1e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001c21:	83 e0 fc             	and    eax,0xfffffffc
c0001c24:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c28:	31 c0                	xor    eax,eax
c0001c2a:	8b 14 85 04 61 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9efc]
c0001c31:	85 d2                	test   edx,edx
c0001c33:	74 0e                	je     c0001c43 <dlmallinfo+0x4c>
c0001c35:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001c38:	45                   	inc    ebp
c0001c39:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001c3c:	83 e6 fc             	and    esi,0xfffffffc
c0001c3f:	01 f1                	add    ecx,esi
c0001c41:	eb ee                	jmp    c0001c31 <dlmallinfo+0x3a>
c0001c43:	40                   	inc    eax
c0001c44:	83 f8 0a             	cmp    eax,0xa
c0001c47:	75 e1                	jne    c0001c2a <dlmallinfo+0x33>
c0001c49:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001c50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001c54:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001c57:	b8 34 61 02 c0       	mov    eax,0xc0026134
c0001c5c:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001c5f:	39 f0                	cmp    eax,esi
c0001c61:	74 10                	je     c0001c73 <dlmallinfo+0x7c>
c0001c63:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001c66:	ff 04 24             	inc    DWORD PTR [esp]
c0001c69:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001c6c:	83 e7 fc             	and    edi,0xfffffffc
c0001c6f:	01 fa                	add    edx,edi
c0001c71:	eb ec                	jmp    c0001c5f <dlmallinfo+0x68>
c0001c73:	83 c0 08             	add    eax,0x8
c0001c76:	3d 2c 64 02 c0       	cmp    eax,0xc002642c
c0001c7b:	75 df                	jne    c0001c5c <dlmallinfo+0x65>
c0001c7d:	8b 35 50 64 02 c0    	mov    esi,DWORD PTR ds:0xc0026450
c0001c83:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001c86:	a1 68 64 02 c0       	mov    eax,ds:0xc0026468
c0001c8b:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001c8e:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001c91:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001c94:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001c97:	8b 35 64 64 02 c0    	mov    esi,DWORD PTR ds:0xc0026464
c0001c9d:	89 03                	mov    DWORD PTR [ebx],eax
c0001c9f:	29 d0                	sub    eax,edx
c0001ca1:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001ca4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001ca8:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001cab:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001cae:	8b 35 74 64 02 c0    	mov    esi,DWORD PTR ds:0xc0026474
c0001cb4:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001cb7:	89 d8                	mov    eax,ebx
c0001cb9:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001cbc:	83 c4 08             	add    esp,0x8
c0001cbf:	5b                   	pop    ebx
c0001cc0:	5e                   	pop    esi
c0001cc1:	5f                   	pop    edi
c0001cc2:	5d                   	pop    ebp
c0001cc3:	c2 04 00             	ret    0x4

c0001cc6 <dlmalloc_stats>:
c0001cc6:	83 ec 30             	sub    esp,0x30
c0001cc9:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001ccd:	50                   	push   eax
c0001cce:	e8 24 ff ff ff       	call   c0001bf7 <dlmallinfo>
c0001cd3:	83 c4 30             	add    esp,0x30
c0001cd6:	c3                   	ret    

c0001cd7 <dlmallopt>:
c0001cd7:	56                   	push   esi
c0001cd8:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001cdd:	53                   	push   ebx
c0001cde:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001ce2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001ce6:	e8 b4 ef ff ff       	call   c0000c9f <malloc_consolidate>
c0001ceb:	8d 46 04             	lea    eax,[esi+0x4]
c0001cee:	83 f8 05             	cmp    eax,0x5
c0001cf1:	77 5d                	ja     c0001d50 <dlmallopt+0x79>
c0001cf3:	ff 24 85 44 08 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdf7bc]
c0001cfa:	83 fb 50             	cmp    ebx,0x50
c0001cfd:	77 51                	ja     c0001d50 <dlmallopt+0x79>
c0001cff:	85 db                	test   ebx,ebx
c0001d01:	ba 08 00 00 00       	mov    edx,0x8
c0001d06:	74 12                	je     c0001d1a <dlmallopt+0x43>
c0001d08:	83 c3 0b             	add    ebx,0xb
c0001d0b:	ba 10 00 00 00       	mov    edx,0x10
c0001d10:	83 fb 0f             	cmp    ebx,0xf
c0001d13:	76 05                	jbe    c0001d1a <dlmallopt+0x43>
c0001d15:	89 da                	mov    edx,ebx
c0001d17:	83 e2 f8             	and    edx,0xfffffff8
c0001d1a:	a1 00 61 02 c0       	mov    eax,ds:0xc0026100
c0001d1f:	83 e0 03             	and    eax,0x3
c0001d22:	09 d0                	or     eax,edx
c0001d24:	a3 00 61 02 c0       	mov    ds:0xc0026100,eax
c0001d29:	eb 27                	jmp    c0001d52 <dlmallopt+0x7b>
c0001d2b:	89 1d 44 64 02 c0    	mov    DWORD PTR ds:0xc0026444,ebx
c0001d31:	eb 16                	jmp    c0001d49 <dlmallopt+0x72>
c0001d33:	89 1d 48 64 02 c0    	mov    DWORD PTR ds:0xc0026448,ebx
c0001d39:	eb 0e                	jmp    c0001d49 <dlmallopt+0x72>
c0001d3b:	89 1d 4c 64 02 c0    	mov    DWORD PTR ds:0xc002644c,ebx
c0001d41:	eb 06                	jmp    c0001d49 <dlmallopt+0x72>
c0001d43:	89 1d 54 64 02 c0    	mov    DWORD PTR ds:0xc0026454,ebx
c0001d49:	be 01 00 00 00       	mov    esi,0x1
c0001d4e:	eb 02                	jmp    c0001d52 <dlmallopt+0x7b>
c0001d50:	31 f6                	xor    esi,esi
c0001d52:	5b                   	pop    ebx
c0001d53:	89 f0                	mov    eax,esi
c0001d55:	5e                   	pop    esi
c0001d56:	c3                   	ret    
c0001d57:	90                   	nop

c0001d58 <isblank>:
c0001d58:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001d5d:	74 09                	je     c0001d68 <isblank+0x10>
c0001d5f:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001d64:	75 0a                	jne    c0001d70 <isblank+0x18>
c0001d66:	66 90                	xchg   ax,ax
c0001d68:	b8 01 00 00 00       	mov    eax,0x1
c0001d6d:	c3                   	ret    
c0001d6e:	66 90                	xchg   ax,ax
c0001d70:	b8 00 00 00 00       	mov    eax,0x0
c0001d75:	c3                   	ret    
c0001d76:	66 90                	xchg   ax,ax

c0001d78 <iscntrl>:
c0001d78:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001d7d:	7e 09                	jle    c0001d88 <iscntrl+0x10>
c0001d7f:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001d84:	75 0a                	jne    c0001d90 <iscntrl+0x18>
c0001d86:	66 90                	xchg   ax,ax
c0001d88:	b8 01 00 00 00       	mov    eax,0x1
c0001d8d:	c3                   	ret    
c0001d8e:	66 90                	xchg   ax,ax
c0001d90:	b8 00 00 00 00       	mov    eax,0x0
c0001d95:	c3                   	ret    
c0001d96:	66 90                	xchg   ax,ax

c0001d98 <isdigit>:
c0001d98:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001d9d:	7e 0d                	jle    c0001dac <isdigit+0x14>
c0001d9f:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001da4:	7f 06                	jg     c0001dac <isdigit+0x14>
c0001da6:	b8 01 00 00 00       	mov    eax,0x1
c0001dab:	c3                   	ret    
c0001dac:	b8 00 00 00 00       	mov    eax,0x0
c0001db1:	c3                   	ret    
c0001db2:	66 90                	xchg   ax,ax

c0001db4 <islower>:
c0001db4:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001db9:	7e 0d                	jle    c0001dc8 <islower+0x14>
c0001dbb:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001dc0:	7f 06                	jg     c0001dc8 <islower+0x14>
c0001dc2:	b8 01 00 00 00       	mov    eax,0x1
c0001dc7:	c3                   	ret    
c0001dc8:	b8 00 00 00 00       	mov    eax,0x0
c0001dcd:	c3                   	ret    
c0001dce:	66 90                	xchg   ax,ax

c0001dd0 <isspace>:
c0001dd0:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001dd5:	7c 19                	jl     c0001df0 <isspace+0x20>
c0001dd7:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001ddc:	7e 0a                	jle    c0001de8 <isspace+0x18>
c0001dde:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001de3:	75 0b                	jne    c0001df0 <isspace+0x20>
c0001de5:	8d 76 00             	lea    esi,[esi+0x0]
c0001de8:	b8 01 00 00 00       	mov    eax,0x1
c0001ded:	c3                   	ret    
c0001dee:	66 90                	xchg   ax,ax
c0001df0:	b8 00 00 00 00       	mov    eax,0x0
c0001df5:	c3                   	ret    
c0001df6:	66 90                	xchg   ax,ax

c0001df8 <isupper>:
c0001df8:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001dfd:	7e 0d                	jle    c0001e0c <isupper+0x14>
c0001dff:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001e04:	7f 06                	jg     c0001e0c <isupper+0x14>
c0001e06:	b8 01 00 00 00       	mov    eax,0x1
c0001e0b:	c3                   	ret    
c0001e0c:	b8 00 00 00 00       	mov    eax,0x0
c0001e11:	c3                   	ret    
c0001e12:	66 90                	xchg   ax,ax

c0001e14 <isalpha>:
c0001e14:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e18:	e8 db ff ff ff       	call   c0001df8 <isupper>
c0001e1d:	83 c4 04             	add    esp,0x4
c0001e20:	85 c0                	test   eax,eax
c0001e22:	75 10                	jne    c0001e34 <isalpha+0x20>
c0001e24:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e28:	e8 87 ff ff ff       	call   c0001db4 <islower>
c0001e2d:	83 c4 04             	add    esp,0x4
c0001e30:	85 c0                	test   eax,eax
c0001e32:	74 08                	je     c0001e3c <isalpha+0x28>
c0001e34:	b8 01 00 00 00       	mov    eax,0x1
c0001e39:	c3                   	ret    
c0001e3a:	66 90                	xchg   ax,ax
c0001e3c:	b8 00 00 00 00       	mov    eax,0x0
c0001e41:	c3                   	ret    
c0001e42:	66 90                	xchg   ax,ax

c0001e44 <isalnum>:
c0001e44:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e48:	e8 c7 ff ff ff       	call   c0001e14 <isalpha>
c0001e4d:	83 c4 04             	add    esp,0x4
c0001e50:	85 c0                	test   eax,eax
c0001e52:	75 10                	jne    c0001e64 <isalnum+0x20>
c0001e54:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e58:	e8 3b ff ff ff       	call   c0001d98 <isdigit>
c0001e5d:	83 c4 04             	add    esp,0x4
c0001e60:	85 c0                	test   eax,eax
c0001e62:	74 08                	je     c0001e6c <isalnum+0x28>
c0001e64:	b8 01 00 00 00       	mov    eax,0x1
c0001e69:	c3                   	ret    
c0001e6a:	66 90                	xchg   ax,ax
c0001e6c:	b8 00 00 00 00       	mov    eax,0x0
c0001e71:	c3                   	ret    
c0001e72:	66 90                	xchg   ax,ax

c0001e74 <ispunct>:
c0001e74:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e78:	e8 c7 ff ff ff       	call   c0001e44 <isalnum>
c0001e7d:	83 c4 04             	add    esp,0x4
c0001e80:	85 c0                	test   eax,eax
c0001e82:	75 28                	jne    c0001eac <ispunct+0x38>
c0001e84:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e88:	e8 43 ff ff ff       	call   c0001dd0 <isspace>
c0001e8d:	83 c4 04             	add    esp,0x4
c0001e90:	85 c0                	test   eax,eax
c0001e92:	75 18                	jne    c0001eac <ispunct+0x38>
c0001e94:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e98:	e8 db fe ff ff       	call   c0001d78 <iscntrl>
c0001e9d:	83 c4 04             	add    esp,0x4
c0001ea0:	85 c0                	test   eax,eax
c0001ea2:	75 08                	jne    c0001eac <ispunct+0x38>
c0001ea4:	b8 01 00 00 00       	mov    eax,0x1
c0001ea9:	c3                   	ret    
c0001eaa:	66 90                	xchg   ax,ax
c0001eac:	b8 00 00 00 00       	mov    eax,0x0
c0001eb1:	c3                   	ret    
c0001eb2:	66 90                	xchg   ax,ax

c0001eb4 <isgraph>:
c0001eb4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001eb8:	e8 87 ff ff ff       	call   c0001e44 <isalnum>
c0001ebd:	83 c4 04             	add    esp,0x4
c0001ec0:	85 c0                	test   eax,eax
c0001ec2:	75 10                	jne    c0001ed4 <isgraph+0x20>
c0001ec4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001ec8:	e8 a7 ff ff ff       	call   c0001e74 <ispunct>
c0001ecd:	83 c4 04             	add    esp,0x4
c0001ed0:	85 c0                	test   eax,eax
c0001ed2:	74 08                	je     c0001edc <isgraph+0x28>
c0001ed4:	b8 01 00 00 00       	mov    eax,0x1
c0001ed9:	c3                   	ret    
c0001eda:	66 90                	xchg   ax,ax
c0001edc:	b8 00 00 00 00       	mov    eax,0x0
c0001ee1:	c3                   	ret    
c0001ee2:	66 90                	xchg   ax,ax

c0001ee4 <isprint>:
c0001ee4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001ee8:	e8 c7 ff ff ff       	call   c0001eb4 <isgraph>
c0001eed:	83 c4 04             	add    esp,0x4
c0001ef0:	85 c0                	test   eax,eax
c0001ef2:	75 08                	jne    c0001efc <isprint+0x18>
c0001ef4:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001ef9:	75 09                	jne    c0001f04 <isprint+0x20>
c0001efb:	90                   	nop
c0001efc:	b8 01 00 00 00       	mov    eax,0x1
c0001f01:	c3                   	ret    
c0001f02:	66 90                	xchg   ax,ax
c0001f04:	b8 00 00 00 00       	mov    eax,0x0
c0001f09:	c3                   	ret    
c0001f0a:	66 90                	xchg   ax,ax

c0001f0c <isxdigit>:
c0001f0c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001f10:	e8 83 fe ff ff       	call   c0001d98 <isdigit>
c0001f15:	83 c4 04             	add    esp,0x4
c0001f18:	85 c0                	test   eax,eax
c0001f1a:	75 20                	jne    c0001f3c <isxdigit+0x30>
c0001f1c:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001f21:	7e 09                	jle    c0001f2c <isxdigit+0x20>
c0001f23:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001f28:	7e 12                	jle    c0001f3c <isxdigit+0x30>
c0001f2a:	66 90                	xchg   ax,ax
c0001f2c:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001f31:	7e 11                	jle    c0001f44 <isxdigit+0x38>
c0001f33:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001f38:	7f 0a                	jg     c0001f44 <isxdigit+0x38>
c0001f3a:	66 90                	xchg   ax,ax
c0001f3c:	b8 01 00 00 00       	mov    eax,0x1
c0001f41:	c3                   	ret    
c0001f42:	66 90                	xchg   ax,ax
c0001f44:	b8 00 00 00 00       	mov    eax,0x0
c0001f49:	c3                   	ret    
c0001f4a:	66 90                	xchg   ax,ax

c0001f4c <LWIP_PLATFORM_HTONS>:
c0001f4c:	83 ec 04             	sub    esp,0x4
c0001f4f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001f53:	66 89 04 24          	mov    WORD PTR [esp],ax
c0001f57:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0001f5b:	c1 e8 08             	shr    eax,0x8
c0001f5e:	89 c2                	mov    edx,eax
c0001f60:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0001f64:	c1 e0 08             	shl    eax,0x8
c0001f67:	09 d0                	or     eax,edx
c0001f69:	83 c4 04             	add    esp,0x4
c0001f6c:	c3                   	ret    
c0001f6d:	8d 76 00             	lea    esi,[esi+0x0]

c0001f70 <LWIP_PLATFORM_HTONL>:
c0001f70:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f74:	c1 e8 18             	shr    eax,0x18
c0001f77:	89 c2                	mov    edx,eax
c0001f79:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f7d:	c1 e8 08             	shr    eax,0x8
c0001f80:	25 00 ff 00 00       	and    eax,0xff00
c0001f85:	09 c2                	or     edx,eax
c0001f87:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f8b:	c1 e0 08             	shl    eax,0x8
c0001f8e:	25 00 00 ff 00       	and    eax,0xff0000
c0001f93:	09 c2                	or     edx,eax
c0001f95:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f99:	c1 e0 18             	shl    eax,0x18
c0001f9c:	09 d0                	or     eax,edx
c0001f9e:	c3                   	ret    

c0001f9f <disk_status>:
c0001f9f:	31 c0                	xor    eax,eax
c0001fa1:	c3                   	ret    

c0001fa2 <disk_initialize>:
c0001fa2:	31 c0                	xor    eax,eax
c0001fa4:	c3                   	ret    

c0001fa5 <disk_read>:
c0001fa5:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001faa:	0f b6 04 85 40 c8 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd37c0]
c0001fb2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001fb6:	e9 cd 81 01 00       	jmp    c001a188 <fatWrapperReadDisk>

c0001fbb <disk_write>:
c0001fbb:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001fc0:	0f b6 04 85 40 c8 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd37c0]
c0001fc8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001fcc:	e9 f7 81 01 00       	jmp    c001a1c8 <fatWrapperWriteDisk>

c0001fd1 <disk_ioctl>:
c0001fd1:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001fd6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001fda:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001fdf:	0f b6 04 85 40 c8 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd37c0]
c0001fe7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001feb:	e9 18 82 01 00       	jmp    c001a208 <fatWrapperIoctl>

c0001ff0 <ld_word>:
c0001ff0:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001ff4:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001ff7:	c1 e2 08             	shl    edx,0x8
c0001ffa:	09 d0                	or     eax,edx
c0001ffc:	c3                   	ret    

c0001ffd <ld_dword>:
c0001ffd:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0002001:	89 d1                	mov    ecx,edx
c0002003:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0002007:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000200a:	c1 e1 08             	shl    ecx,0x8
c000200d:	09 ca                	or     edx,ecx
c000200f:	c1 e2 08             	shl    edx,0x8
c0002012:	09 d0                	or     eax,edx
c0002014:	c3                   	ret    

c0002015 <st_word>:
c0002015:	66 89 10             	mov    WORD PTR [eax],dx
c0002018:	c3                   	ret    

c0002019 <st_dword>:
c0002019:	89 10                	mov    DWORD PTR [eax],edx
c000201b:	c3                   	ret    

c000201c <mem_cpy>:
c000201c:	85 c9                	test   ecx,ecx
c000201e:	74 10                	je     c0002030 <mem_cpy+0x14>
c0002020:	57                   	push   edi
c0002021:	01 c1                	add    ecx,eax
c0002023:	56                   	push   esi
c0002024:	89 c7                	mov    edi,eax
c0002026:	89 d6                	mov    esi,edx
c0002028:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0002029:	39 f9                	cmp    ecx,edi
c000202b:	75 fb                	jne    c0002028 <mem_cpy+0xc>
c000202d:	5e                   	pop    esi
c000202e:	5f                   	pop    edi
c000202f:	c3                   	ret    
c0002030:	c3                   	ret    

c0002031 <mem_set>:
c0002031:	01 c1                	add    ecx,eax
c0002033:	88 10                	mov    BYTE PTR [eax],dl
c0002035:	40                   	inc    eax
c0002036:	39 c8                	cmp    eax,ecx
c0002038:	75 f9                	jne    c0002033 <mem_set+0x2>
c000203a:	c3                   	ret    

c000203b <mem_cmp>:
c000203b:	57                   	push   edi
c000203c:	56                   	push   esi
c000203d:	89 c6                	mov    esi,eax
c000203f:	53                   	push   ebx
c0002040:	46                   	inc    esi
c0002041:	42                   	inc    edx
c0002042:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0002046:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c000204a:	29 fb                	sub    ebx,edi
c000204c:	89 cf                	mov    edi,ecx
c000204e:	29 f7                	sub    edi,esi
c0002050:	01 c7                	add    edi,eax
c0002052:	74 04                	je     c0002058 <mem_cmp+0x1d>
c0002054:	85 db                	test   ebx,ebx
c0002056:	74 e8                	je     c0002040 <mem_cmp+0x5>
c0002058:	89 d8                	mov    eax,ebx
c000205a:	5b                   	pop    ebx
c000205b:	5e                   	pop    esi
c000205c:	5f                   	pop    edi
c000205d:	c3                   	ret    

c000205e <chk_chr>:
c000205e:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0002061:	85 c9                	test   ecx,ecx
c0002063:	74 07                	je     c000206c <chk_chr+0xe>
c0002065:	39 d1                	cmp    ecx,edx
c0002067:	74 03                	je     c000206c <chk_chr+0xe>
c0002069:	40                   	inc    eax
c000206a:	eb f2                	jmp    c000205e <chk_chr>
c000206c:	89 c8                	mov    eax,ecx
c000206e:	c3                   	ret    

c000206f <dbc_1st>:
c000206f:	31 c0                	xor    eax,eax
c0002071:	c3                   	ret    

c0002072 <dbc_2nd>:
c0002072:	31 c0                	xor    eax,eax
c0002074:	c3                   	ret    

c0002075 <tchar2uni>:
c0002075:	57                   	push   edi
c0002076:	56                   	push   esi
c0002077:	53                   	push   ebx
c0002078:	8b 18                	mov    ebx,DWORD PTR [eax]
c000207a:	8a 0b                	mov    cl,BYTE PTR [ebx]
c000207c:	8d 73 01             	lea    esi,[ebx+0x1]
c000207f:	f6 c1 80             	test   cl,0x80
c0002082:	75 0a                	jne    c000208e <tchar2uni+0x19>
c0002084:	0f b6 d1             	movzx  edx,cl
c0002087:	89 f3                	mov    ebx,esi
c0002089:	e9 b2 00 00 00       	jmp    c0002140 <tchar2uni+0xcb>
c000208e:	89 ca                	mov    edx,ecx
c0002090:	81 e2 e0 00 00 00    	and    edx,0xe0
c0002096:	81 fa c0 00 00 00    	cmp    edx,0xc0
c000209c:	89 ca                	mov    edx,ecx
c000209e:	75 0a                	jne    c00020aa <tchar2uni+0x35>
c00020a0:	83 e2 1f             	and    edx,0x1f
c00020a3:	b9 01 00 00 00       	mov    ecx,0x1
c00020a8:	eb 37                	jmp    c00020e1 <tchar2uni+0x6c>
c00020aa:	81 e2 f0 00 00 00    	and    edx,0xf0
c00020b0:	81 fa e0 00 00 00    	cmp    edx,0xe0
c00020b6:	75 0c                	jne    c00020c4 <tchar2uni+0x4f>
c00020b8:	89 ca                	mov    edx,ecx
c00020ba:	b9 02 00 00 00       	mov    ecx,0x2
c00020bf:	83 e2 0f             	and    edx,0xf
c00020c2:	eb 1d                	jmp    c00020e1 <tchar2uni+0x6c>
c00020c4:	89 cf                	mov    edi,ecx
c00020c6:	83 ca ff             	or     edx,0xffffffff
c00020c9:	81 e7 f8 00 00 00    	and    edi,0xf8
c00020cf:	81 ff f0 00 00 00    	cmp    edi,0xf0
c00020d5:	75 70                	jne    c0002147 <tchar2uni+0xd2>
c00020d7:	89 ca                	mov    edx,ecx
c00020d9:	b9 03 00 00 00       	mov    ecx,0x3
c00020de:	83 e2 07             	and    edx,0x7
c00020e1:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c00020e5:	46                   	inc    esi
c00020e6:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c00020e9:	89 cf                	mov    edi,ecx
c00020eb:	81 e7 c0 00 00 00    	and    edi,0xc0
c00020f1:	83 c7 80             	add    edi,0xffffff80
c00020f4:	75 4e                	jne    c0002144 <tchar2uni+0xcf>
c00020f6:	c1 e2 06             	shl    edx,0x6
c00020f9:	83 e1 3f             	and    ecx,0x3f
c00020fc:	09 ca                	or     edx,ecx
c00020fe:	39 de                	cmp    esi,ebx
c0002100:	75 e3                	jne    c00020e5 <tchar2uni+0x70>
c0002102:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0002108:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c000210e:	76 34                	jbe    c0002144 <tchar2uni+0xcf>
c0002110:	8d 4a 80             	lea    ecx,[edx-0x80]
c0002113:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0002119:	77 29                	ja     c0002144 <tchar2uni+0xcf>
c000211b:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0002121:	76 1d                	jbe    c0002140 <tchar2uni+0xcb>
c0002123:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0002129:	81 e2 ff 03 00 00    	and    edx,0x3ff
c000212f:	c1 e1 06             	shl    ecx,0x6
c0002132:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0002138:	09 ca                	or     edx,ecx
c000213a:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0002140:	89 18                	mov    DWORD PTR [eax],ebx
c0002142:	eb 03                	jmp    c0002147 <tchar2uni+0xd2>
c0002144:	83 ca ff             	or     edx,0xffffffff
c0002147:	5b                   	pop    ebx
c0002148:	89 d0                	mov    eax,edx
c000214a:	5e                   	pop    esi
c000214b:	5f                   	pop    edi
c000214c:	c3                   	ret    

c000214d <put_utf>:
c000214d:	53                   	push   ebx
c000214e:	83 f8 7f             	cmp    eax,0x7f
c0002151:	89 c3                	mov    ebx,eax
c0002153:	b0 00                	mov    al,0x0
c0002155:	77 11                	ja     c0002168 <put_utf+0x1b>
c0002157:	85 c9                	test   ecx,ecx
c0002159:	0f 84 e5 00 00 00    	je     c0002244 <put_utf+0xf7>
c000215f:	88 1a                	mov    BYTE PTR [edx],bl
c0002161:	b0 01                	mov    al,0x1
c0002163:	e9 dc 00 00 00       	jmp    c0002244 <put_utf+0xf7>
c0002168:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c000216e:	77 23                	ja     c0002193 <put_utf+0x46>
c0002170:	83 f9 01             	cmp    ecx,0x1
c0002173:	0f 86 cb 00 00 00    	jbe    c0002244 <put_utf+0xf7>
c0002179:	89 d8                	mov    eax,ebx
c000217b:	83 e3 3f             	and    ebx,0x3f
c000217e:	c1 e8 06             	shr    eax,0x6
c0002181:	83 cb 80             	or     ebx,0xffffff80
c0002184:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0002187:	83 c8 c0             	or     eax,0xffffffc0
c000218a:	88 02                	mov    BYTE PTR [edx],al
c000218c:	b0 02                	mov    al,0x2
c000218e:	e9 b1 00 00 00       	jmp    c0002244 <put_utf+0xf7>
c0002193:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0002199:	77 40                	ja     c00021db <put_utf+0x8e>
c000219b:	83 f9 02             	cmp    ecx,0x2
c000219e:	0f 86 a0 00 00 00    	jbe    c0002244 <put_utf+0xf7>
c00021a4:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c00021aa:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c00021b0:	0f 86 8e 00 00 00    	jbe    c0002244 <put_utf+0xf7>
c00021b6:	89 d8                	mov    eax,ebx
c00021b8:	c1 e8 0c             	shr    eax,0xc
c00021bb:	83 c8 e0             	or     eax,0xffffffe0
c00021be:	88 02                	mov    BYTE PTR [edx],al
c00021c0:	89 d8                	mov    eax,ebx
c00021c2:	83 e3 3f             	and    ebx,0x3f
c00021c5:	c1 e8 06             	shr    eax,0x6
c00021c8:	83 cb 80             	or     ebx,0xffffff80
c00021cb:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c00021ce:	83 e0 3f             	and    eax,0x3f
c00021d1:	83 c8 80             	or     eax,0xffffff80
c00021d4:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c00021d7:	b0 03                	mov    al,0x3
c00021d9:	eb 69                	jmp    c0002244 <put_utf+0xf7>
c00021db:	83 f9 03             	cmp    ecx,0x3
c00021de:	76 64                	jbe    c0002244 <put_utf+0xf7>
c00021e0:	89 d9                	mov    ecx,ebx
c00021e2:	0f b7 c3             	movzx  eax,bx
c00021e5:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c00021eb:	66 31 c9             	xor    cx,cx
c00021ee:	81 c1 00 00 00 28    	add    ecx,0x28000000
c00021f4:	c1 e9 06             	shr    ecx,0x6
c00021f7:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c00021fd:	77 43                	ja     c0002242 <put_utf+0xf5>
c00021ff:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0002205:	77 3b                	ja     c0002242 <put_utf+0xf5>
c0002207:	09 cb                	or     ebx,ecx
c0002209:	81 c3 00 00 01 00    	add    ebx,0x10000
c000220f:	89 d8                	mov    eax,ebx
c0002211:	c1 e8 12             	shr    eax,0x12
c0002214:	83 c8 f0             	or     eax,0xfffffff0
c0002217:	88 02                	mov    BYTE PTR [edx],al
c0002219:	89 d8                	mov    eax,ebx
c000221b:	c1 e8 0c             	shr    eax,0xc
c000221e:	83 e0 3f             	and    eax,0x3f
c0002221:	83 c8 80             	or     eax,0xffffff80
c0002224:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0002227:	89 d8                	mov    eax,ebx
c0002229:	83 e3 3f             	and    ebx,0x3f
c000222c:	c1 e8 06             	shr    eax,0x6
c000222f:	83 cb 80             	or     ebx,0xffffff80
c0002232:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0002235:	83 e0 3f             	and    eax,0x3f
c0002238:	83 c8 80             	or     eax,0xffffff80
c000223b:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c000223e:	b0 04                	mov    al,0x4
c0002240:	eb 02                	jmp    c0002244 <put_utf+0xf7>
c0002242:	31 c0                	xor    eax,eax
c0002244:	5b                   	pop    ebx
c0002245:	c3                   	ret    

c0002246 <clst2sect>:
c0002246:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002249:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000224c:	83 ea 02             	sub    edx,0x2
c000224f:	39 ca                	cmp    edx,ecx
c0002251:	76 0d                	jbe    c0002260 <clst2sect+0x1a>
c0002253:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0002257:	0f af d1             	imul   edx,ecx
c000225a:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c000225d:	89 d0                	mov    eax,edx
c000225f:	c3                   	ret    
c0002260:	31 c0                	xor    eax,eax
c0002262:	c3                   	ret    

c0002263 <pick_lfn>:
c0002263:	55                   	push   ebp
c0002264:	57                   	push   edi
c0002265:	89 c7                	mov    edi,eax
c0002267:	56                   	push   esi
c0002268:	53                   	push   ebx
c0002269:	89 d3                	mov    ebx,edx
c000226b:	8d 42 1a             	lea    eax,[edx+0x1a]
c000226e:	e8 7d fd ff ff       	call   c0001ff0 <ld_word>
c0002273:	66 85 c0             	test   ax,ax
c0002276:	74 04                	je     c000227c <pick_lfn+0x19>
c0002278:	31 c0                	xor    eax,eax
c000227a:	eb 62                	jmp    c00022de <pick_lfn+0x7b>
c000227c:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000227f:	bd 01 00 00 00       	mov    ebp,0x1
c0002284:	31 f6                	xor    esi,esi
c0002286:	83 e1 bf             	and    ecx,0xffffffbf
c0002289:	49                   	dec    ecx
c000228a:	6b c9 0d             	imul   ecx,ecx,0xd
c000228d:	0f b6 86 a0 09 02 c0 	movzx  eax,BYTE PTR [esi-0x3ffdf660]
c0002294:	01 d8                	add    eax,ebx
c0002296:	e8 55 fd ff ff       	call   c0001ff0 <ld_word>
c000229b:	66 85 ed             	test   bp,bp
c000229e:	74 11                	je     c00022b1 <pick_lfn+0x4e>
c00022a0:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00022a6:	77 d0                	ja     c0002278 <pick_lfn+0x15>
c00022a8:	66 89 04 4f          	mov    WORD PTR [edi+ecx*2],ax
c00022ac:	89 c5                	mov    ebp,eax
c00022ae:	41                   	inc    ecx
c00022af:	eb 0a                	jmp    c00022bb <pick_lfn+0x58>
c00022b1:	0f b7 c0             	movzx  eax,ax
c00022b4:	3d ff ff 00 00       	cmp    eax,0xffff
c00022b9:	75 bd                	jne    c0002278 <pick_lfn+0x15>
c00022bb:	46                   	inc    esi
c00022bc:	83 fe 0d             	cmp    esi,0xd
c00022bf:	75 cc                	jne    c000228d <pick_lfn+0x2a>
c00022c1:	f6 03 40             	test   BYTE PTR [ebx],0x40
c00022c4:	74 13                	je     c00022d9 <pick_lfn+0x76>
c00022c6:	66 85 ed             	test   bp,bp
c00022c9:	74 0e                	je     c00022d9 <pick_lfn+0x76>
c00022cb:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00022d1:	77 a5                	ja     c0002278 <pick_lfn+0x15>
c00022d3:	66 c7 04 4f 00 00    	mov    WORD PTR [edi+ecx*2],0x0
c00022d9:	b8 01 00 00 00       	mov    eax,0x1
c00022de:	5b                   	pop    ebx
c00022df:	5e                   	pop    esi
c00022e0:	5f                   	pop    edi
c00022e1:	5d                   	pop    ebp
c00022e2:	c3                   	ret    

c00022e3 <put_lfn>:
c00022e3:	55                   	push   ebp
c00022e4:	57                   	push   edi
c00022e5:	89 d7                	mov    edi,edx
c00022e7:	56                   	push   esi
c00022e8:	31 f6                	xor    esi,esi
c00022ea:	53                   	push   ebx
c00022eb:	83 ec 0c             	sub    esp,0xc
c00022ee:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00022f2:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c00022f6:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c00022fc:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0002300:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0002303:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002306:	31 d2                	xor    edx,edx
c0002308:	e8 08 fd ff ff       	call   c0002015 <st_word>
c000230d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002314:	0f b6 d9             	movzx  ebx,cl
c0002317:	4b                   	dec    ebx
c0002318:	6b db 0d             	imul   ebx,ebx,0xd
c000231b:	0f b7 c6             	movzx  eax,si
c000231e:	3d ff ff 00 00       	cmp    eax,0xffff
c0002323:	74 09                	je     c000232e <put_lfn+0x4b>
c0002325:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002329:	0f b7 34 58          	movzx  esi,WORD PTR [eax+ebx*2]
c000232d:	43                   	inc    ebx
c000232e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002331:	0f b7 ee             	movzx  ebp,si
c0002334:	89 ea                	mov    edx,ebp
c0002336:	0f b6 80 a0 09 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdf660]
c000233d:	01 f8                	add    eax,edi
c000233f:	e8 d1 fc ff ff       	call   c0002015 <st_word>
c0002344:	85 ed                	test   ebp,ebp
c0002346:	75 05                	jne    c000234d <put_lfn+0x6a>
c0002348:	be ff ff 00 00       	mov    esi,0xffff
c000234d:	ff 04 24             	inc    DWORD PTR [esp]
c0002350:	83 3c 24 0d          	cmp    DWORD PTR [esp],0xd
c0002354:	75 c5                	jne    c000231b <put_lfn+0x38>
c0002356:	81 fe ff ff 00 00    	cmp    esi,0xffff
c000235c:	74 0b                	je     c0002369 <put_lfn+0x86>
c000235e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002362:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002367:	75 07                	jne    c0002370 <put_lfn+0x8d>
c0002369:	83 c9 40             	or     ecx,0x40
c000236c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002370:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0002374:	88 07                	mov    BYTE PTR [edi],al
c0002376:	83 c4 0c             	add    esp,0xc
c0002379:	5b                   	pop    ebx
c000237a:	5e                   	pop    esi
c000237b:	5f                   	pop    edi
c000237c:	5d                   	pop    ebp
c000237d:	c3                   	ret    

c000237e <gen_numname>:
c000237e:	57                   	push   edi
c000237f:	89 cf                	mov    edi,ecx
c0002381:	56                   	push   esi
c0002382:	b9 0b 00 00 00       	mov    ecx,0xb
c0002387:	53                   	push   ebx
c0002388:	89 c6                	mov    esi,eax
c000238a:	83 ec 10             	sub    esp,0x10
c000238d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002391:	e8 86 fc ff ff       	call   c000201c <mem_cpy>
c0002396:	83 fb 05             	cmp    ebx,0x5
c0002399:	76 30                	jbe    c00023cb <gen_numname+0x4d>
c000239b:	66 8b 07             	mov    ax,WORD PTR [edi]
c000239e:	66 85 c0             	test   ax,ax
c00023a1:	74 28                	je     c00023cb <gen_numname+0x4d>
c00023a3:	83 c7 02             	add    edi,0x2
c00023a6:	ba 10 00 00 00       	mov    edx,0x10
c00023ab:	89 c1                	mov    ecx,eax
c00023ad:	01 db                	add    ebx,ebx
c00023af:	c1 e0 10             	shl    eax,0x10
c00023b2:	83 e1 01             	and    ecx,0x1
c00023b5:	c1 e8 11             	shr    eax,0x11
c00023b8:	01 cb                	add    ebx,ecx
c00023ba:	0f ba e3 10          	bt     ebx,0x10
c00023be:	73 06                	jae    c00023c6 <gen_numname+0x48>
c00023c0:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00023c6:	4a                   	dec    edx
c00023c7:	75 e2                	jne    c00023ab <gen_numname+0x2d>
c00023c9:	eb d0                	jmp    c000239b <gen_numname+0x1d>
c00023cb:	b8 07 00 00 00       	mov    eax,0x7
c00023d0:	89 d9                	mov    ecx,ebx
c00023d2:	83 e1 0f             	and    ecx,0xf
c00023d5:	8d 79 30             	lea    edi,[ecx+0x30]
c00023d8:	83 ff 39             	cmp    edi,0x39
c00023db:	89 fa                	mov    edx,edi
c00023dd:	76 03                	jbe    c00023e2 <gen_numname+0x64>
c00023df:	8d 51 37             	lea    edx,[ecx+0x37]
c00023e2:	8d 48 ff             	lea    ecx,[eax-0x1]
c00023e5:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00023e9:	89 da                	mov    edx,ebx
c00023eb:	c1 ea 04             	shr    edx,0x4
c00023ee:	83 fb 0f             	cmp    ebx,0xf
c00023f1:	76 06                	jbe    c00023f9 <gen_numname+0x7b>
c00023f3:	89 c8                	mov    eax,ecx
c00023f5:	89 d3                	mov    ebx,edx
c00023f7:	eb d7                	jmp    c00023d0 <gen_numname+0x52>
c00023f9:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00023fe:	8d 58 fe             	lea    ebx,[eax-0x2]
c0002401:	31 d2                	xor    edx,edx
c0002403:	8d 04 16             	lea    eax,[esi+edx*1]
c0002406:	39 ca                	cmp    edx,ecx
c0002408:	73 19                	jae    c0002423 <gen_numname+0xa5>
c000240a:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000240d:	83 f8 20             	cmp    eax,0x20
c0002410:	74 11                	je     c0002423 <gen_numname+0xa5>
c0002412:	e8 58 fc ff ff       	call   c000206f <dbc_1st>
c0002417:	85 c0                	test   eax,eax
c0002419:	74 05                	je     c0002420 <gen_numname+0xa2>
c000241b:	39 d3                	cmp    ebx,edx
c000241d:	74 04                	je     c0002423 <gen_numname+0xa5>
c000241f:	42                   	inc    edx
c0002420:	42                   	inc    edx
c0002421:	eb e0                	jmp    c0002403 <gen_numname+0x85>
c0002423:	83 f9 07             	cmp    ecx,0x7
c0002426:	b0 20                	mov    al,0x20
c0002428:	77 05                	ja     c000242f <gen_numname+0xb1>
c000242a:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c000242e:	41                   	inc    ecx
c000242f:	42                   	inc    edx
c0002430:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002434:	83 fa 07             	cmp    edx,0x7
c0002437:	76 ea                	jbe    c0002423 <gen_numname+0xa5>
c0002439:	83 c4 10             	add    esp,0x10
c000243c:	5b                   	pop    ebx
c000243d:	5e                   	pop    esi
c000243e:	5f                   	pop    edi
c000243f:	c3                   	ret    

c0002440 <sum_sfn>:
c0002440:	53                   	push   ebx
c0002441:	31 c9                	xor    ecx,ecx
c0002443:	31 db                	xor    ebx,ebx
c0002445:	0f b6 d1             	movzx  edx,cl
c0002448:	d1 ea                	shr    edx,1
c000244a:	c1 e1 07             	shl    ecx,0x7
c000244d:	09 ca                	or     edx,ecx
c000244f:	8a 0c 18             	mov    cl,BYTE PTR [eax+ebx*1]
c0002452:	43                   	inc    ebx
c0002453:	01 ca                	add    edx,ecx
c0002455:	83 fb 0b             	cmp    ebx,0xb
c0002458:	88 d1                	mov    cl,dl
c000245a:	75 e9                	jne    c0002445 <sum_sfn+0x5>
c000245c:	5b                   	pop    ebx
c000245d:	88 d0                	mov    al,dl
c000245f:	c3                   	ret    

c0002460 <get_ldnumber>:
c0002460:	55                   	push   ebp
c0002461:	57                   	push   edi
c0002462:	56                   	push   esi
c0002463:	83 ce ff             	or     esi,0xffffffff
c0002466:	53                   	push   ebx
c0002467:	8b 10                	mov    edx,DWORD PTR [eax]
c0002469:	85 d2                	test   edx,edx
c000246b:	74 38                	je     c00024a5 <get_ldnumber+0x45>
c000246d:	89 c5                	mov    ebp,eax
c000246f:	89 d1                	mov    ecx,edx
c0002471:	41                   	inc    ecx
c0002472:	0f be 59 ff          	movsx  ebx,BYTE PTR [ecx-0x1]
c0002476:	80 fb 1f             	cmp    bl,0x1f
c0002479:	76 05                	jbe    c0002480 <get_ldnumber+0x20>
c000247b:	83 fb 3a             	cmp    ebx,0x3a
c000247e:	75 f1                	jne    c0002471 <get_ldnumber+0x11>
c0002480:	31 f6                	xor    esi,esi
c0002482:	83 fb 3a             	cmp    ebx,0x3a
c0002485:	75 1e                	jne    c00024a5 <get_ldnumber+0x45>
c0002487:	8a 1a                	mov    bl,BYTE PTR [edx]
c0002489:	83 ce ff             	or     esi,0xffffffff
c000248c:	8d 7b d0             	lea    edi,[ebx-0x30]
c000248f:	89 f8                	mov    eax,edi
c0002491:	3c 09                	cmp    al,0x9
c0002493:	77 10                	ja     c00024a5 <get_ldnumber+0x45>
c0002495:	83 c2 02             	add    edx,0x2
c0002498:	39 d1                	cmp    ecx,edx
c000249a:	75 09                	jne    c00024a5 <get_ldnumber+0x45>
c000249c:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c000249f:	0f be f3             	movsx  esi,bl
c00024a2:	83 ee 30             	sub    esi,0x30
c00024a5:	5b                   	pop    ebx
c00024a6:	89 f0                	mov    eax,esi
c00024a8:	5e                   	pop    esi
c00024a9:	5f                   	pop    edi
c00024aa:	5d                   	pop    ebp
c00024ab:	c3                   	ret    

c00024ac <validate>:
c00024ac:	56                   	push   esi
c00024ad:	85 c0                	test   eax,eax
c00024af:	53                   	push   ebx
c00024b0:	89 d6                	mov    esi,edx
c00024b2:	51                   	push   ecx
c00024b3:	75 09                	jne    c00024be <validate+0x12>
c00024b5:	b8 09 00 00 00       	mov    eax,0x9
c00024ba:	31 c9                	xor    ecx,ecx
c00024bc:	eb 2e                	jmp    c00024ec <validate+0x40>
c00024be:	89 c3                	mov    ebx,eax
c00024c0:	8b 00                	mov    eax,DWORD PTR [eax]
c00024c2:	85 c0                	test   eax,eax
c00024c4:	74 ef                	je     c00024b5 <validate+0x9>
c00024c6:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00024c9:	74 ea                	je     c00024b5 <validate+0x9>
c00024cb:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00024ce:	66 39 50 06          	cmp    WORD PTR [eax+0x6],dx
c00024d2:	75 e1                	jne    c00024b5 <validate+0x9>
c00024d4:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00024d8:	83 ec 0c             	sub    esp,0xc
c00024db:	50                   	push   eax
c00024dc:	e8 be fa ff ff       	call   c0001f9f <disk_status>
c00024e1:	83 c4 10             	add    esp,0x10
c00024e4:	a8 01                	test   al,0x1
c00024e6:	75 cd                	jne    c00024b5 <validate+0x9>
c00024e8:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00024ea:	31 c0                	xor    eax,eax
c00024ec:	89 0e                	mov    DWORD PTR [esi],ecx
c00024ee:	5a                   	pop    edx
c00024ef:	5b                   	pop    ebx
c00024f0:	5e                   	pop    esi
c00024f1:	c3                   	ret    

c00024f2 <sync_window>:
c00024f2:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00024f6:	74 58                	je     c0002550 <sync_window+0x5e>
c00024f8:	56                   	push   esi
c00024f9:	53                   	push   ebx
c00024fa:	89 c3                	mov    ebx,eax
c00024fc:	51                   	push   ecx
c00024fd:	6a 01                	push   0x1
c00024ff:	ff 70 30             	push   DWORD PTR [eax+0x30]
c0002502:	8d 70 34             	lea    esi,[eax+0x34]
c0002505:	56                   	push   esi
c0002506:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000250a:	50                   	push   eax
c000250b:	e8 ab fa ff ff       	call   c0001fbb <disk_write>
c0002510:	83 c4 10             	add    esp,0x10
c0002513:	ba 01 00 00 00       	mov    edx,0x1
c0002518:	85 c0                	test   eax,eax
c000251a:	75 2e                	jne    c000254a <sync_window+0x58>
c000251c:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0002520:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0002523:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0002526:	89 c1                	mov    ecx,eax
c0002528:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c000252b:	39 d1                	cmp    ecx,edx
c000252d:	73 19                	jae    c0002548 <sync_window+0x56>
c000252f:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002533:	75 13                	jne    c0002548 <sync_window+0x56>
c0002535:	6a 01                	push   0x1
c0002537:	01 d0                	add    eax,edx
c0002539:	50                   	push   eax
c000253a:	56                   	push   esi
c000253b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000253f:	50                   	push   eax
c0002540:	e8 76 fa ff ff       	call   c0001fbb <disk_write>
c0002545:	83 c4 10             	add    esp,0x10
c0002548:	31 d2                	xor    edx,edx
c000254a:	89 d0                	mov    eax,edx
c000254c:	5a                   	pop    edx
c000254d:	5b                   	pop    ebx
c000254e:	5e                   	pop    esi
c000254f:	c3                   	ret    
c0002550:	31 d2                	xor    edx,edx
c0002552:	89 d0                	mov    eax,edx
c0002554:	c3                   	ret    

c0002555 <move_window>:
c0002555:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c0002558:	74 3a                	je     c0002594 <move_window+0x3f>
c000255a:	56                   	push   esi
c000255b:	89 d6                	mov    esi,edx
c000255d:	53                   	push   ebx
c000255e:	89 c3                	mov    ebx,eax
c0002560:	51                   	push   ecx
c0002561:	e8 8c ff ff ff       	call   c00024f2 <sync_window>
c0002566:	85 c0                	test   eax,eax
c0002568:	75 2d                	jne    c0002597 <move_window+0x42>
c000256a:	6a 01                	push   0x1
c000256c:	56                   	push   esi
c000256d:	8d 43 34             	lea    eax,[ebx+0x34]
c0002570:	50                   	push   eax
c0002571:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002575:	50                   	push   eax
c0002576:	e8 2a fa ff ff       	call   c0001fa5 <disk_read>
c000257b:	83 c4 10             	add    esp,0x10
c000257e:	89 c2                	mov    edx,eax
c0002580:	31 c0                	xor    eax,eax
c0002582:	85 d2                	test   edx,edx
c0002584:	ba ff ff ff ff       	mov    edx,0xffffffff
c0002589:	0f 45 f2             	cmovne esi,edx
c000258c:	0f 95 c0             	setne  al
c000258f:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c0002592:	eb 03                	jmp    c0002597 <move_window+0x42>
c0002594:	31 c0                	xor    eax,eax
c0002596:	c3                   	ret    
c0002597:	5a                   	pop    edx
c0002598:	5b                   	pop    ebx
c0002599:	5e                   	pop    esi
c000259a:	c3                   	ret    

c000259b <check_fs>:
c000259b:	53                   	push   ebx
c000259c:	89 c3                	mov    ebx,eax
c000259e:	83 ec 08             	sub    esp,0x8
c00025a1:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00025a5:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c00025ac:	e8 a4 ff ff ff       	call   c0002555 <move_window>
c00025b1:	ba 04 00 00 00       	mov    edx,0x4
c00025b6:	85 c0                	test   eax,eax
c00025b8:	75 68                	jne    c0002622 <check_fs+0x87>
c00025ba:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00025c0:	e8 2b fa ff ff       	call   c0001ff0 <ld_word>
c00025c5:	ba 03 00 00 00       	mov    edx,0x3
c00025ca:	66 3d 55 aa          	cmp    ax,0xaa55
c00025ce:	75 52                	jne    c0002622 <check_fs+0x87>
c00025d0:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00025d3:	8d 50 18             	lea    edx,[eax+0x18]
c00025d6:	80 fa 01             	cmp    dl,0x1
c00025d9:	76 09                	jbe    c00025e4 <check_fs+0x49>
c00025db:	3c eb                	cmp    al,0xeb
c00025dd:	ba 02 00 00 00       	mov    edx,0x2
c00025e2:	75 3e                	jne    c0002622 <check_fs+0x87>
c00025e4:	ba 00 31 02 c0       	mov    edx,0xc0023100
c00025e9:	b9 03 00 00 00       	mov    ecx,0x3
c00025ee:	8d 43 6a             	lea    eax,[ebx+0x6a]
c00025f1:	e8 45 fa ff ff       	call   c000203b <mem_cmp>
c00025f6:	31 d2                	xor    edx,edx
c00025f8:	85 c0                	test   eax,eax
c00025fa:	74 26                	je     c0002622 <check_fs+0x87>
c00025fc:	ba 5c 08 02 c0       	mov    edx,0xc002085c
c0002601:	b9 05 00 00 00       	mov    ecx,0x5
c0002606:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c000260c:	e8 2a fa ff ff       	call   c000203b <mem_cmp>
c0002611:	31 d2                	xor    edx,edx
c0002613:	85 c0                	test   eax,eax
c0002615:	74 0b                	je     c0002622 <check_fs+0x87>
c0002617:	31 d2                	xor    edx,edx
c0002619:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c000261d:	0f 95 c2             	setne  dl
c0002620:	01 d2                	add    edx,edx
c0002622:	83 c4 08             	add    esp,0x8
c0002625:	89 d0                	mov    eax,edx
c0002627:	5b                   	pop    ebx
c0002628:	c3                   	ret    

c0002629 <find_volume>:
c0002629:	55                   	push   ebp
c000262a:	57                   	push   edi
c000262b:	56                   	push   esi
c000262c:	89 c6                	mov    esi,eax
c000262e:	53                   	push   ebx
c000262f:	89 d3                	mov    ebx,edx
c0002631:	83 ec 2c             	sub    esp,0x2c
c0002634:	31 d2                	xor    edx,edx
c0002636:	e8 60 ff ff ff       	call   c000259b <check_fs>
c000263b:	85 db                	test   ebx,ebx
c000263d:	0f 94 c2             	sete   dl
c0002640:	83 f8 02             	cmp    eax,0x2
c0002643:	74 07                	je     c000264c <find_volume+0x23>
c0002645:	77 63                	ja     c00026aa <find_volume+0x81>
c0002647:	f6 c2 01             	test   dl,0x1
c000264a:	75 5e                	jne    c00026aa <find_volume+0x81>
c000264c:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c0002652:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002656:	8d be fa 01 00 00    	lea    edi,[esi+0x1fa]
c000265c:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c0002660:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0002664:	89 f8                	mov    eax,edi
c0002666:	83 c7 10             	add    edi,0x10
c0002669:	e8 8f f9 ff ff       	call   c0001ffd <ld_dword>
c000266e:	83 c5 04             	add    ebp,0x4
c0002671:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0002675:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0002678:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
c000267c:	75 e2                	jne    c0002660 <find_volume+0x37>
c000267e:	83 fb 01             	cmp    ebx,0x1
c0002681:	0f b6 fa             	movzx  edi,dl
c0002684:	83 d3 ff             	adc    ebx,0xffffffff
c0002687:	8b 54 9c 10          	mov    edx,DWORD PTR [esp+ebx*4+0x10]
c000268b:	b8 03 00 00 00       	mov    eax,0x3
c0002690:	85 d2                	test   edx,edx
c0002692:	74 07                	je     c000269b <find_volume+0x72>
c0002694:	89 f0                	mov    eax,esi
c0002696:	e8 00 ff ff ff       	call   c000259b <check_fs>
c000269b:	83 f8 01             	cmp    eax,0x1
c000269e:	76 0a                	jbe    c00026aa <find_volume+0x81>
c00026a0:	85 ff                	test   edi,edi
c00026a2:	74 06                	je     c00026aa <find_volume+0x81>
c00026a4:	43                   	inc    ebx
c00026a5:	83 fb 03             	cmp    ebx,0x3
c00026a8:	76 dd                	jbe    c0002687 <find_volume+0x5e>
c00026aa:	83 c4 2c             	add    esp,0x2c
c00026ad:	5b                   	pop    ebx
c00026ae:	5e                   	pop    esi
c00026af:	5f                   	pop    edi
c00026b0:	5d                   	pop    ebp
c00026b1:	c3                   	ret    

c00026b2 <mount_volume>:
c00026b2:	55                   	push   ebp
c00026b3:	89 d5                	mov    ebp,edx
c00026b5:	57                   	push   edi
c00026b6:	89 cf                	mov    edi,ecx
c00026b8:	56                   	push   esi
c00026b9:	53                   	push   ebx
c00026ba:	bb 0b 00 00 00       	mov    ebx,0xb
c00026bf:	83 ec 2c             	sub    esp,0x2c
c00026c2:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00026c8:	e8 93 fd ff ff       	call   c0002460 <get_ldnumber>
c00026cd:	85 c0                	test   eax,eax
c00026cf:	0f 88 d0 02 00 00    	js     c00029a5 <mount_volume+0x2f3>
c00026d5:	8b 34 85 a0 64 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd9b60]
c00026dc:	89 c2                	mov    edx,eax
c00026de:	bb 0c 00 00 00       	mov    ebx,0xc
c00026e3:	85 f6                	test   esi,esi
c00026e5:	0f 84 ba 02 00 00    	je     c00029a5 <mount_volume+0x2f3>
c00026eb:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c00026ee:	83 e7 fe             	and    edi,0xfffffffe
c00026f1:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00026f4:	74 3c                	je     c0002732 <mount_volume+0x80>
c00026f6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00026fa:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00026fe:	83 ec 0c             	sub    esp,0xc
c0002701:	50                   	push   eax
c0002702:	e8 98 f8 ff ff       	call   c0001f9f <disk_status>
c0002707:	83 c4 10             	add    esp,0x10
c000270a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000270e:	a8 01                	test   al,0x1
c0002710:	75 20                	jne    c0002732 <mount_volume+0x80>
c0002712:	31 db                	xor    ebx,ebx
c0002714:	81 e7 fe 00 00 00    	and    edi,0xfe
c000271a:	0f 84 85 02 00 00    	je     c00029a5 <mount_volume+0x2f3>
c0002720:	a8 04                	test   al,0x4
c0002722:	0f 84 7d 02 00 00    	je     c00029a5 <mount_volume+0x2f3>
c0002728:	bb 0a 00 00 00       	mov    ebx,0xa
c000272d:	e9 73 02 00 00       	jmp    c00029a5 <mount_volume+0x2f3>
c0002732:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0002735:	83 ec 0c             	sub    esp,0xc
c0002738:	0f b6 c2             	movzx  eax,dl
c000273b:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c000273e:	bb 03 00 00 00       	mov    ebx,0x3
c0002743:	50                   	push   eax
c0002744:	e8 59 f8 ff ff       	call   c0001fa2 <disk_initialize>
c0002749:	83 c4 10             	add    esp,0x10
c000274c:	a8 01                	test   al,0x1
c000274e:	0f 85 51 02 00 00    	jne    c00029a5 <mount_volume+0x2f3>
c0002754:	81 e7 fe 00 00 00    	and    edi,0xfe
c000275a:	74 04                	je     c0002760 <mount_volume+0xae>
c000275c:	a8 04                	test   al,0x4
c000275e:	75 c8                	jne    c0002728 <mount_volume+0x76>
c0002760:	31 d2                	xor    edx,edx
c0002762:	89 f0                	mov    eax,esi
c0002764:	e8 c0 fe ff ff       	call   c0002629 <find_volume>
c0002769:	bb 01 00 00 00       	mov    ebx,0x1
c000276e:	83 f8 04             	cmp    eax,0x4
c0002771:	0f 84 2e 02 00 00    	je     c00029a5 <mount_volume+0x2f3>
c0002777:	83 f8 01             	cmp    eax,0x1
c000277a:	76 0a                	jbe    c0002786 <mount_volume+0xd4>
c000277c:	bb 0d 00 00 00       	mov    ebx,0xd
c0002781:	e9 1f 02 00 00       	jmp    c00029a5 <mount_volume+0x2f3>
c0002786:	8d 46 3f             	lea    eax,[esi+0x3f]
c0002789:	e8 62 f8 ff ff       	call   c0001ff0 <ld_word>
c000278e:	66 3d 00 02          	cmp    ax,0x200
c0002792:	75 e8                	jne    c000277c <mount_volume+0xca>
c0002794:	8d 46 4a             	lea    eax,[esi+0x4a]
c0002797:	e8 54 f8 ff ff       	call   c0001ff0 <ld_word>
c000279c:	0f b7 c0             	movzx  eax,ax
c000279f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00027a3:	85 c0                	test   eax,eax
c00027a5:	75 0c                	jne    c00027b3 <mount_volume+0x101>
c00027a7:	8d 46 58             	lea    eax,[esi+0x58]
c00027aa:	e8 4e f8 ff ff       	call   c0001ffd <ld_dword>
c00027af:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00027b3:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c00027b6:	8b 6e 44             	mov    ebp,DWORD PTR [esi+0x44]
c00027b9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00027bd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00027c1:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00027c4:	89 e8                	mov    eax,ebp
c00027c6:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00027c9:	8d 45 ff             	lea    eax,[ebp-0x1]
c00027cc:	3c 01                	cmp    al,0x1
c00027ce:	77 ac                	ja     c000277c <mount_volume+0xca>
c00027d0:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00027d4:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00027d8:	66 85 c0             	test   ax,ax
c00027db:	89 c3                	mov    ebx,eax
c00027dd:	74 9d                	je     c000277c <mount_volume+0xca>
c00027df:	8d 40 ff             	lea    eax,[eax-0x1]
c00027e2:	85 d8                	test   eax,ebx
c00027e4:	75 96                	jne    c000277c <mount_volume+0xca>
c00027e6:	8d 46 45             	lea    eax,[esi+0x45]
c00027e9:	e8 02 f8 ff ff       	call   c0001ff0 <ld_word>
c00027ee:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c00027f2:	a8 0f                	test   al,0xf
c00027f4:	89 c7                	mov    edi,eax
c00027f6:	75 84                	jne    c000277c <mount_volume+0xca>
c00027f8:	8d 46 47             	lea    eax,[esi+0x47]
c00027fb:	e8 f0 f7 ff ff       	call   c0001ff0 <ld_word>
c0002800:	0f b7 d0             	movzx  edx,ax
c0002803:	85 d2                	test   edx,edx
c0002805:	75 0a                	jne    c0002811 <mount_volume+0x15f>
c0002807:	8d 46 54             	lea    eax,[esi+0x54]
c000280a:	e8 ee f7 ff ff       	call   c0001ffd <ld_dword>
c000280f:	89 c2                	mov    edx,eax
c0002811:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002815:	8d 46 42             	lea    eax,[esi+0x42]
c0002818:	e8 d3 f7 ff ff       	call   c0001ff0 <ld_word>
c000281d:	0f b7 c8             	movzx  ecx,ax
c0002820:	85 c9                	test   ecx,ecx
c0002822:	0f 84 54 ff ff ff    	je     c000277c <mount_volume+0xca>
c0002828:	89 e8                	mov    eax,ebp
c000282a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000282e:	0f b6 e8             	movzx  ebp,al
c0002831:	0f b7 c7             	movzx  eax,di
c0002834:	0f af 6c 24 0c       	imul   ebp,DWORD PTR [esp+0xc]
c0002839:	c1 e8 04             	shr    eax,0x4
c000283c:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c0002840:	01 e8                	add    eax,ebp
c0002842:	01 c8                	add    eax,ecx
c0002844:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002848:	39 c2                	cmp    edx,eax
c000284a:	0f 82 2c ff ff ff    	jb     c000277c <mount_volume+0xca>
c0002850:	29 c2                	sub    edx,eax
c0002852:	89 d5                	mov    ebp,edx
c0002854:	89 d0                	mov    eax,edx
c0002856:	31 d2                	xor    edx,edx
c0002858:	f7 f3                	div    ebx
c000285a:	39 dd                	cmp    ebp,ebx
c000285c:	0f 82 1a ff ff ff    	jb     c000277c <mount_volume+0xca>
c0002862:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002867:	0f 87 0f ff ff ff    	ja     c000277c <mount_volume+0xca>
c000286d:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002872:	0f 86 1e 01 00 00    	jbe    c0002996 <mount_volume+0x2e4>
c0002878:	bb 03 00 00 00       	mov    ebx,0x3
c000287d:	8d 68 02             	lea    ebp,[eax+0x2]
c0002880:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002884:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c0002887:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000288b:	03 54 24 10          	add    edx,DWORD PTR [esp+0x10]
c000288f:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c0002892:	01 c8                	add    eax,ecx
c0002894:	83 fb 03             	cmp    ebx,0x3
c0002897:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c000289a:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c000289d:	75 23                	jne    c00028c2 <mount_volume+0x210>
c000289f:	8d 46 5e             	lea    eax,[esi+0x5e]
c00028a2:	e8 49 f7 ff ff       	call   c0001ff0 <ld_word>
c00028a7:	09 c7                	or     edi,eax
c00028a9:	66 85 ff             	test   di,di
c00028ac:	0f 85 ca fe ff ff    	jne    c000277c <mount_volume+0xca>
c00028b2:	8d 46 60             	lea    eax,[esi+0x60]
c00028b5:	e8 43 f7 ff ff       	call   c0001ffd <ld_dword>
c00028ba:	c1 e5 02             	shl    ebp,0x2
c00028bd:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00028c0:	eb 25                	jmp    c00028e7 <mount_volume+0x235>
c00028c2:	66 85 ff             	test   di,di
c00028c5:	0f 84 b1 fe ff ff    	je     c000277c <mount_volume+0xca>
c00028cb:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00028cf:	8d 54 6d 00          	lea    edx,[ebp+ebp*2+0x0]
c00028d3:	8d 7c 2d 00          	lea    edi,[ebp+ebp*1+0x0]
c00028d7:	83 e5 01             	and    ebp,0x1
c00028da:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00028dd:	d1 ea                	shr    edx,1
c00028df:	01 d5                	add    ebp,edx
c00028e1:	83 fb 02             	cmp    ebx,0x2
c00028e4:	0f 44 ef             	cmove  ebp,edi
c00028e7:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c00028ed:	c1 ed 09             	shr    ebp,0x9
c00028f0:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c00028f4:	0f 87 82 fe ff ff    	ja     c000277c <mount_volume+0xca>
c00028fa:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c0002901:	83 fb 03             	cmp    ebx,0x3
c0002904:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c000290b:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c000290f:	75 6e                	jne    c000297f <mount_volume+0x2cd>
c0002911:	8d 46 64             	lea    eax,[esi+0x64]
c0002914:	e8 d7 f6 ff ff       	call   c0001ff0 <ld_word>
c0002919:	66 48                	dec    ax
c000291b:	75 62                	jne    c000297f <mount_volume+0x2cd>
c000291d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0002921:	89 f0                	mov    eax,esi
c0002923:	42                   	inc    edx
c0002924:	e8 2c fc ff ff       	call   c0002555 <move_window>
c0002929:	85 c0                	test   eax,eax
c000292b:	75 52                	jne    c000297f <mount_volume+0x2cd>
c000292d:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c0002931:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c0002937:	e8 b4 f6 ff ff       	call   c0001ff0 <ld_word>
c000293c:	66 3d 55 aa          	cmp    ax,0xaa55
c0002940:	75 3d                	jne    c000297f <mount_volume+0x2cd>
c0002942:	8d 46 34             	lea    eax,[esi+0x34]
c0002945:	e8 b3 f6 ff ff       	call   c0001ffd <ld_dword>
c000294a:	3d 52 52 61 41       	cmp    eax,0x41615252
c000294f:	75 2e                	jne    c000297f <mount_volume+0x2cd>
c0002951:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c0002957:	e8 a1 f6 ff ff       	call   c0001ffd <ld_dword>
c000295c:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002961:	75 1c                	jne    c000297f <mount_volume+0x2cd>
c0002963:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c0002969:	e8 8f f6 ff ff       	call   c0001ffd <ld_dword>
c000296e:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0002971:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c0002977:	e8 81 f6 ff ff       	call   c0001ffd <ld_dword>
c000297c:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000297f:	88 1e                	mov    BYTE PTR [esi],bl
c0002981:	66 a1 80 64 02 c0    	mov    ax,ds:0xc0026480
c0002987:	31 db                	xor    ebx,ebx
c0002989:	40                   	inc    eax
c000298a:	66 a3 80 64 02 c0    	mov    ds:0xc0026480,ax
c0002990:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c0002994:	eb 0f                	jmp    c00029a5 <mount_volume+0x2f3>
c0002996:	3d f6 0f 00 00       	cmp    eax,0xff6
c000299b:	19 db                	sbb    ebx,ebx
c000299d:	83 c3 02             	add    ebx,0x2
c00029a0:	e9 d8 fe ff ff       	jmp    c000287d <mount_volume+0x1cb>
c00029a5:	83 c4 2c             	add    esp,0x2c
c00029a8:	89 d8                	mov    eax,ebx
c00029aa:	5b                   	pop    ebx
c00029ab:	5e                   	pop    esi
c00029ac:	5f                   	pop    edi
c00029ad:	5d                   	pop    ebp
c00029ae:	c3                   	ret    

c00029af <put_fat>:
c00029af:	55                   	push   ebp
c00029b0:	bd 02 00 00 00       	mov    ebp,0x2
c00029b5:	57                   	push   edi
c00029b6:	56                   	push   esi
c00029b7:	53                   	push   ebx
c00029b8:	83 ec 1c             	sub    esp,0x1c
c00029bb:	83 fa 01             	cmp    edx,0x1
c00029be:	0f 86 38 01 00 00    	jbe    c0002afc <put_fat+0x14d>
c00029c4:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c00029c7:	0f 86 2f 01 00 00    	jbe    c0002afc <put_fat+0x14d>
c00029cd:	89 c6                	mov    esi,eax
c00029cf:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00029d2:	89 cf                	mov    edi,ecx
c00029d4:	89 d3                	mov    ebx,edx
c00029d6:	83 f8 02             	cmp    eax,0x2
c00029d9:	0f 84 b1 00 00 00    	je     c0002a90 <put_fat+0xe1>
c00029df:	83 f8 03             	cmp    eax,0x3
c00029e2:	0f 84 d5 00 00 00    	je     c0002abd <put_fat+0x10e>
c00029e8:	48                   	dec    eax
c00029e9:	0f 85 0d 01 00 00    	jne    c0002afc <put_fat+0x14d>
c00029ef:	89 d1                	mov    ecx,edx
c00029f1:	89 f0                	mov    eax,esi
c00029f3:	d1 e9                	shr    ecx,1
c00029f5:	01 d1                	add    ecx,edx
c00029f7:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00029fb:	89 ca                	mov    edx,ecx
c00029fd:	c1 ea 09             	shr    edx,0x9
c0002a00:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002a03:	e8 4d fb ff ff       	call   c0002555 <move_window>
c0002a08:	85 c0                	test   eax,eax
c0002a0a:	89 c5                	mov    ebp,eax
c0002a0c:	0f 85 ea 00 00 00    	jne    c0002afc <put_fat+0x14d>
c0002a12:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002a16:	8d 46 34             	lea    eax,[esi+0x34]
c0002a19:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002a1d:	8d 41 01             	lea    eax,[ecx+0x1]
c0002a20:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0002a26:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002a2a:	83 e3 01             	and    ebx,0x1
c0002a2d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002a31:	89 f8                	mov    eax,edi
c0002a33:	74 11                	je     c0002a46 <put_fat+0x97>
c0002a35:	8a 11                	mov    dl,BYTE PTR [ecx]
c0002a37:	89 f8                	mov    eax,edi
c0002a39:	c1 e0 04             	shl    eax,0x4
c0002a3c:	25 f0 0f 00 00       	and    eax,0xff0
c0002a41:	83 e2 0f             	and    edx,0xf
c0002a44:	09 d0                	or     eax,edx
c0002a46:	88 01                	mov    BYTE PTR [ecx],al
c0002a48:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002a4c:	89 f0                	mov    eax,esi
c0002a4e:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002a52:	c1 ea 09             	shr    edx,0x9
c0002a55:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002a58:	e8 f8 fa ff ff       	call   c0002555 <move_window>
c0002a5d:	85 c0                	test   eax,eax
c0002a5f:	89 c5                	mov    ebp,eax
c0002a61:	0f 85 95 00 00 00    	jne    c0002afc <put_fat+0x14d>
c0002a67:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a6b:	25 ff 01 00 00       	and    eax,0x1ff
c0002a70:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002a74:	85 db                	test   ebx,ebx
c0002a76:	74 07                	je     c0002a7f <put_fat+0xd0>
c0002a78:	c1 ef 04             	shr    edi,0x4
c0002a7b:	89 f9                	mov    ecx,edi
c0002a7d:	eb 0d                	jmp    c0002a8c <put_fat+0xdd>
c0002a7f:	8a 08                	mov    cl,BYTE PTR [eax]
c0002a81:	c1 ef 08             	shr    edi,0x8
c0002a84:	83 e7 0f             	and    edi,0xf
c0002a87:	83 e1 f0             	and    ecx,0xfffffff0
c0002a8a:	09 f9                	or     ecx,edi
c0002a8c:	88 08                	mov    BYTE PTR [eax],cl
c0002a8e:	eb 27                	jmp    c0002ab7 <put_fat+0x108>
c0002a90:	c1 ea 08             	shr    edx,0x8
c0002a93:	89 f0                	mov    eax,esi
c0002a95:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002a98:	e8 b8 fa ff ff       	call   c0002555 <move_window>
c0002a9d:	85 c0                	test   eax,eax
c0002a9f:	89 c5                	mov    ebp,eax
c0002aa1:	75 59                	jne    c0002afc <put_fat+0x14d>
c0002aa3:	01 db                	add    ebx,ebx
c0002aa5:	0f b7 d7             	movzx  edx,di
c0002aa8:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002aae:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0002ab2:	e8 5e f5 ff ff       	call   c0002015 <st_word>
c0002ab7:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002abb:	eb 3f                	jmp    c0002afc <put_fat+0x14d>
c0002abd:	c1 ea 07             	shr    edx,0x7
c0002ac0:	89 f0                	mov    eax,esi
c0002ac2:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002ac5:	e8 8b fa ff ff       	call   c0002555 <move_window>
c0002aca:	85 c0                	test   eax,eax
c0002acc:	89 c5                	mov    ebp,eax
c0002ace:	75 2c                	jne    c0002afc <put_fat+0x14d>
c0002ad0:	c1 e3 02             	shl    ebx,0x2
c0002ad3:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002ad9:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002adf:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c0002ae3:	89 d8                	mov    eax,ebx
c0002ae5:	e8 13 f5 ff ff       	call   c0001ffd <ld_dword>
c0002aea:	25 00 00 00 f0       	and    eax,0xf0000000
c0002aef:	09 f8                	or     eax,edi
c0002af1:	89 c2                	mov    edx,eax
c0002af3:	89 d8                	mov    eax,ebx
c0002af5:	e8 1f f5 ff ff       	call   c0002019 <st_dword>
c0002afa:	eb bb                	jmp    c0002ab7 <put_fat+0x108>
c0002afc:	83 c4 1c             	add    esp,0x1c
c0002aff:	89 e8                	mov    eax,ebp
c0002b01:	5b                   	pop    ebx
c0002b02:	5e                   	pop    esi
c0002b03:	5f                   	pop    edi
c0002b04:	5d                   	pop    ebp
c0002b05:	c3                   	ret    

c0002b06 <dir_clear>:
c0002b06:	55                   	push   ebp
c0002b07:	57                   	push   edi
c0002b08:	56                   	push   esi
c0002b09:	89 c6                	mov    esi,eax
c0002b0b:	53                   	push   ebx
c0002b0c:	83 ec 1c             	sub    esp,0x1c
c0002b0f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002b13:	e8 da f9 ff ff       	call   c00024f2 <sync_window>
c0002b18:	85 c0                	test   eax,eax
c0002b1a:	0f 85 c1 00 00 00    	jne    c0002be1 <dir_clear+0xdb>
c0002b20:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002b24:	89 f0                	mov    eax,esi
c0002b26:	e8 1b f7 ff ff       	call   c0002246 <clst2sect>
c0002b2b:	31 d2                	xor    edx,edx
c0002b2d:	b9 00 02 00 00       	mov    ecx,0x200
c0002b32:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002b35:	89 c5                	mov    ebp,eax
c0002b37:	8d 46 34             	lea    eax,[esi+0x34]
c0002b3a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002b3e:	e8 ee f4 ff ff       	call   c0002031 <mem_set>
c0002b43:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0002b47:	b8 00 80 00 00       	mov    eax,0x8000
c0002b4c:	c1 e3 09             	shl    ebx,0x9
c0002b4f:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002b55:	0f 47 d8             	cmova  ebx,eax
c0002b58:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002b5e:	76 16                	jbe    c0002b76 <dir_clear+0x70>
c0002b60:	83 ec 0c             	sub    esp,0xc
c0002b63:	53                   	push   ebx
c0002b64:	e8 cb 32 00 00       	call   c0005e34 <ff_memalloc>
c0002b69:	83 c4 10             	add    esp,0x10
c0002b6c:	85 c0                	test   eax,eax
c0002b6e:	89 c7                	mov    edi,eax
c0002b70:	75 76                	jne    c0002be8 <dir_clear+0xe2>
c0002b72:	d1 eb                	shr    ebx,1
c0002b74:	eb e2                	jmp    c0002b58 <dir_clear+0x52>
c0002b76:	31 db                	xor    ebx,ebx
c0002b78:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002b7c:	39 d8                	cmp    eax,ebx
c0002b7e:	76 53                	jbe    c0002bd3 <dir_clear+0xcd>
c0002b80:	6a 01                	push   0x1
c0002b82:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002b85:	50                   	push   eax
c0002b86:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002b8a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002b8e:	50                   	push   eax
c0002b8f:	e8 27 f4 ff ff       	call   c0001fbb <disk_write>
c0002b94:	83 c4 10             	add    esp,0x10
c0002b97:	85 c0                	test   eax,eax
c0002b99:	75 38                	jne    c0002bd3 <dir_clear+0xcd>
c0002b9b:	43                   	inc    ebx
c0002b9c:	eb da                	jmp    c0002b78 <dir_clear+0x72>
c0002b9e:	52                   	push   edx
c0002b9f:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002ba2:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0002ba6:	50                   	push   eax
c0002ba7:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002bab:	57                   	push   edi
c0002bac:	50                   	push   eax
c0002bad:	e8 09 f4 ff ff       	call   c0001fbb <disk_write>
c0002bb2:	83 c4 10             	add    esp,0x10
c0002bb5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002bb9:	85 c0                	test   eax,eax
c0002bbb:	75 0a                	jne    c0002bc7 <dir_clear+0xc1>
c0002bbd:	01 d3                	add    ebx,edx
c0002bbf:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002bc3:	39 d8                	cmp    eax,ebx
c0002bc5:	77 d7                	ja     c0002b9e <dir_clear+0x98>
c0002bc7:	83 ec 0c             	sub    esp,0xc
c0002bca:	57                   	push   edi
c0002bcb:	e8 7c 32 00 00       	call   c0005e4c <ff_memfree>
c0002bd0:	83 c4 10             	add    esp,0x10
c0002bd3:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002bd7:	39 d8                	cmp    eax,ebx
c0002bd9:	0f 95 c0             	setne  al
c0002bdc:	0f b6 c0             	movzx  eax,al
c0002bdf:	eb 19                	jmp    c0002bfa <dir_clear+0xf4>
c0002be1:	b8 01 00 00 00       	mov    eax,0x1
c0002be6:	eb 12                	jmp    c0002bfa <dir_clear+0xf4>
c0002be8:	89 d9                	mov    ecx,ebx
c0002bea:	31 d2                	xor    edx,edx
c0002bec:	e8 40 f4 ff ff       	call   c0002031 <mem_set>
c0002bf1:	89 da                	mov    edx,ebx
c0002bf3:	31 db                	xor    ebx,ebx
c0002bf5:	c1 ea 09             	shr    edx,0x9
c0002bf8:	eb c5                	jmp    c0002bbf <dir_clear+0xb9>
c0002bfa:	83 c4 1c             	add    esp,0x1c
c0002bfd:	5b                   	pop    ebx
c0002bfe:	5e                   	pop    esi
c0002bff:	5f                   	pop    edi
c0002c00:	5d                   	pop    ebp
c0002c01:	c3                   	ret    

c0002c02 <create_name>:
c0002c02:	55                   	push   ebp
c0002c03:	89 c5                	mov    ebp,eax
c0002c05:	57                   	push   edi
c0002c06:	89 d7                	mov    edi,edx
c0002c08:	56                   	push   esi
c0002c09:	31 f6                	xor    esi,esi
c0002c0b:	53                   	push   ebx
c0002c0c:	83 ec 3c             	sub    esp,0x3c
c0002c0f:	8b 02                	mov    eax,DWORD PTR [edx]
c0002c11:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002c15:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0002c18:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002c1b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002c1f:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0002c23:	e8 4d f4 ff ff       	call   c0002075 <tchar2uni>
c0002c28:	83 f8 ff             	cmp    eax,0xffffffff
c0002c2b:	89 c3                	mov    ebx,eax
c0002c2d:	75 0a                	jne    c0002c39 <create_name+0x37>
c0002c2f:	b8 06 00 00 00       	mov    eax,0x6
c0002c34:	e9 7c 02 00 00       	jmp    c0002eb5 <create_name+0x2b3>
c0002c39:	3d ff ff 00 00       	cmp    eax,0xffff
c0002c3e:	76 0c                	jbe    c0002c4c <create_name+0x4a>
c0002c40:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002c44:	c1 e8 10             	shr    eax,0x10
c0002c47:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0002c4b:	46                   	inc    esi
c0002c4c:	0f b7 d3             	movzx  edx,bx
c0002c4f:	89 d8                	mov    eax,ebx
c0002c51:	83 fa 1f             	cmp    edx,0x1f
c0002c54:	76 30                	jbe    c0002c86 <create_name+0x84>
c0002c56:	83 fa 2f             	cmp    edx,0x2f
c0002c59:	74 2b                	je     c0002c86 <create_name+0x84>
c0002c5b:	83 fa 5c             	cmp    edx,0x5c
c0002c5e:	74 35                	je     c0002c95 <create_name+0x93>
c0002c60:	83 fa 7f             	cmp    edx,0x7f
c0002c63:	77 0e                	ja     c0002c73 <create_name+0x71>
c0002c65:	b8 62 08 02 c0       	mov    eax,0xc0020862
c0002c6a:	e8 ef f3 ff ff       	call   c000205e <chk_chr>
c0002c6f:	85 c0                	test   eax,eax
c0002c71:	75 bc                	jne    c0002c2f <create_name+0x2d>
c0002c73:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0002c79:	77 b4                	ja     c0002c2f <create_name+0x2d>
c0002c7b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002c7f:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002c83:	46                   	inc    esi
c0002c84:	eb 99                	jmp    c0002c1f <create_name+0x1d>
c0002c86:	66 83 f8 1f          	cmp    ax,0x1f
c0002c8a:	b3 04                	mov    bl,0x4
c0002c8c:	76 1a                	jbe    c0002ca8 <create_name+0xa6>
c0002c8e:	eb 05                	jmp    c0002c95 <create_name+0x93>
c0002c90:	40                   	inc    eax
c0002c91:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002c95:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002c99:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0002c9c:	83 fa 2f             	cmp    edx,0x2f
c0002c9f:	74 ef                	je     c0002c90 <create_name+0x8e>
c0002ca1:	83 fa 5c             	cmp    edx,0x5c
c0002ca4:	74 ea                	je     c0002c90 <create_name+0x8e>
c0002ca6:	31 db                	xor    ebx,ebx
c0002ca8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002cac:	89 07                	mov    DWORD PTR [edi],eax
c0002cae:	85 f6                	test   esi,esi
c0002cb0:	74 16                	je     c0002cc8 <create_name+0xc6>
c0002cb2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002cb6:	0f b7 44 70 fe       	movzx  eax,WORD PTR [eax+esi*2-0x2]
c0002cbb:	83 f8 20             	cmp    eax,0x20
c0002cbe:	74 05                	je     c0002cc5 <create_name+0xc3>
c0002cc0:	83 f8 2e             	cmp    eax,0x2e
c0002cc3:	75 03                	jne    c0002cc8 <create_name+0xc6>
c0002cc5:	4e                   	dec    esi
c0002cc6:	eb e6                	jmp    c0002cae <create_name+0xac>
c0002cc8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002ccc:	31 ff                	xor    edi,edi
c0002cce:	85 f6                	test   esi,esi
c0002cd0:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0002cd6:	0f 84 53 ff ff ff    	je     c0002c2f <create_name+0x2d>
c0002cdc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002ce0:	8d 57 01             	lea    edx,[edi+0x1]
c0002ce3:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002ce7:	83 f8 20             	cmp    eax,0x20
c0002cea:	75 04                	jne    c0002cf0 <create_name+0xee>
c0002cec:	89 d7                	mov    edi,edx
c0002cee:	eb ec                	jmp    c0002cdc <create_name+0xda>
c0002cf0:	85 ff                	test   edi,edi
c0002cf2:	75 05                	jne    c0002cf9 <create_name+0xf7>
c0002cf4:	83 f8 2e             	cmp    eax,0x2e
c0002cf7:	75 08                	jne    c0002d01 <create_name+0xff>
c0002cf9:	83 cb 03             	or     ebx,0x3
c0002cfc:	eb 03                	jmp    c0002d01 <create_name+0xff>
c0002cfe:	4e                   	dec    esi
c0002cff:	74 0c                	je     c0002d0d <create_name+0x10b>
c0002d01:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002d05:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0002d0b:	75 f1                	jne    c0002cfe <create_name+0xfc>
c0002d0d:	b9 0b 00 00 00       	mov    ecx,0xb
c0002d12:	ba 20 00 00 00       	mov    edx,0x20
c0002d17:	8d 45 20             	lea    eax,[ebp+0x20]
c0002d1a:	e8 12 f3 ff ff       	call   c0002031 <mem_set>
c0002d1f:	31 c9                	xor    ecx,ecx
c0002d21:	c7 44 24 14 08 00 00 00 	mov    DWORD PTR [esp+0x14],0x8
c0002d29:	c6 44 24 08 00       	mov    BYTE PTR [esp+0x8],0x0
c0002d2e:	8d 47 01             	lea    eax,[edi+0x1]
c0002d31:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002d35:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002d39:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002d3d:	85 c0                	test   eax,eax
c0002d3f:	89 c7                	mov    edi,eax
c0002d41:	0f 84 1d 01 00 00    	je     c0002e64 <create_name+0x262>
c0002d47:	83 f8 20             	cmp    eax,0x20
c0002d4a:	74 0b                	je     c0002d57 <create_name+0x155>
c0002d4c:	83 f8 2e             	cmp    eax,0x2e
c0002d4f:	75 0f                	jne    c0002d60 <create_name+0x15e>
c0002d51:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002d55:	74 09                	je     c0002d60 <create_name+0x15e>
c0002d57:	83 cb 03             	or     ebx,0x3
c0002d5a:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0002d5e:	eb ce                	jmp    c0002d2e <create_name+0x12c>
c0002d60:	3b 4c 24 14          	cmp    ecx,DWORD PTR [esp+0x14]
c0002d64:	73 06                	jae    c0002d6c <create_name+0x16a>
c0002d66:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002d6a:	75 3a                	jne    c0002da6 <create_name+0x1a4>
c0002d6c:	83 7c 24 14 0b       	cmp    DWORD PTR [esp+0x14],0xb
c0002d71:	75 08                	jne    c0002d7b <create_name+0x179>
c0002d73:	83 cb 03             	or     ebx,0x3
c0002d76:	e9 e9 00 00 00       	jmp    c0002e64 <create_name+0x262>
c0002d7b:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002d7f:	74 0d                	je     c0002d8e <create_name+0x18c>
c0002d81:	83 cb 03             	or     ebx,0x3
c0002d84:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002d88:	0f 87 d6 00 00 00    	ja     c0002e64 <create_name+0x262>
c0002d8e:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002d93:	b9 08 00 00 00       	mov    ecx,0x8
c0002d98:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0002d9c:	c7 44 24 14 0b 00 00 00 	mov    DWORD PTR [esp+0x14],0xb
c0002da4:	eb b4                	jmp    c0002d5a <create_name+0x158>
c0002da6:	0f b7 c7             	movzx  eax,di
c0002da9:	83 f8 7f             	cmp    eax,0x7f
c0002dac:	76 66                	jbe    c0002e14 <create_name+0x212>
c0002dae:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002db2:	89 d9                	mov    ecx,ebx
c0002db4:	83 c9 02             	or     ecx,0x2
c0002db7:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002dbb:	52                   	push   edx
c0002dbc:	52                   	push   edx
c0002dbd:	68 b5 01 00 00       	push   0x1b5
c0002dc2:	50                   	push   eax
c0002dc3:	e8 9c 30 00 00       	call   c0005e64 <ff_uni2oem>
c0002dc8:	83 c4 10             	add    esp,0x10
c0002dcb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002dcf:	a8 80                	test   al,0x80
c0002dd1:	89 c7                	mov    edi,eax
c0002dd3:	74 0c                	je     c0002de1 <create_name+0x1df>
c0002dd5:	83 e7 7f             	and    edi,0x7f
c0002dd8:	0f b6 bf 20 09 02 c0 	movzx  edi,BYTE PTR [edi-0x3ffdf6e0]
c0002ddf:	eb 2a                	jmp    c0002e0b <create_name+0x209>
c0002de1:	0f b7 c0             	movzx  eax,ax
c0002de4:	3d ff 00 00 00       	cmp    eax,0xff
c0002de9:	76 20                	jbe    c0002e0b <create_name+0x209>
c0002deb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0002def:	4a                   	dec    edx
c0002df0:	39 ca                	cmp    edx,ecx
c0002df2:	77 0c                	ja     c0002e00 <create_name+0x1fe>
c0002df4:	83 cb 03             	or     ebx,0x3
c0002df7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0002dfb:	e9 5a ff ff ff       	jmp    c0002d5a <create_name+0x158>
c0002e00:	88 64 0d 20          	mov    BYTE PTR [ebp+ecx*1+0x20],ah
c0002e04:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002e08:	41                   	inc    ecx
c0002e09:	eb 4d                	jmp    c0002e58 <create_name+0x256>
c0002e0b:	66 85 ff             	test   di,di
c0002e0e:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002e12:	74 19                	je     c0002e2d <create_name+0x22b>
c0002e14:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002e18:	0f b7 d7             	movzx  edx,di
c0002e1b:	b8 6b 08 02 c0       	mov    eax,0xc002086b
c0002e20:	e8 39 f2 ff ff       	call   c000205e <chk_chr>
c0002e25:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002e29:	85 c0                	test   eax,eax
c0002e2b:	74 0a                	je     c0002e37 <create_name+0x235>
c0002e2d:	83 cb 03             	or     ebx,0x3
c0002e30:	bf 5f 00 00 00       	mov    edi,0x5f
c0002e35:	eb 21                	jmp    c0002e58 <create_name+0x256>
c0002e37:	8d 47 bf             	lea    eax,[edi-0x41]
c0002e3a:	66 83 f8 19          	cmp    ax,0x19
c0002e3e:	77 07                	ja     c0002e47 <create_name+0x245>
c0002e40:	83 4c 24 08 02       	or     DWORD PTR [esp+0x8],0x2
c0002e45:	eb 11                	jmp    c0002e58 <create_name+0x256>
c0002e47:	8d 47 9f             	lea    eax,[edi-0x61]
c0002e4a:	66 83 f8 19          	cmp    ax,0x19
c0002e4e:	77 08                	ja     c0002e58 <create_name+0x256>
c0002e50:	83 4c 24 08 01       	or     DWORD PTR [esp+0x8],0x1
c0002e55:	83 ef 20             	sub    edi,0x20
c0002e58:	89 f8                	mov    eax,edi
c0002e5a:	88 44 0d 20          	mov    BYTE PTR [ebp+ecx*1+0x20],al
c0002e5e:	41                   	inc    ecx
c0002e5f:	e9 f6 fe ff ff       	jmp    c0002d5a <create_name+0x158>
c0002e64:	80 7d 20 e5          	cmp    BYTE PTR [ebp+0x20],0xe5
c0002e68:	75 04                	jne    c0002e6e <create_name+0x26c>
c0002e6a:	c6 45 20 05          	mov    BYTE PTR [ebp+0x20],0x5
c0002e6e:	83 7c 24 14 08       	cmp    DWORD PTR [esp+0x14],0x8
c0002e73:	75 05                	jne    c0002e7a <create_name+0x278>
c0002e75:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002e7a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002e7e:	83 e0 0c             	and    eax,0xc
c0002e81:	83 f8 0c             	cmp    eax,0xc
c0002e84:	74 0c                	je     c0002e92 <create_name+0x290>
c0002e86:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002e8a:	83 e0 03             	and    eax,0x3
c0002e8d:	83 f8 03             	cmp    eax,0x3
c0002e90:	75 05                	jne    c0002e97 <create_name+0x295>
c0002e92:	83 cb 02             	or     ebx,0x2
c0002e95:	eb 19                	jmp    c0002eb0 <create_name+0x2ae>
c0002e97:	f6 c3 02             	test   bl,0x2
c0002e9a:	75 14                	jne    c0002eb0 <create_name+0x2ae>
c0002e9c:	f6 44 24 08 01       	test   BYTE PTR [esp+0x8],0x1
c0002ea1:	74 03                	je     c0002ea6 <create_name+0x2a4>
c0002ea3:	83 cb 10             	or     ebx,0x10
c0002ea6:	f6 44 24 08 04       	test   BYTE PTR [esp+0x8],0x4
c0002eab:	74 03                	je     c0002eb0 <create_name+0x2ae>
c0002ead:	83 cb 08             	or     ebx,0x8
c0002eb0:	88 5d 2b             	mov    BYTE PTR [ebp+0x2b],bl
c0002eb3:	31 c0                	xor    eax,eax
c0002eb5:	83 c4 3c             	add    esp,0x3c
c0002eb8:	5b                   	pop    ebx
c0002eb9:	5e                   	pop    esi
c0002eba:	5f                   	pop    edi
c0002ebb:	5d                   	pop    ebp
c0002ebc:	c3                   	ret    

c0002ebd <cmp_lfn>:
c0002ebd:	55                   	push   ebp
c0002ebe:	57                   	push   edi
c0002ebf:	89 d7                	mov    edi,edx
c0002ec1:	56                   	push   esi
c0002ec2:	53                   	push   ebx
c0002ec3:	83 ec 1c             	sub    esp,0x1c
c0002ec6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002eca:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002ecd:	e8 1e f1 ff ff       	call   c0001ff0 <ld_word>
c0002ed2:	66 85 c0             	test   ax,ax
c0002ed5:	74 07                	je     c0002ede <cmp_lfn+0x21>
c0002ed7:	31 c0                	xor    eax,eax
c0002ed9:	e9 a4 00 00 00       	jmp    c0002f82 <cmp_lfn+0xc5>
c0002ede:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002ee0:	bd 01 00 00 00       	mov    ebp,0x1
c0002ee5:	31 c9                	xor    ecx,ecx
c0002ee7:	83 e3 3f             	and    ebx,0x3f
c0002eea:	4b                   	dec    ebx
c0002eeb:	6b db 0d             	imul   ebx,ebx,0xd
c0002eee:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002ef2:	0f b6 81 a0 09 02 c0 	movzx  eax,BYTE PTR [ecx-0x3ffdf660]
c0002ef9:	01 f8                	add    eax,edi
c0002efb:	e8 f0 f0 ff ff       	call   c0001ff0 <ld_word>
c0002f00:	66 85 ed             	test   bp,bp
c0002f03:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f07:	0f b7 f0             	movzx  esi,ax
c0002f0a:	74 44                	je     c0002f50 <cmp_lfn+0x93>
c0002f0c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002f10:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002f16:	77 bf                	ja     c0002ed7 <cmp_lfn+0x1a>
c0002f18:	83 ec 0c             	sub    esp,0xc
c0002f1b:	0f b7 c6             	movzx  eax,si
c0002f1e:	50                   	push   eax
c0002f1f:	e8 54 30 00 00       	call   c0005f78 <ff_wtoupper>
c0002f24:	89 c5                	mov    ebp,eax
c0002f26:	8d 43 01             	lea    eax,[ebx+0x1]
c0002f29:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002f2d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002f31:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002f35:	89 04 24             	mov    DWORD PTR [esp],eax
c0002f38:	e8 3b 30 00 00       	call   c0005f78 <ff_wtoupper>
c0002f3d:	83 c4 10             	add    esp,0x10
c0002f40:	39 c5                	cmp    ebp,eax
c0002f42:	75 93                	jne    c0002ed7 <cmp_lfn+0x1a>
c0002f44:	89 f5                	mov    ebp,esi
c0002f46:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0002f4a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002f4e:	eb 0c                	jmp    c0002f5c <cmp_lfn+0x9f>
c0002f50:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0002f56:	0f 85 7b ff ff ff    	jne    c0002ed7 <cmp_lfn+0x1a>
c0002f5c:	41                   	inc    ecx
c0002f5d:	83 f9 0d             	cmp    ecx,0xd
c0002f60:	75 8c                	jne    c0002eee <cmp_lfn+0x31>
c0002f62:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002f65:	74 16                	je     c0002f7d <cmp_lfn+0xc0>
c0002f67:	66 85 ed             	test   bp,bp
c0002f6a:	74 11                	je     c0002f7d <cmp_lfn+0xc0>
c0002f6c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002f70:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002f75:	0f 94 c0             	sete   al
c0002f78:	0f b6 c0             	movzx  eax,al
c0002f7b:	eb 05                	jmp    c0002f82 <cmp_lfn+0xc5>
c0002f7d:	b8 01 00 00 00       	mov    eax,0x1
c0002f82:	83 c4 1c             	add    esp,0x1c
c0002f85:	5b                   	pop    ebx
c0002f86:	5e                   	pop    esi
c0002f87:	5f                   	pop    edi
c0002f88:	5d                   	pop    ebp
c0002f89:	c3                   	ret    

c0002f8a <sync_fs>:
c0002f8a:	56                   	push   esi
c0002f8b:	53                   	push   ebx
c0002f8c:	53                   	push   ebx
c0002f8d:	89 c3                	mov    ebx,eax
c0002f8f:	e8 5e f5 ff ff       	call   c00024f2 <sync_window>
c0002f94:	85 c0                	test   eax,eax
c0002f96:	0f 85 9a 00 00 00    	jne    c0003036 <sync_fs+0xac>
c0002f9c:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002f9f:	75 7b                	jne    c000301c <sync_fs+0x92>
c0002fa1:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002fa5:	75 75                	jne    c000301c <sync_fs+0x92>
c0002fa7:	8d 73 34             	lea    esi,[ebx+0x34]
c0002faa:	b9 00 02 00 00       	mov    ecx,0x200
c0002faf:	31 d2                	xor    edx,edx
c0002fb1:	89 f0                	mov    eax,esi
c0002fb3:	e8 79 f0 ff ff       	call   c0002031 <mem_set>
c0002fb8:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002fbe:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002fc3:	e8 4d f0 ff ff       	call   c0002015 <st_word>
c0002fc8:	ba 52 52 61 41       	mov    edx,0x41615252
c0002fcd:	89 f0                	mov    eax,esi
c0002fcf:	e8 45 f0 ff ff       	call   c0002019 <st_dword>
c0002fd4:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002fda:	ba 72 72 41 61       	mov    edx,0x61417272
c0002fdf:	e8 35 f0 ff ff       	call   c0002019 <st_dword>
c0002fe4:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002fe7:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002fed:	e8 27 f0 ff ff       	call   c0002019 <st_dword>
c0002ff2:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002ff5:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002ffb:	e8 19 f0 ff ff       	call   c0002019 <st_dword>
c0003000:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0003003:	6a 01                	push   0x1
c0003005:	40                   	inc    eax
c0003006:	50                   	push   eax
c0003007:	56                   	push   esi
c0003008:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000300b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000300f:	50                   	push   eax
c0003010:	e8 a6 ef ff ff       	call   c0001fbb <disk_write>
c0003015:	83 c4 10             	add    esp,0x10
c0003018:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c000301c:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0003020:	51                   	push   ecx
c0003021:	6a 00                	push   0x0
c0003023:	6a 00                	push   0x0
c0003025:	50                   	push   eax
c0003026:	e8 a6 ef ff ff       	call   c0001fd1 <disk_ioctl>
c000302b:	83 c4 10             	add    esp,0x10
c000302e:	85 c0                	test   eax,eax
c0003030:	0f 95 c0             	setne  al
c0003033:	0f b6 c0             	movzx  eax,al
c0003036:	5a                   	pop    edx
c0003037:	5b                   	pop    ebx
c0003038:	5e                   	pop    esi
c0003039:	c3                   	ret    

c000303a <create_partition>:
c000303a:	55                   	push   ebp
c000303b:	0f b6 c0             	movzx  eax,al
c000303e:	57                   	push   edi
c000303f:	56                   	push   esi
c0003040:	53                   	push   ebx
c0003041:	83 ec 40             	sub    esp,0x40
c0003044:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003048:	8d 44 24 30          	lea    eax,[esp+0x30]
c000304c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0003050:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003054:	50                   	push   eax
c0003055:	6a 01                	push   0x1
c0003057:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000305b:	e8 71 ef ff ff       	call   c0001fd1 <disk_ioctl>
c0003060:	83 c4 10             	add    esp,0x10
c0003063:	85 c0                	test   eax,eax
c0003065:	0f 85 68 01 00 00    	jne    c00031d3 <create_partition+0x199>
c000306b:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c000306f:	b9 05 00 00 00       	mov    ecx,0x5
c0003074:	be 08 00 00 00       	mov    esi,0x8
c0003079:	89 f0                	mov    eax,esi
c000307b:	31 d2                	xor    edx,edx
c000307d:	0f b6 d8             	movzx  ebx,al
c0003080:	89 e8                	mov    eax,ebp
c0003082:	f7 f3                	div    ebx
c0003084:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0003089:	76 0a                	jbe    c0003095 <create_partition+0x5b>
c000308b:	d1 e6                	shl    esi,1
c000308d:	49                   	dec    ecx
c000308e:	75 e9                	jne    c0003079 <create_partition+0x3f>
c0003090:	be ff ff ff ff       	mov    esi,0xffffffff
c0003095:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0003099:	b9 00 02 00 00       	mov    ecx,0x200
c000309e:	31 d2                	xor    edx,edx
c00030a0:	e8 8c ef ff ff       	call   c0002031 <mem_set>
c00030a5:	b9 64 00 00 00       	mov    ecx,0x64
c00030aa:	89 e8                	mov    eax,ebp
c00030ac:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00030b4:	31 d2                	xor    edx,edx
c00030b6:	f7 f1                	div    ecx
c00030b8:	b9 3f 00 00 00       	mov    ecx,0x3f
c00030bd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00030c1:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00030c5:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c00030cb:	89 f0                	mov    eax,esi
c00030cd:	0f b6 c0             	movzx  eax,al
c00030d0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00030d4:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c00030d9:	0f 96 c0             	setbe  al
c00030dc:	31 d2                	xor    edx,edx
c00030de:	85 c9                	test   ecx,ecx
c00030e0:	0f 95 c2             	setne  dl
c00030e3:	85 c2                	test   edx,eax
c00030e5:	0f 84 b7 00 00 00    	je     c00031a2 <create_partition+0x168>
c00030eb:	39 e9                	cmp    ecx,ebp
c00030ed:	0f 83 af 00 00 00    	jae    c00031a2 <create_partition+0x168>
c00030f3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00030f7:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00030fb:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c00030fe:	83 fe 64             	cmp    esi,0x64
c0003101:	77 0b                	ja     c000310e <create_partition+0xd4>
c0003103:	74 07                	je     c000310c <create_partition+0xd2>
c0003105:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c000310a:	eb 02                	jmp    c000310e <create_partition+0xd4>
c000310c:	89 ee                	mov    esi,ebp
c000310e:	89 ca                	mov    edx,ecx
c0003110:	31 c0                	xor    eax,eax
c0003112:	01 f2                	add    edx,esi
c0003114:	0f 92 c0             	setb   al
c0003117:	39 ea                	cmp    edx,ebp
c0003119:	77 04                	ja     c000311f <create_partition+0xe5>
c000311b:	85 c0                	test   eax,eax
c000311d:	74 06                	je     c0003125 <create_partition+0xeb>
c000311f:	89 ee                	mov    esi,ebp
c0003121:	29 ce                	sub    esi,ecx
c0003123:	eb 04                	jmp    c0003129 <create_partition+0xef>
c0003125:	85 f6                	test   esi,esi
c0003127:	74 79                	je     c00031a2 <create_partition+0x168>
c0003129:	89 ca                	mov    edx,ecx
c000312b:	89 d8                	mov    eax,ebx
c000312d:	e8 e7 ee ff ff       	call   c0002019 <st_dword>
c0003132:	8d 43 04             	lea    eax,[ebx+0x4]
c0003135:	89 f2                	mov    edx,esi
c0003137:	e8 dd ee ff ff       	call   c0002019 <st_dword>
c000313c:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0003140:	bf 3f 00 00 00       	mov    edi,0x3f
c0003145:	31 d2                	xor    edx,edx
c0003147:	83 c3 10             	add    ebx,0x10
c000314a:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c000314e:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0003151:	89 c8                	mov    eax,ecx
c0003153:	01 f1                	add    ecx,esi
c0003155:	f7 f7                	div    edi
c0003157:	89 d7                	mov    edi,edx
c0003159:	31 d2                	xor    edx,edx
c000315b:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c000315f:	47                   	inc    edi
c0003160:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0003163:	89 c2                	mov    edx,eax
c0003165:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0003168:	c1 ea 02             	shr    edx,0x2
c000316b:	8d 41 ff             	lea    eax,[ecx-0x1]
c000316e:	83 e2 c0             	and    edx,0xffffffc0
c0003171:	09 fa                	or     edx,edi
c0003173:	bf 3f 00 00 00       	mov    edi,0x3f
c0003178:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c000317b:	31 d2                	xor    edx,edx
c000317d:	f7 f7                	div    edi
c000317f:	89 d6                	mov    esi,edx
c0003181:	31 d2                	xor    edx,edx
c0003183:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0003187:	46                   	inc    esi
c0003188:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c000318b:	89 c7                	mov    edi,eax
c000318d:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0003190:	c1 ef 02             	shr    edi,0x2
c0003193:	83 e7 c0             	and    edi,0xffffffc0
c0003196:	09 fe                	or     esi,edi
c0003198:	89 f2                	mov    edx,esi
c000319a:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c000319d:	e9 32 ff ff ff       	jmp    c00030d4 <create_partition+0x9a>
c00031a2:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00031a6:	ba 55 aa 00 00       	mov    edx,0xaa55
c00031ab:	05 fe 01 00 00       	add    eax,0x1fe
c00031b0:	e8 60 ee ff ff       	call   c0002015 <st_word>
c00031b5:	6a 01                	push   0x1
c00031b7:	6a 00                	push   0x0
c00031b9:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c00031bd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00031c1:	e8 f5 ed ff ff       	call   c0001fbb <disk_write>
c00031c6:	83 c4 10             	add    esp,0x10
c00031c9:	85 c0                	test   eax,eax
c00031cb:	0f 95 c0             	setne  al
c00031ce:	0f b6 c0             	movzx  eax,al
c00031d1:	eb 05                	jmp    c00031d8 <create_partition+0x19e>
c00031d3:	b8 01 00 00 00       	mov    eax,0x1
c00031d8:	83 c4 3c             	add    esp,0x3c
c00031db:	5b                   	pop    ebx
c00031dc:	5e                   	pop    esi
c00031dd:	5f                   	pop    edi
c00031de:	5d                   	pop    ebp
c00031df:	c3                   	ret    

c00031e0 <get_fileinfo>:
c00031e0:	55                   	push   ebp
c00031e1:	57                   	push   edi
c00031e2:	56                   	push   esi
c00031e3:	53                   	push   ebx
c00031e4:	83 ec 1c             	sub    esp,0x1c
c00031e7:	8b 30                	mov    esi,DWORD PTR [eax]
c00031e9:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c00031ed:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c00031f1:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00031f5:	0f 84 de 01 00 00    	je     c00033d9 <get_fileinfo+0x1f9>
c00031fb:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c00031ff:	89 d3                	mov    ebx,edx
c0003201:	89 c6                	mov    esi,eax
c0003203:	74 7d                	je     c0003282 <get_fileinfo+0xa2>
c0003205:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000320d:	31 ff                	xor    edi,edi
c000320f:	66 c7 44 24 06 00 00 	mov    WORD PTR [esp+0x6],0x0
c0003216:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000321a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000321e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003221:	0f b7 04 08          	movzx  eax,WORD PTR [eax+ecx*1]
c0003225:	85 c0                	test   eax,eax
c0003227:	89 c2                	mov    edx,eax
c0003229:	74 44                	je     c000326f <get_fileinfo+0x8f>
c000322b:	0f b7 6c 24 06       	movzx  ebp,WORD PTR [esp+0x6]
c0003230:	85 ed                	test   ebp,ebp
c0003232:	75 0d                	jne    c0003241 <get_fileinfo+0x61>
c0003234:	8d 8a 00 28 00 00    	lea    ecx,[edx+0x2800]
c000323a:	66 81 f9 ff 07       	cmp    cx,0x7ff
c000323f:	76 20                	jbe    c0003261 <get_fileinfo+0x81>
c0003241:	c1 e5 10             	shl    ebp,0x10
c0003244:	b9 ff 00 00 00       	mov    ecx,0xff
c0003249:	29 f9                	sub    ecx,edi
c000324b:	09 e8                	or     eax,ebp
c000324d:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c0003251:	e8 f7 ee ff ff       	call   c000214d <put_utf>
c0003256:	0f b6 c0             	movzx  eax,al
c0003259:	85 c0                	test   eax,eax
c000325b:	74 10                	je     c000326d <get_fileinfo+0x8d>
c000325d:	01 c7                	add    edi,eax
c000325f:	31 d2                	xor    edx,edx
c0003261:	83 44 24 08 02       	add    DWORD PTR [esp+0x8],0x2
c0003266:	66 89 54 24 06       	mov    WORD PTR [esp+0x6],dx
c000326b:	eb a9                	jmp    c0003216 <get_fileinfo+0x36>
c000326d:	31 ff                	xor    edi,edi
c000326f:	66 83 7c 24 06 00    	cmp    WORD PTR [esp+0x6],0x0
c0003275:	b8 00 00 00 00       	mov    eax,0x0
c000327a:	0f 45 f8             	cmovne edi,eax
c000327d:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c0003282:	31 ff                	xor    edi,edi
c0003284:	31 c9                	xor    ecx,ecx
c0003286:	83 f9 0a             	cmp    ecx,0xa
c0003289:	0f 87 ac 00 00 00    	ja     c000333b <get_fileinfo+0x15b>
c000328f:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003292:	8d 69 01             	lea    ebp,[ecx+0x1]
c0003295:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c0003299:	83 f8 20             	cmp    eax,0x20
c000329c:	89 c2                	mov    edx,eax
c000329e:	0f 84 90 00 00 00    	je     c0003334 <get_fileinfo+0x154>
c00032a4:	83 f8 05             	cmp    eax,0x5
c00032a7:	75 05                	jne    c00032ae <get_fileinfo+0xce>
c00032a9:	ba e5 00 00 00       	mov    edx,0xe5
c00032ae:	83 fd 09             	cmp    ebp,0x9
c00032b1:	75 0b                	jne    c00032be <get_fileinfo+0xde>
c00032b3:	83 ff 0b             	cmp    edi,0xb
c00032b6:	77 06                	ja     c00032be <get_fileinfo+0xde>
c00032b8:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c00032bd:	47                   	inc    edi
c00032be:	0f b7 c2             	movzx  eax,dx
c00032c1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00032c5:	e8 a5 ed ff ff       	call   c000206f <dbc_1st>
c00032ca:	85 c0                	test   eax,eax
c00032cc:	74 2f                	je     c00032fd <get_fileinfo+0x11d>
c00032ce:	83 fd 08             	cmp    ebp,0x8
c00032d1:	74 2a                	je     c00032fd <get_fileinfo+0x11d>
c00032d3:	83 fd 0b             	cmp    ebp,0xb
c00032d6:	74 25                	je     c00032fd <get_fileinfo+0x11d>
c00032d8:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00032db:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c00032df:	88 44 24 06          	mov    BYTE PTR [esp+0x6],al
c00032e3:	e8 8a ed ff ff       	call   c0002072 <dbc_2nd>
c00032e8:	85 c0                	test   eax,eax
c00032ea:	74 11                	je     c00032fd <get_fileinfo+0x11d>
c00032ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00032f0:	8d 69 02             	lea    ebp,[ecx+0x2]
c00032f3:	0f b6 54 24 06       	movzx  edx,BYTE PTR [esp+0x6]
c00032f8:	c1 e0 08             	shl    eax,0x8
c00032fb:	09 c2                	or     edx,eax
c00032fd:	50                   	push   eax
c00032fe:	0f b7 d2             	movzx  edx,dx
c0003301:	50                   	push   eax
c0003302:	68 b5 01 00 00       	push   0x1b5
c0003307:	52                   	push   edx
c0003308:	e8 f3 2b 00 00       	call   c0005f00 <ff_oem2uni>
c000330d:	83 c4 10             	add    esp,0x10
c0003310:	0f b7 c0             	movzx  eax,ax
c0003313:	85 c0                	test   eax,eax
c0003315:	75 04                	jne    c000331b <get_fileinfo+0x13b>
c0003317:	31 ff                	xor    edi,edi
c0003319:	eb 20                	jmp    c000333b <get_fileinfo+0x15b>
c000331b:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c000331f:	b9 0c 00 00 00       	mov    ecx,0xc
c0003324:	29 f9                	sub    ecx,edi
c0003326:	e8 22 ee ff ff       	call   c000214d <put_utf>
c000332b:	0f b6 c0             	movzx  eax,al
c000332e:	85 c0                	test   eax,eax
c0003330:	74 e5                	je     c0003317 <get_fileinfo+0x137>
c0003332:	01 c7                	add    edi,eax
c0003334:	89 e9                	mov    ecx,ebp
c0003336:	e9 4b ff ff ff       	jmp    c0003286 <get_fileinfo+0xa6>
c000333b:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c0003340:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c0003344:	75 5f                	jne    c00033a5 <get_fileinfo+0x1c5>
c0003346:	85 ff                	test   edi,edi
c0003348:	75 0b                	jne    c0003355 <get_fileinfo+0x175>
c000334a:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c000334e:	ba 01 00 00 00       	mov    edx,0x1
c0003353:	eb 3e                	jmp    c0003393 <get_fileinfo+0x1b3>
c0003355:	bf 08 00 00 00       	mov    edi,0x8
c000335a:	31 d2                	xor    edx,edx
c000335c:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0003362:	84 c0                	test   al,al
c0003364:	74 2d                	je     c0003393 <get_fileinfo+0x1b3>
c0003366:	66 83 f8 2e          	cmp    ax,0x2e
c000336a:	74 1b                	je     c0003387 <get_fileinfo+0x1a7>
c000336c:	8d 48 bf             	lea    ecx,[eax-0x41]
c000336f:	66 83 f9 19          	cmp    cx,0x19
c0003373:	77 17                	ja     c000338c <get_fileinfo+0x1ac>
c0003375:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003378:	8a 49 0c             	mov    cl,BYTE PTR [ecx+0xc]
c000337b:	21 f9                	and    ecx,edi
c000337d:	80 e1 18             	and    cl,0x18
c0003380:	74 0a                	je     c000338c <get_fileinfo+0x1ac>
c0003382:	83 c0 20             	add    eax,0x20
c0003385:	eb 05                	jmp    c000338c <get_fileinfo+0x1ac>
c0003387:	bf 10 00 00 00       	mov    edi,0x10
c000338c:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c0003390:	42                   	inc    edx
c0003391:	eb c9                	jmp    c000335c <get_fileinfo+0x17c>
c0003393:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c0003398:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000339b:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c000339f:	75 04                	jne    c00033a5 <get_fileinfo+0x1c5>
c00033a1:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c00033a5:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00033a8:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c00033ab:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c00033ae:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00033b1:	83 c0 1c             	add    eax,0x1c
c00033b4:	e8 44 ec ff ff       	call   c0001ffd <ld_dword>
c00033b9:	89 03                	mov    DWORD PTR [ebx],eax
c00033bb:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00033be:	83 c0 16             	add    eax,0x16
c00033c1:	e8 2a ec ff ff       	call   c0001ff0 <ld_word>
c00033c6:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c00033ca:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00033cd:	83 c0 18             	add    eax,0x18
c00033d0:	e8 1b ec ff ff       	call   c0001ff0 <ld_word>
c00033d5:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00033d9:	83 c4 1c             	add    esp,0x1c
c00033dc:	5b                   	pop    ebx
c00033dd:	5e                   	pop    esi
c00033de:	5f                   	pop    edi
c00033df:	5d                   	pop    ebp
c00033e0:	c3                   	ret    

c00033e1 <ld_clust.isra.0>:
c00033e1:	56                   	push   esi
c00033e2:	89 c6                	mov    esi,eax
c00033e4:	53                   	push   ebx
c00033e5:	89 d3                	mov    ebx,edx
c00033e7:	8d 42 1a             	lea    eax,[edx+0x1a]
c00033ea:	e8 01 ec ff ff       	call   c0001ff0 <ld_word>
c00033ef:	0f b7 c8             	movzx  ecx,ax
c00033f2:	89 f0                	mov    eax,esi
c00033f4:	3c 03                	cmp    al,0x3
c00033f6:	75 0d                	jne    c0003405 <ld_clust.isra.0+0x24>
c00033f8:	8d 43 14             	lea    eax,[ebx+0x14]
c00033fb:	e8 f0 eb ff ff       	call   c0001ff0 <ld_word>
c0003400:	c1 e0 10             	shl    eax,0x10
c0003403:	09 c1                	or     ecx,eax
c0003405:	5b                   	pop    ebx
c0003406:	89 c8                	mov    eax,ecx
c0003408:	5e                   	pop    esi
c0003409:	c3                   	ret    

c000340a <st_clust.isra.1>:
c000340a:	56                   	push   esi
c000340b:	89 c6                	mov    esi,eax
c000340d:	53                   	push   ebx
c000340e:	89 d3                	mov    ebx,edx
c0003410:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0003413:	0f b7 d1             	movzx  edx,cx
c0003416:	e8 fa eb ff ff       	call   c0002015 <st_word>
c000341b:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c000341e:	75 0f                	jne    c000342f <st_clust.isra.1+0x25>
c0003420:	8d 43 14             	lea    eax,[ebx+0x14]
c0003423:	5b                   	pop    ebx
c0003424:	c1 e9 10             	shr    ecx,0x10
c0003427:	89 ca                	mov    edx,ecx
c0003429:	5e                   	pop    esi
c000342a:	e9 e6 eb ff ff       	jmp    c0002015 <st_word>
c000342f:	5b                   	pop    ebx
c0003430:	5e                   	pop    esi
c0003431:	c3                   	ret    

c0003432 <get_fat.isra.2>:
c0003432:	83 fa 01             	cmp    edx,0x1
c0003435:	b9 01 00 00 00       	mov    ecx,0x1
c000343a:	0f 86 f4 00 00 00    	jbe    c0003534 <get_fat.isra.2+0x102>
c0003440:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0003443:	0f 83 eb 00 00 00    	jae    c0003534 <get_fat.isra.2+0x102>
c0003449:	55                   	push   ebp
c000344a:	57                   	push   edi
c000344b:	56                   	push   esi
c000344c:	89 c6                	mov    esi,eax
c000344e:	53                   	push   ebx
c000344f:	89 d3                	mov    ebx,edx
c0003451:	83 ec 0c             	sub    esp,0xc
c0003454:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0003457:	83 f8 02             	cmp    eax,0x2
c000345a:	74 79                	je     c00034d5 <get_fat.isra.2+0xa3>
c000345c:	83 f8 03             	cmp    eax,0x3
c000345f:	0f 84 97 00 00 00    	je     c00034fc <get_fat.isra.2+0xca>
c0003465:	48                   	dec    eax
c0003466:	0f 85 be 00 00 00    	jne    c000352a <get_fat.isra.2+0xf8>
c000346c:	89 d7                	mov    edi,edx
c000346e:	89 f0                	mov    eax,esi
c0003470:	d1 ef                	shr    edi,1
c0003472:	01 d7                	add    edi,edx
c0003474:	89 fa                	mov    edx,edi
c0003476:	c1 ea 09             	shr    edx,0x9
c0003479:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000347c:	e8 d4 f0 ff ff       	call   c0002555 <move_window>
c0003481:	85 c0                	test   eax,eax
c0003483:	74 08                	je     c000348d <get_fat.isra.2+0x5b>
c0003485:	83 c9 ff             	or     ecx,0xffffffff
c0003488:	e9 9d 00 00 00       	jmp    c000352a <get_fat.isra.2+0xf8>
c000348d:	8d 6f 01             	lea    ebp,[edi+0x1]
c0003490:	89 f0                	mov    eax,esi
c0003492:	89 ea                	mov    edx,ebp
c0003494:	81 e7 ff 01 00 00    	and    edi,0x1ff
c000349a:	c1 ea 09             	shr    edx,0x9
c000349d:	0f b6 7c 3e 34       	movzx  edi,BYTE PTR [esi+edi*1+0x34]
c00034a2:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00034a5:	e8 ab f0 ff ff       	call   c0002555 <move_window>
c00034aa:	85 c0                	test   eax,eax
c00034ac:	75 d7                	jne    c0003485 <get_fat.isra.2+0x53>
c00034ae:	89 f8                	mov    eax,edi
c00034b0:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00034b6:	0f b6 f8             	movzx  edi,al
c00034b9:	0f b6 44 2e 34       	movzx  eax,BYTE PTR [esi+ebp*1+0x34]
c00034be:	c1 e0 08             	shl    eax,0x8
c00034c1:	09 f8                	or     eax,edi
c00034c3:	89 c1                	mov    ecx,eax
c00034c5:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c00034cb:	80 e3 01             	and    bl,0x1
c00034ce:	74 5a                	je     c000352a <get_fat.isra.2+0xf8>
c00034d0:	c1 e8 04             	shr    eax,0x4
c00034d3:	eb 53                	jmp    c0003528 <get_fat.isra.2+0xf6>
c00034d5:	c1 ea 08             	shr    edx,0x8
c00034d8:	89 f0                	mov    eax,esi
c00034da:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00034dd:	e8 73 f0 ff ff       	call   c0002555 <move_window>
c00034e2:	85 c0                	test   eax,eax
c00034e4:	75 9f                	jne    c0003485 <get_fat.isra.2+0x53>
c00034e6:	01 db                	add    ebx,ebx
c00034e8:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c00034ee:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c00034f2:	e8 f9 ea ff ff       	call   c0001ff0 <ld_word>
c00034f7:	0f b7 c8             	movzx  ecx,ax
c00034fa:	eb 2e                	jmp    c000352a <get_fat.isra.2+0xf8>
c00034fc:	c1 ea 07             	shr    edx,0x7
c00034ff:	89 f0                	mov    eax,esi
c0003501:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0003504:	e8 4c f0 ff ff       	call   c0002555 <move_window>
c0003509:	85 c0                	test   eax,eax
c000350b:	0f 85 74 ff ff ff    	jne    c0003485 <get_fat.isra.2+0x53>
c0003511:	c1 e3 02             	shl    ebx,0x2
c0003514:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c000351a:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c000351e:	e8 da ea ff ff       	call   c0001ffd <ld_dword>
c0003523:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003528:	89 c1                	mov    ecx,eax
c000352a:	83 c4 0c             	add    esp,0xc
c000352d:	89 c8                	mov    eax,ecx
c000352f:	5b                   	pop    ebx
c0003530:	5e                   	pop    esi
c0003531:	5f                   	pop    edi
c0003532:	5d                   	pop    ebp
c0003533:	c3                   	ret    
c0003534:	89 c8                	mov    eax,ecx
c0003536:	c3                   	ret    

c0003537 <dir_sdi>:
c0003537:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c000353d:	0f 87 b6 00 00 00    	ja     c00035f9 <dir_sdi+0xc2>
c0003543:	55                   	push   ebp
c0003544:	57                   	push   edi
c0003545:	56                   	push   esi
c0003546:	53                   	push   ebx
c0003547:	89 d3                	mov    ebx,edx
c0003549:	83 ec 1c             	sub    esp,0x1c
c000354c:	f6 c2 1f             	test   dl,0x1f
c000354f:	74 0a                	je     c000355b <dir_sdi+0x24>
c0003551:	b8 02 00 00 00       	mov    eax,0x2
c0003556:	e9 96 00 00 00       	jmp    c00035f1 <dir_sdi+0xba>
c000355b:	89 c6                	mov    esi,eax
c000355d:	8b 28                	mov    ebp,DWORD PTR [eax]
c000355f:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c0003562:	8b 78 08             	mov    edi,DWORD PTR [eax+0x8]
c0003565:	85 ff                	test   edi,edi
c0003567:	75 21                	jne    c000358a <dir_sdi+0x53>
c0003569:	80 7d 00 02          	cmp    BYTE PTR [ebp+0x0],0x2
c000356d:	76 07                	jbe    c0003576 <dir_sdi+0x3f>
c000356f:	8b 45 28             	mov    eax,DWORD PTR [ebp+0x28]
c0003572:	85 c0                	test   eax,eax
c0003574:	75 12                	jne    c0003588 <dir_sdi+0x51>
c0003576:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000357a:	89 da                	mov    edx,ebx
c000357c:	c1 ea 05             	shr    edx,0x5
c000357f:	39 c2                	cmp    edx,eax
c0003581:	73 ce                	jae    c0003551 <dir_sdi+0x1a>
c0003583:	8b 45 28             	mov    eax,DWORD PTR [ebp+0x28]
c0003586:	eb 3c                	jmp    c00035c4 <dir_sdi+0x8d>
c0003588:	89 c7                	mov    edi,eax
c000358a:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c000358e:	c1 e1 09             	shl    ecx,0x9
c0003591:	39 cb                	cmp    ebx,ecx
c0003593:	72 26                	jb     c00035bb <dir_sdi+0x84>
c0003595:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003599:	8b 06                	mov    eax,DWORD PTR [esi]
c000359b:	89 fa                	mov    edx,edi
c000359d:	e8 90 fe ff ff       	call   c0003432 <get_fat.isra.2>
c00035a2:	83 f8 ff             	cmp    eax,0xffffffff
c00035a5:	89 c7                	mov    edi,eax
c00035a7:	74 43                	je     c00035ec <dir_sdi+0xb5>
c00035a9:	83 f8 01             	cmp    eax,0x1
c00035ac:	76 a3                	jbe    c0003551 <dir_sdi+0x1a>
c00035ae:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c00035b1:	76 9e                	jbe    c0003551 <dir_sdi+0x1a>
c00035b3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00035b7:	29 cb                	sub    ebx,ecx
c00035b9:	eb d6                	jmp    c0003591 <dir_sdi+0x5a>
c00035bb:	89 fa                	mov    edx,edi
c00035bd:	89 e8                	mov    eax,ebp
c00035bf:	e8 82 ec ff ff       	call   c0002246 <clst2sect>
c00035c4:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00035c7:	89 7e 14             	mov    DWORD PTR [esi+0x14],edi
c00035ca:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c00035cd:	85 d2                	test   edx,edx
c00035cf:	74 80                	je     c0003551 <dir_sdi+0x1a>
c00035d1:	89 d8                	mov    eax,ebx
c00035d3:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00035d9:	c1 e8 09             	shr    eax,0x9
c00035dc:	01 d0                	add    eax,edx
c00035de:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00035e1:	8d 44 1d 34          	lea    eax,[ebp+ebx*1+0x34]
c00035e5:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00035e8:	31 c0                	xor    eax,eax
c00035ea:	eb 05                	jmp    c00035f1 <dir_sdi+0xba>
c00035ec:	b8 01 00 00 00       	mov    eax,0x1
c00035f1:	83 c4 1c             	add    esp,0x1c
c00035f4:	5b                   	pop    ebx
c00035f5:	5e                   	pop    esi
c00035f6:	5f                   	pop    edi
c00035f7:	5d                   	pop    ebp
c00035f8:	c3                   	ret    
c00035f9:	b8 02 00 00 00       	mov    eax,0x2
c00035fe:	c3                   	ret    

c00035ff <create_chain>:
c00035ff:	55                   	push   ebp
c0003600:	89 c5                	mov    ebp,eax
c0003602:	57                   	push   edi
c0003603:	89 d7                	mov    edi,edx
c0003605:	56                   	push   esi
c0003606:	53                   	push   ebx
c0003607:	83 ec 1c             	sub    esp,0x1c
c000360a:	85 d2                	test   edx,edx
c000360c:	8b 18                	mov    ebx,DWORD PTR [eax]
c000360e:	75 0e                	jne    c000361e <create_chain+0x1f>
c0003610:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0003613:	85 c9                	test   ecx,ecx
c0003615:	74 32                	je     c0003649 <create_chain+0x4a>
c0003617:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000361a:	77 32                	ja     c000364e <create_chain+0x4f>
c000361c:	eb 2b                	jmp    c0003649 <create_chain+0x4a>
c000361e:	89 d8                	mov    eax,ebx
c0003620:	e8 0d fe ff ff       	call   c0003432 <get_fat.isra.2>
c0003625:	83 f8 01             	cmp    eax,0x1
c0003628:	77 0a                	ja     c0003634 <create_chain+0x35>
c000362a:	b8 01 00 00 00       	mov    eax,0x1
c000362f:	e9 fd 00 00 00       	jmp    c0003731 <create_chain+0x132>
c0003634:	83 f8 ff             	cmp    eax,0xffffffff
c0003637:	0f 84 f1 00 00 00    	je     c000372e <create_chain+0x12f>
c000363d:	39 43 18             	cmp    DWORD PTR [ebx+0x18],eax
c0003640:	89 f9                	mov    ecx,edi
c0003642:	76 0a                	jbe    c000364e <create_chain+0x4f>
c0003644:	e9 e8 00 00 00       	jmp    c0003731 <create_chain+0x132>
c0003649:	b9 01 00 00 00       	mov    ecx,0x1
c000364e:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0003652:	75 07                	jne    c000365b <create_chain+0x5c>
c0003654:	31 c0                	xor    eax,eax
c0003656:	e9 d6 00 00 00       	jmp    c0003731 <create_chain+0x132>
c000365b:	39 f9                	cmp    ecx,edi
c000365d:	75 49                	jne    c00036a8 <create_chain+0xa9>
c000365f:	8d 71 01             	lea    esi,[ecx+0x1]
c0003662:	39 73 18             	cmp    DWORD PTR [ebx+0x18],esi
c0003665:	77 05                	ja     c000366c <create_chain+0x6d>
c0003667:	be 02 00 00 00       	mov    esi,0x2
c000366c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003670:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003673:	89 f2                	mov    edx,esi
c0003675:	e8 b8 fd ff ff       	call   c0003432 <get_fat.isra.2>
c000367a:	83 f8 01             	cmp    eax,0x1
c000367d:	0f 84 ae 00 00 00    	je     c0003731 <create_chain+0x132>
c0003683:	83 f8 ff             	cmp    eax,0xffffffff
c0003686:	0f 84 a5 00 00 00    	je     c0003731 <create_chain+0x132>
c000368c:	85 c0                	test   eax,eax
c000368e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003692:	74 10                	je     c00036a4 <create_chain+0xa5>
c0003694:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003697:	83 f8 01             	cmp    eax,0x1
c000369a:	76 0c                	jbe    c00036a8 <create_chain+0xa9>
c000369c:	39 43 18             	cmp    DWORD PTR [ebx+0x18],eax
c000369f:	0f 47 c8             	cmova  ecx,eax
c00036a2:	eb 04                	jmp    c00036a8 <create_chain+0xa9>
c00036a4:	85 f6                	test   esi,esi
c00036a6:	75 3b                	jne    c00036e3 <create_chain+0xe4>
c00036a8:	89 ce                	mov    esi,ecx
c00036aa:	46                   	inc    esi
c00036ab:	39 73 18             	cmp    DWORD PTR [ebx+0x18],esi
c00036ae:	77 0a                	ja     c00036ba <create_chain+0xbb>
c00036b0:	83 f9 01             	cmp    ecx,0x1
c00036b3:	76 9f                	jbe    c0003654 <create_chain+0x55>
c00036b5:	be 02 00 00 00       	mov    esi,0x2
c00036ba:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00036be:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00036c1:	89 f2                	mov    edx,esi
c00036c3:	e8 6a fd ff ff       	call   c0003432 <get_fat.isra.2>
c00036c8:	85 c0                	test   eax,eax
c00036ca:	74 17                	je     c00036e3 <create_chain+0xe4>
c00036cc:	83 f8 01             	cmp    eax,0x1
c00036cf:	74 60                	je     c0003731 <create_chain+0x132>
c00036d1:	83 f8 ff             	cmp    eax,0xffffffff
c00036d4:	74 5b                	je     c0003731 <create_chain+0x132>
c00036d6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00036da:	39 ce                	cmp    esi,ecx
c00036dc:	75 cc                	jne    c00036aa <create_chain+0xab>
c00036de:	e9 71 ff ff ff       	jmp    c0003654 <create_chain+0x55>
c00036e3:	83 c9 ff             	or     ecx,0xffffffff
c00036e6:	89 f2                	mov    edx,esi
c00036e8:	89 d8                	mov    eax,ebx
c00036ea:	e8 c0 f2 ff ff       	call   c00029af <put_fat>
c00036ef:	85 c0                	test   eax,eax
c00036f1:	75 0f                	jne    c0003702 <create_chain+0x103>
c00036f3:	85 ff                	test   edi,edi
c00036f5:	74 0b                	je     c0003702 <create_chain+0x103>
c00036f7:	89 f1                	mov    ecx,esi
c00036f9:	89 fa                	mov    edx,edi
c00036fb:	89 d8                	mov    eax,ebx
c00036fd:	e8 ad f2 ff ff       	call   c00029af <put_fat>
c0003702:	85 c0                	test   eax,eax
c0003704:	75 21                	jne    c0003727 <create_chain+0x128>
c0003706:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0003709:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000370c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000370f:	8d 57 fe             	lea    edx,[edi-0x2]
c0003712:	39 d0                	cmp    eax,edx
c0003714:	77 04                	ja     c000371a <create_chain+0x11b>
c0003716:	48                   	dec    eax
c0003717:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000371a:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c000371d:	83 c8 01             	or     eax,0x1
c0003720:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c0003723:	89 f0                	mov    eax,esi
c0003725:	eb 0a                	jmp    c0003731 <create_chain+0x132>
c0003727:	48                   	dec    eax
c0003728:	0f 85 fc fe ff ff    	jne    c000362a <create_chain+0x2b>
c000372e:	83 c8 ff             	or     eax,0xffffffff
c0003731:	83 c4 1c             	add    esp,0x1c
c0003734:	5b                   	pop    ebx
c0003735:	5e                   	pop    esi
c0003736:	5f                   	pop    edi
c0003737:	5d                   	pop    ebp
c0003738:	c3                   	ret    

c0003739 <remove_chain>:
c0003739:	55                   	push   ebp
c000373a:	57                   	push   edi
c000373b:	56                   	push   esi
c000373c:	89 d6                	mov    esi,edx
c000373e:	53                   	push   ebx
c000373f:	83 ec 0c             	sub    esp,0xc
c0003742:	83 fa 01             	cmp    edx,0x1
c0003745:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003747:	76 6a                	jbe    c00037b3 <remove_chain+0x7a>
c0003749:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000374c:	76 65                	jbe    c00037b3 <remove_chain+0x7a>
c000374e:	85 c9                	test   ecx,ecx
c0003750:	89 c5                	mov    ebp,eax
c0003752:	89 ca                	mov    edx,ecx
c0003754:	74 0e                	je     c0003764 <remove_chain+0x2b>
c0003756:	83 c9 ff             	or     ecx,0xffffffff
c0003759:	89 d8                	mov    eax,ebx
c000375b:	e8 4f f2 ff ff       	call   c00029af <put_fat>
c0003760:	85 c0                	test   eax,eax
c0003762:	75 5b                	jne    c00037bf <remove_chain+0x86>
c0003764:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003767:	89 f2                	mov    edx,esi
c0003769:	e8 c4 fc ff ff       	call   c0003432 <get_fat.isra.2>
c000376e:	85 c0                	test   eax,eax
c0003770:	89 c7                	mov    edi,eax
c0003772:	75 04                	jne    c0003778 <remove_chain+0x3f>
c0003774:	31 c0                	xor    eax,eax
c0003776:	eb 47                	jmp    c00037bf <remove_chain+0x86>
c0003778:	83 f8 01             	cmp    eax,0x1
c000377b:	74 36                	je     c00037b3 <remove_chain+0x7a>
c000377d:	83 f8 ff             	cmp    eax,0xffffffff
c0003780:	74 38                	je     c00037ba <remove_chain+0x81>
c0003782:	31 c9                	xor    ecx,ecx
c0003784:	89 f2                	mov    edx,esi
c0003786:	89 d8                	mov    eax,ebx
c0003788:	e8 22 f2 ff ff       	call   c00029af <put_fat>
c000378d:	85 c0                	test   eax,eax
c000378f:	75 2e                	jne    c00037bf <remove_chain+0x86>
c0003791:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003794:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003797:	8d 4a fe             	lea    ecx,[edx-0x2]
c000379a:	39 c8                	cmp    eax,ecx
c000379c:	73 0d                	jae    c00037ab <remove_chain+0x72>
c000379e:	40                   	inc    eax
c000379f:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00037a2:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c00037a5:	83 c8 01             	or     eax,0x1
c00037a8:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c00037ab:	39 fa                	cmp    edx,edi
c00037ad:	89 fe                	mov    esi,edi
c00037af:	77 b3                	ja     c0003764 <remove_chain+0x2b>
c00037b1:	eb c1                	jmp    c0003774 <remove_chain+0x3b>
c00037b3:	b8 02 00 00 00       	mov    eax,0x2
c00037b8:	eb 05                	jmp    c00037bf <remove_chain+0x86>
c00037ba:	b8 01 00 00 00       	mov    eax,0x1
c00037bf:	83 c4 0c             	add    esp,0xc
c00037c2:	5b                   	pop    ebx
c00037c3:	5e                   	pop    esi
c00037c4:	5f                   	pop    edi
c00037c5:	5d                   	pop    ebp
c00037c6:	c3                   	ret    

c00037c7 <dir_next>:
c00037c7:	55                   	push   ebp
c00037c8:	57                   	push   edi
c00037c9:	56                   	push   esi
c00037ca:	53                   	push   ebx
c00037cb:	83 ec 1c             	sub    esp,0x1c
c00037ce:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00037d1:	8b 28                	mov    ebp,DWORD PTR [eax]
c00037d3:	83 c7 20             	add    edi,0x20
c00037d6:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00037dc:	76 07                	jbe    c00037e5 <dir_next+0x1e>
c00037de:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00037e5:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c00037e8:	b9 04 00 00 00       	mov    ecx,0x4
c00037ed:	85 f6                	test   esi,esi
c00037ef:	0f 84 cd 00 00 00    	je     c00038c2 <dir_next+0xfb>
c00037f5:	89 c3                	mov    ebx,eax
c00037f7:	89 f8                	mov    eax,edi
c00037f9:	25 ff 01 00 00       	and    eax,0x1ff
c00037fe:	89 d1                	mov    ecx,edx
c0003800:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003804:	0f 85 a8 00 00 00    	jne    c00038b2 <dir_next+0xeb>
c000380a:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000380d:	46                   	inc    esi
c000380e:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c0003811:	85 d2                	test   edx,edx
c0003813:	75 22                	jne    c0003837 <dir_next+0x70>
c0003815:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003819:	89 fa                	mov    edx,edi
c000381b:	c1 ea 05             	shr    edx,0x5
c000381e:	39 c2                	cmp    edx,eax
c0003820:	0f 82 8c 00 00 00    	jb     c00038b2 <dir_next+0xeb>
c0003826:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000382d:	b9 04 00 00 00       	mov    ecx,0x4
c0003832:	e9 8b 00 00 00       	jmp    c00038c2 <dir_next+0xfb>
c0003837:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000383b:	89 fe                	mov    esi,edi
c000383d:	c1 ee 09             	shr    esi,0x9
c0003840:	48                   	dec    eax
c0003841:	85 f0                	test   eax,esi
c0003843:	75 6d                	jne    c00038b2 <dir_next+0xeb>
c0003845:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003849:	89 e8                	mov    eax,ebp
c000384b:	e8 e2 fb ff ff       	call   c0003432 <get_fat.isra.2>
c0003850:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003854:	83 f8 01             	cmp    eax,0x1
c0003857:	89 c6                	mov    esi,eax
c0003859:	77 07                	ja     c0003862 <dir_next+0x9b>
c000385b:	b9 02 00 00 00       	mov    ecx,0x2
c0003860:	eb 60                	jmp    c00038c2 <dir_next+0xfb>
c0003862:	83 f8 ff             	cmp    eax,0xffffffff
c0003865:	75 07                	jne    c000386e <dir_next+0xa7>
c0003867:	b9 01 00 00 00       	mov    ecx,0x1
c000386c:	eb 54                	jmp    c00038c2 <dir_next+0xfb>
c000386e:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003871:	77 30                	ja     c00038a3 <dir_next+0xdc>
c0003873:	85 c9                	test   ecx,ecx
c0003875:	74 af                	je     c0003826 <dir_next+0x5f>
c0003877:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000387a:	89 d8                	mov    eax,ebx
c000387c:	e8 7e fd ff ff       	call   c00035ff <create_chain>
c0003881:	b9 07 00 00 00       	mov    ecx,0x7
c0003886:	85 c0                	test   eax,eax
c0003888:	89 c6                	mov    esi,eax
c000388a:	74 36                	je     c00038c2 <dir_next+0xfb>
c000388c:	83 f8 01             	cmp    eax,0x1
c000388f:	74 ca                	je     c000385b <dir_next+0x94>
c0003891:	83 f8 ff             	cmp    eax,0xffffffff
c0003894:	74 d1                	je     c0003867 <dir_next+0xa0>
c0003896:	89 c2                	mov    edx,eax
c0003898:	89 e8                	mov    eax,ebp
c000389a:	e8 67 f2 ff ff       	call   c0002b06 <dir_clear>
c000389f:	85 c0                	test   eax,eax
c00038a1:	75 c4                	jne    c0003867 <dir_next+0xa0>
c00038a3:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c00038a6:	89 f2                	mov    edx,esi
c00038a8:	89 e8                	mov    eax,ebp
c00038aa:	e8 97 e9 ff ff       	call   c0002246 <clst2sect>
c00038af:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00038b2:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c00038b5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00038b9:	31 c9                	xor    ecx,ecx
c00038bb:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c00038bf:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00038c2:	83 c4 1c             	add    esp,0x1c
c00038c5:	89 c8                	mov    eax,ecx
c00038c7:	5b                   	pop    ebx
c00038c8:	5e                   	pop    esi
c00038c9:	5f                   	pop    edi
c00038ca:	5d                   	pop    ebp
c00038cb:	c3                   	ret    

c00038cc <dir_alloc>:
c00038cc:	55                   	push   ebp
c00038cd:	89 c5                	mov    ebp,eax
c00038cf:	57                   	push   edi
c00038d0:	89 d7                	mov    edi,edx
c00038d2:	56                   	push   esi
c00038d3:	31 d2                	xor    edx,edx
c00038d5:	53                   	push   ebx
c00038d6:	83 ec 0c             	sub    esp,0xc
c00038d9:	8b 30                	mov    esi,DWORD PTR [eax]
c00038db:	e8 57 fc ff ff       	call   c0003537 <dir_sdi>
c00038e0:	85 c0                	test   eax,eax
c00038e2:	75 3b                	jne    c000391f <dir_alloc+0x53>
c00038e4:	31 db                	xor    ebx,ebx
c00038e6:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00038e9:	89 f0                	mov    eax,esi
c00038eb:	e8 65 ec ff ff       	call   c0002555 <move_window>
c00038f0:	85 c0                	test   eax,eax
c00038f2:	75 2b                	jne    c000391f <dir_alloc+0x53>
c00038f4:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c00038f7:	0f b6 12             	movzx  edx,BYTE PTR [edx]
c00038fa:	81 fa e5 00 00 00    	cmp    edx,0xe5
c0003900:	74 04                	je     c0003906 <dir_alloc+0x3a>
c0003902:	85 d2                	test   edx,edx
c0003904:	75 07                	jne    c000390d <dir_alloc+0x41>
c0003906:	43                   	inc    ebx
c0003907:	39 fb                	cmp    ebx,edi
c0003909:	75 04                	jne    c000390f <dir_alloc+0x43>
c000390b:	eb 1c                	jmp    c0003929 <dir_alloc+0x5d>
c000390d:	31 db                	xor    ebx,ebx
c000390f:	ba 01 00 00 00       	mov    edx,0x1
c0003914:	89 e8                	mov    eax,ebp
c0003916:	e8 ac fe ff ff       	call   c00037c7 <dir_next>
c000391b:	85 c0                	test   eax,eax
c000391d:	74 c7                	je     c00038e6 <dir_alloc+0x1a>
c000391f:	83 f8 04             	cmp    eax,0x4
c0003922:	75 05                	jne    c0003929 <dir_alloc+0x5d>
c0003924:	b8 07 00 00 00       	mov    eax,0x7
c0003929:	83 c4 0c             	add    esp,0xc
c000392c:	5b                   	pop    ebx
c000392d:	5e                   	pop    esi
c000392e:	5f                   	pop    edi
c000392f:	5d                   	pop    ebp
c0003930:	c3                   	ret    

c0003931 <dir_read>:
c0003931:	55                   	push   ebp
c0003932:	57                   	push   edi
c0003933:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003938:	56                   	push   esi
c0003939:	be 04 00 00 00       	mov    esi,0x4
c000393e:	53                   	push   ebx
c000393f:	89 c3                	mov    ebx,eax
c0003941:	83 ec 1c             	sub    esp,0x1c
c0003944:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003948:	8b 28                	mov    ebp,DWORD PTR [eax]
c000394a:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c000394f:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003952:	85 d2                	test   edx,edx
c0003954:	0f 84 e3 00 00 00    	je     c0003a3d <dir_read+0x10c>
c000395a:	89 e8                	mov    eax,ebp
c000395c:	e8 f4 eb ff ff       	call   c0002555 <move_window>
c0003961:	85 c0                	test   eax,eax
c0003963:	89 c6                	mov    esi,eax
c0003965:	0f 85 dd 00 00 00    	jne    c0003a48 <dir_read+0x117>
c000396b:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000396e:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0003971:	88 04 24             	mov    BYTE PTR [esp],al
c0003974:	85 c0                	test   eax,eax
c0003976:	0f 84 c7 00 00 00    	je     c0003a43 <dir_read+0x112>
c000397c:	8a 4a 0b             	mov    cl,BYTE PTR [edx+0xb]
c000397f:	83 e1 3f             	and    ecx,0x3f
c0003982:	3d e5 00 00 00       	cmp    eax,0xe5
c0003987:	88 4b 06             	mov    BYTE PTR [ebx+0x6],cl
c000398a:	0f 84 93 00 00 00    	je     c0003a23 <dir_read+0xf2>
c0003990:	83 f8 2e             	cmp    eax,0x2e
c0003993:	0f 84 8a 00 00 00    	je     c0003a23 <dir_read+0xf2>
c0003999:	0f b6 c9             	movzx  ecx,cl
c000399c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00039a0:	83 e1 df             	and    ecx,0xffffffdf
c00039a3:	83 f9 08             	cmp    ecx,0x8
c00039a6:	0f 94 c1             	sete   cl
c00039a9:	0f b6 c9             	movzx  ecx,cl
c00039ac:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00039b0:	75 71                	jne    c0003a23 <dir_read+0xf2>
c00039b2:	83 7c 24 08 0f       	cmp    DWORD PTR [esp+0x8],0xf
c00039b7:	75 4a                	jne    c0003a03 <dir_read+0xd2>
c00039b9:	f6 04 24 40          	test   BYTE PTR [esp],0x40
c00039bd:	74 16                	je     c00039d5 <dir_read+0xa4>
c00039bf:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00039c2:	81 24 24 bf 00 00 00 	and    DWORD PTR [esp],0xbf
c00039c9:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00039cd:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00039d0:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00039d3:	eb 0e                	jmp    c00039e3 <dir_read+0xb2>
c00039d5:	89 f9                	mov    ecx,edi
c00039d7:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039dc:	0f b6 c9             	movzx  ecx,cl
c00039df:	39 c1                	cmp    ecx,eax
c00039e1:	75 45                	jne    c0003a28 <dir_read+0xf7>
c00039e3:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00039e7:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039ec:	3a 42 0d             	cmp    al,BYTE PTR [edx+0xd]
c00039ef:	75 37                	jne    c0003a28 <dir_read+0xf7>
c00039f1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00039f4:	e8 6a e8 ff ff       	call   c0002263 <pick_lfn>
c00039f9:	85 c0                	test   eax,eax
c00039fb:	74 2b                	je     c0003a28 <dir_read+0xf7>
c00039fd:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0003a00:	4f                   	dec    edi
c0003a01:	eb 25                	jmp    c0003a28 <dir_read+0xf7>
c0003a03:	89 f8                	mov    eax,edi
c0003a05:	84 c0                	test   al,al
c0003a07:	75 11                	jne    c0003a1a <dir_read+0xe9>
c0003a09:	89 d0                	mov    eax,edx
c0003a0b:	e8 30 ea ff ff       	call   c0002440 <sum_sfn>
c0003a10:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c0003a14:	75 04                	jne    c0003a1a <dir_read+0xe9>
c0003a16:	31 f6                	xor    esi,esi
c0003a18:	eb 35                	jmp    c0003a4f <dir_read+0x11e>
c0003a1a:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003a21:	eb 2c                	jmp    c0003a4f <dir_read+0x11e>
c0003a23:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003a28:	31 d2                	xor    edx,edx
c0003a2a:	89 d8                	mov    eax,ebx
c0003a2c:	e8 96 fd ff ff       	call   c00037c7 <dir_next>
c0003a31:	85 c0                	test   eax,eax
c0003a33:	89 c6                	mov    esi,eax
c0003a35:	0f 84 14 ff ff ff    	je     c000394f <dir_read+0x1e>
c0003a3b:	eb 0b                	jmp    c0003a48 <dir_read+0x117>
c0003a3d:	85 f6                	test   esi,esi
c0003a3f:	74 d5                	je     c0003a16 <dir_read+0xe5>
c0003a41:	eb 05                	jmp    c0003a48 <dir_read+0x117>
c0003a43:	be 04 00 00 00       	mov    esi,0x4
c0003a48:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003a4f:	83 c4 1c             	add    esp,0x1c
c0003a52:	89 f0                	mov    eax,esi
c0003a54:	5b                   	pop    ebx
c0003a55:	5e                   	pop    esi
c0003a56:	5f                   	pop    edi
c0003a57:	5d                   	pop    ebp
c0003a58:	c3                   	ret    

c0003a59 <dir_remove>:
c0003a59:	57                   	push   edi
c0003a5a:	56                   	push   esi
c0003a5b:	53                   	push   ebx
c0003a5c:	89 c3                	mov    ebx,eax
c0003a5e:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003a61:	8b 30                	mov    esi,DWORD PTR [eax]
c0003a63:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003a66:	83 fa ff             	cmp    edx,0xffffffff
c0003a69:	74 09                	je     c0003a74 <dir_remove+0x1b>
c0003a6b:	e8 c7 fa ff ff       	call   c0003537 <dir_sdi>
c0003a70:	85 c0                	test   eax,eax
c0003a72:	75 34                	jne    c0003aa8 <dir_remove+0x4f>
c0003a74:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a77:	89 f0                	mov    eax,esi
c0003a79:	e8 d7 ea ff ff       	call   c0002555 <move_window>
c0003a7e:	85 c0                	test   eax,eax
c0003a80:	75 1c                	jne    c0003a9e <dir_remove+0x45>
c0003a82:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003a85:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003a88:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003a8c:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c0003a8f:	73 17                	jae    c0003aa8 <dir_remove+0x4f>
c0003a91:	31 d2                	xor    edx,edx
c0003a93:	89 d8                	mov    eax,ebx
c0003a95:	e8 2d fd ff ff       	call   c00037c7 <dir_next>
c0003a9a:	85 c0                	test   eax,eax
c0003a9c:	74 d6                	je     c0003a74 <dir_remove+0x1b>
c0003a9e:	83 f8 04             	cmp    eax,0x4
c0003aa1:	75 05                	jne    c0003aa8 <dir_remove+0x4f>
c0003aa3:	b8 02 00 00 00       	mov    eax,0x2
c0003aa8:	5b                   	pop    ebx
c0003aa9:	5e                   	pop    esi
c0003aaa:	5f                   	pop    edi
c0003aab:	c3                   	ret    

c0003aac <dir_find>:
c0003aac:	55                   	push   ebp
c0003aad:	31 d2                	xor    edx,edx
c0003aaf:	57                   	push   edi
c0003ab0:	56                   	push   esi
c0003ab1:	53                   	push   ebx
c0003ab2:	89 c3                	mov    ebx,eax
c0003ab4:	83 ec 1c             	sub    esp,0x1c
c0003ab7:	8b 00                	mov    eax,DWORD PTR [eax]
c0003ab9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003abd:	89 d8                	mov    eax,ebx
c0003abf:	e8 73 fa ff ff       	call   c0003537 <dir_sdi>
c0003ac4:	85 c0                	test   eax,eax
c0003ac6:	89 c6                	mov    esi,eax
c0003ac8:	0f 85 22 01 00 00    	jne    c0003bf0 <dir_find+0x144>
c0003ace:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003ad5:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003ada:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003adf:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003ae2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003ae6:	e8 6a ea ff ff       	call   c0002555 <move_window>
c0003aeb:	85 c0                	test   eax,eax
c0003aed:	89 c6                	mov    esi,eax
c0003aef:	0f 85 fb 00 00 00    	jne    c0003bf0 <dir_find+0x144>
c0003af5:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c0003af8:	0f b6 17             	movzx  edx,BYTE PTR [edi]
c0003afb:	85 d2                	test   edx,edx
c0003afd:	89 d1                	mov    ecx,edx
c0003aff:	0f 84 e6 00 00 00    	je     c0003beb <dir_find+0x13f>
c0003b05:	8a 47 0b             	mov    al,BYTE PTR [edi+0xb]
c0003b08:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003b0c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003b10:	83 e0 3f             	and    eax,0x3f
c0003b13:	81 fa e5 00 00 00    	cmp    edx,0xe5
c0003b19:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003b1c:	0f 84 a8 00 00 00    	je     c0003bca <dir_find+0x11e>
c0003b22:	f6 44 24 08 08       	test   BYTE PTR [esp+0x8],0x8
c0003b27:	0f b6 c0             	movzx  eax,al
c0003b2a:	74 0b                	je     c0003b37 <dir_find+0x8b>
c0003b2c:	83 f8 0f             	cmp    eax,0xf
c0003b2f:	0f 85 95 00 00 00    	jne    c0003bca <dir_find+0x11e>
c0003b35:	eb 05                	jmp    c0003b3c <dir_find+0x90>
c0003b37:	83 f8 0f             	cmp    eax,0xf
c0003b3a:	75 62                	jne    c0003b9e <dir_find+0xf2>
c0003b3c:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c0003b40:	0f 85 90 00 00 00    	jne    c0003bd6 <dir_find+0x12a>
c0003b46:	f6 c1 40             	test   cl,0x40
c0003b49:	74 15                	je     c0003b60 <dir_find+0xb4>
c0003b4b:	8a 47 0d             	mov    al,BYTE PTR [edi+0xd]
c0003b4e:	81 e1 bf 00 00 00    	and    ecx,0xbf
c0003b54:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003b58:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003b5b:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003b5e:	eb 11                	jmp    c0003b71 <dir_find+0xc5>
c0003b60:	89 e8                	mov    eax,ebp
c0003b62:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003b67:	0f b6 d0             	movzx  edx,al
c0003b6a:	0f b6 c1             	movzx  eax,cl
c0003b6d:	39 c2                	cmp    edx,eax
c0003b6f:	75 65                	jne    c0003bd6 <dir_find+0x12a>
c0003b71:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003b75:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003b7a:	3a 47 0d             	cmp    al,BYTE PTR [edi+0xd]
c0003b7d:	75 57                	jne    c0003bd6 <dir_find+0x12a>
c0003b7f:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003b83:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b87:	89 fa                	mov    edx,edi
c0003b89:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003b8c:	e8 2c f3 ff ff       	call   c0002ebd <cmp_lfn>
c0003b91:	85 c0                	test   eax,eax
c0003b93:	74 41                	je     c0003bd6 <dir_find+0x12a>
c0003b95:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003b99:	8d 69 ff             	lea    ebp,[ecx-0x1]
c0003b9c:	eb 38                	jmp    c0003bd6 <dir_find+0x12a>
c0003b9e:	89 e8                	mov    eax,ebp
c0003ba0:	84 c0                	test   al,al
c0003ba2:	75 0d                	jne    c0003bb1 <dir_find+0x105>
c0003ba4:	89 f8                	mov    eax,edi
c0003ba6:	e8 95 e8 ff ff       	call   c0002440 <sum_sfn>
c0003bab:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c0003baf:	74 3f                	je     c0003bf0 <dir_find+0x144>
c0003bb1:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c0003bb5:	75 13                	jne    c0003bca <dir_find+0x11e>
c0003bb7:	8d 53 20             	lea    edx,[ebx+0x20]
c0003bba:	b9 0b 00 00 00       	mov    ecx,0xb
c0003bbf:	89 f8                	mov    eax,edi
c0003bc1:	e8 75 e4 ff ff       	call   c000203b <mem_cmp>
c0003bc6:	85 c0                	test   eax,eax
c0003bc8:	74 26                	je     c0003bf0 <dir_find+0x144>
c0003bca:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003bd1:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003bd6:	31 d2                	xor    edx,edx
c0003bd8:	89 d8                	mov    eax,ebx
c0003bda:	e8 e8 fb ff ff       	call   c00037c7 <dir_next>
c0003bdf:	85 c0                	test   eax,eax
c0003be1:	89 c6                	mov    esi,eax
c0003be3:	0f 84 f6 fe ff ff    	je     c0003adf <dir_find+0x33>
c0003be9:	eb 05                	jmp    c0003bf0 <dir_find+0x144>
c0003beb:	be 04 00 00 00       	mov    esi,0x4
c0003bf0:	83 c4 1c             	add    esp,0x1c
c0003bf3:	89 f0                	mov    eax,esi
c0003bf5:	5b                   	pop    ebx
c0003bf6:	5e                   	pop    esi
c0003bf7:	5f                   	pop    edi
c0003bf8:	5d                   	pop    ebp
c0003bf9:	c3                   	ret    

c0003bfa <follow_path>:
c0003bfa:	56                   	push   esi
c0003bfb:	53                   	push   ebx
c0003bfc:	89 c3                	mov    ebx,eax
c0003bfe:	83 ec 14             	sub    esp,0x14
c0003c01:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003c05:	8b 30                	mov    esi,DWORD PTR [eax]
c0003c07:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003c0b:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0003c0e:	83 fa 2f             	cmp    edx,0x2f
c0003c11:	75 07                	jne    c0003c1a <follow_path+0x20>
c0003c13:	40                   	inc    eax
c0003c14:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003c18:	eb ed                	jmp    c0003c07 <follow_path+0xd>
c0003c1a:	83 fa 5c             	cmp    edx,0x5c
c0003c1d:	74 f4                	je     c0003c13 <follow_path+0x19>
c0003c1f:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0003c26:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0003c29:	77 3e                	ja     c0003c69 <follow_path+0x6f>
c0003c2b:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c0003c2f:	31 d2                	xor    edx,edx
c0003c31:	89 d8                	mov    eax,ebx
c0003c33:	e8 ff f8 ff ff       	call   c0003537 <dir_sdi>
c0003c38:	eb 57                	jmp    c0003c91 <follow_path+0x97>
c0003c3a:	89 d8                	mov    eax,ebx
c0003c3c:	e8 6b fe ff ff       	call   c0003aac <dir_find>
c0003c41:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c0003c44:	85 c0                	test   eax,eax
c0003c46:	75 32                	jne    c0003c7a <follow_path+0x80>
c0003c48:	80 e2 04             	and    dl,0x4
c0003c4b:	75 44                	jne    c0003c91 <follow_path+0x97>
c0003c4d:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003c51:	74 39                	je     c0003c8c <follow_path+0x92>
c0003c53:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003c56:	25 ff 01 00 00       	and    eax,0x1ff
c0003c5b:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003c5f:	8a 06                	mov    al,BYTE PTR [esi]
c0003c61:	e8 7b f7 ff ff       	call   c00033e1 <ld_clust.isra.0>
c0003c66:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003c69:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003c6d:	89 d8                	mov    eax,ebx
c0003c6f:	e8 8e ef ff ff       	call   c0002c02 <create_name>
c0003c74:	85 c0                	test   eax,eax
c0003c76:	74 c2                	je     c0003c3a <follow_path+0x40>
c0003c78:	eb 17                	jmp    c0003c91 <follow_path+0x97>
c0003c7a:	83 f8 04             	cmp    eax,0x4
c0003c7d:	75 12                	jne    c0003c91 <follow_path+0x97>
c0003c7f:	80 e2 04             	and    dl,0x4
c0003c82:	ba 05 00 00 00       	mov    edx,0x5
c0003c87:	0f 44 c2             	cmove  eax,edx
c0003c8a:	eb 05                	jmp    c0003c91 <follow_path+0x97>
c0003c8c:	b8 05 00 00 00       	mov    eax,0x5
c0003c91:	83 c4 14             	add    esp,0x14
c0003c94:	5b                   	pop    ebx
c0003c95:	5e                   	pop    esi
c0003c96:	c3                   	ret    

c0003c97 <dir_register>:
c0003c97:	55                   	push   ebp
c0003c98:	57                   	push   edi
c0003c99:	56                   	push   esi
c0003c9a:	be 06 00 00 00       	mov    esi,0x6
c0003c9f:	53                   	push   ebx
c0003ca0:	83 ec 2c             	sub    esp,0x2c
c0003ca3:	8a 50 2b             	mov    dl,BYTE PTR [eax+0x2b]
c0003ca6:	80 e2 a0             	and    dl,0xa0
c0003ca9:	0f 85 66 01 00 00    	jne    c0003e15 <dir_register+0x17e>
c0003caf:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003cb7:	8b 38                	mov    edi,DWORD PTR [eax]
c0003cb9:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003cbc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003cc0:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003cc5:	74 06                	je     c0003ccd <dir_register+0x36>
c0003cc7:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003ccb:	eb ef                	jmp    c0003cbc <dir_register+0x25>
c0003ccd:	89 c3                	mov    ebx,eax
c0003ccf:	b9 0c 00 00 00       	mov    ecx,0xc
c0003cd4:	8d 40 20             	lea    eax,[eax+0x20]
c0003cd7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003cdb:	89 c2                	mov    edx,eax
c0003cdd:	8d 44 24 14          	lea    eax,[esp+0x14]
c0003ce1:	e8 36 e3 ff ff       	call   c000201c <mem_cpy>
c0003ce6:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003ceb:	74 48                	je     c0003d35 <dir_register+0x9e>
c0003ced:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c0003cf1:	bd 01 00 00 00       	mov    ebp,0x1
c0003cf6:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003cf9:	55                   	push   ebp
c0003cfa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003cfe:	8d 54 24 18          	lea    edx,[esp+0x18]
c0003d02:	e8 77 e6 ff ff       	call   c000237e <gen_numname>
c0003d07:	58                   	pop    eax
c0003d08:	89 d8                	mov    eax,ebx
c0003d0a:	e8 9d fd ff ff       	call   c0003aac <dir_find>
c0003d0f:	85 c0                	test   eax,eax
c0003d11:	89 c6                	mov    esi,eax
c0003d13:	75 10                	jne    c0003d25 <dir_register+0x8e>
c0003d15:	45                   	inc    ebp
c0003d16:	83 fd 64             	cmp    ebp,0x64
c0003d19:	75 db                	jne    c0003cf6 <dir_register+0x5f>
c0003d1b:	be 07 00 00 00       	mov    esi,0x7
c0003d20:	e9 f0 00 00 00       	jmp    c0003e15 <dir_register+0x17e>
c0003d25:	83 f8 04             	cmp    eax,0x4
c0003d28:	0f 85 e7 00 00 00    	jne    c0003e15 <dir_register+0x17e>
c0003d2e:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0003d32:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c0003d35:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0003d3a:	bd 01 00 00 00       	mov    ebp,0x1
c0003d3f:	74 13                	je     c0003d54 <dir_register+0xbd>
c0003d41:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003d45:	b9 0d 00 00 00       	mov    ecx,0xd
c0003d4a:	31 d2                	xor    edx,edx
c0003d4c:	83 c0 0c             	add    eax,0xc
c0003d4f:	f7 f1                	div    ecx
c0003d51:	8d 68 01             	lea    ebp,[eax+0x1]
c0003d54:	89 ea                	mov    edx,ebp
c0003d56:	89 d8                	mov    eax,ebx
c0003d58:	e8 6f fb ff ff       	call   c00038cc <dir_alloc>
c0003d5d:	85 c0                	test   eax,eax
c0003d5f:	89 c6                	mov    esi,eax
c0003d61:	0f 85 ae 00 00 00    	jne    c0003e15 <dir_register+0x17e>
c0003d67:	4d                   	dec    ebp
c0003d68:	74 6b                	je     c0003dd5 <dir_register+0x13e>
c0003d6a:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003d6d:	89 e8                	mov    eax,ebp
c0003d6f:	c1 e0 05             	shl    eax,0x5
c0003d72:	29 c2                	sub    edx,eax
c0003d74:	89 d8                	mov    eax,ebx
c0003d76:	e8 bc f7 ff ff       	call   c0003537 <dir_sdi>
c0003d7b:	85 c0                	test   eax,eax
c0003d7d:	89 c6                	mov    esi,eax
c0003d7f:	0f 85 90 00 00 00    	jne    c0003e15 <dir_register+0x17e>
c0003d85:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003d89:	e8 b2 e6 ff ff       	call   c0002440 <sum_sfn>
c0003d8e:	0f b6 c0             	movzx  eax,al
c0003d91:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003d95:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003d98:	89 f8                	mov    eax,edi
c0003d9a:	e8 b6 e7 ff ff       	call   c0002555 <move_window>
c0003d9f:	85 c0                	test   eax,eax
c0003da1:	89 c6                	mov    esi,eax
c0003da3:	75 70                	jne    c0003e15 <dir_register+0x17e>
c0003da5:	83 ec 0c             	sub    esp,0xc
c0003da8:	89 e8                	mov    eax,ebp
c0003daa:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003dad:	0f b6 c8             	movzx  ecx,al
c0003db0:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003db3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0003db7:	e8 27 e5 ff ff       	call   c00022e3 <put_lfn>
c0003dbc:	31 d2                	xor    edx,edx
c0003dbe:	89 d8                	mov    eax,ebx
c0003dc0:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003dc4:	e8 fe f9 ff ff       	call   c00037c7 <dir_next>
c0003dc9:	83 c4 10             	add    esp,0x10
c0003dcc:	85 c0                	test   eax,eax
c0003dce:	89 c6                	mov    esi,eax
c0003dd0:	75 43                	jne    c0003e15 <dir_register+0x17e>
c0003dd2:	4d                   	dec    ebp
c0003dd3:	75 c0                	jne    c0003d95 <dir_register+0xfe>
c0003dd5:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003dd8:	89 f8                	mov    eax,edi
c0003dda:	e8 76 e7 ff ff       	call   c0002555 <move_window>
c0003ddf:	85 c0                	test   eax,eax
c0003de1:	89 c6                	mov    esi,eax
c0003de3:	75 30                	jne    c0003e15 <dir_register+0x17e>
c0003de5:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003de8:	b9 20 00 00 00       	mov    ecx,0x20
c0003ded:	31 d2                	xor    edx,edx
c0003def:	e8 3d e2 ff ff       	call   c0002031 <mem_set>
c0003df4:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003df7:	b9 0b 00 00 00       	mov    ecx,0xb
c0003dfc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003e00:	e8 17 e2 ff ff       	call   c000201c <mem_cpy>
c0003e05:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003e08:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003e0b:	83 e0 18             	and    eax,0x18
c0003e0e:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003e11:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003e15:	83 c4 2c             	add    esp,0x2c
c0003e18:	89 f0                	mov    eax,esi
c0003e1a:	5b                   	pop    ebx
c0003e1b:	5e                   	pop    esi
c0003e1c:	5f                   	pop    edi
c0003e1d:	5d                   	pop    ebp
c0003e1e:	c3                   	ret    

c0003e1f <f_mount>:
c0003e1f:	53                   	push   ebx
c0003e20:	83 ec 18             	sub    esp,0x18
c0003e23:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003e27:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003e2b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003e2f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003e33:	e8 28 e6 ff ff       	call   c0002460 <get_ldnumber>
c0003e38:	89 c2                	mov    edx,eax
c0003e3a:	b8 0b 00 00 00       	mov    eax,0xb
c0003e3f:	85 d2                	test   edx,edx
c0003e41:	78 39                	js     c0003e7c <f_mount+0x5d>
c0003e43:	8b 04 95 a0 64 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd9b60]
c0003e4a:	85 c0                	test   eax,eax
c0003e4c:	74 03                	je     c0003e51 <f_mount+0x32>
c0003e4e:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003e51:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003e55:	85 c0                	test   eax,eax
c0003e57:	74 03                	je     c0003e5c <f_mount+0x3d>
c0003e59:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003e5c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003e60:	89 04 95 a0 64 02 c0 	mov    DWORD PTR [edx*4-0x3ffd9b60],eax
c0003e67:	31 c0                	xor    eax,eax
c0003e69:	84 db                	test   bl,bl
c0003e6b:	74 0f                	je     c0003e7c <f_mount+0x5d>
c0003e6d:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003e71:	31 c9                	xor    ecx,ecx
c0003e73:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003e77:	e8 36 e8 ff ff       	call   c00026b2 <mount_volume>
c0003e7c:	83 c4 18             	add    esp,0x18
c0003e7f:	5b                   	pop    ebx
c0003e80:	c3                   	ret    

c0003e81 <f_open>:
c0003e81:	55                   	push   ebp
c0003e82:	b8 09 00 00 00       	mov    eax,0x9
c0003e87:	57                   	push   edi
c0003e88:	56                   	push   esi
c0003e89:	53                   	push   ebx
c0003e8a:	83 ec 5c             	sub    esp,0x5c
c0003e8d:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003e91:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003e95:	85 db                	test   ebx,ebx
c0003e97:	0f 84 9f 02 00 00    	je     c000413c <f_open+0x2bb>
c0003e9d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003ea1:	89 fd                	mov    ebp,edi
c0003ea3:	83 e5 3f             	and    ebp,0x3f
c0003ea6:	89 e8                	mov    eax,ebp
c0003ea8:	89 ee                	mov    esi,ebp
c0003eaa:	0f b6 c8             	movzx  ecx,al
c0003ead:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003eb1:	e8 fc e7 ff ff       	call   c00026b2 <mount_volume>
c0003eb6:	85 c0                	test   eax,eax
c0003eb8:	0f 85 78 02 00 00    	jne    c0004136 <f_open+0x2b5>
c0003ebe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003ec2:	83 ec 0c             	sub    esp,0xc
c0003ec5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003ec9:	68 00 02 00 00       	push   0x200
c0003ece:	e8 61 1f 00 00       	call   c0005e34 <ff_memalloc>
c0003ed3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0003ed7:	83 c4 10             	add    esp,0x10
c0003eda:	b8 11 00 00 00       	mov    eax,0x11
c0003edf:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003ee4:	0f 84 52 02 00 00    	je     c000413c <f_open+0x2bb>
c0003eea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003eee:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003ef2:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003ef6:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0003ef9:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003efd:	e8 f8 fc ff ff       	call   c0003bfa <follow_path>
c0003f02:	85 c0                	test   eax,eax
c0003f04:	75 0d                	jne    c0003f13 <f_open+0x92>
c0003f06:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0003f0b:	ba 06 00 00 00       	mov    edx,0x6
c0003f10:	0f 45 c2             	cmovne eax,edx
c0003f13:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003f19:	0f 84 d5 00 00 00    	je     c0003ff4 <f_open+0x173>
c0003f1f:	85 c0                	test   eax,eax
c0003f21:	74 21                	je     c0003f44 <f_open+0xc3>
c0003f23:	83 f8 04             	cmp    eax,0x4
c0003f26:	0f 85 ef 01 00 00    	jne    c000411b <f_open+0x29a>
c0003f2c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003f30:	e8 62 fd ff ff       	call   c0003c97 <dir_register>
c0003f35:	85 c0                	test   eax,eax
c0003f37:	0f 85 de 01 00 00    	jne    c000411b <f_open+0x29a>
c0003f3d:	83 cd 08             	or     ebp,0x8
c0003f40:	89 ee                	mov    esi,ebp
c0003f42:	eb 2c                	jmp    c0003f70 <f_open+0xef>
c0003f44:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003f48:	b8 07 00 00 00       	mov    eax,0x7
c0003f4d:	80 e2 11             	and    dl,0x11
c0003f50:	0f 85 c5 01 00 00    	jne    c000411b <f_open+0x29a>
c0003f56:	f7 c7 04 00 00 00    	test   edi,0x4
c0003f5c:	b8 08 00 00 00       	mov    eax,0x8
c0003f61:	0f 85 b4 01 00 00    	jne    c000411b <f_open+0x29a>
c0003f67:	83 e7 08             	and    edi,0x8
c0003f6a:	0f 84 b1 00 00 00    	je     c0004021 <f_open+0x1a0>
c0003f70:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f74:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0003f78:	8a 00                	mov    al,BYTE PTR [eax]
c0003f7a:	89 ea                	mov    edx,ebp
c0003f7c:	e8 60 f4 ff ff       	call   c00033e1 <ld_clust.isra.0>
c0003f81:	ba 00 00 21 50       	mov    edx,0x50210000
c0003f86:	89 c7                	mov    edi,eax
c0003f88:	8d 45 0e             	lea    eax,[ebp+0xe]
c0003f8b:	e8 89 e0 ff ff       	call   c0002019 <st_dword>
c0003f90:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003f94:	31 c9                	xor    ecx,ecx
c0003f96:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003f9a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f9e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003fa2:	e8 63 f4 ff ff       	call   c000340a <st_clust.isra.1>
c0003fa7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003fab:	31 d2                	xor    edx,edx
c0003fad:	83 c0 1c             	add    eax,0x1c
c0003fb0:	e8 64 e0 ff ff       	call   c0002019 <st_dword>
c0003fb5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003fb9:	85 ff                	test   edi,edi
c0003fbb:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003fbf:	74 60                	je     c0004021 <f_open+0x1a0>
c0003fc1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003fc5:	31 c9                	xor    ecx,ecx
c0003fc7:	89 fa                	mov    edx,edi
c0003fc9:	8b 68 30             	mov    ebp,DWORD PTR [eax+0x30]
c0003fcc:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003fd0:	e8 64 f7 ff ff       	call   c0003739 <remove_chain>
c0003fd5:	85 c0                	test   eax,eax
c0003fd7:	0f 85 3e 01 00 00    	jne    c000411b <f_open+0x29a>
c0003fdd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003fe1:	89 ea                	mov    edx,ebp
c0003fe3:	4f                   	dec    edi
c0003fe4:	e8 6c e5 ff ff       	call   c0002555 <move_window>
c0003fe9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003fed:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003ff0:	85 c0                	test   eax,eax
c0003ff2:	eb 27                	jmp    c000401b <f_open+0x19a>
c0003ff4:	85 c0                	test   eax,eax
c0003ff6:	0f 85 1f 01 00 00    	jne    c000411b <f_open+0x29a>
c0003ffc:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0004000:	b8 04 00 00 00       	mov    eax,0x4
c0004005:	f6 c2 10             	test   dl,0x10
c0004008:	0f 85 0d 01 00 00    	jne    c000411b <f_open+0x29a>
c000400e:	83 e7 02             	and    edi,0x2
c0004011:	74 0e                	je     c0004021 <f_open+0x1a0>
c0004013:	b8 07 00 00 00       	mov    eax,0x7
c0004018:	80 e2 01             	and    dl,0x1
c000401b:	0f 85 fa 00 00 00    	jne    c000411b <f_open+0x29a>
c0004021:	f7 c6 08 00 00 00    	test   esi,0x8
c0004027:	74 03                	je     c000402c <f_open+0x1ab>
c0004029:	83 ce 40             	or     esi,0x40
c000402c:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0004030:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0004034:	8b 45 30             	mov    eax,DWORD PTR [ebp+0x30]
c0004037:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c000403a:	89 fa                	mov    edx,edi
c000403c:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000403f:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0004042:	e8 9a f3 ff ff       	call   c00033e1 <ld_clust.isra.0>
c0004047:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000404a:	8d 47 1c             	lea    eax,[edi+0x1c]
c000404d:	e8 ab df ff ff       	call   c0001ffd <ld_dword>
c0004052:	8d 7b 28             	lea    edi,[ebx+0x28]
c0004055:	31 d2                	xor    edx,edx
c0004057:	89 2b                	mov    DWORD PTR [ebx],ebp
c0004059:	b9 00 02 00 00       	mov    ecx,0x200
c000405e:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004061:	66 8b 45 06          	mov    ax,WORD PTR [ebp+0x6]
c0004065:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0004069:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0004070:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0004077:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000407b:	89 f0                	mov    eax,esi
c000407d:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004080:	89 f8                	mov    eax,edi
c0004082:	e8 aa df ff ff       	call   c0002031 <mem_set>
c0004087:	83 e6 20             	and    esi,0x20
c000408a:	75 07                	jne    c0004093 <f_open+0x212>
c000408c:	31 c0                	xor    eax,eax
c000408e:	e9 88 00 00 00       	jmp    c000411b <f_open+0x29a>
c0004093:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0004096:	85 f6                	test   esi,esi
c0004098:	74 f2                	je     c000408c <f_open+0x20b>
c000409a:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000409d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00040a1:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00040a4:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00040a8:	31 c0                	xor    eax,eax
c00040aa:	c1 e5 09             	shl    ebp,0x9
c00040ad:	85 c0                	test   eax,eax
c00040af:	75 23                	jne    c00040d4 <f_open+0x253>
c00040b1:	39 ee                	cmp    esi,ebp
c00040b3:	76 1f                	jbe    c00040d4 <f_open+0x253>
c00040b5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00040b7:	e8 76 f3 ff ff       	call   c0003432 <get_fat.isra.2>
c00040bc:	89 c2                	mov    edx,eax
c00040be:	b8 02 00 00 00       	mov    eax,0x2
c00040c3:	83 fa 01             	cmp    edx,0x1
c00040c6:	76 08                	jbe    c00040d0 <f_open+0x24f>
c00040c8:	31 c0                	xor    eax,eax
c00040ca:	83 fa ff             	cmp    edx,0xffffffff
c00040cd:	0f 94 c0             	sete   al
c00040d0:	29 ee                	sub    esi,ebp
c00040d2:	eb d9                	jmp    c00040ad <f_open+0x22c>
c00040d4:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00040d7:	85 c0                	test   eax,eax
c00040d9:	75 40                	jne    c000411b <f_open+0x29a>
c00040db:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c00040e1:	74 a9                	je     c000408c <f_open+0x20b>
c00040e3:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c00040e7:	89 e8                	mov    eax,ebp
c00040e9:	e8 58 e1 ff ff       	call   c0002246 <clst2sect>
c00040ee:	89 c2                	mov    edx,eax
c00040f0:	b8 02 00 00 00       	mov    eax,0x2
c00040f5:	85 d2                	test   edx,edx
c00040f7:	74 22                	je     c000411b <f_open+0x29a>
c00040f9:	c1 ee 09             	shr    esi,0x9
c00040fc:	8d 04 16             	lea    eax,[esi+edx*1]
c00040ff:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004102:	6a 01                	push   0x1
c0004104:	50                   	push   eax
c0004105:	57                   	push   edi
c0004106:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c000410a:	50                   	push   eax
c000410b:	e8 95 de ff ff       	call   c0001fa5 <disk_read>
c0004110:	83 c4 10             	add    esp,0x10
c0004113:	85 c0                	test   eax,eax
c0004115:	0f 95 c0             	setne  al
c0004118:	0f b6 c0             	movzx  eax,al
c000411b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000411f:	83 ec 0c             	sub    esp,0xc
c0004122:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0004126:	e8 21 1d 00 00       	call   c0005e4c <ff_memfree>
c000412b:	83 c4 10             	add    esp,0x10
c000412e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004132:	85 c0                	test   eax,eax
c0004134:	74 06                	je     c000413c <f_open+0x2bb>
c0004136:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000413c:	83 c4 5c             	add    esp,0x5c
c000413f:	5b                   	pop    ebx
c0004140:	5e                   	pop    esi
c0004141:	5f                   	pop    edi
c0004142:	5d                   	pop    ebp
c0004143:	c3                   	ret    

c0004144 <f_read>:
c0004144:	55                   	push   ebp
c0004145:	57                   	push   edi
c0004146:	56                   	push   esi
c0004147:	53                   	push   ebx
c0004148:	83 ec 2c             	sub    esp,0x2c
c000414b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000414f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004153:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004157:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c000415b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0004161:	89 d8                	mov    eax,ebx
c0004163:	e8 44 e3 ff ff       	call   c00024ac <validate>
c0004168:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000416c:	85 c0                	test   eax,eax
c000416e:	0f 85 a5 01 00 00    	jne    c0004319 <f_read+0x1d5>
c0004174:	0f b6 43 11          	movzx  eax,BYTE PTR [ebx+0x11]
c0004178:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000417c:	85 c0                	test   eax,eax
c000417e:	0f 85 95 01 00 00    	jne    c0004319 <f_read+0x1d5>
c0004184:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0004188:	0f 84 83 01 00 00    	je     c0004311 <f_read+0x1cd>
c000418e:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004191:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0004194:	39 f8                	cmp    eax,edi
c0004196:	0f 46 f8             	cmovbe edi,eax
c0004199:	85 ff                	test   edi,edi
c000419b:	0f 84 78 01 00 00    	je     c0004319 <f_read+0x1d5>
c00041a1:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041a4:	a9 ff 01 00 00       	test   eax,0x1ff
c00041a9:	0f 85 2b 01 00 00    	jne    c00042da <f_read+0x196>
c00041af:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00041b3:	0f b7 6a 0a          	movzx  ebp,WORD PTR [edx+0xa]
c00041b7:	89 c2                	mov    edx,eax
c00041b9:	c1 ea 09             	shr    edx,0x9
c00041bc:	4d                   	dec    ebp
c00041bd:	21 d5                	and    ebp,edx
c00041bf:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00041c3:	75 42                	jne    c0004207 <f_read+0xc3>
c00041c5:	85 c0                	test   eax,eax
c00041c7:	75 05                	jne    c00041ce <f_read+0x8a>
c00041c9:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00041cc:	eb 0a                	jmp    c00041d8 <f_read+0x94>
c00041ce:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00041d1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00041d3:	e8 5a f2 ff ff       	call   c0003432 <get_fat.isra.2>
c00041d8:	83 f8 01             	cmp    eax,0x1
c00041db:	77 11                	ja     c00041ee <f_read+0xaa>
c00041dd:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00041e1:	c7 44 24 04 02 00 00 00 	mov    DWORD PTR [esp+0x4],0x2
c00041e9:	e9 2b 01 00 00       	jmp    c0004319 <f_read+0x1d5>
c00041ee:	83 f8 ff             	cmp    eax,0xffffffff
c00041f1:	75 11                	jne    c0004204 <f_read+0xc0>
c00041f3:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00041f7:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c00041ff:	e9 15 01 00 00       	jmp    c0004319 <f_read+0x1d5>
c0004204:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004207:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000420b:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000420e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004212:	89 c8                	mov    eax,ecx
c0004214:	e8 2d e0 ff ff       	call   c0002246 <clst2sect>
c0004219:	85 c0                	test   eax,eax
c000421b:	74 c0                	je     c00041dd <f_read+0x99>
c000421d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0004221:	81 ff ff 01 00 00    	cmp    edi,0x1ff
c0004227:	8d 2c 01             	lea    ebp,[ecx+eax*1]
c000422a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000422e:	76 58                	jbe    c0004288 <f_read+0x144>
c0004230:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004234:	89 fe                	mov    esi,edi
c0004236:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c000423a:	c1 ee 09             	shr    esi,0x9
c000423d:	01 f2                	add    edx,esi
c000423f:	39 c2                	cmp    edx,eax
c0004241:	76 06                	jbe    c0004249 <f_read+0x105>
c0004243:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0004247:	89 c6                	mov    esi,eax
c0004249:	56                   	push   esi
c000424a:	55                   	push   ebp
c000424b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000424f:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004253:	50                   	push   eax
c0004254:	e8 4c dd ff ff       	call   c0001fa5 <disk_read>
c0004259:	83 c4 10             	add    esp,0x10
c000425c:	85 c0                	test   eax,eax
c000425e:	75 93                	jne    c00041f3 <f_read+0xaf>
c0004260:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c0004264:	74 1d                	je     c0004283 <f_read+0x13f>
c0004266:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004269:	29 e8                	sub    eax,ebp
c000426b:	39 f0                	cmp    eax,esi
c000426d:	73 14                	jae    c0004283 <f_read+0x13f>
c000426f:	c1 e0 09             	shl    eax,0x9
c0004272:	b9 00 02 00 00       	mov    ecx,0x200
c0004277:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000427b:	8d 53 28             	lea    edx,[ebx+0x28]
c000427e:	e8 99 dd ff ff       	call   c000201c <mem_cpy>
c0004283:	c1 e6 09             	shl    esi,0x9
c0004286:	eb 75                	jmp    c00042fd <f_read+0x1b9>
c0004288:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000428b:	39 e8                	cmp    eax,ebp
c000428d:	74 48                	je     c00042d7 <f_read+0x193>
c000428f:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c0004293:	8d 73 28             	lea    esi,[ebx+0x28]
c0004296:	74 22                	je     c00042ba <f_read+0x176>
c0004298:	6a 01                	push   0x1
c000429a:	50                   	push   eax
c000429b:	56                   	push   esi
c000429c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00042a0:	50                   	push   eax
c00042a1:	e8 15 dd ff ff       	call   c0001fbb <disk_write>
c00042a6:	83 c4 10             	add    esp,0x10
c00042a9:	85 c0                	test   eax,eax
c00042ab:	0f 85 42 ff ff ff    	jne    c00041f3 <f_read+0xaf>
c00042b1:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00042b4:	83 e0 7f             	and    eax,0x7f
c00042b7:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00042ba:	6a 01                	push   0x1
c00042bc:	55                   	push   ebp
c00042bd:	56                   	push   esi
c00042be:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00042c2:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00042c6:	50                   	push   eax
c00042c7:	e8 d9 dc ff ff       	call   c0001fa5 <disk_read>
c00042cc:	83 c4 10             	add    esp,0x10
c00042cf:	85 c0                	test   eax,eax
c00042d1:	0f 85 1c ff ff ff    	jne    c00041f3 <f_read+0xaf>
c00042d7:	89 6b 1c             	mov    DWORD PTR [ebx+0x1c],ebp
c00042da:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00042dd:	be 00 02 00 00       	mov    esi,0x200
c00042e2:	25 ff 01 00 00       	and    eax,0x1ff
c00042e7:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c00042eb:	29 c6                	sub    esi,eax
c00042ed:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00042f1:	39 f7                	cmp    edi,esi
c00042f3:	0f 46 f7             	cmovbe esi,edi
c00042f6:	89 f1                	mov    ecx,esi
c00042f8:	e8 1f dd ff ff       	call   c000201c <mem_cpy>
c00042fd:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004301:	29 f7                	sub    edi,esi
c0004303:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004307:	01 30                	add    DWORD PTR [eax],esi
c0004309:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c000430c:	e9 88 fe ff ff       	jmp    c0004199 <f_read+0x55>
c0004311:	c7 44 24 04 07 00 00 00 	mov    DWORD PTR [esp+0x4],0x7
c0004319:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000431d:	83 c4 2c             	add    esp,0x2c
c0004320:	5b                   	pop    ebx
c0004321:	5e                   	pop    esi
c0004322:	5f                   	pop    edi
c0004323:	5d                   	pop    ebp
c0004324:	c3                   	ret    

c0004325 <f_write>:
c0004325:	55                   	push   ebp
c0004326:	57                   	push   edi
c0004327:	56                   	push   esi
c0004328:	53                   	push   ebx
c0004329:	83 ec 2c             	sub    esp,0x2c
c000432c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004330:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004334:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004338:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000433e:	89 d8                	mov    eax,ebx
c0004340:	e8 67 e1 ff ff       	call   c00024ac <validate>
c0004345:	85 c0                	test   eax,eax
c0004347:	89 c7                	mov    edi,eax
c0004349:	0f 85 13 02 00 00    	jne    c0004562 <f_write+0x23d>
c000434f:	0f b6 7b 11          	movzx  edi,BYTE PTR [ebx+0x11]
c0004353:	85 ff                	test   edi,edi
c0004355:	0f 85 07 02 00 00    	jne    c0004562 <f_write+0x23d>
c000435b:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000435f:	0f 84 f8 01 00 00    	je     c000455d <f_write+0x238>
c0004365:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004368:	89 c1                	mov    ecx,eax
c000436a:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c000436e:	0f 83 ed 00 00 00    	jae    c0004461 <f_write+0x13c>
c0004374:	f7 d0                	not    eax
c0004376:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000437a:	e9 e2 00 00 00       	jmp    c0004461 <f_write+0x13c>
c000437f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004382:	a9 ff 01 00 00       	test   eax,0x1ff
c0004387:	0f 85 9b 01 00 00    	jne    c0004528 <f_write+0x203>
c000438d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004391:	0f b7 6a 0a          	movzx  ebp,WORD PTR [edx+0xa]
c0004395:	89 c2                	mov    edx,eax
c0004397:	c1 ea 09             	shr    edx,0x9
c000439a:	4d                   	dec    ebp
c000439b:	21 d5                	and    ebp,edx
c000439d:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00043a1:	0f 84 c7 00 00 00    	je     c000446e <f_write+0x149>
c00043a7:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00043ab:	0f 85 23 01 00 00    	jne    c00044d4 <f_write+0x1af>
c00043b1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00043b5:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00043b8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00043bc:	89 c8                	mov    eax,ecx
c00043be:	e8 83 de ff ff       	call   c0002246 <clst2sect>
c00043c3:	85 c0                	test   eax,eax
c00043c5:	0f 84 d3 00 00 00    	je     c000449e <f_write+0x179>
c00043cb:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00043cf:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00043d7:	8d 2c 01             	lea    ebp,[ecx+eax*1]
c00043da:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00043de:	0f 86 1c 01 00 00    	jbe    c0004500 <f_write+0x1db>
c00043e4:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00043e8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00043ec:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00043f0:	c1 ee 09             	shr    esi,0x9
c00043f3:	01 f2                	add    edx,esi
c00043f5:	39 c2                	cmp    edx,eax
c00043f7:	76 06                	jbe    c00043ff <f_write+0xda>
c00043f9:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00043fd:	89 c6                	mov    esi,eax
c00043ff:	56                   	push   esi
c0004400:	55                   	push   ebp
c0004401:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0004405:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004409:	50                   	push   eax
c000440a:	e8 ac db ff ff       	call   c0001fbb <disk_write>
c000440f:	83 c4 10             	add    esp,0x10
c0004412:	85 c0                	test   eax,eax
c0004414:	0f 85 97 00 00 00    	jne    c00044b1 <f_write+0x18c>
c000441a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000441d:	29 ea                	sub    edx,ebp
c000441f:	39 f2                	cmp    edx,esi
c0004421:	73 1d                	jae    c0004440 <f_write+0x11b>
c0004423:	c1 e2 09             	shl    edx,0x9
c0004426:	b9 00 02 00 00       	mov    ecx,0x200
c000442b:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c000442f:	8d 43 28             	lea    eax,[ebx+0x28]
c0004432:	e8 e5 db ff ff       	call   c000201c <mem_cpy>
c0004437:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000443a:	83 e0 7f             	and    eax,0x7f
c000443d:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004440:	c1 e6 09             	shl    esi,0x9
c0004443:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004447:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000444b:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000444f:	01 30                	add    DWORD PTR [eax],esi
c0004451:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0004454:	39 73 0c             	cmp    DWORD PTR [ebx+0xc],esi
c0004457:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000445a:	0f 43 73 0c          	cmovae esi,DWORD PTR [ebx+0xc]
c000445e:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0004461:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0004466:	0f 85 13 ff ff ff    	jne    c000437f <f_write+0x5a>
c000446c:	eb 1d                	jmp    c000448b <f_write+0x166>
c000446e:	85 c0                	test   eax,eax
c0004470:	75 0b                	jne    c000447d <f_write+0x158>
c0004472:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004475:	31 d2                	xor    edx,edx
c0004477:	85 c0                	test   eax,eax
c0004479:	75 1e                	jne    c0004499 <f_write+0x174>
c000447b:	eb 03                	jmp    c0004480 <f_write+0x15b>
c000447d:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004480:	89 d8                	mov    eax,ebx
c0004482:	e8 78 f1 ff ff       	call   c00035ff <create_chain>
c0004487:	85 c0                	test   eax,eax
c0004489:	75 0e                	jne    c0004499 <f_write+0x174>
c000448b:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000448e:	83 c8 40             	or     eax,0x40
c0004491:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004494:	e9 c9 00 00 00       	jmp    c0004562 <f_write+0x23d>
c0004499:	83 f8 01             	cmp    eax,0x1
c000449c:	75 0e                	jne    c00044ac <f_write+0x187>
c000449e:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00044a2:	bf 02 00 00 00       	mov    edi,0x2
c00044a7:	e9 b6 00 00 00       	jmp    c0004562 <f_write+0x23d>
c00044ac:	83 f8 ff             	cmp    eax,0xffffffff
c00044af:	75 0e                	jne    c00044bf <f_write+0x19a>
c00044b1:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00044b5:	bf 01 00 00 00       	mov    edi,0x1
c00044ba:	e9 a3 00 00 00       	jmp    c0004562 <f_write+0x23d>
c00044bf:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00044c3:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00044c6:	0f 85 db fe ff ff    	jne    c00043a7 <f_write+0x82>
c00044cc:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00044cf:	e9 d3 fe ff ff       	jmp    c00043a7 <f_write+0x82>
c00044d4:	6a 01                	push   0x1
c00044d6:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00044d9:	8d 43 28             	lea    eax,[ebx+0x28]
c00044dc:	50                   	push   eax
c00044dd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00044e1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00044e5:	50                   	push   eax
c00044e6:	e8 d0 da ff ff       	call   c0001fbb <disk_write>
c00044eb:	83 c4 10             	add    esp,0x10
c00044ee:	85 c0                	test   eax,eax
c00044f0:	75 bf                	jne    c00044b1 <f_write+0x18c>
c00044f2:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00044f5:	83 e0 7f             	and    eax,0x7f
c00044f8:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00044fb:	e9 b1 fe ff ff       	jmp    c00043b1 <f_write+0x8c>
c0004500:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0004503:	74 20                	je     c0004525 <f_write+0x200>
c0004505:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004508:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c000450b:	76 18                	jbe    c0004525 <f_write+0x200>
c000450d:	6a 01                	push   0x1
c000450f:	55                   	push   ebp
c0004510:	8d 43 28             	lea    eax,[ebx+0x28]
c0004513:	50                   	push   eax
c0004514:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004518:	50                   	push   eax
c0004519:	e8 87 da ff ff       	call   c0001fa5 <disk_read>
c000451e:	83 c4 10             	add    esp,0x10
c0004521:	85 c0                	test   eax,eax
c0004523:	75 8c                	jne    c00044b1 <f_write+0x18c>
c0004525:	89 6b 1c             	mov    DWORD PTR [ebx+0x1c],ebp
c0004528:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000452b:	be 00 02 00 00       	mov    esi,0x200
c0004530:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0004534:	25 ff 01 00 00       	and    eax,0x1ff
c0004539:	29 c6                	sub    esi,eax
c000453b:	39 74 24 48          	cmp    DWORD PTR [esp+0x48],esi
c000453f:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c0004543:	0f 46 74 24 48       	cmovbe esi,DWORD PTR [esp+0x48]
c0004548:	89 f1                	mov    ecx,esi
c000454a:	e8 cd da ff ff       	call   c000201c <mem_cpy>
c000454f:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004552:	83 c8 80             	or     eax,0xffffff80
c0004555:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004558:	e9 e6 fe ff ff       	jmp    c0004443 <f_write+0x11e>
c000455d:	bf 07 00 00 00       	mov    edi,0x7
c0004562:	83 c4 2c             	add    esp,0x2c
c0004565:	89 f8                	mov    eax,edi
c0004567:	5b                   	pop    ebx
c0004568:	5e                   	pop    esi
c0004569:	5f                   	pop    edi
c000456a:	5d                   	pop    ebp
c000456b:	c3                   	ret    

c000456c <f_sync>:
c000456c:	56                   	push   esi
c000456d:	53                   	push   ebx
c000456e:	83 ec 14             	sub    esp,0x14
c0004571:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004575:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004579:	89 d8                	mov    eax,ebx
c000457b:	e8 2c df ff ff       	call   c00024ac <validate>
c0004580:	85 c0                	test   eax,eax
c0004582:	0f 85 a3 00 00 00    	jne    c000462b <f_sync+0xbf>
c0004588:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000458b:	f6 c2 40             	test   dl,0x40
c000458e:	0f 84 97 00 00 00    	je     c000462b <f_sync+0xbf>
c0004594:	80 e2 80             	and    dl,0x80
c0004597:	74 2e                	je     c00045c7 <f_sync+0x5b>
c0004599:	6a 01                	push   0x1
c000459b:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000459e:	8d 43 28             	lea    eax,[ebx+0x28]
c00045a1:	50                   	push   eax
c00045a2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00045a6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00045aa:	50                   	push   eax
c00045ab:	e8 0b da ff ff       	call   c0001fbb <disk_write>
c00045b0:	83 c4 10             	add    esp,0x10
c00045b3:	89 c2                	mov    edx,eax
c00045b5:	b8 01 00 00 00       	mov    eax,0x1
c00045ba:	85 d2                	test   edx,edx
c00045bc:	75 6d                	jne    c000462b <f_sync+0xbf>
c00045be:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00045c1:	83 e0 7f             	and    eax,0x7f
c00045c4:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00045c7:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00045ca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00045ce:	e8 82 df ff ff       	call   c0002555 <move_window>
c00045d3:	85 c0                	test   eax,eax
c00045d5:	75 54                	jne    c000462b <f_sync+0xbf>
c00045d7:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00045da:	8a 46 0b             	mov    al,BYTE PTR [esi+0xb]
c00045dd:	89 f2                	mov    edx,esi
c00045df:	83 c8 20             	or     eax,0x20
c00045e2:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c00045e5:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00045e8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00045ea:	e8 1b ee ff ff       	call   c000340a <st_clust.isra.1>
c00045ef:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00045f2:	8d 46 1c             	lea    eax,[esi+0x1c]
c00045f5:	e8 1f da ff ff       	call   c0002019 <st_dword>
c00045fa:	8d 46 16             	lea    eax,[esi+0x16]
c00045fd:	ba 00 00 21 50       	mov    edx,0x50210000
c0004602:	e8 12 da ff ff       	call   c0002019 <st_dword>
c0004607:	8d 46 12             	lea    eax,[esi+0x12]
c000460a:	31 d2                	xor    edx,edx
c000460c:	e8 04 da ff ff       	call   c0002015 <st_word>
c0004611:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004615:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004619:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000461d:	e8 68 e9 ff ff       	call   c0002f8a <sync_fs>
c0004622:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004625:	83 e2 bf             	and    edx,0xffffffbf
c0004628:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c000462b:	83 c4 14             	add    esp,0x14
c000462e:	5b                   	pop    ebx
c000462f:	5e                   	pop    esi
c0004630:	c3                   	ret    

c0004631 <f_close>:
c0004631:	53                   	push   ebx
c0004632:	83 ec 24             	sub    esp,0x24
c0004635:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0004639:	53                   	push   ebx
c000463a:	e8 2d ff ff ff       	call   c000456c <f_sync>
c000463f:	83 c4 10             	add    esp,0x10
c0004642:	85 c0                	test   eax,eax
c0004644:	75 15                	jne    c000465b <f_close+0x2a>
c0004646:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000464a:	89 d8                	mov    eax,ebx
c000464c:	e8 5b de ff ff       	call   c00024ac <validate>
c0004651:	85 c0                	test   eax,eax
c0004653:	75 06                	jne    c000465b <f_close+0x2a>
c0004655:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000465b:	83 c4 18             	add    esp,0x18
c000465e:	5b                   	pop    ebx
c000465f:	c3                   	ret    

c0004660 <f_lseek>:
c0004660:	55                   	push   ebp
c0004661:	57                   	push   edi
c0004662:	56                   	push   esi
c0004663:	53                   	push   ebx
c0004664:	83 ec 2c             	sub    esp,0x2c
c0004667:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000466b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000466f:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0004673:	89 d8                	mov    eax,ebx
c0004675:	e8 32 de ff ff       	call   c00024ac <validate>
c000467a:	85 c0                	test   eax,eax
c000467c:	89 c5                	mov    ebp,eax
c000467e:	0f 85 82 01 00 00    	jne    c0004806 <f_lseek+0x1a6>
c0004684:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004688:	85 ed                	test   ebp,ebp
c000468a:	0f 85 76 01 00 00    	jne    c0004806 <f_lseek+0x1a6>
c0004690:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004693:	39 f0                	cmp    eax,esi
c0004695:	73 07                	jae    c000469e <f_lseek+0x3e>
c0004697:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000469b:	0f 44 f0             	cmove  esi,eax
c000469e:	85 f6                	test   esi,esi
c00046a0:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00046a3:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00046aa:	75 07                	jne    c00046b3 <f_lseek+0x53>
c00046ac:	31 f6                	xor    esi,esi
c00046ae:	e9 e2 00 00 00       	jmp    c0004795 <f_lseek+0x135>
c00046b3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00046b7:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c00046bb:	c1 e7 09             	shl    edi,0x9
c00046be:	85 c9                	test   ecx,ecx
c00046c0:	74 28                	je     c00046ea <f_lseek+0x8a>
c00046c2:	31 d2                	xor    edx,edx
c00046c4:	49                   	dec    ecx
c00046c5:	8d 46 ff             	lea    eax,[esi-0x1]
c00046c8:	f7 f7                	div    edi
c00046ca:	31 d2                	xor    edx,edx
c00046cc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00046d0:	89 c8                	mov    eax,ecx
c00046d2:	f7 f7                	div    edi
c00046d4:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00046d8:	72 10                	jb     c00046ea <f_lseek+0x8a>
c00046da:	89 f8                	mov    eax,edi
c00046dc:	f7 d8                	neg    eax
c00046de:	21 c1                	and    ecx,eax
c00046e0:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00046e3:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c00046e6:	29 ce                	sub    esi,ecx
c00046e8:	eb 3c                	jmp    c0004726 <f_lseek+0xc6>
c00046ea:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00046ed:	85 c0                	test   eax,eax
c00046ef:	75 32                	jne    c0004723 <f_lseek+0xc3>
c00046f1:	31 d2                	xor    edx,edx
c00046f3:	89 d8                	mov    eax,ebx
c00046f5:	e8 05 ef ff ff       	call   c00035ff <create_chain>
c00046fa:	83 f8 01             	cmp    eax,0x1
c00046fd:	75 0e                	jne    c000470d <f_lseek+0xad>
c00046ff:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004703:	bd 02 00 00 00       	mov    ebp,0x2
c0004708:	e9 f9 00 00 00       	jmp    c0004806 <f_lseek+0x1a6>
c000470d:	83 f8 ff             	cmp    eax,0xffffffff
c0004710:	75 0e                	jne    c0004720 <f_lseek+0xc0>
c0004712:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004716:	bd 01 00 00 00       	mov    ebp,0x1
c000471b:	e9 e6 00 00 00       	jmp    c0004806 <f_lseek+0x1a6>
c0004720:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004723:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004726:	85 c0                	test   eax,eax
c0004728:	74 82                	je     c00046ac <f_lseek+0x4c>
c000472a:	39 fe                	cmp    esi,edi
c000472c:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000472f:	76 3d                	jbe    c000476e <f_lseek+0x10e>
c0004731:	01 fa                	add    edx,edi
c0004733:	29 fe                	sub    esi,edi
c0004735:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004739:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c000473c:	89 c2                	mov    edx,eax
c000473e:	74 0d                	je     c000474d <f_lseek+0xed>
c0004740:	89 d8                	mov    eax,ebx
c0004742:	e8 b8 ee ff ff       	call   c00035ff <create_chain>
c0004747:	85 c0                	test   eax,eax
c0004749:	75 09                	jne    c0004754 <f_lseek+0xf4>
c000474b:	eb 1f                	jmp    c000476c <f_lseek+0x10c>
c000474d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000474f:	e8 de ec ff ff       	call   c0003432 <get_fat.isra.2>
c0004754:	83 f8 ff             	cmp    eax,0xffffffff
c0004757:	74 b9                	je     c0004712 <f_lseek+0xb2>
c0004759:	83 f8 01             	cmp    eax,0x1
c000475c:	76 a1                	jbe    c00046ff <f_lseek+0x9f>
c000475e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004762:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c0004765:	76 98                	jbe    c00046ff <f_lseek+0x9f>
c0004767:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000476a:	eb be                	jmp    c000472a <f_lseek+0xca>
c000476c:	31 f6                	xor    esi,esi
c000476e:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004771:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004777:	0f 84 2f ff ff ff    	je     c00046ac <f_lseek+0x4c>
c000477d:	89 c2                	mov    edx,eax
c000477f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004783:	e8 be da ff ff       	call   c0002246 <clst2sect>
c0004788:	85 c0                	test   eax,eax
c000478a:	0f 84 6f ff ff ff    	je     c00046ff <f_lseek+0x9f>
c0004790:	c1 ee 09             	shr    esi,0x9
c0004793:	01 c6                	add    esi,eax
c0004795:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004798:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000479b:	76 0c                	jbe    c00047a9 <f_lseek+0x149>
c000479d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00047a0:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00047a3:	83 ca 40             	or     edx,0x40
c00047a6:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00047a9:	a9 ff 01 00 00       	test   eax,0x1ff
c00047ae:	74 56                	je     c0004806 <f_lseek+0x1a6>
c00047b0:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00047b3:	39 f0                	cmp    eax,esi
c00047b5:	74 4f                	je     c0004806 <f_lseek+0x1a6>
c00047b7:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00047bb:	8d 7b 28             	lea    edi,[ebx+0x28]
c00047be:	74 26                	je     c00047e6 <f_lseek+0x186>
c00047c0:	6a 01                	push   0x1
c00047c2:	50                   	push   eax
c00047c3:	57                   	push   edi
c00047c4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00047c8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00047cc:	50                   	push   eax
c00047cd:	e8 e9 d7 ff ff       	call   c0001fbb <disk_write>
c00047d2:	83 c4 10             	add    esp,0x10
c00047d5:	85 c0                	test   eax,eax
c00047d7:	0f 85 35 ff ff ff    	jne    c0004712 <f_lseek+0xb2>
c00047dd:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00047e0:	83 e0 7f             	and    eax,0x7f
c00047e3:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00047e6:	6a 01                	push   0x1
c00047e8:	56                   	push   esi
c00047e9:	57                   	push   edi
c00047ea:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00047ee:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00047f2:	50                   	push   eax
c00047f3:	e8 ad d7 ff ff       	call   c0001fa5 <disk_read>
c00047f8:	83 c4 10             	add    esp,0x10
c00047fb:	85 c0                	test   eax,eax
c00047fd:	0f 85 0f ff ff ff    	jne    c0004712 <f_lseek+0xb2>
c0004803:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0004806:	83 c4 2c             	add    esp,0x2c
c0004809:	89 e8                	mov    eax,ebp
c000480b:	5b                   	pop    ebx
c000480c:	5e                   	pop    esi
c000480d:	5f                   	pop    edi
c000480e:	5d                   	pop    ebp
c000480f:	c3                   	ret    

c0004810 <f_opendir>:
c0004810:	56                   	push   esi
c0004811:	b8 09 00 00 00       	mov    eax,0x9
c0004816:	53                   	push   ebx
c0004817:	83 ec 24             	sub    esp,0x24
c000481a:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000481e:	85 db                	test   ebx,ebx
c0004820:	0f 84 af 00 00 00    	je     c00048d5 <f_opendir+0xc5>
c0004826:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000482a:	31 c9                	xor    ecx,ecx
c000482c:	8d 44 24 34          	lea    eax,[esp+0x34]
c0004830:	e8 7d de ff ff       	call   c00026b2 <mount_volume>
c0004835:	85 c0                	test   eax,eax
c0004837:	0f 85 92 00 00 00    	jne    c00048cf <f_opendir+0xbf>
c000483d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004841:	83 ec 0c             	sub    esp,0xc
c0004844:	89 03                	mov    DWORD PTR [ebx],eax
c0004846:	68 00 02 00 00       	push   0x200
c000484b:	e8 e4 15 00 00       	call   c0005e34 <ff_memalloc>
c0004850:	83 c4 10             	add    esp,0x10
c0004853:	89 c6                	mov    esi,eax
c0004855:	b8 11 00 00 00       	mov    eax,0x11
c000485a:	85 f6                	test   esi,esi
c000485c:	74 77                	je     c00048d5 <f_opendir+0xc5>
c000485e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004862:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0004866:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004869:	89 d8                	mov    eax,ebx
c000486b:	e8 8a f3 ff ff       	call   c0003bfa <follow_path>
c0004870:	85 c0                	test   eax,eax
c0004872:	75 37                	jne    c00048ab <f_opendir+0x9b>
c0004874:	f6 43 2b 80          	test   BYTE PTR [ebx+0x2b],0x80
c0004878:	75 1c                	jne    c0004896 <f_opendir+0x86>
c000487a:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c000487e:	b8 05 00 00 00       	mov    eax,0x5
c0004883:	74 26                	je     c00048ab <f_opendir+0x9b>
c0004885:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004889:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000488c:	8a 00                	mov    al,BYTE PTR [eax]
c000488e:	e8 4e eb ff ff       	call   c00033e1 <ld_clust.isra.0>
c0004893:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004896:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000489a:	31 d2                	xor    edx,edx
c000489c:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c00048a0:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00048a4:	89 d8                	mov    eax,ebx
c00048a6:	e8 8c ec ff ff       	call   c0003537 <dir_sdi>
c00048ab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00048af:	83 ec 0c             	sub    esp,0xc
c00048b2:	56                   	push   esi
c00048b3:	e8 94 15 00 00       	call   c0005e4c <ff_memfree>
c00048b8:	83 c4 10             	add    esp,0x10
c00048bb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00048bf:	83 f8 04             	cmp    eax,0x4
c00048c2:	74 06                	je     c00048ca <f_opendir+0xba>
c00048c4:	85 c0                	test   eax,eax
c00048c6:	74 0d                	je     c00048d5 <f_opendir+0xc5>
c00048c8:	eb 05                	jmp    c00048cf <f_opendir+0xbf>
c00048ca:	b8 05 00 00 00       	mov    eax,0x5
c00048cf:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00048d5:	83 c4 24             	add    esp,0x24
c00048d8:	5b                   	pop    ebx
c00048d9:	5e                   	pop    esi
c00048da:	c3                   	ret    

c00048db <f_closedir>:
c00048db:	53                   	push   ebx
c00048dc:	83 ec 18             	sub    esp,0x18
c00048df:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00048e3:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00048e7:	89 d8                	mov    eax,ebx
c00048e9:	e8 be db ff ff       	call   c00024ac <validate>
c00048ee:	85 c0                	test   eax,eax
c00048f0:	75 06                	jne    c00048f8 <f_closedir+0x1d>
c00048f2:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00048f8:	83 c4 18             	add    esp,0x18
c00048fb:	5b                   	pop    ebx
c00048fc:	c3                   	ret    

c00048fd <f_readdir>:
c00048fd:	57                   	push   edi
c00048fe:	56                   	push   esi
c00048ff:	53                   	push   ebx
c0004900:	83 ec 20             	sub    esp,0x20
c0004903:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004907:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000490b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000490f:	89 d8                	mov    eax,ebx
c0004911:	e8 96 db ff ff       	call   c00024ac <validate>
c0004916:	85 c0                	test   eax,eax
c0004918:	75 6e                	jne    c0004988 <f_readdir+0x8b>
c000491a:	85 ff                	test   edi,edi
c000491c:	75 0b                	jne    c0004929 <f_readdir+0x2c>
c000491e:	31 d2                	xor    edx,edx
c0004920:	89 d8                	mov    eax,ebx
c0004922:	e8 10 ec ff ff       	call   c0003537 <dir_sdi>
c0004927:	eb 5f                	jmp    c0004988 <f_readdir+0x8b>
c0004929:	83 ec 0c             	sub    esp,0xc
c000492c:	68 00 02 00 00       	push   0x200
c0004931:	e8 fe 14 00 00       	call   c0005e34 <ff_memalloc>
c0004936:	83 c4 10             	add    esp,0x10
c0004939:	89 c6                	mov    esi,eax
c000493b:	b8 11 00 00 00       	mov    eax,0x11
c0004940:	85 f6                	test   esi,esi
c0004942:	74 44                	je     c0004988 <f_readdir+0x8b>
c0004944:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004948:	31 d2                	xor    edx,edx
c000494a:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000494d:	89 d8                	mov    eax,ebx
c000494f:	e8 dd ef ff ff       	call   c0003931 <dir_read>
c0004954:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0004959:	75 19                	jne    c0004974 <f_readdir+0x77>
c000495b:	89 fa                	mov    edx,edi
c000495d:	89 d8                	mov    eax,ebx
c000495f:	e8 7c e8 ff ff       	call   c00031e0 <get_fileinfo>
c0004964:	31 d2                	xor    edx,edx
c0004966:	89 d8                	mov    eax,ebx
c0004968:	e8 5a ee ff ff       	call   c00037c7 <dir_next>
c000496d:	83 f8 04             	cmp    eax,0x4
c0004970:	75 02                	jne    c0004974 <f_readdir+0x77>
c0004972:	31 c0                	xor    eax,eax
c0004974:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004978:	83 ec 0c             	sub    esp,0xc
c000497b:	56                   	push   esi
c000497c:	e8 cb 14 00 00       	call   c0005e4c <ff_memfree>
c0004981:	83 c4 10             	add    esp,0x10
c0004984:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004988:	83 c4 20             	add    esp,0x20
c000498b:	5b                   	pop    ebx
c000498c:	5e                   	pop    esi
c000498d:	5f                   	pop    edi
c000498e:	c3                   	ret    

c000498f <f_stat>:
c000498f:	57                   	push   edi
c0004990:	31 c9                	xor    ecx,ecx
c0004992:	56                   	push   esi
c0004993:	53                   	push   ebx
c0004994:	83 ec 30             	sub    esp,0x30
c0004997:	8d 44 24 40          	lea    eax,[esp+0x40]
c000499b:	89 e2                	mov    edx,esp
c000499d:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00049a1:	e8 0c dd ff ff       	call   c00026b2 <mount_volume>
c00049a6:	85 c0                	test   eax,eax
c00049a8:	89 c3                	mov    ebx,eax
c00049aa:	75 59                	jne    c0004a05 <f_stat+0x76>
c00049ac:	83 ec 0c             	sub    esp,0xc
c00049af:	bb 11 00 00 00       	mov    ebx,0x11
c00049b4:	68 00 02 00 00       	push   0x200
c00049b9:	e8 76 14 00 00       	call   c0005e34 <ff_memalloc>
c00049be:	83 c4 10             	add    esp,0x10
c00049c1:	85 c0                	test   eax,eax
c00049c3:	89 c6                	mov    esi,eax
c00049c5:	74 3e                	je     c0004a05 <f_stat+0x76>
c00049c7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00049ca:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00049ce:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00049d1:	89 e0                	mov    eax,esp
c00049d3:	e8 22 f2 ff ff       	call   c0003bfa <follow_path>
c00049d8:	85 c0                	test   eax,eax
c00049da:	89 c3                	mov    ebx,eax
c00049dc:	75 1b                	jne    c00049f9 <f_stat+0x6a>
c00049de:	f6 44 24 2b 80       	test   BYTE PTR [esp+0x2b],0x80
c00049e3:	75 0f                	jne    c00049f4 <f_stat+0x65>
c00049e5:	85 ff                	test   edi,edi
c00049e7:	74 10                	je     c00049f9 <f_stat+0x6a>
c00049e9:	89 fa                	mov    edx,edi
c00049eb:	89 e0                	mov    eax,esp
c00049ed:	e8 ee e7 ff ff       	call   c00031e0 <get_fileinfo>
c00049f2:	eb 05                	jmp    c00049f9 <f_stat+0x6a>
c00049f4:	bb 06 00 00 00       	mov    ebx,0x6
c00049f9:	83 ec 0c             	sub    esp,0xc
c00049fc:	56                   	push   esi
c00049fd:	e8 4a 14 00 00       	call   c0005e4c <ff_memfree>
c0004a02:	83 c4 10             	add    esp,0x10
c0004a05:	83 c4 30             	add    esp,0x30
c0004a08:	89 d8                	mov    eax,ebx
c0004a0a:	5b                   	pop    ebx
c0004a0b:	5e                   	pop    esi
c0004a0c:	5f                   	pop    edi
c0004a0d:	c3                   	ret    

c0004a0e <f_getfree>:
c0004a0e:	55                   	push   ebp
c0004a0f:	31 c9                	xor    ecx,ecx
c0004a11:	57                   	push   edi
c0004a12:	56                   	push   esi
c0004a13:	53                   	push   ebx
c0004a14:	83 ec 2c             	sub    esp,0x2c
c0004a17:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004a1b:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004a1f:	e8 8e dc ff ff       	call   c00026b2 <mount_volume>
c0004a24:	85 c0                	test   eax,eax
c0004a26:	89 c6                	mov    esi,eax
c0004a28:	0f 85 df 00 00 00    	jne    c0004b0d <f_getfree+0xff>
c0004a2e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0004a32:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004a36:	89 18                	mov    DWORD PTR [eax],ebx
c0004a38:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c0004a3b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004a3e:	8d 57 fe             	lea    edx,[edi-0x2]
c0004a41:	39 d0                	cmp    eax,edx
c0004a43:	77 0b                	ja     c0004a50 <f_getfree+0x42>
c0004a45:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0004a49:	89 01                	mov    DWORD PTR [ecx],eax
c0004a4b:	e9 bd 00 00 00       	jmp    c0004b0d <f_getfree+0xff>
c0004a50:	80 3b 01             	cmp    BYTE PTR [ebx],0x1
c0004a53:	75 29                	jne    c0004a7e <f_getfree+0x70>
c0004a55:	bf 02 00 00 00       	mov    edi,0x2
c0004a5a:	31 ed                	xor    ebp,ebp
c0004a5c:	89 fa                	mov    edx,edi
c0004a5e:	89 d8                	mov    eax,ebx
c0004a60:	e8 cd e9 ff ff       	call   c0003432 <get_fat.isra.2>
c0004a65:	83 f8 ff             	cmp    eax,0xffffffff
c0004a68:	74 7d                	je     c0004ae7 <f_getfree+0xd9>
c0004a6a:	83 f8 01             	cmp    eax,0x1
c0004a6d:	74 7f                	je     c0004aee <f_getfree+0xe0>
c0004a6f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a73:	83 d5 00             	adc    ebp,0x0
c0004a76:	47                   	inc    edi
c0004a77:	39 78 18             	cmp    DWORD PTR [eax+0x18],edi
c0004a7a:	77 e0                	ja     c0004a5c <f_getfree+0x4e>
c0004a7c:	eb 79                	jmp    c0004af7 <f_getfree+0xe9>
c0004a7e:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0004a81:	31 ed                	xor    ebp,ebp
c0004a83:	31 db                	xor    ebx,ebx
c0004a85:	85 db                	test   ebx,ebx
c0004a87:	75 18                	jne    c0004aa1 <f_getfree+0x93>
c0004a89:	8d 42 01             	lea    eax,[edx+0x1]
c0004a8c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004a90:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a94:	e8 bc da ff ff       	call   c0002555 <move_window>
c0004a99:	85 c0                	test   eax,eax
c0004a9b:	75 58                	jne    c0004af5 <f_getfree+0xe7>
c0004a9d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004aa1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004aa5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004aa9:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c0004aac:	8d 44 19 34          	lea    eax,[ecx+ebx*1+0x34]
c0004ab0:	75 13                	jne    c0004ac5 <f_getfree+0xb7>
c0004ab2:	e8 39 d5 ff ff       	call   c0001ff0 <ld_word>
c0004ab7:	0f b7 c0             	movzx  eax,ax
c0004aba:	83 f8 01             	cmp    eax,0x1
c0004abd:	83 d5 00             	adc    ebp,0x0
c0004ac0:	83 c3 02             	add    ebx,0x2
c0004ac3:	eb 13                	jmp    c0004ad8 <f_getfree+0xca>
c0004ac5:	e8 33 d5 ff ff       	call   c0001ffd <ld_dword>
c0004aca:	25 ff ff ff 0f       	and    eax,0xfffffff
c0004acf:	83 f8 01             	cmp    eax,0x1
c0004ad2:	83 d5 00             	adc    ebp,0x0
c0004ad5:	83 c3 04             	add    ebx,0x4
c0004ad8:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0004ade:	4f                   	dec    edi
c0004adf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004ae3:	75 a0                	jne    c0004a85 <f_getfree+0x77>
c0004ae5:	eb 10                	jmp    c0004af7 <f_getfree+0xe9>
c0004ae7:	be 01 00 00 00       	mov    esi,0x1
c0004aec:	eb 09                	jmp    c0004af7 <f_getfree+0xe9>
c0004aee:	be 02 00 00 00       	mov    esi,0x2
c0004af3:	eb 02                	jmp    c0004af7 <f_getfree+0xe9>
c0004af5:	89 c6                	mov    esi,eax
c0004af7:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0004afb:	89 28                	mov    DWORD PTR [eax],ebp
c0004afd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004b01:	89 68 14             	mov    DWORD PTR [eax+0x14],ebp
c0004b04:	8a 50 04             	mov    dl,BYTE PTR [eax+0x4]
c0004b07:	83 ca 01             	or     edx,0x1
c0004b0a:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c0004b0d:	83 c4 2c             	add    esp,0x2c
c0004b10:	89 f0                	mov    eax,esi
c0004b12:	5b                   	pop    ebx
c0004b13:	5e                   	pop    esi
c0004b14:	5f                   	pop    edi
c0004b15:	5d                   	pop    ebp
c0004b16:	c3                   	ret    

c0004b17 <f_truncate>:
c0004b17:	56                   	push   esi
c0004b18:	53                   	push   ebx
c0004b19:	83 ec 14             	sub    esp,0x14
c0004b1c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004b20:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004b24:	89 d8                	mov    eax,ebx
c0004b26:	e8 81 d9 ff ff       	call   c00024ac <validate>
c0004b2b:	85 c0                	test   eax,eax
c0004b2d:	89 c6                	mov    esi,eax
c0004b2f:	0f 85 c4 00 00 00    	jne    c0004bf9 <f_truncate+0xe2>
c0004b35:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0004b39:	85 f6                	test   esi,esi
c0004b3b:	0f 85 b8 00 00 00    	jne    c0004bf9 <f_truncate+0xe2>
c0004b41:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004b45:	0f 84 a9 00 00 00    	je     c0004bf4 <f_truncate+0xdd>
c0004b4b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004b4e:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004b51:	0f 83 a2 00 00 00    	jae    c0004bf9 <f_truncate+0xe2>
c0004b57:	85 c0                	test   eax,eax
c0004b59:	75 15                	jne    c0004b70 <f_truncate+0x59>
c0004b5b:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004b5e:	31 c9                	xor    ecx,ecx
c0004b60:	89 d8                	mov    eax,ebx
c0004b62:	e8 d2 eb ff ff       	call   c0003739 <remove_chain>
c0004b67:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004b6e:	eb 35                	jmp    c0004ba5 <f_truncate+0x8e>
c0004b70:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004b73:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004b75:	e8 b8 e8 ff ff       	call   c0003432 <get_fat.isra.2>
c0004b7a:	89 c2                	mov    edx,eax
c0004b7c:	b8 01 00 00 00       	mov    eax,0x1
c0004b81:	83 fa ff             	cmp    edx,0xffffffff
c0004b84:	74 1f                	je     c0004ba5 <f_truncate+0x8e>
c0004b86:	83 fa 01             	cmp    edx,0x1
c0004b89:	b8 02 00 00 00       	mov    eax,0x2
c0004b8e:	74 15                	je     c0004ba5 <f_truncate+0x8e>
c0004b90:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004b94:	31 c0                	xor    eax,eax
c0004b96:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004b99:	76 0a                	jbe    c0004ba5 <f_truncate+0x8e>
c0004b9b:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c0004b9e:	89 d8                	mov    eax,ebx
c0004ba0:	e8 94 eb ff ff       	call   c0003739 <remove_chain>
c0004ba5:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004ba8:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004bab:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004bae:	83 ca 40             	or     edx,0x40
c0004bb1:	85 c0                	test   eax,eax
c0004bb3:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004bb6:	75 35                	jne    c0004bed <f_truncate+0xd6>
c0004bb8:	80 e2 80             	and    dl,0x80
c0004bbb:	74 3c                	je     c0004bf9 <f_truncate+0xe2>
c0004bbd:	6a 01                	push   0x1
c0004bbf:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004bc2:	8d 43 28             	lea    eax,[ebx+0x28]
c0004bc5:	50                   	push   eax
c0004bc6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004bca:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004bce:	50                   	push   eax
c0004bcf:	e8 e7 d3 ff ff       	call   c0001fbb <disk_write>
c0004bd4:	83 c4 10             	add    esp,0x10
c0004bd7:	85 c0                	test   eax,eax
c0004bd9:	75 0d                	jne    c0004be8 <f_truncate+0xd1>
c0004bdb:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004bde:	31 f6                	xor    esi,esi
c0004be0:	83 e0 7f             	and    eax,0x7f
c0004be3:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004be6:	eb 11                	jmp    c0004bf9 <f_truncate+0xe2>
c0004be8:	b8 01 00 00 00       	mov    eax,0x1
c0004bed:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c0004bf0:	89 c6                	mov    esi,eax
c0004bf2:	eb 05                	jmp    c0004bf9 <f_truncate+0xe2>
c0004bf4:	be 07 00 00 00       	mov    esi,0x7
c0004bf9:	83 c4 14             	add    esp,0x14
c0004bfc:	89 f0                	mov    eax,esi
c0004bfe:	5b                   	pop    ebx
c0004bff:	5e                   	pop    esi
c0004c00:	c3                   	ret    

c0004c01 <f_unlink>:
c0004c01:	55                   	push   ebp
c0004c02:	b9 02 00 00 00       	mov    ecx,0x2
c0004c07:	57                   	push   edi
c0004c08:	56                   	push   esi
c0004c09:	53                   	push   ebx
c0004c0a:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004c10:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004c14:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c0004c1b:	e8 92 da ff ff       	call   c00026b2 <mount_volume>
c0004c20:	85 c0                	test   eax,eax
c0004c22:	0f 85 ee 00 00 00    	jne    c0004d16 <f_unlink+0x115>
c0004c28:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c2c:	83 ec 0c             	sub    esp,0xc
c0004c2f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004c33:	68 00 02 00 00       	push   0x200
c0004c38:	e8 f7 11 00 00       	call   c0005e34 <ff_memalloc>
c0004c3d:	83 c4 10             	add    esp,0x10
c0004c40:	89 c3                	mov    ebx,eax
c0004c42:	b8 11 00 00 00       	mov    eax,0x11
c0004c47:	85 db                	test   ebx,ebx
c0004c49:	0f 84 c7 00 00 00    	je     c0004d16 <f_unlink+0x115>
c0004c4f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c53:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004c5a:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004c5d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c61:	e8 94 ef ff ff       	call   c0003bfa <follow_path>
c0004c66:	85 c0                	test   eax,eax
c0004c68:	0f 85 94 00 00 00    	jne    c0004d02 <f_unlink+0x101>
c0004c6e:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0004c73:	b8 06 00 00 00       	mov    eax,0x6
c0004c78:	0f 85 84 00 00 00    	jne    c0004d02 <f_unlink+0x101>
c0004c7e:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c0004c83:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004c89:	74 07                	je     c0004c92 <f_unlink+0x91>
c0004c8b:	b8 07 00 00 00       	mov    eax,0x7
c0004c90:	eb 70                	jmp    c0004d02 <f_unlink+0x101>
c0004c92:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004c96:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004c9a:	8a 07                	mov    al,BYTE PTR [edi]
c0004c9c:	e8 40 e7 ff ff       	call   c00033e1 <ld_clust.isra.0>
c0004ca1:	83 e5 10             	and    ebp,0x10
c0004ca4:	89 c6                	mov    esi,eax
c0004ca6:	75 20                	jne    c0004cc8 <f_unlink+0xc7>
c0004ca8:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004cac:	e8 a8 ed ff ff       	call   c0003a59 <dir_remove>
c0004cb1:	85 c0                	test   eax,eax
c0004cb3:	75 40                	jne    c0004cf5 <f_unlink+0xf4>
c0004cb5:	85 f6                	test   esi,esi
c0004cb7:	74 3c                	je     c0004cf5 <f_unlink+0xf4>
c0004cb9:	31 c9                	xor    ecx,ecx
c0004cbb:	89 f2                	mov    edx,esi
c0004cbd:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004cc1:	e8 73 ea ff ff       	call   c0003739 <remove_chain>
c0004cc6:	eb 2d                	jmp    c0004cf5 <f_unlink+0xf4>
c0004cc8:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004ccc:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004cd0:	31 d2                	xor    edx,edx
c0004cd2:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0004cd6:	e8 5c e8 ff ff       	call   c0003537 <dir_sdi>
c0004cdb:	85 c0                	test   eax,eax
c0004cdd:	75 23                	jne    c0004d02 <f_unlink+0x101>
c0004cdf:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004ce3:	31 d2                	xor    edx,edx
c0004ce5:	e8 47 ec ff ff       	call   c0003931 <dir_read>
c0004cea:	85 c0                	test   eax,eax
c0004cec:	74 9d                	je     c0004c8b <f_unlink+0x8a>
c0004cee:	83 f8 04             	cmp    eax,0x4
c0004cf1:	75 0f                	jne    c0004d02 <f_unlink+0x101>
c0004cf3:	eb b3                	jmp    c0004ca8 <f_unlink+0xa7>
c0004cf5:	85 c0                	test   eax,eax
c0004cf7:	75 09                	jne    c0004d02 <f_unlink+0x101>
c0004cf9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004cfd:	e8 88 e2 ff ff       	call   c0002f8a <sync_fs>
c0004d02:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004d06:	83 ec 0c             	sub    esp,0xc
c0004d09:	53                   	push   ebx
c0004d0a:	e8 3d 11 00 00       	call   c0005e4c <ff_memfree>
c0004d0f:	83 c4 10             	add    esp,0x10
c0004d12:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d16:	81 c4 8c 00 00 00    	add    esp,0x8c
c0004d1c:	5b                   	pop    ebx
c0004d1d:	5e                   	pop    esi
c0004d1e:	5f                   	pop    edi
c0004d1f:	5d                   	pop    ebp
c0004d20:	c3                   	ret    

c0004d21 <f_mkdir>:
c0004d21:	57                   	push   edi
c0004d22:	b9 02 00 00 00       	mov    ecx,0x2
c0004d27:	56                   	push   esi
c0004d28:	53                   	push   ebx
c0004d29:	83 ec 50             	sub    esp,0x50
c0004d2c:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004d30:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004d34:	e8 79 d9 ff ff       	call   c00026b2 <mount_volume>
c0004d39:	85 c0                	test   eax,eax
c0004d3b:	89 c3                	mov    ebx,eax
c0004d3d:	0f 85 70 01 00 00    	jne    c0004eb3 <f_mkdir+0x192>
c0004d43:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d47:	83 ec 0c             	sub    esp,0xc
c0004d4a:	bb 11 00 00 00       	mov    ebx,0x11
c0004d4f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004d53:	68 00 02 00 00       	push   0x200
c0004d58:	e8 d7 10 00 00       	call   c0005e34 <ff_memalloc>
c0004d5d:	83 c4 10             	add    esp,0x10
c0004d60:	85 c0                	test   eax,eax
c0004d62:	89 c7                	mov    edi,eax
c0004d64:	0f 84 49 01 00 00    	je     c0004eb3 <f_mkdir+0x192>
c0004d6a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d6e:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004d72:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004d75:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d79:	e8 7c ee ff ff       	call   c0003bfa <follow_path>
c0004d7e:	85 c0                	test   eax,eax
c0004d80:	89 c3                	mov    ebx,eax
c0004d82:	74 3e                	je     c0004dc2 <f_mkdir+0xa1>
c0004d84:	83 f8 04             	cmp    eax,0x4
c0004d87:	75 3e                	jne    c0004dc7 <f_mkdir+0xa6>
c0004d89:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d8d:	31 d2                	xor    edx,edx
c0004d8f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004d93:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004d97:	e8 63 e8 ff ff       	call   c00035ff <create_chain>
c0004d9c:	85 c0                	test   eax,eax
c0004d9e:	89 c6                	mov    esi,eax
c0004da0:	74 0c                	je     c0004dae <f_mkdir+0x8d>
c0004da2:	83 f8 01             	cmp    eax,0x1
c0004da5:	bb 02 00 00 00       	mov    ebx,0x2
c0004daa:	74 07                	je     c0004db3 <f_mkdir+0x92>
c0004dac:	eb 2a                	jmp    c0004dd8 <f_mkdir+0xb7>
c0004dae:	bb 07 00 00 00       	mov    ebx,0x7
c0004db3:	31 c9                	xor    ecx,ecx
c0004db5:	89 f2                	mov    edx,esi
c0004db7:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004dbb:	e8 79 e9 ff ff       	call   c0003739 <remove_chain>
c0004dc0:	eb 05                	jmp    c0004dc7 <f_mkdir+0xa6>
c0004dc2:	bb 08 00 00 00       	mov    ebx,0x8
c0004dc7:	83 ec 0c             	sub    esp,0xc
c0004dca:	57                   	push   edi
c0004dcb:	e8 7c 10 00 00       	call   c0005e4c <ff_memfree>
c0004dd0:	83 c4 10             	add    esp,0x10
c0004dd3:	e9 db 00 00 00       	jmp    c0004eb3 <f_mkdir+0x192>
c0004dd8:	83 f8 ff             	cmp    eax,0xffffffff
c0004ddb:	bb 01 00 00 00       	mov    ebx,0x1
c0004de0:	74 d1                	je     c0004db3 <f_mkdir+0x92>
c0004de2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004de6:	89 f2                	mov    edx,esi
c0004de8:	e8 19 dd ff ff       	call   c0002b06 <dir_clear>
c0004ded:	85 c0                	test   eax,eax
c0004def:	89 c3                	mov    ebx,eax
c0004df1:	75 c0                	jne    c0004db3 <f_mkdir+0x92>
c0004df3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004df7:	b9 0b 00 00 00       	mov    ecx,0xb
c0004dfc:	ba 20 00 00 00       	mov    edx,0x20
c0004e01:	83 c0 34             	add    eax,0x34
c0004e04:	e8 28 d2 ff ff       	call   c0002031 <mem_set>
c0004e09:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e0d:	ba 00 00 21 50       	mov    edx,0x50210000
c0004e12:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004e16:	83 c0 4a             	add    eax,0x4a
c0004e19:	c6 40 f5 10          	mov    BYTE PTR [eax-0xb],0x10
c0004e1d:	e8 f7 d1 ff ff       	call   c0002019 <st_dword>
c0004e22:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e26:	89 f1                	mov    ecx,esi
c0004e28:	8d 50 34             	lea    edx,[eax+0x34]
c0004e2b:	e8 da e5 ff ff       	call   c000340a <st_clust.isra.1>
c0004e30:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e34:	b9 20 00 00 00       	mov    ecx,0x20
c0004e39:	8d 50 34             	lea    edx,[eax+0x34]
c0004e3c:	83 c0 54             	add    eax,0x54
c0004e3f:	e8 d8 d1 ff ff       	call   c000201c <mem_cpy>
c0004e44:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e48:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004e4c:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004e50:	8d 50 54             	lea    edx,[eax+0x54]
c0004e53:	e8 b2 e5 ff ff       	call   c000340a <st_clust.isra.1>
c0004e58:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e5c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e60:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004e64:	e8 2e ee ff ff       	call   c0003c97 <dir_register>
c0004e69:	85 c0                	test   eax,eax
c0004e6b:	89 c3                	mov    ebx,eax
c0004e6d:	0f 85 40 ff ff ff    	jne    c0004db3 <f_mkdir+0x92>
c0004e73:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004e77:	ba 00 00 21 50       	mov    edx,0x50210000
c0004e7c:	83 c0 16             	add    eax,0x16
c0004e7f:	e8 95 d1 ff ff       	call   c0002019 <st_dword>
c0004e84:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004e88:	89 f1                	mov    ecx,esi
c0004e8a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e8e:	e8 77 e5 ff ff       	call   c000340a <st_clust.isra.1>
c0004e93:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004e97:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004e9b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e9f:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004ea3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ea7:	e8 de e0 ff ff       	call   c0002f8a <sync_fs>
c0004eac:	89 c3                	mov    ebx,eax
c0004eae:	e9 14 ff ff ff       	jmp    c0004dc7 <f_mkdir+0xa6>
c0004eb3:	83 c4 50             	add    esp,0x50
c0004eb6:	89 d8                	mov    eax,ebx
c0004eb8:	5b                   	pop    ebx
c0004eb9:	5e                   	pop    esi
c0004eba:	5f                   	pop    edi
c0004ebb:	c3                   	ret    

c0004ebc <f_rename>:
c0004ebc:	57                   	push   edi
c0004ebd:	56                   	push   esi
c0004ebe:	53                   	push   ebx
c0004ebf:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004ec5:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004ecc:	e8 8f d5 ff ff       	call   c0002460 <get_ldnumber>
c0004ed1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004ed5:	b9 02 00 00 00       	mov    ecx,0x2
c0004eda:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004ee1:	e8 cc d7 ff ff       	call   c00026b2 <mount_volume>
c0004ee6:	85 c0                	test   eax,eax
c0004ee8:	0f 85 7c 01 00 00    	jne    c000506a <f_rename+0x1ae>
c0004eee:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ef2:	83 ec 0c             	sub    esp,0xc
c0004ef5:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004ef9:	68 00 02 00 00       	push   0x200
c0004efe:	e8 31 0f 00 00       	call   c0005e34 <ff_memalloc>
c0004f03:	83 c4 10             	add    esp,0x10
c0004f06:	89 c6                	mov    esi,eax
c0004f08:	b8 11 00 00 00       	mov    eax,0x11
c0004f0d:	85 f6                	test   esi,esi
c0004f0f:	0f 84 55 01 00 00    	je     c000506a <f_rename+0x1ae>
c0004f15:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f19:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004f20:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004f23:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004f27:	e8 ce ec ff ff       	call   c0003bfa <follow_path>
c0004f2c:	85 c0                	test   eax,eax
c0004f2e:	0f 85 22 01 00 00    	jne    c0005056 <f_rename+0x19a>
c0004f34:	8a 54 24 6b          	mov    dl,BYTE PTR [esp+0x6b]
c0004f38:	b8 06 00 00 00       	mov    eax,0x6
c0004f3d:	80 e2 a0             	and    dl,0xa0
c0004f40:	0f 85 10 01 00 00    	jne    c0005056 <f_rename+0x19a>
c0004f46:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004f4a:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004f4e:	b9 20 00 00 00       	mov    ecx,0x20
c0004f53:	e8 c4 d0 ff ff       	call   c000201c <mem_cpy>
c0004f58:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004f5c:	b9 30 00 00 00       	mov    ecx,0x30
c0004f61:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004f65:	e8 b2 d0 ff ff       	call   c000201c <mem_cpy>
c0004f6a:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004f71:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004f75:	e8 80 ec ff ff       	call   c0003bfa <follow_path>
c0004f7a:	85 c0                	test   eax,eax
c0004f7c:	75 20                	jne    c0004f9e <f_rename+0xe2>
c0004f7e:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004f82:	b8 08 00 00 00       	mov    eax,0x8
c0004f87:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004f8b:	0f 85 c5 00 00 00    	jne    c0005056 <f_rename+0x19a>
c0004f91:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004f95:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004f9c:	eb 03                	jmp    c0004fa1 <f_rename+0xe5>
c0004f9e:	83 f8 04             	cmp    eax,0x4
c0004fa1:	0f 85 af 00 00 00    	jne    c0005056 <f_rename+0x19a>
c0004fa7:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004fab:	e8 e7 ec ff ff       	call   c0003c97 <dir_register>
c0004fb0:	85 c0                	test   eax,eax
c0004fb2:	0f 85 9e 00 00 00    	jne    c0005056 <f_rename+0x19a>
c0004fb8:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004fbf:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004fc3:	b9 13 00 00 00       	mov    ecx,0x13
c0004fc8:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004fcb:	e8 4c d0 ff ff       	call   c000201c <mem_cpy>
c0004fd0:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004fd4:	a8 10                	test   al,0x10
c0004fd6:	75 03                	jne    c0004fdb <f_rename+0x11f>
c0004fd8:	83 c8 20             	or     eax,0x20
c0004fdb:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004fde:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fe2:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004fe6:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004fea:	74 54                	je     c0005040 <f_rename+0x184>
c0004fec:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004ff0:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004ff4:	74 4a                	je     c0005040 <f_rename+0x184>
c0004ff6:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004ffa:	89 da                	mov    edx,ebx
c0004ffc:	8a 07                	mov    al,BYTE PTR [edi]
c0004ffe:	e8 de e3 ff ff       	call   c00033e1 <ld_clust.isra.0>
c0005003:	89 c2                	mov    edx,eax
c0005005:	89 f8                	mov    eax,edi
c0005007:	e8 3a d2 ff ff       	call   c0002246 <clst2sect>
c000500c:	89 c2                	mov    edx,eax
c000500e:	b8 02 00 00 00       	mov    eax,0x2
c0005013:	85 d2                	test   edx,edx
c0005015:	74 3f                	je     c0005056 <f_rename+0x19a>
c0005017:	89 f8                	mov    eax,edi
c0005019:	e8 37 d5 ff ff       	call   c0002555 <move_window>
c000501e:	85 c0                	test   eax,eax
c0005020:	75 34                	jne    c0005056 <f_rename+0x19a>
c0005022:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005026:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c000502a:	75 14                	jne    c0005040 <f_rename+0x184>
c000502c:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0005030:	8d 50 54             	lea    edx,[eax+0x54]
c0005033:	e8 d2 e3 ff ff       	call   c000340a <st_clust.isra.1>
c0005038:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000503c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005040:	8d 44 24 40          	lea    eax,[esp+0x40]
c0005044:	e8 10 ea ff ff       	call   c0003a59 <dir_remove>
c0005049:	85 c0                	test   eax,eax
c000504b:	75 09                	jne    c0005056 <f_rename+0x19a>
c000504d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005051:	e8 34 df ff ff       	call   c0002f8a <sync_fs>
c0005056:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000505a:	83 ec 0c             	sub    esp,0xc
c000505d:	56                   	push   esi
c000505e:	e8 e9 0d 00 00       	call   c0005e4c <ff_memfree>
c0005063:	83 c4 10             	add    esp,0x10
c0005066:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000506a:	81 c4 a0 00 00 00    	add    esp,0xa0
c0005070:	5b                   	pop    ebx
c0005071:	5e                   	pop    esi
c0005072:	5f                   	pop    edi
c0005073:	c3                   	ret    

c0005074 <f_chmod>:
c0005074:	57                   	push   edi
c0005075:	b9 02 00 00 00       	mov    ecx,0x2
c000507a:	56                   	push   esi
c000507b:	53                   	push   ebx
c000507c:	83 ec 50             	sub    esp,0x50
c000507f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005083:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0005087:	8d 44 24 60          	lea    eax,[esp+0x60]
c000508b:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c000508f:	e8 1e d6 ff ff       	call   c00026b2 <mount_volume>
c0005094:	85 c0                	test   eax,eax
c0005096:	0f 85 81 00 00 00    	jne    c000511d <f_chmod+0xa9>
c000509c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050a0:	83 ec 0c             	sub    esp,0xc
c00050a3:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00050a7:	68 00 02 00 00       	push   0x200
c00050ac:	e8 83 0d 00 00       	call   c0005e34 <ff_memalloc>
c00050b1:	83 c4 10             	add    esp,0x10
c00050b4:	89 c6                	mov    esi,eax
c00050b6:	b8 11 00 00 00       	mov    eax,0x11
c00050bb:	85 f6                	test   esi,esi
c00050bd:	74 5e                	je     c000511d <f_chmod+0xa9>
c00050bf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050c3:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00050c7:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00050ca:	8d 44 24 20          	lea    eax,[esp+0x20]
c00050ce:	e8 27 eb ff ff       	call   c0003bfa <follow_path>
c00050d3:	85 c0                	test   eax,eax
c00050d5:	75 32                	jne    c0005109 <f_chmod+0x95>
c00050d7:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c00050db:	b8 06 00 00 00       	mov    eax,0x6
c00050e0:	80 e2 a0             	and    dl,0xa0
c00050e3:	75 24                	jne    c0005109 <f_chmod+0x95>
c00050e5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050e9:	8a 50 0b             	mov    dl,BYTE PTR [eax+0xb]
c00050ec:	31 d7                	xor    edi,edx
c00050ee:	21 fb                	and    ebx,edi
c00050f0:	83 e3 27             	and    ebx,0x27
c00050f3:	31 d3                	xor    ebx,edx
c00050f5:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c00050f8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050fc:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005100:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005104:	e8 81 de ff ff       	call   c0002f8a <sync_fs>
c0005109:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000510d:	83 ec 0c             	sub    esp,0xc
c0005110:	56                   	push   esi
c0005111:	e8 36 0d 00 00       	call   c0005e4c <ff_memfree>
c0005116:	83 c4 10             	add    esp,0x10
c0005119:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000511d:	83 c4 50             	add    esp,0x50
c0005120:	5b                   	pop    ebx
c0005121:	5e                   	pop    esi
c0005122:	5f                   	pop    edi
c0005123:	c3                   	ret    

c0005124 <f_utime>:
c0005124:	56                   	push   esi
c0005125:	b9 02 00 00 00       	mov    ecx,0x2
c000512a:	53                   	push   ebx
c000512b:	83 ec 54             	sub    esp,0x54
c000512e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005132:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0005136:	8d 44 24 60          	lea    eax,[esp+0x60]
c000513a:	e8 73 d5 ff ff       	call   c00026b2 <mount_volume>
c000513f:	85 c0                	test   eax,eax
c0005141:	0f 85 87 00 00 00    	jne    c00051ce <f_utime+0xaa>
c0005147:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000514b:	83 ec 0c             	sub    esp,0xc
c000514e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005152:	68 00 02 00 00       	push   0x200
c0005157:	e8 d8 0c 00 00       	call   c0005e34 <ff_memalloc>
c000515c:	83 c4 10             	add    esp,0x10
c000515f:	89 c3                	mov    ebx,eax
c0005161:	b8 11 00 00 00       	mov    eax,0x11
c0005166:	85 db                	test   ebx,ebx
c0005168:	74 64                	je     c00051ce <f_utime+0xaa>
c000516a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000516e:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0005172:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0005175:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005179:	e8 7c ea ff ff       	call   c0003bfa <follow_path>
c000517e:	85 c0                	test   eax,eax
c0005180:	75 38                	jne    c00051ba <f_utime+0x96>
c0005182:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0005186:	b8 06 00 00 00       	mov    eax,0x6
c000518b:	80 e2 a0             	and    dl,0xa0
c000518e:	75 2a                	jne    c00051ba <f_utime+0x96>
c0005190:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0005194:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0005198:	c1 e2 10             	shl    edx,0x10
c000519b:	09 c2                	or     edx,eax
c000519d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00051a1:	83 c0 16             	add    eax,0x16
c00051a4:	e8 70 ce ff ff       	call   c0002019 <st_dword>
c00051a9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00051ad:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00051b1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00051b5:	e8 d0 dd ff ff       	call   c0002f8a <sync_fs>
c00051ba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00051be:	83 ec 0c             	sub    esp,0xc
c00051c1:	53                   	push   ebx
c00051c2:	e8 85 0c 00 00       	call   c0005e4c <ff_memfree>
c00051c7:	83 c4 10             	add    esp,0x10
c00051ca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00051ce:	83 c4 54             	add    esp,0x54
c00051d1:	5b                   	pop    ebx
c00051d2:	5e                   	pop    esi
c00051d3:	c3                   	ret    

c00051d4 <f_getlabel>:
c00051d4:	55                   	push   ebp
c00051d5:	31 c9                	xor    ecx,ecx
c00051d7:	57                   	push   edi
c00051d8:	56                   	push   esi
c00051d9:	53                   	push   ebx
c00051da:	83 ec 5c             	sub    esp,0x5c
c00051dd:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00051e1:	8b 7c 24 74          	mov    edi,DWORD PTR [esp+0x74]
c00051e5:	8d 44 24 70          	lea    eax,[esp+0x70]
c00051e9:	e8 c4 d4 ff ff       	call   c00026b2 <mount_volume>
c00051ee:	85 c0                	test   eax,eax
c00051f0:	89 c3                	mov    ebx,eax
c00051f2:	0f 85 d9 00 00 00    	jne    c00052d1 <f_getlabel+0xfd>
c00051f8:	85 ff                	test   edi,edi
c00051fa:	0f 84 d1 00 00 00    	je     c00052d1 <f_getlabel+0xfd>
c0005200:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0005208:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000520c:	31 d2                	xor    edx,edx
c000520e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005212:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005216:	e8 1c e3 ff ff       	call   c0003537 <dir_sdi>
c000521b:	85 c0                	test   eax,eax
c000521d:	89 c3                	mov    ebx,eax
c000521f:	0f 85 a2 00 00 00    	jne    c00052c7 <f_getlabel+0xf3>
c0005225:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005229:	ba 01 00 00 00       	mov    edx,0x1
c000522e:	e8 fe e6 ff ff       	call   c0003931 <dir_read>
c0005233:	85 c0                	test   eax,eax
c0005235:	89 c3                	mov    ebx,eax
c0005237:	0f 85 8a 00 00 00    	jne    c00052c7 <f_getlabel+0xf3>
c000523d:	31 f6                	xor    esi,esi
c000523f:	31 d2                	xor    edx,edx
c0005241:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005245:	8d 6a 01             	lea    ebp,[edx+0x1]
c0005248:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000524c:	0f b6 0c 10          	movzx  ecx,BYTE PTR [eax+edx*1]
c0005250:	66 89 4c 24 0c       	mov    WORD PTR [esp+0xc],cx
c0005255:	89 c8                	mov    eax,ecx
c0005257:	e8 13 ce ff ff       	call   c000206f <dbc_1st>
c000525c:	85 c0                	test   eax,eax
c000525e:	74 19                	je     c0005279 <f_getlabel+0xa5>
c0005260:	83 fd 0b             	cmp    ebp,0xb
c0005263:	74 14                	je     c0005279 <f_getlabel+0xa5>
c0005265:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005269:	c1 e1 08             	shl    ecx,0x8
c000526c:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0005270:	8d 6a 02             	lea    ebp,[edx+0x2]
c0005273:	09 c1                	or     ecx,eax
c0005275:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005279:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000527e:	52                   	push   edx
c000527f:	52                   	push   edx
c0005280:	68 b5 01 00 00       	push   0x1b5
c0005285:	50                   	push   eax
c0005286:	e8 75 0c 00 00       	call   c0005f00 <ff_oem2uni>
c000528b:	83 c4 10             	add    esp,0x10
c000528e:	0f b7 c0             	movzx  eax,ax
c0005291:	85 c0                	test   eax,eax
c0005293:	74 1f                	je     c00052b4 <f_getlabel+0xe0>
c0005295:	8d 14 37             	lea    edx,[edi+esi*1]
c0005298:	b9 04 00 00 00       	mov    ecx,0x4
c000529d:	e8 ab ce ff ff       	call   c000214d <put_utf>
c00052a2:	0f b6 c0             	movzx  eax,al
c00052a5:	85 c0                	test   eax,eax
c00052a7:	74 0b                	je     c00052b4 <f_getlabel+0xe0>
c00052a9:	01 c6                	add    esi,eax
c00052ab:	83 fd 0b             	cmp    ebp,0xb
c00052ae:	74 06                	je     c00052b6 <f_getlabel+0xe2>
c00052b0:	89 ea                	mov    edx,ebp
c00052b2:	eb 8d                	jmp    c0005241 <f_getlabel+0x6d>
c00052b4:	31 f6                	xor    esi,esi
c00052b6:	01 fe                	add    esi,edi
c00052b8:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00052bb:	39 f7                	cmp    edi,esi
c00052bd:	74 12                	je     c00052d1 <f_getlabel+0xfd>
c00052bf:	4e                   	dec    esi
c00052c0:	80 3e 20             	cmp    BYTE PTR [esi],0x20
c00052c3:	74 f3                	je     c00052b8 <f_getlabel+0xe4>
c00052c5:	eb 0a                	jmp    c00052d1 <f_getlabel+0xfd>
c00052c7:	83 fb 04             	cmp    ebx,0x4
c00052ca:	75 05                	jne    c00052d1 <f_getlabel+0xfd>
c00052cc:	c6 07 00             	mov    BYTE PTR [edi],0x0
c00052cf:	31 db                	xor    ebx,ebx
c00052d1:	85 db                	test   ebx,ebx
c00052d3:	75 49                	jne    c000531e <f_getlabel+0x14a>
c00052d5:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c00052da:	74 42                	je     c000531e <f_getlabel+0x14a>
c00052dc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00052e0:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00052e3:	e8 6d d2 ff ff       	call   c0002555 <move_window>
c00052e8:	85 c0                	test   eax,eax
c00052ea:	89 c3                	mov    ebx,eax
c00052ec:	75 30                	jne    c000531e <f_getlabel+0x14a>
c00052ee:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00052f2:	b8 43 00 00 00       	mov    eax,0x43
c00052f7:	0f b6 0a             	movzx  ecx,BYTE PTR [edx]
c00052fa:	83 f9 03             	cmp    ecx,0x3
c00052fd:	74 10                	je     c000530f <f_getlabel+0x13b>
c00052ff:	83 f9 04             	cmp    ecx,0x4
c0005302:	b8 64 00 00 00       	mov    eax,0x64
c0005307:	b9 27 00 00 00       	mov    ecx,0x27
c000530c:	0f 45 c1             	cmovne eax,ecx
c000530f:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0005313:	e8 e5 cc ff ff       	call   c0001ffd <ld_dword>
c0005318:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c000531c:	89 07                	mov    DWORD PTR [edi],eax
c000531e:	83 c4 5c             	add    esp,0x5c
c0005321:	89 d8                	mov    eax,ebx
c0005323:	5b                   	pop    ebx
c0005324:	5e                   	pop    esi
c0005325:	5f                   	pop    edi
c0005326:	5d                   	pop    ebp
c0005327:	c3                   	ret    

c0005328 <f_setlabel>:
c0005328:	57                   	push   edi
c0005329:	b9 02 00 00 00       	mov    ecx,0x2
c000532e:	56                   	push   esi
c000532f:	53                   	push   ebx
c0005330:	83 ec 50             	sub    esp,0x50
c0005333:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005337:	8d 44 24 60          	lea    eax,[esp+0x60]
c000533b:	e8 72 d3 ff ff       	call   c00026b2 <mount_volume>
c0005340:	85 c0                	test   eax,eax
c0005342:	89 c6                	mov    esi,eax
c0005344:	0f 85 65 01 00 00    	jne    c00054af <f_setlabel+0x187>
c000534a:	b9 0b 00 00 00       	mov    ecx,0xb
c000534f:	ba 20 00 00 00       	mov    edx,0x20
c0005354:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0005358:	31 db                	xor    ebx,ebx
c000535a:	e8 d2 cc ff ff       	call   c0002031 <mem_set>
c000535f:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0005363:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0005366:	76 5d                	jbe    c00053c5 <f_setlabel+0x9d>
c0005368:	8d 44 24 60          	lea    eax,[esp+0x60]
c000536c:	e8 04 cd ff ff       	call   c0002075 <tchar2uni>
c0005371:	3d ff ff 00 00       	cmp    eax,0xffff
c0005376:	76 0a                	jbe    c0005382 <f_setlabel+0x5a>
c0005378:	be 06 00 00 00       	mov    esi,0x6
c000537d:	e9 2d 01 00 00       	jmp    c00054af <f_setlabel+0x187>
c0005382:	83 ec 0c             	sub    esp,0xc
c0005385:	50                   	push   eax
c0005386:	e8 ed 0b 00 00       	call   c0005f78 <ff_wtoupper>
c000538b:	5a                   	pop    edx
c000538c:	59                   	pop    ecx
c000538d:	68 b5 01 00 00       	push   0x1b5
c0005392:	50                   	push   eax
c0005393:	e8 cc 0a 00 00       	call   c0005e64 <ff_uni2oem>
c0005398:	83 c4 10             	add    esp,0x10
c000539b:	0f b7 f0             	movzx  esi,ax
c000539e:	85 f6                	test   esi,esi
c00053a0:	89 f7                	mov    edi,esi
c00053a2:	74 d4                	je     c0005378 <f_setlabel+0x50>
c00053a4:	89 f2                	mov    edx,esi
c00053a6:	b8 f0 08 02 c0       	mov    eax,0xc00208f0
c00053ab:	e8 ae cc ff ff       	call   c000205e <chk_chr>
c00053b0:	85 c0                	test   eax,eax
c00053b2:	75 c4                	jne    c0005378 <f_setlabel+0x50>
c00053b4:	81 fe ff 00 00 00    	cmp    esi,0xff
c00053ba:	0f 87 c9 00 00 00    	ja     c0005489 <f_setlabel+0x161>
c00053c0:	e9 e0 00 00 00       	jmp    c00054a5 <f_setlabel+0x17d>
c00053c5:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c00053ca:	74 ac                	je     c0005378 <f_setlabel+0x50>
c00053cc:	85 db                	test   ebx,ebx
c00053ce:	74 0e                	je     c00053de <f_setlabel+0xb6>
c00053d0:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c00053d5:	8d 43 ff             	lea    eax,[ebx-0x1]
c00053d8:	75 04                	jne    c00053de <f_setlabel+0xb6>
c00053da:	89 c3                	mov    ebx,eax
c00053dc:	eb ee                	jmp    c00053cc <f_setlabel+0xa4>
c00053de:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00053e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00053ea:	31 d2                	xor    edx,edx
c00053ec:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00053f0:	8d 44 24 20          	lea    eax,[esp+0x20]
c00053f4:	e8 3e e1 ff ff       	call   c0003537 <dir_sdi>
c00053f9:	85 c0                	test   eax,eax
c00053fb:	89 c6                	mov    esi,eax
c00053fd:	0f 85 ac 00 00 00    	jne    c00054af <f_setlabel+0x187>
c0005403:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005407:	ba 01 00 00 00       	mov    edx,0x1
c000540c:	e8 20 e5 ff ff       	call   c0003931 <dir_read>
c0005411:	85 c0                	test   eax,eax
c0005413:	75 18                	jne    c000542d <f_setlabel+0x105>
c0005415:	85 db                	test   ebx,ebx
c0005417:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000541b:	74 0b                	je     c0005428 <f_setlabel+0x100>
c000541d:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005421:	b9 0b 00 00 00       	mov    ecx,0xb
c0005426:	eb 47                	jmp    c000546f <f_setlabel+0x147>
c0005428:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c000542b:	eb 47                	jmp    c0005474 <f_setlabel+0x14c>
c000542d:	83 f8 04             	cmp    eax,0x4
c0005430:	75 53                	jne    c0005485 <f_setlabel+0x15d>
c0005432:	85 db                	test   ebx,ebx
c0005434:	74 79                	je     c00054af <f_setlabel+0x187>
c0005436:	8d 44 24 20          	lea    eax,[esp+0x20]
c000543a:	ba 01 00 00 00       	mov    edx,0x1
c000543f:	e8 88 e4 ff ff       	call   c00038cc <dir_alloc>
c0005444:	85 c0                	test   eax,eax
c0005446:	89 c6                	mov    esi,eax
c0005448:	75 65                	jne    c00054af <f_setlabel+0x187>
c000544a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000544e:	b9 20 00 00 00       	mov    ecx,0x20
c0005453:	31 d2                	xor    edx,edx
c0005455:	e8 d7 cb ff ff       	call   c0002031 <mem_set>
c000545a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000545e:	b9 0b 00 00 00       	mov    ecx,0xb
c0005463:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005467:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c000546b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000546f:	e8 a8 cb ff ff       	call   c000201c <mem_cpy>
c0005474:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005478:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000547c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005480:	e8 05 db ff ff       	call   c0002f8a <sync_fs>
c0005485:	89 c6                	mov    esi,eax
c0005487:	eb 26                	jmp    c00054af <f_setlabel+0x187>
c0005489:	83 fb 09             	cmp    ebx,0x9
c000548c:	0f 87 e6 fe ff ff    	ja     c0005378 <f_setlabel+0x50>
c0005492:	89 f0                	mov    eax,esi
c0005494:	88 64 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],ah
c0005498:	43                   	inc    ebx
c0005499:	89 f8                	mov    eax,edi
c000549b:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c000549f:	43                   	inc    ebx
c00054a0:	e9 ba fe ff ff       	jmp    c000535f <f_setlabel+0x37>
c00054a5:	83 fb 0a             	cmp    ebx,0xa
c00054a8:	76 ef                	jbe    c0005499 <f_setlabel+0x171>
c00054aa:	e9 c9 fe ff ff       	jmp    c0005378 <f_setlabel+0x50>
c00054af:	83 c4 50             	add    esp,0x50
c00054b2:	89 f0                	mov    eax,esi
c00054b4:	5b                   	pop    ebx
c00054b5:	5e                   	pop    esi
c00054b6:	5f                   	pop    edi
c00054b7:	c3                   	ret    

c00054b8 <f_expand>:
c00054b8:	55                   	push   ebp
c00054b9:	57                   	push   edi
c00054ba:	56                   	push   esi
c00054bb:	53                   	push   ebx
c00054bc:	83 ec 2c             	sub    esp,0x2c
c00054bf:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00054c3:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00054c7:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00054cb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00054cf:	89 d8                	mov    eax,ebx
c00054d1:	e8 d6 cf ff ff       	call   c00024ac <validate>
c00054d6:	85 c0                	test   eax,eax
c00054d8:	89 c6                	mov    esi,eax
c00054da:	0f 85 3b 01 00 00    	jne    c000561b <f_expand+0x163>
c00054e0:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c00054e4:	85 f6                	test   esi,esi
c00054e6:	0f 85 2f 01 00 00    	jne    c000561b <f_expand+0x163>
c00054ec:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c00054f1:	75 0a                	jne    c00054fd <f_expand+0x45>
c00054f3:	be 07 00 00 00       	mov    esi,0x7
c00054f8:	e9 1e 01 00 00       	jmp    c000561b <f_expand+0x163>
c00054fd:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c0005501:	75 f0                	jne    c00054f3 <f_expand+0x3b>
c0005503:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0005507:	74 ea                	je     c00054f3 <f_expand+0x3b>
c0005509:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000550d:	0f b7 79 0a          	movzx  edi,WORD PTR [ecx+0xa]
c0005511:	c1 e7 09             	shl    edi,0x9
c0005514:	8d 47 ff             	lea    eax,[edi-0x1]
c0005517:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c000551b:	0f 95 c0             	setne  al
c000551e:	31 d2                	xor    edx,edx
c0005520:	0f b6 c0             	movzx  eax,al
c0005523:	89 c5                	mov    ebp,eax
c0005525:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005529:	f7 f7                	div    edi
c000552b:	8b 79 10             	mov    edi,DWORD PTR [ecx+0x10]
c000552e:	01 e8                	add    eax,ebp
c0005530:	83 ff 01             	cmp    edi,0x1
c0005533:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005537:	76 05                	jbe    c000553e <f_expand+0x86>
c0005539:	39 79 18             	cmp    DWORD PTR [ecx+0x18],edi
c000553c:	77 05                	ja     c0005543 <f_expand+0x8b>
c000553e:	bf 02 00 00 00       	mov    edi,0x2
c0005543:	89 3c 24             	mov    DWORD PTR [esp],edi
c0005546:	89 fd                	mov    ebp,edi
c0005548:	31 c9                	xor    ecx,ecx
c000554a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000554e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005550:	89 ea                	mov    edx,ebp
c0005552:	45                   	inc    ebp
c0005553:	e8 da de ff ff       	call   c0003432 <get_fat.isra.2>
c0005558:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000555c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005560:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c0005563:	77 05                	ja     c000556a <f_expand+0xb2>
c0005565:	bd 02 00 00 00       	mov    ebp,0x2
c000556a:	83 f8 01             	cmp    eax,0x1
c000556d:	74 20                	je     c000558f <f_expand+0xd7>
c000556f:	83 f8 ff             	cmp    eax,0xffffffff
c0005572:	74 25                	je     c0005599 <f_expand+0xe1>
c0005574:	85 c0                	test   eax,eax
c0005576:	75 09                	jne    c0005581 <f_expand+0xc9>
c0005578:	41                   	inc    ecx
c0005579:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c000557d:	75 07                	jne    c0005586 <f_expand+0xce>
c000557f:	eb 1f                	jmp    c00055a0 <f_expand+0xe8>
c0005581:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0005584:	31 c9                	xor    ecx,ecx
c0005586:	39 fd                	cmp    ebp,edi
c0005588:	75 c0                	jne    c000554a <f_expand+0x92>
c000558a:	e9 64 ff ff ff       	jmp    c00054f3 <f_expand+0x3b>
c000558f:	be 02 00 00 00       	mov    esi,0x2
c0005594:	e9 82 00 00 00       	jmp    c000561b <f_expand+0x163>
c0005599:	be 01 00 00 00       	mov    esi,0x1
c000559e:	eb 7b                	jmp    c000561b <f_expand+0x163>
c00055a0:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00055a5:	74 2b                	je     c00055d2 <f_expand+0x11a>
c00055a7:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00055aa:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c00055ae:	85 ed                	test   ebp,ebp
c00055b0:	74 24                	je     c00055d6 <f_expand+0x11e>
c00055b2:	83 c9 ff             	or     ecx,0xffffffff
c00055b5:	83 fd 01             	cmp    ebp,0x1
c00055b8:	74 03                	je     c00055bd <f_expand+0x105>
c00055ba:	8d 4f 01             	lea    ecx,[edi+0x1]
c00055bd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00055c1:	89 fa                	mov    edx,edi
c00055c3:	e8 e7 d3 ff ff       	call   c00029af <put_fat>
c00055c8:	85 c0                	test   eax,eax
c00055ca:	75 4d                	jne    c0005619 <f_expand+0x161>
c00055cc:	89 f8                	mov    eax,edi
c00055ce:	4d                   	dec    ebp
c00055cf:	47                   	inc    edi
c00055d0:	eb dc                	jmp    c00055ae <f_expand+0xf6>
c00055d2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00055d5:	48                   	dec    eax
c00055d6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00055da:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00055df:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c00055e2:	74 37                	je     c000561b <f_expand+0x163>
c00055e4:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00055e7:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00055ea:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055ee:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00055f1:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00055f4:	83 c8 40             	or     eax,0x40
c00055f7:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00055fa:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c00055fd:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0005600:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0005603:	39 c8                	cmp    eax,ecx
c0005605:	77 14                	ja     c000561b <f_expand+0x163>
c0005607:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000560b:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000560e:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0005611:	83 c8 01             	or     eax,0x1
c0005614:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0005617:	eb 02                	jmp    c000561b <f_expand+0x163>
c0005619:	89 c6                	mov    esi,eax
c000561b:	83 c4 2c             	add    esp,0x2c
c000561e:	89 f0                	mov    eax,esi
c0005620:	5b                   	pop    ebx
c0005621:	5e                   	pop    esi
c0005622:	5f                   	pop    edi
c0005623:	5d                   	pop    ebp
c0005624:	c3                   	ret    

c0005625 <f_mkfs>:
c0005625:	55                   	push   ebp
c0005626:	57                   	push   edi
c0005627:	56                   	push   esi
c0005628:	be 0b 00 00 00       	mov    esi,0xb
c000562d:	53                   	push   ebx
c000562e:	83 ec 5c             	sub    esp,0x5c
c0005631:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005635:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0005639:	8b 6c 24 78          	mov    ebp,DWORD PTR [esp+0x78]
c000563d:	e8 1e ce ff ff       	call   c0002460 <get_ldnumber>
c0005642:	85 c0                	test   eax,eax
c0005644:	0f 88 e0 07 00 00    	js     c0005e2a <f_mkfs+0x805>
c000564a:	8b 14 85 a0 64 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9b60]
c0005651:	85 d2                	test   edx,edx
c0005653:	74 03                	je     c0005658 <f_mkfs+0x33>
c0005655:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0005658:	85 db                	test   ebx,ebx
c000565a:	75 05                	jne    c0005661 <f_mkfs+0x3c>
c000565c:	bb e0 08 02 c0       	mov    ebx,0xc00208e0
c0005661:	0f b6 c0             	movzx  eax,al
c0005664:	83 ec 0c             	sub    esp,0xc
c0005667:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000566b:	be 03 00 00 00       	mov    esi,0x3
c0005670:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005674:	e8 29 c9 ff ff       	call   c0001fa2 <disk_initialize>
c0005679:	83 c4 10             	add    esp,0x10
c000567c:	a8 01                	test   al,0x1
c000567e:	0f 85 a6 07 00 00    	jne    c0005e2a <f_mkfs+0x805>
c0005684:	a8 04                	test   al,0x4
c0005686:	be 0a 00 00 00       	mov    esi,0xa
c000568b:	0f 85 99 07 00 00    	jne    c0005e2a <f_mkfs+0x805>
c0005691:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0005694:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0005698:	85 c0                	test   eax,eax
c000569a:	75 20                	jne    c00056bc <f_mkfs+0x97>
c000569c:	51                   	push   ecx
c000569d:	8d 44 24 44          	lea    eax,[esp+0x44]
c00056a1:	50                   	push   eax
c00056a2:	6a 03                	push   0x3
c00056a4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00056a8:	e8 24 c9 ff ff       	call   c0001fd1 <disk_ioctl>
c00056ad:	83 c4 10             	add    esp,0x10
c00056b0:	85 c0                	test   eax,eax
c00056b2:	74 08                	je     c00056bc <f_mkfs+0x97>
c00056b4:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00056bc:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00056c0:	8d 42 ff             	lea    eax,[edx-0x1]
c00056c3:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00056c8:	77 04                	ja     c00056ce <f_mkfs+0xa9>
c00056ca:	85 c2                	test   edx,eax
c00056cc:	74 08                	je     c00056d6 <f_mkfs+0xb1>
c00056ce:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00056d6:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00056d9:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00056dd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00056e1:	48                   	dec    eax
c00056e2:	3c 01                	cmp    al,0x1
c00056e4:	76 05                	jbe    c00056eb <f_mkfs+0xc6>
c00056e6:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c00056eb:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00056ee:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00056f2:	48                   	dec    eax
c00056f3:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00056f8:	77 15                	ja     c000570f <f_mkfs+0xea>
c00056fa:	f6 44 24 10 0f       	test   BYTE PTR [esp+0x10],0xf
c00056ff:	b8 00 02 00 00       	mov    eax,0x200
c0005704:	0f 44 44 24 10       	cmove  eax,DWORD PTR [esp+0x10]
c0005709:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000570d:	eb 08                	jmp    c0005717 <f_mkfs+0xf2>
c000570f:	c7 44 24 10 00 02 00 00 	mov    DWORD PTR [esp+0x10],0x200
c0005717:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c000571a:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c0005720:	77 0f                	ja     c0005731 <f_mkfs+0x10c>
c0005722:	8d 47 ff             	lea    eax,[edi-0x1]
c0005725:	85 f8                	test   eax,edi
c0005727:	b8 00 00 00 00       	mov    eax,0x0
c000572c:	0f 45 f8             	cmovne edi,eax
c000572f:	eb 02                	jmp    c0005733 <f_mkfs+0x10e>
c0005731:	31 ff                	xor    edi,edi
c0005733:	81 7c 24 7c ff 01 00 00 	cmp    DWORD PTR [esp+0x7c],0x1ff
c000573b:	77 0a                	ja     c0005747 <f_mkfs+0x122>
c000573d:	be 11 00 00 00       	mov    esi,0x11
c0005742:	e9 e3 06 00 00       	jmp    c0005e2a <f_mkfs+0x805>
c0005747:	85 ed                	test   ebp,ebp
c0005749:	8b 33                	mov    esi,DWORD PTR [ebx]
c000574b:	89 eb                	mov    ebx,ebp
c000574d:	75 1e                	jne    c000576d <f_mkfs+0x148>
c000574f:	83 ec 0c             	sub    esp,0xc
c0005752:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0005759:	25 00 fe ff ff       	and    eax,0xfffffe00
c000575e:	50                   	push   eax
c000575f:	e8 d0 06 00 00       	call   c0005e34 <ff_memalloc>
c0005764:	83 c4 10             	add    esp,0x10
c0005767:	85 c0                	test   eax,eax
c0005769:	89 c3                	mov    ebx,eax
c000576b:	74 d0                	je     c000573d <f_mkfs+0x118>
c000576d:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0005775:	52                   	push   edx
c0005776:	8d 44 24 48          	lea    eax,[esp+0x48]
c000577a:	50                   	push   eax
c000577b:	6a 01                	push   0x1
c000577d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005781:	e8 4b c8 ff ff       	call   c0001fd1 <disk_ioctl>
c0005786:	83 c4 10             	add    esp,0x10
c0005789:	85 c0                	test   eax,eax
c000578b:	0f 85 42 06 00 00    	jne    c0005dd3 <f_mkfs+0x7ae>
c0005791:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005799:	89 f0                	mov    eax,esi
c000579b:	83 e0 08             	and    eax,0x8
c000579e:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00057a2:	75 18                	jne    c00057bc <f_mkfs+0x197>
c00057a4:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00057a8:	83 f8 3f             	cmp    eax,0x3f
c00057ab:	76 0f                	jbe    c00057bc <f_mkfs+0x197>
c00057ad:	c7 44 24 14 3f 00 00 00 	mov    DWORD PTR [esp+0x14],0x3f
c00057b5:	83 e8 3f             	sub    eax,0x3f
c00057b8:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00057bc:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00057c0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00057c4:	83 f8 7f             	cmp    eax,0x7f
c00057c7:	0f 86 5f 02 00 00    	jbe    c0005a2c <f_mkfs+0x407>
c00057cd:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c00057d3:	b9 80 00 00 00       	mov    ecx,0x80
c00057d8:	77 05                	ja     c00057df <f_mkfs+0x1ba>
c00057da:	c1 ef 09             	shr    edi,0x9
c00057dd:	89 f9                	mov    ecx,edi
c00057df:	89 f0                	mov    eax,esi
c00057e1:	89 f7                	mov    edi,esi
c00057e3:	83 e0 01             	and    eax,0x1
c00057e6:	83 e7 02             	and    edi,0x2
c00057e9:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c00057ed:	0f b6 c0             	movzx  eax,al
c00057f0:	74 0a                	je     c00057fc <f_mkfs+0x1d7>
c00057f2:	85 c0                	test   eax,eax
c00057f4:	0f 84 53 01 00 00    	je     c000594d <f_mkfs+0x328>
c00057fa:	eb 37                	jmp    c0005833 <f_mkfs+0x20e>
c00057fc:	85 c0                	test   eax,eax
c00057fe:	be 13 00 00 00       	mov    esi,0x13
c0005803:	75 2e                	jne    c0005833 <f_mkfs+0x20e>
c0005805:	e9 e0 05 00 00       	jmp    c0005dea <f_mkfs+0x7c5>
c000580a:	83 f8 02             	cmp    eax,0x2
c000580d:	0f 85 11 02 00 00    	jne    c0005a24 <f_mkfs+0x3ff>
c0005813:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005819:	0f 86 e8 01 00 00    	jbe    c0005a07 <f_mkfs+0x3e2>
c000581f:	85 c9                	test   ecx,ecx
c0005821:	0f 85 d5 05 00 00    	jne    c0005dfc <f_mkfs+0x7d7>
c0005827:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c000582a:	83 f9 40             	cmp    ecx,0x40
c000582d:	0f 87 d9 05 00 00    	ja     c0005e0c <f_mkfs+0x7e7>
c0005833:	85 c9                	test   ecx,ecx
c0005835:	89 cf                	mov    edi,ecx
c0005837:	75 1c                	jne    c0005855 <f_mkfs+0x230>
c0005839:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000583d:	b8 c0 08 02 c0       	mov    eax,0xc00208c0
c0005842:	bf 01 00 00 00       	mov    edi,0x1
c0005847:	c1 ee 0c             	shr    esi,0xc
c000584a:	0f b7 10             	movzx  edx,WORD PTR [eax]
c000584d:	85 d2                	test   edx,edx
c000584f:	0f 85 67 01 00 00    	jne    c00059bc <f_mkfs+0x397>
c0005855:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005859:	31 d2                	xor    edx,edx
c000585b:	f7 f7                	div    edi
c000585d:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005862:	0f 86 66 01 00 00    	jbe    c00059ce <f_mkfs+0x3a9>
c0005868:	c6 44 24 0b 02       	mov    BYTE PTR [esp+0xb],0x2
c000586d:	83 c0 02             	add    eax,0x2
c0005870:	01 c0                	add    eax,eax
c0005872:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c000587a:	05 ff 01 00 00       	add    eax,0x1ff
c000587f:	c1 e8 09             	shr    eax,0x9
c0005882:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005886:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000588a:	c1 e0 05             	shl    eax,0x5
c000588d:	c1 e8 09             	shr    eax,0x9
c0005890:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0005894:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0005899:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000589d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00058a1:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c00058a5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00058a9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00058ad:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c00058b2:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c00058b6:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00058ba:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00058be:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00058c2:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00058c6:	8d 74 10 ff          	lea    esi,[eax+edx*1-0x1]
c00058ca:	f7 d8                	neg    eax
c00058cc:	21 c6                	and    esi,eax
c00058ce:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00058d3:	29 d6                	sub    esi,edx
c00058d5:	83 f8 03             	cmp    eax,0x3
c00058d8:	0f 85 03 01 00 00    	jne    c00059e1 <f_mkfs+0x3bc>
c00058de:	01 74 24 24          	add    DWORD PTR [esp+0x24],esi
c00058e2:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c00058e6:	89 f8                	mov    eax,edi
c00058e8:	c1 e0 04             	shl    eax,0x4
c00058eb:	2b 44 24 14          	sub    eax,DWORD PTR [esp+0x14]
c00058ef:	03 44 24 34          	add    eax,DWORD PTR [esp+0x34]
c00058f3:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c00058f7:	0f 82 2f 01 00 00    	jb     c0005a2c <f_mkfs+0x407>
c00058fd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005901:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c0005905:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0005909:	89 c2                	mov    edx,eax
c000590b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000590f:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c0005914:	29 c2                	sub    edx,eax
c0005916:	89 d0                	mov    eax,edx
c0005918:	31 d2                	xor    edx,edx
c000591a:	f7 f7                	div    edi
c000591c:	89 c6                	mov    esi,eax
c000591e:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005923:	83 f8 03             	cmp    eax,0x3
c0005926:	0f 85 de fe ff ff    	jne    c000580a <f_mkfs+0x1e5>
c000592c:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005932:	0f 87 03 01 00 00    	ja     c0005a3b <f_mkfs+0x416>
c0005938:	85 c9                	test   ecx,ecx
c000593a:	0f 85 ec 00 00 00    	jne    c0005a2c <f_mkfs+0x407>
c0005940:	83 ff 01             	cmp    edi,0x1
c0005943:	0f 86 e3 00 00 00    	jbe    c0005a2c <f_mkfs+0x407>
c0005949:	d1 ef                	shr    edi,1
c000594b:	89 f9                	mov    ecx,edi
c000594d:	85 c9                	test   ecx,ecx
c000594f:	89 ce                	mov    esi,ecx
c0005951:	75 25                	jne    c0005978 <f_mkfs+0x353>
c0005953:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005957:	b8 d0 08 02 c0       	mov    eax,0xc00208d0
c000595c:	b9 01 00 00 00       	mov    ecx,0x1
c0005961:	c1 ee 11             	shr    esi,0x11
c0005964:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0005967:	85 d2                	test   edx,edx
c0005969:	74 0b                	je     c0005976 <f_mkfs+0x351>
c000596b:	83 c0 02             	add    eax,0x2
c000596e:	39 f2                	cmp    edx,esi
c0005970:	77 04                	ja     c0005976 <f_mkfs+0x351>
c0005972:	01 c9                	add    ecx,ecx
c0005974:	eb ee                	jmp    c0005964 <f_mkfs+0x33f>
c0005976:	31 f6                	xor    esi,esi
c0005978:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000597c:	31 d2                	xor    edx,edx
c000597e:	f7 f1                	div    ecx
c0005980:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0005987:	2d f6 ff 00 00       	sub    eax,0xfff6
c000598c:	c1 ea 09             	shr    edx,0x9
c000598f:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0005994:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0005998:	0f 87 8e 00 00 00    	ja     c0005a2c <f_mkfs+0x407>
c000599e:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c00059a6:	89 cf                	mov    edi,ecx
c00059a8:	89 f1                	mov    ecx,esi
c00059aa:	c7 44 24 24 20 00 00 00 	mov    DWORD PTR [esp+0x24],0x20
c00059b2:	c6 44 24 0b 03       	mov    BYTE PTR [esp+0xb],0x3
c00059b7:	e9 d8 fe ff ff       	jmp    c0005894 <f_mkfs+0x26f>
c00059bc:	83 c0 02             	add    eax,0x2
c00059bf:	39 f2                	cmp    edx,esi
c00059c1:	0f 87 8e fe ff ff    	ja     c0005855 <f_mkfs+0x230>
c00059c7:	01 ff                	add    edi,edi
c00059c9:	e9 7c fe ff ff       	jmp    c000584a <f_mkfs+0x225>
c00059ce:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c00059d3:	8d 04 40             	lea    eax,[eax+eax*2]
c00059d6:	40                   	inc    eax
c00059d7:	d1 e8                	shr    eax,1
c00059d9:	83 c0 03             	add    eax,0x3
c00059dc:	e9 91 fe ff ff       	jmp    c0005872 <f_mkfs+0x24d>
c00059e1:	31 d2                	xor    edx,edx
c00059e3:	89 f0                	mov    eax,esi
c00059e5:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00059e9:	85 d2                	test   edx,edx
c00059eb:	74 09                	je     c00059f6 <f_mkfs+0x3d1>
c00059ed:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c00059f1:	4e                   	dec    esi
c00059f2:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c00059f6:	89 f0                	mov    eax,esi
c00059f8:	31 d2                	xor    edx,edx
c00059fa:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00059fe:	01 44 24 18          	add    DWORD PTR [esp+0x18],eax
c0005a02:	e9 df fe ff ff       	jmp    c00058e6 <f_mkfs+0x2c1>
c0005a07:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c0005a0d:	77 2c                	ja     c0005a3b <f_mkfs+0x416>
c0005a0f:	85 c9                	test   ecx,ecx
c0005a11:	75 19                	jne    c0005a2c <f_mkfs+0x407>
c0005a13:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005a16:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005a1c:	0f 86 11 fe ff ff    	jbe    c0005833 <f_mkfs+0x20e>
c0005a22:	eb 08                	jmp    c0005a2c <f_mkfs+0x407>
c0005a24:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c0005a2a:	76 0a                	jbe    c0005a36 <f_mkfs+0x411>
c0005a2c:	be 0e 00 00 00       	mov    esi,0xe
c0005a31:	e9 b4 03 00 00       	jmp    c0005dea <f_mkfs+0x7c5>
c0005a36:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c0005a3b:	31 d2                	xor    edx,edx
c0005a3d:	b9 00 02 00 00       	mov    ecx,0x200
c0005a42:	89 d8                	mov    eax,ebx
c0005a44:	e8 e8 c5 ff ff       	call   c0002031 <mem_set>
c0005a49:	b9 0b 00 00 00       	mov    ecx,0xb
c0005a4e:	ba 72 08 02 c0       	mov    edx,0xc0020872
c0005a53:	89 d8                	mov    eax,ebx
c0005a55:	e8 c2 c5 ff ff       	call   c000201c <mem_cpy>
c0005a5a:	8d 43 0b             	lea    eax,[ebx+0xb]
c0005a5d:	ba 00 02 00 00       	mov    edx,0x200
c0005a62:	e8 ae c5 ff ff       	call   c0002015 <st_word>
c0005a67:	0f b7 54 24 24       	movzx  edx,WORD PTR [esp+0x24]
c0005a6c:	89 f8                	mov    eax,edi
c0005a6e:	88 43 0d             	mov    BYTE PTR [ebx+0xd],al
c0005a71:	8d 43 0e             	lea    eax,[ebx+0xe]
c0005a74:	e8 9c c5 ff ff       	call   c0002015 <st_word>
c0005a79:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c0005a7d:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0005a80:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005a85:	83 f8 03             	cmp    eax,0x3
c0005a88:	b8 00 00 00 00       	mov    eax,0x0
c0005a8d:	0f 45 44 24 10       	cmovne eax,DWORD PTR [esp+0x10]
c0005a92:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005a96:	8d 43 11             	lea    eax,[ebx+0x11]
c0005a99:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005a9d:	e8 73 c5 ff ff       	call   c0002015 <st_word>
c0005aa2:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0005aa6:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0005aac:	77 0a                	ja     c0005ab8 <f_mkfs+0x493>
c0005aae:	8d 43 13             	lea    eax,[ebx+0x13]
c0005ab1:	e8 5f c5 ff ff       	call   c0002015 <st_word>
c0005ab6:	eb 08                	jmp    c0005ac0 <f_mkfs+0x49b>
c0005ab8:	8d 43 20             	lea    eax,[ebx+0x20]
c0005abb:	e8 59 c5 ff ff       	call   c0002019 <st_dword>
c0005ac0:	c6 43 15 f8          	mov    BYTE PTR [ebx+0x15],0xf8
c0005ac4:	8d 43 18             	lea    eax,[ebx+0x18]
c0005ac7:	ba 3f 00 00 00       	mov    edx,0x3f
c0005acc:	e8 44 c5 ff ff       	call   c0002015 <st_word>
c0005ad1:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0005ad4:	ba ff 00 00 00       	mov    edx,0xff
c0005ad9:	e8 37 c5 ff ff       	call   c0002015 <st_word>
c0005ade:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005ae2:	8d 43 1c             	lea    eax,[ebx+0x1c]
c0005ae5:	e8 2f c5 ff ff       	call   c0002019 <st_dword>
c0005aea:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005aef:	83 f8 03             	cmp    eax,0x3
c0005af2:	75 57                	jne    c0005b4b <f_mkfs+0x526>
c0005af4:	8d 43 43             	lea    eax,[ebx+0x43]
c0005af7:	ba 00 00 21 50       	mov    edx,0x50210000
c0005afc:	e8 18 c5 ff ff       	call   c0002019 <st_dword>
c0005b01:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0005b05:	8d 43 24             	lea    eax,[ebx+0x24]
c0005b08:	e8 0c c5 ff ff       	call   c0002019 <st_dword>
c0005b0d:	8d 43 2c             	lea    eax,[ebx+0x2c]
c0005b10:	ba 02 00 00 00       	mov    edx,0x2
c0005b15:	e8 ff c4 ff ff       	call   c0002019 <st_dword>
c0005b1a:	8d 43 30             	lea    eax,[ebx+0x30]
c0005b1d:	ba 01 00 00 00       	mov    edx,0x1
c0005b22:	e8 ee c4 ff ff       	call   c0002015 <st_word>
c0005b27:	8d 43 32             	lea    eax,[ebx+0x32]
c0005b2a:	ba 06 00 00 00       	mov    edx,0x6
c0005b2f:	e8 e1 c4 ff ff       	call   c0002015 <st_word>
c0005b34:	8d 43 47             	lea    eax,[ebx+0x47]
c0005b37:	b9 13 00 00 00       	mov    ecx,0x13
c0005b3c:	c6 43 40 80          	mov    BYTE PTR [ebx+0x40],0x80
c0005b40:	ba 7e 08 02 c0       	mov    edx,0xc002087e
c0005b45:	c6 43 42 29          	mov    BYTE PTR [ebx+0x42],0x29
c0005b49:	eb 2f                	jmp    c0005b7a <f_mkfs+0x555>
c0005b4b:	8d 43 27             	lea    eax,[ebx+0x27]
c0005b4e:	ba 00 00 21 50       	mov    edx,0x50210000
c0005b53:	e8 c1 c4 ff ff       	call   c0002019 <st_dword>
c0005b58:	0f b7 54 24 18       	movzx  edx,WORD PTR [esp+0x18]
c0005b5d:	8d 43 16             	lea    eax,[ebx+0x16]
c0005b60:	e8 b0 c4 ff ff       	call   c0002015 <st_word>
c0005b65:	8d 43 2b             	lea    eax,[ebx+0x2b]
c0005b68:	b9 13 00 00 00       	mov    ecx,0x13
c0005b6d:	c6 43 24 80          	mov    BYTE PTR [ebx+0x24],0x80
c0005b71:	ba 92 08 02 c0       	mov    edx,0xc0020892
c0005b76:	c6 43 26 29          	mov    BYTE PTR [ebx+0x26],0x29
c0005b7a:	e8 9d c4 ff ff       	call   c000201c <mem_cpy>
c0005b7f:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005b85:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005b8a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005b8e:	e8 82 c4 ff ff       	call   c0002015 <st_word>
c0005b93:	6a 01                	push   0x1
c0005b95:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b99:	53                   	push   ebx
c0005b9a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b9e:	e8 18 c4 ff ff       	call   c0001fbb <disk_write>
c0005ba3:	83 c4 10             	add    esp,0x10
c0005ba6:	85 c0                	test   eax,eax
c0005ba8:	0f 85 25 02 00 00    	jne    c0005dd3 <f_mkfs+0x7ae>
c0005bae:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005bb3:	83 f8 03             	cmp    eax,0x3
c0005bb6:	0f 85 98 00 00 00    	jne    c0005c54 <f_mkfs+0x62f>
c0005bbc:	6a 01                	push   0x1
c0005bbe:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005bc2:	83 c0 06             	add    eax,0x6
c0005bc5:	50                   	push   eax
c0005bc6:	53                   	push   ebx
c0005bc7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005bcb:	e8 eb c3 ff ff       	call   c0001fbb <disk_write>
c0005bd0:	b9 00 02 00 00       	mov    ecx,0x200
c0005bd5:	31 d2                	xor    edx,edx
c0005bd7:	89 d8                	mov    eax,ebx
c0005bd9:	e8 53 c4 ff ff       	call   c0002031 <mem_set>
c0005bde:	ba 52 52 61 41       	mov    edx,0x41615252
c0005be3:	89 d8                	mov    eax,ebx
c0005be5:	e8 2f c4 ff ff       	call   c0002019 <st_dword>
c0005bea:	8d 83 e4 01 00 00    	lea    eax,[ebx+0x1e4]
c0005bf0:	ba 72 72 41 61       	mov    edx,0x61417272
c0005bf5:	e8 1f c4 ff ff       	call   c0002019 <st_dword>
c0005bfa:	8d 56 ff             	lea    edx,[esi-0x1]
c0005bfd:	8d 83 e8 01 00 00    	lea    eax,[ebx+0x1e8]
c0005c03:	e8 11 c4 ff ff       	call   c0002019 <st_dword>
c0005c08:	8d 83 ec 01 00 00    	lea    eax,[ebx+0x1ec]
c0005c0e:	ba 02 00 00 00       	mov    edx,0x2
c0005c13:	e8 01 c4 ff ff       	call   c0002019 <st_dword>
c0005c18:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005c1e:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005c23:	e8 ed c3 ff ff       	call   c0002015 <st_word>
c0005c28:	6a 01                	push   0x1
c0005c2a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0005c2e:	83 c0 07             	add    eax,0x7
c0005c31:	50                   	push   eax
c0005c32:	53                   	push   ebx
c0005c33:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0005c37:	e8 7f c3 ff ff       	call   c0001fbb <disk_write>
c0005c3c:	83 c4 20             	add    esp,0x20
c0005c3f:	6a 01                	push   0x1
c0005c41:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005c45:	40                   	inc    eax
c0005c46:	50                   	push   eax
c0005c47:	53                   	push   ebx
c0005c48:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005c4c:	e8 6a c3 ff ff       	call   c0001fbb <disk_write>
c0005c51:	83 c4 10             	add    esp,0x10
c0005c54:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0005c58:	31 d2                	xor    edx,edx
c0005c5a:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0005c5e:	c1 e8 09             	shr    eax,0x9
c0005c61:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005c65:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0005c6b:	89 d8                	mov    eax,ebx
c0005c6d:	e8 bf c3 ff ff       	call   c0002031 <mem_set>
c0005c72:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005c77:	b9 f8 ff ff 00       	mov    ecx,0xfffff8
c0005c7c:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0005c84:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005c89:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005c8d:	83 f8 01             	cmp    eax,0x1
c0005c90:	0f 44 d1             	cmove  edx,ecx
c0005c93:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0005c97:	83 7c 24 2c 03       	cmp    DWORD PTR [esp+0x2c],0x3
c0005c9c:	75 21                	jne    c0005cbf <f_mkfs+0x69a>
c0005c9e:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005ca3:	89 d8                	mov    eax,ebx
c0005ca5:	e8 6f c3 ff ff       	call   c0002019 <st_dword>
c0005caa:	8d 43 04             	lea    eax,[ebx+0x4]
c0005cad:	83 ca ff             	or     edx,0xffffffff
c0005cb0:	e8 64 c3 ff ff       	call   c0002019 <st_dword>
c0005cb5:	8d 43 08             	lea    eax,[ebx+0x8]
c0005cb8:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0005cbd:	eb 06                	jmp    c0005cc5 <f_mkfs+0x6a0>
c0005cbf:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0005cc3:	89 d8                	mov    eax,ebx
c0005cc5:	e8 4f c3 ff ff       	call   c0002019 <st_dword>
c0005cca:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0005cce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005cd2:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0005cd6:	0f 46 c6             	cmovbe eax,esi
c0005cd9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005cdd:	50                   	push   eax
c0005cde:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005ce2:	53                   	push   ebx
c0005ce3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005ce7:	e8 cf c2 ff ff       	call   c0001fbb <disk_write>
c0005cec:	83 c4 10             	add    esp,0x10
c0005cef:	85 c0                	test   eax,eax
c0005cf1:	0f 85 dc 00 00 00    	jne    c0005dd3 <f_mkfs+0x7ae>
c0005cf7:	b9 00 02 00 00       	mov    ecx,0x200
c0005cfc:	31 d2                	xor    edx,edx
c0005cfe:	89 d8                	mov    eax,ebx
c0005d00:	e8 2c c3 ff ff       	call   c0002031 <mem_set>
c0005d05:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0005d09:	01 4c 24 20          	add    DWORD PTR [esp+0x20],ecx
c0005d0d:	29 ce                	sub    esi,ecx
c0005d0f:	75 bd                	jne    c0005cce <f_mkfs+0x6a9>
c0005d11:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005d15:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0005d1d:	40                   	inc    eax
c0005d1e:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c0005d22:	0f 87 6f ff ff ff    	ja     c0005c97 <f_mkfs+0x672>
c0005d28:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005d2d:	83 f8 03             	cmp    eax,0x3
c0005d30:	0f 45 7c 24 30       	cmovne edi,DWORD PTR [esp+0x30]
c0005d35:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005d39:	3b 7c 24 10          	cmp    edi,DWORD PTR [esp+0x10]
c0005d3d:	0f 46 f7             	cmovbe esi,edi
c0005d40:	56                   	push   esi
c0005d41:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005d45:	53                   	push   ebx
c0005d46:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005d4a:	e8 6c c2 ff ff       	call   c0001fbb <disk_write>
c0005d4f:	83 c4 10             	add    esp,0x10
c0005d52:	85 c0                	test   eax,eax
c0005d54:	75 7d                	jne    c0005dd3 <f_mkfs+0x7ae>
c0005d56:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005d5a:	29 f7                	sub    edi,esi
c0005d5c:	75 d7                	jne    c0005d35 <f_mkfs+0x710>
c0005d5e:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005d63:	b9 0c 00 00 00       	mov    ecx,0xc
c0005d68:	83 f8 03             	cmp    eax,0x3
c0005d6b:	74 1e                	je     c0005d8b <f_mkfs+0x766>
c0005d6d:	81 7c 24 44 ff ff 00 00 	cmp    DWORD PTR [esp+0x44],0xffff
c0005d75:	b9 06 00 00 00       	mov    ecx,0x6
c0005d7a:	77 0f                	ja     c0005d8b <f_mkfs+0x766>
c0005d7c:	83 f8 02             	cmp    eax,0x2
c0005d7f:	b9 04 00 00 00       	mov    ecx,0x4
c0005d84:	74 05                	je     c0005d8b <f_mkfs+0x766>
c0005d86:	b9 01 00 00 00       	mov    ecx,0x1
c0005d8b:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c0005d90:	75 2a                	jne    c0005dbc <f_mkfs+0x797>
c0005d92:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0005d9a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005d9e:	83 ec 0c             	sub    esp,0xc
c0005da1:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0005da5:	53                   	push   ebx
c0005da6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005daa:	8d 54 24 58          	lea    edx,[esp+0x58]
c0005dae:	e8 87 d2 ff ff       	call   c000303a <create_partition>
c0005db3:	83 c4 10             	add    esp,0x10
c0005db6:	85 c0                	test   eax,eax
c0005db8:	89 c6                	mov    esi,eax
c0005dba:	75 2e                	jne    c0005dea <f_mkfs+0x7c5>
c0005dbc:	50                   	push   eax
c0005dbd:	31 f6                	xor    esi,esi
c0005dbf:	6a 00                	push   0x0
c0005dc1:	6a 00                	push   0x0
c0005dc3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005dc7:	e8 05 c2 ff ff       	call   c0001fd1 <disk_ioctl>
c0005dcc:	83 c4 10             	add    esp,0x10
c0005dcf:	85 c0                	test   eax,eax
c0005dd1:	74 17                	je     c0005dea <f_mkfs+0x7c5>
c0005dd3:	85 ed                	test   ebp,ebp
c0005dd5:	75 0c                	jne    c0005de3 <f_mkfs+0x7be>
c0005dd7:	83 ec 0c             	sub    esp,0xc
c0005dda:	53                   	push   ebx
c0005ddb:	e8 6c 00 00 00       	call   c0005e4c <ff_memfree>
c0005de0:	83 c4 10             	add    esp,0x10
c0005de3:	be 01 00 00 00       	mov    esi,0x1
c0005de8:	eb 40                	jmp    c0005e2a <f_mkfs+0x805>
c0005dea:	85 ed                	test   ebp,ebp
c0005dec:	75 3c                	jne    c0005e2a <f_mkfs+0x805>
c0005dee:	83 ec 0c             	sub    esp,0xc
c0005df1:	53                   	push   ebx
c0005df2:	e8 55 00 00 00       	call   c0005e4c <ff_memfree>
c0005df7:	83 c4 10             	add    esp,0x10
c0005dfa:	eb 2e                	jmp    c0005e2a <f_mkfs+0x805>
c0005dfc:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005e01:	0f 85 46 fb ff ff    	jne    c000594d <f_mkfs+0x328>
c0005e07:	e9 20 fc ff ff       	jmp    c0005a2c <f_mkfs+0x407>
c0005e0c:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005e11:	0f 85 3c fb ff ff    	jne    c0005953 <f_mkfs+0x32e>
c0005e17:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005e1d:	89 cf                	mov    edi,ecx
c0005e1f:	0f 86 30 fa ff ff    	jbe    c0005855 <f_mkfs+0x230>
c0005e25:	e9 02 fc ff ff       	jmp    c0005a2c <f_mkfs+0x407>
c0005e2a:	83 c4 5c             	add    esp,0x5c
c0005e2d:	89 f0                	mov    eax,esi
c0005e2f:	5b                   	pop    ebx
c0005e30:	5e                   	pop    esi
c0005e31:	5f                   	pop    edi
c0005e32:	5d                   	pop    ebp
c0005e33:	c3                   	ret    

c0005e34 <ff_memalloc>:
c0005e34:	83 ec 0c             	sub    esp,0xc
c0005e37:	83 ec 0c             	sub    esp,0xc
c0005e3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005e3e:	e8 8d 8a 00 00       	call   c000e8d0 <malloc>
c0005e43:	83 c4 10             	add    esp,0x10
c0005e46:	83 c4 0c             	add    esp,0xc
c0005e49:	c3                   	ret    
c0005e4a:	66 90                	xchg   ax,ax

c0005e4c <ff_memfree>:
c0005e4c:	83 ec 0c             	sub    esp,0xc
c0005e4f:	83 ec 0c             	sub    esp,0xc
c0005e52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005e56:	e8 85 8a 00 00       	call   c000e8e0 <free>
c0005e5b:	83 c4 10             	add    esp,0x10
c0005e5e:	90                   	nop
c0005e5f:	83 c4 0c             	add    esp,0xc
c0005e62:	c3                   	ret    
c0005e63:	90                   	nop

c0005e64 <ff_uni2oem>:
c0005e64:	83 ec 14             	sub    esp,0x14
c0005e67:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005e6b:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005e6f:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005e76:	c7 44 24 0c c0 0c 02 c0 	mov    DWORD PTR [esp+0xc],0xc0020cc0
c0005e7e:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005e83:	77 0b                	ja     c0005e90 <ff_uni2oem+0x2c>
c0005e85:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005e89:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005e8e:	eb 64                	jmp    c0005ef4 <ff_uni2oem+0x90>
c0005e90:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005e98:	77 5a                	ja     c0005ef4 <ff_uni2oem+0x90>
c0005e9a:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005e9e:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005ea3:	75 4f                	jne    c0005ef4 <ff_uni2oem+0x90>
c0005ea5:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005eac:	eb 12                	jmp    c0005ec0 <ff_uni2oem+0x5c>
c0005eae:	66 90                	xchg   ax,ax
c0005eb0:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005eb5:	83 c0 01             	add    eax,0x1
c0005eb8:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ebd:	8d 76 00             	lea    esi,[esi+0x0]
c0005ec0:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005ec5:	83 f8 7f             	cmp    eax,0x7f
c0005ec8:	77 1a                	ja     c0005ee4 <ff_uni2oem+0x80>
c0005eca:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005ecf:	8d 14 00             	lea    edx,[eax+eax*1]
c0005ed2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005ed6:	01 d0                	add    eax,edx
c0005ed8:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005edb:	0f b7 c0             	movzx  eax,ax
c0005ede:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005ee2:	75 cc                	jne    c0005eb0 <ff_uni2oem+0x4c>
c0005ee4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ee9:	83 e8 80             	sub    eax,0xffffff80
c0005eec:	0f b6 c0             	movzx  eax,al
c0005eef:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ef4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ef9:	83 c4 14             	add    esp,0x14
c0005efc:	c3                   	ret    
c0005efd:	8d 76 00             	lea    esi,[esi+0x0]

c0005f00 <ff_oem2uni>:
c0005f00:	83 ec 18             	sub    esp,0x18
c0005f03:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005f07:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005f0b:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005f10:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005f14:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005f1b:	c7 44 24 10 c0 0c 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020cc0
c0005f23:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f28:	83 f8 7f             	cmp    eax,0x7f
c0005f2b:	77 0b                	ja     c0005f38 <ff_oem2uni+0x38>
c0005f2d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005f31:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005f36:	eb 34                	jmp    c0005f6c <ff_oem2uni+0x6c>
c0005f38:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005f3c:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005f41:	75 29                	jne    c0005f6c <ff_oem2uni+0x6c>
c0005f43:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f48:	3d ff 00 00 00       	cmp    eax,0xff
c0005f4d:	77 1d                	ja     c0005f6c <ff_oem2uni+0x6c>
c0005f4f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f54:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005f59:	8d 14 00             	lea    edx,[eax+eax*1]
c0005f5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005f60:	01 d0                	add    eax,edx
c0005f62:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005f65:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005f6a:	66 90                	xchg   ax,ax
c0005f6c:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005f71:	83 c4 18             	add    esp,0x18
c0005f74:	c3                   	ret    
c0005f75:	8d 76 00             	lea    esi,[esi+0x0]

c0005f78 <ff_wtoupper>:
c0005f78:	83 ec 10             	sub    esp,0x10
c0005f7b:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005f83:	0f 87 a7 01 00 00    	ja     c0006130 <ff_wtoupper+0x1b8>
c0005f89:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005f8d:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005f92:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005f97:	3d ff 0f 00 00       	cmp    eax,0xfff
c0005f9c:	77 0a                	ja     c0005fa8 <ff_wtoupper+0x30>
c0005f9e:	b8 c0 0a 02 c0       	mov    eax,0xc0020ac0
c0005fa3:	eb 0b                	jmp    c0005fb0 <ff_wtoupper+0x38>
c0005fa5:	8d 76 00             	lea    esi,[esi+0x0]
c0005fa8:	b8 00 0a 02 c0       	mov    eax,0xc0020a00
c0005fad:	8d 76 00             	lea    esi,[esi+0x0]
c0005fb0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005fb4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005fb8:	8d 50 02             	lea    edx,[eax+0x2]
c0005fbb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005fbf:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005fc2:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005fc7:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005fcc:	85 c0                	test   eax,eax
c0005fce:	0f 84 50 01 00 00    	je     c0006124 <ff_wtoupper+0x1ac>
c0005fd4:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005fd9:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005fde:	39 c2                	cmp    edx,eax
c0005fe0:	0f 82 3e 01 00 00    	jb     c0006124 <ff_wtoupper+0x1ac>
c0005fe6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005fea:	8d 50 02             	lea    edx,[eax+0x2]
c0005fed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005ff1:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005ff4:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005ff9:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005ffe:	c1 e8 08             	shr    eax,0x8
c0006001:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0006006:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c000600b:	0f b6 c0             	movzx  eax,al
c000600e:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0006013:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0006018:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c000601d:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0006022:	01 ca                	add    edx,ecx
c0006024:	39 d0                	cmp    eax,edx
c0006026:	0f 8d d4 00 00 00    	jge    c0006100 <ff_wtoupper+0x188>
c000602c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0006031:	83 f8 08             	cmp    eax,0x8
c0006034:	0f 87 e6 00 00 00    	ja     c0006120 <ff_wtoupper+0x1a8>
c000603a:	8b 04 85 c0 09 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdf640]
c0006041:	ff e0                	jmp    eax
c0006043:	90                   	nop
c0006044:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0006049:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c000604e:	29 c2                	sub    edx,eax
c0006050:	89 d0                	mov    eax,edx
c0006052:	8d 14 00             	lea    edx,[eax+eax*1]
c0006055:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006059:	01 d0                	add    eax,edx
c000605b:	66 8b 00             	mov    ax,WORD PTR [eax]
c000605e:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006063:	e9 94 00 00 00       	jmp    c00060fc <ff_wtoupper+0x184>
c0006068:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c000606d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006071:	89 d1                	mov    ecx,edx
c0006073:	29 c1                	sub    ecx,eax
c0006075:	89 c8                	mov    eax,ecx
c0006077:	83 e0 01             	and    eax,0x1
c000607a:	89 c2                	mov    edx,eax
c000607c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0006081:	29 d0                	sub    eax,edx
c0006083:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006088:	eb 72                	jmp    c00060fc <ff_wtoupper+0x184>
c000608a:	66 90                	xchg   ax,ax
c000608c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0006091:	83 e8 10             	sub    eax,0x10
c0006094:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006099:	eb 61                	jmp    c00060fc <ff_wtoupper+0x184>
c000609b:	90                   	nop
c000609c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060a1:	83 e8 20             	sub    eax,0x20
c00060a4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060a9:	eb 51                	jmp    c00060fc <ff_wtoupper+0x184>
c00060ab:	90                   	nop
c00060ac:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060b1:	83 e8 30             	sub    eax,0x30
c00060b4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060b9:	eb 41                	jmp    c00060fc <ff_wtoupper+0x184>
c00060bb:	90                   	nop
c00060bc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060c1:	83 e8 1a             	sub    eax,0x1a
c00060c4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060c9:	eb 31                	jmp    c00060fc <ff_wtoupper+0x184>
c00060cb:	90                   	nop
c00060cc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060d1:	83 c0 08             	add    eax,0x8
c00060d4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060d9:	eb 21                	jmp    c00060fc <ff_wtoupper+0x184>
c00060db:	90                   	nop
c00060dc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060e1:	83 e8 50             	sub    eax,0x50
c00060e4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060e9:	eb 11                	jmp    c00060fc <ff_wtoupper+0x184>
c00060eb:	90                   	nop
c00060ec:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060f1:	2d 60 1c 00 00       	sub    eax,0x1c60
c00060f6:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060fb:	90                   	nop
c00060fc:	eb 22                	jmp    c0006120 <ff_wtoupper+0x1a8>
c00060fe:	66 90                	xchg   ax,ax
c0006100:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0006105:	85 c0                	test   eax,eax
c0006107:	0f 85 a7 fe ff ff    	jne    c0005fb4 <ff_wtoupper+0x3c>
c000610d:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0006112:	d1 e0                	shl    eax,1
c0006114:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0006118:	e9 97 fe ff ff       	jmp    c0005fb4 <ff_wtoupper+0x3c>
c000611d:	8d 76 00             	lea    esi,[esi+0x0]
c0006120:	90                   	nop
c0006121:	8d 76 00             	lea    esi,[esi+0x0]
c0006124:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0006129:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000612d:	8d 76 00             	lea    esi,[esi+0x0]
c0006130:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006134:	83 c4 10             	add    esp,0x10
c0006137:	c3                   	ret    

c0006138 <utf2ucs>:
c0006138:	57                   	push   edi
c0006139:	31 c9                	xor    ecx,ecx
c000613b:	56                   	push   esi
c000613c:	89 d7                	mov    edi,edx
c000613e:	53                   	push   ebx
c000613f:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c0006143:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0006147:	89 de                	mov    esi,ebx
c0006149:	c1 fe 08             	sar    esi,0x8
c000614c:	89 f2                	mov    edx,esi
c000614e:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c0006151:	41                   	inc    ecx
c0006152:	85 db                	test   ebx,ebx
c0006154:	75 e9                	jne    c000613f <utf2ucs+0x7>
c0006156:	5b                   	pop    ebx
c0006157:	5e                   	pop    esi
c0006158:	5f                   	pop    edi
c0006159:	c3                   	ret    

c000615a <ucs2utfn>:
c000615a:	83 e1 fe             	and    ecx,0xfffffffe
c000615d:	01 d1                	add    ecx,edx
c000615f:	39 d1                	cmp    ecx,edx
c0006161:	75 04                	jne    c0006167 <ucs2utfn+0xd>
c0006163:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006166:	c3                   	ret    
c0006167:	57                   	push   edi
c0006168:	56                   	push   esi
c0006169:	53                   	push   ebx
c000616a:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c000616d:	83 c2 02             	add    edx,0x2
c0006170:	89 de                	mov    esi,ebx
c0006172:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0006176:	c1 e6 08             	shl    esi,0x8
c0006179:	09 f3                	or     ebx,esi
c000617b:	83 fb 3b             	cmp    ebx,0x3b
c000617e:	74 50                	je     c00061d0 <ucs2utfn+0x76>
c0006180:	83 fb 7f             	cmp    ebx,0x7f
c0006183:	7f 05                	jg     c000618a <ucs2utfn+0x30>
c0006185:	88 18                	mov    BYTE PTR [eax],bl
c0006187:	40                   	inc    eax
c0006188:	eb 42                	jmp    c00061cc <ucs2utfn+0x72>
c000618a:	89 df                	mov    edi,ebx
c000618c:	89 de                	mov    esi,ebx
c000618e:	c1 fe 06             	sar    esi,0x6
c0006191:	83 e7 3f             	and    edi,0x3f
c0006194:	83 cf 80             	or     edi,0xffffff80
c0006197:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c000619d:	7f 12                	jg     c00061b1 <ucs2utfn+0x57>
c000619f:	83 ce c0             	or     esi,0xffffffc0
c00061a2:	83 c0 02             	add    eax,0x2
c00061a5:	89 f3                	mov    ebx,esi
c00061a7:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c00061aa:	89 fb                	mov    ebx,edi
c00061ac:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c00061af:	eb 1b                	jmp    c00061cc <ucs2utfn+0x72>
c00061b1:	c1 fb 0c             	sar    ebx,0xc
c00061b4:	83 e6 3f             	and    esi,0x3f
c00061b7:	83 cb e0             	or     ebx,0xffffffe0
c00061ba:	83 ce 80             	or     esi,0xffffff80
c00061bd:	88 18                	mov    BYTE PTR [eax],bl
c00061bf:	89 f3                	mov    ebx,esi
c00061c1:	83 c0 03             	add    eax,0x3
c00061c4:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c00061c7:	89 fb                	mov    ebx,edi
c00061c9:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c00061cc:	39 d1                	cmp    ecx,edx
c00061ce:	75 9a                	jne    c000616a <ucs2utfn+0x10>
c00061d0:	5b                   	pop    ebx
c00061d1:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00061d4:	5e                   	pop    esi
c00061d5:	5f                   	pop    edi
c00061d6:	c3                   	ret    

c00061d7 <isjoliet>:
c00061d7:	31 d2                	xor    edx,edx
c00061d9:	80 38 25             	cmp    BYTE PTR [eax],0x25
c00061dc:	75 26                	jne    c0006204 <isjoliet+0x2d>
c00061de:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c00061e2:	75 20                	jne    c0006204 <isjoliet+0x2d>
c00061e4:	0f be 40 02          	movsx  eax,BYTE PTR [eax+0x2]
c00061e8:	ba 02 00 00 00       	mov    edx,0x2
c00061ed:	83 f8 43             	cmp    eax,0x43
c00061f0:	74 12                	je     c0006204 <isjoliet+0x2d>
c00061f2:	83 f8 45             	cmp    eax,0x45
c00061f5:	ba 03 00 00 00       	mov    edx,0x3
c00061fa:	74 08                	je     c0006204 <isjoliet+0x2d>
c00061fc:	31 d2                	xor    edx,edx
c00061fe:	83 f8 40             	cmp    eax,0x40
c0006201:	0f 94 c2             	sete   dl
c0006204:	89 d0                	mov    eax,edx
c0006206:	c3                   	ret    

c0006207 <htohl_32>:
c0006207:	8b 00                	mov    eax,DWORD PTR [eax]
c0006209:	c3                   	ret    

c000620a <iso_733>:
c000620a:	eb fb                	jmp    c0006207 <htohl_32>

c000620c <bgrad_cache>:
c000620c:	83 fa 0e             	cmp    edx,0xe
c000620f:	77 16                	ja     c0006227 <bgrad_cache+0x1b>
c0006211:	53                   	push   ebx
c0006212:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c0006215:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c0006219:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c000621c:	42                   	inc    edx
c000621d:	83 fa 0f             	cmp    edx,0xf
c0006220:	75 f3                	jne    c0006215 <bgrad_cache+0x9>
c0006222:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0006225:	5b                   	pop    ebx
c0006226:	c3                   	ret    
c0006227:	c3                   	ret    

c0006228 <ucscompare>:
c0006228:	55                   	push   ebp
c0006229:	57                   	push   edi
c000622a:	89 c7                	mov    edi,eax
c000622c:	56                   	push   esi
c000622d:	89 d6                	mov    esi,edx
c000622f:	53                   	push   ebx
c0006230:	31 d2                	xor    edx,edx
c0006232:	83 ec 1c             	sub    esp,0x1c
c0006235:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c0006239:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c000623e:	c1 e3 08             	shl    ebx,0x8
c0006241:	09 c3                	or     ebx,eax
c0006243:	39 ca                	cmp    edx,ecx
c0006245:	7d 42                	jge    c0006289 <ucscompare+0x61>
c0006247:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000624b:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c000624f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0006253:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c0006258:	c1 e0 08             	shl    eax,0x8
c000625b:	09 e8                	or     eax,ebp
c000625d:	83 f8 3b             	cmp    eax,0x3b
c0006260:	74 27                	je     c0006289 <ucscompare+0x61>
c0006262:	83 ec 0c             	sub    esp,0xc
c0006265:	50                   	push   eax
c0006266:	e8 15 a7 ff ff       	call   c0000980 <tolower>
c000626b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000626e:	89 c5                	mov    ebp,eax
c0006270:	e8 0b a7 ff ff       	call   c0000980 <tolower>
c0006275:	83 c4 10             	add    esp,0x10
c0006278:	39 c5                	cmp    ebp,eax
c000627a:	75 20                	jne    c000629c <ucscompare+0x74>
c000627c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006280:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006284:	83 c2 02             	add    edx,0x2
c0006287:	eb ac                	jmp    c0006235 <ucscompare+0xd>
c0006289:	83 fb 2f             	cmp    ebx,0x2f
c000628c:	0f 95 c2             	setne  dl
c000628f:	31 c0                	xor    eax,eax
c0006291:	85 db                	test   ebx,ebx
c0006293:	0f 95 c0             	setne  al
c0006296:	21 d0                	and    eax,edx
c0006298:	f7 d8                	neg    eax
c000629a:	eb 03                	jmp    c000629f <ucscompare+0x77>
c000629c:	83 c8 ff             	or     eax,0xffffffff
c000629f:	83 c4 1c             	add    esp,0x1c
c00062a2:	5b                   	pop    ebx
c00062a3:	5e                   	pop    esi
c00062a4:	5f                   	pop    edi
c00062a5:	5d                   	pop    ebp
c00062a6:	c3                   	ret    

c00062a7 <fncompare>:
c00062a7:	55                   	push   ebp
c00062a8:	57                   	push   edi
c00062a9:	89 c7                	mov    edi,eax
c00062ab:	56                   	push   esi
c00062ac:	89 ce                	mov    esi,ecx
c00062ae:	53                   	push   ebx
c00062af:	31 db                	xor    ebx,ebx
c00062b1:	83 ec 1c             	sub    esp,0x1c
c00062b4:	39 d3                	cmp    ebx,edx
c00062b6:	7d 45                	jge    c00062fd <fncompare+0x56>
c00062b8:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c00062bc:	83 f8 3b             	cmp    eax,0x3b
c00062bf:	74 3c                	je     c00062fd <fncompare+0x56>
c00062c1:	83 f8 2e             	cmp    eax,0x2e
c00062c4:	75 0e                	jne    c00062d4 <fncompare+0x2d>
c00062c6:	8d 4a ff             	lea    ecx,[edx-0x1]
c00062c9:	39 d9                	cmp    ecx,ebx
c00062cb:	74 30                	je     c00062fd <fncompare+0x56>
c00062cd:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c00062d2:	74 29                	je     c00062fd <fncompare+0x56>
c00062d4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00062d8:	83 ec 0c             	sub    esp,0xc
c00062db:	50                   	push   eax
c00062dc:	e8 9f a6 ff ff       	call   c0000980 <tolower>
c00062e1:	89 c5                	mov    ebp,eax
c00062e3:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c00062e7:	89 04 24             	mov    DWORD PTR [esp],eax
c00062ea:	e8 91 a6 ff ff       	call   c0000980 <tolower>
c00062ef:	83 c4 10             	add    esp,0x10
c00062f2:	39 c5                	cmp    ebp,eax
c00062f4:	75 1e                	jne    c0006314 <fncompare+0x6d>
c00062f6:	43                   	inc    ebx
c00062f7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00062fb:	eb b7                	jmp    c00062b4 <fncompare+0xd>
c00062fd:	0f be 14 1e          	movsx  edx,BYTE PTR [esi+ebx*1]
c0006301:	83 fa 2f             	cmp    edx,0x2f
c0006304:	0f 95 c1             	setne  cl
c0006307:	31 c0                	xor    eax,eax
c0006309:	85 d2                	test   edx,edx
c000630b:	0f 95 c0             	setne  al
c000630e:	21 c8                	and    eax,ecx
c0006310:	f7 d8                	neg    eax
c0006312:	eb 03                	jmp    c0006317 <fncompare+0x70>
c0006314:	83 c8 ff             	or     eax,0xffffffff
c0006317:	83 c4 1c             	add    esp,0x1c
c000631a:	5b                   	pop    ebx
c000631b:	5e                   	pop    esi
c000631c:	5f                   	pop    edi
c000631d:	5d                   	pop    ebp
c000631e:	c3                   	ret    

c000631f <bclear_cache>:
c000631f:	83 ec 18             	sub    esp,0x18
c0006322:	68 c0 0d 02 c0       	push   0xc0020dc0
c0006327:	e8 00 48 01 00       	call   c001ab2c <iso_kprintf>
c000632c:	83 c4 10             	add    esp,0x10
c000632f:	31 c0                	xor    eax,eax
c0006331:	8b 14 85 20 60 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9fe0]
c0006338:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c000633e:	8b 14 85 80 60 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9f80]
c0006345:	40                   	inc    eax
c0006346:	83 f8 10             	cmp    eax,0x10
c0006349:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c000634f:	75 e0                	jne    c0006331 <bclear_cache+0x12>
c0006351:	83 c4 0c             	add    esp,0xc
c0006354:	c3                   	ret    

c0006355 <bclear>:
c0006355:	eb c8                	jmp    c000631f <bclear_cache>

c0006357 <iso_break_all>:
c0006357:	83 ec 18             	sub    esp,0x18
c000635a:	68 ce 0d 02 c0       	push   0xc0020dce
c000635f:	e8 c8 47 01 00       	call   c001ab2c <iso_kprintf>
c0006364:	83 c4 10             	add    esp,0x10
c0006367:	31 c0                	xor    eax,eax
c0006369:	c7 80 d0 65 02 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffd9a30],0x1
c0006373:	05 94 00 00 00       	add    eax,0x94
c0006378:	3d 40 09 00 00       	cmp    eax,0x940
c000637d:	75 ea                	jne    c0006369 <iso_break_all+0x12>
c000637f:	83 c4 0c             	add    esp,0xc
c0006382:	c3                   	ret    

c0006383 <isoReadDiscSector>:
c0006383:	83 ec 0c             	sub    esp,0xc
c0006386:	0f be 05 60 60 02 c0 	movsx  eax,BYTE PTR ds:0xc0026060
c000638d:	50                   	push   eax
c000638e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006392:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006396:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000639a:	e8 31 47 01 00       	call   c001aad0 <isoReadDiscSectorHelper>
c000639f:	83 c4 1c             	add    esp,0x1c
c00063a2:	c3                   	ret    

c00063a3 <bread_cache>:
c00063a3:	55                   	push   ebp
c00063a4:	57                   	push   edi
c00063a5:	89 d7                	mov    edi,edx
c00063a7:	56                   	push   esi
c00063a8:	ba 0f 00 00 00       	mov    edx,0xf
c00063ad:	53                   	push   ebx
c00063ae:	89 c6                	mov    esi,eax
c00063b0:	83 ec 0c             	sub    esp,0xc
c00063b3:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c00063b6:	39 38                	cmp    DWORD PTR [eax],edi
c00063b8:	74 3c                	je     c00063f6 <bread_cache+0x53>
c00063ba:	4a                   	dec    edx
c00063bb:	83 fa ff             	cmp    edx,0xffffffff
c00063be:	75 f3                	jne    c00063b3 <bread_cache+0x10>
c00063c0:	31 db                	xor    ebx,ebx
c00063c2:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c00063c5:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c00063c8:	74 08                	je     c00063d2 <bread_cache+0x2f>
c00063ca:	43                   	inc    ebx
c00063cb:	83 fb 10             	cmp    ebx,0x10
c00063ce:	75 f2                	jne    c00063c2 <bread_cache+0x1f>
c00063d0:	31 db                	xor    ebx,ebx
c00063d2:	50                   	push   eax
c00063d3:	6a 01                	push   0x1
c00063d5:	57                   	push   edi
c00063d6:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c00063d9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00063dc:	83 c0 04             	add    eax,0x4
c00063df:	50                   	push   eax
c00063e0:	e8 9e ff ff ff       	call   c0006383 <isoReadDiscSector>
c00063e5:	83 c4 10             	add    esp,0x10
c00063e8:	83 c9 ff             	or     ecx,0xffffffff
c00063eb:	85 c0                	test   eax,eax
c00063ed:	78 13                	js     c0006402 <bread_cache+0x5f>
c00063ef:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00063f2:	89 da                	mov    edx,ebx
c00063f4:	89 38                	mov    DWORD PTR [eax],edi
c00063f6:	89 f0                	mov    eax,esi
c00063f8:	e8 0f fe ff ff       	call   c000620c <bgrad_cache>
c00063fd:	b9 0f 00 00 00       	mov    ecx,0xf
c0006402:	83 c4 0c             	add    esp,0xc
c0006405:	89 c8                	mov    eax,ecx
c0006407:	5b                   	pop    ebx
c0006408:	5e                   	pop    esi
c0006409:	5f                   	pop    edi
c000640a:	5d                   	pop    ebp
c000640b:	c3                   	ret    

c000640c <biread>:
c000640c:	89 c2                	mov    edx,eax
c000640e:	b8 80 60 02 c0       	mov    eax,0xc0026080
c0006413:	eb 8e                	jmp    c00063a3 <bread_cache>

c0006415 <bdread>:
c0006415:	89 c2                	mov    edx,eax
c0006417:	b8 20 60 02 c0       	mov    eax,0xc0026020
c000641c:	eb 85                	jmp    c00063a3 <bread_cache>

c000641e <strnicmp>:
c000641e:	55                   	push   ebp
c000641f:	57                   	push   edi
c0006420:	31 ff                	xor    edi,edi
c0006422:	56                   	push   esi
c0006423:	53                   	push   ebx
c0006424:	83 ec 0c             	sub    esp,0xc
c0006427:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000642b:	3b 7c 24 28          	cmp    edi,DWORD PTR [esp+0x28]
c000642f:	74 43                	je     c0006474 <strnicmp+0x56>
c0006431:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006435:	0f be 04 38          	movsx  eax,BYTE PTR [eax+edi*1]
c0006439:	85 c0                	test   eax,eax
c000643b:	74 37                	je     c0006474 <strnicmp+0x56>
c000643d:	0f be 14 3e          	movsx  edx,BYTE PTR [esi+edi*1]
c0006441:	85 d2                	test   edx,edx
c0006443:	74 2f                	je     c0006474 <strnicmp+0x56>
c0006445:	8d 6f 01             	lea    ebp,[edi+0x1]
c0006448:	39 d0                	cmp    eax,edx
c000644a:	75 04                	jne    c0006450 <strnicmp+0x32>
c000644c:	89 ef                	mov    edi,ebp
c000644e:	eb db                	jmp    c000642b <strnicmp+0xd>
c0006450:	83 ec 0c             	sub    esp,0xc
c0006453:	50                   	push   eax
c0006454:	e8 27 a5 ff ff       	call   c0000980 <tolower>
c0006459:	89 c3                	mov    ebx,eax
c000645b:	0f be 04 3e          	movsx  eax,BYTE PTR [esi+edi*1]
c000645f:	89 ef                	mov    edi,ebp
c0006461:	89 04 24             	mov    DWORD PTR [esp],eax
c0006464:	e8 17 a5 ff ff       	call   c0000980 <tolower>
c0006469:	83 c4 10             	add    esp,0x10
c000646c:	29 c3                	sub    ebx,eax
c000646e:	89 d8                	mov    eax,ebx
c0006470:	74 b9                	je     c000642b <strnicmp+0xd>
c0006472:	eb 02                	jmp    c0006476 <strnicmp+0x58>
c0006474:	31 c0                	xor    eax,eax
c0006476:	83 c4 0c             	add    esp,0xc
c0006479:	5b                   	pop    ebx
c000647a:	5e                   	pop    esi
c000647b:	5f                   	pop    edi
c000647c:	5d                   	pop    ebp
c000647d:	c3                   	ret    

c000647e <find_object>:
c000647e:	55                   	push   ebp
c000647f:	57                   	push   edi
c0006480:	89 c7                	mov    edi,eax
c0006482:	56                   	push   esi
c0006483:	53                   	push   ebx
c0006484:	89 d3                	mov    ebx,edx
c0006486:	81 ec 2c 01 00 00    	sub    esp,0x12c
c000648c:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0006490:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0006497:	83 3d b4 6e 02 c0 00 	cmp    DWORD PTR ds:0xc0026eb4,0x0
c000649e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00064a2:	74 0b                	je     c00064af <find_object+0x31>
c00064a4:	8d 44 24 20          	lea    eax,[esp+0x20]
c00064a8:	89 fa                	mov    edx,edi
c00064aa:	e8 89 fc ff ff       	call   c0006138 <utf2ucs>
c00064af:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c00064b2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00064b6:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00064bb:	7e 11                	jle    c00064ce <find_object+0x50>
c00064bd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00064c1:	e8 46 ff ff ff       	call   c000640c <biread>
c00064c6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00064ca:	85 c0                	test   eax,eax
c00064cc:	79 07                	jns    c00064d5 <find_object+0x57>
c00064ce:	31 db                	xor    ebx,ebx
c00064d0:	e9 47 01 00 00       	jmp    c000661c <find_object+0x19e>
c00064d5:	31 ed                	xor    ebp,ebp
c00064d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00064db:	8b 04 85 80 60 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9f80]
c00064e2:	8d 5c 28 04          	lea    ebx,[eax+ebp*1+0x4]
c00064e6:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c00064e9:	85 f6                	test   esi,esi
c00064eb:	75 0e                	jne    c00064fb <find_object+0x7d>
c00064ed:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00064f1:	81 6c 24 08 00 08 00 00 	sub    DWORD PTR [esp+0x8],0x800
c00064f9:	eb bb                	jmp    c00064b6 <find_object+0x38>
c00064fb:	8b 0d b4 6e 02 c0    	mov    ecx,DWORD PTR ds:0xc0026eb4
c0006501:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c0006505:	85 c9                	test   ecx,ecx
c0006507:	89 d0                	mov    eax,edx
c0006509:	74 2b                	je     c0006536 <find_object+0xb8>
c000650b:	8d 43 21             	lea    eax,[ebx+0x21]
c000650e:	89 d1                	mov    ecx,edx
c0006510:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006514:	e8 0f fd ff ff       	call   c0006228 <ucscompare>
c0006519:	85 c0                	test   eax,eax
c000651b:	0f 84 cd 00 00 00    	je     c00065ee <find_object+0x170>
c0006521:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c0006524:	01 c5                	add    ebp,eax
c0006526:	81 fd ff 07 00 00    	cmp    ebp,0x7ff
c000652c:	7f bf                	jg     c00064ed <find_object+0x6f>
c000652e:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0006532:	7f a3                	jg     c00064d7 <find_object+0x59>
c0006534:	eb b7                	jmp    c00064ed <find_object+0x6f>
c0006536:	29 d6                	sub    esi,edx
c0006538:	a8 01                	test   al,0x1
c000653a:	8d 54 13 21          	lea    edx,[ebx+edx*1+0x21]
c000653e:	74 05                	je     c0006545 <find_object+0xc7>
c0006540:	83 ee 21             	sub    esi,0x21
c0006543:	eb 6a                	jmp    c00065af <find_object+0x131>
c0006545:	42                   	inc    edx
c0006546:	83 ee 22             	sub    esi,0x22
c0006549:	eb 64                	jmp    c00065af <find_object+0x131>
c000654b:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c000654e:	48                   	dec    eax
c000654f:	3c 01                	cmp    al,0x1
c0006551:	77 61                	ja     c00065b4 <find_object+0x136>
c0006553:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006557:	50                   	push   eax
c0006558:	6a 02                	push   0x2
c000655a:	68 dd 0d 02 c0       	push   0xc0020ddd
c000655f:	52                   	push   edx
c0006560:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0006564:	e8 a7 a2 ff ff       	call   c0000810 <strncmp>
c0006569:	83 c4 10             	add    esp,0x10
c000656c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006570:	85 c0                	test   eax,eax
c0006572:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006576:	75 2f                	jne    c00065a7 <find_object+0x129>
c0006578:	0f be 4a 02          	movsx  ecx,BYTE PTR [edx+0x2]
c000657c:	50                   	push   eax
c000657d:	8d 42 05             	lea    eax,[edx+0x5]
c0006580:	83 e9 05             	sub    ecx,0x5
c0006583:	51                   	push   ecx
c0006584:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0006588:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000658c:	50                   	push   eax
c000658d:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006591:	50                   	push   eax
c0006592:	e8 f9 a0 ff ff       	call   c0000690 <strncpy>
c0006597:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000659b:	c6 44 0c 30 00       	mov    BYTE PTR [esp+ecx*1+0x30],0x0
c00065a0:	83 c4 10             	add    esp,0x10
c00065a3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00065a7:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c00065ab:	29 c6                	sub    esi,eax
c00065ad:	01 c2                	add    edx,eax
c00065af:	83 fe 03             	cmp    esi,0x3
c00065b2:	7f 97                	jg     c000654b <find_object+0xcd>
c00065b4:	85 c9                	test   ecx,ecx
c00065b6:	7e 40                	jle    c00065f8 <find_object+0x17a>
c00065b8:	51                   	push   ecx
c00065b9:	51                   	push   ecx
c00065ba:	6a 2f                	push   0x2f
c00065bc:	57                   	push   edi
c00065bd:	e8 0e a2 ff ff       	call   c00007d0 <strchr>
c00065c2:	83 c4 10             	add    esp,0x10
c00065c5:	85 c0                	test   eax,eax
c00065c7:	74 04                	je     c00065cd <find_object+0x14f>
c00065c9:	29 f8                	sub    eax,edi
c00065cb:	eb 0c                	jmp    c00065d9 <find_object+0x15b>
c00065cd:	83 ec 0c             	sub    esp,0xc
c00065d0:	57                   	push   edi
c00065d1:	e8 aa 9f ff ff       	call   c0000580 <strlen>
c00065d6:	83 c4 10             	add    esp,0x10
c00065d9:	52                   	push   edx
c00065da:	50                   	push   eax
c00065db:	57                   	push   edi
c00065dc:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00065e0:	50                   	push   eax
c00065e1:	e8 38 fe ff ff       	call   c000641e <strnicmp>
c00065e6:	83 c4 10             	add    esp,0x10
c00065e9:	e9 2b ff ff ff       	jmp    c0006519 <find_object+0x9b>
c00065ee:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00065f2:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00065f6:	eb 1e                	jmp    c0006616 <find_object+0x198>
c00065f8:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c00065fc:	8d 43 21             	lea    eax,[ebx+0x21]
c00065ff:	89 f9                	mov    ecx,edi
c0006601:	e8 a1 fc ff ff       	call   c00062a7 <fncompare>
c0006606:	85 c0                	test   eax,eax
c0006608:	0f 85 13 ff ff ff    	jne    c0006521 <find_object+0xa3>
c000660e:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c0006612:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0006616:	0f 85 05 ff ff ff    	jne    c0006521 <find_object+0xa3>
c000661c:	81 c4 2c 01 00 00    	add    esp,0x12c
c0006622:	89 d8                	mov    eax,ebx
c0006624:	5b                   	pop    ebx
c0006625:	5e                   	pop    esi
c0006626:	5f                   	pop    edi
c0006627:	5d                   	pop    ebp
c0006628:	c3                   	ret    

c0006629 <find_object_path>:
c0006629:	55                   	push   ebp
c000662a:	57                   	push   edi
c000662b:	89 d7                	mov    edi,edx
c000662d:	56                   	push   esi
c000662e:	89 c6                	mov    esi,eax
c0006630:	53                   	push   ebx
c0006631:	89 cb                	mov    ebx,ecx
c0006633:	83 ec 0c             	sub    esp,0xc
c0006636:	50                   	push   eax
c0006637:	50                   	push   eax
c0006638:	6a 2f                	push   0x2f
c000663a:	56                   	push   esi
c000663b:	e8 90 a1 ff ff       	call   c00007d0 <strchr>
c0006640:	83 c4 10             	add    esp,0x10
c0006643:	85 c0                	test   eax,eax
c0006645:	89 c5                	mov    ebp,eax
c0006647:	74 3a                	je     c0006683 <find_object_path+0x5a>
c0006649:	39 ee                	cmp    esi,ebp
c000664b:	74 31                	je     c000667e <find_object_path+0x55>
c000664d:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006650:	e8 b5 fb ff ff       	call   c000620a <iso_733>
c0006655:	89 c2                	mov    edx,eax
c0006657:	8d 43 02             	lea    eax,[ebx+0x2]
c000665a:	e8 ab fb ff ff       	call   c000620a <iso_733>
c000665f:	83 ec 0c             	sub    esp,0xc
c0006662:	52                   	push   edx
c0006663:	89 c1                	mov    ecx,eax
c0006665:	ba 01 00 00 00       	mov    edx,0x1
c000666a:	89 f0                	mov    eax,esi
c000666c:	e8 0d fe ff ff       	call   c000647e <find_object>
c0006671:	83 c4 10             	add    esp,0x10
c0006674:	85 c0                	test   eax,eax
c0006676:	89 c3                	mov    ebx,eax
c0006678:	75 04                	jne    c000667e <find_object_path+0x55>
c000667a:	31 db                	xor    ebx,ebx
c000667c:	eb 36                	jmp    c00066b4 <find_object_path+0x8b>
c000667e:	8d 75 01             	lea    esi,[ebp+0x1]
c0006681:	eb b3                	jmp    c0006636 <find_object_path+0xd>
c0006683:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006686:	74 28                	je     c00066b0 <find_object_path+0x87>
c0006688:	8d 43 0a             	lea    eax,[ebx+0xa]
c000668b:	e8 7a fb ff ff       	call   c000620a <iso_733>
c0006690:	89 c2                	mov    edx,eax
c0006692:	8d 43 02             	lea    eax,[ebx+0x2]
c0006695:	e8 70 fb ff ff       	call   c000620a <iso_733>
c000669a:	83 ec 0c             	sub    esp,0xc
c000669d:	52                   	push   edx
c000669e:	89 c1                	mov    ecx,eax
c00066a0:	89 fa                	mov    edx,edi
c00066a2:	89 f0                	mov    eax,esi
c00066a4:	e8 d5 fd ff ff       	call   c000647e <find_object>
c00066a9:	83 c4 10             	add    esp,0x10
c00066ac:	89 c3                	mov    ebx,eax
c00066ae:	eb 04                	jmp    c00066b4 <find_object_path+0x8b>
c00066b0:	85 ff                	test   edi,edi
c00066b2:	74 c6                	je     c000667a <find_object_path+0x51>
c00066b4:	83 c4 0c             	add    esp,0xc
c00066b7:	89 d8                	mov    eax,ebx
c00066b9:	5b                   	pop    ebx
c00066ba:	5e                   	pop    esi
c00066bb:	5f                   	pop    edi
c00066bc:	5d                   	pop    ebp
c00066bd:	c3                   	ret    

c00066be <stricmp>:
c00066be:	57                   	push   edi
c00066bf:	56                   	push   esi
c00066c0:	31 f6                	xor    esi,esi
c00066c2:	53                   	push   ebx
c00066c3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00066c7:	83 ec 0c             	sub    esp,0xc
c00066ca:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00066ce:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00066d2:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00066d6:	46                   	inc    esi
c00066d7:	50                   	push   eax
c00066d8:	e8 83 a2 ff ff       	call   c0000960 <toupper>
c00066dd:	89 04 24             	mov    DWORD PTR [esp],eax
c00066e0:	e8 9b a2 ff ff       	call   c0000980 <tolower>
c00066e5:	89 3c 24             	mov    DWORD PTR [esp],edi
c00066e8:	89 c3                	mov    ebx,eax
c00066ea:	e8 71 a2 ff ff       	call   c0000960 <toupper>
c00066ef:	89 04 24             	mov    DWORD PTR [esp],eax
c00066f2:	e8 89 a2 ff ff       	call   c0000980 <tolower>
c00066f7:	83 c4 10             	add    esp,0x10
c00066fa:	39 c3                	cmp    ebx,eax
c00066fc:	75 04                	jne    c0006702 <stricmp+0x44>
c00066fe:	85 db                	test   ebx,ebx
c0006700:	75 c1                	jne    c00066c3 <stricmp+0x5>
c0006702:	29 c3                	sub    ebx,eax
c0006704:	89 d8                	mov    eax,ebx
c0006706:	5b                   	pop    ebx
c0006707:	5e                   	pop    esi
c0006708:	5f                   	pop    edi
c0006709:	c3                   	ret    

c000670a <iso_open>:
c000670a:	57                   	push   edi
c000670b:	31 c0                	xor    eax,eax
c000670d:	56                   	push   esi
c000670e:	b9 80 6e 02 c0       	mov    ecx,0xc0026e80
c0006713:	53                   	push   ebx
c0006714:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0006719:	0f 95 c0             	setne  al
c000671c:	89 c2                	mov    edx,eax
c000671e:	89 c6                	mov    esi,eax
c0006720:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006724:	e8 00 ff ff ff       	call   c0006629 <find_object_path>
c0006729:	83 ca ff             	or     edx,0xffffffff
c000672c:	85 c0                	test   eax,eax
c000672e:	74 5e                	je     c000678e <iso_open+0x84>
c0006730:	89 c1                	mov    ecx,eax
c0006732:	31 d2                	xor    edx,edx
c0006734:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c000673a:	83 bf 40 65 02 c0 00 	cmp    DWORD PTR [edi-0x3ffd9ac0],0x0
c0006741:	75 42                	jne    c0006785 <iso_open+0x7b>
c0006743:	c7 87 40 65 02 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffd9ac0],0xffffffff
c000674d:	8d 41 02             	lea    eax,[ecx+0x2]
c0006750:	e8 b5 fa ff ff       	call   c000620a <iso_733>
c0006755:	89 b7 44 65 02 c0    	mov    DWORD PTR [edi-0x3ffd9abc],esi
c000675b:	c7 87 48 65 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffd9ab8],0x0
c0006765:	89 87 40 65 02 c0    	mov    DWORD PTR [edi-0x3ffd9ac0],eax
c000676b:	8d 41 0a             	lea    eax,[ecx+0xa]
c000676e:	e8 97 fa ff ff       	call   c000620a <iso_733>
c0006773:	c7 87 d0 65 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffd9a30],0x0
c000677d:	89 87 4c 65 02 c0    	mov    DWORD PTR [edi-0x3ffd9ab4],eax
c0006783:	eb 09                	jmp    c000678e <iso_open+0x84>
c0006785:	42                   	inc    edx
c0006786:	83 fa 10             	cmp    edx,0x10
c0006789:	75 a9                	jne    c0006734 <iso_open+0x2a>
c000678b:	83 ca ff             	or     edx,0xffffffff
c000678e:	5b                   	pop    ebx
c000678f:	89 d0                	mov    eax,edx
c0006791:	5e                   	pop    esi
c0006792:	5f                   	pop    edi
c0006793:	c3                   	ret    

c0006794 <iso_close>:
c0006794:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006798:	83 f8 0f             	cmp    eax,0xf
c000679b:	7f 10                	jg     c00067ad <iso_close+0x19>
c000679d:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c00067a3:	c7 80 40 65 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9ac0],0x0
c00067ad:	e9 6d fb ff ff       	jmp    c000631f <bclear_cache>

c00067b2 <iso_read>:
c00067b2:	55                   	push   ebp
c00067b3:	57                   	push   edi
c00067b4:	56                   	push   esi
c00067b5:	53                   	push   ebx
c00067b6:	83 ec 1c             	sub    esp,0x1c
c00067b9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00067bd:	83 fd 0f             	cmp    ebp,0xf
c00067c0:	7e 0a                	jle    c00067cc <iso_read+0x1a>
c00067c2:	83 c8 ff             	or     eax,0xffffffff
c00067c5:	89 c2                	mov    edx,eax
c00067c7:	e9 f4 00 00 00       	jmp    c00068c0 <iso_read+0x10e>
c00067cc:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00067d2:	83 bd 40 65 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffd9ac0],0x0
c00067d9:	74 e7                	je     c00067c2 <iso_read+0x10>
c00067db:	8b 95 d0 65 02 c0    	mov    edx,DWORD PTR [ebp-0x3ffd9a30]
c00067e1:	85 d2                	test   edx,edx
c00067e3:	75 dd                	jne    c00067c2 <iso_read+0x10>
c00067e5:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00067ea:	0f 84 cd 00 00 00    	je     c00068bd <iso_read+0x10b>
c00067f0:	8b 85 48 65 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffd9ab8]
c00067f6:	8b 9d 4c 65 02 c0    	mov    ebx,DWORD PTR [ebp-0x3ffd9ab4]
c00067fc:	29 c3                	sub    ebx,eax
c00067fe:	3b 5c 24 38          	cmp    ebx,DWORD PTR [esp+0x38]
c0006802:	89 d9                	mov    ecx,ebx
c0006804:	0f 47 4c 24 38       	cmova  ecx,DWORD PTR [esp+0x38]
c0006809:	85 c9                	test   ecx,ecx
c000680b:	0f 84 ac 00 00 00    	je     c00068bd <iso_read+0x10b>
c0006811:	89 c6                	mov    esi,eax
c0006813:	bb 00 08 00 00       	mov    ebx,0x800
c0006818:	c1 e8 0b             	shr    eax,0xb
c000681b:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006821:	03 85 40 65 02 c0    	add    eax,DWORD PTR [ebp-0x3ffd9ac0]
c0006827:	29 f3                	sub    ebx,esi
c0006829:	81 fb 00 08 00 00    	cmp    ebx,0x800
c000682f:	75 3f                	jne    c0006870 <iso_read+0xbe>
c0006831:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006837:	7e 37                	jle    c0006870 <iso_read+0xbe>
c0006839:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c000683f:	be 20 00 00 00       	mov    esi,0x20
c0006844:	7f 05                	jg     c000684b <iso_read+0x99>
c0006846:	89 ce                	mov    esi,ecx
c0006848:	c1 fe 0b             	sar    esi,0xb
c000684b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000684f:	89 f3                	mov    ebx,esi
c0006851:	52                   	push   edx
c0006852:	56                   	push   esi
c0006853:	50                   	push   eax
c0006854:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0006858:	c1 e3 0b             	shl    ebx,0xb
c000685b:	e8 23 fb ff ff       	call   c0006383 <isoReadDiscSector>
c0006860:	83 c4 10             	add    esp,0x10
c0006863:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006867:	85 c0                	test   eax,eax
c0006869:	7f 3d                	jg     c00068a8 <iso_read+0xf6>
c000686b:	e9 52 ff ff ff       	jmp    c00067c2 <iso_read+0x10>
c0006870:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006874:	39 d9                	cmp    ecx,ebx
c0006876:	0f 4e d9             	cmovle ebx,ecx
c0006879:	e8 97 fb ff ff       	call   c0006415 <bdread>
c000687e:	85 c0                	test   eax,eax
c0006880:	0f 88 3c ff ff ff    	js     c00067c2 <iso_read+0x10>
c0006886:	8b 0c 85 20 60 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd9fe0]
c000688d:	8b 85 48 65 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffd9ab8]
c0006893:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0006897:	25 ff 07 00 00       	and    eax,0x7ff
c000689c:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c00068a0:	89 d9                	mov    ecx,ebx
c00068a2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00068a4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00068a8:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c00068ac:	01 da                	add    edx,ebx
c00068ae:	01 9d 48 65 02 c0    	add    DWORD PTR [ebp-0x3ffd9ab8],ebx
c00068b4:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00068b8:	e9 28 ff ff ff       	jmp    c00067e5 <iso_read+0x33>
c00068bd:	89 d0                	mov    eax,edx
c00068bf:	99                   	cdq    
c00068c0:	83 c4 1c             	add    esp,0x1c
c00068c3:	5b                   	pop    ebx
c00068c4:	5e                   	pop    esi
c00068c5:	5f                   	pop    edi
c00068c6:	5d                   	pop    ebp
c00068c7:	c3                   	ret    

c00068c8 <iso_seek>:
c00068c8:	55                   	push   ebp
c00068c9:	83 c8 ff             	or     eax,0xffffffff
c00068cc:	57                   	push   edi
c00068cd:	89 c2                	mov    edx,eax
c00068cf:	56                   	push   esi
c00068d0:	53                   	push   ebx
c00068d1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00068d5:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00068d9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00068dd:	83 fe 0f             	cmp    esi,0xf
c00068e0:	7f 65                	jg     c0006947 <iso_seek+0x7f>
c00068e2:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c00068e8:	83 bd 40 65 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffd9ac0],0x0
c00068ef:	8d 8d 40 65 02 c0    	lea    ecx,[ebp-0x3ffd9ac0]
c00068f5:	74 50                	je     c0006947 <iso_seek+0x7f>
c00068f7:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c00068fe:	75 47                	jne    c0006947 <iso_seek+0x7f>
c0006900:	83 fb 01             	cmp    ebx,0x1
c0006903:	74 0e                	je     c0006913 <iso_seek+0x4b>
c0006905:	83 fb 02             	cmp    ebx,0x2
c0006908:	74 0e                	je     c0006918 <iso_seek+0x50>
c000690a:	85 db                	test   ebx,ebx
c000690c:	75 39                	jne    c0006947 <iso_seek+0x7f>
c000690e:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0006911:	eb 0d                	jmp    c0006920 <iso_seek+0x58>
c0006913:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c0006916:	eb 08                	jmp    c0006920 <iso_seek+0x58>
c0006918:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c000691b:	01 f8                	add    eax,edi
c000691d:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0006920:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c0006926:	8b 88 4c 65 02 c0    	mov    ecx,DWORD PTR [eax-0x3ffd9ab4]
c000692c:	05 40 65 02 c0       	add    eax,0xc0026540
c0006931:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c0006934:	76 03                	jbe    c0006939 <iso_seek+0x71>
c0006936:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0006939:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c000693f:	8b 82 48 65 02 c0    	mov    eax,DWORD PTR [edx-0x3ffd9ab8]
c0006945:	31 d2                	xor    edx,edx
c0006947:	5b                   	pop    ebx
c0006948:	5e                   	pop    esi
c0006949:	5f                   	pop    edi
c000694a:	5d                   	pop    ebp
c000694b:	c3                   	ret    

c000694c <iso_tell>:
c000694c:	53                   	push   ebx
c000694d:	83 c8 ff             	or     eax,0xffffffff
c0006950:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006954:	89 c2                	mov    edx,eax
c0006956:	83 f9 0f             	cmp    ecx,0xf
c0006959:	7f 20                	jg     c000697b <iso_tell+0x2f>
c000695b:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c0006961:	83 bb 40 65 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffd9ac0],0x0
c0006968:	74 11                	je     c000697b <iso_tell+0x2f>
c000696a:	83 bb d0 65 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffd9a30],0x0
c0006971:	75 08                	jne    c000697b <iso_tell+0x2f>
c0006973:	8b 83 48 65 02 c0    	mov    eax,DWORD PTR [ebx-0x3ffd9ab8]
c0006979:	31 d2                	xor    edx,edx
c000697b:	5b                   	pop    ebx
c000697c:	c3                   	ret    

c000697d <iso_total>:
c000697d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006981:	83 c8 ff             	or     eax,0xffffffff
c0006984:	83 fa 0f             	cmp    edx,0xf
c0006987:	7f 1e                	jg     c00069a7 <iso_total+0x2a>
c0006989:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c000698f:	83 ba 40 65 02 c0 00 	cmp    DWORD PTR [edx-0x3ffd9ac0],0x0
c0006996:	74 0f                	je     c00069a7 <iso_total+0x2a>
c0006998:	83 ba d0 65 02 c0 00 	cmp    DWORD PTR [edx-0x3ffd9a30],0x0
c000699f:	75 06                	jne    c00069a7 <iso_total+0x2a>
c00069a1:	8b 82 4c 65 02 c0    	mov    eax,DWORD PTR [edx-0x3ffd9ab4]
c00069a7:	c3                   	ret    

c00069a8 <fn_postprocess>:
c00069a8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00069ac:	89 d0                	mov    eax,edx
c00069ae:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c00069b1:	85 c9                	test   ecx,ecx
c00069b3:	74 08                	je     c00069bd <fn_postprocess+0x15>
c00069b5:	83 f9 3b             	cmp    ecx,0x3b
c00069b8:	74 03                	je     c00069bd <fn_postprocess+0x15>
c00069ba:	40                   	inc    eax
c00069bb:	eb f1                	jmp    c00069ae <fn_postprocess+0x6>
c00069bd:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00069c0:	39 d0                	cmp    eax,edx
c00069c2:	76 0a                	jbe    c00069ce <fn_postprocess+0x26>
c00069c4:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00069c8:	75 04                	jne    c00069ce <fn_postprocess+0x26>
c00069ca:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00069ce:	c3                   	ret    

c00069cf <iso_readdir>:
c00069cf:	55                   	push   ebp
c00069d0:	57                   	push   edi
c00069d1:	56                   	push   esi
c00069d2:	53                   	push   ebx
c00069d3:	83 ec 1c             	sub    esp,0x1c
c00069d6:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00069da:	83 fb 0f             	cmp    ebx,0xf
c00069dd:	7f 28                	jg     c0006a07 <iso_readdir+0x38>
c00069df:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c00069e5:	83 b8 40 65 02 c0 00 	cmp    DWORD PTR [eax-0x3ffd9ac0],0x0
c00069ec:	8d b8 40 65 02 c0    	lea    edi,[eax-0x3ffd9ac0]
c00069f2:	74 13                	je     c0006a07 <iso_readdir+0x38>
c00069f4:	83 7f 04 00          	cmp    DWORD PTR [edi+0x4],0x0
c00069f8:	74 0d                	je     c0006a07 <iso_readdir+0x38>
c00069fa:	83 bf 90 00 00 00 00 	cmp    DWORD PTR [edi+0x90],0x0
c0006a01:	0f 84 b1 00 00 00    	je     c0006ab8 <iso_readdir+0xe9>
c0006a07:	83 ec 0c             	sub    esp,0xc
c0006a0a:	68 e0 0d 02 c0       	push   0xc0020de0
c0006a0f:	e8 18 41 01 00       	call   c001ab2c <iso_kprintf>
c0006a14:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006a17:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006a1d:	e8 26 41 01 00       	call   c001ab48 <iso_kprintfd>
c0006a22:	c7 04 24 e5 0d 02 c0 	mov    DWORD PTR [esp],0xc0020de5
c0006a29:	e8 fe 40 01 00       	call   c001ab2c <iso_kprintf>
c0006a2e:	58                   	pop    eax
c0006a2f:	ff b3 40 65 02 c0    	push   DWORD PTR [ebx-0x3ffd9ac0]
c0006a35:	e8 0e 41 01 00       	call   c001ab48 <iso_kprintfd>
c0006a3a:	c7 04 24 eb 0d 02 c0 	mov    DWORD PTR [esp],0xc0020deb
c0006a41:	e8 e6 40 01 00       	call   c001ab2c <iso_kprintf>
c0006a46:	58                   	pop    eax
c0006a47:	ff b3 44 65 02 c0    	push   DWORD PTR [ebx-0x3ffd9abc]
c0006a4d:	e8 f6 40 01 00       	call   c001ab48 <iso_kprintfd>
c0006a52:	c7 04 24 f1 0d 02 c0 	mov    DWORD PTR [esp],0xc0020df1
c0006a59:	e8 ce 40 01 00       	call   c001ab2c <iso_kprintf>
c0006a5e:	58                   	pop    eax
c0006a5f:	ff b3 d0 65 02 c0    	push   DWORD PTR [ebx-0x3ffd9a30]
c0006a65:	e8 de 40 01 00       	call   c001ab48 <iso_kprintfd>
c0006a6a:	83 c4 10             	add    esp,0x10
c0006a6d:	eb 42                	jmp    c0006ab1 <iso_readdir+0xe2>
c0006a6f:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006a72:	8b 34 85 80 60 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd9f80]
c0006a79:	89 d1                	mov    ecx,edx
c0006a7b:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0006a81:	8d 74 0e 04          	lea    esi,[esi+ecx*1+0x4]
c0006a85:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006a88:	75 35                	jne    c0006abf <iso_readdir+0xf0>
c0006a8a:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c0006a90:	81 c2 00 08 00 00    	add    edx,0x800
c0006a96:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0006a99:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006a9c:	3b 57 0c             	cmp    edx,DWORD PTR [edi+0xc]
c0006a9f:	73 1e                	jae    c0006abf <iso_readdir+0xf0>
c0006aa1:	8b 07                	mov    eax,DWORD PTR [edi]
c0006aa3:	c1 ea 0b             	shr    edx,0xb
c0006aa6:	01 d0                	add    eax,edx
c0006aa8:	e8 5f f9 ff ff       	call   c000640c <biread>
c0006aad:	85 c0                	test   eax,eax
c0006aaf:	79 be                	jns    c0006a6f <iso_readdir+0xa0>
c0006ab1:	31 c0                	xor    eax,eax
c0006ab3:	e9 6a 01 00 00       	jmp    c0006c22 <iso_readdir+0x253>
c0006ab8:	31 f6                	xor    esi,esi
c0006aba:	83 c8 ff             	or     eax,0xffffffff
c0006abd:	eb da                	jmp    c0006a99 <iso_readdir+0xca>
c0006abf:	69 d3 94 00 00 00    	imul   edx,ebx,0x94
c0006ac5:	8b ba 48 65 02 c0    	mov    edi,DWORD PTR [edx-0x3ffd9ab8]
c0006acb:	81 c2 40 65 02 c0    	add    edx,0xc0026540
c0006ad1:	3b 7a 0c             	cmp    edi,DWORD PTR [edx+0xc]
c0006ad4:	73 db                	jae    c0006ab1 <iso_readdir+0xe2>
c0006ad6:	80 7e 21 00          	cmp    BYTE PTR [esi+0x21],0x0
c0006ada:	75 34                	jne    c0006b10 <iso_readdir+0x141>
c0006adc:	80 7e 20 01          	cmp    BYTE PTR [esi+0x20],0x1
c0006ae0:	75 2e                	jne    c0006b10 <iso_readdir+0x141>
c0006ae2:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0006ae5:	8b 34 85 80 60 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd9f80]
c0006aec:	01 f9                	add    ecx,edi
c0006aee:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0006af1:	89 c8                	mov    eax,ecx
c0006af3:	25 ff 07 00 00       	and    eax,0x7ff
c0006af8:	0f b6 44 06 04       	movzx  eax,BYTE PTR [esi+eax*1+0x4]
c0006afd:	01 c8                	add    eax,ecx
c0006aff:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0006b02:	25 ff 07 00 00       	and    eax,0x7ff
c0006b07:	8d 74 06 04          	lea    esi,[esi+eax*1+0x4]
c0006b0b:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006b0e:	74 a1                	je     c0006ab1 <iso_readdir+0xe2>
c0006b10:	69 fb 94 00 00 00    	imul   edi,ebx,0x94
c0006b16:	0f b6 4e 20          	movzx  ecx,BYTE PTR [esi+0x20]
c0006b1a:	83 3d b4 6e 02 c0 00 	cmp    DWORD PTR ds:0xc0026eb4,0x0
c0006b21:	8d 56 21             	lea    edx,[esi+0x21]
c0006b24:	8d af 58 65 02 c0    	lea    ebp,[edi-0x3ffd9aa8]
c0006b2a:	74 0c                	je     c0006b38 <iso_readdir+0x169>
c0006b2c:	89 e8                	mov    eax,ebp
c0006b2e:	e8 27 f6 ff ff       	call   c000615a <ucs2utfn>
c0006b33:	e9 b1 00 00 00       	jmp    c0006be9 <iso_readdir+0x21a>
c0006b38:	50                   	push   eax
c0006b39:	51                   	push   ecx
c0006b3a:	52                   	push   edx
c0006b3b:	55                   	push   ebp
c0006b3c:	e8 4f 9b ff ff       	call   c0000690 <strncpy>
c0006b41:	0f b6 46 20          	movzx  eax,BYTE PTR [esi+0x20]
c0006b45:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0006b48:	c6 84 07 58 65 02 c0 00 	mov    BYTE PTR [edi+eax*1-0x3ffd9aa8],0x0
c0006b50:	e8 53 fe ff ff       	call   c00069a8 <fn_postprocess>
c0006b55:	0f b6 56 20          	movzx  edx,BYTE PTR [esi+0x20]
c0006b59:	83 c4 10             	add    esp,0x10
c0006b5c:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006b5f:	89 d1                	mov    ecx,edx
c0006b61:	29 d0                	sub    eax,edx
c0006b63:	80 e1 01             	and    cl,0x1
c0006b66:	8d 54 16 21          	lea    edx,[esi+edx*1+0x21]
c0006b6a:	74 05                	je     c0006b71 <iso_readdir+0x1a2>
c0006b6c:	83 e8 21             	sub    eax,0x21
c0006b6f:	eb 04                	jmp    c0006b75 <iso_readdir+0x1a6>
c0006b71:	42                   	inc    edx
c0006b72:	83 e8 22             	sub    eax,0x22
c0006b75:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006b79:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006b7f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006b83:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c0006b88:	7e 5f                	jle    c0006be9 <iso_readdir+0x21a>
c0006b8a:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c0006b8d:	48                   	dec    eax
c0006b8e:	3c 01                	cmp    al,0x1
c0006b90:	77 57                	ja     c0006be9 <iso_readdir+0x21a>
c0006b92:	51                   	push   ecx
c0006b93:	6a 02                	push   0x2
c0006b95:	68 dd 0d 02 c0       	push   0xc0020ddd
c0006b9a:	52                   	push   edx
c0006b9b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0006b9f:	e8 6c 9c ff ff       	call   c0000810 <strncmp>
c0006ba4:	83 c4 10             	add    esp,0x10
c0006ba7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006bab:	85 c0                	test   eax,eax
c0006bad:	75 2e                	jne    c0006bdd <iso_readdir+0x20e>
c0006baf:	50                   	push   eax
c0006bb0:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006bb4:	83 e8 05             	sub    eax,0x5
c0006bb7:	50                   	push   eax
c0006bb8:	8d 42 05             	lea    eax,[edx+0x5]
c0006bbb:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0006bbf:	50                   	push   eax
c0006bc0:	55                   	push   ebp
c0006bc1:	e8 ca 9a ff ff       	call   c0000690 <strncpy>
c0006bc6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006bca:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0006bce:	83 c4 10             	add    esp,0x10
c0006bd1:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006bd5:	c6 84 08 53 65 02 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffd9aad],0x0
c0006bdd:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006be1:	29 44 24 04          	sub    DWORD PTR [esp+0x4],eax
c0006be5:	01 c2                	add    edx,eax
c0006be7:	eb 9a                	jmp    c0006b83 <iso_readdir+0x1b4>
c0006be9:	83 c8 ff             	or     eax,0xffffffff
c0006bec:	f6 46 19 02          	test   BYTE PTR [esi+0x19],0x2
c0006bf0:	89 c2                	mov    edx,eax
c0006bf2:	75 0a                	jne    c0006bfe <iso_readdir+0x22f>
c0006bf4:	8d 46 0a             	lea    eax,[esi+0xa]
c0006bf7:	e8 0e f6 ff ff       	call   c000620a <iso_733>
c0006bfc:	31 d2                	xor    edx,edx
c0006bfe:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006c04:	89 83 50 65 02 c0    	mov    DWORD PTR [ebx-0x3ffd9ab0],eax
c0006c0a:	89 93 54 65 02 c0    	mov    DWORD PTR [ebx-0x3ffd9aac],edx
c0006c10:	81 c3 40 65 02 c0    	add    ebx,0xc0026540
c0006c16:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006c19:	01 43 08             	add    DWORD PTR [ebx+0x8],eax
c0006c1c:	8d 87 50 65 02 c0    	lea    eax,[edi-0x3ffd9ab0]
c0006c22:	83 c4 1c             	add    esp,0x1c
c0006c25:	5b                   	pop    ebx
c0006c26:	5e                   	pop    esi
c0006c27:	5f                   	pop    edi
c0006c28:	5d                   	pop    ebp
c0006c29:	c3                   	ret    

c0006c2a <iso_reset>:
c0006c2a:	83 ec 18             	sub    esp,0x18
c0006c2d:	68 fa 0d 02 c0       	push   0xc0020dfa
c0006c32:	e8 f5 3e 01 00       	call   c001ab2c <iso_kprintf>
c0006c37:	e8 1b f7 ff ff       	call   c0006357 <iso_break_all>
c0006c3c:	e8 14 f7 ff ff       	call   c0006355 <bclear>
c0006c41:	31 c0                	xor    eax,eax
c0006c43:	83 c4 1c             	add    esp,0x1c
c0006c46:	c3                   	ret    

c0006c47 <init_percd>:
c0006c47:	57                   	push   edi
c0006c48:	56                   	push   esi
c0006c49:	53                   	push   ebx
c0006c4a:	bb 01 00 00 00       	mov    ebx,0x1
c0006c4f:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0006c53:	a2 60 60 02 c0       	mov    ds:0xc0026060,al
c0006c58:	e8 cd ff ff ff       	call   c0006c2a <iso_reset>
c0006c5d:	c7 05 b4 6e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026eb4,0x0
c0006c67:	a1 ac 6e 02 c0       	mov    eax,ds:0xc0026eac
c0006c6c:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006c70:	e8 97 f7 ff ff       	call   c000640c <biread>
c0006c75:	85 c0                	test   eax,eax
c0006c77:	89 c6                	mov    esi,eax
c0006c79:	0f 88 ba 00 00 00    	js     c0006d39 <init_percd+0xf2>
c0006c7f:	8b 04 85 80 60 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9f80]
c0006c86:	52                   	push   edx
c0006c87:	6a 06                	push   0x6
c0006c89:	68 05 0e 02 c0       	push   0xc0020e05
c0006c8e:	83 c0 04             	add    eax,0x4
c0006c91:	50                   	push   eax
c0006c92:	e8 e9 96 ff ff       	call   c0000380 <memcmp>
c0006c97:	83 c4 10             	add    esp,0x10
c0006c9a:	85 c0                	test   eax,eax
c0006c9c:	74 08                	je     c0006ca6 <init_percd+0x5f>
c0006c9e:	43                   	inc    ebx
c0006c9f:	83 fb 04             	cmp    ebx,0x4
c0006ca2:	75 c3                	jne    c0006c67 <init_percd+0x20>
c0006ca4:	eb 1a                	jmp    c0006cc0 <init_percd+0x79>
c0006ca6:	8b 04 b5 80 60 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffd9f80]
c0006cad:	83 c0 5c             	add    eax,0x5c
c0006cb0:	e8 22 f5 ff ff       	call   c00061d7 <isjoliet>
c0006cb5:	a3 b4 6e 02 c0       	mov    ds:0xc0026eb4,eax
c0006cba:	85 c0                	test   eax,eax
c0006cbc:	74 e0                	je     c0006c9e <init_percd+0x57>
c0006cbe:	eb 3e                	jmp    c0006cfe <init_percd+0xb7>
c0006cc0:	83 3d b4 6e 02 c0 00 	cmp    DWORD PTR ds:0xc0026eb4,0x0
c0006cc7:	75 35                	jne    c0006cfe <init_percd+0xb7>
c0006cc9:	a1 ac 6e 02 c0       	mov    eax,ds:0xc0026eac
c0006cce:	83 c0 10             	add    eax,0x10
c0006cd1:	e8 36 f7 ff ff       	call   c000640c <biread>
c0006cd6:	85 c0                	test   eax,eax
c0006cd8:	89 c6                	mov    esi,eax
c0006cda:	78 5f                	js     c0006d3b <init_percd+0xf4>
c0006cdc:	50                   	push   eax
c0006cdd:	8b 04 b5 80 60 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffd9f80]
c0006ce4:	83 cb ff             	or     ebx,0xffffffff
c0006ce7:	6a 06                	push   0x6
c0006ce9:	68 0c 0e 02 c0       	push   0xc0020e0c
c0006cee:	83 c0 04             	add    eax,0x4
c0006cf1:	50                   	push   eax
c0006cf2:	e8 89 96 ff ff       	call   c0000380 <memcmp>
c0006cf7:	83 c4 10             	add    esp,0x10
c0006cfa:	85 c0                	test   eax,eax
c0006cfc:	75 3d                	jne    c0006d3b <init_percd+0xf4>
c0006cfe:	8b 34 b5 80 60 02 c0 	mov    esi,DWORD PTR [esi*4-0x3ffd9f80]
c0006d05:	bf 80 6e 02 c0       	mov    edi,0xc0026e80
c0006d0a:	b9 22 00 00 00       	mov    ecx,0x22
c0006d0f:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006d15:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006d17:	b8 82 6e 02 c0       	mov    eax,0xc0026e82
c0006d1c:	31 db                	xor    ebx,ebx
c0006d1e:	e8 e7 f4 ff ff       	call   c000620a <iso_733>
c0006d23:	a3 a8 6e 02 c0       	mov    ds:0xc0026ea8,eax
c0006d28:	b8 8a 6e 02 c0       	mov    eax,0xc0026e8a
c0006d2d:	e8 d8 f4 ff ff       	call   c000620a <iso_733>
c0006d32:	a3 a4 6e 02 c0       	mov    ds:0xc0026ea4,eax
c0006d37:	eb 02                	jmp    c0006d3b <init_percd+0xf4>
c0006d39:	89 c3                	mov    ebx,eax
c0006d3b:	89 d8                	mov    eax,ebx
c0006d3d:	5b                   	pop    ebx
c0006d3e:	5e                   	pop    esi
c0006d3f:	5f                   	pop    edi
c0006d40:	c3                   	ret    

c0006d41 <iso_ioctl>:
c0006d41:	83 ec 18             	sub    esp,0x18
c0006d44:	68 13 0e 02 c0       	push   0xc0020e13
c0006d49:	e8 de 3d 01 00       	call   c001ab2c <iso_kprintf>
c0006d4e:	e8 d7 fe ff ff       	call   c0006c2a <iso_reset>
c0006d53:	31 c0                	xor    eax,eax
c0006d55:	83 c4 1c             	add    esp,0x1c
c0006d58:	c3                   	ret    

c0006d59 <fs_iso9660_init>:
c0006d59:	53                   	push   ebx
c0006d5a:	31 db                	xor    ebx,ebx
c0006d5c:	83 ec 14             	sub    esp,0x14
c0006d5f:	68 1e 0e 02 c0       	push   0xc0020e1e
c0006d64:	e8 c3 3d 01 00       	call   c001ab2c <iso_kprintf>
c0006d69:	83 c4 0c             	add    esp,0xc
c0006d6c:	68 40 09 00 00       	push   0x940
c0006d71:	6a 00                	push   0x0
c0006d73:	68 40 65 02 c0       	push   0xc0026540
c0006d78:	e8 73 97 ff ff       	call   c00004f0 <memset>
c0006d7d:	c7 05 40 65 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0026540,0xffffffff
c0006d87:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006d8e:	e8 3d 7b 00 00       	call   c000e8d0 <malloc>
c0006d93:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006d9a:	a3 b0 6e 02 c0       	mov    ds:0xc0026eb0,eax
c0006d9f:	e8 2c 7b 00 00       	call   c000e8d0 <malloc>
c0006da4:	83 c4 10             	add    esp,0x10
c0006da7:	a3 20 65 02 c0       	mov    ds:0xc0026520,eax
c0006dac:	83 ec 0c             	sub    esp,0xc
c0006daf:	68 04 08 00 00       	push   0x804
c0006db4:	e8 17 7b 00 00       	call   c000e8d0 <malloc>
c0006db9:	89 04 9d 80 60 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd9f80],eax
c0006dc0:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006dc6:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006dcd:	e8 fe 7a 00 00       	call   c000e8d0 <malloc>
c0006dd2:	83 c4 10             	add    esp,0x10
c0006dd5:	89 04 9d 20 60 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd9fe0],eax
c0006ddc:	43                   	inc    ebx
c0006ddd:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006de3:	83 fb 10             	cmp    ebx,0x10
c0006de6:	75 c4                	jne    c0006dac <fs_iso9660_init+0x53>
c0006de8:	83 c4 08             	add    esp,0x8
c0006deb:	31 c0                	xor    eax,eax
c0006ded:	5b                   	pop    ebx
c0006dee:	c3                   	ret    

c0006def <fs_iso9660_shutdown>:
c0006def:	53                   	push   ebx
c0006df0:	31 db                	xor    ebx,ebx
c0006df2:	83 ec 08             	sub    esp,0x8
c0006df5:	83 ec 0c             	sub    esp,0xc
c0006df8:	ff 34 9d 80 60 02 c0 	push   DWORD PTR [ebx*4-0x3ffd9f80]
c0006dff:	e8 dc 7a 00 00       	call   c000e8e0 <free>
c0006e04:	58                   	pop    eax
c0006e05:	ff 34 9d 20 60 02 c0 	push   DWORD PTR [ebx*4-0x3ffd9fe0]
c0006e0c:	43                   	inc    ebx
c0006e0d:	e8 ce 7a 00 00       	call   c000e8e0 <free>
c0006e12:	83 c4 10             	add    esp,0x10
c0006e15:	83 fb 10             	cmp    ebx,0x10
c0006e18:	75 db                	jne    c0006df5 <fs_iso9660_shutdown+0x6>
c0006e1a:	a1 b0 6e 02 c0       	mov    eax,ds:0xc0026eb0
c0006e1f:	85 c0                	test   eax,eax
c0006e21:	74 0c                	je     c0006e2f <fs_iso9660_shutdown+0x40>
c0006e23:	83 ec 0c             	sub    esp,0xc
c0006e26:	50                   	push   eax
c0006e27:	e8 b4 7a 00 00       	call   c000e8e0 <free>
c0006e2c:	83 c4 10             	add    esp,0x10
c0006e2f:	a1 20 65 02 c0       	mov    eax,ds:0xc0026520
c0006e34:	85 c0                	test   eax,eax
c0006e36:	74 0c                	je     c0006e44 <fs_iso9660_shutdown+0x55>
c0006e38:	83 ec 0c             	sub    esp,0xc
c0006e3b:	50                   	push   eax
c0006e3c:	e8 9f 7a 00 00       	call   c000e8e0 <free>
c0006e41:	83 c4 10             	add    esp,0x10
c0006e44:	c7 05 20 65 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026520,0x0
c0006e4e:	31 c0                	xor    eax,eax
c0006e50:	c7 05 b0 6e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026eb0,0x0
c0006e5a:	83 c4 08             	add    esp,0x8
c0006e5d:	5b                   	pop    ebx
c0006e5e:	c3                   	ret    

c0006e5f <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0006e5f:	55                   	push   ebp
c0006e60:	57                   	push   edi
c0006e61:	56                   	push   esi
c0006e62:	53                   	push   ebx
c0006e63:	83 ec 20             	sub    esp,0x20
c0006e66:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0006e6a:	c7 44 24 0f 30 31 32 33 	mov    DWORD PTR [esp+0xf],0x33323130
c0006e72:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0006e76:	c7 44 24 13 34 35 36 37 	mov    DWORD PTR [esp+0x13],0x37363534
c0006e7e:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0006e82:	c7 44 24 17 38 39 41 42 	mov    DWORD PTR [esp+0x17],0x42413938
c0006e8a:	c7 44 24 1b 43 44 45 46 	mov    DWORD PTR [esp+0x1b],0x46454443
c0006e92:	89 f7                	mov    edi,esi
c0006e94:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0006e99:	89 eb                	mov    ebx,ebp
c0006e9b:	eb 02                	jmp    c0006e9f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x40>
c0006e9d:	89 c7                	mov    edi,eax
c0006e9f:	31 d2                	xor    edx,edx
c0006ea1:	89 f8                	mov    eax,edi
c0006ea3:	f7 f1                	div    ecx
c0006ea5:	83 c3 01             	add    ebx,0x1
c0006ea8:	39 cf                	cmp    edi,ecx
c0006eaa:	73 f1                	jae    c0006e9d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3e>
c0006eac:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006eaf:	eb 02                	jmp    c0006eb3 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x54>
c0006eb1:	89 c6                	mov    esi,eax
c0006eb3:	31 d2                	xor    edx,edx
c0006eb5:	89 f0                	mov    eax,esi
c0006eb7:	f7 f1                	div    ecx
c0006eb9:	83 eb 01             	sub    ebx,0x1
c0006ebc:	39 ce                	cmp    esi,ecx
c0006ebe:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c0006ec2:	88 13                	mov    BYTE PTR [ebx],dl
c0006ec4:	73 eb                	jae    c0006eb1 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x52>
c0006ec6:	83 c4 20             	add    esp,0x20
c0006ec9:	89 e8                	mov    eax,ebp
c0006ecb:	5b                   	pop    ebx
c0006ecc:	5e                   	pop    esi
c0006ecd:	5f                   	pop    edi
c0006ece:	5d                   	pop    ebp
c0006ecf:	c3                   	ret    

c0006ed0 <Dbg::logc(char)>:
c0006ed0:	f6 05 90 bd 02 c0 10 	test   BYTE PTR ds:0xc002bd90,0x10
c0006ed7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0006edb:	75 12                	jne    c0006eef <Dbg::logc(char)+0x1f>
c0006edd:	ba fd 03 00 00       	mov    edx,0x3fd
c0006ee2:	ec                   	in     al,dx
c0006ee3:	a8 20                	test   al,0x20
c0006ee5:	74 fb                	je     c0006ee2 <Dbg::logc(char)+0x12>
c0006ee7:	ba f8 03 00 00       	mov    edx,0x3f8
c0006eec:	88 c8                	mov    al,cl
c0006eee:	ee                   	out    dx,al
c0006eef:	c3                   	ret    

c0006ef0 <Dbg::logs(char*)>:
c0006ef0:	53                   	push   ebx
c0006ef1:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0006ef5:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0006ef8:	85 c0                	test   eax,eax
c0006efa:	74 11                	je     c0006f0d <Dbg::logs(char*)+0x1d>
c0006efc:	50                   	push   eax
c0006efd:	83 c3 01             	add    ebx,0x1
c0006f00:	e8 cb ff ff ff       	call   c0006ed0 <Dbg::logc(char)>
c0006f05:	58                   	pop    eax
c0006f06:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0006f09:	85 c0                	test   eax,eax
c0006f0b:	75 ef                	jne    c0006efc <Dbg::logs(char*)+0xc>
c0006f0d:	5b                   	pop    ebx
c0006f0e:	c3                   	ret    

c0006f0f <Dbg::logWriteInt(unsigned int)>:
c0006f0f:	83 ec 10             	sub    esp,0x10
c0006f12:	6a 0a                	push   0xa
c0006f14:	8d 44 24 08          	lea    eax,[esp+0x8]
c0006f18:	50                   	push   eax
c0006f19:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006f1d:	50                   	push   eax
c0006f1e:	e8 3c ff ff ff       	call   c0006e5f <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0006f23:	50                   	push   eax
c0006f24:	e8 c7 ff ff ff       	call   c0006ef0 <Dbg::logs(char*)>
c0006f29:	83 c4 20             	add    esp,0x20
c0006f2c:	c3                   	ret    

c0006f2d <Dbg::logWriteIntBase(unsigned int, int)>:
c0006f2d:	83 ec 10             	sub    esp,0x10
c0006f30:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0006f34:	50                   	push   eax
c0006f35:	8d 44 24 08          	lea    eax,[esp+0x8]
c0006f39:	50                   	push   eax
c0006f3a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006f3e:	52                   	push   edx
c0006f3f:	e8 1b ff ff ff       	call   c0006e5f <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0006f44:	50                   	push   eax
c0006f45:	e8 a6 ff ff ff       	call   c0006ef0 <Dbg::logs(char*)>
c0006f4a:	83 c4 20             	add    esp,0x20
c0006f4d:	c3                   	ret    

c0006f4e <Dbg::kprintf(char const*, ...)>:
c0006f4e:	55                   	push   ebp
c0006f4f:	57                   	push   edi
c0006f50:	56                   	push   esi
c0006f51:	53                   	push   ebx
c0006f52:	83 ec 0c             	sub    esp,0xc
c0006f55:	f6 05 90 bd 02 c0 10 	test   BYTE PTR ds:0xc002bd90,0x10
c0006f5c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0006f60:	74 08                	je     c0006f6a <Dbg::kprintf(char const*, ...)+0x1c>
c0006f62:	83 c4 0c             	add    esp,0xc
c0006f65:	5b                   	pop    ebx
c0006f66:	5e                   	pop    esi
c0006f67:	5f                   	pop    edi
c0006f68:	5d                   	pop    ebp
c0006f69:	c3                   	ret    
c0006f6a:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006f6e:	31 ff                	xor    edi,edi
c0006f70:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006f74:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0006f77:	85 c0                	test   eax,eax
c0006f79:	74 e7                	je     c0006f62 <Dbg::kprintf(char const*, ...)+0x14>
c0006f7b:	8d 77 01             	lea    esi,[edi+0x1]
c0006f7e:	83 f8 25             	cmp    eax,0x25
c0006f81:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c0006f84:	75 47                	jne    c0006fcd <Dbg::kprintf(char const*, ...)+0x7f>
c0006f86:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0006f89:	83 c7 02             	add    edi,0x2
c0006f8c:	8d 34 3b             	lea    esi,[ebx+edi*1]
c0006f8f:	83 e8 25             	sub    eax,0x25
c0006f92:	0f b6 c0             	movzx  eax,al
c0006f95:	83 f8 53             	cmp    eax,0x53
c0006f98:	0f 87 ce 00 00 00    	ja     c000706c <Dbg::kprintf(char const*, ...)+0x11e>
c0006f9e:	ff 24 85 30 0e 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdf1d0]
c0006fa5:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0006fa9:	89 c8                	mov    eax,ecx
c0006fab:	83 c1 04             	add    ecx,0x4
c0006fae:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0006fb2:	8b 28                	mov    ebp,DWORD PTR [eax]
c0006fb4:	55                   	push   ebp
c0006fb5:	e8 55 ff ff ff       	call   c0006f0f <Dbg::logWriteInt(unsigned int)>
c0006fba:	58                   	pop    eax
c0006fbb:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0006fbe:	85 c0                	test   eax,eax
c0006fc0:	74 a0                	je     c0006f62 <Dbg::kprintf(char const*, ...)+0x14>
c0006fc2:	8d 77 01             	lea    esi,[edi+0x1]
c0006fc5:	83 f8 25             	cmp    eax,0x25
c0006fc8:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c0006fcb:	74 b9                	je     c0006f86 <Dbg::kprintf(char const*, ...)+0x38>
c0006fcd:	50                   	push   eax
c0006fce:	89 f7                	mov    edi,esi
c0006fd0:	e8 fb fe ff ff       	call   c0006ed0 <Dbg::logc(char)>
c0006fd5:	89 ee                	mov    esi,ebp
c0006fd7:	58                   	pop    eax
c0006fd8:	eb e1                	jmp    c0006fbb <Dbg::kprintf(char const*, ...)+0x6d>
c0006fda:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0006fde:	89 c8                	mov    eax,ecx
c0006fe0:	83 c1 04             	add    ecx,0x4
c0006fe3:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0006fe7:	8b 00                	mov    eax,DWORD PTR [eax]
c0006fe9:	50                   	push   eax
c0006fea:	e8 01 ff ff ff       	call   c0006ef0 <Dbg::logs(char*)>
c0006fef:	58                   	pop    eax
c0006ff0:	eb c9                	jmp    c0006fbb <Dbg::kprintf(char const*, ...)+0x6d>
c0006ff2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006ff6:	89 d0                	mov    eax,edx
c0006ff8:	83 c2 04             	add    edx,0x4
c0006ffb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0006fff:	8b 00                	mov    eax,DWORD PTR [eax]
c0007001:	50                   	push   eax
c0007002:	e8 08 ff ff ff       	call   c0006f0f <Dbg::logWriteInt(unsigned int)>
c0007007:	58                   	pop    eax
c0007008:	eb b1                	jmp    c0006fbb <Dbg::kprintf(char const*, ...)+0x6d>
c000700a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000700e:	89 d0                	mov    eax,edx
c0007010:	83 c2 04             	add    edx,0x4
c0007013:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007017:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000701a:	50                   	push   eax
c000701b:	e8 b0 fe ff ff       	call   c0006ed0 <Dbg::logc(char)>
c0007020:	58                   	pop    eax
c0007021:	eb 98                	jmp    c0006fbb <Dbg::kprintf(char const*, ...)+0x6d>
c0007023:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007027:	89 c8                	mov    eax,ecx
c0007029:	83 c1 04             	add    ecx,0x4
c000702c:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0007030:	6a 10                	push   0x10
c0007032:	8b 08                	mov    ecx,DWORD PTR [eax]
c0007034:	51                   	push   ecx
c0007035:	e8 f3 fe ff ff       	call   c0006f2d <Dbg::logWriteIntBase(unsigned int, int)>
c000703a:	5d                   	pop    ebp
c000703b:	58                   	pop    eax
c000703c:	e9 7a ff ff ff       	jmp    c0006fbb <Dbg::kprintf(char const*, ...)+0x6d>
c0007041:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007045:	89 d0                	mov    eax,edx
c0007047:	83 c2 08             	add    edx,0x8
c000704a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000704e:	6a 10                	push   0x10
c0007050:	8b 00                	mov    eax,DWORD PTR [eax]
c0007052:	50                   	push   eax
c0007053:	e8 d5 fe ff ff       	call   c0006f2d <Dbg::logWriteIntBase(unsigned int, int)>
c0007058:	58                   	pop    eax
c0007059:	5a                   	pop    edx
c000705a:	e9 5c ff ff ff       	jmp    c0006fbb <Dbg::kprintf(char const*, ...)+0x6d>
c000705f:	6a 25                	push   0x25
c0007061:	e8 6a fe ff ff       	call   c0006ed0 <Dbg::logc(char)>
c0007066:	5a                   	pop    edx
c0007067:	e9 4f ff ff ff       	jmp    c0006fbb <Dbg::kprintf(char const*, ...)+0x6d>
c000706c:	6a 25                	push   0x25
c000706e:	e8 5d fe ff ff       	call   c0006ed0 <Dbg::logc(char)>
c0007073:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c0007077:	50                   	push   eax
c0007078:	e8 53 fe ff ff       	call   c0006ed0 <Dbg::logc(char)>
c000707d:	5a                   	pop    edx
c000707e:	59                   	pop    ecx
c000707f:	e9 37 ff ff ff       	jmp    c0006fbb <Dbg::kprintf(char const*, ...)+0x6d>

c0007084 <KiUbsanPrintDetails(char const*, void*)>:
c0007084:	83 ec 1c             	sub    esp,0x1c
c0007087:	83 ec 08             	sub    esp,0x8
c000708a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000708e:	68 80 0f 02 c0       	push   0xc0020f80
c0007093:	e8 b6 fe ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0007098:	83 c4 10             	add    esp,0x10
c000709b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000709f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00070a3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00070a7:	8b 00                	mov    eax,DWORD PTR [eax]
c00070a9:	83 ec 08             	sub    esp,0x8
c00070ac:	50                   	push   eax
c00070ad:	68 94 0f 02 c0       	push   0xc0020f94
c00070b2:	e8 97 fe ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00070b7:	83 c4 10             	add    esp,0x10
c00070ba:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00070be:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00070c1:	83 ec 08             	sub    esp,0x8
c00070c4:	50                   	push   eax
c00070c5:	68 9e 0f 02 c0       	push   0xc0020f9e
c00070ca:	e8 7f fe ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00070cf:	83 c4 10             	add    esp,0x10
c00070d2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00070d6:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00070d9:	83 ec 08             	sub    esp,0x8
c00070dc:	50                   	push   eax
c00070dd:	68 a8 0f 02 c0       	push   0xc0020fa8
c00070e2:	e8 67 fe ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00070e7:	83 c4 10             	add    esp,0x10
c00070ea:	90                   	nop
c00070eb:	83 c4 1c             	add    esp,0x1c
c00070ee:	c3                   	ret    
c00070ef:	90                   	nop

c00070f0 <__ubsan_handle_type_mismatch_v1>:
c00070f0:	83 ec 0c             	sub    esp,0xc
c00070f3:	83 ec 08             	sub    esp,0x8
c00070f6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00070fa:	68 ec 10 02 c0       	push   0xc00210ec
c00070ff:	e8 80 ff ff ff       	call   c0007084 <KiUbsanPrintDetails(char const*, void*)>
c0007104:	83 c4 10             	add    esp,0x10
c0007107:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000710c:	75 16                	jne    c0007124 <__ubsan_handle_type_mismatch_v1+0x34>
c000710e:	83 ec 0c             	sub    esp,0xc
c0007111:	68 b2 0f 02 c0       	push   0xc0020fb2
c0007116:	e8 33 fe ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000711b:	83 c4 10             	add    esp,0x10
c000711e:	e9 91 00 00 00       	jmp    c00071b4 <__ubsan_handle_type_mismatch_v1+0xc4>
c0007123:	90                   	nop
c0007124:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007128:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000712b:	85 c0                	test   eax,eax
c000712d:	74 29                	je     c0007158 <__ubsan_handle_type_mismatch_v1+0x68>
c000712f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007133:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0007136:	83 e8 01             	sub    eax,0x1
c0007139:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c000713d:	75 19                	jne    c0007158 <__ubsan_handle_type_mismatch_v1+0x68>
c000713f:	83 ec 08             	sub    esp,0x8
c0007142:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007146:	68 0c 11 02 c0       	push   0xc002110c
c000714b:	e8 fe fd ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0007150:	83 c4 10             	add    esp,0x10
c0007153:	eb 5f                	jmp    c00071b4 <__ubsan_handle_type_mismatch_v1+0xc4>
c0007155:	8d 76 00             	lea    esi,[esi+0x0]
c0007158:	83 ec 0c             	sub    esp,0xc
c000715b:	68 c7 0f 02 c0       	push   0xc0020fc7
c0007160:	e8 e9 fd ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0007165:	83 c4 10             	add    esp,0x10
c0007168:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000716c:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000716f:	0f b6 c0             	movzx  eax,al
c0007172:	83 ec 08             	sub    esp,0x8
c0007175:	50                   	push   eax
c0007176:	68 e1 0f 02 c0       	push   0xc0020fe1
c000717b:	e8 ce fd ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0007180:	83 c4 10             	add    esp,0x10
c0007183:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007187:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000718a:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c000718d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007191:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007195:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c0007198:	0f b6 c0             	movzx  eax,al
c000719b:	8b 04 85 60 3a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc5a0]
c00071a2:	51                   	push   ecx
c00071a3:	52                   	push   edx
c00071a4:	50                   	push   eax
c00071a5:	68 34 11 02 c0       	push   0xc0021134
c00071aa:	e8 9f fd ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00071af:	83 c4 10             	add    esp,0x10
c00071b2:	66 90                	xchg   ax,ax
c00071b4:	83 ec 0c             	sub    esp,0xc
c00071b7:	68 ec 10 02 c0       	push   0xc00210ec
c00071bc:	e8 65 7a 00 00       	call   c000ec26 <KePanic(char const*)>
c00071c1:	83 c4 10             	add    esp,0x10
c00071c4:	90                   	nop
c00071c5:	83 c4 0c             	add    esp,0xc
c00071c8:	c3                   	ret    
c00071c9:	8d 76 00             	lea    esi,[esi+0x0]

c00071cc <__ubsan_handle_pointer_overflow>:
c00071cc:	83 ec 0c             	sub    esp,0xc
c00071cf:	83 ec 08             	sub    esp,0x8
c00071d2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00071d6:	68 7c 11 02 c0       	push   0xc002117c
c00071db:	e8 a4 fe ff ff       	call   c0007084 <KiUbsanPrintDetails(char const*, void*)>
c00071e0:	83 c4 10             	add    esp,0x10
c00071e3:	83 ec 0c             	sub    esp,0xc
c00071e6:	68 7c 11 02 c0       	push   0xc002117c
c00071eb:	e8 36 7a 00 00       	call   c000ec26 <KePanic(char const*)>
c00071f0:	83 c4 10             	add    esp,0x10
c00071f3:	90                   	nop
c00071f4:	83 c4 0c             	add    esp,0xc
c00071f7:	c3                   	ret    

c00071f8 <__ubsan_handle_out_of_bounds>:
c00071f8:	83 ec 0c             	sub    esp,0xc
c00071fb:	83 ec 08             	sub    esp,0x8
c00071fe:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007202:	68 ec 0f 02 c0       	push   0xc0020fec
c0007207:	e8 78 fe ff ff       	call   c0007084 <KiUbsanPrintDetails(char const*, void*)>
c000720c:	83 c4 10             	add    esp,0x10
c000720f:	83 ec 0c             	sub    esp,0xc
c0007212:	68 ec 0f 02 c0       	push   0xc0020fec
c0007217:	e8 0a 7a 00 00       	call   c000ec26 <KePanic(char const*)>
c000721c:	83 c4 10             	add    esp,0x10
c000721f:	90                   	nop
c0007220:	83 c4 0c             	add    esp,0xc
c0007223:	c3                   	ret    

c0007224 <__ubsan_handle_add_overflow>:
c0007224:	83 ec 0c             	sub    esp,0xc
c0007227:	83 ec 08             	sub    esp,0x8
c000722a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000722e:	68 09 10 02 c0       	push   0xc0021009
c0007233:	e8 4c fe ff ff       	call   c0007084 <KiUbsanPrintDetails(char const*, void*)>
c0007238:	83 c4 10             	add    esp,0x10
c000723b:	83 ec 0c             	sub    esp,0xc
c000723e:	68 09 10 02 c0       	push   0xc0021009
c0007243:	e8 de 79 00 00       	call   c000ec26 <KePanic(char const*)>
c0007248:	83 c4 10             	add    esp,0x10
c000724b:	90                   	nop
c000724c:	83 c4 0c             	add    esp,0xc
c000724f:	c3                   	ret    

c0007250 <__ubsan_handle_load_invalid_value>:
c0007250:	83 ec 0c             	sub    esp,0xc
c0007253:	83 ec 08             	sub    esp,0x8
c0007256:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000725a:	68 9c 11 02 c0       	push   0xc002119c
c000725f:	e8 20 fe ff ff       	call   c0007084 <KiUbsanPrintDetails(char const*, void*)>
c0007264:	83 c4 10             	add    esp,0x10
c0007267:	83 ec 0c             	sub    esp,0xc
c000726a:	68 9c 11 02 c0       	push   0xc002119c
c000726f:	e8 b2 79 00 00       	call   c000ec26 <KePanic(char const*)>
c0007274:	83 c4 10             	add    esp,0x10
c0007277:	90                   	nop
c0007278:	83 c4 0c             	add    esp,0xc
c000727b:	c3                   	ret    

c000727c <__ubsan_handle_divrem_overflow>:
c000727c:	83 ec 0c             	sub    esp,0xc
c000727f:	83 ec 08             	sub    esp,0x8
c0007282:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007286:	68 c0 11 02 c0       	push   0xc00211c0
c000728b:	e8 f4 fd ff ff       	call   c0007084 <KiUbsanPrintDetails(char const*, void*)>
c0007290:	83 c4 10             	add    esp,0x10
c0007293:	83 ec 0c             	sub    esp,0xc
c0007296:	68 c0 11 02 c0       	push   0xc00211c0
c000729b:	e8 86 79 00 00       	call   c000ec26 <KePanic(char const*)>
c00072a0:	83 c4 10             	add    esp,0x10
c00072a3:	90                   	nop
c00072a4:	83 c4 0c             	add    esp,0xc
c00072a7:	c3                   	ret    

c00072a8 <__ubsan_handle_mul_overflow>:
c00072a8:	83 ec 0c             	sub    esp,0xc
c00072ab:	83 ec 08             	sub    esp,0x8
c00072ae:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00072b2:	68 25 10 02 c0       	push   0xc0021025
c00072b7:	e8 c8 fd ff ff       	call   c0007084 <KiUbsanPrintDetails(char const*, void*)>
c00072bc:	83 c4 10             	add    esp,0x10
c00072bf:	83 ec 0c             	sub    esp,0xc
c00072c2:	68 25 10 02 c0       	push   0xc0021025
c00072c7:	e8 5a 79 00 00       	call   c000ec26 <KePanic(char const*)>
c00072cc:	83 c4 10             	add    esp,0x10
c00072cf:	90                   	nop
c00072d0:	83 c4 0c             	add    esp,0xc
c00072d3:	c3                   	ret    

c00072d4 <__ubsan_handle_sub_overflow>:
c00072d4:	83 ec 0c             	sub    esp,0xc
c00072d7:	83 ec 08             	sub    esp,0x8
c00072da:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00072de:	68 41 10 02 c0       	push   0xc0021041
c00072e3:	e8 9c fd ff ff       	call   c0007084 <KiUbsanPrintDetails(char const*, void*)>
c00072e8:	83 c4 10             	add    esp,0x10
c00072eb:	83 ec 0c             	sub    esp,0xc
c00072ee:	68 41 10 02 c0       	push   0xc0021041
c00072f3:	e8 2e 79 00 00       	call   c000ec26 <KePanic(char const*)>
c00072f8:	83 c4 10             	add    esp,0x10
c00072fb:	90                   	nop
c00072fc:	83 c4 0c             	add    esp,0xc
c00072ff:	c3                   	ret    

c0007300 <__ubsan_handle_shift_out_of_bounds>:
c0007300:	83 ec 0c             	sub    esp,0xc
c0007303:	83 ec 08             	sub    esp,0x8
c0007306:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000730a:	68 e0 11 02 c0       	push   0xc00211e0
c000730f:	e8 70 fd ff ff       	call   c0007084 <KiUbsanPrintDetails(char const*, void*)>
c0007314:	83 c4 10             	add    esp,0x10
c0007317:	83 ec 0c             	sub    esp,0xc
c000731a:	68 e0 11 02 c0       	push   0xc00211e0
c000731f:	e8 02 79 00 00       	call   c000ec26 <KePanic(char const*)>
c0007324:	83 c4 10             	add    esp,0x10
c0007327:	90                   	nop
c0007328:	83 c4 0c             	add    esp,0xc
c000732b:	c3                   	ret    

c000732c <__ubsan_handle_negate_overflow>:
c000732c:	83 ec 0c             	sub    esp,0xc
c000732f:	83 ec 08             	sub    esp,0x8
c0007332:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007336:	68 04 12 02 c0       	push   0xc0021204
c000733b:	e8 44 fd ff ff       	call   c0007084 <KiUbsanPrintDetails(char const*, void*)>
c0007340:	83 c4 10             	add    esp,0x10
c0007343:	83 ec 0c             	sub    esp,0xc
c0007346:	68 04 12 02 c0       	push   0xc0021204
c000734b:	e8 d6 78 00 00       	call   c000ec26 <KePanic(char const*)>
c0007350:	83 c4 10             	add    esp,0x10
c0007353:	90                   	nop
c0007354:	83 c4 0c             	add    esp,0xc
c0007357:	c3                   	ret    

c0007358 <KiIsHashInTable(unsigned short)>:
c0007358:	0f b7 d0             	movzx  edx,ax
c000735b:	83 e0 07             	and    eax,0x7
c000735e:	c1 fa 03             	sar    edx,0x3
c0007361:	88 c1                	mov    cl,al
c0007363:	0f b6 92 00 73 02 c0 	movzx  edx,BYTE PTR [edx-0x3ffd8d00]
c000736a:	d3 fa                	sar    edx,cl
c000736c:	89 d0                	mov    eax,edx
c000736e:	83 e0 01             	and    eax,0x1
c0007371:	c3                   	ret    

c0007372 <KiSetHashInTable(unsigned short, bool)>:
c0007372:	56                   	push   esi
c0007373:	53                   	push   ebx
c0007374:	0f b7 d8             	movzx  ebx,ax
c0007377:	c1 fb 03             	sar    ebx,0x3
c000737a:	83 e0 07             	and    eax,0x7
c000737d:	89 c1                	mov    ecx,eax
c000737f:	b8 01 00 00 00       	mov    eax,0x1
c0007384:	0f b6 b3 00 73 02 c0 	movzx  esi,BYTE PTR [ebx-0x3ffd8d00]
c000738b:	d3 e0                	shl    eax,cl
c000738d:	84 d2                	test   dl,dl
c000738f:	74 04                	je     c0007395 <KiSetHashInTable(unsigned short, bool)+0x23>
c0007391:	09 f0                	or     eax,esi
c0007393:	eb 04                	jmp    c0007399 <KiSetHashInTable(unsigned short, bool)+0x27>
c0007395:	f7 d0                	not    eax
c0007397:	21 f0                	and    eax,esi
c0007399:	88 83 00 73 02 c0    	mov    BYTE PTR [ebx-0x3ffd8d00],al
c000739f:	5b                   	pop    ebx
c00073a0:	5e                   	pop    esi
c00073a1:	c3                   	ret    

c00073a2 <KiFlushSymlinkChanges()>:
c00073a2:	57                   	push   edi
c00073a3:	56                   	push   esi
c00073a4:	53                   	push   ebx
c00073a5:	83 ec 1c             	sub    esp,0x1c
c00073a8:	68 14 01 00 00       	push   0x114
c00073ad:	e8 1e 75 00 00       	call   c000e8d0 <malloc>
c00073b2:	83 c4 0c             	add    esp,0xc
c00073b5:	ff 35 d8 c6 02 c0    	push   DWORD PTR ds:0xc002c6d8
c00073bb:	68 23 12 02 c0       	push   0xc0021223
c00073c0:	50                   	push   eax
c00073c1:	89 c3                	mov    ebx,eax
c00073c3:	e8 44 0d 00 00       	call   c000810c <File::File(char const*, Process*)>
c00073c8:	83 c4 10             	add    esp,0x10
c00073cb:	85 db                	test   ebx,ebx
c00073cd:	75 10                	jne    c00073df <KiFlushSymlinkChanges()+0x3d>
c00073cf:	83 ec 0c             	sub    esp,0xc
c00073d2:	68 41 12 02 c0       	push   0xc0021241
c00073d7:	e8 4a 78 00 00       	call   c000ec26 <KePanic(char const*)>
c00073dc:	83 c4 10             	add    esp,0x10
c00073df:	50                   	push   eax
c00073e0:	50                   	push   eax
c00073e1:	6a 06                	push   0x6
c00073e3:	53                   	push   ebx
c00073e4:	e8 41 0d 00 00       	call   c000812a <File::open(FileOpenMode)>
c00073e9:	83 c4 10             	add    esp,0x10
c00073ec:	85 c0                	test   eax,eax
c00073ee:	74 10                	je     c0007400 <KiFlushSymlinkChanges()+0x5e>
c00073f0:	83 ec 0c             	sub    esp,0xc
c00073f3:	68 5b 12 02 c0       	push   0xc002125b
c00073f8:	e8 29 78 00 00       	call   c000ec26 <KePanic(char const*)>
c00073fd:	83 c4 10             	add    esp,0x10
c0007400:	31 f6                	xor    esi,esi
c0007402:	39 35 c0 6e 02 c0    	cmp    DWORD PTR ds:0xc0026ec0,esi
c0007408:	7e 70                	jle    c000747a <KiFlushSymlinkChanges()+0xd8>
c000740a:	83 ec 0c             	sub    esp,0xc
c000740d:	89 f0                	mov    eax,esi
c000740f:	8b 13                	mov    edx,DWORD PTR [ebx]
c0007411:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0007415:	c1 e0 08             	shl    eax,0x8
c0007418:	57                   	push   edi
c0007419:	05 00 6f 02 c0       	add    eax,0xc0026f00
c000741e:	50                   	push   eax
c000741f:	6a 00                	push   0x0
c0007421:	68 00 01 00 00       	push   0x100
c0007426:	53                   	push   ebx
c0007427:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000742a:	83 c4 20             	add    esp,0x20
c000742d:	81 7c 24 0c 00 01 00 00 	cmp    DWORD PTR [esp+0xc],0x100
c0007435:	74 10                	je     c0007447 <KiFlushSymlinkChanges()+0xa5>
c0007437:	83 ec 0c             	sub    esp,0xc
c000743a:	68 75 12 02 c0       	push   0xc0021275
c000743f:	e8 e2 77 00 00       	call   c000ec26 <KePanic(char const*)>
c0007444:	83 c4 10             	add    esp,0x10
c0007447:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007449:	8d 14 f5 e0 6e 02 c0 	lea    edx,[esi*8-0x3ffd9120]
c0007450:	83 ec 0c             	sub    esp,0xc
c0007453:	57                   	push   edi
c0007454:	52                   	push   edx
c0007455:	6a 00                	push   0x0
c0007457:	6a 08                	push   0x8
c0007459:	53                   	push   ebx
c000745a:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000745d:	83 c4 20             	add    esp,0x20
c0007460:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c0007465:	74 10                	je     c0007477 <KiFlushSymlinkChanges()+0xd5>
c0007467:	83 ec 0c             	sub    esp,0xc
c000746a:	68 8f 12 02 c0       	push   0xc002128f
c000746f:	e8 b2 77 00 00       	call   c000ec26 <KePanic(char const*)>
c0007474:	83 c4 10             	add    esp,0x10
c0007477:	46                   	inc    esi
c0007478:	eb 88                	jmp    c0007402 <KiFlushSymlinkChanges()+0x60>
c000747a:	83 ec 0c             	sub    esp,0xc
c000747d:	53                   	push   ebx
c000747e:	e8 05 0d 00 00       	call   c0008188 <File::close()>
c0007483:	83 c4 10             	add    esp,0x10
c0007486:	85 db                	test   ebx,ebx
c0007488:	74 0c                	je     c0007496 <KiFlushSymlinkChanges()+0xf4>
c000748a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000748c:	83 ec 0c             	sub    esp,0xc
c000748f:	53                   	push   ebx
c0007490:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007493:	83 c4 10             	add    esp,0x10
c0007496:	c7 05 c0 6e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026ec0,0x0
c00074a0:	83 c4 10             	add    esp,0x10
c00074a3:	5b                   	pop    ebx
c00074a4:	5e                   	pop    esi
c00074a5:	5f                   	pop    edi
c00074a6:	c3                   	ret    

c00074a7 <KiDeinitialiseSymlinks(void*)>:
c00074a7:	e9 f6 fe ff ff       	jmp    c00073a2 <KiFlushSymlinkChanges()>

c00074ac <KiGetSymlinkHash(char const*)>:
c00074ac:	53                   	push   ebx
c00074ad:	89 c3                	mov    ebx,eax
c00074af:	83 ec 14             	sub    esp,0x14
c00074b2:	50                   	push   eax
c00074b3:	e8 c8 90 ff ff       	call   c0000580 <strlen>
c00074b8:	5a                   	pop    edx
c00074b9:	59                   	pop    ecx
c00074ba:	50                   	push   eax
c00074bb:	53                   	push   ebx
c00074bc:	e8 30 62 00 00       	call   c000d6f1 <KeCalculateCRC32(unsigned char*, int)>
c00074c1:	83 c4 18             	add    esp,0x18
c00074c4:	5b                   	pop    ebx
c00074c5:	89 c2                	mov    edx,eax
c00074c7:	c1 ea 10             	shr    edx,0x10
c00074ca:	31 d0                	xor    eax,edx
c00074cc:	c3                   	ret    

c00074cd <KiCreateSymlinkID()>:
c00074cd:	55                   	push   ebp
c00074ce:	57                   	push   edi
c00074cf:	56                   	push   esi
c00074d0:	53                   	push   ebx
c00074d1:	31 db                	xor    ebx,ebx
c00074d3:	83 ec 1c             	sub    esp,0x1c
c00074d6:	e8 10 81 00 00       	call   c000f5eb <KeRand()>
c00074db:	8b 2d 00 93 02 c0    	mov    ebp,DWORD PTR ds:0xc0029300
c00074e1:	31 d2                	xor    edx,edx
c00074e3:	43                   	inc    ebx
c00074e4:	31 ff                	xor    edi,edi
c00074e6:	8d 4d 01             	lea    ecx,[ebp+0x1]
c00074e9:	89 ee                	mov    esi,ebp
c00074eb:	89 0d 00 93 02 c0    	mov    DWORD PTR ds:0xc0029300,ecx
c00074f1:	0f a4 c2 1f          	shld   edx,eax,0x1f
c00074f5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00074f9:	c1 e0 1f             	shl    eax,0x1f
c00074fc:	81 fb 9a 02 00 00    	cmp    ebx,0x29a
c0007502:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007506:	75 10                	jne    c0007518 <KiCreateSymlinkID()+0x4b>
c0007508:	83 ec 0c             	sub    esp,0xc
c000750b:	68 a9 12 02 c0       	push   0xc00212a9
c0007510:	e8 11 77 00 00       	call   c000ec26 <KePanic(char const*)>
c0007515:	83 c4 10             	add    esp,0x10
c0007518:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c000751c:	75 06                	jne    c0007524 <KiCreateSymlinkID()+0x57>
c000751e:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0007522:	74 b2                	je     c00074d6 <KiCreateSymlinkID()+0x9>
c0007524:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007528:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000752c:	83 c4 1c             	add    esp,0x1c
c000752f:	5b                   	pop    ebx
c0007530:	31 f0                	xor    eax,esi
c0007532:	5e                   	pop    esi
c0007533:	31 fa                	xor    edx,edi
c0007535:	5f                   	pop    edi
c0007536:	5d                   	pop    ebp
c0007537:	c3                   	ret    

c0007538 <KeRegisterSymlink(char const*, unsigned long long)>:
c0007538:	53                   	push   ebx
c0007539:	83 ec 0c             	sub    esp,0xc
c000753c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007540:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0007544:	a1 c0 6e 02 c0       	mov    eax,ds:0xc0026ec0
c0007549:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000754d:	68 00 01 00 00       	push   0x100
c0007552:	6a 00                	push   0x0
c0007554:	89 0c c5 e4 6e 02 c0 	mov    DWORD PTR [eax*8-0x3ffd911c],ecx
c000755b:	89 14 c5 e0 6e 02 c0 	mov    DWORD PTR [eax*8-0x3ffd9120],edx
c0007562:	c1 e0 08             	shl    eax,0x8
c0007565:	05 00 6f 02 c0       	add    eax,0xc0026f00
c000756a:	50                   	push   eax
c000756b:	e8 80 8f ff ff       	call   c00004f0 <memset>
c0007570:	58                   	pop    eax
c0007571:	a1 c0 6e 02 c0       	mov    eax,ds:0xc0026ec0
c0007576:	5a                   	pop    edx
c0007577:	c1 e0 08             	shl    eax,0x8
c000757a:	53                   	push   ebx
c000757b:	05 00 6f 02 c0       	add    eax,0xc0026f00
c0007580:	50                   	push   eax
c0007581:	e8 ca 90 ff ff       	call   c0000650 <strcpy>
c0007586:	89 d8                	mov    eax,ebx
c0007588:	e8 1f ff ff ff       	call   c00074ac <KiGetSymlinkHash(char const*)>
c000758d:	ba 01 00 00 00       	mov    edx,0x1
c0007592:	0f b7 c0             	movzx  eax,ax
c0007595:	e8 d8 fd ff ff       	call   c0007372 <KiSetHashInTable(unsigned short, bool)>
c000759a:	a1 c0 6e 02 c0       	mov    eax,ds:0xc0026ec0
c000759f:	83 c4 10             	add    esp,0x10
c00075a2:	40                   	inc    eax
c00075a3:	a3 c0 6e 02 c0       	mov    ds:0xc0026ec0,eax
c00075a8:	83 f8 03             	cmp    eax,0x3
c00075ab:	7e 09                	jle    c00075b6 <KeRegisterSymlink(char const*, unsigned long long)+0x7e>
c00075ad:	83 c4 08             	add    esp,0x8
c00075b0:	5b                   	pop    ebx
c00075b1:	e9 ec fd ff ff       	jmp    c00073a2 <KiFlushSymlinkChanges()>
c00075b6:	83 c4 08             	add    esp,0x8
c00075b9:	5b                   	pop    ebx
c00075ba:	c3                   	ret    

c00075bb <KeInitialiseSymlinks()>:
c00075bb:	57                   	push   edi
c00075bc:	56                   	push   esi
c00075bd:	53                   	push   ebx
c00075be:	81 ec 14 01 00 00    	sub    esp,0x114
c00075c4:	68 00 20 00 00       	push   0x2000
c00075c9:	6a 00                	push   0x0
c00075cb:	68 00 73 02 c0       	push   0xc0027300
c00075d0:	c7 05 00 93 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029300,0x0
c00075da:	c7 05 c0 6e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026ec0,0x0
c00075e4:	e8 07 8f ff ff       	call   c00004f0 <memset>
c00075e9:	59                   	pop    ecx
c00075ea:	5b                   	pop    ebx
c00075eb:	6a 00                	push   0x0
c00075ed:	68 a7 74 00 c0       	push   0xc00074a7
c00075f2:	e8 e6 4e 00 00       	call   c000c4dd <KeRegisterAtexit(void (*)(void*), void*)>
c00075f7:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00075fe:	e8 cd 72 00 00       	call   c000e8d0 <malloc>
c0007603:	83 c4 0c             	add    esp,0xc
c0007606:	ff 35 d8 c6 02 c0    	push   DWORD PTR ds:0xc002c6d8
c000760c:	68 23 12 02 c0       	push   0xc0021223
c0007611:	50                   	push   eax
c0007612:	89 c3                	mov    ebx,eax
c0007614:	e8 f3 0a 00 00       	call   c000810c <File::File(char const*, Process*)>
c0007619:	83 c4 10             	add    esp,0x10
c000761c:	85 db                	test   ebx,ebx
c000761e:	75 10                	jne    c0007630 <KeInitialiseSymlinks()+0x75>
c0007620:	83 ec 0c             	sub    esp,0xc
c0007623:	68 b2 12 02 c0       	push   0xc00212b2
c0007628:	e8 f9 75 00 00       	call   c000ec26 <KePanic(char const*)>
c000762d:	83 c4 10             	add    esp,0x10
c0007630:	83 ec 0c             	sub    esp,0xc
c0007633:	53                   	push   ebx
c0007634:	e8 b5 0d 00 00       	call   c00083ee <File::exists()>
c0007639:	83 c4 10             	add    esp,0x10
c000763c:	84 c0                	test   al,al
c000763e:	75 3a                	jne    c000767a <KeInitialiseSymlinks()+0xbf>
c0007640:	52                   	push   edx
c0007641:	52                   	push   edx
c0007642:	6a 12                	push   0x12
c0007644:	53                   	push   ebx
c0007645:	e8 e0 0a 00 00       	call   c000812a <File::open(FileOpenMode)>
c000764a:	83 c4 10             	add    esp,0x10
c000764d:	85 c0                	test   eax,eax
c000764f:	74 10                	je     c0007661 <KeInitialiseSymlinks()+0xa6>
c0007651:	83 ec 0c             	sub    esp,0xc
c0007654:	68 cf 12 02 c0       	push   0xc00212cf
c0007659:	e8 c8 75 00 00       	call   c000ec26 <KePanic(char const*)>
c000765e:	83 c4 10             	add    esp,0x10
c0007661:	83 ec 0c             	sub    esp,0xc
c0007664:	53                   	push   ebx
c0007665:	e8 1e 0b 00 00       	call   c0008188 <File::close()>
c000766a:	83 c4 10             	add    esp,0x10
c000766d:	85 db                	test   ebx,ebx
c000766f:	0f 84 9e 00 00 00    	je     c0007713 <KeInitialiseSymlinks()+0x158>
c0007675:	e9 8d 00 00 00       	jmp    c0007707 <KeInitialiseSymlinks()+0x14c>
c000767a:	50                   	push   eax
c000767b:	50                   	push   eax
c000767c:	6a 01                	push   0x1
c000767e:	53                   	push   ebx
c000767f:	e8 a6 0a 00 00       	call   c000812a <File::open(FileOpenMode)>
c0007684:	83 c4 10             	add    esp,0x10
c0007687:	85 c0                	test   eax,eax
c0007689:	74 10                	je     c000769b <KeInitialiseSymlinks()+0xe0>
c000768b:	83 ec 0c             	sub    esp,0xc
c000768e:	68 ec 12 02 c0       	push   0xc00212ec
c0007693:	e8 8e 75 00 00       	call   c000ec26 <KePanic(char const*)>
c0007698:	83 c4 10             	add    esp,0x10
c000769b:	ff 05 00 93 02 c0    	inc    DWORD PTR ds:0xc0029300
c00076a1:	83 ec 0c             	sub    esp,0xc
c00076a4:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00076a8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00076aa:	57                   	push   edi
c00076ab:	8d 74 24 20          	lea    esi,[esp+0x20]
c00076af:	56                   	push   esi
c00076b0:	6a 00                	push   0x0
c00076b2:	68 00 01 00 00       	push   0x100
c00076b7:	53                   	push   ebx
c00076b8:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00076bb:	83 c4 20             	add    esp,0x20
c00076be:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c00076c6:	75 33                	jne    c00076fb <KeInitialiseSymlinks()+0x140>
c00076c8:	83 ec 0c             	sub    esp,0xc
c00076cb:	8b 03                	mov    eax,DWORD PTR [ebx]
c00076cd:	57                   	push   edi
c00076ce:	8d 54 24 18          	lea    edx,[esp+0x18]
c00076d2:	52                   	push   edx
c00076d3:	6a 00                	push   0x0
c00076d5:	6a 08                	push   0x8
c00076d7:	53                   	push   ebx
c00076d8:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00076db:	83 c4 20             	add    esp,0x20
c00076de:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c00076e3:	75 16                	jne    c00076fb <KeInitialiseSymlinks()+0x140>
c00076e5:	89 f0                	mov    eax,esi
c00076e7:	e8 c0 fd ff ff       	call   c00074ac <KiGetSymlinkHash(char const*)>
c00076ec:	ba 01 00 00 00       	mov    edx,0x1
c00076f1:	0f b7 c0             	movzx  eax,ax
c00076f4:	e8 79 fc ff ff       	call   c0007372 <KiSetHashInTable(unsigned short, bool)>
c00076f9:	eb a0                	jmp    c000769b <KeInitialiseSymlinks()+0xe0>
c00076fb:	83 ec 0c             	sub    esp,0xc
c00076fe:	53                   	push   ebx
c00076ff:	e8 84 0a 00 00       	call   c0008188 <File::close()>
c0007704:	83 c4 10             	add    esp,0x10
c0007707:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007709:	83 ec 0c             	sub    esp,0xc
c000770c:	53                   	push   ebx
c000770d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007710:	83 c4 10             	add    esp,0x10
c0007713:	81 c4 10 01 00 00    	add    esp,0x110
c0007719:	5b                   	pop    ebx
c000771a:	5e                   	pop    esi
c000771b:	5f                   	pop    edi
c000771c:	c3                   	ret    

c000771d <KiIsSymlinkRegistered(char const*)>:
c000771d:	55                   	push   ebp
c000771e:	57                   	push   edi
c000771f:	56                   	push   esi
c0007720:	53                   	push   ebx
c0007721:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0007727:	8b b4 24 30 01 00 00 	mov    esi,DWORD PTR [esp+0x130]
c000772e:	89 f0                	mov    eax,esi
c0007730:	e8 77 fd ff ff       	call   c00074ac <KiGetSymlinkHash(char const*)>
c0007735:	0f b7 c0             	movzx  eax,ax
c0007738:	e8 1b fc ff ff       	call   c0007358 <KiIsHashInTable(unsigned short)>
c000773d:	31 d2                	xor    edx,edx
c000773f:	88 c1                	mov    cl,al
c0007741:	31 c0                	xor    eax,eax
c0007743:	84 c9                	test   cl,cl
c0007745:	0f 84 31 01 00 00    	je     c000787c <KiIsSymlinkRegistered(char const*)+0x15f>
c000774b:	31 db                	xor    ebx,ebx
c000774d:	39 1d c0 6e 02 c0    	cmp    DWORD PTR ds:0xc0026ec0,ebx
c0007753:	7e 30                	jle    c0007785 <KiIsSymlinkRegistered(char const*)+0x68>
c0007755:	89 d8                	mov    eax,ebx
c0007757:	c1 e0 08             	shl    eax,0x8
c000775a:	51                   	push   ecx
c000775b:	05 00 6f 02 c0       	add    eax,0xc0026f00
c0007760:	51                   	push   ecx
c0007761:	50                   	push   eax
c0007762:	56                   	push   esi
c0007763:	e8 18 90 ff ff       	call   c0000780 <strcmp>
c0007768:	83 c4 10             	add    esp,0x10
c000776b:	85 c0                	test   eax,eax
c000776d:	75 13                	jne    c0007782 <KiIsSymlinkRegistered(char const*)+0x65>
c000776f:	8b 04 dd e0 6e 02 c0 	mov    eax,DWORD PTR [ebx*8-0x3ffd9120]
c0007776:	8b 14 dd e4 6e 02 c0 	mov    edx,DWORD PTR [ebx*8-0x3ffd911c]
c000777d:	e9 fa 00 00 00       	jmp    c000787c <KiIsSymlinkRegistered(char const*)+0x15f>
c0007782:	43                   	inc    ebx
c0007783:	eb c8                	jmp    c000774d <KiIsSymlinkRegistered(char const*)+0x30>
c0007785:	83 ec 0c             	sub    esp,0xc
c0007788:	68 14 01 00 00       	push   0x114
c000778d:	e8 3e 71 00 00       	call   c000e8d0 <malloc>
c0007792:	83 c4 0c             	add    esp,0xc
c0007795:	ff 35 d8 c6 02 c0    	push   DWORD PTR ds:0xc002c6d8
c000779b:	68 23 12 02 c0       	push   0xc0021223
c00077a0:	50                   	push   eax
c00077a1:	89 c3                	mov    ebx,eax
c00077a3:	e8 64 09 00 00       	call   c000810c <File::File(char const*, Process*)>
c00077a8:	83 c4 10             	add    esp,0x10
c00077ab:	85 db                	test   ebx,ebx
c00077ad:	75 12                	jne    c00077c1 <KiIsSymlinkRegistered(char const*)+0xa4>
c00077af:	83 ec 0c             	sub    esp,0xc
c00077b2:	68 07 13 02 c0       	push   0xc0021307
c00077b7:	e8 6a 74 00 00       	call   c000ec26 <KePanic(char const*)>
c00077bc:	83 c4 10             	add    esp,0x10
c00077bf:	eb 10                	jmp    c00077d1 <KiIsSymlinkRegistered(char const*)+0xb4>
c00077c1:	83 ec 0c             	sub    esp,0xc
c00077c4:	53                   	push   ebx
c00077c5:	e8 24 0c 00 00       	call   c00083ee <File::exists()>
c00077ca:	83 c4 10             	add    esp,0x10
c00077cd:	84 c0                	test   al,al
c00077cf:	74 de                	je     c00077af <KiIsSymlinkRegistered(char const*)+0x92>
c00077d1:	52                   	push   edx
c00077d2:	52                   	push   edx
c00077d3:	6a 01                	push   0x1
c00077d5:	53                   	push   ebx
c00077d6:	e8 4f 09 00 00       	call   c000812a <File::open(FileOpenMode)>
c00077db:	83 c4 10             	add    esp,0x10
c00077de:	85 c0                	test   eax,eax
c00077e0:	74 10                	je     c00077f2 <KiIsSymlinkRegistered(char const*)+0xd5>
c00077e2:	83 ec 0c             	sub    esp,0xc
c00077e5:	68 22 13 02 c0       	push   0xc0021322
c00077ea:	e8 37 74 00 00       	call   c000ec26 <KePanic(char const*)>
c00077ef:	83 c4 10             	add    esp,0x10
c00077f2:	83 ec 0c             	sub    esp,0xc
c00077f5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00077f7:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c00077fb:	55                   	push   ebp
c00077fc:	8d 7c 24 20          	lea    edi,[esp+0x20]
c0007800:	57                   	push   edi
c0007801:	6a 00                	push   0x0
c0007803:	68 00 01 00 00       	push   0x100
c0007808:	53                   	push   ebx
c0007809:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000780c:	83 c4 20             	add    esp,0x20
c000780f:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c0007817:	75 4b                	jne    c0007864 <KiIsSymlinkRegistered(char const*)+0x147>
c0007819:	83 ec 0c             	sub    esp,0xc
c000781c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000781e:	55                   	push   ebp
c000781f:	8d 54 24 18          	lea    edx,[esp+0x18]
c0007823:	52                   	push   edx
c0007824:	6a 00                	push   0x0
c0007826:	6a 08                	push   0x8
c0007828:	53                   	push   ebx
c0007829:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000782c:	83 c4 20             	add    esp,0x20
c000782f:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0007834:	75 2e                	jne    c0007864 <KiIsSymlinkRegistered(char const*)+0x147>
c0007836:	50                   	push   eax
c0007837:	50                   	push   eax
c0007838:	57                   	push   edi
c0007839:	56                   	push   esi
c000783a:	e8 41 8f ff ff       	call   c0000780 <strcmp>
c000783f:	83 c4 10             	add    esp,0x10
c0007842:	85 c0                	test   eax,eax
c0007844:	75 ac                	jne    c00077f2 <KiIsSymlinkRegistered(char const*)+0xd5>
c0007846:	83 ec 0c             	sub    esp,0xc
c0007849:	53                   	push   ebx
c000784a:	e8 39 09 00 00       	call   c0008188 <File::close()>
c000784f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007851:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007854:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007857:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000785b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000785f:	83 c4 10             	add    esp,0x10
c0007862:	eb 18                	jmp    c000787c <KiIsSymlinkRegistered(char const*)+0x15f>
c0007864:	83 ec 0c             	sub    esp,0xc
c0007867:	53                   	push   ebx
c0007868:	e8 1b 09 00 00       	call   c0008188 <File::close()>
c000786d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000786f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007872:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007875:	83 c4 10             	add    esp,0x10
c0007878:	31 c0                	xor    eax,eax
c000787a:	31 d2                	xor    edx,edx
c000787c:	81 c4 1c 01 00 00    	add    esp,0x11c
c0007882:	5b                   	pop    ebx
c0007883:	5e                   	pop    esi
c0007884:	5f                   	pop    edi
c0007885:	5d                   	pop    ebp
c0007886:	c3                   	ret    

c0007887 <KeDereferenceSymlink(char const*, char*)>:
c0007887:	55                   	push   ebp
c0007888:	57                   	push   edi
c0007889:	56                   	push   esi
c000788a:	53                   	push   ebx
c000788b:	83 ec 48             	sub    esp,0x48
c000788e:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c0007892:	56                   	push   esi
c0007893:	e8 85 fe ff ff       	call   c000771d <KiIsSymlinkRegistered(char const*)>
c0007898:	83 c4 10             	add    esp,0x10
c000789b:	89 c7                	mov    edi,eax
c000789d:	89 d0                	mov    eax,edx
c000789f:	09 f8                	or     eax,edi
c00078a1:	75 07                	jne    c00078aa <KeDereferenceSymlink(char const*, char*)+0x23>
c00078a3:	31 c0                	xor    eax,eax
c00078a5:	e9 7c 01 00 00       	jmp    c0007a26 <KeDereferenceSymlink(char const*, char*)+0x19f>
c00078aa:	83 ec 0c             	sub    esp,0xc
c00078ad:	89 d5                	mov    ebp,edx
c00078af:	68 14 01 00 00       	push   0x114
c00078b4:	e8 17 70 00 00       	call   c000e8d0 <malloc>
c00078b9:	83 c4 0c             	add    esp,0xc
c00078bc:	ff 35 d8 c6 02 c0    	push   DWORD PTR ds:0xc002c6d8
c00078c2:	56                   	push   esi
c00078c3:	50                   	push   eax
c00078c4:	89 c3                	mov    ebx,eax
c00078c6:	e8 41 08 00 00       	call   c000810c <File::File(char const*, Process*)>
c00078cb:	83 c4 10             	add    esp,0x10
c00078ce:	85 db                	test   ebx,ebx
c00078d0:	0f 84 32 01 00 00    	je     c0007a08 <KeDereferenceSymlink(char const*, char*)+0x181>
c00078d6:	56                   	push   esi
c00078d7:	56                   	push   esi
c00078d8:	6a 01                	push   0x1
c00078da:	53                   	push   ebx
c00078db:	e8 4a 08 00 00       	call   c000812a <File::open(FileOpenMode)>
c00078e0:	83 c4 10             	add    esp,0x10
c00078e3:	85 c0                	test   eax,eax
c00078e5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00078e7:	74 09                	je     c00078f2 <KeDereferenceSymlink(char const*, char*)+0x6b>
c00078e9:	83 ec 0c             	sub    esp,0xc
c00078ec:	53                   	push   ebx
c00078ed:	e9 10 01 00 00       	jmp    c0007a02 <KeDereferenceSymlink(char const*, char*)+0x17b>
c00078f2:	83 ec 0c             	sub    esp,0xc
c00078f5:	8d 74 24 18          	lea    esi,[esp+0x18]
c00078f9:	56                   	push   esi
c00078fa:	8d 54 24 37          	lea    edx,[esp+0x37]
c00078fe:	52                   	push   edx
c00078ff:	6a 00                	push   0x0
c0007901:	6a 08                	push   0x8
c0007903:	53                   	push   ebx
c0007904:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0007907:	83 c4 20             	add    esp,0x20
c000790a:	85 c0                	test   eax,eax
c000790c:	0f 85 e2 00 00 00    	jne    c00079f4 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0007912:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c0007917:	0f 85 d7 00 00 00    	jne    c00079f4 <KeDereferenceSymlink(char const*, char*)+0x16d>
c000791d:	83 ec 0c             	sub    esp,0xc
c0007920:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007922:	56                   	push   esi
c0007923:	8d 54 24 20          	lea    edx,[esp+0x20]
c0007927:	52                   	push   edx
c0007928:	6a 00                	push   0x0
c000792a:	6a 08                	push   0x8
c000792c:	53                   	push   ebx
c000792d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0007930:	83 c4 20             	add    esp,0x20
c0007933:	85 c0                	test   eax,eax
c0007935:	0f 85 b9 00 00 00    	jne    c00079f4 <KeDereferenceSymlink(char const*, char*)+0x16d>
c000793b:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c0007940:	0f 85 ae 00 00 00    	jne    c00079f4 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0007946:	39 6c 24 14          	cmp    DWORD PTR [esp+0x14],ebp
c000794a:	0f 85 53 ff ff ff    	jne    c00078a3 <KeDereferenceSymlink(char const*, char*)+0x1c>
c0007950:	39 7c 24 10          	cmp    DWORD PTR [esp+0x10],edi
c0007954:	0f 85 49 ff ff ff    	jne    c00078a3 <KeDereferenceSymlink(char const*, char*)+0x1c>
c000795a:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0007962:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000796a:	51                   	push   ecx
c000796b:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000796f:	50                   	push   eax
c0007970:	8d 44 24 20          	lea    eax,[esp+0x20]
c0007974:	50                   	push   eax
c0007975:	53                   	push   ebx
c0007976:	e8 b1 0a 00 00       	call   c000842c <File::stat(unsigned long long*, bool*)>
c000797b:	83 c4 10             	add    esp,0x10
c000797e:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0007983:	75 6f                	jne    c00079f4 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0007985:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007989:	31 c9                	xor    ecx,ecx
c000798b:	bf 0f 00 00 00       	mov    edi,0xf
c0007990:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007994:	39 c7                	cmp    edi,eax
c0007996:	89 cf                	mov    edi,ecx
c0007998:	19 d7                	sbb    edi,edx
c000799a:	73 58                	jae    c00079f4 <KeDereferenceSymlink(char const*, char*)+0x16d>
c000799c:	83 c0 f0             	add    eax,0xfffffff0
c000799f:	bf ff 00 00 00       	mov    edi,0xff
c00079a4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00079a8:	83 d2 ff             	adc    edx,0xffffffff
c00079ab:	39 c7                	cmp    edi,eax
c00079ad:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00079b1:	19 d1                	sbb    ecx,edx
c00079b3:	72 53                	jb     c0007a08 <KeDereferenceSymlink(char const*, char*)+0x181>
c00079b5:	40                   	inc    eax
c00079b6:	52                   	push   edx
c00079b7:	50                   	push   eax
c00079b8:	6a 00                	push   0x0
c00079ba:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c00079be:	e8 2d 8b ff ff       	call   c00004f0 <memset>
c00079c3:	8b 03                	mov    eax,DWORD PTR [ebx]
c00079c5:	89 34 24             	mov    DWORD PTR [esp],esi
c00079c8:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c00079cc:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00079d0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00079d4:	53                   	push   ebx
c00079d5:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00079d8:	83 c4 20             	add    esp,0x20
c00079db:	85 c0                	test   eax,eax
c00079dd:	75 15                	jne    c00079f4 <KeDereferenceSymlink(char const*, char*)+0x16d>
c00079df:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00079e3:	89 c7                	mov    edi,eax
c00079e5:	c1 ff 1f             	sar    edi,0x1f
c00079e8:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c00079ec:	75 06                	jne    c00079f4 <KeDereferenceSymlink(char const*, char*)+0x16d>
c00079ee:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c00079f2:	74 19                	je     c0007a0d <KeDereferenceSymlink(char const*, char*)+0x186>
c00079f4:	83 ec 0c             	sub    esp,0xc
c00079f7:	53                   	push   ebx
c00079f8:	e8 8b 07 00 00       	call   c0008188 <File::close()>
c00079fd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00079ff:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007a02:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007a05:	83 c4 10             	add    esp,0x10
c0007a08:	83 c8 ff             	or     eax,0xffffffff
c0007a0b:	eb 19                	jmp    c0007a26 <KeDereferenceSymlink(char const*, char*)+0x19f>
c0007a0d:	83 ec 0c             	sub    esp,0xc
c0007a10:	53                   	push   ebx
c0007a11:	e8 72 07 00 00       	call   c0008188 <File::close()>
c0007a16:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007a18:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007a1b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007a1e:	83 c4 10             	add    esp,0x10
c0007a21:	b8 01 00 00 00       	mov    eax,0x1
c0007a26:	83 c4 3c             	add    esp,0x3c
c0007a29:	5b                   	pop    ebx
c0007a2a:	5e                   	pop    esi
c0007a2b:	5f                   	pop    edi
c0007a2c:	5d                   	pop    ebp
c0007a2d:	c3                   	ret    

c0007a2e <KeCreateSymlink(char const*, char const*)>:
c0007a2e:	55                   	push   ebp
c0007a2f:	57                   	push   edi
c0007a30:	56                   	push   esi
c0007a31:	53                   	push   ebx
c0007a32:	83 ec 38             	sub    esp,0x38
c0007a35:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0007a39:	68 14 01 00 00       	push   0x114
c0007a3e:	e8 8d 6e 00 00       	call   c000e8d0 <malloc>
c0007a43:	6a 00                	push   0x0
c0007a45:	ff 35 d8 c6 02 c0    	push   DWORD PTR ds:0xc002c6d8
c0007a4b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007a4f:	89 c3                	mov    ebx,eax
c0007a51:	50                   	push   eax
c0007a52:	e8 d7 05 00 00       	call   c000802e <File::File(char const*, Process*, bool)>
c0007a57:	83 c4 20             	add    esp,0x20
c0007a5a:	85 db                	test   ebx,ebx
c0007a5c:	b8 01 00 00 00       	mov    eax,0x1
c0007a61:	0f 84 fb 00 00 00    	je     c0007b62 <KeCreateSymlink(char const*, char const*)+0x134>
c0007a67:	52                   	push   edx
c0007a68:	52                   	push   edx
c0007a69:	6a 12                	push   0x12
c0007a6b:	53                   	push   ebx
c0007a6c:	e8 b9 06 00 00       	call   c000812a <File::open(FileOpenMode)>
c0007a71:	83 c4 10             	add    esp,0x10
c0007a74:	85 c0                	test   eax,eax
c0007a76:	74 0b                	je     c0007a83 <KeCreateSymlink(char const*, char const*)+0x55>
c0007a78:	83 ec 0c             	sub    esp,0xc
c0007a7b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007a7d:	53                   	push   ebx
c0007a7e:	e9 d4 00 00 00       	jmp    c0007b57 <KeCreateSymlink(char const*, char const*)+0x129>
c0007a83:	8d 7c 24 17          	lea    edi,[esp+0x17]
c0007a87:	be 3d 13 02 c0       	mov    esi,0xc002133d
c0007a8c:	b9 09 00 00 00       	mov    ecx,0x9
c0007a91:	fc                   	cld    
c0007a92:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0007a94:	83 ec 0c             	sub    esp,0xc
c0007a97:	8d 74 24 10          	lea    esi,[esp+0x10]
c0007a9b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007a9d:	56                   	push   esi
c0007a9e:	8d 54 24 27          	lea    edx,[esp+0x27]
c0007aa2:	52                   	push   edx
c0007aa3:	6a 00                	push   0x0
c0007aa5:	6a 08                	push   0x8
c0007aa7:	53                   	push   ebx
c0007aa8:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0007aab:	83 c4 20             	add    esp,0x20
c0007aae:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0007ab3:	0f 85 90 00 00 00    	jne    c0007b49 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007ab9:	85 c0                	test   eax,eax
c0007abb:	0f 85 88 00 00 00    	jne    c0007b49 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007ac1:	e8 07 fa ff ff       	call   c00074cd <KiCreateSymlinkID()>
c0007ac6:	83 ec 0c             	sub    esp,0xc
c0007ac9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0007acd:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0007ad1:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007ad3:	56                   	push   esi
c0007ad4:	8d 54 24 18          	lea    edx,[esp+0x18]
c0007ad8:	52                   	push   edx
c0007ad9:	6a 00                	push   0x0
c0007adb:	6a 08                	push   0x8
c0007add:	53                   	push   ebx
c0007ade:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0007ae1:	83 c4 20             	add    esp,0x20
c0007ae4:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0007ae9:	75 5e                	jne    c0007b49 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007aeb:	85 c0                	test   eax,eax
c0007aed:	75 5a                	jne    c0007b49 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007aef:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007af1:	83 ec 0c             	sub    esp,0xc
c0007af4:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0007af7:	55                   	push   ebp
c0007af8:	e8 83 8a ff ff       	call   c0000580 <strlen>
c0007afd:	31 d2                	xor    edx,edx
c0007aff:	89 34 24             	mov    DWORD PTR [esp],esi
c0007b02:	55                   	push   ebp
c0007b03:	52                   	push   edx
c0007b04:	50                   	push   eax
c0007b05:	53                   	push   ebx
c0007b06:	ff d7                	call   edi
c0007b08:	83 c4 14             	add    esp,0x14
c0007b0b:	55                   	push   ebp
c0007b0c:	89 c6                	mov    esi,eax
c0007b0e:	e8 6d 8a ff ff       	call   c0000580 <strlen>
c0007b13:	83 c4 10             	add    esp,0x10
c0007b16:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0007b1a:	75 2d                	jne    c0007b49 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007b1c:	85 f6                	test   esi,esi
c0007b1e:	75 29                	jne    c0007b49 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007b20:	50                   	push   eax
c0007b21:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0007b25:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0007b29:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0007b2d:	e8 06 fa ff ff       	call   c0007538 <KeRegisterSymlink(char const*, unsigned long long)>
c0007b32:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007b35:	e8 4e 06 00 00       	call   c0008188 <File::close()>
c0007b3a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007b3c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007b3f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007b42:	83 c4 10             	add    esp,0x10
c0007b45:	31 c0                	xor    eax,eax
c0007b47:	eb 19                	jmp    c0007b62 <KeCreateSymlink(char const*, char const*)+0x134>
c0007b49:	83 ec 0c             	sub    esp,0xc
c0007b4c:	53                   	push   ebx
c0007b4d:	e8 36 06 00 00       	call   c0008188 <File::close()>
c0007b52:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007b54:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007b57:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007b5a:	83 c4 10             	add    esp,0x10
c0007b5d:	b8 01 00 00 00       	mov    eax,0x1
c0007b62:	83 c4 2c             	add    esp,0x2c
c0007b65:	5b                   	pop    ebx
c0007b66:	5e                   	pop    esi
c0007b67:	5f                   	pop    edi
c0007b68:	5d                   	pop    ebp
c0007b69:	c3                   	ret    

c0007b6a <File::read(unsigned long long, void*, int*)>:
c0007b6a:	53                   	push   ebx
c0007b6b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007b6f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0007b73:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0007b7a:	83 f8 19             	cmp    eax,0x19
c0007b7d:	77 35                	ja     c0007bb4 <File::read(unsigned long long, void*, int*)+0x4a>
c0007b7f:	8b 04 85 80 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6880]
c0007b86:	85 c0                	test   eax,eax
c0007b88:	74 2a                	je     c0007bb4 <File::read(unsigned long long, void*, int*)+0x4a>
c0007b8a:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0007b90:	85 c0                	test   eax,eax
c0007b92:	74 20                	je     c0007bb4 <File::read(unsigned long long, void*, int*)+0x4a>
c0007b94:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0007b98:	74 21                	je     c0007bbb <File::read(unsigned long long, void*, int*)+0x51>
c0007b9a:	8b 08                	mov    ecx,DWORD PTR [eax]
c0007b9c:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0007ba0:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0007ba6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007baa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007bae:	5b                   	pop    ebx
c0007baf:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c0007bb2:	ff e0                	jmp    eax
c0007bb4:	b8 0b 00 00 00       	mov    eax,0xb
c0007bb9:	eb 05                	jmp    c0007bc0 <File::read(unsigned long long, void*, int*)+0x56>
c0007bbb:	b8 05 00 00 00       	mov    eax,0x5
c0007bc0:	5b                   	pop    ebx
c0007bc1:	c3                   	ret    

c0007bc2 <File::write(unsigned long long, void*, int*)>:
c0007bc2:	53                   	push   ebx
c0007bc3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007bc7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0007bcb:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0007bd2:	83 f8 19             	cmp    eax,0x19
c0007bd5:	77 35                	ja     c0007c0c <File::write(unsigned long long, void*, int*)+0x4a>
c0007bd7:	8b 04 85 80 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6880]
c0007bde:	85 c0                	test   eax,eax
c0007be0:	74 2a                	je     c0007c0c <File::write(unsigned long long, void*, int*)+0x4a>
c0007be2:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0007be8:	85 c0                	test   eax,eax
c0007bea:	74 20                	je     c0007c0c <File::write(unsigned long long, void*, int*)+0x4a>
c0007bec:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0007bf0:	74 21                	je     c0007c13 <File::write(unsigned long long, void*, int*)+0x51>
c0007bf2:	8b 08                	mov    ecx,DWORD PTR [eax]
c0007bf4:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0007bf8:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0007bfe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007c02:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007c06:	5b                   	pop    ebx
c0007c07:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c0007c0a:	ff e0                	jmp    eax
c0007c0c:	b8 0b 00 00 00       	mov    eax,0xb
c0007c11:	eb 05                	jmp    c0007c18 <File::write(unsigned long long, void*, int*)+0x56>
c0007c13:	b8 05 00 00 00       	mov    eax,0x5
c0007c18:	5b                   	pop    ebx
c0007c19:	c3                   	ret    

c0007c1a <Directory::read(unsigned long long, void*, int*)>:
c0007c1a:	53                   	push   ebx
c0007c1b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007c1f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0007c23:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0007c2a:	83 f8 19             	cmp    eax,0x19
c0007c2d:	77 35                	ja     c0007c64 <Directory::read(unsigned long long, void*, int*)+0x4a>
c0007c2f:	8b 04 85 80 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6880]
c0007c36:	85 c0                	test   eax,eax
c0007c38:	74 2a                	je     c0007c64 <Directory::read(unsigned long long, void*, int*)+0x4a>
c0007c3a:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0007c40:	85 c0                	test   eax,eax
c0007c42:	74 20                	je     c0007c64 <Directory::read(unsigned long long, void*, int*)+0x4a>
c0007c44:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0007c48:	74 21                	je     c0007c6b <Directory::read(unsigned long long, void*, int*)+0x51>
c0007c4a:	8b 08                	mov    ecx,DWORD PTR [eax]
c0007c4c:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0007c50:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0007c56:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007c5a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007c5e:	5b                   	pop    ebx
c0007c5f:	8b 41 54             	mov    eax,DWORD PTR [ecx+0x54]
c0007c62:	ff e0                	jmp    eax
c0007c64:	b8 0b 00 00 00       	mov    eax,0xb
c0007c69:	eb 05                	jmp    c0007c70 <Directory::read(unsigned long long, void*, int*)+0x56>
c0007c6b:	b8 05 00 00 00       	mov    eax,0x5
c0007c70:	5b                   	pop    ebx
c0007c71:	c3                   	ret    

c0007c72 <Directory::write(unsigned long long, void*, int*)>:
c0007c72:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007c76:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0007c7d:	b8 0b 00 00 00       	mov    eax,0xb
c0007c82:	83 fa 19             	cmp    edx,0x19
c0007c85:	77 18                	ja     c0007c9f <Directory::write(unsigned long long, void*, int*)+0x2d>
c0007c87:	8b 14 95 80 97 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6880]
c0007c8e:	85 d2                	test   edx,edx
c0007c90:	74 0d                	je     c0007c9f <Directory::write(unsigned long long, void*, int*)+0x2d>
c0007c92:	83 ba 74 01 00 00 01 	cmp    DWORD PTR [edx+0x174],0x1
c0007c99:	19 c0                	sbb    eax,eax
c0007c9b:	83 e0 0a             	and    eax,0xa
c0007c9e:	40                   	inc    eax
c0007c9f:	c3                   	ret    

c0007ca0 <File::isAtty()>:
c0007ca0:	31 c0                	xor    eax,eax
c0007ca2:	c3                   	ret    
c0007ca3:	90                   	nop

c0007ca4 <Directory::isAtty()>:
c0007ca4:	31 c0                	xor    eax,eax
c0007ca6:	c3                   	ret    
c0007ca7:	90                   	nop

c0007ca8 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0007ca8:	b8 0a 00 00 00       	mov    eax,0xa
c0007cad:	c3                   	ret    

c0007cae <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c0007cae:	b8 0a 00 00 00       	mov    eax,0xa
c0007cb3:	c3                   	ret    

c0007cb4 <Filesystem::allocateSwapfile(char const*, int)>:
c0007cb4:	31 c0                	xor    eax,eax
c0007cb6:	31 d2                	xor    edx,edx
c0007cb8:	c3                   	ret    
c0007cb9:	90                   	nop

c0007cba <File::~File()>:
c0007cba:	83 ec 0c             	sub    esp,0xc
c0007cbd:	ba fc 13 02 c0       	mov    edx,0xc00213fc
c0007cc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007cc6:	89 10                	mov    DWORD PTR [eax],edx
c0007cc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007ccc:	83 ec 0c             	sub    esp,0xc
c0007ccf:	50                   	push   eax
c0007cd0:	e8 4d a0 00 00       	call   c0011d22 <UnixFile::~UnixFile()>
c0007cd5:	83 c4 10             	add    esp,0x10
c0007cd8:	90                   	nop
c0007cd9:	83 c4 0c             	add    esp,0xc
c0007cdc:	c3                   	ret    
c0007cdd:	90                   	nop

c0007cde <File::~File()>:
c0007cde:	83 ec 0c             	sub    esp,0xc
c0007ce1:	83 ec 0c             	sub    esp,0xc
c0007ce4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ce8:	e8 cd ff ff ff       	call   c0007cba <File::~File()>
c0007ced:	83 c4 10             	add    esp,0x10
c0007cf0:	83 ec 08             	sub    esp,0x8
c0007cf3:	68 14 01 00 00       	push   0x114
c0007cf8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007cfc:	e8 62 49 00 00       	call   c000c663 <operator delete(void*, unsigned long)>
c0007d01:	83 c4 10             	add    esp,0x10
c0007d04:	83 c4 0c             	add    esp,0xc
c0007d07:	c3                   	ret    

c0007d08 <Directory::~Directory()>:
c0007d08:	83 ec 0c             	sub    esp,0xc
c0007d0b:	ba 18 14 02 c0       	mov    edx,0xc0021418
c0007d10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d14:	89 10                	mov    DWORD PTR [eax],edx
c0007d16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d1a:	83 ec 0c             	sub    esp,0xc
c0007d1d:	50                   	push   eax
c0007d1e:	e8 ff 9f 00 00       	call   c0011d22 <UnixFile::~UnixFile()>
c0007d23:	83 c4 10             	add    esp,0x10
c0007d26:	90                   	nop
c0007d27:	83 c4 0c             	add    esp,0xc
c0007d2a:	c3                   	ret    
c0007d2b:	90                   	nop

c0007d2c <Directory::~Directory()>:
c0007d2c:	83 ec 0c             	sub    esp,0xc
c0007d2f:	83 ec 0c             	sub    esp,0xc
c0007d32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007d36:	e8 cd ff ff ff       	call   c0007d08 <Directory::~Directory()>
c0007d3b:	83 c4 10             	add    esp,0x10
c0007d3e:	83 ec 08             	sub    esp,0x8
c0007d41:	68 14 01 00 00       	push   0x114
c0007d46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007d4a:	e8 14 49 00 00       	call   c000c663 <operator delete(void*, unsigned long)>
c0007d4f:	83 c4 10             	add    esp,0x10
c0007d52:	83 c4 0c             	add    esp,0xc
c0007d55:	c3                   	ret    

c0007d56 <Filesystem::Filesystem()>:
c0007d56:	ba 90 13 02 c0       	mov    edx,0xc0021390
c0007d5b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007d5f:	89 10                	mov    DWORD PTR [eax],edx
c0007d61:	8b 15 04 93 02 c0    	mov    edx,DWORD PTR ds:0xc0029304
c0007d67:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007d6b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0007d6e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007d72:	a3 04 93 02 c0       	mov    ds:0xc0029304,eax
c0007d77:	90                   	nop
c0007d78:	c3                   	ret    
c0007d79:	90                   	nop

c0007d7a <Filesystem::~Filesystem()>:
c0007d7a:	ba 90 13 02 c0       	mov    edx,0xc0021390
c0007d7f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007d83:	89 10                	mov    DWORD PTR [eax],edx
c0007d85:	90                   	nop
c0007d86:	c3                   	ret    
c0007d87:	90                   	nop

c0007d88 <Filesystem::~Filesystem()>:
c0007d88:	83 ec 0c             	sub    esp,0xc
c0007d8b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0007d8f:	e8 e6 ff ff ff       	call   c0007d7a <Filesystem::~Filesystem()>
c0007d94:	83 c4 04             	add    esp,0x4
c0007d97:	83 ec 08             	sub    esp,0x8
c0007d9a:	6a 08                	push   0x8
c0007d9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007da0:	e8 be 48 00 00       	call   c000c663 <operator delete(void*, unsigned long)>
c0007da5:	83 c4 10             	add    esp,0x10
c0007da8:	83 c4 0c             	add    esp,0xc
c0007dab:	c3                   	ret    

c0007dac <Fs::getcwd(Process*, char*, int)>:
c0007dac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007db0:	31 c0                	xor    eax,eax
c0007db2:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0007db6:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0007db9:	7d 15                	jge    c0007dd0 <Fs::getcwd(Process*, char*, int)+0x24>
c0007dbb:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007dbf:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0007dc6:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0007dc9:	84 c9                	test   cl,cl
c0007dcb:	74 06                	je     c0007dd3 <Fs::getcwd(Process*, char*, int)+0x27>
c0007dcd:	40                   	inc    eax
c0007dce:	eb e2                	jmp    c0007db2 <Fs::getcwd(Process*, char*, int)+0x6>
c0007dd0:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0007dd3:	31 c0                	xor    eax,eax
c0007dd5:	c3                   	ret    

c0007dd6 <Fs::initVFS()>:
c0007dd6:	83 ec 18             	sub    esp,0x18
c0007dd9:	6a 08                	push   0x8
c0007ddb:	e8 f0 6a 00 00       	call   c000e8d0 <malloc>
c0007de0:	89 04 24             	mov    DWORD PTR [esp],eax
c0007de3:	e8 40 25 01 00       	call   c001a328 <FAT::FAT()>
c0007de8:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0007def:	e8 dc 6a 00 00       	call   c000e8d0 <malloc>
c0007df4:	89 04 24             	mov    DWORD PTR [esp],eax
c0007df7:	e8 5a 34 01 00       	call   c001b256 <ISO9660::ISO9660()>
c0007dfc:	83 c4 1c             	add    esp,0x1c
c0007dff:	c3                   	ret    

c0007e00 <Fs::standardiseFiles(char*, char const*, char const*, bool)>:
c0007e00:	55                   	push   ebp
c0007e01:	57                   	push   edi
c0007e02:	56                   	push   esi
c0007e03:	53                   	push   ebx
c0007e04:	81 ec 20 04 00 00    	sub    esp,0x420
c0007e0a:	8a 84 24 40 04 00 00 	mov    al,BYTE PTR [esp+0x440]
c0007e11:	8b b4 24 38 04 00 00 	mov    esi,DWORD PTR [esp+0x438]
c0007e18:	8b 9c 24 34 04 00 00 	mov    ebx,DWORD PTR [esp+0x434]
c0007e1f:	8b ac 24 3c 04 00 00 	mov    ebp,DWORD PTR [esp+0x43c]
c0007e26:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0007e2a:	68 00 04 00 00       	push   0x400
c0007e2f:	6a 00                	push   0x0
c0007e31:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0007e35:	57                   	push   edi
c0007e36:	e8 b5 86 ff ff       	call   c00004f0 <memset>
c0007e3b:	83 c4 10             	add    esp,0x10
c0007e3e:	80 7e 01 3a          	cmp    BYTE PTR [esi+0x1],0x3a
c0007e42:	75 0b                	jne    c0007e4f <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x4f>
c0007e44:	50                   	push   eax
c0007e45:	50                   	push   eax
c0007e46:	56                   	push   esi
c0007e47:	57                   	push   edi
c0007e48:	e8 03 88 ff ff       	call   c0000650 <strcpy>
c0007e4d:	eb 45                	jmp    c0007e94 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x94>
c0007e4f:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0007e52:	83 f8 2f             	cmp    eax,0x2f
c0007e55:	74 05                	je     c0007e5c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x5c>
c0007e57:	83 f8 5c             	cmp    eax,0x5c
c0007e5a:	75 19                	jne    c0007e75 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x75>
c0007e5c:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0007e5f:	3c 60                	cmp    al,0x60
c0007e61:	7e 03                	jle    c0007e66 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x66>
c0007e63:	83 e8 20             	sub    eax,0x20
c0007e66:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0007e6a:	66 c7 44 24 11 3a 2f 	mov    WORD PTR [esp+0x11],0x2f3a
c0007e71:	50                   	push   eax
c0007e72:	50                   	push   eax
c0007e73:	eb 18                	jmp    c0007e8d <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x8d>
c0007e75:	50                   	push   eax
c0007e76:	50                   	push   eax
c0007e77:	55                   	push   ebp
c0007e78:	57                   	push   edi
c0007e79:	e8 d2 87 ff ff       	call   c0000650 <strcpy>
c0007e7e:	58                   	pop    eax
c0007e7f:	5a                   	pop    edx
c0007e80:	68 35 2a 02 c0       	push   0xc0022a35
c0007e85:	57                   	push   edi
c0007e86:	e8 e5 89 ff ff       	call   c0000870 <strcat>
c0007e8b:	59                   	pop    ecx
c0007e8c:	5d                   	pop    ebp
c0007e8d:	56                   	push   esi
c0007e8e:	57                   	push   edi
c0007e8f:	e8 dc 89 ff ff       	call   c0000870 <strcat>
c0007e94:	83 c4 10             	add    esp,0x10
c0007e97:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0007e9b:	3c 60                	cmp    al,0x60
c0007e9d:	7e 03                	jle    c0007ea2 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xa2>
c0007e9f:	83 e8 20             	sub    eax,0x20
c0007ea2:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0007ea6:	be 03 00 00 00       	mov    esi,0x3
c0007eab:	88 03                	mov    BYTE PTR [ebx],al
c0007ead:	b8 03 00 00 00       	mov    eax,0x3
c0007eb2:	66 c7 44 24 11 3a 2f 	mov    WORD PTR [esp+0x11],0x2f3a
c0007eb9:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c0007ebf:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0007ec3:	0f b6 7c 34 10       	movzx  edi,BYTE PTR [esp+esi*1+0x10]
c0007ec8:	89 fa                	mov    edx,edi
c0007eca:	0f be ea             	movsx  ebp,dl
c0007ecd:	85 ed                	test   ebp,ebp
c0007ecf:	0f 84 a1 00 00 00    	je     c0007f76 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x176>
c0007ed5:	8d 56 01             	lea    edx,[esi+0x1]
c0007ed8:	83 fd 2f             	cmp    ebp,0x2f
c0007edb:	74 05                	je     c0007ee2 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xe2>
c0007edd:	83 fd 5c             	cmp    ebp,0x5c
c0007ee0:	75 12                	jne    c0007ef4 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf4>
c0007ee2:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0007ee7:	89 c5                	mov    ebp,eax
c0007ee9:	74 09                	je     c0007ef4 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf4>
c0007eeb:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c0007eef:	40                   	inc    eax
c0007ef0:	89 d6                	mov    esi,edx
c0007ef2:	eb cf                	jmp    c0007ec3 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xc3>
c0007ef4:	80 7c 34 0f 2f       	cmp    BYTE PTR [esp+esi*1+0xf],0x2f
c0007ef9:	89 f9                	mov    ecx,edi
c0007efb:	0f be e9             	movsx  ebp,cl
c0007efe:	75 61                	jne    c0007f61 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x161>
c0007f00:	83 fd 2e             	cmp    ebp,0x2e
c0007f03:	75 5c                	jne    c0007f61 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x161>
c0007f05:	80 7c 14 10 2e       	cmp    BYTE PTR [esp+edx*1+0x10],0x2e
c0007f0a:	0f be 6c 34 12       	movsx  ebp,BYTE PTR [esp+esi*1+0x12]
c0007f0f:	74 19                	je     c0007f2a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x12a>
c0007f11:	83 fd 2e             	cmp    ebp,0x2e
c0007f14:	74 55                	je     c0007f6b <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x16b>
c0007f16:	89 f2                	mov    edx,esi
c0007f18:	42                   	inc    edx
c0007f19:	0f be 4c 14 10       	movsx  ecx,BYTE PTR [esp+edx*1+0x10]
c0007f1e:	83 f9 2f             	cmp    ecx,0x2f
c0007f21:	74 f5                	je     c0007f18 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x118>
c0007f23:	83 f9 5c             	cmp    ecx,0x5c
c0007f26:	74 f0                	je     c0007f18 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x118>
c0007f28:	eb c6                	jmp    c0007ef0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0007f2a:	83 fd 2e             	cmp    ebp,0x2e
c0007f2d:	74 3c                	je     c0007f6b <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x16b>
c0007f2f:	83 f8 03             	cmp    eax,0x3
c0007f32:	74 bc                	je     c0007ef0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0007f34:	42                   	inc    edx
c0007f35:	0f be 4c 14 10       	movsx  ecx,BYTE PTR [esp+edx*1+0x10]
c0007f3a:	83 f9 2f             	cmp    ecx,0x2f
c0007f3d:	74 f5                	je     c0007f34 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x134>
c0007f3f:	83 f9 5c             	cmp    ecx,0x5c
c0007f42:	74 f0                	je     c0007f34 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x134>
c0007f44:	48                   	dec    eax
c0007f45:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0007f49:	75 06                	jne    c0007f51 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x151>
c0007f4b:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0007f4f:	eb f3                	jmp    c0007f44 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x144>
c0007f51:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0007f55:	74 07                	je     c0007f5e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x15e>
c0007f57:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0007f5b:	48                   	dec    eax
c0007f5c:	eb f3                	jmp    c0007f51 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x151>
c0007f5e:	40                   	inc    eax
c0007f5f:	eb 8f                	jmp    c0007ef0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0007f61:	83 fd 2f             	cmp    ebp,0x2f
c0007f64:	74 8a                	je     c0007ef0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0007f66:	83 fd 5c             	cmp    ebp,0x5c
c0007f69:	74 85                	je     c0007ef0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0007f6b:	89 f9                	mov    ecx,edi
c0007f6d:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0007f70:	40                   	inc    eax
c0007f71:	e9 7a ff ff ff       	jmp    c0007ef0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0007f76:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0007f7a:	83 ec 0c             	sub    esp,0xc
c0007f7d:	53                   	push   ebx
c0007f7e:	e8 fd 85 ff ff       	call   c0000580 <strlen>
c0007f83:	83 c4 10             	add    esp,0x10
c0007f86:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c0007f8b:	74 1c                	je     c0007fa9 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1a9>
c0007f8d:	83 ec 0c             	sub    esp,0xc
c0007f90:	53                   	push   ebx
c0007f91:	e8 ea 85 ff ff       	call   c0000580 <strlen>
c0007f96:	83 c4 10             	add    esp,0x10
c0007f99:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0007f9e:	74 09                	je     c0007fa9 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1a9>
c0007fa0:	31 ff                	xor    edi,edi
c0007fa2:	0f b6 74 24 0f       	movzx  esi,BYTE PTR [esp+0xf]
c0007fa7:	eb 5c                	jmp    c0008005 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x205>
c0007fa9:	83 ec 0c             	sub    esp,0xc
c0007fac:	53                   	push   ebx
c0007fad:	e8 ce 85 ff ff       	call   c0000580 <strlen>
c0007fb2:	83 c4 10             	add    esp,0x10
c0007fb5:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c0007fba:	74 e4                	je     c0007fa0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1a0>
c0007fbc:	83 ec 0c             	sub    esp,0xc
c0007fbf:	53                   	push   ebx
c0007fc0:	e8 bb 85 ff ff       	call   c0000580 <strlen>
c0007fc5:	83 c4 10             	add    esp,0x10
c0007fc8:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0007fcd:	eb ab                	jmp    c0007f7a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x17a>
c0007fcf:	52                   	push   edx
c0007fd0:	52                   	push   edx
c0007fd1:	53                   	push   ebx
c0007fd2:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0007fd6:	55                   	push   ebp
c0007fd7:	e8 74 86 ff ff       	call   c0000650 <strcpy>
c0007fdc:	59                   	pop    ecx
c0007fdd:	58                   	pop    eax
c0007fde:	53                   	push   ebx
c0007fdf:	55                   	push   ebp
c0007fe0:	e8 a2 f8 ff ff       	call   c0007887 <KeDereferenceSymlink(char const*, char*)>
c0007fe5:	83 c4 10             	add    esp,0x10
c0007fe8:	48                   	dec    eax
c0007fe9:	75 37                	jne    c0008022 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x222>
c0007feb:	50                   	push   eax
c0007fec:	53                   	push   ebx
c0007fed:	55                   	push   ebp
c0007fee:	68 46 13 02 c0       	push   0xc0021346
c0007ff3:	e8 56 ef ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0007ff8:	8d 47 01             	lea    eax,[edi+0x1]
c0007ffb:	83 c4 10             	add    esp,0x10
c0007ffe:	83 ff 14             	cmp    edi,0x14
c0008001:	74 08                	je     c000800b <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x20b>
c0008003:	89 c7                	mov    edi,eax
c0008005:	85 f6                	test   esi,esi
c0008007:	75 c6                	jne    c0007fcf <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1cf>
c0008009:	eb 17                	jmp    c0008022 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x222>
c000800b:	83 ec 0c             	sub    esp,0xc
c000800e:	bf 15 00 00 00       	mov    edi,0x15
c0008013:	68 61 13 02 c0       	push   0xc0021361
c0008018:	e8 09 6c 00 00       	call   c000ec26 <KePanic(char const*)>
c000801d:	83 c4 10             	add    esp,0x10
c0008020:	eb e3                	jmp    c0008005 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x205>
c0008022:	81 c4 1c 04 00 00    	add    esp,0x41c
c0008028:	5b                   	pop    ebx
c0008029:	5e                   	pop    esi
c000802a:	5f                   	pop    edi
c000802b:	5d                   	pop    ebp
c000802c:	c3                   	ret    
c000802d:	90                   	nop

c000802e <File::File(char const*, Process*, bool)>:
c000802e:	83 ec 1c             	sub    esp,0x1c
c0008031:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008035:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0008039:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000803d:	83 ec 08             	sub    esp,0x8
c0008040:	6a 00                	push   0x0
c0008042:	50                   	push   eax
c0008043:	e8 f4 9a 00 00       	call   c0011b3c <UnixFile::UnixFile(int)>
c0008048:	83 c4 10             	add    esp,0x10
c000804b:	ba fc 13 02 c0       	mov    edx,0xc00213fc
c0008050:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008054:	89 10                	mov    DWORD PTR [eax],edx
c0008056:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000805b:	85 c0                	test   eax,eax
c000805d:	74 0f                	je     c000806e <File::File(char const*, Process*, bool)+0x40>
c000805f:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0008064:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c0008068:	74 04                	je     c000806e <File::File(char const*, Process*, bool)+0x40>
c000806a:	b0 01                	mov    al,0x1
c000806c:	eb 02                	jmp    c0008070 <File::File(char const*, Process*, bool)+0x42>
c000806e:	b0 00                	mov    al,0x0
c0008070:	0f b6 c0             	movzx  eax,al
c0008073:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0008077:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c000807d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0008081:	83 c2 0d             	add    edx,0xd
c0008084:	50                   	push   eax
c0008085:	51                   	push   ecx
c0008086:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000808a:	52                   	push   edx
c000808b:	e8 70 fd ff ff       	call   c0007e00 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0008090:	83 c4 10             	add    esp,0x10
c0008093:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008097:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000809a:	83 e8 41             	sub    eax,0x41
c000809d:	88 c2                	mov    dl,al
c000809f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00080a3:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c00080a9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00080ad:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c00080b1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00080b5:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c00080bb:	0f b6 c0             	movzx  eax,al
c00080be:	8b 04 85 80 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6880]
c00080c5:	85 c0                	test   eax,eax
c00080c7:	74 3e                	je     c0008107 <File::File(char const*, Process*, bool)+0xd9>
c00080c9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00080cd:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c00080d3:	0f b6 c0             	movzx  eax,al
c00080d6:	8b 04 85 80 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6880]
c00080dd:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c00080e3:	85 c0                	test   eax,eax
c00080e5:	75 20                	jne    c0008107 <File::File(char const*, Process*, bool)+0xd9>
c00080e7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00080eb:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c00080f1:	0f b6 c0             	movzx  eax,al
c00080f4:	8b 04 85 80 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6880]
c00080fb:	83 ec 0c             	sub    esp,0xc
c00080fe:	50                   	push   eax
c00080ff:	e8 1a 1f 00 00       	call   c000a01e <LogicalDisk::mount()>
c0008104:	83 c4 10             	add    esp,0x10
c0008107:	90                   	nop
c0008108:	83 c4 1c             	add    esp,0x1c
c000810b:	c3                   	ret    

c000810c <File::File(char const*, Process*)>:
c000810c:	83 ec 0c             	sub    esp,0xc
c000810f:	6a 01                	push   0x1
c0008111:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008115:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008119:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000811d:	e8 0c ff ff ff       	call   c000802e <File::File(char const*, Process*, bool)>
c0008122:	83 c4 10             	add    esp,0x10
c0008125:	90                   	nop
c0008126:	83 c4 0c             	add    esp,0xc
c0008129:	c3                   	ret    

c000812a <File::open(FileOpenMode)>:
c000812a:	53                   	push   ebx
c000812b:	b8 0b 00 00 00       	mov    eax,0xb
c0008130:	83 ec 08             	sub    esp,0x8
c0008133:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008137:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000813e:	83 fa 19             	cmp    edx,0x19
c0008141:	77 40                	ja     c0008183 <File::open(FileOpenMode)+0x59>
c0008143:	8b 14 95 80 97 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6880]
c000814a:	85 d2                	test   edx,edx
c000814c:	74 35                	je     c0008183 <File::open(FileOpenMode)+0x59>
c000814e:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c0008154:	85 d2                	test   edx,edx
c0008156:	74 2b                	je     c0008183 <File::open(FileOpenMode)+0x59>
c0008158:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000815c:	b8 06 00 00 00       	mov    eax,0x6
c0008161:	75 20                	jne    c0008183 <File::open(FileOpenMode)+0x59>
c0008163:	8b 02                	mov    eax,DWORD PTR [edx]
c0008165:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000816b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000816f:	51                   	push   ecx
c0008170:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0008173:	51                   	push   ecx
c0008174:	52                   	push   edx
c0008175:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0008178:	83 c4 10             	add    esp,0x10
c000817b:	85 c0                	test   eax,eax
c000817d:	75 04                	jne    c0008183 <File::open(FileOpenMode)+0x59>
c000817f:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0008183:	83 c4 08             	add    esp,0x8
c0008186:	5b                   	pop    ebx
c0008187:	c3                   	ret    

c0008188 <File::close()>:
c0008188:	53                   	push   ebx
c0008189:	b8 0b 00 00 00       	mov    eax,0xb
c000818e:	83 ec 08             	sub    esp,0x8
c0008191:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008195:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000819c:	83 f9 19             	cmp    ecx,0x19
c000819f:	77 41                	ja     c00081e2 <File::close()+0x5a>
c00081a1:	8b 1c 8d 80 97 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd6880]
c00081a8:	85 db                	test   ebx,ebx
c00081aa:	74 36                	je     c00081e2 <File::close()+0x5a>
c00081ac:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c00081b3:	74 2d                	je     c00081e2 <File::close()+0x5a>
c00081b5:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00081b9:	b8 05 00 00 00       	mov    eax,0x5
c00081be:	74 22                	je     c00081e2 <File::close()+0x5a>
c00081c0:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c00081c4:	8b 04 8d 80 97 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd6880]
c00081cb:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c00081d1:	53                   	push   ebx
c00081d2:	53                   	push   ebx
c00081d3:	8b 08                	mov    ecx,DWORD PTR [eax]
c00081d5:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c00081db:	50                   	push   eax
c00081dc:	ff 51 1c             	call   DWORD PTR [ecx+0x1c]
c00081df:	83 c4 10             	add    esp,0x10
c00081e2:	83 c4 08             	add    esp,0x8
c00081e5:	5b                   	pop    ebx
c00081e6:	c3                   	ret    
c00081e7:	90                   	nop

c00081e8 <File::seek(unsigned long long)>:
c00081e8:	56                   	push   esi
c00081e9:	b8 0b 00 00 00       	mov    eax,0xb
c00081ee:	53                   	push   ebx
c00081ef:	51                   	push   ecx
c00081f0:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00081f4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00081f8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00081fc:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c0008203:	83 fa 19             	cmp    edx,0x19
c0008206:	77 31                	ja     c0008239 <File::seek(unsigned long long)+0x51>
c0008208:	8b 14 95 80 97 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6880]
c000820f:	85 d2                	test   edx,edx
c0008211:	74 26                	je     c0008239 <File::seek(unsigned long long)+0x51>
c0008213:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c0008219:	85 d2                	test   edx,edx
c000821b:	74 1c                	je     c0008239 <File::seek(unsigned long long)+0x51>
c000821d:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c0008221:	b8 05 00 00 00       	mov    eax,0x5
c0008226:	74 11                	je     c0008239 <File::seek(unsigned long long)+0x51>
c0008228:	8b 02                	mov    eax,DWORD PTR [edx]
c000822a:	53                   	push   ebx
c000822b:	51                   	push   ecx
c000822c:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c0008232:	52                   	push   edx
c0008233:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0008236:	83 c4 10             	add    esp,0x10
c0008239:	5a                   	pop    edx
c000823a:	5b                   	pop    ebx
c000823b:	5e                   	pop    esi
c000823c:	c3                   	ret    
c000823d:	90                   	nop

c000823e <File::truncate(unsigned long long)>:
c000823e:	56                   	push   esi
c000823f:	b8 0b 00 00 00       	mov    eax,0xb
c0008244:	53                   	push   ebx
c0008245:	51                   	push   ecx
c0008246:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000824a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000824e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0008252:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c0008259:	83 fa 19             	cmp    edx,0x19
c000825c:	77 31                	ja     c000828f <File::truncate(unsigned long long)+0x51>
c000825e:	8b 14 95 80 97 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6880]
c0008265:	85 d2                	test   edx,edx
c0008267:	74 26                	je     c000828f <File::truncate(unsigned long long)+0x51>
c0008269:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000826f:	85 d2                	test   edx,edx
c0008271:	74 1c                	je     c000828f <File::truncate(unsigned long long)+0x51>
c0008273:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c0008277:	b8 05 00 00 00       	mov    eax,0x5
c000827c:	74 11                	je     c000828f <File::truncate(unsigned long long)+0x51>
c000827e:	8b 02                	mov    eax,DWORD PTR [edx]
c0008280:	53                   	push   ebx
c0008281:	51                   	push   ecx
c0008282:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c0008288:	52                   	push   edx
c0008289:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000828c:	83 c4 10             	add    esp,0x10
c000828f:	5a                   	pop    edx
c0008290:	5b                   	pop    ebx
c0008291:	5e                   	pop    esi
c0008292:	c3                   	ret    
c0008293:	90                   	nop

c0008294 <File::tell(unsigned long long*)>:
c0008294:	83 ec 0c             	sub    esp,0xc
c0008297:	b8 0b 00 00 00       	mov    eax,0xb
c000829c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00082a0:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00082a7:	83 fa 19             	cmp    edx,0x19
c00082aa:	77 34                	ja     c00082e0 <File::tell(unsigned long long*)+0x4c>
c00082ac:	8b 14 95 80 97 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6880]
c00082b3:	85 d2                	test   edx,edx
c00082b5:	74 29                	je     c00082e0 <File::tell(unsigned long long*)+0x4c>
c00082b7:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c00082bd:	85 d2                	test   edx,edx
c00082bf:	74 1f                	je     c00082e0 <File::tell(unsigned long long*)+0x4c>
c00082c1:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c00082c5:	b8 05 00 00 00       	mov    eax,0x5
c00082ca:	74 14                	je     c00082e0 <File::tell(unsigned long long*)+0x4c>
c00082cc:	50                   	push   eax
c00082cd:	8b 02                	mov    eax,DWORD PTR [edx]
c00082cf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00082d3:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c00082d9:	52                   	push   edx
c00082da:	ff 50 28             	call   DWORD PTR [eax+0x28]
c00082dd:	83 c4 10             	add    esp,0x10
c00082e0:	83 c4 0c             	add    esp,0xc
c00082e3:	c3                   	ret    

c00082e4 <File::rewind()>:
c00082e4:	83 ec 10             	sub    esp,0x10
c00082e7:	6a 00                	push   0x0
c00082e9:	6a 00                	push   0x0
c00082eb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00082ef:	e8 f4 fe ff ff       	call   c00081e8 <File::seek(unsigned long long)>
c00082f4:	83 c4 1c             	add    esp,0x1c
c00082f7:	c3                   	ret    

c00082f8 <File::unlink()>:
c00082f8:	83 ec 0c             	sub    esp,0xc
c00082fb:	b8 0b 00 00 00       	mov    eax,0xb
c0008300:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008304:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000830b:	83 f9 19             	cmp    ecx,0x19
c000830e:	77 2f                	ja     c000833f <File::unlink()+0x47>
c0008310:	8b 0c 8d 80 97 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6880]
c0008317:	85 c9                	test   ecx,ecx
c0008319:	74 24                	je     c000833f <File::unlink()+0x47>
c000831b:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008321:	85 c9                	test   ecx,ecx
c0008323:	74 1a                	je     c000833f <File::unlink()+0x47>
c0008325:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008329:	b8 06 00 00 00       	mov    eax,0x6
c000832e:	75 0f                	jne    c000833f <File::unlink()+0x47>
c0008330:	50                   	push   eax
c0008331:	83 c2 0d             	add    edx,0xd
c0008334:	50                   	push   eax
c0008335:	8b 01                	mov    eax,DWORD PTR [ecx]
c0008337:	52                   	push   edx
c0008338:	51                   	push   ecx
c0008339:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000833c:	83 c4 10             	add    esp,0x10
c000833f:	83 c4 0c             	add    esp,0xc
c0008342:	c3                   	ret    
c0008343:	90                   	nop

c0008344 <File::rename(char const*)>:
c0008344:	83 ec 0c             	sub    esp,0xc
c0008347:	b8 0b 00 00 00       	mov    eax,0xb
c000834c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008350:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008357:	83 f9 19             	cmp    ecx,0x19
c000835a:	77 32                	ja     c000838e <File::rename(char const*)+0x4a>
c000835c:	8b 0c 8d 80 97 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6880]
c0008363:	85 c9                	test   ecx,ecx
c0008365:	74 27                	je     c000838e <File::rename(char const*)+0x4a>
c0008367:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000836d:	85 c9                	test   ecx,ecx
c000836f:	74 1d                	je     c000838e <File::rename(char const*)+0x4a>
c0008371:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008375:	b8 06 00 00 00       	mov    eax,0x6
c000837a:	75 12                	jne    c000838e <File::rename(char const*)+0x4a>
c000837c:	50                   	push   eax
c000837d:	83 c2 0d             	add    edx,0xd
c0008380:	8b 01                	mov    eax,DWORD PTR [ecx]
c0008382:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008386:	52                   	push   edx
c0008387:	51                   	push   ecx
c0008388:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000838b:	83 c4 10             	add    esp,0x10
c000838e:	83 c4 0c             	add    esp,0xc
c0008391:	c3                   	ret    

c0008392 <File::chfatattr(unsigned char, unsigned char)>:
c0008392:	57                   	push   edi
c0008393:	b8 0b 00 00 00       	mov    eax,0xb
c0008398:	56                   	push   esi
c0008399:	53                   	push   ebx
c000839a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000839e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00083a2:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00083a6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00083ad:	83 f9 19             	cmp    ecx,0x19
c00083b0:	77 37                	ja     c00083e9 <File::chfatattr(unsigned char, unsigned char)+0x57>
c00083b2:	8b 0c 8d 80 97 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6880]
c00083b9:	85 c9                	test   ecx,ecx
c00083bb:	74 2c                	je     c00083e9 <File::chfatattr(unsigned char, unsigned char)+0x57>
c00083bd:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c00083c3:	85 c9                	test   ecx,ecx
c00083c5:	74 22                	je     c00083e9 <File::chfatattr(unsigned char, unsigned char)+0x57>
c00083c7:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00083cb:	b8 06 00 00 00       	mov    eax,0x6
c00083d0:	75 17                	jne    c00083e9 <File::chfatattr(unsigned char, unsigned char)+0x57>
c00083d2:	89 f0                	mov    eax,esi
c00083d4:	8b 39                	mov    edi,DWORD PTR [ecx]
c00083d6:	0f b6 db             	movzx  ebx,bl
c00083d9:	0f b6 f0             	movzx  esi,al
c00083dc:	83 c2 0d             	add    edx,0xd
c00083df:	56                   	push   esi
c00083e0:	53                   	push   ebx
c00083e1:	52                   	push   edx
c00083e2:	51                   	push   ecx
c00083e3:	ff 57 38             	call   DWORD PTR [edi+0x38]
c00083e6:	83 c4 10             	add    esp,0x10
c00083e9:	5b                   	pop    ebx
c00083ea:	5e                   	pop    esi
c00083eb:	5f                   	pop    edi
c00083ec:	c3                   	ret    
c00083ed:	90                   	nop

c00083ee <File::exists()>:
c00083ee:	83 ec 0c             	sub    esp,0xc
c00083f1:	31 c0                	xor    eax,eax
c00083f3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00083f7:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00083fe:	83 f9 19             	cmp    ecx,0x19
c0008401:	77 24                	ja     c0008427 <File::exists()+0x39>
c0008403:	8b 0c 8d 80 97 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6880]
c000840a:	85 c9                	test   ecx,ecx
c000840c:	74 19                	je     c0008427 <File::exists()+0x39>
c000840e:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008414:	85 c9                	test   ecx,ecx
c0008416:	74 0f                	je     c0008427 <File::exists()+0x39>
c0008418:	50                   	push   eax
c0008419:	83 c2 0d             	add    edx,0xd
c000841c:	50                   	push   eax
c000841d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000841f:	52                   	push   edx
c0008420:	51                   	push   ecx
c0008421:	ff 50 48             	call   DWORD PTR [eax+0x48]
c0008424:	83 c4 10             	add    esp,0x10
c0008427:	83 c4 0c             	add    esp,0xc
c000842a:	c3                   	ret    
c000842b:	90                   	nop

c000842c <File::stat(unsigned long long*, bool*)>:
c000842c:	56                   	push   esi
c000842d:	53                   	push   ebx
c000842e:	50                   	push   eax
c000842f:	b8 0b 00 00 00       	mov    eax,0xb
c0008434:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008438:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000843c:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0008440:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008447:	83 f9 19             	cmp    ecx,0x19
c000844a:	77 3d                	ja     c0008489 <File::stat(unsigned long long*, bool*)+0x5d>
c000844c:	8b 0c 8d 80 97 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6880]
c0008453:	85 c9                	test   ecx,ecx
c0008455:	74 32                	je     c0008489 <File::stat(unsigned long long*, bool*)+0x5d>
c0008457:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000845d:	85 c9                	test   ecx,ecx
c000845f:	74 28                	je     c0008489 <File::stat(unsigned long long*, bool*)+0x5d>
c0008461:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008465:	8b 01                	mov    eax,DWORD PTR [ecx]
c0008467:	74 13                	je     c000847c <File::stat(unsigned long long*, bool*)+0x50>
c0008469:	83 ec 04             	sub    esp,0x4
c000846c:	56                   	push   esi
c000846d:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0008473:	51                   	push   ecx
c0008474:	ff 50 30             	call   DWORD PTR [eax+0x30]
c0008477:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000847a:	eb 0a                	jmp    c0008486 <File::stat(unsigned long long*, bool*)+0x5a>
c000847c:	53                   	push   ebx
c000847d:	83 c2 0d             	add    edx,0xd
c0008480:	56                   	push   esi
c0008481:	52                   	push   edx
c0008482:	51                   	push   ecx
c0008483:	ff 50 34             	call   DWORD PTR [eax+0x34]
c0008486:	83 c4 10             	add    esp,0x10
c0008489:	5a                   	pop    edx
c000848a:	5b                   	pop    ebx
c000848b:	5e                   	pop    esi
c000848c:	c3                   	ret    

c000848d <Fs::setcwd(Process*, char*)>:
c000848d:	55                   	push   ebp
c000848e:	57                   	push   edi
c000848f:	56                   	push   esi
c0008490:	53                   	push   ebx
c0008491:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0008497:	8b ac 24 30 02 00 00 	mov    ebp,DWORD PTR [esp+0x230]
c000849e:	6a 00                	push   0x0
c00084a0:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c00084a6:	57                   	push   edi
c00084a7:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00084ae:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c00084b2:	56                   	push   esi
c00084b3:	e8 48 f9 ff ff       	call   c0007e00 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00084b8:	89 34 24             	mov    DWORD PTR [esp],esi
c00084bb:	e8 c0 80 ff ff       	call   c0000580 <strlen>
c00084c0:	83 c4 10             	add    esp,0x10
c00084c3:	83 f8 02             	cmp    eax,0x2
c00084c6:	77 15                	ja     c00084dd <Fs::setcwd(Process*, char*)+0x50>
c00084c8:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c00084cd:	83 eb 41             	sub    ebx,0x41
c00084d0:	8b 04 9d 80 97 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd6880]
c00084d7:	85 c0                	test   eax,eax
c00084d9:	75 1c                	jne    c00084f7 <Fs::setcwd(Process*, char*)+0x6a>
c00084db:	eb 2f                	jmp    c000850c <Fs::setcwd(Process*, char*)+0x7f>
c00084dd:	83 ec 0c             	sub    esp,0xc
c00084e0:	56                   	push   esi
c00084e1:	e8 9a 80 ff ff       	call   c0000580 <strlen>
c00084e6:	83 c4 10             	add    esp,0x10
c00084e9:	83 f8 03             	cmp    eax,0x3
c00084ec:	75 57                	jne    c0008545 <Fs::setcwd(Process*, char*)+0xb8>
c00084ee:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c00084f3:	75 50                	jne    c0008545 <Fs::setcwd(Process*, char*)+0xb8>
c00084f5:	eb d1                	jmp    c00084c8 <Fs::setcwd(Process*, char*)+0x3b>
c00084f7:	83 b8 74 01 00 00 00 	cmp    DWORD PTR [eax+0x174],0x0
c00084fe:	75 0c                	jne    c000850c <Fs::setcwd(Process*, char*)+0x7f>
c0008500:	83 ec 0c             	sub    esp,0xc
c0008503:	50                   	push   eax
c0008504:	e8 15 1b 00 00       	call   c000a01e <LogicalDisk::mount()>
c0008509:	83 c4 10             	add    esp,0x10
c000850c:	83 fb 19             	cmp    ebx,0x19
c000850f:	b8 03 00 00 00       	mov    eax,0x3
c0008514:	0f 87 c6 00 00 00    	ja     c00085e0 <Fs::setcwd(Process*, char*)+0x153>
c000851a:	8b 14 9d 80 97 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffd6880]
c0008521:	b8 05 00 00 00       	mov    eax,0x5
c0008526:	85 d2                	test   edx,edx
c0008528:	0f 84 b2 00 00 00    	je     c00085e0 <Fs::setcwd(Process*, char*)+0x153>
c000852e:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c0008535:	b8 06 00 00 00       	mov    eax,0x6
c000853a:	0f 85 92 00 00 00    	jne    c00085d2 <Fs::setcwd(Process*, char*)+0x145>
c0008540:	e9 9b 00 00 00       	jmp    c00085e0 <Fs::setcwd(Process*, char*)+0x153>
c0008545:	83 ec 0c             	sub    esp,0xc
c0008548:	68 14 01 00 00       	push   0x114
c000854d:	e8 7e 63 00 00       	call   c000e8d0 <malloc>
c0008552:	83 c4 0c             	add    esp,0xc
c0008555:	55                   	push   ebp
c0008556:	56                   	push   esi
c0008557:	50                   	push   eax
c0008558:	89 c3                	mov    ebx,eax
c000855a:	e8 ad fb ff ff       	call   c000810c <File::File(char const*, Process*)>
c000855f:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c0008564:	83 c4 0c             	add    esp,0xc
c0008567:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000856b:	50                   	push   eax
c000856c:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008570:	50                   	push   eax
c0008571:	53                   	push   ebx
c0008572:	e8 b5 fe ff ff       	call   c000842c <File::stat(unsigned long long*, bool*)>
c0008577:	83 c4 10             	add    esp,0x10
c000857a:	83 f8 02             	cmp    eax,0x2
c000857d:	74 27                	je     c00085a6 <Fs::setcwd(Process*, char*)+0x119>
c000857f:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c0008584:	75 1c                	jne    c00085a2 <Fs::setcwd(Process*, char*)+0x115>
c0008586:	85 db                	test   ebx,ebx
c0008588:	b8 02 00 00 00       	mov    eax,0x2
c000858d:	74 51                	je     c00085e0 <Fs::setcwd(Process*, char*)+0x153>
c000858f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0008591:	83 ec 0c             	sub    esp,0xc
c0008594:	53                   	push   ebx
c0008595:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0008598:	83 c4 10             	add    esp,0x10
c000859b:	b8 02 00 00 00       	mov    eax,0x2
c00085a0:	eb 3e                	jmp    c00085e0 <Fs::setcwd(Process*, char*)+0x153>
c00085a2:	85 c0                	test   eax,eax
c00085a4:	74 1c                	je     c00085c2 <Fs::setcwd(Process*, char*)+0x135>
c00085a6:	85 db                	test   ebx,ebx
c00085a8:	b8 01 00 00 00       	mov    eax,0x1
c00085ad:	74 31                	je     c00085e0 <Fs::setcwd(Process*, char*)+0x153>
c00085af:	8b 03                	mov    eax,DWORD PTR [ebx]
c00085b1:	83 ec 0c             	sub    esp,0xc
c00085b4:	53                   	push   ebx
c00085b5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00085b8:	83 c4 10             	add    esp,0x10
c00085bb:	b8 01 00 00 00       	mov    eax,0x1
c00085c0:	eb 1e                	jmp    c00085e0 <Fs::setcwd(Process*, char*)+0x153>
c00085c2:	85 db                	test   ebx,ebx
c00085c4:	74 0c                	je     c00085d2 <Fs::setcwd(Process*, char*)+0x145>
c00085c6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00085c8:	83 ec 0c             	sub    esp,0xc
c00085cb:	53                   	push   ebx
c00085cc:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00085cf:	83 c4 10             	add    esp,0x10
c00085d2:	50                   	push   eax
c00085d3:	50                   	push   eax
c00085d4:	56                   	push   esi
c00085d5:	57                   	push   edi
c00085d6:	e8 75 80 ff ff       	call   c0000650 <strcpy>
c00085db:	83 c4 10             	add    esp,0x10
c00085de:	31 c0                	xor    eax,eax
c00085e0:	81 c4 1c 02 00 00    	add    esp,0x21c
c00085e6:	5b                   	pop    ebx
c00085e7:	5e                   	pop    esi
c00085e8:	5f                   	pop    edi
c00085e9:	5d                   	pop    ebp
c00085ea:	c3                   	ret    
c00085eb:	90                   	nop

c00085ec <Directory::Directory(char const*, Process*)>:
c00085ec:	83 ec 0c             	sub    esp,0xc
c00085ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00085f3:	83 ec 08             	sub    esp,0x8
c00085f6:	6a 00                	push   0x0
c00085f8:	50                   	push   eax
c00085f9:	e8 3e 95 00 00       	call   c0011b3c <UnixFile::UnixFile(int)>
c00085fe:	83 c4 10             	add    esp,0x10
c0008601:	ba 18 14 02 c0       	mov    edx,0xc0021418
c0008606:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000860a:	89 10                	mov    DWORD PTR [eax],edx
c000860c:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0008611:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0008615:	0f 95 c0             	setne  al
c0008618:	0f b6 c0             	movzx  eax,al
c000861b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000861f:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c0008625:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008629:	83 c2 0d             	add    edx,0xd
c000862c:	50                   	push   eax
c000862d:	51                   	push   ecx
c000862e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008632:	52                   	push   edx
c0008633:	e8 c8 f7 ff ff       	call   c0007e00 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0008638:	83 c4 10             	add    esp,0x10
c000863b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000863f:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0008642:	83 e8 41             	sub    eax,0x41
c0008645:	88 c2                	mov    dl,al
c0008647:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000864b:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0008651:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008655:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0008659:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000865d:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c0008663:	0f b6 c0             	movzx  eax,al
c0008666:	8b 04 85 80 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6880]
c000866d:	85 c0                	test   eax,eax
c000866f:	74 3e                	je     c00086af <Directory::Directory(char const*, Process*)+0xc3>
c0008671:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008675:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000867b:	0f b6 c0             	movzx  eax,al
c000867e:	8b 04 85 80 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6880]
c0008685:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000868b:	85 c0                	test   eax,eax
c000868d:	75 20                	jne    c00086af <Directory::Directory(char const*, Process*)+0xc3>
c000868f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008693:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c0008699:	0f b6 c0             	movzx  eax,al
c000869c:	8b 04 85 80 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6880]
c00086a3:	83 ec 0c             	sub    esp,0xc
c00086a6:	50                   	push   eax
c00086a7:	e8 72 19 00 00       	call   c000a01e <LogicalDisk::mount()>
c00086ac:	83 c4 10             	add    esp,0x10
c00086af:	90                   	nop
c00086b0:	83 c4 0c             	add    esp,0xc
c00086b3:	c3                   	ret    

c00086b4 <Directory::open()>:
c00086b4:	53                   	push   ebx
c00086b5:	b8 0b 00 00 00       	mov    eax,0xb
c00086ba:	83 ec 08             	sub    esp,0x8
c00086bd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00086c1:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c00086c8:	83 fa 19             	cmp    edx,0x19
c00086cb:	77 3d                	ja     c000870a <Directory::open()+0x56>
c00086cd:	8b 14 95 80 97 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6880]
c00086d4:	85 d2                	test   edx,edx
c00086d6:	74 32                	je     c000870a <Directory::open()+0x56>
c00086d8:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c00086de:	85 d2                	test   edx,edx
c00086e0:	74 28                	je     c000870a <Directory::open()+0x56>
c00086e2:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c00086e6:	b8 06 00 00 00       	mov    eax,0x6
c00086eb:	75 1d                	jne    c000870a <Directory::open()+0x56>
c00086ed:	50                   	push   eax
c00086ee:	8b 02                	mov    eax,DWORD PTR [edx]
c00086f0:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c00086f6:	51                   	push   ecx
c00086f7:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c00086fa:	51                   	push   ecx
c00086fb:	52                   	push   edx
c00086fc:	ff 50 50             	call   DWORD PTR [eax+0x50]
c00086ff:	83 c4 10             	add    esp,0x10
c0008702:	85 c0                	test   eax,eax
c0008704:	75 04                	jne    c000870a <Directory::open()+0x56>
c0008706:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000870a:	83 c4 08             	add    esp,0x8
c000870d:	5b                   	pop    ebx
c000870e:	c3                   	ret    
c000870f:	90                   	nop

c0008710 <Directory::close()>:
c0008710:	53                   	push   ebx
c0008711:	b8 0b 00 00 00       	mov    eax,0xb
c0008716:	83 ec 08             	sub    esp,0x8
c0008719:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000871d:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008724:	83 f9 19             	cmp    ecx,0x19
c0008727:	77 41                	ja     c000876a <Directory::close()+0x5a>
c0008729:	8b 1c 8d 80 97 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd6880]
c0008730:	85 db                	test   ebx,ebx
c0008732:	74 36                	je     c000876a <Directory::close()+0x5a>
c0008734:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000873b:	74 2d                	je     c000876a <Directory::close()+0x5a>
c000873d:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008741:	b8 05 00 00 00       	mov    eax,0x5
c0008746:	74 22                	je     c000876a <Directory::close()+0x5a>
c0008748:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000874c:	8b 04 8d 80 97 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd6880]
c0008753:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0008759:	53                   	push   ebx
c000875a:	53                   	push   ebx
c000875b:	8b 08                	mov    ecx,DWORD PTR [eax]
c000875d:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0008763:	50                   	push   eax
c0008764:	ff 51 20             	call   DWORD PTR [ecx+0x20]
c0008767:	83 c4 10             	add    esp,0x10
c000876a:	83 c4 08             	add    esp,0x8
c000876d:	5b                   	pop    ebx
c000876e:	c3                   	ret    
c000876f:	90                   	nop

c0008770 <Directory::unlink()>:
c0008770:	83 ec 0c             	sub    esp,0xc
c0008773:	b8 0b 00 00 00       	mov    eax,0xb
c0008778:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000877c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008783:	83 f9 19             	cmp    ecx,0x19
c0008786:	77 2f                	ja     c00087b7 <Directory::unlink()+0x47>
c0008788:	8b 0c 8d 80 97 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6880]
c000878f:	85 c9                	test   ecx,ecx
c0008791:	74 24                	je     c00087b7 <Directory::unlink()+0x47>
c0008793:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008799:	85 c9                	test   ecx,ecx
c000879b:	74 1a                	je     c00087b7 <Directory::unlink()+0x47>
c000879d:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00087a1:	b8 06 00 00 00       	mov    eax,0x6
c00087a6:	75 0f                	jne    c00087b7 <Directory::unlink()+0x47>
c00087a8:	50                   	push   eax
c00087a9:	83 c2 0d             	add    edx,0xd
c00087ac:	50                   	push   eax
c00087ad:	8b 01                	mov    eax,DWORD PTR [ecx]
c00087af:	52                   	push   edx
c00087b0:	51                   	push   ecx
c00087b1:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c00087b4:	83 c4 10             	add    esp,0x10
c00087b7:	83 c4 0c             	add    esp,0xc
c00087ba:	c3                   	ret    
c00087bb:	90                   	nop

c00087bc <Directory::rename(char const*)>:
c00087bc:	83 ec 0c             	sub    esp,0xc
c00087bf:	b8 0b 00 00 00       	mov    eax,0xb
c00087c4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00087c8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00087cf:	83 f9 19             	cmp    ecx,0x19
c00087d2:	77 32                	ja     c0008806 <Directory::rename(char const*)+0x4a>
c00087d4:	8b 0c 8d 80 97 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6880]
c00087db:	85 c9                	test   ecx,ecx
c00087dd:	74 27                	je     c0008806 <Directory::rename(char const*)+0x4a>
c00087df:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c00087e5:	85 c9                	test   ecx,ecx
c00087e7:	74 1d                	je     c0008806 <Directory::rename(char const*)+0x4a>
c00087e9:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00087ed:	b8 06 00 00 00       	mov    eax,0x6
c00087f2:	75 12                	jne    c0008806 <Directory::rename(char const*)+0x4a>
c00087f4:	50                   	push   eax
c00087f5:	83 c2 0d             	add    edx,0xd
c00087f8:	8b 01                	mov    eax,DWORD PTR [ecx]
c00087fa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00087fe:	52                   	push   edx
c00087ff:	51                   	push   ecx
c0008800:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0008803:	83 c4 10             	add    esp,0x10
c0008806:	83 c4 0c             	add    esp,0xc
c0008809:	c3                   	ret    

c000880a <Directory::exists()>:
c000880a:	83 ec 0c             	sub    esp,0xc
c000880d:	31 c0                	xor    eax,eax
c000880f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008813:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000881a:	83 f9 19             	cmp    ecx,0x19
c000881d:	77 24                	ja     c0008843 <Directory::exists()+0x39>
c000881f:	8b 0c 8d 80 97 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6880]
c0008826:	85 c9                	test   ecx,ecx
c0008828:	74 19                	je     c0008843 <Directory::exists()+0x39>
c000882a:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008830:	85 c9                	test   ecx,ecx
c0008832:	74 0f                	je     c0008843 <Directory::exists()+0x39>
c0008834:	50                   	push   eax
c0008835:	83 c2 0d             	add    edx,0xd
c0008838:	50                   	push   eax
c0008839:	8b 01                	mov    eax,DWORD PTR [ecx]
c000883b:	52                   	push   edx
c000883c:	51                   	push   ecx
c000883d:	ff 50 48             	call   DWORD PTR [eax+0x48]
c0008840:	83 c4 10             	add    esp,0x10
c0008843:	83 c4 0c             	add    esp,0xc
c0008846:	c3                   	ret    
c0008847:	90                   	nop

c0008848 <Directory::read(dirent*)>:
c0008848:	83 ec 1c             	sub    esp,0x1c
c000884b:	b8 0b 00 00 00       	mov    eax,0xb
c0008850:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0008854:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000885b:	83 f9 19             	cmp    ecx,0x19
c000885e:	77 30                	ja     c0008890 <Directory::read(dirent*)+0x48>
c0008860:	8b 0c 8d 80 97 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6880]
c0008867:	85 c9                	test   ecx,ecx
c0008869:	74 25                	je     c0008890 <Directory::read(dirent*)+0x48>
c000886b:	83 b9 74 01 00 00 00 	cmp    DWORD PTR [ecx+0x174],0x0
c0008872:	74 1c                	je     c0008890 <Directory::read(dirent*)+0x48>
c0008874:	83 ec 0c             	sub    esp,0xc
c0008877:	8b 02                	mov    eax,DWORD PTR [edx]
c0008879:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000887d:	51                   	push   ecx
c000887e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0008882:	6a 00                	push   0x0
c0008884:	68 10 01 00 00       	push   0x110
c0008889:	52                   	push   edx
c000888a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000888d:	83 c4 20             	add    esp,0x20
c0008890:	83 c4 1c             	add    esp,0x1c
c0008893:	c3                   	ret    

c0008894 <Directory::create()>:
c0008894:	83 ec 0c             	sub    esp,0xc
c0008897:	b8 0b 00 00 00       	mov    eax,0xb
c000889c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00088a0:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00088a7:	83 f9 19             	cmp    ecx,0x19
c00088aa:	77 2f                	ja     c00088db <Directory::create()+0x47>
c00088ac:	8b 0c 8d 80 97 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6880]
c00088b3:	85 c9                	test   ecx,ecx
c00088b5:	74 24                	je     c00088db <Directory::create()+0x47>
c00088b7:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c00088bd:	85 c9                	test   ecx,ecx
c00088bf:	74 1a                	je     c00088db <Directory::create()+0x47>
c00088c1:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00088c5:	b8 06 00 00 00       	mov    eax,0x6
c00088ca:	75 0f                	jne    c00088db <Directory::create()+0x47>
c00088cc:	50                   	push   eax
c00088cd:	83 c2 0d             	add    edx,0xd
c00088d0:	50                   	push   eax
c00088d1:	8b 01                	mov    eax,DWORD PTR [ecx]
c00088d3:	52                   	push   edx
c00088d4:	51                   	push   ecx
c00088d5:	ff 50 40             	call   DWORD PTR [eax+0x40]
c00088d8:	83 c4 10             	add    esp,0x10
c00088db:	83 c4 0c             	add    esp,0xc
c00088de:	c3                   	ret    
c00088df:	90                   	nop

c00088e0 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c00088e0:	b8 0a 00 00 00       	mov    eax,0xa
c00088e5:	c3                   	ret    
c00088e6:	66 90                	xchg   ax,ax

c00088e8 <Bus::Bus(char const*)>:
c00088e8:	83 ec 0c             	sub    esp,0xc
c00088eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00088ef:	83 ec 08             	sub    esp,0x8
c00088f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00088f6:	50                   	push   eax
c00088f7:	e8 a8 08 00 00       	call   c00091a4 <Device::Device(char const*)>
c00088fc:	83 c4 10             	add    esp,0x10
c00088ff:	ba 34 14 02 c0       	mov    edx,0xc0021434
c0008904:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008908:	89 10                	mov    DWORD PTR [eax],edx
c000890a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000890e:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0008918:	90                   	nop
c0008919:	83 c4 0c             	add    esp,0xc
c000891c:	c3                   	ret    
c000891d:	90                   	nop
c000891e:	66 90                	xchg   ax,ax

c0008920 <Bus::~Bus()>:
c0008920:	83 ec 0c             	sub    esp,0xc
c0008923:	ba 34 14 02 c0       	mov    edx,0xc0021434
c0008928:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000892c:	89 10                	mov    DWORD PTR [eax],edx
c000892e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008932:	83 ec 0c             	sub    esp,0xc
c0008935:	50                   	push   eax
c0008936:	e8 09 06 00 00       	call   c0008f44 <Device::~Device()>
c000893b:	83 c4 10             	add    esp,0x10
c000893e:	90                   	nop
c000893f:	83 c4 0c             	add    esp,0xc
c0008942:	c3                   	ret    
c0008943:	90                   	nop

c0008944 <Bus::~Bus()>:
c0008944:	83 ec 0c             	sub    esp,0xc
c0008947:	83 ec 0c             	sub    esp,0xc
c000894a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000894e:	e8 cd ff ff ff       	call   c0008920 <Bus::~Bus()>
c0008953:	83 c4 10             	add    esp,0x10
c0008956:	83 ec 08             	sub    esp,0x8
c0008959:	68 58 01 00 00       	push   0x158
c000895e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008962:	e8 fc 3c 00 00       	call   c000c663 <operator delete(void*, unsigned long)>
c0008967:	83 c4 10             	add    esp,0x10
c000896a:	83 c4 0c             	add    esp,0xc
c000896d:	c3                   	ret    

c000896e <KeBeepThread(void*)>:
c000896e:	83 ec 0c             	sub    esp,0xc
c0008971:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0008976:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000897a:	48                   	dec    eax
c000897b:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c0008980:	75 01                	jne    c0008983 <KeBeepThread(void*)+0x15>
c0008982:	fb                   	sti    
c0008983:	6b c2 0a             	imul   eax,edx,0xa
c0008986:	83 ec 0c             	sub    esp,0xc
c0008989:	50                   	push   eax
c000898a:	e8 39 cc 00 00       	call   c00155c8 <milliTenthSleep(unsigned int)>
c000898f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008996:	e8 d1 fb 00 00       	call   c001856c <HalMakeBeep(int)>
c000899b:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c00089a3:	83 c4 1c             	add    esp,0x1c
c00089a6:	e9 01 cb 00 00       	jmp    c00154ac <blockTask(TaskState)>

c00089ab <KeBeep(int, int, bool)>:
c00089ab:	56                   	push   esi
c00089ac:	53                   	push   ebx
c00089ad:	83 ec 10             	sub    esp,0x10
c00089b0:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00089b4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00089b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089bc:	e8 ab fb 00 00       	call   c001856c <HalMakeBeep(int)>
c00089c1:	89 f0                	mov    eax,esi
c00089c3:	83 c4 10             	add    esp,0x10
c00089c6:	84 c0                	test   al,al
c00089c8:	74 1e                	je     c00089e8 <KeBeep(int, int, bool)+0x3d>
c00089ca:	6b db 0a             	imul   ebx,ebx,0xa
c00089cd:	83 ec 0c             	sub    esp,0xc
c00089d0:	53                   	push   ebx
c00089d1:	e8 f2 cb 00 00       	call   c00155c8 <milliTenthSleep(unsigned int)>
c00089d6:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00089de:	83 c4 14             	add    esp,0x14
c00089e1:	5b                   	pop    ebx
c00089e2:	5e                   	pop    esi
c00089e3:	e9 84 fb 00 00       	jmp    c001856c <HalMakeBeep(int)>
c00089e8:	68 e6 00 00 00       	push   0xe6
c00089ed:	53                   	push   ebx
c00089ee:	68 6e 89 00 c0       	push   0xc000896e
c00089f3:	ff 35 d8 c6 02 c0    	push   DWORD PTR ds:0xc002c6d8
c00089f9:	e8 a6 c7 00 00       	call   c00151a4 <Process::createThread(void (*)(void*), void*, int)>
c00089fe:	83 c4 14             	add    esp,0x14
c0008a01:	5b                   	pop    ebx
c0008a02:	5e                   	pop    esi
c0008a03:	c3                   	ret    

c0008a04 <KeLoadClockSettings()>:
c0008a04:	57                   	push   edi
c0008a05:	56                   	push   esi
c0008a06:	53                   	push   ebx
c0008a07:	81 ec 6c 02 00 00    	sub    esp,0x26c
c0008a0d:	c6 44 24 14 00       	mov    BYTE PTR [esp+0x14],0x0
c0008a12:	68 58 14 02 c0       	push   0xc0021458
c0008a17:	e8 a0 3c 00 00       	call   c000c6bc <CmOpen(char const*)>
c0008a1c:	59                   	pop    ecx
c0008a1d:	5e                   	pop    esi
c0008a1e:	89 c3                	mov    ebx,eax
c0008a20:	68 7d 14 02 c0       	push   0xc002147d
c0008a25:	50                   	push   eax
c0008a26:	e8 8c 48 00 00       	call   c000d2b7 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0008a2b:	5f                   	pop    edi
c0008a2c:	5a                   	pop    edx
c0008a2d:	89 c6                	mov    esi,eax
c0008a2f:	50                   	push   eax
c0008a30:	68 92 14 02 c0       	push   0xc0021492
c0008a35:	e8 14 e5 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0008a3a:	83 c4 10             	add    esp,0x10
c0008a3d:	85 f6                	test   esi,esi
c0008a3f:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0008a43:	7e 0c                	jle    c0008a51 <KeLoadClockSettings()+0x4d>
c0008a45:	52                   	push   edx
c0008a46:	57                   	push   edi
c0008a47:	56                   	push   esi
c0008a48:	53                   	push   ebx
c0008a49:	e8 de 3d 00 00       	call   c000c82c <CmGetString(Reghive_Tag*, int, char*)>
c0008a4e:	83 c4 10             	add    esp,0x10
c0008a51:	83 ec 0c             	sub    esp,0xc
c0008a54:	53                   	push   ebx
c0008a55:	e8 80 3d 00 00       	call   c000c7da <CmClose(Reghive_Tag*)>
c0008a5a:	83 c4 0c             	add    esp,0xc
c0008a5d:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0008a62:	50                   	push   eax
c0008a63:	57                   	push   edi
c0008a64:	68 a0 14 02 c0       	push   0xc00214a0
c0008a69:	e8 e0 e4 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0008a6e:	8a 4c 24 18          	mov    cl,BYTE PTR [esp+0x18]
c0008a72:	83 c4 10             	add    esp,0x10
c0008a75:	c6 05 08 93 02 c0 00 	mov    BYTE PTR ds:0xc0029308,0x0
c0008a7c:	8d 41 d5             	lea    eax,[ecx-0x2b]
c0008a7f:	a8 fd                	test   al,0xfd
c0008a81:	75 51                	jne    c0008ad4 <KeLoadClockSettings()+0xd0>
c0008a83:	0f be 5c 24 0a       	movsx  ebx,BYTE PTR [esp+0xa]
c0008a88:	0f be 54 24 0b       	movsx  edx,BYTE PTR [esp+0xb]
c0008a8d:	83 fb 2e             	cmp    ebx,0x2e
c0008a90:	75 07                	jne    c0008a99 <KeLoadClockSettings()+0x95>
c0008a92:	83 fa 35             	cmp    edx,0x35
c0008a95:	b0 01                	mov    al,0x1
c0008a97:	74 0f                	je     c0008aa8 <KeLoadClockSettings()+0xa4>
c0008a99:	31 c0                	xor    eax,eax
c0008a9b:	83 fa 2e             	cmp    edx,0x2e
c0008a9e:	75 08                	jne    c0008aa8 <KeLoadClockSettings()+0xa4>
c0008aa0:	80 7c 24 0c 35       	cmp    BYTE PTR [esp+0xc],0x35
c0008aa5:	0f 94 c0             	sete   al
c0008aa8:	a2 09 93 02 c0       	mov    ds:0xc0029309,al
c0008aad:	0f be 44 24 09       	movsx  eax,BYTE PTR [esp+0x9]
c0008ab2:	83 e8 30             	sub    eax,0x30
c0008ab5:	6b f0 0a             	imul   esi,eax,0xa
c0008ab8:	83 fa 2e             	cmp    edx,0x2e
c0008abb:	8d 5c 33 d0          	lea    ebx,[ebx+esi*1-0x30]
c0008abf:	0f 44 c3             	cmove  eax,ebx
c0008ac2:	80 f9 2d             	cmp    cl,0x2d
c0008ac5:	a3 0c 93 02 c0       	mov    ds:0xc002930c,eax
c0008aca:	75 19                	jne    c0008ae5 <KeLoadClockSettings()+0xe1>
c0008acc:	f7 1d 0c 93 02 c0    	neg    DWORD PTR ds:0xc002930c
c0008ad2:	eb 11                	jmp    c0008ae5 <KeLoadClockSettings()+0xe1>
c0008ad4:	c6 05 09 93 02 c0 00 	mov    BYTE PTR ds:0xc0029309,0x0
c0008adb:	c7 05 0c 93 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002930c,0x0
c0008ae5:	50                   	push   eax
c0008ae6:	0f b6 05 09 93 02 c0 	movzx  eax,BYTE PTR ds:0xc0029309
c0008aed:	8d 04 80             	lea    eax,[eax+eax*4]
c0008af0:	50                   	push   eax
c0008af1:	ff 35 0c 93 02 c0    	push   DWORD PTR ds:0xc002930c
c0008af7:	68 b7 14 02 c0       	push   0xc00214b7
c0008afc:	e8 4d e4 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0008b01:	81 c4 70 02 00 00    	add    esp,0x270
c0008b07:	5b                   	pop    ebx
c0008b08:	5e                   	pop    esi
c0008b09:	5f                   	pop    edi
c0008b0a:	c3                   	ret    
c0008b0b:	90                   	nop

c0008b0c <Clock::Clock(char const*)>:
c0008b0c:	83 ec 0c             	sub    esp,0xc
c0008b0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b13:	83 ec 08             	sub    esp,0x8
c0008b16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008b1a:	50                   	push   eax
c0008b1b:	e8 84 06 00 00       	call   c00091a4 <Device::Device(char const*)>
c0008b20:	83 c4 10             	add    esp,0x10
c0008b23:	ba d0 14 02 c0       	mov    edx,0xc00214d0
c0008b28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b2c:	89 10                	mov    DWORD PTR [eax],edx
c0008b2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b32:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c0008b3c:	90                   	nop
c0008b3d:	83 c4 0c             	add    esp,0xc
c0008b40:	c3                   	ret    
c0008b41:	90                   	nop

c0008b42 <Clock::~Clock()>:
c0008b42:	83 ec 0c             	sub    esp,0xc
c0008b45:	ba d0 14 02 c0       	mov    edx,0xc00214d0
c0008b4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b4e:	89 10                	mov    DWORD PTR [eax],edx
c0008b50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b54:	83 ec 0c             	sub    esp,0xc
c0008b57:	50                   	push   eax
c0008b58:	e8 e7 03 00 00       	call   c0008f44 <Device::~Device()>
c0008b5d:	83 c4 10             	add    esp,0x10
c0008b60:	90                   	nop
c0008b61:	83 c4 0c             	add    esp,0xc
c0008b64:	c3                   	ret    
c0008b65:	90                   	nop

c0008b66 <Clock::~Clock()>:
c0008b66:	83 ec 0c             	sub    esp,0xc
c0008b69:	83 ec 0c             	sub    esp,0xc
c0008b6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008b70:	e8 cd ff ff ff       	call   c0008b42 <Clock::~Clock()>
c0008b75:	83 c4 10             	add    esp,0x10
c0008b78:	83 ec 08             	sub    esp,0x8
c0008b7b:	68 58 01 00 00       	push   0x158
c0008b80:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008b84:	e8 da 3a 00 00       	call   c000c663 <operator delete(void*, unsigned long)>
c0008b89:	83 c4 10             	add    esp,0x10
c0008b8c:	83 c4 0c             	add    esp,0xc
c0008b8f:	c3                   	ret    

c0008b90 <Clock::timeInSecondsLocal()>:
c0008b90:	53                   	push   ebx
c0008b91:	83 ec 14             	sub    esp,0x14
c0008b94:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008b98:	8b 10                	mov    edx,DWORD PTR [eax]
c0008b9a:	50                   	push   eax
c0008b9b:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0008b9e:	0f b6 0d 08 93 02 c0 	movzx  ecx,BYTE PTR ds:0xc0029308
c0008ba5:	03 0d 0c 93 02 c0    	add    ecx,DWORD PTR ds:0xc002930c
c0008bab:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0008bb1:	89 cb                	mov    ebx,ecx
c0008bb3:	c1 fb 1f             	sar    ebx,0x1f
c0008bb6:	01 c8                	add    eax,ecx
c0008bb8:	11 da                	adc    edx,ebx
c0008bba:	83 c4 10             	add    esp,0x10
c0008bbd:	31 c9                	xor    ecx,ecx
c0008bbf:	80 3d 09 93 02 c0 00 	cmp    BYTE PTR ds:0xc0029309,0x0
c0008bc6:	74 05                	je     c0008bcd <Clock::timeInSecondsLocal()+0x3d>
c0008bc8:	b9 08 07 00 00       	mov    ecx,0x708
c0008bcd:	31 db                	xor    ebx,ebx
c0008bcf:	01 c8                	add    eax,ecx
c0008bd1:	11 da                	adc    edx,ebx
c0008bd3:	83 c4 08             	add    esp,0x8
c0008bd6:	5b                   	pop    ebx
c0008bd7:	c3                   	ret    

c0008bd8 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c0008bd8:	57                   	push   edi
c0008bd9:	56                   	push   esi
c0008bda:	53                   	push   ebx
c0008bdb:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008bdf:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008be3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0008be7:	8b 01                	mov    eax,DWORD PTR [ecx]
c0008be9:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c0008bec:	0f b6 05 08 93 02 c0 	movzx  eax,BYTE PTR ds:0xc0029308
c0008bf3:	03 05 0c 93 02 c0    	add    eax,DWORD PTR ds:0xc002930c
c0008bf9:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0008bff:	99                   	cdq    
c0008c00:	29 c6                	sub    esi,eax
c0008c02:	19 d7                	sbb    edi,edx
c0008c04:	89 f0                	mov    eax,esi
c0008c06:	31 f6                	xor    esi,esi
c0008c08:	89 fa                	mov    edx,edi
c0008c0a:	80 3d 09 93 02 c0 00 	cmp    BYTE PTR ds:0xc0029309,0x0
c0008c11:	74 05                	je     c0008c18 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c0008c13:	be 08 07 00 00       	mov    esi,0x708
c0008c18:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0008c1c:	31 ff                	xor    edi,edi
c0008c1e:	29 f0                	sub    eax,esi
c0008c20:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0008c24:	19 fa                	sbb    edx,edi
c0008c26:	89 d8                	mov    eax,ebx
c0008c28:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0008c2c:	5b                   	pop    ebx
c0008c2d:	5e                   	pop    esi
c0008c2e:	5f                   	pop    edi
c0008c2f:	ff e0                	jmp    eax

c0008c31 <KeDatetimeToSeconds(datetime_t)>:
c0008c31:	55                   	push   ebp
c0008c32:	57                   	push   edi
c0008c33:	56                   	push   esi
c0008c34:	53                   	push   ebx
c0008c35:	83 ec 0c             	sub    esp,0xc
c0008c38:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008c3c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008c40:	89 f7                	mov    edi,esi
c0008c42:	89 f0                	mov    eax,esi
c0008c44:	0f b6 cf             	movzx  ecx,bh
c0008c47:	0f b6 c4             	movzx  eax,ah
c0008c4a:	c1 ef 10             	shr    edi,0x10
c0008c4d:	89 da                	mov    edx,ebx
c0008c4f:	8d 69 ff             	lea    ebp,[ecx-0x1]
c0008c52:	89 f9                	mov    ecx,edi
c0008c54:	0f b6 f9             	movzx  edi,cl
c0008c57:	89 f1                	mov    ecx,esi
c0008c59:	6b c0 3c             	imul   eax,eax,0x3c
c0008c5c:	0f b6 f1             	movzx  esi,cl
c0008c5f:	69 f6 10 0e 00 00    	imul   esi,esi,0xe10
c0008c65:	0f b6 db             	movzx  ebx,bl
c0008c68:	c1 ea 10             	shr    edx,0x10
c0008c6b:	81 ea 6c 07 00 00    	sub    edx,0x76c
c0008c71:	01 f8                	add    eax,edi
c0008c73:	01 f0                	add    eax,esi
c0008c75:	89 04 24             	mov    DWORD PTR [esp],eax
c0008c78:	c1 f8 1f             	sar    eax,0x1f
c0008c7b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008c7f:	89 e8                	mov    eax,ebp
c0008c81:	0f b6 c0             	movzx  eax,al
c0008c84:	8b 0c 85 20 15 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdeae0]
c0008c8b:	83 f8 01             	cmp    eax,0x1
c0008c8e:	8d 4c 0b ff          	lea    ecx,[ebx+ecx*1-0x1]
c0008c92:	0f b7 da             	movzx  ebx,dx
c0008c95:	76 27                	jbe    c0008cbe <KeDatetimeToSeconds(datetime_t)+0x8d>
c0008c97:	80 e2 03             	and    dl,0x3
c0008c9a:	75 22                	jne    c0008cbe <KeDatetimeToSeconds(datetime_t)+0x8d>
c0008c9c:	31 d2                	xor    edx,edx
c0008c9e:	be 64 00 00 00       	mov    esi,0x64
c0008ca3:	89 d8                	mov    eax,ebx
c0008ca5:	f7 f6                	div    esi
c0008ca7:	85 d2                	test   edx,edx
c0008ca9:	75 12                	jne    c0008cbd <KeDatetimeToSeconds(datetime_t)+0x8c>
c0008cab:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c0008cb1:	be 90 01 00 00       	mov    esi,0x190
c0008cb6:	99                   	cdq    
c0008cb7:	f7 fe                	idiv   esi
c0008cb9:	85 d2                	test   edx,edx
c0008cbb:	75 01                	jne    c0008cbe <KeDatetimeToSeconds(datetime_t)+0x8d>
c0008cbd:	41                   	inc    ecx
c0008cbe:	83 fb 46             	cmp    ebx,0x46
c0008cc1:	76 48                	jbe    c0008d0b <KeDatetimeToSeconds(datetime_t)+0xda>
c0008cc3:	be 46 00 00 00       	mov    esi,0x46
c0008cc8:	bf 64 00 00 00       	mov    edi,0x64
c0008ccd:	bd 90 01 00 00       	mov    ebp,0x190
c0008cd2:	f7 c6 03 00 00 00    	test   esi,0x3
c0008cd8:	b8 6d 01 00 00       	mov    eax,0x16d
c0008cdd:	75 23                	jne    c0008d02 <KeDatetimeToSeconds(datetime_t)+0xd1>
c0008cdf:	89 f0                	mov    eax,esi
c0008ce1:	99                   	cdq    
c0008ce2:	f7 ff                	idiv   edi
c0008ce4:	b8 6e 01 00 00       	mov    eax,0x16e
c0008ce9:	85 d2                	test   edx,edx
c0008ceb:	75 15                	jne    c0008d02 <KeDatetimeToSeconds(datetime_t)+0xd1>
c0008ced:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c0008cf3:	99                   	cdq    
c0008cf4:	f7 fd                	idiv   ebp
c0008cf6:	83 fa 01             	cmp    edx,0x1
c0008cf9:	19 c0                	sbb    eax,eax
c0008cfb:	f7 d0                	not    eax
c0008cfd:	05 6e 01 00 00       	add    eax,0x16e
c0008d02:	46                   	inc    esi
c0008d03:	01 c1                	add    ecx,eax
c0008d05:	39 de                	cmp    esi,ebx
c0008d07:	7c c9                	jl     c0008cd2 <KeDatetimeToSeconds(datetime_t)+0xa1>
c0008d09:	eb 34                	jmp    c0008d3f <KeDatetimeToSeconds(datetime_t)+0x10e>
c0008d0b:	74 32                	je     c0008d3f <KeDatetimeToSeconds(datetime_t)+0x10e>
c0008d0d:	b8 45 00 00 00       	mov    eax,0x45
c0008d12:	89 c2                	mov    edx,eax
c0008d14:	83 e2 03             	and    edx,0x3
c0008d17:	39 d8                	cmp    eax,ebx
c0008d19:	7e 0f                	jle    c0008d2a <KeDatetimeToSeconds(datetime_t)+0xf9>
c0008d1b:	83 fa 01             	cmp    edx,0x1
c0008d1e:	19 d2                	sbb    edx,edx
c0008d20:	48                   	dec    eax
c0008d21:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c0008d28:	eb e8                	jmp    c0008d12 <KeDatetimeToSeconds(datetime_t)+0xe1>
c0008d2a:	85 d2                	test   edx,edx
c0008d2c:	b8 6d 01 00 00       	mov    eax,0x16d
c0008d31:	75 0a                	jne    c0008d3d <KeDatetimeToSeconds(datetime_t)+0x10c>
c0008d33:	83 fb 01             	cmp    ebx,0x1
c0008d36:	19 c0                	sbb    eax,eax
c0008d38:	05 6e 01 00 00       	add    eax,0x16e
c0008d3d:	29 c1                	sub    ecx,eax
c0008d3f:	b8 80 51 01 00       	mov    eax,0x15180
c0008d44:	f7 e9                	imul   ecx
c0008d46:	03 04 24             	add    eax,DWORD PTR [esp]
c0008d49:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c0008d4d:	83 c4 0c             	add    esp,0xc
c0008d50:	5b                   	pop    ebx
c0008d51:	5e                   	pop    esi
c0008d52:	5f                   	pop    edi
c0008d53:	5d                   	pop    ebp
c0008d54:	c3                   	ret    
c0008d55:	90                   	nop

c0008d56 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c0008d56:	57                   	push   edi
c0008d57:	56                   	push   esi
c0008d58:	53                   	push   ebx
c0008d59:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008d5d:	8b 06                	mov    eax,DWORD PTR [esi]
c0008d5f:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c0008d62:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008d66:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008d6a:	e8 c2 fe ff ff       	call   c0008c31 <KeDatetimeToSeconds(datetime_t)>
c0008d6f:	59                   	pop    ecx
c0008d70:	0f b6 0d 08 93 02 c0 	movzx  ecx,BYTE PTR ds:0xc0029308
c0008d77:	5b                   	pop    ebx
c0008d78:	03 0d 0c 93 02 c0    	add    ecx,DWORD PTR ds:0xc002930c
c0008d7e:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0008d84:	89 cb                	mov    ebx,ecx
c0008d86:	c1 fb 1f             	sar    ebx,0x1f
c0008d89:	29 c8                	sub    eax,ecx
c0008d8b:	19 da                	sbb    edx,ebx
c0008d8d:	31 c9                	xor    ecx,ecx
c0008d8f:	80 3d 09 93 02 c0 00 	cmp    BYTE PTR ds:0xc0029309,0x0
c0008d96:	74 05                	je     c0008d9d <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c0008d98:	b9 08 07 00 00       	mov    ecx,0x708
c0008d9d:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0008da1:	31 db                	xor    ebx,ebx
c0008da3:	29 c8                	sub    eax,ecx
c0008da5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0008da9:	19 da                	sbb    edx,ebx
c0008dab:	89 f8                	mov    eax,edi
c0008dad:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0008db1:	5b                   	pop    ebx
c0008db2:	5e                   	pop    esi
c0008db3:	5f                   	pop    edi
c0008db4:	ff e0                	jmp    eax

c0008db6 <KeSecondsToDatetime(unsigned long long)>:
c0008db6:	55                   	push   ebp
c0008db7:	57                   	push   edi
c0008db8:	56                   	push   esi
c0008db9:	53                   	push   ebx
c0008dba:	83 ec 1c             	sub    esp,0x1c
c0008dbd:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0008dc1:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0008dc5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0008dc9:	6a 00                	push   0x0
c0008dcb:	68 80 51 01 00       	push   0x15180
c0008dd0:	55                   	push   ebp
c0008dd1:	57                   	push   edi
c0008dd2:	e8 7d 6c 01 00       	call   c001fa54 <__udivdi3>
c0008dd7:	83 c4 10             	add    esp,0x10
c0008dda:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008dde:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c0008de4:	6a 00                	push   0x0
c0008de6:	68 80 51 01 00       	push   0x15180
c0008deb:	55                   	push   ebp
c0008dec:	57                   	push   edi
c0008ded:	bf 10 0e 00 00       	mov    edi,0xe10
c0008df2:	e8 5d 6d 01 00       	call   c001fb54 <__umoddi3>
c0008df7:	83 c4 10             	add    esp,0x10
c0008dfa:	99                   	cdq    
c0008dfb:	f7 ff                	idiv   edi
c0008dfd:	bf 3c 00 00 00       	mov    edi,0x3c
c0008e02:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0008e05:	89 d0                	mov    eax,edx
c0008e07:	99                   	cdq    
c0008e08:	f7 ff                	idiv   edi
c0008e0a:	85 db                	test   ebx,ebx
c0008e0c:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c0008e0f:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c0008e12:	79 11                	jns    c0008e25 <KeSecondsToDatetime(unsigned long long)+0x6f>
c0008e14:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0008e18:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c0008e1e:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0008e23:	eb 07                	jmp    c0008e2c <KeSecondsToDatetime(unsigned long long)+0x76>
c0008e25:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0008e2a:	89 d8                	mov    eax,ebx
c0008e2c:	99                   	cdq    
c0008e2d:	bf b4 05 00 00       	mov    edi,0x5b4
c0008e32:	f7 f9                	idiv   ecx
c0008e34:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c0008e39:	31 d2                	xor    edx,edx
c0008e3b:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c0008e40:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e44:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c0008e4c:	01 c3                	add    ebx,eax
c0008e4e:	89 d8                	mov    eax,ebx
c0008e50:	f7 f1                	div    ecx
c0008e52:	31 d2                	xor    edx,edx
c0008e54:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c0008e57:	89 d8                	mov    eax,ebx
c0008e59:	f7 f7                	div    edi
c0008e5b:	31 d2                	xor    edx,edx
c0008e5d:	29 c1                	sub    ecx,eax
c0008e5f:	89 d8                	mov    eax,ebx
c0008e61:	f7 f5                	div    ebp
c0008e63:	bd 6d 01 00 00       	mov    ebp,0x16d
c0008e68:	31 d2                	xor    edx,edx
c0008e6a:	29 c1                	sub    ecx,eax
c0008e6c:	89 c8                	mov    eax,ecx
c0008e6e:	f7 f5                	div    ebp
c0008e70:	bd 94 8e 00 00       	mov    ebp,0x8e94
c0008e75:	31 d2                	xor    edx,edx
c0008e77:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008e7b:	89 c8                	mov    eax,ecx
c0008e7d:	f7 f5                	div    ebp
c0008e7f:	31 d2                	xor    edx,edx
c0008e81:	01 c3                	add    ebx,eax
c0008e83:	89 c8                	mov    eax,ecx
c0008e85:	f7 f7                	div    edi
c0008e87:	bf 99 00 00 00       	mov    edi,0x99
c0008e8c:	31 d2                	xor    edx,edx
c0008e8e:	29 c3                	sub    ebx,eax
c0008e90:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c0008e98:	29 c3                	sub    ebx,eax
c0008e9a:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c0008e9d:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0008ea0:	83 c1 02             	add    ecx,0x2
c0008ea3:	89 c8                	mov    eax,ecx
c0008ea5:	bb 05 00 00 00       	mov    ebx,0x5
c0008eaa:	f7 f7                	div    edi
c0008eac:	31 d2                	xor    edx,edx
c0008eae:	89 c7                	mov    edi,eax
c0008eb0:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c0008eb6:	83 c0 02             	add    eax,0x2
c0008eb9:	f7 f3                	div    ebx
c0008ebb:	89 eb                	mov    ebx,ebp
c0008ebd:	29 c3                	sub    ebx,eax
c0008ebf:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c0008ec5:	88 1e                	mov    BYTE PTR [esi],bl
c0008ec7:	19 c0                	sbb    eax,eax
c0008ec9:	31 d2                	xor    edx,edx
c0008ecb:	83 e0 0c             	and    eax,0xc
c0008ece:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c0008ed2:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c0008eda:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0008ede:	83 f9 01             	cmp    ecx,0x1
c0008ee1:	0f 96 c2             	setbe  dl
c0008ee4:	41                   	inc    ecx
c0008ee5:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c0008ee8:	01 d0                	add    eax,edx
c0008eea:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c0008eee:	83 c4 1c             	add    esp,0x1c
c0008ef1:	89 f0                	mov    eax,esi
c0008ef3:	5b                   	pop    ebx
c0008ef4:	5e                   	pop    esi
c0008ef5:	5f                   	pop    edi
c0008ef6:	5d                   	pop    ebp
c0008ef7:	c2 04 00             	ret    0x4

c0008efa <Clock::timeInDatetimeLocal()>:
c0008efa:	53                   	push   ebx
c0008efb:	83 ec 14             	sub    esp,0x14
c0008efe:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008f02:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008f06:	e8 85 fc ff ff       	call   c0008b90 <Clock::timeInSecondsLocal()>
c0008f0b:	83 c4 0c             	add    esp,0xc
c0008f0e:	52                   	push   edx
c0008f0f:	50                   	push   eax
c0008f10:	53                   	push   ebx
c0008f11:	e8 a0 fe ff ff       	call   c0008db6 <KeSecondsToDatetime(unsigned long long)>
c0008f16:	89 d8                	mov    eax,ebx
c0008f18:	83 c4 14             	add    esp,0x14
c0008f1b:	5b                   	pop    ebx
c0008f1c:	c2 04 00             	ret    0x4
c0008f1f:	90                   	nop

c0008f20 <Device::hibernate()>:
c0008f20:	c3                   	ret    
c0008f21:	90                   	nop

c0008f22 <Device::wake()>:
c0008f22:	c3                   	ret    
c0008f23:	90                   	nop

c0008f24 <Device::detect()>:
c0008f24:	c3                   	ret    
c0008f25:	90                   	nop

c0008f26 <Device::disableLegacy()>:
c0008f26:	c3                   	ret    
c0008f27:	90                   	nop

c0008f28 <Device::powerSaving(PowerSavingLevel)>:
c0008f28:	c3                   	ret    
c0008f29:	90                   	nop

c0008f2a <DriverlessDevice::close(int, int, void*)>:
c0008f2a:	31 c0                	xor    eax,eax
c0008f2c:	c3                   	ret    
c0008f2d:	90                   	nop

c0008f2e <DriverlessDevice::detect()>:
c0008f2e:	c3                   	ret    
c0008f2f:	90                   	nop

c0008f30 <DriverlessDevice::open(int, int, void*)>:
c0008f30:	83 ec 18             	sub    esp,0x18
c0008f33:	68 50 15 02 c0       	push   0xc0021550
c0008f38:	e8 e9 5c 00 00       	call   c000ec26 <KePanic(char const*)>
c0008f3d:	83 c8 ff             	or     eax,0xffffffff
c0008f40:	83 c4 1c             	add    esp,0x1c
c0008f43:	c3                   	ret    

c0008f44 <Device::~Device()>:
c0008f44:	ba f4 15 02 c0       	mov    edx,0xc00215f4
c0008f49:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008f4d:	89 10                	mov    DWORD PTR [eax],edx
c0008f4f:	90                   	nop
c0008f50:	c3                   	ret    
c0008f51:	90                   	nop

c0008f52 <Device::~Device()>:
c0008f52:	83 ec 0c             	sub    esp,0xc
c0008f55:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0008f59:	e8 e6 ff ff ff       	call   c0008f44 <Device::~Device()>
c0008f5e:	83 c4 04             	add    esp,0x4
c0008f61:	83 ec 08             	sub    esp,0x8
c0008f64:	68 58 01 00 00       	push   0x158
c0008f69:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008f6d:	e8 f1 36 00 00       	call   c000c663 <operator delete(void*, unsigned long)>
c0008f72:	83 c4 10             	add    esp,0x10
c0008f75:	83 c4 0c             	add    esp,0xc
c0008f78:	c3                   	ret    
c0008f79:	90                   	nop

c0008f7a <Device::findAndLoadDriver()>:
c0008f7a:	c7 44 24 04 6e 15 02 c0 	mov    DWORD PTR [esp+0x4],0xc002156e
c0008f82:	e9 c7 df ff ff       	jmp    c0006f4e <Dbg::kprintf(char const*, ...)>
c0008f87:	90                   	nop

c0008f88 <Device::preOpenPCI(PCIDeviceInfo)>:
c0008f88:	57                   	push   edi
c0008f89:	b9 09 00 00 00       	mov    ecx,0x9
c0008f8e:	56                   	push   esi
c0008f8f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0008f93:	8d 74 24 10          	lea    esi,[esp+0x10]
c0008f97:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c0008fa1:	81 c7 18 01 00 00    	add    edi,0x118
c0008fa7:	fc                   	cld    
c0008fa8:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0008faa:	5e                   	pop    esi
c0008fab:	5f                   	pop    edi
c0008fac:	c3                   	ret    
c0008fad:	90                   	nop

c0008fae <Device::preOpenACPI(void*, char*, char*)>:
c0008fae:	57                   	push   edi
c0008faf:	b9 1e 00 00 00       	mov    ecx,0x1e
c0008fb4:	56                   	push   esi
c0008fb5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008fb9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008fbd:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008fc1:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c0008fcb:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c0008fd1:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c0008fd7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008fd9:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c0008fdf:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008fe3:	b9 0e 00 00 00       	mov    ecx,0xe
c0008fe8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008fea:	5e                   	pop    esi
c0008feb:	5f                   	pop    edi
c0008fec:	c3                   	ret    
c0008fed:	90                   	nop

c0008fee <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0008fee:	53                   	push   ebx
c0008fef:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008ff3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008ff7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008ffb:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0008fff:	0f b6 c0             	movzx  eax,al
c0009002:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009006:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000900a:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000900e:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009012:	5b                   	pop    ebx
c0009013:	e9 1d f9 00 00       	jmp    c0018935 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c0009018 <Device::getParent()>:
c0009018:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000901c:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c0009022:	c3                   	ret    
c0009023:	90                   	nop

c0009024 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c0009024:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009028:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000902c:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c0009031:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009035:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009039:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000903d:	e9 64 fa 00 00       	jmp    c0018aa6 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c0009042 <Device::addChild(Device*)>:
c0009042:	53                   	push   ebx
c0009043:	83 ec 08             	sub    esp,0x8
c0009046:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000904a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000904e:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0009054:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000905a:	8b 13                	mov    edx,DWORD PTR [ebx]
c000905c:	85 d2                	test   edx,edx
c000905e:	74 04                	je     c0009064 <Device::addChild(Device*)+0x22>
c0009060:	89 d3                	mov    ebx,edx
c0009062:	eb f6                	jmp    c000905a <Device::addChild(Device*)+0x18>
c0009064:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009067:	83 ec 0c             	sub    esp,0xc
c000906a:	6a 08                	push   0x8
c000906c:	e8 5f 58 00 00       	call   c000e8d0 <malloc>
c0009071:	89 03                	mov    DWORD PTR [ebx],eax
c0009073:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0009079:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009080:	83 c4 18             	add    esp,0x18
c0009083:	5b                   	pop    ebx
c0009084:	c3                   	ret    
c0009085:	90                   	nop

c0009086 <Device::removeAllChildren()>:
c0009086:	56                   	push   esi
c0009087:	53                   	push   ebx
c0009088:	52                   	push   edx
c0009089:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000908d:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c0009093:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009096:	74 17                	je     c00090af <Device::removeAllChildren()+0x29>
c0009098:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000909b:	85 c0                	test   eax,eax
c000909d:	74 0c                	je     c00090ab <Device::removeAllChildren()+0x25>
c000909f:	8b 10                	mov    edx,DWORD PTR [eax]
c00090a1:	83 ec 0c             	sub    esp,0xc
c00090a4:	50                   	push   eax
c00090a5:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00090a8:	83 c4 10             	add    esp,0x10
c00090ab:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00090ad:	eb e4                	jmp    c0009093 <Device::removeAllChildren()+0xd>
c00090af:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00090b5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00090bb:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00090c1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00090c8:	58                   	pop    eax
c00090c9:	5b                   	pop    ebx
c00090ca:	5e                   	pop    esi
c00090cb:	c3                   	ret    

c00090cc <Device::hibernateAll()>:
c00090cc:	53                   	push   ebx
c00090cd:	83 ec 14             	sub    esp,0x14
c00090d0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00090d4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00090d6:	53                   	push   ebx
c00090d7:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00090da:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00090e0:	83 c4 10             	add    esp,0x10
c00090e3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00090e6:	74 0f                	je     c00090f7 <Device::hibernateAll()+0x2b>
c00090e8:	83 ec 0c             	sub    esp,0xc
c00090eb:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00090ee:	e8 d9 ff ff ff       	call   c00090cc <Device::hibernateAll()>
c00090f3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00090f5:	eb e9                	jmp    c00090e0 <Device::hibernateAll()+0x14>
c00090f7:	83 c4 08             	add    esp,0x8
c00090fa:	5b                   	pop    ebx
c00090fb:	c3                   	ret    

c00090fc <Device::wakeAll()>:
c00090fc:	53                   	push   ebx
c00090fd:	83 ec 14             	sub    esp,0x14
c0009100:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009104:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009106:	53                   	push   ebx
c0009107:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000910a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009110:	83 c4 10             	add    esp,0x10
c0009113:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009116:	74 0f                	je     c0009127 <Device::wakeAll()+0x2b>
c0009118:	83 ec 0c             	sub    esp,0xc
c000911b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000911e:	e8 d9 ff ff ff       	call   c00090fc <Device::wakeAll()>
c0009123:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009125:	eb e9                	jmp    c0009110 <Device::wakeAll()+0x14>
c0009127:	83 c4 08             	add    esp,0x8
c000912a:	5b                   	pop    ebx
c000912b:	c3                   	ret    

c000912c <Device::detectAll()>:
c000912c:	53                   	push   ebx
c000912d:	83 ec 14             	sub    esp,0x14
c0009130:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009134:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009136:	53                   	push   ebx
c0009137:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000913a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009140:	83 c4 10             	add    esp,0x10
c0009143:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009146:	74 0f                	je     c0009157 <Device::detectAll()+0x2b>
c0009148:	83 ec 0c             	sub    esp,0xc
c000914b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000914e:	e8 d9 ff ff ff       	call   c000912c <Device::detectAll()>
c0009153:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009155:	eb e9                	jmp    c0009140 <Device::detectAll()+0x14>
c0009157:	83 c4 08             	add    esp,0x8
c000915a:	5b                   	pop    ebx
c000915b:	c3                   	ret    

c000915c <Device::disableLegacyAll()>:
c000915c:	c3                   	ret    
c000915d:	90                   	nop

c000915e <Device::loadDriversForAll()>:
c000915e:	c3                   	ret    
c000915f:	90                   	nop

c0009160 <Device::powerSavingAll(PowerSavingLevel)>:
c0009160:	56                   	push   esi
c0009161:	53                   	push   ebx
c0009162:	83 ec 0c             	sub    esp,0xc
c0009165:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0009169:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000916d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000916f:	56                   	push   esi
c0009170:	53                   	push   ebx
c0009171:	ff 50 20             	call   DWORD PTR [eax+0x20]
c0009174:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000917a:	83 c4 10             	add    esp,0x10
c000917d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009180:	74 0f                	je     c0009191 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c0009182:	52                   	push   edx
c0009183:	52                   	push   edx
c0009184:	56                   	push   esi
c0009185:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009188:	e8 d3 ff ff ff       	call   c0009160 <Device::powerSavingAll(PowerSavingLevel)>
c000918d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000918f:	eb e9                	jmp    c000917a <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c0009191:	58                   	pop    eax
c0009192:	5b                   	pop    ebx
c0009193:	5e                   	pop    esi
c0009194:	c3                   	ret    
c0009195:	90                   	nop

c0009196 <Device::setName(char const*)>:
c0009196:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000919e:	e9 ad 74 ff ff       	jmp    c0000650 <strcpy>
c00091a3:	90                   	nop

c00091a4 <Device::Device(char const*)>:
c00091a4:	83 ec 1c             	sub    esp,0x1c
c00091a7:	ba f4 15 02 c0       	mov    edx,0xc00215f4
c00091ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00091b0:	89 10                	mov    DWORD PTR [eax],edx
c00091b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00091b6:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c00091c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00091c4:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c00091ce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00091d2:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00091dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00091e0:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c00091ea:	83 ec 08             	sub    esp,0x8
c00091ed:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00091f1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00091f5:	e8 9c ff ff ff       	call   c0009196 <Device::setName(char const*)>
c00091fa:	83 c4 10             	add    esp,0x10
c00091fd:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c0009205:	83 ec 0c             	sub    esp,0xc
c0009208:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000920c:	e8 bf 56 00 00       	call   c000e8d0 <malloc>
c0009211:	83 c4 10             	add    esp,0x10
c0009214:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000921a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009221:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009225:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000922b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000922f:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0009235:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000923b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000923f:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0009245:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000924c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009250:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0009257:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000925b:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c0009262:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009266:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0009270:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009274:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000927e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009282:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000928c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009290:	c7 80 10 01 00 00 14 00 00 00 	mov    DWORD PTR [eax+0x110],0x14
c000929a:	90                   	nop
c000929b:	83 c4 1c             	add    esp,0x1c
c000929e:	c3                   	ret    
c000929f:	90                   	nop

c00092a0 <Device::getName()>:
c00092a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00092a4:	05 d0 00 00 00       	add    eax,0xd0
c00092a9:	c3                   	ret    

c00092aa <Device::closeAll()>:
c00092aa:	53                   	push   ebx
c00092ab:	83 ec 08             	sub    esp,0x8
c00092ae:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00092b2:	53                   	push   ebx
c00092b3:	e8 e8 ff ff ff       	call   c00092a0 <Device::getName()>
c00092b8:	52                   	push   edx
c00092b9:	50                   	push   eax
c00092ba:	68 a8 15 02 c0       	push   0xc00215a8
c00092bf:	e8 8a dc ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00092c4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00092c6:	6a 00                	push   0x0
c00092c8:	6a 00                	push   0x0
c00092ca:	6a 00                	push   0x0
c00092cc:	53                   	push   ebx
c00092cd:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00092d0:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00092d6:	83 c4 20             	add    esp,0x20
c00092d9:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00092dc:	74 12                	je     c00092f0 <Device::closeAll()+0x46>
c00092de:	83 ec 0c             	sub    esp,0xc
c00092e1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00092e4:	e8 c1 ff ff ff       	call   c00092aa <Device::closeAll()>
c00092e9:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00092eb:	83 c4 10             	add    esp,0x10
c00092ee:	eb e9                	jmp    c00092d9 <Device::closeAll()+0x2f>
c00092f0:	83 c4 08             	add    esp,0x8
c00092f3:	5b                   	pop    ebx
c00092f4:	c3                   	ret    
c00092f5:	90                   	nop

c00092f6 <DriverlessDevice::DriverlessDevice(char const*)>:
c00092f6:	83 ec 0c             	sub    esp,0xc
c00092f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00092fd:	83 ec 08             	sub    esp,0x8
c0009300:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009304:	50                   	push   eax
c0009305:	e8 9a fe ff ff       	call   c00091a4 <Device::Device(char const*)>
c000930a:	83 c4 10             	add    esp,0x10
c000930d:	ba 20 16 02 c0       	mov    edx,0xc0021620
c0009312:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009316:	89 10                	mov    DWORD PTR [eax],edx
c0009318:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000931c:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c0009326:	90                   	nop
c0009327:	83 c4 0c             	add    esp,0xc
c000932a:	c3                   	ret    
c000932b:	90                   	nop

c000932c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000932c:	57                   	push   edi
c000932d:	56                   	push   esi
c000932e:	53                   	push   ebx
c000932f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009333:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0009337:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000933b:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c0009341:	75 0c                	jne    c000934f <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c0009343:	52                   	push   edx
c0009344:	52                   	push   edx
c0009345:	53                   	push   ebx
c0009346:	56                   	push   esi
c0009347:	e8 80 69 01 00       	call   c001fccc <LinkedList<Device>::addElement(Device*)>
c000934c:	83 c4 10             	add    esp,0x10
c000934f:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009355:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009358:	74 12                	je     c000936c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000935a:	50                   	push   eax
c000935b:	57                   	push   edi
c000935c:	56                   	push   esi
c000935d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009360:	e8 c7 ff ff ff       	call   c000932c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0009365:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009367:	83 c4 10             	add    esp,0x10
c000936a:	eb e9                	jmp    c0009355 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000936c:	5b                   	pop    ebx
c000936d:	5e                   	pop    esi
c000936e:	5f                   	pop    edi
c000936f:	c3                   	ret    

c0009370 <getDevicesOfType(DeviceType)>:
c0009370:	53                   	push   ebx
c0009371:	83 ec 14             	sub    esp,0x14
c0009374:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009378:	53                   	push   ebx
c0009379:	e8 2a 6a 01 00       	call   c001fda8 <LinkedList<Device>::LinkedList()>
c000937e:	83 c4 0c             	add    esp,0xc
c0009381:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009385:	53                   	push   ebx
c0009386:	ff 35 70 9d 02 c0    	push   DWORD PTR ds:0xc0029d70
c000938c:	e8 9b ff ff ff       	call   c000932c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0009391:	83 c4 18             	add    esp,0x18
c0009394:	89 d8                	mov    eax,ebx
c0009396:	5b                   	pop    ebx
c0009397:	c2 04 00             	ret    0x4
c000939a:	66 90                	xchg   ax,ax

c000939c <HardDiskController::HardDiskController(char const*)>:
c000939c:	83 ec 0c             	sub    esp,0xc
c000939f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00093a3:	83 ec 08             	sub    esp,0x8
c00093a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00093aa:	50                   	push   eax
c00093ab:	e8 f4 fd ff ff       	call   c00091a4 <Device::Device(char const*)>
c00093b0:	83 c4 10             	add    esp,0x10
c00093b3:	ba 4c 16 02 c0       	mov    edx,0xc002164c
c00093b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00093bc:	89 10                	mov    DWORD PTR [eax],edx
c00093be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00093c2:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c00093cc:	90                   	nop
c00093cd:	83 c4 0c             	add    esp,0xc
c00093d0:	c3                   	ret    
c00093d1:	90                   	nop
c00093d2:	66 90                	xchg   ax,ax

c00093d4 <HardDiskController::~HardDiskController()>:
c00093d4:	83 ec 0c             	sub    esp,0xc
c00093d7:	ba 4c 16 02 c0       	mov    edx,0xc002164c
c00093dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00093e0:	89 10                	mov    DWORD PTR [eax],edx
c00093e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00093e6:	83 ec 0c             	sub    esp,0xc
c00093e9:	50                   	push   eax
c00093ea:	e8 55 fb ff ff       	call   c0008f44 <Device::~Device()>
c00093ef:	83 c4 10             	add    esp,0x10
c00093f2:	90                   	nop
c00093f3:	83 c4 0c             	add    esp,0xc
c00093f6:	c3                   	ret    
c00093f7:	90                   	nop

c00093f8 <HardDiskController::~HardDiskController()>:
c00093f8:	83 ec 0c             	sub    esp,0xc
c00093fb:	83 ec 0c             	sub    esp,0xc
c00093fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009402:	e8 cd ff ff ff       	call   c00093d4 <HardDiskController::~HardDiskController()>
c0009407:	83 c4 10             	add    esp,0x10
c000940a:	83 ec 08             	sub    esp,0x8
c000940d:	68 58 01 00 00       	push   0x158
c0009412:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009416:	e8 48 32 00 00       	call   c000c663 <operator delete(void*, unsigned long)>
c000941b:	83 c4 10             	add    esp,0x10
c000941e:	83 c4 0c             	add    esp,0xc
c0009421:	c3                   	ret    

c0009422 <PhysicalDisk::eject()>:
c0009422:	83 c8 ff             	or     eax,0xffffffff
c0009425:	c3                   	ret    

c0009426 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c0009426:	83 ec 0c             	sub    esp,0xc
c0009429:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000942d:	83 ec 08             	sub    esp,0x8
c0009430:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009434:	50                   	push   eax
c0009435:	e8 6a fd ff ff       	call   c00091a4 <Device::Device(char const*)>
c000943a:	83 c4 10             	add    esp,0x10
c000943d:	ba 78 16 02 c0       	mov    edx,0xc0021678
c0009442:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009446:	89 10                	mov    DWORD PTR [eax],edx
c0009448:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000944c:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0009453:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009457:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000945e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009462:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000946c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009470:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009474:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000947a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000947e:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0009488:	90                   	nop
c0009489:	83 c4 0c             	add    esp,0xc
c000948c:	c3                   	ret    
c000948d:	90                   	nop

c000948e <PhysicalDisk::startCache()>:
c000948e:	56                   	push   esi
c000948f:	53                   	push   ebx
c0009490:	83 ec 10             	sub    esp,0x10
c0009493:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009497:	6a 44                	push   0x44
c0009499:	e8 32 54 00 00       	call   c000e8d0 <malloc>
c000949e:	89 c6                	mov    esi,eax
c00094a0:	58                   	pop    eax
c00094a1:	5a                   	pop    edx
c00094a2:	53                   	push   ebx
c00094a3:	56                   	push   esi
c00094a4:	e8 1b 14 00 00       	call   c000a8c4 <VCache::VCache(PhysicalDisk*)>
c00094a9:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c00094af:	83 c4 14             	add    esp,0x14
c00094b2:	5b                   	pop    ebx
c00094b3:	5e                   	pop    esi
c00094b4:	c3                   	ret    
c00094b5:	90                   	nop

c00094b6 <PhysicalDisk::~PhysicalDisk()>:
c00094b6:	83 ec 0c             	sub    esp,0xc
c00094b9:	ba 78 16 02 c0       	mov    edx,0xc0021678
c00094be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00094c2:	89 10                	mov    DWORD PTR [eax],edx
c00094c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00094c8:	83 ec 0c             	sub    esp,0xc
c00094cb:	50                   	push   eax
c00094cc:	e8 73 fa ff ff       	call   c0008f44 <Device::~Device()>
c00094d1:	83 c4 10             	add    esp,0x10
c00094d4:	90                   	nop
c00094d5:	83 c4 0c             	add    esp,0xc
c00094d8:	c3                   	ret    
c00094d9:	90                   	nop

c00094da <PhysicalDisk::~PhysicalDisk()>:
c00094da:	83 ec 0c             	sub    esp,0xc
c00094dd:	83 ec 0c             	sub    esp,0xc
c00094e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00094e4:	e8 cd ff ff ff       	call   c00094b6 <PhysicalDisk::~PhysicalDisk()>
c00094e9:	83 c4 10             	add    esp,0x10
c00094ec:	83 ec 08             	sub    esp,0x8
c00094ef:	68 6c 01 00 00       	push   0x16c
c00094f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00094f8:	e8 66 31 00 00       	call   c000c663 <operator delete(void*, unsigned long)>
c00094fd:	83 c4 10             	add    esp,0x10
c0009500:	83 c4 0c             	add    esp,0xc
c0009503:	c3                   	ret    

c0009504 <startGUI(void*)>:
c0009504:	55                   	push   ebp
c0009505:	89 e5                	mov    ebp,esp
c0009507:	53                   	push   ebx
c0009508:	83 ec 04             	sub    esp,0x4
c000950b:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0009510:	83 e8 01             	sub    eax,0x1
c0009513:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c0009518:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000951d:	85 c0                	test   eax,eax
c000951f:	75 01                	jne    c0009522 <startGUI(void*)+0x1e>
c0009521:	fb                   	sti    
c0009522:	8b 1d 70 9d 02 c0    	mov    ebx,DWORD PTR ds:0xc0029d70
c0009528:	83 ec 08             	sub    esp,0x8
c000952b:	6a 01                	push   0x1
c000952d:	68 a8 16 02 c0       	push   0xc00216a8
c0009532:	e8 d0 b3 00 00       	call   c0014907 <Thr::loadDLL(char const*, bool)>
c0009537:	83 c4 10             	add    esp,0x10
c000953a:	83 ec 08             	sub    esp,0x8
c000953d:	53                   	push   ebx
c000953e:	50                   	push   eax
c000953f:	e8 24 b6 00 00       	call   c0014b68 <Thr::executeDLL(unsigned long, void*)>
c0009544:	83 c4 10             	add    esp,0x10
c0009547:	8b 1d 70 9d 02 c0    	mov    ebx,DWORD PTR ds:0xc0029d70
c000954d:	83 ec 08             	sub    esp,0x8
c0009550:	6a 01                	push   0x1
c0009552:	68 c2 16 02 c0       	push   0xc00216c2
c0009557:	e8 ab b3 00 00       	call   c0014907 <Thr::loadDLL(char const*, bool)>
c000955c:	83 c4 10             	add    esp,0x10
c000955f:	83 ec 08             	sub    esp,0x8
c0009562:	53                   	push   ebx
c0009563:	50                   	push   eax
c0009564:	e8 ff b5 00 00       	call   c0014b68 <Thr::executeDLL(unsigned long, void*)>
c0009569:	83 c4 10             	add    esp,0x10
c000956c:	eb fe                	jmp    c000956c <startGUI(void*)+0x68>

c000956e <startGUIVESA(void*)>:
c000956e:	55                   	push   ebp
c000956f:	89 e5                	mov    ebp,esp
c0009571:	53                   	push   ebx
c0009572:	83 ec 04             	sub    esp,0x4
c0009575:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000957a:	83 e8 01             	sub    eax,0x1
c000957d:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c0009582:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0009587:	85 c0                	test   eax,eax
c0009589:	75 01                	jne    c000958c <startGUIVESA(void*)+0x1e>
c000958b:	fb                   	sti    
c000958c:	8b 1d 70 9d 02 c0    	mov    ebx,DWORD PTR ds:0xc0029d70
c0009592:	83 ec 08             	sub    esp,0x8
c0009595:	6a 01                	push   0x1
c0009597:	68 e0 16 02 c0       	push   0xc00216e0
c000959c:	e8 66 b3 00 00       	call   c0014907 <Thr::loadDLL(char const*, bool)>
c00095a1:	83 c4 10             	add    esp,0x10
c00095a4:	83 ec 08             	sub    esp,0x8
c00095a7:	53                   	push   ebx
c00095a8:	50                   	push   eax
c00095a9:	e8 ba b5 00 00       	call   c0014b68 <Thr::executeDLL(unsigned long, void*)>
c00095ae:	83 c4 10             	add    esp,0x10
c00095b1:	8b 1d 70 9d 02 c0    	mov    ebx,DWORD PTR ds:0xc0029d70
c00095b7:	83 ec 08             	sub    esp,0x8
c00095ba:	6a 01                	push   0x1
c00095bc:	68 c2 16 02 c0       	push   0xc00216c2
c00095c1:	e8 41 b3 00 00       	call   c0014907 <Thr::loadDLL(char const*, bool)>
c00095c6:	83 c4 10             	add    esp,0x10
c00095c9:	83 ec 08             	sub    esp,0x8
c00095cc:	53                   	push   ebx
c00095cd:	50                   	push   eax
c00095ce:	e8 95 b5 00 00       	call   c0014b68 <Thr::executeDLL(unsigned long, void*)>
c00095d3:	83 c4 10             	add    esp,0x10
c00095d6:	eb fe                	jmp    c00095d6 <startGUIVESA(void*)+0x68>

c00095d8 <sendKeyToTerminal(unsigned char)>:
c00095d8:	55                   	push   ebp
c00095d9:	89 e5                	mov    ebp,esp
c00095db:	83 ec 28             	sub    esp,0x28
c00095de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00095e1:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c00095e4:	a1 34 be 02 c0       	mov    eax,ds:0xc002be34
c00095e9:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c00095ed:	83 ec 08             	sub    esp,0x8
c00095f0:	52                   	push   edx
c00095f1:	50                   	push   eax
c00095f2:	e8 d7 80 00 00       	call   c00116ce <VgaText::receiveKey(unsigned char)>
c00095f7:	83 c4 10             	add    esp,0x10
c00095fa:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00095fe:	83 f8 0a             	cmp    eax,0xa
c0009601:	74 16                	je     c0009619 <sendKeyToTerminal(unsigned char)+0x41>
c0009603:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0009607:	83 f8 03             	cmp    eax,0x3
c000960a:	74 0d                	je     c0009619 <sendKeyToTerminal(unsigned char)+0x41>
c000960c:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0009610:	83 f8 1c             	cmp    eax,0x1c
c0009613:	0f 85 97 00 00 00    	jne    c00096b0 <sendKeyToTerminal(unsigned char)+0xd8>
c0009619:	fa                   	cli    
c000961a:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000961f:	83 c0 01             	add    eax,0x1
c0009622:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c0009627:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c000962c:	83 c0 01             	add    eax,0x1
c000962f:	a3 ac c6 02 c0       	mov    ds:0xc002c6ac,eax
c0009634:	a1 20 93 02 c0       	mov    eax,ds:0xc0029320
c0009639:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000963c:	c7 05 20 93 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029320,0x0
c0009646:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000964a:	74 1f                	je     c000966b <sendKeyToTerminal(unsigned char)+0x93>
c000964c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000964f:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0009652:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0009655:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0009658:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000965b:	83 ec 0c             	sub    esp,0xc
c000965e:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0009661:	e8 76 c0 00 00       	call   c00156dc <unblockTask(ThreadControlBlock*)>
c0009666:	83 c4 10             	add    esp,0x10
c0009669:	eb db                	jmp    c0009646 <sendKeyToTerminal(unsigned char)+0x6e>
c000966b:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c0009670:	83 e8 01             	sub    eax,0x1
c0009673:	a3 ac c6 02 c0       	mov    ds:0xc002c6ac,eax
c0009678:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c000967d:	85 c0                	test   eax,eax
c000967f:	75 18                	jne    c0009699 <sendKeyToTerminal(unsigned char)+0xc1>
c0009681:	a1 a8 c6 02 c0       	mov    eax,ds:0xc002c6a8
c0009686:	85 c0                	test   eax,eax
c0009688:	74 0f                	je     c0009699 <sendKeyToTerminal(unsigned char)+0xc1>
c000968a:	c7 05 a8 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6a8,0x0
c0009694:	e8 57 bd 00 00       	call   c00153f0 <schedule()>
c0009699:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000969e:	83 e8 01             	sub    eax,0x1
c00096a1:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c00096a6:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c00096ab:	85 c0                	test   eax,eax
c00096ad:	75 01                	jne    c00096b0 <sendKeyToTerminal(unsigned char)+0xd8>
c00096af:	fb                   	sti    
c00096b0:	90                   	nop
c00096b1:	c9                   	leave  
c00096b2:	c3                   	ret    

c00096b3 <sendKeyboardToken(KeyboardToken)>:
c00096b3:	55                   	push   ebp
c00096b4:	89 e5                	mov    ebp,esp
c00096b6:	83 ec 18             	sub    esp,0x18
c00096b9:	e8 69 5e 00 00       	call   c000f527 <KeUserIOReceived()>
c00096be:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c00096c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00096c4:	0f b7 c0             	movzx  eax,ax
c00096c7:	83 f2 01             	xor    edx,0x1
c00096ca:	88 90 40 93 02 c0    	mov    BYTE PTR [eax-0x3ffd6cc0],dl
c00096d0:	a1 28 93 02 c0       	mov    eax,ds:0xc0029328
c00096d5:	85 c0                	test   eax,eax
c00096d7:	74 24                	je     c00096fd <sendKeyboardToken(KeyboardToken)+0x4a>
c00096d9:	8b 15 28 93 02 c0    	mov    edx,DWORD PTR ds:0xc0029328
c00096df:	83 ec 04             	sub    esp,0x4
c00096e2:	68 40 93 02 c0       	push   0xc0029340
c00096e7:	83 ec 08             	sub    esp,0x8
c00096ea:	89 e0                	mov    eax,esp
c00096ec:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00096ef:	89 08                	mov    DWORD PTR [eax],ecx
c00096f1:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00096f4:	66 89 48 04          	mov    WORD PTR [eax+0x4],cx
c00096f8:	ff d2                	call   edx
c00096fa:	83 c4 10             	add    esp,0x10
c00096fd:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0009701:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c0009704:	0f b6 c0             	movzx  eax,al
c0009707:	85 c0                	test   eax,eax
c0009709:	0f 84 da 00 00 00    	je     c00097e9 <sendKeyboardToken(KeyboardToken)+0x136>
c000970f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009712:	0f b7 c0             	movzx  eax,ax
c0009715:	3d 18 03 00 00       	cmp    eax,0x318
c000971a:	75 06                	jne    c0009722 <sendKeyboardToken(KeyboardToken)+0x6f>
c000971c:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c0009722:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009725:	0f b7 c0             	movzx  eax,ax
c0009728:	3d 19 03 00 00       	cmp    eax,0x319
c000972d:	75 06                	jne    c0009735 <sendKeyboardToken(KeyboardToken)+0x82>
c000972f:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c0009735:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009738:	0f b7 c0             	movzx  eax,ax
c000973b:	3d 1a 03 00 00       	cmp    eax,0x31a
c0009740:	75 06                	jne    c0009748 <sendKeyboardToken(KeyboardToken)+0x95>
c0009742:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c0009748:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000974b:	0f b7 c0             	movzx  eax,ax
c000974e:	3d 1b 03 00 00       	cmp    eax,0x31b
c0009753:	75 06                	jne    c000975b <sendKeyboardToken(KeyboardToken)+0xa8>
c0009755:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000975b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000975e:	0f b7 c0             	movzx  eax,ax
c0009761:	3d 1c 03 00 00       	cmp    eax,0x31c
c0009766:	75 06                	jne    c000976e <sendKeyboardToken(KeyboardToken)+0xbb>
c0009768:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000976e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009771:	0f b7 c0             	movzx  eax,ax
c0009774:	3d 1d 03 00 00       	cmp    eax,0x31d
c0009779:	75 06                	jne    c0009781 <sendKeyboardToken(KeyboardToken)+0xce>
c000977b:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0009781:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009784:	0f b7 c0             	movzx  eax,ax
c0009787:	3d 1e 03 00 00       	cmp    eax,0x31e
c000978c:	75 06                	jne    c0009794 <sendKeyboardToken(KeyboardToken)+0xe1>
c000978e:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c0009794:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009797:	0f b7 c0             	movzx  eax,ax
c000979a:	3d 1f 03 00 00       	cmp    eax,0x31f
c000979f:	75 06                	jne    c00097a7 <sendKeyboardToken(KeyboardToken)+0xf4>
c00097a1:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c00097a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00097aa:	0f b7 c0             	movzx  eax,ax
c00097ad:	3d 20 03 00 00       	cmp    eax,0x320
c00097b2:	75 06                	jne    c00097ba <sendKeyboardToken(KeyboardToken)+0x107>
c00097b4:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c00097ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00097bd:	0f b7 c0             	movzx  eax,ax
c00097c0:	3d 21 03 00 00       	cmp    eax,0x321
c00097c5:	75 06                	jne    c00097cd <sendKeyboardToken(KeyboardToken)+0x11a>
c00097c7:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c00097cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00097d0:	0f b7 c0             	movzx  eax,ax
c00097d3:	3d 22 03 00 00       	cmp    eax,0x322
c00097d8:	0f 85 f1 00 00 00    	jne    c00098cf <sendKeyboardToken(KeyboardToken)+0x21c>
c00097de:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c00097e4:	e9 e6 00 00 00       	jmp    c00098cf <sendKeyboardToken(KeyboardToken)+0x21c>
c00097e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00097ec:	0f b7 c0             	movzx  eax,ax
c00097ef:	3d 18 03 00 00       	cmp    eax,0x318
c00097f4:	75 0a                	jne    c0009800 <sendKeyboardToken(KeyboardToken)+0x14d>
c00097f6:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c00097fc:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0009800:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009803:	0f b7 c0             	movzx  eax,ax
c0009806:	3d 19 03 00 00       	cmp    eax,0x319
c000980b:	75 0a                	jne    c0009817 <sendKeyboardToken(KeyboardToken)+0x164>
c000980d:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c0009813:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0009817:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000981a:	0f b7 c0             	movzx  eax,ax
c000981d:	3d 1a 03 00 00       	cmp    eax,0x31a
c0009822:	75 0a                	jne    c000982e <sendKeyboardToken(KeyboardToken)+0x17b>
c0009824:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000982a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000982e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009831:	0f b7 c0             	movzx  eax,ax
c0009834:	3d 1b 03 00 00       	cmp    eax,0x31b
c0009839:	75 0a                	jne    c0009845 <sendKeyboardToken(KeyboardToken)+0x192>
c000983b:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c0009841:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0009845:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009848:	0f b7 c0             	movzx  eax,ax
c000984b:	3d 1c 03 00 00       	cmp    eax,0x31c
c0009850:	75 0a                	jne    c000985c <sendKeyboardToken(KeyboardToken)+0x1a9>
c0009852:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c0009858:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000985c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000985f:	0f b7 c0             	movzx  eax,ax
c0009862:	3d 1d 03 00 00       	cmp    eax,0x31d
c0009867:	75 0a                	jne    c0009873 <sendKeyboardToken(KeyboardToken)+0x1c0>
c0009869:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000986f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0009873:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009876:	0f b7 c0             	movzx  eax,ax
c0009879:	3d 1e 03 00 00       	cmp    eax,0x31e
c000987e:	75 0a                	jne    c000988a <sendKeyboardToken(KeyboardToken)+0x1d7>
c0009880:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c0009886:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000988a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000988d:	0f b7 c0             	movzx  eax,ax
c0009890:	3d 1f 03 00 00       	cmp    eax,0x31f
c0009895:	75 0a                	jne    c00098a1 <sendKeyboardToken(KeyboardToken)+0x1ee>
c0009897:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000989d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00098a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00098a4:	0f b7 c0             	movzx  eax,ax
c00098a7:	3d 20 03 00 00       	cmp    eax,0x320
c00098ac:	75 0a                	jne    c00098b8 <sendKeyboardToken(KeyboardToken)+0x205>
c00098ae:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c00098b4:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00098b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00098bb:	0f b7 c0             	movzx  eax,ax
c00098be:	3d 21 03 00 00       	cmp    eax,0x321
c00098c3:	75 0a                	jne    c00098cf <sendKeyboardToken(KeyboardToken)+0x21c>
c00098c5:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c00098cb:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00098cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00098d2:	0f b7 c0             	movzx  eax,ax
c00098d5:	3d 00 02 00 00       	cmp    eax,0x200
c00098da:	75 2f                	jne    c000990b <sendKeyboardToken(KeyboardToken)+0x258>
c00098dc:	a0 40 97 02 c0       	mov    al,ds:0xc0029740
c00098e1:	83 f0 01             	xor    eax,0x1
c00098e4:	0f b6 c0             	movzx  eax,al
c00098e7:	85 c0                	test   eax,eax
c00098e9:	74 20                	je     c000990b <sendKeyboardToken(KeyboardToken)+0x258>
c00098eb:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c00098f0:	6a 01                	push   0x1
c00098f2:	6a 00                	push   0x0
c00098f4:	68 04 95 00 c0       	push   0xc0009504
c00098f9:	50                   	push   eax
c00098fa:	e8 a5 b8 00 00       	call   c00151a4 <Process::createThread(void (*)(void*), void*, int)>
c00098ff:	83 c4 10             	add    esp,0x10
c0009902:	c6 05 40 97 02 c0 01 	mov    BYTE PTR ds:0xc0029740,0x1
c0009909:	eb 3a                	jmp    c0009945 <sendKeyboardToken(KeyboardToken)+0x292>
c000990b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000990e:	0f b7 c0             	movzx  eax,ax
c0009911:	3d 01 02 00 00       	cmp    eax,0x201
c0009916:	75 2d                	jne    c0009945 <sendKeyboardToken(KeyboardToken)+0x292>
c0009918:	a0 40 97 02 c0       	mov    al,ds:0xc0029740
c000991d:	83 f0 01             	xor    eax,0x1
c0009920:	0f b6 c0             	movzx  eax,al
c0009923:	85 c0                	test   eax,eax
c0009925:	74 1e                	je     c0009945 <sendKeyboardToken(KeyboardToken)+0x292>
c0009927:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c000992c:	6a 01                	push   0x1
c000992e:	6a 00                	push   0x0
c0009930:	68 6e 95 00 c0       	push   0xc000956e
c0009935:	50                   	push   eax
c0009936:	e8 69 b8 00 00       	call   c00151a4 <Process::createThread(void (*)(void*), void*, int)>
c000993b:	83 c4 10             	add    esp,0x10
c000993e:	c6 05 40 97 02 c0 01 	mov    BYTE PTR ds:0xc0029740,0x1
c0009945:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009948:	0f b7 c0             	movzx  eax,ax
c000994b:	3d 25 03 00 00       	cmp    eax,0x325
c0009950:	75 06                	jne    c0009958 <sendKeyboardToken(KeyboardToken)+0x2a5>
c0009952:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c0009958:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000995b:	0f b7 c0             	movzx  eax,ax
c000995e:	3d 24 03 00 00       	cmp    eax,0x324
c0009963:	75 06                	jne    c000996b <sendKeyboardToken(KeyboardToken)+0x2b8>
c0009965:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000996b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000996e:	0f b7 c0             	movzx  eax,ax
c0009971:	3d 23 03 00 00       	cmp    eax,0x323
c0009976:	75 06                	jne    c000997e <sendKeyboardToken(KeyboardToken)+0x2cb>
c0009978:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000997e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009981:	0f b7 c0             	movzx  eax,ax
c0009984:	3d 26 03 00 00       	cmp    eax,0x326
c0009989:	75 06                	jne    c0009991 <sendKeyboardToken(KeyboardToken)+0x2de>
c000998b:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c0009991:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009994:	0f b7 c0             	movzx  eax,ax
c0009997:	3d 27 03 00 00       	cmp    eax,0x327
c000999c:	75 06                	jne    c00099a4 <sendKeyboardToken(KeyboardToken)+0x2f1>
c000999e:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c00099a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00099a7:	0f b7 c0             	movzx  eax,ax
c00099aa:	3d 22 03 00 00       	cmp    eax,0x322
c00099af:	75 06                	jne    c00099b7 <sendKeyboardToken(KeyboardToken)+0x304>
c00099b1:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c00099b7:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c00099bb:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00099be:	83 f0 01             	xor    eax,0x1
c00099c1:	0f b6 c0             	movzx  eax,al
c00099c4:	85 c0                	test   eax,eax
c00099c6:	74 7c                	je     c0009a44 <sendKeyboardToken(KeyboardToken)+0x391>
c00099c8:	a0 41 94 02 c0       	mov    al,ds:0xc0029441
c00099cd:	0f b6 c0             	movzx  eax,al
c00099d0:	85 c0                	test   eax,eax
c00099d2:	74 43                	je     c0009a17 <sendKeyboardToken(KeyboardToken)+0x364>
c00099d4:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00099d8:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c00099dc:	85 c0                	test   eax,eax
c00099de:	74 2b                	je     c0009a0b <sendKeyboardToken(KeyboardToken)+0x358>
c00099e0:	8b 15 44 97 02 c0    	mov    edx,DWORD PTR ds:0xc0029744
c00099e6:	89 d0                	mov    eax,edx
c00099e8:	c1 e0 02             	shl    eax,0x2
c00099eb:	01 d0                	add    eax,edx
c00099ed:	d1 e0                	shl    eax,1
c00099ef:	a3 44 97 02 c0       	mov    ds:0xc0029744,eax
c00099f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00099f7:	0f b7 c0             	movzx  eax,ax
c00099fa:	8d 50 d0             	lea    edx,[eax-0x30]
c00099fd:	a1 44 97 02 c0       	mov    eax,ds:0xc0029744
c0009a02:	01 d0                	add    eax,edx
c0009a04:	a3 44 97 02 c0       	mov    ds:0xc0029744,eax
c0009a09:	eb 71                	jmp    c0009a7c <sendKeyboardToken(KeyboardToken)+0x3c9>
c0009a0b:	c7 05 44 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029744,0x0
c0009a15:	eb 65                	jmp    c0009a7c <sendKeyboardToken(KeyboardToken)+0x3c9>
c0009a17:	a1 44 97 02 c0       	mov    eax,ds:0xc0029744
c0009a1c:	85 c0                	test   eax,eax
c0009a1e:	74 18                	je     c0009a38 <sendKeyboardToken(KeyboardToken)+0x385>
c0009a20:	a1 44 97 02 c0       	mov    eax,ds:0xc0029744
c0009a25:	0f b6 c0             	movzx  eax,al
c0009a28:	83 ec 0c             	sub    esp,0xc
c0009a2b:	50                   	push   eax
c0009a2c:	e8 a7 fb ff ff       	call   c00095d8 <sendKeyToTerminal(unsigned char)>
c0009a31:	83 c4 10             	add    esp,0x10
c0009a34:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0009a38:	c7 05 44 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029744,0x0
c0009a42:	eb 38                	jmp    c0009a7c <sendKeyboardToken(KeyboardToken)+0x3c9>
c0009a44:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009a47:	0f b7 c0             	movzx  eax,ax
c0009a4a:	3d 01 01 00 00       	cmp    eax,0x101
c0009a4f:	75 2b                	jne    c0009a7c <sendKeyboardToken(KeyboardToken)+0x3c9>
c0009a51:	a1 44 97 02 c0       	mov    eax,ds:0xc0029744
c0009a56:	85 c0                	test   eax,eax
c0009a58:	74 18                	je     c0009a72 <sendKeyboardToken(KeyboardToken)+0x3bf>
c0009a5a:	a1 44 97 02 c0       	mov    eax,ds:0xc0029744
c0009a5f:	0f b6 c0             	movzx  eax,al
c0009a62:	83 ec 0c             	sub    esp,0xc
c0009a65:	50                   	push   eax
c0009a66:	e8 6d fb ff ff       	call   c00095d8 <sendKeyToTerminal(unsigned char)>
c0009a6b:	83 c4 10             	add    esp,0x10
c0009a6e:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0009a72:	c7 05 44 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029744,0x0
c0009a7c:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0009a7f:	83 f0 01             	xor    eax,0x1
c0009a82:	0f b6 c0             	movzx  eax,al
c0009a85:	85 c0                	test   eax,eax
c0009a87:	74 5a                	je     c0009ae3 <sendKeyboardToken(KeyboardToken)+0x430>
c0009a89:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0009a8c:	83 f0 01             	xor    eax,0x1
c0009a8f:	0f b6 c0             	movzx  eax,al
c0009a92:	85 c0                	test   eax,eax
c0009a94:	74 4d                	je     c0009ae3 <sendKeyboardToken(KeyboardToken)+0x430>
c0009a96:	a0 40 94 02 c0       	mov    al,ds:0xc0029440
c0009a9b:	83 f0 01             	xor    eax,0x1
c0009a9e:	0f b6 c0             	movzx  eax,al
c0009aa1:	85 c0                	test   eax,eax
c0009aa3:	74 3e                	je     c0009ae3 <sendKeyboardToken(KeyboardToken)+0x430>
c0009aa5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009aa8:	0f b7 c0             	movzx  eax,ax
c0009aab:	83 f8 1f             	cmp    eax,0x1f
c0009aae:	76 0b                	jbe    c0009abb <sendKeyboardToken(KeyboardToken)+0x408>
c0009ab0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009ab3:	0f b7 c0             	movzx  eax,ax
c0009ab6:	83 f8 7e             	cmp    eax,0x7e
c0009ab9:	76 16                	jbe    c0009ad1 <sendKeyboardToken(KeyboardToken)+0x41e>
c0009abb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009abe:	0f b7 c0             	movzx  eax,ax
c0009ac1:	83 f8 0a             	cmp    eax,0xa
c0009ac4:	74 0b                	je     c0009ad1 <sendKeyboardToken(KeyboardToken)+0x41e>
c0009ac6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009ac9:	0f b7 c0             	movzx  eax,ax
c0009acc:	83 f8 08             	cmp    eax,0x8
c0009acf:	75 12                	jne    c0009ae3 <sendKeyboardToken(KeyboardToken)+0x430>
c0009ad1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009ad4:	0f b6 c0             	movzx  eax,al
c0009ad7:	83 ec 0c             	sub    esp,0xc
c0009ada:	50                   	push   eax
c0009adb:	e8 f8 fa ff ff       	call   c00095d8 <sendKeyToTerminal(unsigned char)>
c0009ae0:	83 c4 10             	add    esp,0x10
c0009ae3:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0009ae6:	83 f0 01             	xor    eax,0x1
c0009ae9:	0f b6 c0             	movzx  eax,al
c0009aec:	85 c0                	test   eax,eax
c0009aee:	74 5d                	je     c0009b4d <sendKeyboardToken(KeyboardToken)+0x49a>
c0009af0:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0009af3:	83 f0 01             	xor    eax,0x1
c0009af6:	0f b6 c0             	movzx  eax,al
c0009af9:	85 c0                	test   eax,eax
c0009afb:	74 50                	je     c0009b4d <sendKeyboardToken(KeyboardToken)+0x49a>
c0009afd:	a0 40 94 02 c0       	mov    al,ds:0xc0029440
c0009b02:	0f b6 c0             	movzx  eax,al
c0009b05:	85 c0                	test   eax,eax
c0009b07:	74 44                	je     c0009b4d <sendKeyboardToken(KeyboardToken)+0x49a>
c0009b09:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009b0c:	0f b7 c0             	movzx  eax,ax
c0009b0f:	83 f8 3f             	cmp    eax,0x3f
c0009b12:	76 39                	jbe    c0009b4d <sendKeyboardToken(KeyboardToken)+0x49a>
c0009b14:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009b17:	0f b7 c0             	movzx  eax,ax
c0009b1a:	83 f8 7f             	cmp    eax,0x7f
c0009b1d:	77 2e                	ja     c0009b4d <sendKeyboardToken(KeyboardToken)+0x49a>
c0009b1f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009b22:	88 c2                	mov    dl,al
c0009b24:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009b27:	0f b7 c0             	movzx  eax,ax
c0009b2a:	83 f8 5f             	cmp    eax,0x5f
c0009b2d:	76 04                	jbe    c0009b33 <sendKeyboardToken(KeyboardToken)+0x480>
c0009b2f:	b0 20                	mov    al,0x20
c0009b31:	eb 02                	jmp    c0009b35 <sendKeyboardToken(KeyboardToken)+0x482>
c0009b33:	b0 00                	mov    al,0x0
c0009b35:	89 d1                	mov    ecx,edx
c0009b37:	29 c1                	sub    ecx,eax
c0009b39:	89 c8                	mov    eax,ecx
c0009b3b:	83 e8 40             	sub    eax,0x40
c0009b3e:	0f b6 c0             	movzx  eax,al
c0009b41:	83 ec 0c             	sub    esp,0xc
c0009b44:	50                   	push   eax
c0009b45:	e8 8e fa ff ff       	call   c00095d8 <sendKeyToTerminal(unsigned char)>
c0009b4a:	83 c4 10             	add    esp,0x10
c0009b4d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009b50:	0f b7 c0             	movzx  eax,ax
c0009b53:	3d 00 03 00 00       	cmp    eax,0x300
c0009b58:	75 12                	jne    c0009b6c <sendKeyboardToken(KeyboardToken)+0x4b9>
c0009b5a:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0009b5d:	83 f0 01             	xor    eax,0x1
c0009b60:	0f b6 c0             	movzx  eax,al
c0009b63:	85 c0                	test   eax,eax
c0009b65:	74 05                	je     c0009b6c <sendKeyboardToken(KeyboardToken)+0x4b9>
c0009b67:	e8 bf 72 00 00       	call   c0010e2b <doTerminalCycle()>
c0009b6c:	90                   	nop
c0009b6d:	c9                   	leave  
c0009b6e:	c3                   	ret    

c0009b6f <clearInternalKeybuffer(VgaText*)>:
c0009b6f:	55                   	push   ebp
c0009b70:	89 e5                	mov    ebp,esp
c0009b72:	83 ec 08             	sub    esp,0x8
c0009b75:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009b78:	05 02 01 00 00       	add    eax,0x102
c0009b7d:	83 ec 0c             	sub    esp,0xc
c0009b80:	50                   	push   eax
c0009b81:	e8 fa 69 ff ff       	call   c0000580 <strlen>
c0009b86:	83 c4 10             	add    esp,0x10
c0009b89:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0009b8c:	81 c2 02 01 00 00    	add    edx,0x102
c0009b92:	83 ec 04             	sub    esp,0x4
c0009b95:	50                   	push   eax
c0009b96:	6a 00                	push   0x0
c0009b98:	52                   	push   edx
c0009b99:	e8 52 69 ff ff       	call   c00004f0 <memset>
c0009b9e:	83 c4 10             	add    esp,0x10
c0009ba1:	90                   	nop
c0009ba2:	c9                   	leave  
c0009ba3:	c3                   	ret    

c0009ba4 <readKeyboard(VgaText*, char*, unsigned long)>:
c0009ba4:	55                   	push   ebp
c0009ba5:	89 e5                	mov    ebp,esp
c0009ba7:	83 ec 18             	sub    esp,0x18
c0009baa:	a1 28 93 02 c0       	mov    eax,ds:0xc0029328
c0009baf:	85 c0                	test   eax,eax
c0009bb1:	74 2a                	je     c0009bdd <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c0009bb3:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c0009bb9:	8b 15 28 93 02 c0    	mov    edx,DWORD PTR ds:0xc0029328
c0009bbf:	83 ec 04             	sub    esp,0x4
c0009bc2:	68 40 93 02 c0       	push   0xc0029340
c0009bc7:	83 ec 08             	sub    esp,0x8
c0009bca:	89 e0                	mov    eax,esp
c0009bcc:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0009bcf:	89 08                	mov    DWORD PTR [eax],ecx
c0009bd1:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0009bd4:	66 89 48 04          	mov    WORD PTR [eax+0x4],cx
c0009bd8:	ff d2                	call   edx
c0009bda:	83 c4 10             	add    esp,0x10
c0009bdd:	a0 2d 93 02 c0       	mov    al,ds:0xc002932d
c0009be2:	0f b6 c0             	movzx  eax,al
c0009be5:	85 c0                	test   eax,eax
c0009be7:	74 07                	je     c0009bf0 <readKeyboard(VgaText*, char*, unsigned long)+0x4c>
c0009be9:	c6 05 2c 93 02 c0 01 	mov    BYTE PTR ds:0xc002932c,0x1
c0009bf0:	fb                   	sti    
c0009bf1:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0009bf8:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0009bfc:	0f 84 2f 01 00 00    	je     c0009d31 <readKeyboard(VgaText*, char*, unsigned long)+0x18d>
c0009c02:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009c05:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c0009c0b:	0f be c0             	movsx  eax,al
c0009c0e:	85 c0                	test   eax,eax
c0009c10:	75 2c                	jne    c0009c3e <readKeyboard(VgaText*, char*, unsigned long)+0x9a>
c0009c12:	fa                   	cli    
c0009c13:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0009c18:	83 c0 01             	add    eax,0x1
c0009c1b:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c0009c20:	e8 cb b7 00 00       	call   c00153f0 <schedule()>
c0009c25:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0009c2a:	83 e8 01             	sub    eax,0x1
c0009c2d:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c0009c32:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0009c37:	85 c0                	test   eax,eax
c0009c39:	75 c7                	jne    c0009c02 <readKeyboard(VgaText*, char*, unsigned long)+0x5e>
c0009c3b:	fb                   	sti    
c0009c3c:	eb c4                	jmp    c0009c02 <readKeyboard(VgaText*, char*, unsigned long)+0x5e>
c0009c3e:	a0 2c 93 02 c0       	mov    al,ds:0xc002932c
c0009c43:	0f b6 c0             	movzx  eax,al
c0009c46:	85 c0                	test   eax,eax
c0009c48:	74 0a                	je     c0009c54 <readKeyboard(VgaText*, char*, unsigned long)+0xb0>
c0009c4a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009c4d:	c6 80 02 01 00 00 0a 	mov    BYTE PTR [eax+0x102],0xa
c0009c54:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0009c57:	8d 50 01             	lea    edx,[eax+0x1]
c0009c5a:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0009c5d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0009c60:	8a 92 02 01 00 00    	mov    dl,BYTE PTR [edx+0x102]
c0009c66:	88 10                	mov    BYTE PTR [eax],dl
c0009c68:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009c6b:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c0009c71:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c0009c74:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c0009c78:	83 f8 03             	cmp    eax,0x3
c0009c7b:	75 1e                	jne    c0009c9b <readKeyboard(VgaText*, char*, unsigned long)+0xf7>
c0009c7d:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009c82:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c84:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009c87:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c0009c8d:	83 ec 08             	sub    esp,0x8
c0009c90:	6a 02                	push   0x2
c0009c92:	50                   	push   eax
c0009c93:	e8 b8 60 00 00       	call   c000fd50 <KeRaiseSignal(SigHandlerBlock*, int)>
c0009c98:	83 c4 10             	add    esp,0x10
c0009c9b:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c0009c9f:	83 f8 1c             	cmp    eax,0x1c
c0009ca2:	75 1e                	jne    c0009cc2 <readKeyboard(VgaText*, char*, unsigned long)+0x11e>
c0009ca4:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009ca9:	8b 00                	mov    eax,DWORD PTR [eax]
c0009cab:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009cae:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c0009cb4:	83 ec 08             	sub    esp,0x8
c0009cb7:	6a 09                	push   0x9
c0009cb9:	50                   	push   eax
c0009cba:	e8 91 60 00 00       	call   c000fd50 <KeRaiseSignal(SigHandlerBlock*, int)>
c0009cbf:	83 c4 10             	add    esp,0x10
c0009cc2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009cc5:	05 02 01 00 00       	add    eax,0x102
c0009cca:	83 ec 0c             	sub    esp,0xc
c0009ccd:	50                   	push   eax
c0009cce:	e8 ad 68 ff ff       	call   c0000580 <strlen>
c0009cd3:	83 c4 10             	add    esp,0x10
c0009cd6:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0009cd9:	81 c2 02 01 00 00    	add    edx,0x102
c0009cdf:	8d 4a 01             	lea    ecx,[edx+0x1]
c0009ce2:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0009ce5:	81 c2 02 01 00 00    	add    edx,0x102
c0009ceb:	83 ec 04             	sub    esp,0x4
c0009cee:	50                   	push   eax
c0009cef:	51                   	push   ecx
c0009cf0:	52                   	push   edx
c0009cf1:	e8 da 66 ff ff       	call   c00003d0 <memmove>
c0009cf6:	83 c4 10             	add    esp,0x10
c0009cf9:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
c0009cfd:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c0009d01:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c0009d05:	83 f8 0a             	cmp    eax,0xa
c0009d08:	74 22                	je     c0009d2c <readKeyboard(VgaText*, char*, unsigned long)+0x188>
c0009d0a:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c0009d0e:	83 f8 03             	cmp    eax,0x3
c0009d11:	74 19                	je     c0009d2c <readKeyboard(VgaText*, char*, unsigned long)+0x188>
c0009d13:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c0009d17:	83 f8 1c             	cmp    eax,0x1c
c0009d1a:	74 10                	je     c0009d2c <readKeyboard(VgaText*, char*, unsigned long)+0x188>
c0009d1c:	a0 2d 93 02 c0       	mov    al,ds:0xc002932d
c0009d21:	0f b6 c0             	movzx  eax,al
c0009d24:	85 c0                	test   eax,eax
c0009d26:	0f 84 cc fe ff ff    	je     c0009bf8 <readKeyboard(VgaText*, char*, unsigned long)+0x54>
c0009d2c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0009d2f:	eb 03                	jmp    c0009d34 <readKeyboard(VgaText*, char*, unsigned long)+0x190>
c0009d31:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0009d34:	c9                   	leave  
c0009d35:	c3                   	ret    

c0009d36 <Keyboard::Keyboard(char const*)>:
c0009d36:	83 ec 0c             	sub    esp,0xc
c0009d39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d3d:	83 ec 08             	sub    esp,0x8
c0009d40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009d44:	50                   	push   eax
c0009d45:	e8 5a f4 ff ff       	call   c00091a4 <Device::Device(char const*)>
c0009d4a:	83 c4 10             	add    esp,0x10
c0009d4d:	ba 04 17 02 c0       	mov    edx,0xc0021704
c0009d52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d56:	89 10                	mov    DWORD PTR [eax],edx
c0009d58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d5c:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c0009d66:	c6 05 24 93 02 c0 01 	mov    BYTE PTR ds:0xc0029324,0x1
c0009d6d:	90                   	nop
c0009d6e:	83 c4 0c             	add    esp,0xc
c0009d71:	c3                   	ret    

c0009d72 <Keyboard::~Keyboard()>:
c0009d72:	83 ec 0c             	sub    esp,0xc
c0009d75:	ba 04 17 02 c0       	mov    edx,0xc0021704
c0009d7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d7e:	89 10                	mov    DWORD PTR [eax],edx
c0009d80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d84:	83 ec 0c             	sub    esp,0xc
c0009d87:	50                   	push   eax
c0009d88:	e8 b7 f1 ff ff       	call   c0008f44 <Device::~Device()>
c0009d8d:	83 c4 10             	add    esp,0x10
c0009d90:	90                   	nop
c0009d91:	83 c4 0c             	add    esp,0xc
c0009d94:	c3                   	ret    
c0009d95:	90                   	nop

c0009d96 <Keyboard::~Keyboard()>:
c0009d96:	83 ec 0c             	sub    esp,0xc
c0009d99:	83 ec 0c             	sub    esp,0xc
c0009d9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009da0:	e8 cd ff ff ff       	call   c0009d72 <Keyboard::~Keyboard()>
c0009da5:	83 c4 10             	add    esp,0x10
c0009da8:	83 ec 08             	sub    esp,0x8
c0009dab:	68 5c 01 00 00       	push   0x15c
c0009db0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009db4:	e8 aa 28 00 00       	call   c000c663 <operator delete(void*, unsigned long)>
c0009db9:	83 c4 10             	add    esp,0x10
c0009dbc:	83 c4 0c             	add    esp,0xc
c0009dbf:	c3                   	ret    

c0009dc0 <LogicalDisk::close(int, int, void*)>:
c0009dc0:	83 c8 ff             	or     eax,0xffffffff
c0009dc3:	c3                   	ret    

c0009dc4 <LogicalDisk::~LogicalDisk()>:
c0009dc4:	83 ec 0c             	sub    esp,0xc
c0009dc7:	ba 7c 17 02 c0       	mov    edx,0xc002177c
c0009dcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009dd0:	89 10                	mov    DWORD PTR [eax],edx
c0009dd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009dd6:	83 ec 0c             	sub    esp,0xc
c0009dd9:	50                   	push   eax
c0009dda:	e8 65 f1 ff ff       	call   c0008f44 <Device::~Device()>
c0009ddf:	83 c4 10             	add    esp,0x10
c0009de2:	90                   	nop
c0009de3:	83 c4 0c             	add    esp,0xc
c0009de6:	c3                   	ret    
c0009de7:	90                   	nop

c0009de8 <LogicalDisk::~LogicalDisk()>:
c0009de8:	83 ec 0c             	sub    esp,0xc
c0009deb:	83 ec 0c             	sub    esp,0xc
c0009dee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009df2:	e8 cd ff ff ff       	call   c0009dc4 <LogicalDisk::~LogicalDisk()>
c0009df7:	83 c4 10             	add    esp,0x10
c0009dfa:	83 ec 08             	sub    esp,0x8
c0009dfd:	68 78 01 00 00       	push   0x178
c0009e02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e06:	e8 58 28 00 00       	call   c000c663 <operator delete(void*, unsigned long)>
c0009e0b:	83 c4 10             	add    esp,0x10
c0009e0e:	83 c4 0c             	add    esp,0xc
c0009e11:	c3                   	ret    

c0009e12 <LogicalDisk::open(int, int, void*)>:
c0009e12:	83 ec 18             	sub    esp,0x18
c0009e15:	68 30 17 02 c0       	push   0xc0021730
c0009e1a:	e8 07 4e 00 00       	call   c000ec26 <KePanic(char const*)>
c0009e1f:	83 c8 ff             	or     eax,0xffffffff
c0009e22:	83 c4 1c             	add    esp,0x1c
c0009e25:	c3                   	ret    

c0009e26 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c0009e26:	53                   	push   ebx
c0009e27:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009e2b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009e2f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0009e33:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c0009e39:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c0009e3f:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c0009e45:	77 10                	ja     c0009e57 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c0009e47:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c0009e4d:	89 d3                	mov    ebx,edx
c0009e4f:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c0009e55:	72 05                	jb     c0009e5c <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c0009e57:	83 c8 ff             	or     eax,0xffffffff
c0009e5a:	89 c2                	mov    edx,eax
c0009e5c:	5b                   	pop    ebx
c0009e5d:	c3                   	ret    

c0009e5e <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c0009e5e:	56                   	push   esi
c0009e5f:	83 c8 ff             	or     eax,0xffffffff
c0009e62:	53                   	push   ebx
c0009e63:	89 c2                	mov    edx,eax
c0009e65:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0009e69:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0009e6d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0009e71:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0009e77:	77 27                	ja     c0009ea0 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0009e79:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c0009e7f:	89 d8                	mov    eax,ebx
c0009e81:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0009e87:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0009e8c:	89 c2                	mov    edx,eax
c0009e8e:	73 10                	jae    c0009ea0 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0009e90:	89 c8                	mov    eax,ecx
c0009e92:	89 da                	mov    edx,ebx
c0009e94:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0009e9a:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c0009ea0:	5b                   	pop    ebx
c0009ea1:	5e                   	pop    esi
c0009ea2:	c3                   	ret    
c0009ea3:	90                   	nop

c0009ea4 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0009ea4:	83 ec 1c             	sub    esp,0x1c
c0009ea7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0009eab:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009eaf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009eb3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009eb7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009ebb:	89 04 24             	mov    DWORD PTR [esp],eax
c0009ebe:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009ec2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009ec6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009eca:	83 ec 08             	sub    esp,0x8
c0009ecd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ed1:	50                   	push   eax
c0009ed2:	e8 cd f2 ff ff       	call   c00091a4 <Device::Device(char const*)>
c0009ed7:	83 c4 10             	add    esp,0x10
c0009eda:	ba 7c 17 02 c0       	mov    edx,0xc002177c
c0009edf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009ee3:	89 10                	mov    DWORD PTR [eax],edx
c0009ee5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009ee9:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0009ef0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009ef4:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c0009efb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009eff:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0009f06:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009f0a:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c0009f14:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0009f18:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009f1c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009f20:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c0009f26:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c0009f2c:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0009f30:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0009f33:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0009f37:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c0009f3d:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c0009f43:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009f47:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0009f4b:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c0009f51:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009f55:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c0009f5f:	90                   	nop
c0009f60:	83 c4 1c             	add    esp,0x1c
c0009f63:	c3                   	ret    

c0009f64 <LogicalDisk::assignDriveLetter()>:
c0009f64:	55                   	push   ebp
c0009f65:	57                   	push   edi
c0009f66:	56                   	push   esi
c0009f67:	53                   	push   ebx
c0009f68:	83 ec 14             	sub    esp,0x14
c0009f6b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009f6f:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c0009f75:	b0 41                	mov    al,0x41
c0009f77:	8a 93 69 01 00 00    	mov    dl,BYTE PTR [ebx+0x169]
c0009f7d:	84 d2                	test   dl,dl
c0009f7f:	75 02                	jne    c0009f83 <LogicalDisk::assignDriveLetter()+0x1f>
c0009f81:	b0 43                	mov    al,0x43
c0009f83:	8b 3d 60 97 02 c0    	mov    edi,DWORD PTR ds:0xc0029760
c0009f89:	0f b6 ca             	movzx  ecx,dl
c0009f8c:	0f be e8             	movsx  ebp,al
c0009f8f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0009f93:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0009f97:	8b 3d 64 97 02 c0    	mov    edi,DWORD PTR ds:0xc0029764
c0009f9d:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0009fa1:	3c 43                	cmp    al,0x43
c0009fa3:	75 10                	jne    c0009fb5 <LogicalDisk::assignDriveLetter()+0x51>
c0009fa5:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c0009fac:	75 5a                	jne    c000a008 <LogicalDisk::assignDriveLetter()+0xa4>
c0009fae:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0009fb3:	75 53                	jne    c000a008 <LogicalDisk::assignDriveLetter()+0xa4>
c0009fb5:	8d 75 bf             	lea    esi,[ebp-0x41]
c0009fb8:	ba 01 00 00 00       	mov    edx,0x1
c0009fbd:	89 34 24             	mov    DWORD PTR [esp],esi
c0009fc0:	8a 0c 24             	mov    cl,BYTE PTR [esp]
c0009fc3:	d3 e2                	shl    edx,cl
c0009fc5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009fc9:	89 d7                	mov    edi,edx
c0009fcb:	89 d6                	mov    esi,edx
c0009fcd:	23 54 24 04          	and    edx,DWORD PTR [esp+0x4]
c0009fd1:	c1 ff 1f             	sar    edi,0x1f
c0009fd4:	21 f9                	and    ecx,edi
c0009fd6:	09 d1                	or     ecx,edx
c0009fd8:	75 2e                	jne    c000a008 <LogicalDisk::assignDriveLetter()+0xa4>
c0009fda:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0009fde:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0009fe2:	09 f2                	or     edx,esi
c0009fe4:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0009fe7:	89 15 60 97 02 c0    	mov    DWORD PTR ds:0xc0029760,edx
c0009fed:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009ff1:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c0009ff7:	89 1c b5 80 97 02 c0 	mov    DWORD PTR [esi*4-0x3ffd6880],ebx
c0009ffe:	09 fa                	or     edx,edi
c000a000:	89 15 64 97 02 c0    	mov    DWORD PTR ds:0xc0029764,edx
c000a006:	eb 0d                	jmp    c000a015 <LogicalDisk::assignDriveLetter()+0xb1>
c000a008:	8d 50 01             	lea    edx,[eax+0x1]
c000a00b:	45                   	inc    ebp
c000a00c:	80 fa 5b             	cmp    dl,0x5b
c000a00f:	88 d0                	mov    al,dl
c000a011:	75 8e                	jne    c0009fa1 <LogicalDisk::assignDriveLetter()+0x3d>
c000a013:	31 c0                	xor    eax,eax
c000a015:	83 c4 14             	add    esp,0x14
c000a018:	5b                   	pop    ebx
c000a019:	5e                   	pop    esi
c000a01a:	5f                   	pop    edi
c000a01b:	5d                   	pop    ebp
c000a01c:	c3                   	ret    
c000a01d:	90                   	nop

c000a01e <LogicalDisk::mount()>:
c000a01e:	56                   	push   esi
c000a01f:	53                   	push   ebx
c000a020:	53                   	push   ebx
c000a021:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000a025:	8b 1d 04 93 02 c0    	mov    ebx,DWORD PTR ds:0xc0029304
c000a02b:	c7 86 74 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x174],0x0
c000a035:	85 db                	test   ebx,ebx
c000a037:	74 27                	je     c000a060 <LogicalDisk::mount()+0x42>
c000a039:	51                   	push   ecx
c000a03a:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000a041:	8b 13                	mov    edx,DWORD PTR [ebx]
c000a043:	83 e8 41             	sub    eax,0x41
c000a046:	50                   	push   eax
c000a047:	56                   	push   esi
c000a048:	53                   	push   ebx
c000a049:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000a04c:	83 c4 10             	add    esp,0x10
c000a04f:	84 c0                	test   al,al
c000a051:	74 08                	je     c000a05b <LogicalDisk::mount()+0x3d>
c000a053:	89 9e 74 01 00 00    	mov    DWORD PTR [esi+0x174],ebx
c000a059:	eb 07                	jmp    c000a062 <LogicalDisk::mount()+0x44>
c000a05b:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000a05e:	eb d5                	jmp    c000a035 <LogicalDisk::mount()+0x17>
c000a060:	31 c0                	xor    eax,eax
c000a062:	5a                   	pop    edx
c000a063:	5b                   	pop    ebx
c000a064:	5e                   	pop    esi
c000a065:	c3                   	ret    

c000a066 <LogicalDisk::unmount()>:
c000a066:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a06a:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000a074:	c3                   	ret    
c000a075:	90                   	nop

c000a076 <LogicalDisk::eject()>:
c000a076:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a07a:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000a080:	8b 10                	mov    edx,DWORD PTR [eax]
c000a082:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a086:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000a089:	90                   	nop

c000a08a <LogicalDisk::unassignDriveLetter()>:
c000a08a:	57                   	push   edi
c000a08b:	56                   	push   esi
c000a08c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a090:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000a097:	85 c9                	test   ecx,ecx
c000a099:	75 0f                	jne    c000a0aa <LogicalDisk::unassignDriveLetter()+0x20>
c000a09b:	c7 44 24 0c 54 17 02 c0 	mov    DWORD PTR [esp+0xc],0xc0021754
c000a0a3:	5e                   	pop    esi
c000a0a4:	5f                   	pop    edi
c000a0a5:	e9 7c 4b 00 00       	jmp    c000ec26 <KePanic(char const*)>
c000a0aa:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000a0b1:	83 e9 41             	sub    ecx,0x41
c000a0b4:	b8 01 00 00 00       	mov    eax,0x1
c000a0b9:	c7 04 8d 80 97 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd6880],0x0
c000a0c4:	d3 e0                	shl    eax,cl
c000a0c6:	89 c7                	mov    edi,eax
c000a0c8:	f7 d0                	not    eax
c000a0ca:	c1 ff 1f             	sar    edi,0x1f
c000a0cd:	21 05 60 97 02 c0    	and    DWORD PTR ds:0xc0029760,eax
c000a0d3:	89 fe                	mov    esi,edi
c000a0d5:	f7 d6                	not    esi
c000a0d7:	21 35 64 97 02 c0    	and    DWORD PTR ds:0xc0029764,esi
c000a0dd:	5e                   	pop    esi
c000a0de:	5f                   	pop    edi
c000a0df:	c3                   	ret    

c000a0e0 <LogicalDisk::read(unsigned long long, int, void*)>:
c000a0e0:	57                   	push   edi
c000a0e1:	56                   	push   esi
c000a0e2:	53                   	push   ebx
c000a0e3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000a0e7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000a0eb:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000a0ef:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a0f3:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000a0f9:	77 41                	ja     c000a13c <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000a0fb:	99                   	cdq    
c000a0fc:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000a102:	01 c8                	add    eax,ecx
c000a104:	11 da                	adc    edx,ebx
c000a106:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000a10c:	19 d7                	sbb    edi,edx
c000a10e:	72 33                	jb     c000a143 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000a110:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000a116:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000a11c:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000a120:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000a124:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000a12a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000a130:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a134:	5b                   	pop    ebx
c000a135:	5e                   	pop    esi
c000a136:	5f                   	pop    edi
c000a137:	e9 c4 0a 00 00       	jmp    c000ac00 <VCache::read(unsigned long long, int, void*)>
c000a13c:	b8 05 00 00 00       	mov    eax,0x5
c000a141:	eb 05                	jmp    c000a148 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000a143:	b8 07 00 00 00       	mov    eax,0x7
c000a148:	5b                   	pop    ebx
c000a149:	5e                   	pop    esi
c000a14a:	5f                   	pop    edi
c000a14b:	c3                   	ret    

c000a14c <LogicalDisk::write(unsigned long long, int, void*)>:
c000a14c:	57                   	push   edi
c000a14d:	56                   	push   esi
c000a14e:	53                   	push   ebx
c000a14f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000a153:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000a157:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000a15b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a15f:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000a165:	77 41                	ja     c000a1a8 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000a167:	99                   	cdq    
c000a168:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000a16e:	01 c8                	add    eax,ecx
c000a170:	11 da                	adc    edx,ebx
c000a172:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000a178:	19 d7                	sbb    edi,edx
c000a17a:	72 33                	jb     c000a1af <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000a17c:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000a182:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000a188:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000a18c:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000a190:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000a196:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000a19c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a1a0:	5b                   	pop    ebx
c000a1a1:	5e                   	pop    esi
c000a1a2:	5f                   	pop    edi
c000a1a3:	e9 68 09 00 00       	jmp    c000ab10 <VCache::write(unsigned long long, int, void*)>
c000a1a8:	b8 05 00 00 00       	mov    eax,0x5
c000a1ad:	eb 05                	jmp    c000a1b4 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000a1af:	b8 07 00 00 00       	mov    eax,0x7
c000a1b4:	5b                   	pop    ebx
c000a1b5:	5e                   	pop    esi
c000a1b6:	5f                   	pop    edi
c000a1b7:	c3                   	ret    

c000a1b8 <Mouse::Mouse(char const*)>:
c000a1b8:	83 ec 0c             	sub    esp,0xc
c000a1bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a1bf:	83 ec 08             	sub    esp,0x8
c000a1c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a1c6:	50                   	push   eax
c000a1c7:	e8 d8 ef ff ff       	call   c00091a4 <Device::Device(char const*)>
c000a1cc:	83 c4 10             	add    esp,0x10
c000a1cf:	ba a8 17 02 c0       	mov    edx,0xc00217a8
c000a1d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a1d8:	89 10                	mov    DWORD PTR [eax],edx
c000a1da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a1de:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000a1e8:	90                   	nop
c000a1e9:	83 c4 0c             	add    esp,0xc
c000a1ec:	c3                   	ret    
c000a1ed:	90                   	nop
c000a1ee:	66 90                	xchg   ax,ax

c000a1f0 <Mouse::~Mouse()>:
c000a1f0:	83 ec 0c             	sub    esp,0xc
c000a1f3:	ba a8 17 02 c0       	mov    edx,0xc00217a8
c000a1f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a1fc:	89 10                	mov    DWORD PTR [eax],edx
c000a1fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a202:	83 ec 0c             	sub    esp,0xc
c000a205:	50                   	push   eax
c000a206:	e8 39 ed ff ff       	call   c0008f44 <Device::~Device()>
c000a20b:	83 c4 10             	add    esp,0x10
c000a20e:	90                   	nop
c000a20f:	83 c4 0c             	add    esp,0xc
c000a212:	c3                   	ret    
c000a213:	90                   	nop

c000a214 <Mouse::~Mouse()>:
c000a214:	83 ec 0c             	sub    esp,0xc
c000a217:	83 ec 0c             	sub    esp,0xc
c000a21a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a21e:	e8 cd ff ff ff       	call   c000a1f0 <Mouse::~Mouse()>
c000a223:	83 c4 10             	add    esp,0x10
c000a226:	83 ec 08             	sub    esp,0x8
c000a229:	68 58 01 00 00       	push   0x158
c000a22e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a232:	e8 2c 24 00 00       	call   c000c663 <operator delete(void*, unsigned long)>
c000a237:	83 c4 10             	add    esp,0x10
c000a23a:	83 c4 0c             	add    esp,0xc
c000a23d:	c3                   	ret    

c000a23e <NIC::getMAC()>:
c000a23e:	31 c0                	xor    eax,eax
c000a240:	31 d2                	xor    edx,edx
c000a242:	c3                   	ret    
c000a243:	90                   	nop

c000a244 <NIC::write(int, unsigned char*, int*)>:
c000a244:	b8 01 00 00 00       	mov    eax,0x1
c000a249:	c3                   	ret    

c000a24a <NIC::NIC(char const*)>:
c000a24a:	83 ec 0c             	sub    esp,0xc
c000a24d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a251:	83 ec 08             	sub    esp,0x8
c000a254:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a258:	50                   	push   eax
c000a259:	e8 46 ef ff ff       	call   c00091a4 <Device::Device(char const*)>
c000a25e:	83 c4 10             	add    esp,0x10
c000a261:	ba d4 17 02 c0       	mov    edx,0xc00217d4
c000a266:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a26a:	89 10                	mov    DWORD PTR [eax],edx
c000a26c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a270:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000a27a:	90                   	nop
c000a27b:	83 c4 0c             	add    esp,0xc
c000a27e:	c3                   	ret    
c000a27f:	90                   	nop

c000a280 <NIC::~NIC()>:
c000a280:	83 ec 0c             	sub    esp,0xc
c000a283:	ba d4 17 02 c0       	mov    edx,0xc00217d4
c000a288:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a28c:	89 10                	mov    DWORD PTR [eax],edx
c000a28e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a292:	83 ec 0c             	sub    esp,0xc
c000a295:	50                   	push   eax
c000a296:	e8 a9 ec ff ff       	call   c0008f44 <Device::~Device()>
c000a29b:	83 c4 10             	add    esp,0x10
c000a29e:	90                   	nop
c000a29f:	83 c4 0c             	add    esp,0xc
c000a2a2:	c3                   	ret    
c000a2a3:	90                   	nop

c000a2a4 <NIC::~NIC()>:
c000a2a4:	83 ec 0c             	sub    esp,0xc
c000a2a7:	83 ec 0c             	sub    esp,0xc
c000a2aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2ae:	e8 cd ff ff ff       	call   c000a280 <NIC::~NIC()>
c000a2b3:	83 c4 10             	add    esp,0x10
c000a2b6:	83 ec 08             	sub    esp,0x8
c000a2b9:	68 58 01 00 00       	push   0x158
c000a2be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2c2:	e8 9c 23 00 00       	call   c000c663 <operator delete(void*, unsigned long)>
c000a2c7:	83 c4 10             	add    esp,0x10
c000a2ca:	83 c4 0c             	add    esp,0xc
c000a2cd:	c3                   	ret    

c000a2ce <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000a2ce:	55                   	push   ebp
c000a2cf:	57                   	push   edi
c000a2d0:	56                   	push   esi
c000a2d1:	53                   	push   ebx
c000a2d2:	81 ec 28 01 00 00    	sub    esp,0x128
c000a2d8:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
c000a2df:	8b 94 24 4c 01 00 00 	mov    edx,DWORD PTR [esp+0x14c]
c000a2e6:	8b b4 24 40 01 00 00 	mov    esi,DWORD PTR [esp+0x140]
c000a2ed:	8b bc 24 44 01 00 00 	mov    edi,DWORD PTR [esp+0x144]
c000a2f4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000a2f8:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000a2fc:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000a303:	e8 98 ef ff ff       	call   c00092a0 <Device::getName()>
c000a308:	5a                   	pop    edx
c000a309:	59                   	pop    ecx
c000a30a:	50                   	push   eax
c000a30b:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000a30f:	55                   	push   ebp
c000a310:	e8 3b 63 ff ff       	call   c0000650 <strcpy>
c000a315:	5b                   	pop    ebx
c000a316:	58                   	pop    eax
c000a317:	68 00 18 02 c0       	push   0xc0021800
c000a31c:	55                   	push   ebp
c000a31d:	e8 4e 65 ff ff       	call   c0000870 <strcat>
c000a322:	c7 04 24 78 01 00 00 	mov    DWORD PTR [esp],0x178
c000a329:	e8 a2 45 00 00       	call   c000e8d0 <malloc>
c000a32e:	83 c4 0c             	add    esp,0xc
c000a331:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000a335:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000a339:	89 c3                	mov    ebx,eax
c000a33b:	57                   	push   edi
c000a33c:	56                   	push   esi
c000a33d:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000a344:	55                   	push   ebp
c000a345:	50                   	push   eax
c000a346:	e8 59 fb ff ff       	call   c0009ea4 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000a34b:	83 c4 14             	add    esp,0x14
c000a34e:	53                   	push   ebx
c000a34f:	e8 10 fc ff ff       	call   c0009f64 <LogicalDisk::assignDriveLetter()>
c000a354:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000a357:	e8 c2 fc ff ff       	call   c000a01e <LogicalDisk::mount()>
c000a35c:	58                   	pop    eax
c000a35d:	5a                   	pop    edx
c000a35e:	53                   	push   ebx
c000a35f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000a366:	e8 d7 ec ff ff       	call   c0009042 <Device::addChild(Device*)>
c000a36b:	81 c4 2c 01 00 00    	add    esp,0x12c
c000a371:	5b                   	pop    ebx
c000a372:	5e                   	pop    esi
c000a373:	5f                   	pop    edi
c000a374:	5d                   	pop    ebp
c000a375:	c3                   	ret    

c000a376 <createPartitionsForDisk(PhysicalDisk*)>:
c000a376:	55                   	push   ebp
c000a377:	57                   	push   edi
c000a378:	56                   	push   esi
c000a379:	53                   	push   ebx
c000a37a:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000a380:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000a387:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000a38d:	3d 00 02 00 00       	cmp    eax,0x200
c000a392:	74 27                	je     c000a3bb <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000a394:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000a39a:	83 ec 10             	sub    esp,0x10
c000a39d:	99                   	cdq    
c000a39e:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000a3a4:	52                   	push   edx
c000a3a5:	50                   	push   eax
c000a3a6:	0f a4 f7 0a          	shld   edi,esi,0xa
c000a3aa:	c1 e6 0a             	shl    esi,0xa
c000a3ad:	89 fd                	mov    ebp,edi
c000a3af:	55                   	push   ebp
c000a3b0:	56                   	push   esi
c000a3b1:	e8 9e 56 01 00       	call   c001fa54 <__udivdi3>
c000a3b6:	e9 b9 00 00 00       	jmp    c000a474 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000a3bb:	83 ec 0c             	sub    esp,0xc
c000a3be:	8b 03                	mov    eax,DWORD PTR [ebx]
c000a3c0:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000a3c4:	56                   	push   esi
c000a3c5:	6a 01                	push   0x1
c000a3c7:	6a 00                	push   0x0
c000a3c9:	6a 00                	push   0x0
c000a3cb:	53                   	push   ebx
c000a3cc:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000a3cf:	83 c4 20             	add    esp,0x20
c000a3d2:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000a3da:	75 0a                	jne    c000a3e6 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000a3dc:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000a3e4:	74 2c                	je     c000a412 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000a3e6:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000a3ec:	83 ec 10             	sub    esp,0x10
c000a3ef:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000a3f5:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000a3fb:	89 f7                	mov    edi,esi
c000a3fd:	c1 ff 1f             	sar    edi,0x1f
c000a400:	57                   	push   edi
c000a401:	0f a4 c2 0a          	shld   edx,eax,0xa
c000a405:	56                   	push   esi
c000a406:	c1 e0 0a             	shl    eax,0xa
c000a409:	52                   	push   edx
c000a40a:	50                   	push   eax
c000a40b:	e8 44 56 01 00       	call   c001fa54 <__udivdi3>
c000a410:	eb 62                	jmp    c000a474 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000a412:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000a419:	8a 94 24 1e 02 00 00 	mov    dl,BYTE PTR [esp+0x21e]
c000a420:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000a427:	89 cf                	mov    edi,ecx
c000a429:	83 e2 7f             	and    edx,0x7f
c000a42c:	83 e7 7f             	and    edi,0x7f
c000a42f:	8d 0c 17             	lea    ecx,[edi+edx*1]
c000a432:	83 e0 7f             	and    eax,0x7f
c000a435:	8d 14 01             	lea    edx,[ecx+eax*1]
c000a438:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000a43f:	83 e0 7f             	and    eax,0x7f
c000a442:	01 d0                	add    eax,edx
c000a444:	84 c0                	test   al,al
c000a446:	89 c5                	mov    ebp,eax
c000a448:	74 41                	je     c000a48b <createPartitionsForDisk(PhysicalDisk*)+0x115>
c000a44a:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000a450:	83 ec 10             	sub    esp,0x10
c000a453:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000a459:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000a45f:	89 f7                	mov    edi,esi
c000a461:	c1 ff 1f             	sar    edi,0x1f
c000a464:	57                   	push   edi
c000a465:	0f a4 c2 0a          	shld   edx,eax,0xa
c000a469:	56                   	push   esi
c000a46a:	c1 e0 0a             	shl    eax,0xa
c000a46d:	52                   	push   edx
c000a46e:	50                   	push   eax
c000a46f:	e8 e0 55 01 00       	call   c001fa54 <__udivdi3>
c000a474:	83 c4 14             	add    esp,0x14
c000a477:	52                   	push   edx
c000a478:	50                   	push   eax
c000a479:	6a 00                	push   0x0
c000a47b:	6a 00                	push   0x0
c000a47d:	53                   	push   ebx
c000a47e:	e8 4b fe ff ff       	call   c000a2ce <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000a483:	83 c4 20             	add    esp,0x20
c000a486:	e9 73 01 00 00       	jmp    c000a5fe <createPartitionsForDisk(PhysicalDisk*)+0x288>
c000a48b:	89 f0                	mov    eax,esi
c000a48d:	31 c9                	xor    ecx,ecx
c000a48f:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000a496:	75 02                	jne    c000a49a <createPartitionsForDisk(PhysicalDisk*)+0x124>
c000a498:	89 cd                	mov    ebp,ecx
c000a49a:	c7 44 cc 14 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x14],0x0
c000a4a2:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000a4a9:	83 c0 10             	add    eax,0x10
c000a4ac:	c7 44 cc 34 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x34],0x0
c000a4b4:	0f b6 b0 b8 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b8]
c000a4bb:	c1 e2 08             	shl    edx,0x8
c000a4be:	c1 e6 10             	shl    esi,0x10
c000a4c1:	09 f2                	or     edx,esi
c000a4c3:	0f b6 b0 b6 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b6]
c000a4ca:	09 f2                	or     edx,esi
c000a4cc:	0f b6 b0 b9 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b9]
c000a4d3:	c1 e6 18             	shl    esi,0x18
c000a4d6:	09 f2                	or     edx,esi
c000a4d8:	0f b6 b0 bc 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bc]
c000a4df:	89 54 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],edx
c000a4e3:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000a4ea:	c1 e6 10             	shl    esi,0x10
c000a4ed:	c1 e2 08             	shl    edx,0x8
c000a4f0:	09 f2                	or     edx,esi
c000a4f2:	0f b6 b0 ba 01 00 00 	movzx  esi,BYTE PTR [eax+0x1ba]
c000a4f9:	09 f2                	or     edx,esi
c000a4fb:	0f b6 b0 bd 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bd]
c000a502:	c1 e6 18             	shl    esi,0x18
c000a505:	09 f2                	or     edx,esi
c000a507:	89 54 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],edx
c000a50b:	41                   	inc    ecx
c000a50c:	83 f9 04             	cmp    ecx,0x4
c000a50f:	0f 85 7a ff ff ff    	jne    c000a48f <createPartitionsForDisk(PhysicalDisk*)+0x119>
c000a515:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a519:	83 f0 01             	xor    eax,0x1
c000a51c:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000a520:	75 4f                	jne    c000a571 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000a522:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a526:	83 f0 01             	xor    eax,0x1
c000a529:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000a52d:	75 42                	jne    c000a571 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000a52f:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000a535:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000a53d:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000a543:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000a54b:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000a551:	89 f7                	mov    edi,esi
c000a553:	c1 ff 1f             	sar    edi,0x1f
c000a556:	57                   	push   edi
c000a557:	56                   	push   esi
c000a558:	0f a4 c2 0a          	shld   edx,eax,0xa
c000a55c:	52                   	push   edx
c000a55d:	c1 e0 0a             	shl    eax,0xa
c000a560:	50                   	push   eax
c000a561:	e8 ee 54 01 00       	call   c001fa54 <__udivdi3>
c000a566:	83 c4 10             	add    esp,0x10
c000a569:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a56d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a571:	89 e8                	mov    eax,ebp
c000a573:	0f b6 e8             	movzx  ebp,al
c000a576:	85 ed                	test   ebp,ebp
c000a578:	74 50                	je     c000a5ca <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000a57a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a57e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000a582:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000a586:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000a58a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a58e:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000a592:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a596:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000a59a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a59e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000a5a2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a5a6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a5aa:	89 74 ec 10          	mov    DWORD PTR [esp+ebp*8+0x10],esi
c000a5ae:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000a5b2:	89 7c ec 14          	mov    DWORD PTR [esp+ebp*8+0x14],edi
c000a5b6:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000a5ba:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000a5be:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000a5c2:	89 44 ec 30          	mov    DWORD PTR [esp+ebp*8+0x30],eax
c000a5c6:	89 54 ec 34          	mov    DWORD PTR [esp+ebp*8+0x34],edx
c000a5ca:	31 ed                	xor    ebp,ebp
c000a5cc:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000a5d0:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000a5d4:	89 f8                	mov    eax,edi
c000a5d6:	09 f0                	or     eax,esi
c000a5d8:	74 1e                	je     c000a5f8 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000a5da:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000a5de:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000a5e2:	89 d1                	mov    ecx,edx
c000a5e4:	09 c1                	or     ecx,eax
c000a5e6:	74 10                	je     c000a5f8 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000a5e8:	83 ec 0c             	sub    esp,0xc
c000a5eb:	57                   	push   edi
c000a5ec:	56                   	push   esi
c000a5ed:	52                   	push   edx
c000a5ee:	50                   	push   eax
c000a5ef:	53                   	push   ebx
c000a5f0:	e8 d9 fc ff ff       	call   c000a2ce <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000a5f5:	83 c4 20             	add    esp,0x20
c000a5f8:	45                   	inc    ebp
c000a5f9:	83 fd 04             	cmp    ebp,0x4
c000a5fc:	75 ce                	jne    c000a5cc <createPartitionsForDisk(PhysicalDisk*)+0x256>
c000a5fe:	81 c4 5c 02 00 00    	add    esp,0x25c
c000a604:	5b                   	pop    ebx
c000a605:	5e                   	pop    esi
c000a606:	5f                   	pop    edi
c000a607:	5d                   	pop    ebp
c000a608:	c3                   	ret    
c000a609:	66 90                	xchg   ax,ax
c000a60b:	90                   	nop

c000a60c <Serial::Serial(char const*)>:
c000a60c:	83 ec 0c             	sub    esp,0xc
c000a60f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a613:	83 ec 08             	sub    esp,0x8
c000a616:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a61a:	50                   	push   eax
c000a61b:	e8 84 eb ff ff       	call   c00091a4 <Device::Device(char const*)>
c000a620:	83 c4 10             	add    esp,0x10
c000a623:	ba 14 18 02 c0       	mov    edx,0xc0021814
c000a628:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a62c:	89 10                	mov    DWORD PTR [eax],edx
c000a62e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a632:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000a63c:	90                   	nop
c000a63d:	83 c4 0c             	add    esp,0xc
c000a640:	c3                   	ret    
c000a641:	90                   	nop
c000a642:	66 90                	xchg   ax,ax

c000a644 <Serial::~Serial()>:
c000a644:	83 ec 0c             	sub    esp,0xc
c000a647:	ba 14 18 02 c0       	mov    edx,0xc0021814
c000a64c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a650:	89 10                	mov    DWORD PTR [eax],edx
c000a652:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a656:	83 ec 0c             	sub    esp,0xc
c000a659:	50                   	push   eax
c000a65a:	e8 e5 e8 ff ff       	call   c0008f44 <Device::~Device()>
c000a65f:	83 c4 10             	add    esp,0x10
c000a662:	90                   	nop
c000a663:	83 c4 0c             	add    esp,0xc
c000a666:	c3                   	ret    
c000a667:	90                   	nop

c000a668 <Serial::~Serial()>:
c000a668:	83 ec 0c             	sub    esp,0xc
c000a66b:	83 ec 0c             	sub    esp,0xc
c000a66e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a672:	e8 cd ff ff ff       	call   c000a644 <Serial::~Serial()>
c000a677:	83 c4 10             	add    esp,0x10
c000a67a:	83 ec 08             	sub    esp,0x8
c000a67d:	68 58 01 00 00       	push   0x158
c000a682:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a686:	e8 d8 1f 00 00       	call   c000c663 <operator delete(void*, unsigned long)>
c000a68b:	83 c4 10             	add    esp,0x10
c000a68e:	83 c4 0c             	add    esp,0xc
c000a691:	c3                   	ret    
c000a692:	66 90                	xchg   ax,ax

c000a694 <Timer::Timer(char const*)>:
c000a694:	83 ec 0c             	sub    esp,0xc
c000a697:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a69b:	83 ec 08             	sub    esp,0x8
c000a69e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a6a2:	50                   	push   eax
c000a6a3:	e8 fc ea ff ff       	call   c00091a4 <Device::Device(char const*)>
c000a6a8:	83 c4 10             	add    esp,0x10
c000a6ab:	ba ac 18 02 c0       	mov    edx,0xc00218ac
c000a6b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a6b4:	89 10                	mov    DWORD PTR [eax],edx
c000a6b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a6ba:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000a6c4:	90                   	nop
c000a6c5:	83 c4 0c             	add    esp,0xc
c000a6c8:	c3                   	ret    
c000a6c9:	90                   	nop
c000a6ca:	66 90                	xchg   ax,ax

c000a6cc <Timer::~Timer()>:
c000a6cc:	83 ec 0c             	sub    esp,0xc
c000a6cf:	ba ac 18 02 c0       	mov    edx,0xc00218ac
c000a6d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a6d8:	89 10                	mov    DWORD PTR [eax],edx
c000a6da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a6de:	83 ec 0c             	sub    esp,0xc
c000a6e1:	50                   	push   eax
c000a6e2:	e8 5d e8 ff ff       	call   c0008f44 <Device::~Device()>
c000a6e7:	83 c4 10             	add    esp,0x10
c000a6ea:	90                   	nop
c000a6eb:	83 c4 0c             	add    esp,0xc
c000a6ee:	c3                   	ret    
c000a6ef:	90                   	nop

c000a6f0 <Timer::~Timer()>:
c000a6f0:	83 ec 0c             	sub    esp,0xc
c000a6f3:	83 ec 0c             	sub    esp,0xc
c000a6f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a6fa:	e8 cd ff ff ff       	call   c000a6cc <Timer::~Timer()>
c000a6ff:	83 c4 10             	add    esp,0x10
c000a702:	83 ec 08             	sub    esp,0x8
c000a705:	68 5c 01 00 00       	push   0x15c
c000a70a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a70e:	e8 50 1f 00 00       	call   c000c663 <operator delete(void*, unsigned long)>
c000a713:	83 c4 10             	add    esp,0x10
c000a716:	83 c4 0c             	add    esp,0xc
c000a719:	c3                   	ret    

c000a71a <Timer::read()>:
c000a71a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a71e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000a724:	c3                   	ret    

c000a725 <setupTimer(int)>:
c000a725:	53                   	push   ebx
c000a726:	83 ec 14             	sub    esp,0x14
c000a729:	68 5c 01 00 00       	push   0x15c
c000a72e:	e8 9d 41 00 00       	call   c000e8d0 <malloc>
c000a733:	89 04 24             	mov    DWORD PTR [esp],eax
c000a736:	89 c3                	mov    ebx,eax
c000a738:	e8 9b 4b 01 00       	call   c001f2d8 <PIT::PIT()>
c000a73d:	58                   	pop    eax
c000a73e:	5a                   	pop    edx
c000a73f:	53                   	push   ebx
c000a740:	ff 35 70 9d 02 c0    	push   DWORD PTR ds:0xc0029d70
c000a746:	e8 f7 e8 ff ff       	call   c0009042 <Device::addChild(Device*)>
c000a74b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000a74d:	6a 00                	push   0x0
c000a74f:	6a 00                	push   0x0
c000a751:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000a755:	53                   	push   ebx
c000a756:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000a759:	83 c4 28             	add    esp,0x28
c000a75c:	89 d8                	mov    eax,ebx
c000a75e:	5b                   	pop    ebx
c000a75f:	c3                   	ret    

c000a760 <timerHandler(unsigned int)>:
c000a760:	57                   	push   edi
c000a761:	56                   	push   esi
c000a762:	53                   	push   ebx
c000a763:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000a767:	01 3d ec 97 02 c0    	add    DWORD PTR ds:0xc00297ec,edi
c000a76d:	80 3d 75 9d 02 c0 00 	cmp    BYTE PTR ds:0xc0029d75,0x0
c000a774:	0f 84 46 01 00 00    	je     c000a8c0 <timerHandler(unsigned int)+0x160>
c000a77a:	fa                   	cli    
c000a77b:	ff 05 b0 c6 02 c0    	inc    DWORD PTR ds:0xc002c6b0
c000a781:	83 ec 0c             	sub    esp,0xc
c000a784:	68 c0 c6 02 c0       	push   0xc002c6c0
c000a789:	ff 05 ac c6 02 c0    	inc    DWORD PTR ds:0xc002c6ac
c000a78f:	e8 58 56 01 00       	call   c001fdec <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000a794:	83 c4 10             	add    esp,0x10
c000a797:	84 c0                	test   al,al
c000a799:	0f 85 a1 00 00 00    	jne    c000a840 <timerHandler(unsigned int)+0xe0>
c000a79f:	83 ec 0c             	sub    esp,0xc
c000a7a2:	68 c0 c6 02 c0       	push   0xc002c6c0
c000a7a7:	e8 5c 56 01 00       	call   c001fe08 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000a7ac:	83 c4 10             	add    esp,0x10
c000a7af:	89 c6                	mov    esi,eax
c000a7b1:	8d 76 00             	lea    esi,[esi+0x0]
c000a7b4:	83 ec 0c             	sub    esp,0xc
c000a7b7:	68 c0 c6 02 c0       	push   0xc002c6c0
c000a7bc:	e8 47 56 01 00       	call   c001fe08 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000a7c1:	c7 04 24 c0 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6c0
c000a7c8:	89 c3                	mov    ebx,eax
c000a7ca:	e8 41 56 01 00       	call   c001fe10 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000a7cf:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000a7d2:	83 c4 10             	add    esp,0x10
c000a7d5:	3b 05 ec 97 02 c0    	cmp    eax,DWORD PTR ds:0xc00297ec
c000a7db:	77 23                	ja     c000a800 <timerHandler(unsigned int)+0xa0>
c000a7dd:	83 ec 0c             	sub    esp,0xc
c000a7e0:	53                   	push   ebx
c000a7e1:	e8 f6 ae 00 00       	call   c00156dc <unblockTask(ThreadControlBlock*)>
c000a7e6:	83 c4 10             	add    esp,0x10
c000a7e9:	39 de                	cmp    esi,ebx
c000a7eb:	75 27                	jne    c000a814 <timerHandler(unsigned int)+0xb4>
c000a7ed:	83 ec 0c             	sub    esp,0xc
c000a7f0:	68 c0 c6 02 c0       	push   0xc002c6c0
c000a7f5:	e8 0e 56 01 00       	call   c001fe08 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000a7fa:	89 c6                	mov    esi,eax
c000a7fc:	eb 12                	jmp    c000a810 <timerHandler(unsigned int)+0xb0>
c000a7fe:	66 90                	xchg   ax,ax
c000a800:	50                   	push   eax
c000a801:	50                   	push   eax
c000a802:	53                   	push   ebx
c000a803:	68 c0 c6 02 c0       	push   0xc002c6c0
c000a808:	e8 bf 56 01 00       	call   c001fecc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000a80d:	8d 76 00             	lea    esi,[esi+0x0]
c000a810:	83 c4 10             	add    esp,0x10
c000a813:	90                   	nop
c000a814:	83 ec 0c             	sub    esp,0xc
c000a817:	68 c0 c6 02 c0       	push   0xc002c6c0
c000a81c:	e8 cb 55 01 00       	call   c001fdec <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000a821:	83 c4 10             	add    esp,0x10
c000a824:	84 c0                	test   al,al
c000a826:	75 18                	jne    c000a840 <timerHandler(unsigned int)+0xe0>
c000a828:	83 ec 0c             	sub    esp,0xc
c000a82b:	68 c0 c6 02 c0       	push   0xc002c6c0
c000a830:	e8 d3 55 01 00       	call   c001fe08 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000a835:	83 c4 10             	add    esp,0x10
c000a838:	39 f0                	cmp    eax,esi
c000a83a:	0f 85 74 ff ff ff    	jne    c000a7b4 <timerHandler(unsigned int)+0x54>
c000a840:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a845:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c000a849:	74 3d                	je     c000a888 <timerHandler(unsigned int)+0x128>
c000a84b:	80 3d 74 9d 02 c0 00 	cmp    BYTE PTR ds:0xc0029d74,0x0
c000a852:	74 34                	je     c000a888 <timerHandler(unsigned int)+0x128>
c000a854:	fa                   	cli    
c000a855:	ff 05 b0 c6 02 c0    	inc    DWORD PTR ds:0xc002c6b0
c000a85b:	8b 15 ec 97 02 c0    	mov    edx,DWORD PTR ds:0xc00297ec
c000a861:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a866:	29 78 34             	sub    DWORD PTR [eax+0x34],edi
c000a869:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a86e:	39 50 34             	cmp    DWORD PTR [eax+0x34],edx
c000a871:	77 05                	ja     c000a878 <timerHandler(unsigned int)+0x118>
c000a873:	e8 78 ab 00 00       	call   c00153f0 <schedule()>
c000a878:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000a87d:	48                   	dec    eax
c000a87e:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c000a883:	75 03                	jne    c000a888 <timerHandler(unsigned int)+0x128>
c000a885:	fb                   	sti    
c000a886:	66 90                	xchg   ax,ax
c000a888:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c000a88d:	48                   	dec    eax
c000a88e:	a3 ac c6 02 c0       	mov    ds:0xc002c6ac,eax
c000a893:	75 1b                	jne    c000a8b0 <timerHandler(unsigned int)+0x150>
c000a895:	83 3d a8 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6a8,0x0
c000a89c:	74 12                	je     c000a8b0 <timerHandler(unsigned int)+0x150>
c000a89e:	c7 05 a8 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6a8,0x0
c000a8a8:	e8 43 ab 00 00       	call   c00153f0 <schedule()>
c000a8ad:	8d 76 00             	lea    esi,[esi+0x0]
c000a8b0:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000a8b5:	48                   	dec    eax
c000a8b6:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c000a8bb:	75 03                	jne    c000a8c0 <timerHandler(unsigned int)+0x160>
c000a8bd:	fb                   	sti    
c000a8be:	66 90                	xchg   ax,ax
c000a8c0:	5b                   	pop    ebx
c000a8c1:	5e                   	pop    esi
c000a8c2:	5f                   	pop    edi
c000a8c3:	c3                   	ret    

c000a8c4 <VCache::VCache(PhysicalDisk*)>:
c000a8c4:	53                   	push   ebx
c000a8c5:	83 ec 18             	sub    esp,0x18
c000a8c8:	ba dc 18 02 c0       	mov    edx,0xc00218dc
c000a8cd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a8d1:	89 10                	mov    DWORD PTR [eax],edx
c000a8d3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a8d7:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000a8de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a8e2:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000a8e9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a8ed:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000a8f4:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000a8fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a8ff:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000a906:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000a90d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a911:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000a918:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a91c:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000a920:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a924:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000a92b:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000a932:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a936:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000a93a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a93e:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000a942:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a946:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000a94a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a94e:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000a955:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000a95d:	83 ec 0c             	sub    esp,0xc
c000a960:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a964:	e8 67 3f 00 00       	call   c000e8d0 <malloc>
c000a969:	83 c4 10             	add    esp,0x10
c000a96c:	89 c3                	mov    ebx,eax
c000a96e:	83 ec 0c             	sub    esp,0xc
c000a971:	53                   	push   ebx
c000a972:	e8 95 42 00 00       	call   c000ec0c <Mutex::Mutex()>
c000a977:	83 c4 10             	add    esp,0x10
c000a97a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a97e:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000a981:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a985:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000a989:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000a98c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a990:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000a997:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a99b:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000a9a1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a9a5:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a9a8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a9ac:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000a9b2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a9b8:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a9bc:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000a9bf:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000a9c2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a9c6:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000a9ca:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a9ce:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000a9d4:	05 00 02 00 00       	add    eax,0x200
c000a9d9:	c1 e0 03             	shl    eax,0x3
c000a9dc:	83 ec 0c             	sub    esp,0xc
c000a9df:	50                   	push   eax
c000a9e0:	e8 eb 3e 00 00       	call   c000e8d0 <malloc>
c000a9e5:	83 c4 10             	add    esp,0x10
c000a9e8:	89 c2                	mov    edx,eax
c000a9ea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a9ee:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000a9f1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a9f5:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000a9fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000aa00:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000aa04:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000aa08:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000aa0e:	89 d0                	mov    eax,edx
c000aa10:	c1 e0 02             	shl    eax,0x2
c000aa13:	01 d0                	add    eax,edx
c000aa15:	c1 e0 04             	shl    eax,0x4
c000aa18:	83 ec 0c             	sub    esp,0xc
c000aa1b:	50                   	push   eax
c000aa1c:	e8 af 3e 00 00       	call   c000e8d0 <malloc>
c000aa21:	83 c4 10             	add    esp,0x10
c000aa24:	89 c2                	mov    edx,eax
c000aa26:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000aa2a:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000aa2d:	90                   	nop
c000aa2e:	83 c4 18             	add    esp,0x18
c000aa31:	5b                   	pop    ebx
c000aa32:	c3                   	ret    
c000aa33:	90                   	nop

c000aa34 <VCache::invalidateReadBuffer()>:
c000aa34:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000aa38:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000aa3e:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000aa42:	c3                   	ret    
c000aa43:	90                   	nop

c000aa44 <VCache::writeWriteBuffer()>:
c000aa44:	53                   	push   ebx
c000aa45:	83 ec 08             	sub    esp,0x8
c000aa48:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000aa4c:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000aa50:	74 1e                	je     c000aa70 <VCache::writeWriteBuffer()+0x2c>
c000aa52:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000aa55:	83 ec 0c             	sub    esp,0xc
c000aa58:	8b 10                	mov    edx,DWORD PTR [eax]
c000aa5a:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000aa5d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000aa60:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000aa63:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000aa66:	50                   	push   eax
c000aa67:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000aa6a:	83 c4 20             	add    esp,0x20
c000aa6d:	8d 76 00             	lea    esi,[esi+0x0]
c000aa70:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000aa77:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000aa7e:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000aa82:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000aa89:	83 c4 08             	add    esp,0x8
c000aa8c:	5b                   	pop    ebx
c000aa8d:	c3                   	ret    
c000aa8e:	66 90                	xchg   ax,ax

c000aa90 <VCache::~VCache()>:
c000aa90:	83 ec 0c             	sub    esp,0xc
c000aa93:	ba dc 18 02 c0       	mov    edx,0xc00218dc
c000aa98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa9c:	89 10                	mov    DWORD PTR [eax],edx
c000aa9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aaa2:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000aaa5:	0f b6 c0             	movzx  eax,al
c000aaa8:	85 c0                	test   eax,eax
c000aaaa:	74 10                	je     c000aabc <VCache::~VCache()+0x2c>
c000aaac:	83 ec 0c             	sub    esp,0xc
c000aaaf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aab3:	e8 8c ff ff ff       	call   c000aa44 <VCache::writeWriteBuffer()>
c000aab8:	83 c4 10             	add    esp,0x10
c000aabb:	90                   	nop
c000aabc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aac0:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000aac3:	83 ec 0c             	sub    esp,0xc
c000aac6:	50                   	push   eax
c000aac7:	e8 14 3e 00 00       	call   c000e8e0 <free>
c000aacc:	83 c4 10             	add    esp,0x10
c000aacf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aad3:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000aad6:	83 ec 0c             	sub    esp,0xc
c000aad9:	50                   	push   eax
c000aada:	e8 01 3e 00 00       	call   c000e8e0 <free>
c000aadf:	83 c4 10             	add    esp,0x10
c000aae2:	90                   	nop
c000aae3:	83 c4 0c             	add    esp,0xc
c000aae6:	c3                   	ret    
c000aae7:	90                   	nop

c000aae8 <VCache::~VCache()>:
c000aae8:	83 ec 0c             	sub    esp,0xc
c000aaeb:	83 ec 0c             	sub    esp,0xc
c000aaee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aaf2:	e8 99 ff ff ff       	call   c000aa90 <VCache::~VCache()>
c000aaf7:	83 c4 10             	add    esp,0x10
c000aafa:	83 ec 08             	sub    esp,0x8
c000aafd:	6a 44                	push   0x44
c000aaff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab03:	e8 5b 1b 00 00       	call   c000c663 <operator delete(void*, unsigned long)>
c000ab08:	83 c4 10             	add    esp,0x10
c000ab0b:	83 c4 0c             	add    esp,0xc
c000ab0e:	c3                   	ret    
c000ab0f:	90                   	nop

c000ab10 <VCache::write(unsigned long long, int, void*)>:
c000ab10:	55                   	push   ebp
c000ab11:	57                   	push   edi
c000ab12:	56                   	push   esi
c000ab13:	53                   	push   ebx
c000ab14:	83 ec 1c             	sub    esp,0x1c
c000ab17:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000ab1b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000ab1f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000ab23:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000ab27:	e8 30 a6 00 00       	call   c001515c <KeDisablePreemption()>
c000ab2c:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000ab30:	74 0e                	je     c000ab40 <VCache::write(unsigned long long, int, void*)+0x30>
c000ab32:	83 ec 0c             	sub    esp,0xc
c000ab35:	53                   	push   ebx
c000ab36:	e8 f9 fe ff ff       	call   c000aa34 <VCache::invalidateReadBuffer()>
c000ab3b:	83 c4 10             	add    esp,0x10
c000ab3e:	66 90                	xchg   ax,ax
c000ab40:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000ab44:	74 5e                	je     c000aba4 <VCache::write(unsigned long long, int, void*)+0x94>
c000ab46:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000ab49:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ab4d:	99                   	cdq    
c000ab4e:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c000ab51:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c000ab54:	89 c1                	mov    ecx,eax
c000ab56:	31 f1                	xor    ecx,esi
c000ab58:	89 d0                	mov    eax,edx
c000ab5a:	31 f8                	xor    eax,edi
c000ab5c:	09 c1                	or     ecx,eax
c000ab5e:	75 38                	jne    c000ab98 <VCache::write(unsigned long long, int, void*)+0x88>
c000ab60:	83 fd 01             	cmp    ebp,0x1
c000ab63:	75 33                	jne    c000ab98 <VCache::write(unsigned long long, int, void*)+0x88>
c000ab65:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000ab68:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000ab6c:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000ab70:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000ab76:	0f af f9             	imul   edi,ecx
c000ab79:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c000ab7c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ab7e:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000ab81:	40                   	inc    eax
c000ab82:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000ab85:	83 f8 50             	cmp    eax,0x50
c000ab88:	75 66                	jne    c000abf0 <VCache::write(unsigned long long, int, void*)+0xe0>
c000ab8a:	83 ec 0c             	sub    esp,0xc
c000ab8d:	53                   	push   ebx
c000ab8e:	e8 b1 fe ff ff       	call   c000aa44 <VCache::writeWriteBuffer()>
c000ab93:	83 c4 10             	add    esp,0x10
c000ab96:	eb 58                	jmp    c000abf0 <VCache::write(unsigned long long, int, void*)+0xe0>
c000ab98:	83 ec 0c             	sub    esp,0xc
c000ab9b:	53                   	push   ebx
c000ab9c:	e8 a3 fe ff ff       	call   c000aa44 <VCache::writeWriteBuffer()>
c000aba1:	83 c4 10             	add    esp,0x10
c000aba4:	83 fd 4f             	cmp    ebp,0x4f
c000aba7:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000abaa:	7f 20                	jg     c000abcc <VCache::write(unsigned long long, int, void*)+0xbc>
c000abac:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c000abaf:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000abb3:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c000abb6:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000abb9:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c000abbc:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c000abc0:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000abc6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000abc8:	eb 26                	jmp    c000abf0 <VCache::write(unsigned long long, int, void*)+0xe0>
c000abca:	66 90                	xchg   ax,ax
c000abcc:	83 ec 0c             	sub    esp,0xc
c000abcf:	8b 10                	mov    edx,DWORD PTR [eax]
c000abd1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000abd5:	55                   	push   ebp
c000abd6:	57                   	push   edi
c000abd7:	56                   	push   esi
c000abd8:	50                   	push   eax
c000abd9:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000abdc:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000abe0:	83 c4 20             	add    esp,0x20
c000abe3:	e8 9c a5 00 00       	call   c0015184 <KeRestorePreemption()>
c000abe8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000abec:	eb 0a                	jmp    c000abf8 <VCache::write(unsigned long long, int, void*)+0xe8>
c000abee:	66 90                	xchg   ax,ax
c000abf0:	e8 8f a5 00 00       	call   c0015184 <KeRestorePreemption()>
c000abf5:	31 c0                	xor    eax,eax
c000abf7:	90                   	nop
c000abf8:	83 c4 1c             	add    esp,0x1c
c000abfb:	5b                   	pop    ebx
c000abfc:	5e                   	pop    esi
c000abfd:	5f                   	pop    edi
c000abfe:	5d                   	pop    ebp
c000abff:	c3                   	ret    

c000ac00 <VCache::read(unsigned long long, int, void*)>:
c000ac00:	55                   	push   ebp
c000ac01:	57                   	push   edi
c000ac02:	56                   	push   esi
c000ac03:	53                   	push   ebx
c000ac04:	83 ec 1c             	sub    esp,0x1c
c000ac07:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000ac0b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ac0f:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000ac13:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000ac17:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c000ac1b:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac1e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac22:	e8 35 a5 00 00       	call   c001515c <KeDisablePreemption()>
c000ac27:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000ac2b:	74 0f                	je     c000ac3c <VCache::read(unsigned long long, int, void*)+0x3c>
c000ac2d:	83 ec 0c             	sub    esp,0xc
c000ac30:	53                   	push   ebx
c000ac31:	e8 0e fe ff ff       	call   c000aa44 <VCache::writeWriteBuffer()>
c000ac36:	83 c4 10             	add    esp,0x10
c000ac39:	8d 76 00             	lea    esi,[esi+0x0]
c000ac3c:	83 fe 01             	cmp    esi,0x1
c000ac3f:	0f 85 8b 00 00 00    	jne    c000acd0 <VCache::read(unsigned long long, int, void*)+0xd0>
c000ac45:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000ac48:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c000ac4f:	75 7f                	jne    c000acd0 <VCache::read(unsigned long long, int, void*)+0xd0>
c000ac51:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c000ac54:	89 d1                	mov    ecx,edx
c000ac56:	f7 d9                	neg    ecx
c000ac58:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000ac5c:	89 cf                	mov    edi,ecx
c000ac5e:	23 0c 24             	and    ecx,DWORD PTR [esp]
c000ac61:	c1 ff 1f             	sar    edi,0x1f
c000ac64:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000ac68:	89 ce                	mov    esi,ecx
c000ac6a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ac6e:	23 4c 24 04          	and    ecx,DWORD PTR [esp+0x4]
c000ac72:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000ac76:	89 cf                	mov    edi,ecx
c000ac78:	74 32                	je     c000acac <VCache::read(unsigned long long, int, void*)+0xac>
c000ac7a:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c000ac7d:	75 2d                	jne    c000acac <VCache::read(unsigned long long, int, void*)+0xac>
c000ac7f:	39 73 30             	cmp    DWORD PTR [ebx+0x30],esi
c000ac82:	75 28                	jne    c000acac <VCache::read(unsigned long long, int, void*)+0xac>
c000ac84:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000ac87:	89 ef                	mov    edi,ebp
c000ac89:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000ac8f:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ac92:	8d 70 ff             	lea    esi,[eax-0x1]
c000ac95:	23 34 24             	and    esi,DWORD PTR [esp]
c000ac98:	0f af f1             	imul   esi,ecx
c000ac9b:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c000ac9e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000aca0:	e8 df a4 00 00       	call   c0015184 <KeRestorePreemption()>
c000aca5:	31 c0                	xor    eax,eax
c000aca7:	eb 57                	jmp    c000ad00 <VCache::read(unsigned long long, int, void*)+0x100>
c000aca9:	8d 76 00             	lea    esi,[esi+0x0]
c000acac:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c000acb0:	83 ec 0c             	sub    esp,0xc
c000acb3:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c000acb6:	89 7b 34             	mov    DWORD PTR [ebx+0x34],edi
c000acb9:	8b 08                	mov    ecx,DWORD PTR [eax]
c000acbb:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000acbe:	52                   	push   edx
c000acbf:	57                   	push   edi
c000acc0:	56                   	push   esi
c000acc1:	50                   	push   eax
c000acc2:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c000acc5:	83 c4 20             	add    esp,0x20
c000acc8:	85 c0                	test   eax,eax
c000acca:	75 34                	jne    c000ad00 <VCache::read(unsigned long long, int, void*)+0x100>
c000accc:	eb b6                	jmp    c000ac84 <VCache::read(unsigned long long, int, void*)+0x84>
c000acce:	66 90                	xchg   ax,ax
c000acd0:	83 ec 0c             	sub    esp,0xc
c000acd3:	53                   	push   ebx
c000acd4:	e8 5b fd ff ff       	call   c000aa34 <VCache::invalidateReadBuffer()>
c000acd9:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000acdc:	8b 10                	mov    edx,DWORD PTR [eax]
c000acde:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ace1:	56                   	push   esi
c000ace2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ace6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000acea:	50                   	push   eax
c000aceb:	ff 52 28             	call   DWORD PTR [edx+0x28]
c000acee:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000acf2:	83 c4 20             	add    esp,0x20
c000acf5:	e8 8a a4 00 00       	call   c0015184 <KeRestorePreemption()>
c000acfa:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000acfd:	8d 76 00             	lea    esi,[esi+0x0]
c000ad00:	83 c4 1c             	add    esp,0x1c
c000ad03:	5b                   	pop    ebx
c000ad04:	5e                   	pop    esi
c000ad05:	5f                   	pop    edi
c000ad06:	5d                   	pop    ebp
c000ad07:	c3                   	ret    

c000ad08 <Video::putrect(int, int, int, int, unsigned int)>:
c000ad08:	55                   	push   ebp
c000ad09:	57                   	push   edi
c000ad0a:	56                   	push   esi
c000ad0b:	53                   	push   ebx
c000ad0c:	83 ec 1c             	sub    esp,0x1c
c000ad0f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000ad13:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ad17:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000ad1b:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000ad1f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000ad23:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ad27:	01 df                	add    edi,ebx
c000ad29:	39 fb                	cmp    ebx,edi
c000ad2b:	7d 1f                	jge    c000ad4c <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000ad2d:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000ad31:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000ad35:	7d 12                	jge    c000ad49 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000ad37:	8b 16                	mov    edx,DWORD PTR [esi]
c000ad39:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ad3d:	53                   	push   ebx
c000ad3e:	55                   	push   ebp
c000ad3f:	45                   	inc    ebp
c000ad40:	56                   	push   esi
c000ad41:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000ad44:	83 c4 10             	add    esp,0x10
c000ad47:	eb e8                	jmp    c000ad31 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000ad49:	43                   	inc    ebx
c000ad4a:	eb dd                	jmp    c000ad29 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000ad4c:	83 c4 1c             	add    esp,0x1c
c000ad4f:	5b                   	pop    ebx
c000ad50:	5e                   	pop    esi
c000ad51:	5f                   	pop    edi
c000ad52:	5d                   	pop    ebp
c000ad53:	c3                   	ret    

c000ad54 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000ad54:	55                   	push   ebp
c000ad55:	57                   	push   edi
c000ad56:	31 ff                	xor    edi,edi
c000ad58:	56                   	push   esi
c000ad59:	53                   	push   ebx
c000ad5a:	83 ec 1c             	sub    esp,0x1c
c000ad5d:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000ad61:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000ad65:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000ad6c:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000ad71:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ad75:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000ad79:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000ad7d:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000ad80:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000ad84:	01 f9                	add    ecx,edi
c000ad86:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000ad8a:	7d 2f                	jge    c000adbb <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000ad8c:	31 f6                	xor    esi,esi
c000ad8e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000ad92:	01 f2                	add    edx,esi
c000ad94:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000ad98:	7d 1a                	jge    c000adb4 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000ad9a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ad9d:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000ada0:	46                   	inc    esi
c000ada1:	51                   	push   ecx
c000ada2:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000ada6:	52                   	push   edx
c000ada7:	55                   	push   ebp
c000ada8:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000adab:	83 c4 10             	add    esp,0x10
c000adae:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000adb2:	eb da                	jmp    c000ad8e <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000adb4:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000adb8:	47                   	inc    edi
c000adb9:	eb c5                	jmp    c000ad80 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000adbb:	83 c4 1c             	add    esp,0x1c
c000adbe:	5b                   	pop    ebx
c000adbf:	5e                   	pop    esi
c000adc0:	5f                   	pop    edi
c000adc1:	5d                   	pop    ebp
c000adc2:	c3                   	ret    
c000adc3:	90                   	nop

c000adc4 <Video::blit(unsigned int*, int, int, int, int)>:
c000adc4:	55                   	push   ebp
c000adc5:	ba 00 00 00 00       	mov    edx,0x0
c000adca:	57                   	push   edi
c000adcb:	56                   	push   esi
c000adcc:	53                   	push   ebx
c000adcd:	83 ec 1c             	sub    esp,0x1c
c000add0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000add4:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000add8:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000addc:	85 c0                	test   eax,eax
c000adde:	0f 49 d0             	cmovns edx,eax
c000ade1:	8d 1c 95 00 00 00 00 	lea    ebx,[edx*4+0x0]
c000ade8:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000adec:	89 eb                	mov    ebx,ebp
c000adee:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000adf2:	01 ea                	add    edx,ebp
c000adf4:	39 da                	cmp    edx,ebx
c000adf6:	7e 54                	jle    c000ae4c <Video::blit(unsigned int*, int, int, int, int)+0x88>
c000adf8:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000adfe:	7c 4c                	jl     c000ae4c <Video::blit(unsigned int*, int, int, int, int)+0x88>
c000ae00:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000ae04:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000ae08:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000ae0c:	01 c1                	add    ecx,eax
c000ae0e:	39 f9                	cmp    ecx,edi
c000ae10:	7e 2f                	jle    c000ae41 <Video::blit(unsigned int*, int, int, int, int)+0x7d>
c000ae12:	83 c2 04             	add    edx,0x4
c000ae15:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000ae1b:	7c 21                	jl     c000ae3e <Video::blit(unsigned int*, int, int, int, int)+0x7a>
c000ae1d:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000ae21:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000ae23:	ff 72 fc             	push   DWORD PTR [edx-0x4]
c000ae26:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000ae2a:	55                   	push   ebp
c000ae2b:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000ae2f:	56                   	push   esi
c000ae30:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000ae33:	83 c4 10             	add    esp,0x10
c000ae36:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ae3a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ae3e:	47                   	inc    edi
c000ae3f:	eb c7                	jmp    c000ae08 <Video::blit(unsigned int*, int, int, int, int)+0x44>
c000ae41:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000ae45:	43                   	inc    ebx
c000ae46:	01 7c 24 34          	add    DWORD PTR [esp+0x34],edi
c000ae4a:	eb a2                	jmp    c000adee <Video::blit(unsigned int*, int, int, int, int)+0x2a>
c000ae4c:	83 c4 1c             	add    esp,0x1c
c000ae4f:	5b                   	pop    ebx
c000ae50:	5e                   	pop    esi
c000ae51:	5f                   	pop    edi
c000ae52:	5d                   	pop    ebp
c000ae53:	c3                   	ret    

c000ae54 <Video::clearScreen(unsigned int)>:
c000ae54:	57                   	push   edi
c000ae55:	56                   	push   esi
c000ae56:	53                   	push   ebx
c000ae57:	31 db                	xor    ebx,ebx
c000ae59:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ae5d:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000ae63:	7e 1f                	jle    c000ae84 <Video::clearScreen(unsigned int)+0x30>
c000ae65:	31 ff                	xor    edi,edi
c000ae67:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000ae6d:	7e 12                	jle    c000ae81 <Video::clearScreen(unsigned int)+0x2d>
c000ae6f:	8b 06                	mov    eax,DWORD PTR [esi]
c000ae71:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae75:	53                   	push   ebx
c000ae76:	57                   	push   edi
c000ae77:	47                   	inc    edi
c000ae78:	56                   	push   esi
c000ae79:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ae7c:	83 c4 10             	add    esp,0x10
c000ae7f:	eb e6                	jmp    c000ae67 <Video::clearScreen(unsigned int)+0x13>
c000ae81:	43                   	inc    ebx
c000ae82:	eb d9                	jmp    c000ae5d <Video::clearScreen(unsigned int)+0x9>
c000ae84:	5b                   	pop    ebx
c000ae85:	5e                   	pop    esi
c000ae86:	5f                   	pop    edi
c000ae87:	c3                   	ret    

c000ae88 <Video::putpixel(int, int, unsigned int)>:
c000ae88:	c7 44 24 04 e4 18 02 c0 	mov    DWORD PTR [esp+0x4],0xc00218e4
c000ae90:	e9 91 3d 00 00       	jmp    c000ec26 <KePanic(char const*)>
c000ae95:	90                   	nop

c000ae96 <Video::readPixelApprox(int, int)>:
c000ae96:	83 ec 18             	sub    esp,0x18
c000ae99:	68 05 19 02 c0       	push   0xc0021905
c000ae9e:	e8 83 3d 00 00       	call   c000ec26 <KePanic(char const*)>
c000aea3:	31 c0                	xor    eax,eax
c000aea5:	83 c4 1c             	add    esp,0x1c
c000aea8:	c3                   	ret    
c000aea9:	90                   	nop

c000aeaa <Video::Video(char const*)>:
c000aeaa:	83 ec 0c             	sub    esp,0xc
c000aead:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aeb1:	83 ec 08             	sub    esp,0x8
c000aeb4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aeb8:	50                   	push   eax
c000aeb9:	e8 e6 e2 ff ff       	call   c00091a4 <Device::Device(char const*)>
c000aebe:	83 c4 10             	add    esp,0x10
c000aec1:	ba a8 19 02 c0       	mov    edx,0xc00219a8
c000aec6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aeca:	89 10                	mov    DWORD PTR [eax],edx
c000aecc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aed0:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000aeda:	90                   	nop
c000aedb:	83 c4 0c             	add    esp,0xc
c000aede:	c3                   	ret    
c000aedf:	90                   	nop

c000aee0 <Video::~Video()>:
c000aee0:	83 ec 0c             	sub    esp,0xc
c000aee3:	ba a8 19 02 c0       	mov    edx,0xc00219a8
c000aee8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aeec:	89 10                	mov    DWORD PTR [eax],edx
c000aeee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aef2:	83 ec 0c             	sub    esp,0xc
c000aef5:	50                   	push   eax
c000aef6:	e8 49 e0 ff ff       	call   c0008f44 <Device::~Device()>
c000aefb:	83 c4 10             	add    esp,0x10
c000aefe:	90                   	nop
c000aeff:	83 c4 0c             	add    esp,0xc
c000af02:	c3                   	ret    
c000af03:	90                   	nop

c000af04 <Video::~Video()>:
c000af04:	83 ec 0c             	sub    esp,0xc
c000af07:	83 ec 0c             	sub    esp,0xc
c000af0a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000af0e:	e8 cd ff ff ff       	call   c000aee0 <Video::~Video()>
c000af13:	83 c4 10             	add    esp,0x10
c000af16:	83 ec 08             	sub    esp,0x8
c000af19:	68 64 01 00 00       	push   0x164
c000af1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000af22:	e8 3c 17 00 00       	call   c000c663 <operator delete(void*, unsigned long)>
c000af27:	83 c4 10             	add    esp,0x10
c000af2a:	83 c4 0c             	add    esp,0xc
c000af2d:	c3                   	ret    

c000af2e <Video::isMonochrome()>:
c000af2e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000af32:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000af38:	c3                   	ret    
c000af39:	90                   	nop

c000af3a <Video::getWidth()>:
c000af3a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000af3e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000af44:	c3                   	ret    
c000af45:	90                   	nop

c000af46 <Video::getHeight()>:
c000af46:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000af4a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000af50:	c3                   	ret    
c000af51:	90                   	nop

c000af52 <Video::drawCursor(int, int, unsigned int*, int)>:
c000af52:	55                   	push   ebp
c000af53:	57                   	push   edi
c000af54:	56                   	push   esi
c000af55:	53                   	push   ebx
c000af56:	83 ec 2c             	sub    esp,0x2c
c000af59:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000af5d:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000af61:	83 f8 01             	cmp    eax,0x1
c000af64:	19 c9                	sbb    ecx,ecx
c000af66:	31 db                	xor    ebx,ebx
c000af68:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000af6c:	89 ce                	mov    esi,ecx
c000af6e:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000af76:	f7 d6                	not    esi
c000af78:	81 e6 ff ff ff 00    	and    esi,0xffffff
c000af7e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000af82:	01 d8                	add    eax,ebx
c000af84:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000af88:	57                   	push   edi
c000af89:	e8 b8 ff ff ff       	call   c000af46 <Video::getHeight()>
c000af8e:	59                   	pop    ecx
c000af8f:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000af93:	7e 70                	jle    c000b005 <Video::drawCursor(int, int, unsigned int*, int)+0xb3>
c000af95:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000af99:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c000af9d:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000afa0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000afa4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000afa8:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000afaf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000afb3:	89 e8                	mov    eax,ebp
c000afb5:	83 c0 20             	add    eax,0x20
c000afb8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000afbc:	57                   	push   edi
c000afbd:	e8 78 ff ff ff       	call   c000af3a <Video::getWidth()>
c000afc2:	5a                   	pop    edx
c000afc3:	39 c5                	cmp    ebp,eax
c000afc5:	7d 34                	jge    c000affb <Video::drawCursor(int, int, unsigned int*, int)+0xa9>
c000afc7:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000afcc:	74 05                	je     c000afd3 <Video::drawCursor(int, int, unsigned int*, int)+0x81>
c000afce:	8b 07                	mov    eax,DWORD PTR [edi]
c000afd0:	56                   	push   esi
c000afd1:	eb 0d                	jmp    c000afe0 <Video::drawCursor(int, int, unsigned int*, int)+0x8e>
c000afd3:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000afd8:	74 12                	je     c000afec <Video::drawCursor(int, int, unsigned int*, int)+0x9a>
c000afda:	8b 07                	mov    eax,DWORD PTR [edi]
c000afdc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000afe0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000afe4:	55                   	push   ebp
c000afe5:	57                   	push   edi
c000afe6:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000afe9:	83 c4 10             	add    esp,0x10
c000afec:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000aff0:	45                   	inc    ebp
c000aff1:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000aff5:	3b 6c 24 1c          	cmp    ebp,DWORD PTR [esp+0x1c]
c000aff9:	75 c1                	jne    c000afbc <Video::drawCursor(int, int, unsigned int*, int)+0x6a>
c000affb:	43                   	inc    ebx
c000affc:	83 fb 20             	cmp    ebx,0x20
c000afff:	0f 85 79 ff ff ff    	jne    c000af7e <Video::drawCursor(int, int, unsigned int*, int)+0x2c>
c000b005:	83 c4 2c             	add    esp,0x2c
c000b008:	5b                   	pop    ebx
c000b009:	5e                   	pop    esi
c000b00a:	5f                   	pop    edi
c000b00b:	5d                   	pop    ebp
c000b00c:	c3                   	ret    
c000b00d:	90                   	nop

c000b00e <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000b00e:	55                   	push   ebp
c000b00f:	57                   	push   edi
c000b010:	56                   	push   esi
c000b011:	53                   	push   ebx
c000b012:	83 ec 48             	sub    esp,0x48
c000b015:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000b019:	0f b6 43 0d          	movzx  eax,BYTE PTR [ebx+0xd]
c000b01d:	0f b6 53 0c          	movzx  edx,BYTE PTR [ebx+0xc]
c000b021:	c1 e0 08             	shl    eax,0x8
c000b024:	01 d0                	add    eax,edx
c000b026:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c000b02a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b02e:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c000b032:	c1 e0 08             	shl    eax,0x8
c000b035:	01 d0                	add    eax,edx
c000b037:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b03b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b03f:	0f af 44 24 14       	imul   eax,DWORD PTR [esp+0x14]
c000b044:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000b048:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000b04c:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000b053:	50                   	push   eax
c000b054:	e8 77 38 00 00       	call   c000e8d0 <malloc>
c000b059:	83 c4 10             	add    esp,0x10
c000b05c:	85 c0                	test   eax,eax
c000b05e:	89 c5                	mov    ebp,eax
c000b060:	75 10                	jne    c000b072 <Video::tgaParse(unsigned char*, int, int*, int*)+0x64>
c000b062:	83 ec 0c             	sub    esp,0xc
c000b065:	68 30 19 02 c0       	push   0xc0021930
c000b06a:	e8 b7 3b 00 00       	call   c000ec26 <KePanic(char const*)>
c000b06f:	83 c4 10             	add    esp,0x10
c000b072:	52                   	push   edx
c000b073:	bf 12 00 00 00       	mov    edi,0x12
c000b078:	52                   	push   edx
c000b079:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000b07d:	50                   	push   eax
c000b07e:	68 40 19 02 c0       	push   0xc0021940
c000b083:	e8 c6 be ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000b088:	8a 43 11             	mov    al,BYTE PTR [ebx+0x11]
c000b08b:	83 e0 20             	and    eax,0x20
c000b08e:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c000b092:	85 c0                	test   eax,eax
c000b094:	59                   	pop    ecx
c000b095:	0f 94 c0             	sete   al
c000b098:	0f b6 c0             	movzx  eax,al
c000b09b:	5e                   	pop    esi
c000b09c:	50                   	push   eax
c000b09d:	68 4a 19 02 c0       	push   0xc002194a
c000b0a2:	e8 a7 be ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000b0a7:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000b0ab:	83 c4 10             	add    esp,0x10
c000b0ae:	85 c0                	test   eax,eax
c000b0b0:	89 c2                	mov    edx,eax
c000b0b2:	74 11                	je     c000b0c5 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb7>
c000b0b4:	0f b6 7b 07          	movzx  edi,BYTE PTR [ebx+0x7]
c000b0b8:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000b0bc:	c1 ff 03             	sar    edi,0x3
c000b0bf:	0f af f9             	imul   edi,ecx
c000b0c2:	83 c7 12             	add    edi,0x12
c000b0c5:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c000b0ca:	74 07                	je     c000b0d3 <Video::tgaParse(unsigned char*, int, int*, int*)+0xc5>
c000b0cc:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000b0d1:	75 12                	jne    c000b0e5 <Video::tgaParse(unsigned char*, int, int*, int*)+0xd7>
c000b0d3:	83 ec 0c             	sub    esp,0xc
c000b0d6:	68 58 19 02 c0       	push   0xc0021958
c000b0db:	e8 6e be ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000b0e0:	e9 aa 02 00 00       	jmp    c000b38f <Video::tgaParse(unsigned char*, int, int*, int*)+0x381>
c000b0e5:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000b0e9:	83 f9 02             	cmp    ecx,0x2
c000b0ec:	74 0e                	je     c000b0fc <Video::tgaParse(unsigned char*, int, int*, int*)+0xee>
c000b0ee:	83 f9 0a             	cmp    ecx,0xa
c000b0f1:	0f 84 d1 00 00 00    	je     c000b1c8 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1ba>
c000b0f7:	e9 7e 02 00 00       	jmp    c000b37a <Video::tgaParse(unsigned char*, int, int*, int*)+0x36c>
c000b0fc:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000b101:	75 0e                	jne    c000b111 <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c000b103:	84 d2                	test   dl,dl
c000b105:	75 0a                	jne    c000b111 <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c000b107:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000b10a:	83 e8 18             	sub    eax,0x18
c000b10d:	a8 f7                	test   al,0xf7
c000b10f:	74 0d                	je     c000b11e <Video::tgaParse(unsigned char*, int, int*, int*)+0x110>
c000b111:	83 ec 0c             	sub    esp,0xc
c000b114:	68 6d 19 02 c0       	push   0xc002196d
c000b119:	e9 64 02 00 00       	jmp    c000b382 <Video::tgaParse(unsigned char*, int, int*, int*)+0x374>
c000b11e:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000b126:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c000b12b:	31 c0                	xor    eax,eax
c000b12d:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000b131:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000b139:	89 c6                	mov    esi,eax
c000b13b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000b140:	75 15                	jne    c000b157 <Video::tgaParse(unsigned char*, int, int*, int*)+0x149>
c000b142:	99                   	cdq    
c000b143:	f7 7c 24 04          	idiv   DWORD PTR [esp+0x4]
c000b147:	85 d2                	test   edx,edx
c000b149:	75 0c                	jne    c000b157 <Video::tgaParse(unsigned char*, int, int*, int*)+0x149>
c000b14b:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000b14f:	29 c6                	sub    esi,eax
c000b151:	4e                   	dec    esi
c000b152:	0f af 74 24 04       	imul   esi,DWORD PTR [esp+0x4]
c000b157:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000b15b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000b163:	75 0c                	jne    c000b171 <Video::tgaParse(unsigned char*, int, int*, int*)+0x163>
c000b165:	0f b6 54 3b 03       	movzx  edx,BYTE PTR [ebx+edi*1+0x3]
c000b16a:	c1 e2 18             	shl    edx,0x18
c000b16d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b171:	0f b6 4c 3b 02       	movzx  ecx,BYTE PTR [ebx+edi*1+0x2]
c000b176:	8d 46 01             	lea    eax,[esi+0x1]
c000b179:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c000b17d:	c1 e1 10             	shl    ecx,0x10
c000b180:	89 ca                	mov    edx,ecx
c000b182:	0f b6 4c 3b 01       	movzx  ecx,BYTE PTR [ebx+edi*1+0x1]
c000b187:	c1 e1 08             	shl    ecx,0x8
c000b18a:	09 d1                	or     ecx,edx
c000b18c:	0f b6 14 3b          	movzx  edx,BYTE PTR [ebx+edi*1]
c000b190:	09 d1                	or     ecx,edx
c000b192:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c000b196:	89 4c b5 00          	mov    DWORD PTR [ebp+esi*4+0x0],ecx
c000b19a:	0f b6 53 10          	movzx  edx,BYTE PTR [ebx+0x10]
c000b19e:	c1 fa 03             	sar    edx,0x3
c000b1a1:	01 d7                	add    edi,edx
c000b1a3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b1a7:	39 54 24 04          	cmp    DWORD PTR [esp+0x4],edx
c000b1ab:	7e 04                	jle    c000b1b1 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1a3>
c000b1ad:	89 c6                	mov    esi,eax
c000b1af:	eb 8a                	jmp    c000b13b <Video::tgaParse(unsigned char*, int, int*, int*)+0x12d>
c000b1b1:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000b1b5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000b1b9:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c000b1bd:	0f 8f 6e ff ff ff    	jg     c000b131 <Video::tgaParse(unsigned char*, int, int*, int*)+0x123>
c000b1c3:	e9 ce 01 00 00       	jmp    c000b396 <Video::tgaParse(unsigned char*, int, int*, int*)+0x388>
c000b1c8:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000b1cd:	75 0e                	jne    c000b1dd <Video::tgaParse(unsigned char*, int, int*, int*)+0x1cf>
c000b1cf:	85 c0                	test   eax,eax
c000b1d1:	75 0a                	jne    c000b1dd <Video::tgaParse(unsigned char*, int, int*, int*)+0x1cf>
c000b1d3:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000b1d6:	83 e8 18             	sub    eax,0x18
c000b1d9:	a8 f7                	test   al,0xf7
c000b1db:	74 0d                	je     c000b1ea <Video::tgaParse(unsigned char*, int, int*, int*)+0x1dc>
c000b1dd:	83 ec 0c             	sub    esp,0xc
c000b1e0:	68 7b 19 02 c0       	push   0xc002197b
c000b1e5:	e9 98 01 00 00       	jmp    c000b382 <Video::tgaParse(unsigned char*, int, int*, int*)+0x374>
c000b1ea:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000b1f2:	31 c9                	xor    ecx,ecx
c000b1f4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000b1fc:	3b 7c 24 58          	cmp    edi,DWORD PTR [esp+0x58]
c000b200:	0f 8d 90 01 00 00    	jge    c000b396 <Video::tgaParse(unsigned char*, int, int*, int*)+0x388>
c000b206:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b20a:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c000b20e:	0f 8e 82 01 00 00    	jle    c000b396 <Video::tgaParse(unsigned char*, int, int*, int*)+0x388>
c000b214:	0f b6 14 3b          	movzx  edx,BYTE PTR [ebx+edi*1]
c000b218:	8d 77 01             	lea    esi,[edi+0x1]
c000b21b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b21f:	83 fa 7f             	cmp    edx,0x7f
c000b222:	89 d0                	mov    eax,edx
c000b224:	0f 8e a3 00 00 00    	jle    c000b2cd <Video::tgaParse(unsigned char*, int, int*, int*)+0x2bf>
c000b22a:	83 e0 7f             	and    eax,0x7f
c000b22d:	31 d2                	xor    edx,edx
c000b22f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b233:	40                   	inc    eax
c000b234:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000b238:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b23c:	75 08                	jne    c000b246 <Video::tgaParse(unsigned char*, int, int*, int*)+0x238>
c000b23e:	0f b6 54 3b 04       	movzx  edx,BYTE PTR [ebx+edi*1+0x4]
c000b243:	c1 e2 18             	shl    edx,0x18
c000b246:	0f b6 44 3b 03       	movzx  eax,BYTE PTR [ebx+edi*1+0x3]
c000b24b:	c1 e0 10             	shl    eax,0x10
c000b24e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000b252:	0f b6 44 3b 02       	movzx  eax,BYTE PTR [ebx+edi*1+0x2]
c000b257:	0f b6 3c 33          	movzx  edi,BYTE PTR [ebx+esi*1]
c000b25b:	c1 e0 08             	shl    eax,0x8
c000b25e:	0b 44 24 24          	or     eax,DWORD PTR [esp+0x24]
c000b262:	09 f8                	or     eax,edi
c000b264:	31 ff                	xor    edi,edi
c000b266:	09 d0                	or     eax,edx
c000b268:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000b26c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c000b271:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b275:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000b27a:	75 1d                	jne    c000b299 <Video::tgaParse(unsigned char*, int, int*, int*)+0x28b>
c000b27c:	89 c8                	mov    eax,ecx
c000b27e:	99                   	cdq    
c000b27f:	f7 7c 24 04          	idiv   DWORD PTR [esp+0x4]
c000b283:	85 d2                	test   edx,edx
c000b285:	75 12                	jne    c000b299 <Video::tgaParse(unsigned char*, int, int*, int*)+0x28b>
c000b287:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000b28b:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c000b28f:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000b293:	49                   	dec    ecx
c000b294:	0f af 4c 24 04       	imul   ecx,DWORD PTR [esp+0x4]
c000b299:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b29d:	8d 51 01             	lea    edx,[ecx+0x1]
c000b2a0:	39 7c 24 18          	cmp    DWORD PTR [esp+0x18],edi
c000b2a4:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c000b2a8:	8d 47 01             	lea    eax,[edi+0x1]
c000b2ab:	7e 06                	jle    c000b2b3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2a5>
c000b2ad:	89 c7                	mov    edi,eax
c000b2af:	89 d1                	mov    ecx,edx
c000b2b1:	eb c2                	jmp    c000b275 <Video::tgaParse(unsigned char*, int, int*, int*)+0x267>
c000b2b3:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000b2b7:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000b2bb:	01 7c 24 10          	add    DWORD PTR [esp+0x10],edi
c000b2bf:	c1 f8 03             	sar    eax,0x3
c000b2c2:	01 c6                	add    esi,eax
c000b2c4:	89 d1                	mov    ecx,edx
c000b2c6:	89 f7                	mov    edi,esi
c000b2c8:	e9 2f ff ff ff       	jmp    c000b1fc <Video::tgaParse(unsigned char*, int, int*, int*)+0x1ee>
c000b2cd:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000b2d5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b2d9:	40                   	inc    eax
c000b2da:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2de:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c000b2e3:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000b2e7:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c000b2ec:	75 1d                	jne    c000b30b <Video::tgaParse(unsigned char*, int, int*, int*)+0x2fd>
c000b2ee:	89 c8                	mov    eax,ecx
c000b2f0:	99                   	cdq    
c000b2f1:	f7 7c 24 04          	idiv   DWORD PTR [esp+0x4]
c000b2f5:	85 d2                	test   edx,edx
c000b2f7:	75 12                	jne    c000b30b <Video::tgaParse(unsigned char*, int, int*, int*)+0x2fd>
c000b2f9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000b2fd:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c000b301:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000b305:	49                   	dec    ecx
c000b306:	0f af 4c 24 04       	imul   ecx,DWORD PTR [esp+0x4]
c000b30b:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000b30f:	c7 44 24 24 00 00 00 ff 	mov    DWORD PTR [esp+0x24],0xff000000
c000b317:	75 0c                	jne    c000b325 <Video::tgaParse(unsigned char*, int, int*, int*)+0x317>
c000b319:	0f b6 7c 33 03       	movzx  edi,BYTE PTR [ebx+esi*1+0x3]
c000b31e:	c1 e7 18             	shl    edi,0x18
c000b321:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000b325:	0f b6 44 33 02       	movzx  eax,BYTE PTR [ebx+esi*1+0x2]
c000b32a:	8d 51 01             	lea    edx,[ecx+0x1]
c000b32d:	c1 e0 10             	shl    eax,0x10
c000b330:	89 c7                	mov    edi,eax
c000b332:	0f b6 44 33 01       	movzx  eax,BYTE PTR [ebx+esi*1+0x1]
c000b337:	c1 e0 08             	shl    eax,0x8
c000b33a:	09 f8                	or     eax,edi
c000b33c:	0f b6 3c 33          	movzx  edi,BYTE PTR [ebx+esi*1]
c000b340:	09 f8                	or     eax,edi
c000b342:	0b 44 24 24          	or     eax,DWORD PTR [esp+0x24]
c000b346:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c000b34a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000b34e:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000b352:	c1 f8 03             	sar    eax,0x3
c000b355:	01 c6                	add    esi,eax
c000b357:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b35b:	40                   	inc    eax
c000b35c:	39 4c 24 18          	cmp    DWORD PTR [esp+0x18],ecx
c000b360:	7e 0b                	jle    c000b36d <Video::tgaParse(unsigned char*, int, int*, int*)+0x35f>
c000b362:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b366:	89 d1                	mov    ecx,edx
c000b368:	e9 7a ff ff ff       	jmp    c000b2e7 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2d9>
c000b36d:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000b371:	01 7c 24 10          	add    DWORD PTR [esp+0x10],edi
c000b375:	e9 4a ff ff ff       	jmp    c000b2c4 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2b6>
c000b37a:	50                   	push   eax
c000b37b:	50                   	push   eax
c000b37c:	51                   	push   ecx
c000b37d:	68 8a 19 02 c0       	push   0xc002198a
c000b382:	e8 c7 bb ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000b387:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b38a:	e8 51 35 00 00       	call   c000e8e0 <free>
c000b38f:	83 c4 10             	add    esp,0x10
c000b392:	31 ed                	xor    ebp,ebp
c000b394:	eb 14                	jmp    c000b3aa <Video::tgaParse(unsigned char*, int, int*, int*)+0x39c>
c000b396:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000b39a:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c000b39e:	89 18                	mov    DWORD PTR [eax],ebx
c000b3a0:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000b3a4:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000b3a8:	89 18                	mov    DWORD PTR [eax],ebx
c000b3aa:	83 c4 3c             	add    esp,0x3c
c000b3ad:	89 e8                	mov    eax,ebp
c000b3af:	5b                   	pop    ebx
c000b3b0:	5e                   	pop    esi
c000b3b1:	5f                   	pop    edi
c000b3b2:	5d                   	pop    ebp
c000b3b3:	c3                   	ret    

c000b3b4 <Video::putTGA(int, int, unsigned char*, int)>:
c000b3b4:	55                   	push   ebp
c000b3b5:	57                   	push   edi
c000b3b6:	56                   	push   esi
c000b3b7:	53                   	push   ebx
c000b3b8:	83 ec 28             	sub    esp,0x28
c000b3bb:	8d 44 24 18          	lea    eax,[esp+0x18]
c000b3bf:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000b3c3:	50                   	push   eax
c000b3c4:	8d 44 24 18          	lea    eax,[esp+0x18]
c000b3c8:	50                   	push   eax
c000b3c9:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000b3cd:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000b3d1:	55                   	push   ebp
c000b3d2:	e8 37 fc ff ff       	call   c000b00e <Video::tgaParse(unsigned char*, int, int*, int*)>
c000b3d7:	83 c4 20             	add    esp,0x20
c000b3da:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000b3de:	85 c0                	test   eax,eax
c000b3e0:	74 3b                	je     c000b41d <Video::putTGA(int, int, unsigned char*, int)+0x69>
c000b3e2:	89 c6                	mov    esi,eax
c000b3e4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000b3e8:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000b3ec:	39 d8                	cmp    eax,ebx
c000b3ee:	7e 2d                	jle    c000b41d <Video::putTGA(int, int, unsigned char*, int)+0x69>
c000b3f0:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b3f4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b3f8:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000b3fc:	39 f8                	cmp    eax,edi
c000b3fe:	7e 1a                	jle    c000b41a <Video::putTGA(int, int, unsigned char*, int)+0x66>
c000b400:	83 c6 04             	add    esi,0x4
c000b403:	8b 46 fc             	mov    eax,DWORD PTR [esi-0x4]
c000b406:	85 c0                	test   eax,eax
c000b408:	79 0d                	jns    c000b417 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000b40a:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c000b40d:	50                   	push   eax
c000b40e:	53                   	push   ebx
c000b40f:	57                   	push   edi
c000b410:	55                   	push   ebp
c000b411:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000b414:	83 c4 10             	add    esp,0x10
c000b417:	47                   	inc    edi
c000b418:	eb da                	jmp    c000b3f4 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000b41a:	43                   	inc    ebx
c000b41b:	eb c7                	jmp    c000b3e4 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000b41d:	83 c4 1c             	add    esp,0x1c
c000b420:	5b                   	pop    ebx
c000b421:	5e                   	pop    esi
c000b422:	5f                   	pop    edi
c000b423:	5d                   	pop    ebp
c000b424:	c3                   	ret    
c000b425:	66 90                	xchg   ax,ax
c000b427:	90                   	nop

c000b428 <ACPI::close(int, int, void*)>:
c000b428:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000b42d:	c3                   	ret    
c000b42e:	66 90                	xchg   ax,ax

c000b430 <loadACPITables(unsigned char*)>:
c000b430:	57                   	push   edi
c000b431:	56                   	push   esi
c000b432:	53                   	push   ebx
c000b433:	83 ec 60             	sub    esp,0x60
c000b436:	83 7c 24 70 00       	cmp    DWORD PTR [esp+0x70],0x0
c000b43b:	0f 84 43 02 00 00    	je     c000b684 <loadACPITables(unsigned char*)+0x254>
c000b441:	a0 20 9a 02 c0       	mov    al,ds:0xc0029a20
c000b446:	0f b6 c0             	movzx  eax,al
c000b449:	85 c0                	test   eax,eax
c000b44b:	74 7b                	je     c000b4c8 <loadACPITables(unsigned char*)+0x98>
c000b44d:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000b451:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000b455:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000b459:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b45c:	83 e8 24             	sub    eax,0x24
c000b45f:	c1 e8 03             	shr    eax,0x3
c000b462:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000b466:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000b46e:	66 90                	xchg   ax,ax
c000b470:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000b474:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000b478:	0f 8d ba 00 00 00    	jge    c000b538 <loadACPITables(unsigned char*)+0x108>
c000b47e:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000b482:	83 c0 24             	add    eax,0x24
c000b485:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000b489:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000b48d:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000b491:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000b495:	c1 e0 03             	shl    eax,0x3
c000b498:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000b49c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000b4a0:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000b4a3:	8b 00                	mov    eax,DWORD PTR [eax]
c000b4a5:	89 c1                	mov    ecx,eax
c000b4a7:	a1 00 98 02 c0       	mov    eax,ds:0xc0029800
c000b4ac:	8d 50 01             	lea    edx,[eax+0x1]
c000b4af:	89 15 00 98 02 c0    	mov    DWORD PTR ds:0xc0029800,edx
c000b4b5:	89 ca                	mov    edx,ecx
c000b4b7:	89 14 c5 24 98 02 c0 	mov    DWORD PTR [eax*8-0x3ffd67dc],edx
c000b4be:	83 44 24 5c 01       	add    DWORD PTR [esp+0x5c],0x1
c000b4c3:	eb ab                	jmp    c000b470 <loadACPITables(unsigned char*)+0x40>
c000b4c5:	8d 76 00             	lea    esi,[esi+0x0]
c000b4c8:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000b4cc:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000b4d0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000b4d4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b4d7:	83 e8 24             	sub    eax,0x24
c000b4da:	c1 e8 02             	shr    eax,0x2
c000b4dd:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000b4e1:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000b4e9:	8d 76 00             	lea    esi,[esi+0x0]
c000b4ec:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000b4f0:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000b4f4:	7d 42                	jge    c000b538 <loadACPITables(unsigned char*)+0x108>
c000b4f6:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000b4fa:	83 c0 24             	add    eax,0x24
c000b4fd:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b501:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000b505:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000b509:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000b50d:	c1 e0 02             	shl    eax,0x2
c000b510:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000b514:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b518:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b51a:	a1 00 98 02 c0       	mov    eax,ds:0xc0029800
c000b51f:	8d 50 01             	lea    edx,[eax+0x1]
c000b522:	89 15 00 98 02 c0    	mov    DWORD PTR ds:0xc0029800,edx
c000b528:	89 ca                	mov    edx,ecx
c000b52a:	89 14 c5 24 98 02 c0 	mov    DWORD PTR [eax*8-0x3ffd67dc],edx
c000b531:	83 44 24 58 01       	add    DWORD PTR [esp+0x58],0x1
c000b536:	eb b4                	jmp    c000b4ec <loadACPITables(unsigned char*)+0xbc>
c000b538:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000b540:	a1 00 98 02 c0       	mov    eax,ds:0xc0029800
c000b545:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000b549:	0f 8d 39 01 00 00    	jge    c000b688 <loadACPITables(unsigned char*)+0x258>
c000b54f:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000b553:	8b 04 c5 24 98 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd67dc]
c000b55a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000b55e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b562:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000b566:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b56a:	25 ff 0f 00 00       	and    eax,0xfff
c000b56f:	89 c6                	mov    esi,eax
c000b571:	8b 1d d0 be 02 c0    	mov    ebx,DWORD PTR ds:0xc002bed0
c000b577:	83 ec 0c             	sub    esp,0xc
c000b57a:	6a 01                	push   0x1
c000b57c:	e8 0a 6a 00 00       	call   c0011f8b <Virt::allocateKernelVirtualPages(int)>
c000b581:	83 c4 10             	add    esp,0x10
c000b584:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000b588:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000b58e:	83 ec 0c             	sub    esp,0xc
c000b591:	6a 01                	push   0x1
c000b593:	6a 01                	push   0x1
c000b595:	50                   	push   eax
c000b596:	52                   	push   edx
c000b597:	53                   	push   ebx
c000b598:	e8 c7 72 00 00       	call   c0012864 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000b59d:	83 c4 20             	add    esp,0x20
c000b5a0:	09 f0                	or     eax,esi
c000b5a2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000b5a6:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000b5aa:	c1 e0 03             	shl    eax,0x3
c000b5ad:	05 20 98 02 c0       	add    eax,0xc0029820
c000b5b2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b5b6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b5ba:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b5be:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000b5c6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b5ca:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b5ce:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b5d2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000b5d6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b5da:	89 c6                	mov    esi,eax
c000b5dc:	89 d7                	mov    edi,edx
c000b5de:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b5e0:	89 c8                	mov    eax,ecx
c000b5e2:	89 fa                	mov    edx,edi
c000b5e4:	89 f3                	mov    ebx,esi
c000b5e6:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000b5ea:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000b5ee:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b5f2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b5f6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b5f9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b5fd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000b601:	05 00 10 00 00       	add    eax,0x1000
c000b606:	c1 e8 0c             	shr    eax,0xc
c000b609:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000b60d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b611:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b615:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b619:	25 ff 0f 00 00       	and    eax,0xfff
c000b61e:	89 c6                	mov    esi,eax
c000b620:	8b 1d d0 be 02 c0    	mov    ebx,DWORD PTR ds:0xc002bed0
c000b626:	83 ec 0c             	sub    esp,0xc
c000b629:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b62d:	e8 59 69 00 00       	call   c0011f8b <Virt::allocateKernelVirtualPages(int)>
c000b632:	83 c4 10             	add    esp,0x10
c000b635:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000b639:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000b63f:	83 ec 0c             	sub    esp,0xc
c000b642:	6a 01                	push   0x1
c000b644:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b648:	50                   	push   eax
c000b649:	52                   	push   edx
c000b64a:	53                   	push   ebx
c000b64b:	e8 14 72 00 00       	call   c0012864 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000b650:	83 c4 20             	add    esp,0x20
c000b653:	09 f0                	or     eax,esi
c000b655:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000b659:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b65d:	83 ec 0c             	sub    esp,0xc
c000b660:	50                   	push   eax
c000b661:	e8 23 6c 00 00       	call   c0012289 <Virt::freeKernelVirtualPages(unsigned long)>
c000b666:	83 c4 10             	add    esp,0x10
c000b669:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000b66d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000b671:	89 14 c5 24 98 02 c0 	mov    DWORD PTR [eax*8-0x3ffd67dc],edx
c000b678:	83 44 24 54 01       	add    DWORD PTR [esp+0x54],0x1
c000b67d:	e9 be fe ff ff       	jmp    c000b540 <loadACPITables(unsigned char*)+0x110>
c000b682:	66 90                	xchg   ax,ax
c000b684:	90                   	nop
c000b685:	8d 76 00             	lea    esi,[esi+0x0]
c000b688:	83 c4 60             	add    esp,0x60
c000b68b:	5b                   	pop    ebx
c000b68c:	5e                   	pop    esi
c000b68d:	5f                   	pop    edi
c000b68e:	c3                   	ret    
c000b68f:	90                   	nop

c000b690 <findRSDT(unsigned char*)>:
c000b690:	57                   	push   edi
c000b691:	56                   	push   esi
c000b692:	53                   	push   ebx
c000b693:	83 ec 50             	sub    esp,0x50
c000b696:	a1 28 9a 02 c0       	mov    eax,ds:0xc0029a28
c000b69b:	85 c0                	test   eax,eax
c000b69d:	75 0d                	jne    c000b6ac <findRSDT(unsigned char*)+0x1c>
c000b69f:	b8 00 00 00 00       	mov    eax,0x0
c000b6a4:	e9 2b 01 00 00       	jmp    c000b7d4 <findRSDT(unsigned char*)+0x144>
c000b6a9:	8d 76 00             	lea    esi,[esi+0x0]
c000b6ac:	89 e0                	mov    eax,esp
c000b6ae:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000b6b2:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000b6b6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b6ba:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000b6c2:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b6c6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000b6ca:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000b6ce:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000b6d2:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000b6d6:	89 c6                	mov    esi,eax
c000b6d8:	89 d7                	mov    edi,edx
c000b6da:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b6dc:	89 c8                	mov    eax,ecx
c000b6de:	89 fa                	mov    edx,edi
c000b6e0:	89 f3                	mov    ebx,esi
c000b6e2:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000b6e6:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000b6ea:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000b6ee:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000b6f2:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000b6f6:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000b6fe:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b702:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000b706:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000b70a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b70e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000b712:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000b716:	25 ff 0f 00 00       	and    eax,0xfff
c000b71b:	89 c6                	mov    esi,eax
c000b71d:	8b 1d d0 be 02 c0    	mov    ebx,DWORD PTR ds:0xc002bed0
c000b723:	83 ec 0c             	sub    esp,0xc
c000b726:	6a 02                	push   0x2
c000b728:	e8 5e 68 00 00       	call   c0011f8b <Virt::allocateKernelVirtualPages(int)>
c000b72d:	83 c4 10             	add    esp,0x10
c000b730:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000b734:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000b73a:	83 ec 0c             	sub    esp,0xc
c000b73d:	6a 01                	push   0x1
c000b73f:	6a 02                	push   0x2
c000b741:	50                   	push   eax
c000b742:	52                   	push   edx
c000b743:	53                   	push   ebx
c000b744:	e8 1b 71 00 00       	call   c0012864 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000b749:	83 c4 20             	add    esp,0x20
c000b74c:	09 f0                	or     eax,esi
c000b74e:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000b752:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000b756:	25 ff 0f 00 00       	and    eax,0xfff
c000b75b:	89 c6                	mov    esi,eax
c000b75d:	8b 1d d0 be 02 c0    	mov    ebx,DWORD PTR ds:0xc002bed0
c000b763:	83 ec 0c             	sub    esp,0xc
c000b766:	6a 02                	push   0x2
c000b768:	e8 1e 68 00 00       	call   c0011f8b <Virt::allocateKernelVirtualPages(int)>
c000b76d:	83 c4 10             	add    esp,0x10
c000b770:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000b774:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000b77a:	83 ec 0c             	sub    esp,0xc
c000b77d:	6a 01                	push   0x1
c000b77f:	6a 02                	push   0x2
c000b781:	50                   	push   eax
c000b782:	52                   	push   edx
c000b783:	53                   	push   ebx
c000b784:	e8 db 70 00 00       	call   c0012864 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000b789:	83 c4 20             	add    esp,0x20
c000b78c:	09 f0                	or     eax,esi
c000b78e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000b792:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000b797:	85 c0                	test   eax,eax
c000b799:	75 11                	jne    c000b7ac <findRSDT(unsigned char*)+0x11c>
c000b79b:	c6 05 20 9a 02 c0 00 	mov    BYTE PTR ds:0xc0029a20,0x0
c000b7a2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000b7a6:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000b7aa:	eb 24                	jmp    c000b7d0 <findRSDT(unsigned char*)+0x140>
c000b7ac:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000b7b1:	83 f8 02             	cmp    eax,0x2
c000b7b4:	75 12                	jne    c000b7c8 <findRSDT(unsigned char*)+0x138>
c000b7b6:	c6 05 20 9a 02 c0 01 	mov    BYTE PTR ds:0xc0029a20,0x1
c000b7bd:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000b7c1:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000b7c5:	eb 09                	jmp    c000b7d0 <findRSDT(unsigned char*)+0x140>
c000b7c7:	90                   	nop
c000b7c8:	b8 00 00 00 00       	mov    eax,0x0
c000b7cd:	eb 05                	jmp    c000b7d4 <findRSDT(unsigned char*)+0x144>
c000b7cf:	90                   	nop
c000b7d0:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000b7d4:	83 c4 50             	add    esp,0x50
c000b7d7:	5b                   	pop    ebx
c000b7d8:	5e                   	pop    esi
c000b7d9:	5f                   	pop    edi
c000b7da:	c3                   	ret    
c000b7db:	90                   	nop

c000b7dc <findDataTable(unsigned char*, char*)>:
c000b7dc:	83 ec 1c             	sub    esp,0x1c
c000b7df:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c000b7e4:	75 0a                	jne    c000b7f0 <findDataTable(unsigned char*, char*)+0x14>
c000b7e6:	b8 00 00 00 00       	mov    eax,0x0
c000b7eb:	eb 5f                	jmp    c000b84c <findDataTable(unsigned char*, char*)+0x70>
c000b7ed:	8d 76 00             	lea    esi,[esi+0x0]
c000b7f0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000b7f8:	a1 00 98 02 c0       	mov    eax,ds:0xc0029800
c000b7fd:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000b801:	7d 41                	jge    c000b844 <findDataTable(unsigned char*, char*)+0x68>
c000b803:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b807:	c1 e0 03             	shl    eax,0x3
c000b80a:	05 20 98 02 c0       	add    eax,0xc0029820
c000b80f:	83 ec 04             	sub    esp,0x4
c000b812:	6a 04                	push   0x4
c000b814:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000b818:	50                   	push   eax
c000b819:	e8 62 4b ff ff       	call   c0000380 <memcmp>
c000b81e:	83 c4 10             	add    esp,0x10
c000b821:	85 c0                	test   eax,eax
c000b823:	0f 94 c0             	sete   al
c000b826:	0f b6 c0             	movzx  eax,al
c000b829:	85 c0                	test   eax,eax
c000b82b:	74 0f                	je     c000b83c <findDataTable(unsigned char*, char*)+0x60>
c000b82d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b831:	8b 04 c5 24 98 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd67dc]
c000b838:	eb 12                	jmp    c000b84c <findDataTable(unsigned char*, char*)+0x70>
c000b83a:	66 90                	xchg   ax,ax
c000b83c:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c000b841:	eb b5                	jmp    c000b7f8 <findDataTable(unsigned char*, char*)+0x1c>
c000b843:	90                   	nop
c000b844:	b8 00 00 00 00       	mov    eax,0x0
c000b849:	8d 76 00             	lea    esi,[esi+0x0]
c000b84c:	83 c4 1c             	add    esp,0x1c
c000b84f:	c3                   	ret    

c000b850 <scanMADT()>:
c000b850:	53                   	push   ebx
c000b851:	83 ec 38             	sub    esp,0x38
c000b854:	c7 05 28 9a 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029a28,0x0
c000b85e:	c7 05 24 9a 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029a24,0x0
c000b868:	e8 72 c3 00 00       	call   c0017bdf <HalFindRSDP()>
c000b86d:	a3 28 9a 02 c0       	mov    ds:0xc0029a28,eax
c000b872:	a1 28 9a 02 c0       	mov    eax,ds:0xc0029a28
c000b877:	85 c0                	test   eax,eax
c000b879:	0f 84 11 04 00 00    	je     c000bc90 <scanMADT()+0x440>
c000b87f:	a1 28 9a 02 c0       	mov    eax,ds:0xc0029a28
c000b884:	83 ec 0c             	sub    esp,0xc
c000b887:	50                   	push   eax
c000b888:	e8 03 fe ff ff       	call   c000b690 <findRSDT(unsigned char*)>
c000b88d:	83 c4 10             	add    esp,0x10
c000b890:	a3 24 9a 02 c0       	mov    ds:0xc0029a24,eax
c000b895:	a1 24 9a 02 c0       	mov    eax,ds:0xc0029a24
c000b89a:	85 c0                	test   eax,eax
c000b89c:	0f 84 f2 03 00 00    	je     c000bc94 <scanMADT()+0x444>
c000b8a2:	a1 24 9a 02 c0       	mov    eax,ds:0xc0029a24
c000b8a7:	83 ec 0c             	sub    esp,0xc
c000b8aa:	50                   	push   eax
c000b8ab:	e8 80 fb ff ff       	call   c000b430 <loadACPITables(unsigned char*)>
c000b8b0:	83 c4 10             	add    esp,0x10
c000b8b3:	a1 24 9a 02 c0       	mov    eax,ds:0xc0029a24
c000b8b8:	83 ec 08             	sub    esp,0x8
c000b8bb:	68 ec 19 02 c0       	push   0xc00219ec
c000b8c0:	50                   	push   eax
c000b8c1:	e8 16 ff ff ff       	call   c000b7dc <findDataTable(unsigned char*, char*)>
c000b8c6:	83 c4 10             	add    esp,0x10
c000b8c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b8cd:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000b8d2:	0f 84 c0 03 00 00    	je     c000bc98 <scanMADT()+0x448>
c000b8d8:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000b8e0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000b8e4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b8e7:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000b8eb:	0f 87 af 03 00 00    	ja     c000bca0 <scanMADT()+0x450>
c000b8f1:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000b8f9:	0f 87 a1 03 00 00    	ja     c000bca0 <scanMADT()+0x450>
c000b8ff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000b903:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000b907:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000b90b:	8d 50 01             	lea    edx,[eax+0x1]
c000b90e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b912:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000b916:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000b91a:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000b91e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000b922:	8d 50 01             	lea    edx,[eax+0x1]
c000b925:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b929:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000b92d:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000b931:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000b935:	0f b6 44 24 22       	movzx  eax,BYTE PTR [esp+0x22]
c000b93a:	83 f8 02             	cmp    eax,0x2
c000b93d:	0f 86 59 03 00 00    	jbe    c000bc9c <scanMADT()+0x44c>
c000b943:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000b948:	85 c0                	test   eax,eax
c000b94a:	75 58                	jne    c000b9a4 <scanMADT()+0x154>
c000b94c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000b950:	8d 50 01             	lea    edx,[eax+0x1]
c000b953:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b957:	8a 15 20 9c 02 c0    	mov    dl,BYTE PTR ds:0xc0029c20
c000b95d:	0f b6 d2             	movzx  edx,dl
c000b960:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000b964:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000b968:	88 82 60 9c 02 c0    	mov    BYTE PTR [edx-0x3ffd63a0],al
c000b96e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000b972:	8d 50 01             	lea    edx,[eax+0x1]
c000b975:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b979:	8a 15 20 9c 02 c0    	mov    dl,BYTE PTR ds:0xc0029c20
c000b97f:	8d 4a 01             	lea    ecx,[edx+0x1]
c000b982:	88 0d 20 9c 02 c0    	mov    BYTE PTR ds:0xc0029c20,cl
c000b988:	0f b6 d2             	movzx  edx,dl
c000b98b:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000b98f:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000b993:	88 82 40 9c 02 c0    	mov    BYTE PTR [edx-0x3ffd63c0],al
c000b999:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000b99e:	e9 d9 02 00 00       	jmp    c000bc7c <scanMADT()+0x42c>
c000b9a3:	90                   	nop
c000b9a4:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000b9a9:	83 f8 01             	cmp    eax,0x1
c000b9ac:	0f 85 1a 01 00 00    	jne    c000bacc <scanMADT()+0x27c>
c000b9b2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000b9b6:	8d 50 01             	lea    edx,[eax+0x1]
c000b9b9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b9bd:	8a 15 e0 9a 02 c0    	mov    dl,BYTE PTR ds:0xc0029ae0
c000b9c3:	0f b6 d2             	movzx  edx,dl
c000b9c6:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000b9ca:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000b9ce:	88 82 00 9b 02 c0    	mov    BYTE PTR [edx-0x3ffd6500],al
c000b9d4:	83 44 24 2c 01       	add    DWORD PTR [esp+0x2c],0x1
c000b9d9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000b9dd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000b9e1:	01 d0                	add    eax,edx
c000b9e3:	83 c0 2c             	add    eax,0x2c
c000b9e6:	8a 00                	mov    al,BYTE PTR [eax]
c000b9e8:	0f b6 d0             	movzx  edx,al
c000b9eb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000b9ef:	8d 48 01             	lea    ecx,[eax+0x1]
c000b9f2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000b9f6:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000b9fa:	0f b6 c0             	movzx  eax,al
c000b9fd:	c1 e0 08             	shl    eax,0x8
c000ba00:	89 d1                	mov    ecx,edx
c000ba02:	09 c1                	or     ecx,eax
c000ba04:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ba08:	8d 50 02             	lea    edx,[eax+0x2]
c000ba0b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ba0f:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000ba13:	0f b6 c0             	movzx  eax,al
c000ba16:	c1 e0 10             	shl    eax,0x10
c000ba19:	09 c1                	or     ecx,eax
c000ba1b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ba1f:	8d 50 03             	lea    edx,[eax+0x3]
c000ba22:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ba26:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000ba2a:	0f b6 c0             	movzx  eax,al
c000ba2d:	c1 e0 18             	shl    eax,0x18
c000ba30:	09 c1                	or     ecx,eax
c000ba32:	89 ca                	mov    edx,ecx
c000ba34:	a0 e0 9a 02 c0       	mov    al,ds:0xc0029ae0
c000ba39:	0f b6 c0             	movzx  eax,al
c000ba3c:	89 14 85 20 9b 02 c0 	mov    DWORD PTR [eax*4-0x3ffd64e0],edx
c000ba43:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000ba48:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ba4c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ba50:	01 d0                	add    eax,edx
c000ba52:	83 c0 2c             	add    eax,0x2c
c000ba55:	8a 00                	mov    al,BYTE PTR [eax]
c000ba57:	0f b6 d0             	movzx  edx,al
c000ba5a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ba5e:	8d 48 01             	lea    ecx,[eax+0x1]
c000ba61:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ba65:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000ba69:	0f b6 c0             	movzx  eax,al
c000ba6c:	c1 e0 08             	shl    eax,0x8
c000ba6f:	89 d1                	mov    ecx,edx
c000ba71:	09 c1                	or     ecx,eax
c000ba73:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ba77:	8d 50 02             	lea    edx,[eax+0x2]
c000ba7a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ba7e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000ba82:	0f b6 c0             	movzx  eax,al
c000ba85:	c1 e0 10             	shl    eax,0x10
c000ba88:	09 c1                	or     ecx,eax
c000ba8a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ba8e:	8d 50 03             	lea    edx,[eax+0x3]
c000ba91:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ba95:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000ba99:	0f b6 c0             	movzx  eax,al
c000ba9c:	c1 e0 18             	shl    eax,0x18
c000ba9f:	09 c1                	or     ecx,eax
c000baa1:	89 ca                	mov    edx,ecx
c000baa3:	a0 e0 9a 02 c0       	mov    al,ds:0xc0029ae0
c000baa8:	0f b6 c0             	movzx  eax,al
c000baab:	89 14 85 a0 9b 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6460],edx
c000bab2:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000bab7:	a0 e0 9a 02 c0       	mov    al,ds:0xc0029ae0
c000babc:	83 c0 01             	add    eax,0x1
c000babf:	a2 e0 9a 02 c0       	mov    ds:0xc0029ae0,al
c000bac4:	e9 b3 01 00 00       	jmp    c000bc7c <scanMADT()+0x42c>
c000bac9:	8d 76 00             	lea    esi,[esi+0x0]
c000bacc:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000bad1:	83 f8 02             	cmp    eax,0x2
c000bad4:	0f 85 ea 00 00 00    	jne    c000bbc4 <scanMADT()+0x374>
c000bada:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bade:	8d 50 01             	lea    edx,[eax+0x1]
c000bae1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bae5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bae9:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000baed:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000baf1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000baf5:	8d 50 01             	lea    edx,[eax+0x1]
c000baf8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bafc:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bb00:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000bb04:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000bb08:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bb0c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bb10:	01 d0                	add    eax,edx
c000bb12:	83 c0 2c             	add    eax,0x2c
c000bb15:	8a 00                	mov    al,BYTE PTR [eax]
c000bb17:	0f b6 d0             	movzx  edx,al
c000bb1a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bb1e:	8d 48 01             	lea    ecx,[eax+0x1]
c000bb21:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000bb25:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000bb29:	0f b6 c0             	movzx  eax,al
c000bb2c:	c1 e0 08             	shl    eax,0x8
c000bb2f:	89 d1                	mov    ecx,edx
c000bb31:	09 c1                	or     ecx,eax
c000bb33:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bb37:	8d 50 02             	lea    edx,[eax+0x2]
c000bb3a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000bb3e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000bb42:	0f b6 c0             	movzx  eax,al
c000bb45:	c1 e0 10             	shl    eax,0x10
c000bb48:	09 c1                	or     ecx,eax
c000bb4a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bb4e:	8d 50 03             	lea    edx,[eax+0x3]
c000bb51:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000bb55:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000bb59:	0f b6 c0             	movzx  eax,al
c000bb5c:	c1 e0 18             	shl    eax,0x18
c000bb5f:	09 c8                	or     eax,ecx
c000bb61:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000bb65:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000bb6a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bb6e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bb72:	01 d0                	add    eax,edx
c000bb74:	83 c0 2c             	add    eax,0x2c
c000bb77:	8a 00                	mov    al,BYTE PTR [eax]
c000bb79:	0f b6 d0             	movzx  edx,al
c000bb7c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bb80:	8d 48 01             	lea    ecx,[eax+0x1]
c000bb83:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000bb87:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000bb8b:	0f b6 c0             	movzx  eax,al
c000bb8e:	c1 e0 08             	shl    eax,0x8
c000bb91:	09 d0                	or     eax,edx
c000bb93:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000bb98:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000bb9d:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000bba2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bba6:	88 90 88 3a 02 c0    	mov    BYTE PTR [eax-0x3ffdc578],dl
c000bbac:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000bbb1:	66 8b 54 24 1a       	mov    dx,WORD PTR [esp+0x1a]
c000bbb6:	66 89 94 00 c0 9a 02 c0 	mov    WORD PTR [eax+eax*1-0x3ffd6540],dx
c000bbbe:	e9 b9 00 00 00       	jmp    c000bc7c <scanMADT()+0x42c>
c000bbc3:	90                   	nop
c000bbc4:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000bbc9:	83 f8 04             	cmp    eax,0x4
c000bbcc:	0f 85 9a 00 00 00    	jne    c000bc6c <scanMADT()+0x41c>
c000bbd2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bbd6:	8d 50 01             	lea    edx,[eax+0x1]
c000bbd9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bbdd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bbe1:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000bbe5:	0f b6 c0             	movzx  eax,al
c000bbe8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bbec:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bbf0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bbf4:	01 d0                	add    eax,edx
c000bbf6:	83 c0 2c             	add    eax,0x2c
c000bbf9:	8a 00                	mov    al,BYTE PTR [eax]
c000bbfb:	0f b6 d0             	movzx  edx,al
c000bbfe:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bc02:	8d 48 01             	lea    ecx,[eax+0x1]
c000bc05:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000bc09:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000bc0d:	0f b6 c0             	movzx  eax,al
c000bc10:	c1 e0 08             	shl    eax,0x8
c000bc13:	09 d0                	or     eax,edx
c000bc15:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bc19:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000bc1e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bc22:	8d 50 01             	lea    edx,[eax+0x1]
c000bc25:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc29:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bc2d:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000bc31:	0f b6 c0             	movzx  eax,al
c000bc34:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000bc38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc3c:	c1 e0 08             	shl    eax,0x8
c000bc3f:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000bc43:	89 c1                	mov    ecx,eax
c000bc45:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bc49:	c1 e0 18             	shl    eax,0x18
c000bc4c:	89 c3                	mov    ebx,eax
c000bc4e:	a1 2c 9a 02 c0       	mov    eax,ds:0xc0029a2c
c000bc53:	8d 50 01             	lea    edx,[eax+0x1]
c000bc56:	89 15 2c 9a 02 c0    	mov    DWORD PTR ds:0xc0029a2c,edx
c000bc5c:	09 d9                	or     ecx,ebx
c000bc5e:	89 ca                	mov    edx,ecx
c000bc60:	89 14 85 40 9a 02 c0 	mov    DWORD PTR [eax*4-0x3ffd65c0],edx
c000bc67:	eb 13                	jmp    c000bc7c <scanMADT()+0x42c>
c000bc69:	8d 76 00             	lea    esi,[esi+0x0]
c000bc6c:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000bc71:	83 f8 05             	cmp    eax,0x5
c000bc74:	75 06                	jne    c000bc7c <scanMADT()+0x42c>
c000bc76:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000bc7b:	90                   	nop
c000bc7c:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c000bc81:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000bc85:	01 d0                	add    eax,edx
c000bc87:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bc8b:	e9 50 fc ff ff       	jmp    c000b8e0 <scanMADT()+0x90>
c000bc90:	90                   	nop
c000bc91:	eb 0d                	jmp    c000bca0 <scanMADT()+0x450>
c000bc93:	90                   	nop
c000bc94:	90                   	nop
c000bc95:	eb 09                	jmp    c000bca0 <scanMADT()+0x450>
c000bc97:	90                   	nop
c000bc98:	90                   	nop
c000bc99:	eb 05                	jmp    c000bca0 <scanMADT()+0x450>
c000bc9b:	90                   	nop
c000bc9c:	90                   	nop
c000bc9d:	8d 76 00             	lea    esi,[esi+0x0]
c000bca0:	83 c4 38             	add    esp,0x38
c000bca3:	5b                   	pop    ebx
c000bca4:	c3                   	ret    
c000bca5:	90                   	nop
c000bca6:	66 90                	xchg   ax,ax

c000bca8 <ACPI::ACPI()>:
c000bca8:	83 ec 0c             	sub    esp,0xc
c000bcab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcaf:	83 ec 08             	sub    esp,0x8
c000bcb2:	68 f1 19 02 c0       	push   0xc00219f1
c000bcb7:	50                   	push   eax
c000bcb8:	e8 e7 d4 ff ff       	call   c00091a4 <Device::Device(char const*)>
c000bcbd:	83 c4 10             	add    esp,0x10
c000bcc0:	ba ec 1b 02 c0       	mov    edx,0xc0021bec
c000bcc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcc9:	89 10                	mov    DWORD PTR [eax],edx
c000bccb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bccf:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000bcd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcda:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000bce4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bce8:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000bcf2:	e8 59 fb ff ff       	call   c000b850 <scanMADT()>
c000bcf7:	90                   	nop
c000bcf8:	83 c4 0c             	add    esp,0xc
c000bcfb:	c3                   	ret    

c000bcfc <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000bcfc:	83 ec 2c             	sub    esp,0x2c
c000bcff:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000bd03:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000bd07:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c000bd0b:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c000bd0f:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000bd14:	88 c8                	mov    al,cl
c000bd16:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000bd1a:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000bd1f:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bd27:	90                   	nop
c000bd28:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bd2c:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000bd32:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000bd36:	0f 8d b0 00 00 00    	jge    c000bdec <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xf0>
c000bd3c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bd40:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000bd44:	83 c2 2a             	add    edx,0x2a
c000bd47:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000bd4b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c000bd50:	0f b7 c0             	movzx  eax,ax
c000bd53:	39 c2                	cmp    edx,eax
c000bd55:	0f 85 85 00 00 00    	jne    c000bde0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000bd5b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bd5f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000bd63:	83 c2 2a             	add    edx,0x2a
c000bd66:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000bd6a:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c000bd6f:	0f b6 c0             	movzx  eax,al
c000bd72:	39 c2                	cmp    edx,eax
c000bd74:	75 6a                	jne    c000bde0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000bd76:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000bd7b:	85 c0                	test   eax,eax
c000bd7d:	74 3d                	je     c000bdbc <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xc0>
c000bd7f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bd83:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000bd87:	83 c2 2a             	add    edx,0x2a
c000bd8a:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000bd8e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bd92:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000bd95:	39 c2                	cmp    edx,eax
c000bd97:	74 13                	je     c000bdac <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xb0>
c000bd99:	83 ec 0c             	sub    esp,0xc
c000bd9c:	68 6c 1b 02 c0       	push   0xc0021b6c
c000bda1:	e8 80 2e 00 00       	call   c000ec26 <KePanic(char const*)>
c000bda6:	83 c4 10             	add    esp,0x10
c000bda9:	8d 76 00             	lea    esi,[esi+0x0]
c000bdac:	83 ec 0c             	sub    esp,0xc
c000bdaf:	68 f6 19 02 c0       	push   0xc00219f6
c000bdb4:	e8 6d 2e 00 00       	call   c000ec26 <KePanic(char const*)>
c000bdb9:	83 c4 10             	add    esp,0x10
c000bdbc:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000bdc0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bdc4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000bdc8:	83 c2 2a             	add    edx,0x2a
c000bdcb:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000bdcf:	8b 02                	mov    eax,DWORD PTR [edx]
c000bdd1:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000bdd4:	89 01                	mov    DWORD PTR [ecx],eax
c000bdd6:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000bdd9:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000bdde:	66 90                	xchg   ax,ax
c000bde0:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000bde5:	e9 3e ff ff ff       	jmp    c000bd28 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000bdea:	66 90                	xchg   ax,ax
c000bdec:	90                   	nop
c000bded:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bdf1:	83 c4 2c             	add    esp,0x2c
c000bdf4:	c2 04 00             	ret    0x4
c000bdf7:	90                   	nop

c000bdf8 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000bdf8:	83 ec 1c             	sub    esp,0x1c
c000bdfb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000bdff:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000be03:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000be07:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000be0c:	88 c8                	mov    al,cl
c000be0e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000be12:	88 d0                	mov    al,dl
c000be14:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000be18:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000be1c:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000be22:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000be26:	83 c2 2a             	add    edx,0x2a
c000be29:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c000be2d:	88 4c d0 0f          	mov    BYTE PTR [eax+edx*8+0xf],cl
c000be31:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000be35:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000be3b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000be3f:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000be42:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000be46:	66 89 54 c8 0c       	mov    WORD PTR [eax+ecx*8+0xc],dx
c000be4b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000be4f:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000be55:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000be59:	83 c0 01             	add    eax,0x1
c000be5c:	88 c1                	mov    cl,al
c000be5e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000be62:	83 c2 2a             	add    edx,0x2a
c000be65:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000be69:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000be6d:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000be73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000be77:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000be7a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000be7e:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000be82:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000be86:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000be8c:	8d 50 01             	lea    edx,[eax+0x1]
c000be8f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000be93:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000be99:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000be9d:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000bea3:	3d 00 02 00 00       	cmp    eax,0x200
c000bea8:	75 12                	jne    c000bebc <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc4>
c000beaa:	83 ec 0c             	sub    esp,0xc
c000bead:	68 05 1a 02 c0       	push   0xc0021a05
c000beb2:	e8 6f 2d 00 00       	call   c000ec26 <KePanic(char const*)>
c000beb7:	83 c4 10             	add    esp,0x10
c000beba:	66 90                	xchg   ax,ax
c000bebc:	90                   	nop
c000bebd:	83 c4 1c             	add    esp,0x1c
c000bec0:	c3                   	ret    
c000bec1:	90                   	nop
c000bec2:	66 90                	xchg   ax,ax

c000bec4 <ACPI::setScreenBrightnessLevel(void*, int)>:
c000bec4:	b8 00 00 00 00       	mov    eax,0x0
c000bec9:	c3                   	ret    
c000beca:	66 90                	xchg   ax,ax

c000becc <ACPI::detectPCI()>:
c000becc:	53                   	push   ebx
c000becd:	83 ec 28             	sub    esp,0x28
c000bed0:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000bed5:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000beda:	a1 24 9a 02 c0       	mov    eax,ds:0xc0029a24
c000bedf:	83 ec 08             	sub    esp,0x8
c000bee2:	68 22 1a 02 c0       	push   0xc0021a22
c000bee7:	50                   	push   eax
c000bee8:	e8 ef f8 ff ff       	call   c000b7dc <findDataTable(unsigned char*, char*)>
c000beed:	83 c4 10             	add    esp,0x10
c000bef0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bef4:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000bef9:	74 0d                	je     c000bf08 <ACPI::detectPCI()+0x3c>
c000befb:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000bf00:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000bf05:	8d 76 00             	lea    esi,[esi+0x0]
c000bf08:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000bf10:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000bf14:	8a 00                	mov    al,BYTE PTR [eax]
c000bf16:	0f b6 c0             	movzx  eax,al
c000bf19:	83 f8 01             	cmp    eax,0x1
c000bf1c:	75 0e                	jne    c000bf2c <ACPI::detectPCI()+0x60>
c000bf1e:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000bf23:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000bf28:	eb 2e                	jmp    c000bf58 <ACPI::detectPCI()+0x8c>
c000bf2a:	66 90                	xchg   ax,ax
c000bf2c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000bf30:	8a 00                	mov    al,BYTE PTR [eax]
c000bf32:	0f b6 c0             	movzx  eax,al
c000bf35:	83 f8 02             	cmp    eax,0x2
c000bf38:	75 1e                	jne    c000bf58 <ACPI::detectPCI()+0x8c>
c000bf3a:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000bf3f:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000bf44:	85 c0                	test   eax,eax
c000bf46:	74 10                	je     c000bf58 <ACPI::detectPCI()+0x8c>
c000bf48:	83 ec 0c             	sub    esp,0xc
c000bf4b:	68 9c 1b 02 c0       	push   0xc0021b9c
c000bf50:	e8 d1 2c 00 00       	call   c000ec26 <KePanic(char const*)>
c000bf55:	83 c4 10             	add    esp,0x10
c000bf58:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000bf5c:	83 f0 01             	xor    eax,0x1
c000bf5f:	0f b6 c0             	movzx  eax,al
c000bf62:	85 c0                	test   eax,eax
c000bf64:	74 46                	je     c000bfac <ACPI::detectPCI()+0xe0>
c000bf66:	e8 c5 41 ff ff       	call   c0000130 <manualPCIProbe>
c000bf6b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bf6f:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000bf74:	75 0e                	jne    c000bf84 <ACPI::detectPCI()+0xb8>
c000bf76:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000bf7b:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000bf80:	eb 2a                	jmp    c000bfac <ACPI::detectPCI()+0xe0>
c000bf82:	66 90                	xchg   ax,ax
c000bf84:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000bf89:	75 21                	jne    c000bfac <ACPI::detectPCI()+0xe0>
c000bf8b:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000bf90:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000bf95:	85 c0                	test   eax,eax
c000bf97:	74 13                	je     c000bfac <ACPI::detectPCI()+0xe0>
c000bf99:	83 ec 0c             	sub    esp,0xc
c000bf9c:	68 9c 1b 02 c0       	push   0xc0021b9c
c000bfa1:	e8 80 2c 00 00       	call   c000ec26 <KePanic(char const*)>
c000bfa6:	83 c4 10             	add    esp,0x10
c000bfa9:	8d 76 00             	lea    esi,[esi+0x0]
c000bfac:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000bfb1:	85 c0                	test   eax,eax
c000bfb3:	0f 84 87 00 00 00    	je     c000c040 <ACPI::detectPCI()+0x174>
c000bfb9:	83 ec 0c             	sub    esp,0xc
c000bfbc:	68 27 1a 02 c0       	push   0xc0021a27
c000bfc1:	e8 dd 05 00 00       	call   c000c5a3 <KeSetBootMessage(char const*)>
c000bfc6:	83 c4 10             	add    esp,0x10
c000bfc9:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000bfd1:	83 ec 0c             	sub    esp,0xc
c000bfd4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000bfd8:	e8 f3 28 00 00       	call   c000e8d0 <malloc>
c000bfdd:	83 c4 10             	add    esp,0x10
c000bfe0:	89 c3                	mov    ebx,eax
c000bfe2:	83 ec 0c             	sub    esp,0xc
c000bfe5:	53                   	push   ebx
c000bfe6:	e8 b7 f8 00 00       	call   c001b8a2 <PCI::PCI()>
c000bfeb:	83 c4 10             	add    esp,0x10
c000bfee:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000bff2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bff6:	83 ec 08             	sub    esp,0x8
c000bff9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bffd:	50                   	push   eax
c000bffe:	e8 3f d0 ff ff       	call   c0009042 <Device::addChild(Device*)>
c000c003:	83 c4 10             	add    esp,0x10
c000c006:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c00a:	8b 00                	mov    eax,DWORD PTR [eax]
c000c00c:	83 c0 08             	add    eax,0x8
c000c00f:	8b 00                	mov    eax,DWORD PTR [eax]
c000c011:	0f b6 54 24 1e       	movzx  edx,BYTE PTR [esp+0x1e]
c000c016:	85 d2                	test   edx,edx
c000c018:	74 0a                	je     c000c024 <ACPI::detectPCI()+0x158>
c000c01a:	ba 01 00 00 00       	mov    edx,0x1
c000c01f:	eb 0b                	jmp    c000c02c <ACPI::detectPCI()+0x160>
c000c021:	8d 76 00             	lea    esi,[esi+0x0]
c000c024:	ba 02 00 00 00       	mov    edx,0x2
c000c029:	8d 76 00             	lea    esi,[esi+0x0]
c000c02c:	6a 00                	push   0x0
c000c02e:	6a 00                	push   0x0
c000c030:	52                   	push   edx
c000c031:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c035:	ff d0                	call   eax
c000c037:	83 c4 10             	add    esp,0x10
c000c03a:	e9 91 00 00 00       	jmp    c000c0d0 <ACPI::detectPCI()+0x204>
c000c03f:	90                   	nop
c000c040:	83 ec 0c             	sub    esp,0xc
c000c043:	68 3f 1a 02 c0       	push   0xc0021a3f
c000c048:	e8 56 05 00 00       	call   c000c5a3 <KeSetBootMessage(char const*)>
c000c04d:	83 c4 10             	add    esp,0x10
c000c050:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000c057:	83 ec 0c             	sub    esp,0xc
c000c05a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c05e:	e8 6d 28 00 00       	call   c000e8d0 <malloc>
c000c063:	83 c4 10             	add    esp,0x10
c000c066:	89 c3                	mov    ebx,eax
c000c068:	83 ec 0c             	sub    esp,0xc
c000c06b:	53                   	push   ebx
c000c06c:	e8 39 04 01 00       	call   c001c4aa <IDE::IDE()>
c000c071:	83 c4 10             	add    esp,0x10
c000c074:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000c078:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c07c:	83 ec 08             	sub    esp,0x8
c000c07f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000c083:	50                   	push   eax
c000c084:	e8 b9 cf ff ff       	call   c0009042 <Device::addChild(Device*)>
c000c089:	83 c4 10             	add    esp,0x10
c000c08c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c090:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000c09a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c09e:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000c0a7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c0ab:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000c0b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c0b8:	8b 00                	mov    eax,DWORD PTR [eax]
c000c0ba:	83 c0 08             	add    eax,0x8
c000c0bd:	8b 00                	mov    eax,DWORD PTR [eax]
c000c0bf:	6a 00                	push   0x0
c000c0c1:	6a 00                	push   0x0
c000c0c3:	6a 00                	push   0x0
c000c0c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0c9:	ff d0                	call   eax
c000c0cb:	83 c4 10             	add    esp,0x10
c000c0ce:	66 90                	xchg   ax,ax
c000c0d0:	90                   	nop
c000c0d1:	83 c4 28             	add    esp,0x28
c000c0d4:	5b                   	pop    ebx
c000c0d5:	c3                   	ret    
c000c0d6:	66 90                	xchg   ax,ax

c000c0d8 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000c0d8:	83 ec 0c             	sub    esp,0xc
c000c0db:	83 ec 0c             	sub    esp,0xc
c000c0de:	68 54 1a 02 c0       	push   0xc0021a54
c000c0e3:	e8 3e 2b 00 00       	call   c000ec26 <KePanic(char const*)>
c000c0e8:	83 c4 10             	add    esp,0x10
c000c0eb:	90                   	nop
c000c0ec:	83 c4 0c             	add    esp,0xc
c000c0ef:	c3                   	ret    

c000c0f0 <ACPI::open(int, int, void*)>:
c000c0f0:	55                   	push   ebp
c000c0f1:	89 e5                	mov    ebp,esp
c000c0f3:	53                   	push   ebx
c000c0f4:	81 ec 74 01 00 00    	sub    esp,0x174
c000c0fa:	83 ec 0c             	sub    esp,0xc
c000c0fd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000c100:	e8 c7 fd ff ff       	call   c000becc <ACPI::detectPCI()>
c000c105:	83 c4 10             	add    esp,0x10
c000c108:	83 ec 0c             	sub    esp,0xc
c000c10b:	68 c4 1b 02 c0       	push   0xc0021bc4
c000c110:	e8 8e 04 00 00       	call   c000c5a3 <KeSetBootMessage(char const*)>
c000c115:	83 c4 10             	add    esp,0x10
c000c118:	b8 4c 05 00 00       	mov    eax,0x54c
c000c11d:	8a 00                	mov    al,BYTE PTR [eax]
c000c11f:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c000c122:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
c000c126:	83 f8 01             	cmp    eax,0x1
c000c129:	75 15                	jne    c000c140 <ACPI::open(int, int, void*)+0x50>
c000c12b:	83 ec 0c             	sub    esp,0xc
c000c12e:	68 65 1a 02 c0       	push   0xc0021a65
c000c133:	e8 4d 7d 00 00       	call   c0013e85 <Thr::loadKernelSymbolTable(char const*)>
c000c138:	83 c4 10             	add    esp,0x10
c000c13b:	eb 33                	jmp    c000c170 <ACPI::open(int, int, void*)+0x80>
c000c13d:	8d 76 00             	lea    esi,[esi+0x0]
c000c140:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
c000c144:	3d bb 00 00 00       	cmp    eax,0xbb
c000c149:	75 15                	jne    c000c160 <ACPI::open(int, int, void*)+0x70>
c000c14b:	83 ec 0c             	sub    esp,0xc
c000c14e:	68 83 1a 02 c0       	push   0xc0021a83
c000c153:	e8 2d 7d 00 00       	call   c0013e85 <Thr::loadKernelSymbolTable(char const*)>
c000c158:	83 c4 10             	add    esp,0x10
c000c15b:	eb 13                	jmp    c000c170 <ACPI::open(int, int, void*)+0x80>
c000c15d:	8d 76 00             	lea    esi,[esi+0x0]
c000c160:	83 ec 0c             	sub    esp,0xc
c000c163:	68 a1 1a 02 c0       	push   0xc0021aa1
c000c168:	e8 b9 2a 00 00       	call   c000ec26 <KePanic(char const*)>
c000c16d:	83 c4 10             	add    esp,0x10
c000c170:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000c174:	c7 45 cc 14 01 00 00 	mov    DWORD PTR [ebp-0x34],0x114
c000c17b:	83 ec 0c             	sub    esp,0xc
c000c17e:	ff 75 cc             	push   DWORD PTR [ebp-0x34]
c000c181:	e8 4a 27 00 00       	call   c000e8d0 <malloc>
c000c186:	83 c4 10             	add    esp,0x10
c000c189:	89 c3                	mov    ebx,eax
c000c18b:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c000c190:	83 ec 04             	sub    esp,0x4
c000c193:	50                   	push   eax
c000c194:	68 bb 1a 02 c0       	push   0xc0021abb
c000c199:	53                   	push   ebx
c000c19a:	e8 6d bf ff ff       	call   c000810c <File::File(char const*, Process*)>
c000c19f:	83 c4 10             	add    esp,0x10
c000c1a2:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c000c1a5:	83 ec 08             	sub    esp,0x8
c000c1a8:	6a 01                	push   0x1
c000c1aa:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000c1ad:	e8 78 bf ff ff       	call   c000812a <File::open(FileOpenMode)>
c000c1b2:	83 c4 10             	add    esp,0x10
c000c1b5:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c000c1b8:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c000c1bc:	75 12                	jne    c000c1d0 <ACPI::open(int, int, void*)+0xe0>
c000c1be:	83 ec 0c             	sub    esp,0xc
c000c1c1:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000c1c4:	e8 bf bf ff ff       	call   c0008188 <File::close()>
c000c1c9:	83 c4 10             	add    esp,0x10
c000c1cc:	eb 06                	jmp    c000c1d4 <ACPI::open(int, int, void*)+0xe4>
c000c1ce:	66 90                	xchg   ax,ax
c000c1d0:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c1d4:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
c000c1d8:	74 16                	je     c000c1f0 <ACPI::open(int, int, void*)+0x100>
c000c1da:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000c1dd:	8b 00                	mov    eax,DWORD PTR [eax]
c000c1df:	83 c0 08             	add    eax,0x8
c000c1e2:	8b 00                	mov    eax,DWORD PTR [eax]
c000c1e4:	83 ec 0c             	sub    esp,0xc
c000c1e7:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000c1ea:	ff d0                	call   eax
c000c1ec:	83 c4 10             	add    esp,0x10
c000c1ef:	90                   	nop
c000c1f0:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c000c1f3:	83 f0 01             	xor    eax,0x1
c000c1f6:	0f b6 c0             	movzx  eax,al
c000c1f9:	85 c0                	test   eax,eax
c000c1fb:	74 27                	je     c000c224 <ACPI::open(int, int, void*)+0x134>
c000c1fd:	83 ec 0c             	sub    esp,0xc
c000c200:	68 d9 1a 02 c0       	push   0xc0021ad9
c000c205:	e8 99 03 00 00       	call   c000c5a3 <KeSetBootMessage(char const*)>
c000c20a:	83 c4 10             	add    esp,0x10
c000c20d:	c7 45 e8 0c 00 00 00 	mov    DWORD PTR [ebp-0x18],0xc
c000c214:	83 ec 0c             	sub    esp,0xc
c000c217:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c000c21a:	e8 91 5f 00 00       	call   c00121b0 <Virt::setupPageSwapping(int)>
c000c21f:	83 c4 10             	add    esp,0x10
c000c222:	66 90                	xchg   ax,ax
c000c224:	83 ec 0c             	sub    esp,0xc
c000c227:	68 f4 1a 02 c0       	push   0xc0021af4
c000c22c:	e8 72 03 00 00       	call   c000c5a3 <KeSetBootMessage(char const*)>
c000c231:	83 c4 10             	add    esp,0x10
c000c234:	8d 45 b8             	lea    eax,[ebp-0x48]
c000c237:	83 ec 08             	sub    esp,0x8
c000c23a:	6a 13                	push   0x13
c000c23c:	50                   	push   eax
c000c23d:	e8 2e d1 ff ff       	call   c0009370 <getDevicesOfType(DeviceType)>
c000c242:	83 c4 0c             	add    esp,0xc
c000c245:	8d 76 00             	lea    esi,[esi+0x0]
c000c248:	83 ec 0c             	sub    esp,0xc
c000c24b:	8d 45 b8             	lea    eax,[ebp-0x48]
c000c24e:	50                   	push   eax
c000c24f:	e8 a8 3d 01 00       	call   c001fffc <LinkedList<Device>::isEmpty()>
c000c254:	83 c4 10             	add    esp,0x10
c000c257:	83 f0 01             	xor    eax,0x1
c000c25a:	0f b6 c0             	movzx  eax,al
c000c25d:	85 c0                	test   eax,eax
c000c25f:	0f 84 1f 01 00 00    	je     c000c384 <ACPI::open(int, int, void*)+0x294>
c000c265:	83 ec 0c             	sub    esp,0xc
c000c268:	8d 45 b8             	lea    eax,[ebp-0x48]
c000c26b:	50                   	push   eax
c000c26c:	e8 a7 3d 01 00       	call   c0020018 <LinkedList<Device>::getFirstElement()>
c000c271:	83 c4 10             	add    esp,0x10
c000c274:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c000c277:	83 ec 0c             	sub    esp,0xc
c000c27a:	8d 45 b8             	lea    eax,[ebp-0x48]
c000c27d:	50                   	push   eax
c000c27e:	e8 9d 3d 01 00       	call   c0020020 <LinkedList<Device>::removeFirst()>
c000c283:	83 c4 10             	add    esp,0x10
c000c286:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c000c289:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000c28c:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c000c28f:	b8 24 00 00 00       	mov    eax,0x24
c000c294:	83 e0 fc             	and    eax,0xfffffffc
c000c297:	89 c3                	mov    ebx,eax
c000c299:	b8 00 00 00 00       	mov    eax,0x0
c000c29e:	66 90                	xchg   ax,ax
c000c2a0:	8b 94 01 18 01 00 00 	mov    edx,DWORD PTR [ecx+eax*1+0x118]
c000c2a7:	89 94 05 94 fe ff ff 	mov    DWORD PTR [ebp+eax*1-0x16c],edx
c000c2ae:	83 c0 04             	add    eax,0x4
c000c2b1:	39 d8                	cmp    eax,ebx
c000c2b3:	72 eb                	jb     c000c2a0 <ACPI::open(int, int, void*)+0x1b0>
c000c2b5:	83 ec 08             	sub    esp,0x8
c000c2b8:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
c000c2be:	50                   	push   eax
c000c2bf:	83 ec 24             	sub    esp,0x24
c000c2c2:	89 e1                	mov    ecx,esp
c000c2c4:	b8 24 00 00 00       	mov    eax,0x24
c000c2c9:	83 e0 fc             	and    eax,0xfffffffc
c000c2cc:	89 c3                	mov    ebx,eax
c000c2ce:	b8 00 00 00 00       	mov    eax,0x0
c000c2d3:	90                   	nop
c000c2d4:	8b 94 05 94 fe ff ff 	mov    edx,DWORD PTR [ebp+eax*1-0x16c]
c000c2db:	89 14 01             	mov    DWORD PTR [ecx+eax*1],edx
c000c2de:	83 c0 04             	add    eax,0x4
c000c2e1:	39 d8                	cmp    eax,ebx
c000c2e3:	72 ef                	jb     c000c2d4 <ACPI::open(int, int, void*)+0x1e4>
c000c2e5:	e8 a0 fa 00 00       	call   c001bd8a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000c2ea:	83 c4 30             	add    esp,0x30
c000c2ed:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c000c2f0:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c000c2f4:	0f 84 4e ff ff ff    	je     c000c248 <ACPI::open(int, int, void*)+0x158>
c000c2fa:	c7 45 c8 14 01 00 00 	mov    DWORD PTR [ebp-0x38],0x114
c000c301:	83 ec 0c             	sub    esp,0xc
c000c304:	ff 75 c8             	push   DWORD PTR [ebp-0x38]
c000c307:	e8 c4 25 00 00       	call   c000e8d0 <malloc>
c000c30c:	83 c4 10             	add    esp,0x10
c000c30f:	89 c3                	mov    ebx,eax
c000c311:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c000c316:	83 ec 04             	sub    esp,0x4
c000c319:	50                   	push   eax
c000c31a:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
c000c31d:	53                   	push   ebx
c000c31e:	e8 e9 bd ff ff       	call   c000810c <File::File(char const*, Process*)>
c000c323:	83 c4 10             	add    esp,0x10
c000c326:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c000c329:	83 ec 0c             	sub    esp,0xc
c000c32c:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
c000c32f:	e8 ba c0 ff ff       	call   c00083ee <File::exists()>
c000c334:	83 c4 10             	add    esp,0x10
c000c337:	0f b6 c0             	movzx  eax,al
c000c33a:	85 c0                	test   eax,eax
c000c33c:	74 22                	je     c000c360 <ACPI::open(int, int, void*)+0x270>
c000c33e:	83 ec 08             	sub    esp,0x8
c000c341:	6a 01                	push   0x1
c000c343:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
c000c346:	e8 bc 85 00 00       	call   c0014907 <Thr::loadDLL(char const*, bool)>
c000c34b:	83 c4 10             	add    esp,0x10
c000c34e:	83 ec 08             	sub    esp,0x8
c000c351:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c000c354:	50                   	push   eax
c000c355:	e8 0e 88 00 00       	call   c0014b68 <Thr::executeDLL(unsigned long, void*)>
c000c35a:	83 c4 10             	add    esp,0x10
c000c35d:	8d 76 00             	lea    esi,[esi+0x0]
c000c360:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c000c364:	0f 84 de fe ff ff    	je     c000c248 <ACPI::open(int, int, void*)+0x158>
c000c36a:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c000c36d:	8b 00                	mov    eax,DWORD PTR [eax]
c000c36f:	83 c0 08             	add    eax,0x8
c000c372:	8b 00                	mov    eax,DWORD PTR [eax]
c000c374:	83 ec 0c             	sub    esp,0xc
c000c377:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
c000c37a:	ff d0                	call   eax
c000c37c:	83 c4 10             	add    esp,0x10
c000c37f:	e9 c4 fe ff ff       	jmp    c000c248 <ACPI::open(int, int, void*)+0x158>
c000c384:	83 ec 0c             	sub    esp,0xc
c000c387:	8d 45 b8             	lea    eax,[ebp-0x48]
c000c38a:	50                   	push   eax
c000c38b:	e8 68 3c 01 00       	call   c001fff8 <LinkedList<Device>::~LinkedList()>
c000c390:	83 c4 10             	add    esp,0x10
c000c393:	8b 1d 70 9d 02 c0    	mov    ebx,DWORD PTR ds:0xc0029d70
c000c399:	83 ec 08             	sub    esp,0x8
c000c39c:	6a 01                	push   0x1
c000c39e:	68 0e 1b 02 c0       	push   0xc0021b0e
c000c3a3:	e8 5f 85 00 00       	call   c0014907 <Thr::loadDLL(char const*, bool)>
c000c3a8:	83 c4 10             	add    esp,0x10
c000c3ab:	83 ec 08             	sub    esp,0x8
c000c3ae:	53                   	push   ebx
c000c3af:	50                   	push   eax
c000c3b0:	e8 b3 87 00 00       	call   c0014b68 <Thr::executeDLL(unsigned long, void*)>
c000c3b5:	83 c4 10             	add    esp,0x10
c000c3b8:	a1 24 9a 02 c0       	mov    eax,ds:0xc0029a24
c000c3bd:	85 c0                	test   eax,eax
c000c3bf:	0f 84 ef 00 00 00    	je     c000c4b4 <ACPI::open(int, int, void*)+0x3c4>
c000c3c5:	a1 28 9a 02 c0       	mov    eax,ds:0xc0029a28
c000c3ca:	85 c0                	test   eax,eax
c000c3cc:	0f 84 e2 00 00 00    	je     c000c4b4 <ACPI::open(int, int, void*)+0x3c4>
c000c3d2:	83 ec 0c             	sub    esp,0xc
c000c3d5:	68 2b 1b 02 c0       	push   0xc0021b2b
c000c3da:	e8 c4 01 00 00       	call   c000c5a3 <KeSetBootMessage(char const*)>
c000c3df:	83 c4 10             	add    esp,0x10
c000c3e2:	c7 45 c4 14 01 00 00 	mov    DWORD PTR [ebp-0x3c],0x114
c000c3e9:	83 ec 0c             	sub    esp,0xc
c000c3ec:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
c000c3ef:	e8 dc 24 00 00       	call   c000e8d0 <malloc>
c000c3f4:	83 c4 10             	add    esp,0x10
c000c3f7:	89 c3                	mov    ebx,eax
c000c3f9:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c000c3fe:	83 ec 04             	sub    esp,0x4
c000c401:	50                   	push   eax
c000c402:	68 48 1b 02 c0       	push   0xc0021b48
c000c407:	53                   	push   ebx
c000c408:	e8 ff bc ff ff       	call   c000810c <File::File(char const*, Process*)>
c000c40d:	83 c4 10             	add    esp,0x10
c000c410:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c000c413:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c000c417:	74 1b                	je     c000c434 <ACPI::open(int, int, void*)+0x344>
c000c419:	83 ec 0c             	sub    esp,0xc
c000c41c:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
c000c41f:	e8 ca bf ff ff       	call   c00083ee <File::exists()>
c000c424:	83 c4 10             	add    esp,0x10
c000c427:	0f b6 c0             	movzx  eax,al
c000c42a:	85 c0                	test   eax,eax
c000c42c:	74 06                	je     c000c434 <ACPI::open(int, int, void*)+0x344>
c000c42e:	b0 01                	mov    al,0x1
c000c430:	eb 06                	jmp    c000c438 <ACPI::open(int, int, void*)+0x348>
c000c432:	66 90                	xchg   ax,ax
c000c434:	b0 00                	mov    al,0x0
c000c436:	66 90                	xchg   ax,ax
c000c438:	0f b6 c0             	movzx  eax,al
c000c43b:	85 c0                	test   eax,eax
c000c43d:	74 21                	je     c000c460 <ACPI::open(int, int, void*)+0x370>
c000c43f:	83 ec 08             	sub    esp,0x8
c000c442:	6a 01                	push   0x1
c000c444:	68 48 1b 02 c0       	push   0xc0021b48
c000c449:	e8 b9 84 00 00       	call   c0014907 <Thr::loadDLL(char const*, bool)>
c000c44e:	83 c4 10             	add    esp,0x10
c000c451:	83 ec 08             	sub    esp,0x8
c000c454:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000c457:	50                   	push   eax
c000c458:	e8 0b 87 00 00       	call   c0014b68 <Thr::executeDLL(unsigned long, void*)>
c000c45d:	83 c4 10             	add    esp,0x10
c000c460:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c000c464:	74 1e                	je     c000c484 <ACPI::open(int, int, void*)+0x394>
c000c466:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c000c46a:	74 18                	je     c000c484 <ACPI::open(int, int, void*)+0x394>
c000c46c:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c000c46f:	8b 00                	mov    eax,DWORD PTR [eax]
c000c471:	83 c0 08             	add    eax,0x8
c000c474:	8b 00                	mov    eax,DWORD PTR [eax]
c000c476:	83 ec 0c             	sub    esp,0xc
c000c479:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
c000c47c:	ff d0                	call   eax
c000c47e:	83 c4 10             	add    esp,0x10
c000c481:	8d 76 00             	lea    esi,[esi+0x0]
c000c484:	a1 24 9a 02 c0       	mov    eax,ds:0xc0029a24
c000c489:	83 ec 08             	sub    esp,0x8
c000c48c:	68 65 1b 02 c0       	push   0xc0021b65
c000c491:	50                   	push   eax
c000c492:	e8 45 f3 ff ff       	call   c000b7dc <findDataTable(unsigned char*, char*)>
c000c497:	83 c4 10             	add    esp,0x10
c000c49a:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c000c49d:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c000c4a1:	74 11                	je     c000c4b4 <ACPI::open(int, int, void*)+0x3c4>
c000c4a3:	83 ec 08             	sub    esp,0x8
c000c4a6:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c000c4a9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000c4ac:	e8 27 fc ff ff       	call   c000c0d8 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c000c4b1:	83 c4 10             	add    esp,0x10
c000c4b4:	b8 00 00 00 00       	mov    eax,0x0
c000c4b9:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000c4bc:	c9                   	leave  
c000c4bd:	c3                   	ret    

c000c4be <KeInitialiseAtexit()>:
c000c4be:	83 ec 10             	sub    esp,0x10
c000c4c1:	6a 60                	push   0x60
c000c4c3:	6a 00                	push   0x0
c000c4c5:	68 00 9d 02 c0       	push   0xc0029d00
c000c4ca:	c7 05 80 9c 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029c80,0x0
c000c4d4:	e8 17 40 ff ff       	call   c00004f0 <memset>
c000c4d9:	83 c4 1c             	add    esp,0x1c
c000c4dc:	c3                   	ret    

c000c4dd <KeRegisterAtexit(void (*)(void*), void*)>:
c000c4dd:	a1 80 9c 02 c0       	mov    eax,ds:0xc0029c80
c000c4e2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000c4e6:	89 14 85 00 9d 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6300],edx
c000c4ed:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c4f1:	89 14 85 a0 9c 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6360],edx
c000c4f8:	40                   	inc    eax
c000c4f9:	a3 80 9c 02 c0       	mov    ds:0xc0029c80,eax
c000c4fe:	83 f8 17             	cmp    eax,0x17
c000c501:	7e 0d                	jle    c000c510 <KeRegisterAtexit(void (*)(void*), void*)+0x33>
c000c503:	c7 44 24 04 10 1c 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021c10
c000c50b:	e9 16 27 00 00       	jmp    c000ec26 <KePanic(char const*)>
c000c510:	c3                   	ret    

c000c511 <KeExecuteAtexit()>:
c000c511:	53                   	push   ebx
c000c512:	31 db                	xor    ebx,ebx
c000c514:	83 ec 08             	sub    esp,0x8
c000c517:	39 1d 80 9c 02 c0    	cmp    DWORD PTR ds:0xc0029c80,ebx
c000c51d:	7e 50                	jle    c000c56f <KeExecuteAtexit()+0x5e>
c000c51f:	8b 04 9d 00 9d 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd6300]
c000c526:	85 c0                	test   eax,eax
c000c528:	74 42                	je     c000c56c <KeExecuteAtexit()+0x5b>
c000c52a:	51                   	push   ecx
c000c52b:	50                   	push   eax
c000c52c:	53                   	push   ebx
c000c52d:	68 29 1c 02 c0       	push   0xc0021c29
c000c532:	e8 17 aa ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000c537:	58                   	pop    eax
c000c538:	ff 34 9d a0 9c 02 c0 	push   DWORD PTR [ebx*4-0x3ffd6360]
c000c53f:	ff 14 9d 00 9d 02 c0 	call   DWORD PTR [ebx*4-0x3ffd6300]
c000c546:	c7 04 24 4b 1c 02 c0 	mov    DWORD PTR [esp],0xc0021c4b
c000c54d:	e8 fc a9 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000c552:	c7 04 24 cb 1f 02 c0 	mov    DWORD PTR [esp],0xc0021fcb
c000c559:	c7 04 9d 00 9d 02 c0 00 00 00 00 	mov    DWORD PTR [ebx*4-0x3ffd6300],0x0
c000c564:	e8 e5 a9 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000c569:	83 c4 10             	add    esp,0x10
c000c56c:	43                   	inc    ebx
c000c56d:	eb a8                	jmp    c000c517 <KeExecuteAtexit()+0x6>
c000c56f:	83 c4 08             	add    esp,0x8
c000c572:	5b                   	pop    ebx
c000c573:	c3                   	ret    

c000c574 <KeDisplaySplashScreen()>:
c000c574:	53                   	push   ebx
c000c575:	bb 01 00 00 00       	mov    ebx,0x1
c000c57a:	83 ec 08             	sub    esp,0x8
c000c57d:	43                   	inc    ebx
c000c57e:	0f be 83 4e 1c 02 c0 	movsx  eax,BYTE PTR [ebx-0x3ffde3b2]
c000c585:	85 c0                	test   eax,eax
c000c587:	74 15                	je     c000c59e <KeDisplaySplashScreen()+0x2a>
c000c589:	83 ec 0c             	sub    esp,0xc
c000c58c:	6a 01                	push   0x1
c000c58e:	53                   	push   ebx
c000c58f:	6a 00                	push   0x0
c000c591:	6a 0f                	push   0xf
c000c593:	50                   	push   eax
c000c594:	e8 57 cf 00 00       	call   c00194f0 <HalConsoleWriteCharacter(char, int, int, int, int)>
c000c599:	83 c4 20             	add    esp,0x20
c000c59c:	eb df                	jmp    c000c57d <KeDisplaySplashScreen()+0x9>
c000c59e:	83 c4 08             	add    esp,0x8
c000c5a1:	5b                   	pop    ebx
c000c5a2:	c3                   	ret    

c000c5a3 <KeSetBootMessage(char const*)>:
c000c5a3:	57                   	push   edi
c000c5a4:	56                   	push   esi
c000c5a5:	53                   	push   ebx
c000c5a6:	81 ec a4 00 00 00    	sub    esp,0xa4
c000c5ac:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c000c5b3:	68 9e 00 00 00       	push   0x9e
c000c5b8:	6a 00                	push   0x0
c000c5ba:	8d 74 24 0e          	lea    esi,[esp+0xe]
c000c5be:	56                   	push   esi
c000c5bf:	e8 2c 3f ff ff       	call   c00004f0 <memset>
c000c5c4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000c5c7:	e8 b4 3f ff ff       	call   c0000580 <strlen>
c000c5cc:	ba 50 00 00 00       	mov    edx,0x50
c000c5d1:	83 c4 10             	add    esp,0x10
c000c5d4:	31 c9                	xor    ecx,ecx
c000c5d6:	29 c2                	sub    edx,eax
c000c5d8:	83 e2 fe             	and    edx,0xfffffffe
c000c5db:	01 f2                	add    edx,esi
c000c5dd:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c000c5e2:	84 c0                	test   al,al
c000c5e4:	74 0a                	je     c000c5f0 <KeSetBootMessage(char const*)+0x4d>
c000c5e6:	80 cc 07             	or     ah,0x7
c000c5e9:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c000c5ed:	41                   	inc    ecx
c000c5ee:	eb ed                	jmp    c000c5dd <KeSetBootMessage(char const*)+0x3a>
c000c5f0:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c000c5f5:	b9 9e 00 00 00       	mov    ecx,0x9e
c000c5fa:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c5fc:	50                   	push   eax
c000c5fd:	50                   	push   eax
c000c5fe:	53                   	push   ebx
c000c5ff:	68 63 1c 02 c0       	push   0xc0021c63
c000c604:	e8 45 a9 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000c609:	81 c4 b0 00 00 00    	add    esp,0xb0
c000c60f:	5b                   	pop    ebx
c000c610:	5e                   	pop    esi
c000c611:	5f                   	pop    edi
c000c612:	c3                   	ret    

c000c613 <__cxa_atexit>:
c000c613:	31 c0                	xor    eax,eax
c000c615:	c3                   	ret    

c000c616 <__cxa_finalize>:
c000c616:	c3                   	ret    

c000c617 <__stack_chk_fail>:
c000c617:	55                   	push   ebp
c000c618:	89 e5                	mov    ebp,esp
c000c61a:	83 ec 10             	sub    esp,0x10
c000c61d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c620:	68 71 1c 02 c0       	push   0xc0021c71
c000c625:	e8 24 a9 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000c62a:	58                   	pop    eax
c000c62b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c62e:	5a                   	pop    edx
c000c62f:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000c632:	68 71 1c 02 c0       	push   0xc0021c71
c000c637:	e8 12 a9 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000c63c:	c7 04 24 79 1c 02 c0 	mov    DWORD PTR [esp],0xc0021c79
c000c643:	e8 de 25 00 00       	call   c000ec26 <KePanic(char const*)>
c000c648:	83 c4 10             	add    esp,0x10
c000c64b:	c9                   	leave  
c000c64c:	c3                   	ret    

c000c64d <__cxa_pure_virtual>:
c000c64d:	83 ec 18             	sub    esp,0x18
c000c650:	68 91 1c 02 c0       	push   0xc0021c91
c000c655:	e8 cc 25 00 00       	call   c000ec26 <KePanic(char const*)>
c000c65a:	83 c4 1c             	add    esp,0x1c
c000c65d:	c3                   	ret    

c000c65e <operator new[](unsigned long)>:
c000c65e:	e9 6d 22 00 00       	jmp    c000e8d0 <malloc>

c000c663 <operator delete(void*, unsigned long)>:
c000c663:	e9 88 22 00 00       	jmp    c000e8f0 <rfree>

c000c668 <operator delete[](void*)>:
c000c668:	e9 83 22 00 00       	jmp    c000e8f0 <rfree>

c000c66d <operator delete[](void*, unsigned long)>:
c000c66d:	e9 7e 22 00 00       	jmp    c000e8f0 <rfree>
c000c672:	66 90                	xchg   ax,ax

c000c674 <CUnlockScheduler>:
c000c674:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000c679:	83 e8 01             	sub    eax,0x1
c000c67c:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c000c681:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000c686:	85 c0                	test   eax,eax
c000c688:	75 02                	jne    c000c68c <CUnlockScheduler+0x18>
c000c68a:	fb                   	sti    
c000c68b:	90                   	nop
c000c68c:	90                   	nop
c000c68d:	c3                   	ret    
c000c68e:	66 90                	xchg   ax,ax

c000c690 <CLockScheduler>:
c000c690:	fa                   	cli    
c000c691:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000c696:	83 c0 01             	add    eax,0x1
c000c699:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c000c69e:	90                   	nop
c000c69f:	c3                   	ret    

c000c6a0 <CPrintf>:
c000c6a0:	83 ec 0c             	sub    esp,0xc
c000c6a3:	83 ec 08             	sub    esp,0x8
c000c6a6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c6aa:	68 a4 1c 02 c0       	push   0xc0021ca4
c000c6af:	e8 9a a8 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000c6b4:	83 c4 10             	add    esp,0x10
c000c6b7:	90                   	nop
c000c6b8:	83 c4 0c             	add    esp,0xc
c000c6bb:	c3                   	ret    

c000c6bc <CmOpen(char const*)>:
c000c6bc:	57                   	push   edi
c000c6bd:	56                   	push   esi
c000c6be:	53                   	push   ebx
c000c6bf:	83 ec 1c             	sub    esp,0x1c
c000c6c2:	6a 30                	push   0x30
c000c6c4:	e8 07 22 00 00       	call   c000e8d0 <malloc>
c000c6c9:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c000c6d0:	89 c3                	mov    ebx,eax
c000c6d2:	e8 f9 21 00 00       	call   c000e8d0 <malloc>
c000c6d7:	83 c4 0c             	add    esp,0xc
c000c6da:	ff 35 d8 c6 02 c0    	push   DWORD PTR ds:0xc002c6d8
c000c6e0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000c6e4:	89 c6                	mov    esi,eax
c000c6e6:	50                   	push   eax
c000c6e7:	e8 20 ba ff ff       	call   c000810c <File::File(char const*, Process*)>
c000c6ec:	83 c4 0c             	add    esp,0xc
c000c6ef:	89 33                	mov    DWORD PTR [ebx],esi
c000c6f1:	8d 44 24 07          	lea    eax,[esp+0x7]
c000c6f5:	50                   	push   eax
c000c6f6:	8d 44 24 10          	lea    eax,[esp+0x10]
c000c6fa:	50                   	push   eax
c000c6fb:	56                   	push   esi
c000c6fc:	e8 2b bd ff ff       	call   c000842c <File::stat(unsigned long long*, bool*)>
c000c701:	5a                   	pop    edx
c000c702:	59                   	pop    ecx
c000c703:	6a 01                	push   0x1
c000c705:	ff 33                	push   DWORD PTR [ebx]
c000c707:	e8 1e ba ff ff       	call   c000812a <File::open(FileOpenMode)>
c000c70c:	5e                   	pop    esi
c000c70d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c711:	e8 ba 21 00 00       	call   c000e8d0 <malloc>
c000c716:	5a                   	pop    edx
c000c717:	8d 74 24 10          	lea    esi,[esp+0x10]
c000c71b:	89 c7                	mov    edi,eax
c000c71d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c71f:	8b 10                	mov    edx,DWORD PTR [eax]
c000c721:	56                   	push   esi
c000c722:	57                   	push   edi
c000c723:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c727:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c72b:	50                   	push   eax
c000c72c:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000c72f:	83 c4 14             	add    esp,0x14
c000c732:	ff 33                	push   DWORD PTR [ebx]
c000c734:	e8 4f ba ff ff       	call   c0008188 <File::close()>
c000c739:	59                   	pop    ecx
c000c73a:	58                   	pop    eax
c000c73b:	6a 13                	push   0x13
c000c73d:	ff 33                	push   DWORD PTR [ebx]
c000c73f:	e8 e6 b9 ff ff       	call   c000812a <File::open(FileOpenMode)>
c000c744:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c746:	8b 10                	mov    edx,DWORD PTR [eax]
c000c748:	89 34 24             	mov    DWORD PTR [esp],esi
c000c74b:	57                   	push   edi
c000c74c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c750:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c754:	50                   	push   eax
c000c755:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000c758:	83 c4 14             	add    esp,0x14
c000c75b:	57                   	push   edi
c000c75c:	e8 7f 21 00 00       	call   c000e8e0 <free>
c000c761:	83 c4 10             	add    esp,0x10
c000c764:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c767:	75 10                	jne    c000c779 <CmOpen(char const*)+0xbd>
c000c769:	83 ec 0c             	sub    esp,0xc
c000c76c:	68 a7 1c 02 c0       	push   0xc0021ca7
c000c771:	e8 b0 24 00 00       	call   c000ec26 <KePanic(char const*)>
c000c776:	83 c4 10             	add    esp,0x10
c000c779:	50                   	push   eax
c000c77a:	6a 00                	push   0x0
c000c77c:	6a 00                	push   0x0
c000c77e:	ff 33                	push   DWORD PTR [ebx]
c000c780:	8d 7b 05             	lea    edi,[ebx+0x5]
c000c783:	e8 60 ba ff ff       	call   c00081e8 <File::seek(unsigned long long)>
c000c788:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c78a:	8b 10                	mov    edx,DWORD PTR [eax]
c000c78c:	89 34 24             	mov    DWORD PTR [esp],esi
c000c78f:	57                   	push   edi
c000c790:	6a 00                	push   0x0
c000c792:	6a 2b                	push   0x2b
c000c794:	50                   	push   eax
c000c795:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000c798:	83 c4 1c             	add    esp,0x1c
c000c79b:	6a 00                	push   0x0
c000c79d:	6a 00                	push   0x0
c000c79f:	ff 33                	push   DWORD PTR [ebx]
c000c7a1:	e8 42 ba ff ff       	call   c00081e8 <File::seek(unsigned long long)>
c000c7a6:	83 c4 0c             	add    esp,0xc
c000c7a9:	6a 08                	push   0x8
c000c7ab:	68 b8 1c 02 c0       	push   0xc0021cb8
c000c7b0:	57                   	push   edi
c000c7b1:	e8 ca 3b ff ff       	call   c0000380 <memcmp>
c000c7b6:	83 c4 10             	add    esp,0x10
c000c7b9:	85 c0                	test   eax,eax
c000c7bb:	74 10                	je     c000c7cd <CmOpen(char const*)+0x111>
c000c7bd:	83 ec 0c             	sub    esp,0xc
c000c7c0:	68 c1 1c 02 c0       	push   0xc0021cc1
c000c7c5:	e8 5c 24 00 00       	call   c000ec26 <KePanic(char const*)>
c000c7ca:	83 c4 10             	add    esp,0x10
c000c7cd:	c6 43 04 01          	mov    BYTE PTR [ebx+0x4],0x1
c000c7d1:	83 c4 10             	add    esp,0x10
c000c7d4:	89 d8                	mov    eax,ebx
c000c7d6:	5b                   	pop    ebx
c000c7d7:	5e                   	pop    esi
c000c7d8:	5f                   	pop    edi
c000c7d9:	c3                   	ret    

c000c7da <CmClose(Reghive_Tag*)>:
c000c7da:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c7de:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c000c7e2:	74 0b                	je     c000c7ef <CmClose(Reghive_Tag*)+0x15>
c000c7e4:	8b 00                	mov    eax,DWORD PTR [eax]
c000c7e6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c7ea:	e9 99 b9 ff ff       	jmp    c0008188 <File::close()>
c000c7ef:	c3                   	ret    

c000c7f0 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>:
c000c7f0:	53                   	push   ebx
c000c7f1:	83 ec 18             	sub    esp,0x18
c000c7f4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000c7f8:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c000c7fc:	74 29                	je     c000c827 <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c000c7fe:	50                   	push   eax
c000c7ff:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c000c804:	99                   	cdq    
c000c805:	52                   	push   edx
c000c806:	50                   	push   eax
c000c807:	ff 33                	push   DWORD PTR [ebx]
c000c809:	e8 da b9 ff ff       	call   c00081e8 <File::seek(unsigned long long)>
c000c80e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c810:	5a                   	pop    edx
c000c811:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000c815:	8b 10                	mov    edx,DWORD PTR [eax]
c000c817:	51                   	push   ecx
c000c818:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000c81c:	6a 00                	push   0x0
c000c81e:	6a 2b                	push   0x2b
c000c820:	50                   	push   eax
c000c821:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000c824:	83 c4 20             	add    esp,0x20
c000c827:	83 c4 18             	add    esp,0x18
c000c82a:	5b                   	pop    ebx
c000c82b:	c3                   	ret    

c000c82c <CmGetString(Reghive_Tag*, int, char*)>:
c000c82c:	55                   	push   ebp
c000c82d:	57                   	push   edi
c000c82e:	56                   	push   esi
c000c82f:	53                   	push   ebx
c000c830:	31 db                	xor    ebx,ebx
c000c832:	83 ec 70             	sub    esp,0x70
c000c835:	8d 44 24 0e          	lea    eax,[esp+0xe]
c000c839:	8b ac 24 84 00 00 00 	mov    ebp,DWORD PTR [esp+0x84]
c000c840:	50                   	push   eax
c000c841:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c000c848:	55                   	push   ebp
c000c849:	e8 a2 ff ff ff       	call   c000c7f0 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000c84e:	83 c4 10             	add    esp,0x10
c000c851:	0f b6 44 1c 22       	movzx  eax,BYTE PTR [esp+ebx*1+0x22]
c000c856:	c1 e0 08             	shl    eax,0x8
c000c859:	89 c2                	mov    edx,eax
c000c85b:	0f b6 44 1c 21       	movzx  eax,BYTE PTR [esp+ebx*1+0x21]
c000c860:	09 d0                	or     eax,edx
c000c862:	0f b6 54 1c 20       	movzx  edx,BYTE PTR [esp+ebx*1+0x20]
c000c867:	c1 e0 08             	shl    eax,0x8
c000c86a:	09 d0                	or     eax,edx
c000c86c:	74 25                	je     c000c893 <CmGetString(Reghive_Tag*, int, char*)+0x67>
c000c86e:	52                   	push   edx
c000c86f:	8d 54 24 39          	lea    edx,[esp+0x39]
c000c873:	52                   	push   edx
c000c874:	6b fb 0d             	imul   edi,ebx,0xd
c000c877:	50                   	push   eax
c000c878:	55                   	push   ebp
c000c879:	e8 72 ff ff ff       	call   c000c7f0 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000c87e:	8d 74 24 49          	lea    esi,[esp+0x49]
c000c882:	b9 27 00 00 00       	mov    ecx,0x27
c000c887:	03 bc 24 98 00 00 00 	add    edi,DWORD PTR [esp+0x98]
c000c88e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c890:	83 c4 10             	add    esp,0x10
c000c893:	83 c3 03             	add    ebx,0x3
c000c896:	83 fb 15             	cmp    ebx,0x15
c000c899:	75 b6                	jne    c000c851 <CmGetString(Reghive_Tag*, int, char*)+0x25>
c000c89b:	83 c4 6c             	add    esp,0x6c
c000c89e:	5b                   	pop    ebx
c000c89f:	5e                   	pop    esi
c000c8a0:	5f                   	pop    edi
c000c8a1:	5d                   	pop    ebp
c000c8a2:	c3                   	ret    

c000c8a3 <CmEnterDirectory(Reghive_Tag*, int)>:
c000c8a3:	83 ec 40             	sub    esp,0x40
c000c8a6:	8d 44 24 09          	lea    eax,[esp+0x9]
c000c8aa:	50                   	push   eax
c000c8ab:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c8af:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c8b3:	e8 38 ff ff ff       	call   c000c7f0 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000c8b8:	83 c4 10             	add    esp,0x10
c000c8bb:	83 c8 ff             	or     eax,0xffffffff
c000c8be:	80 7c 24 05 4e       	cmp    BYTE PTR [esp+0x5],0x4e
c000c8c3:	75 19                	jne    c000c8de <CmEnterDirectory(Reghive_Tag*, int)+0x3b>
c000c8c5:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000c8ca:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c000c8cf:	c1 e0 08             	shl    eax,0x8
c000c8d2:	09 c2                	or     edx,eax
c000c8d4:	0f b6 44 24 1d       	movzx  eax,BYTE PTR [esp+0x1d]
c000c8d9:	c1 e0 10             	shl    eax,0x10
c000c8dc:	09 d0                	or     eax,edx
c000c8de:	83 c4 3c             	add    esp,0x3c
c000c8e1:	c3                   	ret    

c000c8e2 <CmGetNext(Reghive_Tag*, int)>:
c000c8e2:	83 ec 40             	sub    esp,0x40
c000c8e5:	8d 44 24 09          	lea    eax,[esp+0x9]
c000c8e9:	50                   	push   eax
c000c8ea:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c8ee:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c8f2:	e8 f9 fe ff ff       	call   c000c7f0 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000c8f7:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c000c8fc:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c000c901:	c1 e0 08             	shl    eax,0x8
c000c904:	09 c2                	or     edx,eax
c000c906:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c000c90b:	83 c4 4c             	add    esp,0x4c
c000c90e:	c1 e0 10             	shl    eax,0x10
c000c911:	09 d0                	or     eax,edx
c000c913:	c3                   	ret    

c000c914 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>:
c000c914:	53                   	push   ebx
c000c915:	83 ec 18             	sub    esp,0x18
c000c918:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000c91c:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c000c920:	74 29                	je     c000c94b <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c000c922:	50                   	push   eax
c000c923:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c000c928:	99                   	cdq    
c000c929:	52                   	push   edx
c000c92a:	50                   	push   eax
c000c92b:	ff 33                	push   DWORD PTR [ebx]
c000c92d:	e8 b6 b8 ff ff       	call   c00081e8 <File::seek(unsigned long long)>
c000c932:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c934:	5a                   	pop    edx
c000c935:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000c939:	8b 10                	mov    edx,DWORD PTR [eax]
c000c93b:	51                   	push   ecx
c000c93c:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000c940:	6a 00                	push   0x0
c000c942:	6a 2b                	push   0x2b
c000c944:	50                   	push   eax
c000c945:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000c948:	83 c4 20             	add    esp,0x20
c000c94b:	83 c4 18             	add    esp,0x18
c000c94e:	5b                   	pop    ebx
c000c94f:	c3                   	ret    

c000c950 <CmFreeExtent(Reghive_Tag*, int)>:
c000c950:	53                   	push   ebx
c000c951:	83 ec 3c             	sub    esp,0x3c
c000c954:	6a 2b                	push   0x2b
c000c956:	6a 00                	push   0x0
c000c958:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c000c95c:	53                   	push   ebx
c000c95d:	e8 8e 3b ff ff       	call   c00004f0 <memset>
c000c962:	83 c4 0c             	add    esp,0xc
c000c965:	53                   	push   ebx
c000c966:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c96a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c96e:	e8 a1 ff ff ff       	call   c000c914 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000c973:	83 c4 48             	add    esp,0x48
c000c976:	5b                   	pop    ebx
c000c977:	c3                   	ret    

c000c978 <CmUpdateHeader(Reghive_Tag*)>:
c000c978:	83 ec 0c             	sub    esp,0xc
c000c97b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c97f:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c000c983:	74 10                	je     c000c995 <CmUpdateHeader(Reghive_Tag*)+0x1d>
c000c985:	52                   	push   edx
c000c986:	8d 50 05             	lea    edx,[eax+0x5]
c000c989:	52                   	push   edx
c000c98a:	6a 00                	push   0x0
c000c98c:	50                   	push   eax
c000c98d:	e8 82 ff ff ff       	call   c000c914 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000c992:	83 c4 10             	add    esp,0x10
c000c995:	83 c4 0c             	add    esp,0xc
c000c998:	c3                   	ret    

c000c999 <CmExpand(Reghive_Tag*, int)>:
c000c999:	55                   	push   ebp
c000c99a:	57                   	push   edi
c000c99b:	83 cf ff             	or     edi,0xffffffff
c000c99e:	56                   	push   esi
c000c99f:	53                   	push   ebx
c000c9a0:	83 ec 3c             	sub    esp,0x3c
c000c9a3:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c000c9a7:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000c9ab:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c000c9af:	74 59                	je     c000ca0a <CmExpand(Reghive_Tag*, int)+0x71>
c000c9b1:	50                   	push   eax
c000c9b2:	31 d2                	xor    edx,edx
c000c9b4:	6b 43 0d 2b          	imul   eax,DWORD PTR [ebx+0xd],0x2b
c000c9b8:	31 ff                	xor    edi,edi
c000c9ba:	52                   	push   edx
c000c9bb:	50                   	push   eax
c000c9bc:	ff 33                	push   DWORD PTR [ebx]
c000c9be:	e8 25 b8 ff ff       	call   c00081e8 <File::seek(unsigned long long)>
c000c9c3:	83 c4 0c             	add    esp,0xc
c000c9c6:	6a 2b                	push   0x2b
c000c9c8:	6a 00                	push   0x0
c000c9ca:	8d 6c 24 11          	lea    ebp,[esp+0x11]
c000c9ce:	55                   	push   ebp
c000c9cf:	e8 1c 3b ff ff       	call   c00004f0 <memset>
c000c9d4:	83 c4 10             	add    esp,0x10
c000c9d7:	39 f7                	cmp    edi,esi
c000c9d9:	7d 1b                	jge    c000c9f6 <CmExpand(Reghive_Tag*, int)+0x5d>
c000c9db:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c9dd:	83 ec 0c             	sub    esp,0xc
c000c9e0:	47                   	inc    edi
c000c9e1:	8d 4c 24 0c          	lea    ecx,[esp+0xc]
c000c9e5:	8b 10                	mov    edx,DWORD PTR [eax]
c000c9e7:	51                   	push   ecx
c000c9e8:	55                   	push   ebp
c000c9e9:	6a 00                	push   0x0
c000c9eb:	6a 2b                	push   0x2b
c000c9ed:	50                   	push   eax
c000c9ee:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000c9f1:	83 c4 20             	add    esp,0x20
c000c9f4:	eb e1                	jmp    c000c9d7 <CmExpand(Reghive_Tag*, int)+0x3e>
c000c9f6:	8b 7b 0d             	mov    edi,DWORD PTR [ebx+0xd]
c000c9f9:	83 ec 0c             	sub    esp,0xc
c000c9fc:	01 fe                	add    esi,edi
c000c9fe:	89 73 0d             	mov    DWORD PTR [ebx+0xd],esi
c000ca01:	53                   	push   ebx
c000ca02:	e8 71 ff ff ff       	call   c000c978 <CmUpdateHeader(Reghive_Tag*)>
c000ca07:	83 c4 10             	add    esp,0x10
c000ca0a:	83 c4 3c             	add    esp,0x3c
c000ca0d:	89 f8                	mov    eax,edi
c000ca0f:	5b                   	pop    ebx
c000ca10:	5e                   	pop    esi
c000ca11:	5f                   	pop    edi
c000ca12:	5d                   	pop    ebp
c000ca13:	c3                   	ret    

c000ca14 <CmFindUnusedExtent(Reghive_Tag*)>:
c000ca14:	55                   	push   ebp
c000ca15:	57                   	push   edi
c000ca16:	56                   	push   esi
c000ca17:	53                   	push   ebx
c000ca18:	83 cb ff             	or     ebx,0xffffffff
c000ca1b:	83 ec 1c             	sub    esp,0x1c
c000ca1e:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000ca22:	80 7d 04 00          	cmp    BYTE PTR [ebp+0x4],0x0
c000ca26:	74 68                	je     c000ca90 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c000ca28:	51                   	push   ecx
c000ca29:	be 2b 00 00 00       	mov    esi,0x2b
c000ca2e:	6a 00                	push   0x0
c000ca30:	31 ff                	xor    edi,edi
c000ca32:	6a 00                	push   0x0
c000ca34:	31 db                	xor    ebx,ebx
c000ca36:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ca39:	e8 aa b7 ff ff       	call   c00081e8 <File::seek(unsigned long long)>
c000ca3e:	83 c4 10             	add    esp,0x10
c000ca41:	39 5d 0d             	cmp    DWORD PTR [ebp+0xd],ebx
c000ca44:	76 3b                	jbe    c000ca81 <CmFindUnusedExtent(Reghive_Tag*)+0x6d>
c000ca46:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ca49:	83 ec 0c             	sub    esp,0xc
c000ca4c:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000ca50:	8b 10                	mov    edx,DWORD PTR [eax]
c000ca52:	51                   	push   ecx
c000ca53:	8d 4c 24 1b          	lea    ecx,[esp+0x1b]
c000ca57:	51                   	push   ecx
c000ca58:	6a 00                	push   0x0
c000ca5a:	6a 01                	push   0x1
c000ca5c:	50                   	push   eax
c000ca5d:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000ca60:	83 c4 20             	add    esp,0x20
c000ca63:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000ca68:	74 26                	je     c000ca90 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c000ca6a:	52                   	push   edx
c000ca6b:	43                   	inc    ebx
c000ca6c:	57                   	push   edi
c000ca6d:	56                   	push   esi
c000ca6e:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ca71:	e8 72 b7 ff ff       	call   c00081e8 <File::seek(unsigned long long)>
c000ca76:	83 c6 2b             	add    esi,0x2b
c000ca79:	83 d7 00             	adc    edi,0x0
c000ca7c:	83 c4 10             	add    esp,0x10
c000ca7f:	eb c0                	jmp    c000ca41 <CmFindUnusedExtent(Reghive_Tag*)+0x2d>
c000ca81:	50                   	push   eax
c000ca82:	50                   	push   eax
c000ca83:	6a 40                	push   0x40
c000ca85:	55                   	push   ebp
c000ca86:	e8 0e ff ff ff       	call   c000c999 <CmExpand(Reghive_Tag*, int)>
c000ca8b:	83 c4 10             	add    esp,0x10
c000ca8e:	89 c3                	mov    ebx,eax
c000ca90:	83 c4 1c             	add    esp,0x1c
c000ca93:	89 d8                	mov    eax,ebx
c000ca95:	5b                   	pop    ebx
c000ca96:	5e                   	pop    esi
c000ca97:	5f                   	pop    edi
c000ca98:	5d                   	pop    ebp
c000ca99:	c3                   	ret    

c000ca9a <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>:
c000ca9a:	55                   	push   ebp
c000ca9b:	57                   	push   edi
c000ca9c:	56                   	push   esi
c000ca9d:	53                   	push   ebx
c000ca9e:	81 ec 88 00 00 00    	sub    esp,0x88
c000caa4:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c000caab:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000cab2:	e8 5d ff ff ff       	call   c000ca14 <CmFindUnusedExtent(Reghive_Tag*)>
c000cab7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000cabb:	83 c4 0c             	add    esp,0xc
c000cabe:	6a 2b                	push   0x2b
c000cac0:	6a 00                	push   0x0
c000cac2:	8d 6c 24 26          	lea    ebp,[esp+0x26]
c000cac6:	55                   	push   ebp
c000cac7:	e8 24 3a ff ff       	call   c00004f0 <memset>
c000cacc:	83 c4 10             	add    esp,0x10
c000cacf:	85 db                	test   ebx,ebx
c000cad1:	74 12                	je     c000cae5 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x4b>
c000cad3:	51                   	push   ecx
c000cad4:	55                   	push   ebp
c000cad5:	53                   	push   ebx
c000cad6:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000cadd:	e8 0e fd ff ff       	call   c000c7f0 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000cae2:	83 c4 10             	add    esp,0x10
c000cae5:	8d 7c 24 45          	lea    edi,[esp+0x45]
c000cae9:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c000caf0:	b9 2b 00 00 00       	mov    ecx,0x2b
c000caf5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000caf7:	85 db                	test   ebx,ebx
c000caf9:	74 49                	je     c000cb44 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xaa>
c000cafb:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c000cb00:	0f b6 4c 24 1b       	movzx  ecx,BYTE PTR [esp+0x1b]
c000cb05:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cb09:	c1 e0 08             	shl    eax,0x8
c000cb0c:	81 e2 ff ff ff 00    	and    edx,0xffffff
c000cb12:	09 c8                	or     eax,ecx
c000cb14:	74 11                	je     c000cb27 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x8d>
c000cb16:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c000cb1a:	88 64 24 47          	mov    BYTE PTR [esp+0x47],ah
c000cb1e:	c1 e8 10             	shr    eax,0x10
c000cb21:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c000cb25:	eb 0f                	jmp    c000cb36 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x9c>
c000cb27:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c000cb2c:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c000cb31:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c000cb36:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c000cb3a:	c1 ea 08             	shr    edx,0x8
c000cb3d:	66 89 54 24 1c       	mov    WORD PTR [esp+0x1c],dx
c000cb42:	eb 0f                	jmp    c000cb53 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xb9>
c000cb44:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c000cb49:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c000cb4e:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c000cb53:	52                   	push   edx
c000cb54:	8d 44 24 49          	lea    eax,[esp+0x49]
c000cb58:	50                   	push   eax
c000cb59:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cb5d:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000cb64:	e8 ab fd ff ff       	call   c000c914 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000cb69:	83 c4 10             	add    esp,0x10
c000cb6c:	85 db                	test   ebx,ebx
c000cb6e:	74 12                	je     c000cb82 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xe8>
c000cb70:	50                   	push   eax
c000cb71:	55                   	push   ebp
c000cb72:	53                   	push   ebx
c000cb73:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000cb7a:	e8 95 fd ff ff       	call   c000c914 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000cb7f:	83 c4 10             	add    esp,0x10
c000cb82:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000cb86:	83 c4 7c             	add    esp,0x7c
c000cb89:	5b                   	pop    ebx
c000cb8a:	5e                   	pop    esi
c000cb8b:	5f                   	pop    edi
c000cb8c:	5d                   	pop    ebp
c000cb8d:	c3                   	ret    

c000cb8e <CmSetString(Reghive_Tag*, int, char const*)>:
c000cb8e:	55                   	push   ebp
c000cb8f:	57                   	push   edi
c000cb90:	56                   	push   esi
c000cb91:	53                   	push   ebx
c000cb92:	bb 27 00 00 00       	mov    ebx,0x27
c000cb97:	81 ec 88 00 00 00    	sub    esp,0x88
c000cb9d:	8b bc 24 9c 00 00 00 	mov    edi,DWORD PTR [esp+0x9c]
c000cba4:	ff b4 24 a4 00 00 00 	push   DWORD PTR [esp+0xa4]
c000cbab:	e8 d0 39 ff ff       	call   c0000580 <strlen>
c000cbb0:	8d 48 26             	lea    ecx,[eax+0x26]
c000cbb3:	89 c8                	mov    eax,ecx
c000cbb5:	99                   	cdq    
c000cbb6:	f7 fb                	idiv   ebx
c000cbb8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000cbbc:	83 c4 10             	add    esp,0x10
c000cbbf:	81 f9 37 01 00 00    	cmp    ecx,0x137
c000cbc5:	7e 10                	jle    c000cbd7 <CmSetString(Reghive_Tag*, int, char const*)+0x49>
c000cbc7:	83 ec 0c             	sub    esp,0xc
c000cbca:	68 d2 1c 02 c0       	push   0xc0021cd2
c000cbcf:	e8 52 20 00 00       	call   c000ec26 <KePanic(char const*)>
c000cbd4:	83 c4 10             	add    esp,0x10
c000cbd7:	53                   	push   ebx
c000cbd8:	31 ed                	xor    ebp,ebp
c000cbda:	8d 5c 24 1e          	lea    ebx,[esp+0x1e]
c000cbde:	53                   	push   ebx
c000cbdf:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000cbe6:	57                   	push   edi
c000cbe7:	e8 04 fc ff ff       	call   c000c7f0 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000cbec:	83 c4 10             	add    esp,0x10
c000cbef:	0f b6 73 18          	movzx  esi,BYTE PTR [ebx+0x18]
c000cbf3:	89 f0                	mov    eax,esi
c000cbf5:	0f b6 73 17          	movzx  esi,BYTE PTR [ebx+0x17]
c000cbf9:	c1 e0 08             	shl    eax,0x8
c000cbfc:	09 c6                	or     esi,eax
c000cbfe:	0f b6 43 16          	movzx  eax,BYTE PTR [ebx+0x16]
c000cc02:	c1 e6 08             	shl    esi,0x8
c000cc05:	09 c6                	or     esi,eax
c000cc07:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c000cc0b:	7e 72                	jle    c000cc7f <CmSetString(Reghive_Tag*, int, char const*)+0xf1>
c000cc0d:	85 f6                	test   esi,esi
c000cc0f:	75 25                	jne    c000cc36 <CmSetString(Reghive_Tag*, int, char const*)+0xa8>
c000cc11:	c6 44 24 45 13       	mov    BYTE PTR [esp+0x45],0x13
c000cc16:	8d 44 24 45          	lea    eax,[esp+0x45]
c000cc1a:	50                   	push   eax
c000cc1b:	6a 00                	push   0x0
c000cc1d:	6a 00                	push   0x0
c000cc1f:	57                   	push   edi
c000cc20:	e8 75 fe ff ff       	call   c000ca9a <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000cc25:	83 c4 10             	add    esp,0x10
c000cc28:	88 43 16             	mov    BYTE PTR [ebx+0x16],al
c000cc2b:	89 c6                	mov    esi,eax
c000cc2d:	88 63 17             	mov    BYTE PTR [ebx+0x17],ah
c000cc30:	c1 f8 10             	sar    eax,0x10
c000cc33:	88 43 18             	mov    BYTE PTR [ebx+0x18],al
c000cc36:	51                   	push   ecx
c000cc37:	8d 54 24 49          	lea    edx,[esp+0x49]
c000cc3b:	52                   	push   edx
c000cc3c:	56                   	push   esi
c000cc3d:	57                   	push   edi
c000cc3e:	e8 ad fb ff ff       	call   c000c7f0 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000cc43:	83 c4 0c             	add    esp,0xc
c000cc46:	6a 27                	push   0x27
c000cc48:	6a 00                	push   0x0
c000cc4a:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c000cc4e:	51                   	push   ecx
c000cc4f:	e8 9c 38 ff ff       	call   c00004f0 <memset>
c000cc54:	6b c5 27             	imul   eax,ebp,0x27
c000cc57:	83 c4 0c             	add    esp,0xc
c000cc5a:	6a 27                	push   0x27
c000cc5c:	03 84 24 a0 00 00 00 	add    eax,DWORD PTR [esp+0xa0]
c000cc63:	50                   	push   eax
c000cc64:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c000cc68:	51                   	push   ecx
c000cc69:	e8 22 3a ff ff       	call   c0000690 <strncpy>
c000cc6e:	83 c4 0c             	add    esp,0xc
c000cc71:	8d 54 24 49          	lea    edx,[esp+0x49]
c000cc75:	52                   	push   edx
c000cc76:	56                   	push   esi
c000cc77:	57                   	push   edi
c000cc78:	e8 97 fc ff ff       	call   c000c914 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000cc7d:	eb 19                	jmp    c000cc98 <CmSetString(Reghive_Tag*, int, char const*)+0x10a>
c000cc7f:	85 f6                	test   esi,esi
c000cc81:	74 18                	je     c000cc9b <CmSetString(Reghive_Tag*, int, char const*)+0x10d>
c000cc83:	52                   	push   edx
c000cc84:	52                   	push   edx
c000cc85:	56                   	push   esi
c000cc86:	57                   	push   edi
c000cc87:	e8 c4 fc ff ff       	call   c000c950 <CmFreeExtent(Reghive_Tag*, int)>
c000cc8c:	c6 43 16 00          	mov    BYTE PTR [ebx+0x16],0x0
c000cc90:	c6 43 17 00          	mov    BYTE PTR [ebx+0x17],0x0
c000cc94:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c000cc98:	83 c4 10             	add    esp,0x10
c000cc9b:	45                   	inc    ebp
c000cc9c:	83 c3 03             	add    ebx,0x3
c000cc9f:	83 fd 07             	cmp    ebp,0x7
c000cca2:	0f 85 47 ff ff ff    	jne    c000cbef <CmSetString(Reghive_Tag*, int, char const*)+0x61>
c000cca8:	50                   	push   eax
c000cca9:	8d 44 24 1e          	lea    eax,[esp+0x1e]
c000ccad:	50                   	push   eax
c000ccae:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000ccb5:	57                   	push   edi
c000ccb6:	e8 59 fc ff ff       	call   c000c914 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000ccbb:	81 c4 8c 00 00 00    	add    esp,0x8c
c000ccc1:	5b                   	pop    ebx
c000ccc2:	5e                   	pop    esi
c000ccc3:	5f                   	pop    edi
c000ccc4:	5d                   	pop    ebp
c000ccc5:	c3                   	ret    

c000ccc6 <CmGetMatch(char*, char*, bool, bool*)>:
c000ccc6:	56                   	push   esi
c000ccc7:	53                   	push   ebx
c000ccc8:	50                   	push   eax
c000ccc9:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000ccce:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000ccd2:	74 25                	je     c000ccf9 <CmGetMatch(char*, char*, bool, bool*)+0x33>
c000ccd4:	c6 06 01             	mov    BYTE PTR [esi],0x1
c000ccd7:	31 db                	xor    ebx,ebx
c000ccd9:	50                   	push   eax
c000ccda:	50                   	push   eax
c000ccdb:	8d 04 9d a0 3a 02 c0 	lea    eax,[ebx*4-0x3ffdc560]
c000cce2:	50                   	push   eax
c000cce3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cce7:	e8 94 3a ff ff       	call   c0000780 <strcmp>
c000ccec:	83 c4 10             	add    esp,0x10
c000ccef:	85 c0                	test   eax,eax
c000ccf1:	74 2e                	je     c000cd21 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c000ccf3:	43                   	inc    ebx
c000ccf4:	83 fb 3f             	cmp    ebx,0x3f
c000ccf7:	75 e0                	jne    c000ccd9 <CmGetMatch(char*, char*, bool, bool*)+0x13>
c000ccf9:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000ccfc:	31 db                	xor    ebx,ebx
c000ccfe:	51                   	push   ecx
c000ccff:	51                   	push   ecx
c000cd00:	8d 04 9d a0 3a 02 c0 	lea    eax,[ebx*4-0x3ffdc560]
c000cd07:	50                   	push   eax
c000cd08:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000cd0c:	e8 6f 3a ff ff       	call   c0000780 <strcmp>
c000cd11:	83 c4 10             	add    esp,0x10
c000cd14:	85 c0                	test   eax,eax
c000cd16:	74 09                	je     c000cd21 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c000cd18:	43                   	inc    ebx
c000cd19:	83 fb 3f             	cmp    ebx,0x3f
c000cd1c:	75 e0                	jne    c000ccfe <CmGetMatch(char*, char*, bool, bool*)+0x38>
c000cd1e:	83 cb ff             	or     ebx,0xffffffff
c000cd21:	5a                   	pop    edx
c000cd22:	89 d8                	mov    eax,ebx
c000cd24:	5b                   	pop    ebx
c000cd25:	5e                   	pop    esi
c000cd26:	c3                   	ret    

c000cd27 <CmAddShift(unsigned int*, int*, unsigned char, int)>:
c000cd27:	55                   	push   ebp
c000cd28:	31 c0                	xor    eax,eax
c000cd2a:	57                   	push   edi
c000cd2b:	56                   	push   esi
c000cd2c:	53                   	push   ebx
c000cd2d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000cd31:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000cd35:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000cd39:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000cd3d:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c000cd3f:	8d 2c 31             	lea    ebp,[ecx+esi*1]
c000cd42:	83 fd 1f             	cmp    ebp,0x1f
c000cd45:	7f 0b                	jg     c000cd52 <CmAddShift(unsigned int*, int*, unsigned char, int)+0x2b>
c000cd47:	0f b6 c2             	movzx  eax,dl
c000cd4a:	d3 e0                	shl    eax,cl
c000cd4c:	09 07                	or     DWORD PTR [edi],eax
c000cd4e:	b0 01                	mov    al,0x1
c000cd50:	01 33                	add    DWORD PTR [ebx],esi
c000cd52:	5b                   	pop    ebx
c000cd53:	5e                   	pop    esi
c000cd54:	5f                   	pop    edi
c000cd55:	5d                   	pop    ebp
c000cd56:	c3                   	ret    

c000cd57 <CmGetShift(unsigned int*, int*, int, bool*)>:
c000cd57:	57                   	push   edi
c000cd58:	56                   	push   esi
c000cd59:	53                   	push   ebx
c000cd5a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000cd5e:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000cd62:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000cd66:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000cd6a:	39 0b                	cmp    DWORD PTR [ebx],ecx
c000cd6c:	7c 17                	jl     c000cd85 <CmGetShift(unsigned int*, int*, int, bool*)+0x2e>
c000cd6e:	8b 17                	mov    edx,DWORD PTR [edi]
c000cd70:	b8 01 00 00 00       	mov    eax,0x1
c000cd75:	d3 e0                	shl    eax,cl
c000cd77:	48                   	dec    eax
c000cd78:	21 d0                	and    eax,edx
c000cd7a:	d3 ea                	shr    edx,cl
c000cd7c:	89 17                	mov    DWORD PTR [edi],edx
c000cd7e:	29 0b                	sub    DWORD PTR [ebx],ecx
c000cd80:	c6 06 01             	mov    BYTE PTR [esi],0x1
c000cd83:	eb 05                	jmp    c000cd8a <CmGetShift(unsigned int*, int*, int, bool*)+0x33>
c000cd85:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000cd88:	31 c0                	xor    eax,eax
c000cd8a:	5b                   	pop    ebx
c000cd8b:	5e                   	pop    esi
c000cd8c:	5f                   	pop    edi
c000cd8d:	c3                   	ret    

c000cd8e <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>:
c000cd8e:	83 ec 40             	sub    esp,0x40
c000cd91:	8d 44 24 09          	lea    eax,[esp+0x9]
c000cd95:	50                   	push   eax
c000cd96:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000cd9a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000cd9e:	e8 4d fa ff ff       	call   c000c7f0 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000cda3:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000cda7:	8b 54 24 2b          	mov    edx,DWORD PTR [esp+0x2b]
c000cdab:	8b 4c 24 2f          	mov    ecx,DWORD PTR [esp+0x2f]
c000cdaf:	89 10                	mov    DWORD PTR [eax],edx
c000cdb1:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000cdb4:	83 c4 4c             	add    esp,0x4c
c000cdb7:	c3                   	ret    

c000cdb8 <CmSetInteger(Reghive_Tag*, int, unsigned long long)>:
c000cdb8:	55                   	push   ebp
c000cdb9:	57                   	push   edi
c000cdba:	56                   	push   esi
c000cdbb:	53                   	push   ebx
c000cdbc:	83 ec 40             	sub    esp,0x40
c000cdbf:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c000cdc3:	8d 5c 24 09          	lea    ebx,[esp+0x9]
c000cdc7:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c000cdcb:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000cdcf:	53                   	push   ebx
c000cdd0:	56                   	push   esi
c000cdd1:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000cdd5:	e8 16 fa ff ff       	call   c000c7f0 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000cdda:	89 7c 24 2b          	mov    DWORD PTR [esp+0x2b],edi
c000cdde:	89 6c 24 2f          	mov    DWORD PTR [esp+0x2f],ebp
c000cde2:	83 c4 0c             	add    esp,0xc
c000cde5:	53                   	push   ebx
c000cde6:	56                   	push   esi
c000cde7:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000cdeb:	e8 24 fb ff ff       	call   c000c914 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000cdf0:	83 c4 4c             	add    esp,0x4c
c000cdf3:	5b                   	pop    ebx
c000cdf4:	5e                   	pop    esi
c000cdf5:	5f                   	pop    edi
c000cdf6:	5d                   	pop    ebp
c000cdf7:	c3                   	ret    

c000cdf8 <CmConvertFromInternalFilename(unsigned char const*, char*)>:
c000cdf8:	55                   	push   ebp
c000cdf9:	57                   	push   edi
c000cdfa:	56                   	push   esi
c000cdfb:	31 f6                	xor    esi,esi
c000cdfd:	53                   	push   ebx
c000cdfe:	31 db                	xor    ebx,ebx
c000ce00:	83 ec 40             	sub    esp,0x40
c000ce03:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000ce0b:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000ce13:	6a 12                	push   0x12
c000ce15:	68 ee 00 00 00       	push   0xee
c000ce1a:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c000ce1e:	e8 cd 36 ff ff       	call   c00004f0 <memset>
c000ce23:	83 c4 10             	add    esp,0x10
c000ce26:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000ce2a:	6a 08                	push   0x8
c000ce2c:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000ce30:	0f b6 04 18          	movzx  eax,BYTE PTR [eax+ebx*1]
c000ce34:	50                   	push   eax
c000ce35:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000ce39:	55                   	push   ebp
c000ce3a:	57                   	push   edi
c000ce3b:	e8 e7 fe ff ff       	call   c000cd27 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c000ce40:	83 c4 10             	add    esp,0x10
c000ce43:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000ce47:	50                   	push   eax
c000ce48:	6a 06                	push   0x6
c000ce4a:	55                   	push   ebp
c000ce4b:	57                   	push   edi
c000ce4c:	e8 06 ff ff ff       	call   c000cd57 <CmGetShift(unsigned int*, int*, int, bool*)>
c000ce51:	83 c4 10             	add    esp,0x10
c000ce54:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000ce59:	74 07                	je     c000ce62 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x6a>
c000ce5b:	46                   	inc    esi
c000ce5c:	88 44 34 17          	mov    BYTE PTR [esp+esi*1+0x17],al
c000ce60:	eb e1                	jmp    c000ce43 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x4b>
c000ce62:	43                   	inc    ebx
c000ce63:	83 fb 12             	cmp    ebx,0x12
c000ce66:	75 c2                	jne    c000ce2a <CmConvertFromInternalFilename(unsigned char const*, char*)+0x32>
c000ce68:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000ce6c:	31 f6                	xor    esi,esi
c000ce6e:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000ce71:	50                   	push   eax
c000ce72:	50                   	push   eax
c000ce73:	0f b6 44 34 20       	movzx  eax,BYTE PTR [esp+esi*1+0x20]
c000ce78:	46                   	inc    esi
c000ce79:	8d 04 85 a0 3a 02 c0 	lea    eax,[eax*4-0x3ffdc560]
c000ce80:	50                   	push   eax
c000ce81:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c000ce85:	e8 e6 39 ff ff       	call   c0000870 <strcat>
c000ce8a:	83 c4 10             	add    esp,0x10
c000ce8d:	83 fe 18             	cmp    esi,0x18
c000ce90:	75 df                	jne    c000ce71 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x79>
c000ce92:	83 c4 3c             	add    esp,0x3c
c000ce95:	31 c0                	xor    eax,eax
c000ce97:	5b                   	pop    ebx
c000ce98:	5e                   	pop    esi
c000ce99:	5f                   	pop    edi
c000ce9a:	5d                   	pop    ebp
c000ce9b:	c3                   	ret    

c000ce9c <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>:
c000ce9c:	83 ec 40             	sub    esp,0x40
c000ce9f:	8d 44 24 09          	lea    eax,[esp+0x9]
c000cea3:	50                   	push   eax
c000cea4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000cea8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ceac:	e8 3f f9 ff ff       	call   c000c7f0 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000ceb1:	58                   	pop    eax
c000ceb2:	5a                   	pop    edx
c000ceb3:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c000ceb7:	8d 44 24 15          	lea    eax,[esp+0x15]
c000cebb:	50                   	push   eax
c000cebc:	e8 37 ff ff ff       	call   c000cdf8 <CmConvertFromInternalFilename(unsigned char const*, char*)>
c000cec1:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c000cec6:	83 c4 4c             	add    esp,0x4c
c000cec9:	c3                   	ret    

c000ceca <CmConvertToInternalFilename(char const*, unsigned char*)>:
c000ceca:	55                   	push   ebp
c000cecb:	57                   	push   edi
c000cecc:	56                   	push   esi
c000cecd:	53                   	push   ebx
c000cece:	31 db                	xor    ebx,ebx
c000ced0:	83 ec 70             	sub    esp,0x70
c000ced3:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
c000ceda:	6a 30                	push   0x30
c000cedc:	6a 00                	push   0x0
c000cede:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c000cee2:	56                   	push   esi
c000cee3:	e8 08 36 ff ff       	call   c00004f0 <memset>
c000cee8:	83 c4 10             	add    esp,0x10
c000ceeb:	83 ec 0c             	sub    esp,0xc
c000ceee:	57                   	push   edi
c000ceef:	e8 8c 36 ff ff       	call   c0000580 <strlen>
c000cef4:	83 c4 10             	add    esp,0x10
c000cef7:	39 d8                	cmp    eax,ebx
c000cef9:	76 16                	jbe    c000cf11 <CmConvertToInternalFilename(char const*, unsigned char*)+0x47>
c000cefb:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c000ceff:	83 ec 0c             	sub    esp,0xc
c000cf02:	50                   	push   eax
c000cf03:	e8 58 3a ff ff       	call   c0000960 <toupper>
c000cf08:	83 c4 10             	add    esp,0x10
c000cf0b:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c000cf0e:	43                   	inc    ebx
c000cf0f:	eb da                	jmp    c000ceeb <CmConvertToInternalFilename(char const*, unsigned char*)+0x21>
c000cf11:	52                   	push   edx
c000cf12:	31 db                	xor    ebx,ebx
c000cf14:	6a 18                	push   0x18
c000cf16:	31 ff                	xor    edi,edi
c000cf18:	6a 3f                	push   0x3f
c000cf1a:	8d 44 24 24          	lea    eax,[esp+0x24]
c000cf1e:	50                   	push   eax
c000cf1f:	e8 cc 35 ff ff       	call   c00004f0 <memset>
c000cf24:	83 c4 10             	add    esp,0x10
c000cf27:	8a 44 1c 30          	mov    al,BYTE PTR [esp+ebx*1+0x30]
c000cf2b:	8d 74 24 10          	lea    esi,[esp+0x10]
c000cf2f:	84 c0                	test   al,al
c000cf31:	0f 84 af 00 00 00    	je     c000cfe6 <CmConvertToInternalFilename(char const*, unsigned char*)+0x11c>
c000cf37:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c000cf3b:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000cf3e:	83 ec 0c             	sub    esp,0xc
c000cf41:	c6 44 24 22 00       	mov    BYTE PTR [esp+0x22],0x0
c000cf46:	8a 54 2c 3c          	mov    dl,BYTE PTR [esp+ebp*1+0x3c]
c000cf4a:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c000cf4e:	c6 44 24 1d 00       	mov    BYTE PTR [esp+0x1d],0x0
c000cf53:	88 54 24 21          	mov    BYTE PTR [esp+0x21],dl
c000cf57:	56                   	push   esi
c000cf58:	e8 23 36 ff ff       	call   c0000580 <strlen>
c000cf5d:	83 c4 10             	add    esp,0x10
c000cf60:	85 c0                	test   eax,eax
c000cf62:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000cf66:	74 0b                	je     c000cf73 <CmConvertToInternalFilename(char const*, unsigned char*)+0xa9>
c000cf68:	50                   	push   eax
c000cf69:	6a 01                	push   0x1
c000cf6b:	56                   	push   esi
c000cf6c:	8d 44 24 20          	lea    eax,[esp+0x20]
c000cf70:	50                   	push   eax
c000cf71:	eb 0a                	jmp    c000cf7d <CmConvertToInternalFilename(char const*, unsigned char*)+0xb3>
c000cf73:	50                   	push   eax
c000cf74:	6a 00                	push   0x0
c000cf76:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c000cf7a:	50                   	push   eax
c000cf7b:	6a 00                	push   0x0
c000cf7d:	e8 44 fd ff ff       	call   c000ccc6 <CmGetMatch(char*, char*, bool, bool*)>
c000cf82:	83 c4 10             	add    esp,0x10
c000cf85:	83 f8 ff             	cmp    eax,0xffffffff
c000cf88:	75 1a                	jne    c000cfa4 <CmConvertToInternalFilename(char const*, unsigned char*)+0xda>
c000cf8a:	83 ec 0c             	sub    esp,0xc
c000cf8d:	68 e7 1c 02 c0       	push   0xc0021ce7
c000cf92:	e8 8f 1c 00 00       	call   c000ec26 <KePanic(char const*)>
c000cf97:	83 c4 10             	add    esp,0x10
c000cf9a:	b8 02 00 00 00       	mov    eax,0x2
c000cf9f:	e9 bb 00 00 00       	jmp    c000d05f <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c000cfa4:	83 ff 18             	cmp    edi,0x18
c000cfa7:	75 1a                	jne    c000cfc3 <CmConvertToInternalFilename(char const*, unsigned char*)+0xf9>
c000cfa9:	83 ec 0c             	sub    esp,0xc
c000cfac:	68 fc 1c 02 c0       	push   0xc0021cfc
c000cfb1:	e8 70 1c 00 00       	call   c000ec26 <KePanic(char const*)>
c000cfb6:	83 c4 10             	add    esp,0x10
c000cfb9:	b8 01 00 00 00       	mov    eax,0x1
c000cfbe:	e9 9c 00 00 00       	jmp    c000d05f <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c000cfc3:	47                   	inc    edi
c000cfc4:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000cfc9:	88 44 3c 17          	mov    BYTE PTR [esp+edi*1+0x17],al
c000cfcd:	0f 45 dd             	cmovne ebx,ebp
c000cfd0:	83 ec 0c             	sub    esp,0xc
c000cfd3:	56                   	push   esi
c000cfd4:	e8 a7 35 ff ff       	call   c0000580 <strlen>
c000cfd9:	83 c4 10             	add    esp,0x10
c000cfdc:	85 c0                	test   eax,eax
c000cfde:	74 06                	je     c000cfe6 <CmConvertToInternalFilename(char const*, unsigned char*)+0x11c>
c000cfe0:	43                   	inc    ebx
c000cfe1:	e9 41 ff ff ff       	jmp    c000cf27 <CmConvertToInternalFilename(char const*, unsigned char*)+0x5d>
c000cfe6:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000cfee:	31 db                	xor    ebx,ebx
c000cff0:	31 ff                	xor    edi,edi
c000cff2:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000cffa:	50                   	push   eax
c000cffb:	6a 12                	push   0x12
c000cffd:	68 ee 00 00 00       	push   0xee
c000d002:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c000d009:	e8 e2 34 ff ff       	call   c00004f0 <memset>
c000d00e:	83 c4 10             	add    esp,0x10
c000d011:	8d 6c 24 14          	lea    ebp,[esp+0x14]
c000d015:	83 fb 17             	cmp    ebx,0x17
c000d018:	7e 26                	jle    c000d040 <CmConvertToInternalFilename(char const*, unsigned char*)+0x176>
c000d01a:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000d01e:	50                   	push   eax
c000d01f:	6a 08                	push   0x8
c000d021:	55                   	push   ebp
c000d022:	56                   	push   esi
c000d023:	e8 2f fd ff ff       	call   c000cd57 <CmGetShift(unsigned int*, int*, int, bool*)>
c000d028:	83 c4 10             	add    esp,0x10
c000d02b:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000d030:	74 26                	je     c000d058 <CmConvertToInternalFilename(char const*, unsigned char*)+0x18e>
c000d032:	8b 8c 24 84 00 00 00 	mov    ecx,DWORD PTR [esp+0x84]
c000d039:	4b                   	dec    ebx
c000d03a:	88 04 39             	mov    BYTE PTR [ecx+edi*1],al
c000d03d:	47                   	inc    edi
c000d03e:	eb 1c                	jmp    c000d05c <CmConvertToInternalFilename(char const*, unsigned char*)+0x192>
c000d040:	6a 06                	push   0x6
c000d042:	0f b6 44 1c 1c       	movzx  eax,BYTE PTR [esp+ebx*1+0x1c]
c000d047:	50                   	push   eax
c000d048:	55                   	push   ebp
c000d049:	56                   	push   esi
c000d04a:	e8 d8 fc ff ff       	call   c000cd27 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c000d04f:	83 c4 10             	add    esp,0x10
c000d052:	84 c0                	test   al,al
c000d054:	75 06                	jne    c000d05c <CmConvertToInternalFilename(char const*, unsigned char*)+0x192>
c000d056:	eb c2                	jmp    c000d01a <CmConvertToInternalFilename(char const*, unsigned char*)+0x150>
c000d058:	31 c0                	xor    eax,eax
c000d05a:	eb 03                	jmp    c000d05f <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c000d05c:	43                   	inc    ebx
c000d05d:	eb b2                	jmp    c000d011 <CmConvertToInternalFilename(char const*, unsigned char*)+0x147>
c000d05f:	83 c4 6c             	add    esp,0x6c
c000d062:	5b                   	pop    ebx
c000d063:	5e                   	pop    esi
c000d064:	5f                   	pop    edi
c000d065:	5d                   	pop    ebp
c000d066:	c3                   	ret    

c000d067 <CmCreateString(Reghive_Tag*, int, char const*)>:
c000d067:	53                   	push   ebx
c000d068:	83 ec 3c             	sub    esp,0x3c
c000d06b:	6a 2b                	push   0x2b
c000d06d:	6a 00                	push   0x0
c000d06f:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c000d073:	53                   	push   ebx
c000d074:	e8 77 34 ff ff       	call   c00004f0 <memset>
c000d079:	58                   	pop    eax
c000d07a:	5a                   	pop    edx
c000d07b:	8d 44 24 11          	lea    eax,[esp+0x11]
c000d07f:	50                   	push   eax
c000d080:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000d084:	e8 41 fe ff ff       	call   c000ceca <CmConvertToInternalFilename(char const*, unsigned char*)>
c000d089:	c6 44 24 15 c1       	mov    BYTE PTR [esp+0x15],0xc1
c000d08e:	83 c4 0c             	add    esp,0xc
c000d091:	6a 15                	push   0x15
c000d093:	6a 00                	push   0x0
c000d095:	8d 44 24 27          	lea    eax,[esp+0x27]
c000d099:	50                   	push   eax
c000d09a:	e8 51 34 ff ff       	call   c00004f0 <memset>
c000d09f:	53                   	push   ebx
c000d0a0:	6a 00                	push   0x0
c000d0a2:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000d0a6:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000d0aa:	e8 eb f9 ff ff       	call   c000ca9a <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000d0af:	83 c4 58             	add    esp,0x58
c000d0b2:	5b                   	pop    ebx
c000d0b3:	c3                   	ret    

c000d0b4 <CmFindInDirectory(Reghive_Tag*, int, char const*)>:
c000d0b4:	56                   	push   esi
c000d0b5:	53                   	push   ebx
c000d0b6:	83 ec 48             	sub    esp,0x48
c000d0b9:	6a 12                	push   0x12
c000d0bb:	68 ff 00 00 00       	push   0xff
c000d0c0:	8d 74 24 0f          	lea    esi,[esp+0xf]
c000d0c4:	56                   	push   esi
c000d0c5:	e8 26 34 ff ff       	call   c00004f0 <memset>
c000d0ca:	5a                   	pop    edx
c000d0cb:	59                   	pop    ecx
c000d0cc:	56                   	push   esi
c000d0cd:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000d0d1:	e8 f4 fd ff ff       	call   c000ceca <CmConvertToInternalFilename(char const*, unsigned char*)>
c000d0d6:	83 c4 10             	add    esp,0x10
c000d0d9:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c000d0dd:	85 db                	test   ebx,ebx
c000d0df:	74 42                	je     c000d123 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x6f>
c000d0e1:	50                   	push   eax
c000d0e2:	8d 44 24 19          	lea    eax,[esp+0x19]
c000d0e6:	50                   	push   eax
c000d0e7:	53                   	push   ebx
c000d0e8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000d0ec:	e8 ff f6 ff ff       	call   c000c7f0 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d0f1:	83 c4 0c             	add    esp,0xc
c000d0f4:	6a 12                	push   0x12
c000d0f6:	8d 44 24 21          	lea    eax,[esp+0x21]
c000d0fa:	50                   	push   eax
c000d0fb:	56                   	push   esi
c000d0fc:	e8 7f 32 ff ff       	call   c0000380 <memcmp>
c000d101:	83 c4 10             	add    esp,0x10
c000d104:	85 c0                	test   eax,eax
c000d106:	74 1e                	je     c000d126 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x72>
c000d108:	0f b6 5c 24 17       	movzx  ebx,BYTE PTR [esp+0x17]
c000d10d:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c000d112:	c1 e3 08             	shl    ebx,0x8
c000d115:	09 d8                	or     eax,ebx
c000d117:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c000d11c:	c1 e3 10             	shl    ebx,0x10
c000d11f:	09 c3                	or     ebx,eax
c000d121:	eb ba                	jmp    c000d0dd <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x29>
c000d123:	83 cb ff             	or     ebx,0xffffffff
c000d126:	83 c4 44             	add    esp,0x44
c000d129:	89 d8                	mov    eax,ebx
c000d12b:	5b                   	pop    ebx
c000d12c:	5e                   	pop    esi
c000d12d:	c3                   	ret    

c000d12e <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>:
c000d12e:	57                   	push   edi
c000d12f:	56                   	push   esi
c000d130:	53                   	push   ebx
c000d131:	83 ec 34             	sub    esp,0x34
c000d134:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000d138:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000d13c:	6a 2b                	push   0x2b
c000d13e:	6a 00                	push   0x0
c000d140:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c000d144:	53                   	push   ebx
c000d145:	e8 a6 33 ff ff       	call   c00004f0 <memset>
c000d14a:	58                   	pop    eax
c000d14b:	5a                   	pop    edx
c000d14c:	8d 44 24 11          	lea    eax,[esp+0x11]
c000d150:	50                   	push   eax
c000d151:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000d155:	e8 70 fd ff ff       	call   c000ceca <CmConvertToInternalFilename(char const*, unsigned char*)>
c000d15a:	8a 44 24 64          	mov    al,BYTE PTR [esp+0x64]
c000d15e:	89 74 24 2b          	mov    DWORD PTR [esp+0x2b],esi
c000d162:	89 7c 24 2f          	mov    DWORD PTR [esp+0x2f],edi
c000d166:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c000d16a:	53                   	push   ebx
c000d16b:	6a 00                	push   0x0
c000d16d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000d171:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000d175:	e8 20 f9 ff ff       	call   c000ca9a <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000d17a:	83 c4 50             	add    esp,0x50
c000d17d:	5b                   	pop    ebx
c000d17e:	5e                   	pop    esi
c000d17f:	5f                   	pop    edi
c000d180:	c3                   	ret    

c000d181 <CmCreateDirectory(Reghive_Tag*, int, char const*)>:
c000d181:	55                   	push   ebp
c000d182:	57                   	push   edi
c000d183:	56                   	push   esi
c000d184:	53                   	push   ebx
c000d185:	83 ec 40             	sub    esp,0x40
c000d188:	8b 6c 24 58          	mov    ebp,DWORD PTR [esp+0x58]
c000d18c:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c000d190:	6a 2b                	push   0x2b
c000d192:	6a 00                	push   0x0
c000d194:	8d 74 24 11          	lea    esi,[esp+0x11]
c000d198:	56                   	push   esi
c000d199:	e8 52 33 ff ff       	call   c00004f0 <memset>
c000d19e:	5f                   	pop    edi
c000d19f:	89 ef                	mov    edi,ebp
c000d1a1:	58                   	pop    eax
c000d1a2:	8d 44 24 11          	lea    eax,[esp+0x11]
c000d1a6:	50                   	push   eax
c000d1a7:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000d1ab:	e8 1a fd ff ff       	call   c000ceca <CmConvertToInternalFilename(char const*, unsigned char*)>
c000d1b0:	c6 44 24 15 4e       	mov    BYTE PTR [esp+0x15],0x4e
c000d1b5:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c000d1ba:	c6 44 24 2c 00       	mov    BYTE PTR [esp+0x2c],0x0
c000d1bf:	c6 44 24 2d 00       	mov    BYTE PTR [esp+0x2d],0x0
c000d1c4:	83 c4 10             	add    esp,0x10
c000d1c7:	85 ed                	test   ebp,ebp
c000d1c9:	74 14                	je     c000d1df <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c000d1cb:	51                   	push   ecx
c000d1cc:	51                   	push   ecx
c000d1cd:	57                   	push   edi
c000d1ce:	53                   	push   ebx
c000d1cf:	e8 0e f7 ff ff       	call   c000c8e2 <CmGetNext(Reghive_Tag*, int)>
c000d1d4:	83 c4 10             	add    esp,0x10
c000d1d7:	85 c0                	test   eax,eax
c000d1d9:	74 04                	je     c000d1df <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c000d1db:	89 c7                	mov    edi,eax
c000d1dd:	eb e8                	jmp    c000d1c7 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x46>
c000d1df:	56                   	push   esi
c000d1e0:	6a 00                	push   0x0
c000d1e2:	57                   	push   edi
c000d1e3:	53                   	push   ebx
c000d1e4:	e8 b1 f8 ff ff       	call   c000ca9a <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000d1e9:	83 c4 0c             	add    esp,0xc
c000d1ec:	56                   	push   esi
c000d1ed:	50                   	push   eax
c000d1ee:	89 c7                	mov    edi,eax
c000d1f0:	53                   	push   ebx
c000d1f1:	e8 fa f5 ff ff       	call   c000c7f0 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d1f6:	58                   	pop    eax
c000d1f7:	5a                   	pop    edx
c000d1f8:	6a 6c                	push   0x6c
c000d1fa:	6a 00                	push   0x0
c000d1fc:	6a 00                	push   0x0
c000d1fe:	68 0d 1d 02 c0       	push   0xc0021d0d
c000d203:	57                   	push   edi
c000d204:	53                   	push   ebx
c000d205:	e8 24 ff ff ff       	call   c000d12e <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>
c000d20a:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c000d20e:	88 64 24 3c          	mov    BYTE PTR [esp+0x3c],ah
c000d212:	c1 e8 10             	shr    eax,0x10
c000d215:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c000d219:	83 c4 1c             	add    esp,0x1c
c000d21c:	56                   	push   esi
c000d21d:	57                   	push   edi
c000d21e:	53                   	push   ebx
c000d21f:	e8 f0 f6 ff ff       	call   c000c914 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000d224:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c000d229:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c000d22e:	c1 e0 08             	shl    eax,0x8
c000d231:	09 c2                	or     edx,eax
c000d233:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c000d238:	83 c4 4c             	add    esp,0x4c
c000d23b:	5b                   	pop    ebx
c000d23c:	5e                   	pop    esi
c000d23d:	c1 e0 10             	shl    eax,0x10
c000d240:	09 d0                	or     eax,edx
c000d242:	5f                   	pop    edi
c000d243:	5d                   	pop    ebp
c000d244:	c3                   	ret    

c000d245 <zStrtok(char*, char const*)>:
c000d245:	55                   	push   ebp
c000d246:	57                   	push   edi
c000d247:	56                   	push   esi
c000d248:	53                   	push   ebx
c000d249:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d24d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000d251:	85 db                	test   ebx,ebx
c000d253:	74 2f                	je     c000d284 <zStrtok(char*, char const*)+0x3f>
c000d255:	85 c0                	test   eax,eax
c000d257:	75 09                	jne    c000d262 <zStrtok(char*, char const*)+0x1d>
c000d259:	a1 60 9d 02 c0       	mov    eax,ds:0xc0029d60
c000d25e:	85 c0                	test   eax,eax
c000d260:	74 50                	je     c000d2b2 <zStrtok(char*, char const*)+0x6d>
c000d262:	31 c9                	xor    ecx,ecx
c000d264:	80 3c 08 00          	cmp    BYTE PTR [eax+ecx*1],0x0
c000d268:	74 03                	je     c000d26d <zStrtok(char*, char const*)+0x28>
c000d26a:	41                   	inc    ecx
c000d26b:	eb f7                	jmp    c000d264 <zStrtok(char*, char const*)+0x1f>
c000d26d:	31 d2                	xor    edx,edx
c000d26f:	39 ca                	cmp    edx,ecx
c000d271:	74 15                	je     c000d288 <zStrtok(char*, char const*)+0x43>
c000d273:	0f be 34 10          	movsx  esi,BYTE PTR [eax+edx*1]
c000d277:	8d 3c 10             	lea    edi,[eax+edx*1]
c000d27a:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c000d27d:	39 ee                	cmp    esi,ebp
c000d27f:	74 13                	je     c000d294 <zStrtok(char*, char const*)+0x4f>
c000d281:	42                   	inc    edx
c000d282:	eb eb                	jmp    c000d26f <zStrtok(char*, char const*)+0x2a>
c000d284:	31 c0                	xor    eax,eax
c000d286:	eb 2a                	jmp    c000d2b2 <zStrtok(char*, char const*)+0x6d>
c000d288:	c7 05 60 9d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029d60,0x0
c000d292:	eb 1e                	jmp    c000d2b2 <zStrtok(char*, char const*)+0x6d>
c000d294:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c000d297:	39 ce                	cmp    esi,ecx
c000d299:	75 0a                	jne    c000d2a5 <zStrtok(char*, char const*)+0x60>
c000d29b:	40                   	inc    eax
c000d29c:	a3 60 9d 02 c0       	mov    ds:0xc0029d60,eax
c000d2a1:	89 d8                	mov    eax,ebx
c000d2a3:	eb 0d                	jmp    c000d2b2 <zStrtok(char*, char const*)+0x6d>
c000d2a5:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000d2a8:	8d 54 10 01          	lea    edx,[eax+edx*1+0x1]
c000d2ac:	89 15 60 9d 02 c0    	mov    DWORD PTR ds:0xc0029d60,edx
c000d2b2:	5b                   	pop    ebx
c000d2b3:	5e                   	pop    esi
c000d2b4:	5f                   	pop    edi
c000d2b5:	5d                   	pop    ebp
c000d2b6:	c3                   	ret    

c000d2b7 <CmFindObjectFromPath(Reghive_Tag*, char const*)>:
c000d2b7:	57                   	push   edi
c000d2b8:	56                   	push   esi
c000d2b9:	53                   	push   ebx
c000d2ba:	81 ec 08 01 00 00    	sub    esp,0x108
c000d2c0:	8b bc 24 18 01 00 00 	mov    edi,DWORD PTR [esp+0x118]
c000d2c7:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c000d2ce:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000d2d2:	53                   	push   ebx
c000d2d3:	e8 78 33 ff ff       	call   c0000650 <strcpy>
c000d2d8:	59                   	pop    ecx
c000d2d9:	5e                   	pop    esi
c000d2da:	68 35 2a 02 c0       	push   0xc0022a35
c000d2df:	53                   	push   ebx
c000d2e0:	bb 01 00 00 00       	mov    ebx,0x1
c000d2e5:	e8 5b ff ff ff       	call   c000d245 <zStrtok(char*, char const*)>
c000d2ea:	83 c4 10             	add    esp,0x10
c000d2ed:	85 c0                	test   eax,eax
c000d2ef:	74 3b                	je     c000d32c <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c000d2f1:	52                   	push   edx
c000d2f2:	50                   	push   eax
c000d2f3:	6a 01                	push   0x1
c000d2f5:	57                   	push   edi
c000d2f6:	e8 b9 fd ff ff       	call   c000d0b4 <CmFindInDirectory(Reghive_Tag*, int, char const*)>
c000d2fb:	59                   	pop    ecx
c000d2fc:	5e                   	pop    esi
c000d2fd:	89 c3                	mov    ebx,eax
c000d2ff:	68 35 2a 02 c0       	push   0xc0022a35
c000d304:	6a 00                	push   0x0
c000d306:	e8 3a ff ff ff       	call   c000d245 <zStrtok(char*, char const*)>
c000d30b:	83 c4 10             	add    esp,0x10
c000d30e:	85 c0                	test   eax,eax
c000d310:	89 c6                	mov    esi,eax
c000d312:	74 18                	je     c000d32c <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c000d314:	52                   	push   edx
c000d315:	52                   	push   edx
c000d316:	53                   	push   ebx
c000d317:	57                   	push   edi
c000d318:	e8 86 f5 ff ff       	call   c000c8a3 <CmEnterDirectory(Reghive_Tag*, int)>
c000d31d:	83 c4 10             	add    esp,0x10
c000d320:	83 f8 ff             	cmp    eax,0xffffffff
c000d323:	89 c3                	mov    ebx,eax
c000d325:	74 05                	je     c000d32c <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c000d327:	50                   	push   eax
c000d328:	56                   	push   esi
c000d329:	53                   	push   ebx
c000d32a:	eb c9                	jmp    c000d2f5 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x3e>
c000d32c:	81 c4 00 01 00 00    	add    esp,0x100
c000d332:	89 d8                	mov    eax,ebx
c000d334:	5b                   	pop    ebx
c000d335:	5e                   	pop    esi
c000d336:	5f                   	pop    edi
c000d337:	c3                   	ret    

c000d338 <CmDisplayTree(Reghive_Tag*, int, int)>:
c000d338:	55                   	push   ebp
c000d339:	57                   	push   edi
c000d33a:	56                   	push   esi
c000d33b:	53                   	push   ebx
c000d33c:	83 ec 5c             	sub    esp,0x5c
c000d33f:	8b 74 24 70          	mov    esi,DWORD PTR [esp+0x70]
c000d343:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000d347:	85 db                	test   ebx,ebx
c000d349:	0f 8e 84 00 00 00    	jle    c000d3d3 <CmDisplayTree(Reghive_Tag*, int, int)+0x9b>
c000d34f:	57                   	push   edi
c000d350:	31 ed                	xor    ebp,ebp
c000d352:	6a 32                	push   0x32
c000d354:	6a 00                	push   0x0
c000d356:	8d 7c 24 2a          	lea    edi,[esp+0x2a]
c000d35a:	57                   	push   edi
c000d35b:	e8 90 31 ff ff       	call   c00004f0 <memset>
c000d360:	83 c4 0c             	add    esp,0xc
c000d363:	57                   	push   edi
c000d364:	53                   	push   ebx
c000d365:	56                   	push   esi
c000d366:	e8 31 fb ff ff       	call   c000ce9c <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c000d36b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000d36f:	83 c4 10             	add    esp,0x10
c000d372:	3b 6c 24 78          	cmp    ebp,DWORD PTR [esp+0x78]
c000d376:	7d 13                	jge    c000d38b <CmDisplayTree(Reghive_Tag*, int, int)+0x53>
c000d378:	83 ec 0c             	sub    esp,0xc
c000d37b:	45                   	inc    ebp
c000d37c:	68 e2 2e 02 c0       	push   0xc0022ee2
c000d381:	e8 c8 9b ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000d386:	83 c4 10             	add    esp,0x10
c000d389:	eb e7                	jmp    c000d372 <CmDisplayTree(Reghive_Tag*, int, int)+0x3a>
c000d38b:	51                   	push   ecx
c000d38c:	57                   	push   edi
c000d38d:	53                   	push   ebx
c000d38e:	68 13 1d 02 c0       	push   0xc0021d13
c000d393:	e8 b6 9b ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000d398:	83 c4 10             	add    esp,0x10
c000d39b:	83 7c 24 0c 4e       	cmp    DWORD PTR [esp+0xc],0x4e
c000d3a0:	75 1e                	jne    c000d3c0 <CmDisplayTree(Reghive_Tag*, int, int)+0x88>
c000d3a2:	52                   	push   edx
c000d3a3:	52                   	push   edx
c000d3a4:	53                   	push   ebx
c000d3a5:	56                   	push   esi
c000d3a6:	e8 f8 f4 ff ff       	call   c000c8a3 <CmEnterDirectory(Reghive_Tag*, int)>
c000d3ab:	83 c4 0c             	add    esp,0xc
c000d3ae:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000d3b2:	8d 51 04             	lea    edx,[ecx+0x4]
c000d3b5:	52                   	push   edx
c000d3b6:	50                   	push   eax
c000d3b7:	56                   	push   esi
c000d3b8:	e8 7b ff ff ff       	call   c000d338 <CmDisplayTree(Reghive_Tag*, int, int)>
c000d3bd:	83 c4 10             	add    esp,0x10
c000d3c0:	50                   	push   eax
c000d3c1:	50                   	push   eax
c000d3c2:	53                   	push   ebx
c000d3c3:	56                   	push   esi
c000d3c4:	e8 19 f5 ff ff       	call   c000c8e2 <CmGetNext(Reghive_Tag*, int)>
c000d3c9:	83 c4 10             	add    esp,0x10
c000d3cc:	89 c3                	mov    ebx,eax
c000d3ce:	e9 74 ff ff ff       	jmp    c000d347 <CmDisplayTree(Reghive_Tag*, int, int)+0xf>
c000d3d3:	83 c4 5c             	add    esp,0x5c
c000d3d6:	5b                   	pop    ebx
c000d3d7:	5e                   	pop    esi
c000d3d8:	5f                   	pop    edi
c000d3d9:	5d                   	pop    ebp
c000d3da:	c3                   	ret    

c000d3db <CmSplitFinalSlashInPlace(char*)>:
c000d3db:	53                   	push   ebx
c000d3dc:	83 ec 14             	sub    esp,0x14
c000d3df:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000d3e3:	53                   	push   ebx
c000d3e4:	e8 97 31 ff ff       	call   c0000580 <strlen>
c000d3e9:	83 c4 10             	add    esp,0x10
c000d3ec:	48                   	dec    eax
c000d3ed:	85 c0                	test   eax,eax
c000d3ef:	74 15                	je     c000d406 <CmSplitFinalSlashInPlace(char*)+0x2b>
c000d3f1:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000d3f5:	8d 14 03             	lea    edx,[ebx+eax*1]
c000d3f8:	75 09                	jne    c000d403 <CmSplitFinalSlashInPlace(char*)+0x28>
c000d3fa:	c6 02 00             	mov    BYTE PTR [edx],0x0
c000d3fd:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c000d401:	eb 05                	jmp    c000d408 <CmSplitFinalSlashInPlace(char*)+0x2d>
c000d403:	48                   	dec    eax
c000d404:	eb e7                	jmp    c000d3ed <CmSplitFinalSlashInPlace(char*)+0x12>
c000d406:	31 c0                	xor    eax,eax
c000d408:	83 c4 08             	add    esp,0x8
c000d40b:	5b                   	pop    ebx
c000d40c:	c3                   	ret    
c000d40d:	66 90                	xchg   ax,ax
c000d40f:	90                   	nop

c000d410 <Krnl::handlePowerButton()>:
c000d410:	83 ec 0c             	sub    esp,0xc
c000d413:	e8 1a 21 00 00       	call   c000f532 <KeHandlePowerButton()>
c000d418:	90                   	nop
c000d419:	83 c4 0c             	add    esp,0xc
c000d41c:	c3                   	ret    
c000d41d:	8d 76 00             	lea    esi,[esi+0x0]

c000d420 <Krnl::handleSleepButton()>:
c000d420:	83 ec 0c             	sub    esp,0xc
c000d423:	e8 22 21 00 00       	call   c000f54a <KeHandleSleepButton()>
c000d428:	90                   	nop
c000d429:	83 c4 0c             	add    esp,0xc
c000d42c:	c3                   	ret    
c000d42d:	90                   	nop

c000d42e <Computer::close(int, int, void*)>:
c000d42e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000d433:	c3                   	ret    

c000d434 <Computer::open(int, int, void*)>:
c000d434:	56                   	push   esi
c000d435:	53                   	push   ebx
c000d436:	83 ec 04             	sub    esp,0x4
c000d439:	f6 05 90 bd 02 c0 04 	test   BYTE PTR ds:0xc002bd90,0x4
c000d440:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d444:	0f 94 05 80 41 02 c0 	sete   BYTE PTR ds:0xc0024180
c000d44b:	39 1d 70 9d 02 c0    	cmp    DWORD PTR ds:0xc0029d70,ebx
c000d451:	74 10                	je     c000d463 <Computer::open(int, int, void*)+0x2f>
c000d453:	83 ec 0c             	sub    esp,0xc
c000d456:	68 20 1d 02 c0       	push   0xc0021d20
c000d45b:	e8 c6 17 00 00       	call   c000ec26 <KePanic(char const*)>
c000d460:	83 c4 10             	add    esp,0x10
c000d463:	83 ec 0c             	sub    esp,0xc
c000d466:	68 d8 1d 02 c0       	push   0xc0021dd8
c000d46b:	e8 33 f1 ff ff       	call   c000c5a3 <KeSetBootMessage(char const*)>
c000d470:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c000d477:	e8 54 14 00 00       	call   c000e8d0 <malloc>
c000d47c:	89 04 24             	mov    DWORD PTR [esp],eax
c000d47f:	89 c6                	mov    esi,eax
c000d481:	e8 22 e8 ff ff       	call   c000bca8 <ACPI::ACPI()>
c000d486:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c000d48c:	58                   	pop    eax
c000d48d:	5a                   	pop    edx
c000d48e:	56                   	push   esi
c000d48f:	53                   	push   ebx
c000d490:	e8 ad bb ff ff       	call   c0009042 <Device::addChild(Device*)>
c000d495:	c7 04 24 f0 1d 02 c0 	mov    DWORD PTR [esp],0xc0021df0
c000d49c:	e8 02 f1 ff ff       	call   c000c5a3 <KeSetBootMessage(char const*)>
c000d4a1:	e8 74 a6 00 00       	call   c0017b1a <HalEnableNMI()>
c000d4a6:	e8 87 98 00 00       	call   c0016d32 <HalDetectFeatures()>
c000d4ab:	c7 04 24 78 11 00 00 	mov    DWORD PTR [esp],0x1178
c000d4b2:	e8 19 14 00 00       	call   c000e8d0 <malloc>
c000d4b7:	89 04 24             	mov    DWORD PTR [esp],eax
c000d4ba:	89 c6                	mov    esi,eax
c000d4bc:	e8 17 b1 00 00       	call   c00185d8 <CPU::CPU()>
c000d4c1:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000d4c7:	59                   	pop    ecx
c000d4c8:	58                   	pop    eax
c000d4c9:	56                   	push   esi
c000d4ca:	53                   	push   ebx
c000d4cb:	e8 72 bb ff ff       	call   c0009042 <Device::addChild(Device*)>
c000d4d0:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000d4d4:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d4da:	8b 10                	mov    edx,DWORD PTR [eax]
c000d4dc:	51                   	push   ecx
c000d4dd:	6a 00                	push   0x0
c000d4df:	6a 00                	push   0x0
c000d4e1:	50                   	push   eax
c000d4e2:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000d4e5:	83 c4 14             	add    esp,0x14
c000d4e8:	68 4c 1d 02 c0       	push   0xc0021d4c
c000d4ed:	e8 b1 f0 ff ff       	call   c000c5a3 <KeSetBootMessage(char const*)>
c000d4f2:	e8 3b ad 00 00       	call   c0018232 <HalInitialiseCoprocessor()>
c000d4f7:	c7 04 24 0a 1e 02 c0 	mov    DWORD PTR [esp],0xc0021e0a
c000d4fe:	e8 a0 f0 ff ff       	call   c000c5a3 <KeSetBootMessage(char const*)>
c000d503:	c7 04 24 1a d5 00 c0 	mov    DWORD PTR [esp],0xc000d51a
c000d50a:	e8 bd 7d 00 00       	call   c00152cc <setupMultitasking(void (*)())>
c000d50f:	83 c4 14             	add    esp,0x14
c000d512:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000d517:	5b                   	pop    ebx
c000d518:	5e                   	pop    esi
c000d519:	c3                   	ret    

c000d51a <KeFirstTask()>:
c000d51a:	53                   	push   ebx
c000d51b:	83 ec 14             	sub    esp,0x14
c000d51e:	fb                   	sti    
c000d51f:	68 25 1e 02 c0       	push   0xc0021e25
c000d524:	e8 7a f0 ff ff       	call   c000c5a3 <KeSetBootMessage(char const*)>
c000d529:	c7 04 24 24 07 00 00 	mov    DWORD PTR [esp],0x724
c000d530:	e8 9b 13 00 00       	call   c000e8d0 <malloc>
c000d535:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000d53c:	89 c3                	mov    ebx,eax
c000d53e:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c000d543:	50                   	push   eax
c000d544:	68 3e 1e 02 c0       	push   0xc0021e3e
c000d549:	6a 01                	push   0x1
c000d54b:	53                   	push   ebx
c000d54c:	e8 2b 7a 00 00       	call   c0014f7c <Process::Process(bool, char const*, Process*, char**)>
c000d551:	83 c4 20             	add    esp,0x20
c000d554:	68 ff 00 00 00       	push   0xff
c000d559:	6a 00                	push   0x0
c000d55b:	68 09 e2 00 c0       	push   0xc000e209
c000d560:	53                   	push   ebx
c000d561:	e8 3e 7c 00 00       	call   c00151a4 <Process::createThread(void (*)(void*), void*, int)>
c000d566:	8b 15 d8 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6d8
c000d56c:	6a 7a                	push   0x7a
c000d56e:	6a 00                	push   0x0
c000d570:	68 5c 5a 01 c0       	push   0xc0015a5c
c000d575:	52                   	push   edx
c000d576:	e8 29 7c 00 00       	call   c00151a4 <Process::createThread(void (*)(void*), void*, int)>
c000d57b:	83 c4 14             	add    esp,0x14
c000d57e:	68 70 1d 02 c0       	push   0xc0021d70
c000d583:	a3 90 c6 02 c0       	mov    ds:0xc002c690,eax
c000d588:	e8 16 f0 ff ff       	call   c000c5a3 <KeSetBootMessage(char const*)>
c000d58d:	c6 05 75 9d 02 c0 01 	mov    BYTE PTR ds:0xc0029d75,0x1
c000d594:	e8 bb 20 00 00       	call   c000f654 <KeInitRand()>
c000d599:	e8 55 88 00 00       	call   c0015df3 <Vm::initialise8086()>
c000d59e:	e8 33 a8 ff ff       	call   c0007dd6 <Fs::initVFS()>
c000d5a3:	c7 04 24 f4 1a 02 c0 	mov    DWORD PTR [esp],0xc0021af4
c000d5aa:	e8 f4 ef ff ff       	call   c000c5a3 <KeSetBootMessage(char const*)>
c000d5af:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c000d5b4:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c000d5ba:	8b 10                	mov    edx,DWORD PTR [eax]
c000d5bc:	6a 00                	push   0x0
c000d5be:	6a 00                	push   0x0
c000d5c0:	6a 00                	push   0x0
c000d5c2:	50                   	push   eax
c000d5c3:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000d5c6:	83 c4 14             	add    esp,0x14
c000d5c9:	68 70 1d 02 c0       	push   0xc0021d70
c000d5ce:	e8 d0 ef ff ff       	call   c000c5a3 <KeSetBootMessage(char const*)>
c000d5d3:	e8 e3 9f ff ff       	call   c00075bb <KeInitialiseSymlinks()>
c000d5d8:	e8 f5 05 00 00       	call   c000dbd2 <KeLoadSystemEnv()>
c000d5dd:	e8 80 1f 00 00       	call   c000f562 <KeSetupPowerManager()>
c000d5e2:	c7 04 24 94 1d 02 c0 	mov    DWORD PTR [esp],0xc0021d94
c000d5e9:	e8 b5 ef ff ff       	call   c000c5a3 <KeSetBootMessage(char const*)>
c000d5ee:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c000d5f3:	59                   	pop    ecx
c000d5f4:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c000d5fa:	53                   	push   ebx
c000d5fb:	e8 5e bb ff ff       	call   c000915e <Device::loadDriversForAll()>
c000d600:	c7 04 24 4b 1e 02 c0 	mov    DWORD PTR [esp],0xc0021e4b
c000d607:	e8 97 ef ff ff       	call   c000c5a3 <KeSetBootMessage(char const*)>
c000d60c:	8b 1d 70 9d 02 c0    	mov    ebx,DWORD PTR ds:0xc0029d70
c000d612:	58                   	pop    eax
c000d613:	5a                   	pop    edx
c000d614:	6a 01                	push   0x1
c000d616:	68 5c 1e 02 c0       	push   0xc0021e5c
c000d61b:	e8 e7 72 00 00       	call   c0014907 <Thr::loadDLL(char const*, bool)>
c000d620:	59                   	pop    ecx
c000d621:	5a                   	pop    edx
c000d622:	53                   	push   ebx
c000d623:	50                   	push   eax
c000d624:	e8 3f 75 00 00       	call   c0014b68 <Thr::executeDLL(unsigned long, void*)>
c000d629:	83 c4 10             	add    esp,0x10
c000d62c:	83 ec 0c             	sub    esp,0xc
c000d62f:	6a 02                	push   0x2
c000d631:	e8 76 7e 00 00       	call   c00154ac <blockTask(TaskState)>
c000d636:	83 c4 10             	add    esp,0x10
c000d639:	eb f1                	jmp    c000d62c <KeFirstTask()+0x112>
c000d63b:	90                   	nop

c000d63c <Computer::Computer()>:
c000d63c:	83 ec 0c             	sub    esp,0xc
c000d63f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d643:	83 ec 08             	sub    esp,0x8
c000d646:	68 78 1e 02 c0       	push   0xc0021e78
c000d64b:	50                   	push   eax
c000d64c:	e8 53 bb ff ff       	call   c00091a4 <Device::Device(char const*)>
c000d651:	83 c4 10             	add    esp,0x10
c000d654:	ba 8c 1e 02 c0       	mov    edx,0xc0021e8c
c000d659:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d65d:	89 10                	mov    DWORD PTR [eax],edx
c000d65f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d663:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000d66d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d671:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000d67b:	90                   	nop
c000d67c:	83 c4 0c             	add    esp,0xc
c000d67f:	c3                   	ret    

c000d680 <KePrepareShutdown()>:
c000d680:	83 ec 0c             	sub    esp,0xc
c000d683:	e8 89 ee ff ff       	call   c000c511 <KeExecuteAtexit()>
c000d688:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c000d68d:	83 ec 0c             	sub    esp,0xc
c000d690:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c000d696:	50                   	push   eax
c000d697:	e8 0e bc ff ff       	call   c00092aa <Device::closeAll()>
c000d69c:	83 c4 1c             	add    esp,0x1c
c000d69f:	c3                   	ret    

c000d6a0 <KeShutdown()>:
c000d6a0:	83 ec 0c             	sub    esp,0xc
c000d6a3:	e8 d8 ff ff ff       	call   c000d680 <KePrepareShutdown()>
c000d6a8:	a1 6c 9d 02 c0       	mov    eax,ds:0xc0029d6c
c000d6ad:	85 c0                	test   eax,eax
c000d6af:	74 02                	je     c000d6b3 <KeShutdown()+0x13>
c000d6b1:	ff d0                	call   eax
c000d6b3:	83 ec 0c             	sub    esp,0xc
c000d6b6:	68 b4 1d 02 c0       	push   0xc0021db4
c000d6bb:	e8 66 15 00 00       	call   c000ec26 <KePanic(char const*)>
c000d6c0:	83 c4 1c             	add    esp,0x1c
c000d6c3:	c3                   	ret    

c000d6c4 <KeSleep()>:
c000d6c4:	a1 64 9d 02 c0       	mov    eax,ds:0xc0029d64
c000d6c9:	85 c0                	test   eax,eax
c000d6cb:	74 02                	je     c000d6cf <KeSleep()+0xb>
c000d6cd:	ff e0                	jmp    eax
c000d6cf:	c3                   	ret    

c000d6d0 <KeRestart()>:
c000d6d0:	83 ec 0c             	sub    esp,0xc
c000d6d3:	e8 a8 ff ff ff       	call   c000d680 <KePrepareShutdown()>
c000d6d8:	a1 68 9d 02 c0       	mov    eax,ds:0xc0029d68
c000d6dd:	85 c0                	test   eax,eax
c000d6df:	74 02                	je     c000d6e3 <KeRestart()+0x13>
c000d6e1:	ff d0                	call   eax
c000d6e3:	e4 64                	in     al,0x64
c000d6e5:	a8 02                	test   al,0x2
c000d6e7:	75 fa                	jne    c000d6e3 <KeRestart()+0x13>
c000d6e9:	b0 fe                	mov    al,0xfe
c000d6eb:	e6 64                	out    0x64,al
c000d6ed:	83 c4 0c             	add    esp,0xc
c000d6f0:	c3                   	ret    

c000d6f1 <KeCalculateCRC32(unsigned char*, int)>:
c000d6f1:	53                   	push   ebx
c000d6f2:	83 c8 ff             	or     eax,0xffffffff
c000d6f5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d6f9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000d6fd:	01 cb                	add    ebx,ecx
c000d6ff:	39 d9                	cmp    ecx,ebx
c000d701:	74 15                	je     c000d718 <KeCalculateCRC32(unsigned char*, int)+0x27>
c000d703:	41                   	inc    ecx
c000d704:	8a 51 ff             	mov    dl,BYTE PTR [ecx-0x1]
c000d707:	31 c2                	xor    edx,eax
c000d709:	c1 e8 08             	shr    eax,0x8
c000d70c:	0f b6 d2             	movzx  edx,dl
c000d70f:	33 04 95 a0 3b 02 c0 	xor    eax,DWORD PTR [edx*4-0x3ffdc460]
c000d716:	eb e7                	jmp    c000d6ff <KeCalculateCRC32(unsigned char*, int)+0xe>
c000d718:	5b                   	pop    ebx
c000d719:	f7 d0                	not    eax
c000d71b:	c3                   	ret    

c000d71c <EnvVarContainer::getEnv(char const*)>:
c000d71c:	57                   	push   edi
c000d71d:	56                   	push   esi
c000d71e:	53                   	push   ebx
c000d71f:	31 db                	xor    ebx,ebx
c000d721:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d725:	39 1e                	cmp    DWORD PTR [esi],ebx
c000d727:	7e 2b                	jle    c000d754 <EnvVarContainer::getEnv(char const*)+0x38>
c000d729:	50                   	push   eax
c000d72a:	50                   	push   eax
c000d72b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d72e:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c000d735:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000d738:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000d73c:	e8 3f 30 ff ff       	call   c0000780 <strcmp>
c000d741:	83 c4 10             	add    esp,0x10
c000d744:	85 c0                	test   eax,eax
c000d746:	75 09                	jne    c000d751 <EnvVarContainer::getEnv(char const*)+0x35>
c000d748:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d74b:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c000d74f:	eb 05                	jmp    c000d756 <EnvVarContainer::getEnv(char const*)+0x3a>
c000d751:	43                   	inc    ebx
c000d752:	eb d1                	jmp    c000d725 <EnvVarContainer::getEnv(char const*)+0x9>
c000d754:	31 c0                	xor    eax,eax
c000d756:	5b                   	pop    ebx
c000d757:	5e                   	pop    esi
c000d758:	5f                   	pop    edi
c000d759:	c3                   	ret    

c000d75a <EnvVarContainer::setEnv(char const*, char const*)>:
c000d75a:	55                   	push   ebp
c000d75b:	57                   	push   edi
c000d75c:	56                   	push   esi
c000d75d:	53                   	push   ebx
c000d75e:	83 ec 28             	sub    esp,0x28
c000d761:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000d765:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000d769:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000d76d:	56                   	push   esi
c000d76e:	e8 0d 2e ff ff       	call   c0000580 <strlen>
c000d773:	40                   	inc    eax
c000d774:	89 04 24             	mov    DWORD PTR [esp],eax
c000d777:	e8 54 11 00 00       	call   c000e8d0 <malloc>
c000d77c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d77f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d783:	e8 f8 2d ff ff       	call   c0000580 <strlen>
c000d788:	40                   	inc    eax
c000d789:	89 04 24             	mov    DWORD PTR [esp],eax
c000d78c:	e8 3f 11 00 00       	call   c000e8d0 <malloc>
c000d791:	89 34 24             	mov    DWORD PTR [esp],esi
c000d794:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000d798:	e8 e3 2d ff ff       	call   c0000580 <strlen>
c000d79d:	83 c4 0c             	add    esp,0xc
c000d7a0:	40                   	inc    eax
c000d7a1:	50                   	push   eax
c000d7a2:	6a 00                	push   0x0
c000d7a4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d7a8:	e8 43 2d ff ff       	call   c00004f0 <memset>
c000d7ad:	89 34 24             	mov    DWORD PTR [esp],esi
c000d7b0:	e8 cb 2d ff ff       	call   c0000580 <strlen>
c000d7b5:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000d7b9:	8d 48 01             	lea    ecx,[eax+0x1]
c000d7bc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d7be:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d7c1:	89 de                	mov    esi,ebx
c000d7c3:	e8 b8 2d ff ff       	call   c0000580 <strlen>
c000d7c8:	83 c4 0c             	add    esp,0xc
c000d7cb:	40                   	inc    eax
c000d7cc:	50                   	push   eax
c000d7cd:	6a 00                	push   0x0
c000d7cf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d7d3:	e8 18 2d ff ff       	call   c00004f0 <memset>
c000d7d8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d7db:	e8 a0 2d ff ff       	call   c0000580 <strlen>
c000d7e0:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000d7e4:	8d 48 01             	lea    ecx,[eax+0x1]
c000d7e7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d7e9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d7ec:	40                   	inc    eax
c000d7ed:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d7f0:	c1 e0 03             	shl    eax,0x3
c000d7f3:	5a                   	pop    edx
c000d7f4:	59                   	pop    ecx
c000d7f5:	50                   	push   eax
c000d7f6:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d7f9:	e8 be 10 00 00       	call   c000e8bc <realloc>
c000d7fe:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000d801:	8d 74 24 18          	lea    esi,[esp+0x18]
c000d805:	b9 08 00 00 00       	mov    ecx,0x8
c000d80a:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000d80d:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000d811:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d813:	83 c4 2c             	add    esp,0x2c
c000d816:	5b                   	pop    ebx
c000d817:	5e                   	pop    esi
c000d818:	5f                   	pop    edi
c000d819:	5d                   	pop    ebp
c000d81a:	c3                   	ret    
c000d81b:	90                   	nop

c000d81c <EnvVarContainer::deleteEnv(char const*)>:
c000d81c:	c3                   	ret    
c000d81d:	90                   	nop

c000d81e <EnvVarContainer::loadFrom(char const*, char const*)>:
c000d81e:	55                   	push   ebp
c000d81f:	57                   	push   edi
c000d820:	56                   	push   esi
c000d821:	53                   	push   ebx
c000d822:	81 ec 38 01 00 00    	sub    esp,0x138
c000d828:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c000d82f:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c000d836:	68 14 01 00 00       	push   0x114
c000d83b:	e8 90 10 00 00       	call   c000e8d0 <malloc>
c000d840:	83 c4 0c             	add    esp,0xc
c000d843:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000d846:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000d84d:	89 c3                	mov    ebx,eax
c000d84f:	50                   	push   eax
c000d850:	e8 b7 a8 ff ff       	call   c000810c <File::File(char const*, Process*)>
c000d855:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d858:	e8 91 ab ff ff       	call   c00083ee <File::exists()>
c000d85d:	83 c4 10             	add    esp,0x10
c000d860:	84 c0                	test   al,al
c000d862:	75 31                	jne    c000d895 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c000d864:	50                   	push   eax
c000d865:	50                   	push   eax
c000d866:	6a 12                	push   0x12
c000d868:	53                   	push   ebx
c000d869:	e8 bc a8 ff ff       	call   c000812a <File::open(FileOpenMode)>
c000d86e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d870:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000d873:	89 34 24             	mov    DWORD PTR [esp],esi
c000d876:	e8 05 2d ff ff       	call   c0000580 <strlen>
c000d87b:	5a                   	pop    edx
c000d87c:	8d 54 24 20          	lea    edx,[esp+0x20]
c000d880:	52                   	push   edx
c000d881:	31 d2                	xor    edx,edx
c000d883:	56                   	push   esi
c000d884:	52                   	push   edx
c000d885:	50                   	push   eax
c000d886:	53                   	push   ebx
c000d887:	ff d7                	call   edi
c000d889:	83 c4 14             	add    esp,0x14
c000d88c:	53                   	push   ebx
c000d88d:	e8 f6 a8 ff ff       	call   c0008188 <File::close()>
c000d892:	83 c4 10             	add    esp,0x10
c000d895:	56                   	push   esi
c000d896:	31 f6                	xor    esi,esi
c000d898:	68 00 01 00 00       	push   0x100
c000d89d:	6a 00                	push   0x0
c000d89f:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d8a3:	50                   	push   eax
c000d8a4:	e8 47 2c ff ff       	call   c00004f0 <memset>
c000d8a9:	5f                   	pop    edi
c000d8aa:	58                   	pop    eax
c000d8ab:	6a 01                	push   0x1
c000d8ad:	53                   	push   ebx
c000d8ae:	e8 77 a8 ff ff       	call   c000812a <File::open(FileOpenMode)>
c000d8b3:	83 c4 10             	add    esp,0x10
c000d8b6:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000d8be:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000d8c6:	83 ec 0c             	sub    esp,0xc
c000d8c9:	8d 54 24 20          	lea    edx,[esp+0x20]
c000d8cd:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d8cf:	52                   	push   edx
c000d8d0:	8d 4c 24 23          	lea    ecx,[esp+0x23]
c000d8d4:	51                   	push   ecx
c000d8d5:	6a 00                	push   0x0
c000d8d7:	6a 01                	push   0x1
c000d8d9:	53                   	push   ebx
c000d8da:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000d8dd:	0f be 44 24 33       	movsx  eax,BYTE PTR [esp+0x33]
c000d8e2:	83 c4 20             	add    esp,0x20
c000d8e5:	85 c0                	test   eax,eax
c000d8e7:	89 c1                	mov    ecx,eax
c000d8e9:	0f 84 36 01 00 00    	je     c000da25 <EnvVarContainer::loadFrom(char const*, char const*)+0x207>
c000d8ef:	83 f8 0d             	cmp    eax,0xd
c000d8f2:	0f 84 22 01 00 00    	je     c000da1a <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000d8f8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000d8fd:	0f 84 f0 00 00 00    	je     c000d9f3 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d5>
c000d903:	83 f8 0a             	cmp    eax,0xa
c000d906:	74 13                	je     c000d91b <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c000d908:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000d90d:	74 0c                	je     c000d91b <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c000d90f:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000d915:	0f 8e f6 00 00 00    	jle    c000da11 <EnvVarContainer::loadFrom(char const*, char const*)+0x1f3>
c000d91b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d91f:	83 ec 0c             	sub    esp,0xc
c000d922:	8d 78 01             	lea    edi,[eax+0x1]
c000d925:	57                   	push   edi
c000d926:	e8 a5 0f 00 00       	call   c000e8d0 <malloc>
c000d92b:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c000d92f:	8d 56 04             	lea    edx,[esi+0x4]
c000d932:	89 14 24             	mov    DWORD PTR [esp],edx
c000d935:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d939:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d93d:	e8 8e 0f 00 00       	call   c000e8d0 <malloc>
c000d942:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d946:	83 c4 0c             	add    esp,0xc
c000d949:	57                   	push   edi
c000d94a:	6a 00                	push   0x0
c000d94c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d950:	e8 9b 2b ff ff       	call   c00004f0 <memset>
c000d955:	8d 74 24 30          	lea    esi,[esp+0x30]
c000d959:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000d95d:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000d961:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d963:	83 c4 0c             	add    esp,0xc
c000d966:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d96a:	52                   	push   edx
c000d96b:	6a 00                	push   0x0
c000d96d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d971:	e8 7a 2b ff ff       	call   c00004f0 <memset>
c000d976:	8d 74 24 30          	lea    esi,[esp+0x30]
c000d97a:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c000d97e:	89 34 24             	mov    DWORD PTR [esp],esi
c000d981:	e8 fa 2b ff ff       	call   c0000580 <strlen>
c000d986:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c000d98a:	89 c1                	mov    ecx,eax
c000d98c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d98e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d991:	83 c4 10             	add    esp,0x10
c000d994:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d997:	40                   	inc    eax
c000d998:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d99b:	85 d2                	test   edx,edx
c000d99d:	75 0c                	jne    c000d9ab <EnvVarContainer::loadFrom(char const*, char const*)+0x18d>
c000d99f:	83 ec 0c             	sub    esp,0xc
c000d9a2:	6a 08                	push   0x8
c000d9a4:	e8 27 0f 00 00       	call   c000e8d0 <malloc>
c000d9a9:	eb 0c                	jmp    c000d9b7 <EnvVarContainer::loadFrom(char const*, char const*)+0x199>
c000d9ab:	51                   	push   ecx
c000d9ac:	51                   	push   ecx
c000d9ad:	c1 e0 03             	shl    eax,0x3
c000d9b0:	50                   	push   eax
c000d9b1:	52                   	push   edx
c000d9b2:	e8 05 0f 00 00       	call   c000e8bc <realloc>
c000d9b7:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000d9ba:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000d9bd:	83 c4 10             	add    esp,0x10
c000d9c0:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c000d9c3:	8d 74 24 18          	lea    esi,[esp+0x18]
c000d9c7:	b9 08 00 00 00       	mov    ecx,0x8
c000d9cc:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000d9d0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d9d2:	50                   	push   eax
c000d9d3:	31 f6                	xor    esi,esi
c000d9d5:	68 00 01 00 00       	push   0x100
c000d9da:	6a 00                	push   0x0
c000d9dc:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d9e0:	50                   	push   eax
c000d9e1:	e8 0a 2b ff ff       	call   c00004f0 <memset>
c000d9e6:	83 c4 10             	add    esp,0x10
c000d9e9:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000d9f1:	eb 27                	jmp    c000da1a <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000d9f3:	83 f8 3d             	cmp    eax,0x3d
c000d9f6:	74 1e                	je     c000da16 <EnvVarContainer::loadFrom(char const*, char const*)+0x1f8>
c000d9f8:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000d9fe:	7f 07                	jg     c000da07 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e9>
c000da00:	88 4c 34 20          	mov    BYTE PTR [esp+esi*1+0x20],cl
c000da04:	46                   	inc    esi
c000da05:	eb 13                	jmp    c000da1a <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000da07:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c000da0f:	eb 09                	jmp    c000da1a <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000da11:	83 f8 3d             	cmp    eax,0x3d
c000da14:	75 ea                	jne    c000da00 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e2>
c000da16:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000da1a:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000da1f:	0f 85 99 fe ff ff    	jne    c000d8be <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c000da25:	83 ec 0c             	sub    esp,0xc
c000da28:	53                   	push   ebx
c000da29:	e8 5a a7 ff ff       	call   c0008188 <File::close()>
c000da2e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000da30:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000da33:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000da36:	81 c4 3c 01 00 00    	add    esp,0x13c
c000da3c:	5b                   	pop    ebx
c000da3d:	5e                   	pop    esi
c000da3e:	5f                   	pop    edi
c000da3f:	5d                   	pop    ebp
c000da40:	c3                   	ret    
c000da41:	90                   	nop

c000da42 <EnvVarContainer::__loadSystem()>:
c000da42:	83 ec 10             	sub    esp,0x10
c000da45:	68 a0 3f 02 c0       	push   0xc0023fa0
c000da4a:	68 b0 1e 02 c0       	push   0xc0021eb0
c000da4f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da53:	e8 c6 fd ff ff       	call   c000d81e <EnvVarContainer::loadFrom(char const*, char const*)>
c000da58:	83 c4 1c             	add    esp,0x1c
c000da5b:	c3                   	ret    

c000da5c <EnvVarContainer::__loadUser()>:
c000da5c:	c3                   	ret    
c000da5d:	90                   	nop

c000da5e <EnvVarContainer::EnvVarContainer(Process*)>:
c000da5e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000da62:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000da68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000da6c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000da70:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000da73:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000da77:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000da7e:	90                   	nop
c000da7f:	c3                   	ret    

c000da80 <EnvVarContainer::~EnvVarContainer()>:
c000da80:	83 ec 0c             	sub    esp,0xc
c000da83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da87:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000da8a:	85 c0                	test   eax,eax
c000da8c:	74 1d                	je     c000daab <EnvVarContainer::~EnvVarContainer()+0x2b>
c000da8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da92:	8b 00                	mov    eax,DWORD PTR [eax]
c000da94:	85 c0                	test   eax,eax
c000da96:	74 13                	je     c000daab <EnvVarContainer::~EnvVarContainer()+0x2b>
c000da98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da9c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000da9f:	83 ec 0c             	sub    esp,0xc
c000daa2:	50                   	push   eax
c000daa3:	e8 38 0e 00 00       	call   c000e8e0 <free>
c000daa8:	83 c4 10             	add    esp,0x10
c000daab:	90                   	nop
c000daac:	83 c4 0c             	add    esp,0xc
c000daaf:	c3                   	ret    

c000dab0 <KeGetEnv(Process*, char const*)>:
c000dab0:	53                   	push   ebx
c000dab1:	83 ec 08             	sub    esp,0x8
c000dab4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dab8:	39 05 d8 c6 02 c0    	cmp    DWORD PTR ds:0xc002c6d8,eax
c000dabe:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000dac2:	74 04                	je     c000dac8 <KeGetEnv(Process*, char const*)+0x18>
c000dac4:	85 c0                	test   eax,eax
c000dac6:	75 0b                	jne    c000dad3 <KeGetEnv(Process*, char const*)+0x23>
c000dac8:	a1 78 9d 02 c0       	mov    eax,ds:0xc0029d78
c000dacd:	85 c0                	test   eax,eax
c000dacf:	75 19                	jne    c000daea <KeGetEnv(Process*, char const*)+0x3a>
c000dad1:	eb 27                	jmp    c000dafa <KeGetEnv(Process*, char const*)+0x4a>
c000dad3:	52                   	push   edx
c000dad4:	52                   	push   edx
c000dad5:	53                   	push   ebx
c000dad6:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c000dadc:	e8 3b fc ff ff       	call   c000d71c <EnvVarContainer::getEnv(char const*)>
c000dae1:	83 c4 10             	add    esp,0x10
c000dae4:	85 c0                	test   eax,eax
c000dae6:	75 28                	jne    c000db10 <KeGetEnv(Process*, char const*)+0x60>
c000dae8:	eb de                	jmp    c000dac8 <KeGetEnv(Process*, char const*)+0x18>
c000daea:	52                   	push   edx
c000daeb:	52                   	push   edx
c000daec:	53                   	push   ebx
c000daed:	50                   	push   eax
c000daee:	e8 29 fc ff ff       	call   c000d71c <EnvVarContainer::getEnv(char const*)>
c000daf3:	83 c4 10             	add    esp,0x10
c000daf6:	85 c0                	test   eax,eax
c000daf8:	75 16                	jne    c000db10 <KeGetEnv(Process*, char const*)+0x60>
c000dafa:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000dafe:	a1 7c 9d 02 c0       	mov    eax,ds:0xc0029d7c
c000db03:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000db07:	83 c4 08             	add    esp,0x8
c000db0a:	5b                   	pop    ebx
c000db0b:	e9 0c fc ff ff       	jmp    c000d71c <EnvVarContainer::getEnv(char const*)>
c000db10:	83 c4 08             	add    esp,0x8
c000db13:	5b                   	pop    ebx
c000db14:	c3                   	ret    

c000db15 <KeSetEnvSystem(char const*, char const*)>:
c000db15:	83 ec 10             	sub    esp,0x10
c000db18:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000db1c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000db20:	ff 35 7c 9d 02 c0    	push   DWORD PTR ds:0xc0029d7c
c000db26:	e8 2f fc ff ff       	call   c000d75a <EnvVarContainer::setEnv(char const*, char const*)>
c000db2b:	83 c4 1c             	add    esp,0x1c
c000db2e:	c3                   	ret    

c000db2f <KeSetEnvUser(char const*, char const*)>:
c000db2f:	a1 78 9d 02 c0       	mov    eax,ds:0xc0029d78
c000db34:	85 c0                	test   eax,eax
c000db36:	74 15                	je     c000db4d <KeSetEnvUser(char const*, char const*)+0x1e>
c000db38:	83 ec 10             	sub    esp,0x10
c000db3b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000db3f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000db43:	50                   	push   eax
c000db44:	e8 11 fc ff ff       	call   c000d75a <EnvVarContainer::setEnv(char const*, char const*)>
c000db49:	83 c4 1c             	add    esp,0x1c
c000db4c:	c3                   	ret    
c000db4d:	c3                   	ret    

c000db4e <KeSetEnvProcess(Process*, char const*, char const*)>:
c000db4e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000db52:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c000db58:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000db5c:	e9 f9 fb ff ff       	jmp    c000d75a <EnvVarContainer::setEnv(char const*, char const*)>

c000db61 <KeDeleteEnvSystem(char const*)>:
c000db61:	c3                   	ret    

c000db62 <KeDeleteEnvUser(char const*)>:
c000db62:	c3                   	ret    

c000db63 <KeDeleteEnvProcess(Process*, char const*)>:
c000db63:	c3                   	ret    

c000db64 <KeNewProcessEnv(Process*)>:
c000db64:	83 ec 28             	sub    esp,0x28
c000db67:	6a 0c                	push   0xc
c000db69:	e8 62 0d 00 00       	call   c000e8d0 <malloc>
c000db6e:	5a                   	pop    edx
c000db6f:	59                   	pop    ecx
c000db70:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000db74:	50                   	push   eax
c000db75:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000db79:	e8 e0 fe ff ff       	call   c000da5e <EnvVarContainer::EnvVarContainer(Process*)>
c000db7e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000db82:	83 c4 2c             	add    esp,0x2c
c000db85:	c3                   	ret    

c000db86 <KeCopyProcessEnv(Process*, Process*)>:
c000db86:	57                   	push   edi
c000db87:	56                   	push   esi
c000db88:	53                   	push   ebx
c000db89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db8d:	83 ec 0c             	sub    esp,0xc
c000db90:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c000db96:	6a 0c                	push   0xc
c000db98:	e8 33 0d 00 00       	call   c000e8d0 <malloc>
c000db9d:	89 c3                	mov    ebx,eax
c000db9f:	58                   	pop    eax
c000dba0:	5a                   	pop    edx
c000dba1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dba5:	53                   	push   ebx
c000dba6:	e8 b3 fe ff ff       	call   c000da5e <EnvVarContainer::EnvVarContainer(Process*)>
c000dbab:	8b 07                	mov    eax,DWORD PTR [edi]
c000dbad:	89 03                	mov    DWORD PTR [ebx],eax
c000dbaf:	c1 e0 03             	shl    eax,0x3
c000dbb2:	89 04 24             	mov    DWORD PTR [esp],eax
c000dbb5:	e8 16 0d 00 00       	call   c000e8d0 <malloc>
c000dbba:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000dbbd:	8b 0f                	mov    ecx,DWORD PTR [edi]
c000dbbf:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c000dbc2:	89 c7                	mov    edi,eax
c000dbc4:	c1 e1 03             	shl    ecx,0x3
c000dbc7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000dbc9:	83 c4 10             	add    esp,0x10
c000dbcc:	89 d8                	mov    eax,ebx
c000dbce:	5b                   	pop    ebx
c000dbcf:	5e                   	pop    esi
c000dbd0:	5f                   	pop    edi
c000dbd1:	c3                   	ret    

c000dbd2 <KeLoadSystemEnv()>:
c000dbd2:	53                   	push   ebx
c000dbd3:	83 ec 14             	sub    esp,0x14
c000dbd6:	6a 0c                	push   0xc
c000dbd8:	e8 f3 0c 00 00       	call   c000e8d0 <malloc>
c000dbdd:	89 c3                	mov    ebx,eax
c000dbdf:	58                   	pop    eax
c000dbe0:	5a                   	pop    edx
c000dbe1:	ff 35 d8 c6 02 c0    	push   DWORD PTR ds:0xc002c6d8
c000dbe7:	53                   	push   ebx
c000dbe8:	e8 71 fe ff ff       	call   c000da5e <EnvVarContainer::EnvVarContainer(Process*)>
c000dbed:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000dbf0:	89 1d 7c 9d 02 c0    	mov    DWORD PTR ds:0xc0029d7c,ebx
c000dbf6:	e8 47 fe ff ff       	call   c000da42 <EnvVarContainer::__loadSystem()>
c000dbfb:	83 c4 18             	add    esp,0x18
c000dbfe:	5b                   	pop    ebx
c000dbff:	c3                   	ret    

c000dc00 <KeLoadUserEnv()>:
c000dc00:	53                   	push   ebx
c000dc01:	83 ec 14             	sub    esp,0x14
c000dc04:	6a 0c                	push   0xc
c000dc06:	e8 c5 0c 00 00       	call   c000e8d0 <malloc>
c000dc0b:	89 c3                	mov    ebx,eax
c000dc0d:	58                   	pop    eax
c000dc0e:	5a                   	pop    edx
c000dc0f:	ff 35 d8 c6 02 c0    	push   DWORD PTR ds:0xc002c6d8
c000dc15:	53                   	push   ebx
c000dc16:	e8 43 fe ff ff       	call   c000da5e <EnvVarContainer::EnvVarContainer(Process*)>
c000dc1b:	89 1d 78 9d 02 c0    	mov    DWORD PTR ds:0xc0029d78,ebx
c000dc21:	83 c4 18             	add    esp,0x18
c000dc24:	5b                   	pop    ebx
c000dc25:	c3                   	ret    

c000dc26 <KeFlushEnv()>:
c000dc26:	c3                   	ret    

c000dc27 <KeGetProcessTotalEnvCount(Process*)>:
c000dc27:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dc2b:	8b 15 78 9d 02 c0    	mov    edx,DWORD PTR ds:0xc0029d78
c000dc31:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c000dc37:	a1 7c 9d 02 c0       	mov    eax,ds:0xc0029d7c
c000dc3c:	8b 00                	mov    eax,DWORD PTR [eax]
c000dc3e:	03 01                	add    eax,DWORD PTR [ecx]
c000dc40:	85 d2                	test   edx,edx
c000dc42:	74 02                	je     c000dc46 <KeGetProcessTotalEnvCount(Process*)+0x1f>
c000dc44:	03 02                	add    eax,DWORD PTR [edx]
c000dc46:	c3                   	ret    

c000dc47 <KeGetProcessEnvPair(Process*, int)>:
c000dc47:	57                   	push   edi
c000dc48:	56                   	push   esi
c000dc49:	8b 35 78 9d 02 c0    	mov    esi,DWORD PTR ds:0xc0029d78
c000dc4f:	53                   	push   ebx
c000dc50:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000dc54:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000dc58:	85 f6                	test   esi,esi
c000dc5a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000dc5e:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c000dc64:	8b 01                	mov    eax,DWORD PTR [ecx]
c000dc66:	75 16                	jne    c000dc7e <KeGetProcessEnvPair(Process*, int)+0x37>
c000dc68:	39 c2                	cmp    edx,eax
c000dc6a:	7c 16                	jl     c000dc82 <KeGetProcessEnvPair(Process*, int)+0x3b>
c000dc6c:	8b 0d 7c 9d 02 c0    	mov    ecx,DWORD PTR ds:0xc0029d7c
c000dc72:	8b 31                	mov    esi,DWORD PTR [ecx]
c000dc74:	01 c6                	add    esi,eax
c000dc76:	39 d6                	cmp    esi,edx
c000dc78:	7e 3c                	jle    c000dcb6 <KeGetProcessEnvPair(Process*, int)+0x6f>
c000dc7a:	29 c2                	sub    edx,eax
c000dc7c:	eb 04                	jmp    c000dc82 <KeGetProcessEnvPair(Process*, int)+0x3b>
c000dc7e:	39 c2                	cmp    edx,eax
c000dc80:	7d 05                	jge    c000dc87 <KeGetProcessEnvPair(Process*, int)+0x40>
c000dc82:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c000dc85:	eb 20                	jmp    c000dca7 <KeGetProcessEnvPair(Process*, int)+0x60>
c000dc87:	8b 3e                	mov    edi,DWORD PTR [esi]
c000dc89:	8d 0c 07             	lea    ecx,[edi+eax*1]
c000dc8c:	39 d1                	cmp    ecx,edx
c000dc8e:	7e 04                	jle    c000dc94 <KeGetProcessEnvPair(Process*, int)+0x4d>
c000dc90:	29 c2                	sub    edx,eax
c000dc92:	eb 10                	jmp    c000dca4 <KeGetProcessEnvPair(Process*, int)+0x5d>
c000dc94:	8b 35 7c 9d 02 c0    	mov    esi,DWORD PTR ds:0xc0029d7c
c000dc9a:	03 0e                	add    ecx,DWORD PTR [esi]
c000dc9c:	39 d1                	cmp    ecx,edx
c000dc9e:	7e 16                	jle    c000dcb6 <KeGetProcessEnvPair(Process*, int)+0x6f>
c000dca0:	29 c2                	sub    edx,eax
c000dca2:	29 fa                	sub    edx,edi
c000dca4:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000dca7:	8d 14 d0             	lea    edx,[eax+edx*8]
c000dcaa:	8b 02                	mov    eax,DWORD PTR [edx]
c000dcac:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000dcaf:	89 03                	mov    DWORD PTR [ebx],eax
c000dcb1:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000dcb4:	eb 1d                	jmp    c000dcd3 <KeGetProcessEnvPair(Process*, int)+0x8c>
c000dcb6:	83 ec 0c             	sub    esp,0xc
c000dcb9:	68 d2 1e 02 c0       	push   0xc0021ed2
c000dcbe:	e8 63 0f 00 00       	call   c000ec26 <KePanic(char const*)>
c000dcc3:	83 c4 10             	add    esp,0x10
c000dcc6:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000dccc:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000dcd3:	89 d8                	mov    eax,ebx
c000dcd5:	5b                   	pop    ebx
c000dcd6:	5e                   	pop    esi
c000dcd7:	5f                   	pop    edi
c000dcd8:	c2 04 00             	ret    0x4
c000dcdb:	90                   	nop

c000dcdc <KeSetupInterrupts()>:
c000dcdc:	83 ec 10             	sub    esp,0x10
c000dcdf:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000dce7:	90                   	nop
c000dce8:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c000dcf0:	7f 5a                	jg     c000dd4c <KeSetupInterrupts()+0x70>
c000dcf2:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000dcfa:	66 90                	xchg   ax,ax
c000dcfc:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c000dd01:	7f 41                	jg     c000dd44 <KeSetupInterrupts()+0x68>
c000dd03:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000dd07:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000dd0e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000dd12:	01 d0                	add    eax,edx
c000dd14:	c7 04 85 80 ad 02 c0 00 00 00 00 	mov    DWORD PTR [eax*4-0x3ffd5280],0x0
c000dd1f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000dd23:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000dd2a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000dd2e:	01 d0                	add    eax,edx
c000dd30:	c7 04 85 80 9d 02 c0 00 00 00 00 	mov    DWORD PTR [eax*4-0x3ffd6280],0x0
c000dd3b:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c000dd40:	eb ba                	jmp    c000dcfc <KeSetupInterrupts()+0x20>
c000dd42:	66 90                	xchg   ax,ax
c000dd44:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c000dd49:	eb 9d                	jmp    c000dce8 <KeSetupInterrupts()+0xc>
c000dd4b:	90                   	nop
c000dd4c:	90                   	nop
c000dd4d:	83 c4 10             	add    esp,0x10
c000dd50:	c3                   	ret    
c000dd51:	8d 76 00             	lea    esi,[esi+0x0]

c000dd54 <int_handler>:
c000dd54:	83 ec 2c             	sub    esp,0x2c
c000dd57:	90                   	nop
c000dd58:	a0 94 bd 02 c0       	mov    al,ds:0xc002bd94
c000dd5d:	0f b6 c0             	movzx  eax,al
c000dd60:	85 c0                	test   eax,eax
c000dd62:	74 04                	je     c000dd68 <int_handler+0x14>
c000dd64:	fa                   	cli    
c000dd65:	f4                   	hlt    
c000dd66:	eb f0                	jmp    c000dd58 <int_handler+0x4>
c000dd68:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000dd6c:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c000dd6f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dd73:	83 7c 24 18 1f       	cmp    DWORD PTR [esp+0x18],0x1f
c000dd78:	7e 1a                	jle    c000dd94 <int_handler+0x40>
c000dd7a:	83 7c 24 18 37       	cmp    DWORD PTR [esp+0x18],0x37
c000dd7f:	7f 13                	jg     c000dd94 <int_handler+0x40>
c000dd81:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000dd85:	83 e8 20             	sub    eax,0x20
c000dd88:	83 ec 0c             	sub    esp,0xc
c000dd8b:	50                   	push   eax
c000dd8c:	e8 18 a8 00 00       	call   c00185a9 <HalEndOfInterrupt(int)>
c000dd91:	83 c4 10             	add    esp,0x10
c000dd94:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000dd98:	c1 e0 04             	shl    eax,0x4
c000dd9b:	05 80 ad 02 c0       	add    eax,0xc002ad80
c000dda0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000dda4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000dda8:	c1 e0 04             	shl    eax,0x4
c000ddab:	05 80 9d 02 c0       	add    eax,0xc0029d80
c000ddb0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ddb4:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000ddbc:	83 7c 24 1c 03       	cmp    DWORD PTR [esp+0x1c],0x3
c000ddc1:	0f 8f ad 00 00 00    	jg     c000de74 <int_handler+0x120>
c000ddc7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ddcb:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000ddd2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ddd6:	01 d0                	add    eax,edx
c000ddd8:	8b 00                	mov    eax,DWORD PTR [eax]
c000ddda:	85 c0                	test   eax,eax
c000dddc:	0f 84 86 00 00 00    	je     c000de68 <int_handler+0x114>
c000dde2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000dde6:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c000dde9:	83 f8 60             	cmp    eax,0x60
c000ddec:	75 46                	jne    c000de34 <int_handler+0xe0>
c000ddee:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ddf2:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000ddf9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ddfd:	01 d0                	add    eax,edx
c000ddff:	8b 00                	mov    eax,DWORD PTR [eax]
c000de01:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000de05:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c000de0c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000de10:	01 ca                	add    edx,ecx
c000de12:	8b 12                	mov    edx,DWORD PTR [edx]
c000de14:	83 ec 08             	sub    esp,0x8
c000de17:	52                   	push   edx
c000de18:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000de1c:	ff d0                	call   eax
c000de1e:	83 c4 10             	add    esp,0x10
c000de21:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000de25:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000de29:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000de2d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000de31:	eb 4d                	jmp    c000de80 <int_handler+0x12c>
c000de33:	90                   	nop
c000de34:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000de38:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000de3f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000de43:	01 d0                	add    eax,edx
c000de45:	8b 00                	mov    eax,DWORD PTR [eax]
c000de47:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000de4b:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c000de52:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000de56:	01 ca                	add    edx,ecx
c000de58:	8b 12                	mov    edx,DWORD PTR [edx]
c000de5a:	83 ec 08             	sub    esp,0x8
c000de5d:	52                   	push   edx
c000de5e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000de62:	ff d0                	call   eax
c000de64:	83 c4 10             	add    esp,0x10
c000de67:	90                   	nop
c000de68:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000de6d:	e9 4a ff ff ff       	jmp    c000ddbc <int_handler+0x68>
c000de72:	66 90                	xchg   ax,ax
c000de74:	b8 00 00 00 00       	mov    eax,0x0
c000de79:	ba 00 00 00 00       	mov    edx,0x0
c000de7e:	66 90                	xchg   ax,ax
c000de80:	83 c4 2c             	add    esp,0x2c
c000de83:	c3                   	ret    

c000de84 <KeDisplayProgramFault(char const*)>:
c000de84:	83 ec 0c             	sub    esp,0xc
c000de87:	83 ec 0c             	sub    esp,0xc
c000de8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de8e:	e8 bb 90 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000de93:	83 c4 10             	add    esp,0x10
c000de96:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000de9b:	8b 00                	mov    eax,DWORD PTR [eax]
c000de9d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000dea0:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000dea6:	85 c0                	test   eax,eax
c000dea8:	74 22                	je     c000decc <KeDisplayProgramFault(char const*)+0x48>
c000deaa:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000deaf:	8b 00                	mov    eax,DWORD PTR [eax]
c000deb1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000deb4:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000deba:	6a 04                	push   0x4
c000debc:	6a 0f                	push   0xf
c000debe:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000dec2:	50                   	push   eax
c000dec3:	e8 68 35 00 00       	call   c0011430 <VgaText::puts(char const*, VgaColour, VgaColour)>
c000dec8:	83 c4 10             	add    esp,0x10
c000decb:	90                   	nop
c000decc:	90                   	nop
c000decd:	83 c4 0c             	add    esp,0xc
c000ded0:	c3                   	ret    
c000ded1:	8d 76 00             	lea    esi,[esi+0x0]

c000ded4 <KeGeneralProtectionFault(void*, void*)>:
c000ded4:	83 ec 0c             	sub    esp,0xc
c000ded7:	83 ec 08             	sub    esp,0x8
c000deda:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dede:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dee2:	e8 e2 9c 00 00       	call   c0017bc9 <HalHandleGeneralProtectionFault(void*, void*)>
c000dee7:	83 c4 10             	add    esp,0x10
c000deea:	0f b6 c0             	movzx  eax,al
c000deed:	85 c0                	test   eax,eax
c000deef:	75 2f                	jne    c000df20 <KeGeneralProtectionFault(void*, void*)+0x4c>
c000def1:	83 ec 0c             	sub    esp,0xc
c000def4:	68 ec 1e 02 c0       	push   0xc0021eec
c000def9:	e8 86 ff ff ff       	call   c000de84 <KeDisplayProgramFault(char const*)>
c000defe:	83 c4 10             	add    esp,0x10
c000df01:	83 ec 0c             	sub    esp,0xc
c000df04:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df08:	e8 d8 9d 00 00       	call   c0017ce5 <HalDisplayDebugInfo(void*)>
c000df0d:	83 c4 10             	add    esp,0x10
c000df10:	83 ec 0c             	sub    esp,0xc
c000df13:	6a 00                	push   0x0
c000df15:	e8 36 7d 00 00       	call   c0015c50 <Thr::terminateFromIRQ(int)>
c000df1a:	83 c4 10             	add    esp,0x10
c000df1d:	eb 05                	jmp    c000df24 <KeGeneralProtectionFault(void*, void*)+0x50>
c000df1f:	90                   	nop
c000df20:	90                   	nop
c000df21:	8d 76 00             	lea    esi,[esi+0x0]
c000df24:	83 c4 0c             	add    esp,0xc
c000df27:	c3                   	ret    

c000df28 <KePageFault(void*, void*)>:
c000df28:	83 ec 0c             	sub    esp,0xc
c000df2b:	83 ec 08             	sub    esp,0x8
c000df2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df36:	e8 39 9d 00 00       	call   c0017c74 <HalHandlePageFault(void*, void*)>
c000df3b:	83 c4 10             	add    esp,0x10
c000df3e:	0f b6 c0             	movzx  eax,al
c000df41:	85 c0                	test   eax,eax
c000df43:	75 2f                	jne    c000df74 <KePageFault(void*, void*)+0x4c>
c000df45:	83 ec 0c             	sub    esp,0xc
c000df48:	68 05 1f 02 c0       	push   0xc0021f05
c000df4d:	e8 32 ff ff ff       	call   c000de84 <KeDisplayProgramFault(char const*)>
c000df52:	83 c4 10             	add    esp,0x10
c000df55:	83 ec 0c             	sub    esp,0xc
c000df58:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df5c:	e8 84 9d 00 00       	call   c0017ce5 <HalDisplayDebugInfo(void*)>
c000df61:	83 c4 10             	add    esp,0x10
c000df64:	83 ec 0c             	sub    esp,0xc
c000df67:	6a 00                	push   0x0
c000df69:	e8 e2 7c 00 00       	call   c0015c50 <Thr::terminateFromIRQ(int)>
c000df6e:	83 c4 10             	add    esp,0x10
c000df71:	eb 05                	jmp    c000df78 <KePageFault(void*, void*)+0x50>
c000df73:	90                   	nop
c000df74:	90                   	nop
c000df75:	8d 76 00             	lea    esi,[esi+0x0]
c000df78:	83 c4 0c             	add    esp,0xc
c000df7b:	c3                   	ret    

c000df7c <KeNonMaskableInterrupt(void*, void*)>:
c000df7c:	83 ec 0c             	sub    esp,0xc
c000df7f:	e8 ef a0 00 00       	call   c0018073 <HalReceivedNMI()>
c000df84:	90                   	nop
c000df85:	83 c4 0c             	add    esp,0xc
c000df88:	c3                   	ret    
c000df89:	8d 76 00             	lea    esi,[esi+0x0]

c000df8c <KeOtherFault(void*, void*)>:
c000df8c:	83 ec 0c             	sub    esp,0xc
c000df8f:	83 ec 0c             	sub    esp,0xc
c000df92:	68 10 1f 02 c0       	push   0xc0021f10
c000df97:	e8 e8 fe ff ff       	call   c000de84 <KeDisplayProgramFault(char const*)>
c000df9c:	83 c4 10             	add    esp,0x10
c000df9f:	83 ec 0c             	sub    esp,0xc
c000dfa2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfa6:	e8 3a 9d 00 00       	call   c0017ce5 <HalDisplayDebugInfo(void*)>
c000dfab:	83 c4 10             	add    esp,0x10
c000dfae:	83 ec 0c             	sub    esp,0xc
c000dfb1:	6a 00                	push   0x0
c000dfb3:	e8 98 7c 00 00       	call   c0015c50 <Thr::terminateFromIRQ(int)>
c000dfb8:	83 c4 10             	add    esp,0x10
c000dfbb:	90                   	nop
c000dfbc:	83 c4 0c             	add    esp,0xc
c000dfbf:	c3                   	ret    

c000dfc0 <KeOpcodeFault(void*, void*)>:
c000dfc0:	55                   	push   ebp
c000dfc1:	89 e5                	mov    ebp,esp
c000dfc3:	83 ec 08             	sub    esp,0x8
c000dfc6:	83 ec 08             	sub    esp,0x8
c000dfc9:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c000dfcc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000dfcf:	e8 cf 9c 00 00       	call   c0017ca3 <HalHandleOpcodeFault(void*, void*)>
c000dfd4:	83 c4 10             	add    esp,0x10
c000dfd7:	0f b6 c0             	movzx  eax,al
c000dfda:	85 c0                	test   eax,eax
c000dfdc:	75 2e                	jne    c000e00c <KeOpcodeFault(void*, void*)+0x4c>
c000dfde:	83 ec 0c             	sub    esp,0xc
c000dfe1:	68 38 1f 02 c0       	push   0xc0021f38
c000dfe6:	e8 99 fe ff ff       	call   c000de84 <KeDisplayProgramFault(char const*)>
c000dfeb:	83 c4 10             	add    esp,0x10
c000dfee:	83 ec 0c             	sub    esp,0xc
c000dff1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000dff4:	e8 ec 9c 00 00       	call   c0017ce5 <HalDisplayDebugInfo(void*)>
c000dff9:	83 c4 10             	add    esp,0x10
c000dffc:	83 ec 0c             	sub    esp,0xc
c000dfff:	6a 00                	push   0x0
c000e001:	e8 4a 7c 00 00       	call   c0015c50 <Thr::terminateFromIRQ(int)>
c000e006:	83 c4 10             	add    esp,0x10
c000e009:	eb 05                	jmp    c000e010 <KeOpcodeFault(void*, void*)+0x50>
c000e00b:	90                   	nop
c000e00c:	90                   	nop
c000e00d:	8d 76 00             	lea    esi,[esi+0x0]
c000e010:	c9                   	leave  
c000e011:	c3                   	ret    
c000e012:	66 90                	xchg   ax,ax

c000e014 <KeDoubleFault(void*, void*)>:
c000e014:	55                   	push   ebp
c000e015:	89 e5                	mov    ebp,esp
c000e017:	83 ec 08             	sub    esp,0x8
c000e01a:	83 ec 0c             	sub    esp,0xc
c000e01d:	68 45 1f 02 c0       	push   0xc0021f45
c000e022:	e8 ff 0b 00 00       	call   c000ec26 <KePanic(char const*)>
c000e027:	83 c4 10             	add    esp,0x10
c000e02a:	90                   	nop
c000e02b:	c9                   	leave  
c000e02c:	c3                   	ret    
c000e02d:	90                   	nop

c000e02e <GDTEntry::setBase(unsigned int)>:
c000e02e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e032:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e036:	89 c1                	mov    ecx,eax
c000e038:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000e03c:	c1 e9 10             	shr    ecx,0x10
c000e03f:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000e042:	c1 e8 18             	shr    eax,0x18
c000e045:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000e048:	c3                   	ret    
c000e049:	90                   	nop

c000e04a <GDTEntry::setLimit(unsigned int)>:
c000e04a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000e04e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e052:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000e055:	66 89 01             	mov    WORD PTR [ecx],ax
c000e058:	c1 e8 10             	shr    eax,0x10
c000e05b:	83 e0 0f             	and    eax,0xf
c000e05e:	83 e2 f0             	and    edx,0xfffffff0
c000e061:	09 d0                	or     eax,edx
c000e063:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000e066:	c3                   	ret    
c000e067:	90                   	nop

c000e068 <GDT::GDT()>:
c000e068:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e06c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e072:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e076:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e07c:	90                   	nop
c000e07d:	c3                   	ret    

c000e07e <GDT::addEntry(GDTEntry)>:
c000e07e:	53                   	push   ebx
c000e07f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e083:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e087:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e08b:	8b 02                	mov    eax,DWORD PTR [edx]
c000e08d:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c000e091:	8d 48 01             	lea    ecx,[eax+0x1]
c000e094:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c000e098:	c1 e0 03             	shl    eax,0x3
c000e09b:	89 0a                	mov    DWORD PTR [edx],ecx
c000e09d:	5b                   	pop    ebx
c000e09e:	c3                   	ret    
c000e09f:	90                   	nop

c000e0a0 <GDT::getNumberOfEntries()>:
c000e0a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e0a4:	8b 00                	mov    eax,DWORD PTR [eax]
c000e0a6:	c3                   	ret    
c000e0a7:	90                   	nop

c000e0a8 <GDT::flush()>:
c000e0a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e0ac:	8b 10                	mov    edx,DWORD PTR [eax]
c000e0ae:	83 c0 04             	add    eax,0x4
c000e0b1:	a3 82 bd 02 c0       	mov    ds:0xc002bd82,eax
c000e0b6:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000e0bd:	66 89 15 80 bd 02 c0 	mov    WORD PTR ds:0xc002bd80,dx
c000e0c4:	e9 91 22 ff ff       	jmp    c000035a <loadGDT>
c000e0c9:	90                   	nop

c000e0ca <GDT::setup()>:
c000e0ca:	57                   	push   edi
c000e0cb:	56                   	push   esi
c000e0cc:	53                   	push   ebx
c000e0cd:	83 ec 30             	sub    esp,0x30
c000e0d0:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000e0d4:	6a 00                	push   0x0
c000e0d6:	8d 74 24 14          	lea    esi,[esp+0x14]
c000e0da:	56                   	push   esi
c000e0db:	e8 4e ff ff ff       	call   c000e02e <GDTEntry::setBase(unsigned int)>
c000e0e0:	6a 00                	push   0x0
c000e0e2:	56                   	push   esi
c000e0e3:	e8 62 ff ff ff       	call   c000e04a <GDTEntry::setLimit(unsigned int)>
c000e0e8:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c000e0f0:	6a 00                	push   0x0
c000e0f2:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c000e0f6:	56                   	push   esi
c000e0f7:	e8 32 ff ff ff       	call   c000e02e <GDTEntry::setBase(unsigned int)>
c000e0fc:	68 ff ff ff 00       	push   0xffffff
c000e101:	56                   	push   esi
c000e102:	e8 43 ff ff ff       	call   c000e04a <GDTEntry::setLimit(unsigned int)>
c000e107:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e10b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000e10f:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000e114:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000e118:	0d 00 9a c0 00       	or     eax,0xc09a00
c000e11d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000e121:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c000e125:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000e129:	89 f8                	mov    eax,edi
c000e12b:	89 fa                	mov    edx,edi
c000e12d:	80 e4 f7             	and    ah,0xf7
c000e130:	80 ce 60             	or     dh,0x60
c000e133:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e137:	89 c7                	mov    edi,eax
c000e139:	80 cc 60             	or     ah,0x60
c000e13c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e140:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000e144:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e148:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000e14c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e150:	83 c4 20             	add    esp,0x20
c000e153:	6a 00                	push   0x0
c000e155:	8d 44 24 24          	lea    eax,[esp+0x24]
c000e159:	50                   	push   eax
c000e15a:	e8 cf fe ff ff       	call   c000e02e <GDTEntry::setBase(unsigned int)>
c000e15f:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c000e163:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000e167:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000e16b:	83 e0 3f             	and    eax,0x3f
c000e16e:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c000e172:	6a 00                	push   0x0
c000e174:	8d 44 24 34          	lea    eax,[esp+0x34]
c000e178:	50                   	push   eax
c000e179:	e8 b0 fe ff ff       	call   c000e02e <GDTEntry::setBase(unsigned int)>
c000e17e:	8a 44 24 3e          	mov    al,BYTE PTR [esp+0x3e]
c000e182:	83 e0 3f             	and    eax,0x3f
c000e185:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c000e189:	83 c4 0c             	add    esp,0xc
c000e18c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e190:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e194:	53                   	push   ebx
c000e195:	e8 e4 fe ff ff       	call   c000e07e <GDT::addEntry(GDTEntry)>
c000e19a:	83 c4 0c             	add    esp,0xc
c000e19d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000e1a1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000e1a5:	53                   	push   ebx
c000e1a6:	e8 d3 fe ff ff       	call   c000e07e <GDT::addEntry(GDTEntry)>
c000e1ab:	83 c4 0c             	add    esp,0xc
c000e1ae:	57                   	push   edi
c000e1af:	56                   	push   esi
c000e1b0:	53                   	push   ebx
c000e1b1:	e8 c8 fe ff ff       	call   c000e07e <GDT::addEntry(GDTEntry)>
c000e1b6:	83 c4 0c             	add    esp,0xc
c000e1b9:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000e1bd:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000e1c1:	53                   	push   ebx
c000e1c2:	e8 b7 fe ff ff       	call   c000e07e <GDT::addEntry(GDTEntry)>
c000e1c7:	83 c4 0c             	add    esp,0xc
c000e1ca:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e1ce:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e1d2:	53                   	push   ebx
c000e1d3:	e8 a6 fe ff ff       	call   c000e07e <GDT::addEntry(GDTEntry)>
c000e1d8:	83 c4 0c             	add    esp,0xc
c000e1db:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e1df:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e1e3:	53                   	push   ebx
c000e1e4:	e8 95 fe ff ff       	call   c000e07e <GDT::addEntry(GDTEntry)>
c000e1e9:	83 c4 0c             	add    esp,0xc
c000e1ec:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000e1f0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000e1f4:	53                   	push   ebx
c000e1f5:	e8 84 fe ff ff       	call   c000e07e <GDT::addEntry(GDTEntry)>
c000e1fa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e1fd:	e8 a6 fe ff ff       	call   c000e0a8 <GDT::flush()>
c000e202:	83 c4 40             	add    esp,0x40
c000e205:	5b                   	pop    ebx
c000e206:	5e                   	pop    esi
c000e207:	5f                   	pop    edi
c000e208:	c3                   	ret    

c000e209 <idleFunction(void*)>:
c000e209:	83 ec 0c             	sub    esp,0xc
c000e20c:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000e211:	48                   	dec    eax
c000e212:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c000e217:	75 01                	jne    c000e21a <idleFunction(void*)+0x11>
c000e219:	fb                   	sti    
c000e21a:	e8 ef 9e 00 00       	call   c001810e <HalSystemIdle()>
c000e21f:	e8 02 1f 01 00       	call   c0020126 <idleCommon()>
c000e224:	eb f4                	jmp    c000e21a <idleFunction(void*)+0x11>
c000e226:	66 90                	xchg   ax,ax

c000e228 <IDTEntry::IDTEntry(bool)>:
c000e228:	53                   	push   ebx
c000e229:	83 ec 04             	sub    esp,0x4
c000e22c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e230:	88 04 24             	mov    BYTE PTR [esp],al
c000e233:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e237:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000e23d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e241:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000e245:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e249:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000e24c:	83 e2 f0             	and    edx,0xfffffff0
c000e24f:	83 ca 0e             	or     edx,0xe
c000e252:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000e255:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e259:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000e25c:	83 e2 ef             	and    edx,0xffffffef
c000e25f:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000e262:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c000e266:	85 c0                	test   eax,eax
c000e268:	74 06                	je     c000e270 <IDTEntry::IDTEntry(bool)+0x48>
c000e26a:	b2 03                	mov    dl,0x3
c000e26c:	eb 06                	jmp    c000e274 <IDTEntry::IDTEntry(bool)+0x4c>
c000e26e:	66 90                	xchg   ax,ax
c000e270:	b2 00                	mov    dl,0x0
c000e272:	66 90                	xchg   ax,ax
c000e274:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e278:	83 e2 03             	and    edx,0x3
c000e27b:	89 d3                	mov    ebx,edx
c000e27d:	c1 e3 05             	shl    ebx,0x5
c000e280:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000e283:	83 e2 9f             	and    edx,0xffffff9f
c000e286:	88 d1                	mov    cl,dl
c000e288:	88 da                	mov    dl,bl
c000e28a:	09 ca                	or     edx,ecx
c000e28c:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000e28f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e293:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000e296:	83 ca 80             	or     edx,0xffffff80
c000e299:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000e29c:	90                   	nop
c000e29d:	83 c4 04             	add    esp,0x4
c000e2a0:	5b                   	pop    ebx
c000e2a1:	c3                   	ret    

c000e2a2 <IDTEntry::setOffset(unsigned int)>:
c000e2a2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e2a6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e2aa:	66 89 02             	mov    WORD PTR [edx],ax
c000e2ad:	c1 e8 10             	shr    eax,0x10
c000e2b0:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000e2b4:	c3                   	ret    
c000e2b5:	90                   	nop
c000e2b6:	66 90                	xchg   ax,ax

c000e2b8 <IDT::IDT()>:
c000e2b8:	90                   	nop
c000e2b9:	c3                   	ret    

c000e2ba <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000e2ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e2be:	83 c0 30             	add    eax,0x30
c000e2c1:	c3                   	ret    

c000e2c2 <IDT::addEntry(IDTEntry, int)>:
c000e2c2:	53                   	push   ebx
c000e2c3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e2c7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000e2cb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e2cf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e2d3:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000e2d6:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000e2da:	5b                   	pop    ebx
c000e2db:	c3                   	ret    

c000e2dc <IDT::addEntry(int, void (*)(), bool)>:
c000e2dc:	53                   	push   ebx
c000e2dd:	83 ec 10             	sub    esp,0x10
c000e2e0:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000e2e5:	50                   	push   eax
c000e2e6:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000e2ea:	53                   	push   ebx
c000e2eb:	e8 38 ff ff ff       	call   c000e228 <IDTEntry::IDTEntry(bool)>
c000e2f0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e2f4:	53                   	push   ebx
c000e2f5:	e8 a8 ff ff ff       	call   c000e2a2 <IDTEntry::setOffset(unsigned int)>
c000e2fa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2fe:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000e302:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000e306:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000e30a:	e8 b3 ff ff ff       	call   c000e2c2 <IDT::addEntry(IDTEntry, int)>
c000e30f:	83 c4 30             	add    esp,0x30
c000e312:	5b                   	pop    ebx
c000e313:	c3                   	ret    

c000e314 <IDT::flush()>:
c000e314:	66 c7 05 88 bd 02 c0 ff 07 	mov    WORD PTR ds:0xc002bd88,0x7ff
c000e31d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e321:	a3 8a bd 02 c0       	mov    ds:0xc002bd8a,eax
c000e326:	0f 01 1d 88 bd 02 c0 	lidtd  ds:0xc002bd88
c000e32d:	c3                   	ret    

c000e32e <IDT::setup()>:
c000e32e:	57                   	push   edi
c000e32f:	56                   	push   esi
c000e330:	53                   	push   ebx
c000e331:	83 ec 10             	sub    esp,0x10
c000e334:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000e338:	6a 00                	push   0x0
c000e33a:	68 d0 f3 01 c0       	push   0xc001f3d0
c000e33f:	6a 00                	push   0x0
c000e341:	53                   	push   ebx
c000e342:	e8 95 ff ff ff       	call   c000e2dc <IDT::addEntry(int, void (*)(), bool)>
c000e347:	6a 00                	push   0x0
c000e349:	68 e0 f3 01 c0       	push   0xc001f3e0
c000e34e:	6a 01                	push   0x1
c000e350:	53                   	push   ebx
c000e351:	e8 86 ff ff ff       	call   c000e2dc <IDT::addEntry(int, void (*)(), bool)>
c000e356:	83 c4 20             	add    esp,0x20
c000e359:	6a 00                	push   0x0
c000e35b:	68 ea f3 01 c0       	push   0xc001f3ea
c000e360:	6a 02                	push   0x2
c000e362:	53                   	push   ebx
c000e363:	e8 74 ff ff ff       	call   c000e2dc <IDT::addEntry(int, void (*)(), bool)>
c000e368:	6a 00                	push   0x0
c000e36a:	68 f4 f3 01 c0       	push   0xc001f3f4
c000e36f:	6a 03                	push   0x3
c000e371:	53                   	push   ebx
c000e372:	e8 65 ff ff ff       	call   c000e2dc <IDT::addEntry(int, void (*)(), bool)>
c000e377:	83 c4 20             	add    esp,0x20
c000e37a:	6a 00                	push   0x0
c000e37c:	68 fe f3 01 c0       	push   0xc001f3fe
c000e381:	6a 04                	push   0x4
c000e383:	53                   	push   ebx
c000e384:	e8 53 ff ff ff       	call   c000e2dc <IDT::addEntry(int, void (*)(), bool)>
c000e389:	6a 00                	push   0x0
c000e38b:	68 08 f4 01 c0       	push   0xc001f408
c000e390:	6a 05                	push   0x5
c000e392:	53                   	push   ebx
c000e393:	e8 44 ff ff ff       	call   c000e2dc <IDT::addEntry(int, void (*)(), bool)>
c000e398:	83 c4 20             	add    esp,0x20
c000e39b:	6a 00                	push   0x0
c000e39d:	68 12 f4 01 c0       	push   0xc001f412
c000e3a2:	6a 06                	push   0x6
c000e3a4:	53                   	push   ebx
c000e3a5:	e8 32 ff ff ff       	call   c000e2dc <IDT::addEntry(int, void (*)(), bool)>
c000e3aa:	6a 00                	push   0x0
c000e3ac:	68 1c f4 01 c0       	push   0xc001f41c
c000e3b1:	6a 07                	push   0x7
c000e3b3:	53                   	push   ebx
c000e3b4:	e8 23 ff ff ff       	call   c000e2dc <IDT::addEntry(int, void (*)(), bool)>
c000e3b9:	83 c4 20             	add    esp,0x20
c000e3bc:	6a 00                	push   0x0
c000e3be:	68 26 f4 01 c0       	push   0xc001f426
c000e3c3:	6a 08                	push   0x8
c000e3c5:	53                   	push   ebx
c000e3c6:	e8 11 ff ff ff       	call   c000e2dc <IDT::addEntry(int, void (*)(), bool)>
c000e3cb:	6a 00                	push   0x0
c000e3cd:	68 2e f4 01 c0       	push   0xc001f42e
c000e3d2:	6a 09                	push   0x9
c000e3d4:	53                   	push   ebx
c000e3d5:	e8 02 ff ff ff       	call   c000e2dc <IDT::addEntry(int, void (*)(), bool)>
c000e3da:	83 c4 20             	add    esp,0x20
c000e3dd:	6a 00                	push   0x0
c000e3df:	68 38 f4 01 c0       	push   0xc001f438
c000e3e4:	6a 0a                	push   0xa
c000e3e6:	53                   	push   ebx
c000e3e7:	e8 f0 fe ff ff       	call   c000e2dc <IDT::addEntry(int, void (*)(), bool)>
c000e3ec:	6a 00                	push   0x0
c000e3ee:	68 40 f4 01 c0       	push   0xc001f440
c000e3f3:	6a 0b                	push   0xb
c000e3f5:	53                   	push   ebx
c000e3f6:	e8 e1 fe ff ff       	call   c000e2dc <IDT::addEntry(int, void (*)(), bool)>
c000e3fb:	83 c4 20             	add    esp,0x20
c000e3fe:	6a 00                	push   0x0
c000e400:	68 48 f4 01 c0       	push   0xc001f448
c000e405:	6a 0c                	push   0xc
c000e407:	53                   	push   ebx
c000e408:	e8 cf fe ff ff       	call   c000e2dc <IDT::addEntry(int, void (*)(), bool)>
c000e40d:	6a 00                	push   0x0
c000e40f:	68 50 f4 01 c0       	push   0xc001f450
c000e414:	6a 0d                	push   0xd
c000e416:	53                   	push   ebx
c000e417:	e8 c0 fe ff ff       	call   c000e2dc <IDT::addEntry(int, void (*)(), bool)>
c000e41c:	83 c4 20             	add    esp,0x20
c000e41f:	6a 00                	push   0x0
c000e421:	68 6a f4 01 c0       	push   0xc001f46a
c000e426:	6a 0e                	push   0xe
c000e428:	53                   	push   ebx
c000e429:	e8 ae fe ff ff       	call   c000e2dc <IDT::addEntry(int, void (*)(), bool)>
c000e42e:	6a 00                	push   0x0
c000e430:	68 72 f4 01 c0       	push   0xc001f472
c000e435:	6a 0f                	push   0xf
c000e437:	53                   	push   ebx
c000e438:	e8 9f fe ff ff       	call   c000e2dc <IDT::addEntry(int, void (*)(), bool)>
c000e43d:	83 c4 20             	add    esp,0x20
c000e440:	6a 00                	push   0x0
c000e442:	68 7c f4 01 c0       	push   0xc001f47c
c000e447:	6a 10                	push   0x10
c000e449:	53                   	push   ebx
c000e44a:	e8 8d fe ff ff       	call   c000e2dc <IDT::addEntry(int, void (*)(), bool)>
c000e44f:	6a 00                	push   0x0
c000e451:	68 86 f4 01 c0       	push   0xc001f486
c000e456:	6a 11                	push   0x11
c000e458:	53                   	push   ebx
c000e459:	e8 7e fe ff ff       	call   c000e2dc <IDT::addEntry(int, void (*)(), bool)>
c000e45e:	83 c4 20             	add    esp,0x20
c000e461:	6a 00                	push   0x0
c000e463:	68 90 f4 01 c0       	push   0xc001f490
c000e468:	6a 12                	push   0x12
c000e46a:	53                   	push   ebx
c000e46b:	e8 6c fe ff ff       	call   c000e2dc <IDT::addEntry(int, void (*)(), bool)>
c000e470:	6a 01                	push   0x1
c000e472:	68 2a f5 01 c0       	push   0xc001f52a
c000e477:	6a 60                	push   0x60
c000e479:	53                   	push   ebx
c000e47a:	e8 5d fe ff ff       	call   c000e2dc <IDT::addEntry(int, void (*)(), bool)>
c000e47f:	83 c4 20             	add    esp,0x20
c000e482:	6a 00                	push   0x0
c000e484:	68 31 f5 01 c0       	push   0xc001f531
c000e489:	6a 20                	push   0x20
c000e48b:	53                   	push   ebx
c000e48c:	e8 4b fe ff ff       	call   c000e2dc <IDT::addEntry(int, void (*)(), bool)>
c000e491:	6a 00                	push   0x0
c000e493:	68 1c f5 01 c0       	push   0xc001f51c
c000e498:	6a 21                	push   0x21
c000e49a:	53                   	push   ebx
c000e49b:	e8 3c fe ff ff       	call   c000e2dc <IDT::addEntry(int, void (*)(), bool)>
c000e4a0:	83 c4 20             	add    esp,0x20
c000e4a3:	6a 00                	push   0x0
c000e4a5:	68 23 f5 01 c0       	push   0xc001f523
c000e4aa:	6a 22                	push   0x22
c000e4ac:	53                   	push   ebx
c000e4ad:	e8 2a fe ff ff       	call   c000e2dc <IDT::addEntry(int, void (*)(), bool)>
c000e4b2:	6a 00                	push   0x0
c000e4b4:	68 9a f4 01 c0       	push   0xc001f49a
c000e4b9:	6a 23                	push   0x23
c000e4bb:	53                   	push   ebx
c000e4bc:	e8 1b fe ff ff       	call   c000e2dc <IDT::addEntry(int, void (*)(), bool)>
c000e4c1:	83 c4 20             	add    esp,0x20
c000e4c4:	6a 00                	push   0x0
c000e4c6:	68 a4 f4 01 c0       	push   0xc001f4a4
c000e4cb:	6a 24                	push   0x24
c000e4cd:	53                   	push   ebx
c000e4ce:	e8 09 fe ff ff       	call   c000e2dc <IDT::addEntry(int, void (*)(), bool)>
c000e4d3:	6a 00                	push   0x0
c000e4d5:	68 ae f4 01 c0       	push   0xc001f4ae
c000e4da:	6a 25                	push   0x25
c000e4dc:	53                   	push   ebx
c000e4dd:	e8 fa fd ff ff       	call   c000e2dc <IDT::addEntry(int, void (*)(), bool)>
c000e4e2:	83 c4 20             	add    esp,0x20
c000e4e5:	6a 00                	push   0x0
c000e4e7:	68 b8 f4 01 c0       	push   0xc001f4b8
c000e4ec:	6a 26                	push   0x26
c000e4ee:	53                   	push   ebx
c000e4ef:	e8 e8 fd ff ff       	call   c000e2dc <IDT::addEntry(int, void (*)(), bool)>
c000e4f4:	6a 00                	push   0x0
c000e4f6:	68 c2 f4 01 c0       	push   0xc001f4c2
c000e4fb:	6a 27                	push   0x27
c000e4fd:	53                   	push   ebx
c000e4fe:	e8 d9 fd ff ff       	call   c000e2dc <IDT::addEntry(int, void (*)(), bool)>
c000e503:	83 c4 20             	add    esp,0x20
c000e506:	6a 00                	push   0x0
c000e508:	68 cc f4 01 c0       	push   0xc001f4cc
c000e50d:	6a 28                	push   0x28
c000e50f:	53                   	push   ebx
c000e510:	e8 c7 fd ff ff       	call   c000e2dc <IDT::addEntry(int, void (*)(), bool)>
c000e515:	6a 00                	push   0x0
c000e517:	68 d6 f4 01 c0       	push   0xc001f4d6
c000e51c:	6a 29                	push   0x29
c000e51e:	53                   	push   ebx
c000e51f:	e8 b8 fd ff ff       	call   c000e2dc <IDT::addEntry(int, void (*)(), bool)>
c000e524:	83 c4 20             	add    esp,0x20
c000e527:	6a 00                	push   0x0
c000e529:	68 e0 f4 01 c0       	push   0xc001f4e0
c000e52e:	6a 2a                	push   0x2a
c000e530:	53                   	push   ebx
c000e531:	e8 a6 fd ff ff       	call   c000e2dc <IDT::addEntry(int, void (*)(), bool)>
c000e536:	6a 00                	push   0x0
c000e538:	68 ea f4 01 c0       	push   0xc001f4ea
c000e53d:	6a 2b                	push   0x2b
c000e53f:	53                   	push   ebx
c000e540:	e8 97 fd ff ff       	call   c000e2dc <IDT::addEntry(int, void (*)(), bool)>
c000e545:	83 c4 20             	add    esp,0x20
c000e548:	6a 00                	push   0x0
c000e54a:	68 f4 f4 01 c0       	push   0xc001f4f4
c000e54f:	6a 2c                	push   0x2c
c000e551:	53                   	push   ebx
c000e552:	e8 85 fd ff ff       	call   c000e2dc <IDT::addEntry(int, void (*)(), bool)>
c000e557:	6a 00                	push   0x0
c000e559:	68 fe f4 01 c0       	push   0xc001f4fe
c000e55e:	6a 2d                	push   0x2d
c000e560:	53                   	push   ebx
c000e561:	e8 76 fd ff ff       	call   c000e2dc <IDT::addEntry(int, void (*)(), bool)>
c000e566:	83 c4 20             	add    esp,0x20
c000e569:	6a 00                	push   0x0
c000e56b:	68 08 f5 01 c0       	push   0xc001f508
c000e570:	6a 2e                	push   0x2e
c000e572:	53                   	push   ebx
c000e573:	e8 64 fd ff ff       	call   c000e2dc <IDT::addEntry(int, void (*)(), bool)>
c000e578:	6a 00                	push   0x0
c000e57a:	68 12 f5 01 c0       	push   0xc001f512
c000e57f:	6a 2f                	push   0x2f
c000e581:	53                   	push   ebx
c000e582:	e8 55 fd ff ff       	call   c000e2dc <IDT::addEntry(int, void (*)(), bool)>
c000e587:	83 c4 20             	add    esp,0x20
c000e58a:	6a 00                	push   0x0
c000e58c:	68 6c f6 01 c0       	push   0xc001f66c
c000e591:	6a 30                	push   0x30
c000e593:	53                   	push   ebx
c000e594:	e8 43 fd ff ff       	call   c000e2dc <IDT::addEntry(int, void (*)(), bool)>
c000e599:	6a 00                	push   0x0
c000e59b:	68 76 f6 01 c0       	push   0xc001f676
c000e5a0:	6a 31                	push   0x31
c000e5a2:	53                   	push   ebx
c000e5a3:	e8 34 fd ff ff       	call   c000e2dc <IDT::addEntry(int, void (*)(), bool)>
c000e5a8:	83 c4 20             	add    esp,0x20
c000e5ab:	6a 00                	push   0x0
c000e5ad:	68 80 f6 01 c0       	push   0xc001f680
c000e5b2:	6a 32                	push   0x32
c000e5b4:	53                   	push   ebx
c000e5b5:	e8 22 fd ff ff       	call   c000e2dc <IDT::addEntry(int, void (*)(), bool)>
c000e5ba:	6a 00                	push   0x0
c000e5bc:	68 8a f6 01 c0       	push   0xc001f68a
c000e5c1:	6a 33                	push   0x33
c000e5c3:	53                   	push   ebx
c000e5c4:	e8 13 fd ff ff       	call   c000e2dc <IDT::addEntry(int, void (*)(), bool)>
c000e5c9:	83 c4 20             	add    esp,0x20
c000e5cc:	6a 00                	push   0x0
c000e5ce:	68 94 f6 01 c0       	push   0xc001f694
c000e5d3:	6a 34                	push   0x34
c000e5d5:	53                   	push   ebx
c000e5d6:	e8 01 fd ff ff       	call   c000e2dc <IDT::addEntry(int, void (*)(), bool)>
c000e5db:	6a 00                	push   0x0
c000e5dd:	68 9e f6 01 c0       	push   0xc001f69e
c000e5e2:	6a 35                	push   0x35
c000e5e4:	53                   	push   ebx
c000e5e5:	e8 f2 fc ff ff       	call   c000e2dc <IDT::addEntry(int, void (*)(), bool)>
c000e5ea:	83 c4 20             	add    esp,0x20
c000e5ed:	6a 00                	push   0x0
c000e5ef:	68 a8 f6 01 c0       	push   0xc001f6a8
c000e5f4:	6a 36                	push   0x36
c000e5f6:	53                   	push   ebx
c000e5f7:	e8 e0 fc ff ff       	call   c000e2dc <IDT::addEntry(int, void (*)(), bool)>
c000e5fc:	6a 00                	push   0x0
c000e5fe:	68 b2 f6 01 c0       	push   0xc001f6b2
c000e603:	6a 37                	push   0x37
c000e605:	53                   	push   ebx
c000e606:	e8 d1 fc ff ff       	call   c000e2dc <IDT::addEntry(int, void (*)(), bool)>
c000e60b:	83 c4 1c             	add    esp,0x1c
c000e60e:	6a 03                	push   0x3
c000e610:	6a 02                	push   0x2
c000e612:	ff 35 d0 be 02 c0    	push   DWORD PTR ds:0xc002bed0
c000e618:	e8 55 41 00 00       	call   c0012772 <VAS::allocatePages(int, int)>
c000e61d:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000e624:	89 c6                	mov    esi,eax
c000e626:	e8 a5 02 00 00       	call   c000e8d0 <malloc>
c000e62b:	81 c6 00 20 00 00    	add    esi,0x2000
c000e631:	89 04 24             	mov    DWORD PTR [esp],eax
c000e634:	89 c7                	mov    edi,eax
c000e636:	e8 05 32 00 00       	call   c0011840 <TSS::TSS()>
c000e63b:	83 c4 0c             	add    esp,0xc
c000e63e:	68 26 f4 01 c0       	push   0xc001f426
c000e643:	56                   	push   esi
c000e644:	57                   	push   edi
c000e645:	e8 3a 32 00 00       	call   c0011884 <TSS::setup(unsigned long, unsigned long)>
c000e64a:	89 c6                	mov    esi,eax
c000e64c:	58                   	pop    eax
c000e64d:	5a                   	pop    edx
c000e64e:	6a 00                	push   0x0
c000e650:	8d 44 24 14          	lea    eax,[esp+0x14]
c000e654:	50                   	push   eax
c000e655:	e8 ce fb ff ff       	call   c000e228 <IDTEntry::IDTEntry(bool)>
c000e65a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e65e:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000e663:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000e66a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e66e:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000e674:	80 ce 05             	or     dh,0x5
c000e677:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e67b:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000e67e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e682:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000e685:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e688:	e8 87 fc ff ff       	call   c000e314 <IDT::flush()>
c000e68d:	83 c4 20             	add    esp,0x20
c000e690:	5b                   	pop    ebx
c000e691:	5e                   	pop    esi
c000e692:	5f                   	pop    edi
c000e693:	c3                   	ret    

c000e694 <CPU::current()>:
c000e694:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c000e699:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e69f:	c3                   	ret    

c000e6a0 <operator new(unsigned long)>:
c000e6a0:	e9 2b 02 00 00       	jmp    c000e8d0 <malloc>

c000e6a5 <operator delete(void*)>:
c000e6a5:	e9 46 02 00 00       	jmp    c000e8f0 <rfree>

c000e6aa <disableIRQs()>:
c000e6aa:	fa                   	cli    
c000e6ab:	c3                   	ret    

c000e6ac <enableIRQs()>:
c000e6ac:	fb                   	sti    
c000e6ad:	c3                   	ret    

c000e6ae <lockScheduler()>:
c000e6ae:	fa                   	cli    
c000e6af:	ff 05 b0 c6 02 c0    	inc    DWORD PTR ds:0xc002c6b0
c000e6b5:	c3                   	ret    

c000e6b6 <unlockScheduler()>:
c000e6b6:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000e6bb:	48                   	dec    eax
c000e6bc:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c000e6c1:	75 01                	jne    c000e6c4 <unlockScheduler()+0xe>
c000e6c3:	fb                   	sti    
c000e6c4:	c3                   	ret    

c000e6c5 <lockStuff()>:
c000e6c5:	fa                   	cli    
c000e6c6:	ff 05 b0 c6 02 c0    	inc    DWORD PTR ds:0xc002c6b0
c000e6cc:	ff 05 ac c6 02 c0    	inc    DWORD PTR ds:0xc002c6ac
c000e6d2:	c3                   	ret    

c000e6d3 <unlockStuff()>:
c000e6d3:	83 ec 0c             	sub    esp,0xc
c000e6d6:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c000e6db:	48                   	dec    eax
c000e6dc:	a3 ac c6 02 c0       	mov    ds:0xc002c6ac,eax
c000e6e1:	75 18                	jne    c000e6fb <unlockStuff()+0x28>
c000e6e3:	83 3d a8 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6a8,0x0
c000e6ea:	74 0f                	je     c000e6fb <unlockStuff()+0x28>
c000e6ec:	c7 05 a8 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6a8,0x0
c000e6f6:	e8 f5 6c 00 00       	call   c00153f0 <schedule()>
c000e6fb:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000e700:	48                   	dec    eax
c000e701:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c000e706:	75 01                	jne    c000e709 <unlockStuff()+0x36>
c000e708:	fb                   	sti    
c000e709:	83 c4 0c             	add    esp,0xc
c000e70c:	c3                   	ret    

c000e70d <Virt::getAKernelVAS()>:
c000e70d:	a1 d0 be 02 c0       	mov    eax,ds:0xc002bed0
c000e712:	c3                   	ret    

c000e713 <__not_memcpy>:
c000e713:	57                   	push   edi
c000e714:	56                   	push   esi
c000e715:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e719:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e71d:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e721:	89 c7                	mov    edi,eax
c000e723:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e725:	5e                   	pop    esi
c000e726:	5f                   	pop    edi
c000e727:	c3                   	ret    

c000e728 <sbrk>:
c000e728:	55                   	push   ebp
c000e729:	57                   	push   edi
c000e72a:	56                   	push   esi
c000e72b:	53                   	push   ebx
c000e72c:	83 ec 1c             	sub    esp,0x1c
c000e72f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e733:	85 c0                	test   eax,eax
c000e735:	74 66                	je     c000e79d <sbrk+0x75>
c000e737:	78 6b                	js     c000e7a4 <sbrk+0x7c>
c000e739:	8b 15 f0 3f 02 c0    	mov    edx,DWORD PTR ds:0xc0023ff0
c000e73f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e743:	8d a8 fe 1f 00 00    	lea    ebp,[eax+0x1ffe]
c000e749:	05 ff 0f 00 00       	add    eax,0xfff
c000e74e:	0f 49 e8             	cmovns ebp,eax
c000e751:	c1 fd 0c             	sar    ebp,0xc
c000e754:	bb 00 00 00 00       	mov    ebx,0x0
c000e759:	8b 35 d0 be 02 c0    	mov    esi,DWORD PTR ds:0xc002bed0
c000e75f:	8b 3d f0 3f 02 c0    	mov    edi,DWORD PTR ds:0xc0023ff0
c000e765:	e8 b6 06 00 00       	call   c000ee20 <Phys::allocatePage()>
c000e76a:	68 01 04 00 00       	push   0x401
c000e76f:	57                   	push   edi
c000e770:	50                   	push   eax
c000e771:	56                   	push   esi
c000e772:	e8 f3 3e 00 00       	call   c001266a <VAS::mapPage(unsigned long, unsigned long, int)>
c000e777:	81 05 f0 3f 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc0023ff0,0x1000
c000e781:	83 c3 01             	add    ebx,0x1
c000e784:	83 c4 10             	add    esp,0x10
c000e787:	39 dd                	cmp    ebp,ebx
c000e789:	75 ce                	jne    c000e759 <sbrk+0x31>
c000e78b:	0f 20 d8             	mov    eax,cr3
c000e78e:	0f 22 d8             	mov    cr3,eax
c000e791:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e795:	83 c4 1c             	add    esp,0x1c
c000e798:	5b                   	pop    ebx
c000e799:	5e                   	pop    esi
c000e79a:	5f                   	pop    edi
c000e79b:	5d                   	pop    ebp
c000e79c:	c3                   	ret    
c000e79d:	a1 f0 3f 02 c0       	mov    eax,ds:0xc0023ff0
c000e7a2:	eb f1                	jmp    c000e795 <sbrk+0x6d>
c000e7a4:	83 ec 08             	sub    esp,0x8
c000e7a7:	50                   	push   eax
c000e7a8:	68 54 1f 02 c0       	push   0xc0021f54
c000e7ad:	e8 9c 87 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000e7b2:	83 c4 10             	add    esp,0x10
c000e7b5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e7ba:	eb d9                	jmp    c000e795 <sbrk+0x6d>

c000e7bc <sbrk_thunk>:
c000e7bc:	83 ec 0c             	sub    esp,0xc
c000e7bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7c3:	3d ff bf 00 00       	cmp    eax,0xbfff
c000e7c8:	7f 10                	jg     c000e7da <sbrk_thunk+0x1e>
c000e7ca:	83 ec 0c             	sub    esp,0xc
c000e7cd:	50                   	push   eax
c000e7ce:	e8 55 ff ff ff       	call   c000e728 <sbrk>
c000e7d3:	83 c4 10             	add    esp,0x10
c000e7d6:	83 c4 0c             	add    esp,0xc
c000e7d9:	c3                   	ret    
c000e7da:	83 ec 08             	sub    esp,0x8
c000e7dd:	50                   	push   eax
c000e7de:	68 84 1f 02 c0       	push   0xc0021f84
c000e7e3:	e8 66 87 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000e7e8:	83 c4 10             	add    esp,0x10
c000e7eb:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e7f0:	eb e4                	jmp    c000e7d6 <sbrk_thunk+0x1a>

c000e7f2 <mmap>:
c000e7f2:	55                   	push   ebp
c000e7f3:	57                   	push   edi
c000e7f4:	56                   	push   esi
c000e7f5:	53                   	push   ebx
c000e7f6:	83 ec 18             	sub    esp,0x18
c000e7f9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e7fd:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c000e803:	89 fb                	mov    ebx,edi
c000e805:	c1 eb 0c             	shr    ebx,0xc
c000e808:	53                   	push   ebx
c000e809:	e8 7d 37 00 00       	call   c0011f8b <Virt::allocateKernelVirtualPages(int)>
c000e80e:	89 c5                	mov    ebp,eax
c000e810:	83 c4 10             	add    esp,0x10
c000e813:	85 db                	test   ebx,ebx
c000e815:	7e 2f                	jle    c000e846 <mmap+0x54>
c000e817:	81 e7 00 f0 ff ff    	and    edi,0xfffff000
c000e81d:	01 c7                	add    edi,eax
c000e81f:	89 c3                	mov    ebx,eax
c000e821:	8b 35 d0 be 02 c0    	mov    esi,DWORD PTR ds:0xc002bed0
c000e827:	e8 f4 05 00 00       	call   c000ee20 <Phys::allocatePage()>
c000e82c:	68 01 04 00 00       	push   0x401
c000e831:	53                   	push   ebx
c000e832:	50                   	push   eax
c000e833:	56                   	push   esi
c000e834:	e8 31 3e 00 00       	call   c001266a <VAS::mapPage(unsigned long, unsigned long, int)>
c000e839:	81 c3 00 10 00 00    	add    ebx,0x1000
c000e83f:	83 c4 10             	add    esp,0x10
c000e842:	39 fb                	cmp    ebx,edi
c000e844:	75 db                	jne    c000e821 <mmap+0x2f>
c000e846:	89 e8                	mov    eax,ebp
c000e848:	83 c4 0c             	add    esp,0xc
c000e84b:	5b                   	pop    ebx
c000e84c:	5e                   	pop    esi
c000e84d:	5f                   	pop    edi
c000e84e:	5d                   	pop    ebp
c000e84f:	c3                   	ret    

c000e850 <munmap>:
c000e850:	83 ec 18             	sub    esp,0x18
c000e853:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e857:	e8 2d 3a 00 00       	call   c0012289 <Virt::freeKernelVirtualPages(unsigned long)>
c000e85c:	b8 00 00 00 00       	mov    eax,0x0
c000e861:	83 c4 1c             	add    esp,0x1c
c000e864:	c3                   	ret    

c000e865 <liballoc_lock()>:
c000e865:	fa                   	cli    
c000e866:	83 05 b0 c6 02 c0 01 	add    DWORD PTR ds:0xc002c6b0,0x1
c000e86d:	b8 00 00 00 00       	mov    eax,0x0
c000e872:	c3                   	ret    

c000e873 <liballoc_unlock()>:
c000e873:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000e878:	83 e8 01             	sub    eax,0x1
c000e87b:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c000e880:	75 01                	jne    c000e883 <liballoc_unlock()+0x10>
c000e882:	fb                   	sti    
c000e883:	b8 00 00 00 00       	mov    eax,0x0
c000e888:	c3                   	ret    

c000e889 <liballoc_alloc(int)>:
c000e889:	83 ec 10             	sub    esp,0x10
c000e88c:	6a 01                	push   0x1
c000e88e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e892:	ff 35 d0 be 02 c0    	push   DWORD PTR ds:0xc002bed0
c000e898:	e8 d5 3e 00 00       	call   c0012772 <VAS::allocatePages(int, int)>
c000e89d:	83 c4 1c             	add    esp,0x1c
c000e8a0:	c3                   	ret    

c000e8a1 <liballoc_free(void*, int)>:
c000e8a1:	83 ec 14             	sub    esp,0x14
c000e8a4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e8a8:	ff 35 d0 be 02 c0    	push   DWORD PTR ds:0xc002bed0
c000e8ae:	e8 13 3b 00 00       	call   c00123c6 <VAS::freeAllocatedPages(unsigned long)>
c000e8b3:	b8 00 00 00 00       	mov    eax,0x0
c000e8b8:	83 c4 1c             	add    esp,0x1c
c000e8bb:	c3                   	ret    

c000e8bc <realloc>:
c000e8bc:	83 ec 14             	sub    esp,0x14
c000e8bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e8c3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e8c7:	e8 b9 2e ff ff       	call   c0001785 <dlrealloc>
c000e8cc:	83 c4 1c             	add    esp,0x1c
c000e8cf:	c3                   	ret    

c000e8d0 <malloc>:
c000e8d0:	83 ec 18             	sub    esp,0x18
c000e8d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e8d7:	e8 6c 29 ff ff       	call   c0001248 <dlmalloc>
c000e8dc:	83 c4 1c             	add    esp,0x1c
c000e8df:	c3                   	ret    

c000e8e0 <free>:
c000e8e0:	83 ec 18             	sub    esp,0x18
c000e8e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e8e7:	e8 9a 24 ff ff       	call   c0000d86 <dlfree>
c000e8ec:	83 c4 1c             	add    esp,0x1c
c000e8ef:	c3                   	ret    

c000e8f0 <rfree>:
c000e8f0:	83 ec 18             	sub    esp,0x18
c000e8f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e8f7:	e8 8a 24 ff ff       	call   c0000d86 <dlfree>
c000e8fc:	83 c4 1c             	add    esp,0x1c
c000e8ff:	c3                   	ret    

c000e900 <calloc>:
c000e900:	56                   	push   esi
c000e901:	53                   	push   ebx
c000e902:	83 ec 10             	sub    esp,0x10
c000e905:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000e909:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000e90e:	53                   	push   ebx
c000e90f:	e8 bc ff ff ff       	call   c000e8d0 <malloc>
c000e914:	89 c6                	mov    esi,eax
c000e916:	83 c4 0c             	add    esp,0xc
c000e919:	53                   	push   ebx
c000e91a:	6a 00                	push   0x0
c000e91c:	50                   	push   eax
c000e91d:	e8 ce 1b ff ff       	call   c00004f0 <memset>
c000e922:	89 f0                	mov    eax,esi
c000e924:	83 c4 14             	add    esp,0x14
c000e927:	5b                   	pop    ebx
c000e928:	5e                   	pop    esi
c000e929:	c3                   	ret    
c000e92a:	66 90                	xchg   ax,ax

c000e92c <KeMailboxTryPost(Mailbox*, void*)>:
c000e92c:	83 ec 10             	sub    esp,0x10
c000e92f:	fa                   	cli    
c000e930:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000e935:	83 c0 01             	add    eax,0x1
c000e938:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c000e93d:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000e942:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e946:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e949:	85 c0                	test   eax,eax
c000e94b:	75 23                	jne    c000e970 <KeMailboxTryPost(Mailbox*, void*)+0x44>
c000e94d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e951:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e955:	89 10                	mov    DWORD PTR [eax],edx
c000e957:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e95b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e95e:	8d 50 01             	lea    edx,[eax+0x1]
c000e961:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e965:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000e968:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000e96d:	8d 76 00             	lea    esi,[esi+0x0]
c000e970:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000e975:	83 e8 01             	sub    eax,0x1
c000e978:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c000e97d:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000e982:	85 c0                	test   eax,eax
c000e984:	75 02                	jne    c000e988 <KeMailboxTryPost(Mailbox*, void*)+0x5c>
c000e986:	fb                   	sti    
c000e987:	90                   	nop
c000e988:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000e98c:	83 c4 10             	add    esp,0x10
c000e98f:	c3                   	ret    

c000e990 <KeMailboxTryGet(Mailbox*, void**)>:
c000e990:	83 ec 10             	sub    esp,0x10
c000e993:	fa                   	cli    
c000e994:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000e999:	83 c0 01             	add    eax,0x1
c000e99c:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c000e9a1:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000e9a6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e9aa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e9ad:	83 f8 01             	cmp    eax,0x1
c000e9b0:	75 22                	jne    c000e9d4 <KeMailboxTryGet(Mailbox*, void**)+0x44>
c000e9b2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e9b6:	8b 10                	mov    edx,DWORD PTR [eax]
c000e9b8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e9bc:	89 10                	mov    DWORD PTR [eax],edx
c000e9be:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e9c2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e9c5:	8d 50 ff             	lea    edx,[eax-0x1]
c000e9c8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e9cc:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000e9cf:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000e9d4:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000e9d9:	83 e8 01             	sub    eax,0x1
c000e9dc:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c000e9e1:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000e9e6:	85 c0                	test   eax,eax
c000e9e8:	75 02                	jne    c000e9ec <KeMailboxTryGet(Mailbox*, void**)+0x5c>
c000e9ea:	fb                   	sti    
c000e9eb:	90                   	nop
c000e9ec:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000e9f0:	83 c4 10             	add    esp,0x10
c000e9f3:	c3                   	ret    

c000e9f4 <KeMailboxCreate()>:
c000e9f4:	83 ec 1c             	sub    esp,0x1c
c000e9f7:	83 ec 0c             	sub    esp,0xc
c000e9fa:	6a 08                	push   0x8
c000e9fc:	e8 cf fe ff ff       	call   c000e8d0 <malloc>
c000ea01:	83 c4 10             	add    esp,0x10
c000ea04:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ea08:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ea0c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ea12:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ea16:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000ea1d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ea21:	83 c4 1c             	add    esp,0x1c
c000ea24:	c3                   	ret    
c000ea25:	8d 76 00             	lea    esi,[esi+0x0]

c000ea28 <KeMailboxPost(Mailbox*, void*)>:
c000ea28:	83 ec 1c             	sub    esp,0x1c
c000ea2b:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000ea30:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ea34:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ea38:	e8 ef fe ff ff       	call   c000e92c <KeMailboxTryPost(Mailbox*, void*)>
c000ea3d:	83 c4 08             	add    esp,0x8
c000ea40:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000ea44:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000ea48:	83 f0 01             	xor    eax,0x1
c000ea4b:	0f b6 c0             	movzx  eax,al
c000ea4e:	85 c0                	test   eax,eax
c000ea50:	74 2a                	je     c000ea7c <KeMailboxPost(Mailbox*, void*)+0x54>
c000ea52:	fa                   	cli    
c000ea53:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000ea58:	83 c0 01             	add    eax,0x1
c000ea5b:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c000ea60:	e8 8b 69 00 00       	call   c00153f0 <schedule()>
c000ea65:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000ea6a:	83 e8 01             	sub    eax,0x1
c000ea6d:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c000ea72:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000ea77:	85 c0                	test   eax,eax
c000ea79:	75 01                	jne    c000ea7c <KeMailboxPost(Mailbox*, void*)+0x54>
c000ea7b:	fb                   	sti    
c000ea7c:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000ea81:	85 c0                	test   eax,eax
c000ea83:	75 03                	jne    c000ea88 <KeMailboxPost(Mailbox*, void*)+0x60>
c000ea85:	eb a9                	jmp    c000ea30 <KeMailboxPost(Mailbox*, void*)+0x8>
c000ea87:	90                   	nop
c000ea88:	90                   	nop
c000ea89:	83 c4 1c             	add    esp,0x1c
c000ea8c:	c3                   	ret    
c000ea8d:	8d 76 00             	lea    esi,[esi+0x0]

c000ea90 <KeMailboxGet(Mailbox*, void**)>:
c000ea90:	83 ec 1c             	sub    esp,0x1c
c000ea93:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000ea98:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ea9c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000eaa0:	e8 eb fe ff ff       	call   c000e990 <KeMailboxTryGet(Mailbox*, void**)>
c000eaa5:	83 c4 08             	add    esp,0x8
c000eaa8:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000eaac:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000eab0:	83 f0 01             	xor    eax,0x1
c000eab3:	0f b6 c0             	movzx  eax,al
c000eab6:	85 c0                	test   eax,eax
c000eab8:	74 2a                	je     c000eae4 <KeMailboxGet(Mailbox*, void**)+0x54>
c000eaba:	fa                   	cli    
c000eabb:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000eac0:	83 c0 01             	add    eax,0x1
c000eac3:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c000eac8:	e8 23 69 00 00       	call   c00153f0 <schedule()>
c000eacd:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000ead2:	83 e8 01             	sub    eax,0x1
c000ead5:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c000eada:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000eadf:	85 c0                	test   eax,eax
c000eae1:	75 01                	jne    c000eae4 <KeMailboxGet(Mailbox*, void**)+0x54>
c000eae3:	fb                   	sti    
c000eae4:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000eae9:	85 c0                	test   eax,eax
c000eaeb:	75 03                	jne    c000eaf0 <KeMailboxGet(Mailbox*, void**)+0x60>
c000eaed:	eb a9                	jmp    c000ea98 <KeMailboxGet(Mailbox*, void**)+0x8>
c000eaef:	90                   	nop
c000eaf0:	90                   	nop
c000eaf1:	83 c4 1c             	add    esp,0x1c
c000eaf4:	c3                   	ret    
c000eaf5:	8d 76 00             	lea    esi,[esi+0x0]

c000eaf8 <KeMailboxDestroy(Mailbox*)>:
c000eaf8:	83 ec 0c             	sub    esp,0xc
c000eafb:	83 ec 0c             	sub    esp,0xc
c000eafe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eb02:	e8 d9 fd ff ff       	call   c000e8e0 <free>
c000eb07:	83 c4 10             	add    esp,0x10
c000eb0a:	90                   	nop
c000eb0b:	83 c4 0c             	add    esp,0xc
c000eb0e:	c3                   	ret    

c000eb0f <KeEntryPoint>:
c000eb0f:	57                   	push   edi
c000eb10:	bf f9 03 00 00       	mov    edi,0x3f9
c000eb15:	56                   	push   esi
c000eb16:	31 f6                	xor    esi,esi
c000eb18:	53                   	push   ebx
c000eb19:	89 fa                	mov    edx,edi
c000eb1b:	83 ec 2c             	sub    esp,0x2c
c000eb1e:	a1 00 05 00 00       	mov    eax,ds:0x500
c000eb23:	a3 90 bd 02 c0       	mov    ds:0xc002bd90,eax
c000eb28:	89 f0                	mov    eax,esi
c000eb2a:	ee                   	out    dx,al
c000eb2b:	bb fb 03 00 00       	mov    ebx,0x3fb
c000eb30:	b0 80                	mov    al,0x80
c000eb32:	89 da                	mov    edx,ebx
c000eb34:	ee                   	out    dx,al
c000eb35:	b1 03                	mov    cl,0x3
c000eb37:	ba f8 03 00 00       	mov    edx,0x3f8
c000eb3c:	88 c8                	mov    al,cl
c000eb3e:	ee                   	out    dx,al
c000eb3f:	89 f0                	mov    eax,esi
c000eb41:	89 fa                	mov    edx,edi
c000eb43:	ee                   	out    dx,al
c000eb44:	88 c8                	mov    al,cl
c000eb46:	89 da                	mov    edx,ebx
c000eb48:	ee                   	out    dx,al
c000eb49:	b0 c7                	mov    al,0xc7
c000eb4b:	ba fa 03 00 00       	mov    edx,0x3fa
c000eb50:	ee                   	out    dx,al
c000eb51:	b0 0b                	mov    al,0xb
c000eb53:	ba fc 03 00 00       	mov    edx,0x3fc
c000eb58:	ee                   	out    dx,al
c000eb59:	68 93 1f 02 c0       	push   0xc0021f93
c000eb5e:	e8 eb 83 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000eb63:	e8 0c da ff ff       	call   c000c574 <KeDisplaySplashScreen()>
c000eb68:	a1 24 05 00 00       	mov    eax,ds:0x524
c000eb6d:	05 ff 0f 00 00       	add    eax,0xfff
c000eb72:	25 00 f0 ff ff       	and    eax,0xfffff000
c000eb77:	89 04 24             	mov    DWORD PTR [esp],eax
c000eb7a:	e8 0f 04 00 00       	call   c000ef8e <Phys::physicalMemorySetup(unsigned int)>
c000eb7f:	e8 db 35 00 00       	call   c001215f <Virt::virtualMemorySetup()>
c000eb84:	e8 35 d9 ff ff       	call   c000c4be <KeInitialiseAtexit()>
c000eb89:	c7 04 24 aa 1f 02 c0 	mov    DWORD PTR [esp],0xc0021faa
c000eb90:	e8 b9 83 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000eb95:	58                   	pop    eax
c000eb96:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c000eb9a:	53                   	push   ebx
c000eb9b:	e8 a6 38 00 00       	call   c0012446 <VAS::VAS()>
c000eba0:	c7 04 24 ba 1f 02 c0 	mov    DWORD PTR [esp],0xc0021fba
c000eba7:	89 1d d0 be 02 c0    	mov    DWORD PTR ds:0xc002bed0,ebx
c000ebad:	e8 9c 83 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000ebb2:	e8 b7 10 01 00       	call   c001fc6e <_init>
c000ebb7:	c7 04 24 ce 1f 02 c0 	mov    DWORD PTR [esp],0xc0021fce
c000ebbe:	e8 8b 83 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000ebc3:	c7 04 24 6c 01 00 00 	mov    DWORD PTR [esp],0x16c
c000ebca:	e8 01 fd ff ff       	call   c000e8d0 <malloc>
c000ebcf:	89 04 24             	mov    DWORD PTR [esp],eax
c000ebd2:	89 c6                	mov    esi,eax
c000ebd4:	e8 63 ea ff ff       	call   c000d63c <Computer::Computer()>
c000ebd9:	5a                   	pop    edx
c000ebda:	89 35 70 9d 02 c0    	mov    DWORD PTR ds:0xc0029d70,esi
c000ebe0:	59                   	pop    ecx
c000ebe1:	56                   	push   esi
c000ebe2:	68 dd 1f 02 c0       	push   0xc0021fdd
c000ebe7:	e8 62 83 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000ebec:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c000ebf1:	8b 10                	mov    edx,DWORD PTR [eax]
c000ebf3:	53                   	push   ebx
c000ebf4:	6a 00                	push   0x0
c000ebf6:	6a 00                	push   0x0
c000ebf8:	50                   	push   eax
c000ebf9:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ebfc:	83 c4 14             	add    esp,0x14
c000ebff:	53                   	push   ebx
c000ec00:	e8 f7 38 00 00       	call   c00124fc <VAS::~VAS()>
c000ec05:	83 c4 30             	add    esp,0x30
c000ec08:	5b                   	pop    ebx
c000ec09:	5e                   	pop    esi
c000ec0a:	5f                   	pop    edi
c000ec0b:	c3                   	ret    

c000ec0c <Mutex::Mutex()>:
c000ec0c:	83 ec 0c             	sub    esp,0xc
c000ec0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ec13:	83 ec 08             	sub    esp,0x8
c000ec16:	6a 01                	push   0x1
c000ec18:	50                   	push   eax
c000ec19:	e8 26 0c 00 00       	call   c000f844 <Semaphore::Semaphore(int)>
c000ec1e:	83 c4 10             	add    esp,0x10
c000ec21:	90                   	nop
c000ec22:	83 c4 0c             	add    esp,0xc
c000ec25:	c3                   	ret    

c000ec26 <KePanic(char const*)>:
c000ec26:	c6 05 94 bd 02 c0 01 	mov    BYTE PTR ds:0xc002bd94,0x1
c000ec2d:	e9 84 96 00 00       	jmp    c00182b6 <HalPanic(char const*)>

c000ec32 <Phys::allocateDMA(unsigned long)>:
c000ec32:	55                   	push   ebp
c000ec33:	31 ed                	xor    ebp,ebp
c000ec35:	57                   	push   edi
c000ec36:	56                   	push   esi
c000ec37:	31 f6                	xor    esi,esi
c000ec39:	53                   	push   ebx
c000ec3a:	31 db                	xor    ebx,ebx
c000ec3c:	83 ec 1c             	sub    esp,0x1c
c000ec3f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ec43:	05 ff 0f 00 00       	add    eax,0xfff
c000ec48:	c1 e8 0c             	shr    eax,0xc
c000ec4b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ec4f:	31 c0                	xor    eax,eax
c000ec51:	eb 1b                	jmp    c000ec6e <Phys::allocateDMA(unsigned long)+0x3c>
c000ec53:	8d 78 01             	lea    edi,[eax+0x1]
c000ec56:	85 c0                	test   eax,eax
c000ec58:	0f 44 eb             	cmove  ebp,ebx
c000ec5b:	0f 44 f3             	cmove  esi,ebx
c000ec5e:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c000ec62:	74 37                	je     c000ec9b <Phys::allocateDMA(unsigned long)+0x69>
c000ec64:	89 f8                	mov    eax,edi
c000ec66:	83 c3 01             	add    ebx,0x1
c000ec69:	83 fb 0f             	cmp    ebx,0xf
c000ec6c:	7f 13                	jg     c000ec81 <Phys::allocateDMA(unsigned long)+0x4f>
c000ec6e:	80 bb b0 bd 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffd4250],0x0
c000ec75:	74 dc                	je     c000ec53 <Phys::allocateDMA(unsigned long)+0x21>
c000ec77:	31 c0                	xor    eax,eax
c000ec79:	83 c3 01             	add    ebx,0x1
c000ec7c:	83 fb 0f             	cmp    ebx,0xf
c000ec7f:	7e ed                	jle    c000ec6e <Phys::allocateDMA(unsigned long)+0x3c>
c000ec81:	83 ec 0c             	sub    esp,0xc
c000ec84:	68 f4 1f 02 c0       	push   0xc0021ff4
c000ec89:	e8 98 ff ff ff       	call   c000ec26 <KePanic(char const*)>
c000ec8e:	83 c4 10             	add    esp,0x10
c000ec91:	31 c0                	xor    eax,eax
c000ec93:	83 c4 1c             	add    esp,0x1c
c000ec96:	5b                   	pop    ebx
c000ec97:	5e                   	pop    esi
c000ec98:	5f                   	pop    edi
c000ec99:	5d                   	pop    ebp
c000ec9a:	c3                   	ret    
c000ec9b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000ec9f:	89 f2                	mov    edx,esi
c000eca1:	c1 fa 04             	sar    edx,0x4
c000eca4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000eca8:	01 f1                	add    ecx,esi
c000ecaa:	8d 51 0e             	lea    edx,[ecx+0xe]
c000ecad:	83 e9 01             	sub    ecx,0x1
c000ecb0:	0f 48 ca             	cmovs  ecx,edx
c000ecb3:	c1 f9 04             	sar    ecx,0x4
c000ecb6:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c000ecba:	74 06                	je     c000ecc2 <Phys::allocateDMA(unsigned long)+0x90>
c000ecbc:	89 eb                	mov    ebx,ebp
c000ecbe:	31 c0                	xor    eax,eax
c000ecc0:	eb b7                	jmp    c000ec79 <Phys::allocateDMA(unsigned long)+0x47>
c000ecc2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ecc6:	85 d2                	test   edx,edx
c000ecc8:	74 17                	je     c000ece1 <Phys::allocateDMA(unsigned long)+0xaf>
c000ecca:	8d 96 b0 bd 02 c0    	lea    edx,[esi-0x3ffd4250]
c000ecd0:	8d 84 06 b1 bd 02 c0 	lea    eax,[esi+eax*1-0x3ffd424f]
c000ecd7:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000ecda:	83 c2 01             	add    edx,0x1
c000ecdd:	39 d0                	cmp    eax,edx
c000ecdf:	75 f6                	jne    c000ecd7 <Phys::allocateDMA(unsigned long)+0xa5>
c000ece1:	8b 15 a8 bd 02 c0    	mov    edx,DWORD PTR ds:0xc002bda8
c000ece7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eceb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ecef:	01 c2                	add    edx,eax
c000ecf1:	89 15 a8 bd 02 c0    	mov    DWORD PTR ds:0xc002bda8,edx
c000ecf7:	85 c9                	test   ecx,ecx
c000ecf9:	74 17                	je     c000ed12 <Phys::allocateDMA(unsigned long)+0xe0>
c000ecfb:	83 ec 0c             	sub    esp,0xc
c000ecfe:	68 f4 1f 02 c0       	push   0xc0021ff4
c000ed03:	e8 1e ff ff ff       	call   c000ec26 <KePanic(char const*)>
c000ed08:	83 c4 10             	add    esp,0x10
c000ed0b:	89 f8                	mov    eax,edi
c000ed0d:	e9 54 ff ff ff       	jmp    c000ec66 <Phys::allocateDMA(unsigned long)+0x34>
c000ed12:	c1 e6 0c             	shl    esi,0xc
c000ed15:	8d 86 00 00 01 c2    	lea    eax,[esi-0x3dff0000]
c000ed1b:	e9 73 ff ff ff       	jmp    c000ec93 <Phys::allocateDMA(unsigned long)+0x61>

c000ed20 <Phys::freeDMA(unsigned long, unsigned long)>:
c000ed20:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ed24:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000ed2a:	a1 a8 bd 02 c0       	mov    eax,ds:0xc002bda8
c000ed2f:	c1 ea 0c             	shr    edx,0xc
c000ed32:	29 d0                	sub    eax,edx
c000ed34:	a3 a8 bd 02 c0       	mov    ds:0xc002bda8,eax
c000ed39:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ed3d:	05 00 00 ff 3d       	add    eax,0x3dff0000
c000ed42:	c1 e8 0c             	shr    eax,0xc
c000ed45:	85 d2                	test   edx,edx
c000ed47:	74 11                	je     c000ed5a <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c000ed49:	05 b0 bd 02 c0       	add    eax,0xc002bdb0
c000ed4e:	01 c2                	add    edx,eax
c000ed50:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000ed53:	83 c0 01             	add    eax,0x1
c000ed56:	39 d0                	cmp    eax,edx
c000ed58:	75 f6                	jne    c000ed50 <Phys::freeDMA(unsigned long, unsigned long)+0x30>
c000ed5a:	c3                   	ret    

c000ed5b <Phys::setPageState(unsigned long, bool)>:
c000ed5b:	57                   	push   edi
c000ed5c:	56                   	push   esi
c000ed5d:	8b 35 f4 3f 02 c0    	mov    esi,DWORD PTR ds:0xc0023ff4
c000ed63:	53                   	push   ebx
c000ed64:	bb fe ff ff ff       	mov    ebx,0xfffffffe
c000ed69:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ed6d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ed71:	89 ca                	mov    edx,ecx
c000ed73:	83 e1 07             	and    ecx,0x7
c000ed76:	c1 ea 03             	shr    edx,0x3
c000ed79:	0f b6 c0             	movzx  eax,al
c000ed7c:	d3 c3                	rol    ebx,cl
c000ed7e:	01 d6                	add    esi,edx
c000ed80:	0f b6 3e             	movzx  edi,BYTE PTR [esi]
c000ed83:	d3 e0                	shl    eax,cl
c000ed85:	21 fb                	and    ebx,edi
c000ed87:	88 1e                	mov    BYTE PTR [esi],bl
c000ed89:	8b 1d f4 3f 02 c0    	mov    ebx,DWORD PTR ds:0xc0023ff4
c000ed8f:	01 da                	add    edx,ebx
c000ed91:	8a 0a                	mov    cl,BYTE PTR [edx]
c000ed93:	09 c8                	or     eax,ecx
c000ed95:	88 02                	mov    BYTE PTR [edx],al
c000ed97:	5b                   	pop    ebx
c000ed98:	5e                   	pop    esi
c000ed99:	5f                   	pop    edi
c000ed9a:	c3                   	ret    

c000ed9b <Phys::getPageState(unsigned long)>:
c000ed9b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ed9f:	8b 15 f4 3f 02 c0    	mov    edx,DWORD PTR ds:0xc0023ff4
c000eda5:	89 c8                	mov    eax,ecx
c000eda7:	83 e1 07             	and    ecx,0x7
c000edaa:	c1 e8 03             	shr    eax,0x3
c000edad:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000edb1:	d3 f8                	sar    eax,cl
c000edb3:	83 e0 01             	and    eax,0x1
c000edb6:	c3                   	ret    

c000edb7 <Phys::freePage(unsigned long)>:
c000edb7:	53                   	push   ebx
c000edb8:	83 ec 08             	sub    esp,0x8
c000edbb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000edbf:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c000edc5:	81 fa ff ff 00 00    	cmp    edx,0xffff
c000edcb:	76 41                	jbe    c000ee0e <Phys::freePage(unsigned long)+0x57>
c000edcd:	c1 e8 0c             	shr    eax,0xc
c000edd0:	50                   	push   eax
c000edd1:	89 c3                	mov    ebx,eax
c000edd3:	e8 c3 ff ff ff       	call   c000ed9b <Phys::getPageState(unsigned long)>
c000edd8:	5a                   	pop    edx
c000edd9:	84 c0                	test   al,al
c000eddb:	74 20                	je     c000edfd <Phys::freePage(unsigned long)+0x46>
c000eddd:	a1 a8 bd 02 c0       	mov    eax,ds:0xc002bda8
c000ede2:	83 ec 08             	sub    esp,0x8
c000ede5:	6a 00                	push   0x0
c000ede7:	53                   	push   ebx
c000ede8:	83 e8 01             	sub    eax,0x1
c000edeb:	a3 a8 bd 02 c0       	mov    ds:0xc002bda8,eax
c000edf0:	e8 66 ff ff ff       	call   c000ed5b <Phys::setPageState(unsigned long, bool)>
c000edf5:	83 c4 10             	add    esp,0x10
c000edf8:	83 c4 08             	add    esp,0x8
c000edfb:	5b                   	pop    ebx
c000edfc:	c3                   	ret    
c000edfd:	c7 44 24 10 99 20 02 c0 	mov    DWORD PTR [esp+0x10],0xc0022099
c000ee05:	83 c4 08             	add    esp,0x8
c000ee08:	5b                   	pop    ebx
c000ee09:	e9 18 fe ff ff       	jmp    c000ec26 <KePanic(char const*)>
c000ee0e:	68 00 10 00 00       	push   0x1000
c000ee13:	50                   	push   eax
c000ee14:	e8 07 ff ff ff       	call   c000ed20 <Phys::freeDMA(unsigned long, unsigned long)>
c000ee19:	59                   	pop    ecx
c000ee1a:	5b                   	pop    ebx
c000ee1b:	83 c4 08             	add    esp,0x8
c000ee1e:	5b                   	pop    ebx
c000ee1f:	c3                   	ret    

c000ee20 <Phys::allocatePage()>:
c000ee20:	56                   	push   esi
c000ee21:	53                   	push   ebx
c000ee22:	83 ec 14             	sub    esp,0x14
c000ee25:	8b 35 9c bd 02 c0    	mov    esi,DWORD PTR ds:0xc002bd9c
c000ee2b:	89 f3                	mov    ebx,esi
c000ee2d:	eb 0a                	jmp    c000ee39 <Phys::allocatePage()+0x19>
c000ee2f:	89 1d 9c bd 02 c0    	mov    DWORD PTR ds:0xc002bd9c,ebx
c000ee35:	39 de                	cmp    esi,ebx
c000ee37:	74 26                	je     c000ee5f <Phys::allocatePage()+0x3f>
c000ee39:	53                   	push   ebx
c000ee3a:	e8 5c ff ff ff       	call   c000ed9b <Phys::getPageState(unsigned long)>
c000ee3f:	5a                   	pop    edx
c000ee40:	84 c0                	test   al,al
c000ee42:	74 67                	je     c000eeab <Phys::allocatePage()+0x8b>
c000ee44:	83 c3 01             	add    ebx,0x1
c000ee47:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000ee4d:	75 e0                	jne    c000ee2f <Phys::allocatePage()+0xf>
c000ee4f:	c7 05 9c bd 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bd9c,0x0
c000ee59:	31 db                	xor    ebx,ebx
c000ee5b:	39 de                	cmp    esi,ebx
c000ee5d:	75 da                	jne    c000ee39 <Phys::allocatePage()+0x19>
c000ee5f:	a0 c0 bd 02 c0       	mov    al,ds:0xc002bdc0
c000ee64:	83 ec 0c             	sub    esp,0xc
c000ee67:	83 f0 01             	xor    eax,0x1
c000ee6a:	a2 c0 bd 02 c0       	mov    ds:0xc002bdc0,al
c000ee6f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ee74:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000ee77:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c000ee7d:	50                   	push   eax
c000ee7e:	e8 49 40 00 00       	call   c0012ecc <VAS::scanForEviction()>
c000ee83:	83 c4 10             	add    esp,0x10
c000ee86:	85 c0                	test   eax,eax
c000ee88:	75 48                	jne    c000eed2 <Phys::allocatePage()+0xb2>
c000ee8a:	83 ec 0c             	sub    esp,0xc
c000ee8d:	68 1c 20 02 c0       	push   0xc002201c
c000ee92:	e8 8f fd ff ff       	call   c000ec26 <KePanic(char const*)>
c000ee97:	8b 1d 9c bd 02 c0    	mov    ebx,DWORD PTR ds:0xc002bd9c
c000ee9d:	83 c4 10             	add    esp,0x10
c000eea0:	53                   	push   ebx
c000eea1:	e8 f5 fe ff ff       	call   c000ed9b <Phys::getPageState(unsigned long)>
c000eea6:	5a                   	pop    edx
c000eea7:	84 c0                	test   al,al
c000eea9:	75 99                	jne    c000ee44 <Phys::allocatePage()+0x24>
c000eeab:	6a 01                	push   0x1
c000eead:	53                   	push   ebx
c000eeae:	e8 a8 fe ff ff       	call   c000ed5b <Phys::setPageState(unsigned long, bool)>
c000eeb3:	8b 15 a8 bd 02 c0    	mov    edx,DWORD PTR ds:0xc002bda8
c000eeb9:	59                   	pop    ecx
c000eeba:	a1 9c bd 02 c0       	mov    eax,ds:0xc002bd9c
c000eebf:	5b                   	pop    ebx
c000eec0:	83 c2 01             	add    edx,0x1
c000eec3:	89 15 a8 bd 02 c0    	mov    DWORD PTR ds:0xc002bda8,edx
c000eec9:	c1 e0 0c             	shl    eax,0xc
c000eecc:	83 c4 14             	add    esp,0x14
c000eecf:	5b                   	pop    ebx
c000eed0:	5e                   	pop    esi
c000eed1:	c3                   	ret    
c000eed2:	83 ec 08             	sub    esp,0x8
c000eed5:	89 c2                	mov    edx,eax
c000eed7:	6a 01                	push   0x1
c000eed9:	c1 ea 0c             	shr    edx,0xc
c000eedc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000eee0:	52                   	push   edx
c000eee1:	e8 75 fe ff ff       	call   c000ed5b <Phys::setPageState(unsigned long, bool)>
c000eee6:	83 c4 10             	add    esp,0x10
c000eee9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eeed:	eb dd                	jmp    c000eecc <Phys::allocatePage()+0xac>

c000eeef <Phys::allocateContiguousPages(int)>:
c000eeef:	57                   	push   edi
c000eef0:	56                   	push   esi
c000eef1:	53                   	push   ebx
c000eef2:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000eef6:	fa                   	cli    
c000eef7:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000eefc:	31 db                	xor    ebx,ebx
c000eefe:	83 c0 01             	add    eax,0x1
c000ef01:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c000ef06:	85 db                	test   ebx,ebx
c000ef08:	75 11                	jne    c000ef1b <Phys::allocateContiguousPages(int)+0x2c>
c000ef0a:	e8 11 ff ff ff       	call   c000ee20 <Phys::allocatePage()>
c000ef0f:	83 fe 01             	cmp    esi,0x1
c000ef12:	89 c7                	mov    edi,eax
c000ef14:	74 21                	je     c000ef37 <Phys::allocateContiguousPages(int)+0x48>
c000ef16:	bb 01 00 00 00       	mov    ebx,0x1
c000ef1b:	e8 00 ff ff ff       	call   c000ee20 <Phys::allocatePage()>
c000ef20:	89 da                	mov    edx,ebx
c000ef22:	c1 e2 0c             	shl    edx,0xc
c000ef25:	01 fa                	add    edx,edi
c000ef27:	39 c2                	cmp    edx,eax
c000ef29:	74 22                	je     c000ef4d <Phys::allocateContiguousPages(int)+0x5e>
c000ef2b:	83 fe 01             	cmp    esi,0x1
c000ef2e:	bb 01 00 00 00       	mov    ebx,0x1
c000ef33:	89 c7                	mov    edi,eax
c000ef35:	75 e4                	jne    c000ef1b <Phys::allocateContiguousPages(int)+0x2c>
c000ef37:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000ef3c:	83 e8 01             	sub    eax,0x1
c000ef3f:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c000ef44:	75 01                	jne    c000ef47 <Phys::allocateContiguousPages(int)+0x58>
c000ef46:	fb                   	sti    
c000ef47:	5b                   	pop    ebx
c000ef48:	89 f8                	mov    eax,edi
c000ef4a:	5e                   	pop    esi
c000ef4b:	5f                   	pop    edi
c000ef4c:	c3                   	ret    
c000ef4d:	83 c3 01             	add    ebx,0x1
c000ef50:	39 f3                	cmp    ebx,esi
c000ef52:	75 b2                	jne    c000ef06 <Phys::allocateContiguousPages(int)+0x17>
c000ef54:	eb e1                	jmp    c000ef37 <Phys::allocateContiguousPages(int)+0x48>

c000ef56 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000ef56:	56                   	push   esi
c000ef57:	53                   	push   ebx
c000ef58:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ef5c:	39 1d a0 bd 02 c0    	cmp    DWORD PTR ds:0xc002bda0,ebx
c000ef62:	73 06                	jae    c000ef6a <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000ef64:	89 1d a0 bd 02 c0    	mov    DWORD PTR ds:0xc002bda0,ebx
c000ef6a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ef6e:	c1 eb 0c             	shr    ebx,0xc
c000ef71:	c1 e8 0c             	shr    eax,0xc
c000ef74:	39 d8                	cmp    eax,ebx
c000ef76:	73 13                	jae    c000ef8b <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000ef78:	6a 00                	push   0x0
c000ef7a:	50                   	push   eax
c000ef7b:	8d 70 01             	lea    esi,[eax+0x1]
c000ef7e:	e8 d8 fd ff ff       	call   c000ed5b <Phys::setPageState(unsigned long, bool)>
c000ef83:	39 f3                	cmp    ebx,esi
c000ef85:	89 f0                	mov    eax,esi
c000ef87:	5a                   	pop    edx
c000ef88:	59                   	pop    ecx
c000ef89:	75 ed                	jne    c000ef78 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000ef8b:	5b                   	pop    ebx
c000ef8c:	5e                   	pop    esi
c000ef8d:	c3                   	ret    

c000ef8e <Phys::physicalMemorySetup(unsigned int)>:
c000ef8e:	55                   	push   ebp
c000ef8f:	57                   	push   edi
c000ef90:	56                   	push   esi
c000ef91:	53                   	push   ebx
c000ef92:	31 db                	xor    ebx,ebx
c000ef94:	83 ec 40             	sub    esp,0x40
c000ef97:	6a 10                	push   0x10
c000ef99:	6a 00                	push   0x0
c000ef9b:	68 b0 bd 02 c0       	push   0xc002bdb0
c000efa0:	e8 4b 15 ff ff       	call   c00004f0 <memset>
c000efa5:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000efa9:	25 00 f0 ff ff       	and    eax,0xfffff000
c000efae:	05 00 10 00 00       	add    eax,0x1000
c000efb3:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000efb7:	5a                   	pop    edx
c000efb8:	59                   	pop    ecx
c000efb9:	50                   	push   eax
c000efba:	68 af 20 02 c0       	push   0xc00220af
c000efbf:	e8 8a 7f ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000efc4:	83 c4 10             	add    esp,0x10
c000efc7:	83 ec 08             	sub    esp,0x8
c000efca:	6a 01                	push   0x1
c000efcc:	53                   	push   ebx
c000efcd:	83 c3 01             	add    ebx,0x1
c000efd0:	e8 86 fd ff ff       	call   c000ed5b <Phys::setPageState(unsigned long, bool)>
c000efd5:	83 c4 10             	add    esp,0x10
c000efd8:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000efde:	75 e7                	jne    c000efc7 <Phys::physicalMemorySetup(unsigned int)+0x39>
c000efe0:	0f b6 05 14 05 00 c2 	movzx  eax,BYTE PTR ds:0xc2000514
c000efe7:	0f b6 15 13 05 00 c2 	movzx  edx,BYTE PTR ds:0xc2000513
c000efee:	c1 e0 08             	shl    eax,0x8
c000eff1:	09 c2                	or     edx,eax
c000eff3:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000eff7:	0f 84 43 01 00 00    	je     c000f140 <Phys::physicalMemorySetup(unsigned int)+0x1b2>
c000effd:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000f005:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000f00a:	e9 82 00 00 00       	jmp    c000f091 <Phys::physicalMemorySetup(unsigned int)+0x103>
c000f00f:	ba 00 00 08 00       	mov    edx,0x80000
c000f014:	89 c1                	mov    ecx,eax
c000f016:	39 f2                	cmp    edx,esi
c000f018:	19 f9                	sbb    ecx,edi
c000f01a:	0f 82 c0 00 00 00    	jb     c000f0e0 <Phys::physicalMemorySetup(unsigned int)+0x152>
c000f020:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f024:	89 c5                	mov    ebp,eax
c000f026:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000f02a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f02e:	19 cd                	sbb    ebp,ecx
c000f030:	0f 83 af 00 00 00    	jae    c000f0e5 <Phys::physicalMemorySetup(unsigned int)+0x157>
c000f036:	89 d6                	mov    esi,edx
c000f038:	ba 00 00 0a 00       	mov    edx,0xa0000
c000f03d:	39 f2                	cmp    edx,esi
c000f03f:	89 cf                	mov    edi,ecx
c000f041:	19 c8                	sbb    eax,ecx
c000f043:	73 07                	jae    c000f04c <Phys::physicalMemorySetup(unsigned int)+0xbe>
c000f045:	be 00 00 0a 00       	mov    esi,0xa0000
c000f04a:	31 ff                	xor    edi,edi
c000f04c:	89 f2                	mov    edx,esi
c000f04e:	b8 ff 1f 00 00       	mov    eax,0x1fff
c000f053:	81 c2 00 00 f8 ff    	add    edx,0xfff80000
c000f059:	89 f9                	mov    ecx,edi
c000f05b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000f05f:	83 d1 ff             	adc    ecx,0xffffffff
c000f062:	39 d0                	cmp    eax,edx
c000f064:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000f068:	b8 00 00 00 00       	mov    eax,0x0
c000f06d:	19 c8                	sbb    eax,ecx
c000f06f:	0f 82 9d 01 00 00    	jb     c000f212 <Phys::physicalMemorySetup(unsigned int)+0x284>
c000f075:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f079:	83 c3 18             	add    ebx,0x18
c000f07c:	83 c6 01             	add    esi,0x1
c000f07f:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000f083:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f087:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c000f08b:	0f 84 bf 00 00 00    	je     c000f150 <Phys::physicalMemorySetup(unsigned int)+0x1c2>
c000f091:	8b 33                	mov    esi,DWORD PTR [ebx]
c000f093:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000f096:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000f099:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000f09c:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000f0a0:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000f0a3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f0a7:	01 f0                	add    eax,esi
c000f0a9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f0ad:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000f0b1:	55                   	push   ebp
c000f0b2:	11 fa                	adc    edx,edi
c000f0b4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f0b8:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000f0bc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f0c0:	50                   	push   eax
c000f0c1:	56                   	push   esi
c000f0c2:	68 4c 20 02 c0       	push   0xc002204c
c000f0c7:	e8 82 7e ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000f0cc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f0d0:	83 c4 10             	add    esp,0x10
c000f0d3:	09 f8                	or     eax,edi
c000f0d5:	75 79                	jne    c000f150 <Phys::physicalMemorySetup(unsigned int)+0x1c2>
c000f0d7:	83 fd 01             	cmp    ebp,0x1
c000f0da:	0f 84 2f ff ff ff    	je     c000f00f <Phys::physicalMemorySetup(unsigned int)+0x81>
c000f0e0:	83 fd 01             	cmp    ebp,0x1
c000f0e3:	75 90                	jne    c000f075 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c000f0e5:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000f0e9:	31 d2                	xor    edx,edx
c000f0eb:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c000f0ef:	89 c8                	mov    eax,ecx
c000f0f1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f0f5:	19 d1                	sbb    ecx,edx
c000f0f7:	0f 82 78 ff ff ff    	jb     c000f075 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c000f0fd:	b9 ff 1f 00 00       	mov    ecx,0x1fff
c000f102:	3b 4c 24 18          	cmp    ecx,DWORD PTR [esp+0x18]
c000f106:	b9 00 00 00 00       	mov    ecx,0x0
c000f10b:	1b 4c 24 1c          	sbb    ecx,DWORD PTR [esp+0x1c]
c000f10f:	0f 83 60 ff ff ff    	jae    c000f075 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c000f115:	39 c6                	cmp    esi,eax
c000f117:	19 d7                	sbb    edi,edx
c000f119:	0f 83 ff 00 00 00    	jae    c000f21e <Phys::physicalMemorySetup(unsigned int)+0x290>
c000f11f:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000f123:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000f127:	29 c7                	sub    edi,eax
c000f129:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f12d:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000f131:	19 d5                	sbb    ebp,edx
c000f133:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000f137:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000f13b:	e9 de 00 00 00       	jmp    c000f21e <Phys::physicalMemorySetup(unsigned int)+0x290>
c000f140:	83 ec 0c             	sub    esp,0xc
c000f143:	68 c7 20 02 c0       	push   0xc00220c7
c000f148:	e8 d9 fa ff ff       	call   c000ec26 <KePanic(char const*)>
c000f14d:	83 c4 10             	add    esp,0x10
c000f150:	83 ec 08             	sub    esp,0x8
c000f153:	bb 60 00 00 00       	mov    ebx,0x60
c000f158:	6a 00                	push   0x0
c000f15a:	6a 06                	push   0x6
c000f15c:	e8 fa fb ff ff       	call   c000ed5b <Phys::setPageState(unsigned long, bool)>
c000f161:	58                   	pop    eax
c000f162:	5a                   	pop    edx
c000f163:	6a 00                	push   0x0
c000f165:	6a 07                	push   0x7
c000f167:	e8 ef fb ff ff       	call   c000ed5b <Phys::setPageState(unsigned long, bool)>
c000f16c:	8b 0d ac bd 02 c0    	mov    ecx,DWORD PTR ds:0xc002bdac
c000f172:	83 c4 10             	add    esp,0x10
c000f175:	83 c1 02             	add    ecx,0x2
c000f178:	89 0d ac bd 02 c0    	mov    DWORD PTR ds:0xc002bdac,ecx
c000f17e:	83 ec 08             	sub    esp,0x8
c000f181:	6a 00                	push   0x0
c000f183:	53                   	push   ebx
c000f184:	83 c3 01             	add    ebx,0x1
c000f187:	e8 cf fb ff ff       	call   c000ed5b <Phys::setPageState(unsigned long, bool)>
c000f18c:	83 c4 10             	add    esp,0x10
c000f18f:	81 fb 80 00 00 00    	cmp    ebx,0x80
c000f195:	75 e7                	jne    c000f17e <Phys::physicalMemorySetup(unsigned int)+0x1f0>
c000f197:	a1 ac bd 02 c0       	mov    eax,ds:0xc002bdac
c000f19c:	bb 40 01 00 00       	mov    ebx,0x140
c000f1a1:	83 c0 20             	add    eax,0x20
c000f1a4:	a3 ac bd 02 c0       	mov    ds:0xc002bdac,eax
c000f1a9:	eb 26                	jmp    c000f1d1 <Phys::physicalMemorySetup(unsigned int)+0x243>
c000f1ab:	83 ec 08             	sub    esp,0x8
c000f1ae:	6a 00                	push   0x0
c000f1b0:	53                   	push   ebx
c000f1b1:	83 c3 01             	add    ebx,0x1
c000f1b4:	e8 a2 fb ff ff       	call   c000ed5b <Phys::setPageState(unsigned long, bool)>
c000f1b9:	a1 ac bd 02 c0       	mov    eax,ds:0xc002bdac
c000f1be:	83 c4 10             	add    esp,0x10
c000f1c1:	83 c0 01             	add    eax,0x1
c000f1c4:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c000f1ca:	a3 ac bd 02 c0       	mov    ds:0xc002bdac,eax
c000f1cf:	74 07                	je     c000f1d8 <Phys::physicalMemorySetup(unsigned int)+0x24a>
c000f1d1:	3d ff 03 00 00       	cmp    eax,0x3ff
c000f1d6:	7e d3                	jle    c000f1ab <Phys::physicalMemorySetup(unsigned int)+0x21d>
c000f1d8:	bb d0 01 00 00       	mov    ebx,0x1d0
c000f1dd:	3d ff 07 00 00       	cmp    eax,0x7ff
c000f1e2:	7f 26                	jg     c000f20a <Phys::physicalMemorySetup(unsigned int)+0x27c>
c000f1e4:	83 ec 08             	sub    esp,0x8
c000f1e7:	6a 00                	push   0x0
c000f1e9:	53                   	push   ebx
c000f1ea:	83 c3 01             	add    ebx,0x1
c000f1ed:	e8 69 fb ff ff       	call   c000ed5b <Phys::setPageState(unsigned long, bool)>
c000f1f2:	a1 ac bd 02 c0       	mov    eax,ds:0xc002bdac
c000f1f7:	83 c4 10             	add    esp,0x10
c000f1fa:	83 c0 01             	add    eax,0x1
c000f1fd:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c000f203:	a3 ac bd 02 c0       	mov    ds:0xc002bdac,eax
c000f208:	75 d3                	jne    c000f1dd <Phys::physicalMemorySetup(unsigned int)+0x24f>
c000f20a:	83 c4 3c             	add    esp,0x3c
c000f20d:	5b                   	pop    ebx
c000f20e:	5e                   	pop    esi
c000f20f:	5f                   	pop    edi
c000f210:	5d                   	pop    ebp
c000f211:	c3                   	ret    
c000f212:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c000f216:	c7 44 24 20 00 00 08 00 	mov    DWORD PTR [esp+0x20],0x80000
c000f21e:	83 ec 04             	sub    esp,0x4
c000f221:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c000f225:	56                   	push   esi
c000f226:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000f22a:	57                   	push   edi
c000f22b:	68 70 20 02 c0       	push   0xc0022070
c000f230:	e8 19 7d ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000f235:	5d                   	pop    ebp
c000f236:	58                   	pop    eax
c000f237:	56                   	push   esi
c000f238:	57                   	push   edi
c000f239:	e8 18 fd ff ff       	call   c000ef56 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000f23e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000f242:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f246:	83 c4 0c             	add    esp,0xc
c000f249:	8b 35 ac bd 02 c0    	mov    esi,DWORD PTR ds:0xc002bdac
c000f24f:	0f ac d0 0c          	shrd   eax,edx,0xc
c000f253:	01 f0                	add    eax,esi
c000f255:	a3 ac bd 02 c0       	mov    ds:0xc002bdac,eax
c000f25a:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000f261:	52                   	push   edx
c000f262:	50                   	push   eax
c000f263:	68 d5 20 02 c0       	push   0xc00220d5
c000f268:	e8 e1 7c ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000f26d:	83 c4 10             	add    esp,0x10
c000f270:	e9 00 fe ff ff       	jmp    c000f075 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c000f275:	90                   	nop

c000f276 <Pipe::isAtty()>:
c000f276:	31 c0                	xor    eax,eax
c000f278:	c3                   	ret    
c000f279:	90                   	nop

c000f27a <Pipe::~Pipe()>:
c000f27a:	83 ec 0c             	sub    esp,0xc
c000f27d:	ba 34 21 02 c0       	mov    edx,0xc0022134
c000f282:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f286:	89 10                	mov    DWORD PTR [eax],edx
c000f288:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f28c:	83 ec 0c             	sub    esp,0xc
c000f28f:	50                   	push   eax
c000f290:	e8 8d 2a 00 00       	call   c0011d22 <UnixFile::~UnixFile()>
c000f295:	83 c4 10             	add    esp,0x10
c000f298:	90                   	nop
c000f299:	83 c4 0c             	add    esp,0xc
c000f29c:	c3                   	ret    
c000f29d:	90                   	nop

c000f29e <Pipe::~Pipe()>:
c000f29e:	83 ec 0c             	sub    esp,0xc
c000f2a1:	83 ec 0c             	sub    esp,0xc
c000f2a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f2a8:	e8 cd ff ff ff       	call   c000f27a <Pipe::~Pipe()>
c000f2ad:	83 c4 10             	add    esp,0x10
c000f2b0:	83 ec 08             	sub    esp,0x8
c000f2b3:	6a 20                	push   0x20
c000f2b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f2b9:	e8 a5 d3 ff ff       	call   c000c663 <operator delete(void*, unsigned long)>
c000f2be:	83 c4 10             	add    esp,0x10
c000f2c1:	83 c4 0c             	add    esp,0xc
c000f2c4:	c3                   	ret    
c000f2c5:	90                   	nop

c000f2c6 <Pipe::write(unsigned long long, void*, int*)>:
c000f2c6:	55                   	push   ebp
c000f2c7:	57                   	push   edi
c000f2c8:	56                   	push   esi
c000f2c9:	53                   	push   ebx
c000f2ca:	83 ec 1c             	sub    esp,0x1c
c000f2cd:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000f2d1:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000f2d5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f2d9:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c000f2dc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000f2e0:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000f2e3:	89 04 24             	mov    DWORD PTR [esp],eax
c000f2e6:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000f2ea:	89 d8                	mov    eax,ebx
c000f2ec:	89 d6                	mov    esi,edx
c000f2ee:	89 d7                	mov    edi,edx
c000f2f0:	c1 ff 1f             	sar    edi,0x1f
c000f2f3:	03 34 24             	add    esi,DWORD PTR [esp]
c000f2f6:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000f2fa:	c1 f8 1f             	sar    eax,0x1f
c000f2fd:	39 f3                	cmp    ebx,esi
c000f2ff:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f303:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f307:	19 f8                	sbb    eax,edi
c000f309:	b8 01 00 00 00       	mov    eax,0x1
c000f30e:	72 72                	jb     c000f382 <Pipe::write(unsigned long long, void*, int*)+0xbc>
c000f310:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000f313:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000f317:	01 d0                	add    eax,edx
c000f319:	99                   	cdq    
c000f31a:	f7 fb                	idiv   ebx
c000f31c:	89 d8                	mov    eax,ebx
c000f31e:	29 d0                	sub    eax,edx
c000f320:	89 d6                	mov    esi,edx
c000f322:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000f325:	89 c3                	mov    ebx,eax
c000f327:	c1 fb 1f             	sar    ebx,0x1f
c000f32a:	39 c2                	cmp    edx,eax
c000f32c:	19 df                	sbb    edi,ebx
c000f32e:	bb 00 00 00 00       	mov    ebx,0x0
c000f333:	72 04                	jb     c000f339 <Pipe::write(unsigned long long, void*, int*)+0x73>
c000f335:	89 d3                	mov    ebx,edx
c000f337:	29 c3                	sub    ebx,eax
c000f339:	89 d0                	mov    eax,edx
c000f33b:	29 d8                	sub    eax,ebx
c000f33d:	74 0d                	je     c000f34c <Pipe::write(unsigned long long, void*, int*)+0x86>
c000f33f:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c000f342:	89 c1                	mov    ecx,eax
c000f344:	01 f7                	add    edi,esi
c000f346:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000f34a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f34c:	85 db                	test   ebx,ebx
c000f34e:	74 0d                	je     c000f35d <Pipe::write(unsigned long long, void*, int*)+0x97>
c000f350:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000f354:	89 d9                	mov    ecx,ebx
c000f356:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c000f359:	89 c6                	mov    esi,eax
c000f35b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f35d:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c000f360:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000f365:	75 10                	jne    c000f377 <Pipe::write(unsigned long long, void*, int*)+0xb1>
c000f367:	83 ec 0c             	sub    esp,0xc
c000f36a:	68 f1 20 02 c0       	push   0xc00220f1
c000f36f:	e8 b2 f8 ff ff       	call   c000ec26 <KePanic(char const*)>
c000f374:	83 c4 10             	add    esp,0x10
c000f377:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f37b:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000f37e:	89 08                	mov    DWORD PTR [eax],ecx
c000f380:	31 c0                	xor    eax,eax
c000f382:	83 c4 1c             	add    esp,0x1c
c000f385:	5b                   	pop    ebx
c000f386:	5e                   	pop    esi
c000f387:	5f                   	pop    edi
c000f388:	5d                   	pop    ebp
c000f389:	c3                   	ret    

c000f38a <Pipe::read(unsigned long long, void*, int*)>:
c000f38a:	55                   	push   ebp
c000f38b:	57                   	push   edi
c000f38c:	56                   	push   esi
c000f38d:	53                   	push   ebx
c000f38e:	83 ec 1c             	sub    esp,0x1c
c000f391:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000f395:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000f399:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000f39d:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000f3a0:	89 c8                	mov    eax,ecx
c000f3a2:	99                   	cdq    
c000f3a3:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000f3a7:	74 24                	je     c000f3cd <Pipe::read(unsigned long long, void*, int*)+0x43>
c000f3a9:	39 f9                	cmp    ecx,edi
c000f3ab:	89 d1                	mov    ecx,edx
c000f3ad:	19 f1                	sbb    ecx,esi
c000f3af:	73 1c                	jae    c000f3cd <Pipe::read(unsigned long long, void*, int*)+0x43>
c000f3b1:	fa                   	cli    
c000f3b2:	ff 05 b0 c6 02 c0    	inc    DWORD PTR ds:0xc002c6b0
c000f3b8:	e8 33 60 00 00       	call   c00153f0 <schedule()>
c000f3bd:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000f3c2:	48                   	dec    eax
c000f3c3:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c000f3c8:	75 d3                	jne    c000f39d <Pipe::read(unsigned long long, void*, int*)+0x13>
c000f3ca:	fb                   	sti    
c000f3cb:	eb d0                	jmp    c000f39d <Pipe::read(unsigned long long, void*, int*)+0x13>
c000f3cd:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000f3d1:	39 f8                	cmp    eax,edi
c000f3d3:	89 d1                	mov    ecx,edx
c000f3d5:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000f3d9:	19 f1                	sbb    ecx,esi
c000f3db:	73 08                	jae    c000f3e5 <Pipe::read(unsigned long long, void*, int*)+0x5b>
c000f3dd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f3e1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f3e5:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c000f3e8:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000f3eb:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c000f3ef:	29 f7                	sub    edi,esi
c000f3f1:	89 f8                	mov    eax,edi
c000f3f3:	99                   	cdq    
c000f3f4:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c000f3f8:	89 d0                	mov    eax,edx
c000f3fa:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f3fe:	19 c2                	sbb    edx,eax
c000f400:	89 f8                	mov    eax,edi
c000f402:	0f 42 44 24 08       	cmovb  eax,DWORD PTR [esp+0x8]
c000f407:	89 ea                	mov    edx,ebp
c000f409:	29 c2                	sub    edx,eax
c000f40b:	85 c0                	test   eax,eax
c000f40d:	74 0b                	je     c000f41a <Pipe::read(unsigned long long, void*, int*)+0x90>
c000f40f:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000f412:	89 c1                	mov    ecx,eax
c000f414:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000f418:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f41a:	85 d2                	test   edx,edx
c000f41c:	74 0d                	je     c000f42b <Pipe::read(unsigned long long, void*, int*)+0xa1>
c000f41e:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000f422:	89 d1                	mov    ecx,edx
c000f424:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c000f427:	89 c7                	mov    edi,eax
c000f429:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f42b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000f42e:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000f431:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c000f434:	99                   	cdq    
c000f435:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000f439:	89 f7                	mov    edi,esi
c000f43b:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000f43f:	c1 ff 1f             	sar    edi,0x1f
c000f442:	57                   	push   edi
c000f443:	56                   	push   esi
c000f444:	52                   	push   edx
c000f445:	50                   	push   eax
c000f446:	e8 09 07 01 00       	call   c001fb54 <__umoddi3>
c000f44b:	83 c4 10             	add    esp,0x10
c000f44e:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000f453:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000f456:	75 10                	jne    c000f468 <Pipe::read(unsigned long long, void*, int*)+0xde>
c000f458:	83 ec 0c             	sub    esp,0xc
c000f45b:	68 0e 21 02 c0       	push   0xc002210e
c000f460:	e8 c1 f7 ff ff       	call   c000ec26 <KePanic(char const*)>
c000f465:	83 c4 10             	add    esp,0x10
c000f468:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f46c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f470:	89 10                	mov    DWORD PTR [eax],edx
c000f472:	83 c4 1c             	add    esp,0x1c
c000f475:	31 c0                	xor    eax,eax
c000f477:	5b                   	pop    ebx
c000f478:	5e                   	pop    esi
c000f479:	5f                   	pop    edi
c000f47a:	5d                   	pop    ebp
c000f47b:	c3                   	ret    

c000f47c <Pipe::Pipe(int)>:
c000f47c:	83 ec 0c             	sub    esp,0xc
c000f47f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f483:	83 ec 08             	sub    esp,0x8
c000f486:	6a 00                	push   0x0
c000f488:	50                   	push   eax
c000f489:	e8 ae 26 00 00       	call   c0011b3c <UnixFile::UnixFile(int)>
c000f48e:	83 c4 10             	add    esp,0x10
c000f491:	ba 34 21 02 c0       	mov    edx,0xc0022134
c000f496:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f49a:	89 10                	mov    DWORD PTR [eax],edx
c000f49c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f4a0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f4a4:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000f4a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f4ab:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000f4b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f4b6:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000f4bd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f4c1:	83 ec 0c             	sub    esp,0xc
c000f4c4:	50                   	push   eax
c000f4c5:	e8 06 f4 ff ff       	call   c000e8d0 <malloc>
c000f4ca:	83 c4 10             	add    esp,0x10
c000f4cd:	89 c2                	mov    edx,eax
c000f4cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f4d3:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000f4d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f4da:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000f4de:	90                   	nop
c000f4df:	83 c4 0c             	add    esp,0xc
c000f4e2:	c3                   	ret    

c000f4e3 <KePowerThread(void*)>:
c000f4e3:	83 ec 0c             	sub    esp,0xc
c000f4e6:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000f4eb:	48                   	dec    eax
c000f4ec:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c000f4f1:	75 01                	jne    c000f4f4 <KePowerThread(void*)+0x11>
c000f4f3:	fb                   	sti    
c000f4f4:	c6 05 e0 bd 02 c0 00 	mov    BYTE PTR ds:0xc002bde0,0x0
c000f4fb:	83 ec 0c             	sub    esp,0xc
c000f4fe:	6a 0a                	push   0xa
c000f500:	e8 d7 60 00 00       	call   c00155dc <sleep(unsigned int)>
c000f505:	83 c4 10             	add    esp,0x10
c000f508:	83 05 24 be 02 c0 0a 	add    DWORD PTR ds:0xc002be24,0xa
c000f50f:	eb e3                	jmp    c000f4f4 <KePowerThread(void*)+0x11>

c000f511 <KeChangePowerSettings(PowerSettings)>:
c000f511:	57                   	push   edi
c000f512:	b9 09 00 00 00       	mov    ecx,0x9
c000f517:	56                   	push   esi
c000f518:	bf 00 be 02 c0       	mov    edi,0xc002be00
c000f51d:	fc                   	cld    
c000f51e:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000f522:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000f524:	5e                   	pop    esi
c000f525:	5f                   	pop    edi
c000f526:	c3                   	ret    

c000f527 <KeUserIOReceived()>:
c000f527:	c7 05 24 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002be24,0x0
c000f531:	c3                   	ret    

c000f532 <KeHandlePowerButton()>:
c000f532:	a1 00 be 02 c0       	mov    eax,ds:0xc002be00
c000f537:	83 f8 02             	cmp    eax,0x2
c000f53a:	75 05                	jne    c000f541 <KeHandlePowerButton()+0xf>
c000f53c:	e9 5f e1 ff ff       	jmp    c000d6a0 <KeShutdown()>
c000f541:	48                   	dec    eax
c000f542:	75 05                	jne    c000f549 <KeHandlePowerButton()+0x17>
c000f544:	e9 7b e1 ff ff       	jmp    c000d6c4 <KeSleep()>
c000f549:	c3                   	ret    

c000f54a <KeHandleSleepButton()>:
c000f54a:	a1 04 be 02 c0       	mov    eax,ds:0xc002be04
c000f54f:	83 f8 02             	cmp    eax,0x2
c000f552:	75 05                	jne    c000f559 <KeHandleSleepButton()+0xf>
c000f554:	e9 47 e1 ff ff       	jmp    c000d6a0 <KeShutdown()>
c000f559:	48                   	dec    eax
c000f55a:	75 05                	jne    c000f561 <KeHandleSleepButton()+0x17>
c000f55c:	e9 63 e1 ff ff       	jmp    c000d6c4 <KeSleep()>
c000f561:	c3                   	ret    

c000f562 <KeSetupPowerManager()>:
c000f562:	83 ec 0c             	sub    esp,0xc
c000f565:	68 f0 00 00 00       	push   0xf0
c000f56a:	6a 00                	push   0x0
c000f56c:	68 e3 f4 00 c0       	push   0xc000f4e3
c000f571:	ff 35 d8 c6 02 c0    	push   DWORD PTR ds:0xc002c6d8
c000f577:	c7 05 24 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002be24,0x0
c000f581:	c6 05 e0 bd 02 c0 00 	mov    BYTE PTR ds:0xc002bde0,0x0
c000f588:	e8 17 5c 00 00       	call   c00151a4 <Process::createThread(void (*)(void*), void*, int)>
c000f58d:	c7 05 00 be 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc002be00,0x2
c000f597:	c7 05 04 be 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002be04,0x1
c000f5a1:	c7 05 08 be 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc002be08,0x3
c000f5ab:	c7 05 0c be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002be0c,0x0
c000f5b5:	c7 05 18 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002be18,0x0
c000f5bf:	c7 05 10 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002be10,0x0
c000f5c9:	c7 05 1c be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002be1c,0x0
c000f5d3:	c7 05 14 be 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc002be14,0x3c
c000f5dd:	c7 05 20 be 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc002be20,0x3c
c000f5e7:	83 c4 1c             	add    esp,0x1c
c000f5ea:	c3                   	ret    

c000f5eb <KeRand()>:
c000f5eb:	69 05 28 be 02 c0 75 28 00 00 	imul   eax,DWORD PTR ds:0xc002be28,0x2875
c000f5f5:	69 0d 2c be 02 c0 75 b1 e7 a2 	imul   ecx,DWORD PTR ds:0xc002be2c,0xa2e7b175
c000f5ff:	53                   	push   ebx
c000f600:	01 c1                	add    ecx,eax
c000f602:	b8 75 b1 e7 a2       	mov    eax,0xa2e7b175
c000f607:	f7 25 28 be 02 c0    	mul    DWORD PTR ds:0xc002be28
c000f60d:	01 ca                	add    edx,ecx
c000f60f:	05 ef 04 b5 00       	add    eax,0xb504ef
c000f614:	a3 28 be 02 c0       	mov    ds:0xc002be28,eax
c000f619:	83 d2 00             	adc    edx,0x0
c000f61c:	0f b7 da             	movzx  ebx,dx
c000f61f:	89 1d 2c be 02 c0    	mov    DWORD PTR ds:0xc002be2c,ebx
c000f625:	0f ac d8 0e          	shrd   eax,ebx,0xe
c000f629:	5b                   	pop    ebx
c000f62a:	c3                   	ret    

c000f62b <KeSeedRand(unsigned int)>:
c000f62b:	53                   	push   ebx
c000f62c:	83 ec 08             	sub    esp,0x8
c000f62f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f633:	e8 6e 8f 00 00       	call   c00185a6 <HalGetRand()>
c000f638:	c7 05 2c be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002be2c,0x0
c000f642:	31 d8                	xor    eax,ebx
c000f644:	a3 28 be 02 c0       	mov    ds:0xc002be28,eax
c000f649:	e8 9d ff ff ff       	call   c000f5eb <KeRand()>
c000f64e:	83 c4 08             	add    esp,0x8
c000f651:	5b                   	pop    ebx
c000f652:	eb 97                	jmp    c000f5eb <KeRand()>

c000f654 <KeInitRand()>:
c000f654:	83 ec 0c             	sub    esp,0xc
c000f657:	e8 6e 8d 00 00       	call   c00183ca <HalQueryPerformanceCounter()>
c000f65c:	0f 20 da             	mov    edx,cr3
c000f65f:	0f 22 da             	mov    cr3,edx
c000f662:	0f 20 da             	mov    edx,cr3
c000f665:	0f 22 da             	mov    cr3,edx
c000f668:	0f 20 da             	mov    edx,cr3
c000f66b:	0f 22 da             	mov    cr3,edx
c000f66e:	0f 20 da             	mov    edx,cr3
c000f671:	0f 22 da             	mov    cr3,edx
c000f674:	83 ec 0c             	sub    esp,0xc
c000f677:	35 03 8a 95 38       	xor    eax,0x38958a03
c000f67c:	50                   	push   eax
c000f67d:	e8 a9 ff ff ff       	call   c000f62b <KeSeedRand(unsigned int)>
c000f682:	83 c4 1c             	add    esp,0x1c
c000f685:	c3                   	ret    
c000f686:	66 90                	xchg   ax,ax

c000f688 <KeResolveCompatibilitySymbol(char*)>:
c000f688:	83 ec 0c             	sub    esp,0xc
c000f68b:	83 ec 08             	sub    esp,0x8
c000f68e:	68 48 21 02 c0       	push   0xc0022148
c000f693:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f697:	e8 e4 10 ff ff       	call   c0000780 <strcmp>
c000f69c:	83 c4 10             	add    esp,0x10
c000f69f:	85 c0                	test   eax,eax
c000f6a1:	0f 94 c0             	sete   al
c000f6a4:	0f b6 c0             	movzx  eax,al
c000f6a7:	85 c0                	test   eax,eax
c000f6a9:	74 0d                	je     c000f6b8 <KeResolveCompatibilitySymbol(char*)+0x30>
c000f6ab:	b8 70 9d 02 c0       	mov    eax,0xc0029d70
c000f6b0:	e9 8b 01 00 00       	jmp    c000f840 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c000f6b5:	8d 76 00             	lea    esi,[esi+0x0]
c000f6b8:	83 ec 08             	sub    esp,0x8
c000f6bb:	68 51 21 02 c0       	push   0xc0022151
c000f6c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f6c4:	e8 b7 10 ff ff       	call   c0000780 <strcmp>
c000f6c9:	83 c4 10             	add    esp,0x10
c000f6cc:	85 c0                	test   eax,eax
c000f6ce:	0f 94 c0             	sete   al
c000f6d1:	0f b6 c0             	movzx  eax,al
c000f6d4:	85 c0                	test   eax,eax
c000f6d6:	74 0c                	je     c000f6e4 <KeResolveCompatibilitySymbol(char*)+0x5c>
c000f6d8:	b8 54 fa 01 c0       	mov    eax,0xc001fa54
c000f6dd:	e9 5e 01 00 00       	jmp    c000f840 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c000f6e2:	66 90                	xchg   ax,ax
c000f6e4:	83 ec 08             	sub    esp,0x8
c000f6e7:	68 5b 21 02 c0       	push   0xc002215b
c000f6ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f6f0:	e8 8b 10 ff ff       	call   c0000780 <strcmp>
c000f6f5:	83 c4 10             	add    esp,0x10
c000f6f8:	85 c0                	test   eax,eax
c000f6fa:	0f 94 c0             	sete   al
c000f6fd:	0f b6 c0             	movzx  eax,al
c000f700:	85 c0                	test   eax,eax
c000f702:	74 0c                	je     c000f710 <KeResolveCompatibilitySymbol(char*)+0x88>
c000f704:	b8 88 f7 01 c0       	mov    eax,0xc001f788
c000f709:	e9 32 01 00 00       	jmp    c000f840 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c000f70e:	66 90                	xchg   ax,ax
c000f710:	83 ec 08             	sub    esp,0x8
c000f713:	68 64 21 02 c0       	push   0xc0022164
c000f718:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f71c:	e8 5f 10 ff ff       	call   c0000780 <strcmp>
c000f721:	83 c4 10             	add    esp,0x10
c000f724:	85 c0                	test   eax,eax
c000f726:	0f 94 c0             	sete   al
c000f729:	0f b6 c0             	movzx  eax,al
c000f72c:	85 c0                	test   eax,eax
c000f72e:	74 0c                	je     c000f73c <KeResolveCompatibilitySymbol(char*)+0xb4>
c000f730:	b8 26 ec 00 c0       	mov    eax,0xc000ec26
c000f735:	e9 06 01 00 00       	jmp    c000f840 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c000f73a:	66 90                	xchg   ax,ax
c000f73c:	83 ec 08             	sub    esp,0x8
c000f73f:	68 77 21 02 c0       	push   0xc0022177
c000f744:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f748:	e8 33 10 ff ff       	call   c0000780 <strcmp>
c000f74d:	83 c4 10             	add    esp,0x10
c000f750:	85 c0                	test   eax,eax
c000f752:	0f 94 c0             	sete   al
c000f755:	0f b6 c0             	movzx  eax,al
c000f758:	85 c0                	test   eax,eax
c000f75a:	74 0c                	je     c000f768 <KeResolveCompatibilitySymbol(char*)+0xe0>
c000f75c:	b8 a3 c5 00 c0       	mov    eax,0xc000c5a3
c000f761:	e9 da 00 00 00       	jmp    c000f840 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c000f766:	66 90                	xchg   ax,ax
c000f768:	83 ec 08             	sub    esp,0x8
c000f76b:	68 94 21 02 c0       	push   0xc0022194
c000f770:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f774:	e8 07 10 ff ff       	call   c0000780 <strcmp>
c000f779:	83 c4 10             	add    esp,0x10
c000f77c:	85 c0                	test   eax,eax
c000f77e:	0f 94 c0             	sete   al
c000f781:	0f b6 c0             	movzx  eax,al
c000f784:	85 c0                	test   eax,eax
c000f786:	74 0c                	je     c000f794 <KeResolveCompatibilitySymbol(char*)+0x10c>
c000f788:	b8 54 fb 01 c0       	mov    eax,0xc001fb54
c000f78d:	e9 ae 00 00 00       	jmp    c000f840 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c000f792:	66 90                	xchg   ax,ax
c000f794:	83 ec 08             	sub    esp,0x8
c000f797:	68 9e 21 02 c0       	push   0xc002219e
c000f79c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f7a0:	e8 db 0f ff ff       	call   c0000780 <strcmp>
c000f7a5:	83 c4 10             	add    esp,0x10
c000f7a8:	85 c0                	test   eax,eax
c000f7aa:	0f 94 c0             	sete   al
c000f7ad:	0f b6 c0             	movzx  eax,al
c000f7b0:	85 c0                	test   eax,eax
c000f7b2:	74 0c                	je     c000f7c0 <KeResolveCompatibilitySymbol(char*)+0x138>
c000f7b4:	b8 d4 f8 01 c0       	mov    eax,0xc001f8d4
c000f7b9:	e9 82 00 00 00       	jmp    c000f840 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c000f7be:	66 90                	xchg   ax,ax
c000f7c0:	83 ec 08             	sub    esp,0x8
c000f7c3:	68 a7 21 02 c0       	push   0xc00221a7
c000f7c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f7cc:	e8 af 0f ff ff       	call   c0000780 <strcmp>
c000f7d1:	83 c4 10             	add    esp,0x10
c000f7d4:	85 c0                	test   eax,eax
c000f7d6:	0f 94 c0             	sete   al
c000f7d9:	0f b6 c0             	movzx  eax,al
c000f7dc:	85 c0                	test   eax,eax
c000f7de:	74 08                	je     c000f7e8 <KeResolveCompatibilitySymbol(char*)+0x160>
c000f7e0:	b8 74 9d 02 c0       	mov    eax,0xc0029d74
c000f7e5:	eb 59                	jmp    c000f840 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c000f7e7:	90                   	nop
c000f7e8:	83 ec 08             	sub    esp,0x8
c000f7eb:	68 bf 21 02 c0       	push   0xc00221bf
c000f7f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f7f4:	e8 87 0f ff ff       	call   c0000780 <strcmp>
c000f7f9:	83 c4 10             	add    esp,0x10
c000f7fc:	85 c0                	test   eax,eax
c000f7fe:	0f 94 c0             	sete   al
c000f801:	0f b6 c0             	movzx  eax,al
c000f804:	85 c0                	test   eax,eax
c000f806:	74 08                	je     c000f810 <KeResolveCompatibilitySymbol(char*)+0x188>
c000f808:	b8 74 9d 02 c0       	mov    eax,0xc0029d74
c000f80d:	eb 31                	jmp    c000f840 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c000f80f:	90                   	nop
c000f810:	83 ec 08             	sub    esp,0x8
c000f813:	68 cc 21 02 c0       	push   0xc00221cc
c000f818:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f81c:	e8 5f 0f ff ff       	call   c0000780 <strcmp>
c000f821:	83 c4 10             	add    esp,0x10
c000f824:	85 c0                	test   eax,eax
c000f826:	0f 94 c0             	sete   al
c000f829:	0f b6 c0             	movzx  eax,al
c000f82c:	85 c0                	test   eax,eax
c000f82e:	74 08                	je     c000f838 <KeResolveCompatibilitySymbol(char*)+0x1b0>
c000f830:	b8 75 9d 02 c0       	mov    eax,0xc0029d75
c000f835:	eb 09                	jmp    c000f840 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c000f837:	90                   	nop
c000f838:	b8 00 00 00 00       	mov    eax,0x0
c000f83d:	8d 76 00             	lea    esi,[esi+0x0]
c000f840:	83 c4 0c             	add    esp,0xc
c000f843:	c3                   	ret    

c000f844 <Semaphore::Semaphore(int)>:
c000f844:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f848:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f84c:	89 10                	mov    DWORD PTR [eax],edx
c000f84e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f852:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c000f859:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f85d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000f864:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f868:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000f86f:	90                   	nop
c000f870:	c3                   	ret    
c000f871:	90                   	nop
c000f872:	66 90                	xchg   ax,ax

c000f874 <Semaphore::tryAcquire()>:
c000f874:	83 ec 0c             	sub    esp,0xc
c000f877:	fa                   	cli    
c000f878:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000f87d:	83 c0 01             	add    eax,0x1
c000f880:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c000f885:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c000f88a:	83 c0 01             	add    eax,0x1
c000f88d:	a3 ac c6 02 c0       	mov    ds:0xc002c6ac,eax
c000f892:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f896:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000f899:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f89d:	8b 00                	mov    eax,DWORD PTR [eax]
c000f89f:	39 c2                	cmp    edx,eax
c000f8a1:	7d 5d                	jge    c000f900 <Semaphore::tryAcquire()+0x8c>
c000f8a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f8a7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000f8aa:	8d 50 01             	lea    edx,[eax+0x1]
c000f8ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f8b1:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000f8b4:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c000f8b9:	83 e8 01             	sub    eax,0x1
c000f8bc:	a3 ac c6 02 c0       	mov    ds:0xc002c6ac,eax
c000f8c1:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c000f8c6:	85 c0                	test   eax,eax
c000f8c8:	75 1a                	jne    c000f8e4 <Semaphore::tryAcquire()+0x70>
c000f8ca:	a1 a8 c6 02 c0       	mov    eax,ds:0xc002c6a8
c000f8cf:	85 c0                	test   eax,eax
c000f8d1:	74 11                	je     c000f8e4 <Semaphore::tryAcquire()+0x70>
c000f8d3:	c7 05 a8 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6a8,0x0
c000f8dd:	e8 0e 5b 00 00       	call   c00153f0 <schedule()>
c000f8e2:	66 90                	xchg   ax,ax
c000f8e4:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000f8e9:	83 e8 01             	sub    eax,0x1
c000f8ec:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c000f8f1:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000f8f6:	85 c0                	test   eax,eax
c000f8f8:	75 02                	jne    c000f8fc <Semaphore::tryAcquire()+0x88>
c000f8fa:	fb                   	sti    
c000f8fb:	90                   	nop
c000f8fc:	b0 01                	mov    al,0x1
c000f8fe:	eb 4c                	jmp    c000f94c <Semaphore::tryAcquire()+0xd8>
c000f900:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c000f905:	83 e8 01             	sub    eax,0x1
c000f908:	a3 ac c6 02 c0       	mov    ds:0xc002c6ac,eax
c000f90d:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c000f912:	85 c0                	test   eax,eax
c000f914:	75 1a                	jne    c000f930 <Semaphore::tryAcquire()+0xbc>
c000f916:	a1 a8 c6 02 c0       	mov    eax,ds:0xc002c6a8
c000f91b:	85 c0                	test   eax,eax
c000f91d:	74 11                	je     c000f930 <Semaphore::tryAcquire()+0xbc>
c000f91f:	c7 05 a8 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6a8,0x0
c000f929:	e8 c2 5a 00 00       	call   c00153f0 <schedule()>
c000f92e:	66 90                	xchg   ax,ax
c000f930:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000f935:	83 e8 01             	sub    eax,0x1
c000f938:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c000f93d:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000f942:	85 c0                	test   eax,eax
c000f944:	75 02                	jne    c000f948 <Semaphore::tryAcquire()+0xd4>
c000f946:	fb                   	sti    
c000f947:	90                   	nop
c000f948:	b0 00                	mov    al,0x0
c000f94a:	66 90                	xchg   ax,ax
c000f94c:	83 c4 0c             	add    esp,0xc
c000f94f:	c3                   	ret    

c000f950 <Semaphore::assertLocked(char const*)>:
c000f950:	83 ec 0c             	sub    esp,0xc
c000f953:	fa                   	cli    
c000f954:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000f959:	83 c0 01             	add    eax,0x1
c000f95c:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c000f961:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c000f966:	83 c0 01             	add    eax,0x1
c000f969:	a3 ac c6 02 c0       	mov    ds:0xc002c6ac,eax
c000f96e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f972:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000f975:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f979:	8b 00                	mov    eax,DWORD PTR [eax]
c000f97b:	39 c2                	cmp    edx,eax
c000f97d:	7d 11                	jge    c000f990 <Semaphore::assertLocked(char const*)+0x40>
c000f97f:	83 ec 0c             	sub    esp,0xc
c000f982:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f986:	e8 9b f2 ff ff       	call   c000ec26 <KePanic(char const*)>
c000f98b:	83 c4 10             	add    esp,0x10
c000f98e:	66 90                	xchg   ax,ax
c000f990:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c000f995:	83 e8 01             	sub    eax,0x1
c000f998:	a3 ac c6 02 c0       	mov    ds:0xc002c6ac,eax
c000f99d:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c000f9a2:	85 c0                	test   eax,eax
c000f9a4:	75 1a                	jne    c000f9c0 <Semaphore::assertLocked(char const*)+0x70>
c000f9a6:	a1 a8 c6 02 c0       	mov    eax,ds:0xc002c6a8
c000f9ab:	85 c0                	test   eax,eax
c000f9ad:	74 11                	je     c000f9c0 <Semaphore::assertLocked(char const*)+0x70>
c000f9af:	c7 05 a8 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6a8,0x0
c000f9b9:	e8 32 5a 00 00       	call   c00153f0 <schedule()>
c000f9be:	66 90                	xchg   ax,ax
c000f9c0:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000f9c5:	83 e8 01             	sub    eax,0x1
c000f9c8:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c000f9cd:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000f9d2:	85 c0                	test   eax,eax
c000f9d4:	75 02                	jne    c000f9d8 <Semaphore::assertLocked(char const*)+0x88>
c000f9d6:	fb                   	sti    
c000f9d7:	90                   	nop
c000f9d8:	90                   	nop
c000f9d9:	83 c4 0c             	add    esp,0xc
c000f9dc:	c3                   	ret    
c000f9dd:	90                   	nop
c000f9de:	66 90                	xchg   ax,ax

c000f9e0 <Semaphore::acquire(int)>:
c000f9e0:	83 ec 1c             	sub    esp,0x1c
c000f9e3:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000f9e8:	0f 84 9a 00 00 00    	je     c000fa88 <Semaphore::acquire(int)+0xa8>
c000f9ee:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000f9f6:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c000f9fb:	90                   	nop
c000f9fc:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c000fa01:	85 c0                	test   eax,eax
c000fa03:	74 77                	je     c000fa7c <Semaphore::acquire(int)+0x9c>
c000fa05:	83 ec 0c             	sub    esp,0xc
c000fa08:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000fa0c:	e8 63 fe ff ff       	call   c000f874 <Semaphore::tryAcquire()>
c000fa11:	83 c4 10             	add    esp,0x10
c000fa14:	83 f0 01             	xor    eax,0x1
c000fa17:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000fa1b:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000fa1f:	83 f0 01             	xor    eax,0x1
c000fa22:	0f b6 c0             	movzx  eax,al
c000fa25:	85 c0                	test   eax,eax
c000fa27:	75 4f                	jne    c000fa78 <Semaphore::acquire(int)+0x98>
c000fa29:	83 7c 24 24 28       	cmp    DWORD PTR [esp+0x24],0x28
c000fa2e:	7f 2c                	jg     c000fa5c <Semaphore::acquire(int)+0x7c>
c000fa30:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000fa34:	89 d0                	mov    eax,edx
c000fa36:	c1 e0 02             	shl    eax,0x2
c000fa39:	01 d0                	add    eax,edx
c000fa3b:	d1 e0                	shl    eax,1
c000fa3d:	83 ec 0c             	sub    esp,0xc
c000fa40:	50                   	push   eax
c000fa41:	e8 82 5b 00 00       	call   c00155c8 <milliTenthSleep(unsigned int)>
c000fa46:	83 c4 10             	add    esp,0x10
c000fa49:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fa4d:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c000fa51:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c000fa59:	eb a1                	jmp    c000f9fc <Semaphore::acquire(int)+0x1c>
c000fa5b:	90                   	nop
c000fa5c:	83 ec 0c             	sub    esp,0xc
c000fa5f:	68 90 01 00 00       	push   0x190
c000fa64:	e8 5f 5b 00 00       	call   c00155c8 <milliTenthSleep(unsigned int)>
c000fa69:	83 c4 10             	add    esp,0x10
c000fa6c:	83 44 24 0c 28       	add    DWORD PTR [esp+0xc],0x28
c000fa71:	83 6c 24 24 28       	sub    DWORD PTR [esp+0x24],0x28
c000fa76:	eb 84                	jmp    c000f9fc <Semaphore::acquire(int)+0x1c>
c000fa78:	90                   	nop
c000fa79:	8d 76 00             	lea    esi,[esi+0x0]
c000fa7c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fa80:	e9 ff 00 00 00       	jmp    c000fb84 <Semaphore::acquire(int)+0x1a4>
c000fa85:	8d 76 00             	lea    esi,[esi+0x0]
c000fa88:	fa                   	cli    
c000fa89:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000fa8e:	83 c0 01             	add    eax,0x1
c000fa91:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c000fa96:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c000fa9b:	83 c0 01             	add    eax,0x1
c000fa9e:	a3 ac c6 02 c0       	mov    ds:0xc002c6ac,eax
c000faa3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000faa7:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000faaa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000faae:	8b 00                	mov    eax,DWORD PTR [eax]
c000fab0:	39 c2                	cmp    edx,eax
c000fab2:	7d 14                	jge    c000fac8 <Semaphore::acquire(int)+0xe8>
c000fab4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fab8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000fabb:	8d 50 01             	lea    edx,[eax+0x1]
c000fabe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fac2:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000fac5:	eb 6d                	jmp    c000fb34 <Semaphore::acquire(int)+0x154>
c000fac7:	90                   	nop
c000fac8:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000facd:	8b 00                	mov    eax,DWORD PTR [eax]
c000facf:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000fad6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fada:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fadd:	85 c0                	test   eax,eax
c000fadf:	75 13                	jne    c000faf4 <Semaphore::acquire(int)+0x114>
c000fae1:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000fae6:	8b 10                	mov    edx,DWORD PTR [eax]
c000fae8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000faec:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000faef:	eb 17                	jmp    c000fb08 <Semaphore::acquire(int)+0x128>
c000faf1:	8d 76 00             	lea    esi,[esi+0x0]
c000faf4:	ba 00 20 00 c2       	mov    edx,0xc2002000
c000faf9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fafd:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000fb00:	8b 12                	mov    edx,DWORD PTR [edx]
c000fb02:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000fb05:	8d 76 00             	lea    esi,[esi+0x0]
c000fb08:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000fb0d:	8b 10                	mov    edx,DWORD PTR [eax]
c000fb0f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb13:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000fb16:	83 ec 0c             	sub    esp,0xc
c000fb19:	68 dc 21 02 c0       	push   0xc00221dc
c000fb1e:	e8 2b 74 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000fb23:	83 c4 10             	add    esp,0x10
c000fb26:	83 ec 0c             	sub    esp,0xc
c000fb29:	6a 05                	push   0x5
c000fb2b:	e8 7c 59 00 00       	call   c00154ac <blockTask(TaskState)>
c000fb30:	83 c4 10             	add    esp,0x10
c000fb33:	90                   	nop
c000fb34:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c000fb39:	83 e8 01             	sub    eax,0x1
c000fb3c:	a3 ac c6 02 c0       	mov    ds:0xc002c6ac,eax
c000fb41:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c000fb46:	85 c0                	test   eax,eax
c000fb48:	75 1a                	jne    c000fb64 <Semaphore::acquire(int)+0x184>
c000fb4a:	a1 a8 c6 02 c0       	mov    eax,ds:0xc002c6a8
c000fb4f:	85 c0                	test   eax,eax
c000fb51:	74 11                	je     c000fb64 <Semaphore::acquire(int)+0x184>
c000fb53:	c7 05 a8 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6a8,0x0
c000fb5d:	e8 8e 58 00 00       	call   c00153f0 <schedule()>
c000fb62:	66 90                	xchg   ax,ax
c000fb64:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000fb69:	83 e8 01             	sub    eax,0x1
c000fb6c:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c000fb71:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000fb76:	85 c0                	test   eax,eax
c000fb78:	75 02                	jne    c000fb7c <Semaphore::acquire(int)+0x19c>
c000fb7a:	fb                   	sti    
c000fb7b:	90                   	nop
c000fb7c:	b8 00 00 00 00       	mov    eax,0x0
c000fb81:	8d 76 00             	lea    esi,[esi+0x0]
c000fb84:	83 c4 1c             	add    esp,0x1c
c000fb87:	c3                   	ret    

c000fb88 <Semaphore::acquire()>:
c000fb88:	83 ec 0c             	sub    esp,0xc
c000fb8b:	83 ec 08             	sub    esp,0x8
c000fb8e:	6a 00                	push   0x0
c000fb90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fb94:	e8 47 fe ff ff       	call   c000f9e0 <Semaphore::acquire(int)>
c000fb99:	83 c4 10             	add    esp,0x10
c000fb9c:	90                   	nop
c000fb9d:	83 c4 0c             	add    esp,0xc
c000fba0:	c3                   	ret    
c000fba1:	90                   	nop
c000fba2:	66 90                	xchg   ax,ax

c000fba4 <Semaphore::release()>:
c000fba4:	83 ec 1c             	sub    esp,0x1c
c000fba7:	fa                   	cli    
c000fba8:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000fbad:	83 c0 01             	add    eax,0x1
c000fbb0:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c000fbb5:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c000fbba:	83 c0 01             	add    eax,0x1
c000fbbd:	a3 ac c6 02 c0       	mov    ds:0xc002c6ac,eax
c000fbc2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fbc6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fbc9:	85 c0                	test   eax,eax
c000fbcb:	74 2b                	je     c000fbf8 <Semaphore::release()+0x54>
c000fbcd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fbd1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fbd4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fbd8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fbdc:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c000fbdf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fbe3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000fbe6:	83 ec 0c             	sub    esp,0xc
c000fbe9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fbed:	e8 ea 5a 00 00       	call   c00156dc <unblockTask(ThreadControlBlock*)>
c000fbf2:	83 c4 10             	add    esp,0x10
c000fbf5:	eb 15                	jmp    c000fc0c <Semaphore::release()+0x68>
c000fbf7:	90                   	nop
c000fbf8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fbfc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000fbff:	8d 50 ff             	lea    edx,[eax-0x1]
c000fc02:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fc06:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000fc09:	8d 76 00             	lea    esi,[esi+0x0]
c000fc0c:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c000fc11:	83 e8 01             	sub    eax,0x1
c000fc14:	a3 ac c6 02 c0       	mov    ds:0xc002c6ac,eax
c000fc19:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c000fc1e:	85 c0                	test   eax,eax
c000fc20:	75 1a                	jne    c000fc3c <Semaphore::release()+0x98>
c000fc22:	a1 a8 c6 02 c0       	mov    eax,ds:0xc002c6a8
c000fc27:	85 c0                	test   eax,eax
c000fc29:	74 11                	je     c000fc3c <Semaphore::release()+0x98>
c000fc2b:	c7 05 a8 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6a8,0x0
c000fc35:	e8 b6 57 00 00       	call   c00153f0 <schedule()>
c000fc3a:	66 90                	xchg   ax,ax
c000fc3c:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000fc41:	83 e8 01             	sub    eax,0x1
c000fc44:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c000fc49:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000fc4e:	85 c0                	test   eax,eax
c000fc50:	75 02                	jne    c000fc54 <Semaphore::release()+0xb0>
c000fc52:	fb                   	sti    
c000fc53:	90                   	nop
c000fc54:	90                   	nop
c000fc55:	83 c4 1c             	add    esp,0x1c
c000fc58:	c3                   	ret    

c000fc59 <KiSigKill(int)>:
c000fc59:	83 ec 0c             	sub    esp,0xc
c000fc5c:	6a 00                	push   0x0
c000fc5e:	6a 00                	push   0x0
c000fc60:	6a ff                	push   0xffffffff
c000fc62:	6a 01                	push   0x1
c000fc64:	e8 e9 53 01 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c000fc69:	83 c4 1c             	add    esp,0x1c
c000fc6c:	c3                   	ret    

c000fc6d <KiDefaultSignalHandlerIgnore(int)>:
c000fc6d:	c3                   	ret    

c000fc6e <KiDefaultSignalHandlerPause(int)>:
c000fc6e:	57                   	push   edi
c000fc6f:	b9 07 00 00 00       	mov    ecx,0x7
c000fc74:	56                   	push   esi
c000fc75:	be 37 22 02 c0       	mov    esi,0xc0022237
c000fc7a:	83 ec 24             	sub    esp,0x24
c000fc7d:	8d 7c 24 04          	lea    edi,[esp+0x4]
c000fc81:	fc                   	cld    
c000fc82:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000fc84:	8d 44 24 04          	lea    eax,[esp+0x4]
c000fc88:	50                   	push   eax
c000fc89:	6a 00                	push   0x0
c000fc8b:	6a 00                	push   0x0
c000fc8d:	6a 27                	push   0x27
c000fc8f:	e8 be 53 01 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c000fc94:	83 c4 34             	add    esp,0x34
c000fc97:	5e                   	pop    esi
c000fc98:	5f                   	pop    edi
c000fc99:	c3                   	ret    

c000fc9a <KiDefaultSignalHandlerResume(int)>:
c000fc9a:	57                   	push   edi
c000fc9b:	b9 1d 00 00 00       	mov    ecx,0x1d
c000fca0:	56                   	push   esi
c000fca1:	be 53 22 02 c0       	mov    esi,0xc0022253
c000fca6:	83 ec 24             	sub    esp,0x24
c000fca9:	8d 7c 24 03          	lea    edi,[esp+0x3]
c000fcad:	fc                   	cld    
c000fcae:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fcb0:	8d 44 24 03          	lea    eax,[esp+0x3]
c000fcb4:	50                   	push   eax
c000fcb5:	6a 00                	push   0x0
c000fcb7:	6a 00                	push   0x0
c000fcb9:	6a 27                	push   0x27
c000fcbb:	e8 92 53 01 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c000fcc0:	83 c4 34             	add    esp,0x34
c000fcc3:	5e                   	pop    esi
c000fcc4:	5f                   	pop    edi
c000fcc5:	c3                   	ret    

c000fcc6 <KeDeinitSignals(SigHandlerBlock*)>:
c000fcc6:	e9 15 ec ff ff       	jmp    c000e8e0 <free>

c000fccb <KeInitSignals()>:
c000fccb:	53                   	push   ebx
c000fccc:	83 ec 14             	sub    esp,0x14
c000fccf:	68 c8 00 00 00       	push   0xc8
c000fcd4:	e8 f7 eb ff ff       	call   c000e8d0 <malloc>
c000fcd9:	83 c4 0c             	add    esp,0xc
c000fcdc:	c7 80 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xbc],0x0
c000fce6:	89 c3                	mov    ebx,eax
c000fce8:	c7 80 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc0],0x0
c000fcf2:	8d 80 9c 00 00 00    	lea    eax,[eax+0x9c]
c000fcf8:	c6 40 28 00          	mov    BYTE PTR [eax+0x28],0x0
c000fcfc:	6a 20                	push   0x20
c000fcfe:	6a 00                	push   0x0
c000fd00:	50                   	push   eax
c000fd01:	e8 ea 07 ff ff       	call   c00004f0 <memset>
c000fd06:	83 c4 0c             	add    esp,0xc
c000fd09:	6a 44                	push   0x44
c000fd0b:	6a 00                	push   0x0
c000fd0d:	53                   	push   ebx
c000fd0e:	e8 dd 07 ff ff       	call   c00004f0 <memset>
c000fd13:	83 c4 18             	add    esp,0x18
c000fd16:	89 d8                	mov    eax,ebx
c000fd18:	5b                   	pop    ebx
c000fd19:	c3                   	ret    

c000fd1a <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c000fd1a:	53                   	push   ebx
c000fd1b:	b8 01 00 00 00       	mov    eax,0x1
c000fd20:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fd24:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fd28:	83 f9 10             	cmp    ecx,0x10
c000fd2b:	7f 21                	jg     c000fd4e <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c000fd2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fd31:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c000fd34:	89 03                	mov    DWORD PTR [ebx],eax
c000fd36:	b8 01 00 00 00       	mov    eax,0x1
c000fd3b:	d3 e0                	shl    eax,cl
c000fd3d:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000fd41:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c000fd44:	31 c0                	xor    eax,eax
c000fd46:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c000fd4e:	5b                   	pop    ebx
c000fd4f:	c3                   	ret    

c000fd50 <KeRaiseSignal(SigHandlerBlock*, int)>:
c000fd50:	55                   	push   ebp
c000fd51:	57                   	push   edi
c000fd52:	bf 08 00 00 00       	mov    edi,0x8
c000fd57:	56                   	push   esi
c000fd58:	53                   	push   ebx
c000fd59:	83 ec 18             	sub    esp,0x18
c000fd5c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000fd60:	68 70 22 02 c0       	push   0xc0022270
c000fd65:	e8 e4 71 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000fd6a:	83 c4 10             	add    esp,0x10
c000fd6d:	31 c9                	xor    ecx,ecx
c000fd6f:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c000fd76:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c000fd7c:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c000fd80:	99                   	cdq    
c000fd81:	f7 ff                	idiv   edi
c000fd83:	8d 42 24             	lea    eax,[edx+0x24]
c000fd86:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c000fd8a:	85 f6                	test   esi,esi
c000fd8c:	75 1a                	jne    c000fda8 <KeRaiseSignal(SigHandlerBlock*, int)+0x58>
c000fd8e:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000fd92:	89 4c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],ecx
c000fd96:	50                   	push   eax
c000fd97:	50                   	push   eax
c000fd98:	52                   	push   edx
c000fd99:	68 81 22 02 c0       	push   0xc0022281
c000fd9e:	e8 ab 71 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000fda3:	83 c4 10             	add    esp,0x10
c000fda6:	eb 1b                	jmp    c000fdc3 <KeRaiseSignal(SigHandlerBlock*, int)+0x73>
c000fda8:	41                   	inc    ecx
c000fda9:	83 f9 08             	cmp    ecx,0x8
c000fdac:	75 ce                	jne    c000fd7c <KeRaiseSignal(SigHandlerBlock*, int)+0x2c>
c000fdae:	83 ec 0c             	sub    esp,0xc
c000fdb1:	be 01 00 00 00       	mov    esi,0x1
c000fdb6:	68 a2 22 02 c0       	push   0xc00222a2
c000fdbb:	e8 8e 71 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000fdc0:	83 c4 10             	add    esp,0x10
c000fdc3:	83 c4 0c             	add    esp,0xc
c000fdc6:	89 f0                	mov    eax,esi
c000fdc8:	5b                   	pop    ebx
c000fdc9:	5e                   	pop    esi
c000fdca:	5f                   	pop    edi
c000fdcb:	5d                   	pop    ebp
c000fdcc:	c3                   	ret    

c000fdcd <KeCheckSignal(SigHandlerBlock*, int*)>:
c000fdcd:	55                   	push   ebp
c000fdce:	57                   	push   edi
c000fdcf:	56                   	push   esi
c000fdd0:	53                   	push   ebx
c000fdd1:	51                   	push   ecx
c000fdd2:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000fdd6:	85 db                	test   ebx,ebx
c000fdd8:	0f 84 bc 00 00 00    	je     c000fe9a <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c000fdde:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c000fde5:	0f 84 af 00 00 00    	je     c000fe9a <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c000fdeb:	31 c9                	xor    ecx,ecx
c000fded:	bf 08 00 00 00       	mov    edi,0x8
c000fdf2:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c000fdf8:	8d 04 0e             	lea    eax,[esi+ecx*1]
c000fdfb:	99                   	cdq    
c000fdfc:	f7 ff                	idiv   edi
c000fdfe:	8b ac 93 9c 00 00 00 	mov    ebp,DWORD PTR [ebx+edx*4+0x9c]
c000fe05:	85 ed                	test   ebp,ebp
c000fe07:	0f 84 9e 00 00 00    	je     c000feab <KeCheckSignal(SigHandlerBlock*, int*)+0xde>
c000fe0d:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c000fe13:	89 e9                	mov    ecx,ebp
c000fe15:	bf 01 00 00 00       	mov    edi,0x1
c000fe1a:	d3 e7                	shl    edi,cl
c000fe1c:	31 c9                	xor    ecx,ecx
c000fe1e:	89 04 24             	mov    DWORD PTR [esp],eax
c000fe21:	b8 01 00 00 00       	mov    eax,0x1
c000fe26:	d3 e0                	shl    eax,cl
c000fe28:	85 04 24             	test   DWORD PTR [esp],eax
c000fe2b:	74 06                	je     c000fe33 <KeCheckSignal(SigHandlerBlock*, int*)+0x66>
c000fe2d:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c000fe31:	75 67                	jne    c000fe9a <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c000fe33:	41                   	inc    ecx
c000fe34:	83 f9 11             	cmp    ecx,0x11
c000fe37:	75 e8                	jne    c000fe21 <KeCheckSignal(SigHandlerBlock*, int*)+0x54>
c000fe39:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000fe3c:	46                   	inc    esi
c000fe3d:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c000fe43:	c7 84 93 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+edx*4+0x9c],0x0
c000fe4e:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c000fe55:	09 f8                	or     eax,edi
c000fe57:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c000fe5d:	31 c0                	xor    eax,eax
c000fe5f:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c000fe67:	74 09                	je     c000fe72 <KeCheckSignal(SigHandlerBlock*, int*)+0xa5>
c000fe69:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c000fe70:	eb 06                	jmp    c000fe78 <KeCheckSignal(SigHandlerBlock*, int*)+0xab>
c000fe72:	40                   	inc    eax
c000fe73:	83 f8 08             	cmp    eax,0x8
c000fe76:	75 e7                	jne    c000fe5f <KeCheckSignal(SigHandlerBlock*, int*)+0x92>
c000fe78:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000fe7c:	83 fd 09             	cmp    ebp,0x9
c000fe7f:	8b 04 ab             	mov    eax,DWORD PTR [ebx+ebp*4]
c000fe82:	89 2a                	mov    DWORD PTR [edx],ebp
c000fe84:	75 07                	jne    c000fe8d <KeCheckSignal(SigHandlerBlock*, int*)+0xc0>
c000fe86:	b8 59 fc 00 c0       	mov    eax,0xc000fc59
c000fe8b:	eb 31                	jmp    c000febe <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c000fe8d:	83 f8 01             	cmp    eax,0x1
c000fe90:	75 0c                	jne    c000fe9e <KeCheckSignal(SigHandlerBlock*, int*)+0xd1>
c000fe92:	f7 d7                	not    edi
c000fe94:	21 bb c0 00 00 00    	and    DWORD PTR [ebx+0xc0],edi
c000fe9a:	31 c0                	xor    eax,eax
c000fe9c:	eb 20                	jmp    c000febe <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c000fe9e:	85 c0                	test   eax,eax
c000fea0:	75 1c                	jne    c000febe <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c000fea2:	8b 04 ad 00 40 02 c0 	mov    eax,DWORD PTR [ebp*4-0x3ffdc000]
c000fea9:	eb 13                	jmp    c000febe <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c000feab:	41                   	inc    ecx
c000feac:	46                   	inc    esi
c000fead:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c000feb3:	83 f9 08             	cmp    ecx,0x8
c000feb6:	0f 85 36 ff ff ff    	jne    c000fdf2 <KeCheckSignal(SigHandlerBlock*, int*)+0x25>
c000febc:	eb dc                	jmp    c000fe9a <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c000febe:	5a                   	pop    edx
c000febf:	5b                   	pop    ebx
c000fec0:	5e                   	pop    esi
c000fec1:	5f                   	pop    edi
c000fec2:	5d                   	pop    ebp
c000fec3:	c3                   	ret    

c000fec4 <KiCheckSignalZ>:
c000fec4:	83 ec 10             	sub    esp,0x10
c000fec7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000fecb:	50                   	push   eax
c000fecc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000fed1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000fed4:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c000feda:	e8 ee fe ff ff       	call   c000fdcd <KeCheckSignal(SigHandlerBlock*, int*)>
c000fedf:	5a                   	pop    edx
c000fee0:	31 d2                	xor    edx,edx
c000fee2:	59                   	pop    ecx
c000fee3:	85 c0                	test   eax,eax
c000fee5:	74 19                	je     c000ff00 <KiCheckSignalZ+0x3c>
c000fee7:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000feed:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000fef0:	89 02                	mov    DWORD PTR [edx],eax
c000fef2:	c7 42 04 00 00 00 00 	mov    DWORD PTR [edx+0x4],0x0
c000fef9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fefd:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c000ff00:	89 d0                	mov    eax,edx
c000ff02:	83 c4 10             	add    esp,0x10
c000ff05:	c3                   	ret    

c000ff06 <KeCompleteSignal(SigHandlerBlock*, int)>:
c000ff06:	56                   	push   esi
c000ff07:	53                   	push   ebx
c000ff08:	bb 01 00 00 00       	mov    ebx,0x1
c000ff0d:	52                   	push   edx
c000ff0e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ff12:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ff16:	d3 e3                	shl    ebx,cl
c000ff18:	83 f9 10             	cmp    ecx,0x10
c000ff1b:	7f 08                	jg     c000ff25 <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c000ff1d:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c000ff23:	75 10                	jne    c000ff35 <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c000ff25:	83 ec 0c             	sub    esp,0xc
c000ff28:	68 b3 22 02 c0       	push   0xc00222b3
c000ff2d:	e8 f4 ec ff ff       	call   c000ec26 <KePanic(char const*)>
c000ff32:	83 c4 10             	add    esp,0x10
c000ff35:	f7 d3                	not    ebx
c000ff37:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c000ff3d:	58                   	pop    eax
c000ff3e:	5b                   	pop    ebx
c000ff3f:	5e                   	pop    esi
c000ff40:	c3                   	ret    

c000ff41 <KiFinishSignalZ>:
c000ff41:	53                   	push   ebx
c000ff42:	83 ec 10             	sub    esp,0x10
c000ff45:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ff49:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c000ff4c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ff51:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000ff54:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c000ff5a:	e8 a7 ff ff ff       	call   c000ff06 <KeCompleteSignal(SigHandlerBlock*, int)>
c000ff5f:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000ff65:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000ff6c:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000ff73:	83 c4 18             	add    esp,0x18
c000ff76:	5b                   	pop    ebx
c000ff77:	c3                   	ret    

c000ff78 <SysSeekDir(regs*)>:
c000ff78:	31 c0                	xor    eax,eax
c000ff7a:	31 d2                	xor    edx,edx
c000ff7c:	c3                   	ret    

c000ff7d <SysTellDir(regs*)>:
c000ff7d:	31 c0                	xor    eax,eax
c000ff7f:	31 d2                	xor    edx,edx
c000ff81:	c3                   	ret    

c000ff82 <SysVerify(regs*)>:
c000ff82:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ff86:	31 d2                	xor    edx,edx
c000ff88:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000ff8b:	c3                   	ret    

c000ff8c <SysGetArgc(regs*)>:
c000ff8c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ff91:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000ff94:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c000ff9a:	89 c2                	mov    edx,eax
c000ff9c:	c1 fa 1f             	sar    edx,0x1f
c000ff9f:	c3                   	ret    

c000ffa0 <SysTTYName(regs*)>:
c000ffa0:	b8 01 00 00 00       	mov    eax,0x1
c000ffa5:	31 d2                	xor    edx,edx
c000ffa7:	c3                   	ret    

c000ffa8 <SysFormatDisk(regs*)>:
c000ffa8:	56                   	push   esi
c000ffa9:	53                   	push   ebx
c000ffaa:	83 ec 04             	sub    esp,0x4
c000ffad:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ffb1:	8b 1d 04 93 02 c0    	mov    ebx,DWORD PTR ds:0xc0029304
c000ffb7:	eb 2a                	jmp    c000ffe3 <SysFormatDisk(regs*)+0x3b>
c000ffb9:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c000ffbc:	83 ec 0c             	sub    esp,0xc
c000ffbf:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c000ffc2:	8b 13                	mov    edx,DWORD PTR [ebx]
c000ffc4:	51                   	push   ecx
c000ffc5:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c000ffc8:	51                   	push   ecx
c000ffc9:	50                   	push   eax
c000ffca:	8b 04 85 80 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6880]
c000ffd1:	50                   	push   eax
c000ffd2:	53                   	push   ebx
c000ffd3:	ff 52 4c             	call   DWORD PTR [edx+0x4c]
c000ffd6:	83 c4 20             	add    esp,0x20
c000ffd9:	83 f8 08             	cmp    eax,0x8
c000ffdc:	89 c1                	mov    ecx,eax
c000ffde:	75 14                	jne    c000fff4 <SysFormatDisk(regs*)+0x4c>
c000ffe0:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000ffe3:	85 db                	test   ebx,ebx
c000ffe5:	75 d2                	jne    c000ffb9 <SysFormatDisk(regs*)+0x11>
c000ffe7:	b8 03 00 00 00       	mov    eax,0x3
c000ffec:	31 d2                	xor    edx,edx
c000ffee:	83 c4 04             	add    esp,0x4
c000fff1:	5b                   	pop    ebx
c000fff2:	5e                   	pop    esi
c000fff3:	c3                   	ret    
c000fff4:	85 c0                	test   eax,eax
c000fff6:	74 13                	je     c001000b <SysFormatDisk(regs*)+0x63>
c000fff8:	31 d2                	xor    edx,edx
c000fffa:	83 f9 09             	cmp    ecx,0x9
c000fffd:	b8 01 00 00 00       	mov    eax,0x1
c0010002:	74 ea                	je     c000ffee <SysFormatDisk(regs*)+0x46>
c0010004:	b8 02 00 00 00       	mov    eax,0x2
c0010009:	eb e1                	jmp    c000ffec <SysFormatDisk(regs*)+0x44>
c001000b:	31 c0                	xor    eax,eax
c001000d:	eb dd                	jmp    c000ffec <SysFormatDisk(regs*)+0x44>

c001000f <SysSetDiskVolumeLabel(regs*)>:
c001000f:	56                   	push   esi
c0010010:	53                   	push   ebx
c0010011:	83 ec 04             	sub    esp,0x4
c0010014:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010018:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001001b:	83 f8 19             	cmp    eax,0x19
c001001e:	77 33                	ja     c0010053 <SysSetDiskVolumeLabel(regs*)+0x44>
c0010020:	8b 0c 85 80 97 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd6880]
c0010027:	85 c9                	test   ecx,ecx
c0010029:	74 28                	je     c0010053 <SysSetDiskVolumeLabel(regs*)+0x44>
c001002b:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c001002e:	85 db                	test   ebx,ebx
c0010030:	74 21                	je     c0010053 <SysSetDiskVolumeLabel(regs*)+0x44>
c0010032:	8b 91 74 01 00 00    	mov    edx,DWORD PTR [ecx+0x174]
c0010038:	85 d2                	test   edx,edx
c001003a:	74 17                	je     c0010053 <SysSetDiskVolumeLabel(regs*)+0x44>
c001003c:	8b 32                	mov    esi,DWORD PTR [edx]
c001003e:	53                   	push   ebx
c001003f:	50                   	push   eax
c0010040:	51                   	push   ecx
c0010041:	52                   	push   edx
c0010042:	ff 56 5c             	call   DWORD PTR [esi+0x5c]
c0010045:	83 c4 10             	add    esp,0x10
c0010048:	83 c4 04             	add    esp,0x4
c001004b:	5b                   	pop    ebx
c001004c:	5e                   	pop    esi
c001004d:	89 c2                	mov    edx,eax
c001004f:	c1 fa 1f             	sar    edx,0x1f
c0010052:	c3                   	ret    
c0010053:	83 c4 04             	add    esp,0x4
c0010056:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001005b:	5b                   	pop    ebx
c001005c:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010061:	5e                   	pop    esi
c0010062:	c3                   	ret    

c0010063 <SysGetDiskVolumeLabel(regs*)>:
c0010063:	57                   	push   edi
c0010064:	56                   	push   esi
c0010065:	53                   	push   ebx
c0010066:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001006a:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001006d:	83 fa 19             	cmp    edx,0x19
c0010070:	77 3c                	ja     c00100ae <SysGetDiskVolumeLabel(regs*)+0x4b>
c0010072:	8b 0c 95 80 97 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd6880]
c0010079:	85 c9                	test   ecx,ecx
c001007b:	74 31                	je     c00100ae <SysGetDiskVolumeLabel(regs*)+0x4b>
c001007d:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0010080:	85 db                	test   ebx,ebx
c0010082:	74 2a                	je     c00100ae <SysGetDiskVolumeLabel(regs*)+0x4b>
c0010084:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0010087:	85 f6                	test   esi,esi
c0010089:	74 23                	je     c00100ae <SysGetDiskVolumeLabel(regs*)+0x4b>
c001008b:	8b 81 74 01 00 00    	mov    eax,DWORD PTR [ecx+0x174]
c0010091:	85 c0                	test   eax,eax
c0010093:	74 19                	je     c00100ae <SysGetDiskVolumeLabel(regs*)+0x4b>
c0010095:	83 ec 0c             	sub    esp,0xc
c0010098:	8b 38                	mov    edi,DWORD PTR [eax]
c001009a:	56                   	push   esi
c001009b:	53                   	push   ebx
c001009c:	52                   	push   edx
c001009d:	51                   	push   ecx
c001009e:	50                   	push   eax
c001009f:	ff 57 58             	call   DWORD PTR [edi+0x58]
c00100a2:	83 c4 20             	add    esp,0x20
c00100a5:	5b                   	pop    ebx
c00100a6:	5e                   	pop    esi
c00100a7:	89 c2                	mov    edx,eax
c00100a9:	c1 fa 1f             	sar    edx,0x1f
c00100ac:	5f                   	pop    edi
c00100ad:	c3                   	ret    
c00100ae:	5b                   	pop    ebx
c00100af:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00100b4:	ba ff ff ff ff       	mov    edx,0xffffffff
c00100b9:	5e                   	pop    esi
c00100ba:	5f                   	pop    edi
c00100bb:	c3                   	ret    

c00100bc <SysShutdown(regs*)>:
c00100bc:	57                   	push   edi
c00100bd:	56                   	push   esi
c00100be:	83 ec 04             	sub    esp,0x4
c00100c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00100c5:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00100c8:	85 c0                	test   eax,eax
c00100ca:	74 1e                	je     c00100ea <SysShutdown(regs*)+0x2e>
c00100cc:	83 f8 01             	cmp    eax,0x1
c00100cf:	74 5f                	je     c0010130 <SysShutdown(regs*)+0x74>
c00100d1:	83 f8 02             	cmp    eax,0x2
c00100d4:	be ff ff ff ff       	mov    esi,0xffffffff
c00100d9:	bf ff ff ff ff       	mov    edi,0xffffffff
c00100de:	74 32                	je     c0010112 <SysShutdown(regs*)+0x56>
c00100e0:	83 c4 04             	add    esp,0x4
c00100e3:	89 f0                	mov    eax,esi
c00100e5:	5e                   	pop    esi
c00100e6:	89 fa                	mov    edx,edi
c00100e8:	5f                   	pop    edi
c00100e9:	c3                   	ret    
c00100ea:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c00100ef:	be ff ff ff ff       	mov    esi,0xffffffff
c00100f4:	bf ff ff ff ff       	mov    edi,0xffffffff
c00100f9:	8b 10                	mov    edx,DWORD PTR [eax]
c00100fb:	6a 00                	push   0x0
c00100fd:	6a 00                	push   0x0
c00100ff:	6a 00                	push   0x0
c0010101:	50                   	push   eax
c0010102:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0010105:	83 c4 10             	add    esp,0x10
c0010108:	89 f0                	mov    eax,esi
c001010a:	83 c4 04             	add    esp,0x4
c001010d:	89 fa                	mov    edx,edi
c001010f:	5e                   	pop    esi
c0010110:	5f                   	pop    edi
c0010111:	c3                   	ret    
c0010112:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c0010117:	8b 10                	mov    edx,DWORD PTR [eax]
c0010119:	6a 00                	push   0x0
c001011b:	6a 00                	push   0x0
c001011d:	6a 01                	push   0x1
c001011f:	50                   	push   eax
c0010120:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0010123:	83 c4 10             	add    esp,0x10
c0010126:	89 f0                	mov    eax,esi
c0010128:	83 c4 04             	add    esp,0x4
c001012b:	89 fa                	mov    edx,edi
c001012d:	5e                   	pop    esi
c001012e:	5f                   	pop    edi
c001012f:	c3                   	ret    
c0010130:	a1 64 9d 02 c0       	mov    eax,ds:0xc0029d64
c0010135:	85 c0                	test   eax,eax
c0010137:	74 02                	je     c001013b <SysShutdown(regs*)+0x7f>
c0010139:	ff d0                	call   eax
c001013b:	31 f6                	xor    esi,esi
c001013d:	83 c4 04             	add    esp,0x4
c0010140:	89 f0                	mov    eax,esi
c0010142:	31 ff                	xor    edi,edi
c0010144:	5e                   	pop    esi
c0010145:	89 fa                	mov    edx,edi
c0010147:	5f                   	pop    edi
c0010148:	c3                   	ret    

c0010149 <SysRealpath(regs*)>:
c0010149:	53                   	push   ebx
c001014a:	83 ec 08             	sub    esp,0x8
c001014d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010151:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0010154:	85 c9                	test   ecx,ecx
c0010156:	74 36                	je     c001018e <SysRealpath(regs*)+0x45>
c0010158:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001015b:	31 d2                	xor    edx,edx
c001015d:	b8 01 00 00 00       	mov    eax,0x1
c0010162:	85 db                	test   ebx,ebx
c0010164:	75 05                	jne    c001016b <SysRealpath(regs*)+0x22>
c0010166:	83 c4 08             	add    esp,0x8
c0010169:	5b                   	pop    ebx
c001016a:	c3                   	ret    
c001016b:	6a 00                	push   0x0
c001016d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010172:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010175:	05 0c 01 00 00       	add    eax,0x10c
c001017a:	50                   	push   eax
c001017b:	51                   	push   ecx
c001017c:	53                   	push   ebx
c001017d:	e8 7e 7c ff ff       	call   c0007e00 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0010182:	83 c4 10             	add    esp,0x10
c0010185:	31 c0                	xor    eax,eax
c0010187:	31 d2                	xor    edx,edx
c0010189:	83 c4 08             	add    esp,0x8
c001018c:	5b                   	pop    ebx
c001018d:	c3                   	ret    
c001018e:	b8 01 00 00 00       	mov    eax,0x1
c0010193:	31 d2                	xor    edx,edx
c0010195:	eb f2                	jmp    c0010189 <SysRealpath(regs*)+0x40>

c0010197 <SysReadDir(regs*)>:
c0010197:	53                   	push   ebx
c0010198:	83 ec 18             	sub    esp,0x18
c001019b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001019f:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00101a2:	83 f8 02             	cmp    eax,0x2
c00101a5:	76 4f                	jbe    c00101f6 <SysReadDir(regs*)+0x5f>
c00101a7:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c00101ae:	77 52                	ja     c0010202 <SysReadDir(regs*)+0x6b>
c00101b0:	83 ec 0c             	sub    esp,0xc
c00101b3:	50                   	push   eax
c00101b4:	e8 78 1c 00 00       	call   c0011e31 <KeGetFileFromDescriptor(int)>
c00101b9:	83 c4 10             	add    esp,0x10
c00101bc:	85 c0                	test   eax,eax
c00101be:	74 42                	je     c0010202 <SysReadDir(regs*)+0x6b>
c00101c0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00101c8:	83 ec 0c             	sub    esp,0xc
c00101cb:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c00101cf:	8b 10                	mov    edx,DWORD PTR [eax]
c00101d1:	51                   	push   ecx
c00101d2:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c00101d5:	51                   	push   ecx
c00101d6:	6a 00                	push   0x0
c00101d8:	68 10 01 00 00       	push   0x110
c00101dd:	50                   	push   eax
c00101de:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00101e1:	83 c4 20             	add    esp,0x20
c00101e4:	85 c0                	test   eax,eax
c00101e6:	89 c1                	mov    ecx,eax
c00101e8:	74 27                	je     c0010211 <SysReadDir(regs*)+0x7a>
c00101ea:	31 d2                	xor    edx,edx
c00101ec:	83 f9 07             	cmp    ecx,0x7
c00101ef:	b8 02 00 00 00       	mov    eax,0x2
c00101f4:	75 16                	jne    c001020c <SysReadDir(regs*)+0x75>
c00101f6:	b8 01 00 00 00       	mov    eax,0x1
c00101fb:	31 d2                	xor    edx,edx
c00101fd:	83 c4 18             	add    esp,0x18
c0010200:	5b                   	pop    ebx
c0010201:	c3                   	ret    
c0010202:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010207:	ba ff ff ff ff       	mov    edx,0xffffffff
c001020c:	83 c4 18             	add    esp,0x18
c001020f:	5b                   	pop    ebx
c0010210:	c3                   	ret    
c0010211:	31 c0                	xor    eax,eax
c0010213:	31 d2                	xor    edx,edx
c0010215:	eb e6                	jmp    c00101fd <SysReadDir(regs*)+0x66>

c0010217 <SysIsATTY(regs*)>:
c0010217:	83 ec 0c             	sub    esp,0xc
c001021a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001021e:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010221:	83 f8 02             	cmp    eax,0x2
c0010224:	76 07                	jbe    c001022d <SysIsATTY(regs*)+0x16>
c0010226:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001022b:	75 26                	jne    c0010253 <SysIsATTY(regs*)+0x3c>
c001022d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010232:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010235:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001023b:	85 c0                	test   eax,eax
c001023d:	74 24                	je     c0010263 <SysIsATTY(regs*)+0x4c>
c001023f:	8b 10                	mov    edx,DWORD PTR [eax]
c0010241:	83 ec 0c             	sub    esp,0xc
c0010244:	50                   	push   eax
c0010245:	ff 12                	call   DWORD PTR [edx]
c0010247:	83 c4 10             	add    esp,0x10
c001024a:	31 d2                	xor    edx,edx
c001024c:	83 c4 0c             	add    esp,0xc
c001024f:	0f b6 c0             	movzx  eax,al
c0010252:	c3                   	ret    
c0010253:	83 ec 0c             	sub    esp,0xc
c0010256:	50                   	push   eax
c0010257:	e8 d5 1b 00 00       	call   c0011e31 <KeGetFileFromDescriptor(int)>
c001025c:	83 c4 10             	add    esp,0x10
c001025f:	85 c0                	test   eax,eax
c0010261:	75 dc                	jne    c001023f <SysIsATTY(regs*)+0x28>
c0010263:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010268:	ba ff ff ff ff       	mov    edx,0xffffffff
c001026d:	83 c4 0c             	add    esp,0xc
c0010270:	c3                   	ret    

c0010271 <SysSeek(regs*)>:
c0010271:	56                   	push   esi
c0010272:	53                   	push   ebx
c0010273:	83 ec 04             	sub    esp,0x4
c0010276:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001027a:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001027d:	8d 71 fd             	lea    esi,[ecx-0x3]
c0010280:	81 fe fd fe ff 0f    	cmp    esi,0xffffefd
c0010286:	77 33                	ja     c00102bb <SysSeek(regs*)+0x4a>
c0010288:	83 ec 0c             	sub    esp,0xc
c001028b:	51                   	push   ecx
c001028c:	e8 a0 1b 00 00       	call   c0011e31 <KeGetFileFromDescriptor(int)>
c0010291:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0010294:	83 c4 0c             	add    esp,0xc
c0010297:	31 db                	xor    ebx,ebx
c0010299:	53                   	push   ebx
c001029a:	51                   	push   ecx
c001029b:	50                   	push   eax
c001029c:	e8 47 7f ff ff       	call   c00081e8 <File::seek(unsigned long long)>
c00102a1:	83 c4 10             	add    esp,0x10
c00102a4:	85 c0                	test   eax,eax
c00102a6:	0f 95 c0             	setne  al
c00102a9:	31 d2                	xor    edx,edx
c00102ab:	0f b6 c0             	movzx  eax,al
c00102ae:	f7 d8                	neg    eax
c00102b0:	83 d2 00             	adc    edx,0x0
c00102b3:	83 c4 04             	add    esp,0x4
c00102b6:	5b                   	pop    ebx
c00102b7:	f7 da                	neg    edx
c00102b9:	5e                   	pop    esi
c00102ba:	c3                   	ret    
c00102bb:	83 c4 04             	add    esp,0x4
c00102be:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00102c3:	5b                   	pop    ebx
c00102c4:	ba ff ff ff ff       	mov    edx,0xffffffff
c00102c9:	5e                   	pop    esi
c00102ca:	c3                   	ret    

c00102cb <SysTell(regs*)>:
c00102cb:	53                   	push   ebx
c00102cc:	83 ec 08             	sub    esp,0x8
c00102cf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00102d3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00102d6:	83 f8 02             	cmp    eax,0x2
c00102d9:	76 4e                	jbe    c0010329 <SysTell(regs*)+0x5e>
c00102db:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00102e0:	76 19                	jbe    c00102fb <SysTell(regs*)+0x30>
c00102e2:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00102e5:	31 d2                	xor    edx,edx
c00102e7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00102ed:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00102f4:	83 c4 08             	add    esp,0x8
c00102f7:	31 c0                	xor    eax,eax
c00102f9:	5b                   	pop    ebx
c00102fa:	c3                   	ret    
c00102fb:	83 ec 0c             	sub    esp,0xc
c00102fe:	50                   	push   eax
c00102ff:	e8 2d 1b 00 00       	call   c0011e31 <KeGetFileFromDescriptor(int)>
c0010304:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0010307:	5a                   	pop    edx
c0010308:	59                   	pop    ecx
c0010309:	53                   	push   ebx
c001030a:	50                   	push   eax
c001030b:	e8 84 7f ff ff       	call   c0008294 <File::tell(unsigned long long*)>
c0010310:	83 c4 10             	add    esp,0x10
c0010313:	85 c0                	test   eax,eax
c0010315:	0f 95 c0             	setne  al
c0010318:	31 d2                	xor    edx,edx
c001031a:	0f b6 c0             	movzx  eax,al
c001031d:	f7 d8                	neg    eax
c001031f:	83 d2 00             	adc    edx,0x0
c0010322:	83 c4 08             	add    esp,0x8
c0010325:	5b                   	pop    ebx
c0010326:	f7 da                	neg    edx
c0010328:	c3                   	ret    
c0010329:	83 c4 08             	add    esp,0x8
c001032c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010331:	5b                   	pop    ebx
c0010332:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010337:	c3                   	ret    

c0010338 <SysSize(regs*)>:
c0010338:	53                   	push   ebx
c0010339:	83 ec 18             	sub    esp,0x18
c001033c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010340:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010343:	83 f8 02             	cmp    eax,0x2
c0010346:	76 54                	jbe    c001039c <SysSize(regs*)+0x64>
c0010348:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001034d:	76 19                	jbe    c0010368 <SysSize(regs*)+0x30>
c001034f:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0010352:	31 d2                	xor    edx,edx
c0010354:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001035a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010361:	83 c4 18             	add    esp,0x18
c0010364:	31 c0                	xor    eax,eax
c0010366:	5b                   	pop    ebx
c0010367:	c3                   	ret    
c0010368:	83 ec 0c             	sub    esp,0xc
c001036b:	50                   	push   eax
c001036c:	e8 c0 1a 00 00       	call   c0011e31 <KeGetFileFromDescriptor(int)>
c0010371:	83 c4 0c             	add    esp,0xc
c0010374:	8d 54 24 13          	lea    edx,[esp+0x13]
c0010378:	52                   	push   edx
c0010379:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001037c:	52                   	push   edx
c001037d:	50                   	push   eax
c001037e:	e8 a9 80 ff ff       	call   c000842c <File::stat(unsigned long long*, bool*)>
c0010383:	83 c4 10             	add    esp,0x10
c0010386:	85 c0                	test   eax,eax
c0010388:	0f 95 c0             	setne  al
c001038b:	31 d2                	xor    edx,edx
c001038d:	0f b6 c0             	movzx  eax,al
c0010390:	f7 d8                	neg    eax
c0010392:	83 d2 00             	adc    edx,0x0
c0010395:	83 c4 18             	add    esp,0x18
c0010398:	5b                   	pop    ebx
c0010399:	f7 da                	neg    edx
c001039b:	c3                   	ret    
c001039c:	83 c4 18             	add    esp,0x18
c001039f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00103a4:	5b                   	pop    ebx
c00103a5:	ba ff ff ff ff       	mov    edx,0xffffffff
c00103aa:	c3                   	ret    

c00103ab <SysSizeFromFilename(regs*)>:
c00103ab:	55                   	push   ebp
c00103ac:	57                   	push   edi
c00103ad:	56                   	push   esi
c00103ae:	53                   	push   ebx
c00103af:	81 ec 4c 02 00 00    	sub    esp,0x24c
c00103b5:	8b 9c 24 60 02 00 00 	mov    ebx,DWORD PTR [esp+0x260]
c00103bc:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00103bf:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c00103c2:	85 f6                	test   esi,esi
c00103c4:	89 f8                	mov    eax,edi
c00103c6:	74 09                	je     c00103d1 <SysSizeFromFilename(regs*)+0x26>
c00103c8:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c00103ce:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00103d1:	83 f8 02             	cmp    eax,0x2
c00103d4:	0f 86 ca 00 00 00    	jbe    c00104a4 <SysSizeFromFilename(regs*)+0xf9>
c00103da:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00103df:	76 1f                	jbe    c0010400 <SysSizeFromFilename(regs*)+0x55>
c00103e1:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00103e4:	31 d2                	xor    edx,edx
c00103e6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00103ec:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00103f3:	31 c0                	xor    eax,eax
c00103f5:	81 c4 4c 02 00 00    	add    esp,0x24c
c00103fb:	5b                   	pop    ebx
c00103fc:	5e                   	pop    esi
c00103fd:	5f                   	pop    edi
c00103fe:	5d                   	pop    ebp
c00103ff:	c3                   	ret    
c0010400:	83 ec 0c             	sub    esp,0xc
c0010403:	68 14 01 00 00       	push   0x114
c0010408:	e8 c3 e4 ff ff       	call   c000e8d0 <malloc>
c001040d:	6a 01                	push   0x1
c001040f:	89 c5                	mov    ebp,eax
c0010411:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010416:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c0010419:	51                   	push   ecx
c001041a:	57                   	push   edi
c001041b:	55                   	push   ebp
c001041c:	e8 0d 7c ff ff       	call   c000802e <File::File(char const*, Process*, bool)>
c0010421:	83 c4 1c             	add    esp,0x1c
c0010424:	8d 44 24 13          	lea    eax,[esp+0x13]
c0010428:	50                   	push   eax
c0010429:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c001042c:	53                   	push   ebx
c001042d:	55                   	push   ebp
c001042e:	e8 f9 7f ff ff       	call   c000842c <File::stat(unsigned long long*, bool*)>
c0010433:	83 c4 10             	add    esp,0x10
c0010436:	85 ed                	test   ebp,ebp
c0010438:	89 c3                	mov    ebx,eax
c001043a:	74 0d                	je     c0010449 <SysSizeFromFilename(regs*)+0x9e>
c001043c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001043f:	83 ec 0c             	sub    esp,0xc
c0010442:	55                   	push   ebp
c0010443:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010446:	83 c4 10             	add    esp,0x10
c0010449:	85 db                	test   ebx,ebx
c001044b:	75 57                	jne    c00104a4 <SysSizeFromFilename(regs*)+0xf9>
c001044d:	6a 00                	push   0x0
c001044f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010454:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010457:	05 0c 01 00 00       	add    eax,0x10c
c001045c:	50                   	push   eax
c001045d:	57                   	push   edi
c001045e:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c0010465:	53                   	push   ebx
c0010466:	e8 95 79 ff ff       	call   c0007e00 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c001046b:	58                   	pop    eax
c001046c:	5a                   	pop    edx
c001046d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0010471:	50                   	push   eax
c0010472:	53                   	push   ebx
c0010473:	e8 0f 74 ff ff       	call   c0007887 <KeDereferenceSymlink(char const*, char*)>
c0010478:	83 c4 10             	add    esp,0x10
c001047b:	ba 00 00 00 00       	mov    edx,0x0
c0010480:	83 f8 01             	cmp    eax,0x1
c0010483:	b8 00 00 00 00       	mov    eax,0x0
c0010488:	74 2f                	je     c00104b9 <SysSizeFromFilename(regs*)+0x10e>
c001048a:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001048f:	74 3b                	je     c00104cc <SysSizeFromFilename(regs*)+0x121>
c0010491:	85 f6                	test   esi,esi
c0010493:	0f 84 5c ff ff ff    	je     c00103f5 <SysSizeFromFilename(regs*)+0x4a>
c0010499:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c001049f:	e9 51 ff ff ff       	jmp    c00103f5 <SysSizeFromFilename(regs*)+0x4a>
c00104a4:	81 c4 4c 02 00 00    	add    esp,0x24c
c00104aa:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00104af:	5b                   	pop    ebx
c00104b0:	ba ff ff ff ff       	mov    edx,0xffffffff
c00104b5:	5e                   	pop    esi
c00104b6:	5f                   	pop    edi
c00104b7:	5d                   	pop    ebp
c00104b8:	c3                   	ret    
c00104b9:	85 f6                	test   esi,esi
c00104bb:	0f 84 34 ff ff ff    	je     c00103f5 <SysSizeFromFilename(regs*)+0x4a>
c00104c1:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c00104c7:	e9 29 ff ff ff       	jmp    c00103f5 <SysSizeFromFilename(regs*)+0x4a>
c00104cc:	85 f6                	test   esi,esi
c00104ce:	0f 84 21 ff ff ff    	je     c00103f5 <SysSizeFromFilename(regs*)+0x4a>
c00104d4:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c00104da:	e9 16 ff ff ff       	jmp    c00103f5 <SysSizeFromFilename(regs*)+0x4a>

c00104df <SysSizeFromFilenameNoSymlink(regs*)>:
c00104df:	55                   	push   ebp
c00104e0:	57                   	push   edi
c00104e1:	56                   	push   esi
c00104e2:	53                   	push   ebx
c00104e3:	81 ec 4c 02 00 00    	sub    esp,0x24c
c00104e9:	8b 9c 24 60 02 00 00 	mov    ebx,DWORD PTR [esp+0x260]
c00104f0:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00104f3:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c00104f6:	85 f6                	test   esi,esi
c00104f8:	89 f8                	mov    eax,edi
c00104fa:	74 09                	je     c0010505 <SysSizeFromFilenameNoSymlink(regs*)+0x26>
c00104fc:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0010502:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010505:	83 f8 02             	cmp    eax,0x2
c0010508:	0f 86 ca 00 00 00    	jbe    c00105d8 <SysSizeFromFilenameNoSymlink(regs*)+0xf9>
c001050e:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010513:	76 1f                	jbe    c0010534 <SysSizeFromFilenameNoSymlink(regs*)+0x55>
c0010515:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0010518:	31 d2                	xor    edx,edx
c001051a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010520:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010527:	31 c0                	xor    eax,eax
c0010529:	81 c4 4c 02 00 00    	add    esp,0x24c
c001052f:	5b                   	pop    ebx
c0010530:	5e                   	pop    esi
c0010531:	5f                   	pop    edi
c0010532:	5d                   	pop    ebp
c0010533:	c3                   	ret    
c0010534:	83 ec 0c             	sub    esp,0xc
c0010537:	68 14 01 00 00       	push   0x114
c001053c:	e8 8f e3 ff ff       	call   c000e8d0 <malloc>
c0010541:	6a 00                	push   0x0
c0010543:	89 c5                	mov    ebp,eax
c0010545:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001054a:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c001054d:	51                   	push   ecx
c001054e:	57                   	push   edi
c001054f:	55                   	push   ebp
c0010550:	e8 d9 7a ff ff       	call   c000802e <File::File(char const*, Process*, bool)>
c0010555:	83 c4 1c             	add    esp,0x1c
c0010558:	8d 44 24 13          	lea    eax,[esp+0x13]
c001055c:	50                   	push   eax
c001055d:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0010560:	53                   	push   ebx
c0010561:	55                   	push   ebp
c0010562:	e8 c5 7e ff ff       	call   c000842c <File::stat(unsigned long long*, bool*)>
c0010567:	83 c4 10             	add    esp,0x10
c001056a:	85 ed                	test   ebp,ebp
c001056c:	89 c3                	mov    ebx,eax
c001056e:	74 0d                	je     c001057d <SysSizeFromFilenameNoSymlink(regs*)+0x9e>
c0010570:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0010573:	83 ec 0c             	sub    esp,0xc
c0010576:	55                   	push   ebp
c0010577:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001057a:	83 c4 10             	add    esp,0x10
c001057d:	85 db                	test   ebx,ebx
c001057f:	75 57                	jne    c00105d8 <SysSizeFromFilenameNoSymlink(regs*)+0xf9>
c0010581:	6a 00                	push   0x0
c0010583:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010588:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001058b:	05 0c 01 00 00       	add    eax,0x10c
c0010590:	50                   	push   eax
c0010591:	57                   	push   edi
c0010592:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c0010599:	53                   	push   ebx
c001059a:	e8 61 78 ff ff       	call   c0007e00 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c001059f:	58                   	pop    eax
c00105a0:	5a                   	pop    edx
c00105a1:	8d 44 24 18          	lea    eax,[esp+0x18]
c00105a5:	50                   	push   eax
c00105a6:	53                   	push   ebx
c00105a7:	e8 db 72 ff ff       	call   c0007887 <KeDereferenceSymlink(char const*, char*)>
c00105ac:	83 c4 10             	add    esp,0x10
c00105af:	ba 00 00 00 00       	mov    edx,0x0
c00105b4:	83 f8 01             	cmp    eax,0x1
c00105b7:	b8 00 00 00 00       	mov    eax,0x0
c00105bc:	74 2f                	je     c00105ed <SysSizeFromFilenameNoSymlink(regs*)+0x10e>
c00105be:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00105c3:	74 3b                	je     c0010600 <SysSizeFromFilenameNoSymlink(regs*)+0x121>
c00105c5:	85 f6                	test   esi,esi
c00105c7:	0f 84 5c ff ff ff    	je     c0010529 <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c00105cd:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c00105d3:	e9 51 ff ff ff       	jmp    c0010529 <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c00105d8:	81 c4 4c 02 00 00    	add    esp,0x24c
c00105de:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00105e3:	5b                   	pop    ebx
c00105e4:	ba ff ff ff ff       	mov    edx,0xffffffff
c00105e9:	5e                   	pop    esi
c00105ea:	5f                   	pop    edi
c00105eb:	5d                   	pop    ebp
c00105ec:	c3                   	ret    
c00105ed:	85 f6                	test   esi,esi
c00105ef:	0f 84 34 ff ff ff    	je     c0010529 <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c00105f5:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c00105fb:	e9 29 ff ff ff       	jmp    c0010529 <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c0010600:	85 f6                	test   esi,esi
c0010602:	0f 84 21 ff ff ff    	je     c0010529 <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c0010608:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c001060e:	e9 16 ff ff ff       	jmp    c0010529 <SysSizeFromFilenameNoSymlink(regs*)+0x4a>

c0010613 <SysClose(regs*)>:
c0010613:	53                   	push   ebx
c0010614:	83 ec 08             	sub    esp,0x8
c0010617:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001061b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001061e:	83 f8 02             	cmp    eax,0x2
c0010621:	76 41                	jbe    c0010664 <SysClose(regs*)+0x51>
c0010623:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c0010629:	83 fa 01             	cmp    edx,0x1
c001062c:	76 2d                	jbe    c001065b <SysClose(regs*)+0x48>
c001062e:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010633:	77 2f                	ja     c0010664 <SysClose(regs*)+0x51>
c0010635:	83 ec 0c             	sub    esp,0xc
c0010638:	50                   	push   eax
c0010639:	e8 f3 17 00 00       	call   c0011e31 <KeGetFileFromDescriptor(int)>
c001063e:	89 04 24             	mov    DWORD PTR [esp],eax
c0010641:	89 c3                	mov    ebx,eax
c0010643:	e8 40 7b ff ff       	call   c0008188 <File::close()>
c0010648:	83 c4 10             	add    esp,0x10
c001064b:	85 db                	test   ebx,ebx
c001064d:	74 0c                	je     c001065b <SysClose(regs*)+0x48>
c001064f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010651:	83 ec 0c             	sub    esp,0xc
c0010654:	53                   	push   ebx
c0010655:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010658:	83 c4 10             	add    esp,0x10
c001065b:	83 c4 08             	add    esp,0x8
c001065e:	31 c0                	xor    eax,eax
c0010660:	5b                   	pop    ebx
c0010661:	31 d2                	xor    edx,edx
c0010663:	c3                   	ret    
c0010664:	83 c4 08             	add    esp,0x8
c0010667:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001066c:	5b                   	pop    ebx
c001066d:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010672:	c3                   	ret    

c0010673 <SysOpenDir(regs*)>:
c0010673:	56                   	push   esi
c0010674:	53                   	push   ebx
c0010675:	83 ec 04             	sub    esp,0x4
c0010678:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001067c:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001067f:	85 c9                	test   ecx,ecx
c0010681:	74 5d                	je     c00106e0 <SysOpenDir(regs*)+0x6d>
c0010683:	83 ec 0c             	sub    esp,0xc
c0010686:	68 14 01 00 00       	push   0x114
c001068b:	e8 40 e2 ff ff       	call   c000e8d0 <malloc>
c0010690:	83 c4 0c             	add    esp,0xc
c0010693:	89 c6                	mov    esi,eax
c0010695:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001069a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001069d:	50                   	push   eax
c001069e:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00106a1:	52                   	push   edx
c00106a2:	56                   	push   esi
c00106a3:	e8 44 7f ff ff       	call   c00085ec <Directory::Directory(char const*, Process*)>
c00106a8:	83 c4 10             	add    esp,0x10
c00106ab:	85 f6                	test   esi,esi
c00106ad:	74 31                	je     c00106e0 <SysOpenDir(regs*)+0x6d>
c00106af:	83 ec 0c             	sub    esp,0xc
c00106b2:	56                   	push   esi
c00106b3:	e8 fc 7f ff ff       	call   c00086b4 <Directory::open()>
c00106b8:	83 c4 10             	add    esp,0x10
c00106bb:	85 c0                	test   eax,eax
c00106bd:	75 21                	jne    c00106e0 <SysOpenDir(regs*)+0x6d>
c00106bf:	83 ec 0c             	sub    esp,0xc
c00106c2:	56                   	push   esi
c00106c3:	e8 6c 14 00 00       	call   c0011b34 <UnixFile::getFileDescriptor()>
c00106c8:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00106cb:	83 c4 10             	add    esp,0x10
c00106ce:	89 02                	mov    DWORD PTR [edx],eax
c00106d0:	c1 f8 1f             	sar    eax,0x1f
c00106d3:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00106d6:	83 c4 04             	add    esp,0x4
c00106d9:	31 c0                	xor    eax,eax
c00106db:	5b                   	pop    ebx
c00106dc:	31 d2                	xor    edx,edx
c00106de:	5e                   	pop    esi
c00106df:	c3                   	ret    
c00106e0:	83 c4 04             	add    esp,0x4
c00106e3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00106e8:	5b                   	pop    ebx
c00106e9:	ba ff ff ff ff       	mov    edx,0xffffffff
c00106ee:	5e                   	pop    esi
c00106ef:	c3                   	ret    

c00106f0 <SysMakeDir(regs*)>:
c00106f0:	56                   	push   esi
c00106f1:	53                   	push   ebx
c00106f2:	83 ec 10             	sub    esp,0x10
c00106f5:	68 14 01 00 00       	push   0x114
c00106fa:	e8 d1 e1 ff ff       	call   c000e8d0 <malloc>
c00106ff:	83 c4 0c             	add    esp,0xc
c0010702:	89 c3                	mov    ebx,eax
c0010704:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010709:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001070c:	50                   	push   eax
c001070d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010711:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0010714:	52                   	push   edx
c0010715:	53                   	push   ebx
c0010716:	e8 d1 7e ff ff       	call   c00085ec <Directory::Directory(char const*, Process*)>
c001071b:	83 c4 10             	add    esp,0x10
c001071e:	85 db                	test   ebx,ebx
c0010720:	74 2c                	je     c001074e <SysMakeDir(regs*)+0x5e>
c0010722:	83 ec 0c             	sub    esp,0xc
c0010725:	53                   	push   ebx
c0010726:	e8 69 81 ff ff       	call   c0008894 <Directory::create()>
c001072b:	89 c6                	mov    esi,eax
c001072d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001072f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010732:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010735:	83 c4 10             	add    esp,0x10
c0010738:	31 c0                	xor    eax,eax
c001073a:	85 f6                	test   esi,esi
c001073c:	0f 95 c0             	setne  al
c001073f:	31 d2                	xor    edx,edx
c0010741:	f7 d8                	neg    eax
c0010743:	83 d2 00             	adc    edx,0x0
c0010746:	83 c4 04             	add    esp,0x4
c0010749:	5b                   	pop    ebx
c001074a:	f7 da                	neg    edx
c001074c:	5e                   	pop    esi
c001074d:	c3                   	ret    
c001074e:	83 c4 04             	add    esp,0x4
c0010751:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010756:	5b                   	pop    ebx
c0010757:	ba ff ff ff ff       	mov    edx,0xffffffff
c001075c:	5e                   	pop    esi
c001075d:	c3                   	ret    

c001075e <SysCloseDir(regs*)>:
c001075e:	53                   	push   ebx
c001075f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010764:	83 ec 08             	sub    esp,0x8
c0010767:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001076b:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001076e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010773:	8d 59 fd             	lea    ebx,[ecx-0x3]
c0010776:	81 fb fd fe ff 0f    	cmp    ebx,0xffffefd
c001077c:	77 2a                	ja     c00107a8 <SysCloseDir(regs*)+0x4a>
c001077e:	83 ec 0c             	sub    esp,0xc
c0010781:	51                   	push   ecx
c0010782:	e8 aa 16 00 00       	call   c0011e31 <KeGetFileFromDescriptor(int)>
c0010787:	89 04 24             	mov    DWORD PTR [esp],eax
c001078a:	89 c3                	mov    ebx,eax
c001078c:	e8 7f 7f ff ff       	call   c0008710 <Directory::close()>
c0010791:	83 c4 10             	add    esp,0x10
c0010794:	85 db                	test   ebx,ebx
c0010796:	74 0c                	je     c00107a4 <SysCloseDir(regs*)+0x46>
c0010798:	8b 03                	mov    eax,DWORD PTR [ebx]
c001079a:	83 ec 0c             	sub    esp,0xc
c001079d:	53                   	push   ebx
c001079e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00107a1:	83 c4 10             	add    esp,0x10
c00107a4:	31 c0                	xor    eax,eax
c00107a6:	31 d2                	xor    edx,edx
c00107a8:	83 c4 08             	add    esp,0x8
c00107ab:	5b                   	pop    ebx
c00107ac:	c3                   	ret    

c00107ad <SysWait(regs*)>:
c00107ad:	83 ec 10             	sub    esp,0x10
c00107b0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00107b4:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00107b7:	52                   	push   edx
c00107b8:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c00107bb:	51                   	push   ecx
c00107bc:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00107bf:	50                   	push   eax
c00107c0:	e8 1f 4d 00 00       	call   c00154e4 <waitTask(int, int*, int)>
c00107c5:	83 c4 1c             	add    esp,0x1c
c00107c8:	89 c2                	mov    edx,eax
c00107ca:	c1 fa 1f             	sar    edx,0x1f
c00107cd:	c3                   	ret    

c00107ce <SysNotImpl(regs*)>:
c00107ce:	83 ec 18             	sub    esp,0x18
c00107d1:	68 c4 22 02 c0       	push   0xc00222c4
c00107d6:	e8 4b e4 ff ff       	call   c000ec26 <KePanic(char const*)>
c00107db:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00107e0:	ba ff ff ff ff       	mov    edx,0xffffffff
c00107e5:	83 c4 1c             	add    esp,0x1c
c00107e8:	c3                   	ret    

c00107e9 <SysPanic(regs*)>:
c00107e9:	83 ec 18             	sub    esp,0x18
c00107ec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00107f0:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00107f3:	50                   	push   eax
c00107f4:	e8 2d e4 ff ff       	call   c000ec26 <KePanic(char const*)>
c00107f9:	b8 01 00 00 00       	mov    eax,0x1
c00107fe:	31 d2                	xor    edx,edx
c0010800:	83 c4 1c             	add    esp,0x1c
c0010803:	c3                   	ret    

c0010804 <SysRmdir(regs*)>:
c0010804:	56                   	push   esi
c0010805:	53                   	push   ebx
c0010806:	83 ec 10             	sub    esp,0x10
c0010809:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001080d:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0010810:	68 14 01 00 00       	push   0x114
c0010815:	e8 b6 e0 ff ff       	call   c000e8d0 <malloc>
c001081a:	6a 00                	push   0x0
c001081c:	89 c3                	mov    ebx,eax
c001081e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010823:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010826:	50                   	push   eax
c0010827:	56                   	push   esi
c0010828:	53                   	push   ebx
c0010829:	e8 00 78 ff ff       	call   c000802e <File::File(char const*, Process*, bool)>
c001082e:	83 c4 14             	add    esp,0x14
c0010831:	53                   	push   ebx
c0010832:	e8 c1 7a ff ff       	call   c00082f8 <File::unlink()>
c0010837:	83 c4 10             	add    esp,0x10
c001083a:	85 db                	test   ebx,ebx
c001083c:	89 c6                	mov    esi,eax
c001083e:	74 0c                	je     c001084c <SysRmdir(regs*)+0x48>
c0010840:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010842:	83 ec 0c             	sub    esp,0xc
c0010845:	53                   	push   ebx
c0010846:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010849:	83 c4 10             	add    esp,0x10
c001084c:	31 c0                	xor    eax,eax
c001084e:	85 f6                	test   esi,esi
c0010850:	0f 95 c0             	setne  al
c0010853:	31 d2                	xor    edx,edx
c0010855:	f7 d8                	neg    eax
c0010857:	83 d2 00             	adc    edx,0x0
c001085a:	83 c4 04             	add    esp,0x4
c001085d:	5b                   	pop    ebx
c001085e:	f7 da                	neg    edx
c0010860:	5e                   	pop    esi
c0010861:	c3                   	ret    

c0010862 <SysUnlink(regs*)>:
c0010862:	56                   	push   esi
c0010863:	53                   	push   ebx
c0010864:	83 ec 10             	sub    esp,0x10
c0010867:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001086b:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001086e:	68 14 01 00 00       	push   0x114
c0010873:	e8 58 e0 ff ff       	call   c000e8d0 <malloc>
c0010878:	6a 00                	push   0x0
c001087a:	89 c3                	mov    ebx,eax
c001087c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010881:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010884:	50                   	push   eax
c0010885:	56                   	push   esi
c0010886:	53                   	push   ebx
c0010887:	e8 a2 77 ff ff       	call   c000802e <File::File(char const*, Process*, bool)>
c001088c:	83 c4 14             	add    esp,0x14
c001088f:	53                   	push   ebx
c0010890:	e8 63 7a ff ff       	call   c00082f8 <File::unlink()>
c0010895:	83 c4 10             	add    esp,0x10
c0010898:	85 db                	test   ebx,ebx
c001089a:	89 c6                	mov    esi,eax
c001089c:	74 0c                	je     c00108aa <SysUnlink(regs*)+0x48>
c001089e:	8b 03                	mov    eax,DWORD PTR [ebx]
c00108a0:	83 ec 0c             	sub    esp,0xc
c00108a3:	53                   	push   ebx
c00108a4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00108a7:	83 c4 10             	add    esp,0x10
c00108aa:	31 c0                	xor    eax,eax
c00108ac:	85 f6                	test   esi,esi
c00108ae:	0f 95 c0             	setne  al
c00108b1:	31 d2                	xor    edx,edx
c00108b3:	f7 d8                	neg    eax
c00108b5:	83 d2 00             	adc    edx,0x0
c00108b8:	83 c4 04             	add    esp,0x4
c00108bb:	5b                   	pop    ebx
c00108bc:	f7 da                	neg    edx
c00108be:	5e                   	pop    esi
c00108bf:	c3                   	ret    

c00108c0 <SysGetArgv(regs*)>:
c00108c0:	83 ec 0c             	sub    esp,0xc
c00108c3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00108c7:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00108ca:	85 c0                	test   eax,eax
c00108cc:	78 2c                	js     c00108fa <SysGetArgv(regs*)+0x3a>
c00108ce:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00108d4:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c00108d7:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c00108dd:	7d 1b                	jge    c00108fa <SysGetArgv(regs*)+0x3a>
c00108df:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c00108e6:	85 c0                	test   eax,eax
c00108e8:	74 18                	je     c0010902 <SysGetArgv(regs*)+0x42>
c00108ea:	83 ec 08             	sub    esp,0x8
c00108ed:	50                   	push   eax
c00108ee:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c00108f1:	50                   	push   eax
c00108f2:	e8 59 fd fe ff       	call   c0000650 <strcpy>
c00108f7:	83 c4 10             	add    esp,0x10
c00108fa:	31 c0                	xor    eax,eax
c00108fc:	31 d2                	xor    edx,edx
c00108fe:	83 c4 0c             	add    esp,0xc
c0010901:	c3                   	ret    
c0010902:	b8 01 00 00 00       	mov    eax,0x1
c0010907:	31 d2                	xor    edx,edx
c0010909:	83 c4 0c             	add    esp,0xc
c001090c:	c3                   	ret    

c001090d <SysUSleep(regs*)>:
c001090d:	83 ec 1c             	sub    esp,0x1c
c0010910:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0010914:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c0010917:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001091a:	6a 00                	push   0x0
c001091c:	6a 64                	push   0x64
c001091e:	52                   	push   edx
c001091f:	50                   	push   eax
c0010920:	e8 2f f1 00 00       	call   c001fa54 <__udivdi3>
c0010925:	83 c4 14             	add    esp,0x14
c0010928:	50                   	push   eax
c0010929:	e8 9a 4c 00 00       	call   c00155c8 <milliTenthSleep(unsigned int)>
c001092e:	31 c0                	xor    eax,eax
c0010930:	31 d2                	xor    edx,edx
c0010932:	83 c4 1c             	add    esp,0x1c
c0010935:	c3                   	ret    

c0010936 <SysSpawn(regs*)>:
c0010936:	56                   	push   esi
c0010937:	53                   	push   ebx
c0010938:	83 ec 04             	sub    esp,0x4
c001093b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001093f:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0010942:	85 f6                	test   esi,esi
c0010944:	75 0a                	jne    c0010950 <SysSpawn(regs*)+0x1a>
c0010946:	83 c4 04             	add    esp,0x4
c0010949:	31 c0                	xor    eax,eax
c001094b:	5b                   	pop    ebx
c001094c:	31 d2                	xor    edx,edx
c001094e:	5e                   	pop    esi
c001094f:	c3                   	ret    
c0010950:	83 ec 0c             	sub    esp,0xc
c0010953:	68 24 07 00 00       	push   0x724
c0010958:	e8 73 df ff ff       	call   c000e8d0 <malloc>
c001095d:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0010960:	83 c4 10             	add    esp,0x10
c0010963:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0010966:	89 c6                	mov    esi,eax
c0010968:	31 c0                	xor    eax,eax
c001096a:	85 c9                	test   ecx,ecx
c001096c:	75 08                	jne    c0010976 <SysSpawn(regs*)+0x40>
c001096e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010973:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010976:	52                   	push   edx
c0010977:	50                   	push   eax
c0010978:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001097b:	50                   	push   eax
c001097c:	56                   	push   esi
c001097d:	e8 ee 43 00 00       	call   c0014d70 <Process::Process(char const*, Process*, char**)>
c0010982:	83 c4 10             	add    esp,0x10
c0010985:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c001098c:	75 b8                	jne    c0010946 <SysSpawn(regs*)+0x10>
c001098e:	83 ec 0c             	sub    esp,0xc
c0010991:	56                   	push   esi
c0010992:	e8 15 49 00 00       	call   c00152ac <Process::createUserThread()>
c0010997:	8b 06                	mov    eax,DWORD PTR [esi]
c0010999:	83 c4 10             	add    esp,0x10
c001099c:	83 c4 04             	add    esp,0x4
c001099f:	5b                   	pop    ebx
c00109a0:	89 c2                	mov    edx,eax
c00109a2:	c1 fa 1f             	sar    edx,0x1f
c00109a5:	5e                   	pop    esi
c00109a6:	c3                   	ret    

c00109a7 <SysGetEnv(regs*)>:
c00109a7:	57                   	push   edi
c00109a8:	56                   	push   esi
c00109a9:	53                   	push   ebx
c00109aa:	83 ec 1c             	sub    esp,0x1c
c00109ad:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00109b2:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00109b6:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c00109b9:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c00109bc:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00109bf:	51                   	push   ecx
c00109c0:	e8 62 d2 ff ff       	call   c000dc27 <KeGetProcessTotalEnvCount(Process*)>
c00109c5:	83 c4 10             	add    esp,0x10
c00109c8:	39 c7                	cmp    edi,eax
c00109ca:	7c 12                	jl     c00109de <SysGetEnv(regs*)+0x37>
c00109cc:	31 c0                	xor    eax,eax
c00109ce:	31 d2                	xor    edx,edx
c00109d0:	85 f6                	test   esi,esi
c00109d2:	74 03                	je     c00109d7 <SysGetEnv(regs*)+0x30>
c00109d4:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00109d7:	83 c4 10             	add    esp,0x10
c00109da:	5b                   	pop    ebx
c00109db:	5e                   	pop    esi
c00109dc:	5f                   	pop    edi
c00109dd:	c3                   	ret    
c00109de:	8d 44 24 08          	lea    eax,[esp+0x8]
c00109e2:	83 ec 04             	sub    esp,0x4
c00109e5:	57                   	push   edi
c00109e6:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00109ec:	8b 7a 3c             	mov    edi,DWORD PTR [edx+0x3c]
c00109ef:	57                   	push   edi
c00109f0:	50                   	push   eax
c00109f1:	e8 51 d2 ff ff       	call   c000dc47 <KeGetProcessEnvPair(Process*, int)>
c00109f6:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00109f9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00109fd:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0010a01:	83 c4 0c             	add    esp,0xc
c0010a04:	85 d2                	test   edx,edx
c0010a06:	75 23                	jne    c0010a2b <SysGetEnv(regs*)+0x84>
c0010a08:	83 ec 0c             	sub    esp,0xc
c0010a0b:	50                   	push   eax
c0010a0c:	e8 6f fb fe ff       	call   c0000580 <strlen>
c0010a11:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010a14:	89 c3                	mov    ebx,eax
c0010a16:	e8 65 fb fe ff       	call   c0000580 <strlen>
c0010a1b:	83 c4 10             	add    esp,0x10
c0010a1e:	31 d2                	xor    edx,edx
c0010a20:	83 c4 10             	add    esp,0x10
c0010a23:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0010a27:	5b                   	pop    ebx
c0010a28:	5e                   	pop    esi
c0010a29:	5f                   	pop    edi
c0010a2a:	c3                   	ret    
c0010a2b:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0010a2e:	83 ec 08             	sub    esp,0x8
c0010a31:	50                   	push   eax
c0010a32:	56                   	push   esi
c0010a33:	e8 18 fc fe ff       	call   c0000650 <strcpy>
c0010a38:	58                   	pop    eax
c0010a39:	5a                   	pop    edx
c0010a3a:	68 de 22 02 c0       	push   0xc00222de
c0010a3f:	56                   	push   esi
c0010a40:	e8 2b fe fe ff       	call   c0000870 <strcat>
c0010a45:	59                   	pop    ecx
c0010a46:	5b                   	pop    ebx
c0010a47:	57                   	push   edi
c0010a48:	56                   	push   esi
c0010a49:	e8 22 fe fe ff       	call   c0000870 <strcat>
c0010a4e:	83 c4 10             	add    esp,0x10
c0010a51:	31 c0                	xor    eax,eax
c0010a53:	83 c4 10             	add    esp,0x10
c0010a56:	31 d2                	xor    edx,edx
c0010a58:	5b                   	pop    ebx
c0010a59:	5e                   	pop    esi
c0010a5a:	5f                   	pop    edi
c0010a5b:	c3                   	ret    

c0010a5c <SysSetFatAttrib(regs*)>:
c0010a5c:	57                   	push   edi
c0010a5d:	56                   	push   esi
c0010a5e:	53                   	push   ebx
c0010a5f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010a63:	83 ec 0c             	sub    esp,0xc
c0010a66:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0010a69:	68 14 01 00 00       	push   0x114
c0010a6e:	e8 5d de ff ff       	call   c000e8d0 <malloc>
c0010a73:	83 c4 0c             	add    esp,0xc
c0010a76:	89 c3                	mov    ebx,eax
c0010a78:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010a7d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010a80:	50                   	push   eax
c0010a81:	57                   	push   edi
c0010a82:	53                   	push   ebx
c0010a83:	e8 84 76 ff ff       	call   c000810c <File::File(char const*, Process*)>
c0010a88:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0010a8b:	83 c4 0c             	add    esp,0xc
c0010a8e:	0f b6 d4             	movzx  edx,ah
c0010a91:	0f b6 c0             	movzx  eax,al
c0010a94:	52                   	push   edx
c0010a95:	50                   	push   eax
c0010a96:	53                   	push   ebx
c0010a97:	e8 f6 78 ff ff       	call   c0008392 <File::chfatattr(unsigned char, unsigned char)>
c0010a9c:	83 c4 10             	add    esp,0x10
c0010a9f:	85 db                	test   ebx,ebx
c0010aa1:	89 c6                	mov    esi,eax
c0010aa3:	74 0c                	je     c0010ab1 <SysSetFatAttrib(regs*)+0x55>
c0010aa5:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010aa7:	83 ec 0c             	sub    esp,0xc
c0010aaa:	53                   	push   ebx
c0010aab:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010aae:	83 c4 10             	add    esp,0x10
c0010ab1:	5b                   	pop    ebx
c0010ab2:	31 c0                	xor    eax,eax
c0010ab4:	85 f6                	test   esi,esi
c0010ab6:	0f 95 c0             	setne  al
c0010ab9:	31 d2                	xor    edx,edx
c0010abb:	5e                   	pop    esi
c0010abc:	f7 d8                	neg    eax
c0010abe:	83 d2 00             	adc    edx,0x0
c0010ac1:	f7 da                	neg    edx
c0010ac3:	5f                   	pop    edi
c0010ac4:	c3                   	ret    

c0010ac5 <SysPipe(regs*)>:
c0010ac5:	57                   	push   edi
c0010ac6:	56                   	push   esi
c0010ac7:	53                   	push   ebx
c0010ac8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010acc:	83 ec 0c             	sub    esp,0xc
c0010acf:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0010ad2:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0010ad5:	6a 20                	push   0x20
c0010ad7:	e8 f4 dd ff ff       	call   c000e8d0 <malloc>
c0010adc:	89 c3                	mov    ebx,eax
c0010ade:	58                   	pop    eax
c0010adf:	5a                   	pop    edx
c0010ae0:	68 00 50 00 00       	push   0x5000
c0010ae5:	53                   	push   ebx
c0010ae6:	e8 91 e9 ff ff       	call   c000f47c <Pipe::Pipe(int)>
c0010aeb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010aee:	e8 41 10 00 00       	call   c0011b34 <UnixFile::getFileDescriptor()>
c0010af3:	89 07                	mov    DWORD PTR [edi],eax
c0010af5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010af8:	e8 37 10 00 00       	call   c0011b34 <UnixFile::getFileDescriptor()>
c0010afd:	83 c4 10             	add    esp,0x10
c0010b00:	31 d2                	xor    edx,edx
c0010b02:	89 06                	mov    DWORD PTR [esi],eax
c0010b04:	31 c0                	xor    eax,eax
c0010b06:	5b                   	pop    ebx
c0010b07:	5e                   	pop    esi
c0010b08:	5f                   	pop    edi
c0010b09:	c3                   	ret    

c0010b0a <SysGetUnixTime(regs*)>:
c0010b0a:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c0010b0f:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0010b15:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010b19:	e9 72 80 ff ff       	jmp    c0008b90 <Clock::timeInSecondsLocal()>

c0010b1e <string_ends_with(char const*, char const*)>:
c0010b1e:	57                   	push   edi
c0010b1f:	56                   	push   esi
c0010b20:	53                   	push   ebx
c0010b21:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010b25:	83 ec 0c             	sub    esp,0xc
c0010b28:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0010b2c:	53                   	push   ebx
c0010b2d:	e8 4e fa fe ff       	call   c0000580 <strlen>
c0010b32:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010b35:	89 c6                	mov    esi,eax
c0010b37:	e8 44 fa fe ff       	call   c0000580 <strlen>
c0010b3c:	83 c4 10             	add    esp,0x10
c0010b3f:	31 d2                	xor    edx,edx
c0010b41:	39 c6                	cmp    esi,eax
c0010b43:	7d 06                	jge    c0010b4b <string_ends_with(char const*, char const*)+0x2d>
c0010b45:	5b                   	pop    ebx
c0010b46:	89 d0                	mov    eax,edx
c0010b48:	5e                   	pop    esi
c0010b49:	5f                   	pop    edi
c0010b4a:	c3                   	ret    
c0010b4b:	83 ec 08             	sub    esp,0x8
c0010b4e:	29 c6                	sub    esi,eax
c0010b50:	57                   	push   edi
c0010b51:	01 f3                	add    ebx,esi
c0010b53:	53                   	push   ebx
c0010b54:	e8 27 fc fe ff       	call   c0000780 <strcmp>
c0010b59:	83 c4 10             	add    esp,0x10
c0010b5c:	31 d2                	xor    edx,edx
c0010b5e:	5b                   	pop    ebx
c0010b5f:	5e                   	pop    esi
c0010b60:	85 c0                	test   eax,eax
c0010b62:	5f                   	pop    edi
c0010b63:	0f 94 c2             	sete   dl
c0010b66:	89 d0                	mov    eax,edx
c0010b68:	c3                   	ret    

c0010b69 <SysOpen(regs*)>:
c0010b69:	56                   	push   esi
c0010b6a:	53                   	push   ebx
c0010b6b:	81 ec 04 01 00 00    	sub    esp,0x104
c0010b71:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0010b78:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010b7b:	85 c0                	test   eax,eax
c0010b7d:	0f 84 c4 01 00 00    	je     c0010d47 <SysOpen(regs*)+0x1de>
c0010b83:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010b86:	85 c0                	test   eax,eax
c0010b88:	0f 84 b9 01 00 00    	je     c0010d47 <SysOpen(regs*)+0x1de>
c0010b8e:	6a 00                	push   0x0
c0010b90:	68 e0 22 02 c0       	push   0xc00222e0
c0010b95:	50                   	push   eax
c0010b96:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0010b9a:	56                   	push   esi
c0010b9b:	e8 60 72 ff ff       	call   c0007e00 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0010ba0:	89 34 24             	mov    DWORD PTR [esp],esi
c0010ba3:	e8 d8 f9 fe ff       	call   c0000580 <strlen>
c0010ba8:	83 c4 10             	add    esp,0x10
c0010bab:	83 e8 01             	sub    eax,0x1
c0010bae:	74 29                	je     c0010bd9 <SysOpen(regs*)+0x70>
c0010bb0:	0f be 14 04          	movsx  edx,BYTE PTR [esp+eax*1]
c0010bb4:	83 fa 2e             	cmp    edx,0x2e
c0010bb7:	74 1c                	je     c0010bd5 <SysOpen(regs*)+0x6c>
c0010bb9:	83 fa 3a             	cmp    edx,0x3a
c0010bbc:	74 17                	je     c0010bd5 <SysOpen(regs*)+0x6c>
c0010bbe:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0010bc2:	83 e8 01             	sub    eax,0x1
c0010bc5:	74 12                	je     c0010bd9 <SysOpen(regs*)+0x70>
c0010bc7:	0f be 14 06          	movsx  edx,BYTE PTR [esi+eax*1]
c0010bcb:	83 fa 3a             	cmp    edx,0x3a
c0010bce:	74 05                	je     c0010bd5 <SysOpen(regs*)+0x6c>
c0010bd0:	83 fa 2e             	cmp    edx,0x2e
c0010bd3:	75 e9                	jne    c0010bbe <SysOpen(regs*)+0x55>
c0010bd5:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c0010bd9:	83 ec 08             	sub    esp,0x8
c0010bdc:	68 e4 22 02 c0       	push   0xc00222e4
c0010be1:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010be4:	50                   	push   eax
c0010be5:	e8 34 ff ff ff       	call   c0010b1e <string_ends_with(char const*, char const*)>
c0010bea:	83 c4 10             	add    esp,0x10
c0010bed:	85 c0                	test   eax,eax
c0010bef:	74 1d                	je     c0010c0e <SysOpen(regs*)+0xa5>
c0010bf1:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010bf4:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0010bfa:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010c01:	81 c4 04 01 00 00    	add    esp,0x104
c0010c07:	31 c0                	xor    eax,eax
c0010c09:	5b                   	pop    ebx
c0010c0a:	31 d2                	xor    edx,edx
c0010c0c:	5e                   	pop    esi
c0010c0d:	c3                   	ret    
c0010c0e:	83 ec 08             	sub    esp,0x8
c0010c11:	68 e9 22 02 c0       	push   0xc00222e9
c0010c16:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010c19:	50                   	push   eax
c0010c1a:	e8 ff fe ff ff       	call   c0010b1e <string_ends_with(char const*, char const*)>
c0010c1f:	83 c4 10             	add    esp,0x10
c0010c22:	85 c0                	test   eax,eax
c0010c24:	75 cb                	jne    c0010bf1 <SysOpen(regs*)+0x88>
c0010c26:	83 ec 08             	sub    esp,0x8
c0010c29:	68 e5 22 02 c0       	push   0xc00222e5
c0010c2e:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010c31:	50                   	push   eax
c0010c32:	e8 49 fb fe ff       	call   c0000780 <strcmp>
c0010c37:	83 c4 10             	add    esp,0x10
c0010c3a:	85 c0                	test   eax,eax
c0010c3c:	74 b3                	je     c0010bf1 <SysOpen(regs*)+0x88>
c0010c3e:	83 ec 08             	sub    esp,0x8
c0010c41:	68 e4 22 02 c0       	push   0xc00222e4
c0010c46:	56                   	push   esi
c0010c47:	e8 d2 fe ff ff       	call   c0010b1e <string_ends_with(char const*, char const*)>
c0010c4c:	83 c4 10             	add    esp,0x10
c0010c4f:	85 c0                	test   eax,eax
c0010c51:	75 9e                	jne    c0010bf1 <SysOpen(regs*)+0x88>
c0010c53:	83 ec 08             	sub    esp,0x8
c0010c56:	68 ee 22 02 c0       	push   0xc00222ee
c0010c5b:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010c5e:	50                   	push   eax
c0010c5f:	e8 ba fe ff ff       	call   c0010b1e <string_ends_with(char const*, char const*)>
c0010c64:	83 c4 10             	add    esp,0x10
c0010c67:	85 c0                	test   eax,eax
c0010c69:	0f 85 eb 00 00 00    	jne    c0010d5a <SysOpen(regs*)+0x1f1>
c0010c6f:	83 ec 08             	sub    esp,0x8
c0010c72:	68 f3 22 02 c0       	push   0xc00222f3
c0010c77:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010c7a:	50                   	push   eax
c0010c7b:	e8 9e fe ff ff       	call   c0010b1e <string_ends_with(char const*, char const*)>
c0010c80:	83 c4 10             	add    esp,0x10
c0010c83:	85 c0                	test   eax,eax
c0010c85:	0f 85 cf 00 00 00    	jne    c0010d5a <SysOpen(regs*)+0x1f1>
c0010c8b:	83 ec 08             	sub    esp,0x8
c0010c8e:	68 ef 22 02 c0       	push   0xc00222ef
c0010c93:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0010c96:	51                   	push   ecx
c0010c97:	e8 e4 fa fe ff       	call   c0000780 <strcmp>
c0010c9c:	83 c4 10             	add    esp,0x10
c0010c9f:	85 c0                	test   eax,eax
c0010ca1:	0f 84 b3 00 00 00    	je     c0010d5a <SysOpen(regs*)+0x1f1>
c0010ca7:	83 ec 08             	sub    esp,0x8
c0010caa:	68 ee 22 02 c0       	push   0xc00222ee
c0010caf:	56                   	push   esi
c0010cb0:	e8 69 fe ff ff       	call   c0010b1e <string_ends_with(char const*, char const*)>
c0010cb5:	83 c4 10             	add    esp,0x10
c0010cb8:	85 c0                	test   eax,eax
c0010cba:	0f 85 9a 00 00 00    	jne    c0010d5a <SysOpen(regs*)+0x1f1>
c0010cc0:	83 ec 0c             	sub    esp,0xc
c0010cc3:	68 14 01 00 00       	push   0x114
c0010cc8:	e8 03 dc ff ff       	call   c000e8d0 <malloc>
c0010ccd:	83 c4 0c             	add    esp,0xc
c0010cd0:	89 c6                	mov    esi,eax
c0010cd2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010cd7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010cda:	50                   	push   eax
c0010cdb:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0010cde:	52                   	push   edx
c0010cdf:	56                   	push   esi
c0010ce0:	e8 27 74 ff ff       	call   c000810c <File::File(char const*, Process*)>
c0010ce5:	83 c4 10             	add    esp,0x10
c0010ce8:	85 f6                	test   esi,esi
c0010cea:	74 5b                	je     c0010d47 <SysOpen(regs*)+0x1de>
c0010cec:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0010cef:	0f b6 c2             	movzx  eax,dl
c0010cf2:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0010cf5:	89 d0                	mov    eax,edx
c0010cf7:	83 e0 01             	and    eax,0x1
c0010cfa:	f6 c2 02             	test   dl,0x2
c0010cfd:	74 03                	je     c0010d02 <SysOpen(regs*)+0x199>
c0010cff:	83 c8 02             	or     eax,0x2
c0010d02:	f6 c2 04             	test   dl,0x4
c0010d05:	74 03                	je     c0010d0a <SysOpen(regs*)+0x1a1>
c0010d07:	83 c8 04             	or     eax,0x4
c0010d0a:	f6 c2 08             	test   dl,0x8
c0010d0d:	74 03                	je     c0010d12 <SysOpen(regs*)+0x1a9>
c0010d0f:	83 c8 0a             	or     eax,0xa
c0010d12:	80 e2 10             	and    dl,0x10
c0010d15:	74 03                	je     c0010d1a <SysOpen(regs*)+0x1b1>
c0010d17:	83 c8 12             	or     eax,0x12
c0010d1a:	83 ec 08             	sub    esp,0x8
c0010d1d:	50                   	push   eax
c0010d1e:	56                   	push   esi
c0010d1f:	e8 06 74 ff ff       	call   c000812a <File::open(FileOpenMode)>
c0010d24:	83 c4 10             	add    esp,0x10
c0010d27:	85 c0                	test   eax,eax
c0010d29:	75 1c                	jne    c0010d47 <SysOpen(regs*)+0x1de>
c0010d2b:	83 ec 0c             	sub    esp,0xc
c0010d2e:	56                   	push   esi
c0010d2f:	e8 00 0e 00 00       	call   c0011b34 <UnixFile::getFileDescriptor()>
c0010d34:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0010d37:	83 c4 10             	add    esp,0x10
c0010d3a:	89 02                	mov    DWORD PTR [edx],eax
c0010d3c:	c1 f8 1f             	sar    eax,0x1f
c0010d3f:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0010d42:	e9 ba fe ff ff       	jmp    c0010c01 <SysOpen(regs*)+0x98>
c0010d47:	81 c4 04 01 00 00    	add    esp,0x104
c0010d4d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010d52:	5b                   	pop    ebx
c0010d53:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010d58:	5e                   	pop    esi
c0010d59:	c3                   	ret    
c0010d5a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010d5d:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0010d63:	e9 92 fe ff ff       	jmp    c0010bfa <SysOpen(regs*)+0x91>

c0010d68 <KeSystemCall(regs*, void*)>:
c0010d68:	56                   	push   esi
c0010d69:	53                   	push   ebx
c0010d6a:	50                   	push   eax
c0010d6b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010d6f:	8b 5e 2c             	mov    ebx,DWORD PTR [esi+0x2c]
c0010d72:	83 fb 40             	cmp    ebx,0x40
c0010d75:	77 25                	ja     c0010d9c <KeSystemCall(regs*, void*)+0x34>
c0010d77:	8b 04 9d 60 40 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdbfa0]
c0010d7e:	85 c0                	test   eax,eax
c0010d80:	74 1a                	je     c0010d9c <KeSystemCall(regs*, void*)+0x34>
c0010d82:	83 ec 0c             	sub    esp,0xc
c0010d85:	56                   	push   esi
c0010d86:	ff d0                	call   eax
c0010d88:	83 c4 10             	add    esp,0x10
c0010d8b:	83 fb 2f             	cmp    ebx,0x2f
c0010d8e:	89 46 2c             	mov    DWORD PTR [esi+0x2c],eax
c0010d91:	75 19                	jne    c0010dac <KeSystemCall(regs*, void*)+0x44>
c0010d93:	c6 05 2d 93 02 c0 01 	mov    BYTE PTR ds:0xc002932d,0x1
c0010d9a:	eb 10                	jmp    c0010dac <KeSystemCall(regs*, void*)+0x44>
c0010d9c:	56                   	push   esi
c0010d9d:	56                   	push   esi
c0010d9e:	53                   	push   ebx
c0010d9f:	68 f8 22 02 c0       	push   0xc00222f8
c0010da4:	e8 a5 61 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0010da9:	83 c4 10             	add    esp,0x10
c0010dac:	59                   	pop    ecx
c0010dad:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0010db2:	31 d2                	xor    edx,edx
c0010db4:	5b                   	pop    ebx
c0010db5:	5e                   	pop    esi
c0010db6:	c3                   	ret    
c0010db7:	90                   	nop

c0010db8 <VgaText::isAtty()>:
c0010db8:	b0 01                	mov    al,0x1
c0010dba:	c3                   	ret    
c0010dbb:	90                   	nop

c0010dbc <VgaText::~VgaText()>:
c0010dbc:	83 ec 0c             	sub    esp,0xc
c0010dbf:	ba 40 23 02 c0       	mov    edx,0xc0022340
c0010dc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010dc8:	89 10                	mov    DWORD PTR [eax],edx
c0010dca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010dce:	83 ec 0c             	sub    esp,0xc
c0010dd1:	50                   	push   eax
c0010dd2:	e8 4b 0f 00 00       	call   c0011d22 <UnixFile::~UnixFile()>
c0010dd7:	83 c4 10             	add    esp,0x10
c0010dda:	90                   	nop
c0010ddb:	83 c4 0c             	add    esp,0xc
c0010dde:	c3                   	ret    
c0010ddf:	90                   	nop

c0010de0 <VgaText::~VgaText()>:
c0010de0:	83 ec 0c             	sub    esp,0xc
c0010de3:	83 ec 0c             	sub    esp,0xc
c0010de6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010dea:	e8 cd ff ff ff       	call   c0010dbc <VgaText::~VgaText()>
c0010def:	83 c4 10             	add    esp,0x10
c0010df2:	83 ec 08             	sub    esp,0x8
c0010df5:	68 84 01 00 00       	push   0x184
c0010dfa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010dfe:	e8 60 b8 ff ff       	call   c000c663 <operator delete(void*, unsigned long)>
c0010e03:	83 c4 10             	add    esp,0x10
c0010e06:	83 c4 0c             	add    esp,0xc
c0010e09:	c3                   	ret    

c0010e0a <VgaText::read(unsigned long long, void*, int*)>:
c0010e0a:	83 ec 10             	sub    esp,0x10
c0010e0d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010e11:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0010e15:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e19:	e8 86 8d ff ff       	call   c0009ba4 <readKeyboard(VgaText*, char*, unsigned long)>
c0010e1e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0010e22:	89 02                	mov    DWORD PTR [edx],eax
c0010e24:	31 c0                	xor    eax,eax
c0010e26:	83 c4 1c             	add    esp,0x1c
c0010e29:	c3                   	ret    

c0010e2a <setTerminalScrollLock(bool)>:
c0010e2a:	c3                   	ret    

c0010e2b <doTerminalCycle()>:
c0010e2b:	c3                   	ret    

c0010e2c <addToTerminalCycle(VgaText*)>:
c0010e2c:	c3                   	ret    

c0010e2d <scrollTerminalScrollLock(int)>:
c0010e2d:	c3                   	ret    

c0010e2e <VgaText::updateTitle()>:
c0010e2e:	c3                   	ret    
c0010e2f:	90                   	nop

c0010e30 <VgaText::load()>:
c0010e30:	c3                   	ret    
c0010e31:	90                   	nop

c0010e32 <VgaText::updateCursor()>:
c0010e32:	83 ec 14             	sub    esp,0x14
c0010e35:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010e39:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0010e3c:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0010e3f:	e8 10 87 00 00       	call   c0019554 <HalConsoleCursorUpdate(int, int)>
c0010e44:	83 c4 1c             	add    esp,0x1c
c0010e47:	c3                   	ret    

c0010e48 <VgaText::doANSI_SGR(int)>:
c0010e48:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010e4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010e50:	85 d2                	test   edx,edx
c0010e52:	75 0b                	jne    c0010e5f <VgaText::doANSI_SGR(int)+0x17>
c0010e54:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0010e57:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0010e5a:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0010e5d:	eb 59                	jmp    c0010eb8 <VgaText::doANSI_SGR(int)+0x70>
c0010e5f:	83 fa 07             	cmp    edx,0x7
c0010e62:	75 0b                	jne    c0010e6f <VgaText::doANSI_SGR(int)+0x27>
c0010e64:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0010e67:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0010e6a:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c0010e6d:	eb 49                	jmp    c0010eb8 <VgaText::doANSI_SGR(int)+0x70>
c0010e6f:	83 fa 1b             	cmp    edx,0x1b
c0010e72:	74 e0                	je     c0010e54 <VgaText::doANSI_SGR(int)+0xc>
c0010e74:	8d 4a e2             	lea    ecx,[edx-0x1e]
c0010e77:	83 f9 07             	cmp    ecx,0x7
c0010e7a:	77 09                	ja     c0010e85 <VgaText::doANSI_SGR(int)+0x3d>
c0010e7c:	8b 14 8d a0 41 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdbe60]
c0010e83:	eb 20                	jmp    c0010ea5 <VgaText::doANSI_SGR(int)+0x5d>
c0010e85:	8d 4a d8             	lea    ecx,[edx-0x28]
c0010e88:	83 f9 07             	cmp    ecx,0x7
c0010e8b:	77 09                	ja     c0010e96 <VgaText::doANSI_SGR(int)+0x4e>
c0010e8d:	8b 14 8d a0 41 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdbe60]
c0010e94:	eb 22                	jmp    c0010eb8 <VgaText::doANSI_SGR(int)+0x70>
c0010e96:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0010e99:	83 f9 07             	cmp    ecx,0x7
c0010e9c:	77 0b                	ja     c0010ea9 <VgaText::doANSI_SGR(int)+0x61>
c0010e9e:	8b 14 95 58 40 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbfa8]
c0010ea5:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0010ea8:	c3                   	ret    
c0010ea9:	8d 4a 9c             	lea    ecx,[edx-0x64]
c0010eac:	83 f9 07             	cmp    ecx,0x7
c0010eaf:	77 0a                	ja     c0010ebb <VgaText::doANSI_SGR(int)+0x73>
c0010eb1:	8b 14 95 30 40 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbfd0]
c0010eb8:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0010ebb:	c3                   	ret    

c0010ebc <VgaText::setDefaultBgColour(VgaColour)>:
c0010ebc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010ec0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010ec4:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0010ec7:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0010eca:	c3                   	ret    
c0010ecb:	90                   	nop

c0010ecc <VgaText::setDefaultFgColour(VgaColour)>:
c0010ecc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010ed0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010ed4:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0010ed7:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0010eda:	c3                   	ret    
c0010edb:	90                   	nop

c0010edc <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c0010edc:	53                   	push   ebx
c0010edd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010ee1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0010ee5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010ee9:	51                   	push   ecx
c0010eea:	e8 cd ff ff ff       	call   c0010ebc <VgaText::setDefaultBgColour(VgaColour)>
c0010eef:	58                   	pop    eax
c0010ef0:	5a                   	pop    edx
c0010ef1:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0010ef5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0010ef9:	5b                   	pop    ebx
c0010efa:	eb d0                	jmp    c0010ecc <VgaText::setDefaultFgColour(VgaColour)>

c0010efc <VgaText::setTitleTextColour(VgaColour)>:
c0010efc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010f00:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010f04:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0010f07:	c3                   	ret    

c0010f08 <VgaText::setTitleColour(VgaColour)>:
c0010f08:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010f0c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010f10:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0010f13:	c3                   	ret    

c0010f14 <VgaText::setTitle(char*)>:
c0010f14:	c3                   	ret    
c0010f15:	90                   	nop

c0010f16 <VgaText::combineColours(unsigned char, unsigned char)>:
c0010f16:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010f1a:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0010f1f:	83 e0 0f             	and    eax,0xf
c0010f22:	c1 e2 04             	shl    edx,0x4
c0010f25:	09 d0                	or     eax,edx
c0010f27:	c3                   	ret    

c0010f28 <VgaText::scrollScreen()>:
c0010f28:	55                   	push   ebp
c0010f29:	57                   	push   edi
c0010f2a:	56                   	push   esi
c0010f2b:	be 01 00 00 00       	mov    esi,0x1
c0010f30:	53                   	push   ebx
c0010f31:	83 ec 0c             	sub    esp,0xc
c0010f34:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010f38:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0010f3b:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c0010f41:	31 ff                	xor    edi,edi
c0010f43:	01 e9                	add    ecx,ebp
c0010f45:	8a 01                	mov    al,BYTE PTR [ecx]
c0010f47:	83 fe 18             	cmp    esi,0x18
c0010f4a:	88 81 60 ff ff ff    	mov    BYTE PTR [ecx-0xa0],al
c0010f50:	75 20                	jne    c0010f72 <VgaText::scrollScreen()+0x4a>
c0010f52:	f7 c7 01 00 00 00    	test   edi,0x1
c0010f58:	74 15                	je     c0010f6f <VgaText::scrollScreen()+0x47>
c0010f5a:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0010f5e:	50                   	push   eax
c0010f5f:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0010f63:	50                   	push   eax
c0010f64:	e8 ad ff ff ff       	call   c0010f16 <VgaText::combineColours(unsigned char, unsigned char)>
c0010f69:	5a                   	pop    edx
c0010f6a:	5a                   	pop    edx
c0010f6b:	88 01                	mov    BYTE PTR [ecx],al
c0010f6d:	eb 03                	jmp    c0010f72 <VgaText::scrollScreen()+0x4a>
c0010f6f:	c6 01 20             	mov    BYTE PTR [ecx],0x20
c0010f72:	47                   	inc    edi
c0010f73:	41                   	inc    ecx
c0010f74:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0010f7a:	75 c9                	jne    c0010f45 <VgaText::scrollScreen()+0x1d>
c0010f7c:	46                   	inc    esi
c0010f7d:	83 fe 19             	cmp    esi,0x19
c0010f80:	75 b9                	jne    c0010f3b <VgaText::scrollScreen()+0x13>
c0010f82:	39 1d 34 be 02 c0    	cmp    DWORD PTR ds:0xc002be34,ebx
c0010f88:	75 1f                	jne    c0010fa9 <VgaText::scrollScreen()+0x81>
c0010f8a:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0010f8e:	74 05                	je     c0010f95 <VgaText::scrollScreen()+0x6d>
c0010f90:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c0010f93:	eb 14                	jmp    c0010fa9 <VgaText::scrollScreen()+0x81>
c0010f95:	50                   	push   eax
c0010f96:	50                   	push   eax
c0010f97:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0010f9b:	50                   	push   eax
c0010f9c:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0010fa0:	50                   	push   eax
c0010fa1:	e8 42 84 00 00       	call   c00193e8 <HalConsoleScroll(int, int)>
c0010fa6:	83 c4 10             	add    esp,0x10
c0010fa9:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0010fad:	83 c4 0c             	add    esp,0xc
c0010fb0:	5b                   	pop    ebx
c0010fb1:	5e                   	pop    esi
c0010fb2:	5f                   	pop    edi
c0010fb3:	5d                   	pop    ebp
c0010fb4:	e9 79 fe ff ff       	jmp    c0010e32 <VgaText::updateCursor()>
c0010fb9:	90                   	nop

c0010fba <VgaText::combineCharAndColour(char, unsigned char)>:
c0010fba:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0010fbf:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c0010fc4:	c1 e0 08             	shl    eax,0x8
c0010fc7:	09 d0                	or     eax,edx
c0010fc9:	c3                   	ret    

c0010fca <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c0010fca:	55                   	push   ebp
c0010fcb:	57                   	push   edi
c0010fcc:	56                   	push   esi
c0010fcd:	53                   	push   ebx
c0010fce:	83 ec 1c             	sub    esp,0x1c
c0010fd1:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0010fd5:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0010fd9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0010fdd:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0010fe1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010fe5:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0010fe9:	0f b6 c3             	movzx  eax,bl
c0010fec:	50                   	push   eax
c0010fed:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0010ff2:	50                   	push   eax
c0010ff3:	e8 1e ff ff ff       	call   c0010f16 <VgaText::combineColours(unsigned char, unsigned char)>
c0010ff8:	5a                   	pop    edx
c0010ff9:	59                   	pop    ecx
c0010ffa:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c0010fff:	0f b6 c0             	movzx  eax,al
c0011002:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0011006:	50                   	push   eax
c0011007:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001100b:	e8 aa ff ff ff       	call   c0010fba <VgaText::combineCharAndColour(char, unsigned char)>
c0011010:	5a                   	pop    edx
c0011011:	6b d7 50             	imul   edx,edi,0x50
c0011014:	59                   	pop    ecx
c0011015:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0011018:	01 f2                	add    edx,esi
c001101a:	0f b7 d2             	movzx  edx,dx
c001101d:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c0011021:	39 2d 34 be 02 c0    	cmp    DWORD PTR ds:0xc002be34,ebp
c0011027:	75 28                	jne    c0011051 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x87>
c0011029:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001102d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011031:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c0011035:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c0011039:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001103d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011041:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0011045:	83 c4 1c             	add    esp,0x1c
c0011048:	5b                   	pop    ebx
c0011049:	5e                   	pop    esi
c001104a:	5f                   	pop    edi
c001104b:	5d                   	pop    ebp
c001104c:	e9 9f 84 00 00       	jmp    c00194f0 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0011051:	83 c4 1c             	add    esp,0x1c
c0011054:	5b                   	pop    ebx
c0011055:	5e                   	pop    esi
c0011056:	5f                   	pop    edi
c0011057:	5d                   	pop    ebp
c0011058:	c3                   	ret    
c0011059:	90                   	nop

c001105a <VgaText::getCursorX()>:
c001105a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001105e:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0011061:	c3                   	ret    

c0011062 <VgaText::getCursorY()>:
c0011062:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011066:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0011069:	c3                   	ret    

c001106a <VgaText::setCursor(int, int)>:
c001106a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001106e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011072:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0011075:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011079:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001107c:	e9 b1 fd ff ff       	jmp    c0010e32 <VgaText::updateCursor()>

c0011081 <setActiveTerminal(VgaText*)>:
c0011081:	53                   	push   ebx
c0011082:	83 ec 08             	sub    esp,0x8
c0011085:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011089:	85 db                	test   ebx,ebx
c001108b:	75 11                	jne    c001109e <setActiveTerminal(VgaText*)+0x1d>
c001108d:	c7 44 24 10 0c 23 02 c0 	mov    DWORD PTR [esp+0x10],0xc002230c
c0011095:	83 c4 08             	add    esp,0x8
c0011098:	5b                   	pop    ebx
c0011099:	e9 88 db ff ff       	jmp    c000ec26 <KePanic(char const*)>
c001109e:	a1 34 be 02 c0       	mov    eax,ds:0xc002be34
c00110a3:	85 c0                	test   eax,eax
c00110a5:	74 0c                	je     c00110b3 <setActiveTerminal(VgaText*)+0x32>
c00110a7:	83 ec 0c             	sub    esp,0xc
c00110aa:	50                   	push   eax
c00110ab:	e8 82 fd ff ff       	call   c0010e32 <VgaText::updateCursor()>
c00110b0:	83 c4 10             	add    esp,0x10
c00110b3:	50                   	push   eax
c00110b4:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00110b7:	89 1d 34 be 02 c0    	mov    DWORD PTR ds:0xc002be34,ebx
c00110bd:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00110c0:	53                   	push   ebx
c00110c1:	e8 a4 ff ff ff       	call   c001106a <VgaText::setCursor(int, int)>
c00110c6:	83 c4 18             	add    esp,0x18
c00110c9:	5b                   	pop    ebx
c00110ca:	c3                   	ret    
c00110cb:	90                   	nop

c00110cc <VgaText::clearScreen()>:
c00110cc:	57                   	push   edi
c00110cd:	56                   	push   esi
c00110ce:	31 f6                	xor    esi,esi
c00110d0:	53                   	push   ebx
c00110d1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00110d5:	52                   	push   edx
c00110d6:	6a 00                	push   0x0
c00110d8:	6a 00                	push   0x0
c00110da:	53                   	push   ebx
c00110db:	e8 8a ff ff ff       	call   c001106a <VgaText::setCursor(int, int)>
c00110e0:	83 c4 10             	add    esp,0x10
c00110e3:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00110ea:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c00110ed:	7e 20                	jle    c001110f <VgaText::clearScreen()+0x43>
c00110ef:	31 ff                	xor    edi,edi
c00110f1:	50                   	push   eax
c00110f2:	50                   	push   eax
c00110f3:	56                   	push   esi
c00110f4:	57                   	push   edi
c00110f5:	47                   	inc    edi
c00110f6:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00110f9:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00110fc:	6a 20                	push   0x20
c00110fe:	53                   	push   ebx
c00110ff:	e8 c6 fe ff ff       	call   c0010fca <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0011104:	83 c4 20             	add    esp,0x20
c0011107:	83 ff 50             	cmp    edi,0x50
c001110a:	75 e5                	jne    c00110f1 <VgaText::clearScreen()+0x25>
c001110c:	46                   	inc    esi
c001110d:	eb db                	jmp    c00110ea <VgaText::clearScreen()+0x1e>
c001110f:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0011116:	5b                   	pop    ebx
c0011117:	5e                   	pop    esi
c0011118:	5f                   	pop    edi
c0011119:	c3                   	ret    

c001111a <VgaText::setCursorX(int)>:
c001111a:	83 ec 10             	sub    esp,0x10
c001111d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011121:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0011124:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011128:	50                   	push   eax
c0011129:	e8 3c ff ff ff       	call   c001106a <VgaText::setCursor(int, int)>
c001112e:	83 c4 1c             	add    esp,0x1c
c0011131:	c3                   	ret    

c0011132 <VgaText::setCursorY(int)>:
c0011132:	83 ec 10             	sub    esp,0x10
c0011135:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011139:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001113d:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0011140:	50                   	push   eax
c0011141:	e8 24 ff ff ff       	call   c001106a <VgaText::setCursor(int, int)>
c0011146:	83 c4 1c             	add    esp,0x1c
c0011149:	c3                   	ret    

c001114a <VgaText::incrementCursor(bool)>:
c001114a:	56                   	push   esi
c001114b:	53                   	push   ebx
c001114c:	51                   	push   ecx
c001114d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011151:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0011155:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0011158:	40                   	inc    eax
c0011159:	83 f8 50             	cmp    eax,0x50
c001115c:	74 05                	je     c0011163 <VgaText::incrementCursor(bool)+0x19>
c001115e:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0011161:	eb 24                	jmp    c0011187 <VgaText::incrementCursor(bool)+0x3d>
c0011163:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001116a:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001116d:	8d 50 01             	lea    edx,[eax+0x1]
c0011170:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0011173:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0011176:	75 0f                	jne    c0011187 <VgaText::incrementCursor(bool)+0x3d>
c0011178:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c001117b:	83 ec 0c             	sub    esp,0xc
c001117e:	53                   	push   ebx
c001117f:	e8 a4 fd ff ff       	call   c0010f28 <VgaText::scrollScreen()>
c0011184:	83 c4 10             	add    esp,0x10
c0011187:	89 f0                	mov    eax,esi
c0011189:	84 c0                	test   al,al
c001118b:	74 0c                	je     c0011199 <VgaText::incrementCursor(bool)+0x4f>
c001118d:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0011191:	5a                   	pop    edx
c0011192:	5b                   	pop    ebx
c0011193:	5e                   	pop    esi
c0011194:	e9 99 fc ff ff       	jmp    c0010e32 <VgaText::updateCursor()>
c0011199:	58                   	pop    eax
c001119a:	5b                   	pop    ebx
c001119b:	5e                   	pop    esi
c001119c:	c3                   	ret    
c001119d:	90                   	nop

c001119e <VgaText::decrementCursor(bool)>:
c001119e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00111a2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00111a6:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00111a9:	85 c0                	test   eax,eax
c00111ab:	74 04                	je     c00111b1 <VgaText::decrementCursor(bool)+0x13>
c00111ad:	48                   	dec    eax
c00111ae:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00111b1:	84 c9                	test   cl,cl
c00111b3:	74 09                	je     c00111be <VgaText::decrementCursor(bool)+0x20>
c00111b5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00111b9:	e9 74 fc ff ff       	jmp    c0010e32 <VgaText::updateCursor()>
c00111be:	c3                   	ret    
c00111bf:	90                   	nop

c00111c0 <VgaText::putchar(char, VgaColour, VgaColour)>:
c00111c0:	53                   	push   ebx
c00111c1:	83 ec 08             	sub    esp,0x8
c00111c4:	0f be 44 24 14       	movsx  eax,BYTE PTR [esp+0x14]
c00111c9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00111cd:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00111d1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00111d5:	83 f8 07             	cmp    eax,0x7
c00111d8:	75 21                	jne    c00111fb <VgaText::putchar(char, VgaColour, VgaColour)+0x3b>
c00111da:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00111e2:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c00111ea:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c00111f2:	83 c4 08             	add    esp,0x8
c00111f5:	5b                   	pop    ebx
c00111f6:	e9 b0 77 ff ff       	jmp    c00089ab <KeBeep(int, int, bool)>
c00111fb:	83 f8 0d             	cmp    eax,0xd
c00111fe:	75 09                	jne    c0011209 <VgaText::putchar(char, VgaColour, VgaColour)+0x49>
c0011200:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0011207:	eb 2d                	jmp    c0011236 <VgaText::putchar(char, VgaColour, VgaColour)+0x76>
c0011209:	83 f8 0a             	cmp    eax,0xa
c001120c:	75 31                	jne    c001123f <VgaText::putchar(char, VgaColour, VgaColour)+0x7f>
c001120e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0011215:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0011218:	8d 50 01             	lea    edx,[eax+0x1]
c001121b:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c001121e:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0011221:	75 0f                	jne    c0011232 <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c0011223:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0011226:	83 ec 0c             	sub    esp,0xc
c0011229:	53                   	push   ebx
c001122a:	e8 f9 fc ff ff       	call   c0010f28 <VgaText::scrollScreen()>
c001122f:	83 c4 10             	add    esp,0x10
c0011232:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0011236:	83 c4 08             	add    esp,0x8
c0011239:	5b                   	pop    ebx
c001123a:	e9 f3 fb ff ff       	jmp    c0010e32 <VgaText::updateCursor()>
c001123f:	83 f8 08             	cmp    eax,0x8
c0011242:	75 25                	jne    c0011269 <VgaText::putchar(char, VgaColour, VgaColour)+0xa9>
c0011244:	50                   	push   eax
c0011245:	50                   	push   eax
c0011246:	6a 01                	push   0x1
c0011248:	53                   	push   ebx
c0011249:	e8 50 ff ff ff       	call   c001119e <VgaText::decrementCursor(bool)>
c001124e:	5a                   	pop    edx
c001124f:	59                   	pop    ecx
c0011250:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0011253:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0011256:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0011259:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001125c:	6a 20                	push   0x20
c001125e:	53                   	push   ebx
c001125f:	e8 66 fd ff ff       	call   c0010fca <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0011264:	83 c4 28             	add    esp,0x28
c0011267:	5b                   	pop    ebx
c0011268:	c3                   	ret    
c0011269:	83 ec 08             	sub    esp,0x8
c001126c:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c001126f:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0011272:	51                   	push   ecx
c0011273:	52                   	push   edx
c0011274:	50                   	push   eax
c0011275:	53                   	push   ebx
c0011276:	e8 4f fd ff ff       	call   c0010fca <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c001127b:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c001127f:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0011287:	83 c4 28             	add    esp,0x28
c001128a:	5b                   	pop    ebx
c001128b:	e9 ba fe ff ff       	jmp    c001114a <VgaText::incrementCursor(bool)>

c0011290 <VgaText::putchar(char)>:
c0011290:	57                   	push   edi
c0011291:	56                   	push   esi
c0011292:	53                   	push   ebx
c0011293:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011297:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001129b:	0f be c2             	movsx  eax,dl
c001129e:	83 f8 5b             	cmp    eax,0x5b
c00112a1:	75 18                	jne    c00112bb <VgaText::putchar(char)+0x2b>
c00112a3:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c00112a7:	74 20                	je     c00112c9 <VgaText::putchar(char)+0x39>
c00112a9:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c00112af:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c00112b6:	e9 b8 00 00 00       	jmp    c0011373 <VgaText::putchar(char)+0xe3>
c00112bb:	83 f8 1b             	cmp    eax,0x1b
c00112be:	75 09                	jne    c00112c9 <VgaText::putchar(char)+0x39>
c00112c0:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c00112c4:	e9 aa 00 00 00       	jmp    c0011373 <VgaText::putchar(char)+0xe3>
c00112c9:	0f b6 7b 41          	movzx  edi,BYTE PTR [ebx+0x41]
c00112cd:	89 f9                	mov    ecx,edi
c00112cf:	84 c9                	test   cl,cl
c00112d1:	0f 84 8c 00 00 00    	je     c0011363 <VgaText::putchar(char)+0xd3>
c00112d7:	8d 4a c0             	lea    ecx,[edx-0x40]
c00112da:	80 f9 3e             	cmp    cl,0x3e
c00112dd:	77 70                	ja     c001134f <VgaText::putchar(char)+0xbf>
c00112df:	83 f8 6d             	cmp    eax,0x6d
c00112e2:	75 3f                	jne    c0011323 <VgaText::putchar(char)+0x93>
c00112e4:	31 f6                	xor    esi,esi
c00112e6:	31 d2                	xor    edx,edx
c00112e8:	31 c0                	xor    eax,eax
c00112ea:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c00112ed:	7e 25                	jle    c0011314 <VgaText::putchar(char)+0x84>
c00112ef:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c00112f4:	83 fa 3b             	cmp    edx,0x3b
c00112f7:	75 0f                	jne    c0011308 <VgaText::putchar(char)+0x78>
c00112f9:	50                   	push   eax
c00112fa:	53                   	push   ebx
c00112fb:	e8 48 fb ff ff       	call   c0010e48 <VgaText::doANSI_SGR(int)>
c0011300:	31 d2                	xor    edx,edx
c0011302:	59                   	pop    ecx
c0011303:	58                   	pop    eax
c0011304:	31 c0                	xor    eax,eax
c0011306:	eb 09                	jmp    c0011311 <VgaText::putchar(char)+0x81>
c0011308:	6b c0 0a             	imul   eax,eax,0xa
c001130b:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c001130f:	89 fa                	mov    edx,edi
c0011311:	46                   	inc    esi
c0011312:	eb d6                	jmp    c00112ea <VgaText::putchar(char)+0x5a>
c0011314:	84 d2                	test   dl,dl
c0011316:	74 2f                	je     c0011347 <VgaText::putchar(char)+0xb7>
c0011318:	50                   	push   eax
c0011319:	53                   	push   ebx
c001131a:	e8 29 fb ff ff       	call   c0010e48 <VgaText::doANSI_SGR(int)>
c001131f:	58                   	pop    eax
c0011320:	5a                   	pop    edx
c0011321:	eb 24                	jmp    c0011347 <VgaText::putchar(char)+0xb7>
c0011323:	83 f8 4a             	cmp    eax,0x4a
c0011326:	75 1f                	jne    c0011347 <VgaText::putchar(char)+0xb7>
c0011328:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c001132c:	75 19                	jne    c0011347 <VgaText::putchar(char)+0xb7>
c001132e:	83 ec 0c             	sub    esp,0xc
c0011331:	53                   	push   ebx
c0011332:	e8 95 fd ff ff       	call   c00110cc <VgaText::clearScreen()>
c0011337:	83 c4 0c             	add    esp,0xc
c001133a:	6a 00                	push   0x0
c001133c:	6a 00                	push   0x0
c001133e:	53                   	push   ebx
c001133f:	e8 26 fd ff ff       	call   c001106a <VgaText::setCursor(int, int)>
c0011344:	83 c4 10             	add    esp,0x10
c0011347:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c001134d:	eb 24                	jmp    c0011373 <VgaText::putchar(char)+0xe3>
c001134f:	8b 43 54             	mov    eax,DWORD PTR [ebx+0x54]
c0011352:	83 f8 0e             	cmp    eax,0xe
c0011355:	7f 1c                	jg     c0011373 <VgaText::putchar(char)+0xe3>
c0011357:	8d 48 01             	lea    ecx,[eax+0x1]
c001135a:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c001135d:	88 54 03 42          	mov    BYTE PTR [ebx+eax*1+0x42],dl
c0011361:	eb 10                	jmp    c0011373 <VgaText::putchar(char)+0xe3>
c0011363:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0011366:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0011369:	50                   	push   eax
c001136a:	53                   	push   ebx
c001136b:	e8 50 fe ff ff       	call   c00111c0 <VgaText::putchar(char, VgaColour, VgaColour)>
c0011370:	83 c4 10             	add    esp,0x10
c0011373:	5b                   	pop    ebx
c0011374:	5e                   	pop    esi
c0011375:	5f                   	pop    edi
c0011376:	c3                   	ret    
c0011377:	90                   	nop

c0011378 <VgaText::putx(unsigned int)>:
c0011378:	57                   	push   edi
c0011379:	b9 11 00 00 00       	mov    ecx,0x11
c001137e:	56                   	push   esi
c001137f:	be 1a 23 02 c0       	mov    esi,0xc002231a
c0011384:	53                   	push   ebx
c0011385:	83 ec 20             	sub    esp,0x20
c0011388:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001138c:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0011390:	fc                   	cld    
c0011391:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011393:	be 08 00 00 00       	mov    esi,0x8
c0011398:	50                   	push   eax
c0011399:	50                   	push   eax
c001139a:	89 d8                	mov    eax,ebx
c001139c:	c1 e8 1c             	shr    eax,0x1c
c001139f:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c00113a4:	c1 e3 04             	shl    ebx,0x4
c00113a7:	50                   	push   eax
c00113a8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00113ac:	e8 df fe ff ff       	call   c0011290 <VgaText::putchar(char)>
c00113b1:	83 c4 10             	add    esp,0x10
c00113b4:	4e                   	dec    esi
c00113b5:	75 e1                	jne    c0011398 <VgaText::putx(unsigned int)+0x20>
c00113b7:	83 c4 20             	add    esp,0x20
c00113ba:	5b                   	pop    ebx
c00113bb:	5e                   	pop    esi
c00113bc:	5f                   	pop    edi
c00113bd:	c3                   	ret    

c00113be <VgaText::puts(char const*)>:
c00113be:	53                   	push   ebx
c00113bf:	83 ec 08             	sub    esp,0x8
c00113c2:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00113c6:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00113c9:	85 c0                	test   eax,eax
c00113cb:	74 12                	je     c00113df <VgaText::puts(char const*)+0x21>
c00113cd:	51                   	push   ecx
c00113ce:	43                   	inc    ebx
c00113cf:	51                   	push   ecx
c00113d0:	50                   	push   eax
c00113d1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00113d5:	e8 b6 fe ff ff       	call   c0011290 <VgaText::putchar(char)>
c00113da:	83 c4 10             	add    esp,0x10
c00113dd:	eb e7                	jmp    c00113c6 <VgaText::puts(char const*)+0x8>
c00113df:	83 c4 08             	add    esp,0x8
c00113e2:	5b                   	pop    ebx
c00113e3:	c3                   	ret    

c00113e4 <VgaText::write(unsigned long long, void*, int*)>:
c00113e4:	55                   	push   ebp
c00113e5:	57                   	push   edi
c00113e6:	56                   	push   esi
c00113e7:	53                   	push   ebx
c00113e8:	83 ec 0c             	sub    esp,0xc
c00113eb:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00113ef:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00113f3:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00113f7:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c00113fe:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0011401:	39 eb                	cmp    ebx,ebp
c0011403:	74 13                	je     c0011418 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0011405:	50                   	push   eax
c0011406:	43                   	inc    ebx
c0011407:	50                   	push   eax
c0011408:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c001140c:	50                   	push   eax
c001140d:	56                   	push   esi
c001140e:	e8 7d fe ff ff       	call   c0011290 <VgaText::putchar(char)>
c0011413:	83 c4 10             	add    esp,0x10
c0011416:	eb e9                	jmp    c0011401 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0011418:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c001141f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011423:	89 38                	mov    DWORD PTR [eax],edi
c0011425:	83 c4 0c             	add    esp,0xc
c0011428:	31 c0                	xor    eax,eax
c001142a:	5b                   	pop    ebx
c001142b:	5e                   	pop    esi
c001142c:	5f                   	pop    edi
c001142d:	5d                   	pop    ebp
c001142e:	c3                   	ret    
c001142f:	90                   	nop

c0011430 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0011430:	55                   	push   ebp
c0011431:	57                   	push   edi
c0011432:	56                   	push   esi
c0011433:	53                   	push   ebx
c0011434:	83 ec 0c             	sub    esp,0xc
c0011437:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001143b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0011440:	c6 85 81 00 00 00 01 	mov    BYTE PTR [ebp+0x81],0x1
c0011447:	50                   	push   eax
c0011448:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001144d:	50                   	push   eax
c001144e:	e8 c3 fa ff ff       	call   c0010f16 <VgaText::combineColours(unsigned char, unsigned char)>
c0011453:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c0011457:	5a                   	pop    edx
c0011458:	03 5d 14             	add    ebx,DWORD PTR [ebp+0x14]
c001145b:	59                   	pop    ecx
c001145c:	0f b6 f8             	movzx  edi,al
c001145f:	0f b7 db             	movzx  ebx,bx
c0011462:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0011466:	01 db                	add    ebx,ebx
c0011468:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c001146b:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001146e:	85 c0                	test   eax,eax
c0011470:	0f 84 ef 00 00 00    	je     c0011565 <VgaText::puts(char const*, VgaColour, VgaColour)+0x135>
c0011476:	83 f8 0d             	cmp    eax,0xd
c0011479:	75 0c                	jne    c0011487 <VgaText::puts(char const*, VgaColour, VgaColour)+0x57>
c001147b:	c7 45 14 00 00 00 00 	mov    DWORD PTR [ebp+0x14],0x0
c0011482:	e9 d8 00 00 00       	jmp    c001155f <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0011487:	83 f8 0a             	cmp    eax,0xa
c001148a:	75 44                	jne    c00114d0 <VgaText::puts(char const*, VgaColour, VgaColour)+0xa0>
c001148c:	c7 45 14 00 00 00 00 	mov    DWORD PTR [ebp+0x14],0x0
c0011493:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0011496:	8d 48 01             	lea    ecx,[eax+0x1]
c0011499:	3b 4d 10             	cmp    ecx,DWORD PTR [ebp+0x10]
c001149c:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c001149f:	75 0f                	jne    c00114b0 <VgaText::puts(char const*, VgaColour, VgaColour)+0x80>
c00114a1:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c00114a4:	83 ec 0c             	sub    esp,0xc
c00114a7:	55                   	push   ebp
c00114a8:	e8 7b fa ff ff       	call   c0010f28 <VgaText::scrollScreen()>
c00114ad:	83 c4 10             	add    esp,0x10
c00114b0:	83 ec 0c             	sub    esp,0xc
c00114b3:	55                   	push   ebp
c00114b4:	e8 79 f9 ff ff       	call   c0010e32 <VgaText::updateCursor()>
c00114b9:	83 c4 10             	add    esp,0x10
c00114bc:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c00114c0:	03 5d 14             	add    ebx,DWORD PTR [ebp+0x14]
c00114c3:	0f b7 db             	movzx  ebx,bx
c00114c6:	01 db                	add    ebx,ebx
c00114c8:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c00114cb:	e9 8f 00 00 00       	jmp    c001155f <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c00114d0:	83 f8 08             	cmp    eax,0x8
c00114d3:	75 34                	jne    c0011509 <VgaText::puts(char const*, VgaColour, VgaColour)+0xd9>
c00114d5:	51                   	push   ecx
c00114d6:	51                   	push   ecx
c00114d7:	6a 01                	push   0x1
c00114d9:	55                   	push   ebp
c00114da:	e8 bf fc ff ff       	call   c001119e <VgaText::decrementCursor(bool)>
c00114df:	5b                   	pop    ebx
c00114e0:	58                   	pop    eax
c00114e1:	ff 75 18             	push   DWORD PTR [ebp+0x18]
c00114e4:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c00114e7:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c00114ea:	ff 75 34             	push   DWORD PTR [ebp+0x34]
c00114ed:	6a 20                	push   0x20
c00114ef:	55                   	push   ebp
c00114f0:	e8 d5 fa ff ff       	call   c0010fca <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00114f5:	83 c4 20             	add    esp,0x20
c00114f8:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c00114fc:	03 5d 14             	add    ebx,DWORD PTR [ebp+0x14]
c00114ff:	0f b7 db             	movzx  ebx,bx
c0011502:	01 db                	add    ebx,ebx
c0011504:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0011507:	eb 56                	jmp    c001155f <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0011509:	52                   	push   edx
c001150a:	52                   	push   edx
c001150b:	57                   	push   edi
c001150c:	50                   	push   eax
c001150d:	e8 a8 fa ff ff       	call   c0010fba <VgaText::combineCharAndColour(char, unsigned char)>
c0011512:	83 c4 10             	add    esp,0x10
c0011515:	66 89 03             	mov    WORD PTR [ebx],ax
c0011518:	39 2d 34 be 02 c0    	cmp    DWORD PTR ds:0xc002be34,ebp
c001151e:	75 1d                	jne    c001153d <VgaText::puts(char const*, VgaColour, VgaColour)+0x10d>
c0011520:	83 ec 0c             	sub    esp,0xc
c0011523:	ff 75 18             	push   DWORD PTR [ebp+0x18]
c0011526:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0011529:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001152d:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0011531:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0011534:	50                   	push   eax
c0011535:	e8 b6 7f 00 00       	call   c00194f0 <HalConsoleWriteCharacter(char, int, int, int, int)>
c001153a:	83 c4 20             	add    esp,0x20
c001153d:	50                   	push   eax
c001153e:	83 c3 02             	add    ebx,0x2
c0011541:	50                   	push   eax
c0011542:	6a 00                	push   0x0
c0011544:	55                   	push   ebp
c0011545:	e8 00 fc ff ff       	call   c001114a <VgaText::incrementCursor(bool)>
c001154a:	83 c4 10             	add    esp,0x10
c001154d:	83 7d 14 00          	cmp    DWORD PTR [ebp+0x14],0x0
c0011551:	75 0c                	jne    c001155f <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0011553:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c0011557:	0f b7 db             	movzx  ebx,bx
c001155a:	01 db                	add    ebx,ebx
c001155c:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c001155f:	46                   	inc    esi
c0011560:	e9 06 ff ff ff       	jmp    c001146b <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c0011565:	83 ec 0c             	sub    esp,0xc
c0011568:	55                   	push   ebp
c0011569:	e8 c4 f8 ff ff       	call   c0010e32 <VgaText::updateCursor()>
c001156e:	c6 85 81 00 00 00 00 	mov    BYTE PTR [ebp+0x81],0x0
c0011575:	83 c4 1c             	add    esp,0x1c
c0011578:	5b                   	pop    ebx
c0011579:	5e                   	pop    esi
c001157a:	5f                   	pop    edi
c001157b:	5d                   	pop    ebp
c001157c:	c3                   	ret    
c001157d:	90                   	nop

c001157e <VgaText::VgaText(char const*)>:
c001157e:	56                   	push   esi
c001157f:	53                   	push   ebx
c0011580:	83 ec 04             	sub    esp,0x4
c0011583:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011587:	83 ec 08             	sub    esp,0x8
c001158a:	6a 00                	push   0x0
c001158c:	50                   	push   eax
c001158d:	e8 aa 05 00 00       	call   c0011b3c <UnixFile::UnixFile(int)>
c0011592:	83 c4 10             	add    esp,0x10
c0011595:	ba 40 23 02 c0       	mov    edx,0xc0022340
c001159a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001159e:	89 10                	mov    DWORD PTR [eax],edx
c00115a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00115a4:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c00115ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00115af:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c00115b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00115ba:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c00115be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00115c2:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c00115c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00115ca:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c00115d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00115d5:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c00115dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00115e0:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c00115e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00115eb:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c00115f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00115f6:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c00115fd:	83 ec 0c             	sub    esp,0xc
c0011600:	6a 01                	push   0x1
c0011602:	e8 84 09 00 00       	call   c0011f8b <Virt::allocateKernelVirtualPages(int)>
c0011607:	83 c4 10             	add    esp,0x10
c001160a:	89 c2                	mov    edx,eax
c001160c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011610:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0011613:	8b 1d d0 be 02 c0    	mov    ebx,DWORD PTR ds:0xc002bed0
c0011619:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001161d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011620:	89 c6                	mov    esi,eax
c0011622:	e8 f9 d7 ff ff       	call   c000ee20 <Phys::allocatePage()>
c0011627:	68 05 0c 00 00       	push   0xc05
c001162c:	56                   	push   esi
c001162d:	50                   	push   eax
c001162e:	53                   	push   ebx
c001162f:	e8 36 10 00 00       	call   c001266a <VAS::mapPage(unsigned long, unsigned long, int)>
c0011634:	83 c4 10             	add    esp,0x10
c0011637:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001163b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001163e:	83 ec 04             	sub    esp,0x4
c0011641:	68 a0 0f 00 00       	push   0xfa0
c0011646:	6a 00                	push   0x0
c0011648:	50                   	push   eax
c0011649:	e8 a2 ee fe ff       	call   c00004f0 <memset>
c001164e:	83 c4 10             	add    esp,0x10
c0011651:	83 ec 04             	sub    esp,0x4
c0011654:	6a 00                	push   0x0
c0011656:	6a 07                	push   0x7
c0011658:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001165c:	e8 7b f8 ff ff       	call   c0010edc <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0011661:	83 c4 10             	add    esp,0x10
c0011664:	83 ec 04             	sub    esp,0x4
c0011667:	6a 00                	push   0x0
c0011669:	6a 00                	push   0x0
c001166b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001166f:	e8 f6 f9 ff ff       	call   c001106a <VgaText::setCursor(int, int)>
c0011674:	83 c4 10             	add    esp,0x10
c0011677:	83 ec 0c             	sub    esp,0xc
c001167a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001167e:	e8 49 fa ff ff       	call   c00110cc <VgaText::clearScreen()>
c0011683:	83 c4 10             	add    esp,0x10
c0011686:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001168a:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c001168e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011692:	05 82 00 00 00       	add    eax,0x82
c0011697:	83 ec 04             	sub    esp,0x4
c001169a:	68 80 00 00 00       	push   0x80
c001169f:	6a 00                	push   0x0
c00116a1:	50                   	push   eax
c00116a2:	e8 49 ee fe ff       	call   c00004f0 <memset>
c00116a7:	83 c4 10             	add    esp,0x10
c00116aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00116ae:	05 02 01 00 00       	add    eax,0x102
c00116b3:	83 ec 04             	sub    esp,0x4
c00116b6:	68 80 00 00 00       	push   0x80
c00116bb:	6a 00                	push   0x0
c00116bd:	50                   	push   eax
c00116be:	e8 2d ee fe ff       	call   c00004f0 <memset>
c00116c3:	83 c4 10             	add    esp,0x10
c00116c6:	90                   	nop
c00116c7:	83 c4 04             	add    esp,0x4
c00116ca:	5b                   	pop    ebx
c00116cb:	5e                   	pop    esi
c00116cc:	c3                   	ret    
c00116cd:	90                   	nop

c00116ce <VgaText::receiveKey(unsigned char)>:
c00116ce:	55                   	push   ebp
c00116cf:	57                   	push   edi
c00116d0:	56                   	push   esi
c00116d1:	53                   	push   ebx
c00116d2:	83 ec 2c             	sub    esp,0x2c
c00116d5:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00116d9:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00116dd:	89 fd                	mov    ebp,edi
c00116df:	81 e5 ff 00 00 00    	and    ebp,0xff
c00116e5:	0f 84 48 01 00 00    	je     c0011833 <VgaText::receiveKey(unsigned char)+0x165>
c00116eb:	8d b3 82 00 00 00    	lea    esi,[ebx+0x82]
c00116f1:	83 fd 08             	cmp    ebp,0x8
c00116f4:	75 6a                	jne    c0011760 <VgaText::receiveKey(unsigned char)+0x92>
c00116f6:	83 ec 0c             	sub    esp,0xc
c00116f9:	56                   	push   esi
c00116fa:	e8 81 ee fe ff       	call   c0000580 <strlen>
c00116ff:	83 c4 10             	add    esp,0x10
c0011702:	85 c0                	test   eax,eax
c0011704:	0f 84 ef 00 00 00    	je     c00117f9 <VgaText::receiveKey(unsigned char)+0x12b>
c001170a:	50                   	push   eax
c001170b:	50                   	push   eax
c001170c:	6a 08                	push   0x8
c001170e:	53                   	push   ebx
c001170f:	e8 7c fb ff ff       	call   c0011290 <VgaText::putchar(char)>
c0011714:	89 34 24             	mov    DWORD PTR [esp],esi
c0011717:	e8 64 ee fe ff       	call   c0000580 <strlen>
c001171c:	83 c4 10             	add    esp,0x10
c001171f:	0f be 94 03 81 00 00 00 	movsx  edx,BYTE PTR [ebx+eax*1+0x81]
c0011727:	83 fa 1f             	cmp    edx,0x1f
c001172a:	89 d0                	mov    eax,edx
c001172c:	7f 1c                	jg     c001174a <VgaText::receiveKey(unsigned char)+0x7c>
c001172e:	83 e8 08             	sub    eax,0x8
c0011731:	3c 02                	cmp    al,0x2
c0011733:	76 15                	jbe    c001174a <VgaText::receiveKey(unsigned char)+0x7c>
c0011735:	83 fa 0d             	cmp    edx,0xd
c0011738:	74 10                	je     c001174a <VgaText::receiveKey(unsigned char)+0x7c>
c001173a:	57                   	push   edi
c001173b:	57                   	push   edi
c001173c:	68 2b 23 02 c0       	push   0xc002232b
c0011741:	53                   	push   ebx
c0011742:	e8 77 fc ff ff       	call   c00113be <VgaText::puts(char const*)>
c0011747:	83 c4 10             	add    esp,0x10
c001174a:	83 ec 0c             	sub    esp,0xc
c001174d:	56                   	push   esi
c001174e:	e8 2d ee fe ff       	call   c0000580 <strlen>
c0011753:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c001175b:	e9 96 00 00 00       	jmp    c00117f6 <VgaText::receiveKey(unsigned char)+0x128>
c0011760:	8d 83 02 01 00 00    	lea    eax,[ebx+0x102]
c0011766:	83 ec 0c             	sub    esp,0xc
c0011769:	50                   	push   eax
c001176a:	e8 11 ee fe ff       	call   c0000580 <strlen>
c001176f:	89 34 24             	mov    DWORD PTR [esp],esi
c0011772:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011776:	e8 05 ee fe ff       	call   c0000580 <strlen>
c001177b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001177f:	83 c4 10             	add    esp,0x10
c0011782:	8d 44 02 03          	lea    eax,[edx+eax*1+0x3]
c0011786:	3d 80 00 00 00       	cmp    eax,0x80
c001178b:	0f 87 a2 00 00 00    	ja     c0011833 <VgaText::receiveKey(unsigned char)+0x165>
c0011791:	8d 47 ff             	lea    eax,[edi-0x1]
c0011794:	3c 1e                	cmp    al,0x1e
c0011796:	77 35                	ja     c00117cd <VgaText::receiveKey(unsigned char)+0xff>
c0011798:	8d 47 f7             	lea    eax,[edi-0x9]
c001179b:	3c 01                	cmp    al,0x1
c001179d:	76 2e                	jbe    c00117cd <VgaText::receiveKey(unsigned char)+0xff>
c001179f:	83 fd 0d             	cmp    ebp,0xd
c00117a2:	74 29                	je     c00117cd <VgaText::receiveKey(unsigned char)+0xff>
c00117a4:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00117a7:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00117aa:	68 31 23 02 c0       	push   0xc0022331
c00117af:	53                   	push   ebx
c00117b0:	e8 7b fc ff ff       	call   c0011430 <VgaText::puts(char const*, VgaColour, VgaColour)>
c00117b5:	8d 47 40             	lea    eax,[edi+0x40]
c00117b8:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00117bb:	0f b6 c0             	movzx  eax,al
c00117be:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00117c1:	50                   	push   eax
c00117c2:	53                   	push   ebx
c00117c3:	e8 f8 f9 ff ff       	call   c00111c0 <VgaText::putchar(char, VgaColour, VgaColour)>
c00117c8:	83 c4 20             	add    esp,0x20
c00117cb:	eb 11                	jmp    c00117de <VgaText::receiveKey(unsigned char)+0x110>
c00117cd:	51                   	push   ecx
c00117ce:	89 f8                	mov    eax,edi
c00117d0:	51                   	push   ecx
c00117d1:	0f be c0             	movsx  eax,al
c00117d4:	50                   	push   eax
c00117d5:	53                   	push   ebx
c00117d6:	e8 b5 fa ff ff       	call   c0011290 <VgaText::putchar(char)>
c00117db:	83 c4 10             	add    esp,0x10
c00117de:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00117e3:	89 f8                	mov    eax,edi
c00117e5:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c00117e9:	52                   	push   edx
c00117ea:	52                   	push   edx
c00117eb:	8d 44 24 26          	lea    eax,[esp+0x26]
c00117ef:	50                   	push   eax
c00117f0:	56                   	push   esi
c00117f1:	e8 7a f0 fe ff       	call   c0000870 <strcat>
c00117f6:	83 c4 10             	add    esp,0x10
c00117f9:	80 bb 80 00 00 00 00 	cmp    BYTE PTR [ebx+0x80],0x0
c0011800:	75 0f                	jne    c0011811 <VgaText::receiveKey(unsigned char)+0x143>
c0011802:	83 fd 1c             	cmp    ebp,0x1c
c0011805:	77 2c                	ja     c0011833 <VgaText::receiveKey(unsigned char)+0x165>
c0011807:	b8 08 04 00 10       	mov    eax,0x10000408
c001180c:	0f a3 e8             	bt     eax,ebp
c001180f:	73 22                	jae    c0011833 <VgaText::receiveKey(unsigned char)+0x165>
c0011811:	50                   	push   eax
c0011812:	81 c3 02 01 00 00    	add    ebx,0x102
c0011818:	50                   	push   eax
c0011819:	56                   	push   esi
c001181a:	53                   	push   ebx
c001181b:	e8 50 f0 fe ff       	call   c0000870 <strcat>
c0011820:	83 c4 0c             	add    esp,0xc
c0011823:	68 80 00 00 00       	push   0x80
c0011828:	6a 00                	push   0x0
c001182a:	56                   	push   esi
c001182b:	e8 c0 ec fe ff       	call   c00004f0 <memset>
c0011830:	83 c4 10             	add    esp,0x10
c0011833:	83 c4 2c             	add    esp,0x2c
c0011836:	5b                   	pop    ebx
c0011837:	5e                   	pop    esi
c0011838:	5f                   	pop    edi
c0011839:	5d                   	pop    ebp
c001183a:	c3                   	ret    
c001183b:	90                   	nop

c001183c <VgaText::doUpdate()>:
c001183c:	c3                   	ret    
c001183d:	66 90                	xchg   ax,ax
c001183f:	90                   	nop

c0011840 <TSS::TSS()>:
c0011840:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011844:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001184b:	90                   	nop
c001184c:	c3                   	ret    
c001184d:	90                   	nop
c001184e:	66 90                	xchg   ax,ax

c0011850 <TSS::setESP(unsigned long)>:
c0011850:	55                   	push   ebp
c0011851:	89 e5                	mov    ebp,esp
c0011853:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011856:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011859:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001185c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001185f:	90                   	nop
c0011860:	5d                   	pop    ebp
c0011861:	c3                   	ret    
c0011862:	66 90                	xchg   ax,ax

c0011864 <TSS::flush()>:
c0011864:	55                   	push   ebp
c0011865:	89 e5                	mov    ebp,esp
c0011867:	83 ec 10             	sub    esp,0x10
c001186a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001186d:	8b 00                	mov    eax,DWORD PTR [eax]
c001186f:	83 c8 03             	or     eax,0x3
c0011872:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0011876:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c001187a:	66 89 d0             	mov    ax,dx
c001187d:	0f 00 d8             	ltr    ax
c0011880:	90                   	nop
c0011881:	c9                   	leave  
c0011882:	c3                   	ret    
c0011883:	90                   	nop

c0011884 <TSS::setup(unsigned long, unsigned long)>:
c0011884:	55                   	push   ebp
c0011885:	89 e5                	mov    ebp,esp
c0011887:	83 ec 18             	sub    esp,0x18
c001188a:	83 ec 0c             	sub    esp,0xc
c001188d:	6a 68                	push   0x68
c001188f:	e8 3c d0 ff ff       	call   c000e8d0 <malloc>
c0011894:	83 c4 10             	add    esp,0x10
c0011897:	89 c2                	mov    edx,eax
c0011899:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001189c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001189f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00118a2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00118a5:	83 ec 08             	sub    esp,0x8
c00118a8:	50                   	push   eax
c00118a9:	68 54 23 02 c0       	push   0xc0022354
c00118ae:	e8 9b 56 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00118b3:	83 c4 10             	add    esp,0x10
c00118b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00118b9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00118bc:	83 ec 04             	sub    esp,0x4
c00118bf:	6a 68                	push   0x68
c00118c1:	6a 00                	push   0x0
c00118c3:	50                   	push   eax
c00118c4:	e8 27 ec fe ff       	call   c00004f0 <memset>
c00118c9:	83 c4 10             	add    esp,0x10
c00118cc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00118cf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00118d2:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c00118d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00118db:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00118de:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c00118e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00118e7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00118ea:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00118ed:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00118f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00118f3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00118f6:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c00118fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00118ff:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011902:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0011908:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001190b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001190e:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0011914:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011917:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001191a:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0011920:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011923:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011926:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c001192c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001192f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011932:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0011938:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001193b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001193e:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0011941:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0011944:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011947:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001194a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001194d:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0011950:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011953:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011956:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c001195d:	83 ec 0c             	sub    esp,0xc
c0011960:	68 6b 23 02 c0       	push   0xc002236b
c0011965:	e8 e4 55 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001196a:	83 c4 10             	add    esp,0x10
c001196d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011970:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011973:	0f 20 da             	mov    edx,cr3
c0011976:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0011979:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001197c:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c001197f:	83 ec 0c             	sub    esp,0xc
c0011982:	68 6e 23 02 c0       	push   0xc002236e
c0011987:	e8 c2 55 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001198c:	83 c4 10             	add    esp,0x10
c001198f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011992:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011995:	83 ec 08             	sub    esp,0x8
c0011998:	50                   	push   eax
c0011999:	8d 45 ec             	lea    eax,[ebp-0x14]
c001199c:	50                   	push   eax
c001199d:	e8 8c c6 ff ff       	call   c000e02e <GDTEntry::setBase(unsigned int)>
c00119a2:	83 c4 10             	add    esp,0x10
c00119a5:	83 ec 08             	sub    esp,0x8
c00119a8:	6a 68                	push   0x68
c00119aa:	8d 45 ec             	lea    eax,[ebp-0x14]
c00119ad:	50                   	push   eax
c00119ae:	e8 97 c6 ff ff       	call   c000e04a <GDTEntry::setLimit(unsigned int)>
c00119b3:	83 c4 10             	add    esp,0x10
c00119b6:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c00119ba:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c00119bd:	83 e0 0f             	and    eax,0xf
c00119c0:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c00119c3:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c00119c6:	83 c8 40             	or     eax,0x40
c00119c9:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c00119cc:	83 ec 0c             	sub    esp,0xc
c00119cf:	68 71 23 02 c0       	push   0xc0022371
c00119d4:	e8 75 55 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00119d9:	83 c4 10             	add    esp,0x10
c00119dc:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c00119e1:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00119e7:	83 ec 08             	sub    esp,0x8
c00119ea:	50                   	push   eax
c00119eb:	68 74 23 02 c0       	push   0xc0022374
c00119f0:	e8 59 55 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00119f5:	83 c4 10             	add    esp,0x10
c00119f8:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c00119fd:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011a03:	05 64 01 00 00       	add    eax,0x164
c0011a08:	83 ec 04             	sub    esp,0x4
c0011a0b:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0011a0e:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0011a11:	50                   	push   eax
c0011a12:	e8 67 c6 ff ff       	call   c000e07e <GDT::addEntry(GDTEntry)>
c0011a17:	83 c4 10             	add    esp,0x10
c0011a1a:	89 c2                	mov    edx,eax
c0011a1c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a1f:	89 10                	mov    DWORD PTR [eax],edx
c0011a21:	83 ec 0c             	sub    esp,0xc
c0011a24:	68 89 23 02 c0       	push   0xc0022389
c0011a29:	e8 20 55 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0011a2e:	83 c4 10             	add    esp,0x10
c0011a31:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c0011a36:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011a3c:	05 64 01 00 00       	add    eax,0x164
c0011a41:	83 ec 0c             	sub    esp,0xc
c0011a44:	50                   	push   eax
c0011a45:	e8 5e c6 ff ff       	call   c000e0a8 <GDT::flush()>
c0011a4a:	83 c4 10             	add    esp,0x10
c0011a4d:	83 ec 0c             	sub    esp,0xc
c0011a50:	68 8c 23 02 c0       	push   0xc002238c
c0011a55:	e8 f4 54 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0011a5a:	83 c4 10             	add    esp,0x10
c0011a5d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a60:	8b 00                	mov    eax,DWORD PTR [eax]
c0011a62:	c9                   	leave  
c0011a63:	c3                   	ret    

c0011a64 <ReservedFilename::read(unsigned long long, void*, int*)>:
c0011a64:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011a68:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011a6c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011a6f:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0011a74:	75 08                	jne    c0011a7e <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0011a76:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0011a7c:	eb 38                	jmp    c0011ab6 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0011a7e:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011a83:	75 17                	jne    c0011a9c <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0011a85:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011a8a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011a8d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0011a93:	8b 10                	mov    edx,DWORD PTR [eax]
c0011a95:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011a99:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0011a9c:	89 c1                	mov    ecx,eax
c0011a9e:	83 e1 fd             	and    ecx,0xfffffffd
c0011aa1:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0011aa7:	74 cd                	je     c0011a76 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0011aa9:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0011aae:	83 e0 ef             	and    eax,0xffffffef
c0011ab1:	83 f8 08             	cmp    eax,0x8
c0011ab4:	76 c0                	jbe    c0011a76 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0011ab6:	31 c0                	xor    eax,eax
c0011ab8:	c3                   	ret    
c0011ab9:	90                   	nop

c0011aba <ReservedFilename::isAtty()>:
c0011aba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011abe:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0011ac1:	31 c0                	xor    eax,eax
c0011ac3:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0011ac9:	74 09                	je     c0011ad4 <ReservedFilename::isAtty()+0x1a>
c0011acb:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0011ad1:	0f 94 c0             	sete   al
c0011ad4:	c3                   	ret    
c0011ad5:	90                   	nop

c0011ad6 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0011ad6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011ada:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011ade:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011ae2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011ae5:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0011aea:	75 08                	jne    c0011af4 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0011aec:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0011af2:	eb 3d                	jmp    c0011b31 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0011af4:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011af9:	75 17                	jne    c0011b12 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0011afb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011b00:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011b03:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0011b09:	8b 10                	mov    edx,DWORD PTR [eax]
c0011b0b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011b0f:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0011b12:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011b17:	75 04                	jne    c0011b1d <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0011b19:	89 0a                	mov    DWORD PTR [edx],ecx
c0011b1b:	eb 14                	jmp    c0011b31 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0011b1d:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0011b22:	74 c8                	je     c0011aec <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0011b24:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0011b29:	83 e0 ef             	and    eax,0xffffffef
c0011b2c:	83 f8 08             	cmp    eax,0x8
c0011b2f:	76 bb                	jbe    c0011aec <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0011b31:	31 c0                	xor    eax,eax
c0011b33:	c3                   	ret    

c0011b34 <UnixFile::getFileDescriptor()>:
c0011b34:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011b38:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011b3b:	c3                   	ret    

c0011b3c <UnixFile::UnixFile(int)>:
c0011b3c:	53                   	push   ebx
c0011b3d:	83 ec 28             	sub    esp,0x28
c0011b40:	ba b8 23 02 c0       	mov    edx,0xc00223b8
c0011b45:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011b49:	89 10                	mov    DWORD PTR [eax],edx
c0011b4b:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0011b53:	0f 8f 90 01 00 00    	jg     c0011ce9 <UnixFile::UnixFile(int)+0x1ad>
c0011b59:	a1 e0 41 02 c0       	mov    eax,ds:0xc00241e0
c0011b5e:	8d 50 01             	lea    edx,[eax+0x1]
c0011b61:	89 15 e0 41 02 c0    	mov    DWORD PTR ds:0xc00241e0,edx
c0011b67:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011b6b:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011b6e:	83 ec 08             	sub    esp,0x8
c0011b71:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0011b75:	68 b8 be 02 c0       	push   0xc002beb8
c0011b7a:	e8 0d e6 00 00       	call   c002018c <LinkedList<UnixFile>::addElement(UnixFile*)>
c0011b7f:	83 c4 10             	add    esp,0x10
c0011b82:	a0 b4 be 02 c0       	mov    al,ds:0xc002beb4
c0011b87:	83 f0 01             	xor    eax,0x1
c0011b8a:	0f b6 c0             	movzx  eax,al
c0011b8d:	85 c0                	test   eax,eax
c0011b8f:	0f 84 55 01 00 00    	je     c0011cea <UnixFile::UnixFile(int)+0x1ae>
c0011b95:	c6 05 b4 be 02 c0 01 	mov    BYTE PTR ds:0xc002beb4,0x1
c0011b9c:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0011ba4:	83 ec 0c             	sub    esp,0xc
c0011ba7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011bab:	e8 20 cd ff ff       	call   c000e8d0 <malloc>
c0011bb0:	83 c4 10             	add    esp,0x10
c0011bb3:	89 c3                	mov    ebx,eax
c0011bb5:	83 ec 08             	sub    esp,0x8
c0011bb8:	68 03 ff ff 0f       	push   0xfffff03
c0011bbd:	53                   	push   ebx
c0011bbe:	e8 2d 01 00 00       	call   c0011cf0 <ReservedFilename::ReservedFilename(int)>
c0011bc3:	83 c4 10             	add    esp,0x10
c0011bc6:	89 1d ac be 02 c0    	mov    DWORD PTR ds:0xc002beac,ebx
c0011bcc:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0011bd4:	83 ec 0c             	sub    esp,0xc
c0011bd7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011bdb:	e8 f0 cc ff ff       	call   c000e8d0 <malloc>
c0011be0:	83 c4 10             	add    esp,0x10
c0011be3:	89 c3                	mov    ebx,eax
c0011be5:	83 ec 08             	sub    esp,0x8
c0011be8:	68 01 ff ff 0f       	push   0xfffff01
c0011bed:	53                   	push   ebx
c0011bee:	e8 fd 00 00 00       	call   c0011cf0 <ReservedFilename::ReservedFilename(int)>
c0011bf3:	83 c4 10             	add    esp,0x10
c0011bf6:	89 1d b0 be 02 c0    	mov    DWORD PTR ds:0xc002beb0,ebx
c0011bfc:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0011c04:	83 ec 0c             	sub    esp,0xc
c0011c07:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011c0b:	e8 c0 cc ff ff       	call   c000e8d0 <malloc>
c0011c10:	83 c4 10             	add    esp,0x10
c0011c13:	89 c3                	mov    ebx,eax
c0011c15:	83 ec 08             	sub    esp,0x8
c0011c18:	68 00 ff ff 0f       	push   0xfffff00
c0011c1d:	53                   	push   ebx
c0011c1e:	e8 cd 00 00 00       	call   c0011cf0 <ReservedFilename::ReservedFilename(int)>
c0011c23:	83 c4 10             	add    esp,0x10
c0011c26:	89 1d a4 be 02 c0    	mov    DWORD PTR ds:0xc002bea4,ebx
c0011c2c:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0011c34:	83 ec 0c             	sub    esp,0xc
c0011c37:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0011c3b:	e8 90 cc ff ff       	call   c000e8d0 <malloc>
c0011c40:	83 c4 10             	add    esp,0x10
c0011c43:	89 c3                	mov    ebx,eax
c0011c45:	83 ec 08             	sub    esp,0x8
c0011c48:	68 02 ff ff 0f       	push   0xfffff02
c0011c4d:	53                   	push   ebx
c0011c4e:	e8 9d 00 00 00       	call   c0011cf0 <ReservedFilename::ReservedFilename(int)>
c0011c53:	83 c4 10             	add    esp,0x10
c0011c56:	89 1d a8 be 02 c0    	mov    DWORD PTR ds:0xc002bea8,ebx
c0011c5c:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011c64:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0011c69:	7f 7f                	jg     c0011cea <UnixFile::UnixFile(int)+0x1ae>
c0011c6b:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0011c73:	83 ec 0c             	sub    esp,0xc
c0011c76:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011c7a:	e8 51 cc ff ff       	call   c000e8d0 <malloc>
c0011c7f:	83 c4 10             	add    esp,0x10
c0011c82:	89 c3                	mov    ebx,eax
c0011c84:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011c88:	05 10 ff ff 0f       	add    eax,0xfffff10
c0011c8d:	83 ec 08             	sub    esp,0x8
c0011c90:	50                   	push   eax
c0011c91:	53                   	push   ebx
c0011c92:	e8 59 00 00 00       	call   c0011cf0 <ReservedFilename::ReservedFilename(int)>
c0011c97:	83 c4 10             	add    esp,0x10
c0011c9a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011c9e:	89 1c 85 80 be 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4180],ebx
c0011ca5:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0011cad:	83 ec 0c             	sub    esp,0xc
c0011cb0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011cb4:	e8 17 cc ff ff       	call   c000e8d0 <malloc>
c0011cb9:	83 c4 10             	add    esp,0x10
c0011cbc:	89 c3                	mov    ebx,eax
c0011cbe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011cc2:	05 20 ff ff 0f       	add    eax,0xfffff20
c0011cc7:	83 ec 08             	sub    esp,0x8
c0011cca:	50                   	push   eax
c0011ccb:	53                   	push   ebx
c0011ccc:	e8 1f 00 00 00       	call   c0011cf0 <ReservedFilename::ReservedFilename(int)>
c0011cd1:	83 c4 10             	add    esp,0x10
c0011cd4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011cd8:	89 1c 85 40 be 02 c0 	mov    DWORD PTR [eax*4-0x3ffd41c0],ebx
c0011cdf:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0011ce4:	e9 7b ff ff ff       	jmp    c0011c64 <UnixFile::UnixFile(int)+0x128>
c0011ce9:	90                   	nop
c0011cea:	83 c4 28             	add    esp,0x28
c0011ced:	5b                   	pop    ebx
c0011cee:	c3                   	ret    
c0011cef:	90                   	nop

c0011cf0 <ReservedFilename::ReservedFilename(int)>:
c0011cf0:	83 ec 0c             	sub    esp,0xc
c0011cf3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011cf7:	83 ec 08             	sub    esp,0x8
c0011cfa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011cfe:	50                   	push   eax
c0011cff:	e8 38 fe ff ff       	call   c0011b3c <UnixFile::UnixFile(int)>
c0011d04:	83 c4 10             	add    esp,0x10
c0011d07:	ba d4 23 02 c0       	mov    edx,0xc00223d4
c0011d0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011d10:	89 10                	mov    DWORD PTR [eax],edx
c0011d12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011d16:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011d1a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011d1d:	90                   	nop
c0011d1e:	83 c4 0c             	add    esp,0xc
c0011d21:	c3                   	ret    

c0011d22 <UnixFile::~UnixFile()>:
c0011d22:	83 ec 1c             	sub    esp,0x1c
c0011d25:	ba b8 23 02 c0       	mov    edx,0xc00223b8
c0011d2a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011d2e:	89 10                	mov    DWORD PTR [eax],edx
c0011d30:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011d34:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011d37:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c0011d3c:	7f 76                	jg     c0011db4 <UnixFile::~UnixFile()+0x92>
c0011d3e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011d46:	83 ec 0c             	sub    esp,0xc
c0011d49:	68 b8 be 02 c0       	push   0xc002beb8
c0011d4e:	e8 0d e5 00 00       	call   c0020260 <LinkedList<UnixFile>::getFirstElement()>
c0011d53:	83 c4 10             	add    esp,0x10
c0011d56:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011d5a:	83 ec 0c             	sub    esp,0xc
c0011d5d:	68 b8 be 02 c0       	push   0xc002beb8
c0011d62:	e8 01 e5 00 00       	call   c0020268 <LinkedList<UnixFile>::removeFirst()>
c0011d67:	83 c4 10             	add    esp,0x10
c0011d6a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011d6e:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0011d72:	74 43                	je     c0011db7 <UnixFile::~UnixFile()+0x95>
c0011d74:	83 ec 08             	sub    esp,0x8
c0011d77:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011d7b:	68 b8 be 02 c0       	push   0xc002beb8
c0011d80:	e8 07 e4 00 00       	call   c002018c <LinkedList<UnixFile>::addElement(UnixFile*)>
c0011d85:	83 c4 10             	add    esp,0x10
c0011d88:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011d8c:	8d 50 01             	lea    edx,[eax+0x1]
c0011d8f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011d93:	3d 20 a1 07 00       	cmp    eax,0x7a120
c0011d98:	0f 94 c0             	sete   al
c0011d9b:	0f b6 c0             	movzx  eax,al
c0011d9e:	85 c0                	test   eax,eax
c0011da0:	74 a4                	je     c0011d46 <UnixFile::~UnixFile()+0x24>
c0011da2:	83 ec 0c             	sub    esp,0xc
c0011da5:	68 90 23 02 c0       	push   0xc0022390
c0011daa:	e8 77 ce ff ff       	call   c000ec26 <KePanic(char const*)>
c0011daf:	83 c4 10             	add    esp,0x10
c0011db2:	eb 92                	jmp    c0011d46 <UnixFile::~UnixFile()+0x24>
c0011db4:	90                   	nop
c0011db5:	eb 01                	jmp    c0011db8 <UnixFile::~UnixFile()+0x96>
c0011db7:	90                   	nop
c0011db8:	90                   	nop
c0011db9:	83 c4 1c             	add    esp,0x1c
c0011dbc:	c3                   	ret    
c0011dbd:	90                   	nop

c0011dbe <UnixFile::~UnixFile()>:
c0011dbe:	83 ec 0c             	sub    esp,0xc
c0011dc1:	83 ec 0c             	sub    esp,0xc
c0011dc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011dc8:	e8 55 ff ff ff       	call   c0011d22 <UnixFile::~UnixFile()>
c0011dcd:	83 c4 10             	add    esp,0x10
c0011dd0:	83 ec 08             	sub    esp,0x8
c0011dd3:	6a 0c                	push   0xc
c0011dd5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011dd9:	e8 85 a8 ff ff       	call   c000c663 <operator delete(void*, unsigned long)>
c0011dde:	83 c4 10             	add    esp,0x10
c0011de1:	83 c4 0c             	add    esp,0xc
c0011de4:	c3                   	ret    
c0011de5:	90                   	nop

c0011de6 <ReservedFilename::~ReservedFilename()>:
c0011de6:	83 ec 0c             	sub    esp,0xc
c0011de9:	ba d4 23 02 c0       	mov    edx,0xc00223d4
c0011dee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011df2:	89 10                	mov    DWORD PTR [eax],edx
c0011df4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011df8:	83 ec 0c             	sub    esp,0xc
c0011dfb:	50                   	push   eax
c0011dfc:	e8 21 ff ff ff       	call   c0011d22 <UnixFile::~UnixFile()>
c0011e01:	83 c4 10             	add    esp,0x10
c0011e04:	90                   	nop
c0011e05:	83 c4 0c             	add    esp,0xc
c0011e08:	c3                   	ret    
c0011e09:	90                   	nop

c0011e0a <ReservedFilename::~ReservedFilename()>:
c0011e0a:	83 ec 0c             	sub    esp,0xc
c0011e0d:	83 ec 0c             	sub    esp,0xc
c0011e10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011e14:	e8 cd ff ff ff       	call   c0011de6 <ReservedFilename::~ReservedFilename()>
c0011e19:	83 c4 10             	add    esp,0x10
c0011e1c:	83 ec 08             	sub    esp,0x8
c0011e1f:	6a 0c                	push   0xc
c0011e21:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011e25:	e8 39 a8 ff ff       	call   c000c663 <operator delete(void*, unsigned long)>
c0011e2a:	83 c4 10             	add    esp,0x10
c0011e2d:	83 c4 0c             	add    esp,0xc
c0011e30:	c3                   	ret    

c0011e31 <KeGetFileFromDescriptor(int)>:
c0011e31:	53                   	push   ebx
c0011e32:	83 ec 08             	sub    esp,0x8
c0011e35:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011e39:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c0011e3f:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c0011e45:	7f 2c                	jg     c0011e73 <KeGetFileFromDescriptor(int)+0x42>
c0011e47:	83 ec 0c             	sub    esp,0xc
c0011e4a:	68 b8 be 02 c0       	push   0xc002beb8
c0011e4f:	e8 0c e4 00 00       	call   c0020260 <LinkedList<UnixFile>::getFirstElement()>
c0011e54:	83 c4 10             	add    esp,0x10
c0011e57:	85 c0                	test   eax,eax
c0011e59:	75 04                	jne    c0011e5f <KeGetFileFromDescriptor(int)+0x2e>
c0011e5b:	31 c0                	xor    eax,eax
c0011e5d:	eb 6e                	jmp    c0011ecd <KeGetFileFromDescriptor(int)+0x9c>
c0011e5f:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0011e62:	74 69                	je     c0011ecd <KeGetFileFromDescriptor(int)+0x9c>
c0011e64:	52                   	push   edx
c0011e65:	52                   	push   edx
c0011e66:	50                   	push   eax
c0011e67:	68 b8 be 02 c0       	push   0xc002beb8
c0011e6c:	e8 99 e4 00 00       	call   c002030a <LinkedList<UnixFile>::getNext(UnixFile*)>
c0011e71:	eb e1                	jmp    c0011e54 <KeGetFileFromDescriptor(int)+0x23>
c0011e73:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0011e79:	a1 ac be 02 c0       	mov    eax,ds:0xc002beac
c0011e7e:	74 4d                	je     c0011ecd <KeGetFileFromDescriptor(int)+0x9c>
c0011e80:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0011e86:	a1 b0 be 02 c0       	mov    eax,ds:0xc002beb0
c0011e8b:	74 40                	je     c0011ecd <KeGetFileFromDescriptor(int)+0x9c>
c0011e8d:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0011e93:	a1 a8 be 02 c0       	mov    eax,ds:0xc002bea8
c0011e98:	74 33                	je     c0011ecd <KeGetFileFromDescriptor(int)+0x9c>
c0011e9a:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0011ea0:	a1 a4 be 02 c0       	mov    eax,ds:0xc002bea4
c0011ea5:	74 26                	je     c0011ecd <KeGetFileFromDescriptor(int)+0x9c>
c0011ea7:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0011ead:	83 f8 08             	cmp    eax,0x8
c0011eb0:	77 09                	ja     c0011ebb <KeGetFileFromDescriptor(int)+0x8a>
c0011eb2:	8b 04 85 80 be 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4180]
c0011eb9:	eb 12                	jmp    c0011ecd <KeGetFileFromDescriptor(int)+0x9c>
c0011ebb:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0011ec1:	83 fb 08             	cmp    ebx,0x8
c0011ec4:	77 95                	ja     c0011e5b <KeGetFileFromDescriptor(int)+0x2a>
c0011ec6:	8b 04 9d 40 be 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd41c0]
c0011ecd:	83 c4 08             	add    esp,0x8
c0011ed0:	5b                   	pop    ebx
c0011ed1:	c3                   	ret    

c0011ed2 <__static_initialization_and_destruction_0(int, int)>:
c0011ed2:	83 ec 0c             	sub    esp,0xc
c0011ed5:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0011eda:	75 34                	jne    c0011f10 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011edc:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0011ee4:	75 2a                	jne    c0011f10 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011ee6:	83 ec 0c             	sub    esp,0xc
c0011ee9:	68 b8 be 02 c0       	push   0xc002beb8
c0011eee:	e8 57 e2 00 00       	call   c002014a <LinkedList<UnixFile>::LinkedList()>
c0011ef3:	83 c4 10             	add    esp,0x10
c0011ef6:	83 ec 04             	sub    esp,0x4
c0011ef9:	68 40 3a 02 c0       	push   0xc0023a40
c0011efe:	68 b8 be 02 c0       	push   0xc002beb8
c0011f03:	68 48 01 02 c0       	push   0xc0020148
c0011f08:	e8 06 a7 ff ff       	call   c000c613 <__cxa_atexit>
c0011f0d:	83 c4 10             	add    esp,0x10
c0011f10:	90                   	nop
c0011f11:	83 c4 0c             	add    esp,0xc
c0011f14:	c3                   	ret    

c0011f15 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0011f15:	83 ec 0c             	sub    esp,0xc
c0011f18:	83 ec 08             	sub    esp,0x8
c0011f1b:	68 ff ff 00 00       	push   0xffff
c0011f20:	6a 01                	push   0x1
c0011f22:	e8 ab ff ff ff       	call   c0011ed2 <__static_initialization_and_destruction_0(int, int)>
c0011f27:	83 c4 10             	add    esp,0x10
c0011f2a:	83 c4 0c             	add    esp,0xc
c0011f2d:	c3                   	ret    

c0011f2e <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0011f2e:	53                   	push   ebx
c0011f2f:	8b 15 e8 41 02 c0    	mov    edx,DWORD PTR ds:0xc00241e8
c0011f35:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011f39:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0011f3d:	8d 98 00 80 f3 ff    	lea    ebx,[eax-0xc8000]
c0011f43:	89 d8                	mov    eax,ebx
c0011f45:	d1 e8                	shr    eax,1
c0011f47:	01 d0                	add    eax,edx
c0011f49:	80 e3 01             	and    bl,0x1
c0011f4c:	8a 10                	mov    dl,BYTE PTR [eax]
c0011f4e:	75 09                	jne    c0011f59 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x2b>
c0011f50:	83 e2 f0             	and    edx,0xfffffff0
c0011f53:	09 ca                	or     edx,ecx
c0011f55:	88 10                	mov    BYTE PTR [eax],dl
c0011f57:	5b                   	pop    ebx
c0011f58:	c3                   	ret    
c0011f59:	0f b6 c9             	movzx  ecx,cl
c0011f5c:	83 e2 0f             	and    edx,0xf
c0011f5f:	c1 e1 04             	shl    ecx,0x4
c0011f62:	09 ca                	or     edx,ecx
c0011f64:	88 10                	mov    BYTE PTR [eax],dl
c0011f66:	5b                   	pop    ebx
c0011f67:	c3                   	ret    

c0011f68 <Virt::getPageState(unsigned long)>:
c0011f68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f6c:	8b 0d e8 41 02 c0    	mov    ecx,DWORD PTR ds:0xc00241e8
c0011f72:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0011f78:	89 d0                	mov    eax,edx
c0011f7a:	d1 e8                	shr    eax,1
c0011f7c:	80 e2 01             	and    dl,0x1
c0011f7f:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0011f82:	74 03                	je     c0011f87 <Virt::getPageState(unsigned long)+0x1f>
c0011f84:	c1 e8 04             	shr    eax,0x4
c0011f87:	83 e0 0f             	and    eax,0xf
c0011f8a:	c3                   	ret    

c0011f8b <Virt::allocateKernelVirtualPages(int)>:
c0011f8b:	55                   	push   ebp
c0011f8c:	57                   	push   edi
c0011f8d:	56                   	push   esi
c0011f8e:	31 f6                	xor    esi,esi
c0011f90:	53                   	push   ebx
c0011f91:	31 db                	xor    ebx,ebx
c0011f93:	83 ec 1c             	sub    esp,0x1c
c0011f96:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0011f9b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011f9f:	8b 2d e4 41 02 c0    	mov    ebp,DWORD PTR ds:0xc00241e4
c0011fa5:	55                   	push   ebp
c0011fa6:	e8 bd ff ff ff       	call   c0011f68 <Virt::getPageState(unsigned long)>
c0011fab:	5a                   	pop    edx
c0011fac:	84 c0                	test   al,al
c0011fae:	75 3d                	jne    c0011fed <Virt::allocateKernelVirtualPages(int)+0x62>
c0011fb0:	85 db                	test   ebx,ebx
c0011fb2:	0f 44 f5             	cmove  esi,ebp
c0011fb5:	83 c3 01             	add    ebx,0x1
c0011fb8:	39 fb                	cmp    ebx,edi
c0011fba:	74 5e                	je     c001201a <Virt::allocateKernelVirtualPages(int)+0x8f>
c0011fbc:	83 c5 01             	add    ebp,0x1
c0011fbf:	81 fd ff ff 0e 00    	cmp    ebp,0xeffff
c0011fc5:	76 33                	jbe    c0011ffa <Virt::allocateKernelVirtualPages(int)+0x6f>
c0011fc7:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0011fcc:	c7 05 e4 41 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc00241e4,0xc8000
c0011fd6:	75 2a                	jne    c0012002 <Virt::allocateKernelVirtualPages(int)+0x77>
c0011fd8:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0011fdd:	bd 00 80 0c 00       	mov    ebp,0xc8000
c0011fe2:	55                   	push   ebp
c0011fe3:	e8 80 ff ff ff       	call   c0011f68 <Virt::getPageState(unsigned long)>
c0011fe8:	5a                   	pop    edx
c0011fe9:	84 c0                	test   al,al
c0011feb:	74 c3                	je     c0011fb0 <Virt::allocateKernelVirtualPages(int)+0x25>
c0011fed:	83 c5 01             	add    ebp,0x1
c0011ff0:	31 db                	xor    ebx,ebx
c0011ff2:	81 fd ff ff 0e 00    	cmp    ebp,0xeffff
c0011ff8:	77 cd                	ja     c0011fc7 <Virt::allocateKernelVirtualPages(int)+0x3c>
c0011ffa:	89 2d e4 41 02 c0    	mov    DWORD PTR ds:0xc00241e4,ebp
c0012000:	eb a3                	jmp    c0011fa5 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0012002:	83 ec 0c             	sub    esp,0xc
c0012005:	68 e8 23 02 c0       	push   0xc00223e8
c001200a:	e8 17 cc ff ff       	call   c000ec26 <KePanic(char const*)>
c001200f:	8b 2d e4 41 02 c0    	mov    ebp,DWORD PTR ds:0xc00241e4
c0012015:	83 c4 10             	add    esp,0x10
c0012018:	eb 8b                	jmp    c0011fa5 <Virt::allocateKernelVirtualPages(int)+0x1a>
c001201a:	89 35 e4 41 02 c0    	mov    DWORD PTR ds:0xc00241e4,esi
c0012020:	83 fb 01             	cmp    ebx,0x1
c0012023:	74 63                	je     c0012088 <Virt::allocateKernelVirtualPages(int)+0xfd>
c0012025:	85 ff                	test   edi,edi
c0012027:	74 41                	je     c001206a <Virt::allocateKernelVirtualPages(int)+0xdf>
c0012029:	89 f0                	mov    eax,esi
c001202b:	31 db                	xor    ebx,ebx
c001202d:	8d 6f ff             	lea    ebp,[edi-0x1]
c0012030:	eb 16                	jmp    c0012048 <Virt::allocateKernelVirtualPages(int)+0xbd>
c0012032:	6a 01                	push   0x1
c0012034:	83 c3 01             	add    ebx,0x1
c0012037:	50                   	push   eax
c0012038:	e8 f1 fe ff ff       	call   c0011f2e <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001203d:	39 fb                	cmp    ebx,edi
c001203f:	58                   	pop    eax
c0012040:	5a                   	pop    edx
c0012041:	74 27                	je     c001206a <Virt::allocateKernelVirtualPages(int)+0xdf>
c0012043:	a1 e4 41 02 c0       	mov    eax,ds:0xc00241e4
c0012048:	8d 50 01             	lea    edx,[eax+0x1]
c001204b:	85 db                	test   ebx,ebx
c001204d:	89 15 e4 41 02 c0    	mov    DWORD PTR ds:0xc00241e4,edx
c0012053:	74 22                	je     c0012077 <Virt::allocateKernelVirtualPages(int)+0xec>
c0012055:	39 dd                	cmp    ebp,ebx
c0012057:	75 d9                	jne    c0012032 <Virt::allocateKernelVirtualPages(int)+0xa7>
c0012059:	6a 03                	push   0x3
c001205b:	83 c3 01             	add    ebx,0x1
c001205e:	50                   	push   eax
c001205f:	e8 ca fe ff ff       	call   c0011f2e <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0012064:	39 fb                	cmp    ebx,edi
c0012066:	59                   	pop    ecx
c0012067:	58                   	pop    eax
c0012068:	75 d9                	jne    c0012043 <Virt::allocateKernelVirtualPages(int)+0xb8>
c001206a:	83 c4 1c             	add    esp,0x1c
c001206d:	89 f0                	mov    eax,esi
c001206f:	5b                   	pop    ebx
c0012070:	c1 e0 0c             	shl    eax,0xc
c0012073:	5e                   	pop    esi
c0012074:	5f                   	pop    edi
c0012075:	5d                   	pop    ebp
c0012076:	c3                   	ret    
c0012077:	6a 02                	push   0x2
c0012079:	bb 01 00 00 00       	mov    ebx,0x1
c001207e:	50                   	push   eax
c001207f:	e8 aa fe ff ff       	call   c0011f2e <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0012084:	58                   	pop    eax
c0012085:	5a                   	pop    edx
c0012086:	eb bb                	jmp    c0012043 <Virt::allocateKernelVirtualPages(int)+0xb8>
c0012088:	6a 04                	push   0x4
c001208a:	56                   	push   esi
c001208b:	8d 46 01             	lea    eax,[esi+0x1]
c001208e:	a3 e4 41 02 c0       	mov    ds:0xc00241e4,eax
c0012093:	e8 96 fe ff ff       	call   c0011f2e <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0012098:	89 f0                	mov    eax,esi
c001209a:	59                   	pop    ecx
c001209b:	c1 e0 0c             	shl    eax,0xc
c001209e:	5b                   	pop    ebx
c001209f:	83 c4 1c             	add    esp,0x1c
c00120a2:	5b                   	pop    ebx
c00120a3:	5e                   	pop    esi
c00120a4:	5f                   	pop    edi
c00120a5:	5d                   	pop    ebp
c00120a6:	c3                   	ret    

c00120a7 <Virt::freeSwapfilePage(unsigned long)>:
c00120a7:	53                   	push   ebx
c00120a8:	8b 15 cc be 02 c0    	mov    edx,DWORD PTR ds:0xc002becc
c00120ae:	b8 01 00 00 00       	mov    eax,0x1
c00120b3:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00120b7:	d3 e0                	shl    eax,cl
c00120b9:	89 cb                	mov    ebx,ecx
c00120bb:	c1 eb 05             	shr    ebx,0x5
c00120be:	f7 d0                	not    eax
c00120c0:	8b 0c 9a             	mov    ecx,DWORD PTR [edx+ebx*4]
c00120c3:	21 c1                	and    ecx,eax
c00120c5:	89 0c 9a             	mov    DWORD PTR [edx+ebx*4],ecx
c00120c8:	5b                   	pop    ebx
c00120c9:	c3                   	ret    

c00120ca <Virt::swapIDToSector(unsigned long)>:
c00120ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00120ce:	8b 15 ec 41 02 c0    	mov    edx,DWORD PTR ds:0xc00241ec
c00120d4:	8b 0d f4 41 02 c0    	mov    ecx,DWORD PTR ds:0xc00241f4
c00120da:	0f af c2             	imul   eax,edx
c00120dd:	01 c8                	add    eax,ecx
c00120df:	c3                   	ret    

c00120e0 <Virt::allocateSwapfilePage()>:
c00120e0:	55                   	push   ebp
c00120e1:	31 d2                	xor    edx,edx
c00120e3:	57                   	push   edi
c00120e4:	56                   	push   esi
c00120e5:	53                   	push   ebx
c00120e6:	83 ec 0c             	sub    esp,0xc
c00120e9:	8b 1d f0 41 02 c0    	mov    ebx,DWORD PTR ds:0xc00241f0
c00120ef:	8b 0d ec 41 02 c0    	mov    ecx,DWORD PTR ds:0xc00241ec
c00120f5:	89 d8                	mov    eax,ebx
c00120f7:	f7 f1                	div    ecx
c00120f9:	39 cb                	cmp    ebx,ecx
c00120fb:	72 2f                	jb     c001212c <Virt::allocateSwapfilePage()+0x4c>
c00120fd:	8b 35 cc be 02 c0    	mov    esi,DWORD PTR ds:0xc002becc
c0012103:	8b 16                	mov    edx,DWORD PTR [esi]
c0012105:	f6 c2 01             	test   dl,0x1
c0012108:	74 3e                	je     c0012148 <Virt::allocateSwapfilePage()+0x68>
c001210a:	31 c9                	xor    ecx,ecx
c001210c:	bf 01 00 00 00       	mov    edi,0x1
c0012111:	eb 12                	jmp    c0012125 <Virt::allocateSwapfilePage()+0x45>
c0012113:	89 ca                	mov    edx,ecx
c0012115:	89 fd                	mov    ebp,edi
c0012117:	c1 ea 05             	shr    edx,0x5
c001211a:	8d 1c 96             	lea    ebx,[esi+edx*4]
c001211d:	8b 13                	mov    edx,DWORD PTR [ebx]
c001211f:	d3 e5                	shl    ebp,cl
c0012121:	85 ea                	test   edx,ebp
c0012123:	74 2c                	je     c0012151 <Virt::allocateSwapfilePage()+0x71>
c0012125:	83 c1 01             	add    ecx,0x1
c0012128:	39 c8                	cmp    eax,ecx
c001212a:	77 e7                	ja     c0012113 <Virt::allocateSwapfilePage()+0x33>
c001212c:	83 ec 0c             	sub    esp,0xc
c001212f:	68 58 26 02 c0       	push   0xc0022658
c0012134:	e8 ed ca ff ff       	call   c000ec26 <KePanic(char const*)>
c0012139:	83 c4 10             	add    esp,0x10
c001213c:	31 c9                	xor    ecx,ecx
c001213e:	83 c4 0c             	add    esp,0xc
c0012141:	89 c8                	mov    eax,ecx
c0012143:	5b                   	pop    ebx
c0012144:	5e                   	pop    esi
c0012145:	5f                   	pop    edi
c0012146:	5d                   	pop    ebp
c0012147:	c3                   	ret    
c0012148:	89 f3                	mov    ebx,esi
c001214a:	bd 01 00 00 00       	mov    ebp,0x1
c001214f:	31 c9                	xor    ecx,ecx
c0012151:	09 ea                	or     edx,ebp
c0012153:	89 c8                	mov    eax,ecx
c0012155:	89 13                	mov    DWORD PTR [ebx],edx
c0012157:	83 c4 0c             	add    esp,0xc
c001215a:	5b                   	pop    ebx
c001215b:	5e                   	pop    esi
c001215c:	5f                   	pop    edi
c001215d:	5d                   	pop    ebp
c001215e:	c3                   	ret    

c001215f <Virt::virtualMemorySetup()>:
c001215f:	53                   	push   ebx
c0012160:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0012165:	6a 0f                	push   0xf
c0012167:	53                   	push   ebx
c0012168:	83 c3 01             	add    ebx,0x1
c001216b:	e8 be fd ff ff       	call   c0011f2e <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0012170:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0012176:	58                   	pop    eax
c0012177:	5a                   	pop    edx
c0012178:	75 eb                	jne    c0012165 <Virt::virtualMemorySetup()+0x6>
c001217a:	bb 00 80 0c 00       	mov    ebx,0xc8000
c001217f:	6a 00                	push   0x0
c0012181:	53                   	push   ebx
c0012182:	83 c3 01             	add    ebx,0x1
c0012185:	e8 a4 fd ff ff       	call   c0011f2e <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001218a:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0012190:	59                   	pop    ecx
c0012191:	58                   	pop    eax
c0012192:	75 eb                	jne    c001217f <Virt::virtualMemorySetup()+0x20>
c0012194:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0012199:	6a 0f                	push   0xf
c001219b:	53                   	push   ebx
c001219c:	83 c3 01             	add    ebx,0x1
c001219f:	e8 8a fd ff ff       	call   c0011f2e <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00121a4:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c00121aa:	58                   	pop    eax
c00121ab:	5a                   	pop    edx
c00121ac:	75 eb                	jne    c0012199 <Virt::virtualMemorySetup()+0x3a>
c00121ae:	5b                   	pop    ebx
c00121af:	c3                   	ret    

c00121b0 <Virt::setupPageSwapping(int)>:
c00121b0:	53                   	push   ebx
c00121b1:	83 ec 0c             	sub    esp,0xc
c00121b4:	a1 88 97 02 c0       	mov    eax,ds:0xc0029788
c00121b9:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00121bd:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c00121c3:	8b 10                	mov    edx,DWORD PTR [eax]
c00121c5:	53                   	push   ebx
c00121c6:	68 6f 26 02 c0       	push   0xc002266f
c00121cb:	50                   	push   eax
c00121cc:	ff 52 60             	call   DWORD PTR [edx+0x60]
c00121cf:	c1 e3 0b             	shl    ebx,0xb
c00121d2:	89 1d f0 41 02 c0    	mov    DWORD PTR ds:0xc00241f0,ebx
c00121d8:	c1 eb 08             	shr    ebx,0x8
c00121db:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00121de:	c6 05 f8 41 02 c0 43 	mov    BYTE PTR ds:0xc00241f8,0x43
c00121e5:	c7 05 ec 41 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc00241ec,0x8
c00121ef:	a3 f4 41 02 c0       	mov    ds:0xc00241f4,eax
c00121f4:	e8 d7 c6 ff ff       	call   c000e8d0 <malloc>
c00121f9:	31 d2                	xor    edx,edx
c00121fb:	83 c4 0c             	add    esp,0xc
c00121fe:	a3 cc be 02 c0       	mov    ds:0xc002becc,eax
c0012203:	89 c1                	mov    ecx,eax
c0012205:	a1 f0 41 02 c0       	mov    eax,ds:0xc00241f0
c001220a:	f7 35 ec 41 02 c0    	div    DWORD PTR ds:0xc00241ec
c0012210:	c1 e8 05             	shr    eax,0x5
c0012213:	50                   	push   eax
c0012214:	6a 00                	push   0x0
c0012216:	51                   	push   ecx
c0012217:	e8 d4 e2 fe ff       	call   c00004f0 <memset>
c001221c:	83 c4 18             	add    esp,0x18
c001221f:	5b                   	pop    ebx
c0012220:	c3                   	ret    
c0012221:	90                   	nop

c0012222 <VAS::setCPUSpecific(unsigned long)>:
c0012222:	c3                   	ret    
c0012223:	90                   	nop

c0012224 <VAS::VAS(VAS*)>:
c0012224:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012228:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001222f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012233:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001223a:	90                   	nop
c001223b:	c3                   	ret    

c001223c <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c001223c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012240:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c0012245:	89 c2                	mov    edx,eax
c0012247:	c1 ea 16             	shr    edx,0x16
c001224a:	c1 e8 0a             	shr    eax,0xa
c001224d:	83 f9 01             	cmp    ecx,0x1
c0012250:	19 c9                	sbb    ecx,ecx
c0012252:	25 fc 0f 00 00       	and    eax,0xffc
c0012257:	c1 e2 0c             	shl    edx,0xc
c001225a:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0012260:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0012267:	01 d0                	add    eax,edx
c0012269:	c3                   	ret    

c001226a <VAS::getPageTableEntry(unsigned long)>:
c001226a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001226e:	89 ca                	mov    edx,ecx
c0012270:	c1 ea 16             	shr    edx,0x16
c0012273:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0012279:	c1 e9 0a             	shr    ecx,0xa
c001227c:	c1 e0 0c             	shl    eax,0xc
c001227f:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0012285:	8d 04 08             	lea    eax,[eax+ecx*1]
c0012288:	c3                   	ret    

c0012289 <Virt::freeKernelVirtualPages(unsigned long)>:
c0012289:	55                   	push   ebp
c001228a:	57                   	push   edi
c001228b:	bf 01 00 00 00       	mov    edi,0x1
c0012290:	56                   	push   esi
c0012291:	53                   	push   ebx
c0012292:	83 ec 1c             	sub    esp,0x1c
c0012295:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0012299:	c1 ee 0c             	shr    esi,0xc
c001229c:	eb 48                	jmp    c00122e6 <Virt::freeKernelVirtualPages(unsigned long)+0x5d>
c001229e:	a1 d0 be 02 c0       	mov    eax,ds:0xc002bed0
c00122a3:	83 ec 08             	sub    esp,0x8
c00122a6:	55                   	push   ebp
c00122a7:	50                   	push   eax
c00122a8:	e8 bd ff ff ff       	call   c001226a <VAS::getPageTableEntry(unsigned long)>
c00122ad:	83 c4 10             	add    esp,0x10
c00122b0:	8b 10                	mov    edx,DWORD PTR [eax]
c00122b2:	f6 c6 04             	test   dh,0x4
c00122b5:	75 70                	jne    c0012327 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c00122b7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00122bd:	83 fb 04             	cmp    ebx,0x4
c00122c0:	0f 84 8a 00 00 00    	je     c0012350 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c00122c6:	83 fb 02             	cmp    ebx,0x2
c00122c9:	0f 84 9a 00 00 00    	je     c0012369 <Virt::freeKernelVirtualPages(unsigned long)+0xe0>
c00122cf:	83 fb 03             	cmp    ebx,0x3
c00122d2:	0f 84 be 00 00 00    	je     c0012396 <Virt::freeKernelVirtualPages(unsigned long)+0x10d>
c00122d8:	83 fb 01             	cmp    ebx,0x1
c00122db:	0f 84 a2 00 00 00    	je     c0012383 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c00122e1:	83 c6 01             	add    esi,0x1
c00122e4:	31 ff                	xor    edi,edi
c00122e6:	56                   	push   esi
c00122e7:	89 f5                	mov    ebp,esi
c00122e9:	e8 7a fc ff ff       	call   c0011f68 <Virt::getPageState(unsigned long)>
c00122ee:	c1 e5 0c             	shl    ebp,0xc
c00122f1:	5a                   	pop    edx
c00122f2:	0f b6 d8             	movzx  ebx,al
c00122f5:	85 db                	test   ebx,ebx
c00122f7:	75 a5                	jne    c001229e <Virt::freeKernelVirtualPages(unsigned long)+0x15>
c00122f9:	83 ec 0c             	sub    esp,0xc
c00122fc:	68 86 26 02 c0       	push   0xc0022686
c0012301:	e8 20 c9 ff ff       	call   c000ec26 <KePanic(char const*)>
c0012306:	5a                   	pop    edx
c0012307:	59                   	pop    ecx
c0012308:	55                   	push   ebp
c0012309:	8b 2d d0 be 02 c0    	mov    ebp,DWORD PTR ds:0xc002bed0
c001230f:	55                   	push   ebp
c0012310:	e8 55 ff ff ff       	call   c001226a <VAS::getPageTableEntry(unsigned long)>
c0012315:	83 c4 10             	add    esp,0x10
c0012318:	8b 10                	mov    edx,DWORD PTR [eax]
c001231a:	f6 c6 04             	test   dh,0x4
c001231d:	75 08                	jne    c0012327 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c001231f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0012325:	eb ba                	jmp    c00122e1 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0012327:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001232b:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0012331:	83 ec 0c             	sub    esp,0xc
c0012334:	52                   	push   edx
c0012335:	e8 7d ca ff ff       	call   c000edb7 <Phys::freePage(unsigned long)>
c001233a:	83 c4 10             	add    esp,0x10
c001233d:	83 fb 04             	cmp    ebx,0x4
c0012340:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012344:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001234a:	0f 85 76 ff ff ff    	jne    c00122c6 <Virt::freeKernelVirtualPages(unsigned long)+0x3d>
c0012350:	83 e7 01             	and    edi,0x1
c0012353:	75 46                	jne    c001239b <Virt::freeKernelVirtualPages(unsigned long)+0x112>
c0012355:	c7 44 24 30 08 24 02 c0 	mov    DWORD PTR [esp+0x30],0xc0022408
c001235d:	83 c4 1c             	add    esp,0x1c
c0012360:	5b                   	pop    ebx
c0012361:	5e                   	pop    esi
c0012362:	5f                   	pop    edi
c0012363:	5d                   	pop    ebp
c0012364:	e9 bd c8 ff ff       	jmp    c000ec26 <KePanic(char const*)>
c0012369:	83 e7 01             	and    edi,0x1
c001236c:	75 15                	jne    c0012383 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c001236e:	83 ec 0c             	sub    esp,0xc
c0012371:	68 a2 26 02 c0       	push   0xc00226a2
c0012376:	e8 ab c8 ff ff       	call   c000ec26 <KePanic(char const*)>
c001237b:	83 c4 10             	add    esp,0x10
c001237e:	e9 5e ff ff ff       	jmp    c00122e1 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0012383:	83 ec 08             	sub    esp,0x8
c0012386:	6a 00                	push   0x0
c0012388:	56                   	push   esi
c0012389:	e8 a0 fb ff ff       	call   c0011f2e <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001238e:	83 c4 10             	add    esp,0x10
c0012391:	e9 4b ff ff ff       	jmp    c00122e1 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0012396:	83 e7 01             	and    edi,0x1
c0012399:	75 16                	jne    c00123b1 <Virt::freeKernelVirtualPages(unsigned long)+0x128>
c001239b:	83 ec 08             	sub    esp,0x8
c001239e:	6a 00                	push   0x0
c00123a0:	56                   	push   esi
c00123a1:	e8 88 fb ff ff       	call   c0011f2e <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00123a6:	83 c4 10             	add    esp,0x10
c00123a9:	83 c4 1c             	add    esp,0x1c
c00123ac:	5b                   	pop    ebx
c00123ad:	5e                   	pop    esi
c00123ae:	5f                   	pop    edi
c00123af:	5d                   	pop    ebp
c00123b0:	c3                   	ret    
c00123b1:	c7 44 24 30 be 26 02 c0 	mov    DWORD PTR [esp+0x30],0xc00226be
c00123b9:	83 c4 1c             	add    esp,0x1c
c00123bc:	5b                   	pop    ebx
c00123bd:	5e                   	pop    esi
c00123be:	5f                   	pop    edi
c00123bf:	5d                   	pop    ebp
c00123c0:	e9 61 c8 ff ff       	jmp    c000ec26 <KePanic(char const*)>
c00123c5:	90                   	nop

c00123c6 <VAS::freeAllocatedPages(unsigned long)>:
c00123c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00123ca:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00123ce:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c00123d2:	74 09                	je     c00123dd <VAS::freeAllocatedPages(unsigned long)+0x17>
c00123d4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00123d8:	e9 ac fe ff ff       	jmp    c0012289 <Virt::freeKernelVirtualPages(unsigned long)>
c00123dd:	c7 44 24 04 2c 24 02 c0 	mov    DWORD PTR [esp+0x4],0xc002242c
c00123e5:	e9 64 4b ff ff       	jmp    c0006f4e <Dbg::kprintf(char const*, ...)>

c00123ea <VAS::virtualToPhysical(unsigned long)>:
c00123ea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00123ee:	50                   	push   eax
c00123ef:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00123f3:	52                   	push   edx
c00123f4:	e8 71 fe ff ff       	call   c001226a <VAS::getPageTableEntry(unsigned long)>
c00123f9:	59                   	pop    ecx
c00123fa:	5a                   	pop    edx
c00123fb:	8b 00                	mov    eax,DWORD PTR [eax]
c00123fd:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012402:	c3                   	ret    
c0012403:	90                   	nop

c0012404 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>:
c0012404:	55                   	push   ebp
c0012405:	57                   	push   edi
c0012406:	56                   	push   esi
c0012407:	53                   	push   ebx
c0012408:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001240c:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0012410:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0012414:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0012418:	85 db                	test   ebx,ebx
c001241a:	7e 24                	jle    c0012440 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x3c>
c001241c:	c1 e3 0c             	shl    ebx,0xc
c001241f:	01 f3                	add    ebx,esi
c0012421:	56                   	push   esi
c0012422:	81 c6 00 10 00 00    	add    esi,0x1000
c0012428:	55                   	push   ebp
c0012429:	e8 3c fe ff ff       	call   c001226a <VAS::getPageTableEntry(unsigned long)>
c001242e:	5a                   	pop    edx
c001242f:	59                   	pop    ecx
c0012430:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012432:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0012436:	21 f9                	and    ecx,edi
c0012438:	09 d1                	or     ecx,edx
c001243a:	39 f3                	cmp    ebx,esi
c001243c:	89 08                	mov    DWORD PTR [eax],ecx
c001243e:	75 e1                	jne    c0012421 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x1d>
c0012440:	5b                   	pop    ebx
c0012441:	5e                   	pop    esi
c0012442:	5f                   	pop    edi
c0012443:	5d                   	pop    ebp
c0012444:	c3                   	ret    
c0012445:	90                   	nop

c0012446 <VAS::VAS()>:
c0012446:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001244a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012451:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012455:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001245c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012460:	a3 d0 be 02 c0       	mov    ds:0xc002bed0,eax
c0012465:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012469:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c001246d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012471:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0012474:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012478:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c001247f:	ba 7d 50 02 c0       	mov    edx,0xc002507d
c0012484:	b8 00 50 02 c0       	mov    eax,0xc0025000
c0012489:	29 c2                	sub    edx,eax
c001248b:	89 d0                	mov    eax,edx
c001248d:	05 ff 0f 00 00       	add    eax,0xfff
c0012492:	c1 e8 0c             	shr    eax,0xc
c0012495:	89 c2                	mov    edx,eax
c0012497:	b8 00 50 02 c0       	mov    eax,0xc0025000
c001249c:	6a 04                	push   0x4
c001249e:	6a ff                	push   0xffffffff
c00124a0:	52                   	push   edx
c00124a1:	50                   	push   eax
c00124a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00124a6:	e8 59 ff ff ff       	call   c0012404 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c00124ab:	83 c4 14             	add    esp,0x14
c00124ae:	90                   	nop
c00124af:	c3                   	ret    

c00124b0 <VAS::setToWriteCombining(unsigned long, int)>:
c00124b0:	a1 64 c7 02 c0       	mov    eax,ds:0xc002c764
c00124b5:	50                   	push   eax
c00124b6:	6a ff                	push   0xffffffff
c00124b8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00124bc:	52                   	push   edx
c00124bd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00124c1:	51                   	push   ecx
c00124c2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00124c6:	50                   	push   eax
c00124c7:	e8 38 ff ff ff       	call   c0012404 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c00124cc:	83 c4 14             	add    esp,0x14
c00124cf:	c3                   	ret    

c00124d0 <VAS::mapOtherVASIn(bool, VAS*)>:
c00124d0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00124d4:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00124d7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00124db:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00124de:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00124e3:	83 f8 01             	cmp    eax,0x1
c00124e6:	19 c0                	sbb    eax,eax
c00124e8:	83 ca 03             	or     edx,0x3
c00124eb:	83 e0 fc             	and    eax,0xfffffffc
c00124ee:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c00124f5:	0f 20 d8             	mov    eax,cr3
c00124f8:	0f 22 d8             	mov    cr3,eax
c00124fb:	c3                   	ret    

c00124fc <VAS::~VAS()>:
c00124fc:	83 ec 2c             	sub    esp,0x2c
c00124ff:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0012507:	fa                   	cli    
c0012508:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c001250d:	83 c0 01             	add    eax,0x1
c0012510:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c0012515:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001251a:	8b 00                	mov    eax,DWORD PTR [eax]
c001251c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001251f:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0012525:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0012529:	6a 01                	push   0x1
c001252b:	50                   	push   eax
c001252c:	e8 9f ff ff ff       	call   c00124d0 <VAS::mapOtherVASIn(bool, VAS*)>
c0012531:	83 c4 0c             	add    esp,0xc
c0012534:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001253c:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0012544:	0f 8f d8 00 00 00    	jg     c0012622 <VAS::~VAS()+0x126>
c001254a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001254e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012551:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012555:	c1 e2 02             	shl    edx,0x2
c0012558:	01 d0                	add    eax,edx
c001255a:	8b 00                	mov    eax,DWORD PTR [eax]
c001255c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012560:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012564:	83 e0 01             	and    eax,0x1
c0012567:	0f 84 ab 00 00 00    	je     c0012618 <VAS::~VAS()+0x11c>
c001256d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012575:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c001257d:	7f 74                	jg     c00125f3 <VAS::~VAS()+0xf7>
c001257f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012583:	c1 e0 0a             	shl    eax,0xa
c0012586:	89 c2                	mov    edx,eax
c0012588:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001258c:	01 d0                	add    eax,edx
c001258e:	c1 e0 0c             	shl    eax,0xc
c0012591:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012595:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001259a:	8b 00                	mov    eax,DWORD PTR [eax]
c001259c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001259f:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c00125a5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00125a9:	6a 01                	push   0x1
c00125ab:	50                   	push   eax
c00125ac:	e8 8b fc ff ff       	call   c001223c <VAS::getForeignPageTableEntry(bool, unsigned long)>
c00125b1:	83 c4 0c             	add    esp,0xc
c00125b4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00125b8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00125bc:	8b 00                	mov    eax,DWORD PTR [eax]
c00125be:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00125c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00125c6:	25 01 04 00 00       	and    eax,0x401
c00125cb:	3d 01 04 00 00       	cmp    eax,0x401
c00125d0:	75 1a                	jne    c00125ec <VAS::~VAS()+0xf0>
c00125d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00125d6:	25 00 f0 ff ff       	and    eax,0xfffff000
c00125db:	83 ec 0c             	sub    esp,0xc
c00125de:	50                   	push   eax
c00125df:	e8 d3 c7 ff ff       	call   c000edb7 <Phys::freePage(unsigned long)>
c00125e4:	83 c4 10             	add    esp,0x10
c00125e7:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c00125ec:	83 44 24 14 01       	add    DWORD PTR [esp+0x14],0x1
c00125f1:	eb 82                	jmp    c0012575 <VAS::~VAS()+0x79>
c00125f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00125f7:	25 00 04 00 00       	and    eax,0x400
c00125fc:	74 1a                	je     c0012618 <VAS::~VAS()+0x11c>
c00125fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012602:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012607:	83 ec 0c             	sub    esp,0xc
c001260a:	50                   	push   eax
c001260b:	e8 a7 c7 ff ff       	call   c000edb7 <Phys::freePage(unsigned long)>
c0012610:	83 c4 10             	add    esp,0x10
c0012613:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0012618:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c001261d:	e9 1a ff ff ff       	jmp    c001253c <VAS::~VAS()+0x40>
c0012622:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012626:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012629:	83 ec 0c             	sub    esp,0xc
c001262c:	50                   	push   eax
c001262d:	e8 57 fc ff ff       	call   c0012289 <Virt::freeKernelVirtualPages(unsigned long)>
c0012632:	83 c4 10             	add    esp,0x10
c0012635:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012639:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001263c:	83 ec 0c             	sub    esp,0xc
c001263f:	50                   	push   eax
c0012640:	e8 72 c7 ff ff       	call   c000edb7 <Phys::freePage(unsigned long)>
c0012645:	83 c4 10             	add    esp,0x10
c0012648:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c001264d:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0012652:	83 e8 01             	sub    eax,0x1
c0012655:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c001265a:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c001265f:	85 c0                	test   eax,eax
c0012661:	75 01                	jne    c0012664 <VAS::~VAS()+0x168>
c0012663:	fb                   	sti    
c0012664:	90                   	nop
c0012665:	83 c4 2c             	add    esp,0x2c
c0012668:	c3                   	ret    
c0012669:	90                   	nop

c001266a <VAS::mapPage(unsigned long, unsigned long, int)>:
c001266a:	55                   	push   ebp
c001266b:	57                   	push   edi
c001266c:	56                   	push   esi
c001266d:	53                   	push   ebx
c001266e:	83 ec 1c             	sub    esp,0x1c
c0012671:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0012675:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0012679:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001267d:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0012683:	77 08                	ja     c001268d <VAS::mapPage(unsigned long, unsigned long, int)+0x23>
c0012685:	0f 20 d8             	mov    eax,cr3
c0012688:	39 45 10             	cmp    DWORD PTR [ebp+0x10],eax
c001268b:	75 43                	jne    c00126d0 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c001268d:	89 d8                	mov    eax,ebx
c001268f:	09 f8                	or     eax,edi
c0012691:	a9 ff 0f 00 00       	test   eax,0xfff
c0012696:	75 53                	jne    c00126eb <VAS::mapPage(unsigned long, unsigned long, int)+0x81>
c0012698:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001269b:	89 de                	mov    esi,ebx
c001269d:	c1 ee 16             	shr    esi,0x16
c00126a0:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c00126a7:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c00126ab:	74 50                	je     c00126fd <VAS::mapPage(unsigned long, unsigned long, int)+0x93>
c00126ad:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00126b1:	c1 eb 0a             	shr    ebx,0xa
c00126b4:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c00126ba:	c1 e6 0c             	shl    esi,0xc
c00126bd:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c00126c3:	09 c7                	or     edi,eax
c00126c5:	89 3c 33             	mov    DWORD PTR [ebx+esi*1],edi
c00126c8:	83 c4 1c             	add    esp,0x1c
c00126cb:	5b                   	pop    ebx
c00126cc:	5e                   	pop    esi
c00126cd:	5f                   	pop    edi
c00126ce:	5d                   	pop    ebp
c00126cf:	c3                   	ret    
c00126d0:	83 ec 0c             	sub    esp,0xc
c00126d3:	68 50 24 02 c0       	push   0xc0022450
c00126d8:	e8 71 48 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00126dd:	89 d8                	mov    eax,ebx
c00126df:	83 c4 10             	add    esp,0x10
c00126e2:	09 f8                	or     eax,edi
c00126e4:	a9 ff 0f 00 00       	test   eax,0xfff
c00126e9:	74 ad                	je     c0012698 <VAS::mapPage(unsigned long, unsigned long, int)+0x2e>
c00126eb:	83 ec 0c             	sub    esp,0xc
c00126ee:	68 b8 24 02 c0       	push   0xc00224b8
c00126f3:	e8 2e c5 ff ff       	call   c000ec26 <KePanic(char const*)>
c00126f8:	83 c4 10             	add    esp,0x10
c00126fb:	eb 9b                	jmp    c0012698 <VAS::mapPage(unsigned long, unsigned long, int)+0x2e>
c00126fd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012701:	e8 1a c7 ff ff       	call   c000ee20 <Phys::allocatePage()>
c0012706:	8b 0d d0 be 02 c0    	mov    ecx,DWORD PTR ds:0xc002bed0
c001270c:	83 ec 0c             	sub    esp,0xc
c001270f:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0012713:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012717:	6a 01                	push   0x1
c0012719:	e8 6d f8 ff ff       	call   c0011f8b <Virt::allocateKernelVirtualPages(int)>
c001271e:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0012725:	6a 01                	push   0x1
c0012727:	50                   	push   eax
c0012728:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001272c:	52                   	push   edx
c001272d:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0012731:	51                   	push   ecx
c0012732:	e8 2d 01 00 00       	call   c0012864 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012737:	83 c4 1c             	add    esp,0x1c
c001273a:	68 00 10 00 00       	push   0x1000
c001273f:	6a 00                	push   0x0
c0012741:	50                   	push   eax
c0012742:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012746:	e8 a5 dd fe ff       	call   c00004f0 <memset>
c001274b:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001274f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0012752:	e8 32 fb ff ff       	call   c0012289 <Virt::freeKernelVirtualPages(unsigned long)>
c0012757:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001275b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001275f:	83 c4 10             	add    esp,0x10
c0012762:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0012765:	0d 07 04 00 00       	or     eax,0x407
c001276a:	89 04 11             	mov    DWORD PTR [ecx+edx*1],eax
c001276d:	e9 3b ff ff ff       	jmp    c00126ad <VAS::mapPage(unsigned long, unsigned long, int)+0x43>

c0012772 <VAS::allocatePages(int, int)>:
c0012772:	55                   	push   ebp
c0012773:	57                   	push   edi
c0012774:	56                   	push   esi
c0012775:	53                   	push   ebx
c0012776:	83 ec 1c             	sub    esp,0x1c
c0012779:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001277d:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0012781:	80 7e 01 00          	cmp    BYTE PTR [esi+0x1],0x0
c0012785:	75 75                	jne    c00127fc <VAS::allocatePages(int, int)+0x8a>
c0012787:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001278a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001278e:	85 c0                	test   eax,eax
c0012790:	74 49                	je     c00127db <VAS::allocatePages(int, int)+0x69>
c0012792:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012796:	89 d5                	mov    ebp,edx
c0012798:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001279c:	c1 e5 0c             	shl    ebp,0xc
c001279f:	01 dd                	add    ebp,ebx
c00127a1:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00127a4:	81 cf 00 04 00 00    	or     edi,0x400
c00127aa:	85 d2                	test   edx,edx
c00127ac:	7e 1b                	jle    c00127c9 <VAS::allocatePages(int, int)+0x57>
c00127ae:	e8 6d c6 ff ff       	call   c000ee20 <Phys::allocatePage()>
c00127b3:	57                   	push   edi
c00127b4:	53                   	push   ebx
c00127b5:	81 c3 00 10 00 00    	add    ebx,0x1000
c00127bb:	50                   	push   eax
c00127bc:	56                   	push   esi
c00127bd:	e8 a8 fe ff ff       	call   c001266a <VAS::mapPage(unsigned long, unsigned long, int)>
c00127c2:	83 c4 10             	add    esp,0x10
c00127c5:	39 dd                	cmp    ebp,ebx
c00127c7:	75 e5                	jne    c00127ae <VAS::allocatePages(int, int)+0x3c>
c00127c9:	0f 20 d8             	mov    eax,cr3
c00127cc:	0f 22 d8             	mov    cr3,eax
c00127cf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00127d3:	83 c4 1c             	add    esp,0x1c
c00127d6:	5b                   	pop    ebx
c00127d7:	5e                   	pop    esi
c00127d8:	5f                   	pop    edi
c00127d9:	5d                   	pop    ebp
c00127da:	c3                   	ret    
c00127db:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00127df:	83 ec 0c             	sub    esp,0xc
c00127e2:	68 dc 24 02 c0       	push   0xc00224dc
c00127e7:	e8 3a c4 ff ff       	call   c000ec26 <KePanic(char const*)>
c00127ec:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00127ef:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00127f3:	83 c4 10             	add    esp,0x10
c00127f6:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00127fa:	eb 96                	jmp    c0012792 <VAS::allocatePages(int, int)+0x20>
c00127fc:	83 ec 0c             	sub    esp,0xc
c00127ff:	52                   	push   edx
c0012800:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0012804:	e8 82 f7 ff ff       	call   c0011f8b <Virt::allocateKernelVirtualPages(int)>
c0012809:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001280d:	83 c4 10             	add    esp,0x10
c0012810:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0012815:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0012819:	77 38                	ja     c0012853 <VAS::allocatePages(int, int)+0xe1>
c001281b:	85 d2                	test   edx,edx
c001281d:	7e aa                	jle    c00127c9 <VAS::allocatePages(int, int)+0x57>
c001281f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0012823:	c1 e2 0c             	shl    edx,0xc
c0012826:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001282a:	81 cf 00 04 00 00    	or     edi,0x400
c0012830:	8d 2c 1a             	lea    ebp,[edx+ebx*1]
c0012833:	e8 e8 c5 ff ff       	call   c000ee20 <Phys::allocatePage()>
c0012838:	57                   	push   edi
c0012839:	53                   	push   ebx
c001283a:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012840:	50                   	push   eax
c0012841:	56                   	push   esi
c0012842:	e8 23 fe ff ff       	call   c001266a <VAS::mapPage(unsigned long, unsigned long, int)>
c0012847:	83 c4 10             	add    esp,0x10
c001284a:	39 dd                	cmp    ebp,ebx
c001284c:	75 e5                	jne    c0012833 <VAS::allocatePages(int, int)+0xc1>
c001284e:	e9 76 ff ff ff       	jmp    c00127c9 <VAS::allocatePages(int, int)+0x57>
c0012853:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0012857:	a1 68 c7 02 c0       	mov    eax,ds:0xc002c768
c001285c:	09 c1                	or     ecx,eax
c001285e:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0012862:	eb b7                	jmp    c001281b <VAS::allocatePages(int, int)+0xa9>

c0012864 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0012864:	55                   	push   ebp
c0012865:	57                   	push   edi
c0012866:	56                   	push   esi
c0012867:	53                   	push   ebx
c0012868:	83 ec 1c             	sub    esp,0x1c
c001286b:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001286f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012873:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0012877:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001287b:	85 db                	test   ebx,ebx
c001287d:	7e 2c                	jle    c00128ab <VAS::mapRange(unsigned long, unsigned long, int, int)+0x47>
c001287f:	c1 e3 0c             	shl    ebx,0xc
c0012882:	8d 04 33             	lea    eax,[ebx+esi*1]
c0012885:	89 f3                	mov    ebx,esi
c0012887:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001288b:	55                   	push   ebp
c001288c:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0012890:	29 f2                	sub    edx,esi
c0012892:	01 da                	add    edx,ebx
c0012894:	52                   	push   edx
c0012895:	53                   	push   ebx
c0012896:	81 c3 00 10 00 00    	add    ebx,0x1000
c001289c:	57                   	push   edi
c001289d:	e8 c8 fd ff ff       	call   c001266a <VAS::mapPage(unsigned long, unsigned long, int)>
c00128a2:	83 c4 10             	add    esp,0x10
c00128a5:	3b 5c 24 0c          	cmp    ebx,DWORD PTR [esp+0xc]
c00128a9:	75 e0                	jne    c001288b <VAS::mapRange(unsigned long, unsigned long, int, int)+0x27>
c00128ab:	0f 20 d8             	mov    eax,cr3
c00128ae:	0f 22 d8             	mov    cr3,eax
c00128b1:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00128b5:	83 c4 1c             	add    esp,0x1c
c00128b8:	5b                   	pop    ebx
c00128b9:	5e                   	pop    esi
c00128ba:	5f                   	pop    edi
c00128bb:	5d                   	pop    ebp
c00128bc:	c3                   	ret    
c00128bd:	90                   	nop

c00128be <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c00128be:	55                   	push   ebp
c00128bf:	57                   	push   edi
c00128c0:	56                   	push   esi
c00128c1:	53                   	push   ebx
c00128c2:	83 ec 1c             	sub    esp,0x1c
c00128c5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00128c9:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00128cd:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00128d1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00128d5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00128d9:	09 d8                	or     eax,ebx
c00128db:	a9 ff 0f 00 00       	test   eax,0xfff
c00128e0:	75 4b                	jne    c001292d <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x6f>
c00128e2:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00128e5:	89 de                	mov    esi,ebx
c00128e7:	c1 ee 16             	shr    esi,0x16
c00128ea:	8d 2c b5 00 00 00 00 	lea    ebp,[esi*4+0x0]
c00128f1:	f6 04 28 01          	test   BYTE PTR [eax+ebp*1],0x1
c00128f5:	74 48                	je     c001293f <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x81>
c00128f7:	0f b6 7c 24 04       	movzx  edi,BYTE PTR [esp+0x4]
c00128fc:	c1 eb 0a             	shr    ebx,0xa
c00128ff:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0012903:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0012907:	83 ff 01             	cmp    edi,0x1
c001290a:	19 c0                	sbb    eax,eax
c001290c:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0012912:	c1 e6 0c             	shl    esi,0xc
c0012915:	25 00 00 c0 ff       	and    eax,0xffc00000
c001291a:	01 f3                	add    ebx,esi
c001291c:	09 ca                	or     edx,ecx
c001291e:	89 94 18 00 00 c0 c2 	mov    DWORD PTR [eax+ebx*1-0x3d400000],edx
c0012925:	83 c4 1c             	add    esp,0x1c
c0012928:	5b                   	pop    ebx
c0012929:	5e                   	pop    esi
c001292a:	5f                   	pop    edi
c001292b:	5d                   	pop    ebp
c001292c:	c3                   	ret    
c001292d:	83 ec 0c             	sub    esp,0xc
c0012930:	68 08 25 02 c0       	push   0xc0022508
c0012935:	e8 ec c2 ff ff       	call   c000ec26 <KePanic(char const*)>
c001293a:	83 c4 10             	add    esp,0x10
c001293d:	eb a3                	jmp    c00128e2 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x24>
c001293f:	e8 dc c4 ff ff       	call   c000ee20 <Phys::allocatePage()>
c0012944:	8b 0d d0 be 02 c0    	mov    ecx,DWORD PTR ds:0xc002bed0
c001294a:	83 ec 0c             	sub    esp,0xc
c001294d:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0012951:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012955:	6a 01                	push   0x1
c0012957:	e8 2f f6 ff ff       	call   c0011f8b <Virt::allocateKernelVirtualPages(int)>
c001295c:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0012963:	6a 01                	push   0x1
c0012965:	50                   	push   eax
c0012966:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001296a:	50                   	push   eax
c001296b:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001296f:	51                   	push   ecx
c0012970:	e8 ef fe ff ff       	call   c0012864 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012975:	83 c4 1c             	add    esp,0x1c
c0012978:	68 00 10 00 00       	push   0x1000
c001297d:	6a 00                	push   0x0
c001297f:	50                   	push   eax
c0012980:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012984:	e8 67 db fe ff       	call   c00004f0 <memset>
c0012989:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001298d:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0012990:	e8 f4 f8 ff ff       	call   c0012289 <Virt::freeKernelVirtualPages(unsigned long)>
c0012995:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012999:	83 c4 10             	add    esp,0x10
c001299c:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c001299f:	81 ca 07 04 00 00    	or     edx,0x407
c00129a5:	89 14 28             	mov    DWORD PTR [eax+ebp*1],edx
c00129a8:	e9 4a ff ff ff       	jmp    c00128f7 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x39>
c00129ad:	90                   	nop

c00129ae <VAS::VAS(bool)>:
c00129ae:	53                   	push   ebx
c00129af:	83 ec 28             	sub    esp,0x28
c00129b2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00129b6:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00129ba:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00129be:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00129c5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00129c9:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00129d0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00129d4:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c00129d8:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c00129db:	e8 40 c4 ff ff       	call   c000ee20 <Phys::allocatePage()>
c00129e0:	89 c2                	mov    edx,eax
c00129e2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00129e6:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00129e9:	8b 1d d0 be 02 c0    	mov    ebx,DWORD PTR ds:0xc002bed0
c00129ef:	83 ec 0c             	sub    esp,0xc
c00129f2:	6a 01                	push   0x1
c00129f4:	e8 92 f5 ff ff       	call   c0011f8b <Virt::allocateKernelVirtualPages(int)>
c00129f9:	83 c4 10             	add    esp,0x10
c00129fc:	89 c2                	mov    edx,eax
c00129fe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012a02:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0012a05:	83 ec 0c             	sub    esp,0xc
c0012a08:	6a 03                	push   0x3
c0012a0a:	6a 01                	push   0x1
c0012a0c:	52                   	push   edx
c0012a0d:	50                   	push   eax
c0012a0e:	53                   	push   ebx
c0012a0f:	e8 50 fe ff ff       	call   c0012864 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012a14:	83 c4 20             	add    esp,0x20
c0012a17:	89 c2                	mov    edx,eax
c0012a19:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012a1d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0012a20:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0012a28:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0012a30:	7f 1d                	jg     c0012a4f <VAS::VAS(bool)+0xa1>
c0012a32:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012a36:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012a39:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012a3d:	c1 e2 02             	shl    edx,0x2
c0012a40:	01 d0                	add    eax,edx
c0012a42:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0012a48:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0012a4d:	eb d9                	jmp    c0012a28 <VAS::VAS(bool)+0x7a>
c0012a4f:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0012a57:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0012a5f:	7f 59                	jg     c0012aba <VAS::VAS(bool)+0x10c>
c0012a61:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012a65:	2d 00 02 00 00       	sub    eax,0x200
c0012a6a:	c1 e0 0c             	shl    eax,0xc
c0012a6d:	89 c2                	mov    edx,eax
c0012a6f:	a1 68 c7 02 c0       	mov    eax,ds:0xc002c768
c0012a74:	89 d1                	mov    ecx,edx
c0012a76:	09 c1                	or     ecx,eax
c0012a78:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012a7c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012a7f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012a83:	c1 e2 02             	shl    edx,0x2
c0012a86:	01 d0                	add    eax,edx
c0012a88:	83 c9 05             	or     ecx,0x5
c0012a8b:	89 ca                	mov    edx,ecx
c0012a8d:	89 10                	mov    DWORD PTR [eax],edx
c0012a8f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012a93:	2d 40 03 00 00       	sub    eax,0x340
c0012a98:	83 f8 7f             	cmp    eax,0x7f
c0012a9b:	77 16                	ja     c0012ab3 <VAS::VAS(bool)+0x105>
c0012a9d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012aa1:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012aa4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012aa8:	c1 e2 02             	shl    edx,0x2
c0012aab:	01 d0                	add    eax,edx
c0012aad:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0012ab3:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c0012ab8:	eb 9d                	jmp    c0012a57 <VAS::VAS(bool)+0xa9>
c0012aba:	8b 15 68 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c768
c0012ac0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012ac4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012ac7:	05 20 0c 00 00       	add    eax,0xc20
c0012acc:	81 ca 03 40 00 00    	or     edx,0x4003
c0012ad2:	89 10                	mov    DWORD PTR [eax],edx
c0012ad4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012ad8:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0012adb:	a1 68 c7 02 c0       	mov    eax,ds:0xc002c768
c0012ae0:	09 c2                	or     edx,eax
c0012ae2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012ae6:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012ae9:	05 fc 0f 00 00       	add    eax,0xffc
c0012aee:	83 ca 03             	or     edx,0x3
c0012af1:	89 10                	mov    DWORD PTR [eax],edx
c0012af3:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c0012af8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012afe:	83 ec 0c             	sub    esp,0xc
c0012b01:	50                   	push   eax
c0012b02:	e8 99 67 ff ff       	call   c00092a0 <Device::getName()>
c0012b07:	83 c4 10             	add    esp,0x10
c0012b0a:	83 ec 08             	sub    esp,0x8
c0012b0d:	68 d8 26 02 c0       	push   0xc00226d8
c0012b12:	50                   	push   eax
c0012b13:	e8 68 dc fe ff       	call   c0000780 <strcmp>
c0012b18:	83 c4 10             	add    esp,0x10
c0012b1b:	85 c0                	test   eax,eax
c0012b1d:	0f 94 c0             	sete   al
c0012b20:	0f b6 c0             	movzx  eax,al
c0012b23:	85 c0                	test   eax,eax
c0012b25:	74 68                	je     c0012b8f <VAS::VAS(bool)+0x1e1>
c0012b27:	fa                   	cli    
c0012b28:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c0012b2d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012b33:	05 68 09 00 00       	add    eax,0x968
c0012b38:	83 ec 0c             	sub    esp,0xc
c0012b3b:	50                   	push   eax
c0012b3c:	e8 79 b7 ff ff       	call   c000e2ba <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012b41:	83 c4 10             	add    esp,0x10
c0012b44:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012b49:	89 c3                	mov    ebx,eax
c0012b4b:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c0012b50:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012b56:	05 68 09 00 00       	add    eax,0x968
c0012b5b:	83 ec 0c             	sub    esp,0xc
c0012b5e:	50                   	push   eax
c0012b5f:	e8 56 b7 ff ff       	call   c000e2ba <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012b64:	83 c4 10             	add    esp,0x10
c0012b67:	83 ec 08             	sub    esp,0x8
c0012b6a:	50                   	push   eax
c0012b6b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012b6f:	e8 f6 f6 ff ff       	call   c001226a <VAS::getPageTableEntry(unsigned long)>
c0012b74:	83 c4 10             	add    esp,0x10
c0012b77:	8b 00                	mov    eax,DWORD PTR [eax]
c0012b79:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012b7e:	6a 11                	push   0x11
c0012b80:	53                   	push   ebx
c0012b81:	50                   	push   eax
c0012b82:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012b86:	e8 df fa ff ff       	call   c001266a <VAS::mapPage(unsigned long, unsigned long, int)>
c0012b8b:	83 c4 10             	add    esp,0x10
c0012b8e:	fb                   	sti    
c0012b8f:	90                   	nop
c0012b90:	83 c4 28             	add    esp,0x28
c0012b93:	5b                   	pop    ebx
c0012b94:	c3                   	ret    
c0012b95:	90                   	nop

c0012b96 <VAS::evict(unsigned long)>:
c0012b96:	55                   	push   ebp
c0012b97:	57                   	push   edi
c0012b98:	56                   	push   esi
c0012b99:	53                   	push   ebx
c0012b9a:	83 ec 1c             	sub    esp,0x1c
c0012b9d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012ba1:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0012ba5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012ba9:	e8 32 f5 ff ff       	call   c00120e0 <Virt::allocateSwapfilePage()>
c0012bae:	89 c7                	mov    edi,eax
c0012bb0:	a1 ec 41 02 c0       	mov    eax,ds:0xc00241ec
c0012bb5:	85 c0                	test   eax,eax
c0012bb7:	7e 40                	jle    c0012bf9 <VAS::evict(unsigned long)+0x63>
c0012bb9:	89 ee                	mov    esi,ebp
c0012bbb:	31 db                	xor    ebx,ebx
c0012bbd:	83 ec 0c             	sub    esp,0xc
c0012bc0:	57                   	push   edi
c0012bc1:	e8 04 f5 ff ff       	call   c00120ca <Virt::swapIDToSector(unsigned long)>
c0012bc6:	31 d2                	xor    edx,edx
c0012bc8:	89 34 24             	mov    DWORD PTR [esp],esi
c0012bcb:	81 c6 00 02 00 00    	add    esi,0x200
c0012bd1:	6a 01                	push   0x1
c0012bd3:	52                   	push   edx
c0012bd4:	01 d8                	add    eax,ebx
c0012bd6:	83 c3 01             	add    ebx,0x1
c0012bd9:	50                   	push   eax
c0012bda:	0f be 05 f8 41 02 c0 	movsx  eax,BYTE PTR ds:0xc00241f8
c0012be1:	8b 04 85 7c 96 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6984]
c0012be8:	50                   	push   eax
c0012be9:	e8 5e 75 ff ff       	call   c000a14c <LogicalDisk::write(unsigned long long, int, void*)>
c0012bee:	83 c4 20             	add    esp,0x20
c0012bf1:	39 1d ec 41 02 c0    	cmp    DWORD PTR ds:0xc00241ec,ebx
c0012bf7:	7f c4                	jg     c0012bbd <VAS::evict(unsigned long)+0x27>
c0012bf9:	c1 e7 0c             	shl    edi,0xc
c0012bfc:	83 ec 08             	sub    esp,0x8
c0012bff:	55                   	push   ebp
c0012c00:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012c04:	50                   	push   eax
c0012c05:	e8 60 f6 ff ff       	call   c001226a <VAS::getPageTableEntry(unsigned long)>
c0012c0a:	8b 10                	mov    edx,DWORD PTR [eax]
c0012c0c:	89 d3                	mov    ebx,edx
c0012c0e:	81 e2 fe 07 00 00    	and    edx,0x7fe
c0012c14:	09 d7                	or     edi,edx
c0012c16:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012c1c:	89 38                	mov    DWORD PTR [eax],edi
c0012c1e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012c21:	8b 15 c8 be 02 c0    	mov    edx,DWORD PTR ds:0xc002bec8
c0012c27:	83 c2 01             	add    edx,0x1
c0012c2a:	89 15 c8 be 02 c0    	mov    DWORD PTR ds:0xc002bec8,edx
c0012c30:	e8 82 c1 ff ff       	call   c000edb7 <Phys::freePage(unsigned long)>
c0012c35:	0f 20 d8             	mov    eax,cr3
c0012c38:	0f 22 d8             	mov    cr3,eax
c0012c3b:	8b 0d c8 be 02 c0    	mov    ecx,DWORD PTR ds:0xc002bec8
c0012c41:	51                   	push   ecx
c0012c42:	55                   	push   ebp
c0012c43:	53                   	push   ebx
c0012c44:	68 2c 25 02 c0       	push   0xc002252c
c0012c49:	e8 00 43 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0012c4e:	a1 c4 be 02 c0       	mov    eax,ds:0xc002bec4
c0012c53:	c7 44 24 50 e6 26 02 c0 	mov    DWORD PTR [esp+0x50],0xc00226e6
c0012c5b:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0012c5f:	8d 50 01             	lea    edx,[eax+0x1]
c0012c62:	89 15 c4 be 02 c0    	mov    DWORD PTR ds:0xc002bec4,edx
c0012c68:	83 c4 3c             	add    esp,0x3c
c0012c6b:	5b                   	pop    ebx
c0012c6c:	5e                   	pop    esi
c0012c6d:	5f                   	pop    edi
c0012c6e:	5d                   	pop    ebp
c0012c6f:	e9 da 42 ff ff       	jmp    c0006f4e <Dbg::kprintf(char const*, ...)>

c0012c74 <VAS::tryLoadBackOffDisk(unsigned long)>:
c0012c74:	55                   	push   ebp
c0012c75:	57                   	push   edi
c0012c76:	56                   	push   esi
c0012c77:	53                   	push   ebx
c0012c78:	81 ec 1c 10 00 00    	sub    esp,0x101c
c0012c7e:	8b 9c 24 34 10 00 00 	mov    ebx,DWORD PTR [esp+0x1034]
c0012c85:	81 fb ff ff bf ff    	cmp    ebx,0xffbfffff
c0012c8b:	77 7c                	ja     c0012d09 <VAS::tryLoadBackOffDisk(unsigned long)+0x95>
c0012c8d:	83 ec 08             	sub    esp,0x8
c0012c90:	53                   	push   ebx
c0012c91:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012c97:	68 09 27 02 c0       	push   0xc0022709
c0012c9c:	e8 ad 42 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0012ca1:	59                   	pop    ecx
c0012ca2:	5e                   	pop    esi
c0012ca3:	53                   	push   ebx
c0012ca4:	8b bc 24 3c 10 00 00 	mov    edi,DWORD PTR [esp+0x103c]
c0012cab:	57                   	push   edi
c0012cac:	e8 b9 f5 ff ff       	call   c001226a <VAS::getPageTableEntry(unsigned long)>
c0012cb1:	83 c4 10             	add    esp,0x10
c0012cb4:	85 c0                	test   eax,eax
c0012cb6:	89 c5                	mov    ebp,eax
c0012cb8:	0f 95 c0             	setne  al
c0012cbb:	85 db                	test   ebx,ebx
c0012cbd:	0f 95 c2             	setne  dl
c0012cc0:	21 d0                	and    eax,edx
c0012cc2:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0012cc6:	a8 01                	test   al,0x1
c0012cc8:	75 0f                	jne    c0012cd9 <VAS::tryLoadBackOffDisk(unsigned long)+0x65>
c0012cca:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0012cce:	81 c4 1c 10 00 00    	add    esp,0x101c
c0012cd4:	5b                   	pop    ebx
c0012cd5:	5e                   	pop    esi
c0012cd6:	5f                   	pop    edi
c0012cd7:	5d                   	pop    ebp
c0012cd8:	c3                   	ret    
c0012cd9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012cdc:	f6 c4 02             	test   ah,0x2
c0012cdf:	75 3d                	jne    c0012d1e <VAS::tryLoadBackOffDisk(unsigned long)+0xaa>
c0012ce1:	89 c2                	mov    edx,eax
c0012ce3:	81 e2 01 04 00 00    	and    edx,0x401
c0012ce9:	81 fa 00 04 00 00    	cmp    edx,0x400
c0012cef:	0f 84 82 00 00 00    	je     c0012d77 <VAS::tryLoadBackOffDisk(unsigned long)+0x103>
c0012cf5:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0012cfa:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0012cfe:	81 c4 1c 10 00 00    	add    esp,0x101c
c0012d04:	5b                   	pop    ebx
c0012d05:	5e                   	pop    esi
c0012d06:	5f                   	pop    edi
c0012d07:	5d                   	pop    ebp
c0012d08:	c3                   	ret    
c0012d09:	83 ec 0c             	sub    esp,0xc
c0012d0c:	68 f7 26 02 c0       	push   0xc00226f7
c0012d11:	e8 10 bf ff ff       	call   c000ec26 <KePanic(char const*)>
c0012d16:	83 c4 10             	add    esp,0x10
c0012d19:	e9 6f ff ff ff       	jmp    c0012c8d <VAS::tryLoadBackOffDisk(unsigned long)+0x19>
c0012d1e:	83 ec 0c             	sub    esp,0xc
c0012d21:	68 5c 25 02 c0       	push   0xc002255c
c0012d26:	e8 23 42 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0012d2b:	e8 f0 c0 ff ff       	call   c000ee20 <Phys::allocatePage()>
c0012d30:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0012d33:	83 ca 01             	or     edx,0x1
c0012d36:	89 55 00             	mov    DWORD PTR [ebp+0x0],edx
c0012d39:	0f 20 da             	mov    edx,cr3
c0012d3c:	0f 22 da             	mov    cr3,edx
c0012d3f:	ba 00 10 00 00       	mov    edx,0x1000
c0012d44:	89 de                	mov    esi,ebx
c0012d46:	8d 7c 24 20          	lea    edi,[esp+0x20]
c0012d4a:	89 d1                	mov    ecx,edx
c0012d4c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012d4e:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0012d51:	81 e1 ff 0d 00 00    	and    ecx,0xdff
c0012d57:	09 c8                	or     eax,ecx
c0012d59:	83 c8 02             	or     eax,0x2
c0012d5c:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0012d5f:	0f 20 d8             	mov    eax,cr3
c0012d62:	0f 22 d8             	mov    cr3,eax
c0012d65:	8d 74 24 20          	lea    esi,[esp+0x20]
c0012d69:	89 df                	mov    edi,ebx
c0012d6b:	89 d1                	mov    ecx,edx
c0012d6d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012d6f:	83 c4 10             	add    esp,0x10
c0012d72:	e9 53 ff ff ff       	jmp    c0012cca <VAS::tryLoadBackOffDisk(unsigned long)+0x56>
c0012d77:	c1 e8 0c             	shr    eax,0xc
c0012d7a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012d7e:	e8 9d c0 ff ff       	call   c000ee20 <Phys::allocatePage()>
c0012d83:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0012d86:	81 e2 ff 0f 00 00    	and    edx,0xfff
c0012d8c:	09 c2                	or     edx,eax
c0012d8e:	81 ca 01 08 00 00    	or     edx,0x801
c0012d94:	89 55 00             	mov    DWORD PTR [ebp+0x0],edx
c0012d97:	a1 ec 41 02 c0       	mov    eax,ds:0xc00241ec
c0012d9c:	85 c0                	test   eax,eax
c0012d9e:	7e 44                	jle    c0012de4 <VAS::tryLoadBackOffDisk(unsigned long)+0x170>
c0012da0:	89 df                	mov    edi,ebx
c0012da2:	31 f6                	xor    esi,esi
c0012da4:	83 ec 0c             	sub    esp,0xc
c0012da7:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0012dab:	51                   	push   ecx
c0012dac:	e8 19 f3 ff ff       	call   c00120ca <Virt::swapIDToSector(unsigned long)>
c0012db1:	31 d2                	xor    edx,edx
c0012db3:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012db6:	81 c7 00 02 00 00    	add    edi,0x200
c0012dbc:	6a 01                	push   0x1
c0012dbe:	52                   	push   edx
c0012dbf:	01 f0                	add    eax,esi
c0012dc1:	83 c6 01             	add    esi,0x1
c0012dc4:	50                   	push   eax
c0012dc5:	0f be 05 f8 41 02 c0 	movsx  eax,BYTE PTR ds:0xc00241f8
c0012dcc:	8b 2c 85 7c 96 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd6984]
c0012dd3:	55                   	push   ebp
c0012dd4:	e8 07 73 ff ff       	call   c000a0e0 <LogicalDisk::read(unsigned long long, int, void*)>
c0012dd9:	83 c4 20             	add    esp,0x20
c0012ddc:	39 35 ec 41 02 c0    	cmp    DWORD PTR ds:0xc00241ec,esi
c0012de2:	7f c0                	jg     c0012da4 <VAS::tryLoadBackOffDisk(unsigned long)+0x130>
c0012de4:	a1 c8 be 02 c0       	mov    eax,ds:0xc002bec8
c0012de9:	83 ec 04             	sub    esp,0x4
c0012dec:	83 e8 01             	sub    eax,0x1
c0012def:	50                   	push   eax
c0012df0:	53                   	push   ebx
c0012df1:	68 1c 27 02 c0       	push   0xc002271c
c0012df6:	a3 c8 be 02 c0       	mov    ds:0xc002bec8,eax
c0012dfb:	e8 4e 41 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0012e00:	58                   	pop    eax
c0012e01:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012e05:	52                   	push   edx
c0012e06:	e8 9c f2 ff ff       	call   c00120a7 <Virt::freeSwapfilePage(unsigned long)>
c0012e0b:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0012e10:	83 c4 10             	add    esp,0x10
c0012e13:	83 e8 01             	sub    eax,0x1
c0012e16:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c0012e1b:	85 c0                	test   eax,eax
c0012e1d:	75 01                	jne    c0012e20 <VAS::tryLoadBackOffDisk(unsigned long)+0x1ac>
c0012e1f:	fb                   	sti    
c0012e20:	0f 20 d8             	mov    eax,cr3
c0012e23:	0f 22 d8             	mov    cr3,eax
c0012e26:	e9 9f fe ff ff       	jmp    c0012cca <VAS::tryLoadBackOffDisk(unsigned long)+0x56>
c0012e2b:	90                   	nop

c0012e2c <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)>:
c0012e2c:	55                   	push   ebp
c0012e2d:	57                   	push   edi
c0012e2e:	56                   	push   esi
c0012e2f:	53                   	push   ebx
c0012e30:	83 ec 28             	sub    esp,0x28
c0012e33:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0012e37:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0012e3b:	50                   	push   eax
c0012e3c:	e8 4a f1 ff ff       	call   c0011f8b <Virt::allocateKernelVirtualPages(int)>
c0012e41:	83 c4 0c             	add    esp,0xc
c0012e44:	6a 07                	push   0x7
c0012e46:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0012e4a:	52                   	push   edx
c0012e4b:	89 c5                	mov    ebp,eax
c0012e4d:	53                   	push   ebx
c0012e4e:	e8 1f f9 ff ff       	call   c0012772 <VAS::allocatePages(int, int)>
c0012e53:	83 c4 10             	add    esp,0x10
c0012e56:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0012e5a:	89 c7                	mov    edi,eax
c0012e5c:	85 c9                	test   ecx,ecx
c0012e5e:	74 2f                	je     c0012e8f <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x63>
c0012e60:	31 f6                	xor    esi,esi
c0012e62:	e8 b9 bf ff ff       	call   c000ee20 <Phys::allocatePage()>
c0012e67:	83 c6 01             	add    esi,0x1
c0012e6a:	6a 03                	push   0x3
c0012e6c:	55                   	push   ebp
c0012e6d:	50                   	push   eax
c0012e6e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012e72:	53                   	push   ebx
c0012e73:	e8 f2 f7 ff ff       	call   c001266a <VAS::mapPage(unsigned long, unsigned long, int)>
c0012e78:	6a 07                	push   0x7
c0012e7a:	57                   	push   edi
c0012e7b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012e7f:	50                   	push   eax
c0012e80:	53                   	push   ebx
c0012e81:	e8 e4 f7 ff ff       	call   c001266a <VAS::mapPage(unsigned long, unsigned long, int)>
c0012e86:	83 c4 20             	add    esp,0x20
c0012e89:	39 74 24 34          	cmp    DWORD PTR [esp+0x34],esi
c0012e8d:	75 d3                	jne    c0012e62 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x36>
c0012e8f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0012e93:	89 28                	mov    DWORD PTR [eax],ebp
c0012e95:	83 c4 1c             	add    esp,0x1c
c0012e98:	89 f8                	mov    eax,edi
c0012e9a:	5b                   	pop    ebx
c0012e9b:	5e                   	pop    esi
c0012e9c:	5f                   	pop    edi
c0012e9d:	5d                   	pop    ebp
c0012e9e:	c3                   	ret    
c0012e9f:	90                   	nop

c0012ea0 <VAS::freeSharedMemoryWithKernel(unsigned long, unsigned long)>:
c0012ea0:	53                   	push   ebx
c0012ea1:	83 ec 14             	sub    esp,0x14
c0012ea4:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0012ea8:	68 7c 25 02 c0       	push   0xc002257c
c0012ead:	e8 9c 40 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0012eb2:	c7 04 24 dc 25 02 c0 	mov    DWORD PTR [esp],0xc00225dc
c0012eb9:	e8 90 40 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0012ebe:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0012ec2:	83 c4 18             	add    esp,0x18
c0012ec5:	5b                   	pop    ebx
c0012ec6:	e9 be f3 ff ff       	jmp    c0012289 <Virt::freeKernelVirtualPages(unsigned long)>
c0012ecb:	90                   	nop

c0012ecc <VAS::scanForEviction()>:
c0012ecc:	57                   	push   edi
c0012ecd:	56                   	push   esi
c0012ece:	31 f6                	xor    esi,esi
c0012ed0:	53                   	push   ebx
c0012ed1:	83 ec 10             	sub    esp,0x10
c0012ed4:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0012ed8:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0012edb:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0012ee1:	75 0e                	jne    c0012ef1 <VAS::scanForEviction()+0x25>
c0012ee3:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0012ee6:	89 da                	mov    edx,ebx
c0012ee8:	c1 ea 16             	shr    edx,0x16
c0012eeb:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0012eef:	74 57                	je     c0012f48 <VAS::scanForEviction()+0x7c>
c0012ef1:	53                   	push   ebx
c0012ef2:	57                   	push   edi
c0012ef3:	e8 72 f3 ff ff       	call   c001226a <VAS::getPageTableEntry(unsigned long)>
c0012ef8:	5a                   	pop    edx
c0012ef9:	59                   	pop    ecx
c0012efa:	8b 10                	mov    edx,DWORD PTR [eax]
c0012efc:	89 d1                	mov    ecx,edx
c0012efe:	c1 e9 0c             	shr    ecx,0xc
c0012f01:	74 10                	je     c0012f13 <VAS::scanForEviction()+0x47>
c0012f03:	89 d1                	mov    ecx,edx
c0012f05:	81 e1 01 08 00 00    	and    ecx,0x801
c0012f0b:	81 f9 01 08 00 00    	cmp    ecx,0x801
c0012f11:	74 40                	je     c0012f53 <VAS::scanForEviction()+0x87>
c0012f13:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012f19:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c0012f1f:	76 2d                	jbe    c0012f4e <VAS::scanForEviction()+0x82>
c0012f21:	c7 47 08 00 00 00 00 	mov    DWORD PTR [edi+0x8],0x0
c0012f28:	83 c6 01             	add    esi,0x1
c0012f2b:	83 fe 03             	cmp    esi,0x3
c0012f2e:	74 32                	je     c0012f62 <VAS::scanForEviction()+0x96>
c0012f30:	31 db                	xor    ebx,ebx
c0012f32:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0012f38:	75 b7                	jne    c0012ef1 <VAS::scanForEviction()+0x25>
c0012f3a:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0012f3d:	89 da                	mov    edx,ebx
c0012f3f:	c1 ea 16             	shr    edx,0x16
c0012f42:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0012f46:	75 a9                	jne    c0012ef1 <VAS::scanForEviction()+0x25>
c0012f48:	81 c3 00 00 40 00    	add    ebx,0x400000
c0012f4e:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0012f51:	eb 88                	jmp    c0012edb <VAS::scanForEviction()+0xf>
c0012f53:	f6 c2 20             	test   dl,0x20
c0012f56:	74 13                	je     c0012f6b <VAS::scanForEviction()+0x9f>
c0012f58:	83 e2 df             	and    edx,0xffffffdf
c0012f5b:	89 10                	mov    DWORD PTR [eax],edx
c0012f5d:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0012f60:	eb b1                	jmp    c0012f13 <VAS::scanForEviction()+0x47>
c0012f62:	83 c4 10             	add    esp,0x10
c0012f65:	31 c0                	xor    eax,eax
c0012f67:	5b                   	pop    ebx
c0012f68:	5e                   	pop    esi
c0012f69:	5f                   	pop    edi
c0012f6a:	c3                   	ret    
c0012f6b:	89 d0                	mov    eax,edx
c0012f6d:	83 ec 08             	sub    esp,0x8
c0012f70:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012f75:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012f79:	53                   	push   ebx
c0012f7a:	68 31 27 02 c0       	push   0xc0022731
c0012f7f:	e8 ca 3f ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0012f84:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c0012f87:	58                   	pop    eax
c0012f88:	5a                   	pop    edx
c0012f89:	51                   	push   ecx
c0012f8a:	57                   	push   edi
c0012f8b:	e8 06 fc ff ff       	call   c0012b96 <VAS::evict(unsigned long)>
c0012f90:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0012f93:	5b                   	pop    ebx
c0012f94:	5e                   	pop    esi
c0012f95:	50                   	push   eax
c0012f96:	68 45 27 02 c0       	push   0xc0022745
c0012f9b:	e8 ae 3f ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0012fa0:	58                   	pop    eax
c0012fa1:	5a                   	pop    edx
c0012fa2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012fa6:	50                   	push   eax
c0012fa7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012fab:	68 58 27 02 c0       	push   0xc0022758
c0012fb0:	e8 99 3f ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0012fb5:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c0012fb8:	83 c4 10             	add    esp,0x10
c0012fbb:	81 c1 00 10 00 00    	add    ecx,0x1000
c0012fc1:	89 4f 08             	mov    DWORD PTR [edi+0x8],ecx
c0012fc4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012fc8:	83 c4 10             	add    esp,0x10
c0012fcb:	5b                   	pop    ebx
c0012fcc:	5e                   	pop    esi
c0012fcd:	5f                   	pop    edi
c0012fce:	c3                   	ret    

c0012fcf <mapVASFirstTime>:
c0012fcf:	55                   	push   ebp
c0012fd0:	57                   	push   edi
c0012fd1:	56                   	push   esi
c0012fd2:	53                   	push   ebx
c0012fd3:	83 ec 0c             	sub    esp,0xc
c0012fd6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012fdb:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0012fde:	83 fa 01             	cmp    edx,0x1
c0012fe1:	0f 84 cb 00 00 00    	je     c00130b2 <mapVASFirstTime+0xe3>
c0012fe7:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0012fea:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c0012fef:	bf 00 90 e7 01       	mov    edi,0x1e79000
c0012ff4:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c0012ff7:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c0012ffd:	c1 e5 15             	shl    ebp,0x15
c0013000:	29 eb                	sub    ebx,ebp
c0013002:	29 ef                	sub    edi,ebp
c0013004:	e8 17 be ff ff       	call   c000ee20 <Phys::allocatePage()>
c0013009:	83 ec 0c             	sub    esp,0xc
c001300c:	68 03 04 00 00       	push   0x403
c0013011:	6a 01                	push   0x1
c0013013:	53                   	push   ebx
c0013014:	81 eb 00 10 00 00    	sub    ebx,0x1000
c001301a:	50                   	push   eax
c001301b:	56                   	push   esi
c001301c:	e8 43 f8 ff ff       	call   c0012864 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0013021:	83 c4 20             	add    esp,0x20
c0013024:	39 fb                	cmp    ebx,edi
c0013026:	75 dc                	jne    c0013004 <mapVASFirstTime+0x35>
c0013028:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c001302d:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c0013032:	29 eb                	sub    ebx,ebp
c0013034:	29 ef                	sub    edi,ebp
c0013036:	e8 e5 bd ff ff       	call   c000ee20 <Phys::allocatePage()>
c001303b:	0f b6 56 01          	movzx  edx,BYTE PTR [esi+0x1]
c001303f:	83 fa 01             	cmp    edx,0x1
c0013042:	19 d2                	sbb    edx,edx
c0013044:	83 ec 0c             	sub    esp,0xc
c0013047:	83 e2 04             	and    edx,0x4
c001304a:	81 c2 03 04 00 00    	add    edx,0x403
c0013050:	52                   	push   edx
c0013051:	6a 01                	push   0x1
c0013053:	53                   	push   ebx
c0013054:	81 eb 00 10 00 00    	sub    ebx,0x1000
c001305a:	50                   	push   eax
c001305b:	56                   	push   esi
c001305c:	e8 03 f8 ff ff       	call   c0012864 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0013061:	83 c4 20             	add    esp,0x20
c0013064:	39 df                	cmp    edi,ebx
c0013066:	75 ce                	jne    c0013036 <mapVASFirstTime+0x67>
c0013068:	83 ec 0c             	sub    esp,0xc
c001306b:	bb 7c 60 02 c0       	mov    ebx,0xc002607c
c0013070:	6a 04                	push   0x4
c0013072:	81 eb 00 50 02 c0    	sub    ebx,0xc0025000
c0013078:	6a ff                	push   0xffffffff
c001307a:	c1 eb 0c             	shr    ebx,0xc
c001307d:	53                   	push   ebx
c001307e:	68 00 50 02 c0       	push   0xc0025000
c0013083:	56                   	push   esi
c0013084:	e8 7b f3 ff ff       	call   c0012404 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0013089:	83 c4 14             	add    esp,0x14
c001308c:	a1 d0 be 02 c0       	mov    eax,ds:0xc002bed0
c0013091:	6a 04                	push   0x4
c0013093:	6a ff                	push   0xffffffff
c0013095:	53                   	push   ebx
c0013096:	68 00 50 02 c0       	push   0xc0025000
c001309b:	50                   	push   eax
c001309c:	e8 63 f3 ff ff       	call   c0012404 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c00130a1:	0f 20 d8             	mov    eax,cr3
c00130a4:	0f 22 d8             	mov    cr3,eax
c00130a7:	83 c4 20             	add    esp,0x20
c00130aa:	83 c4 0c             	add    esp,0xc
c00130ad:	5b                   	pop    ebx
c00130ae:	5e                   	pop    esi
c00130af:	5f                   	pop    edi
c00130b0:	5d                   	pop    ebp
c00130b1:	c3                   	ret    
c00130b2:	83 ec 0c             	sub    esp,0xc
c00130b5:	68 65 27 02 c0       	push   0xc0022765
c00130ba:	e8 8f 3e ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00130bf:	83 c4 10             	add    esp,0x10
c00130c2:	83 c4 0c             	add    esp,0xc
c00130c5:	5b                   	pop    ebx
c00130c6:	5e                   	pop    esi
c00130c7:	5f                   	pop    edi
c00130c8:	5d                   	pop    ebp
c00130c9:	c3                   	ret    

c00130ca <SysEject(regs*)>:
c00130ca:	83 ec 0c             	sub    esp,0xc
c00130cd:	83 ca ff             	or     edx,0xffffffff
c00130d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130d4:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c00130d7:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00130dc:	83 e9 41             	sub    ecx,0x41
c00130df:	83 f9 19             	cmp    ecx,0x19
c00130e2:	77 18                	ja     c00130fc <SysEject(regs*)+0x32>
c00130e4:	8b 0c 8d 80 97 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6880]
c00130eb:	85 c9                	test   ecx,ecx
c00130ed:	74 0d                	je     c00130fc <SysEject(regs*)+0x32>
c00130ef:	83 ec 0c             	sub    esp,0xc
c00130f2:	51                   	push   ecx
c00130f3:	e8 7e 6f ff ff       	call   c000a076 <LogicalDisk::eject()>
c00130f8:	83 c4 10             	add    esp,0x10
c00130fb:	99                   	cdq    
c00130fc:	83 c4 0c             	add    esp,0xc
c00130ff:	c3                   	ret    

c0013100 <SysExit(regs*)>:
c0013100:	83 ec 18             	sub    esp,0x18
c0013103:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013107:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001310a:	e8 55 2a 00 00       	call   c0015b64 <terminateTask(int)>
c001310f:	83 c8 ff             	or     eax,0xffffffff
c0013112:	83 c4 1c             	add    esp,0x1c
c0013115:	89 c2                	mov    edx,eax
c0013117:	c3                   	ret    

c0013118 <SysGetCwd(regs*)>:
c0013118:	83 ec 10             	sub    esp,0x10
c001311b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001311f:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0013122:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013125:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001312a:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c001312d:	e8 7a 4c ff ff       	call   c0007dac <Fs::getcwd(Process*, char*, int)>
c0013132:	83 c4 1c             	add    esp,0x1c
c0013135:	99                   	cdq    
c0013136:	c3                   	ret    

c0013137 <SysGetPID(regs*)>:
c0013137:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001313c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001313f:	8b 00                	mov    eax,DWORD PTR [eax]
c0013141:	99                   	cdq    
c0013142:	c3                   	ret    

c0013143 <SysGetRAMData(regs*)>:
c0013143:	69 05 a8 bd 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc002bda8,0xc8
c001314d:	8b 0d ac bd 02 c0    	mov    ecx,DWORD PTR ds:0xc002bdac
c0013153:	99                   	cdq    
c0013154:	f7 f9                	idiv   ecx
c0013156:	c1 e0 18             	shl    eax,0x18
c0013159:	09 c8                	or     eax,ecx
c001315b:	99                   	cdq    
c001315c:	c3                   	ret    

c001315d <SysGetVGAPtr(regs*)>:
c001315d:	55                   	push   ebp
c001315e:	57                   	push   edi
c001315f:	56                   	push   esi
c0013160:	53                   	push   ebx
c0013161:	83 ec 18             	sub    esp,0x18
c0013164:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0013168:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001316b:	e8 c0 24 00 00       	call   c0015630 <Thr::processFromPID(int)>
c0013170:	83 c4 10             	add    esp,0x10
c0013173:	89 c1                	mov    ecx,eax
c0013175:	b8 01 00 00 00       	mov    eax,0x1
c001317a:	85 c9                	test   ecx,ecx
c001317c:	74 57                	je     c00131d5 <SysGetVGAPtr(regs*)+0x78>
c001317e:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0013182:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c0013188:	74 0c                	je     c0013196 <SysGetVGAPtr(regs*)+0x39>
c001318a:	83 ec 0c             	sub    esp,0xc
c001318d:	55                   	push   ebp
c001318e:	e8 ee de ff ff       	call   c0011081 <setActiveTerminal(VgaText*)>
c0013193:	83 c4 10             	add    esp,0x10
c0013196:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0013199:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c001319e:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c00131a1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00131a3:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00131a6:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00131a9:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c00131af:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00131b2:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00131b5:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c00131bb:	50                   	push   eax
c00131bc:	50                   	push   eax
c00131bd:	68 7e 27 02 c0       	push   0xc002277e
c00131c2:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00131c5:	05 a8 0f 00 00       	add    eax,0xfa8
c00131ca:	50                   	push   eax
c00131cb:	e8 80 d4 fe ff       	call   c0000650 <strcpy>
c00131d0:	83 c4 10             	add    esp,0x10
c00131d3:	31 c0                	xor    eax,eax
c00131d5:	83 c4 0c             	add    esp,0xc
c00131d8:	31 d2                	xor    edx,edx
c00131da:	5b                   	pop    ebx
c00131db:	5e                   	pop    esi
c00131dc:	5f                   	pop    edi
c00131dd:	5d                   	pop    ebp
c00131de:	c3                   	ret    
c00131df:	90                   	nop

c00131e0 <SysKill(regs*)>:
c00131e0:	53                   	push   ebx
c00131e1:	83 ec 08             	sub    esp,0x8
c00131e4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00131e8:	83 7b 28 ff          	cmp    DWORD PTR [ebx+0x28],0xffffffff
c00131ec:	75 16                	jne    c0013204 <SysKill(regs*)+0x24>
c00131ee:	83 ec 0c             	sub    esp,0xc
c00131f1:	68 88 27 02 c0       	push   0xc0022788
c00131f6:	e8 2b ba ff ff       	call   c000ec26 <KePanic(char const*)>
c00131fb:	83 c4 10             	add    esp,0x10
c00131fe:	e9 89 00 00 00       	jmp    c001328c <SysKill(regs*)+0xac>
c0013203:	90                   	nop
c0013204:	83 ec 0c             	sub    esp,0xc
c0013207:	68 cc c6 02 c0       	push   0xc002c6cc
c001320c:	e8 f7 cb 00 00       	call   c001fe08 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013211:	8d 76 00             	lea    esi,[esi+0x0]
c0013214:	83 c4 10             	add    esp,0x10
c0013217:	85 c0                	test   eax,eax
c0013219:	74 19                	je     c0013234 <SysKill(regs*)+0x54>
c001321b:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001321e:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0013221:	39 0a                	cmp    DWORD PTR [edx],ecx
c0013223:	74 33                	je     c0013258 <SysKill(regs*)+0x78>
c0013225:	52                   	push   edx
c0013226:	52                   	push   edx
c0013227:	50                   	push   eax
c0013228:	68 cc c6 02 c0       	push   0xc002c6cc
c001322d:	e8 e2 d0 00 00       	call   c0020314 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0013232:	eb e0                	jmp    c0013214 <SysKill(regs*)+0x34>
c0013234:	83 ec 0c             	sub    esp,0xc
c0013237:	68 c0 c6 02 c0       	push   0xc002c6c0
c001323c:	e8 c7 cb 00 00       	call   c001fe08 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013241:	8d 76 00             	lea    esi,[esi+0x0]
c0013244:	83 c4 10             	add    esp,0x10
c0013247:	85 c0                	test   eax,eax
c0013249:	74 41                	je     c001328c <SysKill(regs*)+0xac>
c001324b:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001324e:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0013251:	39 0a                	cmp    DWORD PTR [edx],ecx
c0013253:	75 27                	jne    c001327c <SysKill(regs*)+0x9c>
c0013255:	8d 76 00             	lea    esi,[esi+0x0]
c0013258:	51                   	push   ecx
c0013259:	51                   	push   ecx
c001325a:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001325d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013262:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013265:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c001326b:	e8 e0 ca ff ff       	call   c000fd50 <KeRaiseSignal(SigHandlerBlock*, int)>
c0013270:	83 c4 10             	add    esp,0x10
c0013273:	31 c0                	xor    eax,eax
c0013275:	31 d2                	xor    edx,edx
c0013277:	eb 1b                	jmp    c0013294 <SysKill(regs*)+0xb4>
c0013279:	8d 76 00             	lea    esi,[esi+0x0]
c001327c:	52                   	push   edx
c001327d:	52                   	push   edx
c001327e:	50                   	push   eax
c001327f:	68 c0 c6 02 c0       	push   0xc002c6c0
c0013284:	e8 8b d0 00 00       	call   c0020314 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0013289:	eb b9                	jmp    c0013244 <SysKill(regs*)+0x64>
c001328b:	90                   	nop
c001328c:	83 c8 ff             	or     eax,0xffffffff
c001328f:	89 c2                	mov    edx,eax
c0013291:	8d 76 00             	lea    esi,[esi+0x0]
c0013294:	83 c4 08             	add    esp,0x8
c0013297:	5b                   	pop    ebx
c0013298:	c3                   	ret    

c0013299 <SysLoadDLL(regs*)>:
c0013299:	56                   	push   esi
c001329a:	31 d2                	xor    edx,edx
c001329c:	53                   	push   ebx
c001329d:	b8 01 00 00 00       	mov    eax,0x1
c00132a2:	51                   	push   ecx
c00132a3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00132a7:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c00132ab:	0f 84 8c 00 00 00    	je     c001333d <SysLoadDLL(regs*)+0xa4>
c00132b1:	83 ec 0c             	sub    esp,0xc
c00132b4:	68 14 01 00 00       	push   0x114
c00132b9:	e8 12 b6 ff ff       	call   c000e8d0 <malloc>
c00132be:	83 c4 0c             	add    esp,0xc
c00132c1:	89 c3                	mov    ebx,eax
c00132c3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00132c8:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00132cb:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00132ce:	53                   	push   ebx
c00132cf:	e8 38 4e ff ff       	call   c000810c <File::File(char const*, Process*)>
c00132d4:	83 c4 10             	add    esp,0x10
c00132d7:	31 d2                	xor    edx,edx
c00132d9:	85 db                	test   ebx,ebx
c00132db:	b8 02 00 00 00       	mov    eax,0x2
c00132e0:	74 5b                	je     c001333d <SysLoadDLL(regs*)+0xa4>
c00132e2:	83 ec 0c             	sub    esp,0xc
c00132e5:	53                   	push   ebx
c00132e6:	e8 03 51 ff ff       	call   c00083ee <File::exists()>
c00132eb:	83 c4 10             	add    esp,0x10
c00132ee:	84 c0                	test   al,al
c00132f0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00132f2:	75 11                	jne    c0013305 <SysLoadDLL(regs*)+0x6c>
c00132f4:	83 ec 0c             	sub    esp,0xc
c00132f7:	53                   	push   ebx
c00132f8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00132fb:	83 c4 10             	add    esp,0x10
c00132fe:	b8 03 00 00 00       	mov    eax,0x3
c0013303:	eb 36                	jmp    c001333b <SysLoadDLL(regs*)+0xa2>
c0013305:	83 ec 0c             	sub    esp,0xc
c0013308:	53                   	push   ebx
c0013309:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001330c:	58                   	pop    eax
c001330d:	5a                   	pop    edx
c001330e:	6a 00                	push   0x0
c0013310:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0013313:	e8 ef 15 00 00       	call   c0014907 <Thr::loadDLL(char const*, bool)>
c0013318:	83 c4 10             	add    esp,0x10
c001331b:	31 d2                	xor    edx,edx
c001331d:	89 c1                	mov    ecx,eax
c001331f:	b8 04 00 00 00       	mov    eax,0x4
c0013324:	85 c9                	test   ecx,ecx
c0013326:	74 15                	je     c001333d <SysLoadDLL(regs*)+0xa4>
c0013328:	53                   	push   ebx
c0013329:	53                   	push   ebx
c001332a:	ff 35 70 9d 02 c0    	push   DWORD PTR ds:0xc0029d70
c0013330:	51                   	push   ecx
c0013331:	e8 32 18 00 00       	call   c0014b68 <Thr::executeDLL(unsigned long, void*)>
c0013336:	83 c4 10             	add    esp,0x10
c0013339:	31 c0                	xor    eax,eax
c001333b:	31 d2                	xor    edx,edx
c001333d:	59                   	pop    ecx
c001333e:	5b                   	pop    ebx
c001333f:	5e                   	pop    esi
c0013340:	c3                   	ret    

c0013341 <SysRead(regs*)>:
c0013341:	57                   	push   edi
c0013342:	56                   	push   esi
c0013343:	53                   	push   ebx
c0013344:	83 ec 10             	sub    esp,0x10
c0013347:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001334b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001334e:	83 f8 02             	cmp    eax,0x2
c0013351:	77 10                	ja     c0013363 <SysRead(regs*)+0x22>
c0013353:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013358:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001335b:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0013361:	eb 0e                	jmp    c0013371 <SysRead(regs*)+0x30>
c0013363:	83 ec 0c             	sub    esp,0xc
c0013366:	50                   	push   eax
c0013367:	e8 c5 ea ff ff       	call   c0011e31 <KeGetFileFromDescriptor(int)>
c001336c:	83 c4 10             	add    esp,0x10
c001336f:	89 c1                	mov    ecx,eax
c0013371:	83 c8 ff             	or     eax,0xffffffff
c0013374:	85 c9                	test   ecx,ecx
c0013376:	89 c2                	mov    edx,eax
c0013378:	74 28                	je     c00133a2 <SysRead(regs*)+0x61>
c001337a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0013382:	83 ec 0c             	sub    esp,0xc
c0013385:	31 ff                	xor    edi,edi
c0013387:	8d 54 24 18          	lea    edx,[esp+0x18]
c001338b:	8b 01                	mov    eax,DWORD PTR [ecx]
c001338d:	52                   	push   edx
c001338e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013391:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0013394:	57                   	push   edi
c0013395:	56                   	push   esi
c0013396:	51                   	push   ecx
c0013397:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001339a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001339e:	83 c4 20             	add    esp,0x20
c00133a1:	99                   	cdq    
c00133a2:	83 c4 10             	add    esp,0x10
c00133a5:	5b                   	pop    ebx
c00133a6:	5e                   	pop    esi
c00133a7:	5f                   	pop    edi
c00133a8:	c3                   	ret    

c00133a9 <SysRegisterSignal(regs*)>:
c00133a9:	83 ec 18             	sub    esp,0x18
c00133ac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00133b0:	6a 00                	push   0x0
c00133b2:	6a 00                	push   0x0
c00133b4:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00133b7:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00133ba:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00133bf:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00133c2:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c00133c8:	e8 4d c9 ff ff       	call   c000fd1a <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c00133cd:	83 c4 2c             	add    esp,0x2c
c00133d0:	99                   	cdq    
c00133d1:	c3                   	ret    

c00133d2 <SysRegistryGetTypeFromPath(regs*)>:
c00133d2:	53                   	push   ebx
c00133d3:	81 ec 40 01 00 00    	sub    esp,0x140
c00133d9:	8b 9c 24 48 01 00 00 	mov    ebx,DWORD PTR [esp+0x148]
c00133e0:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00133e3:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00133e6:	e8 cc 9e ff ff       	call   c000d2b7 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c00133eb:	83 c4 10             	add    esp,0x10
c00133ee:	85 c0                	test   eax,eax
c00133f0:	89 c1                	mov    ecx,eax
c00133f2:	74 15                	je     c0013409 <SysRegistryGetTypeFromPath(regs*)+0x37>
c00133f4:	50                   	push   eax
c00133f5:	8d 44 24 08          	lea    eax,[esp+0x8]
c00133f9:	50                   	push   eax
c00133fa:	51                   	push   ecx
c00133fb:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00133fe:	e8 99 9a ff ff       	call   c000ce9c <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0013403:	83 c4 10             	add    esp,0x10
c0013406:	99                   	cdq    
c0013407:	eb 05                	jmp    c001340e <SysRegistryGetTypeFromPath(regs*)+0x3c>
c0013409:	83 c8 ff             	or     eax,0xffffffff
c001340c:	89 c2                	mov    edx,eax
c001340e:	81 c4 38 01 00 00    	add    esp,0x138
c0013414:	5b                   	pop    ebx
c0013415:	c3                   	ret    

c0013416 <SysRegistryReadExtent(regs*)>:
c0013416:	83 ec 1c             	sub    esp,0x1c
c0013419:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001341d:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0013420:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c0013423:	85 c0                	test   eax,eax
c0013425:	79 1f                	jns    c0013446 <SysRegistryReadExtent(regs*)+0x30>
c0013427:	52                   	push   edx
c0013428:	25 ff ff ff 7f       	and    eax,0x7fffffff
c001342d:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0013431:	52                   	push   edx
c0013432:	50                   	push   eax
c0013433:	51                   	push   ecx
c0013434:	e8 55 99 ff ff       	call   c000cd8e <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c0013439:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001343d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013441:	83 c4 10             	add    esp,0x10
c0013444:	eb 14                	jmp    c001345a <SysRegistryReadExtent(regs*)+0x44>
c0013446:	83 ec 04             	sub    esp,0x4
c0013449:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001344c:	50                   	push   eax
c001344d:	51                   	push   ecx
c001344e:	e8 d9 93 ff ff       	call   c000c82c <CmGetString(Reghive_Tag*, int, char*)>
c0013453:	83 c4 10             	add    esp,0x10
c0013456:	31 c0                	xor    eax,eax
c0013458:	31 d2                	xor    edx,edx
c001345a:	83 c4 1c             	add    esp,0x1c
c001345d:	c3                   	ret    

c001345e <SysRegistryPathToExtentLookup(regs*)>:
c001345e:	83 ec 14             	sub    esp,0x14
c0013461:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013465:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0013468:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001346b:	e8 47 9e ff ff       	call   c000d2b7 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0013470:	83 c4 1c             	add    esp,0x1c
c0013473:	99                   	cdq    
c0013474:	c3                   	ret    

c0013475 <SysRegistryEnterDirectory(regs*)>:
c0013475:	83 ec 14             	sub    esp,0x14
c0013478:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001347c:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001347f:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013482:	e8 1c 94 ff ff       	call   c000c8a3 <CmEnterDirectory(Reghive_Tag*, int)>
c0013487:	83 c4 1c             	add    esp,0x1c
c001348a:	99                   	cdq    
c001348b:	c3                   	ret    

c001348c <SysRegistryGetNext(regs*)>:
c001348c:	83 ec 14             	sub    esp,0x14
c001348f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013493:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0013496:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013499:	e8 44 94 ff ff       	call   c000c8e2 <CmGetNext(Reghive_Tag*, int)>
c001349e:	83 c4 1c             	add    esp,0x1c
c00134a1:	99                   	cdq    
c00134a2:	c3                   	ret    

c00134a3 <SysRegistryGetNameAndTypeFromExtent(regs*)>:
c00134a3:	57                   	push   edi
c00134a4:	56                   	push   esi
c00134a5:	53                   	push   ebx
c00134a6:	81 ec 34 01 00 00    	sub    esp,0x134
c00134ac:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c00134b3:	8d 7c 24 08          	lea    edi,[esp+0x8]
c00134b7:	57                   	push   edi
c00134b8:	ff 76 28             	push   DWORD PTR [esi+0x28]
c00134bb:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00134be:	e8 d9 99 ff ff       	call   c000ce9c <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c00134c3:	89 c3                	mov    ebx,eax
c00134c5:	58                   	pop    eax
c00134c6:	5a                   	pop    edx
c00134c7:	57                   	push   edi
c00134c8:	ff 76 24             	push   DWORD PTR [esi+0x24]
c00134cb:	e8 80 d1 fe ff       	call   c0000650 <strcpy>
c00134d0:	81 c4 40 01 00 00    	add    esp,0x140
c00134d6:	89 d8                	mov    eax,ebx
c00134d8:	5b                   	pop    ebx
c00134d9:	99                   	cdq    
c00134da:	5e                   	pop    esi
c00134db:	5f                   	pop    edi
c00134dc:	c3                   	ret    

c00134dd <SysRegistryOpen(regs*)>:
c00134dd:	83 ec 18             	sub    esp,0x18
c00134e0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00134e4:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00134e7:	e8 d0 91 ff ff       	call   c000c6bc <CmOpen(char const*)>
c00134ec:	83 c4 1c             	add    esp,0x1c
c00134ef:	99                   	cdq    
c00134f0:	c3                   	ret    

c00134f1 <SysRegistryClose(regs*)>:
c00134f1:	83 ec 18             	sub    esp,0x18
c00134f4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00134f8:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00134fb:	e8 da 92 ff ff       	call   c000c7da <CmClose(Reghive_Tag*)>
c0013500:	31 c0                	xor    eax,eax
c0013502:	31 d2                	xor    edx,edx
c0013504:	83 c4 1c             	add    esp,0x1c
c0013507:	c3                   	ret    

c0013508 <SysRegistryEasyReadString(regs*)>:
c0013508:	57                   	push   edi
c0013509:	56                   	push   esi
c001350a:	53                   	push   ebx
c001350b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001350f:	83 ec 0c             	sub    esp,0xc
c0013512:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0013515:	e8 a2 91 ff ff       	call   c000c6bc <CmOpen(char const*)>
c001351a:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c001351d:	5a                   	pop    edx
c001351e:	59                   	pop    ecx
c001351f:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0013522:	89 c3                	mov    ebx,eax
c0013524:	50                   	push   eax
c0013525:	e8 8d 9d ff ff       	call   c000d2b7 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c001352a:	83 c4 10             	add    esp,0x10
c001352d:	89 c1                	mov    ecx,eax
c001352f:	b8 01 00 00 00       	mov    eax,0x1
c0013534:	85 c9                	test   ecx,ecx
c0013536:	7e 16                	jle    c001354e <SysRegistryEasyReadString(regs*)+0x46>
c0013538:	50                   	push   eax
c0013539:	57                   	push   edi
c001353a:	51                   	push   ecx
c001353b:	53                   	push   ebx
c001353c:	e8 eb 92 ff ff       	call   c000c82c <CmGetString(Reghive_Tag*, int, char*)>
c0013541:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013544:	e8 91 92 ff ff       	call   c000c7da <CmClose(Reghive_Tag*)>
c0013549:	83 c4 10             	add    esp,0x10
c001354c:	31 c0                	xor    eax,eax
c001354e:	5b                   	pop    ebx
c001354f:	31 d2                	xor    edx,edx
c0013551:	5e                   	pop    esi
c0013552:	5f                   	pop    edi
c0013553:	c3                   	ret    

c0013554 <SysRegistryEasyReadInteger(regs*)>:
c0013554:	56                   	push   esi
c0013555:	53                   	push   ebx
c0013556:	83 ec 10             	sub    esp,0x10
c0013559:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001355d:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0013560:	e8 57 91 ff ff       	call   c000c6bc <CmOpen(char const*)>
c0013565:	5a                   	pop    edx
c0013566:	59                   	pop    ecx
c0013567:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001356a:	89 c3                	mov    ebx,eax
c001356c:	50                   	push   eax
c001356d:	e8 45 9d ff ff       	call   c000d2b7 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0013572:	83 c4 10             	add    esp,0x10
c0013575:	89 c1                	mov    ecx,eax
c0013577:	b8 01 00 00 00       	mov    eax,0x1
c001357c:	85 c9                	test   ecx,ecx
c001357e:	7e 18                	jle    c0013598 <SysRegistryEasyReadInteger(regs*)+0x44>
c0013580:	50                   	push   eax
c0013581:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0013584:	51                   	push   ecx
c0013585:	53                   	push   ebx
c0013586:	e8 03 98 ff ff       	call   c000cd8e <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c001358b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001358e:	e8 47 92 ff ff       	call   c000c7da <CmClose(Reghive_Tag*)>
c0013593:	83 c4 10             	add    esp,0x10
c0013596:	31 c0                	xor    eax,eax
c0013598:	59                   	pop    ecx
c0013599:	31 d2                	xor    edx,edx
c001359b:	5b                   	pop    ebx
c001359c:	5e                   	pop    esi
c001359d:	c3                   	ret    

c001359e <SysSbrk(regs*)>:
c001359e:	56                   	push   esi
c001359f:	53                   	push   ebx
c00135a0:	50                   	push   eax
c00135a1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00135a6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00135aa:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00135ad:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c00135b0:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c00135b6:	85 db                	test   ebx,ebx
c00135b8:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c00135bb:	74 02                	je     c00135bf <SysSbrk(regs*)+0x21>
c00135bd:	79 06                	jns    c00135c5 <SysSbrk(regs*)+0x27>
c00135bf:	89 f0                	mov    eax,esi
c00135c1:	31 d2                	xor    edx,edx
c00135c3:	eb 2a                	jmp    c00135ef <SysSbrk(regs*)+0x51>
c00135c5:	83 c8 ff             	or     eax,0xffffffff
c00135c8:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c00135ce:	89 c2                	mov    edx,eax
c00135d0:	77 1d                	ja     c00135ef <SysSbrk(regs*)+0x51>
c00135d2:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c00135d8:	50                   	push   eax
c00135d9:	68 07 0c 00 00       	push   0xc07
c00135de:	c1 ea 0c             	shr    edx,0xc
c00135e1:	52                   	push   edx
c00135e2:	51                   	push   ecx
c00135e3:	e8 8a f1 ff ff       	call   c0012772 <VAS::allocatePages(int, int)>
c00135e8:	89 f0                	mov    eax,esi
c00135ea:	31 d2                	xor    edx,edx
c00135ec:	83 c4 10             	add    esp,0x10
c00135ef:	59                   	pop    ecx
c00135f0:	5b                   	pop    ebx
c00135f1:	5e                   	pop    esi
c00135f2:	c3                   	ret    

c00135f3 <SysSetCwd(regs*)>:
c00135f3:	83 ec 14             	sub    esp,0x14
c00135f6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00135fa:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00135fd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013602:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013605:	e8 83 4e ff ff       	call   c000848d <Fs::setcwd(Process*, char*)>
c001360a:	83 c4 1c             	add    esp,0x1c
c001360d:	99                   	cdq    
c001360e:	c3                   	ret    

c001360f <SysSetTime(regs*)>:
c001360f:	55                   	push   ebp
c0013610:	31 c9                	xor    ecx,ecx
c0013612:	57                   	push   edi
c0013613:	bd 0c 00 00 00       	mov    ebp,0xc
c0013618:	56                   	push   esi
c0013619:	53                   	push   ebx
c001361a:	31 db                	xor    ebx,ebx
c001361c:	83 ec 10             	sub    esp,0x10
c001361f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0013623:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0013626:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c0013629:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c001362c:	89 c2                	mov    edx,eax
c001362e:	c1 e8 05             	shr    eax,0x5
c0013631:	83 e2 1f             	and    edx,0x1f
c0013634:	42                   	inc    edx
c0013635:	81 ef 6c 07 00 00    	sub    edi,0x76c
c001363b:	c1 e7 10             	shl    edi,0x10
c001363e:	88 d1                	mov    cl,dl
c0013640:	31 d2                	xor    edx,edx
c0013642:	f7 f5                	div    ebp
c0013644:	89 dd                	mov    ebp,ebx
c0013646:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c001364c:	88 d5                	mov    ch,dl
c001364e:	31 d2                	xor    edx,edx
c0013650:	0f b7 c1             	movzx  eax,cx
c0013653:	09 f8                	or     eax,edi
c0013655:	bf 3c 00 00 00       	mov    edi,0x3c
c001365a:	89 c1                	mov    ecx,eax
c001365c:	89 f0                	mov    eax,esi
c001365e:	f7 f7                	div    edi
c0013660:	c1 e2 10             	shl    edx,0x10
c0013663:	09 d5                	or     ebp,edx
c0013665:	31 d2                	xor    edx,edx
c0013667:	f7 f7                	div    edi
c0013669:	89 eb                	mov    ebx,ebp
c001366b:	bf 10 0e 00 00       	mov    edi,0xe10
c0013670:	89 f0                	mov    eax,esi
c0013672:	88 d7                	mov    bh,dl
c0013674:	31 d2                	xor    edx,edx
c0013676:	f7 f7                	div    edi
c0013678:	bf 18 00 00 00       	mov    edi,0x18
c001367d:	31 d2                	xor    edx,edx
c001367f:	f7 f7                	div    edi
c0013681:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c0013686:	88 d3                	mov    bl,dl
c0013688:	53                   	push   ebx
c0013689:	51                   	push   ecx
c001368a:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0013690:	e8 c1 56 ff ff       	call   c0008d56 <Clock::setTimeInDatetimeLocal(datetime_t)>
c0013695:	83 c4 1c             	add    esp,0x1c
c0013698:	31 d2                	xor    edx,edx
c001369a:	5b                   	pop    ebx
c001369b:	5e                   	pop    esi
c001369c:	83 f0 01             	xor    eax,0x1
c001369f:	5f                   	pop    edi
c00136a0:	0f b6 c0             	movzx  eax,al
c00136a3:	5d                   	pop    ebp
c00136a4:	c3                   	ret    

c00136a5 <SysSymlink(regs*)>:
c00136a5:	56                   	push   esi
c00136a6:	83 c8 ff             	or     eax,0xffffffff
c00136a9:	53                   	push   ebx
c00136aa:	89 c2                	mov    edx,eax
c00136ac:	81 ec 34 02 00 00    	sub    esp,0x234
c00136b2:	8b 9c 24 40 02 00 00 	mov    ebx,DWORD PTR [esp+0x240]
c00136b9:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c00136bd:	74 50                	je     c001370f <SysSymlink(regs*)+0x6a>
c00136bf:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c00136c2:	85 c9                	test   ecx,ecx
c00136c4:	74 49                	je     c001370f <SysSymlink(regs*)+0x6a>
c00136c6:	6a 01                	push   0x1
c00136c8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00136cd:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00136d0:	05 0c 01 00 00       	add    eax,0x10c
c00136d5:	50                   	push   eax
c00136d6:	51                   	push   ecx
c00136d7:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00136db:	56                   	push   esi
c00136dc:	e8 1f 47 ff ff       	call   c0007e00 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00136e1:	6a 01                	push   0x1
c00136e3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00136e8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00136eb:	05 0c 01 00 00       	add    eax,0x10c
c00136f0:	50                   	push   eax
c00136f1:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00136f4:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c00136fb:	53                   	push   ebx
c00136fc:	e8 ff 46 ff ff       	call   c0007e00 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0013701:	83 c4 18             	add    esp,0x18
c0013704:	56                   	push   esi
c0013705:	53                   	push   ebx
c0013706:	e8 23 43 ff ff       	call   c0007a2e <KeCreateSymlink(char const*, char const*)>
c001370b:	83 c4 10             	add    esp,0x10
c001370e:	99                   	cdq    
c001370f:	81 c4 34 02 00 00    	add    esp,0x234
c0013715:	5b                   	pop    ebx
c0013716:	5e                   	pop    esi
c0013717:	c3                   	ret    

c0013718 <SysTimezone(regs*)>:
c0013718:	83 ec 0c             	sub    esp,0xc
c001371b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001371f:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c0013723:	75 17                	jne    c001373c <SysTimezone(regs*)+0x24>
c0013725:	83 ec 0c             	sub    esp,0xc
c0013728:	68 a9 27 02 c0       	push   0xc00227a9
c001372d:	e8 1c 38 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0013732:	83 c8 ff             	or     eax,0xffffffff
c0013735:	83 c4 10             	add    esp,0x10
c0013738:	89 c2                	mov    edx,eax
c001373a:	eb 17                	jmp    c0013753 <SysTimezone(regs*)+0x3b>
c001373c:	83 ec 0c             	sub    esp,0xc
c001373f:	68 be 27 02 c0       	push   0xc00227be
c0013744:	e8 05 38 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0013749:	83 c4 10             	add    esp,0x10
c001374c:	b8 01 00 00 00       	mov    eax,0x1
c0013751:	31 d2                	xor    edx,edx
c0013753:	83 c4 0c             	add    esp,0xc
c0013756:	c3                   	ret    

c0013757 <SysTruncate(regs*)>:
c0013757:	55                   	push   ebp
c0013758:	57                   	push   edi
c0013759:	31 ff                	xor    edi,edi
c001375b:	56                   	push   esi
c001375c:	53                   	push   ebx
c001375d:	83 ec 0c             	sub    esp,0xc
c0013760:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013764:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0013767:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c001376b:	8b 68 24             	mov    ebp,DWORD PTR [eax+0x24]
c001376e:	89 ce                	mov    esi,ecx
c0013770:	0f 84 9a 00 00 00    	je     c0013810 <SysTruncate(regs*)+0xb9>
c0013776:	83 ec 0c             	sub    esp,0xc
c0013779:	68 14 01 00 00       	push   0x114
c001377e:	e8 4d b1 ff ff       	call   c000e8d0 <malloc>
c0013783:	83 c4 0c             	add    esp,0xc
c0013786:	89 c3                	mov    ebx,eax
c0013788:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001378d:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013790:	55                   	push   ebp
c0013791:	53                   	push   ebx
c0013792:	e8 75 49 ff ff       	call   c000810c <File::File(char const*, Process*)>
c0013797:	83 c4 10             	add    esp,0x10
c001379a:	31 d2                	xor    edx,edx
c001379c:	85 db                	test   ebx,ebx
c001379e:	b8 03 00 00 00       	mov    eax,0x3
c00137a3:	0f 84 a2 00 00 00    	je     c001384b <SysTruncate(regs*)+0xf4>
c00137a9:	51                   	push   ecx
c00137aa:	51                   	push   ecx
c00137ab:	6a 02                	push   0x2
c00137ad:	53                   	push   ebx
c00137ae:	e8 77 49 ff ff       	call   c000812a <File::open(FileOpenMode)>
c00137b3:	83 c4 10             	add    esp,0x10
c00137b6:	85 c0                	test   eax,eax
c00137b8:	74 13                	je     c00137cd <SysTruncate(regs*)+0x76>
c00137ba:	8b 03                	mov    eax,DWORD PTR [ebx]
c00137bc:	83 ec 0c             	sub    esp,0xc
c00137bf:	53                   	push   ebx
c00137c0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00137c3:	83 c4 10             	add    esp,0x10
c00137c6:	b8 04 00 00 00       	mov    eax,0x4
c00137cb:	eb 7c                	jmp    c0013849 <SysTruncate(regs*)+0xf2>
c00137cd:	52                   	push   edx
c00137ce:	57                   	push   edi
c00137cf:	56                   	push   esi
c00137d0:	53                   	push   ebx
c00137d1:	e8 68 4a ff ff       	call   c000823e <File::truncate(unsigned long long)>
c00137d6:	83 c4 10             	add    esp,0x10
c00137d9:	85 c0                	test   eax,eax
c00137db:	74 1b                	je     c00137f8 <SysTruncate(regs*)+0xa1>
c00137dd:	83 ec 0c             	sub    esp,0xc
c00137e0:	53                   	push   ebx
c00137e1:	e8 a2 49 ff ff       	call   c0008188 <File::close()>
c00137e6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00137e8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00137eb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00137ee:	83 c4 10             	add    esp,0x10
c00137f1:	b8 05 00 00 00       	mov    eax,0x5
c00137f6:	eb 51                	jmp    c0013849 <SysTruncate(regs*)+0xf2>
c00137f8:	83 ec 0c             	sub    esp,0xc
c00137fb:	53                   	push   ebx
c00137fc:	e8 87 49 ff ff       	call   c0008188 <File::close()>
c0013801:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013803:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013806:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013809:	83 c4 10             	add    esp,0x10
c001380c:	31 c0                	xor    eax,eax
c001380e:	eb 39                	jmp    c0013849 <SysTruncate(regs*)+0xf2>
c0013810:	31 d2                	xor    edx,edx
c0013812:	83 fd 02             	cmp    ebp,0x2
c0013815:	b8 01 00 00 00       	mov    eax,0x1
c001381a:	7e 2f                	jle    c001384b <SysTruncate(regs*)+0xf4>
c001381c:	83 ec 0c             	sub    esp,0xc
c001381f:	51                   	push   ecx
c0013820:	e8 0c e6 ff ff       	call   c0011e31 <KeGetFileFromDescriptor(int)>
c0013825:	83 c4 10             	add    esp,0x10
c0013828:	31 d2                	xor    edx,edx
c001382a:	89 c1                	mov    ecx,eax
c001382c:	b8 02 00 00 00       	mov    eax,0x2
c0013831:	85 c9                	test   ecx,ecx
c0013833:	74 16                	je     c001384b <SysTruncate(regs*)+0xf4>
c0013835:	50                   	push   eax
c0013836:	57                   	push   edi
c0013837:	56                   	push   esi
c0013838:	51                   	push   ecx
c0013839:	e8 00 4a ff ff       	call   c000823e <File::truncate(unsigned long long)>
c001383e:	83 c4 10             	add    esp,0x10
c0013841:	85 c0                	test   eax,eax
c0013843:	0f 95 c0             	setne  al
c0013846:	0f b6 c0             	movzx  eax,al
c0013849:	31 d2                	xor    edx,edx
c001384b:	83 c4 0c             	add    esp,0xc
c001384e:	5b                   	pop    ebx
c001384f:	5e                   	pop    esi
c0013850:	5f                   	pop    edi
c0013851:	5d                   	pop    ebp
c0013852:	c3                   	ret    

c0013853 <SysWrite(regs*)>:
c0013853:	57                   	push   edi
c0013854:	56                   	push   esi
c0013855:	53                   	push   ebx
c0013856:	83 ec 10             	sub    esp,0x10
c0013859:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001385d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013860:	83 f8 02             	cmp    eax,0x2
c0013863:	77 10                	ja     c0013875 <SysWrite(regs*)+0x22>
c0013865:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001386a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001386d:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0013873:	eb 0e                	jmp    c0013883 <SysWrite(regs*)+0x30>
c0013875:	83 ec 0c             	sub    esp,0xc
c0013878:	50                   	push   eax
c0013879:	e8 b3 e5 ff ff       	call   c0011e31 <KeGetFileFromDescriptor(int)>
c001387e:	83 c4 10             	add    esp,0x10
c0013881:	89 c1                	mov    ecx,eax
c0013883:	83 c8 ff             	or     eax,0xffffffff
c0013886:	85 c9                	test   ecx,ecx
c0013888:	89 c2                	mov    edx,eax
c001388a:	74 28                	je     c00138b4 <SysWrite(regs*)+0x61>
c001388c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0013894:	83 ec 0c             	sub    esp,0xc
c0013897:	31 ff                	xor    edi,edi
c0013899:	8d 54 24 18          	lea    edx,[esp+0x18]
c001389d:	8b 01                	mov    eax,DWORD PTR [ecx]
c001389f:	52                   	push   edx
c00138a0:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00138a3:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c00138a6:	57                   	push   edi
c00138a7:	56                   	push   esi
c00138a8:	51                   	push   ecx
c00138a9:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00138ac:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00138b0:	83 c4 20             	add    esp,0x20
c00138b3:	99                   	cdq    
c00138b4:	83 c4 10             	add    esp,0x10
c00138b7:	5b                   	pop    ebx
c00138b8:	5e                   	pop    esi
c00138b9:	5f                   	pop    edi
c00138ba:	c3                   	ret    

c00138bb <SysWsbe(regs*)>:
c00138bb:	55                   	push   ebp
c00138bc:	57                   	push   edi
c00138bd:	56                   	push   esi
c00138be:	53                   	push   ebx
c00138bf:	83 ec 3c             	sub    esp,0x3c
c00138c2:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c00138c6:	81 7b 20 96 78 34 a5 	cmp    DWORD PTR [ebx+0x20],0xa5347896
c00138cd:	75 2d                	jne    c00138fc <SysWsbe(regs*)+0x41>
c00138cf:	81 7b 28 f7 7f 77 4f 	cmp    DWORD PTR [ebx+0x28],0x4f777ff7
c00138d6:	75 24                	jne    c00138fc <SysWsbe(regs*)+0x41>
c00138d8:	81 7b 24 55 55 23 11 	cmp    DWORD PTR [ebx+0x24],0x11235555
c00138df:	75 1b                	jne    c00138fc <SysWsbe(regs*)+0x41>
c00138e1:	6a 01                	push   0x1
c00138e3:	6a 00                	push   0x0
c00138e5:	68 6e 95 00 c0       	push   0xc000956e
c00138ea:	ff 35 d8 c6 02 c0    	push   DWORD PTR ds:0xc002c6d8
c00138f0:	e8 af 18 00 00       	call   c00151a4 <Process::createThread(void (*)(void*), void*, int)>
c00138f5:	83 c4 10             	add    esp,0x10
c00138f8:	31 c0                	xor    eax,eax
c00138fa:	eb 52                	jmp    c001394e <SysWsbe(regs*)+0x93>
c00138fc:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0013900:	be fd 27 02 c0       	mov    esi,0xc00227fd
c0013905:	b9 0b 00 00 00       	mov    ecx,0xb
c001390a:	fc                   	cld    
c001390b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001390d:	83 ec 0c             	sub    esp,0xc
c0013910:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0013914:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013919:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001391c:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c0013922:	8b 06                	mov    eax,DWORD PTR [esi]
c0013924:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0013927:	57                   	push   edi
c0013928:	e8 53 cc fe ff       	call   c0000580 <strlen>
c001392d:	5a                   	pop    edx
c001392e:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0013932:	52                   	push   edx
c0013933:	31 d2                	xor    edx,edx
c0013935:	57                   	push   edi
c0013936:	52                   	push   edx
c0013937:	50                   	push   eax
c0013938:	56                   	push   esi
c0013939:	ff d5                	call   ebp
c001393b:	83 c4 14             	add    esp,0x14
c001393e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013941:	e8 1e 22 00 00       	call   c0015b64 <terminateTask(int)>
c0013946:	83 c4 10             	add    esp,0x10
c0013949:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001394e:	83 c4 3c             	add    esp,0x3c
c0013951:	31 d2                	xor    edx,edx
c0013953:	5b                   	pop    ebx
c0013954:	5e                   	pop    esi
c0013955:	5f                   	pop    edi
c0013956:	5d                   	pop    ebp
c0013957:	c3                   	ret    

c0013958 <SysYield(regs*)>:
c0013958:	83 ec 0c             	sub    esp,0xc
c001395b:	fa                   	cli    
c001395c:	ff 05 b0 c6 02 c0    	inc    DWORD PTR ds:0xc002c6b0
c0013962:	e8 89 1a 00 00       	call   c00153f0 <schedule()>
c0013967:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c001396c:	48                   	dec    eax
c001396d:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c0013972:	75 01                	jne    c0013975 <SysYield(regs*)+0x1d>
c0013974:	fb                   	sti    
c0013975:	31 c0                	xor    eax,eax
c0013977:	31 d2                	xor    edx,edx
c0013979:	83 c4 0c             	add    esp,0xc
c001397c:	c3                   	ret    

c001397d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001397d:	55                   	push   ebp
c001397e:	57                   	push   edi
c001397f:	56                   	push   esi
c0013980:	53                   	push   ebx
c0013981:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0013987:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c0013992:	74 3b                	je     c00139cf <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c0013994:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c001399c:	74 31                	je     c00139cf <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c001399e:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c00139a6:	75 27                	jne    c00139cf <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c00139a8:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c00139af:	05 00 10 00 00       	add    eax,0x1000
c00139b4:	89 c2                	mov    edx,eax
c00139b6:	25 00 f0 ff ff       	and    eax,0xfffff000
c00139bb:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c00139c2:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c00139c8:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c00139cf:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c00139d6:	83 ec 0c             	sub    esp,0xc
c00139d9:	6a 01                	push   0x1
c00139db:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c00139e1:	e8 a5 e5 ff ff       	call   c0011f8b <Virt::allocateKernelVirtualPages(int)>
c00139e6:	83 c4 10             	add    esp,0x10
c00139e9:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c00139ef:	89 c3                	mov    ebx,eax
c00139f1:	0f 86 26 01 00 00    	jbe    c0013b1d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a0>
c00139f7:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00139ff:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0013a06:	c1 ee 0c             	shr    esi,0xc
c0013a09:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0013a0d:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c0013a14:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c0013a1b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013a1f:	29 ef                	sub    edi,ebp
c0013a21:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c0013a25:	0f 83 f9 00 00 00    	jae    c0013b24 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a7>
c0013a2b:	81 ff 00 10 00 00    	cmp    edi,0x1000
c0013a31:	b8 00 10 00 00       	mov    eax,0x1000
c0013a36:	0f 47 f8             	cmova  edi,eax
c0013a39:	83 ec 0c             	sub    esp,0xc
c0013a3c:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0013a43:	31 d2                	xor    edx,edx
c0013a45:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013a47:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013a4b:	50                   	push   eax
c0013a4c:	8d 74 24 30          	lea    esi,[esp+0x30]
c0013a50:	56                   	push   esi
c0013a51:	52                   	push   edx
c0013a52:	57                   	push   edi
c0013a53:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c0013a5a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013a5d:	83 c4 20             	add    esp,0x20
c0013a60:	85 c0                	test   eax,eax
c0013a62:	75 06                	jne    c0013a6a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xed>
c0013a64:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0013a68:	74 13                	je     c0013a7d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x100>
c0013a6a:	83 ec 0c             	sub    esp,0xc
c0013a6d:	53                   	push   ebx
c0013a6e:	e8 16 e8 ff ff       	call   c0012289 <Virt::freeKernelVirtualPages(unsigned long)>
c0013a73:	83 c4 10             	add    esp,0x10
c0013a76:	31 c0                	xor    eax,eax
c0013a78:	e9 7c 01 00 00       	jmp    c0013bf9 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x27c>
c0013a7d:	fa                   	cli    
c0013a7e:	ff 05 b0 c6 02 c0    	inc    DWORD PTR ds:0xc002c6b0
c0013a84:	e8 97 b3 ff ff       	call   c000ee20 <Phys::allocatePage()>
c0013a89:	6a 07                	push   0x7
c0013a8b:	53                   	push   ebx
c0013a8c:	50                   	push   eax
c0013a8d:	89 c7                	mov    edi,eax
c0013a8f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013a94:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013a97:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013a9d:	e8 c8 eb ff ff       	call   c001266a <VAS::mapPage(unsigned long, unsigned long, int)>
c0013aa2:	83 c4 0c             	add    esp,0xc
c0013aa5:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0013aac:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013ab2:	6a 00                	push   0x0
c0013ab4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013ab9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013abc:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013ac2:	e8 09 ea ff ff       	call   c00124d0 <VAS::mapOtherVASIn(bool, VAS*)>
c0013ac7:	58                   	pop    eax
c0013ac8:	5a                   	pop    edx
c0013ac9:	68 07 0c 00 00       	push   0xc07
c0013ace:	55                   	push   ebp
c0013acf:	57                   	push   edi
c0013ad0:	89 df                	mov    edi,ebx
c0013ad2:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0013ad9:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013adf:	6a 00                	push   0x0
c0013ae1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013ae6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013ae9:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013aef:	e8 ca ed ff ff       	call   c00128be <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0013af4:	b9 00 10 00 00       	mov    ecx,0x1000
c0013af9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013afb:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0013b00:	83 c4 20             	add    esp,0x20
c0013b03:	48                   	dec    eax
c0013b04:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c0013b09:	85 c0                	test   eax,eax
c0013b0b:	75 01                	jne    c0013b0e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x191>
c0013b0d:	fb                   	sti    
c0013b0e:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0013b12:	81 c5 00 10 00 00    	add    ebp,0x1000
c0013b18:	e9 f0 fe ff ff       	jmp    c0013a0d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x90>
c0013b1d:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0013b24:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0013b2b:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0013b31:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0013b37:	0f 86 ae 00 00 00    	jbe    c0013beb <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x26e>
c0013b3d:	fa                   	cli    
c0013b3e:	51                   	push   ecx
c0013b3f:	31 ff                	xor    edi,edi
c0013b41:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0013b48:	c1 ee 0c             	shr    esi,0xc
c0013b4b:	ff 05 b0 c6 02 c0    	inc    DWORD PTR ds:0xc002c6b0
c0013b51:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013b57:	6a 00                	push   0x0
c0013b59:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013b5e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013b61:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013b67:	e8 64 e9 ff ff       	call   c00124d0 <VAS::mapOtherVASIn(bool, VAS*)>
c0013b6c:	83 c4 10             	add    esp,0x10
c0013b6f:	e8 ac b2 ff ff       	call   c000ee20 <Phys::allocatePage()>
c0013b74:	47                   	inc    edi
c0013b75:	6a 07                	push   0x7
c0013b77:	53                   	push   ebx
c0013b78:	50                   	push   eax
c0013b79:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013b7d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0013b83:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0013b86:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c0013b8c:	e8 d9 ea ff ff       	call   c001266a <VAS::mapPage(unsigned long, unsigned long, int)>
c0013b91:	58                   	pop    eax
c0013b92:	5a                   	pop    edx
c0013b93:	68 07 0c 00 00       	push   0xc07
c0013b98:	55                   	push   ebp
c0013b99:	81 c5 00 10 00 00    	add    ebp,0x1000
c0013b9f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013ba3:	50                   	push   eax
c0013ba4:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0013bab:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013bb1:	6a 00                	push   0x0
c0013bb3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013bb8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013bbb:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013bc1:	e8 f8 ec ff ff       	call   c00128be <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0013bc6:	83 c4 1c             	add    esp,0x1c
c0013bc9:	68 00 10 00 00       	push   0x1000
c0013bce:	6a 00                	push   0x0
c0013bd0:	53                   	push   ebx
c0013bd1:	e8 1a c9 fe ff       	call   c00004f0 <memset>
c0013bd6:	83 c4 10             	add    esp,0x10
c0013bd9:	39 fe                	cmp    esi,edi
c0013bdb:	77 92                	ja     c0013b6f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f2>
c0013bdd:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0013be2:	48                   	dec    eax
c0013be3:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c0013be8:	75 01                	jne    c0013beb <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x26e>
c0013bea:	fb                   	sti    
c0013beb:	83 ec 0c             	sub    esp,0xc
c0013bee:	53                   	push   ebx
c0013bef:	e8 95 e6 ff ff       	call   c0012289 <Virt::freeKernelVirtualPages(unsigned long)>
c0013bf4:	83 c4 10             	add    esp,0x10
c0013bf7:	b0 01                	mov    al,0x1
c0013bf9:	81 c4 2c 10 00 00    	add    esp,0x102c
c0013bff:	5b                   	pop    ebx
c0013c00:	5e                   	pop    esi
c0013c01:	5f                   	pop    edi
c0013c02:	5d                   	pop    ebp
c0013c03:	c3                   	ret    

c0013c04 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c0013c04:	55                   	push   ebp
c0013c05:	57                   	push   edi
c0013c06:	56                   	push   esi
c0013c07:	53                   	push   ebx
c0013c08:	83 ec 48             	sub    esp,0x48
c0013c0b:	68 14 01 00 00       	push   0x114
c0013c10:	e8 bb ac ff ff       	call   c000e8d0 <malloc>
c0013c15:	83 c4 0c             	add    esp,0xc
c0013c18:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0013c1c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013c20:	89 c7                	mov    edi,eax
c0013c22:	50                   	push   eax
c0013c23:	e8 e4 44 ff ff       	call   c000810c <File::File(char const*, Process*)>
c0013c28:	58                   	pop    eax
c0013c29:	5a                   	pop    edx
c0013c2a:	6a 01                	push   0x1
c0013c2c:	57                   	push   edi
c0013c2d:	e8 f8 44 ff ff       	call   c000812a <File::open(FileOpenMode)>
c0013c32:	83 c4 10             	add    esp,0x10
c0013c35:	85 c0                	test   eax,eax
c0013c37:	0f 85 4c 01 00 00    	jne    c0013d89 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0013c3d:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0013c45:	83 ec 0c             	sub    esp,0xc
c0013c48:	6a 34                	push   0x34
c0013c4a:	e8 81 ac ff ff       	call   c000e8d0 <malloc>
c0013c4f:	89 c3                	mov    ebx,eax
c0013c51:	58                   	pop    eax
c0013c52:	8b 07                	mov    eax,DWORD PTR [edi]
c0013c54:	8d 74 24 38          	lea    esi,[esp+0x38]
c0013c58:	56                   	push   esi
c0013c59:	53                   	push   ebx
c0013c5a:	6a 00                	push   0x0
c0013c5c:	6a 34                	push   0x34
c0013c5e:	57                   	push   edi
c0013c5f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013c62:	83 c4 20             	add    esp,0x20
c0013c65:	85 c0                	test   eax,eax
c0013c67:	0f 85 1c 01 00 00    	jne    c0013d89 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0013c6d:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0013c73:	0f 85 10 01 00 00    	jne    c0013d89 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0013c79:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013c7c:	85 c0                	test   eax,eax
c0013c7e:	0f 84 05 01 00 00    	je     c0013d89 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0013c84:	31 d2                	xor    edx,edx
c0013c86:	55                   	push   ebp
c0013c87:	52                   	push   edx
c0013c88:	50                   	push   eax
c0013c89:	57                   	push   edi
c0013c8a:	e8 59 45 ff ff       	call   c00081e8 <File::seek(unsigned long long)>
c0013c8f:	83 c4 10             	add    esp,0x10
c0013c92:	85 c0                	test   eax,eax
c0013c94:	0f 85 ef 00 00 00    	jne    c0013d89 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0013c9a:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0013c9d:	83 ec 0c             	sub    esp,0xc
c0013ca0:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0013ca4:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0013ca8:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0013cac:	0f af c2             	imul   eax,edx
c0013caf:	50                   	push   eax
c0013cb0:	e8 1b ac ff ff       	call   c000e8d0 <malloc>
c0013cb5:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0013cb7:	89 34 24             	mov    DWORD PTR [esp],esi
c0013cba:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0013cbe:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013cc2:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0013cc6:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0013cca:	0f af c2             	imul   eax,edx
c0013ccd:	99                   	cdq    
c0013cce:	52                   	push   edx
c0013ccf:	50                   	push   eax
c0013cd0:	57                   	push   edi
c0013cd1:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013cd4:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0013cd7:	83 c4 20             	add    esp,0x20
c0013cda:	85 c0                	test   eax,eax
c0013cdc:	0f 84 a7 00 00 00    	je     c0013d89 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0013ce2:	31 d2                	xor    edx,edx
c0013ce4:	51                   	push   ecx
c0013ce5:	52                   	push   edx
c0013ce6:	50                   	push   eax
c0013ce7:	57                   	push   edi
c0013ce8:	e8 fb 44 ff ff       	call   c00081e8 <File::seek(unsigned long long)>
c0013ced:	83 c4 10             	add    esp,0x10
c0013cf0:	85 c0                	test   eax,eax
c0013cf2:	0f 85 91 00 00 00    	jne    c0013d89 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0013cf8:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0013cfc:	83 ec 0c             	sub    esp,0xc
c0013cff:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0013d03:	0f af c2             	imul   eax,edx
c0013d06:	50                   	push   eax
c0013d07:	e8 c4 ab ff ff       	call   c000e8d0 <malloc>
c0013d0c:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0013d0e:	89 34 24             	mov    DWORD PTR [esp],esi
c0013d11:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013d15:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013d19:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0013d1d:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0013d21:	0f af c2             	imul   eax,edx
c0013d24:	99                   	cdq    
c0013d25:	52                   	push   edx
c0013d26:	50                   	push   eax
c0013d27:	57                   	push   edi
c0013d28:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013d2b:	83 c4 20             	add    esp,0x20
c0013d2e:	31 c9                	xor    ecx,ecx
c0013d30:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0013d38:	66 3b 4b 2c          	cmp    cx,WORD PTR [ebx+0x2c]
c0013d3c:	0f b7 e9             	movzx  ebp,cx
c0013d3f:	0f 83 86 00 00 00    	jae    c0013dcb <Thr::loadProgramIntoMemory(Process*, char const*)+0x1c7>
c0013d45:	c1 e5 05             	shl    ebp,0x5
c0013d48:	03 6c 24 0c          	add    ebp,DWORD PTR [esp+0xc]
c0013d4c:	83 7d 00 01          	cmp    DWORD PTR [ebp+0x0],0x1
c0013d50:	75 73                	jne    c0013dc5 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1c1>
c0013d52:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0013d56:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0013d59:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
c0013d5c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013d60:	52                   	push   edx
c0013d61:	31 d2                	xor    edx,edx
c0013d63:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0013d66:	52                   	push   edx
c0013d67:	50                   	push   eax
c0013d68:	57                   	push   edi
c0013d69:	e8 7a 44 ff ff       	call   c00081e8 <File::seek(unsigned long long)>
c0013d6e:	83 c4 10             	add    esp,0x10
c0013d71:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0013d75:	85 c0                	test   eax,eax
c0013d77:	74 17                	je     c0013d90 <Thr::loadProgramIntoMemory(Process*, char const*)+0x18c>
c0013d79:	83 ec 0c             	sub    esp,0xc
c0013d7c:	68 29 28 02 c0       	push   0xc0022829
c0013d81:	e8 c8 31 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0013d86:	83 c4 10             	add    esp,0x10
c0013d89:	31 c0                	xor    eax,eax
c0013d8b:	e9 8b 00 00 00       	jmp    c0013e1b <Thr::loadProgramIntoMemory(Process*, char const*)+0x217>
c0013d90:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0013d94:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0013d97:	83 ec 0c             	sub    esp,0xc
c0013d9a:	2b 45 10             	sub    eax,DWORD PTR [ebp+0x10]
c0013d9d:	50                   	push   eax
c0013d9e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0013da2:	56                   	push   esi
c0013da3:	57                   	push   edi
c0013da4:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0013da8:	e8 d0 fb ff ff       	call   c001397d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0013dad:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c0013db1:	83 c4 20             	add    esp,0x20
c0013db4:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0013db8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0013dbc:	0f 43 74 24 08       	cmovae esi,DWORD PTR [esp+0x8]
c0013dc1:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0013dc5:	41                   	inc    ecx
c0013dc6:	e9 6d ff ff ff       	jmp    c0013d38 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0013dcb:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c0013dcf:	83 ec 0c             	sub    esp,0xc
c0013dd2:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0013dd6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013dda:	89 8a 0e 05 00 00    	mov    DWORD PTR [edx+0x50e],ecx
c0013de0:	8b 92 12 05 00 00    	mov    edx,DWORD PTR [edx+0x512]
c0013de6:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013deb:	05 00 10 00 00       	add    eax,0x1000
c0013df0:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0013df3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013df7:	e8 e4 aa ff ff       	call   c000e8e0 <free>
c0013dfc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013dff:	e8 dc aa ff ff       	call   c000e8e0 <free>
c0013e04:	58                   	pop    eax
c0013e05:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013e09:	e8 d2 aa ff ff       	call   c000e8e0 <free>
c0013e0e:	89 3c 24             	mov    DWORD PTR [esp],edi
c0013e11:	e8 72 43 ff ff       	call   c0008188 <File::close()>
c0013e16:	83 c4 10             	add    esp,0x10
c0013e19:	b0 01                	mov    al,0x1
c0013e1b:	83 c4 3c             	add    esp,0x3c
c0013e1e:	5b                   	pop    ebx
c0013e1f:	5e                   	pop    esi
c0013e20:	5f                   	pop    edi
c0013e21:	5d                   	pop    ebp
c0013e22:	c3                   	ret    

c0013e23 <Thr::runtimeReferenceHelper()>:
c0013e23:	83 ec 18             	sub    esp,0x18
c0013e26:	68 31 28 02 c0       	push   0xc0022831
c0013e2b:	e8 1e 31 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0013e30:	fa                   	cli    
c0013e31:	83 c4 10             	add    esp,0x10
c0013e34:	eb fe                	jmp    c0013e34 <Thr::runtimeReferenceHelper()+0x11>

c0013e36 <Thr::getAddressOfKernelSymbol(char const*)>:
c0013e36:	57                   	push   edi
c0013e37:	56                   	push   esi
c0013e38:	53                   	push   ebx
c0013e39:	31 db                	xor    ebx,ebx
c0013e3b:	39 1d 80 c6 02 c0    	cmp    DWORD PTR ds:0xc002c680,ebx
c0013e41:	7e 3c                	jle    c0013e7f <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0013e43:	8b 34 9d 00 c6 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd3a00]
c0013e4a:	31 ff                	xor    edi,edi
c0013e4c:	39 3c 9d 00 c5 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd3b00],edi
c0013e53:	7e 27                	jle    c0013e7c <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0013e55:	50                   	push   eax
c0013e56:	50                   	push   eax
c0013e57:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013e5b:	8b 06                	mov    eax,DWORD PTR [esi]
c0013e5d:	03 04 9d 80 c5 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd3a80]
c0013e64:	50                   	push   eax
c0013e65:	e8 16 c9 fe ff       	call   c0000780 <strcmp>
c0013e6a:	83 c4 10             	add    esp,0x10
c0013e6d:	85 c0                	test   eax,eax
c0013e6f:	75 05                	jne    c0013e76 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0013e71:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0013e74:	eb 0b                	jmp    c0013e81 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0013e76:	83 c6 10             	add    esi,0x10
c0013e79:	47                   	inc    edi
c0013e7a:	eb d0                	jmp    c0013e4c <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0013e7c:	43                   	inc    ebx
c0013e7d:	eb bc                	jmp    c0013e3b <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0013e7f:	31 c0                	xor    eax,eax
c0013e81:	5b                   	pop    ebx
c0013e82:	5e                   	pop    esi
c0013e83:	5f                   	pop    edi
c0013e84:	c3                   	ret    

c0013e85 <Thr::loadKernelSymbolTable(char const*)>:
c0013e85:	55                   	push   ebp
c0013e86:	57                   	push   edi
c0013e87:	56                   	push   esi
c0013e88:	53                   	push   ebx
c0013e89:	83 ec 68             	sub    esp,0x68
c0013e8c:	68 14 01 00 00       	push   0x114
c0013e91:	8b 35 d8 c6 02 c0    	mov    esi,DWORD PTR ds:0xc002c6d8
c0013e97:	e8 34 aa ff ff       	call   c000e8d0 <malloc>
c0013e9c:	83 c4 0c             	add    esp,0xc
c0013e9f:	56                   	push   esi
c0013ea0:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0013ea4:	89 c3                	mov    ebx,eax
c0013ea6:	50                   	push   eax
c0013ea7:	e8 60 42 ff ff       	call   c000810c <File::File(char const*, Process*)>
c0013eac:	5e                   	pop    esi
c0013ead:	5f                   	pop    edi
c0013eae:	6a 01                	push   0x1
c0013eb0:	53                   	push   ebx
c0013eb1:	e8 74 42 ff ff       	call   c000812a <File::open(FileOpenMode)>
c0013eb6:	83 c4 10             	add    esp,0x10
c0013eb9:	85 c0                	test   eax,eax
c0013ebb:	74 0a                	je     c0013ec7 <Thr::loadKernelSymbolTable(char const*)+0x42>
c0013ebd:	83 ec 0c             	sub    esp,0xc
c0013ec0:	68 53 28 02 c0       	push   0xc0022853
c0013ec5:	eb 34                	jmp    c0013efb <Thr::loadKernelSymbolTable(char const*)+0x76>
c0013ec7:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0013ecf:	83 ec 0c             	sub    esp,0xc
c0013ed2:	6a 34                	push   0x34
c0013ed4:	e8 f7 a9 ff ff       	call   c000e8d0 <malloc>
c0013ed9:	59                   	pop    ecx
c0013eda:	8d 74 24 34          	lea    esi,[esp+0x34]
c0013ede:	89 c7                	mov    edi,eax
c0013ee0:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013ee2:	56                   	push   esi
c0013ee3:	57                   	push   edi
c0013ee4:	6a 00                	push   0x0
c0013ee6:	6a 34                	push   0x34
c0013ee8:	53                   	push   ebx
c0013ee9:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013eec:	83 c4 20             	add    esp,0x20
c0013eef:	85 c0                	test   eax,eax
c0013ef1:	74 17                	je     c0013f0a <Thr::loadKernelSymbolTable(char const*)+0x85>
c0013ef3:	83 ec 0c             	sub    esp,0xc
c0013ef6:	68 6a 28 02 c0       	push   0xc002286a
c0013efb:	e8 26 ad ff ff       	call   c000ec26 <KePanic(char const*)>
c0013f00:	83 c4 10             	add    esp,0x10
c0013f03:	31 c0                	xor    eax,eax
c0013f05:	e9 31 02 00 00       	jmp    c001413b <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0013f0a:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0013f10:	75 e1                	jne    c0013ef3 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0013f12:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0013f15:	85 c0                	test   eax,eax
c0013f17:	74 da                	je     c0013ef3 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0013f19:	52                   	push   edx
c0013f1a:	31 d2                	xor    edx,edx
c0013f1c:	52                   	push   edx
c0013f1d:	50                   	push   eax
c0013f1e:	53                   	push   ebx
c0013f1f:	e8 c4 42 ff ff       	call   c00081e8 <File::seek(unsigned long long)>
c0013f24:	83 c4 10             	add    esp,0x10
c0013f27:	85 c0                	test   eax,eax
c0013f29:	75 c8                	jne    c0013ef3 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0013f2b:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0013f2f:	83 ec 0c             	sub    esp,0xc
c0013f32:	31 ed                	xor    ebp,ebp
c0013f34:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0013f38:	0f af c2             	imul   eax,edx
c0013f3b:	50                   	push   eax
c0013f3c:	e8 8f a9 ff ff       	call   c000e8d0 <malloc>
c0013f41:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0013f43:	89 34 24             	mov    DWORD PTR [esp],esi
c0013f46:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013f4a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013f4e:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0013f52:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0013f56:	0f af c2             	imul   eax,edx
c0013f59:	99                   	cdq    
c0013f5a:	52                   	push   edx
c0013f5b:	50                   	push   eax
c0013f5c:	53                   	push   ebx
c0013f5d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013f60:	83 c4 20             	add    esp,0x20
c0013f63:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0013f6b:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0013f73:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0013f7b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0013f83:	66 3b 6f 30          	cmp    bp,WORD PTR [edi+0x30]
c0013f87:	0f b7 f5             	movzx  esi,bp
c0013f8a:	0f 83 a7 00 00 00    	jae    c0014037 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c0013f90:	6b f6 28             	imul   esi,esi,0x28
c0013f93:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0013f97:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0013f9a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013f9e:	50                   	push   eax
c0013f9f:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0013fa3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013fa7:	8b 16                	mov    edx,DWORD PTR [esi]
c0013fa9:	6b c0 28             	imul   eax,eax,0x28
c0013fac:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0013fb0:	89 d0                	mov    eax,edx
c0013fb2:	31 d2                	xor    edx,edx
c0013fb4:	52                   	push   edx
c0013fb5:	50                   	push   eax
c0013fb6:	53                   	push   ebx
c0013fb7:	e8 2c 42 ff ff       	call   c00081e8 <File::seek(unsigned long long)>
c0013fbc:	83 c4 0c             	add    esp,0xc
c0013fbf:	6a 20                	push   0x20
c0013fc1:	6a 00                	push   0x0
c0013fc3:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0013fc7:	52                   	push   edx
c0013fc8:	e8 23 c5 fe ff       	call   c00004f0 <memset>
c0013fcd:	58                   	pop    eax
c0013fce:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013fd0:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0013fd4:	51                   	push   ecx
c0013fd5:	8d 54 24 40          	lea    edx,[esp+0x40]
c0013fd9:	52                   	push   edx
c0013fda:	6a 00                	push   0x0
c0013fdc:	6a 1f                	push   0x1f
c0013fde:	53                   	push   ebx
c0013fdf:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013fe2:	83 c4 18             	add    esp,0x18
c0013fe5:	68 81 28 02 c0       	push   0xc0022881
c0013fea:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0013fee:	52                   	push   edx
c0013fef:	e8 8c c7 fe ff       	call   c0000780 <strcmp>
c0013ff4:	83 c4 10             	add    esp,0x10
c0013ff7:	85 c0                	test   eax,eax
c0013ff9:	75 0f                	jne    c001400a <Thr::loadKernelSymbolTable(char const*)+0x185>
c0013ffb:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0013ffe:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014002:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014006:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001400a:	50                   	push   eax
c001400b:	50                   	push   eax
c001400c:	68 89 28 02 c0       	push   0xc0022889
c0014011:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0014015:	50                   	push   eax
c0014016:	e8 65 c7 fe ff       	call   c0000780 <strcmp>
c001401b:	83 c4 10             	add    esp,0x10
c001401e:	85 c0                	test   eax,eax
c0014020:	75 0f                	jne    c0014031 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0014022:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014025:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014029:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001402d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014031:	45                   	inc    ebp
c0014032:	e9 4c ff ff ff       	jmp    c0013f83 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0014037:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001403c:	75 10                	jne    c001404e <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c001403e:	83 ec 0c             	sub    esp,0xc
c0014041:	68 91 28 02 c0       	push   0xc0022891
c0014046:	e8 db ab ff ff       	call   c000ec26 <KePanic(char const*)>
c001404b:	83 c4 10             	add    esp,0x10
c001404e:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0014053:	75 10                	jne    c0014065 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c0014055:	83 ec 0c             	sub    esp,0xc
c0014058:	68 91 28 02 c0       	push   0xc0022891
c001405d:	e8 c4 ab ff ff       	call   c000ec26 <KePanic(char const*)>
c0014062:	83 c4 10             	add    esp,0x10
c0014065:	50                   	push   eax
c0014066:	31 d2                	xor    edx,edx
c0014068:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001406c:	52                   	push   edx
c001406d:	50                   	push   eax
c001406e:	53                   	push   ebx
c001406f:	e8 74 41 ff ff       	call   c00081e8 <File::seek(unsigned long long)>
c0014074:	5a                   	pop    edx
c0014075:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014079:	e8 52 a8 ff ff       	call   c000e8d0 <malloc>
c001407e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014082:	31 c9                	xor    ecx,ecx
c0014084:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014088:	8b 03                	mov    eax,DWORD PTR [ebx]
c001408a:	5e                   	pop    esi
c001408b:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001408f:	55                   	push   ebp
c0014090:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014094:	51                   	push   ecx
c0014095:	52                   	push   edx
c0014096:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001409a:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001409e:	53                   	push   ebx
c001409f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00140a2:	83 c4 14             	add    esp,0x14
c00140a5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00140a9:	e8 22 a8 ff ff       	call   c000e8d0 <malloc>
c00140ae:	89 c6                	mov    esi,eax
c00140b0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00140b2:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00140b5:	56                   	push   esi
c00140b6:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00140ba:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00140be:	51                   	push   ecx
c00140bf:	52                   	push   edx
c00140c0:	53                   	push   ebx
c00140c1:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00140c4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00140c8:	83 c4 1c             	add    esp,0x1c
c00140cb:	8b 15 80 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c680
c00140d1:	c1 e8 04             	shr    eax,0x4
c00140d4:	89 04 95 00 c5 02 c0 	mov    DWORD PTR [edx*4-0x3ffd3b00],eax
c00140db:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00140df:	31 d2                	xor    edx,edx
c00140e1:	52                   	push   edx
c00140e2:	50                   	push   eax
c00140e3:	53                   	push   ebx
c00140e4:	e8 ff 40 ff ff       	call   c00081e8 <File::seek(unsigned long long)>
c00140e9:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00140eb:	31 d2                	xor    edx,edx
c00140ed:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00140f0:	56                   	push   esi
c00140f1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00140f5:	52                   	push   edx
c00140f6:	50                   	push   eax
c00140f7:	53                   	push   ebx
c00140f8:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00140fb:	83 c4 14             	add    esp,0x14
c00140fe:	53                   	push   ebx
c00140ff:	e8 84 40 ff ff       	call   c0008188 <File::close()>
c0014104:	5d                   	pop    ebp
c0014105:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014109:	e8 d2 a7 ff ff       	call   c000e8e0 <free>
c001410e:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014111:	e8 ca a7 ff ff       	call   c000e8e0 <free>
c0014116:	a1 80 c6 02 c0       	mov    eax,ds:0xc002c680
c001411b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001411f:	83 c4 10             	add    esp,0x10
c0014122:	89 34 85 80 c5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3a80],esi
c0014129:	8d 50 01             	lea    edx,[eax+0x1]
c001412c:	89 0c 85 00 c6 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3a00],ecx
c0014133:	b0 01                	mov    al,0x1
c0014135:	89 15 80 c6 02 c0    	mov    DWORD PTR ds:0xc002c680,edx
c001413b:	83 c4 5c             	add    esp,0x5c
c001413e:	5b                   	pop    ebx
c001413f:	5e                   	pop    esi
c0014140:	5f                   	pop    edi
c0014141:	5d                   	pop    ebp
c0014142:	c3                   	ret    

c0014143 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0014143:	55                   	push   ebp
c0014144:	57                   	push   edi
c0014145:	56                   	push   esi
c0014146:	53                   	push   ebx
c0014147:	81 ec 68 03 00 00    	sub    esp,0x368
c001414d:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0014154:	8b 35 d8 c6 02 c0    	mov    esi,DWORD PTR ds:0xc002c6d8
c001415a:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001415e:	68 14 01 00 00       	push   0x114
c0014163:	e8 68 a7 ff ff       	call   c000e8d0 <malloc>
c0014168:	83 c4 0c             	add    esp,0xc
c001416b:	56                   	push   esi
c001416c:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0014173:	50                   	push   eax
c0014174:	89 c3                	mov    ebx,eax
c0014176:	e8 91 3f ff ff       	call   c000810c <File::File(char const*, Process*)>
c001417b:	5f                   	pop    edi
c001417c:	5d                   	pop    ebp
c001417d:	6a 01                	push   0x1
c001417f:	53                   	push   ebx
c0014180:	e8 a5 3f ff ff       	call   c000812a <File::open(FileOpenMode)>
c0014185:	83 c4 10             	add    esp,0x10
c0014188:	85 c0                	test   eax,eax
c001418a:	0f 85 b3 06 00 00    	jne    c0014843 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014190:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0014198:	83 ec 0c             	sub    esp,0xc
c001419b:	6a 34                	push   0x34
c001419d:	e8 2e a7 ff ff       	call   c000e8d0 <malloc>
c00141a2:	5e                   	pop    esi
c00141a3:	8d 74 24 54          	lea    esi,[esp+0x54]
c00141a7:	89 c5                	mov    ebp,eax
c00141a9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00141ab:	56                   	push   esi
c00141ac:	55                   	push   ebp
c00141ad:	6a 00                	push   0x0
c00141af:	6a 34                	push   0x34
c00141b1:	53                   	push   ebx
c00141b2:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00141b5:	83 c4 20             	add    esp,0x20
c00141b8:	85 c0                	test   eax,eax
c00141ba:	0f 85 83 06 00 00    	jne    c0014843 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c00141c0:	81 7d 00 7f 45 4c 46 	cmp    DWORD PTR [ebp+0x0],0x464c457f
c00141c7:	0f 85 76 06 00 00    	jne    c0014843 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c00141cd:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c00141d0:	85 c0                	test   eax,eax
c00141d2:	0f 84 6b 06 00 00    	je     c0014843 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c00141d8:	31 d2                	xor    edx,edx
c00141da:	51                   	push   ecx
c00141db:	52                   	push   edx
c00141dc:	50                   	push   eax
c00141dd:	53                   	push   ebx
c00141de:	e8 05 40 ff ff       	call   c00081e8 <File::seek(unsigned long long)>
c00141e3:	83 c4 10             	add    esp,0x10
c00141e6:	85 c0                	test   eax,eax
c00141e8:	0f 85 55 06 00 00    	jne    c0014843 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c00141ee:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c00141f1:	83 ec 0c             	sub    esp,0xc
c00141f4:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c00141f8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00141fc:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0014200:	0f af c2             	imul   eax,edx
c0014203:	50                   	push   eax
c0014204:	e8 c7 a6 ff ff       	call   c000e8d0 <malloc>
c0014209:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001420b:	89 34 24             	mov    DWORD PTR [esp],esi
c001420e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014212:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014216:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c001421a:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c001421e:	0f af c2             	imul   eax,edx
c0014221:	99                   	cdq    
c0014222:	52                   	push   edx
c0014223:	50                   	push   eax
c0014224:	53                   	push   ebx
c0014225:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014228:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
c001422b:	83 c4 20             	add    esp,0x20
c001422e:	85 c0                	test   eax,eax
c0014230:	0f 84 0d 06 00 00    	je     c0014843 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014236:	52                   	push   edx
c0014237:	31 d2                	xor    edx,edx
c0014239:	52                   	push   edx
c001423a:	50                   	push   eax
c001423b:	53                   	push   ebx
c001423c:	e8 a7 3f ff ff       	call   c00081e8 <File::seek(unsigned long long)>
c0014241:	83 c4 10             	add    esp,0x10
c0014244:	85 c0                	test   eax,eax
c0014246:	0f 85 f7 05 00 00    	jne    c0014843 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c001424c:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c0014250:	83 ec 0c             	sub    esp,0xc
c0014253:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c0014257:	0f af c2             	imul   eax,edx
c001425a:	50                   	push   eax
c001425b:	e8 70 a6 ff ff       	call   c000e8d0 <malloc>
c0014260:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014262:	89 34 24             	mov    DWORD PTR [esp],esi
c0014265:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014269:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001426d:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c0014271:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c0014275:	0f af c2             	imul   eax,edx
c0014278:	99                   	cdq    
c0014279:	52                   	push   edx
c001427a:	50                   	push   eax
c001427b:	53                   	push   ebx
c001427c:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001427f:	83 c4 20             	add    esp,0x20
c0014282:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0014288:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001428b:	66 3b 45 2c          	cmp    ax,WORD PTR [ebp+0x2c]
c001428f:	0f b7 3c 24          	movzx  edi,WORD PTR [esp]
c0014293:	73 78                	jae    c001430d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1ca>
c0014295:	c1 e7 05             	shl    edi,0x5
c0014298:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c001429c:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001429f:	75 63                	jne    c0014304 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1c1>
c00142a1:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c00142a4:	31 d2                	xor    edx,edx
c00142a6:	8b 77 08             	mov    esi,DWORD PTR [edi+0x8]
c00142a9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00142ad:	50                   	push   eax
c00142ae:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c00142b1:	52                   	push   edx
c00142b2:	50                   	push   eax
c00142b3:	53                   	push   ebx
c00142b4:	e8 2f 3f ff ff       	call   c00081e8 <File::seek(unsigned long long)>
c00142b9:	83 c4 10             	add    esp,0x10
c00142bc:	85 c0                	test   eax,eax
c00142be:	0f 85 7f 05 00 00    	jne    c0014843 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c00142c4:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c00142cb:	83 ec 0c             	sub    esp,0xc
c00142ce:	31 d2                	xor    edx,edx
c00142d0:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c00142d4:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00142d6:	01 c6                	add    esi,eax
c00142d8:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00142df:	50                   	push   eax
c00142e0:	56                   	push   esi
c00142e1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00142e5:	52                   	push   edx
c00142e6:	50                   	push   eax
c00142e7:	53                   	push   ebx
c00142e8:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00142eb:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c00142ee:	83 c4 1c             	add    esp,0x1c
c00142f1:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c00142f4:	50                   	push   eax
c00142f5:	6a 00                	push   0x0
c00142f7:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c00142fb:	56                   	push   esi
c00142fc:	e8 ef c1 fe ff       	call   c00004f0 <memset>
c0014301:	83 c4 10             	add    esp,0x10
c0014304:	66 ff 04 24          	inc    WORD PTR [esp]
c0014308:	e9 7b ff ff ff       	jmp    c0014288 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x145>
c001430d:	50                   	push   eax
c001430e:	68 00 01 00 00       	push   0x100
c0014313:	6a 00                	push   0x0
c0014315:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0014319:	50                   	push   eax
c001431a:	e8 d1 c1 fe ff       	call   c00004f0 <memset>
c001431f:	83 c4 0c             	add    esp,0xc
c0014322:	68 00 01 00 00       	push   0x100
c0014327:	6a 00                	push   0x0
c0014329:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0014330:	50                   	push   eax
c0014331:	e8 ba c1 fe ff       	call   c00004f0 <memset>
c0014336:	83 c4 10             	add    esp,0x10
c0014339:	66 c7 44 24 14 00 00 	mov    WORD PTR [esp+0x14],0x0
c0014340:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0014347:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001434f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0014357:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001435f:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0014367:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001436b:	66 3b 45 30          	cmp    ax,WORD PTR [ebp+0x30]
c001436f:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c0014374:	0f 83 16 01 00 00    	jae    c0014490 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x34d>
c001437a:	6b ff 28             	imul   edi,edi,0x28
c001437d:	03 7c 24 04          	add    edi,DWORD PTR [esp+0x4]
c0014381:	8b 77 10             	mov    esi,DWORD PTR [edi+0x10]
c0014384:	51                   	push   ecx
c0014385:	0f b7 55 32          	movzx  edx,WORD PTR [ebp+0x32]
c0014389:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001438d:	8b 07                	mov    eax,DWORD PTR [edi]
c001438f:	6b d2 28             	imul   edx,edx,0x28
c0014392:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0014396:	31 d2                	xor    edx,edx
c0014398:	52                   	push   edx
c0014399:	50                   	push   eax
c001439a:	53                   	push   ebx
c001439b:	e8 48 3e ff ff       	call   c00081e8 <File::seek(unsigned long long)>
c00143a0:	83 c4 0c             	add    esp,0xc
c00143a3:	6a 20                	push   0x20
c00143a5:	6a 00                	push   0x0
c00143a7:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c00143ae:	51                   	push   ecx
c00143af:	e8 3c c1 fe ff       	call   c00004f0 <memset>
c00143b4:	58                   	pop    eax
c00143b5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00143b7:	8d 54 24 58          	lea    edx,[esp+0x58]
c00143bb:	52                   	push   edx
c00143bc:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c00143c3:	51                   	push   ecx
c00143c4:	6a 00                	push   0x0
c00143c6:	6a 1f                	push   0x1f
c00143c8:	53                   	push   ebx
c00143c9:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00143cc:	83 c4 1c             	add    esp,0x1c
c00143cf:	6a 09                	push   0x9
c00143d1:	68 ab 28 02 c0       	push   0xc00228ab
c00143d6:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c00143dd:	51                   	push   ecx
c00143de:	e8 9d bf fe ff       	call   c0000380 <memcmp>
c00143e3:	83 c4 10             	add    esp,0x10
c00143e6:	85 c0                	test   eax,eax
c00143e8:	75 1a                	jne    c0014404 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2c1>
c00143ea:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00143ed:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00143f0:	89 74 84 50          	mov    DWORD PTR [esp+eax*4+0x50],esi
c00143f4:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c00143f7:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c00143fe:	89 d0                	mov    eax,edx
c0014400:	40                   	inc    eax
c0014401:	89 04 24             	mov    DWORD PTR [esp],eax
c0014404:	52                   	push   edx
c0014405:	6a 09                	push   0x9
c0014407:	68 b5 28 02 c0       	push   0xc00228b5
c001440c:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014413:	50                   	push   eax
c0014414:	e8 67 bf fe ff       	call   c0000380 <memcmp>
c0014419:	83 c4 10             	add    esp,0x10
c001441c:	85 c0                	test   eax,eax
c001441e:	75 1a                	jne    c001443a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2f7>
c0014420:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0014423:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0014426:	89 74 84 50          	mov    DWORD PTR [esp+eax*4+0x50],esi
c001442a:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001442d:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c0014434:	89 c8                	mov    eax,ecx
c0014436:	40                   	inc    eax
c0014437:	89 04 24             	mov    DWORD PTR [esp],eax
c001443a:	50                   	push   eax
c001443b:	50                   	push   eax
c001443c:	68 81 28 02 c0       	push   0xc0022881
c0014441:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014448:	50                   	push   eax
c0014449:	e8 32 c3 fe ff       	call   c0000780 <strcmp>
c001444e:	83 c4 10             	add    esp,0x10
c0014451:	85 c0                	test   eax,eax
c0014453:	75 0b                	jne    c0014460 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x31d>
c0014455:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0014459:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001445c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014460:	50                   	push   eax
c0014461:	50                   	push   eax
c0014462:	68 89 28 02 c0       	push   0xc0022889
c0014467:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001446e:	50                   	push   eax
c001446f:	e8 0c c3 fe ff       	call   c0000780 <strcmp>
c0014474:	83 c4 10             	add    esp,0x10
c0014477:	85 c0                	test   eax,eax
c0014479:	75 0b                	jne    c0014486 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x343>
c001447b:	89 74 24 1c          	mov    DWORD PTR [esp+0x1c],esi
c001447f:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0014482:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014486:	66 ff 44 24 14       	inc    WORD PTR [esp+0x14]
c001448b:	e9 d7 fe ff ff       	jmp    c0014367 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x224>
c0014490:	50                   	push   eax
c0014491:	31 d2                	xor    edx,edx
c0014493:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014497:	52                   	push   edx
c0014498:	50                   	push   eax
c0014499:	53                   	push   ebx
c001449a:	e8 49 3d ff ff       	call   c00081e8 <File::seek(unsigned long long)>
c001449f:	58                   	pop    eax
c00144a0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00144a4:	e8 27 a4 ff ff       	call   c000e8d0 <malloc>
c00144a9:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00144ab:	31 d2                	xor    edx,edx
c00144ad:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00144b1:	58                   	pop    eax
c00144b2:	8d 74 24 54          	lea    esi,[esp+0x54]
c00144b6:	56                   	push   esi
c00144b7:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00144bb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144bf:	52                   	push   edx
c00144c0:	50                   	push   eax
c00144c1:	53                   	push   ebx
c00144c2:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00144c5:	83 c4 14             	add    esp,0x14
c00144c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00144cc:	e8 ff a3 ff ff       	call   c000e8d0 <malloc>
c00144d1:	31 d2                	xor    edx,edx
c00144d3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00144d7:	83 c4 0c             	add    esp,0xc
c00144da:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144de:	52                   	push   edx
c00144df:	50                   	push   eax
c00144e0:	53                   	push   ebx
c00144e1:	e8 02 3d ff ff       	call   c00081e8 <File::seek(unsigned long long)>
c00144e6:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00144e8:	31 d2                	xor    edx,edx
c00144ea:	89 34 24             	mov    DWORD PTR [esp],esi
c00144ed:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00144f1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00144f5:	52                   	push   edx
c00144f6:	50                   	push   eax
c00144f7:	53                   	push   ebx
c00144f8:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00144fb:	83 c4 20             	add    esp,0x20
c00144fe:	0f b6 44 24 37       	movzx  eax,BYTE PTR [esp+0x37]
c0014503:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001450b:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001450f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0014513:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0014516:	0f 84 2b 03 00 00    	je     c0014847 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x704>
c001451c:	8b 84 bc 50 01 00 00 	mov    eax,DWORD PTR [esp+edi*4+0x150]
c0014523:	31 d2                	xor    edx,edx
c0014525:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014529:	c1 e8 03             	shr    eax,0x3
c001452c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0014530:	51                   	push   ecx
c0014531:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014535:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c0014539:	52                   	push   edx
c001453a:	50                   	push   eax
c001453b:	53                   	push   ebx
c001453c:	e8 a7 3c ff ff       	call   c00081e8 <File::seek(unsigned long long)>
c0014541:	5e                   	pop    esi
c0014542:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014546:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001454d:	e8 7e a3 ff ff       	call   c000e8d0 <malloc>
c0014552:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014554:	31 d2                	xor    edx,edx
c0014556:	89 c7                	mov    edi,eax
c0014558:	58                   	pop    eax
c0014559:	8d 44 24 58          	lea    eax,[esp+0x58]
c001455d:	50                   	push   eax
c001455e:	57                   	push   edi
c001455f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014563:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001456a:	52                   	push   edx
c001456b:	50                   	push   eax
c001456c:	53                   	push   ebx
c001456d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014570:	83 c4 20             	add    esp,0x20
c0014573:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001457b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001457f:	39 74 24 18          	cmp    DWORD PTR [esp+0x18],esi
c0014583:	0f 8d a5 02 00 00    	jge    c001482e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6eb>
c0014589:	c6 44 24 1c 00       	mov    BYTE PTR [esp+0x1c],0x0
c001458e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014592:	8b 04 c7             	mov    eax,DWORD PTR [edi+eax*8]
c0014595:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0014599:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001459d:	8b 44 c7 04          	mov    eax,DWORD PTR [edi+eax*8+0x4]
c00145a1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00145a5:	c1 e8 08             	shr    eax,0x8
c00145a8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00145ac:	89 c2                	mov    edx,eax
c00145ae:	c1 e2 04             	shl    edx,0x4
c00145b1:	03 54 24 30          	add    edx,DWORD PTR [esp+0x30]
c00145b5:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c00145b8:	85 f6                	test   esi,esi
c00145ba:	0f 85 cf 00 00 00    	jne    c001468f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c00145c0:	83 ec 0c             	sub    esp,0xc
c00145c3:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c00145c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145cb:	03 02                	add    eax,DWORD PTR [edx]
c00145cd:	50                   	push   eax
c00145ce:	e8 63 f8 ff ff       	call   c0013e36 <Thr::getAddressOfKernelSymbol(char const*)>
c00145d3:	83 c4 10             	add    esp,0x10
c00145d6:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00145da:	c6 44 24 1c 01       	mov    BYTE PTR [esp+0x1c],0x1
c00145df:	85 c0                	test   eax,eax
c00145e1:	89 c6                	mov    esi,eax
c00145e3:	0f 85 a6 00 00 00    	jne    c001468f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c00145e9:	83 ec 0c             	sub    esp,0xc
c00145ec:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c00145f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145f4:	03 02                	add    eax,DWORD PTR [edx]
c00145f6:	50                   	push   eax
c00145f7:	e8 8c b0 ff ff       	call   c000f688 <KeResolveCompatibilitySymbol(char*)>
c00145fc:	83 c4 10             	add    esp,0x10
c00145ff:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0014603:	85 c0                	test   eax,eax
c0014605:	89 c6                	mov    esi,eax
c0014607:	0f 85 82 00 00 00    	jne    c001468f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c001460d:	50                   	push   eax
c001460e:	50                   	push   eax
c001460f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014613:	03 02                	add    eax,DWORD PTR [edx]
c0014615:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0014619:	50                   	push   eax
c001461a:	68 bf 28 02 c0       	push   0xc00228bf
c001461f:	e8 2a 29 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0014624:	58                   	pop    eax
c0014625:	5a                   	pop    edx
c0014626:	68 d9 28 02 c0       	push   0xc00228d9
c001462b:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014632:	51                   	push   ecx
c0014633:	e8 18 c0 fe ff       	call   c0000650 <strcpy>
c0014638:	59                   	pop    ecx
c0014639:	58                   	pop    eax
c001463a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001463e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014642:	03 02                	add    eax,DWORD PTR [edx]
c0014644:	50                   	push   eax
c0014645:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001464c:	51                   	push   ecx
c001464d:	e8 1e c2 fe ff       	call   c0000870 <strcat>
c0014652:	58                   	pop    eax
c0014653:	5a                   	pop    edx
c0014654:	68 73 29 02 c0       	push   0xc0022973
c0014659:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014660:	51                   	push   ecx
c0014661:	e8 0a c2 fe ff       	call   c0000870 <strcat>
c0014666:	83 c4 10             	add    esp,0x10
c0014669:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c001466e:	0f 84 77 01 00 00    	je     c00147eb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c0014674:	83 ec 0c             	sub    esp,0xc
c0014677:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001467e:	51                   	push   ecx
c001467f:	e8 a2 a5 ff ff       	call   c000ec26 <KePanic(char const*)>
c0014684:	83 c4 10             	add    esp,0x10
c0014687:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c001468b:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001468f:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0014694:	83 f8 01             	cmp    eax,0x1
c0014697:	0f 85 9b 00 00 00    	jne    c0014738 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5f5>
c001469d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00146a1:	8b 94 24 74 03 00 00 	mov    edx,DWORD PTR [esp+0x374]
c00146a8:	2b 54 24 20          	sub    edx,DWORD PTR [esp+0x20]
c00146ac:	01 d0                	add    eax,edx
c00146ae:	81 7c 24 10 01 01 00 00 	cmp    DWORD PTR [esp+0x10],0x101
c00146b6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00146ba:	0f 94 c0             	sete   al
c00146bd:	81 7c 24 10 01 04 00 00 	cmp    DWORD PTR [esp+0x10],0x401
c00146c5:	0f 94 c1             	sete   cl
c00146c8:	09 c1                	or     ecx,eax
c00146ca:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00146ce:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c00146d3:	0f b6 c9             	movzx  ecx,cl
c00146d6:	8b 00                	mov    eax,DWORD PTR [eax]
c00146d8:	74 41                	je     c001471b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d8>
c00146da:	8d 14 06             	lea    edx,[esi+eax*1]
c00146dd:	85 c9                	test   ecx,ecx
c00146df:	75 15                	jne    c00146f6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b3>
c00146e1:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c00146e5:	66 83 f8 0c          	cmp    ax,0xc
c00146e9:	76 05                	jbe    c00146f0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ad>
c00146eb:	b8 0c 00 00 00       	mov    eax,0xc
c00146f0:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c00146f4:	76 37                	jbe    c001472d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c00146f6:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c00146fb:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00146ff:	0f 84 e6 00 00 00    	je     c00147eb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c0014705:	83 ec 0c             	sub    esp,0xc
c0014708:	68 f0 28 02 c0       	push   0xc00228f0
c001470d:	e8 14 a5 ff ff       	call   c000ec26 <KePanic(char const*)>
c0014712:	83 c4 10             	add    esp,0x10
c0014715:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014719:	eb 12                	jmp    c001472d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c001471b:	01 c2                	add    edx,eax
c001471d:	85 c9                	test   ecx,ecx
c001471f:	75 0c                	jne    c001472d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c0014721:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0014725:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c0014729:	77 02                	ja     c001472d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c001472b:	01 f2                	add    edx,esi
c001472d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014731:	89 10                	mov    DWORD PTR [eax],edx
c0014733:	e9 ed 00 00 00       	jmp    c0014825 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e2>
c0014738:	83 f8 02             	cmp    eax,0x2
c001473b:	0f 85 81 00 00 00    	jne    c00147c2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67f>
c0014741:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0014748:	2b 44 24 20          	sub    eax,DWORD PTR [esp+0x20]
c001474c:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c0014750:	81 7c 24 10 01 01 00 00 	cmp    DWORD PTR [esp+0x10],0x101
c0014758:	74 21                	je     c001477b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x638>
c001475a:	81 7c 24 10 01 04 00 00 	cmp    DWORD PTR [esp+0x10],0x401
c0014762:	74 17                	je     c001477b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x638>
c0014764:	0f b7 4d 30          	movzx  ecx,WORD PTR [ebp+0x30]
c0014768:	ba 0a 00 00 00       	mov    edx,0xa
c001476d:	83 f9 0e             	cmp    ecx,0xe
c0014770:	77 03                	ja     c0014775 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x632>
c0014772:	8d 51 fc             	lea    edx,[ecx-0x4]
c0014775:	3b 54 24 28          	cmp    edx,DWORD PTR [esp+0x28]
c0014779:	76 1f                	jbe    c001479a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x657>
c001477b:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c0014780:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014784:	74 65                	je     c00147eb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c0014786:	83 ec 0c             	sub    esp,0xc
c0014789:	68 0c 29 02 c0       	push   0xc002290c
c001478e:	e8 93 a4 ff ff       	call   c000ec26 <KePanic(char const*)>
c0014793:	83 c4 10             	add    esp,0x10
c0014796:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001479a:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c001479f:	8b 10                	mov    edx,DWORD PTR [eax]
c00147a1:	74 15                	je     c00147b8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x675>
c00147a3:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00147a7:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c00147ae:	2b 4c 24 24          	sub    ecx,DWORD PTR [esp+0x24]
c00147b2:	01 d1                	add    ecx,edx
c00147b4:	01 ce                	add    esi,ecx
c00147b6:	eb 06                	jmp    c00147be <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67b>
c00147b8:	2b 54 24 24          	sub    edx,DWORD PTR [esp+0x24]
c00147bc:	01 d6                	add    esi,edx
c00147be:	89 30                	mov    DWORD PTR [eax],esi
c00147c0:	eb 63                	jmp    c0014825 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e2>
c00147c2:	56                   	push   esi
c00147c3:	56                   	push   esi
c00147c4:	50                   	push   eax
c00147c5:	68 28 29 02 c0       	push   0xc0022928
c00147ca:	e8 7f 27 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00147cf:	83 c4 10             	add    esp,0x10
c00147d2:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c00147d7:	74 12                	je     c00147eb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c00147d9:	83 ec 0c             	sub    esp,0xc
c00147dc:	68 33 29 02 c0       	push   0xc0022933
c00147e1:	e8 40 a4 ff ff       	call   c000ec26 <KePanic(char const*)>
c00147e6:	83 c4 10             	add    esp,0x10
c00147e9:	eb 3a                	jmp    c0014825 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e2>
c00147eb:	83 ec 0c             	sub    esp,0xc
c00147ee:	53                   	push   ebx
c00147ef:	e8 94 39 ff ff       	call   c0008188 <File::close()>
c00147f4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00147f6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00147f9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00147fc:	89 3c 24             	mov    DWORD PTR [esp],edi
c00147ff:	e8 dc a0 ff ff       	call   c000e8e0 <free>
c0014804:	59                   	pop    ecx
c0014805:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014809:	e8 d2 a0 ff ff       	call   c000e8e0 <free>
c001480e:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014811:	e8 ca a0 ff ff       	call   c000e8e0 <free>
c0014816:	5b                   	pop    ebx
c0014817:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001481b:	e8 c0 a0 ff ff       	call   c000e8e0 <free>
c0014820:	83 c4 10             	add    esp,0x10
c0014823:	eb 1e                	jmp    c0014843 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014825:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0014829:	e9 4d fd ff ff       	jmp    c001457b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x438>
c001482e:	83 ec 0c             	sub    esp,0xc
c0014831:	57                   	push   edi
c0014832:	e8 a9 a0 ff ff       	call   c000e8e0 <free>
c0014837:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c001483b:	83 c4 10             	add    esp,0x10
c001483e:	e9 cc fc ff ff       	jmp    c001450f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3cc>
c0014843:	31 c0                	xor    eax,eax
c0014845:	eb 32                	jmp    c0014879 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x736>
c0014847:	83 ec 0c             	sub    esp,0xc
c001484a:	53                   	push   ebx
c001484b:	e8 38 39 ff ff       	call   c0008188 <File::close()>
c0014850:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014852:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014855:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014858:	58                   	pop    eax
c0014859:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001485d:	e8 7e a0 ff ff       	call   c000e8e0 <free>
c0014862:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014865:	e8 76 a0 ff ff       	call   c000e8e0 <free>
c001486a:	5a                   	pop    edx
c001486b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001486f:	e8 6c a0 ff ff       	call   c000e8e0 <free>
c0014874:	83 c4 10             	add    esp,0x10
c0014877:	b0 01                	mov    al,0x1
c0014879:	81 c4 5c 03 00 00    	add    esp,0x35c
c001487f:	5b                   	pop    ebx
c0014880:	5e                   	pop    esi
c0014881:	5f                   	pop    edi
c0014882:	5d                   	pop    ebp
c0014883:	c3                   	ret    

c0014884 <Thr::getDriverBaseFromAddress(unsigned long)>:
c0014884:	56                   	push   esi
c0014885:	31 d2                	xor    edx,edx
c0014887:	53                   	push   ebx
c0014888:	8b 1d e0 be 02 c0    	mov    ebx,DWORD PTR ds:0xc002bee0
c001488e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014892:	39 d3                	cmp    ebx,edx
c0014894:	7e 1b                	jle    c00148b1 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0014896:	8b 04 95 00 c1 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd3f00]
c001489d:	39 c8                	cmp    eax,ecx
c001489f:	77 0d                	ja     c00148ae <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c00148a1:	8b 34 95 00 bf 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd4100]
c00148a8:	01 c6                	add    esi,eax
c00148aa:	39 ce                	cmp    esi,ecx
c00148ac:	77 05                	ja     c00148b3 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c00148ae:	42                   	inc    edx
c00148af:	eb e1                	jmp    c0014892 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c00148b1:	31 c0                	xor    eax,eax
c00148b3:	5b                   	pop    ebx
c00148b4:	5e                   	pop    esi
c00148b5:	c3                   	ret    

c00148b6 <Thr::getDriverNameFromAddress(unsigned long)>:
c00148b6:	53                   	push   ebx
c00148b7:	8b 1d e0 be 02 c0    	mov    ebx,DWORD PTR ds:0xc002bee0
c00148bd:	31 c0                	xor    eax,eax
c00148bf:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00148c3:	39 c3                	cmp    ebx,eax
c00148c5:	7e 22                	jle    c00148e9 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c00148c7:	8b 14 85 00 c1 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd3f00]
c00148ce:	39 ca                	cmp    edx,ecx
c00148d0:	77 14                	ja     c00148e6 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c00148d2:	03 14 85 00 bf 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd4100]
c00148d9:	39 ca                	cmp    edx,ecx
c00148db:	76 09                	jbe    c00148e6 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c00148dd:	8b 04 85 00 c3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3d00]
c00148e4:	eb 05                	jmp    c00148eb <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c00148e6:	40                   	inc    eax
c00148e7:	eb da                	jmp    c00148c3 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c00148e9:	31 c0                	xor    eax,eax
c00148eb:	5b                   	pop    ebx
c00148ec:	c3                   	ret    

c00148ed <Thr::getDriverOffsetFromAddress(unsigned long)>:
c00148ed:	53                   	push   ebx
c00148ee:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00148f2:	53                   	push   ebx
c00148f3:	e8 8c ff ff ff       	call   c0014884 <Thr::getDriverBaseFromAddress(unsigned long)>
c00148f8:	5a                   	pop    edx
c00148f9:	31 d2                	xor    edx,edx
c00148fb:	85 c0                	test   eax,eax
c00148fd:	74 04                	je     c0014903 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c00148ff:	89 da                	mov    edx,ebx
c0014901:	29 c2                	sub    edx,eax
c0014903:	5b                   	pop    ebx
c0014904:	89 d0                	mov    eax,edx
c0014906:	c3                   	ret    

c0014907 <Thr::loadDLL(char const*, bool)>:
c0014907:	55                   	push   ebp
c0014908:	57                   	push   edi
c0014909:	56                   	push   esi
c001490a:	53                   	push   ebx
c001490b:	81 ec 34 01 00 00    	sub    esp,0x134
c0014911:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0014918:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c001491f:	56                   	push   esi
c0014920:	68 4b 29 02 c0       	push   0xc002294b
c0014925:	e8 24 26 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001492a:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0014931:	e8 9a 9f ff ff       	call   c000e8d0 <malloc>
c0014936:	83 c4 0c             	add    esp,0xc
c0014939:	ff 35 d8 c6 02 c0    	push   DWORD PTR ds:0xc002c6d8
c001493f:	56                   	push   esi
c0014940:	50                   	push   eax
c0014941:	89 c3                	mov    ebx,eax
c0014943:	e8 c4 37 ff ff       	call   c000810c <File::File(char const*, Process*)>
c0014948:	83 c4 10             	add    esp,0x10
c001494b:	85 db                	test   ebx,ebx
c001494d:	75 3c                	jne    c001498b <Thr::loadDLL(char const*, bool)+0x84>
c001494f:	89 e8                	mov    eax,ebp
c0014951:	84 c0                	test   al,al
c0014953:	0f 84 02 02 00 00    	je     c0014b5b <Thr::loadDLL(char const*, bool)+0x254>
c0014959:	50                   	push   eax
c001495a:	50                   	push   eax
c001495b:	68 5c 29 02 c0       	push   0xc002295c
c0014960:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
c0014964:	57                   	push   edi
c0014965:	e8 e6 bc fe ff       	call   c0000650 <strcpy>
c001496a:	58                   	pop    eax
c001496b:	5a                   	pop    edx
c001496c:	56                   	push   esi
c001496d:	57                   	push   edi
c001496e:	e8 fd be fe ff       	call   c0000870 <strcat>
c0014973:	59                   	pop    ecx
c0014974:	58                   	pop    eax
c0014975:	68 73 29 02 c0       	push   0xc0022973
c001497a:	57                   	push   edi
c001497b:	e8 f0 be fe ff       	call   c0000870 <strcat>
c0014980:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014983:	e8 9e a2 ff ff       	call   c000ec26 <KePanic(char const*)>
c0014988:	83 c4 10             	add    esp,0x10
c001498b:	50                   	push   eax
c001498c:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c0014990:	50                   	push   eax
c0014991:	8d 44 24 20          	lea    eax,[esp+0x20]
c0014995:	50                   	push   eax
c0014996:	53                   	push   ebx
c0014997:	e8 90 3a ff ff       	call   c000842c <File::stat(unsigned long long*, bool*)>
c001499c:	83 c4 10             	add    esp,0x10
c001499f:	85 db                	test   ebx,ebx
c00149a1:	89 c7                	mov    edi,eax
c00149a3:	74 0c                	je     c00149b1 <Thr::loadDLL(char const*, bool)+0xaa>
c00149a5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00149a7:	83 ec 0c             	sub    esp,0xc
c00149aa:	53                   	push   ebx
c00149ab:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00149ae:	83 c4 10             	add    esp,0x10
c00149b1:	83 ec 0c             	sub    esp,0xc
c00149b4:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c00149b9:	50                   	push   eax
c00149ba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00149be:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00149c2:	57                   	push   edi
c00149c3:	68 75 29 02 c0       	push   0xc0022975
c00149c8:	e8 81 25 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00149cd:	83 c4 20             	add    esp,0x20
c00149d0:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c00149d5:	75 0a                	jne    c00149e1 <Thr::loadDLL(char const*, bool)+0xda>
c00149d7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00149db:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c00149df:	75 3e                	jne    c0014a1f <Thr::loadDLL(char const*, bool)+0x118>
c00149e1:	89 e8                	mov    eax,ebp
c00149e3:	31 db                	xor    ebx,ebx
c00149e5:	84 c0                	test   al,al
c00149e7:	0f 84 6e 01 00 00    	je     c0014b5b <Thr::loadDLL(char const*, bool)+0x254>
c00149ed:	50                   	push   eax
c00149ee:	50                   	push   eax
c00149ef:	68 96 29 02 c0       	push   0xc0022996
c00149f4:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c00149f8:	53                   	push   ebx
c00149f9:	e8 52 bc fe ff       	call   c0000650 <strcpy>
c00149fe:	58                   	pop    eax
c00149ff:	5a                   	pop    edx
c0014a00:	56                   	push   esi
c0014a01:	53                   	push   ebx
c0014a02:	e8 69 be fe ff       	call   c0000870 <strcat>
c0014a07:	59                   	pop    ecx
c0014a08:	5f                   	pop    edi
c0014a09:	68 73 29 02 c0       	push   0xc0022973
c0014a0e:	53                   	push   ebx
c0014a0f:	e8 5c be fe ff       	call   c0000870 <strcat>
c0014a14:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014a17:	e8 0a a2 ff ff       	call   c000ec26 <KePanic(char const*)>
c0014a1c:	83 c4 10             	add    esp,0x10
c0014a1f:	53                   	push   ebx
c0014a20:	6a 03                	push   0x3
c0014a22:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014a26:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0014a2a:	05 ff 0f 00 00       	add    eax,0xfff
c0014a2f:	83 d2 00             	adc    edx,0x0
c0014a32:	0f ac d0 0c          	shrd   eax,edx,0xc
c0014a36:	50                   	push   eax
c0014a37:	ff 35 d0 be 02 c0    	push   DWORD PTR ds:0xc002bed0
c0014a3d:	e8 30 dd ff ff       	call   c0012772 <VAS::allocatePages(int, int)>
c0014a42:	89 c3                	mov    ebx,eax
c0014a44:	58                   	pop    eax
c0014a45:	5a                   	pop    edx
c0014a46:	53                   	push   ebx
c0014a47:	68 ba 20 02 c0       	push   0xc00220ba
c0014a4c:	e8 fd 24 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0014a51:	89 34 24             	mov    DWORD PTR [esp],esi
c0014a54:	e8 27 bb fe ff       	call   c0000580 <strlen>
c0014a59:	8b 3d e0 be 02 c0    	mov    edi,DWORD PTR ds:0xc002bee0
c0014a5f:	40                   	inc    eax
c0014a60:	89 04 24             	mov    DWORD PTR [esp],eax
c0014a63:	e8 68 9e ff ff       	call   c000e8d0 <malloc>
c0014a68:	59                   	pop    ecx
c0014a69:	89 04 bd 00 c3 02 c0 	mov    DWORD PTR [edi*4-0x3ffd3d00],eax
c0014a70:	a1 e0 be 02 c0       	mov    eax,ds:0xc002bee0
c0014a75:	5f                   	pop    edi
c0014a76:	56                   	push   esi
c0014a77:	ff 34 85 00 c3 02 c0 	push   DWORD PTR [eax*4-0x3ffd3d00]
c0014a7e:	e8 cd bb fe ff       	call   c0000650 <strcpy>
c0014a83:	a1 e0 be 02 c0       	mov    eax,ds:0xc002bee0
c0014a88:	89 1c 85 00 c1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3f00],ebx
c0014a8f:	8d 50 01             	lea    edx,[eax+0x1]
c0014a92:	89 15 e0 be 02 c0    	mov    DWORD PTR ds:0xc002bee0,edx
c0014a98:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0014a9c:	83 c4 0c             	add    esp,0xc
c0014a9f:	6a 01                	push   0x1
c0014aa1:	53                   	push   ebx
c0014aa2:	56                   	push   esi
c0014aa3:	89 14 85 00 bf 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4100],edx
c0014aaa:	e8 94 f6 ff ff       	call   c0014143 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c0014aaf:	83 c4 10             	add    esp,0x10
c0014ab2:	89 c7                	mov    edi,eax
c0014ab4:	89 f8                	mov    eax,edi
c0014ab6:	83 f0 01             	xor    eax,0x1
c0014ab9:	84 c0                	test   al,al
c0014abb:	74 18                	je     c0014ad5 <Thr::loadDLL(char const*, bool)+0x1ce>
c0014abd:	89 e8                	mov    eax,ebp
c0014abf:	84 c0                	test   al,al
c0014ac1:	74 12                	je     c0014ad5 <Thr::loadDLL(char const*, bool)+0x1ce>
c0014ac3:	83 ec 0c             	sub    esp,0xc
c0014ac6:	68 af 29 02 c0       	push   0xc00229af
c0014acb:	e8 56 a1 ff ff       	call   c000ec26 <KePanic(char const*)>
c0014ad0:	83 c4 10             	add    esp,0x10
c0014ad3:	eb 06                	jmp    c0014adb <Thr::loadDLL(char const*, bool)+0x1d4>
c0014ad5:	89 f8                	mov    eax,edi
c0014ad7:	84 c0                	test   al,al
c0014ad9:	75 10                	jne    c0014aeb <Thr::loadDLL(char const*, bool)+0x1e4>
c0014adb:	83 ec 0c             	sub    esp,0xc
c0014ade:	68 ce 29 02 c0       	push   0xc00229ce
c0014ae3:	e8 3e a1 ff ff       	call   c000ec26 <KePanic(char const*)>
c0014ae8:	83 c4 10             	add    esp,0x10
c0014aeb:	31 f6                	xor    esi,esi
c0014aed:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014af1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0014af5:	05 ff 0f 00 00       	add    eax,0xfff
c0014afa:	83 d2 00             	adc    edx,0x0
c0014afd:	0f ac d0 0c          	shrd   eax,edx,0xc
c0014b01:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014b05:	c1 ea 0c             	shr    edx,0xc
c0014b08:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0014b0c:	ba 00 00 00 00       	mov    edx,0x0
c0014b11:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0014b15:	89 d0                	mov    eax,edx
c0014b17:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0014b1b:	73 32                	jae    c0014b4f <Thr::loadDLL(char const*, bool)+0x248>
c0014b1d:	50                   	push   eax
c0014b1e:	50                   	push   eax
c0014b1f:	89 f0                	mov    eax,esi
c0014b21:	c1 e0 0c             	shl    eax,0xc
c0014b24:	01 d8                	add    eax,ebx
c0014b26:	50                   	push   eax
c0014b27:	ff 35 d0 be 02 c0    	push   DWORD PTR ds:0xc002bed0
c0014b2d:	e8 38 d7 ff ff       	call   c001226a <VAS::getPageTableEntry(unsigned long)>
c0014b32:	83 c4 10             	add    esp,0x10
c0014b35:	8b 00                	mov    eax,DWORD PTR [eax]
c0014b37:	a8 60                	test   al,0x60
c0014b39:	75 11                	jne    c0014b4c <Thr::loadDLL(char const*, bool)+0x245>
c0014b3b:	83 ec 0c             	sub    esp,0xc
c0014b3e:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014b43:	50                   	push   eax
c0014b44:	e8 6e a2 ff ff       	call   c000edb7 <Phys::freePage(unsigned long)>
c0014b49:	83 c4 10             	add    esp,0x10
c0014b4c:	46                   	inc    esi
c0014b4d:	eb 9e                	jmp    c0014aed <Thr::loadDLL(char const*, bool)+0x1e6>
c0014b4f:	89 f8                	mov    eax,edi
c0014b51:	84 c0                	test   al,al
c0014b53:	b8 00 00 00 00       	mov    eax,0x0
c0014b58:	0f 44 d8             	cmove  ebx,eax
c0014b5b:	81 c4 2c 01 00 00    	add    esp,0x12c
c0014b61:	89 d8                	mov    eax,ebx
c0014b63:	5b                   	pop    ebx
c0014b64:	5e                   	pop    esi
c0014b65:	5f                   	pop    edi
c0014b66:	5d                   	pop    ebp
c0014b67:	c3                   	ret    

c0014b68 <Thr::executeDLL(unsigned long, void*)>:
c0014b68:	56                   	push   esi
c0014b69:	53                   	push   ebx
c0014b6a:	52                   	push   edx
c0014b6b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014b6f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014b73:	85 db                	test   ebx,ebx
c0014b75:	75 10                	jne    c0014b87 <Thr::executeDLL(unsigned long, void*)+0x1f>
c0014b77:	83 ec 0c             	sub    esp,0xc
c0014b7a:	68 ea 29 02 c0       	push   0xc00229ea
c0014b7f:	e8 a2 a0 ff ff       	call   c000ec26 <KePanic(char const*)>
c0014b84:	83 c4 10             	add    esp,0x10
c0014b87:	50                   	push   eax
c0014b88:	50                   	push   eax
c0014b89:	53                   	push   ebx
c0014b8a:	68 14 2a 02 c0       	push   0xc0022a14
c0014b8f:	e8 ba 23 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0014b94:	89 d8                	mov    eax,ebx
c0014b96:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0014b9a:	83 c4 14             	add    esp,0x14
c0014b9d:	5b                   	pop    ebx
c0014b9e:	5e                   	pop    esi
c0014b9f:	ff e0                	jmp    eax

c0014ba1 <KeProcessExec(Process*, char const*)>:
c0014ba1:	56                   	push   esi
c0014ba2:	53                   	push   ebx
c0014ba3:	83 ec 04             	sub    esp,0x4
c0014ba6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014baa:	8b b3 12 05 00 00    	mov    esi,DWORD PTR [ebx+0x512]
c0014bb0:	85 f6                	test   esi,esi
c0014bb2:	74 16                	je     c0014bca <KeProcessExec(Process*, char const*)+0x29>
c0014bb4:	83 ec 0c             	sub    esp,0xc
c0014bb7:	56                   	push   esi
c0014bb8:	e8 3f d9 ff ff       	call   c00124fc <VAS::~VAS()>
c0014bbd:	58                   	pop    eax
c0014bbe:	5a                   	pop    edx
c0014bbf:	6a 14                	push   0x14
c0014bc1:	56                   	push   esi
c0014bc2:	e8 9c 7a ff ff       	call   c000c663 <operator delete(void*, unsigned long)>
c0014bc7:	83 c4 10             	add    esp,0x10
c0014bca:	83 ec 0c             	sub    esp,0xc
c0014bcd:	6a 14                	push   0x14
c0014bcf:	e8 fc 9c ff ff       	call   c000e8d0 <malloc>
c0014bd4:	89 c6                	mov    esi,eax
c0014bd6:	58                   	pop    eax
c0014bd7:	5a                   	pop    edx
c0014bd8:	6a 00                	push   0x0
c0014bda:	56                   	push   esi
c0014bdb:	e8 ce dd ff ff       	call   c00129ae <VAS::VAS(bool)>
c0014be0:	89 b3 12 05 00 00    	mov    DWORD PTR [ebx+0x512],esi
c0014be6:	59                   	pop    ecx
c0014be7:	5e                   	pop    esi
c0014be8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014bec:	50                   	push   eax
c0014bed:	53                   	push   ebx
c0014bee:	e8 11 f0 ff ff       	call   c0013c04 <Thr::loadProgramIntoMemory(Process*, char const*)>
c0014bf3:	83 c4 14             	add    esp,0x14
c0014bf6:	31 c0                	xor    eax,eax
c0014bf8:	5b                   	pop    ebx
c0014bf9:	5e                   	pop    esi
c0014bfa:	c3                   	ret    
c0014bfb:	90                   	nop

c0014bfc <userModeEntryPoint(void*)>:
c0014bfc:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0014c01:	83 e8 01             	sub    eax,0x1
c0014c04:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c0014c09:	75 01                	jne    c0014c0c <userModeEntryPoint(void*)+0x10>
c0014c0b:	fb                   	sti    
c0014c0c:	fb                   	sti    
c0014c0d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014c12:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014c15:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c0014c1b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014c1f:	e9 1b b6 fe ff       	jmp    c000023f <goToUsermode>

c0014c24 <changeTSS>:
c0014c24:	83 ec 14             	sub    esp,0x14
c0014c27:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014c2c:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0014c2f:	b8 00 00 e8 01       	mov    eax,0x1e80000
c0014c34:	c1 e2 15             	shl    edx,0x15
c0014c37:	29 d0                	sub    eax,edx
c0014c39:	50                   	push   eax
c0014c3a:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c0014c3f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014c45:	05 68 11 00 00       	add    eax,0x1168
c0014c4a:	50                   	push   eax
c0014c4b:	e8 00 cc ff ff       	call   c0011850 <TSS::setESP(unsigned long)>
c0014c50:	83 c4 1c             	add    esp,0x1c
c0014c53:	c3                   	ret    

c0014c54 <switchToThread(ThreadControlBlock*)>:
c0014c54:	57                   	push   edi
c0014c55:	8b 0d ac c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6ac
c0014c5b:	56                   	push   esi
c0014c5c:	53                   	push   ebx
c0014c5d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014c61:	85 c9                	test   ecx,ecx
c0014c63:	0f 85 8b 00 00 00    	jne    c0014cf4 <switchToThread(ThreadControlBlock*)+0xa0>
c0014c69:	0f b6 53 40          	movzx  edx,BYTE PTR [ebx+0x40]
c0014c6d:	81 fa ff 00 00 00    	cmp    edx,0xff
c0014c73:	74 7b                	je     c0014cf0 <switchToThread(ThreadControlBlock*)+0x9c>
c0014c75:	b8 00 04 00 00       	mov    eax,0x400
c0014c7a:	29 d0                	sub    eax,edx
c0014c7c:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0014c7f:	d1 f8                	sar    eax,1
c0014c81:	01 d0                	add    eax,edx
c0014c83:	90                   	nop
c0014c84:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0014c87:	e8 3e 37 00 00       	call   c00183ca <HalQueryPerformanceCounter()>
c0014c8c:	a3 f0 c6 02 c0       	mov    ds:0xc002c6f0,eax
c0014c91:	89 c6                	mov    esi,eax
c0014c93:	89 d7                	mov    edi,edx
c0014c95:	2b 35 e0 c6 02 c0    	sub    esi,DWORD PTR ds:0xc002c6e0
c0014c9b:	a3 e0 c6 02 c0       	mov    ds:0xc002c6e0,eax
c0014ca0:	1b 3d e4 c6 02 c0    	sbb    edi,DWORD PTR ds:0xc002c6e4
c0014ca6:	89 35 e8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6e8,esi
c0014cac:	89 15 f4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6f4,edx
c0014cb2:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0014cb8:	89 15 e4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6e4,edx
c0014cbe:	89 3d ec c6 02 c0    	mov    DWORD PTR ds:0xc002c6ec,edi
c0014cc4:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c0014cc7:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c0014cca:	01 c6                	add    esi,eax
c0014ccc:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c0014ccf:	11 d7                	adc    edi,edx
c0014cd1:	83 ec 0c             	sub    esp,0xc
c0014cd4:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c0014cd7:	53                   	push   ebx
c0014cd8:	e8 9a b5 fe ff       	call   c0000277 <switchToThreadASM>
c0014cdd:	0f 20 c0             	mov    eax,cr0
c0014ce0:	83 c8 08             	or     eax,0x8
c0014ce3:	0f 22 c0             	mov    cr0,eax
c0014ce6:	83 c4 10             	add    esp,0x10
c0014ce9:	5b                   	pop    ebx
c0014cea:	5e                   	pop    esi
c0014ceb:	5f                   	pop    edi
c0014cec:	c3                   	ret    
c0014ced:	8d 76 00             	lea    esi,[esi+0x0]
c0014cf0:	31 c0                	xor    eax,eax
c0014cf2:	eb 90                	jmp    c0014c84 <switchToThread(ThreadControlBlock*)+0x30>
c0014cf4:	5b                   	pop    ebx
c0014cf5:	c7 05 a8 c6 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002c6a8,0x1
c0014cff:	5e                   	pop    esi
c0014d00:	5f                   	pop    edi
c0014d01:	c3                   	ret    
c0014d02:	66 90                	xchg   ax,ax

c0014d04 <Process::addArgs(char**)>:
c0014d04:	57                   	push   edi
c0014d05:	56                   	push   esi
c0014d06:	53                   	push   ebx
c0014d07:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014d0b:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0014d0f:	85 f6                	test   esi,esi
c0014d11:	c7 87 16 05 00 00 00 00 00 00 	mov    DWORD PTR [edi+0x516],0x0
c0014d1b:	74 4f                	je     c0014d6c <Process::addArgs(char**)+0x68>
c0014d1d:	8b 06                	mov    eax,DWORD PTR [esi]
c0014d1f:	85 c0                	test   eax,eax
c0014d21:	74 49                	je     c0014d6c <Process::addArgs(char**)+0x68>
c0014d23:	31 db                	xor    ebx,ebx
c0014d25:	8d 76 00             	lea    esi,[esi+0x0]
c0014d28:	83 ec 0c             	sub    esp,0xc
c0014d2b:	50                   	push   eax
c0014d2c:	e8 4f b8 fe ff       	call   c0000580 <strlen>
c0014d31:	83 c0 01             	add    eax,0x1
c0014d34:	89 04 24             	mov    DWORD PTR [esp],eax
c0014d37:	e8 94 9b ff ff       	call   c000e8d0 <malloc>
c0014d3c:	89 84 9f 1a 05 00 00 	mov    DWORD PTR [edi+ebx*4+0x51a],eax
c0014d43:	5a                   	pop    edx
c0014d44:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c0014d47:	83 c3 01             	add    ebx,0x1
c0014d4a:	59                   	pop    ecx
c0014d4b:	52                   	push   edx
c0014d4c:	50                   	push   eax
c0014d4d:	e8 fe b8 fe ff       	call   c0000650 <strcpy>
c0014d52:	8b 8f 16 05 00 00    	mov    ecx,DWORD PTR [edi+0x516]
c0014d58:	83 c4 10             	add    esp,0x10
c0014d5b:	83 c1 01             	add    ecx,0x1
c0014d5e:	89 8f 16 05 00 00    	mov    DWORD PTR [edi+0x516],ecx
c0014d64:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c0014d67:	85 c0                	test   eax,eax
c0014d69:	75 bd                	jne    c0014d28 <Process::addArgs(char**)+0x24>
c0014d6b:	90                   	nop
c0014d6c:	5b                   	pop    ebx
c0014d6d:	5e                   	pop    esi
c0014d6e:	5f                   	pop    edi
c0014d6f:	c3                   	ret    

c0014d70 <Process::Process(char const*, Process*, char**)>:
c0014d70:	56                   	push   esi
c0014d71:	53                   	push   ebx
c0014d72:	83 ec 14             	sub    esp,0x14
c0014d75:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014d79:	05 0c 02 00 00       	add    eax,0x20c
c0014d7e:	bb 07 00 00 00       	mov    ebx,0x7
c0014d83:	89 c6                	mov    esi,eax
c0014d85:	8d 76 00             	lea    esi,[esi+0x0]
c0014d88:	85 db                	test   ebx,ebx
c0014d8a:	78 14                	js     c0014da0 <Process::Process(char const*, Process*, char**)+0x30>
c0014d8c:	83 ec 0c             	sub    esp,0xc
c0014d8f:	56                   	push   esi
c0014d90:	e8 8b b5 00 00       	call   c0020320 <ThreadControlBlock::ThreadControlBlock()>
c0014d95:	83 c4 10             	add    esp,0x10
c0014d98:	83 c6 5f             	add    esi,0x5f
c0014d9b:	83 eb 01             	sub    ebx,0x1
c0014d9e:	eb e8                	jmp    c0014d88 <Process::Process(char const*, Process*, char**)+0x18>
c0014da0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014da4:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0014dab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014daf:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0014db6:	83 ec 0c             	sub    esp,0xc
c0014db9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014dbd:	e8 a2 8d ff ff       	call   c000db64 <KeNewProcessEnv(Process*)>
c0014dc2:	83 c4 10             	add    esp,0x10
c0014dc5:	89 c2                	mov    edx,eax
c0014dc7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014dcb:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0014dd1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014dd5:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0014dde:	a1 fc 41 02 c0       	mov    eax,ds:0xc00241fc
c0014de3:	8d 50 01             	lea    edx,[eax+0x1]
c0014de6:	89 15 fc 41 02 c0    	mov    DWORD PTR ds:0xc00241fc,edx
c0014dec:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014df0:	89 02                	mov    DWORD PTR [edx],eax
c0014df2:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c0014dfa:	83 ec 0c             	sub    esp,0xc
c0014dfd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014e01:	e8 ca 9a ff ff       	call   c000e8d0 <malloc>
c0014e06:	83 c4 10             	add    esp,0x10
c0014e09:	89 c3                	mov    ebx,eax
c0014e0b:	83 ec 08             	sub    esp,0x8
c0014e0e:	6a 00                	push   0x0
c0014e10:	53                   	push   ebx
c0014e11:	e8 98 db ff ff       	call   c00129ae <VAS::VAS(bool)>
c0014e16:	83 c4 10             	add    esp,0x10
c0014e19:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014e1d:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0014e23:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014e27:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0014e31:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014e35:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0014e39:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0014e3f:	e8 87 ae ff ff       	call   c000fccb <KeInitSignals()>
c0014e44:	89 c2                	mov    edx,eax
c0014e46:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014e4a:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0014e50:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014e54:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014e5a:	85 c0                	test   eax,eax
c0014e5c:	74 42                	je     c0014ea0 <Process::Process(char const*, Process*, char**)+0x130>
c0014e5e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014e62:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014e68:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0014e6e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014e72:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0014e78:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014e7c:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014e82:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0014e88:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014e8c:	05 0c 01 00 00       	add    eax,0x10c
c0014e91:	83 ec 08             	sub    esp,0x8
c0014e94:	52                   	push   edx
c0014e95:	50                   	push   eax
c0014e96:	e8 b5 b7 fe ff       	call   c0000650 <strcpy>
c0014e9b:	83 c4 10             	add    esp,0x10
c0014e9e:	eb 64                	jmp    c0014f04 <Process::Process(char const*, Process*, char**)+0x194>
c0014ea0:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c0014ea8:	83 ec 0c             	sub    esp,0xc
c0014eab:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014eaf:	e8 1c 9a ff ff       	call   c000e8d0 <malloc>
c0014eb4:	83 c4 10             	add    esp,0x10
c0014eb7:	89 c3                	mov    ebx,eax
c0014eb9:	83 ec 08             	sub    esp,0x8
c0014ebc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014ec0:	53                   	push   ebx
c0014ec1:	e8 b8 c6 ff ff       	call   c001157e <VgaText::VgaText(char const*)>
c0014ec6:	83 c4 10             	add    esp,0x10
c0014ec9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014ecd:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0014ed3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014ed7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014edd:	83 ec 0c             	sub    esp,0xc
c0014ee0:	50                   	push   eax
c0014ee1:	e8 46 bf ff ff       	call   c0010e2c <addToTerminalCycle(VgaText*)>
c0014ee6:	83 c4 10             	add    esp,0x10
c0014ee9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014eed:	05 0c 01 00 00       	add    eax,0x10c
c0014ef2:	83 ec 08             	sub    esp,0x8
c0014ef5:	68 33 2a 02 c0       	push   0xc0022a33
c0014efa:	50                   	push   eax
c0014efb:	e8 50 b7 fe ff       	call   c0000650 <strcpy>
c0014f00:	83 c4 10             	add    esp,0x10
c0014f03:	90                   	nop
c0014f04:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014f08:	83 c0 0c             	add    eax,0xc
c0014f0b:	83 ec 08             	sub    esp,0x8
c0014f0e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014f12:	50                   	push   eax
c0014f13:	e8 38 b7 fe ff       	call   c0000650 <strcpy>
c0014f18:	83 c4 10             	add    esp,0x10
c0014f1b:	83 ec 08             	sub    esp,0x8
c0014f1e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0014f22:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014f26:	e8 d9 fd ff ff       	call   c0014d04 <Process::addArgs(char**)>
c0014f2b:	83 c4 10             	add    esp,0x10
c0014f2e:	83 ec 08             	sub    esp,0x8
c0014f31:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014f35:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014f39:	e8 c6 ec ff ff       	call   c0013c04 <Thr::loadProgramIntoMemory(Process*, char const*)>
c0014f3e:	83 c4 10             	add    esp,0x10
c0014f41:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0014f45:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0014f49:	83 f0 01             	xor    eax,0x1
c0014f4c:	88 c2                	mov    dl,al
c0014f4e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014f52:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c0014f58:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0014f5d:	83 ec 04             	sub    esp,0x4
c0014f60:	50                   	push   eax
c0014f61:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014f65:	68 8c 2a 02 c0       	push   0xc0022a8c
c0014f6a:	e8 df 1f ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0014f6f:	83 c4 10             	add    esp,0x10
c0014f72:	90                   	nop
c0014f73:	83 c4 14             	add    esp,0x14
c0014f76:	5b                   	pop    ebx
c0014f77:	5e                   	pop    esi
c0014f78:	c3                   	ret    
c0014f79:	90                   	nop
c0014f7a:	66 90                	xchg   ax,ax

c0014f7c <Process::Process(bool, char const*, Process*, char**)>:
c0014f7c:	56                   	push   esi
c0014f7d:	53                   	push   ebx
c0014f7e:	83 ec 24             	sub    esp,0x24
c0014f81:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0014f85:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0014f89:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014f8d:	05 0c 02 00 00       	add    eax,0x20c
c0014f92:	bb 07 00 00 00       	mov    ebx,0x7
c0014f97:	89 c6                	mov    esi,eax
c0014f99:	8d 76 00             	lea    esi,[esi+0x0]
c0014f9c:	85 db                	test   ebx,ebx
c0014f9e:	78 14                	js     c0014fb4 <Process::Process(bool, char const*, Process*, char**)+0x38>
c0014fa0:	83 ec 0c             	sub    esp,0xc
c0014fa3:	56                   	push   esi
c0014fa4:	e8 77 b3 00 00       	call   c0020320 <ThreadControlBlock::ThreadControlBlock()>
c0014fa9:	83 c4 10             	add    esp,0x10
c0014fac:	83 c6 5f             	add    esi,0x5f
c0014faf:	83 eb 01             	sub    ebx,0x1
c0014fb2:	eb e8                	jmp    c0014f9c <Process::Process(bool, char const*, Process*, char**)+0x20>
c0014fb4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014fb8:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0014fbf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014fc3:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0014fca:	83 ec 0c             	sub    esp,0xc
c0014fcd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0014fd1:	e8 8e 8b ff ff       	call   c000db64 <KeNewProcessEnv(Process*)>
c0014fd6:	83 c4 10             	add    esp,0x10
c0014fd9:	89 c2                	mov    edx,eax
c0014fdb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014fdf:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0014fe5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014fe9:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0014ff2:	a1 fc 41 02 c0       	mov    eax,ds:0xc00241fc
c0014ff7:	8d 50 01             	lea    edx,[eax+0x1]
c0014ffa:	89 15 fc 41 02 c0    	mov    DWORD PTR ds:0xc00241fc,edx
c0015000:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0015004:	89 02                	mov    DWORD PTR [edx],eax
c0015006:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c001500e:	83 ec 0c             	sub    esp,0xc
c0015011:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0015015:	e8 b6 98 ff ff       	call   c000e8d0 <malloc>
c001501a:	83 c4 10             	add    esp,0x10
c001501d:	89 c3                	mov    ebx,eax
c001501f:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0015024:	83 ec 08             	sub    esp,0x8
c0015027:	50                   	push   eax
c0015028:	53                   	push   ebx
c0015029:	e8 80 d9 ff ff       	call   c00129ae <VAS::VAS(bool)>
c001502e:	83 c4 10             	add    esp,0x10
c0015031:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015035:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c001503b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001503f:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0015049:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001504d:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0015051:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0015057:	e8 6f ac ff ff       	call   c000fccb <KeInitSignals()>
c001505c:	89 c2                	mov    edx,eax
c001505e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015062:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0015068:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001506c:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015072:	85 c0                	test   eax,eax
c0015074:	74 42                	je     c00150b8 <Process::Process(bool, char const*, Process*, char**)+0x13c>
c0015076:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001507a:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015080:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0015086:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001508a:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0015090:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015094:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001509a:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00150a0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00150a4:	05 0c 01 00 00       	add    eax,0x10c
c00150a9:	83 ec 08             	sub    esp,0x8
c00150ac:	52                   	push   edx
c00150ad:	50                   	push   eax
c00150ae:	e8 9d b5 fe ff       	call   c0000650 <strcpy>
c00150b3:	83 c4 10             	add    esp,0x10
c00150b6:	eb 64                	jmp    c001511c <Process::Process(bool, char const*, Process*, char**)+0x1a0>
c00150b8:	c7 44 24 18 84 01 00 00 	mov    DWORD PTR [esp+0x18],0x184
c00150c0:	83 ec 0c             	sub    esp,0xc
c00150c3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00150c7:	e8 04 98 ff ff       	call   c000e8d0 <malloc>
c00150cc:	83 c4 10             	add    esp,0x10
c00150cf:	89 c3                	mov    ebx,eax
c00150d1:	83 ec 08             	sub    esp,0x8
c00150d4:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00150d8:	53                   	push   ebx
c00150d9:	e8 a0 c4 ff ff       	call   c001157e <VgaText::VgaText(char const*)>
c00150de:	83 c4 10             	add    esp,0x10
c00150e1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00150e5:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c00150eb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00150ef:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00150f5:	83 ec 0c             	sub    esp,0xc
c00150f8:	50                   	push   eax
c00150f9:	e8 2e bd ff ff       	call   c0010e2c <addToTerminalCycle(VgaText*)>
c00150fe:	83 c4 10             	add    esp,0x10
c0015101:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015105:	05 0c 01 00 00       	add    eax,0x10c
c001510a:	83 ec 08             	sub    esp,0x8
c001510d:	68 33 2a 02 c0       	push   0xc0022a33
c0015112:	50                   	push   eax
c0015113:	e8 38 b5 fe ff       	call   c0000650 <strcpy>
c0015118:	83 c4 10             	add    esp,0x10
c001511b:	90                   	nop
c001511c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015120:	83 c0 0c             	add    eax,0xc
c0015123:	83 ec 08             	sub    esp,0x8
c0015126:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001512a:	50                   	push   eax
c001512b:	e8 20 b5 fe ff       	call   c0000650 <strcpy>
c0015130:	83 c4 10             	add    esp,0x10
c0015133:	83 ec 08             	sub    esp,0x8
c0015136:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001513a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001513e:	e8 c1 fb ff ff       	call   c0014d04 <Process::addArgs(char**)>
c0015143:	83 c4 10             	add    esp,0x10
c0015146:	90                   	nop
c0015147:	83 c4 24             	add    esp,0x24
c001514a:	5b                   	pop    ebx
c001514b:	5e                   	pop    esi
c001514c:	c3                   	ret    
c001514d:	8d 76 00             	lea    esi,[esi+0x0]

c0015150 <taskStartupFunction>:
c0015150:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015155:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c0015158:	c3                   	ret    
c0015159:	8d 76 00             	lea    esi,[esi+0x0]

c001515c <KeDisablePreemption()>:
c001515c:	a1 8c c6 02 c0       	mov    eax,ds:0xc002c68c
c0015161:	85 c0                	test   eax,eax
c0015163:	75 13                	jne    c0015178 <KeDisablePreemption()+0x1c>
c0015165:	8a 15 74 9d 02 c0    	mov    dl,BYTE PTR ds:0xc0029d74
c001516b:	c6 05 74 9d 02 c0 00 	mov    BYTE PTR ds:0xc0029d74,0x0
c0015172:	88 15 88 c6 02 c0    	mov    BYTE PTR ds:0xc002c688,dl
c0015178:	83 c0 01             	add    eax,0x1
c001517b:	a3 8c c6 02 c0       	mov    ds:0xc002c68c,eax
c0015180:	c3                   	ret    
c0015181:	8d 76 00             	lea    esi,[esi+0x0]

c0015184 <KeRestorePreemption()>:
c0015184:	a1 8c c6 02 c0       	mov    eax,ds:0xc002c68c
c0015189:	83 e8 01             	sub    eax,0x1
c001518c:	a3 8c c6 02 c0       	mov    ds:0xc002c68c,eax
c0015191:	75 0d                	jne    c00151a0 <KeRestorePreemption()+0x1c>
c0015193:	a0 88 c6 02 c0       	mov    al,ds:0xc002c688
c0015198:	a2 74 9d 02 c0       	mov    ds:0xc0029d74,al
c001519d:	8d 76 00             	lea    esi,[esi+0x0]
c00151a0:	c3                   	ret    
c00151a1:	90                   	nop
c00151a2:	66 90                	xchg   ax,ax

c00151a4 <Process::createThread(void (*)(void*), void*, int)>:
c00151a4:	57                   	push   edi
c00151a5:	31 c9                	xor    ecx,ecx
c00151a7:	56                   	push   esi
c00151a8:	53                   	push   ebx
c00151a9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00151ad:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c00151b4:	89 f2                	mov    edx,esi
c00151b6:	66 90                	xchg   ax,ax
c00151b8:	0f b7 c2             	movzx  eax,dx
c00151bb:	80 e2 01             	and    dl,0x1
c00151be:	74 14                	je     c00151d4 <Process::createThread(void (*)(void*), void*, int)+0x30>
c00151c0:	d1 f8                	sar    eax,1
c00151c2:	83 c1 01             	add    ecx,0x1
c00151c5:	83 f9 10             	cmp    ecx,0x10
c00151c8:	89 c2                	mov    edx,eax
c00151ca:	75 ec                	jne    c00151b8 <Process::createThread(void (*)(void*), void*, int)+0x14>
c00151cc:	31 db                	xor    ebx,ebx
c00151ce:	89 d8                	mov    eax,ebx
c00151d0:	5b                   	pop    ebx
c00151d1:	5e                   	pop    esi
c00151d2:	5f                   	pop    edi
c00151d3:	c3                   	ret    
c00151d4:	b8 01 00 00 00       	mov    eax,0x1
c00151d9:	d3 e0                	shl    eax,cl
c00151db:	09 c6                	or     esi,eax
c00151dd:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c00151e4:	8d 04 49             	lea    eax,[ecx+ecx*2]
c00151e7:	c1 e0 05             	shl    eax,0x5
c00151ea:	29 c8                	sub    eax,ecx
c00151ec:	01 d8                	add    eax,ebx
c00151ee:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c00151f5:	75 0d                	jne    c0015204 <Process::createThread(void (*)(void*), void*, int)+0x60>
c00151f7:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c0015201:	8d 76 00             	lea    esi,[esi+0x0]
c0015204:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c001520a:	8d 34 49             	lea    esi,[ecx+ecx*2]
c001520d:	83 ec 0c             	sub    esp,0xc
c0015210:	c1 e6 05             	shl    esi,0x5
c0015213:	29 ce                	sub    esi,ecx
c0015215:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0015218:	8d 04 33             	lea    eax,[ebx+esi*1]
c001521b:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c0015221:	8d b8 00 02 00 00    	lea    edi,[eax+0x200]
c0015227:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c001522d:	8d 9c 33 0c 02 00 00 	lea    ebx,[ebx+esi*1+0x20c]
c0015234:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c001523a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001523e:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c0015244:	89 ca                	mov    edx,ecx
c0015246:	f7 da                	neg    edx
c0015248:	c1 e2 15             	shl    edx,0x15
c001524b:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0015251:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0015257:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001525b:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0015265:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c001526b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001526f:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0015275:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001527f:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0015289:	68 00 01 00 00       	push   0x100
c001528e:	e8 3d 96 ff ff       	call   c000e8d0 <malloc>
c0015293:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c0015296:	58                   	pop    eax
c0015297:	5a                   	pop    edx
c0015298:	53                   	push   ebx
c0015299:	68 cc c6 02 c0       	push   0xc002c6cc
c001529e:	e8 29 ac 00 00       	call   c001fecc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00152a3:	83 c4 10             	add    esp,0x10
c00152a6:	89 d8                	mov    eax,ebx
c00152a8:	5b                   	pop    ebx
c00152a9:	5e                   	pop    esi
c00152aa:	5f                   	pop    edi
c00152ab:	c3                   	ret    

c00152ac <Process::createUserThread()>:
c00152ac:	83 ec 0c             	sub    esp,0xc
c00152af:	68 80 00 00 00       	push   0x80
c00152b4:	6a 00                	push   0x0
c00152b6:	68 fc 4b 01 c0       	push   0xc0014bfc
c00152bb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00152bf:	50                   	push   eax
c00152c0:	e8 df fe ff ff       	call   c00151a4 <Process::createThread(void (*)(void*), void*, int)>
c00152c5:	83 c4 1c             	add    esp,0x1c
c00152c8:	c3                   	ret    
c00152c9:	8d 76 00             	lea    esi,[esi+0x0]

c00152cc <setupMultitasking(void (*)())>:
c00152cc:	56                   	push   esi
c00152cd:	53                   	push   ebx
c00152ce:	83 ec 04             	sub    esp,0x4
c00152d1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00152d5:	eb 11                	jmp    c00152e8 <setupMultitasking(void (*)())+0x1c>
c00152d7:	90                   	nop
c00152d8:	83 ec 0c             	sub    esp,0xc
c00152db:	68 cc c6 02 c0       	push   0xc002c6cc
c00152e0:	e8 2b ab 00 00       	call   c001fe10 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00152e5:	83 c4 10             	add    esp,0x10
c00152e8:	83 ec 0c             	sub    esp,0xc
c00152eb:	68 cc c6 02 c0       	push   0xc002c6cc
c00152f0:	e8 f7 aa 00 00       	call   c001fdec <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00152f5:	83 c4 10             	add    esp,0x10
c00152f8:	84 c0                	test   al,al
c00152fa:	74 dc                	je     c00152d8 <setupMultitasking(void (*)())+0xc>
c00152fc:	83 ec 0c             	sub    esp,0xc
c00152ff:	68 24 07 00 00       	push   0x724
c0015304:	e8 c7 95 ff ff       	call   c000e8d0 <malloc>
c0015309:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0015310:	6a 00                	push   0x0
c0015312:	68 37 2a 02 c0       	push   0xc0022a37
c0015317:	6a 01                	push   0x1
c0015319:	50                   	push   eax
c001531a:	89 c3                	mov    ebx,eax
c001531c:	e8 5b fc ff ff       	call   c0014f7c <Process::Process(bool, char const*, Process*, char**)>
c0015321:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c0015327:	83 c4 14             	add    esp,0x14
c001532a:	89 1d d8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6d8,ebx
c0015330:	50                   	push   eax
c0015331:	e8 4b bd ff ff       	call   c0011081 <setActiveTerminal(VgaText*)>
c0015336:	66 8b 83 04 05 00 00 	mov    ax,WORD PTR [ebx+0x504]
c001533d:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c0015347:	83 c8 01             	or     eax,0x1
c001534a:	66 89 83 04 05 00 00 	mov    WORD PTR [ebx+0x504],ax
c0015351:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0015357:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001535a:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c0015364:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c001536a:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c0015374:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001537a:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0015384:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001538e:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0015394:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001539a:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c00153a4:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c00153ae:	c7 04 24 00 01 00 00 	mov    DWORD PTR [esp],0x100
c00153b5:	e8 16 95 ff ff       	call   c000e8d0 <malloc>
c00153ba:	89 83 14 02 00 00    	mov    DWORD PTR [ebx+0x214],eax
c00153c0:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c00153c6:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c00153cc:	5a                   	pop    edx
c00153cd:	59                   	pop    ecx
c00153ce:	68 33 2a 02 c0       	push   0xc0022a33
c00153d3:	50                   	push   eax
c00153d4:	e8 77 b2 fe ff       	call   c0000650 <strcpy>
c00153d9:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c00153e0:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c00153e4:	83 c4 14             	add    esp,0x14
c00153e7:	5b                   	pop    ebx
c00153e8:	5e                   	pop    esi
c00153e9:	e9 7b ae fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>
c00153ee:	66 90                	xchg   ax,ax

c00153f0 <schedule()>:
c00153f0:	8b 15 ac c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6ac
c00153f6:	85 d2                	test   edx,edx
c00153f8:	74 0e                	je     c0015408 <schedule()+0x18>
c00153fa:	c7 05 a8 c6 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002c6a8,0x1
c0015404:	c3                   	ret    
c0015405:	8d 76 00             	lea    esi,[esi+0x0]
c0015408:	53                   	push   ebx
c0015409:	83 ec 14             	sub    esp,0x14
c001540c:	68 cc c6 02 c0       	push   0xc002c6cc
c0015411:	e8 d6 a9 00 00       	call   c001fdec <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015416:	83 c4 10             	add    esp,0x10
c0015419:	84 c0                	test   al,al
c001541b:	75 3f                	jne    c001545c <schedule()+0x6c>
c001541d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015422:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0015425:	83 fa 01             	cmp    edx,0x1
c0015428:	74 3a                	je     c0015464 <schedule()+0x74>
c001542a:	66 90                	xchg   ax,ax
c001542c:	83 ec 0c             	sub    esp,0xc
c001542f:	68 cc c6 02 c0       	push   0xc002c6cc
c0015434:	e8 cf a9 00 00       	call   c001fe08 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015439:	c7 04 24 cc c6 02 c0 	mov    DWORD PTR [esp],0xc002c6cc
c0015440:	89 c3                	mov    ebx,eax
c0015442:	e8 c9 a9 00 00       	call   c001fe10 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015447:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001544e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015451:	e8 fe f7 ff ff       	call   c0014c54 <switchToThread(ThreadControlBlock*)>
c0015456:	83 c4 10             	add    esp,0x10
c0015459:	8d 76 00             	lea    esi,[esi+0x0]
c001545c:	83 c4 08             	add    esp,0x8
c001545f:	5b                   	pop    ebx
c0015460:	c3                   	ret    
c0015461:	8d 76 00             	lea    esi,[esi+0x0]
c0015464:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001546b:	83 ec 08             	sub    esp,0x8
c001546e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015473:	50                   	push   eax
c0015474:	68 cc c6 02 c0       	push   0xc002c6cc
c0015479:	e8 4e aa 00 00       	call   c001fecc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001547e:	83 c4 10             	add    esp,0x10
c0015481:	eb a9                	jmp    c001542c <schedule()+0x3c>
c0015483:	90                   	nop

c0015484 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0015484:	83 ec 0c             	sub    esp,0xc
c0015487:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001548c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015490:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0015493:	e8 58 ff ff ff       	call   c00153f0 <schedule()>
c0015498:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c001549d:	83 e8 01             	sub    eax,0x1
c00154a0:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c00154a5:	75 01                	jne    c00154a8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c00154a7:	fb                   	sti    
c00154a8:	83 c4 0c             	add    esp,0xc
c00154ab:	c3                   	ret    

c00154ac <blockTask(TaskState)>:
c00154ac:	83 ec 0c             	sub    esp,0xc
c00154af:	fa                   	cli    
c00154b0:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c00154b5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00154b9:	83 c0 01             	add    eax,0x1
c00154bc:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c00154c1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00154c6:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00154c9:	e8 22 ff ff ff       	call   c00153f0 <schedule()>
c00154ce:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c00154d3:	83 e8 01             	sub    eax,0x1
c00154d6:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c00154db:	75 03                	jne    c00154e0 <blockTask(TaskState)+0x34>
c00154dd:	fb                   	sti    
c00154de:	66 90                	xchg   ax,ax
c00154e0:	83 c4 0c             	add    esp,0xc
c00154e3:	c3                   	ret    

c00154e4 <waitTask(int, int*, int)>:
c00154e4:	83 ec 18             	sub    esp,0x18
c00154e7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00154ec:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00154f0:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c00154f3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00154f7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00154fc:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c00154ff:	6a 07                	push   0x7
c0015501:	e8 a6 ff ff ff       	call   c00154ac <blockTask(TaskState)>
c0015506:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001550b:	83 c4 10             	add    esp,0x10
c001550e:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c0015511:	85 d2                	test   edx,edx
c0015513:	74 0b                	je     c0015520 <waitTask(int, int*, int)+0x3c>
c0015515:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c0015518:	89 02                	mov    DWORD PTR [edx],eax
c001551a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001551f:	90                   	nop
c0015520:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0015523:	83 c4 0c             	add    esp,0xc
c0015526:	c3                   	ret    
c0015527:	90                   	nop

c0015528 <milliTenthSleepUntil(unsigned int)>:
c0015528:	83 ec 0c             	sub    esp,0xc
c001552b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001552f:	39 05 ec 97 02 c0    	cmp    DWORD PTR ds:0xc00297ec,eax
c0015535:	76 05                	jbe    c001553c <milliTenthSleepUntil(unsigned int)+0x14>
c0015537:	90                   	nop
c0015538:	83 c4 0c             	add    esp,0xc
c001553b:	c3                   	ret    
c001553c:	fa                   	cli    
c001553d:	8b 15 b0 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6b0
c0015543:	83 ec 08             	sub    esp,0x8
c0015546:	8b 0d ac c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6ac
c001554c:	83 c2 01             	add    edx,0x1
c001554f:	89 15 b0 c6 02 c0    	mov    DWORD PTR ds:0xc002c6b0,edx
c0015555:	83 c1 01             	add    ecx,0x1
c0015558:	89 0d ac c6 02 c0    	mov    DWORD PTR ds:0xc002c6ac,ecx
c001555e:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0015564:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c0015567:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001556c:	50                   	push   eax
c001556d:	68 c0 c6 02 c0       	push   0xc002c6c0
c0015572:	e8 55 a9 00 00       	call   c001fecc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015577:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001557e:	e8 29 ff ff ff       	call   c00154ac <blockTask(TaskState)>
c0015583:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c0015588:	83 c4 10             	add    esp,0x10
c001558b:	83 e8 01             	sub    eax,0x1
c001558e:	a3 ac c6 02 c0       	mov    ds:0xc002c6ac,eax
c0015593:	85 c0                	test   eax,eax
c0015595:	75 09                	jne    c00155a0 <milliTenthSleepUntil(unsigned int)+0x78>
c0015597:	a1 a8 c6 02 c0       	mov    eax,ds:0xc002c6a8
c001559c:	85 c0                	test   eax,eax
c001559e:	75 14                	jne    c00155b4 <milliTenthSleepUntil(unsigned int)+0x8c>
c00155a0:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c00155a5:	83 e8 01             	sub    eax,0x1
c00155a8:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c00155ad:	75 89                	jne    c0015538 <milliTenthSleepUntil(unsigned int)+0x10>
c00155af:	fb                   	sti    
c00155b0:	83 c4 0c             	add    esp,0xc
c00155b3:	c3                   	ret    
c00155b4:	c7 05 a8 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6a8,0x0
c00155be:	e8 2d fe ff ff       	call   c00153f0 <schedule()>
c00155c3:	eb db                	jmp    c00155a0 <milliTenthSleepUntil(unsigned int)+0x78>
c00155c5:	8d 76 00             	lea    esi,[esi+0x0]

c00155c8 <milliTenthSleep(unsigned int)>:
c00155c8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00155cc:	a1 ec 97 02 c0       	mov    eax,ds:0xc00297ec
c00155d1:	01 c2                	add    edx,eax
c00155d3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00155d7:	e9 4c ff ff ff       	jmp    c0015528 <milliTenthSleepUntil(unsigned int)>

c00155dc <sleep(unsigned int)>:
c00155dc:	69 44 24 04 10 27 00 00 	imul   eax,DWORD PTR [esp+0x4],0x2710
c00155e4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00155e8:	eb de                	jmp    c00155c8 <milliTenthSleep(unsigned int)>
c00155ea:	66 90                	xchg   ax,ax

c00155ec <taskReturned>:
c00155ec:	83 ec 18             	sub    esp,0x18
c00155ef:	68 b8 2a 02 c0       	push   0xc0022ab8
c00155f4:	e8 2d 96 ff ff       	call   c000ec26 <KePanic(char const*)>
c00155f9:	83 c4 10             	add    esp,0x10
c00155fc:	83 ec 0c             	sub    esp,0xc
c00155ff:	6a 02                	push   0x2
c0015601:	e8 a6 fe ff ff       	call   c00154ac <blockTask(TaskState)>
c0015606:	fa                   	cli    
c0015607:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c001560c:	83 c0 01             	add    eax,0x1
c001560f:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c0015614:	e8 d7 fd ff ff       	call   c00153f0 <schedule()>
c0015619:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c001561e:	83 c4 10             	add    esp,0x10
c0015621:	83 e8 01             	sub    eax,0x1
c0015624:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c0015629:	85 c0                	test   eax,eax
c001562b:	75 cf                	jne    c00155fc <taskReturned+0x10>
c001562d:	fb                   	sti    
c001562e:	eb cc                	jmp    c00155fc <taskReturned+0x10>

c0015630 <Thr::processFromPID(int)>:
c0015630:	57                   	push   edi
c0015631:	56                   	push   esi
c0015632:	53                   	push   ebx
c0015633:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015637:	fa                   	cli    
c0015638:	8b 0d b0 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6b0
c001563e:	83 ec 0c             	sub    esp,0xc
c0015641:	68 cc c6 02 c0       	push   0xc002c6cc
c0015646:	83 c1 01             	add    ecx,0x1
c0015649:	89 0d b0 c6 02 c0    	mov    DWORD PTR ds:0xc002c6b0,ecx
c001564f:	e8 b4 a7 00 00       	call   c001fe08 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015654:	83 c4 10             	add    esp,0x10
c0015657:	89 c7                	mov    edi,eax
c0015659:	eb 15                	jmp    c0015670 <Thr::processFromPID(int)+0x40>
c001565b:	90                   	nop
c001565c:	83 ec 0c             	sub    esp,0xc
c001565f:	68 cc c6 02 c0       	push   0xc002c6cc
c0015664:	e8 9f a7 00 00       	call   c001fe08 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015669:	83 c4 10             	add    esp,0x10
c001566c:	39 f8                	cmp    eax,edi
c001566e:	74 50                	je     c00156c0 <Thr::processFromPID(int)+0x90>
c0015670:	83 ec 0c             	sub    esp,0xc
c0015673:	68 cc c6 02 c0       	push   0xc002c6cc
c0015678:	e8 8b a7 00 00       	call   c001fe08 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001567d:	c7 04 24 cc c6 02 c0 	mov    DWORD PTR [esp],0xc002c6cc
c0015684:	89 c3                	mov    ebx,eax
c0015686:	e8 85 a7 00 00       	call   c001fe10 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001568b:	58                   	pop    eax
c001568c:	5a                   	pop    edx
c001568d:	53                   	push   ebx
c001568e:	68 cc c6 02 c0       	push   0xc002c6cc
c0015693:	e8 34 a8 00 00       	call   c001fecc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015698:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001569b:	83 c4 10             	add    esp,0x10
c001569e:	39 30                	cmp    DWORD PTR [eax],esi
c00156a0:	75 ba                	jne    c001565c <Thr::processFromPID(int)+0x2c>
c00156a2:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c00156a7:	83 e8 01             	sub    eax,0x1
c00156aa:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c00156af:	74 0b                	je     c00156bc <Thr::processFromPID(int)+0x8c>
c00156b1:	8d 76 00             	lea    esi,[esi+0x0]
c00156b4:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00156b7:	90                   	nop
c00156b8:	5b                   	pop    ebx
c00156b9:	5e                   	pop    esi
c00156ba:	5f                   	pop    edi
c00156bb:	c3                   	ret    
c00156bc:	fb                   	sti    
c00156bd:	eb f5                	jmp    c00156b4 <Thr::processFromPID(int)+0x84>
c00156bf:	90                   	nop
c00156c0:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c00156c5:	8d 50 ff             	lea    edx,[eax-0x1]
c00156c8:	31 c0                	xor    eax,eax
c00156ca:	89 15 b0 c6 02 c0    	mov    DWORD PTR ds:0xc002c6b0,edx
c00156d0:	85 d2                	test   edx,edx
c00156d2:	75 e4                	jne    c00156b8 <Thr::processFromPID(int)+0x88>
c00156d4:	fb                   	sti    
c00156d5:	5b                   	pop    ebx
c00156d6:	5e                   	pop    esi
c00156d7:	5f                   	pop    edi
c00156d8:	c3                   	ret    
c00156d9:	8d 76 00             	lea    esi,[esi+0x0]

c00156dc <unblockTask(ThreadControlBlock*)>:
c00156dc:	53                   	push   ebx
c00156dd:	83 ec 08             	sub    esp,0x8
c00156e0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00156e4:	fa                   	cli    
c00156e5:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c00156ea:	83 c0 01             	add    eax,0x1
c00156ed:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c00156f2:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00156f5:	85 c0                	test   eax,eax
c00156f7:	74 67                	je     c0015760 <unblockTask(ThreadControlBlock*)+0x84>
c00156f9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00156fc:	83 f8 01             	cmp    eax,0x1
c00156ff:	74 37                	je     c0015738 <unblockTask(ThreadControlBlock*)+0x5c>
c0015701:	83 ec 0c             	sub    esp,0xc
c0015704:	68 cc c6 02 c0       	push   0xc002c6cc
c0015709:	e8 fa a6 00 00       	call   c001fe08 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001570e:	83 c4 10             	add    esp,0x10
c0015711:	85 c0                	test   eax,eax
c0015713:	75 1b                	jne    c0015730 <unblockTask(ThreadControlBlock*)+0x54>
c0015715:	eb 5d                	jmp    c0015774 <unblockTask(ThreadControlBlock*)+0x98>
c0015717:	90                   	nop
c0015718:	83 ec 08             	sub    esp,0x8
c001571b:	50                   	push   eax
c001571c:	68 cc c6 02 c0       	push   0xc002c6cc
c0015721:	e8 ee ab 00 00       	call   c0020314 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0015726:	83 c4 10             	add    esp,0x10
c0015729:	85 c0                	test   eax,eax
c001572b:	74 47                	je     c0015774 <unblockTask(ThreadControlBlock*)+0x98>
c001572d:	8d 76 00             	lea    esi,[esi+0x0]
c0015730:	39 c3                	cmp    ebx,eax
c0015732:	75 e4                	jne    c0015718 <unblockTask(ThreadControlBlock*)+0x3c>
c0015734:	eb 12                	jmp    c0015748 <unblockTask(ThreadControlBlock*)+0x6c>
c0015736:	66 90                	xchg   ax,ax
c0015738:	83 ec 0c             	sub    esp,0xc
c001573b:	68 55 2a 02 c0       	push   0xc0022a55
c0015740:	e8 09 18 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0015745:	83 c4 10             	add    esp,0x10
c0015748:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c001574d:	83 e8 01             	sub    eax,0x1
c0015750:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c0015755:	75 01                	jne    c0015758 <unblockTask(ThreadControlBlock*)+0x7c>
c0015757:	fb                   	sti    
c0015758:	83 c4 08             	add    esp,0x8
c001575b:	5b                   	pop    ebx
c001575c:	c3                   	ret    
c001575d:	8d 76 00             	lea    esi,[esi+0x0]
c0015760:	83 ec 0c             	sub    esp,0xc
c0015763:	68 3e 2a 02 c0       	push   0xc0022a3e
c0015768:	e8 e1 17 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001576d:	83 c4 10             	add    esp,0x10
c0015770:	eb d6                	jmp    c0015748 <unblockTask(ThreadControlBlock*)+0x6c>
c0015772:	66 90                	xchg   ax,ax
c0015774:	83 ec 08             	sub    esp,0x8
c0015777:	53                   	push   ebx
c0015778:	68 cc c6 02 c0       	push   0xc002c6cc
c001577d:	e8 4a a7 00 00       	call   c001fecc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015782:	83 c4 10             	add    esp,0x10
c0015785:	eb c1                	jmp    c0015748 <unblockTask(ThreadControlBlock*)+0x6c>
c0015787:	90                   	nop

c0015788 <cleanupTerminatedTask(ThreadControlBlock*)>:
c0015788:	55                   	push   ebp
c0015789:	57                   	push   edi
c001578a:	56                   	push   esi
c001578b:	53                   	push   ebx
c001578c:	83 ec 1c             	sub    esp,0x1c
c001578f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0015793:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015796:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c001579c:	85 ed                	test   ebp,ebp
c001579e:	7e 28                	jle    c00157c8 <cleanupTerminatedTask(ThreadControlBlock*)+0x40>
c00157a0:	31 f6                	xor    esi,esi
c00157a2:	66 90                	xchg   ax,ax
c00157a4:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c00157ab:	83 ec 0c             	sub    esp,0xc
c00157ae:	83 c6 01             	add    esi,0x1
c00157b1:	57                   	push   edi
c00157b2:	e8 29 91 ff ff       	call   c000e8e0 <free>
c00157b7:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00157ba:	83 c4 10             	add    esp,0x10
c00157bd:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c00157c3:	7f df                	jg     c00157a4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c00157c5:	8d 76 00             	lea    esi,[esi+0x0]
c00157c8:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c00157d2:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00157d7:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c00157da:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c00157dd:	d3 c0                	rol    eax,cl
c00157df:	66 8b 8a 04 05 00 00 	mov    cx,WORD PTR [edx+0x504]
c00157e6:	21 c8                	and    eax,ecx
c00157e8:	66 89 82 04 05 00 00 	mov    WORD PTR [edx+0x504],ax
c00157ef:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00157f2:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c00157fa:	89 f7                	mov    edi,esi
c00157fc:	0f 85 72 01 00 00    	jne    c0015974 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c0015802:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c0015808:	85 ed                	test   ebp,ebp
c001580a:	74 1c                	je     c0015828 <cleanupTerminatedTask(ThreadControlBlock*)+0xa0>
c001580c:	83 ec 0c             	sub    esp,0xc
c001580f:	55                   	push   ebp
c0015810:	e8 6b 82 ff ff       	call   c000da80 <EnvVarContainer::~EnvVarContainer()>
c0015815:	59                   	pop    ecx
c0015816:	5e                   	pop    esi
c0015817:	6a 0c                	push   0xc
c0015819:	55                   	push   ebp
c001581a:	e8 44 6e ff ff       	call   c000c663 <operator delete(void*, unsigned long)>
c001581f:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0015822:	83 c4 10             	add    esp,0x10
c0015825:	89 f7                	mov    edi,esi
c0015827:	90                   	nop
c0015828:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c001582e:	85 c0                	test   eax,eax
c0015830:	0f 84 b2 00 00 00    	je     c00158e8 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c0015836:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c0015839:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001583d:	31 c9                	xor    ecx,ecx
c001583f:	eb 17                	jmp    c0015858 <cleanupTerminatedTask(ThreadControlBlock*)+0xd0>
c0015841:	8d 76 00             	lea    esi,[esi+0x0]
c0015844:	83 c1 01             	add    ecx,0x1
c0015847:	83 f9 10             	cmp    ecx,0x10
c001584a:	0f 84 98 00 00 00    	je     c00158e8 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c0015850:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0015856:	66 90                	xchg   ax,ax
c0015858:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c001585f:	d3 fa                	sar    edx,cl
c0015861:	80 e2 01             	and    dl,0x1
c0015864:	74 de                	je     c0015844 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0015866:	8d 14 49             	lea    edx,[ecx+ecx*2]
c0015869:	c1 e2 05             	shl    edx,0x5
c001586c:	29 ca                	sub    edx,ecx
c001586e:	01 d0                	add    eax,edx
c0015870:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0015876:	83 fd 07             	cmp    ebp,0x7
c0015879:	75 c9                	jne    c0015844 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c001587b:	05 40 02 00 00       	add    eax,0x240
c0015880:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c0015883:	83 fd ff             	cmp    ebp,0xffffffff
c0015886:	0f 8c f0 00 00 00    	jl     c001597c <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c001588c:	0f 84 ae 01 00 00    	je     c0015a40 <cleanupTerminatedTask(ThreadControlBlock*)+0x2b8>
c0015892:	85 ed                	test   ebp,ebp
c0015894:	0f 84 92 01 00 00    	je     c0015a2c <cleanupTerminatedTask(ThreadControlBlock*)+0x2a4>
c001589a:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001589c:	75 a6                	jne    c0015844 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c001589e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00158a2:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00158a8:	01 d0                	add    eax,edx
c00158aa:	66 90                	xchg   ax,ax
c00158ac:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00158b0:	83 ec 0c             	sub    esp,0xc
c00158b3:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c00158b9:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00158bc:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00158c2:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c00158c9:	50                   	push   eax
c00158ca:	e8 0d fe ff ff       	call   c00156dc <unblockTask(ThreadControlBlock*)>
c00158cf:	83 c4 10             	add    esp,0x10
c00158d2:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00158d5:	89 f7                	mov    edi,esi
c00158d7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00158db:	83 c1 01             	add    ecx,0x1
c00158de:	83 f9 10             	cmp    ecx,0x10
c00158e1:	0f 85 69 ff ff ff    	jne    c0015850 <cleanupTerminatedTask(ThreadControlBlock*)+0xc8>
c00158e7:	90                   	nop
c00158e8:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c00158ee:	85 c0                	test   eax,eax
c00158f0:	74 62                	je     c0015954 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c00158f2:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c00158f8:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c00158fe:	74 54                	je     c0015954 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c0015900:	83 ec 0c             	sub    esp,0xc
c0015903:	68 cc c6 02 c0       	push   0xc002c6cc
c0015908:	e8 fb a4 00 00       	call   c001fe08 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001590d:	c7 04 24 cc c6 02 c0 	mov    DWORD PTR [esp],0xc002c6cc
c0015914:	89 c7                	mov    edi,eax
c0015916:	e8 d1 a4 00 00       	call   c001fdec <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001591b:	83 c4 10             	add    esp,0x10
c001591e:	84 c0                	test   al,al
c0015920:	0f 84 ce 00 00 00    	je     c00159f4 <cleanupTerminatedTask(ThreadControlBlock*)+0x26c>
c0015926:	66 90                	xchg   ax,ax
c0015928:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001592b:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0015931:	85 d2                	test   edx,edx
c0015933:	74 0f                	je     c0015944 <cleanupTerminatedTask(ThreadControlBlock*)+0x1bc>
c0015935:	8b 02                	mov    eax,DWORD PTR [edx]
c0015937:	83 ec 0c             	sub    esp,0xc
c001593a:	52                   	push   edx
c001593b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001593e:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015941:	83 c4 10             	add    esp,0x10
c0015944:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c001594e:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c0015951:	8d 76 00             	lea    esi,[esi+0x0]
c0015954:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c001595a:	85 db                	test   ebx,ebx
c001595c:	74 16                	je     c0015974 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c001595e:	83 ec 0c             	sub    esp,0xc
c0015961:	53                   	push   ebx
c0015962:	e8 95 cb ff ff       	call   c00124fc <VAS::~VAS()>
c0015967:	58                   	pop    eax
c0015968:	5a                   	pop    edx
c0015969:	6a 14                	push   0x14
c001596b:	53                   	push   ebx
c001596c:	e8 f2 6c ff ff       	call   c000c663 <operator delete(void*, unsigned long)>
c0015971:	83 c4 10             	add    esp,0x10
c0015974:	83 c4 1c             	add    esp,0x1c
c0015977:	5b                   	pop    ebx
c0015978:	5e                   	pop    esi
c0015979:	5f                   	pop    edi
c001597a:	5d                   	pop    ebp
c001597b:	c3                   	ret    
c001597c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0015980:	83 ec 0c             	sub    esp,0xc
c0015983:	68 ec 2a 02 c0       	push   0xc0022aec
c0015988:	e8 99 92 ff ff       	call   c000ec26 <KePanic(char const*)>
c001598d:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0015990:	83 c4 10             	add    esp,0x10
c0015993:	89 f7                	mov    edi,esi
c0015995:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015999:	e9 a6 fe ff ff       	jmp    c0015844 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c001599e:	66 90                	xchg   ax,ax
c00159a0:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00159a6:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c00159ac:	75 1e                	jne    c00159cc <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c00159ae:	83 ec 0c             	sub    esp,0xc
c00159b1:	68 54 2b 02 c0       	push   0xc0022b54
c00159b6:	e8 93 15 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00159bb:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00159c2:	e8 e5 fa ff ff       	call   c00154ac <blockTask(TaskState)>
c00159c7:	83 c4 10             	add    esp,0x10
c00159ca:	66 90                	xchg   ax,ax
c00159cc:	83 ec 08             	sub    esp,0x8
c00159cf:	56                   	push   esi
c00159d0:	68 cc c6 02 c0       	push   0xc002c6cc
c00159d5:	e8 f2 a4 00 00       	call   c001fecc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00159da:	c7 04 24 cc c6 02 c0 	mov    DWORD PTR [esp],0xc002c6cc
c00159e1:	e8 22 a4 00 00       	call   c001fe08 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00159e6:	83 c4 10             	add    esp,0x10
c00159e9:	39 f8                	cmp    eax,edi
c00159eb:	0f 84 37 ff ff ff    	je     c0015928 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c00159f1:	8d 76 00             	lea    esi,[esi+0x0]
c00159f4:	83 ec 0c             	sub    esp,0xc
c00159f7:	68 cc c6 02 c0       	push   0xc002c6cc
c00159fc:	e8 07 a4 00 00       	call   c001fe08 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015a01:	c7 04 24 cc c6 02 c0 	mov    DWORD PTR [esp],0xc002c6cc
c0015a08:	89 c6                	mov    esi,eax
c0015a0a:	e8 01 a4 00 00       	call   c001fe10 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015a0f:	83 c4 10             	add    esp,0x10
c0015a12:	39 f3                	cmp    ebx,esi
c0015a14:	74 b6                	je     c00159cc <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0015a16:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c0015a19:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015a1c:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c0015a22:	75 a8                	jne    c00159cc <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0015a24:	e9 77 ff ff ff       	jmp    c00159a0 <cleanupTerminatedTask(ThreadControlBlock*)+0x218>
c0015a29:	8d 76 00             	lea    esi,[esi+0x0]
c0015a2c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0015a30:	83 ec 0c             	sub    esp,0xc
c0015a33:	68 20 2b 02 c0       	push   0xc0022b20
c0015a38:	e9 4b ff ff ff       	jmp    c0015988 <cleanupTerminatedTask(ThreadControlBlock*)+0x200>
c0015a3d:	8d 76 00             	lea    esi,[esi+0x0]
c0015a40:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0015a44:	8b 36                	mov    esi,DWORD PTR [esi]
c0015a46:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c0015a49:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015a4c:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c0015a52:	01 d7                	add    edi,edx
c0015a54:	89 f8                	mov    eax,edi
c0015a56:	e9 51 fe ff ff       	jmp    c00158ac <cleanupTerminatedTask(ThreadControlBlock*)+0x124>
c0015a5b:	90                   	nop

c0015a5c <cleanerTaskFunction(void*)>:
c0015a5c:	53                   	push   ebx
c0015a5d:	83 ec 08             	sub    esp,0x8
c0015a60:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0015a65:	83 e8 01             	sub    eax,0x1
c0015a68:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c0015a6d:	75 01                	jne    c0015a70 <cleanerTaskFunction(void*)+0x14>
c0015a6f:	fb                   	sti    
c0015a70:	fa                   	cli    
c0015a71:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0015a76:	80 3d 94 c6 02 c0 00 	cmp    BYTE PTR ds:0xc002c694,0x0
c0015a7d:	8d 50 01             	lea    edx,[eax+0x1]
c0015a80:	89 15 b0 c6 02 c0    	mov    DWORD PTR ds:0xc002c6b0,edx
c0015a86:	0f 84 c4 00 00 00    	je     c0015b50 <cleanerTaskFunction(void*)+0xf4>
c0015a8c:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c0015a91:	85 c0                	test   eax,eax
c0015a93:	75 03                	jne    c0015a98 <cleanerTaskFunction(void*)+0x3c>
c0015a95:	fb                   	sti    
c0015a96:	66 90                	xchg   ax,ax
c0015a98:	c6 05 94 c6 02 c0 00 	mov    BYTE PTR ds:0xc002c694,0x0
c0015a9f:	fa                   	cli    
c0015aa0:	8b 15 b0 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6b0
c0015aa6:	8b 0d ac c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6ac
c0015aac:	83 c2 01             	add    edx,0x1
c0015aaf:	89 15 b0 c6 02 c0    	mov    DWORD PTR ds:0xc002c6b0,edx
c0015ab5:	83 c1 01             	add    ecx,0x1
c0015ab8:	89 0d ac c6 02 c0    	mov    DWORD PTR ds:0xc002c6ac,ecx
c0015abe:	fa                   	cli    
c0015abf:	8b 1d b0 c6 02 c0    	mov    ebx,DWORD PTR ds:0xc002c6b0
c0015ac5:	83 c3 01             	add    ebx,0x1
c0015ac8:	89 1d b0 c6 02 c0    	mov    DWORD PTR ds:0xc002c6b0,ebx
c0015ace:	eb 28                	jmp    c0015af8 <cleanerTaskFunction(void*)+0x9c>
c0015ad0:	83 ec 0c             	sub    esp,0xc
c0015ad3:	68 b4 c6 02 c0       	push   0xc002c6b4
c0015ad8:	e8 2b a3 00 00       	call   c001fe08 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015add:	c7 04 24 b4 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6b4
c0015ae4:	89 c3                	mov    ebx,eax
c0015ae6:	e8 25 a3 00 00       	call   c001fe10 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015aeb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015aee:	e8 95 fc ff ff       	call   c0015788 <cleanupTerminatedTask(ThreadControlBlock*)>
c0015af3:	83 c4 10             	add    esp,0x10
c0015af6:	66 90                	xchg   ax,ax
c0015af8:	83 ec 0c             	sub    esp,0xc
c0015afb:	68 b4 c6 02 c0       	push   0xc002c6b4
c0015b00:	e8 e7 a2 00 00       	call   c001fdec <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015b05:	83 c4 10             	add    esp,0x10
c0015b08:	84 c0                	test   al,al
c0015b0a:	74 c4                	je     c0015ad0 <cleanerTaskFunction(void*)+0x74>
c0015b0c:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0015b11:	83 e8 01             	sub    eax,0x1
c0015b14:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c0015b19:	75 01                	jne    c0015b1c <cleanerTaskFunction(void*)+0xc0>
c0015b1b:	fb                   	sti    
c0015b1c:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c0015b21:	83 e8 01             	sub    eax,0x1
c0015b24:	a3 ac c6 02 c0       	mov    ds:0xc002c6ac,eax
c0015b29:	0f 85 31 ff ff ff    	jne    c0015a60 <cleanerTaskFunction(void*)+0x4>
c0015b2f:	a1 a8 c6 02 c0       	mov    eax,ds:0xc002c6a8
c0015b34:	85 c0                	test   eax,eax
c0015b36:	0f 84 24 ff ff ff    	je     c0015a60 <cleanerTaskFunction(void*)+0x4>
c0015b3c:	c7 05 a8 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6a8,0x0
c0015b46:	e8 a5 f8 ff ff       	call   c00153f0 <schedule()>
c0015b4b:	e9 10 ff ff ff       	jmp    c0015a60 <cleanerTaskFunction(void*)+0x4>
c0015b50:	83 ec 0c             	sub    esp,0xc
c0015b53:	6a 02                	push   0x2
c0015b55:	e8 2a f9 ff ff       	call   c0015484 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0015b5a:	83 c4 10             	add    esp,0x10
c0015b5d:	e9 36 ff ff ff       	jmp    c0015a98 <cleanerTaskFunction(void*)+0x3c>
c0015b62:	66 90                	xchg   ax,ax

c0015b64 <terminateTask(int)>:
c0015b64:	83 ec 14             	sub    esp,0x14
c0015b67:	fa                   	cli    
c0015b68:	8b 15 b0 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6b0
c0015b6e:	8b 0d ac c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6ac
c0015b74:	83 c2 01             	add    edx,0x1
c0015b77:	89 15 b0 c6 02 c0    	mov    DWORD PTR ds:0xc002c6b0,edx
c0015b7d:	83 c1 01             	add    ecx,0x1
c0015b80:	89 0d ac c6 02 c0    	mov    DWORD PTR ds:0xc002c6ac,ecx
c0015b86:	fa                   	cli    
c0015b87:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0015b8c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0015b90:	83 c0 01             	add    eax,0x1
c0015b93:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c0015b98:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015b9d:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c0015ba0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015ba5:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0015ba8:	50                   	push   eax
c0015ba9:	68 b4 c6 02 c0       	push   0xc002c6b4
c0015bae:	e8 19 a3 00 00       	call   c001fecc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015bb3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015bb8:	83 c4 10             	add    esp,0x10
c0015bbb:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0015bc2:	a1 90 c6 02 c0       	mov    eax,ds:0xc002c690
c0015bc7:	85 c0                	test   eax,eax
c0015bc9:	74 65                	je     c0015c30 <terminateTask(int)+0xcc>
c0015bcb:	c6 05 94 c6 02 c0 01 	mov    BYTE PTR ds:0xc002c694,0x1
c0015bd2:	83 ec 0c             	sub    esp,0xc
c0015bd5:	50                   	push   eax
c0015bd6:	e8 01 fb ff ff       	call   c00156dc <unblockTask(ThreadControlBlock*)>
c0015bdb:	83 c4 10             	add    esp,0x10
c0015bde:	66 90                	xchg   ax,ax
c0015be0:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0015be5:	83 e8 01             	sub    eax,0x1
c0015be8:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c0015bed:	75 01                	jne    c0015bf0 <terminateTask(int)+0x8c>
c0015bef:	fb                   	sti    
c0015bf0:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c0015bf5:	83 e8 01             	sub    eax,0x1
c0015bf8:	a3 ac c6 02 c0       	mov    ds:0xc002c6ac,eax
c0015bfd:	75 09                	jne    c0015c08 <terminateTask(int)+0xa4>
c0015bff:	83 3d a8 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6a8,0x0
c0015c06:	75 3c                	jne    c0015c44 <terminateTask(int)+0xe0>
c0015c08:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0015c0d:	83 e8 01             	sub    eax,0x1
c0015c10:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c0015c15:	75 01                	jne    c0015c18 <terminateTask(int)+0xb4>
c0015c17:	fb                   	sti    
c0015c18:	fa                   	cli    
c0015c19:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0015c1e:	83 c0 01             	add    eax,0x1
c0015c21:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c0015c26:	66 90                	xchg   ax,ax
c0015c28:	e8 c3 f7 ff ff       	call   c00153f0 <schedule()>
c0015c2d:	eb d9                	jmp    c0015c08 <terminateTask(int)+0xa4>
c0015c2f:	90                   	nop
c0015c30:	83 ec 0c             	sub    esp,0xc
c0015c33:	68 6c 2a 02 c0       	push   0xc0022a6c
c0015c38:	e8 11 13 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0015c3d:	83 c4 10             	add    esp,0x10
c0015c40:	eb 9e                	jmp    c0015be0 <terminateTask(int)+0x7c>
c0015c42:	66 90                	xchg   ax,ax
c0015c44:	c7 05 a8 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6a8,0x0
c0015c4e:	eb d8                	jmp    c0015c28 <terminateTask(int)+0xc4>

c0015c50 <Thr::terminateFromIRQ(int)>:
c0015c50:	83 ec 18             	sub    esp,0x18
c0015c53:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015c57:	50                   	push   eax
c0015c58:	e8 07 ff ff ff       	call   c0015b64 <terminateTask(int)>
c0015c5d:	8d 76 00             	lea    esi,[esi+0x0]

c0015c60 <__static_initialization_and_destruction_0(int, int)>:
c0015c60:	83 ec 0c             	sub    esp,0xc
c0015c63:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0015c68:	0f 85 8e 00 00 00    	jne    c0015cfc <__static_initialization_and_destruction_0(int, int)+0x9c>
c0015c6e:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0015c76:	0f 85 80 00 00 00    	jne    c0015cfc <__static_initialization_and_destruction_0(int, int)+0x9c>
c0015c7c:	83 ec 0c             	sub    esp,0xc
c0015c7f:	68 cc c6 02 c0       	push   0xc002c6cc
c0015c84:	e8 e3 a6 00 00       	call   c002036c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0015c89:	83 c4 10             	add    esp,0x10
c0015c8c:	83 ec 04             	sub    esp,0x4
c0015c8f:	68 40 3a 02 c0       	push   0xc0023a40
c0015c94:	68 cc c6 02 c0       	push   0xc002c6cc
c0015c99:	68 1c 03 02 c0       	push   0xc002031c
c0015c9e:	e8 70 69 ff ff       	call   c000c613 <__cxa_atexit>
c0015ca3:	83 c4 10             	add    esp,0x10
c0015ca6:	83 ec 0c             	sub    esp,0xc
c0015ca9:	68 c0 c6 02 c0       	push   0xc002c6c0
c0015cae:	e8 b9 a6 00 00       	call   c002036c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0015cb3:	83 c4 10             	add    esp,0x10
c0015cb6:	83 ec 04             	sub    esp,0x4
c0015cb9:	68 40 3a 02 c0       	push   0xc0023a40
c0015cbe:	68 c0 c6 02 c0       	push   0xc002c6c0
c0015cc3:	68 1c 03 02 c0       	push   0xc002031c
c0015cc8:	e8 46 69 ff ff       	call   c000c613 <__cxa_atexit>
c0015ccd:	83 c4 10             	add    esp,0x10
c0015cd0:	83 ec 0c             	sub    esp,0xc
c0015cd3:	68 b4 c6 02 c0       	push   0xc002c6b4
c0015cd8:	e8 8f a6 00 00       	call   c002036c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0015cdd:	83 c4 10             	add    esp,0x10
c0015ce0:	83 ec 04             	sub    esp,0x4
c0015ce3:	68 40 3a 02 c0       	push   0xc0023a40
c0015ce8:	68 b4 c6 02 c0       	push   0xc002c6b4
c0015ced:	68 1c 03 02 c0       	push   0xc002031c
c0015cf2:	e8 1c 69 ff ff       	call   c000c613 <__cxa_atexit>
c0015cf7:	83 c4 10             	add    esp,0x10
c0015cfa:	66 90                	xchg   ax,ax
c0015cfc:	90                   	nop
c0015cfd:	83 c4 0c             	add    esp,0xc
c0015d00:	c3                   	ret    
c0015d01:	8d 76 00             	lea    esi,[esi+0x0]

c0015d04 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0015d04:	83 ec 0c             	sub    esp,0xc
c0015d07:	83 ec 08             	sub    esp,0x8
c0015d0a:	68 ff ff 00 00       	push   0xffff
c0015d0f:	6a 01                	push   0x1
c0015d11:	e8 4a ff ff ff       	call   c0015c60 <__static_initialization_and_destruction_0(int, int)>
c0015d16:	83 c4 10             	add    esp,0x10
c0015d19:	83 c4 0c             	add    esp,0xc
c0015d1c:	c3                   	ret    

c0015d1d <Vm::inbv(unsigned short)>:
c0015d1d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015d21:	66 81 fa fe fe       	cmp    dx,0xfefe
c0015d26:	75 06                	jne    c0015d2e <Vm::inbv(unsigned short)+0x11>
c0015d28:	a0 10 c7 02 c0       	mov    al,ds:0xc002c710
c0015d2d:	c3                   	ret    
c0015d2e:	ec                   	in     al,dx
c0015d2f:	c3                   	ret    

c0015d30 <Vm::outbv(unsigned short, unsigned char)>:
c0015d30:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015d34:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015d38:	66 81 fa fe fe       	cmp    dx,0xfefe
c0015d3d:	75 25                	jne    c0015d64 <Vm::outbv(unsigned short, unsigned char)+0x34>
c0015d3f:	8b 0d 10 c7 02 c0    	mov    ecx,DWORD PTR ds:0xc002c710
c0015d45:	88 81 20 c7 02 c0    	mov    BYTE PTR [ecx-0x3ffd38e0],al
c0015d4b:	8d 51 01             	lea    edx,[ecx+0x1]
c0015d4e:	89 15 10 c7 02 c0    	mov    DWORD PTR ds:0xc002c710,edx
c0015d54:	83 fa 20             	cmp    edx,0x20
c0015d57:	75 0c                	jne    c0015d65 <Vm::outbv(unsigned short, unsigned char)+0x35>
c0015d59:	c7 05 10 c7 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc002c710,0x1f
c0015d63:	c3                   	ret    
c0015d64:	ee                   	out    dx,al
c0015d65:	c3                   	ret    

c0015d66 <Vm::realToLinear(unsigned short, unsigned short)>:
c0015d66:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0015d6b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0015d70:	c1 e0 04             	shl    eax,0x4
c0015d73:	01 d0                	add    eax,edx
c0015d75:	c3                   	ret    

c0015d76 <Vm::getSegment(unsigned int)>:
c0015d76:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015d7a:	c1 e8 10             	shr    eax,0x10
c0015d7d:	c3                   	ret    

c0015d7e <Vm::getOffset(unsigned int)>:
c0015d7e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015d82:	c3                   	ret    

c0015d83 <Vm::mainloop2()>:
c0015d83:	83 ec 18             	sub    esp,0x18
c0015d86:	fa                   	cli    
c0015d87:	6a 02                	push   0x2
c0015d89:	ff 05 b0 c6 02 c0    	inc    DWORD PTR ds:0xc002c6b0
c0015d8f:	c6 05 09 c7 02 c0 01 	mov    BYTE PTR ds:0xc002c709,0x1
c0015d96:	e8 e9 f6 ff ff       	call   c0015484 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0015d9b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015da0:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0015da4:	52                   	push   edx
c0015da5:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c0015da9:	52                   	push   edx
c0015daa:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c0015dae:	52                   	push   edx
c0015daf:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c0015db3:	50                   	push   eax
c0015db4:	e8 56 a4 fe ff       	call   c000020f <goToVM86>
c0015db9:	83 c4 2c             	add    esp,0x2c
c0015dbc:	c3                   	ret    

c0015dbd <Vm::mainVm8086Loop(void*)>:
c0015dbd:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0015dc2:	48                   	dec    eax
c0015dc3:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c0015dc8:	75 01                	jne    c0015dcb <Vm::mainVm8086Loop(void*)+0xe>
c0015dca:	fb                   	sti    
c0015dcb:	eb b6                	jmp    c0015d83 <Vm::mainloop2()>

c0015dcd <Vm::mainloop3(unsigned long)>:
c0015dcd:	83 ec 18             	sub    esp,0x18
c0015dd0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015dd4:	fa                   	cli    
c0015dd5:	6a 02                	push   0x2
c0015dd7:	ff 05 b0 c6 02 c0    	inc    DWORD PTR ds:0xc002c6b0
c0015ddd:	c6 05 08 c7 02 c0 01 	mov    BYTE PTR ds:0xc002c708,0x1
c0015de4:	a3 04 c7 02 c0       	mov    ds:0xc002c704,eax
c0015de9:	e8 96 f6 ff ff       	call   c0015484 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0015dee:	83 c4 1c             	add    esp,0x1c
c0015df1:	eb 90                	jmp    c0015d83 <Vm::mainloop2()>

c0015df3 <Vm::initialise8086()>:
c0015df3:	83 ec 0c             	sub    esp,0xc
c0015df6:	68 80 00 00 00       	push   0x80
c0015dfb:	6a 00                	push   0x0
c0015dfd:	68 bd 5d 01 c0       	push   0xc0015dbd
c0015e02:	ff 35 d8 c6 02 c0    	push   DWORD PTR ds:0xc002c6d8
c0015e08:	e8 97 f3 ff ff       	call   c00151a4 <Process::createThread(void (*)(void*), void*, int)>
c0015e0d:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0015e14:	68 10 01 00 00       	push   0x110
c0015e19:	6a 00                	push   0x0
c0015e1b:	6a 00                	push   0x0
c0015e1d:	a3 0c c7 02 c0       	mov    ds:0xc002c70c,eax
c0015e22:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0015e27:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0015e2d:	e8 32 ca ff ff       	call   c0012864 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0015e32:	83 c4 2c             	add    esp,0x2c
c0015e35:	c3                   	ret    

c0015e36 <Vm::resetConventionalMemory8086()>:
c0015e36:	c3                   	ret    

c0015e37 <Vm::finish8086()>:
c0015e37:	53                   	push   ebx
c0015e38:	83 ec 08             	sub    esp,0x8
c0015e3b:	fa                   	cli    
c0015e3c:	ff 05 b0 c6 02 c0    	inc    DWORD PTR ds:0xc002c6b0
c0015e42:	80 3d 08 c7 02 c0 00 	cmp    BYTE PTR ds:0xc002c708,0x0
c0015e49:	75 15                	jne    c0015e60 <Vm::finish8086()+0x29>
c0015e4b:	e8 a0 f5 ff ff       	call   c00153f0 <schedule()>
c0015e50:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0015e55:	48                   	dec    eax
c0015e56:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c0015e5b:	75 de                	jne    c0015e3b <Vm::finish8086()+0x4>
c0015e5d:	fb                   	sti    
c0015e5e:	eb db                	jmp    c0015e3b <Vm::finish8086()+0x4>
c0015e60:	c6 05 08 c7 02 c0 00 	mov    BYTE PTR ds:0xc002c708,0x0
c0015e67:	83 ec 0c             	sub    esp,0xc
c0015e6a:	8b 1d 04 c7 02 c0    	mov    ebx,DWORD PTR ds:0xc002c704
c0015e70:	ff 35 0c c7 02 c0    	push   DWORD PTR ds:0xc002c70c
c0015e76:	e8 61 f8 ff ff       	call   c00156dc <unblockTask(ThreadControlBlock*)>
c0015e7b:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0015e80:	83 c4 10             	add    esp,0x10
c0015e83:	8d 50 ff             	lea    edx,[eax-0x1]
c0015e86:	89 15 b0 c6 02 c0    	mov    DWORD PTR ds:0xc002c6b0,edx
c0015e8c:	85 d2                	test   edx,edx
c0015e8e:	75 01                	jne    c0015e91 <Vm::finish8086()+0x5a>
c0015e90:	fb                   	sti    
c0015e91:	83 c4 08             	add    esp,0x8
c0015e94:	89 d8                	mov    eax,ebx
c0015e96:	5b                   	pop    ebx
c0015e97:	c3                   	ret    

c0015e98 <Vm::getOutput8086(unsigned char*)>:
c0015e98:	57                   	push   edi
c0015e99:	8b 0d 10 c7 02 c0    	mov    ecx,DWORD PTR ds:0xc002c710
c0015e9f:	56                   	push   esi
c0015ea0:	be 20 c7 02 c0       	mov    esi,0xc002c720
c0015ea5:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0015ea9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015eab:	5e                   	pop    esi
c0015eac:	a1 10 c7 02 c0       	mov    eax,ds:0xc002c710
c0015eb1:	c7 05 10 c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c710,0x0
c0015ebb:	5f                   	pop    edi
c0015ebc:	c3                   	ret    

c0015ebd <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0015ebd:	55                   	push   ebp
c0015ebe:	57                   	push   edi
c0015ebf:	56                   	push   esi
c0015ec0:	53                   	push   ebx
c0015ec1:	83 ec 2c             	sub    esp,0x2c
c0015ec4:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0015ec8:	80 3d 00 c7 02 c0 00 	cmp    BYTE PTR ds:0xc002c700,0x0
c0015ecf:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0015ed3:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0015ed7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015edb:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c0015edf:	75 5d                	jne    c0015f3e <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x81>
c0015ee1:	83 ec 0c             	sub    esp,0xc
c0015ee4:	68 14 01 00 00       	push   0x114
c0015ee9:	e8 e2 89 ff ff       	call   c000e8d0 <malloc>
c0015eee:	83 c4 0c             	add    esp,0xc
c0015ef1:	ff 35 d8 c6 02 c0    	push   DWORD PTR ds:0xc002c6d8
c0015ef7:	68 7c 2b 02 c0       	push   0xc0022b7c
c0015efc:	50                   	push   eax
c0015efd:	89 c7                	mov    edi,eax
c0015eff:	e8 08 22 ff ff       	call   c000810c <File::File(char const*, Process*)>
c0015f04:	58                   	pop    eax
c0015f05:	5a                   	pop    edx
c0015f06:	6a 12                	push   0x12
c0015f08:	57                   	push   edi
c0015f09:	e8 1c 22 ff ff       	call   c000812a <File::open(FileOpenMode)>
c0015f0e:	8b 07                	mov    eax,DWORD PTR [edi]
c0015f10:	59                   	pop    ecx
c0015f11:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c0015f15:	51                   	push   ecx
c0015f16:	6a 00                	push   0x0
c0015f18:	6a 00                	push   0x0
c0015f1a:	68 00 00 11 00       	push   0x110000
c0015f1f:	57                   	push   edi
c0015f20:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0015f23:	83 c4 14             	add    esp,0x14
c0015f26:	57                   	push   edi
c0015f27:	e8 5c 22 ff ff       	call   c0008188 <File::close()>
c0015f2c:	8b 07                	mov    eax,DWORD PTR [edi]
c0015f2e:	89 3c 24             	mov    DWORD PTR [esp],edi
c0015f31:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015f34:	83 c4 10             	add    esp,0x10
c0015f37:	c6 05 00 c7 02 c0 01 	mov    BYTE PTR ds:0xc002c700,0x1
c0015f3e:	fa                   	cli    
c0015f3f:	ff 05 b0 c6 02 c0    	inc    DWORD PTR ds:0xc002c6b0
c0015f45:	80 3d 09 c7 02 c0 00 	cmp    BYTE PTR ds:0xc002c709,0x0
c0015f4c:	75 15                	jne    c0015f63 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa6>
c0015f4e:	e8 9d f4 ff ff       	call   c00153f0 <schedule()>
c0015f53:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0015f58:	48                   	dec    eax
c0015f59:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c0015f5e:	75 de                	jne    c0015f3e <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x81>
c0015f60:	fb                   	sti    
c0015f61:	eb db                	jmp    c0015f3e <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x81>
c0015f63:	c7 05 10 c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c710,0x0
c0015f6d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015f71:	a1 0c c7 02 c0       	mov    eax,ds:0xc002c70c
c0015f76:	66 89 70 55          	mov    WORD PTR [eax+0x55],si
c0015f7a:	0f b7 f6             	movzx  esi,si
c0015f7d:	66 89 58 57          	mov    WORD PTR [eax+0x57],bx
c0015f81:	0f b7 db             	movzx  ebx,bx
c0015f84:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0015f88:	66 89 50 5b          	mov    WORD PTR [eax+0x5b],dx
c0015f8c:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0015f90:	50                   	push   eax
c0015f91:	6a 20                	push   0x20
c0015f93:	6a 00                	push   0x0
c0015f95:	68 20 c7 02 c0       	push   0xc002c720
c0015f9a:	e8 51 a5 fe ff       	call   c00004f0 <memset>
c0015f9f:	5a                   	pop    edx
c0015fa0:	59                   	pop    ecx
c0015fa1:	56                   	push   esi
c0015fa2:	53                   	push   ebx
c0015fa3:	e8 be fd ff ff       	call   c0015d66 <Vm::realToLinear(unsigned short, unsigned short)>
c0015fa8:	83 c4 10             	add    esp,0x10
c0015fab:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0015faf:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0015fb3:	89 c7                	mov    edi,eax
c0015fb5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015fb7:	c6 05 09 c7 02 c0 00 	mov    BYTE PTR ds:0xc002c709,0x0
c0015fbe:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0015fc3:	48                   	dec    eax
c0015fc4:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c0015fc9:	75 01                	jne    c0015fcc <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x10f>
c0015fcb:	fb                   	sti    
c0015fcc:	83 ec 0c             	sub    esp,0xc
c0015fcf:	ff 35 0c c7 02 c0    	push   DWORD PTR ds:0xc002c70c
c0015fd5:	e8 02 f7 ff ff       	call   c00156dc <unblockTask(ThreadControlBlock*)>
c0015fda:	83 c4 3c             	add    esp,0x3c
c0015fdd:	b0 01                	mov    al,0x1
c0015fdf:	5b                   	pop    ebx
c0015fe0:	5e                   	pop    esi
c0015fe1:	5f                   	pop    edi
c0015fe2:	5d                   	pop    ebp
c0015fe3:	c3                   	ret    

c0015fe4 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0015fe4:	55                   	push   ebp
c0015fe5:	57                   	push   edi
c0015fe6:	56                   	push   esi
c0015fe7:	53                   	push   ebx
c0015fe8:	83 ec 2c             	sub    esp,0x2c
c0015feb:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0015fef:	80 3d 00 c7 02 c0 00 	cmp    BYTE PTR ds:0xc002c700,0x0
c0015ff6:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0015ffa:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0015ffe:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016002:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0016006:	75 5d                	jne    c0016065 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x81>
c0016008:	83 ec 0c             	sub    esp,0xc
c001600b:	68 14 01 00 00       	push   0x114
c0016010:	e8 bb 88 ff ff       	call   c000e8d0 <malloc>
c0016015:	83 c4 0c             	add    esp,0xc
c0016018:	ff 35 d8 c6 02 c0    	push   DWORD PTR ds:0xc002c6d8
c001601e:	68 7c 2b 02 c0       	push   0xc0022b7c
c0016023:	50                   	push   eax
c0016024:	89 c3                	mov    ebx,eax
c0016026:	e8 e1 20 ff ff       	call   c000810c <File::File(char const*, Process*)>
c001602b:	58                   	pop    eax
c001602c:	5a                   	pop    edx
c001602d:	6a 12                	push   0x12
c001602f:	53                   	push   ebx
c0016030:	e8 f5 20 ff ff       	call   c000812a <File::open(FileOpenMode)>
c0016035:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016037:	59                   	pop    ecx
c0016038:	8d 54 24 24          	lea    edx,[esp+0x24]
c001603c:	52                   	push   edx
c001603d:	6a 00                	push   0x0
c001603f:	6a 00                	push   0x0
c0016041:	68 00 00 11 00       	push   0x110000
c0016046:	53                   	push   ebx
c0016047:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001604a:	83 c4 14             	add    esp,0x14
c001604d:	53                   	push   ebx
c001604e:	e8 35 21 ff ff       	call   c0008188 <File::close()>
c0016053:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016055:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016058:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001605b:	83 c4 10             	add    esp,0x10
c001605e:	c6 05 00 c7 02 c0 01 	mov    BYTE PTR ds:0xc002c700,0x1
c0016065:	50                   	push   eax
c0016066:	50                   	push   eax
c0016067:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001606b:	68 97 2b 02 c0       	push   0xc0022b97
c0016070:	e8 d9 0e ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0016075:	83 c4 10             	add    esp,0x10
c0016078:	fa                   	cli    
c0016079:	8a 1d 09 c7 02 c0    	mov    bl,BYTE PTR ds:0xc002c709
c001607f:	ff 05 b0 c6 02 c0    	inc    DWORD PTR ds:0xc002c6b0
c0016085:	84 db                	test   bl,bl
c0016087:	75 15                	jne    c001609e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xba>
c0016089:	e8 62 f3 ff ff       	call   c00153f0 <schedule()>
c001608e:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0016093:	48                   	dec    eax
c0016094:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c0016099:	75 dd                	jne    c0016078 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x94>
c001609b:	fb                   	sti    
c001609c:	eb da                	jmp    c0016078 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x94>
c001609e:	c7 05 10 c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c710,0x0
c00160a8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00160ac:	a1 0c c7 02 c0       	mov    eax,ds:0xc002c70c
c00160b1:	66 89 50 5b          	mov    WORD PTR [eax+0x5b],dx
c00160b5:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c00160b9:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c00160bd:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c00160c1:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c00160c5:	50                   	push   eax
c00160c6:	6a 20                	push   0x20
c00160c8:	6a 00                	push   0x0
c00160ca:	68 20 c7 02 c0       	push   0xc002c720
c00160cf:	e8 1c a4 fe ff       	call   c00004f0 <memset>
c00160d4:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00160db:	e8 f0 87 ff ff       	call   c000e8d0 <malloc>
c00160e0:	83 c4 0c             	add    esp,0xc
c00160e3:	ff 35 d8 c6 02 c0    	push   DWORD PTR ds:0xc002c6d8
c00160e9:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00160ed:	89 c5                	mov    ebp,eax
c00160ef:	50                   	push   eax
c00160f0:	e8 17 20 ff ff       	call   c000810c <File::File(char const*, Process*)>
c00160f5:	83 c4 10             	add    esp,0x10
c00160f8:	85 ed                	test   ebp,ebp
c00160fa:	75 0a                	jne    c0016106 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x122>
c00160fc:	83 ec 0c             	sub    esp,0xc
c00160ff:	68 b9 2b 02 c0       	push   0xc0022bb9
c0016104:	eb 2b                	jmp    c0016131 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c0016106:	50                   	push   eax
c0016107:	8d 44 24 17          	lea    eax,[esp+0x17]
c001610b:	50                   	push   eax
c001610c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0016110:	50                   	push   eax
c0016111:	55                   	push   ebp
c0016112:	e8 15 23 ff ff       	call   c000842c <File::stat(unsigned long long*, bool*)>
c0016117:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c001611b:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001611f:	83 c4 10             	add    esp,0x10
c0016122:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0016127:	74 27                	je     c0016150 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x16c>
c0016129:	83 ec 0c             	sub    esp,0xc
c001612c:	68 cd 2b 02 c0       	push   0xc0022bcd
c0016131:	e8 f0 8a ff ff       	call   c000ec26 <KePanic(char const*)>
c0016136:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c001613b:	83 c4 10             	add    esp,0x10
c001613e:	48                   	dec    eax
c001613f:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c0016144:	85 c0                	test   eax,eax
c0016146:	75 01                	jne    c0016149 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x165>
c0016148:	fb                   	sti    
c0016149:	31 db                	xor    ebx,ebx
c001614b:	e9 90 00 00 00       	jmp    c00161e0 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x1fc>
c0016150:	51                   	push   ecx
c0016151:	51                   	push   ecx
c0016152:	6a 01                	push   0x1
c0016154:	55                   	push   ebp
c0016155:	e8 d0 1f ff ff       	call   c000812a <File::open(FileOpenMode)>
c001615a:	83 c4 10             	add    esp,0x10
c001615d:	85 c0                	test   eax,eax
c001615f:	74 26                	je     c0016187 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x1a3>
c0016161:	83 ec 0c             	sub    esp,0xc
c0016164:	68 e6 2b 02 c0       	push   0xc0022be6
c0016169:	e8 b8 8a ff ff       	call   c000ec26 <KePanic(char const*)>
c001616e:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0016173:	83 c4 10             	add    esp,0x10
c0016176:	48                   	dec    eax
c0016177:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c001617c:	85 c0                	test   eax,eax
c001617e:	75 c9                	jne    c0016149 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x165>
c0016180:	fb                   	sti    
c0016181:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c0016185:	eb 59                	jmp    c00161e0 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x1fc>
c0016187:	50                   	push   eax
c0016188:	0f b7 ff             	movzx  edi,di
c001618b:	50                   	push   eax
c001618c:	0f b7 f6             	movzx  esi,si
c001618f:	57                   	push   edi
c0016190:	56                   	push   esi
c0016191:	e8 d0 fb ff ff       	call   c0015d66 <Vm::realToLinear(unsigned short, unsigned short)>
c0016196:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0016199:	5a                   	pop    edx
c001619a:	8d 74 24 20          	lea    esi,[esp+0x20]
c001619e:	56                   	push   esi
c001619f:	50                   	push   eax
c00161a0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00161a4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00161a8:	55                   	push   ebp
c00161a9:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00161ac:	83 c4 14             	add    esp,0x14
c00161af:	55                   	push   ebp
c00161b0:	e8 d3 1f ff ff       	call   c0008188 <File::close()>
c00161b5:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c00161ba:	83 c4 10             	add    esp,0x10
c00161bd:	c6 05 09 c7 02 c0 00 	mov    BYTE PTR ds:0xc002c709,0x0
c00161c4:	48                   	dec    eax
c00161c5:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c00161ca:	85 c0                	test   eax,eax
c00161cc:	75 01                	jne    c00161cf <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x1eb>
c00161ce:	fb                   	sti    
c00161cf:	83 ec 0c             	sub    esp,0xc
c00161d2:	ff 35 0c c7 02 c0    	push   DWORD PTR ds:0xc002c70c
c00161d8:	e8 ff f4 ff ff       	call   c00156dc <unblockTask(ThreadControlBlock*)>
c00161dd:	83 c4 10             	add    esp,0x10
c00161e0:	83 c4 2c             	add    esp,0x2c
c00161e3:	88 d8                	mov    al,bl
c00161e5:	5b                   	pop    ebx
c00161e6:	5e                   	pop    esi
c00161e7:	5f                   	pop    edi
c00161e8:	5d                   	pop    ebp
c00161e9:	c3                   	ret    

c00161ea <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c00161ea:	57                   	push   edi
c00161eb:	56                   	push   esi
c00161ec:	53                   	push   ebx
c00161ed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00161f1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00161f5:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00161f9:	83 e8 06             	sub    eax,0x6
c00161fc:	0f b7 c0             	movzx  eax,ax
c00161ff:	50                   	push   eax
c0016200:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0016205:	50                   	push   eax
c0016206:	e8 5b fb ff ff       	call   c0015d66 <Vm::realToLinear(unsigned short, unsigned short)>
c001620b:	5a                   	pop    edx
c001620c:	59                   	pop    ecx
c001620d:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0016210:	8d 51 fa             	lea    edx,[ecx-0x6]
c0016213:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0016216:	81 e2 ff ff 00 00    	and    edx,0xffff
c001621c:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c001621f:	8d 51 02             	lea    edx,[ecx+0x2]
c0016222:	66 89 10             	mov    WORD PTR [eax],dx
c0016225:	66 8b 53 3c          	mov    dx,WORD PTR [ebx+0x3c]
c0016229:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001622d:	66 8b 53 40          	mov    dx,WORD PTR [ebx+0x40]
c0016231:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c0016234:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0016238:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001623e:	89 f1                	mov    ecx,esi
c0016240:	80 7a 5d 00          	cmp    BYTE PTR [edx+0x5d],0x0
c0016244:	89 f2                	mov    edx,esi
c0016246:	0f b6 d6             	movzx  edx,dh
c0016249:	0f b6 f1             	movzx  esi,cl
c001624c:	74 0a                	je     c0016258 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x6e>
c001624e:	c1 e2 08             	shl    edx,0x8
c0016251:	09 f2                	or     edx,esi
c0016253:	80 ce 02             	or     dh,0x2
c0016256:	eb 08                	jmp    c0016260 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x76>
c0016258:	c1 e2 08             	shl    edx,0x8
c001625b:	09 f2                	or     edx,esi
c001625d:	80 e6 fd             	and    dh,0xfd
c0016260:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0016264:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016269:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001626d:	0f b7 04 bd 02 00 00 00 	movzx  eax,WORD PTR [edi*4+0x2]
c0016275:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c0016278:	0f b7 04 bd 00 00 00 00 	movzx  eax,WORD PTR [edi*4+0x0]
c0016280:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0016283:	5b                   	pop    ebx
c0016284:	5e                   	pop    esi
c0016285:	5f                   	pop    edi
c0016286:	c3                   	ret    

c0016287 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0016287:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001628c:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016291:	c1 e0 04             	shl    eax,0x4
c0016294:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0016297:	c3                   	ret    

c0016298 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0016298:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001629d:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00162a2:	c1 e0 04             	shl    eax,0x4
c00162a5:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c00162a9:	c3                   	ret    

c00162aa <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c00162aa:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00162af:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00162b4:	c1 e0 04             	shl    eax,0x4
c00162b7:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c00162ba:	c3                   	ret    

c00162bb <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c00162bb:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00162c0:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00162c5:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00162c9:	c1 e0 04             	shl    eax,0x4
c00162cc:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c00162cf:	c3                   	ret    

c00162d0 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c00162d0:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00162d5:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00162da:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00162de:	c1 e0 04             	shl    eax,0x4
c00162e1:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c00162e5:	c3                   	ret    

c00162e6 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c00162e6:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00162eb:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00162f0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00162f4:	c1 e0 04             	shl    eax,0x4
c00162f7:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c00162fa:	c3                   	ret    

c00162fb <Vm::faultHandler(regs*)>:
c00162fb:	55                   	push   ebp
c00162fc:	57                   	push   edi
c00162fd:	56                   	push   esi
c00162fe:	53                   	push   ebx
c00162ff:	83 ec 2c             	sub    esp,0x2c
c0016302:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0016306:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016309:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c001630d:	0f b7 f8             	movzx  edi,ax
c0016310:	0f b7 c0             	movzx  eax,ax
c0016313:	52                   	push   edx
c0016314:	50                   	push   eax
c0016315:	e8 4c fa ff ff       	call   c0015d66 <Vm::realToLinear(unsigned short, unsigned short)>
c001631a:	5a                   	pop    edx
c001631b:	59                   	pop    ecx
c001631c:	89 c1                	mov    ecx,eax
c001631e:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0016321:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016325:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c001632a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001632e:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0016331:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016335:	0f b7 44 24 14       	movzx  eax,WORD PTR [esp+0x14]
c001633a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001633e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016342:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016346:	e8 1b fa ff ff       	call   c0015d66 <Vm::realToLinear(unsigned short, unsigned short)>
c001634b:	5e                   	pop    esi
c001634c:	be 06 00 00 00       	mov    esi,0x6
c0016351:	5d                   	pop    ebp
c0016352:	31 ed                	xor    ebp,ebp
c0016354:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0016359:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c001635c:	81 fa 9d 00 00 00    	cmp    edx,0x9d
c0016362:	0f 84 74 02 00 00    	je     c00165dc <Vm::faultHandler(regs*)+0x2e1>
c0016368:	0f 87 94 00 00 00    	ja     c0016402 <Vm::faultHandler(regs*)+0x107>
c001636e:	83 fa 66             	cmp    edx,0x66
c0016371:	0f 84 e2 01 00 00    	je     c0016559 <Vm::faultHandler(regs*)+0x25e>
c0016377:	77 47                	ja     c00163c0 <Vm::faultHandler(regs*)+0xc5>
c0016379:	83 fa 36             	cmp    edx,0x36
c001637c:	0f 84 ca 01 00 00    	je     c001654c <Vm::faultHandler(regs*)+0x251>
c0016382:	77 1a                	ja     c001639e <Vm::faultHandler(regs*)+0xa3>
c0016384:	83 fa 26             	cmp    edx,0x26
c0016387:	0f 84 98 01 00 00    	je     c0016525 <Vm::faultHandler(regs*)+0x22a>
c001638d:	83 fa 2e             	cmp    edx,0x2e
c0016390:	0f 85 27 06 00 00    	jne    c00169bd <Vm::faultHandler(regs*)+0x6c2>
c0016396:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016399:	31 f6                	xor    esi,esi
c001639b:	41                   	inc    ecx
c001639c:	eb bb                	jmp    c0016359 <Vm::faultHandler(regs*)+0x5e>
c001639e:	83 fa 64             	cmp    edx,0x64
c00163a1:	0f 84 8b 01 00 00    	je     c0016532 <Vm::faultHandler(regs*)+0x237>
c00163a7:	0f 87 92 01 00 00    	ja     c001653f <Vm::faultHandler(regs*)+0x244>
c00163ad:	83 fa 3e             	cmp    edx,0x3e
c00163b0:	0f 85 07 06 00 00    	jne    c00169bd <Vm::faultHandler(regs*)+0x6c2>
c00163b6:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00163b9:	be 01 00 00 00       	mov    esi,0x1
c00163be:	eb db                	jmp    c001639b <Vm::faultHandler(regs*)+0xa0>
c00163c0:	83 fa 6d             	cmp    edx,0x6d
c00163c3:	0f 84 34 03 00 00    	je     c00166fd <Vm::faultHandler(regs*)+0x402>
c00163c9:	77 17                	ja     c00163e2 <Vm::faultHandler(regs*)+0xe7>
c00163cb:	83 fa 67             	cmp    edx,0x67
c00163ce:	0f 84 92 01 00 00    	je     c0016566 <Vm::faultHandler(regs*)+0x26b>
c00163d4:	83 fa 6c             	cmp    edx,0x6c
c00163d7:	0f 84 b1 02 00 00    	je     c001668e <Vm::faultHandler(regs*)+0x393>
c00163dd:	e9 db 05 00 00       	jmp    c00169bd <Vm::faultHandler(regs*)+0x6c2>
c00163e2:	83 fa 6f             	cmp    edx,0x6f
c00163e5:	0f 84 40 04 00 00    	je     c001682b <Vm::faultHandler(regs*)+0x530>
c00163eb:	0f 82 a2 03 00 00    	jb     c0016793 <Vm::faultHandler(regs*)+0x498>
c00163f1:	81 fa 9c 00 00 00    	cmp    edx,0x9c
c00163f7:	0f 84 76 01 00 00    	je     c0016573 <Vm::faultHandler(regs*)+0x278>
c00163fd:	e9 bb 05 00 00       	jmp    c00169bd <Vm::faultHandler(regs*)+0x6c2>
c0016402:	81 fa ec 00 00 00    	cmp    edx,0xec
c0016408:	0f 84 57 05 00 00    	je     c0016965 <Vm::faultHandler(regs*)+0x66a>
c001640e:	0f 87 a9 00 00 00    	ja     c00164bd <Vm::faultHandler(regs*)+0x1c2>
c0016414:	81 fa e4 00 00 00    	cmp    edx,0xe4
c001641a:	0f 84 d6 04 00 00    	je     c00168f6 <Vm::faultHandler(regs*)+0x5fb>
c0016420:	77 78                	ja     c001649a <Vm::faultHandler(regs*)+0x19f>
c0016422:	81 fa cd 00 00 00    	cmp    edx,0xcd
c0016428:	0f 84 0e 02 00 00    	je     c001663c <Vm::faultHandler(regs*)+0x341>
c001642e:	81 fa cf 00 00 00    	cmp    edx,0xcf
c0016434:	0f 85 83 05 00 00    	jne    c00169bd <Vm::faultHandler(regs*)+0x6c2>
c001643a:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c001643e:	89 d1                	mov    ecx,edx
c0016440:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c0016443:	c1 e1 08             	shl    ecx,0x8
c0016446:	09 ca                	or     edx,ecx
c0016448:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c001644b:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c001644f:	89 d1                	mov    ecx,edx
c0016451:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0016455:	c1 e1 08             	shl    ecx,0x8
c0016458:	09 ca                	or     edx,ecx
c001645a:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c001645d:	0f b6 50 05          	movzx  edx,BYTE PTR [eax+0x5]
c0016461:	89 d1                	mov    ecx,edx
c0016463:	0f b6 50 04          	movzx  edx,BYTE PTR [eax+0x4]
c0016467:	c1 e1 08             	shl    ecx,0x8
c001646a:	09 ca                	or     edx,ecx
c001646c:	81 ca 00 02 02 00    	or     edx,0x20200
c0016472:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0016475:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
c0016479:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001647f:	d1 e8                	shr    eax,1
c0016481:	83 e0 01             	and    eax,0x1
c0016484:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0016487:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001648a:	83 c0 06             	add    eax,0x6
c001648d:	25 ff ff 00 00       	and    eax,0xffff
c0016492:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0016495:	e9 1f 05 00 00       	jmp    c00169b9 <Vm::faultHandler(regs*)+0x6be>
c001649a:	81 fa e6 00 00 00    	cmp    edx,0xe6
c00164a0:	0f 84 95 04 00 00    	je     c001693b <Vm::faultHandler(regs*)+0x640>
c00164a6:	0f 82 66 04 00 00    	jb     c0016912 <Vm::faultHandler(regs*)+0x617>
c00164ac:	81 fa e7 00 00 00    	cmp    edx,0xe7
c00164b2:	0f 84 9a 04 00 00    	je     c0016952 <Vm::faultHandler(regs*)+0x657>
c00164b8:	e9 00 05 00 00       	jmp    c00169bd <Vm::faultHandler(regs*)+0x6c2>
c00164bd:	81 fa ef 00 00 00    	cmp    edx,0xef
c00164c3:	0f 84 dd 04 00 00    	je     c00169a6 <Vm::faultHandler(regs*)+0x6ab>
c00164c9:	77 2e                	ja     c00164f9 <Vm::faultHandler(regs*)+0x1fe>
c00164cb:	81 fa ed 00 00 00    	cmp    edx,0xed
c00164d1:	0f 84 aa 04 00 00    	je     c0016981 <Vm::faultHandler(regs*)+0x686>
c00164d7:	81 fa ee 00 00 00    	cmp    edx,0xee
c00164dd:	0f 85 da 04 00 00    	jne    c00169bd <Vm::faultHandler(regs*)+0x6c2>
c00164e3:	50                   	push   eax
c00164e4:	50                   	push   eax
c00164e5:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c00164e9:	50                   	push   eax
c00164ea:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00164ee:	50                   	push   eax
c00164ef:	e8 3c f8 ff ff       	call   c0015d30 <Vm::outbv(unsigned short, unsigned char)>
c00164f4:	e9 a5 04 00 00       	jmp    c001699e <Vm::faultHandler(regs*)+0x6a3>
c00164f9:	81 fa fa 00 00 00    	cmp    edx,0xfa
c00164ff:	0f 84 6d 01 00 00    	je     c0016672 <Vm::faultHandler(regs*)+0x377>
c0016505:	81 fa fb 00 00 00    	cmp    edx,0xfb
c001650b:	0f 84 6f 01 00 00    	je     c0016680 <Vm::faultHandler(regs*)+0x385>
c0016511:	81 fa f3 00 00 00    	cmp    edx,0xf3
c0016517:	0f 85 a0 04 00 00    	jne    c00169bd <Vm::faultHandler(regs*)+0x6c2>
c001651d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016520:	e9 76 fe ff ff       	jmp    c001639b <Vm::faultHandler(regs*)+0xa0>
c0016525:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016528:	be 02 00 00 00       	mov    esi,0x2
c001652d:	e9 69 fe ff ff       	jmp    c001639b <Vm::faultHandler(regs*)+0xa0>
c0016532:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016535:	be 03 00 00 00       	mov    esi,0x3
c001653a:	e9 5c fe ff ff       	jmp    c001639b <Vm::faultHandler(regs*)+0xa0>
c001653f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016542:	be 04 00 00 00       	mov    esi,0x4
c0016547:	e9 4f fe ff ff       	jmp    c001639b <Vm::faultHandler(regs*)+0xa0>
c001654c:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001654f:	be 05 00 00 00       	mov    esi,0x5
c0016554:	e9 42 fe ff ff       	jmp    c001639b <Vm::faultHandler(regs*)+0xa0>
c0016559:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001655c:	bd 01 00 00 00       	mov    ebp,0x1
c0016561:	e9 35 fe ff ff       	jmp    c001639b <Vm::faultHandler(regs*)+0xa0>
c0016566:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016569:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c001656e:	e9 28 fe ff ff       	jmp    c001639b <Vm::faultHandler(regs*)+0xa0>
c0016573:	83 e5 01             	and    ebp,0x1
c0016576:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0016579:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001657d:	74 30                	je     c00165af <Vm::faultHandler(regs*)+0x2b4>
c001657f:	83 e9 04             	sub    ecx,0x4
c0016582:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0016588:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001658e:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0016591:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0016594:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001659a:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c001659e:	0f 84 12 04 00 00    	je     c00169b6 <Vm::faultHandler(regs*)+0x6bb>
c00165a4:	80 ce 02             	or     dh,0x2
c00165a7:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c00165aa:	e9 07 04 00 00       	jmp    c00169b6 <Vm::faultHandler(regs*)+0x6bb>
c00165af:	83 e9 02             	sub    ecx,0x2
c00165b2:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00165b8:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c00165bb:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c00165bf:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00165c5:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c00165c9:	74 05                	je     c00165d0 <Vm::faultHandler(regs*)+0x2d5>
c00165cb:	80 ce 02             	or     dh,0x2
c00165ce:	eb 03                	jmp    c00165d3 <Vm::faultHandler(regs*)+0x2d8>
c00165d0:	80 e6 fd             	and    dh,0xfd
c00165d3:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c00165d7:	e9 da 03 00 00       	jmp    c00169b6 <Vm::faultHandler(regs*)+0x6bb>
c00165dc:	83 e5 01             	and    ebp,0x1
c00165df:	74 2a                	je     c001660b <Vm::faultHandler(regs*)+0x310>
c00165e1:	8b 10                	mov    edx,DWORD PTR [eax]
c00165e3:	81 e2 ff 0d 00 00    	and    edx,0xdff
c00165e9:	81 ca 00 02 02 00    	or     edx,0x20200
c00165ef:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00165f2:	8b 00                	mov    eax,DWORD PTR [eax]
c00165f4:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00165fa:	c1 e8 09             	shr    eax,0x9
c00165fd:	83 e0 01             	and    eax,0x1
c0016600:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0016603:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0016606:	83 c0 04             	add    eax,0x4
c0016609:	eb 24                	jmp    c001662f <Vm::faultHandler(regs*)+0x334>
c001660b:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001660e:	81 ca 00 02 02 00    	or     edx,0x20200
c0016614:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0016617:	0f b7 00             	movzx  eax,WORD PTR [eax]
c001661a:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016620:	c1 e8 09             	shr    eax,0x9
c0016623:	83 e0 01             	and    eax,0x1
c0016626:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0016629:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001662c:	83 c0 02             	add    eax,0x2
c001662f:	25 ff ff 00 00       	and    eax,0xffff
c0016634:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0016637:	e9 7a 03 00 00       	jmp    c00169b6 <Vm::faultHandler(regs*)+0x6bb>
c001663c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016640:	3d ee 00 00 00       	cmp    eax,0xee
c0016645:	75 10                	jne    c0016657 <Vm::faultHandler(regs*)+0x35c>
c0016647:	83 ec 0c             	sub    esp,0xc
c001664a:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c001664d:	e8 7b f7 ff ff       	call   c0015dcd <Vm::mainloop3(unsigned long)>
c0016652:	e9 4a 03 00 00       	jmp    c00169a1 <Vm::faultHandler(regs*)+0x6a6>
c0016657:	83 ec 0c             	sub    esp,0xc
c001665a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001665e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016662:	51                   	push   ecx
c0016663:	50                   	push   eax
c0016664:	53                   	push   ebx
c0016665:	e8 80 fb ff ff       	call   c00161ea <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001666a:	83 c4 20             	add    esp,0x20
c001666d:	e9 47 03 00 00       	jmp    c00169b9 <Vm::faultHandler(regs*)+0x6be>
c0016672:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016677:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001667b:	e9 36 03 00 00       	jmp    c00169b6 <Vm::faultHandler(regs*)+0x6bb>
c0016680:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016685:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c0016689:	e9 28 03 00 00       	jmp    c00169b6 <Vm::faultHandler(regs*)+0x6bb>
c001668e:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0016693:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0016696:	74 2b                	je     c00166c3 <Vm::faultHandler(regs*)+0x3c8>
c0016698:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c001669f:	76 22                	jbe    c00166c3 <Vm::faultHandler(regs*)+0x3c8>
c00166a1:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00166a5:	50                   	push   eax
c00166a6:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00166aa:	50                   	push   eax
c00166ab:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00166af:	50                   	push   eax
c00166b0:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00166b4:	50                   	push   eax
c00166b5:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00166b9:	50                   	push   eax
c00166ba:	6a 6c                	push   0x6c
c00166bc:	6a 6c                	push   0x6c
c00166be:	e9 c0 01 00 00       	jmp    c0016883 <Vm::faultHandler(regs*)+0x588>
c00166c3:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00166c7:	83 ec 0c             	sub    esp,0xc
c00166ca:	0f b7 f6             	movzx  esi,si
c00166cd:	50                   	push   eax
c00166ce:	e8 4a f6 ff ff       	call   c0015d1d <Vm::inbv(unsigned short)>
c00166d3:	83 c4 0c             	add    esp,0xc
c00166d6:	0f b6 c0             	movzx  eax,al
c00166d9:	50                   	push   eax
c00166da:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c00166de:	50                   	push   eax
c00166df:	56                   	push   esi
c00166e0:	e8 d6 fb ff ff       	call   c00162bb <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c00166e5:	83 c4 10             	add    esp,0x10
c00166e8:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00166eb:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00166ef:	74 03                	je     c00166f4 <Vm::faultHandler(regs*)+0x3f9>
c00166f1:	48                   	dec    eax
c00166f2:	eb 01                	jmp    c00166f5 <Vm::faultHandler(regs*)+0x3fa>
c00166f4:	40                   	inc    eax
c00166f5:	0f b7 c0             	movzx  eax,ax
c00166f8:	e9 8e 00 00 00       	jmp    c001678b <Vm::faultHandler(regs*)+0x490>
c00166fd:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0016702:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0016705:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0016708:	74 29                	je     c0016733 <Vm::faultHandler(regs*)+0x438>
c001670a:	3d ff ff 00 00       	cmp    eax,0xffff
c001670f:	76 22                	jbe    c0016733 <Vm::faultHandler(regs*)+0x438>
c0016711:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0016715:	50                   	push   eax
c0016716:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001671a:	50                   	push   eax
c001671b:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001671f:	50                   	push   eax
c0016720:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0016724:	50                   	push   eax
c0016725:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016729:	50                   	push   eax
c001672a:	6a 6d                	push   0x6d
c001672c:	6a 6d                	push   0x6d
c001672e:	e9 50 01 00 00       	jmp    c0016883 <Vm::faultHandler(regs*)+0x588>
c0016733:	83 e5 01             	and    ebp,0x1
c0016736:	0f b7 c8             	movzx  ecx,ax
c0016739:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001673c:	0f b7 f6             	movzx  esi,si
c001673f:	74 1e                	je     c001675f <Vm::faultHandler(regs*)+0x464>
c0016741:	ed                   	in     eax,dx
c0016742:	55                   	push   ebp
c0016743:	50                   	push   eax
c0016744:	51                   	push   ecx
c0016745:	56                   	push   esi
c0016746:	e8 9b fb ff ff       	call   c00162e6 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001674b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001674e:	83 c4 10             	add    esp,0x10
c0016751:	8d 50 04             	lea    edx,[eax+0x4]
c0016754:	83 e8 04             	sub    eax,0x4
c0016757:	81 e2 ff ff 00 00    	and    edx,0xffff
c001675d:	eb 20                	jmp    c001677f <Vm::faultHandler(regs*)+0x484>
c001675f:	66 ed                	in     ax,dx
c0016761:	57                   	push   edi
c0016762:	0f b7 c0             	movzx  eax,ax
c0016765:	50                   	push   eax
c0016766:	51                   	push   ecx
c0016767:	56                   	push   esi
c0016768:	e8 63 fb ff ff       	call   c00162d0 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001676d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0016770:	83 c4 10             	add    esp,0x10
c0016773:	8d 50 02             	lea    edx,[eax+0x2]
c0016776:	83 e8 02             	sub    eax,0x2
c0016779:	81 e2 ff ff 00 00    	and    edx,0xffff
c001677f:	25 ff ff 00 00       	and    eax,0xffff
c0016784:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0016788:	0f 44 c2             	cmove  eax,edx
c001678b:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c001678e:	e9 23 02 00 00       	jmp    c00169b6 <Vm::faultHandler(regs*)+0x6bb>
c0016793:	8d 46 ff             	lea    eax,[esi-0x1]
c0016796:	0f b6 f0             	movzx  esi,al
c0016799:	83 fe 05             	cmp    esi,0x5
c001679c:	77 23                	ja     c00167c1 <Vm::faultHandler(regs*)+0x4c6>
c001679e:	ff 24 b5 5c 2c 02 c0 	jmp    DWORD PTR [esi*4-0x3ffdd3a4]
c00167a5:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c00167aa:	eb 15                	jmp    c00167c1 <Vm::faultHandler(regs*)+0x4c6>
c00167ac:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c00167b0:	eb 0f                	jmp    c00167c1 <Vm::faultHandler(regs*)+0x4c6>
c00167b2:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c00167b6:	eb 09                	jmp    c00167c1 <Vm::faultHandler(regs*)+0x4c6>
c00167b8:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c00167bc:	eb 03                	jmp    c00167c1 <Vm::faultHandler(regs*)+0x4c6>
c00167be:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c00167c1:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c00167c6:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00167c9:	74 29                	je     c00167f4 <Vm::faultHandler(regs*)+0x4f9>
c00167cb:	3d ff ff 00 00       	cmp    eax,0xffff
c00167d0:	76 22                	jbe    c00167f4 <Vm::faultHandler(regs*)+0x4f9>
c00167d2:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00167d6:	50                   	push   eax
c00167d7:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00167db:	50                   	push   eax
c00167dc:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00167e0:	50                   	push   eax
c00167e1:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00167e5:	50                   	push   eax
c00167e6:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00167ea:	50                   	push   eax
c00167eb:	6a 6e                	push   0x6e
c00167ed:	6a 6e                	push   0x6e
c00167ef:	e9 8f 00 00 00       	jmp    c0016883 <Vm::faultHandler(regs*)+0x588>
c00167f4:	52                   	push   edx
c00167f5:	0f b7 c0             	movzx  eax,ax
c00167f8:	52                   	push   edx
c00167f9:	50                   	push   eax
c00167fa:	57                   	push   edi
c00167fb:	e8 87 fa ff ff       	call   c0016287 <Vm::readByteFromReal(unsigned short, unsigned short)>
c0016800:	59                   	pop    ecx
c0016801:	5e                   	pop    esi
c0016802:	0f b6 c0             	movzx  eax,al
c0016805:	50                   	push   eax
c0016806:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001680a:	50                   	push   eax
c001680b:	e8 20 f5 ff ff       	call   c0015d30 <Vm::outbv(unsigned short, unsigned char)>
c0016810:	83 c4 10             	add    esp,0x10
c0016813:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0016816:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001681a:	74 03                	je     c001681f <Vm::faultHandler(regs*)+0x524>
c001681c:	48                   	dec    eax
c001681d:	eb 01                	jmp    c0016820 <Vm::faultHandler(regs*)+0x525>
c001681f:	40                   	inc    eax
c0016820:	0f b7 c0             	movzx  eax,ax
c0016823:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0016826:	e9 8b 01 00 00       	jmp    c00169b6 <Vm::faultHandler(regs*)+0x6bb>
c001682b:	8d 46 ff             	lea    eax,[esi-0x1]
c001682e:	0f b6 f0             	movzx  esi,al
c0016831:	83 fe 05             	cmp    esi,0x5
c0016834:	77 1e                	ja     c0016854 <Vm::faultHandler(regs*)+0x559>
c0016836:	ff 24 b5 74 2c 02 c0 	jmp    DWORD PTR [esi*4-0x3ffdd38c]
c001683d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0016841:	eb 11                	jmp    c0016854 <Vm::faultHandler(regs*)+0x559>
c0016843:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0016846:	eb 0c                	jmp    c0016854 <Vm::faultHandler(regs*)+0x559>
c0016848:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c001684b:	eb 07                	jmp    c0016854 <Vm::faultHandler(regs*)+0x559>
c001684d:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0016850:	eb 02                	jmp    c0016854 <Vm::faultHandler(regs*)+0x559>
c0016852:	8b 3b                	mov    edi,DWORD PTR [ebx]
c0016854:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0016859:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c001685c:	74 37                	je     c0016895 <Vm::faultHandler(regs*)+0x59a>
c001685e:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0016864:	76 2f                	jbe    c0016895 <Vm::faultHandler(regs*)+0x59a>
c0016866:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001686a:	50                   	push   eax
c001686b:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001686f:	50                   	push   eax
c0016870:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0016874:	50                   	push   eax
c0016875:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0016879:	50                   	push   eax
c001687a:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001687e:	50                   	push   eax
c001687f:	6a 6f                	push   0x6f
c0016881:	6a 6f                	push   0x6f
c0016883:	68 ff 2b 02 c0       	push   0xc0022bff
c0016888:	e8 c1 06 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001688d:	83 c4 20             	add    esp,0x20
c0016890:	e9 86 01 00 00       	jmp    c0016a1b <Vm::faultHandler(regs*)+0x720>
c0016895:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0016898:	0f b7 d7             	movzx  edx,di
c001689b:	0f b7 c6             	movzx  eax,si
c001689e:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c00168a1:	81 e1 00 04 00 00    	and    ecx,0x400
c00168a7:	83 e5 01             	and    ebp,0x1
c00168aa:	74 1c                	je     c00168c8 <Vm::faultHandler(regs*)+0x5cd>
c00168ac:	55                   	push   ebp
c00168ad:	55                   	push   ebp
c00168ae:	50                   	push   eax
c00168af:	52                   	push   edx
c00168b0:	e8 f5 f9 ff ff       	call   c00162aa <Vm::readDwordFromReal(unsigned short, unsigned short)>
c00168b5:	83 c4 10             	add    esp,0x10
c00168b8:	89 fa                	mov    edx,edi
c00168ba:	ef                   	out    dx,eax
c00168bb:	8d 46 04             	lea    eax,[esi+0x4]
c00168be:	83 ee 04             	sub    esi,0x4
c00168c1:	25 ff ff 00 00       	and    eax,0xffff
c00168c6:	eb 1b                	jmp    c00168e3 <Vm::faultHandler(regs*)+0x5e8>
c00168c8:	55                   	push   ebp
c00168c9:	55                   	push   ebp
c00168ca:	50                   	push   eax
c00168cb:	52                   	push   edx
c00168cc:	e8 c7 f9 ff ff       	call   c0016298 <Vm::readWordFromReal(unsigned short, unsigned short)>
c00168d1:	83 c4 10             	add    esp,0x10
c00168d4:	89 fa                	mov    edx,edi
c00168d6:	66 ef                	out    dx,ax
c00168d8:	8d 46 02             	lea    eax,[esi+0x2]
c00168db:	83 ee 02             	sub    esi,0x2
c00168de:	25 ff ff 00 00       	and    eax,0xffff
c00168e3:	81 e6 ff ff 00 00    	and    esi,0xffff
c00168e9:	85 c9                	test   ecx,ecx
c00168eb:	0f 44 f0             	cmove  esi,eax
c00168ee:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c00168f1:	e9 c0 00 00 00       	jmp    c00169b6 <Vm::faultHandler(regs*)+0x6bb>
c00168f6:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c00168fd:	83 ec 0c             	sub    esp,0xc
c0016900:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016904:	50                   	push   eax
c0016905:	e8 13 f4 ff ff       	call   c0015d1d <Vm::inbv(unsigned short)>
c001690a:	0f b6 c0             	movzx  eax,al
c001690d:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0016910:	eb 3a                	jmp    c001694c <Vm::faultHandler(regs*)+0x651>
c0016912:	83 e5 01             	and    ebp,0x1
c0016915:	74 07                	je     c001691e <Vm::faultHandler(regs*)+0x623>
c0016917:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001691b:	ed                   	in     eax,dx
c001691c:	eb 14                	jmp    c0016932 <Vm::faultHandler(regs*)+0x637>
c001691e:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c0016921:	66 31 f6             	xor    si,si
c0016924:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0016927:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001692b:	66 ed                	in     ax,dx
c001692d:	0f b7 c0             	movzx  eax,ax
c0016930:	09 f0                	or     eax,esi
c0016932:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0016935:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0016939:	eb 7e                	jmp    c00169b9 <Vm::faultHandler(regs*)+0x6be>
c001693b:	52                   	push   edx
c001693c:	52                   	push   edx
c001693d:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0016941:	50                   	push   eax
c0016942:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016946:	50                   	push   eax
c0016947:	e8 e4 f3 ff ff       	call   c0015d30 <Vm::outbv(unsigned short, unsigned char)>
c001694c:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0016950:	eb 4f                	jmp    c00169a1 <Vm::faultHandler(regs*)+0x6a6>
c0016952:	83 e5 01             	and    ebp,0x1
c0016955:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0016958:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001695c:	74 03                	je     c0016961 <Vm::faultHandler(regs*)+0x666>
c001695e:	ef                   	out    dx,eax
c001695f:	eb d4                	jmp    c0016935 <Vm::faultHandler(regs*)+0x63a>
c0016961:	66 ef                	out    dx,ax
c0016963:	eb d0                	jmp    c0016935 <Vm::faultHandler(regs*)+0x63a>
c0016965:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0016969:	83 ec 0c             	sub    esp,0xc
c001696c:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0016973:	50                   	push   eax
c0016974:	e8 a4 f3 ff ff       	call   c0015d1d <Vm::inbv(unsigned short)>
c0016979:	0f b6 c0             	movzx  eax,al
c001697c:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001697f:	eb 1d                	jmp    c001699e <Vm::faultHandler(regs*)+0x6a3>
c0016981:	83 e5 01             	and    ebp,0x1
c0016984:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0016987:	74 03                	je     c001698c <Vm::faultHandler(regs*)+0x691>
c0016989:	ed                   	in     eax,dx
c001698a:	eb 0d                	jmp    c0016999 <Vm::faultHandler(regs*)+0x69e>
c001698c:	66 ed                	in     ax,dx
c001698e:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0016991:	0f b7 c0             	movzx  eax,ax
c0016994:	66 31 d2             	xor    dx,dx
c0016997:	09 d0                	or     eax,edx
c0016999:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001699c:	eb 18                	jmp    c00169b6 <Vm::faultHandler(regs*)+0x6bb>
c001699e:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00169a1:	83 c4 10             	add    esp,0x10
c00169a4:	eb 13                	jmp    c00169b9 <Vm::faultHandler(regs*)+0x6be>
c00169a6:	83 e5 01             	and    ebp,0x1
c00169a9:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00169ac:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00169af:	74 03                	je     c00169b4 <Vm::faultHandler(regs*)+0x6b9>
c00169b1:	ef                   	out    dx,eax
c00169b2:	eb 02                	jmp    c00169b6 <Vm::faultHandler(regs*)+0x6bb>
c00169b4:	66 ef                	out    dx,ax
c00169b6:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00169b9:	b0 01                	mov    al,0x1
c00169bb:	eb 60                	jmp    c0016a1d <Vm::faultHandler(regs*)+0x722>
c00169bd:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00169c1:	50                   	push   eax
c00169c2:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00169c6:	50                   	push   eax
c00169c7:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00169cb:	50                   	push   eax
c00169cc:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00169d0:	50                   	push   eax
c00169d1:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00169d5:	50                   	push   eax
c00169d6:	52                   	push   edx
c00169d7:	52                   	push   edx
c00169d8:	68 2c 2c 02 c0       	push   0xc0022c2c
c00169dd:	e8 6c 05 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00169e2:	83 c4 20             	add    esp,0x20
c00169e5:	83 ec 0c             	sub    esp,0xc
c00169e8:	6a 60                	push   0x60
c00169ea:	e8 2e f3 ff ff       	call   c0015d1d <Vm::inbv(unsigned short)>
c00169ef:	83 c4 10             	add    esp,0x10
c00169f2:	0f b6 d0             	movzx  edx,al
c00169f5:	83 fa 1c             	cmp    edx,0x1c
c00169f8:	74 05                	je     c00169ff <Vm::faultHandler(regs*)+0x704>
c00169fa:	83 fa 5a             	cmp    edx,0x5a
c00169fd:	75 e6                	jne    c00169e5 <Vm::faultHandler(regs*)+0x6ea>
c00169ff:	0f b6 c0             	movzx  eax,al
c0016a02:	83 f8 1c             	cmp    eax,0x1c
c0016a05:	74 05                	je     c0016a0c <Vm::faultHandler(regs*)+0x711>
c0016a07:	83 f8 5a             	cmp    eax,0x5a
c0016a0a:	75 0f                	jne    c0016a1b <Vm::faultHandler(regs*)+0x720>
c0016a0c:	83 ec 0c             	sub    esp,0xc
c0016a0f:	6a 60                	push   0x60
c0016a11:	e8 07 f3 ff ff       	call   c0015d1d <Vm::inbv(unsigned short)>
c0016a16:	83 c4 10             	add    esp,0x10
c0016a19:	eb e4                	jmp    c00169ff <Vm::faultHandler(regs*)+0x704>
c0016a1b:	31 c0                	xor    eax,eax
c0016a1d:	83 c4 2c             	add    esp,0x2c
c0016a20:	5b                   	pop    ebx
c0016a21:	5e                   	pop    esi
c0016a22:	5f                   	pop    edi
c0016a23:	5d                   	pop    ebp
c0016a24:	c3                   	ret    
c0016a25:	90                   	nop

c0016a26 <noCopro(unsigned long)>:
c0016a26:	c3                   	ret    
c0016a27:	90                   	nop

c0016a28 <CPU::close(int, int, void*)>:
c0016a28:	31 c0                	xor    eax,eax
c0016a2a:	c3                   	ret    

c0016a2b <x86ReadCMOS(unsigned char)>:
c0016a2b:	83 ec 14             	sub    esp,0x14
c0016a2e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016a32:	88 04 24             	mov    BYTE PTR [esp],al
c0016a35:	a0 6c c7 02 c0       	mov    al,ds:0xc002c76c
c0016a3a:	0f b6 c0             	movzx  eax,al
c0016a3d:	85 c0                	test   eax,eax
c0016a3f:	74 04                	je     c0016a45 <x86ReadCMOS(unsigned char)+0x1a>
c0016a41:	b2 00                	mov    dl,0x0
c0016a43:	eb 02                	jmp    c0016a47 <x86ReadCMOS(unsigned char)+0x1c>
c0016a45:	b2 80                	mov    dl,0x80
c0016a47:	8a 04 24             	mov    al,BYTE PTR [esp]
c0016a4a:	09 d0                	or     eax,edx
c0016a4c:	0f b6 c0             	movzx  eax,al
c0016a4f:	66 c7 44 24 0e 70 00 	mov    WORD PTR [esp+0xe],0x70
c0016a56:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0016a5a:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0016a5e:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c0016a63:	ee                   	out    dx,al
c0016a64:	66 c7 44 24 12 71 00 	mov    WORD PTR [esp+0x12],0x71
c0016a6b:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0016a70:	89 c2                	mov    edx,eax
c0016a72:	ec                   	in     al,dx
c0016a73:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0016a77:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0016a7b:	83 c4 14             	add    esp,0x14
c0016a7e:	c3                   	ret    

c0016a7f <x86WriteCMOS(unsigned char, unsigned char)>:
c0016a7f:	83 ec 18             	sub    esp,0x18
c0016a82:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016a86:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016a8a:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0016a8e:	88 d0                	mov    al,dl
c0016a90:	88 04 24             	mov    BYTE PTR [esp],al
c0016a93:	a0 6c c7 02 c0       	mov    al,ds:0xc002c76c
c0016a98:	0f b6 c0             	movzx  eax,al
c0016a9b:	85 c0                	test   eax,eax
c0016a9d:	74 04                	je     c0016aa3 <x86WriteCMOS(unsigned char, unsigned char)+0x24>
c0016a9f:	b2 00                	mov    dl,0x0
c0016aa1:	eb 02                	jmp    c0016aa5 <x86WriteCMOS(unsigned char, unsigned char)+0x26>
c0016aa3:	b2 80                	mov    dl,0x80
c0016aa5:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0016aa9:	09 d0                	or     eax,edx
c0016aab:	0f b6 c0             	movzx  eax,al
c0016aae:	66 c7 44 24 12 70 00 	mov    WORD PTR [esp+0x12],0x70
c0016ab5:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0016ab9:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0016abd:	66 8b 54 24 12       	mov    dx,WORD PTR [esp+0x12]
c0016ac2:	ee                   	out    dx,al
c0016ac3:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c0016ac7:	66 c7 44 24 16 71 00 	mov    WORD PTR [esp+0x16],0x71
c0016ace:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c0016ad2:	8a 44 24 15          	mov    al,BYTE PTR [esp+0x15]
c0016ad6:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c0016adb:	ee                   	out    dx,al
c0016adc:	90                   	nop
c0016add:	83 c4 18             	add    esp,0x18
c0016ae0:	c3                   	ret    

c0016ae1 <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>:
c0016ae1:	60                   	pusha  
c0016ae2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016ae6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016aea:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0016aee:	9c                   	pushf  
c0016aef:	fa                   	cli    
c0016af0:	0f 09                	wbinvd 
c0016af2:	0f 30                	wrmsr  
c0016af4:	9d                   	popf   
c0016af5:	89 c2                	mov    edx,eax
c0016af7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016afb:	89 10                	mov    DWORD PTR [eax],edx
c0016afd:	61                   	popa   
c0016afe:	90                   	nop
c0016aff:	c3                   	ret    

c0016b00 <AMD_K6_read_msr(unsigned int, REGS*)>:
c0016b00:	60                   	pusha  
c0016b01:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016b05:	89 c1                	mov    ecx,eax
c0016b07:	9c                   	pushf  
c0016b08:	fa                   	cli    
c0016b09:	0f 09                	wbinvd 
c0016b0b:	31 c0                	xor    eax,eax
c0016b0d:	31 d2                	xor    edx,edx
c0016b0f:	0f 32                	rdmsr  
c0016b11:	9d                   	popf   
c0016b12:	89 c2                	mov    edx,eax
c0016b14:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016b18:	89 10                	mov    DWORD PTR [eax],edx
c0016b1a:	61                   	popa   
c0016b1b:	90                   	nop
c0016b1c:	c3                   	ret    

c0016b1d <AMD_K6_writeback(int, int, int)>:
c0016b1d:	83 ec 20             	sub    esp,0x20
c0016b20:	a1 a0 bd 02 c0       	mov    eax,ds:0xc002bda0
c0016b25:	c1 e8 14             	shr    eax,0x14
c0016b28:	c1 e8 02             	shr    eax,0x2
c0016b2b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016b2f:	83 7c 24 24 05       	cmp    DWORD PTR [esp+0x24],0x5
c0016b34:	0f 85 9e 00 00 00    	jne    c0016bd8 <AMD_K6_writeback(int, int, int)+0xbb>
c0016b3a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016b3e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016b42:	83 7c 24 28 08       	cmp    DWORD PTR [esp+0x28],0x8
c0016b47:	75 19                	jne    c0016b62 <AMD_K6_writeback(int, int, int)+0x45>
c0016b49:	83 7c 24 2c 07       	cmp    DWORD PTR [esp+0x2c],0x7
c0016b4e:	7f 0a                	jg     c0016b5a <AMD_K6_writeback(int, int, int)+0x3d>
c0016b50:	c7 44 24 1c 07 00 00 00 	mov    DWORD PTR [esp+0x1c],0x7
c0016b58:	eb 08                	jmp    c0016b62 <AMD_K6_writeback(int, int, int)+0x45>
c0016b5a:	c7 44 24 1c 09 00 00 00 	mov    DWORD PTR [esp+0x1c],0x9
c0016b62:	83 7c 24 1c 06       	cmp    DWORD PTR [esp+0x1c],0x6
c0016b67:	7c 6e                	jl     c0016bd7 <AMD_K6_writeback(int, int, int)+0xba>
c0016b69:	83 7c 24 1c 07       	cmp    DWORD PTR [esp+0x1c],0x7
c0016b6e:	7e 09                	jle    c0016b79 <AMD_K6_writeback(int, int, int)+0x5c>
c0016b70:	83 7c 24 1c 09       	cmp    DWORD PTR [esp+0x1c],0x9
c0016b75:	74 36                	je     c0016bad <AMD_K6_writeback(int, int, int)+0x90>
c0016b77:	eb 5e                	jmp    c0016bd7 <AMD_K6_writeback(int, int, int)+0xba>
c0016b79:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016b7d:	50                   	push   eax
c0016b7e:	68 82 00 00 c0       	push   0xc0000082
c0016b83:	e8 78 ff ff ff       	call   c0016b00 <AMD_K6_read_msr(unsigned int, REGS*)>
c0016b88:	83 c4 08             	add    esp,0x8
c0016b8b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016b8f:	d1 e0                	shl    eax,1
c0016b91:	83 e0 7f             	and    eax,0x7f
c0016b94:	89 c2                	mov    edx,eax
c0016b96:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016b9a:	50                   	push   eax
c0016b9b:	6a 00                	push   0x0
c0016b9d:	52                   	push   edx
c0016b9e:	68 82 00 00 c0       	push   0xc0000082
c0016ba3:	e8 39 ff ff ff       	call   c0016ae1 <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>
c0016ba8:	83 c4 10             	add    esp,0x10
c0016bab:	eb 2b                	jmp    c0016bd8 <AMD_K6_writeback(int, int, int)+0xbb>
c0016bad:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016bb1:	50                   	push   eax
c0016bb2:	68 82 00 00 c0       	push   0xc0000082
c0016bb7:	e8 44 ff ff ff       	call   c0016b00 <AMD_K6_read_msr(unsigned int, REGS*)>
c0016bbc:	83 c4 08             	add    esp,0x8
c0016bbf:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016bc3:	50                   	push   eax
c0016bc4:	6a 00                	push   0x0
c0016bc6:	6a 00                	push   0x0
c0016bc8:	68 82 00 00 c0       	push   0xc0000082
c0016bcd:	e8 0f ff ff ff       	call   c0016ae1 <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>
c0016bd2:	83 c4 10             	add    esp,0x10
c0016bd5:	eb 01                	jmp    c0016bd8 <AMD_K6_writeback(int, int, int)+0xbb>
c0016bd7:	90                   	nop
c0016bd8:	90                   	nop
c0016bd9:	83 c4 20             	add    esp,0x20
c0016bdc:	c3                   	ret    

c0016bdd <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0016bdd:	56                   	push   esi
c0016bde:	53                   	push   ebx
c0016bdf:	a1 a0 44 02 c0       	mov    eax,ds:0xc00244a0
c0016be4:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0016be8:	75 32                	jne    c0016c1c <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0016bea:	8b 15 60 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c760
c0016bf0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016bf4:	89 10                	mov    DWORD PTR [eax],edx
c0016bf6:	8b 15 5c c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c75c
c0016bfc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016c00:	89 10                	mov    DWORD PTR [eax],edx
c0016c02:	8b 15 58 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c758
c0016c08:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016c0c:	89 10                	mov    DWORD PTR [eax],edx
c0016c0e:	8b 15 54 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c754
c0016c14:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016c18:	89 10                	mov    DWORD PTR [eax],edx
c0016c1a:	eb 5c                	jmp    c0016c78 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x9b>
c0016c1c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016c20:	ba 00 00 00 00       	mov    edx,0x0
c0016c25:	89 d1                	mov    ecx,edx
c0016c27:	0f a2                	cpuid  
c0016c29:	89 c6                	mov    esi,eax
c0016c2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c2f:	89 30                	mov    DWORD PTR [eax],esi
c0016c31:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016c35:	89 18                	mov    DWORD PTR [eax],ebx
c0016c37:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016c3b:	89 08                	mov    DWORD PTR [eax],ecx
c0016c3d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016c41:	89 10                	mov    DWORD PTR [eax],edx
c0016c43:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016c47:	a3 a0 44 02 c0       	mov    ds:0xc00244a0,eax
c0016c4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c50:	8b 00                	mov    eax,DWORD PTR [eax]
c0016c52:	a3 60 c7 02 c0       	mov    ds:0xc002c760,eax
c0016c57:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016c5b:	8b 00                	mov    eax,DWORD PTR [eax]
c0016c5d:	a3 5c c7 02 c0       	mov    ds:0xc002c75c,eax
c0016c62:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016c66:	8b 00                	mov    eax,DWORD PTR [eax]
c0016c68:	a3 58 c7 02 c0       	mov    ds:0xc002c758,eax
c0016c6d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016c71:	8b 00                	mov    eax,DWORD PTR [eax]
c0016c73:	a3 54 c7 02 c0       	mov    ds:0xc002c754,eax
c0016c78:	5b                   	pop    ebx
c0016c79:	5e                   	pop    esi
c0016c7a:	c3                   	ret    

c0016c7b <cpuidCheckEDX(unsigned int)>:
c0016c7b:	83 ec 10             	sub    esp,0x10
c0016c7e:	89 e0                	mov    eax,esp
c0016c80:	50                   	push   eax
c0016c81:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016c85:	50                   	push   eax
c0016c86:	8d 44 24 10          	lea    eax,[esp+0x10]
c0016c8a:	50                   	push   eax
c0016c8b:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016c8f:	50                   	push   eax
c0016c90:	6a 01                	push   0x1
c0016c92:	e8 46 ff ff ff       	call   c0016bdd <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0016c97:	83 c4 14             	add    esp,0x14
c0016c9a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0016c9d:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0016ca1:	0f 95 c0             	setne  al
c0016ca4:	83 c4 10             	add    esp,0x10
c0016ca7:	c3                   	ret    

c0016ca8 <cpuidCheckECX(unsigned int)>:
c0016ca8:	83 ec 10             	sub    esp,0x10
c0016cab:	89 e0                	mov    eax,esp
c0016cad:	50                   	push   eax
c0016cae:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016cb2:	50                   	push   eax
c0016cb3:	8d 44 24 10          	lea    eax,[esp+0x10]
c0016cb7:	50                   	push   eax
c0016cb8:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016cbc:	50                   	push   eax
c0016cbd:	6a 01                	push   0x1
c0016cbf:	e8 19 ff ff ff       	call   c0016bdd <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0016cc4:	83 c4 14             	add    esp,0x14
c0016cc7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016ccb:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0016ccf:	0f 95 c0             	setne  al
c0016cd2:	83 c4 10             	add    esp,0x10
c0016cd5:	c3                   	ret    

c0016cd6 <cpuidCheckExtendedEBX(unsigned int)>:
c0016cd6:	83 ec 10             	sub    esp,0x10
c0016cd9:	89 e0                	mov    eax,esp
c0016cdb:	50                   	push   eax
c0016cdc:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016ce0:	50                   	push   eax
c0016ce1:	8d 44 24 10          	lea    eax,[esp+0x10]
c0016ce5:	50                   	push   eax
c0016ce6:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016cea:	50                   	push   eax
c0016ceb:	6a 07                	push   0x7
c0016ced:	e8 eb fe ff ff       	call   c0016bdd <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0016cf2:	83 c4 14             	add    esp,0x14
c0016cf5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016cf9:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0016cfd:	0f 95 c0             	setne  al
c0016d00:	83 c4 10             	add    esp,0x10
c0016d03:	c3                   	ret    

c0016d04 <cpuidCheckExtendedECX(unsigned int)>:
c0016d04:	83 ec 10             	sub    esp,0x10
c0016d07:	89 e0                	mov    eax,esp
c0016d09:	50                   	push   eax
c0016d0a:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016d0e:	50                   	push   eax
c0016d0f:	8d 44 24 10          	lea    eax,[esp+0x10]
c0016d13:	50                   	push   eax
c0016d14:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016d18:	50                   	push   eax
c0016d19:	6a 07                	push   0x7
c0016d1b:	e8 bd fe ff ff       	call   c0016bdd <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0016d20:	83 c4 14             	add    esp,0x14
c0016d23:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016d27:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0016d2b:	0f 95 c0             	setne  al
c0016d2e:	83 c4 10             	add    esp,0x10
c0016d31:	c3                   	ret    

c0016d32 <HalDetectFeatures()>:
c0016d32:	57                   	push   edi
c0016d33:	56                   	push   esi
c0016d34:	53                   	push   ebx
c0016d35:	81 ec 90 00 00 00    	sub    esp,0x90
c0016d3b:	83 ec 04             	sub    esp,0x4
c0016d3e:	6a 08                	push   0x8
c0016d40:	6a 00                	push   0x0
c0016d42:	68 8c c7 02 c0       	push   0xc002c78c
c0016d47:	e8 a4 97 fe ff       	call   c00004f0 <memset>
c0016d4c:	83 c4 10             	add    esp,0x10
c0016d4f:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0016d54:	83 c8 04             	or     eax,0x4
c0016d57:	a2 8c c7 02 c0       	mov    ds:0xc002c78c,al
c0016d5c:	e8 98 94 fe ff       	call   c00001f9 <detectCPUID>
c0016d61:	85 c0                	test   eax,eax
c0016d63:	0f 95 c0             	setne  al
c0016d66:	83 e0 01             	and    eax,0x1
c0016d69:	83 e0 01             	and    eax,0x1
c0016d6c:	8d 0c 00             	lea    ecx,[eax+eax*1]
c0016d6f:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0016d74:	83 e0 fd             	and    eax,0xfffffffd
c0016d77:	88 c2                	mov    dl,al
c0016d79:	88 c8                	mov    al,cl
c0016d7b:	09 d0                	or     eax,edx
c0016d7d:	a2 8c c7 02 c0       	mov    ds:0xc002c78c,al
c0016d82:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0016d87:	83 e0 fb             	and    eax,0xfffffffb
c0016d8a:	a2 8c c7 02 c0       	mov    ds:0xc002c78c,al
c0016d8f:	83 ec 0c             	sub    esp,0xc
c0016d92:	68 8c 2c 02 c0       	push   0xc0022c8c
c0016d97:	e8 b2 01 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0016d9c:	83 c4 10             	add    esp,0x10
c0016d9f:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0016da4:	83 e0 02             	and    eax,0x2
c0016da7:	0f b6 c0             	movzx  eax,al
c0016daa:	85 c0                	test   eax,eax
c0016dac:	0f 84 7f 02 00 00    	je     c0017031 <HalDetectFeatures()+0x2ff>
c0016db2:	83 ec 0c             	sub    esp,0xc
c0016db5:	6a 20                	push   0x20
c0016db7:	e8 bf fe ff ff       	call   c0016c7b <cpuidCheckEDX(unsigned int)>
c0016dbc:	83 c4 10             	add    esp,0x10
c0016dbf:	83 e0 01             	and    eax,0x1
c0016dc2:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0016dc9:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0016dce:	83 e0 f7             	and    eax,0xfffffff7
c0016dd1:	88 c2                	mov    dl,al
c0016dd3:	88 c8                	mov    al,cl
c0016dd5:	09 d0                	or     eax,edx
c0016dd7:	a2 8c c7 02 c0       	mov    ds:0xc002c78c,al
c0016ddc:	83 ec 0c             	sub    esp,0xc
c0016ddf:	68 00 00 00 04       	push   0x4000000
c0016de4:	e8 92 fe ff ff       	call   c0016c7b <cpuidCheckEDX(unsigned int)>
c0016de9:	83 c4 10             	add    esp,0x10
c0016dec:	89 c1                	mov    ecx,eax
c0016dee:	83 e1 01             	and    ecx,0x1
c0016df1:	a0 8d c7 02 c0       	mov    al,ds:0xc002c78d
c0016df6:	83 e0 fe             	and    eax,0xfffffffe
c0016df9:	88 c2                	mov    dl,al
c0016dfb:	88 c8                	mov    al,cl
c0016dfd:	09 d0                	or     eax,edx
c0016dff:	a2 8d c7 02 c0       	mov    ds:0xc002c78d,al
c0016e04:	83 ec 0c             	sub    esp,0xc
c0016e07:	68 80 00 00 00       	push   0x80
c0016e0c:	e8 6a fe ff ff       	call   c0016c7b <cpuidCheckEDX(unsigned int)>
c0016e11:	83 c4 10             	add    esp,0x10
c0016e14:	89 c1                	mov    ecx,eax
c0016e16:	c1 e1 07             	shl    ecx,0x7
c0016e19:	a0 8d c7 02 c0       	mov    al,ds:0xc002c78d
c0016e1e:	83 e0 7f             	and    eax,0x7f
c0016e21:	88 c2                	mov    dl,al
c0016e23:	88 c8                	mov    al,cl
c0016e25:	09 d0                	or     eax,edx
c0016e27:	a2 8d c7 02 c0       	mov    ds:0xc002c78d,al
c0016e2c:	83 ec 0c             	sub    esp,0xc
c0016e2f:	68 00 00 80 00       	push   0x800000
c0016e34:	e8 42 fe ff ff       	call   c0016c7b <cpuidCheckEDX(unsigned int)>
c0016e39:	83 c4 10             	add    esp,0x10
c0016e3c:	83 e0 01             	and    eax,0x1
c0016e3f:	89 c1                	mov    ecx,eax
c0016e41:	c1 e1 05             	shl    ecx,0x5
c0016e44:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0016e49:	83 e0 df             	and    eax,0xffffffdf
c0016e4c:	88 c2                	mov    dl,al
c0016e4e:	88 c8                	mov    al,cl
c0016e50:	09 d0                	or     eax,edx
c0016e52:	a2 8c c7 02 c0       	mov    ds:0xc002c78c,al
c0016e57:	a1 90 bd 02 c0       	mov    eax,ds:0xc002bd90
c0016e5c:	83 e0 01             	and    eax,0x1
c0016e5f:	75 0c                	jne    c0016e6d <HalDetectFeatures()+0x13b>
c0016e61:	a1 90 bd 02 c0       	mov    eax,ds:0xc002bd90
c0016e66:	25 00 04 00 00       	and    eax,0x400
c0016e6b:	74 0f                	je     c0016e7c <HalDetectFeatures()+0x14a>
c0016e6d:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0016e72:	83 e0 fe             	and    eax,0xfffffffe
c0016e75:	a2 8c c7 02 c0       	mov    ds:0xc002c78c,al
c0016e7a:	eb 28                	jmp    c0016ea4 <HalDetectFeatures()+0x172>
c0016e7c:	83 ec 0c             	sub    esp,0xc
c0016e7f:	68 00 02 00 00       	push   0x200
c0016e84:	e8 f2 fd ff ff       	call   c0016c7b <cpuidCheckEDX(unsigned int)>
c0016e89:	83 c4 10             	add    esp,0x10
c0016e8c:	89 c1                	mov    ecx,eax
c0016e8e:	83 e1 01             	and    ecx,0x1
c0016e91:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0016e96:	83 e0 fe             	and    eax,0xfffffffe
c0016e99:	88 c2                	mov    dl,al
c0016e9b:	88 c8                	mov    al,cl
c0016e9d:	09 d0                	or     eax,edx
c0016e9f:	a2 8c c7 02 c0       	mov    ds:0xc002c78c,al
c0016ea4:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0016ea9:	83 e0 01             	and    eax,0x1
c0016eac:	0f b6 c0             	movzx  eax,al
c0016eaf:	85 c0                	test   eax,eax
c0016eb1:	74 1c                	je     c0016ecf <HalDetectFeatures()+0x19d>
c0016eb3:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0016eb8:	83 e0 08             	and    eax,0x8
c0016ebb:	0f b6 c0             	movzx  eax,al
c0016ebe:	85 c0                	test   eax,eax
c0016ec0:	75 0d                	jne    c0016ecf <HalDetectFeatures()+0x19d>
c0016ec2:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0016ec7:	83 e0 fe             	and    eax,0xfffffffe
c0016eca:	a2 8c c7 02 c0       	mov    ds:0xc002c78c,al
c0016ecf:	83 ec 0c             	sub    esp,0xc
c0016ed2:	68 9e 2c 02 c0       	push   0xc0022c9e
c0016ed7:	e8 72 00 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0016edc:	83 c4 10             	add    esp,0x10
c0016edf:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0016ee4:	83 e0 fe             	and    eax,0xfffffffe
c0016ee7:	a2 8c c7 02 c0       	mov    ds:0xc002c78c,al
c0016eec:	c6 84 24 8f 00 00 00 01 	mov    BYTE PTR [esp+0x8f],0x1
c0016ef4:	c6 84 24 8f 00 00 00 00 	mov    BYTE PTR [esp+0x8f],0x0
c0016efc:	0f b6 84 24 8f 00 00 00 	movzx  eax,BYTE PTR [esp+0x8f]
c0016f04:	85 c0                	test   eax,eax
c0016f06:	0f 84 ab 00 00 00    	je     c0016fb7 <HalDetectFeatures()+0x285>
c0016f0c:	83 ec 0c             	sub    esp,0xc
c0016f0f:	6a 01                	push   0x1
c0016f11:	e8 92 fd ff ff       	call   c0016ca8 <cpuidCheckECX(unsigned int)>
c0016f16:	83 c4 10             	add    esp,0x10
c0016f19:	83 e0 01             	and    eax,0x1
c0016f1c:	8d 0c 00             	lea    ecx,[eax+eax*1]
c0016f1f:	a0 8d c7 02 c0       	mov    al,ds:0xc002c78d
c0016f24:	83 e0 fd             	and    eax,0xfffffffd
c0016f27:	88 c2                	mov    dl,al
c0016f29:	88 c8                	mov    al,cl
c0016f2b:	09 d0                	or     eax,edx
c0016f2d:	a2 8d c7 02 c0       	mov    ds:0xc002c78d,al
c0016f32:	83 ec 0c             	sub    esp,0xc
c0016f35:	68 00 02 00 00       	push   0x200
c0016f3a:	e8 69 fd ff ff       	call   c0016ca8 <cpuidCheckECX(unsigned int)>
c0016f3f:	83 c4 10             	add    esp,0x10
c0016f42:	83 e0 01             	and    eax,0x1
c0016f45:	89 c1                	mov    ecx,eax
c0016f47:	c1 e1 04             	shl    ecx,0x4
c0016f4a:	a0 8d c7 02 c0       	mov    al,ds:0xc002c78d
c0016f4f:	83 e0 ef             	and    eax,0xffffffef
c0016f52:	88 c2                	mov    dl,al
c0016f54:	88 c8                	mov    al,cl
c0016f56:	09 d0                	or     eax,edx
c0016f58:	a2 8d c7 02 c0       	mov    ds:0xc002c78d,al
c0016f5d:	83 ec 0c             	sub    esp,0xc
c0016f60:	68 00 00 08 00       	push   0x80000
c0016f65:	e8 3e fd ff ff       	call   c0016ca8 <cpuidCheckECX(unsigned int)>
c0016f6a:	83 c4 10             	add    esp,0x10
c0016f6d:	83 e0 01             	and    eax,0x1
c0016f70:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
c0016f77:	a0 8d c7 02 c0       	mov    al,ds:0xc002c78d
c0016f7c:	83 e0 fb             	and    eax,0xfffffffb
c0016f7f:	88 c2                	mov    dl,al
c0016f81:	88 c8                	mov    al,cl
c0016f83:	09 d0                	or     eax,edx
c0016f85:	a2 8d c7 02 c0       	mov    ds:0xc002c78d,al
c0016f8a:	83 ec 0c             	sub    esp,0xc
c0016f8d:	68 00 00 10 00       	push   0x100000
c0016f92:	e8 11 fd ff ff       	call   c0016ca8 <cpuidCheckECX(unsigned int)>
c0016f97:	83 c4 10             	add    esp,0x10
c0016f9a:	83 e0 01             	and    eax,0x1
c0016f9d:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0016fa4:	a0 8d c7 02 c0       	mov    al,ds:0xc002c78d
c0016fa9:	83 e0 f7             	and    eax,0xfffffff7
c0016fac:	88 c2                	mov    dl,al
c0016fae:	88 c8                	mov    al,cl
c0016fb0:	09 d0                	or     eax,edx
c0016fb2:	a2 8d c7 02 c0       	mov    ds:0xc002c78d,al
c0016fb7:	83 ec 0c             	sub    esp,0xc
c0016fba:	8d 44 24 24          	lea    eax,[esp+0x24]
c0016fbe:	50                   	push   eax
c0016fbf:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0016fc3:	50                   	push   eax
c0016fc4:	8d 44 24 34          	lea    eax,[esp+0x34]
c0016fc8:	50                   	push   eax
c0016fc9:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0016fcd:	50                   	push   eax
c0016fce:	68 00 00 00 80       	push   0x80000000
c0016fd3:	e8 05 fc ff ff       	call   c0016bdd <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0016fd8:	83 c4 20             	add    esp,0x20
c0016fdb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016fdf:	3d 00 00 00 80       	cmp    eax,0x80000000
c0016fe4:	76 4b                	jbe    c0017031 <HalDetectFeatures()+0x2ff>
c0016fe6:	83 ec 0c             	sub    esp,0xc
c0016fe9:	8d 44 24 24          	lea    eax,[esp+0x24]
c0016fed:	50                   	push   eax
c0016fee:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0016ff2:	50                   	push   eax
c0016ff3:	8d 44 24 34          	lea    eax,[esp+0x34]
c0016ff7:	50                   	push   eax
c0016ff8:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0016ffc:	50                   	push   eax
c0016ffd:	68 01 00 00 80       	push   0x80000001
c0017002:	e8 d6 fb ff ff       	call   c0016bdd <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0017007:	83 c4 20             	add    esp,0x20
c001700a:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c001700f:	83 e0 bf             	and    eax,0xffffffbf
c0017012:	a2 8c c7 02 c0       	mov    ds:0xc002c78c,al
c0017017:	a0 8e c7 02 c0       	mov    al,ds:0xc002c78e
c001701c:	83 e0 fd             	and    eax,0xfffffffd
c001701f:	a2 8e c7 02 c0       	mov    ds:0xc002c78e,al
c0017024:	a0 8e c7 02 c0       	mov    al,ds:0xc002c78e
c0017029:	83 e0 fe             	and    eax,0xfffffffe
c001702c:	a2 8e c7 02 c0       	mov    ds:0xc002c78e,al
c0017031:	a1 90 bd 02 c0       	mov    eax,ds:0xc002bd90
c0017036:	25 00 04 00 00       	and    eax,0x400
c001703b:	74 0d                	je     c001704a <HalDetectFeatures()+0x318>
c001703d:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0017042:	83 e0 fb             	and    eax,0xfffffffb
c0017045:	a2 8c c7 02 c0       	mov    ds:0xc002c78c,al
c001704a:	c6 05 88 c7 02 c0 01 	mov    BYTE PTR ds:0xc002c788,0x1
c0017051:	83 ec 04             	sub    esp,0x4
c0017054:	6a 0d                	push   0xd
c0017056:	6a 00                	push   0x0
c0017058:	68 70 c7 02 c0       	push   0xc002c770
c001705d:	e8 8e 94 fe ff       	call   c00004f0 <memset>
c0017062:	83 c4 10             	add    esp,0x10
c0017065:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c001706a:	83 e0 02             	and    eax,0x2
c001706d:	0f b6 c0             	movzx  eax,al
c0017070:	85 c0                	test   eax,eax
c0017072:	0f 84 16 08 00 00    	je     c001788e <HalDetectFeatures()+0xb5c>
c0017078:	83 ec 0c             	sub    esp,0xc
c001707b:	6a 10                	push   0x10
c001707d:	e8 f9 fb ff ff       	call   c0016c7b <cpuidCheckEDX(unsigned int)>
c0017082:	83 c4 10             	add    esp,0x10
c0017085:	83 e0 01             	and    eax,0x1
c0017088:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c001708f:	a0 8e c7 02 c0       	mov    al,ds:0xc002c78e
c0017094:	83 e0 f7             	and    eax,0xfffffff7
c0017097:	88 c2                	mov    dl,al
c0017099:	88 c8                	mov    al,cl
c001709b:	09 d0                	or     eax,edx
c001709d:	a2 8e c7 02 c0       	mov    ds:0xc002c78e,al
c00170a2:	83 ec 0c             	sub    esp,0xc
c00170a5:	6a 40                	push   0x40
c00170a7:	e8 cf fb ff ff       	call   c0016c7b <cpuidCheckEDX(unsigned int)>
c00170ac:	83 c4 10             	add    esp,0x10
c00170af:	83 e0 01             	and    eax,0x1
c00170b2:	89 c1                	mov    ecx,eax
c00170b4:	c1 e1 04             	shl    ecx,0x4
c00170b7:	a0 8e c7 02 c0       	mov    al,ds:0xc002c78e
c00170bc:	83 e0 ef             	and    eax,0xffffffef
c00170bf:	88 c2                	mov    dl,al
c00170c1:	88 c8                	mov    al,cl
c00170c3:	09 d0                	or     eax,edx
c00170c5:	a2 8e c7 02 c0       	mov    ds:0xc002c78e,al
c00170ca:	83 ec 0c             	sub    esp,0xc
c00170cd:	6a 08                	push   0x8
c00170cf:	e8 a7 fb ff ff       	call   c0016c7b <cpuidCheckEDX(unsigned int)>
c00170d4:	83 c4 10             	add    esp,0x10
c00170d7:	83 e0 01             	and    eax,0x1
c00170da:	89 c1                	mov    ecx,eax
c00170dc:	c1 e1 05             	shl    ecx,0x5
c00170df:	a0 8e c7 02 c0       	mov    al,ds:0xc002c78e
c00170e4:	83 e0 df             	and    eax,0xffffffdf
c00170e7:	88 c2                	mov    dl,al
c00170e9:	88 c8                	mov    al,cl
c00170eb:	09 d0                	or     eax,edx
c00170ed:	a2 8e c7 02 c0       	mov    ds:0xc002c78e,al
c00170f2:	83 ec 0c             	sub    esp,0xc
c00170f5:	68 00 20 00 00       	push   0x2000
c00170fa:	e8 7c fb ff ff       	call   c0016c7b <cpuidCheckEDX(unsigned int)>
c00170ff:	83 c4 10             	add    esp,0x10
c0017102:	83 e0 01             	and    eax,0x1
c0017105:	89 c1                	mov    ecx,eax
c0017107:	c1 e1 06             	shl    ecx,0x6
c001710a:	a0 8e c7 02 c0       	mov    al,ds:0xc002c78e
c001710f:	83 e0 bf             	and    eax,0xffffffbf
c0017112:	88 c2                	mov    dl,al
c0017114:	88 c8                	mov    al,cl
c0017116:	09 d0                	or     eax,edx
c0017118:	a2 8e c7 02 c0       	mov    ds:0xc002c78e,al
c001711d:	83 ec 0c             	sub    esp,0xc
c0017120:	68 00 00 01 00       	push   0x10000
c0017125:	e8 51 fb ff ff       	call   c0016c7b <cpuidCheckEDX(unsigned int)>
c001712a:	83 c4 10             	add    esp,0x10
c001712d:	89 c1                	mov    ecx,eax
c001712f:	c1 e1 07             	shl    ecx,0x7
c0017132:	a0 8e c7 02 c0       	mov    al,ds:0xc002c78e
c0017137:	83 e0 7f             	and    eax,0x7f
c001713a:	88 c2                	mov    dl,al
c001713c:	88 c8                	mov    al,cl
c001713e:	09 d0                	or     eax,edx
c0017140:	a2 8e c7 02 c0       	mov    ds:0xc002c78e,al
c0017145:	83 ec 0c             	sub    esp,0xc
c0017148:	6a 01                	push   0x1
c001714a:	e8 2c fb ff ff       	call   c0016c7b <cpuidCheckEDX(unsigned int)>
c001714f:	83 c4 10             	add    esp,0x10
c0017152:	83 e0 01             	and    eax,0x1
c0017155:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c001715c:	a0 90 c7 02 c0       	mov    al,ds:0xc002c790
c0017161:	83 e0 f7             	and    eax,0xfffffff7
c0017164:	88 c2                	mov    dl,al
c0017166:	88 c8                	mov    al,cl
c0017168:	09 d0                	or     eax,edx
c001716a:	a2 90 c7 02 c0       	mov    ds:0xc002c790,al
c001716f:	83 ec 0c             	sub    esp,0xc
c0017172:	68 00 08 00 00       	push   0x800
c0017177:	e8 ff fa ff ff       	call   c0016c7b <cpuidCheckEDX(unsigned int)>
c001717c:	83 c4 10             	add    esp,0x10
c001717f:	89 c1                	mov    ecx,eax
c0017181:	83 e1 01             	and    ecx,0x1
c0017184:	a0 90 c7 02 c0       	mov    al,ds:0xc002c790
c0017189:	83 e0 fe             	and    eax,0xfffffffe
c001718c:	88 c2                	mov    dl,al
c001718e:	88 c8                	mov    al,cl
c0017190:	09 d0                	or     eax,edx
c0017192:	a2 90 c7 02 c0       	mov    ds:0xc002c790,al
c0017197:	a0 8e c7 02 c0       	mov    al,ds:0xc002c78e
c001719c:	83 e0 40             	and    eax,0x40
c001719f:	0f b6 c0             	movzx  eax,al
c00171a2:	85 c0                	test   eax,eax
c00171a4:	74 0a                	je     c00171b0 <HalDetectFeatures()+0x47e>
c00171a6:	c7 05 68 c7 02 c0 00 01 00 00 	mov    DWORD PTR ds:0xc002c768,0x100
c00171b0:	a0 8e c7 02 c0       	mov    al,ds:0xc002c78e
c00171b5:	83 e0 80             	and    eax,0xffffff80
c00171b8:	0f b6 c0             	movzx  eax,al
c00171bb:	85 c0                	test   eax,eax
c00171bd:	74 0a                	je     c00171c9 <HalDetectFeatures()+0x497>
c00171bf:	c7 05 64 c7 02 c0 80 00 00 00 	mov    DWORD PTR ds:0xc002c764,0x80
c00171c9:	83 ec 0c             	sub    esp,0xc
c00171cc:	8d 44 24 14          	lea    eax,[esp+0x14]
c00171d0:	50                   	push   eax
c00171d1:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00171d5:	50                   	push   eax
c00171d6:	8d 44 24 24          	lea    eax,[esp+0x24]
c00171da:	50                   	push   eax
c00171db:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00171df:	50                   	push   eax
c00171e0:	6a 00                	push   0x0
c00171e2:	e8 f6 f9 ff ff       	call   c0016bdd <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00171e7:	83 c4 20             	add    esp,0x20
c00171ea:	c7 44 24 48 70 c7 02 c0 	mov    DWORD PTR [esp+0x48],0xc002c770
c00171f2:	8d 44 24 10          	lea    eax,[esp+0x10]
c00171f6:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00171fa:	c7 44 24 40 04 00 00 00 	mov    DWORD PTR [esp+0x40],0x4
c0017202:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0017206:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001720a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001720e:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0017212:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0017216:	89 c6                	mov    esi,eax
c0017218:	89 d7                	mov    edi,edx
c001721a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001721c:	89 c8                	mov    eax,ecx
c001721e:	89 fa                	mov    edx,edi
c0017220:	89 f3                	mov    ebx,esi
c0017222:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c0017226:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001722a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001722e:	b8 74 c7 02 c0       	mov    eax,0xc002c774
c0017233:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0017237:	8d 44 24 08          	lea    eax,[esp+0x8]
c001723b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c001723f:	c7 44 24 5c 04 00 00 00 	mov    DWORD PTR [esp+0x5c],0x4
c0017247:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c001724b:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c001724f:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0017253:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0017257:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c001725b:	89 c6                	mov    esi,eax
c001725d:	89 d7                	mov    edi,edx
c001725f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017261:	89 c8                	mov    eax,ecx
c0017263:	89 fa                	mov    edx,edi
c0017265:	89 f3                	mov    ebx,esi
c0017267:	89 5c 24 54          	mov    DWORD PTR [esp+0x54],ebx
c001726b:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c001726f:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0017273:	b8 78 c7 02 c0       	mov    eax,0xc002c778
c0017278:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c001727f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017283:	89 44 24 7c          	mov    DWORD PTR [esp+0x7c],eax
c0017287:	c7 44 24 78 04 00 00 00 	mov    DWORD PTR [esp+0x78],0x4
c001728f:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0017296:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c001729a:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c001729e:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c00172a5:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c00172a9:	89 c6                	mov    esi,eax
c00172ab:	89 d7                	mov    edi,edx
c00172ad:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00172af:	89 c8                	mov    eax,ecx
c00172b1:	89 fa                	mov    edx,edi
c00172b3:	89 f3                	mov    ebx,esi
c00172b5:	89 5c 24 70          	mov    DWORD PTR [esp+0x70],ebx
c00172b9:	89 54 24 6c          	mov    DWORD PTR [esp+0x6c],edx
c00172bd:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c00172c1:	83 ec 08             	sub    esp,0x8
c00172c4:	68 b0 2c 02 c0       	push   0xc0022cb0
c00172c9:	68 70 c7 02 c0       	push   0xc002c770
c00172ce:	e8 ad 94 fe ff       	call   c0000780 <strcmp>
c00172d3:	83 c4 10             	add    esp,0x10
c00172d6:	85 c0                	test   eax,eax
c00172d8:	74 19                	je     c00172f3 <HalDetectFeatures()+0x5c1>
c00172da:	83 ec 08             	sub    esp,0x8
c00172dd:	68 bd 2c 02 c0       	push   0xc0022cbd
c00172e2:	68 70 c7 02 c0       	push   0xc002c770
c00172e7:	e8 94 94 fe ff       	call   c0000780 <strcmp>
c00172ec:	83 c4 10             	add    esp,0x10
c00172ef:	85 c0                	test   eax,eax
c00172f1:	75 04                	jne    c00172f7 <HalDetectFeatures()+0x5c5>
c00172f3:	b0 01                	mov    al,0x1
c00172f5:	eb 02                	jmp    c00172f9 <HalDetectFeatures()+0x5c7>
c00172f7:	b0 00                	mov    al,0x0
c00172f9:	0f b6 c0             	movzx  eax,al
c00172fc:	85 c0                	test   eax,eax
c00172fe:	74 0f                	je     c001730f <HalDetectFeatures()+0x5dd>
c0017300:	c7 05 84 c7 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc002c784,0x2
c001730a:	e9 0d 03 00 00       	jmp    c001761c <HalDetectFeatures()+0x8ea>
c001730f:	83 ec 08             	sub    esp,0x8
c0017312:	68 ca 2c 02 c0       	push   0xc0022cca
c0017317:	68 70 c7 02 c0       	push   0xc002c770
c001731c:	e8 5f 94 fe ff       	call   c0000780 <strcmp>
c0017321:	83 c4 10             	add    esp,0x10
c0017324:	85 c0                	test   eax,eax
c0017326:	74 19                	je     c0017341 <HalDetectFeatures()+0x60f>
c0017328:	83 ec 08             	sub    esp,0x8
c001732b:	68 d7 2c 02 c0       	push   0xc0022cd7
c0017330:	68 70 c7 02 c0       	push   0xc002c770
c0017335:	e8 46 94 fe ff       	call   c0000780 <strcmp>
c001733a:	83 c4 10             	add    esp,0x10
c001733d:	85 c0                	test   eax,eax
c001733f:	75 04                	jne    c0017345 <HalDetectFeatures()+0x613>
c0017341:	b0 01                	mov    al,0x1
c0017343:	eb 02                	jmp    c0017347 <HalDetectFeatures()+0x615>
c0017345:	b0 00                	mov    al,0x0
c0017347:	0f b6 c0             	movzx  eax,al
c001734a:	85 c0                	test   eax,eax
c001734c:	74 0f                	je     c001735d <HalDetectFeatures()+0x62b>
c001734e:	c7 05 84 c7 02 c0 04 00 00 00 	mov    DWORD PTR ds:0xc002c784,0x4
c0017358:	e9 bf 02 00 00       	jmp    c001761c <HalDetectFeatures()+0x8ea>
c001735d:	83 ec 08             	sub    esp,0x8
c0017360:	68 e4 2c 02 c0       	push   0xc0022ce4
c0017365:	68 70 c7 02 c0       	push   0xc002c770
c001736a:	e8 11 94 fe ff       	call   c0000780 <strcmp>
c001736f:	83 c4 10             	add    esp,0x10
c0017372:	85 c0                	test   eax,eax
c0017374:	74 19                	je     c001738f <HalDetectFeatures()+0x65d>
c0017376:	83 ec 08             	sub    esp,0x8
c0017379:	68 f1 2c 02 c0       	push   0xc0022cf1
c001737e:	68 70 c7 02 c0       	push   0xc002c770
c0017383:	e8 f8 93 fe ff       	call   c0000780 <strcmp>
c0017388:	83 c4 10             	add    esp,0x10
c001738b:	85 c0                	test   eax,eax
c001738d:	75 04                	jne    c0017393 <HalDetectFeatures()+0x661>
c001738f:	b0 01                	mov    al,0x1
c0017391:	eb 02                	jmp    c0017395 <HalDetectFeatures()+0x663>
c0017393:	b0 00                	mov    al,0x0
c0017395:	0f b6 c0             	movzx  eax,al
c0017398:	85 c0                	test   eax,eax
c001739a:	74 0f                	je     c00173ab <HalDetectFeatures()+0x679>
c001739c:	c7 05 84 c7 02 c0 05 00 00 00 	mov    DWORD PTR ds:0xc002c784,0x5
c00173a6:	e9 71 02 00 00       	jmp    c001761c <HalDetectFeatures()+0x8ea>
c00173ab:	83 ec 08             	sub    esp,0x8
c00173ae:	68 fe 2c 02 c0       	push   0xc0022cfe
c00173b3:	68 70 c7 02 c0       	push   0xc002c770
c00173b8:	e8 c3 93 fe ff       	call   c0000780 <strcmp>
c00173bd:	83 c4 10             	add    esp,0x10
c00173c0:	85 c0                	test   eax,eax
c00173c2:	0f 94 c0             	sete   al
c00173c5:	0f b6 c0             	movzx  eax,al
c00173c8:	85 c0                	test   eax,eax
c00173ca:	74 0f                	je     c00173db <HalDetectFeatures()+0x6a9>
c00173cc:	c7 05 84 c7 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002c784,0x1
c00173d6:	e9 41 02 00 00       	jmp    c001761c <HalDetectFeatures()+0x8ea>
c00173db:	83 ec 08             	sub    esp,0x8
c00173de:	68 0b 2d 02 c0       	push   0xc0022d0b
c00173e3:	68 70 c7 02 c0       	push   0xc002c770
c00173e8:	e8 93 93 fe ff       	call   c0000780 <strcmp>
c00173ed:	83 c4 10             	add    esp,0x10
c00173f0:	85 c0                	test   eax,eax
c00173f2:	0f 94 c0             	sete   al
c00173f5:	0f b6 c0             	movzx  eax,al
c00173f8:	85 c0                	test   eax,eax
c00173fa:	74 0f                	je     c001740b <HalDetectFeatures()+0x6d9>
c00173fc:	c7 05 84 c7 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc002c784,0x3
c0017406:	e9 11 02 00 00       	jmp    c001761c <HalDetectFeatures()+0x8ea>
c001740b:	83 ec 08             	sub    esp,0x8
c001740e:	68 ca 2c 02 c0       	push   0xc0022cca
c0017413:	68 70 c7 02 c0       	push   0xc002c770
c0017418:	e8 63 93 fe ff       	call   c0000780 <strcmp>
c001741d:	83 c4 10             	add    esp,0x10
c0017420:	85 c0                	test   eax,eax
c0017422:	0f 94 c0             	sete   al
c0017425:	0f b6 c0             	movzx  eax,al
c0017428:	85 c0                	test   eax,eax
c001742a:	74 0f                	je     c001743b <HalDetectFeatures()+0x709>
c001742c:	c7 05 84 c7 02 c0 06 00 00 00 	mov    DWORD PTR ds:0xc002c784,0x6
c0017436:	e9 e1 01 00 00       	jmp    c001761c <HalDetectFeatures()+0x8ea>
c001743b:	83 ec 08             	sub    esp,0x8
c001743e:	68 18 2d 02 c0       	push   0xc0022d18
c0017443:	68 70 c7 02 c0       	push   0xc002c770
c0017448:	e8 33 93 fe ff       	call   c0000780 <strcmp>
c001744d:	83 c4 10             	add    esp,0x10
c0017450:	85 c0                	test   eax,eax
c0017452:	0f 94 c0             	sete   al
c0017455:	0f b6 c0             	movzx  eax,al
c0017458:	85 c0                	test   eax,eax
c001745a:	74 0f                	je     c001746b <HalDetectFeatures()+0x739>
c001745c:	c7 05 84 c7 02 c0 07 00 00 00 	mov    DWORD PTR ds:0xc002c784,0x7
c0017466:	e9 b1 01 00 00       	jmp    c001761c <HalDetectFeatures()+0x8ea>
c001746b:	83 ec 08             	sub    esp,0x8
c001746e:	68 25 2d 02 c0       	push   0xc0022d25
c0017473:	68 70 c7 02 c0       	push   0xc002c770
c0017478:	e8 03 93 fe ff       	call   c0000780 <strcmp>
c001747d:	83 c4 10             	add    esp,0x10
c0017480:	85 c0                	test   eax,eax
c0017482:	0f 94 c0             	sete   al
c0017485:	0f b6 c0             	movzx  eax,al
c0017488:	85 c0                	test   eax,eax
c001748a:	74 0f                	je     c001749b <HalDetectFeatures()+0x769>
c001748c:	c7 05 84 c7 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002c784,0x8
c0017496:	e9 81 01 00 00       	jmp    c001761c <HalDetectFeatures()+0x8ea>
c001749b:	83 ec 08             	sub    esp,0x8
c001749e:	68 32 2d 02 c0       	push   0xc0022d32
c00174a3:	68 70 c7 02 c0       	push   0xc002c770
c00174a8:	e8 d3 92 fe ff       	call   c0000780 <strcmp>
c00174ad:	83 c4 10             	add    esp,0x10
c00174b0:	85 c0                	test   eax,eax
c00174b2:	0f 94 c0             	sete   al
c00174b5:	0f b6 c0             	movzx  eax,al
c00174b8:	85 c0                	test   eax,eax
c00174ba:	74 0f                	je     c00174cb <HalDetectFeatures()+0x799>
c00174bc:	c7 05 84 c7 02 c0 09 00 00 00 	mov    DWORD PTR ds:0xc002c784,0x9
c00174c6:	e9 51 01 00 00       	jmp    c001761c <HalDetectFeatures()+0x8ea>
c00174cb:	83 ec 08             	sub    esp,0x8
c00174ce:	68 3f 2d 02 c0       	push   0xc0022d3f
c00174d3:	68 70 c7 02 c0       	push   0xc002c770
c00174d8:	e8 a3 92 fe ff       	call   c0000780 <strcmp>
c00174dd:	83 c4 10             	add    esp,0x10
c00174e0:	85 c0                	test   eax,eax
c00174e2:	0f 94 c0             	sete   al
c00174e5:	0f b6 c0             	movzx  eax,al
c00174e8:	85 c0                	test   eax,eax
c00174ea:	74 0f                	je     c00174fb <HalDetectFeatures()+0x7c9>
c00174ec:	c7 05 84 c7 02 c0 0a 00 00 00 	mov    DWORD PTR ds:0xc002c784,0xa
c00174f6:	e9 21 01 00 00       	jmp    c001761c <HalDetectFeatures()+0x8ea>
c00174fb:	83 ec 08             	sub    esp,0x8
c00174fe:	68 4c 2d 02 c0       	push   0xc0022d4c
c0017503:	68 70 c7 02 c0       	push   0xc002c770
c0017508:	e8 73 92 fe ff       	call   c0000780 <strcmp>
c001750d:	83 c4 10             	add    esp,0x10
c0017510:	85 c0                	test   eax,eax
c0017512:	0f 94 c0             	sete   al
c0017515:	0f b6 c0             	movzx  eax,al
c0017518:	85 c0                	test   eax,eax
c001751a:	74 0f                	je     c001752b <HalDetectFeatures()+0x7f9>
c001751c:	c7 05 84 c7 02 c0 0b 00 00 00 	mov    DWORD PTR ds:0xc002c784,0xb
c0017526:	e9 f1 00 00 00       	jmp    c001761c <HalDetectFeatures()+0x8ea>
c001752b:	83 ec 08             	sub    esp,0x8
c001752e:	68 59 2d 02 c0       	push   0xc0022d59
c0017533:	68 70 c7 02 c0       	push   0xc002c770
c0017538:	e8 43 92 fe ff       	call   c0000780 <strcmp>
c001753d:	83 c4 10             	add    esp,0x10
c0017540:	85 c0                	test   eax,eax
c0017542:	0f 94 c0             	sete   al
c0017545:	0f b6 c0             	movzx  eax,al
c0017548:	85 c0                	test   eax,eax
c001754a:	74 0f                	je     c001755b <HalDetectFeatures()+0x829>
c001754c:	c7 05 84 c7 02 c0 0c 00 00 00 	mov    DWORD PTR ds:0xc002c784,0xc
c0017556:	e9 c1 00 00 00       	jmp    c001761c <HalDetectFeatures()+0x8ea>
c001755b:	83 ec 08             	sub    esp,0x8
c001755e:	68 66 2d 02 c0       	push   0xc0022d66
c0017563:	68 70 c7 02 c0       	push   0xc002c770
c0017568:	e8 13 92 fe ff       	call   c0000780 <strcmp>
c001756d:	83 c4 10             	add    esp,0x10
c0017570:	85 c0                	test   eax,eax
c0017572:	0f 94 c0             	sete   al
c0017575:	0f b6 c0             	movzx  eax,al
c0017578:	85 c0                	test   eax,eax
c001757a:	74 0f                	je     c001758b <HalDetectFeatures()+0x859>
c001757c:	c7 05 84 c7 02 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc002c784,0xd
c0017586:	e9 91 00 00 00       	jmp    c001761c <HalDetectFeatures()+0x8ea>
c001758b:	83 ec 08             	sub    esp,0x8
c001758e:	68 73 2d 02 c0       	push   0xc0022d73
c0017593:	68 70 c7 02 c0       	push   0xc002c770
c0017598:	e8 e3 91 fe ff       	call   c0000780 <strcmp>
c001759d:	83 c4 10             	add    esp,0x10
c00175a0:	85 c0                	test   eax,eax
c00175a2:	0f 94 c0             	sete   al
c00175a5:	0f b6 c0             	movzx  eax,al
c00175a8:	85 c0                	test   eax,eax
c00175aa:	74 0c                	je     c00175b8 <HalDetectFeatures()+0x886>
c00175ac:	c7 05 84 c7 02 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc002c784,0xd
c00175b6:	eb 64                	jmp    c001761c <HalDetectFeatures()+0x8ea>
c00175b8:	83 ec 08             	sub    esp,0x8
c00175bb:	68 80 2d 02 c0       	push   0xc0022d80
c00175c0:	68 70 c7 02 c0       	push   0xc002c770
c00175c5:	e8 b6 91 fe ff       	call   c0000780 <strcmp>
c00175ca:	83 c4 10             	add    esp,0x10
c00175cd:	85 c0                	test   eax,eax
c00175cf:	0f 94 c0             	sete   al
c00175d2:	0f b6 c0             	movzx  eax,al
c00175d5:	85 c0                	test   eax,eax
c00175d7:	74 0c                	je     c00175e5 <HalDetectFeatures()+0x8b3>
c00175d9:	c7 05 84 c7 02 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc002c784,0xd
c00175e3:	eb 37                	jmp    c001761c <HalDetectFeatures()+0x8ea>
c00175e5:	83 ec 08             	sub    esp,0x8
c00175e8:	68 8d 2d 02 c0       	push   0xc0022d8d
c00175ed:	68 70 c7 02 c0       	push   0xc002c770
c00175f2:	e8 89 91 fe ff       	call   c0000780 <strcmp>
c00175f7:	83 c4 10             	add    esp,0x10
c00175fa:	85 c0                	test   eax,eax
c00175fc:	0f 94 c0             	sete   al
c00175ff:	0f b6 c0             	movzx  eax,al
c0017602:	85 c0                	test   eax,eax
c0017604:	74 0c                	je     c0017612 <HalDetectFeatures()+0x8e0>
c0017606:	c7 05 84 c7 02 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc002c784,0xd
c0017610:	eb 0a                	jmp    c001761c <HalDetectFeatures()+0x8ea>
c0017612:	c7 05 84 c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c784,0x0
c001761c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017620:	83 f8 06             	cmp    eax,0x6
c0017623:	0f 86 cc 00 00 00    	jbe    c00176f5 <HalDetectFeatures()+0x9c3>
c0017629:	83 ec 0c             	sub    esp,0xc
c001762c:	68 80 00 00 00       	push   0x80
c0017631:	e8 a0 f6 ff ff       	call   c0016cd6 <cpuidCheckExtendedEBX(unsigned int)>
c0017636:	83 c4 10             	add    esp,0x10
c0017639:	89 c1                	mov    ecx,eax
c001763b:	83 e1 01             	and    ecx,0x1
c001763e:	a0 8f c7 02 c0       	mov    al,ds:0xc002c78f
c0017643:	83 e0 fe             	and    eax,0xfffffffe
c0017646:	88 c2                	mov    dl,al
c0017648:	88 c8                	mov    al,cl
c001764a:	09 d0                	or     eax,edx
c001764c:	a2 8f c7 02 c0       	mov    ds:0xc002c78f,al
c0017651:	83 ec 0c             	sub    esp,0xc
c0017654:	68 00 00 10 00       	push   0x100000
c0017659:	e8 78 f6 ff ff       	call   c0016cd6 <cpuidCheckExtendedEBX(unsigned int)>
c001765e:	83 c4 10             	add    esp,0x10
c0017661:	83 e0 01             	and    eax,0x1
c0017664:	89 c1                	mov    ecx,eax
c0017666:	c1 e1 06             	shl    ecx,0x6
c0017669:	a0 8f c7 02 c0       	mov    al,ds:0xc002c78f
c001766e:	83 e0 bf             	and    eax,0xffffffbf
c0017671:	88 c2                	mov    dl,al
c0017673:	88 c8                	mov    al,cl
c0017675:	09 d0                	or     eax,edx
c0017677:	a2 8f c7 02 c0       	mov    ds:0xc002c78f,al
c001767c:	83 ec 0c             	sub    esp,0xc
c001767f:	68 00 00 04 00       	push   0x40000
c0017684:	e8 4d f6 ff ff       	call   c0016cd6 <cpuidCheckExtendedEBX(unsigned int)>
c0017689:	83 c4 10             	add    esp,0x10
c001768c:	83 e0 01             	and    eax,0x1
c001768f:	8d 0c 00             	lea    ecx,[eax+eax*1]
c0017692:	a0 8f c7 02 c0       	mov    al,ds:0xc002c78f
c0017697:	83 e0 fd             	and    eax,0xfffffffd
c001769a:	88 c2                	mov    dl,al
c001769c:	88 c8                	mov    al,cl
c001769e:	09 d0                	or     eax,edx
c00176a0:	a2 8f c7 02 c0       	mov    ds:0xc002c78f,al
c00176a5:	83 ec 0c             	sub    esp,0xc
c00176a8:	6a 04                	push   0x4
c00176aa:	e8 55 f6 ff ff       	call   c0016d04 <cpuidCheckExtendedECX(unsigned int)>
c00176af:	83 c4 10             	add    esp,0x10
c00176b2:	83 e0 01             	and    eax,0x1
c00176b5:	89 c1                	mov    ecx,eax
c00176b7:	c1 e1 05             	shl    ecx,0x5
c00176ba:	a0 8f c7 02 c0       	mov    al,ds:0xc002c78f
c00176bf:	83 e0 df             	and    eax,0xffffffdf
c00176c2:	88 c2                	mov    dl,al
c00176c4:	88 c8                	mov    al,cl
c00176c6:	09 d0                	or     eax,edx
c00176c8:	a2 8f c7 02 c0       	mov    ds:0xc002c78f,al
c00176cd:	83 ec 0c             	sub    esp,0xc
c00176d0:	6a 20                	push   0x20
c00176d2:	e8 2d f6 ff ff       	call   c0016d04 <cpuidCheckExtendedECX(unsigned int)>
c00176d7:	83 c4 10             	add    esp,0x10
c00176da:	83 e0 01             	and    eax,0x1
c00176dd:	89 c1                	mov    ecx,eax
c00176df:	c1 e1 04             	shl    ecx,0x4
c00176e2:	a0 90 c7 02 c0       	mov    al,ds:0xc002c790
c00176e7:	83 e0 ef             	and    eax,0xffffffef
c00176ea:	88 c2                	mov    dl,al
c00176ec:	88 c8                	mov    al,cl
c00176ee:	09 d0                	or     eax,edx
c00176f0:	a2 90 c7 02 c0       	mov    ds:0xc002c790,al
c00176f5:	83 ec 0c             	sub    esp,0xc
c00176f8:	8d 44 24 14          	lea    eax,[esp+0x14]
c00176fc:	50                   	push   eax
c00176fd:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0017701:	50                   	push   eax
c0017702:	8d 44 24 24          	lea    eax,[esp+0x24]
c0017706:	50                   	push   eax
c0017707:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001770b:	50                   	push   eax
c001770c:	6a 01                	push   0x1
c001770e:	e8 ca f4 ff ff       	call   c0016bdd <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0017713:	83 c4 20             	add    esp,0x20
c0017716:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001771a:	83 e0 0f             	and    eax,0xf
c001771d:	a2 80 c7 02 c0       	mov    ds:0xc002c780,al
c0017722:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017726:	c1 e8 04             	shr    eax,0x4
c0017729:	83 e0 0f             	and    eax,0xf
c001772c:	a2 7e c7 02 c0       	mov    ds:0xc002c77e,al
c0017731:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017735:	c1 e8 08             	shr    eax,0x8
c0017738:	83 e0 0f             	and    eax,0xf
c001773b:	a2 7d c7 02 c0       	mov    ds:0xc002c77d,al
c0017740:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017744:	c1 e8 0c             	shr    eax,0xc
c0017747:	83 e0 03             	and    eax,0x3
c001774a:	a2 7f c7 02 c0       	mov    ds:0xc002c77f,al
c001774f:	a0 7d c7 02 c0       	mov    al,ds:0xc002c77d
c0017754:	0f b6 c0             	movzx  eax,al
c0017757:	83 f8 06             	cmp    eax,0x6
c001775a:	74 0d                	je     c0017769 <HalDetectFeatures()+0xa37>
c001775c:	a0 7d c7 02 c0       	mov    al,ds:0xc002c77d
c0017761:	0f b6 c0             	movzx  eax,al
c0017764:	83 f8 0f             	cmp    eax,0xf
c0017767:	75 18                	jne    c0017781 <HalDetectFeatures()+0xa4f>
c0017769:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001776d:	c1 e8 10             	shr    eax,0x10
c0017770:	c1 e0 04             	shl    eax,0x4
c0017773:	88 c2                	mov    dl,al
c0017775:	a0 7e c7 02 c0       	mov    al,ds:0xc002c77e
c001777a:	09 d0                	or     eax,edx
c001777c:	a2 7e c7 02 c0       	mov    ds:0xc002c77e,al
c0017781:	a0 7d c7 02 c0       	mov    al,ds:0xc002c77d
c0017786:	0f b6 c0             	movzx  eax,al
c0017789:	83 f8 0f             	cmp    eax,0xf
c001778c:	75 15                	jne    c00177a3 <HalDetectFeatures()+0xa71>
c001778e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017792:	c1 e8 14             	shr    eax,0x14
c0017795:	88 c2                	mov    dl,al
c0017797:	a0 7d c7 02 c0       	mov    al,ds:0xc002c77d
c001779c:	01 d0                	add    eax,edx
c001779e:	a2 7d c7 02 c0       	mov    ds:0xc002c77d,al
c00177a3:	c6 84 24 8e 00 00 00 00 	mov    BYTE PTR [esp+0x8e],0x0
c00177ab:	0f b6 84 24 8e 00 00 00 	movzx  eax,BYTE PTR [esp+0x8e]
c00177b3:	85 c0                	test   eax,eax
c00177b5:	74 2d                	je     c00177e4 <HalDetectFeatures()+0xab2>
c00177b7:	83 ec 0c             	sub    esp,0xc
c00177ba:	68 00 00 00 40       	push   0x40000000
c00177bf:	e8 e4 f4 ff ff       	call   c0016ca8 <cpuidCheckECX(unsigned int)>
c00177c4:	83 c4 10             	add    esp,0x10
c00177c7:	83 e0 01             	and    eax,0x1
c00177ca:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
c00177d1:	a0 8e c7 02 c0       	mov    al,ds:0xc002c78e
c00177d6:	83 e0 fb             	and    eax,0xfffffffb
c00177d9:	88 c2                	mov    dl,al
c00177db:	88 c8                	mov    al,cl
c00177dd:	09 d0                	or     eax,edx
c00177df:	a2 8e c7 02 c0       	mov    ds:0xc002c78e,al
c00177e4:	a0 8f c7 02 c0       	mov    al,ds:0xc002c78f
c00177e9:	83 c8 04             	or     eax,0x4
c00177ec:	a2 8f c7 02 c0       	mov    ds:0xc002c78f,al
c00177f1:	a0 8f c7 02 c0       	mov    al,ds:0xc002c78f
c00177f6:	83 c8 08             	or     eax,0x8
c00177f9:	a2 8f c7 02 c0       	mov    ds:0xc002c78f,al
c00177fe:	a0 8f c7 02 c0       	mov    al,ds:0xc002c78f
c0017803:	83 c8 10             	or     eax,0x10
c0017806:	a2 8f c7 02 c0       	mov    ds:0xc002c78f,al
c001780b:	83 ec 0c             	sub    esp,0xc
c001780e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0017812:	50                   	push   eax
c0017813:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0017817:	50                   	push   eax
c0017818:	8d 44 24 24          	lea    eax,[esp+0x24]
c001781c:	50                   	push   eax
c001781d:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0017821:	50                   	push   eax
c0017822:	68 00 00 00 80       	push   0x80000000
c0017827:	e8 b1 f3 ff ff       	call   c0016bdd <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001782c:	83 c4 20             	add    esp,0x20
c001782f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017833:	3d 00 00 00 80       	cmp    eax,0x80000000
c0017838:	0f 86 96 01 00 00    	jbe    c00179d4 <HalDetectFeatures()+0xca2>
c001783e:	83 ec 0c             	sub    esp,0xc
c0017841:	8d 44 24 14          	lea    eax,[esp+0x14]
c0017845:	50                   	push   eax
c0017846:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001784a:	50                   	push   eax
c001784b:	8d 44 24 24          	lea    eax,[esp+0x24]
c001784f:	50                   	push   eax
c0017850:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0017854:	50                   	push   eax
c0017855:	68 01 00 00 80       	push   0x80000001
c001785a:	e8 7e f3 ff ff       	call   c0016bdd <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001785f:	83 c4 20             	add    esp,0x20
c0017862:	a0 8f c7 02 c0       	mov    al,ds:0xc002c78f
c0017867:	83 e0 7f             	and    eax,0x7f
c001786a:	a2 8f c7 02 c0       	mov    ds:0xc002c78f,al
c001786f:	a0 90 c7 02 c0       	mov    al,ds:0xc002c790
c0017874:	83 e0 fb             	and    eax,0xfffffffb
c0017877:	a2 90 c7 02 c0       	mov    ds:0xc002c790,al
c001787c:	a0 90 c7 02 c0       	mov    al,ds:0xc002c790
c0017881:	83 e0 fd             	and    eax,0xfffffffd
c0017884:	a2 90 c7 02 c0       	mov    ds:0xc002c790,al
c0017889:	e9 46 01 00 00       	jmp    c00179d4 <HalDetectFeatures()+0xca2>
c001788e:	83 ec 08             	sub    esp,0x8
c0017891:	68 fe 2c 02 c0       	push   0xc0022cfe
c0017896:	68 70 c7 02 c0       	push   0xc002c770
c001789b:	e8 b0 8d fe ff       	call   c0000650 <strcpy>
c00178a0:	83 c4 10             	add    esp,0x10
c00178a3:	c7 05 84 c7 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002c784,0x1
c00178ad:	e8 11 89 fe ff       	call   c00001c3 <is486>
c00178b2:	85 c0                	test   eax,eax
c00178b4:	0f 95 c0             	setne  al
c00178b7:	0f b6 c0             	movzx  eax,al
c00178ba:	85 c0                	test   eax,eax
c00178bc:	0f 84 8d 00 00 00    	je     c001794f <HalDetectFeatures()+0xc1d>
c00178c2:	a0 8f c7 02 c0       	mov    al,ds:0xc002c78f
c00178c7:	83 c8 04             	or     eax,0x4
c00178ca:	a2 8f c7 02 c0       	mov    ds:0xc002c78f,al
c00178cf:	a0 8f c7 02 c0       	mov    al,ds:0xc002c78f
c00178d4:	83 c8 08             	or     eax,0x8
c00178d7:	a2 8f c7 02 c0       	mov    ds:0xc002c78f,al
c00178dc:	a0 8f c7 02 c0       	mov    al,ds:0xc002c78f
c00178e1:	83 c8 10             	or     eax,0x10
c00178e4:	a2 8f c7 02 c0       	mov    ds:0xc002c78f,al
c00178e9:	0f 20 c0             	mov    eax,cr0
c00178ec:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00178f0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00178f4:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
c00178fb:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0017902:	83 e0 04             	and    eax,0x4
c0017905:	74 1e                	je     c0017925 <HalDetectFeatures()+0xbf3>
c0017907:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001790e:	83 e0 10             	and    eax,0x10
c0017911:	75 12                	jne    c0017925 <HalDetectFeatures()+0xbf3>
c0017913:	a0 90 c7 02 c0       	mov    al,ds:0xc002c790
c0017918:	83 e0 f7             	and    eax,0xfffffff7
c001791b:	a2 90 c7 02 c0       	mov    ds:0xc002c790,al
c0017920:	e9 af 00 00 00       	jmp    c00179d4 <HalDetectFeatures()+0xca2>
c0017925:	e8 74 88 fe ff       	call   c000019e <hasLegacyFPU>
c001792a:	83 e0 01             	and    eax,0x1
c001792d:	83 e0 01             	and    eax,0x1
c0017930:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0017937:	a0 90 c7 02 c0       	mov    al,ds:0xc002c790
c001793c:	83 e0 f7             	and    eax,0xfffffff7
c001793f:	88 c2                	mov    dl,al
c0017941:	88 c8                	mov    al,cl
c0017943:	09 d0                	or     eax,edx
c0017945:	a2 90 c7 02 c0       	mov    ds:0xc002c790,al
c001794a:	e9 85 00 00 00       	jmp    c00179d4 <HalDetectFeatures()+0xca2>
c001794f:	a0 8f c7 02 c0       	mov    al,ds:0xc002c78f
c0017954:	83 e0 fb             	and    eax,0xfffffffb
c0017957:	a2 8f c7 02 c0       	mov    ds:0xc002c78f,al
c001795c:	a0 8f c7 02 c0       	mov    al,ds:0xc002c78f
c0017961:	83 e0 f7             	and    eax,0xfffffff7
c0017964:	a2 8f c7 02 c0       	mov    ds:0xc002c78f,al
c0017969:	a0 8f c7 02 c0       	mov    al,ds:0xc002c78f
c001796e:	83 e0 ef             	and    eax,0xffffffef
c0017971:	a2 8f c7 02 c0       	mov    ds:0xc002c78f,al
c0017976:	0f 20 c0             	mov    eax,cr0
c0017979:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001797d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017981:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c0017988:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001798f:	83 e0 04             	and    eax,0x4
c0017992:	74 1b                	je     c00179af <HalDetectFeatures()+0xc7d>
c0017994:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001799b:	83 e0 10             	and    eax,0x10
c001799e:	75 0f                	jne    c00179af <HalDetectFeatures()+0xc7d>
c00179a0:	a0 90 c7 02 c0       	mov    al,ds:0xc002c790
c00179a5:	83 e0 f7             	and    eax,0xfffffff7
c00179a8:	a2 90 c7 02 c0       	mov    ds:0xc002c790,al
c00179ad:	eb 25                	jmp    c00179d4 <HalDetectFeatures()+0xca2>
c00179af:	e8 ea 87 fe ff       	call   c000019e <hasLegacyFPU>
c00179b4:	83 e0 01             	and    eax,0x1
c00179b7:	83 e0 01             	and    eax,0x1
c00179ba:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c00179c1:	a0 90 c7 02 c0       	mov    al,ds:0xc002c790
c00179c6:	83 e0 f7             	and    eax,0xfffffff7
c00179c9:	88 c2                	mov    dl,al
c00179cb:	88 c8                	mov    al,cl
c00179cd:	09 d0                	or     eax,edx
c00179cf:	a2 90 c7 02 c0       	mov    ds:0xc002c790,al
c00179d4:	a0 90 c7 02 c0       	mov    al,ds:0xc002c790
c00179d9:	83 e0 08             	and    eax,0x8
c00179dc:	0f b6 c0             	movzx  eax,al
c00179df:	85 c0                	test   eax,eax
c00179e1:	75 25                	jne    c0017a08 <HalDetectFeatures()+0xcd6>
c00179e3:	e8 b6 87 fe ff       	call   c000019e <hasLegacyFPU>
c00179e8:	83 e0 01             	and    eax,0x1
c00179eb:	83 e0 01             	and    eax,0x1
c00179ee:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c00179f5:	a0 90 c7 02 c0       	mov    al,ds:0xc002c790
c00179fa:	83 e0 f7             	and    eax,0xfffffff7
c00179fd:	88 c2                	mov    dl,al
c00179ff:	88 c8                	mov    al,cl
c0017a01:	09 d0                	or     eax,edx
c0017a03:	a2 90 c7 02 c0       	mov    ds:0xc002c790,al
c0017a08:	a0 90 c7 02 c0       	mov    al,ds:0xc002c790
c0017a0d:	83 e0 08             	and    eax,0x8
c0017a10:	0f b6 c0             	movzx  eax,al
c0017a13:	85 c0                	test   eax,eax
c0017a15:	74 0d                	je     c0017a24 <HalDetectFeatures()+0xcf2>
c0017a17:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0017a1c:	83 c8 10             	or     eax,0x10
c0017a1f:	a2 8c c7 02 c0       	mov    ds:0xc002c78c,al
c0017a24:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0017a29:	83 e0 10             	and    eax,0x10
c0017a2c:	0f b6 c0             	movzx  eax,al
c0017a2f:	85 c0                	test   eax,eax
c0017a31:	75 23                	jne    c0017a56 <HalDetectFeatures()+0xd24>
c0017a33:	e8 de 7c 00 00       	call   c001f716 <x87Detect>
c0017a38:	83 e0 01             	and    eax,0x1
c0017a3b:	83 e0 01             	and    eax,0x1
c0017a3e:	89 c1                	mov    ecx,eax
c0017a40:	c1 e1 04             	shl    ecx,0x4
c0017a43:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0017a48:	83 e0 ef             	and    eax,0xffffffef
c0017a4b:	88 c2                	mov    dl,al
c0017a4d:	88 c8                	mov    al,cl
c0017a4f:	09 d0                	or     eax,edx
c0017a51:	a2 8c c7 02 c0       	mov    ds:0xc002c78c,al
c0017a56:	a0 8d c7 02 c0       	mov    al,ds:0xc002c78d
c0017a5b:	83 e0 01             	and    eax,0x1
c0017a5e:	0f b6 c0             	movzx  eax,al
c0017a61:	85 c0                	test   eax,eax
c0017a63:	75 2d                	jne    c0017a92 <HalDetectFeatures()+0xd60>
c0017a65:	a0 8d c7 02 c0       	mov    al,ds:0xc002c78d
c0017a6a:	83 e0 02             	and    eax,0x2
c0017a6d:	0f b6 c0             	movzx  eax,al
c0017a70:	85 c0                	test   eax,eax
c0017a72:	75 1e                	jne    c0017a92 <HalDetectFeatures()+0xd60>
c0017a74:	a0 8d c7 02 c0       	mov    al,ds:0xc002c78d
c0017a79:	83 e0 04             	and    eax,0x4
c0017a7c:	0f b6 c0             	movzx  eax,al
c0017a7f:	85 c0                	test   eax,eax
c0017a81:	75 0f                	jne    c0017a92 <HalDetectFeatures()+0xd60>
c0017a83:	a0 8d c7 02 c0       	mov    al,ds:0xc002c78d
c0017a88:	83 e0 08             	and    eax,0x8
c0017a8b:	0f b6 c0             	movzx  eax,al
c0017a8e:	85 c0                	test   eax,eax
c0017a90:	74 0d                	je     c0017a9f <HalDetectFeatures()+0xd6d>
c0017a92:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0017a97:	83 c8 80             	or     eax,0xffffff80
c0017a9a:	a2 8c c7 02 c0       	mov    ds:0xc002c78c,al
c0017a9f:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0017aa4:	83 e0 10             	and    eax,0x10
c0017aa7:	0f b6 c0             	movzx  eax,al
c0017aaa:	85 c0                	test   eax,eax
c0017aac:	74 2f                	je     c0017add <HalDetectFeatures()+0xdab>
c0017aae:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0017ab3:	83 e0 80             	and    eax,0xffffff80
c0017ab6:	0f b6 c0             	movzx  eax,al
c0017ab9:	85 c0                	test   eax,eax
c0017abb:	75 20                	jne    c0017add <HalDetectFeatures()+0xdab>
c0017abd:	e8 0e 7c 00 00       	call   c001f6d0 <sseDetect>
c0017ac2:	83 e0 01             	and    eax,0x1
c0017ac5:	89 c1                	mov    ecx,eax
c0017ac7:	c1 e1 07             	shl    ecx,0x7
c0017aca:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0017acf:	83 e0 7f             	and    eax,0x7f
c0017ad2:	88 c2                	mov    dl,al
c0017ad4:	88 c8                	mov    al,cl
c0017ad6:	09 d0                	or     eax,edx
c0017ad8:	a2 8c c7 02 c0       	mov    ds:0xc002c78c,al
c0017add:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0017ae2:	83 e0 80             	and    eax,0xffffff80
c0017ae5:	0f b6 c0             	movzx  eax,al
c0017ae8:	85 c0                	test   eax,eax
c0017aea:	74 1c                	je     c0017b08 <HalDetectFeatures()+0xdd6>
c0017aec:	a0 8d c7 02 c0       	mov    al,ds:0xc002c78d
c0017af1:	83 e0 20             	and    eax,0x20
c0017af4:	0f b6 c0             	movzx  eax,al
c0017af7:	85 c0                	test   eax,eax
c0017af9:	75 0d                	jne    c0017b08 <HalDetectFeatures()+0xdd6>
c0017afb:	a0 8d c7 02 c0       	mov    al,ds:0xc002c78d
c0017b00:	83 e0 df             	and    eax,0xffffffdf
c0017b03:	a2 8d c7 02 c0       	mov    ds:0xc002c78d,al
c0017b08:	c6 05 88 c7 02 c0 00 	mov    BYTE PTR ds:0xc002c788,0x0
c0017b0f:	90                   	nop
c0017b10:	81 c4 90 00 00 00    	add    esp,0x90
c0017b16:	5b                   	pop    ebx
c0017b17:	5e                   	pop    esi
c0017b18:	5f                   	pop    edi
c0017b19:	c3                   	ret    

c0017b1a <HalEnableNMI()>:
c0017b1a:	c6 05 6c c7 02 c0 01 	mov    BYTE PTR ds:0xc002c76c,0x1
c0017b21:	6a 10                	push   0x10
c0017b23:	e8 03 ef ff ff       	call   c0016a2b <x86ReadCMOS(unsigned char)>
c0017b28:	83 c4 04             	add    esp,0x4
c0017b2b:	90                   	nop
c0017b2c:	c3                   	ret    

c0017b2d <HalDisableNMI()>:
c0017b2d:	c6 05 6c c7 02 c0 00 	mov    BYTE PTR ds:0xc002c76c,0x0
c0017b34:	6a 10                	push   0x10
c0017b36:	e8 f0 ee ff ff       	call   c0016a2b <x86ReadCMOS(unsigned char)>
c0017b3b:	83 c4 04             	add    esp,0x4
c0017b3e:	90                   	nop
c0017b3f:	c3                   	ret    

c0017b40 <HalGetNMIState()>:
c0017b40:	a0 6c c7 02 c0       	mov    al,ds:0xc002c76c
c0017b45:	c3                   	ret    

c0017b46 <x86rdmsr(unsigned int)>:
c0017b46:	83 ec 1c             	sub    esp,0x1c
c0017b49:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0017b4e:	83 e0 08             	and    eax,0x8
c0017b51:	0f b6 c0             	movzx  eax,al
c0017b54:	85 c0                	test   eax,eax
c0017b56:	75 10                	jne    c0017b68 <x86rdmsr(unsigned int)+0x22>
c0017b58:	83 ec 0c             	sub    esp,0xc
c0017b5b:	68 99 2d 02 c0       	push   0xc0022d99
c0017b60:	e8 c1 70 ff ff       	call   c000ec26 <KePanic(char const*)>
c0017b65:	83 c4 10             	add    esp,0x10
c0017b68:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b6c:	89 c1                	mov    ecx,eax
c0017b6e:	0f 32                	rdmsr  
c0017b70:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017b74:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0017b78:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017b7c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017b80:	83 c4 1c             	add    esp,0x1c
c0017b83:	c3                   	ret    

c0017b84 <x86wrmsr(unsigned int, unsigned long long)>:
c0017b84:	83 ec 1c             	sub    esp,0x1c
c0017b87:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017b8b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017b8f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017b93:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017b97:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0017b9c:	83 e0 08             	and    eax,0x8
c0017b9f:	0f b6 c0             	movzx  eax,al
c0017ba2:	85 c0                	test   eax,eax
c0017ba4:	75 10                	jne    c0017bb6 <x86wrmsr(unsigned int, unsigned long long)+0x32>
c0017ba6:	83 ec 0c             	sub    esp,0xc
c0017ba9:	68 9f 2d 02 c0       	push   0xc0022d9f
c0017bae:	e8 73 70 ff ff       	call   c000ec26 <KePanic(char const*)>
c0017bb3:	83 c4 10             	add    esp,0x10
c0017bb6:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0017bba:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017bbe:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017bc2:	0f 30                	wrmsr  
c0017bc4:	90                   	nop
c0017bc5:	83 c4 1c             	add    esp,0x1c
c0017bc8:	c3                   	ret    

c0017bc9 <HalHandleGeneralProtectionFault(void*, void*)>:
c0017bc9:	83 ec 0c             	sub    esp,0xc
c0017bcc:	83 ec 0c             	sub    esp,0xc
c0017bcf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017bd3:	e8 23 e7 ff ff       	call   c00162fb <Vm::faultHandler(regs*)>
c0017bd8:	83 c4 10             	add    esp,0x10
c0017bdb:	83 c4 0c             	add    esp,0xc
c0017bde:	c3                   	ret    

c0017bdf <HalFindRSDP()>:
c0017bdf:	83 ec 1c             	sub    esp,0x1c
c0017be2:	a1 ac bd 02 c0       	mov    eax,ds:0xc002bdac
c0017be7:	3d ff 07 00 00       	cmp    eax,0x7ff
c0017bec:	7e 0c                	jle    c0017bfa <HalFindRSDP()+0x1b>
c0017bee:	a1 90 bd 02 c0       	mov    eax,ds:0xc002bd90
c0017bf3:	25 00 04 00 00       	and    eax,0x400
c0017bf8:	74 0d                	je     c0017c07 <HalFindRSDP()+0x28>
c0017bfa:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0017bff:	83 e0 fb             	and    eax,0xfffffffb
c0017c02:	a2 8c c7 02 c0       	mov    ds:0xc002c78c,al
c0017c07:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0017c0c:	83 e0 04             	and    eax,0x4
c0017c0f:	0f b6 c0             	movzx  eax,al
c0017c12:	85 c0                	test   eax,eax
c0017c14:	75 07                	jne    c0017c1d <HalFindRSDP()+0x3e>
c0017c16:	b8 00 00 00 00       	mov    eax,0x0
c0017c1b:	eb 53                	jmp    c0017c70 <HalFindRSDP()+0x91>
c0017c1d:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0017c25:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0017c2d:	77 2f                	ja     c0017c5e <HalFindRSDP()+0x7f>
c0017c2f:	83 ec 04             	sub    esp,0x4
c0017c32:	6a 08                	push   0x8
c0017c34:	68 a5 2d 02 c0       	push   0xc0022da5
c0017c39:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017c3d:	e8 3e 87 fe ff       	call   c0000380 <memcmp>
c0017c42:	83 c4 10             	add    esp,0x10
c0017c45:	85 c0                	test   eax,eax
c0017c47:	0f 94 c0             	sete   al
c0017c4a:	0f b6 c0             	movzx  eax,al
c0017c4d:	85 c0                	test   eax,eax
c0017c4f:	74 06                	je     c0017c57 <HalFindRSDP()+0x78>
c0017c51:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017c55:	eb 19                	jmp    c0017c70 <HalFindRSDP()+0x91>
c0017c57:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0017c5c:	eb c7                	jmp    c0017c25 <HalFindRSDP()+0x46>
c0017c5e:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0017c63:	83 e0 fb             	and    eax,0xfffffffb
c0017c66:	a2 8c c7 02 c0       	mov    ds:0xc002c78c,al
c0017c6b:	b8 00 00 00 00       	mov    eax,0x0
c0017c70:	83 c4 1c             	add    esp,0x1c
c0017c73:	c3                   	ret    

c0017c74 <HalHandlePageFault(void*, void*)>:
c0017c74:	83 ec 1c             	sub    esp,0x1c
c0017c77:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017c7c:	8b 00                	mov    eax,DWORD PTR [eax]
c0017c7e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017c81:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0017c87:	0f 20 d2             	mov    edx,cr2
c0017c8a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0017c8e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017c92:	83 ec 08             	sub    esp,0x8
c0017c95:	52                   	push   edx
c0017c96:	50                   	push   eax
c0017c97:	e8 d8 af ff ff       	call   c0012c74 <VAS::tryLoadBackOffDisk(unsigned long)>
c0017c9c:	83 c4 10             	add    esp,0x10
c0017c9f:	83 c4 1c             	add    esp,0x1c
c0017ca2:	c3                   	ret    

c0017ca3 <HalHandleOpcodeFault(void*, void*)>:
c0017ca3:	83 ec 1c             	sub    esp,0x1c
c0017ca6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017caa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017cae:	a0 88 c7 02 c0       	mov    al,ds:0xc002c788
c0017cb3:	0f b6 c0             	movzx  eax,al
c0017cb6:	85 c0                	test   eax,eax
c0017cb8:	74 25                	je     c0017cdf <HalHandleOpcodeFault(void*, void*)+0x3c>
c0017cba:	83 ec 0c             	sub    esp,0xc
c0017cbd:	68 9c 2f 02 c0       	push   0xc0022f9c
c0017cc2:	e8 87 f2 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0017cc7:	83 c4 10             	add    esp,0x10
c0017cca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017cce:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017cd1:	8d 50 19             	lea    edx,[eax+0x19]
c0017cd4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017cd8:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0017cdb:	b0 01                	mov    al,0x1
c0017cdd:	eb 02                	jmp    c0017ce1 <HalHandleOpcodeFault(void*, void*)+0x3e>
c0017cdf:	b0 00                	mov    al,0x0
c0017ce1:	83 c4 1c             	add    esp,0x1c
c0017ce4:	c3                   	ret    

c0017ce5 <HalDisplayDebugInfo(void*)>:
c0017ce5:	83 ec 2c             	sub    esp,0x2c
c0017ce8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017cec:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017cf0:	0f 20 c0             	mov    eax,cr0
c0017cf3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017cf7:	0f 20 d0             	mov    eax,cr2
c0017cfa:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017cfe:	0f 20 d8             	mov    eax,cr3
c0017d01:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017d05:	0f 20 e0             	mov    eax,cr4
c0017d08:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017d0c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017d10:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0017d13:	83 ec 08             	sub    esp,0x8
c0017d16:	50                   	push   eax
c0017d17:	68 bd 2d 02 c0       	push   0xc0022dbd
c0017d1c:	e8 2d f2 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0017d21:	83 c4 10             	add    esp,0x10
c0017d24:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017d28:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0017d2b:	83 ec 08             	sub    esp,0x8
c0017d2e:	50                   	push   eax
c0017d2f:	68 ae 2d 02 c0       	push   0xc0022dae
c0017d34:	e8 15 f2 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0017d39:	83 c4 10             	add    esp,0x10
c0017d3c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017d40:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0017d43:	83 ec 08             	sub    esp,0x8
c0017d46:	50                   	push   eax
c0017d47:	68 b9 2d 02 c0       	push   0xc0022db9
c0017d4c:	e8 fd f1 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0017d51:	83 c4 10             	add    esp,0x10
c0017d54:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017d58:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017d5b:	83 ec 08             	sub    esp,0x8
c0017d5e:	50                   	push   eax
c0017d5f:	68 c8 2d 02 c0       	push   0xc0022dc8
c0017d64:	e8 e5 f1 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0017d69:	83 c4 10             	add    esp,0x10
c0017d6c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017d70:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c0017d73:	83 ec 08             	sub    esp,0x8
c0017d76:	50                   	push   eax
c0017d77:	68 d3 2d 02 c0       	push   0xc0022dd3
c0017d7c:	e8 cd f1 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0017d81:	83 c4 10             	add    esp,0x10
c0017d84:	83 ec 08             	sub    esp,0x8
c0017d87:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017d8b:	68 de 2d 02 c0       	push   0xc0022dde
c0017d90:	e8 b9 f1 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0017d95:	83 c4 10             	add    esp,0x10
c0017d98:	83 ec 08             	sub    esp,0x8
c0017d9b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017d9f:	68 e9 2d 02 c0       	push   0xc0022de9
c0017da4:	e8 a5 f1 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0017da9:	83 c4 10             	add    esp,0x10
c0017dac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017db0:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0017db3:	c1 e0 05             	shl    eax,0x5
c0017db6:	8d 90 00 42 02 c0    	lea    edx,[eax-0x3ffdbe00]
c0017dbc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017dc0:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0017dc3:	83 ec 04             	sub    esp,0x4
c0017dc6:	52                   	push   edx
c0017dc7:	50                   	push   eax
c0017dc8:	68 f4 2d 02 c0       	push   0xc0022df4
c0017dcd:	e8 7c f1 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0017dd2:	83 c4 10             	add    esp,0x10
c0017dd5:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0017dda:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017de0:	83 ec 0c             	sub    esp,0xc
c0017de3:	50                   	push   eax
c0017de4:	e8 98 92 ff ff       	call   c0011081 <setActiveTerminal(VgaText*)>
c0017de9:	83 c4 10             	add    esp,0x10
c0017dec:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0017df1:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017df7:	83 ec 08             	sub    esp,0x8
c0017dfa:	68 03 2e 02 c0       	push   0xc0022e03
c0017dff:	50                   	push   eax
c0017e00:	e8 b9 95 ff ff       	call   c00113be <VgaText::puts(char const*)>
c0017e05:	83 c4 10             	add    esp,0x10
c0017e08:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0017e0d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017e13:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017e17:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
c0017e1a:	83 ec 08             	sub    esp,0x8
c0017e1d:	52                   	push   edx
c0017e1e:	50                   	push   eax
c0017e1f:	e8 54 95 ff ff       	call   c0011378 <VgaText::putx(unsigned int)>
c0017e24:	83 c4 10             	add    esp,0x10
c0017e27:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0017e2c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017e32:	83 ec 08             	sub    esp,0x8
c0017e35:	68 11 2e 02 c0       	push   0xc0022e11
c0017e3a:	50                   	push   eax
c0017e3b:	e8 7e 95 ff ff       	call   c00113be <VgaText::puts(char const*)>
c0017e40:	83 c4 10             	add    esp,0x10
c0017e43:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0017e48:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017e4e:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0017e53:	8b 12                	mov    edx,DWORD PTR [edx]
c0017e55:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0017e58:	83 c2 0c             	add    edx,0xc
c0017e5b:	83 ec 08             	sub    esp,0x8
c0017e5e:	52                   	push   edx
c0017e5f:	50                   	push   eax
c0017e60:	e8 59 95 ff ff       	call   c00113be <VgaText::puts(char const*)>
c0017e65:	83 c4 10             	add    esp,0x10
c0017e68:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0017e6d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017e73:	83 ec 08             	sub    esp,0x8
c0017e76:	68 1a 2e 02 c0       	push   0xc0022e1a
c0017e7b:	50                   	push   eax
c0017e7c:	e8 3d 95 ff ff       	call   c00113be <VgaText::puts(char const*)>
c0017e81:	83 c4 10             	add    esp,0x10
c0017e84:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0017e89:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017e8f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017e93:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c0017e96:	83 ec 08             	sub    esp,0x8
c0017e99:	52                   	push   edx
c0017e9a:	50                   	push   eax
c0017e9b:	e8 d8 94 ff ff       	call   c0011378 <VgaText::putx(unsigned int)>
c0017ea0:	83 c4 10             	add    esp,0x10
c0017ea3:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0017ea8:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017eae:	83 ec 08             	sub    esp,0x8
c0017eb1:	68 22 2e 02 c0       	push   0xc0022e22
c0017eb6:	50                   	push   eax
c0017eb7:	e8 02 95 ff ff       	call   c00113be <VgaText::puts(char const*)>
c0017ebc:	83 c4 10             	add    esp,0x10
c0017ebf:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0017ec4:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017eca:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017ece:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c0017ed1:	83 ec 08             	sub    esp,0x8
c0017ed4:	52                   	push   edx
c0017ed5:	50                   	push   eax
c0017ed6:	e8 9d 94 ff ff       	call   c0011378 <VgaText::putx(unsigned int)>
c0017edb:	83 c4 10             	add    esp,0x10
c0017ede:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0017ee3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017ee9:	83 ec 08             	sub    esp,0x8
c0017eec:	68 2a 2e 02 c0       	push   0xc0022e2a
c0017ef1:	50                   	push   eax
c0017ef2:	e8 c7 94 ff ff       	call   c00113be <VgaText::puts(char const*)>
c0017ef7:	83 c4 10             	add    esp,0x10
c0017efa:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0017eff:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017f05:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017f09:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c0017f0c:	83 ec 08             	sub    esp,0x8
c0017f0f:	52                   	push   edx
c0017f10:	50                   	push   eax
c0017f11:	e8 62 94 ff ff       	call   c0011378 <VgaText::putx(unsigned int)>
c0017f16:	83 c4 10             	add    esp,0x10
c0017f19:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0017f1e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017f24:	83 ec 08             	sub    esp,0x8
c0017f27:	68 32 2e 02 c0       	push   0xc0022e32
c0017f2c:	50                   	push   eax
c0017f2d:	e8 8c 94 ff ff       	call   c00113be <VgaText::puts(char const*)>
c0017f32:	83 c4 10             	add    esp,0x10
c0017f35:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0017f3a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017f40:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017f44:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0017f47:	83 ec 08             	sub    esp,0x8
c0017f4a:	52                   	push   edx
c0017f4b:	50                   	push   eax
c0017f4c:	e8 27 94 ff ff       	call   c0011378 <VgaText::putx(unsigned int)>
c0017f51:	83 c4 10             	add    esp,0x10
c0017f54:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0017f59:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017f5f:	83 ec 08             	sub    esp,0x8
c0017f62:	68 3a 2e 02 c0       	push   0xc0022e3a
c0017f67:	50                   	push   eax
c0017f68:	e8 51 94 ff ff       	call   c00113be <VgaText::puts(char const*)>
c0017f6d:	83 c4 10             	add    esp,0x10
c0017f70:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0017f75:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017f7b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017f7f:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c0017f82:	83 ec 08             	sub    esp,0x8
c0017f85:	52                   	push   edx
c0017f86:	50                   	push   eax
c0017f87:	e8 ec 93 ff ff       	call   c0011378 <VgaText::putx(unsigned int)>
c0017f8c:	83 c4 10             	add    esp,0x10
c0017f8f:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0017f94:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017f9a:	83 ec 08             	sub    esp,0x8
c0017f9d:	68 42 2e 02 c0       	push   0xc0022e42
c0017fa2:	50                   	push   eax
c0017fa3:	e8 16 94 ff ff       	call   c00113be <VgaText::puts(char const*)>
c0017fa8:	83 c4 10             	add    esp,0x10
c0017fab:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0017fb0:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017fb6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017fba:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0017fbd:	83 ec 08             	sub    esp,0x8
c0017fc0:	52                   	push   edx
c0017fc1:	50                   	push   eax
c0017fc2:	e8 b1 93 ff ff       	call   c0011378 <VgaText::putx(unsigned int)>
c0017fc7:	83 c4 10             	add    esp,0x10
c0017fca:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0017fcf:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017fd5:	83 ec 08             	sub    esp,0x8
c0017fd8:	68 4a 2e 02 c0       	push   0xc0022e4a
c0017fdd:	50                   	push   eax
c0017fde:	e8 db 93 ff ff       	call   c00113be <VgaText::puts(char const*)>
c0017fe3:	83 c4 10             	add    esp,0x10
c0017fe6:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0017feb:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017ff1:	83 ec 08             	sub    esp,0x8
c0017ff4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017ff8:	50                   	push   eax
c0017ff9:	e8 7a 93 ff ff       	call   c0011378 <VgaText::putx(unsigned int)>
c0017ffe:	83 c4 10             	add    esp,0x10
c0018001:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0018006:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001800c:	83 ec 08             	sub    esp,0x8
c001800f:	68 53 2e 02 c0       	push   0xc0022e53
c0018014:	50                   	push   eax
c0018015:	e8 a4 93 ff ff       	call   c00113be <VgaText::puts(char const*)>
c001801a:	83 c4 10             	add    esp,0x10
c001801d:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0018022:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018028:	83 ec 08             	sub    esp,0x8
c001802b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001802f:	50                   	push   eax
c0018030:	e8 43 93 ff ff       	call   c0011378 <VgaText::putx(unsigned int)>
c0018035:	83 c4 10             	add    esp,0x10
c0018038:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c001803d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018043:	83 ec 08             	sub    esp,0x8
c0018046:	68 5b 2e 02 c0       	push   0xc0022e5b
c001804b:	50                   	push   eax
c001804c:	e8 6d 93 ff ff       	call   c00113be <VgaText::puts(char const*)>
c0018051:	83 c4 10             	add    esp,0x10
c0018054:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0018059:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001805f:	83 ec 08             	sub    esp,0x8
c0018062:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0018066:	50                   	push   eax
c0018067:	e8 0c 93 ff ff       	call   c0011378 <VgaText::putx(unsigned int)>
c001806c:	83 c4 10             	add    esp,0x10
c001806f:	fa                   	cli    
c0018070:	f4                   	hlt    
c0018071:	eb fe                	jmp    c0018071 <HalDisplayDebugInfo(void*)+0x38c>

c0018073 <HalReceivedNMI()>:
c0018073:	83 ec 1c             	sub    esp,0x1c
c0018076:	66 c7 44 24 08 92 00 	mov    WORD PTR [esp+0x8],0x92
c001807d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018081:	89 c2                	mov    edx,eax
c0018083:	ec                   	in     al,dx
c0018084:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0018088:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c001808c:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0018090:	66 c7 44 24 0c 61 00 	mov    WORD PTR [esp+0xc],0x61
c0018097:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001809b:	89 c2                	mov    edx,eax
c001809d:	ec                   	in     al,dx
c001809e:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00180a2:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c00180a6:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c00180aa:	83 ec 0c             	sub    esp,0xc
c00180ad:	68 63 2e 02 c0       	push   0xc0022e63
c00180b2:	e8 97 ee fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00180b7:	83 c4 10             	add    esp,0x10
c00180ba:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00180bf:	83 e0 10             	and    eax,0x10
c00180c2:	74 10                	je     c00180d4 <HalReceivedNMI()+0x61>
c00180c4:	83 ec 0c             	sub    esp,0xc
c00180c7:	68 74 2e 02 c0       	push   0xc0022e74
c00180cc:	e8 55 6b ff ff       	call   c000ec26 <KePanic(char const*)>
c00180d1:	83 c4 10             	add    esp,0x10
c00180d4:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c00180d9:	83 e0 40             	and    eax,0x40
c00180dc:	74 10                	je     c00180ee <HalReceivedNMI()+0x7b>
c00180de:	83 ec 0c             	sub    esp,0xc
c00180e1:	68 81 2e 02 c0       	push   0xc0022e81
c00180e6:	e8 3b 6b ff ff       	call   c000ec26 <KePanic(char const*)>
c00180eb:	83 c4 10             	add    esp,0x10
c00180ee:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c00180f2:	0f be c0             	movsx  eax,al
c00180f5:	85 c0                	test   eax,eax
c00180f7:	79 10                	jns    c0018109 <HalReceivedNMI()+0x96>
c00180f9:	83 ec 0c             	sub    esp,0xc
c00180fc:	68 8b 2e 02 c0       	push   0xc0022e8b
c0018101:	e8 20 6b ff ff       	call   c000ec26 <KePanic(char const*)>
c0018106:	83 c4 10             	add    esp,0x10
c0018109:	90                   	nop
c001810a:	83 c4 1c             	add    esp,0x1c
c001810d:	c3                   	ret    

c001810e <HalSystemIdle()>:
c001810e:	56                   	push   esi
c001810f:	53                   	push   ebx
c0018110:	83 ec 14             	sub    esp,0x14
c0018113:	a0 90 c7 02 c0       	mov    al,ds:0xc002c790
c0018118:	83 e0 10             	and    eax,0x10
c001811b:	0f b6 c0             	movzx  eax,al
c001811e:	85 c0                	test   eax,eax
c0018120:	74 43                	je     c0018165 <HalSystemIdle()+0x57>
c0018122:	83 ec 0c             	sub    esp,0xc
c0018125:	68 e1 00 00 00       	push   0xe1
c001812a:	e8 17 fa ff ff       	call   c0017b46 <x86rdmsr(unsigned int)>
c001812f:	83 c4 10             	add    esp,0x10
c0018132:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018136:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001813a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001813e:	83 e0 02             	and    eax,0x2
c0018141:	89 c3                	mov    ebx,eax
c0018143:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018147:	83 e0 00             	and    eax,0x0
c001814a:	89 c6                	mov    esi,eax
c001814c:	83 ec 04             	sub    esp,0x4
c001814f:	56                   	push   esi
c0018150:	53                   	push   ebx
c0018151:	68 e1 00 00 00       	push   0xe1
c0018156:	e8 29 fa ff ff       	call   c0017b84 <x86wrmsr(unsigned int, unsigned long long)>
c001815b:	83 c4 10             	add    esp,0x10
c001815e:	e8 31 80 fe ff       	call   c0000194 <doTPAUSE>
c0018163:	eb 01                	jmp    c0018166 <HalSystemIdle()+0x58>
c0018165:	f4                   	hlt    
c0018166:	90                   	nop
c0018167:	83 c4 14             	add    esp,0x14
c001816a:	5b                   	pop    ebx
c001816b:	5e                   	pop    esi
c001816c:	c3                   	ret    

c001816d <i386SaveCoprocessor(void*)>:
c001816d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018171:	83 c0 3f             	add    eax,0x3f
c0018174:	83 e0 c0             	and    eax,0xffffffc0
c0018177:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001817b:	ff 25 50 c7 02 c0    	jmp    DWORD PTR ds:0xc002c750

c0018181 <i386LoadCoprocessor(void*)>:
c0018181:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018185:	83 c0 3f             	add    eax,0x3f
c0018188:	83 e0 c0             	and    eax,0xffffffc0
c001818b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001818f:	ff 25 4c c7 02 c0    	jmp    DWORD PTR ds:0xc002c74c

c0018195 <x87EmulHandler(regs*, void*)>:
c0018195:	53                   	push   ebx
c0018196:	83 ec 08             	sub    esp,0x8
c0018199:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001819e:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c00181a2:	74 10                	je     c00181b4 <x87EmulHandler(regs*, void*)+0x1f>
c00181a4:	83 ec 0c             	sub    esp,0xc
c00181a7:	68 98 2e 02 c0       	push   0xc0022e98
c00181ac:	e8 75 6a ff ff       	call   c000ec26 <KePanic(char const*)>
c00181b1:	83 c4 10             	add    esp,0x10
c00181b4:	0f 20 c0             	mov    eax,cr0
c00181b7:	a8 08                	test   al,0x8
c00181b9:	74 59                	je     c0018214 <x87EmulHandler(regs*, void*)+0x7f>
c00181bb:	0f 06                	clts   
c00181bd:	a1 48 c7 02 c0       	mov    eax,ds:0xc002c748
c00181c2:	85 c0                	test   eax,eax
c00181c4:	74 0e                	je     c00181d4 <x87EmulHandler(regs*, void*)+0x3f>
c00181c6:	83 ec 0c             	sub    esp,0xc
c00181c9:	ff 70 55             	push   DWORD PTR [eax+0x55]
c00181cc:	e8 9c ff ff ff       	call   c001816d <i386SaveCoprocessor(void*)>
c00181d1:	83 c4 10             	add    esp,0x10
c00181d4:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c00181da:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c00181de:	75 12                	jne    c00181f2 <x87EmulHandler(regs*, void*)+0x5d>
c00181e0:	83 ec 0c             	sub    esp,0xc
c00181e3:	68 40 02 00 00       	push   0x240
c00181e8:	e8 e3 66 ff ff       	call   c000e8d0 <malloc>
c00181ed:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c00181f0:	eb 10                	jmp    c0018202 <x87EmulHandler(regs*, void*)+0x6d>
c00181f2:	a1 48 c7 02 c0       	mov    eax,ds:0xc002c748
c00181f7:	83 ec 0c             	sub    esp,0xc
c00181fa:	ff 70 55             	push   DWORD PTR [eax+0x55]
c00181fd:	e8 7f ff ff ff       	call   c0018181 <i386LoadCoprocessor(void*)>
c0018202:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018207:	83 c4 10             	add    esp,0x10
c001820a:	a3 48 c7 02 c0       	mov    ds:0xc002c748,eax
c001820f:	83 c4 08             	add    esp,0x8
c0018212:	5b                   	pop    ebx
c0018213:	c3                   	ret    
c0018214:	83 ec 0c             	sub    esp,0xc
c0018217:	68 ac 2e 02 c0       	push   0xc0022eac
c001821c:	e8 2d ed fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0018221:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0018229:	83 c4 18             	add    esp,0x18
c001822c:	5b                   	pop    ebx
c001822d:	e9 1e da ff ff       	jmp    c0015c50 <Thr::terminateFromIRQ(int)>

c0018232 <HalInitialiseCoprocessor()>:
c0018232:	83 ec 10             	sub    esp,0x10
c0018235:	6a 00                	push   0x0
c0018237:	68 95 81 01 c0       	push   0xc0018195
c001823c:	6a 07                	push   0x7
c001823e:	c7 05 48 c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c748,0x0
c0018248:	e8 9e 06 00 00       	call   c00188eb <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001824d:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0018252:	83 c4 10             	add    esp,0x10
c0018255:	a8 80                	test   al,0x80
c0018257:	74 1c                	je     c0018275 <HalInitialiseCoprocessor()+0x43>
c0018259:	c7 05 50 c7 02 c0 e8 f6 01 c0 	mov    DWORD PTR ds:0xc002c750,0xc001f6e8
c0018263:	c7 05 4c c7 02 c0 f0 f6 01 c0 	mov    DWORD PTR ds:0xc002c74c,0xc001f6f0
c001826d:	83 c4 0c             	add    esp,0xc
c0018270:	e9 83 74 00 00       	jmp    c001f6f8 <sseInit>
c0018275:	a8 10                	test   al,0x10
c0018277:	74 1c                	je     c0018295 <HalInitialiseCoprocessor()+0x63>
c0018279:	c7 05 50 c7 02 c0 37 f7 01 c0 	mov    DWORD PTR ds:0xc002c750,0xc001f737
c0018283:	c7 05 4c c7 02 c0 3e f7 01 c0 	mov    DWORD PTR ds:0xc002c74c,0xc001f73e
c001828d:	83 c4 0c             	add    esp,0xc
c0018290:	e9 b0 74 00 00       	jmp    c001f745 <x87Init>
c0018295:	c7 05 50 c7 02 c0 26 6a 01 c0 	mov    DWORD PTR ds:0xc002c750,0xc0016a26
c001829f:	c7 05 4c c7 02 c0 26 6a 01 c0 	mov    DWORD PTR ds:0xc002c74c,0xc0016a26
c00182a9:	0f 20 c0             	mov    eax,cr0
c00182ac:	83 c8 04             	or     eax,0x4
c00182af:	0f 22 c0             	mov    cr0,eax
c00182b2:	83 c4 0c             	add    esp,0xc
c00182b5:	c3                   	ret    

c00182b6 <HalPanic(char const*)>:
c00182b6:	53                   	push   ebx
c00182b7:	83 ec 10             	sub    esp,0x10
c00182ba:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00182be:	fa                   	cli    
c00182bf:	53                   	push   ebx
c00182c0:	68 c2 2e 02 c0       	push   0xc0022ec2
c00182c5:	e8 84 ec fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00182ca:	a1 44 c7 02 c0       	mov    eax,ds:0xc002c744
c00182cf:	83 c4 10             	add    esp,0x10
c00182d2:	85 c0                	test   eax,eax
c00182d4:	74 09                	je     c00182df <HalPanic(char const*)+0x29>
c00182d6:	83 ec 0c             	sub    esp,0xc
c00182d9:	53                   	push   ebx
c00182da:	ff d0                	call   eax
c00182dc:	83 c4 10             	add    esp,0x10
c00182df:	a1 34 be 02 c0       	mov    eax,ds:0xc002be34
c00182e4:	85 c0                	test   eax,eax
c00182e6:	0f 84 dc 00 00 00    	je     c00183c8 <HalPanic(char const*)+0x112>
c00182ec:	52                   	push   edx
c00182ed:	6a 01                	push   0x1
c00182ef:	6a 0f                	push   0xf
c00182f1:	50                   	push   eax
c00182f2:	e8 e5 8b ff ff       	call   c0010edc <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00182f7:	59                   	pop    ecx
c00182f8:	ff 35 34 be 02 c0    	push   DWORD PTR ds:0xc002be34
c00182fe:	e8 c9 8d ff ff       	call   c00110cc <VgaText::clearScreen()>
c0018303:	58                   	pop    eax
c0018304:	5a                   	pop    edx
c0018305:	68 30 23 02 c0       	push   0xc0022330
c001830a:	ff 35 34 be 02 c0    	push   DWORD PTR ds:0xc002be34
c0018310:	e8 ff 8b ff ff       	call   c0010f14 <VgaText::setTitle(char*)>
c0018315:	83 c4 0c             	add    esp,0xc
c0018318:	6a 01                	push   0x1
c001831a:	6a 0f                	push   0xf
c001831c:	ff 35 34 be 02 c0    	push   DWORD PTR ds:0xc002be34
c0018322:	e8 b5 8b ff ff       	call   c0010edc <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0018327:	59                   	pop    ecx
c0018328:	58                   	pop    eax
c0018329:	68 db 2e 02 c0       	push   0xc0022edb
c001832e:	ff 35 34 be 02 c0    	push   DWORD PTR ds:0xc002be34
c0018334:	e8 85 90 ff ff       	call   c00113be <VgaText::puts(char const*)>
c0018339:	83 c4 0c             	add    esp,0xc
c001833c:	6a 0f                	push   0xf
c001833e:	6a 01                	push   0x1
c0018340:	ff 35 34 be 02 c0    	push   DWORD PTR ds:0xc002be34
c0018346:	e8 91 8b ff ff       	call   c0010edc <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001834b:	58                   	pop    eax
c001834c:	5a                   	pop    edx
c001834d:	68 e4 2e 02 c0       	push   0xc0022ee4
c0018352:	ff 35 34 be 02 c0    	push   DWORD PTR ds:0xc002be34
c0018358:	e8 61 90 ff ff       	call   c00113be <VgaText::puts(char const*)>
c001835d:	83 c4 0c             	add    esp,0xc
c0018360:	6a 01                	push   0x1
c0018362:	6a 0f                	push   0xf
c0018364:	ff 35 34 be 02 c0    	push   DWORD PTR ds:0xc002be34
c001836a:	e8 6d 8b ff ff       	call   c0010edc <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001836f:	59                   	pop    ecx
c0018370:	58                   	pop    eax
c0018371:	68 28 2f 02 c0       	push   0xc0022f28
c0018376:	ff 35 34 be 02 c0    	push   DWORD PTR ds:0xc002be34
c001837c:	e8 3d 90 ff ff       	call   c00113be <VgaText::puts(char const*)>
c0018381:	58                   	pop    eax
c0018382:	5a                   	pop    edx
c0018383:	68 f1 2e 02 c0       	push   0xc0022ef1
c0018388:	ff 35 34 be 02 c0    	push   DWORD PTR ds:0xc002be34
c001838e:	e8 2b 90 ff ff       	call   c00113be <VgaText::puts(char const*)>
c0018393:	59                   	pop    ecx
c0018394:	58                   	pop    eax
c0018395:	68 2b 2f 02 c0       	push   0xc0022f2b
c001839a:	ff 35 34 be 02 c0    	push   DWORD PTR ds:0xc002be34
c00183a0:	e8 19 90 ff ff       	call   c00113be <VgaText::puts(char const*)>
c00183a5:	58                   	pop    eax
c00183a6:	5a                   	pop    edx
c00183a7:	53                   	push   ebx
c00183a8:	ff 35 34 be 02 c0    	push   DWORD PTR ds:0xc002be34
c00183ae:	e8 0b 90 ff ff       	call   c00113be <VgaText::puts(char const*)>
c00183b3:	59                   	pop    ecx
c00183b4:	5b                   	pop    ebx
c00183b5:	68 28 2f 02 c0       	push   0xc0022f28
c00183ba:	ff 35 34 be 02 c0    	push   DWORD PTR ds:0xc002be34
c00183c0:	e8 f9 8f ff ff       	call   c00113be <VgaText::puts(char const*)>
c00183c5:	83 c4 10             	add    esp,0x10
c00183c8:	eb fe                	jmp    c00183c8 <HalPanic(char const*)+0x112>

c00183ca <HalQueryPerformanceCounter()>:
c00183ca:	31 c0                	xor    eax,eax
c00183cc:	31 d2                	xor    edx,edx
c00183ce:	f6 05 8e c7 02 c0 08 	test   BYTE PTR ds:0xc002c78e,0x8
c00183d5:	75 02                	jne    c00183d9 <HalQueryPerformanceCounter()+0xf>
c00183d7:	0f 31                	rdtsc  
c00183d9:	c3                   	ret    

c00183da <HalInitialise()>:
c00183da:	53                   	push   ebx
c00183db:	83 ec 08             	sub    esp,0x8
c00183de:	c6 05 40 c7 02 c0 00 	mov    BYTE PTR ds:0xc002c740,0x0
c00183e5:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c00183ea:	83 e0 fe             	and    eax,0xfffffffe
c00183ed:	a2 8c c7 02 c0       	mov    ds:0xc002c78c,al
c00183f2:	e8 d9 07 00 00       	call   c0018bd0 <picOpen()>
c00183f7:	80 3d 40 c7 02 c0 00 	cmp    BYTE PTR ds:0xc002c740,0x0
c00183fe:	74 0a                	je     c001840a <HalInitialise()+0x30>
c0018400:	e8 1b 07 00 00       	call   c0018b20 <picDisable()>
c0018405:	e8 ba 68 00 00       	call   c001ecc4 <apicOpen()>
c001840a:	50                   	push   eax
c001840b:	bb 0f 00 00 00       	mov    ebx,0xf
c0018410:	6a 00                	push   0x0
c0018412:	68 8c df 00 c0       	push   0xc000df8c
c0018417:	6a 00                	push   0x0
c0018419:	e8 cd 04 00 00       	call   c00188eb <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001841e:	83 c4 0c             	add    esp,0xc
c0018421:	6a 00                	push   0x0
c0018423:	68 8c df 00 c0       	push   0xc000df8c
c0018428:	6a 01                	push   0x1
c001842a:	e8 bc 04 00 00       	call   c00188eb <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001842f:	83 c4 0c             	add    esp,0xc
c0018432:	6a 00                	push   0x0
c0018434:	68 7c df 00 c0       	push   0xc000df7c
c0018439:	6a 02                	push   0x2
c001843b:	e8 ab 04 00 00       	call   c00188eb <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0018440:	83 c4 0c             	add    esp,0xc
c0018443:	6a 00                	push   0x0
c0018445:	68 8c df 00 c0       	push   0xc000df8c
c001844a:	6a 03                	push   0x3
c001844c:	e8 9a 04 00 00       	call   c00188eb <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0018451:	83 c4 0c             	add    esp,0xc
c0018454:	6a 00                	push   0x0
c0018456:	68 8c df 00 c0       	push   0xc000df8c
c001845b:	6a 04                	push   0x4
c001845d:	e8 89 04 00 00       	call   c00188eb <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0018462:	83 c4 0c             	add    esp,0xc
c0018465:	6a 00                	push   0x0
c0018467:	68 8c df 00 c0       	push   0xc000df8c
c001846c:	6a 05                	push   0x5
c001846e:	e8 78 04 00 00       	call   c00188eb <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0018473:	83 c4 0c             	add    esp,0xc
c0018476:	6a 00                	push   0x0
c0018478:	68 c0 df 00 c0       	push   0xc000dfc0
c001847d:	6a 06                	push   0x6
c001847f:	e8 67 04 00 00       	call   c00188eb <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0018484:	83 c4 0c             	add    esp,0xc
c0018487:	6a 00                	push   0x0
c0018489:	68 14 e0 00 c0       	push   0xc000e014
c001848e:	6a 08                	push   0x8
c0018490:	e8 56 04 00 00       	call   c00188eb <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0018495:	83 c4 0c             	add    esp,0xc
c0018498:	6a 00                	push   0x0
c001849a:	68 8c df 00 c0       	push   0xc000df8c
c001849f:	6a 09                	push   0x9
c00184a1:	e8 45 04 00 00       	call   c00188eb <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c00184a6:	83 c4 0c             	add    esp,0xc
c00184a9:	6a 00                	push   0x0
c00184ab:	68 8c df 00 c0       	push   0xc000df8c
c00184b0:	6a 0a                	push   0xa
c00184b2:	e8 34 04 00 00       	call   c00188eb <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c00184b7:	83 c4 0c             	add    esp,0xc
c00184ba:	6a 00                	push   0x0
c00184bc:	68 8c df 00 c0       	push   0xc000df8c
c00184c1:	6a 0b                	push   0xb
c00184c3:	e8 23 04 00 00       	call   c00188eb <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c00184c8:	83 c4 0c             	add    esp,0xc
c00184cb:	6a 00                	push   0x0
c00184cd:	68 d4 de 00 c0       	push   0xc000ded4
c00184d2:	6a 0d                	push   0xd
c00184d4:	e8 12 04 00 00       	call   c00188eb <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c00184d9:	83 c4 0c             	add    esp,0xc
c00184dc:	6a 00                	push   0x0
c00184de:	68 28 df 00 c0       	push   0xc000df28
c00184e3:	6a 0e                	push   0xe
c00184e5:	e8 01 04 00 00       	call   c00188eb <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c00184ea:	83 c4 10             	add    esp,0x10
c00184ed:	50                   	push   eax
c00184ee:	6a 00                	push   0x0
c00184f0:	68 8c df 00 c0       	push   0xc000df8c
c00184f5:	53                   	push   ebx
c00184f6:	43                   	inc    ebx
c00184f7:	e8 ef 03 00 00       	call   c00188eb <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c00184fc:	83 c4 10             	add    esp,0x10
c00184ff:	83 fb 1e             	cmp    ebx,0x1e
c0018502:	75 e9                	jne    c00184ed <HalInitialise()+0x113>
c0018504:	50                   	push   eax
c0018505:	6a 00                	push   0x0
c0018507:	68 68 0d 01 c0       	push   0xc0010d68
c001850c:	6a 60                	push   0x60
c001850e:	e8 d8 03 00 00       	call   c00188eb <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0018513:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c0018518:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0018522:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c0018529:	e8 a2 63 ff ff       	call   c000e8d0 <malloc>
c001852e:	89 04 24             	mov    DWORD PTR [esp],eax
c0018531:	89 c3                	mov    ebx,eax
c0018533:	e8 00 0e 00 00       	call   c0019338 <RTC::RTC()>
c0018538:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c0018542:	5a                   	pop    edx
c0018543:	59                   	pop    ecx
c0018544:	53                   	push   ebx
c0018545:	ff 35 70 9d 02 c0    	push   DWORD PTR ds:0xc0029d70
c001854b:	e8 f2 0a ff ff       	call   c0009042 <Device::addChild(Device*)>
c0018550:	8b 03                	mov    eax,DWORD PTR [ebx]
c0018552:	6a 00                	push   0x0
c0018554:	6a 00                	push   0x0
c0018556:	6a 00                	push   0x0
c0018558:	53                   	push   ebx
c0018559:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001855c:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c0018561:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c0018567:	83 c4 28             	add    esp,0x28
c001856a:	5b                   	pop    ebx
c001856b:	c3                   	ret    

c001856c <HalMakeBeep(int)>:
c001856c:	53                   	push   ebx
c001856d:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0018571:	85 db                	test   ebx,ebx
c0018573:	75 07                	jne    c001857c <HalMakeBeep(int)+0x10>
c0018575:	e4 61                	in     al,0x61
c0018577:	83 e0 fc             	and    eax,0xfffffffc
c001857a:	eb 26                	jmp    c00185a2 <HalMakeBeep(int)+0x36>
c001857c:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0018581:	99                   	cdq    
c0018582:	f7 fb                	idiv   ebx
c0018584:	89 c1                	mov    ecx,eax
c0018586:	b0 b6                	mov    al,0xb6
c0018588:	e6 43                	out    0x43,al
c001858a:	88 c8                	mov    al,cl
c001858c:	e6 42                	out    0x42,al
c001858e:	89 c8                	mov    eax,ecx
c0018590:	c1 e8 08             	shr    eax,0x8
c0018593:	e6 42                	out    0x42,al
c0018595:	e4 61                	in     al,0x61
c0018597:	89 c2                	mov    edx,eax
c0018599:	83 ca 03             	or     edx,0x3
c001859c:	38 d0                	cmp    al,dl
c001859e:	74 04                	je     c00185a4 <HalMakeBeep(int)+0x38>
c00185a0:	88 d0                	mov    al,dl
c00185a2:	e6 61                	out    0x61,al
c00185a4:	5b                   	pop    ebx
c00185a5:	c3                   	ret    

c00185a6 <HalGetRand()>:
c00185a6:	31 c0                	xor    eax,eax
c00185a8:	c3                   	ret    

c00185a9 <HalEndOfInterrupt(int)>:
c00185a9:	80 3d 40 c7 02 c0 00 	cmp    BYTE PTR ds:0xc002c740,0x0
c00185b0:	74 1d                	je     c00185cf <HalEndOfInterrupt(int)+0x26>
c00185b2:	83 ec 18             	sub    esp,0x18
c00185b5:	6a 1b                	push   0x1b
c00185b7:	e8 8a f5 ff ff       	call   c0017b46 <x86rdmsr(unsigned int)>
c00185bc:	25 00 f0 ff ff       	and    eax,0xfffff000
c00185c1:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c00185cb:	83 c4 1c             	add    esp,0x1c
c00185ce:	c3                   	ret    
c00185cf:	e9 80 07 00 00       	jmp    c0018d54 <picEOI(int)>

c00185d4 <HalRestart()>:
c00185d4:	c3                   	ret    

c00185d5 <HalShutdown()>:
c00185d5:	c3                   	ret    

c00185d6 <HalSleep()>:
c00185d6:	c3                   	ret    
c00185d7:	90                   	nop

c00185d8 <CPU::CPU()>:
c00185d8:	83 ec 0c             	sub    esp,0xc
c00185db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00185df:	83 ec 08             	sub    esp,0x8
c00185e2:	68 ed 2c 02 c0       	push   0xc0022ced
c00185e7:	50                   	push   eax
c00185e8:	e8 b7 0b ff ff       	call   c00091a4 <Device::Device(char const*)>
c00185ed:	83 c4 10             	add    esp,0x10
c00185f0:	ba c8 2f 02 c0       	mov    edx,0xc0022fc8
c00185f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00185f9:	89 10                	mov    DWORD PTR [eax],edx
c00185fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00185ff:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0018609:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001860d:	05 64 01 00 00       	add    eax,0x164
c0018612:	83 ec 0c             	sub    esp,0xc
c0018615:	50                   	push   eax
c0018616:	e8 4d 5a ff ff       	call   c000e068 <GDT::GDT()>
c001861b:	83 c4 10             	add    esp,0x10
c001861e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018622:	05 68 09 00 00       	add    eax,0x968
c0018627:	83 ec 0c             	sub    esp,0xc
c001862a:	50                   	push   eax
c001862b:	e8 88 5c ff ff       	call   c000e2b8 <IDT::IDT()>
c0018630:	83 c4 10             	add    esp,0x10
c0018633:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018637:	05 68 11 00 00       	add    eax,0x1168
c001863c:	83 ec 0c             	sub    esp,0xc
c001863f:	50                   	push   eax
c0018640:	e8 fb 91 ff ff       	call   c0011840 <TSS::TSS()>
c0018645:	83 c4 10             	add    esp,0x10
c0018648:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001864c:	c7 80 10 01 00 00 11 00 00 00 	mov    DWORD PTR [eax+0x110],0x11
c0018656:	90                   	nop
c0018657:	83 c4 0c             	add    esp,0xc
c001865a:	c3                   	ret    
c001865b:	90                   	nop

c001865c <CPU::setupSMEP()>:
c001865c:	0f 20 e0             	mov    eax,cr4
c001865f:	0d 00 00 10 00       	or     eax,0x100000
c0018664:	0f 22 e0             	mov    cr4,eax
c0018667:	c3                   	ret    

c0018668 <CPU::setupUMIP()>:
c0018668:	0f 20 e0             	mov    eax,cr4
c001866b:	80 cc 08             	or     ah,0x8
c001866e:	0f 22 e0             	mov    cr4,eax
c0018671:	c3                   	ret    

c0018672 <CPU::setupTSC()>:
c0018672:	0f 20 e0             	mov    eax,cr4
c0018675:	83 c8 04             	or     eax,0x4
c0018678:	0f 22 e0             	mov    cr4,eax
c001867b:	c3                   	ret    

c001867c <CPU::setupLargePages()>:
c001867c:	0f 20 e0             	mov    eax,cr4
c001867f:	83 c8 10             	or     eax,0x10
c0018682:	0f 22 e0             	mov    cr4,eax
c0018685:	c3                   	ret    

c0018686 <CPU::setupPAT()>:
c0018686:	f6 05 8c c7 02 c0 08 	test   BYTE PTR ds:0xc002c78c,0x8
c001868d:	74 28                	je     c00186b7 <CPU::setupPAT()+0x31>
c001868f:	53                   	push   ebx
c0018690:	83 ec 14             	sub    esp,0x14
c0018693:	68 77 02 00 00       	push   0x277
c0018698:	e8 a9 f4 ff ff       	call   c0017b46 <x86rdmsr(unsigned int)>
c001869d:	83 c4 0c             	add    esp,0xc
c00186a0:	83 e2 f8             	and    edx,0xfffffff8
c00186a3:	83 ca 01             	or     edx,0x1
c00186a6:	52                   	push   edx
c00186a7:	50                   	push   eax
c00186a8:	68 77 02 00 00       	push   0x277
c00186ad:	e8 d2 f4 ff ff       	call   c0017b84 <x86wrmsr(unsigned int, unsigned long long)>
c00186b2:	83 c4 18             	add    esp,0x18
c00186b5:	5b                   	pop    ebx
c00186b6:	c3                   	ret    
c00186b7:	c3                   	ret    

c00186b8 <CPU::setupMTRR()>:
c00186b8:	c3                   	ret    
c00186b9:	90                   	nop

c00186ba <CPU::setupGlobalPages()>:
c00186ba:	0f 20 e0             	mov    eax,cr4
c00186bd:	0c 80                	or     al,0x80
c00186bf:	0f 22 e0             	mov    cr4,eax
c00186c2:	c3                   	ret    
c00186c3:	90                   	nop

c00186c4 <CPU::allowUsermodeDataAccess()>:
c00186c4:	f6 05 8f c7 02 c0 40 	test   BYTE PTR ds:0xc002c78f,0x40
c00186cb:	74 03                	je     c00186d0 <CPU::allowUsermodeDataAccess()+0xc>
c00186cd:	0f 01 cb             	stac   
c00186d0:	c3                   	ret    
c00186d1:	90                   	nop

c00186d2 <CPU::prohibitUsermodeDataAccess()>:
c00186d2:	f6 05 8f c7 02 c0 40 	test   BYTE PTR ds:0xc002c78f,0x40
c00186d9:	74 03                	je     c00186de <CPU::prohibitUsermodeDataAccess()+0xc>
c00186db:	0f 01 ca             	clac   
c00186de:	c3                   	ret    
c00186df:	90                   	nop

c00186e0 <CPU::setupSMAP()>:
c00186e0:	0f 20 e0             	mov    eax,cr4
c00186e3:	0d 00 00 20 00       	or     eax,0x200000
c00186e8:	0f 22 e0             	mov    cr4,eax
c00186eb:	eb e5                	jmp    c00186d2 <CPU::prohibitUsermodeDataAccess()>
c00186ed:	90                   	nop

c00186ee <CPU::setupFeatures()>:
c00186ee:	53                   	push   ebx
c00186ef:	83 ec 08             	sub    esp,0x8
c00186f2:	f6 05 8f c7 02 c0 20 	test   BYTE PTR ds:0xc002c78f,0x20
c00186f9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00186fd:	74 18                	je     c0018717 <CPU::setupFeatures()+0x29>
c00186ff:	83 ec 0c             	sub    esp,0xc
c0018702:	68 36 2f 02 c0       	push   0xc0022f36
c0018707:	e8 42 e8 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001870c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001870f:	e8 54 ff ff ff       	call   c0018668 <CPU::setupUMIP()>
c0018714:	83 c4 10             	add    esp,0x10
c0018717:	f6 05 8e c7 02 c0 08 	test   BYTE PTR ds:0xc002c78e,0x8
c001871e:	74 18                	je     c0018738 <CPU::setupFeatures()+0x4a>
c0018720:	83 ec 0c             	sub    esp,0xc
c0018723:	68 40 2f 02 c0       	push   0xc0022f40
c0018728:	e8 21 e8 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001872d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018730:	e8 3d ff ff ff       	call   c0018672 <CPU::setupTSC()>
c0018735:	83 c4 10             	add    esp,0x10
c0018738:	f6 05 8e c7 02 c0 20 	test   BYTE PTR ds:0xc002c78e,0x20
c001873f:	74 18                	je     c0018759 <CPU::setupFeatures()+0x6b>
c0018741:	83 ec 0c             	sub    esp,0xc
c0018744:	68 49 2f 02 c0       	push   0xc0022f49
c0018749:	e8 00 e8 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001874e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018751:	e8 26 ff ff ff       	call   c001867c <CPU::setupLargePages()>
c0018756:	83 c4 10             	add    esp,0x10
c0018759:	f6 05 8e c7 02 c0 40 	test   BYTE PTR ds:0xc002c78e,0x40
c0018760:	74 18                	je     c001877a <CPU::setupFeatures()+0x8c>
c0018762:	83 ec 0c             	sub    esp,0xc
c0018765:	68 52 2f 02 c0       	push   0xc0022f52
c001876a:	e8 df e7 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001876f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018772:	e8 43 ff ff ff       	call   c00186ba <CPU::setupGlobalPages()>
c0018777:	83 c4 10             	add    esp,0x10
c001877a:	f6 05 8e c7 02 c0 80 	test   BYTE PTR ds:0xc002c78e,0x80
c0018781:	74 18                	je     c001879b <CPU::setupFeatures()+0xad>
c0018783:	83 ec 0c             	sub    esp,0xc
c0018786:	68 64 2f 02 c0       	push   0xc0022f64
c001878b:	e8 be e7 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0018790:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018793:	e8 ee fe ff ff       	call   c0018686 <CPU::setupPAT()>
c0018798:	83 c4 10             	add    esp,0x10
c001879b:	f6 05 90 c7 02 c0 04 	test   BYTE PTR ds:0xc002c790,0x4
c00187a2:	74 11                	je     c00187b5 <CPU::setupFeatures()+0xc7>
c00187a4:	c7 44 24 10 6d 2f 02 c0 	mov    DWORD PTR [esp+0x10],0xc0022f6d
c00187ac:	83 c4 08             	add    esp,0x8
c00187af:	5b                   	pop    ebx
c00187b0:	e9 99 e7 fe ff       	jmp    c0006f4e <Dbg::kprintf(char const*, ...)>
c00187b5:	83 c4 08             	add    esp,0x8
c00187b8:	5b                   	pop    ebx
c00187b9:	c3                   	ret    

c00187ba <CPU::open(int, int, void*)>:
c00187ba:	55                   	push   ebp
c00187bb:	57                   	push   edi
c00187bc:	56                   	push   esi
c00187bd:	53                   	push   ebx
c00187be:	83 ec 18             	sub    esp,0x18
c00187c1:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00187c5:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00187c9:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00187cd:	8d 83 64 01 00 00    	lea    eax,[ebx+0x164]
c00187d3:	89 bb 60 01 00 00    	mov    DWORD PTR [ebx+0x160],edi
c00187d9:	8d ab 68 11 00 00    	lea    ebp,[ebx+0x1168]
c00187df:	50                   	push   eax
c00187e0:	e8 e5 58 ff ff       	call   c000e0ca <GDT::setup()>
c00187e5:	83 c4 0c             	add    esp,0xc
c00187e8:	6a 00                	push   0x0
c00187ea:	68 ef be ad de       	push   0xdeadbeef
c00187ef:	55                   	push   ebp
c00187f0:	e8 8f 90 ff ff       	call   c0011884 <TSS::setup(unsigned long, unsigned long)>
c00187f5:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00187f8:	e8 67 90 ff ff       	call   c0011864 <TSS::flush()>
c00187fd:	8d 83 68 09 00 00    	lea    eax,[ebx+0x968]
c0018803:	89 04 24             	mov    DWORD PTR [esp],eax
c0018806:	e8 23 5b ff ff       	call   c000e32e <IDT::setup()>
c001880b:	b8 00 04 00 00       	mov    eax,0x400
c0018810:	0f 23 f8             	mov    dr7,eax
c0018813:	c7 83 5c 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x15c],0xc2400000
c001881d:	e8 fe 65 ff ff       	call   c000ee20 <Phys::allocatePage()>
c0018822:	83 c4 10             	add    esp,0x10
c0018825:	85 f6                	test   esi,esi
c0018827:	89 83 58 01 00 00    	mov    DWORD PTR [ebx+0x158],eax
c001882d:	89 38                	mov    DWORD PTR [eax],edi
c001882f:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0018835:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0018838:	74 10                	je     c001884a <CPU::open(int, int, void*)+0x90>
c001883a:	50                   	push   eax
c001883b:	50                   	push   eax
c001883c:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c0018842:	56                   	push   esi
c0018843:	e8 da 99 ff ff       	call   c0012222 <VAS::setCPUSpecific(unsigned long)>
c0018848:	eb 0d                	jmp    c0018857 <CPU::open(int, int, void*)+0x9d>
c001884a:	83 ec 0c             	sub    esp,0xc
c001884d:	68 77 2f 02 c0       	push   0xc0022f77
c0018852:	e8 cf 63 ff ff       	call   c000ec26 <KePanic(char const*)>
c0018857:	83 c4 10             	add    esp,0x10
c001885a:	83 ec 0c             	sub    esp,0xc
c001885d:	68 85 2f 02 c0       	push   0xc0022f85
c0018862:	e8 3c 3d ff ff       	call   c000c5a3 <KeSetBootMessage(char const*)>
c0018867:	e8 6e fb ff ff       	call   c00183da <HalInitialise()>
c001886c:	a1 90 bd 02 c0       	mov    eax,ds:0xc002bd90
c0018871:	83 e0 10             	and    eax,0x10
c0018874:	83 f8 01             	cmp    eax,0x1
c0018877:	19 c0                	sbb    eax,eax
c0018879:	83 e0 46             	and    eax,0x46
c001887c:	83 c0 1e             	add    eax,0x1e
c001887f:	89 04 24             	mov    DWORD PTR [esp],eax
c0018882:	e8 9e 1e ff ff       	call   c000a725 <setupTimer(int)>
c0018887:	83 c4 10             	add    esp,0x10
c001888a:	f6 05 90 bd 02 c0 20 	test   BYTE PTR ds:0xc002bd90,0x20
c0018891:	89 83 74 11 00 00    	mov    DWORD PTR [ebx+0x1174],eax
c0018897:	74 0c                	je     c00188a5 <CPU::open(int, int, void*)+0xeb>
c0018899:	83 ec 0c             	sub    esp,0xc
c001889c:	53                   	push   ebx
c001889d:	e8 4c fe ff ff       	call   c00186ee <CPU::setupFeatures()>
c00188a2:	83 c4 10             	add    esp,0x10
c00188a5:	83 c4 0c             	add    esp,0xc
c00188a8:	31 c0                	xor    eax,eax
c00188aa:	5b                   	pop    ebx
c00188ab:	5e                   	pop    esi
c00188ac:	5f                   	pop    edi
c00188ad:	5d                   	pop    ebp
c00188ae:	c3                   	ret    

c00188af <convertLegacyIRQNumber(int)>:
c00188af:	83 ec 0c             	sub    esp,0xc
c00188b2:	f6 05 8c c7 02 c0 01 	test   BYTE PTR ds:0xc002c78c,0x1
c00188b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00188bd:	74 0c                	je     c00188cb <convertLegacyIRQNumber(int)+0x1c>
c00188bf:	83 f8 0f             	cmp    eax,0xf
c00188c2:	7f 0b                	jg     c00188cf <convertLegacyIRQNumber(int)+0x20>
c00188c4:	0f b6 80 88 3a 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdc578]
c00188cb:	83 c4 0c             	add    esp,0xc
c00188ce:	c3                   	ret    
c00188cf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00188d3:	83 ec 0c             	sub    esp,0xc
c00188d6:	68 ec 2f 02 c0       	push   0xc0022fec
c00188db:	e8 46 63 ff ff       	call   c000ec26 <KePanic(char const*)>
c00188e0:	83 c4 10             	add    esp,0x10
c00188e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00188e7:	83 c4 0c             	add    esp,0xc
c00188ea:	c3                   	ret    

c00188eb <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>:
c00188eb:	56                   	push   esi
c00188ec:	31 c0                	xor    eax,eax
c00188ee:	53                   	push   ebx
c00188ef:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00188f3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00188f7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00188fb:	89 ca                	mov    edx,ecx
c00188fd:	c1 e2 04             	shl    edx,0x4
c0018900:	83 bc 82 80 ad 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffd5280],0x0
c0018908:	74 17                	je     c0018921 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)+0x36>
c001890a:	83 c0 01             	add    eax,0x1
c001890d:	83 f8 04             	cmp    eax,0x4
c0018910:	75 ee                	jne    c0018900 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c0018912:	c7 44 24 0c 4d 30 02 c0 	mov    DWORD PTR [esp+0xc],0xc002304d
c001891a:	5b                   	pop    ebx
c001891b:	5e                   	pop    esi
c001891c:	e9 05 63 ff ff       	jmp    c000ec26 <KePanic(char const*)>
c0018921:	8d 04 88             	lea    eax,[eax+ecx*4]
c0018924:	89 1c 85 80 ad 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5280],ebx
c001892b:	5b                   	pop    ebx
c001892c:	89 34 85 80 9d 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6280],esi
c0018933:	5e                   	pop    esi
c0018934:	c3                   	ret    

c0018935 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0018935:	55                   	push   ebp
c0018936:	57                   	push   edi
c0018937:	56                   	push   esi
c0018938:	53                   	push   ebx
c0018939:	83 ec 0c             	sub    esp,0xc
c001893c:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0018940:	f6 05 8c c7 02 c0 01 	test   BYTE PTR ds:0xc002c78c,0x1
c0018947:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001894b:	8d 6e 20             	lea    ebp,[esi+0x20]
c001894e:	74 57                	je     c00189a7 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x72>
c0018950:	84 c0                	test   al,al
c0018952:	89 c7                	mov    edi,eax
c0018954:	74 1d                	je     c0018973 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3e>
c0018956:	83 fe 0f             	cmp    esi,0xf
c0018959:	0f 8f d9 00 00 00    	jg     c0018a38 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x103>
c001895f:	0f b6 b6 88 3a 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffdc578]
c0018966:	0f b7 bc 36 c0 9a 02 c0 	movzx  edi,WORD PTR [esi+esi*1-0x3ffd6540]
c001896e:	d1 ef                	shr    edi,1
c0018970:	83 e7 01             	and    edi,0x1
c0018973:	a1 e0 d0 02 c0       	mov    eax,ds:0xc002d0e0
c0018978:	83 ec 08             	sub    esp,0x8
c001897b:	31 db                	xor    ebx,ebx
c001897d:	50                   	push   eax
c001897e:	68 5a 30 02 c0       	push   0xc002305a
c0018983:	e8 c6 e5 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0018988:	a1 e0 d0 02 c0       	mov    eax,ds:0xc002d0e0
c001898d:	83 c4 10             	add    esp,0x10
c0018990:	85 c0                	test   eax,eax
c0018992:	7f 59                	jg     c00189ed <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb8>
c0018994:	8d 6e 20             	lea    ebp,[esi+0x20]
c0018997:	83 ec 0c             	sub    esp,0xc
c001899a:	68 71 30 02 c0       	push   0xc0023071
c001899f:	e8 82 62 ff ff       	call   c000ec26 <KePanic(char const*)>
c00189a4:	83 c4 10             	add    esp,0x10
c00189a7:	89 e8                	mov    eax,ebp
c00189a9:	31 d2                	xor    edx,edx
c00189ab:	c1 e0 04             	shl    eax,0x4
c00189ae:	8b 8c 90 80 ad 02 c0 	mov    ecx,DWORD PTR [eax+edx*4-0x3ffd5280]
c00189b5:	85 c9                	test   ecx,ecx
c00189b7:	0f 84 92 00 00 00    	je     c0018a4f <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x11a>
c00189bd:	83 c2 01             	add    edx,0x1
c00189c0:	83 fa 04             	cmp    edx,0x4
c00189c3:	75 e9                	jne    c00189ae <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x79>
c00189c5:	83 ec 0c             	sub    esp,0xc
c00189c8:	68 28 30 02 c0       	push   0xc0023028
c00189cd:	e8 54 62 ff ff       	call   c000ec26 <KePanic(char const*)>
c00189d2:	83 c4 10             	add    esp,0x10
c00189d5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00189da:	83 c4 0c             	add    esp,0xc
c00189dd:	5b                   	pop    ebx
c00189de:	5e                   	pop    esi
c00189df:	5f                   	pop    edi
c00189e0:	5d                   	pop    ebp
c00189e1:	c3                   	ret    
c00189e2:	83 c3 01             	add    ebx,0x1
c00189e5:	39 1d e0 d0 02 c0    	cmp    DWORD PTR ds:0xc002d0e0,ebx
c00189eb:	7e a7                	jle    c0018994 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x5f>
c00189ed:	8b 2c 9d 00 d1 02 c0 	mov    ebp,DWORD PTR [ebx*4-0x3ffd2f00]
c00189f4:	83 ec 08             	sub    esp,0x8
c00189f7:	56                   	push   esi
c00189f8:	55                   	push   ebp
c00189f9:	e8 52 64 00 00       	call   c001ee50 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c00189fe:	83 c4 10             	add    esp,0x10
c0018a01:	84 c0                	test   al,al
c0018a03:	74 dd                	je     c00189e2 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xad>
c0018a05:	89 f8                	mov    eax,edi
c0018a07:	83 ec 04             	sub    esp,0x4
c0018a0a:	8b 1c 9d 00 d1 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd2f00]
c0018a11:	8d 6e 20             	lea    ebp,[esi+0x20]
c0018a14:	0f b6 f8             	movzx  edi,al
c0018a17:	57                   	push   edi
c0018a18:	89 e8                	mov    eax,ebp
c0018a1a:	6a 00                	push   0x0
c0018a1c:	0f b6 c0             	movzx  eax,al
c0018a1f:	50                   	push   eax
c0018a20:	89 f0                	mov    eax,esi
c0018a22:	6a 00                	push   0x0
c0018a24:	0f b6 c0             	movzx  eax,al
c0018a27:	6a 00                	push   0x0
c0018a29:	50                   	push   eax
c0018a2a:	53                   	push   ebx
c0018a2b:	e8 8c 65 00 00       	call   c001efbc <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c0018a30:	83 c4 20             	add    esp,0x20
c0018a33:	e9 6f ff ff ff       	jmp    c00189a7 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x72>
c0018a38:	83 ec 0c             	sub    esp,0xc
c0018a3b:	31 ff                	xor    edi,edi
c0018a3d:	68 ec 2f 02 c0       	push   0xc0022fec
c0018a42:	e8 df 61 ff ff       	call   c000ec26 <KePanic(char const*)>
c0018a47:	83 c4 10             	add    esp,0x10
c0018a4a:	e9 24 ff ff ff       	jmp    c0018973 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3e>
c0018a4f:	8d 04 aa             	lea    eax,[edx+ebp*4]
c0018a52:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018a56:	89 14 85 80 ad 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5280],edx
c0018a5d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0018a61:	89 14 85 80 9d 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6280],edx
c0018a68:	83 c4 0c             	add    esp,0xc
c0018a6b:	89 f0                	mov    eax,esi
c0018a6d:	5b                   	pop    ebx
c0018a6e:	5e                   	pop    esi
c0018a6f:	5f                   	pop    edi
c0018a70:	5d                   	pop    ebp
c0018a71:	c3                   	ret    

c0018a72 <HalUninstallISRHandler(int, void (*)(regs*, void*))>:
c0018a72:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018a76:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0018a7a:	c1 e0 04             	shl    eax,0x4
c0018a7d:	8d 50 10             	lea    edx,[eax+0x10]
c0018a80:	39 88 80 ad 02 c0    	cmp    DWORD PTR [eax-0x3ffd5280],ecx
c0018a86:	74 08                	je     c0018a90 <HalUninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c0018a88:	83 c0 04             	add    eax,0x4
c0018a8b:	39 d0                	cmp    eax,edx
c0018a8d:	75 f1                	jne    c0018a80 <HalUninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c0018a8f:	c3                   	ret    
c0018a90:	c7 80 80 ad 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5280],0x0
c0018a9a:	c7 80 80 9d 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6280],0x0
c0018aa4:	eb e2                	jmp    c0018a88 <HalUninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c0018aa6 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0018aa6:	56                   	push   esi
c0018aa7:	53                   	push   ebx
c0018aa8:	83 ec 04             	sub    esp,0x4
c0018aab:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0018ab0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0018ab4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0018ab8:	74 09                	je     c0018ac3 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c0018aba:	f6 05 8c c7 02 c0 01 	test   BYTE PTR ds:0xc002c78c,0x1
c0018ac1:	75 34                	jne    c0018af7 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x51>
c0018ac3:	8d 43 20             	lea    eax,[ebx+0x20]
c0018ac6:	c1 e0 04             	shl    eax,0x4
c0018ac9:	8d 50 10             	lea    edx,[eax+0x10]
c0018acc:	39 b0 80 ad 02 c0    	cmp    DWORD PTR [eax-0x3ffd5280],esi
c0018ad2:	74 0d                	je     c0018ae1 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c0018ad4:	83 c0 04             	add    eax,0x4
c0018ad7:	39 d0                	cmp    eax,edx
c0018ad9:	75 f1                	jne    c0018acc <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x26>
c0018adb:	83 c4 04             	add    esp,0x4
c0018ade:	5b                   	pop    ebx
c0018adf:	5e                   	pop    esi
c0018ae0:	c3                   	ret    
c0018ae1:	c7 80 80 ad 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5280],0x0
c0018aeb:	c7 80 80 9d 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6280],0x0
c0018af5:	eb dd                	jmp    c0018ad4 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2e>
c0018af7:	83 fb 0f             	cmp    ebx,0xf
c0018afa:	7f 09                	jg     c0018b05 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x5f>
c0018afc:	0f b6 9b 88 3a 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffdc578]
c0018b03:	eb be                	jmp    c0018ac3 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c0018b05:	83 ec 0c             	sub    esp,0xc
c0018b08:	68 7e 30 02 c0       	push   0xc002307e
c0018b0d:	e8 14 61 ff ff       	call   c000ec26 <KePanic(char const*)>
c0018b12:	83 c4 10             	add    esp,0x10
c0018b15:	eb ac                	jmp    c0018ac3 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c0018b17:	90                   	nop

c0018b18 <picIoWait()>:
c0018b18:	eb 00                	jmp    c0018b1a <picIoWait()+0x2>
c0018b1a:	eb 00                	jmp    c0018b1c <picIoWait()+0x4>
c0018b1c:	90                   	nop
c0018b1d:	c3                   	ret    
c0018b1e:	66 90                	xchg   ax,ax

c0018b20 <picDisable()>:
c0018b20:	83 ec 10             	sub    esp,0x10
c0018b23:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c0018b2a:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c0018b2f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018b33:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0018b38:	ee                   	out    dx,al
c0018b39:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c0018b40:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c0018b45:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0018b49:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c0018b4e:	ee                   	out    dx,al
c0018b4f:	90                   	nop
c0018b50:	83 c4 10             	add    esp,0x10
c0018b53:	c3                   	ret    

c0018b54 <picGetIRQReg(int)>:
c0018b54:	83 ec 10             	sub    esp,0x10
c0018b57:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018b5b:	0f b6 c0             	movzx  eax,al
c0018b5e:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0018b65:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c0018b69:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0018b6d:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0018b72:	ee                   	out    dx,al
c0018b73:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018b77:	0f b6 c0             	movzx  eax,al
c0018b7a:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0018b81:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0018b85:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0018b89:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0018b8e:	ee                   	out    dx,al
c0018b8f:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c0018b96:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0018b9b:	89 c2                	mov    edx,eax
c0018b9d:	ec                   	in     al,dx
c0018b9e:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0018ba2:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018ba6:	0f b6 c0             	movzx  eax,al
c0018ba9:	c1 e0 08             	shl    eax,0x8
c0018bac:	89 c1                	mov    ecx,eax
c0018bae:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c0018bb5:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0018bba:	89 c2                	mov    edx,eax
c0018bbc:	ec                   	in     al,dx
c0018bbd:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0018bc1:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0018bc5:	0f b6 c0             	movzx  eax,al
c0018bc8:	09 c8                	or     eax,ecx
c0018bca:	83 c4 10             	add    esp,0x10
c0018bcd:	c3                   	ret    
c0018bce:	66 90                	xchg   ax,ax

c0018bd0 <picOpen()>:
c0018bd0:	83 ec 50             	sub    esp,0x50
c0018bd3:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c0018bda:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0018bdf:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0018be3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018be7:	ee                   	out    dx,al
c0018be8:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c0018bef:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0018bf4:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0018bf8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018bfc:	ee                   	out    dx,al
c0018bfd:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c0018c05:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c0018c0d:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c0018c14:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018c18:	89 c2                	mov    edx,eax
c0018c1a:	ec                   	in     al,dx
c0018c1b:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c0018c1f:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0018c23:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0018c27:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c0018c2e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018c32:	89 c2                	mov    edx,eax
c0018c34:	ec                   	in     al,dx
c0018c35:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0018c39:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0018c3d:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0018c41:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c0018c48:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c0018c4d:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0018c51:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018c55:	ee                   	out    dx,al
c0018c56:	e8 bd fe ff ff       	call   c0018b18 <picIoWait()>
c0018c5b:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c0018c62:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c0018c67:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0018c6b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018c6f:	ee                   	out    dx,al
c0018c70:	e8 a3 fe ff ff       	call   c0018b18 <picIoWait()>
c0018c75:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0018c79:	0f b6 c0             	movzx  eax,al
c0018c7c:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c0018c83:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c0018c87:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c0018c8b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018c8f:	ee                   	out    dx,al
c0018c90:	e8 83 fe ff ff       	call   c0018b18 <picIoWait()>
c0018c95:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0018c99:	0f b6 c0             	movzx  eax,al
c0018c9c:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c0018ca3:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0018ca7:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0018cab:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0018caf:	ee                   	out    dx,al
c0018cb0:	e8 63 fe ff ff       	call   c0018b18 <picIoWait()>
c0018cb5:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c0018cbc:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c0018cc1:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c0018cc5:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0018cc9:	ee                   	out    dx,al
c0018cca:	e8 49 fe ff ff       	call   c0018b18 <picIoWait()>
c0018ccf:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c0018cd6:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c0018cdb:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0018cdf:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0018ce3:	ee                   	out    dx,al
c0018ce4:	e8 2f fe ff ff       	call   c0018b18 <picIoWait()>
c0018ce9:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c0018cf0:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c0018cf5:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c0018cf9:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0018cfd:	ee                   	out    dx,al
c0018cfe:	e8 15 fe ff ff       	call   c0018b18 <picIoWait()>
c0018d03:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c0018d0a:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c0018d0f:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c0018d13:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0018d17:	ee                   	out    dx,al
c0018d18:	e8 fb fd ff ff       	call   c0018b18 <picIoWait()>
c0018d1d:	0f b6 44 24 47       	movzx  eax,BYTE PTR [esp+0x47]
c0018d22:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c0018d29:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c0018d2d:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0018d31:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0018d35:	ee                   	out    dx,al
c0018d36:	0f b6 44 24 46       	movzx  eax,BYTE PTR [esp+0x46]
c0018d3b:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c0018d42:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0018d46:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c0018d4a:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0018d4e:	ee                   	out    dx,al
c0018d4f:	90                   	nop
c0018d50:	83 c4 50             	add    esp,0x50
c0018d53:	c3                   	ret    

c0018d54 <picEOI(int)>:
c0018d54:	83 ec 10             	sub    esp,0x10
c0018d57:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0018d5c:	75 1e                	jne    c0018d7c <picEOI(int)+0x28>
c0018d5e:	6a 0b                	push   0xb
c0018d60:	e8 ef fd ff ff       	call   c0018b54 <picGetIRQReg(int)>
c0018d65:	83 c4 04             	add    esp,0x4
c0018d68:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c0018d6d:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c0018d72:	25 80 00 00 00       	and    eax,0x80
c0018d77:	74 73                	je     c0018dec <picEOI(int)+0x98>
c0018d79:	8d 76 00             	lea    esi,[esi+0x0]
c0018d7c:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0018d81:	75 31                	jne    c0018db4 <picEOI(int)+0x60>
c0018d83:	6a 0b                	push   0xb
c0018d85:	e8 ca fd ff ff       	call   c0018b54 <picGetIRQReg(int)>
c0018d8a:	83 c4 04             	add    esp,0x4
c0018d8d:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0018d92:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018d96:	98                   	cwde   
c0018d97:	85 c0                	test   eax,eax
c0018d99:	78 19                	js     c0018db4 <picEOI(int)+0x60>
c0018d9b:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c0018da2:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c0018da7:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018dab:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0018db0:	ee                   	out    dx,al
c0018db1:	eb 3d                	jmp    c0018df0 <picEOI(int)+0x9c>
c0018db3:	90                   	nop
c0018db4:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0018db9:	7e 19                	jle    c0018dd4 <picEOI(int)+0x80>
c0018dbb:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0018dc2:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c0018dc7:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0018dcb:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0018dd0:	ee                   	out    dx,al
c0018dd1:	8d 76 00             	lea    esi,[esi+0x0]
c0018dd4:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0018ddb:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c0018de0:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0018de4:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0018de9:	ee                   	out    dx,al
c0018dea:	eb 04                	jmp    c0018df0 <picEOI(int)+0x9c>
c0018dec:	90                   	nop
c0018ded:	8d 76 00             	lea    esi,[esi+0x0]
c0018df0:	83 c4 10             	add    esp,0x10
c0018df3:	c3                   	ret    

c0018df4 <RTC::open(int, int, void*)>:
c0018df4:	31 c0                	xor    eax,eax
c0018df6:	c3                   	ret    
c0018df7:	90                   	nop

c0018df8 <RTC::close(int, int, void*)>:
c0018df8:	31 c0                	xor    eax,eax
c0018dfa:	c3                   	ret    
c0018dfb:	90                   	nop

c0018dfc <RTC::timeInSecondsUTC()>:
c0018dfc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018e00:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0018e06:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0018e0c:	c3                   	ret    
c0018e0d:	90                   	nop

c0018e0e <RTC::timeInDatetimeUTC()>:
c0018e0e:	53                   	push   ebx
c0018e0f:	83 ec 14             	sub    esp,0x14
c0018e12:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018e16:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0018e1a:	8b 10                	mov    edx,DWORD PTR [eax]
c0018e1c:	50                   	push   eax
c0018e1d:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0018e20:	83 c4 0c             	add    esp,0xc
c0018e23:	52                   	push   edx
c0018e24:	50                   	push   eax
c0018e25:	53                   	push   ebx
c0018e26:	e8 8b ff fe ff       	call   c0008db6 <KeSecondsToDatetime(unsigned long long)>
c0018e2b:	89 d8                	mov    eax,ebx
c0018e2d:	83 c4 14             	add    esp,0x14
c0018e30:	5b                   	pop    ebx
c0018e31:	c2 04 00             	ret    0x4

c0018e34 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c0018e34:	56                   	push   esi
c0018e35:	53                   	push   ebx
c0018e36:	83 ec 14             	sub    esp,0x14
c0018e39:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0018e3d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0018e3f:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c0018e42:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018e46:	52                   	push   edx
c0018e47:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018e4b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018e4f:	50                   	push   eax
c0018e50:	e8 61 ff fe ff       	call   c0008db6 <KeSecondsToDatetime(unsigned long long)>
c0018e55:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0018e59:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018e5d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018e61:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0018e65:	89 f0                	mov    eax,esi
c0018e67:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0018e6b:	83 c4 20             	add    esp,0x20
c0018e6e:	5b                   	pop    ebx
c0018e6f:	5e                   	pop    esi
c0018e70:	ff e0                	jmp    eax

c0018e72 <RTC::~RTC()>:
c0018e72:	83 ec 0c             	sub    esp,0xc
c0018e75:	ba a8 30 02 c0       	mov    edx,0xc00230a8
c0018e7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e7e:	89 10                	mov    DWORD PTR [eax],edx
c0018e80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e84:	83 ec 0c             	sub    esp,0xc
c0018e87:	50                   	push   eax
c0018e88:	e8 b5 fc fe ff       	call   c0008b42 <Clock::~Clock()>
c0018e8d:	83 c4 10             	add    esp,0x10
c0018e90:	90                   	nop
c0018e91:	83 c4 0c             	add    esp,0xc
c0018e94:	c3                   	ret    
c0018e95:	90                   	nop

c0018e96 <RTC::~RTC()>:
c0018e96:	83 ec 0c             	sub    esp,0xc
c0018e99:	83 ec 0c             	sub    esp,0xc
c0018e9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018ea0:	e8 cd ff ff ff       	call   c0018e72 <RTC::~RTC()>
c0018ea5:	83 c4 10             	add    esp,0x10
c0018ea8:	83 ec 08             	sub    esp,0x8
c0018eab:	68 60 01 00 00       	push   0x160
c0018eb0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018eb4:	e8 aa 37 ff ff       	call   c000c663 <operator delete(void*, unsigned long)>
c0018eb9:	83 c4 10             	add    esp,0x10
c0018ebc:	83 c4 0c             	add    esp,0xc
c0018ebf:	c3                   	ret    

c0018ec0 <RTC::get_update_in_progress_flag()>:
c0018ec0:	83 ec 18             	sub    esp,0x18
c0018ec3:	6a 0a                	push   0xa
c0018ec5:	e8 61 db ff ff       	call   c0016a2b <x86ReadCMOS(unsigned char)>
c0018eca:	83 c4 1c             	add    esp,0x1c
c0018ecd:	0f b6 c0             	movzx  eax,al
c0018ed0:	c1 e8 07             	shr    eax,0x7
c0018ed3:	c3                   	ret    

c0018ed4 <RTC::completeRTCRefresh()>:
c0018ed4:	55                   	push   ebp
c0018ed5:	57                   	push   edi
c0018ed6:	56                   	push   esi
c0018ed7:	53                   	push   ebx
c0018ed8:	83 ec 3c             	sub    esp,0x3c
c0018edb:	8b 1d ec 97 02 c0    	mov    ebx,DWORD PTR ds:0xc00297ec
c0018ee1:	83 ec 0c             	sub    esp,0xc
c0018ee4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0018ee8:	e8 d3 ff ff ff       	call   c0018ec0 <RTC::get_update_in_progress_flag()>
c0018eed:	83 c4 10             	add    esp,0x10
c0018ef0:	84 c0                	test   al,al
c0018ef2:	74 0e                	je     c0018f02 <RTC::completeRTCRefresh()+0x2e>
c0018ef4:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0018efa:	3b 05 ec 97 02 c0    	cmp    eax,DWORD PTR ds:0xc00297ec
c0018f00:	73 df                	jae    c0018ee1 <RTC::completeRTCRefresh()+0xd>
c0018f02:	83 ec 0c             	sub    esp,0xc
c0018f05:	6a 00                	push   0x0
c0018f07:	e8 1f db ff ff       	call   c0016a2b <x86ReadCMOS(unsigned char)>
c0018f0c:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c0018f13:	89 c7                	mov    edi,eax
c0018f15:	e8 11 db ff ff       	call   c0016a2b <x86ReadCMOS(unsigned char)>
c0018f1a:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0018f21:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c0018f25:	e8 01 db ff ff       	call   c0016a2b <x86ReadCMOS(unsigned char)>
c0018f2a:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0018f31:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c0018f35:	e8 f1 da ff ff       	call   c0016a2b <x86ReadCMOS(unsigned char)>
c0018f3a:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0018f41:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c0018f45:	e8 e1 da ff ff       	call   c0016a2b <x86ReadCMOS(unsigned char)>
c0018f4a:	c7 04 24 09 00 00 00 	mov    DWORD PTR [esp],0x9
c0018f51:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c0018f55:	e8 d1 da ff ff       	call   c0016a2b <x86ReadCMOS(unsigned char)>
c0018f5a:	0f b6 c0             	movzx  eax,al
c0018f5d:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0018f61:	83 c4 10             	add    esp,0x10
c0018f64:	8b 1d ec 97 02 c0    	mov    ebx,DWORD PTR ds:0xc00297ec
c0018f6a:	83 ec 0c             	sub    esp,0xc
c0018f6d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0018f71:	e8 4a ff ff ff       	call   c0018ec0 <RTC::get_update_in_progress_flag()>
c0018f76:	83 c4 10             	add    esp,0x10
c0018f79:	84 c0                	test   al,al
c0018f7b:	74 0e                	je     c0018f8b <RTC::completeRTCRefresh()+0xb7>
c0018f7d:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0018f83:	3b 05 ec 97 02 c0    	cmp    eax,DWORD PTR ds:0xc00297ec
c0018f89:	73 df                	jae    c0018f6a <RTC::completeRTCRefresh()+0x96>
c0018f8b:	83 ec 0c             	sub    esp,0xc
c0018f8e:	6a 00                	push   0x0
c0018f90:	e8 96 da ff ff       	call   c0016a2b <x86ReadCMOS(unsigned char)>
c0018f95:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c0018f9c:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0018fa0:	e8 86 da ff ff       	call   c0016a2b <x86ReadCMOS(unsigned char)>
c0018fa5:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0018fac:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0018fb0:	e8 76 da ff ff       	call   c0016a2b <x86ReadCMOS(unsigned char)>
c0018fb5:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0018fbc:	88 c3                	mov    bl,al
c0018fbe:	e8 68 da ff ff       	call   c0016a2b <x86ReadCMOS(unsigned char)>
c0018fc3:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0018fca:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0018fce:	e8 58 da ff ff       	call   c0016a2b <x86ReadCMOS(unsigned char)>
c0018fd3:	c7 04 24 09 00 00 00 	mov    DWORD PTR [esp],0x9
c0018fda:	89 c6                	mov    esi,eax
c0018fdc:	e8 4a da ff ff       	call   c0016a2b <x86ReadCMOS(unsigned char)>
c0018fe1:	89 f9                	mov    ecx,edi
c0018fe3:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0018fe7:	83 c4 10             	add    esp,0x10
c0018fea:	0f b6 e8             	movzx  ebp,al
c0018fed:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018ff2:	38 4c 24 08          	cmp    BYTE PTR [esp+0x8],cl
c0018ff6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0018ffa:	74 27                	je     c0019023 <RTC::completeRTCRefresh()+0x14f>
c0018ffc:	89 6c 24 24          	mov    DWORD PTR [esp+0x24],ebp
c0019000:	89 f0                	mov    eax,esi
c0019002:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0019006:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c001900a:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001900e:	88 5c 24 1c          	mov    BYTE PTR [esp+0x1c],bl
c0019012:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0019016:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001901a:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001901e:	e9 41 ff ff ff       	jmp    c0018f64 <RTC::completeRTCRefresh()+0x90>
c0019023:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019028:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001902c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0019030:	3a 44 24 18          	cmp    al,BYTE PTR [esp+0x18]
c0019034:	75 c6                	jne    c0018ffc <RTC::completeRTCRefresh()+0x128>
c0019036:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001903b:	89 f1                	mov    ecx,esi
c001903d:	0f b6 fb             	movzx  edi,bl
c0019040:	3a 5c 24 1c          	cmp    bl,BYTE PTR [esp+0x1c]
c0019044:	0f b6 c9             	movzx  ecx,cl
c0019047:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c001904b:	89 f1                	mov    ecx,esi
c001904d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019051:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0019055:	0f 94 c2             	sete   dl
c0019058:	3a 44 24 22          	cmp    al,BYTE PTR [esp+0x22]
c001905c:	0f 94 c0             	sete   al
c001905f:	21 d0                	and    eax,edx
c0019061:	31 d2                	xor    edx,edx
c0019063:	3a 4c 24 23          	cmp    cl,BYTE PTR [esp+0x23]
c0019067:	0f 94 c2             	sete   dl
c001906a:	85 c2                	test   edx,eax
c001906c:	74 8e                	je     c0018ffc <RTC::completeRTCRefresh()+0x128>
c001906e:	39 6c 24 24          	cmp    DWORD PTR [esp+0x24],ebp
c0019072:	75 88                	jne    c0018ffc <RTC::completeRTCRefresh()+0x128>
c0019074:	83 ec 0c             	sub    esp,0xc
c0019077:	6a 0b                	push   0xb
c0019079:	e8 ad d9 ff ff       	call   c0016a2b <x86ReadCMOS(unsigned char)>
c001907e:	83 c4 10             	add    esp,0x10
c0019081:	a8 04                	test   al,0x4
c0019083:	75 7a                	jne    c00190ff <RTC::completeRTCRefresh()+0x22b>
c0019085:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0019089:	c1 ef 04             	shr    edi,0x4
c001908c:	83 e6 0f             	and    esi,0xf
c001908f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0019093:	c1 ed 04             	shr    ebp,0x4
c0019096:	6b ed 0a             	imul   ebp,ebp,0xa
c0019099:	c1 ea 04             	shr    edx,0x4
c001909c:	6b d2 0a             	imul   edx,edx,0xa
c001909f:	83 e1 0f             	and    ecx,0xf
c00190a2:	01 d1                	add    ecx,edx
c00190a4:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00190a8:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00190ac:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00190b0:	c1 ea 04             	shr    edx,0x4
c00190b3:	6b d2 0a             	imul   edx,edx,0xa
c00190b6:	83 e1 0f             	and    ecx,0xf
c00190b9:	01 d1                	add    ecx,edx
c00190bb:	89 fa                	mov    edx,edi
c00190bd:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c00190c1:	83 e2 07             	and    edx,0x7
c00190c4:	89 d9                	mov    ecx,ebx
c00190c6:	6b d2 0a             	imul   edx,edx,0xa
c00190c9:	83 e1 0f             	and    ecx,0xf
c00190cc:	83 e3 80             	and    ebx,0xffffff80
c00190cf:	01 d1                	add    ecx,edx
c00190d1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00190d5:	09 cb                	or     ebx,ecx
c00190d7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00190db:	c1 ea 04             	shr    edx,0x4
c00190de:	6b d2 0a             	imul   edx,edx,0xa
c00190e1:	83 e1 0f             	and    ecx,0xf
c00190e4:	01 d1                	add    ecx,edx
c00190e6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00190ea:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c00190ee:	c1 ea 04             	shr    edx,0x4
c00190f1:	6b d2 0a             	imul   edx,edx,0xa
c00190f4:	01 d6                	add    esi,edx
c00190f6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00190fa:	83 e2 0f             	and    edx,0xf
c00190fd:	01 d5                	add    ebp,edx
c00190ff:	a8 02                	test   al,0x2
c0019101:	75 15                	jne    c0019118 <RTC::completeRTCRefresh()+0x244>
c0019103:	f6 c3 80             	test   bl,0x80
c0019106:	74 10                	je     c0019118 <RTC::completeRTCRefresh()+0x244>
c0019108:	83 e3 7f             	and    ebx,0x7f
c001910b:	b9 18 00 00 00       	mov    ecx,0x18
c0019110:	8d 43 0c             	lea    eax,[ebx+0xc]
c0019113:	99                   	cdq    
c0019114:	f7 f9                	idiv   ecx
c0019116:	88 d3                	mov    bl,dl
c0019118:	8d bd d0 07 00 00    	lea    edi,[ebp+0x7d0]
c001911e:	81 ff e3 07 00 00    	cmp    edi,0x7e3
c0019124:	77 06                	ja     c001912c <RTC::completeRTCRefresh()+0x258>
c0019126:	8d bd 34 08 00 00    	lea    edi,[ebp+0x834]
c001912c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019131:	31 c9                	xor    ecx,ecx
c0019133:	31 d2                	xor    edx,edx
c0019135:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0019139:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c001913d:	89 cd                	mov    ebp,ecx
c001913f:	8a 74 24 08          	mov    dh,BYTE PTR [esp+0x8]
c0019143:	c1 e7 10             	shl    edi,0x10
c0019146:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c001914c:	c1 e0 10             	shl    eax,0x10
c001914f:	09 c5                	or     ebp,eax
c0019151:	89 e9                	mov    ecx,ebp
c0019153:	0f b7 c2             	movzx  eax,dx
c0019156:	8a 6c 24 0c          	mov    ch,BYTE PTR [esp+0xc]
c001915a:	09 f8                	or     eax,edi
c001915c:	89 c2                	mov    edx,eax
c001915e:	50                   	push   eax
c001915f:	50                   	push   eax
c0019160:	88 d9                	mov    cl,bl
c0019162:	51                   	push   ecx
c0019163:	52                   	push   edx
c0019164:	e8 c8 fa fe ff       	call   c0008c31 <KeDatetimeToSeconds(datetime_t)>
c0019169:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c001916d:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c0019173:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c0019179:	83 c4 4c             	add    esp,0x4c
c001917c:	5b                   	pop    ebx
c001917d:	5e                   	pop    esi
c001917e:	5f                   	pop    edi
c001917f:	5d                   	pop    ebp
c0019180:	c3                   	ret    
c0019181:	90                   	nop

c0019182 <RTC::setTimeInDatetimeUTC(datetime_t)>:
c0019182:	55                   	push   ebp
c0019183:	57                   	push   edi
c0019184:	56                   	push   esi
c0019185:	53                   	push   ebx
c0019186:	83 ec 34             	sub    esp,0x34
c0019189:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c001918d:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0019191:	6a 00                	push   0x0
c0019193:	6a 00                	push   0x0
c0019195:	e8 e5 d8 ff ff       	call   c0016a7f <x86WriteCMOS(unsigned char, unsigned char)>
c001919a:	5d                   	pop    ebp
c001919b:	89 fb                	mov    ebx,edi
c001919d:	58                   	pop    eax
c001919e:	6a 00                	push   0x0
c00191a0:	6a 02                	push   0x2
c00191a2:	e8 d8 d8 ff ff       	call   c0016a7f <x86WriteCMOS(unsigned char, unsigned char)>
c00191a7:	89 f8                	mov    eax,edi
c00191a9:	89 f9                	mov    ecx,edi
c00191ab:	0f b6 c4             	movzx  eax,ah
c00191ae:	31 d2                	xor    edx,edx
c00191b0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00191b4:	c1 e9 10             	shr    ecx,0x10
c00191b7:	89 f0                	mov    eax,esi
c00191b9:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c00191bd:	89 f0                	mov    eax,esi
c00191bf:	88 4c 24 1c          	mov    BYTE PTR [esp+0x1c],cl
c00191c3:	0f b6 c4             	movzx  eax,ah
c00191c6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00191ca:	89 f0                	mov    eax,esi
c00191cc:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00191d0:	c1 e8 10             	shr    eax,0x10
c00191d3:	b9 64 00 00 00       	mov    ecx,0x64
c00191d8:	f7 f1                	div    ecx
c00191da:	c7 04 24 0b 00 00 00 	mov    DWORD PTR [esp],0xb
c00191e1:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00191e5:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c00191e9:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c00191ed:	e8 39 d8 ff ff       	call   c0016a2b <x86ReadCMOS(unsigned char)>
c00191f2:	83 c4 10             	add    esp,0x10
c00191f5:	a8 04                	test   al,0x4
c00191f7:	89 c5                	mov    ebp,eax
c00191f9:	75 6e                	jne    c0019269 <RTC::setTimeInDatetimeUTC(datetime_t)+0xe7>
c00191fb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00191ff:	31 d2                	xor    edx,edx
c0019201:	0f b6 c1             	movzx  eax,cl
c0019204:	b9 0a 00 00 00       	mov    ecx,0xa
c0019209:	f7 f1                	div    ecx
c001920b:	c1 e0 04             	shl    eax,0x4
c001920e:	09 d0                	or     eax,edx
c0019210:	31 d2                	xor    edx,edx
c0019212:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019216:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001921b:	f7 f1                	div    ecx
c001921d:	c1 e0 04             	shl    eax,0x4
c0019220:	09 d0                	or     eax,edx
c0019222:	31 d2                	xor    edx,edx
c0019224:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019228:	0f b6 c3             	movzx  eax,bl
c001922b:	f7 f1                	div    ecx
c001922d:	c1 e0 04             	shl    eax,0x4
c0019230:	09 d0                	or     eax,edx
c0019232:	31 d2                	xor    edx,edx
c0019234:	89 c3                	mov    ebx,eax
c0019236:	89 f0                	mov    eax,esi
c0019238:	0f b6 c0             	movzx  eax,al
c001923b:	f7 f1                	div    ecx
c001923d:	c1 e0 04             	shl    eax,0x4
c0019240:	09 d0                	or     eax,edx
c0019242:	31 d2                	xor    edx,edx
c0019244:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0019248:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001924d:	f7 f1                	div    ecx
c001924f:	c1 e0 04             	shl    eax,0x4
c0019252:	09 d0                	or     eax,edx
c0019254:	31 d2                	xor    edx,edx
c0019256:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001925a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001925e:	f7 f1                	div    ecx
c0019260:	c1 e0 04             	shl    eax,0x4
c0019263:	09 d0                	or     eax,edx
c0019265:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019269:	83 e5 02             	and    ebp,0x2
c001926c:	75 1e                	jne    c001928c <RTC::setTimeInDatetimeUTC(datetime_t)+0x10a>
c001926e:	0f b6 c3             	movzx  eax,bl
c0019271:	83 f8 0b             	cmp    eax,0xb
c0019274:	76 10                	jbe    c0019286 <RTC::setTimeInDatetimeUTC(datetime_t)+0x104>
c0019276:	8d 53 f4             	lea    edx,[ebx-0xc]
c0019279:	84 d2                	test   dl,dl
c001927b:	88 d3                	mov    bl,dl
c001927d:	75 02                	jne    c0019281 <RTC::setTimeInDatetimeUTC(datetime_t)+0xff>
c001927f:	b3 0c                	mov    bl,0xc
c0019281:	83 cb 80             	or     ebx,0xffffff80
c0019284:	eb 06                	jmp    c001928c <RTC::setTimeInDatetimeUTC(datetime_t)+0x10a>
c0019286:	85 c0                	test   eax,eax
c0019288:	75 02                	jne    c001928c <RTC::setTimeInDatetimeUTC(datetime_t)+0x10a>
c001928a:	b3 0c                	mov    bl,0xc
c001928c:	50                   	push   eax
c001928d:	0f b6 db             	movzx  ebx,bl
c0019290:	50                   	push   eax
c0019291:	0f b6 54 24 14       	movzx  edx,BYTE PTR [esp+0x14]
c0019296:	52                   	push   edx
c0019297:	6a 00                	push   0x0
c0019299:	e8 e1 d7 ff ff       	call   c0016a7f <x86WriteCMOS(unsigned char, unsigned char)>
c001929e:	5a                   	pop    edx
c001929f:	59                   	pop    ecx
c00192a0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00192a5:	50                   	push   eax
c00192a6:	6a 02                	push   0x2
c00192a8:	e8 d2 d7 ff ff       	call   c0016a7f <x86WriteCMOS(unsigned char, unsigned char)>
c00192ad:	5e                   	pop    esi
c00192ae:	5f                   	pop    edi
c00192af:	53                   	push   ebx
c00192b0:	6a 04                	push   0x4
c00192b2:	e8 c8 d7 ff ff       	call   c0016a7f <x86WriteCMOS(unsigned char, unsigned char)>
c00192b7:	5d                   	pop    ebp
c00192b8:	58                   	pop    eax
c00192b9:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c00192be:	52                   	push   edx
c00192bf:	6a 07                	push   0x7
c00192c1:	e8 b9 d7 ff ff       	call   c0016a7f <x86WriteCMOS(unsigned char, unsigned char)>
c00192c6:	58                   	pop    eax
c00192c7:	5a                   	pop    edx
c00192c8:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00192cd:	50                   	push   eax
c00192ce:	6a 08                	push   0x8
c00192d0:	e8 aa d7 ff ff       	call   c0016a7f <x86WriteCMOS(unsigned char, unsigned char)>
c00192d5:	59                   	pop    ecx
c00192d6:	5b                   	pop    ebx
c00192d7:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c00192dc:	55                   	push   ebp
c00192dd:	6a 09                	push   0x9
c00192df:	e8 9b d7 ff ff       	call   c0016a7f <x86WriteCMOS(unsigned char, unsigned char)>
c00192e4:	5e                   	pop    esi
c00192e5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00192e9:	e8 e6 fb ff ff       	call   c0018ed4 <RTC::completeRTCRefresh()>
c00192ee:	83 c4 3c             	add    esp,0x3c
c00192f1:	b0 01                	mov    al,0x1
c00192f3:	5b                   	pop    ebx
c00192f4:	5e                   	pop    esi
c00192f5:	5f                   	pop    edi
c00192f6:	5d                   	pop    ebp
c00192f7:	c3                   	ret    

c00192f8 <rtcIRQHandler(regs*, void*)>:
c00192f8:	53                   	push   ebx
c00192f9:	83 ec 14             	sub    esp,0x14
c00192fc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0019300:	6a 0c                	push   0xc
c0019302:	e8 24 d7 ff ff       	call   c0016a2b <x86ReadCMOS(unsigned char)>
c0019307:	83 c4 10             	add    esp,0x10
c001930a:	a8 80                	test   al,0x80
c001930c:	74 24                	je     c0019332 <rtcIRQHandler(regs*, void*)+0x3a>
c001930e:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c0019315:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c001931c:	66 ff 05 94 c7 02 c0 	inc    WORD PTR ds:0xc002c794
c0019323:	75 0d                	jne    c0019332 <rtcIRQHandler(regs*, void*)+0x3a>
c0019325:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0019329:	83 c4 08             	add    esp,0x8
c001932c:	5b                   	pop    ebx
c001932d:	e9 a2 fb ff ff       	jmp    c0018ed4 <RTC::completeRTCRefresh()>
c0019332:	83 c4 08             	add    esp,0x8
c0019335:	5b                   	pop    ebx
c0019336:	c3                   	ret    
c0019337:	90                   	nop

c0019338 <RTC::RTC()>:
c0019338:	83 ec 1c             	sub    esp,0x1c
c001933b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001933f:	83 ec 08             	sub    esp,0x8
c0019342:	68 8b 30 02 c0       	push   0xc002308b
c0019347:	50                   	push   eax
c0019348:	e8 bf f7 fe ff       	call   c0008b0c <Clock::Clock(char const*)>
c001934d:	83 c4 10             	add    esp,0x10
c0019350:	ba a8 30 02 c0       	mov    edx,0xc00230a8
c0019355:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019359:	89 10                	mov    DWORD PTR [eax],edx
c001935b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001935f:	83 ec 0c             	sub    esp,0xc
c0019362:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019366:	6a 01                	push   0x1
c0019368:	68 f8 92 01 c0       	push   0xc00192f8
c001936d:	6a 08                	push   0x8
c001936f:	50                   	push   eax
c0019370:	e8 79 fc fe ff       	call   c0008fee <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0019375:	83 c4 20             	add    esp,0x20
c0019378:	89 c2                	mov    edx,eax
c001937a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001937e:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0019384:	fa                   	cli    
c0019385:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c001938a:	83 c0 01             	add    eax,0x1
c001938d:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c0019392:	83 ec 0c             	sub    esp,0xc
c0019395:	6a 0b                	push   0xb
c0019397:	e8 8f d6 ff ff       	call   c0016a2b <x86ReadCMOS(unsigned char)>
c001939c:	83 c4 10             	add    esp,0x10
c001939f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00193a3:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00193a7:	83 c8 10             	or     eax,0x10
c00193aa:	0f b6 c0             	movzx  eax,al
c00193ad:	83 ec 08             	sub    esp,0x8
c00193b0:	50                   	push   eax
c00193b1:	6a 0b                	push   0xb
c00193b3:	e8 c7 d6 ff ff       	call   c0016a7f <x86WriteCMOS(unsigned char, unsigned char)>
c00193b8:	83 c4 10             	add    esp,0x10
c00193bb:	83 ec 0c             	sub    esp,0xc
c00193be:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00193c2:	e8 0d fb ff ff       	call   c0018ed4 <RTC::completeRTCRefresh()>
c00193c7:	83 c4 10             	add    esp,0x10
c00193ca:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c00193cf:	83 e8 01             	sub    eax,0x1
c00193d2:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c00193d7:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c00193dc:	85 c0                	test   eax,eax
c00193de:	75 01                	jne    c00193e1 <RTC::RTC()+0xa9>
c00193e0:	fb                   	sti    
c00193e1:	90                   	nop
c00193e2:	83 c4 1c             	add    esp,0x1c
c00193e5:	c3                   	ret    
c00193e6:	66 90                	xchg   ax,ax

c00193e8 <HalConsoleScroll(int, int)>:
c00193e8:	83 ec 10             	sub    esp,0x10
c00193eb:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c00193f3:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00193fb:	90                   	nop
c00193fc:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0019401:	0f 8f e1 00 00 00    	jg     c00194e8 <HalConsoleScroll(int, int)+0x100>
c0019407:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001940f:	90                   	nop
c0019410:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c0019418:	0f 8f be 00 00 00    	jg     c00194dc <HalConsoleScroll(int, int)+0xf4>
c001941e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019422:	89 d0                	mov    eax,edx
c0019424:	c1 e0 02             	shl    eax,0x2
c0019427:	01 d0                	add    eax,edx
c0019429:	c1 e0 05             	shl    eax,0x5
c001942c:	89 c2                	mov    edx,eax
c001942e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019432:	01 d0                	add    eax,edx
c0019434:	89 c2                	mov    edx,eax
c0019436:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001943a:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001943d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019441:	89 d0                	mov    eax,edx
c0019443:	c1 e0 02             	shl    eax,0x2
c0019446:	01 d0                	add    eax,edx
c0019448:	c1 e0 05             	shl    eax,0x5
c001944b:	89 c2                	mov    edx,eax
c001944d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019451:	01 d0                	add    eax,edx
c0019453:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c0019459:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001945d:	01 d0                	add    eax,edx
c001945f:	8a 11                	mov    dl,BYTE PTR [ecx]
c0019461:	88 10                	mov    BYTE PTR [eax],dl
c0019463:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0019468:	75 66                	jne    c00194d0 <HalConsoleScroll(int, int)+0xe8>
c001946a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001946e:	83 e0 01             	and    eax,0x1
c0019471:	74 39                	je     c00194ac <HalConsoleScroll(int, int)+0xc4>
c0019473:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019477:	83 e0 0f             	and    eax,0xf
c001947a:	88 c2                	mov    dl,al
c001947c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019480:	c1 e0 04             	shl    eax,0x4
c0019483:	09 d0                	or     eax,edx
c0019485:	88 c1                	mov    cl,al
c0019487:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001948b:	89 d0                	mov    eax,edx
c001948d:	c1 e0 02             	shl    eax,0x2
c0019490:	01 d0                	add    eax,edx
c0019492:	c1 e0 05             	shl    eax,0x5
c0019495:	89 c2                	mov    edx,eax
c0019497:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001949b:	01 d0                	add    eax,edx
c001949d:	89 c2                	mov    edx,eax
c001949f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00194a3:	01 d0                	add    eax,edx
c00194a5:	88 ca                	mov    dl,cl
c00194a7:	88 10                	mov    BYTE PTR [eax],dl
c00194a9:	eb 25                	jmp    c00194d0 <HalConsoleScroll(int, int)+0xe8>
c00194ab:	90                   	nop
c00194ac:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00194b0:	89 d0                	mov    eax,edx
c00194b2:	c1 e0 02             	shl    eax,0x2
c00194b5:	01 d0                	add    eax,edx
c00194b7:	c1 e0 05             	shl    eax,0x5
c00194ba:	89 c2                	mov    edx,eax
c00194bc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00194c0:	01 d0                	add    eax,edx
c00194c2:	89 c2                	mov    edx,eax
c00194c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00194c8:	01 d0                	add    eax,edx
c00194ca:	c6 00 20             	mov    BYTE PTR [eax],0x20
c00194cd:	8d 76 00             	lea    esi,[esi+0x0]
c00194d0:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c00194d5:	e9 36 ff ff ff       	jmp    c0019410 <HalConsoleScroll(int, int)+0x28>
c00194da:	66 90                	xchg   ax,ax
c00194dc:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c00194e1:	e9 16 ff ff ff       	jmp    c00193fc <HalConsoleScroll(int, int)+0x14>
c00194e6:	66 90                	xchg   ax,ax
c00194e8:	90                   	nop
c00194e9:	83 c4 10             	add    esp,0x10
c00194ec:	c3                   	ret    
c00194ed:	8d 76 00             	lea    esi,[esi+0x0]

c00194f0 <HalConsoleWriteCharacter(char, int, int, int, int)>:
c00194f0:	83 ec 14             	sub    esp,0x14
c00194f3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00194f7:	88 04 24             	mov    BYTE PTR [esp],al
c00194fa:	8a 04 24             	mov    al,BYTE PTR [esp]
c00194fd:	0f b6 c0             	movzx  eax,al
c0019500:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019504:	89 d1                	mov    ecx,edx
c0019506:	83 e1 0f             	and    ecx,0xf
c0019509:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001950d:	c1 e2 04             	shl    edx,0x4
c0019510:	0f b6 d2             	movzx  edx,dl
c0019513:	09 ca                	or     edx,ecx
c0019515:	c1 e2 08             	shl    edx,0x8
c0019518:	09 d0                	or     eax,edx
c001951a:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c001951f:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c0019527:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001952b:	89 d0                	mov    eax,edx
c001952d:	c1 e0 02             	shl    eax,0x2
c0019530:	01 d0                	add    eax,edx
c0019532:	c1 e0 04             	shl    eax,0x4
c0019535:	89 c2                	mov    edx,eax
c0019537:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001953b:	01 d0                	add    eax,edx
c001953d:	d1 e0                	shl    eax,1
c001953f:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0019543:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019547:	66 8b 54 24 12       	mov    dx,WORD PTR [esp+0x12]
c001954c:	66 89 10             	mov    WORD PTR [eax],dx
c001954f:	90                   	nop
c0019550:	83 c4 14             	add    esp,0x14
c0019553:	c3                   	ret    

c0019554 <HalConsoleCursorUpdate(int, int)>:
c0019554:	83 ec 20             	sub    esp,0x20
c0019557:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001955b:	89 c2                	mov    edx,eax
c001955d:	c1 e2 02             	shl    edx,0x2
c0019560:	01 d0                	add    eax,edx
c0019562:	c1 e0 04             	shl    eax,0x4
c0019565:	89 c2                	mov    edx,eax
c0019567:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001956b:	01 d0                	add    eax,edx
c001956d:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0019572:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c0019579:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c001957e:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0019582:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019586:	ee                   	out    dx,al
c0019587:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001958c:	0f b6 c0             	movzx  eax,al
c001958f:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c0019596:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c001959a:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c001959e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00195a2:	ee                   	out    dx,al
c00195a3:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c00195aa:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c00195af:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c00195b3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00195b7:	ee                   	out    dx,al
c00195b8:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c00195bd:	c1 e8 08             	shr    eax,0x8
c00195c0:	0f b6 c0             	movzx  eax,al
c00195c3:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c00195ca:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c00195ce:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c00195d2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00195d6:	ee                   	out    dx,al
c00195d7:	90                   	nop
c00195d8:	83 c4 20             	add    esp,0x20
c00195db:	c3                   	ret    

c00195dc <FAT::getName()>:
c00195dc:	b8 dc 30 02 c0       	mov    eax,0xc00230dc
c00195e1:	c3                   	ret    
c00195e2:	66 90                	xchg   ax,ax

c00195e4 <FAT::tell(void*, unsigned long long*)>:
c00195e4:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00195e9:	75 09                	jne    c00195f4 <FAT::tell(void*, unsigned long long*)+0x10>
c00195eb:	b8 04 00 00 00       	mov    eax,0x4
c00195f0:	c3                   	ret    
c00195f1:	8d 76 00             	lea    esi,[esi+0x0]
c00195f4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00195f9:	75 09                	jne    c0019604 <FAT::tell(void*, unsigned long long*)+0x20>
c00195fb:	b8 04 00 00 00       	mov    eax,0x4
c0019600:	c3                   	ret    
c0019601:	8d 76 00             	lea    esi,[esi+0x0]
c0019604:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019608:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001960b:	ba 00 00 00 00       	mov    edx,0x0
c0019610:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019614:	89 01                	mov    DWORD PTR [ecx],eax
c0019616:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0019619:	b8 00 00 00 00       	mov    eax,0x0
c001961e:	c3                   	ret    
c001961f:	90                   	nop

c0019620 <FAT::stat(void*, unsigned long long*)>:
c0019620:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0019625:	75 09                	jne    c0019630 <FAT::stat(void*, unsigned long long*)+0x10>
c0019627:	b8 04 00 00 00       	mov    eax,0x4
c001962c:	c3                   	ret    
c001962d:	8d 76 00             	lea    esi,[esi+0x0]
c0019630:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0019635:	75 09                	jne    c0019640 <FAT::stat(void*, unsigned long long*)+0x20>
c0019637:	b8 04 00 00 00       	mov    eax,0x4
c001963c:	c3                   	ret    
c001963d:	8d 76 00             	lea    esi,[esi+0x0]
c0019640:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019644:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0019647:	ba 00 00 00 00       	mov    edx,0x0
c001964c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019650:	89 01                	mov    DWORD PTR [ecx],eax
c0019652:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0019655:	b8 00 00 00 00       	mov    eax,0x0
c001965a:	c3                   	ret    
c001965b:	90                   	nop

c001965c <FAT::~FAT()>:
c001965c:	83 ec 0c             	sub    esp,0xc
c001965f:	ba 28 31 02 c0       	mov    edx,0xc0023128
c0019664:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019668:	89 10                	mov    DWORD PTR [eax],edx
c001966a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001966e:	83 ec 0c             	sub    esp,0xc
c0019671:	50                   	push   eax
c0019672:	e8 03 e7 fe ff       	call   c0007d7a <Filesystem::~Filesystem()>
c0019677:	83 c4 10             	add    esp,0x10
c001967a:	90                   	nop
c001967b:	83 c4 0c             	add    esp,0xc
c001967e:	c3                   	ret    
c001967f:	90                   	nop

c0019680 <FAT::~FAT()>:
c0019680:	83 ec 0c             	sub    esp,0xc
c0019683:	83 ec 0c             	sub    esp,0xc
c0019686:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001968a:	e8 cd ff ff ff       	call   c001965c <FAT::~FAT()>
c001968f:	83 c4 10             	add    esp,0x10
c0019692:	83 ec 08             	sub    esp,0x8
c0019695:	6a 08                	push   0x8
c0019697:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001969b:	e8 c3 2f ff ff       	call   c000c663 <operator delete(void*, unsigned long)>
c00196a0:	83 c4 10             	add    esp,0x10
c00196a3:	83 c4 0c             	add    esp,0xc
c00196a6:	c3                   	ret    
c00196a7:	90                   	nop

c00196a8 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c00196a8:	83 ec 1c             	sub    esp,0x1c
c00196ab:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c00196b2:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c00196b7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00196bb:	8b 04 85 c0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3840]
c00196c2:	83 f8 ff             	cmp    eax,0xffffffff
c00196c5:	75 35                	jne    c00196fc <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c00196c7:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00196cb:	88 c2                	mov    dl,al
c00196cd:	a1 a0 c7 02 c0       	mov    eax,ds:0xc002c7a0
c00196d2:	01 d0                	add    eax,edx
c00196d4:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00196d8:	8b 15 a0 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c7a0
c00196de:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00196e2:	89 14 85 c0 c7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3840],edx
c00196e9:	a1 a0 c7 02 c0       	mov    eax,ds:0xc002c7a0
c00196ee:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00196f2:	89 14 85 40 c8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd37c0],edx
c00196f9:	eb 19                	jmp    c0019714 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c00196fb:	90                   	nop
c00196fc:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0019700:	88 c2                	mov    dl,al
c0019702:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019706:	8b 04 85 c0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3840]
c001970d:	01 d0                	add    eax,edx
c001970f:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0019713:	90                   	nop
c0019714:	83 ec 04             	sub    esp,0x4
c0019717:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001971b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001971f:	8d 44 24 15          	lea    eax,[esp+0x15]
c0019723:	50                   	push   eax
c0019724:	e8 ab ba fe ff       	call   c00051d4 <f_getlabel>
c0019729:	83 c4 10             	add    esp,0x10
c001972c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019730:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0019735:	75 09                	jne    c0019740 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c0019737:	b8 00 00 00 00       	mov    eax,0x0
c001973c:	eb 0a                	jmp    c0019748 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c001973e:	66 90                	xchg   ax,ax
c0019740:	b8 01 00 00 00       	mov    eax,0x1
c0019745:	8d 76 00             	lea    esi,[esi+0x0]
c0019748:	83 c4 1c             	add    esp,0x1c
c001974b:	c3                   	ret    

c001974c <FAT::setlabel(LogicalDisk*, int, char*)>:
c001974c:	53                   	push   ebx
c001974d:	83 ec 58             	sub    esp,0x58
c0019750:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0019758:	8d 54 24 10          	lea    edx,[esp+0x10]
c001975c:	b9 00 00 00 00       	mov    ecx,0x0
c0019761:	b8 3c 00 00 00       	mov    eax,0x3c
c0019766:	83 e0 f8             	and    eax,0xfffffff8
c0019769:	89 c3                	mov    ebx,eax
c001976b:	b8 00 00 00 00       	mov    eax,0x0
c0019770:	89 4c 04 10          	mov    DWORD PTR [esp+eax*1+0x10],ecx
c0019774:	89 4c 04 14          	mov    DWORD PTR [esp+eax*1+0x14],ecx
c0019778:	83 c0 08             	add    eax,0x8
c001977b:	39 d8                	cmp    eax,ebx
c001977d:	72 f1                	jb     c0019770 <FAT::setlabel(LogicalDisk*, int, char*)+0x24>
c001977f:	01 c2                	add    edx,eax
c0019781:	89 0a                	mov    DWORD PTR [edx],ecx
c0019783:	83 c2 04             	add    edx,0x4
c0019786:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001978a:	8b 04 85 c0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3840]
c0019791:	83 f8 ff             	cmp    eax,0xffffffff
c0019794:	75 36                	jne    c00197cc <FAT::setlabel(LogicalDisk*, int, char*)+0x80>
c0019796:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001979a:	88 c2                	mov    dl,al
c001979c:	a1 a0 c7 02 c0       	mov    eax,ds:0xc002c7a0
c00197a1:	01 d0                	add    eax,edx
c00197a3:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00197a7:	8b 15 a0 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c7a0
c00197ad:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00197b1:	89 14 85 c0 c7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3840],edx
c00197b8:	a1 a0 c7 02 c0       	mov    eax,ds:0xc002c7a0
c00197bd:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c00197c1:	89 14 85 40 c8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd37c0],edx
c00197c8:	eb 1a                	jmp    c00197e4 <FAT::setlabel(LogicalDisk*, int, char*)+0x98>
c00197ca:	66 90                	xchg   ax,ax
c00197cc:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00197d0:	88 c2                	mov    dl,al
c00197d2:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00197d6:	8b 04 85 c0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3840]
c00197dd:	01 d0                	add    eax,edx
c00197df:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00197e3:	90                   	nop
c00197e4:	83 ec 08             	sub    esp,0x8
c00197e7:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c00197eb:	8d 44 24 18          	lea    eax,[esp+0x18]
c00197ef:	50                   	push   eax
c00197f0:	e8 7b 70 fe ff       	call   c0000870 <strcat>
c00197f5:	83 c4 10             	add    esp,0x10
c00197f8:	83 ec 0c             	sub    esp,0xc
c00197fb:	8d 44 24 18          	lea    eax,[esp+0x18]
c00197ff:	50                   	push   eax
c0019800:	e8 23 bb fe ff       	call   c0005328 <f_setlabel>
c0019805:	83 c4 10             	add    esp,0x10
c0019808:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001980c:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0019811:	75 09                	jne    c001981c <FAT::setlabel(LogicalDisk*, int, char*)+0xd0>
c0019813:	b8 00 00 00 00       	mov    eax,0x0
c0019818:	eb 0a                	jmp    c0019824 <FAT::setlabel(LogicalDisk*, int, char*)+0xd8>
c001981a:	66 90                	xchg   ax,ax
c001981c:	b8 01 00 00 00       	mov    eax,0x1
c0019821:	8d 76 00             	lea    esi,[esi+0x0]
c0019824:	83 c4 58             	add    esp,0x58
c0019827:	5b                   	pop    ebx
c0019828:	c3                   	ret    
c0019829:	90                   	nop
c001982a:	66 90                	xchg   ax,ax

c001982c <FAT::format(LogicalDisk*, int, char const*, int)>:
c001982c:	83 ec 2c             	sub    esp,0x2c
c001982f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0019837:	83 ec 08             	sub    esp,0x8
c001983a:	68 00 31 02 c0       	push   0xc0023100
c001983f:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019843:	e8 38 6f fe ff       	call   c0000780 <strcmp>
c0019848:	83 c4 10             	add    esp,0x10
c001984b:	85 c0                	test   eax,eax
c001984d:	0f 94 c0             	sete   al
c0019850:	0f b6 c0             	movzx  eax,al
c0019853:	85 c0                	test   eax,eax
c0019855:	74 0d                	je     c0019864 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c0019857:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001985f:	e9 c0 00 00 00       	jmp    c0019924 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0019864:	83 ec 08             	sub    esp,0x8
c0019867:	68 f2 30 02 c0       	push   0xc00230f2
c001986c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019870:	e8 0b 6f fe ff       	call   c0000780 <strcmp>
c0019875:	83 c4 10             	add    esp,0x10
c0019878:	85 c0                	test   eax,eax
c001987a:	0f 94 c0             	sete   al
c001987d:	0f b6 c0             	movzx  eax,al
c0019880:	85 c0                	test   eax,eax
c0019882:	74 10                	je     c0019894 <FAT::format(LogicalDisk*, int, char const*, int)+0x68>
c0019884:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001988c:	e9 93 00 00 00       	jmp    c0019924 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0019891:	8d 76 00             	lea    esi,[esi+0x0]
c0019894:	83 ec 08             	sub    esp,0x8
c0019897:	68 f8 30 02 c0       	push   0xc00230f8
c001989c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00198a0:	e8 db 6e fe ff       	call   c0000780 <strcmp>
c00198a5:	83 c4 10             	add    esp,0x10
c00198a8:	85 c0                	test   eax,eax
c00198aa:	0f 94 c0             	sete   al
c00198ad:	0f b6 c0             	movzx  eax,al
c00198b0:	85 c0                	test   eax,eax
c00198b2:	74 0c                	je     c00198c0 <FAT::format(LogicalDisk*, int, char const*, int)+0x94>
c00198b4:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00198bc:	eb 66                	jmp    c0019924 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c00198be:	66 90                	xchg   ax,ax
c00198c0:	83 ec 08             	sub    esp,0x8
c00198c3:	68 5c 08 02 c0       	push   0xc002085c
c00198c8:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00198cc:	e8 af 6e fe ff       	call   c0000780 <strcmp>
c00198d1:	83 c4 10             	add    esp,0x10
c00198d4:	85 c0                	test   eax,eax
c00198d6:	0f 94 c0             	sete   al
c00198d9:	0f b6 c0             	movzx  eax,al
c00198dc:	85 c0                	test   eax,eax
c00198de:	74 0c                	je     c00198ec <FAT::format(LogicalDisk*, int, char const*, int)+0xc0>
c00198e0:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c00198e8:	eb 3a                	jmp    c0019924 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c00198ea:	66 90                	xchg   ax,ax
c00198ec:	83 ec 08             	sub    esp,0x8
c00198ef:	68 fe 30 02 c0       	push   0xc00230fe
c00198f4:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00198f8:	e8 83 6e fe ff       	call   c0000780 <strcmp>
c00198fd:	83 c4 10             	add    esp,0x10
c0019900:	85 c0                	test   eax,eax
c0019902:	0f 94 c0             	sete   al
c0019905:	0f b6 c0             	movzx  eax,al
c0019908:	85 c0                	test   eax,eax
c001990a:	74 0c                	je     c0019918 <FAT::format(LogicalDisk*, int, char const*, int)+0xec>
c001990c:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0019914:	eb 0e                	jmp    c0019924 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0019916:	66 90                	xchg   ax,ax
c0019918:	b8 08 00 00 00       	mov    eax,0x8
c001991d:	e9 ea 00 00 00       	jmp    c0019a0c <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0019922:	66 90                	xchg   ax,ax
c0019924:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001992b:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0019930:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019934:	8b 04 85 c0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3840]
c001993b:	83 f8 ff             	cmp    eax,0xffffffff
c001993e:	75 34                	jne    c0019974 <FAT::format(LogicalDisk*, int, char const*, int)+0x148>
c0019940:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0019944:	88 c2                	mov    dl,al
c0019946:	a1 a0 c7 02 c0       	mov    eax,ds:0xc002c7a0
c001994b:	01 d0                	add    eax,edx
c001994d:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0019951:	8b 15 a0 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c7a0
c0019957:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001995b:	89 14 85 c0 c7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3840],edx
c0019962:	a1 a0 c7 02 c0       	mov    eax,ds:0xc002c7a0
c0019967:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001996b:	89 14 85 40 c8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd37c0],edx
c0019972:	eb 18                	jmp    c001998c <FAT::format(LogicalDisk*, int, char const*, int)+0x160>
c0019974:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0019978:	88 c2                	mov    dl,al
c001997a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001997e:	8b 04 85 c0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3840]
c0019985:	01 d0                	add    eax,edx
c0019987:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001998b:	90                   	nop
c001998c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019990:	88 04 24             	mov    BYTE PTR [esp],al
c0019993:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0019997:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001999b:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00199a3:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c00199a8:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00199b0:	83 ec 0c             	sub    esp,0xc
c00199b3:	68 00 20 00 00       	push   0x2000
c00199b8:	e8 13 4f ff ff       	call   c000e8d0 <malloc>
c00199bd:	83 c4 10             	add    esp,0x10
c00199c0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00199c4:	68 00 20 00 00       	push   0x2000
c00199c9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00199cd:	8d 44 24 08          	lea    eax,[esp+0x8]
c00199d1:	50                   	push   eax
c00199d2:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c00199d6:	50                   	push   eax
c00199d7:	e8 49 bc fe ff       	call   c0005625 <f_mkfs>
c00199dc:	83 c4 10             	add    esp,0x10
c00199df:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00199e3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00199e8:	75 0a                	jne    c00199f4 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c00199ea:	b8 00 00 00 00       	mov    eax,0x0
c00199ef:	eb 1b                	jmp    c0019a0c <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c00199f1:	8d 76 00             	lea    esi,[esi+0x0]
c00199f4:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c00199f9:	75 09                	jne    c0019a04 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d8>
c00199fb:	b8 09 00 00 00       	mov    eax,0x9
c0019a00:	eb 0a                	jmp    c0019a0c <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0019a02:	66 90                	xchg   ax,ax
c0019a04:	b8 01 00 00 00       	mov    eax,0x1
c0019a09:	8d 76 00             	lea    esi,[esi+0x0]
c0019a0c:	83 c4 2c             	add    esp,0x2c
c0019a0f:	c3                   	ret    

c0019a10 <FAT::tryMount(LogicalDisk*, int)>:
c0019a10:	81 ec 4c 03 00 00    	sub    esp,0x34c
c0019a16:	a1 a0 c7 02 c0       	mov    eax,ds:0xc002c7a0
c0019a1b:	83 f8 14             	cmp    eax,0x14
c0019a1e:	75 18                	jne    c0019a38 <FAT::tryMount(LogicalDisk*, int)+0x28>
c0019a20:	83 ec 0c             	sub    esp,0xc
c0019a23:	68 04 31 02 c0       	push   0xc0023104
c0019a28:	e8 f9 51 ff ff       	call   c000ec26 <KePanic(char const*)>
c0019a2d:	83 c4 10             	add    esp,0x10
c0019a30:	b0 00                	mov    al,0x0
c0019a32:	e9 ed 01 00 00       	jmp    c0019c24 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0019a37:	90                   	nop
c0019a38:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0019a3f:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0019a45:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0019a4b:	3d 00 02 00 00       	cmp    eax,0x200
c0019a50:	74 0a                	je     c0019a5c <FAT::tryMount(LogicalDisk*, int)+0x4c>
c0019a52:	b0 00                	mov    al,0x0
c0019a54:	e9 cb 01 00 00       	jmp    c0019c24 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0019a59:	8d 76 00             	lea    esi,[esi+0x0]
c0019a5c:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c0019a64:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0019a6b:	8b 04 85 c0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3840]
c0019a72:	83 f8 ff             	cmp    eax,0xffffffff
c0019a75:	74 09                	je     c0019a80 <FAT::tryMount(LogicalDisk*, int)+0x70>
c0019a77:	b0 01                	mov    al,0x1
c0019a79:	e9 a6 01 00 00       	jmp    c0019c24 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0019a7e:	66 90                	xchg   ax,ax
c0019a80:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c0019a8a:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c0019a92:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c0019a99:	88 c2                	mov    dl,al
c0019a9b:	a1 a0 c7 02 c0       	mov    eax,ds:0xc002c7a0
c0019aa0:	01 d0                	add    eax,edx
c0019aa2:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c0019aa9:	8b 15 a0 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c7a0
c0019aaf:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0019ab6:	89 14 85 c0 c7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3840],edx
c0019abd:	a1 a0 c7 02 c0       	mov    eax,ds:0xc002c7a0
c0019ac2:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c0019ac9:	89 14 85 40 c8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd37c0],edx
c0019ad0:	83 ec 0c             	sub    esp,0xc
c0019ad3:	68 34 02 00 00       	push   0x234
c0019ad8:	e8 f3 4d ff ff       	call   c000e8d0 <malloc>
c0019add:	83 c4 10             	add    esp,0x10
c0019ae0:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c0019ae7:	83 ec 04             	sub    esp,0x4
c0019aea:	6a 00                	push   0x0
c0019aec:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0019af3:	50                   	push   eax
c0019af4:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0019afb:	e8 1f a3 fe ff       	call   c0003e1f <f_mount>
c0019b00:	83 c4 10             	add    esp,0x10
c0019b03:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0019b0a:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c0019b12:	74 1c                	je     c0019b30 <FAT::tryMount(LogicalDisk*, int)+0x120>
c0019b14:	83 ec 0c             	sub    esp,0xc
c0019b17:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0019b1e:	e8 cd 4d ff ff       	call   c000e8f0 <rfree>
c0019b23:	83 c4 10             	add    esp,0x10
c0019b26:	b0 00                	mov    al,0x0
c0019b28:	e9 f7 00 00 00       	jmp    c0019c24 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0019b2d:	8d 76 00             	lea    esi,[esi+0x0]
c0019b30:	83 ec 04             	sub    esp,0x4
c0019b33:	68 00 01 00 00       	push   0x100
c0019b38:	6a 00                	push   0x0
c0019b3a:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0019b41:	50                   	push   eax
c0019b42:	e8 a9 69 fe ff       	call   c00004f0 <memset>
c0019b47:	83 c4 10             	add    esp,0x10
c0019b4a:	83 ec 08             	sub    esp,0x8
c0019b4d:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0019b54:	50                   	push   eax
c0019b55:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0019b5c:	50                   	push   eax
c0019b5d:	e8 0e 6d fe ff       	call   c0000870 <strcat>
c0019b62:	83 c4 10             	add    esp,0x10
c0019b65:	83 ec 08             	sub    esp,0x8
c0019b68:	68 12 31 02 c0       	push   0xc0023112
c0019b6d:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0019b74:	50                   	push   eax
c0019b75:	e8 f6 6c fe ff       	call   c0000870 <strcat>
c0019b7a:	83 c4 10             	add    esp,0x10
c0019b7d:	83 ec 04             	sub    esp,0x4
c0019b80:	6a 01                	push   0x1
c0019b82:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c0019b89:	50                   	push   eax
c0019b8a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019b8e:	50                   	push   eax
c0019b8f:	e8 ed a2 fe ff       	call   c0003e81 <f_open>
c0019b94:	83 c4 10             	add    esp,0x10
c0019b97:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0019b9e:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c0019ba5:	85 c0                	test   eax,eax
c0019ba7:	74 0b                	je     c0019bb4 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c0019ba9:	78 31                	js     c0019bdc <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0019bab:	83 e8 04             	sub    eax,0x4
c0019bae:	83 f8 01             	cmp    eax,0x1
c0019bb1:	77 29                	ja     c0019bdc <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0019bb3:	90                   	nop
c0019bb4:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c0019bbc:	83 ec 0c             	sub    esp,0xc
c0019bbf:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019bc3:	50                   	push   eax
c0019bc4:	e8 68 aa fe ff       	call   c0004631 <f_close>
c0019bc9:	83 c4 10             	add    esp,0x10
c0019bcc:	90                   	nop
c0019bcd:	0f b6 84 24 3f 03 00 00 	movzx  eax,BYTE PTR [esp+0x33f]
c0019bd5:	85 c0                	test   eax,eax
c0019bd7:	74 43                	je     c0019c1c <FAT::tryMount(LogicalDisk*, int)+0x20c>
c0019bd9:	eb 31                	jmp    c0019c0c <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c0019bdb:	90                   	nop
c0019bdc:	83 ec 0c             	sub    esp,0xc
c0019bdf:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0019be6:	e8 05 4d ff ff       	call   c000e8f0 <rfree>
c0019beb:	83 c4 10             	add    esp,0x10
c0019bee:	83 ec 04             	sub    esp,0x4
c0019bf1:	6a 00                	push   0x0
c0019bf3:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0019bfa:	50                   	push   eax
c0019bfb:	6a 00                	push   0x0
c0019bfd:	e8 1d a2 fe ff       	call   c0003e1f <f_mount>
c0019c02:	83 c4 10             	add    esp,0x10
c0019c05:	b0 00                	mov    al,0x0
c0019c07:	eb 1b                	jmp    c0019c24 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0019c09:	8d 76 00             	lea    esi,[esi+0x0]
c0019c0c:	a1 a0 c7 02 c0       	mov    eax,ds:0xc002c7a0
c0019c11:	83 c0 01             	add    eax,0x1
c0019c14:	a3 a0 c7 02 c0       	mov    ds:0xc002c7a0,eax
c0019c19:	8d 76 00             	lea    esi,[esi+0x0]
c0019c1c:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c0019c23:	90                   	nop
c0019c24:	81 c4 4c 03 00 00    	add    esp,0x34c
c0019c2a:	c3                   	ret    
c0019c2b:	90                   	nop

c0019c2c <FAT::allocateSwapfile(char const*, int)>:
c0019c2c:	55                   	push   ebp
c0019c2d:	57                   	push   edi
c0019c2e:	56                   	push   esi
c0019c2f:	53                   	push   ebx
c0019c30:	81 ec 3c 04 00 00    	sub    esp,0x43c
c0019c36:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c0019c41:	83 ec 0c             	sub    esp,0xc
c0019c44:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c0019c4b:	e8 80 4c ff ff       	call   c000e8d0 <malloc>
c0019c50:	83 c4 10             	add    esp,0x10
c0019c53:	89 c7                	mov    edi,eax
c0019c55:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0019c5a:	83 ec 04             	sub    esp,0x4
c0019c5d:	50                   	push   eax
c0019c5e:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c0019c65:	57                   	push   edi
c0019c66:	e8 a1 e4 fe ff       	call   c000810c <File::File(char const*, Process*)>
c0019c6b:	83 c4 10             	add    esp,0x10
c0019c6e:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c0019c75:	83 ec 04             	sub    esp,0x4
c0019c78:	8d 44 24 13          	lea    eax,[esp+0x13]
c0019c7c:	50                   	push   eax
c0019c7d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019c81:	50                   	push   eax
c0019c82:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019c89:	e8 9e e7 fe ff       	call   c000842c <File::stat(unsigned long long*, bool*)>
c0019c8e:	83 c4 10             	add    esp,0x10
c0019c91:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0019c98:	c1 e0 14             	shl    eax,0x14
c0019c9b:	89 c7                	mov    edi,eax
c0019c9d:	89 c5                	mov    ebp,eax
c0019c9f:	c1 fd 1f             	sar    ebp,0x1f
c0019ca2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019ca6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019caa:	89 f9                	mov    ecx,edi
c0019cac:	31 c1                	xor    ecx,eax
c0019cae:	89 cb                	mov    ebx,ecx
c0019cb0:	89 e9                	mov    ecx,ebp
c0019cb2:	31 d1                	xor    ecx,edx
c0019cb4:	89 ce                	mov    esi,ecx
c0019cb6:	89 f0                	mov    eax,esi
c0019cb8:	09 d8                	or     eax,ebx
c0019cba:	0f 84 9c 00 00 00    	je     c0019d5c <FAT::allocateSwapfile(char const*, int)+0x130>
c0019cc0:	83 ec 0c             	sub    esp,0xc
c0019cc3:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019cca:	e8 29 e6 fe ff       	call   c00082f8 <File::unlink()>
c0019ccf:	83 c4 10             	add    esp,0x10
c0019cd2:	83 ec 08             	sub    esp,0x8
c0019cd5:	6a 12                	push   0x12
c0019cd7:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019cde:	e8 47 e4 fe ff       	call   c000812a <File::open(FileOpenMode)>
c0019ce3:	83 c4 10             	add    esp,0x10
c0019ce6:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0019ced:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0019cf3:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0019cfa:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0019d01:	c1 e0 14             	shl    eax,0x14
c0019d04:	83 ec 04             	sub    esp,0x4
c0019d07:	6a 01                	push   0x1
c0019d09:	50                   	push   eax
c0019d0a:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c0019d11:	e8 a2 b7 fe ff       	call   c00054b8 <f_expand>
c0019d16:	83 c4 10             	add    esp,0x10
c0019d19:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0019d20:	8b 00                	mov    eax,DWORD PTR [eax]
c0019d22:	83 c0 10             	add    eax,0x10
c0019d25:	8b 00                	mov    eax,DWORD PTR [eax]
c0019d27:	83 ec 0c             	sub    esp,0xc
c0019d2a:	8d 54 24 24          	lea    edx,[esp+0x24]
c0019d2e:	52                   	push   edx
c0019d2f:	8d 54 24 30          	lea    edx,[esp+0x30]
c0019d33:	52                   	push   edx
c0019d34:	6a 00                	push   0x0
c0019d36:	68 00 04 00 00       	push   0x400
c0019d3b:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0019d42:	ff d0                	call   eax
c0019d44:	83 c4 20             	add    esp,0x20
c0019d47:	83 ec 0c             	sub    esp,0xc
c0019d4a:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019d51:	e8 32 e4 fe ff       	call   c0008188 <File::close()>
c0019d56:	83 c4 10             	add    esp,0x10
c0019d59:	8d 76 00             	lea    esi,[esi+0x0]
c0019d5c:	83 ec 08             	sub    esp,0x8
c0019d5f:	6a 01                	push   0x1
c0019d61:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019d68:	e8 bd e3 fe ff       	call   c000812a <File::open(FileOpenMode)>
c0019d6d:	83 c4 10             	add    esp,0x10
c0019d70:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0019d77:	8b 00                	mov    eax,DWORD PTR [eax]
c0019d79:	83 c0 0c             	add    eax,0xc
c0019d7c:	8b 00                	mov    eax,DWORD PTR [eax]
c0019d7e:	83 ec 0c             	sub    esp,0xc
c0019d81:	8d 54 24 24          	lea    edx,[esp+0x24]
c0019d85:	52                   	push   edx
c0019d86:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0019d8a:	52                   	push   edx
c0019d8b:	6a 00                	push   0x0
c0019d8d:	6a 04                	push   0x4
c0019d8f:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0019d96:	ff d0                	call   eax
c0019d98:	83 c4 20             	add    esp,0x20
c0019d9b:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0019da2:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0019da8:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0019daf:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c0019db6:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0019db9:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c0019dc0:	83 ec 0c             	sub    esp,0xc
c0019dc3:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019dca:	e8 b9 e3 fe ff       	call   c0008188 <File::close()>
c0019dcf:	83 c4 10             	add    esp,0x10
c0019dd2:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c0019dd9:	ba 00 00 00 00       	mov    edx,0x0
c0019dde:	81 c4 3c 04 00 00    	add    esp,0x43c
c0019de4:	5b                   	pop    ebx
c0019de5:	5e                   	pop    esi
c0019de6:	5f                   	pop    edi
c0019de7:	5d                   	pop    ebp
c0019de8:	c3                   	ret    
c0019de9:	90                   	nop
c0019dea:	66 90                	xchg   ax,ax

c0019dec <FAT::readDir(void*, unsigned long, void*, int*)>:
c0019dec:	57                   	push   edi
c0019ded:	56                   	push   esi
c0019dee:	53                   	push   ebx
c0019def:	81 ec 50 02 00 00    	sub    esp,0x250
c0019df5:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c0019dfd:	74 0d                	je     c0019e0c <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c0019dff:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c0019e07:	75 0f                	jne    c0019e18 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c0019e09:	8d 76 00             	lea    esi,[esi+0x0]
c0019e0c:	b8 04 00 00 00       	mov    eax,0x4
c0019e11:	e9 3a 01 00 00       	jmp    c0019f50 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c0019e16:	66 90                	xchg   ax,ax
c0019e18:	83 ec 08             	sub    esp,0x8
c0019e1b:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0019e22:	50                   	push   eax
c0019e23:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c0019e2a:	e8 ce aa fe ff       	call   c00048fd <f_readdir>
c0019e2f:	83 c4 10             	add    esp,0x10
c0019e32:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c0019e39:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c0019e40:	83 ec 0c             	sub    esp,0xc
c0019e43:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0019e4a:	83 c0 16             	add    eax,0x16
c0019e4d:	50                   	push   eax
c0019e4e:	e8 2d 67 fe ff       	call   c0000580 <strlen>
c0019e53:	83 c4 10             	add    esp,0x10
c0019e56:	ba 00 00 00 00       	mov    edx,0x0
c0019e5b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019e5f:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0019e63:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c0019e6a:	0f b6 c0             	movzx  eax,al
c0019e6d:	83 e0 10             	and    eax,0x10
c0019e70:	74 0a                	je     c0019e7c <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c0019e72:	b8 02 00 00 00       	mov    eax,0x2
c0019e77:	eb 0b                	jmp    c0019e84 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c0019e79:	8d 76 00             	lea    esi,[esi+0x0]
c0019e7c:	b8 01 00 00 00       	mov    eax,0x1
c0019e81:	8d 76 00             	lea    esi,[esi+0x0]
c0019e84:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019e88:	83 ec 08             	sub    esp,0x8
c0019e8b:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0019e92:	83 c0 16             	add    eax,0x16
c0019e95:	50                   	push   eax
c0019e96:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019e9a:	83 c0 10             	add    eax,0x10
c0019e9d:	50                   	push   eax
c0019e9e:	e8 ad 67 fe ff       	call   c0000650 <strcpy>
c0019ea3:	83 c4 10             	add    esp,0x10
c0019ea6:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c0019ead:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c0019eb4:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019eb8:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c0019ebf:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c0019ec6:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c0019ecd:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c0019ed4:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c0019edb:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c0019ee2:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c0019ee9:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c0019ef0:	89 c6                	mov    esi,eax
c0019ef2:	89 d7                	mov    edi,edx
c0019ef4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019ef6:	89 c8                	mov    eax,ecx
c0019ef8:	89 fa                	mov    edx,edi
c0019efa:	89 f3                	mov    ebx,esi
c0019efc:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c0019f03:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c0019f0a:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c0019f11:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c0019f18:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0019f1e:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c0019f25:	0f be c0             	movsx  eax,al
c0019f28:	85 c0                	test   eax,eax
c0019f2a:	75 08                	jne    c0019f34 <FAT::readDir(void*, unsigned long, void*, int*)+0x148>
c0019f2c:	b8 07 00 00 00       	mov    eax,0x7
c0019f31:	eb 1d                	jmp    c0019f50 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c0019f33:	90                   	nop
c0019f34:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c0019f3b:	85 c0                	test   eax,eax
c0019f3d:	75 09                	jne    c0019f48 <FAT::readDir(void*, unsigned long, void*, int*)+0x15c>
c0019f3f:	b8 00 00 00 00       	mov    eax,0x0
c0019f44:	eb 0a                	jmp    c0019f50 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c0019f46:	66 90                	xchg   ax,ax
c0019f48:	b8 01 00 00 00       	mov    eax,0x1
c0019f4d:	8d 76 00             	lea    esi,[esi+0x0]
c0019f50:	81 c4 50 02 00 00    	add    esp,0x250
c0019f56:	5b                   	pop    ebx
c0019f57:	5e                   	pop    esi
c0019f58:	5f                   	pop    edi
c0019f59:	c3                   	ret    
c0019f5a:	66 90                	xchg   ax,ax

c0019f5c <FAT::read(void*, unsigned long, void*, int*)>:
c0019f5c:	83 ec 1c             	sub    esp,0x1c
c0019f5f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019f64:	74 0a                	je     c0019f70 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c0019f66:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0019f6b:	75 0b                	jne    c0019f78 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c0019f6d:	8d 76 00             	lea    esi,[esi+0x0]
c0019f70:	b8 04 00 00 00       	mov    eax,0x4
c0019f75:	eb 41                	jmp    c0019fb8 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0019f77:	90                   	nop
c0019f78:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019f7c:	50                   	push   eax
c0019f7d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019f81:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0019f85:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019f89:	e8 b6 a1 fe ff       	call   c0004144 <f_read>
c0019f8e:	83 c4 10             	add    esp,0x10
c0019f91:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019f95:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019f99:	89 c2                	mov    edx,eax
c0019f9b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019f9f:	89 10                	mov    DWORD PTR [eax],edx
c0019fa1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019fa5:	85 c0                	test   eax,eax
c0019fa7:	75 07                	jne    c0019fb0 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c0019fa9:	b8 00 00 00 00       	mov    eax,0x0
c0019fae:	eb 08                	jmp    c0019fb8 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0019fb0:	b8 01 00 00 00       	mov    eax,0x1
c0019fb5:	8d 76 00             	lea    esi,[esi+0x0]
c0019fb8:	83 c4 1c             	add    esp,0x1c
c0019fbb:	c3                   	ret    

c0019fbc <FAT::write(void*, unsigned long, void*, int*)>:
c0019fbc:	83 ec 1c             	sub    esp,0x1c
c0019fbf:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019fc4:	74 0a                	je     c0019fd0 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c0019fc6:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0019fcb:	75 0b                	jne    c0019fd8 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c0019fcd:	8d 76 00             	lea    esi,[esi+0x0]
c0019fd0:	b8 04 00 00 00       	mov    eax,0x4
c0019fd5:	eb 41                	jmp    c001a018 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0019fd7:	90                   	nop
c0019fd8:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019fdc:	50                   	push   eax
c0019fdd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019fe1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0019fe5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019fe9:	e8 37 a3 fe ff       	call   c0004325 <f_write>
c0019fee:	83 c4 10             	add    esp,0x10
c0019ff1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019ff5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019ff9:	89 c2                	mov    edx,eax
c0019ffb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019fff:	89 10                	mov    DWORD PTR [eax],edx
c001a001:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a005:	85 c0                	test   eax,eax
c001a007:	75 07                	jne    c001a010 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c001a009:	b8 00 00 00 00       	mov    eax,0x0
c001a00e:	eb 08                	jmp    c001a018 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001a010:	b8 01 00 00 00       	mov    eax,0x1
c001a015:	8d 76 00             	lea    esi,[esi+0x0]
c001a018:	83 c4 1c             	add    esp,0x1c
c001a01b:	c3                   	ret    

c001a01c <FAT::close(void*)>:
c001a01c:	83 ec 1c             	sub    esp,0x1c
c001a01f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001a024:	75 0a                	jne    c001a030 <FAT::close(void*)+0x14>
c001a026:	b8 04 00 00 00       	mov    eax,0x4
c001a02b:	eb 3f                	jmp    c001a06c <FAT::close(void*)+0x50>
c001a02d:	8d 76 00             	lea    esi,[esi+0x0]
c001a030:	83 ec 0c             	sub    esp,0xc
c001a033:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a037:	e8 f5 a5 fe ff       	call   c0004631 <f_close>
c001a03c:	83 c4 10             	add    esp,0x10
c001a03f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a043:	83 ec 0c             	sub    esp,0xc
c001a046:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a04a:	e8 91 48 ff ff       	call   c000e8e0 <free>
c001a04f:	83 c4 10             	add    esp,0x10
c001a052:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a056:	85 c0                	test   eax,eax
c001a058:	75 0a                	jne    c001a064 <FAT::close(void*)+0x48>
c001a05a:	b8 00 00 00 00       	mov    eax,0x0
c001a05f:	eb 0b                	jmp    c001a06c <FAT::close(void*)+0x50>
c001a061:	8d 76 00             	lea    esi,[esi+0x0]
c001a064:	b8 01 00 00 00       	mov    eax,0x1
c001a069:	8d 76 00             	lea    esi,[esi+0x0]
c001a06c:	83 c4 1c             	add    esp,0x1c
c001a06f:	c3                   	ret    

c001a070 <FAT::closeDir(void*)>:
c001a070:	83 ec 1c             	sub    esp,0x1c
c001a073:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001a078:	75 0a                	jne    c001a084 <FAT::closeDir(void*)+0x14>
c001a07a:	b8 04 00 00 00       	mov    eax,0x4
c001a07f:	eb 3f                	jmp    c001a0c0 <FAT::closeDir(void*)+0x50>
c001a081:	8d 76 00             	lea    esi,[esi+0x0]
c001a084:	83 ec 0c             	sub    esp,0xc
c001a087:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a08b:	e8 4b a8 fe ff       	call   c00048db <f_closedir>
c001a090:	83 c4 10             	add    esp,0x10
c001a093:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a097:	83 ec 0c             	sub    esp,0xc
c001a09a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a09e:	e8 3d 48 ff ff       	call   c000e8e0 <free>
c001a0a3:	83 c4 10             	add    esp,0x10
c001a0a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a0aa:	85 c0                	test   eax,eax
c001a0ac:	75 0a                	jne    c001a0b8 <FAT::closeDir(void*)+0x48>
c001a0ae:	b8 00 00 00 00       	mov    eax,0x0
c001a0b3:	eb 0b                	jmp    c001a0c0 <FAT::closeDir(void*)+0x50>
c001a0b5:	8d 76 00             	lea    esi,[esi+0x0]
c001a0b8:	b8 01 00 00 00       	mov    eax,0x1
c001a0bd:	8d 76 00             	lea    esi,[esi+0x0]
c001a0c0:	83 c4 1c             	add    esp,0x1c
c001a0c3:	c3                   	ret    

c001a0c4 <FAT::truncate(void*, unsigned long long)>:
c001a0c4:	83 ec 2c             	sub    esp,0x2c
c001a0c7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a0cb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a0cf:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001a0d3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a0d7:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001a0dc:	75 0a                	jne    c001a0e8 <FAT::truncate(void*, unsigned long long)+0x24>
c001a0de:	b8 04 00 00 00       	mov    eax,0x4
c001a0e3:	eb 47                	jmp    c001a12c <FAT::truncate(void*, unsigned long long)+0x68>
c001a0e5:	8d 76 00             	lea    esi,[esi+0x0]
c001a0e8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a0ec:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001a0ef:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a0f3:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001a0fb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a0ff:	83 ec 08             	sub    esp,0x8
c001a102:	50                   	push   eax
c001a103:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001a107:	e8 54 a5 fe ff       	call   c0004660 <f_lseek>
c001a10c:	83 c4 10             	add    esp,0x10
c001a10f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a113:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a117:	85 c0                	test   eax,eax
c001a119:	75 09                	jne    c001a124 <FAT::truncate(void*, unsigned long long)+0x60>
c001a11b:	b8 00 00 00 00       	mov    eax,0x0
c001a120:	eb 0a                	jmp    c001a12c <FAT::truncate(void*, unsigned long long)+0x68>
c001a122:	66 90                	xchg   ax,ax
c001a124:	b8 01 00 00 00       	mov    eax,0x1
c001a129:	8d 76 00             	lea    esi,[esi+0x0]
c001a12c:	83 c4 2c             	add    esp,0x2c
c001a12f:	c3                   	ret    

c001a130 <FAT::seek(void*, unsigned long long)>:
c001a130:	83 ec 2c             	sub    esp,0x2c
c001a133:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a137:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a13b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001a13f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a143:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001a148:	75 0a                	jne    c001a154 <FAT::seek(void*, unsigned long long)+0x24>
c001a14a:	b8 04 00 00 00       	mov    eax,0x4
c001a14f:	eb 33                	jmp    c001a184 <FAT::seek(void*, unsigned long long)+0x54>
c001a151:	8d 76 00             	lea    esi,[esi+0x0]
c001a154:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a158:	83 ec 08             	sub    esp,0x8
c001a15b:	50                   	push   eax
c001a15c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001a160:	e8 fb a4 fe ff       	call   c0004660 <f_lseek>
c001a165:	83 c4 10             	add    esp,0x10
c001a168:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a16c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a170:	85 c0                	test   eax,eax
c001a172:	75 08                	jne    c001a17c <FAT::seek(void*, unsigned long long)+0x4c>
c001a174:	b8 00 00 00 00       	mov    eax,0x0
c001a179:	eb 09                	jmp    c001a184 <FAT::seek(void*, unsigned long long)+0x54>
c001a17b:	90                   	nop
c001a17c:	b8 01 00 00 00       	mov    eax,0x1
c001a181:	8d 76 00             	lea    esi,[esi+0x0]
c001a184:	83 c4 2c             	add    esp,0x2c
c001a187:	c3                   	ret    

c001a188 <fatWrapperReadDisk>:
c001a188:	53                   	push   ebx
c001a189:	83 ec 18             	sub    esp,0x18
c001a18c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a190:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a194:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a199:	8b 0c 85 80 97 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd6880]
c001a1a0:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001a1a4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a1a8:	ba 00 00 00 00       	mov    edx,0x0
c001a1ad:	83 ec 0c             	sub    esp,0xc
c001a1b0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a1b4:	53                   	push   ebx
c001a1b5:	52                   	push   edx
c001a1b6:	50                   	push   eax
c001a1b7:	51                   	push   ecx
c001a1b8:	e8 23 ff fe ff       	call   c000a0e0 <LogicalDisk::read(unsigned long long, int, void*)>
c001a1bd:	83 c4 20             	add    esp,0x20
c001a1c0:	83 c4 18             	add    esp,0x18
c001a1c3:	5b                   	pop    ebx
c001a1c4:	c3                   	ret    
c001a1c5:	8d 76 00             	lea    esi,[esi+0x0]

c001a1c8 <fatWrapperWriteDisk>:
c001a1c8:	53                   	push   ebx
c001a1c9:	83 ec 18             	sub    esp,0x18
c001a1cc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a1d0:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a1d4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a1d9:	8b 0c 85 80 97 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd6880]
c001a1e0:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001a1e4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a1e8:	ba 00 00 00 00       	mov    edx,0x0
c001a1ed:	83 ec 0c             	sub    esp,0xc
c001a1f0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a1f4:	53                   	push   ebx
c001a1f5:	52                   	push   edx
c001a1f6:	50                   	push   eax
c001a1f7:	51                   	push   ecx
c001a1f8:	e8 4f ff fe ff       	call   c000a14c <LogicalDisk::write(unsigned long long, int, void*)>
c001a1fd:	83 c4 20             	add    esp,0x20
c001a200:	83 c4 18             	add    esp,0x18
c001a203:	5b                   	pop    ebx
c001a204:	c3                   	ret    
c001a205:	8d 76 00             	lea    esi,[esi+0x0]

c001a208 <fatWrapperIoctl>:
c001a208:	53                   	push   ebx
c001a209:	83 ec 28             	sub    esp,0x28
c001a20c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a210:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001a214:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a218:	88 d0                	mov    al,dl
c001a21a:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001a21e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a223:	83 f8 02             	cmp    eax,0x2
c001a226:	75 34                	jne    c001a25c <fatWrapperIoctl+0x54>
c001a228:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a22c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a230:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a235:	8b 04 85 80 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6880]
c001a23c:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001a242:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001a248:	89 c2                	mov    edx,eax
c001a24a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a24e:	66 89 10             	mov    WORD PTR [eax],dx
c001a251:	b8 00 00 00 00       	mov    eax,0x0
c001a256:	e9 c5 00 00 00       	jmp    c001a320 <fatWrapperIoctl+0x118>
c001a25b:	90                   	nop
c001a25c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a261:	83 f8 01             	cmp    eax,0x1
c001a264:	75 6a                	jne    c001a2d0 <fatWrapperIoctl+0xc8>
c001a266:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a26a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a26e:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a273:	8b 04 85 80 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6880]
c001a27a:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001a280:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001a286:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c001a28c:	89 c8                	mov    eax,ecx
c001a28e:	89 da                	mov    edx,ebx
c001a290:	0f a4 c2 0a          	shld   edx,eax,0xa
c001a294:	c1 e0 0a             	shl    eax,0xa
c001a297:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001a29c:	8b 0c 8d 80 97 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6880]
c001a2a3:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c001a2a9:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001a2af:	89 cb                	mov    ebx,ecx
c001a2b1:	c1 fb 1f             	sar    ebx,0x1f
c001a2b4:	53                   	push   ebx
c001a2b5:	51                   	push   ecx
c001a2b6:	52                   	push   edx
c001a2b7:	50                   	push   eax
c001a2b8:	e8 97 57 00 00       	call   c001fa54 <__udivdi3>
c001a2bd:	83 c4 10             	add    esp,0x10
c001a2c0:	89 c2                	mov    edx,eax
c001a2c2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a2c6:	89 10                	mov    DWORD PTR [eax],edx
c001a2c8:	b8 00 00 00 00       	mov    eax,0x0
c001a2cd:	eb 51                	jmp    c001a320 <fatWrapperIoctl+0x118>
c001a2cf:	90                   	nop
c001a2d0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a2d5:	85 c0                	test   eax,eax
c001a2d7:	75 07                	jne    c001a2e0 <fatWrapperIoctl+0xd8>
c001a2d9:	b8 00 00 00 00       	mov    eax,0x0
c001a2de:	eb 40                	jmp    c001a320 <fatWrapperIoctl+0x118>
c001a2e0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a2e5:	83 f8 03             	cmp    eax,0x3
c001a2e8:	75 1a                	jne    c001a304 <fatWrapperIoctl+0xfc>
c001a2ea:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a2ee:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a2f2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a2f6:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001a2fc:	b8 00 00 00 00       	mov    eax,0x0
c001a301:	eb 1d                	jmp    c001a320 <fatWrapperIoctl+0x118>
c001a303:	90                   	nop
c001a304:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a309:	83 f8 04             	cmp    eax,0x4
c001a30c:	75 0a                	jne    c001a318 <fatWrapperIoctl+0x110>
c001a30e:	b8 00 00 00 00       	mov    eax,0x0
c001a313:	eb 0b                	jmp    c001a320 <fatWrapperIoctl+0x118>
c001a315:	8d 76 00             	lea    esi,[esi+0x0]
c001a318:	b8 04 00 00 00       	mov    eax,0x4
c001a31d:	8d 76 00             	lea    esi,[esi+0x0]
c001a320:	83 c4 28             	add    esp,0x28
c001a323:	5b                   	pop    ebx
c001a324:	c3                   	ret    
c001a325:	90                   	nop
c001a326:	66 90                	xchg   ax,ax

c001a328 <FAT::FAT()>:
c001a328:	83 ec 1c             	sub    esp,0x1c
c001a32b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a32f:	83 ec 0c             	sub    esp,0xc
c001a332:	50                   	push   eax
c001a333:	e8 1e da fe ff       	call   c0007d56 <Filesystem::Filesystem()>
c001a338:	83 c4 10             	add    esp,0x10
c001a33b:	ba 28 31 02 c0       	mov    edx,0xc0023128
c001a340:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a344:	89 10                	mov    DWORD PTR [eax],edx
c001a346:	c7 05 a0 c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c7a0,0x0
c001a350:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a358:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c001a35d:	7f 19                	jg     c001a378 <FAT::FAT()+0x50>
c001a35f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a363:	c7 04 85 c0 c7 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd3840],0xffffffff
c001a36e:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001a373:	eb e3                	jmp    c001a358 <FAT::FAT()+0x30>
c001a375:	8d 76 00             	lea    esi,[esi+0x0]
c001a378:	90                   	nop
c001a379:	83 c4 1c             	add    esp,0x1c
c001a37c:	c3                   	ret    
c001a37d:	90                   	nop
c001a37e:	66 90                	xchg   ax,ax

c001a380 <FAT::fixFilepath(char*)>:
c001a380:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a384:	8a 00                	mov    al,BYTE PTR [eax]
c001a386:	0f be c0             	movsx  eax,al
c001a389:	83 f8 40             	cmp    eax,0x40
c001a38c:	7e 2e                	jle    c001a3bc <FAT::fixFilepath(char*)+0x3c>
c001a38e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a392:	8a 00                	mov    al,BYTE PTR [eax]
c001a394:	83 e8 41             	sub    eax,0x41
c001a397:	88 c2                	mov    dl,al
c001a399:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a39d:	88 10                	mov    BYTE PTR [eax],dl
c001a39f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a3a3:	8a 00                	mov    al,BYTE PTR [eax]
c001a3a5:	0f be c0             	movsx  eax,al
c001a3a8:	8b 04 85 c0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3840]
c001a3af:	83 c0 30             	add    eax,0x30
c001a3b2:	88 c2                	mov    dl,al
c001a3b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a3b8:	88 10                	mov    BYTE PTR [eax],dl
c001a3ba:	66 90                	xchg   ax,ax
c001a3bc:	90                   	nop
c001a3bd:	c3                   	ret    
c001a3be:	66 90                	xchg   ax,ax

c001a3c0 <FAT::open(char const*, void**, FileOpenMode)>:
c001a3c0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a3c6:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001a3ce:	74 0c                	je     c001a3dc <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c001a3d0:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001a3d8:	75 0e                	jne    c001a3e8 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c001a3da:	66 90                	xchg   ax,ax
c001a3dc:	b8 04 00 00 00       	mov    eax,0x4
c001a3e1:	e9 46 01 00 00       	jmp    c001a52c <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c001a3e6:	66 90                	xchg   ax,ax
c001a3e8:	83 ec 08             	sub    esp,0x8
c001a3eb:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a3f2:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a3f6:	50                   	push   eax
c001a3f7:	e8 54 62 fe ff       	call   c0000650 <strcpy>
c001a3fc:	83 c4 10             	add    esp,0x10
c001a3ff:	83 ec 08             	sub    esp,0x8
c001a402:	8d 44 24 10          	lea    eax,[esp+0x10]
c001a406:	50                   	push   eax
c001a407:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a40e:	e8 6d ff ff ff       	call   c001a380 <FAT::fixFilepath(char*)>
c001a413:	83 c4 10             	add    esp,0x10
c001a416:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001a41e:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001a425:	83 e0 01             	and    eax,0x1
c001a428:	74 12                	je     c001a43c <FAT::open(char const*, void**, FileOpenMode)+0x7c>
c001a42a:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001a431:	83 c8 01             	or     eax,0x1
c001a434:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001a43b:	90                   	nop
c001a43c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001a443:	83 e0 04             	and    eax,0x4
c001a446:	74 24                	je     c001a46c <FAT::open(char const*, void**, FileOpenMode)+0xac>
c001a448:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001a44f:	83 c8 30             	or     eax,0x30
c001a452:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001a459:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001a460:	83 c8 02             	or     eax,0x2
c001a463:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001a46a:	66 90                	xchg   ax,ax
c001a46c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001a473:	83 e0 02             	and    eax,0x2
c001a476:	74 14                	je     c001a48c <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c001a478:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001a47f:	83 c8 02             	or     eax,0x2
c001a482:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001a489:	8d 76 00             	lea    esi,[esi+0x0]
c001a48c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001a493:	83 e0 08             	and    eax,0x8
c001a496:	74 14                	je     c001a4ac <FAT::open(char const*, void**, FileOpenMode)+0xec>
c001a498:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001a49f:	83 c8 04             	or     eax,0x4
c001a4a2:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001a4a9:	8d 76 00             	lea    esi,[esi+0x0]
c001a4ac:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001a4b3:	83 e0 10             	and    eax,0x10
c001a4b6:	74 14                	je     c001a4cc <FAT::open(char const*, void**, FileOpenMode)+0x10c>
c001a4b8:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001a4bf:	83 c8 08             	or     eax,0x8
c001a4c2:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001a4c9:	8d 76 00             	lea    esi,[esi+0x0]
c001a4cc:	83 ec 0c             	sub    esp,0xc
c001a4cf:	68 28 02 00 00       	push   0x228
c001a4d4:	e8 f7 43 ff ff       	call   c000e8d0 <malloc>
c001a4d9:	83 c4 10             	add    esp,0x10
c001a4dc:	89 c2                	mov    edx,eax
c001a4de:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001a4e5:	89 10                	mov    DWORD PTR [eax],edx
c001a4e7:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c001a4ef:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001a4f6:	8b 00                	mov    eax,DWORD PTR [eax]
c001a4f8:	83 ec 04             	sub    esp,0x4
c001a4fb:	52                   	push   edx
c001a4fc:	8d 54 24 10          	lea    edx,[esp+0x10]
c001a500:	52                   	push   edx
c001a501:	50                   	push   eax
c001a502:	e8 7a 99 fe ff       	call   c0003e81 <f_open>
c001a507:	83 c4 10             	add    esp,0x10
c001a50a:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c001a511:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c001a519:	74 09                	je     c001a524 <FAT::open(char const*, void**, FileOpenMode)+0x164>
c001a51b:	b8 01 00 00 00       	mov    eax,0x1
c001a520:	eb 0a                	jmp    c001a52c <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c001a522:	66 90                	xchg   ax,ax
c001a524:	b8 00 00 00 00       	mov    eax,0x0
c001a529:	8d 76 00             	lea    esi,[esi+0x0]
c001a52c:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a532:	c3                   	ret    
c001a533:	90                   	nop

c001a534 <FAT::openDir(char const*, void**)>:
c001a534:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a53a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001a542:	74 0c                	je     c001a550 <FAT::openDir(char const*, void**)+0x1c>
c001a544:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001a54c:	75 0e                	jne    c001a55c <FAT::openDir(char const*, void**)+0x28>
c001a54e:	66 90                	xchg   ax,ax
c001a550:	b8 04 00 00 00       	mov    eax,0x4
c001a555:	e9 82 00 00 00       	jmp    c001a5dc <FAT::openDir(char const*, void**)+0xa8>
c001a55a:	66 90                	xchg   ax,ax
c001a55c:	83 ec 08             	sub    esp,0x8
c001a55f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a566:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a56a:	50                   	push   eax
c001a56b:	e8 e0 60 fe ff       	call   c0000650 <strcpy>
c001a570:	83 c4 10             	add    esp,0x10
c001a573:	83 ec 08             	sub    esp,0x8
c001a576:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a57a:	50                   	push   eax
c001a57b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a582:	e8 f9 fd ff ff       	call   c001a380 <FAT::fixFilepath(char*)>
c001a587:	83 c4 10             	add    esp,0x10
c001a58a:	83 ec 0c             	sub    esp,0xc
c001a58d:	6a 30                	push   0x30
c001a58f:	e8 3c 43 ff ff       	call   c000e8d0 <malloc>
c001a594:	83 c4 10             	add    esp,0x10
c001a597:	89 c2                	mov    edx,eax
c001a599:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001a5a0:	89 10                	mov    DWORD PTR [eax],edx
c001a5a2:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001a5a9:	8b 00                	mov    eax,DWORD PTR [eax]
c001a5ab:	83 ec 08             	sub    esp,0x8
c001a5ae:	8d 54 24 14          	lea    edx,[esp+0x14]
c001a5b2:	52                   	push   edx
c001a5b3:	50                   	push   eax
c001a5b4:	e8 57 a2 fe ff       	call   c0004810 <f_opendir>
c001a5b9:	83 c4 10             	add    esp,0x10
c001a5bc:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001a5c3:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c001a5cb:	74 07                	je     c001a5d4 <FAT::openDir(char const*, void**)+0xa0>
c001a5cd:	b8 01 00 00 00       	mov    eax,0x1
c001a5d2:	eb 08                	jmp    c001a5dc <FAT::openDir(char const*, void**)+0xa8>
c001a5d4:	b8 00 00 00 00       	mov    eax,0x0
c001a5d9:	8d 76 00             	lea    esi,[esi+0x0]
c001a5dc:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a5e2:	c3                   	ret    
c001a5e3:	90                   	nop

c001a5e4 <FAT::stat(char const*, unsigned long long*, bool*)>:
c001a5e4:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001a5ea:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c001a5f2:	75 0c                	jne    c001a600 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c001a5f4:	b8 04 00 00 00       	mov    eax,0x4
c001a5f9:	e9 d6 00 00 00       	jmp    c001a6d4 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001a5fe:	66 90                	xchg   ax,ax
c001a600:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c001a608:	75 0a                	jne    c001a614 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c001a60a:	b8 04 00 00 00       	mov    eax,0x4
c001a60f:	e9 c0 00 00 00       	jmp    c001a6d4 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001a614:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c001a61c:	75 0a                	jne    c001a628 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c001a61e:	b8 04 00 00 00       	mov    eax,0x4
c001a623:	e9 ac 00 00 00       	jmp    c001a6d4 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001a628:	83 ec 08             	sub    esp,0x8
c001a62b:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001a632:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001a639:	50                   	push   eax
c001a63a:	e8 11 60 fe ff       	call   c0000650 <strcpy>
c001a63f:	83 c4 10             	add    esp,0x10
c001a642:	83 ec 08             	sub    esp,0x8
c001a645:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001a64c:	50                   	push   eax
c001a64d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001a654:	e8 27 fd ff ff       	call   c001a380 <FAT::fixFilepath(char*)>
c001a659:	83 c4 10             	add    esp,0x10
c001a65c:	83 ec 08             	sub    esp,0x8
c001a65f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001a663:	50                   	push   eax
c001a664:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001a66b:	50                   	push   eax
c001a66c:	e8 1e a3 fe ff       	call   c000498f <f_stat>
c001a671:	83 c4 10             	add    esp,0x10
c001a674:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001a67b:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001a682:	85 c0                	test   eax,eax
c001a684:	74 0a                	je     c001a690 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c001a686:	83 f8 04             	cmp    eax,0x4
c001a689:	74 39                	je     c001a6c4 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c001a68b:	eb 3f                	jmp    c001a6cc <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c001a68d:	8d 76 00             	lea    esi,[esi+0x0]
c001a690:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a694:	0f b6 c0             	movzx  eax,al
c001a697:	83 e0 10             	and    eax,0x10
c001a69a:	0f 95 c2             	setne  dl
c001a69d:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c001a6a4:	88 10                	mov    BYTE PTR [eax],dl
c001a6a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a6aa:	ba 00 00 00 00       	mov    edx,0x0
c001a6af:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c001a6b6:	89 01                	mov    DWORD PTR [ecx],eax
c001a6b8:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001a6bb:	b8 00 00 00 00       	mov    eax,0x0
c001a6c0:	eb 12                	jmp    c001a6d4 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001a6c2:	66 90                	xchg   ax,ax
c001a6c4:	b8 02 00 00 00       	mov    eax,0x2
c001a6c9:	eb 09                	jmp    c001a6d4 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001a6cb:	90                   	nop
c001a6cc:	b8 01 00 00 00       	mov    eax,0x1
c001a6d1:	8d 76 00             	lea    esi,[esi+0x0]
c001a6d4:	81 c4 2c 02 00 00    	add    esp,0x22c
c001a6da:	c3                   	ret    
c001a6db:	90                   	nop

c001a6dc <FAT::unlink(char const*)>:
c001a6dc:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a6e2:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001a6ea:	75 08                	jne    c001a6f4 <FAT::unlink(char const*)+0x18>
c001a6ec:	b8 04 00 00 00       	mov    eax,0x4
c001a6f1:	eb 61                	jmp    c001a754 <FAT::unlink(char const*)+0x78>
c001a6f3:	90                   	nop
c001a6f4:	83 ec 08             	sub    esp,0x8
c001a6f7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a6fe:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a702:	50                   	push   eax
c001a703:	e8 48 5f fe ff       	call   c0000650 <strcpy>
c001a708:	83 c4 10             	add    esp,0x10
c001a70b:	83 ec 08             	sub    esp,0x8
c001a70e:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a712:	50                   	push   eax
c001a713:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a71a:	e8 61 fc ff ff       	call   c001a380 <FAT::fixFilepath(char*)>
c001a71f:	83 c4 10             	add    esp,0x10
c001a722:	83 ec 0c             	sub    esp,0xc
c001a725:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a729:	50                   	push   eax
c001a72a:	e8 d2 a4 fe ff       	call   c0004c01 <f_unlink>
c001a72f:	83 c4 10             	add    esp,0x10
c001a732:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001a739:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001a740:	85 c0                	test   eax,eax
c001a742:	75 08                	jne    c001a74c <FAT::unlink(char const*)+0x70>
c001a744:	b8 00 00 00 00       	mov    eax,0x0
c001a749:	eb 09                	jmp    c001a754 <FAT::unlink(char const*)+0x78>
c001a74b:	90                   	nop
c001a74c:	b8 01 00 00 00       	mov    eax,0x1
c001a751:	8d 76 00             	lea    esi,[esi+0x0]
c001a754:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a75a:	c3                   	ret    
c001a75b:	90                   	nop

c001a75c <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001a75c:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001a762:	8b 84 24 38 01 00 00 	mov    eax,DWORD PTR [esp+0x138]
c001a769:	8b 94 24 3c 01 00 00 	mov    edx,DWORD PTR [esp+0x13c]
c001a770:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a774:	88 d0                	mov    al,dl
c001a776:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001a77a:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001a782:	75 0c                	jne    c001a790 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x34>
c001a784:	b8 04 00 00 00       	mov    eax,0x4
c001a789:	e9 7e 01 00 00       	jmp    c001a90c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1b0>
c001a78e:	66 90                	xchg   ax,ax
c001a790:	83 ec 08             	sub    esp,0x8
c001a793:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001a79a:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a79e:	50                   	push   eax
c001a79f:	e8 ac 5e fe ff       	call   c0000650 <strcpy>
c001a7a4:	83 c4 10             	add    esp,0x10
c001a7a7:	83 ec 08             	sub    esp,0x8
c001a7aa:	8d 44 24 20          	lea    eax,[esp+0x20]
c001a7ae:	50                   	push   eax
c001a7af:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001a7b6:	e8 c5 fb ff ff       	call   c001a380 <FAT::fixFilepath(char*)>
c001a7bb:	83 c4 10             	add    esp,0x10
c001a7be:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001a7c6:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001a7ce:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a7d3:	83 e0 01             	and    eax,0x1
c001a7d6:	74 14                	je     c001a7ec <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x90>
c001a7d8:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a7df:	83 c8 01             	or     eax,0x1
c001a7e2:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001a7e9:	8d 76 00             	lea    esi,[esi+0x0]
c001a7ec:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a7f1:	83 e0 02             	and    eax,0x2
c001a7f4:	74 12                	je     c001a808 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xac>
c001a7f6:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a7fd:	83 c8 20             	or     eax,0x20
c001a800:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001a807:	90                   	nop
c001a808:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a80d:	83 e0 04             	and    eax,0x4
c001a810:	74 12                	je     c001a824 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c001a812:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a819:	83 c8 04             	or     eax,0x4
c001a81c:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001a823:	90                   	nop
c001a824:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a829:	83 e0 08             	and    eax,0x8
c001a82c:	74 12                	je     c001a840 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c001a82e:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a835:	83 c8 02             	or     eax,0x2
c001a838:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001a83f:	90                   	nop
c001a840:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a845:	83 e0 01             	and    eax,0x1
c001a848:	74 12                	je     c001a85c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x100>
c001a84a:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001a851:	83 c8 01             	or     eax,0x1
c001a854:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a85b:	90                   	nop
c001a85c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a861:	83 e0 02             	and    eax,0x2
c001a864:	74 12                	je     c001a878 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x11c>
c001a866:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001a86d:	83 c8 20             	or     eax,0x20
c001a870:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a877:	90                   	nop
c001a878:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a87d:	83 e0 04             	and    eax,0x4
c001a880:	74 12                	je     c001a894 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x138>
c001a882:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001a889:	83 c8 04             	or     eax,0x4
c001a88c:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a893:	90                   	nop
c001a894:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a899:	83 e0 08             	and    eax,0x8
c001a89c:	74 12                	je     c001a8b0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x154>
c001a89e:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001a8a5:	83 c8 02             	or     eax,0x2
c001a8a8:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a8af:	90                   	nop
c001a8b0:	8a 94 24 1e 01 00 00 	mov    dl,BYTE PTR [esp+0x11e]
c001a8b7:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a8be:	09 d0                	or     eax,edx
c001a8c0:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a8c7:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c001a8cf:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c001a8d7:	83 ec 04             	sub    esp,0x4
c001a8da:	52                   	push   edx
c001a8db:	50                   	push   eax
c001a8dc:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a8e0:	50                   	push   eax
c001a8e1:	e8 8e a7 fe ff       	call   c0005074 <f_chmod>
c001a8e6:	83 c4 10             	add    esp,0x10
c001a8e9:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001a8f0:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001a8f7:	85 c0                	test   eax,eax
c001a8f9:	75 09                	jne    c001a904 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1a8>
c001a8fb:	b8 00 00 00 00       	mov    eax,0x0
c001a900:	eb 0a                	jmp    c001a90c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1b0>
c001a902:	66 90                	xchg   ax,ax
c001a904:	b8 01 00 00 00       	mov    eax,0x1
c001a909:	8d 76 00             	lea    esi,[esi+0x0]
c001a90c:	81 c4 2c 01 00 00    	add    esp,0x12c
c001a912:	c3                   	ret    
c001a913:	90                   	nop

c001a914 <FAT::rename(char const*, char const*)>:
c001a914:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001a91a:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001a922:	74 0c                	je     c001a930 <FAT::rename(char const*, char const*)+0x1c>
c001a924:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001a92c:	75 0e                	jne    c001a93c <FAT::rename(char const*, char const*)+0x28>
c001a92e:	66 90                	xchg   ax,ax
c001a930:	b8 04 00 00 00       	mov    eax,0x4
c001a935:	e9 9e 00 00 00       	jmp    c001a9d8 <FAT::rename(char const*, char const*)+0xc4>
c001a93a:	66 90                	xchg   ax,ax
c001a93c:	83 ec 08             	sub    esp,0x8
c001a93f:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001a946:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001a94d:	50                   	push   eax
c001a94e:	e8 fd 5c fe ff       	call   c0000650 <strcpy>
c001a953:	83 c4 10             	add    esp,0x10
c001a956:	83 ec 08             	sub    esp,0x8
c001a959:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001a960:	50                   	push   eax
c001a961:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001a968:	e8 13 fa ff ff       	call   c001a380 <FAT::fixFilepath(char*)>
c001a96d:	83 c4 10             	add    esp,0x10
c001a970:	83 ec 08             	sub    esp,0x8
c001a973:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001a97a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a97e:	50                   	push   eax
c001a97f:	e8 cc 5c fe ff       	call   c0000650 <strcpy>
c001a984:	83 c4 10             	add    esp,0x10
c001a987:	83 ec 08             	sub    esp,0x8
c001a98a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a98e:	50                   	push   eax
c001a98f:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001a996:	e8 e5 f9 ff ff       	call   c001a380 <FAT::fixFilepath(char*)>
c001a99b:	83 c4 10             	add    esp,0x10
c001a99e:	83 ec 08             	sub    esp,0x8
c001a9a1:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a9a5:	50                   	push   eax
c001a9a6:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001a9ad:	50                   	push   eax
c001a9ae:	e8 09 a5 fe ff       	call   c0004ebc <f_rename>
c001a9b3:	83 c4 10             	add    esp,0x10
c001a9b6:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001a9bd:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001a9c4:	85 c0                	test   eax,eax
c001a9c6:	75 08                	jne    c001a9d0 <FAT::rename(char const*, char const*)+0xbc>
c001a9c8:	b8 00 00 00 00       	mov    eax,0x0
c001a9cd:	eb 09                	jmp    c001a9d8 <FAT::rename(char const*, char const*)+0xc4>
c001a9cf:	90                   	nop
c001a9d0:	b8 01 00 00 00       	mov    eax,0x1
c001a9d5:	8d 76 00             	lea    esi,[esi+0x0]
c001a9d8:	81 c4 1c 02 00 00    	add    esp,0x21c
c001a9de:	c3                   	ret    
c001a9df:	90                   	nop

c001a9e0 <FAT::mkdir(char const*)>:
c001a9e0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a9e6:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001a9ee:	75 08                	jne    c001a9f8 <FAT::mkdir(char const*)+0x18>
c001a9f0:	b8 04 00 00 00       	mov    eax,0x4
c001a9f5:	eb 61                	jmp    c001aa58 <FAT::mkdir(char const*)+0x78>
c001a9f7:	90                   	nop
c001a9f8:	83 ec 08             	sub    esp,0x8
c001a9fb:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001aa02:	8d 44 24 18          	lea    eax,[esp+0x18]
c001aa06:	50                   	push   eax
c001aa07:	e8 44 5c fe ff       	call   c0000650 <strcpy>
c001aa0c:	83 c4 10             	add    esp,0x10
c001aa0f:	83 ec 08             	sub    esp,0x8
c001aa12:	8d 44 24 14          	lea    eax,[esp+0x14]
c001aa16:	50                   	push   eax
c001aa17:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001aa1e:	e8 5d f9 ff ff       	call   c001a380 <FAT::fixFilepath(char*)>
c001aa23:	83 c4 10             	add    esp,0x10
c001aa26:	83 ec 0c             	sub    esp,0xc
c001aa29:	8d 44 24 18          	lea    eax,[esp+0x18]
c001aa2d:	50                   	push   eax
c001aa2e:	e8 ee a2 fe ff       	call   c0004d21 <f_mkdir>
c001aa33:	83 c4 10             	add    esp,0x10
c001aa36:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001aa3d:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001aa44:	85 c0                	test   eax,eax
c001aa46:	75 08                	jne    c001aa50 <FAT::mkdir(char const*)+0x70>
c001aa48:	b8 00 00 00 00       	mov    eax,0x0
c001aa4d:	eb 09                	jmp    c001aa58 <FAT::mkdir(char const*)+0x78>
c001aa4f:	90                   	nop
c001aa50:	b8 01 00 00 00       	mov    eax,0x1
c001aa55:	8d 76 00             	lea    esi,[esi+0x0]
c001aa58:	81 c4 1c 01 00 00    	add    esp,0x11c
c001aa5e:	c3                   	ret    
c001aa5f:	90                   	nop

c001aa60 <FAT::exists(char const*)>:
c001aa60:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001aa66:	83 ec 08             	sub    esp,0x8
c001aa69:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001aa70:	8d 44 24 10          	lea    eax,[esp+0x10]
c001aa74:	50                   	push   eax
c001aa75:	e8 d6 5b fe ff       	call   c0000650 <strcpy>
c001aa7a:	83 c4 10             	add    esp,0x10
c001aa7d:	83 ec 08             	sub    esp,0x8
c001aa80:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001aa84:	50                   	push   eax
c001aa85:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001aa8c:	e8 ef f8 ff ff       	call   c001a380 <FAT::fixFilepath(char*)>
c001aa91:	83 c4 10             	add    esp,0x10
c001aa94:	83 ec 08             	sub    esp,0x8
c001aa97:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c001aa9e:	50                   	push   eax
c001aa9f:	8d 44 24 10          	lea    eax,[esp+0x10]
c001aaa3:	50                   	push   eax
c001aaa4:	e8 e6 9e fe ff       	call   c000498f <f_stat>
c001aaa9:	83 c4 10             	add    esp,0x10
c001aaac:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001aab3:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001aaba:	85 c0                	test   eax,eax
c001aabc:	75 06                	jne    c001aac4 <FAT::exists(char const*)+0x64>
c001aabe:	b0 01                	mov    al,0x1
c001aac0:	eb 06                	jmp    c001aac8 <FAT::exists(char const*)+0x68>
c001aac2:	66 90                	xchg   ax,ax
c001aac4:	b0 00                	mov    al,0x0
c001aac6:	66 90                	xchg   ax,ax
c001aac8:	81 c4 2c 02 00 00    	add    esp,0x22c
c001aace:	c3                   	ret    
c001aacf:	90                   	nop

c001aad0 <isoReadDiscSectorHelper>:
c001aad0:	83 ec 2c             	sub    esp,0x2c
c001aad3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001aad7:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001aadb:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001aae0:	83 e8 41             	sub    eax,0x41
c001aae3:	8b 0c 85 80 97 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd6880]
c001aaea:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001aaee:	ba 00 00 00 00       	mov    edx,0x0
c001aaf3:	83 ec 0c             	sub    esp,0xc
c001aaf6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001aafa:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001aafe:	52                   	push   edx
c001aaff:	50                   	push   eax
c001ab00:	51                   	push   ecx
c001ab01:	e8 da f5 fe ff       	call   c000a0e0 <LogicalDisk::read(unsigned long long, int, void*)>
c001ab06:	83 c4 20             	add    esp,0x20
c001ab09:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ab0d:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001ab12:	74 0c                	je     c001ab20 <isoReadDiscSectorHelper+0x50>
c001ab14:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ab18:	c1 e0 0b             	shl    eax,0xb
c001ab1b:	eb 0b                	jmp    c001ab28 <isoReadDiscSectorHelper+0x58>
c001ab1d:	8d 76 00             	lea    esi,[esi+0x0]
c001ab20:	b8 00 00 00 00       	mov    eax,0x0
c001ab25:	8d 76 00             	lea    esi,[esi+0x0]
c001ab28:	83 c4 2c             	add    esp,0x2c
c001ab2b:	c3                   	ret    

c001ab2c <iso_kprintf>:
c001ab2c:	83 ec 0c             	sub    esp,0xc
c001ab2f:	83 ec 08             	sub    esp,0x8
c001ab32:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ab36:	68 ff 2d 02 c0       	push   0xc0022dff
c001ab3b:	e8 0e c4 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001ab40:	83 c4 10             	add    esp,0x10
c001ab43:	90                   	nop
c001ab44:	83 c4 0c             	add    esp,0xc
c001ab47:	c3                   	ret    

c001ab48 <iso_kprintfd>:
c001ab48:	83 ec 0c             	sub    esp,0xc
c001ab4b:	83 ec 08             	sub    esp,0x8
c001ab4e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ab52:	68 b1 14 02 c0       	push   0xc00214b1
c001ab57:	e8 f2 c3 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001ab5c:	83 c4 10             	add    esp,0x10
c001ab5f:	90                   	nop
c001ab60:	83 c4 0c             	add    esp,0xc
c001ab63:	c3                   	ret    

c001ab64 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001ab64:	b8 08 00 00 00       	mov    eax,0x8
c001ab69:	c3                   	ret    

c001ab6a <ISO9660::truncate(void*, unsigned long long)>:
c001ab6a:	b8 01 00 00 00       	mov    eax,0x1
c001ab6f:	c3                   	ret    

c001ab70 <ISO9660::getName()>:
c001ab70:	b8 8c 31 02 c0       	mov    eax,0xc002318c
c001ab75:	c3                   	ret    

c001ab76 <ISO9660::closeDir(void*)>:
c001ab76:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ab7a:	8b 00                	mov    eax,DWORD PTR [eax]
c001ab7c:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c001ab7f:	90                   	nop

c001ab80 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001ab80:	b8 01 00 00 00       	mov    eax,0x1
c001ab85:	c3                   	ret    

c001ab86 <ISO9660::unlink(char const*)>:
c001ab86:	b8 01 00 00 00       	mov    eax,0x1
c001ab8b:	c3                   	ret    

c001ab8c <ISO9660::write(void*, unsigned long, void*, int*)>:
c001ab8c:	b8 03 00 00 00       	mov    eax,0x3
c001ab91:	c3                   	ret    

c001ab92 <ISO9660::rename(char const*, char const*)>:
c001ab92:	b8 01 00 00 00       	mov    eax,0x1
c001ab97:	c3                   	ret    

c001ab98 <ISO9660::mkdir(char const*)>:
c001ab98:	b8 01 00 00 00       	mov    eax,0x1
c001ab9d:	c3                   	ret    

c001ab9e <ISO9660::~ISO9660()>:
c001ab9e:	83 ec 0c             	sub    esp,0xc
c001aba1:	ba cc 32 02 c0       	mov    edx,0xc00232cc
c001aba6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001abaa:	89 10                	mov    DWORD PTR [eax],edx
c001abac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001abb0:	83 ec 0c             	sub    esp,0xc
c001abb3:	50                   	push   eax
c001abb4:	e8 c1 d1 fe ff       	call   c0007d7a <Filesystem::~Filesystem()>
c001abb9:	83 c4 10             	add    esp,0x10
c001abbc:	90                   	nop
c001abbd:	83 c4 0c             	add    esp,0xc
c001abc0:	c3                   	ret    
c001abc1:	90                   	nop

c001abc2 <ISO9660::~ISO9660()>:
c001abc2:	83 ec 0c             	sub    esp,0xc
c001abc5:	83 ec 0c             	sub    esp,0xc
c001abc8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001abcc:	e8 cd ff ff ff       	call   c001ab9e <ISO9660::~ISO9660()>
c001abd1:	83 c4 10             	add    esp,0x10
c001abd4:	83 ec 08             	sub    esp,0x8
c001abd7:	6a 08                	push   0x8
c001abd9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001abdd:	e8 81 1a ff ff       	call   c000c663 <operator delete(void*, unsigned long)>
c001abe2:	83 c4 10             	add    esp,0x10
c001abe5:	83 c4 0c             	add    esp,0xc
c001abe8:	c3                   	ret    
c001abe9:	90                   	nop

c001abea <ISO9660::exists(char const*)>:
c001abea:	83 ec 18             	sub    esp,0x18
c001abed:	68 a7 31 02 c0       	push   0xc00231a7
c001abf2:	e8 2f 40 ff ff       	call   c000ec26 <KePanic(char const*)>
c001abf7:	31 c0                	xor    eax,eax
c001abf9:	83 c4 1c             	add    esp,0x1c
c001abfc:	c3                   	ret    
c001abfd:	90                   	nop

c001abfe <ISO9660::open(char const*, void**, FileOpenMode)>:
c001abfe:	56                   	push   esi
c001abff:	53                   	push   ebx
c001ac00:	53                   	push   ebx
c001ac01:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ac05:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001ac09:	85 db                	test   ebx,ebx
c001ac0b:	0f 84 ca 00 00 00    	je     c001acdb <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001ac11:	85 f6                	test   esi,esi
c001ac13:	0f 84 c2 00 00 00    	je     c001acdb <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001ac19:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c001ac1e:	b8 03 00 00 00       	mov    eax,0x3
c001ac23:	0f 85 b7 00 00 00    	jne    c001ace0 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001ac29:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001ac2b:	38 0d a0 c8 02 c0    	cmp    BYTE PTR ds:0xc002c8a0,cl
c001ac31:	0f be 05 a0 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c8a0
c001ac38:	74 1b                	je     c001ac55 <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c001ac3a:	85 c0                	test   eax,eax
c001ac3c:	74 10                	je     c001ac4e <ISO9660::open(char const*, void**, FileOpenMode)+0x50>
c001ac3e:	83 ec 0c             	sub    esp,0xc
c001ac41:	68 c5 31 02 c0       	push   0xc00231c5
c001ac46:	e8 db 3f ff ff       	call   c000ec26 <KePanic(char const*)>
c001ac4b:	83 c4 10             	add    esp,0x10
c001ac4e:	8a 03                	mov    al,BYTE PTR [ebx]
c001ac50:	a2 a0 c8 02 c0       	mov    ds:0xc002c8a0,al
c001ac55:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001ac58:	8b 04 85 7c 96 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6984]
c001ac5f:	85 c0                	test   eax,eax
c001ac61:	74 09                	je     c001ac6c <ISO9660::open(char const*, void**, FileOpenMode)+0x6e>
c001ac63:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001ac6a:	74 48                	je     c001acb4 <ISO9660::open(char const*, void**, FileOpenMode)+0xb6>
c001ac6c:	83 ec 0c             	sub    esp,0xc
c001ac6f:	68 d5 31 02 c0       	push   0xc00231d5
c001ac74:	e8 d5 c2 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001ac79:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001ac7c:	83 c4 10             	add    esp,0x10
c001ac7f:	8b 04 85 7c 96 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6984]
c001ac86:	85 c0                	test   eax,eax
c001ac88:	74 17                	je     c001aca1 <ISO9660::open(char const*, void**, FileOpenMode)+0xa3>
c001ac8a:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001ac91:	83 ec 0c             	sub    esp,0xc
c001ac94:	68 f5 31 02 c0       	push   0xc00231f5
c001ac99:	e8 b0 c2 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001ac9e:	83 c4 10             	add    esp,0x10
c001aca1:	0f be 05 a0 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c8a0
c001aca8:	83 ec 0c             	sub    esp,0xc
c001acab:	50                   	push   eax
c001acac:	e8 96 bf fe ff       	call   c0006c47 <init_percd>
c001acb1:	83 c4 10             	add    esp,0x10
c001acb4:	51                   	push   ecx
c001acb5:	83 c3 03             	add    ebx,0x3
c001acb8:	51                   	push   ecx
c001acb9:	6a 00                	push   0x0
c001acbb:	53                   	push   ebx
c001acbc:	e8 49 ba fe ff       	call   c000670a <iso_open>
c001acc1:	83 c4 10             	add    esp,0x10
c001acc4:	89 c2                	mov    edx,eax
c001acc6:	b8 01 00 00 00       	mov    eax,0x1
c001accb:	83 fa ff             	cmp    edx,0xffffffff
c001acce:	74 10                	je     c001ace0 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001acd0:	83 c2 32             	add    edx,0x32
c001acd3:	31 c0                	xor    eax,eax
c001acd5:	01 d2                	add    edx,edx
c001acd7:	89 16                	mov    DWORD PTR [esi],edx
c001acd9:	eb 05                	jmp    c001ace0 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001acdb:	b8 04 00 00 00       	mov    eax,0x4
c001ace0:	5a                   	pop    edx
c001ace1:	5b                   	pop    ebx
c001ace2:	5e                   	pop    esi
c001ace3:	c3                   	ret    

c001ace4 <ISO9660::read(void*, unsigned long, void*, int*)>:
c001ace4:	53                   	push   ebx
c001ace5:	83 ec 08             	sub    esp,0x8
c001ace8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001acec:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001acf0:	85 c0                	test   eax,eax
c001acf2:	74 2d                	je     c001ad21 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001acf4:	85 db                	test   ebx,ebx
c001acf6:	74 29                	je     c001ad21 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001acf8:	52                   	push   edx
c001acf9:	b9 02 00 00 00       	mov    ecx,0x2
c001acfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ad02:	99                   	cdq    
c001ad03:	f7 f9                	idiv   ecx
c001ad05:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001ad09:	83 e8 32             	sub    eax,0x32
c001ad0c:	50                   	push   eax
c001ad0d:	e8 a0 ba fe ff       	call   c00067b2 <iso_read>
c001ad12:	83 c4 10             	add    esp,0x10
c001ad15:	89 03                	mov    DWORD PTR [ebx],eax
c001ad17:	09 d0                	or     eax,edx
c001ad19:	0f 94 c0             	sete   al
c001ad1c:	0f b6 c0             	movzx  eax,al
c001ad1f:	eb 05                	jmp    c001ad26 <ISO9660::read(void*, unsigned long, void*, int*)+0x42>
c001ad21:	b8 04 00 00 00       	mov    eax,0x4
c001ad26:	83 c4 08             	add    esp,0x8
c001ad29:	5b                   	pop    ebx
c001ad2a:	c3                   	ret    
c001ad2b:	90                   	nop

c001ad2c <ISO9660::seek(void*, unsigned long long)>:
c001ad2c:	57                   	push   edi
c001ad2d:	b8 04 00 00 00       	mov    eax,0x4
c001ad32:	56                   	push   esi
c001ad33:	51                   	push   ecx
c001ad34:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ad38:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001ad3c:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001ad40:	85 d2                	test   edx,edx
c001ad42:	74 26                	je     c001ad6a <ISO9660::seek(void*, unsigned long long)+0x3e>
c001ad44:	89 d0                	mov    eax,edx
c001ad46:	b9 02 00 00 00       	mov    ecx,0x2
c001ad4b:	6a 00                	push   0x0
c001ad4d:	99                   	cdq    
c001ad4e:	f7 f9                	idiv   ecx
c001ad50:	57                   	push   edi
c001ad51:	56                   	push   esi
c001ad52:	83 e8 32             	sub    eax,0x32
c001ad55:	50                   	push   eax
c001ad56:	e8 6d bb fe ff       	call   c00068c8 <iso_seek>
c001ad5b:	83 c4 10             	add    esp,0x10
c001ad5e:	31 f0                	xor    eax,esi
c001ad60:	31 fa                	xor    edx,edi
c001ad62:	09 d0                	or     eax,edx
c001ad64:	0f 95 c0             	setne  al
c001ad67:	0f b6 c0             	movzx  eax,al
c001ad6a:	5a                   	pop    edx
c001ad6b:	5e                   	pop    esi
c001ad6c:	5f                   	pop    edi
c001ad6d:	c3                   	ret    

c001ad6e <ISO9660::tell(void*, unsigned long long*)>:
c001ad6e:	53                   	push   ebx
c001ad6f:	83 ec 08             	sub    esp,0x8
c001ad72:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ad76:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001ad7a:	85 c0                	test   eax,eax
c001ad7c:	74 24                	je     c001ada2 <ISO9660::tell(void*, unsigned long long*)+0x34>
c001ad7e:	85 db                	test   ebx,ebx
c001ad80:	74 20                	je     c001ada2 <ISO9660::tell(void*, unsigned long long*)+0x34>
c001ad82:	b9 02 00 00 00       	mov    ecx,0x2
c001ad87:	99                   	cdq    
c001ad88:	f7 f9                	idiv   ecx
c001ad8a:	83 ec 0c             	sub    esp,0xc
c001ad8d:	83 e8 32             	sub    eax,0x32
c001ad90:	50                   	push   eax
c001ad91:	e8 b6 bb fe ff       	call   c000694c <iso_tell>
c001ad96:	83 c4 10             	add    esp,0x10
c001ad99:	89 03                	mov    DWORD PTR [ebx],eax
c001ad9b:	31 c0                	xor    eax,eax
c001ad9d:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c001ada0:	eb 05                	jmp    c001ada7 <ISO9660::tell(void*, unsigned long long*)+0x39>
c001ada2:	b8 04 00 00 00       	mov    eax,0x4
c001ada7:	83 c4 08             	add    esp,0x8
c001adaa:	5b                   	pop    ebx
c001adab:	c3                   	ret    

c001adac <ISO9660::stat(void*, unsigned long long*)>:
c001adac:	56                   	push   esi
c001adad:	53                   	push   ebx
c001adae:	83 ec 10             	sub    esp,0x10
c001adb1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001adb5:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001adb9:	68 19 32 02 c0       	push   0xc0023219
c001adbe:	e8 8b c1 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001adc3:	83 c4 10             	add    esp,0x10
c001adc6:	85 db                	test   ebx,ebx
c001adc8:	74 2a                	je     c001adf4 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001adca:	85 f6                	test   esi,esi
c001adcc:	74 26                	je     c001adf4 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001adce:	89 d8                	mov    eax,ebx
c001add0:	b9 02 00 00 00       	mov    ecx,0x2
c001add5:	99                   	cdq    
c001add6:	83 ec 0c             	sub    esp,0xc
c001add9:	f7 f9                	idiv   ecx
c001addb:	83 e8 32             	sub    eax,0x32
c001adde:	50                   	push   eax
c001addf:	e8 99 bb fe ff       	call   c000697d <iso_total>
c001ade4:	83 c4 10             	add    esp,0x10
c001ade7:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c001adee:	89 06                	mov    DWORD PTR [esi],eax
c001adf0:	31 c0                	xor    eax,eax
c001adf2:	eb 05                	jmp    c001adf9 <ISO9660::stat(void*, unsigned long long*)+0x4d>
c001adf4:	b8 04 00 00 00       	mov    eax,0x4
c001adf9:	5a                   	pop    edx
c001adfa:	5b                   	pop    ebx
c001adfb:	5e                   	pop    esi
c001adfc:	c3                   	ret    
c001adfd:	90                   	nop

c001adfe <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001adfe:	55                   	push   ebp
c001adff:	57                   	push   edi
c001ae00:	56                   	push   esi
c001ae01:	53                   	push   ebx
c001ae02:	83 ec 18             	sub    esp,0x18
c001ae05:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001ae09:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001ae0d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001ae11:	68 21 32 02 c0       	push   0xc0023221
c001ae16:	e8 33 c1 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001ae1b:	83 c4 10             	add    esp,0x10
c001ae1e:	85 ff                	test   edi,edi
c001ae20:	0f 94 c0             	sete   al
c001ae23:	85 f6                	test   esi,esi
c001ae25:	0f 94 c2             	sete   dl
c001ae28:	09 d0                	or     eax,edx
c001ae2a:	a8 01                	test   al,0x1
c001ae2c:	0f 85 dd 00 00 00    	jne    c001af0f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001ae32:	85 db                	test   ebx,ebx
c001ae34:	0f 84 d5 00 00 00    	je     c001af0f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001ae3a:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001ae3d:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c001ae43:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001ae4a:	0f be 05 a0 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c8a0
c001ae51:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001ae53:	38 0d a0 c8 02 c0    	cmp    BYTE PTR ds:0xc002c8a0,cl
c001ae59:	74 1b                	je     c001ae76 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x78>
c001ae5b:	85 c0                	test   eax,eax
c001ae5d:	74 10                	je     c001ae6f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x71>
c001ae5f:	83 ec 0c             	sub    esp,0xc
c001ae62:	68 c5 31 02 c0       	push   0xc00231c5
c001ae67:	e8 ba 3d ff ff       	call   c000ec26 <KePanic(char const*)>
c001ae6c:	83 c4 10             	add    esp,0x10
c001ae6f:	8a 03                	mov    al,BYTE PTR [ebx]
c001ae71:	a2 a0 c8 02 c0       	mov    ds:0xc002c8a0,al
c001ae76:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001ae79:	8b 04 85 7c 96 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6984]
c001ae80:	85 c0                	test   eax,eax
c001ae82:	74 09                	je     c001ae8d <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8f>
c001ae84:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001ae8b:	74 51                	je     c001aede <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe0>
c001ae8d:	83 ec 0c             	sub    esp,0xc
c001ae90:	68 29 32 02 c0       	push   0xc0023229
c001ae95:	e8 b4 c0 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001ae9a:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001ae9d:	83 c4 10             	add    esp,0x10
c001aea0:	83 3c 85 7c 96 02 c0 00 	cmp    DWORD PTR [eax*4-0x3ffd6984],0x0
c001aea8:	74 21                	je     c001aecb <ISO9660::stat(char const*, unsigned long long*, bool*)+0xcd>
c001aeaa:	83 ec 0c             	sub    esp,0xc
c001aead:	68 49 32 02 c0       	push   0xc0023249
c001aeb2:	e8 97 c0 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001aeb7:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001aeba:	83 c4 10             	add    esp,0x10
c001aebd:	8b 04 85 7c 96 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6984]
c001aec4:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001aecb:	0f be 05 a0 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c8a0
c001aed2:	83 ec 0c             	sub    esp,0xc
c001aed5:	50                   	push   eax
c001aed6:	e8 6c bd fe ff       	call   c0006c47 <init_percd>
c001aedb:	83 c4 10             	add    esp,0x10
c001aede:	52                   	push   edx
c001aedf:	83 c3 03             	add    ebx,0x3
c001aee2:	52                   	push   edx
c001aee3:	6a 00                	push   0x0
c001aee5:	53                   	push   ebx
c001aee6:	e8 1f b8 fe ff       	call   c000670a <iso_open>
c001aeeb:	83 c4 10             	add    esp,0x10
c001aeee:	83 f8 ff             	cmp    eax,0xffffffff
c001aef1:	89 c5                	mov    ebp,eax
c001aef3:	75 21                	jne    c001af16 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x118>
c001aef5:	50                   	push   eax
c001aef6:	50                   	push   eax
c001aef7:	6a 01                	push   0x1
c001aef9:	53                   	push   ebx
c001aefa:	e8 0b b8 fe ff       	call   c000670a <iso_open>
c001aeff:	83 c4 10             	add    esp,0x10
c001af02:	ba 02 00 00 00       	mov    edx,0x2
c001af07:	40                   	inc    eax
c001af08:	74 2b                	je     c001af35 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001af0a:	c6 06 01             	mov    BYTE PTR [esi],0x1
c001af0d:	eb 24                	jmp    c001af33 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x135>
c001af0f:	ba 04 00 00 00       	mov    edx,0x4
c001af14:	eb 1f                	jmp    c001af35 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001af16:	83 ec 0c             	sub    esp,0xc
c001af19:	50                   	push   eax
c001af1a:	e8 5e ba fe ff       	call   c000697d <iso_total>
c001af1f:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001af26:	89 07                	mov    DWORD PTR [edi],eax
c001af28:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001af2b:	e8 64 b8 fe ff       	call   c0006794 <iso_close>
c001af30:	83 c4 10             	add    esp,0x10
c001af33:	31 d2                	xor    edx,edx
c001af35:	83 c4 0c             	add    esp,0xc
c001af38:	89 d0                	mov    eax,edx
c001af3a:	5b                   	pop    ebx
c001af3b:	5e                   	pop    esi
c001af3c:	5f                   	pop    edi
c001af3d:	5d                   	pop    ebp
c001af3e:	c3                   	ret    
c001af3f:	90                   	nop

c001af40 <ISO9660::close(void*)>:
c001af40:	83 ec 0c             	sub    esp,0xc
c001af43:	b8 04 00 00 00       	mov    eax,0x4
c001af48:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001af4c:	85 d2                	test   edx,edx
c001af4e:	74 1b                	je     c001af6b <ISO9660::close(void*)+0x2b>
c001af50:	89 d0                	mov    eax,edx
c001af52:	b9 02 00 00 00       	mov    ecx,0x2
c001af57:	99                   	cdq    
c001af58:	83 ec 0c             	sub    esp,0xc
c001af5b:	f7 f9                	idiv   ecx
c001af5d:	83 e8 32             	sub    eax,0x32
c001af60:	50                   	push   eax
c001af61:	e8 2e b8 fe ff       	call   c0006794 <iso_close>
c001af66:	83 c4 10             	add    esp,0x10
c001af69:	31 c0                	xor    eax,eax
c001af6b:	83 c4 0c             	add    esp,0xc
c001af6e:	c3                   	ret    
c001af6f:	90                   	nop

c001af70 <ISO9660::openDir(char const*, void**)>:
c001af70:	56                   	push   esi
c001af71:	53                   	push   ebx
c001af72:	50                   	push   eax
c001af73:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001af77:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001af7b:	85 db                	test   ebx,ebx
c001af7d:	0f 84 bd 00 00 00    	je     c001b040 <ISO9660::openDir(char const*, void**)+0xd0>
c001af83:	85 f6                	test   esi,esi
c001af85:	0f 84 b5 00 00 00    	je     c001b040 <ISO9660::openDir(char const*, void**)+0xd0>
c001af8b:	8a 13                	mov    dl,BYTE PTR [ebx]
c001af8d:	38 15 a0 c8 02 c0    	cmp    BYTE PTR ds:0xc002c8a0,dl
c001af93:	0f be 05 a0 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c8a0
c001af9a:	74 1b                	je     c001afb7 <ISO9660::openDir(char const*, void**)+0x47>
c001af9c:	85 c0                	test   eax,eax
c001af9e:	74 10                	je     c001afb0 <ISO9660::openDir(char const*, void**)+0x40>
c001afa0:	83 ec 0c             	sub    esp,0xc
c001afa3:	68 c5 31 02 c0       	push   0xc00231c5
c001afa8:	e8 79 3c ff ff       	call   c000ec26 <KePanic(char const*)>
c001afad:	83 c4 10             	add    esp,0x10
c001afb0:	8a 03                	mov    al,BYTE PTR [ebx]
c001afb2:	a2 a0 c8 02 c0       	mov    ds:0xc002c8a0,al
c001afb7:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001afba:	8b 04 85 7c 96 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6984]
c001afc1:	85 c0                	test   eax,eax
c001afc3:	74 10                	je     c001afd5 <ISO9660::openDir(char const*, void**)+0x65>
c001afc5:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001afcc:	74 1a                	je     c001afe8 <ISO9660::openDir(char const*, void**)+0x78>
c001afce:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001afd5:	0f be 05 a0 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c8a0
c001afdc:	83 ec 0c             	sub    esp,0xc
c001afdf:	50                   	push   eax
c001afe0:	e8 62 bc fe ff       	call   c0006c47 <init_percd>
c001afe5:	83 c4 10             	add    esp,0x10
c001afe8:	50                   	push   eax
c001afe9:	83 c3 03             	add    ebx,0x3
c001afec:	50                   	push   eax
c001afed:	6a 01                	push   0x1
c001afef:	53                   	push   ebx
c001aff0:	e8 15 b7 fe ff       	call   c000670a <iso_open>
c001aff5:	83 c4 10             	add    esp,0x10
c001aff8:	83 f8 ff             	cmp    eax,0xffffffff
c001affb:	89 c3                	mov    ebx,eax
c001affd:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c001b002:	75 1c                	jne    c001b020 <ISO9660::openDir(char const*, void**)+0xb0>
c001b004:	53                   	push   ebx
c001b005:	53                   	push   ebx
c001b006:	68 6d 32 02 c0       	push   0xc002326d
c001b00b:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001b011:	e8 a8 63 ff ff       	call   c00113be <VgaText::puts(char const*)>
c001b016:	83 c4 10             	add    esp,0x10
c001b019:	b8 01 00 00 00       	mov    eax,0x1
c001b01e:	eb 25                	jmp    c001b045 <ISO9660::openDir(char const*, void**)+0xd5>
c001b020:	51                   	push   ecx
c001b021:	01 db                	add    ebx,ebx
c001b023:	51                   	push   ecx
c001b024:	83 c3 65             	add    ebx,0x65
c001b027:	68 80 32 02 c0       	push   0xc0023280
c001b02c:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001b032:	e8 87 63 ff ff       	call   c00113be <VgaText::puts(char const*)>
c001b037:	83 c4 10             	add    esp,0x10
c001b03a:	31 c0                	xor    eax,eax
c001b03c:	89 1e                	mov    DWORD PTR [esi],ebx
c001b03e:	eb 05                	jmp    c001b045 <ISO9660::openDir(char const*, void**)+0xd5>
c001b040:	b8 04 00 00 00       	mov    eax,0x4
c001b045:	5a                   	pop    edx
c001b046:	5b                   	pop    ebx
c001b047:	5e                   	pop    esi
c001b048:	c3                   	ret    
c001b049:	90                   	nop

c001b04a <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001b04a:	55                   	push   ebp
c001b04b:	57                   	push   edi
c001b04c:	56                   	push   esi
c001b04d:	53                   	push   ebx
c001b04e:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001b054:	8b 9c 24 34 01 00 00 	mov    ebx,DWORD PTR [esp+0x134]
c001b05b:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c001b062:	8b ac 24 40 01 00 00 	mov    ebp,DWORD PTR [esp+0x140]
c001b069:	85 db                	test   ebx,ebx
c001b06b:	0f 84 e4 00 00 00    	je     c001b155 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10b>
c001b071:	85 ed                	test   ebp,ebp
c001b073:	0f 84 dc 00 00 00    	je     c001b155 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10b>
c001b079:	83 ec 0c             	sub    esp,0xc
c001b07c:	68 93 32 02 c0       	push   0xc0023293
c001b081:	e8 c8 be fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001b086:	89 d8                	mov    eax,ebx
c001b088:	b9 02 00 00 00       	mov    ecx,0x2
c001b08d:	99                   	cdq    
c001b08e:	f7 f9                	idiv   ecx
c001b090:	83 e8 32             	sub    eax,0x32
c001b093:	89 04 24             	mov    DWORD PTR [esp],eax
c001b096:	e8 34 b9 fe ff       	call   c00069cf <iso_readdir>
c001b09b:	83 c4 10             	add    esp,0x10
c001b09e:	85 c0                	test   eax,eax
c001b0a0:	89 c3                	mov    ebx,eax
c001b0a2:	75 38                	jne    c001b0dc <ISO9660::readDir(void*, unsigned long, void*, int*)+0x92>
c001b0a4:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c001b0a9:	53                   	push   ebx
c001b0aa:	53                   	push   ebx
c001b0ab:	68 9e 32 02 c0       	push   0xc002329e
c001b0b0:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001b0b6:	e8 03 63 ff ff       	call   c00113be <VgaText::puts(char const*)>
c001b0bb:	83 c4 0c             	add    esp,0xc
c001b0be:	68 10 01 00 00       	push   0x110
c001b0c3:	6a 00                	push   0x0
c001b0c5:	57                   	push   edi
c001b0c6:	e8 25 54 fe ff       	call   c00004f0 <memset>
c001b0cb:	83 c4 10             	add    esp,0x10
c001b0ce:	b8 01 00 00 00       	mov    eax,0x1
c001b0d3:	c7 45 00 00 00 00 00 	mov    DWORD PTR [ebp+0x0],0x0
c001b0da:	eb 7e                	jmp    c001b15a <ISO9660::readDir(void*, unsigned long, void*, int*)+0x110>
c001b0dc:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001b0e2:	8d 70 08             	lea    esi,[eax+0x8]
c001b0e5:	83 ec 0c             	sub    esp,0xc
c001b0e8:	56                   	push   esi
c001b0e9:	e8 92 54 fe ff       	call   c0000580 <strlen>
c001b0ee:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001b0f6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b0fa:	83 c4 10             	add    esp,0x10
c001b0fd:	83 7b 04 ff          	cmp    DWORD PTR [ebx+0x4],0xffffffff
c001b101:	75 0a                	jne    c001b10d <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc3>
c001b103:	83 3b ff             	cmp    DWORD PTR [ebx],0xffffffff
c001b106:	b8 02 00 00 00       	mov    eax,0x2
c001b10b:	74 05                	je     c001b112 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc8>
c001b10d:	b8 01 00 00 00       	mov    eax,0x1
c001b112:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b116:	50                   	push   eax
c001b117:	50                   	push   eax
c001b118:	56                   	push   esi
c001b119:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001b11d:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001b121:	50                   	push   eax
c001b122:	e8 29 55 fe ff       	call   c0000650 <strcpy>
c001b127:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001b12e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b130:	c7 45 00 10 01 00 00 	mov    DWORD PTR [ebp+0x0],0x110
c001b137:	5a                   	pop    edx
c001b138:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c001b13d:	59                   	pop    ecx
c001b13e:	68 b1 32 02 c0       	push   0xc00232b1
c001b143:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001b149:	e8 70 62 ff ff       	call   c00113be <VgaText::puts(char const*)>
c001b14e:	83 c4 10             	add    esp,0x10
c001b151:	31 c0                	xor    eax,eax
c001b153:	eb 05                	jmp    c001b15a <ISO9660::readDir(void*, unsigned long, void*, int*)+0x110>
c001b155:	b8 04 00 00 00       	mov    eax,0x4
c001b15a:	81 c4 1c 01 00 00    	add    esp,0x11c
c001b160:	5b                   	pop    ebx
c001b161:	5e                   	pop    esi
c001b162:	5f                   	pop    edi
c001b163:	5d                   	pop    ebp
c001b164:	c3                   	ret    

c001b165 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001b165:	57                   	push   edi
c001b166:	56                   	push   esi
c001b167:	53                   	push   ebx
c001b168:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b16c:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001b170:	39 35 a4 c8 02 c0    	cmp    DWORD PTR ds:0xc002c8a4,esi
c001b176:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001b17a:	0f be cb             	movsx  ecx,bl
c001b17d:	75 0b                	jne    c001b18a <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x25>
c001b17f:	0f be 05 a4 44 02 c0 	movsx  eax,BYTE PTR ds:0xc00244a4
c001b186:	39 c8                	cmp    eax,ecx
c001b188:	74 47                	je     c001b1d1 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001b18a:	83 ec 0c             	sub    esp,0xc
c001b18d:	31 d2                	xor    edx,edx
c001b18f:	68 c0 c8 02 c0       	push   0xc002c8c0
c001b194:	6a 01                	push   0x1
c001b196:	52                   	push   edx
c001b197:	56                   	push   esi
c001b198:	ff 34 8d 7c 96 02 c0 	push   DWORD PTR [ecx*4-0x3ffd6984]
c001b19f:	e8 3c ef fe ff       	call   c000a0e0 <LogicalDisk::read(unsigned long long, int, void*)>
c001b1a4:	83 c4 20             	add    esp,0x20
c001b1a7:	85 c0                	test   eax,eax
c001b1a9:	75 0e                	jne    c001b1b9 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x54>
c001b1ab:	89 35 a4 c8 02 c0    	mov    DWORD PTR ds:0xc002c8a4,esi
c001b1b1:	88 1d a4 44 02 c0    	mov    BYTE PTR ds:0xc00244a4,bl
c001b1b7:	eb 18                	jmp    c001b1d1 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001b1b9:	50                   	push   eax
c001b1ba:	68 00 08 00 00       	push   0x800
c001b1bf:	6a 00                	push   0x0
c001b1c1:	57                   	push   edi
c001b1c2:	e8 29 53 fe ff       	call   c00004f0 <memset>
c001b1c7:	83 c4 10             	add    esp,0x10
c001b1ca:	b8 01 00 00 00       	mov    eax,0x1
c001b1cf:	eb 0e                	jmp    c001b1df <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x7a>
c001b1d1:	be c0 c8 02 c0       	mov    esi,0xc002c8c0
c001b1d6:	b9 00 08 00 00       	mov    ecx,0x800
c001b1db:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b1dd:	31 c0                	xor    eax,eax
c001b1df:	5b                   	pop    ebx
c001b1e0:	5e                   	pop    esi
c001b1e1:	5f                   	pop    edi
c001b1e2:	c3                   	ret    
c001b1e3:	90                   	nop

c001b1e4 <ISO9660::tryMount(LogicalDisk*, int)>:
c001b1e4:	53                   	push   ebx
c001b1e5:	81 ec 0c 08 00 00    	sub    esp,0x80c
c001b1eb:	c7 05 a4 c8 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc002c8a4,0xdeadbeef
c001b1f5:	8b 84 24 1c 08 00 00 	mov    eax,DWORD PTR [esp+0x81c]
c001b1fc:	8d 58 41             	lea    ebx,[eax+0x41]
c001b1ff:	0f be db             	movsx  ebx,bl
c001b202:	53                   	push   ebx
c001b203:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b207:	50                   	push   eax
c001b208:	6a 10                	push   0x10
c001b20a:	e8 56 ff ff ff       	call   c001b165 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b20f:	83 c4 10             	add    esp,0x10
c001b212:	31 d2                	xor    edx,edx
c001b214:	85 c0                	test   eax,eax
c001b216:	75 33                	jne    c001b24b <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001b218:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001b21d:	75 2c                	jne    c001b24b <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001b21f:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001b224:	75 25                	jne    c001b24b <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001b226:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001b22b:	75 1e                	jne    c001b24b <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001b22d:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001b232:	75 17                	jne    c001b24b <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001b234:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001b239:	75 10                	jne    c001b24b <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001b23b:	83 ec 0c             	sub    esp,0xc
c001b23e:	53                   	push   ebx
c001b23f:	e8 03 ba fe ff       	call   c0006c47 <init_percd>
c001b244:	83 c4 10             	add    esp,0x10
c001b247:	40                   	inc    eax
c001b248:	0f 95 c2             	setne  dl
c001b24b:	81 c4 08 08 00 00    	add    esp,0x808
c001b251:	88 d0                	mov    al,dl
c001b253:	5b                   	pop    ebx
c001b254:	c3                   	ret    
c001b255:	90                   	nop

c001b256 <ISO9660::ISO9660()>:
c001b256:	83 ec 0c             	sub    esp,0xc
c001b259:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b25d:	83 ec 0c             	sub    esp,0xc
c001b260:	50                   	push   eax
c001b261:	e8 f0 ca fe ff       	call   c0007d56 <Filesystem::Filesystem()>
c001b266:	83 c4 10             	add    esp,0x10
c001b269:	ba cc 32 02 c0       	mov    edx,0xc00232cc
c001b26e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b272:	89 10                	mov    DWORD PTR [eax],edx
c001b274:	e8 e0 ba fe ff       	call   c0006d59 <fs_iso9660_init>
c001b279:	90                   	nop
c001b27a:	83 c4 0c             	add    esp,0xc
c001b27d:	c3                   	ret    

c001b27e <SoundCard::beginPlayback()>:
c001b27e:	c7 44 24 04 30 33 02 c0 	mov    DWORD PTR [esp+0x4],0xc0023330
c001b286:	e9 9b 39 ff ff       	jmp    c000ec26 <KePanic(char const*)>
c001b28b:	90                   	nop

c001b28c <SoundCard::stopPlayback()>:
c001b28c:	c7 44 24 04 30 33 02 c0 	mov    DWORD PTR [esp+0x4],0xc0023330
c001b294:	e9 8d 39 ff ff       	jmp    c000ec26 <KePanic(char const*)>
c001b299:	90                   	nop

c001b29a <SoundCard::SoundCard(char const*)>:
c001b29a:	83 ec 1c             	sub    esp,0x1c
c001b29d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b2a1:	83 ec 08             	sub    esp,0x8
c001b2a4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b2a8:	50                   	push   eax
c001b2a9:	e8 f6 de fe ff       	call   c00091a4 <Device::Device(char const*)>
c001b2ae:	83 c4 10             	add    esp,0x10
c001b2b1:	ba 7c 33 02 c0       	mov    edx,0xc002337c
c001b2b6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b2ba:	89 10                	mov    DWORD PTR [eax],edx
c001b2bc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b2c0:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001b2c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b2cb:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c001b2d5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b2d9:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c001b2e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b2e7:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c001b2f1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b2f5:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001b2ff:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b307:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001b30c:	7f 1a                	jg     c001b328 <SoundCard::SoundCard(char const*)+0x8e>
c001b30e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b312:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b316:	83 c2 54             	add    edx,0x54
c001b319:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001b321:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001b326:	eb df                	jmp    c001b307 <SoundCard::SoundCard(char const*)+0x6d>
c001b328:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b32c:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001b333:	90                   	nop
c001b334:	83 c4 1c             	add    esp,0x1c
c001b337:	c3                   	ret    

c001b338 <SoundCard::~SoundCard()>:
c001b338:	83 ec 0c             	sub    esp,0xc
c001b33b:	ba 7c 33 02 c0       	mov    edx,0xc002337c
c001b340:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b344:	89 10                	mov    DWORD PTR [eax],edx
c001b346:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b34a:	83 ec 0c             	sub    esp,0xc
c001b34d:	50                   	push   eax
c001b34e:	e8 f1 db fe ff       	call   c0008f44 <Device::~Device()>
c001b353:	83 c4 10             	add    esp,0x10
c001b356:	90                   	nop
c001b357:	83 c4 0c             	add    esp,0xc
c001b35a:	c3                   	ret    
c001b35b:	90                   	nop

c001b35c <SoundCard::~SoundCard()>:
c001b35c:	83 ec 0c             	sub    esp,0xc
c001b35f:	83 ec 0c             	sub    esp,0xc
c001b362:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b366:	e8 cd ff ff ff       	call   c001b338 <SoundCard::~SoundCard()>
c001b36b:	83 c4 10             	add    esp,0x10
c001b36e:	83 ec 08             	sub    esp,0x8
c001b371:	68 e8 01 00 00       	push   0x1e8
c001b376:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b37a:	e8 e4 12 ff ff       	call   c000c663 <operator delete(void*, unsigned long)>
c001b37f:	83 c4 10             	add    esp,0x10
c001b382:	83 c4 0c             	add    esp,0xc
c001b385:	c3                   	ret    

c001b386 <SoundCard::configureRates(int, int, int)>:
c001b386:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001b38a:	31 c0                	xor    eax,eax
c001b38c:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c001b393:	75 20                	jne    c001b3b5 <SoundCard::configureRates(int, int, int)+0x2f>
c001b395:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b399:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c001b39f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b3a3:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c001b3a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b3ad:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c001b3b3:	b0 01                	mov    al,0x1
c001b3b5:	c3                   	ret    

c001b3b6 <SoundCard::getSamples16(int, short*)>:
c001b3b6:	55                   	push   ebp
c001b3b7:	57                   	push   edi
c001b3b8:	31 ff                	xor    edi,edi
c001b3ba:	56                   	push   esi
c001b3bb:	53                   	push   ebx
c001b3bc:	31 db                	xor    ebx,ebx
c001b3be:	83 ec 10             	sub    esp,0x10
c001b3c1:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001b3c5:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001b3c9:	8d 04 36             	lea    eax,[esi+esi*1]
c001b3cc:	50                   	push   eax
c001b3cd:	6a 00                	push   0x0
c001b3cf:	55                   	push   ebp
c001b3d0:	e8 1b 51 fe ff       	call   c00004f0 <memset>
c001b3d5:	83 c4 10             	add    esp,0x10
c001b3d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b3dc:	8b 84 b8 58 01 00 00 	mov    eax,DWORD PTR [eax+edi*4+0x158]
c001b3e3:	85 c0                	test   eax,eax
c001b3e5:	74 1a                	je     c001b401 <SoundCard::getSamples16(int, short*)+0x4b>
c001b3e7:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001b3eb:	75 14                	jne    c001b401 <SoundCard::getSamples16(int, short*)+0x4b>
c001b3ed:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001b3f1:	55                   	push   ebp
c001b3f2:	56                   	push   esi
c001b3f3:	50                   	push   eax
c001b3f4:	e8 f3 02 00 00       	call   c001b6ec <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c001b3f9:	83 c4 10             	add    esp,0x10
c001b3fc:	39 c3                	cmp    ebx,eax
c001b3fe:	0f 4c d8             	cmovl  ebx,eax
c001b401:	47                   	inc    edi
c001b402:	83 ff 20             	cmp    edi,0x20
c001b405:	75 d1                	jne    c001b3d8 <SoundCard::getSamples16(int, short*)+0x22>
c001b407:	83 c4 0c             	add    esp,0xc
c001b40a:	89 d8                	mov    eax,ebx
c001b40c:	5b                   	pop    ebx
c001b40d:	5e                   	pop    esi
c001b40e:	5f                   	pop    edi
c001b40f:	5d                   	pop    ebp
c001b410:	c3                   	ret    
c001b411:	90                   	nop

c001b412 <SoundCard::getSamples32(int, int*)>:
c001b412:	55                   	push   ebp
c001b413:	57                   	push   edi
c001b414:	31 ff                	xor    edi,edi
c001b416:	56                   	push   esi
c001b417:	31 f6                	xor    esi,esi
c001b419:	53                   	push   ebx
c001b41a:	83 ec 10             	sub    esp,0x10
c001b41d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b421:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001b425:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001b429:	c1 e0 02             	shl    eax,0x2
c001b42c:	50                   	push   eax
c001b42d:	6a 00                	push   0x0
c001b42f:	55                   	push   ebp
c001b430:	e8 bb 50 fe ff       	call   c00004f0 <memset>
c001b435:	83 c4 10             	add    esp,0x10
c001b438:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c001b43f:	85 c0                	test   eax,eax
c001b441:	74 1a                	je     c001b45d <SoundCard::getSamples32(int, int*)+0x4b>
c001b443:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001b447:	75 14                	jne    c001b45d <SoundCard::getSamples32(int, int*)+0x4b>
c001b449:	53                   	push   ebx
c001b44a:	55                   	push   ebp
c001b44b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b44f:	50                   	push   eax
c001b450:	e8 67 03 00 00       	call   c001b7bc <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001b455:	83 c4 10             	add    esp,0x10
c001b458:	39 c6                	cmp    esi,eax
c001b45a:	0f 4c f0             	cmovl  esi,eax
c001b45d:	47                   	inc    edi
c001b45e:	83 ff 20             	cmp    edi,0x20
c001b461:	75 d5                	jne    c001b438 <SoundCard::getSamples32(int, int*)+0x26>
c001b463:	85 f6                	test   esi,esi
c001b465:	0f b6 83 d8 01 00 00 	movzx  eax,BYTE PTR [ebx+0x1d8]
c001b46c:	75 0f                	jne    c001b47d <SoundCard::getSamples32(int, int*)+0x6b>
c001b46e:	85 c0                	test   eax,eax
c001b470:	74 1b                	je     c001b48d <SoundCard::getSamples32(int, int*)+0x7b>
c001b472:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b474:	83 ec 0c             	sub    esp,0xc
c001b477:	53                   	push   ebx
c001b478:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001b47b:	eb 0d                	jmp    c001b48a <SoundCard::getSamples32(int, int*)+0x78>
c001b47d:	85 c0                	test   eax,eax
c001b47f:	75 0c                	jne    c001b48d <SoundCard::getSamples32(int, int*)+0x7b>
c001b481:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b483:	83 ec 0c             	sub    esp,0xc
c001b486:	53                   	push   ebx
c001b487:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001b48a:	83 c4 10             	add    esp,0x10
c001b48d:	83 c4 0c             	add    esp,0xc
c001b490:	89 f0                	mov    eax,esi
c001b492:	5b                   	pop    ebx
c001b493:	5e                   	pop    esi
c001b494:	5f                   	pop    edi
c001b495:	5d                   	pop    ebp
c001b496:	c3                   	ret    
c001b497:	90                   	nop

c001b498 <SoundCard::addChannel(SoundPort*)>:
c001b498:	83 ec 0c             	sub    esp,0xc
c001b49b:	31 c0                	xor    eax,eax
c001b49d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b4a1:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c001b4a9:	74 1b                	je     c001b4c6 <SoundCard::addChannel(SoundPort*)+0x2e>
c001b4ab:	40                   	inc    eax
c001b4ac:	83 f8 20             	cmp    eax,0x20
c001b4af:	75 f0                	jne    c001b4a1 <SoundCard::addChannel(SoundPort*)+0x9>
c001b4b1:	83 ec 0c             	sub    esp,0xc
c001b4b4:	68 55 33 02 c0       	push   0xc0023355
c001b4b9:	e8 68 37 ff ff       	call   c000ec26 <KePanic(char const*)>
c001b4be:	83 c4 10             	add    esp,0x10
c001b4c1:	83 c8 ff             	or     eax,0xffffffff
c001b4c4:	eb 0b                	jmp    c001b4d1 <SoundCard::addChannel(SoundPort*)+0x39>
c001b4c6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001b4ca:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c001b4d1:	83 c4 0c             	add    esp,0xc
c001b4d4:	c3                   	ret    
c001b4d5:	90                   	nop

c001b4d6 <SoundCard::removeChannel(int)>:
c001b4d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b4da:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b4de:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001b4e9:	c3                   	ret    
c001b4ea:	66 90                	xchg   ax,ax

c001b4ec <SoundPort::SoundPort(int, int, int, int)>:
c001b4ec:	83 ec 0c             	sub    esp,0xc
c001b4ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b4f3:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001b4fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b4fe:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001b502:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b506:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b50a:	89 10                	mov    DWORD PTR [eax],edx
c001b50c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b510:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b514:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001b517:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b51b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b51f:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001b522:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001b527:	75 13                	jne    c001b53c <SoundPort::SoundPort(int, int, int, int)+0x50>
c001b529:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b52d:	8b 00                	mov    eax,DWORD PTR [eax]
c001b52f:	05 a0 0f 00 00       	add    eax,0xfa0
c001b534:	d1 e0                	shl    eax,1
c001b536:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001b53a:	66 90                	xchg   ax,ax
c001b53c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b540:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001b544:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001b547:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b54b:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001b552:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b556:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001b559:	c1 e0 02             	shl    eax,0x2
c001b55c:	83 ec 0c             	sub    esp,0xc
c001b55f:	50                   	push   eax
c001b560:	e8 6b 33 ff ff       	call   c000e8d0 <malloc>
c001b565:	83 c4 10             	add    esp,0x10
c001b568:	89 c2                	mov    edx,eax
c001b56a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b56e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001b571:	90                   	nop
c001b572:	83 c4 0c             	add    esp,0xc
c001b575:	c3                   	ret    
c001b576:	66 90                	xchg   ax,ax

c001b578 <SoundPort::~SoundPort()>:
c001b578:	83 ec 0c             	sub    esp,0xc
c001b57b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b57f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001b582:	85 c0                	test   eax,eax
c001b584:	74 1e                	je     c001b5a4 <SoundPort::~SoundPort()+0x2c>
c001b586:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b58a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001b58d:	83 ec 0c             	sub    esp,0xc
c001b590:	50                   	push   eax
c001b591:	e8 4a 33 ff ff       	call   c000e8e0 <free>
c001b596:	83 c4 10             	add    esp,0x10
c001b599:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b59d:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001b5a4:	90                   	nop
c001b5a5:	83 c4 0c             	add    esp,0xc
c001b5a8:	c3                   	ret    
c001b5a9:	90                   	nop
c001b5aa:	66 90                	xchg   ax,ax

c001b5ac <SoundPort::unpause()>:
c001b5ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b5b0:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c001b5b4:	c3                   	ret    
c001b5b5:	90                   	nop
c001b5b6:	66 90                	xchg   ax,ax

c001b5b8 <SoundPort::pause()>:
c001b5b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b5bc:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001b5c0:	c3                   	ret    
c001b5c1:	90                   	nop
c001b5c2:	66 90                	xchg   ax,ax

c001b5c4 <SoundPort::getBufferUsed()>:
c001b5c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b5c8:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001b5cb:	c3                   	ret    

c001b5cc <SoundPort::getBufferSize()>:
c001b5cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b5d0:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001b5d3:	c3                   	ret    

c001b5d4 <SoundPort::buffer16(short*, int)>:
c001b5d4:	55                   	push   ebp
c001b5d5:	57                   	push   edi
c001b5d6:	56                   	push   esi
c001b5d7:	53                   	push   ebx
c001b5d8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b5dc:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c001b5e0:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001b5e3:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001b5e6:	74 68                	je     c001b650 <SoundPort::buffer16(short*, int)+0x7c>
c001b5e8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001b5ec:	85 c9                	test   ecx,ecx
c001b5ee:	7e 60                	jle    c001b650 <SoundPort::buffer16(short*, int)+0x7c>
c001b5f0:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c001b5f4:	8d 70 01             	lea    esi,[eax+0x1]
c001b5f7:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001b5fa:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001b5fd:	c1 e1 0f             	shl    ecx,0xf
c001b600:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001b603:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001b606:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001b609:	74 4d                	je     c001b658 <SoundPort::buffer16(short*, int)+0x84>
c001b60b:	31 f6                	xor    esi,esi
c001b60d:	eb 21                	jmp    c001b630 <SoundPort::buffer16(short*, int)+0x5c>
c001b60f:	90                   	nop
c001b610:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c001b615:	8d 79 01             	lea    edi,[ecx+0x1]
c001b618:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c001b61b:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c001b61e:	c1 e3 0f             	shl    ebx,0xf
c001b621:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c001b624:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001b627:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001b62a:	74 1c                	je     c001b648 <SoundPort::buffer16(short*, int)+0x74>
c001b62c:	89 c6                	mov    esi,eax
c001b62e:	66 90                	xchg   ax,ax
c001b630:	8d 46 01             	lea    eax,[esi+0x1]
c001b633:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c001b637:	75 d7                	jne    c001b610 <SoundPort::buffer16(short*, int)+0x3c>
c001b639:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b63d:	8d 76 00             	lea    esi,[esi+0x0]
c001b640:	5b                   	pop    ebx
c001b641:	5e                   	pop    esi
c001b642:	5f                   	pop    edi
c001b643:	5d                   	pop    ebp
c001b644:	c3                   	ret    
c001b645:	8d 76 00             	lea    esi,[esi+0x0]
c001b648:	5b                   	pop    ebx
c001b649:	8d 46 02             	lea    eax,[esi+0x2]
c001b64c:	5e                   	pop    esi
c001b64d:	5f                   	pop    edi
c001b64e:	5d                   	pop    ebp
c001b64f:	c3                   	ret    
c001b650:	5b                   	pop    ebx
c001b651:	31 c0                	xor    eax,eax
c001b653:	5e                   	pop    esi
c001b654:	5f                   	pop    edi
c001b655:	5d                   	pop    ebp
c001b656:	c3                   	ret    
c001b657:	90                   	nop
c001b658:	b8 01 00 00 00       	mov    eax,0x1
c001b65d:	eb e1                	jmp    c001b640 <SoundPort::buffer16(short*, int)+0x6c>
c001b65f:	90                   	nop

c001b660 <SoundPort::buffer32(int*, int)>:
c001b660:	55                   	push   ebp
c001b661:	57                   	push   edi
c001b662:	56                   	push   esi
c001b663:	53                   	push   ebx
c001b664:	83 ec 04             	sub    esp,0x4
c001b667:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b66b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b66f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001b673:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001b676:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001b679:	89 04 24             	mov    DWORD PTR [esp],eax
c001b67c:	74 5a                	je     c001b6d8 <SoundPort::buffer32(int*, int)+0x78>
c001b67e:	85 c0                	test   eax,eax
c001b680:	7e 56                	jle    c001b6d8 <SoundPort::buffer32(int*, int)+0x78>
c001b682:	8d 71 01             	lea    esi,[ecx+0x1]
c001b685:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001b688:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001b68b:	8b 37                	mov    esi,DWORD PTR [edi]
c001b68d:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001b690:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001b693:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001b696:	74 4c                	je     c001b6e4 <SoundPort::buffer32(int*, int)+0x84>
c001b698:	31 f6                	xor    esi,esi
c001b69a:	eb 1c                	jmp    c001b6b8 <SoundPort::buffer32(int*, int)+0x58>
c001b69c:	8d 69 01             	lea    ebp,[ecx+0x1]
c001b69f:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001b6a2:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c001b6a5:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001b6a8:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001b6ac:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001b6af:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001b6b2:	74 18                	je     c001b6cc <SoundPort::buffer32(int*, int)+0x6c>
c001b6b4:	89 de                	mov    esi,ebx
c001b6b6:	66 90                	xchg   ax,ax
c001b6b8:	8d 5e 01             	lea    ebx,[esi+0x1]
c001b6bb:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c001b6be:	75 dc                	jne    c001b69c <SoundPort::buffer32(int*, int)+0x3c>
c001b6c0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001b6c3:	90                   	nop
c001b6c4:	83 c4 04             	add    esp,0x4
c001b6c7:	5b                   	pop    ebx
c001b6c8:	5e                   	pop    esi
c001b6c9:	5f                   	pop    edi
c001b6ca:	5d                   	pop    ebp
c001b6cb:	c3                   	ret    
c001b6cc:	8d 46 02             	lea    eax,[esi+0x2]
c001b6cf:	83 c4 04             	add    esp,0x4
c001b6d2:	5b                   	pop    ebx
c001b6d3:	5e                   	pop    esi
c001b6d4:	5f                   	pop    edi
c001b6d5:	5d                   	pop    ebp
c001b6d6:	c3                   	ret    
c001b6d7:	90                   	nop
c001b6d8:	83 c4 04             	add    esp,0x4
c001b6db:	31 c0                	xor    eax,eax
c001b6dd:	5b                   	pop    ebx
c001b6de:	5e                   	pop    esi
c001b6df:	5f                   	pop    edi
c001b6e0:	5d                   	pop    ebp
c001b6e1:	c3                   	ret    
c001b6e2:	66 90                	xchg   ax,ax
c001b6e4:	b8 01 00 00 00       	mov    eax,0x1
c001b6e9:	eb d9                	jmp    c001b6c4 <SoundPort::buffer32(int*, int)+0x64>
c001b6eb:	90                   	nop

c001b6ec <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c001b6ec:	55                   	push   ebp
c001b6ed:	57                   	push   edi
c001b6ee:	56                   	push   esi
c001b6ef:	53                   	push   ebx
c001b6f0:	83 ec 0c             	sub    esp,0xc
c001b6f3:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001b6f7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b6fb:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001b6ff:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001b703:	8b 85 e0 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e0]
c001b709:	39 03                	cmp    DWORD PTR [ebx],eax
c001b70b:	74 13                	je     c001b720 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x34>
c001b70d:	83 ec 0c             	sub    esp,0xc
c001b710:	68 a8 33 02 c0       	push   0xc00233a8
c001b715:	e8 0c 35 ff ff       	call   c000ec26 <KePanic(char const*)>
c001b71a:	83 c4 10             	add    esp,0x10
c001b71d:	8d 76 00             	lea    esi,[esi+0x0]
c001b720:	8b 85 dc 01 00 00    	mov    eax,DWORD PTR [ebp+0x1dc]
c001b726:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001b729:	74 11                	je     c001b73c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x50>
c001b72b:	83 ec 0c             	sub    esp,0xc
c001b72e:	68 e7 33 02 c0       	push   0xc00233e7
c001b733:	e8 ee 34 ff ff       	call   c000ec26 <KePanic(char const*)>
c001b738:	83 c4 10             	add    esp,0x10
c001b73b:	90                   	nop
c001b73c:	8b 85 e4 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e4]
c001b742:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001b745:	74 11                	je     c001b758 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x6c>
c001b747:	83 ec 0c             	sub    esp,0xc
c001b74a:	68 e7 33 02 c0       	push   0xc00233e7
c001b74f:	e8 d2 34 ff ff       	call   c000ec26 <KePanic(char const*)>
c001b754:	83 c4 10             	add    esp,0x10
c001b757:	90                   	nop
c001b758:	39 73 14             	cmp    DWORD PTR [ebx+0x14],esi
c001b75b:	0f 4e 73 14          	cmovle esi,DWORD PTR [ebx+0x14]
c001b75f:	85 f6                	test   esi,esi
c001b761:	7e 2d                	jle    c001b790 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa4>
c001b763:	31 c0                	xor    eax,eax
c001b765:	8d 76 00             	lea    esi,[esi+0x0]
c001b768:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001b76b:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c001b76e:	8d 91 ff 7f 00 00    	lea    edx,[ecx+0x7fff]
c001b774:	85 c9                	test   ecx,ecx
c001b776:	0f 49 d1             	cmovns edx,ecx
c001b779:	66 8b 0c 47          	mov    cx,WORD PTR [edi+eax*2]
c001b77d:	c1 fa 0f             	sar    edx,0xf
c001b780:	01 d1                	add    ecx,edx
c001b782:	66 89 0c 47          	mov    WORD PTR [edi+eax*2],cx
c001b786:	83 c0 01             	add    eax,0x1
c001b789:	39 f0                	cmp    eax,esi
c001b78b:	75 db                	jne    c001b768 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x7c>
c001b78d:	8d 76 00             	lea    esi,[esi+0x0]
c001b790:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001b793:	83 ec 04             	sub    esp,0x4
c001b796:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001b799:	29 f0                	sub    eax,esi
c001b79b:	c1 e0 02             	shl    eax,0x2
c001b79e:	50                   	push   eax
c001b79f:	8d 04 b2             	lea    eax,[edx+esi*4]
c001b7a2:	50                   	push   eax
c001b7a3:	52                   	push   edx
c001b7a4:	e8 27 4c fe ff       	call   c00003d0 <memmove>
c001b7a9:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001b7ac:	29 f0                	sub    eax,esi
c001b7ae:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001b7b1:	83 c4 1c             	add    esp,0x1c
c001b7b4:	89 f0                	mov    eax,esi
c001b7b6:	5b                   	pop    ebx
c001b7b7:	5e                   	pop    esi
c001b7b8:	5f                   	pop    edi
c001b7b9:	5d                   	pop    ebp
c001b7ba:	c3                   	ret    
c001b7bb:	90                   	nop

c001b7bc <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c001b7bc:	55                   	push   ebp
c001b7bd:	57                   	push   edi
c001b7be:	56                   	push   esi
c001b7bf:	53                   	push   ebx
c001b7c0:	83 ec 0c             	sub    esp,0xc
c001b7c3:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001b7c7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b7cb:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001b7cf:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001b7d3:	8b 85 e0 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e0]
c001b7d9:	39 03                	cmp    DWORD PTR [ebx],eax
c001b7db:	74 13                	je     c001b7f0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x34>
c001b7dd:	83 ec 0c             	sub    esp,0xc
c001b7e0:	68 c8 33 02 c0       	push   0xc00233c8
c001b7e5:	e8 3c 34 ff ff       	call   c000ec26 <KePanic(char const*)>
c001b7ea:	83 c4 10             	add    esp,0x10
c001b7ed:	8d 76 00             	lea    esi,[esi+0x0]
c001b7f0:	8b 85 dc 01 00 00    	mov    eax,DWORD PTR [ebp+0x1dc]
c001b7f6:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001b7f9:	74 11                	je     c001b80c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x50>
c001b7fb:	83 ec 0c             	sub    esp,0xc
c001b7fe:	68 03 34 02 c0       	push   0xc0023403
c001b803:	e8 1e 34 ff ff       	call   c000ec26 <KePanic(char const*)>
c001b808:	83 c4 10             	add    esp,0x10
c001b80b:	90                   	nop
c001b80c:	8b 85 e4 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e4]
c001b812:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001b815:	74 11                	je     c001b828 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x6c>
c001b817:	83 ec 0c             	sub    esp,0xc
c001b81a:	68 03 34 02 c0       	push   0xc0023403
c001b81f:	e8 02 34 ff ff       	call   c000ec26 <KePanic(char const*)>
c001b824:	83 c4 10             	add    esp,0x10
c001b827:	90                   	nop
c001b828:	39 7b 14             	cmp    DWORD PTR [ebx+0x14],edi
c001b82b:	0f 4e 7b 14          	cmovle edi,DWORD PTR [ebx+0x14]
c001b82f:	85 ff                	test   edi,edi
c001b831:	7e 21                	jle    c001b854 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x98>
c001b833:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c001b83a:	31 c0                	xor    eax,eax
c001b83c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001b83f:	8b 2c 06             	mov    ebp,DWORD PTR [esi+eax*1]
c001b842:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001b845:	01 d5                	add    ebp,edx
c001b847:	89 2c 06             	mov    DWORD PTR [esi+eax*1],ebp
c001b84a:	83 c0 04             	add    eax,0x4
c001b84d:	39 c1                	cmp    ecx,eax
c001b84f:	75 eb                	jne    c001b83c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x80>
c001b851:	8d 76 00             	lea    esi,[esi+0x0]
c001b854:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001b857:	83 ec 04             	sub    esp,0x4
c001b85a:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001b85d:	29 f8                	sub    eax,edi
c001b85f:	c1 e0 02             	shl    eax,0x2
c001b862:	50                   	push   eax
c001b863:	8d 04 ba             	lea    eax,[edx+edi*4]
c001b866:	50                   	push   eax
c001b867:	52                   	push   edx
c001b868:	e8 63 4b fe ff       	call   c00003d0 <memmove>
c001b86d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001b870:	29 f8                	sub    eax,edi
c001b872:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001b875:	83 c4 1c             	add    esp,0x1c
c001b878:	89 f8                	mov    eax,edi
c001b87a:	5b                   	pop    ebx
c001b87b:	5e                   	pop    esi
c001b87c:	5f                   	pop    edi
c001b87d:	5d                   	pop    ebp
c001b87e:	c3                   	ret    
c001b87f:	90                   	nop

c001b880 <PCI::open(int, int, void*)>:
c001b880:	83 ec 18             	sub    esp,0x18
c001b883:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b887:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001b88b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001b891:	8b 10                	mov    edx,DWORD PTR [eax]
c001b893:	50                   	push   eax
c001b894:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001b897:	31 c0                	xor    eax,eax
c001b899:	83 c4 1c             	add    esp,0x1c
c001b89c:	c3                   	ret    
c001b89d:	90                   	nop

c001b89e <PCI::close(int, int, void*)>:
c001b89e:	31 c0                	xor    eax,eax
c001b8a0:	c3                   	ret    
c001b8a1:	90                   	nop

c001b8a2 <PCI::PCI()>:
c001b8a2:	83 ec 0c             	sub    esp,0xc
c001b8a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b8a9:	83 ec 08             	sub    esp,0x8
c001b8ac:	68 1f 34 02 c0       	push   0xc002341f
c001b8b1:	50                   	push   eax
c001b8b2:	e8 31 d0 fe ff       	call   c00088e8 <Bus::Bus(char const*)>
c001b8b7:	83 c4 10             	add    esp,0x10
c001b8ba:	ba 2c 35 02 c0       	mov    edx,0xc002352c
c001b8bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b8c3:	89 10                	mov    DWORD PTR [eax],edx
c001b8c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b8c9:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001b8d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b8d7:	a3 c0 d0 02 c0       	mov    ds:0xc002d0c0,eax
c001b8dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b8e0:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b8e6:	0f b6 d0             	movzx  edx,al
c001b8e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b8ed:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001b8f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b8f8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b8fe:	0f b6 d0             	movzx  edx,al
c001b901:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b905:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001b90a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b90e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b914:	8d 50 01             	lea    edx,[eax+0x1]
c001b917:	88 d1                	mov    cl,dl
c001b919:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b91d:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001b923:	0f b6 d0             	movzx  edx,al
c001b926:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b92a:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001b92e:	83 c9 c0             	or     ecx,0xffffffc0
c001b931:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001b935:	90                   	nop
c001b936:	83 c4 0c             	add    esp,0xc
c001b939:	c3                   	ret    

c001b93a <PCI::readBAR8(unsigned int, int)>:
c001b93a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b93e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b942:	f6 c2 01             	test   dl,0x1
c001b945:	74 07                	je     c001b94e <PCI::readBAR8(unsigned int, int)+0x14>
c001b947:	83 e2 fc             	and    edx,0xfffffffc
c001b94a:	01 c2                	add    edx,eax
c001b94c:	ec                   	in     al,dx
c001b94d:	c3                   	ret    
c001b94e:	83 e2 f0             	and    edx,0xfffffff0
c001b951:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001b954:	c3                   	ret    
c001b955:	90                   	nop

c001b956 <PCI::readBAR16(unsigned int, int)>:
c001b956:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b95a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b95e:	f6 c2 01             	test   dl,0x1
c001b961:	74 08                	je     c001b96b <PCI::readBAR16(unsigned int, int)+0x15>
c001b963:	83 e2 fc             	and    edx,0xfffffffc
c001b966:	01 c2                	add    edx,eax
c001b968:	66 ed                	in     ax,dx
c001b96a:	c3                   	ret    
c001b96b:	83 e2 f0             	and    edx,0xfffffff0
c001b96e:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001b972:	c3                   	ret    
c001b973:	90                   	nop

c001b974 <PCI::readBAR32(unsigned int, int)>:
c001b974:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b978:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b97c:	f6 c2 01             	test   dl,0x1
c001b97f:	74 07                	je     c001b988 <PCI::readBAR32(unsigned int, int)+0x14>
c001b981:	83 e2 fc             	and    edx,0xfffffffc
c001b984:	01 c2                	add    edx,eax
c001b986:	ed                   	in     eax,dx
c001b987:	c3                   	ret    
c001b988:	83 e2 f0             	and    edx,0xfffffff0
c001b98b:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001b98e:	c3                   	ret    
c001b98f:	90                   	nop

c001b990 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001b990:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b994:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b998:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b99c:	f6 c2 01             	test   dl,0x1
c001b99f:	74 07                	je     c001b9a8 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001b9a1:	83 e2 fc             	and    edx,0xfffffffc
c001b9a4:	01 ca                	add    edx,ecx
c001b9a6:	ee                   	out    dx,al
c001b9a7:	c3                   	ret    
c001b9a8:	83 e2 f0             	and    edx,0xfffffff0
c001b9ab:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001b9ae:	c3                   	ret    
c001b9af:	90                   	nop

c001b9b0 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001b9b0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b9b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b9b8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b9bc:	f6 c2 01             	test   dl,0x1
c001b9bf:	74 08                	je     c001b9c9 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001b9c1:	83 e2 fc             	and    edx,0xfffffffc
c001b9c4:	01 ca                	add    edx,ecx
c001b9c6:	66 ef                	out    dx,ax
c001b9c8:	c3                   	ret    
c001b9c9:	83 e2 f0             	and    edx,0xfffffff0
c001b9cc:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001b9d0:	c3                   	ret    
c001b9d1:	90                   	nop

c001b9d2 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001b9d2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b9d6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b9da:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b9de:	f6 c2 01             	test   dl,0x1
c001b9e1:	74 07                	je     c001b9ea <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001b9e3:	83 e2 fc             	and    edx,0xfffffffc
c001b9e6:	01 ca                	add    edx,ecx
c001b9e8:	ef                   	out    dx,eax
c001b9e9:	c3                   	ret    
c001b9ea:	83 e2 f0             	and    edx,0xfffffff0
c001b9ed:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001b9f0:	c3                   	ret    
c001b9f1:	90                   	nop

c001b9f2 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001b9f2:	55                   	push   ebp
c001b9f3:	57                   	push   edi
c001b9f4:	56                   	push   esi
c001b9f5:	53                   	push   ebx
c001b9f6:	83 ec 0c             	sub    esp,0xc
c001b9f9:	0f b6 74 24 2c       	movzx  esi,BYTE PTR [esp+0x2c]
c001b9fe:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001ba02:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001ba06:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001ba0a:	83 fe 07             	cmp    esi,0x7
c001ba0d:	76 10                	jbe    c001ba1f <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001ba0f:	83 ec 0c             	sub    esp,0xc
c001ba12:	68 27 34 02 c0       	push   0xc0023427
c001ba17:	e8 0a 32 ff ff       	call   c000ec26 <KePanic(char const*)>
c001ba1c:	83 c4 10             	add    esp,0x10
c001ba1f:	0f b6 db             	movzx  ebx,bl
c001ba22:	83 fb 0f             	cmp    ebx,0xf
c001ba25:	76 10                	jbe    c001ba37 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x45>
c001ba27:	83 ec 0c             	sub    esp,0xc
c001ba2a:	68 57 34 02 c0       	push   0xc0023457
c001ba2f:	e8 f2 31 ff ff       	call   c000ec26 <KePanic(char const*)>
c001ba34:	83 c4 10             	add    esp,0x10
c001ba37:	8d 04 36             	lea    eax,[esi+esi*1]
c001ba3a:	ba f8 0c 00 00       	mov    edx,0xcf8
c001ba3f:	83 c8 f0             	or     eax,0xfffffff0
c001ba42:	ee                   	out    dx,al
c001ba43:	ba fa 0c 00 00       	mov    edx,0xcfa
c001ba48:	89 e8                	mov    eax,ebp
c001ba4a:	ee                   	out    dx,al
c001ba4b:	89 f9                	mov    ecx,edi
c001ba4d:	89 d8                	mov    eax,ebx
c001ba4f:	0f b6 d9             	movzx  ebx,cl
c001ba52:	83 c4 0c             	add    esp,0xc
c001ba55:	c1 e0 08             	shl    eax,0x8
c001ba58:	83 e3 fc             	and    ebx,0xfffffffc
c001ba5b:	09 d8                	or     eax,ebx
c001ba5d:	5b                   	pop    ebx
c001ba5e:	0d 00 c0 ff ff       	or     eax,0xffffc000
c001ba63:	5e                   	pop    esi
c001ba64:	5f                   	pop    edi
c001ba65:	5d                   	pop    ebp
c001ba66:	c3                   	ret    
c001ba67:	90                   	nop

c001ba68 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001ba68:	57                   	push   edi
c001ba69:	56                   	push   esi
c001ba6a:	53                   	push   ebx
c001ba6b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ba6f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ba73:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ba77:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001ba7b:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001ba81:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001ba85:	83 ff 01             	cmp    edi,0x1
c001ba88:	75 3f                	jne    c001bac9 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x61>
c001ba8a:	89 de                	mov    esi,ebx
c001ba8c:	0f b6 c0             	movzx  eax,al
c001ba8f:	c1 e0 10             	shl    eax,0x10
c001ba92:	81 e6 fc 00 00 00    	and    esi,0xfc
c001ba98:	0f b6 c9             	movzx  ecx,cl
c001ba9b:	09 f0                	or     eax,esi
c001ba9d:	c1 e1 08             	shl    ecx,0x8
c001baa0:	0f b6 d2             	movzx  edx,dl
c001baa3:	c1 e2 0b             	shl    edx,0xb
c001baa6:	09 c8                	or     eax,ecx
c001baa8:	09 d0                	or     eax,edx
c001baaa:	ba f8 0c 00 00       	mov    edx,0xcf8
c001baaf:	0d 00 00 00 80       	or     eax,0x80000000
c001bab4:	ef                   	out    dx,eax
c001bab5:	ba fc 0c 00 00       	mov    edx,0xcfc
c001baba:	ed                   	in     eax,dx
c001babb:	83 e3 02             	and    ebx,0x2
c001babe:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001bac5:	d3 e8                	shr    eax,cl
c001bac7:	eb 44                	jmp    c001bb0d <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001bac9:	83 ff 02             	cmp    edi,0x2
c001bacc:	75 2d                	jne    c001bafb <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x93>
c001bace:	83 ec 0c             	sub    esp,0xc
c001bad1:	0f b6 fb             	movzx  edi,bl
c001bad4:	57                   	push   edi
c001bad5:	0f b6 c9             	movzx  ecx,cl
c001bad8:	51                   	push   ecx
c001bad9:	0f b6 d2             	movzx  edx,dl
c001badc:	52                   	push   edx
c001badd:	0f b6 c0             	movzx  eax,al
c001bae0:	50                   	push   eax
c001bae1:	56                   	push   esi
c001bae2:	e8 0b ff ff ff       	call   c001b9f2 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bae7:	89 c2                	mov    edx,eax
c001bae9:	ed                   	in     eax,dx
c001baea:	83 e3 02             	and    ebx,0x2
c001baed:	83 c4 20             	add    esp,0x20
c001baf0:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001baf7:	d3 e8                	shr    eax,cl
c001baf9:	eb 12                	jmp    c001bb0d <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001bafb:	83 ec 0c             	sub    esp,0xc
c001bafe:	68 87 34 02 c0       	push   0xc0023487
c001bb03:	e8 1e 31 ff ff       	call   c000ec26 <KePanic(char const*)>
c001bb08:	83 c4 10             	add    esp,0x10
c001bb0b:	31 c0                	xor    eax,eax
c001bb0d:	5b                   	pop    ebx
c001bb0e:	5e                   	pop    esi
c001bb0f:	5f                   	pop    edi
c001bb10:	c3                   	ret    
c001bb11:	90                   	nop

c001bb12 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001bb12:	83 ec 18             	sub    esp,0x18
c001bb15:	6a 00                	push   0x0
c001bb17:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bb1c:	50                   	push   eax
c001bb1d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bb22:	50                   	push   eax
c001bb23:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bb28:	50                   	push   eax
c001bb29:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bb2d:	e8 36 ff ff ff       	call   c001ba68 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bb32:	83 c4 2c             	add    esp,0x2c
c001bb35:	c3                   	ret    

c001bb36 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001bb36:	83 ec 18             	sub    esp,0x18
c001bb39:	6a 0e                	push   0xe
c001bb3b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bb40:	50                   	push   eax
c001bb41:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bb46:	50                   	push   eax
c001bb47:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bb4c:	50                   	push   eax
c001bb4d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bb51:	e8 12 ff ff ff       	call   c001ba68 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bb56:	83 c4 2c             	add    esp,0x2c
c001bb59:	0f b6 c0             	movzx  eax,al
c001bb5c:	c3                   	ret    
c001bb5d:	90                   	nop

c001bb5e <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001bb5e:	55                   	push   ebp
c001bb5f:	57                   	push   edi
c001bb60:	56                   	push   esi
c001bb61:	53                   	push   ebx
c001bb62:	83 ec 18             	sub    esp,0x18
c001bb65:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001bb6a:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001bb6f:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001bb74:	6a 0a                	push   0xa
c001bb76:	56                   	push   esi
c001bb77:	55                   	push   ebp
c001bb78:	57                   	push   edi
c001bb79:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001bb7d:	e8 e6 fe ff ff       	call   c001ba68 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bb82:	83 c4 14             	add    esp,0x14
c001bb85:	6a 0a                	push   0xa
c001bb87:	56                   	push   esi
c001bb88:	55                   	push   ebp
c001bb89:	57                   	push   edi
c001bb8a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001bb8e:	89 c3                	mov    ebx,eax
c001bb90:	0f b6 db             	movzx  ebx,bl
c001bb93:	e8 d0 fe ff ff       	call   c001ba68 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bb98:	83 c4 2c             	add    esp,0x2c
c001bb9b:	25 00 ff 00 00       	and    eax,0xff00
c001bba0:	09 d8                	or     eax,ebx
c001bba2:	5b                   	pop    ebx
c001bba3:	5e                   	pop    esi
c001bba4:	5f                   	pop    edi
c001bba5:	5d                   	pop    ebp
c001bba6:	c3                   	ret    
c001bba7:	90                   	nop

c001bba8 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001bba8:	83 ec 18             	sub    esp,0x18
c001bbab:	6a 08                	push   0x8
c001bbad:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bbb2:	50                   	push   eax
c001bbb3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bbb8:	50                   	push   eax
c001bbb9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bbbe:	50                   	push   eax
c001bbbf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bbc3:	e8 a0 fe ff ff       	call   c001ba68 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bbc8:	83 c4 2c             	add    esp,0x2c
c001bbcb:	0f b6 c4             	movzx  eax,ah
c001bbce:	c3                   	ret    
c001bbcf:	90                   	nop

c001bbd0 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001bbd0:	83 ec 18             	sub    esp,0x18
c001bbd3:	6a 08                	push   0x8
c001bbd5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bbda:	50                   	push   eax
c001bbdb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bbe0:	50                   	push   eax
c001bbe1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bbe6:	50                   	push   eax
c001bbe7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bbeb:	e8 78 fe ff ff       	call   c001ba68 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bbf0:	83 c4 2c             	add    esp,0x2c
c001bbf3:	c3                   	ret    

c001bbf4 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001bbf4:	83 ec 18             	sub    esp,0x18
c001bbf7:	6a 3c                	push   0x3c
c001bbf9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bbfe:	50                   	push   eax
c001bbff:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bc04:	50                   	push   eax
c001bc05:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bc0a:	50                   	push   eax
c001bc0b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bc0f:	e8 54 fe ff ff       	call   c001ba68 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bc14:	83 c4 2c             	add    esp,0x2c
c001bc17:	c3                   	ret    

c001bc18 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001bc18:	83 ec 18             	sub    esp,0x18
c001bc1b:	6a 18                	push   0x18
c001bc1d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bc22:	50                   	push   eax
c001bc23:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bc28:	50                   	push   eax
c001bc29:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bc2e:	50                   	push   eax
c001bc2f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bc33:	e8 30 fe ff ff       	call   c001ba68 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bc38:	83 c4 2c             	add    esp,0x2c
c001bc3b:	0f b6 c4             	movzx  eax,ah
c001bc3e:	c3                   	ret    
c001bc3f:	90                   	nop

c001bc40 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001bc40:	55                   	push   ebp
c001bc41:	57                   	push   edi
c001bc42:	56                   	push   esi
c001bc43:	53                   	push   ebx
c001bc44:	83 ec 28             	sub    esp,0x28
c001bc47:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001bc4b:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001bc50:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001bc55:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001bc5a:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001bc61:	8d 43 12             	lea    eax,[ebx+0x12]
c001bc64:	83 c3 10             	add    ebx,0x10
c001bc67:	0f b6 c0             	movzx  eax,al
c001bc6a:	0f b6 db             	movzx  ebx,bl
c001bc6d:	50                   	push   eax
c001bc6e:	51                   	push   ecx
c001bc6f:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001bc73:	57                   	push   edi
c001bc74:	55                   	push   ebp
c001bc75:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001bc79:	e8 ea fd ff ff       	call   c001ba68 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bc7e:	83 c4 14             	add    esp,0x14
c001bc81:	53                   	push   ebx
c001bc82:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001bc86:	51                   	push   ecx
c001bc87:	89 c6                	mov    esi,eax
c001bc89:	57                   	push   edi
c001bc8a:	55                   	push   ebp
c001bc8b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001bc8f:	c1 e6 10             	shl    esi,0x10
c001bc92:	e8 d1 fd ff ff       	call   c001ba68 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bc97:	83 c4 3c             	add    esp,0x3c
c001bc9a:	5b                   	pop    ebx
c001bc9b:	0f b7 c0             	movzx  eax,ax
c001bc9e:	09 f0                	or     eax,esi
c001bca0:	5e                   	pop    esi
c001bca1:	5f                   	pop    edi
c001bca2:	5d                   	pop    ebp
c001bca3:	c3                   	ret    

c001bca4 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001bca4:	55                   	push   ebp
c001bca5:	57                   	push   edi
c001bca6:	56                   	push   esi
c001bca7:	53                   	push   ebx
c001bca8:	83 ec 0c             	sub    esp,0xc
c001bcab:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001bcaf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001bcb3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001bcb7:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c001bcbb:	8b 8d 58 01 00 00    	mov    ecx,DWORD PTR [ebp+0x158]
c001bcc1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001bcc5:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001bcc9:	83 f9 01             	cmp    ecx,0x1
c001bccc:	75 5d                	jne    c001bd2b <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x87>
c001bcce:	0f b6 c8             	movzx  ecx,al
c001bcd1:	89 f0                	mov    eax,esi
c001bcd3:	25 fc 00 00 00       	and    eax,0xfc
c001bcd8:	0f b6 d2             	movzx  edx,dl
c001bcdb:	c1 e1 10             	shl    ecx,0x10
c001bcde:	c1 e2 0b             	shl    edx,0xb
c001bce1:	09 c1                	or     ecx,eax
c001bce3:	89 f8                	mov    eax,edi
c001bce5:	0f b6 f8             	movzx  edi,al
c001bce8:	c1 e7 08             	shl    edi,0x8
c001bceb:	09 f9                	or     ecx,edi
c001bced:	09 d1                	or     ecx,edx
c001bcef:	ba f8 0c 00 00       	mov    edx,0xcf8
c001bcf4:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001bcfa:	89 c8                	mov    eax,ecx
c001bcfc:	ef                   	out    dx,eax
c001bcfd:	ba fc 0c 00 00       	mov    edx,0xcfc
c001bd02:	ed                   	in     eax,dx
c001bd03:	83 e6 02             	and    esi,0x2
c001bd06:	0f b7 db             	movzx  ebx,bx
c001bd09:	74 0a                	je     c001bd15 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x71>
c001bd0b:	c1 e3 10             	shl    ebx,0x10
c001bd0e:	0f b7 d0             	movzx  edx,ax
c001bd11:	09 d3                	or     ebx,edx
c001bd13:	eb 05                	jmp    c001bd1a <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x76>
c001bd15:	66 31 c0             	xor    ax,ax
c001bd18:	09 c3                	or     ebx,eax
c001bd1a:	ba f8 0c 00 00       	mov    edx,0xcf8
c001bd1f:	89 c8                	mov    eax,ecx
c001bd21:	ef                   	out    dx,eax
c001bd22:	ba fc 0c 00 00       	mov    edx,0xcfc
c001bd27:	89 d8                	mov    eax,ebx
c001bd29:	eb 41                	jmp    c001bd6c <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc8>
c001bd2b:	83 f9 02             	cmp    ecx,0x2
c001bd2e:	75 45                	jne    c001bd75 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd1>
c001bd30:	89 f1                	mov    ecx,esi
c001bd32:	83 ec 0c             	sub    esp,0xc
c001bd35:	0f b6 f1             	movzx  esi,cl
c001bd38:	89 f9                	mov    ecx,edi
c001bd3a:	56                   	push   esi
c001bd3b:	0f b6 f9             	movzx  edi,cl
c001bd3e:	57                   	push   edi
c001bd3f:	0f b6 d2             	movzx  edx,dl
c001bd42:	52                   	push   edx
c001bd43:	0f b6 c0             	movzx  eax,al
c001bd46:	50                   	push   eax
c001bd47:	55                   	push   ebp
c001bd48:	e8 a5 fc ff ff       	call   c001b9f2 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bd4d:	89 c2                	mov    edx,eax
c001bd4f:	ed                   	in     eax,dx
c001bd50:	83 c4 20             	add    esp,0x20
c001bd53:	f6 c2 02             	test   dl,0x2
c001bd56:	0f b7 db             	movzx  ebx,bx
c001bd59:	74 0c                	je     c001bd67 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc3>
c001bd5b:	0f b7 c8             	movzx  ecx,ax
c001bd5e:	89 d8                	mov    eax,ebx
c001bd60:	c1 e0 10             	shl    eax,0x10
c001bd63:	09 c8                	or     eax,ecx
c001bd65:	eb 05                	jmp    c001bd6c <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc8>
c001bd67:	66 31 c0             	xor    ax,ax
c001bd6a:	09 d8                	or     eax,ebx
c001bd6c:	ef                   	out    dx,eax
c001bd6d:	83 c4 0c             	add    esp,0xc
c001bd70:	5b                   	pop    ebx
c001bd71:	5e                   	pop    esi
c001bd72:	5f                   	pop    edi
c001bd73:	5d                   	pop    ebp
c001bd74:	c3                   	ret    
c001bd75:	c7 44 24 20 87 34 02 c0 	mov    DWORD PTR [esp+0x20],0xc0023487
c001bd7d:	83 c4 0c             	add    esp,0xc
c001bd80:	5b                   	pop    ebx
c001bd81:	5e                   	pop    esi
c001bd82:	5f                   	pop    edi
c001bd83:	5d                   	pop    ebp
c001bd84:	e9 9d 2e ff ff       	jmp    c000ec26 <KePanic(char const*)>
c001bd89:	90                   	nop

c001bd8a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001bd8a:	55                   	push   ebp
c001bd8b:	57                   	push   edi
c001bd8c:	56                   	push   esi
c001bd8d:	53                   	push   ebx
c001bd8e:	81 ec 4c 01 00 00    	sub    esp,0x14c
c001bd94:	80 3d cc d0 02 c0 00 	cmp    BYTE PTR ds:0xc002d0cc,0x0
c001bd9b:	8b b4 24 84 01 00 00 	mov    esi,DWORD PTR [esp+0x184]
c001bda2:	0f 85 bd 00 00 00    	jne    c001be65 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdb>
c001bda8:	83 ec 0c             	sub    esp,0xc
c001bdab:	68 14 01 00 00       	push   0x114
c001bdb0:	e8 1b 2b ff ff       	call   c000e8d0 <malloc>
c001bdb5:	83 c4 0c             	add    esp,0xc
c001bdb8:	ff 35 d8 c6 02 c0    	push   DWORD PTR ds:0xc002c6d8
c001bdbe:	68 8d 34 02 c0       	push   0xc002348d
c001bdc3:	50                   	push   eax
c001bdc4:	89 c3                	mov    ebx,eax
c001bdc6:	e8 41 c3 fe ff       	call   c000810c <File::File(char const*, Process*)>
c001bdcb:	83 c4 10             	add    esp,0x10
c001bdce:	85 db                	test   ebx,ebx
c001bdd0:	0f 84 6b 02 00 00    	je     c001c041 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001bdd6:	57                   	push   edi
c001bdd7:	57                   	push   edi
c001bdd8:	6a 01                	push   0x1
c001bdda:	53                   	push   ebx
c001bddb:	e8 4a c3 fe ff       	call   c000812a <File::open(FileOpenMode)>
c001bde0:	83 c4 10             	add    esp,0x10
c001bde3:	85 c0                	test   eax,eax
c001bde5:	0f 85 56 02 00 00    	jne    c001c041 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001bdeb:	52                   	push   edx
c001bdec:	8d 44 24 3f          	lea    eax,[esp+0x3f]
c001bdf0:	50                   	push   eax
c001bdf1:	8d 44 24 48          	lea    eax,[esp+0x48]
c001bdf5:	50                   	push   eax
c001bdf6:	53                   	push   ebx
c001bdf7:	e8 30 c6 fe ff       	call   c000842c <File::stat(unsigned long long*, bool*)>
c001bdfc:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001be00:	40                   	inc    eax
c001be01:	89 04 24             	mov    DWORD PTR [esp],eax
c001be04:	e8 c7 2a ff ff       	call   c000e8d0 <malloc>
c001be09:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001be0d:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001be11:	59                   	pop    ecx
c001be12:	a3 c8 d0 02 c0       	mov    ds:0xc002d0c8,eax
c001be17:	8b 13                	mov    edx,DWORD PTR [ebx]
c001be19:	8d 4c 24 48          	lea    ecx,[esp+0x48]
c001be1d:	51                   	push   ecx
c001be1e:	50                   	push   eax
c001be1f:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001be23:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001be27:	53                   	push   ebx
c001be28:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001be2b:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c001be2f:	83 c4 20             	add    esp,0x20
c001be32:	89 c8                	mov    eax,ecx
c001be34:	99                   	cdq    
c001be35:	3b 54 24 44          	cmp    edx,DWORD PTR [esp+0x44]
c001be39:	0f 85 02 02 00 00    	jne    c001c041 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001be3f:	3b 4c 24 40          	cmp    ecx,DWORD PTR [esp+0x40]
c001be43:	0f 85 f8 01 00 00    	jne    c001c041 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001be49:	83 ec 0c             	sub    esp,0xc
c001be4c:	53                   	push   ebx
c001be4d:	e8 36 c3 fe ff       	call   c0008188 <File::close()>
c001be52:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001be56:	83 c4 10             	add    esp,0x10
c001be59:	c6 05 cc d0 02 c0 01 	mov    BYTE PTR ds:0xc002d0cc,0x1
c001be60:	a3 c4 d0 02 c0       	mov    ds:0xc002d0c4,eax
c001be65:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c001be6d:	31 c9                	xor    ecx,ecx
c001be6f:	66 c7 44 24 10 00 00 	mov    WORD PTR [esp+0x10],0x0
c001be76:	8b 2d c4 d0 02 c0    	mov    ebp,DWORD PTR ds:0xc002d0c4
c001be7c:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c001be83:	8b 15 c8 d0 02 c0    	mov    edx,DWORD PTR ds:0xc002d0c8
c001be89:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c001be8e:	66 8b 84 24 82 01 00 00 	mov    ax,WORD PTR [esp+0x182]
c001be96:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c001be9b:	0f b6 84 24 60 01 00 00 	movzx  eax,BYTE PTR [esp+0x160]
c001bea3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001bea7:	0f b6 84 24 61 01 00 00 	movzx  eax,BYTE PTR [esp+0x161]
c001beaf:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001beb3:	39 cd                	cmp    ebp,ecx
c001beb5:	0f 8e 86 01 00 00    	jle    c001c041 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001bebb:	8a 04 0a             	mov    al,BYTE PTR [edx+ecx*1]
c001bebe:	d4 40                	aam    0x40
c001bec0:	d5 39                	aad    0x39
c001bec2:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001bec6:	8a 44 0a 01          	mov    al,BYTE PTR [edx+ecx*1+0x1]
c001beca:	d4 40                	aam    0x40
c001becc:	d5 39                	aad    0x39
c001bece:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001bed2:	8a 44 0a 03          	mov    al,BYTE PTR [edx+ecx*1+0x3]
c001bed6:	d4 40                	aam    0x40
c001bed8:	d5 39                	aad    0x39
c001beda:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001bede:	8a 44 0a 04          	mov    al,BYTE PTR [edx+ecx*1+0x4]
c001bee2:	d4 40                	aam    0x40
c001bee4:	d5 39                	aad    0x39
c001bee6:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001beea:	8a 44 0a 06          	mov    al,BYTE PTR [edx+ecx*1+0x6]
c001beee:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c001bef2:	3c 56                	cmp    al,0x56
c001bef4:	74 47                	je     c001bf3d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b3>
c001bef6:	d4 40                	aam    0x40
c001bef8:	d5 39                	aad    0x39
c001befa:	8d 58 d0             	lea    ebx,[eax-0x30]
c001befd:	8a 44 0a 07          	mov    al,BYTE PTR [edx+ecx*1+0x7]
c001bf01:	0f b6 db             	movzx  ebx,bl
c001bf04:	c1 e3 04             	shl    ebx,0x4
c001bf07:	d4 40                	aam    0x40
c001bf09:	d5 39                	aad    0x39
c001bf0b:	83 e8 30             	sub    eax,0x30
c001bf0e:	0f b6 c0             	movzx  eax,al
c001bf11:	09 c3                	or     ebx,eax
c001bf13:	8a 44 0a 08          	mov    al,BYTE PTR [edx+ecx*1+0x8]
c001bf17:	c1 e3 04             	shl    ebx,0x4
c001bf1a:	d4 40                	aam    0x40
c001bf1c:	d5 39                	aad    0x39
c001bf1e:	83 e8 30             	sub    eax,0x30
c001bf21:	0f b6 c0             	movzx  eax,al
c001bf24:	09 c3                	or     ebx,eax
c001bf26:	8a 44 0a 09          	mov    al,BYTE PTR [edx+ecx*1+0x9]
c001bf2a:	c1 e3 04             	shl    ebx,0x4
c001bf2d:	d4 40                	aam    0x40
c001bf2f:	d5 39                	aad    0x39
c001bf31:	83 e8 30             	sub    eax,0x30
c001bf34:	0f b6 c0             	movzx  eax,al
c001bf37:	09 c3                	or     ebx,eax
c001bf39:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001bf3d:	8a 5c 0a 0b          	mov    bl,BYTE PTR [edx+ecx*1+0xb]
c001bf41:	80 fb 58             	cmp    bl,0x58
c001bf44:	74 49                	je     c001bf8f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x205>
c001bf46:	88 d8                	mov    al,bl
c001bf48:	d4 40                	aam    0x40
c001bf4a:	d5 39                	aad    0x39
c001bf4c:	83 e8 30             	sub    eax,0x30
c001bf4f:	0f b6 f8             	movzx  edi,al
c001bf52:	8a 44 0a 0c          	mov    al,BYTE PTR [edx+ecx*1+0xc]
c001bf56:	c1 e7 04             	shl    edi,0x4
c001bf59:	d4 40                	aam    0x40
c001bf5b:	d5 39                	aad    0x39
c001bf5d:	83 e8 30             	sub    eax,0x30
c001bf60:	0f b6 c0             	movzx  eax,al
c001bf63:	09 c7                	or     edi,eax
c001bf65:	8a 44 0a 0d          	mov    al,BYTE PTR [edx+ecx*1+0xd]
c001bf69:	c1 e7 04             	shl    edi,0x4
c001bf6c:	d4 40                	aam    0x40
c001bf6e:	d5 39                	aad    0x39
c001bf70:	83 e8 30             	sub    eax,0x30
c001bf73:	0f b6 c0             	movzx  eax,al
c001bf76:	09 c7                	or     edi,eax
c001bf78:	8a 44 0a 0e          	mov    al,BYTE PTR [edx+ecx*1+0xe]
c001bf7c:	c1 e7 04             	shl    edi,0x4
c001bf7f:	d4 40                	aam    0x40
c001bf81:	d5 39                	aad    0x39
c001bf83:	83 e8 30             	sub    eax,0x30
c001bf86:	0f b6 c0             	movzx  eax,al
c001bf89:	09 c7                	or     edi,eax
c001bf8b:	89 7c 24 10          	mov    DWORD PTR [esp+0x10],edi
c001bf8f:	8d 41 10             	lea    eax,[ecx+0x10]
c001bf92:	8d 7c 24 40          	lea    edi,[esp+0x40]
c001bf96:	0f be 0c 02          	movsx  ecx,BYTE PTR [edx+eax*1]
c001bf9a:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001bf9e:	83 f9 0a             	cmp    ecx,0xa
c001bfa1:	74 07                	je     c001bfaa <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x220>
c001bfa3:	47                   	inc    edi
c001bfa4:	39 c5                	cmp    ebp,eax
c001bfa6:	75 16                	jne    c001bfbe <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x234>
c001bfa8:	89 e8                	mov    eax,ebp
c001bfaa:	83 f9 0a             	cmp    ecx,0xa
c001bfad:	0f 94 c1             	sete   cl
c001bfb0:	0f b6 c9             	movzx  ecx,cl
c001bfb3:	01 c1                	add    ecx,eax
c001bfb5:	80 7c 24 0a 56       	cmp    BYTE PTR [esp+0xa],0x56
c001bfba:	75 0f                	jne    c001bfcb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x241>
c001bfbc:	eb 1c                	jmp    c001bfda <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x250>
c001bfbe:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001bfc1:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c001bfc5:	40                   	inc    eax
c001bfc6:	88 4f ff             	mov    BYTE PTR [edi-0x1],cl
c001bfc9:	eb cb                	jmp    c001bf96 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x20c>
c001bfcb:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001bfcf:	66 39 7c 24 0c       	cmp    WORD PTR [esp+0xc],di
c001bfd4:	0f 85 d9 fe ff ff    	jne    c001beb3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001bfda:	80 fb 58             	cmp    bl,0x58
c001bfdd:	74 10                	je     c001bfef <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x265>
c001bfdf:	66 8b 7c 24 16       	mov    di,WORD PTR [esp+0x16]
c001bfe4:	66 39 7c 24 10       	cmp    WORD PTR [esp+0x10],di
c001bfe9:	0f 85 c4 fe ff ff    	jne    c001beb3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001bfef:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bff3:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001bff7:	83 e8 30             	sub    eax,0x30
c001bffa:	c1 e0 04             	shl    eax,0x4
c001bffd:	83 eb 30             	sub    ebx,0x30
c001c000:	09 d8                	or     eax,ebx
c001c002:	0f b6 c0             	movzx  eax,al
c001c005:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c001c009:	0f 85 a4 fe ff ff    	jne    c001beb3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001c00f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c013:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001c017:	83 e8 30             	sub    eax,0x30
c001c01a:	c1 e0 04             	shl    eax,0x4
c001c01d:	83 eb 30             	sub    ebx,0x30
c001c020:	09 d8                	or     eax,ebx
c001c022:	0f b6 c0             	movzx  eax,al
c001c025:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c001c029:	0f 85 84 fe ff ff    	jne    c001beb3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001c02f:	50                   	push   eax
c001c030:	50                   	push   eax
c001c031:	8d 44 24 48          	lea    eax,[esp+0x48]
c001c035:	50                   	push   eax
c001c036:	56                   	push   esi
c001c037:	e8 14 46 fe ff       	call   c0000650 <strcpy>
c001c03c:	83 c4 10             	add    esp,0x10
c001c03f:	eb 05                	jmp    c001c046 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2bc>
c001c041:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001c044:	31 f6                	xor    esi,esi
c001c046:	81 c4 4c 01 00 00    	add    esp,0x14c
c001c04c:	89 f0                	mov    eax,esi
c001c04e:	5b                   	pop    ebx
c001c04f:	5e                   	pop    esi
c001c050:	5f                   	pop    edi
c001c051:	5d                   	pop    ebp
c001c052:	c3                   	ret    
c001c053:	90                   	nop

c001c054 <PCI::checkBus(unsigned char)>:
c001c054:	56                   	push   esi
c001c055:	53                   	push   ebx
c001c056:	31 db                	xor    ebx,ebx
c001c058:	51                   	push   ecx
c001c059:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001c05e:	52                   	push   edx
c001c05f:	53                   	push   ebx
c001c060:	43                   	inc    ebx
c001c061:	56                   	push   esi
c001c062:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c066:	e8 6f 03 00 00       	call   c001c3da <PCI::checkDevice(unsigned char, unsigned char)>
c001c06b:	83 c4 10             	add    esp,0x10
c001c06e:	83 fb 20             	cmp    ebx,0x20
c001c071:	75 eb                	jne    c001c05e <PCI::checkBus(unsigned char)+0xa>
c001c073:	58                   	pop    eax
c001c074:	5b                   	pop    ebx
c001c075:	5e                   	pop    esi
c001c076:	c3                   	ret    
c001c077:	90                   	nop

c001c078 <PCI::foundDevice(PCIDeviceInfo)>:
c001c078:	55                   	push   ebp
c001c079:	57                   	push   edi
c001c07a:	56                   	push   esi
c001c07b:	53                   	push   ebx
c001c07c:	81 ec 8c 00 00 00    	sub    esp,0x8c
c001c082:	0f b7 84 24 a6 00 00 00 	movzx  eax,WORD PTR [esp+0xa6]
c001c08a:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c001c091:	3d ff ff 00 00       	cmp    eax,0xffff
c001c096:	0f 84 b6 01 00 00    	je     c001c252 <PCI::foundDevice(PCIDeviceInfo)+0x1da>
c001c09c:	0f b7 ac 24 a4 00 00 00 	movzx  ebp,WORD PTR [esp+0xa4]
c001c0a4:	66 81 fd 06 04       	cmp    bp,0x406
c001c0a9:	75 32                	jne    c001c0dd <PCI::foundDevice(PCIDeviceInfo)+0x65>
c001c0ab:	0f b6 84 24 aa 00 00 00 	movzx  eax,BYTE PTR [esp+0xaa]
c001c0b3:	50                   	push   eax
c001c0b4:	0f b6 84 24 ad 00 00 00 	movzx  eax,BYTE PTR [esp+0xad]
c001c0bc:	50                   	push   eax
c001c0bd:	0f b6 84 24 b0 00 00 00 	movzx  eax,BYTE PTR [esp+0xb0]
c001c0c5:	50                   	push   eax
c001c0c6:	53                   	push   ebx
c001c0c7:	e8 4c fb ff ff       	call   c001bc18 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001c0cc:	59                   	pop    ecx
c001c0cd:	5e                   	pop    esi
c001c0ce:	0f b6 c0             	movzx  eax,al
c001c0d1:	50                   	push   eax
c001c0d2:	53                   	push   ebx
c001c0d3:	e8 7c ff ff ff       	call   c001c054 <PCI::checkBus(unsigned char)>
c001c0d8:	e9 15 01 00 00       	jmp    c001c1f2 <PCI::foundDevice(PCIDeviceInfo)+0x17a>
c001c0dd:	0f b6 94 24 c4 00 00 00 	movzx  edx,BYTE PTR [esp+0xc4]
c001c0e5:	8b 83 cc 00 00 00    	mov    eax,DWORD PTR [ebx+0xcc]
c001c0eb:	8b 8c 24 a4 00 00 00 	mov    ecx,DWORD PTR [esp+0xa4]
c001c0f2:	8b b4 24 ac 00 00 00 	mov    esi,DWORD PTR [esp+0xac]
c001c0f9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001c0fd:	85 c0                	test   eax,eax
c001c0ff:	74 34                	je     c001c135 <PCI::foundDevice(PCIDeviceInfo)+0xbd>
c001c101:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001c104:	85 d2                	test   edx,edx
c001c106:	74 29                	je     c001c131 <PCI::foundDevice(PCIDeviceInfo)+0xb9>
c001c108:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c001c10e:	31 cf                	xor    edi,ecx
c001c110:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c001c116:	75 19                	jne    c001c131 <PCI::foundDevice(PCIDeviceInfo)+0xb9>
c001c118:	39 b2 20 01 00 00    	cmp    DWORD PTR [edx+0x120],esi
c001c11e:	75 11                	jne    c001c131 <PCI::foundDevice(PCIDeviceInfo)+0xb9>
c001c120:	0f b6 92 38 01 00 00 	movzx  edx,BYTE PTR [edx+0x138]
c001c127:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c001c12b:	0f 84 21 01 00 00    	je     c001c252 <PCI::foundDevice(PCIDeviceInfo)+0x1da>
c001c131:	8b 00                	mov    eax,DWORD PTR [eax]
c001c133:	eb c8                	jmp    c001c0fd <PCI::foundDevice(PCIDeviceInfo)+0x85>
c001c135:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001c139:	be c0 34 02 c0       	mov    esi,0xc00234c0
c001c13e:	b9 07 00 00 00       	mov    ecx,0x7
c001c143:	fc                   	cld    
c001c144:	31 d2                	xor    edx,edx
c001c146:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001c148:	b9 12 00 00 00       	mov    ecx,0x12
c001c14d:	66 c7 44 24 35 30 30 	mov    WORD PTR [esp+0x35],0x3030
c001c154:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001c158:	83 ec 0c             	sub    esp,0xc
c001c15b:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001c15d:	0f b6 84 24 b0 00 00 00 	movzx  eax,BYTE PTR [esp+0xb0]
c001c165:	b9 0a 00 00 00       	mov    ecx,0xa
c001c16a:	f7 f1                	div    ecx
c001c16c:	83 c0 30             	add    eax,0x30
c001c16f:	83 c2 30             	add    edx,0x30
c001c172:	88 44 24 39          	mov    BYTE PTR [esp+0x39],al
c001c176:	0f b6 84 24 b1 00 00 00 	movzx  eax,BYTE PTR [esp+0xb1]
c001c17e:	88 54 24 3a          	mov    BYTE PTR [esp+0x3a],dl
c001c182:	31 d2                	xor    edx,edx
c001c184:	f7 f1                	div    ecx
c001c186:	83 c0 30             	add    eax,0x30
c001c189:	83 c2 30             	add    edx,0x30
c001c18c:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c001c190:	88 54 24 3e          	mov    BYTE PTR [esp+0x3e],dl
c001c194:	8d 44 24 28          	lea    eax,[esp+0x28]
c001c198:	50                   	push   eax
c001c199:	e8 05 04 ff ff       	call   c000c5a3 <KeSetBootMessage(char const*)>
c001c19e:	83 c4 10             	add    esp,0x10
c001c1a1:	81 fd 01 06 00 00    	cmp    ebp,0x601
c001c1a7:	8d b4 24 a4 00 00 00 	lea    esi,[esp+0xa4]
c001c1ae:	75 47                	jne    c001c1f7 <PCI::foundDevice(PCIDeviceInfo)+0x17f>
c001c1b0:	83 ec 0c             	sub    esp,0xc
c001c1b3:	68 64 01 00 00       	push   0x164
c001c1b8:	e8 13 27 ff ff       	call   c000e8d0 <malloc>
c001c1bd:	89 04 24             	mov    DWORD PTR [esp],eax
c001c1c0:	89 c5                	mov    ebp,eax
c001c1c2:	e8 9d 10 00 00       	call   c001d264 <SATABus::SATABus()>
c001c1c7:	58                   	pop    eax
c001c1c8:	5a                   	pop    edx
c001c1c9:	55                   	push   ebp
c001c1ca:	53                   	push   ebx
c001c1cb:	e8 72 ce fe ff       	call   c0009042 <Device::addChild(Device*)>
c001c1d0:	83 ec 1c             	sub    esp,0x1c
c001c1d3:	b9 09 00 00 00       	mov    ecx,0x9
c001c1d8:	89 e7                	mov    edi,esp
c001c1da:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001c1dc:	55                   	push   ebp
c001c1dd:	e8 a6 cd fe ff       	call   c0008f88 <Device::preOpenPCI(PCIDeviceInfo)>
c001c1e2:	83 c4 30             	add    esp,0x30
c001c1e5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c1e8:	6a 00                	push   0x0
c001c1ea:	6a 00                	push   0x0
c001c1ec:	6a 00                	push   0x0
c001c1ee:	55                   	push   ebp
c001c1ef:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c1f2:	83 c4 10             	add    esp,0x10
c001c1f5:	eb 5b                	jmp    c001c252 <PCI::foundDevice(PCIDeviceInfo)+0x1da>
c001c1f7:	81 fd 01 01 00 00    	cmp    ebp,0x101
c001c1fd:	75 19                	jne    c001c218 <PCI::foundDevice(PCIDeviceInfo)+0x1a0>
c001c1ff:	83 ec 0c             	sub    esp,0xc
c001c202:	68 70 02 00 00       	push   0x270
c001c207:	e8 c4 26 ff ff       	call   c000e8d0 <malloc>
c001c20c:	89 04 24             	mov    DWORD PTR [esp],eax
c001c20f:	89 c5                	mov    ebp,eax
c001c211:	e8 94 02 00 00       	call   c001c4aa <IDE::IDE()>
c001c216:	eb af                	jmp    c001c1c7 <PCI::foundDevice(PCIDeviceInfo)+0x14f>
c001c218:	83 ec 0c             	sub    esp,0xc
c001c21b:	68 58 01 00 00       	push   0x158
c001c220:	e8 ab 26 ff ff       	call   c000e8d0 <malloc>
c001c225:	89 c5                	mov    ebp,eax
c001c227:	58                   	pop    eax
c001c228:	5a                   	pop    edx
c001c229:	68 a6 34 02 c0       	push   0xc00234a6
c001c22e:	55                   	push   ebp
c001c22f:	e8 c2 d0 fe ff       	call   c00092f6 <DriverlessDevice::DriverlessDevice(char const*)>
c001c234:	59                   	pop    ecx
c001c235:	5f                   	pop    edi
c001c236:	55                   	push   ebp
c001c237:	53                   	push   ebx
c001c238:	e8 05 ce fe ff       	call   c0009042 <Device::addChild(Device*)>
c001c23d:	83 ec 1c             	sub    esp,0x1c
c001c240:	b9 09 00 00 00       	mov    ecx,0x9
c001c245:	89 e7                	mov    edi,esp
c001c247:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001c249:	55                   	push   ebp
c001c24a:	e8 39 cd fe ff       	call   c0008f88 <Device::preOpenPCI(PCIDeviceInfo)>
c001c24f:	83 c4 30             	add    esp,0x30
c001c252:	81 c4 8c 00 00 00    	add    esp,0x8c
c001c258:	5b                   	pop    ebx
c001c259:	5e                   	pop    esi
c001c25a:	5f                   	pop    edi
c001c25b:	5d                   	pop    ebp
c001c25c:	c3                   	ret    
c001c25d:	90                   	nop

c001c25e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001c25e:	55                   	push   ebp
c001c25f:	57                   	push   edi
c001c260:	56                   	push   esi
c001c261:	53                   	push   ebx
c001c262:	83 ec 68             	sub    esp,0x68
c001c265:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001c26c:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c001c270:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c274:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001c27b:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c001c280:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001c284:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001c28b:	0f b6 5c 24 24       	movzx  ebx,BYTE PTR [esp+0x24]
c001c290:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001c294:	0f b6 7c 24 28       	movzx  edi,BYTE PTR [esp+0x28]
c001c299:	6a 0c                	push   0xc
c001c29b:	57                   	push   edi
c001c29c:	53                   	push   ebx
c001c29d:	56                   	push   esi
c001c29e:	55                   	push   ebp
c001c29f:	e8 c4 f7 ff ff       	call   c001ba68 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c2a4:	83 c4 20             	add    esp,0x20
c001c2a7:	57                   	push   edi
c001c2a8:	53                   	push   ebx
c001c2a9:	56                   	push   esi
c001c2aa:	55                   	push   ebp
c001c2ab:	e8 ae f8 ff ff       	call   c001bb5e <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001c2b0:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c001c2b5:	57                   	push   edi
c001c2b6:	53                   	push   ebx
c001c2b7:	56                   	push   esi
c001c2b8:	55                   	push   ebp
c001c2b9:	e8 36 f9 ff ff       	call   c001bbf4 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001c2be:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001c2c2:	83 c4 14             	add    esp,0x14
c001c2c5:	6a 3c                	push   0x3c
c001c2c7:	57                   	push   edi
c001c2c8:	53                   	push   ebx
c001c2c9:	56                   	push   esi
c001c2ca:	55                   	push   ebp
c001c2cb:	e8 98 f7 ff ff       	call   c001ba68 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c2d0:	0f b6 c4             	movzx  eax,ah
c001c2d3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001c2d7:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001c2db:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001c2df:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c001c2e4:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c001c2ea:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c001c2f0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001c2f4:	83 c4 20             	add    esp,0x20
c001c2f7:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c001c2fc:	74 30                	je     c001c32e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001c2fe:	31 c0                	xor    eax,eax
c001c300:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001c304:	7e 28                	jle    c001c32e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001c306:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c001c30e:	39 cb                	cmp    ebx,ecx
c001c310:	75 19                	jne    c001c32b <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001c312:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c001c31a:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001c31e:	75 0b                	jne    c001c32b <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001c320:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c001c327:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001c32b:	40                   	inc    eax
c001c32c:	eb d2                	jmp    c001c300 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c001c32e:	31 d2                	xor    edx,edx
c001c330:	83 ec 0c             	sub    esp,0xc
c001c333:	57                   	push   edi
c001c334:	53                   	push   ebx
c001c335:	56                   	push   esi
c001c336:	52                   	push   edx
c001c337:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001c33b:	55                   	push   ebp
c001c33c:	e8 ff f8 ff ff       	call   c001bc40 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c341:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001c345:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001c349:	42                   	inc    edx
c001c34a:	83 c4 20             	add    esp,0x20
c001c34d:	83 fa 06             	cmp    edx,0x6
c001c350:	75 de                	jne    c001c330 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c001c352:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c356:	83 ec 0c             	sub    esp,0xc
c001c359:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c35d:	c1 e2 08             	shl    edx,0x8
c001c360:	0f b6 c4             	movzx  eax,ah
c001c363:	09 d0                	or     eax,edx
c001c365:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c001c36a:	6a 02                	push   0x2
c001c36c:	57                   	push   edi
c001c36d:	53                   	push   ebx
c001c36e:	56                   	push   esi
c001c36f:	55                   	push   ebp
c001c370:	e8 f3 f6 ff ff       	call   c001ba68 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c375:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c001c37a:	83 c4 20             	add    esp,0x20
c001c37d:	57                   	push   edi
c001c37e:	53                   	push   ebx
c001c37f:	56                   	push   esi
c001c380:	55                   	push   ebp
c001c381:	e8 22 f8 ff ff       	call   c001bba8 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001c386:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001c38a:	57                   	push   edi
c001c38b:	53                   	push   ebx
c001c38c:	56                   	push   esi
c001c38d:	55                   	push   ebp
c001c38e:	e8 7f f7 ff ff       	call   c001bb12 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001c393:	b9 09 00 00 00       	mov    ecx,0x9
c001c398:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c001c39d:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001c3a1:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001c3a5:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001c3a9:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c001c3ad:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001c3b1:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c001c3b5:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c001c3b9:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c001c3bd:	83 ec 0c             	sub    esp,0xc
c001c3c0:	fc                   	cld    
c001c3c1:	8d 74 24 58          	lea    esi,[esp+0x58]
c001c3c5:	89 e7                	mov    edi,esp
c001c3c7:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001c3c9:	55                   	push   ebp
c001c3ca:	e8 a9 fc ff ff       	call   c001c078 <PCI::foundDevice(PCIDeviceInfo)>
c001c3cf:	81 c4 8c 00 00 00    	add    esp,0x8c
c001c3d5:	5b                   	pop    ebx
c001c3d6:	5e                   	pop    esi
c001c3d7:	5f                   	pop    edi
c001c3d8:	5d                   	pop    ebp
c001c3d9:	c3                   	ret    

c001c3da <PCI::checkDevice(unsigned char, unsigned char)>:
c001c3da:	55                   	push   ebp
c001c3db:	57                   	push   edi
c001c3dc:	56                   	push   esi
c001c3dd:	53                   	push   ebx
c001c3de:	83 ec 0c             	sub    esp,0xc
c001c3e1:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001c3e6:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001c3eb:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001c3ef:	6a 00                	push   0x0
c001c3f1:	56                   	push   esi
c001c3f2:	57                   	push   edi
c001c3f3:	55                   	push   ebp
c001c3f4:	e8 19 f7 ff ff       	call   c001bb12 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001c3f9:	6a 00                	push   0x0
c001c3fb:	56                   	push   esi
c001c3fc:	57                   	push   edi
c001c3fd:	55                   	push   ebp
c001c3fe:	e8 5b fe ff ff       	call   c001c25e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001c403:	83 c4 20             	add    esp,0x20
c001c406:	6a 00                	push   0x0
c001c408:	56                   	push   esi
c001c409:	57                   	push   edi
c001c40a:	55                   	push   ebp
c001c40b:	e8 26 f7 ff ff       	call   c001bb36 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001c410:	83 c4 10             	add    esp,0x10
c001c413:	a8 80                	test   al,0x80
c001c415:	74 2d                	je     c001c444 <PCI::checkDevice(unsigned char, unsigned char)+0x6a>
c001c417:	bb 01 00 00 00       	mov    ebx,0x1
c001c41c:	53                   	push   ebx
c001c41d:	56                   	push   esi
c001c41e:	57                   	push   edi
c001c41f:	55                   	push   ebp
c001c420:	e8 ed f6 ff ff       	call   c001bb12 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001c425:	83 c4 10             	add    esp,0x10
c001c428:	0f b7 c0             	movzx  eax,ax
c001c42b:	3d ff ff 00 00       	cmp    eax,0xffff
c001c430:	74 0c                	je     c001c43e <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001c432:	53                   	push   ebx
c001c433:	56                   	push   esi
c001c434:	57                   	push   edi
c001c435:	55                   	push   ebp
c001c436:	e8 23 fe ff ff       	call   c001c25e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001c43b:	83 c4 10             	add    esp,0x10
c001c43e:	43                   	inc    ebx
c001c43f:	83 fb 08             	cmp    ebx,0x8
c001c442:	75 d8                	jne    c001c41c <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001c444:	83 c4 0c             	add    esp,0xc
c001c447:	5b                   	pop    ebx
c001c448:	5e                   	pop    esi
c001c449:	5f                   	pop    edi
c001c44a:	5d                   	pop    ebp
c001c44b:	c3                   	ret    

c001c44c <PCI::detect()>:
c001c44c:	56                   	push   esi
c001c44d:	53                   	push   ebx
c001c44e:	53                   	push   ebx
c001c44f:	31 db                	xor    ebx,ebx
c001c451:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c455:	6a 00                	push   0x0
c001c457:	6a 00                	push   0x0
c001c459:	6a 00                	push   0x0
c001c45b:	56                   	push   esi
c001c45c:	e8 d5 f6 ff ff       	call   c001bb36 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001c461:	83 c4 10             	add    esp,0x10
c001c464:	a8 80                	test   al,0x80
c001c466:	75 21                	jne    c001c489 <PCI::detect()+0x3d>
c001c468:	51                   	push   ecx
c001c469:	51                   	push   ecx
c001c46a:	6a 00                	push   0x0
c001c46c:	56                   	push   esi
c001c46d:	e8 e2 fb ff ff       	call   c001c054 <PCI::checkBus(unsigned char)>
c001c472:	83 c4 10             	add    esp,0x10
c001c475:	eb 2a                	jmp    c001c4a1 <PCI::detect()+0x55>
c001c477:	52                   	push   edx
c001c478:	52                   	push   edx
c001c479:	53                   	push   ebx
c001c47a:	43                   	inc    ebx
c001c47b:	56                   	push   esi
c001c47c:	e8 d3 fb ff ff       	call   c001c054 <PCI::checkBus(unsigned char)>
c001c481:	83 c4 10             	add    esp,0x10
c001c484:	83 fb 08             	cmp    ebx,0x8
c001c487:	74 18                	je     c001c4a1 <PCI::detect()+0x55>
c001c489:	53                   	push   ebx
c001c48a:	6a 00                	push   0x0
c001c48c:	6a 00                	push   0x0
c001c48e:	56                   	push   esi
c001c48f:	e8 7e f6 ff ff       	call   c001bb12 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001c494:	83 c4 10             	add    esp,0x10
c001c497:	0f b7 c0             	movzx  eax,ax
c001c49a:	3d ff ff 00 00       	cmp    eax,0xffff
c001c49f:	74 d6                	je     c001c477 <PCI::detect()+0x2b>
c001c4a1:	58                   	pop    eax
c001c4a2:	5b                   	pop    ebx
c001c4a3:	5e                   	pop    esi
c001c4a4:	c3                   	ret    
c001c4a5:	90                   	nop

c001c4a6 <IDE::close(int, int, void*)>:
c001c4a6:	83 c8 ff             	or     eax,0xffffffff
c001c4a9:	c3                   	ret    

c001c4aa <IDE::IDE()>:
c001c4aa:	83 ec 0c             	sub    esp,0xc
c001c4ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4b1:	83 ec 08             	sub    esp,0x8
c001c4b4:	68 50 35 02 c0       	push   0xc0023550
c001c4b9:	50                   	push   eax
c001c4ba:	e8 dd ce fe ff       	call   c000939c <HardDiskController::HardDiskController(char const*)>
c001c4bf:	83 c4 10             	add    esp,0x10
c001c4c2:	ba 64 36 02 c0       	mov    edx,0xc0023664
c001c4c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4cb:	89 10                	mov    DWORD PTR [eax],edx
c001c4cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4d1:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001c4d8:	90                   	nop
c001c4d9:	83 c4 0c             	add    esp,0xc
c001c4dc:	c3                   	ret    
c001c4dd:	90                   	nop

c001c4de <IDE::prepareInterrupt(unsigned char)>:
c001c4de:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c4e3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c4e7:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001c4ef:	c3                   	ret    

c001c4f0 <selectDrive(unsigned char, unsigned char)>:
c001c4f0:	c3                   	ret    
c001c4f1:	90                   	nop

c001c4f2 <IDE::getBase(unsigned char)>:
c001c4f2:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001c4f7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c4fb:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001c503:	c3                   	ret    

c001c504 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001c504:	55                   	push   ebp
c001c505:	57                   	push   edi
c001c506:	56                   	push   esi
c001c507:	53                   	push   ebx
c001c508:	83 ec 1c             	sub    esp,0x1c
c001c50b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001c50f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001c513:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001c517:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c51b:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001c51e:	80 f9 03             	cmp    cl,0x3
c001c521:	77 4f                	ja     c001c572 <IDE::write(unsigned char, unsigned char, unsigned char)+0x6e>
c001c523:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c527:	0f b6 f2             	movzx  esi,dl
c001c52a:	0f b6 db             	movzx  ebx,bl
c001c52d:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001c530:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001c535:	80 ca 80             	or     dl,0x80
c001c538:	52                   	push   edx
c001c539:	6a 0c                	push   0xc
c001c53b:	56                   	push   esi
c001c53c:	57                   	push   edi
c001c53d:	e8 c2 ff ff ff       	call   c001c504 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c542:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c001c547:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c54b:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001c54f:	ee                   	out    dx,al
c001c550:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001c555:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001c559:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001c55d:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001c565:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001c569:	83 c4 2c             	add    esp,0x2c
c001c56c:	5b                   	pop    ebx
c001c56d:	5e                   	pop    esi
c001c56e:	5f                   	pop    edi
c001c56f:	5d                   	pop    ebp
c001c570:	eb 92                	jmp    c001c504 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c572:	0f b6 cb             	movzx  ecx,bl
c001c575:	83 f9 07             	cmp    ecx,0x7
c001c578:	77 12                	ja     c001c58c <IDE::write(unsigned char, unsigned char, unsigned char)+0x88>
c001c57a:	0f b6 d2             	movzx  edx,dl
c001c57d:	0f b6 db             	movzx  ebx,bl
c001c580:	66 8b 94 d7 5a 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15a]
c001c588:	01 da                	add    edx,ebx
c001c58a:	eb 2f                	jmp    c001c5bb <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001c58c:	83 f9 0d             	cmp    ecx,0xd
c001c58f:	77 13                	ja     c001c5a4 <IDE::write(unsigned char, unsigned char, unsigned char)+0xa0>
c001c591:	0f b6 d2             	movzx  edx,dl
c001c594:	0f b6 db             	movzx  ebx,bl
c001c597:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001c59e:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001c5a2:	eb 17                	jmp    c001c5bb <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001c5a4:	83 f9 15             	cmp    ecx,0x15
c001c5a7:	77 13                	ja     c001c5bc <IDE::write(unsigned char, unsigned char, unsigned char)+0xb8>
c001c5a9:	0f b6 d2             	movzx  edx,dl
c001c5ac:	0f b6 db             	movzx  ebx,bl
c001c5af:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001c5b7:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001c5bb:	ee                   	out    dx,al
c001c5bc:	83 c4 1c             	add    esp,0x1c
c001c5bf:	5b                   	pop    ebx
c001c5c0:	5e                   	pop    esi
c001c5c1:	5f                   	pop    edi
c001c5c2:	5d                   	pop    ebp
c001c5c3:	c3                   	ret    

c001c5c4 <IDE::read(unsigned char, unsigned char)>:
c001c5c4:	57                   	push   edi
c001c5c5:	56                   	push   esi
c001c5c6:	53                   	push   ebx
c001c5c7:	83 ec 10             	sub    esp,0x10
c001c5ca:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001c5ce:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001c5d2:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001c5d6:	8d 42 f8             	lea    eax,[edx-0x8]
c001c5d9:	3c 03                	cmp    al,0x3
c001c5db:	77 48                	ja     c001c625 <IDE::read(unsigned char, unsigned char)+0x61>
c001c5dd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001c5e1:	0f b6 f1             	movzx  esi,cl
c001c5e4:	8d 7e 2a             	lea    edi,[esi+0x2a]
c001c5e7:	0f b6 44 fb 10       	movzx  eax,BYTE PTR [ebx+edi*8+0x10]
c001c5ec:	0c 80                	or     al,0x80
c001c5ee:	50                   	push   eax
c001c5ef:	6a 0c                	push   0xc
c001c5f1:	56                   	push   esi
c001c5f2:	53                   	push   ebx
c001c5f3:	e8 0c ff ff ff       	call   c001c504 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c5f8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c5fc:	66 8b 44 fb 0a       	mov    ax,WORD PTR [ebx+edi*8+0xa]
c001c601:	0f b6 d2             	movzx  edx,dl
c001c604:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001c608:	ec                   	in     al,dx
c001c609:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001c60d:	0f b6 54 fb 10       	movzx  edx,BYTE PTR [ebx+edi*8+0x10]
c001c612:	52                   	push   edx
c001c613:	6a 0c                	push   0xc
c001c615:	56                   	push   esi
c001c616:	53                   	push   ebx
c001c617:	e8 e8 fe ff ff       	call   c001c504 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c61c:	83 c4 20             	add    esp,0x20
c001c61f:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001c623:	eb 4c                	jmp    c001c671 <IDE::read(unsigned char, unsigned char)+0xad>
c001c625:	0f b6 f2             	movzx  esi,dl
c001c628:	83 fe 07             	cmp    esi,0x7
c001c62b:	77 12                	ja     c001c63f <IDE::read(unsigned char, unsigned char)+0x7b>
c001c62d:	0f b6 c9             	movzx  ecx,cl
c001c630:	0f b6 d2             	movzx  edx,dl
c001c633:	66 8b 84 cb 5a 01 00 00 	mov    ax,WORD PTR [ebx+ecx*8+0x15a]
c001c63b:	01 c2                	add    edx,eax
c001c63d:	eb 31                	jmp    c001c670 <IDE::read(unsigned char, unsigned char)+0xac>
c001c63f:	83 fe 0d             	cmp    esi,0xd
c001c642:	77 13                	ja     c001c657 <IDE::read(unsigned char, unsigned char)+0x93>
c001c644:	0f b6 c9             	movzx  ecx,cl
c001c647:	0f b6 d2             	movzx  edx,dl
c001c64a:	8b 84 cb 5c 01 00 00 	mov    eax,DWORD PTR [ebx+ecx*8+0x15c]
c001c651:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001c655:	eb 19                	jmp    c001c670 <IDE::read(unsigned char, unsigned char)+0xac>
c001c657:	31 c0                	xor    eax,eax
c001c659:	83 fe 15             	cmp    esi,0x15
c001c65c:	77 13                	ja     c001c671 <IDE::read(unsigned char, unsigned char)+0xad>
c001c65e:	0f b6 c9             	movzx  ecx,cl
c001c661:	0f b6 d2             	movzx  edx,dl
c001c664:	66 8b 84 cb 5e 01 00 00 	mov    ax,WORD PTR [ebx+ecx*8+0x15e]
c001c66c:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001c670:	ec                   	in     al,dx
c001c671:	83 c4 10             	add    esp,0x10
c001c674:	5b                   	pop    ebx
c001c675:	5e                   	pop    esi
c001c676:	5f                   	pop    edi
c001c677:	c3                   	ret    

c001c678 <IDE::waitInterrupt(unsigned char)>:
c001c678:	55                   	push   ebp
c001c679:	57                   	push   edi
c001c67a:	56                   	push   esi
c001c67b:	53                   	push   ebx
c001c67c:	31 db                	xor    ebx,ebx
c001c67e:	83 ec 0c             	sub    esp,0xc
c001c681:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001c685:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001c68a:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001c692:	89 e8                	mov    eax,ebp
c001c694:	84 c0                	test   al,al
c001c696:	75 30                	jne    c001c6c8 <IDE::waitInterrupt(unsigned char)+0x50>
c001c698:	50                   	push   eax
c001c699:	6a 0c                	push   0xc
c001c69b:	56                   	push   esi
c001c69c:	57                   	push   edi
c001c69d:	e8 22 ff ff ff       	call   c001c5c4 <IDE::read(unsigned char, unsigned char)>
c001c6a2:	83 c4 10             	add    esp,0x10
c001c6a5:	a8 01                	test   al,0x1
c001c6a7:	75 27                	jne    c001c6d0 <IDE::waitInterrupt(unsigned char)+0x58>
c001c6a9:	f6 c3 04             	test   bl,0x4
c001c6ac:	75 12                	jne    c001c6c0 <IDE::waitInterrupt(unsigned char)+0x48>
c001c6ae:	83 fb 32             	cmp    ebx,0x32
c001c6b1:	7e 0d                	jle    c001c6c0 <IDE::waitInterrupt(unsigned char)+0x48>
c001c6b3:	83 ec 0c             	sub    esp,0xc
c001c6b6:	6a 64                	push   0x64
c001c6b8:	e8 0b 8f ff ff       	call   c00155c8 <milliTenthSleep(unsigned int)>
c001c6bd:	83 c4 10             	add    esp,0x10
c001c6c0:	83 fb 3c             	cmp    ebx,0x3c
c001c6c3:	74 0b                	je     c001c6d0 <IDE::waitInterrupt(unsigned char)+0x58>
c001c6c5:	43                   	inc    ebx
c001c6c6:	eb c2                	jmp    c001c68a <IDE::waitInterrupt(unsigned char)+0x12>
c001c6c8:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001c6d0:	83 c4 0c             	add    esp,0xc
c001c6d3:	89 e8                	mov    eax,ebp
c001c6d5:	5b                   	pop    ebx
c001c6d6:	5e                   	pop    esi
c001c6d7:	5f                   	pop    edi
c001c6d8:	5d                   	pop    ebp
c001c6d9:	c3                   	ret    

c001c6da <ideChannel0IRQHandler(regs*, void*)>:
c001c6da:	83 ec 10             	sub    esp,0x10
c001c6dd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c6e1:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001c6e8:	6a 07                	push   0x7
c001c6ea:	6a 00                	push   0x0
c001c6ec:	50                   	push   eax
c001c6ed:	e8 d2 fe ff ff       	call   c001c5c4 <IDE::read(unsigned char, unsigned char)>
c001c6f2:	83 c4 1c             	add    esp,0x1c
c001c6f5:	c3                   	ret    

c001c6f6 <ideChannel1IRQHandler(regs*, void*)>:
c001c6f6:	83 ec 10             	sub    esp,0x10
c001c6f9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c6fd:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001c704:	6a 07                	push   0x7
c001c706:	6a 01                	push   0x1
c001c708:	50                   	push   eax
c001c709:	e8 b6 fe ff ff       	call   c001c5c4 <IDE::read(unsigned char, unsigned char)>
c001c70e:	83 c4 1c             	add    esp,0x1c
c001c711:	c3                   	ret    

c001c712 <IDE::enableIRQs(unsigned char, bool)>:
c001c712:	57                   	push   edi
c001c713:	b8 02 00 00 00       	mov    eax,0x2
c001c718:	56                   	push   esi
c001c719:	53                   	push   ebx
c001c71a:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001c71f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c723:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001c727:	74 02                	je     c001c72b <IDE::enableIRQs(unsigned char, bool)+0x19>
c001c729:	31 c0                	xor    eax,eax
c001c72b:	0f b6 db             	movzx  ebx,bl
c001c72e:	bf 04 00 00 00       	mov    edi,0x4
c001c733:	88 84 de 60 01 00 00 	mov    BYTE PTR [esi+ebx*8+0x160],al
c001c73a:	50                   	push   eax
c001c73b:	6a 0c                	push   0xc
c001c73d:	53                   	push   ebx
c001c73e:	56                   	push   esi
c001c73f:	e8 c0 fd ff ff       	call   c001c504 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c744:	83 c4 10             	add    esp,0x10
c001c747:	50                   	push   eax
c001c748:	6a 0c                	push   0xc
c001c74a:	53                   	push   ebx
c001c74b:	56                   	push   esi
c001c74c:	e8 73 fe ff ff       	call   c001c5c4 <IDE::read(unsigned char, unsigned char)>
c001c751:	83 c4 10             	add    esp,0x10
c001c754:	4f                   	dec    edi
c001c755:	75 f0                	jne    c001c747 <IDE::enableIRQs(unsigned char, bool)+0x35>
c001c757:	5b                   	pop    ebx
c001c758:	5e                   	pop    esi
c001c759:	5f                   	pop    edi
c001c75a:	c3                   	ret    
c001c75b:	90                   	nop

c001c75c <IDE::open(int, int, void*)>:
c001c75c:	55                   	push   ebp
c001c75d:	57                   	push   edi
c001c75e:	56                   	push   esi
c001c75f:	53                   	push   ebx
c001c760:	83 ec 1c             	sub    esp,0x1c
c001c763:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001c767:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001c76e:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001c777:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001c780:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001c787:	0f 85 13 02 00 00    	jne    c001c9a0 <IDE::open(int, int, void*)+0x244>
c001c78d:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001c793:	a8 70                	test   al,0x70
c001c795:	75 44                	jne    c001c7db <IDE::open(int, int, void*)+0x7f>
c001c797:	ba 20 84 00 00       	mov    edx,0x8420
c001c79c:	0f a3 c2             	bt     edx,eax
c001c79f:	73 3a                	jae    c001c7db <IDE::open(int, int, void*)+0x7f>
c001c7a1:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001c7a7:	83 ec 0c             	sub    esp,0xc
c001c7aa:	83 e0 fc             	and    eax,0xfffffffc
c001c7ad:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001c7b4:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001c7ba:	83 e0 fc             	and    eax,0xfffffffc
c001c7bd:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001c7c4:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001c7ca:	83 e0 fc             	and    eax,0xfffffffc
c001c7cd:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001c7d4:	68 05 13 02 c0       	push   0xc0021305
c001c7d9:	eb 60                	jmp    c001c83b <IDE::open(int, int, void*)+0xdf>
c001c7db:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001c7e5:	be 64 00 00 00       	mov    esi,0x64
c001c7ea:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001c7f4:	57                   	push   edi
c001c7f5:	57                   	push   edi
c001c7f6:	68 68 35 02 c0       	push   0xc0023568
c001c7fb:	8d 7c 24 12          	lea    edi,[esp+0x12]
c001c7ff:	57                   	push   edi
c001c800:	e8 4b 3e fe ff       	call   c0000650 <strcpy>
c001c805:	0f b6 8b 1f 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11f]
c001c80c:	31 d2                	xor    edx,edx
c001c80e:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c811:	89 c8                	mov    eax,ecx
c001c813:	f7 f6                	div    esi
c001c815:	be 0a 00 00 00       	mov    esi,0xa
c001c81a:	31 d2                	xor    edx,edx
c001c81c:	83 c0 30             	add    eax,0x30
c001c81f:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001c823:	89 c8                	mov    eax,ecx
c001c825:	f7 f6                	div    esi
c001c827:	89 d1                	mov    ecx,edx
c001c829:	31 d2                	xor    edx,edx
c001c82b:	f7 f6                	div    esi
c001c82d:	83 c1 30             	add    ecx,0x30
c001c830:	88 4c 24 1a          	mov    BYTE PTR [esp+0x1a],cl
c001c834:	83 c2 30             	add    edx,0x30
c001c837:	88 54 24 19          	mov    BYTE PTR [esp+0x19],dl
c001c83b:	e8 63 fd fe ff       	call   c000c5a3 <KeSetBootMessage(char const*)>
c001c840:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001c847:	bf f8 0c 00 00       	mov    edi,0xcf8
c001c84c:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001c853:	83 c4 10             	add    esp,0x10
c001c856:	89 fa                	mov    edx,edi
c001c858:	c1 e1 10             	shl    ecx,0x10
c001c85b:	c1 e0 0b             	shl    eax,0xb
c001c85e:	09 c1                	or     ecx,eax
c001c860:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001c867:	c1 e0 08             	shl    eax,0x8
c001c86a:	09 c1                	or     ecx,eax
c001c86c:	89 c8                	mov    eax,ecx
c001c86e:	0d 08 00 00 80       	or     eax,0x80000008
c001c873:	ef                   	out    dx,eax
c001c874:	be fc 0c 00 00       	mov    esi,0xcfc
c001c879:	89 f2                	mov    edx,esi
c001c87b:	ed                   	in     eax,dx
c001c87c:	c1 e8 10             	shr    eax,0x10
c001c87f:	3d ff ff 00 00       	cmp    eax,0xffff
c001c884:	0f 84 e1 00 00 00    	je     c001c96b <IDE::open(int, int, void*)+0x20f>
c001c88a:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001c890:	89 fa                	mov    edx,edi
c001c892:	89 c8                	mov    eax,ecx
c001c894:	ef                   	out    dx,eax
c001c895:	b0 fe                	mov    al,0xfe
c001c897:	89 f2                	mov    edx,esi
c001c899:	ee                   	out    dx,al
c001c89a:	89 c8                	mov    eax,ecx
c001c89c:	89 fa                	mov    edx,edi
c001c89e:	ef                   	out    dx,eax
c001c89f:	89 f2                	mov    edx,esi
c001c8a1:	ed                   	in     eax,dx
c001c8a2:	3c fe                	cmp    al,0xfe
c001c8a4:	0f 85 83 00 00 00    	jne    c001c92d <IDE::open(int, int, void*)+0x1d1>
c001c8aa:	83 ec 0c             	sub    esp,0xc
c001c8ad:	68 3b 13 02 c0       	push   0xc002133b
c001c8b2:	e8 ec fc fe ff       	call   c000c5a3 <KeSetBootMessage(char const*)>
c001c8b7:	c7 04 24 6e 35 02 c0 	mov    DWORD PTR [esp],0xc002356e
c001c8be:	e8 8b a6 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001c8c3:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001c8cd:	c7 04 24 6c 15 02 c0 	mov    DWORD PTR [esp],0xc002156c
c001c8d4:	e8 ca fc fe ff       	call   c000c5a3 <KeSetBootMessage(char const*)>
c001c8d9:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001c8e0:	89 fa                	mov    edx,edi
c001c8e2:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001c8e9:	c1 e1 10             	shl    ecx,0x10
c001c8ec:	c1 e0 08             	shl    eax,0x8
c001c8ef:	09 c1                	or     ecx,eax
c001c8f1:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001c8f8:	c1 e0 0b             	shl    eax,0xb
c001c8fb:	09 c1                	or     ecx,eax
c001c8fd:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001c903:	89 c8                	mov    eax,ecx
c001c905:	ef                   	out    dx,eax
c001c906:	8b ab 50 01 00 00    	mov    ebp,DWORD PTR [ebx+0x150]
c001c90c:	89 f2                	mov    edx,esi
c001c90e:	89 e8                	mov    eax,ebp
c001c910:	ee                   	out    dx,al
c001c911:	89 c8                	mov    eax,ecx
c001c913:	89 fa                	mov    edx,edi
c001c915:	ef                   	out    dx,eax
c001c916:	89 f2                	mov    edx,esi
c001c918:	ed                   	in     eax,dx
c001c919:	0f b6 c0             	movzx  eax,al
c001c91c:	83 c4 10             	add    esp,0x10
c001c91f:	39 e8                	cmp    eax,ebp
c001c921:	74 58                	je     c001c97b <IDE::open(int, int, void*)+0x21f>
c001c923:	83 ec 0c             	sub    esp,0xc
c001c926:	68 83 35 02 c0       	push   0xc0023583
c001c92b:	eb 46                	jmp    c001c973 <IDE::open(int, int, void*)+0x217>
c001c92d:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001c936:	75 29                	jne    c001c961 <IDE::open(int, int, void*)+0x205>
c001c938:	0f b6 83 1f 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11f]
c001c93f:	3d 8a 00 00 00       	cmp    eax,0x8a
c001c944:	74 05                	je     c001c94b <IDE::open(int, int, void*)+0x1ef>
c001c946:	83 c0 80             	add    eax,0xffffff80
c001c949:	75 16                	jne    c001c961 <IDE::open(int, int, void*)+0x205>
c001c94b:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001c952:	83 ec 0c             	sub    esp,0xc
c001c955:	68 29 23 02 c0       	push   0xc0022329
c001c95a:	e8 44 fc fe ff       	call   c000c5a3 <KeSetBootMessage(char const*)>
c001c95f:	eb 17                	jmp    c001c978 <IDE::open(int, int, void*)+0x21c>
c001c961:	83 ec 0c             	sub    esp,0xc
c001c964:	68 8b 35 02 c0       	push   0xc002358b
c001c969:	eb 08                	jmp    c001c973 <IDE::open(int, int, void*)+0x217>
c001c96b:	83 ec 0c             	sub    esp,0xc
c001c96e:	68 bc 35 02 c0       	push   0xc00235bc
c001c973:	e8 ae 22 ff ff       	call   c000ec26 <KePanic(char const*)>
c001c978:	83 c4 10             	add    esp,0x10
c001c97b:	f6 83 1f 01 00 00 80 	test   BYTE PTR [ebx+0x11f],0x80
c001c982:	74 56                	je     c001c9da <IDE::open(int, int, void*)+0x27e>
c001c984:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001c98a:	83 e0 fc             	and    eax,0xfffffffc
c001c98d:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001c994:	83 c0 08             	add    eax,0x8
c001c997:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001c99e:	eb 3a                	jmp    c001c9da <IDE::open(int, int, void*)+0x27e>
c001c9a0:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001c9a7:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001c9ad:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001c9b4:	05 06 02 00 00       	add    eax,0x206
c001c9b9:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001c9c0:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001c9c7:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001c9ce:	05 06 02 00 00       	add    eax,0x206
c001c9d3:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001c9da:	83 ec 0c             	sub    esp,0xc
c001c9dd:	68 63 1a 02 c0       	push   0xc0021a63
c001c9e2:	e8 bc fb fe ff       	call   c000c5a3 <KeSetBootMessage(char const*)>
c001c9e7:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001c9ed:	83 c4 10             	add    esp,0x10
c001c9f0:	89 c2                	mov    edx,eax
c001c9f2:	83 e2 0f             	and    edx,0xf
c001c9f5:	83 fa 08             	cmp    edx,0x8
c001c9f8:	75 0a                	jne    c001ca04 <IDE::open(int, int, void*)+0x2a8>
c001c9fa:	83 e8 02             	sub    eax,0x2
c001c9fd:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001ca04:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001ca0a:	89 c2                	mov    edx,eax
c001ca0c:	83 e2 0f             	and    edx,0xf
c001ca0f:	83 fa 08             	cmp    edx,0x8
c001ca12:	75 0a                	jne    c001ca1e <IDE::open(int, int, void*)+0x2c2>
c001ca14:	83 e8 02             	sub    eax,0x2
c001ca17:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001ca1e:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001ca25:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001ca2c:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001ca2f:	89 d0                	mov    eax,edx
c001ca31:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001ca35:	8d 7a 01             	lea    edi,[edx+0x1]
c001ca38:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001ca3c:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001ca40:	83 e1 3f             	and    ecx,0x3f
c001ca43:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001ca47:	89 f9                	mov    ecx,edi
c001ca49:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001ca50:	8d 78 02             	lea    edi,[eax+0x2]
c001ca53:	0f b6 c9             	movzx  ecx,cl
c001ca56:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001ca59:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001ca5d:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001ca61:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001ca65:	83 e2 3f             	and    edx,0x3f
c001ca68:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001ca6c:	89 f9                	mov    ecx,edi
c001ca6e:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001ca74:	8d 78 03             	lea    edi,[eax+0x3]
c001ca77:	0f b6 d1             	movzx  edx,cl
c001ca7a:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001ca7d:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001ca81:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001ca85:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001ca89:	83 e1 3f             	and    ecx,0x3f
c001ca8c:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001ca90:	89 fa                	mov    edx,edi
c001ca92:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001ca98:	8d 78 04             	lea    edi,[eax+0x4]
c001ca9b:	0f b6 ca             	movzx  ecx,dl
c001ca9e:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001caa1:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001caa5:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001caa9:	89 fa                	mov    edx,edi
c001caab:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001cab1:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001cab5:	83 e2 3f             	and    edx,0x3f
c001cab8:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001cabc:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001cac3:	66 85 f6             	test   si,si
c001cac6:	74 24                	je     c001caec <IDE::open(int, int, void*)+0x390>
c001cac8:	89 f9                	mov    ecx,edi
c001caca:	83 c0 05             	add    eax,0x5
c001cacd:	0f b6 d1             	movzx  edx,cl
c001cad0:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001cad3:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001cad7:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001cadb:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001cae1:	8a 44 93 07          	mov    al,BYTE PTR [ebx+edx*4+0x7]
c001cae5:	83 e0 3f             	and    eax,0x3f
c001cae8:	88 44 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],al
c001caec:	83 ec 0c             	sub    esp,0xc
c001caef:	68 e6 35 02 c0       	push   0xc00235e6
c001caf4:	e8 aa fa fe ff       	call   c000c5a3 <KeSetBootMessage(char const*)>
c001caf9:	58                   	pop    eax
c001cafa:	5a                   	pop    edx
c001cafb:	6a 00                	push   0x0
c001cafd:	53                   	push   ebx
c001cafe:	e8 db f9 ff ff       	call   c001c4de <IDE::prepareInterrupt(unsigned char)>
c001cb03:	59                   	pop    ecx
c001cb04:	5e                   	pop    esi
c001cb05:	6a 01                	push   0x1
c001cb07:	53                   	push   ebx
c001cb08:	e8 d1 f9 ff ff       	call   c001c4de <IDE::prepareInterrupt(unsigned char)>
c001cb0d:	c7 04 24 7f 2e 02 c0 	mov    DWORD PTR [esp],0xc0022e7f
c001cb14:	e8 8a fa fe ff       	call   c000c5a3 <KeSetBootMessage(char const*)>
c001cb19:	83 c4 0c             	add    esp,0xc
c001cb1c:	6a 00                	push   0x0
c001cb1e:	6a 00                	push   0x0
c001cb20:	53                   	push   ebx
c001cb21:	e8 ec fb ff ff       	call   c001c712 <IDE::enableIRQs(unsigned char, bool)>
c001cb26:	83 c4 0c             	add    esp,0xc
c001cb29:	6a 00                	push   0x0
c001cb2b:	6a 01                	push   0x1
c001cb2d:	53                   	push   ebx
c001cb2e:	e8 df fb ff ff       	call   c001c712 <IDE::enableIRQs(unsigned char, bool)>
c001cb33:	c7 04 24 e8 35 02 c0 	mov    DWORD PTR [esp],0xc00235e8
c001cb3a:	e8 64 fa fe ff       	call   c000c5a3 <KeSetBootMessage(char const*)>
c001cb3f:	83 c4 10             	add    esp,0x10
c001cb42:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001cb49:	74 3c                	je     c001cb87 <IDE::open(int, int, void*)+0x42b>
c001cb4b:	83 ec 0c             	sub    esp,0xc
c001cb4e:	53                   	push   ebx
c001cb4f:	6a 01                	push   0x1
c001cb51:	68 da c6 01 c0       	push   0xc001c6da
c001cb56:	6a 0e                	push   0xe
c001cb58:	53                   	push   ebx
c001cb59:	e8 90 c4 fe ff       	call   c0008fee <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001cb5e:	83 c4 14             	add    esp,0x14
c001cb61:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001cb67:	53                   	push   ebx
c001cb68:	6a 01                	push   0x1
c001cb6a:	68 f6 c6 01 c0       	push   0xc001c6f6
c001cb6f:	6a 0f                	push   0xf
c001cb71:	53                   	push   ebx
c001cb72:	e8 77 c4 fe ff       	call   c0008fee <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001cb77:	83 c4 14             	add    esp,0x14
c001cb7a:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001cb80:	68 72 17 02 c0       	push   0xc0021772
c001cb85:	eb 40                	jmp    c001cbc7 <IDE::open(int, int, void*)+0x46b>
c001cb87:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001cb91:	83 ec 0c             	sub    esp,0xc
c001cb94:	53                   	push   ebx
c001cb95:	6a 00                	push   0x0
c001cb97:	68 da c6 01 c0       	push   0xc001c6da
c001cb9c:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001cba2:	53                   	push   ebx
c001cba3:	e8 46 c4 fe ff       	call   c0008fee <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001cba8:	83 c4 14             	add    esp,0x14
c001cbab:	53                   	push   ebx
c001cbac:	6a 00                	push   0x0
c001cbae:	68 f6 c6 01 c0       	push   0xc001c6f6
c001cbb3:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001cbb9:	53                   	push   ebx
c001cbba:	e8 2f c4 fe ff       	call   c0008fee <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001cbbf:	83 c4 14             	add    esp,0x14
c001cbc2:	68 18 23 02 c0       	push   0xc0022318
c001cbc7:	e8 d7 f9 fe ff       	call   c000c5a3 <KeSetBootMessage(char const*)>
c001cbcc:	83 c4 10             	add    esp,0x10
c001cbcf:	83 ec 0c             	sub    esp,0xc
c001cbd2:	68 ea 35 02 c0       	push   0xc00235ea
c001cbd7:	e8 c7 f9 fe ff       	call   c000c5a3 <KeSetBootMessage(char const*)>
c001cbdc:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cbde:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cbe1:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001cbe4:	c7 04 24 d6 26 02 c0 	mov    DWORD PTR [esp],0xc00226d6
c001cbeb:	e8 b3 f9 fe ff       	call   c000c5a3 <KeSetBootMessage(char const*)>
c001cbf0:	83 c4 0c             	add    esp,0xc
c001cbf3:	6a 07                	push   0x7
c001cbf5:	6a 00                	push   0x0
c001cbf7:	53                   	push   ebx
c001cbf8:	e8 c7 f9 ff ff       	call   c001c5c4 <IDE::read(unsigned char, unsigned char)>
c001cbfd:	83 c4 0c             	add    esp,0xc
c001cc00:	6a 07                	push   0x7
c001cc02:	6a 01                	push   0x1
c001cc04:	53                   	push   ebx
c001cc05:	e8 ba f9 ff ff       	call   c001c5c4 <IDE::read(unsigned char, unsigned char)>
c001cc0a:	c7 04 24 28 21 02 c0 	mov    DWORD PTR [esp],0xc0022128
c001cc11:	e8 8d f9 fe ff       	call   c000c5a3 <KeSetBootMessage(char const*)>
c001cc16:	83 c4 0c             	add    esp,0xc
c001cc19:	6a 01                	push   0x1
c001cc1b:	6a 00                	push   0x0
c001cc1d:	53                   	push   ebx
c001cc1e:	e8 ef fa ff ff       	call   c001c712 <IDE::enableIRQs(unsigned char, bool)>
c001cc23:	83 c4 0c             	add    esp,0xc
c001cc26:	6a 01                	push   0x1
c001cc28:	6a 01                	push   0x1
c001cc2a:	53                   	push   ebx
c001cc2b:	e8 e2 fa ff ff       	call   c001c712 <IDE::enableIRQs(unsigned char, bool)>
c001cc30:	c7 04 24 ed 35 02 c0 	mov    DWORD PTR [esp],0xc00235ed
c001cc37:	e8 67 f9 fe ff       	call   c000c5a3 <KeSetBootMessage(char const*)>
c001cc3c:	83 c4 2c             	add    esp,0x2c
c001cc3f:	31 c0                	xor    eax,eax
c001cc41:	5b                   	pop    ebx
c001cc42:	5e                   	pop    esi
c001cc43:	5f                   	pop    edi
c001cc44:	5d                   	pop    ebp
c001cc45:	c3                   	ret    

c001cc46 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001cc46:	55                   	push   ebp
c001cc47:	57                   	push   edi
c001cc48:	56                   	push   esi
c001cc49:	53                   	push   ebx
c001cc4a:	83 ec 1c             	sub    esp,0x1c
c001cc4d:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001cc51:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001cc55:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001cc59:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001cc5d:	8d 42 f8             	lea    eax,[edx-0x8]
c001cc60:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001cc64:	3c 03                	cmp    al,0x3
c001cc66:	77 5a                	ja     c001ccc2 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x7c>
c001cc68:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001cc6c:	0f b6 db             	movzx  ebx,bl
c001cc6f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001cc73:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001cc76:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001cc7b:	0c 80                	or     al,0x80
c001cc7d:	50                   	push   eax
c001cc7e:	6a 0c                	push   0xc
c001cc80:	53                   	push   ebx
c001cc81:	56                   	push   esi
c001cc82:	e8 7d f8 ff ff       	call   c001c504 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cc87:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001cc8b:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001cc90:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001cc94:	0f b6 d2             	movzx  edx,dl
c001cc97:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001cc9b:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001cc9d:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001cca2:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001cca6:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001ccaa:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001ccb2:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001ccb6:	83 c4 2c             	add    esp,0x2c
c001ccb9:	5b                   	pop    ebx
c001ccba:	5e                   	pop    esi
c001ccbb:	5f                   	pop    edi
c001ccbc:	5d                   	pop    ebp
c001ccbd:	e9 42 f8 ff ff       	jmp    c001c504 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ccc2:	0f b6 c2             	movzx  eax,dl
c001ccc5:	83 f8 07             	cmp    eax,0x7
c001ccc8:	77 12                	ja     c001ccdc <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x96>
c001ccca:	0f b6 db             	movzx  ebx,bl
c001cccd:	0f b6 c2             	movzx  eax,dl
c001ccd0:	66 8b 94 de 5a 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15a]
c001ccd8:	01 c2                	add    edx,eax
c001ccda:	eb 2f                	jmp    c001cd0b <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001ccdc:	83 f8 0d             	cmp    eax,0xd
c001ccdf:	77 13                	ja     c001ccf4 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xae>
c001cce1:	0f b6 db             	movzx  ebx,bl
c001cce4:	0f b6 d2             	movzx  edx,dl
c001cce7:	8b 84 de 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*8+0x15c]
c001ccee:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001ccf2:	eb 17                	jmp    c001cd0b <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001ccf4:	83 f8 15             	cmp    eax,0x15
c001ccf7:	77 14                	ja     c001cd0d <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc7>
c001ccf9:	0f b6 db             	movzx  ebx,bl
c001ccfc:	0f b6 d2             	movzx  edx,dl
c001ccff:	66 8b 84 de 5e 01 00 00 	mov    ax,WORD PTR [esi+ebx*8+0x15e]
c001cd07:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001cd0b:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001cd0d:	83 c4 1c             	add    esp,0x1c
c001cd10:	5b                   	pop    ebx
c001cd11:	5e                   	pop    esi
c001cd12:	5f                   	pop    edi
c001cd13:	5d                   	pop    ebp
c001cd14:	c3                   	ret    
c001cd15:	90                   	nop

c001cd16 <IDE::detect()>:
c001cd16:	55                   	push   ebp
c001cd17:	57                   	push   edi
c001cd18:	56                   	push   esi
c001cd19:	53                   	push   ebx
c001cd1a:	81 ec 28 02 00 00    	sub    esp,0x228
c001cd20:	8b 9c 24 3c 02 00 00 	mov    ebx,DWORD PTR [esp+0x23c]
c001cd27:	68 ef 35 02 c0       	push   0xc00235ef
c001cd2c:	e8 72 f8 fe ff       	call   c000c5a3 <KeSetBootMessage(char const*)>
c001cd31:	83 c4 10             	add    esp,0x10
c001cd34:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001cd3b:	0f 85 03 04 00 00    	jne    c001d144 <IDE::detect()+0x42e>
c001cd41:	83 ec 0c             	sub    esp,0xc
c001cd44:	31 f6                	xor    esi,esi
c001cd46:	68 f2 35 02 c0       	push   0xc00235f2
c001cd4b:	31 ff                	xor    edi,edi
c001cd4d:	e8 51 f8 fe ff       	call   c000c5a3 <KeSetBootMessage(char const*)>
c001cd52:	83 c4 10             	add    esp,0x10
c001cd55:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001cd5c:	83 ec 0c             	sub    esp,0xc
c001cd5f:	68 f5 35 02 c0       	push   0xc00235f5
c001cd64:	e8 3a f8 fe ff       	call   c000c5a3 <KeSetBootMessage(char const*)>
c001cd69:	83 c4 10             	add    esp,0x10
c001cd6c:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001cd74:	83 ec 0c             	sub    esp,0xc
c001cd77:	31 ed                	xor    ebp,ebp
c001cd79:	68 f8 35 02 c0       	push   0xc00235f8
c001cd7e:	e8 20 f8 fe ff       	call   c000c5a3 <KeSetBootMessage(char const*)>
c001cd83:	89 f8                	mov    eax,edi
c001cd85:	c1 e0 06             	shl    eax,0x6
c001cd88:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001cd90:	c7 04 24 fb 35 02 c0 	mov    DWORD PTR [esp],0xc00235fb
c001cd97:	e8 07 f8 fe ff       	call   c000c5a3 <KeSetBootMessage(char const*)>
c001cd9c:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c001cda0:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001cda4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001cda8:	c1 e0 04             	shl    eax,0x4
c001cdab:	83 c8 a0             	or     eax,0xffffffa0
c001cdae:	0f b6 c0             	movzx  eax,al
c001cdb1:	50                   	push   eax
c001cdb2:	6a 06                	push   0x6
c001cdb4:	56                   	push   esi
c001cdb5:	53                   	push   ebx
c001cdb6:	e8 49 f7 ff ff       	call   c001c504 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cdbb:	83 c4 1c             	add    esp,0x1c
c001cdbe:	6a 0c                	push   0xc
c001cdc0:	56                   	push   esi
c001cdc1:	53                   	push   ebx
c001cdc2:	e8 fd f7 ff ff       	call   c001c5c4 <IDE::read(unsigned char, unsigned char)>
c001cdc7:	83 c4 0c             	add    esp,0xc
c001cdca:	6a 0c                	push   0xc
c001cdcc:	56                   	push   esi
c001cdcd:	53                   	push   ebx
c001cdce:	e8 f1 f7 ff ff       	call   c001c5c4 <IDE::read(unsigned char, unsigned char)>
c001cdd3:	83 c4 0c             	add    esp,0xc
c001cdd6:	6a 0c                	push   0xc
c001cdd8:	56                   	push   esi
c001cdd9:	53                   	push   ebx
c001cdda:	e8 e5 f7 ff ff       	call   c001c5c4 <IDE::read(unsigned char, unsigned char)>
c001cddf:	83 c4 0c             	add    esp,0xc
c001cde2:	6a 0c                	push   0xc
c001cde4:	56                   	push   esi
c001cde5:	53                   	push   ebx
c001cde6:	e8 d9 f7 ff ff       	call   c001c5c4 <IDE::read(unsigned char, unsigned char)>
c001cdeb:	c7 04 24 fe 35 02 c0 	mov    DWORD PTR [esp],0xc00235fe
c001cdf2:	e8 ac f7 fe ff       	call   c000c5a3 <KeSetBootMessage(char const*)>
c001cdf7:	68 ec 00 00 00       	push   0xec
c001cdfc:	6a 07                	push   0x7
c001cdfe:	56                   	push   esi
c001cdff:	53                   	push   ebx
c001ce00:	e8 ff f6 ff ff       	call   c001c504 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ce05:	83 c4 1c             	add    esp,0x1c
c001ce08:	6a 0c                	push   0xc
c001ce0a:	56                   	push   esi
c001ce0b:	53                   	push   ebx
c001ce0c:	e8 b3 f7 ff ff       	call   c001c5c4 <IDE::read(unsigned char, unsigned char)>
c001ce11:	83 c4 0c             	add    esp,0xc
c001ce14:	6a 0c                	push   0xc
c001ce16:	56                   	push   esi
c001ce17:	53                   	push   ebx
c001ce18:	e8 a7 f7 ff ff       	call   c001c5c4 <IDE::read(unsigned char, unsigned char)>
c001ce1d:	83 c4 0c             	add    esp,0xc
c001ce20:	6a 0c                	push   0xc
c001ce22:	56                   	push   esi
c001ce23:	53                   	push   ebx
c001ce24:	e8 9b f7 ff ff       	call   c001c5c4 <IDE::read(unsigned char, unsigned char)>
c001ce29:	83 c4 0c             	add    esp,0xc
c001ce2c:	6a 0c                	push   0xc
c001ce2e:	56                   	push   esi
c001ce2f:	53                   	push   ebx
c001ce30:	e8 8f f7 ff ff       	call   c001c5c4 <IDE::read(unsigned char, unsigned char)>
c001ce35:	c7 04 24 01 36 02 c0 	mov    DWORD PTR [esp],0xc0023601
c001ce3c:	e8 62 f7 fe ff       	call   c000c5a3 <KeSetBootMessage(char const*)>
c001ce41:	83 c4 0c             	add    esp,0xc
c001ce44:	6a 0c                	push   0xc
c001ce46:	56                   	push   esi
c001ce47:	53                   	push   ebx
c001ce48:	e8 77 f7 ff ff       	call   c001c5c4 <IDE::read(unsigned char, unsigned char)>
c001ce4d:	83 c4 10             	add    esp,0x10
c001ce50:	84 c0                	test   al,al
c001ce52:	75 1f                	jne    c001ce73 <IDE::detect()+0x15d>
c001ce54:	83 ec 0c             	sub    esp,0xc
c001ce57:	68 04 36 02 c0       	push   0xc0023604
c001ce5c:	e8 42 f7 fe ff       	call   c000c5a3 <KeSetBootMessage(char const*)>
c001ce61:	e9 ba 02 00 00       	jmp    c001d120 <IDE::detect()+0x40a>
c001ce66:	a8 80                	test   al,0x80
c001ce68:	74 21                	je     c001ce8b <IDE::detect()+0x175>
c001ce6a:	45                   	inc    ebp
c001ce6b:	81 fd 17 01 00 00    	cmp    ebp,0x117
c001ce71:	7f 1e                	jg     c001ce91 <IDE::detect()+0x17b>
c001ce73:	50                   	push   eax
c001ce74:	6a 0c                	push   0xc
c001ce76:	56                   	push   esi
c001ce77:	53                   	push   ebx
c001ce78:	e8 47 f7 ff ff       	call   c001c5c4 <IDE::read(unsigned char, unsigned char)>
c001ce7d:	83 c4 10             	add    esp,0x10
c001ce80:	a8 01                	test   al,0x1
c001ce82:	74 e2                	je     c001ce66 <IDE::detect()+0x150>
c001ce84:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c001ce89:	eb 22                	jmp    c001cead <IDE::detect()+0x197>
c001ce8b:	a8 08                	test   al,0x8
c001ce8d:	74 db                	je     c001ce6a <IDE::detect()+0x154>
c001ce8f:	eb 17                	jmp    c001cea8 <IDE::detect()+0x192>
c001ce91:	83 ec 0c             	sub    esp,0xc
c001ce94:	6a 32                	push   0x32
c001ce96:	e8 2d 87 ff ff       	call   c00155c8 <milliTenthSleep(unsigned int)>
c001ce9b:	83 c4 10             	add    esp,0x10
c001ce9e:	81 fd 2c 01 00 00    	cmp    ebp,0x12c
c001cea4:	75 cd                	jne    c001ce73 <IDE::detect()+0x15d>
c001cea6:	eb dc                	jmp    c001ce84 <IDE::detect()+0x16e>
c001cea8:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c001cead:	83 ec 0c             	sub    esp,0xc
c001ceb0:	68 07 36 02 c0       	push   0xc0023607
c001ceb5:	e8 e9 f6 fe ff       	call   c000c5a3 <KeSetBootMessage(char const*)>
c001ceba:	83 c4 10             	add    esp,0x10
c001cebd:	f6 44 24 03 01       	test   BYTE PTR [esp+0x3],0x1
c001cec2:	74 57                	je     c001cf1b <IDE::detect()+0x205>
c001cec4:	50                   	push   eax
c001cec5:	6a 04                	push   0x4
c001cec7:	56                   	push   esi
c001cec8:	53                   	push   ebx
c001cec9:	e8 f6 f6 ff ff       	call   c001c5c4 <IDE::read(unsigned char, unsigned char)>
c001cece:	83 c4 0c             	add    esp,0xc
c001ced1:	6a 05                	push   0x5
c001ced3:	56                   	push   esi
c001ced4:	53                   	push   ebx
c001ced5:	89 c5                	mov    ebp,eax
c001ced7:	e8 e8 f6 ff ff       	call   c001c5c4 <IDE::read(unsigned char, unsigned char)>
c001cedc:	89 e9                	mov    ecx,ebp
c001cede:	83 c4 10             	add    esp,0x10
c001cee1:	0f b6 e9             	movzx  ebp,cl
c001cee4:	83 fd 14             	cmp    ebp,0x14
c001cee7:	75 04                	jne    c001ceed <IDE::detect()+0x1d7>
c001cee9:	3c eb                	cmp    al,0xeb
c001ceeb:	74 11                	je     c001cefe <IDE::detect()+0x1e8>
c001ceed:	83 fd 69             	cmp    ebp,0x69
c001cef0:	0f 85 2d 02 00 00    	jne    c001d123 <IDE::detect()+0x40d>
c001cef6:	3c 96                	cmp    al,0x96
c001cef8:	0f 85 25 02 00 00    	jne    c001d123 <IDE::detect()+0x40d>
c001cefe:	68 a1 00 00 00       	push   0xa1
c001cf03:	6a 07                	push   0x7
c001cf05:	56                   	push   esi
c001cf06:	53                   	push   ebx
c001cf07:	e8 f8 f5 ff ff       	call   c001c504 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf0c:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001cf13:	e8 b0 86 ff ff       	call   c00155c8 <milliTenthSleep(unsigned int)>
c001cf18:	83 c4 10             	add    esp,0x10
c001cf1b:	83 ec 0c             	sub    esp,0xc
c001cf1e:	89 fd                	mov    ebp,edi
c001cf20:	68 0a 36 02 c0       	push   0xc002360a
c001cf25:	e8 79 f6 fe ff       	call   c000c5a3 <KeSetBootMessage(char const*)>
c001cf2a:	8d 54 24 20          	lea    edx,[esp+0x20]
c001cf2e:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c001cf35:	c1 e5 06             	shl    ebp,0x6
c001cf38:	52                   	push   edx
c001cf39:	01 dd                	add    ebp,ebx
c001cf3b:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001cf3f:	6a 00                	push   0x0
c001cf41:	56                   	push   esi
c001cf42:	53                   	push   ebx
c001cf43:	e8 fe fc ff ff       	call   c001cc46 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001cf48:	83 c4 14             	add    esp,0x14
c001cf4b:	68 0e 36 02 c0       	push   0xc002360e
c001cf50:	e8 4e f6 fe ff       	call   c000c5a3 <KeSetBootMessage(char const*)>
c001cf55:	0f b6 44 24 13       	movzx  eax,BYTE PTR [esp+0x13]
c001cf5a:	c6 85 6c 01 00 00 01 	mov    BYTE PTR [ebp+0x16c],0x1
c001cf61:	66 89 85 70 01 00 00 	mov    WORD PTR [ebp+0x170],ax
c001cf68:	89 f0                	mov    eax,esi
c001cf6a:	88 85 6d 01 00 00    	mov    BYTE PTR [ebp+0x16d],al
c001cf70:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001cf74:	88 85 6e 01 00 00    	mov    BYTE PTR [ebp+0x16e],al
c001cf7a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cf7e:	66 89 85 72 01 00 00 	mov    WORD PTR [ebp+0x172],ax
c001cf85:	66 8b 84 24 82 00 00 00 	mov    ax,WORD PTR [esp+0x82]
c001cf8d:	66 89 85 74 01 00 00 	mov    WORD PTR [ebp+0x174],ax
c001cf94:	0f b6 84 24 c4 00 00 00 	movzx  eax,BYTE PTR [esp+0xc4]
c001cf9c:	89 85 78 01 00 00    	mov    DWORD PTR [ebp+0x178],eax
c001cfa2:	c7 04 24 12 36 02 c0 	mov    DWORD PTR [esp],0xc0023612
c001cfa9:	e8 f5 f5 fe ff       	call   c000c5a3 <KeSetBootMessage(char const*)>
c001cfae:	83 c4 10             	add    esp,0x10
c001cfb1:	f6 85 7b 01 00 00 04 	test   BYTE PTR [ebp+0x17b],0x4
c001cfb8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001cfbc:	74 09                	je     c001cfc7 <IDE::detect()+0x2b1>
c001cfbe:	8b 8c 24 d8 00 00 00 	mov    ecx,DWORD PTR [esp+0xd8]
c001cfc5:	eb 07                	jmp    c001cfce <IDE::detect()+0x2b8>
c001cfc7:	8b 8c 24 88 00 00 00 	mov    ecx,DWORD PTR [esp+0x88]
c001cfce:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001cfd2:	89 f8                	mov    eax,edi
c001cfd4:	83 ec 0c             	sub    esp,0xc
c001cfd7:	c1 e0 06             	shl    eax,0x6
c001cfda:	8d 2c 03             	lea    ebp,[ebx+eax*1]
c001cfdd:	89 8d 7c 01 00 00    	mov    DWORD PTR [ebp+0x17c],ecx
c001cfe3:	68 16 36 02 c0       	push   0xc0023616
c001cfe8:	e8 b6 f5 fe ff       	call   c000c5a3 <KeSetBootMessage(char const*)>
c001cfed:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001cff1:	89 e8                	mov    eax,ebp
c001cff3:	83 c4 10             	add    esp,0x10
c001cff6:	8d 6a 28             	lea    ebp,[edx+0x28]
c001cff9:	8a 4a 37             	mov    cl,BYTE PTR [edx+0x37]
c001cffc:	83 c2 02             	add    edx,0x2
c001cfff:	83 c0 02             	add    eax,0x2
c001d002:	88 88 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],cl
c001d008:	8a 4a 34             	mov    cl,BYTE PTR [edx+0x34]
c001d00b:	88 88 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],cl
c001d011:	39 d5                	cmp    ebp,edx
c001d013:	75 e4                	jne    c001cff9 <IDE::detect()+0x2e3>
c001d015:	89 fd                	mov    ebp,edi
c001d017:	83 ec 0c             	sub    esp,0xc
c001d01a:	c1 e5 06             	shl    ebp,0x6
c001d01d:	01 dd                	add    ebp,ebx
c001d01f:	c6 85 a8 01 00 00 00 	mov    BYTE PTR [ebp+0x1a8],0x0
c001d026:	0f b7 85 74 01 00 00 	movzx  eax,WORD PTR [ebp+0x174]
c001d02d:	c1 e8 09             	shr    eax,0x9
c001d030:	83 e0 01             	and    eax,0x1
c001d033:	88 85 a9 01 00 00    	mov    BYTE PTR [ebp+0x1a9],al
c001d039:	68 1a 36 02 c0       	push   0xc002361a
c001d03e:	e8 60 f5 fe ff       	call   c000c5a3 <KeSetBootMessage(char const*)>
c001d043:	83 c4 10             	add    esp,0x10
c001d046:	f6 44 24 03 01       	test   BYTE PTR [esp+0x3],0x1
c001d04b:	75 66                	jne    c001d0b3 <IDE::detect()+0x39d>
c001d04d:	83 bd 7c 01 00 00 00 	cmp    DWORD PTR [ebp+0x17c],0x0
c001d054:	0f 84 b8 00 00 00    	je     c001d112 <IDE::detect()+0x3fc>
c001d05a:	83 ec 0c             	sub    esp,0xc
c001d05d:	68 1e 36 02 c0       	push   0xc002361e
c001d062:	e8 3c f5 fe ff       	call   c000c5a3 <KeSetBootMessage(char const*)>
c001d067:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001d06e:	e8 5d 18 ff ff       	call   c000e8d0 <malloc>
c001d073:	89 04 24             	mov    DWORD PTR [esp],eax
c001d076:	89 c5                	mov    ebp,eax
c001d078:	e8 47 05 00 00       	call   c001d5c4 <ATA::ATA()>
c001d07d:	c7 04 24 22 36 02 c0 	mov    DWORD PTR [esp],0xc0023622
c001d084:	e8 1a f5 fe ff       	call   c000c5a3 <KeSetBootMessage(char const*)>
c001d089:	59                   	pop    ecx
c001d08a:	58                   	pop    eax
c001d08b:	55                   	push   ebp
c001d08c:	53                   	push   ebx
c001d08d:	e8 b0 bf fe ff       	call   c0009042 <Device::addChild(Device*)>
c001d092:	c7 04 24 27 36 02 c0 	mov    DWORD PTR [esp],0xc0023627
c001d099:	e8 05 f5 fe ff       	call   c000c5a3 <KeSetBootMessage(char const*)>
c001d09e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d0a1:	53                   	push   ebx
c001d0a2:	57                   	push   edi
c001d0a3:	6a 00                	push   0x0
c001d0a5:	55                   	push   ebp
c001d0a6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d0a9:	83 c4 14             	add    esp,0x14
c001d0ac:	68 2c 36 02 c0       	push   0xc002362c
c001d0b1:	eb 57                	jmp    c001d10a <IDE::detect()+0x3f4>
c001d0b3:	83 ec 0c             	sub    esp,0xc
c001d0b6:	68 31 36 02 c0       	push   0xc0023631
c001d0bb:	e8 e3 f4 fe ff       	call   c000c5a3 <KeSetBootMessage(char const*)>
c001d0c0:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001d0c7:	e8 04 18 ff ff       	call   c000e8d0 <malloc>
c001d0cc:	89 04 24             	mov    DWORD PTR [esp],eax
c001d0cf:	89 c5                	mov    ebp,eax
c001d0d1:	e8 98 0b 00 00       	call   c001dc6e <ATAPI::ATAPI()>
c001d0d6:	c7 04 24 37 36 02 c0 	mov    DWORD PTR [esp],0xc0023637
c001d0dd:	e8 c1 f4 fe ff       	call   c000c5a3 <KeSetBootMessage(char const*)>
c001d0e2:	58                   	pop    eax
c001d0e3:	5a                   	pop    edx
c001d0e4:	55                   	push   ebp
c001d0e5:	53                   	push   ebx
c001d0e6:	e8 57 bf fe ff       	call   c0009042 <Device::addChild(Device*)>
c001d0eb:	c7 04 24 3e 36 02 c0 	mov    DWORD PTR [esp],0xc002363e
c001d0f2:	e8 ac f4 fe ff       	call   c000c5a3 <KeSetBootMessage(char const*)>
c001d0f7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d0fa:	53                   	push   ebx
c001d0fb:	57                   	push   edi
c001d0fc:	6a 00                	push   0x0
c001d0fe:	55                   	push   ebp
c001d0ff:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d102:	83 c4 14             	add    esp,0x14
c001d105:	68 45 36 02 c0       	push   0xc0023645
c001d10a:	e8 94 f4 fe ff       	call   c000c5a3 <KeSetBootMessage(char const*)>
c001d10f:	83 c4 10             	add    esp,0x10
c001d112:	83 ec 0c             	sub    esp,0xc
c001d115:	47                   	inc    edi
c001d116:	68 4c 36 02 c0       	push   0xc002364c
c001d11b:	e8 83 f4 fe ff       	call   c000c5a3 <KeSetBootMessage(char const*)>
c001d120:	83 c4 10             	add    esp,0x10
c001d123:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c001d128:	74 0d                	je     c001d137 <IDE::detect()+0x421>
c001d12a:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c001d132:	e9 3d fc ff ff       	jmp    c001cd74 <IDE::detect()+0x5e>
c001d137:	4e                   	dec    esi
c001d138:	74 0a                	je     c001d144 <IDE::detect()+0x42e>
c001d13a:	be 01 00 00 00       	mov    esi,0x1
c001d13f:	e9 18 fc ff ff       	jmp    c001cd5c <IDE::detect()+0x46>
c001d144:	81 c4 1c 02 00 00    	add    esp,0x21c
c001d14a:	5b                   	pop    ebx
c001d14b:	5e                   	pop    esi
c001d14c:	5f                   	pop    edi
c001d14d:	5d                   	pop    ebp
c001d14e:	c3                   	ret    
c001d14f:	90                   	nop

c001d150 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001d150:	55                   	push   ebp
c001d151:	57                   	push   edi
c001d152:	56                   	push   esi
c001d153:	53                   	push   ebx
c001d154:	83 ec 1c             	sub    esp,0x1c
c001d157:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d15b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001d15f:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001d163:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d167:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001d16b:	88 c3                	mov    bl,al
c001d16d:	25 ff 00 00 00       	and    eax,0xff
c001d172:	0f 84 88 00 00 00    	je     c001d200 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001d178:	83 ec 0c             	sub    esp,0xc
c001d17b:	89 c7                	mov    edi,eax
c001d17d:	68 50 36 02 c0       	push   0xc0023650
c001d182:	e8 c7 9d fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001d187:	83 c4 10             	add    esp,0x10
c001d18a:	83 ff 01             	cmp    edi,0x1
c001d18d:	74 6b                	je     c001d1fa <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaa>
c001d18f:	83 ff 02             	cmp    edi,0x2
c001d192:	75 58                	jne    c001d1ec <IDE::printError(unsigned char, unsigned char, unsigned char)+0x9c>
c001d194:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c001d199:	50                   	push   eax
c001d19a:	6a 01                	push   0x1
c001d19c:	01 ff                	add    edi,edi
c001d19e:	09 fe                	or     esi,edi
c001d1a0:	89 f0                	mov    eax,esi
c001d1a2:	0f b6 f0             	movzx  esi,al
c001d1a5:	c1 e6 06             	shl    esi,0x6
c001d1a8:	0f b6 84 35 6d 01 00 00 	movzx  eax,BYTE PTR [ebp+esi*1+0x16d]
c001d1b0:	50                   	push   eax
c001d1b1:	55                   	push   ebp
c001d1b2:	e8 0d f4 ff ff       	call   c001c5c4 <IDE::read(unsigned char, unsigned char)>
c001d1b7:	83 c4 10             	add    esp,0x10
c001d1ba:	a8 01                	test   al,0x1
c001d1bc:	74 02                	je     c001d1c0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x70>
c001d1be:	b3 07                	mov    bl,0x7
c001d1c0:	a8 02                	test   al,0x2
c001d1c2:	74 02                	je     c001d1c6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x76>
c001d1c4:	b3 03                	mov    bl,0x3
c001d1c6:	a8 04                	test   al,0x4
c001d1c8:	74 02                	je     c001d1cc <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7c>
c001d1ca:	b3 14                	mov    bl,0x14
c001d1cc:	a8 08                	test   al,0x8
c001d1ce:	74 02                	je     c001d1d2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x82>
c001d1d0:	b3 03                	mov    bl,0x3
c001d1d2:	a8 10                	test   al,0x10
c001d1d4:	74 02                	je     c001d1d8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x88>
c001d1d6:	b3 15                	mov    bl,0x15
c001d1d8:	a8 20                	test   al,0x20
c001d1da:	74 02                	je     c001d1de <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8e>
c001d1dc:	b3 03                	mov    bl,0x3
c001d1de:	a8 40                	test   al,0x40
c001d1e0:	74 02                	je     c001d1e4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001d1e2:	b3 16                	mov    bl,0x16
c001d1e4:	a8 80                	test   al,0x80
c001d1e6:	74 18                	je     c001d200 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001d1e8:	b3 0d                	mov    bl,0xd
c001d1ea:	eb 14                	jmp    c001d200 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001d1ec:	83 ff 03             	cmp    edi,0x3
c001d1ef:	74 0d                	je     c001d1fe <IDE::printError(unsigned char, unsigned char, unsigned char)+0xae>
c001d1f1:	83 ff 04             	cmp    edi,0x4
c001d1f4:	75 0a                	jne    c001d200 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001d1f6:	b3 08                	mov    bl,0x8
c001d1f8:	eb 06                	jmp    c001d200 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001d1fa:	b3 13                	mov    bl,0x13
c001d1fc:	eb 02                	jmp    c001d200 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001d1fe:	b3 17                	mov    bl,0x17
c001d200:	83 c4 1c             	add    esp,0x1c
c001d203:	88 d8                	mov    al,bl
c001d205:	5b                   	pop    ebx
c001d206:	5e                   	pop    esi
c001d207:	5f                   	pop    edi
c001d208:	5d                   	pop    ebp
c001d209:	c3                   	ret    

c001d20a <IDE::polling(unsigned char, unsigned int)>:
c001d20a:	57                   	push   edi
c001d20b:	56                   	push   esi
c001d20c:	53                   	push   ebx
c001d20d:	bb 04 00 00 00       	mov    ebx,0x4
c001d212:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001d216:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001d21b:	52                   	push   edx
c001d21c:	6a 0c                	push   0xc
c001d21e:	56                   	push   esi
c001d21f:	57                   	push   edi
c001d220:	e8 9f f3 ff ff       	call   c001c5c4 <IDE::read(unsigned char, unsigned char)>
c001d225:	83 c4 10             	add    esp,0x10
c001d228:	4b                   	dec    ebx
c001d229:	75 f0                	jne    c001d21b <IDE::polling(unsigned char, unsigned int)+0x11>
c001d22b:	bb a0 86 01 00       	mov    ebx,0x186a0
c001d230:	50                   	push   eax
c001d231:	6a 0c                	push   0xc
c001d233:	56                   	push   esi
c001d234:	57                   	push   edi
c001d235:	e8 8a f3 ff ff       	call   c001c5c4 <IDE::read(unsigned char, unsigned char)>
c001d23a:	83 c4 10             	add    esp,0x10
c001d23d:	a8 01                	test   al,0x1
c001d23f:	75 17                	jne    c001d258 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001d241:	a8 20                	test   al,0x20
c001d243:	75 0f                	jne    c001d254 <IDE::polling(unsigned char, unsigned int)+0x4a>
c001d245:	4b                   	dec    ebx
c001d246:	74 10                	je     c001d258 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001d248:	a8 80                	test   al,0x80
c001d24a:	75 e4                	jne    c001d230 <IDE::polling(unsigned char, unsigned int)+0x26>
c001d24c:	a8 08                	test   al,0x8
c001d24e:	74 e0                	je     c001d230 <IDE::polling(unsigned char, unsigned int)+0x26>
c001d250:	31 c0                	xor    eax,eax
c001d252:	eb 06                	jmp    c001d25a <IDE::polling(unsigned char, unsigned int)+0x50>
c001d254:	b0 01                	mov    al,0x1
c001d256:	eb 02                	jmp    c001d25a <IDE::polling(unsigned char, unsigned int)+0x50>
c001d258:	b0 02                	mov    al,0x2
c001d25a:	5b                   	pop    ebx
c001d25b:	5e                   	pop    esi
c001d25c:	5f                   	pop    edi
c001d25d:	c3                   	ret    

c001d25e <SATABus::close(int, int, void*)>:
c001d25e:	31 c0                	xor    eax,eax
c001d260:	c3                   	ret    
c001d261:	90                   	nop

c001d262 <SATABus::detect()>:
c001d262:	c3                   	ret    
c001d263:	90                   	nop

c001d264 <SATABus::SATABus()>:
c001d264:	83 ec 0c             	sub    esp,0xc
c001d267:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d26b:	83 ec 08             	sub    esp,0x8
c001d26e:	68 88 36 02 c0       	push   0xc0023688
c001d273:	50                   	push   eax
c001d274:	e8 23 c1 fe ff       	call   c000939c <HardDiskController::HardDiskController(char const*)>
c001d279:	83 c4 10             	add    esp,0x10
c001d27c:	ba b4 36 02 c0       	mov    edx,0xc00236b4
c001d281:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d285:	89 10                	mov    DWORD PTR [eax],edx
c001d287:	83 ec 0c             	sub    esp,0xc
c001d28a:	6a 50                	push   0x50
c001d28c:	e8 5e 1c ff ff       	call   c000eeef <Phys::allocateContiguousPages(int)>
c001d291:	83 c4 10             	add    esp,0x10
c001d294:	89 c2                	mov    edx,eax
c001d296:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d29a:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001d2a0:	83 ec 0c             	sub    esp,0xc
c001d2a3:	6a 50                	push   0x50
c001d2a5:	e8 e1 4c ff ff       	call   c0011f8b <Virt::allocateKernelVirtualPages(int)>
c001d2aa:	83 c4 10             	add    esp,0x10
c001d2ad:	89 c2                	mov    edx,eax
c001d2af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d2b3:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001d2b9:	a1 d0 be 02 c0       	mov    eax,ds:0xc002bed0
c001d2be:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001d2c2:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001d2c8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001d2cc:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001d2d2:	83 ec 0c             	sub    esp,0xc
c001d2d5:	6a 03                	push   0x3
c001d2d7:	6a 50                	push   0x50
c001d2d9:	51                   	push   ecx
c001d2da:	52                   	push   edx
c001d2db:	50                   	push   eax
c001d2dc:	e8 83 55 ff ff       	call   c0012864 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001d2e1:	83 c4 20             	add    esp,0x20
c001d2e4:	90                   	nop
c001d2e5:	83 c4 0c             	add    esp,0xc
c001d2e8:	c3                   	ret    
c001d2e9:	90                   	nop

c001d2ea <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001d2ea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d2ee:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001d2f1:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001d2f4:	09 c2                	or     edx,eax
c001d2f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d2fa:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d300:	8b 08                	mov    ecx,DWORD PTR [eax]
c001d302:	31 c0                	xor    eax,eax
c001d304:	c1 e9 08             	shr    ecx,0x8
c001d307:	83 e1 0f             	and    ecx,0xf
c001d30a:	39 c8                	cmp    eax,ecx
c001d30c:	74 0a                	je     c001d318 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c001d30e:	f6 c2 01             	test   dl,0x1
c001d311:	74 08                	je     c001d31b <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001d313:	d1 ea                	shr    edx,1
c001d315:	40                   	inc    eax
c001d316:	eb f2                	jmp    c001d30a <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001d318:	83 c8 ff             	or     eax,0xffffffff
c001d31b:	c3                   	ret    

c001d31c <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001d31c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001d320:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001d323:	89 c2                	mov    edx,eax
c001d325:	c1 ea 08             	shr    edx,0x8
c001d328:	83 e2 0f             	and    edx,0xf
c001d32b:	4a                   	dec    edx
c001d32c:	75 32                	jne    c001d360 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001d32e:	83 e0 0f             	and    eax,0xf
c001d331:	83 f8 03             	cmp    eax,0x3
c001d334:	75 2a                	jne    c001d360 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001d336:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001d339:	b8 02 00 00 00       	mov    eax,0x2
c001d33e:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001d344:	74 1c                	je     c001d362 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001d346:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001d34c:	b8 04 00 00 00       	mov    eax,0x4
c001d351:	74 0f                	je     c001d362 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001d353:	31 c0                	xor    eax,eax
c001d355:	83 fa 03             	cmp    edx,0x3
c001d358:	0f 94 c0             	sete   al
c001d35b:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001d35f:	c3                   	ret    
c001d360:	31 c0                	xor    eax,eax
c001d362:	c3                   	ret    
c001d363:	90                   	nop

c001d364 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001d364:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d368:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001d36b:	0f ba e2 0f          	bt     edx,0xf
c001d36f:	72 f7                	jb     c001d368 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001d371:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001d374:	83 ca 10             	or     edx,0x10
c001d377:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001d37a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001d37d:	83 ca 01             	or     edx,0x1
c001d380:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001d383:	c3                   	ret    

c001d384 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001d384:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d388:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001d38b:	83 e2 fe             	and    edx,0xfffffffe
c001d38e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001d391:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001d394:	83 e2 ef             	and    edx,0xffffffef
c001d397:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001d39a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001d39d:	0f ba e2 0e          	bt     edx,0xe
c001d3a1:	72 f7                	jb     c001d39a <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001d3a3:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001d3a6:	0f ba e2 0f          	bt     edx,0xf
c001d3aa:	72 ee                	jb     c001d39a <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001d3ac:	c3                   	ret    
c001d3ad:	90                   	nop

c001d3ae <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001d3ae:	55                   	push   ebp
c001d3af:	57                   	push   edi
c001d3b0:	56                   	push   esi
c001d3b1:	53                   	push   ebx
c001d3b2:	83 ec 1c             	sub    esp,0x1c
c001d3b5:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001d3b9:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001d3bd:	53                   	push   ebx
c001d3be:	57                   	push   edi
c001d3bf:	e8 c0 ff ff ff       	call   c001d384 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001d3c4:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001d3c8:	83 ec 0c             	sub    esp,0xc
c001d3cb:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001d3d1:	c1 e5 0a             	shl    ebp,0xa
c001d3d4:	01 e8                	add    eax,ebp
c001d3d6:	89 03                	mov    DWORD PTR [ebx],eax
c001d3d8:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d3da:	68 00 04 00 00       	push   0x400
c001d3df:	6a 00                	push   0x0
c001d3e1:	50                   	push   eax
c001d3e2:	e8 09 31 fe ff       	call   c00004f0 <memset>
c001d3e7:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001d3ed:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c001d3f1:	83 c4 1c             	add    esp,0x1c
c001d3f4:	01 e8                	add    eax,ebp
c001d3f6:	89 03                	mov    DWORD PTR [ebx],eax
c001d3f8:	c1 e6 08             	shl    esi,0x8
c001d3fb:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001d402:	81 c6 00 80 00 00    	add    esi,0x8000
c001d408:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001d40e:	01 f0                	add    eax,esi
c001d410:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001d413:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d416:	68 00 01 00 00       	push   0x100
c001d41b:	6a 00                	push   0x0
c001d41d:	50                   	push   eax
c001d41e:	e8 cd 30 fe ff       	call   c00004f0 <memset>
c001d423:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001d429:	31 d2                	xor    edx,edx
c001d42b:	01 f0                	add    eax,esi
c001d42d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001d430:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001d437:	8b b7 58 01 00 00    	mov    esi,DWORD PTR [edi+0x158]
c001d43d:	01 ee                	add    esi,ebp
c001d43f:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001d443:	83 c4 10             	add    esp,0x10
c001d446:	c1 e5 0d             	shl    ebp,0xd
c001d449:	81 c5 00 a0 00 00    	add    ebp,0xa000
c001d44f:	66 c7 46 02 08 00    	mov    WORD PTR [esi+0x2],0x8
c001d455:	83 c6 20             	add    esi,0x20
c001d458:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001d45c:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001d462:	01 e8                	add    eax,ebp
c001d464:	01 d0                	add    eax,edx
c001d466:	89 46 e8             	mov    DWORD PTR [esi-0x18],eax
c001d469:	52                   	push   edx
c001d46a:	68 00 01 00 00       	push   0x100
c001d46f:	6a 00                	push   0x0
c001d471:	50                   	push   eax
c001d472:	e8 79 30 fe ff       	call   c00004f0 <memset>
c001d477:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001d47d:	c7 46 ec 00 00 00 00 	mov    DWORD PTR [esi-0x14],0x0
c001d484:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d488:	83 c4 10             	add    esp,0x10
c001d48b:	01 e8                	add    eax,ebp
c001d48d:	01 d0                	add    eax,edx
c001d48f:	81 c2 00 01 00 00    	add    edx,0x100
c001d495:	89 46 e8             	mov    DWORD PTR [esi-0x18],eax
c001d498:	81 fa 00 20 00 00    	cmp    edx,0x2000
c001d49e:	75 af                	jne    c001d44f <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa1>
c001d4a0:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001d4a7:	50                   	push   eax
c001d4a8:	50                   	push   eax
c001d4a9:	53                   	push   ebx
c001d4aa:	57                   	push   edi
c001d4ab:	e8 b4 fe ff ff       	call   c001d364 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001d4b0:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001d4b7:	83 c4 2c             	add    esp,0x2c
c001d4ba:	5b                   	pop    ebx
c001d4bb:	5e                   	pop    esi
c001d4bc:	5f                   	pop    edi
c001d4bd:	5d                   	pop    ebp
c001d4be:	c3                   	ret    
c001d4bf:	90                   	nop

c001d4c0 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001d4c0:	55                   	push   ebp
c001d4c1:	57                   	push   edi
c001d4c2:	56                   	push   esi
c001d4c3:	53                   	push   ebx
c001d4c4:	31 db                	xor    ebx,ebx
c001d4c6:	83 ec 0c             	sub    esp,0xc
c001d4c9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d4cd:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001d4d1:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c001d4d4:	f7 c7 01 00 00 00    	test   edi,0x1
c001d4da:	74 7a                	je     c001d556 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001d4dc:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001d4e0:	89 d8                	mov    eax,ebx
c001d4e2:	c1 e0 07             	shl    eax,0x7
c001d4e5:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c001d4ec:	55                   	push   ebp
c001d4ed:	56                   	push   esi
c001d4ee:	e8 29 fe ff ff       	call   c001d31c <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001d4f3:	5a                   	pop    edx
c001d4f4:	59                   	pop    ecx
c001d4f5:	83 f8 01             	cmp    eax,0x1
c001d4f8:	75 21                	jne    c001d51b <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c001d4fa:	50                   	push   eax
c001d4fb:	53                   	push   ebx
c001d4fc:	55                   	push   ebp
c001d4fd:	56                   	push   esi
c001d4fe:	e8 ab fe ff ff       	call   c001d3ae <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001d503:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001d50a:	e8 c1 13 ff ff       	call   c000e8d0 <malloc>
c001d50f:	89 04 24             	mov    DWORD PTR [esp],eax
c001d512:	89 c5                	mov    ebp,eax
c001d514:	e8 1b 0e 00 00       	call   c001e334 <SATA::SATA()>
c001d519:	eb 24                	jmp    c001d53f <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c001d51b:	83 f8 04             	cmp    eax,0x4
c001d51e:	75 36                	jne    c001d556 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001d520:	51                   	push   ecx
c001d521:	53                   	push   ebx
c001d522:	55                   	push   ebp
c001d523:	56                   	push   esi
c001d524:	e8 85 fe ff ff       	call   c001d3ae <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001d529:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001d530:	e8 9b 13 ff ff       	call   c000e8d0 <malloc>
c001d535:	89 04 24             	mov    DWORD PTR [esp],eax
c001d538:	89 c5                	mov    ebp,eax
c001d53a:	e8 8b 11 00 00       	call   c001e6ca <SATAPI::SATAPI()>
c001d53f:	58                   	pop    eax
c001d540:	5a                   	pop    edx
c001d541:	55                   	push   ebp
c001d542:	56                   	push   esi
c001d543:	e8 fa ba fe ff       	call   c0009042 <Device::addChild(Device*)>
c001d548:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001d54b:	56                   	push   esi
c001d54c:	6a 00                	push   0x0
c001d54e:	53                   	push   ebx
c001d54f:	55                   	push   ebp
c001d550:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001d553:	83 c4 20             	add    esp,0x20
c001d556:	d1 ef                	shr    edi,1
c001d558:	43                   	inc    ebx
c001d559:	83 fb 20             	cmp    ebx,0x20
c001d55c:	0f 85 72 ff ff ff    	jne    c001d4d4 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c001d562:	83 c4 0c             	add    esp,0xc
c001d565:	5b                   	pop    ebx
c001d566:	5e                   	pop    esi
c001d567:	5f                   	pop    edi
c001d568:	5d                   	pop    ebp
c001d569:	c3                   	ret    

c001d56a <SATABus::open(int, int, void*)>:
c001d56a:	53                   	push   ebx
c001d56b:	83 ec 08             	sub    esp,0x8
c001d56e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d572:	8b 83 34 01 00 00    	mov    eax,DWORD PTR [ebx+0x134]
c001d578:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001d57e:	e8 d9 7b ff ff       	call   c001515c <KeDisablePreemption()>
c001d583:	52                   	push   edx
c001d584:	52                   	push   edx
c001d585:	ff b3 60 01 00 00    	push   DWORD PTR [ebx+0x160]
c001d58b:	53                   	push   ebx
c001d58c:	e8 2f ff ff ff       	call   c001d4c0 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001d591:	e8 ee 7b ff ff       	call   c0015184 <KeRestorePreemption()>
c001d596:	83 c4 18             	add    esp,0x18
c001d599:	31 c0                	xor    eax,eax
c001d59b:	5b                   	pop    ebx
c001d59c:	c3                   	ret    
c001d59d:	90                   	nop

c001d59e <ATA::close(int, int, void*)>:
c001d59e:	83 ec 0c             	sub    esp,0xc
c001d5a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d5a5:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d5ab:	85 c0                	test   eax,eax
c001d5ad:	74 0c                	je     c001d5bb <ATA::close(int, int, void*)+0x1d>
c001d5af:	8b 10                	mov    edx,DWORD PTR [eax]
c001d5b1:	83 ec 0c             	sub    esp,0xc
c001d5b4:	50                   	push   eax
c001d5b5:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001d5b8:	83 c4 10             	add    esp,0x10
c001d5bb:	31 c0                	xor    eax,eax
c001d5bd:	83 c4 0c             	add    esp,0xc
c001d5c0:	c3                   	ret    
c001d5c1:	90                   	nop

c001d5c2 <ATA::powerSaving(PowerSavingLevel)>:
c001d5c2:	c3                   	ret    
c001d5c3:	90                   	nop

c001d5c4 <ATA::ATA()>:
c001d5c4:	83 ec 0c             	sub    esp,0xc
c001d5c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d5cb:	83 ec 04             	sub    esp,0x4
c001d5ce:	68 00 02 00 00       	push   0x200
c001d5d3:	68 8d 37 02 c0       	push   0xc002378d
c001d5d8:	50                   	push   eax
c001d5d9:	e8 48 be fe ff       	call   c0009426 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001d5de:	83 c4 10             	add    esp,0x10
c001d5e1:	ba f4 36 02 c0       	mov    edx,0xc00236f4
c001d5e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d5ea:	89 10                	mov    DWORD PTR [eax],edx
c001d5ec:	90                   	nop
c001d5ed:	83 c4 0c             	add    esp,0xc
c001d5f0:	c3                   	ret    
c001d5f1:	90                   	nop

c001d5f2 <ATA::flush(bool)>:
c001d5f2:	53                   	push   ebx
c001d5f3:	83 ec 08             	sub    esp,0x8
c001d5f6:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001d5fb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d5ff:	83 f8 01             	cmp    eax,0x1
c001d602:	19 c0                	sbb    eax,eax
c001d604:	83 e0 fd             	and    eax,0xfffffffd
c001d607:	05 ea 00 00 00       	add    eax,0xea
c001d60c:	50                   	push   eax
c001d60d:	6a 07                	push   0x7
c001d60f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d616:	50                   	push   eax
c001d617:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d61d:	e8 e2 ee ff ff       	call   c001c504 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d622:	83 c4 0c             	add    esp,0xc
c001d625:	6a 00                	push   0x0
c001d627:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d62e:	50                   	push   eax
c001d62f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d635:	e8 d0 fb ff ff       	call   c001d20a <IDE::polling(unsigned char, unsigned int)>
c001d63a:	83 c4 18             	add    esp,0x18
c001d63d:	5b                   	pop    ebx
c001d63e:	c3                   	ret    
c001d63f:	90                   	nop

c001d640 <ATA::readyForCommand()>:
c001d640:	56                   	push   esi
c001d641:	53                   	push   ebx
c001d642:	53                   	push   ebx
c001d643:	31 db                	xor    ebx,ebx
c001d645:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d649:	51                   	push   ecx
c001d64a:	6a 0c                	push   0xc
c001d64c:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001d653:	50                   	push   eax
c001d654:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001d65a:	e8 65 ef ff ff       	call   c001c5c4 <IDE::read(unsigned char, unsigned char)>
c001d65f:	83 c4 10             	add    esp,0x10
c001d662:	a8 88                	test   al,0x88
c001d664:	74 1f                	je     c001d685 <ATA::readyForCommand()+0x45>
c001d666:	43                   	inc    ebx
c001d667:	83 fb 63             	cmp    ebx,0x63
c001d66a:	7e dd                	jle    c001d649 <ATA::readyForCommand()+0x9>
c001d66c:	83 ec 0c             	sub    esp,0xc
c001d66f:	6a 0a                	push   0xa
c001d671:	e8 52 7f ff ff       	call   c00155c8 <milliTenthSleep(unsigned int)>
c001d676:	83 c4 10             	add    esp,0x10
c001d679:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001d67f:	75 c8                	jne    c001d649 <ATA::readyForCommand()+0x9>
c001d681:	31 c0                	xor    eax,eax
c001d683:	eb 02                	jmp    c001d687 <ATA::readyForCommand()+0x47>
c001d685:	b0 01                	mov    al,0x1
c001d687:	5a                   	pop    edx
c001d688:	5b                   	pop    ebx
c001d689:	5e                   	pop    esi
c001d68a:	c3                   	ret    
c001d68b:	90                   	nop

c001d68c <ATA::access(unsigned long long, int, void*, bool)>:
c001d68c:	55                   	push   ebp
c001d68d:	57                   	push   edi
c001d68e:	56                   	push   esi
c001d68f:	53                   	push   ebx
c001d690:	83 ec 2c             	sub    esp,0x2c
c001d693:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001d697:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001d69b:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001d69f:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001d6a3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d6a7:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001d6ab:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001d6af:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001d6b5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d6b9:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001d6bf:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001d6c3:	c1 e0 06             	shl    eax,0x6
c001d6c6:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001d6ce:	74 5b                	je     c001d72b <ATA::access(unsigned long long, int, void*, bool)+0x9f>
c001d6d0:	89 fa                	mov    edx,edi
c001d6d2:	89 f0                	mov    eax,esi
c001d6d4:	c1 ea 1c             	shr    edx,0x1c
c001d6d7:	0f ac f8 1c          	shrd   eax,edi,0x1c
c001d6db:	89 d1                	mov    ecx,edx
c001d6dd:	09 c1                	or     ecx,eax
c001d6df:	74 25                	je     c001d706 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001d6e1:	31 ed                	xor    ebp,ebp
c001d6e3:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001d6ea:	89 fa                	mov    edx,edi
c001d6ec:	89 f0                	mov    eax,esi
c001d6ee:	0f ad d0             	shrd   eax,edx,cl
c001d6f1:	d3 ea                	shr    edx,cl
c001d6f3:	f6 c1 20             	test   cl,0x20
c001d6f6:	74 02                	je     c001d6fa <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001d6f8:	89 d0                	mov    eax,edx
c001d6fa:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001d6fe:	45                   	inc    ebp
c001d6ff:	83 fd 06             	cmp    ebp,0x6
c001d702:	75 df                	jne    c001d6e3 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001d704:	eb 71                	jmp    c001d777 <ATA::access(unsigned long long, int, void*, bool)+0xeb>
c001d706:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001d70b:	89 f0                	mov    eax,esi
c001d70d:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001d714:	0f ac f8 10          	shrd   eax,edi,0x10
c001d718:	bf 01 00 00 00       	mov    edi,0x1
c001d71d:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001d721:	c1 ee 18             	shr    esi,0x18
c001d724:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001d729:	eb 53                	jmp    c001d77e <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c001d72b:	6a 00                	push   0x0
c001d72d:	6a 3f                	push   0x3f
c001d72f:	57                   	push   edi
c001d730:	56                   	push   esi
c001d731:	e8 1e 24 00 00       	call   c001fb54 <__umoddi3>
c001d736:	83 c4 10             	add    esp,0x10
c001d739:	40                   	inc    eax
c001d73a:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001d73e:	6a 00                	push   0x0
c001d740:	68 f0 03 00 00       	push   0x3f0
c001d745:	57                   	push   edi
c001d746:	56                   	push   esi
c001d747:	e8 08 23 00 00       	call   c001fa54 <__udivdi3>
c001d74c:	83 c4 10             	add    esp,0x10
c001d74f:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001d754:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001d75b:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001d760:	6a 00                	push   0x0
c001d762:	6a 3f                	push   0x3f
c001d764:	57                   	push   edi
c001d765:	31 ff                	xor    edi,edi
c001d767:	56                   	push   esi
c001d768:	e8 e7 22 00 00       	call   c001fa54 <__udivdi3>
c001d76d:	83 c4 10             	add    esp,0x10
c001d770:	83 e0 0f             	and    eax,0xf
c001d773:	89 c6                	mov    esi,eax
c001d775:	eb 07                	jmp    c001d77e <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c001d777:	31 f6                	xor    esi,esi
c001d779:	bf 02 00 00 00       	mov    edi,0x2
c001d77e:	55                   	push   ebp
c001d77f:	6a 00                	push   0x0
c001d781:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d788:	50                   	push   eax
c001d789:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d78d:	e8 80 ef ff ff       	call   c001c712 <IDE::enableIRQs(unsigned char, bool)>
c001d792:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d795:	e8 a6 fe ff ff       	call   c001d640 <ATA::readyForCommand()>
c001d79a:	83 c4 10             	add    esp,0x10
c001d79d:	84 c0                	test   al,al
c001d79f:	75 0a                	jne    c001d7ab <ATA::access(unsigned long long, int, void*, bool)+0x11f>
c001d7a1:	be 01 00 00 00       	mov    esi,0x1
c001d7a6:	e9 e3 02 00 00       	jmp    c001da8e <ATA::access(unsigned long long, int, void*, bool)+0x402>
c001d7ab:	fa                   	cli    
c001d7ac:	ff 05 b0 c6 02 c0    	inc    DWORD PTR ds:0xc002c6b0
c001d7b2:	f7 c7 03 00 00 00    	test   edi,0x3
c001d7b8:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001d7be:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001d7c4:	75 0a                	jne    c001d7d0 <ATA::access(unsigned long long, int, void*, bool)+0x144>
c001d7c6:	c1 e0 04             	shl    eax,0x4
c001d7c9:	09 c6                	or     esi,eax
c001d7cb:	83 ce a0             	or     esi,0xffffffa0
c001d7ce:	eb 08                	jmp    c001d7d8 <ATA::access(unsigned long long, int, void*, bool)+0x14c>
c001d7d0:	c1 e0 04             	shl    eax,0x4
c001d7d3:	09 c6                	or     esi,eax
c001d7d5:	83 ce e0             	or     esi,0xffffffe0
c001d7d8:	89 f0                	mov    eax,esi
c001d7da:	0f b6 d2             	movzx  edx,dl
c001d7dd:	0f b6 f0             	movzx  esi,al
c001d7e0:	56                   	push   esi
c001d7e1:	6a 06                	push   0x6
c001d7e3:	52                   	push   edx
c001d7e4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d7ea:	e8 15 ed ff ff       	call   c001c504 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d7ef:	83 c4 10             	add    esp,0x10
c001d7f2:	6a 00                	push   0x0
c001d7f4:	6a 01                	push   0x1
c001d7f6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d7fd:	50                   	push   eax
c001d7fe:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d804:	e8 fb ec ff ff       	call   c001c504 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d809:	89 f8                	mov    eax,edi
c001d80b:	83 c4 10             	add    esp,0x10
c001d80e:	0f b6 f0             	movzx  esi,al
c001d811:	83 fe 02             	cmp    esi,0x2
c001d814:	75 6e                	jne    c001d884 <ATA::access(unsigned long long, int, void*, bool)+0x1f8>
c001d816:	6a 00                	push   0x0
c001d818:	6a 08                	push   0x8
c001d81a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d821:	50                   	push   eax
c001d822:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d828:	e8 d7 ec ff ff       	call   c001c504 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d82d:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001d832:	50                   	push   eax
c001d833:	6a 09                	push   0x9
c001d835:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d83c:	50                   	push   eax
c001d83d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d843:	e8 bc ec ff ff       	call   c001c504 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d848:	83 c4 20             	add    esp,0x20
c001d84b:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001d850:	50                   	push   eax
c001d851:	6a 0a                	push   0xa
c001d853:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d85a:	50                   	push   eax
c001d85b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d861:	e8 9e ec ff ff       	call   c001c504 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d866:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001d86b:	50                   	push   eax
c001d86c:	6a 0b                	push   0xb
c001d86e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d875:	50                   	push   eax
c001d876:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d87c:	e8 83 ec ff ff       	call   c001c504 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d881:	83 c4 20             	add    esp,0x20
c001d884:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001d889:	50                   	push   eax
c001d88a:	6a 02                	push   0x2
c001d88c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d893:	50                   	push   eax
c001d894:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d89a:	e8 65 ec ff ff       	call   c001c504 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d89f:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001d8a4:	50                   	push   eax
c001d8a5:	6a 03                	push   0x3
c001d8a7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d8ae:	50                   	push   eax
c001d8af:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d8b5:	e8 4a ec ff ff       	call   c001c504 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d8ba:	83 c4 20             	add    esp,0x20
c001d8bd:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001d8c2:	50                   	push   eax
c001d8c3:	6a 04                	push   0x4
c001d8c5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d8cc:	50                   	push   eax
c001d8cd:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d8d3:	e8 2c ec ff ff       	call   c001c504 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d8d8:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d8dd:	50                   	push   eax
c001d8de:	6a 05                	push   0x5
c001d8e0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d8e7:	50                   	push   eax
c001d8e8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d8ee:	e8 11 ec ff ff       	call   c001c504 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d8f3:	83 c4 20             	add    esp,0x20
c001d8f6:	83 fe 02             	cmp    esi,0x2
c001d8f9:	0f 94 44 24 08       	sete   BYTE PTR [esp+0x8]
c001d8fe:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c001d903:	85 c9                	test   ecx,ecx
c001d905:	74 07                	je     c001d90e <ATA::access(unsigned long long, int, void*, bool)+0x282>
c001d907:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001d90c:	75 47                	jne    c001d955 <ATA::access(unsigned long long, int, void*, bool)+0x2c9>
c001d90e:	89 f8                	mov    eax,edi
c001d910:	0f b6 f8             	movzx  edi,al
c001d913:	31 c0                	xor    eax,eax
c001d915:	83 ff 02             	cmp    edi,0x2
c001d918:	0f 95 c0             	setne  al
c001d91b:	89 c6                	mov    esi,eax
c001d91d:	74 0c                	je     c001d92b <ATA::access(unsigned long long, int, void*, bool)+0x29f>
c001d91f:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001d924:	b8 30 00 00 00       	mov    eax,0x30
c001d929:	75 2f                	jne    c001d95a <ATA::access(unsigned long long, int, void*, bool)+0x2ce>
c001d92b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d92f:	83 f2 01             	xor    edx,0x1
c001d932:	85 c9                	test   ecx,ecx
c001d934:	74 09                	je     c001d93f <ATA::access(unsigned long long, int, void*, bool)+0x2b3>
c001d936:	84 d2                	test   dl,dl
c001d938:	b8 24 00 00 00       	mov    eax,0x24
c001d93d:	75 1b                	jne    c001d95a <ATA::access(unsigned long long, int, void*, bool)+0x2ce>
c001d93f:	85 f6                	test   esi,esi
c001d941:	0f 84 5a fe ff ff    	je     c001d7a1 <ATA::access(unsigned long long, int, void*, bool)+0x115>
c001d947:	84 d2                	test   dl,dl
c001d949:	b8 20 00 00 00       	mov    eax,0x20
c001d94e:	75 0a                	jne    c001d95a <ATA::access(unsigned long long, int, void*, bool)+0x2ce>
c001d950:	e9 4c fe ff ff       	jmp    c001d7a1 <ATA::access(unsigned long long, int, void*, bool)+0x115>
c001d955:	b8 34 00 00 00       	mov    eax,0x34
c001d95a:	50                   	push   eax
c001d95b:	6a 07                	push   0x7
c001d95d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d964:	50                   	push   eax
c001d965:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d96b:	e8 94 eb ff ff       	call   c001c504 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d970:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c001d975:	83 c4 10             	add    esp,0x10
c001d978:	48                   	dec    eax
c001d979:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c001d97e:	85 c0                	test   eax,eax
c001d980:	75 01                	jne    c001d983 <ATA::access(unsigned long long, int, void*, bool)+0x2f7>
c001d982:	fb                   	sti    
c001d983:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c001d987:	0f b6 6c 24 0e       	movzx  ebp,BYTE PTR [esp+0xe]
c001d98c:	85 f6                	test   esi,esi
c001d98e:	0f 84 e0 00 00 00    	je     c001da74 <ATA::access(unsigned long long, int, void*, bool)+0x3e8>
c001d994:	57                   	push   edi
c001d995:	6a 01                	push   0x1
c001d997:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d99e:	50                   	push   eax
c001d99f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d9a5:	e8 60 f8 ff ff       	call   c001d20a <IDE::polling(unsigned char, unsigned int)>
c001d9aa:	83 c4 10             	add    esp,0x10
c001d9ad:	0f b6 c0             	movzx  eax,al
c001d9b0:	85 c0                	test   eax,eax
c001d9b2:	74 23                	je     c001d9d7 <ATA::access(unsigned long long, int, void*, bool)+0x34b>
c001d9b4:	50                   	push   eax
c001d9b5:	89 c6                	mov    esi,eax
c001d9b7:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001d9be:	50                   	push   eax
c001d9bf:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d9c6:	50                   	push   eax
c001d9c7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d9cd:	e8 7e f7 ff ff       	call   c001d150 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001d9d2:	e9 b4 00 00 00       	jmp    c001da8b <ATA::access(unsigned long long, int, void*, bool)+0x3ff>
c001d9d7:	85 ed                	test   ebp,ebp
c001d9d9:	74 4d                	je     c001da28 <ATA::access(unsigned long long, int, void*, bool)+0x39c>
c001d9db:	fa                   	cli    
c001d9dc:	ff 05 b0 c6 02 c0    	inc    DWORD PTR ds:0xc002c6b0
c001d9e2:	31 ff                	xor    edi,edi
c001d9e4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001d9e8:	66 8b 04 78          	mov    ax,WORD PTR [eax+edi*2]
c001d9ec:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c001d9f1:	51                   	push   ecx
c001d9f2:	51                   	push   ecx
c001d9f3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d9fa:	50                   	push   eax
c001d9fb:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001da01:	e8 ec ea ff ff       	call   c001c4f2 <IDE::getBase(unsigned char)>
c001da06:	89 c2                	mov    edx,eax
c001da08:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001da0d:	66 ef                	out    dx,ax
c001da0f:	47                   	inc    edi
c001da10:	83 c4 10             	add    esp,0x10
c001da13:	81 ff 00 01 00 00    	cmp    edi,0x100
c001da19:	75 c9                	jne    c001d9e4 <ATA::access(unsigned long long, int, void*, bool)+0x358>
c001da1b:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c001da20:	48                   	dec    eax
c001da21:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c001da26:	eb 3b                	jmp    c001da63 <ATA::access(unsigned long long, int, void*, bool)+0x3d7>
c001da28:	fa                   	cli    
c001da29:	52                   	push   edx
c001da2a:	52                   	push   edx
c001da2b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001da32:	ff 05 b0 c6 02 c0    	inc    DWORD PTR ds:0xc002c6b0
c001da38:	50                   	push   eax
c001da39:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001da3f:	e8 ae ea ff ff       	call   c001c4f2 <IDE::getBase(unsigned char)>
c001da44:	b9 00 01 00 00       	mov    ecx,0x100
c001da49:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001da4d:	89 c2                	mov    edx,eax
c001da4f:	fc                   	cld    
c001da50:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001da53:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c001da58:	83 c4 10             	add    esp,0x10
c001da5b:	48                   	dec    eax
c001da5c:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c001da61:	85 c0                	test   eax,eax
c001da63:	75 01                	jne    c001da66 <ATA::access(unsigned long long, int, void*, bool)+0x3da>
c001da65:	fb                   	sti    
c001da66:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001da6e:	4e                   	dec    esi
c001da6f:	e9 18 ff ff ff       	jmp    c001d98c <ATA::access(unsigned long long, int, void*, bool)+0x300>
c001da74:	31 f6                	xor    esi,esi
c001da76:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001da7b:	74 11                	je     c001da8e <ATA::access(unsigned long long, int, void*, bool)+0x402>
c001da7d:	50                   	push   eax
c001da7e:	50                   	push   eax
c001da7f:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001da84:	50                   	push   eax
c001da85:	53                   	push   ebx
c001da86:	e8 67 fb ff ff       	call   c001d5f2 <ATA::flush(bool)>
c001da8b:	83 c4 10             	add    esp,0x10
c001da8e:	83 c4 2c             	add    esp,0x2c
c001da91:	89 f0                	mov    eax,esi
c001da93:	5b                   	pop    ebx
c001da94:	5e                   	pop    esi
c001da95:	5f                   	pop    edi
c001da96:	5d                   	pop    ebp
c001da97:	c3                   	ret    

c001da98 <ATA::read(unsigned long long, int, void*)>:
c001da98:	57                   	push   edi
c001da99:	b8 04 00 00 00       	mov    eax,0x4
c001da9e:	56                   	push   esi
c001da9f:	53                   	push   ebx
c001daa0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001daa4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001daa8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001daac:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001dab0:	8d 7a ff             	lea    edi,[edx-0x1]
c001dab3:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001dab9:	77 25                	ja     c001dae0 <ATA::read(unsigned long long, int, void*)+0x48>
c001dabb:	85 f6                	test   esi,esi
c001dabd:	b8 06 00 00 00       	mov    eax,0x6
c001dac2:	74 1c                	je     c001dae0 <ATA::read(unsigned long long, int, void*)+0x48>
c001dac4:	50                   	push   eax
c001dac5:	50                   	push   eax
c001dac6:	6a 00                	push   0x0
c001dac8:	56                   	push   esi
c001dac9:	52                   	push   edx
c001daca:	53                   	push   ebx
c001dacb:	51                   	push   ecx
c001dacc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dad0:	e8 b7 fb ff ff       	call   c001d68c <ATA::access(unsigned long long, int, void*, bool)>
c001dad5:	83 c4 20             	add    esp,0x20
c001dad8:	85 c0                	test   eax,eax
c001dada:	0f 95 c0             	setne  al
c001dadd:	0f b6 c0             	movzx  eax,al
c001dae0:	5b                   	pop    ebx
c001dae1:	5e                   	pop    esi
c001dae2:	5f                   	pop    edi
c001dae3:	c3                   	ret    

c001dae4 <ATA::write(unsigned long long, int, void*)>:
c001dae4:	57                   	push   edi
c001dae5:	b8 04 00 00 00       	mov    eax,0x4
c001daea:	56                   	push   esi
c001daeb:	53                   	push   ebx
c001daec:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001daf0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001daf4:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001daf8:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001dafc:	8d 7a ff             	lea    edi,[edx-0x1]
c001daff:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001db05:	77 25                	ja     c001db2c <ATA::write(unsigned long long, int, void*)+0x48>
c001db07:	85 f6                	test   esi,esi
c001db09:	b8 06 00 00 00       	mov    eax,0x6
c001db0e:	74 1c                	je     c001db2c <ATA::write(unsigned long long, int, void*)+0x48>
c001db10:	50                   	push   eax
c001db11:	50                   	push   eax
c001db12:	6a 01                	push   0x1
c001db14:	56                   	push   esi
c001db15:	52                   	push   edx
c001db16:	53                   	push   ebx
c001db17:	51                   	push   ecx
c001db18:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001db1c:	e8 6b fb ff ff       	call   c001d68c <ATA::access(unsigned long long, int, void*, bool)>
c001db21:	83 c4 20             	add    esp,0x20
c001db24:	85 c0                	test   eax,eax
c001db26:	0f 95 c0             	setne  al
c001db29:	0f b6 c0             	movzx  eax,al
c001db2c:	5b                   	pop    ebx
c001db2d:	5e                   	pop    esi
c001db2e:	5f                   	pop    edi
c001db2f:	c3                   	ret    

c001db30 <ATA::detectCHS()>:
c001db30:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001db34:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001db3a:	c1 e0 06             	shl    eax,0x6
c001db3d:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001db43:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001db4d:	c7 44 24 04 d8 36 02 c0 	mov    DWORD PTR [esp+0x4],0xc00236d8
c001db55:	e9 cc 10 ff ff       	jmp    c000ec26 <KePanic(char const*)>

c001db5a <ATA::open(int, int, void*)>:
c001db5a:	53                   	push   ebx
c001db5b:	83 ec 08             	sub    esp,0x8
c001db5e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001db62:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001db66:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001db6a:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001db70:	c1 e0 06             	shl    eax,0x6
c001db73:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001db79:	01 d0                	add    eax,edx
c001db7b:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001db82:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001db88:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001db8f:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001db99:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001dba0:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001dba6:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001dbad:	75 0c                	jne    c001dbbb <ATA::open(int, int, void*)+0x61>
c001dbaf:	83 ec 0c             	sub    esp,0xc
c001dbb2:	53                   	push   ebx
c001dbb3:	e8 78 ff ff ff       	call   c001db30 <ATA::detectCHS()>
c001dbb8:	83 c4 10             	add    esp,0x10
c001dbbb:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001dbc1:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001dbc7:	c1 e0 06             	shl    eax,0x6
c001dbca:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001dbd1:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001dbdb:	d1 e8                	shr    eax,1
c001dbdd:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001dbe3:	6a 04                	push   0x4
c001dbe5:	6a 0c                	push   0xc
c001dbe7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001dbee:	50                   	push   eax
c001dbef:	52                   	push   edx
c001dbf0:	e8 0f e9 ff ff       	call   c001c504 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001dbf5:	90                   	nop
c001dbf6:	90                   	nop
c001dbf7:	6a 00                	push   0x0
c001dbf9:	6a 0c                	push   0xc
c001dbfb:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001dc02:	50                   	push   eax
c001dc03:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001dc09:	e8 f6 e8 ff ff       	call   c001c504 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001dc0e:	83 c4 14             	add    esp,0x14
c001dc11:	53                   	push   ebx
c001dc12:	e8 77 b8 fe ff       	call   c000948e <PhysicalDisk::startCache()>
c001dc17:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001dc1a:	e8 57 c7 fe ff       	call   c000a376 <createPartitionsForDisk(PhysicalDisk*)>
c001dc1f:	83 c4 18             	add    esp,0x18
c001dc22:	31 c0                	xor    eax,eax
c001dc24:	5b                   	pop    ebx
c001dc25:	c3                   	ret    

c001dc26 <combineCharAndColour(char, unsigned char)>:
c001dc26:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001dc2b:	66 0f be 54 24 04    	movsx  dx,BYTE PTR [esp+0x4]
c001dc31:	c1 e0 08             	shl    eax,0x8
c001dc34:	09 d0                	or     eax,edx
c001dc36:	c3                   	ret    

c001dc37 <combineColours(unsigned char, unsigned char)>:
c001dc37:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001dc3c:	c1 e0 04             	shl    eax,0x4
c001dc3f:	0b 44 24 04          	or     eax,DWORD PTR [esp+0x4]
c001dc43:	c3                   	ret    

c001dc44 <ATAPI::write(unsigned long long, int, void*)>:
c001dc44:	b8 03 00 00 00       	mov    eax,0x3
c001dc49:	c3                   	ret    

c001dc4a <ATAPI::close(int, int, void*)>:
c001dc4a:	83 ec 0c             	sub    esp,0xc
c001dc4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc51:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001dc57:	85 c0                	test   eax,eax
c001dc59:	74 0c                	je     c001dc67 <ATAPI::close(int, int, void*)+0x1d>
c001dc5b:	8b 10                	mov    edx,DWORD PTR [eax]
c001dc5d:	83 ec 0c             	sub    esp,0xc
c001dc60:	50                   	push   eax
c001dc61:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001dc64:	83 c4 10             	add    esp,0x10
c001dc67:	31 c0                	xor    eax,eax
c001dc69:	83 c4 0c             	add    esp,0xc
c001dc6c:	c3                   	ret    
c001dc6d:	90                   	nop

c001dc6e <ATAPI::ATAPI()>:
c001dc6e:	83 ec 0c             	sub    esp,0xc
c001dc71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc75:	83 ec 04             	sub    esp,0x4
c001dc78:	68 00 08 00 00       	push   0x800
c001dc7d:	68 2d 38 02 c0       	push   0xc002382d
c001dc82:	50                   	push   eax
c001dc83:	e8 9e b7 fe ff       	call   c0009426 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001dc88:	83 c4 10             	add    esp,0x10
c001dc8b:	ba 3c 37 02 c0       	mov    edx,0xc002373c
c001dc90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc94:	89 10                	mov    DWORD PTR [eax],edx
c001dc96:	90                   	nop
c001dc97:	83 c4 0c             	add    esp,0xc
c001dc9a:	c3                   	ret    
c001dc9b:	90                   	nop

c001dc9c <ATAPI::readyForCommand()>:
c001dc9c:	56                   	push   esi
c001dc9d:	53                   	push   ebx
c001dc9e:	53                   	push   ebx
c001dc9f:	31 db                	xor    ebx,ebx
c001dca1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001dca5:	51                   	push   ecx
c001dca6:	6a 0c                	push   0xc
c001dca8:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001dcaf:	50                   	push   eax
c001dcb0:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001dcb6:	e8 09 e9 ff ff       	call   c001c5c4 <IDE::read(unsigned char, unsigned char)>
c001dcbb:	83 c4 10             	add    esp,0x10
c001dcbe:	a8 88                	test   al,0x88
c001dcc0:	74 25                	je     c001dce7 <ATAPI::readyForCommand()+0x4b>
c001dcc2:	43                   	inc    ebx
c001dcc3:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001dcc9:	7e da                	jle    c001dca5 <ATAPI::readyForCommand()+0x9>
c001dccb:	83 ec 0c             	sub    esp,0xc
c001dcce:	68 5e 01 00 00       	push   0x15e
c001dcd3:	e8 f0 78 ff ff       	call   c00155c8 <milliTenthSleep(unsigned int)>
c001dcd8:	83 c4 10             	add    esp,0x10
c001dcdb:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001dce1:	75 c2                	jne    c001dca5 <ATAPI::readyForCommand()+0x9>
c001dce3:	31 c0                	xor    eax,eax
c001dce5:	eb 02                	jmp    c001dce9 <ATAPI::readyForCommand()+0x4d>
c001dce7:	b0 01                	mov    al,0x1
c001dce9:	5a                   	pop    edx
c001dcea:	5b                   	pop    ebx
c001dceb:	5e                   	pop    esi
c001dcec:	c3                   	ret    
c001dced:	90                   	nop

c001dcee <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001dcee:	55                   	push   ebp
c001dcef:	57                   	push   edi
c001dcf0:	56                   	push   esi
c001dcf1:	53                   	push   ebx
c001dcf2:	83 ec 20             	sub    esp,0x20
c001dcf5:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001dcf9:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001dcfd:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001dd01:	6a 01                	push   0x1
c001dd03:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001dd0a:	50                   	push   eax
c001dd0b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dd11:	e8 fc e9 ff ff       	call   c001c712 <IDE::enableIRQs(unsigned char, bool)>
c001dd16:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001dd1d:	59                   	pop    ecx
c001dd1e:	5e                   	pop    esi
c001dd1f:	50                   	push   eax
c001dd20:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dd26:	e8 b3 e7 ff ff       	call   c001c4de <IDE::prepareInterrupt(unsigned char)>
c001dd2b:	89 3c 24             	mov    DWORD PTR [esp],edi
c001dd2e:	e8 69 ff ff ff       	call   c001dc9c <ATAPI::readyForCommand()>
c001dd33:	83 c4 10             	add    esp,0x10
c001dd36:	84 c0                	test   al,al
c001dd38:	75 0a                	jne    c001dd44 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x56>
c001dd3a:	bb 01 00 00 00       	mov    ebx,0x1
c001dd3f:	e9 5f 02 00 00       	jmp    c001dfa3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001dd44:	8b 87 74 01 00 00    	mov    eax,DWORD PTR [edi+0x174]
c001dd4a:	c1 e0 04             	shl    eax,0x4
c001dd4d:	0f b6 c0             	movzx  eax,al
c001dd50:	50                   	push   eax
c001dd51:	6a 06                	push   0x6
c001dd53:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001dd5a:	50                   	push   eax
c001dd5b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dd61:	e8 9e e7 ff ff       	call   c001c504 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001dd66:	6a 00                	push   0x0
c001dd68:	6a 01                	push   0x1
c001dd6a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001dd71:	50                   	push   eax
c001dd72:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dd78:	e8 87 e7 ff ff       	call   c001c504 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001dd7d:	83 c4 20             	add    esp,0x20
c001dd80:	0f b6 c3             	movzx  eax,bl
c001dd83:	50                   	push   eax
c001dd84:	0f b6 df             	movzx  ebx,bh
c001dd87:	6a 04                	push   0x4
c001dd89:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001dd90:	50                   	push   eax
c001dd91:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dd97:	e8 68 e7 ff ff       	call   c001c504 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001dd9c:	53                   	push   ebx
c001dd9d:	6a 05                	push   0x5
c001dd9f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001dda6:	50                   	push   eax
c001dda7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ddad:	e8 52 e7 ff ff       	call   c001c504 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ddb2:	83 c4 20             	add    esp,0x20
c001ddb5:	68 a0 00 00 00       	push   0xa0
c001ddba:	6a 07                	push   0x7
c001ddbc:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ddc3:	50                   	push   eax
c001ddc4:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ddca:	e8 35 e7 ff ff       	call   c001c504 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ddcf:	83 c4 0c             	add    esp,0xc
c001ddd2:	6a 01                	push   0x1
c001ddd4:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001dddb:	50                   	push   eax
c001dddc:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dde2:	e8 23 f4 ff ff       	call   c001d20a <IDE::polling(unsigned char, unsigned int)>
c001dde7:	83 c4 10             	add    esp,0x10
c001ddea:	0f b6 d8             	movzx  ebx,al
c001dded:	8b 87 70 01 00 00    	mov    eax,DWORD PTR [edi+0x170]
c001ddf3:	85 db                	test   ebx,ebx
c001ddf5:	74 20                	je     c001de17 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x129>
c001ddf7:	53                   	push   ebx
c001ddf8:	0f b6 c0             	movzx  eax,al
c001ddfb:	0f b6 97 74 01 00 00 	movzx  edx,BYTE PTR [edi+0x174]
c001de02:	52                   	push   edx
c001de03:	50                   	push   eax
c001de04:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001de0a:	e8 41 f3 ff ff       	call   c001d150 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001de0f:	83 c4 10             	add    esp,0x10
c001de12:	e9 8c 01 00 00       	jmp    c001dfa3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001de17:	52                   	push   edx
c001de18:	0f b6 c0             	movzx  eax,al
c001de1b:	52                   	push   edx
c001de1c:	50                   	push   eax
c001de1d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001de23:	e8 ca e6 ff ff       	call   c001c4f2 <IDE::getBase(unsigned char)>
c001de28:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001de2c:	b9 06 00 00 00       	mov    ecx,0x6
c001de31:	89 c2                	mov    edx,eax
c001de33:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001de36:	89 e8                	mov    eax,ebp
c001de38:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001de3c:	83 c4 10             	add    esp,0x10
c001de3f:	0f b6 c0             	movzx  eax,al
c001de42:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001de46:	85 db                	test   ebx,ebx
c001de48:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001de4e:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001de55:	0f 84 eb 00 00 00    	je     c001df46 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001de5b:	55                   	push   ebp
c001de5c:	55                   	push   ebp
c001de5d:	52                   	push   edx
c001de5e:	50                   	push   eax
c001de5f:	e8 14 e8 ff ff       	call   c001c678 <IDE::waitInterrupt(unsigned char)>
c001de64:	83 c4 10             	add    esp,0x10
c001de67:	84 c0                	test   al,al
c001de69:	0f 84 cb fe ff ff    	je     c001dd3a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x4c>
c001de6f:	56                   	push   esi
c001de70:	56                   	push   esi
c001de71:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001de78:	50                   	push   eax
c001de79:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001de7f:	e8 5a e6 ff ff       	call   c001c4de <IDE::prepareInterrupt(unsigned char)>
c001de84:	83 c4 0c             	add    esp,0xc
c001de87:	6a 04                	push   0x4
c001de89:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001de90:	50                   	push   eax
c001de91:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001de97:	e8 28 e7 ff ff       	call   c001c5c4 <IDE::read(unsigned char, unsigned char)>
c001de9c:	83 c4 0c             	add    esp,0xc
c001de9f:	6a 05                	push   0x5
c001dea1:	89 c6                	mov    esi,eax
c001dea3:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001deaa:	50                   	push   eax
c001deab:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001deb1:	e8 0e e7 ff ff       	call   c001c5c4 <IDE::read(unsigned char, unsigned char)>
c001deb6:	83 c4 10             	add    esp,0x10
c001deb9:	0f b6 e8             	movzx  ebp,al
c001debc:	89 f0                	mov    eax,esi
c001debe:	c1 e5 08             	shl    ebp,0x8
c001dec1:	0f b6 f0             	movzx  esi,al
c001dec4:	09 f5                	or     ebp,esi
c001dec6:	31 f6                	xor    esi,esi
c001dec8:	d1 fd                	sar    ebp,1
c001deca:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001decf:	74 5c                	je     c001df2d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x23f>
c001ded1:	39 ee                	cmp    esi,ebp
c001ded3:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001ded9:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001dee0:	75 0d                	jne    c001deef <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x201>
c001dee2:	8d 0c 36             	lea    ecx,[esi+esi*1]
c001dee5:	01 4c 24 40          	add    DWORD PTR [esp+0x40],ecx
c001dee9:	4b                   	dec    ebx
c001deea:	e9 57 ff ff ff       	jmp    c001de46 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x158>
c001deef:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001def3:	66 8b 0c 71          	mov    cx,WORD PTR [ecx+esi*2]
c001def7:	66 89 4c 24 0a       	mov    WORD PTR [esp+0xa],cx
c001defc:	51                   	push   ecx
c001defd:	51                   	push   ecx
c001defe:	52                   	push   edx
c001deff:	50                   	push   eax
c001df00:	e8 ed e5 ff ff       	call   c001c4f2 <IDE::getBase(unsigned char)>
c001df05:	89 c2                	mov    edx,eax
c001df07:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c001df0c:	66 ef                	out    dx,ax
c001df0e:	46                   	inc    esi
c001df0f:	83 c4 10             	add    esp,0x10
c001df12:	eb bd                	jmp    c001ded1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e3>
c001df14:	51                   	push   ecx
c001df15:	51                   	push   ecx
c001df16:	52                   	push   edx
c001df17:	50                   	push   eax
c001df18:	e8 d5 e5 ff ff       	call   c001c4f2 <IDE::getBase(unsigned char)>
c001df1d:	89 c2                	mov    edx,eax
c001df1f:	66 ed                	in     ax,dx
c001df21:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001df25:	83 c4 10             	add    esp,0x10
c001df28:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c001df2c:	46                   	inc    esi
c001df2d:	39 ee                	cmp    esi,ebp
c001df2f:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001df35:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001df3c:	75 d6                	jne    c001df14 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x226>
c001df3e:	01 f6                	add    esi,esi
c001df40:	01 74 24 40          	add    DWORD PTR [esp+0x40],esi
c001df44:	eb a3                	jmp    c001dee9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fb>
c001df46:	51                   	push   ecx
c001df47:	51                   	push   ecx
c001df48:	52                   	push   edx
c001df49:	50                   	push   eax
c001df4a:	e8 29 e7 ff ff       	call   c001c678 <IDE::waitInterrupt(unsigned char)>
c001df4f:	83 c4 10             	add    esp,0x10
c001df52:	84 c0                	test   al,al
c001df54:	0f 84 e0 fd ff ff    	je     c001dd3a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x4c>
c001df5a:	52                   	push   edx
c001df5b:	bb a0 86 01 00       	mov    ebx,0x186a0
c001df60:	52                   	push   edx
c001df61:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001df68:	50                   	push   eax
c001df69:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001df6f:	e8 6a e5 ff ff       	call   c001c4de <IDE::prepareInterrupt(unsigned char)>
c001df74:	83 c4 10             	add    esp,0x10
c001df77:	50                   	push   eax
c001df78:	50                   	push   eax
c001df79:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001df80:	50                   	push   eax
c001df81:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001df87:	e8 66 e5 ff ff       	call   c001c4f2 <IDE::getBase(unsigned char)>
c001df8c:	8d 50 07             	lea    edx,[eax+0x7]
c001df8f:	ec                   	in     al,dx
c001df90:	83 c4 10             	add    esp,0x10
c001df93:	a8 88                	test   al,0x88
c001df95:	74 0a                	je     c001dfa1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001df97:	4b                   	dec    ebx
c001df98:	75 dd                	jne    c001df77 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001df9a:	bb 02 00 00 00       	mov    ebx,0x2
c001df9f:	eb 02                	jmp    c001dfa3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001dfa1:	31 db                	xor    ebx,ebx
c001dfa3:	83 c4 1c             	add    esp,0x1c
c001dfa6:	89 d8                	mov    eax,ebx
c001dfa8:	5b                   	pop    ebx
c001dfa9:	5e                   	pop    esi
c001dfaa:	5f                   	pop    edi
c001dfab:	5d                   	pop    ebp
c001dfac:	c3                   	ret    
c001dfad:	90                   	nop

c001dfae <ATAPI::diskRemoved()>:
c001dfae:	53                   	push   ebx
c001dfaf:	83 ec 14             	sub    esp,0x14
c001dfb2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001dfb6:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001dfbd:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001dfc3:	e8 9e c0 fe ff       	call   c000a066 <LogicalDisk::unmount()>
c001dfc8:	58                   	pop    eax
c001dfc9:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001dfcf:	e8 70 ca fe ff       	call   c000aa44 <VCache::writeWriteBuffer()>
c001dfd4:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001dfda:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001dfde:	83 c4 18             	add    esp,0x18
c001dfe1:	5b                   	pop    ebx
c001dfe2:	e9 4d ca fe ff       	jmp    c000aa34 <VCache::invalidateReadBuffer()>
c001dfe7:	90                   	nop

c001dfe8 <ATAPI::eject()>:
c001dfe8:	57                   	push   edi
c001dfe9:	b9 03 00 00 00       	mov    ecx,0x3
c001dfee:	53                   	push   ebx
c001dfef:	83 ec 14             	sub    esp,0x14
c001dff2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001dff6:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001dffa:	fc                   	cld    
c001dffb:	31 c0                	xor    eax,eax
c001dffd:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001dfff:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001e004:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001e009:	50                   	push   eax
c001e00a:	50                   	push   eax
c001e00b:	6a 00                	push   0x0
c001e00d:	6a 00                	push   0x0
c001e00f:	6a 00                	push   0x0
c001e011:	6a 02                	push   0x2
c001e013:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001e017:	50                   	push   eax
c001e018:	53                   	push   ebx
c001e019:	e8 d0 fc ff ff       	call   c001dcee <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001e01e:	83 c4 14             	add    esp,0x14
c001e021:	53                   	push   ebx
c001e022:	e8 87 ff ff ff       	call   c001dfae <ATAPI::diskRemoved()>
c001e027:	83 c4 24             	add    esp,0x24
c001e02a:	31 c0                	xor    eax,eax
c001e02c:	5b                   	pop    ebx
c001e02d:	5f                   	pop    edi
c001e02e:	c3                   	ret    
c001e02f:	90                   	nop

c001e030 <ATAPI::diskInserted()>:
c001e030:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e034:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001e03b:	c3                   	ret    

c001e03c <ATAPI::detectMedia()>:
c001e03c:	56                   	push   esi
c001e03d:	53                   	push   ebx
c001e03e:	83 ec 28             	sub    esp,0x28
c001e041:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e045:	6a 0c                	push   0xc
c001e047:	6a 00                	push   0x0
c001e049:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001e04d:	56                   	push   esi
c001e04e:	e8 9d 24 fe ff       	call   c00004f0 <memset>
c001e053:	58                   	pop    eax
c001e054:	5a                   	pop    edx
c001e055:	6a 00                	push   0x0
c001e057:	6a 00                	push   0x0
c001e059:	6a 00                	push   0x0
c001e05b:	6a 00                	push   0x0
c001e05d:	56                   	push   esi
c001e05e:	53                   	push   ebx
c001e05f:	e8 8a fc ff ff       	call   c001dcee <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001e064:	83 c4 1c             	add    esp,0x1c
c001e067:	6a 0c                	push   0xc
c001e069:	6a 00                	push   0x0
c001e06b:	56                   	push   esi
c001e06c:	e8 7f 24 fe ff       	call   c00004f0 <memset>
c001e071:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001e076:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001e07b:	59                   	pop    ecx
c001e07c:	58                   	pop    eax
c001e07d:	6a 01                	push   0x1
c001e07f:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001e083:	50                   	push   eax
c001e084:	6a 00                	push   0x0
c001e086:	6a 12                	push   0x12
c001e088:	56                   	push   esi
c001e089:	53                   	push   ebx
c001e08a:	e8 5f fc ff ff       	call   c001dcee <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001e08f:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001e093:	83 c4 20             	add    esp,0x20
c001e096:	83 e0 7f             	and    eax,0x7f
c001e099:	83 f8 70             	cmp    eax,0x70
c001e09c:	74 15                	je     c001e0b3 <ATAPI::detectMedia()+0x77>
c001e09e:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001e0a5:	75 0c                	jne    c001e0b3 <ATAPI::detectMedia()+0x77>
c001e0a7:	83 ec 0c             	sub    esp,0xc
c001e0aa:	53                   	push   ebx
c001e0ab:	e8 80 ff ff ff       	call   c001e030 <ATAPI::diskInserted()>
c001e0b0:	83 c4 10             	add    esp,0x10
c001e0b3:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001e0b7:	83 e0 0f             	and    eax,0xf
c001e0ba:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001e0bf:	0f b6 c0             	movzx  eax,al
c001e0c2:	75 19                	jne    c001e0dd <ATAPI::detectMedia()+0xa1>
c001e0c4:	83 f8 02             	cmp    eax,0x2
c001e0c7:	75 14                	jne    c001e0dd <ATAPI::detectMedia()+0xa1>
c001e0c9:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001e0d0:	74 24                	je     c001e0f6 <ATAPI::detectMedia()+0xba>
c001e0d2:	83 ec 0c             	sub    esp,0xc
c001e0d5:	53                   	push   ebx
c001e0d6:	e8 d3 fe ff ff       	call   c001dfae <ATAPI::diskRemoved()>
c001e0db:	eb 16                	jmp    c001e0f3 <ATAPI::detectMedia()+0xb7>
c001e0dd:	85 c0                	test   eax,eax
c001e0df:	75 15                	jne    c001e0f6 <ATAPI::detectMedia()+0xba>
c001e0e1:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001e0e8:	75 0c                	jne    c001e0f6 <ATAPI::detectMedia()+0xba>
c001e0ea:	83 ec 0c             	sub    esp,0xc
c001e0ed:	53                   	push   ebx
c001e0ee:	e8 3d ff ff ff       	call   c001e030 <ATAPI::diskInserted()>
c001e0f3:	83 c4 10             	add    esp,0x10
c001e0f6:	83 c4 24             	add    esp,0x24
c001e0f9:	5b                   	pop    ebx
c001e0fa:	5e                   	pop    esi
c001e0fb:	c3                   	ret    

c001e0fc <ATAPI::open(int, int, void*)>:
c001e0fc:	56                   	push   esi
c001e0fd:	53                   	push   ebx
c001e0fe:	50                   	push   eax
c001e0ff:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e103:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e107:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e10b:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001e111:	c1 e0 06             	shl    eax,0x6
c001e114:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001e11a:	01 d0                	add    eax,edx
c001e11c:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001e123:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001e129:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001e130:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001e13a:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001e141:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001e147:	6a 04                	push   0x4
c001e149:	6a 0c                	push   0xc
c001e14b:	51                   	push   ecx
c001e14c:	52                   	push   edx
c001e14d:	e8 b2 e3 ff ff       	call   c001c504 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e152:	90                   	nop
c001e153:	90                   	nop
c001e154:	6a 00                	push   0x0
c001e156:	6a 0c                	push   0xc
c001e158:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e15f:	50                   	push   eax
c001e160:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e166:	e8 99 e3 ff ff       	call   c001c504 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e16b:	83 c4 14             	add    esp,0x14
c001e16e:	68 78 01 00 00       	push   0x178
c001e173:	e8 58 07 ff ff       	call   c000e8d0 <malloc>
c001e178:	83 c4 0c             	add    esp,0xc
c001e17b:	6a 00                	push   0x0
c001e17d:	68 ff ff ff 7f       	push   0x7fffffff
c001e182:	6a 00                	push   0x0
c001e184:	6a 00                	push   0x0
c001e186:	53                   	push   ebx
c001e187:	68 df 38 02 c0       	push   0xc00238df
c001e18c:	89 c6                	mov    esi,eax
c001e18e:	50                   	push   eax
c001e18f:	e8 10 bd fe ff       	call   c0009ea4 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001e194:	83 c4 14             	add    esp,0x14
c001e197:	56                   	push   esi
c001e198:	e8 c7 bd fe ff       	call   c0009f64 <LogicalDisk::assignDriveLetter()>
c001e19d:	5a                   	pop    edx
c001e19e:	59                   	pop    ecx
c001e19f:	0f be c0             	movsx  eax,al
c001e1a2:	50                   	push   eax
c001e1a3:	68 24 37 02 c0       	push   0xc0023724
c001e1a8:	e8 a1 8d fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001e1ad:	58                   	pop    eax
c001e1ae:	5a                   	pop    edx
c001e1af:	56                   	push   esi
c001e1b0:	53                   	push   ebx
c001e1b1:	e8 8c ae fe ff       	call   c0009042 <Device::addChild(Device*)>
c001e1b6:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001e1bc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e1bf:	e8 ca b2 fe ff       	call   c000948e <PhysicalDisk::startCache()>
c001e1c4:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001e1cb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e1ce:	e8 69 fe ff ff       	call   c001e03c <ATAPI::detectMedia()>
c001e1d3:	83 c4 14             	add    esp,0x14
c001e1d6:	31 c0                	xor    eax,eax
c001e1d8:	5b                   	pop    ebx
c001e1d9:	5e                   	pop    esi
c001e1da:	c3                   	ret    
c001e1db:	90                   	nop

c001e1dc <ATAPI::read(unsigned long long, int, void*)>:
c001e1dc:	55                   	push   ebp
c001e1dd:	57                   	push   edi
c001e1de:	56                   	push   esi
c001e1df:	53                   	push   ebx
c001e1e0:	83 ec 1c             	sub    esp,0x1c
c001e1e3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e1e7:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001e1eb:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001e1ef:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001e1f6:	74 3c                	je     c001e234 <ATAPI::read(unsigned long long, int, void*)+0x58>
c001e1f8:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001e1fc:	b9 03 00 00 00       	mov    ecx,0x3
c001e201:	fc                   	cld    
c001e202:	31 c0                	xor    eax,eax
c001e204:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e206:	89 e8                	mov    eax,ebp
c001e208:	0f ce                	bswap  esi
c001e20a:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001e20e:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001e213:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001e217:	50                   	push   eax
c001e218:	50                   	push   eax
c001e219:	55                   	push   ebp
c001e21a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001e21e:	c1 e5 0b             	shl    ebp,0xb
c001e221:	6a 00                	push   0x0
c001e223:	55                   	push   ebp
c001e224:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001e228:	50                   	push   eax
c001e229:	53                   	push   ebx
c001e22a:	e8 bf fa ff ff       	call   c001dcee <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001e22f:	83 c4 20             	add    esp,0x20
c001e232:	eb 1a                	jmp    c001e24e <ATAPI::read(unsigned long long, int, void*)+0x72>
c001e234:	83 ec 0c             	sub    esp,0xc
c001e237:	53                   	push   ebx
c001e238:	e8 ff fd ff ff       	call   c001e03c <ATAPI::detectMedia()>
c001e23d:	83 c4 10             	add    esp,0x10
c001e240:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001e247:	75 af                	jne    c001e1f8 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001e249:	b8 02 00 00 00       	mov    eax,0x2
c001e24e:	83 c4 1c             	add    esp,0x1c
c001e251:	5b                   	pop    ebx
c001e252:	5e                   	pop    esi
c001e253:	5f                   	pop    edi
c001e254:	5d                   	pop    ebp
c001e255:	c3                   	ret    

c001e256 <SATA::close(int, int, void*)>:
c001e256:	83 ec 0c             	sub    esp,0xc
c001e259:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e25d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e263:	85 c0                	test   eax,eax
c001e265:	74 0c                	je     c001e273 <SATA::close(int, int, void*)+0x1d>
c001e267:	8b 10                	mov    edx,DWORD PTR [eax]
c001e269:	83 ec 0c             	sub    esp,0xc
c001e26c:	50                   	push   eax
c001e26d:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001e270:	83 c4 10             	add    esp,0x10
c001e273:	31 c0                	xor    eax,eax
c001e275:	83 c4 0c             	add    esp,0xc
c001e278:	c3                   	ret    
c001e279:	90                   	nop

c001e27a <SATA::powerSaving(PowerSavingLevel)>:
c001e27a:	c3                   	ret    
c001e27b:	90                   	nop

c001e27c <SATA::open(int, int, void*)>:
c001e27c:	56                   	push   esi
c001e27d:	53                   	push   ebx
c001e27e:	83 ec 10             	sub    esp,0x10
c001e281:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001e285:	68 6c 37 02 c0       	push   0xc002376c
c001e28a:	e8 bf 8c fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001e28f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e293:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001e29d:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001e2a7:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001e2ad:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001e2b1:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001e2bb:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001e2c2:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001e2c8:	e8 53 0b ff ff       	call   c000ee20 <Phys::allocatePage()>
c001e2cd:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001e2d3:	89 c6                	mov    esi,eax
c001e2d5:	e8 46 0b ff ff       	call   c000ee20 <Phys::allocatePage()>
c001e2da:	81 c6 00 10 00 00    	add    esi,0x1000
c001e2e0:	83 c4 10             	add    esp,0x10
c001e2e3:	39 c6                	cmp    esi,eax
c001e2e5:	74 10                	je     c001e2f7 <SATA::open(int, int, void*)+0x7b>
c001e2e7:	83 ec 0c             	sub    esp,0xc
c001e2ea:	68 78 37 02 c0       	push   0xc0023778
c001e2ef:	e8 32 09 ff ff       	call   c000ec26 <KePanic(char const*)>
c001e2f4:	83 c4 10             	add    esp,0x10
c001e2f7:	83 ec 0c             	sub    esp,0xc
c001e2fa:	6a 02                	push   0x2
c001e2fc:	e8 8a 3c ff ff       	call   c0011f8b <Virt::allocateKernelVirtualPages(int)>
c001e301:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001e307:	6a 03                	push   0x3
c001e309:	50                   	push   eax
c001e30a:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001e310:	ff 35 d0 be 02 c0    	push   DWORD PTR ds:0xc002bed0
c001e316:	e8 4f 43 ff ff       	call   c001266a <VAS::mapPage(unsigned long, unsigned long, int)>
c001e31b:	83 c4 14             	add    esp,0x14
c001e31e:	53                   	push   ebx
c001e31f:	e8 6a b1 fe ff       	call   c000948e <PhysicalDisk::startCache()>
c001e324:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e327:	e8 4a c0 fe ff       	call   c000a376 <createPartitionsForDisk(PhysicalDisk*)>
c001e32c:	83 c4 14             	add    esp,0x14
c001e32f:	31 c0                	xor    eax,eax
c001e331:	5b                   	pop    ebx
c001e332:	5e                   	pop    esi
c001e333:	c3                   	ret    

c001e334 <SATA::SATA()>:
c001e334:	83 ec 0c             	sub    esp,0xc
c001e337:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e33b:	83 ec 04             	sub    esp,0x4
c001e33e:	68 00 02 00 00       	push   0x200
c001e343:	68 8c 37 02 c0       	push   0xc002378c
c001e348:	50                   	push   eax
c001e349:	e8 d8 b0 fe ff       	call   c0009426 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001e34e:	83 c4 10             	add    esp,0x10
c001e351:	ba fc 37 02 c0       	mov    edx,0xc00237fc
c001e356:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e35a:	89 10                	mov    DWORD PTR [eax],edx
c001e35c:	90                   	nop
c001e35d:	83 c4 0c             	add    esp,0xc
c001e360:	c3                   	ret    
c001e361:	90                   	nop

c001e362 <SATA::access(unsigned long long, int, void*, bool)>:
c001e362:	55                   	push   ebp
c001e363:	57                   	push   edi
c001e364:	56                   	push   esi
c001e365:	53                   	push   ebx
c001e366:	83 ec 2c             	sub    esp,0x2c
c001e369:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001e36d:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001e371:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001e375:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001e379:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001e37d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001e381:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e385:	fa                   	cli    
c001e386:	ff 05 b0 c6 02 c0    	inc    DWORD PTR ds:0xc002c6b0
c001e38c:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001e391:	7e 10                	jle    c001e3a3 <SATA::access(unsigned long long, int, void*, bool)+0x41>
c001e393:	83 ec 0c             	sub    esp,0xc
c001e396:	68 9c 37 02 c0       	push   0xc002379c
c001e39b:	e8 86 08 ff ff       	call   c000ec26 <KePanic(char const*)>
c001e3a0:	83 c4 10             	add    esp,0x10
c001e3a3:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001e3a9:	8b ab 6c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x16c]
c001e3af:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001e3b5:	89 e8                	mov    eax,ebp
c001e3b7:	c1 e0 07             	shl    eax,0x7
c001e3ba:	01 d0                	add    eax,edx
c001e3bc:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001e3c6:	8d 45 02             	lea    eax,[ebp+0x2]
c001e3c9:	51                   	push   ecx
c001e3ca:	c1 e0 07             	shl    eax,0x7
c001e3cd:	51                   	push   ecx
c001e3ce:	01 d0                	add    eax,edx
c001e3d0:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001e3d4:	50                   	push   eax
c001e3d5:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001e3db:	e8 0a ef ff ff       	call   c001d2ea <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001e3e0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001e3e4:	83 c4 10             	add    esp,0x10
c001e3e7:	83 7c 24 0c ff       	cmp    DWORD PTR [esp+0xc],0xffffffff
c001e3ec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e3f0:	0f 84 ac 01 00 00    	je     c001e5a2 <SATA::access(unsigned long long, int, void*, bool)+0x240>
c001e3f6:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001e3fa:	c1 e0 09             	shl    eax,0x9
c001e3fd:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001e402:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001e406:	74 0e                	je     c001e416 <SATA::access(unsigned long long, int, void*, bool)+0xb4>
c001e408:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001e40e:	89 c1                	mov    ecx,eax
c001e410:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001e414:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e416:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001e41a:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001e420:	8d 45 02             	lea    eax,[ebp+0x2]
c001e423:	c1 e0 07             	shl    eax,0x7
c001e426:	01 d0                	add    eax,edx
c001e428:	8b 00                	mov    eax,DWORD PTR [eax]
c001e42a:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001e430:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001e436:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e43a:	c1 e1 05             	shl    ecx,0x5
c001e43d:	01 c8                	add    eax,ecx
c001e43f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e443:	83 e1 01             	and    ecx,0x1
c001e446:	89 ce                	mov    esi,ecx
c001e448:	8a 08                	mov    cl,BYTE PTR [eax]
c001e44a:	c1 e6 06             	shl    esi,0x6
c001e44d:	83 e1 bf             	and    ecx,0xffffffbf
c001e450:	09 f1                	or     ecx,esi
c001e452:	88 08                	mov    BYTE PTR [eax],cl
c001e454:	8b 08                	mov    ecx,DWORD PTR [eax]
c001e456:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001e45c:	81 c9 05 00 01 00    	or     ecx,0x10005
c001e462:	89 08                	mov    DWORD PTR [eax],ecx
c001e464:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001e46a:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001e470:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001e476:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001e479:	50                   	push   eax
c001e47a:	68 90 00 00 00       	push   0x90
c001e47f:	6a 00                	push   0x0
c001e481:	56                   	push   esi
c001e482:	e8 69 20 fe ff       	call   c00004f0 <memset>
c001e487:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001e48d:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001e493:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e497:	83 c4 10             	add    esp,0x10
c001e49a:	48                   	dec    eax
c001e49b:	25 ff ff 3f 00       	and    eax,0x3fffff
c001e4a0:	89 c1                	mov    ecx,eax
c001e4a2:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001e4a8:	25 00 00 c0 ff       	and    eax,0xffc00000
c001e4ad:	09 c8                	or     eax,ecx
c001e4af:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001e4b5:	8a 86 8f 00 00 00    	mov    al,BYTE PTR [esi+0x8f]
c001e4bb:	83 c8 80             	or     eax,0xffffff80
c001e4be:	88 86 8f 00 00 00    	mov    BYTE PTR [esi+0x8f],al
c001e4c4:	66 8b 06             	mov    ax,WORD PTR [esi]
c001e4c7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e4cb:	25 00 7f 00 00       	and    eax,0x7f00
c001e4d0:	0d 27 80 ff ff       	or     eax,0xffff8027
c001e4d5:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001e4da:	66 89 06             	mov    WORD PTR [esi],ax
c001e4dd:	b0 35                	mov    al,0x35
c001e4df:	75 02                	jne    c001e4e3 <SATA::access(unsigned long long, int, void*, bool)+0x181>
c001e4e1:	b0 25                	mov    al,0x25
c001e4e3:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001e4e6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e4ea:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001e4ee:	66 89 46 04          	mov    WORD PTR [esi+0x4],ax
c001e4f2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e4f6:	c1 e8 10             	shr    eax,0x10
c001e4f9:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001e4fc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e500:	c1 e8 18             	shr    eax,0x18
c001e503:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001e506:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001e50a:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001e50d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e511:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001e514:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001e518:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001e51c:	89 ee                	mov    esi,ebp
c001e51e:	31 c0                	xor    eax,eax
c001e520:	c1 e6 07             	shl    esi,0x7
c001e523:	01 d6                	add    esi,edx
c001e525:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001e52b:	80 e1 88             	and    cl,0x88
c001e52e:	74 0a                	je     c001e53a <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c001e530:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001e535:	74 0a                	je     c001e541 <SATA::access(unsigned long long, int, void*, bool)+0x1df>
c001e537:	40                   	inc    eax
c001e538:	eb eb                	jmp    c001e525 <SATA::access(unsigned long long, int, void*, bool)+0x1c3>
c001e53a:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001e53f:	75 0a                	jne    c001e54b <SATA::access(unsigned long long, int, void*, bool)+0x1e9>
c001e541:	83 ec 0c             	sub    esp,0xc
c001e544:	68 d5 37 02 c0       	push   0xc00237d5
c001e549:	eb 34                	jmp    c001e57f <SATA::access(unsigned long long, int, void*, bool)+0x21d>
c001e54b:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001e54f:	c1 e5 07             	shl    ebp,0x7
c001e552:	b8 01 00 00 00       	mov    eax,0x1
c001e557:	01 ea                	add    edx,ebp
c001e559:	d3 e0                	shl    eax,cl
c001e55b:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001e561:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001e567:	85 c8                	test   eax,ecx
c001e569:	74 2b                	je     c001e596 <SATA::access(unsigned long long, int, void*, bool)+0x234>
c001e56b:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001e571:	0f ba e1 1e          	bt     ecx,0x1e
c001e575:	73 ea                	jae    c001e561 <SATA::access(unsigned long long, int, void*, bool)+0x1ff>
c001e577:	83 ec 0c             	sub    esp,0xc
c001e57a:	68 e3 37 02 c0       	push   0xc00237e3
c001e57f:	e8 ca 89 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001e584:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c001e589:	83 c4 10             	add    esp,0x10
c001e58c:	48                   	dec    eax
c001e58d:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c001e592:	85 c0                	test   eax,eax
c001e594:	eb 17                	jmp    c001e5ad <SATA::access(unsigned long long, int, void*, bool)+0x24b>
c001e596:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001e59c:	0f ba e0 1e          	bt     eax,0x1e
c001e5a0:	73 15                	jae    c001e5b7 <SATA::access(unsigned long long, int, void*, bool)+0x255>
c001e5a2:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c001e5a7:	48                   	dec    eax
c001e5a8:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c001e5ad:	75 01                	jne    c001e5b0 <SATA::access(unsigned long long, int, void*, bool)+0x24e>
c001e5af:	fb                   	sti    
c001e5b0:	b8 01 00 00 00       	mov    eax,0x1
c001e5b5:	eb 29                	jmp    c001e5e0 <SATA::access(unsigned long long, int, void*, bool)+0x27e>
c001e5b7:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001e5bc:	75 10                	jne    c001e5ce <SATA::access(unsigned long long, int, void*, bool)+0x26c>
c001e5be:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001e5c4:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001e5c8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e5cc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e5ce:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c001e5d3:	48                   	dec    eax
c001e5d4:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c001e5d9:	75 03                	jne    c001e5de <SATA::access(unsigned long long, int, void*, bool)+0x27c>
c001e5db:	fb                   	sti    
c001e5dc:	eb 02                	jmp    c001e5e0 <SATA::access(unsigned long long, int, void*, bool)+0x27e>
c001e5de:	31 c0                	xor    eax,eax
c001e5e0:	83 c4 2c             	add    esp,0x2c
c001e5e3:	5b                   	pop    ebx
c001e5e4:	5e                   	pop    esi
c001e5e5:	5f                   	pop    edi
c001e5e6:	5d                   	pop    ebp
c001e5e7:	c3                   	ret    

c001e5e8 <SATA::read(unsigned long long, int, void*)>:
c001e5e8:	57                   	push   edi
c001e5e9:	b8 04 00 00 00       	mov    eax,0x4
c001e5ee:	56                   	push   esi
c001e5ef:	53                   	push   ebx
c001e5f0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e5f4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001e5f8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001e5fc:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001e600:	8d 7a ff             	lea    edi,[edx-0x1]
c001e603:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001e609:	77 25                	ja     c001e630 <SATA::read(unsigned long long, int, void*)+0x48>
c001e60b:	85 f6                	test   esi,esi
c001e60d:	b8 06 00 00 00       	mov    eax,0x6
c001e612:	74 1c                	je     c001e630 <SATA::read(unsigned long long, int, void*)+0x48>
c001e614:	50                   	push   eax
c001e615:	50                   	push   eax
c001e616:	6a 00                	push   0x0
c001e618:	56                   	push   esi
c001e619:	52                   	push   edx
c001e61a:	53                   	push   ebx
c001e61b:	51                   	push   ecx
c001e61c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e620:	e8 3d fd ff ff       	call   c001e362 <SATA::access(unsigned long long, int, void*, bool)>
c001e625:	83 c4 20             	add    esp,0x20
c001e628:	85 c0                	test   eax,eax
c001e62a:	0f 95 c0             	setne  al
c001e62d:	0f b6 c0             	movzx  eax,al
c001e630:	5b                   	pop    ebx
c001e631:	5e                   	pop    esi
c001e632:	5f                   	pop    edi
c001e633:	c3                   	ret    

c001e634 <SATA::write(unsigned long long, int, void*)>:
c001e634:	55                   	push   ebp
c001e635:	b8 04 00 00 00       	mov    eax,0x4
c001e63a:	57                   	push   edi
c001e63b:	56                   	push   esi
c001e63c:	53                   	push   ebx
c001e63d:	83 ec 0c             	sub    esp,0xc
c001e640:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001e644:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001e648:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001e64c:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001e650:	8d 73 ff             	lea    esi,[ebx-0x1]
c001e653:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001e659:	77 3d                	ja     c001e698 <SATA::write(unsigned long long, int, void*)+0x64>
c001e65b:	85 ed                	test   ebp,ebp
c001e65d:	b8 06 00 00 00       	mov    eax,0x6
c001e662:	74 34                	je     c001e698 <SATA::write(unsigned long long, int, void*)+0x64>
c001e664:	c1 e3 09             	shl    ebx,0x9
c001e667:	01 eb                	add    ebx,ebp
c001e669:	50                   	push   eax
c001e66a:	89 d6                	mov    esi,edx
c001e66c:	50                   	push   eax
c001e66d:	83 c6 01             	add    esi,0x1
c001e670:	6a 01                	push   0x1
c001e672:	89 cf                	mov    edi,ecx
c001e674:	55                   	push   ebp
c001e675:	83 d7 00             	adc    edi,0x0
c001e678:	6a 01                	push   0x1
c001e67a:	81 c5 00 02 00 00    	add    ebp,0x200
c001e680:	51                   	push   ecx
c001e681:	52                   	push   edx
c001e682:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001e686:	e8 d7 fc ff ff       	call   c001e362 <SATA::access(unsigned long long, int, void*, bool)>
c001e68b:	83 c4 20             	add    esp,0x20
c001e68e:	39 dd                	cmp    ebp,ebx
c001e690:	89 f2                	mov    edx,esi
c001e692:	89 f9                	mov    ecx,edi
c001e694:	75 d3                	jne    c001e669 <SATA::write(unsigned long long, int, void*)+0x35>
c001e696:	31 c0                	xor    eax,eax
c001e698:	83 c4 0c             	add    esp,0xc
c001e69b:	5b                   	pop    ebx
c001e69c:	5e                   	pop    esi
c001e69d:	5f                   	pop    edi
c001e69e:	5d                   	pop    ebp
c001e69f:	c3                   	ret    

c001e6a0 <SATAPI::write(unsigned long long, int, void*)>:
c001e6a0:	b8 03 00 00 00       	mov    eax,0x3
c001e6a5:	c3                   	ret    

c001e6a6 <SATAPI::close(int, int, void*)>:
c001e6a6:	83 ec 0c             	sub    esp,0xc
c001e6a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e6ad:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e6b3:	85 c0                	test   eax,eax
c001e6b5:	74 0c                	je     c001e6c3 <SATAPI::close(int, int, void*)+0x1d>
c001e6b7:	8b 10                	mov    edx,DWORD PTR [eax]
c001e6b9:	83 ec 0c             	sub    esp,0xc
c001e6bc:	50                   	push   eax
c001e6bd:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001e6c0:	83 c4 10             	add    esp,0x10
c001e6c3:	31 c0                	xor    eax,eax
c001e6c5:	83 c4 0c             	add    esp,0xc
c001e6c8:	c3                   	ret    
c001e6c9:	90                   	nop

c001e6ca <SATAPI::SATAPI()>:
c001e6ca:	83 ec 0c             	sub    esp,0xc
c001e6cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e6d1:	83 ec 04             	sub    esp,0x4
c001e6d4:	68 00 08 00 00       	push   0x800
c001e6d9:	68 2c 38 02 c0       	push   0xc002382c
c001e6de:	50                   	push   eax
c001e6df:	e8 42 ad fe ff       	call   c0009426 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001e6e4:	83 c4 10             	add    esp,0x10
c001e6e7:	ba 20 39 02 c0       	mov    edx,0xc0023920
c001e6ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e6f0:	89 10                	mov    DWORD PTR [eax],edx
c001e6f2:	90                   	nop
c001e6f3:	83 c4 0c             	add    esp,0xc
c001e6f6:	c3                   	ret    
c001e6f7:	90                   	nop

c001e6f8 <SATAPI::diskRemoved()>:
c001e6f8:	c3                   	ret    
c001e6f9:	90                   	nop

c001e6fa <SATAPI::diskInserted()>:
c001e6fa:	83 ec 18             	sub    esp,0x18
c001e6fd:	68 38 38 02 c0       	push   0xc0023838
c001e702:	e8 47 88 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001e707:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e70b:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c001e712:	83 c4 1c             	add    esp,0x1c
c001e715:	c3                   	ret    

c001e716 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001e716:	55                   	push   ebp
c001e717:	57                   	push   edi
c001e718:	56                   	push   esi
c001e719:	53                   	push   ebx
c001e71a:	83 ec 34             	sub    esp,0x34
c001e71d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001e721:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001e725:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001e729:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001e72d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001e731:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001e737:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001e73d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001e741:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001e747:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001e74b:	83 c0 02             	add    eax,0x2
c001e74e:	c1 e0 07             	shl    eax,0x7
c001e751:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001e755:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e759:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e75d:	c1 e0 07             	shl    eax,0x7
c001e760:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001e764:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001e768:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001e772:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001e776:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001e77c:	e8 69 eb ff ff       	call   c001d2ea <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001e781:	83 c4 10             	add    esp,0x10
c001e784:	89 c2                	mov    edx,eax
c001e786:	b8 01 00 00 00       	mov    eax,0x1
c001e78b:	83 fa ff             	cmp    edx,0xffffffff
c001e78e:	0f 84 5f 02 00 00    	je     c001e9f3 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2dd>
c001e794:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001e798:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e79c:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001e7a2:	8b 00                	mov    eax,DWORD PTR [eax]
c001e7a4:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001e7aa:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001e7b0:	89 d1                	mov    ecx,edx
c001e7b2:	c1 e1 05             	shl    ecx,0x5
c001e7b5:	01 c8                	add    eax,ecx
c001e7b7:	8b 08                	mov    ecx,DWORD PTR [eax]
c001e7b9:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001e7bf:	81 c9 25 00 01 00    	or     ecx,0x10025
c001e7c5:	89 08                	mov    DWORD PTR [eax],ecx
c001e7c7:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001e7cd:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001e7d3:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001e7d9:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001e7dc:	50                   	push   eax
c001e7dd:	68 90 00 00 00       	push   0x90
c001e7e2:	6a 00                	push   0x0
c001e7e4:	53                   	push   ebx
c001e7e5:	e8 06 1d fe ff       	call   c00004f0 <memset>
c001e7ea:	8d 7b 40             	lea    edi,[ebx+0x40]
c001e7ed:	b9 0c 00 00 00       	mov    ecx,0xc
c001e7f2:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001e7f6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e7f8:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c001e7fe:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001e802:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001e806:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001e80c:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001e810:	48                   	dec    eax
c001e811:	25 ff ff 3f 00       	and    eax,0x3fffff
c001e816:	89 c1                	mov    ecx,eax
c001e818:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001e81e:	25 00 00 c0 ff       	and    eax,0xffc00000
c001e823:	09 c8                	or     eax,ecx
c001e825:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001e82b:	8a 83 8f 00 00 00    	mov    al,BYTE PTR [ebx+0x8f]
c001e831:	83 c8 80             	or     eax,0xffffff80
c001e834:	88 83 8f 00 00 00    	mov    BYTE PTR [ebx+0x8f],al
c001e83a:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001e83d:	25 00 7f 00 00       	and    eax,0x7f00
c001e842:	0d 27 80 ff ff       	or     eax,0xffff8027
c001e847:	66 89 03             	mov    WORD PTR [ebx],ax
c001e84a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e84e:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c001e852:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e856:	c1 e8 10             	shr    eax,0x10
c001e859:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001e85c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e860:	c1 e8 18             	shr    eax,0x18
c001e863:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c001e866:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001e86a:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001e86d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e871:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001e874:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001e878:	83 c4 10             	add    esp,0x10
c001e87b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e87f:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001e883:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001e887:	31 c0                	xor    eax,eax
c001e889:	8b 8b 20 01 00 00    	mov    ecx,DWORD PTR [ebx+0x120]
c001e88f:	80 e1 88             	and    cl,0x88
c001e892:	74 0a                	je     c001e89e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x188>
c001e894:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001e899:	74 0a                	je     c001e8a5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x18f>
c001e89b:	40                   	inc    eax
c001e89c:	eb eb                	jmp    c001e889 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x173>
c001e89e:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001e8a3:	75 43                	jne    c001e8e8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d2>
c001e8a5:	83 ec 0c             	sub    esp,0xc
c001e8a8:	68 50 38 02 c0       	push   0xc0023850
c001e8ad:	e8 9c 86 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001e8b2:	58                   	pop    eax
c001e8b3:	5a                   	pop    edx
c001e8b4:	68 65 38 02 c0       	push   0xc0023865
c001e8b9:	ff 35 34 be 02 c0    	push   DWORD PTR ds:0xc002be34
c001e8bf:	e8 fa 2a ff ff       	call   c00113be <VgaText::puts(char const*)>
c001e8c4:	59                   	pop    ecx
c001e8c5:	5b                   	pop    ebx
c001e8c6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001e8ca:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001e8d0:	e8 af ea ff ff       	call   c001d384 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001e8d5:	5e                   	pop    esi
c001e8d6:	5f                   	pop    edi
c001e8d7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001e8db:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001e8e1:	e8 7e ea ff ff       	call   c001d364 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001e8e6:	eb 48                	jmp    c001e930 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21a>
c001e8e8:	b8 01 00 00 00       	mov    eax,0x1
c001e8ed:	88 d1                	mov    cl,dl
c001e8ef:	d3 e0                	shl    eax,cl
c001e8f1:	be a8 e4 ff ff       	mov    esi,0xffffe4a8
c001e8f6:	89 83 38 01 00 00    	mov    DWORD PTR [ebx+0x138],eax
c001e8fc:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001e900:	89 c7                	mov    edi,eax
c001e902:	c1 e3 07             	shl    ebx,0x7
c001e905:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c001e909:	8b 83 38 01 00 00    	mov    eax,DWORD PTR [ebx+0x138]
c001e90f:	85 c7                	test   edi,eax
c001e911:	8b 83 10 01 00 00    	mov    eax,DWORD PTR [ebx+0x110]
c001e917:	0f 84 a3 00 00 00    	je     c001e9c0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2aa>
c001e91d:	0f ba e0 1e          	bt     eax,0x1e
c001e921:	73 1a                	jae    c001e93d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x227>
c001e923:	83 ec 0c             	sub    esp,0xc
c001e926:	68 77 38 02 c0       	push   0xc0023877
c001e92b:	e8 1e 86 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001e930:	83 c4 10             	add    esp,0x10
c001e933:	b8 01 00 00 00       	mov    eax,0x1
c001e938:	e9 b6 00 00 00       	jmp    c001e9f3 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2dd>
c001e93d:	8d 86 70 17 00 00    	lea    eax,[esi+0x1770]
c001e943:	83 f8 0d             	cmp    eax,0xd
c001e946:	77 0a                	ja     c001e952 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x23c>
c001e948:	83 ec 0c             	sub    esp,0xc
c001e94b:	68 c8 00 00 00       	push   0xc8
c001e950:	eb 28                	jmp    c001e97a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001e952:	8d 86 88 13 00 00    	lea    eax,[esi+0x1388]
c001e958:	83 f8 0d             	cmp    eax,0xd
c001e95b:	77 0a                	ja     c001e967 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x251>
c001e95d:	83 ec 0c             	sub    esp,0xc
c001e960:	68 58 02 00 00       	push   0x258
c001e965:	eb 13                	jmp    c001e97a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001e967:	8d 86 a0 0f 00 00    	lea    eax,[esi+0xfa0]
c001e96d:	83 f8 06             	cmp    eax,0x6
c001e970:	77 10                	ja     c001e982 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x26c>
c001e972:	83 ec 0c             	sub    esp,0xc
c001e975:	68 dc 05 00 00       	push   0x5dc
c001e97a:	e8 49 6c ff ff       	call   c00155c8 <milliTenthSleep(unsigned int)>
c001e97f:	83 c4 10             	add    esp,0x10
c001e982:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001e986:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c001e989:	75 06                	jne    c001e991 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x27b>
c001e98b:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c001e98f:	74 15                	je     c001e9a6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x290>
c001e991:	83 fe 06             	cmp    esi,0x6
c001e994:	77 10                	ja     c001e9a6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x290>
c001e996:	83 ec 0c             	sub    esp,0xc
c001e999:	68 c4 09 00 00       	push   0x9c4
c001e99e:	e8 25 6c ff ff       	call   c00155c8 <milliTenthSleep(unsigned int)>
c001e9a3:	83 c4 10             	add    esp,0x10
c001e9a6:	46                   	inc    esi
c001e9a7:	81 fe b9 0b 00 00    	cmp    esi,0xbb9
c001e9ad:	0f 85 56 ff ff ff    	jne    c001e909 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f3>
c001e9b3:	83 ec 0c             	sub    esp,0xc
c001e9b6:	68 8a 38 02 c0       	push   0xc002388a
c001e9bb:	e9 6b ff ff ff       	jmp    c001e92b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x215>
c001e9c0:	0f ba e0 1e          	bt     eax,0x1e
c001e9c4:	73 0d                	jae    c001e9d3 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2bd>
c001e9c6:	83 ec 0c             	sub    esp,0xc
c001e9c9:	68 9e 38 02 c0       	push   0xc002389e
c001e9ce:	e9 58 ff ff ff       	jmp    c001e92b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x215>
c001e9d3:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001e9d8:	74 17                	je     c001e9f1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2db>
c001e9da:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001e9df:	74 10                	je     c001e9f1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2db>
c001e9e1:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c001e9e7:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001e9eb:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001e9ef:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e9f1:	31 c0                	xor    eax,eax
c001e9f3:	83 c4 2c             	add    esp,0x2c
c001e9f6:	5b                   	pop    ebx
c001e9f7:	5e                   	pop    esi
c001e9f8:	5f                   	pop    edi
c001e9f9:	5d                   	pop    ebp
c001e9fa:	c3                   	ret    
c001e9fb:	90                   	nop

c001e9fc <SATAPI::eject()>:
c001e9fc:	57                   	push   edi
c001e9fd:	b9 03 00 00 00       	mov    ecx,0x3
c001ea02:	83 ec 18             	sub    esp,0x18
c001ea05:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001ea09:	fc                   	cld    
c001ea0a:	31 c0                	xor    eax,eax
c001ea0c:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001ea0e:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001ea13:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001ea18:	50                   	push   eax
c001ea19:	6a 00                	push   0x0
c001ea1b:	6a 00                	push   0x0
c001ea1d:	6a 00                	push   0x0
c001ea1f:	6a 00                	push   0x0
c001ea21:	6a 02                	push   0x2
c001ea23:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001ea27:	50                   	push   eax
c001ea28:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ea2c:	e8 e5 fc ff ff       	call   c001e716 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001ea31:	83 c4 38             	add    esp,0x38
c001ea34:	31 c0                	xor    eax,eax
c001ea36:	5f                   	pop    edi
c001ea37:	c3                   	ret    

c001ea38 <SATAPI::detectMedia()>:
c001ea38:	53                   	push   ebx
c001ea39:	83 ec 14             	sub    esp,0x14
c001ea3c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001ea40:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001ea46:	e8 f9 bf fe ff       	call   c000aa44 <VCache::writeWriteBuffer()>
c001ea4b:	59                   	pop    ecx
c001ea4c:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001ea52:	e8 dd bf fe ff       	call   c000aa34 <VCache::invalidateReadBuffer()>
c001ea57:	c7 04 24 b3 38 02 c0 	mov    DWORD PTR [esp],0xc00238b3
c001ea5e:	e8 eb 84 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001ea63:	83 c4 10             	add    esp,0x10
c001ea66:	31 c0                	xor    eax,eax
c001ea68:	8b 14 85 80 97 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd6880]
c001ea6f:	85 d2                	test   edx,edx
c001ea71:	74 0f                	je     c001ea82 <SATAPI::detectMedia()+0x4a>
c001ea73:	39 9a 6c 01 00 00    	cmp    DWORD PTR [edx+0x16c],ebx
c001ea79:	75 07                	jne    c001ea82 <SATAPI::detectMedia()+0x4a>
c001ea7b:	c6 82 70 01 00 00 01 	mov    BYTE PTR [edx+0x170],0x1
c001ea82:	40                   	inc    eax
c001ea83:	83 f8 1a             	cmp    eax,0x1a
c001ea86:	75 e0                	jne    c001ea68 <SATAPI::detectMedia()+0x30>
c001ea88:	83 c4 08             	add    esp,0x8
c001ea8b:	5b                   	pop    ebx
c001ea8c:	c3                   	ret    
c001ea8d:	90                   	nop

c001ea8e <SATAPI::open(int, int, void*)>:
c001ea8e:	56                   	push   esi
c001ea8f:	53                   	push   ebx
c001ea90:	51                   	push   ecx
c001ea91:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ea95:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ea99:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001eaa3:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001eaa9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001eaad:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001eab7:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001eac1:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001eac8:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001eace:	e8 4d 03 ff ff       	call   c000ee20 <Phys::allocatePage()>
c001ead3:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001ead9:	89 c6                	mov    esi,eax
c001eadb:	e8 40 03 ff ff       	call   c000ee20 <Phys::allocatePage()>
c001eae0:	81 c6 00 10 00 00    	add    esi,0x1000
c001eae6:	39 c6                	cmp    esi,eax
c001eae8:	74 10                	je     c001eafa <SATAPI::open(int, int, void*)+0x6c>
c001eaea:	83 ec 0c             	sub    esp,0xc
c001eaed:	68 c8 38 02 c0       	push   0xc00238c8
c001eaf2:	e8 2f 01 ff ff       	call   c000ec26 <KePanic(char const*)>
c001eaf7:	83 c4 10             	add    esp,0x10
c001eafa:	83 ec 0c             	sub    esp,0xc
c001eafd:	6a 02                	push   0x2
c001eaff:	e8 87 34 ff ff       	call   c0011f8b <Virt::allocateKernelVirtualPages(int)>
c001eb04:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001eb0a:	6a 03                	push   0x3
c001eb0c:	50                   	push   eax
c001eb0d:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001eb13:	ff 35 d0 be 02 c0    	push   DWORD PTR ds:0xc002bed0
c001eb19:	e8 4c 3b ff ff       	call   c001266a <VAS::mapPage(unsigned long, unsigned long, int)>
c001eb1e:	83 c4 14             	add    esp,0x14
c001eb21:	68 78 01 00 00       	push   0x178
c001eb26:	e8 a5 fd fe ff       	call   c000e8d0 <malloc>
c001eb2b:	83 c4 0c             	add    esp,0xc
c001eb2e:	6a 00                	push   0x0
c001eb30:	68 ff ff ff 7f       	push   0x7fffffff
c001eb35:	6a 00                	push   0x0
c001eb37:	6a 00                	push   0x0
c001eb39:	53                   	push   ebx
c001eb3a:	68 de 38 02 c0       	push   0xc00238de
c001eb3f:	89 c6                	mov    esi,eax
c001eb41:	50                   	push   eax
c001eb42:	e8 5d b3 fe ff       	call   c0009ea4 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001eb47:	83 c4 14             	add    esp,0x14
c001eb4a:	56                   	push   esi
c001eb4b:	e8 14 b4 fe ff       	call   c0009f64 <LogicalDisk::assignDriveLetter()>
c001eb50:	5a                   	pop    edx
c001eb51:	59                   	pop    ecx
c001eb52:	0f be c0             	movsx  eax,al
c001eb55:	50                   	push   eax
c001eb56:	68 24 37 02 c0       	push   0xc0023724
c001eb5b:	e8 ee 83 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001eb60:	58                   	pop    eax
c001eb61:	5a                   	pop    edx
c001eb62:	56                   	push   esi
c001eb63:	53                   	push   ebx
c001eb64:	e8 d9 a4 fe ff       	call   c0009042 <Device::addChild(Device*)>
c001eb69:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c001eb6f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001eb72:	e8 17 a9 fe ff       	call   c000948e <PhysicalDisk::startCache()>
c001eb77:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001eb7e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001eb81:	e8 b2 fe ff ff       	call   c001ea38 <SATAPI::detectMedia()>
c001eb86:	83 c4 14             	add    esp,0x14
c001eb89:	31 c0                	xor    eax,eax
c001eb8b:	5b                   	pop    ebx
c001eb8c:	5e                   	pop    esi
c001eb8d:	c3                   	ret    

c001eb8e <SATAPI::read(unsigned long long, int, void*)>:
c001eb8e:	55                   	push   ebp
c001eb8f:	57                   	push   edi
c001eb90:	56                   	push   esi
c001eb91:	53                   	push   ebx
c001eb92:	83 ec 3c             	sub    esp,0x3c
c001eb95:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c001eb99:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001eb9d:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001eba1:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c001eba5:	83 fd 04             	cmp    ebp,0x4
c001eba8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ebac:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001ebb0:	7e 10                	jle    c001ebc2 <SATAPI::read(unsigned long long, int, void*)+0x34>
c001ebb2:	83 ec 0c             	sub    esp,0xc
c001ebb5:	68 ec 38 02 c0       	push   0xc00238ec
c001ebba:	e8 67 00 ff ff       	call   c000ec26 <KePanic(char const*)>
c001ebbf:	83 c4 10             	add    esp,0x10
c001ebc2:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001ebc8:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001ebce:	51                   	push   ecx
c001ebcf:	50                   	push   eax
c001ebd0:	83 c0 02             	add    eax,0x2
c001ebd3:	c1 e0 07             	shl    eax,0x7
c001ebd6:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c001ebdc:	50                   	push   eax
c001ebdd:	52                   	push   edx
c001ebde:	e8 cb e7 ff ff       	call   c001d3ae <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001ebe3:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001ebe7:	b9 03 00 00 00       	mov    ecx,0x3
c001ebec:	fc                   	cld    
c001ebed:	31 c0                	xor    eax,eax
c001ebef:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001ebf1:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c001ebf6:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c001ebfb:	83 c4 0c             	add    esp,0xc
c001ebfe:	6a 00                	push   0x0
c001ec00:	6a 00                	push   0x0
c001ec02:	6a 00                	push   0x0
c001ec04:	6a 00                	push   0x0
c001ec06:	6a 02                	push   0x2
c001ec08:	8d 44 24 30          	lea    eax,[esp+0x30]
c001ec0c:	50                   	push   eax
c001ec0d:	53                   	push   ebx
c001ec0e:	e8 03 fb ff ff       	call   c001e716 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001ec13:	83 c4 20             	add    esp,0x20
c001ec16:	85 c0                	test   eax,eax
c001ec18:	89 c6                	mov    esi,eax
c001ec1a:	75 46                	jne    c001ec62 <SATAPI::read(unsigned long long, int, void*)+0xd4>
c001ec1c:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001ec20:	b9 03 00 00 00       	mov    ecx,0x3
c001ec25:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001ec27:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ec2b:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c001ec30:	0f c8                	bswap  eax
c001ec32:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c001ec36:	89 e8                	mov    eax,ebp
c001ec38:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001ec3c:	50                   	push   eax
c001ec3d:	55                   	push   ebp
c001ec3e:	ff 74 24 68          	push   DWORD PTR [esp+0x68]
c001ec42:	c1 e5 0b             	shl    ebp,0xb
c001ec45:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ec49:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ec4d:	55                   	push   ebp
c001ec4e:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001ec52:	50                   	push   eax
c001ec53:	53                   	push   ebx
c001ec54:	e8 bd fa ff ff       	call   c001e716 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001ec59:	83 c4 20             	add    esp,0x20
c001ec5c:	85 c0                	test   eax,eax
c001ec5e:	89 c6                	mov    esi,eax
c001ec60:	74 0c                	je     c001ec6e <SATAPI::read(unsigned long long, int, void*)+0xe0>
c001ec62:	83 ec 0c             	sub    esp,0xc
c001ec65:	53                   	push   ebx
c001ec66:	e8 cd fd ff ff       	call   c001ea38 <SATAPI::detectMedia()>
c001ec6b:	83 c4 10             	add    esp,0x10
c001ec6e:	83 c4 3c             	add    esp,0x3c
c001ec71:	89 f0                	mov    eax,esi
c001ec73:	5b                   	pop    ebx
c001ec74:	5e                   	pop    esi
c001ec75:	5f                   	pop    edi
c001ec76:	5d                   	pop    ebp
c001ec77:	c3                   	ret    

c001ec78 <IOAPIC::close(int, int, void*)>:
c001ec78:	b8 00 00 00 00       	mov    eax,0x0
c001ec7d:	c3                   	ret    

c001ec7e <apicGetBase()>:
c001ec7e:	55                   	push   ebp
c001ec7f:	89 e5                	mov    ebp,esp
c001ec81:	83 ec 08             	sub    esp,0x8
c001ec84:	83 ec 0c             	sub    esp,0xc
c001ec87:	68 50 39 02 c0       	push   0xc0023950
c001ec8c:	e8 95 ff fe ff       	call   c000ec26 <KePanic(char const*)>
c001ec91:	83 c4 10             	add    esp,0x10
c001ec94:	b8 00 00 00 00       	mov    eax,0x0
c001ec99:	c9                   	leave  
c001ec9a:	c3                   	ret    
c001ec9b:	90                   	nop

c001ec9c <IOAPIC::IOAPIC()>:
c001ec9c:	83 ec 0c             	sub    esp,0xc
c001ec9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eca3:	83 ec 08             	sub    esp,0x8
c001eca6:	68 5f 39 02 c0       	push   0xc002395f
c001ecab:	50                   	push   eax
c001ecac:	e8 f3 a4 fe ff       	call   c00091a4 <Device::Device(char const*)>
c001ecb1:	83 c4 10             	add    esp,0x10
c001ecb4:	ba 80 39 02 c0       	mov    edx,0xc0023980
c001ecb9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecbd:	89 10                	mov    DWORD PTR [eax],edx
c001ecbf:	90                   	nop
c001ecc0:	83 c4 0c             	add    esp,0xc
c001ecc3:	c3                   	ret    

c001ecc4 <apicOpen()>:
c001ecc4:	55                   	push   ebp
c001ecc5:	89 e5                	mov    ebp,esp
c001ecc7:	53                   	push   ebx
c001ecc8:	83 ec 34             	sub    esp,0x34
c001eccb:	83 ec 0c             	sub    esp,0xc
c001ecce:	68 67 39 02 c0       	push   0xc0023967
c001ecd3:	e8 76 82 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001ecd8:	83 c4 10             	add    esp,0x10
c001ecdb:	a0 20 d1 02 c0       	mov    al,ds:0xc002d120
c001ece0:	83 f0 01             	xor    eax,0x1
c001ece3:	0f b6 c0             	movzx  eax,al
c001ece6:	85 c0                	test   eax,eax
c001ece8:	0f 84 a3 00 00 00    	je     c001ed91 <apicOpen()+0xcd>
c001ecee:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001ecf2:	a0 e0 9a 02 c0       	mov    al,ds:0xc0029ae0
c001ecf7:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001ecfb:	0f b6 c0             	movzx  eax,al
c001ecfe:	39 c2                	cmp    edx,eax
c001ed00:	0f 83 84 00 00 00    	jae    c001ed8a <apicOpen()+0xc6>
c001ed06:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001ed0d:	83 ec 0c             	sub    esp,0xc
c001ed10:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001ed13:	e8 b8 fb fe ff       	call   c000e8d0 <malloc>
c001ed18:	83 c4 10             	add    esp,0x10
c001ed1b:	89 c3                	mov    ebx,eax
c001ed1d:	83 ec 0c             	sub    esp,0xc
c001ed20:	53                   	push   ebx
c001ed21:	e8 76 ff ff ff       	call   c001ec9c <IOAPIC::IOAPIC()>
c001ed26:	83 c4 10             	add    esp,0x10
c001ed29:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001ed2c:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c001ed30:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001ed33:	89 14 85 00 d1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2f00],edx
c001ed3a:	a1 e0 d0 02 c0       	mov    eax,ds:0xc002d0e0
c001ed3f:	83 c0 01             	add    eax,0x1
c001ed42:	a3 e0 d0 02 c0       	mov    ds:0xc002d0e0,eax
c001ed47:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c001ed4c:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c001ed52:	83 ec 08             	sub    esp,0x8
c001ed55:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001ed58:	50                   	push   eax
c001ed59:	e8 e4 a2 fe ff       	call   c0009042 <Device::addChild(Device*)>
c001ed5e:	83 c4 10             	add    esp,0x10
c001ed61:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001ed64:	8b 00                	mov    eax,DWORD PTR [eax]
c001ed66:	83 c0 08             	add    eax,0x8
c001ed69:	8b 00                	mov    eax,DWORD PTR [eax]
c001ed6b:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001ed6f:	6a 00                	push   0x0
c001ed71:	6a 00                	push   0x0
c001ed73:	52                   	push   edx
c001ed74:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001ed77:	ff d0                	call   eax
c001ed79:	83 c4 10             	add    esp,0x10
c001ed7c:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001ed7f:	83 c0 01             	add    eax,0x1
c001ed82:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
c001ed85:	e9 68 ff ff ff       	jmp    c001ecf2 <apicOpen()+0x2e>
c001ed8a:	c6 05 20 d1 02 c0 01 	mov    BYTE PTR ds:0xc002d120,0x1
c001ed91:	e8 e8 fe ff ff       	call   c001ec7e <apicGetBase()>
c001ed96:	05 f0 00 00 00       	add    eax,0xf0
c001ed9b:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001ed9e:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001eda1:	8b 00                	mov    eax,DWORD PTR [eax]
c001eda3:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001eda6:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001edad:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c001edb4:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001edb7:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001edba:	89 10                	mov    DWORD PTR [eax],edx
c001edbc:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001edc3:	a1 2c 9a 02 c0       	mov    eax,ds:0xc0029a2c
c001edc8:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001edcb:	7d 7c                	jge    c001ee49 <apicOpen()+0x185>
c001edcd:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001edd0:	8b 04 85 40 9a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd65c0]
c001edd7:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001edda:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001eddd:	8b 04 85 40 9a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd65c0]
c001ede4:	c1 e8 08             	shr    eax,0x8
c001ede7:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001edeb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001edee:	8b 04 85 40 9a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd65c0]
c001edf5:	c1 e8 18             	shr    eax,0x18
c001edf8:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001edfb:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c001edff:	3d ff 00 00 00       	cmp    eax,0xff
c001ee04:	75 3a                	jne    c001ee40 <apicOpen()+0x17c>
c001ee06:	e8 73 fe ff ff       	call   c001ec7e <apicGetBase()>
c001ee0b:	0f b6 55 df          	movzx  edx,BYTE PTR [ebp-0x21]
c001ee0f:	83 fa 01             	cmp    edx,0x1
c001ee12:	75 07                	jne    c001ee1b <apicOpen()+0x157>
c001ee14:	ba 60 03 00 00       	mov    edx,0x360
c001ee19:	eb 05                	jmp    c001ee20 <apicOpen()+0x15c>
c001ee1b:	ba 50 03 00 00       	mov    edx,0x350
c001ee20:	01 d0                	add    eax,edx
c001ee22:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001ee25:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001ee28:	8b 00                	mov    eax,DWORD PTR [eax]
c001ee2a:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001ee2d:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c001ee34:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c001ee38:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001ee3b:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001ee3e:	89 10                	mov    DWORD PTR [eax],edx
c001ee40:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c001ee44:	e9 7a ff ff ff       	jmp    c001edc3 <apicOpen()+0xff>
c001ee49:	90                   	nop
c001ee4a:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001ee4d:	c9                   	leave  
c001ee4e:	c3                   	ret    
c001ee4f:	90                   	nop

c001ee50 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001ee50:	55                   	push   ebp
c001ee51:	89 e5                	mov    ebp,esp
c001ee53:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ee56:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001ee5c:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001ee5f:	72 1d                	jb     c001ee7e <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001ee61:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ee64:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001ee6a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ee6d:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001ee73:	01 d0                	add    eax,edx
c001ee75:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001ee78:	73 04                	jae    c001ee7e <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001ee7a:	b0 01                	mov    al,0x1
c001ee7c:	eb 02                	jmp    c001ee80 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001ee7e:	b0 00                	mov    al,0x0
c001ee80:	5d                   	pop    ebp
c001ee81:	c3                   	ret    

c001ee82 <IOAPIC::read(int)>:
c001ee82:	55                   	push   ebp
c001ee83:	89 e5                	mov    ebp,esp
c001ee85:	83 ec 10             	sub    esp,0x10
c001ee88:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ee8b:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001ee91:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001ee94:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001ee97:	0f b6 d0             	movzx  edx,al
c001ee9a:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001ee9d:	89 10                	mov    DWORD PTR [eax],edx
c001ee9f:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001eea2:	83 c0 10             	add    eax,0x10
c001eea5:	8b 00                	mov    eax,DWORD PTR [eax]
c001eea7:	c9                   	leave  
c001eea8:	c3                   	ret    
c001eea9:	90                   	nop

c001eeaa <IOAPIC::open(int, int, void*)>:
c001eeaa:	55                   	push   ebp
c001eeab:	89 e5                	mov    ebp,esp
c001eead:	57                   	push   edi
c001eeae:	56                   	push   esi
c001eeaf:	53                   	push   ebx
c001eeb0:	83 ec 04             	sub    esp,0x4
c001eeb3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eeb6:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001eeb9:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001eebf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eec2:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001eec8:	8b 14 85 20 9b 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd64e0]
c001eecf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eed2:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001eed8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eedb:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001eee1:	8b 14 85 a0 9b 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd6460]
c001eee8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eeeb:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001eef1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eef4:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001eefa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eefd:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001ef03:	0f b6 f0             	movzx  esi,al
c001ef06:	89 d0                	mov    eax,edx
c001ef08:	ba 00 00 00 00       	mov    edx,0x0
c001ef0d:	89 c7                	mov    edi,eax
c001ef0f:	83 e7 ff             	and    edi,0xffffffff
c001ef12:	89 f9                	mov    ecx,edi
c001ef14:	0f b6 da             	movzx  ebx,dl
c001ef17:	89 c8                	mov    eax,ecx
c001ef19:	89 da                	mov    edx,ebx
c001ef1b:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001ef1e:	8d 5e 08             	lea    ebx,[esi+0x8]
c001ef21:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001ef25:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001ef29:	83 e0 00             	and    eax,0x0
c001ef2c:	09 d0                	or     eax,edx
c001ef2e:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001ef32:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ef35:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001ef3b:	8d 50 01             	lea    edx,[eax+0x1]
c001ef3e:	88 d1                	mov    cl,dl
c001ef40:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001ef43:	88 8a c5 00 00 00    	mov    BYTE PTR [edx+0xc5],cl
c001ef49:	0f b6 d0             	movzx  edx,al
c001ef4c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ef4f:	83 c2 08             	add    edx,0x8
c001ef52:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001ef56:	0f b6 c9             	movzx  ecx,cl
c001ef59:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001ef5f:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001ef63:	6a 01                	push   0x1
c001ef65:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ef68:	e8 15 ff ff ff       	call   c001ee82 <IOAPIC::read(int)>
c001ef6d:	83 c4 08             	add    esp,0x8
c001ef70:	c1 f8 10             	sar    eax,0x10
c001ef73:	0f b6 c0             	movzx  eax,al
c001ef76:	8d 50 01             	lea    edx,[eax+0x1]
c001ef79:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ef7c:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001ef82:	b8 00 00 00 00       	mov    eax,0x0
c001ef87:	8d 65 f4             	lea    esp,[ebp-0xc]
c001ef8a:	5b                   	pop    ebx
c001ef8b:	5e                   	pop    esi
c001ef8c:	5f                   	pop    edi
c001ef8d:	5d                   	pop    ebp
c001ef8e:	c3                   	ret    
c001ef8f:	90                   	nop

c001ef90 <IOAPIC::write(int, int)>:
c001ef90:	55                   	push   ebp
c001ef91:	89 e5                	mov    ebp,esp
c001ef93:	83 ec 10             	sub    esp,0x10
c001ef96:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ef99:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001ef9f:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001efa2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001efa5:	0f b6 d0             	movzx  edx,al
c001efa8:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001efab:	89 10                	mov    DWORD PTR [eax],edx
c001efad:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001efb0:	8d 50 10             	lea    edx,[eax+0x10]
c001efb3:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001efb6:	89 02                	mov    DWORD PTR [edx],eax
c001efb8:	90                   	nop
c001efb9:	c9                   	leave  
c001efba:	c3                   	ret    
c001efbb:	90                   	nop

c001efbc <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001efbc:	55                   	push   ebp
c001efbd:	89 e5                	mov    ebp,esp
c001efbf:	53                   	push   ebx
c001efc0:	83 ec 2c             	sub    esp,0x2c
c001efc3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001efc6:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001efc9:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c001efcc:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c001efcf:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001efd2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001efd5:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001efd8:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001efdb:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001efde:	88 d8                	mov    al,bl
c001efe0:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c001efe3:	88 c8                	mov    al,cl
c001efe5:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001efe8:	88 d0                	mov    al,dl
c001efea:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001efed:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001eff1:	83 c0 08             	add    eax,0x8
c001eff4:	d1 e0                	shl    eax,1
c001eff6:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001eff9:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001effd:	83 c0 08             	add    eax,0x8
c001f000:	d1 e0                	shl    eax,1
c001f002:	83 c0 01             	add    eax,0x1
c001f005:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001f008:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001f00b:	50                   	push   eax
c001f00c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001f00f:	e8 6e fe ff ff       	call   c001ee82 <IOAPIC::read(int)>
c001f014:	83 c4 08             	add    esp,0x8
c001f017:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001f01a:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c001f021:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001f024:	c1 e0 18             	shl    eax,0x18
c001f027:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001f02a:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001f02d:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001f030:	52                   	push   edx
c001f031:	50                   	push   eax
c001f032:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001f035:	e8 56 ff ff ff       	call   c001ef90 <IOAPIC::write(int, int)>
c001f03a:	83 c4 0c             	add    esp,0xc
c001f03d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001f040:	50                   	push   eax
c001f041:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001f044:	e8 39 fe ff ff       	call   c001ee82 <IOAPIC::read(int)>
c001f049:	83 c4 08             	add    esp,0x8
c001f04c:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001f04f:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c001f056:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001f05d:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c001f064:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
c001f068:	85 c0                	test   eax,eax
c001f06a:	74 09                	je     c001f075 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb9>
c001f06c:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c001f073:	eb 07                	jmp    c001f07c <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc0>
c001f075:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001f07c:	0f b6 45 d0          	movzx  eax,BYTE PTR [ebp-0x30]
c001f080:	85 c0                	test   eax,eax
c001f082:	74 09                	je     c001f08d <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd1>
c001f084:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001f08b:	eb 07                	jmp    c001f094 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd8>
c001f08d:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c001f094:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001f09b:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c001f09f:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001f0a2:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001f0a5:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001f0a8:	52                   	push   edx
c001f0a9:	50                   	push   eax
c001f0aa:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001f0ad:	e8 de fe ff ff       	call   c001ef90 <IOAPIC::write(int, int)>
c001f0b2:	83 c4 0c             	add    esp,0xc
c001f0b5:	90                   	nop
c001f0b6:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001f0b9:	c9                   	leave  
c001f0ba:	c3                   	ret    
c001f0bb:	90                   	nop

c001f0bc <APICTimer::close(int, int, void*)>:
c001f0bc:	b8 00 00 00 00       	mov    eax,0x0
c001f0c1:	c3                   	ret    
c001f0c2:	66 90                	xchg   ax,ax

c001f0c4 <apicTimerHandler(regs*, void*)>:
c001f0c4:	83 ec 0c             	sub    esp,0xc
c001f0c7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f0cb:	8b 08                	mov    ecx,DWORD PTR [eax]
c001f0cd:	b8 10 27 00 00       	mov    eax,0x2710
c001f0d2:	ba 00 00 00 00       	mov    edx,0x0
c001f0d7:	f7 f1                	div    ecx
c001f0d9:	83 ec 0c             	sub    esp,0xc
c001f0dc:	50                   	push   eax
c001f0dd:	e8 7e b6 fe ff       	call   c000a760 <timerHandler(unsigned int)>
c001f0e2:	83 c4 10             	add    esp,0x10
c001f0e5:	90                   	nop
c001f0e6:	83 c4 0c             	add    esp,0xc
c001f0e9:	c3                   	ret    
c001f0ea:	66 90                	xchg   ax,ax

c001f0ec <APICTimer::open(int, int, void*)>:
c001f0ec:	83 ec 0c             	sub    esp,0xc
c001f0ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0f3:	8b 00                	mov    eax,DWORD PTR [eax]
c001f0f5:	83 c0 24             	add    eax,0x24
c001f0f8:	8b 00                	mov    eax,DWORD PTR [eax]
c001f0fa:	83 ec 08             	sub    esp,0x8
c001f0fd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f101:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f105:	ff d0                	call   eax
c001f107:	83 c4 10             	add    esp,0x10
c001f10a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f10e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001f112:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001f118:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f11c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f120:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001f126:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f12a:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001f130:	83 ec 0c             	sub    esp,0xc
c001f133:	51                   	push   ecx
c001f134:	6a 01                	push   0x1
c001f136:	68 c4 f0 01 c0       	push   0xc001f0c4
c001f13b:	52                   	push   edx
c001f13c:	50                   	push   eax
c001f13d:	e8 ac 9e fe ff       	call   c0008fee <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001f142:	83 c4 20             	add    esp,0x20
c001f145:	89 c2                	mov    edx,eax
c001f147:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f14b:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001f151:	b8 00 00 00 00       	mov    eax,0x0
c001f156:	83 c4 0c             	add    esp,0xc
c001f159:	c3                   	ret    
c001f15a:	66 90                	xchg   ax,ax

c001f15c <APICTimer::write(int)>:
c001f15c:	83 ec 0c             	sub    esp,0xc
c001f15f:	83 ec 0c             	sub    esp,0xc
c001f162:	68 a4 39 02 c0       	push   0xc00239a4
c001f167:	e8 ba fa fe ff       	call   c000ec26 <KePanic(char const*)>
c001f16c:	83 c4 10             	add    esp,0x10
c001f16f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f173:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f177:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001f17d:	90                   	nop
c001f17e:	83 c4 0c             	add    esp,0xc
c001f181:	c3                   	ret    
c001f182:	66 90                	xchg   ax,ax

c001f184 <APICTimer::APICTimer()>:
c001f184:	83 ec 0c             	sub    esp,0xc
c001f187:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f18b:	83 ec 08             	sub    esp,0x8
c001f18e:	68 b4 39 02 c0       	push   0xc00239b4
c001f193:	50                   	push   eax
c001f194:	e8 fb b4 fe ff       	call   c000a694 <Timer::Timer(char const*)>
c001f199:	83 c4 10             	add    esp,0x10
c001f19c:	ba c8 39 02 c0       	mov    edx,0xc00239c8
c001f1a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f1a5:	89 10                	mov    DWORD PTR [eax],edx
c001f1a7:	90                   	nop
c001f1a8:	83 c4 0c             	add    esp,0xc
c001f1ab:	c3                   	ret    

c001f1ac <PIT::write(int)>:
c001f1ac:	83 ec 10             	sub    esp,0x10
c001f1af:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f1b3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001f1b7:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001f1bd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001f1c1:	a3 24 d1 02 c0       	mov    ds:0xc002d124,eax
c001f1c6:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001f1cb:	89 c2                	mov    edx,eax
c001f1cd:	c1 fa 1f             	sar    edx,0x1f
c001f1d0:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001f1d4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f1d8:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001f1df:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001f1e4:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001f1e8:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001f1ed:	ee                   	out    dx,al
c001f1ee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f1f2:	0f b6 c0             	movzx  eax,al
c001f1f5:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001f1fc:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001f200:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001f204:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001f209:	ee                   	out    dx,al
c001f20a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f20e:	c1 f8 08             	sar    eax,0x8
c001f211:	0f b6 c0             	movzx  eax,al
c001f214:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001f21b:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001f21f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001f223:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001f228:	ee                   	out    dx,al
c001f229:	90                   	nop
c001f22a:	83 c4 10             	add    esp,0x10
c001f22d:	c3                   	ret    
c001f22e:	66 90                	xchg   ax,ax

c001f230 <pitHandler(regs*, void*)>:
c001f230:	83 ec 0c             	sub    esp,0xc
c001f233:	8b 0d 24 d1 02 c0    	mov    ecx,DWORD PTR ds:0xc002d124
c001f239:	b8 10 27 00 00       	mov    eax,0x2710
c001f23e:	89 c2                	mov    edx,eax
c001f240:	c1 fa 1f             	sar    edx,0x1f
c001f243:	f7 f9                	idiv   ecx
c001f245:	83 ec 0c             	sub    esp,0xc
c001f248:	50                   	push   eax
c001f249:	e8 12 b5 fe ff       	call   c000a760 <timerHandler(unsigned int)>
c001f24e:	83 c4 10             	add    esp,0x10
c001f251:	90                   	nop
c001f252:	83 c4 0c             	add    esp,0xc
c001f255:	c3                   	ret    
c001f256:	66 90                	xchg   ax,ax

c001f258 <PIT::open(int, int, void*)>:
c001f258:	83 ec 0c             	sub    esp,0xc
c001f25b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f25f:	8b 00                	mov    eax,DWORD PTR [eax]
c001f261:	83 c0 24             	add    eax,0x24
c001f264:	8b 00                	mov    eax,DWORD PTR [eax]
c001f266:	83 ec 08             	sub    esp,0x8
c001f269:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f26d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f271:	ff d0                	call   eax
c001f273:	83 c4 10             	add    esp,0x10
c001f276:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f27a:	83 ec 0c             	sub    esp,0xc
c001f27d:	6a 00                	push   0x0
c001f27f:	6a 01                	push   0x1
c001f281:	68 30 f2 01 c0       	push   0xc001f230
c001f286:	6a 00                	push   0x0
c001f288:	50                   	push   eax
c001f289:	e8 60 9d fe ff       	call   c0008fee <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001f28e:	83 c4 20             	add    esp,0x20
c001f291:	89 c2                	mov    edx,eax
c001f293:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f297:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001f29d:	b8 00 00 00 00       	mov    eax,0x0
c001f2a2:	83 c4 0c             	add    esp,0xc
c001f2a5:	c3                   	ret    
c001f2a6:	66 90                	xchg   ax,ax

c001f2a8 <PIT::close(int, int, void*)>:
c001f2a8:	83 ec 0c             	sub    esp,0xc
c001f2ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f2af:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001f2b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f2bd:	6a 01                	push   0x1
c001f2bf:	68 30 f2 01 c0       	push   0xc001f230
c001f2c4:	6a 00                	push   0x0
c001f2c6:	50                   	push   eax
c001f2c7:	e8 58 9d fe ff       	call   c0009024 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001f2cc:	83 c4 10             	add    esp,0x10
c001f2cf:	b8 00 00 00 00       	mov    eax,0x0
c001f2d4:	83 c4 0c             	add    esp,0xc
c001f2d7:	c3                   	ret    

c001f2d8 <PIT::PIT()>:
c001f2d8:	83 ec 0c             	sub    esp,0xc
c001f2db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f2df:	83 ec 08             	sub    esp,0x8
c001f2e2:	68 f0 39 02 c0       	push   0xc00239f0
c001f2e7:	50                   	push   eax
c001f2e8:	e8 a7 b3 fe ff       	call   c000a694 <Timer::Timer(char const*)>
c001f2ed:	83 c4 10             	add    esp,0x10
c001f2f0:	ba 18 3a 02 c0       	mov    edx,0xc0023a18
c001f2f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f2f9:	89 10                	mov    DWORD PTR [eax],edx
c001f2fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f2ff:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001f305:	0f b6 d0             	movzx  edx,al
c001f308:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f30c:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001f313:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f317:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001f31d:	0f b6 d0             	movzx  edx,al
c001f320:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f324:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001f329:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f32d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001f333:	8d 50 01             	lea    edx,[eax+0x1]
c001f336:	88 d1                	mov    cl,dl
c001f338:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f33c:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001f342:	0f b6 d0             	movzx  edx,al
c001f345:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f349:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001f34d:	83 e1 3f             	and    ecx,0x3f
c001f350:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001f354:	90                   	nop
c001f355:	83 c4 0c             	add    esp,0xc
c001f358:	c3                   	ret    
c001f359:	66 90                	xchg   ax,ax
c001f35b:	66 90                	xchg   ax,ax
c001f35d:	66 90                	xchg   ax,ax
c001f35f:	90                   	nop

c001f360 <avxDetect>:
c001f360:	b8 01 00 00 00       	mov    eax,0x1
c001f365:	0f a2                	cpuid  
c001f367:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c001f36d:	74 15                	je     c001f384 <avxDetect.noAVX>
c001f36f:	b8 01 00 00 00       	mov    eax,0x1
c001f374:	0f a2                	cpuid  
c001f376:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c001f37c:	74 06                	je     c001f384 <avxDetect.noAVX>
c001f37e:	b8 01 00 00 00       	mov    eax,0x1
c001f383:	c3                   	ret    

c001f384 <avxDetect.noAVX>:
c001f384:	b8 00 00 00 00       	mov    eax,0x0
c001f389:	c3                   	ret    

c001f38a <avxSave>:
c001f38a:	53                   	push   ebx
c001f38b:	52                   	push   edx
c001f38c:	31 c0                	xor    eax,eax
c001f38e:	48                   	dec    eax
c001f38f:	89 c2                	mov    edx,eax
c001f391:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f395:	0f ae 23             	xsave  [ebx]
c001f398:	5a                   	pop    edx
c001f399:	5b                   	pop    ebx
c001f39a:	c3                   	ret    

c001f39b <avxLoad>:
c001f39b:	53                   	push   ebx
c001f39c:	52                   	push   edx
c001f39d:	31 c0                	xor    eax,eax
c001f39f:	48                   	dec    eax
c001f3a0:	89 c2                	mov    edx,eax
c001f3a2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f3a6:	0f ae 2b             	xrstor [ebx]
c001f3a9:	5a                   	pop    edx
c001f3aa:	5b                   	pop    ebx
c001f3ab:	c3                   	ret    

c001f3ac <avxInit>:
c001f3ac:	e8 47 03 00 00       	call   c001f6f8 <sseInit>
c001f3b1:	50                   	push   eax
c001f3b2:	51                   	push   ecx
c001f3b3:	0f 20 e0             	mov    eax,cr4
c001f3b6:	0d 00 00 04 00       	or     eax,0x40000
c001f3bb:	0f 22 e0             	mov    cr4,eax
c001f3be:	31 c9                	xor    ecx,ecx
c001f3c0:	0f 01 d0             	xgetbv 
c001f3c3:	0d 07 00 00 00       	or     eax,0x7
c001f3c8:	0f 01 d1             	xsetbv 
c001f3cb:	59                   	pop    ecx
c001f3cc:	58                   	pop    eax
c001f3cd:	c3                   	ret    

c001f3ce <avxClose>:
c001f3ce:	c3                   	ret    
c001f3cf:	90                   	nop

c001f3d0 <isr0>:
c001f3d0:	fa                   	cli    
c001f3d1:	68 00 00 00 00       	push   0x0
c001f3d6:	68 00 00 00 00       	push   0x0
c001f3db:	e9 56 01 00 00       	jmp    c001f536 <int_common_stub>

c001f3e0 <isr1>:
c001f3e0:	fa                   	cli    
c001f3e1:	6a 00                	push   0x0
c001f3e3:	6a 01                	push   0x1
c001f3e5:	e9 4c 01 00 00       	jmp    c001f536 <int_common_stub>

c001f3ea <isr2>:
c001f3ea:	fa                   	cli    
c001f3eb:	6a 00                	push   0x0
c001f3ed:	6a 02                	push   0x2
c001f3ef:	e9 42 01 00 00       	jmp    c001f536 <int_common_stub>

c001f3f4 <isr3>:
c001f3f4:	fa                   	cli    
c001f3f5:	6a 00                	push   0x0
c001f3f7:	6a 03                	push   0x3
c001f3f9:	e9 38 01 00 00       	jmp    c001f536 <int_common_stub>

c001f3fe <isr4>:
c001f3fe:	fa                   	cli    
c001f3ff:	6a 00                	push   0x0
c001f401:	6a 04                	push   0x4
c001f403:	e9 2e 01 00 00       	jmp    c001f536 <int_common_stub>

c001f408 <isr5>:
c001f408:	fa                   	cli    
c001f409:	6a 00                	push   0x0
c001f40b:	6a 05                	push   0x5
c001f40d:	e9 24 01 00 00       	jmp    c001f536 <int_common_stub>

c001f412 <isr6>:
c001f412:	fa                   	cli    
c001f413:	6a 00                	push   0x0
c001f415:	6a 06                	push   0x6
c001f417:	e9 1a 01 00 00       	jmp    c001f536 <int_common_stub>

c001f41c <isr7>:
c001f41c:	fa                   	cli    
c001f41d:	6a 00                	push   0x0
c001f41f:	6a 07                	push   0x7
c001f421:	e9 10 01 00 00       	jmp    c001f536 <int_common_stub>

c001f426 <isr8>:
c001f426:	fa                   	cli    
c001f427:	6a 08                	push   0x8
c001f429:	e9 08 01 00 00       	jmp    c001f536 <int_common_stub>

c001f42e <isr9>:
c001f42e:	fa                   	cli    
c001f42f:	6a 00                	push   0x0
c001f431:	6a 09                	push   0x9
c001f433:	e9 fe 00 00 00       	jmp    c001f536 <int_common_stub>

c001f438 <isr10>:
c001f438:	fa                   	cli    
c001f439:	6a 0a                	push   0xa
c001f43b:	e9 f6 00 00 00       	jmp    c001f536 <int_common_stub>

c001f440 <isr11>:
c001f440:	fa                   	cli    
c001f441:	6a 0b                	push   0xb
c001f443:	e9 ee 00 00 00       	jmp    c001f536 <int_common_stub>

c001f448 <isr12>:
c001f448:	fa                   	cli    
c001f449:	6a 0c                	push   0xc
c001f44b:	e9 e6 00 00 00       	jmp    c001f536 <int_common_stub>

c001f450 <isr13>:
c001f450:	fa                   	cli    
c001f451:	6a 0d                	push   0xd
c001f453:	53                   	push   ebx
c001f454:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f458:	81 fb 26 f6 01 c0    	cmp    ebx,0xc001f626
c001f45e:	5b                   	pop    ebx
c001f45f:	0f 84 c3 01 00 00    	je     c001f628 <finishSignal2>
c001f465:	e9 cc 00 00 00       	jmp    c001f536 <int_common_stub>

c001f46a <isr14>:
c001f46a:	fa                   	cli    
c001f46b:	6a 0e                	push   0xe
c001f46d:	e9 c4 00 00 00       	jmp    c001f536 <int_common_stub>

c001f472 <isr15>:
c001f472:	fa                   	cli    
c001f473:	6a 00                	push   0x0
c001f475:	6a 0f                	push   0xf
c001f477:	e9 ba 00 00 00       	jmp    c001f536 <int_common_stub>

c001f47c <isr16>:
c001f47c:	fa                   	cli    
c001f47d:	6a 00                	push   0x0
c001f47f:	6a 10                	push   0x10
c001f481:	e9 b0 00 00 00       	jmp    c001f536 <int_common_stub>

c001f486 <isr17>:
c001f486:	fa                   	cli    
c001f487:	6a 00                	push   0x0
c001f489:	6a 11                	push   0x11
c001f48b:	e9 a6 00 00 00       	jmp    c001f536 <int_common_stub>

c001f490 <isr18>:
c001f490:	fa                   	cli    
c001f491:	6a 00                	push   0x0
c001f493:	6a 12                	push   0x12
c001f495:	e9 9c 00 00 00       	jmp    c001f536 <int_common_stub>

c001f49a <irq3>:
c001f49a:	fa                   	cli    
c001f49b:	6a 00                	push   0x0
c001f49d:	6a 23                	push   0x23
c001f49f:	e9 92 00 00 00       	jmp    c001f536 <int_common_stub>

c001f4a4 <irq4>:
c001f4a4:	fa                   	cli    
c001f4a5:	6a 00                	push   0x0
c001f4a7:	6a 24                	push   0x24
c001f4a9:	e9 88 00 00 00       	jmp    c001f536 <int_common_stub>

c001f4ae <irq5>:
c001f4ae:	fa                   	cli    
c001f4af:	6a 00                	push   0x0
c001f4b1:	6a 25                	push   0x25
c001f4b3:	e9 7e 00 00 00       	jmp    c001f536 <int_common_stub>

c001f4b8 <irq6>:
c001f4b8:	fa                   	cli    
c001f4b9:	6a 00                	push   0x0
c001f4bb:	6a 26                	push   0x26
c001f4bd:	e9 74 00 00 00       	jmp    c001f536 <int_common_stub>

c001f4c2 <irq7>:
c001f4c2:	fa                   	cli    
c001f4c3:	6a 00                	push   0x0
c001f4c5:	6a 27                	push   0x27
c001f4c7:	e9 6a 00 00 00       	jmp    c001f536 <int_common_stub>

c001f4cc <irq8>:
c001f4cc:	fa                   	cli    
c001f4cd:	6a 00                	push   0x0
c001f4cf:	6a 28                	push   0x28
c001f4d1:	e9 60 00 00 00       	jmp    c001f536 <int_common_stub>

c001f4d6 <irq9>:
c001f4d6:	fa                   	cli    
c001f4d7:	6a 00                	push   0x0
c001f4d9:	6a 29                	push   0x29
c001f4db:	e9 56 00 00 00       	jmp    c001f536 <int_common_stub>

c001f4e0 <irq10>:
c001f4e0:	fa                   	cli    
c001f4e1:	6a 00                	push   0x0
c001f4e3:	6a 2a                	push   0x2a
c001f4e5:	e9 4c 00 00 00       	jmp    c001f536 <int_common_stub>

c001f4ea <irq11>:
c001f4ea:	fa                   	cli    
c001f4eb:	6a 00                	push   0x0
c001f4ed:	6a 2b                	push   0x2b
c001f4ef:	e9 42 00 00 00       	jmp    c001f536 <int_common_stub>

c001f4f4 <irq12>:
c001f4f4:	fa                   	cli    
c001f4f5:	6a 00                	push   0x0
c001f4f7:	6a 2c                	push   0x2c
c001f4f9:	e9 38 00 00 00       	jmp    c001f536 <int_common_stub>

c001f4fe <irq13>:
c001f4fe:	fa                   	cli    
c001f4ff:	6a 00                	push   0x0
c001f501:	6a 2d                	push   0x2d
c001f503:	e9 2e 00 00 00       	jmp    c001f536 <int_common_stub>

c001f508 <irq14>:
c001f508:	fa                   	cli    
c001f509:	6a 00                	push   0x0
c001f50b:	6a 2e                	push   0x2e
c001f50d:	e9 24 00 00 00       	jmp    c001f536 <int_common_stub>

c001f512 <irq15>:
c001f512:	fa                   	cli    
c001f513:	6a 00                	push   0x0
c001f515:	6a 2f                	push   0x2f
c001f517:	e9 1a 00 00 00       	jmp    c001f536 <int_common_stub>

c001f51c <irq1>:
c001f51c:	fa                   	cli    
c001f51d:	6a 00                	push   0x0
c001f51f:	6a 21                	push   0x21
c001f521:	eb 13                	jmp    c001f536 <int_common_stub>

c001f523 <irq2>:
c001f523:	fa                   	cli    
c001f524:	6a 00                	push   0x0
c001f526:	6a 22                	push   0x22
c001f528:	eb 0c                	jmp    c001f536 <int_common_stub>

c001f52a <isr96>:
c001f52a:	6a 00                	push   0x0
c001f52c:	6a 60                	push   0x60
c001f52e:	fb                   	sti    
c001f52f:	eb 37                	jmp    c001f568 <syscall_common_stub>

c001f531 <irq0>:
c001f531:	fa                   	cli    
c001f532:	6a 00                	push   0x0
c001f534:	6a 20                	push   0x20

c001f536 <int_common_stub>:
c001f536:	60                   	pusha  
c001f537:	1e                   	push   ds
c001f538:	06                   	push   es
c001f539:	0f a0                	push   fs
c001f53b:	0f a8                	push   gs
c001f53d:	66 b8 10 00          	mov    ax,0x10
c001f541:	66 8e d8             	mov    ds,ax
c001f544:	66 8e c0             	mov    es,ax
c001f547:	66 8e e0             	mov    fs,ax
c001f54a:	66 8e e8             	mov    gs,ax
c001f54d:	54                   	push   esp
c001f54e:	fc                   	cld    
c001f54f:	e8 00 e8 fe ff       	call   c000dd54 <int_handler>
c001f554:	81 c4 04 00 00 00    	add    esp,0x4
c001f55a:	0f a9                	pop    gs
c001f55c:	0f a1                	pop    fs
c001f55e:	07                   	pop    es
c001f55f:	1f                   	pop    ds
c001f560:	61                   	popa   
c001f561:	81 c4 08 00 00 00    	add    esp,0x8
c001f567:	cf                   	iret   

c001f568 <syscall_common_stub>:
c001f568:	60                   	pusha  
c001f569:	1e                   	push   ds
c001f56a:	06                   	push   es
c001f56b:	0f a0                	push   fs
c001f56d:	0f a8                	push   gs
c001f56f:	66 b8 10 00          	mov    ax,0x10
c001f573:	66 8e d8             	mov    ds,ax
c001f576:	66 8e c0             	mov    es,ax
c001f579:	66 8e e0             	mov    fs,ax
c001f57c:	66 8e e8             	mov    gs,ax
c001f57f:	54                   	push   esp
c001f580:	fc                   	cld    
c001f581:	e8 ce e7 fe ff       	call   c000dd54 <int_handler>
c001f586:	81 c4 04 00 00 00    	add    esp,0x4
c001f58c:	0f a9                	pop    gs
c001f58e:	0f a1                	pop    fs
c001f590:	07                   	pop    es
c001f591:	1f                   	pop    ds
c001f592:	e8 2d 09 ff ff       	call   c000fec4 <KiCheckSignalZ>
c001f597:	3d 00 00 00 00       	cmp    eax,0x0
c001f59c:	0f 84 c0 00 00 00    	je     c001f662 <skipSignals>
c001f5a2:	a3 08 20 00 c2       	mov    ds:0xc2002008,eax
c001f5a7:	61                   	popa   
c001f5a8:	53                   	push   ebx
c001f5a9:	8b 1d 08 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002008
c001f5af:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c001f5b2:	5b                   	pop    ebx
c001f5b3:	a1 08 20 00 c2       	mov    eax,ds:0xc2002008
c001f5b8:	89 58 10             	mov    DWORD PTR [eax+0x10],ebx
c001f5bb:	89 48 14             	mov    DWORD PTR [eax+0x14],ecx
c001f5be:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f5c1:	89 70 1c             	mov    DWORD PTR [eax+0x1c],esi
c001f5c4:	89 78 20             	mov    DWORD PTR [eax+0x20],edi
c001f5c7:	89 68 24             	mov    DWORD PTR [eax+0x24],ebp
c001f5ca:	81 c4 08 00 00 00    	add    esp,0x8
c001f5d0:	5e                   	pop    esi
c001f5d1:	5b                   	pop    ebx
c001f5d2:	59                   	pop    ecx
c001f5d3:	5a                   	pop    edx
c001f5d4:	89 70 2c             	mov    DWORD PTR [eax+0x2c],esi
c001f5d7:	89 48 30             	mov    DWORD PTR [eax+0x30],ecx
c001f5da:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001f5dd:	52                   	push   edx
c001f5de:	51                   	push   ecx
c001f5df:	53                   	push   ebx
c001f5e0:	56                   	push   esi
c001f5e1:	81 ec 08 00 00 00    	sub    esp,0x8
c001f5e7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c001f5ea:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001f5ed:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
c001f5f0:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f5f3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001f5f6:	60                   	pusha  
c001f5f7:	8b 35 08 20 00 c2    	mov    esi,DWORD PTR ds:0xc2002008
c001f5fd:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c001f600:	89 e3                	mov    ebx,esp
c001f602:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c001f605:	52                   	push   edx
c001f606:	68 26 f6 01 c0       	push   0xc001f626
c001f60b:	89 63 34             	mov    DWORD PTR [ebx+0x34],esp
c001f60e:	89 dc                	mov    esp,ebx
c001f610:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c001f613:	68 23 00 00 00       	push   0x23
c001f618:	51                   	push   ecx
c001f619:	68 02 02 00 00       	push   0x202
c001f61e:	68 1b 00 00 00       	push   0x1b
c001f623:	ff 36                	push   DWORD PTR [esi]
c001f625:	cf                   	iret   

c001f626 <finishSignal>:
c001f626:	cd 0f                	int    0xf

c001f628 <finishSignal2>:
c001f628:	ff 35 08 20 00 c2    	push   DWORD PTR ds:0xc2002008
c001f62e:	e8 0e 09 ff ff       	call   c000ff41 <KiFinishSignalZ>
c001f633:	8b 2d 08 20 00 c2    	mov    ebp,DWORD PTR ds:0xc2002008
c001f639:	68 23 00 00 00       	push   0x23
c001f63e:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001f641:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c001f644:	68 1b 00 00 00       	push   0x1b
c001f649:	ff 75 2c             	push   DWORD PTR [ebp+0x2c]
c001f64c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001f64f:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c001f652:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c001f655:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001f658:	8b 75 1c             	mov    esi,DWORD PTR [ebp+0x1c]
c001f65b:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001f65e:	8b 6d 24             	mov    ebp,DWORD PTR [ebp+0x24]
c001f661:	cf                   	iret   

c001f662 <skipSignals>:
c001f662:	61                   	popa   
c001f663:	81 c4 08 00 00 00    	add    esp,0x8
c001f669:	cf                   	iret   
c001f66a:	90                   	nop
c001f66b:	90                   	nop

c001f66c <irq16>:
c001f66c:	fa                   	cli    
c001f66d:	6a 00                	push   0x0
c001f66f:	6a 30                	push   0x30
c001f671:	e9 c0 fe ff ff       	jmp    c001f536 <int_common_stub>

c001f676 <irq17>:
c001f676:	fa                   	cli    
c001f677:	6a 00                	push   0x0
c001f679:	6a 31                	push   0x31
c001f67b:	e9 b6 fe ff ff       	jmp    c001f536 <int_common_stub>

c001f680 <irq18>:
c001f680:	fa                   	cli    
c001f681:	6a 00                	push   0x0
c001f683:	6a 32                	push   0x32
c001f685:	e9 ac fe ff ff       	jmp    c001f536 <int_common_stub>

c001f68a <irq19>:
c001f68a:	fa                   	cli    
c001f68b:	6a 00                	push   0x0
c001f68d:	6a 33                	push   0x33
c001f68f:	e9 a2 fe ff ff       	jmp    c001f536 <int_common_stub>

c001f694 <irq20>:
c001f694:	fa                   	cli    
c001f695:	6a 00                	push   0x0
c001f697:	6a 34                	push   0x34
c001f699:	e9 98 fe ff ff       	jmp    c001f536 <int_common_stub>

c001f69e <irq21>:
c001f69e:	fa                   	cli    
c001f69f:	6a 00                	push   0x0
c001f6a1:	6a 35                	push   0x35
c001f6a3:	e9 8e fe ff ff       	jmp    c001f536 <int_common_stub>

c001f6a8 <irq22>:
c001f6a8:	fa                   	cli    
c001f6a9:	6a 00                	push   0x0
c001f6ab:	6a 36                	push   0x36
c001f6ad:	e9 84 fe ff ff       	jmp    c001f536 <int_common_stub>

c001f6b2 <irq23>:
c001f6b2:	fa                   	cli    
c001f6b3:	6a 00                	push   0x0
c001f6b5:	6a 37                	push   0x37
c001f6b7:	e9 7a fe ff ff       	jmp    c001f536 <int_common_stub>
c001f6bc:	66 90                	xchg   ax,ax
c001f6be:	66 90                	xchg   ax,ax

c001f6c0 <i386GetRDRAND>:
c001f6c0:	b9 64 00 00 00       	mov    ecx,0x64

c001f6c5 <retry>:
c001f6c5:	0f c7 f0             	rdrand eax
c001f6c8:	72 05                	jb     c001f6cf <retry.done>
c001f6ca:	e2 f9                	loop   c001f6c5 <retry>

c001f6cc <retry.fail>:
c001f6cc:	31 c0                	xor    eax,eax
c001f6ce:	c3                   	ret    

c001f6cf <retry.done>:
c001f6cf:	c3                   	ret    

c001f6d0 <sseDetect>:
c001f6d0:	b8 01 00 00 00       	mov    eax,0x1
c001f6d5:	0f a2                	cpuid  
c001f6d7:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001f6dd:	74 06                	je     c001f6e5 <sseDetect.noSSE>
c001f6df:	b8 01 00 00 00       	mov    eax,0x1
c001f6e4:	c3                   	ret    

c001f6e5 <sseDetect.noSSE>:
c001f6e5:	31 c0                	xor    eax,eax
c001f6e7:	c3                   	ret    

c001f6e8 <sseSave>:
c001f6e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f6ec:	0f ae 00             	fxsave [eax]
c001f6ef:	c3                   	ret    

c001f6f0 <sseLoad>:
c001f6f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f6f4:	0f ae 08             	fxrstor [eax]
c001f6f7:	c3                   	ret    

c001f6f8 <sseInit>:
c001f6f8:	e8 48 00 00 00       	call   c001f745 <x87Init>
c001f6fd:	0f 20 e0             	mov    eax,cr4
c001f700:	66 0d 00 06          	or     ax,0x600
c001f704:	0f 22 e0             	mov    cr4,eax
c001f707:	c3                   	ret    

c001f708 <sseClose>:
c001f708:	c3                   	ret    
c001f709:	66 90                	xchg   ax,ax
c001f70b:	66 90                	xchg   ax,ax
c001f70d:	66 90                	xchg   ax,ax
c001f70f:	90                   	nop

c001f710 <value_37F>:
c001f710:	7f 03                	jg     c001f715 <value_37A+0x1>

c001f712 <value_37E>:
c001f712:	7e 03                	jle    c001f717 <x87Detect+0x1>

c001f714 <value_37A>:
c001f714:	7a 03                	jp     c001f719 <x87Detect+0x3>

c001f716 <x87Detect>:
c001f716:	53                   	push   ebx
c001f717:	51                   	push   ecx
c001f718:	52                   	push   edx
c001f719:	b8 01 00 00 00       	mov    eax,0x1
c001f71e:	0f a2                	cpuid  
c001f720:	f7 c2 01 00 00 00    	test   edx,0x1
c001f726:	74 06                	je     c001f72e <x87Detect.nox87>
c001f728:	b8 01 00 00 00       	mov    eax,0x1
c001f72d:	c3                   	ret    

c001f72e <x87Detect.nox87>:
c001f72e:	b8 00 00 00 00       	mov    eax,0x0
c001f733:	5a                   	pop    edx
c001f734:	59                   	pop    ecx
c001f735:	5b                   	pop    ebx
c001f736:	c3                   	ret    

c001f737 <x87Save>:
c001f737:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f73b:	dd 30                	fnsave [eax]
c001f73d:	c3                   	ret    

c001f73e <x87Load>:
c001f73e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f742:	dd 20                	frstor [eax]
c001f744:	c3                   	ret    

c001f745 <x87Init>:
c001f745:	0f 20 c0             	mov    eax,cr0
c001f748:	66 25 fb ff          	and    ax,0xfffb
c001f74c:	66 0d 22 00          	or     ax,0x22
c001f750:	0f 22 c0             	mov    cr0,eax
c001f753:	db e3                	fninit 
c001f755:	0f 06                	clts   
c001f757:	d9 2d 14 f7 01 c0    	fldcw  WORD PTR ds:0xc001f714
c001f75d:	c3                   	ret    

c001f75e <x87Close>:
c001f75e:	c3                   	ret    
c001f75f:	90                   	nop

c001f760 <__do_global_ctors_aux>:
c001f760:	a1 14 07 02 c0       	mov    eax,ds:0xc0020714
c001f765:	83 f8 ff             	cmp    eax,0xffffffff
c001f768:	74 1a                	je     c001f784 <__do_global_ctors_aux+0x24>
c001f76a:	55                   	push   ebp
c001f76b:	89 e5                	mov    ebp,esp
c001f76d:	53                   	push   ebx
c001f76e:	52                   	push   edx
c001f76f:	bb 14 07 02 c0       	mov    ebx,0xc0020714
c001f774:	ff d0                	call   eax
c001f776:	83 eb 04             	sub    ebx,0x4
c001f779:	8b 03                	mov    eax,DWORD PTR [ebx]
c001f77b:	83 f8 ff             	cmp    eax,0xffffffff
c001f77e:	75 f4                	jne    c001f774 <__do_global_ctors_aux+0x14>
c001f780:	58                   	pop    eax
c001f781:	5b                   	pop    ebx
c001f782:	5d                   	pop    ebp
c001f783:	c3                   	ret    
c001f784:	c3                   	ret    
c001f785:	66 90                	xchg   ax,ax
c001f787:	90                   	nop

c001f788 <__divdi3>:
c001f788:	55                   	push   ebp
c001f789:	57                   	push   edi
c001f78a:	56                   	push   esi
c001f78b:	53                   	push   ebx
c001f78c:	83 ec 1c             	sub    esp,0x1c
c001f78f:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001f793:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f797:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001f79a:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001f79e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001f7a2:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001f7a6:	85 db                	test   ebx,ebx
c001f7a8:	0f 88 8e 00 00 00    	js     c001f83c <__divdi3+0xb4>
c001f7ae:	89 dd                	mov    ebp,ebx
c001f7b0:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001f7b8:	89 d3                	mov    ebx,edx
c001f7ba:	85 d2                	test   edx,edx
c001f7bc:	79 0d                	jns    c001f7cb <__divdi3+0x43>
c001f7be:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001f7c2:	f7 d8                	neg    eax
c001f7c4:	83 d2 00             	adc    edx,0x0
c001f7c7:	f7 da                	neg    edx
c001f7c9:	89 d3                	mov    ebx,edx
c001f7cb:	89 c7                	mov    edi,eax
c001f7cd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001f7d0:	85 db                	test   ebx,ebx
c001f7d2:	75 48                	jne    c001f81c <__divdi3+0x94>
c001f7d4:	39 ef                	cmp    edi,ebp
c001f7d6:	76 24                	jbe    c001f7fc <__divdi3+0x74>
c001f7d8:	89 ea                	mov    edx,ebp
c001f7da:	f7 f7                	div    edi
c001f7dc:	89 c1                	mov    ecx,eax
c001f7de:	31 f6                	xor    esi,esi
c001f7e0:	89 c8                	mov    eax,ecx
c001f7e2:	89 f2                	mov    edx,esi
c001f7e4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f7e8:	85 c9                	test   ecx,ecx
c001f7ea:	74 07                	je     c001f7f3 <__divdi3+0x6b>
c001f7ec:	f7 d8                	neg    eax
c001f7ee:	83 d2 00             	adc    edx,0x0
c001f7f1:	f7 da                	neg    edx
c001f7f3:	83 c4 1c             	add    esp,0x1c
c001f7f6:	5b                   	pop    ebx
c001f7f7:	5e                   	pop    esi
c001f7f8:	5f                   	pop    edi
c001f7f9:	5d                   	pop    ebp
c001f7fa:	c3                   	ret    
c001f7fb:	90                   	nop
c001f7fc:	85 ff                	test   edi,edi
c001f7fe:	75 0b                	jne    c001f80b <__divdi3+0x83>
c001f800:	b8 01 00 00 00       	mov    eax,0x1
c001f805:	31 d2                	xor    edx,edx
c001f807:	f7 f3                	div    ebx
c001f809:	89 c7                	mov    edi,eax
c001f80b:	31 d2                	xor    edx,edx
c001f80d:	89 e8                	mov    eax,ebp
c001f80f:	f7 f7                	div    edi
c001f811:	89 c6                	mov    esi,eax
c001f813:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001f816:	f7 f7                	div    edi
c001f818:	89 c1                	mov    ecx,eax
c001f81a:	eb c4                	jmp    c001f7e0 <__divdi3+0x58>
c001f81c:	39 eb                	cmp    ebx,ebp
c001f81e:	77 3c                	ja     c001f85c <__divdi3+0xd4>
c001f820:	0f bd f3             	bsr    esi,ebx
c001f823:	83 f6 1f             	xor    esi,0x1f
c001f826:	75 40                	jne    c001f868 <__divdi3+0xe0>
c001f828:	39 eb                	cmp    ebx,ebp
c001f82a:	72 09                	jb     c001f835 <__divdi3+0xad>
c001f82c:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001f82f:	0f 87 97 00 00 00    	ja     c001f8cc <__divdi3+0x144>
c001f835:	b9 01 00 00 00       	mov    ecx,0x1
c001f83a:	eb a4                	jmp    c001f7e0 <__divdi3+0x58>
c001f83c:	f7 d9                	neg    ecx
c001f83e:	83 d3 00             	adc    ebx,0x0
c001f841:	f7 db                	neg    ebx
c001f843:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001f846:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001f84a:	89 dd                	mov    ebp,ebx
c001f84c:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001f854:	e9 5f ff ff ff       	jmp    c001f7b8 <__divdi3+0x30>
c001f859:	8d 76 00             	lea    esi,[esi+0x0]
c001f85c:	31 f6                	xor    esi,esi
c001f85e:	31 c9                	xor    ecx,ecx
c001f860:	e9 7b ff ff ff       	jmp    c001f7e0 <__divdi3+0x58>
c001f865:	8d 76 00             	lea    esi,[esi+0x0]
c001f868:	b8 20 00 00 00       	mov    eax,0x20
c001f86d:	29 f0                	sub    eax,esi
c001f86f:	89 f1                	mov    ecx,esi
c001f871:	d3 e3                	shl    ebx,cl
c001f873:	89 fa                	mov    edx,edi
c001f875:	88 c1                	mov    cl,al
c001f877:	d3 ea                	shr    edx,cl
c001f879:	09 da                	or     edx,ebx
c001f87b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001f87f:	89 f1                	mov    ecx,esi
c001f881:	d3 e7                	shl    edi,cl
c001f883:	89 eb                	mov    ebx,ebp
c001f885:	88 c1                	mov    cl,al
c001f887:	d3 eb                	shr    ebx,cl
c001f889:	89 f1                	mov    ecx,esi
c001f88b:	d3 e5                	shl    ebp,cl
c001f88d:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001f890:	88 c1                	mov    cl,al
c001f892:	d3 ea                	shr    edx,cl
c001f894:	09 d5                	or     ebp,edx
c001f896:	89 e8                	mov    eax,ebp
c001f898:	89 da                	mov    edx,ebx
c001f89a:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001f89e:	89 d3                	mov    ebx,edx
c001f8a0:	89 c5                	mov    ebp,eax
c001f8a2:	f7 e7                	mul    edi
c001f8a4:	39 d3                	cmp    ebx,edx
c001f8a6:	72 18                	jb     c001f8c0 <__divdi3+0x138>
c001f8a8:	74 0a                	je     c001f8b4 <__divdi3+0x12c>
c001f8aa:	89 e9                	mov    ecx,ebp
c001f8ac:	31 f6                	xor    esi,esi
c001f8ae:	e9 2d ff ff ff       	jmp    c001f7e0 <__divdi3+0x58>
c001f8b3:	90                   	nop
c001f8b4:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001f8b7:	89 f1                	mov    ecx,esi
c001f8b9:	d3 e7                	shl    edi,cl
c001f8bb:	39 c7                	cmp    edi,eax
c001f8bd:	73 eb                	jae    c001f8aa <__divdi3+0x122>
c001f8bf:	90                   	nop
c001f8c0:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001f8c3:	31 f6                	xor    esi,esi
c001f8c5:	e9 16 ff ff ff       	jmp    c001f7e0 <__divdi3+0x58>
c001f8ca:	66 90                	xchg   ax,ax
c001f8cc:	31 c9                	xor    ecx,ecx
c001f8ce:	e9 0d ff ff ff       	jmp    c001f7e0 <__divdi3+0x58>
c001f8d3:	90                   	nop

c001f8d4 <__moddi3>:
c001f8d4:	55                   	push   ebp
c001f8d5:	57                   	push   edi
c001f8d6:	56                   	push   esi
c001f8d7:	53                   	push   ebx
c001f8d8:	83 ec 2c             	sub    esp,0x2c
c001f8db:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001f8df:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001f8e3:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001f8e7:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001f8eb:	85 db                	test   ebx,ebx
c001f8ed:	0f 88 85 00 00 00    	js     c001f978 <__moddi3+0xa4>
c001f8f3:	89 de                	mov    esi,ebx
c001f8f5:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001f8fd:	89 d7                	mov    edi,edx
c001f8ff:	85 d2                	test   edx,edx
c001f901:	79 09                	jns    c001f90c <__moddi3+0x38>
c001f903:	f7 d8                	neg    eax
c001f905:	83 d2 00             	adc    edx,0x0
c001f908:	f7 da                	neg    edx
c001f90a:	89 d7                	mov    edi,edx
c001f90c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f910:	89 cd                	mov    ebp,ecx
c001f912:	85 ff                	test   edi,edi
c001f914:	75 52                	jne    c001f968 <__moddi3+0x94>
c001f916:	89 c3                	mov    ebx,eax
c001f918:	39 f0                	cmp    eax,esi
c001f91a:	76 24                	jbe    c001f940 <__moddi3+0x6c>
c001f91c:	89 c8                	mov    eax,ecx
c001f91e:	89 f2                	mov    edx,esi
c001f920:	f7 f3                	div    ebx
c001f922:	89 d6                	mov    esi,edx
c001f924:	89 f0                	mov    eax,esi
c001f926:	31 d2                	xor    edx,edx
c001f928:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f92c:	85 c9                	test   ecx,ecx
c001f92e:	74 07                	je     c001f937 <__moddi3+0x63>
c001f930:	f7 d8                	neg    eax
c001f932:	83 d2 00             	adc    edx,0x0
c001f935:	f7 da                	neg    edx
c001f937:	83 c4 2c             	add    esp,0x2c
c001f93a:	5b                   	pop    ebx
c001f93b:	5e                   	pop    esi
c001f93c:	5f                   	pop    edi
c001f93d:	5d                   	pop    ebp
c001f93e:	c3                   	ret    
c001f93f:	90                   	nop
c001f940:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f944:	85 db                	test   ebx,ebx
c001f946:	75 0d                	jne    c001f955 <__moddi3+0x81>
c001f948:	b8 01 00 00 00       	mov    eax,0x1
c001f94d:	31 d2                	xor    edx,edx
c001f94f:	f7 f7                	div    edi
c001f951:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f955:	89 f0                	mov    eax,esi
c001f957:	31 d2                	xor    edx,edx
c001f959:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f95d:	f7 f7                	div    edi
c001f95f:	89 e8                	mov    eax,ebp
c001f961:	f7 f7                	div    edi
c001f963:	89 d6                	mov    esi,edx
c001f965:	eb bd                	jmp    c001f924 <__moddi3+0x50>
c001f967:	90                   	nop
c001f968:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001f96c:	39 f7                	cmp    edi,esi
c001f96e:	76 20                	jbe    c001f990 <__moddi3+0xbc>
c001f970:	89 c8                	mov    eax,ecx
c001f972:	89 f2                	mov    edx,esi
c001f974:	eb b2                	jmp    c001f928 <__moddi3+0x54>
c001f976:	66 90                	xchg   ax,ax
c001f978:	f7 d9                	neg    ecx
c001f97a:	83 d3 00             	adc    ebx,0x0
c001f97d:	f7 db                	neg    ebx
c001f97f:	89 de                	mov    esi,ebx
c001f981:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001f989:	e9 6f ff ff ff       	jmp    c001f8fd <__moddi3+0x29>
c001f98e:	66 90                	xchg   ax,ax
c001f990:	0f bd c7             	bsr    eax,edi
c001f993:	83 f0 1f             	xor    eax,0x1f
c001f996:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001f99a:	75 24                	jne    c001f9c0 <__moddi3+0xec>
c001f99c:	39 f7                	cmp    edi,esi
c001f99e:	72 06                	jb     c001f9a6 <__moddi3+0xd2>
c001f9a0:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001f9a4:	77 0c                	ja     c001f9b2 <__moddi3+0xde>
c001f9a6:	89 e9                	mov    ecx,ebp
c001f9a8:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001f9ac:	19 fe                	sbb    esi,edi
c001f9ae:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001f9b2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f9b6:	89 f2                	mov    edx,esi
c001f9b8:	e9 6b ff ff ff       	jmp    c001f928 <__moddi3+0x54>
c001f9bd:	8d 76 00             	lea    esi,[esi+0x0]
c001f9c0:	b8 20 00 00 00       	mov    eax,0x20
c001f9c5:	89 c2                	mov    edx,eax
c001f9c7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001f9cb:	29 da                	sub    edx,ebx
c001f9cd:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001f9d1:	88 d9                	mov    cl,bl
c001f9d3:	d3 e7                	shl    edi,cl
c001f9d5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f9d9:	88 d1                	mov    cl,dl
c001f9db:	d3 e8                	shr    eax,cl
c001f9dd:	09 c7                	or     edi,eax
c001f9df:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001f9e3:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f9e7:	89 d8                	mov    eax,ebx
c001f9e9:	88 d9                	mov    cl,bl
c001f9eb:	d3 e7                	shl    edi,cl
c001f9ed:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f9f1:	89 f3                	mov    ebx,esi
c001f9f3:	88 d1                	mov    cl,dl
c001f9f5:	d3 eb                	shr    ebx,cl
c001f9f7:	89 c7                	mov    edi,eax
c001f9f9:	88 c1                	mov    cl,al
c001f9fb:	d3 e6                	shl    esi,cl
c001f9fd:	89 e8                	mov    eax,ebp
c001f9ff:	88 d1                	mov    cl,dl
c001fa01:	d3 e8                	shr    eax,cl
c001fa03:	09 f0                	or     eax,esi
c001fa05:	89 f9                	mov    ecx,edi
c001fa07:	d3 e5                	shl    ebp,cl
c001fa09:	89 da                	mov    edx,ebx
c001fa0b:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001fa0f:	89 d3                	mov    ebx,edx
c001fa11:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001fa15:	89 c6                	mov    esi,eax
c001fa17:	89 d1                	mov    ecx,edx
c001fa19:	39 d3                	cmp    ebx,edx
c001fa1b:	72 27                	jb     c001fa44 <__moddi3+0x170>
c001fa1d:	74 21                	je     c001fa40 <__moddi3+0x16c>
c001fa1f:	29 f5                	sub    ebp,esi
c001fa21:	19 cb                	sbb    ebx,ecx
c001fa23:	89 de                	mov    esi,ebx
c001fa25:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001fa29:	d3 e6                	shl    esi,cl
c001fa2b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001fa2f:	89 f9                	mov    ecx,edi
c001fa31:	d3 ed                	shr    ebp,cl
c001fa33:	09 ee                	or     esi,ebp
c001fa35:	89 f0                	mov    eax,esi
c001fa37:	d3 eb                	shr    ebx,cl
c001fa39:	89 da                	mov    edx,ebx
c001fa3b:	e9 e8 fe ff ff       	jmp    c001f928 <__moddi3+0x54>
c001fa40:	39 c5                	cmp    ebp,eax
c001fa42:	73 db                	jae    c001fa1f <__moddi3+0x14b>
c001fa44:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001fa48:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001fa4c:	89 d1                	mov    ecx,edx
c001fa4e:	89 c6                	mov    esi,eax
c001fa50:	eb cd                	jmp    c001fa1f <__moddi3+0x14b>
c001fa52:	66 90                	xchg   ax,ax

c001fa54 <__udivdi3>:
c001fa54:	55                   	push   ebp
c001fa55:	57                   	push   edi
c001fa56:	56                   	push   esi
c001fa57:	53                   	push   ebx
c001fa58:	83 ec 1c             	sub    esp,0x1c
c001fa5b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001fa5f:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001fa63:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001fa67:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001fa6b:	85 d2                	test   edx,edx
c001fa6d:	75 41                	jne    c001fab0 <__udivdi3+0x5c>
c001fa6f:	39 f7                	cmp    edi,esi
c001fa71:	76 15                	jbe    c001fa88 <__udivdi3+0x34>
c001fa73:	89 e8                	mov    eax,ebp
c001fa75:	89 f2                	mov    edx,esi
c001fa77:	f7 f7                	div    edi
c001fa79:	31 db                	xor    ebx,ebx
c001fa7b:	89 da                	mov    edx,ebx
c001fa7d:	83 c4 1c             	add    esp,0x1c
c001fa80:	5b                   	pop    ebx
c001fa81:	5e                   	pop    esi
c001fa82:	5f                   	pop    edi
c001fa83:	5d                   	pop    ebp
c001fa84:	c3                   	ret    
c001fa85:	8d 76 00             	lea    esi,[esi+0x0]
c001fa88:	89 f9                	mov    ecx,edi
c001fa8a:	85 ff                	test   edi,edi
c001fa8c:	75 0b                	jne    c001fa99 <__udivdi3+0x45>
c001fa8e:	b8 01 00 00 00       	mov    eax,0x1
c001fa93:	31 d2                	xor    edx,edx
c001fa95:	f7 f7                	div    edi
c001fa97:	89 c1                	mov    ecx,eax
c001fa99:	31 d2                	xor    edx,edx
c001fa9b:	89 f0                	mov    eax,esi
c001fa9d:	f7 f1                	div    ecx
c001fa9f:	89 c3                	mov    ebx,eax
c001faa1:	89 e8                	mov    eax,ebp
c001faa3:	f7 f1                	div    ecx
c001faa5:	89 da                	mov    edx,ebx
c001faa7:	83 c4 1c             	add    esp,0x1c
c001faaa:	5b                   	pop    ebx
c001faab:	5e                   	pop    esi
c001faac:	5f                   	pop    edi
c001faad:	5d                   	pop    ebp
c001faae:	c3                   	ret    
c001faaf:	90                   	nop
c001fab0:	39 f2                	cmp    edx,esi
c001fab2:	77 1c                	ja     c001fad0 <__udivdi3+0x7c>
c001fab4:	0f bd da             	bsr    ebx,edx
c001fab7:	83 f3 1f             	xor    ebx,0x1f
c001faba:	75 24                	jne    c001fae0 <__udivdi3+0x8c>
c001fabc:	39 f2                	cmp    edx,esi
c001fabe:	72 08                	jb     c001fac8 <__udivdi3+0x74>
c001fac0:	39 ef                	cmp    edi,ebp
c001fac2:	0f 87 84 00 00 00    	ja     c001fb4c <__udivdi3+0xf8>
c001fac8:	b8 01 00 00 00       	mov    eax,0x1
c001facd:	eb ac                	jmp    c001fa7b <__udivdi3+0x27>
c001facf:	90                   	nop
c001fad0:	31 db                	xor    ebx,ebx
c001fad2:	31 c0                	xor    eax,eax
c001fad4:	89 da                	mov    edx,ebx
c001fad6:	83 c4 1c             	add    esp,0x1c
c001fad9:	5b                   	pop    ebx
c001fada:	5e                   	pop    esi
c001fadb:	5f                   	pop    edi
c001fadc:	5d                   	pop    ebp
c001fadd:	c3                   	ret    
c001fade:	66 90                	xchg   ax,ax
c001fae0:	b8 20 00 00 00       	mov    eax,0x20
c001fae5:	29 d8                	sub    eax,ebx
c001fae7:	88 d9                	mov    cl,bl
c001fae9:	d3 e2                	shl    edx,cl
c001faeb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001faef:	89 fa                	mov    edx,edi
c001faf1:	88 c1                	mov    cl,al
c001faf3:	d3 ea                	shr    edx,cl
c001faf5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001faf9:	09 d1                	or     ecx,edx
c001fafb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001faff:	88 d9                	mov    cl,bl
c001fb01:	d3 e7                	shl    edi,cl
c001fb03:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001fb07:	89 f7                	mov    edi,esi
c001fb09:	88 c1                	mov    cl,al
c001fb0b:	d3 ef                	shr    edi,cl
c001fb0d:	88 d9                	mov    cl,bl
c001fb0f:	d3 e6                	shl    esi,cl
c001fb11:	89 ea                	mov    edx,ebp
c001fb13:	88 c1                	mov    cl,al
c001fb15:	d3 ea                	shr    edx,cl
c001fb17:	09 d6                	or     esi,edx
c001fb19:	89 f0                	mov    eax,esi
c001fb1b:	89 fa                	mov    edx,edi
c001fb1d:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001fb21:	89 d7                	mov    edi,edx
c001fb23:	89 c6                	mov    esi,eax
c001fb25:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001fb29:	39 d7                	cmp    edi,edx
c001fb2b:	72 13                	jb     c001fb40 <__udivdi3+0xec>
c001fb2d:	74 09                	je     c001fb38 <__udivdi3+0xe4>
c001fb2f:	89 f0                	mov    eax,esi
c001fb31:	31 db                	xor    ebx,ebx
c001fb33:	e9 43 ff ff ff       	jmp    c001fa7b <__udivdi3+0x27>
c001fb38:	88 d9                	mov    cl,bl
c001fb3a:	d3 e5                	shl    ebp,cl
c001fb3c:	39 c5                	cmp    ebp,eax
c001fb3e:	73 ef                	jae    c001fb2f <__udivdi3+0xdb>
c001fb40:	8d 46 ff             	lea    eax,[esi-0x1]
c001fb43:	31 db                	xor    ebx,ebx
c001fb45:	e9 31 ff ff ff       	jmp    c001fa7b <__udivdi3+0x27>
c001fb4a:	66 90                	xchg   ax,ax
c001fb4c:	31 c0                	xor    eax,eax
c001fb4e:	e9 28 ff ff ff       	jmp    c001fa7b <__udivdi3+0x27>
c001fb53:	90                   	nop

c001fb54 <__umoddi3>:
c001fb54:	55                   	push   ebp
c001fb55:	57                   	push   edi
c001fb56:	56                   	push   esi
c001fb57:	53                   	push   ebx
c001fb58:	83 ec 1c             	sub    esp,0x1c
c001fb5b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001fb5f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001fb63:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001fb67:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001fb6b:	89 da                	mov    edx,ebx
c001fb6d:	85 c0                	test   eax,eax
c001fb6f:	75 37                	jne    c001fba8 <__umoddi3+0x54>
c001fb71:	39 df                	cmp    edi,ebx
c001fb73:	76 13                	jbe    c001fb88 <__umoddi3+0x34>
c001fb75:	89 f0                	mov    eax,esi
c001fb77:	f7 f7                	div    edi
c001fb79:	89 d0                	mov    eax,edx
c001fb7b:	31 d2                	xor    edx,edx
c001fb7d:	83 c4 1c             	add    esp,0x1c
c001fb80:	5b                   	pop    ebx
c001fb81:	5e                   	pop    esi
c001fb82:	5f                   	pop    edi
c001fb83:	5d                   	pop    ebp
c001fb84:	c3                   	ret    
c001fb85:	8d 76 00             	lea    esi,[esi+0x0]
c001fb88:	89 fd                	mov    ebp,edi
c001fb8a:	85 ff                	test   edi,edi
c001fb8c:	75 0b                	jne    c001fb99 <__umoddi3+0x45>
c001fb8e:	b8 01 00 00 00       	mov    eax,0x1
c001fb93:	31 d2                	xor    edx,edx
c001fb95:	f7 f7                	div    edi
c001fb97:	89 c5                	mov    ebp,eax
c001fb99:	89 d8                	mov    eax,ebx
c001fb9b:	31 d2                	xor    edx,edx
c001fb9d:	f7 f5                	div    ebp
c001fb9f:	89 f0                	mov    eax,esi
c001fba1:	f7 f5                	div    ebp
c001fba3:	89 d0                	mov    eax,edx
c001fba5:	eb d4                	jmp    c001fb7b <__umoddi3+0x27>
c001fba7:	90                   	nop
c001fba8:	89 f1                	mov    ecx,esi
c001fbaa:	39 d8                	cmp    eax,ebx
c001fbac:	76 0a                	jbe    c001fbb8 <__umoddi3+0x64>
c001fbae:	89 f0                	mov    eax,esi
c001fbb0:	83 c4 1c             	add    esp,0x1c
c001fbb3:	5b                   	pop    ebx
c001fbb4:	5e                   	pop    esi
c001fbb5:	5f                   	pop    edi
c001fbb6:	5d                   	pop    ebp
c001fbb7:	c3                   	ret    
c001fbb8:	0f bd e8             	bsr    ebp,eax
c001fbbb:	83 f5 1f             	xor    ebp,0x1f
c001fbbe:	75 1c                	jne    c001fbdc <__umoddi3+0x88>
c001fbc0:	39 d8                	cmp    eax,ebx
c001fbc2:	72 04                	jb     c001fbc8 <__umoddi3+0x74>
c001fbc4:	39 f7                	cmp    edi,esi
c001fbc6:	77 08                	ja     c001fbd0 <__umoddi3+0x7c>
c001fbc8:	89 da                	mov    edx,ebx
c001fbca:	29 fe                	sub    esi,edi
c001fbcc:	19 c2                	sbb    edx,eax
c001fbce:	89 f1                	mov    ecx,esi
c001fbd0:	89 c8                	mov    eax,ecx
c001fbd2:	83 c4 1c             	add    esp,0x1c
c001fbd5:	5b                   	pop    ebx
c001fbd6:	5e                   	pop    esi
c001fbd7:	5f                   	pop    edi
c001fbd8:	5d                   	pop    ebp
c001fbd9:	c3                   	ret    
c001fbda:	66 90                	xchg   ax,ax
c001fbdc:	ba 20 00 00 00       	mov    edx,0x20
c001fbe1:	29 ea                	sub    edx,ebp
c001fbe3:	89 e9                	mov    ecx,ebp
c001fbe5:	d3 e0                	shl    eax,cl
c001fbe7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001fbeb:	89 f8                	mov    eax,edi
c001fbed:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001fbf1:	88 d1                	mov    cl,dl
c001fbf3:	d3 e8                	shr    eax,cl
c001fbf5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001fbf9:	09 c1                	or     ecx,eax
c001fbfb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001fbff:	89 e9                	mov    ecx,ebp
c001fc01:	d3 e7                	shl    edi,cl
c001fc03:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001fc07:	89 d8                	mov    eax,ebx
c001fc09:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001fc0d:	88 d1                	mov    cl,dl
c001fc0f:	d3 e8                	shr    eax,cl
c001fc11:	89 c7                	mov    edi,eax
c001fc13:	89 e9                	mov    ecx,ebp
c001fc15:	d3 e3                	shl    ebx,cl
c001fc17:	89 f0                	mov    eax,esi
c001fc19:	88 d1                	mov    cl,dl
c001fc1b:	d3 e8                	shr    eax,cl
c001fc1d:	09 d8                	or     eax,ebx
c001fc1f:	89 e9                	mov    ecx,ebp
c001fc21:	d3 e6                	shl    esi,cl
c001fc23:	89 f3                	mov    ebx,esi
c001fc25:	89 fa                	mov    edx,edi
c001fc27:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001fc2b:	89 d1                	mov    ecx,edx
c001fc2d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001fc31:	89 c6                	mov    esi,eax
c001fc33:	89 d7                	mov    edi,edx
c001fc35:	39 d1                	cmp    ecx,edx
c001fc37:	72 27                	jb     c001fc60 <__umoddi3+0x10c>
c001fc39:	74 21                	je     c001fc5c <__umoddi3+0x108>
c001fc3b:	89 ca                	mov    edx,ecx
c001fc3d:	29 f3                	sub    ebx,esi
c001fc3f:	19 fa                	sbb    edx,edi
c001fc41:	89 d0                	mov    eax,edx
c001fc43:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001fc47:	d3 e0                	shl    eax,cl
c001fc49:	89 e9                	mov    ecx,ebp
c001fc4b:	d3 eb                	shr    ebx,cl
c001fc4d:	09 d8                	or     eax,ebx
c001fc4f:	d3 ea                	shr    edx,cl
c001fc51:	83 c4 1c             	add    esp,0x1c
c001fc54:	5b                   	pop    ebx
c001fc55:	5e                   	pop    esi
c001fc56:	5f                   	pop    edi
c001fc57:	5d                   	pop    ebp
c001fc58:	c3                   	ret    
c001fc59:	8d 76 00             	lea    esi,[esi+0x0]
c001fc5c:	39 c3                	cmp    ebx,eax
c001fc5e:	73 db                	jae    c001fc3b <__umoddi3+0xe7>
c001fc60:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001fc64:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001fc68:	89 d7                	mov    edi,edx
c001fc6a:	89 c6                	mov    esi,eax
c001fc6c:	eb cd                	jmp    c001fc3b <__umoddi3+0xe7>

Disassembly of section .init:

c001fc6e <_init>:
c001fc6e:	55                   	push   ebp
c001fc6f:	89 e5                	mov    ebp,esp
c001fc71:	e8 7e 04 fe ff       	call   c00000f4 <frame_dummy>
c001fc76:	e8 e5 fa ff ff       	call   c001f760 <__do_global_ctors_aux>
c001fc7b:	5d                   	pop    ebp
c001fc7c:	c3                   	ret    

Disassembly of section .fini:

c001fc7d <_fini>:
c001fc7d:	55                   	push   ebp
c001fc7e:	89 e5                	mov    ebp,esp
c001fc80:	e8 ff 03 fe ff       	call   c0000084 <__do_global_dtors_aux>
c001fc85:	5d                   	pop    ebp
c001fc86:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001fc88 <DriverlessDevice::~DriverlessDevice()>:
c001fc88:	ba 20 16 02 c0       	mov    edx,0xc0021620
c001fc8d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc91:	89 10                	mov    DWORD PTR [eax],edx
c001fc93:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc97:	50                   	push   eax
c001fc98:	e8 a7 92 fe ff       	call   c0008f44 <Device::~Device()>
c001fc9d:	83 c4 04             	add    esp,0x4
c001fca0:	90                   	nop
c001fca1:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001fca2 <DriverlessDevice::~DriverlessDevice()>:
c001fca2:	83 ec 0c             	sub    esp,0xc
c001fca5:	83 ec 0c             	sub    esp,0xc
c001fca8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fcac:	e8 d7 ff ff ff       	call   c001fc88 <DriverlessDevice::~DriverlessDevice()>
c001fcb1:	83 c4 10             	add    esp,0x10
c001fcb4:	83 ec 08             	sub    esp,0x8
c001fcb7:	68 58 01 00 00       	push   0x158
c001fcbc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fcc0:	e8 9e c9 fe ff       	call   c000c663 <operator delete(void*, unsigned long)>
c001fcc5:	83 c4 10             	add    esp,0x10
c001fcc8:	83 c4 0c             	add    esp,0xc
c001fccb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001fccc <LinkedList<Device>::addElement(Device*)>:
c001fccc:	83 ec 0c             	sub    esp,0xc
c001fccf:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001fcd4:	75 10                	jne    c001fce6 <LinkedList<Device>::addElement(Device*)+0x1a>
c001fcd6:	83 ec 0c             	sub    esp,0xc
c001fcd9:	68 b4 15 02 c0       	push   0xc00215b4
c001fcde:	e8 43 ef fe ff       	call   c000ec26 <KePanic(char const*)>
c001fce3:	83 c4 10             	add    esp,0x10
c001fce6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcea:	8b 00                	mov    eax,DWORD PTR [eax]
c001fcec:	85 c0                	test   eax,eax
c001fcee:	74 3a                	je     c001fd2a <LinkedList<Device>::addElement(Device*)+0x5e>
c001fcf0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcf4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fcf7:	85 c0                	test   eax,eax
c001fcf9:	74 2f                	je     c001fd2a <LinkedList<Device>::addElement(Device*)+0x5e>
c001fcfb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcff:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fd02:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fd06:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001fd0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd10:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fd14:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fd17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd1b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fd1e:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001fd28:	eb 68                	jmp    c001fd92 <LinkedList<Device>::addElement(Device*)+0xc6>
c001fd2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd2e:	8b 00                	mov    eax,DWORD PTR [eax]
c001fd30:	85 c0                	test   eax,eax
c001fd32:	75 4e                	jne    c001fd82 <LinkedList<Device>::addElement(Device*)+0xb6>
c001fd34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd38:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fd3b:	85 c0                	test   eax,eax
c001fd3d:	75 43                	jne    c001fd82 <LinkedList<Device>::addElement(Device*)+0xb6>
c001fd3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd43:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fd47:	89 10                	mov    DWORD PTR [eax],edx
c001fd49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd4d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fd51:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fd54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd58:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fd5b:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001fd65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd69:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fd6c:	85 c0                	test   eax,eax
c001fd6e:	74 22                	je     c001fd92 <LinkedList<Device>::addElement(Device*)+0xc6>
c001fd70:	83 ec 0c             	sub    esp,0xc
c001fd73:	68 d6 15 02 c0       	push   0xc00215d6
c001fd78:	e8 a9 ee fe ff       	call   c000ec26 <KePanic(char const*)>
c001fd7d:	83 c4 10             	add    esp,0x10
c001fd80:	eb 10                	jmp    c001fd92 <LinkedList<Device>::addElement(Device*)+0xc6>
c001fd82:	83 ec 0c             	sub    esp,0xc
c001fd85:	68 e0 15 02 c0       	push   0xc00215e0
c001fd8a:	e8 97 ee fe ff       	call   c000ec26 <KePanic(char const*)>
c001fd8f:	83 c4 10             	add    esp,0x10
c001fd92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd96:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fd99:	8d 50 01             	lea    edx,[eax+0x1]
c001fd9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fda0:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fda3:	90                   	nop
c001fda4:	83 c4 0c             	add    esp,0xc
c001fda7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001fda8 <LinkedList<Device>::LinkedList()>:
c001fda8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fdac:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fdb2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fdb6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fdbd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fdc1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fdc8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fdcc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fdd2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fdd6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fddd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fde1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fde8:	90                   	nop
c001fde9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001fdec <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001fdec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fdf0:	8b 00                	mov    eax,DWORD PTR [eax]
c001fdf2:	85 c0                	test   eax,eax
c001fdf4:	75 0e                	jne    c001fe04 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001fdf6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fdfa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fdfd:	85 c0                	test   eax,eax
c001fdff:	75 03                	jne    c001fe04 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001fe01:	b0 01                	mov    al,0x1
c001fe03:	c3                   	ret    
c001fe04:	b0 00                	mov    al,0x0
c001fe06:	90                   	nop
c001fe07:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001fe08 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001fe08:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fe0c:	8b 00                	mov    eax,DWORD PTR [eax]
c001fe0e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001fe10 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001fe10:	83 ec 0c             	sub    esp,0xc
c001fe13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe17:	8b 00                	mov    eax,DWORD PTR [eax]
c001fe19:	85 c0                	test   eax,eax
c001fe1b:	75 17                	jne    c001fe34 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c001fe1d:	83 ec 0c             	sub    esp,0xc
c001fe20:	68 50 18 02 c0       	push   0xc0021850
c001fe25:	e8 fc ed fe ff       	call   c000ec26 <KePanic(char const*)>
c001fe2a:	83 c4 10             	add    esp,0x10
c001fe2d:	e9 96 00 00 00       	jmp    c001fec8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb8>
c001fe32:	66 90                	xchg   ax,ax
c001fe34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe38:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fe3b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001fe3e:	85 c0                	test   eax,eax
c001fe40:	0f 95 c0             	setne  al
c001fe43:	0f b6 c0             	movzx  eax,al
c001fe46:	85 c0                	test   eax,eax
c001fe48:	74 12                	je     c001fe5c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x4c>
c001fe4a:	83 ec 0c             	sub    esp,0xc
c001fe4d:	68 9b 18 02 c0       	push   0xc002189b
c001fe52:	e8 cf ed fe ff       	call   c000ec26 <KePanic(char const*)>
c001fe57:	83 c4 10             	add    esp,0x10
c001fe5a:	66 90                	xchg   ax,ax
c001fe5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe60:	8b 00                	mov    eax,DWORD PTR [eax]
c001fe62:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001fe65:	85 c0                	test   eax,eax
c001fe67:	0f 94 c0             	sete   al
c001fe6a:	0f b6 c0             	movzx  eax,al
c001fe6d:	85 c0                	test   eax,eax
c001fe6f:	74 33                	je     c001fea4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x94>
c001fe71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe75:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fe7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe7f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fe86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe8a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fe8d:	83 f8 01             	cmp    eax,0x1
c001fe90:	74 22                	je     c001feb4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001fe92:	83 ec 0c             	sub    esp,0xc
c001fe95:	68 74 18 02 c0       	push   0xc0021874
c001fe9a:	e8 87 ed fe ff       	call   c000ec26 <KePanic(char const*)>
c001fe9f:	83 c4 10             	add    esp,0x10
c001fea2:	eb 10                	jmp    c001feb4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001fea4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fea8:	8b 00                	mov    eax,DWORD PTR [eax]
c001feaa:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001fead:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001feb1:	89 10                	mov    DWORD PTR [eax],edx
c001feb3:	90                   	nop
c001feb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001feb8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001febb:	8d 50 ff             	lea    edx,[eax-0x1]
c001febe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fec2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fec5:	8d 76 00             	lea    esi,[esi+0x0]
c001fec8:	83 c4 0c             	add    esp,0xc
c001fecb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001fecc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001fecc:	83 ec 0c             	sub    esp,0xc
c001fecf:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001fed4:	75 12                	jne    c001fee8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c001fed6:	83 ec 0c             	sub    esp,0xc
c001fed9:	68 b4 15 02 c0       	push   0xc00215b4
c001fede:	e8 43 ed fe ff       	call   c000ec26 <KePanic(char const*)>
c001fee3:	83 c4 10             	add    esp,0x10
c001fee6:	66 90                	xchg   ax,ax
c001fee8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001feec:	8b 00                	mov    eax,DWORD PTR [eax]
c001feee:	85 c0                	test   eax,eax
c001fef0:	74 36                	je     c001ff28 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001fef2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fef6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fef9:	85 c0                	test   eax,eax
c001fefb:	74 2b                	je     c001ff28 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001fefd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff01:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ff04:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ff08:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001ff0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff0f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ff13:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ff16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff1a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ff1d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001ff24:	eb 6a                	jmp    c001ff90 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001ff26:	66 90                	xchg   ax,ax
c001ff28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff2c:	8b 00                	mov    eax,DWORD PTR [eax]
c001ff2e:	85 c0                	test   eax,eax
c001ff30:	75 4e                	jne    c001ff80 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001ff32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff36:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ff39:	85 c0                	test   eax,eax
c001ff3b:	75 43                	jne    c001ff80 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001ff3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff41:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ff45:	89 10                	mov    DWORD PTR [eax],edx
c001ff47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff4b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ff4f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ff52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff56:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ff59:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001ff60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff64:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ff67:	85 c0                	test   eax,eax
c001ff69:	74 25                	je     c001ff90 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001ff6b:	83 ec 0c             	sub    esp,0xc
c001ff6e:	68 d6 15 02 c0       	push   0xc00215d6
c001ff73:	e8 ae ec fe ff       	call   c000ec26 <KePanic(char const*)>
c001ff78:	83 c4 10             	add    esp,0x10
c001ff7b:	eb 13                	jmp    c001ff90 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001ff7d:	8d 76 00             	lea    esi,[esi+0x0]
c001ff80:	83 ec 0c             	sub    esp,0xc
c001ff83:	68 e0 15 02 c0       	push   0xc00215e0
c001ff88:	e8 99 ec fe ff       	call   c000ec26 <KePanic(char const*)>
c001ff8d:	83 c4 10             	add    esp,0x10
c001ff90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff94:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ff97:	8d 50 01             	lea    edx,[eax+0x1]
c001ff9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff9e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ffa1:	90                   	nop
c001ffa2:	83 c4 0c             	add    esp,0xc
c001ffa5:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001ffa8 <ACPI::~ACPI()>:
c001ffa8:	83 ec 0c             	sub    esp,0xc
c001ffab:	ba ec 1b 02 c0       	mov    edx,0xc0021bec
c001ffb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffb4:	89 10                	mov    DWORD PTR [eax],edx
c001ffb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffba:	83 ec 0c             	sub    esp,0xc
c001ffbd:	50                   	push   eax
c001ffbe:	e8 81 8f fe ff       	call   c0008f44 <Device::~Device()>
c001ffc3:	83 c4 10             	add    esp,0x10
c001ffc6:	90                   	nop
c001ffc7:	83 c4 0c             	add    esp,0xc
c001ffca:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001ffcc <ACPI::~ACPI()>:
c001ffcc:	83 ec 0c             	sub    esp,0xc
c001ffcf:	83 ec 0c             	sub    esp,0xc
c001ffd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ffd6:	e8 cd ff ff ff       	call   c001ffa8 <ACPI::~ACPI()>
c001ffdb:	83 c4 10             	add    esp,0x10
c001ffde:	83 ec 08             	sub    esp,0x8
c001ffe1:	68 64 12 00 00       	push   0x1264
c001ffe6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ffea:	e8 74 c6 fe ff       	call   c000c663 <operator delete(void*, unsigned long)>
c001ffef:	83 c4 10             	add    esp,0x10
c001fff2:	83 c4 0c             	add    esp,0xc
c001fff5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c001fff8 <LinkedList<Device>::~LinkedList()>:
c001fff8:	90                   	nop
c001fff9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c001fffc <LinkedList<Device>::isEmpty()>:
c001fffc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020000:	8b 00                	mov    eax,DWORD PTR [eax]
c0020002:	85 c0                	test   eax,eax
c0020004:	75 0e                	jne    c0020014 <LinkedList<Device>::isEmpty()+0x18>
c0020006:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002000a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002000d:	85 c0                	test   eax,eax
c002000f:	75 03                	jne    c0020014 <LinkedList<Device>::isEmpty()+0x18>
c0020011:	b0 01                	mov    al,0x1
c0020013:	c3                   	ret    
c0020014:	b0 00                	mov    al,0x0
c0020016:	90                   	nop
c0020017:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c0020018 <LinkedList<Device>::getFirstElement()>:
c0020018:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002001c:	8b 00                	mov    eax,DWORD PTR [eax]
c002001e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c0020020 <LinkedList<Device>::removeFirst()>:
c0020020:	83 ec 0c             	sub    esp,0xc
c0020023:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020027:	8b 00                	mov    eax,DWORD PTR [eax]
c0020029:	85 c0                	test   eax,eax
c002002b:	75 17                	jne    c0020044 <LinkedList<Device>::removeFirst()+0x24>
c002002d:	83 ec 0c             	sub    esp,0xc
c0020030:	68 50 18 02 c0       	push   0xc0021850
c0020035:	e8 ec eb fe ff       	call   c000ec26 <KePanic(char const*)>
c002003a:	83 c4 10             	add    esp,0x10
c002003d:	e9 92 00 00 00       	jmp    c00200d4 <LinkedList<Device>::removeFirst()+0xb4>
c0020042:	66 90                	xchg   ax,ax
c0020044:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020048:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002004b:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0020051:	85 c0                	test   eax,eax
c0020053:	74 13                	je     c0020068 <LinkedList<Device>::removeFirst()+0x48>
c0020055:	83 ec 0c             	sub    esp,0xc
c0020058:	68 9b 18 02 c0       	push   0xc002189b
c002005d:	e8 c4 eb fe ff       	call   c000ec26 <KePanic(char const*)>
c0020062:	83 c4 10             	add    esp,0x10
c0020065:	8d 76 00             	lea    esi,[esi+0x0]
c0020068:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002006c:	8b 00                	mov    eax,DWORD PTR [eax]
c002006e:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0020074:	85 c0                	test   eax,eax
c0020076:	75 34                	jne    c00200ac <LinkedList<Device>::removeFirst()+0x8c>
c0020078:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002007c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0020082:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020086:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002008d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020091:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0020094:	83 f8 01             	cmp    eax,0x1
c0020097:	74 27                	je     c00200c0 <LinkedList<Device>::removeFirst()+0xa0>
c0020099:	83 ec 0c             	sub    esp,0xc
c002009c:	68 74 18 02 c0       	push   0xc0021874
c00200a1:	e8 80 eb fe ff       	call   c000ec26 <KePanic(char const*)>
c00200a6:	83 c4 10             	add    esp,0x10
c00200a9:	eb 15                	jmp    c00200c0 <LinkedList<Device>::removeFirst()+0xa0>
c00200ab:	90                   	nop
c00200ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200b0:	8b 00                	mov    eax,DWORD PTR [eax]
c00200b2:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c00200b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200bc:	89 10                	mov    DWORD PTR [eax],edx
c00200be:	66 90                	xchg   ax,ax
c00200c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200c4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00200c7:	8d 50 ff             	lea    edx,[eax-0x1]
c00200ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200ce:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00200d1:	8d 76 00             	lea    esi,[esi+0x0]
c00200d4:	83 c4 0c             	add    esp,0xc
c00200d7:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c00200d8 <Computer::~Computer()>:
c00200d8:	83 ec 0c             	sub    esp,0xc
c00200db:	ba 8c 1e 02 c0       	mov    edx,0xc0021e8c
c00200e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200e4:	89 10                	mov    DWORD PTR [eax],edx
c00200e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200ea:	83 ec 0c             	sub    esp,0xc
c00200ed:	50                   	push   eax
c00200ee:	e8 51 8e fe ff       	call   c0008f44 <Device::~Device()>
c00200f3:	83 c4 10             	add    esp,0x10
c00200f6:	90                   	nop
c00200f7:	83 c4 0c             	add    esp,0xc
c00200fa:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c00200fc <Computer::~Computer()>:
c00200fc:	83 ec 0c             	sub    esp,0xc
c00200ff:	83 ec 0c             	sub    esp,0xc
c0020102:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020106:	e8 cd ff ff ff       	call   c00200d8 <Computer::~Computer()>
c002010b:	83 c4 10             	add    esp,0x10
c002010e:	83 ec 08             	sub    esp,0x8
c0020111:	68 6c 01 00 00       	push   0x16c
c0020116:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002011a:	e8 44 c5 fe ff       	call   c000c663 <operator delete(void*, unsigned long)>
c002011f:	83 c4 10             	add    esp,0x10
c0020122:	83 c4 0c             	add    esp,0xc
c0020125:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0020126 <idleCommon()>:
c0020126:	83 ec 0c             	sub    esp,0xc
c0020129:	fa                   	cli    
c002012a:	ff 05 b0 c6 02 c0    	inc    DWORD PTR ds:0xc002c6b0
c0020130:	e8 bb 52 ff ff       	call   c00153f0 <schedule()>
c0020135:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c002013a:	48                   	dec    eax
c002013b:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c0020140:	75 01                	jne    c0020143 <idleCommon()+0x1d>
c0020142:	fb                   	sti    
c0020143:	83 c4 0c             	add    esp,0xc
c0020146:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0020148 <LinkedList<UnixFile>::~LinkedList()>:
c0020148:	90                   	nop
c0020149:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c002014a <LinkedList<UnixFile>::LinkedList()>:
c002014a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002014e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0020154:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020158:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002015f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020163:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002016a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002016e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0020174:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020178:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002017f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020183:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002018a:	90                   	nop
c002018b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c002018c <LinkedList<UnixFile>::addElement(UnixFile*)>:
c002018c:	83 ec 0c             	sub    esp,0xc
c002018f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0020194:	75 10                	jne    c00201a6 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c0020196:	83 ec 0c             	sub    esp,0xc
c0020199:	68 b4 15 02 c0       	push   0xc00215b4
c002019e:	e8 83 ea fe ff       	call   c000ec26 <KePanic(char const*)>
c00201a3:	83 c4 10             	add    esp,0x10
c00201a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201aa:	8b 00                	mov    eax,DWORD PTR [eax]
c00201ac:	85 c0                	test   eax,eax
c00201ae:	74 34                	je     c00201e4 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c00201b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201b4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00201b7:	85 c0                	test   eax,eax
c00201b9:	74 29                	je     c00201e4 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c00201bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201bf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00201c2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00201c6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00201c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201cd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00201d1:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00201d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201d8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00201db:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00201e2:	eb 65                	jmp    c0020249 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00201e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201e8:	8b 00                	mov    eax,DWORD PTR [eax]
c00201ea:	85 c0                	test   eax,eax
c00201ec:	75 4b                	jne    c0020239 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c00201ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201f2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00201f5:	85 c0                	test   eax,eax
c00201f7:	75 40                	jne    c0020239 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c00201f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201fd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020201:	89 10                	mov    DWORD PTR [eax],edx
c0020203:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020207:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002020b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002020e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020212:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0020215:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002021c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020220:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0020223:	85 c0                	test   eax,eax
c0020225:	74 22                	je     c0020249 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0020227:	83 ec 0c             	sub    esp,0xc
c002022a:	68 d6 15 02 c0       	push   0xc00215d6
c002022f:	e8 f2 e9 fe ff       	call   c000ec26 <KePanic(char const*)>
c0020234:	83 c4 10             	add    esp,0x10
c0020237:	eb 10                	jmp    c0020249 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0020239:	83 ec 0c             	sub    esp,0xc
c002023c:	68 e0 15 02 c0       	push   0xc00215e0
c0020241:	e8 e0 e9 fe ff       	call   c000ec26 <KePanic(char const*)>
c0020246:	83 c4 10             	add    esp,0x10
c0020249:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002024d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0020250:	8d 50 01             	lea    edx,[eax+0x1]
c0020253:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020257:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002025a:	90                   	nop
c002025b:	83 c4 0c             	add    esp,0xc
c002025e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c0020260 <LinkedList<UnixFile>::getFirstElement()>:
c0020260:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020264:	8b 00                	mov    eax,DWORD PTR [eax]
c0020266:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c0020268 <LinkedList<UnixFile>::removeFirst()>:
c0020268:	83 ec 0c             	sub    esp,0xc
c002026b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002026f:	8b 00                	mov    eax,DWORD PTR [eax]
c0020271:	85 c0                	test   eax,eax
c0020273:	75 12                	jne    c0020287 <LinkedList<UnixFile>::removeFirst()+0x1f>
c0020275:	83 ec 0c             	sub    esp,0xc
c0020278:	68 50 18 02 c0       	push   0xc0021850
c002027d:	e8 a4 e9 fe ff       	call   c000ec26 <KePanic(char const*)>
c0020282:	83 c4 10             	add    esp,0x10
c0020285:	eb 7e                	jmp    c0020305 <LinkedList<UnixFile>::removeFirst()+0x9d>
c0020287:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002028b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002028e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0020291:	85 c0                	test   eax,eax
c0020293:	74 10                	je     c00202a5 <LinkedList<UnixFile>::removeFirst()+0x3d>
c0020295:	83 ec 0c             	sub    esp,0xc
c0020298:	68 9b 18 02 c0       	push   0xc002189b
c002029d:	e8 84 e9 fe ff       	call   c000ec26 <KePanic(char const*)>
c00202a2:	83 c4 10             	add    esp,0x10
c00202a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00202a9:	8b 00                	mov    eax,DWORD PTR [eax]
c00202ab:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00202ae:	85 c0                	test   eax,eax
c00202b0:	75 33                	jne    c00202e5 <LinkedList<UnixFile>::removeFirst()+0x7d>
c00202b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00202b6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00202bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00202c0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00202c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00202cb:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00202ce:	83 f8 01             	cmp    eax,0x1
c00202d1:	74 21                	je     c00202f4 <LinkedList<UnixFile>::removeFirst()+0x8c>
c00202d3:	83 ec 0c             	sub    esp,0xc
c00202d6:	68 74 18 02 c0       	push   0xc0021874
c00202db:	e8 46 e9 fe ff       	call   c000ec26 <KePanic(char const*)>
c00202e0:	83 c4 10             	add    esp,0x10
c00202e3:	eb 0f                	jmp    c00202f4 <LinkedList<UnixFile>::removeFirst()+0x8c>
c00202e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00202e9:	8b 00                	mov    eax,DWORD PTR [eax]
c00202eb:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c00202ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00202f2:	89 10                	mov    DWORD PTR [eax],edx
c00202f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00202f8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00202fb:	8d 50 ff             	lea    edx,[eax-0x1]
c00202fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020302:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0020305:	83 c4 0c             	add    esp,0xc
c0020308:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c002030a <LinkedList<UnixFile>::getNext(UnixFile*)>:
c002030a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002030e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0020311:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0020314 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0020314:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020318:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002031b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c002031c <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c002031c:	90                   	nop
c002031d:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0020320 <ThreadControlBlock::ThreadControlBlock()>:
c0020320:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020324:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c002032b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002032f:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0020336:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002033a:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0020341:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020345:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c002034c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020350:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c0020357:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002035b:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c002035f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020363:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c0020367:	90                   	nop
c0020368:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c002036c <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c002036c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020370:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0020376:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002037a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0020381:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020385:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002038c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020390:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0020396:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002039a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00203a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00203a5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00203ac:	90                   	nop
c00203ad:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c00203ae <CPU::~CPU()>:
c00203ae:	83 ec 0c             	sub    esp,0xc
c00203b1:	ba c8 2f 02 c0       	mov    edx,0xc0022fc8
c00203b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00203ba:	89 10                	mov    DWORD PTR [eax],edx
c00203bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00203c0:	83 ec 0c             	sub    esp,0xc
c00203c3:	50                   	push   eax
c00203c4:	e8 7b 8b fe ff       	call   c0008f44 <Device::~Device()>
c00203c9:	83 c4 10             	add    esp,0x10
c00203cc:	90                   	nop
c00203cd:	83 c4 0c             	add    esp,0xc
c00203d0:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c00203d2 <CPU::~CPU()>:
c00203d2:	83 ec 0c             	sub    esp,0xc
c00203d5:	83 ec 0c             	sub    esp,0xc
c00203d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00203dc:	e8 cd ff ff ff       	call   c00203ae <CPU::~CPU()>
c00203e1:	83 c4 10             	add    esp,0x10
c00203e4:	83 ec 08             	sub    esp,0x8
c00203e7:	68 78 11 00 00       	push   0x1178
c00203ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00203f0:	e8 6e c2 fe ff       	call   c000c663 <operator delete(void*, unsigned long)>
c00203f5:	83 c4 10             	add    esp,0x10
c00203f8:	83 c4 0c             	add    esp,0xc
c00203fb:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c00203fc <PCI::~PCI()>:
c00203fc:	83 ec 0c             	sub    esp,0xc
c00203ff:	ba 2c 35 02 c0       	mov    edx,0xc002352c
c0020404:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020408:	89 10                	mov    DWORD PTR [eax],edx
c002040a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002040e:	83 ec 0c             	sub    esp,0xc
c0020411:	50                   	push   eax
c0020412:	e8 09 85 fe ff       	call   c0008920 <Bus::~Bus()>
c0020417:	83 c4 10             	add    esp,0x10
c002041a:	90                   	nop
c002041b:	83 c4 0c             	add    esp,0xc
c002041e:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c0020420 <PCI::~PCI()>:
c0020420:	83 ec 0c             	sub    esp,0xc
c0020423:	83 ec 0c             	sub    esp,0xc
c0020426:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002042a:	e8 cd ff ff ff       	call   c00203fc <PCI::~PCI()>
c002042f:	83 c4 10             	add    esp,0x10
c0020432:	83 ec 08             	sub    esp,0x8
c0020435:	68 5c 01 00 00       	push   0x15c
c002043a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002043e:	e8 20 c2 fe ff       	call   c000c663 <operator delete(void*, unsigned long)>
c0020443:	83 c4 10             	add    esp,0x10
c0020446:	83 c4 0c             	add    esp,0xc
c0020449:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c002044a <IDE::~IDE()>:
c002044a:	83 ec 0c             	sub    esp,0xc
c002044d:	ba 64 36 02 c0       	mov    edx,0xc0023664
c0020452:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020456:	89 10                	mov    DWORD PTR [eax],edx
c0020458:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002045c:	83 ec 0c             	sub    esp,0xc
c002045f:	50                   	push   eax
c0020460:	e8 6f 8f fe ff       	call   c00093d4 <HardDiskController::~HardDiskController()>
c0020465:	83 c4 10             	add    esp,0x10
c0020468:	90                   	nop
c0020469:	83 c4 0c             	add    esp,0xc
c002046c:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c002046e <IDE::~IDE()>:
c002046e:	83 ec 0c             	sub    esp,0xc
c0020471:	83 ec 0c             	sub    esp,0xc
c0020474:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020478:	e8 cd ff ff ff       	call   c002044a <IDE::~IDE()>
c002047d:	83 c4 10             	add    esp,0x10
c0020480:	83 ec 08             	sub    esp,0x8
c0020483:	68 70 02 00 00       	push   0x270
c0020488:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002048c:	e8 d2 c1 fe ff       	call   c000c663 <operator delete(void*, unsigned long)>
c0020491:	83 c4 10             	add    esp,0x10
c0020494:	83 c4 0c             	add    esp,0xc
c0020497:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0020498 <SATABus::~SATABus()>:
c0020498:	83 ec 0c             	sub    esp,0xc
c002049b:	ba b4 36 02 c0       	mov    edx,0xc00236b4
c00204a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00204a4:	89 10                	mov    DWORD PTR [eax],edx
c00204a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00204aa:	83 ec 0c             	sub    esp,0xc
c00204ad:	50                   	push   eax
c00204ae:	e8 21 8f fe ff       	call   c00093d4 <HardDiskController::~HardDiskController()>
c00204b3:	83 c4 10             	add    esp,0x10
c00204b6:	90                   	nop
c00204b7:	83 c4 0c             	add    esp,0xc
c00204ba:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c00204bc <SATABus::~SATABus()>:
c00204bc:	83 ec 0c             	sub    esp,0xc
c00204bf:	83 ec 0c             	sub    esp,0xc
c00204c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00204c6:	e8 cd ff ff ff       	call   c0020498 <SATABus::~SATABus()>
c00204cb:	83 c4 10             	add    esp,0x10
c00204ce:	83 ec 08             	sub    esp,0x8
c00204d1:	68 64 01 00 00       	push   0x164
c00204d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00204da:	e8 84 c1 fe ff       	call   c000c663 <operator delete(void*, unsigned long)>
c00204df:	83 c4 10             	add    esp,0x10
c00204e2:	83 c4 0c             	add    esp,0xc
c00204e5:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c00204e6 <ATA::~ATA()>:
c00204e6:	83 ec 0c             	sub    esp,0xc
c00204e9:	ba f4 36 02 c0       	mov    edx,0xc00236f4
c00204ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00204f2:	89 10                	mov    DWORD PTR [eax],edx
c00204f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00204f8:	83 ec 0c             	sub    esp,0xc
c00204fb:	50                   	push   eax
c00204fc:	e8 b5 8f fe ff       	call   c00094b6 <PhysicalDisk::~PhysicalDisk()>
c0020501:	83 c4 10             	add    esp,0x10
c0020504:	90                   	nop
c0020505:	83 c4 0c             	add    esp,0xc
c0020508:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c002050a <ATA::~ATA()>:
c002050a:	83 ec 0c             	sub    esp,0xc
c002050d:	83 ec 0c             	sub    esp,0xc
c0020510:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020514:	e8 cd ff ff ff       	call   c00204e6 <ATA::~ATA()>
c0020519:	83 c4 10             	add    esp,0x10
c002051c:	83 ec 08             	sub    esp,0x8
c002051f:	68 7c 01 00 00       	push   0x17c
c0020524:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020528:	e8 36 c1 fe ff       	call   c000c663 <operator delete(void*, unsigned long)>
c002052d:	83 c4 10             	add    esp,0x10
c0020530:	83 c4 0c             	add    esp,0xc
c0020533:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0020534 <ATAPI::~ATAPI()>:
c0020534:	83 ec 0c             	sub    esp,0xc
c0020537:	ba 3c 37 02 c0       	mov    edx,0xc002373c
c002053c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020540:	89 10                	mov    DWORD PTR [eax],edx
c0020542:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020546:	83 ec 0c             	sub    esp,0xc
c0020549:	50                   	push   eax
c002054a:	e8 67 8f fe ff       	call   c00094b6 <PhysicalDisk::~PhysicalDisk()>
c002054f:	83 c4 10             	add    esp,0x10
c0020552:	90                   	nop
c0020553:	83 c4 0c             	add    esp,0xc
c0020556:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0020558 <ATAPI::~ATAPI()>:
c0020558:	83 ec 0c             	sub    esp,0xc
c002055b:	83 ec 0c             	sub    esp,0xc
c002055e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020562:	e8 cd ff ff ff       	call   c0020534 <ATAPI::~ATAPI()>
c0020567:	83 c4 10             	add    esp,0x10
c002056a:	83 ec 08             	sub    esp,0x8
c002056d:	68 84 01 00 00       	push   0x184
c0020572:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020576:	e8 e8 c0 fe ff       	call   c000c663 <operator delete(void*, unsigned long)>
c002057b:	83 c4 10             	add    esp,0x10
c002057e:	83 c4 0c             	add    esp,0xc
c0020581:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0020582 <SATA::~SATA()>:
c0020582:	83 ec 0c             	sub    esp,0xc
c0020585:	ba fc 37 02 c0       	mov    edx,0xc00237fc
c002058a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002058e:	89 10                	mov    DWORD PTR [eax],edx
c0020590:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020594:	83 ec 0c             	sub    esp,0xc
c0020597:	50                   	push   eax
c0020598:	e8 19 8f fe ff       	call   c00094b6 <PhysicalDisk::~PhysicalDisk()>
c002059d:	83 c4 10             	add    esp,0x10
c00205a0:	90                   	nop
c00205a1:	83 c4 0c             	add    esp,0xc
c00205a4:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c00205a6 <SATA::~SATA()>:
c00205a6:	83 ec 0c             	sub    esp,0xc
c00205a9:	83 ec 0c             	sub    esp,0xc
c00205ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00205b0:	e8 cd ff ff ff       	call   c0020582 <SATA::~SATA()>
c00205b5:	83 c4 10             	add    esp,0x10
c00205b8:	83 ec 08             	sub    esp,0x8
c00205bb:	68 7c 01 00 00       	push   0x17c
c00205c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00205c4:	e8 9a c0 fe ff       	call   c000c663 <operator delete(void*, unsigned long)>
c00205c9:	83 c4 10             	add    esp,0x10
c00205cc:	83 c4 0c             	add    esp,0xc
c00205cf:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c00205d0 <SATAPI::~SATAPI()>:
c00205d0:	83 ec 0c             	sub    esp,0xc
c00205d3:	ba 20 39 02 c0       	mov    edx,0xc0023920
c00205d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00205dc:	89 10                	mov    DWORD PTR [eax],edx
c00205de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00205e2:	83 ec 0c             	sub    esp,0xc
c00205e5:	50                   	push   eax
c00205e6:	e8 cb 8e fe ff       	call   c00094b6 <PhysicalDisk::~PhysicalDisk()>
c00205eb:	83 c4 10             	add    esp,0x10
c00205ee:	90                   	nop
c00205ef:	83 c4 0c             	add    esp,0xc
c00205f2:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c00205f4 <SATAPI::~SATAPI()>:
c00205f4:	83 ec 0c             	sub    esp,0xc
c00205f7:	83 ec 0c             	sub    esp,0xc
c00205fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00205fe:	e8 cd ff ff ff       	call   c00205d0 <SATAPI::~SATAPI()>
c0020603:	83 c4 10             	add    esp,0x10
c0020606:	83 ec 08             	sub    esp,0x8
c0020609:	68 84 01 00 00       	push   0x184
c002060e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020612:	e8 4c c0 fe ff       	call   c000c663 <operator delete(void*, unsigned long)>
c0020617:	83 c4 10             	add    esp,0x10
c002061a:	83 c4 0c             	add    esp,0xc
c002061d:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c002061e <IOAPIC::~IOAPIC()>:
c002061e:	83 ec 0c             	sub    esp,0xc
c0020621:	ba 80 39 02 c0       	mov    edx,0xc0023980
c0020626:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002062a:	89 10                	mov    DWORD PTR [eax],edx
c002062c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020630:	83 ec 0c             	sub    esp,0xc
c0020633:	50                   	push   eax
c0020634:	e8 0b 89 fe ff       	call   c0008f44 <Device::~Device()>
c0020639:	83 c4 10             	add    esp,0x10
c002063c:	90                   	nop
c002063d:	83 c4 0c             	add    esp,0xc
c0020640:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0020642 <IOAPIC::~IOAPIC()>:
c0020642:	83 ec 0c             	sub    esp,0xc
c0020645:	83 ec 0c             	sub    esp,0xc
c0020648:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002064c:	e8 cd ff ff ff       	call   c002061e <IOAPIC::~IOAPIC()>
c0020651:	83 c4 10             	add    esp,0x10
c0020654:	83 ec 08             	sub    esp,0x8
c0020657:	68 68 01 00 00       	push   0x168
c002065c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020660:	e8 fe bf fe ff       	call   c000c663 <operator delete(void*, unsigned long)>
c0020665:	83 c4 10             	add    esp,0x10
c0020668:	83 c4 0c             	add    esp,0xc
c002066b:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c002066c <APICTimer::~APICTimer()>:
c002066c:	83 ec 0c             	sub    esp,0xc
c002066f:	ba c8 39 02 c0       	mov    edx,0xc00239c8
c0020674:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020678:	89 10                	mov    DWORD PTR [eax],edx
c002067a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002067e:	83 ec 0c             	sub    esp,0xc
c0020681:	50                   	push   eax
c0020682:	e8 45 a0 fe ff       	call   c000a6cc <Timer::~Timer()>
c0020687:	83 c4 10             	add    esp,0x10
c002068a:	90                   	nop
c002068b:	83 c4 0c             	add    esp,0xc
c002068e:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0020690 <APICTimer::~APICTimer()>:
c0020690:	83 ec 0c             	sub    esp,0xc
c0020693:	83 ec 0c             	sub    esp,0xc
c0020696:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002069a:	e8 cd ff ff ff       	call   c002066c <APICTimer::~APICTimer()>
c002069f:	83 c4 10             	add    esp,0x10
c00206a2:	83 ec 08             	sub    esp,0x8
c00206a5:	68 60 01 00 00       	push   0x160
c00206aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00206ae:	e8 b0 bf fe ff       	call   c000c663 <operator delete(void*, unsigned long)>
c00206b3:	83 c4 10             	add    esp,0x10
c00206b6:	83 c4 0c             	add    esp,0xc
c00206b9:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c00206bc <PIT::~PIT()>:
c00206bc:	83 ec 0c             	sub    esp,0xc
c00206bf:	ba 18 3a 02 c0       	mov    edx,0xc0023a18
c00206c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00206c8:	89 10                	mov    DWORD PTR [eax],edx
c00206ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00206ce:	83 ec 0c             	sub    esp,0xc
c00206d1:	50                   	push   eax
c00206d2:	e8 f5 9f fe ff       	call   c000a6cc <Timer::~Timer()>
c00206d7:	83 c4 10             	add    esp,0x10
c00206da:	90                   	nop
c00206db:	83 c4 0c             	add    esp,0xc
c00206de:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c00206e0 <PIT::~PIT()>:
c00206e0:	83 ec 0c             	sub    esp,0xc
c00206e3:	83 ec 0c             	sub    esp,0xc
c00206e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00206ea:	e8 cd ff ff ff       	call   c00206bc <PIT::~PIT()>
c00206ef:	83 c4 10             	add    esp,0x10
c00206f2:	83 ec 08             	sub    esp,0x8
c00206f5:	68 5c 01 00 00       	push   0x15c
c00206fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00206fe:	e8 60 bf fe ff       	call   c000c663 <operator delete(void*, unsigned long)>
c0020703:	83 c4 10             	add    esp,0x10
c0020706:	83 c4 0c             	add    esp,0xc
c0020709:	c3                   	ret    

Disassembly of section userkernel:

c0025000 <KiDefaultSignalHandlerAbort(int)>:
c0025000:	57                   	push   edi
c0025001:	b9 07 00 00 00       	mov    ecx,0x7
c0025006:	56                   	push   esi
c0025007:	be fb 21 02 c0       	mov    esi,0xc00221fb
c002500c:	83 ec 24             	sub    esp,0x24
c002500f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025013:	fc                   	cld    
c0025014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0025016:	8d 44 24 04          	lea    eax,[esp+0x4]
c002501a:	50                   	push   eax
c002501b:	6a 00                	push   0x0
c002501d:	6a 38                	push   0x38
c002501f:	6a 01                	push   0x1
c0025021:	e8 2c 00 00 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0025026:	83 c4 34             	add    esp,0x34
c0025029:	5e                   	pop    esi
c002502a:	5f                   	pop    edi
c002502b:	c3                   	ret    

c002502c <KiDefaultSignalHandlerTerminate(int)>:
c002502c:	57                   	push   edi
c002502d:	b9 08 00 00 00       	mov    ecx,0x8
c0025032:	56                   	push   esi
c0025033:	be 17 22 02 c0       	mov    esi,0xc0022217
c0025038:	83 ec 24             	sub    esp,0x24
c002503b:	89 e7                	mov    edi,esp
c002503d:	fc                   	cld    
c002503e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0025040:	54                   	push   esp
c0025041:	6a 00                	push   0x0
c0025043:	6a 37                	push   0x37
c0025045:	6a 01                	push   0x1
c0025047:	e8 06 00 00 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c002504c:	83 c4 34             	add    esp,0x34
c002504f:	5e                   	pop    esi
c0025050:	5f                   	pop    edi
c0025051:	c3                   	ret    

c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0025052:	53                   	push   ebx
c0025053:	83 ec 10             	sub    esp,0x10
c0025056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002505a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c002505e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0025062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0025066:	cd 60                	int    0x60
c0025068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002506c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0025070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0025074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0025078:	83 c4 10             	add    esp,0x10
c002507b:	5b                   	pop    ebx
c002507c:	c3                   	ret    

Disassembly of section align_previous:

c0026000 <DO_NOT_DELETE()>:
c0026000:	c3                   	ret    
