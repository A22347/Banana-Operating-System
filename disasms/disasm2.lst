
kernel/KRNLP2.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 1f 04 01 00       	call   c001043f <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 00 00 03 c0       	mov    eax,0xc0030000
c0000025:	3d 00 00 03 c0       	cmp    eax,0xc0030000
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 00 00 03 c0       	push   0xc0030000
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 00 00 03 c0       	mov    eax,0xc0030000
c0000051:	2d 00 00 03 c0       	sub    eax,0xc0030000
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 00 00 03 c0       	push   0xc0030000
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d c0 20 03 c0 00 	cmp    BYTE PTR ds:0xc00320c0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb 44 99 02 c0       	mov    ebx,0xc0029944
c0000097:	81 eb 40 99 02 c0    	sub    ebx,0xc0029940
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be 40 99 02 c0       	mov    esi,0xc0029940
c00000a6:	a1 c4 20 03 c0       	mov    eax,ds:0xc00320c4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 c4 20 03 c0       	mov    ds:0xc00320c4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 c4 20 03 c0       	mov    eax,ds:0xc00320c4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 00 00 03 c0       	push   0xc0030000
c00000d8:	e8 23 ff ff 3f       	call   0 <SIG_STATE_STRUCT>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 c0 20 03 c0 01 	mov    BYTE PTR ds:0xc00320c0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 c8 20 03 c0       	push   0xc00320c8
c0000108:	68 00 00 03 c0       	push   0xc0030000
c000010d:	e8 ee fe ff 3f       	call   0 <SIG_STATE_STRUCT>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000297:	0f 20 d9             	mov    ecx,cr3
c000029a:	39 c8                	cmp    eax,ecx
c000029c:	74 03                	je     c00002a1 <commonThreadSwitch.doneVAS>
c000029e:	0f 22 d8             	mov    cr3,eax

c00002a1 <commonThreadSwitch.doneVAS>:
c00002a1:	85 d2                	test   edx,edx
c00002a3:	75 11                	jne    c00002b6 <commonThreadSwitch.firstTime>
c00002a5:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a8:	e8 b3 65 01 00       	call   c0016860 <changeTSS>
c00002ad:	5d                   	pop    ebp
c00002ae:	5f                   	pop    edi
c00002af:	5e                   	pop    esi
c00002b0:	5a                   	pop    edx
c00002b1:	59                   	pop    ecx
c00002b2:	5b                   	pop    ebx
c00002b3:	58                   	pop    eax
c00002b4:	9d                   	popf   
c00002b5:	c3                   	ret    

c00002b6 <commonThreadSwitch.firstTime>:
c00002b6:	fa                   	cli    
c00002b7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002ba:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002bf:	60                   	pusha  
c00002c0:	e8 f1 49 01 00       	call   c0014cb6 <mapVASFirstTime>
c00002c5:	61                   	popa   
c00002c6:	89 c4                	mov    esp,eax
c00002c8:	56                   	push   esi
c00002c9:	52                   	push   edx
c00002ca:	e8 91 65 01 00       	call   c0016860 <changeTSS>
c00002cf:	5a                   	pop    edx
c00002d0:	5e                   	pop    esi
c00002d1:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	59                   	pop    ecx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	81 c4 04 00 00 00    	add    esp,0x4
c00002e5:	6a 02                	push   0x2
c00002e7:	9d                   	popf   
c00002e8:	52                   	push   edx
c00002e9:	e8 f2 6a 01 00       	call   c0016de0 <taskStartupFunction>
c00002ee:	5a                   	pop    edx
c00002ef:	50                   	push   eax
c00002f0:	ff d2                	call   edx
c00002f2:	e8 55 70 01 00       	call   c001734c <taskReturned>
c00002f7:	e9 fb ff ff ff       	jmp    c00002f7 <commonThreadSwitch.firstTime+0x41>

c00002fc <asmQuickAcquireLock>:
c00002fc:	55                   	push   ebp
c00002fd:	89 e5                	mov    ebp,esp
c00002ff:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000302 <asmQuickAcquireLock.retry>:
c0000302:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000307:	72 02                	jb     c000030b <asmQuickAcquireLock.spin_with_pause>
c0000309:	fa                   	cli    
c000030a:	c3                   	ret    

c000030b <asmQuickAcquireLock.spin_with_pause>:
c000030b:	f3 90                	pause  
c000030d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000313:	75 f6                	jne    c000030b <asmQuickAcquireLock.spin_with_pause>
c0000315:	e9 e8 ff ff ff       	jmp    c0000302 <asmQuickAcquireLock.retry>

c000031a <asmQuickReleaseLock>:
c000031a:	55                   	push   ebp
c000031b:	89 e5                	mov    ebp,esp
c000031d:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000324:	5d                   	pop    ebp
c0000325:	c3                   	ret    

c0000326 <asmAcquireLock>:
c0000326:	55                   	push   ebp
c0000327:	89 e5                	mov    ebp,esp
c0000329:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032c <asmAcquireLock.retry>:
c000032c:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000331:	72 05                	jb     c0000338 <asmAcquireLock.spin_with_pause>
c0000333:	9c                   	pushf  
c0000334:	58                   	pop    eax
c0000335:	fa                   	cli    
c0000336:	5d                   	pop    ebp
c0000337:	c3                   	ret    

c0000338 <asmAcquireLock.spin_with_pause>:
c0000338:	f3 90                	pause  
c000033a:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000340:	75 f6                	jne    c0000338 <asmAcquireLock.spin_with_pause>
c0000342:	e9 e5 ff ff ff       	jmp    c000032c <asmAcquireLock.retry>

c0000347 <asmReleaseLock>:
c0000347:	55                   	push   ebp
c0000348:	89 e5                	mov    ebp,esp
c000034a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000034d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000350:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000356:	52                   	push   edx
c0000357:	9d                   	popf   
c0000358:	5d                   	pop    ebp
c0000359:	c3                   	ret    

c000035a <loadGDT>:
c000035a:	0f 01 15 18 61 03 c0 	lgdtd  ds:0xc0036118
c0000361:	66 b8 10 00          	mov    ax,0x10
c0000365:	66 8e d8             	mov    ds,ax
c0000368:	66 8e c0             	mov    es,ax
c000036b:	66 8e e0             	mov    fs,ax
c000036e:	66 8e e8             	mov    gs,ax
c0000371:	66 8e d0             	mov    ss,ax
c0000374:	e9 00 00 00 00       	jmp    c0000379 <flush2>

c0000379 <flush2>:
c0000379:	c3                   	ret    

c000037a <memcpy>:
c000037a:	e9 ca f5 00 00       	jmp    c000f949 <__not_memcpy>
c000037f:	90                   	nop

c0000380 <memcmp>:
c0000380:	56                   	push   esi
c0000381:	53                   	push   ebx
c0000382:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000038a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000038e:	85 f6                	test   esi,esi
c0000390:	74 21                	je     c00003b3 <memcmp+0x33>
c0000392:	8a 08                	mov    cl,BYTE PTR [eax]
c0000394:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000397:	38 d9                	cmp    cl,bl
c0000399:	75 25                	jne    c00003c0 <memcmp+0x40>
c000039b:	01 c6                	add    esi,eax
c000039d:	eb 0a                	jmp    c00003a9 <memcmp+0x29>
c000039f:	90                   	nop
c00003a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00003a5:	38 cb                	cmp    bl,cl
c00003a7:	75 17                	jne    c00003c0 <memcmp+0x40>
c00003a9:	83 c0 01             	add    eax,0x1
c00003ac:	83 c2 01             	add    edx,0x1
c00003af:	39 f0                	cmp    eax,esi
c00003b1:	75 ed                	jne    c00003a0 <memcmp+0x20>
c00003b3:	5b                   	pop    ebx
c00003b4:	31 c0                	xor    eax,eax
c00003b6:	5e                   	pop    esi
c00003b7:	c3                   	ret    
c00003b8:	90                   	nop
c00003b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00003c0:	0f b6 c1             	movzx  eax,cl
c00003c3:	29 d8                	sub    eax,ebx
c00003c5:	5b                   	pop    ebx
c00003c6:	5e                   	pop    esi
c00003c7:	c3                   	ret    
c00003c8:	90                   	nop
c00003c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c00003d0 <memmove>:
c00003d0:	55                   	push   ebp
c00003d1:	57                   	push   edi
c00003d2:	56                   	push   esi
c00003d3:	53                   	push   ebx
c00003d4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003d8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003e0:	39 dd                	cmp    ebp,ebx
c00003e2:	0f 83 a8 00 00 00    	jae    c0000490 <memmove+0xc0>
c00003e8:	85 d2                	test   edx,edx
c00003ea:	0f 84 8c 00 00 00    	je     c000047c <memmove+0xac>
c00003f0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00003f3:	8d 75 04             	lea    esi,[ebp+0x4]
c00003f6:	39 cd                	cmp    ebp,ecx
c00003f8:	0f 93 c1             	setae  cl
c00003fb:	39 f3                	cmp    ebx,esi
c00003fd:	0f 93 c0             	setae  al
c0000400:	89 c6                	mov    esi,eax
c0000402:	31 c0                	xor    eax,eax
c0000404:	09 f1                	or     ecx,esi
c0000406:	8d 72 ff             	lea    esi,[edx-0x1]
c0000409:	83 fe 06             	cmp    esi,0x6
c000040c:	0f 97 c0             	seta   al
c000040f:	89 c6                	mov    esi,eax
c0000411:	85 ce                	test   esi,ecx
c0000413:	0f 84 a7 00 00 00    	je     c00004c0 <memmove+0xf0>
c0000419:	89 e9                	mov    ecx,ebp
c000041b:	09 d9                	or     ecx,ebx
c000041d:	80 e1 03             	and    cl,0x3
c0000420:	0f 85 9a 00 00 00    	jne    c00004c0 <memmove+0xf0>
c0000426:	89 d7                	mov    edi,edx
c0000428:	89 d9                	mov    ecx,ebx
c000042a:	83 e7 fc             	and    edi,0xfffffffc
c000042d:	89 ee                	mov    esi,ebp
c000042f:	01 df                	add    edi,ebx
c0000431:	eb 0d                	jmp    c0000440 <memmove+0x70>
c0000433:	90                   	nop
c0000434:	90                   	nop
c0000435:	90                   	nop
c0000436:	90                   	nop
c0000437:	90                   	nop
c0000438:	90                   	nop
c0000439:	90                   	nop
c000043a:	90                   	nop
c000043b:	90                   	nop
c000043c:	90                   	nop
c000043d:	90                   	nop
c000043e:	90                   	nop
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c1 04             	add    ecx,0x4
c0000445:	83 c6 04             	add    esi,0x4
c0000448:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x70>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0xac>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0xac>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0xac>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0xac>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0xac>
c0000496:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0000499:	83 eb 01             	sub    ebx,0x1
c000049c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	83 ea 01             	sub    edx,0x1
c00004a9:	75 f5                	jne    c00004a0 <memmove+0xd0>
c00004ab:	5b                   	pop    ebx
c00004ac:	89 e8                	mov    eax,ebp
c00004ae:	5e                   	pop    esi
c00004af:	5f                   	pop    edi
c00004b0:	5d                   	pop    ebp
c00004b1:	c3                   	ret    
c00004b2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00004b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00004c0:	01 ea                	add    edx,ebp
c00004c2:	89 e9                	mov    ecx,ebp
c00004c4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ca:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004d0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004d2:	83 c1 01             	add    ecx,0x1
c00004d5:	83 c3 01             	add    ebx,0x1
c00004d8:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004db:	39 d1                	cmp    ecx,edx
c00004dd:	75 f1                	jne    c00004d0 <memmove+0x100>
c00004df:	eb 9b                	jmp    c000047c <memmove+0xac>
c00004e1:	eb 0d                	jmp    c00004f0 <memset>
c00004e3:	90                   	nop
c00004e4:	90                   	nop
c00004e5:	90                   	nop
c00004e6:	90                   	nop
c00004e7:	90                   	nop
c00004e8:	90                   	nop
c00004e9:	90                   	nop
c00004ea:	90                   	nop
c00004eb:	90                   	nop
c00004ec:	90                   	nop
c00004ed:	90                   	nop
c00004ee:	90                   	nop
c00004ef:	90                   	nop

c00004f0 <memset>:
c00004f0:	57                   	push   edi
c00004f1:	56                   	push   esi
c00004f2:	53                   	push   ebx
c00004f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00004f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00004fb:	85 d2                	test   edx,edx
c00004fd:	74 1d                	je     c000051c <memset+0x2c>
c00004ff:	83 fa 08             	cmp    edx,0x8
c0000502:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0000507:	89 f7                	mov    edi,esi
c0000509:	73 25                	jae    c0000530 <memset+0x40>
c000050b:	83 e2 07             	and    edx,0x7
c000050e:	74 0c                	je     c000051c <memset+0x2c>
c0000510:	31 c0                	xor    eax,eax
c0000512:	88 1c 07             	mov    BYTE PTR [edi+eax*1],bl
c0000515:	83 c0 01             	add    eax,0x1
c0000518:	39 d0                	cmp    eax,edx
c000051a:	72 f6                	jb     c0000512 <memset+0x22>
c000051c:	5b                   	pop    ebx
c000051d:	89 f0                	mov    eax,esi
c000051f:	5e                   	pop    esi
c0000520:	5f                   	pop    edi
c0000521:	c3                   	ret    
c0000522:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000529:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000530:	0f b6 c3             	movzx  eax,bl
c0000533:	88 c4                	mov    ah,al
c0000535:	89 c1                	mov    ecx,eax
c0000537:	c1 e1 10             	shl    ecx,0x10
c000053a:	09 c8                	or     eax,ecx
c000053c:	f7 c6 01 00 00 00    	test   esi,0x1
c0000542:	75 1d                	jne    c0000561 <memset+0x71>
c0000544:	f7 c7 02 00 00 00    	test   edi,0x2
c000054a:	75 1f                	jne    c000056b <memset+0x7b>
c000054c:	f7 c7 04 00 00 00    	test   edi,0x4
c0000552:	75 22                	jne    c0000576 <memset+0x86>
c0000554:	89 d1                	mov    ecx,edx
c0000556:	c1 e9 02             	shr    ecx,0x2
c0000559:	fc                   	cld    
c000055a:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c000055c:	83 e2 03             	and    edx,0x3
c000055f:	eb aa                	jmp    c000050b <memset+0x1b>
c0000561:	88 06                	mov    BYTE PTR [esi],al
c0000563:	8d 7e 01             	lea    edi,[esi+0x1]
c0000566:	83 ea 01             	sub    edx,0x1
c0000569:	eb d9                	jmp    c0000544 <memset+0x54>
c000056b:	66 89 07             	mov    WORD PTR [edi],ax
c000056e:	83 ea 02             	sub    edx,0x2
c0000571:	83 c7 02             	add    edi,0x2
c0000574:	eb d6                	jmp    c000054c <memset+0x5c>
c0000576:	89 07                	mov    DWORD PTR [edi],eax
c0000578:	83 ea 04             	sub    edx,0x4
c000057b:	83 c7 04             	add    edi,0x4
c000057e:	eb d4                	jmp    c0000554 <memset+0x64>

c0000580 <strlen>:
c0000580:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000584:	31 c0                	xor    eax,eax
c0000586:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000589:	74 15                	je     c00005a0 <strlen+0x20>
c000058b:	90                   	nop
c000058c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000590:	83 c0 01             	add    eax,0x1
c0000593:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000597:	75 f7                	jne    c0000590 <strlen+0x10>
c0000599:	c3                   	ret    
c000059a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00005a0:	c3                   	ret    
c00005a1:	eb 0d                	jmp    c00005b0 <strpbrk>
c00005a3:	90                   	nop
c00005a4:	90                   	nop
c00005a5:	90                   	nop
c00005a6:	90                   	nop
c00005a7:	90                   	nop
c00005a8:	90                   	nop
c00005a9:	90                   	nop
c00005aa:	90                   	nop
c00005ab:	90                   	nop
c00005ac:	90                   	nop
c00005ad:	90                   	nop
c00005ae:	90                   	nop
c00005af:	90                   	nop

c00005b0 <strpbrk>:
c00005b0:	57                   	push   edi
c00005b1:	56                   	push   esi
c00005b2:	53                   	push   ebx
c00005b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00005b7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00005bb:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005be:	85 db                	test   ebx,ebx
c00005c0:	74 36                	je     c00005f8 <strpbrk+0x48>
c00005c2:	0f be 37             	movsx  esi,BYTE PTR [edi]
c00005c5:	85 f6                	test   esi,esi
c00005c7:	74 25                	je     c00005ee <strpbrk+0x3e>
c00005c9:	39 de                	cmp    esi,ebx
c00005cb:	74 2d                	je     c00005fa <strpbrk+0x4a>
c00005cd:	89 fa                	mov    edx,edi
c00005cf:	eb 13                	jmp    c00005e4 <strpbrk+0x34>
c00005d1:	eb 0d                	jmp    c00005e0 <strpbrk+0x30>
c00005d3:	90                   	nop
c00005d4:	90                   	nop
c00005d5:	90                   	nop
c00005d6:	90                   	nop
c00005d7:	90                   	nop
c00005d8:	90                   	nop
c00005d9:	90                   	nop
c00005da:	90                   	nop
c00005db:	90                   	nop
c00005dc:	90                   	nop
c00005dd:	90                   	nop
c00005de:	90                   	nop
c00005df:	90                   	nop
c00005e0:	39 d9                	cmp    ecx,ebx
c00005e2:	74 16                	je     c00005fa <strpbrk+0x4a>
c00005e4:	83 c2 01             	add    edx,0x1
c00005e7:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c00005ea:	85 c9                	test   ecx,ecx
c00005ec:	75 f2                	jne    c00005e0 <strpbrk+0x30>
c00005ee:	83 c0 01             	add    eax,0x1
c00005f1:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005f4:	85 db                	test   ebx,ebx
c00005f6:	75 cd                	jne    c00005c5 <strpbrk+0x15>
c00005f8:	31 c0                	xor    eax,eax
c00005fa:	5b                   	pop    ebx
c00005fb:	5e                   	pop    esi
c00005fc:	5f                   	pop    edi
c00005fd:	c3                   	ret    
c00005fe:	66 90                	xchg   ax,ax

c0000600 <strtok>:
c0000600:	56                   	push   esi
c0000601:	53                   	push   ebx
c0000602:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0000606:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000060a:	85 db                	test   ebx,ebx
c000060c:	75 08                	jne    c0000616 <strtok+0x16>
c000060e:	eb 30                	jmp    c0000640 <strtok+0x40>
c0000610:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000613:	83 c3 01             	add    ebx,0x1
c0000616:	56                   	push   esi
c0000617:	53                   	push   ebx
c0000618:	e8 93 ff ff ff       	call   c00005b0 <strpbrk>
c000061d:	5a                   	pop    edx
c000061e:	59                   	pop    ecx
c000061f:	a3 e0 20 03 c0       	mov    ds:0xc00320e0,eax
c0000624:	39 d8                	cmp    eax,ebx
c0000626:	74 e8                	je     c0000610 <strtok+0x10>
c0000628:	85 c0                	test   eax,eax
c000062a:	74 1e                	je     c000064a <strtok+0x4a>
c000062c:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000062f:	8d 50 01             	lea    edx,[eax+0x1]
c0000632:	89 d8                	mov    eax,ebx
c0000634:	5b                   	pop    ebx
c0000635:	89 15 e0 20 03 c0    	mov    DWORD PTR ds:0xc00320e0,edx
c000063b:	5e                   	pop    esi
c000063c:	c3                   	ret    
c000063d:	8d 76 00             	lea    esi,[esi+0x0]
c0000640:	8b 1d e0 20 03 c0    	mov    ebx,DWORD PTR ds:0xc00320e0
c0000646:	85 db                	test   ebx,ebx
c0000648:	75 cc                	jne    c0000616 <strtok+0x16>
c000064a:	5b                   	pop    ebx
c000064b:	31 c0                	xor    eax,eax
c000064d:	5e                   	pop    esi
c000064e:	c3                   	ret    
c000064f:	90                   	nop

c0000650 <strcpy>:
c0000650:	53                   	push   ebx
c0000651:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000655:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000659:	8a 11                	mov    dl,BYTE PTR [ecx]
c000065b:	89 c3                	mov    ebx,eax
c000065d:	84 d2                	test   dl,dl
c000065f:	74 1d                	je     c000067e <strcpy+0x2e>
c0000661:	eb 0d                	jmp    c0000670 <strcpy+0x20>
c0000663:	90                   	nop
c0000664:	90                   	nop
c0000665:	90                   	nop
c0000666:	90                   	nop
c0000667:	90                   	nop
c0000668:	90                   	nop
c0000669:	90                   	nop
c000066a:	90                   	nop
c000066b:	90                   	nop
c000066c:	90                   	nop
c000066d:	90                   	nop
c000066e:	90                   	nop
c000066f:	90                   	nop
c0000670:	88 13                	mov    BYTE PTR [ebx],dl
c0000672:	83 c1 01             	add    ecx,0x1
c0000675:	83 c3 01             	add    ebx,0x1
c0000678:	8a 11                	mov    dl,BYTE PTR [ecx]
c000067a:	84 d2                	test   dl,dl
c000067c:	75 f2                	jne    c0000670 <strcpy+0x20>
c000067e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000681:	5b                   	pop    ebx
c0000682:	c3                   	ret    
c0000683:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000689:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000690 <strncpy>:
c0000690:	55                   	push   ebp
c0000691:	57                   	push   edi
c0000692:	56                   	push   esi
c0000693:	53                   	push   ebx
c0000694:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000698:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000069c:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c00006a0:	85 c9                	test   ecx,ecx
c00006a2:	74 43                	je     c00006e7 <strncpy+0x57>
c00006a4:	0f b6 75 00          	movzx  esi,BYTE PTR [ebp+0x0]
c00006a8:	8d 41 ff             	lea    eax,[ecx-0x1]
c00006ab:	8d 7a 01             	lea    edi,[edx+0x1]
c00006ae:	89 f3                	mov    ebx,esi
c00006b0:	88 1a                	mov    BYTE PTR [edx],bl
c00006b2:	84 db                	test   bl,bl
c00006b4:	74 3a                	je     c00006f0 <strncpy+0x60>
c00006b6:	85 c0                	test   eax,eax
c00006b8:	74 2d                	je     c00006e7 <strncpy+0x57>
c00006ba:	8a 5d 01             	mov    bl,BYTE PTR [ebp+0x1]
c00006bd:	8d 41 fe             	lea    eax,[ecx-0x2]
c00006c0:	8d 7a 02             	lea    edi,[edx+0x2]
c00006c3:	8d 4d 02             	lea    ecx,[ebp+0x2]
c00006c6:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c00006c9:	84 db                	test   bl,bl
c00006cb:	75 16                	jne    c00006e3 <strncpy+0x53>
c00006cd:	eb 21                	jmp    c00006f0 <strncpy+0x60>
c00006cf:	90                   	nop
c00006d0:	83 c1 01             	add    ecx,0x1
c00006d3:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00006d6:	83 c7 01             	add    edi,0x1
c00006d9:	83 e8 01             	sub    eax,0x1
c00006dc:	88 5f ff             	mov    BYTE PTR [edi-0x1],bl
c00006df:	84 db                	test   bl,bl
c00006e1:	74 0d                	je     c00006f0 <strncpy+0x60>
c00006e3:	85 c0                	test   eax,eax
c00006e5:	75 e9                	jne    c00006d0 <strncpy+0x40>
c00006e7:	5b                   	pop    ebx
c00006e8:	89 d0                	mov    eax,edx
c00006ea:	5e                   	pop    esi
c00006eb:	5f                   	pop    edi
c00006ec:	5d                   	pop    ebp
c00006ed:	c3                   	ret    
c00006ee:	66 90                	xchg   ax,ax
c00006f0:	85 c0                	test   eax,eax
c00006f2:	74 f3                	je     c00006e7 <strncpy+0x57>
c00006f4:	83 f8 08             	cmp    eax,0x8
c00006f7:	89 c3                	mov    ebx,eax
c00006f9:	73 35                	jae    c0000730 <strncpy+0xa0>
c00006fb:	f6 c3 04             	test   bl,0x4
c00006fe:	74 09                	je     c0000709 <strncpy+0x79>
c0000700:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0000706:	83 c7 04             	add    edi,0x4
c0000709:	f6 c3 02             	test   bl,0x2
c000070c:	74 08                	je     c0000716 <strncpy+0x86>
c000070e:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c0000713:	83 c7 02             	add    edi,0x2
c0000716:	80 e3 01             	and    bl,0x1
c0000719:	74 cc                	je     c00006e7 <strncpy+0x57>
c000071b:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000071e:	89 d0                	mov    eax,edx
c0000720:	5b                   	pop    ebx
c0000721:	5e                   	pop    esi
c0000722:	5f                   	pop    edi
c0000723:	5d                   	pop    ebp
c0000724:	c3                   	ret    
c0000725:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000729:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000730:	f7 c7 01 00 00 00    	test   edi,0x1
c0000736:	75 1f                	jne    c0000757 <strncpy+0xc7>
c0000738:	f7 c7 02 00 00 00    	test   edi,0x2
c000073e:	75 30                	jne    c0000770 <strncpy+0xe0>
c0000740:	f7 c7 04 00 00 00    	test   edi,0x4
c0000746:	75 1a                	jne    c0000762 <strncpy+0xd2>
c0000748:	89 d9                	mov    ecx,ebx
c000074a:	c1 e9 02             	shr    ecx,0x2
c000074d:	fc                   	cld    
c000074e:	31 c0                	xor    eax,eax
c0000750:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000752:	83 e3 03             	and    ebx,0x3
c0000755:	eb a4                	jmp    c00006fb <strncpy+0x6b>
c0000757:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000075a:	83 eb 01             	sub    ebx,0x1
c000075d:	83 c7 01             	add    edi,0x1
c0000760:	eb d6                	jmp    c0000738 <strncpy+0xa8>
c0000762:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0000768:	83 eb 04             	sub    ebx,0x4
c000076b:	83 c7 04             	add    edi,0x4
c000076e:	eb d8                	jmp    c0000748 <strncpy+0xb8>
c0000770:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c0000775:	83 eb 02             	sub    ebx,0x2
c0000778:	83 c7 02             	add    edi,0x2
c000077b:	eb c3                	jmp    c0000740 <strncpy+0xb0>
c000077d:	8d 76 00             	lea    esi,[esi+0x0]

c0000780 <strcmp>:
c0000780:	57                   	push   edi
c0000781:	56                   	push   esi
c0000782:	53                   	push   ebx
c0000783:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0000787:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000078b:	8a 17                	mov    dl,BYTE PTR [edi]
c000078d:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0000790:	38 c2                	cmp    dl,al
c0000792:	75 32                	jne    c00007c6 <strcmp+0x46>
c0000794:	85 c0                	test   eax,eax
c0000796:	74 28                	je     c00007c0 <strcmp+0x40>
c0000798:	b8 01 00 00 00       	mov    eax,0x1
c000079d:	eb 08                	jmp    c00007a7 <strcmp+0x27>
c000079f:	90                   	nop
c00007a0:	83 c0 01             	add    eax,0x1
c00007a3:	85 db                	test   ebx,ebx
c00007a5:	74 19                	je     c00007c0 <strcmp+0x40>
c00007a7:	0f be 1c 07          	movsx  ebx,BYTE PTR [edi+eax*1]
c00007ab:	8a 0c 06             	mov    cl,BYTE PTR [esi+eax*1]
c00007ae:	89 da                	mov    edx,ebx
c00007b0:	38 d9                	cmp    cl,bl
c00007b2:	74 ec                	je     c00007a0 <strcmp+0x20>
c00007b4:	5b                   	pop    ebx
c00007b5:	0f b6 c2             	movzx  eax,dl
c00007b8:	0f b6 c9             	movzx  ecx,cl
c00007bb:	29 c8                	sub    eax,ecx
c00007bd:	5e                   	pop    esi
c00007be:	5f                   	pop    edi
c00007bf:	c3                   	ret    
c00007c0:	5b                   	pop    ebx
c00007c1:	31 c0                	xor    eax,eax
c00007c3:	5e                   	pop    esi
c00007c4:	5f                   	pop    edi
c00007c5:	c3                   	ret    
c00007c6:	89 c1                	mov    ecx,eax
c00007c8:	eb ea                	jmp    c00007b4 <strcmp+0x34>
c00007ca:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00007d0 <strchr>:
c00007d0:	53                   	push   ebx
c00007d1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00007d5:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00007d8:	85 db                	test   ebx,ebx
c00007da:	74 22                	je     c00007fe <strchr+0x2e>
c00007dc:	0f be 54 24 0c       	movsx  edx,BYTE PTR [esp+0xc]
c00007e1:	39 d3                	cmp    ebx,edx
c00007e3:	74 1b                	je     c0000800 <strchr+0x30>
c00007e5:	89 d1                	mov    ecx,edx
c00007e7:	eb 0b                	jmp    c00007f4 <strchr+0x24>
c00007e9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007f0:	39 ca                	cmp    edx,ecx
c00007f2:	74 0c                	je     c0000800 <strchr+0x30>
c00007f4:	83 c0 01             	add    eax,0x1
c00007f7:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00007fa:	85 d2                	test   edx,edx
c00007fc:	75 f2                	jne    c00007f0 <strchr+0x20>
c00007fe:	31 c0                	xor    eax,eax
c0000800:	5b                   	pop    ebx
c0000801:	c3                   	ret    
c0000802:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000809:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000810 <strncmp>:
c0000810:	55                   	push   ebp
c0000811:	57                   	push   edi
c0000812:	56                   	push   esi
c0000813:	53                   	push   ebx
c0000814:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000818:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000081c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0000820:	85 f6                	test   esi,esi
c0000822:	74 35                	je     c0000859 <strncmp+0x49>
c0000824:	0f be 29             	movsx  ebp,BYTE PTR [ecx]
c0000827:	8a 17                	mov    dl,BYTE PTR [edi]
c0000829:	89 eb                	mov    ebx,ebp
c000082b:	38 da                	cmp    dl,bl
c000082d:	75 31                	jne    c0000860 <strncmp+0x50>
c000082f:	8d 47 01             	lea    eax,[edi+0x1]
c0000832:	85 ed                	test   ebp,ebp
c0000834:	74 23                	je     c0000859 <strncmp+0x49>
c0000836:	01 f7                	add    edi,esi
c0000838:	eb 18                	jmp    c0000852 <strncmp+0x42>
c000083a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000840:	0f be 30             	movsx  esi,BYTE PTR [eax]
c0000843:	8a 19                	mov    bl,BYTE PTR [ecx]
c0000845:	89 f2                	mov    edx,esi
c0000847:	38 d3                	cmp    bl,dl
c0000849:	75 15                	jne    c0000860 <strncmp+0x50>
c000084b:	83 c0 01             	add    eax,0x1
c000084e:	85 f6                	test   esi,esi
c0000850:	74 07                	je     c0000859 <strncmp+0x49>
c0000852:	83 c1 01             	add    ecx,0x1
c0000855:	39 c7                	cmp    edi,eax
c0000857:	75 e7                	jne    c0000840 <strncmp+0x30>
c0000859:	5b                   	pop    ebx
c000085a:	31 c0                	xor    eax,eax
c000085c:	5e                   	pop    esi
c000085d:	5f                   	pop    edi
c000085e:	5d                   	pop    ebp
c000085f:	c3                   	ret    
c0000860:	0f b6 db             	movzx  ebx,bl
c0000863:	0f b6 c2             	movzx  eax,dl
c0000866:	29 d8                	sub    eax,ebx
c0000868:	5b                   	pop    ebx
c0000869:	5e                   	pop    esi
c000086a:	5f                   	pop    edi
c000086b:	5d                   	pop    ebp
c000086c:	c3                   	ret    
c000086d:	8d 76 00             	lea    esi,[esi+0x0]

c0000870 <strcat>:
c0000870:	56                   	push   esi
c0000871:	53                   	push   ebx
c0000872:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000876:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000087a:	89 c3                	mov    ebx,eax
c000087c:	eb 04                	jmp    c0000882 <strcat+0x12>
c000087e:	66 90                	xchg   ax,ax
c0000880:	89 d3                	mov    ebx,edx
c0000882:	8d 53 01             	lea    edx,[ebx+0x1]
c0000885:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000889:	75 f5                	jne    c0000880 <strcat+0x10>
c000088b:	31 d2                	xor    edx,edx
c000088d:	8d 76 00             	lea    esi,[esi+0x0]
c0000890:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000893:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000896:	83 c2 01             	add    edx,0x1
c0000899:	84 c9                	test   cl,cl
c000089b:	75 f3                	jne    c0000890 <strcat+0x20>
c000089d:	5b                   	pop    ebx
c000089e:	5e                   	pop    esi
c000089f:	c3                   	ret    

c00008a0 <strncat>:
c00008a0:	56                   	push   esi
c00008a1:	53                   	push   ebx
c00008a2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00008a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00008aa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00008ae:	85 f6                	test   esi,esi
c00008b0:	74 32                	je     c00008e4 <strncat+0x44>
c00008b2:	89 c2                	mov    edx,eax
c00008b4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00008ba:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00008c0:	83 c2 01             	add    edx,0x1
c00008c3:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00008c7:	75 f7                	jne    c00008c0 <strncat+0x20>
c00008c9:	01 ce                	add    esi,ecx
c00008cb:	eb 0a                	jmp    c00008d7 <strncat+0x37>
c00008cd:	8d 76 00             	lea    esi,[esi+0x0]
c00008d0:	39 f1                	cmp    ecx,esi
c00008d2:	74 1c                	je     c00008f0 <strncat+0x50>
c00008d4:	83 c2 01             	add    edx,0x1
c00008d7:	83 c1 01             	add    ecx,0x1
c00008da:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008dd:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008e0:	84 db                	test   bl,bl
c00008e2:	75 ec                	jne    c00008d0 <strncat+0x30>
c00008e4:	5b                   	pop    ebx
c00008e5:	5e                   	pop    esi
c00008e6:	c3                   	ret    
c00008e7:	89 f6                	mov    esi,esi
c00008e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00008f0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008f3:	5b                   	pop    ebx
c00008f4:	5e                   	pop    esi
c00008f5:	c3                   	ret    
c00008f6:	8d 76 00             	lea    esi,[esi+0x0]
c00008f9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000900 <strstr>:
c0000900:	57                   	push   edi
c0000901:	56                   	push   esi
c0000902:	53                   	push   ebx
c0000903:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0000907:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000090b:	57                   	push   edi
c000090c:	e8 6f fc ff ff       	call   c0000580 <strlen>
c0000911:	59                   	pop    ecx
c0000912:	85 c0                	test   eax,eax
c0000914:	89 c6                	mov    esi,eax
c0000916:	75 1a                	jne    c0000932 <strstr+0x32>
c0000918:	eb 36                	jmp    c0000950 <strstr+0x50>
c000091a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000920:	56                   	push   esi
c0000921:	57                   	push   edi
c0000922:	53                   	push   ebx
c0000923:	e8 58 fa ff ff       	call   c0000380 <memcmp>
c0000928:	83 c4 0c             	add    esp,0xc
c000092b:	85 c0                	test   eax,eax
c000092d:	74 21                	je     c0000950 <strstr+0x50>
c000092f:	83 c3 01             	add    ebx,0x1
c0000932:	53                   	push   ebx
c0000933:	e8 48 fc ff ff       	call   c0000580 <strlen>
c0000938:	5a                   	pop    edx
c0000939:	39 f0                	cmp    eax,esi
c000093b:	73 e3                	jae    c0000920 <strstr+0x20>
c000093d:	5b                   	pop    ebx
c000093e:	31 c0                	xor    eax,eax
c0000940:	5e                   	pop    esi
c0000941:	5f                   	pop    edi
c0000942:	c3                   	ret    
c0000943:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000949:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000950:	89 d8                	mov    eax,ebx
c0000952:	5b                   	pop    ebx
c0000953:	5e                   	pop    esi
c0000954:	5f                   	pop    edi
c0000955:	c3                   	ret    
c0000956:	8d 76 00             	lea    esi,[esi+0x0]
c0000959:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000960 <toupper>:
c0000960:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000964:	0f b6 d0             	movzx  edx,al
c0000967:	f6 82 60 99 02 c0 02 	test   BYTE PTR [edx-0x3ffd66a0],0x2
c000096e:	74 03                	je     c0000973 <toupper+0x13>
c0000970:	83 e8 20             	sub    eax,0x20
c0000973:	c3                   	ret    
c0000974:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000097a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000980 <tolower>:
c0000980:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000984:	0f b6 d0             	movzx  edx,al
c0000987:	f6 82 60 99 02 c0 01 	test   BYTE PTR [edx-0x3ffd66a0],0x1
c000098e:	74 03                	je     c0000993 <tolower+0x13>
c0000990:	83 c0 20             	add    eax,0x20
c0000993:	c3                   	ret    
c0000994:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000099a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c00009a0 <simple_strtoul>:
c00009a0:	55                   	push   ebp
c00009a1:	57                   	push   edi
c00009a2:	56                   	push   esi
c00009a3:	53                   	push   ebx
c00009a4:	83 ec 08             	sub    esp,0x8
c00009a7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00009ab:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00009af:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00009b3:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c00009b6:	f6 82 60 99 02 c0 08 	test   BYTE PTR [edx-0x3ffd66a0],0x8
c00009bd:	75 11                	jne    c00009d0 <simple_strtoul+0x30>
c00009bf:	89 d0                	mov    eax,edx
c00009c1:	eb 1e                	jmp    c00009e1 <simple_strtoul+0x41>
c00009c3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00009c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00009d0:	83 c3 01             	add    ebx,0x1
c00009d3:	0f b6 13             	movzx  edx,BYTE PTR [ebx]
c00009d6:	f6 82 60 99 02 c0 08 	test   BYTE PTR [edx-0x3ffd66a0],0x8
c00009dd:	89 d0                	mov    eax,edx
c00009df:	75 ef                	jne    c00009d0 <simple_strtoul+0x30>
c00009e1:	0f be c0             	movsx  eax,al
c00009e4:	83 f8 09             	cmp    eax,0x9
c00009e7:	74 e7                	je     c00009d0 <simple_strtoul+0x30>
c00009e9:	83 f8 2d             	cmp    eax,0x2d
c00009ec:	0f 84 5e 01 00 00    	je     c0000b50 <simple_strtoul+0x1b0>
c00009f2:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00009fa:	83 f8 2b             	cmp    eax,0x2b
c00009fd:	0f 94 c0             	sete   al
c0000a00:	0f b6 c0             	movzx  eax,al
c0000a03:	01 c3                	add    ebx,eax
c0000a05:	85 ff                	test   edi,edi
c0000a07:	0f 85 d3 00 00 00    	jne    c0000ae0 <simple_strtoul+0x140>
c0000a0d:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a10:	bf 0a 00 00 00       	mov    edi,0xa
c0000a15:	83 fa 30             	cmp    edx,0x30
c0000a18:	89 d1                	mov    ecx,edx
c0000a1a:	0f 84 8b 01 00 00    	je     c0000bab <simple_strtoul+0x20b>
c0000a20:	85 d2                	test   edx,edx
c0000a22:	0f 84 58 01 00 00    	je     c0000b80 <simple_strtoul+0x1e0>
c0000a28:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000a2f:	31 ed                	xor    ebp,ebp
c0000a31:	31 f6                	xor    esi,esi
c0000a33:	eb 3a                	jmp    c0000a6f <simple_strtoul+0xcf>
c0000a35:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a39:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000a40:	83 e9 30             	sub    ecx,0x30
c0000a43:	39 f9                	cmp    ecx,edi
c0000a45:	73 59                	jae    c0000aa0 <simple_strtoul+0x100>
c0000a47:	89 c8                	mov    eax,ecx
c0000a49:	31 d2                	xor    edx,edx
c0000a4b:	f7 d0                	not    eax
c0000a4d:	f7 f7                	div    edi
c0000a4f:	39 f0                	cmp    eax,esi
c0000a51:	0f 82 e9 00 00 00    	jb     c0000b40 <simple_strtoul+0x1a0>
c0000a57:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000a5e:	0f af f7             	imul   esi,edi
c0000a61:	01 ce                	add    esi,ecx
c0000a63:	83 c3 01             	add    ebx,0x1
c0000a66:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a69:	85 d2                	test   edx,edx
c0000a6b:	89 d1                	mov    ecx,edx
c0000a6d:	74 31                	je     c0000aa0 <simple_strtoul+0x100>
c0000a6f:	0f b6 c9             	movzx  ecx,cl
c0000a72:	f6 81 60 99 02 c0 04 	test   BYTE PTR [ecx-0x3ffd66a0],0x4
c0000a79:	75 c5                	jne    c0000a40 <simple_strtoul+0xa0>
c0000a7b:	52                   	push   edx
c0000a7c:	e8 df fe ff ff       	call   c0000960 <toupper>
c0000a81:	59                   	pop    ecx
c0000a82:	0f b6 d0             	movzx  edx,al
c0000a85:	f6 82 60 99 02 c0 01 	test   BYTE PTR [edx-0x3ffd66a0],0x1
c0000a8c:	74 12                	je     c0000aa0 <simple_strtoul+0x100>
c0000a8e:	8d 48 c9             	lea    ecx,[eax-0x37]
c0000a91:	39 f9                	cmp    ecx,edi
c0000a93:	72 b2                	jb     c0000a47 <simple_strtoul+0xa7>
c0000a95:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a99:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000aa0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000aa4:	85 d2                	test   edx,edx
c0000aa6:	74 11                	je     c0000ab9 <simple_strtoul+0x119>
c0000aa8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000aab:	09 f0                	or     eax,esi
c0000aad:	0f 84 ad 00 00 00    	je     c0000b60 <simple_strtoul+0x1c0>
c0000ab3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000ab7:	89 18                	mov    DWORD PTR [eax],ebx
c0000ab9:	83 fd 01             	cmp    ebp,0x1
c0000abc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0000ac1:	0f 44 f0             	cmove  esi,eax
c0000ac4:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000ac9:	75 02                	jne    c0000acd <simple_strtoul+0x12d>
c0000acb:	f7 de                	neg    esi
c0000acd:	83 c4 08             	add    esp,0x8
c0000ad0:	89 f0                	mov    eax,esi
c0000ad2:	5b                   	pop    ebx
c0000ad3:	5e                   	pop    esi
c0000ad4:	5f                   	pop    edi
c0000ad5:	5d                   	pop    ebp
c0000ad6:	c3                   	ret    
c0000ad7:	89 f6                	mov    esi,esi
c0000ad9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000ae0:	8d 47 fe             	lea    eax,[edi-0x2]
c0000ae3:	83 f8 22             	cmp    eax,0x22
c0000ae6:	0f 87 94 00 00 00    	ja     c0000b80 <simple_strtoul+0x1e0>
c0000aec:	83 ff 08             	cmp    edi,0x8
c0000aef:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000af1:	0f 84 df 00 00 00    	je     c0000bd6 <simple_strtoul+0x236>
c0000af7:	83 ff 10             	cmp    edi,0x10
c0000afa:	0f 85 13 01 00 00    	jne    c0000c13 <simple_strtoul+0x273>
c0000b00:	0f be d1             	movsx  edx,cl
c0000b03:	bf 10 00 00 00       	mov    edi,0x10
c0000b08:	83 fa 30             	cmp    edx,0x30
c0000b0b:	0f 85 0f ff ff ff    	jne    c0000a20 <simple_strtoul+0x80>
c0000b11:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b15:	52                   	push   edx
c0000b16:	89 d1                	mov    ecx,edx
c0000b18:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b1c:	e8 5f fe ff ff       	call   c0000980 <tolower>
c0000b21:	5e                   	pop    esi
c0000b22:	83 f8 78             	cmp    eax,0x78
c0000b25:	0f 84 da 00 00 00    	je     c0000c05 <simple_strtoul+0x265>
c0000b2b:	83 c3 01             	add    ebx,0x1
c0000b2e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b31:	e9 ea fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000b36:	8d 76 00             	lea    esi,[esi+0x0]
c0000b39:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000b40:	bd 01 00 00 00       	mov    ebp,0x1
c0000b45:	31 f6                	xor    esi,esi
c0000b47:	e9 17 ff ff ff       	jmp    c0000a63 <simple_strtoul+0xc3>
c0000b4c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b50:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b58:	83 c3 01             	add    ebx,0x1
c0000b5b:	e9 a5 fe ff ff       	jmp    c0000a05 <simple_strtoul+0x65>
c0000b60:	85 db                	test   ebx,ebx
c0000b62:	74 39                	je     c0000b9d <simple_strtoul+0x1fd>
c0000b64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b68:	31 f6                	xor    esi,esi
c0000b6a:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000b6e:	89 38                	mov    DWORD PTR [eax],edi
c0000b70:	e9 44 ff ff ff       	jmp    c0000ab9 <simple_strtoul+0x119>
c0000b75:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b79:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000b80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b84:	85 c0                	test   eax,eax
c0000b86:	74 1c                	je     c0000ba4 <simple_strtoul+0x204>
c0000b88:	85 db                	test   ebx,ebx
c0000b8a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b8e:	74 68                	je     c0000bf8 <simple_strtoul+0x258>
c0000b90:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000b94:	31 f6                	xor    esi,esi
c0000b96:	89 38                	mov    DWORD PTR [eax],edi
c0000b98:	e9 27 ff ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000b9d:	31 f6                	xor    esi,esi
c0000b9f:	e9 0f ff ff ff       	jmp    c0000ab3 <simple_strtoul+0x113>
c0000ba4:	31 f6                	xor    esi,esi
c0000ba6:	e9 19 ff ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000bab:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000baf:	52                   	push   edx
c0000bb0:	89 d1                	mov    ecx,edx
c0000bb2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000bb6:	e8 c5 fd ff ff       	call   c0000980 <tolower>
c0000bbb:	5f                   	pop    edi
c0000bbc:	83 f8 78             	cmp    eax,0x78
c0000bbf:	74 2c                	je     c0000bed <simple_strtoul+0x24d>
c0000bc1:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000bc4:	83 c3 01             	add    ebx,0x1
c0000bc7:	83 fa 30             	cmp    edx,0x30
c0000bca:	74 16                	je     c0000be2 <simple_strtoul+0x242>
c0000bcc:	bf 08 00 00 00       	mov    edi,0x8
c0000bd1:	e9 4a fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000bd6:	0f be d1             	movsx  edx,cl
c0000bd9:	83 fa 30             	cmp    edx,0x30
c0000bdc:	0f 85 3e fe ff ff    	jne    c0000a20 <simple_strtoul+0x80>
c0000be2:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000be6:	83 c3 01             	add    ebx,0x1
c0000be9:	89 d1                	mov    ecx,edx
c0000beb:	eb df                	jmp    c0000bcc <simple_strtoul+0x22c>
c0000bed:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0000bf0:	83 c3 02             	add    ebx,0x2
c0000bf3:	e9 08 ff ff ff       	jmp    c0000b00 <simple_strtoul+0x160>
c0000bf8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000bfe:	31 f6                	xor    esi,esi
c0000c00:	e9 bf fe ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000c05:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0000c09:	83 c3 02             	add    ebx,0x2
c0000c0c:	89 d1                	mov    ecx,edx
c0000c0e:	e9 0d fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000c13:	0f be d1             	movsx  edx,cl
c0000c16:	e9 05 fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>

c0000c1b <largebin_index>:
c0000c1b:	89 c2                	mov    edx,eax
c0000c1d:	c1 ea 08             	shr    edx,0x8
c0000c20:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c26:	77 10                	ja     c0000c38 <largebin_index+0x1d>
c0000c28:	0f bd d2             	bsr    edx,edx
c0000c2b:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c2e:	d3 e8                	shr    eax,cl
c0000c30:	83 e0 03             	and    eax,0x3
c0000c33:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c37:	c3                   	ret    
c0000c38:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c3d:	c3                   	ret    

c0000c3e <malloc_init_state>:
c0000c3e:	8d 50 34             	lea    edx,[eax+0x34]
c0000c41:	53                   	push   ebx
c0000c42:	89 d1                	mov    ecx,edx
c0000c44:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c4a:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c4d:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c50:	83 c2 08             	add    edx,0x8
c0000c53:	39 da                	cmp    edx,ebx
c0000c55:	75 f3                	jne    c0000c4a <malloc_init_state+0xc>
c0000c57:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c61:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c63:	c7 80 54 03 00 00 00 00 01 00 	mov    DWORD PTR [eax+0x354],0x10000
c0000c6d:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c77:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c81:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c88:	83 e2 03             	and    edx,0x3
c0000c8b:	5b                   	pop    ebx
c0000c8c:	83 ca 48             	or     edx,0x48
c0000c8f:	89 10                	mov    DWORD PTR [eax],edx
c0000c91:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000c94:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000c9e:	c3                   	ret    

c0000c9f <malloc_consolidate>:
c0000c9f:	8b 10                	mov    edx,DWORD PTR [eax]
c0000ca1:	85 d2                	test   edx,edx
c0000ca3:	0f 84 d8 00 00 00    	je     c0000d81 <malloc_consolidate+0xe2>
c0000ca9:	55                   	push   ebp
c0000caa:	83 e2 fd             	and    edx,0xfffffffd
c0000cad:	57                   	push   edi
c0000cae:	89 c5                	mov    ebp,eax
c0000cb0:	56                   	push   esi
c0000cb1:	53                   	push   ebx
c0000cb2:	8d 78 34             	lea    edi,[eax+0x34]
c0000cb5:	83 ec 10             	sub    esp,0x10
c0000cb8:	89 10                	mov    DWORD PTR [eax],edx
c0000cba:	c1 ea 03             	shr    edx,0x3
c0000cbd:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000cc1:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cc5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cc9:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000ccc:	85 d2                	test   edx,edx
c0000cce:	0f 84 98 00 00 00    	je     c0000d6c <malloc_consolidate+0xcd>
c0000cd4:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000cdb:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cde:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000ce1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000ce5:	89 f9                	mov    ecx,edi
c0000ce7:	83 e1 fe             	and    ecx,0xfffffffe
c0000cea:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000ced:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cf0:	83 e3 fc             	and    ebx,0xfffffffc
c0000cf3:	83 e7 01             	and    edi,0x1
c0000cf6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000cf9:	75 14                	jne    c0000d0f <malloc_consolidate+0x70>
c0000cfb:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000cfd:	29 fa                	sub    edx,edi
c0000cff:	01 f9                	add    ecx,edi
c0000d01:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d04:	89 fb                	mov    ebx,edi
c0000d06:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d09:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d0c:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d0f:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d12:	74 40                	je     c0000d54 <malloc_consolidate+0xb5>
c0000d14:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d17:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d1a:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d1e:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d21:	83 e7 01             	and    edi,0x1
c0000d24:	75 0e                	jne    c0000d34 <malloc_consolidate+0x95>
c0000d26:	01 d9                	add    ecx,ebx
c0000d28:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d2b:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d2e:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d31:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d34:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d37:	89 ce                	mov    esi,ecx
c0000d39:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d3c:	83 ce 01             	or     esi,0x1
c0000d3f:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d42:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d45:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d49:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d4c:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d4f:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d52:	eb 0c                	jmp    c0000d60 <malloc_consolidate+0xc1>
c0000d54:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d57:	83 c9 01             	or     ecx,0x1
c0000d5a:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d5d:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d60:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d64:	85 d2                	test   edx,edx
c0000d66:	0f 85 6f ff ff ff    	jne    c0000cdb <malloc_consolidate+0x3c>
c0000d6c:	83 c5 04             	add    ebp,0x4
c0000d6f:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d73:	0f 85 50 ff ff ff    	jne    c0000cc9 <malloc_consolidate+0x2a>
c0000d79:	83 c4 10             	add    esp,0x10
c0000d7c:	5b                   	pop    ebx
c0000d7d:	5e                   	pop    esi
c0000d7e:	5f                   	pop    edi
c0000d7f:	5d                   	pop    ebp
c0000d80:	c3                   	ret    
c0000d81:	e9 b8 fe ff ff       	jmp    c0000c3e <malloc_init_state>

c0000d86 <dlfree>:
c0000d86:	57                   	push   edi
c0000d87:	56                   	push   esi
c0000d88:	53                   	push   ebx
c0000d89:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000d8d:	85 c9                	test   ecx,ecx
c0000d8f:	0f 84 01 01 00 00    	je     c0000e96 <dlfree+0x110>
c0000d95:	8b 71 fc             	mov    esi,DWORD PTR [ecx-0x4]
c0000d98:	8d 51 f8             	lea    edx,[ecx-0x8]
c0000d9b:	8b 1d 00 21 03 c0    	mov    ebx,DWORD PTR ds:0xc0032100
c0000da1:	89 f0                	mov    eax,esi
c0000da3:	83 e0 fc             	and    eax,0xfffffffc
c0000da6:	39 c3                	cmp    ebx,eax
c0000da8:	72 24                	jb     c0000dce <dlfree+0x48>
c0000daa:	c1 e8 03             	shr    eax,0x3
c0000dad:	83 cb 03             	or     ebx,0x3
c0000db0:	89 1d 00 21 03 c0    	mov    DWORD PTR ds:0xc0032100,ebx
c0000db6:	83 e8 02             	sub    eax,0x2
c0000db9:	8b 1c 85 04 21 03 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffcdefc]
c0000dc0:	89 19                	mov    DWORD PTR [ecx],ebx
c0000dc2:	89 14 85 04 21 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdefc],edx
c0000dc9:	e9 c8 00 00 00       	jmp    c0000e96 <dlfree+0x110>
c0000dce:	83 e6 02             	and    esi,0x2
c0000dd1:	0f 85 a0 00 00 00    	jne    c0000e77 <dlfree+0xf1>
c0000dd7:	8d 34 02             	lea    esi,[edx+eax*1]
c0000dda:	83 cb 01             	or     ebx,0x1
c0000ddd:	89 1d 00 21 03 c0    	mov    DWORD PTR ds:0xc0032100,ebx
c0000de3:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000de6:	83 e3 fc             	and    ebx,0xfffffffc
c0000de9:	f6 41 fc 01          	test   BYTE PTR [ecx-0x4],0x1
c0000ded:	75 13                	jne    c0000e02 <dlfree+0x7c>
c0000def:	8b 49 f8             	mov    ecx,DWORD PTR [ecx-0x8]
c0000df2:	29 ca                	sub    edx,ecx
c0000df4:	01 c8                	add    eax,ecx
c0000df6:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000df9:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0000dfc:	89 4f 0c             	mov    DWORD PTR [edi+0xc],ecx
c0000dff:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0000e02:	39 35 2c 21 03 c0    	cmp    DWORD PTR ds:0xc003212c,esi
c0000e08:	74 40                	je     c0000e4a <dlfree+0xc4>
c0000e0a:	8b 4c 1e 04          	mov    ecx,DWORD PTR [esi+ebx*1+0x4]
c0000e0e:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000e11:	80 e1 01             	and    cl,0x1
c0000e14:	75 0e                	jne    c0000e24 <dlfree+0x9e>
c0000e16:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e19:	01 d8                	add    eax,ebx
c0000e1b:	8b 4e 0c             	mov    ecx,DWORD PTR [esi+0xc]
c0000e1e:	89 4f 0c             	mov    DWORD PTR [edi+0xc],ecx
c0000e21:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0000e24:	8b 0d 3c 21 03 c0    	mov    ecx,DWORD PTR ds:0xc003213c
c0000e2a:	c7 42 0c 34 21 03 c0 	mov    DWORD PTR [edx+0xc],0xc0032134
c0000e31:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e34:	89 15 3c 21 03 c0    	mov    DWORD PTR ds:0xc003213c,edx
c0000e3a:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e3d:	89 c1                	mov    ecx,eax
c0000e3f:	83 c9 01             	or     ecx,0x1
c0000e42:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e45:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e48:	eb 10                	jmp    c0000e5a <dlfree+0xd4>
c0000e4a:	01 d8                	add    eax,ebx
c0000e4c:	89 c1                	mov    ecx,eax
c0000e4e:	83 c9 01             	or     ecx,0x1
c0000e51:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e54:	89 15 2c 21 03 c0    	mov    DWORD PTR ds:0xc003212c,edx
c0000e5a:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e5f:	76 35                	jbe    c0000e96 <dlfree+0x110>
c0000e61:	f6 05 00 21 03 c0 02 	test   BYTE PTR ds:0xc0032100,0x2
c0000e68:	74 2c                	je     c0000e96 <dlfree+0x110>
c0000e6a:	5b                   	pop    ebx
c0000e6b:	b8 00 21 03 c0       	mov    eax,0xc0032100
c0000e70:	5e                   	pop    esi
c0000e71:	5f                   	pop    edi
c0000e72:	e9 28 fe ff ff       	jmp    c0000c9f <malloc_consolidate>
c0000e77:	8b 49 f8             	mov    ecx,DWORD PTR [ecx-0x8]
c0000e7a:	53                   	push   ebx
c0000e7b:	53                   	push   ebx
c0000e7c:	ff 0d 50 24 03 c0    	dec    DWORD PTR ds:0xc0032450
c0000e82:	01 c8                	add    eax,ecx
c0000e84:	29 ca                	sub    edx,ecx
c0000e86:	50                   	push   eax
c0000e87:	52                   	push   edx
c0000e88:	29 05 64 24 03 c0    	sub    DWORD PTR ds:0xc0032464,eax
c0000e8e:	e8 f7 f1 00 00       	call   c001008a <munmap>
c0000e93:	83 c4 10             	add    esp,0x10
c0000e96:	5b                   	pop    ebx
c0000e97:	5e                   	pop    esi
c0000e98:	5f                   	pop    edi
c0000e99:	c3                   	ret    

c0000e9a <sYSMALLOc>:
c0000e9a:	55                   	push   ebp
c0000e9b:	57                   	push   edi
c0000e9c:	56                   	push   esi
c0000e9d:	53                   	push   ebx
c0000e9e:	89 d3                	mov    ebx,edx
c0000ea0:	83 ec 2c             	sub    esp,0x2c
c0000ea3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0000ea7:	8b 8a 5c 03 00 00    	mov    ecx,DWORD PTR [edx+0x35c]
c0000ead:	f6 02 02             	test   BYTE PTR [edx],0x2
c0000eb0:	8d 41 ff             	lea    eax,[ecx-0x1]
c0000eb3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000eb7:	74 1f                	je     c0000ed8 <sYSMALLOc+0x3e>
c0000eb9:	89 d0                	mov    eax,edx
c0000ebb:	e8 df fd ff ff       	call   c0000c9f <malloc_consolidate>
c0000ec0:	83 ec 0c             	sub    esp,0xc
c0000ec3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0000ec7:	83 e8 07             	sub    eax,0x7
c0000eca:	50                   	push   eax
c0000ecb:	e8 78 03 00 00       	call   c0001248 <dlmalloc>
c0000ed0:	83 c4 10             	add    esp,0x10
c0000ed3:	e9 68 03 00 00       	jmp    c0001240 <sYSMALLOc+0x3a6>
c0000ed8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000edc:	f7 d9                	neg    ecx
c0000ede:	39 82 4c 03 00 00    	cmp    DWORD PTR [edx+0x34c],eax
c0000ee4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0000ee8:	0f 87 be 00 00 00    	ja     c0000fac <sYSMALLOc+0x112>
c0000eee:	8b 82 54 03 00 00    	mov    eax,DWORD PTR [edx+0x354]
c0000ef4:	39 82 50 03 00 00    	cmp    DWORD PTR [edx+0x350],eax
c0000efa:	0f 8d ac 00 00 00    	jge    c0000fac <sYSMALLOc+0x112>
c0000f00:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0000f04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0000f08:	8d 74 38 0b          	lea    esi,[eax+edi*1+0xb]
c0000f0c:	21 ce                	and    esi,ecx
c0000f0e:	39 fe                	cmp    esi,edi
c0000f10:	0f 86 96 00 00 00    	jbe    c0000fac <sYSMALLOc+0x112>
c0000f16:	52                   	push   edx
c0000f17:	52                   	push   edx
c0000f18:	6a 00                	push   0x0
c0000f1a:	6a ff                	push   0xffffffff
c0000f1c:	6a 0c                	push   0xc
c0000f1e:	6a 03                	push   0x3
c0000f20:	56                   	push   esi
c0000f21:	6a 00                	push   0x0
c0000f23:	e8 04 f1 00 00       	call   c001002c <mmap>
c0000f28:	83 c4 20             	add    esp,0x20
c0000f2b:	83 f8 ff             	cmp    eax,0xffffffff
c0000f2e:	74 7c                	je     c0000fac <sYSMALLOc+0x112>
c0000f30:	89 c1                	mov    ecx,eax
c0000f32:	83 e1 07             	and    ecx,0x7
c0000f35:	74 13                	je     c0000f4a <sYSMALLOc+0xb0>
c0000f37:	ba 08 00 00 00       	mov    edx,0x8
c0000f3c:	89 f7                	mov    edi,esi
c0000f3e:	29 ca                	sub    edx,ecx
c0000f40:	01 d0                	add    eax,edx
c0000f42:	29 d7                	sub    edi,edx
c0000f44:	89 10                	mov    DWORD PTR [eax],edx
c0000f46:	89 fa                	mov    edx,edi
c0000f48:	eb 08                	jmp    c0000f52 <sYSMALLOc+0xb8>
c0000f4a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000f50:	89 f2                	mov    edx,esi
c0000f52:	83 ca 02             	or     edx,0x2
c0000f55:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0000f58:	8b bb 50 03 00 00    	mov    edi,DWORD PTR [ebx+0x350]
c0000f5e:	8d 57 01             	lea    edx,[edi+0x1]
c0000f61:	3b 93 58 03 00 00    	cmp    edx,DWORD PTR [ebx+0x358]
c0000f67:	89 93 50 03 00 00    	mov    DWORD PTR [ebx+0x350],edx
c0000f6d:	7e 06                	jle    c0000f75 <sYSMALLOc+0xdb>
c0000f6f:	89 93 58 03 00 00    	mov    DWORD PTR [ebx+0x358],edx
c0000f75:	03 b3 64 03 00 00    	add    esi,DWORD PTR [ebx+0x364]
c0000f7b:	3b b3 70 03 00 00    	cmp    esi,DWORD PTR [ebx+0x370]
c0000f81:	89 b3 64 03 00 00    	mov    DWORD PTR [ebx+0x364],esi
c0000f87:	76 06                	jbe    c0000f8f <sYSMALLOc+0xf5>
c0000f89:	89 b3 70 03 00 00    	mov    DWORD PTR [ebx+0x370],esi
c0000f8f:	03 b3 68 03 00 00    	add    esi,DWORD PTR [ebx+0x368]
c0000f95:	39 b3 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],esi
c0000f9b:	0f 83 41 01 00 00    	jae    c00010e2 <sYSMALLOc+0x248>
c0000fa1:	89 b3 74 03 00 00    	mov    DWORD PTR [ebx+0x374],esi
c0000fa7:	e9 36 01 00 00       	jmp    c00010e2 <sYSMALLOc+0x248>
c0000fac:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000faf:	8b ab 48 03 00 00    	mov    ebp,DWORD PTR [ebx+0x348]
c0000fb5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000fb9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0000fbc:	83 e0 fc             	and    eax,0xfffffffc
c0000fbf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000fc3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000fc7:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000fcb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000fcf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000fd3:	83 c0 10             	add    eax,0x10
c0000fd6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0000fda:	01 c5                	add    ebp,eax
c0000fdc:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000fe3:	74 04                	je     c0000fe9 <sYSMALLOc+0x14f>
c0000fe5:	2b 6c 24 04          	sub    ebp,DWORD PTR [esp+0x4]
c0000fe9:	03 6c 24 10          	add    ebp,DWORD PTR [esp+0x10]
c0000fed:	23 6c 24 14          	and    ebp,DWORD PTR [esp+0x14]
c0000ff1:	89 ee                	mov    esi,ebp
c0000ff3:	7f 19                	jg     c000100e <sYSMALLOc+0x174>
c0000ff5:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000ffc:	74 28                	je     c0001026 <sYSMALLOc+0x18c>
c0000ffe:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001002:	03 74 24 04          	add    esi,DWORD PTR [esp+0x4]
c0001006:	01 ee                	add    esi,ebp
c0001008:	23 74 24 14          	and    esi,DWORD PTR [esp+0x14]
c000100c:	eb 18                	jmp    c0001026 <sYSMALLOc+0x18c>
c000100e:	83 ec 0c             	sub    esp,0xc
c0001011:	55                   	push   ebp
c0001012:	e8 df ef 00 00       	call   c000fff6 <sbrk_thunk>
c0001017:	83 c4 10             	add    esp,0x10
c000101a:	89 c7                	mov    edi,eax
c000101c:	83 c8 ff             	or     eax,0xffffffff
c000101f:	83 ff ff             	cmp    edi,0xffffffff
c0001022:	75 42                	jne    c0001066 <sYSMALLOc+0x1cc>
c0001024:	eb cf                	jmp    c0000ff5 <sYSMALLOc+0x15b>
c0001026:	81 fe ff bf 00 00    	cmp    esi,0xbfff
c000102c:	77 05                	ja     c0001033 <sYSMALLOc+0x199>
c000102e:	be 00 c0 00 00       	mov    esi,0xc000
c0001033:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0001037:	77 07                	ja     c0001040 <sYSMALLOc+0x1a6>
c0001039:	31 c0                	xor    eax,eax
c000103b:	e9 00 02 00 00       	jmp    c0001240 <sYSMALLOc+0x3a6>
c0001040:	50                   	push   eax
c0001041:	50                   	push   eax
c0001042:	6a 00                	push   0x0
c0001044:	6a ff                	push   0xffffffff
c0001046:	6a 0c                	push   0xc
c0001048:	6a 03                	push   0x3
c000104a:	56                   	push   esi
c000104b:	6a 00                	push   0x0
c000104d:	e8 da ef 00 00       	call   c001002c <mmap>
c0001052:	83 c4 20             	add    esp,0x20
c0001055:	83 f8 ff             	cmp    eax,0xffffffff
c0001058:	89 c7                	mov    edi,eax
c000105a:	74 dd                	je     c0001039 <sYSMALLOc+0x19f>
c000105c:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001063:	8d 04 30             	lea    eax,[eax+esi*1]
c0001066:	8b 8b 68 03 00 00    	mov    ecx,DWORD PTR [ebx+0x368]
c000106c:	01 f1                	add    ecx,esi
c000106e:	39 7c 24 18          	cmp    DWORD PTR [esp+0x18],edi
c0001072:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c0001078:	75 70                	jne    c00010ea <sYSMALLOc+0x250>
c000107a:	83 f8 ff             	cmp    eax,0xffffffff
c000107d:	75 6b                	jne    c00010ea <sYSMALLOc+0x250>
c000107f:	03 74 24 04          	add    esi,DWORD PTR [esp+0x4]
c0001083:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001087:	83 ce 01             	or     esi,0x1
c000108a:	89 70 04             	mov    DWORD PTR [eax+0x4],esi
c000108d:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0001093:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0001099:	73 06                	jae    c00010a1 <sYSMALLOc+0x207>
c000109b:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c00010a1:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c00010a7:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c00010ad:	73 06                	jae    c00010b5 <sYSMALLOc+0x21b>
c00010af:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c00010b5:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00010b8:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010bb:	83 e2 fc             	and    edx,0xfffffffc
c00010be:	39 54 24 1c          	cmp    DWORD PTR [esp+0x1c],edx
c00010c2:	0f 87 71 ff ff ff    	ja     c0001039 <sYSMALLOc+0x19f>
c00010c8:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00010cc:	8d 0c 38             	lea    ecx,[eax+edi*1]
c00010cf:	29 fa                	sub    edx,edi
c00010d1:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00010d4:	89 fb                	mov    ebx,edi
c00010d6:	83 ca 01             	or     edx,0x1
c00010d9:	83 cb 01             	or     ebx,0x1
c00010dc:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00010df:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010e2:	83 c0 08             	add    eax,0x8
c00010e5:	e9 56 01 00 00       	jmp    c0001240 <sYSMALLOc+0x3a6>
c00010ea:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c00010f0:	f6 c2 01             	test   dl,0x1
c00010f3:	74 1e                	je     c0001113 <sYSMALLOc+0x279>
c00010f5:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00010fa:	0f 84 bb 00 00 00    	je     c00011bb <sYSMALLOc+0x321>
c0001100:	39 7c 24 18          	cmp    DWORD PTR [esp+0x18],edi
c0001104:	0f 86 b1 00 00 00    	jbe    c00011bb <sYSMALLOc+0x321>
c000110a:	83 e2 fe             	and    edx,0xfffffffe
c000110d:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0001113:	83 f8 ff             	cmp    eax,0xffffffff
c0001116:	89 fd                	mov    ebp,edi
c0001118:	75 24                	jne    c000113e <sYSMALLOc+0x2a4>
c000111a:	83 ec 0c             	sub    esp,0xc
c000111d:	89 fd                	mov    ebp,edi
c000111f:	6a 00                	push   0x0
c0001121:	e8 d0 ee 00 00       	call   c000fff6 <sbrk_thunk>
c0001126:	83 c4 10             	add    esp,0x10
c0001129:	89 c2                	mov    edx,eax
c000112b:	29 fa                	sub    edx,edi
c000112d:	29 f2                	sub    edx,esi
c000112f:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0001135:	83 f8 ff             	cmp    eax,0xffffffff
c0001138:	0f 84 4f ff ff ff    	je     c000108d <sYSMALLOc+0x1f3>
c000113e:	31 c9                	xor    ecx,ecx
c0001140:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0001143:	29 e8                	sub    eax,ebp
c0001145:	01 c8                	add    eax,ecx
c0001147:	83 c8 01             	or     eax,0x1
c000114a:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000114d:	01 8b 68 03 00 00    	add    DWORD PTR [ebx+0x368],ecx
c0001153:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0001158:	0f 84 2f ff ff ff    	je     c000108d <sYSMALLOc+0x1f3>
c000115e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0001162:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0001166:	83 ee 0c             	sub    esi,0xc
c0001169:	83 e6 f8             	and    esi,0xfffffff8
c000116c:	89 f0                	mov    eax,esi
c000116e:	83 c8 01             	or     eax,0x1
c0001171:	83 fe 0f             	cmp    esi,0xf
c0001174:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0001177:	c7 44 37 04 05 00 00 00 	mov    DWORD PTR [edi+esi*1+0x4],0x5
c000117f:	c7 44 37 08 05 00 00 00 	mov    DWORD PTR [edi+esi*1+0x8],0x5
c0001187:	0f 86 00 ff ff ff    	jbe    c000108d <sYSMALLOc+0x1f3>
c000118d:	83 ec 0c             	sub    esp,0xc
c0001190:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0001196:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c00011a0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00011a4:	83 c0 08             	add    eax,0x8
c00011a7:	50                   	push   eax
c00011a8:	e8 d9 fb ff ff       	call   c0000d86 <dlfree>
c00011ad:	83 c4 10             	add    esp,0x10
c00011b0:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c00011b6:	e9 d2 fe ff ff       	jmp    c000108d <sYSMALLOc+0x1f3>
c00011bb:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00011c0:	74 0e                	je     c00011d0 <sYSMALLOc+0x336>
c00011c2:	89 f8                	mov    eax,edi
c00011c4:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c00011c8:	01 c1                	add    ecx,eax
c00011ca:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c00011d0:	89 fa                	mov    edx,edi
c00011d2:	83 e2 07             	and    edx,0x7
c00011d5:	74 0c                	je     c00011e3 <sYSMALLOc+0x349>
c00011d7:	b8 08 00 00 00       	mov    eax,0x8
c00011dc:	29 d0                	sub    eax,edx
c00011de:	8d 2c 07             	lea    ebp,[edi+eax*1]
c00011e1:	eb 04                	jmp    c00011e7 <sYSMALLOc+0x34d>
c00011e3:	89 fd                	mov    ebp,edi
c00011e5:	31 c0                	xor    eax,eax
c00011e7:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c00011eb:	83 ec 0c             	sub    esp,0xc
c00011ee:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00011f2:	8d 14 06             	lea    edx,[esi+eax*1]
c00011f5:	01 fa                	add    edx,edi
c00011f7:	01 d1                	add    ecx,edx
c00011f9:	29 d0                	sub    eax,edx
c00011fb:	23 4c 24 20          	and    ecx,DWORD PTR [esp+0x20]
c00011ff:	01 c1                	add    ecx,eax
c0001201:	51                   	push   ecx
c0001202:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0001206:	e8 eb ed 00 00       	call   c000fff6 <sbrk_thunk>
c000120b:	83 c4 10             	add    esp,0x10
c000120e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001212:	83 f8 ff             	cmp    eax,0xffffffff
c0001215:	75 12                	jne    c0001229 <sYSMALLOc+0x38f>
c0001217:	83 ec 0c             	sub    esp,0xc
c000121a:	6a 00                	push   0x0
c000121c:	e8 d5 ed 00 00       	call   c000fff6 <sbrk_thunk>
c0001221:	83 c4 10             	add    esp,0x10
c0001224:	e9 0c ff ff ff       	jmp    c0001135 <sYSMALLOc+0x29b>
c0001229:	39 f8                	cmp    eax,edi
c000122b:	0f 83 0f ff ff ff    	jae    c0001140 <sYSMALLOc+0x2a6>
c0001231:	8d 04 37             	lea    eax,[edi+esi*1]
c0001234:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c000123b:	e9 f5 fe ff ff       	jmp    c0001135 <sYSMALLOc+0x29b>
c0001240:	83 c4 2c             	add    esp,0x2c
c0001243:	5b                   	pop    ebx
c0001244:	5e                   	pop    esi
c0001245:	5f                   	pop    edi
c0001246:	5d                   	pop    ebp
c0001247:	c3                   	ret    

c0001248 <dlmalloc>:
c0001248:	55                   	push   ebp
c0001249:	57                   	push   edi
c000124a:	56                   	push   esi
c000124b:	53                   	push   ebx
c000124c:	83 ec 1c             	sub    esp,0x1c
c000124f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001253:	83 f8 df             	cmp    eax,0xffffffdf
c0001256:	0f 87 70 03 00 00    	ja     c00015cc <dlmalloc+0x384>
c000125c:	83 c0 0b             	add    eax,0xb
c000125f:	be 10 00 00 00       	mov    esi,0x10
c0001264:	83 f8 0f             	cmp    eax,0xf
c0001267:	76 05                	jbe    c000126e <dlmalloc+0x26>
c0001269:	83 e0 f8             	and    eax,0xfffffff8
c000126c:	89 c6                	mov    esi,eax
c000126e:	8b 3d 00 21 03 c0    	mov    edi,DWORD PTR ds:0xc0032100
c0001274:	f7 c7 01 00 00 00    	test   edi,0x1
c000127a:	75 17                	jne    c0001293 <dlmalloc+0x4b>
c000127c:	85 ff                	test   edi,edi
c000127e:	0f 85 05 03 00 00    	jne    c0001589 <dlmalloc+0x341>
c0001284:	b8 00 21 03 c0       	mov    eax,0xc0032100
c0001289:	e8 11 fa ff ff       	call   c0000c9f <malloc_consolidate>
c000128e:	e9 f6 02 00 00       	jmp    c0001589 <dlmalloc+0x341>
c0001293:	39 f7                	cmp    edi,esi
c0001295:	72 1f                	jb     c00012b6 <dlmalloc+0x6e>
c0001297:	89 f2                	mov    edx,esi
c0001299:	c1 ea 03             	shr    edx,0x3
c000129c:	83 ea 02             	sub    edx,0x2
c000129f:	8b 04 95 04 21 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffcdefc]
c00012a6:	85 c0                	test   eax,eax
c00012a8:	74 0c                	je     c00012b6 <dlmalloc+0x6e>
c00012aa:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c00012ad:	89 0c 95 04 21 03 c0 	mov    DWORD PTR [edx*4-0x3ffcdefc],ecx
c00012b4:	eb 30                	jmp    c00012e6 <dlmalloc+0x9e>
c00012b6:	81 fe ff 00 00 00    	cmp    esi,0xff
c00012bc:	89 f0                	mov    eax,esi
c00012be:	77 2e                	ja     c00012ee <dlmalloc+0xa6>
c00012c0:	c1 e8 03             	shr    eax,0x3
c00012c3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00012c7:	8d 14 c5 34 21 03 c0 	lea    edx,[eax*8-0x3ffcdecc]
c00012ce:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00012d1:	8d 5a f8             	lea    ebx,[edx-0x8]
c00012d4:	39 c3                	cmp    ebx,eax
c00012d6:	74 2e                	je     c0001306 <dlmalloc+0xbe>
c00012d8:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00012db:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00012e0:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00012e3:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00012e6:	83 c0 08             	add    eax,0x8
c00012e9:	e9 e0 02 00 00       	jmp    c00015ce <dlmalloc+0x386>
c00012ee:	e8 28 f9 ff ff       	call   c0000c1b <largebin_index>
c00012f3:	83 e7 02             	and    edi,0x2
c00012f6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00012fa:	74 0a                	je     c0001306 <dlmalloc+0xbe>
c00012fc:	b8 00 21 03 c0       	mov    eax,0xc0032100
c0001301:	e8 99 f9 ff ff       	call   c0000c9f <malloc_consolidate>
c0001306:	8d 46 10             	lea    eax,[esi+0x10]
c0001309:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000130d:	8b 1d 40 21 03 c0    	mov    ebx,DWORD PTR ds:0xc0032140
c0001313:	81 fb 34 21 03 c0    	cmp    ebx,0xc0032134
c0001319:	0f 84 13 01 00 00    	je     c0001432 <dlmalloc+0x1ea>
c000131f:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0001322:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0001325:	83 e7 fc             	and    edi,0xfffffffc
c0001328:	81 fe ff 00 00 00    	cmp    esi,0xff
c000132e:	77 4c                	ja     c000137c <dlmalloc+0x134>
c0001330:	3d 34 21 03 c0       	cmp    eax,0xc0032134
c0001335:	75 45                	jne    c000137c <dlmalloc+0x134>
c0001337:	39 1d 30 21 03 c0    	cmp    DWORD PTR ds:0xc0032130,ebx
c000133d:	75 3d                	jne    c000137c <dlmalloc+0x134>
c000133f:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0001343:	73 37                	jae    c000137c <dlmalloc+0x134>
c0001345:	8d 04 33             	lea    eax,[ebx+esi*1]
c0001348:	89 fa                	mov    edx,edi
c000134a:	a3 3c 21 03 c0       	mov    ds:0xc003213c,eax
c000134f:	29 f2                	sub    edx,esi
c0001351:	83 ce 01             	or     esi,0x1
c0001354:	a3 40 21 03 c0       	mov    ds:0xc0032140,eax
c0001359:	89 d1                	mov    ecx,edx
c000135b:	a3 30 21 03 c0       	mov    ds:0xc0032130,eax
c0001360:	83 c9 01             	or     ecx,0x1
c0001363:	c7 40 08 34 21 03 c0 	mov    DWORD PTR [eax+0x8],0xc0032134
c000136a:	c7 40 0c 34 21 03 c0 	mov    DWORD PTR [eax+0xc],0xc0032134
c0001371:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001374:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001377:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c000137a:	eb 15                	jmp    c0001391 <dlmalloc+0x149>
c000137c:	a3 40 21 03 c0       	mov    ds:0xc0032140,eax
c0001381:	39 fe                	cmp    esi,edi
c0001383:	c7 40 08 34 21 03 c0 	mov    DWORD PTR [eax+0x8],0xc0032134
c000138a:	75 0d                	jne    c0001399 <dlmalloc+0x151>
c000138c:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001391:	8d 43 08             	lea    eax,[ebx+0x8]
c0001394:	e9 35 02 00 00       	jmp    c00015ce <dlmalloc+0x386>
c0001399:	81 ff ff 00 00 00    	cmp    edi,0xff
c000139f:	89 f8                	mov    eax,edi
c00013a1:	77 19                	ja     c00013bc <dlmalloc+0x174>
c00013a3:	c1 e8 03             	shr    eax,0x3
c00013a6:	8d 14 00             	lea    edx,[eax+eax*1]
c00013a9:	83 c2 0d             	add    edx,0xd
c00013ac:	8d 2c 95 f8 20 03 c0 	lea    ebp,[edx*4-0x3ffcdf08]
c00013b3:	8b 14 95 00 21 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffcdf00]
c00013ba:	eb 46                	jmp    c0001402 <dlmalloc+0x1ba>
c00013bc:	e8 5a f8 ff ff       	call   c0000c1b <largebin_index>
c00013c1:	8d 14 00             	lea    edx,[eax+eax*1]
c00013c4:	83 c2 0d             	add    edx,0xd
c00013c7:	8d 0c 95 00 21 03 c0 	lea    ecx,[edx*4-0x3ffcdf00]
c00013ce:	8b 14 95 00 21 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffcdf00]
c00013d5:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00013d8:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00013dc:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00013e0:	89 d5                	mov    ebp,edx
c00013e2:	74 1e                	je     c0001402 <dlmalloc+0x1ba>
c00013e4:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00013e7:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00013ea:	77 12                	ja     c00013fe <dlmalloc+0x1b6>
c00013ec:	83 cf 01             	or     edi,0x1
c00013ef:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00013f2:	76 05                	jbe    c00013f9 <dlmalloc+0x1b1>
c00013f4:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00013f7:	eb f6                	jmp    c00013ef <dlmalloc+0x1a7>
c00013f9:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00013fc:	eb 04                	jmp    c0001402 <dlmalloc+0x1ba>
c00013fe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001402:	89 c7                	mov    edi,eax
c0001404:	88 c1                	mov    cl,al
c0001406:	c1 ff 05             	sar    edi,0x5
c0001409:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000140d:	bf 01 00 00 00       	mov    edi,0x1
c0001412:	d3 e7                	shl    edi,cl
c0001414:	89 f8                	mov    eax,edi
c0001416:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000141a:	09 04 bd 34 24 03 c0 	or     DWORD PTR [edi*4-0x3ffcdbcc],eax
c0001421:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c0001424:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0001427:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c000142a:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c000142d:	e9 db fe ff ff       	jmp    c000130d <dlmalloc+0xc5>
c0001432:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001438:	76 78                	jbe    c00014b2 <dlmalloc+0x26a>
c000143a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000143e:	8d 04 c5 34 21 03 c0 	lea    eax,[eax*8-0x3ffcdecc]
c0001445:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001448:	8d 48 f8             	lea    ecx,[eax-0x8]
c000144b:	39 ca                	cmp    edx,ecx
c000144d:	74 63                	je     c00014b2 <dlmalloc+0x26a>
c000144f:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0001452:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001455:	83 e3 fc             	and    ebx,0xfffffffc
c0001458:	39 de                	cmp    esi,ebx
c000145a:	77 52                	ja     c00014ae <dlmalloc+0x266>
c000145c:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c000145f:	89 df                	mov    edi,ebx
c0001461:	01 d3                	add    ebx,edx
c0001463:	29 f7                	sub    edi,esi
c0001465:	83 ff 0f             	cmp    edi,0xf
c0001468:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000146b:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000146e:	8d 42 08             	lea    eax,[edx+0x8]
c0001471:	77 09                	ja     c000147c <dlmalloc+0x234>
c0001473:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001477:	e9 52 01 00 00       	jmp    c00015ce <dlmalloc+0x386>
c000147c:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000147f:	83 ce 01             	or     esi,0x1
c0001482:	89 0d 3c 21 03 c0    	mov    DWORD PTR ds:0xc003213c,ecx
c0001488:	89 0d 40 21 03 c0    	mov    DWORD PTR ds:0xc0032140,ecx
c000148e:	c7 41 08 34 21 03 c0 	mov    DWORD PTR [ecx+0x8],0xc0032134
c0001495:	c7 41 0c 34 21 03 c0 	mov    DWORD PTR [ecx+0xc],0xc0032134
c000149c:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000149f:	89 fa                	mov    edx,edi
c00014a1:	83 ca 01             	or     edx,0x1
c00014a4:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00014a7:	89 3b                	mov    DWORD PTR [ebx],edi
c00014a9:	e9 20 01 00 00       	jmp    c00015ce <dlmalloc+0x386>
c00014ae:	89 c2                	mov    edx,eax
c00014b0:	eb 99                	jmp    c000144b <dlmalloc+0x203>
c00014b2:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00014b6:	b8 01 00 00 00       	mov    eax,0x1
c00014bb:	41                   	inc    ecx
c00014bc:	8d 14 cd 2c 21 03 c0 	lea    edx,[ecx*8-0x3ffcded4]
c00014c3:	89 cb                	mov    ebx,ecx
c00014c5:	c1 eb 05             	shr    ebx,0x5
c00014c8:	8b 3c 9d 34 24 03 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffcdbcc]
c00014cf:	d3 e0                	shl    eax,cl
c00014d1:	39 f8                	cmp    eax,edi
c00014d3:	77 04                	ja     c00014d9 <dlmalloc+0x291>
c00014d5:	85 c0                	test   eax,eax
c00014d7:	75 26                	jne    c00014ff <dlmalloc+0x2b7>
c00014d9:	43                   	inc    ebx
c00014da:	83 fb 02             	cmp    ebx,0x2
c00014dd:	0f 87 a6 00 00 00    	ja     c0001589 <dlmalloc+0x341>
c00014e3:	8b 3c 9d 34 24 03 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffcdbcc]
c00014ea:	85 ff                	test   edi,edi
c00014ec:	74 eb                	je     c00014d9 <dlmalloc+0x291>
c00014ee:	89 d8                	mov    eax,ebx
c00014f0:	c1 e0 06             	shl    eax,0x6
c00014f3:	8d 14 85 2c 21 03 c0 	lea    edx,[eax*4-0x3ffcded4]
c00014fa:	b8 01 00 00 00       	mov    eax,0x1
c00014ff:	85 f8                	test   eax,edi
c0001501:	75 07                	jne    c000150a <dlmalloc+0x2c2>
c0001503:	83 c2 08             	add    edx,0x8
c0001506:	01 c0                	add    eax,eax
c0001508:	eb f5                	jmp    c00014ff <dlmalloc+0x2b7>
c000150a:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c000150d:	39 ca                	cmp    edx,ecx
c000150f:	75 14                	jne    c0001525 <dlmalloc+0x2dd>
c0001511:	89 c1                	mov    ecx,eax
c0001513:	83 c2 08             	add    edx,0x8
c0001516:	f7 d1                	not    ecx
c0001518:	01 c0                	add    eax,eax
c000151a:	21 cf                	and    edi,ecx
c000151c:	89 3c 9d 34 24 03 c0 	mov    DWORD PTR [ebx*4-0x3ffcdbcc],edi
c0001523:	eb ac                	jmp    c00014d1 <dlmalloc+0x289>
c0001525:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0001528:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c000152b:	83 e0 fc             	and    eax,0xfffffffc
c000152e:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001531:	89 c3                	mov    ebx,eax
c0001533:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001536:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001539:	29 f3                	sub    ebx,esi
c000153b:	8d 41 08             	lea    eax,[ecx+0x8]
c000153e:	83 fb 0f             	cmp    ebx,0xf
c0001541:	77 09                	ja     c000154c <dlmalloc+0x304>
c0001543:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001547:	e9 82 00 00 00       	jmp    c00015ce <dlmalloc+0x386>
c000154c:	8d 3c 31             	lea    edi,[ecx+esi*1]
c000154f:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001555:	89 3d 3c 21 03 c0    	mov    DWORD PTR ds:0xc003213c,edi
c000155b:	89 3d 40 21 03 c0    	mov    DWORD PTR ds:0xc0032140,edi
c0001561:	c7 47 08 34 21 03 c0 	mov    DWORD PTR [edi+0x8],0xc0032134
c0001568:	c7 47 0c 34 21 03 c0 	mov    DWORD PTR [edi+0xc],0xc0032134
c000156f:	77 06                	ja     c0001577 <dlmalloc+0x32f>
c0001571:	89 3d 30 21 03 c0    	mov    DWORD PTR ds:0xc0032130,edi
c0001577:	83 ce 01             	or     esi,0x1
c000157a:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c000157d:	89 d9                	mov    ecx,ebx
c000157f:	83 c9 01             	or     ecx,0x1
c0001582:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001585:	89 1a                	mov    DWORD PTR [edx],ebx
c0001587:	eb 45                	jmp    c00015ce <dlmalloc+0x386>
c0001589:	a1 2c 21 03 c0       	mov    eax,ds:0xc003212c
c000158e:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001591:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001594:	83 e2 fc             	and    edx,0xfffffffc
c0001597:	39 d1                	cmp    ecx,edx
c0001599:	77 1e                	ja     c00015b9 <dlmalloc+0x371>
c000159b:	89 f3                	mov    ebx,esi
c000159d:	29 f2                	sub    edx,esi
c000159f:	8d 0c 30             	lea    ecx,[eax+esi*1]
c00015a2:	83 cb 01             	or     ebx,0x1
c00015a5:	89 0d 2c 21 03 c0    	mov    DWORD PTR ds:0xc003212c,ecx
c00015ab:	83 ca 01             	or     edx,0x1
c00015ae:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015b1:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00015b4:	e9 2d fd ff ff       	jmp    c00012e6 <dlmalloc+0x9e>
c00015b9:	83 c4 1c             	add    esp,0x1c
c00015bc:	89 f0                	mov    eax,esi
c00015be:	5b                   	pop    ebx
c00015bf:	ba 00 21 03 c0       	mov    edx,0xc0032100
c00015c4:	5e                   	pop    esi
c00015c5:	5f                   	pop    edi
c00015c6:	5d                   	pop    ebp
c00015c7:	e9 ce f8 ff ff       	jmp    c0000e9a <sYSMALLOc>
c00015cc:	31 c0                	xor    eax,eax
c00015ce:	83 c4 1c             	add    esp,0x1c
c00015d1:	5b                   	pop    ebx
c00015d2:	5e                   	pop    esi
c00015d3:	5f                   	pop    edi
c00015d4:	5d                   	pop    ebp
c00015d5:	c3                   	ret    

c00015d6 <iALLOc>:
c00015d6:	55                   	push   ebp
c00015d7:	89 c5                	mov    ebp,eax
c00015d9:	57                   	push   edi
c00015da:	56                   	push   esi
c00015db:	53                   	push   ebx
c00015dc:	83 ec 2c             	sub    esp,0x2c
c00015df:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00015e3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00015e7:	83 3d 00 21 03 c0 00 	cmp    DWORD PTR ds:0xc0032100,0x0
c00015ee:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00015f2:	75 12                	jne    c0001606 <iALLOc+0x30>
c00015f4:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00015f8:	b8 00 21 03 c0       	mov    eax,0xc0032100
c00015fd:	e8 9d f6 ff ff       	call   c0000c9f <malloc_consolidate>
c0001602:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001606:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000160b:	74 12                	je     c000161f <iALLOc+0x49>
c000160d:	85 ed                	test   ebp,ebp
c000160f:	0f 84 64 01 00 00    	je     c0001779 <iALLOc+0x1a3>
c0001615:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000161d:	eb 33                	jmp    c0001652 <iALLOc+0x7c>
c000161f:	85 ed                	test   ebp,ebp
c0001621:	75 14                	jne    c0001637 <iALLOc+0x61>
c0001623:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c000162b:	83 c4 2c             	add    esp,0x2c
c000162e:	5b                   	pop    ebx
c000162f:	5e                   	pop    esi
c0001630:	5f                   	pop    edi
c0001631:	5d                   	pop    ebp
c0001632:	e9 11 fc ff ff       	jmp    c0001248 <dlmalloc>
c0001637:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c000163f:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c0001646:	83 f8 0f             	cmp    eax,0xf
c0001649:	76 07                	jbe    c0001652 <iALLOc+0x7c>
c000164b:	83 e0 f8             	and    eax,0xfffffff8
c000164e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001652:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001657:	75 09                	jne    c0001662 <iALLOc+0x8c>
c0001659:	89 d0                	mov    eax,edx
c000165b:	31 f6                	xor    esi,esi
c000165d:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001660:	eb 3b                	jmp    c000169d <iALLOc+0xc7>
c0001662:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c000166a:	8b 02                	mov    eax,DWORD PTR [edx]
c000166c:	83 c0 0b             	add    eax,0xb
c000166f:	83 f8 0f             	cmp    eax,0xf
c0001672:	76 07                	jbe    c000167b <iALLOc+0xa5>
c0001674:	83 e0 f8             	and    eax,0xfffffff8
c0001677:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000167b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000167f:	0f af f5             	imul   esi,ebp
c0001682:	eb 25                	jmp    c00016a9 <iALLOc+0xd3>
c0001684:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001686:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001689:	bb 10 00 00 00       	mov    ebx,0x10
c000168e:	83 f9 0f             	cmp    ecx,0xf
c0001691:	76 05                	jbe    c0001698 <iALLOc+0xc2>
c0001693:	83 e1 f8             	and    ecx,0xfffffff8
c0001696:	89 cb                	mov    ebx,ecx
c0001698:	01 de                	add    esi,ebx
c000169a:	83 c0 04             	add    eax,0x4
c000169d:	39 c7                	cmp    edi,eax
c000169f:	75 e3                	jne    c0001684 <iALLOc+0xae>
c00016a1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00016a9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00016ad:	83 ec 0c             	sub    esp,0xc
c00016b0:	8b 1d 54 24 03 c0    	mov    ebx,DWORD PTR ds:0xc0032454
c00016b6:	c7 05 54 24 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032454,0x0
c00016c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00016c4:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c00016c8:	50                   	push   eax
c00016c9:	e8 7a fb ff ff       	call   c0001248 <dlmalloc>
c00016ce:	83 c4 10             	add    esp,0x10
c00016d1:	89 1d 54 24 03 c0    	mov    DWORD PTR ds:0xc0032454,ebx
c00016d7:	85 c0                	test   eax,eax
c00016d9:	0f 84 92 00 00 00    	je     c0001771 <iALLOc+0x19b>
c00016df:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00016e2:	8d 78 f8             	lea    edi,[eax-0x8]
c00016e5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00016e9:	83 e3 fc             	and    ebx,0xfffffffc
c00016ec:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00016f1:	74 1e                	je     c0001711 <iALLOc+0x13b>
c00016f3:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00016f7:	89 d9                	mov    ecx,ebx
c00016f9:	52                   	push   edx
c00016fa:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00016fe:	83 e9 04             	sub    ecx,0x4
c0001701:	51                   	push   ecx
c0001702:	6a 00                	push   0x0
c0001704:	50                   	push   eax
c0001705:	e8 e6 ed ff ff       	call   c00004f0 <memset>
c000170a:	83 c4 10             	add    esp,0x10
c000170d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001711:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0001716:	75 14                	jne    c000172c <iALLOc+0x156>
c0001718:	8d 04 37             	lea    eax,[edi+esi*1]
c000171b:	29 f3                	sub    ebx,esi
c000171d:	8d 48 08             	lea    ecx,[eax+0x8]
c0001720:	83 cb 01             	or     ebx,0x1
c0001723:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001726:	89 f3                	mov    ebx,esi
c0001728:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000172c:	31 c0                	xor    eax,eax
c000172e:	4d                   	dec    ebp
c000172f:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001733:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001736:	39 c5                	cmp    ebp,eax
c0001738:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c000173b:	74 2c                	je     c0001769 <iALLOc+0x193>
c000173d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001741:	85 c9                	test   ecx,ecx
c0001743:	75 15                	jne    c000175a <iALLOc+0x184>
c0001745:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001748:	8d 71 0b             	lea    esi,[ecx+0xb]
c000174b:	b9 10 00 00 00       	mov    ecx,0x10
c0001750:	83 fe 0f             	cmp    esi,0xf
c0001753:	76 05                	jbe    c000175a <iALLOc+0x184>
c0001755:	83 e6 f8             	and    esi,0xfffffff8
c0001758:	89 f1                	mov    ecx,esi
c000175a:	89 ce                	mov    esi,ecx
c000175c:	29 cb                	sub    ebx,ecx
c000175e:	83 ce 01             	or     esi,0x1
c0001761:	40                   	inc    eax
c0001762:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001765:	01 cf                	add    edi,ecx
c0001767:	eb c6                	jmp    c000172f <iALLOc+0x159>
c0001769:	83 cb 01             	or     ebx,0x1
c000176c:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000176f:	eb 08                	jmp    c0001779 <iALLOc+0x1a3>
c0001771:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001779:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000177d:	83 c4 2c             	add    esp,0x2c
c0001780:	5b                   	pop    ebx
c0001781:	5e                   	pop    esi
c0001782:	5f                   	pop    edi
c0001783:	5d                   	pop    ebp
c0001784:	c3                   	ret    

c0001785 <dlrealloc>:
c0001785:	55                   	push   ebp
c0001786:	57                   	push   edi
c0001787:	56                   	push   esi
c0001788:	53                   	push   ebx
c0001789:	83 ec 1c             	sub    esp,0x1c
c000178c:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001790:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001794:	85 db                	test   ebx,ebx
c0001796:	75 10                	jne    c00017a8 <dlrealloc+0x23>
c0001798:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000179c:	83 c4 1c             	add    esp,0x1c
c000179f:	5b                   	pop    ebx
c00017a0:	5e                   	pop    esi
c00017a1:	5f                   	pop    edi
c00017a2:	5d                   	pop    ebp
c00017a3:	e9 a0 fa ff ff       	jmp    c0001248 <dlmalloc>
c00017a8:	83 f8 df             	cmp    eax,0xffffffdf
c00017ab:	0f 87 a6 01 00 00    	ja     c0001957 <dlrealloc+0x1d2>
c00017b1:	83 c0 0b             	add    eax,0xb
c00017b4:	bd 10 00 00 00       	mov    ebp,0x10
c00017b9:	83 f8 0f             	cmp    eax,0xf
c00017bc:	76 05                	jbe    c00017c3 <dlrealloc+0x3e>
c00017be:	83 e0 f8             	and    eax,0xfffffff8
c00017c1:	89 c5                	mov    ebp,eax
c00017c3:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00017c6:	89 ce                	mov    esi,ecx
c00017c8:	83 e6 fc             	and    esi,0xfffffffc
c00017cb:	f6 c1 02             	test   cl,0x2
c00017ce:	0f 85 4e 01 00 00    	jne    c0001922 <dlrealloc+0x19d>
c00017d4:	8d 7b f8             	lea    edi,[ebx-0x8]
c00017d7:	39 f5                	cmp    ebp,esi
c00017d9:	0f 86 04 01 00 00    	jbe    c00018e3 <dlrealloc+0x15e>
c00017df:	8d 14 37             	lea    edx,[edi+esi*1]
c00017e2:	39 15 2c 21 03 c0    	cmp    DWORD PTR ds:0xc003212c,edx
c00017e8:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00017eb:	75 33                	jne    c0001820 <dlrealloc+0x9b>
c00017ed:	83 e0 fc             	and    eax,0xfffffffc
c00017f0:	01 f0                	add    eax,esi
c00017f2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00017f6:	8d 45 10             	lea    eax,[ebp+0x10]
c00017f9:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00017fd:	77 49                	ja     c0001848 <dlrealloc+0xc3>
c00017ff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001803:	83 e1 01             	and    ecx,0x1
c0001806:	01 ef                	add    edi,ebp
c0001808:	09 e9                	or     ecx,ebp
c000180a:	89 4b fc             	mov    DWORD PTR [ebx-0x4],ecx
c000180d:	89 3d 2c 21 03 c0    	mov    DWORD PTR ds:0xc003212c,edi
c0001813:	29 e8                	sub    eax,ebp
c0001815:	83 c8 01             	or     eax,0x1
c0001818:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c000181b:	e9 39 01 00 00       	jmp    c0001959 <dlrealloc+0x1d4>
c0001820:	89 c1                	mov    ecx,eax
c0001822:	83 e1 fe             	and    ecx,0xfffffffe
c0001825:	f6 44 0a 04 01       	test   BYTE PTR [edx+ecx*1+0x4],0x1
c000182a:	75 1c                	jne    c0001848 <dlrealloc+0xc3>
c000182c:	83 e0 fc             	and    eax,0xfffffffc
c000182f:	01 f0                	add    eax,esi
c0001831:	39 c5                	cmp    ebp,eax
c0001833:	77 13                	ja     c0001848 <dlrealloc+0xc3>
c0001835:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001838:	89 c6                	mov    esi,eax
c000183a:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000183d:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0001840:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0001843:	e9 9b 00 00 00       	jmp    c00018e3 <dlrealloc+0x15e>
c0001848:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000184c:	8d 45 f9             	lea    eax,[ebp-0x7]
c000184f:	83 ec 0c             	sub    esp,0xc
c0001852:	50                   	push   eax
c0001853:	e8 f0 f9 ff ff       	call   c0001248 <dlmalloc>
c0001858:	83 c4 10             	add    esp,0x10
c000185b:	85 c0                	test   eax,eax
c000185d:	0f 84 f4 00 00 00    	je     c0001957 <dlrealloc+0x1d2>
c0001863:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001867:	8d 48 f8             	lea    ecx,[eax-0x8]
c000186a:	39 ca                	cmp    edx,ecx
c000186c:	75 0a                	jne    c0001878 <dlrealloc+0xf3>
c000186e:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001871:	83 e0 fc             	and    eax,0xfffffffc
c0001874:	01 c6                	add    esi,eax
c0001876:	eb 6b                	jmp    c00018e3 <dlrealloc+0x15e>
c0001878:	8d 4e fc             	lea    ecx,[esi-0x4]
c000187b:	83 f9 27             	cmp    ecx,0x27
c000187e:	76 08                	jbe    c0001888 <dlrealloc+0x103>
c0001880:	89 de                	mov    esi,ebx
c0001882:	89 c7                	mov    edi,eax
c0001884:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001886:	eb 43                	jmp    c00018cb <dlrealloc+0x146>
c0001888:	8b 13                	mov    edx,DWORD PTR [ebx]
c000188a:	83 f9 13             	cmp    ecx,0x13
c000188d:	89 10                	mov    DWORD PTR [eax],edx
c000188f:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0001892:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0001895:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001898:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000189b:	76 2e                	jbe    c00018cb <dlrealloc+0x146>
c000189d:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00018a0:	83 f9 1b             	cmp    ecx,0x1b
c00018a3:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00018a6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00018a9:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00018ac:	76 1d                	jbe    c00018cb <dlrealloc+0x146>
c00018ae:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00018b1:	83 f9 23             	cmp    ecx,0x23
c00018b4:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00018b7:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00018ba:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00018bd:	76 0c                	jbe    c00018cb <dlrealloc+0x146>
c00018bf:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00018c2:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c00018c5:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00018c8:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00018cb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00018cf:	83 ec 0c             	sub    esp,0xc
c00018d2:	53                   	push   ebx
c00018d3:	e8 ae f4 ff ff       	call   c0000d86 <dlfree>
c00018d8:	83 c4 10             	add    esp,0x10
c00018db:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00018df:	89 c3                	mov    ebx,eax
c00018e1:	eb 76                	jmp    c0001959 <dlrealloc+0x1d4>
c00018e3:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00018e6:	8d 04 37             	lea    eax,[edi+esi*1]
c00018e9:	89 f2                	mov    edx,esi
c00018eb:	29 ea                	sub    edx,ebp
c00018ed:	83 e1 01             	and    ecx,0x1
c00018f0:	83 fa 0f             	cmp    edx,0xf
c00018f3:	77 0b                	ja     c0001900 <dlrealloc+0x17b>
c00018f5:	09 f1                	or     ecx,esi
c00018f7:	89 4b fc             	mov    DWORD PTR [ebx-0x4],ecx
c00018fa:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00018fe:	eb 59                	jmp    c0001959 <dlrealloc+0x1d4>
c0001900:	01 ef                	add    edi,ebp
c0001902:	83 ca 01             	or     edx,0x1
c0001905:	09 cd                	or     ebp,ecx
c0001907:	83 ec 0c             	sub    esp,0xc
c000190a:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c000190d:	83 c7 08             	add    edi,0x8
c0001910:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c0001913:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001917:	57                   	push   edi
c0001918:	e8 69 f4 ff ff       	call   c0000d86 <dlfree>
c000191d:	83 c4 10             	add    esp,0x10
c0001920:	eb 37                	jmp    c0001959 <dlrealloc+0x1d4>
c0001922:	8d 45 04             	lea    eax,[ebp+0x4]
c0001925:	39 f0                	cmp    eax,esi
c0001927:	76 30                	jbe    c0001959 <dlrealloc+0x1d4>
c0001929:	83 ec 0c             	sub    esp,0xc
c000192c:	83 ed 07             	sub    ebp,0x7
c000192f:	55                   	push   ebp
c0001930:	e8 13 f9 ff ff       	call   c0001248 <dlmalloc>
c0001935:	83 c4 10             	add    esp,0x10
c0001938:	85 c0                	test   eax,eax
c000193a:	89 c5                	mov    ebp,eax
c000193c:	74 19                	je     c0001957 <dlrealloc+0x1d2>
c000193e:	8d 4e f8             	lea    ecx,[esi-0x8]
c0001941:	89 c7                	mov    edi,eax
c0001943:	89 de                	mov    esi,ebx
c0001945:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001947:	83 ec 0c             	sub    esp,0xc
c000194a:	53                   	push   ebx
c000194b:	89 eb                	mov    ebx,ebp
c000194d:	e8 34 f4 ff ff       	call   c0000d86 <dlfree>
c0001952:	83 c4 10             	add    esp,0x10
c0001955:	eb 02                	jmp    c0001959 <dlrealloc+0x1d4>
c0001957:	31 db                	xor    ebx,ebx
c0001959:	83 c4 1c             	add    esp,0x1c
c000195c:	89 d8                	mov    eax,ebx
c000195e:	5b                   	pop    ebx
c000195f:	5e                   	pop    esi
c0001960:	5f                   	pop    edi
c0001961:	5d                   	pop    ebp
c0001962:	c3                   	ret    

c0001963 <dlmemalign>:
c0001963:	55                   	push   ebp
c0001964:	57                   	push   edi
c0001965:	56                   	push   esi
c0001966:	53                   	push   ebx
c0001967:	83 ec 0c             	sub    esp,0xc
c000196a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000196e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001972:	83 fa 08             	cmp    edx,0x8
c0001975:	77 10                	ja     c0001987 <dlmemalign+0x24>
c0001977:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000197b:	83 c4 0c             	add    esp,0xc
c000197e:	5b                   	pop    ebx
c000197f:	5e                   	pop    esi
c0001980:	5f                   	pop    edi
c0001981:	5d                   	pop    ebp
c0001982:	e9 c1 f8 ff ff       	jmp    c0001248 <dlmalloc>
c0001987:	83 fa 0f             	cmp    edx,0xf
c000198a:	bf 10 00 00 00       	mov    edi,0x10
c000198f:	76 13                	jbe    c00019a4 <dlmemalign+0x41>
c0001991:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001994:	85 d1                	test   ecx,edx
c0001996:	75 04                	jne    c000199c <dlmemalign+0x39>
c0001998:	89 d7                	mov    edi,edx
c000199a:	eb 08                	jmp    c00019a4 <dlmemalign+0x41>
c000199c:	39 d7                	cmp    edi,edx
c000199e:	73 04                	jae    c00019a4 <dlmemalign+0x41>
c00019a0:	01 ff                	add    edi,edi
c00019a2:	eb f8                	jmp    c000199c <dlmemalign+0x39>
c00019a4:	83 f8 df             	cmp    eax,0xffffffdf
c00019a7:	76 07                	jbe    c00019b0 <dlmemalign+0x4d>
c00019a9:	31 c0                	xor    eax,eax
c00019ab:	e9 ce 00 00 00       	jmp    c0001a7e <dlmemalign+0x11b>
c00019b0:	83 c0 0b             	add    eax,0xb
c00019b3:	bd 10 00 00 00       	mov    ebp,0x10
c00019b8:	83 f8 0f             	cmp    eax,0xf
c00019bb:	76 05                	jbe    c00019c2 <dlmemalign+0x5f>
c00019bd:	83 e0 f8             	and    eax,0xfffffff8
c00019c0:	89 c5                	mov    ebp,eax
c00019c2:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c00019c6:	83 ec 0c             	sub    esp,0xc
c00019c9:	50                   	push   eax
c00019ca:	e8 79 f8 ff ff       	call   c0001248 <dlmalloc>
c00019cf:	83 c4 10             	add    esp,0x10
c00019d2:	85 c0                	test   eax,eax
c00019d4:	89 c1                	mov    ecx,eax
c00019d6:	74 d1                	je     c00019a9 <dlmemalign+0x46>
c00019d8:	8d 70 f8             	lea    esi,[eax-0x8]
c00019db:	31 d2                	xor    edx,edx
c00019dd:	f7 f7                	div    edi
c00019df:	85 d2                	test   edx,edx
c00019e1:	74 62                	je     c0001a45 <dlmemalign+0xe2>
c00019e3:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c00019e7:	89 f8                	mov    eax,edi
c00019e9:	f7 d8                	neg    eax
c00019eb:	21 c3                	and    ebx,eax
c00019ed:	83 eb 08             	sub    ebx,0x8
c00019f0:	89 d8                	mov    eax,ebx
c00019f2:	29 f0                	sub    eax,esi
c00019f4:	83 f8 0f             	cmp    eax,0xf
c00019f7:	77 02                	ja     c00019fb <dlmemalign+0x98>
c00019f9:	01 fb                	add    ebx,edi
c00019fb:	89 d8                	mov    eax,ebx
c00019fd:	29 f0                	sub    eax,esi
c00019ff:	89 c6                	mov    esi,eax
c0001a01:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001a04:	89 c2                	mov    edx,eax
c0001a06:	83 e2 fc             	and    edx,0xfffffffc
c0001a09:	29 f2                	sub    edx,esi
c0001a0b:	a8 02                	test   al,0x2
c0001a0d:	74 10                	je     c0001a1f <dlmemalign+0xbc>
c0001a0f:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c0001a12:	83 ca 02             	or     edx,0x2
c0001a15:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001a18:	8d 43 08             	lea    eax,[ebx+0x8]
c0001a1b:	89 33                	mov    DWORD PTR [ebx],esi
c0001a1d:	eb 5f                	jmp    c0001a7e <dlmemalign+0x11b>
c0001a1f:	89 d0                	mov    eax,edx
c0001a21:	83 ec 0c             	sub    esp,0xc
c0001a24:	83 c8 01             	or     eax,0x1
c0001a27:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0001a2a:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001a2f:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001a32:	83 e0 01             	and    eax,0x1
c0001a35:	09 f0                	or     eax,esi
c0001a37:	89 de                	mov    esi,ebx
c0001a39:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c0001a3c:	51                   	push   ecx
c0001a3d:	e8 44 f3 ff ff       	call   c0000d86 <dlfree>
c0001a42:	83 c4 10             	add    esp,0x10
c0001a45:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001a48:	a8 02                	test   al,0x2
c0001a4a:	75 2f                	jne    c0001a7b <dlmemalign+0x118>
c0001a4c:	8d 55 10             	lea    edx,[ebp+0x10]
c0001a4f:	83 e0 fc             	and    eax,0xfffffffc
c0001a52:	39 c2                	cmp    edx,eax
c0001a54:	73 25                	jae    c0001a7b <dlmemalign+0x118>
c0001a56:	29 e8                	sub    eax,ebp
c0001a58:	83 ec 0c             	sub    esp,0xc
c0001a5b:	8d 14 2e             	lea    edx,[esi+ebp*1]
c0001a5e:	83 c8 01             	or     eax,0x1
c0001a61:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0001a64:	83 c2 08             	add    edx,0x8
c0001a67:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001a6a:	83 e0 01             	and    eax,0x1
c0001a6d:	09 c5                	or     ebp,eax
c0001a6f:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001a72:	52                   	push   edx
c0001a73:	e8 0e f3 ff ff       	call   c0000d86 <dlfree>
c0001a78:	83 c4 10             	add    esp,0x10
c0001a7b:	8d 46 08             	lea    eax,[esi+0x8]
c0001a7e:	83 c4 0c             	add    esp,0xc
c0001a81:	5b                   	pop    ebx
c0001a82:	5e                   	pop    esi
c0001a83:	5f                   	pop    edi
c0001a84:	5d                   	pop    ebp
c0001a85:	c3                   	ret    

c0001a86 <dlcalloc>:
c0001a86:	53                   	push   ebx
c0001a87:	83 ec 14             	sub    esp,0x14
c0001a8a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001a8e:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001a93:	50                   	push   eax
c0001a94:	e8 af f7 ff ff       	call   c0001248 <dlmalloc>
c0001a99:	83 c4 10             	add    esp,0x10
c0001a9c:	85 c0                	test   eax,eax
c0001a9e:	89 c3                	mov    ebx,eax
c0001aa0:	74 6e                	je     c0001b10 <dlcalloc+0x8a>
c0001aa2:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001aa5:	a8 02                	test   al,0x2
c0001aa7:	75 67                	jne    c0001b10 <dlcalloc+0x8a>
c0001aa9:	83 e0 fc             	and    eax,0xfffffffc
c0001aac:	83 e8 04             	sub    eax,0x4
c0001aaf:	83 f8 27             	cmp    eax,0x27
c0001ab2:	76 0f                	jbe    c0001ac3 <dlcalloc+0x3d>
c0001ab4:	52                   	push   edx
c0001ab5:	50                   	push   eax
c0001ab6:	6a 00                	push   0x0
c0001ab8:	53                   	push   ebx
c0001ab9:	e8 32 ea ff ff       	call   c00004f0 <memset>
c0001abe:	83 c4 10             	add    esp,0x10
c0001ac1:	eb 4d                	jmp    c0001b10 <dlcalloc+0x8a>
c0001ac3:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001ac9:	83 f8 13             	cmp    eax,0x13
c0001acc:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001ad3:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001ada:	76 34                	jbe    c0001b10 <dlcalloc+0x8a>
c0001adc:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001ae3:	83 f8 1b             	cmp    eax,0x1b
c0001ae6:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001aed:	76 21                	jbe    c0001b10 <dlcalloc+0x8a>
c0001aef:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001af6:	83 f8 23             	cmp    eax,0x23
c0001af9:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001b00:	76 0e                	jbe    c0001b10 <dlcalloc+0x8a>
c0001b02:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001b09:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001b10:	83 c4 08             	add    esp,0x8
c0001b13:	89 d8                	mov    eax,ebx
c0001b15:	5b                   	pop    ebx
c0001b16:	c3                   	ret    

c0001b17 <dlcfree>:
c0001b17:	e9 6a f2 ff ff       	jmp    c0000d86 <dlfree>

c0001b1c <dlindependent_calloc>:
c0001b1c:	83 ec 28             	sub    esp,0x28
c0001b1f:	b9 03 00 00 00       	mov    ecx,0x3
c0001b24:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001b28:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0001b2c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0001b30:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001b34:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001b38:	e8 99 fa ff ff       	call   c00015d6 <iALLOc>
c0001b3d:	83 c4 2c             	add    esp,0x2c
c0001b40:	c3                   	ret    

c0001b41 <dlindependent_comalloc>:
c0001b41:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001b45:	31 c9                	xor    ecx,ecx
c0001b47:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b4b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001b4f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001b53:	e9 7e fa ff ff       	jmp    c00015d6 <iALLOc>

c0001b58 <dlvalloc>:
c0001b58:	83 ec 0c             	sub    esp,0xc
c0001b5b:	83 3d 00 21 03 c0 00 	cmp    DWORD PTR ds:0xc0032100,0x0
c0001b62:	75 0a                	jne    c0001b6e <dlvalloc+0x16>
c0001b64:	b8 00 21 03 c0       	mov    eax,0xc0032100
c0001b69:	e8 31 f1 ff ff       	call   c0000c9f <malloc_consolidate>
c0001b6e:	50                   	push   eax
c0001b6f:	50                   	push   eax
c0001b70:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001b74:	ff 35 5c 24 03 c0    	push   DWORD PTR ds:0xc003245c
c0001b7a:	e8 e4 fd ff ff       	call   c0001963 <dlmemalign>
c0001b7f:	83 c4 1c             	add    esp,0x1c
c0001b82:	c3                   	ret    

c0001b83 <dlpvalloc>:
c0001b83:	83 ec 0c             	sub    esp,0xc
c0001b86:	83 3d 00 21 03 c0 00 	cmp    DWORD PTR ds:0xc0032100,0x0
c0001b8d:	75 0a                	jne    c0001b99 <dlpvalloc+0x16>
c0001b8f:	b8 00 21 03 c0       	mov    eax,0xc0032100
c0001b94:	e8 06 f1 ff ff       	call   c0000c9f <malloc_consolidate>
c0001b99:	52                   	push   edx
c0001b9a:	a1 5c 24 03 c0       	mov    eax,ds:0xc003245c
c0001b9f:	52                   	push   edx
c0001ba0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001ba4:	89 c1                	mov    ecx,eax
c0001ba6:	f7 d9                	neg    ecx
c0001ba8:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001bac:	21 ca                	and    edx,ecx
c0001bae:	52                   	push   edx
c0001baf:	50                   	push   eax
c0001bb0:	e8 ae fd ff ff       	call   c0001963 <dlmemalign>
c0001bb5:	83 c4 1c             	add    esp,0x1c
c0001bb8:	c3                   	ret    

c0001bb9 <dlmalloc_trim>:
c0001bb9:	b8 00 21 03 c0       	mov    eax,0xc0032100
c0001bbe:	e8 dc f0 ff ff       	call   c0000c9f <malloc_consolidate>
c0001bc3:	31 c0                	xor    eax,eax
c0001bc5:	c3                   	ret    

c0001bc6 <dlmalloc_usable_size>:
c0001bc6:	53                   	push   ebx
c0001bc7:	31 c0                	xor    eax,eax
c0001bc9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001bcd:	85 c9                	test   ecx,ecx
c0001bcf:	74 24                	je     c0001bf5 <dlmalloc_usable_size+0x2f>
c0001bd1:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001bd4:	f6 c2 02             	test   dl,0x2
c0001bd7:	74 08                	je     c0001be1 <dlmalloc_usable_size+0x1b>
c0001bd9:	83 e2 fc             	and    edx,0xfffffffc
c0001bdc:	8d 42 f8             	lea    eax,[edx-0x8]
c0001bdf:	eb 14                	jmp    c0001bf5 <dlmalloc_usable_size+0x2f>
c0001be1:	89 d3                	mov    ebx,edx
c0001be3:	31 c0                	xor    eax,eax
c0001be5:	83 e3 fe             	and    ebx,0xfffffffe
c0001be8:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001bed:	74 06                	je     c0001bf5 <dlmalloc_usable_size+0x2f>
c0001bef:	83 e2 fc             	and    edx,0xfffffffc
c0001bf2:	8d 42 fc             	lea    eax,[edx-0x4]
c0001bf5:	5b                   	pop    ebx
c0001bf6:	c3                   	ret    

c0001bf7 <dlmallinfo>:
c0001bf7:	55                   	push   ebp
c0001bf8:	57                   	push   edi
c0001bf9:	56                   	push   esi
c0001bfa:	53                   	push   ebx
c0001bfb:	83 ec 08             	sub    esp,0x8
c0001bfe:	83 3d 2c 21 03 c0 00 	cmp    DWORD PTR ds:0xc003212c,0x0
c0001c05:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001c09:	75 0a                	jne    c0001c15 <dlmallinfo+0x1e>
c0001c0b:	b8 00 21 03 c0       	mov    eax,0xc0032100
c0001c10:	e8 8a f0 ff ff       	call   c0000c9f <malloc_consolidate>
c0001c15:	a1 2c 21 03 c0       	mov    eax,ds:0xc003212c
c0001c1a:	31 ed                	xor    ebp,ebp
c0001c1c:	31 c9                	xor    ecx,ecx
c0001c1e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001c21:	83 e0 fc             	and    eax,0xfffffffc
c0001c24:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c28:	31 c0                	xor    eax,eax
c0001c2a:	8b 14 85 04 21 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcdefc]
c0001c31:	85 d2                	test   edx,edx
c0001c33:	74 0e                	je     c0001c43 <dlmallinfo+0x4c>
c0001c35:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001c38:	45                   	inc    ebp
c0001c39:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001c3c:	83 e6 fc             	and    esi,0xfffffffc
c0001c3f:	01 f1                	add    ecx,esi
c0001c41:	eb ee                	jmp    c0001c31 <dlmallinfo+0x3a>
c0001c43:	40                   	inc    eax
c0001c44:	83 f8 0a             	cmp    eax,0xa
c0001c47:	75 e1                	jne    c0001c2a <dlmallinfo+0x33>
c0001c49:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001c50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001c54:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001c57:	b8 34 21 03 c0       	mov    eax,0xc0032134
c0001c5c:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001c5f:	39 f0                	cmp    eax,esi
c0001c61:	74 10                	je     c0001c73 <dlmallinfo+0x7c>
c0001c63:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001c66:	ff 04 24             	inc    DWORD PTR [esp]
c0001c69:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001c6c:	83 e7 fc             	and    edi,0xfffffffc
c0001c6f:	01 fa                	add    edx,edi
c0001c71:	eb ec                	jmp    c0001c5f <dlmallinfo+0x68>
c0001c73:	83 c0 08             	add    eax,0x8
c0001c76:	3d 2c 24 03 c0       	cmp    eax,0xc003242c
c0001c7b:	75 df                	jne    c0001c5c <dlmallinfo+0x65>
c0001c7d:	8b 35 50 24 03 c0    	mov    esi,DWORD PTR ds:0xc0032450
c0001c83:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001c86:	a1 68 24 03 c0       	mov    eax,ds:0xc0032468
c0001c8b:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001c8e:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001c91:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001c94:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001c97:	8b 35 64 24 03 c0    	mov    esi,DWORD PTR ds:0xc0032464
c0001c9d:	89 03                	mov    DWORD PTR [ebx],eax
c0001c9f:	29 d0                	sub    eax,edx
c0001ca1:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001ca4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001ca8:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001cab:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001cae:	8b 35 74 24 03 c0    	mov    esi,DWORD PTR ds:0xc0032474
c0001cb4:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001cb7:	89 d8                	mov    eax,ebx
c0001cb9:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001cbc:	83 c4 08             	add    esp,0x8
c0001cbf:	5b                   	pop    ebx
c0001cc0:	5e                   	pop    esi
c0001cc1:	5f                   	pop    edi
c0001cc2:	5d                   	pop    ebp
c0001cc3:	c2 04 00             	ret    0x4

c0001cc6 <dlmalloc_stats>:
c0001cc6:	83 ec 30             	sub    esp,0x30
c0001cc9:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001ccd:	50                   	push   eax
c0001cce:	e8 24 ff ff ff       	call   c0001bf7 <dlmallinfo>
c0001cd3:	83 c4 30             	add    esp,0x30
c0001cd6:	c3                   	ret    

c0001cd7 <dlmallopt>:
c0001cd7:	56                   	push   esi
c0001cd8:	b8 00 21 03 c0       	mov    eax,0xc0032100
c0001cdd:	53                   	push   ebx
c0001cde:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001ce2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001ce6:	e8 b4 ef ff ff       	call   c0000c9f <malloc_consolidate>
c0001ceb:	8d 46 04             	lea    eax,[esi+0x4]
c0001cee:	83 f8 05             	cmp    eax,0x5
c0001cf1:	77 5d                	ja     c0001d50 <dlmallopt+0x79>
c0001cf3:	ff 24 85 64 9a 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd659c]
c0001cfa:	83 fb 50             	cmp    ebx,0x50
c0001cfd:	77 51                	ja     c0001d50 <dlmallopt+0x79>
c0001cff:	85 db                	test   ebx,ebx
c0001d01:	ba 08 00 00 00       	mov    edx,0x8
c0001d06:	74 12                	je     c0001d1a <dlmallopt+0x43>
c0001d08:	83 c3 0b             	add    ebx,0xb
c0001d0b:	ba 10 00 00 00       	mov    edx,0x10
c0001d10:	83 fb 0f             	cmp    ebx,0xf
c0001d13:	76 05                	jbe    c0001d1a <dlmallopt+0x43>
c0001d15:	89 da                	mov    edx,ebx
c0001d17:	83 e2 f8             	and    edx,0xfffffff8
c0001d1a:	a1 00 21 03 c0       	mov    eax,ds:0xc0032100
c0001d1f:	83 e0 03             	and    eax,0x3
c0001d22:	09 d0                	or     eax,edx
c0001d24:	a3 00 21 03 c0       	mov    ds:0xc0032100,eax
c0001d29:	eb 27                	jmp    c0001d52 <dlmallopt+0x7b>
c0001d2b:	89 1d 44 24 03 c0    	mov    DWORD PTR ds:0xc0032444,ebx
c0001d31:	eb 16                	jmp    c0001d49 <dlmallopt+0x72>
c0001d33:	89 1d 48 24 03 c0    	mov    DWORD PTR ds:0xc0032448,ebx
c0001d39:	eb 0e                	jmp    c0001d49 <dlmallopt+0x72>
c0001d3b:	89 1d 4c 24 03 c0    	mov    DWORD PTR ds:0xc003244c,ebx
c0001d41:	eb 06                	jmp    c0001d49 <dlmallopt+0x72>
c0001d43:	89 1d 54 24 03 c0    	mov    DWORD PTR ds:0xc0032454,ebx
c0001d49:	be 01 00 00 00       	mov    esi,0x1
c0001d4e:	eb 02                	jmp    c0001d52 <dlmallopt+0x7b>
c0001d50:	31 f6                	xor    esi,esi
c0001d52:	5b                   	pop    ebx
c0001d53:	89 f0                	mov    eax,esi
c0001d55:	5e                   	pop    esi
c0001d56:	c3                   	ret    
c0001d57:	90                   	nop

c0001d58 <isblank>:
c0001d58:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001d5d:	74 09                	je     c0001d68 <isblank+0x10>
c0001d5f:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001d64:	75 0a                	jne    c0001d70 <isblank+0x18>
c0001d66:	66 90                	xchg   ax,ax
c0001d68:	b8 01 00 00 00       	mov    eax,0x1
c0001d6d:	c3                   	ret    
c0001d6e:	66 90                	xchg   ax,ax
c0001d70:	b8 00 00 00 00       	mov    eax,0x0
c0001d75:	c3                   	ret    
c0001d76:	66 90                	xchg   ax,ax

c0001d78 <iscntrl>:
c0001d78:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001d7d:	7e 09                	jle    c0001d88 <iscntrl+0x10>
c0001d7f:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001d84:	75 0a                	jne    c0001d90 <iscntrl+0x18>
c0001d86:	66 90                	xchg   ax,ax
c0001d88:	b8 01 00 00 00       	mov    eax,0x1
c0001d8d:	c3                   	ret    
c0001d8e:	66 90                	xchg   ax,ax
c0001d90:	b8 00 00 00 00       	mov    eax,0x0
c0001d95:	c3                   	ret    
c0001d96:	66 90                	xchg   ax,ax

c0001d98 <isdigit>:
c0001d98:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001d9d:	7e 0d                	jle    c0001dac <isdigit+0x14>
c0001d9f:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001da4:	7f 06                	jg     c0001dac <isdigit+0x14>
c0001da6:	b8 01 00 00 00       	mov    eax,0x1
c0001dab:	c3                   	ret    
c0001dac:	b8 00 00 00 00       	mov    eax,0x0
c0001db1:	c3                   	ret    
c0001db2:	66 90                	xchg   ax,ax

c0001db4 <islower>:
c0001db4:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001db9:	7e 0d                	jle    c0001dc8 <islower+0x14>
c0001dbb:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001dc0:	7f 06                	jg     c0001dc8 <islower+0x14>
c0001dc2:	b8 01 00 00 00       	mov    eax,0x1
c0001dc7:	c3                   	ret    
c0001dc8:	b8 00 00 00 00       	mov    eax,0x0
c0001dcd:	c3                   	ret    
c0001dce:	66 90                	xchg   ax,ax

c0001dd0 <isspace>:
c0001dd0:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001dd5:	7c 19                	jl     c0001df0 <isspace+0x20>
c0001dd7:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001ddc:	7e 0a                	jle    c0001de8 <isspace+0x18>
c0001dde:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001de3:	75 0b                	jne    c0001df0 <isspace+0x20>
c0001de5:	8d 76 00             	lea    esi,[esi+0x0]
c0001de8:	b8 01 00 00 00       	mov    eax,0x1
c0001ded:	c3                   	ret    
c0001dee:	66 90                	xchg   ax,ax
c0001df0:	b8 00 00 00 00       	mov    eax,0x0
c0001df5:	c3                   	ret    
c0001df6:	66 90                	xchg   ax,ax

c0001df8 <isupper>:
c0001df8:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001dfd:	7e 0d                	jle    c0001e0c <isupper+0x14>
c0001dff:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001e04:	7f 06                	jg     c0001e0c <isupper+0x14>
c0001e06:	b8 01 00 00 00       	mov    eax,0x1
c0001e0b:	c3                   	ret    
c0001e0c:	b8 00 00 00 00       	mov    eax,0x0
c0001e11:	c3                   	ret    
c0001e12:	66 90                	xchg   ax,ax

c0001e14 <isalpha>:
c0001e14:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e18:	e8 db ff ff ff       	call   c0001df8 <isupper>
c0001e1d:	83 c4 04             	add    esp,0x4
c0001e20:	85 c0                	test   eax,eax
c0001e22:	75 10                	jne    c0001e34 <isalpha+0x20>
c0001e24:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e28:	e8 87 ff ff ff       	call   c0001db4 <islower>
c0001e2d:	83 c4 04             	add    esp,0x4
c0001e30:	85 c0                	test   eax,eax
c0001e32:	74 08                	je     c0001e3c <isalpha+0x28>
c0001e34:	b8 01 00 00 00       	mov    eax,0x1
c0001e39:	c3                   	ret    
c0001e3a:	66 90                	xchg   ax,ax
c0001e3c:	b8 00 00 00 00       	mov    eax,0x0
c0001e41:	c3                   	ret    
c0001e42:	66 90                	xchg   ax,ax

c0001e44 <isalnum>:
c0001e44:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e48:	e8 c7 ff ff ff       	call   c0001e14 <isalpha>
c0001e4d:	83 c4 04             	add    esp,0x4
c0001e50:	85 c0                	test   eax,eax
c0001e52:	75 10                	jne    c0001e64 <isalnum+0x20>
c0001e54:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e58:	e8 3b ff ff ff       	call   c0001d98 <isdigit>
c0001e5d:	83 c4 04             	add    esp,0x4
c0001e60:	85 c0                	test   eax,eax
c0001e62:	74 08                	je     c0001e6c <isalnum+0x28>
c0001e64:	b8 01 00 00 00       	mov    eax,0x1
c0001e69:	c3                   	ret    
c0001e6a:	66 90                	xchg   ax,ax
c0001e6c:	b8 00 00 00 00       	mov    eax,0x0
c0001e71:	c3                   	ret    
c0001e72:	66 90                	xchg   ax,ax

c0001e74 <ispunct>:
c0001e74:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e78:	e8 c7 ff ff ff       	call   c0001e44 <isalnum>
c0001e7d:	83 c4 04             	add    esp,0x4
c0001e80:	85 c0                	test   eax,eax
c0001e82:	75 28                	jne    c0001eac <ispunct+0x38>
c0001e84:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e88:	e8 43 ff ff ff       	call   c0001dd0 <isspace>
c0001e8d:	83 c4 04             	add    esp,0x4
c0001e90:	85 c0                	test   eax,eax
c0001e92:	75 18                	jne    c0001eac <ispunct+0x38>
c0001e94:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e98:	e8 db fe ff ff       	call   c0001d78 <iscntrl>
c0001e9d:	83 c4 04             	add    esp,0x4
c0001ea0:	85 c0                	test   eax,eax
c0001ea2:	75 08                	jne    c0001eac <ispunct+0x38>
c0001ea4:	b8 01 00 00 00       	mov    eax,0x1
c0001ea9:	c3                   	ret    
c0001eaa:	66 90                	xchg   ax,ax
c0001eac:	b8 00 00 00 00       	mov    eax,0x0
c0001eb1:	c3                   	ret    
c0001eb2:	66 90                	xchg   ax,ax

c0001eb4 <isgraph>:
c0001eb4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001eb8:	e8 87 ff ff ff       	call   c0001e44 <isalnum>
c0001ebd:	83 c4 04             	add    esp,0x4
c0001ec0:	85 c0                	test   eax,eax
c0001ec2:	75 10                	jne    c0001ed4 <isgraph+0x20>
c0001ec4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001ec8:	e8 a7 ff ff ff       	call   c0001e74 <ispunct>
c0001ecd:	83 c4 04             	add    esp,0x4
c0001ed0:	85 c0                	test   eax,eax
c0001ed2:	74 08                	je     c0001edc <isgraph+0x28>
c0001ed4:	b8 01 00 00 00       	mov    eax,0x1
c0001ed9:	c3                   	ret    
c0001eda:	66 90                	xchg   ax,ax
c0001edc:	b8 00 00 00 00       	mov    eax,0x0
c0001ee1:	c3                   	ret    
c0001ee2:	66 90                	xchg   ax,ax

c0001ee4 <isprint>:
c0001ee4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001ee8:	e8 c7 ff ff ff       	call   c0001eb4 <isgraph>
c0001eed:	83 c4 04             	add    esp,0x4
c0001ef0:	85 c0                	test   eax,eax
c0001ef2:	75 08                	jne    c0001efc <isprint+0x18>
c0001ef4:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001ef9:	75 09                	jne    c0001f04 <isprint+0x20>
c0001efb:	90                   	nop
c0001efc:	b8 01 00 00 00       	mov    eax,0x1
c0001f01:	c3                   	ret    
c0001f02:	66 90                	xchg   ax,ax
c0001f04:	b8 00 00 00 00       	mov    eax,0x0
c0001f09:	c3                   	ret    
c0001f0a:	66 90                	xchg   ax,ax

c0001f0c <isxdigit>:
c0001f0c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001f10:	e8 83 fe ff ff       	call   c0001d98 <isdigit>
c0001f15:	83 c4 04             	add    esp,0x4
c0001f18:	85 c0                	test   eax,eax
c0001f1a:	75 20                	jne    c0001f3c <isxdigit+0x30>
c0001f1c:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001f21:	7e 09                	jle    c0001f2c <isxdigit+0x20>
c0001f23:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001f28:	7e 12                	jle    c0001f3c <isxdigit+0x30>
c0001f2a:	66 90                	xchg   ax,ax
c0001f2c:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001f31:	7e 11                	jle    c0001f44 <isxdigit+0x38>
c0001f33:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001f38:	7f 0a                	jg     c0001f44 <isxdigit+0x38>
c0001f3a:	66 90                	xchg   ax,ax
c0001f3c:	b8 01 00 00 00       	mov    eax,0x1
c0001f41:	c3                   	ret    
c0001f42:	66 90                	xchg   ax,ax
c0001f44:	b8 00 00 00 00       	mov    eax,0x0
c0001f49:	c3                   	ret    
c0001f4a:	66 90                	xchg   ax,ax

c0001f4c <LWIP_PLATFORM_HTONS>:
c0001f4c:	83 ec 04             	sub    esp,0x4
c0001f4f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001f53:	66 89 04 24          	mov    WORD PTR [esp],ax
c0001f57:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0001f5b:	c1 e8 08             	shr    eax,0x8
c0001f5e:	89 c2                	mov    edx,eax
c0001f60:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0001f64:	c1 e0 08             	shl    eax,0x8
c0001f67:	09 d0                	or     eax,edx
c0001f69:	83 c4 04             	add    esp,0x4
c0001f6c:	c3                   	ret    
c0001f6d:	8d 76 00             	lea    esi,[esi+0x0]

c0001f70 <LWIP_PLATFORM_HTONL>:
c0001f70:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f74:	c1 e8 18             	shr    eax,0x18
c0001f77:	89 c2                	mov    edx,eax
c0001f79:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f7d:	c1 e8 08             	shr    eax,0x8
c0001f80:	25 00 ff 00 00       	and    eax,0xff00
c0001f85:	09 c2                	or     edx,eax
c0001f87:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f8b:	c1 e0 08             	shl    eax,0x8
c0001f8e:	25 00 00 ff 00       	and    eax,0xff0000
c0001f93:	09 c2                	or     edx,eax
c0001f95:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f99:	c1 e0 18             	shl    eax,0x18
c0001f9c:	09 d0                	or     eax,edx
c0001f9e:	c3                   	ret    

c0001f9f <disk_status>:
c0001f9f:	31 c0                	xor    eax,eax
c0001fa1:	c3                   	ret    

c0001fa2 <disk_initialize>:
c0001fa2:	31 c0                	xor    eax,eax
c0001fa4:	c3                   	ret    

c0001fa5 <disk_read>:
c0001fa5:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001faa:	0f b6 04 85 20 85 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffc7ae0]
c0001fb2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001fb6:	e9 69 cc 01 00       	jmp    c001ec24 <fatWrapperReadDisk>

c0001fbb <disk_write>:
c0001fbb:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001fc0:	0f b6 04 85 20 85 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffc7ae0]
c0001fc8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001fcc:	e9 93 cc 01 00       	jmp    c001ec64 <fatWrapperWriteDisk>

c0001fd1 <disk_ioctl>:
c0001fd1:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001fd6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001fda:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001fdf:	0f b6 04 85 20 85 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffc7ae0]
c0001fe7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001feb:	e9 b4 cc 01 00       	jmp    c001eca4 <fatWrapperIoctl>

c0001ff0 <ld_word>:
c0001ff0:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001ff4:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001ff7:	c1 e2 08             	shl    edx,0x8
c0001ffa:	09 d0                	or     eax,edx
c0001ffc:	c3                   	ret    

c0001ffd <ld_dword>:
c0001ffd:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0002001:	89 d1                	mov    ecx,edx
c0002003:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0002007:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000200a:	c1 e1 08             	shl    ecx,0x8
c000200d:	09 ca                	or     edx,ecx
c000200f:	c1 e2 08             	shl    edx,0x8
c0002012:	09 d0                	or     eax,edx
c0002014:	c3                   	ret    

c0002015 <st_word>:
c0002015:	66 89 10             	mov    WORD PTR [eax],dx
c0002018:	c3                   	ret    

c0002019 <st_dword>:
c0002019:	89 10                	mov    DWORD PTR [eax],edx
c000201b:	c3                   	ret    

c000201c <mem_cpy>:
c000201c:	85 c9                	test   ecx,ecx
c000201e:	74 10                	je     c0002030 <mem_cpy+0x14>
c0002020:	57                   	push   edi
c0002021:	01 c1                	add    ecx,eax
c0002023:	56                   	push   esi
c0002024:	89 c7                	mov    edi,eax
c0002026:	89 d6                	mov    esi,edx
c0002028:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0002029:	39 f9                	cmp    ecx,edi
c000202b:	75 fb                	jne    c0002028 <mem_cpy+0xc>
c000202d:	5e                   	pop    esi
c000202e:	5f                   	pop    edi
c000202f:	c3                   	ret    
c0002030:	c3                   	ret    

c0002031 <mem_set>:
c0002031:	01 c1                	add    ecx,eax
c0002033:	88 10                	mov    BYTE PTR [eax],dl
c0002035:	40                   	inc    eax
c0002036:	39 c8                	cmp    eax,ecx
c0002038:	75 f9                	jne    c0002033 <mem_set+0x2>
c000203a:	c3                   	ret    

c000203b <mem_cmp>:
c000203b:	57                   	push   edi
c000203c:	56                   	push   esi
c000203d:	89 c6                	mov    esi,eax
c000203f:	53                   	push   ebx
c0002040:	46                   	inc    esi
c0002041:	42                   	inc    edx
c0002042:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0002046:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c000204a:	29 fb                	sub    ebx,edi
c000204c:	89 cf                	mov    edi,ecx
c000204e:	29 f7                	sub    edi,esi
c0002050:	01 c7                	add    edi,eax
c0002052:	74 04                	je     c0002058 <mem_cmp+0x1d>
c0002054:	85 db                	test   ebx,ebx
c0002056:	74 e8                	je     c0002040 <mem_cmp+0x5>
c0002058:	89 d8                	mov    eax,ebx
c000205a:	5b                   	pop    ebx
c000205b:	5e                   	pop    esi
c000205c:	5f                   	pop    edi
c000205d:	c3                   	ret    

c000205e <chk_chr>:
c000205e:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0002061:	85 c9                	test   ecx,ecx
c0002063:	74 07                	je     c000206c <chk_chr+0xe>
c0002065:	39 d1                	cmp    ecx,edx
c0002067:	74 03                	je     c000206c <chk_chr+0xe>
c0002069:	40                   	inc    eax
c000206a:	eb f2                	jmp    c000205e <chk_chr>
c000206c:	89 c8                	mov    eax,ecx
c000206e:	c3                   	ret    

c000206f <dbc_1st>:
c000206f:	31 c0                	xor    eax,eax
c0002071:	c3                   	ret    

c0002072 <dbc_2nd>:
c0002072:	31 c0                	xor    eax,eax
c0002074:	c3                   	ret    

c0002075 <tchar2uni>:
c0002075:	57                   	push   edi
c0002076:	56                   	push   esi
c0002077:	53                   	push   ebx
c0002078:	8b 18                	mov    ebx,DWORD PTR [eax]
c000207a:	8a 0b                	mov    cl,BYTE PTR [ebx]
c000207c:	8d 73 01             	lea    esi,[ebx+0x1]
c000207f:	f6 c1 80             	test   cl,0x80
c0002082:	75 0a                	jne    c000208e <tchar2uni+0x19>
c0002084:	0f b6 d1             	movzx  edx,cl
c0002087:	89 f3                	mov    ebx,esi
c0002089:	e9 b2 00 00 00       	jmp    c0002140 <tchar2uni+0xcb>
c000208e:	89 ca                	mov    edx,ecx
c0002090:	81 e2 e0 00 00 00    	and    edx,0xe0
c0002096:	81 fa c0 00 00 00    	cmp    edx,0xc0
c000209c:	89 ca                	mov    edx,ecx
c000209e:	75 0a                	jne    c00020aa <tchar2uni+0x35>
c00020a0:	83 e2 1f             	and    edx,0x1f
c00020a3:	b9 01 00 00 00       	mov    ecx,0x1
c00020a8:	eb 37                	jmp    c00020e1 <tchar2uni+0x6c>
c00020aa:	81 e2 f0 00 00 00    	and    edx,0xf0
c00020b0:	81 fa e0 00 00 00    	cmp    edx,0xe0
c00020b6:	75 0c                	jne    c00020c4 <tchar2uni+0x4f>
c00020b8:	89 ca                	mov    edx,ecx
c00020ba:	b9 02 00 00 00       	mov    ecx,0x2
c00020bf:	83 e2 0f             	and    edx,0xf
c00020c2:	eb 1d                	jmp    c00020e1 <tchar2uni+0x6c>
c00020c4:	89 cf                	mov    edi,ecx
c00020c6:	83 ca ff             	or     edx,0xffffffff
c00020c9:	81 e7 f8 00 00 00    	and    edi,0xf8
c00020cf:	81 ff f0 00 00 00    	cmp    edi,0xf0
c00020d5:	75 70                	jne    c0002147 <tchar2uni+0xd2>
c00020d7:	89 ca                	mov    edx,ecx
c00020d9:	b9 03 00 00 00       	mov    ecx,0x3
c00020de:	83 e2 07             	and    edx,0x7
c00020e1:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c00020e5:	46                   	inc    esi
c00020e6:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c00020e9:	89 cf                	mov    edi,ecx
c00020eb:	81 e7 c0 00 00 00    	and    edi,0xc0
c00020f1:	83 c7 80             	add    edi,0xffffff80
c00020f4:	75 4e                	jne    c0002144 <tchar2uni+0xcf>
c00020f6:	c1 e2 06             	shl    edx,0x6
c00020f9:	83 e1 3f             	and    ecx,0x3f
c00020fc:	09 ca                	or     edx,ecx
c00020fe:	39 de                	cmp    esi,ebx
c0002100:	75 e3                	jne    c00020e5 <tchar2uni+0x70>
c0002102:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0002108:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c000210e:	76 34                	jbe    c0002144 <tchar2uni+0xcf>
c0002110:	8d 4a 80             	lea    ecx,[edx-0x80]
c0002113:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0002119:	77 29                	ja     c0002144 <tchar2uni+0xcf>
c000211b:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0002121:	76 1d                	jbe    c0002140 <tchar2uni+0xcb>
c0002123:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0002129:	81 e2 ff 03 00 00    	and    edx,0x3ff
c000212f:	c1 e1 06             	shl    ecx,0x6
c0002132:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0002138:	09 ca                	or     edx,ecx
c000213a:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0002140:	89 18                	mov    DWORD PTR [eax],ebx
c0002142:	eb 03                	jmp    c0002147 <tchar2uni+0xd2>
c0002144:	83 ca ff             	or     edx,0xffffffff
c0002147:	5b                   	pop    ebx
c0002148:	89 d0                	mov    eax,edx
c000214a:	5e                   	pop    esi
c000214b:	5f                   	pop    edi
c000214c:	c3                   	ret    

c000214d <put_utf>:
c000214d:	53                   	push   ebx
c000214e:	83 f8 7f             	cmp    eax,0x7f
c0002151:	89 c3                	mov    ebx,eax
c0002153:	b0 00                	mov    al,0x0
c0002155:	77 11                	ja     c0002168 <put_utf+0x1b>
c0002157:	85 c9                	test   ecx,ecx
c0002159:	0f 84 e5 00 00 00    	je     c0002244 <put_utf+0xf7>
c000215f:	88 1a                	mov    BYTE PTR [edx],bl
c0002161:	b0 01                	mov    al,0x1
c0002163:	e9 dc 00 00 00       	jmp    c0002244 <put_utf+0xf7>
c0002168:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c000216e:	77 23                	ja     c0002193 <put_utf+0x46>
c0002170:	83 f9 01             	cmp    ecx,0x1
c0002173:	0f 86 cb 00 00 00    	jbe    c0002244 <put_utf+0xf7>
c0002179:	89 d8                	mov    eax,ebx
c000217b:	83 e3 3f             	and    ebx,0x3f
c000217e:	c1 e8 06             	shr    eax,0x6
c0002181:	83 cb 80             	or     ebx,0xffffff80
c0002184:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0002187:	83 c8 c0             	or     eax,0xffffffc0
c000218a:	88 02                	mov    BYTE PTR [edx],al
c000218c:	b0 02                	mov    al,0x2
c000218e:	e9 b1 00 00 00       	jmp    c0002244 <put_utf+0xf7>
c0002193:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0002199:	77 40                	ja     c00021db <put_utf+0x8e>
c000219b:	83 f9 02             	cmp    ecx,0x2
c000219e:	0f 86 a0 00 00 00    	jbe    c0002244 <put_utf+0xf7>
c00021a4:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c00021aa:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c00021b0:	0f 86 8e 00 00 00    	jbe    c0002244 <put_utf+0xf7>
c00021b6:	89 d8                	mov    eax,ebx
c00021b8:	c1 e8 0c             	shr    eax,0xc
c00021bb:	83 c8 e0             	or     eax,0xffffffe0
c00021be:	88 02                	mov    BYTE PTR [edx],al
c00021c0:	89 d8                	mov    eax,ebx
c00021c2:	83 e3 3f             	and    ebx,0x3f
c00021c5:	c1 e8 06             	shr    eax,0x6
c00021c8:	83 cb 80             	or     ebx,0xffffff80
c00021cb:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c00021ce:	83 e0 3f             	and    eax,0x3f
c00021d1:	83 c8 80             	or     eax,0xffffff80
c00021d4:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c00021d7:	b0 03                	mov    al,0x3
c00021d9:	eb 69                	jmp    c0002244 <put_utf+0xf7>
c00021db:	83 f9 03             	cmp    ecx,0x3
c00021de:	76 64                	jbe    c0002244 <put_utf+0xf7>
c00021e0:	89 d9                	mov    ecx,ebx
c00021e2:	0f b7 c3             	movzx  eax,bx
c00021e5:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c00021eb:	66 31 c9             	xor    cx,cx
c00021ee:	81 c1 00 00 00 28    	add    ecx,0x28000000
c00021f4:	c1 e9 06             	shr    ecx,0x6
c00021f7:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c00021fd:	77 43                	ja     c0002242 <put_utf+0xf5>
c00021ff:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0002205:	77 3b                	ja     c0002242 <put_utf+0xf5>
c0002207:	09 cb                	or     ebx,ecx
c0002209:	81 c3 00 00 01 00    	add    ebx,0x10000
c000220f:	89 d8                	mov    eax,ebx
c0002211:	c1 e8 12             	shr    eax,0x12
c0002214:	83 c8 f0             	or     eax,0xfffffff0
c0002217:	88 02                	mov    BYTE PTR [edx],al
c0002219:	89 d8                	mov    eax,ebx
c000221b:	c1 e8 0c             	shr    eax,0xc
c000221e:	83 e0 3f             	and    eax,0x3f
c0002221:	83 c8 80             	or     eax,0xffffff80
c0002224:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0002227:	89 d8                	mov    eax,ebx
c0002229:	83 e3 3f             	and    ebx,0x3f
c000222c:	c1 e8 06             	shr    eax,0x6
c000222f:	83 cb 80             	or     ebx,0xffffff80
c0002232:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0002235:	83 e0 3f             	and    eax,0x3f
c0002238:	83 c8 80             	or     eax,0xffffff80
c000223b:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c000223e:	b0 04                	mov    al,0x4
c0002240:	eb 02                	jmp    c0002244 <put_utf+0xf7>
c0002242:	31 c0                	xor    eax,eax
c0002244:	5b                   	pop    ebx
c0002245:	c3                   	ret    

c0002246 <clst2sect>:
c0002246:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002249:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000224c:	83 ea 02             	sub    edx,0x2
c000224f:	39 ca                	cmp    edx,ecx
c0002251:	76 0d                	jbe    c0002260 <clst2sect+0x1a>
c0002253:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0002257:	0f af d1             	imul   edx,ecx
c000225a:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c000225d:	89 d0                	mov    eax,edx
c000225f:	c3                   	ret    
c0002260:	31 c0                	xor    eax,eax
c0002262:	c3                   	ret    

c0002263 <pick_lfn>:
c0002263:	55                   	push   ebp
c0002264:	57                   	push   edi
c0002265:	89 c7                	mov    edi,eax
c0002267:	56                   	push   esi
c0002268:	53                   	push   ebx
c0002269:	89 d3                	mov    ebx,edx
c000226b:	8d 42 1a             	lea    eax,[edx+0x1a]
c000226e:	e8 7d fd ff ff       	call   c0001ff0 <ld_word>
c0002273:	66 85 c0             	test   ax,ax
c0002276:	74 04                	je     c000227c <pick_lfn+0x19>
c0002278:	31 c0                	xor    eax,eax
c000227a:	eb 62                	jmp    c00022de <pick_lfn+0x7b>
c000227c:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000227f:	bd 01 00 00 00       	mov    ebp,0x1
c0002284:	31 f6                	xor    esi,esi
c0002286:	83 e1 bf             	and    ecx,0xffffffbf
c0002289:	49                   	dec    ecx
c000228a:	6b c9 0d             	imul   ecx,ecx,0xd
c000228d:	0f b6 86 c0 9b 02 c0 	movzx  eax,BYTE PTR [esi-0x3ffd6440]
c0002294:	01 d8                	add    eax,ebx
c0002296:	e8 55 fd ff ff       	call   c0001ff0 <ld_word>
c000229b:	66 85 ed             	test   bp,bp
c000229e:	74 11                	je     c00022b1 <pick_lfn+0x4e>
c00022a0:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00022a6:	77 d0                	ja     c0002278 <pick_lfn+0x15>
c00022a8:	66 89 04 4f          	mov    WORD PTR [edi+ecx*2],ax
c00022ac:	89 c5                	mov    ebp,eax
c00022ae:	41                   	inc    ecx
c00022af:	eb 0a                	jmp    c00022bb <pick_lfn+0x58>
c00022b1:	0f b7 c0             	movzx  eax,ax
c00022b4:	3d ff ff 00 00       	cmp    eax,0xffff
c00022b9:	75 bd                	jne    c0002278 <pick_lfn+0x15>
c00022bb:	46                   	inc    esi
c00022bc:	83 fe 0d             	cmp    esi,0xd
c00022bf:	75 cc                	jne    c000228d <pick_lfn+0x2a>
c00022c1:	f6 03 40             	test   BYTE PTR [ebx],0x40
c00022c4:	74 13                	je     c00022d9 <pick_lfn+0x76>
c00022c6:	66 85 ed             	test   bp,bp
c00022c9:	74 0e                	je     c00022d9 <pick_lfn+0x76>
c00022cb:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00022d1:	77 a5                	ja     c0002278 <pick_lfn+0x15>
c00022d3:	66 c7 04 4f 00 00    	mov    WORD PTR [edi+ecx*2],0x0
c00022d9:	b8 01 00 00 00       	mov    eax,0x1
c00022de:	5b                   	pop    ebx
c00022df:	5e                   	pop    esi
c00022e0:	5f                   	pop    edi
c00022e1:	5d                   	pop    ebp
c00022e2:	c3                   	ret    

c00022e3 <put_lfn>:
c00022e3:	55                   	push   ebp
c00022e4:	57                   	push   edi
c00022e5:	89 d7                	mov    edi,edx
c00022e7:	56                   	push   esi
c00022e8:	31 f6                	xor    esi,esi
c00022ea:	53                   	push   ebx
c00022eb:	83 ec 0c             	sub    esp,0xc
c00022ee:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00022f2:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c00022f6:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c00022fc:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0002300:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0002303:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002306:	31 d2                	xor    edx,edx
c0002308:	e8 08 fd ff ff       	call   c0002015 <st_word>
c000230d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002314:	0f b6 d9             	movzx  ebx,cl
c0002317:	4b                   	dec    ebx
c0002318:	6b db 0d             	imul   ebx,ebx,0xd
c000231b:	0f b7 c6             	movzx  eax,si
c000231e:	3d ff ff 00 00       	cmp    eax,0xffff
c0002323:	74 09                	je     c000232e <put_lfn+0x4b>
c0002325:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002329:	0f b7 34 58          	movzx  esi,WORD PTR [eax+ebx*2]
c000232d:	43                   	inc    ebx
c000232e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002331:	0f b7 ee             	movzx  ebp,si
c0002334:	89 ea                	mov    edx,ebp
c0002336:	0f b6 80 c0 9b 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd6440]
c000233d:	01 f8                	add    eax,edi
c000233f:	e8 d1 fc ff ff       	call   c0002015 <st_word>
c0002344:	85 ed                	test   ebp,ebp
c0002346:	75 05                	jne    c000234d <put_lfn+0x6a>
c0002348:	be ff ff 00 00       	mov    esi,0xffff
c000234d:	ff 04 24             	inc    DWORD PTR [esp]
c0002350:	83 3c 24 0d          	cmp    DWORD PTR [esp],0xd
c0002354:	75 c5                	jne    c000231b <put_lfn+0x38>
c0002356:	81 fe ff ff 00 00    	cmp    esi,0xffff
c000235c:	74 0b                	je     c0002369 <put_lfn+0x86>
c000235e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002362:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002367:	75 07                	jne    c0002370 <put_lfn+0x8d>
c0002369:	83 c9 40             	or     ecx,0x40
c000236c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002370:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0002374:	88 07                	mov    BYTE PTR [edi],al
c0002376:	83 c4 0c             	add    esp,0xc
c0002379:	5b                   	pop    ebx
c000237a:	5e                   	pop    esi
c000237b:	5f                   	pop    edi
c000237c:	5d                   	pop    ebp
c000237d:	c3                   	ret    

c000237e <gen_numname>:
c000237e:	57                   	push   edi
c000237f:	89 cf                	mov    edi,ecx
c0002381:	56                   	push   esi
c0002382:	b9 0b 00 00 00       	mov    ecx,0xb
c0002387:	53                   	push   ebx
c0002388:	89 c6                	mov    esi,eax
c000238a:	83 ec 10             	sub    esp,0x10
c000238d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002391:	e8 86 fc ff ff       	call   c000201c <mem_cpy>
c0002396:	83 fb 05             	cmp    ebx,0x5
c0002399:	76 30                	jbe    c00023cb <gen_numname+0x4d>
c000239b:	66 8b 07             	mov    ax,WORD PTR [edi]
c000239e:	66 85 c0             	test   ax,ax
c00023a1:	74 28                	je     c00023cb <gen_numname+0x4d>
c00023a3:	83 c7 02             	add    edi,0x2
c00023a6:	ba 10 00 00 00       	mov    edx,0x10
c00023ab:	89 c1                	mov    ecx,eax
c00023ad:	01 db                	add    ebx,ebx
c00023af:	c1 e0 10             	shl    eax,0x10
c00023b2:	83 e1 01             	and    ecx,0x1
c00023b5:	c1 e8 11             	shr    eax,0x11
c00023b8:	01 cb                	add    ebx,ecx
c00023ba:	0f ba e3 10          	bt     ebx,0x10
c00023be:	73 06                	jae    c00023c6 <gen_numname+0x48>
c00023c0:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00023c6:	4a                   	dec    edx
c00023c7:	75 e2                	jne    c00023ab <gen_numname+0x2d>
c00023c9:	eb d0                	jmp    c000239b <gen_numname+0x1d>
c00023cb:	b8 07 00 00 00       	mov    eax,0x7
c00023d0:	89 d9                	mov    ecx,ebx
c00023d2:	83 e1 0f             	and    ecx,0xf
c00023d5:	8d 79 30             	lea    edi,[ecx+0x30]
c00023d8:	83 ff 39             	cmp    edi,0x39
c00023db:	89 fa                	mov    edx,edi
c00023dd:	76 03                	jbe    c00023e2 <gen_numname+0x64>
c00023df:	8d 51 37             	lea    edx,[ecx+0x37]
c00023e2:	8d 48 ff             	lea    ecx,[eax-0x1]
c00023e5:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00023e9:	89 da                	mov    edx,ebx
c00023eb:	c1 ea 04             	shr    edx,0x4
c00023ee:	83 fb 0f             	cmp    ebx,0xf
c00023f1:	76 06                	jbe    c00023f9 <gen_numname+0x7b>
c00023f3:	89 c8                	mov    eax,ecx
c00023f5:	89 d3                	mov    ebx,edx
c00023f7:	eb d7                	jmp    c00023d0 <gen_numname+0x52>
c00023f9:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00023fe:	8d 58 fe             	lea    ebx,[eax-0x2]
c0002401:	31 d2                	xor    edx,edx
c0002403:	8d 04 16             	lea    eax,[esi+edx*1]
c0002406:	39 ca                	cmp    edx,ecx
c0002408:	73 19                	jae    c0002423 <gen_numname+0xa5>
c000240a:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000240d:	83 f8 20             	cmp    eax,0x20
c0002410:	74 11                	je     c0002423 <gen_numname+0xa5>
c0002412:	e8 58 fc ff ff       	call   c000206f <dbc_1st>
c0002417:	85 c0                	test   eax,eax
c0002419:	74 05                	je     c0002420 <gen_numname+0xa2>
c000241b:	39 d3                	cmp    ebx,edx
c000241d:	74 04                	je     c0002423 <gen_numname+0xa5>
c000241f:	42                   	inc    edx
c0002420:	42                   	inc    edx
c0002421:	eb e0                	jmp    c0002403 <gen_numname+0x85>
c0002423:	83 f9 07             	cmp    ecx,0x7
c0002426:	b0 20                	mov    al,0x20
c0002428:	77 05                	ja     c000242f <gen_numname+0xb1>
c000242a:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c000242e:	41                   	inc    ecx
c000242f:	42                   	inc    edx
c0002430:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002434:	83 fa 07             	cmp    edx,0x7
c0002437:	76 ea                	jbe    c0002423 <gen_numname+0xa5>
c0002439:	83 c4 10             	add    esp,0x10
c000243c:	5b                   	pop    ebx
c000243d:	5e                   	pop    esi
c000243e:	5f                   	pop    edi
c000243f:	c3                   	ret    

c0002440 <sum_sfn>:
c0002440:	53                   	push   ebx
c0002441:	31 c9                	xor    ecx,ecx
c0002443:	31 db                	xor    ebx,ebx
c0002445:	0f b6 d1             	movzx  edx,cl
c0002448:	d1 ea                	shr    edx,1
c000244a:	c1 e1 07             	shl    ecx,0x7
c000244d:	09 ca                	or     edx,ecx
c000244f:	8a 0c 18             	mov    cl,BYTE PTR [eax+ebx*1]
c0002452:	43                   	inc    ebx
c0002453:	01 ca                	add    edx,ecx
c0002455:	83 fb 0b             	cmp    ebx,0xb
c0002458:	88 d1                	mov    cl,dl
c000245a:	75 e9                	jne    c0002445 <sum_sfn+0x5>
c000245c:	5b                   	pop    ebx
c000245d:	88 d0                	mov    al,dl
c000245f:	c3                   	ret    

c0002460 <get_ldnumber>:
c0002460:	55                   	push   ebp
c0002461:	57                   	push   edi
c0002462:	56                   	push   esi
c0002463:	83 ce ff             	or     esi,0xffffffff
c0002466:	53                   	push   ebx
c0002467:	8b 10                	mov    edx,DWORD PTR [eax]
c0002469:	85 d2                	test   edx,edx
c000246b:	74 38                	je     c00024a5 <get_ldnumber+0x45>
c000246d:	89 c5                	mov    ebp,eax
c000246f:	89 d1                	mov    ecx,edx
c0002471:	41                   	inc    ecx
c0002472:	0f be 59 ff          	movsx  ebx,BYTE PTR [ecx-0x1]
c0002476:	80 fb 1f             	cmp    bl,0x1f
c0002479:	76 05                	jbe    c0002480 <get_ldnumber+0x20>
c000247b:	83 fb 3a             	cmp    ebx,0x3a
c000247e:	75 f1                	jne    c0002471 <get_ldnumber+0x11>
c0002480:	31 f6                	xor    esi,esi
c0002482:	83 fb 3a             	cmp    ebx,0x3a
c0002485:	75 1e                	jne    c00024a5 <get_ldnumber+0x45>
c0002487:	8a 1a                	mov    bl,BYTE PTR [edx]
c0002489:	83 ce ff             	or     esi,0xffffffff
c000248c:	8d 7b d0             	lea    edi,[ebx-0x30]
c000248f:	89 f8                	mov    eax,edi
c0002491:	3c 09                	cmp    al,0x9
c0002493:	77 10                	ja     c00024a5 <get_ldnumber+0x45>
c0002495:	83 c2 02             	add    edx,0x2
c0002498:	39 d1                	cmp    ecx,edx
c000249a:	75 09                	jne    c00024a5 <get_ldnumber+0x45>
c000249c:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c000249f:	0f be f3             	movsx  esi,bl
c00024a2:	83 ee 30             	sub    esi,0x30
c00024a5:	5b                   	pop    ebx
c00024a6:	89 f0                	mov    eax,esi
c00024a8:	5e                   	pop    esi
c00024a9:	5f                   	pop    edi
c00024aa:	5d                   	pop    ebp
c00024ab:	c3                   	ret    

c00024ac <validate>:
c00024ac:	56                   	push   esi
c00024ad:	85 c0                	test   eax,eax
c00024af:	53                   	push   ebx
c00024b0:	89 d6                	mov    esi,edx
c00024b2:	51                   	push   ecx
c00024b3:	75 09                	jne    c00024be <validate+0x12>
c00024b5:	b8 09 00 00 00       	mov    eax,0x9
c00024ba:	31 c9                	xor    ecx,ecx
c00024bc:	eb 2e                	jmp    c00024ec <validate+0x40>
c00024be:	89 c3                	mov    ebx,eax
c00024c0:	8b 00                	mov    eax,DWORD PTR [eax]
c00024c2:	85 c0                	test   eax,eax
c00024c4:	74 ef                	je     c00024b5 <validate+0x9>
c00024c6:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00024c9:	74 ea                	je     c00024b5 <validate+0x9>
c00024cb:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00024ce:	66 39 50 06          	cmp    WORD PTR [eax+0x6],dx
c00024d2:	75 e1                	jne    c00024b5 <validate+0x9>
c00024d4:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00024d8:	83 ec 0c             	sub    esp,0xc
c00024db:	50                   	push   eax
c00024dc:	e8 be fa ff ff       	call   c0001f9f <disk_status>
c00024e1:	83 c4 10             	add    esp,0x10
c00024e4:	a8 01                	test   al,0x1
c00024e6:	75 cd                	jne    c00024b5 <validate+0x9>
c00024e8:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00024ea:	31 c0                	xor    eax,eax
c00024ec:	89 0e                	mov    DWORD PTR [esi],ecx
c00024ee:	5a                   	pop    edx
c00024ef:	5b                   	pop    ebx
c00024f0:	5e                   	pop    esi
c00024f1:	c3                   	ret    

c00024f2 <sync_window>:
c00024f2:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00024f6:	74 58                	je     c0002550 <sync_window+0x5e>
c00024f8:	56                   	push   esi
c00024f9:	53                   	push   ebx
c00024fa:	89 c3                	mov    ebx,eax
c00024fc:	51                   	push   ecx
c00024fd:	6a 01                	push   0x1
c00024ff:	ff 70 30             	push   DWORD PTR [eax+0x30]
c0002502:	8d 70 34             	lea    esi,[eax+0x34]
c0002505:	56                   	push   esi
c0002506:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000250a:	50                   	push   eax
c000250b:	e8 ab fa ff ff       	call   c0001fbb <disk_write>
c0002510:	83 c4 10             	add    esp,0x10
c0002513:	ba 01 00 00 00       	mov    edx,0x1
c0002518:	85 c0                	test   eax,eax
c000251a:	75 2e                	jne    c000254a <sync_window+0x58>
c000251c:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0002520:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0002523:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0002526:	89 c1                	mov    ecx,eax
c0002528:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c000252b:	39 d1                	cmp    ecx,edx
c000252d:	73 19                	jae    c0002548 <sync_window+0x56>
c000252f:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002533:	75 13                	jne    c0002548 <sync_window+0x56>
c0002535:	6a 01                	push   0x1
c0002537:	01 d0                	add    eax,edx
c0002539:	50                   	push   eax
c000253a:	56                   	push   esi
c000253b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000253f:	50                   	push   eax
c0002540:	e8 76 fa ff ff       	call   c0001fbb <disk_write>
c0002545:	83 c4 10             	add    esp,0x10
c0002548:	31 d2                	xor    edx,edx
c000254a:	89 d0                	mov    eax,edx
c000254c:	5a                   	pop    edx
c000254d:	5b                   	pop    ebx
c000254e:	5e                   	pop    esi
c000254f:	c3                   	ret    
c0002550:	31 d2                	xor    edx,edx
c0002552:	89 d0                	mov    eax,edx
c0002554:	c3                   	ret    

c0002555 <move_window>:
c0002555:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c0002558:	74 3a                	je     c0002594 <move_window+0x3f>
c000255a:	56                   	push   esi
c000255b:	89 d6                	mov    esi,edx
c000255d:	53                   	push   ebx
c000255e:	89 c3                	mov    ebx,eax
c0002560:	51                   	push   ecx
c0002561:	e8 8c ff ff ff       	call   c00024f2 <sync_window>
c0002566:	85 c0                	test   eax,eax
c0002568:	75 2d                	jne    c0002597 <move_window+0x42>
c000256a:	6a 01                	push   0x1
c000256c:	56                   	push   esi
c000256d:	8d 43 34             	lea    eax,[ebx+0x34]
c0002570:	50                   	push   eax
c0002571:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002575:	50                   	push   eax
c0002576:	e8 2a fa ff ff       	call   c0001fa5 <disk_read>
c000257b:	83 c4 10             	add    esp,0x10
c000257e:	89 c2                	mov    edx,eax
c0002580:	31 c0                	xor    eax,eax
c0002582:	85 d2                	test   edx,edx
c0002584:	ba ff ff ff ff       	mov    edx,0xffffffff
c0002589:	0f 45 f2             	cmovne esi,edx
c000258c:	0f 95 c0             	setne  al
c000258f:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c0002592:	eb 03                	jmp    c0002597 <move_window+0x42>
c0002594:	31 c0                	xor    eax,eax
c0002596:	c3                   	ret    
c0002597:	5a                   	pop    edx
c0002598:	5b                   	pop    ebx
c0002599:	5e                   	pop    esi
c000259a:	c3                   	ret    

c000259b <check_fs>:
c000259b:	53                   	push   ebx
c000259c:	89 c3                	mov    ebx,eax
c000259e:	83 ec 08             	sub    esp,0x8
c00025a1:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00025a5:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c00025ac:	e8 a4 ff ff ff       	call   c0002555 <move_window>
c00025b1:	ba 04 00 00 00       	mov    edx,0x4
c00025b6:	85 c0                	test   eax,eax
c00025b8:	75 68                	jne    c0002622 <check_fs+0x87>
c00025ba:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00025c0:	e8 2b fa ff ff       	call   c0001ff0 <ld_word>
c00025c5:	ba 03 00 00 00       	mov    edx,0x3
c00025ca:	66 3d 55 aa          	cmp    ax,0xaa55
c00025ce:	75 52                	jne    c0002622 <check_fs+0x87>
c00025d0:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00025d3:	8d 50 18             	lea    edx,[eax+0x18]
c00025d6:	80 fa 01             	cmp    dl,0x1
c00025d9:	76 09                	jbe    c00025e4 <check_fs+0x49>
c00025db:	3c eb                	cmp    al,0xeb
c00025dd:	ba 02 00 00 00       	mov    edx,0x2
c00025e2:	75 3e                	jne    c0002622 <check_fs+0x87>
c00025e4:	ba 54 dc 02 c0       	mov    edx,0xc002dc54
c00025e9:	b9 03 00 00 00       	mov    ecx,0x3
c00025ee:	8d 43 6a             	lea    eax,[ebx+0x6a]
c00025f1:	e8 45 fa ff ff       	call   c000203b <mem_cmp>
c00025f6:	31 d2                	xor    edx,edx
c00025f8:	85 c0                	test   eax,eax
c00025fa:	74 26                	je     c0002622 <check_fs+0x87>
c00025fc:	ba 7c 9a 02 c0       	mov    edx,0xc0029a7c
c0002601:	b9 05 00 00 00       	mov    ecx,0x5
c0002606:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c000260c:	e8 2a fa ff ff       	call   c000203b <mem_cmp>
c0002611:	31 d2                	xor    edx,edx
c0002613:	85 c0                	test   eax,eax
c0002615:	74 0b                	je     c0002622 <check_fs+0x87>
c0002617:	31 d2                	xor    edx,edx
c0002619:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c000261d:	0f 95 c2             	setne  dl
c0002620:	01 d2                	add    edx,edx
c0002622:	83 c4 08             	add    esp,0x8
c0002625:	89 d0                	mov    eax,edx
c0002627:	5b                   	pop    ebx
c0002628:	c3                   	ret    

c0002629 <find_volume>:
c0002629:	55                   	push   ebp
c000262a:	57                   	push   edi
c000262b:	56                   	push   esi
c000262c:	89 c6                	mov    esi,eax
c000262e:	53                   	push   ebx
c000262f:	89 d3                	mov    ebx,edx
c0002631:	83 ec 2c             	sub    esp,0x2c
c0002634:	31 d2                	xor    edx,edx
c0002636:	e8 60 ff ff ff       	call   c000259b <check_fs>
c000263b:	85 db                	test   ebx,ebx
c000263d:	0f 94 c2             	sete   dl
c0002640:	83 f8 02             	cmp    eax,0x2
c0002643:	74 07                	je     c000264c <find_volume+0x23>
c0002645:	77 63                	ja     c00026aa <find_volume+0x81>
c0002647:	f6 c2 01             	test   dl,0x1
c000264a:	75 5e                	jne    c00026aa <find_volume+0x81>
c000264c:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c0002652:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002656:	8d be fa 01 00 00    	lea    edi,[esi+0x1fa]
c000265c:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c0002660:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0002664:	89 f8                	mov    eax,edi
c0002666:	83 c7 10             	add    edi,0x10
c0002669:	e8 8f f9 ff ff       	call   c0001ffd <ld_dword>
c000266e:	83 c5 04             	add    ebp,0x4
c0002671:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0002675:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0002678:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
c000267c:	75 e2                	jne    c0002660 <find_volume+0x37>
c000267e:	83 fb 01             	cmp    ebx,0x1
c0002681:	0f b6 fa             	movzx  edi,dl
c0002684:	83 d3 ff             	adc    ebx,0xffffffff
c0002687:	8b 54 9c 10          	mov    edx,DWORD PTR [esp+ebx*4+0x10]
c000268b:	b8 03 00 00 00       	mov    eax,0x3
c0002690:	85 d2                	test   edx,edx
c0002692:	74 07                	je     c000269b <find_volume+0x72>
c0002694:	89 f0                	mov    eax,esi
c0002696:	e8 00 ff ff ff       	call   c000259b <check_fs>
c000269b:	83 f8 01             	cmp    eax,0x1
c000269e:	76 0a                	jbe    c00026aa <find_volume+0x81>
c00026a0:	85 ff                	test   edi,edi
c00026a2:	74 06                	je     c00026aa <find_volume+0x81>
c00026a4:	43                   	inc    ebx
c00026a5:	83 fb 03             	cmp    ebx,0x3
c00026a8:	76 dd                	jbe    c0002687 <find_volume+0x5e>
c00026aa:	83 c4 2c             	add    esp,0x2c
c00026ad:	5b                   	pop    ebx
c00026ae:	5e                   	pop    esi
c00026af:	5f                   	pop    edi
c00026b0:	5d                   	pop    ebp
c00026b1:	c3                   	ret    

c00026b2 <mount_volume>:
c00026b2:	55                   	push   ebp
c00026b3:	89 d5                	mov    ebp,edx
c00026b5:	57                   	push   edi
c00026b6:	89 cf                	mov    edi,ecx
c00026b8:	56                   	push   esi
c00026b9:	53                   	push   ebx
c00026ba:	bb 0b 00 00 00       	mov    ebx,0xb
c00026bf:	83 ec 2c             	sub    esp,0x2c
c00026c2:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00026c8:	e8 93 fd ff ff       	call   c0002460 <get_ldnumber>
c00026cd:	85 c0                	test   eax,eax
c00026cf:	0f 88 d0 02 00 00    	js     c00029a5 <mount_volume+0x2f3>
c00026d5:	8b 34 85 a0 24 03 c0 	mov    esi,DWORD PTR [eax*4-0x3ffcdb60]
c00026dc:	89 c2                	mov    edx,eax
c00026de:	bb 0c 00 00 00       	mov    ebx,0xc
c00026e3:	85 f6                	test   esi,esi
c00026e5:	0f 84 ba 02 00 00    	je     c00029a5 <mount_volume+0x2f3>
c00026eb:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c00026ee:	83 e7 fe             	and    edi,0xfffffffe
c00026f1:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00026f4:	74 3c                	je     c0002732 <mount_volume+0x80>
c00026f6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00026fa:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00026fe:	83 ec 0c             	sub    esp,0xc
c0002701:	50                   	push   eax
c0002702:	e8 98 f8 ff ff       	call   c0001f9f <disk_status>
c0002707:	83 c4 10             	add    esp,0x10
c000270a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000270e:	a8 01                	test   al,0x1
c0002710:	75 20                	jne    c0002732 <mount_volume+0x80>
c0002712:	31 db                	xor    ebx,ebx
c0002714:	81 e7 fe 00 00 00    	and    edi,0xfe
c000271a:	0f 84 85 02 00 00    	je     c00029a5 <mount_volume+0x2f3>
c0002720:	a8 04                	test   al,0x4
c0002722:	0f 84 7d 02 00 00    	je     c00029a5 <mount_volume+0x2f3>
c0002728:	bb 0a 00 00 00       	mov    ebx,0xa
c000272d:	e9 73 02 00 00       	jmp    c00029a5 <mount_volume+0x2f3>
c0002732:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0002735:	83 ec 0c             	sub    esp,0xc
c0002738:	0f b6 c2             	movzx  eax,dl
c000273b:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c000273e:	bb 03 00 00 00       	mov    ebx,0x3
c0002743:	50                   	push   eax
c0002744:	e8 59 f8 ff ff       	call   c0001fa2 <disk_initialize>
c0002749:	83 c4 10             	add    esp,0x10
c000274c:	a8 01                	test   al,0x1
c000274e:	0f 85 51 02 00 00    	jne    c00029a5 <mount_volume+0x2f3>
c0002754:	81 e7 fe 00 00 00    	and    edi,0xfe
c000275a:	74 04                	je     c0002760 <mount_volume+0xae>
c000275c:	a8 04                	test   al,0x4
c000275e:	75 c8                	jne    c0002728 <mount_volume+0x76>
c0002760:	31 d2                	xor    edx,edx
c0002762:	89 f0                	mov    eax,esi
c0002764:	e8 c0 fe ff ff       	call   c0002629 <find_volume>
c0002769:	bb 01 00 00 00       	mov    ebx,0x1
c000276e:	83 f8 04             	cmp    eax,0x4
c0002771:	0f 84 2e 02 00 00    	je     c00029a5 <mount_volume+0x2f3>
c0002777:	83 f8 01             	cmp    eax,0x1
c000277a:	76 0a                	jbe    c0002786 <mount_volume+0xd4>
c000277c:	bb 0d 00 00 00       	mov    ebx,0xd
c0002781:	e9 1f 02 00 00       	jmp    c00029a5 <mount_volume+0x2f3>
c0002786:	8d 46 3f             	lea    eax,[esi+0x3f]
c0002789:	e8 62 f8 ff ff       	call   c0001ff0 <ld_word>
c000278e:	66 3d 00 02          	cmp    ax,0x200
c0002792:	75 e8                	jne    c000277c <mount_volume+0xca>
c0002794:	8d 46 4a             	lea    eax,[esi+0x4a]
c0002797:	e8 54 f8 ff ff       	call   c0001ff0 <ld_word>
c000279c:	0f b7 c0             	movzx  eax,ax
c000279f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00027a3:	85 c0                	test   eax,eax
c00027a5:	75 0c                	jne    c00027b3 <mount_volume+0x101>
c00027a7:	8d 46 58             	lea    eax,[esi+0x58]
c00027aa:	e8 4e f8 ff ff       	call   c0001ffd <ld_dword>
c00027af:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00027b3:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c00027b6:	8b 6e 44             	mov    ebp,DWORD PTR [esi+0x44]
c00027b9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00027bd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00027c1:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00027c4:	89 e8                	mov    eax,ebp
c00027c6:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00027c9:	8d 45 ff             	lea    eax,[ebp-0x1]
c00027cc:	3c 01                	cmp    al,0x1
c00027ce:	77 ac                	ja     c000277c <mount_volume+0xca>
c00027d0:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00027d4:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00027d8:	66 85 c0             	test   ax,ax
c00027db:	89 c3                	mov    ebx,eax
c00027dd:	74 9d                	je     c000277c <mount_volume+0xca>
c00027df:	8d 40 ff             	lea    eax,[eax-0x1]
c00027e2:	85 d8                	test   eax,ebx
c00027e4:	75 96                	jne    c000277c <mount_volume+0xca>
c00027e6:	8d 46 45             	lea    eax,[esi+0x45]
c00027e9:	e8 02 f8 ff ff       	call   c0001ff0 <ld_word>
c00027ee:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c00027f2:	a8 0f                	test   al,0xf
c00027f4:	89 c7                	mov    edi,eax
c00027f6:	75 84                	jne    c000277c <mount_volume+0xca>
c00027f8:	8d 46 47             	lea    eax,[esi+0x47]
c00027fb:	e8 f0 f7 ff ff       	call   c0001ff0 <ld_word>
c0002800:	0f b7 d0             	movzx  edx,ax
c0002803:	85 d2                	test   edx,edx
c0002805:	75 0a                	jne    c0002811 <mount_volume+0x15f>
c0002807:	8d 46 54             	lea    eax,[esi+0x54]
c000280a:	e8 ee f7 ff ff       	call   c0001ffd <ld_dword>
c000280f:	89 c2                	mov    edx,eax
c0002811:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002815:	8d 46 42             	lea    eax,[esi+0x42]
c0002818:	e8 d3 f7 ff ff       	call   c0001ff0 <ld_word>
c000281d:	0f b7 c8             	movzx  ecx,ax
c0002820:	85 c9                	test   ecx,ecx
c0002822:	0f 84 54 ff ff ff    	je     c000277c <mount_volume+0xca>
c0002828:	89 e8                	mov    eax,ebp
c000282a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000282e:	0f b6 e8             	movzx  ebp,al
c0002831:	0f b7 c7             	movzx  eax,di
c0002834:	0f af 6c 24 0c       	imul   ebp,DWORD PTR [esp+0xc]
c0002839:	c1 e8 04             	shr    eax,0x4
c000283c:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c0002840:	01 e8                	add    eax,ebp
c0002842:	01 c8                	add    eax,ecx
c0002844:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002848:	39 c2                	cmp    edx,eax
c000284a:	0f 82 2c ff ff ff    	jb     c000277c <mount_volume+0xca>
c0002850:	29 c2                	sub    edx,eax
c0002852:	89 d5                	mov    ebp,edx
c0002854:	89 d0                	mov    eax,edx
c0002856:	31 d2                	xor    edx,edx
c0002858:	f7 f3                	div    ebx
c000285a:	39 dd                	cmp    ebp,ebx
c000285c:	0f 82 1a ff ff ff    	jb     c000277c <mount_volume+0xca>
c0002862:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002867:	0f 87 0f ff ff ff    	ja     c000277c <mount_volume+0xca>
c000286d:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002872:	0f 86 1e 01 00 00    	jbe    c0002996 <mount_volume+0x2e4>
c0002878:	bb 03 00 00 00       	mov    ebx,0x3
c000287d:	8d 68 02             	lea    ebp,[eax+0x2]
c0002880:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002884:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c0002887:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000288b:	03 54 24 10          	add    edx,DWORD PTR [esp+0x10]
c000288f:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c0002892:	01 c8                	add    eax,ecx
c0002894:	83 fb 03             	cmp    ebx,0x3
c0002897:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c000289a:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c000289d:	75 23                	jne    c00028c2 <mount_volume+0x210>
c000289f:	8d 46 5e             	lea    eax,[esi+0x5e]
c00028a2:	e8 49 f7 ff ff       	call   c0001ff0 <ld_word>
c00028a7:	09 c7                	or     edi,eax
c00028a9:	66 85 ff             	test   di,di
c00028ac:	0f 85 ca fe ff ff    	jne    c000277c <mount_volume+0xca>
c00028b2:	8d 46 60             	lea    eax,[esi+0x60]
c00028b5:	e8 43 f7 ff ff       	call   c0001ffd <ld_dword>
c00028ba:	c1 e5 02             	shl    ebp,0x2
c00028bd:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00028c0:	eb 25                	jmp    c00028e7 <mount_volume+0x235>
c00028c2:	66 85 ff             	test   di,di
c00028c5:	0f 84 b1 fe ff ff    	je     c000277c <mount_volume+0xca>
c00028cb:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00028cf:	8d 54 6d 00          	lea    edx,[ebp+ebp*2+0x0]
c00028d3:	8d 7c 2d 00          	lea    edi,[ebp+ebp*1+0x0]
c00028d7:	83 e5 01             	and    ebp,0x1
c00028da:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00028dd:	d1 ea                	shr    edx,1
c00028df:	01 d5                	add    ebp,edx
c00028e1:	83 fb 02             	cmp    ebx,0x2
c00028e4:	0f 44 ef             	cmove  ebp,edi
c00028e7:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c00028ed:	c1 ed 09             	shr    ebp,0x9
c00028f0:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c00028f4:	0f 87 82 fe ff ff    	ja     c000277c <mount_volume+0xca>
c00028fa:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c0002901:	83 fb 03             	cmp    ebx,0x3
c0002904:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c000290b:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c000290f:	75 6e                	jne    c000297f <mount_volume+0x2cd>
c0002911:	8d 46 64             	lea    eax,[esi+0x64]
c0002914:	e8 d7 f6 ff ff       	call   c0001ff0 <ld_word>
c0002919:	66 48                	dec    ax
c000291b:	75 62                	jne    c000297f <mount_volume+0x2cd>
c000291d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0002921:	89 f0                	mov    eax,esi
c0002923:	42                   	inc    edx
c0002924:	e8 2c fc ff ff       	call   c0002555 <move_window>
c0002929:	85 c0                	test   eax,eax
c000292b:	75 52                	jne    c000297f <mount_volume+0x2cd>
c000292d:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c0002931:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c0002937:	e8 b4 f6 ff ff       	call   c0001ff0 <ld_word>
c000293c:	66 3d 55 aa          	cmp    ax,0xaa55
c0002940:	75 3d                	jne    c000297f <mount_volume+0x2cd>
c0002942:	8d 46 34             	lea    eax,[esi+0x34]
c0002945:	e8 b3 f6 ff ff       	call   c0001ffd <ld_dword>
c000294a:	3d 52 52 61 41       	cmp    eax,0x41615252
c000294f:	75 2e                	jne    c000297f <mount_volume+0x2cd>
c0002951:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c0002957:	e8 a1 f6 ff ff       	call   c0001ffd <ld_dword>
c000295c:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002961:	75 1c                	jne    c000297f <mount_volume+0x2cd>
c0002963:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c0002969:	e8 8f f6 ff ff       	call   c0001ffd <ld_dword>
c000296e:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0002971:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c0002977:	e8 81 f6 ff ff       	call   c0001ffd <ld_dword>
c000297c:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000297f:	88 1e                	mov    BYTE PTR [esi],bl
c0002981:	66 a1 80 24 03 c0    	mov    ax,ds:0xc0032480
c0002987:	31 db                	xor    ebx,ebx
c0002989:	40                   	inc    eax
c000298a:	66 a3 80 24 03 c0    	mov    ds:0xc0032480,ax
c0002990:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c0002994:	eb 0f                	jmp    c00029a5 <mount_volume+0x2f3>
c0002996:	3d f6 0f 00 00       	cmp    eax,0xff6
c000299b:	19 db                	sbb    ebx,ebx
c000299d:	83 c3 02             	add    ebx,0x2
c00029a0:	e9 d8 fe ff ff       	jmp    c000287d <mount_volume+0x1cb>
c00029a5:	83 c4 2c             	add    esp,0x2c
c00029a8:	89 d8                	mov    eax,ebx
c00029aa:	5b                   	pop    ebx
c00029ab:	5e                   	pop    esi
c00029ac:	5f                   	pop    edi
c00029ad:	5d                   	pop    ebp
c00029ae:	c3                   	ret    

c00029af <put_fat>:
c00029af:	55                   	push   ebp
c00029b0:	bd 02 00 00 00       	mov    ebp,0x2
c00029b5:	57                   	push   edi
c00029b6:	56                   	push   esi
c00029b7:	53                   	push   ebx
c00029b8:	83 ec 1c             	sub    esp,0x1c
c00029bb:	83 fa 01             	cmp    edx,0x1
c00029be:	0f 86 38 01 00 00    	jbe    c0002afc <put_fat+0x14d>
c00029c4:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c00029c7:	0f 86 2f 01 00 00    	jbe    c0002afc <put_fat+0x14d>
c00029cd:	89 c6                	mov    esi,eax
c00029cf:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00029d2:	89 cf                	mov    edi,ecx
c00029d4:	89 d3                	mov    ebx,edx
c00029d6:	83 f8 02             	cmp    eax,0x2
c00029d9:	0f 84 b1 00 00 00    	je     c0002a90 <put_fat+0xe1>
c00029df:	83 f8 03             	cmp    eax,0x3
c00029e2:	0f 84 d5 00 00 00    	je     c0002abd <put_fat+0x10e>
c00029e8:	48                   	dec    eax
c00029e9:	0f 85 0d 01 00 00    	jne    c0002afc <put_fat+0x14d>
c00029ef:	89 d1                	mov    ecx,edx
c00029f1:	89 f0                	mov    eax,esi
c00029f3:	d1 e9                	shr    ecx,1
c00029f5:	01 d1                	add    ecx,edx
c00029f7:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00029fb:	89 ca                	mov    edx,ecx
c00029fd:	c1 ea 09             	shr    edx,0x9
c0002a00:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002a03:	e8 4d fb ff ff       	call   c0002555 <move_window>
c0002a08:	85 c0                	test   eax,eax
c0002a0a:	89 c5                	mov    ebp,eax
c0002a0c:	0f 85 ea 00 00 00    	jne    c0002afc <put_fat+0x14d>
c0002a12:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002a16:	8d 46 34             	lea    eax,[esi+0x34]
c0002a19:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002a1d:	8d 41 01             	lea    eax,[ecx+0x1]
c0002a20:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0002a26:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002a2a:	83 e3 01             	and    ebx,0x1
c0002a2d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002a31:	89 f8                	mov    eax,edi
c0002a33:	74 11                	je     c0002a46 <put_fat+0x97>
c0002a35:	8a 11                	mov    dl,BYTE PTR [ecx]
c0002a37:	89 f8                	mov    eax,edi
c0002a39:	c1 e0 04             	shl    eax,0x4
c0002a3c:	25 f0 0f 00 00       	and    eax,0xff0
c0002a41:	83 e2 0f             	and    edx,0xf
c0002a44:	09 d0                	or     eax,edx
c0002a46:	88 01                	mov    BYTE PTR [ecx],al
c0002a48:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002a4c:	89 f0                	mov    eax,esi
c0002a4e:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002a52:	c1 ea 09             	shr    edx,0x9
c0002a55:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002a58:	e8 f8 fa ff ff       	call   c0002555 <move_window>
c0002a5d:	85 c0                	test   eax,eax
c0002a5f:	89 c5                	mov    ebp,eax
c0002a61:	0f 85 95 00 00 00    	jne    c0002afc <put_fat+0x14d>
c0002a67:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a6b:	25 ff 01 00 00       	and    eax,0x1ff
c0002a70:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002a74:	85 db                	test   ebx,ebx
c0002a76:	74 07                	je     c0002a7f <put_fat+0xd0>
c0002a78:	c1 ef 04             	shr    edi,0x4
c0002a7b:	89 f9                	mov    ecx,edi
c0002a7d:	eb 0d                	jmp    c0002a8c <put_fat+0xdd>
c0002a7f:	8a 08                	mov    cl,BYTE PTR [eax]
c0002a81:	c1 ef 08             	shr    edi,0x8
c0002a84:	83 e7 0f             	and    edi,0xf
c0002a87:	83 e1 f0             	and    ecx,0xfffffff0
c0002a8a:	09 f9                	or     ecx,edi
c0002a8c:	88 08                	mov    BYTE PTR [eax],cl
c0002a8e:	eb 27                	jmp    c0002ab7 <put_fat+0x108>
c0002a90:	c1 ea 08             	shr    edx,0x8
c0002a93:	89 f0                	mov    eax,esi
c0002a95:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002a98:	e8 b8 fa ff ff       	call   c0002555 <move_window>
c0002a9d:	85 c0                	test   eax,eax
c0002a9f:	89 c5                	mov    ebp,eax
c0002aa1:	75 59                	jne    c0002afc <put_fat+0x14d>
c0002aa3:	01 db                	add    ebx,ebx
c0002aa5:	0f b7 d7             	movzx  edx,di
c0002aa8:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002aae:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0002ab2:	e8 5e f5 ff ff       	call   c0002015 <st_word>
c0002ab7:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002abb:	eb 3f                	jmp    c0002afc <put_fat+0x14d>
c0002abd:	c1 ea 07             	shr    edx,0x7
c0002ac0:	89 f0                	mov    eax,esi
c0002ac2:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002ac5:	e8 8b fa ff ff       	call   c0002555 <move_window>
c0002aca:	85 c0                	test   eax,eax
c0002acc:	89 c5                	mov    ebp,eax
c0002ace:	75 2c                	jne    c0002afc <put_fat+0x14d>
c0002ad0:	c1 e3 02             	shl    ebx,0x2
c0002ad3:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002ad9:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002adf:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c0002ae3:	89 d8                	mov    eax,ebx
c0002ae5:	e8 13 f5 ff ff       	call   c0001ffd <ld_dword>
c0002aea:	25 00 00 00 f0       	and    eax,0xf0000000
c0002aef:	09 f8                	or     eax,edi
c0002af1:	89 c2                	mov    edx,eax
c0002af3:	89 d8                	mov    eax,ebx
c0002af5:	e8 1f f5 ff ff       	call   c0002019 <st_dword>
c0002afa:	eb bb                	jmp    c0002ab7 <put_fat+0x108>
c0002afc:	83 c4 1c             	add    esp,0x1c
c0002aff:	89 e8                	mov    eax,ebp
c0002b01:	5b                   	pop    ebx
c0002b02:	5e                   	pop    esi
c0002b03:	5f                   	pop    edi
c0002b04:	5d                   	pop    ebp
c0002b05:	c3                   	ret    

c0002b06 <dir_clear>:
c0002b06:	55                   	push   ebp
c0002b07:	57                   	push   edi
c0002b08:	56                   	push   esi
c0002b09:	89 c6                	mov    esi,eax
c0002b0b:	53                   	push   ebx
c0002b0c:	83 ec 1c             	sub    esp,0x1c
c0002b0f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002b13:	e8 da f9 ff ff       	call   c00024f2 <sync_window>
c0002b18:	85 c0                	test   eax,eax
c0002b1a:	0f 85 c1 00 00 00    	jne    c0002be1 <dir_clear+0xdb>
c0002b20:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002b24:	89 f0                	mov    eax,esi
c0002b26:	e8 1b f7 ff ff       	call   c0002246 <clst2sect>
c0002b2b:	31 d2                	xor    edx,edx
c0002b2d:	b9 00 02 00 00       	mov    ecx,0x200
c0002b32:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002b35:	89 c5                	mov    ebp,eax
c0002b37:	8d 46 34             	lea    eax,[esi+0x34]
c0002b3a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002b3e:	e8 ee f4 ff ff       	call   c0002031 <mem_set>
c0002b43:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0002b47:	b8 00 80 00 00       	mov    eax,0x8000
c0002b4c:	c1 e3 09             	shl    ebx,0x9
c0002b4f:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002b55:	0f 47 d8             	cmova  ebx,eax
c0002b58:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002b5e:	76 16                	jbe    c0002b76 <dir_clear+0x70>
c0002b60:	83 ec 0c             	sub    esp,0xc
c0002b63:	53                   	push   ebx
c0002b64:	e8 cb 32 00 00       	call   c0005e34 <ff_memalloc>
c0002b69:	83 c4 10             	add    esp,0x10
c0002b6c:	85 c0                	test   eax,eax
c0002b6e:	89 c7                	mov    edi,eax
c0002b70:	75 76                	jne    c0002be8 <dir_clear+0xe2>
c0002b72:	d1 eb                	shr    ebx,1
c0002b74:	eb e2                	jmp    c0002b58 <dir_clear+0x52>
c0002b76:	31 db                	xor    ebx,ebx
c0002b78:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002b7c:	39 d8                	cmp    eax,ebx
c0002b7e:	76 53                	jbe    c0002bd3 <dir_clear+0xcd>
c0002b80:	6a 01                	push   0x1
c0002b82:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002b85:	50                   	push   eax
c0002b86:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002b8a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002b8e:	50                   	push   eax
c0002b8f:	e8 27 f4 ff ff       	call   c0001fbb <disk_write>
c0002b94:	83 c4 10             	add    esp,0x10
c0002b97:	85 c0                	test   eax,eax
c0002b99:	75 38                	jne    c0002bd3 <dir_clear+0xcd>
c0002b9b:	43                   	inc    ebx
c0002b9c:	eb da                	jmp    c0002b78 <dir_clear+0x72>
c0002b9e:	52                   	push   edx
c0002b9f:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002ba2:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0002ba6:	50                   	push   eax
c0002ba7:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002bab:	57                   	push   edi
c0002bac:	50                   	push   eax
c0002bad:	e8 09 f4 ff ff       	call   c0001fbb <disk_write>
c0002bb2:	83 c4 10             	add    esp,0x10
c0002bb5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002bb9:	85 c0                	test   eax,eax
c0002bbb:	75 0a                	jne    c0002bc7 <dir_clear+0xc1>
c0002bbd:	01 d3                	add    ebx,edx
c0002bbf:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002bc3:	39 d8                	cmp    eax,ebx
c0002bc5:	77 d7                	ja     c0002b9e <dir_clear+0x98>
c0002bc7:	83 ec 0c             	sub    esp,0xc
c0002bca:	57                   	push   edi
c0002bcb:	e8 7c 32 00 00       	call   c0005e4c <ff_memfree>
c0002bd0:	83 c4 10             	add    esp,0x10
c0002bd3:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002bd7:	39 d8                	cmp    eax,ebx
c0002bd9:	0f 95 c0             	setne  al
c0002bdc:	0f b6 c0             	movzx  eax,al
c0002bdf:	eb 19                	jmp    c0002bfa <dir_clear+0xf4>
c0002be1:	b8 01 00 00 00       	mov    eax,0x1
c0002be6:	eb 12                	jmp    c0002bfa <dir_clear+0xf4>
c0002be8:	89 d9                	mov    ecx,ebx
c0002bea:	31 d2                	xor    edx,edx
c0002bec:	e8 40 f4 ff ff       	call   c0002031 <mem_set>
c0002bf1:	89 da                	mov    edx,ebx
c0002bf3:	31 db                	xor    ebx,ebx
c0002bf5:	c1 ea 09             	shr    edx,0x9
c0002bf8:	eb c5                	jmp    c0002bbf <dir_clear+0xb9>
c0002bfa:	83 c4 1c             	add    esp,0x1c
c0002bfd:	5b                   	pop    ebx
c0002bfe:	5e                   	pop    esi
c0002bff:	5f                   	pop    edi
c0002c00:	5d                   	pop    ebp
c0002c01:	c3                   	ret    

c0002c02 <create_name>:
c0002c02:	55                   	push   ebp
c0002c03:	89 c5                	mov    ebp,eax
c0002c05:	57                   	push   edi
c0002c06:	89 d7                	mov    edi,edx
c0002c08:	56                   	push   esi
c0002c09:	31 f6                	xor    esi,esi
c0002c0b:	53                   	push   ebx
c0002c0c:	83 ec 3c             	sub    esp,0x3c
c0002c0f:	8b 02                	mov    eax,DWORD PTR [edx]
c0002c11:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002c15:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0002c18:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002c1b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002c1f:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0002c23:	e8 4d f4 ff ff       	call   c0002075 <tchar2uni>
c0002c28:	83 f8 ff             	cmp    eax,0xffffffff
c0002c2b:	89 c3                	mov    ebx,eax
c0002c2d:	75 0a                	jne    c0002c39 <create_name+0x37>
c0002c2f:	b8 06 00 00 00       	mov    eax,0x6
c0002c34:	e9 7c 02 00 00       	jmp    c0002eb5 <create_name+0x2b3>
c0002c39:	3d ff ff 00 00       	cmp    eax,0xffff
c0002c3e:	76 0c                	jbe    c0002c4c <create_name+0x4a>
c0002c40:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002c44:	c1 e8 10             	shr    eax,0x10
c0002c47:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0002c4b:	46                   	inc    esi
c0002c4c:	0f b7 d3             	movzx  edx,bx
c0002c4f:	89 d8                	mov    eax,ebx
c0002c51:	83 fa 1f             	cmp    edx,0x1f
c0002c54:	76 30                	jbe    c0002c86 <create_name+0x84>
c0002c56:	83 fa 2f             	cmp    edx,0x2f
c0002c59:	74 2b                	je     c0002c86 <create_name+0x84>
c0002c5b:	83 fa 5c             	cmp    edx,0x5c
c0002c5e:	74 35                	je     c0002c95 <create_name+0x93>
c0002c60:	83 fa 7f             	cmp    edx,0x7f
c0002c63:	77 0e                	ja     c0002c73 <create_name+0x71>
c0002c65:	b8 82 9a 02 c0       	mov    eax,0xc0029a82
c0002c6a:	e8 ef f3 ff ff       	call   c000205e <chk_chr>
c0002c6f:	85 c0                	test   eax,eax
c0002c71:	75 bc                	jne    c0002c2f <create_name+0x2d>
c0002c73:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0002c79:	77 b4                	ja     c0002c2f <create_name+0x2d>
c0002c7b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002c7f:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002c83:	46                   	inc    esi
c0002c84:	eb 99                	jmp    c0002c1f <create_name+0x1d>
c0002c86:	66 83 f8 1f          	cmp    ax,0x1f
c0002c8a:	b3 04                	mov    bl,0x4
c0002c8c:	76 1a                	jbe    c0002ca8 <create_name+0xa6>
c0002c8e:	eb 05                	jmp    c0002c95 <create_name+0x93>
c0002c90:	40                   	inc    eax
c0002c91:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002c95:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002c99:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0002c9c:	83 fa 2f             	cmp    edx,0x2f
c0002c9f:	74 ef                	je     c0002c90 <create_name+0x8e>
c0002ca1:	83 fa 5c             	cmp    edx,0x5c
c0002ca4:	74 ea                	je     c0002c90 <create_name+0x8e>
c0002ca6:	31 db                	xor    ebx,ebx
c0002ca8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002cac:	89 07                	mov    DWORD PTR [edi],eax
c0002cae:	85 f6                	test   esi,esi
c0002cb0:	74 16                	je     c0002cc8 <create_name+0xc6>
c0002cb2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002cb6:	0f b7 44 70 fe       	movzx  eax,WORD PTR [eax+esi*2-0x2]
c0002cbb:	83 f8 20             	cmp    eax,0x20
c0002cbe:	74 05                	je     c0002cc5 <create_name+0xc3>
c0002cc0:	83 f8 2e             	cmp    eax,0x2e
c0002cc3:	75 03                	jne    c0002cc8 <create_name+0xc6>
c0002cc5:	4e                   	dec    esi
c0002cc6:	eb e6                	jmp    c0002cae <create_name+0xac>
c0002cc8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002ccc:	31 ff                	xor    edi,edi
c0002cce:	85 f6                	test   esi,esi
c0002cd0:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0002cd6:	0f 84 53 ff ff ff    	je     c0002c2f <create_name+0x2d>
c0002cdc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002ce0:	8d 57 01             	lea    edx,[edi+0x1]
c0002ce3:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002ce7:	83 f8 20             	cmp    eax,0x20
c0002cea:	75 04                	jne    c0002cf0 <create_name+0xee>
c0002cec:	89 d7                	mov    edi,edx
c0002cee:	eb ec                	jmp    c0002cdc <create_name+0xda>
c0002cf0:	85 ff                	test   edi,edi
c0002cf2:	75 05                	jne    c0002cf9 <create_name+0xf7>
c0002cf4:	83 f8 2e             	cmp    eax,0x2e
c0002cf7:	75 08                	jne    c0002d01 <create_name+0xff>
c0002cf9:	83 cb 03             	or     ebx,0x3
c0002cfc:	eb 03                	jmp    c0002d01 <create_name+0xff>
c0002cfe:	4e                   	dec    esi
c0002cff:	74 0c                	je     c0002d0d <create_name+0x10b>
c0002d01:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002d05:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0002d0b:	75 f1                	jne    c0002cfe <create_name+0xfc>
c0002d0d:	b9 0b 00 00 00       	mov    ecx,0xb
c0002d12:	ba 20 00 00 00       	mov    edx,0x20
c0002d17:	8d 45 20             	lea    eax,[ebp+0x20]
c0002d1a:	e8 12 f3 ff ff       	call   c0002031 <mem_set>
c0002d1f:	31 c9                	xor    ecx,ecx
c0002d21:	c7 44 24 14 08 00 00 00 	mov    DWORD PTR [esp+0x14],0x8
c0002d29:	c6 44 24 08 00       	mov    BYTE PTR [esp+0x8],0x0
c0002d2e:	8d 47 01             	lea    eax,[edi+0x1]
c0002d31:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002d35:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002d39:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002d3d:	85 c0                	test   eax,eax
c0002d3f:	89 c7                	mov    edi,eax
c0002d41:	0f 84 1d 01 00 00    	je     c0002e64 <create_name+0x262>
c0002d47:	83 f8 20             	cmp    eax,0x20
c0002d4a:	74 0b                	je     c0002d57 <create_name+0x155>
c0002d4c:	83 f8 2e             	cmp    eax,0x2e
c0002d4f:	75 0f                	jne    c0002d60 <create_name+0x15e>
c0002d51:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002d55:	74 09                	je     c0002d60 <create_name+0x15e>
c0002d57:	83 cb 03             	or     ebx,0x3
c0002d5a:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0002d5e:	eb ce                	jmp    c0002d2e <create_name+0x12c>
c0002d60:	3b 4c 24 14          	cmp    ecx,DWORD PTR [esp+0x14]
c0002d64:	73 06                	jae    c0002d6c <create_name+0x16a>
c0002d66:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002d6a:	75 3a                	jne    c0002da6 <create_name+0x1a4>
c0002d6c:	83 7c 24 14 0b       	cmp    DWORD PTR [esp+0x14],0xb
c0002d71:	75 08                	jne    c0002d7b <create_name+0x179>
c0002d73:	83 cb 03             	or     ebx,0x3
c0002d76:	e9 e9 00 00 00       	jmp    c0002e64 <create_name+0x262>
c0002d7b:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002d7f:	74 0d                	je     c0002d8e <create_name+0x18c>
c0002d81:	83 cb 03             	or     ebx,0x3
c0002d84:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002d88:	0f 87 d6 00 00 00    	ja     c0002e64 <create_name+0x262>
c0002d8e:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002d93:	b9 08 00 00 00       	mov    ecx,0x8
c0002d98:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0002d9c:	c7 44 24 14 0b 00 00 00 	mov    DWORD PTR [esp+0x14],0xb
c0002da4:	eb b4                	jmp    c0002d5a <create_name+0x158>
c0002da6:	0f b7 c7             	movzx  eax,di
c0002da9:	83 f8 7f             	cmp    eax,0x7f
c0002dac:	76 66                	jbe    c0002e14 <create_name+0x212>
c0002dae:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002db2:	89 d9                	mov    ecx,ebx
c0002db4:	83 c9 02             	or     ecx,0x2
c0002db7:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002dbb:	52                   	push   edx
c0002dbc:	52                   	push   edx
c0002dbd:	68 b5 01 00 00       	push   0x1b5
c0002dc2:	50                   	push   eax
c0002dc3:	e8 9c 30 00 00       	call   c0005e64 <ff_uni2oem>
c0002dc8:	83 c4 10             	add    esp,0x10
c0002dcb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002dcf:	a8 80                	test   al,0x80
c0002dd1:	89 c7                	mov    edi,eax
c0002dd3:	74 0c                	je     c0002de1 <create_name+0x1df>
c0002dd5:	83 e7 7f             	and    edi,0x7f
c0002dd8:	0f b6 bf 40 9b 02 c0 	movzx  edi,BYTE PTR [edi-0x3ffd64c0]
c0002ddf:	eb 2a                	jmp    c0002e0b <create_name+0x209>
c0002de1:	0f b7 c0             	movzx  eax,ax
c0002de4:	3d ff 00 00 00       	cmp    eax,0xff
c0002de9:	76 20                	jbe    c0002e0b <create_name+0x209>
c0002deb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0002def:	4a                   	dec    edx
c0002df0:	39 ca                	cmp    edx,ecx
c0002df2:	77 0c                	ja     c0002e00 <create_name+0x1fe>
c0002df4:	83 cb 03             	or     ebx,0x3
c0002df7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0002dfb:	e9 5a ff ff ff       	jmp    c0002d5a <create_name+0x158>
c0002e00:	88 64 0d 20          	mov    BYTE PTR [ebp+ecx*1+0x20],ah
c0002e04:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002e08:	41                   	inc    ecx
c0002e09:	eb 4d                	jmp    c0002e58 <create_name+0x256>
c0002e0b:	66 85 ff             	test   di,di
c0002e0e:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002e12:	74 19                	je     c0002e2d <create_name+0x22b>
c0002e14:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002e18:	0f b7 d7             	movzx  edx,di
c0002e1b:	b8 8b 9a 02 c0       	mov    eax,0xc0029a8b
c0002e20:	e8 39 f2 ff ff       	call   c000205e <chk_chr>
c0002e25:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002e29:	85 c0                	test   eax,eax
c0002e2b:	74 0a                	je     c0002e37 <create_name+0x235>
c0002e2d:	83 cb 03             	or     ebx,0x3
c0002e30:	bf 5f 00 00 00       	mov    edi,0x5f
c0002e35:	eb 21                	jmp    c0002e58 <create_name+0x256>
c0002e37:	8d 47 bf             	lea    eax,[edi-0x41]
c0002e3a:	66 83 f8 19          	cmp    ax,0x19
c0002e3e:	77 07                	ja     c0002e47 <create_name+0x245>
c0002e40:	83 4c 24 08 02       	or     DWORD PTR [esp+0x8],0x2
c0002e45:	eb 11                	jmp    c0002e58 <create_name+0x256>
c0002e47:	8d 47 9f             	lea    eax,[edi-0x61]
c0002e4a:	66 83 f8 19          	cmp    ax,0x19
c0002e4e:	77 08                	ja     c0002e58 <create_name+0x256>
c0002e50:	83 4c 24 08 01       	or     DWORD PTR [esp+0x8],0x1
c0002e55:	83 ef 20             	sub    edi,0x20
c0002e58:	89 f8                	mov    eax,edi
c0002e5a:	88 44 0d 20          	mov    BYTE PTR [ebp+ecx*1+0x20],al
c0002e5e:	41                   	inc    ecx
c0002e5f:	e9 f6 fe ff ff       	jmp    c0002d5a <create_name+0x158>
c0002e64:	80 7d 20 e5          	cmp    BYTE PTR [ebp+0x20],0xe5
c0002e68:	75 04                	jne    c0002e6e <create_name+0x26c>
c0002e6a:	c6 45 20 05          	mov    BYTE PTR [ebp+0x20],0x5
c0002e6e:	83 7c 24 14 08       	cmp    DWORD PTR [esp+0x14],0x8
c0002e73:	75 05                	jne    c0002e7a <create_name+0x278>
c0002e75:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002e7a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002e7e:	83 e0 0c             	and    eax,0xc
c0002e81:	83 f8 0c             	cmp    eax,0xc
c0002e84:	74 0c                	je     c0002e92 <create_name+0x290>
c0002e86:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002e8a:	83 e0 03             	and    eax,0x3
c0002e8d:	83 f8 03             	cmp    eax,0x3
c0002e90:	75 05                	jne    c0002e97 <create_name+0x295>
c0002e92:	83 cb 02             	or     ebx,0x2
c0002e95:	eb 19                	jmp    c0002eb0 <create_name+0x2ae>
c0002e97:	f6 c3 02             	test   bl,0x2
c0002e9a:	75 14                	jne    c0002eb0 <create_name+0x2ae>
c0002e9c:	f6 44 24 08 01       	test   BYTE PTR [esp+0x8],0x1
c0002ea1:	74 03                	je     c0002ea6 <create_name+0x2a4>
c0002ea3:	83 cb 10             	or     ebx,0x10
c0002ea6:	f6 44 24 08 04       	test   BYTE PTR [esp+0x8],0x4
c0002eab:	74 03                	je     c0002eb0 <create_name+0x2ae>
c0002ead:	83 cb 08             	or     ebx,0x8
c0002eb0:	88 5d 2b             	mov    BYTE PTR [ebp+0x2b],bl
c0002eb3:	31 c0                	xor    eax,eax
c0002eb5:	83 c4 3c             	add    esp,0x3c
c0002eb8:	5b                   	pop    ebx
c0002eb9:	5e                   	pop    esi
c0002eba:	5f                   	pop    edi
c0002ebb:	5d                   	pop    ebp
c0002ebc:	c3                   	ret    

c0002ebd <cmp_lfn>:
c0002ebd:	55                   	push   ebp
c0002ebe:	57                   	push   edi
c0002ebf:	89 d7                	mov    edi,edx
c0002ec1:	56                   	push   esi
c0002ec2:	53                   	push   ebx
c0002ec3:	83 ec 1c             	sub    esp,0x1c
c0002ec6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002eca:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002ecd:	e8 1e f1 ff ff       	call   c0001ff0 <ld_word>
c0002ed2:	66 85 c0             	test   ax,ax
c0002ed5:	74 07                	je     c0002ede <cmp_lfn+0x21>
c0002ed7:	31 c0                	xor    eax,eax
c0002ed9:	e9 a4 00 00 00       	jmp    c0002f82 <cmp_lfn+0xc5>
c0002ede:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002ee0:	bd 01 00 00 00       	mov    ebp,0x1
c0002ee5:	31 c9                	xor    ecx,ecx
c0002ee7:	83 e3 3f             	and    ebx,0x3f
c0002eea:	4b                   	dec    ebx
c0002eeb:	6b db 0d             	imul   ebx,ebx,0xd
c0002eee:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002ef2:	0f b6 81 c0 9b 02 c0 	movzx  eax,BYTE PTR [ecx-0x3ffd6440]
c0002ef9:	01 f8                	add    eax,edi
c0002efb:	e8 f0 f0 ff ff       	call   c0001ff0 <ld_word>
c0002f00:	66 85 ed             	test   bp,bp
c0002f03:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f07:	0f b7 f0             	movzx  esi,ax
c0002f0a:	74 44                	je     c0002f50 <cmp_lfn+0x93>
c0002f0c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002f10:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002f16:	77 bf                	ja     c0002ed7 <cmp_lfn+0x1a>
c0002f18:	83 ec 0c             	sub    esp,0xc
c0002f1b:	0f b7 c6             	movzx  eax,si
c0002f1e:	50                   	push   eax
c0002f1f:	e8 54 30 00 00       	call   c0005f78 <ff_wtoupper>
c0002f24:	89 c5                	mov    ebp,eax
c0002f26:	8d 43 01             	lea    eax,[ebx+0x1]
c0002f29:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002f2d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002f31:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002f35:	89 04 24             	mov    DWORD PTR [esp],eax
c0002f38:	e8 3b 30 00 00       	call   c0005f78 <ff_wtoupper>
c0002f3d:	83 c4 10             	add    esp,0x10
c0002f40:	39 c5                	cmp    ebp,eax
c0002f42:	75 93                	jne    c0002ed7 <cmp_lfn+0x1a>
c0002f44:	89 f5                	mov    ebp,esi
c0002f46:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0002f4a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002f4e:	eb 0c                	jmp    c0002f5c <cmp_lfn+0x9f>
c0002f50:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0002f56:	0f 85 7b ff ff ff    	jne    c0002ed7 <cmp_lfn+0x1a>
c0002f5c:	41                   	inc    ecx
c0002f5d:	83 f9 0d             	cmp    ecx,0xd
c0002f60:	75 8c                	jne    c0002eee <cmp_lfn+0x31>
c0002f62:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002f65:	74 16                	je     c0002f7d <cmp_lfn+0xc0>
c0002f67:	66 85 ed             	test   bp,bp
c0002f6a:	74 11                	je     c0002f7d <cmp_lfn+0xc0>
c0002f6c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002f70:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002f75:	0f 94 c0             	sete   al
c0002f78:	0f b6 c0             	movzx  eax,al
c0002f7b:	eb 05                	jmp    c0002f82 <cmp_lfn+0xc5>
c0002f7d:	b8 01 00 00 00       	mov    eax,0x1
c0002f82:	83 c4 1c             	add    esp,0x1c
c0002f85:	5b                   	pop    ebx
c0002f86:	5e                   	pop    esi
c0002f87:	5f                   	pop    edi
c0002f88:	5d                   	pop    ebp
c0002f89:	c3                   	ret    

c0002f8a <sync_fs>:
c0002f8a:	56                   	push   esi
c0002f8b:	53                   	push   ebx
c0002f8c:	53                   	push   ebx
c0002f8d:	89 c3                	mov    ebx,eax
c0002f8f:	e8 5e f5 ff ff       	call   c00024f2 <sync_window>
c0002f94:	85 c0                	test   eax,eax
c0002f96:	0f 85 9a 00 00 00    	jne    c0003036 <sync_fs+0xac>
c0002f9c:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002f9f:	75 7b                	jne    c000301c <sync_fs+0x92>
c0002fa1:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002fa5:	75 75                	jne    c000301c <sync_fs+0x92>
c0002fa7:	8d 73 34             	lea    esi,[ebx+0x34]
c0002faa:	b9 00 02 00 00       	mov    ecx,0x200
c0002faf:	31 d2                	xor    edx,edx
c0002fb1:	89 f0                	mov    eax,esi
c0002fb3:	e8 79 f0 ff ff       	call   c0002031 <mem_set>
c0002fb8:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002fbe:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002fc3:	e8 4d f0 ff ff       	call   c0002015 <st_word>
c0002fc8:	ba 52 52 61 41       	mov    edx,0x41615252
c0002fcd:	89 f0                	mov    eax,esi
c0002fcf:	e8 45 f0 ff ff       	call   c0002019 <st_dword>
c0002fd4:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002fda:	ba 72 72 41 61       	mov    edx,0x61417272
c0002fdf:	e8 35 f0 ff ff       	call   c0002019 <st_dword>
c0002fe4:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002fe7:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002fed:	e8 27 f0 ff ff       	call   c0002019 <st_dword>
c0002ff2:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002ff5:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002ffb:	e8 19 f0 ff ff       	call   c0002019 <st_dword>
c0003000:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0003003:	6a 01                	push   0x1
c0003005:	40                   	inc    eax
c0003006:	50                   	push   eax
c0003007:	56                   	push   esi
c0003008:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000300b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000300f:	50                   	push   eax
c0003010:	e8 a6 ef ff ff       	call   c0001fbb <disk_write>
c0003015:	83 c4 10             	add    esp,0x10
c0003018:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c000301c:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0003020:	51                   	push   ecx
c0003021:	6a 00                	push   0x0
c0003023:	6a 00                	push   0x0
c0003025:	50                   	push   eax
c0003026:	e8 a6 ef ff ff       	call   c0001fd1 <disk_ioctl>
c000302b:	83 c4 10             	add    esp,0x10
c000302e:	85 c0                	test   eax,eax
c0003030:	0f 95 c0             	setne  al
c0003033:	0f b6 c0             	movzx  eax,al
c0003036:	5a                   	pop    edx
c0003037:	5b                   	pop    ebx
c0003038:	5e                   	pop    esi
c0003039:	c3                   	ret    

c000303a <create_partition>:
c000303a:	55                   	push   ebp
c000303b:	0f b6 c0             	movzx  eax,al
c000303e:	57                   	push   edi
c000303f:	56                   	push   esi
c0003040:	53                   	push   ebx
c0003041:	83 ec 40             	sub    esp,0x40
c0003044:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003048:	8d 44 24 30          	lea    eax,[esp+0x30]
c000304c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0003050:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003054:	50                   	push   eax
c0003055:	6a 01                	push   0x1
c0003057:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000305b:	e8 71 ef ff ff       	call   c0001fd1 <disk_ioctl>
c0003060:	83 c4 10             	add    esp,0x10
c0003063:	85 c0                	test   eax,eax
c0003065:	0f 85 68 01 00 00    	jne    c00031d3 <create_partition+0x199>
c000306b:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c000306f:	b9 05 00 00 00       	mov    ecx,0x5
c0003074:	be 08 00 00 00       	mov    esi,0x8
c0003079:	89 f0                	mov    eax,esi
c000307b:	31 d2                	xor    edx,edx
c000307d:	0f b6 d8             	movzx  ebx,al
c0003080:	89 e8                	mov    eax,ebp
c0003082:	f7 f3                	div    ebx
c0003084:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0003089:	76 0a                	jbe    c0003095 <create_partition+0x5b>
c000308b:	d1 e6                	shl    esi,1
c000308d:	49                   	dec    ecx
c000308e:	75 e9                	jne    c0003079 <create_partition+0x3f>
c0003090:	be ff ff ff ff       	mov    esi,0xffffffff
c0003095:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0003099:	b9 00 02 00 00       	mov    ecx,0x200
c000309e:	31 d2                	xor    edx,edx
c00030a0:	e8 8c ef ff ff       	call   c0002031 <mem_set>
c00030a5:	b9 64 00 00 00       	mov    ecx,0x64
c00030aa:	89 e8                	mov    eax,ebp
c00030ac:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00030b4:	31 d2                	xor    edx,edx
c00030b6:	f7 f1                	div    ecx
c00030b8:	b9 3f 00 00 00       	mov    ecx,0x3f
c00030bd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00030c1:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00030c5:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c00030cb:	89 f0                	mov    eax,esi
c00030cd:	0f b6 c0             	movzx  eax,al
c00030d0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00030d4:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c00030d9:	0f 96 c0             	setbe  al
c00030dc:	31 d2                	xor    edx,edx
c00030de:	85 c9                	test   ecx,ecx
c00030e0:	0f 95 c2             	setne  dl
c00030e3:	85 c2                	test   edx,eax
c00030e5:	0f 84 b7 00 00 00    	je     c00031a2 <create_partition+0x168>
c00030eb:	39 e9                	cmp    ecx,ebp
c00030ed:	0f 83 af 00 00 00    	jae    c00031a2 <create_partition+0x168>
c00030f3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00030f7:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00030fb:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c00030fe:	83 fe 64             	cmp    esi,0x64
c0003101:	77 0b                	ja     c000310e <create_partition+0xd4>
c0003103:	74 07                	je     c000310c <create_partition+0xd2>
c0003105:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c000310a:	eb 02                	jmp    c000310e <create_partition+0xd4>
c000310c:	89 ee                	mov    esi,ebp
c000310e:	89 ca                	mov    edx,ecx
c0003110:	31 c0                	xor    eax,eax
c0003112:	01 f2                	add    edx,esi
c0003114:	0f 92 c0             	setb   al
c0003117:	39 ea                	cmp    edx,ebp
c0003119:	77 04                	ja     c000311f <create_partition+0xe5>
c000311b:	85 c0                	test   eax,eax
c000311d:	74 06                	je     c0003125 <create_partition+0xeb>
c000311f:	89 ee                	mov    esi,ebp
c0003121:	29 ce                	sub    esi,ecx
c0003123:	eb 04                	jmp    c0003129 <create_partition+0xef>
c0003125:	85 f6                	test   esi,esi
c0003127:	74 79                	je     c00031a2 <create_partition+0x168>
c0003129:	89 ca                	mov    edx,ecx
c000312b:	89 d8                	mov    eax,ebx
c000312d:	e8 e7 ee ff ff       	call   c0002019 <st_dword>
c0003132:	8d 43 04             	lea    eax,[ebx+0x4]
c0003135:	89 f2                	mov    edx,esi
c0003137:	e8 dd ee ff ff       	call   c0002019 <st_dword>
c000313c:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0003140:	bf 3f 00 00 00       	mov    edi,0x3f
c0003145:	31 d2                	xor    edx,edx
c0003147:	83 c3 10             	add    ebx,0x10
c000314a:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c000314e:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0003151:	89 c8                	mov    eax,ecx
c0003153:	01 f1                	add    ecx,esi
c0003155:	f7 f7                	div    edi
c0003157:	89 d7                	mov    edi,edx
c0003159:	31 d2                	xor    edx,edx
c000315b:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c000315f:	47                   	inc    edi
c0003160:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0003163:	89 c2                	mov    edx,eax
c0003165:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0003168:	c1 ea 02             	shr    edx,0x2
c000316b:	8d 41 ff             	lea    eax,[ecx-0x1]
c000316e:	83 e2 c0             	and    edx,0xffffffc0
c0003171:	09 fa                	or     edx,edi
c0003173:	bf 3f 00 00 00       	mov    edi,0x3f
c0003178:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c000317b:	31 d2                	xor    edx,edx
c000317d:	f7 f7                	div    edi
c000317f:	89 d6                	mov    esi,edx
c0003181:	31 d2                	xor    edx,edx
c0003183:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0003187:	46                   	inc    esi
c0003188:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c000318b:	89 c7                	mov    edi,eax
c000318d:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0003190:	c1 ef 02             	shr    edi,0x2
c0003193:	83 e7 c0             	and    edi,0xffffffc0
c0003196:	09 fe                	or     esi,edi
c0003198:	89 f2                	mov    edx,esi
c000319a:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c000319d:	e9 32 ff ff ff       	jmp    c00030d4 <create_partition+0x9a>
c00031a2:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00031a6:	ba 55 aa 00 00       	mov    edx,0xaa55
c00031ab:	05 fe 01 00 00       	add    eax,0x1fe
c00031b0:	e8 60 ee ff ff       	call   c0002015 <st_word>
c00031b5:	6a 01                	push   0x1
c00031b7:	6a 00                	push   0x0
c00031b9:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c00031bd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00031c1:	e8 f5 ed ff ff       	call   c0001fbb <disk_write>
c00031c6:	83 c4 10             	add    esp,0x10
c00031c9:	85 c0                	test   eax,eax
c00031cb:	0f 95 c0             	setne  al
c00031ce:	0f b6 c0             	movzx  eax,al
c00031d1:	eb 05                	jmp    c00031d8 <create_partition+0x19e>
c00031d3:	b8 01 00 00 00       	mov    eax,0x1
c00031d8:	83 c4 3c             	add    esp,0x3c
c00031db:	5b                   	pop    ebx
c00031dc:	5e                   	pop    esi
c00031dd:	5f                   	pop    edi
c00031de:	5d                   	pop    ebp
c00031df:	c3                   	ret    

c00031e0 <get_fileinfo>:
c00031e0:	55                   	push   ebp
c00031e1:	57                   	push   edi
c00031e2:	56                   	push   esi
c00031e3:	53                   	push   ebx
c00031e4:	83 ec 1c             	sub    esp,0x1c
c00031e7:	8b 30                	mov    esi,DWORD PTR [eax]
c00031e9:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c00031ed:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c00031f1:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00031f5:	0f 84 de 01 00 00    	je     c00033d9 <get_fileinfo+0x1f9>
c00031fb:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c00031ff:	89 d3                	mov    ebx,edx
c0003201:	89 c6                	mov    esi,eax
c0003203:	74 7d                	je     c0003282 <get_fileinfo+0xa2>
c0003205:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000320d:	31 ff                	xor    edi,edi
c000320f:	66 c7 44 24 06 00 00 	mov    WORD PTR [esp+0x6],0x0
c0003216:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000321a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000321e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003221:	0f b7 04 08          	movzx  eax,WORD PTR [eax+ecx*1]
c0003225:	85 c0                	test   eax,eax
c0003227:	89 c2                	mov    edx,eax
c0003229:	74 44                	je     c000326f <get_fileinfo+0x8f>
c000322b:	0f b7 6c 24 06       	movzx  ebp,WORD PTR [esp+0x6]
c0003230:	85 ed                	test   ebp,ebp
c0003232:	75 0d                	jne    c0003241 <get_fileinfo+0x61>
c0003234:	8d 8a 00 28 00 00    	lea    ecx,[edx+0x2800]
c000323a:	66 81 f9 ff 07       	cmp    cx,0x7ff
c000323f:	76 20                	jbe    c0003261 <get_fileinfo+0x81>
c0003241:	c1 e5 10             	shl    ebp,0x10
c0003244:	b9 ff 00 00 00       	mov    ecx,0xff
c0003249:	29 f9                	sub    ecx,edi
c000324b:	09 e8                	or     eax,ebp
c000324d:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c0003251:	e8 f7 ee ff ff       	call   c000214d <put_utf>
c0003256:	0f b6 c0             	movzx  eax,al
c0003259:	85 c0                	test   eax,eax
c000325b:	74 10                	je     c000326d <get_fileinfo+0x8d>
c000325d:	01 c7                	add    edi,eax
c000325f:	31 d2                	xor    edx,edx
c0003261:	83 44 24 08 02       	add    DWORD PTR [esp+0x8],0x2
c0003266:	66 89 54 24 06       	mov    WORD PTR [esp+0x6],dx
c000326b:	eb a9                	jmp    c0003216 <get_fileinfo+0x36>
c000326d:	31 ff                	xor    edi,edi
c000326f:	66 83 7c 24 06 00    	cmp    WORD PTR [esp+0x6],0x0
c0003275:	b8 00 00 00 00       	mov    eax,0x0
c000327a:	0f 45 f8             	cmovne edi,eax
c000327d:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c0003282:	31 ff                	xor    edi,edi
c0003284:	31 c9                	xor    ecx,ecx
c0003286:	83 f9 0a             	cmp    ecx,0xa
c0003289:	0f 87 ac 00 00 00    	ja     c000333b <get_fileinfo+0x15b>
c000328f:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003292:	8d 69 01             	lea    ebp,[ecx+0x1]
c0003295:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c0003299:	83 f8 20             	cmp    eax,0x20
c000329c:	89 c2                	mov    edx,eax
c000329e:	0f 84 90 00 00 00    	je     c0003334 <get_fileinfo+0x154>
c00032a4:	83 f8 05             	cmp    eax,0x5
c00032a7:	75 05                	jne    c00032ae <get_fileinfo+0xce>
c00032a9:	ba e5 00 00 00       	mov    edx,0xe5
c00032ae:	83 fd 09             	cmp    ebp,0x9
c00032b1:	75 0b                	jne    c00032be <get_fileinfo+0xde>
c00032b3:	83 ff 0b             	cmp    edi,0xb
c00032b6:	77 06                	ja     c00032be <get_fileinfo+0xde>
c00032b8:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c00032bd:	47                   	inc    edi
c00032be:	0f b7 c2             	movzx  eax,dx
c00032c1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00032c5:	e8 a5 ed ff ff       	call   c000206f <dbc_1st>
c00032ca:	85 c0                	test   eax,eax
c00032cc:	74 2f                	je     c00032fd <get_fileinfo+0x11d>
c00032ce:	83 fd 08             	cmp    ebp,0x8
c00032d1:	74 2a                	je     c00032fd <get_fileinfo+0x11d>
c00032d3:	83 fd 0b             	cmp    ebp,0xb
c00032d6:	74 25                	je     c00032fd <get_fileinfo+0x11d>
c00032d8:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00032db:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c00032df:	88 44 24 06          	mov    BYTE PTR [esp+0x6],al
c00032e3:	e8 8a ed ff ff       	call   c0002072 <dbc_2nd>
c00032e8:	85 c0                	test   eax,eax
c00032ea:	74 11                	je     c00032fd <get_fileinfo+0x11d>
c00032ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00032f0:	8d 69 02             	lea    ebp,[ecx+0x2]
c00032f3:	0f b6 54 24 06       	movzx  edx,BYTE PTR [esp+0x6]
c00032f8:	c1 e0 08             	shl    eax,0x8
c00032fb:	09 c2                	or     edx,eax
c00032fd:	50                   	push   eax
c00032fe:	0f b7 d2             	movzx  edx,dx
c0003301:	50                   	push   eax
c0003302:	68 b5 01 00 00       	push   0x1b5
c0003307:	52                   	push   edx
c0003308:	e8 f3 2b 00 00       	call   c0005f00 <ff_oem2uni>
c000330d:	83 c4 10             	add    esp,0x10
c0003310:	0f b7 c0             	movzx  eax,ax
c0003313:	85 c0                	test   eax,eax
c0003315:	75 04                	jne    c000331b <get_fileinfo+0x13b>
c0003317:	31 ff                	xor    edi,edi
c0003319:	eb 20                	jmp    c000333b <get_fileinfo+0x15b>
c000331b:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c000331f:	b9 0c 00 00 00       	mov    ecx,0xc
c0003324:	29 f9                	sub    ecx,edi
c0003326:	e8 22 ee ff ff       	call   c000214d <put_utf>
c000332b:	0f b6 c0             	movzx  eax,al
c000332e:	85 c0                	test   eax,eax
c0003330:	74 e5                	je     c0003317 <get_fileinfo+0x137>
c0003332:	01 c7                	add    edi,eax
c0003334:	89 e9                	mov    ecx,ebp
c0003336:	e9 4b ff ff ff       	jmp    c0003286 <get_fileinfo+0xa6>
c000333b:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c0003340:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c0003344:	75 5f                	jne    c00033a5 <get_fileinfo+0x1c5>
c0003346:	85 ff                	test   edi,edi
c0003348:	75 0b                	jne    c0003355 <get_fileinfo+0x175>
c000334a:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c000334e:	ba 01 00 00 00       	mov    edx,0x1
c0003353:	eb 3e                	jmp    c0003393 <get_fileinfo+0x1b3>
c0003355:	bf 08 00 00 00       	mov    edi,0x8
c000335a:	31 d2                	xor    edx,edx
c000335c:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0003362:	84 c0                	test   al,al
c0003364:	74 2d                	je     c0003393 <get_fileinfo+0x1b3>
c0003366:	66 83 f8 2e          	cmp    ax,0x2e
c000336a:	74 1b                	je     c0003387 <get_fileinfo+0x1a7>
c000336c:	8d 48 bf             	lea    ecx,[eax-0x41]
c000336f:	66 83 f9 19          	cmp    cx,0x19
c0003373:	77 17                	ja     c000338c <get_fileinfo+0x1ac>
c0003375:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003378:	8a 49 0c             	mov    cl,BYTE PTR [ecx+0xc]
c000337b:	21 f9                	and    ecx,edi
c000337d:	80 e1 18             	and    cl,0x18
c0003380:	74 0a                	je     c000338c <get_fileinfo+0x1ac>
c0003382:	83 c0 20             	add    eax,0x20
c0003385:	eb 05                	jmp    c000338c <get_fileinfo+0x1ac>
c0003387:	bf 10 00 00 00       	mov    edi,0x10
c000338c:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c0003390:	42                   	inc    edx
c0003391:	eb c9                	jmp    c000335c <get_fileinfo+0x17c>
c0003393:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c0003398:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000339b:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c000339f:	75 04                	jne    c00033a5 <get_fileinfo+0x1c5>
c00033a1:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c00033a5:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00033a8:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c00033ab:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c00033ae:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00033b1:	83 c0 1c             	add    eax,0x1c
c00033b4:	e8 44 ec ff ff       	call   c0001ffd <ld_dword>
c00033b9:	89 03                	mov    DWORD PTR [ebx],eax
c00033bb:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00033be:	83 c0 16             	add    eax,0x16
c00033c1:	e8 2a ec ff ff       	call   c0001ff0 <ld_word>
c00033c6:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c00033ca:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00033cd:	83 c0 18             	add    eax,0x18
c00033d0:	e8 1b ec ff ff       	call   c0001ff0 <ld_word>
c00033d5:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00033d9:	83 c4 1c             	add    esp,0x1c
c00033dc:	5b                   	pop    ebx
c00033dd:	5e                   	pop    esi
c00033de:	5f                   	pop    edi
c00033df:	5d                   	pop    ebp
c00033e0:	c3                   	ret    

c00033e1 <ld_clust.isra.0>:
c00033e1:	56                   	push   esi
c00033e2:	89 c6                	mov    esi,eax
c00033e4:	53                   	push   ebx
c00033e5:	89 d3                	mov    ebx,edx
c00033e7:	8d 42 1a             	lea    eax,[edx+0x1a]
c00033ea:	e8 01 ec ff ff       	call   c0001ff0 <ld_word>
c00033ef:	0f b7 c8             	movzx  ecx,ax
c00033f2:	89 f0                	mov    eax,esi
c00033f4:	3c 03                	cmp    al,0x3
c00033f6:	75 0d                	jne    c0003405 <ld_clust.isra.0+0x24>
c00033f8:	8d 43 14             	lea    eax,[ebx+0x14]
c00033fb:	e8 f0 eb ff ff       	call   c0001ff0 <ld_word>
c0003400:	c1 e0 10             	shl    eax,0x10
c0003403:	09 c1                	or     ecx,eax
c0003405:	5b                   	pop    ebx
c0003406:	89 c8                	mov    eax,ecx
c0003408:	5e                   	pop    esi
c0003409:	c3                   	ret    

c000340a <st_clust.isra.1>:
c000340a:	56                   	push   esi
c000340b:	89 c6                	mov    esi,eax
c000340d:	53                   	push   ebx
c000340e:	89 d3                	mov    ebx,edx
c0003410:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0003413:	0f b7 d1             	movzx  edx,cx
c0003416:	e8 fa eb ff ff       	call   c0002015 <st_word>
c000341b:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c000341e:	75 0f                	jne    c000342f <st_clust.isra.1+0x25>
c0003420:	8d 43 14             	lea    eax,[ebx+0x14]
c0003423:	5b                   	pop    ebx
c0003424:	c1 e9 10             	shr    ecx,0x10
c0003427:	89 ca                	mov    edx,ecx
c0003429:	5e                   	pop    esi
c000342a:	e9 e6 eb ff ff       	jmp    c0002015 <st_word>
c000342f:	5b                   	pop    ebx
c0003430:	5e                   	pop    esi
c0003431:	c3                   	ret    

c0003432 <get_fat.isra.2>:
c0003432:	83 fa 01             	cmp    edx,0x1
c0003435:	b9 01 00 00 00       	mov    ecx,0x1
c000343a:	0f 86 f4 00 00 00    	jbe    c0003534 <get_fat.isra.2+0x102>
c0003440:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0003443:	0f 83 eb 00 00 00    	jae    c0003534 <get_fat.isra.2+0x102>
c0003449:	55                   	push   ebp
c000344a:	57                   	push   edi
c000344b:	56                   	push   esi
c000344c:	89 c6                	mov    esi,eax
c000344e:	53                   	push   ebx
c000344f:	89 d3                	mov    ebx,edx
c0003451:	83 ec 0c             	sub    esp,0xc
c0003454:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0003457:	83 f8 02             	cmp    eax,0x2
c000345a:	74 79                	je     c00034d5 <get_fat.isra.2+0xa3>
c000345c:	83 f8 03             	cmp    eax,0x3
c000345f:	0f 84 97 00 00 00    	je     c00034fc <get_fat.isra.2+0xca>
c0003465:	48                   	dec    eax
c0003466:	0f 85 be 00 00 00    	jne    c000352a <get_fat.isra.2+0xf8>
c000346c:	89 d7                	mov    edi,edx
c000346e:	89 f0                	mov    eax,esi
c0003470:	d1 ef                	shr    edi,1
c0003472:	01 d7                	add    edi,edx
c0003474:	89 fa                	mov    edx,edi
c0003476:	c1 ea 09             	shr    edx,0x9
c0003479:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000347c:	e8 d4 f0 ff ff       	call   c0002555 <move_window>
c0003481:	85 c0                	test   eax,eax
c0003483:	74 08                	je     c000348d <get_fat.isra.2+0x5b>
c0003485:	83 c9 ff             	or     ecx,0xffffffff
c0003488:	e9 9d 00 00 00       	jmp    c000352a <get_fat.isra.2+0xf8>
c000348d:	8d 6f 01             	lea    ebp,[edi+0x1]
c0003490:	89 f0                	mov    eax,esi
c0003492:	89 ea                	mov    edx,ebp
c0003494:	81 e7 ff 01 00 00    	and    edi,0x1ff
c000349a:	c1 ea 09             	shr    edx,0x9
c000349d:	0f b6 7c 3e 34       	movzx  edi,BYTE PTR [esi+edi*1+0x34]
c00034a2:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00034a5:	e8 ab f0 ff ff       	call   c0002555 <move_window>
c00034aa:	85 c0                	test   eax,eax
c00034ac:	75 d7                	jne    c0003485 <get_fat.isra.2+0x53>
c00034ae:	89 f8                	mov    eax,edi
c00034b0:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00034b6:	0f b6 f8             	movzx  edi,al
c00034b9:	0f b6 44 2e 34       	movzx  eax,BYTE PTR [esi+ebp*1+0x34]
c00034be:	c1 e0 08             	shl    eax,0x8
c00034c1:	09 f8                	or     eax,edi
c00034c3:	89 c1                	mov    ecx,eax
c00034c5:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c00034cb:	80 e3 01             	and    bl,0x1
c00034ce:	74 5a                	je     c000352a <get_fat.isra.2+0xf8>
c00034d0:	c1 e8 04             	shr    eax,0x4
c00034d3:	eb 53                	jmp    c0003528 <get_fat.isra.2+0xf6>
c00034d5:	c1 ea 08             	shr    edx,0x8
c00034d8:	89 f0                	mov    eax,esi
c00034da:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00034dd:	e8 73 f0 ff ff       	call   c0002555 <move_window>
c00034e2:	85 c0                	test   eax,eax
c00034e4:	75 9f                	jne    c0003485 <get_fat.isra.2+0x53>
c00034e6:	01 db                	add    ebx,ebx
c00034e8:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c00034ee:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c00034f2:	e8 f9 ea ff ff       	call   c0001ff0 <ld_word>
c00034f7:	0f b7 c8             	movzx  ecx,ax
c00034fa:	eb 2e                	jmp    c000352a <get_fat.isra.2+0xf8>
c00034fc:	c1 ea 07             	shr    edx,0x7
c00034ff:	89 f0                	mov    eax,esi
c0003501:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0003504:	e8 4c f0 ff ff       	call   c0002555 <move_window>
c0003509:	85 c0                	test   eax,eax
c000350b:	0f 85 74 ff ff ff    	jne    c0003485 <get_fat.isra.2+0x53>
c0003511:	c1 e3 02             	shl    ebx,0x2
c0003514:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c000351a:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c000351e:	e8 da ea ff ff       	call   c0001ffd <ld_dword>
c0003523:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003528:	89 c1                	mov    ecx,eax
c000352a:	83 c4 0c             	add    esp,0xc
c000352d:	89 c8                	mov    eax,ecx
c000352f:	5b                   	pop    ebx
c0003530:	5e                   	pop    esi
c0003531:	5f                   	pop    edi
c0003532:	5d                   	pop    ebp
c0003533:	c3                   	ret    
c0003534:	89 c8                	mov    eax,ecx
c0003536:	c3                   	ret    

c0003537 <dir_sdi>:
c0003537:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c000353d:	0f 87 b6 00 00 00    	ja     c00035f9 <dir_sdi+0xc2>
c0003543:	55                   	push   ebp
c0003544:	57                   	push   edi
c0003545:	56                   	push   esi
c0003546:	53                   	push   ebx
c0003547:	89 d3                	mov    ebx,edx
c0003549:	83 ec 1c             	sub    esp,0x1c
c000354c:	f6 c2 1f             	test   dl,0x1f
c000354f:	74 0a                	je     c000355b <dir_sdi+0x24>
c0003551:	b8 02 00 00 00       	mov    eax,0x2
c0003556:	e9 96 00 00 00       	jmp    c00035f1 <dir_sdi+0xba>
c000355b:	89 c6                	mov    esi,eax
c000355d:	8b 28                	mov    ebp,DWORD PTR [eax]
c000355f:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c0003562:	8b 78 08             	mov    edi,DWORD PTR [eax+0x8]
c0003565:	85 ff                	test   edi,edi
c0003567:	75 21                	jne    c000358a <dir_sdi+0x53>
c0003569:	80 7d 00 02          	cmp    BYTE PTR [ebp+0x0],0x2
c000356d:	76 07                	jbe    c0003576 <dir_sdi+0x3f>
c000356f:	8b 45 28             	mov    eax,DWORD PTR [ebp+0x28]
c0003572:	85 c0                	test   eax,eax
c0003574:	75 12                	jne    c0003588 <dir_sdi+0x51>
c0003576:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000357a:	89 da                	mov    edx,ebx
c000357c:	c1 ea 05             	shr    edx,0x5
c000357f:	39 c2                	cmp    edx,eax
c0003581:	73 ce                	jae    c0003551 <dir_sdi+0x1a>
c0003583:	8b 45 28             	mov    eax,DWORD PTR [ebp+0x28]
c0003586:	eb 3c                	jmp    c00035c4 <dir_sdi+0x8d>
c0003588:	89 c7                	mov    edi,eax
c000358a:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c000358e:	c1 e1 09             	shl    ecx,0x9
c0003591:	39 cb                	cmp    ebx,ecx
c0003593:	72 26                	jb     c00035bb <dir_sdi+0x84>
c0003595:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003599:	8b 06                	mov    eax,DWORD PTR [esi]
c000359b:	89 fa                	mov    edx,edi
c000359d:	e8 90 fe ff ff       	call   c0003432 <get_fat.isra.2>
c00035a2:	83 f8 ff             	cmp    eax,0xffffffff
c00035a5:	89 c7                	mov    edi,eax
c00035a7:	74 43                	je     c00035ec <dir_sdi+0xb5>
c00035a9:	83 f8 01             	cmp    eax,0x1
c00035ac:	76 a3                	jbe    c0003551 <dir_sdi+0x1a>
c00035ae:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c00035b1:	76 9e                	jbe    c0003551 <dir_sdi+0x1a>
c00035b3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00035b7:	29 cb                	sub    ebx,ecx
c00035b9:	eb d6                	jmp    c0003591 <dir_sdi+0x5a>
c00035bb:	89 fa                	mov    edx,edi
c00035bd:	89 e8                	mov    eax,ebp
c00035bf:	e8 82 ec ff ff       	call   c0002246 <clst2sect>
c00035c4:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00035c7:	89 7e 14             	mov    DWORD PTR [esi+0x14],edi
c00035ca:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c00035cd:	85 d2                	test   edx,edx
c00035cf:	74 80                	je     c0003551 <dir_sdi+0x1a>
c00035d1:	89 d8                	mov    eax,ebx
c00035d3:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00035d9:	c1 e8 09             	shr    eax,0x9
c00035dc:	01 d0                	add    eax,edx
c00035de:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00035e1:	8d 44 1d 34          	lea    eax,[ebp+ebx*1+0x34]
c00035e5:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00035e8:	31 c0                	xor    eax,eax
c00035ea:	eb 05                	jmp    c00035f1 <dir_sdi+0xba>
c00035ec:	b8 01 00 00 00       	mov    eax,0x1
c00035f1:	83 c4 1c             	add    esp,0x1c
c00035f4:	5b                   	pop    ebx
c00035f5:	5e                   	pop    esi
c00035f6:	5f                   	pop    edi
c00035f7:	5d                   	pop    ebp
c00035f8:	c3                   	ret    
c00035f9:	b8 02 00 00 00       	mov    eax,0x2
c00035fe:	c3                   	ret    

c00035ff <create_chain>:
c00035ff:	55                   	push   ebp
c0003600:	89 c5                	mov    ebp,eax
c0003602:	57                   	push   edi
c0003603:	89 d7                	mov    edi,edx
c0003605:	56                   	push   esi
c0003606:	53                   	push   ebx
c0003607:	83 ec 1c             	sub    esp,0x1c
c000360a:	85 d2                	test   edx,edx
c000360c:	8b 18                	mov    ebx,DWORD PTR [eax]
c000360e:	75 0e                	jne    c000361e <create_chain+0x1f>
c0003610:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0003613:	85 c9                	test   ecx,ecx
c0003615:	74 32                	je     c0003649 <create_chain+0x4a>
c0003617:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000361a:	77 32                	ja     c000364e <create_chain+0x4f>
c000361c:	eb 2b                	jmp    c0003649 <create_chain+0x4a>
c000361e:	89 d8                	mov    eax,ebx
c0003620:	e8 0d fe ff ff       	call   c0003432 <get_fat.isra.2>
c0003625:	83 f8 01             	cmp    eax,0x1
c0003628:	77 0a                	ja     c0003634 <create_chain+0x35>
c000362a:	b8 01 00 00 00       	mov    eax,0x1
c000362f:	e9 fd 00 00 00       	jmp    c0003731 <create_chain+0x132>
c0003634:	83 f8 ff             	cmp    eax,0xffffffff
c0003637:	0f 84 f1 00 00 00    	je     c000372e <create_chain+0x12f>
c000363d:	39 43 18             	cmp    DWORD PTR [ebx+0x18],eax
c0003640:	89 f9                	mov    ecx,edi
c0003642:	76 0a                	jbe    c000364e <create_chain+0x4f>
c0003644:	e9 e8 00 00 00       	jmp    c0003731 <create_chain+0x132>
c0003649:	b9 01 00 00 00       	mov    ecx,0x1
c000364e:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0003652:	75 07                	jne    c000365b <create_chain+0x5c>
c0003654:	31 c0                	xor    eax,eax
c0003656:	e9 d6 00 00 00       	jmp    c0003731 <create_chain+0x132>
c000365b:	39 f9                	cmp    ecx,edi
c000365d:	75 49                	jne    c00036a8 <create_chain+0xa9>
c000365f:	8d 71 01             	lea    esi,[ecx+0x1]
c0003662:	39 73 18             	cmp    DWORD PTR [ebx+0x18],esi
c0003665:	77 05                	ja     c000366c <create_chain+0x6d>
c0003667:	be 02 00 00 00       	mov    esi,0x2
c000366c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003670:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003673:	89 f2                	mov    edx,esi
c0003675:	e8 b8 fd ff ff       	call   c0003432 <get_fat.isra.2>
c000367a:	83 f8 01             	cmp    eax,0x1
c000367d:	0f 84 ae 00 00 00    	je     c0003731 <create_chain+0x132>
c0003683:	83 f8 ff             	cmp    eax,0xffffffff
c0003686:	0f 84 a5 00 00 00    	je     c0003731 <create_chain+0x132>
c000368c:	85 c0                	test   eax,eax
c000368e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003692:	74 10                	je     c00036a4 <create_chain+0xa5>
c0003694:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003697:	83 f8 01             	cmp    eax,0x1
c000369a:	76 0c                	jbe    c00036a8 <create_chain+0xa9>
c000369c:	39 43 18             	cmp    DWORD PTR [ebx+0x18],eax
c000369f:	0f 47 c8             	cmova  ecx,eax
c00036a2:	eb 04                	jmp    c00036a8 <create_chain+0xa9>
c00036a4:	85 f6                	test   esi,esi
c00036a6:	75 3b                	jne    c00036e3 <create_chain+0xe4>
c00036a8:	89 ce                	mov    esi,ecx
c00036aa:	46                   	inc    esi
c00036ab:	39 73 18             	cmp    DWORD PTR [ebx+0x18],esi
c00036ae:	77 0a                	ja     c00036ba <create_chain+0xbb>
c00036b0:	83 f9 01             	cmp    ecx,0x1
c00036b3:	76 9f                	jbe    c0003654 <create_chain+0x55>
c00036b5:	be 02 00 00 00       	mov    esi,0x2
c00036ba:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00036be:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00036c1:	89 f2                	mov    edx,esi
c00036c3:	e8 6a fd ff ff       	call   c0003432 <get_fat.isra.2>
c00036c8:	85 c0                	test   eax,eax
c00036ca:	74 17                	je     c00036e3 <create_chain+0xe4>
c00036cc:	83 f8 01             	cmp    eax,0x1
c00036cf:	74 60                	je     c0003731 <create_chain+0x132>
c00036d1:	83 f8 ff             	cmp    eax,0xffffffff
c00036d4:	74 5b                	je     c0003731 <create_chain+0x132>
c00036d6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00036da:	39 ce                	cmp    esi,ecx
c00036dc:	75 cc                	jne    c00036aa <create_chain+0xab>
c00036de:	e9 71 ff ff ff       	jmp    c0003654 <create_chain+0x55>
c00036e3:	83 c9 ff             	or     ecx,0xffffffff
c00036e6:	89 f2                	mov    edx,esi
c00036e8:	89 d8                	mov    eax,ebx
c00036ea:	e8 c0 f2 ff ff       	call   c00029af <put_fat>
c00036ef:	85 c0                	test   eax,eax
c00036f1:	75 0f                	jne    c0003702 <create_chain+0x103>
c00036f3:	85 ff                	test   edi,edi
c00036f5:	74 0b                	je     c0003702 <create_chain+0x103>
c00036f7:	89 f1                	mov    ecx,esi
c00036f9:	89 fa                	mov    edx,edi
c00036fb:	89 d8                	mov    eax,ebx
c00036fd:	e8 ad f2 ff ff       	call   c00029af <put_fat>
c0003702:	85 c0                	test   eax,eax
c0003704:	75 21                	jne    c0003727 <create_chain+0x128>
c0003706:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0003709:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000370c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000370f:	8d 57 fe             	lea    edx,[edi-0x2]
c0003712:	39 d0                	cmp    eax,edx
c0003714:	77 04                	ja     c000371a <create_chain+0x11b>
c0003716:	48                   	dec    eax
c0003717:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000371a:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c000371d:	83 c8 01             	or     eax,0x1
c0003720:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c0003723:	89 f0                	mov    eax,esi
c0003725:	eb 0a                	jmp    c0003731 <create_chain+0x132>
c0003727:	48                   	dec    eax
c0003728:	0f 85 fc fe ff ff    	jne    c000362a <create_chain+0x2b>
c000372e:	83 c8 ff             	or     eax,0xffffffff
c0003731:	83 c4 1c             	add    esp,0x1c
c0003734:	5b                   	pop    ebx
c0003735:	5e                   	pop    esi
c0003736:	5f                   	pop    edi
c0003737:	5d                   	pop    ebp
c0003738:	c3                   	ret    

c0003739 <remove_chain>:
c0003739:	55                   	push   ebp
c000373a:	57                   	push   edi
c000373b:	56                   	push   esi
c000373c:	89 d6                	mov    esi,edx
c000373e:	53                   	push   ebx
c000373f:	83 ec 0c             	sub    esp,0xc
c0003742:	83 fa 01             	cmp    edx,0x1
c0003745:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003747:	76 6a                	jbe    c00037b3 <remove_chain+0x7a>
c0003749:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000374c:	76 65                	jbe    c00037b3 <remove_chain+0x7a>
c000374e:	85 c9                	test   ecx,ecx
c0003750:	89 c5                	mov    ebp,eax
c0003752:	89 ca                	mov    edx,ecx
c0003754:	74 0e                	je     c0003764 <remove_chain+0x2b>
c0003756:	83 c9 ff             	or     ecx,0xffffffff
c0003759:	89 d8                	mov    eax,ebx
c000375b:	e8 4f f2 ff ff       	call   c00029af <put_fat>
c0003760:	85 c0                	test   eax,eax
c0003762:	75 5b                	jne    c00037bf <remove_chain+0x86>
c0003764:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003767:	89 f2                	mov    edx,esi
c0003769:	e8 c4 fc ff ff       	call   c0003432 <get_fat.isra.2>
c000376e:	85 c0                	test   eax,eax
c0003770:	89 c7                	mov    edi,eax
c0003772:	75 04                	jne    c0003778 <remove_chain+0x3f>
c0003774:	31 c0                	xor    eax,eax
c0003776:	eb 47                	jmp    c00037bf <remove_chain+0x86>
c0003778:	83 f8 01             	cmp    eax,0x1
c000377b:	74 36                	je     c00037b3 <remove_chain+0x7a>
c000377d:	83 f8 ff             	cmp    eax,0xffffffff
c0003780:	74 38                	je     c00037ba <remove_chain+0x81>
c0003782:	31 c9                	xor    ecx,ecx
c0003784:	89 f2                	mov    edx,esi
c0003786:	89 d8                	mov    eax,ebx
c0003788:	e8 22 f2 ff ff       	call   c00029af <put_fat>
c000378d:	85 c0                	test   eax,eax
c000378f:	75 2e                	jne    c00037bf <remove_chain+0x86>
c0003791:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003794:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003797:	8d 4a fe             	lea    ecx,[edx-0x2]
c000379a:	39 c8                	cmp    eax,ecx
c000379c:	73 0d                	jae    c00037ab <remove_chain+0x72>
c000379e:	40                   	inc    eax
c000379f:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00037a2:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c00037a5:	83 c8 01             	or     eax,0x1
c00037a8:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c00037ab:	39 fa                	cmp    edx,edi
c00037ad:	89 fe                	mov    esi,edi
c00037af:	77 b3                	ja     c0003764 <remove_chain+0x2b>
c00037b1:	eb c1                	jmp    c0003774 <remove_chain+0x3b>
c00037b3:	b8 02 00 00 00       	mov    eax,0x2
c00037b8:	eb 05                	jmp    c00037bf <remove_chain+0x86>
c00037ba:	b8 01 00 00 00       	mov    eax,0x1
c00037bf:	83 c4 0c             	add    esp,0xc
c00037c2:	5b                   	pop    ebx
c00037c3:	5e                   	pop    esi
c00037c4:	5f                   	pop    edi
c00037c5:	5d                   	pop    ebp
c00037c6:	c3                   	ret    

c00037c7 <dir_next>:
c00037c7:	55                   	push   ebp
c00037c8:	57                   	push   edi
c00037c9:	56                   	push   esi
c00037ca:	53                   	push   ebx
c00037cb:	83 ec 1c             	sub    esp,0x1c
c00037ce:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00037d1:	8b 28                	mov    ebp,DWORD PTR [eax]
c00037d3:	83 c7 20             	add    edi,0x20
c00037d6:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00037dc:	76 07                	jbe    c00037e5 <dir_next+0x1e>
c00037de:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00037e5:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c00037e8:	b9 04 00 00 00       	mov    ecx,0x4
c00037ed:	85 f6                	test   esi,esi
c00037ef:	0f 84 cd 00 00 00    	je     c00038c2 <dir_next+0xfb>
c00037f5:	89 c3                	mov    ebx,eax
c00037f7:	89 f8                	mov    eax,edi
c00037f9:	25 ff 01 00 00       	and    eax,0x1ff
c00037fe:	89 d1                	mov    ecx,edx
c0003800:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003804:	0f 85 a8 00 00 00    	jne    c00038b2 <dir_next+0xeb>
c000380a:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000380d:	46                   	inc    esi
c000380e:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c0003811:	85 d2                	test   edx,edx
c0003813:	75 22                	jne    c0003837 <dir_next+0x70>
c0003815:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003819:	89 fa                	mov    edx,edi
c000381b:	c1 ea 05             	shr    edx,0x5
c000381e:	39 c2                	cmp    edx,eax
c0003820:	0f 82 8c 00 00 00    	jb     c00038b2 <dir_next+0xeb>
c0003826:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000382d:	b9 04 00 00 00       	mov    ecx,0x4
c0003832:	e9 8b 00 00 00       	jmp    c00038c2 <dir_next+0xfb>
c0003837:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000383b:	89 fe                	mov    esi,edi
c000383d:	c1 ee 09             	shr    esi,0x9
c0003840:	48                   	dec    eax
c0003841:	85 f0                	test   eax,esi
c0003843:	75 6d                	jne    c00038b2 <dir_next+0xeb>
c0003845:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003849:	89 e8                	mov    eax,ebp
c000384b:	e8 e2 fb ff ff       	call   c0003432 <get_fat.isra.2>
c0003850:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003854:	83 f8 01             	cmp    eax,0x1
c0003857:	89 c6                	mov    esi,eax
c0003859:	77 07                	ja     c0003862 <dir_next+0x9b>
c000385b:	b9 02 00 00 00       	mov    ecx,0x2
c0003860:	eb 60                	jmp    c00038c2 <dir_next+0xfb>
c0003862:	83 f8 ff             	cmp    eax,0xffffffff
c0003865:	75 07                	jne    c000386e <dir_next+0xa7>
c0003867:	b9 01 00 00 00       	mov    ecx,0x1
c000386c:	eb 54                	jmp    c00038c2 <dir_next+0xfb>
c000386e:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003871:	77 30                	ja     c00038a3 <dir_next+0xdc>
c0003873:	85 c9                	test   ecx,ecx
c0003875:	74 af                	je     c0003826 <dir_next+0x5f>
c0003877:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000387a:	89 d8                	mov    eax,ebx
c000387c:	e8 7e fd ff ff       	call   c00035ff <create_chain>
c0003881:	b9 07 00 00 00       	mov    ecx,0x7
c0003886:	85 c0                	test   eax,eax
c0003888:	89 c6                	mov    esi,eax
c000388a:	74 36                	je     c00038c2 <dir_next+0xfb>
c000388c:	83 f8 01             	cmp    eax,0x1
c000388f:	74 ca                	je     c000385b <dir_next+0x94>
c0003891:	83 f8 ff             	cmp    eax,0xffffffff
c0003894:	74 d1                	je     c0003867 <dir_next+0xa0>
c0003896:	89 c2                	mov    edx,eax
c0003898:	89 e8                	mov    eax,ebp
c000389a:	e8 67 f2 ff ff       	call   c0002b06 <dir_clear>
c000389f:	85 c0                	test   eax,eax
c00038a1:	75 c4                	jne    c0003867 <dir_next+0xa0>
c00038a3:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c00038a6:	89 f2                	mov    edx,esi
c00038a8:	89 e8                	mov    eax,ebp
c00038aa:	e8 97 e9 ff ff       	call   c0002246 <clst2sect>
c00038af:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00038b2:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c00038b5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00038b9:	31 c9                	xor    ecx,ecx
c00038bb:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c00038bf:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00038c2:	83 c4 1c             	add    esp,0x1c
c00038c5:	89 c8                	mov    eax,ecx
c00038c7:	5b                   	pop    ebx
c00038c8:	5e                   	pop    esi
c00038c9:	5f                   	pop    edi
c00038ca:	5d                   	pop    ebp
c00038cb:	c3                   	ret    

c00038cc <dir_alloc>:
c00038cc:	55                   	push   ebp
c00038cd:	89 c5                	mov    ebp,eax
c00038cf:	57                   	push   edi
c00038d0:	89 d7                	mov    edi,edx
c00038d2:	56                   	push   esi
c00038d3:	31 d2                	xor    edx,edx
c00038d5:	53                   	push   ebx
c00038d6:	83 ec 0c             	sub    esp,0xc
c00038d9:	8b 30                	mov    esi,DWORD PTR [eax]
c00038db:	e8 57 fc ff ff       	call   c0003537 <dir_sdi>
c00038e0:	85 c0                	test   eax,eax
c00038e2:	75 3b                	jne    c000391f <dir_alloc+0x53>
c00038e4:	31 db                	xor    ebx,ebx
c00038e6:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00038e9:	89 f0                	mov    eax,esi
c00038eb:	e8 65 ec ff ff       	call   c0002555 <move_window>
c00038f0:	85 c0                	test   eax,eax
c00038f2:	75 2b                	jne    c000391f <dir_alloc+0x53>
c00038f4:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c00038f7:	0f b6 12             	movzx  edx,BYTE PTR [edx]
c00038fa:	81 fa e5 00 00 00    	cmp    edx,0xe5
c0003900:	74 04                	je     c0003906 <dir_alloc+0x3a>
c0003902:	85 d2                	test   edx,edx
c0003904:	75 07                	jne    c000390d <dir_alloc+0x41>
c0003906:	43                   	inc    ebx
c0003907:	39 fb                	cmp    ebx,edi
c0003909:	75 04                	jne    c000390f <dir_alloc+0x43>
c000390b:	eb 1c                	jmp    c0003929 <dir_alloc+0x5d>
c000390d:	31 db                	xor    ebx,ebx
c000390f:	ba 01 00 00 00       	mov    edx,0x1
c0003914:	89 e8                	mov    eax,ebp
c0003916:	e8 ac fe ff ff       	call   c00037c7 <dir_next>
c000391b:	85 c0                	test   eax,eax
c000391d:	74 c7                	je     c00038e6 <dir_alloc+0x1a>
c000391f:	83 f8 04             	cmp    eax,0x4
c0003922:	75 05                	jne    c0003929 <dir_alloc+0x5d>
c0003924:	b8 07 00 00 00       	mov    eax,0x7
c0003929:	83 c4 0c             	add    esp,0xc
c000392c:	5b                   	pop    ebx
c000392d:	5e                   	pop    esi
c000392e:	5f                   	pop    edi
c000392f:	5d                   	pop    ebp
c0003930:	c3                   	ret    

c0003931 <dir_read>:
c0003931:	55                   	push   ebp
c0003932:	57                   	push   edi
c0003933:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003938:	56                   	push   esi
c0003939:	be 04 00 00 00       	mov    esi,0x4
c000393e:	53                   	push   ebx
c000393f:	89 c3                	mov    ebx,eax
c0003941:	83 ec 1c             	sub    esp,0x1c
c0003944:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003948:	8b 28                	mov    ebp,DWORD PTR [eax]
c000394a:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c000394f:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003952:	85 d2                	test   edx,edx
c0003954:	0f 84 e3 00 00 00    	je     c0003a3d <dir_read+0x10c>
c000395a:	89 e8                	mov    eax,ebp
c000395c:	e8 f4 eb ff ff       	call   c0002555 <move_window>
c0003961:	85 c0                	test   eax,eax
c0003963:	89 c6                	mov    esi,eax
c0003965:	0f 85 dd 00 00 00    	jne    c0003a48 <dir_read+0x117>
c000396b:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000396e:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0003971:	88 04 24             	mov    BYTE PTR [esp],al
c0003974:	85 c0                	test   eax,eax
c0003976:	0f 84 c7 00 00 00    	je     c0003a43 <dir_read+0x112>
c000397c:	8a 4a 0b             	mov    cl,BYTE PTR [edx+0xb]
c000397f:	83 e1 3f             	and    ecx,0x3f
c0003982:	3d e5 00 00 00       	cmp    eax,0xe5
c0003987:	88 4b 06             	mov    BYTE PTR [ebx+0x6],cl
c000398a:	0f 84 93 00 00 00    	je     c0003a23 <dir_read+0xf2>
c0003990:	83 f8 2e             	cmp    eax,0x2e
c0003993:	0f 84 8a 00 00 00    	je     c0003a23 <dir_read+0xf2>
c0003999:	0f b6 c9             	movzx  ecx,cl
c000399c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00039a0:	83 e1 df             	and    ecx,0xffffffdf
c00039a3:	83 f9 08             	cmp    ecx,0x8
c00039a6:	0f 94 c1             	sete   cl
c00039a9:	0f b6 c9             	movzx  ecx,cl
c00039ac:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00039b0:	75 71                	jne    c0003a23 <dir_read+0xf2>
c00039b2:	83 7c 24 08 0f       	cmp    DWORD PTR [esp+0x8],0xf
c00039b7:	75 4a                	jne    c0003a03 <dir_read+0xd2>
c00039b9:	f6 04 24 40          	test   BYTE PTR [esp],0x40
c00039bd:	74 16                	je     c00039d5 <dir_read+0xa4>
c00039bf:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00039c2:	81 24 24 bf 00 00 00 	and    DWORD PTR [esp],0xbf
c00039c9:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00039cd:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00039d0:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00039d3:	eb 0e                	jmp    c00039e3 <dir_read+0xb2>
c00039d5:	89 f9                	mov    ecx,edi
c00039d7:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039dc:	0f b6 c9             	movzx  ecx,cl
c00039df:	39 c1                	cmp    ecx,eax
c00039e1:	75 45                	jne    c0003a28 <dir_read+0xf7>
c00039e3:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00039e7:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039ec:	3a 42 0d             	cmp    al,BYTE PTR [edx+0xd]
c00039ef:	75 37                	jne    c0003a28 <dir_read+0xf7>
c00039f1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00039f4:	e8 6a e8 ff ff       	call   c0002263 <pick_lfn>
c00039f9:	85 c0                	test   eax,eax
c00039fb:	74 2b                	je     c0003a28 <dir_read+0xf7>
c00039fd:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0003a00:	4f                   	dec    edi
c0003a01:	eb 25                	jmp    c0003a28 <dir_read+0xf7>
c0003a03:	89 f8                	mov    eax,edi
c0003a05:	84 c0                	test   al,al
c0003a07:	75 11                	jne    c0003a1a <dir_read+0xe9>
c0003a09:	89 d0                	mov    eax,edx
c0003a0b:	e8 30 ea ff ff       	call   c0002440 <sum_sfn>
c0003a10:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c0003a14:	75 04                	jne    c0003a1a <dir_read+0xe9>
c0003a16:	31 f6                	xor    esi,esi
c0003a18:	eb 35                	jmp    c0003a4f <dir_read+0x11e>
c0003a1a:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003a21:	eb 2c                	jmp    c0003a4f <dir_read+0x11e>
c0003a23:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003a28:	31 d2                	xor    edx,edx
c0003a2a:	89 d8                	mov    eax,ebx
c0003a2c:	e8 96 fd ff ff       	call   c00037c7 <dir_next>
c0003a31:	85 c0                	test   eax,eax
c0003a33:	89 c6                	mov    esi,eax
c0003a35:	0f 84 14 ff ff ff    	je     c000394f <dir_read+0x1e>
c0003a3b:	eb 0b                	jmp    c0003a48 <dir_read+0x117>
c0003a3d:	85 f6                	test   esi,esi
c0003a3f:	74 d5                	je     c0003a16 <dir_read+0xe5>
c0003a41:	eb 05                	jmp    c0003a48 <dir_read+0x117>
c0003a43:	be 04 00 00 00       	mov    esi,0x4
c0003a48:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003a4f:	83 c4 1c             	add    esp,0x1c
c0003a52:	89 f0                	mov    eax,esi
c0003a54:	5b                   	pop    ebx
c0003a55:	5e                   	pop    esi
c0003a56:	5f                   	pop    edi
c0003a57:	5d                   	pop    ebp
c0003a58:	c3                   	ret    

c0003a59 <dir_remove>:
c0003a59:	57                   	push   edi
c0003a5a:	56                   	push   esi
c0003a5b:	53                   	push   ebx
c0003a5c:	89 c3                	mov    ebx,eax
c0003a5e:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003a61:	8b 30                	mov    esi,DWORD PTR [eax]
c0003a63:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003a66:	83 fa ff             	cmp    edx,0xffffffff
c0003a69:	74 09                	je     c0003a74 <dir_remove+0x1b>
c0003a6b:	e8 c7 fa ff ff       	call   c0003537 <dir_sdi>
c0003a70:	85 c0                	test   eax,eax
c0003a72:	75 34                	jne    c0003aa8 <dir_remove+0x4f>
c0003a74:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a77:	89 f0                	mov    eax,esi
c0003a79:	e8 d7 ea ff ff       	call   c0002555 <move_window>
c0003a7e:	85 c0                	test   eax,eax
c0003a80:	75 1c                	jne    c0003a9e <dir_remove+0x45>
c0003a82:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003a85:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003a88:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003a8c:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c0003a8f:	73 17                	jae    c0003aa8 <dir_remove+0x4f>
c0003a91:	31 d2                	xor    edx,edx
c0003a93:	89 d8                	mov    eax,ebx
c0003a95:	e8 2d fd ff ff       	call   c00037c7 <dir_next>
c0003a9a:	85 c0                	test   eax,eax
c0003a9c:	74 d6                	je     c0003a74 <dir_remove+0x1b>
c0003a9e:	83 f8 04             	cmp    eax,0x4
c0003aa1:	75 05                	jne    c0003aa8 <dir_remove+0x4f>
c0003aa3:	b8 02 00 00 00       	mov    eax,0x2
c0003aa8:	5b                   	pop    ebx
c0003aa9:	5e                   	pop    esi
c0003aaa:	5f                   	pop    edi
c0003aab:	c3                   	ret    

c0003aac <dir_find>:
c0003aac:	55                   	push   ebp
c0003aad:	31 d2                	xor    edx,edx
c0003aaf:	57                   	push   edi
c0003ab0:	56                   	push   esi
c0003ab1:	53                   	push   ebx
c0003ab2:	89 c3                	mov    ebx,eax
c0003ab4:	83 ec 1c             	sub    esp,0x1c
c0003ab7:	8b 00                	mov    eax,DWORD PTR [eax]
c0003ab9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003abd:	89 d8                	mov    eax,ebx
c0003abf:	e8 73 fa ff ff       	call   c0003537 <dir_sdi>
c0003ac4:	85 c0                	test   eax,eax
c0003ac6:	89 c6                	mov    esi,eax
c0003ac8:	0f 85 22 01 00 00    	jne    c0003bf0 <dir_find+0x144>
c0003ace:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003ad5:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003ada:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003adf:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003ae2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003ae6:	e8 6a ea ff ff       	call   c0002555 <move_window>
c0003aeb:	85 c0                	test   eax,eax
c0003aed:	89 c6                	mov    esi,eax
c0003aef:	0f 85 fb 00 00 00    	jne    c0003bf0 <dir_find+0x144>
c0003af5:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c0003af8:	0f b6 17             	movzx  edx,BYTE PTR [edi]
c0003afb:	85 d2                	test   edx,edx
c0003afd:	89 d1                	mov    ecx,edx
c0003aff:	0f 84 e6 00 00 00    	je     c0003beb <dir_find+0x13f>
c0003b05:	8a 47 0b             	mov    al,BYTE PTR [edi+0xb]
c0003b08:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003b0c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003b10:	83 e0 3f             	and    eax,0x3f
c0003b13:	81 fa e5 00 00 00    	cmp    edx,0xe5
c0003b19:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003b1c:	0f 84 a8 00 00 00    	je     c0003bca <dir_find+0x11e>
c0003b22:	f6 44 24 08 08       	test   BYTE PTR [esp+0x8],0x8
c0003b27:	0f b6 c0             	movzx  eax,al
c0003b2a:	74 0b                	je     c0003b37 <dir_find+0x8b>
c0003b2c:	83 f8 0f             	cmp    eax,0xf
c0003b2f:	0f 85 95 00 00 00    	jne    c0003bca <dir_find+0x11e>
c0003b35:	eb 05                	jmp    c0003b3c <dir_find+0x90>
c0003b37:	83 f8 0f             	cmp    eax,0xf
c0003b3a:	75 62                	jne    c0003b9e <dir_find+0xf2>
c0003b3c:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c0003b40:	0f 85 90 00 00 00    	jne    c0003bd6 <dir_find+0x12a>
c0003b46:	f6 c1 40             	test   cl,0x40
c0003b49:	74 15                	je     c0003b60 <dir_find+0xb4>
c0003b4b:	8a 47 0d             	mov    al,BYTE PTR [edi+0xd]
c0003b4e:	81 e1 bf 00 00 00    	and    ecx,0xbf
c0003b54:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003b58:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003b5b:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003b5e:	eb 11                	jmp    c0003b71 <dir_find+0xc5>
c0003b60:	89 e8                	mov    eax,ebp
c0003b62:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003b67:	0f b6 d0             	movzx  edx,al
c0003b6a:	0f b6 c1             	movzx  eax,cl
c0003b6d:	39 c2                	cmp    edx,eax
c0003b6f:	75 65                	jne    c0003bd6 <dir_find+0x12a>
c0003b71:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003b75:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003b7a:	3a 47 0d             	cmp    al,BYTE PTR [edi+0xd]
c0003b7d:	75 57                	jne    c0003bd6 <dir_find+0x12a>
c0003b7f:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003b83:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b87:	89 fa                	mov    edx,edi
c0003b89:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003b8c:	e8 2c f3 ff ff       	call   c0002ebd <cmp_lfn>
c0003b91:	85 c0                	test   eax,eax
c0003b93:	74 41                	je     c0003bd6 <dir_find+0x12a>
c0003b95:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003b99:	8d 69 ff             	lea    ebp,[ecx-0x1]
c0003b9c:	eb 38                	jmp    c0003bd6 <dir_find+0x12a>
c0003b9e:	89 e8                	mov    eax,ebp
c0003ba0:	84 c0                	test   al,al
c0003ba2:	75 0d                	jne    c0003bb1 <dir_find+0x105>
c0003ba4:	89 f8                	mov    eax,edi
c0003ba6:	e8 95 e8 ff ff       	call   c0002440 <sum_sfn>
c0003bab:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c0003baf:	74 3f                	je     c0003bf0 <dir_find+0x144>
c0003bb1:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c0003bb5:	75 13                	jne    c0003bca <dir_find+0x11e>
c0003bb7:	8d 53 20             	lea    edx,[ebx+0x20]
c0003bba:	b9 0b 00 00 00       	mov    ecx,0xb
c0003bbf:	89 f8                	mov    eax,edi
c0003bc1:	e8 75 e4 ff ff       	call   c000203b <mem_cmp>
c0003bc6:	85 c0                	test   eax,eax
c0003bc8:	74 26                	je     c0003bf0 <dir_find+0x144>
c0003bca:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003bd1:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003bd6:	31 d2                	xor    edx,edx
c0003bd8:	89 d8                	mov    eax,ebx
c0003bda:	e8 e8 fb ff ff       	call   c00037c7 <dir_next>
c0003bdf:	85 c0                	test   eax,eax
c0003be1:	89 c6                	mov    esi,eax
c0003be3:	0f 84 f6 fe ff ff    	je     c0003adf <dir_find+0x33>
c0003be9:	eb 05                	jmp    c0003bf0 <dir_find+0x144>
c0003beb:	be 04 00 00 00       	mov    esi,0x4
c0003bf0:	83 c4 1c             	add    esp,0x1c
c0003bf3:	89 f0                	mov    eax,esi
c0003bf5:	5b                   	pop    ebx
c0003bf6:	5e                   	pop    esi
c0003bf7:	5f                   	pop    edi
c0003bf8:	5d                   	pop    ebp
c0003bf9:	c3                   	ret    

c0003bfa <follow_path>:
c0003bfa:	56                   	push   esi
c0003bfb:	53                   	push   ebx
c0003bfc:	89 c3                	mov    ebx,eax
c0003bfe:	83 ec 14             	sub    esp,0x14
c0003c01:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003c05:	8b 30                	mov    esi,DWORD PTR [eax]
c0003c07:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003c0b:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0003c0e:	83 fa 2f             	cmp    edx,0x2f
c0003c11:	75 07                	jne    c0003c1a <follow_path+0x20>
c0003c13:	40                   	inc    eax
c0003c14:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003c18:	eb ed                	jmp    c0003c07 <follow_path+0xd>
c0003c1a:	83 fa 5c             	cmp    edx,0x5c
c0003c1d:	74 f4                	je     c0003c13 <follow_path+0x19>
c0003c1f:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0003c26:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0003c29:	77 3e                	ja     c0003c69 <follow_path+0x6f>
c0003c2b:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c0003c2f:	31 d2                	xor    edx,edx
c0003c31:	89 d8                	mov    eax,ebx
c0003c33:	e8 ff f8 ff ff       	call   c0003537 <dir_sdi>
c0003c38:	eb 57                	jmp    c0003c91 <follow_path+0x97>
c0003c3a:	89 d8                	mov    eax,ebx
c0003c3c:	e8 6b fe ff ff       	call   c0003aac <dir_find>
c0003c41:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c0003c44:	85 c0                	test   eax,eax
c0003c46:	75 32                	jne    c0003c7a <follow_path+0x80>
c0003c48:	80 e2 04             	and    dl,0x4
c0003c4b:	75 44                	jne    c0003c91 <follow_path+0x97>
c0003c4d:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003c51:	74 39                	je     c0003c8c <follow_path+0x92>
c0003c53:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003c56:	25 ff 01 00 00       	and    eax,0x1ff
c0003c5b:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003c5f:	8a 06                	mov    al,BYTE PTR [esi]
c0003c61:	e8 7b f7 ff ff       	call   c00033e1 <ld_clust.isra.0>
c0003c66:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003c69:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003c6d:	89 d8                	mov    eax,ebx
c0003c6f:	e8 8e ef ff ff       	call   c0002c02 <create_name>
c0003c74:	85 c0                	test   eax,eax
c0003c76:	74 c2                	je     c0003c3a <follow_path+0x40>
c0003c78:	eb 17                	jmp    c0003c91 <follow_path+0x97>
c0003c7a:	83 f8 04             	cmp    eax,0x4
c0003c7d:	75 12                	jne    c0003c91 <follow_path+0x97>
c0003c7f:	80 e2 04             	and    dl,0x4
c0003c82:	ba 05 00 00 00       	mov    edx,0x5
c0003c87:	0f 44 c2             	cmove  eax,edx
c0003c8a:	eb 05                	jmp    c0003c91 <follow_path+0x97>
c0003c8c:	b8 05 00 00 00       	mov    eax,0x5
c0003c91:	83 c4 14             	add    esp,0x14
c0003c94:	5b                   	pop    ebx
c0003c95:	5e                   	pop    esi
c0003c96:	c3                   	ret    

c0003c97 <dir_register>:
c0003c97:	55                   	push   ebp
c0003c98:	57                   	push   edi
c0003c99:	56                   	push   esi
c0003c9a:	be 06 00 00 00       	mov    esi,0x6
c0003c9f:	53                   	push   ebx
c0003ca0:	83 ec 2c             	sub    esp,0x2c
c0003ca3:	8a 50 2b             	mov    dl,BYTE PTR [eax+0x2b]
c0003ca6:	80 e2 a0             	and    dl,0xa0
c0003ca9:	0f 85 66 01 00 00    	jne    c0003e15 <dir_register+0x17e>
c0003caf:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003cb7:	8b 38                	mov    edi,DWORD PTR [eax]
c0003cb9:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003cbc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003cc0:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003cc5:	74 06                	je     c0003ccd <dir_register+0x36>
c0003cc7:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003ccb:	eb ef                	jmp    c0003cbc <dir_register+0x25>
c0003ccd:	89 c3                	mov    ebx,eax
c0003ccf:	b9 0c 00 00 00       	mov    ecx,0xc
c0003cd4:	8d 40 20             	lea    eax,[eax+0x20]
c0003cd7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003cdb:	89 c2                	mov    edx,eax
c0003cdd:	8d 44 24 14          	lea    eax,[esp+0x14]
c0003ce1:	e8 36 e3 ff ff       	call   c000201c <mem_cpy>
c0003ce6:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003ceb:	74 48                	je     c0003d35 <dir_register+0x9e>
c0003ced:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c0003cf1:	bd 01 00 00 00       	mov    ebp,0x1
c0003cf6:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003cf9:	55                   	push   ebp
c0003cfa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003cfe:	8d 54 24 18          	lea    edx,[esp+0x18]
c0003d02:	e8 77 e6 ff ff       	call   c000237e <gen_numname>
c0003d07:	58                   	pop    eax
c0003d08:	89 d8                	mov    eax,ebx
c0003d0a:	e8 9d fd ff ff       	call   c0003aac <dir_find>
c0003d0f:	85 c0                	test   eax,eax
c0003d11:	89 c6                	mov    esi,eax
c0003d13:	75 10                	jne    c0003d25 <dir_register+0x8e>
c0003d15:	45                   	inc    ebp
c0003d16:	83 fd 64             	cmp    ebp,0x64
c0003d19:	75 db                	jne    c0003cf6 <dir_register+0x5f>
c0003d1b:	be 07 00 00 00       	mov    esi,0x7
c0003d20:	e9 f0 00 00 00       	jmp    c0003e15 <dir_register+0x17e>
c0003d25:	83 f8 04             	cmp    eax,0x4
c0003d28:	0f 85 e7 00 00 00    	jne    c0003e15 <dir_register+0x17e>
c0003d2e:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0003d32:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c0003d35:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0003d3a:	bd 01 00 00 00       	mov    ebp,0x1
c0003d3f:	74 13                	je     c0003d54 <dir_register+0xbd>
c0003d41:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003d45:	b9 0d 00 00 00       	mov    ecx,0xd
c0003d4a:	31 d2                	xor    edx,edx
c0003d4c:	83 c0 0c             	add    eax,0xc
c0003d4f:	f7 f1                	div    ecx
c0003d51:	8d 68 01             	lea    ebp,[eax+0x1]
c0003d54:	89 ea                	mov    edx,ebp
c0003d56:	89 d8                	mov    eax,ebx
c0003d58:	e8 6f fb ff ff       	call   c00038cc <dir_alloc>
c0003d5d:	85 c0                	test   eax,eax
c0003d5f:	89 c6                	mov    esi,eax
c0003d61:	0f 85 ae 00 00 00    	jne    c0003e15 <dir_register+0x17e>
c0003d67:	4d                   	dec    ebp
c0003d68:	74 6b                	je     c0003dd5 <dir_register+0x13e>
c0003d6a:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003d6d:	89 e8                	mov    eax,ebp
c0003d6f:	c1 e0 05             	shl    eax,0x5
c0003d72:	29 c2                	sub    edx,eax
c0003d74:	89 d8                	mov    eax,ebx
c0003d76:	e8 bc f7 ff ff       	call   c0003537 <dir_sdi>
c0003d7b:	85 c0                	test   eax,eax
c0003d7d:	89 c6                	mov    esi,eax
c0003d7f:	0f 85 90 00 00 00    	jne    c0003e15 <dir_register+0x17e>
c0003d85:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003d89:	e8 b2 e6 ff ff       	call   c0002440 <sum_sfn>
c0003d8e:	0f b6 c0             	movzx  eax,al
c0003d91:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003d95:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003d98:	89 f8                	mov    eax,edi
c0003d9a:	e8 b6 e7 ff ff       	call   c0002555 <move_window>
c0003d9f:	85 c0                	test   eax,eax
c0003da1:	89 c6                	mov    esi,eax
c0003da3:	75 70                	jne    c0003e15 <dir_register+0x17e>
c0003da5:	83 ec 0c             	sub    esp,0xc
c0003da8:	89 e8                	mov    eax,ebp
c0003daa:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003dad:	0f b6 c8             	movzx  ecx,al
c0003db0:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003db3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0003db7:	e8 27 e5 ff ff       	call   c00022e3 <put_lfn>
c0003dbc:	31 d2                	xor    edx,edx
c0003dbe:	89 d8                	mov    eax,ebx
c0003dc0:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003dc4:	e8 fe f9 ff ff       	call   c00037c7 <dir_next>
c0003dc9:	83 c4 10             	add    esp,0x10
c0003dcc:	85 c0                	test   eax,eax
c0003dce:	89 c6                	mov    esi,eax
c0003dd0:	75 43                	jne    c0003e15 <dir_register+0x17e>
c0003dd2:	4d                   	dec    ebp
c0003dd3:	75 c0                	jne    c0003d95 <dir_register+0xfe>
c0003dd5:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003dd8:	89 f8                	mov    eax,edi
c0003dda:	e8 76 e7 ff ff       	call   c0002555 <move_window>
c0003ddf:	85 c0                	test   eax,eax
c0003de1:	89 c6                	mov    esi,eax
c0003de3:	75 30                	jne    c0003e15 <dir_register+0x17e>
c0003de5:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003de8:	b9 20 00 00 00       	mov    ecx,0x20
c0003ded:	31 d2                	xor    edx,edx
c0003def:	e8 3d e2 ff ff       	call   c0002031 <mem_set>
c0003df4:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003df7:	b9 0b 00 00 00       	mov    ecx,0xb
c0003dfc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003e00:	e8 17 e2 ff ff       	call   c000201c <mem_cpy>
c0003e05:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003e08:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003e0b:	83 e0 18             	and    eax,0x18
c0003e0e:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003e11:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003e15:	83 c4 2c             	add    esp,0x2c
c0003e18:	89 f0                	mov    eax,esi
c0003e1a:	5b                   	pop    ebx
c0003e1b:	5e                   	pop    esi
c0003e1c:	5f                   	pop    edi
c0003e1d:	5d                   	pop    ebp
c0003e1e:	c3                   	ret    

c0003e1f <f_mount>:
c0003e1f:	53                   	push   ebx
c0003e20:	83 ec 18             	sub    esp,0x18
c0003e23:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003e27:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003e2b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003e2f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003e33:	e8 28 e6 ff ff       	call   c0002460 <get_ldnumber>
c0003e38:	89 c2                	mov    edx,eax
c0003e3a:	b8 0b 00 00 00       	mov    eax,0xb
c0003e3f:	85 d2                	test   edx,edx
c0003e41:	78 39                	js     c0003e7c <f_mount+0x5d>
c0003e43:	8b 04 95 a0 24 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffcdb60]
c0003e4a:	85 c0                	test   eax,eax
c0003e4c:	74 03                	je     c0003e51 <f_mount+0x32>
c0003e4e:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003e51:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003e55:	85 c0                	test   eax,eax
c0003e57:	74 03                	je     c0003e5c <f_mount+0x3d>
c0003e59:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003e5c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003e60:	89 04 95 a0 24 03 c0 	mov    DWORD PTR [edx*4-0x3ffcdb60],eax
c0003e67:	31 c0                	xor    eax,eax
c0003e69:	84 db                	test   bl,bl
c0003e6b:	74 0f                	je     c0003e7c <f_mount+0x5d>
c0003e6d:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003e71:	31 c9                	xor    ecx,ecx
c0003e73:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003e77:	e8 36 e8 ff ff       	call   c00026b2 <mount_volume>
c0003e7c:	83 c4 18             	add    esp,0x18
c0003e7f:	5b                   	pop    ebx
c0003e80:	c3                   	ret    

c0003e81 <f_open>:
c0003e81:	55                   	push   ebp
c0003e82:	b8 09 00 00 00       	mov    eax,0x9
c0003e87:	57                   	push   edi
c0003e88:	56                   	push   esi
c0003e89:	53                   	push   ebx
c0003e8a:	83 ec 5c             	sub    esp,0x5c
c0003e8d:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003e91:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003e95:	85 db                	test   ebx,ebx
c0003e97:	0f 84 9f 02 00 00    	je     c000413c <f_open+0x2bb>
c0003e9d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003ea1:	89 fd                	mov    ebp,edi
c0003ea3:	83 e5 3f             	and    ebp,0x3f
c0003ea6:	89 e8                	mov    eax,ebp
c0003ea8:	89 ee                	mov    esi,ebp
c0003eaa:	0f b6 c8             	movzx  ecx,al
c0003ead:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003eb1:	e8 fc e7 ff ff       	call   c00026b2 <mount_volume>
c0003eb6:	85 c0                	test   eax,eax
c0003eb8:	0f 85 78 02 00 00    	jne    c0004136 <f_open+0x2b5>
c0003ebe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003ec2:	83 ec 0c             	sub    esp,0xc
c0003ec5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003ec9:	68 00 02 00 00       	push   0x200
c0003ece:	e8 61 1f 00 00       	call   c0005e34 <ff_memalloc>
c0003ed3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0003ed7:	83 c4 10             	add    esp,0x10
c0003eda:	b8 11 00 00 00       	mov    eax,0x11
c0003edf:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003ee4:	0f 84 52 02 00 00    	je     c000413c <f_open+0x2bb>
c0003eea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003eee:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003ef2:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003ef6:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0003ef9:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003efd:	e8 f8 fc ff ff       	call   c0003bfa <follow_path>
c0003f02:	85 c0                	test   eax,eax
c0003f04:	75 0d                	jne    c0003f13 <f_open+0x92>
c0003f06:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0003f0b:	ba 06 00 00 00       	mov    edx,0x6
c0003f10:	0f 45 c2             	cmovne eax,edx
c0003f13:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003f19:	0f 84 d5 00 00 00    	je     c0003ff4 <f_open+0x173>
c0003f1f:	85 c0                	test   eax,eax
c0003f21:	74 21                	je     c0003f44 <f_open+0xc3>
c0003f23:	83 f8 04             	cmp    eax,0x4
c0003f26:	0f 85 ef 01 00 00    	jne    c000411b <f_open+0x29a>
c0003f2c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003f30:	e8 62 fd ff ff       	call   c0003c97 <dir_register>
c0003f35:	85 c0                	test   eax,eax
c0003f37:	0f 85 de 01 00 00    	jne    c000411b <f_open+0x29a>
c0003f3d:	83 cd 08             	or     ebp,0x8
c0003f40:	89 ee                	mov    esi,ebp
c0003f42:	eb 2c                	jmp    c0003f70 <f_open+0xef>
c0003f44:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003f48:	b8 07 00 00 00       	mov    eax,0x7
c0003f4d:	80 e2 11             	and    dl,0x11
c0003f50:	0f 85 c5 01 00 00    	jne    c000411b <f_open+0x29a>
c0003f56:	f7 c7 04 00 00 00    	test   edi,0x4
c0003f5c:	b8 08 00 00 00       	mov    eax,0x8
c0003f61:	0f 85 b4 01 00 00    	jne    c000411b <f_open+0x29a>
c0003f67:	83 e7 08             	and    edi,0x8
c0003f6a:	0f 84 b1 00 00 00    	je     c0004021 <f_open+0x1a0>
c0003f70:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f74:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0003f78:	8a 00                	mov    al,BYTE PTR [eax]
c0003f7a:	89 ea                	mov    edx,ebp
c0003f7c:	e8 60 f4 ff ff       	call   c00033e1 <ld_clust.isra.0>
c0003f81:	ba 00 00 21 50       	mov    edx,0x50210000
c0003f86:	89 c7                	mov    edi,eax
c0003f88:	8d 45 0e             	lea    eax,[ebp+0xe]
c0003f8b:	e8 89 e0 ff ff       	call   c0002019 <st_dword>
c0003f90:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003f94:	31 c9                	xor    ecx,ecx
c0003f96:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003f9a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f9e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003fa2:	e8 63 f4 ff ff       	call   c000340a <st_clust.isra.1>
c0003fa7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003fab:	31 d2                	xor    edx,edx
c0003fad:	83 c0 1c             	add    eax,0x1c
c0003fb0:	e8 64 e0 ff ff       	call   c0002019 <st_dword>
c0003fb5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003fb9:	85 ff                	test   edi,edi
c0003fbb:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003fbf:	74 60                	je     c0004021 <f_open+0x1a0>
c0003fc1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003fc5:	31 c9                	xor    ecx,ecx
c0003fc7:	89 fa                	mov    edx,edi
c0003fc9:	8b 68 30             	mov    ebp,DWORD PTR [eax+0x30]
c0003fcc:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003fd0:	e8 64 f7 ff ff       	call   c0003739 <remove_chain>
c0003fd5:	85 c0                	test   eax,eax
c0003fd7:	0f 85 3e 01 00 00    	jne    c000411b <f_open+0x29a>
c0003fdd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003fe1:	89 ea                	mov    edx,ebp
c0003fe3:	4f                   	dec    edi
c0003fe4:	e8 6c e5 ff ff       	call   c0002555 <move_window>
c0003fe9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003fed:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003ff0:	85 c0                	test   eax,eax
c0003ff2:	eb 27                	jmp    c000401b <f_open+0x19a>
c0003ff4:	85 c0                	test   eax,eax
c0003ff6:	0f 85 1f 01 00 00    	jne    c000411b <f_open+0x29a>
c0003ffc:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0004000:	b8 04 00 00 00       	mov    eax,0x4
c0004005:	f6 c2 10             	test   dl,0x10
c0004008:	0f 85 0d 01 00 00    	jne    c000411b <f_open+0x29a>
c000400e:	83 e7 02             	and    edi,0x2
c0004011:	74 0e                	je     c0004021 <f_open+0x1a0>
c0004013:	b8 07 00 00 00       	mov    eax,0x7
c0004018:	80 e2 01             	and    dl,0x1
c000401b:	0f 85 fa 00 00 00    	jne    c000411b <f_open+0x29a>
c0004021:	f7 c6 08 00 00 00    	test   esi,0x8
c0004027:	74 03                	je     c000402c <f_open+0x1ab>
c0004029:	83 ce 40             	or     esi,0x40
c000402c:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0004030:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0004034:	8b 45 30             	mov    eax,DWORD PTR [ebp+0x30]
c0004037:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c000403a:	89 fa                	mov    edx,edi
c000403c:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000403f:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0004042:	e8 9a f3 ff ff       	call   c00033e1 <ld_clust.isra.0>
c0004047:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000404a:	8d 47 1c             	lea    eax,[edi+0x1c]
c000404d:	e8 ab df ff ff       	call   c0001ffd <ld_dword>
c0004052:	8d 7b 28             	lea    edi,[ebx+0x28]
c0004055:	31 d2                	xor    edx,edx
c0004057:	89 2b                	mov    DWORD PTR [ebx],ebp
c0004059:	b9 00 02 00 00       	mov    ecx,0x200
c000405e:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004061:	66 8b 45 06          	mov    ax,WORD PTR [ebp+0x6]
c0004065:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0004069:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0004070:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0004077:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000407b:	89 f0                	mov    eax,esi
c000407d:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004080:	89 f8                	mov    eax,edi
c0004082:	e8 aa df ff ff       	call   c0002031 <mem_set>
c0004087:	83 e6 20             	and    esi,0x20
c000408a:	75 07                	jne    c0004093 <f_open+0x212>
c000408c:	31 c0                	xor    eax,eax
c000408e:	e9 88 00 00 00       	jmp    c000411b <f_open+0x29a>
c0004093:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0004096:	85 f6                	test   esi,esi
c0004098:	74 f2                	je     c000408c <f_open+0x20b>
c000409a:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000409d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00040a1:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00040a4:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00040a8:	31 c0                	xor    eax,eax
c00040aa:	c1 e5 09             	shl    ebp,0x9
c00040ad:	85 c0                	test   eax,eax
c00040af:	75 23                	jne    c00040d4 <f_open+0x253>
c00040b1:	39 ee                	cmp    esi,ebp
c00040b3:	76 1f                	jbe    c00040d4 <f_open+0x253>
c00040b5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00040b7:	e8 76 f3 ff ff       	call   c0003432 <get_fat.isra.2>
c00040bc:	89 c2                	mov    edx,eax
c00040be:	b8 02 00 00 00       	mov    eax,0x2
c00040c3:	83 fa 01             	cmp    edx,0x1
c00040c6:	76 08                	jbe    c00040d0 <f_open+0x24f>
c00040c8:	31 c0                	xor    eax,eax
c00040ca:	83 fa ff             	cmp    edx,0xffffffff
c00040cd:	0f 94 c0             	sete   al
c00040d0:	29 ee                	sub    esi,ebp
c00040d2:	eb d9                	jmp    c00040ad <f_open+0x22c>
c00040d4:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00040d7:	85 c0                	test   eax,eax
c00040d9:	75 40                	jne    c000411b <f_open+0x29a>
c00040db:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c00040e1:	74 a9                	je     c000408c <f_open+0x20b>
c00040e3:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c00040e7:	89 e8                	mov    eax,ebp
c00040e9:	e8 58 e1 ff ff       	call   c0002246 <clst2sect>
c00040ee:	89 c2                	mov    edx,eax
c00040f0:	b8 02 00 00 00       	mov    eax,0x2
c00040f5:	85 d2                	test   edx,edx
c00040f7:	74 22                	je     c000411b <f_open+0x29a>
c00040f9:	c1 ee 09             	shr    esi,0x9
c00040fc:	8d 04 16             	lea    eax,[esi+edx*1]
c00040ff:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004102:	6a 01                	push   0x1
c0004104:	50                   	push   eax
c0004105:	57                   	push   edi
c0004106:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c000410a:	50                   	push   eax
c000410b:	e8 95 de ff ff       	call   c0001fa5 <disk_read>
c0004110:	83 c4 10             	add    esp,0x10
c0004113:	85 c0                	test   eax,eax
c0004115:	0f 95 c0             	setne  al
c0004118:	0f b6 c0             	movzx  eax,al
c000411b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000411f:	83 ec 0c             	sub    esp,0xc
c0004122:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0004126:	e8 21 1d 00 00       	call   c0005e4c <ff_memfree>
c000412b:	83 c4 10             	add    esp,0x10
c000412e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004132:	85 c0                	test   eax,eax
c0004134:	74 06                	je     c000413c <f_open+0x2bb>
c0004136:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000413c:	83 c4 5c             	add    esp,0x5c
c000413f:	5b                   	pop    ebx
c0004140:	5e                   	pop    esi
c0004141:	5f                   	pop    edi
c0004142:	5d                   	pop    ebp
c0004143:	c3                   	ret    

c0004144 <f_read>:
c0004144:	55                   	push   ebp
c0004145:	57                   	push   edi
c0004146:	56                   	push   esi
c0004147:	53                   	push   ebx
c0004148:	83 ec 2c             	sub    esp,0x2c
c000414b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000414f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004153:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004157:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c000415b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0004161:	89 d8                	mov    eax,ebx
c0004163:	e8 44 e3 ff ff       	call   c00024ac <validate>
c0004168:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000416c:	85 c0                	test   eax,eax
c000416e:	0f 85 a5 01 00 00    	jne    c0004319 <f_read+0x1d5>
c0004174:	0f b6 43 11          	movzx  eax,BYTE PTR [ebx+0x11]
c0004178:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000417c:	85 c0                	test   eax,eax
c000417e:	0f 85 95 01 00 00    	jne    c0004319 <f_read+0x1d5>
c0004184:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0004188:	0f 84 83 01 00 00    	je     c0004311 <f_read+0x1cd>
c000418e:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004191:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0004194:	39 f8                	cmp    eax,edi
c0004196:	0f 46 f8             	cmovbe edi,eax
c0004199:	85 ff                	test   edi,edi
c000419b:	0f 84 78 01 00 00    	je     c0004319 <f_read+0x1d5>
c00041a1:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041a4:	a9 ff 01 00 00       	test   eax,0x1ff
c00041a9:	0f 85 2b 01 00 00    	jne    c00042da <f_read+0x196>
c00041af:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00041b3:	0f b7 6a 0a          	movzx  ebp,WORD PTR [edx+0xa]
c00041b7:	89 c2                	mov    edx,eax
c00041b9:	c1 ea 09             	shr    edx,0x9
c00041bc:	4d                   	dec    ebp
c00041bd:	21 d5                	and    ebp,edx
c00041bf:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00041c3:	75 42                	jne    c0004207 <f_read+0xc3>
c00041c5:	85 c0                	test   eax,eax
c00041c7:	75 05                	jne    c00041ce <f_read+0x8a>
c00041c9:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00041cc:	eb 0a                	jmp    c00041d8 <f_read+0x94>
c00041ce:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00041d1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00041d3:	e8 5a f2 ff ff       	call   c0003432 <get_fat.isra.2>
c00041d8:	83 f8 01             	cmp    eax,0x1
c00041db:	77 11                	ja     c00041ee <f_read+0xaa>
c00041dd:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00041e1:	c7 44 24 04 02 00 00 00 	mov    DWORD PTR [esp+0x4],0x2
c00041e9:	e9 2b 01 00 00       	jmp    c0004319 <f_read+0x1d5>
c00041ee:	83 f8 ff             	cmp    eax,0xffffffff
c00041f1:	75 11                	jne    c0004204 <f_read+0xc0>
c00041f3:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00041f7:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c00041ff:	e9 15 01 00 00       	jmp    c0004319 <f_read+0x1d5>
c0004204:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004207:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000420b:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000420e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004212:	89 c8                	mov    eax,ecx
c0004214:	e8 2d e0 ff ff       	call   c0002246 <clst2sect>
c0004219:	85 c0                	test   eax,eax
c000421b:	74 c0                	je     c00041dd <f_read+0x99>
c000421d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0004221:	81 ff ff 01 00 00    	cmp    edi,0x1ff
c0004227:	8d 2c 01             	lea    ebp,[ecx+eax*1]
c000422a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000422e:	76 58                	jbe    c0004288 <f_read+0x144>
c0004230:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004234:	89 fe                	mov    esi,edi
c0004236:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c000423a:	c1 ee 09             	shr    esi,0x9
c000423d:	01 f2                	add    edx,esi
c000423f:	39 c2                	cmp    edx,eax
c0004241:	76 06                	jbe    c0004249 <f_read+0x105>
c0004243:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0004247:	89 c6                	mov    esi,eax
c0004249:	56                   	push   esi
c000424a:	55                   	push   ebp
c000424b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000424f:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004253:	50                   	push   eax
c0004254:	e8 4c dd ff ff       	call   c0001fa5 <disk_read>
c0004259:	83 c4 10             	add    esp,0x10
c000425c:	85 c0                	test   eax,eax
c000425e:	75 93                	jne    c00041f3 <f_read+0xaf>
c0004260:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c0004264:	74 1d                	je     c0004283 <f_read+0x13f>
c0004266:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004269:	29 e8                	sub    eax,ebp
c000426b:	39 f0                	cmp    eax,esi
c000426d:	73 14                	jae    c0004283 <f_read+0x13f>
c000426f:	c1 e0 09             	shl    eax,0x9
c0004272:	b9 00 02 00 00       	mov    ecx,0x200
c0004277:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000427b:	8d 53 28             	lea    edx,[ebx+0x28]
c000427e:	e8 99 dd ff ff       	call   c000201c <mem_cpy>
c0004283:	c1 e6 09             	shl    esi,0x9
c0004286:	eb 75                	jmp    c00042fd <f_read+0x1b9>
c0004288:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000428b:	39 e8                	cmp    eax,ebp
c000428d:	74 48                	je     c00042d7 <f_read+0x193>
c000428f:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c0004293:	8d 73 28             	lea    esi,[ebx+0x28]
c0004296:	74 22                	je     c00042ba <f_read+0x176>
c0004298:	6a 01                	push   0x1
c000429a:	50                   	push   eax
c000429b:	56                   	push   esi
c000429c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00042a0:	50                   	push   eax
c00042a1:	e8 15 dd ff ff       	call   c0001fbb <disk_write>
c00042a6:	83 c4 10             	add    esp,0x10
c00042a9:	85 c0                	test   eax,eax
c00042ab:	0f 85 42 ff ff ff    	jne    c00041f3 <f_read+0xaf>
c00042b1:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00042b4:	83 e0 7f             	and    eax,0x7f
c00042b7:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00042ba:	6a 01                	push   0x1
c00042bc:	55                   	push   ebp
c00042bd:	56                   	push   esi
c00042be:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00042c2:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00042c6:	50                   	push   eax
c00042c7:	e8 d9 dc ff ff       	call   c0001fa5 <disk_read>
c00042cc:	83 c4 10             	add    esp,0x10
c00042cf:	85 c0                	test   eax,eax
c00042d1:	0f 85 1c ff ff ff    	jne    c00041f3 <f_read+0xaf>
c00042d7:	89 6b 1c             	mov    DWORD PTR [ebx+0x1c],ebp
c00042da:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00042dd:	be 00 02 00 00       	mov    esi,0x200
c00042e2:	25 ff 01 00 00       	and    eax,0x1ff
c00042e7:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c00042eb:	29 c6                	sub    esi,eax
c00042ed:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00042f1:	39 f7                	cmp    edi,esi
c00042f3:	0f 46 f7             	cmovbe esi,edi
c00042f6:	89 f1                	mov    ecx,esi
c00042f8:	e8 1f dd ff ff       	call   c000201c <mem_cpy>
c00042fd:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004301:	29 f7                	sub    edi,esi
c0004303:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004307:	01 30                	add    DWORD PTR [eax],esi
c0004309:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c000430c:	e9 88 fe ff ff       	jmp    c0004199 <f_read+0x55>
c0004311:	c7 44 24 04 07 00 00 00 	mov    DWORD PTR [esp+0x4],0x7
c0004319:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000431d:	83 c4 2c             	add    esp,0x2c
c0004320:	5b                   	pop    ebx
c0004321:	5e                   	pop    esi
c0004322:	5f                   	pop    edi
c0004323:	5d                   	pop    ebp
c0004324:	c3                   	ret    

c0004325 <f_write>:
c0004325:	55                   	push   ebp
c0004326:	57                   	push   edi
c0004327:	56                   	push   esi
c0004328:	53                   	push   ebx
c0004329:	83 ec 2c             	sub    esp,0x2c
c000432c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004330:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004334:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004338:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000433e:	89 d8                	mov    eax,ebx
c0004340:	e8 67 e1 ff ff       	call   c00024ac <validate>
c0004345:	85 c0                	test   eax,eax
c0004347:	89 c7                	mov    edi,eax
c0004349:	0f 85 13 02 00 00    	jne    c0004562 <f_write+0x23d>
c000434f:	0f b6 7b 11          	movzx  edi,BYTE PTR [ebx+0x11]
c0004353:	85 ff                	test   edi,edi
c0004355:	0f 85 07 02 00 00    	jne    c0004562 <f_write+0x23d>
c000435b:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000435f:	0f 84 f8 01 00 00    	je     c000455d <f_write+0x238>
c0004365:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004368:	89 c1                	mov    ecx,eax
c000436a:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c000436e:	0f 83 ed 00 00 00    	jae    c0004461 <f_write+0x13c>
c0004374:	f7 d0                	not    eax
c0004376:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000437a:	e9 e2 00 00 00       	jmp    c0004461 <f_write+0x13c>
c000437f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004382:	a9 ff 01 00 00       	test   eax,0x1ff
c0004387:	0f 85 9b 01 00 00    	jne    c0004528 <f_write+0x203>
c000438d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004391:	0f b7 6a 0a          	movzx  ebp,WORD PTR [edx+0xa]
c0004395:	89 c2                	mov    edx,eax
c0004397:	c1 ea 09             	shr    edx,0x9
c000439a:	4d                   	dec    ebp
c000439b:	21 d5                	and    ebp,edx
c000439d:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00043a1:	0f 84 c7 00 00 00    	je     c000446e <f_write+0x149>
c00043a7:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00043ab:	0f 85 23 01 00 00    	jne    c00044d4 <f_write+0x1af>
c00043b1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00043b5:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00043b8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00043bc:	89 c8                	mov    eax,ecx
c00043be:	e8 83 de ff ff       	call   c0002246 <clst2sect>
c00043c3:	85 c0                	test   eax,eax
c00043c5:	0f 84 d3 00 00 00    	je     c000449e <f_write+0x179>
c00043cb:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00043cf:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00043d7:	8d 2c 01             	lea    ebp,[ecx+eax*1]
c00043da:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00043de:	0f 86 1c 01 00 00    	jbe    c0004500 <f_write+0x1db>
c00043e4:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00043e8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00043ec:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00043f0:	c1 ee 09             	shr    esi,0x9
c00043f3:	01 f2                	add    edx,esi
c00043f5:	39 c2                	cmp    edx,eax
c00043f7:	76 06                	jbe    c00043ff <f_write+0xda>
c00043f9:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00043fd:	89 c6                	mov    esi,eax
c00043ff:	56                   	push   esi
c0004400:	55                   	push   ebp
c0004401:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0004405:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004409:	50                   	push   eax
c000440a:	e8 ac db ff ff       	call   c0001fbb <disk_write>
c000440f:	83 c4 10             	add    esp,0x10
c0004412:	85 c0                	test   eax,eax
c0004414:	0f 85 97 00 00 00    	jne    c00044b1 <f_write+0x18c>
c000441a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000441d:	29 ea                	sub    edx,ebp
c000441f:	39 f2                	cmp    edx,esi
c0004421:	73 1d                	jae    c0004440 <f_write+0x11b>
c0004423:	c1 e2 09             	shl    edx,0x9
c0004426:	b9 00 02 00 00       	mov    ecx,0x200
c000442b:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c000442f:	8d 43 28             	lea    eax,[ebx+0x28]
c0004432:	e8 e5 db ff ff       	call   c000201c <mem_cpy>
c0004437:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000443a:	83 e0 7f             	and    eax,0x7f
c000443d:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004440:	c1 e6 09             	shl    esi,0x9
c0004443:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004447:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000444b:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000444f:	01 30                	add    DWORD PTR [eax],esi
c0004451:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0004454:	39 73 0c             	cmp    DWORD PTR [ebx+0xc],esi
c0004457:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000445a:	0f 43 73 0c          	cmovae esi,DWORD PTR [ebx+0xc]
c000445e:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0004461:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0004466:	0f 85 13 ff ff ff    	jne    c000437f <f_write+0x5a>
c000446c:	eb 1d                	jmp    c000448b <f_write+0x166>
c000446e:	85 c0                	test   eax,eax
c0004470:	75 0b                	jne    c000447d <f_write+0x158>
c0004472:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004475:	31 d2                	xor    edx,edx
c0004477:	85 c0                	test   eax,eax
c0004479:	75 1e                	jne    c0004499 <f_write+0x174>
c000447b:	eb 03                	jmp    c0004480 <f_write+0x15b>
c000447d:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004480:	89 d8                	mov    eax,ebx
c0004482:	e8 78 f1 ff ff       	call   c00035ff <create_chain>
c0004487:	85 c0                	test   eax,eax
c0004489:	75 0e                	jne    c0004499 <f_write+0x174>
c000448b:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000448e:	83 c8 40             	or     eax,0x40
c0004491:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004494:	e9 c9 00 00 00       	jmp    c0004562 <f_write+0x23d>
c0004499:	83 f8 01             	cmp    eax,0x1
c000449c:	75 0e                	jne    c00044ac <f_write+0x187>
c000449e:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00044a2:	bf 02 00 00 00       	mov    edi,0x2
c00044a7:	e9 b6 00 00 00       	jmp    c0004562 <f_write+0x23d>
c00044ac:	83 f8 ff             	cmp    eax,0xffffffff
c00044af:	75 0e                	jne    c00044bf <f_write+0x19a>
c00044b1:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00044b5:	bf 01 00 00 00       	mov    edi,0x1
c00044ba:	e9 a3 00 00 00       	jmp    c0004562 <f_write+0x23d>
c00044bf:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00044c3:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00044c6:	0f 85 db fe ff ff    	jne    c00043a7 <f_write+0x82>
c00044cc:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00044cf:	e9 d3 fe ff ff       	jmp    c00043a7 <f_write+0x82>
c00044d4:	6a 01                	push   0x1
c00044d6:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00044d9:	8d 43 28             	lea    eax,[ebx+0x28]
c00044dc:	50                   	push   eax
c00044dd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00044e1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00044e5:	50                   	push   eax
c00044e6:	e8 d0 da ff ff       	call   c0001fbb <disk_write>
c00044eb:	83 c4 10             	add    esp,0x10
c00044ee:	85 c0                	test   eax,eax
c00044f0:	75 bf                	jne    c00044b1 <f_write+0x18c>
c00044f2:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00044f5:	83 e0 7f             	and    eax,0x7f
c00044f8:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00044fb:	e9 b1 fe ff ff       	jmp    c00043b1 <f_write+0x8c>
c0004500:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0004503:	74 20                	je     c0004525 <f_write+0x200>
c0004505:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004508:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c000450b:	76 18                	jbe    c0004525 <f_write+0x200>
c000450d:	6a 01                	push   0x1
c000450f:	55                   	push   ebp
c0004510:	8d 43 28             	lea    eax,[ebx+0x28]
c0004513:	50                   	push   eax
c0004514:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004518:	50                   	push   eax
c0004519:	e8 87 da ff ff       	call   c0001fa5 <disk_read>
c000451e:	83 c4 10             	add    esp,0x10
c0004521:	85 c0                	test   eax,eax
c0004523:	75 8c                	jne    c00044b1 <f_write+0x18c>
c0004525:	89 6b 1c             	mov    DWORD PTR [ebx+0x1c],ebp
c0004528:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000452b:	be 00 02 00 00       	mov    esi,0x200
c0004530:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0004534:	25 ff 01 00 00       	and    eax,0x1ff
c0004539:	29 c6                	sub    esi,eax
c000453b:	39 74 24 48          	cmp    DWORD PTR [esp+0x48],esi
c000453f:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c0004543:	0f 46 74 24 48       	cmovbe esi,DWORD PTR [esp+0x48]
c0004548:	89 f1                	mov    ecx,esi
c000454a:	e8 cd da ff ff       	call   c000201c <mem_cpy>
c000454f:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004552:	83 c8 80             	or     eax,0xffffff80
c0004555:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004558:	e9 e6 fe ff ff       	jmp    c0004443 <f_write+0x11e>
c000455d:	bf 07 00 00 00       	mov    edi,0x7
c0004562:	83 c4 2c             	add    esp,0x2c
c0004565:	89 f8                	mov    eax,edi
c0004567:	5b                   	pop    ebx
c0004568:	5e                   	pop    esi
c0004569:	5f                   	pop    edi
c000456a:	5d                   	pop    ebp
c000456b:	c3                   	ret    

c000456c <f_sync>:
c000456c:	56                   	push   esi
c000456d:	53                   	push   ebx
c000456e:	83 ec 14             	sub    esp,0x14
c0004571:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004575:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004579:	89 d8                	mov    eax,ebx
c000457b:	e8 2c df ff ff       	call   c00024ac <validate>
c0004580:	85 c0                	test   eax,eax
c0004582:	0f 85 a3 00 00 00    	jne    c000462b <f_sync+0xbf>
c0004588:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000458b:	f6 c2 40             	test   dl,0x40
c000458e:	0f 84 97 00 00 00    	je     c000462b <f_sync+0xbf>
c0004594:	80 e2 80             	and    dl,0x80
c0004597:	74 2e                	je     c00045c7 <f_sync+0x5b>
c0004599:	6a 01                	push   0x1
c000459b:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000459e:	8d 43 28             	lea    eax,[ebx+0x28]
c00045a1:	50                   	push   eax
c00045a2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00045a6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00045aa:	50                   	push   eax
c00045ab:	e8 0b da ff ff       	call   c0001fbb <disk_write>
c00045b0:	83 c4 10             	add    esp,0x10
c00045b3:	89 c2                	mov    edx,eax
c00045b5:	b8 01 00 00 00       	mov    eax,0x1
c00045ba:	85 d2                	test   edx,edx
c00045bc:	75 6d                	jne    c000462b <f_sync+0xbf>
c00045be:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00045c1:	83 e0 7f             	and    eax,0x7f
c00045c4:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00045c7:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00045ca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00045ce:	e8 82 df ff ff       	call   c0002555 <move_window>
c00045d3:	85 c0                	test   eax,eax
c00045d5:	75 54                	jne    c000462b <f_sync+0xbf>
c00045d7:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00045da:	8a 46 0b             	mov    al,BYTE PTR [esi+0xb]
c00045dd:	89 f2                	mov    edx,esi
c00045df:	83 c8 20             	or     eax,0x20
c00045e2:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c00045e5:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00045e8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00045ea:	e8 1b ee ff ff       	call   c000340a <st_clust.isra.1>
c00045ef:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00045f2:	8d 46 1c             	lea    eax,[esi+0x1c]
c00045f5:	e8 1f da ff ff       	call   c0002019 <st_dword>
c00045fa:	8d 46 16             	lea    eax,[esi+0x16]
c00045fd:	ba 00 00 21 50       	mov    edx,0x50210000
c0004602:	e8 12 da ff ff       	call   c0002019 <st_dword>
c0004607:	8d 46 12             	lea    eax,[esi+0x12]
c000460a:	31 d2                	xor    edx,edx
c000460c:	e8 04 da ff ff       	call   c0002015 <st_word>
c0004611:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004615:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004619:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000461d:	e8 68 e9 ff ff       	call   c0002f8a <sync_fs>
c0004622:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004625:	83 e2 bf             	and    edx,0xffffffbf
c0004628:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c000462b:	83 c4 14             	add    esp,0x14
c000462e:	5b                   	pop    ebx
c000462f:	5e                   	pop    esi
c0004630:	c3                   	ret    

c0004631 <f_close>:
c0004631:	53                   	push   ebx
c0004632:	83 ec 24             	sub    esp,0x24
c0004635:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0004639:	53                   	push   ebx
c000463a:	e8 2d ff ff ff       	call   c000456c <f_sync>
c000463f:	83 c4 10             	add    esp,0x10
c0004642:	85 c0                	test   eax,eax
c0004644:	75 15                	jne    c000465b <f_close+0x2a>
c0004646:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000464a:	89 d8                	mov    eax,ebx
c000464c:	e8 5b de ff ff       	call   c00024ac <validate>
c0004651:	85 c0                	test   eax,eax
c0004653:	75 06                	jne    c000465b <f_close+0x2a>
c0004655:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000465b:	83 c4 18             	add    esp,0x18
c000465e:	5b                   	pop    ebx
c000465f:	c3                   	ret    

c0004660 <f_lseek>:
c0004660:	55                   	push   ebp
c0004661:	57                   	push   edi
c0004662:	56                   	push   esi
c0004663:	53                   	push   ebx
c0004664:	83 ec 2c             	sub    esp,0x2c
c0004667:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000466b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000466f:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0004673:	89 d8                	mov    eax,ebx
c0004675:	e8 32 de ff ff       	call   c00024ac <validate>
c000467a:	85 c0                	test   eax,eax
c000467c:	89 c5                	mov    ebp,eax
c000467e:	0f 85 82 01 00 00    	jne    c0004806 <f_lseek+0x1a6>
c0004684:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004688:	85 ed                	test   ebp,ebp
c000468a:	0f 85 76 01 00 00    	jne    c0004806 <f_lseek+0x1a6>
c0004690:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004693:	39 f0                	cmp    eax,esi
c0004695:	73 07                	jae    c000469e <f_lseek+0x3e>
c0004697:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000469b:	0f 44 f0             	cmove  esi,eax
c000469e:	85 f6                	test   esi,esi
c00046a0:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00046a3:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00046aa:	75 07                	jne    c00046b3 <f_lseek+0x53>
c00046ac:	31 f6                	xor    esi,esi
c00046ae:	e9 e2 00 00 00       	jmp    c0004795 <f_lseek+0x135>
c00046b3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00046b7:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c00046bb:	c1 e7 09             	shl    edi,0x9
c00046be:	85 c9                	test   ecx,ecx
c00046c0:	74 28                	je     c00046ea <f_lseek+0x8a>
c00046c2:	31 d2                	xor    edx,edx
c00046c4:	49                   	dec    ecx
c00046c5:	8d 46 ff             	lea    eax,[esi-0x1]
c00046c8:	f7 f7                	div    edi
c00046ca:	31 d2                	xor    edx,edx
c00046cc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00046d0:	89 c8                	mov    eax,ecx
c00046d2:	f7 f7                	div    edi
c00046d4:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00046d8:	72 10                	jb     c00046ea <f_lseek+0x8a>
c00046da:	89 f8                	mov    eax,edi
c00046dc:	f7 d8                	neg    eax
c00046de:	21 c1                	and    ecx,eax
c00046e0:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00046e3:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c00046e6:	29 ce                	sub    esi,ecx
c00046e8:	eb 3c                	jmp    c0004726 <f_lseek+0xc6>
c00046ea:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00046ed:	85 c0                	test   eax,eax
c00046ef:	75 32                	jne    c0004723 <f_lseek+0xc3>
c00046f1:	31 d2                	xor    edx,edx
c00046f3:	89 d8                	mov    eax,ebx
c00046f5:	e8 05 ef ff ff       	call   c00035ff <create_chain>
c00046fa:	83 f8 01             	cmp    eax,0x1
c00046fd:	75 0e                	jne    c000470d <f_lseek+0xad>
c00046ff:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004703:	bd 02 00 00 00       	mov    ebp,0x2
c0004708:	e9 f9 00 00 00       	jmp    c0004806 <f_lseek+0x1a6>
c000470d:	83 f8 ff             	cmp    eax,0xffffffff
c0004710:	75 0e                	jne    c0004720 <f_lseek+0xc0>
c0004712:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004716:	bd 01 00 00 00       	mov    ebp,0x1
c000471b:	e9 e6 00 00 00       	jmp    c0004806 <f_lseek+0x1a6>
c0004720:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004723:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004726:	85 c0                	test   eax,eax
c0004728:	74 82                	je     c00046ac <f_lseek+0x4c>
c000472a:	39 fe                	cmp    esi,edi
c000472c:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000472f:	76 3d                	jbe    c000476e <f_lseek+0x10e>
c0004731:	01 fa                	add    edx,edi
c0004733:	29 fe                	sub    esi,edi
c0004735:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004739:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c000473c:	89 c2                	mov    edx,eax
c000473e:	74 0d                	je     c000474d <f_lseek+0xed>
c0004740:	89 d8                	mov    eax,ebx
c0004742:	e8 b8 ee ff ff       	call   c00035ff <create_chain>
c0004747:	85 c0                	test   eax,eax
c0004749:	75 09                	jne    c0004754 <f_lseek+0xf4>
c000474b:	eb 1f                	jmp    c000476c <f_lseek+0x10c>
c000474d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000474f:	e8 de ec ff ff       	call   c0003432 <get_fat.isra.2>
c0004754:	83 f8 ff             	cmp    eax,0xffffffff
c0004757:	74 b9                	je     c0004712 <f_lseek+0xb2>
c0004759:	83 f8 01             	cmp    eax,0x1
c000475c:	76 a1                	jbe    c00046ff <f_lseek+0x9f>
c000475e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004762:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c0004765:	76 98                	jbe    c00046ff <f_lseek+0x9f>
c0004767:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000476a:	eb be                	jmp    c000472a <f_lseek+0xca>
c000476c:	31 f6                	xor    esi,esi
c000476e:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004771:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004777:	0f 84 2f ff ff ff    	je     c00046ac <f_lseek+0x4c>
c000477d:	89 c2                	mov    edx,eax
c000477f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004783:	e8 be da ff ff       	call   c0002246 <clst2sect>
c0004788:	85 c0                	test   eax,eax
c000478a:	0f 84 6f ff ff ff    	je     c00046ff <f_lseek+0x9f>
c0004790:	c1 ee 09             	shr    esi,0x9
c0004793:	01 c6                	add    esi,eax
c0004795:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004798:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000479b:	76 0c                	jbe    c00047a9 <f_lseek+0x149>
c000479d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00047a0:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00047a3:	83 ca 40             	or     edx,0x40
c00047a6:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00047a9:	a9 ff 01 00 00       	test   eax,0x1ff
c00047ae:	74 56                	je     c0004806 <f_lseek+0x1a6>
c00047b0:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00047b3:	39 f0                	cmp    eax,esi
c00047b5:	74 4f                	je     c0004806 <f_lseek+0x1a6>
c00047b7:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00047bb:	8d 7b 28             	lea    edi,[ebx+0x28]
c00047be:	74 26                	je     c00047e6 <f_lseek+0x186>
c00047c0:	6a 01                	push   0x1
c00047c2:	50                   	push   eax
c00047c3:	57                   	push   edi
c00047c4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00047c8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00047cc:	50                   	push   eax
c00047cd:	e8 e9 d7 ff ff       	call   c0001fbb <disk_write>
c00047d2:	83 c4 10             	add    esp,0x10
c00047d5:	85 c0                	test   eax,eax
c00047d7:	0f 85 35 ff ff ff    	jne    c0004712 <f_lseek+0xb2>
c00047dd:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00047e0:	83 e0 7f             	and    eax,0x7f
c00047e3:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00047e6:	6a 01                	push   0x1
c00047e8:	56                   	push   esi
c00047e9:	57                   	push   edi
c00047ea:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00047ee:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00047f2:	50                   	push   eax
c00047f3:	e8 ad d7 ff ff       	call   c0001fa5 <disk_read>
c00047f8:	83 c4 10             	add    esp,0x10
c00047fb:	85 c0                	test   eax,eax
c00047fd:	0f 85 0f ff ff ff    	jne    c0004712 <f_lseek+0xb2>
c0004803:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0004806:	83 c4 2c             	add    esp,0x2c
c0004809:	89 e8                	mov    eax,ebp
c000480b:	5b                   	pop    ebx
c000480c:	5e                   	pop    esi
c000480d:	5f                   	pop    edi
c000480e:	5d                   	pop    ebp
c000480f:	c3                   	ret    

c0004810 <f_opendir>:
c0004810:	56                   	push   esi
c0004811:	b8 09 00 00 00       	mov    eax,0x9
c0004816:	53                   	push   ebx
c0004817:	83 ec 24             	sub    esp,0x24
c000481a:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000481e:	85 db                	test   ebx,ebx
c0004820:	0f 84 af 00 00 00    	je     c00048d5 <f_opendir+0xc5>
c0004826:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000482a:	31 c9                	xor    ecx,ecx
c000482c:	8d 44 24 34          	lea    eax,[esp+0x34]
c0004830:	e8 7d de ff ff       	call   c00026b2 <mount_volume>
c0004835:	85 c0                	test   eax,eax
c0004837:	0f 85 92 00 00 00    	jne    c00048cf <f_opendir+0xbf>
c000483d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004841:	83 ec 0c             	sub    esp,0xc
c0004844:	89 03                	mov    DWORD PTR [ebx],eax
c0004846:	68 00 02 00 00       	push   0x200
c000484b:	e8 e4 15 00 00       	call   c0005e34 <ff_memalloc>
c0004850:	83 c4 10             	add    esp,0x10
c0004853:	89 c6                	mov    esi,eax
c0004855:	b8 11 00 00 00       	mov    eax,0x11
c000485a:	85 f6                	test   esi,esi
c000485c:	74 77                	je     c00048d5 <f_opendir+0xc5>
c000485e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004862:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0004866:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004869:	89 d8                	mov    eax,ebx
c000486b:	e8 8a f3 ff ff       	call   c0003bfa <follow_path>
c0004870:	85 c0                	test   eax,eax
c0004872:	75 37                	jne    c00048ab <f_opendir+0x9b>
c0004874:	f6 43 2b 80          	test   BYTE PTR [ebx+0x2b],0x80
c0004878:	75 1c                	jne    c0004896 <f_opendir+0x86>
c000487a:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c000487e:	b8 05 00 00 00       	mov    eax,0x5
c0004883:	74 26                	je     c00048ab <f_opendir+0x9b>
c0004885:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004889:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000488c:	8a 00                	mov    al,BYTE PTR [eax]
c000488e:	e8 4e eb ff ff       	call   c00033e1 <ld_clust.isra.0>
c0004893:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004896:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000489a:	31 d2                	xor    edx,edx
c000489c:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c00048a0:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00048a4:	89 d8                	mov    eax,ebx
c00048a6:	e8 8c ec ff ff       	call   c0003537 <dir_sdi>
c00048ab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00048af:	83 ec 0c             	sub    esp,0xc
c00048b2:	56                   	push   esi
c00048b3:	e8 94 15 00 00       	call   c0005e4c <ff_memfree>
c00048b8:	83 c4 10             	add    esp,0x10
c00048bb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00048bf:	83 f8 04             	cmp    eax,0x4
c00048c2:	74 06                	je     c00048ca <f_opendir+0xba>
c00048c4:	85 c0                	test   eax,eax
c00048c6:	74 0d                	je     c00048d5 <f_opendir+0xc5>
c00048c8:	eb 05                	jmp    c00048cf <f_opendir+0xbf>
c00048ca:	b8 05 00 00 00       	mov    eax,0x5
c00048cf:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00048d5:	83 c4 24             	add    esp,0x24
c00048d8:	5b                   	pop    ebx
c00048d9:	5e                   	pop    esi
c00048da:	c3                   	ret    

c00048db <f_closedir>:
c00048db:	53                   	push   ebx
c00048dc:	83 ec 18             	sub    esp,0x18
c00048df:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00048e3:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00048e7:	89 d8                	mov    eax,ebx
c00048e9:	e8 be db ff ff       	call   c00024ac <validate>
c00048ee:	85 c0                	test   eax,eax
c00048f0:	75 06                	jne    c00048f8 <f_closedir+0x1d>
c00048f2:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00048f8:	83 c4 18             	add    esp,0x18
c00048fb:	5b                   	pop    ebx
c00048fc:	c3                   	ret    

c00048fd <f_readdir>:
c00048fd:	57                   	push   edi
c00048fe:	56                   	push   esi
c00048ff:	53                   	push   ebx
c0004900:	83 ec 20             	sub    esp,0x20
c0004903:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004907:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000490b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000490f:	89 d8                	mov    eax,ebx
c0004911:	e8 96 db ff ff       	call   c00024ac <validate>
c0004916:	85 c0                	test   eax,eax
c0004918:	75 6e                	jne    c0004988 <f_readdir+0x8b>
c000491a:	85 ff                	test   edi,edi
c000491c:	75 0b                	jne    c0004929 <f_readdir+0x2c>
c000491e:	31 d2                	xor    edx,edx
c0004920:	89 d8                	mov    eax,ebx
c0004922:	e8 10 ec ff ff       	call   c0003537 <dir_sdi>
c0004927:	eb 5f                	jmp    c0004988 <f_readdir+0x8b>
c0004929:	83 ec 0c             	sub    esp,0xc
c000492c:	68 00 02 00 00       	push   0x200
c0004931:	e8 fe 14 00 00       	call   c0005e34 <ff_memalloc>
c0004936:	83 c4 10             	add    esp,0x10
c0004939:	89 c6                	mov    esi,eax
c000493b:	b8 11 00 00 00       	mov    eax,0x11
c0004940:	85 f6                	test   esi,esi
c0004942:	74 44                	je     c0004988 <f_readdir+0x8b>
c0004944:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004948:	31 d2                	xor    edx,edx
c000494a:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000494d:	89 d8                	mov    eax,ebx
c000494f:	e8 dd ef ff ff       	call   c0003931 <dir_read>
c0004954:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0004959:	75 19                	jne    c0004974 <f_readdir+0x77>
c000495b:	89 fa                	mov    edx,edi
c000495d:	89 d8                	mov    eax,ebx
c000495f:	e8 7c e8 ff ff       	call   c00031e0 <get_fileinfo>
c0004964:	31 d2                	xor    edx,edx
c0004966:	89 d8                	mov    eax,ebx
c0004968:	e8 5a ee ff ff       	call   c00037c7 <dir_next>
c000496d:	83 f8 04             	cmp    eax,0x4
c0004970:	75 02                	jne    c0004974 <f_readdir+0x77>
c0004972:	31 c0                	xor    eax,eax
c0004974:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004978:	83 ec 0c             	sub    esp,0xc
c000497b:	56                   	push   esi
c000497c:	e8 cb 14 00 00       	call   c0005e4c <ff_memfree>
c0004981:	83 c4 10             	add    esp,0x10
c0004984:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004988:	83 c4 20             	add    esp,0x20
c000498b:	5b                   	pop    ebx
c000498c:	5e                   	pop    esi
c000498d:	5f                   	pop    edi
c000498e:	c3                   	ret    

c000498f <f_stat>:
c000498f:	57                   	push   edi
c0004990:	31 c9                	xor    ecx,ecx
c0004992:	56                   	push   esi
c0004993:	53                   	push   ebx
c0004994:	83 ec 30             	sub    esp,0x30
c0004997:	8d 44 24 40          	lea    eax,[esp+0x40]
c000499b:	89 e2                	mov    edx,esp
c000499d:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00049a1:	e8 0c dd ff ff       	call   c00026b2 <mount_volume>
c00049a6:	85 c0                	test   eax,eax
c00049a8:	89 c3                	mov    ebx,eax
c00049aa:	75 59                	jne    c0004a05 <f_stat+0x76>
c00049ac:	83 ec 0c             	sub    esp,0xc
c00049af:	bb 11 00 00 00       	mov    ebx,0x11
c00049b4:	68 00 02 00 00       	push   0x200
c00049b9:	e8 76 14 00 00       	call   c0005e34 <ff_memalloc>
c00049be:	83 c4 10             	add    esp,0x10
c00049c1:	85 c0                	test   eax,eax
c00049c3:	89 c6                	mov    esi,eax
c00049c5:	74 3e                	je     c0004a05 <f_stat+0x76>
c00049c7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00049ca:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00049ce:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00049d1:	89 e0                	mov    eax,esp
c00049d3:	e8 22 f2 ff ff       	call   c0003bfa <follow_path>
c00049d8:	85 c0                	test   eax,eax
c00049da:	89 c3                	mov    ebx,eax
c00049dc:	75 1b                	jne    c00049f9 <f_stat+0x6a>
c00049de:	f6 44 24 2b 80       	test   BYTE PTR [esp+0x2b],0x80
c00049e3:	75 0f                	jne    c00049f4 <f_stat+0x65>
c00049e5:	85 ff                	test   edi,edi
c00049e7:	74 10                	je     c00049f9 <f_stat+0x6a>
c00049e9:	89 fa                	mov    edx,edi
c00049eb:	89 e0                	mov    eax,esp
c00049ed:	e8 ee e7 ff ff       	call   c00031e0 <get_fileinfo>
c00049f2:	eb 05                	jmp    c00049f9 <f_stat+0x6a>
c00049f4:	bb 06 00 00 00       	mov    ebx,0x6
c00049f9:	83 ec 0c             	sub    esp,0xc
c00049fc:	56                   	push   esi
c00049fd:	e8 4a 14 00 00       	call   c0005e4c <ff_memfree>
c0004a02:	83 c4 10             	add    esp,0x10
c0004a05:	83 c4 30             	add    esp,0x30
c0004a08:	89 d8                	mov    eax,ebx
c0004a0a:	5b                   	pop    ebx
c0004a0b:	5e                   	pop    esi
c0004a0c:	5f                   	pop    edi
c0004a0d:	c3                   	ret    

c0004a0e <f_getfree>:
c0004a0e:	55                   	push   ebp
c0004a0f:	31 c9                	xor    ecx,ecx
c0004a11:	57                   	push   edi
c0004a12:	56                   	push   esi
c0004a13:	53                   	push   ebx
c0004a14:	83 ec 2c             	sub    esp,0x2c
c0004a17:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004a1b:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004a1f:	e8 8e dc ff ff       	call   c00026b2 <mount_volume>
c0004a24:	85 c0                	test   eax,eax
c0004a26:	89 c6                	mov    esi,eax
c0004a28:	0f 85 df 00 00 00    	jne    c0004b0d <f_getfree+0xff>
c0004a2e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0004a32:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004a36:	89 18                	mov    DWORD PTR [eax],ebx
c0004a38:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c0004a3b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004a3e:	8d 57 fe             	lea    edx,[edi-0x2]
c0004a41:	39 d0                	cmp    eax,edx
c0004a43:	77 0b                	ja     c0004a50 <f_getfree+0x42>
c0004a45:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0004a49:	89 01                	mov    DWORD PTR [ecx],eax
c0004a4b:	e9 bd 00 00 00       	jmp    c0004b0d <f_getfree+0xff>
c0004a50:	80 3b 01             	cmp    BYTE PTR [ebx],0x1
c0004a53:	75 29                	jne    c0004a7e <f_getfree+0x70>
c0004a55:	bf 02 00 00 00       	mov    edi,0x2
c0004a5a:	31 ed                	xor    ebp,ebp
c0004a5c:	89 fa                	mov    edx,edi
c0004a5e:	89 d8                	mov    eax,ebx
c0004a60:	e8 cd e9 ff ff       	call   c0003432 <get_fat.isra.2>
c0004a65:	83 f8 ff             	cmp    eax,0xffffffff
c0004a68:	74 7d                	je     c0004ae7 <f_getfree+0xd9>
c0004a6a:	83 f8 01             	cmp    eax,0x1
c0004a6d:	74 7f                	je     c0004aee <f_getfree+0xe0>
c0004a6f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a73:	83 d5 00             	adc    ebp,0x0
c0004a76:	47                   	inc    edi
c0004a77:	39 78 18             	cmp    DWORD PTR [eax+0x18],edi
c0004a7a:	77 e0                	ja     c0004a5c <f_getfree+0x4e>
c0004a7c:	eb 79                	jmp    c0004af7 <f_getfree+0xe9>
c0004a7e:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0004a81:	31 ed                	xor    ebp,ebp
c0004a83:	31 db                	xor    ebx,ebx
c0004a85:	85 db                	test   ebx,ebx
c0004a87:	75 18                	jne    c0004aa1 <f_getfree+0x93>
c0004a89:	8d 42 01             	lea    eax,[edx+0x1]
c0004a8c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004a90:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a94:	e8 bc da ff ff       	call   c0002555 <move_window>
c0004a99:	85 c0                	test   eax,eax
c0004a9b:	75 58                	jne    c0004af5 <f_getfree+0xe7>
c0004a9d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004aa1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004aa5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004aa9:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c0004aac:	8d 44 19 34          	lea    eax,[ecx+ebx*1+0x34]
c0004ab0:	75 13                	jne    c0004ac5 <f_getfree+0xb7>
c0004ab2:	e8 39 d5 ff ff       	call   c0001ff0 <ld_word>
c0004ab7:	0f b7 c0             	movzx  eax,ax
c0004aba:	83 f8 01             	cmp    eax,0x1
c0004abd:	83 d5 00             	adc    ebp,0x0
c0004ac0:	83 c3 02             	add    ebx,0x2
c0004ac3:	eb 13                	jmp    c0004ad8 <f_getfree+0xca>
c0004ac5:	e8 33 d5 ff ff       	call   c0001ffd <ld_dword>
c0004aca:	25 ff ff ff 0f       	and    eax,0xfffffff
c0004acf:	83 f8 01             	cmp    eax,0x1
c0004ad2:	83 d5 00             	adc    ebp,0x0
c0004ad5:	83 c3 04             	add    ebx,0x4
c0004ad8:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0004ade:	4f                   	dec    edi
c0004adf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004ae3:	75 a0                	jne    c0004a85 <f_getfree+0x77>
c0004ae5:	eb 10                	jmp    c0004af7 <f_getfree+0xe9>
c0004ae7:	be 01 00 00 00       	mov    esi,0x1
c0004aec:	eb 09                	jmp    c0004af7 <f_getfree+0xe9>
c0004aee:	be 02 00 00 00       	mov    esi,0x2
c0004af3:	eb 02                	jmp    c0004af7 <f_getfree+0xe9>
c0004af5:	89 c6                	mov    esi,eax
c0004af7:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0004afb:	89 28                	mov    DWORD PTR [eax],ebp
c0004afd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004b01:	89 68 14             	mov    DWORD PTR [eax+0x14],ebp
c0004b04:	8a 50 04             	mov    dl,BYTE PTR [eax+0x4]
c0004b07:	83 ca 01             	or     edx,0x1
c0004b0a:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c0004b0d:	83 c4 2c             	add    esp,0x2c
c0004b10:	89 f0                	mov    eax,esi
c0004b12:	5b                   	pop    ebx
c0004b13:	5e                   	pop    esi
c0004b14:	5f                   	pop    edi
c0004b15:	5d                   	pop    ebp
c0004b16:	c3                   	ret    

c0004b17 <f_truncate>:
c0004b17:	56                   	push   esi
c0004b18:	53                   	push   ebx
c0004b19:	83 ec 14             	sub    esp,0x14
c0004b1c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004b20:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004b24:	89 d8                	mov    eax,ebx
c0004b26:	e8 81 d9 ff ff       	call   c00024ac <validate>
c0004b2b:	85 c0                	test   eax,eax
c0004b2d:	89 c6                	mov    esi,eax
c0004b2f:	0f 85 c4 00 00 00    	jne    c0004bf9 <f_truncate+0xe2>
c0004b35:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0004b39:	85 f6                	test   esi,esi
c0004b3b:	0f 85 b8 00 00 00    	jne    c0004bf9 <f_truncate+0xe2>
c0004b41:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004b45:	0f 84 a9 00 00 00    	je     c0004bf4 <f_truncate+0xdd>
c0004b4b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004b4e:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004b51:	0f 83 a2 00 00 00    	jae    c0004bf9 <f_truncate+0xe2>
c0004b57:	85 c0                	test   eax,eax
c0004b59:	75 15                	jne    c0004b70 <f_truncate+0x59>
c0004b5b:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004b5e:	31 c9                	xor    ecx,ecx
c0004b60:	89 d8                	mov    eax,ebx
c0004b62:	e8 d2 eb ff ff       	call   c0003739 <remove_chain>
c0004b67:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004b6e:	eb 35                	jmp    c0004ba5 <f_truncate+0x8e>
c0004b70:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004b73:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004b75:	e8 b8 e8 ff ff       	call   c0003432 <get_fat.isra.2>
c0004b7a:	89 c2                	mov    edx,eax
c0004b7c:	b8 01 00 00 00       	mov    eax,0x1
c0004b81:	83 fa ff             	cmp    edx,0xffffffff
c0004b84:	74 1f                	je     c0004ba5 <f_truncate+0x8e>
c0004b86:	83 fa 01             	cmp    edx,0x1
c0004b89:	b8 02 00 00 00       	mov    eax,0x2
c0004b8e:	74 15                	je     c0004ba5 <f_truncate+0x8e>
c0004b90:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004b94:	31 c0                	xor    eax,eax
c0004b96:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004b99:	76 0a                	jbe    c0004ba5 <f_truncate+0x8e>
c0004b9b:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c0004b9e:	89 d8                	mov    eax,ebx
c0004ba0:	e8 94 eb ff ff       	call   c0003739 <remove_chain>
c0004ba5:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004ba8:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004bab:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004bae:	83 ca 40             	or     edx,0x40
c0004bb1:	85 c0                	test   eax,eax
c0004bb3:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004bb6:	75 35                	jne    c0004bed <f_truncate+0xd6>
c0004bb8:	80 e2 80             	and    dl,0x80
c0004bbb:	74 3c                	je     c0004bf9 <f_truncate+0xe2>
c0004bbd:	6a 01                	push   0x1
c0004bbf:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004bc2:	8d 43 28             	lea    eax,[ebx+0x28]
c0004bc5:	50                   	push   eax
c0004bc6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004bca:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004bce:	50                   	push   eax
c0004bcf:	e8 e7 d3 ff ff       	call   c0001fbb <disk_write>
c0004bd4:	83 c4 10             	add    esp,0x10
c0004bd7:	85 c0                	test   eax,eax
c0004bd9:	75 0d                	jne    c0004be8 <f_truncate+0xd1>
c0004bdb:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004bde:	31 f6                	xor    esi,esi
c0004be0:	83 e0 7f             	and    eax,0x7f
c0004be3:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004be6:	eb 11                	jmp    c0004bf9 <f_truncate+0xe2>
c0004be8:	b8 01 00 00 00       	mov    eax,0x1
c0004bed:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c0004bf0:	89 c6                	mov    esi,eax
c0004bf2:	eb 05                	jmp    c0004bf9 <f_truncate+0xe2>
c0004bf4:	be 07 00 00 00       	mov    esi,0x7
c0004bf9:	83 c4 14             	add    esp,0x14
c0004bfc:	89 f0                	mov    eax,esi
c0004bfe:	5b                   	pop    ebx
c0004bff:	5e                   	pop    esi
c0004c00:	c3                   	ret    

c0004c01 <f_unlink>:
c0004c01:	55                   	push   ebp
c0004c02:	b9 02 00 00 00       	mov    ecx,0x2
c0004c07:	57                   	push   edi
c0004c08:	56                   	push   esi
c0004c09:	53                   	push   ebx
c0004c0a:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004c10:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004c14:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c0004c1b:	e8 92 da ff ff       	call   c00026b2 <mount_volume>
c0004c20:	85 c0                	test   eax,eax
c0004c22:	0f 85 ee 00 00 00    	jne    c0004d16 <f_unlink+0x115>
c0004c28:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c2c:	83 ec 0c             	sub    esp,0xc
c0004c2f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004c33:	68 00 02 00 00       	push   0x200
c0004c38:	e8 f7 11 00 00       	call   c0005e34 <ff_memalloc>
c0004c3d:	83 c4 10             	add    esp,0x10
c0004c40:	89 c3                	mov    ebx,eax
c0004c42:	b8 11 00 00 00       	mov    eax,0x11
c0004c47:	85 db                	test   ebx,ebx
c0004c49:	0f 84 c7 00 00 00    	je     c0004d16 <f_unlink+0x115>
c0004c4f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c53:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004c5a:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004c5d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c61:	e8 94 ef ff ff       	call   c0003bfa <follow_path>
c0004c66:	85 c0                	test   eax,eax
c0004c68:	0f 85 94 00 00 00    	jne    c0004d02 <f_unlink+0x101>
c0004c6e:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0004c73:	b8 06 00 00 00       	mov    eax,0x6
c0004c78:	0f 85 84 00 00 00    	jne    c0004d02 <f_unlink+0x101>
c0004c7e:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c0004c83:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004c89:	74 07                	je     c0004c92 <f_unlink+0x91>
c0004c8b:	b8 07 00 00 00       	mov    eax,0x7
c0004c90:	eb 70                	jmp    c0004d02 <f_unlink+0x101>
c0004c92:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004c96:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004c9a:	8a 07                	mov    al,BYTE PTR [edi]
c0004c9c:	e8 40 e7 ff ff       	call   c00033e1 <ld_clust.isra.0>
c0004ca1:	83 e5 10             	and    ebp,0x10
c0004ca4:	89 c6                	mov    esi,eax
c0004ca6:	75 20                	jne    c0004cc8 <f_unlink+0xc7>
c0004ca8:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004cac:	e8 a8 ed ff ff       	call   c0003a59 <dir_remove>
c0004cb1:	85 c0                	test   eax,eax
c0004cb3:	75 40                	jne    c0004cf5 <f_unlink+0xf4>
c0004cb5:	85 f6                	test   esi,esi
c0004cb7:	74 3c                	je     c0004cf5 <f_unlink+0xf4>
c0004cb9:	31 c9                	xor    ecx,ecx
c0004cbb:	89 f2                	mov    edx,esi
c0004cbd:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004cc1:	e8 73 ea ff ff       	call   c0003739 <remove_chain>
c0004cc6:	eb 2d                	jmp    c0004cf5 <f_unlink+0xf4>
c0004cc8:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004ccc:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004cd0:	31 d2                	xor    edx,edx
c0004cd2:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0004cd6:	e8 5c e8 ff ff       	call   c0003537 <dir_sdi>
c0004cdb:	85 c0                	test   eax,eax
c0004cdd:	75 23                	jne    c0004d02 <f_unlink+0x101>
c0004cdf:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004ce3:	31 d2                	xor    edx,edx
c0004ce5:	e8 47 ec ff ff       	call   c0003931 <dir_read>
c0004cea:	85 c0                	test   eax,eax
c0004cec:	74 9d                	je     c0004c8b <f_unlink+0x8a>
c0004cee:	83 f8 04             	cmp    eax,0x4
c0004cf1:	75 0f                	jne    c0004d02 <f_unlink+0x101>
c0004cf3:	eb b3                	jmp    c0004ca8 <f_unlink+0xa7>
c0004cf5:	85 c0                	test   eax,eax
c0004cf7:	75 09                	jne    c0004d02 <f_unlink+0x101>
c0004cf9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004cfd:	e8 88 e2 ff ff       	call   c0002f8a <sync_fs>
c0004d02:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004d06:	83 ec 0c             	sub    esp,0xc
c0004d09:	53                   	push   ebx
c0004d0a:	e8 3d 11 00 00       	call   c0005e4c <ff_memfree>
c0004d0f:	83 c4 10             	add    esp,0x10
c0004d12:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d16:	81 c4 8c 00 00 00    	add    esp,0x8c
c0004d1c:	5b                   	pop    ebx
c0004d1d:	5e                   	pop    esi
c0004d1e:	5f                   	pop    edi
c0004d1f:	5d                   	pop    ebp
c0004d20:	c3                   	ret    

c0004d21 <f_mkdir>:
c0004d21:	57                   	push   edi
c0004d22:	b9 02 00 00 00       	mov    ecx,0x2
c0004d27:	56                   	push   esi
c0004d28:	53                   	push   ebx
c0004d29:	83 ec 50             	sub    esp,0x50
c0004d2c:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004d30:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004d34:	e8 79 d9 ff ff       	call   c00026b2 <mount_volume>
c0004d39:	85 c0                	test   eax,eax
c0004d3b:	89 c3                	mov    ebx,eax
c0004d3d:	0f 85 70 01 00 00    	jne    c0004eb3 <f_mkdir+0x192>
c0004d43:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d47:	83 ec 0c             	sub    esp,0xc
c0004d4a:	bb 11 00 00 00       	mov    ebx,0x11
c0004d4f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004d53:	68 00 02 00 00       	push   0x200
c0004d58:	e8 d7 10 00 00       	call   c0005e34 <ff_memalloc>
c0004d5d:	83 c4 10             	add    esp,0x10
c0004d60:	85 c0                	test   eax,eax
c0004d62:	89 c7                	mov    edi,eax
c0004d64:	0f 84 49 01 00 00    	je     c0004eb3 <f_mkdir+0x192>
c0004d6a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d6e:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004d72:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004d75:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d79:	e8 7c ee ff ff       	call   c0003bfa <follow_path>
c0004d7e:	85 c0                	test   eax,eax
c0004d80:	89 c3                	mov    ebx,eax
c0004d82:	74 3e                	je     c0004dc2 <f_mkdir+0xa1>
c0004d84:	83 f8 04             	cmp    eax,0x4
c0004d87:	75 3e                	jne    c0004dc7 <f_mkdir+0xa6>
c0004d89:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d8d:	31 d2                	xor    edx,edx
c0004d8f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004d93:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004d97:	e8 63 e8 ff ff       	call   c00035ff <create_chain>
c0004d9c:	85 c0                	test   eax,eax
c0004d9e:	89 c6                	mov    esi,eax
c0004da0:	74 0c                	je     c0004dae <f_mkdir+0x8d>
c0004da2:	83 f8 01             	cmp    eax,0x1
c0004da5:	bb 02 00 00 00       	mov    ebx,0x2
c0004daa:	74 07                	je     c0004db3 <f_mkdir+0x92>
c0004dac:	eb 2a                	jmp    c0004dd8 <f_mkdir+0xb7>
c0004dae:	bb 07 00 00 00       	mov    ebx,0x7
c0004db3:	31 c9                	xor    ecx,ecx
c0004db5:	89 f2                	mov    edx,esi
c0004db7:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004dbb:	e8 79 e9 ff ff       	call   c0003739 <remove_chain>
c0004dc0:	eb 05                	jmp    c0004dc7 <f_mkdir+0xa6>
c0004dc2:	bb 08 00 00 00       	mov    ebx,0x8
c0004dc7:	83 ec 0c             	sub    esp,0xc
c0004dca:	57                   	push   edi
c0004dcb:	e8 7c 10 00 00       	call   c0005e4c <ff_memfree>
c0004dd0:	83 c4 10             	add    esp,0x10
c0004dd3:	e9 db 00 00 00       	jmp    c0004eb3 <f_mkdir+0x192>
c0004dd8:	83 f8 ff             	cmp    eax,0xffffffff
c0004ddb:	bb 01 00 00 00       	mov    ebx,0x1
c0004de0:	74 d1                	je     c0004db3 <f_mkdir+0x92>
c0004de2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004de6:	89 f2                	mov    edx,esi
c0004de8:	e8 19 dd ff ff       	call   c0002b06 <dir_clear>
c0004ded:	85 c0                	test   eax,eax
c0004def:	89 c3                	mov    ebx,eax
c0004df1:	75 c0                	jne    c0004db3 <f_mkdir+0x92>
c0004df3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004df7:	b9 0b 00 00 00       	mov    ecx,0xb
c0004dfc:	ba 20 00 00 00       	mov    edx,0x20
c0004e01:	83 c0 34             	add    eax,0x34
c0004e04:	e8 28 d2 ff ff       	call   c0002031 <mem_set>
c0004e09:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e0d:	ba 00 00 21 50       	mov    edx,0x50210000
c0004e12:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004e16:	83 c0 4a             	add    eax,0x4a
c0004e19:	c6 40 f5 10          	mov    BYTE PTR [eax-0xb],0x10
c0004e1d:	e8 f7 d1 ff ff       	call   c0002019 <st_dword>
c0004e22:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e26:	89 f1                	mov    ecx,esi
c0004e28:	8d 50 34             	lea    edx,[eax+0x34]
c0004e2b:	e8 da e5 ff ff       	call   c000340a <st_clust.isra.1>
c0004e30:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e34:	b9 20 00 00 00       	mov    ecx,0x20
c0004e39:	8d 50 34             	lea    edx,[eax+0x34]
c0004e3c:	83 c0 54             	add    eax,0x54
c0004e3f:	e8 d8 d1 ff ff       	call   c000201c <mem_cpy>
c0004e44:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e48:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004e4c:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004e50:	8d 50 54             	lea    edx,[eax+0x54]
c0004e53:	e8 b2 e5 ff ff       	call   c000340a <st_clust.isra.1>
c0004e58:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e5c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e60:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004e64:	e8 2e ee ff ff       	call   c0003c97 <dir_register>
c0004e69:	85 c0                	test   eax,eax
c0004e6b:	89 c3                	mov    ebx,eax
c0004e6d:	0f 85 40 ff ff ff    	jne    c0004db3 <f_mkdir+0x92>
c0004e73:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004e77:	ba 00 00 21 50       	mov    edx,0x50210000
c0004e7c:	83 c0 16             	add    eax,0x16
c0004e7f:	e8 95 d1 ff ff       	call   c0002019 <st_dword>
c0004e84:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004e88:	89 f1                	mov    ecx,esi
c0004e8a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e8e:	e8 77 e5 ff ff       	call   c000340a <st_clust.isra.1>
c0004e93:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004e97:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004e9b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e9f:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004ea3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ea7:	e8 de e0 ff ff       	call   c0002f8a <sync_fs>
c0004eac:	89 c3                	mov    ebx,eax
c0004eae:	e9 14 ff ff ff       	jmp    c0004dc7 <f_mkdir+0xa6>
c0004eb3:	83 c4 50             	add    esp,0x50
c0004eb6:	89 d8                	mov    eax,ebx
c0004eb8:	5b                   	pop    ebx
c0004eb9:	5e                   	pop    esi
c0004eba:	5f                   	pop    edi
c0004ebb:	c3                   	ret    

c0004ebc <f_rename>:
c0004ebc:	57                   	push   edi
c0004ebd:	56                   	push   esi
c0004ebe:	53                   	push   ebx
c0004ebf:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004ec5:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004ecc:	e8 8f d5 ff ff       	call   c0002460 <get_ldnumber>
c0004ed1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004ed5:	b9 02 00 00 00       	mov    ecx,0x2
c0004eda:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004ee1:	e8 cc d7 ff ff       	call   c00026b2 <mount_volume>
c0004ee6:	85 c0                	test   eax,eax
c0004ee8:	0f 85 7c 01 00 00    	jne    c000506a <f_rename+0x1ae>
c0004eee:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ef2:	83 ec 0c             	sub    esp,0xc
c0004ef5:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004ef9:	68 00 02 00 00       	push   0x200
c0004efe:	e8 31 0f 00 00       	call   c0005e34 <ff_memalloc>
c0004f03:	83 c4 10             	add    esp,0x10
c0004f06:	89 c6                	mov    esi,eax
c0004f08:	b8 11 00 00 00       	mov    eax,0x11
c0004f0d:	85 f6                	test   esi,esi
c0004f0f:	0f 84 55 01 00 00    	je     c000506a <f_rename+0x1ae>
c0004f15:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f19:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004f20:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004f23:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004f27:	e8 ce ec ff ff       	call   c0003bfa <follow_path>
c0004f2c:	85 c0                	test   eax,eax
c0004f2e:	0f 85 22 01 00 00    	jne    c0005056 <f_rename+0x19a>
c0004f34:	8a 54 24 6b          	mov    dl,BYTE PTR [esp+0x6b]
c0004f38:	b8 06 00 00 00       	mov    eax,0x6
c0004f3d:	80 e2 a0             	and    dl,0xa0
c0004f40:	0f 85 10 01 00 00    	jne    c0005056 <f_rename+0x19a>
c0004f46:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004f4a:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004f4e:	b9 20 00 00 00       	mov    ecx,0x20
c0004f53:	e8 c4 d0 ff ff       	call   c000201c <mem_cpy>
c0004f58:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004f5c:	b9 30 00 00 00       	mov    ecx,0x30
c0004f61:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004f65:	e8 b2 d0 ff ff       	call   c000201c <mem_cpy>
c0004f6a:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004f71:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004f75:	e8 80 ec ff ff       	call   c0003bfa <follow_path>
c0004f7a:	85 c0                	test   eax,eax
c0004f7c:	75 20                	jne    c0004f9e <f_rename+0xe2>
c0004f7e:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004f82:	b8 08 00 00 00       	mov    eax,0x8
c0004f87:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004f8b:	0f 85 c5 00 00 00    	jne    c0005056 <f_rename+0x19a>
c0004f91:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004f95:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004f9c:	eb 03                	jmp    c0004fa1 <f_rename+0xe5>
c0004f9e:	83 f8 04             	cmp    eax,0x4
c0004fa1:	0f 85 af 00 00 00    	jne    c0005056 <f_rename+0x19a>
c0004fa7:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004fab:	e8 e7 ec ff ff       	call   c0003c97 <dir_register>
c0004fb0:	85 c0                	test   eax,eax
c0004fb2:	0f 85 9e 00 00 00    	jne    c0005056 <f_rename+0x19a>
c0004fb8:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004fbf:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004fc3:	b9 13 00 00 00       	mov    ecx,0x13
c0004fc8:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004fcb:	e8 4c d0 ff ff       	call   c000201c <mem_cpy>
c0004fd0:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004fd4:	a8 10                	test   al,0x10
c0004fd6:	75 03                	jne    c0004fdb <f_rename+0x11f>
c0004fd8:	83 c8 20             	or     eax,0x20
c0004fdb:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004fde:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fe2:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004fe6:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004fea:	74 54                	je     c0005040 <f_rename+0x184>
c0004fec:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004ff0:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004ff4:	74 4a                	je     c0005040 <f_rename+0x184>
c0004ff6:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004ffa:	89 da                	mov    edx,ebx
c0004ffc:	8a 07                	mov    al,BYTE PTR [edi]
c0004ffe:	e8 de e3 ff ff       	call   c00033e1 <ld_clust.isra.0>
c0005003:	89 c2                	mov    edx,eax
c0005005:	89 f8                	mov    eax,edi
c0005007:	e8 3a d2 ff ff       	call   c0002246 <clst2sect>
c000500c:	89 c2                	mov    edx,eax
c000500e:	b8 02 00 00 00       	mov    eax,0x2
c0005013:	85 d2                	test   edx,edx
c0005015:	74 3f                	je     c0005056 <f_rename+0x19a>
c0005017:	89 f8                	mov    eax,edi
c0005019:	e8 37 d5 ff ff       	call   c0002555 <move_window>
c000501e:	85 c0                	test   eax,eax
c0005020:	75 34                	jne    c0005056 <f_rename+0x19a>
c0005022:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005026:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c000502a:	75 14                	jne    c0005040 <f_rename+0x184>
c000502c:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0005030:	8d 50 54             	lea    edx,[eax+0x54]
c0005033:	e8 d2 e3 ff ff       	call   c000340a <st_clust.isra.1>
c0005038:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000503c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005040:	8d 44 24 40          	lea    eax,[esp+0x40]
c0005044:	e8 10 ea ff ff       	call   c0003a59 <dir_remove>
c0005049:	85 c0                	test   eax,eax
c000504b:	75 09                	jne    c0005056 <f_rename+0x19a>
c000504d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005051:	e8 34 df ff ff       	call   c0002f8a <sync_fs>
c0005056:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000505a:	83 ec 0c             	sub    esp,0xc
c000505d:	56                   	push   esi
c000505e:	e8 e9 0d 00 00       	call   c0005e4c <ff_memfree>
c0005063:	83 c4 10             	add    esp,0x10
c0005066:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000506a:	81 c4 a0 00 00 00    	add    esp,0xa0
c0005070:	5b                   	pop    ebx
c0005071:	5e                   	pop    esi
c0005072:	5f                   	pop    edi
c0005073:	c3                   	ret    

c0005074 <f_chmod>:
c0005074:	57                   	push   edi
c0005075:	b9 02 00 00 00       	mov    ecx,0x2
c000507a:	56                   	push   esi
c000507b:	53                   	push   ebx
c000507c:	83 ec 50             	sub    esp,0x50
c000507f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005083:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0005087:	8d 44 24 60          	lea    eax,[esp+0x60]
c000508b:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c000508f:	e8 1e d6 ff ff       	call   c00026b2 <mount_volume>
c0005094:	85 c0                	test   eax,eax
c0005096:	0f 85 81 00 00 00    	jne    c000511d <f_chmod+0xa9>
c000509c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050a0:	83 ec 0c             	sub    esp,0xc
c00050a3:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00050a7:	68 00 02 00 00       	push   0x200
c00050ac:	e8 83 0d 00 00       	call   c0005e34 <ff_memalloc>
c00050b1:	83 c4 10             	add    esp,0x10
c00050b4:	89 c6                	mov    esi,eax
c00050b6:	b8 11 00 00 00       	mov    eax,0x11
c00050bb:	85 f6                	test   esi,esi
c00050bd:	74 5e                	je     c000511d <f_chmod+0xa9>
c00050bf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050c3:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00050c7:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00050ca:	8d 44 24 20          	lea    eax,[esp+0x20]
c00050ce:	e8 27 eb ff ff       	call   c0003bfa <follow_path>
c00050d3:	85 c0                	test   eax,eax
c00050d5:	75 32                	jne    c0005109 <f_chmod+0x95>
c00050d7:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c00050db:	b8 06 00 00 00       	mov    eax,0x6
c00050e0:	80 e2 a0             	and    dl,0xa0
c00050e3:	75 24                	jne    c0005109 <f_chmod+0x95>
c00050e5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050e9:	8a 50 0b             	mov    dl,BYTE PTR [eax+0xb]
c00050ec:	31 d7                	xor    edi,edx
c00050ee:	21 fb                	and    ebx,edi
c00050f0:	83 e3 27             	and    ebx,0x27
c00050f3:	31 d3                	xor    ebx,edx
c00050f5:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c00050f8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050fc:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005100:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005104:	e8 81 de ff ff       	call   c0002f8a <sync_fs>
c0005109:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000510d:	83 ec 0c             	sub    esp,0xc
c0005110:	56                   	push   esi
c0005111:	e8 36 0d 00 00       	call   c0005e4c <ff_memfree>
c0005116:	83 c4 10             	add    esp,0x10
c0005119:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000511d:	83 c4 50             	add    esp,0x50
c0005120:	5b                   	pop    ebx
c0005121:	5e                   	pop    esi
c0005122:	5f                   	pop    edi
c0005123:	c3                   	ret    

c0005124 <f_utime>:
c0005124:	56                   	push   esi
c0005125:	b9 02 00 00 00       	mov    ecx,0x2
c000512a:	53                   	push   ebx
c000512b:	83 ec 54             	sub    esp,0x54
c000512e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005132:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0005136:	8d 44 24 60          	lea    eax,[esp+0x60]
c000513a:	e8 73 d5 ff ff       	call   c00026b2 <mount_volume>
c000513f:	85 c0                	test   eax,eax
c0005141:	0f 85 87 00 00 00    	jne    c00051ce <f_utime+0xaa>
c0005147:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000514b:	83 ec 0c             	sub    esp,0xc
c000514e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005152:	68 00 02 00 00       	push   0x200
c0005157:	e8 d8 0c 00 00       	call   c0005e34 <ff_memalloc>
c000515c:	83 c4 10             	add    esp,0x10
c000515f:	89 c3                	mov    ebx,eax
c0005161:	b8 11 00 00 00       	mov    eax,0x11
c0005166:	85 db                	test   ebx,ebx
c0005168:	74 64                	je     c00051ce <f_utime+0xaa>
c000516a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000516e:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0005172:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0005175:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005179:	e8 7c ea ff ff       	call   c0003bfa <follow_path>
c000517e:	85 c0                	test   eax,eax
c0005180:	75 38                	jne    c00051ba <f_utime+0x96>
c0005182:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0005186:	b8 06 00 00 00       	mov    eax,0x6
c000518b:	80 e2 a0             	and    dl,0xa0
c000518e:	75 2a                	jne    c00051ba <f_utime+0x96>
c0005190:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0005194:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0005198:	c1 e2 10             	shl    edx,0x10
c000519b:	09 c2                	or     edx,eax
c000519d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00051a1:	83 c0 16             	add    eax,0x16
c00051a4:	e8 70 ce ff ff       	call   c0002019 <st_dword>
c00051a9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00051ad:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00051b1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00051b5:	e8 d0 dd ff ff       	call   c0002f8a <sync_fs>
c00051ba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00051be:	83 ec 0c             	sub    esp,0xc
c00051c1:	53                   	push   ebx
c00051c2:	e8 85 0c 00 00       	call   c0005e4c <ff_memfree>
c00051c7:	83 c4 10             	add    esp,0x10
c00051ca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00051ce:	83 c4 54             	add    esp,0x54
c00051d1:	5b                   	pop    ebx
c00051d2:	5e                   	pop    esi
c00051d3:	c3                   	ret    

c00051d4 <f_getlabel>:
c00051d4:	55                   	push   ebp
c00051d5:	31 c9                	xor    ecx,ecx
c00051d7:	57                   	push   edi
c00051d8:	56                   	push   esi
c00051d9:	53                   	push   ebx
c00051da:	83 ec 5c             	sub    esp,0x5c
c00051dd:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00051e1:	8b 7c 24 74          	mov    edi,DWORD PTR [esp+0x74]
c00051e5:	8d 44 24 70          	lea    eax,[esp+0x70]
c00051e9:	e8 c4 d4 ff ff       	call   c00026b2 <mount_volume>
c00051ee:	85 c0                	test   eax,eax
c00051f0:	89 c3                	mov    ebx,eax
c00051f2:	0f 85 d9 00 00 00    	jne    c00052d1 <f_getlabel+0xfd>
c00051f8:	85 ff                	test   edi,edi
c00051fa:	0f 84 d1 00 00 00    	je     c00052d1 <f_getlabel+0xfd>
c0005200:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0005208:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000520c:	31 d2                	xor    edx,edx
c000520e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005212:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005216:	e8 1c e3 ff ff       	call   c0003537 <dir_sdi>
c000521b:	85 c0                	test   eax,eax
c000521d:	89 c3                	mov    ebx,eax
c000521f:	0f 85 a2 00 00 00    	jne    c00052c7 <f_getlabel+0xf3>
c0005225:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005229:	ba 01 00 00 00       	mov    edx,0x1
c000522e:	e8 fe e6 ff ff       	call   c0003931 <dir_read>
c0005233:	85 c0                	test   eax,eax
c0005235:	89 c3                	mov    ebx,eax
c0005237:	0f 85 8a 00 00 00    	jne    c00052c7 <f_getlabel+0xf3>
c000523d:	31 f6                	xor    esi,esi
c000523f:	31 d2                	xor    edx,edx
c0005241:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005245:	8d 6a 01             	lea    ebp,[edx+0x1]
c0005248:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000524c:	0f b6 0c 10          	movzx  ecx,BYTE PTR [eax+edx*1]
c0005250:	66 89 4c 24 0c       	mov    WORD PTR [esp+0xc],cx
c0005255:	89 c8                	mov    eax,ecx
c0005257:	e8 13 ce ff ff       	call   c000206f <dbc_1st>
c000525c:	85 c0                	test   eax,eax
c000525e:	74 19                	je     c0005279 <f_getlabel+0xa5>
c0005260:	83 fd 0b             	cmp    ebp,0xb
c0005263:	74 14                	je     c0005279 <f_getlabel+0xa5>
c0005265:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005269:	c1 e1 08             	shl    ecx,0x8
c000526c:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0005270:	8d 6a 02             	lea    ebp,[edx+0x2]
c0005273:	09 c1                	or     ecx,eax
c0005275:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005279:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000527e:	52                   	push   edx
c000527f:	52                   	push   edx
c0005280:	68 b5 01 00 00       	push   0x1b5
c0005285:	50                   	push   eax
c0005286:	e8 75 0c 00 00       	call   c0005f00 <ff_oem2uni>
c000528b:	83 c4 10             	add    esp,0x10
c000528e:	0f b7 c0             	movzx  eax,ax
c0005291:	85 c0                	test   eax,eax
c0005293:	74 1f                	je     c00052b4 <f_getlabel+0xe0>
c0005295:	8d 14 37             	lea    edx,[edi+esi*1]
c0005298:	b9 04 00 00 00       	mov    ecx,0x4
c000529d:	e8 ab ce ff ff       	call   c000214d <put_utf>
c00052a2:	0f b6 c0             	movzx  eax,al
c00052a5:	85 c0                	test   eax,eax
c00052a7:	74 0b                	je     c00052b4 <f_getlabel+0xe0>
c00052a9:	01 c6                	add    esi,eax
c00052ab:	83 fd 0b             	cmp    ebp,0xb
c00052ae:	74 06                	je     c00052b6 <f_getlabel+0xe2>
c00052b0:	89 ea                	mov    edx,ebp
c00052b2:	eb 8d                	jmp    c0005241 <f_getlabel+0x6d>
c00052b4:	31 f6                	xor    esi,esi
c00052b6:	01 fe                	add    esi,edi
c00052b8:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00052bb:	39 f7                	cmp    edi,esi
c00052bd:	74 12                	je     c00052d1 <f_getlabel+0xfd>
c00052bf:	4e                   	dec    esi
c00052c0:	80 3e 20             	cmp    BYTE PTR [esi],0x20
c00052c3:	74 f3                	je     c00052b8 <f_getlabel+0xe4>
c00052c5:	eb 0a                	jmp    c00052d1 <f_getlabel+0xfd>
c00052c7:	83 fb 04             	cmp    ebx,0x4
c00052ca:	75 05                	jne    c00052d1 <f_getlabel+0xfd>
c00052cc:	c6 07 00             	mov    BYTE PTR [edi],0x0
c00052cf:	31 db                	xor    ebx,ebx
c00052d1:	85 db                	test   ebx,ebx
c00052d3:	75 49                	jne    c000531e <f_getlabel+0x14a>
c00052d5:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c00052da:	74 42                	je     c000531e <f_getlabel+0x14a>
c00052dc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00052e0:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00052e3:	e8 6d d2 ff ff       	call   c0002555 <move_window>
c00052e8:	85 c0                	test   eax,eax
c00052ea:	89 c3                	mov    ebx,eax
c00052ec:	75 30                	jne    c000531e <f_getlabel+0x14a>
c00052ee:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00052f2:	b8 43 00 00 00       	mov    eax,0x43
c00052f7:	0f b6 0a             	movzx  ecx,BYTE PTR [edx]
c00052fa:	83 f9 03             	cmp    ecx,0x3
c00052fd:	74 10                	je     c000530f <f_getlabel+0x13b>
c00052ff:	83 f9 04             	cmp    ecx,0x4
c0005302:	b8 64 00 00 00       	mov    eax,0x64
c0005307:	b9 27 00 00 00       	mov    ecx,0x27
c000530c:	0f 45 c1             	cmovne eax,ecx
c000530f:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0005313:	e8 e5 cc ff ff       	call   c0001ffd <ld_dword>
c0005318:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c000531c:	89 07                	mov    DWORD PTR [edi],eax
c000531e:	83 c4 5c             	add    esp,0x5c
c0005321:	89 d8                	mov    eax,ebx
c0005323:	5b                   	pop    ebx
c0005324:	5e                   	pop    esi
c0005325:	5f                   	pop    edi
c0005326:	5d                   	pop    ebp
c0005327:	c3                   	ret    

c0005328 <f_setlabel>:
c0005328:	57                   	push   edi
c0005329:	b9 02 00 00 00       	mov    ecx,0x2
c000532e:	56                   	push   esi
c000532f:	53                   	push   ebx
c0005330:	83 ec 50             	sub    esp,0x50
c0005333:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005337:	8d 44 24 60          	lea    eax,[esp+0x60]
c000533b:	e8 72 d3 ff ff       	call   c00026b2 <mount_volume>
c0005340:	85 c0                	test   eax,eax
c0005342:	89 c6                	mov    esi,eax
c0005344:	0f 85 65 01 00 00    	jne    c00054af <f_setlabel+0x187>
c000534a:	b9 0b 00 00 00       	mov    ecx,0xb
c000534f:	ba 20 00 00 00       	mov    edx,0x20
c0005354:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0005358:	31 db                	xor    ebx,ebx
c000535a:	e8 d2 cc ff ff       	call   c0002031 <mem_set>
c000535f:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0005363:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0005366:	76 5d                	jbe    c00053c5 <f_setlabel+0x9d>
c0005368:	8d 44 24 60          	lea    eax,[esp+0x60]
c000536c:	e8 04 cd ff ff       	call   c0002075 <tchar2uni>
c0005371:	3d ff ff 00 00       	cmp    eax,0xffff
c0005376:	76 0a                	jbe    c0005382 <f_setlabel+0x5a>
c0005378:	be 06 00 00 00       	mov    esi,0x6
c000537d:	e9 2d 01 00 00       	jmp    c00054af <f_setlabel+0x187>
c0005382:	83 ec 0c             	sub    esp,0xc
c0005385:	50                   	push   eax
c0005386:	e8 ed 0b 00 00       	call   c0005f78 <ff_wtoupper>
c000538b:	5a                   	pop    edx
c000538c:	59                   	pop    ecx
c000538d:	68 b5 01 00 00       	push   0x1b5
c0005392:	50                   	push   eax
c0005393:	e8 cc 0a 00 00       	call   c0005e64 <ff_uni2oem>
c0005398:	83 c4 10             	add    esp,0x10
c000539b:	0f b7 f0             	movzx  esi,ax
c000539e:	85 f6                	test   esi,esi
c00053a0:	89 f7                	mov    edi,esi
c00053a2:	74 d4                	je     c0005378 <f_setlabel+0x50>
c00053a4:	89 f2                	mov    edx,esi
c00053a6:	b8 10 9b 02 c0       	mov    eax,0xc0029b10
c00053ab:	e8 ae cc ff ff       	call   c000205e <chk_chr>
c00053b0:	85 c0                	test   eax,eax
c00053b2:	75 c4                	jne    c0005378 <f_setlabel+0x50>
c00053b4:	81 fe ff 00 00 00    	cmp    esi,0xff
c00053ba:	0f 87 c9 00 00 00    	ja     c0005489 <f_setlabel+0x161>
c00053c0:	e9 e0 00 00 00       	jmp    c00054a5 <f_setlabel+0x17d>
c00053c5:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c00053ca:	74 ac                	je     c0005378 <f_setlabel+0x50>
c00053cc:	85 db                	test   ebx,ebx
c00053ce:	74 0e                	je     c00053de <f_setlabel+0xb6>
c00053d0:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c00053d5:	8d 43 ff             	lea    eax,[ebx-0x1]
c00053d8:	75 04                	jne    c00053de <f_setlabel+0xb6>
c00053da:	89 c3                	mov    ebx,eax
c00053dc:	eb ee                	jmp    c00053cc <f_setlabel+0xa4>
c00053de:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00053e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00053ea:	31 d2                	xor    edx,edx
c00053ec:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00053f0:	8d 44 24 20          	lea    eax,[esp+0x20]
c00053f4:	e8 3e e1 ff ff       	call   c0003537 <dir_sdi>
c00053f9:	85 c0                	test   eax,eax
c00053fb:	89 c6                	mov    esi,eax
c00053fd:	0f 85 ac 00 00 00    	jne    c00054af <f_setlabel+0x187>
c0005403:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005407:	ba 01 00 00 00       	mov    edx,0x1
c000540c:	e8 20 e5 ff ff       	call   c0003931 <dir_read>
c0005411:	85 c0                	test   eax,eax
c0005413:	75 18                	jne    c000542d <f_setlabel+0x105>
c0005415:	85 db                	test   ebx,ebx
c0005417:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000541b:	74 0b                	je     c0005428 <f_setlabel+0x100>
c000541d:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005421:	b9 0b 00 00 00       	mov    ecx,0xb
c0005426:	eb 47                	jmp    c000546f <f_setlabel+0x147>
c0005428:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c000542b:	eb 47                	jmp    c0005474 <f_setlabel+0x14c>
c000542d:	83 f8 04             	cmp    eax,0x4
c0005430:	75 53                	jne    c0005485 <f_setlabel+0x15d>
c0005432:	85 db                	test   ebx,ebx
c0005434:	74 79                	je     c00054af <f_setlabel+0x187>
c0005436:	8d 44 24 20          	lea    eax,[esp+0x20]
c000543a:	ba 01 00 00 00       	mov    edx,0x1
c000543f:	e8 88 e4 ff ff       	call   c00038cc <dir_alloc>
c0005444:	85 c0                	test   eax,eax
c0005446:	89 c6                	mov    esi,eax
c0005448:	75 65                	jne    c00054af <f_setlabel+0x187>
c000544a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000544e:	b9 20 00 00 00       	mov    ecx,0x20
c0005453:	31 d2                	xor    edx,edx
c0005455:	e8 d7 cb ff ff       	call   c0002031 <mem_set>
c000545a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000545e:	b9 0b 00 00 00       	mov    ecx,0xb
c0005463:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005467:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c000546b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000546f:	e8 a8 cb ff ff       	call   c000201c <mem_cpy>
c0005474:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005478:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000547c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005480:	e8 05 db ff ff       	call   c0002f8a <sync_fs>
c0005485:	89 c6                	mov    esi,eax
c0005487:	eb 26                	jmp    c00054af <f_setlabel+0x187>
c0005489:	83 fb 09             	cmp    ebx,0x9
c000548c:	0f 87 e6 fe ff ff    	ja     c0005378 <f_setlabel+0x50>
c0005492:	89 f0                	mov    eax,esi
c0005494:	88 64 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],ah
c0005498:	43                   	inc    ebx
c0005499:	89 f8                	mov    eax,edi
c000549b:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c000549f:	43                   	inc    ebx
c00054a0:	e9 ba fe ff ff       	jmp    c000535f <f_setlabel+0x37>
c00054a5:	83 fb 0a             	cmp    ebx,0xa
c00054a8:	76 ef                	jbe    c0005499 <f_setlabel+0x171>
c00054aa:	e9 c9 fe ff ff       	jmp    c0005378 <f_setlabel+0x50>
c00054af:	83 c4 50             	add    esp,0x50
c00054b2:	89 f0                	mov    eax,esi
c00054b4:	5b                   	pop    ebx
c00054b5:	5e                   	pop    esi
c00054b6:	5f                   	pop    edi
c00054b7:	c3                   	ret    

c00054b8 <f_expand>:
c00054b8:	55                   	push   ebp
c00054b9:	57                   	push   edi
c00054ba:	56                   	push   esi
c00054bb:	53                   	push   ebx
c00054bc:	83 ec 2c             	sub    esp,0x2c
c00054bf:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00054c3:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00054c7:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00054cb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00054cf:	89 d8                	mov    eax,ebx
c00054d1:	e8 d6 cf ff ff       	call   c00024ac <validate>
c00054d6:	85 c0                	test   eax,eax
c00054d8:	89 c6                	mov    esi,eax
c00054da:	0f 85 3b 01 00 00    	jne    c000561b <f_expand+0x163>
c00054e0:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c00054e4:	85 f6                	test   esi,esi
c00054e6:	0f 85 2f 01 00 00    	jne    c000561b <f_expand+0x163>
c00054ec:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c00054f1:	75 0a                	jne    c00054fd <f_expand+0x45>
c00054f3:	be 07 00 00 00       	mov    esi,0x7
c00054f8:	e9 1e 01 00 00       	jmp    c000561b <f_expand+0x163>
c00054fd:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c0005501:	75 f0                	jne    c00054f3 <f_expand+0x3b>
c0005503:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0005507:	74 ea                	je     c00054f3 <f_expand+0x3b>
c0005509:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000550d:	0f b7 79 0a          	movzx  edi,WORD PTR [ecx+0xa]
c0005511:	c1 e7 09             	shl    edi,0x9
c0005514:	8d 47 ff             	lea    eax,[edi-0x1]
c0005517:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c000551b:	0f 95 c0             	setne  al
c000551e:	31 d2                	xor    edx,edx
c0005520:	0f b6 c0             	movzx  eax,al
c0005523:	89 c5                	mov    ebp,eax
c0005525:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005529:	f7 f7                	div    edi
c000552b:	8b 79 10             	mov    edi,DWORD PTR [ecx+0x10]
c000552e:	01 e8                	add    eax,ebp
c0005530:	83 ff 01             	cmp    edi,0x1
c0005533:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005537:	76 05                	jbe    c000553e <f_expand+0x86>
c0005539:	39 79 18             	cmp    DWORD PTR [ecx+0x18],edi
c000553c:	77 05                	ja     c0005543 <f_expand+0x8b>
c000553e:	bf 02 00 00 00       	mov    edi,0x2
c0005543:	89 3c 24             	mov    DWORD PTR [esp],edi
c0005546:	89 fd                	mov    ebp,edi
c0005548:	31 c9                	xor    ecx,ecx
c000554a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000554e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005550:	89 ea                	mov    edx,ebp
c0005552:	45                   	inc    ebp
c0005553:	e8 da de ff ff       	call   c0003432 <get_fat.isra.2>
c0005558:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000555c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005560:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c0005563:	77 05                	ja     c000556a <f_expand+0xb2>
c0005565:	bd 02 00 00 00       	mov    ebp,0x2
c000556a:	83 f8 01             	cmp    eax,0x1
c000556d:	74 20                	je     c000558f <f_expand+0xd7>
c000556f:	83 f8 ff             	cmp    eax,0xffffffff
c0005572:	74 25                	je     c0005599 <f_expand+0xe1>
c0005574:	85 c0                	test   eax,eax
c0005576:	75 09                	jne    c0005581 <f_expand+0xc9>
c0005578:	41                   	inc    ecx
c0005579:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c000557d:	75 07                	jne    c0005586 <f_expand+0xce>
c000557f:	eb 1f                	jmp    c00055a0 <f_expand+0xe8>
c0005581:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0005584:	31 c9                	xor    ecx,ecx
c0005586:	39 fd                	cmp    ebp,edi
c0005588:	75 c0                	jne    c000554a <f_expand+0x92>
c000558a:	e9 64 ff ff ff       	jmp    c00054f3 <f_expand+0x3b>
c000558f:	be 02 00 00 00       	mov    esi,0x2
c0005594:	e9 82 00 00 00       	jmp    c000561b <f_expand+0x163>
c0005599:	be 01 00 00 00       	mov    esi,0x1
c000559e:	eb 7b                	jmp    c000561b <f_expand+0x163>
c00055a0:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00055a5:	74 2b                	je     c00055d2 <f_expand+0x11a>
c00055a7:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00055aa:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c00055ae:	85 ed                	test   ebp,ebp
c00055b0:	74 24                	je     c00055d6 <f_expand+0x11e>
c00055b2:	83 c9 ff             	or     ecx,0xffffffff
c00055b5:	83 fd 01             	cmp    ebp,0x1
c00055b8:	74 03                	je     c00055bd <f_expand+0x105>
c00055ba:	8d 4f 01             	lea    ecx,[edi+0x1]
c00055bd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00055c1:	89 fa                	mov    edx,edi
c00055c3:	e8 e7 d3 ff ff       	call   c00029af <put_fat>
c00055c8:	85 c0                	test   eax,eax
c00055ca:	75 4d                	jne    c0005619 <f_expand+0x161>
c00055cc:	89 f8                	mov    eax,edi
c00055ce:	4d                   	dec    ebp
c00055cf:	47                   	inc    edi
c00055d0:	eb dc                	jmp    c00055ae <f_expand+0xf6>
c00055d2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00055d5:	48                   	dec    eax
c00055d6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00055da:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00055df:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c00055e2:	74 37                	je     c000561b <f_expand+0x163>
c00055e4:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00055e7:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00055ea:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055ee:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00055f1:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00055f4:	83 c8 40             	or     eax,0x40
c00055f7:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00055fa:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c00055fd:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0005600:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0005603:	39 c8                	cmp    eax,ecx
c0005605:	77 14                	ja     c000561b <f_expand+0x163>
c0005607:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000560b:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000560e:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0005611:	83 c8 01             	or     eax,0x1
c0005614:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0005617:	eb 02                	jmp    c000561b <f_expand+0x163>
c0005619:	89 c6                	mov    esi,eax
c000561b:	83 c4 2c             	add    esp,0x2c
c000561e:	89 f0                	mov    eax,esi
c0005620:	5b                   	pop    ebx
c0005621:	5e                   	pop    esi
c0005622:	5f                   	pop    edi
c0005623:	5d                   	pop    ebp
c0005624:	c3                   	ret    

c0005625 <f_mkfs>:
c0005625:	55                   	push   ebp
c0005626:	57                   	push   edi
c0005627:	56                   	push   esi
c0005628:	be 0b 00 00 00       	mov    esi,0xb
c000562d:	53                   	push   ebx
c000562e:	83 ec 5c             	sub    esp,0x5c
c0005631:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005635:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0005639:	8b 6c 24 78          	mov    ebp,DWORD PTR [esp+0x78]
c000563d:	e8 1e ce ff ff       	call   c0002460 <get_ldnumber>
c0005642:	85 c0                	test   eax,eax
c0005644:	0f 88 e0 07 00 00    	js     c0005e2a <f_mkfs+0x805>
c000564a:	8b 14 85 a0 24 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcdb60]
c0005651:	85 d2                	test   edx,edx
c0005653:	74 03                	je     c0005658 <f_mkfs+0x33>
c0005655:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0005658:	85 db                	test   ebx,ebx
c000565a:	75 05                	jne    c0005661 <f_mkfs+0x3c>
c000565c:	bb 00 9b 02 c0       	mov    ebx,0xc0029b00
c0005661:	0f b6 c0             	movzx  eax,al
c0005664:	83 ec 0c             	sub    esp,0xc
c0005667:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000566b:	be 03 00 00 00       	mov    esi,0x3
c0005670:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005674:	e8 29 c9 ff ff       	call   c0001fa2 <disk_initialize>
c0005679:	83 c4 10             	add    esp,0x10
c000567c:	a8 01                	test   al,0x1
c000567e:	0f 85 a6 07 00 00    	jne    c0005e2a <f_mkfs+0x805>
c0005684:	a8 04                	test   al,0x4
c0005686:	be 0a 00 00 00       	mov    esi,0xa
c000568b:	0f 85 99 07 00 00    	jne    c0005e2a <f_mkfs+0x805>
c0005691:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0005694:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0005698:	85 c0                	test   eax,eax
c000569a:	75 20                	jne    c00056bc <f_mkfs+0x97>
c000569c:	51                   	push   ecx
c000569d:	8d 44 24 44          	lea    eax,[esp+0x44]
c00056a1:	50                   	push   eax
c00056a2:	6a 03                	push   0x3
c00056a4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00056a8:	e8 24 c9 ff ff       	call   c0001fd1 <disk_ioctl>
c00056ad:	83 c4 10             	add    esp,0x10
c00056b0:	85 c0                	test   eax,eax
c00056b2:	74 08                	je     c00056bc <f_mkfs+0x97>
c00056b4:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00056bc:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00056c0:	8d 42 ff             	lea    eax,[edx-0x1]
c00056c3:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00056c8:	77 04                	ja     c00056ce <f_mkfs+0xa9>
c00056ca:	85 c2                	test   edx,eax
c00056cc:	74 08                	je     c00056d6 <f_mkfs+0xb1>
c00056ce:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00056d6:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00056d9:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00056dd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00056e1:	48                   	dec    eax
c00056e2:	3c 01                	cmp    al,0x1
c00056e4:	76 05                	jbe    c00056eb <f_mkfs+0xc6>
c00056e6:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c00056eb:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00056ee:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00056f2:	48                   	dec    eax
c00056f3:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00056f8:	77 15                	ja     c000570f <f_mkfs+0xea>
c00056fa:	f6 44 24 10 0f       	test   BYTE PTR [esp+0x10],0xf
c00056ff:	b8 00 02 00 00       	mov    eax,0x200
c0005704:	0f 44 44 24 10       	cmove  eax,DWORD PTR [esp+0x10]
c0005709:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000570d:	eb 08                	jmp    c0005717 <f_mkfs+0xf2>
c000570f:	c7 44 24 10 00 02 00 00 	mov    DWORD PTR [esp+0x10],0x200
c0005717:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c000571a:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c0005720:	77 0f                	ja     c0005731 <f_mkfs+0x10c>
c0005722:	8d 47 ff             	lea    eax,[edi-0x1]
c0005725:	85 f8                	test   eax,edi
c0005727:	b8 00 00 00 00       	mov    eax,0x0
c000572c:	0f 45 f8             	cmovne edi,eax
c000572f:	eb 02                	jmp    c0005733 <f_mkfs+0x10e>
c0005731:	31 ff                	xor    edi,edi
c0005733:	81 7c 24 7c ff 01 00 00 	cmp    DWORD PTR [esp+0x7c],0x1ff
c000573b:	77 0a                	ja     c0005747 <f_mkfs+0x122>
c000573d:	be 11 00 00 00       	mov    esi,0x11
c0005742:	e9 e3 06 00 00       	jmp    c0005e2a <f_mkfs+0x805>
c0005747:	85 ed                	test   ebp,ebp
c0005749:	8b 33                	mov    esi,DWORD PTR [ebx]
c000574b:	89 eb                	mov    ebx,ebp
c000574d:	75 1e                	jne    c000576d <f_mkfs+0x148>
c000574f:	83 ec 0c             	sub    esp,0xc
c0005752:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0005759:	25 00 fe ff ff       	and    eax,0xfffffe00
c000575e:	50                   	push   eax
c000575f:	e8 d0 06 00 00       	call   c0005e34 <ff_memalloc>
c0005764:	83 c4 10             	add    esp,0x10
c0005767:	85 c0                	test   eax,eax
c0005769:	89 c3                	mov    ebx,eax
c000576b:	74 d0                	je     c000573d <f_mkfs+0x118>
c000576d:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0005775:	52                   	push   edx
c0005776:	8d 44 24 48          	lea    eax,[esp+0x48]
c000577a:	50                   	push   eax
c000577b:	6a 01                	push   0x1
c000577d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005781:	e8 4b c8 ff ff       	call   c0001fd1 <disk_ioctl>
c0005786:	83 c4 10             	add    esp,0x10
c0005789:	85 c0                	test   eax,eax
c000578b:	0f 85 42 06 00 00    	jne    c0005dd3 <f_mkfs+0x7ae>
c0005791:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005799:	89 f0                	mov    eax,esi
c000579b:	83 e0 08             	and    eax,0x8
c000579e:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00057a2:	75 18                	jne    c00057bc <f_mkfs+0x197>
c00057a4:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00057a8:	83 f8 3f             	cmp    eax,0x3f
c00057ab:	76 0f                	jbe    c00057bc <f_mkfs+0x197>
c00057ad:	c7 44 24 14 3f 00 00 00 	mov    DWORD PTR [esp+0x14],0x3f
c00057b5:	83 e8 3f             	sub    eax,0x3f
c00057b8:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00057bc:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00057c0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00057c4:	83 f8 7f             	cmp    eax,0x7f
c00057c7:	0f 86 5f 02 00 00    	jbe    c0005a2c <f_mkfs+0x407>
c00057cd:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c00057d3:	b9 80 00 00 00       	mov    ecx,0x80
c00057d8:	77 05                	ja     c00057df <f_mkfs+0x1ba>
c00057da:	c1 ef 09             	shr    edi,0x9
c00057dd:	89 f9                	mov    ecx,edi
c00057df:	89 f0                	mov    eax,esi
c00057e1:	89 f7                	mov    edi,esi
c00057e3:	83 e0 01             	and    eax,0x1
c00057e6:	83 e7 02             	and    edi,0x2
c00057e9:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c00057ed:	0f b6 c0             	movzx  eax,al
c00057f0:	74 0a                	je     c00057fc <f_mkfs+0x1d7>
c00057f2:	85 c0                	test   eax,eax
c00057f4:	0f 84 53 01 00 00    	je     c000594d <f_mkfs+0x328>
c00057fa:	eb 37                	jmp    c0005833 <f_mkfs+0x20e>
c00057fc:	85 c0                	test   eax,eax
c00057fe:	be 13 00 00 00       	mov    esi,0x13
c0005803:	75 2e                	jne    c0005833 <f_mkfs+0x20e>
c0005805:	e9 e0 05 00 00       	jmp    c0005dea <f_mkfs+0x7c5>
c000580a:	83 f8 02             	cmp    eax,0x2
c000580d:	0f 85 11 02 00 00    	jne    c0005a24 <f_mkfs+0x3ff>
c0005813:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005819:	0f 86 e8 01 00 00    	jbe    c0005a07 <f_mkfs+0x3e2>
c000581f:	85 c9                	test   ecx,ecx
c0005821:	0f 85 d5 05 00 00    	jne    c0005dfc <f_mkfs+0x7d7>
c0005827:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c000582a:	83 f9 40             	cmp    ecx,0x40
c000582d:	0f 87 d9 05 00 00    	ja     c0005e0c <f_mkfs+0x7e7>
c0005833:	85 c9                	test   ecx,ecx
c0005835:	89 cf                	mov    edi,ecx
c0005837:	75 1c                	jne    c0005855 <f_mkfs+0x230>
c0005839:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000583d:	b8 e0 9a 02 c0       	mov    eax,0xc0029ae0
c0005842:	bf 01 00 00 00       	mov    edi,0x1
c0005847:	c1 ee 0c             	shr    esi,0xc
c000584a:	0f b7 10             	movzx  edx,WORD PTR [eax]
c000584d:	85 d2                	test   edx,edx
c000584f:	0f 85 67 01 00 00    	jne    c00059bc <f_mkfs+0x397>
c0005855:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005859:	31 d2                	xor    edx,edx
c000585b:	f7 f7                	div    edi
c000585d:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005862:	0f 86 66 01 00 00    	jbe    c00059ce <f_mkfs+0x3a9>
c0005868:	c6 44 24 0b 02       	mov    BYTE PTR [esp+0xb],0x2
c000586d:	83 c0 02             	add    eax,0x2
c0005870:	01 c0                	add    eax,eax
c0005872:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c000587a:	05 ff 01 00 00       	add    eax,0x1ff
c000587f:	c1 e8 09             	shr    eax,0x9
c0005882:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005886:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000588a:	c1 e0 05             	shl    eax,0x5
c000588d:	c1 e8 09             	shr    eax,0x9
c0005890:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0005894:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0005899:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000589d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00058a1:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c00058a5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00058a9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00058ad:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c00058b2:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c00058b6:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00058ba:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00058be:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00058c2:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00058c6:	8d 74 10 ff          	lea    esi,[eax+edx*1-0x1]
c00058ca:	f7 d8                	neg    eax
c00058cc:	21 c6                	and    esi,eax
c00058ce:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00058d3:	29 d6                	sub    esi,edx
c00058d5:	83 f8 03             	cmp    eax,0x3
c00058d8:	0f 85 03 01 00 00    	jne    c00059e1 <f_mkfs+0x3bc>
c00058de:	01 74 24 24          	add    DWORD PTR [esp+0x24],esi
c00058e2:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c00058e6:	89 f8                	mov    eax,edi
c00058e8:	c1 e0 04             	shl    eax,0x4
c00058eb:	2b 44 24 14          	sub    eax,DWORD PTR [esp+0x14]
c00058ef:	03 44 24 34          	add    eax,DWORD PTR [esp+0x34]
c00058f3:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c00058f7:	0f 82 2f 01 00 00    	jb     c0005a2c <f_mkfs+0x407>
c00058fd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005901:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c0005905:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0005909:	89 c2                	mov    edx,eax
c000590b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000590f:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c0005914:	29 c2                	sub    edx,eax
c0005916:	89 d0                	mov    eax,edx
c0005918:	31 d2                	xor    edx,edx
c000591a:	f7 f7                	div    edi
c000591c:	89 c6                	mov    esi,eax
c000591e:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005923:	83 f8 03             	cmp    eax,0x3
c0005926:	0f 85 de fe ff ff    	jne    c000580a <f_mkfs+0x1e5>
c000592c:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005932:	0f 87 03 01 00 00    	ja     c0005a3b <f_mkfs+0x416>
c0005938:	85 c9                	test   ecx,ecx
c000593a:	0f 85 ec 00 00 00    	jne    c0005a2c <f_mkfs+0x407>
c0005940:	83 ff 01             	cmp    edi,0x1
c0005943:	0f 86 e3 00 00 00    	jbe    c0005a2c <f_mkfs+0x407>
c0005949:	d1 ef                	shr    edi,1
c000594b:	89 f9                	mov    ecx,edi
c000594d:	85 c9                	test   ecx,ecx
c000594f:	89 ce                	mov    esi,ecx
c0005951:	75 25                	jne    c0005978 <f_mkfs+0x353>
c0005953:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005957:	b8 f0 9a 02 c0       	mov    eax,0xc0029af0
c000595c:	b9 01 00 00 00       	mov    ecx,0x1
c0005961:	c1 ee 11             	shr    esi,0x11
c0005964:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0005967:	85 d2                	test   edx,edx
c0005969:	74 0b                	je     c0005976 <f_mkfs+0x351>
c000596b:	83 c0 02             	add    eax,0x2
c000596e:	39 f2                	cmp    edx,esi
c0005970:	77 04                	ja     c0005976 <f_mkfs+0x351>
c0005972:	01 c9                	add    ecx,ecx
c0005974:	eb ee                	jmp    c0005964 <f_mkfs+0x33f>
c0005976:	31 f6                	xor    esi,esi
c0005978:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000597c:	31 d2                	xor    edx,edx
c000597e:	f7 f1                	div    ecx
c0005980:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0005987:	2d f6 ff 00 00       	sub    eax,0xfff6
c000598c:	c1 ea 09             	shr    edx,0x9
c000598f:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0005994:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0005998:	0f 87 8e 00 00 00    	ja     c0005a2c <f_mkfs+0x407>
c000599e:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c00059a6:	89 cf                	mov    edi,ecx
c00059a8:	89 f1                	mov    ecx,esi
c00059aa:	c7 44 24 24 20 00 00 00 	mov    DWORD PTR [esp+0x24],0x20
c00059b2:	c6 44 24 0b 03       	mov    BYTE PTR [esp+0xb],0x3
c00059b7:	e9 d8 fe ff ff       	jmp    c0005894 <f_mkfs+0x26f>
c00059bc:	83 c0 02             	add    eax,0x2
c00059bf:	39 f2                	cmp    edx,esi
c00059c1:	0f 87 8e fe ff ff    	ja     c0005855 <f_mkfs+0x230>
c00059c7:	01 ff                	add    edi,edi
c00059c9:	e9 7c fe ff ff       	jmp    c000584a <f_mkfs+0x225>
c00059ce:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c00059d3:	8d 04 40             	lea    eax,[eax+eax*2]
c00059d6:	40                   	inc    eax
c00059d7:	d1 e8                	shr    eax,1
c00059d9:	83 c0 03             	add    eax,0x3
c00059dc:	e9 91 fe ff ff       	jmp    c0005872 <f_mkfs+0x24d>
c00059e1:	31 d2                	xor    edx,edx
c00059e3:	89 f0                	mov    eax,esi
c00059e5:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00059e9:	85 d2                	test   edx,edx
c00059eb:	74 09                	je     c00059f6 <f_mkfs+0x3d1>
c00059ed:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c00059f1:	4e                   	dec    esi
c00059f2:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c00059f6:	89 f0                	mov    eax,esi
c00059f8:	31 d2                	xor    edx,edx
c00059fa:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00059fe:	01 44 24 18          	add    DWORD PTR [esp+0x18],eax
c0005a02:	e9 df fe ff ff       	jmp    c00058e6 <f_mkfs+0x2c1>
c0005a07:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c0005a0d:	77 2c                	ja     c0005a3b <f_mkfs+0x416>
c0005a0f:	85 c9                	test   ecx,ecx
c0005a11:	75 19                	jne    c0005a2c <f_mkfs+0x407>
c0005a13:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005a16:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005a1c:	0f 86 11 fe ff ff    	jbe    c0005833 <f_mkfs+0x20e>
c0005a22:	eb 08                	jmp    c0005a2c <f_mkfs+0x407>
c0005a24:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c0005a2a:	76 0a                	jbe    c0005a36 <f_mkfs+0x411>
c0005a2c:	be 0e 00 00 00       	mov    esi,0xe
c0005a31:	e9 b4 03 00 00       	jmp    c0005dea <f_mkfs+0x7c5>
c0005a36:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c0005a3b:	31 d2                	xor    edx,edx
c0005a3d:	b9 00 02 00 00       	mov    ecx,0x200
c0005a42:	89 d8                	mov    eax,ebx
c0005a44:	e8 e8 c5 ff ff       	call   c0002031 <mem_set>
c0005a49:	b9 0b 00 00 00       	mov    ecx,0xb
c0005a4e:	ba 92 9a 02 c0       	mov    edx,0xc0029a92
c0005a53:	89 d8                	mov    eax,ebx
c0005a55:	e8 c2 c5 ff ff       	call   c000201c <mem_cpy>
c0005a5a:	8d 43 0b             	lea    eax,[ebx+0xb]
c0005a5d:	ba 00 02 00 00       	mov    edx,0x200
c0005a62:	e8 ae c5 ff ff       	call   c0002015 <st_word>
c0005a67:	0f b7 54 24 24       	movzx  edx,WORD PTR [esp+0x24]
c0005a6c:	89 f8                	mov    eax,edi
c0005a6e:	88 43 0d             	mov    BYTE PTR [ebx+0xd],al
c0005a71:	8d 43 0e             	lea    eax,[ebx+0xe]
c0005a74:	e8 9c c5 ff ff       	call   c0002015 <st_word>
c0005a79:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c0005a7d:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0005a80:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005a85:	83 f8 03             	cmp    eax,0x3
c0005a88:	b8 00 00 00 00       	mov    eax,0x0
c0005a8d:	0f 45 44 24 10       	cmovne eax,DWORD PTR [esp+0x10]
c0005a92:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005a96:	8d 43 11             	lea    eax,[ebx+0x11]
c0005a99:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005a9d:	e8 73 c5 ff ff       	call   c0002015 <st_word>
c0005aa2:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0005aa6:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0005aac:	77 0a                	ja     c0005ab8 <f_mkfs+0x493>
c0005aae:	8d 43 13             	lea    eax,[ebx+0x13]
c0005ab1:	e8 5f c5 ff ff       	call   c0002015 <st_word>
c0005ab6:	eb 08                	jmp    c0005ac0 <f_mkfs+0x49b>
c0005ab8:	8d 43 20             	lea    eax,[ebx+0x20]
c0005abb:	e8 59 c5 ff ff       	call   c0002019 <st_dword>
c0005ac0:	c6 43 15 f8          	mov    BYTE PTR [ebx+0x15],0xf8
c0005ac4:	8d 43 18             	lea    eax,[ebx+0x18]
c0005ac7:	ba 3f 00 00 00       	mov    edx,0x3f
c0005acc:	e8 44 c5 ff ff       	call   c0002015 <st_word>
c0005ad1:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0005ad4:	ba ff 00 00 00       	mov    edx,0xff
c0005ad9:	e8 37 c5 ff ff       	call   c0002015 <st_word>
c0005ade:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005ae2:	8d 43 1c             	lea    eax,[ebx+0x1c]
c0005ae5:	e8 2f c5 ff ff       	call   c0002019 <st_dword>
c0005aea:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005aef:	83 f8 03             	cmp    eax,0x3
c0005af2:	75 57                	jne    c0005b4b <f_mkfs+0x526>
c0005af4:	8d 43 43             	lea    eax,[ebx+0x43]
c0005af7:	ba 00 00 21 50       	mov    edx,0x50210000
c0005afc:	e8 18 c5 ff ff       	call   c0002019 <st_dword>
c0005b01:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0005b05:	8d 43 24             	lea    eax,[ebx+0x24]
c0005b08:	e8 0c c5 ff ff       	call   c0002019 <st_dword>
c0005b0d:	8d 43 2c             	lea    eax,[ebx+0x2c]
c0005b10:	ba 02 00 00 00       	mov    edx,0x2
c0005b15:	e8 ff c4 ff ff       	call   c0002019 <st_dword>
c0005b1a:	8d 43 30             	lea    eax,[ebx+0x30]
c0005b1d:	ba 01 00 00 00       	mov    edx,0x1
c0005b22:	e8 ee c4 ff ff       	call   c0002015 <st_word>
c0005b27:	8d 43 32             	lea    eax,[ebx+0x32]
c0005b2a:	ba 06 00 00 00       	mov    edx,0x6
c0005b2f:	e8 e1 c4 ff ff       	call   c0002015 <st_word>
c0005b34:	8d 43 47             	lea    eax,[ebx+0x47]
c0005b37:	b9 13 00 00 00       	mov    ecx,0x13
c0005b3c:	c6 43 40 80          	mov    BYTE PTR [ebx+0x40],0x80
c0005b40:	ba 9e 9a 02 c0       	mov    edx,0xc0029a9e
c0005b45:	c6 43 42 29          	mov    BYTE PTR [ebx+0x42],0x29
c0005b49:	eb 2f                	jmp    c0005b7a <f_mkfs+0x555>
c0005b4b:	8d 43 27             	lea    eax,[ebx+0x27]
c0005b4e:	ba 00 00 21 50       	mov    edx,0x50210000
c0005b53:	e8 c1 c4 ff ff       	call   c0002019 <st_dword>
c0005b58:	0f b7 54 24 18       	movzx  edx,WORD PTR [esp+0x18]
c0005b5d:	8d 43 16             	lea    eax,[ebx+0x16]
c0005b60:	e8 b0 c4 ff ff       	call   c0002015 <st_word>
c0005b65:	8d 43 2b             	lea    eax,[ebx+0x2b]
c0005b68:	b9 13 00 00 00       	mov    ecx,0x13
c0005b6d:	c6 43 24 80          	mov    BYTE PTR [ebx+0x24],0x80
c0005b71:	ba b2 9a 02 c0       	mov    edx,0xc0029ab2
c0005b76:	c6 43 26 29          	mov    BYTE PTR [ebx+0x26],0x29
c0005b7a:	e8 9d c4 ff ff       	call   c000201c <mem_cpy>
c0005b7f:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005b85:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005b8a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005b8e:	e8 82 c4 ff ff       	call   c0002015 <st_word>
c0005b93:	6a 01                	push   0x1
c0005b95:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b99:	53                   	push   ebx
c0005b9a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b9e:	e8 18 c4 ff ff       	call   c0001fbb <disk_write>
c0005ba3:	83 c4 10             	add    esp,0x10
c0005ba6:	85 c0                	test   eax,eax
c0005ba8:	0f 85 25 02 00 00    	jne    c0005dd3 <f_mkfs+0x7ae>
c0005bae:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005bb3:	83 f8 03             	cmp    eax,0x3
c0005bb6:	0f 85 98 00 00 00    	jne    c0005c54 <f_mkfs+0x62f>
c0005bbc:	6a 01                	push   0x1
c0005bbe:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005bc2:	83 c0 06             	add    eax,0x6
c0005bc5:	50                   	push   eax
c0005bc6:	53                   	push   ebx
c0005bc7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005bcb:	e8 eb c3 ff ff       	call   c0001fbb <disk_write>
c0005bd0:	b9 00 02 00 00       	mov    ecx,0x200
c0005bd5:	31 d2                	xor    edx,edx
c0005bd7:	89 d8                	mov    eax,ebx
c0005bd9:	e8 53 c4 ff ff       	call   c0002031 <mem_set>
c0005bde:	ba 52 52 61 41       	mov    edx,0x41615252
c0005be3:	89 d8                	mov    eax,ebx
c0005be5:	e8 2f c4 ff ff       	call   c0002019 <st_dword>
c0005bea:	8d 83 e4 01 00 00    	lea    eax,[ebx+0x1e4]
c0005bf0:	ba 72 72 41 61       	mov    edx,0x61417272
c0005bf5:	e8 1f c4 ff ff       	call   c0002019 <st_dword>
c0005bfa:	8d 56 ff             	lea    edx,[esi-0x1]
c0005bfd:	8d 83 e8 01 00 00    	lea    eax,[ebx+0x1e8]
c0005c03:	e8 11 c4 ff ff       	call   c0002019 <st_dword>
c0005c08:	8d 83 ec 01 00 00    	lea    eax,[ebx+0x1ec]
c0005c0e:	ba 02 00 00 00       	mov    edx,0x2
c0005c13:	e8 01 c4 ff ff       	call   c0002019 <st_dword>
c0005c18:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005c1e:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005c23:	e8 ed c3 ff ff       	call   c0002015 <st_word>
c0005c28:	6a 01                	push   0x1
c0005c2a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0005c2e:	83 c0 07             	add    eax,0x7
c0005c31:	50                   	push   eax
c0005c32:	53                   	push   ebx
c0005c33:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0005c37:	e8 7f c3 ff ff       	call   c0001fbb <disk_write>
c0005c3c:	83 c4 20             	add    esp,0x20
c0005c3f:	6a 01                	push   0x1
c0005c41:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005c45:	40                   	inc    eax
c0005c46:	50                   	push   eax
c0005c47:	53                   	push   ebx
c0005c48:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005c4c:	e8 6a c3 ff ff       	call   c0001fbb <disk_write>
c0005c51:	83 c4 10             	add    esp,0x10
c0005c54:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0005c58:	31 d2                	xor    edx,edx
c0005c5a:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0005c5e:	c1 e8 09             	shr    eax,0x9
c0005c61:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005c65:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0005c6b:	89 d8                	mov    eax,ebx
c0005c6d:	e8 bf c3 ff ff       	call   c0002031 <mem_set>
c0005c72:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005c77:	b9 f8 ff ff 00       	mov    ecx,0xfffff8
c0005c7c:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0005c84:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005c89:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005c8d:	83 f8 01             	cmp    eax,0x1
c0005c90:	0f 44 d1             	cmove  edx,ecx
c0005c93:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0005c97:	83 7c 24 2c 03       	cmp    DWORD PTR [esp+0x2c],0x3
c0005c9c:	75 21                	jne    c0005cbf <f_mkfs+0x69a>
c0005c9e:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005ca3:	89 d8                	mov    eax,ebx
c0005ca5:	e8 6f c3 ff ff       	call   c0002019 <st_dword>
c0005caa:	8d 43 04             	lea    eax,[ebx+0x4]
c0005cad:	83 ca ff             	or     edx,0xffffffff
c0005cb0:	e8 64 c3 ff ff       	call   c0002019 <st_dword>
c0005cb5:	8d 43 08             	lea    eax,[ebx+0x8]
c0005cb8:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0005cbd:	eb 06                	jmp    c0005cc5 <f_mkfs+0x6a0>
c0005cbf:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0005cc3:	89 d8                	mov    eax,ebx
c0005cc5:	e8 4f c3 ff ff       	call   c0002019 <st_dword>
c0005cca:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0005cce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005cd2:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0005cd6:	0f 46 c6             	cmovbe eax,esi
c0005cd9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005cdd:	50                   	push   eax
c0005cde:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005ce2:	53                   	push   ebx
c0005ce3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005ce7:	e8 cf c2 ff ff       	call   c0001fbb <disk_write>
c0005cec:	83 c4 10             	add    esp,0x10
c0005cef:	85 c0                	test   eax,eax
c0005cf1:	0f 85 dc 00 00 00    	jne    c0005dd3 <f_mkfs+0x7ae>
c0005cf7:	b9 00 02 00 00       	mov    ecx,0x200
c0005cfc:	31 d2                	xor    edx,edx
c0005cfe:	89 d8                	mov    eax,ebx
c0005d00:	e8 2c c3 ff ff       	call   c0002031 <mem_set>
c0005d05:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0005d09:	01 4c 24 20          	add    DWORD PTR [esp+0x20],ecx
c0005d0d:	29 ce                	sub    esi,ecx
c0005d0f:	75 bd                	jne    c0005cce <f_mkfs+0x6a9>
c0005d11:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005d15:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0005d1d:	40                   	inc    eax
c0005d1e:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c0005d22:	0f 87 6f ff ff ff    	ja     c0005c97 <f_mkfs+0x672>
c0005d28:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005d2d:	83 f8 03             	cmp    eax,0x3
c0005d30:	0f 45 7c 24 30       	cmovne edi,DWORD PTR [esp+0x30]
c0005d35:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005d39:	3b 7c 24 10          	cmp    edi,DWORD PTR [esp+0x10]
c0005d3d:	0f 46 f7             	cmovbe esi,edi
c0005d40:	56                   	push   esi
c0005d41:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005d45:	53                   	push   ebx
c0005d46:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005d4a:	e8 6c c2 ff ff       	call   c0001fbb <disk_write>
c0005d4f:	83 c4 10             	add    esp,0x10
c0005d52:	85 c0                	test   eax,eax
c0005d54:	75 7d                	jne    c0005dd3 <f_mkfs+0x7ae>
c0005d56:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005d5a:	29 f7                	sub    edi,esi
c0005d5c:	75 d7                	jne    c0005d35 <f_mkfs+0x710>
c0005d5e:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005d63:	b9 0c 00 00 00       	mov    ecx,0xc
c0005d68:	83 f8 03             	cmp    eax,0x3
c0005d6b:	74 1e                	je     c0005d8b <f_mkfs+0x766>
c0005d6d:	81 7c 24 44 ff ff 00 00 	cmp    DWORD PTR [esp+0x44],0xffff
c0005d75:	b9 06 00 00 00       	mov    ecx,0x6
c0005d7a:	77 0f                	ja     c0005d8b <f_mkfs+0x766>
c0005d7c:	83 f8 02             	cmp    eax,0x2
c0005d7f:	b9 04 00 00 00       	mov    ecx,0x4
c0005d84:	74 05                	je     c0005d8b <f_mkfs+0x766>
c0005d86:	b9 01 00 00 00       	mov    ecx,0x1
c0005d8b:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c0005d90:	75 2a                	jne    c0005dbc <f_mkfs+0x797>
c0005d92:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0005d9a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005d9e:	83 ec 0c             	sub    esp,0xc
c0005da1:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0005da5:	53                   	push   ebx
c0005da6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005daa:	8d 54 24 58          	lea    edx,[esp+0x58]
c0005dae:	e8 87 d2 ff ff       	call   c000303a <create_partition>
c0005db3:	83 c4 10             	add    esp,0x10
c0005db6:	85 c0                	test   eax,eax
c0005db8:	89 c6                	mov    esi,eax
c0005dba:	75 2e                	jne    c0005dea <f_mkfs+0x7c5>
c0005dbc:	50                   	push   eax
c0005dbd:	31 f6                	xor    esi,esi
c0005dbf:	6a 00                	push   0x0
c0005dc1:	6a 00                	push   0x0
c0005dc3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005dc7:	e8 05 c2 ff ff       	call   c0001fd1 <disk_ioctl>
c0005dcc:	83 c4 10             	add    esp,0x10
c0005dcf:	85 c0                	test   eax,eax
c0005dd1:	74 17                	je     c0005dea <f_mkfs+0x7c5>
c0005dd3:	85 ed                	test   ebp,ebp
c0005dd5:	75 0c                	jne    c0005de3 <f_mkfs+0x7be>
c0005dd7:	83 ec 0c             	sub    esp,0xc
c0005dda:	53                   	push   ebx
c0005ddb:	e8 6c 00 00 00       	call   c0005e4c <ff_memfree>
c0005de0:	83 c4 10             	add    esp,0x10
c0005de3:	be 01 00 00 00       	mov    esi,0x1
c0005de8:	eb 40                	jmp    c0005e2a <f_mkfs+0x805>
c0005dea:	85 ed                	test   ebp,ebp
c0005dec:	75 3c                	jne    c0005e2a <f_mkfs+0x805>
c0005dee:	83 ec 0c             	sub    esp,0xc
c0005df1:	53                   	push   ebx
c0005df2:	e8 55 00 00 00       	call   c0005e4c <ff_memfree>
c0005df7:	83 c4 10             	add    esp,0x10
c0005dfa:	eb 2e                	jmp    c0005e2a <f_mkfs+0x805>
c0005dfc:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005e01:	0f 85 46 fb ff ff    	jne    c000594d <f_mkfs+0x328>
c0005e07:	e9 20 fc ff ff       	jmp    c0005a2c <f_mkfs+0x407>
c0005e0c:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005e11:	0f 85 3c fb ff ff    	jne    c0005953 <f_mkfs+0x32e>
c0005e17:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005e1d:	89 cf                	mov    edi,ecx
c0005e1f:	0f 86 30 fa ff ff    	jbe    c0005855 <f_mkfs+0x230>
c0005e25:	e9 02 fc ff ff       	jmp    c0005a2c <f_mkfs+0x407>
c0005e2a:	83 c4 5c             	add    esp,0x5c
c0005e2d:	89 f0                	mov    eax,esi
c0005e2f:	5b                   	pop    ebx
c0005e30:	5e                   	pop    esi
c0005e31:	5f                   	pop    edi
c0005e32:	5d                   	pop    ebp
c0005e33:	c3                   	ret    

c0005e34 <ff_memalloc>:
c0005e34:	83 ec 0c             	sub    esp,0xc
c0005e37:	83 ec 0c             	sub    esp,0xc
c0005e3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005e3e:	e8 c9 a2 00 00       	call   c001010c <malloc>
c0005e43:	83 c4 10             	add    esp,0x10
c0005e46:	83 c4 0c             	add    esp,0xc
c0005e49:	c3                   	ret    
c0005e4a:	66 90                	xchg   ax,ax

c0005e4c <ff_memfree>:
c0005e4c:	83 ec 0c             	sub    esp,0xc
c0005e4f:	83 ec 0c             	sub    esp,0xc
c0005e52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005e56:	e8 c1 a2 00 00       	call   c001011c <free>
c0005e5b:	83 c4 10             	add    esp,0x10
c0005e5e:	90                   	nop
c0005e5f:	83 c4 0c             	add    esp,0xc
c0005e62:	c3                   	ret    
c0005e63:	90                   	nop

c0005e64 <ff_uni2oem>:
c0005e64:	83 ec 14             	sub    esp,0x14
c0005e67:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005e6b:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005e6f:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005e76:	c7 44 24 0c e0 9e 02 c0 	mov    DWORD PTR [esp+0xc],0xc0029ee0
c0005e7e:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005e83:	77 0b                	ja     c0005e90 <ff_uni2oem+0x2c>
c0005e85:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005e89:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005e8e:	eb 64                	jmp    c0005ef4 <ff_uni2oem+0x90>
c0005e90:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005e98:	77 5a                	ja     c0005ef4 <ff_uni2oem+0x90>
c0005e9a:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005e9e:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005ea3:	75 4f                	jne    c0005ef4 <ff_uni2oem+0x90>
c0005ea5:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005eac:	eb 12                	jmp    c0005ec0 <ff_uni2oem+0x5c>
c0005eae:	66 90                	xchg   ax,ax
c0005eb0:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005eb5:	83 c0 01             	add    eax,0x1
c0005eb8:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ebd:	8d 76 00             	lea    esi,[esi+0x0]
c0005ec0:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005ec5:	83 f8 7f             	cmp    eax,0x7f
c0005ec8:	77 1a                	ja     c0005ee4 <ff_uni2oem+0x80>
c0005eca:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005ecf:	8d 14 00             	lea    edx,[eax+eax*1]
c0005ed2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005ed6:	01 d0                	add    eax,edx
c0005ed8:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005edb:	0f b7 c0             	movzx  eax,ax
c0005ede:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005ee2:	75 cc                	jne    c0005eb0 <ff_uni2oem+0x4c>
c0005ee4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ee9:	83 e8 80             	sub    eax,0xffffff80
c0005eec:	0f b6 c0             	movzx  eax,al
c0005eef:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ef4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ef9:	83 c4 14             	add    esp,0x14
c0005efc:	c3                   	ret    
c0005efd:	8d 76 00             	lea    esi,[esi+0x0]

c0005f00 <ff_oem2uni>:
c0005f00:	83 ec 18             	sub    esp,0x18
c0005f03:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005f07:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005f0b:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005f10:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005f14:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005f1b:	c7 44 24 10 e0 9e 02 c0 	mov    DWORD PTR [esp+0x10],0xc0029ee0
c0005f23:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f28:	83 f8 7f             	cmp    eax,0x7f
c0005f2b:	77 0b                	ja     c0005f38 <ff_oem2uni+0x38>
c0005f2d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005f31:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005f36:	eb 34                	jmp    c0005f6c <ff_oem2uni+0x6c>
c0005f38:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005f3c:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005f41:	75 29                	jne    c0005f6c <ff_oem2uni+0x6c>
c0005f43:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f48:	3d ff 00 00 00       	cmp    eax,0xff
c0005f4d:	77 1d                	ja     c0005f6c <ff_oem2uni+0x6c>
c0005f4f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f54:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005f59:	8d 14 00             	lea    edx,[eax+eax*1]
c0005f5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005f60:	01 d0                	add    eax,edx
c0005f62:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005f65:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005f6a:	66 90                	xchg   ax,ax
c0005f6c:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005f71:	83 c4 18             	add    esp,0x18
c0005f74:	c3                   	ret    
c0005f75:	8d 76 00             	lea    esi,[esi+0x0]

c0005f78 <ff_wtoupper>:
c0005f78:	83 ec 10             	sub    esp,0x10
c0005f7b:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005f83:	0f 87 a7 01 00 00    	ja     c0006130 <ff_wtoupper+0x1b8>
c0005f89:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005f8d:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005f92:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005f97:	3d ff 0f 00 00       	cmp    eax,0xfff
c0005f9c:	77 0a                	ja     c0005fa8 <ff_wtoupper+0x30>
c0005f9e:	b8 e0 9c 02 c0       	mov    eax,0xc0029ce0
c0005fa3:	eb 0b                	jmp    c0005fb0 <ff_wtoupper+0x38>
c0005fa5:	8d 76 00             	lea    esi,[esi+0x0]
c0005fa8:	b8 20 9c 02 c0       	mov    eax,0xc0029c20
c0005fad:	8d 76 00             	lea    esi,[esi+0x0]
c0005fb0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005fb4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005fb8:	8d 50 02             	lea    edx,[eax+0x2]
c0005fbb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005fbf:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005fc2:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005fc7:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005fcc:	85 c0                	test   eax,eax
c0005fce:	0f 84 50 01 00 00    	je     c0006124 <ff_wtoupper+0x1ac>
c0005fd4:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005fd9:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005fde:	39 c2                	cmp    edx,eax
c0005fe0:	0f 82 3e 01 00 00    	jb     c0006124 <ff_wtoupper+0x1ac>
c0005fe6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005fea:	8d 50 02             	lea    edx,[eax+0x2]
c0005fed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005ff1:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005ff4:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005ff9:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005ffe:	c1 e8 08             	shr    eax,0x8
c0006001:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0006006:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c000600b:	0f b6 c0             	movzx  eax,al
c000600e:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0006013:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0006018:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c000601d:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0006022:	01 ca                	add    edx,ecx
c0006024:	39 d0                	cmp    eax,edx
c0006026:	0f 8d d4 00 00 00    	jge    c0006100 <ff_wtoupper+0x188>
c000602c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0006031:	83 f8 08             	cmp    eax,0x8
c0006034:	0f 87 e6 00 00 00    	ja     c0006120 <ff_wtoupper+0x1a8>
c000603a:	8b 04 85 e0 9b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6420]
c0006041:	ff e0                	jmp    eax
c0006043:	90                   	nop
c0006044:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0006049:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c000604e:	29 c2                	sub    edx,eax
c0006050:	89 d0                	mov    eax,edx
c0006052:	8d 14 00             	lea    edx,[eax+eax*1]
c0006055:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006059:	01 d0                	add    eax,edx
c000605b:	66 8b 00             	mov    ax,WORD PTR [eax]
c000605e:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006063:	e9 94 00 00 00       	jmp    c00060fc <ff_wtoupper+0x184>
c0006068:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c000606d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006071:	89 d1                	mov    ecx,edx
c0006073:	29 c1                	sub    ecx,eax
c0006075:	89 c8                	mov    eax,ecx
c0006077:	83 e0 01             	and    eax,0x1
c000607a:	89 c2                	mov    edx,eax
c000607c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0006081:	29 d0                	sub    eax,edx
c0006083:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006088:	eb 72                	jmp    c00060fc <ff_wtoupper+0x184>
c000608a:	66 90                	xchg   ax,ax
c000608c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0006091:	83 e8 10             	sub    eax,0x10
c0006094:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006099:	eb 61                	jmp    c00060fc <ff_wtoupper+0x184>
c000609b:	90                   	nop
c000609c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060a1:	83 e8 20             	sub    eax,0x20
c00060a4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060a9:	eb 51                	jmp    c00060fc <ff_wtoupper+0x184>
c00060ab:	90                   	nop
c00060ac:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060b1:	83 e8 30             	sub    eax,0x30
c00060b4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060b9:	eb 41                	jmp    c00060fc <ff_wtoupper+0x184>
c00060bb:	90                   	nop
c00060bc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060c1:	83 e8 1a             	sub    eax,0x1a
c00060c4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060c9:	eb 31                	jmp    c00060fc <ff_wtoupper+0x184>
c00060cb:	90                   	nop
c00060cc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060d1:	83 c0 08             	add    eax,0x8
c00060d4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060d9:	eb 21                	jmp    c00060fc <ff_wtoupper+0x184>
c00060db:	90                   	nop
c00060dc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060e1:	83 e8 50             	sub    eax,0x50
c00060e4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060e9:	eb 11                	jmp    c00060fc <ff_wtoupper+0x184>
c00060eb:	90                   	nop
c00060ec:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060f1:	2d 60 1c 00 00       	sub    eax,0x1c60
c00060f6:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060fb:	90                   	nop
c00060fc:	eb 22                	jmp    c0006120 <ff_wtoupper+0x1a8>
c00060fe:	66 90                	xchg   ax,ax
c0006100:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0006105:	85 c0                	test   eax,eax
c0006107:	0f 85 a7 fe ff ff    	jne    c0005fb4 <ff_wtoupper+0x3c>
c000610d:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0006112:	d1 e0                	shl    eax,1
c0006114:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0006118:	e9 97 fe ff ff       	jmp    c0005fb4 <ff_wtoupper+0x3c>
c000611d:	8d 76 00             	lea    esi,[esi+0x0]
c0006120:	90                   	nop
c0006121:	8d 76 00             	lea    esi,[esi+0x0]
c0006124:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0006129:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000612d:	8d 76 00             	lea    esi,[esi+0x0]
c0006130:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006134:	83 c4 10             	add    esp,0x10
c0006137:	c3                   	ret    

c0006138 <utf2ucs>:
c0006138:	57                   	push   edi
c0006139:	31 c9                	xor    ecx,ecx
c000613b:	56                   	push   esi
c000613c:	89 d7                	mov    edi,edx
c000613e:	53                   	push   ebx
c000613f:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c0006143:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0006147:	89 de                	mov    esi,ebx
c0006149:	c1 fe 08             	sar    esi,0x8
c000614c:	89 f2                	mov    edx,esi
c000614e:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c0006151:	41                   	inc    ecx
c0006152:	85 db                	test   ebx,ebx
c0006154:	75 e9                	jne    c000613f <utf2ucs+0x7>
c0006156:	5b                   	pop    ebx
c0006157:	5e                   	pop    esi
c0006158:	5f                   	pop    edi
c0006159:	c3                   	ret    

c000615a <ucs2utfn>:
c000615a:	83 e1 fe             	and    ecx,0xfffffffe
c000615d:	01 d1                	add    ecx,edx
c000615f:	39 d1                	cmp    ecx,edx
c0006161:	75 04                	jne    c0006167 <ucs2utfn+0xd>
c0006163:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006166:	c3                   	ret    
c0006167:	57                   	push   edi
c0006168:	56                   	push   esi
c0006169:	53                   	push   ebx
c000616a:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c000616d:	83 c2 02             	add    edx,0x2
c0006170:	89 de                	mov    esi,ebx
c0006172:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0006176:	c1 e6 08             	shl    esi,0x8
c0006179:	09 f3                	or     ebx,esi
c000617b:	83 fb 3b             	cmp    ebx,0x3b
c000617e:	74 50                	je     c00061d0 <ucs2utfn+0x76>
c0006180:	83 fb 7f             	cmp    ebx,0x7f
c0006183:	7f 05                	jg     c000618a <ucs2utfn+0x30>
c0006185:	88 18                	mov    BYTE PTR [eax],bl
c0006187:	40                   	inc    eax
c0006188:	eb 42                	jmp    c00061cc <ucs2utfn+0x72>
c000618a:	89 df                	mov    edi,ebx
c000618c:	89 de                	mov    esi,ebx
c000618e:	c1 fe 06             	sar    esi,0x6
c0006191:	83 e7 3f             	and    edi,0x3f
c0006194:	83 cf 80             	or     edi,0xffffff80
c0006197:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c000619d:	7f 12                	jg     c00061b1 <ucs2utfn+0x57>
c000619f:	83 ce c0             	or     esi,0xffffffc0
c00061a2:	83 c0 02             	add    eax,0x2
c00061a5:	89 f3                	mov    ebx,esi
c00061a7:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c00061aa:	89 fb                	mov    ebx,edi
c00061ac:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c00061af:	eb 1b                	jmp    c00061cc <ucs2utfn+0x72>
c00061b1:	c1 fb 0c             	sar    ebx,0xc
c00061b4:	83 e6 3f             	and    esi,0x3f
c00061b7:	83 cb e0             	or     ebx,0xffffffe0
c00061ba:	83 ce 80             	or     esi,0xffffff80
c00061bd:	88 18                	mov    BYTE PTR [eax],bl
c00061bf:	89 f3                	mov    ebx,esi
c00061c1:	83 c0 03             	add    eax,0x3
c00061c4:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c00061c7:	89 fb                	mov    ebx,edi
c00061c9:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c00061cc:	39 d1                	cmp    ecx,edx
c00061ce:	75 9a                	jne    c000616a <ucs2utfn+0x10>
c00061d0:	5b                   	pop    ebx
c00061d1:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00061d4:	5e                   	pop    esi
c00061d5:	5f                   	pop    edi
c00061d6:	c3                   	ret    

c00061d7 <isjoliet>:
c00061d7:	31 d2                	xor    edx,edx
c00061d9:	80 38 25             	cmp    BYTE PTR [eax],0x25
c00061dc:	75 26                	jne    c0006204 <isjoliet+0x2d>
c00061de:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c00061e2:	75 20                	jne    c0006204 <isjoliet+0x2d>
c00061e4:	0f be 40 02          	movsx  eax,BYTE PTR [eax+0x2]
c00061e8:	ba 02 00 00 00       	mov    edx,0x2
c00061ed:	83 f8 43             	cmp    eax,0x43
c00061f0:	74 12                	je     c0006204 <isjoliet+0x2d>
c00061f2:	83 f8 45             	cmp    eax,0x45
c00061f5:	ba 03 00 00 00       	mov    edx,0x3
c00061fa:	74 08                	je     c0006204 <isjoliet+0x2d>
c00061fc:	31 d2                	xor    edx,edx
c00061fe:	83 f8 40             	cmp    eax,0x40
c0006201:	0f 94 c2             	sete   dl
c0006204:	89 d0                	mov    eax,edx
c0006206:	c3                   	ret    

c0006207 <htohl_32>:
c0006207:	8b 00                	mov    eax,DWORD PTR [eax]
c0006209:	c3                   	ret    

c000620a <iso_733>:
c000620a:	eb fb                	jmp    c0006207 <htohl_32>

c000620c <bgrad_cache>:
c000620c:	83 fa 0e             	cmp    edx,0xe
c000620f:	77 16                	ja     c0006227 <bgrad_cache+0x1b>
c0006211:	53                   	push   ebx
c0006212:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c0006215:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c0006219:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c000621c:	42                   	inc    edx
c000621d:	83 fa 0f             	cmp    edx,0xf
c0006220:	75 f3                	jne    c0006215 <bgrad_cache+0x9>
c0006222:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0006225:	5b                   	pop    ebx
c0006226:	c3                   	ret    
c0006227:	c3                   	ret    

c0006228 <ucscompare>:
c0006228:	55                   	push   ebp
c0006229:	57                   	push   edi
c000622a:	89 c7                	mov    edi,eax
c000622c:	56                   	push   esi
c000622d:	89 d6                	mov    esi,edx
c000622f:	53                   	push   ebx
c0006230:	31 d2                	xor    edx,edx
c0006232:	83 ec 1c             	sub    esp,0x1c
c0006235:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c0006239:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c000623e:	c1 e3 08             	shl    ebx,0x8
c0006241:	09 c3                	or     ebx,eax
c0006243:	39 ca                	cmp    edx,ecx
c0006245:	7d 42                	jge    c0006289 <ucscompare+0x61>
c0006247:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000624b:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c000624f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0006253:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c0006258:	c1 e0 08             	shl    eax,0x8
c000625b:	09 e8                	or     eax,ebp
c000625d:	83 f8 3b             	cmp    eax,0x3b
c0006260:	74 27                	je     c0006289 <ucscompare+0x61>
c0006262:	83 ec 0c             	sub    esp,0xc
c0006265:	50                   	push   eax
c0006266:	e8 15 a7 ff ff       	call   c0000980 <tolower>
c000626b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000626e:	89 c5                	mov    ebp,eax
c0006270:	e8 0b a7 ff ff       	call   c0000980 <tolower>
c0006275:	83 c4 10             	add    esp,0x10
c0006278:	39 c5                	cmp    ebp,eax
c000627a:	75 20                	jne    c000629c <ucscompare+0x74>
c000627c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006280:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006284:	83 c2 02             	add    edx,0x2
c0006287:	eb ac                	jmp    c0006235 <ucscompare+0xd>
c0006289:	83 fb 2f             	cmp    ebx,0x2f
c000628c:	0f 95 c2             	setne  dl
c000628f:	31 c0                	xor    eax,eax
c0006291:	85 db                	test   ebx,ebx
c0006293:	0f 95 c0             	setne  al
c0006296:	21 d0                	and    eax,edx
c0006298:	f7 d8                	neg    eax
c000629a:	eb 03                	jmp    c000629f <ucscompare+0x77>
c000629c:	83 c8 ff             	or     eax,0xffffffff
c000629f:	83 c4 1c             	add    esp,0x1c
c00062a2:	5b                   	pop    ebx
c00062a3:	5e                   	pop    esi
c00062a4:	5f                   	pop    edi
c00062a5:	5d                   	pop    ebp
c00062a6:	c3                   	ret    

c00062a7 <fncompare>:
c00062a7:	55                   	push   ebp
c00062a8:	57                   	push   edi
c00062a9:	89 c7                	mov    edi,eax
c00062ab:	56                   	push   esi
c00062ac:	89 ce                	mov    esi,ecx
c00062ae:	53                   	push   ebx
c00062af:	31 db                	xor    ebx,ebx
c00062b1:	83 ec 1c             	sub    esp,0x1c
c00062b4:	39 d3                	cmp    ebx,edx
c00062b6:	7d 45                	jge    c00062fd <fncompare+0x56>
c00062b8:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c00062bc:	83 f8 3b             	cmp    eax,0x3b
c00062bf:	74 3c                	je     c00062fd <fncompare+0x56>
c00062c1:	83 f8 2e             	cmp    eax,0x2e
c00062c4:	75 0e                	jne    c00062d4 <fncompare+0x2d>
c00062c6:	8d 4a ff             	lea    ecx,[edx-0x1]
c00062c9:	39 d9                	cmp    ecx,ebx
c00062cb:	74 30                	je     c00062fd <fncompare+0x56>
c00062cd:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c00062d2:	74 29                	je     c00062fd <fncompare+0x56>
c00062d4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00062d8:	83 ec 0c             	sub    esp,0xc
c00062db:	50                   	push   eax
c00062dc:	e8 9f a6 ff ff       	call   c0000980 <tolower>
c00062e1:	89 c5                	mov    ebp,eax
c00062e3:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c00062e7:	89 04 24             	mov    DWORD PTR [esp],eax
c00062ea:	e8 91 a6 ff ff       	call   c0000980 <tolower>
c00062ef:	83 c4 10             	add    esp,0x10
c00062f2:	39 c5                	cmp    ebp,eax
c00062f4:	75 1e                	jne    c0006314 <fncompare+0x6d>
c00062f6:	43                   	inc    ebx
c00062f7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00062fb:	eb b7                	jmp    c00062b4 <fncompare+0xd>
c00062fd:	0f be 14 1e          	movsx  edx,BYTE PTR [esi+ebx*1]
c0006301:	83 fa 2f             	cmp    edx,0x2f
c0006304:	0f 95 c1             	setne  cl
c0006307:	31 c0                	xor    eax,eax
c0006309:	85 d2                	test   edx,edx
c000630b:	0f 95 c0             	setne  al
c000630e:	21 c8                	and    eax,ecx
c0006310:	f7 d8                	neg    eax
c0006312:	eb 03                	jmp    c0006317 <fncompare+0x70>
c0006314:	83 c8 ff             	or     eax,0xffffffff
c0006317:	83 c4 1c             	add    esp,0x1c
c000631a:	5b                   	pop    ebx
c000631b:	5e                   	pop    esi
c000631c:	5f                   	pop    edi
c000631d:	5d                   	pop    ebp
c000631e:	c3                   	ret    

c000631f <bclear_cache>:
c000631f:	83 ec 18             	sub    esp,0x18
c0006322:	68 e0 9f 02 c0       	push   0xc0029fe0
c0006327:	e8 9c 92 01 00       	call   c001f5c8 <iso_kprintf>
c000632c:	83 c4 10             	add    esp,0x10
c000632f:	31 c0                	xor    eax,eax
c0006331:	8b 14 85 20 20 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcdfe0]
c0006338:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c000633e:	8b 14 85 80 20 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcdf80]
c0006345:	40                   	inc    eax
c0006346:	83 f8 10             	cmp    eax,0x10
c0006349:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c000634f:	75 e0                	jne    c0006331 <bclear_cache+0x12>
c0006351:	83 c4 0c             	add    esp,0xc
c0006354:	c3                   	ret    

c0006355 <bclear>:
c0006355:	eb c8                	jmp    c000631f <bclear_cache>

c0006357 <iso_break_all>:
c0006357:	83 ec 18             	sub    esp,0x18
c000635a:	68 ee 9f 02 c0       	push   0xc0029fee
c000635f:	e8 64 92 01 00       	call   c001f5c8 <iso_kprintf>
c0006364:	83 c4 10             	add    esp,0x10
c0006367:	31 c0                	xor    eax,eax
c0006369:	c7 80 d0 25 03 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffcda30],0x1
c0006373:	05 94 00 00 00       	add    eax,0x94
c0006378:	3d 40 09 00 00       	cmp    eax,0x940
c000637d:	75 ea                	jne    c0006369 <iso_break_all+0x12>
c000637f:	83 c4 0c             	add    esp,0xc
c0006382:	c3                   	ret    

c0006383 <isoReadDiscSector>:
c0006383:	83 ec 0c             	sub    esp,0xc
c0006386:	0f be 05 60 20 03 c0 	movsx  eax,BYTE PTR ds:0xc0032060
c000638d:	50                   	push   eax
c000638e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006392:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006396:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000639a:	e8 cd 91 01 00       	call   c001f56c <isoReadDiscSectorHelper>
c000639f:	83 c4 1c             	add    esp,0x1c
c00063a2:	c3                   	ret    

c00063a3 <bread_cache>:
c00063a3:	55                   	push   ebp
c00063a4:	57                   	push   edi
c00063a5:	89 d7                	mov    edi,edx
c00063a7:	56                   	push   esi
c00063a8:	ba 0f 00 00 00       	mov    edx,0xf
c00063ad:	53                   	push   ebx
c00063ae:	89 c6                	mov    esi,eax
c00063b0:	83 ec 0c             	sub    esp,0xc
c00063b3:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c00063b6:	39 38                	cmp    DWORD PTR [eax],edi
c00063b8:	74 3c                	je     c00063f6 <bread_cache+0x53>
c00063ba:	4a                   	dec    edx
c00063bb:	83 fa ff             	cmp    edx,0xffffffff
c00063be:	75 f3                	jne    c00063b3 <bread_cache+0x10>
c00063c0:	31 db                	xor    ebx,ebx
c00063c2:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c00063c5:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c00063c8:	74 08                	je     c00063d2 <bread_cache+0x2f>
c00063ca:	43                   	inc    ebx
c00063cb:	83 fb 10             	cmp    ebx,0x10
c00063ce:	75 f2                	jne    c00063c2 <bread_cache+0x1f>
c00063d0:	31 db                	xor    ebx,ebx
c00063d2:	50                   	push   eax
c00063d3:	6a 01                	push   0x1
c00063d5:	57                   	push   edi
c00063d6:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c00063d9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00063dc:	83 c0 04             	add    eax,0x4
c00063df:	50                   	push   eax
c00063e0:	e8 9e ff ff ff       	call   c0006383 <isoReadDiscSector>
c00063e5:	83 c4 10             	add    esp,0x10
c00063e8:	83 c9 ff             	or     ecx,0xffffffff
c00063eb:	85 c0                	test   eax,eax
c00063ed:	78 13                	js     c0006402 <bread_cache+0x5f>
c00063ef:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00063f2:	89 da                	mov    edx,ebx
c00063f4:	89 38                	mov    DWORD PTR [eax],edi
c00063f6:	89 f0                	mov    eax,esi
c00063f8:	e8 0f fe ff ff       	call   c000620c <bgrad_cache>
c00063fd:	b9 0f 00 00 00       	mov    ecx,0xf
c0006402:	83 c4 0c             	add    esp,0xc
c0006405:	89 c8                	mov    eax,ecx
c0006407:	5b                   	pop    ebx
c0006408:	5e                   	pop    esi
c0006409:	5f                   	pop    edi
c000640a:	5d                   	pop    ebp
c000640b:	c3                   	ret    

c000640c <biread>:
c000640c:	89 c2                	mov    edx,eax
c000640e:	b8 80 20 03 c0       	mov    eax,0xc0032080
c0006413:	eb 8e                	jmp    c00063a3 <bread_cache>

c0006415 <bdread>:
c0006415:	89 c2                	mov    edx,eax
c0006417:	b8 20 20 03 c0       	mov    eax,0xc0032020
c000641c:	eb 85                	jmp    c00063a3 <bread_cache>

c000641e <strnicmp>:
c000641e:	55                   	push   ebp
c000641f:	57                   	push   edi
c0006420:	31 ff                	xor    edi,edi
c0006422:	56                   	push   esi
c0006423:	53                   	push   ebx
c0006424:	83 ec 0c             	sub    esp,0xc
c0006427:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000642b:	3b 7c 24 28          	cmp    edi,DWORD PTR [esp+0x28]
c000642f:	74 43                	je     c0006474 <strnicmp+0x56>
c0006431:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006435:	0f be 04 38          	movsx  eax,BYTE PTR [eax+edi*1]
c0006439:	85 c0                	test   eax,eax
c000643b:	74 37                	je     c0006474 <strnicmp+0x56>
c000643d:	0f be 14 3e          	movsx  edx,BYTE PTR [esi+edi*1]
c0006441:	85 d2                	test   edx,edx
c0006443:	74 2f                	je     c0006474 <strnicmp+0x56>
c0006445:	8d 6f 01             	lea    ebp,[edi+0x1]
c0006448:	39 d0                	cmp    eax,edx
c000644a:	75 04                	jne    c0006450 <strnicmp+0x32>
c000644c:	89 ef                	mov    edi,ebp
c000644e:	eb db                	jmp    c000642b <strnicmp+0xd>
c0006450:	83 ec 0c             	sub    esp,0xc
c0006453:	50                   	push   eax
c0006454:	e8 27 a5 ff ff       	call   c0000980 <tolower>
c0006459:	89 c3                	mov    ebx,eax
c000645b:	0f be 04 3e          	movsx  eax,BYTE PTR [esi+edi*1]
c000645f:	89 ef                	mov    edi,ebp
c0006461:	89 04 24             	mov    DWORD PTR [esp],eax
c0006464:	e8 17 a5 ff ff       	call   c0000980 <tolower>
c0006469:	83 c4 10             	add    esp,0x10
c000646c:	29 c3                	sub    ebx,eax
c000646e:	89 d8                	mov    eax,ebx
c0006470:	74 b9                	je     c000642b <strnicmp+0xd>
c0006472:	eb 02                	jmp    c0006476 <strnicmp+0x58>
c0006474:	31 c0                	xor    eax,eax
c0006476:	83 c4 0c             	add    esp,0xc
c0006479:	5b                   	pop    ebx
c000647a:	5e                   	pop    esi
c000647b:	5f                   	pop    edi
c000647c:	5d                   	pop    ebp
c000647d:	c3                   	ret    

c000647e <find_object>:
c000647e:	55                   	push   ebp
c000647f:	57                   	push   edi
c0006480:	89 c7                	mov    edi,eax
c0006482:	56                   	push   esi
c0006483:	53                   	push   ebx
c0006484:	89 d3                	mov    ebx,edx
c0006486:	81 ec 2c 01 00 00    	sub    esp,0x12c
c000648c:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0006490:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0006497:	83 3d b4 2e 03 c0 00 	cmp    DWORD PTR ds:0xc0032eb4,0x0
c000649e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00064a2:	74 0b                	je     c00064af <find_object+0x31>
c00064a4:	8d 44 24 20          	lea    eax,[esp+0x20]
c00064a8:	89 fa                	mov    edx,edi
c00064aa:	e8 89 fc ff ff       	call   c0006138 <utf2ucs>
c00064af:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c00064b2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00064b6:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00064bb:	7e 11                	jle    c00064ce <find_object+0x50>
c00064bd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00064c1:	e8 46 ff ff ff       	call   c000640c <biread>
c00064c6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00064ca:	85 c0                	test   eax,eax
c00064cc:	79 07                	jns    c00064d5 <find_object+0x57>
c00064ce:	31 db                	xor    ebx,ebx
c00064d0:	e9 47 01 00 00       	jmp    c000661c <find_object+0x19e>
c00064d5:	31 ed                	xor    ebp,ebp
c00064d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00064db:	8b 04 85 80 20 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcdf80]
c00064e2:	8d 5c 28 04          	lea    ebx,[eax+ebp*1+0x4]
c00064e6:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c00064e9:	85 f6                	test   esi,esi
c00064eb:	75 0e                	jne    c00064fb <find_object+0x7d>
c00064ed:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00064f1:	81 6c 24 08 00 08 00 00 	sub    DWORD PTR [esp+0x8],0x800
c00064f9:	eb bb                	jmp    c00064b6 <find_object+0x38>
c00064fb:	8b 0d b4 2e 03 c0    	mov    ecx,DWORD PTR ds:0xc0032eb4
c0006501:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c0006505:	85 c9                	test   ecx,ecx
c0006507:	89 d0                	mov    eax,edx
c0006509:	74 2b                	je     c0006536 <find_object+0xb8>
c000650b:	8d 43 21             	lea    eax,[ebx+0x21]
c000650e:	89 d1                	mov    ecx,edx
c0006510:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006514:	e8 0f fd ff ff       	call   c0006228 <ucscompare>
c0006519:	85 c0                	test   eax,eax
c000651b:	0f 84 cd 00 00 00    	je     c00065ee <find_object+0x170>
c0006521:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c0006524:	01 c5                	add    ebp,eax
c0006526:	81 fd ff 07 00 00    	cmp    ebp,0x7ff
c000652c:	7f bf                	jg     c00064ed <find_object+0x6f>
c000652e:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0006532:	7f a3                	jg     c00064d7 <find_object+0x59>
c0006534:	eb b7                	jmp    c00064ed <find_object+0x6f>
c0006536:	29 d6                	sub    esi,edx
c0006538:	a8 01                	test   al,0x1
c000653a:	8d 54 13 21          	lea    edx,[ebx+edx*1+0x21]
c000653e:	74 05                	je     c0006545 <find_object+0xc7>
c0006540:	83 ee 21             	sub    esi,0x21
c0006543:	eb 6a                	jmp    c00065af <find_object+0x131>
c0006545:	42                   	inc    edx
c0006546:	83 ee 22             	sub    esi,0x22
c0006549:	eb 64                	jmp    c00065af <find_object+0x131>
c000654b:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c000654e:	48                   	dec    eax
c000654f:	3c 01                	cmp    al,0x1
c0006551:	77 61                	ja     c00065b4 <find_object+0x136>
c0006553:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006557:	50                   	push   eax
c0006558:	6a 02                	push   0x2
c000655a:	68 fd 9f 02 c0       	push   0xc0029ffd
c000655f:	52                   	push   edx
c0006560:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0006564:	e8 a7 a2 ff ff       	call   c0000810 <strncmp>
c0006569:	83 c4 10             	add    esp,0x10
c000656c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006570:	85 c0                	test   eax,eax
c0006572:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006576:	75 2f                	jne    c00065a7 <find_object+0x129>
c0006578:	0f be 4a 02          	movsx  ecx,BYTE PTR [edx+0x2]
c000657c:	50                   	push   eax
c000657d:	8d 42 05             	lea    eax,[edx+0x5]
c0006580:	83 e9 05             	sub    ecx,0x5
c0006583:	51                   	push   ecx
c0006584:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0006588:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000658c:	50                   	push   eax
c000658d:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006591:	50                   	push   eax
c0006592:	e8 f9 a0 ff ff       	call   c0000690 <strncpy>
c0006597:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000659b:	c6 44 0c 30 00       	mov    BYTE PTR [esp+ecx*1+0x30],0x0
c00065a0:	83 c4 10             	add    esp,0x10
c00065a3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00065a7:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c00065ab:	29 c6                	sub    esi,eax
c00065ad:	01 c2                	add    edx,eax
c00065af:	83 fe 03             	cmp    esi,0x3
c00065b2:	7f 97                	jg     c000654b <find_object+0xcd>
c00065b4:	85 c9                	test   ecx,ecx
c00065b6:	7e 40                	jle    c00065f8 <find_object+0x17a>
c00065b8:	51                   	push   ecx
c00065b9:	51                   	push   ecx
c00065ba:	6a 2f                	push   0x2f
c00065bc:	57                   	push   edi
c00065bd:	e8 0e a2 ff ff       	call   c00007d0 <strchr>
c00065c2:	83 c4 10             	add    esp,0x10
c00065c5:	85 c0                	test   eax,eax
c00065c7:	74 04                	je     c00065cd <find_object+0x14f>
c00065c9:	29 f8                	sub    eax,edi
c00065cb:	eb 0c                	jmp    c00065d9 <find_object+0x15b>
c00065cd:	83 ec 0c             	sub    esp,0xc
c00065d0:	57                   	push   edi
c00065d1:	e8 aa 9f ff ff       	call   c0000580 <strlen>
c00065d6:	83 c4 10             	add    esp,0x10
c00065d9:	52                   	push   edx
c00065da:	50                   	push   eax
c00065db:	57                   	push   edi
c00065dc:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00065e0:	50                   	push   eax
c00065e1:	e8 38 fe ff ff       	call   c000641e <strnicmp>
c00065e6:	83 c4 10             	add    esp,0x10
c00065e9:	e9 2b ff ff ff       	jmp    c0006519 <find_object+0x9b>
c00065ee:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00065f2:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00065f6:	eb 1e                	jmp    c0006616 <find_object+0x198>
c00065f8:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c00065fc:	8d 43 21             	lea    eax,[ebx+0x21]
c00065ff:	89 f9                	mov    ecx,edi
c0006601:	e8 a1 fc ff ff       	call   c00062a7 <fncompare>
c0006606:	85 c0                	test   eax,eax
c0006608:	0f 85 13 ff ff ff    	jne    c0006521 <find_object+0xa3>
c000660e:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c0006612:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0006616:	0f 85 05 ff ff ff    	jne    c0006521 <find_object+0xa3>
c000661c:	81 c4 2c 01 00 00    	add    esp,0x12c
c0006622:	89 d8                	mov    eax,ebx
c0006624:	5b                   	pop    ebx
c0006625:	5e                   	pop    esi
c0006626:	5f                   	pop    edi
c0006627:	5d                   	pop    ebp
c0006628:	c3                   	ret    

c0006629 <find_object_path>:
c0006629:	55                   	push   ebp
c000662a:	57                   	push   edi
c000662b:	89 d7                	mov    edi,edx
c000662d:	56                   	push   esi
c000662e:	89 c6                	mov    esi,eax
c0006630:	53                   	push   ebx
c0006631:	89 cb                	mov    ebx,ecx
c0006633:	83 ec 0c             	sub    esp,0xc
c0006636:	50                   	push   eax
c0006637:	50                   	push   eax
c0006638:	6a 2f                	push   0x2f
c000663a:	56                   	push   esi
c000663b:	e8 90 a1 ff ff       	call   c00007d0 <strchr>
c0006640:	83 c4 10             	add    esp,0x10
c0006643:	85 c0                	test   eax,eax
c0006645:	89 c5                	mov    ebp,eax
c0006647:	74 3a                	je     c0006683 <find_object_path+0x5a>
c0006649:	39 ee                	cmp    esi,ebp
c000664b:	74 31                	je     c000667e <find_object_path+0x55>
c000664d:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006650:	e8 b5 fb ff ff       	call   c000620a <iso_733>
c0006655:	89 c2                	mov    edx,eax
c0006657:	8d 43 02             	lea    eax,[ebx+0x2]
c000665a:	e8 ab fb ff ff       	call   c000620a <iso_733>
c000665f:	83 ec 0c             	sub    esp,0xc
c0006662:	52                   	push   edx
c0006663:	89 c1                	mov    ecx,eax
c0006665:	ba 01 00 00 00       	mov    edx,0x1
c000666a:	89 f0                	mov    eax,esi
c000666c:	e8 0d fe ff ff       	call   c000647e <find_object>
c0006671:	83 c4 10             	add    esp,0x10
c0006674:	85 c0                	test   eax,eax
c0006676:	89 c3                	mov    ebx,eax
c0006678:	75 04                	jne    c000667e <find_object_path+0x55>
c000667a:	31 db                	xor    ebx,ebx
c000667c:	eb 36                	jmp    c00066b4 <find_object_path+0x8b>
c000667e:	8d 75 01             	lea    esi,[ebp+0x1]
c0006681:	eb b3                	jmp    c0006636 <find_object_path+0xd>
c0006683:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006686:	74 28                	je     c00066b0 <find_object_path+0x87>
c0006688:	8d 43 0a             	lea    eax,[ebx+0xa]
c000668b:	e8 7a fb ff ff       	call   c000620a <iso_733>
c0006690:	89 c2                	mov    edx,eax
c0006692:	8d 43 02             	lea    eax,[ebx+0x2]
c0006695:	e8 70 fb ff ff       	call   c000620a <iso_733>
c000669a:	83 ec 0c             	sub    esp,0xc
c000669d:	52                   	push   edx
c000669e:	89 c1                	mov    ecx,eax
c00066a0:	89 fa                	mov    edx,edi
c00066a2:	89 f0                	mov    eax,esi
c00066a4:	e8 d5 fd ff ff       	call   c000647e <find_object>
c00066a9:	83 c4 10             	add    esp,0x10
c00066ac:	89 c3                	mov    ebx,eax
c00066ae:	eb 04                	jmp    c00066b4 <find_object_path+0x8b>
c00066b0:	85 ff                	test   edi,edi
c00066b2:	74 c6                	je     c000667a <find_object_path+0x51>
c00066b4:	83 c4 0c             	add    esp,0xc
c00066b7:	89 d8                	mov    eax,ebx
c00066b9:	5b                   	pop    ebx
c00066ba:	5e                   	pop    esi
c00066bb:	5f                   	pop    edi
c00066bc:	5d                   	pop    ebp
c00066bd:	c3                   	ret    

c00066be <stricmp>:
c00066be:	57                   	push   edi
c00066bf:	56                   	push   esi
c00066c0:	31 f6                	xor    esi,esi
c00066c2:	53                   	push   ebx
c00066c3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00066c7:	83 ec 0c             	sub    esp,0xc
c00066ca:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00066ce:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00066d2:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00066d6:	46                   	inc    esi
c00066d7:	50                   	push   eax
c00066d8:	e8 83 a2 ff ff       	call   c0000960 <toupper>
c00066dd:	89 04 24             	mov    DWORD PTR [esp],eax
c00066e0:	e8 9b a2 ff ff       	call   c0000980 <tolower>
c00066e5:	89 3c 24             	mov    DWORD PTR [esp],edi
c00066e8:	89 c3                	mov    ebx,eax
c00066ea:	e8 71 a2 ff ff       	call   c0000960 <toupper>
c00066ef:	89 04 24             	mov    DWORD PTR [esp],eax
c00066f2:	e8 89 a2 ff ff       	call   c0000980 <tolower>
c00066f7:	83 c4 10             	add    esp,0x10
c00066fa:	39 c3                	cmp    ebx,eax
c00066fc:	75 04                	jne    c0006702 <stricmp+0x44>
c00066fe:	85 db                	test   ebx,ebx
c0006700:	75 c1                	jne    c00066c3 <stricmp+0x5>
c0006702:	29 c3                	sub    ebx,eax
c0006704:	89 d8                	mov    eax,ebx
c0006706:	5b                   	pop    ebx
c0006707:	5e                   	pop    esi
c0006708:	5f                   	pop    edi
c0006709:	c3                   	ret    

c000670a <iso_open>:
c000670a:	57                   	push   edi
c000670b:	31 c0                	xor    eax,eax
c000670d:	56                   	push   esi
c000670e:	b9 80 2e 03 c0       	mov    ecx,0xc0032e80
c0006713:	53                   	push   ebx
c0006714:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0006719:	0f 95 c0             	setne  al
c000671c:	89 c2                	mov    edx,eax
c000671e:	89 c6                	mov    esi,eax
c0006720:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006724:	e8 00 ff ff ff       	call   c0006629 <find_object_path>
c0006729:	83 ca ff             	or     edx,0xffffffff
c000672c:	85 c0                	test   eax,eax
c000672e:	74 5e                	je     c000678e <iso_open+0x84>
c0006730:	89 c1                	mov    ecx,eax
c0006732:	31 d2                	xor    edx,edx
c0006734:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c000673a:	83 bf 40 25 03 c0 00 	cmp    DWORD PTR [edi-0x3ffcdac0],0x0
c0006741:	75 42                	jne    c0006785 <iso_open+0x7b>
c0006743:	c7 87 40 25 03 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffcdac0],0xffffffff
c000674d:	8d 41 02             	lea    eax,[ecx+0x2]
c0006750:	e8 b5 fa ff ff       	call   c000620a <iso_733>
c0006755:	89 b7 44 25 03 c0    	mov    DWORD PTR [edi-0x3ffcdabc],esi
c000675b:	c7 87 48 25 03 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffcdab8],0x0
c0006765:	89 87 40 25 03 c0    	mov    DWORD PTR [edi-0x3ffcdac0],eax
c000676b:	8d 41 0a             	lea    eax,[ecx+0xa]
c000676e:	e8 97 fa ff ff       	call   c000620a <iso_733>
c0006773:	c7 87 d0 25 03 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffcda30],0x0
c000677d:	89 87 4c 25 03 c0    	mov    DWORD PTR [edi-0x3ffcdab4],eax
c0006783:	eb 09                	jmp    c000678e <iso_open+0x84>
c0006785:	42                   	inc    edx
c0006786:	83 fa 10             	cmp    edx,0x10
c0006789:	75 a9                	jne    c0006734 <iso_open+0x2a>
c000678b:	83 ca ff             	or     edx,0xffffffff
c000678e:	5b                   	pop    ebx
c000678f:	89 d0                	mov    eax,edx
c0006791:	5e                   	pop    esi
c0006792:	5f                   	pop    edi
c0006793:	c3                   	ret    

c0006794 <iso_close>:
c0006794:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006798:	83 f8 0f             	cmp    eax,0xf
c000679b:	7f 10                	jg     c00067ad <iso_close+0x19>
c000679d:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c00067a3:	c7 80 40 25 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffcdac0],0x0
c00067ad:	e9 6d fb ff ff       	jmp    c000631f <bclear_cache>

c00067b2 <iso_read>:
c00067b2:	55                   	push   ebp
c00067b3:	57                   	push   edi
c00067b4:	56                   	push   esi
c00067b5:	53                   	push   ebx
c00067b6:	83 ec 1c             	sub    esp,0x1c
c00067b9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00067bd:	83 fd 0f             	cmp    ebp,0xf
c00067c0:	7e 0a                	jle    c00067cc <iso_read+0x1a>
c00067c2:	83 c8 ff             	or     eax,0xffffffff
c00067c5:	89 c2                	mov    edx,eax
c00067c7:	e9 f4 00 00 00       	jmp    c00068c0 <iso_read+0x10e>
c00067cc:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00067d2:	83 bd 40 25 03 c0 00 	cmp    DWORD PTR [ebp-0x3ffcdac0],0x0
c00067d9:	74 e7                	je     c00067c2 <iso_read+0x10>
c00067db:	8b 95 d0 25 03 c0    	mov    edx,DWORD PTR [ebp-0x3ffcda30]
c00067e1:	85 d2                	test   edx,edx
c00067e3:	75 dd                	jne    c00067c2 <iso_read+0x10>
c00067e5:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00067ea:	0f 84 cd 00 00 00    	je     c00068bd <iso_read+0x10b>
c00067f0:	8b 85 48 25 03 c0    	mov    eax,DWORD PTR [ebp-0x3ffcdab8]
c00067f6:	8b 9d 4c 25 03 c0    	mov    ebx,DWORD PTR [ebp-0x3ffcdab4]
c00067fc:	29 c3                	sub    ebx,eax
c00067fe:	3b 5c 24 38          	cmp    ebx,DWORD PTR [esp+0x38]
c0006802:	89 d9                	mov    ecx,ebx
c0006804:	0f 47 4c 24 38       	cmova  ecx,DWORD PTR [esp+0x38]
c0006809:	85 c9                	test   ecx,ecx
c000680b:	0f 84 ac 00 00 00    	je     c00068bd <iso_read+0x10b>
c0006811:	89 c6                	mov    esi,eax
c0006813:	bb 00 08 00 00       	mov    ebx,0x800
c0006818:	c1 e8 0b             	shr    eax,0xb
c000681b:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006821:	03 85 40 25 03 c0    	add    eax,DWORD PTR [ebp-0x3ffcdac0]
c0006827:	29 f3                	sub    ebx,esi
c0006829:	81 fb 00 08 00 00    	cmp    ebx,0x800
c000682f:	75 3f                	jne    c0006870 <iso_read+0xbe>
c0006831:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006837:	7e 37                	jle    c0006870 <iso_read+0xbe>
c0006839:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c000683f:	be 20 00 00 00       	mov    esi,0x20
c0006844:	7f 05                	jg     c000684b <iso_read+0x99>
c0006846:	89 ce                	mov    esi,ecx
c0006848:	c1 fe 0b             	sar    esi,0xb
c000684b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000684f:	89 f3                	mov    ebx,esi
c0006851:	52                   	push   edx
c0006852:	56                   	push   esi
c0006853:	50                   	push   eax
c0006854:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0006858:	c1 e3 0b             	shl    ebx,0xb
c000685b:	e8 23 fb ff ff       	call   c0006383 <isoReadDiscSector>
c0006860:	83 c4 10             	add    esp,0x10
c0006863:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006867:	85 c0                	test   eax,eax
c0006869:	7f 3d                	jg     c00068a8 <iso_read+0xf6>
c000686b:	e9 52 ff ff ff       	jmp    c00067c2 <iso_read+0x10>
c0006870:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006874:	39 d9                	cmp    ecx,ebx
c0006876:	0f 4e d9             	cmovle ebx,ecx
c0006879:	e8 97 fb ff ff       	call   c0006415 <bdread>
c000687e:	85 c0                	test   eax,eax
c0006880:	0f 88 3c ff ff ff    	js     c00067c2 <iso_read+0x10>
c0006886:	8b 0c 85 20 20 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffcdfe0]
c000688d:	8b 85 48 25 03 c0    	mov    eax,DWORD PTR [ebp-0x3ffcdab8]
c0006893:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0006897:	25 ff 07 00 00       	and    eax,0x7ff
c000689c:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c00068a0:	89 d9                	mov    ecx,ebx
c00068a2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00068a4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00068a8:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c00068ac:	01 da                	add    edx,ebx
c00068ae:	01 9d 48 25 03 c0    	add    DWORD PTR [ebp-0x3ffcdab8],ebx
c00068b4:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00068b8:	e9 28 ff ff ff       	jmp    c00067e5 <iso_read+0x33>
c00068bd:	89 d0                	mov    eax,edx
c00068bf:	99                   	cdq    
c00068c0:	83 c4 1c             	add    esp,0x1c
c00068c3:	5b                   	pop    ebx
c00068c4:	5e                   	pop    esi
c00068c5:	5f                   	pop    edi
c00068c6:	5d                   	pop    ebp
c00068c7:	c3                   	ret    

c00068c8 <iso_seek>:
c00068c8:	55                   	push   ebp
c00068c9:	83 c8 ff             	or     eax,0xffffffff
c00068cc:	57                   	push   edi
c00068cd:	89 c2                	mov    edx,eax
c00068cf:	56                   	push   esi
c00068d0:	53                   	push   ebx
c00068d1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00068d5:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00068d9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00068dd:	83 fe 0f             	cmp    esi,0xf
c00068e0:	7f 65                	jg     c0006947 <iso_seek+0x7f>
c00068e2:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c00068e8:	83 bd 40 25 03 c0 00 	cmp    DWORD PTR [ebp-0x3ffcdac0],0x0
c00068ef:	8d 8d 40 25 03 c0    	lea    ecx,[ebp-0x3ffcdac0]
c00068f5:	74 50                	je     c0006947 <iso_seek+0x7f>
c00068f7:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c00068fe:	75 47                	jne    c0006947 <iso_seek+0x7f>
c0006900:	83 fb 01             	cmp    ebx,0x1
c0006903:	74 0e                	je     c0006913 <iso_seek+0x4b>
c0006905:	83 fb 02             	cmp    ebx,0x2
c0006908:	74 0e                	je     c0006918 <iso_seek+0x50>
c000690a:	85 db                	test   ebx,ebx
c000690c:	75 39                	jne    c0006947 <iso_seek+0x7f>
c000690e:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0006911:	eb 0d                	jmp    c0006920 <iso_seek+0x58>
c0006913:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c0006916:	eb 08                	jmp    c0006920 <iso_seek+0x58>
c0006918:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c000691b:	01 f8                	add    eax,edi
c000691d:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0006920:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c0006926:	8b 88 4c 25 03 c0    	mov    ecx,DWORD PTR [eax-0x3ffcdab4]
c000692c:	05 40 25 03 c0       	add    eax,0xc0032540
c0006931:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c0006934:	76 03                	jbe    c0006939 <iso_seek+0x71>
c0006936:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0006939:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c000693f:	8b 82 48 25 03 c0    	mov    eax,DWORD PTR [edx-0x3ffcdab8]
c0006945:	31 d2                	xor    edx,edx
c0006947:	5b                   	pop    ebx
c0006948:	5e                   	pop    esi
c0006949:	5f                   	pop    edi
c000694a:	5d                   	pop    ebp
c000694b:	c3                   	ret    

c000694c <iso_tell>:
c000694c:	53                   	push   ebx
c000694d:	83 c8 ff             	or     eax,0xffffffff
c0006950:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006954:	89 c2                	mov    edx,eax
c0006956:	83 f9 0f             	cmp    ecx,0xf
c0006959:	7f 20                	jg     c000697b <iso_tell+0x2f>
c000695b:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c0006961:	83 bb 40 25 03 c0 00 	cmp    DWORD PTR [ebx-0x3ffcdac0],0x0
c0006968:	74 11                	je     c000697b <iso_tell+0x2f>
c000696a:	83 bb d0 25 03 c0 00 	cmp    DWORD PTR [ebx-0x3ffcda30],0x0
c0006971:	75 08                	jne    c000697b <iso_tell+0x2f>
c0006973:	8b 83 48 25 03 c0    	mov    eax,DWORD PTR [ebx-0x3ffcdab8]
c0006979:	31 d2                	xor    edx,edx
c000697b:	5b                   	pop    ebx
c000697c:	c3                   	ret    

c000697d <iso_total>:
c000697d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006981:	83 c8 ff             	or     eax,0xffffffff
c0006984:	83 fa 0f             	cmp    edx,0xf
c0006987:	7f 1e                	jg     c00069a7 <iso_total+0x2a>
c0006989:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c000698f:	83 ba 40 25 03 c0 00 	cmp    DWORD PTR [edx-0x3ffcdac0],0x0
c0006996:	74 0f                	je     c00069a7 <iso_total+0x2a>
c0006998:	83 ba d0 25 03 c0 00 	cmp    DWORD PTR [edx-0x3ffcda30],0x0
c000699f:	75 06                	jne    c00069a7 <iso_total+0x2a>
c00069a1:	8b 82 4c 25 03 c0    	mov    eax,DWORD PTR [edx-0x3ffcdab4]
c00069a7:	c3                   	ret    

c00069a8 <fn_postprocess>:
c00069a8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00069ac:	89 d0                	mov    eax,edx
c00069ae:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c00069b1:	85 c9                	test   ecx,ecx
c00069b3:	74 08                	je     c00069bd <fn_postprocess+0x15>
c00069b5:	83 f9 3b             	cmp    ecx,0x3b
c00069b8:	74 03                	je     c00069bd <fn_postprocess+0x15>
c00069ba:	40                   	inc    eax
c00069bb:	eb f1                	jmp    c00069ae <fn_postprocess+0x6>
c00069bd:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00069c0:	39 d0                	cmp    eax,edx
c00069c2:	76 0a                	jbe    c00069ce <fn_postprocess+0x26>
c00069c4:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00069c8:	75 04                	jne    c00069ce <fn_postprocess+0x26>
c00069ca:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00069ce:	c3                   	ret    

c00069cf <iso_readdir>:
c00069cf:	55                   	push   ebp
c00069d0:	57                   	push   edi
c00069d1:	56                   	push   esi
c00069d2:	53                   	push   ebx
c00069d3:	83 ec 1c             	sub    esp,0x1c
c00069d6:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00069da:	83 fb 0f             	cmp    ebx,0xf
c00069dd:	7f 28                	jg     c0006a07 <iso_readdir+0x38>
c00069df:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c00069e5:	83 b8 40 25 03 c0 00 	cmp    DWORD PTR [eax-0x3ffcdac0],0x0
c00069ec:	8d b8 40 25 03 c0    	lea    edi,[eax-0x3ffcdac0]
c00069f2:	74 13                	je     c0006a07 <iso_readdir+0x38>
c00069f4:	83 7f 04 00          	cmp    DWORD PTR [edi+0x4],0x0
c00069f8:	74 0d                	je     c0006a07 <iso_readdir+0x38>
c00069fa:	83 bf 90 00 00 00 00 	cmp    DWORD PTR [edi+0x90],0x0
c0006a01:	0f 84 b1 00 00 00    	je     c0006ab8 <iso_readdir+0xe9>
c0006a07:	83 ec 0c             	sub    esp,0xc
c0006a0a:	68 00 a0 02 c0       	push   0xc002a000
c0006a0f:	e8 b4 8b 01 00       	call   c001f5c8 <iso_kprintf>
c0006a14:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006a17:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006a1d:	e8 c2 8b 01 00       	call   c001f5e4 <iso_kprintfd>
c0006a22:	c7 04 24 05 a0 02 c0 	mov    DWORD PTR [esp],0xc002a005
c0006a29:	e8 9a 8b 01 00       	call   c001f5c8 <iso_kprintf>
c0006a2e:	58                   	pop    eax
c0006a2f:	ff b3 40 25 03 c0    	push   DWORD PTR [ebx-0x3ffcdac0]
c0006a35:	e8 aa 8b 01 00       	call   c001f5e4 <iso_kprintfd>
c0006a3a:	c7 04 24 0b a0 02 c0 	mov    DWORD PTR [esp],0xc002a00b
c0006a41:	e8 82 8b 01 00       	call   c001f5c8 <iso_kprintf>
c0006a46:	58                   	pop    eax
c0006a47:	ff b3 44 25 03 c0    	push   DWORD PTR [ebx-0x3ffcdabc]
c0006a4d:	e8 92 8b 01 00       	call   c001f5e4 <iso_kprintfd>
c0006a52:	c7 04 24 11 a0 02 c0 	mov    DWORD PTR [esp],0xc002a011
c0006a59:	e8 6a 8b 01 00       	call   c001f5c8 <iso_kprintf>
c0006a5e:	58                   	pop    eax
c0006a5f:	ff b3 d0 25 03 c0    	push   DWORD PTR [ebx-0x3ffcda30]
c0006a65:	e8 7a 8b 01 00       	call   c001f5e4 <iso_kprintfd>
c0006a6a:	83 c4 10             	add    esp,0x10
c0006a6d:	eb 42                	jmp    c0006ab1 <iso_readdir+0xe2>
c0006a6f:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006a72:	8b 34 85 80 20 03 c0 	mov    esi,DWORD PTR [eax*4-0x3ffcdf80]
c0006a79:	89 d1                	mov    ecx,edx
c0006a7b:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0006a81:	8d 74 0e 04          	lea    esi,[esi+ecx*1+0x4]
c0006a85:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006a88:	75 35                	jne    c0006abf <iso_readdir+0xf0>
c0006a8a:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c0006a90:	81 c2 00 08 00 00    	add    edx,0x800
c0006a96:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0006a99:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006a9c:	3b 57 0c             	cmp    edx,DWORD PTR [edi+0xc]
c0006a9f:	73 1e                	jae    c0006abf <iso_readdir+0xf0>
c0006aa1:	8b 07                	mov    eax,DWORD PTR [edi]
c0006aa3:	c1 ea 0b             	shr    edx,0xb
c0006aa6:	01 d0                	add    eax,edx
c0006aa8:	e8 5f f9 ff ff       	call   c000640c <biread>
c0006aad:	85 c0                	test   eax,eax
c0006aaf:	79 be                	jns    c0006a6f <iso_readdir+0xa0>
c0006ab1:	31 c0                	xor    eax,eax
c0006ab3:	e9 6a 01 00 00       	jmp    c0006c22 <iso_readdir+0x253>
c0006ab8:	31 f6                	xor    esi,esi
c0006aba:	83 c8 ff             	or     eax,0xffffffff
c0006abd:	eb da                	jmp    c0006a99 <iso_readdir+0xca>
c0006abf:	69 d3 94 00 00 00    	imul   edx,ebx,0x94
c0006ac5:	8b ba 48 25 03 c0    	mov    edi,DWORD PTR [edx-0x3ffcdab8]
c0006acb:	81 c2 40 25 03 c0    	add    edx,0xc0032540
c0006ad1:	3b 7a 0c             	cmp    edi,DWORD PTR [edx+0xc]
c0006ad4:	73 db                	jae    c0006ab1 <iso_readdir+0xe2>
c0006ad6:	80 7e 21 00          	cmp    BYTE PTR [esi+0x21],0x0
c0006ada:	75 34                	jne    c0006b10 <iso_readdir+0x141>
c0006adc:	80 7e 20 01          	cmp    BYTE PTR [esi+0x20],0x1
c0006ae0:	75 2e                	jne    c0006b10 <iso_readdir+0x141>
c0006ae2:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0006ae5:	8b 34 85 80 20 03 c0 	mov    esi,DWORD PTR [eax*4-0x3ffcdf80]
c0006aec:	01 f9                	add    ecx,edi
c0006aee:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0006af1:	89 c8                	mov    eax,ecx
c0006af3:	25 ff 07 00 00       	and    eax,0x7ff
c0006af8:	0f b6 44 06 04       	movzx  eax,BYTE PTR [esi+eax*1+0x4]
c0006afd:	01 c8                	add    eax,ecx
c0006aff:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0006b02:	25 ff 07 00 00       	and    eax,0x7ff
c0006b07:	8d 74 06 04          	lea    esi,[esi+eax*1+0x4]
c0006b0b:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006b0e:	74 a1                	je     c0006ab1 <iso_readdir+0xe2>
c0006b10:	69 fb 94 00 00 00    	imul   edi,ebx,0x94
c0006b16:	0f b6 4e 20          	movzx  ecx,BYTE PTR [esi+0x20]
c0006b1a:	83 3d b4 2e 03 c0 00 	cmp    DWORD PTR ds:0xc0032eb4,0x0
c0006b21:	8d 56 21             	lea    edx,[esi+0x21]
c0006b24:	8d af 58 25 03 c0    	lea    ebp,[edi-0x3ffcdaa8]
c0006b2a:	74 0c                	je     c0006b38 <iso_readdir+0x169>
c0006b2c:	89 e8                	mov    eax,ebp
c0006b2e:	e8 27 f6 ff ff       	call   c000615a <ucs2utfn>
c0006b33:	e9 b1 00 00 00       	jmp    c0006be9 <iso_readdir+0x21a>
c0006b38:	50                   	push   eax
c0006b39:	51                   	push   ecx
c0006b3a:	52                   	push   edx
c0006b3b:	55                   	push   ebp
c0006b3c:	e8 4f 9b ff ff       	call   c0000690 <strncpy>
c0006b41:	0f b6 46 20          	movzx  eax,BYTE PTR [esi+0x20]
c0006b45:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0006b48:	c6 84 07 58 25 03 c0 00 	mov    BYTE PTR [edi+eax*1-0x3ffcdaa8],0x0
c0006b50:	e8 53 fe ff ff       	call   c00069a8 <fn_postprocess>
c0006b55:	0f b6 56 20          	movzx  edx,BYTE PTR [esi+0x20]
c0006b59:	83 c4 10             	add    esp,0x10
c0006b5c:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006b5f:	89 d1                	mov    ecx,edx
c0006b61:	29 d0                	sub    eax,edx
c0006b63:	80 e1 01             	and    cl,0x1
c0006b66:	8d 54 16 21          	lea    edx,[esi+edx*1+0x21]
c0006b6a:	74 05                	je     c0006b71 <iso_readdir+0x1a2>
c0006b6c:	83 e8 21             	sub    eax,0x21
c0006b6f:	eb 04                	jmp    c0006b75 <iso_readdir+0x1a6>
c0006b71:	42                   	inc    edx
c0006b72:	83 e8 22             	sub    eax,0x22
c0006b75:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006b79:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006b7f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006b83:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c0006b88:	7e 5f                	jle    c0006be9 <iso_readdir+0x21a>
c0006b8a:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c0006b8d:	48                   	dec    eax
c0006b8e:	3c 01                	cmp    al,0x1
c0006b90:	77 57                	ja     c0006be9 <iso_readdir+0x21a>
c0006b92:	51                   	push   ecx
c0006b93:	6a 02                	push   0x2
c0006b95:	68 fd 9f 02 c0       	push   0xc0029ffd
c0006b9a:	52                   	push   edx
c0006b9b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0006b9f:	e8 6c 9c ff ff       	call   c0000810 <strncmp>
c0006ba4:	83 c4 10             	add    esp,0x10
c0006ba7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006bab:	85 c0                	test   eax,eax
c0006bad:	75 2e                	jne    c0006bdd <iso_readdir+0x20e>
c0006baf:	50                   	push   eax
c0006bb0:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006bb4:	83 e8 05             	sub    eax,0x5
c0006bb7:	50                   	push   eax
c0006bb8:	8d 42 05             	lea    eax,[edx+0x5]
c0006bbb:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0006bbf:	50                   	push   eax
c0006bc0:	55                   	push   ebp
c0006bc1:	e8 ca 9a ff ff       	call   c0000690 <strncpy>
c0006bc6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006bca:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0006bce:	83 c4 10             	add    esp,0x10
c0006bd1:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006bd5:	c6 84 08 53 25 03 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffcdaad],0x0
c0006bdd:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006be1:	29 44 24 04          	sub    DWORD PTR [esp+0x4],eax
c0006be5:	01 c2                	add    edx,eax
c0006be7:	eb 9a                	jmp    c0006b83 <iso_readdir+0x1b4>
c0006be9:	83 c8 ff             	or     eax,0xffffffff
c0006bec:	f6 46 19 02          	test   BYTE PTR [esi+0x19],0x2
c0006bf0:	89 c2                	mov    edx,eax
c0006bf2:	75 0a                	jne    c0006bfe <iso_readdir+0x22f>
c0006bf4:	8d 46 0a             	lea    eax,[esi+0xa]
c0006bf7:	e8 0e f6 ff ff       	call   c000620a <iso_733>
c0006bfc:	31 d2                	xor    edx,edx
c0006bfe:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006c04:	89 83 50 25 03 c0    	mov    DWORD PTR [ebx-0x3ffcdab0],eax
c0006c0a:	89 93 54 25 03 c0    	mov    DWORD PTR [ebx-0x3ffcdaac],edx
c0006c10:	81 c3 40 25 03 c0    	add    ebx,0xc0032540
c0006c16:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006c19:	01 43 08             	add    DWORD PTR [ebx+0x8],eax
c0006c1c:	8d 87 50 25 03 c0    	lea    eax,[edi-0x3ffcdab0]
c0006c22:	83 c4 1c             	add    esp,0x1c
c0006c25:	5b                   	pop    ebx
c0006c26:	5e                   	pop    esi
c0006c27:	5f                   	pop    edi
c0006c28:	5d                   	pop    ebp
c0006c29:	c3                   	ret    

c0006c2a <iso_reset>:
c0006c2a:	83 ec 18             	sub    esp,0x18
c0006c2d:	68 1a a0 02 c0       	push   0xc002a01a
c0006c32:	e8 91 89 01 00       	call   c001f5c8 <iso_kprintf>
c0006c37:	e8 1b f7 ff ff       	call   c0006357 <iso_break_all>
c0006c3c:	e8 14 f7 ff ff       	call   c0006355 <bclear>
c0006c41:	31 c0                	xor    eax,eax
c0006c43:	83 c4 1c             	add    esp,0x1c
c0006c46:	c3                   	ret    

c0006c47 <init_percd>:
c0006c47:	57                   	push   edi
c0006c48:	56                   	push   esi
c0006c49:	53                   	push   ebx
c0006c4a:	bb 01 00 00 00       	mov    ebx,0x1
c0006c4f:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0006c53:	a2 60 20 03 c0       	mov    ds:0xc0032060,al
c0006c58:	e8 cd ff ff ff       	call   c0006c2a <iso_reset>
c0006c5d:	c7 05 b4 2e 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032eb4,0x0
c0006c67:	a1 ac 2e 03 c0       	mov    eax,ds:0xc0032eac
c0006c6c:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006c70:	e8 97 f7 ff ff       	call   c000640c <biread>
c0006c75:	85 c0                	test   eax,eax
c0006c77:	89 c6                	mov    esi,eax
c0006c79:	0f 88 ba 00 00 00    	js     c0006d39 <init_percd+0xf2>
c0006c7f:	8b 04 85 80 20 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcdf80]
c0006c86:	52                   	push   edx
c0006c87:	6a 06                	push   0x6
c0006c89:	68 25 a0 02 c0       	push   0xc002a025
c0006c8e:	83 c0 04             	add    eax,0x4
c0006c91:	50                   	push   eax
c0006c92:	e8 e9 96 ff ff       	call   c0000380 <memcmp>
c0006c97:	83 c4 10             	add    esp,0x10
c0006c9a:	85 c0                	test   eax,eax
c0006c9c:	74 08                	je     c0006ca6 <init_percd+0x5f>
c0006c9e:	43                   	inc    ebx
c0006c9f:	83 fb 04             	cmp    ebx,0x4
c0006ca2:	75 c3                	jne    c0006c67 <init_percd+0x20>
c0006ca4:	eb 1a                	jmp    c0006cc0 <init_percd+0x79>
c0006ca6:	8b 04 b5 80 20 03 c0 	mov    eax,DWORD PTR [esi*4-0x3ffcdf80]
c0006cad:	83 c0 5c             	add    eax,0x5c
c0006cb0:	e8 22 f5 ff ff       	call   c00061d7 <isjoliet>
c0006cb5:	a3 b4 2e 03 c0       	mov    ds:0xc0032eb4,eax
c0006cba:	85 c0                	test   eax,eax
c0006cbc:	74 e0                	je     c0006c9e <init_percd+0x57>
c0006cbe:	eb 3e                	jmp    c0006cfe <init_percd+0xb7>
c0006cc0:	83 3d b4 2e 03 c0 00 	cmp    DWORD PTR ds:0xc0032eb4,0x0
c0006cc7:	75 35                	jne    c0006cfe <init_percd+0xb7>
c0006cc9:	a1 ac 2e 03 c0       	mov    eax,ds:0xc0032eac
c0006cce:	83 c0 10             	add    eax,0x10
c0006cd1:	e8 36 f7 ff ff       	call   c000640c <biread>
c0006cd6:	85 c0                	test   eax,eax
c0006cd8:	89 c6                	mov    esi,eax
c0006cda:	78 5f                	js     c0006d3b <init_percd+0xf4>
c0006cdc:	50                   	push   eax
c0006cdd:	8b 04 b5 80 20 03 c0 	mov    eax,DWORD PTR [esi*4-0x3ffcdf80]
c0006ce4:	83 cb ff             	or     ebx,0xffffffff
c0006ce7:	6a 06                	push   0x6
c0006ce9:	68 2c a0 02 c0       	push   0xc002a02c
c0006cee:	83 c0 04             	add    eax,0x4
c0006cf1:	50                   	push   eax
c0006cf2:	e8 89 96 ff ff       	call   c0000380 <memcmp>
c0006cf7:	83 c4 10             	add    esp,0x10
c0006cfa:	85 c0                	test   eax,eax
c0006cfc:	75 3d                	jne    c0006d3b <init_percd+0xf4>
c0006cfe:	8b 34 b5 80 20 03 c0 	mov    esi,DWORD PTR [esi*4-0x3ffcdf80]
c0006d05:	bf 80 2e 03 c0       	mov    edi,0xc0032e80
c0006d0a:	b9 22 00 00 00       	mov    ecx,0x22
c0006d0f:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006d15:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006d17:	b8 82 2e 03 c0       	mov    eax,0xc0032e82
c0006d1c:	31 db                	xor    ebx,ebx
c0006d1e:	e8 e7 f4 ff ff       	call   c000620a <iso_733>
c0006d23:	a3 a8 2e 03 c0       	mov    ds:0xc0032ea8,eax
c0006d28:	b8 8a 2e 03 c0       	mov    eax,0xc0032e8a
c0006d2d:	e8 d8 f4 ff ff       	call   c000620a <iso_733>
c0006d32:	a3 a4 2e 03 c0       	mov    ds:0xc0032ea4,eax
c0006d37:	eb 02                	jmp    c0006d3b <init_percd+0xf4>
c0006d39:	89 c3                	mov    ebx,eax
c0006d3b:	89 d8                	mov    eax,ebx
c0006d3d:	5b                   	pop    ebx
c0006d3e:	5e                   	pop    esi
c0006d3f:	5f                   	pop    edi
c0006d40:	c3                   	ret    

c0006d41 <iso_ioctl>:
c0006d41:	83 ec 18             	sub    esp,0x18
c0006d44:	68 33 a0 02 c0       	push   0xc002a033
c0006d49:	e8 7a 88 01 00       	call   c001f5c8 <iso_kprintf>
c0006d4e:	e8 d7 fe ff ff       	call   c0006c2a <iso_reset>
c0006d53:	31 c0                	xor    eax,eax
c0006d55:	83 c4 1c             	add    esp,0x1c
c0006d58:	c3                   	ret    

c0006d59 <fs_iso9660_init>:
c0006d59:	53                   	push   ebx
c0006d5a:	31 db                	xor    ebx,ebx
c0006d5c:	83 ec 14             	sub    esp,0x14
c0006d5f:	68 3e a0 02 c0       	push   0xc002a03e
c0006d64:	e8 5f 88 01 00       	call   c001f5c8 <iso_kprintf>
c0006d69:	83 c4 0c             	add    esp,0xc
c0006d6c:	68 40 09 00 00       	push   0x940
c0006d71:	6a 00                	push   0x0
c0006d73:	68 40 25 03 c0       	push   0xc0032540
c0006d78:	e8 73 97 ff ff       	call   c00004f0 <memset>
c0006d7d:	c7 05 40 25 03 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0032540,0xffffffff
c0006d87:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006d8e:	e8 79 93 00 00       	call   c001010c <malloc>
c0006d93:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006d9a:	a3 b0 2e 03 c0       	mov    ds:0xc0032eb0,eax
c0006d9f:	e8 68 93 00 00       	call   c001010c <malloc>
c0006da4:	83 c4 10             	add    esp,0x10
c0006da7:	a3 20 25 03 c0       	mov    ds:0xc0032520,eax
c0006dac:	83 ec 0c             	sub    esp,0xc
c0006daf:	68 04 08 00 00       	push   0x804
c0006db4:	e8 53 93 00 00       	call   c001010c <malloc>
c0006db9:	89 04 9d 80 20 03 c0 	mov    DWORD PTR [ebx*4-0x3ffcdf80],eax
c0006dc0:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006dc6:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006dcd:	e8 3a 93 00 00       	call   c001010c <malloc>
c0006dd2:	83 c4 10             	add    esp,0x10
c0006dd5:	89 04 9d 20 20 03 c0 	mov    DWORD PTR [ebx*4-0x3ffcdfe0],eax
c0006ddc:	43                   	inc    ebx
c0006ddd:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006de3:	83 fb 10             	cmp    ebx,0x10
c0006de6:	75 c4                	jne    c0006dac <fs_iso9660_init+0x53>
c0006de8:	83 c4 08             	add    esp,0x8
c0006deb:	31 c0                	xor    eax,eax
c0006ded:	5b                   	pop    ebx
c0006dee:	c3                   	ret    

c0006def <fs_iso9660_shutdown>:
c0006def:	53                   	push   ebx
c0006df0:	31 db                	xor    ebx,ebx
c0006df2:	83 ec 08             	sub    esp,0x8
c0006df5:	83 ec 0c             	sub    esp,0xc
c0006df8:	ff 34 9d 80 20 03 c0 	push   DWORD PTR [ebx*4-0x3ffcdf80]
c0006dff:	e8 18 93 00 00       	call   c001011c <free>
c0006e04:	58                   	pop    eax
c0006e05:	ff 34 9d 20 20 03 c0 	push   DWORD PTR [ebx*4-0x3ffcdfe0]
c0006e0c:	43                   	inc    ebx
c0006e0d:	e8 0a 93 00 00       	call   c001011c <free>
c0006e12:	83 c4 10             	add    esp,0x10
c0006e15:	83 fb 10             	cmp    ebx,0x10
c0006e18:	75 db                	jne    c0006df5 <fs_iso9660_shutdown+0x6>
c0006e1a:	a1 b0 2e 03 c0       	mov    eax,ds:0xc0032eb0
c0006e1f:	85 c0                	test   eax,eax
c0006e21:	74 0c                	je     c0006e2f <fs_iso9660_shutdown+0x40>
c0006e23:	83 ec 0c             	sub    esp,0xc
c0006e26:	50                   	push   eax
c0006e27:	e8 f0 92 00 00       	call   c001011c <free>
c0006e2c:	83 c4 10             	add    esp,0x10
c0006e2f:	a1 20 25 03 c0       	mov    eax,ds:0xc0032520
c0006e34:	85 c0                	test   eax,eax
c0006e36:	74 0c                	je     c0006e44 <fs_iso9660_shutdown+0x55>
c0006e38:	83 ec 0c             	sub    esp,0xc
c0006e3b:	50                   	push   eax
c0006e3c:	e8 db 92 00 00       	call   c001011c <free>
c0006e41:	83 c4 10             	add    esp,0x10
c0006e44:	c7 05 20 25 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032520,0x0
c0006e4e:	31 c0                	xor    eax,eax
c0006e50:	c7 05 b0 2e 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032eb0,0x0
c0006e5a:	83 c4 08             	add    esp,0x8
c0006e5d:	5b                   	pop    ebx
c0006e5e:	c3                   	ret    

c0006e5f <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0006e5f:	55                   	push   ebp
c0006e60:	57                   	push   edi
c0006e61:	56                   	push   esi
c0006e62:	53                   	push   ebx
c0006e63:	83 ec 20             	sub    esp,0x20
c0006e66:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0006e6a:	c7 44 24 0f 30 31 32 33 	mov    DWORD PTR [esp+0xf],0x33323130
c0006e72:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0006e76:	c7 44 24 13 34 35 36 37 	mov    DWORD PTR [esp+0x13],0x37363534
c0006e7e:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0006e82:	c7 44 24 17 38 39 41 42 	mov    DWORD PTR [esp+0x17],0x42413938
c0006e8a:	c7 44 24 1b 43 44 45 46 	mov    DWORD PTR [esp+0x1b],0x46454443
c0006e92:	89 f7                	mov    edi,esi
c0006e94:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0006e99:	89 eb                	mov    ebx,ebp
c0006e9b:	eb 02                	jmp    c0006e9f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x40>
c0006e9d:	89 c7                	mov    edi,eax
c0006e9f:	31 d2                	xor    edx,edx
c0006ea1:	89 f8                	mov    eax,edi
c0006ea3:	f7 f1                	div    ecx
c0006ea5:	83 c3 01             	add    ebx,0x1
c0006ea8:	39 cf                	cmp    edi,ecx
c0006eaa:	73 f1                	jae    c0006e9d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3e>
c0006eac:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006eaf:	eb 02                	jmp    c0006eb3 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x54>
c0006eb1:	89 c6                	mov    esi,eax
c0006eb3:	31 d2                	xor    edx,edx
c0006eb5:	89 f0                	mov    eax,esi
c0006eb7:	f7 f1                	div    ecx
c0006eb9:	83 eb 01             	sub    ebx,0x1
c0006ebc:	39 ce                	cmp    esi,ecx
c0006ebe:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c0006ec2:	88 13                	mov    BYTE PTR [ebx],dl
c0006ec4:	73 eb                	jae    c0006eb1 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x52>
c0006ec6:	83 c4 20             	add    esp,0x20
c0006ec9:	89 e8                	mov    eax,ebp
c0006ecb:	5b                   	pop    ebx
c0006ecc:	5e                   	pop    esi
c0006ecd:	5f                   	pop    edi
c0006ece:	5d                   	pop    ebp
c0006ecf:	c3                   	ret    

c0006ed0 <Dbg::logc(char)>:
c0006ed0:	53                   	push   ebx
c0006ed1:	83 ec 14             	sub    esp,0x14
c0006ed4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0006ed8:	6a 10                	push   0x10
c0006eda:	e8 35 6d 00 00       	call   c000dc14 <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c0006edf:	83 c4 10             	add    esp,0x10
c0006ee2:	84 c0                	test   al,al
c0006ee4:	75 12                	jne    c0006ef8 <Dbg::logc(char)+0x28>
c0006ee6:	ba fd 03 00 00       	mov    edx,0x3fd
c0006eeb:	ec                   	in     al,dx
c0006eec:	a8 20                	test   al,0x20
c0006eee:	74 fb                	je     c0006eeb <Dbg::logc(char)+0x1b>
c0006ef0:	ba f8 03 00 00       	mov    edx,0x3f8
c0006ef5:	88 d8                	mov    al,bl
c0006ef7:	ee                   	out    dx,al
c0006ef8:	83 c4 08             	add    esp,0x8
c0006efb:	5b                   	pop    ebx
c0006efc:	c3                   	ret    

c0006efd <Dbg::logs(char*)>:
c0006efd:	53                   	push   ebx
c0006efe:	83 ec 08             	sub    esp,0x8
c0006f01:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0006f05:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0006f08:	85 c0                	test   eax,eax
c0006f0a:	74 16                	je     c0006f22 <Dbg::logs(char*)+0x25>
c0006f0c:	83 ec 0c             	sub    esp,0xc
c0006f0f:	83 c3 01             	add    ebx,0x1
c0006f12:	50                   	push   eax
c0006f13:	e8 b8 ff ff ff       	call   c0006ed0 <Dbg::logc(char)>
c0006f18:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0006f1b:	83 c4 10             	add    esp,0x10
c0006f1e:	85 c0                	test   eax,eax
c0006f20:	75 ea                	jne    c0006f0c <Dbg::logs(char*)+0xf>
c0006f22:	83 c4 08             	add    esp,0x8
c0006f25:	5b                   	pop    ebx
c0006f26:	c3                   	ret    

c0006f27 <Dbg::logWriteInt(unsigned int)>:
c0006f27:	83 ec 1c             	sub    esp,0x1c
c0006f2a:	6a 0a                	push   0xa
c0006f2c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0006f30:	50                   	push   eax
c0006f31:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0006f35:	50                   	push   eax
c0006f36:	e8 24 ff ff ff       	call   c0006e5f <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0006f3b:	50                   	push   eax
c0006f3c:	e8 bc ff ff ff       	call   c0006efd <Dbg::logs(char*)>
c0006f41:	83 c4 2c             	add    esp,0x2c
c0006f44:	c3                   	ret    

c0006f45 <Dbg::logWriteIntBase(unsigned int, int)>:
c0006f45:	83 ec 1c             	sub    esp,0x1c
c0006f48:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006f4c:	50                   	push   eax
c0006f4d:	8d 44 24 08          	lea    eax,[esp+0x8]
c0006f51:	50                   	push   eax
c0006f52:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0006f56:	52                   	push   edx
c0006f57:	e8 03 ff ff ff       	call   c0006e5f <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0006f5c:	50                   	push   eax
c0006f5d:	e8 9b ff ff ff       	call   c0006efd <Dbg::logs(char*)>
c0006f62:	83 c4 2c             	add    esp,0x2c
c0006f65:	c3                   	ret    

c0006f66 <Dbg::kprintf(char const*, ...)>:
c0006f66:	55                   	push   ebp
c0006f67:	57                   	push   edi
c0006f68:	56                   	push   esi
c0006f69:	53                   	push   ebx
c0006f6a:	83 ec 1c             	sub    esp,0x1c
c0006f6d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006f71:	85 db                	test   ebx,ebx
c0006f73:	0f 84 4c 01 00 00    	je     c00070c5 <Dbg::kprintf(char const*, ...)+0x15f>
c0006f79:	83 ec 0c             	sub    esp,0xc
c0006f7c:	6a 10                	push   0x10
c0006f7e:	e8 91 6c 00 00       	call   c000dc14 <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c0006f83:	83 c4 10             	add    esp,0x10
c0006f86:	84 c0                	test   al,al
c0006f88:	74 08                	je     c0006f92 <Dbg::kprintf(char const*, ...)+0x2c>
c0006f8a:	83 c4 1c             	add    esp,0x1c
c0006f8d:	5b                   	pop    ebx
c0006f8e:	5e                   	pop    esi
c0006f8f:	5f                   	pop    edi
c0006f90:	5d                   	pop    ebp
c0006f91:	c3                   	ret    
c0006f92:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006f96:	31 ff                	xor    edi,edi
c0006f98:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006f9c:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0006f9f:	85 c0                	test   eax,eax
c0006fa1:	74 e7                	je     c0006f8a <Dbg::kprintf(char const*, ...)+0x24>
c0006fa3:	8d 77 01             	lea    esi,[edi+0x1]
c0006fa6:	83 f8 25             	cmp    eax,0x25
c0006fa9:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c0006fac:	75 4c                	jne    c0006ffa <Dbg::kprintf(char const*, ...)+0x94>
c0006fae:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0006fb1:	83 c7 02             	add    edi,0x2
c0006fb4:	8d 34 3b             	lea    esi,[ebx+edi*1]
c0006fb7:	83 e8 25             	sub    eax,0x25
c0006fba:	0f b6 c0             	movzx  eax,al
c0006fbd:	83 f8 53             	cmp    eax,0x53
c0006fc0:	0f 87 e1 00 00 00    	ja     c00070a7 <Dbg::kprintf(char const*, ...)+0x141>
c0006fc6:	ff 24 85 88 a0 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd5f78]
c0006fcd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006fd1:	83 ec 0c             	sub    esp,0xc
c0006fd4:	89 c8                	mov    eax,ecx
c0006fd6:	83 c1 04             	add    ecx,0x4
c0006fd9:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0006fdd:	8b 00                	mov    eax,DWORD PTR [eax]
c0006fdf:	50                   	push   eax
c0006fe0:	e8 42 ff ff ff       	call   c0006f27 <Dbg::logWriteInt(unsigned int)>
c0006fe5:	83 c4 10             	add    esp,0x10
c0006fe8:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0006feb:	85 c0                	test   eax,eax
c0006fed:	74 9b                	je     c0006f8a <Dbg::kprintf(char const*, ...)+0x24>
c0006fef:	8d 77 01             	lea    esi,[edi+0x1]
c0006ff2:	83 f8 25             	cmp    eax,0x25
c0006ff5:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c0006ff8:	74 b4                	je     c0006fae <Dbg::kprintf(char const*, ...)+0x48>
c0006ffa:	83 ec 0c             	sub    esp,0xc
c0006ffd:	89 f7                	mov    edi,esi
c0006fff:	50                   	push   eax
c0007000:	89 ee                	mov    esi,ebp
c0007002:	e8 c9 fe ff ff       	call   c0006ed0 <Dbg::logc(char)>
c0007007:	83 c4 10             	add    esp,0x10
c000700a:	eb dc                	jmp    c0006fe8 <Dbg::kprintf(char const*, ...)+0x82>
c000700c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007010:	83 ec 0c             	sub    esp,0xc
c0007013:	89 c8                	mov    eax,ecx
c0007015:	83 c1 04             	add    ecx,0x4
c0007018:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000701c:	8b 28                	mov    ebp,DWORD PTR [eax]
c000701e:	55                   	push   ebp
c000701f:	e8 d9 fe ff ff       	call   c0006efd <Dbg::logs(char*)>
c0007024:	83 c4 10             	add    esp,0x10
c0007027:	eb bf                	jmp    c0006fe8 <Dbg::kprintf(char const*, ...)+0x82>
c0007029:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000702d:	83 ec 0c             	sub    esp,0xc
c0007030:	89 d0                	mov    eax,edx
c0007032:	83 c2 04             	add    edx,0x4
c0007035:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0007039:	8b 08                	mov    ecx,DWORD PTR [eax]
c000703b:	51                   	push   ecx
c000703c:	e8 e6 fe ff ff       	call   c0006f27 <Dbg::logWriteInt(unsigned int)>
c0007041:	83 c4 10             	add    esp,0x10
c0007044:	eb a2                	jmp    c0006fe8 <Dbg::kprintf(char const*, ...)+0x82>
c0007046:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000704a:	83 ec 0c             	sub    esp,0xc
c000704d:	89 d0                	mov    eax,edx
c000704f:	83 c2 04             	add    edx,0x4
c0007052:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0007056:	0f be 00             	movsx  eax,BYTE PTR [eax]
c0007059:	50                   	push   eax
c000705a:	e8 71 fe ff ff       	call   c0006ed0 <Dbg::logc(char)>
c000705f:	83 c4 10             	add    esp,0x10
c0007062:	eb 84                	jmp    c0006fe8 <Dbg::kprintf(char const*, ...)+0x82>
c0007064:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007068:	89 c8                	mov    eax,ecx
c000706a:	83 c1 04             	add    ecx,0x4
c000706d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007071:	83 ec 08             	sub    esp,0x8
c0007074:	6a 10                	push   0x10
c0007076:	8b 10                	mov    edx,DWORD PTR [eax]
c0007078:	52                   	push   edx
c0007079:	e8 c7 fe ff ff       	call   c0006f45 <Dbg::logWriteIntBase(unsigned int, int)>
c000707e:	83 c4 10             	add    esp,0x10
c0007081:	e9 62 ff ff ff       	jmp    c0006fe8 <Dbg::kprintf(char const*, ...)+0x82>
c0007086:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000708a:	89 d0                	mov    eax,edx
c000708c:	83 c2 08             	add    edx,0x8
c000708f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007093:	eb dc                	jmp    c0007071 <Dbg::kprintf(char const*, ...)+0x10b>
c0007095:	83 ec 0c             	sub    esp,0xc
c0007098:	6a 25                	push   0x25
c000709a:	e8 31 fe ff ff       	call   c0006ed0 <Dbg::logc(char)>
c000709f:	83 c4 10             	add    esp,0x10
c00070a2:	e9 41 ff ff ff       	jmp    c0006fe8 <Dbg::kprintf(char const*, ...)+0x82>
c00070a7:	83 ec 0c             	sub    esp,0xc
c00070aa:	6a 25                	push   0x25
c00070ac:	e8 1f fe ff ff       	call   c0006ed0 <Dbg::logc(char)>
c00070b1:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c00070b5:	89 04 24             	mov    DWORD PTR [esp],eax
c00070b8:	e8 13 fe ff ff       	call   c0006ed0 <Dbg::logc(char)>
c00070bd:	83 c4 10             	add    esp,0x10
c00070c0:	e9 23 ff ff ff       	jmp    c0006fe8 <Dbg::kprintf(char const*, ...)+0x82>
c00070c5:	83 ec 0c             	sub    esp,0xc
c00070c8:	68 50 a0 02 c0       	push   0xc002a050
c00070cd:	e8 94 fe ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00070d2:	83 c4 10             	add    esp,0x10
c00070d5:	83 c4 1c             	add    esp,0x1c
c00070d8:	5b                   	pop    ebx
c00070d9:	5e                   	pop    esi
c00070da:	5f                   	pop    edi
c00070db:	5d                   	pop    ebp
c00070dc:	c3                   	ret    
c00070dd:	66 90                	xchg   ax,ax
c00070df:	90                   	nop

c00070e0 <KiUbsanPrintDetails(char const*, void*)>:
c00070e0:	83 ec 1c             	sub    esp,0x1c
c00070e3:	83 ec 08             	sub    esp,0x8
c00070e6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00070ea:	68 d8 a1 02 c0       	push   0xc002a1d8
c00070ef:	e8 72 fe ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00070f4:	83 c4 10             	add    esp,0x10
c00070f7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00070fb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00070ff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007103:	8b 00                	mov    eax,DWORD PTR [eax]
c0007105:	83 ec 08             	sub    esp,0x8
c0007108:	50                   	push   eax
c0007109:	68 ec a1 02 c0       	push   0xc002a1ec
c000710e:	e8 53 fe ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0007113:	83 c4 10             	add    esp,0x10
c0007116:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000711a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000711d:	83 ec 08             	sub    esp,0x8
c0007120:	50                   	push   eax
c0007121:	68 f6 a1 02 c0       	push   0xc002a1f6
c0007126:	e8 3b fe ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000712b:	83 c4 10             	add    esp,0x10
c000712e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007132:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0007135:	83 ec 08             	sub    esp,0x8
c0007138:	50                   	push   eax
c0007139:	68 00 a2 02 c0       	push   0xc002a200
c000713e:	e8 23 fe ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0007143:	83 c4 10             	add    esp,0x10
c0007146:	90                   	nop
c0007147:	83 c4 1c             	add    esp,0x1c
c000714a:	c3                   	ret    
c000714b:	90                   	nop

c000714c <__ubsan_handle_type_mismatch_v1>:
c000714c:	83 ec 0c             	sub    esp,0xc
c000714f:	83 ec 08             	sub    esp,0x8
c0007152:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007156:	68 44 a3 02 c0       	push   0xc002a344
c000715b:	e8 80 ff ff ff       	call   c00070e0 <KiUbsanPrintDetails(char const*, void*)>
c0007160:	83 c4 10             	add    esp,0x10
c0007163:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0007168:	75 16                	jne    c0007180 <__ubsan_handle_type_mismatch_v1+0x34>
c000716a:	83 ec 0c             	sub    esp,0xc
c000716d:	68 0a a2 02 c0       	push   0xc002a20a
c0007172:	e8 ef fd ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0007177:	83 c4 10             	add    esp,0x10
c000717a:	e9 91 00 00 00       	jmp    c0007210 <__ubsan_handle_type_mismatch_v1+0xc4>
c000717f:	90                   	nop
c0007180:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007184:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0007187:	85 c0                	test   eax,eax
c0007189:	74 29                	je     c00071b4 <__ubsan_handle_type_mismatch_v1+0x68>
c000718b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000718f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0007192:	83 e8 01             	sub    eax,0x1
c0007195:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0007199:	75 19                	jne    c00071b4 <__ubsan_handle_type_mismatch_v1+0x68>
c000719b:	83 ec 08             	sub    esp,0x8
c000719e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00071a2:	68 64 a3 02 c0       	push   0xc002a364
c00071a7:	e8 ba fd ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00071ac:	83 c4 10             	add    esp,0x10
c00071af:	eb 5f                	jmp    c0007210 <__ubsan_handle_type_mismatch_v1+0xc4>
c00071b1:	8d 76 00             	lea    esi,[esi+0x0]
c00071b4:	83 ec 0c             	sub    esp,0xc
c00071b7:	68 1f a2 02 c0       	push   0xc002a21f
c00071bc:	e8 a5 fd ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00071c1:	83 c4 10             	add    esp,0x10
c00071c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00071c8:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c00071cb:	0f b6 c0             	movzx  eax,al
c00071ce:	83 ec 08             	sub    esp,0x8
c00071d1:	50                   	push   eax
c00071d2:	68 39 a2 02 c0       	push   0xc002a239
c00071d7:	e8 8a fd ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00071dc:	83 c4 10             	add    esp,0x10
c00071df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00071e3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00071e6:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c00071e9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00071ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00071f1:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c00071f4:	0f b6 c0             	movzx  eax,al
c00071f7:	8b 04 85 20 f5 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0ae0]
c00071fe:	51                   	push   ecx
c00071ff:	52                   	push   edx
c0007200:	50                   	push   eax
c0007201:	68 8c a3 02 c0       	push   0xc002a38c
c0007206:	e8 5b fd ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000720b:	83 c4 10             	add    esp,0x10
c000720e:	66 90                	xchg   ax,ax
c0007210:	83 ec 0c             	sub    esp,0xc
c0007213:	68 44 a3 02 c0       	push   0xc002a344
c0007218:	e8 43 93 00 00       	call   c0010560 <KePanic(char const*)>
c000721d:	83 c4 10             	add    esp,0x10
c0007220:	90                   	nop
c0007221:	83 c4 0c             	add    esp,0xc
c0007224:	c3                   	ret    
c0007225:	8d 76 00             	lea    esi,[esi+0x0]

c0007228 <__ubsan_handle_pointer_overflow>:
c0007228:	83 ec 0c             	sub    esp,0xc
c000722b:	83 ec 08             	sub    esp,0x8
c000722e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007232:	68 d4 a3 02 c0       	push   0xc002a3d4
c0007237:	e8 a4 fe ff ff       	call   c00070e0 <KiUbsanPrintDetails(char const*, void*)>
c000723c:	83 c4 10             	add    esp,0x10
c000723f:	83 ec 0c             	sub    esp,0xc
c0007242:	68 d4 a3 02 c0       	push   0xc002a3d4
c0007247:	e8 14 93 00 00       	call   c0010560 <KePanic(char const*)>
c000724c:	83 c4 10             	add    esp,0x10
c000724f:	90                   	nop
c0007250:	83 c4 0c             	add    esp,0xc
c0007253:	c3                   	ret    

c0007254 <__ubsan_handle_out_of_bounds>:
c0007254:	83 ec 0c             	sub    esp,0xc
c0007257:	83 ec 08             	sub    esp,0x8
c000725a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000725e:	68 44 a2 02 c0       	push   0xc002a244
c0007263:	e8 78 fe ff ff       	call   c00070e0 <KiUbsanPrintDetails(char const*, void*)>
c0007268:	83 c4 10             	add    esp,0x10
c000726b:	83 ec 0c             	sub    esp,0xc
c000726e:	68 44 a2 02 c0       	push   0xc002a244
c0007273:	e8 e8 92 00 00       	call   c0010560 <KePanic(char const*)>
c0007278:	83 c4 10             	add    esp,0x10
c000727b:	90                   	nop
c000727c:	83 c4 0c             	add    esp,0xc
c000727f:	c3                   	ret    

c0007280 <__ubsan_handle_add_overflow>:
c0007280:	83 ec 0c             	sub    esp,0xc
c0007283:	83 ec 08             	sub    esp,0x8
c0007286:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000728a:	68 61 a2 02 c0       	push   0xc002a261
c000728f:	e8 4c fe ff ff       	call   c00070e0 <KiUbsanPrintDetails(char const*, void*)>
c0007294:	83 c4 10             	add    esp,0x10
c0007297:	83 ec 0c             	sub    esp,0xc
c000729a:	68 61 a2 02 c0       	push   0xc002a261
c000729f:	e8 bc 92 00 00       	call   c0010560 <KePanic(char const*)>
c00072a4:	83 c4 10             	add    esp,0x10
c00072a7:	90                   	nop
c00072a8:	83 c4 0c             	add    esp,0xc
c00072ab:	c3                   	ret    

c00072ac <__ubsan_handle_load_invalid_value>:
c00072ac:	83 ec 0c             	sub    esp,0xc
c00072af:	83 ec 08             	sub    esp,0x8
c00072b2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00072b6:	68 f4 a3 02 c0       	push   0xc002a3f4
c00072bb:	e8 20 fe ff ff       	call   c00070e0 <KiUbsanPrintDetails(char const*, void*)>
c00072c0:	83 c4 10             	add    esp,0x10
c00072c3:	83 ec 0c             	sub    esp,0xc
c00072c6:	68 f4 a3 02 c0       	push   0xc002a3f4
c00072cb:	e8 90 92 00 00       	call   c0010560 <KePanic(char const*)>
c00072d0:	83 c4 10             	add    esp,0x10
c00072d3:	90                   	nop
c00072d4:	83 c4 0c             	add    esp,0xc
c00072d7:	c3                   	ret    

c00072d8 <__ubsan_handle_divrem_overflow>:
c00072d8:	83 ec 0c             	sub    esp,0xc
c00072db:	83 ec 08             	sub    esp,0x8
c00072de:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00072e2:	68 18 a4 02 c0       	push   0xc002a418
c00072e7:	e8 f4 fd ff ff       	call   c00070e0 <KiUbsanPrintDetails(char const*, void*)>
c00072ec:	83 c4 10             	add    esp,0x10
c00072ef:	83 ec 0c             	sub    esp,0xc
c00072f2:	68 18 a4 02 c0       	push   0xc002a418
c00072f7:	e8 64 92 00 00       	call   c0010560 <KePanic(char const*)>
c00072fc:	83 c4 10             	add    esp,0x10
c00072ff:	90                   	nop
c0007300:	83 c4 0c             	add    esp,0xc
c0007303:	c3                   	ret    

c0007304 <__ubsan_handle_mul_overflow>:
c0007304:	83 ec 0c             	sub    esp,0xc
c0007307:	83 ec 08             	sub    esp,0x8
c000730a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000730e:	68 7d a2 02 c0       	push   0xc002a27d
c0007313:	e8 c8 fd ff ff       	call   c00070e0 <KiUbsanPrintDetails(char const*, void*)>
c0007318:	83 c4 10             	add    esp,0x10
c000731b:	83 ec 0c             	sub    esp,0xc
c000731e:	68 7d a2 02 c0       	push   0xc002a27d
c0007323:	e8 38 92 00 00       	call   c0010560 <KePanic(char const*)>
c0007328:	83 c4 10             	add    esp,0x10
c000732b:	90                   	nop
c000732c:	83 c4 0c             	add    esp,0xc
c000732f:	c3                   	ret    

c0007330 <__ubsan_handle_sub_overflow>:
c0007330:	83 ec 0c             	sub    esp,0xc
c0007333:	83 ec 08             	sub    esp,0x8
c0007336:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000733a:	68 99 a2 02 c0       	push   0xc002a299
c000733f:	e8 9c fd ff ff       	call   c00070e0 <KiUbsanPrintDetails(char const*, void*)>
c0007344:	83 c4 10             	add    esp,0x10
c0007347:	83 ec 0c             	sub    esp,0xc
c000734a:	68 99 a2 02 c0       	push   0xc002a299
c000734f:	e8 0c 92 00 00       	call   c0010560 <KePanic(char const*)>
c0007354:	83 c4 10             	add    esp,0x10
c0007357:	90                   	nop
c0007358:	83 c4 0c             	add    esp,0xc
c000735b:	c3                   	ret    

c000735c <__ubsan_handle_shift_out_of_bounds>:
c000735c:	83 ec 0c             	sub    esp,0xc
c000735f:	83 ec 08             	sub    esp,0x8
c0007362:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007366:	68 38 a4 02 c0       	push   0xc002a438
c000736b:	e8 70 fd ff ff       	call   c00070e0 <KiUbsanPrintDetails(char const*, void*)>
c0007370:	83 c4 10             	add    esp,0x10
c0007373:	83 ec 0c             	sub    esp,0xc
c0007376:	68 38 a4 02 c0       	push   0xc002a438
c000737b:	e8 e0 91 00 00       	call   c0010560 <KePanic(char const*)>
c0007380:	83 c4 10             	add    esp,0x10
c0007383:	90                   	nop
c0007384:	83 c4 0c             	add    esp,0xc
c0007387:	c3                   	ret    

c0007388 <__ubsan_handle_negate_overflow>:
c0007388:	83 ec 0c             	sub    esp,0xc
c000738b:	83 ec 08             	sub    esp,0x8
c000738e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007392:	68 5c a4 02 c0       	push   0xc002a45c
c0007397:	e8 44 fd ff ff       	call   c00070e0 <KiUbsanPrintDetails(char const*, void*)>
c000739c:	83 c4 10             	add    esp,0x10
c000739f:	83 ec 0c             	sub    esp,0xc
c00073a2:	68 5c a4 02 c0       	push   0xc002a45c
c00073a7:	e8 b4 91 00 00       	call   c0010560 <KePanic(char const*)>
c00073ac:	83 c4 10             	add    esp,0x10
c00073af:	90                   	nop
c00073b0:	83 c4 0c             	add    esp,0xc
c00073b3:	c3                   	ret    

c00073b4 <Hardware::getHumanReadableName()>:
c00073b4:	83 ec 18             	sub    esp,0x18
c00073b7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00073bb:	8b 10                	mov    edx,DWORD PTR [eax]
c00073bd:	50                   	push   eax
c00073be:	ff 12                	call   DWORD PTR [edx]
c00073c0:	83 c4 10             	add    esp,0x10
c00073c3:	85 c0                	test   eax,eax
c00073c5:	74 0d                	je     c00073d4 <Hardware::getHumanReadableName()+0x20>
c00073c7:	8b 10                	mov    edx,DWORD PTR [eax]
c00073c9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00073cd:	8b 02                	mov    eax,DWORD PTR [edx]
c00073cf:	83 c4 0c             	add    esp,0xc
c00073d2:	ff e0                	jmp    eax
c00073d4:	b8 7b a4 02 c0       	mov    eax,0xc002a47b
c00073d9:	83 c4 0c             	add    esp,0xc
c00073dc:	c3                   	ret    

c00073dd <KeIsPortInUse(unsigned short, int)>:
c00073dd:	83 ec 18             	sub    esp,0x18
c00073e0:	68 8a a4 02 c0       	push   0xc002a48a
c00073e5:	e8 7c fb ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00073ea:	31 c0                	xor    eax,eax
c00073ec:	83 c4 1c             	add    esp,0x1c
c00073ef:	c3                   	ret    

c00073f0 <KeGetRootDevice()>:
c00073f0:	a1 b8 2e 03 c0       	mov    eax,ds:0xc0032eb8
c00073f5:	c3                   	ret    

c00073f6 <Hardware::registerIRQ(int)>:
c00073f6:	53                   	push   ebx
c00073f7:	31 c9                	xor    ecx,ecx
c00073f9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00073fd:	0f b6 42 3c          	movzx  eax,BYTE PTR [edx+0x3c]
c0007401:	89 c3                	mov    ebx,eax
c0007403:	90                   	nop
c0007404:	0f a3 c8             	bt     eax,ecx
c0007407:	72 17                	jb     c0007420 <Hardware::registerIRQ(int)+0x2a>
c0007409:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000740d:	89 44 8a 2c          	mov    DWORD PTR [edx+ecx*4+0x2c],eax
c0007411:	b8 01 00 00 00       	mov    eax,0x1
c0007416:	d3 e0                	shl    eax,cl
c0007418:	09 d8                	or     eax,ebx
c000741a:	88 42 3c             	mov    BYTE PTR [edx+0x3c],al
c000741d:	eb 09                	jmp    c0007428 <Hardware::registerIRQ(int)+0x32>
c000741f:	90                   	nop
c0007420:	41                   	inc    ecx
c0007421:	83 f9 04             	cmp    ecx,0x4
c0007424:	75 de                	jne    c0007404 <Hardware::registerIRQ(int)+0xe>
c0007426:	66 90                	xchg   ax,ax
c0007428:	5b                   	pop    ebx
c0007429:	c3                   	ret    

c000742a <Hardware::deregisterIRQ(int)>:
c000742a:	56                   	push   esi
c000742b:	31 c9                	xor    ecx,ecx
c000742d:	53                   	push   ebx
c000742e:	bb 01 00 00 00       	mov    ebx,0x1
c0007433:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007437:	90                   	nop
c0007438:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000743c:	39 44 8a 2c          	cmp    DWORD PTR [edx+ecx*4+0x2c],eax
c0007440:	75 0e                	jne    c0007450 <Hardware::deregisterIRQ(int)+0x26>
c0007442:	8b 72 3c             	mov    esi,DWORD PTR [edx+0x3c]
c0007445:	89 d8                	mov    eax,ebx
c0007447:	d3 e0                	shl    eax,cl
c0007449:	f7 d0                	not    eax
c000744b:	21 f0                	and    eax,esi
c000744d:	88 42 3c             	mov    BYTE PTR [edx+0x3c],al
c0007450:	41                   	inc    ecx
c0007451:	83 f9 04             	cmp    ecx,0x4
c0007454:	75 e2                	jne    c0007438 <Hardware::deregisterIRQ(int)+0xe>
c0007456:	5b                   	pop    ebx
c0007457:	5e                   	pop    esi
c0007458:	c3                   	ret    
c0007459:	90                   	nop
c000745a:	66 90                	xchg   ax,ax

c000745c <Hardware::~Hardware()>:
c000745c:	83 ec 0c             	sub    esp,0xc
c000745f:	ba 34 a6 02 c0       	mov    edx,0xc002a634
c0007464:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007468:	89 10                	mov    DWORD PTR [eax],edx
c000746a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000746e:	83 c0 74             	add    eax,0x74
c0007471:	83 ec 0c             	sub    esp,0xc
c0007474:	50                   	push   eax
c0007475:	e8 4a 0a 02 00       	call   c0027ec4 <std::vector<Hardware*>::~vector()>
c000747a:	83 c4 10             	add    esp,0x10
c000747d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007481:	83 c0 18             	add    eax,0x18
c0007484:	83 ec 0c             	sub    esp,0xc
c0007487:	50                   	push   eax
c0007488:	e8 03 0a 02 00       	call   c0027e90 <std::vector<DevicePortRange>::~vector()>
c000748d:	83 c4 10             	add    esp,0x10
c0007490:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007494:	83 c0 04             	add    eax,0x4
c0007497:	83 ec 0c             	sub    esp,0xc
c000749a:	50                   	push   eax
c000749b:	e8 bc 09 02 00       	call   c0027e5c <std::vector<DeviceMemoryRange>::~vector()>
c00074a0:	83 c4 10             	add    esp,0x10
c00074a3:	90                   	nop
c00074a4:	83 c4 0c             	add    esp,0xc
c00074a7:	c3                   	ret    

c00074a8 <Hardware::~Hardware()>:
c00074a8:	83 ec 0c             	sub    esp,0xc
c00074ab:	83 ec 0c             	sub    esp,0xc
c00074ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00074b2:	e8 a5 ff ff ff       	call   c000745c <Hardware::~Hardware()>
c00074b7:	83 c4 10             	add    esp,0x10
c00074ba:	83 ec 08             	sub    esp,0x8
c00074bd:	68 88 00 00 00       	push   0x88
c00074c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00074c6:	e8 41 68 00 00       	call   c000dd0c <operator delete(void*, unsigned long)>
c00074cb:	83 c4 10             	add    esp,0x10
c00074ce:	83 c4 0c             	add    esp,0xc
c00074d1:	c3                   	ret    
c00074d2:	66 90                	xchg   ax,ax

c00074d4 <Hardware::Hardware()>:
c00074d4:	83 ec 0c             	sub    esp,0xc
c00074d7:	ba 34 a6 02 c0       	mov    edx,0xc002a634
c00074dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00074e0:	89 10                	mov    DWORD PTR [eax],edx
c00074e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00074e6:	83 c0 04             	add    eax,0x4
c00074e9:	83 ec 0c             	sub    esp,0xc
c00074ec:	50                   	push   eax
c00074ed:	e8 56 0a 02 00       	call   c0027f48 <std::vector<DeviceMemoryRange>::vector()>
c00074f2:	83 c4 10             	add    esp,0x10
c00074f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00074f9:	83 c0 18             	add    eax,0x18
c00074fc:	83 ec 0c             	sub    esp,0xc
c00074ff:	50                   	push   eax
c0007500:	e8 bf 0a 02 00       	call   c0027fc4 <std::vector<DevicePortRange>::vector()>
c0007505:	83 c4 10             	add    esp,0x10
c0007508:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000750c:	83 c0 74             	add    eax,0x74
c000750f:	83 ec 0c             	sub    esp,0xc
c0007512:	50                   	push   eax
c0007513:	e8 28 0b 02 00       	call   c0028040 <std::vector<Hardware*>::vector()>
c0007518:	83 c4 10             	add    esp,0x10
c000751b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000751f:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0007523:	90                   	nop
c0007524:	83 c4 0c             	add    esp,0xc
c0007527:	c3                   	ret    

c0007528 <KeGetChildOfRootWithName(char const*)>:
c0007528:	57                   	push   edi
c0007529:	56                   	push   esi
c000752a:	53                   	push   ebx
c000752b:	83 ec 10             	sub    esp,0x10
c000752e:	e8 bd fe ff ff       	call   c00073f0 <KeGetRootDevice()>
c0007533:	8d 5c 24 04          	lea    ebx,[esp+0x4]
c0007537:	57                   	push   edi
c0007538:	57                   	push   edi
c0007539:	8d 70 74             	lea    esi,[eax+0x74]
c000753c:	56                   	push   esi
c000753d:	53                   	push   ebx
c000753e:	e8 1d 0c 02 00       	call   c0028160 <std::vector<Hardware*>::begin()>
c0007543:	8d 44 24 14          	lea    eax,[esp+0x14]
c0007547:	83 ec 0c             	sub    esp,0xc
c000754a:	56                   	push   esi
c000754b:	50                   	push   eax
c000754c:	e8 33 0c 02 00       	call   c0028184 <std::vector<Hardware*>::end()>
c0007551:	83 c4 1c             	add    esp,0x1c
c0007554:	56                   	push   esi
c0007555:	56                   	push   esi
c0007556:	8d 74 24 10          	lea    esi,[esp+0x10]
c000755a:	56                   	push   esi
c000755b:	53                   	push   ebx
c000755c:	e8 df 08 02 00       	call   c0027e40 <std::vector<Hardware*>::iterator::operator!=(std::vector<Hardware*>::iterator const&) const>
c0007561:	83 c4 10             	add    esp,0x10
c0007564:	84 c0                	test   al,al
c0007566:	74 58                	je     c00075c0 <KeGetChildOfRootWithName(char const*)+0x98>
c0007568:	83 ec 0c             	sub    esp,0xc
c000756b:	53                   	push   ebx
c000756c:	e8 e3 08 02 00       	call   c0027e54 <std::vector<Hardware*>::iterator::operator*() const>
c0007571:	89 c7                	mov    edi,eax
c0007573:	8b 00                	mov    eax,DWORD PTR [eax]
c0007575:	8b 10                	mov    edx,DWORD PTR [eax]
c0007577:	89 04 24             	mov    DWORD PTR [esp],eax
c000757a:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000757d:	5a                   	pop    edx
c000757e:	59                   	pop    ecx
c000757f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007583:	50                   	push   eax
c0007584:	e8 f7 91 ff ff       	call   c0000780 <strcmp>
c0007589:	83 c4 10             	add    esp,0x10
c000758c:	85 c0                	test   eax,eax
c000758e:	75 18                	jne    c00075a8 <KeGetChildOfRootWithName(char const*)+0x80>
c0007590:	83 ec 0c             	sub    esp,0xc
c0007593:	8b 3f                	mov    edi,DWORD PTR [edi]
c0007595:	56                   	push   esi
c0007596:	e8 91 08 02 00       	call   c0027e2c <std::vector<Hardware*>::iterator::~iterator()>
c000759b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000759e:	e8 89 08 02 00       	call   c0027e2c <std::vector<Hardware*>::iterator::~iterator()>
c00075a3:	83 c4 10             	add    esp,0x10
c00075a6:	eb 30                	jmp    c00075d8 <KeGetChildOfRootWithName(char const*)+0xb0>
c00075a8:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00075ac:	50                   	push   eax
c00075ad:	50                   	push   eax
c00075ae:	53                   	push   ebx
c00075af:	56                   	push   esi
c00075b0:	e8 f3 0b 02 00       	call   c00281a8 <std::vector<Hardware*>::iterator::operator++()>
c00075b5:	56                   	push   esi
c00075b6:	e8 71 08 02 00       	call   c0027e2c <std::vector<Hardware*>::iterator::~iterator()>
c00075bb:	83 c4 10             	add    esp,0x10
c00075be:	eb 94                	jmp    c0007554 <KeGetChildOfRootWithName(char const*)+0x2c>
c00075c0:	83 ec 0c             	sub    esp,0xc
c00075c3:	31 ff                	xor    edi,edi
c00075c5:	56                   	push   esi
c00075c6:	e8 61 08 02 00       	call   c0027e2c <std::vector<Hardware*>::iterator::~iterator()>
c00075cb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00075ce:	e8 59 08 02 00       	call   c0027e2c <std::vector<Hardware*>::iterator::~iterator()>
c00075d3:	83 c4 10             	add    esp,0x10
c00075d6:	66 90                	xchg   ax,ax
c00075d8:	83 c4 10             	add    esp,0x10
c00075db:	89 f8                	mov    eax,edi
c00075dd:	5b                   	pop    ebx
c00075de:	5e                   	pop    esi
c00075df:	5f                   	pop    edi
c00075e0:	c3                   	ret    

c00075e1 <KeGetPCIDevice()>:
c00075e1:	83 ec 18             	sub    esp,0x18
c00075e4:	68 af a4 02 c0       	push   0xc002a4af
c00075e9:	e8 3a ff ff ff       	call   c0007528 <KeGetChildOfRootWithName(char const*)>
c00075ee:	83 c4 1c             	add    esp,0x1c
c00075f1:	c3                   	ret    

c00075f2 <KeGetACPIDevice()>:
c00075f2:	83 ec 18             	sub    esp,0x18
c00075f5:	68 b7 a4 02 c0       	push   0xc002a4b7
c00075fa:	e8 29 ff ff ff       	call   c0007528 <KeGetChildOfRootWithName(char const*)>
c00075ff:	83 c4 1c             	add    esp,0x1c
c0007602:	c3                   	ret    

c0007603 <KeGetISAPnPDevice()>:
c0007603:	83 ec 18             	sub    esp,0x18
c0007606:	68 bc a4 02 c0       	push   0xc002a4bc
c000760b:	e8 18 ff ff ff       	call   c0007528 <KeGetChildOfRootWithName(char const*)>
c0007610:	83 c4 1c             	add    esp,0x1c
c0007613:	c3                   	ret    

c0007614 <KeGetISADevice()>:
c0007614:	83 ec 18             	sub    esp,0x18
c0007617:	68 d2 a4 02 c0       	push   0xc002a4d2
c000761c:	e8 07 ff ff ff       	call   c0007528 <KeGetChildOfRootWithName(char const*)>
c0007621:	83 c4 1c             	add    esp,0x1c
c0007624:	c3                   	ret    
c0007625:	90                   	nop

c0007626 <Hardware::printRecursively(int)>:
c0007626:	55                   	push   ebp
c0007627:	57                   	push   edi
c0007628:	56                   	push   esi
c0007629:	31 f6                	xor    esi,esi
c000762b:	53                   	push   ebx
c000762c:	83 ec 6c             	sub    esp,0x6c
c000762f:	8b 9c 24 80 00 00 00 	mov    ebx,DWORD PTR [esp+0x80]
c0007636:	8b ac 24 84 00 00 00 	mov    ebp,DWORD PTR [esp+0x84]
c000763d:	8d 76 00             	lea    esi,[esi+0x0]
c0007640:	39 ee                	cmp    esi,ebp
c0007642:	7d 14                	jge    c0007658 <Hardware::printRecursively(int)+0x32>
c0007644:	83 ec 0c             	sub    esp,0xc
c0007647:	46                   	inc    esi
c0007648:	68 52 ca 02 c0       	push   0xc002ca52
c000764d:	e8 14 f9 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0007652:	83 c4 10             	add    esp,0x10
c0007655:	eb e9                	jmp    c0007640 <Hardware::printRecursively(int)+0x1a>
c0007657:	90                   	nop
c0007658:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c000765c:	be a0 a5 02 c0       	mov    esi,0xc002a5a0
c0007661:	b9 15 00 00 00       	mov    ecx,0x15
c0007666:	fc                   	cld    
c0007667:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0007669:	8b 03                	mov    eax,DWORD PTR [ebx]
c000766b:	83 ec 0c             	sub    esp,0xc
c000766e:	53                   	push   ebx
c000766f:	ff 50 04             	call   DWORD PTR [eax+0x4]
c0007672:	89 c6                	mov    esi,eax
c0007674:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007676:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007679:	83 c3 74             	add    ebx,0x74
c000767c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000767f:	83 c4 0c             	add    esp,0xc
c0007682:	56                   	push   esi
c0007683:	6b c0 0c             	imul   eax,eax,0xc
c0007686:	8d 44 04 14          	lea    eax,[esp+eax*1+0x14]
c000768a:	50                   	push   eax
c000768b:	68 da a4 02 c0       	push   0xc002a4da
c0007690:	e8 d1 f8 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0007695:	8d 74 24 10          	lea    esi,[esp+0x10]
c0007699:	5f                   	pop    edi
c000769a:	58                   	pop    eax
c000769b:	53                   	push   ebx
c000769c:	56                   	push   esi
c000769d:	e8 be 0a 02 00       	call   c0028160 <std::vector<Hardware*>::begin()>
c00076a2:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00076a6:	83 ec 0c             	sub    esp,0xc
c00076a9:	53                   	push   ebx
c00076aa:	57                   	push   edi
c00076ab:	e8 d4 0a 02 00       	call   c0028184 <std::vector<Hardware*>::end()>
c00076b0:	83 c4 1c             	add    esp,0x1c
c00076b3:	90                   	nop
c00076b4:	51                   	push   ecx
c00076b5:	51                   	push   ecx
c00076b6:	57                   	push   edi
c00076b7:	56                   	push   esi
c00076b8:	e8 83 07 02 00       	call   c0027e40 <std::vector<Hardware*>::iterator::operator!=(std::vector<Hardware*>::iterator const&) const>
c00076bd:	83 c4 10             	add    esp,0x10
c00076c0:	84 c0                	test   al,al
c00076c2:	74 30                	je     c00076f4 <Hardware::printRecursively(int)+0xce>
c00076c4:	83 ec 0c             	sub    esp,0xc
c00076c7:	56                   	push   esi
c00076c8:	e8 87 07 02 00       	call   c0027e54 <std::vector<Hardware*>::iterator::operator*() const>
c00076cd:	5a                   	pop    edx
c00076ce:	8d 55 01             	lea    edx,[ebp+0x1]
c00076d1:	59                   	pop    ecx
c00076d2:	52                   	push   edx
c00076d3:	ff 30                	push   DWORD PTR [eax]
c00076d5:	e8 4c ff ff ff       	call   c0007626 <Hardware::printRecursively(int)>
c00076da:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c00076de:	58                   	pop    eax
c00076df:	5a                   	pop    edx
c00076e0:	56                   	push   esi
c00076e1:	53                   	push   ebx
c00076e2:	e8 c1 0a 02 00       	call   c00281a8 <std::vector<Hardware*>::iterator::operator++()>
c00076e7:	53                   	push   ebx
c00076e8:	e8 3f 07 02 00       	call   c0027e2c <std::vector<Hardware*>::iterator::~iterator()>
c00076ed:	83 c4 10             	add    esp,0x10
c00076f0:	eb c2                	jmp    c00076b4 <Hardware::printRecursively(int)+0x8e>
c00076f2:	66 90                	xchg   ax,ax
c00076f4:	83 ec 0c             	sub    esp,0xc
c00076f7:	57                   	push   edi
c00076f8:	e8 2f 07 02 00       	call   c0027e2c <std::vector<Hardware*>::iterator::~iterator()>
c00076fd:	89 34 24             	mov    DWORD PTR [esp],esi
c0007700:	e8 27 07 02 00       	call   c0027e2c <std::vector<Hardware*>::iterator::~iterator()>
c0007705:	83 c4 7c             	add    esp,0x7c
c0007708:	5b                   	pop    ebx
c0007709:	5e                   	pop    esi
c000770a:	5f                   	pop    edi
c000770b:	5d                   	pop    ebp
c000770c:	c3                   	ret    

c000770d <KePrintDeviceTree()>:
c000770d:	83 ec 18             	sub    esp,0x18
c0007710:	68 e1 a4 02 c0       	push   0xc002a4e1
c0007715:	e8 4c f8 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000771a:	58                   	pop    eax
c000771b:	5a                   	pop    edx
c000771c:	6a 00                	push   0x0
c000771e:	ff 35 b8 2e 03 c0    	push   DWORD PTR ds:0xc0032eb8
c0007724:	e8 fd fe ff ff       	call   c0007626 <Hardware::printRecursively(int)>
c0007729:	c7 04 24 1c a5 02 c0 	mov    DWORD PTR [esp],0xc002a51c
c0007730:	e8 31 f8 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0007735:	83 c4 1c             	add    esp,0x1c
c0007738:	c3                   	ret    
c0007739:	90                   	nop

c000773a <Hardware::detectRecursively()>:
c000773a:	57                   	push   edi
c000773b:	56                   	push   esi
c000773c:	53                   	push   ebx
c000773d:	83 ec 1c             	sub    esp,0x1c
c0007740:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0007744:	68 49 a5 02 c0       	push   0xc002a549
c0007749:	e8 18 f8 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000774e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007750:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007753:	ff 10                	call   DWORD PTR [eax]
c0007755:	83 c4 10             	add    esp,0x10
c0007758:	85 c0                	test   eax,eax
c000775a:	74 0c                	je     c0007768 <Hardware::detectRecursively()+0x2e>
c000775c:	8b 10                	mov    edx,DWORD PTR [eax]
c000775e:	83 ec 0c             	sub    esp,0xc
c0007761:	50                   	push   eax
c0007762:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0007765:	83 c4 10             	add    esp,0x10
c0007768:	8d 74 24 04          	lea    esi,[esp+0x4]
c000776c:	83 c3 74             	add    ebx,0x74
c000776f:	50                   	push   eax
c0007770:	50                   	push   eax
c0007771:	53                   	push   ebx
c0007772:	56                   	push   esi
c0007773:	e8 e8 09 02 00       	call   c0028160 <std::vector<Hardware*>::begin()>
c0007778:	8d 7c 24 14          	lea    edi,[esp+0x14]
c000777c:	83 ec 0c             	sub    esp,0xc
c000777f:	53                   	push   ebx
c0007780:	57                   	push   edi
c0007781:	e8 fe 09 02 00       	call   c0028184 <std::vector<Hardware*>::end()>
c0007786:	83 c4 1c             	add    esp,0x1c
c0007789:	8d 76 00             	lea    esi,[esi+0x0]
c000778c:	50                   	push   eax
c000778d:	50                   	push   eax
c000778e:	57                   	push   edi
c000778f:	56                   	push   esi
c0007790:	e8 ab 06 02 00       	call   c0027e40 <std::vector<Hardware*>::iterator::operator!=(std::vector<Hardware*>::iterator const&) const>
c0007795:	83 c4 10             	add    esp,0x10
c0007798:	84 c0                	test   al,al
c000779a:	74 2c                	je     c00077c8 <Hardware::detectRecursively()+0x8e>
c000779c:	83 ec 0c             	sub    esp,0xc
c000779f:	56                   	push   esi
c00077a0:	e8 af 06 02 00       	call   c0027e54 <std::vector<Hardware*>::iterator::operator*() const>
c00077a5:	5a                   	pop    edx
c00077a6:	ff 30                	push   DWORD PTR [eax]
c00077a8:	e8 8d ff ff ff       	call   c000773a <Hardware::detectRecursively()>
c00077ad:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c00077b1:	59                   	pop    ecx
c00077b2:	58                   	pop    eax
c00077b3:	56                   	push   esi
c00077b4:	53                   	push   ebx
c00077b5:	e8 ee 09 02 00       	call   c00281a8 <std::vector<Hardware*>::iterator::operator++()>
c00077ba:	53                   	push   ebx
c00077bb:	e8 6c 06 02 00       	call   c0027e2c <std::vector<Hardware*>::iterator::~iterator()>
c00077c0:	83 c4 10             	add    esp,0x10
c00077c3:	eb c7                	jmp    c000778c <Hardware::detectRecursively()+0x52>
c00077c5:	8d 76 00             	lea    esi,[esi+0x0]
c00077c8:	83 ec 0c             	sub    esp,0xc
c00077cb:	57                   	push   edi
c00077cc:	e8 5b 06 02 00       	call   c0027e2c <std::vector<Hardware*>::iterator::~iterator()>
c00077d1:	89 34 24             	mov    DWORD PTR [esp],esi
c00077d4:	e8 53 06 02 00       	call   c0027e2c <std::vector<Hardware*>::iterator::~iterator()>
c00077d9:	83 c4 20             	add    esp,0x20
c00077dc:	5b                   	pop    ebx
c00077dd:	5e                   	pop    esi
c00077de:	5f                   	pop    edi
c00077df:	c3                   	ret    

c00077e0 <KeSetupDeviceTree()>:
c00077e0:	53                   	push   ebx
c00077e1:	83 ec 14             	sub    esp,0x14
c00077e4:	68 8c 00 00 00       	push   0x8c
c00077e9:	e8 1e 89 00 00       	call   c001010c <malloc>
c00077ee:	89 04 24             	mov    DWORD PTR [esp],eax
c00077f1:	89 c3                	mov    ebx,eax
c00077f3:	e8 c4 08 02 00       	call   c00280bc <RootHardware::RootHardware()>
c00077f8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00077fb:	89 1d b8 2e 03 c0    	mov    DWORD PTR ds:0xc0032eb8,ebx
c0007801:	e8 34 ff ff ff       	call   c000773a <Hardware::detectRecursively()>
c0007806:	58                   	pop    eax
c0007807:	ff 35 b8 2e 03 c0    	push   DWORD PTR ds:0xc0032eb8
c000780d:	e8 28 ff ff ff       	call   c000773a <Hardware::detectRecursively()>
c0007812:	a1 b8 2e 03 c0       	mov    eax,ds:0xc0032eb8
c0007817:	5a                   	pop    edx
c0007818:	ff b0 88 00 00 00    	push   DWORD PTR [eax+0x88]
c000781e:	e8 39 05 00 00       	call   c0007d5c <RootDriver::detectLegacyISA()>
c0007823:	83 c4 18             	add    esp,0x18
c0007826:	5b                   	pop    ebx
c0007827:	c3                   	ret    

c0007828 <Hardware::deinitialiseRecursively()>:
c0007828:	55                   	push   ebp
c0007829:	57                   	push   edi
c000782a:	56                   	push   esi
c000782b:	53                   	push   ebx
c000782c:	83 ec 1c             	sub    esp,0x1c
c000782f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0007833:	8d 5c 24 04          	lea    ebx,[esp+0x4]
c0007837:	50                   	push   eax
c0007838:	50                   	push   eax
c0007839:	8d 6e 74             	lea    ebp,[esi+0x74]
c000783c:	55                   	push   ebp
c000783d:	53                   	push   ebx
c000783e:	e8 1d 09 02 00       	call   c0028160 <std::vector<Hardware*>::begin()>
c0007843:	8d 7c 24 14          	lea    edi,[esp+0x14]
c0007847:	83 ec 0c             	sub    esp,0xc
c000784a:	55                   	push   ebp
c000784b:	57                   	push   edi
c000784c:	e8 33 09 02 00       	call   c0028184 <std::vector<Hardware*>::end()>
c0007851:	83 c4 1c             	add    esp,0x1c
c0007854:	50                   	push   eax
c0007855:	50                   	push   eax
c0007856:	57                   	push   edi
c0007857:	53                   	push   ebx
c0007858:	e8 e3 05 02 00       	call   c0027e40 <std::vector<Hardware*>::iterator::operator!=(std::vector<Hardware*>::iterator const&) const>
c000785d:	83 c4 10             	add    esp,0x10
c0007860:	84 c0                	test   al,al
c0007862:	74 2c                	je     c0007890 <Hardware::deinitialiseRecursively()+0x68>
c0007864:	83 ec 0c             	sub    esp,0xc
c0007867:	53                   	push   ebx
c0007868:	e8 e7 05 02 00       	call   c0027e54 <std::vector<Hardware*>::iterator::operator*() const>
c000786d:	5a                   	pop    edx
c000786e:	ff 30                	push   DWORD PTR [eax]
c0007870:	e8 b3 ff ff ff       	call   c0007828 <Hardware::deinitialiseRecursively()>
c0007875:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0007879:	59                   	pop    ecx
c000787a:	58                   	pop    eax
c000787b:	53                   	push   ebx
c000787c:	55                   	push   ebp
c000787d:	e8 26 09 02 00       	call   c00281a8 <std::vector<Hardware*>::iterator::operator++()>
c0007882:	55                   	push   ebp
c0007883:	e8 a4 05 02 00       	call   c0027e2c <std::vector<Hardware*>::iterator::~iterator()>
c0007888:	83 c4 10             	add    esp,0x10
c000788b:	eb c7                	jmp    c0007854 <Hardware::deinitialiseRecursively()+0x2c>
c000788d:	8d 76 00             	lea    esi,[esi+0x0]
c0007890:	83 ec 0c             	sub    esp,0xc
c0007893:	57                   	push   edi
c0007894:	e8 93 05 02 00       	call   c0027e2c <std::vector<Hardware*>::iterator::~iterator()>
c0007899:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000789c:	e8 8b 05 02 00       	call   c0027e2c <std::vector<Hardware*>::iterator::~iterator()>
c00078a1:	8b 06                	mov    eax,DWORD PTR [esi]
c00078a3:	89 34 24             	mov    DWORD PTR [esp],esi
c00078a6:	ff 10                	call   DWORD PTR [eax]
c00078a8:	83 c4 10             	add    esp,0x10
c00078ab:	85 c0                	test   eax,eax
c00078ad:	74 0d                	je     c00078bc <Hardware::deinitialiseRecursively()+0x94>
c00078af:	8b 10                	mov    edx,DWORD PTR [eax]
c00078b1:	83 ec 0c             	sub    esp,0xc
c00078b4:	50                   	push   eax
c00078b5:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00078b8:	83 c4 10             	add    esp,0x10
c00078bb:	90                   	nop
c00078bc:	83 c4 1c             	add    esp,0x1c
c00078bf:	5b                   	pop    ebx
c00078c0:	5e                   	pop    esi
c00078c1:	5f                   	pop    edi
c00078c2:	5d                   	pop    ebp
c00078c3:	c3                   	ret    

c00078c4 <Hardware::setPowerStateRecursively(DevicePowerState)>:
c00078c4:	55                   	push   ebp
c00078c5:	57                   	push   edi
c00078c6:	56                   	push   esi
c00078c7:	53                   	push   ebx
c00078c8:	83 ec 1c             	sub    esp,0x1c
c00078cb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00078cf:	8d 5c 24 04          	lea    ebx,[esp+0x4]
c00078d3:	55                   	push   ebp
c00078d4:	55                   	push   ebp
c00078d5:	8d 7e 74             	lea    edi,[esi+0x74]
c00078d8:	57                   	push   edi
c00078d9:	53                   	push   ebx
c00078da:	e8 81 08 02 00       	call   c0028160 <std::vector<Hardware*>::begin()>
c00078df:	8d 6c 24 14          	lea    ebp,[esp+0x14]
c00078e3:	83 ec 0c             	sub    esp,0xc
c00078e6:	57                   	push   edi
c00078e7:	55                   	push   ebp
c00078e8:	e8 97 08 02 00       	call   c0028184 <std::vector<Hardware*>::end()>
c00078ed:	83 c4 1c             	add    esp,0x1c
c00078f0:	51                   	push   ecx
c00078f1:	51                   	push   ecx
c00078f2:	55                   	push   ebp
c00078f3:	53                   	push   ebx
c00078f4:	e8 47 05 02 00       	call   c0027e40 <std::vector<Hardware*>::iterator::operator!=(std::vector<Hardware*>::iterator const&) const>
c00078f9:	83 c4 10             	add    esp,0x10
c00078fc:	84 c0                	test   al,al
c00078fe:	74 30                	je     c0007930 <Hardware::setPowerStateRecursively(DevicePowerState)+0x6c>
c0007900:	83 ec 0c             	sub    esp,0xc
c0007903:	53                   	push   ebx
c0007904:	e8 4b 05 02 00       	call   c0027e54 <std::vector<Hardware*>::iterator::operator*() const>
c0007909:	59                   	pop    ecx
c000790a:	5f                   	pop    edi
c000790b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000790f:	ff 30                	push   DWORD PTR [eax]
c0007911:	e8 ae ff ff ff       	call   c00078c4 <Hardware::setPowerStateRecursively(DevicePowerState)>
c0007916:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c000791a:	58                   	pop    eax
c000791b:	5a                   	pop    edx
c000791c:	53                   	push   ebx
c000791d:	57                   	push   edi
c000791e:	e8 85 08 02 00       	call   c00281a8 <std::vector<Hardware*>::iterator::operator++()>
c0007923:	57                   	push   edi
c0007924:	e8 03 05 02 00       	call   c0027e2c <std::vector<Hardware*>::iterator::~iterator()>
c0007929:	83 c4 10             	add    esp,0x10
c000792c:	eb c2                	jmp    c00078f0 <Hardware::setPowerStateRecursively(DevicePowerState)+0x2c>
c000792e:	66 90                	xchg   ax,ax
c0007930:	83 ec 0c             	sub    esp,0xc
c0007933:	55                   	push   ebp
c0007934:	e8 f3 04 02 00       	call   c0027e2c <std::vector<Hardware*>::iterator::~iterator()>
c0007939:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000793c:	e8 eb 04 02 00       	call   c0027e2c <std::vector<Hardware*>::iterator::~iterator()>
c0007941:	8b 06                	mov    eax,DWORD PTR [esi]
c0007943:	89 34 24             	mov    DWORD PTR [esp],esi
c0007946:	ff 10                	call   DWORD PTR [eax]
c0007948:	83 c4 10             	add    esp,0x10
c000794b:	85 c0                	test   eax,eax
c000794d:	74 11                	je     c0007960 <Hardware::setPowerStateRecursively(DevicePowerState)+0x9c>
c000794f:	52                   	push   edx
c0007950:	52                   	push   edx
c0007951:	8b 10                	mov    edx,DWORD PTR [eax]
c0007953:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007957:	50                   	push   eax
c0007958:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000795b:	83 c4 10             	add    esp,0x10
c000795e:	66 90                	xchg   ax,ax
c0007960:	83 c4 1c             	add    esp,0x1c
c0007963:	5b                   	pop    ebx
c0007964:	5e                   	pop    esi
c0007965:	5f                   	pop    edi
c0007966:	5d                   	pop    ebp
c0007967:	c3                   	ret    

c0007968 <Hardware::addChild(Hardware*)>:
c0007968:	83 ec 14             	sub    esp,0x14
c000796b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c000796f:	50                   	push   eax
c0007970:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0007974:	83 c0 74             	add    eax,0x74
c0007977:	50                   	push   eax
c0007978:	e8 27 0c 02 00       	call   c00285a4 <std::vector<Hardware*>::push_back(Hardware* const&)>
c000797d:	83 c4 1c             	add    esp,0x1c
c0007980:	c3                   	ret    
c0007981:	90                   	nop

c0007982 <Hardware::getHardwareOfTypeAux(HardwareType, std::vector<Hardware*>&)>:
c0007982:	55                   	push   ebp
c0007983:	57                   	push   edi
c0007984:	56                   	push   esi
c0007985:	53                   	push   ebx
c0007986:	83 ec 28             	sub    esp,0x28
c0007989:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000798d:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0007991:	8b 07                	mov    eax,DWORD PTR [edi]
c0007993:	57                   	push   edi
c0007994:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007997:	83 c4 10             	add    esp,0x10
c000799a:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c000799e:	75 14                	jne    c00079b4 <Hardware::getHardwareOfTypeAux(HardwareType, std::vector<Hardware*>&)+0x32>
c00079a0:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00079a4:	56                   	push   esi
c00079a5:	56                   	push   esi
c00079a6:	8d 44 24 14          	lea    eax,[esp+0x14]
c00079aa:	50                   	push   eax
c00079ab:	55                   	push   ebp
c00079ac:	e8 f3 0b 02 00       	call   c00285a4 <std::vector<Hardware*>::push_back(Hardware* const&)>
c00079b1:	83 c4 10             	add    esp,0x10
c00079b4:	8d 74 24 04          	lea    esi,[esp+0x4]
c00079b8:	83 c7 74             	add    edi,0x74
c00079bb:	53                   	push   ebx
c00079bc:	53                   	push   ebx
c00079bd:	57                   	push   edi
c00079be:	56                   	push   esi
c00079bf:	e8 9c 07 02 00       	call   c0028160 <std::vector<Hardware*>::begin()>
c00079c4:	8d 5c 24 14          	lea    ebx,[esp+0x14]
c00079c8:	83 ec 0c             	sub    esp,0xc
c00079cb:	57                   	push   edi
c00079cc:	53                   	push   ebx
c00079cd:	e8 b2 07 02 00       	call   c0028184 <std::vector<Hardware*>::end()>
c00079d2:	83 c4 1c             	add    esp,0x1c
c00079d5:	8d 76 00             	lea    esi,[esi+0x0]
c00079d8:	51                   	push   ecx
c00079d9:	51                   	push   ecx
c00079da:	53                   	push   ebx
c00079db:	56                   	push   esi
c00079dc:	e8 5f 04 02 00       	call   c0027e40 <std::vector<Hardware*>::iterator::operator!=(std::vector<Hardware*>::iterator const&) const>
c00079e1:	83 c4 10             	add    esp,0x10
c00079e4:	84 c0                	test   al,al
c00079e6:	74 30                	je     c0007a18 <Hardware::getHardwareOfTypeAux(HardwareType, std::vector<Hardware*>&)+0x96>
c00079e8:	83 ec 0c             	sub    esp,0xc
c00079eb:	56                   	push   esi
c00079ec:	e8 63 04 02 00       	call   c0027e54 <std::vector<Hardware*>::iterator::operator*() const>
c00079f1:	83 c4 0c             	add    esp,0xc
c00079f4:	55                   	push   ebp
c00079f5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00079f9:	ff 30                	push   DWORD PTR [eax]
c00079fb:	e8 82 ff ff ff       	call   c0007982 <Hardware::getHardwareOfTypeAux(HardwareType, std::vector<Hardware*>&)>
c0007a00:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0007a04:	58                   	pop    eax
c0007a05:	5a                   	pop    edx
c0007a06:	56                   	push   esi
c0007a07:	57                   	push   edi
c0007a08:	e8 9b 07 02 00       	call   c00281a8 <std::vector<Hardware*>::iterator::operator++()>
c0007a0d:	57                   	push   edi
c0007a0e:	e8 19 04 02 00       	call   c0027e2c <std::vector<Hardware*>::iterator::~iterator()>
c0007a13:	83 c4 10             	add    esp,0x10
c0007a16:	eb c0                	jmp    c00079d8 <Hardware::getHardwareOfTypeAux(HardwareType, std::vector<Hardware*>&)+0x56>
c0007a18:	83 ec 0c             	sub    esp,0xc
c0007a1b:	53                   	push   ebx
c0007a1c:	e8 0b 04 02 00       	call   c0027e2c <std::vector<Hardware*>::iterator::~iterator()>
c0007a21:	89 34 24             	mov    DWORD PTR [esp],esi
c0007a24:	e8 03 04 02 00       	call   c0027e2c <std::vector<Hardware*>::iterator::~iterator()>
c0007a29:	83 c4 2c             	add    esp,0x2c
c0007a2c:	5b                   	pop    ebx
c0007a2d:	5e                   	pop    esi
c0007a2e:	5f                   	pop    edi
c0007a2f:	5d                   	pop    ebp
c0007a30:	c3                   	ret    

c0007a31 <KeGetHardwareOfType(HardwareType)>:
c0007a31:	53                   	push   ebx
c0007a32:	83 ec 14             	sub    esp,0x14
c0007a35:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0007a39:	53                   	push   ebx
c0007a3a:	e8 01 06 02 00       	call   c0028040 <std::vector<Hardware*>::vector()>
c0007a3f:	83 c4 0c             	add    esp,0xc
c0007a42:	53                   	push   ebx
c0007a43:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007a47:	ff 35 b8 2e 03 c0    	push   DWORD PTR ds:0xc0032eb8
c0007a4d:	e8 30 ff ff ff       	call   c0007982 <Hardware::getHardwareOfTypeAux(HardwareType, std::vector<Hardware*>&)>
c0007a52:	83 c4 18             	add    esp,0x18
c0007a55:	89 d8                	mov    eax,ebx
c0007a57:	5b                   	pop    ebx
c0007a58:	c2 04 00             	ret    0x4
c0007a5b:	90                   	nop

c0007a5c <Hardware::removeChild(Hardware*)>:
c0007a5c:	55                   	push   ebp
c0007a5d:	57                   	push   edi
c0007a5e:	56                   	push   esi
c0007a5f:	53                   	push   ebx
c0007a60:	83 ec 2c             	sub    esp,0x2c
c0007a63:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007a67:	8d 74 24 18          	lea    esi,[esp+0x18]
c0007a6b:	8d 58 74             	lea    ebx,[eax+0x74]
c0007a6e:	50                   	push   eax
c0007a6f:	50                   	push   eax
c0007a70:	53                   	push   ebx
c0007a71:	56                   	push   esi
c0007a72:	e8 0d 07 02 00       	call   c0028184 <std::vector<Hardware*>::end()>
c0007a77:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0007a7b:	83 ec 0c             	sub    esp,0xc
c0007a7e:	53                   	push   ebx
c0007a7f:	57                   	push   edi
c0007a80:	e8 ff 06 02 00       	call   c0028184 <std::vector<Hardware*>::end()>
c0007a85:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007a88:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0007a8c:	55                   	push   ebp
c0007a8d:	e8 ce 06 02 00       	call   c0028160 <std::vector<Hardware*>::begin()>
c0007a92:	8d 44 24 30          	lea    eax,[esp+0x30]
c0007a96:	83 c4 1c             	add    esp,0x1c
c0007a99:	8d 54 24 44          	lea    edx,[esp+0x44]
c0007a9d:	52                   	push   edx
c0007a9e:	57                   	push   edi
c0007a9f:	55                   	push   ebp
c0007aa0:	50                   	push   eax
c0007aa1:	e8 1a 08 02 00       	call   c00282c0 <std::vector<Hardware*>::iterator std::remove<std::vector<Hardware*>::iterator, Hardware*>(std::vector<Hardware*>::iterator, std::vector<Hardware*>::iterator, Hardware* const&)>
c0007aa6:	8d 54 24 28          	lea    edx,[esp+0x28]
c0007aaa:	83 c4 0c             	add    esp,0xc
c0007aad:	56                   	push   esi
c0007aae:	8d 44 24 18          	lea    eax,[esp+0x18]
c0007ab2:	50                   	push   eax
c0007ab3:	53                   	push   ebx
c0007ab4:	52                   	push   edx
c0007ab5:	e8 7a 0b 02 00       	call   c0028634 <std::vector<Hardware*>::erase(std::vector<Hardware*>::iterator, std::vector<Hardware*>::iterator)>
c0007aba:	8d 54 24 28          	lea    edx,[esp+0x28]
c0007abe:	52                   	push   edx
c0007abf:	e8 68 03 02 00       	call   c0027e2c <std::vector<Hardware*>::iterator::~iterator()>
c0007ac4:	5a                   	pop    edx
c0007ac5:	8d 44 24 20          	lea    eax,[esp+0x20]
c0007ac9:	50                   	push   eax
c0007aca:	e8 5d 03 02 00       	call   c0027e2c <std::vector<Hardware*>::iterator::~iterator()>
c0007acf:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0007ad2:	e8 55 03 02 00       	call   c0027e2c <std::vector<Hardware*>::iterator::~iterator()>
c0007ad7:	89 3c 24             	mov    DWORD PTR [esp],edi
c0007ada:	e8 4d 03 02 00       	call   c0027e2c <std::vector<Hardware*>::iterator::~iterator()>
c0007adf:	89 34 24             	mov    DWORD PTR [esp],esi
c0007ae2:	e8 45 03 02 00       	call   c0027e2c <std::vector<Hardware*>::iterator::~iterator()>
c0007ae7:	83 c4 3c             	add    esp,0x3c
c0007aea:	5b                   	pop    ebx
c0007aeb:	5e                   	pop    esi
c0007aec:	5f                   	pop    edi
c0007aed:	5d                   	pop    ebp
c0007aee:	c3                   	ret    
c0007aef:	90                   	nop

c0007af0 <Hardware::registerMemoryRange(unsigned long, unsigned long)>:
c0007af0:	83 ec 24             	sub    esp,0x24
c0007af3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0007af7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007afb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007aff:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0007b03:	8d 44 24 10          	lea    eax,[esp+0x10]
c0007b07:	50                   	push   eax
c0007b08:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0007b0c:	83 c0 04             	add    eax,0x4
c0007b0f:	50                   	push   eax
c0007b10:	e8 c7 0d 02 00       	call   c00288dc <std::vector<DeviceMemoryRange>::push_back(DeviceMemoryRange const&)>
c0007b15:	83 c4 2c             	add    esp,0x2c
c0007b18:	c3                   	ret    
c0007b19:	90                   	nop

c0007b1a <Hardware::registerPortRange(unsigned short, unsigned char, int)>:
c0007b1a:	53                   	push   ebx
c0007b1b:	83 ec 18             	sub    esp,0x18
c0007b1e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007b22:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0007b26:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0007b2a:	83 fa 02             	cmp    edx,0x2
c0007b2d:	74 2d                	je     c0007b5c <Hardware::registerPortRange(unsigned short, unsigned char, int)+0x42>
c0007b2f:	7f 07                	jg     c0007b38 <Hardware::registerPortRange(unsigned short, unsigned char, int)+0x1e>
c0007b31:	31 c0                	xor    eax,eax
c0007b33:	4a                   	dec    edx
c0007b34:	eb 12                	jmp    c0007b48 <Hardware::registerPortRange(unsigned short, unsigned char, int)+0x2e>
c0007b36:	66 90                	xchg   ax,ax
c0007b38:	83 fa 04             	cmp    edx,0x4
c0007b3b:	74 27                	je     c0007b64 <Hardware::registerPortRange(unsigned short, unsigned char, int)+0x4a>
c0007b3d:	b8 03 00 00 00       	mov    eax,0x3
c0007b42:	83 fa 08             	cmp    edx,0x8
c0007b45:	8d 76 00             	lea    esi,[esi+0x0]
c0007b48:	74 22                	je     c0007b6c <Hardware::registerPortRange(unsigned short, unsigned char, int)+0x52>
c0007b4a:	83 ec 0c             	sub    esp,0xc
c0007b4d:	68 63 a5 02 c0       	push   0xc002a563
c0007b52:	e8 09 8a 00 00       	call   c0010560 <KePanic(char const*)>
c0007b57:	eb 37                	jmp    c0007b90 <Hardware::registerPortRange(unsigned short, unsigned char, int)+0x76>
c0007b59:	8d 76 00             	lea    esi,[esi+0x0]
c0007b5c:	b8 01 00 00 00       	mov    eax,0x1
c0007b61:	eb 09                	jmp    c0007b6c <Hardware::registerPortRange(unsigned short, unsigned char, int)+0x52>
c0007b63:	90                   	nop
c0007b64:	b8 02 00 00 00       	mov    eax,0x2
c0007b69:	8d 76 00             	lea    esi,[esi+0x0]
c0007b6c:	66 89 5c 24 0c       	mov    WORD PTR [esp+0xc],bx
c0007b71:	c1 e0 06             	shl    eax,0x6
c0007b74:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0007b78:	88 4c 24 0e          	mov    BYTE PTR [esp+0xe],cl
c0007b7c:	50                   	push   eax
c0007b7d:	50                   	push   eax
c0007b7e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0007b82:	50                   	push   eax
c0007b83:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0007b87:	83 c0 18             	add    eax,0x18
c0007b8a:	50                   	push   eax
c0007b8b:	e8 00 0f 02 00       	call   c0028a90 <std::vector<DevicePortRange>::push_back(DevicePortRange const&)>
c0007b90:	83 c4 10             	add    esp,0x10
c0007b93:	83 c4 18             	add    esp,0x18
c0007b96:	5b                   	pop    ebx
c0007b97:	c3                   	ret    

c0007b98 <RootDriver::detect()>:
c0007b98:	90                   	nop
c0007b99:	c3                   	ret    
c0007b9a:	66 90                	xchg   ax,ax

c0007b9c <RootDriver::deinitialise()>:
c0007b9c:	90                   	nop
c0007b9d:	c3                   	ret    
c0007b9e:	66 90                	xchg   ax,ax

c0007ba0 <RootDriver::setPowerState(DevicePowerState)>:
c0007ba0:	90                   	nop
c0007ba1:	c3                   	ret    
c0007ba2:	66 90                	xchg   ax,ax

c0007ba4 <RootDriver::getHumanReadableName()>:
c0007ba4:	b8 48 a6 02 c0       	mov    eax,0xc002a648
c0007ba9:	c3                   	ret    
c0007baa:	66 90                	xchg   ax,ax

c0007bac <RootDriver::hasACPI()>:
c0007bac:	b0 01                	mov    al,0x1
c0007bae:	c3                   	ret    
c0007baf:	90                   	nop

c0007bb0 <RootDriver::hasISAPnP()>:
c0007bb0:	b0 01                	mov    al,0x1
c0007bb2:	c3                   	ret    
c0007bb3:	90                   	nop

c0007bb4 <RootDriver::hasPCI()>:
c0007bb4:	b0 01                	mov    al,0x1
c0007bb6:	c3                   	ret    
c0007bb7:	90                   	nop

c0007bb8 <RootDriver::initialise()>:
c0007bb8:	56                   	push   esi
c0007bb9:	53                   	push   ebx
c0007bba:	83 ec 34             	sub    esp,0x34
c0007bbd:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0007bc1:	e8 e6 ff ff ff       	call   c0007bac <RootDriver::hasACPI()>
c0007bc6:	83 c4 04             	add    esp,0x4
c0007bc9:	0f b6 c0             	movzx  eax,al
c0007bcc:	85 c0                	test   eax,eax
c0007bce:	74 78                	je     c0007c48 <RootDriver::initialise()+0x90>
c0007bd0:	c7 44 24 1c 08 00 00 00 	mov    DWORD PTR [esp+0x1c],0x8
c0007bd8:	83 ec 0c             	sub    esp,0xc
c0007bdb:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007bdf:	e8 28 85 00 00       	call   c001010c <malloc>
c0007be4:	83 c4 10             	add    esp,0x10
c0007be7:	89 c3                	mov    ebx,eax
c0007be9:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0007bef:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0007bf6:	83 ec 0c             	sub    esp,0xc
c0007bf9:	53                   	push   ebx
c0007bfa:	e8 55 10 02 00       	call   c0028c54 <ACPIDriver::ACPIDriver()>
c0007bff:	83 c4 10             	add    esp,0x10
c0007c02:	89 de                	mov    esi,ebx
c0007c04:	c7 44 24 20 8c 00 00 00 	mov    DWORD PTR [esp+0x20],0x8c
c0007c0c:	83 ec 0c             	sub    esp,0xc
c0007c0f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0007c13:	e8 f4 84 00 00       	call   c001010c <malloc>
c0007c18:	83 c4 10             	add    esp,0x10
c0007c1b:	89 c3                	mov    ebx,eax
c0007c1d:	83 ec 08             	sub    esp,0x8
c0007c20:	56                   	push   esi
c0007c21:	53                   	push   ebx
c0007c22:	e8 81 0f 02 00       	call   c0028ba8 <BusHardware::BusHardware(BusDriver*)>
c0007c27:	83 c4 10             	add    esp,0x10
c0007c2a:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0007c2e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007c32:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0007c35:	83 ec 08             	sub    esp,0x8
c0007c38:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007c3c:	50                   	push   eax
c0007c3d:	e8 26 fd ff ff       	call   c0007968 <Hardware::addChild(Hardware*)>
c0007c42:	83 c4 10             	add    esp,0x10
c0007c45:	8d 76 00             	lea    esi,[esi+0x0]
c0007c48:	83 ec 0c             	sub    esp,0xc
c0007c4b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0007c4f:	e8 60 ff ff ff       	call   c0007bb4 <RootDriver::hasPCI()>
c0007c54:	83 c4 10             	add    esp,0x10
c0007c57:	0f b6 c0             	movzx  eax,al
c0007c5a:	85 c0                	test   eax,eax
c0007c5c:	74 76                	je     c0007cd4 <RootDriver::initialise()+0x11c>
c0007c5e:	c7 44 24 14 08 00 00 00 	mov    DWORD PTR [esp+0x14],0x8
c0007c66:	83 ec 0c             	sub    esp,0xc
c0007c69:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007c6d:	e8 9a 84 00 00       	call   c001010c <malloc>
c0007c72:	83 c4 10             	add    esp,0x10
c0007c75:	89 c3                	mov    ebx,eax
c0007c77:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0007c7d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0007c84:	83 ec 0c             	sub    esp,0xc
c0007c87:	53                   	push   ebx
c0007c88:	e8 eb 0f 02 00       	call   c0028c78 <PCIDriver::PCIDriver()>
c0007c8d:	83 c4 10             	add    esp,0x10
c0007c90:	89 de                	mov    esi,ebx
c0007c92:	c7 44 24 18 8c 00 00 00 	mov    DWORD PTR [esp+0x18],0x8c
c0007c9a:	83 ec 0c             	sub    esp,0xc
c0007c9d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007ca1:	e8 66 84 00 00       	call   c001010c <malloc>
c0007ca6:	83 c4 10             	add    esp,0x10
c0007ca9:	89 c3                	mov    ebx,eax
c0007cab:	83 ec 08             	sub    esp,0x8
c0007cae:	56                   	push   esi
c0007caf:	53                   	push   ebx
c0007cb0:	e8 f3 0e 02 00       	call   c0028ba8 <BusHardware::BusHardware(BusDriver*)>
c0007cb5:	83 c4 10             	add    esp,0x10
c0007cb8:	89 5c 24 28          	mov    DWORD PTR [esp+0x28],ebx
c0007cbc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007cc0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0007cc3:	83 ec 08             	sub    esp,0x8
c0007cc6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0007cca:	50                   	push   eax
c0007ccb:	e8 98 fc ff ff       	call   c0007968 <Hardware::addChild(Hardware*)>
c0007cd0:	83 c4 10             	add    esp,0x10
c0007cd3:	90                   	nop
c0007cd4:	83 ec 0c             	sub    esp,0xc
c0007cd7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0007cdb:	e8 d0 fe ff ff       	call   c0007bb0 <RootDriver::hasISAPnP()>
c0007ce0:	83 c4 10             	add    esp,0x10
c0007ce3:	0f b6 c0             	movzx  eax,al
c0007ce6:	85 c0                	test   eax,eax
c0007ce8:	74 6a                	je     c0007d54 <RootDriver::initialise()+0x19c>
c0007cea:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c0007cf2:	83 ec 0c             	sub    esp,0xc
c0007cf5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007cf9:	e8 0e 84 00 00       	call   c001010c <malloc>
c0007cfe:	83 c4 10             	add    esp,0x10
c0007d01:	89 c3                	mov    ebx,eax
c0007d03:	83 ec 0c             	sub    esp,0xc
c0007d06:	53                   	push   ebx
c0007d07:	e8 04 0f 02 00       	call   c0028c10 <ISAPnPDriver::ISAPnPDriver()>
c0007d0c:	83 c4 10             	add    esp,0x10
c0007d0f:	89 de                	mov    esi,ebx
c0007d11:	c7 44 24 10 8c 00 00 00 	mov    DWORD PTR [esp+0x10],0x8c
c0007d19:	83 ec 0c             	sub    esp,0xc
c0007d1c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007d20:	e8 e7 83 00 00       	call   c001010c <malloc>
c0007d25:	83 c4 10             	add    esp,0x10
c0007d28:	89 c3                	mov    ebx,eax
c0007d2a:	83 ec 08             	sub    esp,0x8
c0007d2d:	56                   	push   esi
c0007d2e:	53                   	push   ebx
c0007d2f:	e8 74 0e 02 00       	call   c0028ba8 <BusHardware::BusHardware(BusDriver*)>
c0007d34:	83 c4 10             	add    esp,0x10
c0007d37:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c0007d3b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007d3f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0007d42:	83 ec 08             	sub    esp,0x8
c0007d45:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0007d49:	50                   	push   eax
c0007d4a:	e8 19 fc ff ff       	call   c0007968 <Hardware::addChild(Hardware*)>
c0007d4f:	83 c4 10             	add    esp,0x10
c0007d52:	66 90                	xchg   ax,ax
c0007d54:	90                   	nop
c0007d55:	83 c4 34             	add    esp,0x34
c0007d58:	5b                   	pop    ebx
c0007d59:	5e                   	pop    esi
c0007d5a:	c3                   	ret    
c0007d5b:	90                   	nop

c0007d5c <RootDriver::detectLegacyISA()>:
c0007d5c:	56                   	push   esi
c0007d5d:	53                   	push   ebx
c0007d5e:	83 ec 14             	sub    esp,0x14
c0007d61:	c7 44 24 04 08 00 00 00 	mov    DWORD PTR [esp+0x4],0x8
c0007d69:	83 ec 0c             	sub    esp,0xc
c0007d6c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0007d70:	e8 97 83 00 00       	call   c001010c <malloc>
c0007d75:	83 c4 10             	add    esp,0x10
c0007d78:	89 c3                	mov    ebx,eax
c0007d7a:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0007d80:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0007d87:	83 ec 0c             	sub    esp,0xc
c0007d8a:	53                   	push   ebx
c0007d8b:	e8 0c 0f 02 00       	call   c0028c9c <ISADriver::ISADriver()>
c0007d90:	83 c4 10             	add    esp,0x10
c0007d93:	89 de                	mov    esi,ebx
c0007d95:	c7 44 24 08 8c 00 00 00 	mov    DWORD PTR [esp+0x8],0x8c
c0007d9d:	83 ec 0c             	sub    esp,0xc
c0007da0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007da4:	e8 63 83 00 00       	call   c001010c <malloc>
c0007da9:	83 c4 10             	add    esp,0x10
c0007dac:	89 c3                	mov    ebx,eax
c0007dae:	83 ec 08             	sub    esp,0x8
c0007db1:	56                   	push   esi
c0007db2:	53                   	push   ebx
c0007db3:	e8 f0 0d 02 00       	call   c0028ba8 <BusHardware::BusHardware(BusDriver*)>
c0007db8:	83 c4 10             	add    esp,0x10
c0007dbb:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0007dbf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007dc3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0007dc6:	83 ec 08             	sub    esp,0x8
c0007dc9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007dcd:	50                   	push   eax
c0007dce:	e8 95 fb ff ff       	call   c0007968 <Hardware::addChild(Hardware*)>
c0007dd3:	83 c4 10             	add    esp,0x10
c0007dd6:	90                   	nop
c0007dd7:	83 c4 14             	add    esp,0x14
c0007dda:	5b                   	pop    ebx
c0007ddb:	5e                   	pop    esi
c0007ddc:	c3                   	ret    

c0007ddd <KiIsHashInTable(unsigned short)>:
c0007ddd:	0f b7 d0             	movzx  edx,ax
c0007de0:	83 e0 07             	and    eax,0x7
c0007de3:	c1 fa 03             	sar    edx,0x3
c0007de6:	88 c1                	mov    cl,al
c0007de8:	0f b6 92 00 33 03 c0 	movzx  edx,BYTE PTR [edx-0x3ffccd00]
c0007def:	d3 fa                	sar    edx,cl
c0007df1:	89 d0                	mov    eax,edx
c0007df3:	83 e0 01             	and    eax,0x1
c0007df6:	c3                   	ret    

c0007df7 <KiSetHashInTable(unsigned short, bool)>:
c0007df7:	56                   	push   esi
c0007df8:	53                   	push   ebx
c0007df9:	0f b7 d8             	movzx  ebx,ax
c0007dfc:	c1 fb 03             	sar    ebx,0x3
c0007dff:	83 e0 07             	and    eax,0x7
c0007e02:	89 c1                	mov    ecx,eax
c0007e04:	b8 01 00 00 00       	mov    eax,0x1
c0007e09:	0f b6 b3 00 33 03 c0 	movzx  esi,BYTE PTR [ebx-0x3ffccd00]
c0007e10:	d3 e0                	shl    eax,cl
c0007e12:	84 d2                	test   dl,dl
c0007e14:	74 04                	je     c0007e1a <KiSetHashInTable(unsigned short, bool)+0x23>
c0007e16:	09 f0                	or     eax,esi
c0007e18:	eb 04                	jmp    c0007e1e <KiSetHashInTable(unsigned short, bool)+0x27>
c0007e1a:	f7 d0                	not    eax
c0007e1c:	21 f0                	and    eax,esi
c0007e1e:	88 83 00 33 03 c0    	mov    BYTE PTR [ebx-0x3ffccd00],al
c0007e24:	5b                   	pop    ebx
c0007e25:	5e                   	pop    esi
c0007e26:	c3                   	ret    

c0007e27 <KiFlushSymlinkChanges()>:
c0007e27:	57                   	push   edi
c0007e28:	56                   	push   esi
c0007e29:	53                   	push   ebx
c0007e2a:	83 ec 1c             	sub    esp,0x1c
c0007e2d:	68 14 01 00 00       	push   0x114
c0007e32:	e8 d5 82 00 00       	call   c001010c <malloc>
c0007e37:	83 c4 0c             	add    esp,0xc
c0007e3a:	ff 35 58 63 03 c0    	push   DWORD PTR ds:0xc0036358
c0007e40:	68 a8 a6 02 c0       	push   0xc002a6a8
c0007e45:	50                   	push   eax
c0007e46:	89 c3                	mov    ebx,eax
c0007e48:	e8 65 0d 00 00       	call   c0008bb2 <File::File(char const*, Process*)>
c0007e4d:	83 c4 10             	add    esp,0x10
c0007e50:	85 db                	test   ebx,ebx
c0007e52:	75 10                	jne    c0007e64 <KiFlushSymlinkChanges()+0x3d>
c0007e54:	83 ec 0c             	sub    esp,0xc
c0007e57:	68 c6 a6 02 c0       	push   0xc002a6c6
c0007e5c:	e8 ff 86 00 00       	call   c0010560 <KePanic(char const*)>
c0007e61:	83 c4 10             	add    esp,0x10
c0007e64:	50                   	push   eax
c0007e65:	50                   	push   eax
c0007e66:	6a 06                	push   0x6
c0007e68:	53                   	push   ebx
c0007e69:	e8 62 0d 00 00       	call   c0008bd0 <File::open(FileOpenMode)>
c0007e6e:	83 c4 10             	add    esp,0x10
c0007e71:	85 c0                	test   eax,eax
c0007e73:	74 10                	je     c0007e85 <KiFlushSymlinkChanges()+0x5e>
c0007e75:	83 ec 0c             	sub    esp,0xc
c0007e78:	68 e0 a6 02 c0       	push   0xc002a6e0
c0007e7d:	e8 de 86 00 00       	call   c0010560 <KePanic(char const*)>
c0007e82:	83 c4 10             	add    esp,0x10
c0007e85:	31 f6                	xor    esi,esi
c0007e87:	39 35 c0 2e 03 c0    	cmp    DWORD PTR ds:0xc0032ec0,esi
c0007e8d:	7e 70                	jle    c0007eff <KiFlushSymlinkChanges()+0xd8>
c0007e8f:	83 ec 0c             	sub    esp,0xc
c0007e92:	89 f0                	mov    eax,esi
c0007e94:	8b 13                	mov    edx,DWORD PTR [ebx]
c0007e96:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0007e9a:	c1 e0 08             	shl    eax,0x8
c0007e9d:	57                   	push   edi
c0007e9e:	05 00 2f 03 c0       	add    eax,0xc0032f00
c0007ea3:	50                   	push   eax
c0007ea4:	6a 00                	push   0x0
c0007ea6:	68 00 01 00 00       	push   0x100
c0007eab:	53                   	push   ebx
c0007eac:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0007eaf:	83 c4 20             	add    esp,0x20
c0007eb2:	81 7c 24 0c 00 01 00 00 	cmp    DWORD PTR [esp+0xc],0x100
c0007eba:	74 10                	je     c0007ecc <KiFlushSymlinkChanges()+0xa5>
c0007ebc:	83 ec 0c             	sub    esp,0xc
c0007ebf:	68 fa a6 02 c0       	push   0xc002a6fa
c0007ec4:	e8 97 86 00 00       	call   c0010560 <KePanic(char const*)>
c0007ec9:	83 c4 10             	add    esp,0x10
c0007ecc:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007ece:	8d 14 f5 e0 2e 03 c0 	lea    edx,[esi*8-0x3ffcd120]
c0007ed5:	83 ec 0c             	sub    esp,0xc
c0007ed8:	57                   	push   edi
c0007ed9:	52                   	push   edx
c0007eda:	6a 00                	push   0x0
c0007edc:	6a 08                	push   0x8
c0007ede:	53                   	push   ebx
c0007edf:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0007ee2:	83 c4 20             	add    esp,0x20
c0007ee5:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c0007eea:	74 10                	je     c0007efc <KiFlushSymlinkChanges()+0xd5>
c0007eec:	83 ec 0c             	sub    esp,0xc
c0007eef:	68 14 a7 02 c0       	push   0xc002a714
c0007ef4:	e8 67 86 00 00       	call   c0010560 <KePanic(char const*)>
c0007ef9:	83 c4 10             	add    esp,0x10
c0007efc:	46                   	inc    esi
c0007efd:	eb 88                	jmp    c0007e87 <KiFlushSymlinkChanges()+0x60>
c0007eff:	83 ec 0c             	sub    esp,0xc
c0007f02:	53                   	push   ebx
c0007f03:	e8 26 0d 00 00       	call   c0008c2e <File::close()>
c0007f08:	83 c4 10             	add    esp,0x10
c0007f0b:	85 db                	test   ebx,ebx
c0007f0d:	74 0c                	je     c0007f1b <KiFlushSymlinkChanges()+0xf4>
c0007f0f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007f11:	83 ec 0c             	sub    esp,0xc
c0007f14:	53                   	push   ebx
c0007f15:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007f18:	83 c4 10             	add    esp,0x10
c0007f1b:	c7 05 c0 2e 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032ec0,0x0
c0007f25:	83 c4 10             	add    esp,0x10
c0007f28:	5b                   	pop    ebx
c0007f29:	5e                   	pop    esi
c0007f2a:	5f                   	pop    edi
c0007f2b:	c3                   	ret    

c0007f2c <KiDeinitialiseSymlinks(void*)>:
c0007f2c:	e9 f6 fe ff ff       	jmp    c0007e27 <KiFlushSymlinkChanges()>

c0007f31 <KiGetSymlinkHash(char const*)>:
c0007f31:	53                   	push   ebx
c0007f32:	89 c3                	mov    ebx,eax
c0007f34:	83 ec 14             	sub    esp,0x14
c0007f37:	50                   	push   eax
c0007f38:	e8 43 86 ff ff       	call   c0000580 <strlen>
c0007f3d:	5a                   	pop    edx
c0007f3e:	59                   	pop    ecx
c0007f3f:	50                   	push   eax
c0007f40:	53                   	push   ebx
c0007f41:	e8 83 6b 00 00       	call   c000eac9 <KeCalculateCRC32(unsigned char*, int)>
c0007f46:	83 c4 18             	add    esp,0x18
c0007f49:	5b                   	pop    ebx
c0007f4a:	89 c2                	mov    edx,eax
c0007f4c:	c1 ea 10             	shr    edx,0x10
c0007f4f:	31 d0                	xor    eax,edx
c0007f51:	c3                   	ret    

c0007f52 <KiCreateSymlinkID()>:
c0007f52:	55                   	push   ebp
c0007f53:	57                   	push   edi
c0007f54:	56                   	push   esi
c0007f55:	53                   	push   ebx
c0007f56:	31 db                	xor    ebx,ebx
c0007f58:	83 ec 1c             	sub    esp,0x1c
c0007f5b:	e8 d8 8f 00 00       	call   c0010f38 <KeRand()>
c0007f60:	8b 2d 00 53 03 c0    	mov    ebp,DWORD PTR ds:0xc0035300
c0007f66:	31 d2                	xor    edx,edx
c0007f68:	43                   	inc    ebx
c0007f69:	31 ff                	xor    edi,edi
c0007f6b:	8d 4d 01             	lea    ecx,[ebp+0x1]
c0007f6e:	89 ee                	mov    esi,ebp
c0007f70:	89 0d 00 53 03 c0    	mov    DWORD PTR ds:0xc0035300,ecx
c0007f76:	0f a4 c2 1f          	shld   edx,eax,0x1f
c0007f7a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007f7e:	c1 e0 1f             	shl    eax,0x1f
c0007f81:	81 fb 9a 02 00 00    	cmp    ebx,0x29a
c0007f87:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007f8b:	75 10                	jne    c0007f9d <KiCreateSymlinkID()+0x4b>
c0007f8d:	83 ec 0c             	sub    esp,0xc
c0007f90:	68 2e a7 02 c0       	push   0xc002a72e
c0007f95:	e8 c6 85 00 00       	call   c0010560 <KePanic(char const*)>
c0007f9a:	83 c4 10             	add    esp,0x10
c0007f9d:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0007fa1:	75 06                	jne    c0007fa9 <KiCreateSymlinkID()+0x57>
c0007fa3:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0007fa7:	74 b2                	je     c0007f5b <KiCreateSymlinkID()+0x9>
c0007fa9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007fad:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007fb1:	83 c4 1c             	add    esp,0x1c
c0007fb4:	5b                   	pop    ebx
c0007fb5:	31 f0                	xor    eax,esi
c0007fb7:	5e                   	pop    esi
c0007fb8:	31 fa                	xor    edx,edi
c0007fba:	5f                   	pop    edi
c0007fbb:	5d                   	pop    ebp
c0007fbc:	c3                   	ret    

c0007fbd <KeRegisterSymlink(char const*, unsigned long long)>:
c0007fbd:	53                   	push   ebx
c0007fbe:	83 ec 0c             	sub    esp,0xc
c0007fc1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007fc5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0007fc9:	a1 c0 2e 03 c0       	mov    eax,ds:0xc0032ec0
c0007fce:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0007fd2:	68 00 01 00 00       	push   0x100
c0007fd7:	6a 00                	push   0x0
c0007fd9:	89 0c c5 e4 2e 03 c0 	mov    DWORD PTR [eax*8-0x3ffcd11c],ecx
c0007fe0:	89 14 c5 e0 2e 03 c0 	mov    DWORD PTR [eax*8-0x3ffcd120],edx
c0007fe7:	c1 e0 08             	shl    eax,0x8
c0007fea:	05 00 2f 03 c0       	add    eax,0xc0032f00
c0007fef:	50                   	push   eax
c0007ff0:	e8 fb 84 ff ff       	call   c00004f0 <memset>
c0007ff5:	58                   	pop    eax
c0007ff6:	a1 c0 2e 03 c0       	mov    eax,ds:0xc0032ec0
c0007ffb:	5a                   	pop    edx
c0007ffc:	c1 e0 08             	shl    eax,0x8
c0007fff:	53                   	push   ebx
c0008000:	05 00 2f 03 c0       	add    eax,0xc0032f00
c0008005:	50                   	push   eax
c0008006:	e8 45 86 ff ff       	call   c0000650 <strcpy>
c000800b:	89 d8                	mov    eax,ebx
c000800d:	e8 1f ff ff ff       	call   c0007f31 <KiGetSymlinkHash(char const*)>
c0008012:	ba 01 00 00 00       	mov    edx,0x1
c0008017:	0f b7 c0             	movzx  eax,ax
c000801a:	e8 d8 fd ff ff       	call   c0007df7 <KiSetHashInTable(unsigned short, bool)>
c000801f:	a1 c0 2e 03 c0       	mov    eax,ds:0xc0032ec0
c0008024:	83 c4 10             	add    esp,0x10
c0008027:	40                   	inc    eax
c0008028:	a3 c0 2e 03 c0       	mov    ds:0xc0032ec0,eax
c000802d:	83 f8 03             	cmp    eax,0x3
c0008030:	7e 09                	jle    c000803b <KeRegisterSymlink(char const*, unsigned long long)+0x7e>
c0008032:	83 c4 08             	add    esp,0x8
c0008035:	5b                   	pop    ebx
c0008036:	e9 ec fd ff ff       	jmp    c0007e27 <KiFlushSymlinkChanges()>
c000803b:	83 c4 08             	add    esp,0x8
c000803e:	5b                   	pop    ebx
c000803f:	c3                   	ret    

c0008040 <KeInitialiseSymlinks()>:
c0008040:	57                   	push   edi
c0008041:	56                   	push   esi
c0008042:	53                   	push   ebx
c0008043:	81 ec 14 01 00 00    	sub    esp,0x114
c0008049:	68 00 20 00 00       	push   0x2000
c000804e:	6a 00                	push   0x0
c0008050:	68 00 33 03 c0       	push   0xc0033300
c0008055:	c7 05 00 53 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0035300,0x0
c000805f:	c7 05 c0 2e 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032ec0,0x0
c0008069:	e8 82 84 ff ff       	call   c00004f0 <memset>
c000806e:	59                   	pop    ecx
c000806f:	5b                   	pop    ebx
c0008070:	6a 00                	push   0x0
c0008072:	68 2c 7f 00 c0       	push   0xc0007f2c
c0008077:	e8 28 5b 00 00       	call   c000dba4 <KeRegisterAtexit(void (*)(void*), void*)>
c000807c:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0008083:	e8 84 80 00 00       	call   c001010c <malloc>
c0008088:	83 c4 0c             	add    esp,0xc
c000808b:	ff 35 58 63 03 c0    	push   DWORD PTR ds:0xc0036358
c0008091:	68 a8 a6 02 c0       	push   0xc002a6a8
c0008096:	50                   	push   eax
c0008097:	89 c3                	mov    ebx,eax
c0008099:	e8 14 0b 00 00       	call   c0008bb2 <File::File(char const*, Process*)>
c000809e:	83 c4 10             	add    esp,0x10
c00080a1:	85 db                	test   ebx,ebx
c00080a3:	75 10                	jne    c00080b5 <KeInitialiseSymlinks()+0x75>
c00080a5:	83 ec 0c             	sub    esp,0xc
c00080a8:	68 37 a7 02 c0       	push   0xc002a737
c00080ad:	e8 ae 84 00 00       	call   c0010560 <KePanic(char const*)>
c00080b2:	83 c4 10             	add    esp,0x10
c00080b5:	83 ec 0c             	sub    esp,0xc
c00080b8:	53                   	push   ebx
c00080b9:	e8 d6 0d 00 00       	call   c0008e94 <File::exists()>
c00080be:	83 c4 10             	add    esp,0x10
c00080c1:	84 c0                	test   al,al
c00080c3:	75 3a                	jne    c00080ff <KeInitialiseSymlinks()+0xbf>
c00080c5:	52                   	push   edx
c00080c6:	52                   	push   edx
c00080c7:	6a 12                	push   0x12
c00080c9:	53                   	push   ebx
c00080ca:	e8 01 0b 00 00       	call   c0008bd0 <File::open(FileOpenMode)>
c00080cf:	83 c4 10             	add    esp,0x10
c00080d2:	85 c0                	test   eax,eax
c00080d4:	74 10                	je     c00080e6 <KeInitialiseSymlinks()+0xa6>
c00080d6:	83 ec 0c             	sub    esp,0xc
c00080d9:	68 54 a7 02 c0       	push   0xc002a754
c00080de:	e8 7d 84 00 00       	call   c0010560 <KePanic(char const*)>
c00080e3:	83 c4 10             	add    esp,0x10
c00080e6:	83 ec 0c             	sub    esp,0xc
c00080e9:	53                   	push   ebx
c00080ea:	e8 3f 0b 00 00       	call   c0008c2e <File::close()>
c00080ef:	83 c4 10             	add    esp,0x10
c00080f2:	85 db                	test   ebx,ebx
c00080f4:	0f 84 9e 00 00 00    	je     c0008198 <KeInitialiseSymlinks()+0x158>
c00080fa:	e9 8d 00 00 00       	jmp    c000818c <KeInitialiseSymlinks()+0x14c>
c00080ff:	50                   	push   eax
c0008100:	50                   	push   eax
c0008101:	6a 01                	push   0x1
c0008103:	53                   	push   ebx
c0008104:	e8 c7 0a 00 00       	call   c0008bd0 <File::open(FileOpenMode)>
c0008109:	83 c4 10             	add    esp,0x10
c000810c:	85 c0                	test   eax,eax
c000810e:	74 10                	je     c0008120 <KeInitialiseSymlinks()+0xe0>
c0008110:	83 ec 0c             	sub    esp,0xc
c0008113:	68 71 a7 02 c0       	push   0xc002a771
c0008118:	e8 43 84 00 00       	call   c0010560 <KePanic(char const*)>
c000811d:	83 c4 10             	add    esp,0x10
c0008120:	ff 05 00 53 03 c0    	inc    DWORD PTR ds:0xc0035300
c0008126:	83 ec 0c             	sub    esp,0xc
c0008129:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000812d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000812f:	57                   	push   edi
c0008130:	8d 74 24 20          	lea    esi,[esp+0x20]
c0008134:	56                   	push   esi
c0008135:	6a 00                	push   0x0
c0008137:	68 00 01 00 00       	push   0x100
c000813c:	53                   	push   ebx
c000813d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0008140:	83 c4 20             	add    esp,0x20
c0008143:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c000814b:	75 33                	jne    c0008180 <KeInitialiseSymlinks()+0x140>
c000814d:	83 ec 0c             	sub    esp,0xc
c0008150:	8b 03                	mov    eax,DWORD PTR [ebx]
c0008152:	57                   	push   edi
c0008153:	8d 54 24 18          	lea    edx,[esp+0x18]
c0008157:	52                   	push   edx
c0008158:	6a 00                	push   0x0
c000815a:	6a 08                	push   0x8
c000815c:	53                   	push   ebx
c000815d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0008160:	83 c4 20             	add    esp,0x20
c0008163:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0008168:	75 16                	jne    c0008180 <KeInitialiseSymlinks()+0x140>
c000816a:	89 f0                	mov    eax,esi
c000816c:	e8 c0 fd ff ff       	call   c0007f31 <KiGetSymlinkHash(char const*)>
c0008171:	ba 01 00 00 00       	mov    edx,0x1
c0008176:	0f b7 c0             	movzx  eax,ax
c0008179:	e8 79 fc ff ff       	call   c0007df7 <KiSetHashInTable(unsigned short, bool)>
c000817e:	eb a0                	jmp    c0008120 <KeInitialiseSymlinks()+0xe0>
c0008180:	83 ec 0c             	sub    esp,0xc
c0008183:	53                   	push   ebx
c0008184:	e8 a5 0a 00 00       	call   c0008c2e <File::close()>
c0008189:	83 c4 10             	add    esp,0x10
c000818c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000818e:	83 ec 0c             	sub    esp,0xc
c0008191:	53                   	push   ebx
c0008192:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0008195:	83 c4 10             	add    esp,0x10
c0008198:	81 c4 10 01 00 00    	add    esp,0x110
c000819e:	5b                   	pop    ebx
c000819f:	5e                   	pop    esi
c00081a0:	5f                   	pop    edi
c00081a1:	c3                   	ret    

c00081a2 <KiIsSymlinkRegistered(char const*)>:
c00081a2:	55                   	push   ebp
c00081a3:	57                   	push   edi
c00081a4:	56                   	push   esi
c00081a5:	53                   	push   ebx
c00081a6:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00081ac:	8b b4 24 30 01 00 00 	mov    esi,DWORD PTR [esp+0x130]
c00081b3:	89 f0                	mov    eax,esi
c00081b5:	e8 77 fd ff ff       	call   c0007f31 <KiGetSymlinkHash(char const*)>
c00081ba:	0f b7 c0             	movzx  eax,ax
c00081bd:	e8 1b fc ff ff       	call   c0007ddd <KiIsHashInTable(unsigned short)>
c00081c2:	31 d2                	xor    edx,edx
c00081c4:	88 c1                	mov    cl,al
c00081c6:	31 c0                	xor    eax,eax
c00081c8:	84 c9                	test   cl,cl
c00081ca:	0f 84 31 01 00 00    	je     c0008301 <KiIsSymlinkRegistered(char const*)+0x15f>
c00081d0:	31 db                	xor    ebx,ebx
c00081d2:	39 1d c0 2e 03 c0    	cmp    DWORD PTR ds:0xc0032ec0,ebx
c00081d8:	7e 30                	jle    c000820a <KiIsSymlinkRegistered(char const*)+0x68>
c00081da:	89 d8                	mov    eax,ebx
c00081dc:	c1 e0 08             	shl    eax,0x8
c00081df:	51                   	push   ecx
c00081e0:	05 00 2f 03 c0       	add    eax,0xc0032f00
c00081e5:	51                   	push   ecx
c00081e6:	50                   	push   eax
c00081e7:	56                   	push   esi
c00081e8:	e8 93 85 ff ff       	call   c0000780 <strcmp>
c00081ed:	83 c4 10             	add    esp,0x10
c00081f0:	85 c0                	test   eax,eax
c00081f2:	75 13                	jne    c0008207 <KiIsSymlinkRegistered(char const*)+0x65>
c00081f4:	8b 04 dd e0 2e 03 c0 	mov    eax,DWORD PTR [ebx*8-0x3ffcd120]
c00081fb:	8b 14 dd e4 2e 03 c0 	mov    edx,DWORD PTR [ebx*8-0x3ffcd11c]
c0008202:	e9 fa 00 00 00       	jmp    c0008301 <KiIsSymlinkRegistered(char const*)+0x15f>
c0008207:	43                   	inc    ebx
c0008208:	eb c8                	jmp    c00081d2 <KiIsSymlinkRegistered(char const*)+0x30>
c000820a:	83 ec 0c             	sub    esp,0xc
c000820d:	68 14 01 00 00       	push   0x114
c0008212:	e8 f5 7e 00 00       	call   c001010c <malloc>
c0008217:	83 c4 0c             	add    esp,0xc
c000821a:	ff 35 58 63 03 c0    	push   DWORD PTR ds:0xc0036358
c0008220:	68 a8 a6 02 c0       	push   0xc002a6a8
c0008225:	50                   	push   eax
c0008226:	89 c3                	mov    ebx,eax
c0008228:	e8 85 09 00 00       	call   c0008bb2 <File::File(char const*, Process*)>
c000822d:	83 c4 10             	add    esp,0x10
c0008230:	85 db                	test   ebx,ebx
c0008232:	75 12                	jne    c0008246 <KiIsSymlinkRegistered(char const*)+0xa4>
c0008234:	83 ec 0c             	sub    esp,0xc
c0008237:	68 8c a7 02 c0       	push   0xc002a78c
c000823c:	e8 1f 83 00 00       	call   c0010560 <KePanic(char const*)>
c0008241:	83 c4 10             	add    esp,0x10
c0008244:	eb 10                	jmp    c0008256 <KiIsSymlinkRegistered(char const*)+0xb4>
c0008246:	83 ec 0c             	sub    esp,0xc
c0008249:	53                   	push   ebx
c000824a:	e8 45 0c 00 00       	call   c0008e94 <File::exists()>
c000824f:	83 c4 10             	add    esp,0x10
c0008252:	84 c0                	test   al,al
c0008254:	74 de                	je     c0008234 <KiIsSymlinkRegistered(char const*)+0x92>
c0008256:	52                   	push   edx
c0008257:	52                   	push   edx
c0008258:	6a 01                	push   0x1
c000825a:	53                   	push   ebx
c000825b:	e8 70 09 00 00       	call   c0008bd0 <File::open(FileOpenMode)>
c0008260:	83 c4 10             	add    esp,0x10
c0008263:	85 c0                	test   eax,eax
c0008265:	74 10                	je     c0008277 <KiIsSymlinkRegistered(char const*)+0xd5>
c0008267:	83 ec 0c             	sub    esp,0xc
c000826a:	68 a7 a7 02 c0       	push   0xc002a7a7
c000826f:	e8 ec 82 00 00       	call   c0010560 <KePanic(char const*)>
c0008274:	83 c4 10             	add    esp,0x10
c0008277:	83 ec 0c             	sub    esp,0xc
c000827a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000827c:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c0008280:	55                   	push   ebp
c0008281:	8d 7c 24 20          	lea    edi,[esp+0x20]
c0008285:	57                   	push   edi
c0008286:	6a 00                	push   0x0
c0008288:	68 00 01 00 00       	push   0x100
c000828d:	53                   	push   ebx
c000828e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0008291:	83 c4 20             	add    esp,0x20
c0008294:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c000829c:	75 4b                	jne    c00082e9 <KiIsSymlinkRegistered(char const*)+0x147>
c000829e:	83 ec 0c             	sub    esp,0xc
c00082a1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00082a3:	55                   	push   ebp
c00082a4:	8d 54 24 18          	lea    edx,[esp+0x18]
c00082a8:	52                   	push   edx
c00082a9:	6a 00                	push   0x0
c00082ab:	6a 08                	push   0x8
c00082ad:	53                   	push   ebx
c00082ae:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00082b1:	83 c4 20             	add    esp,0x20
c00082b4:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c00082b9:	75 2e                	jne    c00082e9 <KiIsSymlinkRegistered(char const*)+0x147>
c00082bb:	50                   	push   eax
c00082bc:	50                   	push   eax
c00082bd:	57                   	push   edi
c00082be:	56                   	push   esi
c00082bf:	e8 bc 84 ff ff       	call   c0000780 <strcmp>
c00082c4:	83 c4 10             	add    esp,0x10
c00082c7:	85 c0                	test   eax,eax
c00082c9:	75 ac                	jne    c0008277 <KiIsSymlinkRegistered(char const*)+0xd5>
c00082cb:	83 ec 0c             	sub    esp,0xc
c00082ce:	53                   	push   ebx
c00082cf:	e8 5a 09 00 00       	call   c0008c2e <File::close()>
c00082d4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00082d6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00082d9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00082dc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00082e0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00082e4:	83 c4 10             	add    esp,0x10
c00082e7:	eb 18                	jmp    c0008301 <KiIsSymlinkRegistered(char const*)+0x15f>
c00082e9:	83 ec 0c             	sub    esp,0xc
c00082ec:	53                   	push   ebx
c00082ed:	e8 3c 09 00 00       	call   c0008c2e <File::close()>
c00082f2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00082f4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00082f7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00082fa:	83 c4 10             	add    esp,0x10
c00082fd:	31 c0                	xor    eax,eax
c00082ff:	31 d2                	xor    edx,edx
c0008301:	81 c4 1c 01 00 00    	add    esp,0x11c
c0008307:	5b                   	pop    ebx
c0008308:	5e                   	pop    esi
c0008309:	5f                   	pop    edi
c000830a:	5d                   	pop    ebp
c000830b:	c3                   	ret    

c000830c <KeDereferenceSymlink(char const*, char*)>:
c000830c:	55                   	push   ebp
c000830d:	57                   	push   edi
c000830e:	56                   	push   esi
c000830f:	53                   	push   ebx
c0008310:	83 ec 48             	sub    esp,0x48
c0008313:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c0008317:	56                   	push   esi
c0008318:	e8 85 fe ff ff       	call   c00081a2 <KiIsSymlinkRegistered(char const*)>
c000831d:	83 c4 10             	add    esp,0x10
c0008320:	89 c7                	mov    edi,eax
c0008322:	89 d0                	mov    eax,edx
c0008324:	09 f8                	or     eax,edi
c0008326:	75 07                	jne    c000832f <KeDereferenceSymlink(char const*, char*)+0x23>
c0008328:	31 c0                	xor    eax,eax
c000832a:	e9 7c 01 00 00       	jmp    c00084ab <KeDereferenceSymlink(char const*, char*)+0x19f>
c000832f:	83 ec 0c             	sub    esp,0xc
c0008332:	89 d5                	mov    ebp,edx
c0008334:	68 14 01 00 00       	push   0x114
c0008339:	e8 ce 7d 00 00       	call   c001010c <malloc>
c000833e:	83 c4 0c             	add    esp,0xc
c0008341:	ff 35 58 63 03 c0    	push   DWORD PTR ds:0xc0036358
c0008347:	56                   	push   esi
c0008348:	50                   	push   eax
c0008349:	89 c3                	mov    ebx,eax
c000834b:	e8 62 08 00 00       	call   c0008bb2 <File::File(char const*, Process*)>
c0008350:	83 c4 10             	add    esp,0x10
c0008353:	85 db                	test   ebx,ebx
c0008355:	0f 84 32 01 00 00    	je     c000848d <KeDereferenceSymlink(char const*, char*)+0x181>
c000835b:	56                   	push   esi
c000835c:	56                   	push   esi
c000835d:	6a 01                	push   0x1
c000835f:	53                   	push   ebx
c0008360:	e8 6b 08 00 00       	call   c0008bd0 <File::open(FileOpenMode)>
c0008365:	83 c4 10             	add    esp,0x10
c0008368:	85 c0                	test   eax,eax
c000836a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000836c:	74 09                	je     c0008377 <KeDereferenceSymlink(char const*, char*)+0x6b>
c000836e:	83 ec 0c             	sub    esp,0xc
c0008371:	53                   	push   ebx
c0008372:	e9 10 01 00 00       	jmp    c0008487 <KeDereferenceSymlink(char const*, char*)+0x17b>
c0008377:	83 ec 0c             	sub    esp,0xc
c000837a:	8d 74 24 18          	lea    esi,[esp+0x18]
c000837e:	56                   	push   esi
c000837f:	8d 54 24 37          	lea    edx,[esp+0x37]
c0008383:	52                   	push   edx
c0008384:	6a 00                	push   0x0
c0008386:	6a 08                	push   0x8
c0008388:	53                   	push   ebx
c0008389:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000838c:	83 c4 20             	add    esp,0x20
c000838f:	85 c0                	test   eax,eax
c0008391:	0f 85 e2 00 00 00    	jne    c0008479 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0008397:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000839c:	0f 85 d7 00 00 00    	jne    c0008479 <KeDereferenceSymlink(char const*, char*)+0x16d>
c00083a2:	83 ec 0c             	sub    esp,0xc
c00083a5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00083a7:	56                   	push   esi
c00083a8:	8d 54 24 20          	lea    edx,[esp+0x20]
c00083ac:	52                   	push   edx
c00083ad:	6a 00                	push   0x0
c00083af:	6a 08                	push   0x8
c00083b1:	53                   	push   ebx
c00083b2:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00083b5:	83 c4 20             	add    esp,0x20
c00083b8:	85 c0                	test   eax,eax
c00083ba:	0f 85 b9 00 00 00    	jne    c0008479 <KeDereferenceSymlink(char const*, char*)+0x16d>
c00083c0:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c00083c5:	0f 85 ae 00 00 00    	jne    c0008479 <KeDereferenceSymlink(char const*, char*)+0x16d>
c00083cb:	39 6c 24 14          	cmp    DWORD PTR [esp+0x14],ebp
c00083cf:	0f 85 53 ff ff ff    	jne    c0008328 <KeDereferenceSymlink(char const*, char*)+0x1c>
c00083d5:	39 7c 24 10          	cmp    DWORD PTR [esp+0x10],edi
c00083d9:	0f 85 49 ff ff ff    	jne    c0008328 <KeDereferenceSymlink(char const*, char*)+0x1c>
c00083df:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00083e7:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00083ef:	51                   	push   ecx
c00083f0:	8d 44 24 0f          	lea    eax,[esp+0xf]
c00083f4:	50                   	push   eax
c00083f5:	8d 44 24 20          	lea    eax,[esp+0x20]
c00083f9:	50                   	push   eax
c00083fa:	53                   	push   ebx
c00083fb:	e8 d2 0a 00 00       	call   c0008ed2 <File::stat(unsigned long long*, bool*)>
c0008400:	83 c4 10             	add    esp,0x10
c0008403:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0008408:	75 6f                	jne    c0008479 <KeDereferenceSymlink(char const*, char*)+0x16d>
c000840a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000840e:	31 c9                	xor    ecx,ecx
c0008410:	bf 0f 00 00 00       	mov    edi,0xf
c0008415:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008419:	39 c7                	cmp    edi,eax
c000841b:	89 cf                	mov    edi,ecx
c000841d:	19 d7                	sbb    edi,edx
c000841f:	73 58                	jae    c0008479 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0008421:	83 c0 f0             	add    eax,0xfffffff0
c0008424:	bf ff 00 00 00       	mov    edi,0xff
c0008429:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000842d:	83 d2 ff             	adc    edx,0xffffffff
c0008430:	39 c7                	cmp    edi,eax
c0008432:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008436:	19 d1                	sbb    ecx,edx
c0008438:	72 53                	jb     c000848d <KeDereferenceSymlink(char const*, char*)+0x181>
c000843a:	40                   	inc    eax
c000843b:	52                   	push   edx
c000843c:	50                   	push   eax
c000843d:	6a 00                	push   0x0
c000843f:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0008443:	e8 a8 80 ff ff       	call   c00004f0 <memset>
c0008448:	8b 03                	mov    eax,DWORD PTR [ebx]
c000844a:	89 34 24             	mov    DWORD PTR [esp],esi
c000844d:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c0008451:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008455:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008459:	53                   	push   ebx
c000845a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000845d:	83 c4 20             	add    esp,0x20
c0008460:	85 c0                	test   eax,eax
c0008462:	75 15                	jne    c0008479 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0008464:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008468:	89 c7                	mov    edi,eax
c000846a:	c1 ff 1f             	sar    edi,0x1f
c000846d:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0008471:	75 06                	jne    c0008479 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0008473:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0008477:	74 19                	je     c0008492 <KeDereferenceSymlink(char const*, char*)+0x186>
c0008479:	83 ec 0c             	sub    esp,0xc
c000847c:	53                   	push   ebx
c000847d:	e8 ac 07 00 00       	call   c0008c2e <File::close()>
c0008482:	8b 03                	mov    eax,DWORD PTR [ebx]
c0008484:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008487:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000848a:	83 c4 10             	add    esp,0x10
c000848d:	83 c8 ff             	or     eax,0xffffffff
c0008490:	eb 19                	jmp    c00084ab <KeDereferenceSymlink(char const*, char*)+0x19f>
c0008492:	83 ec 0c             	sub    esp,0xc
c0008495:	53                   	push   ebx
c0008496:	e8 93 07 00 00       	call   c0008c2e <File::close()>
c000849b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000849d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00084a0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00084a3:	83 c4 10             	add    esp,0x10
c00084a6:	b8 01 00 00 00       	mov    eax,0x1
c00084ab:	83 c4 3c             	add    esp,0x3c
c00084ae:	5b                   	pop    ebx
c00084af:	5e                   	pop    esi
c00084b0:	5f                   	pop    edi
c00084b1:	5d                   	pop    ebp
c00084b2:	c3                   	ret    

c00084b3 <KeCreateSymlink(char const*, char const*)>:
c00084b3:	55                   	push   ebp
c00084b4:	57                   	push   edi
c00084b5:	56                   	push   esi
c00084b6:	53                   	push   ebx
c00084b7:	83 ec 38             	sub    esp,0x38
c00084ba:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c00084be:	68 14 01 00 00       	push   0x114
c00084c3:	e8 44 7c 00 00       	call   c001010c <malloc>
c00084c8:	6a 00                	push   0x0
c00084ca:	ff 35 58 63 03 c0    	push   DWORD PTR ds:0xc0036358
c00084d0:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00084d4:	89 c3                	mov    ebx,eax
c00084d6:	50                   	push   eax
c00084d7:	e8 d8 05 00 00       	call   c0008ab4 <File::File(char const*, Process*, bool)>
c00084dc:	83 c4 20             	add    esp,0x20
c00084df:	85 db                	test   ebx,ebx
c00084e1:	b8 01 00 00 00       	mov    eax,0x1
c00084e6:	0f 84 fb 00 00 00    	je     c00085e7 <KeCreateSymlink(char const*, char const*)+0x134>
c00084ec:	52                   	push   edx
c00084ed:	52                   	push   edx
c00084ee:	6a 12                	push   0x12
c00084f0:	53                   	push   ebx
c00084f1:	e8 da 06 00 00       	call   c0008bd0 <File::open(FileOpenMode)>
c00084f6:	83 c4 10             	add    esp,0x10
c00084f9:	85 c0                	test   eax,eax
c00084fb:	74 0b                	je     c0008508 <KeCreateSymlink(char const*, char const*)+0x55>
c00084fd:	83 ec 0c             	sub    esp,0xc
c0008500:	8b 03                	mov    eax,DWORD PTR [ebx]
c0008502:	53                   	push   ebx
c0008503:	e9 d4 00 00 00       	jmp    c00085dc <KeCreateSymlink(char const*, char const*)+0x129>
c0008508:	8d 7c 24 17          	lea    edi,[esp+0x17]
c000850c:	be c2 a7 02 c0       	mov    esi,0xc002a7c2
c0008511:	b9 09 00 00 00       	mov    ecx,0x9
c0008516:	fc                   	cld    
c0008517:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008519:	83 ec 0c             	sub    esp,0xc
c000851c:	8d 74 24 10          	lea    esi,[esp+0x10]
c0008520:	8b 03                	mov    eax,DWORD PTR [ebx]
c0008522:	56                   	push   esi
c0008523:	8d 54 24 27          	lea    edx,[esp+0x27]
c0008527:	52                   	push   edx
c0008528:	6a 00                	push   0x0
c000852a:	6a 08                	push   0x8
c000852c:	53                   	push   ebx
c000852d:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0008530:	83 c4 20             	add    esp,0x20
c0008533:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0008538:	0f 85 90 00 00 00    	jne    c00085ce <KeCreateSymlink(char const*, char const*)+0x11b>
c000853e:	85 c0                	test   eax,eax
c0008540:	0f 85 88 00 00 00    	jne    c00085ce <KeCreateSymlink(char const*, char const*)+0x11b>
c0008546:	e8 07 fa ff ff       	call   c0007f52 <KiCreateSymlinkID()>
c000854b:	83 ec 0c             	sub    esp,0xc
c000854e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0008552:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0008556:	8b 03                	mov    eax,DWORD PTR [ebx]
c0008558:	56                   	push   esi
c0008559:	8d 54 24 18          	lea    edx,[esp+0x18]
c000855d:	52                   	push   edx
c000855e:	6a 00                	push   0x0
c0008560:	6a 08                	push   0x8
c0008562:	53                   	push   ebx
c0008563:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0008566:	83 c4 20             	add    esp,0x20
c0008569:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000856e:	75 5e                	jne    c00085ce <KeCreateSymlink(char const*, char const*)+0x11b>
c0008570:	85 c0                	test   eax,eax
c0008572:	75 5a                	jne    c00085ce <KeCreateSymlink(char const*, char const*)+0x11b>
c0008574:	8b 03                	mov    eax,DWORD PTR [ebx]
c0008576:	83 ec 0c             	sub    esp,0xc
c0008579:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000857c:	55                   	push   ebp
c000857d:	e8 fe 7f ff ff       	call   c0000580 <strlen>
c0008582:	31 d2                	xor    edx,edx
c0008584:	89 34 24             	mov    DWORD PTR [esp],esi
c0008587:	55                   	push   ebp
c0008588:	52                   	push   edx
c0008589:	50                   	push   eax
c000858a:	53                   	push   ebx
c000858b:	ff d7                	call   edi
c000858d:	83 c4 14             	add    esp,0x14
c0008590:	55                   	push   ebp
c0008591:	89 c6                	mov    esi,eax
c0008593:	e8 e8 7f ff ff       	call   c0000580 <strlen>
c0008598:	83 c4 10             	add    esp,0x10
c000859b:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c000859f:	75 2d                	jne    c00085ce <KeCreateSymlink(char const*, char const*)+0x11b>
c00085a1:	85 f6                	test   esi,esi
c00085a3:	75 29                	jne    c00085ce <KeCreateSymlink(char const*, char const*)+0x11b>
c00085a5:	50                   	push   eax
c00085a6:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00085aa:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00085ae:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c00085b2:	e8 06 fa ff ff       	call   c0007fbd <KeRegisterSymlink(char const*, unsigned long long)>
c00085b7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00085ba:	e8 6f 06 00 00       	call   c0008c2e <File::close()>
c00085bf:	8b 03                	mov    eax,DWORD PTR [ebx]
c00085c1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00085c4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00085c7:	83 c4 10             	add    esp,0x10
c00085ca:	31 c0                	xor    eax,eax
c00085cc:	eb 19                	jmp    c00085e7 <KeCreateSymlink(char const*, char const*)+0x134>
c00085ce:	83 ec 0c             	sub    esp,0xc
c00085d1:	53                   	push   ebx
c00085d2:	e8 57 06 00 00       	call   c0008c2e <File::close()>
c00085d7:	8b 03                	mov    eax,DWORD PTR [ebx]
c00085d9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00085dc:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00085df:	83 c4 10             	add    esp,0x10
c00085e2:	b8 01 00 00 00       	mov    eax,0x1
c00085e7:	83 c4 2c             	add    esp,0x2c
c00085ea:	5b                   	pop    ebx
c00085eb:	5e                   	pop    esi
c00085ec:	5f                   	pop    edi
c00085ed:	5d                   	pop    ebp
c00085ee:	c3                   	ret    
c00085ef:	90                   	nop

c00085f0 <File::read(unsigned long long, void*, int*)>:
c00085f0:	53                   	push   ebx
c00085f1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085f5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00085f9:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0008600:	83 f8 19             	cmp    eax,0x19
c0008603:	77 35                	ja     c000863a <File::read(unsigned long long, void*, int*)+0x4a>
c0008605:	8b 04 85 e0 5a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffca520]
c000860c:	85 c0                	test   eax,eax
c000860e:	74 2a                	je     c000863a <File::read(unsigned long long, void*, int*)+0x4a>
c0008610:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0008616:	85 c0                	test   eax,eax
c0008618:	74 20                	je     c000863a <File::read(unsigned long long, void*, int*)+0x4a>
c000861a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000861e:	74 21                	je     c0008641 <File::read(unsigned long long, void*, int*)+0x51>
c0008620:	8b 08                	mov    ecx,DWORD PTR [eax]
c0008622:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008626:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000862c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008630:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008634:	5b                   	pop    ebx
c0008635:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c0008638:	ff e0                	jmp    eax
c000863a:	b8 0b 00 00 00       	mov    eax,0xb
c000863f:	eb 05                	jmp    c0008646 <File::read(unsigned long long, void*, int*)+0x56>
c0008641:	b8 05 00 00 00       	mov    eax,0x5
c0008646:	5b                   	pop    ebx
c0008647:	c3                   	ret    

c0008648 <File::write(unsigned long long, void*, int*)>:
c0008648:	53                   	push   ebx
c0008649:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000864d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0008651:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0008658:	83 f8 19             	cmp    eax,0x19
c000865b:	77 35                	ja     c0008692 <File::write(unsigned long long, void*, int*)+0x4a>
c000865d:	8b 04 85 e0 5a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffca520]
c0008664:	85 c0                	test   eax,eax
c0008666:	74 2a                	je     c0008692 <File::write(unsigned long long, void*, int*)+0x4a>
c0008668:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000866e:	85 c0                	test   eax,eax
c0008670:	74 20                	je     c0008692 <File::write(unsigned long long, void*, int*)+0x4a>
c0008672:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008676:	74 21                	je     c0008699 <File::write(unsigned long long, void*, int*)+0x51>
c0008678:	8b 08                	mov    ecx,DWORD PTR [eax]
c000867a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000867e:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0008684:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008688:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000868c:	5b                   	pop    ebx
c000868d:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c0008690:	ff e0                	jmp    eax
c0008692:	b8 0b 00 00 00       	mov    eax,0xb
c0008697:	eb 05                	jmp    c000869e <File::write(unsigned long long, void*, int*)+0x56>
c0008699:	b8 05 00 00 00       	mov    eax,0x5
c000869e:	5b                   	pop    ebx
c000869f:	c3                   	ret    

c00086a0 <Directory::read(unsigned long long, void*, int*)>:
c00086a0:	53                   	push   ebx
c00086a1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00086a5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00086a9:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c00086b0:	83 f8 19             	cmp    eax,0x19
c00086b3:	77 35                	ja     c00086ea <Directory::read(unsigned long long, void*, int*)+0x4a>
c00086b5:	8b 04 85 e0 5a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffca520]
c00086bc:	85 c0                	test   eax,eax
c00086be:	74 2a                	je     c00086ea <Directory::read(unsigned long long, void*, int*)+0x4a>
c00086c0:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c00086c6:	85 c0                	test   eax,eax
c00086c8:	74 20                	je     c00086ea <Directory::read(unsigned long long, void*, int*)+0x4a>
c00086ca:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00086ce:	74 21                	je     c00086f1 <Directory::read(unsigned long long, void*, int*)+0x51>
c00086d0:	8b 08                	mov    ecx,DWORD PTR [eax]
c00086d2:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00086d6:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c00086dc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00086e0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00086e4:	5b                   	pop    ebx
c00086e5:	8b 41 54             	mov    eax,DWORD PTR [ecx+0x54]
c00086e8:	ff e0                	jmp    eax
c00086ea:	b8 0b 00 00 00       	mov    eax,0xb
c00086ef:	eb 05                	jmp    c00086f6 <Directory::read(unsigned long long, void*, int*)+0x56>
c00086f1:	b8 05 00 00 00       	mov    eax,0x5
c00086f6:	5b                   	pop    ebx
c00086f7:	c3                   	ret    

c00086f8 <Directory::write(unsigned long long, void*, int*)>:
c00086f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00086fc:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0008703:	b8 0b 00 00 00       	mov    eax,0xb
c0008708:	83 fa 19             	cmp    edx,0x19
c000870b:	77 18                	ja     c0008725 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000870d:	8b 14 95 e0 5a 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffca520]
c0008714:	85 d2                	test   edx,edx
c0008716:	74 0d                	je     c0008725 <Directory::write(unsigned long long, void*, int*)+0x2d>
c0008718:	83 ba 74 01 00 00 01 	cmp    DWORD PTR [edx+0x174],0x1
c000871f:	19 c0                	sbb    eax,eax
c0008721:	83 e0 0a             	and    eax,0xa
c0008724:	40                   	inc    eax
c0008725:	c3                   	ret    

c0008726 <File::isAtty()>:
c0008726:	31 c0                	xor    eax,eax
c0008728:	c3                   	ret    
c0008729:	90                   	nop

c000872a <Directory::isAtty()>:
c000872a:	31 c0                	xor    eax,eax
c000872c:	c3                   	ret    
c000872d:	90                   	nop

c000872e <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000872e:	b8 0a 00 00 00       	mov    eax,0xa
c0008733:	c3                   	ret    

c0008734 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c0008734:	b8 0a 00 00 00       	mov    eax,0xa
c0008739:	c3                   	ret    

c000873a <Filesystem::allocateSwapfile(char const*, int)>:
c000873a:	31 c0                	xor    eax,eax
c000873c:	31 d2                	xor    edx,edx
c000873e:	c3                   	ret    
c000873f:	90                   	nop

c0008740 <File::~File()>:
c0008740:	83 ec 0c             	sub    esp,0xc
c0008743:	ba 98 a8 02 c0       	mov    edx,0xc002a898
c0008748:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000874c:	89 10                	mov    DWORD PTR [eax],edx
c000874e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008752:	83 ec 0c             	sub    esp,0xc
c0008755:	50                   	push   eax
c0008756:	e8 df b0 00 00       	call   c001383a <UnixFile::~UnixFile()>
c000875b:	83 c4 10             	add    esp,0x10
c000875e:	90                   	nop
c000875f:	83 c4 0c             	add    esp,0xc
c0008762:	c3                   	ret    
c0008763:	90                   	nop

c0008764 <File::~File()>:
c0008764:	83 ec 0c             	sub    esp,0xc
c0008767:	83 ec 0c             	sub    esp,0xc
c000876a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000876e:	e8 cd ff ff ff       	call   c0008740 <File::~File()>
c0008773:	83 c4 10             	add    esp,0x10
c0008776:	83 ec 08             	sub    esp,0x8
c0008779:	68 14 01 00 00       	push   0x114
c000877e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008782:	e8 85 55 00 00       	call   c000dd0c <operator delete(void*, unsigned long)>
c0008787:	83 c4 10             	add    esp,0x10
c000878a:	83 c4 0c             	add    esp,0xc
c000878d:	c3                   	ret    

c000878e <Directory::~Directory()>:
c000878e:	83 ec 0c             	sub    esp,0xc
c0008791:	ba b4 a8 02 c0       	mov    edx,0xc002a8b4
c0008796:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000879a:	89 10                	mov    DWORD PTR [eax],edx
c000879c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00087a0:	83 ec 0c             	sub    esp,0xc
c00087a3:	50                   	push   eax
c00087a4:	e8 91 b0 00 00       	call   c001383a <UnixFile::~UnixFile()>
c00087a9:	83 c4 10             	add    esp,0x10
c00087ac:	90                   	nop
c00087ad:	83 c4 0c             	add    esp,0xc
c00087b0:	c3                   	ret    
c00087b1:	90                   	nop

c00087b2 <Directory::~Directory()>:
c00087b2:	83 ec 0c             	sub    esp,0xc
c00087b5:	83 ec 0c             	sub    esp,0xc
c00087b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00087bc:	e8 cd ff ff ff       	call   c000878e <Directory::~Directory()>
c00087c1:	83 c4 10             	add    esp,0x10
c00087c4:	83 ec 08             	sub    esp,0x8
c00087c7:	68 14 01 00 00       	push   0x114
c00087cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00087d0:	e8 37 55 00 00       	call   c000dd0c <operator delete(void*, unsigned long)>
c00087d5:	83 c4 10             	add    esp,0x10
c00087d8:	83 c4 0c             	add    esp,0xc
c00087db:	c3                   	ret    

c00087dc <Filesystem::Filesystem()>:
c00087dc:	ba 2c a8 02 c0       	mov    edx,0xc002a82c
c00087e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00087e5:	89 10                	mov    DWORD PTR [eax],edx
c00087e7:	8b 15 04 53 03 c0    	mov    edx,DWORD PTR ds:0xc0035304
c00087ed:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00087f1:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00087f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00087f8:	a3 04 53 03 c0       	mov    ds:0xc0035304,eax
c00087fd:	90                   	nop
c00087fe:	c3                   	ret    
c00087ff:	90                   	nop

c0008800 <Filesystem::~Filesystem()>:
c0008800:	ba 2c a8 02 c0       	mov    edx,0xc002a82c
c0008805:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008809:	89 10                	mov    DWORD PTR [eax],edx
c000880b:	90                   	nop
c000880c:	c3                   	ret    
c000880d:	90                   	nop

c000880e <Filesystem::~Filesystem()>:
c000880e:	83 ec 0c             	sub    esp,0xc
c0008811:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0008815:	e8 e6 ff ff ff       	call   c0008800 <Filesystem::~Filesystem()>
c000881a:	83 c4 04             	add    esp,0x4
c000881d:	83 ec 08             	sub    esp,0x8
c0008820:	6a 08                	push   0x8
c0008822:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008826:	e8 e1 54 00 00       	call   c000dd0c <operator delete(void*, unsigned long)>
c000882b:	83 c4 10             	add    esp,0x10
c000882e:	83 c4 0c             	add    esp,0xc
c0008831:	c3                   	ret    

c0008832 <Fs::getcwd(Process*, char*, int)>:
c0008832:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008836:	31 c0                	xor    eax,eax
c0008838:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000883c:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000883f:	7d 15                	jge    c0008856 <Fs::getcwd(Process*, char*, int)+0x24>
c0008841:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0008845:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000884c:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000884f:	84 c9                	test   cl,cl
c0008851:	74 06                	je     c0008859 <Fs::getcwd(Process*, char*, int)+0x27>
c0008853:	40                   	inc    eax
c0008854:	eb e2                	jmp    c0008838 <Fs::getcwd(Process*, char*, int)+0x6>
c0008856:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0008859:	31 c0                	xor    eax,eax
c000885b:	c3                   	ret    

c000885c <Fs::initVFS()>:
c000885c:	83 ec 18             	sub    esp,0x18
c000885f:	6a 08                	push   0x8
c0008861:	e8 a6 78 00 00       	call   c001010c <malloc>
c0008866:	89 04 24             	mov    DWORD PTR [esp],eax
c0008869:	e8 56 65 01 00       	call   c001edc4 <FAT::FAT()>
c000886e:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0008875:	e8 92 78 00 00       	call   c001010c <malloc>
c000887a:	89 04 24             	mov    DWORD PTR [esp],eax
c000887d:	e8 70 74 01 00       	call   c001fcf2 <ISO9660::ISO9660()>
c0008882:	83 c4 1c             	add    esp,0x1c
c0008885:	c3                   	ret    

c0008886 <Fs::standardiseFiles(char*, char const*, char const*, bool)>:
c0008886:	55                   	push   ebp
c0008887:	57                   	push   edi
c0008888:	56                   	push   esi
c0008889:	53                   	push   ebx
c000888a:	81 ec 20 04 00 00    	sub    esp,0x420
c0008890:	8a 84 24 40 04 00 00 	mov    al,BYTE PTR [esp+0x440]
c0008897:	8b b4 24 38 04 00 00 	mov    esi,DWORD PTR [esp+0x438]
c000889e:	8b 9c 24 34 04 00 00 	mov    ebx,DWORD PTR [esp+0x434]
c00088a5:	8b ac 24 3c 04 00 00 	mov    ebp,DWORD PTR [esp+0x43c]
c00088ac:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c00088b0:	68 00 04 00 00       	push   0x400
c00088b5:	6a 00                	push   0x0
c00088b7:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c00088bb:	57                   	push   edi
c00088bc:	e8 2f 7c ff ff       	call   c00004f0 <memset>
c00088c1:	83 c4 10             	add    esp,0x10
c00088c4:	80 7e 01 3a          	cmp    BYTE PTR [esi+0x1],0x3a
c00088c8:	75 0b                	jne    c00088d5 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x4f>
c00088ca:	50                   	push   eax
c00088cb:	50                   	push   eax
c00088cc:	56                   	push   esi
c00088cd:	57                   	push   edi
c00088ce:	e8 7d 7d ff ff       	call   c0000650 <strcpy>
c00088d3:	eb 45                	jmp    c000891a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x94>
c00088d5:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00088d8:	83 f8 2f             	cmp    eax,0x2f
c00088db:	74 05                	je     c00088e2 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x5c>
c00088dd:	83 f8 5c             	cmp    eax,0x5c
c00088e0:	75 19                	jne    c00088fb <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x75>
c00088e2:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c00088e5:	3c 60                	cmp    al,0x60
c00088e7:	7e 03                	jle    c00088ec <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x66>
c00088e9:	83 e8 20             	sub    eax,0x20
c00088ec:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c00088f0:	66 c7 44 24 11 3a 2f 	mov    WORD PTR [esp+0x11],0x2f3a
c00088f7:	50                   	push   eax
c00088f8:	50                   	push   eax
c00088f9:	eb 18                	jmp    c0008913 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x8d>
c00088fb:	50                   	push   eax
c00088fc:	50                   	push   eax
c00088fd:	55                   	push   ebp
c00088fe:	57                   	push   edi
c00088ff:	e8 4c 7d ff ff       	call   c0000650 <strcpy>
c0008904:	58                   	pop    eax
c0008905:	5a                   	pop    edx
c0008906:	68 b6 c1 02 c0       	push   0xc002c1b6
c000890b:	57                   	push   edi
c000890c:	e8 5f 7f ff ff       	call   c0000870 <strcat>
c0008911:	59                   	pop    ecx
c0008912:	5d                   	pop    ebp
c0008913:	56                   	push   esi
c0008914:	57                   	push   edi
c0008915:	e8 56 7f ff ff       	call   c0000870 <strcat>
c000891a:	83 c4 10             	add    esp,0x10
c000891d:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0008921:	3c 60                	cmp    al,0x60
c0008923:	7e 03                	jle    c0008928 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xa2>
c0008925:	83 e8 20             	sub    eax,0x20
c0008928:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c000892c:	be 03 00 00 00       	mov    esi,0x3
c0008931:	88 03                	mov    BYTE PTR [ebx],al
c0008933:	b8 03 00 00 00       	mov    eax,0x3
c0008938:	66 c7 44 24 11 3a 2f 	mov    WORD PTR [esp+0x11],0x2f3a
c000893f:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c0008945:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0008949:	0f b6 7c 34 10       	movzx  edi,BYTE PTR [esp+esi*1+0x10]
c000894e:	89 fa                	mov    edx,edi
c0008950:	0f be ea             	movsx  ebp,dl
c0008953:	85 ed                	test   ebp,ebp
c0008955:	0f 84 a1 00 00 00    	je     c00089fc <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x176>
c000895b:	8d 56 01             	lea    edx,[esi+0x1]
c000895e:	83 fd 2f             	cmp    ebp,0x2f
c0008961:	74 05                	je     c0008968 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xe2>
c0008963:	83 fd 5c             	cmp    ebp,0x5c
c0008966:	75 12                	jne    c000897a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf4>
c0008968:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000896d:	89 c5                	mov    ebp,eax
c000896f:	74 09                	je     c000897a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf4>
c0008971:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c0008975:	40                   	inc    eax
c0008976:	89 d6                	mov    esi,edx
c0008978:	eb cf                	jmp    c0008949 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xc3>
c000897a:	80 7c 34 0f 2f       	cmp    BYTE PTR [esp+esi*1+0xf],0x2f
c000897f:	89 f9                	mov    ecx,edi
c0008981:	0f be e9             	movsx  ebp,cl
c0008984:	75 61                	jne    c00089e7 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x161>
c0008986:	83 fd 2e             	cmp    ebp,0x2e
c0008989:	75 5c                	jne    c00089e7 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x161>
c000898b:	80 7c 14 10 2e       	cmp    BYTE PTR [esp+edx*1+0x10],0x2e
c0008990:	0f be 6c 34 12       	movsx  ebp,BYTE PTR [esp+esi*1+0x12]
c0008995:	74 19                	je     c00089b0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x12a>
c0008997:	83 fd 2e             	cmp    ebp,0x2e
c000899a:	74 55                	je     c00089f1 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x16b>
c000899c:	89 f2                	mov    edx,esi
c000899e:	42                   	inc    edx
c000899f:	0f be 4c 14 10       	movsx  ecx,BYTE PTR [esp+edx*1+0x10]
c00089a4:	83 f9 2f             	cmp    ecx,0x2f
c00089a7:	74 f5                	je     c000899e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x118>
c00089a9:	83 f9 5c             	cmp    ecx,0x5c
c00089ac:	74 f0                	je     c000899e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x118>
c00089ae:	eb c6                	jmp    c0008976 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c00089b0:	83 fd 2e             	cmp    ebp,0x2e
c00089b3:	74 3c                	je     c00089f1 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x16b>
c00089b5:	83 f8 03             	cmp    eax,0x3
c00089b8:	74 bc                	je     c0008976 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c00089ba:	42                   	inc    edx
c00089bb:	0f be 4c 14 10       	movsx  ecx,BYTE PTR [esp+edx*1+0x10]
c00089c0:	83 f9 2f             	cmp    ecx,0x2f
c00089c3:	74 f5                	je     c00089ba <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x134>
c00089c5:	83 f9 5c             	cmp    ecx,0x5c
c00089c8:	74 f0                	je     c00089ba <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x134>
c00089ca:	48                   	dec    eax
c00089cb:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c00089cf:	75 06                	jne    c00089d7 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x151>
c00089d1:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c00089d5:	eb f3                	jmp    c00089ca <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x144>
c00089d7:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c00089db:	74 07                	je     c00089e4 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x15e>
c00089dd:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c00089e1:	48                   	dec    eax
c00089e2:	eb f3                	jmp    c00089d7 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x151>
c00089e4:	40                   	inc    eax
c00089e5:	eb 8f                	jmp    c0008976 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c00089e7:	83 fd 2f             	cmp    ebp,0x2f
c00089ea:	74 8a                	je     c0008976 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c00089ec:	83 fd 5c             	cmp    ebp,0x5c
c00089ef:	74 85                	je     c0008976 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c00089f1:	89 f9                	mov    ecx,edi
c00089f3:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c00089f6:	40                   	inc    eax
c00089f7:	e9 7a ff ff ff       	jmp    c0008976 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c00089fc:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0008a00:	83 ec 0c             	sub    esp,0xc
c0008a03:	53                   	push   ebx
c0008a04:	e8 77 7b ff ff       	call   c0000580 <strlen>
c0008a09:	83 c4 10             	add    esp,0x10
c0008a0c:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c0008a11:	74 1c                	je     c0008a2f <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1a9>
c0008a13:	83 ec 0c             	sub    esp,0xc
c0008a16:	53                   	push   ebx
c0008a17:	e8 64 7b ff ff       	call   c0000580 <strlen>
c0008a1c:	83 c4 10             	add    esp,0x10
c0008a1f:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0008a24:	74 09                	je     c0008a2f <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1a9>
c0008a26:	31 ff                	xor    edi,edi
c0008a28:	0f b6 74 24 0f       	movzx  esi,BYTE PTR [esp+0xf]
c0008a2d:	eb 5c                	jmp    c0008a8b <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x205>
c0008a2f:	83 ec 0c             	sub    esp,0xc
c0008a32:	53                   	push   ebx
c0008a33:	e8 48 7b ff ff       	call   c0000580 <strlen>
c0008a38:	83 c4 10             	add    esp,0x10
c0008a3b:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c0008a40:	74 e4                	je     c0008a26 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1a0>
c0008a42:	83 ec 0c             	sub    esp,0xc
c0008a45:	53                   	push   ebx
c0008a46:	e8 35 7b ff ff       	call   c0000580 <strlen>
c0008a4b:	83 c4 10             	add    esp,0x10
c0008a4e:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0008a53:	eb ab                	jmp    c0008a00 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x17a>
c0008a55:	52                   	push   edx
c0008a56:	52                   	push   edx
c0008a57:	53                   	push   ebx
c0008a58:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0008a5c:	55                   	push   ebp
c0008a5d:	e8 ee 7b ff ff       	call   c0000650 <strcpy>
c0008a62:	59                   	pop    ecx
c0008a63:	58                   	pop    eax
c0008a64:	53                   	push   ebx
c0008a65:	55                   	push   ebp
c0008a66:	e8 a1 f8 ff ff       	call   c000830c <KeDereferenceSymlink(char const*, char*)>
c0008a6b:	83 c4 10             	add    esp,0x10
c0008a6e:	48                   	dec    eax
c0008a6f:	75 37                	jne    c0008aa8 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x222>
c0008a71:	50                   	push   eax
c0008a72:	53                   	push   ebx
c0008a73:	55                   	push   ebp
c0008a74:	68 cb a7 02 c0       	push   0xc002a7cb
c0008a79:	e8 e8 e4 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0008a7e:	8d 47 01             	lea    eax,[edi+0x1]
c0008a81:	83 c4 10             	add    esp,0x10
c0008a84:	83 ff 14             	cmp    edi,0x14
c0008a87:	74 08                	je     c0008a91 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x20b>
c0008a89:	89 c7                	mov    edi,eax
c0008a8b:	85 f6                	test   esi,esi
c0008a8d:	75 c6                	jne    c0008a55 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1cf>
c0008a8f:	eb 17                	jmp    c0008aa8 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x222>
c0008a91:	83 ec 0c             	sub    esp,0xc
c0008a94:	bf 15 00 00 00       	mov    edi,0x15
c0008a99:	68 e6 a7 02 c0       	push   0xc002a7e6
c0008a9e:	e8 bd 7a 00 00       	call   c0010560 <KePanic(char const*)>
c0008aa3:	83 c4 10             	add    esp,0x10
c0008aa6:	eb e3                	jmp    c0008a8b <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x205>
c0008aa8:	81 c4 1c 04 00 00    	add    esp,0x41c
c0008aae:	5b                   	pop    ebx
c0008aaf:	5e                   	pop    esi
c0008ab0:	5f                   	pop    edi
c0008ab1:	5d                   	pop    ebp
c0008ab2:	c3                   	ret    
c0008ab3:	90                   	nop

c0008ab4 <File::File(char const*, Process*, bool)>:
c0008ab4:	83 ec 1c             	sub    esp,0x1c
c0008ab7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008abb:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0008abf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008ac3:	83 ec 08             	sub    esp,0x8
c0008ac6:	6a 00                	push   0x0
c0008ac8:	50                   	push   eax
c0008ac9:	e8 86 ab 00 00       	call   c0013654 <UnixFile::UnixFile(int)>
c0008ace:	83 c4 10             	add    esp,0x10
c0008ad1:	ba 98 a8 02 c0       	mov    edx,0xc002a898
c0008ad6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008ada:	89 10                	mov    DWORD PTR [eax],edx
c0008adc:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0008ae1:	85 c0                	test   eax,eax
c0008ae3:	74 0f                	je     c0008af4 <File::File(char const*, Process*, bool)+0x40>
c0008ae5:	a1 58 63 03 c0       	mov    eax,ds:0xc0036358
c0008aea:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c0008aee:	74 04                	je     c0008af4 <File::File(char const*, Process*, bool)+0x40>
c0008af0:	b0 01                	mov    al,0x1
c0008af2:	eb 02                	jmp    c0008af6 <File::File(char const*, Process*, bool)+0x42>
c0008af4:	b0 00                	mov    al,0x0
c0008af6:	0f b6 c0             	movzx  eax,al
c0008af9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0008afd:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c0008b03:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0008b07:	83 c2 0d             	add    edx,0xd
c0008b0a:	50                   	push   eax
c0008b0b:	51                   	push   ecx
c0008b0c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0008b10:	52                   	push   edx
c0008b11:	e8 70 fd ff ff       	call   c0008886 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0008b16:	83 c4 10             	add    esp,0x10
c0008b19:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008b1d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008b20:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0008b24:	83 c2 0d             	add    edx,0xd
c0008b27:	83 ec 04             	sub    esp,0x4
c0008b2a:	50                   	push   eax
c0008b2b:	52                   	push   edx
c0008b2c:	68 0c a8 02 c0       	push   0xc002a80c
c0008b31:	e8 30 e4 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0008b36:	83 c4 10             	add    esp,0x10
c0008b39:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008b3d:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0008b40:	83 e8 41             	sub    eax,0x41
c0008b43:	88 c2                	mov    dl,al
c0008b45:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008b49:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0008b4f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008b53:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0008b57:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008b5b:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c0008b61:	0f b6 c0             	movzx  eax,al
c0008b64:	8b 04 85 e0 5a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffca520]
c0008b6b:	85 c0                	test   eax,eax
c0008b6d:	74 3e                	je     c0008bad <File::File(char const*, Process*, bool)+0xf9>
c0008b6f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008b73:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c0008b79:	0f b6 c0             	movzx  eax,al
c0008b7c:	8b 04 85 e0 5a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffca520]
c0008b83:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0008b89:	85 c0                	test   eax,eax
c0008b8b:	75 20                	jne    c0008bad <File::File(char const*, Process*, bool)+0xf9>
c0008b8d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008b91:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c0008b97:	0f b6 c0             	movzx  eax,al
c0008b9a:	8b 04 85 e0 5a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffca520]
c0008ba1:	83 ec 0c             	sub    esp,0xc
c0008ba4:	50                   	push   eax
c0008ba5:	e8 d2 27 00 00       	call   c000b37c <LogicalDisk::mount()>
c0008baa:	83 c4 10             	add    esp,0x10
c0008bad:	90                   	nop
c0008bae:	83 c4 1c             	add    esp,0x1c
c0008bb1:	c3                   	ret    

c0008bb2 <File::File(char const*, Process*)>:
c0008bb2:	83 ec 0c             	sub    esp,0xc
c0008bb5:	6a 01                	push   0x1
c0008bb7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008bbb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008bbf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008bc3:	e8 ec fe ff ff       	call   c0008ab4 <File::File(char const*, Process*, bool)>
c0008bc8:	83 c4 10             	add    esp,0x10
c0008bcb:	90                   	nop
c0008bcc:	83 c4 0c             	add    esp,0xc
c0008bcf:	c3                   	ret    

c0008bd0 <File::open(FileOpenMode)>:
c0008bd0:	53                   	push   ebx
c0008bd1:	b8 0b 00 00 00       	mov    eax,0xb
c0008bd6:	83 ec 08             	sub    esp,0x8
c0008bd9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008bdd:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0008be4:	83 fa 19             	cmp    edx,0x19
c0008be7:	77 40                	ja     c0008c29 <File::open(FileOpenMode)+0x59>
c0008be9:	8b 14 95 e0 5a 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffca520]
c0008bf0:	85 d2                	test   edx,edx
c0008bf2:	74 35                	je     c0008c29 <File::open(FileOpenMode)+0x59>
c0008bf4:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c0008bfa:	85 d2                	test   edx,edx
c0008bfc:	74 2b                	je     c0008c29 <File::open(FileOpenMode)+0x59>
c0008bfe:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0008c02:	b8 06 00 00 00       	mov    eax,0x6
c0008c07:	75 20                	jne    c0008c29 <File::open(FileOpenMode)+0x59>
c0008c09:	8b 02                	mov    eax,DWORD PTR [edx]
c0008c0b:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0008c11:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c15:	51                   	push   ecx
c0008c16:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0008c19:	51                   	push   ecx
c0008c1a:	52                   	push   edx
c0008c1b:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0008c1e:	83 c4 10             	add    esp,0x10
c0008c21:	85 c0                	test   eax,eax
c0008c23:	75 04                	jne    c0008c29 <File::open(FileOpenMode)+0x59>
c0008c25:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0008c29:	83 c4 08             	add    esp,0x8
c0008c2c:	5b                   	pop    ebx
c0008c2d:	c3                   	ret    

c0008c2e <File::close()>:
c0008c2e:	53                   	push   ebx
c0008c2f:	b8 0b 00 00 00       	mov    eax,0xb
c0008c34:	83 ec 08             	sub    esp,0x8
c0008c37:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008c3b:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008c42:	83 f9 19             	cmp    ecx,0x19
c0008c45:	77 41                	ja     c0008c88 <File::close()+0x5a>
c0008c47:	8b 1c 8d e0 5a 03 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffca520]
c0008c4e:	85 db                	test   ebx,ebx
c0008c50:	74 36                	je     c0008c88 <File::close()+0x5a>
c0008c52:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c0008c59:	74 2d                	je     c0008c88 <File::close()+0x5a>
c0008c5b:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008c5f:	b8 05 00 00 00       	mov    eax,0x5
c0008c64:	74 22                	je     c0008c88 <File::close()+0x5a>
c0008c66:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c0008c6a:	8b 04 8d e0 5a 03 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffca520]
c0008c71:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0008c77:	53                   	push   ebx
c0008c78:	53                   	push   ebx
c0008c79:	8b 08                	mov    ecx,DWORD PTR [eax]
c0008c7b:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0008c81:	50                   	push   eax
c0008c82:	ff 51 1c             	call   DWORD PTR [ecx+0x1c]
c0008c85:	83 c4 10             	add    esp,0x10
c0008c88:	83 c4 08             	add    esp,0x8
c0008c8b:	5b                   	pop    ebx
c0008c8c:	c3                   	ret    
c0008c8d:	90                   	nop

c0008c8e <File::seek(unsigned long long)>:
c0008c8e:	56                   	push   esi
c0008c8f:	b8 0b 00 00 00       	mov    eax,0xb
c0008c94:	53                   	push   ebx
c0008c95:	51                   	push   ecx
c0008c96:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008c9a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008c9e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0008ca2:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c0008ca9:	83 fa 19             	cmp    edx,0x19
c0008cac:	77 31                	ja     c0008cdf <File::seek(unsigned long long)+0x51>
c0008cae:	8b 14 95 e0 5a 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffca520]
c0008cb5:	85 d2                	test   edx,edx
c0008cb7:	74 26                	je     c0008cdf <File::seek(unsigned long long)+0x51>
c0008cb9:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c0008cbf:	85 d2                	test   edx,edx
c0008cc1:	74 1c                	je     c0008cdf <File::seek(unsigned long long)+0x51>
c0008cc3:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c0008cc7:	b8 05 00 00 00       	mov    eax,0x5
c0008ccc:	74 11                	je     c0008cdf <File::seek(unsigned long long)+0x51>
c0008cce:	8b 02                	mov    eax,DWORD PTR [edx]
c0008cd0:	53                   	push   ebx
c0008cd1:	51                   	push   ecx
c0008cd2:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c0008cd8:	52                   	push   edx
c0008cd9:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0008cdc:	83 c4 10             	add    esp,0x10
c0008cdf:	5a                   	pop    edx
c0008ce0:	5b                   	pop    ebx
c0008ce1:	5e                   	pop    esi
c0008ce2:	c3                   	ret    
c0008ce3:	90                   	nop

c0008ce4 <File::truncate(unsigned long long)>:
c0008ce4:	56                   	push   esi
c0008ce5:	b8 0b 00 00 00       	mov    eax,0xb
c0008cea:	53                   	push   ebx
c0008ceb:	51                   	push   ecx
c0008cec:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008cf0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008cf4:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0008cf8:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c0008cff:	83 fa 19             	cmp    edx,0x19
c0008d02:	77 31                	ja     c0008d35 <File::truncate(unsigned long long)+0x51>
c0008d04:	8b 14 95 e0 5a 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffca520]
c0008d0b:	85 d2                	test   edx,edx
c0008d0d:	74 26                	je     c0008d35 <File::truncate(unsigned long long)+0x51>
c0008d0f:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c0008d15:	85 d2                	test   edx,edx
c0008d17:	74 1c                	je     c0008d35 <File::truncate(unsigned long long)+0x51>
c0008d19:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c0008d1d:	b8 05 00 00 00       	mov    eax,0x5
c0008d22:	74 11                	je     c0008d35 <File::truncate(unsigned long long)+0x51>
c0008d24:	8b 02                	mov    eax,DWORD PTR [edx]
c0008d26:	53                   	push   ebx
c0008d27:	51                   	push   ecx
c0008d28:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c0008d2e:	52                   	push   edx
c0008d2f:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c0008d32:	83 c4 10             	add    esp,0x10
c0008d35:	5a                   	pop    edx
c0008d36:	5b                   	pop    ebx
c0008d37:	5e                   	pop    esi
c0008d38:	c3                   	ret    
c0008d39:	90                   	nop

c0008d3a <File::tell(unsigned long long*)>:
c0008d3a:	83 ec 0c             	sub    esp,0xc
c0008d3d:	b8 0b 00 00 00       	mov    eax,0xb
c0008d42:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008d46:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0008d4d:	83 fa 19             	cmp    edx,0x19
c0008d50:	77 34                	ja     c0008d86 <File::tell(unsigned long long*)+0x4c>
c0008d52:	8b 14 95 e0 5a 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffca520]
c0008d59:	85 d2                	test   edx,edx
c0008d5b:	74 29                	je     c0008d86 <File::tell(unsigned long long*)+0x4c>
c0008d5d:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c0008d63:	85 d2                	test   edx,edx
c0008d65:	74 1f                	je     c0008d86 <File::tell(unsigned long long*)+0x4c>
c0008d67:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0008d6b:	b8 05 00 00 00       	mov    eax,0x5
c0008d70:	74 14                	je     c0008d86 <File::tell(unsigned long long*)+0x4c>
c0008d72:	50                   	push   eax
c0008d73:	8b 02                	mov    eax,DWORD PTR [edx]
c0008d75:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008d79:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0008d7f:	52                   	push   edx
c0008d80:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0008d83:	83 c4 10             	add    esp,0x10
c0008d86:	83 c4 0c             	add    esp,0xc
c0008d89:	c3                   	ret    

c0008d8a <File::rewind()>:
c0008d8a:	83 ec 10             	sub    esp,0x10
c0008d8d:	6a 00                	push   0x0
c0008d8f:	6a 00                	push   0x0
c0008d91:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d95:	e8 f4 fe ff ff       	call   c0008c8e <File::seek(unsigned long long)>
c0008d9a:	83 c4 1c             	add    esp,0x1c
c0008d9d:	c3                   	ret    

c0008d9e <File::unlink()>:
c0008d9e:	83 ec 0c             	sub    esp,0xc
c0008da1:	b8 0b 00 00 00       	mov    eax,0xb
c0008da6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008daa:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008db1:	83 f9 19             	cmp    ecx,0x19
c0008db4:	77 2f                	ja     c0008de5 <File::unlink()+0x47>
c0008db6:	8b 0c 8d e0 5a 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffca520]
c0008dbd:	85 c9                	test   ecx,ecx
c0008dbf:	74 24                	je     c0008de5 <File::unlink()+0x47>
c0008dc1:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008dc7:	85 c9                	test   ecx,ecx
c0008dc9:	74 1a                	je     c0008de5 <File::unlink()+0x47>
c0008dcb:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008dcf:	b8 06 00 00 00       	mov    eax,0x6
c0008dd4:	75 0f                	jne    c0008de5 <File::unlink()+0x47>
c0008dd6:	50                   	push   eax
c0008dd7:	83 c2 0d             	add    edx,0xd
c0008dda:	50                   	push   eax
c0008ddb:	8b 01                	mov    eax,DWORD PTR [ecx]
c0008ddd:	52                   	push   edx
c0008dde:	51                   	push   ecx
c0008ddf:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c0008de2:	83 c4 10             	add    esp,0x10
c0008de5:	83 c4 0c             	add    esp,0xc
c0008de8:	c3                   	ret    
c0008de9:	90                   	nop

c0008dea <File::rename(char const*)>:
c0008dea:	83 ec 0c             	sub    esp,0xc
c0008ded:	b8 0b 00 00 00       	mov    eax,0xb
c0008df2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008df6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008dfd:	83 f9 19             	cmp    ecx,0x19
c0008e00:	77 32                	ja     c0008e34 <File::rename(char const*)+0x4a>
c0008e02:	8b 0c 8d e0 5a 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffca520]
c0008e09:	85 c9                	test   ecx,ecx
c0008e0b:	74 27                	je     c0008e34 <File::rename(char const*)+0x4a>
c0008e0d:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008e13:	85 c9                	test   ecx,ecx
c0008e15:	74 1d                	je     c0008e34 <File::rename(char const*)+0x4a>
c0008e17:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008e1b:	b8 06 00 00 00       	mov    eax,0x6
c0008e20:	75 12                	jne    c0008e34 <File::rename(char const*)+0x4a>
c0008e22:	50                   	push   eax
c0008e23:	83 c2 0d             	add    edx,0xd
c0008e26:	8b 01                	mov    eax,DWORD PTR [ecx]
c0008e28:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008e2c:	52                   	push   edx
c0008e2d:	51                   	push   ecx
c0008e2e:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0008e31:	83 c4 10             	add    esp,0x10
c0008e34:	83 c4 0c             	add    esp,0xc
c0008e37:	c3                   	ret    

c0008e38 <File::chfatattr(unsigned char, unsigned char)>:
c0008e38:	57                   	push   edi
c0008e39:	b8 0b 00 00 00       	mov    eax,0xb
c0008e3e:	56                   	push   esi
c0008e3f:	53                   	push   ebx
c0008e40:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008e44:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0008e48:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008e4c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008e53:	83 f9 19             	cmp    ecx,0x19
c0008e56:	77 37                	ja     c0008e8f <File::chfatattr(unsigned char, unsigned char)+0x57>
c0008e58:	8b 0c 8d e0 5a 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffca520]
c0008e5f:	85 c9                	test   ecx,ecx
c0008e61:	74 2c                	je     c0008e8f <File::chfatattr(unsigned char, unsigned char)+0x57>
c0008e63:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008e69:	85 c9                	test   ecx,ecx
c0008e6b:	74 22                	je     c0008e8f <File::chfatattr(unsigned char, unsigned char)+0x57>
c0008e6d:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008e71:	b8 06 00 00 00       	mov    eax,0x6
c0008e76:	75 17                	jne    c0008e8f <File::chfatattr(unsigned char, unsigned char)+0x57>
c0008e78:	89 f0                	mov    eax,esi
c0008e7a:	8b 39                	mov    edi,DWORD PTR [ecx]
c0008e7c:	0f b6 db             	movzx  ebx,bl
c0008e7f:	0f b6 f0             	movzx  esi,al
c0008e82:	83 c2 0d             	add    edx,0xd
c0008e85:	56                   	push   esi
c0008e86:	53                   	push   ebx
c0008e87:	52                   	push   edx
c0008e88:	51                   	push   ecx
c0008e89:	ff 57 38             	call   DWORD PTR [edi+0x38]
c0008e8c:	83 c4 10             	add    esp,0x10
c0008e8f:	5b                   	pop    ebx
c0008e90:	5e                   	pop    esi
c0008e91:	5f                   	pop    edi
c0008e92:	c3                   	ret    
c0008e93:	90                   	nop

c0008e94 <File::exists()>:
c0008e94:	83 ec 0c             	sub    esp,0xc
c0008e97:	31 c0                	xor    eax,eax
c0008e99:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008e9d:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008ea4:	83 f9 19             	cmp    ecx,0x19
c0008ea7:	77 24                	ja     c0008ecd <File::exists()+0x39>
c0008ea9:	8b 0c 8d e0 5a 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffca520]
c0008eb0:	85 c9                	test   ecx,ecx
c0008eb2:	74 19                	je     c0008ecd <File::exists()+0x39>
c0008eb4:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008eba:	85 c9                	test   ecx,ecx
c0008ebc:	74 0f                	je     c0008ecd <File::exists()+0x39>
c0008ebe:	50                   	push   eax
c0008ebf:	83 c2 0d             	add    edx,0xd
c0008ec2:	50                   	push   eax
c0008ec3:	8b 01                	mov    eax,DWORD PTR [ecx]
c0008ec5:	52                   	push   edx
c0008ec6:	51                   	push   ecx
c0008ec7:	ff 50 48             	call   DWORD PTR [eax+0x48]
c0008eca:	83 c4 10             	add    esp,0x10
c0008ecd:	83 c4 0c             	add    esp,0xc
c0008ed0:	c3                   	ret    
c0008ed1:	90                   	nop

c0008ed2 <File::stat(unsigned long long*, bool*)>:
c0008ed2:	56                   	push   esi
c0008ed3:	53                   	push   ebx
c0008ed4:	50                   	push   eax
c0008ed5:	b8 0b 00 00 00       	mov    eax,0xb
c0008eda:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008ede:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008ee2:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0008ee6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008eed:	83 f9 19             	cmp    ecx,0x19
c0008ef0:	77 3d                	ja     c0008f2f <File::stat(unsigned long long*, bool*)+0x5d>
c0008ef2:	8b 0c 8d e0 5a 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffca520]
c0008ef9:	85 c9                	test   ecx,ecx
c0008efb:	74 32                	je     c0008f2f <File::stat(unsigned long long*, bool*)+0x5d>
c0008efd:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008f03:	85 c9                	test   ecx,ecx
c0008f05:	74 28                	je     c0008f2f <File::stat(unsigned long long*, bool*)+0x5d>
c0008f07:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008f0b:	8b 01                	mov    eax,DWORD PTR [ecx]
c0008f0d:	74 13                	je     c0008f22 <File::stat(unsigned long long*, bool*)+0x50>
c0008f0f:	83 ec 04             	sub    esp,0x4
c0008f12:	56                   	push   esi
c0008f13:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0008f19:	51                   	push   ecx
c0008f1a:	ff 50 30             	call   DWORD PTR [eax+0x30]
c0008f1d:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0008f20:	eb 0a                	jmp    c0008f2c <File::stat(unsigned long long*, bool*)+0x5a>
c0008f22:	53                   	push   ebx
c0008f23:	83 c2 0d             	add    edx,0xd
c0008f26:	56                   	push   esi
c0008f27:	52                   	push   edx
c0008f28:	51                   	push   ecx
c0008f29:	ff 50 34             	call   DWORD PTR [eax+0x34]
c0008f2c:	83 c4 10             	add    esp,0x10
c0008f2f:	5a                   	pop    edx
c0008f30:	5b                   	pop    ebx
c0008f31:	5e                   	pop    esi
c0008f32:	c3                   	ret    

c0008f33 <Fs::setcwd(Process*, char*)>:
c0008f33:	55                   	push   ebp
c0008f34:	57                   	push   edi
c0008f35:	56                   	push   esi
c0008f36:	53                   	push   ebx
c0008f37:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0008f3d:	8b ac 24 30 02 00 00 	mov    ebp,DWORD PTR [esp+0x230]
c0008f44:	6a 00                	push   0x0
c0008f46:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c0008f4c:	57                   	push   edi
c0008f4d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0008f54:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c0008f58:	56                   	push   esi
c0008f59:	e8 28 f9 ff ff       	call   c0008886 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0008f5e:	89 34 24             	mov    DWORD PTR [esp],esi
c0008f61:	e8 1a 76 ff ff       	call   c0000580 <strlen>
c0008f66:	83 c4 10             	add    esp,0x10
c0008f69:	83 f8 02             	cmp    eax,0x2
c0008f6c:	77 15                	ja     c0008f83 <Fs::setcwd(Process*, char*)+0x50>
c0008f6e:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c0008f73:	83 eb 41             	sub    ebx,0x41
c0008f76:	8b 04 9d e0 5a 03 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffca520]
c0008f7d:	85 c0                	test   eax,eax
c0008f7f:	75 1c                	jne    c0008f9d <Fs::setcwd(Process*, char*)+0x6a>
c0008f81:	eb 2f                	jmp    c0008fb2 <Fs::setcwd(Process*, char*)+0x7f>
c0008f83:	83 ec 0c             	sub    esp,0xc
c0008f86:	56                   	push   esi
c0008f87:	e8 f4 75 ff ff       	call   c0000580 <strlen>
c0008f8c:	83 c4 10             	add    esp,0x10
c0008f8f:	83 f8 03             	cmp    eax,0x3
c0008f92:	75 57                	jne    c0008feb <Fs::setcwd(Process*, char*)+0xb8>
c0008f94:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c0008f99:	75 50                	jne    c0008feb <Fs::setcwd(Process*, char*)+0xb8>
c0008f9b:	eb d1                	jmp    c0008f6e <Fs::setcwd(Process*, char*)+0x3b>
c0008f9d:	83 b8 74 01 00 00 00 	cmp    DWORD PTR [eax+0x174],0x0
c0008fa4:	75 0c                	jne    c0008fb2 <Fs::setcwd(Process*, char*)+0x7f>
c0008fa6:	83 ec 0c             	sub    esp,0xc
c0008fa9:	50                   	push   eax
c0008faa:	e8 cd 23 00 00       	call   c000b37c <LogicalDisk::mount()>
c0008faf:	83 c4 10             	add    esp,0x10
c0008fb2:	83 fb 19             	cmp    ebx,0x19
c0008fb5:	b8 03 00 00 00       	mov    eax,0x3
c0008fba:	0f 87 c6 00 00 00    	ja     c0009086 <Fs::setcwd(Process*, char*)+0x153>
c0008fc0:	8b 14 9d e0 5a 03 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffca520]
c0008fc7:	b8 05 00 00 00       	mov    eax,0x5
c0008fcc:	85 d2                	test   edx,edx
c0008fce:	0f 84 b2 00 00 00    	je     c0009086 <Fs::setcwd(Process*, char*)+0x153>
c0008fd4:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c0008fdb:	b8 06 00 00 00       	mov    eax,0x6
c0008fe0:	0f 85 92 00 00 00    	jne    c0009078 <Fs::setcwd(Process*, char*)+0x145>
c0008fe6:	e9 9b 00 00 00       	jmp    c0009086 <Fs::setcwd(Process*, char*)+0x153>
c0008feb:	83 ec 0c             	sub    esp,0xc
c0008fee:	68 14 01 00 00       	push   0x114
c0008ff3:	e8 14 71 00 00       	call   c001010c <malloc>
c0008ff8:	83 c4 0c             	add    esp,0xc
c0008ffb:	55                   	push   ebp
c0008ffc:	56                   	push   esi
c0008ffd:	50                   	push   eax
c0008ffe:	89 c3                	mov    ebx,eax
c0009000:	e8 ad fb ff ff       	call   c0008bb2 <File::File(char const*, Process*)>
c0009005:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000900a:	83 c4 0c             	add    esp,0xc
c000900d:	8d 44 24 0b          	lea    eax,[esp+0xb]
c0009011:	50                   	push   eax
c0009012:	8d 44 24 10          	lea    eax,[esp+0x10]
c0009016:	50                   	push   eax
c0009017:	53                   	push   ebx
c0009018:	e8 b5 fe ff ff       	call   c0008ed2 <File::stat(unsigned long long*, bool*)>
c000901d:	83 c4 10             	add    esp,0x10
c0009020:	83 f8 02             	cmp    eax,0x2
c0009023:	74 27                	je     c000904c <Fs::setcwd(Process*, char*)+0x119>
c0009025:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000902a:	75 1c                	jne    c0009048 <Fs::setcwd(Process*, char*)+0x115>
c000902c:	85 db                	test   ebx,ebx
c000902e:	b8 02 00 00 00       	mov    eax,0x2
c0009033:	74 51                	je     c0009086 <Fs::setcwd(Process*, char*)+0x153>
c0009035:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009037:	83 ec 0c             	sub    esp,0xc
c000903a:	53                   	push   ebx
c000903b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000903e:	83 c4 10             	add    esp,0x10
c0009041:	b8 02 00 00 00       	mov    eax,0x2
c0009046:	eb 3e                	jmp    c0009086 <Fs::setcwd(Process*, char*)+0x153>
c0009048:	85 c0                	test   eax,eax
c000904a:	74 1c                	je     c0009068 <Fs::setcwd(Process*, char*)+0x135>
c000904c:	85 db                	test   ebx,ebx
c000904e:	b8 01 00 00 00       	mov    eax,0x1
c0009053:	74 31                	je     c0009086 <Fs::setcwd(Process*, char*)+0x153>
c0009055:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009057:	83 ec 0c             	sub    esp,0xc
c000905a:	53                   	push   ebx
c000905b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000905e:	83 c4 10             	add    esp,0x10
c0009061:	b8 01 00 00 00       	mov    eax,0x1
c0009066:	eb 1e                	jmp    c0009086 <Fs::setcwd(Process*, char*)+0x153>
c0009068:	85 db                	test   ebx,ebx
c000906a:	74 0c                	je     c0009078 <Fs::setcwd(Process*, char*)+0x145>
c000906c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000906e:	83 ec 0c             	sub    esp,0xc
c0009071:	53                   	push   ebx
c0009072:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0009075:	83 c4 10             	add    esp,0x10
c0009078:	50                   	push   eax
c0009079:	50                   	push   eax
c000907a:	56                   	push   esi
c000907b:	57                   	push   edi
c000907c:	e8 cf 75 ff ff       	call   c0000650 <strcpy>
c0009081:	83 c4 10             	add    esp,0x10
c0009084:	31 c0                	xor    eax,eax
c0009086:	81 c4 1c 02 00 00    	add    esp,0x21c
c000908c:	5b                   	pop    ebx
c000908d:	5e                   	pop    esi
c000908e:	5f                   	pop    edi
c000908f:	5d                   	pop    ebp
c0009090:	c3                   	ret    
c0009091:	90                   	nop

c0009092 <Directory::Directory(char const*, Process*)>:
c0009092:	83 ec 0c             	sub    esp,0xc
c0009095:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009099:	83 ec 08             	sub    esp,0x8
c000909c:	6a 00                	push   0x0
c000909e:	50                   	push   eax
c000909f:	e8 b0 a5 00 00       	call   c0013654 <UnixFile::UnixFile(int)>
c00090a4:	83 c4 10             	add    esp,0x10
c00090a7:	ba b4 a8 02 c0       	mov    edx,0xc002a8b4
c00090ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090b0:	89 10                	mov    DWORD PTR [eax],edx
c00090b2:	a1 58 63 03 c0       	mov    eax,ds:0xc0036358
c00090b7:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00090bb:	0f 95 c0             	setne  al
c00090be:	0f b6 c0             	movzx  eax,al
c00090c1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00090c5:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c00090cb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00090cf:	83 c2 0d             	add    edx,0xd
c00090d2:	50                   	push   eax
c00090d3:	51                   	push   ecx
c00090d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090d8:	52                   	push   edx
c00090d9:	e8 a8 f7 ff ff       	call   c0008886 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00090de:	83 c4 10             	add    esp,0x10
c00090e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090e5:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c00090e8:	83 e8 41             	sub    eax,0x41
c00090eb:	88 c2                	mov    dl,al
c00090ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090f1:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c00090f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090fb:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c00090ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009103:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c0009109:	0f b6 c0             	movzx  eax,al
c000910c:	8b 04 85 e0 5a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffca520]
c0009113:	85 c0                	test   eax,eax
c0009115:	74 3e                	je     c0009155 <Directory::Directory(char const*, Process*)+0xc3>
c0009117:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000911b:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c0009121:	0f b6 c0             	movzx  eax,al
c0009124:	8b 04 85 e0 5a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffca520]
c000912b:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0009131:	85 c0                	test   eax,eax
c0009133:	75 20                	jne    c0009155 <Directory::Directory(char const*, Process*)+0xc3>
c0009135:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009139:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000913f:	0f b6 c0             	movzx  eax,al
c0009142:	8b 04 85 e0 5a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffca520]
c0009149:	83 ec 0c             	sub    esp,0xc
c000914c:	50                   	push   eax
c000914d:	e8 2a 22 00 00       	call   c000b37c <LogicalDisk::mount()>
c0009152:	83 c4 10             	add    esp,0x10
c0009155:	90                   	nop
c0009156:	83 c4 0c             	add    esp,0xc
c0009159:	c3                   	ret    

c000915a <Directory::open()>:
c000915a:	53                   	push   ebx
c000915b:	b8 0b 00 00 00       	mov    eax,0xb
c0009160:	83 ec 08             	sub    esp,0x8
c0009163:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009167:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000916e:	83 fa 19             	cmp    edx,0x19
c0009171:	77 3d                	ja     c00091b0 <Directory::open()+0x56>
c0009173:	8b 14 95 e0 5a 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffca520]
c000917a:	85 d2                	test   edx,edx
c000917c:	74 32                	je     c00091b0 <Directory::open()+0x56>
c000917e:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c0009184:	85 d2                	test   edx,edx
c0009186:	74 28                	je     c00091b0 <Directory::open()+0x56>
c0009188:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000918c:	b8 06 00 00 00       	mov    eax,0x6
c0009191:	75 1d                	jne    c00091b0 <Directory::open()+0x56>
c0009193:	50                   	push   eax
c0009194:	8b 02                	mov    eax,DWORD PTR [edx]
c0009196:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000919c:	51                   	push   ecx
c000919d:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c00091a0:	51                   	push   ecx
c00091a1:	52                   	push   edx
c00091a2:	ff 50 50             	call   DWORD PTR [eax+0x50]
c00091a5:	83 c4 10             	add    esp,0x10
c00091a8:	85 c0                	test   eax,eax
c00091aa:	75 04                	jne    c00091b0 <Directory::open()+0x56>
c00091ac:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c00091b0:	83 c4 08             	add    esp,0x8
c00091b3:	5b                   	pop    ebx
c00091b4:	c3                   	ret    
c00091b5:	90                   	nop

c00091b6 <Directory::close()>:
c00091b6:	53                   	push   ebx
c00091b7:	b8 0b 00 00 00       	mov    eax,0xb
c00091bc:	83 ec 08             	sub    esp,0x8
c00091bf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00091c3:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00091ca:	83 f9 19             	cmp    ecx,0x19
c00091cd:	77 41                	ja     c0009210 <Directory::close()+0x5a>
c00091cf:	8b 1c 8d e0 5a 03 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffca520]
c00091d6:	85 db                	test   ebx,ebx
c00091d8:	74 36                	je     c0009210 <Directory::close()+0x5a>
c00091da:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c00091e1:	74 2d                	je     c0009210 <Directory::close()+0x5a>
c00091e3:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00091e7:	b8 05 00 00 00       	mov    eax,0x5
c00091ec:	74 22                	je     c0009210 <Directory::close()+0x5a>
c00091ee:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c00091f2:	8b 04 8d e0 5a 03 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffca520]
c00091f9:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c00091ff:	53                   	push   ebx
c0009200:	53                   	push   ebx
c0009201:	8b 08                	mov    ecx,DWORD PTR [eax]
c0009203:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0009209:	50                   	push   eax
c000920a:	ff 51 20             	call   DWORD PTR [ecx+0x20]
c000920d:	83 c4 10             	add    esp,0x10
c0009210:	83 c4 08             	add    esp,0x8
c0009213:	5b                   	pop    ebx
c0009214:	c3                   	ret    
c0009215:	90                   	nop

c0009216 <Directory::unlink()>:
c0009216:	83 ec 0c             	sub    esp,0xc
c0009219:	b8 0b 00 00 00       	mov    eax,0xb
c000921e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0009222:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0009229:	83 f9 19             	cmp    ecx,0x19
c000922c:	77 2f                	ja     c000925d <Directory::unlink()+0x47>
c000922e:	8b 0c 8d e0 5a 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffca520]
c0009235:	85 c9                	test   ecx,ecx
c0009237:	74 24                	je     c000925d <Directory::unlink()+0x47>
c0009239:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000923f:	85 c9                	test   ecx,ecx
c0009241:	74 1a                	je     c000925d <Directory::unlink()+0x47>
c0009243:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0009247:	b8 06 00 00 00       	mov    eax,0x6
c000924c:	75 0f                	jne    c000925d <Directory::unlink()+0x47>
c000924e:	50                   	push   eax
c000924f:	83 c2 0d             	add    edx,0xd
c0009252:	50                   	push   eax
c0009253:	8b 01                	mov    eax,DWORD PTR [ecx]
c0009255:	52                   	push   edx
c0009256:	51                   	push   ecx
c0009257:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000925a:	83 c4 10             	add    esp,0x10
c000925d:	83 c4 0c             	add    esp,0xc
c0009260:	c3                   	ret    
c0009261:	90                   	nop

c0009262 <Directory::rename(char const*)>:
c0009262:	83 ec 0c             	sub    esp,0xc
c0009265:	b8 0b 00 00 00       	mov    eax,0xb
c000926a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000926e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0009275:	83 f9 19             	cmp    ecx,0x19
c0009278:	77 32                	ja     c00092ac <Directory::rename(char const*)+0x4a>
c000927a:	8b 0c 8d e0 5a 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffca520]
c0009281:	85 c9                	test   ecx,ecx
c0009283:	74 27                	je     c00092ac <Directory::rename(char const*)+0x4a>
c0009285:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000928b:	85 c9                	test   ecx,ecx
c000928d:	74 1d                	je     c00092ac <Directory::rename(char const*)+0x4a>
c000928f:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0009293:	b8 06 00 00 00       	mov    eax,0x6
c0009298:	75 12                	jne    c00092ac <Directory::rename(char const*)+0x4a>
c000929a:	50                   	push   eax
c000929b:	83 c2 0d             	add    edx,0xd
c000929e:	8b 01                	mov    eax,DWORD PTR [ecx]
c00092a0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00092a4:	52                   	push   edx
c00092a5:	51                   	push   ecx
c00092a6:	ff 50 44             	call   DWORD PTR [eax+0x44]
c00092a9:	83 c4 10             	add    esp,0x10
c00092ac:	83 c4 0c             	add    esp,0xc
c00092af:	c3                   	ret    

c00092b0 <Directory::exists()>:
c00092b0:	83 ec 0c             	sub    esp,0xc
c00092b3:	31 c0                	xor    eax,eax
c00092b5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00092b9:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00092c0:	83 f9 19             	cmp    ecx,0x19
c00092c3:	77 24                	ja     c00092e9 <Directory::exists()+0x39>
c00092c5:	8b 0c 8d e0 5a 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffca520]
c00092cc:	85 c9                	test   ecx,ecx
c00092ce:	74 19                	je     c00092e9 <Directory::exists()+0x39>
c00092d0:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c00092d6:	85 c9                	test   ecx,ecx
c00092d8:	74 0f                	je     c00092e9 <Directory::exists()+0x39>
c00092da:	50                   	push   eax
c00092db:	83 c2 0d             	add    edx,0xd
c00092de:	50                   	push   eax
c00092df:	8b 01                	mov    eax,DWORD PTR [ecx]
c00092e1:	52                   	push   edx
c00092e2:	51                   	push   ecx
c00092e3:	ff 50 48             	call   DWORD PTR [eax+0x48]
c00092e6:	83 c4 10             	add    esp,0x10
c00092e9:	83 c4 0c             	add    esp,0xc
c00092ec:	c3                   	ret    
c00092ed:	90                   	nop

c00092ee <Directory::read(dirent*)>:
c00092ee:	83 ec 1c             	sub    esp,0x1c
c00092f1:	b8 0b 00 00 00       	mov    eax,0xb
c00092f6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00092fa:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0009301:	83 f9 19             	cmp    ecx,0x19
c0009304:	77 30                	ja     c0009336 <Directory::read(dirent*)+0x48>
c0009306:	8b 0c 8d e0 5a 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffca520]
c000930d:	85 c9                	test   ecx,ecx
c000930f:	74 25                	je     c0009336 <Directory::read(dirent*)+0x48>
c0009311:	83 b9 74 01 00 00 00 	cmp    DWORD PTR [ecx+0x174],0x0
c0009318:	74 1c                	je     c0009336 <Directory::read(dirent*)+0x48>
c000931a:	83 ec 0c             	sub    esp,0xc
c000931d:	8b 02                	mov    eax,DWORD PTR [edx]
c000931f:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0009323:	51                   	push   ecx
c0009324:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009328:	6a 00                	push   0x0
c000932a:	68 10 01 00 00       	push   0x110
c000932f:	52                   	push   edx
c0009330:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0009333:	83 c4 20             	add    esp,0x20
c0009336:	83 c4 1c             	add    esp,0x1c
c0009339:	c3                   	ret    

c000933a <Directory::create()>:
c000933a:	83 ec 0c             	sub    esp,0xc
c000933d:	b8 0b 00 00 00       	mov    eax,0xb
c0009342:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0009346:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000934d:	83 f9 19             	cmp    ecx,0x19
c0009350:	77 2f                	ja     c0009381 <Directory::create()+0x47>
c0009352:	8b 0c 8d e0 5a 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffca520]
c0009359:	85 c9                	test   ecx,ecx
c000935b:	74 24                	je     c0009381 <Directory::create()+0x47>
c000935d:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0009363:	85 c9                	test   ecx,ecx
c0009365:	74 1a                	je     c0009381 <Directory::create()+0x47>
c0009367:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000936b:	b8 06 00 00 00       	mov    eax,0x6
c0009370:	75 0f                	jne    c0009381 <Directory::create()+0x47>
c0009372:	50                   	push   eax
c0009373:	83 c2 0d             	add    edx,0xd
c0009376:	50                   	push   eax
c0009377:	8b 01                	mov    eax,DWORD PTR [ecx]
c0009379:	52                   	push   edx
c000937a:	51                   	push   ecx
c000937b:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000937e:	83 c4 10             	add    esp,0x10
c0009381:	83 c4 0c             	add    esp,0xc
c0009384:	c3                   	ret    
c0009385:	90                   	nop

c0009386 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c0009386:	b8 0a 00 00 00       	mov    eax,0xa
c000938b:	c3                   	ret    

c000938c <Bus::Bus(char const*)>:
c000938c:	83 ec 0c             	sub    esp,0xc
c000938f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009393:	83 ec 08             	sub    esp,0x8
c0009396:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000939a:	50                   	push   eax
c000939b:	e8 e0 11 00 00       	call   c000a580 <Device::Device(char const*)>
c00093a0:	83 c4 10             	add    esp,0x10
c00093a3:	ba d0 a8 02 c0       	mov    edx,0xc002a8d0
c00093a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00093ac:	89 10                	mov    DWORD PTR [eax],edx
c00093ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00093b2:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c00093bc:	90                   	nop
c00093bd:	83 c4 0c             	add    esp,0xc
c00093c0:	c3                   	ret    
c00093c1:	90                   	nop
c00093c2:	66 90                	xchg   ax,ax

c00093c4 <Bus::~Bus()>:
c00093c4:	83 ec 0c             	sub    esp,0xc
c00093c7:	ba d0 a8 02 c0       	mov    edx,0xc002a8d0
c00093cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00093d0:	89 10                	mov    DWORD PTR [eax],edx
c00093d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00093d6:	83 ec 0c             	sub    esp,0xc
c00093d9:	50                   	push   eax
c00093da:	e8 41 0f 00 00       	call   c000a320 <Device::~Device()>
c00093df:	83 c4 10             	add    esp,0x10
c00093e2:	90                   	nop
c00093e3:	83 c4 0c             	add    esp,0xc
c00093e6:	c3                   	ret    
c00093e7:	90                   	nop

c00093e8 <Bus::~Bus()>:
c00093e8:	83 ec 0c             	sub    esp,0xc
c00093eb:	83 ec 0c             	sub    esp,0xc
c00093ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00093f2:	e8 cd ff ff ff       	call   c00093c4 <Bus::~Bus()>
c00093f7:	83 c4 10             	add    esp,0x10
c00093fa:	83 ec 08             	sub    esp,0x8
c00093fd:	68 58 01 00 00       	push   0x158
c0009402:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009406:	e8 01 49 00 00       	call   c000dd0c <operator delete(void*, unsigned long)>
c000940b:	83 c4 10             	add    esp,0x10
c000940e:	83 c4 0c             	add    esp,0xc
c0009411:	c3                   	ret    

c0009412 <KeBeepThread(void*)>:
c0009412:	83 ec 0c             	sub    esp,0xc
c0009415:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009419:	f0 ff 0d 30 63 03 c0 	lock dec DWORD PTR ds:0xc0036330
c0009420:	83 3d 30 63 03 c0 00 	cmp    DWORD PTR ds:0xc0036330,0x0
c0009427:	75 01                	jne    c000942a <KeBeepThread(void*)+0x18>
c0009429:	fb                   	sti    
c000942a:	6b c0 0a             	imul   eax,eax,0xa
c000942d:	52                   	push   edx
c000942e:	52                   	push   edx
c000942f:	99                   	cdq    
c0009430:	52                   	push   edx
c0009431:	50                   	push   eax
c0009432:	e8 a5 de 00 00       	call   c00172dc <milliTenthSleep(unsigned long long)>
c0009437:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000943e:	e8 8e 1f 01 00       	call   c001b3d1 <HalMakeBeep(int)>
c0009443:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000944b:	83 c4 1c             	add    esp,0x1c
c000944e:	e9 55 dd 00 00       	jmp    c00171a8 <blockTask(TaskState)>

c0009453 <KeBeep(int, int, bool)>:
c0009453:	56                   	push   esi
c0009454:	53                   	push   ebx
c0009455:	83 ec 10             	sub    esp,0x10
c0009458:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000945c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0009460:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009464:	e8 68 1f 01 00       	call   c001b3d1 <HalMakeBeep(int)>
c0009469:	89 f0                	mov    eax,esi
c000946b:	83 c4 10             	add    esp,0x10
c000946e:	84 c0                	test   al,al
c0009470:	74 1f                	je     c0009491 <KeBeep(int, int, bool)+0x3e>
c0009472:	50                   	push   eax
c0009473:	50                   	push   eax
c0009474:	6b c3 0a             	imul   eax,ebx,0xa
c0009477:	99                   	cdq    
c0009478:	52                   	push   edx
c0009479:	50                   	push   eax
c000947a:	e8 5d de 00 00       	call   c00172dc <milliTenthSleep(unsigned long long)>
c000947f:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0009487:	83 c4 14             	add    esp,0x14
c000948a:	5b                   	pop    ebx
c000948b:	5e                   	pop    esi
c000948c:	e9 40 1f 01 00       	jmp    c001b3d1 <HalMakeBeep(int)>
c0009491:	68 e6 00 00 00       	push   0xe6
c0009496:	53                   	push   ebx
c0009497:	68 12 94 00 c0       	push   0xc0009412
c000949c:	ff 35 58 63 03 c0    	push   DWORD PTR ds:0xc0036358
c00094a2:	e8 8d d9 00 00       	call   c0016e34 <Process::createThread(void (*)(void*), void*, int)>
c00094a7:	83 c4 14             	add    esp,0x14
c00094aa:	5b                   	pop    ebx
c00094ab:	5e                   	pop    esi
c00094ac:	c3                   	ret    
c00094ad:	90                   	nop

c00094ae <KeLoadTimezoneStrings()>:
c00094ae:	55                   	push   ebp
c00094af:	89 e5                	mov    ebp,esp
c00094b1:	53                   	push   ebx
c00094b2:	83 ec 44             	sub    esp,0x44
c00094b5:	c6 05 20 53 03 c0 01 	mov    BYTE PTR ds:0xc0035320,0x1
c00094bc:	c7 45 dc 14 01 00 00 	mov    DWORD PTR [ebp-0x24],0x114
c00094c3:	83 ec 0c             	sub    esp,0xc
c00094c6:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
c00094c9:	e8 3e 6c 00 00       	call   c001010c <malloc>
c00094ce:	83 c4 10             	add    esp,0x10
c00094d1:	89 c3                	mov    ebx,eax
c00094d3:	a1 58 63 03 c0       	mov    eax,ds:0xc0036358
c00094d8:	83 ec 04             	sub    esp,0x4
c00094db:	50                   	push   eax
c00094dc:	68 00 a9 02 c0       	push   0xc002a900
c00094e1:	53                   	push   ebx
c00094e2:	e8 cb f6 ff ff       	call   c0008bb2 <File::File(char const*, Process*)>
c00094e7:	83 c4 10             	add    esp,0x10
c00094ea:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c00094ed:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c00094f1:	75 10                	jne    c0009503 <KeLoadTimezoneStrings()+0x55>
c00094f3:	83 ec 0c             	sub    esp,0xc
c00094f6:	68 1f a9 02 c0       	push   0xc002a91f
c00094fb:	e8 60 70 00 00       	call   c0010560 <KePanic(char const*)>
c0009500:	83 c4 10             	add    esp,0x10
c0009503:	83 ec 08             	sub    esp,0x8
c0009506:	6a 01                	push   0x1
c0009508:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c000950b:	e8 c0 f6 ff ff       	call   c0008bd0 <File::open(FileOpenMode)>
c0009510:	83 c4 10             	add    esp,0x10
c0009513:	83 ec 04             	sub    esp,0x4
c0009516:	8d 45 cf             	lea    eax,[ebp-0x31]
c0009519:	50                   	push   eax
c000951a:	8d 45 d0             	lea    eax,[ebp-0x30]
c000951d:	50                   	push   eax
c000951e:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0009521:	e8 ac f9 ff ff       	call   c0008ed2 <File::stat(unsigned long long*, bool*)>
c0009526:	83 c4 10             	add    esp,0x10
c0009529:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c000952c:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c000952f:	83 ec 08             	sub    esp,0x8
c0009532:	50                   	push   eax
c0009533:	68 35 a9 02 c0       	push   0xc002a935
c0009538:	e8 29 da ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000953d:	83 c4 10             	add    esp,0x10
c0009540:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0009543:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0009546:	83 c0 01             	add    eax,0x1
c0009549:	83 ec 0c             	sub    esp,0xc
c000954c:	50                   	push   eax
c000954d:	e8 ba 6b 00 00       	call   c001010c <malloc>
c0009552:	83 c4 10             	add    esp,0x10
c0009555:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0009558:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c000955b:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c000955e:	83 ec 04             	sub    esp,0x4
c0009561:	50                   	push   eax
c0009562:	6a 00                	push   0x0
c0009564:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0009567:	e8 84 6f ff ff       	call   c00004f0 <memset>
c000956c:	83 c4 10             	add    esp,0x10
c000956f:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0009572:	8b 00                	mov    eax,DWORD PTR [eax]
c0009574:	83 c0 0c             	add    eax,0xc
c0009577:	8b 08                	mov    ecx,DWORD PTR [eax]
c0009579:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c000957c:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c000957f:	83 ec 0c             	sub    esp,0xc
c0009582:	8d 5d c8             	lea    ebx,[ebp-0x38]
c0009585:	53                   	push   ebx
c0009586:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0009589:	52                   	push   edx
c000958a:	50                   	push   eax
c000958b:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c000958e:	ff d1                	call   ecx
c0009590:	83 c4 20             	add    esp,0x20
c0009593:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0009596:	83 ec 08             	sub    esp,0x8
c0009599:	50                   	push   eax
c000959a:	68 45 a9 02 c0       	push   0xc002a945
c000959f:	e8 c2 d9 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00095a4:	83 c4 10             	add    esp,0x10
c00095a7:	83 ec 0c             	sub    esp,0xc
c00095aa:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c00095ad:	e8 7c f6 ff ff       	call   c0008c2e <File::close()>
c00095b2:	83 c4 10             	add    esp,0x10
c00095b5:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c00095b9:	74 15                	je     c00095d0 <KeLoadTimezoneStrings()+0x122>
c00095bb:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00095be:	8b 00                	mov    eax,DWORD PTR [eax]
c00095c0:	83 c0 08             	add    eax,0x8
c00095c3:	8b 00                	mov    eax,DWORD PTR [eax]
c00095c5:	83 ec 0c             	sub    esp,0xc
c00095c8:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c00095cb:	ff d0                	call   eax
c00095cd:	83 c4 10             	add    esp,0x10
c00095d0:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c00095d7:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c00095de:	81 7d f0 c7 00 00 00 	cmp    DWORD PTR [ebp-0x10],0xc7
c00095e5:	7f 3a                	jg     c0009621 <KeLoadTimezoneStrings()+0x173>
c00095e7:	83 ec 0c             	sub    esp,0xc
c00095ea:	6a 78                	push   0x78
c00095ec:	e8 1b 6b 00 00       	call   c001010c <malloc>
c00095f1:	83 c4 10             	add    esp,0x10
c00095f4:	89 c2                	mov    edx,eax
c00095f6:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00095f9:	89 14 85 40 53 03 c0 	mov    DWORD PTR [eax*4-0x3ffcacc0],edx
c0009600:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0009603:	8b 04 85 40 53 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcacc0]
c000960a:	83 ec 08             	sub    esp,0x8
c000960d:	68 4e a9 02 c0       	push   0xc002a94e
c0009612:	50                   	push   eax
c0009613:	e8 38 70 ff ff       	call   c0000650 <strcpy>
c0009618:	83 c4 10             	add    esp,0x10
c000961b:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c000961f:	eb bd                	jmp    c00095de <KeLoadTimezoneStrings()+0x130>
c0009621:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0009628:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c000962b:	8d 50 01             	lea    edx,[eax+0x1]
c000962e:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0009631:	89 c2                	mov    edx,eax
c0009633:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009636:	01 d0                	add    eax,edx
c0009638:	8a 00                	mov    al,BYTE PTR [eax]
c000963a:	88 45 c6             	mov    BYTE PTR [ebp-0x3a],al
c000963d:	c6 45 c7 00          	mov    BYTE PTR [ebp-0x39],0x0
c0009641:	8a 45 c6             	mov    al,BYTE PTR [ebp-0x3a]
c0009644:	0f be c0             	movsx  eax,al
c0009647:	83 f8 0d             	cmp    eax,0xd
c000964a:	0f 84 82 01 00 00    	je     c00097d2 <KeLoadTimezoneStrings()+0x324>
c0009650:	8a 45 c6             	mov    al,BYTE PTR [ebp-0x3a]
c0009653:	0f be c0             	movsx  eax,al
c0009656:	83 f8 09             	cmp    eax,0x9
c0009659:	75 44                	jne    c000969f <KeLoadTimezoneStrings()+0x1f1>
c000965b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000965e:	8b 04 85 40 53 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcacc0]
c0009665:	83 ec 0c             	sub    esp,0xc
c0009668:	50                   	push   eax
c0009669:	e8 12 6f ff ff       	call   c0000580 <strlen>
c000966e:	83 c4 10             	add    esp,0x10
c0009671:	83 f8 08             	cmp    eax,0x8
c0009674:	0f 96 c0             	setbe  al
c0009677:	0f b6 c0             	movzx  eax,al
c000967a:	85 c0                	test   eax,eax
c000967c:	0f 84 56 01 00 00    	je     c00097d8 <KeLoadTimezoneStrings()+0x32a>
c0009682:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0009685:	8b 04 85 40 53 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcacc0]
c000968c:	83 ec 08             	sub    esp,0x8
c000968f:	68 4e a9 02 c0       	push   0xc002a94e
c0009694:	50                   	push   eax
c0009695:	e8 d6 71 ff ff       	call   c0000870 <strcat>
c000969a:	83 c4 10             	add    esp,0x10
c000969d:	eb bc                	jmp    c000965b <KeLoadTimezoneStrings()+0x1ad>
c000969f:	8a 45 c6             	mov    al,BYTE PTR [ebp-0x3a]
c00096a2:	0f be c0             	movsx  eax,al
c00096a5:	83 f8 0a             	cmp    eax,0xa
c00096a8:	0f 85 9b 00 00 00    	jne    c0009749 <KeLoadTimezoneStrings()+0x29b>
c00096ae:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00096b1:	8b 04 85 40 53 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcacc0]
c00096b8:	83 ec 0c             	sub    esp,0xc
c00096bb:	50                   	push   eax
c00096bc:	e8 bf 6e ff ff       	call   c0000580 <strlen>
c00096c1:	83 c4 10             	add    esp,0x10
c00096c4:	83 f8 35             	cmp    eax,0x35
c00096c7:	0f 96 c0             	setbe  al
c00096ca:	0f b6 c0             	movzx  eax,al
c00096cd:	85 c0                	test   eax,eax
c00096cf:	74 1d                	je     c00096ee <KeLoadTimezoneStrings()+0x240>
c00096d1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00096d4:	8b 04 85 40 53 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcacc0]
c00096db:	83 ec 08             	sub    esp,0x8
c00096de:	68 4e a9 02 c0       	push   0xc002a94e
c00096e3:	50                   	push   eax
c00096e4:	e8 87 71 ff ff       	call   c0000870 <strcat>
c00096e9:	83 c4 10             	add    esp,0x10
c00096ec:	eb c0                	jmp    c00096ae <KeLoadTimezoneStrings()+0x200>
c00096ee:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c00096f2:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00096f5:	89 c2                	mov    edx,eax
c00096f7:	c1 fa 1f             	sar    edx,0x1f
c00096fa:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c00096fd:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0009700:	39 c8                	cmp    eax,ecx
c0009702:	89 d0                	mov    eax,edx
c0009704:	19 d8                	sbb    eax,ebx
c0009706:	0f 82 d2 00 00 00    	jb     c00097de <KeLoadTimezoneStrings()+0x330>
c000970c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000970f:	a3 24 53 03 c0       	mov    ds:0xc0035324,eax
c0009714:	83 ec 08             	sub    esp,0x8
c0009717:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000971a:	68 50 a9 02 c0       	push   0xc002a950
c000971f:	e8 42 d8 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0009724:	83 c4 10             	add    esp,0x10
c0009727:	a1 24 53 03 c0       	mov    eax,ds:0xc0035324
c000972c:	83 ec 08             	sub    esp,0x8
c000972f:	50                   	push   eax
c0009730:	68 65 a9 02 c0       	push   0xc002a965
c0009735:	e8 2c d8 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000973a:	83 c4 10             	add    esp,0x10
c000973d:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
c0009744:	e9 9b 00 00 00       	jmp    c00097e4 <KeLoadTimezoneStrings()+0x336>
c0009749:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000974c:	8b 04 85 40 53 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcacc0]
c0009753:	83 ec 0c             	sub    esp,0xc
c0009756:	50                   	push   eax
c0009757:	e8 24 6e ff ff       	call   c0000580 <strlen>
c000975c:	83 c4 10             	add    esp,0x10
c000975f:	83 f8 31             	cmp    eax,0x31
c0009762:	0f 96 c0             	setbe  al
c0009765:	0f b6 c0             	movzx  eax,al
c0009768:	85 c0                	test   eax,eax
c000976a:	74 1f                	je     c000978b <KeLoadTimezoneStrings()+0x2dd>
c000976c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000976f:	8b 04 85 40 53 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcacc0]
c0009776:	83 ec 08             	sub    esp,0x8
c0009779:	8d 55 c6             	lea    edx,[ebp-0x3a]
c000977c:	52                   	push   edx
c000977d:	50                   	push   eax
c000977e:	e8 ed 70 ff ff       	call   c0000870 <strcat>
c0009783:	83 c4 10             	add    esp,0x10
c0009786:	e9 9d fe ff ff       	jmp    c0009628 <KeLoadTimezoneStrings()+0x17a>
c000978b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000978e:	8b 04 85 40 53 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcacc0]
c0009795:	83 ec 0c             	sub    esp,0xc
c0009798:	50                   	push   eax
c0009799:	e8 e2 6d ff ff       	call   c0000580 <strlen>
c000979e:	83 c4 10             	add    esp,0x10
c00097a1:	83 f8 32             	cmp    eax,0x32
c00097a4:	0f 94 c0             	sete   al
c00097a7:	0f b6 c0             	movzx  eax,al
c00097aa:	85 c0                	test   eax,eax
c00097ac:	0f 84 76 fe ff ff    	je     c0009628 <KeLoadTimezoneStrings()+0x17a>
c00097b2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00097b5:	8b 04 85 40 53 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcacc0]
c00097bc:	83 ec 08             	sub    esp,0x8
c00097bf:	68 69 a9 02 c0       	push   0xc002a969
c00097c4:	50                   	push   eax
c00097c5:	e8 a6 70 ff ff       	call   c0000870 <strcat>
c00097ca:	83 c4 10             	add    esp,0x10
c00097cd:	e9 56 fe ff ff       	jmp    c0009628 <KeLoadTimezoneStrings()+0x17a>
c00097d2:	90                   	nop
c00097d3:	e9 50 fe ff ff       	jmp    c0009628 <KeLoadTimezoneStrings()+0x17a>
c00097d8:	90                   	nop
c00097d9:	e9 4a fe ff ff       	jmp    c0009628 <KeLoadTimezoneStrings()+0x17a>
c00097de:	90                   	nop
c00097df:	e9 44 fe ff ff       	jmp    c0009628 <KeLoadTimezoneStrings()+0x17a>
c00097e4:	a1 24 53 03 c0       	mov    eax,ds:0xc0035324
c00097e9:	39 45 e8             	cmp    DWORD PTR [ebp-0x18],eax
c00097ec:	7d 49                	jge    c0009837 <KeLoadTimezoneStrings()+0x389>
c00097ee:	a1 24 53 03 c0       	mov    eax,ds:0xc0035324
c00097f3:	39 45 e8             	cmp    DWORD PTR [ebp-0x18],eax
c00097f6:	0f 9c c0             	setl   al
c00097f9:	0f b6 d0             	movzx  edx,al
c00097fc:	a1 24 53 03 c0       	mov    eax,ds:0xc0035324
c0009801:	52                   	push   edx
c0009802:	50                   	push   eax
c0009803:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c0009806:	68 6e a9 02 c0       	push   0xc002a96e
c000980b:	e8 56 d7 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0009810:	83 c4 10             	add    esp,0x10
c0009813:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0009816:	8b 04 85 40 53 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcacc0]
c000981d:	83 ec 04             	sub    esp,0x4
c0009820:	50                   	push   eax
c0009821:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c0009824:	68 7c a9 02 c0       	push   0xc002a97c
c0009829:	e8 38 d7 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000982e:	83 c4 10             	add    esp,0x10
c0009831:	83 45 e8 01          	add    DWORD PTR [ebp-0x18],0x1
c0009835:	eb ad                	jmp    c00097e4 <KeLoadTimezoneStrings()+0x336>
c0009837:	90                   	nop
c0009838:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000983b:	c9                   	leave  
c000983c:	c3                   	ret    

c000983d <KeGetTimezoneStringFromID(int)>:
c000983d:	55                   	push   ebp
c000983e:	89 e5                	mov    ebp,esp
c0009840:	83 ec 08             	sub    esp,0x8
c0009843:	83 ec 08             	sub    esp,0x8
c0009846:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0009849:	68 85 a9 02 c0       	push   0xc002a985
c000984e:	e8 13 d7 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0009853:	83 c4 10             	add    esp,0x10
c0009856:	a0 20 53 03 c0       	mov    al,ds:0xc0035320
c000985b:	83 f0 01             	xor    eax,0x1
c000985e:	0f b6 c0             	movzx  eax,al
c0009861:	85 c0                	test   eax,eax
c0009863:	74 15                	je     c000987a <KeGetTimezoneStringFromID(int)+0x3d>
c0009865:	e8 44 fc ff ff       	call   c00094ae <KeLoadTimezoneStrings()>
c000986a:	83 ec 0c             	sub    esp,0xc
c000986d:	68 a3 a9 02 c0       	push   0xc002a9a3
c0009872:	e8 ef d6 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0009877:	83 c4 10             	add    esp,0x10
c000987a:	a1 24 53 03 c0       	mov    eax,ds:0xc0035324
c000987f:	83 ec 04             	sub    esp,0x4
c0009882:	50                   	push   eax
c0009883:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0009886:	68 b4 a9 02 c0       	push   0xc002a9b4
c000988b:	e8 d6 d6 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0009890:	83 c4 10             	add    esp,0x10
c0009893:	a1 24 53 03 c0       	mov    eax,ds:0xc0035324
c0009898:	39 45 08             	cmp    DWORD PTR [ebp+0x8],eax
c000989b:	7d 06                	jge    c00098a3 <KeGetTimezoneStringFromID(int)+0x66>
c000989d:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
c00098a1:	79 07                	jns    c00098aa <KeGetTimezoneStringFromID(int)+0x6d>
c00098a3:	b8 00 00 00 00       	mov    eax,0x0
c00098a8:	eb 2e                	jmp    c00098d8 <KeGetTimezoneStringFromID(int)+0x9b>
c00098aa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00098ad:	8b 04 85 40 53 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcacc0]
c00098b4:	83 c0 01             	add    eax,0x1
c00098b7:	83 ec 04             	sub    esp,0x4
c00098ba:	50                   	push   eax
c00098bb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00098be:	68 c7 a9 02 c0       	push   0xc002a9c7
c00098c3:	e8 9e d6 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00098c8:	83 c4 10             	add    esp,0x10
c00098cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00098ce:	8b 04 85 40 53 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcacc0]
c00098d5:	83 c0 01             	add    eax,0x1
c00098d8:	c9                   	leave  
c00098d9:	c3                   	ret    

c00098da <KeUpdateTimezone(char const*)>:
c00098da:	55                   	push   ebp
c00098db:	89 e5                	mov    ebp,esp
c00098dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00098e0:	8a 00                	mov    al,BYTE PTR [eax]
c00098e2:	0f be c0             	movsx  eax,al
c00098e5:	83 f8 2b             	cmp    eax,0x2b
c00098e8:	74 11                	je     c00098fb <KeUpdateTimezone(char const*)+0x21>
c00098ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00098ed:	8a 00                	mov    al,BYTE PTR [eax]
c00098ef:	0f be c0             	movsx  eax,al
c00098f2:	83 f8 2d             	cmp    eax,0x2d
c00098f5:	0f 85 be 00 00 00    	jne    c00099b9 <KeUpdateTimezone(char const*)+0xdf>
c00098fb:	c6 05 60 56 03 c0 00 	mov    BYTE PTR ds:0xc0035660,0x0
c0009902:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009905:	83 c0 02             	add    eax,0x2
c0009908:	8a 00                	mov    al,BYTE PTR [eax]
c000990a:	0f be c0             	movsx  eax,al
c000990d:	83 f8 2e             	cmp    eax,0x2e
c0009910:	75 10                	jne    c0009922 <KeUpdateTimezone(char const*)+0x48>
c0009912:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009915:	83 c0 03             	add    eax,0x3
c0009918:	8a 00                	mov    al,BYTE PTR [eax]
c000991a:	0f be c0             	movsx  eax,al
c000991d:	83 f8 35             	cmp    eax,0x35
c0009920:	74 20                	je     c0009942 <KeUpdateTimezone(char const*)+0x68>
c0009922:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009925:	83 c0 03             	add    eax,0x3
c0009928:	8a 00                	mov    al,BYTE PTR [eax]
c000992a:	0f be c0             	movsx  eax,al
c000992d:	83 f8 2e             	cmp    eax,0x2e
c0009930:	75 14                	jne    c0009946 <KeUpdateTimezone(char const*)+0x6c>
c0009932:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009935:	83 c0 04             	add    eax,0x4
c0009938:	8a 00                	mov    al,BYTE PTR [eax]
c000993a:	0f be c0             	movsx  eax,al
c000993d:	83 f8 35             	cmp    eax,0x35
c0009940:	75 04                	jne    c0009946 <KeUpdateTimezone(char const*)+0x6c>
c0009942:	b0 01                	mov    al,0x1
c0009944:	eb 02                	jmp    c0009948 <KeUpdateTimezone(char const*)+0x6e>
c0009946:	b0 00                	mov    al,0x0
c0009948:	a2 61 56 03 c0       	mov    ds:0xc0035661,al
c000994d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009950:	83 c0 01             	add    eax,0x1
c0009953:	8a 00                	mov    al,BYTE PTR [eax]
c0009955:	0f be c0             	movsx  eax,al
c0009958:	83 e8 30             	sub    eax,0x30
c000995b:	a3 64 56 03 c0       	mov    ds:0xc0035664,eax
c0009960:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009963:	83 c0 03             	add    eax,0x3
c0009966:	8a 00                	mov    al,BYTE PTR [eax]
c0009968:	0f be c0             	movsx  eax,al
c000996b:	83 f8 2e             	cmp    eax,0x2e
c000996e:	75 2e                	jne    c000999e <KeUpdateTimezone(char const*)+0xc4>
c0009970:	8b 15 64 56 03 c0    	mov    edx,DWORD PTR ds:0xc0035664
c0009976:	89 d0                	mov    eax,edx
c0009978:	c1 e0 02             	shl    eax,0x2
c000997b:	01 d0                	add    eax,edx
c000997d:	d1 e0                	shl    eax,1
c000997f:	a3 64 56 03 c0       	mov    ds:0xc0035664,eax
c0009984:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009987:	83 c0 02             	add    eax,0x2
c000998a:	8a 00                	mov    al,BYTE PTR [eax]
c000998c:	0f be c0             	movsx  eax,al
c000998f:	8d 50 d0             	lea    edx,[eax-0x30]
c0009992:	a1 64 56 03 c0       	mov    eax,ds:0xc0035664
c0009997:	01 d0                	add    eax,edx
c0009999:	a3 64 56 03 c0       	mov    ds:0xc0035664,eax
c000999e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00099a1:	8a 00                	mov    al,BYTE PTR [eax]
c00099a3:	0f be c0             	movsx  eax,al
c00099a6:	83 f8 2d             	cmp    eax,0x2d
c00099a9:	75 26                	jne    c00099d1 <KeUpdateTimezone(char const*)+0xf7>
c00099ab:	a1 64 56 03 c0       	mov    eax,ds:0xc0035664
c00099b0:	f7 d8                	neg    eax
c00099b2:	a3 64 56 03 c0       	mov    ds:0xc0035664,eax
c00099b7:	eb 18                	jmp    c00099d1 <KeUpdateTimezone(char const*)+0xf7>
c00099b9:	c6 05 60 56 03 c0 00 	mov    BYTE PTR ds:0xc0035660,0x0
c00099c0:	c6 05 61 56 03 c0 00 	mov    BYTE PTR ds:0xc0035661,0x0
c00099c7:	c7 05 64 56 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0035664,0x0
c00099d1:	90                   	nop
c00099d2:	5d                   	pop    ebp
c00099d3:	c3                   	ret    

c00099d4 <KeSetTimezone(char const*)>:
c00099d4:	55                   	push   ebp
c00099d5:	89 e5                	mov    ebp,esp
c00099d7:	83 ec 18             	sub    esp,0x18
c00099da:	83 ec 0c             	sub    esp,0xc
c00099dd:	68 d4 a9 02 c0       	push   0xc002a9d4
c00099e2:	e8 79 43 00 00       	call   c000dd60 <CmOpen(char const*)>
c00099e7:	83 c4 10             	add    esp,0x10
c00099ea:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00099ed:	83 ec 08             	sub    esp,0x8
c00099f0:	68 f9 a9 02 c0       	push   0xc002a9f9
c00099f5:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00099f8:	e8 5e 4f 00 00       	call   c000e95b <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c00099fd:	83 c4 10             	add    esp,0x10
c0009a00:	83 ec 04             	sub    esp,0x4
c0009a03:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0009a06:	50                   	push   eax
c0009a07:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0009a0a:	e8 23 48 00 00       	call   c000e232 <CmSetString(Reghive_Tag*, int, char const*)>
c0009a0f:	83 c4 10             	add    esp,0x10
c0009a12:	83 ec 0c             	sub    esp,0xc
c0009a15:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0009a18:	e8 61 44 00 00       	call   c000de7e <CmClose(Reghive_Tag*)>
c0009a1d:	83 c4 10             	add    esp,0x10
c0009a20:	83 ec 0c             	sub    esp,0xc
c0009a23:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0009a26:	e8 af fe ff ff       	call   c00098da <KeUpdateTimezone(char const*)>
c0009a2b:	83 c4 10             	add    esp,0x10
c0009a2e:	90                   	nop
c0009a2f:	c9                   	leave  
c0009a30:	c3                   	ret    

c0009a31 <KeSetTimezone(int)>:
c0009a31:	55                   	push   ebp
c0009a32:	89 e5                	mov    ebp,esp
c0009a34:	83 ec 18             	sub    esp,0x18
c0009a37:	83 ec 0c             	sub    esp,0xc
c0009a3a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0009a3d:	e8 fb fd ff ff       	call   c000983d <KeGetTimezoneStringFromID(int)>
c0009a42:	83 c4 10             	add    esp,0x10
c0009a45:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0009a48:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0009a4c:	74 12                	je     c0009a60 <KeSetTimezone(int)+0x2f>
c0009a4e:	83 ec 0c             	sub    esp,0xc
c0009a51:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0009a54:	e8 7b ff ff ff       	call   c00099d4 <KeSetTimezone(char const*)>
c0009a59:	83 c4 10             	add    esp,0x10
c0009a5c:	b0 01                	mov    al,0x1
c0009a5e:	eb 02                	jmp    c0009a62 <KeSetTimezone(int)+0x31>
c0009a60:	b0 00                	mov    al,0x0
c0009a62:	c9                   	leave  
c0009a63:	c3                   	ret    

c0009a64 <KeLoadTimezone()>:
c0009a64:	55                   	push   ebp
c0009a65:	89 e5                	mov    ebp,esp
c0009a67:	81 ec 68 02 00 00    	sub    esp,0x268
c0009a6d:	c6 85 98 fd ff ff 00 	mov    BYTE PTR [ebp-0x268],0x0
c0009a74:	83 ec 0c             	sub    esp,0xc
c0009a77:	68 d4 a9 02 c0       	push   0xc002a9d4
c0009a7c:	e8 df 42 00 00       	call   c000dd60 <CmOpen(char const*)>
c0009a81:	83 c4 10             	add    esp,0x10
c0009a84:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0009a87:	83 ec 08             	sub    esp,0x8
c0009a8a:	68 f9 a9 02 c0       	push   0xc002a9f9
c0009a8f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0009a92:	e8 c4 4e 00 00       	call   c000e95b <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0009a97:	83 c4 10             	add    esp,0x10
c0009a9a:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0009a9d:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
c0009aa1:	7e 18                	jle    c0009abb <KeLoadTimezone()+0x57>
c0009aa3:	83 ec 04             	sub    esp,0x4
c0009aa6:	8d 85 98 fd ff ff    	lea    eax,[ebp-0x268]
c0009aac:	50                   	push   eax
c0009aad:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0009ab0:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0009ab3:	e8 18 44 00 00       	call   c000ded0 <CmGetString(Reghive_Tag*, int, char*)>
c0009ab8:	83 c4 10             	add    esp,0x10
c0009abb:	83 ec 0c             	sub    esp,0xc
c0009abe:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0009ac1:	e8 b8 43 00 00       	call   c000de7e <CmClose(Reghive_Tag*)>
c0009ac6:	83 c4 10             	add    esp,0x10
c0009ac9:	83 ec 0c             	sub    esp,0xc
c0009acc:	8d 85 98 fd ff ff    	lea    eax,[ebp-0x268]
c0009ad2:	50                   	push   eax
c0009ad3:	e8 02 fe ff ff       	call   c00098da <KeUpdateTimezone(char const*)>
c0009ad8:	83 c4 10             	add    esp,0x10
c0009adb:	90                   	nop
c0009adc:	c9                   	leave  
c0009add:	c3                   	ret    

c0009ade <Clock::Clock(char const*)>:
c0009ade:	83 ec 0c             	sub    esp,0xc
c0009ae1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009ae5:	83 ec 08             	sub    esp,0x8
c0009ae8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009aec:	50                   	push   eax
c0009aed:	e8 8e 0a 00 00       	call   c000a580 <Device::Device(char const*)>
c0009af2:	83 c4 10             	add    esp,0x10
c0009af5:	ba 58 aa 02 c0       	mov    edx,0xc002aa58
c0009afa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009afe:	89 10                	mov    DWORD PTR [eax],edx
c0009b00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009b04:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c0009b0e:	90                   	nop
c0009b0f:	83 c4 0c             	add    esp,0xc
c0009b12:	c3                   	ret    
c0009b13:	90                   	nop

c0009b14 <Clock::~Clock()>:
c0009b14:	83 ec 0c             	sub    esp,0xc
c0009b17:	ba 58 aa 02 c0       	mov    edx,0xc002aa58
c0009b1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009b20:	89 10                	mov    DWORD PTR [eax],edx
c0009b22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009b26:	83 ec 0c             	sub    esp,0xc
c0009b29:	50                   	push   eax
c0009b2a:	e8 f1 07 00 00       	call   c000a320 <Device::~Device()>
c0009b2f:	83 c4 10             	add    esp,0x10
c0009b32:	90                   	nop
c0009b33:	83 c4 0c             	add    esp,0xc
c0009b36:	c3                   	ret    
c0009b37:	90                   	nop

c0009b38 <Clock::~Clock()>:
c0009b38:	83 ec 0c             	sub    esp,0xc
c0009b3b:	83 ec 0c             	sub    esp,0xc
c0009b3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b42:	e8 cd ff ff ff       	call   c0009b14 <Clock::~Clock()>
c0009b47:	83 c4 10             	add    esp,0x10
c0009b4a:	83 ec 08             	sub    esp,0x8
c0009b4d:	68 58 01 00 00       	push   0x158
c0009b52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b56:	e8 b1 41 00 00       	call   c000dd0c <operator delete(void*, unsigned long)>
c0009b5b:	83 c4 10             	add    esp,0x10
c0009b5e:	83 c4 0c             	add    esp,0xc
c0009b61:	c3                   	ret    

c0009b62 <Clock::timeInSecondsLocal()>:
c0009b62:	55                   	push   ebp
c0009b63:	89 e5                	mov    ebp,esp
c0009b65:	53                   	push   ebx
c0009b66:	83 ec 04             	sub    esp,0x4
c0009b69:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009b6c:	8b 00                	mov    eax,DWORD PTR [eax]
c0009b6e:	83 c0 24             	add    eax,0x24
c0009b71:	8b 00                	mov    eax,DWORD PTR [eax]
c0009b73:	83 ec 0c             	sub    esp,0xc
c0009b76:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0009b79:	ff d0                	call   eax
c0009b7b:	83 c4 10             	add    esp,0x10
c0009b7e:	89 c1                	mov    ecx,eax
c0009b80:	89 d3                	mov    ebx,edx
c0009b82:	a0 60 56 03 c0       	mov    al,ds:0xc0035660
c0009b87:	0f b6 d0             	movzx  edx,al
c0009b8a:	a1 64 56 03 c0       	mov    eax,ds:0xc0035664
c0009b8f:	01 d0                	add    eax,edx
c0009b91:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0009b97:	89 c2                	mov    edx,eax
c0009b99:	c1 fa 1f             	sar    edx,0x1f
c0009b9c:	01 c1                	add    ecx,eax
c0009b9e:	11 d3                	adc    ebx,edx
c0009ba0:	a0 61 56 03 c0       	mov    al,ds:0xc0035661
c0009ba5:	0f b6 c0             	movzx  eax,al
c0009ba8:	85 c0                	test   eax,eax
c0009baa:	74 0c                	je     c0009bb8 <Clock::timeInSecondsLocal()+0x56>
c0009bac:	b8 08 07 00 00       	mov    eax,0x708
c0009bb1:	ba 00 00 00 00       	mov    edx,0x0
c0009bb6:	eb 0a                	jmp    c0009bc2 <Clock::timeInSecondsLocal()+0x60>
c0009bb8:	b8 00 00 00 00       	mov    eax,0x0
c0009bbd:	ba 00 00 00 00       	mov    edx,0x0
c0009bc2:	01 c8                	add    eax,ecx
c0009bc4:	11 da                	adc    edx,ebx
c0009bc6:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0009bc9:	c9                   	leave  
c0009bca:	c3                   	ret    
c0009bcb:	90                   	nop

c0009bcc <Clock::setTimeInSecondsLocal(unsigned long long)>:
c0009bcc:	55                   	push   ebp
c0009bcd:	89 e5                	mov    ebp,esp
c0009bcf:	56                   	push   esi
c0009bd0:	53                   	push   ebx
c0009bd1:	83 ec 10             	sub    esp,0x10
c0009bd4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0009bd7:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0009bda:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0009bdd:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0009be0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009be3:	8b 00                	mov    eax,DWORD PTR [eax]
c0009be5:	83 c0 2c             	add    eax,0x2c
c0009be8:	8b 30                	mov    esi,DWORD PTR [eax]
c0009bea:	a0 60 56 03 c0       	mov    al,ds:0xc0035660
c0009bef:	0f b6 d0             	movzx  edx,al
c0009bf2:	a1 64 56 03 c0       	mov    eax,ds:0xc0035664
c0009bf7:	01 d0                	add    eax,edx
c0009bf9:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0009bff:	89 c2                	mov    edx,eax
c0009c01:	c1 fa 1f             	sar    edx,0x1f
c0009c04:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0009c07:	8b 5d f4             	mov    ebx,DWORD PTR [ebp-0xc]
c0009c0a:	29 c1                	sub    ecx,eax
c0009c0c:	19 d3                	sbb    ebx,edx
c0009c0e:	a0 61 56 03 c0       	mov    al,ds:0xc0035661
c0009c13:	0f b6 c0             	movzx  eax,al
c0009c16:	85 c0                	test   eax,eax
c0009c18:	74 0c                	je     c0009c26 <Clock::setTimeInSecondsLocal(unsigned long long)+0x5a>
c0009c1a:	b8 08 07 00 00       	mov    eax,0x708
c0009c1f:	ba 00 00 00 00       	mov    edx,0x0
c0009c24:	eb 0a                	jmp    c0009c30 <Clock::setTimeInSecondsLocal(unsigned long long)+0x64>
c0009c26:	b8 00 00 00 00       	mov    eax,0x0
c0009c2b:	ba 00 00 00 00       	mov    edx,0x0
c0009c30:	29 c1                	sub    ecx,eax
c0009c32:	19 d3                	sbb    ebx,edx
c0009c34:	89 c8                	mov    eax,ecx
c0009c36:	89 da                	mov    edx,ebx
c0009c38:	83 ec 04             	sub    esp,0x4
c0009c3b:	52                   	push   edx
c0009c3c:	50                   	push   eax
c0009c3d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0009c40:	ff d6                	call   esi
c0009c42:	83 c4 10             	add    esp,0x10
c0009c45:	8d 65 f8             	lea    esp,[ebp-0x8]
c0009c48:	5b                   	pop    ebx
c0009c49:	5e                   	pop    esi
c0009c4a:	5d                   	pop    ebp
c0009c4b:	c3                   	ret    

c0009c4c <KeDatetimeToSeconds(datetime_t)>:
c0009c4c:	55                   	push   ebp
c0009c4d:	89 e5                	mov    ebp,esp
c0009c4f:	53                   	push   ebx
c0009c50:	83 ec 24             	sub    esp,0x24
c0009c53:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c0009c57:	2d 6c 07 00 00       	sub    eax,0x76c
c0009c5c:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0009c60:	8a 45 09             	mov    al,BYTE PTR [ebp+0x9]
c0009c63:	83 e8 01             	sub    eax,0x1
c0009c66:	88 45 09             	mov    BYTE PTR [ebp+0x9],al
c0009c69:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
c0009c70:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0009c77:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0009c7e:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c0009c85:	8a 45 0e             	mov    al,BYTE PTR [ebp+0xe]
c0009c88:	0f b6 c8             	movzx  ecx,al
c0009c8b:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0009c8e:	0f b6 d0             	movzx  edx,al
c0009c91:	89 d0                	mov    eax,edx
c0009c93:	c1 e0 04             	shl    eax,0x4
c0009c96:	29 d0                	sub    eax,edx
c0009c98:	c1 e0 02             	shl    eax,0x2
c0009c9b:	8d 14 01             	lea    edx,[ecx+eax*1]
c0009c9e:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0009ca1:	0f b6 c0             	movzx  eax,al
c0009ca4:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0009caa:	01 d0                	add    eax,edx
c0009cac:	89 c2                	mov    edx,eax
c0009cae:	c1 fa 1f             	sar    edx,0x1f
c0009cb1:	01 45 e8             	add    DWORD PTR [ebp-0x18],eax
c0009cb4:	11 55 ec             	adc    DWORD PTR [ebp-0x14],edx
c0009cb7:	8a 45 08             	mov    al,BYTE PTR [ebp+0x8]
c0009cba:	0f b6 c0             	movzx  eax,al
c0009cbd:	83 e8 01             	sub    eax,0x1
c0009cc0:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
c0009cc3:	8a 45 09             	mov    al,BYTE PTR [ebp+0x9]
c0009cc6:	0f b6 c0             	movzx  eax,al
c0009cc9:	8b 04 85 20 aa 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd55e0]
c0009cd0:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
c0009cd3:	8a 45 09             	mov    al,BYTE PTR [ebp+0x9]
c0009cd6:	0f b6 c0             	movzx  eax,al
c0009cd9:	83 f8 01             	cmp    eax,0x1
c0009cdc:	76 7c                	jbe    c0009d5a <KeDatetimeToSeconds(datetime_t)+0x10e>
c0009cde:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c0009ce2:	0f b7 c0             	movzx  eax,ax
c0009ce5:	83 e0 03             	and    eax,0x3
c0009ce8:	85 c0                	test   eax,eax
c0009cea:	75 6e                	jne    c0009d5a <KeDatetimeToSeconds(datetime_t)+0x10e>
c0009cec:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c0009cf0:	0f b7 c8             	movzx  ecx,ax
c0009cf3:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
c0009cf8:	89 c8                	mov    eax,ecx
c0009cfa:	f7 e2                	mul    edx
c0009cfc:	c1 ea 05             	shr    edx,0x5
c0009cff:	89 d0                	mov    eax,edx
c0009d01:	c1 e0 02             	shl    eax,0x2
c0009d04:	01 d0                	add    eax,edx
c0009d06:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0009d0d:	01 d0                	add    eax,edx
c0009d0f:	c1 e0 02             	shl    eax,0x2
c0009d12:	29 c1                	sub    ecx,eax
c0009d14:	89 c8                	mov    eax,ecx
c0009d16:	0f b7 c0             	movzx  eax,ax
c0009d19:	85 c0                	test   eax,eax
c0009d1b:	75 39                	jne    c0009d56 <KeDatetimeToSeconds(datetime_t)+0x10a>
c0009d1d:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c0009d21:	0f b7 c0             	movzx  eax,ax
c0009d24:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
c0009d2a:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c0009d2f:	f7 e9                	imul   ecx
c0009d31:	c1 fa 07             	sar    edx,0x7
c0009d34:	89 c8                	mov    eax,ecx
c0009d36:	c1 f8 1f             	sar    eax,0x1f
c0009d39:	29 c2                	sub    edx,eax
c0009d3b:	89 d0                	mov    eax,edx
c0009d3d:	c1 e0 02             	shl    eax,0x2
c0009d40:	01 d0                	add    eax,edx
c0009d42:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0009d49:	01 d0                	add    eax,edx
c0009d4b:	c1 e0 04             	shl    eax,0x4
c0009d4e:	29 c1                	sub    ecx,eax
c0009d50:	89 ca                	mov    edx,ecx
c0009d52:	85 d2                	test   edx,edx
c0009d54:	75 04                	jne    c0009d5a <KeDatetimeToSeconds(datetime_t)+0x10e>
c0009d56:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c0009d5a:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c0009d5e:	0f b7 c0             	movzx  eax,ax
c0009d61:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0009d64:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009d67:	83 f8 46             	cmp    eax,0x46
c0009d6a:	0f 9f c0             	setg   al
c0009d6d:	0f b6 c0             	movzx  eax,al
c0009d70:	85 c0                	test   eax,eax
c0009d72:	0f 84 a4 00 00 00    	je     c0009e1c <KeDatetimeToSeconds(datetime_t)+0x1d0>
c0009d78:	c7 45 e0 46 00 00 00 	mov    DWORD PTR [ebp-0x20],0x46
c0009d7f:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c0009d83:	0f b7 d0             	movzx  edx,ax
c0009d86:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009d89:	39 c2                	cmp    edx,eax
c0009d8b:	0f 8e b8 01 00 00    	jle    c0009f49 <KeDatetimeToSeconds(datetime_t)+0x2fd>
c0009d91:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009d94:	83 e0 03             	and    eax,0x3
c0009d97:	85 c0                	test   eax,eax
c0009d99:	75 6b                	jne    c0009e06 <KeDatetimeToSeconds(datetime_t)+0x1ba>
c0009d9b:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0009d9e:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c0009da3:	f7 e9                	imul   ecx
c0009da5:	c1 fa 05             	sar    edx,0x5
c0009da8:	89 c8                	mov    eax,ecx
c0009daa:	c1 f8 1f             	sar    eax,0x1f
c0009dad:	29 c2                	sub    edx,eax
c0009daf:	89 d0                	mov    eax,edx
c0009db1:	c1 e0 02             	shl    eax,0x2
c0009db4:	01 d0                	add    eax,edx
c0009db6:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0009dbd:	01 d0                	add    eax,edx
c0009dbf:	c1 e0 02             	shl    eax,0x2
c0009dc2:	29 c1                	sub    ecx,eax
c0009dc4:	89 ca                	mov    edx,ecx
c0009dc6:	85 d2                	test   edx,edx
c0009dc8:	75 35                	jne    c0009dff <KeDatetimeToSeconds(datetime_t)+0x1b3>
c0009dca:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009dcd:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
c0009dd3:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c0009dd8:	f7 e9                	imul   ecx
c0009dda:	c1 fa 07             	sar    edx,0x7
c0009ddd:	89 c8                	mov    eax,ecx
c0009ddf:	c1 f8 1f             	sar    eax,0x1f
c0009de2:	29 c2                	sub    edx,eax
c0009de4:	89 d0                	mov    eax,edx
c0009de6:	c1 e0 02             	shl    eax,0x2
c0009de9:	01 d0                	add    eax,edx
c0009deb:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0009df2:	01 d0                	add    eax,edx
c0009df4:	c1 e0 04             	shl    eax,0x4
c0009df7:	29 c1                	sub    ecx,eax
c0009df9:	89 ca                	mov    edx,ecx
c0009dfb:	85 d2                	test   edx,edx
c0009dfd:	75 07                	jne    c0009e06 <KeDatetimeToSeconds(datetime_t)+0x1ba>
c0009dff:	b8 6e 01 00 00       	mov    eax,0x16e
c0009e04:	eb 05                	jmp    c0009e0b <KeDatetimeToSeconds(datetime_t)+0x1bf>
c0009e06:	b8 6d 01 00 00       	mov    eax,0x16d
c0009e0b:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
c0009e0e:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009e11:	83 c0 01             	add    eax,0x1
c0009e14:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0009e17:	e9 63 ff ff ff       	jmp    c0009d7f <KeDatetimeToSeconds(datetime_t)+0x133>
c0009e1c:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009e1f:	83 f8 45             	cmp    eax,0x45
c0009e22:	0f 8f 21 01 00 00    	jg     c0009f49 <KeDatetimeToSeconds(datetime_t)+0x2fd>
c0009e28:	c7 45 e0 45 00 00 00 	mov    DWORD PTR [ebp-0x20],0x45
c0009e2f:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c0009e33:	0f b7 d0             	movzx  edx,ax
c0009e36:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009e39:	39 c2                	cmp    edx,eax
c0009e3b:	0f 8d 8b 00 00 00    	jge    c0009ecc <KeDatetimeToSeconds(datetime_t)+0x280>
c0009e41:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009e44:	83 e0 03             	and    eax,0x3
c0009e47:	85 c0                	test   eax,eax
c0009e49:	75 6b                	jne    c0009eb6 <KeDatetimeToSeconds(datetime_t)+0x26a>
c0009e4b:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0009e4e:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c0009e53:	f7 e9                	imul   ecx
c0009e55:	c1 fa 05             	sar    edx,0x5
c0009e58:	89 c8                	mov    eax,ecx
c0009e5a:	c1 f8 1f             	sar    eax,0x1f
c0009e5d:	29 c2                	sub    edx,eax
c0009e5f:	89 d0                	mov    eax,edx
c0009e61:	c1 e0 02             	shl    eax,0x2
c0009e64:	01 d0                	add    eax,edx
c0009e66:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0009e6d:	01 d0                	add    eax,edx
c0009e6f:	c1 e0 02             	shl    eax,0x2
c0009e72:	29 c1                	sub    ecx,eax
c0009e74:	89 ca                	mov    edx,ecx
c0009e76:	85 d2                	test   edx,edx
c0009e78:	75 35                	jne    c0009eaf <KeDatetimeToSeconds(datetime_t)+0x263>
c0009e7a:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009e7d:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
c0009e83:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c0009e88:	f7 e9                	imul   ecx
c0009e8a:	c1 fa 07             	sar    edx,0x7
c0009e8d:	89 c8                	mov    eax,ecx
c0009e8f:	c1 f8 1f             	sar    eax,0x1f
c0009e92:	29 c2                	sub    edx,eax
c0009e94:	89 d0                	mov    eax,edx
c0009e96:	c1 e0 02             	shl    eax,0x2
c0009e99:	01 d0                	add    eax,edx
c0009e9b:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0009ea2:	01 d0                	add    eax,edx
c0009ea4:	c1 e0 04             	shl    eax,0x4
c0009ea7:	29 c1                	sub    ecx,eax
c0009ea9:	89 ca                	mov    edx,ecx
c0009eab:	85 d2                	test   edx,edx
c0009ead:	75 07                	jne    c0009eb6 <KeDatetimeToSeconds(datetime_t)+0x26a>
c0009eaf:	b8 6e 01 00 00       	mov    eax,0x16e
c0009eb4:	eb 05                	jmp    c0009ebb <KeDatetimeToSeconds(datetime_t)+0x26f>
c0009eb6:	b8 6d 01 00 00       	mov    eax,0x16d
c0009ebb:	29 45 f4             	sub    DWORD PTR [ebp-0xc],eax
c0009ebe:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009ec1:	83 e8 01             	sub    eax,0x1
c0009ec4:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0009ec7:	e9 63 ff ff ff       	jmp    c0009e2f <KeDatetimeToSeconds(datetime_t)+0x1e3>
c0009ecc:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009ecf:	83 e0 03             	and    eax,0x3
c0009ed2:	85 c0                	test   eax,eax
c0009ed4:	75 6b                	jne    c0009f41 <KeDatetimeToSeconds(datetime_t)+0x2f5>
c0009ed6:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0009ed9:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c0009ede:	f7 e9                	imul   ecx
c0009ee0:	c1 fa 05             	sar    edx,0x5
c0009ee3:	89 c8                	mov    eax,ecx
c0009ee5:	c1 f8 1f             	sar    eax,0x1f
c0009ee8:	29 c2                	sub    edx,eax
c0009eea:	89 d0                	mov    eax,edx
c0009eec:	c1 e0 02             	shl    eax,0x2
c0009eef:	01 d0                	add    eax,edx
c0009ef1:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0009ef8:	01 d0                	add    eax,edx
c0009efa:	c1 e0 02             	shl    eax,0x2
c0009efd:	29 c1                	sub    ecx,eax
c0009eff:	89 ca                	mov    edx,ecx
c0009f01:	85 d2                	test   edx,edx
c0009f03:	75 35                	jne    c0009f3a <KeDatetimeToSeconds(datetime_t)+0x2ee>
c0009f05:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009f08:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
c0009f0e:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c0009f13:	f7 e9                	imul   ecx
c0009f15:	c1 fa 07             	sar    edx,0x7
c0009f18:	89 c8                	mov    eax,ecx
c0009f1a:	c1 f8 1f             	sar    eax,0x1f
c0009f1d:	29 c2                	sub    edx,eax
c0009f1f:	89 d0                	mov    eax,edx
c0009f21:	c1 e0 02             	shl    eax,0x2
c0009f24:	01 d0                	add    eax,edx
c0009f26:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0009f2d:	01 d0                	add    eax,edx
c0009f2f:	c1 e0 04             	shl    eax,0x4
c0009f32:	29 c1                	sub    ecx,eax
c0009f34:	89 ca                	mov    edx,ecx
c0009f36:	85 d2                	test   edx,edx
c0009f38:	75 07                	jne    c0009f41 <KeDatetimeToSeconds(datetime_t)+0x2f5>
c0009f3a:	b8 6e 01 00 00       	mov    eax,0x16e
c0009f3f:	eb 05                	jmp    c0009f46 <KeDatetimeToSeconds(datetime_t)+0x2fa>
c0009f41:	b8 6d 01 00 00       	mov    eax,0x16d
c0009f46:	29 45 f4             	sub    DWORD PTR [ebp-0xc],eax
c0009f49:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0009f4c:	89 c2                	mov    edx,eax
c0009f4e:	c1 fa 1f             	sar    edx,0x1f
c0009f51:	69 da 80 51 01 00    	imul   ebx,edx,0x15180
c0009f57:	6b c8 00             	imul   ecx,eax,0x0
c0009f5a:	01 d9                	add    ecx,ebx
c0009f5c:	bb 80 51 01 00       	mov    ebx,0x15180
c0009f61:	f7 e3                	mul    ebx
c0009f63:	01 d1                	add    ecx,edx
c0009f65:	89 ca                	mov    edx,ecx
c0009f67:	01 45 e8             	add    DWORD PTR [ebp-0x18],eax
c0009f6a:	11 55 ec             	adc    DWORD PTR [ebp-0x14],edx
c0009f6d:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0009f70:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0009f73:	83 c4 24             	add    esp,0x24
c0009f76:	5b                   	pop    ebx
c0009f77:	5d                   	pop    ebp
c0009f78:	c3                   	ret    
c0009f79:	90                   	nop

c0009f7a <Clock::setTimeInDatetimeLocal(datetime_t)>:
c0009f7a:	55                   	push   ebp
c0009f7b:	89 e5                	mov    ebp,esp
c0009f7d:	56                   	push   esi
c0009f7e:	53                   	push   ebx
c0009f7f:	83 ec 20             	sub    esp,0x20
c0009f82:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0009f85:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0009f88:	e8 bf fc ff ff       	call   c0009c4c <KeDatetimeToSeconds(datetime_t)>
c0009f8d:	83 c4 08             	add    esp,0x8
c0009f90:	89 c3                	mov    ebx,eax
c0009f92:	89 d6                	mov    esi,edx
c0009f94:	a0 60 56 03 c0       	mov    al,ds:0xc0035660
c0009f99:	0f b6 d0             	movzx  edx,al
c0009f9c:	a1 64 56 03 c0       	mov    eax,ds:0xc0035664
c0009fa1:	01 d0                	add    eax,edx
c0009fa3:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0009fa9:	89 c2                	mov    edx,eax
c0009fab:	c1 fa 1f             	sar    edx,0x1f
c0009fae:	29 c3                	sub    ebx,eax
c0009fb0:	19 d6                	sbb    esi,edx
c0009fb2:	a0 61 56 03 c0       	mov    al,ds:0xc0035661
c0009fb7:	0f b6 c0             	movzx  eax,al
c0009fba:	85 c0                	test   eax,eax
c0009fbc:	74 0c                	je     c0009fca <Clock::setTimeInDatetimeLocal(datetime_t)+0x50>
c0009fbe:	b8 08 07 00 00       	mov    eax,0x708
c0009fc3:	ba 00 00 00 00       	mov    edx,0x0
c0009fc8:	eb 0a                	jmp    c0009fd4 <Clock::setTimeInDatetimeLocal(datetime_t)+0x5a>
c0009fca:	b8 00 00 00 00       	mov    eax,0x0
c0009fcf:	ba 00 00 00 00       	mov    edx,0x0
c0009fd4:	29 c3                	sub    ebx,eax
c0009fd6:	19 d6                	sbb    esi,edx
c0009fd8:	89 d8                	mov    eax,ebx
c0009fda:	89 f2                	mov    edx,esi
c0009fdc:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0009fdf:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0009fe2:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0009fe5:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0009fe8:	89 d0                	mov    eax,edx
c0009fea:	31 d2                	xor    edx,edx
c0009fec:	89 c3                	mov    ebx,eax
c0009fee:	89 d6                	mov    esi,edx
c0009ff0:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0009ff3:	80 e5 ff             	and    ch,0xff
c0009ff6:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0009ff9:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
c0009ffc:	83 e1 00             	and    ecx,0x0
c0009fff:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c000a002:	83 ec 0c             	sub    esp,0xc
c000a005:	56                   	push   esi
c000a006:	53                   	push   ebx
c000a007:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c000a00a:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c000a00d:	68 0e aa 02 c0       	push   0xc002aa0e
c000a012:	e8 4f cf ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000a017:	83 c4 20             	add    esp,0x20
c000a01a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a01d:	8b 00                	mov    eax,DWORD PTR [eax]
c000a01f:	83 c0 2c             	add    eax,0x2c
c000a022:	8b 00                	mov    eax,DWORD PTR [eax]
c000a024:	83 ec 04             	sub    esp,0x4
c000a027:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000a02a:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000a02d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000a030:	ff d0                	call   eax
c000a032:	83 c4 10             	add    esp,0x10
c000a035:	8d 65 f8             	lea    esp,[ebp-0x8]
c000a038:	5b                   	pop    ebx
c000a039:	5e                   	pop    esi
c000a03a:	5d                   	pop    ebp
c000a03b:	c3                   	ret    

c000a03c <KeSecondsToDatetime(unsigned long long)>:
c000a03c:	55                   	push   ebp
c000a03d:	89 e5                	mov    ebp,esp
c000a03f:	83 ec 48             	sub    esp,0x48
c000a042:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000a045:	89 45 c0             	mov    DWORD PTR [ebp-0x40],eax
c000a048:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000a04b:	89 45 c4             	mov    DWORD PTR [ebp-0x3c],eax
c000a04e:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c000a051:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c000a054:	6a 00                	push   0x0
c000a056:	68 80 51 01 00       	push   0x15180
c000a05b:	52                   	push   edx
c000a05c:	50                   	push   eax
c000a05d:	e8 72 a2 01 00       	call   c00242d4 <__udivdi3>
c000a062:	83 c4 10             	add    esp,0x10
c000a065:	05 6c fa 0a 00       	add    eax,0xafa6c
c000a06a:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000a06d:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c000a070:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c000a073:	6a 00                	push   0x0
c000a075:	68 80 51 01 00       	push   0x15180
c000a07a:	52                   	push   edx
c000a07b:	50                   	push   eax
c000a07c:	e8 53 a3 01 00       	call   c00243d4 <__umoddi3>
c000a081:	83 c4 10             	add    esp,0x10
c000a084:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000a087:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
c000a08b:	79 0b                	jns    c000a098 <KeSecondsToDatetime(unsigned long long)+0x5c>
c000a08d:	81 45 f0 80 51 01 00 	add    DWORD PTR [ebp-0x10],0x15180
c000a094:	83 6d f4 01          	sub    DWORD PTR [ebp-0xc],0x1
c000a098:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c000a09b:	ba c5 b3 a2 91       	mov    edx,0x91a2b3c5
c000a0a0:	89 c8                	mov    eax,ecx
c000a0a2:	f7 ea                	imul   edx
c000a0a4:	8d 04 0a             	lea    eax,[edx+ecx*1]
c000a0a7:	c1 f8 0b             	sar    eax,0xb
c000a0aa:	89 c2                	mov    edx,eax
c000a0ac:	89 c8                	mov    eax,ecx
c000a0ae:	c1 f8 1f             	sar    eax,0x1f
c000a0b1:	29 c2                	sub    edx,eax
c000a0b3:	89 d0                	mov    eax,edx
c000a0b5:	88 c2                	mov    dl,al
c000a0b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a0ba:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c000a0bd:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c000a0c0:	ba c5 b3 a2 91       	mov    edx,0x91a2b3c5
c000a0c5:	89 c8                	mov    eax,ecx
c000a0c7:	f7 ea                	imul   edx
c000a0c9:	8d 04 0a             	lea    eax,[edx+ecx*1]
c000a0cc:	c1 f8 0b             	sar    eax,0xb
c000a0cf:	89 c2                	mov    edx,eax
c000a0d1:	89 c8                	mov    eax,ecx
c000a0d3:	c1 f8 1f             	sar    eax,0x1f
c000a0d6:	29 c2                	sub    edx,eax
c000a0d8:	89 d0                	mov    eax,edx
c000a0da:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000a0e0:	29 c1                	sub    ecx,eax
c000a0e2:	89 c8                	mov    eax,ecx
c000a0e4:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000a0e7:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c000a0ea:	ba 89 88 88 88       	mov    edx,0x88888889
c000a0ef:	89 c8                	mov    eax,ecx
c000a0f1:	f7 ea                	imul   edx
c000a0f3:	8d 04 0a             	lea    eax,[edx+ecx*1]
c000a0f6:	c1 f8 05             	sar    eax,0x5
c000a0f9:	89 c2                	mov    edx,eax
c000a0fb:	89 c8                	mov    eax,ecx
c000a0fd:	c1 f8 1f             	sar    eax,0x1f
c000a100:	29 c2                	sub    edx,eax
c000a102:	89 d0                	mov    eax,edx
c000a104:	88 c2                	mov    dl,al
c000a106:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a109:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000a10c:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c000a10f:	ba 89 88 88 88       	mov    edx,0x88888889
c000a114:	89 c8                	mov    eax,ecx
c000a116:	f7 ea                	imul   edx
c000a118:	8d 04 0a             	lea    eax,[edx+ecx*1]
c000a11b:	c1 f8 05             	sar    eax,0x5
c000a11e:	89 c2                	mov    edx,eax
c000a120:	89 c8                	mov    eax,ecx
c000a122:	c1 f8 1f             	sar    eax,0x1f
c000a125:	29 c2                	sub    edx,eax
c000a127:	89 d0                	mov    eax,edx
c000a129:	c1 e0 04             	shl    eax,0x4
c000a12c:	29 d0                	sub    eax,edx
c000a12e:	c1 e0 02             	shl    eax,0x2
c000a131:	29 c1                	sub    ecx,eax
c000a133:	89 ca                	mov    edx,ecx
c000a135:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a138:	88 50 06             	mov    BYTE PTR [eax+0x6],dl
c000a13b:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000a13f:	79 20                	jns    c000a161 <KeSecondsToDatetime(unsigned long long)+0x125>
c000a141:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000a144:	8d 88 50 c5 fd ff    	lea    ecx,[eax-0x23ab0]
c000a14a:	ba bd 06 6b 39       	mov    edx,0x396b06bd
c000a14f:	89 c8                	mov    eax,ecx
c000a151:	f7 ea                	imul   edx
c000a153:	c1 fa 0f             	sar    edx,0xf
c000a156:	89 c8                	mov    eax,ecx
c000a158:	c1 f8 1f             	sar    eax,0x1f
c000a15b:	29 c2                	sub    edx,eax
c000a15d:	89 d0                	mov    eax,edx
c000a15f:	eb 18                	jmp    c000a179 <KeSecondsToDatetime(unsigned long long)+0x13d>
c000a161:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
c000a164:	ba bd 06 6b 39       	mov    edx,0x396b06bd
c000a169:	89 c8                	mov    eax,ecx
c000a16b:	f7 ea                	imul   edx
c000a16d:	c1 fa 0f             	sar    edx,0xf
c000a170:	89 c8                	mov    eax,ecx
c000a172:	c1 f8 1f             	sar    eax,0x1f
c000a175:	29 c2                	sub    edx,eax
c000a177:	89 d0                	mov    eax,edx
c000a179:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c000a17c:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c000a17f:	69 d0 4f c5 fd ff    	imul   edx,eax,0xfffdc54f
c000a185:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000a188:	01 d0                	add    eax,edx
c000a18a:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c000a18d:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c000a190:	c1 e8 02             	shr    eax,0x2
c000a193:	ba d9 7c c6 59       	mov    edx,0x59c67cd9
c000a198:	f7 e2                	mul    edx
c000a19a:	c1 ea 07             	shr    edx,0x7
c000a19d:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c000a1a0:	29 d0                	sub    eax,edx
c000a1a2:	89 c1                	mov    ecx,eax
c000a1a4:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c000a1a7:	c1 e8 02             	shr    eax,0x2
c000a1aa:	ba 7f 20 6b 39       	mov    edx,0x396b207f
c000a1af:	f7 e2                	mul    edx
c000a1b1:	89 d0                	mov    eax,edx
c000a1b3:	c1 e8 0b             	shr    eax,0xb
c000a1b6:	01 c1                	add    ecx,eax
c000a1b8:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c000a1bb:	c1 e8 04             	shr    eax,0x4
c000a1be:	ba 41 d6 72 00       	mov    edx,0x72d641
c000a1c3:	f7 e2                	mul    edx
c000a1c5:	89 d0                	mov    eax,edx
c000a1c7:	c1 e8 04             	shr    eax,0x4
c000a1ca:	29 c1                	sub    ecx,eax
c000a1cc:	ba 61 f3 19 67       	mov    edx,0x6719f361
c000a1d1:	89 c8                	mov    eax,ecx
c000a1d3:	f7 e2                	mul    edx
c000a1d5:	89 c8                	mov    eax,ecx
c000a1d7:	29 d0                	sub    eax,edx
c000a1d9:	d1 e8                	shr    eax,1
c000a1db:	01 d0                	add    eax,edx
c000a1dd:	c1 e8 08             	shr    eax,0x8
c000a1e0:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c000a1e3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c000a1e6:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
c000a1eb:	f7 e2                	mul    edx
c000a1ed:	89 d1                	mov    ecx,edx
c000a1ef:	c1 e9 05             	shr    ecx,0x5
c000a1f2:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c000a1f5:	89 d0                	mov    eax,edx
c000a1f7:	c1 e0 03             	shl    eax,0x3
c000a1fa:	01 d0                	add    eax,edx
c000a1fc:	c1 e0 03             	shl    eax,0x3
c000a1ff:	01 d0                	add    eax,edx
c000a201:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000a208:	01 c2                	add    edx,eax
c000a20a:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c000a20d:	c1 e8 02             	shr    eax,0x2
c000a210:	01 d0                	add    eax,edx
c000a212:	29 c1                	sub    ecx,eax
c000a214:	89 ca                	mov    edx,ecx
c000a216:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c000a219:	01 d0                	add    eax,edx
c000a21b:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000a21e:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c000a221:	89 d0                	mov    eax,edx
c000a223:	c1 e0 02             	shl    eax,0x2
c000a226:	01 d0                	add    eax,edx
c000a228:	83 c0 02             	add    eax,0x2
c000a22b:	ba d7 80 2b d6       	mov    edx,0xd62b80d7
c000a230:	f7 e2                	mul    edx
c000a232:	89 d0                	mov    eax,edx
c000a234:	c1 e8 07             	shr    eax,0x7
c000a237:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c000a23a:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c000a23d:	89 d0                	mov    eax,edx
c000a23f:	c1 e0 03             	shl    eax,0x3
c000a242:	01 d0                	add    eax,edx
c000a244:	89 c2                	mov    edx,eax
c000a246:	c1 e2 04             	shl    edx,0x4
c000a249:	01 d0                	add    eax,edx
c000a24b:	83 c0 02             	add    eax,0x2
c000a24e:	ba cd cc cc cc       	mov    edx,0xcccccccd
c000a253:	f7 e2                	mul    edx
c000a255:	c1 ea 02             	shr    edx,0x2
c000a258:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000a25b:	29 d0                	sub    eax,edx
c000a25d:	83 c0 01             	add    eax,0x1
c000a260:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c000a263:	83 7d dc 09          	cmp    DWORD PTR [ebp-0x24],0x9
c000a267:	77 07                	ja     c000a270 <KeSecondsToDatetime(unsigned long long)+0x234>
c000a269:	b8 02 00 00 00       	mov    eax,0x2
c000a26e:	eb 05                	jmp    c000a275 <KeSecondsToDatetime(unsigned long long)+0x239>
c000a270:	b8 f6 ff ff ff       	mov    eax,0xfffffff6
c000a275:	01 45 dc             	add    DWORD PTR [ebp-0x24],eax
c000a278:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c000a27b:	89 d0                	mov    eax,edx
c000a27d:	c1 e0 02             	shl    eax,0x2
c000a280:	01 d0                	add    eax,edx
c000a282:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000a289:	01 d0                	add    eax,edx
c000a28b:	c1 e0 04             	shl    eax,0x4
c000a28e:	89 c2                	mov    edx,eax
c000a290:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c000a293:	01 c2                	add    edx,eax
c000a295:	83 7d dc 01          	cmp    DWORD PTR [ebp-0x24],0x1
c000a299:	0f 96 c0             	setbe  al
c000a29c:	0f b6 c0             	movzx  eax,al
c000a29f:	01 d0                	add    eax,edx
c000a2a1:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c000a2a4:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c000a2a7:	89 c2                	mov    edx,eax
c000a2a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a2ac:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c000a2b0:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c000a2b3:	83 c0 01             	add    eax,0x1
c000a2b6:	88 c2                	mov    dl,al
c000a2b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a2bb:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000a2be:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c000a2c1:	88 c2                	mov    dl,al
c000a2c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a2c6:	88 10                	mov    BYTE PTR [eax],dl
c000a2c8:	90                   	nop
c000a2c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a2cc:	c9                   	leave  
c000a2cd:	c2 04 00             	ret    0x4

c000a2d0 <Clock::timeInDatetimeLocal()>:
c000a2d0:	55                   	push   ebp
c000a2d1:	89 e5                	mov    ebp,esp
c000a2d3:	83 ec 08             	sub    esp,0x8
c000a2d6:	83 ec 0c             	sub    esp,0xc
c000a2d9:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c000a2dc:	e8 81 f8 ff ff       	call   c0009b62 <Clock::timeInSecondsLocal()>
c000a2e1:	83 c4 10             	add    esp,0x10
c000a2e4:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c000a2e7:	83 ec 04             	sub    esp,0x4
c000a2ea:	52                   	push   edx
c000a2eb:	50                   	push   eax
c000a2ec:	51                   	push   ecx
c000a2ed:	e8 4a fd ff ff       	call   c000a03c <KeSecondsToDatetime(unsigned long long)>
c000a2f2:	83 c4 0c             	add    esp,0xc
c000a2f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a2f8:	c9                   	leave  
c000a2f9:	c2 04 00             	ret    0x4

c000a2fc <Device::hibernate()>:
c000a2fc:	c3                   	ret    
c000a2fd:	90                   	nop

c000a2fe <Device::wake()>:
c000a2fe:	c3                   	ret    
c000a2ff:	90                   	nop

c000a300 <Device::detect()>:
c000a300:	c3                   	ret    
c000a301:	90                   	nop

c000a302 <Device::disableLegacy()>:
c000a302:	c3                   	ret    
c000a303:	90                   	nop

c000a304 <Device::powerSaving(PowerSavingLevel)>:
c000a304:	c3                   	ret    
c000a305:	90                   	nop

c000a306 <DriverlessDevice::close(int, int, void*)>:
c000a306:	31 c0                	xor    eax,eax
c000a308:	c3                   	ret    
c000a309:	90                   	nop

c000a30a <DriverlessDevice::detect()>:
c000a30a:	c3                   	ret    
c000a30b:	90                   	nop

c000a30c <DriverlessDevice::open(int, int, void*)>:
c000a30c:	83 ec 18             	sub    esp,0x18
c000a30f:	68 8c aa 02 c0       	push   0xc002aa8c
c000a314:	e8 47 62 00 00       	call   c0010560 <KePanic(char const*)>
c000a319:	83 c8 ff             	or     eax,0xffffffff
c000a31c:	83 c4 1c             	add    esp,0x1c
c000a31f:	c3                   	ret    

c000a320 <Device::~Device()>:
c000a320:	ba 30 ab 02 c0       	mov    edx,0xc002ab30
c000a325:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a329:	89 10                	mov    DWORD PTR [eax],edx
c000a32b:	90                   	nop
c000a32c:	c3                   	ret    
c000a32d:	90                   	nop

c000a32e <Device::~Device()>:
c000a32e:	83 ec 0c             	sub    esp,0xc
c000a331:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000a335:	e8 e6 ff ff ff       	call   c000a320 <Device::~Device()>
c000a33a:	83 c4 04             	add    esp,0x4
c000a33d:	83 ec 08             	sub    esp,0x8
c000a340:	68 58 01 00 00       	push   0x158
c000a345:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a349:	e8 be 39 00 00       	call   c000dd0c <operator delete(void*, unsigned long)>
c000a34e:	83 c4 10             	add    esp,0x10
c000a351:	83 c4 0c             	add    esp,0xc
c000a354:	c3                   	ret    
c000a355:	90                   	nop

c000a356 <Device::findAndLoadDriver()>:
c000a356:	c7 44 24 04 aa aa 02 c0 	mov    DWORD PTR [esp+0x4],0xc002aaaa
c000a35e:	e9 03 cc ff ff       	jmp    c0006f66 <Dbg::kprintf(char const*, ...)>
c000a363:	90                   	nop

c000a364 <Device::preOpenPCI(PCIDeviceInfo)>:
c000a364:	57                   	push   edi
c000a365:	b9 09 00 00 00       	mov    ecx,0x9
c000a36a:	56                   	push   esi
c000a36b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000a36f:	8d 74 24 10          	lea    esi,[esp+0x10]
c000a373:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000a37d:	81 c7 18 01 00 00    	add    edi,0x118
c000a383:	fc                   	cld    
c000a384:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000a386:	5e                   	pop    esi
c000a387:	5f                   	pop    edi
c000a388:	c3                   	ret    
c000a389:	90                   	nop

c000a38a <Device::preOpenACPI(void*, char*, char*)>:
c000a38a:	57                   	push   edi
c000a38b:	b9 1e 00 00 00       	mov    ecx,0x1e
c000a390:	56                   	push   esi
c000a391:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a395:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000a399:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000a39d:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000a3a7:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000a3ad:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000a3b3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a3b5:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000a3bb:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000a3bf:	b9 0e 00 00 00       	mov    ecx,0xe
c000a3c4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a3c6:	5e                   	pop    esi
c000a3c7:	5f                   	pop    edi
c000a3c8:	c3                   	ret    
c000a3c9:	90                   	nop

c000a3ca <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000a3ca:	53                   	push   ebx
c000a3cb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a3cf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a3d3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000a3d7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000a3db:	0f b6 c0             	movzx  eax,al
c000a3de:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a3e2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000a3e6:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000a3ea:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000a3ee:	5b                   	pop    ebx
c000a3ef:	e9 93 14 01 00       	jmp    c001b887 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c000a3f4 <Device::getParent()>:
c000a3f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a3f8:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000a3fe:	c3                   	ret    
c000a3ff:	90                   	nop

c000a400 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000a400:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000a404:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a408:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c000a40d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a411:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000a415:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000a419:	e9 da 15 01 00       	jmp    c001b9f8 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c000a41e <Device::addChild(Device*)>:
c000a41e:	53                   	push   ebx
c000a41f:	83 ec 08             	sub    esp,0x8
c000a422:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000a426:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a42a:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000a430:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000a436:	8b 13                	mov    edx,DWORD PTR [ebx]
c000a438:	85 d2                	test   edx,edx
c000a43a:	74 04                	je     c000a440 <Device::addChild(Device*)+0x22>
c000a43c:	89 d3                	mov    ebx,edx
c000a43e:	eb f6                	jmp    c000a436 <Device::addChild(Device*)+0x18>
c000a440:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000a443:	83 ec 0c             	sub    esp,0xc
c000a446:	6a 08                	push   0x8
c000a448:	e8 bf 5c 00 00       	call   c001010c <malloc>
c000a44d:	89 03                	mov    DWORD PTR [ebx],eax
c000a44f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000a455:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000a45c:	83 c4 18             	add    esp,0x18
c000a45f:	5b                   	pop    ebx
c000a460:	c3                   	ret    
c000a461:	90                   	nop

c000a462 <Device::removeAllChildren()>:
c000a462:	56                   	push   esi
c000a463:	53                   	push   ebx
c000a464:	52                   	push   edx
c000a465:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000a469:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000a46f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000a472:	74 17                	je     c000a48b <Device::removeAllChildren()+0x29>
c000a474:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a477:	85 c0                	test   eax,eax
c000a479:	74 0c                	je     c000a487 <Device::removeAllChildren()+0x25>
c000a47b:	8b 10                	mov    edx,DWORD PTR [eax]
c000a47d:	83 ec 0c             	sub    esp,0xc
c000a480:	50                   	push   eax
c000a481:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000a484:	83 c4 10             	add    esp,0x10
c000a487:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000a489:	eb e4                	jmp    c000a46f <Device::removeAllChildren()+0xd>
c000a48b:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000a491:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000a497:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000a49d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000a4a4:	58                   	pop    eax
c000a4a5:	5b                   	pop    ebx
c000a4a6:	5e                   	pop    esi
c000a4a7:	c3                   	ret    

c000a4a8 <Device::hibernateAll()>:
c000a4a8:	53                   	push   ebx
c000a4a9:	83 ec 14             	sub    esp,0x14
c000a4ac:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000a4b0:	8b 03                	mov    eax,DWORD PTR [ebx]
c000a4b2:	53                   	push   ebx
c000a4b3:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000a4b6:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000a4bc:	83 c4 10             	add    esp,0x10
c000a4bf:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000a4c2:	74 0f                	je     c000a4d3 <Device::hibernateAll()+0x2b>
c000a4c4:	83 ec 0c             	sub    esp,0xc
c000a4c7:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000a4ca:	e8 d9 ff ff ff       	call   c000a4a8 <Device::hibernateAll()>
c000a4cf:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000a4d1:	eb e9                	jmp    c000a4bc <Device::hibernateAll()+0x14>
c000a4d3:	83 c4 08             	add    esp,0x8
c000a4d6:	5b                   	pop    ebx
c000a4d7:	c3                   	ret    

c000a4d8 <Device::wakeAll()>:
c000a4d8:	53                   	push   ebx
c000a4d9:	83 ec 14             	sub    esp,0x14
c000a4dc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000a4e0:	8b 03                	mov    eax,DWORD PTR [ebx]
c000a4e2:	53                   	push   ebx
c000a4e3:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000a4e6:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000a4ec:	83 c4 10             	add    esp,0x10
c000a4ef:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000a4f2:	74 0f                	je     c000a503 <Device::wakeAll()+0x2b>
c000a4f4:	83 ec 0c             	sub    esp,0xc
c000a4f7:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000a4fa:	e8 d9 ff ff ff       	call   c000a4d8 <Device::wakeAll()>
c000a4ff:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000a501:	eb e9                	jmp    c000a4ec <Device::wakeAll()+0x14>
c000a503:	83 c4 08             	add    esp,0x8
c000a506:	5b                   	pop    ebx
c000a507:	c3                   	ret    

c000a508 <Device::detectAll()>:
c000a508:	53                   	push   ebx
c000a509:	83 ec 14             	sub    esp,0x14
c000a50c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000a510:	8b 03                	mov    eax,DWORD PTR [ebx]
c000a512:	53                   	push   ebx
c000a513:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000a516:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000a51c:	83 c4 10             	add    esp,0x10
c000a51f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000a522:	74 0f                	je     c000a533 <Device::detectAll()+0x2b>
c000a524:	83 ec 0c             	sub    esp,0xc
c000a527:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000a52a:	e8 d9 ff ff ff       	call   c000a508 <Device::detectAll()>
c000a52f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000a531:	eb e9                	jmp    c000a51c <Device::detectAll()+0x14>
c000a533:	83 c4 08             	add    esp,0x8
c000a536:	5b                   	pop    ebx
c000a537:	c3                   	ret    

c000a538 <Device::disableLegacyAll()>:
c000a538:	c3                   	ret    
c000a539:	90                   	nop

c000a53a <Device::loadDriversForAll()>:
c000a53a:	c3                   	ret    
c000a53b:	90                   	nop

c000a53c <Device::powerSavingAll(PowerSavingLevel)>:
c000a53c:	56                   	push   esi
c000a53d:	53                   	push   ebx
c000a53e:	83 ec 0c             	sub    esp,0xc
c000a541:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000a545:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000a549:	8b 03                	mov    eax,DWORD PTR [ebx]
c000a54b:	56                   	push   esi
c000a54c:	53                   	push   ebx
c000a54d:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000a550:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000a556:	83 c4 10             	add    esp,0x10
c000a559:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000a55c:	74 0f                	je     c000a56d <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000a55e:	52                   	push   edx
c000a55f:	52                   	push   edx
c000a560:	56                   	push   esi
c000a561:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000a564:	e8 d3 ff ff ff       	call   c000a53c <Device::powerSavingAll(PowerSavingLevel)>
c000a569:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000a56b:	eb e9                	jmp    c000a556 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000a56d:	58                   	pop    eax
c000a56e:	5b                   	pop    ebx
c000a56f:	5e                   	pop    esi
c000a570:	c3                   	ret    
c000a571:	90                   	nop

c000a572 <Device::setName(char const*)>:
c000a572:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000a57a:	e9 d1 60 ff ff       	jmp    c0000650 <strcpy>
c000a57f:	90                   	nop

c000a580 <Device::Device(char const*)>:
c000a580:	83 ec 1c             	sub    esp,0x1c
c000a583:	ba 30 ab 02 c0       	mov    edx,0xc002ab30
c000a588:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a58c:	89 10                	mov    DWORD PTR [eax],edx
c000a58e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a592:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000a59c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a5a0:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000a5aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a5ae:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000a5b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a5bc:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000a5c6:	83 ec 08             	sub    esp,0x8
c000a5c9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a5cd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a5d1:	e8 9c ff ff ff       	call   c000a572 <Device::setName(char const*)>
c000a5d6:	83 c4 10             	add    esp,0x10
c000a5d9:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000a5e1:	83 ec 0c             	sub    esp,0xc
c000a5e4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a5e8:	e8 1f 5b 00 00       	call   c001010c <malloc>
c000a5ed:	83 c4 10             	add    esp,0x10
c000a5f0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000a5f6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000a5fd:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000a601:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000a607:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a60b:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000a611:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000a617:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a61b:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000a621:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000a628:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a62c:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000a633:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a637:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000a63e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a642:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000a64c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a650:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000a65a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a65e:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000a668:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a66c:	c7 80 10 01 00 00 14 00 00 00 	mov    DWORD PTR [eax+0x110],0x14
c000a676:	90                   	nop
c000a677:	83 c4 1c             	add    esp,0x1c
c000a67a:	c3                   	ret    
c000a67b:	90                   	nop

c000a67c <Device::getName()>:
c000a67c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a680:	05 d0 00 00 00       	add    eax,0xd0
c000a685:	c3                   	ret    

c000a686 <Device::closeAll()>:
c000a686:	53                   	push   ebx
c000a687:	83 ec 08             	sub    esp,0x8
c000a68a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000a68e:	53                   	push   ebx
c000a68f:	e8 e8 ff ff ff       	call   c000a67c <Device::getName()>
c000a694:	52                   	push   edx
c000a695:	50                   	push   eax
c000a696:	68 e4 aa 02 c0       	push   0xc002aae4
c000a69b:	e8 c6 c8 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000a6a0:	8b 03                	mov    eax,DWORD PTR [ebx]
c000a6a2:	6a 00                	push   0x0
c000a6a4:	6a 00                	push   0x0
c000a6a6:	6a 00                	push   0x0
c000a6a8:	53                   	push   ebx
c000a6a9:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000a6ac:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000a6b2:	83 c4 20             	add    esp,0x20
c000a6b5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000a6b8:	74 12                	je     c000a6cc <Device::closeAll()+0x46>
c000a6ba:	83 ec 0c             	sub    esp,0xc
c000a6bd:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000a6c0:	e8 c1 ff ff ff       	call   c000a686 <Device::closeAll()>
c000a6c5:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000a6c7:	83 c4 10             	add    esp,0x10
c000a6ca:	eb e9                	jmp    c000a6b5 <Device::closeAll()+0x2f>
c000a6cc:	83 c4 08             	add    esp,0x8
c000a6cf:	5b                   	pop    ebx
c000a6d0:	c3                   	ret    
c000a6d1:	90                   	nop

c000a6d2 <DriverlessDevice::DriverlessDevice(char const*)>:
c000a6d2:	83 ec 0c             	sub    esp,0xc
c000a6d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a6d9:	83 ec 08             	sub    esp,0x8
c000a6dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a6e0:	50                   	push   eax
c000a6e1:	e8 9a fe ff ff       	call   c000a580 <Device::Device(char const*)>
c000a6e6:	83 c4 10             	add    esp,0x10
c000a6e9:	ba 5c ab 02 c0       	mov    edx,0xc002ab5c
c000a6ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a6f2:	89 10                	mov    DWORD PTR [eax],edx
c000a6f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a6f8:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000a702:	90                   	nop
c000a703:	83 c4 0c             	add    esp,0xc
c000a706:	c3                   	ret    
c000a707:	90                   	nop

c000a708 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000a708:	57                   	push   edi
c000a709:	56                   	push   esi
c000a70a:	53                   	push   ebx
c000a70b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000a70f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000a713:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000a717:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000a71d:	75 0c                	jne    c000a72b <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000a71f:	52                   	push   edx
c000a720:	52                   	push   edx
c000a721:	53                   	push   ebx
c000a722:	56                   	push   esi
c000a723:	e8 dc e5 01 00       	call   c0028d04 <LinkedList<Device>::addElement(Device*)>
c000a728:	83 c4 10             	add    esp,0x10
c000a72b:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000a731:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000a734:	74 12                	je     c000a748 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000a736:	50                   	push   eax
c000a737:	57                   	push   edi
c000a738:	56                   	push   esi
c000a739:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000a73c:	e8 c7 ff ff ff       	call   c000a708 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000a741:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000a743:	83 c4 10             	add    esp,0x10
c000a746:	eb e9                	jmp    c000a731 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000a748:	5b                   	pop    ebx
c000a749:	5e                   	pop    esi
c000a74a:	5f                   	pop    edi
c000a74b:	c3                   	ret    

c000a74c <getDevicesOfType(DeviceType)>:
c000a74c:	53                   	push   ebx
c000a74d:	83 ec 14             	sub    esp,0x14
c000a750:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000a754:	53                   	push   ebx
c000a755:	e8 86 e6 01 00       	call   c0028de0 <LinkedList<Device>::LinkedList()>
c000a75a:	83 c4 0c             	add    esp,0xc
c000a75d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a761:	53                   	push   ebx
c000a762:	ff 35 08 61 03 c0    	push   DWORD PTR ds:0xc0036108
c000a768:	e8 9b ff ff ff       	call   c000a708 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000a76d:	83 c4 18             	add    esp,0x18
c000a770:	89 d8                	mov    eax,ebx
c000a772:	5b                   	pop    ebx
c000a773:	c2 04 00             	ret    0x4
c000a776:	66 90                	xchg   ax,ax

c000a778 <HardDiskController::HardDiskController(char const*)>:
c000a778:	83 ec 0c             	sub    esp,0xc
c000a77b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a77f:	83 ec 08             	sub    esp,0x8
c000a782:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a786:	50                   	push   eax
c000a787:	e8 f4 fd ff ff       	call   c000a580 <Device::Device(char const*)>
c000a78c:	83 c4 10             	add    esp,0x10
c000a78f:	ba 88 ab 02 c0       	mov    edx,0xc002ab88
c000a794:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a798:	89 10                	mov    DWORD PTR [eax],edx
c000a79a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a79e:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000a7a8:	90                   	nop
c000a7a9:	83 c4 0c             	add    esp,0xc
c000a7ac:	c3                   	ret    
c000a7ad:	90                   	nop
c000a7ae:	66 90                	xchg   ax,ax

c000a7b0 <HardDiskController::~HardDiskController()>:
c000a7b0:	83 ec 0c             	sub    esp,0xc
c000a7b3:	ba 88 ab 02 c0       	mov    edx,0xc002ab88
c000a7b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a7bc:	89 10                	mov    DWORD PTR [eax],edx
c000a7be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a7c2:	83 ec 0c             	sub    esp,0xc
c000a7c5:	50                   	push   eax
c000a7c6:	e8 55 fb ff ff       	call   c000a320 <Device::~Device()>
c000a7cb:	83 c4 10             	add    esp,0x10
c000a7ce:	90                   	nop
c000a7cf:	83 c4 0c             	add    esp,0xc
c000a7d2:	c3                   	ret    
c000a7d3:	90                   	nop

c000a7d4 <HardDiskController::~HardDiskController()>:
c000a7d4:	83 ec 0c             	sub    esp,0xc
c000a7d7:	83 ec 0c             	sub    esp,0xc
c000a7da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a7de:	e8 cd ff ff ff       	call   c000a7b0 <HardDiskController::~HardDiskController()>
c000a7e3:	83 c4 10             	add    esp,0x10
c000a7e6:	83 ec 08             	sub    esp,0x8
c000a7e9:	68 58 01 00 00       	push   0x158
c000a7ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a7f2:	e8 15 35 00 00       	call   c000dd0c <operator delete(void*, unsigned long)>
c000a7f7:	83 c4 10             	add    esp,0x10
c000a7fa:	83 c4 0c             	add    esp,0xc
c000a7fd:	c3                   	ret    

c000a7fe <PhysicalDisk::eject()>:
c000a7fe:	83 c8 ff             	or     eax,0xffffffff
c000a801:	c3                   	ret    

c000a802 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000a802:	83 ec 0c             	sub    esp,0xc
c000a805:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a809:	83 ec 08             	sub    esp,0x8
c000a80c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a810:	50                   	push   eax
c000a811:	e8 6a fd ff ff       	call   c000a580 <Device::Device(char const*)>
c000a816:	83 c4 10             	add    esp,0x10
c000a819:	ba b4 ab 02 c0       	mov    edx,0xc002abb4
c000a81e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a822:	89 10                	mov    DWORD PTR [eax],edx
c000a824:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a828:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000a82f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a833:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000a83a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a83e:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000a848:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a84c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a850:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000a856:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a85a:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000a864:	90                   	nop
c000a865:	83 c4 0c             	add    esp,0xc
c000a868:	c3                   	ret    
c000a869:	90                   	nop

c000a86a <PhysicalDisk::startCache()>:
c000a86a:	56                   	push   esi
c000a86b:	53                   	push   ebx
c000a86c:	83 ec 10             	sub    esp,0x10
c000a86f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000a873:	6a 44                	push   0x44
c000a875:	e8 92 58 00 00       	call   c001010c <malloc>
c000a87a:	89 c6                	mov    esi,eax
c000a87c:	58                   	pop    eax
c000a87d:	5a                   	pop    edx
c000a87e:	53                   	push   ebx
c000a87f:	56                   	push   esi
c000a880:	e8 a7 13 00 00       	call   c000bc2c <VCache::VCache(PhysicalDisk*)>
c000a885:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000a88b:	83 c4 14             	add    esp,0x14
c000a88e:	5b                   	pop    ebx
c000a88f:	5e                   	pop    esi
c000a890:	c3                   	ret    
c000a891:	90                   	nop

c000a892 <PhysicalDisk::~PhysicalDisk()>:
c000a892:	83 ec 0c             	sub    esp,0xc
c000a895:	ba b4 ab 02 c0       	mov    edx,0xc002abb4
c000a89a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a89e:	89 10                	mov    DWORD PTR [eax],edx
c000a8a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a8a4:	83 ec 0c             	sub    esp,0xc
c000a8a7:	50                   	push   eax
c000a8a8:	e8 73 fa ff ff       	call   c000a320 <Device::~Device()>
c000a8ad:	83 c4 10             	add    esp,0x10
c000a8b0:	90                   	nop
c000a8b1:	83 c4 0c             	add    esp,0xc
c000a8b4:	c3                   	ret    
c000a8b5:	90                   	nop

c000a8b6 <PhysicalDisk::~PhysicalDisk()>:
c000a8b6:	83 ec 0c             	sub    esp,0xc
c000a8b9:	83 ec 0c             	sub    esp,0xc
c000a8bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a8c0:	e8 cd ff ff ff       	call   c000a892 <PhysicalDisk::~PhysicalDisk()>
c000a8c5:	83 c4 10             	add    esp,0x10
c000a8c8:	83 ec 08             	sub    esp,0x8
c000a8cb:	68 6c 01 00 00       	push   0x16c
c000a8d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a8d4:	e8 33 34 00 00       	call   c000dd0c <operator delete(void*, unsigned long)>
c000a8d9:	83 c4 10             	add    esp,0x10
c000a8dc:	83 c4 0c             	add    esp,0xc
c000a8df:	c3                   	ret    

c000a8e0 <startGUI(void*)>:
c000a8e0:	55                   	push   ebp
c000a8e1:	89 e5                	mov    ebp,esp
c000a8e3:	83 ec 08             	sub    esp,0x8
c000a8e6:	f0 83 2d 30 63 03 c0 01 	lock sub DWORD PTR ds:0xc0036330,0x1
c000a8ee:	a1 30 63 03 c0       	mov    eax,ds:0xc0036330
c000a8f3:	85 c0                	test   eax,eax
c000a8f5:	75 01                	jne    c000a8f8 <startGUI(void*)+0x18>
c000a8f7:	fb                   	sti    
c000a8f8:	a1 08 61 03 c0       	mov    eax,ds:0xc0036108
c000a8fd:	83 ec 04             	sub    esp,0x4
c000a900:	6a 00                	push   0x0
c000a902:	50                   	push   eax
c000a903:	68 e4 ab 02 c0       	push   0xc002abe4
c000a908:	e8 59 be 00 00       	call   c0016766 <KeLoadAndExecuteDriver(char const*, void*, bool)>
c000a90d:	83 c4 10             	add    esp,0x10
c000a910:	a1 08 61 03 c0       	mov    eax,ds:0xc0036108
c000a915:	83 ec 04             	sub    esp,0x4
c000a918:	6a 00                	push   0x0
c000a91a:	50                   	push   eax
c000a91b:	68 fe ab 02 c0       	push   0xc002abfe
c000a920:	e8 41 be 00 00       	call   c0016766 <KeLoadAndExecuteDriver(char const*, void*, bool)>
c000a925:	83 c4 10             	add    esp,0x10
c000a928:	eb fe                	jmp    c000a928 <startGUI(void*)+0x48>

c000a92a <startGUIVESA(void*)>:
c000a92a:	55                   	push   ebp
c000a92b:	89 e5                	mov    ebp,esp
c000a92d:	83 ec 08             	sub    esp,0x8
c000a930:	f0 83 2d 30 63 03 c0 01 	lock sub DWORD PTR ds:0xc0036330,0x1
c000a938:	a1 30 63 03 c0       	mov    eax,ds:0xc0036330
c000a93d:	85 c0                	test   eax,eax
c000a93f:	75 01                	jne    c000a942 <startGUIVESA(void*)+0x18>
c000a941:	fb                   	sti    
c000a942:	a1 08 61 03 c0       	mov    eax,ds:0xc0036108
c000a947:	83 ec 04             	sub    esp,0x4
c000a94a:	6a 00                	push   0x0
c000a94c:	50                   	push   eax
c000a94d:	68 1c ac 02 c0       	push   0xc002ac1c
c000a952:	e8 0f be 00 00       	call   c0016766 <KeLoadAndExecuteDriver(char const*, void*, bool)>
c000a957:	83 c4 10             	add    esp,0x10
c000a95a:	a1 08 61 03 c0       	mov    eax,ds:0xc0036108
c000a95f:	83 ec 04             	sub    esp,0x4
c000a962:	6a 00                	push   0x0
c000a964:	50                   	push   eax
c000a965:	68 fe ab 02 c0       	push   0xc002abfe
c000a96a:	e8 f7 bd 00 00       	call   c0016766 <KeLoadAndExecuteDriver(char const*, void*, bool)>
c000a96f:	83 c4 10             	add    esp,0x10
c000a972:	eb fe                	jmp    c000a972 <startGUIVESA(void*)+0x48>

c000a974 <sendKeyToTerminal(unsigned char)>:
c000a974:	55                   	push   ebp
c000a975:	89 e5                	mov    ebp,esp
c000a977:	83 ec 28             	sub    esp,0x28
c000a97a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a97d:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000a980:	a1 f4 61 03 c0       	mov    eax,ds:0xc00361f4
c000a985:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c000a989:	83 ec 08             	sub    esp,0x8
c000a98c:	52                   	push   edx
c000a98d:	50                   	push   eax
c000a98e:	e8 55 88 00 00       	call   c00131e8 <VgaText::receiveKey(unsigned char)>
c000a993:	83 c4 10             	add    esp,0x10
c000a996:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000a99a:	83 f8 0a             	cmp    eax,0xa
c000a99d:	74 16                	je     c000a9b5 <sendKeyToTerminal(unsigned char)+0x41>
c000a99f:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000a9a3:	83 f8 03             	cmp    eax,0x3
c000a9a6:	74 0d                	je     c000a9b5 <sendKeyToTerminal(unsigned char)+0x41>
c000a9a8:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000a9ac:	83 f8 1c             	cmp    eax,0x1c
c000a9af:	0f 85 92 00 00 00    	jne    c000aa47 <sendKeyToTerminal(unsigned char)+0xd3>
c000a9b5:	fa                   	cli    
c000a9b6:	a1 30 63 03 c0       	mov    eax,ds:0xc0036330
c000a9bb:	83 c0 01             	add    eax,0x1
c000a9be:	a3 30 63 03 c0       	mov    ds:0xc0036330,eax
c000a9c3:	a1 2c 63 03 c0       	mov    eax,ds:0xc003632c
c000a9c8:	83 c0 01             	add    eax,0x1
c000a9cb:	a3 2c 63 03 c0       	mov    ds:0xc003632c,eax
c000a9d0:	a1 80 56 03 c0       	mov    eax,ds:0xc0035680
c000a9d5:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000a9d8:	c7 05 80 56 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0035680,0x0
c000a9e2:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000a9e6:	74 1f                	je     c000aa07 <sendKeyToTerminal(unsigned char)+0x93>
c000a9e8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000a9eb:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000a9ee:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000a9f1:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000a9f4:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000a9f7:	83 ec 0c             	sub    esp,0xc
c000a9fa:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000a9fd:	e8 3e ca 00 00       	call   c0017440 <unblockTask(ThreadControlBlock*)>
c000aa02:	83 c4 10             	add    esp,0x10
c000aa05:	eb db                	jmp    c000a9e2 <sendKeyToTerminal(unsigned char)+0x6e>
c000aa07:	a1 2c 63 03 c0       	mov    eax,ds:0xc003632c
c000aa0c:	83 e8 01             	sub    eax,0x1
c000aa0f:	a3 2c 63 03 c0       	mov    ds:0xc003632c,eax
c000aa14:	a1 2c 63 03 c0       	mov    eax,ds:0xc003632c
c000aa19:	85 c0                	test   eax,eax
c000aa1b:	75 18                	jne    c000aa35 <sendKeyToTerminal(unsigned char)+0xc1>
c000aa1d:	a1 28 63 03 c0       	mov    eax,ds:0xc0036328
c000aa22:	85 c0                	test   eax,eax
c000aa24:	74 0f                	je     c000aa35 <sendKeyToTerminal(unsigned char)+0xc1>
c000aa26:	c7 05 28 63 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0036328,0x0
c000aa30:	e8 b3 c6 00 00       	call   c00170e8 <schedule()>
c000aa35:	f0 83 2d 30 63 03 c0 01 	lock sub DWORD PTR ds:0xc0036330,0x1
c000aa3d:	a1 30 63 03 c0       	mov    eax,ds:0xc0036330
c000aa42:	85 c0                	test   eax,eax
c000aa44:	75 01                	jne    c000aa47 <sendKeyToTerminal(unsigned char)+0xd3>
c000aa46:	fb                   	sti    
c000aa47:	90                   	nop
c000aa48:	c9                   	leave  
c000aa49:	c3                   	ret    

c000aa4a <sendKeyboardToken(KeyboardToken)>:
c000aa4a:	55                   	push   ebp
c000aa4b:	89 e5                	mov    ebp,esp
c000aa4d:	83 ec 18             	sub    esp,0x18
c000aa50:	e8 88 63 00 00       	call   c0010ddd <KeUserIOReceived()>
c000aa55:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000aa58:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000aa5b:	0f b7 c0             	movzx  eax,ax
c000aa5e:	83 f2 01             	xor    edx,0x1
c000aa61:	88 90 a0 56 03 c0    	mov    BYTE PTR [eax-0x3ffca960],dl
c000aa67:	a1 88 56 03 c0       	mov    eax,ds:0xc0035688
c000aa6c:	85 c0                	test   eax,eax
c000aa6e:	74 24                	je     c000aa94 <sendKeyboardToken(KeyboardToken)+0x4a>
c000aa70:	8b 15 88 56 03 c0    	mov    edx,DWORD PTR ds:0xc0035688
c000aa76:	83 ec 04             	sub    esp,0x4
c000aa79:	68 a0 56 03 c0       	push   0xc00356a0
c000aa7e:	83 ec 08             	sub    esp,0x8
c000aa81:	89 e0                	mov    eax,esp
c000aa83:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c000aa86:	89 08                	mov    DWORD PTR [eax],ecx
c000aa88:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000aa8b:	66 89 48 04          	mov    WORD PTR [eax+0x4],cx
c000aa8f:	ff d2                	call   edx
c000aa91:	83 c4 10             	add    esp,0x10
c000aa94:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000aa98:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000aa9b:	0f b6 c0             	movzx  eax,al
c000aa9e:	85 c0                	test   eax,eax
c000aaa0:	0f 84 da 00 00 00    	je     c000ab80 <sendKeyboardToken(KeyboardToken)+0x136>
c000aaa6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000aaa9:	0f b7 c0             	movzx  eax,ax
c000aaac:	3d 18 03 00 00       	cmp    eax,0x318
c000aab1:	75 06                	jne    c000aab9 <sendKeyboardToken(KeyboardToken)+0x6f>
c000aab3:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000aab9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000aabc:	0f b7 c0             	movzx  eax,ax
c000aabf:	3d 19 03 00 00       	cmp    eax,0x319
c000aac4:	75 06                	jne    c000aacc <sendKeyboardToken(KeyboardToken)+0x82>
c000aac6:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000aacc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000aacf:	0f b7 c0             	movzx  eax,ax
c000aad2:	3d 1a 03 00 00       	cmp    eax,0x31a
c000aad7:	75 06                	jne    c000aadf <sendKeyboardToken(KeyboardToken)+0x95>
c000aad9:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000aadf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000aae2:	0f b7 c0             	movzx  eax,ax
c000aae5:	3d 1b 03 00 00       	cmp    eax,0x31b
c000aaea:	75 06                	jne    c000aaf2 <sendKeyboardToken(KeyboardToken)+0xa8>
c000aaec:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000aaf2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000aaf5:	0f b7 c0             	movzx  eax,ax
c000aaf8:	3d 1c 03 00 00       	cmp    eax,0x31c
c000aafd:	75 06                	jne    c000ab05 <sendKeyboardToken(KeyboardToken)+0xbb>
c000aaff:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000ab05:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ab08:	0f b7 c0             	movzx  eax,ax
c000ab0b:	3d 1d 03 00 00       	cmp    eax,0x31d
c000ab10:	75 06                	jne    c000ab18 <sendKeyboardToken(KeyboardToken)+0xce>
c000ab12:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000ab18:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ab1b:	0f b7 c0             	movzx  eax,ax
c000ab1e:	3d 1e 03 00 00       	cmp    eax,0x31e
c000ab23:	75 06                	jne    c000ab2b <sendKeyboardToken(KeyboardToken)+0xe1>
c000ab25:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000ab2b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ab2e:	0f b7 c0             	movzx  eax,ax
c000ab31:	3d 1f 03 00 00       	cmp    eax,0x31f
c000ab36:	75 06                	jne    c000ab3e <sendKeyboardToken(KeyboardToken)+0xf4>
c000ab38:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000ab3e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ab41:	0f b7 c0             	movzx  eax,ax
c000ab44:	3d 20 03 00 00       	cmp    eax,0x320
c000ab49:	75 06                	jne    c000ab51 <sendKeyboardToken(KeyboardToken)+0x107>
c000ab4b:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000ab51:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ab54:	0f b7 c0             	movzx  eax,ax
c000ab57:	3d 21 03 00 00       	cmp    eax,0x321
c000ab5c:	75 06                	jne    c000ab64 <sendKeyboardToken(KeyboardToken)+0x11a>
c000ab5e:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000ab64:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ab67:	0f b7 c0             	movzx  eax,ax
c000ab6a:	3d 22 03 00 00       	cmp    eax,0x322
c000ab6f:	0f 85 f1 00 00 00    	jne    c000ac66 <sendKeyboardToken(KeyboardToken)+0x21c>
c000ab75:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000ab7b:	e9 e6 00 00 00       	jmp    c000ac66 <sendKeyboardToken(KeyboardToken)+0x21c>
c000ab80:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ab83:	0f b7 c0             	movzx  eax,ax
c000ab86:	3d 18 03 00 00       	cmp    eax,0x318
c000ab8b:	75 0a                	jne    c000ab97 <sendKeyboardToken(KeyboardToken)+0x14d>
c000ab8d:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000ab93:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000ab97:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ab9a:	0f b7 c0             	movzx  eax,ax
c000ab9d:	3d 19 03 00 00       	cmp    eax,0x319
c000aba2:	75 0a                	jne    c000abae <sendKeyboardToken(KeyboardToken)+0x164>
c000aba4:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000abaa:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000abae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000abb1:	0f b7 c0             	movzx  eax,ax
c000abb4:	3d 1a 03 00 00       	cmp    eax,0x31a
c000abb9:	75 0a                	jne    c000abc5 <sendKeyboardToken(KeyboardToken)+0x17b>
c000abbb:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000abc1:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000abc5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000abc8:	0f b7 c0             	movzx  eax,ax
c000abcb:	3d 1b 03 00 00       	cmp    eax,0x31b
c000abd0:	75 0a                	jne    c000abdc <sendKeyboardToken(KeyboardToken)+0x192>
c000abd2:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000abd8:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000abdc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000abdf:	0f b7 c0             	movzx  eax,ax
c000abe2:	3d 1c 03 00 00       	cmp    eax,0x31c
c000abe7:	75 0a                	jne    c000abf3 <sendKeyboardToken(KeyboardToken)+0x1a9>
c000abe9:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000abef:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000abf3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000abf6:	0f b7 c0             	movzx  eax,ax
c000abf9:	3d 1d 03 00 00       	cmp    eax,0x31d
c000abfe:	75 0a                	jne    c000ac0a <sendKeyboardToken(KeyboardToken)+0x1c0>
c000ac00:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000ac06:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000ac0a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ac0d:	0f b7 c0             	movzx  eax,ax
c000ac10:	3d 1e 03 00 00       	cmp    eax,0x31e
c000ac15:	75 0a                	jne    c000ac21 <sendKeyboardToken(KeyboardToken)+0x1d7>
c000ac17:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000ac1d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000ac21:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ac24:	0f b7 c0             	movzx  eax,ax
c000ac27:	3d 1f 03 00 00       	cmp    eax,0x31f
c000ac2c:	75 0a                	jne    c000ac38 <sendKeyboardToken(KeyboardToken)+0x1ee>
c000ac2e:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000ac34:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000ac38:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ac3b:	0f b7 c0             	movzx  eax,ax
c000ac3e:	3d 20 03 00 00       	cmp    eax,0x320
c000ac43:	75 0a                	jne    c000ac4f <sendKeyboardToken(KeyboardToken)+0x205>
c000ac45:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000ac4b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000ac4f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ac52:	0f b7 c0             	movzx  eax,ax
c000ac55:	3d 21 03 00 00       	cmp    eax,0x321
c000ac5a:	75 0a                	jne    c000ac66 <sendKeyboardToken(KeyboardToken)+0x21c>
c000ac5c:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000ac62:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000ac66:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ac69:	0f b7 c0             	movzx  eax,ax
c000ac6c:	3d 00 02 00 00       	cmp    eax,0x200
c000ac71:	75 2f                	jne    c000aca2 <sendKeyboardToken(KeyboardToken)+0x258>
c000ac73:	a0 a0 5a 03 c0       	mov    al,ds:0xc0035aa0
c000ac78:	83 f0 01             	xor    eax,0x1
c000ac7b:	0f b6 c0             	movzx  eax,al
c000ac7e:	85 c0                	test   eax,eax
c000ac80:	74 20                	je     c000aca2 <sendKeyboardToken(KeyboardToken)+0x258>
c000ac82:	a1 58 63 03 c0       	mov    eax,ds:0xc0036358
c000ac87:	6a 01                	push   0x1
c000ac89:	6a 00                	push   0x0
c000ac8b:	68 e0 a8 00 c0       	push   0xc000a8e0
c000ac90:	50                   	push   eax
c000ac91:	e8 9e c1 00 00       	call   c0016e34 <Process::createThread(void (*)(void*), void*, int)>
c000ac96:	83 c4 10             	add    esp,0x10
c000ac99:	c6 05 a0 5a 03 c0 01 	mov    BYTE PTR ds:0xc0035aa0,0x1
c000aca0:	eb 3a                	jmp    c000acdc <sendKeyboardToken(KeyboardToken)+0x292>
c000aca2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000aca5:	0f b7 c0             	movzx  eax,ax
c000aca8:	3d 01 02 00 00       	cmp    eax,0x201
c000acad:	75 2d                	jne    c000acdc <sendKeyboardToken(KeyboardToken)+0x292>
c000acaf:	a0 a0 5a 03 c0       	mov    al,ds:0xc0035aa0
c000acb4:	83 f0 01             	xor    eax,0x1
c000acb7:	0f b6 c0             	movzx  eax,al
c000acba:	85 c0                	test   eax,eax
c000acbc:	74 1e                	je     c000acdc <sendKeyboardToken(KeyboardToken)+0x292>
c000acbe:	a1 58 63 03 c0       	mov    eax,ds:0xc0036358
c000acc3:	6a 01                	push   0x1
c000acc5:	6a 00                	push   0x0
c000acc7:	68 2a a9 00 c0       	push   0xc000a92a
c000accc:	50                   	push   eax
c000accd:	e8 62 c1 00 00       	call   c0016e34 <Process::createThread(void (*)(void*), void*, int)>
c000acd2:	83 c4 10             	add    esp,0x10
c000acd5:	c6 05 a0 5a 03 c0 01 	mov    BYTE PTR ds:0xc0035aa0,0x1
c000acdc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000acdf:	0f b7 c0             	movzx  eax,ax
c000ace2:	3d 25 03 00 00       	cmp    eax,0x325
c000ace7:	75 06                	jne    c000acef <sendKeyboardToken(KeyboardToken)+0x2a5>
c000ace9:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000acef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000acf2:	0f b7 c0             	movzx  eax,ax
c000acf5:	3d 24 03 00 00       	cmp    eax,0x324
c000acfa:	75 06                	jne    c000ad02 <sendKeyboardToken(KeyboardToken)+0x2b8>
c000acfc:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000ad02:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ad05:	0f b7 c0             	movzx  eax,ax
c000ad08:	3d 23 03 00 00       	cmp    eax,0x323
c000ad0d:	75 06                	jne    c000ad15 <sendKeyboardToken(KeyboardToken)+0x2cb>
c000ad0f:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000ad15:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ad18:	0f b7 c0             	movzx  eax,ax
c000ad1b:	3d 26 03 00 00       	cmp    eax,0x326
c000ad20:	75 06                	jne    c000ad28 <sendKeyboardToken(KeyboardToken)+0x2de>
c000ad22:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000ad28:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ad2b:	0f b7 c0             	movzx  eax,ax
c000ad2e:	3d 27 03 00 00       	cmp    eax,0x327
c000ad33:	75 06                	jne    c000ad3b <sendKeyboardToken(KeyboardToken)+0x2f1>
c000ad35:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000ad3b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ad3e:	0f b7 c0             	movzx  eax,ax
c000ad41:	3d 22 03 00 00       	cmp    eax,0x322
c000ad46:	75 06                	jne    c000ad4e <sendKeyboardToken(KeyboardToken)+0x304>
c000ad48:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000ad4e:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000ad52:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000ad55:	83 f0 01             	xor    eax,0x1
c000ad58:	0f b6 c0             	movzx  eax,al
c000ad5b:	85 c0                	test   eax,eax
c000ad5d:	74 7c                	je     c000addb <sendKeyboardToken(KeyboardToken)+0x391>
c000ad5f:	a0 a1 57 03 c0       	mov    al,ds:0xc00357a1
c000ad64:	0f b6 c0             	movzx  eax,al
c000ad67:	85 c0                	test   eax,eax
c000ad69:	74 43                	je     c000adae <sendKeyboardToken(KeyboardToken)+0x364>
c000ad6b:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000ad6f:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c000ad73:	85 c0                	test   eax,eax
c000ad75:	74 2b                	je     c000ada2 <sendKeyboardToken(KeyboardToken)+0x358>
c000ad77:	8b 15 a4 5a 03 c0    	mov    edx,DWORD PTR ds:0xc0035aa4
c000ad7d:	89 d0                	mov    eax,edx
c000ad7f:	c1 e0 02             	shl    eax,0x2
c000ad82:	01 d0                	add    eax,edx
c000ad84:	d1 e0                	shl    eax,1
c000ad86:	a3 a4 5a 03 c0       	mov    ds:0xc0035aa4,eax
c000ad8b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ad8e:	0f b7 c0             	movzx  eax,ax
c000ad91:	8d 50 d0             	lea    edx,[eax-0x30]
c000ad94:	a1 a4 5a 03 c0       	mov    eax,ds:0xc0035aa4
c000ad99:	01 d0                	add    eax,edx
c000ad9b:	a3 a4 5a 03 c0       	mov    ds:0xc0035aa4,eax
c000ada0:	eb 71                	jmp    c000ae13 <sendKeyboardToken(KeyboardToken)+0x3c9>
c000ada2:	c7 05 a4 5a 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0035aa4,0x0
c000adac:	eb 65                	jmp    c000ae13 <sendKeyboardToken(KeyboardToken)+0x3c9>
c000adae:	a1 a4 5a 03 c0       	mov    eax,ds:0xc0035aa4
c000adb3:	85 c0                	test   eax,eax
c000adb5:	74 18                	je     c000adcf <sendKeyboardToken(KeyboardToken)+0x385>
c000adb7:	a1 a4 5a 03 c0       	mov    eax,ds:0xc0035aa4
c000adbc:	0f b6 c0             	movzx  eax,al
c000adbf:	83 ec 0c             	sub    esp,0xc
c000adc2:	50                   	push   eax
c000adc3:	e8 ac fb ff ff       	call   c000a974 <sendKeyToTerminal(unsigned char)>
c000adc8:	83 c4 10             	add    esp,0x10
c000adcb:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000adcf:	c7 05 a4 5a 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0035aa4,0x0
c000add9:	eb 38                	jmp    c000ae13 <sendKeyboardToken(KeyboardToken)+0x3c9>
c000addb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000adde:	0f b7 c0             	movzx  eax,ax
c000ade1:	3d 01 01 00 00       	cmp    eax,0x101
c000ade6:	75 2b                	jne    c000ae13 <sendKeyboardToken(KeyboardToken)+0x3c9>
c000ade8:	a1 a4 5a 03 c0       	mov    eax,ds:0xc0035aa4
c000aded:	85 c0                	test   eax,eax
c000adef:	74 18                	je     c000ae09 <sendKeyboardToken(KeyboardToken)+0x3bf>
c000adf1:	a1 a4 5a 03 c0       	mov    eax,ds:0xc0035aa4
c000adf6:	0f b6 c0             	movzx  eax,al
c000adf9:	83 ec 0c             	sub    esp,0xc
c000adfc:	50                   	push   eax
c000adfd:	e8 72 fb ff ff       	call   c000a974 <sendKeyToTerminal(unsigned char)>
c000ae02:	83 c4 10             	add    esp,0x10
c000ae05:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000ae09:	c7 05 a4 5a 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0035aa4,0x0
c000ae13:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000ae16:	83 f0 01             	xor    eax,0x1
c000ae19:	0f b6 c0             	movzx  eax,al
c000ae1c:	85 c0                	test   eax,eax
c000ae1e:	74 5a                	je     c000ae7a <sendKeyboardToken(KeyboardToken)+0x430>
c000ae20:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000ae23:	83 f0 01             	xor    eax,0x1
c000ae26:	0f b6 c0             	movzx  eax,al
c000ae29:	85 c0                	test   eax,eax
c000ae2b:	74 4d                	je     c000ae7a <sendKeyboardToken(KeyboardToken)+0x430>
c000ae2d:	a0 a0 57 03 c0       	mov    al,ds:0xc00357a0
c000ae32:	83 f0 01             	xor    eax,0x1
c000ae35:	0f b6 c0             	movzx  eax,al
c000ae38:	85 c0                	test   eax,eax
c000ae3a:	74 3e                	je     c000ae7a <sendKeyboardToken(KeyboardToken)+0x430>
c000ae3c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ae3f:	0f b7 c0             	movzx  eax,ax
c000ae42:	83 f8 1f             	cmp    eax,0x1f
c000ae45:	76 0b                	jbe    c000ae52 <sendKeyboardToken(KeyboardToken)+0x408>
c000ae47:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ae4a:	0f b7 c0             	movzx  eax,ax
c000ae4d:	83 f8 7e             	cmp    eax,0x7e
c000ae50:	76 16                	jbe    c000ae68 <sendKeyboardToken(KeyboardToken)+0x41e>
c000ae52:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ae55:	0f b7 c0             	movzx  eax,ax
c000ae58:	83 f8 0a             	cmp    eax,0xa
c000ae5b:	74 0b                	je     c000ae68 <sendKeyboardToken(KeyboardToken)+0x41e>
c000ae5d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ae60:	0f b7 c0             	movzx  eax,ax
c000ae63:	83 f8 08             	cmp    eax,0x8
c000ae66:	75 12                	jne    c000ae7a <sendKeyboardToken(KeyboardToken)+0x430>
c000ae68:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ae6b:	0f b6 c0             	movzx  eax,al
c000ae6e:	83 ec 0c             	sub    esp,0xc
c000ae71:	50                   	push   eax
c000ae72:	e8 fd fa ff ff       	call   c000a974 <sendKeyToTerminal(unsigned char)>
c000ae77:	83 c4 10             	add    esp,0x10
c000ae7a:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000ae7d:	83 f0 01             	xor    eax,0x1
c000ae80:	0f b6 c0             	movzx  eax,al
c000ae83:	85 c0                	test   eax,eax
c000ae85:	74 5d                	je     c000aee4 <sendKeyboardToken(KeyboardToken)+0x49a>
c000ae87:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000ae8a:	83 f0 01             	xor    eax,0x1
c000ae8d:	0f b6 c0             	movzx  eax,al
c000ae90:	85 c0                	test   eax,eax
c000ae92:	74 50                	je     c000aee4 <sendKeyboardToken(KeyboardToken)+0x49a>
c000ae94:	a0 a0 57 03 c0       	mov    al,ds:0xc00357a0
c000ae99:	0f b6 c0             	movzx  eax,al
c000ae9c:	85 c0                	test   eax,eax
c000ae9e:	74 44                	je     c000aee4 <sendKeyboardToken(KeyboardToken)+0x49a>
c000aea0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000aea3:	0f b7 c0             	movzx  eax,ax
c000aea6:	83 f8 3f             	cmp    eax,0x3f
c000aea9:	76 39                	jbe    c000aee4 <sendKeyboardToken(KeyboardToken)+0x49a>
c000aeab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000aeae:	0f b7 c0             	movzx  eax,ax
c000aeb1:	83 f8 7f             	cmp    eax,0x7f
c000aeb4:	77 2e                	ja     c000aee4 <sendKeyboardToken(KeyboardToken)+0x49a>
c000aeb6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000aeb9:	88 c2                	mov    dl,al
c000aebb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000aebe:	0f b7 c0             	movzx  eax,ax
c000aec1:	83 f8 5f             	cmp    eax,0x5f
c000aec4:	76 04                	jbe    c000aeca <sendKeyboardToken(KeyboardToken)+0x480>
c000aec6:	b0 20                	mov    al,0x20
c000aec8:	eb 02                	jmp    c000aecc <sendKeyboardToken(KeyboardToken)+0x482>
c000aeca:	b0 00                	mov    al,0x0
c000aecc:	89 d1                	mov    ecx,edx
c000aece:	29 c1                	sub    ecx,eax
c000aed0:	89 c8                	mov    eax,ecx
c000aed2:	83 e8 40             	sub    eax,0x40
c000aed5:	0f b6 c0             	movzx  eax,al
c000aed8:	83 ec 0c             	sub    esp,0xc
c000aedb:	50                   	push   eax
c000aedc:	e8 93 fa ff ff       	call   c000a974 <sendKeyToTerminal(unsigned char)>
c000aee1:	83 c4 10             	add    esp,0x10
c000aee4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000aee7:	0f b7 c0             	movzx  eax,ax
c000aeea:	3d 00 03 00 00       	cmp    eax,0x300
c000aeef:	75 12                	jne    c000af03 <sendKeyboardToken(KeyboardToken)+0x4b9>
c000aef1:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000aef4:	83 f0 01             	xor    eax,0x1
c000aef7:	0f b6 c0             	movzx  eax,al
c000aefa:	85 c0                	test   eax,eax
c000aefc:	74 05                	je     c000af03 <sendKeyboardToken(KeyboardToken)+0x4b9>
c000aefe:	e8 ea 79 00 00       	call   c00128ed <doTerminalCycle()>
c000af03:	90                   	nop
c000af04:	c9                   	leave  
c000af05:	c3                   	ret    

c000af06 <clearInternalKeybuffer(VgaText*)>:
c000af06:	55                   	push   ebp
c000af07:	89 e5                	mov    ebp,esp
c000af09:	83 ec 08             	sub    esp,0x8
c000af0c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000af0f:	05 02 01 00 00       	add    eax,0x102
c000af14:	83 ec 0c             	sub    esp,0xc
c000af17:	50                   	push   eax
c000af18:	e8 63 56 ff ff       	call   c0000580 <strlen>
c000af1d:	83 c4 10             	add    esp,0x10
c000af20:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000af23:	81 c2 02 01 00 00    	add    edx,0x102
c000af29:	83 ec 04             	sub    esp,0x4
c000af2c:	50                   	push   eax
c000af2d:	6a 00                	push   0x0
c000af2f:	52                   	push   edx
c000af30:	e8 bb 55 ff ff       	call   c00004f0 <memset>
c000af35:	83 c4 10             	add    esp,0x10
c000af38:	90                   	nop
c000af39:	c9                   	leave  
c000af3a:	c3                   	ret    

c000af3b <readKeyboard(VgaText*, char*, unsigned long)>:
c000af3b:	55                   	push   ebp
c000af3c:	89 e5                	mov    ebp,esp
c000af3e:	83 ec 18             	sub    esp,0x18
c000af41:	a1 88 56 03 c0       	mov    eax,ds:0xc0035688
c000af46:	85 c0                	test   eax,eax
c000af48:	74 2a                	je     c000af74 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000af4a:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000af50:	8b 15 88 56 03 c0    	mov    edx,DWORD PTR ds:0xc0035688
c000af56:	83 ec 04             	sub    esp,0x4
c000af59:	68 a0 56 03 c0       	push   0xc00356a0
c000af5e:	83 ec 08             	sub    esp,0x8
c000af61:	89 e0                	mov    eax,esp
c000af63:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c000af66:	89 08                	mov    DWORD PTR [eax],ecx
c000af68:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c000af6b:	66 89 48 04          	mov    WORD PTR [eax+0x4],cx
c000af6f:	ff d2                	call   edx
c000af71:	83 c4 10             	add    esp,0x10
c000af74:	fb                   	sti    
c000af75:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000af7c:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000af80:	0f 84 08 01 00 00    	je     c000b08e <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000af86:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000af89:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000af8f:	0f be c0             	movsx  eax,al
c000af92:	85 c0                	test   eax,eax
c000af94:	75 27                	jne    c000afbd <readKeyboard(VgaText*, char*, unsigned long)+0x82>
c000af96:	fa                   	cli    
c000af97:	a1 30 63 03 c0       	mov    eax,ds:0xc0036330
c000af9c:	83 c0 01             	add    eax,0x1
c000af9f:	a3 30 63 03 c0       	mov    ds:0xc0036330,eax
c000afa4:	e8 3f c1 00 00       	call   c00170e8 <schedule()>
c000afa9:	f0 83 2d 30 63 03 c0 01 	lock sub DWORD PTR ds:0xc0036330,0x1
c000afb1:	a1 30 63 03 c0       	mov    eax,ds:0xc0036330
c000afb6:	85 c0                	test   eax,eax
c000afb8:	75 cc                	jne    c000af86 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000afba:	fb                   	sti    
c000afbb:	eb c9                	jmp    c000af86 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000afbd:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000afc0:	8d 50 01             	lea    edx,[eax+0x1]
c000afc3:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000afc6:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000afc9:	8a 92 02 01 00 00    	mov    dl,BYTE PTR [edx+0x102]
c000afcf:	88 10                	mov    BYTE PTR [eax],dl
c000afd1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000afd4:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000afda:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000afdd:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000afe1:	83 f8 03             	cmp    eax,0x3
c000afe4:	75 1e                	jne    c000b004 <readKeyboard(VgaText*, char*, unsigned long)+0xc9>
c000afe6:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000afeb:	8b 00                	mov    eax,DWORD PTR [eax]
c000afed:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000aff0:	8b 80 c0 07 00 00    	mov    eax,DWORD PTR [eax+0x7c0]
c000aff6:	83 ec 08             	sub    esp,0x8
c000aff9:	6a 02                	push   0x2
c000affb:	50                   	push   eax
c000affc:	e8 6e 67 00 00       	call   c001176f <KeRaiseSignal(SigHandlerBlock*, int)>
c000b001:	83 c4 10             	add    esp,0x10
c000b004:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000b008:	83 f8 1c             	cmp    eax,0x1c
c000b00b:	75 1e                	jne    c000b02b <readKeyboard(VgaText*, char*, unsigned long)+0xf0>
c000b00d:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000b012:	8b 00                	mov    eax,DWORD PTR [eax]
c000b014:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000b017:	8b 80 c0 07 00 00    	mov    eax,DWORD PTR [eax+0x7c0]
c000b01d:	83 ec 08             	sub    esp,0x8
c000b020:	6a 09                	push   0x9
c000b022:	50                   	push   eax
c000b023:	e8 47 67 00 00       	call   c001176f <KeRaiseSignal(SigHandlerBlock*, int)>
c000b028:	83 c4 10             	add    esp,0x10
c000b02b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b02e:	05 02 01 00 00       	add    eax,0x102
c000b033:	83 ec 0c             	sub    esp,0xc
c000b036:	50                   	push   eax
c000b037:	e8 44 55 ff ff       	call   c0000580 <strlen>
c000b03c:	83 c4 10             	add    esp,0x10
c000b03f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000b042:	81 c2 02 01 00 00    	add    edx,0x102
c000b048:	8d 4a 01             	lea    ecx,[edx+0x1]
c000b04b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000b04e:	81 c2 02 01 00 00    	add    edx,0x102
c000b054:	83 ec 04             	sub    esp,0x4
c000b057:	50                   	push   eax
c000b058:	51                   	push   ecx
c000b059:	52                   	push   edx
c000b05a:	e8 71 53 ff ff       	call   c00003d0 <memmove>
c000b05f:	83 c4 10             	add    esp,0x10
c000b062:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
c000b066:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c000b06a:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000b06e:	83 f8 0a             	cmp    eax,0xa
c000b071:	74 16                	je     c000b089 <readKeyboard(VgaText*, char*, unsigned long)+0x14e>
c000b073:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000b077:	83 f8 03             	cmp    eax,0x3
c000b07a:	74 0d                	je     c000b089 <readKeyboard(VgaText*, char*, unsigned long)+0x14e>
c000b07c:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000b080:	83 f8 1c             	cmp    eax,0x1c
c000b083:	0f 85 f3 fe ff ff    	jne    c000af7c <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000b089:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000b08c:	eb 03                	jmp    c000b091 <readKeyboard(VgaText*, char*, unsigned long)+0x156>
c000b08e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000b091:	c9                   	leave  
c000b092:	c3                   	ret    
c000b093:	90                   	nop

c000b094 <Keyboard::Keyboard(char const*)>:
c000b094:	83 ec 0c             	sub    esp,0xc
c000b097:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b09b:	83 ec 08             	sub    esp,0x8
c000b09e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b0a2:	50                   	push   eax
c000b0a3:	e8 d8 f4 ff ff       	call   c000a580 <Device::Device(char const*)>
c000b0a8:	83 c4 10             	add    esp,0x10
c000b0ab:	ba 40 ac 02 c0       	mov    edx,0xc002ac40
c000b0b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0b4:	89 10                	mov    DWORD PTR [eax],edx
c000b0b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0ba:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000b0c4:	c6 05 84 56 03 c0 01 	mov    BYTE PTR ds:0xc0035684,0x1
c000b0cb:	90                   	nop
c000b0cc:	83 c4 0c             	add    esp,0xc
c000b0cf:	c3                   	ret    

c000b0d0 <Keyboard::~Keyboard()>:
c000b0d0:	83 ec 0c             	sub    esp,0xc
c000b0d3:	ba 40 ac 02 c0       	mov    edx,0xc002ac40
c000b0d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0dc:	89 10                	mov    DWORD PTR [eax],edx
c000b0de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0e2:	83 ec 0c             	sub    esp,0xc
c000b0e5:	50                   	push   eax
c000b0e6:	e8 35 f2 ff ff       	call   c000a320 <Device::~Device()>
c000b0eb:	83 c4 10             	add    esp,0x10
c000b0ee:	90                   	nop
c000b0ef:	83 c4 0c             	add    esp,0xc
c000b0f2:	c3                   	ret    
c000b0f3:	90                   	nop

c000b0f4 <Keyboard::~Keyboard()>:
c000b0f4:	83 ec 0c             	sub    esp,0xc
c000b0f7:	83 ec 0c             	sub    esp,0xc
c000b0fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b0fe:	e8 cd ff ff ff       	call   c000b0d0 <Keyboard::~Keyboard()>
c000b103:	83 c4 10             	add    esp,0x10
c000b106:	83 ec 08             	sub    esp,0x8
c000b109:	68 5c 01 00 00       	push   0x15c
c000b10e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b112:	e8 f5 2b 00 00       	call   c000dd0c <operator delete(void*, unsigned long)>
c000b117:	83 c4 10             	add    esp,0x10
c000b11a:	83 c4 0c             	add    esp,0xc
c000b11d:	c3                   	ret    

c000b11e <LogicalDisk::close(int, int, void*)>:
c000b11e:	83 c8 ff             	or     eax,0xffffffff
c000b121:	c3                   	ret    

c000b122 <LogicalDisk::~LogicalDisk()>:
c000b122:	83 ec 0c             	sub    esp,0xc
c000b125:	ba b8 ac 02 c0       	mov    edx,0xc002acb8
c000b12a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b12e:	89 10                	mov    DWORD PTR [eax],edx
c000b130:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b134:	83 ec 0c             	sub    esp,0xc
c000b137:	50                   	push   eax
c000b138:	e8 e3 f1 ff ff       	call   c000a320 <Device::~Device()>
c000b13d:	83 c4 10             	add    esp,0x10
c000b140:	90                   	nop
c000b141:	83 c4 0c             	add    esp,0xc
c000b144:	c3                   	ret    
c000b145:	90                   	nop

c000b146 <LogicalDisk::~LogicalDisk()>:
c000b146:	83 ec 0c             	sub    esp,0xc
c000b149:	83 ec 0c             	sub    esp,0xc
c000b14c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b150:	e8 cd ff ff ff       	call   c000b122 <LogicalDisk::~LogicalDisk()>
c000b155:	83 c4 10             	add    esp,0x10
c000b158:	83 ec 08             	sub    esp,0x8
c000b15b:	68 78 01 00 00       	push   0x178
c000b160:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b164:	e8 a3 2b 00 00       	call   c000dd0c <operator delete(void*, unsigned long)>
c000b169:	83 c4 10             	add    esp,0x10
c000b16c:	83 c4 0c             	add    esp,0xc
c000b16f:	c3                   	ret    

c000b170 <LogicalDisk::open(int, int, void*)>:
c000b170:	83 ec 18             	sub    esp,0x18
c000b173:	68 6c ac 02 c0       	push   0xc002ac6c
c000b178:	e8 e3 53 00 00       	call   c0010560 <KePanic(char const*)>
c000b17d:	83 c8 ff             	or     eax,0xffffffff
c000b180:	83 c4 1c             	add    esp,0x1c
c000b183:	c3                   	ret    

c000b184 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000b184:	53                   	push   ebx
c000b185:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000b189:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b18d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b191:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000b197:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000b19d:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000b1a3:	77 10                	ja     c000b1b5 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000b1a5:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000b1ab:	89 d3                	mov    ebx,edx
c000b1ad:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000b1b3:	72 05                	jb     c000b1ba <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000b1b5:	83 c8 ff             	or     eax,0xffffffff
c000b1b8:	89 c2                	mov    edx,eax
c000b1ba:	5b                   	pop    ebx
c000b1bb:	c3                   	ret    

c000b1bc <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000b1bc:	56                   	push   esi
c000b1bd:	83 c8 ff             	or     eax,0xffffffff
c000b1c0:	53                   	push   ebx
c000b1c1:	89 c2                	mov    edx,eax
c000b1c3:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000b1c7:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000b1cb:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b1cf:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000b1d5:	77 27                	ja     c000b1fe <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000b1d7:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000b1dd:	89 d8                	mov    eax,ebx
c000b1df:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000b1e5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000b1ea:	89 c2                	mov    edx,eax
c000b1ec:	73 10                	jae    c000b1fe <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000b1ee:	89 c8                	mov    eax,ecx
c000b1f0:	89 da                	mov    edx,ebx
c000b1f2:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000b1f8:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000b1fe:	5b                   	pop    ebx
c000b1ff:	5e                   	pop    esi
c000b200:	c3                   	ret    
c000b201:	90                   	nop

c000b202 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000b202:	83 ec 1c             	sub    esp,0x1c
c000b205:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000b209:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b20d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b211:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b215:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b219:	89 04 24             	mov    DWORD PTR [esp],eax
c000b21c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000b220:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b224:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b228:	83 ec 08             	sub    esp,0x8
c000b22b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000b22f:	50                   	push   eax
c000b230:	e8 4b f3 ff ff       	call   c000a580 <Device::Device(char const*)>
c000b235:	83 c4 10             	add    esp,0x10
c000b238:	ba b8 ac 02 c0       	mov    edx,0xc002acb8
c000b23d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b241:	89 10                	mov    DWORD PTR [eax],edx
c000b243:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b247:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000b24e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b252:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c000b259:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b25d:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000b264:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b268:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000b272:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b276:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b27a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b27e:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000b284:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000b28a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b28e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b291:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000b295:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000b29b:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000b2a1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b2a5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000b2a9:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000b2af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b2b3:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000b2bd:	90                   	nop
c000b2be:	83 c4 1c             	add    esp,0x1c
c000b2c1:	c3                   	ret    

c000b2c2 <LogicalDisk::assignDriveLetter()>:
c000b2c2:	55                   	push   ebp
c000b2c3:	57                   	push   edi
c000b2c4:	56                   	push   esi
c000b2c5:	53                   	push   ebx
c000b2c6:	83 ec 14             	sub    esp,0x14
c000b2c9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000b2cd:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000b2d3:	b0 41                	mov    al,0x41
c000b2d5:	8a 93 69 01 00 00    	mov    dl,BYTE PTR [ebx+0x169]
c000b2db:	84 d2                	test   dl,dl
c000b2dd:	75 02                	jne    c000b2e1 <LogicalDisk::assignDriveLetter()+0x1f>
c000b2df:	b0 43                	mov    al,0x43
c000b2e1:	8b 3d c0 5a 03 c0    	mov    edi,DWORD PTR ds:0xc0035ac0
c000b2e7:	0f b6 ca             	movzx  ecx,dl
c000b2ea:	0f be e8             	movsx  ebp,al
c000b2ed:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000b2f1:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c000b2f5:	8b 3d c4 5a 03 c0    	mov    edi,DWORD PTR ds:0xc0035ac4
c000b2fb:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000b2ff:	3c 43                	cmp    al,0x43
c000b301:	75 10                	jne    c000b313 <LogicalDisk::assignDriveLetter()+0x51>
c000b303:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000b30a:	75 5a                	jne    c000b366 <LogicalDisk::assignDriveLetter()+0xa4>
c000b30c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000b311:	75 53                	jne    c000b366 <LogicalDisk::assignDriveLetter()+0xa4>
c000b313:	8d 75 bf             	lea    esi,[ebp-0x41]
c000b316:	ba 01 00 00 00       	mov    edx,0x1
c000b31b:	89 34 24             	mov    DWORD PTR [esp],esi
c000b31e:	8a 0c 24             	mov    cl,BYTE PTR [esp]
c000b321:	d3 e2                	shl    edx,cl
c000b323:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000b327:	89 d7                	mov    edi,edx
c000b329:	89 d6                	mov    esi,edx
c000b32b:	23 54 24 04          	and    edx,DWORD PTR [esp+0x4]
c000b32f:	c1 ff 1f             	sar    edi,0x1f
c000b332:	21 f9                	and    ecx,edi
c000b334:	09 d1                	or     ecx,edx
c000b336:	75 2e                	jne    c000b366 <LogicalDisk::assignDriveLetter()+0xa4>
c000b338:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000b33c:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000b340:	09 f2                	or     edx,esi
c000b342:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000b345:	89 15 c0 5a 03 c0    	mov    DWORD PTR ds:0xc0035ac0,edx
c000b34b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b34f:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000b355:	89 1c b5 e0 5a 03 c0 	mov    DWORD PTR [esi*4-0x3ffca520],ebx
c000b35c:	09 fa                	or     edx,edi
c000b35e:	89 15 c4 5a 03 c0    	mov    DWORD PTR ds:0xc0035ac4,edx
c000b364:	eb 0d                	jmp    c000b373 <LogicalDisk::assignDriveLetter()+0xb1>
c000b366:	8d 50 01             	lea    edx,[eax+0x1]
c000b369:	45                   	inc    ebp
c000b36a:	80 fa 5b             	cmp    dl,0x5b
c000b36d:	88 d0                	mov    al,dl
c000b36f:	75 8e                	jne    c000b2ff <LogicalDisk::assignDriveLetter()+0x3d>
c000b371:	31 c0                	xor    eax,eax
c000b373:	83 c4 14             	add    esp,0x14
c000b376:	5b                   	pop    ebx
c000b377:	5e                   	pop    esi
c000b378:	5f                   	pop    edi
c000b379:	5d                   	pop    ebp
c000b37a:	c3                   	ret    
c000b37b:	90                   	nop

c000b37c <LogicalDisk::mount()>:
c000b37c:	56                   	push   esi
c000b37d:	53                   	push   ebx
c000b37e:	53                   	push   ebx
c000b37f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b383:	8b 1d 04 53 03 c0    	mov    ebx,DWORD PTR ds:0xc0035304
c000b389:	c7 86 74 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x174],0x0
c000b393:	85 db                	test   ebx,ebx
c000b395:	74 27                	je     c000b3be <LogicalDisk::mount()+0x42>
c000b397:	51                   	push   ecx
c000b398:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000b39f:	8b 13                	mov    edx,DWORD PTR [ebx]
c000b3a1:	83 e8 41             	sub    eax,0x41
c000b3a4:	50                   	push   eax
c000b3a5:	56                   	push   esi
c000b3a6:	53                   	push   ebx
c000b3a7:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000b3aa:	83 c4 10             	add    esp,0x10
c000b3ad:	84 c0                	test   al,al
c000b3af:	74 08                	je     c000b3b9 <LogicalDisk::mount()+0x3d>
c000b3b1:	89 9e 74 01 00 00    	mov    DWORD PTR [esi+0x174],ebx
c000b3b7:	eb 07                	jmp    c000b3c0 <LogicalDisk::mount()+0x44>
c000b3b9:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000b3bc:	eb d5                	jmp    c000b393 <LogicalDisk::mount()+0x17>
c000b3be:	31 c0                	xor    eax,eax
c000b3c0:	5a                   	pop    edx
c000b3c1:	5b                   	pop    ebx
c000b3c2:	5e                   	pop    esi
c000b3c3:	c3                   	ret    

c000b3c4 <LogicalDisk::unmount()>:
c000b3c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3c8:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000b3d2:	c3                   	ret    
c000b3d3:	90                   	nop

c000b3d4 <LogicalDisk::eject()>:
c000b3d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3d8:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000b3de:	8b 10                	mov    edx,DWORD PTR [eax]
c000b3e0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b3e4:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000b3e7:	90                   	nop

c000b3e8 <LogicalDisk::unassignDriveLetter()>:
c000b3e8:	57                   	push   edi
c000b3e9:	56                   	push   esi
c000b3ea:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b3ee:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000b3f5:	85 c9                	test   ecx,ecx
c000b3f7:	75 0f                	jne    c000b408 <LogicalDisk::unassignDriveLetter()+0x20>
c000b3f9:	c7 44 24 0c 90 ac 02 c0 	mov    DWORD PTR [esp+0xc],0xc002ac90
c000b401:	5e                   	pop    esi
c000b402:	5f                   	pop    edi
c000b403:	e9 58 51 00 00       	jmp    c0010560 <KePanic(char const*)>
c000b408:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000b40f:	83 e9 41             	sub    ecx,0x41
c000b412:	b8 01 00 00 00       	mov    eax,0x1
c000b417:	c7 04 8d e0 5a 03 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffca520],0x0
c000b422:	d3 e0                	shl    eax,cl
c000b424:	89 c7                	mov    edi,eax
c000b426:	f7 d0                	not    eax
c000b428:	c1 ff 1f             	sar    edi,0x1f
c000b42b:	21 05 c0 5a 03 c0    	and    DWORD PTR ds:0xc0035ac0,eax
c000b431:	89 fe                	mov    esi,edi
c000b433:	f7 d6                	not    esi
c000b435:	21 35 c4 5a 03 c0    	and    DWORD PTR ds:0xc0035ac4,esi
c000b43b:	5e                   	pop    esi
c000b43c:	5f                   	pop    edi
c000b43d:	c3                   	ret    

c000b43e <LogicalDisk::read(unsigned long long, int, void*)>:
c000b43e:	57                   	push   edi
c000b43f:	56                   	push   esi
c000b440:	53                   	push   ebx
c000b441:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b445:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b449:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b44d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b451:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000b457:	77 41                	ja     c000b49a <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000b459:	99                   	cdq    
c000b45a:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000b460:	01 c8                	add    eax,ecx
c000b462:	11 da                	adc    edx,ebx
c000b464:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000b46a:	19 d7                	sbb    edi,edx
c000b46c:	72 33                	jb     c000b4a1 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000b46e:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000b474:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000b47a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000b47e:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000b482:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000b488:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000b48e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b492:	5b                   	pop    ebx
c000b493:	5e                   	pop    esi
c000b494:	5f                   	pop    edi
c000b495:	e9 ac 0b 00 00       	jmp    c000c046 <VCache::read(unsigned long long, int, void*)>
c000b49a:	b8 05 00 00 00       	mov    eax,0x5
c000b49f:	eb 05                	jmp    c000b4a6 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000b4a1:	b8 07 00 00 00       	mov    eax,0x7
c000b4a6:	5b                   	pop    ebx
c000b4a7:	5e                   	pop    esi
c000b4a8:	5f                   	pop    edi
c000b4a9:	c3                   	ret    

c000b4aa <LogicalDisk::write(unsigned long long, int, void*)>:
c000b4aa:	57                   	push   edi
c000b4ab:	56                   	push   esi
c000b4ac:	53                   	push   ebx
c000b4ad:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b4b1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b4b5:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b4b9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b4bd:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000b4c3:	77 41                	ja     c000b506 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000b4c5:	99                   	cdq    
c000b4c6:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000b4cc:	01 c8                	add    eax,ecx
c000b4ce:	11 da                	adc    edx,ebx
c000b4d0:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000b4d6:	19 d7                	sbb    edi,edx
c000b4d8:	72 33                	jb     c000b50d <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000b4da:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000b4e0:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000b4e6:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000b4ea:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000b4ee:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000b4f4:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000b4fa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b4fe:	5b                   	pop    ebx
c000b4ff:	5e                   	pop    esi
c000b500:	5f                   	pop    edi
c000b501:	e9 72 09 00 00       	jmp    c000be78 <VCache::write(unsigned long long, int, void*)>
c000b506:	b8 05 00 00 00       	mov    eax,0x5
c000b50b:	eb 05                	jmp    c000b512 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000b50d:	b8 07 00 00 00       	mov    eax,0x7
c000b512:	5b                   	pop    ebx
c000b513:	5e                   	pop    esi
c000b514:	5f                   	pop    edi
c000b515:	c3                   	ret    
c000b516:	66 90                	xchg   ax,ax

c000b518 <Mouse::Mouse(char const*)>:
c000b518:	83 ec 0c             	sub    esp,0xc
c000b51b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b51f:	83 ec 08             	sub    esp,0x8
c000b522:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b526:	50                   	push   eax
c000b527:	e8 54 f0 ff ff       	call   c000a580 <Device::Device(char const*)>
c000b52c:	83 c4 10             	add    esp,0x10
c000b52f:	ba e4 ac 02 c0       	mov    edx,0xc002ace4
c000b534:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b538:	89 10                	mov    DWORD PTR [eax],edx
c000b53a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b53e:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000b548:	90                   	nop
c000b549:	83 c4 0c             	add    esp,0xc
c000b54c:	c3                   	ret    
c000b54d:	90                   	nop
c000b54e:	66 90                	xchg   ax,ax

c000b550 <Mouse::~Mouse()>:
c000b550:	83 ec 0c             	sub    esp,0xc
c000b553:	ba e4 ac 02 c0       	mov    edx,0xc002ace4
c000b558:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b55c:	89 10                	mov    DWORD PTR [eax],edx
c000b55e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b562:	83 ec 0c             	sub    esp,0xc
c000b565:	50                   	push   eax
c000b566:	e8 b5 ed ff ff       	call   c000a320 <Device::~Device()>
c000b56b:	83 c4 10             	add    esp,0x10
c000b56e:	90                   	nop
c000b56f:	83 c4 0c             	add    esp,0xc
c000b572:	c3                   	ret    
c000b573:	90                   	nop

c000b574 <Mouse::~Mouse()>:
c000b574:	83 ec 0c             	sub    esp,0xc
c000b577:	83 ec 0c             	sub    esp,0xc
c000b57a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b57e:	e8 cd ff ff ff       	call   c000b550 <Mouse::~Mouse()>
c000b583:	83 c4 10             	add    esp,0x10
c000b586:	83 ec 08             	sub    esp,0x8
c000b589:	68 58 01 00 00       	push   0x158
c000b58e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b592:	e8 75 27 00 00       	call   c000dd0c <operator delete(void*, unsigned long)>
c000b597:	83 c4 10             	add    esp,0x10
c000b59a:	83 c4 0c             	add    esp,0xc
c000b59d:	c3                   	ret    

c000b59e <NIC::getMAC()>:
c000b59e:	31 c0                	xor    eax,eax
c000b5a0:	31 d2                	xor    edx,edx
c000b5a2:	c3                   	ret    
c000b5a3:	90                   	nop

c000b5a4 <NIC::write(int, unsigned char*, int*)>:
c000b5a4:	b8 01 00 00 00       	mov    eax,0x1
c000b5a9:	c3                   	ret    

c000b5aa <NIC::NIC(char const*)>:
c000b5aa:	83 ec 0c             	sub    esp,0xc
c000b5ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b5b1:	83 ec 08             	sub    esp,0x8
c000b5b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5b8:	50                   	push   eax
c000b5b9:	e8 c2 ef ff ff       	call   c000a580 <Device::Device(char const*)>
c000b5be:	83 c4 10             	add    esp,0x10
c000b5c1:	ba 10 ad 02 c0       	mov    edx,0xc002ad10
c000b5c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b5ca:	89 10                	mov    DWORD PTR [eax],edx
c000b5cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b5d0:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000b5da:	90                   	nop
c000b5db:	83 c4 0c             	add    esp,0xc
c000b5de:	c3                   	ret    
c000b5df:	90                   	nop

c000b5e0 <NIC::~NIC()>:
c000b5e0:	83 ec 0c             	sub    esp,0xc
c000b5e3:	ba 10 ad 02 c0       	mov    edx,0xc002ad10
c000b5e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b5ec:	89 10                	mov    DWORD PTR [eax],edx
c000b5ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b5f2:	83 ec 0c             	sub    esp,0xc
c000b5f5:	50                   	push   eax
c000b5f6:	e8 25 ed ff ff       	call   c000a320 <Device::~Device()>
c000b5fb:	83 c4 10             	add    esp,0x10
c000b5fe:	90                   	nop
c000b5ff:	83 c4 0c             	add    esp,0xc
c000b602:	c3                   	ret    
c000b603:	90                   	nop

c000b604 <NIC::~NIC()>:
c000b604:	83 ec 0c             	sub    esp,0xc
c000b607:	83 ec 0c             	sub    esp,0xc
c000b60a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b60e:	e8 cd ff ff ff       	call   c000b5e0 <NIC::~NIC()>
c000b613:	83 c4 10             	add    esp,0x10
c000b616:	83 ec 08             	sub    esp,0x8
c000b619:	68 58 01 00 00       	push   0x158
c000b61e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b622:	e8 e5 26 00 00       	call   c000dd0c <operator delete(void*, unsigned long)>
c000b627:	83 c4 10             	add    esp,0x10
c000b62a:	83 c4 0c             	add    esp,0xc
c000b62d:	c3                   	ret    

c000b62e <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000b62e:	55                   	push   ebp
c000b62f:	57                   	push   edi
c000b630:	56                   	push   esi
c000b631:	53                   	push   ebx
c000b632:	81 ec 28 01 00 00    	sub    esp,0x128
c000b638:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
c000b63f:	8b 94 24 4c 01 00 00 	mov    edx,DWORD PTR [esp+0x14c]
c000b646:	8b b4 24 40 01 00 00 	mov    esi,DWORD PTR [esp+0x140]
c000b64d:	8b bc 24 44 01 00 00 	mov    edi,DWORD PTR [esp+0x144]
c000b654:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b658:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b65c:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000b663:	e8 14 f0 ff ff       	call   c000a67c <Device::getName()>
c000b668:	5a                   	pop    edx
c000b669:	59                   	pop    ecx
c000b66a:	50                   	push   eax
c000b66b:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000b66f:	55                   	push   ebp
c000b670:	e8 db 4f ff ff       	call   c0000650 <strcpy>
c000b675:	5b                   	pop    ebx
c000b676:	58                   	pop    eax
c000b677:	68 3c ad 02 c0       	push   0xc002ad3c
c000b67c:	55                   	push   ebp
c000b67d:	e8 ee 51 ff ff       	call   c0000870 <strcat>
c000b682:	c7 04 24 78 01 00 00 	mov    DWORD PTR [esp],0x178
c000b689:	e8 7e 4a 00 00       	call   c001010c <malloc>
c000b68e:	83 c4 0c             	add    esp,0xc
c000b691:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b695:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b699:	89 c3                	mov    ebx,eax
c000b69b:	57                   	push   edi
c000b69c:	56                   	push   esi
c000b69d:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000b6a4:	55                   	push   ebp
c000b6a5:	50                   	push   eax
c000b6a6:	e8 57 fb ff ff       	call   c000b202 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000b6ab:	83 c4 14             	add    esp,0x14
c000b6ae:	53                   	push   ebx
c000b6af:	e8 0e fc ff ff       	call   c000b2c2 <LogicalDisk::assignDriveLetter()>
c000b6b4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b6b7:	e8 c0 fc ff ff       	call   c000b37c <LogicalDisk::mount()>
c000b6bc:	58                   	pop    eax
c000b6bd:	5a                   	pop    edx
c000b6be:	53                   	push   ebx
c000b6bf:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000b6c6:	e8 53 ed ff ff       	call   c000a41e <Device::addChild(Device*)>
c000b6cb:	81 c4 2c 01 00 00    	add    esp,0x12c
c000b6d1:	5b                   	pop    ebx
c000b6d2:	5e                   	pop    esi
c000b6d3:	5f                   	pop    edi
c000b6d4:	5d                   	pop    ebp
c000b6d5:	c3                   	ret    

c000b6d6 <createPartitionsForDisk(PhysicalDisk*)>:
c000b6d6:	55                   	push   ebp
c000b6d7:	57                   	push   edi
c000b6d8:	56                   	push   esi
c000b6d9:	53                   	push   ebx
c000b6da:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000b6e0:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000b6e7:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000b6ed:	3d 00 02 00 00       	cmp    eax,0x200
c000b6f2:	74 27                	je     c000b71b <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000b6f4:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000b6fa:	83 ec 10             	sub    esp,0x10
c000b6fd:	99                   	cdq    
c000b6fe:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000b704:	52                   	push   edx
c000b705:	50                   	push   eax
c000b706:	0f a4 f7 0a          	shld   edi,esi,0xa
c000b70a:	c1 e6 0a             	shl    esi,0xa
c000b70d:	89 fd                	mov    ebp,edi
c000b70f:	55                   	push   ebp
c000b710:	56                   	push   esi
c000b711:	e8 be 8b 01 00       	call   c00242d4 <__udivdi3>
c000b716:	e9 b9 00 00 00       	jmp    c000b7d4 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000b71b:	83 ec 0c             	sub    esp,0xc
c000b71e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b720:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000b724:	56                   	push   esi
c000b725:	6a 01                	push   0x1
c000b727:	6a 00                	push   0x0
c000b729:	6a 00                	push   0x0
c000b72b:	53                   	push   ebx
c000b72c:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000b72f:	83 c4 20             	add    esp,0x20
c000b732:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000b73a:	75 0a                	jne    c000b746 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000b73c:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000b744:	74 2c                	je     c000b772 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000b746:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000b74c:	83 ec 10             	sub    esp,0x10
c000b74f:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000b755:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000b75b:	89 f7                	mov    edi,esi
c000b75d:	c1 ff 1f             	sar    edi,0x1f
c000b760:	57                   	push   edi
c000b761:	0f a4 c2 0a          	shld   edx,eax,0xa
c000b765:	56                   	push   esi
c000b766:	c1 e0 0a             	shl    eax,0xa
c000b769:	52                   	push   edx
c000b76a:	50                   	push   eax
c000b76b:	e8 64 8b 01 00       	call   c00242d4 <__udivdi3>
c000b770:	eb 62                	jmp    c000b7d4 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000b772:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000b779:	8a 94 24 1e 02 00 00 	mov    dl,BYTE PTR [esp+0x21e]
c000b780:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000b787:	89 cf                	mov    edi,ecx
c000b789:	83 e2 7f             	and    edx,0x7f
c000b78c:	83 e7 7f             	and    edi,0x7f
c000b78f:	8d 0c 17             	lea    ecx,[edi+edx*1]
c000b792:	83 e0 7f             	and    eax,0x7f
c000b795:	8d 14 01             	lea    edx,[ecx+eax*1]
c000b798:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000b79f:	83 e0 7f             	and    eax,0x7f
c000b7a2:	01 d0                	add    eax,edx
c000b7a4:	84 c0                	test   al,al
c000b7a6:	89 c5                	mov    ebp,eax
c000b7a8:	74 41                	je     c000b7eb <createPartitionsForDisk(PhysicalDisk*)+0x115>
c000b7aa:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000b7b0:	83 ec 10             	sub    esp,0x10
c000b7b3:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000b7b9:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000b7bf:	89 f7                	mov    edi,esi
c000b7c1:	c1 ff 1f             	sar    edi,0x1f
c000b7c4:	57                   	push   edi
c000b7c5:	0f a4 c2 0a          	shld   edx,eax,0xa
c000b7c9:	56                   	push   esi
c000b7ca:	c1 e0 0a             	shl    eax,0xa
c000b7cd:	52                   	push   edx
c000b7ce:	50                   	push   eax
c000b7cf:	e8 00 8b 01 00       	call   c00242d4 <__udivdi3>
c000b7d4:	83 c4 14             	add    esp,0x14
c000b7d7:	52                   	push   edx
c000b7d8:	50                   	push   eax
c000b7d9:	6a 00                	push   0x0
c000b7db:	6a 00                	push   0x0
c000b7dd:	53                   	push   ebx
c000b7de:	e8 4b fe ff ff       	call   c000b62e <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000b7e3:	83 c4 20             	add    esp,0x20
c000b7e6:	e9 73 01 00 00       	jmp    c000b95e <createPartitionsForDisk(PhysicalDisk*)+0x288>
c000b7eb:	89 f0                	mov    eax,esi
c000b7ed:	31 c9                	xor    ecx,ecx
c000b7ef:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000b7f6:	75 02                	jne    c000b7fa <createPartitionsForDisk(PhysicalDisk*)+0x124>
c000b7f8:	89 cd                	mov    ebp,ecx
c000b7fa:	c7 44 cc 14 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x14],0x0
c000b802:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000b809:	83 c0 10             	add    eax,0x10
c000b80c:	c7 44 cc 34 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x34],0x0
c000b814:	0f b6 b0 b8 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b8]
c000b81b:	c1 e2 08             	shl    edx,0x8
c000b81e:	c1 e6 10             	shl    esi,0x10
c000b821:	09 f2                	or     edx,esi
c000b823:	0f b6 b0 b6 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b6]
c000b82a:	09 f2                	or     edx,esi
c000b82c:	0f b6 b0 b9 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b9]
c000b833:	c1 e6 18             	shl    esi,0x18
c000b836:	09 f2                	or     edx,esi
c000b838:	0f b6 b0 bc 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bc]
c000b83f:	89 54 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],edx
c000b843:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000b84a:	c1 e6 10             	shl    esi,0x10
c000b84d:	c1 e2 08             	shl    edx,0x8
c000b850:	09 f2                	or     edx,esi
c000b852:	0f b6 b0 ba 01 00 00 	movzx  esi,BYTE PTR [eax+0x1ba]
c000b859:	09 f2                	or     edx,esi
c000b85b:	0f b6 b0 bd 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bd]
c000b862:	c1 e6 18             	shl    esi,0x18
c000b865:	09 f2                	or     edx,esi
c000b867:	89 54 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],edx
c000b86b:	41                   	inc    ecx
c000b86c:	83 f9 04             	cmp    ecx,0x4
c000b86f:	0f 85 7a ff ff ff    	jne    c000b7ef <createPartitionsForDisk(PhysicalDisk*)+0x119>
c000b875:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b879:	83 f0 01             	xor    eax,0x1
c000b87c:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000b880:	75 4f                	jne    c000b8d1 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000b882:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b886:	83 f0 01             	xor    eax,0x1
c000b889:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000b88d:	75 42                	jne    c000b8d1 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000b88f:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000b895:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000b89d:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000b8a3:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000b8ab:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000b8b1:	89 f7                	mov    edi,esi
c000b8b3:	c1 ff 1f             	sar    edi,0x1f
c000b8b6:	57                   	push   edi
c000b8b7:	56                   	push   esi
c000b8b8:	0f a4 c2 0a          	shld   edx,eax,0xa
c000b8bc:	52                   	push   edx
c000b8bd:	c1 e0 0a             	shl    eax,0xa
c000b8c0:	50                   	push   eax
c000b8c1:	e8 0e 8a 01 00       	call   c00242d4 <__udivdi3>
c000b8c6:	83 c4 10             	add    esp,0x10
c000b8c9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000b8cd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000b8d1:	89 e8                	mov    eax,ebp
c000b8d3:	0f b6 e8             	movzx  ebp,al
c000b8d6:	85 ed                	test   ebp,ebp
c000b8d8:	74 50                	je     c000b92a <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000b8da:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b8de:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000b8e2:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b8e6:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000b8ea:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b8ee:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000b8f2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b8f6:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000b8fa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b8fe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b902:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b906:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b90a:	89 74 ec 10          	mov    DWORD PTR [esp+ebp*8+0x10],esi
c000b90e:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000b912:	89 7c ec 14          	mov    DWORD PTR [esp+ebp*8+0x14],edi
c000b916:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000b91a:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000b91e:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000b922:	89 44 ec 30          	mov    DWORD PTR [esp+ebp*8+0x30],eax
c000b926:	89 54 ec 34          	mov    DWORD PTR [esp+ebp*8+0x34],edx
c000b92a:	31 ed                	xor    ebp,ebp
c000b92c:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000b930:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000b934:	89 f8                	mov    eax,edi
c000b936:	09 f0                	or     eax,esi
c000b938:	74 1e                	je     c000b958 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000b93a:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000b93e:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000b942:	89 d1                	mov    ecx,edx
c000b944:	09 c1                	or     ecx,eax
c000b946:	74 10                	je     c000b958 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000b948:	83 ec 0c             	sub    esp,0xc
c000b94b:	57                   	push   edi
c000b94c:	56                   	push   esi
c000b94d:	52                   	push   edx
c000b94e:	50                   	push   eax
c000b94f:	53                   	push   ebx
c000b950:	e8 d9 fc ff ff       	call   c000b62e <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000b955:	83 c4 20             	add    esp,0x20
c000b958:	45                   	inc    ebp
c000b959:	83 fd 04             	cmp    ebp,0x4
c000b95c:	75 ce                	jne    c000b92c <createPartitionsForDisk(PhysicalDisk*)+0x256>
c000b95e:	81 c4 5c 02 00 00    	add    esp,0x25c
c000b964:	5b                   	pop    ebx
c000b965:	5e                   	pop    esi
c000b966:	5f                   	pop    edi
c000b967:	5d                   	pop    ebp
c000b968:	c3                   	ret    
c000b969:	66 90                	xchg   ax,ax
c000b96b:	90                   	nop

c000b96c <Serial::Serial(char const*)>:
c000b96c:	83 ec 0c             	sub    esp,0xc
c000b96f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b973:	83 ec 08             	sub    esp,0x8
c000b976:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b97a:	50                   	push   eax
c000b97b:	e8 00 ec ff ff       	call   c000a580 <Device::Device(char const*)>
c000b980:	83 c4 10             	add    esp,0x10
c000b983:	ba 50 ad 02 c0       	mov    edx,0xc002ad50
c000b988:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b98c:	89 10                	mov    DWORD PTR [eax],edx
c000b98e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b992:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000b99c:	90                   	nop
c000b99d:	83 c4 0c             	add    esp,0xc
c000b9a0:	c3                   	ret    
c000b9a1:	90                   	nop
c000b9a2:	66 90                	xchg   ax,ax

c000b9a4 <Serial::~Serial()>:
c000b9a4:	83 ec 0c             	sub    esp,0xc
c000b9a7:	ba 50 ad 02 c0       	mov    edx,0xc002ad50
c000b9ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b9b0:	89 10                	mov    DWORD PTR [eax],edx
c000b9b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b9b6:	83 ec 0c             	sub    esp,0xc
c000b9b9:	50                   	push   eax
c000b9ba:	e8 61 e9 ff ff       	call   c000a320 <Device::~Device()>
c000b9bf:	83 c4 10             	add    esp,0x10
c000b9c2:	90                   	nop
c000b9c3:	83 c4 0c             	add    esp,0xc
c000b9c6:	c3                   	ret    
c000b9c7:	90                   	nop

c000b9c8 <Serial::~Serial()>:
c000b9c8:	83 ec 0c             	sub    esp,0xc
c000b9cb:	83 ec 0c             	sub    esp,0xc
c000b9ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b9d2:	e8 cd ff ff ff       	call   c000b9a4 <Serial::~Serial()>
c000b9d7:	83 c4 10             	add    esp,0x10
c000b9da:	83 ec 08             	sub    esp,0x8
c000b9dd:	68 58 01 00 00       	push   0x158
c000b9e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b9e6:	e8 21 23 00 00       	call   c000dd0c <operator delete(void*, unsigned long)>
c000b9eb:	83 c4 10             	add    esp,0x10
c000b9ee:	83 c4 0c             	add    esp,0xc
c000b9f1:	c3                   	ret    
c000b9f2:	66 90                	xchg   ax,ax

c000b9f4 <Timer::Timer(char const*)>:
c000b9f4:	83 ec 0c             	sub    esp,0xc
c000b9f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b9fb:	83 ec 08             	sub    esp,0x8
c000b9fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba02:	50                   	push   eax
c000ba03:	e8 78 eb ff ff       	call   c000a580 <Device::Device(char const*)>
c000ba08:	83 c4 10             	add    esp,0x10
c000ba0b:	ba 18 ae 02 c0       	mov    edx,0xc002ae18
c000ba10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ba14:	89 10                	mov    DWORD PTR [eax],edx
c000ba16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ba1a:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000ba24:	90                   	nop
c000ba25:	83 c4 0c             	add    esp,0xc
c000ba28:	c3                   	ret    
c000ba29:	90                   	nop
c000ba2a:	66 90                	xchg   ax,ax

c000ba2c <Timer::~Timer()>:
c000ba2c:	83 ec 0c             	sub    esp,0xc
c000ba2f:	ba 18 ae 02 c0       	mov    edx,0xc002ae18
c000ba34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ba38:	89 10                	mov    DWORD PTR [eax],edx
c000ba3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ba3e:	83 ec 0c             	sub    esp,0xc
c000ba41:	50                   	push   eax
c000ba42:	e8 d9 e8 ff ff       	call   c000a320 <Device::~Device()>
c000ba47:	83 c4 10             	add    esp,0x10
c000ba4a:	90                   	nop
c000ba4b:	83 c4 0c             	add    esp,0xc
c000ba4e:	c3                   	ret    
c000ba4f:	90                   	nop

c000ba50 <Timer::~Timer()>:
c000ba50:	83 ec 0c             	sub    esp,0xc
c000ba53:	83 ec 0c             	sub    esp,0xc
c000ba56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba5a:	e8 cd ff ff ff       	call   c000ba2c <Timer::~Timer()>
c000ba5f:	83 c4 10             	add    esp,0x10
c000ba62:	83 ec 08             	sub    esp,0x8
c000ba65:	68 5c 01 00 00       	push   0x15c
c000ba6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba6e:	e8 99 22 00 00       	call   c000dd0c <operator delete(void*, unsigned long)>
c000ba73:	83 c4 10             	add    esp,0x10
c000ba76:	83 c4 0c             	add    esp,0xc
c000ba79:	c3                   	ret    

c000ba7a <Timer::read()>:
c000ba7a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ba7e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000ba84:	c3                   	ret    

c000ba85 <setupTimer(int)>:
c000ba85:	53                   	push   ebx
c000ba86:	83 ec 14             	sub    esp,0x14
c000ba89:	68 5c 01 00 00       	push   0x15c
c000ba8e:	e8 79 46 00 00       	call   c001010c <malloc>
c000ba93:	89 04 24             	mov    DWORD PTR [esp],eax
c000ba96:	89 c3                	mov    ebx,eax
c000ba98:	e8 eb 80 01 00       	call   c0023b88 <PIT::PIT()>
c000ba9d:	58                   	pop    eax
c000ba9e:	5a                   	pop    edx
c000ba9f:	53                   	push   ebx
c000baa0:	ff 35 08 61 03 c0    	push   DWORD PTR ds:0xc0036108
c000baa6:	e8 73 e9 ff ff       	call   c000a41e <Device::addChild(Device*)>
c000baab:	8b 03                	mov    eax,DWORD PTR [ebx]
c000baad:	6a 00                	push   0x0
c000baaf:	6a 00                	push   0x0
c000bab1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000bab5:	53                   	push   ebx
c000bab6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000bab9:	83 c4 28             	add    esp,0x28
c000babc:	89 d8                	mov    eax,ebx
c000babe:	5b                   	pop    ebx
c000babf:	c3                   	ret    

c000bac0 <timerHandler(unsigned int)>:
c000bac0:	57                   	push   edi
c000bac1:	31 d2                	xor    edx,edx
c000bac3:	56                   	push   esi
c000bac4:	53                   	push   ebx
c000bac5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bac9:	01 1d 50 5b 03 c0    	add    DWORD PTR ds:0xc0035b50,ebx
c000bacf:	11 15 54 5b 03 c0    	adc    DWORD PTR ds:0xc0035b54,edx
c000bad5:	80 3d 0d 61 03 c0 00 	cmp    BYTE PTR ds:0xc003610d,0x0
c000badc:	0f 84 46 01 00 00    	je     c000bc28 <timerHandler(unsigned int)+0x168>
c000bae2:	fa                   	cli    
c000bae3:	ff 05 30 63 03 c0    	inc    DWORD PTR ds:0xc0036330
c000bae9:	83 ec 0c             	sub    esp,0xc
c000baec:	68 40 63 03 c0       	push   0xc0036340
c000baf1:	e8 2e d3 01 00       	call   c0028e24 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000baf6:	83 c4 10             	add    esp,0x10
c000baf9:	84 c0                	test   al,al
c000bafb:	0f 85 a7 00 00 00    	jne    c000bba8 <timerHandler(unsigned int)+0xe8>
c000bb01:	83 ec 0c             	sub    esp,0xc
c000bb04:	68 40 63 03 c0       	push   0xc0036340
c000bb09:	e8 32 d3 01 00       	call   c0028e40 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000bb0e:	83 c4 10             	add    esp,0x10
c000bb11:	89 c6                	mov    esi,eax
c000bb13:	90                   	nop
c000bb14:	83 ec 0c             	sub    esp,0xc
c000bb17:	68 40 63 03 c0       	push   0xc0036340
c000bb1c:	e8 1f d3 01 00       	call   c0028e40 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000bb21:	c7 04 24 40 63 03 c0 	mov    DWORD PTR [esp],0xc0036340
c000bb28:	89 c7                	mov    edi,eax
c000bb2a:	e8 19 d3 01 00       	call   c0028e48 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000bb2f:	8b 57 2c             	mov    edx,DWORD PTR [edi+0x2c]
c000bb32:	83 c4 10             	add    esp,0x10
c000bb35:	8b 4f 30             	mov    ecx,DWORD PTR [edi+0x30]
c000bb38:	a1 54 5b 03 c0       	mov    eax,ds:0xc0035b54
c000bb3d:	39 15 50 5b 03 c0    	cmp    DWORD PTR ds:0xc0035b50,edx
c000bb43:	19 c8                	sbb    eax,ecx
c000bb45:	72 21                	jb     c000bb68 <timerHandler(unsigned int)+0xa8>
c000bb47:	83 ec 0c             	sub    esp,0xc
c000bb4a:	57                   	push   edi
c000bb4b:	e8 f0 b8 00 00       	call   c0017440 <unblockTask(ThreadControlBlock*)>
c000bb50:	83 c4 10             	add    esp,0x10
c000bb53:	39 fe                	cmp    esi,edi
c000bb55:	75 25                	jne    c000bb7c <timerHandler(unsigned int)+0xbc>
c000bb57:	83 ec 0c             	sub    esp,0xc
c000bb5a:	68 40 63 03 c0       	push   0xc0036340
c000bb5f:	e8 dc d2 01 00       	call   c0028e40 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000bb64:	89 c6                	mov    esi,eax
c000bb66:	eb 10                	jmp    c000bb78 <timerHandler(unsigned int)+0xb8>
c000bb68:	51                   	push   ecx
c000bb69:	51                   	push   ecx
c000bb6a:	57                   	push   edi
c000bb6b:	68 40 63 03 c0       	push   0xc0036340
c000bb70:	e8 8f d3 01 00       	call   c0028f04 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000bb75:	8d 76 00             	lea    esi,[esi+0x0]
c000bb78:	83 c4 10             	add    esp,0x10
c000bb7b:	90                   	nop
c000bb7c:	83 ec 0c             	sub    esp,0xc
c000bb7f:	68 40 63 03 c0       	push   0xc0036340
c000bb84:	e8 9b d2 01 00       	call   c0028e24 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000bb89:	83 c4 10             	add    esp,0x10
c000bb8c:	84 c0                	test   al,al
c000bb8e:	75 18                	jne    c000bba8 <timerHandler(unsigned int)+0xe8>
c000bb90:	83 ec 0c             	sub    esp,0xc
c000bb93:	68 40 63 03 c0       	push   0xc0036340
c000bb98:	e8 a3 d2 01 00       	call   c0028e40 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000bb9d:	83 c4 10             	add    esp,0x10
c000bba0:	39 f0                	cmp    eax,esi
c000bba2:	0f 85 6c ff ff ff    	jne    c000bb14 <timerHandler(unsigned int)+0x54>
c000bba8:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000bbae:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c000bbb1:	85 c0                	test   eax,eax
c000bbb3:	74 5f                	je     c000bc14 <timerHandler(unsigned int)+0x154>
c000bbb5:	80 3d 0c 61 03 c0 00 	cmp    BYTE PTR ds:0xc003610c,0x0
c000bbbc:	74 56                	je     c000bc14 <timerHandler(unsigned int)+0x154>
c000bbbe:	3d e8 03 00 00       	cmp    eax,0x3e8
c000bbc3:	76 23                	jbe    c000bbe8 <timerHandler(unsigned int)+0x128>
c000bbc5:	80 7a 62 00          	cmp    BYTE PTR [edx+0x62],0x0
c000bbc9:	75 11                	jne    c000bbdc <timerHandler(unsigned int)+0x11c>
c000bbcb:	52                   	push   edx
c000bbcc:	52                   	push   edx
c000bbcd:	50                   	push   eax
c000bbce:	68 df ad 02 c0       	push   0xc002addf
c000bbd3:	e8 8e b3 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000bbd8:	83 c4 10             	add    esp,0x10
c000bbdb:	90                   	nop
c000bbdc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000bbe1:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c000bbe8:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000bbee:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c000bbf1:	39 d8                	cmp    eax,ebx
c000bbf3:	73 0b                	jae    c000bc00 <timerHandler(unsigned int)+0x140>
c000bbf5:	c7 42 38 00 00 00 00 	mov    DWORD PTR [edx+0x38],0x0
c000bbfc:	eb 0e                	jmp    c000bc0c <timerHandler(unsigned int)+0x14c>
c000bbfe:	66 90                	xchg   ax,ax
c000bc00:	89 c1                	mov    ecx,eax
c000bc02:	29 d9                	sub    ecx,ebx
c000bc04:	39 d8                	cmp    eax,ebx
c000bc06:	89 4a 38             	mov    DWORD PTR [edx+0x38],ecx
c000bc09:	75 09                	jne    c000bc14 <timerHandler(unsigned int)+0x154>
c000bc0b:	90                   	nop
c000bc0c:	e8 d7 b4 00 00       	call   c00170e8 <schedule()>
c000bc11:	8d 76 00             	lea    esi,[esi+0x0]
c000bc14:	f0 ff 0d 30 63 03 c0 	lock dec DWORD PTR ds:0xc0036330
c000bc1b:	83 3d 30 63 03 c0 00 	cmp    DWORD PTR ds:0xc0036330,0x0
c000bc22:	75 04                	jne    c000bc28 <timerHandler(unsigned int)+0x168>
c000bc24:	fb                   	sti    
c000bc25:	8d 76 00             	lea    esi,[esi+0x0]
c000bc28:	5b                   	pop    ebx
c000bc29:	5e                   	pop    esi
c000bc2a:	5f                   	pop    edi
c000bc2b:	c3                   	ret    

c000bc2c <VCache::VCache(PhysicalDisk*)>:
c000bc2c:	53                   	push   ebx
c000bc2d:	83 ec 18             	sub    esp,0x18
c000bc30:	ba 88 ae 02 c0       	mov    edx,0xc002ae88
c000bc35:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc39:	89 10                	mov    DWORD PTR [eax],edx
c000bc3b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc3f:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000bc46:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc4a:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000bc51:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc55:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000bc5c:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000bc63:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc67:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000bc6e:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000bc75:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc79:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000bc80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc84:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000bc88:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc8c:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000bc93:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000bc9a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc9e:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000bca2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bca6:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000bcaa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bcae:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000bcb2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bcb6:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000bcbd:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000bcc5:	83 ec 0c             	sub    esp,0xc
c000bcc8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bccc:	e8 3b 44 00 00       	call   c001010c <malloc>
c000bcd1:	83 c4 10             	add    esp,0x10
c000bcd4:	89 c3                	mov    ebx,eax
c000bcd6:	83 ec 0c             	sub    esp,0xc
c000bcd9:	53                   	push   ebx
c000bcda:	e8 61 48 00 00       	call   c0010540 <Mutex::Mutex()>
c000bcdf:	83 c4 10             	add    esp,0x10
c000bce2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bce6:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000bce9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bced:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000bcf1:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000bcf4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bcf8:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000bcff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000bd03:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000bd09:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bd0d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000bd10:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000bd14:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000bd1a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000bd20:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000bd24:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000bd27:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000bd2a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bd2e:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000bd32:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000bd36:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000bd3c:	05 00 01 00 00       	add    eax,0x100
c000bd41:	c1 e0 04             	shl    eax,0x4
c000bd44:	83 ec 0c             	sub    esp,0xc
c000bd47:	50                   	push   eax
c000bd48:	e8 bf 43 00 00       	call   c001010c <malloc>
c000bd4d:	83 c4 10             	add    esp,0x10
c000bd50:	89 c2                	mov    edx,eax
c000bd52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bd56:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000bd59:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bd5d:	c7 40 40 08 00 00 00 	mov    DWORD PTR [eax+0x40],0x8
c000bd64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bd68:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000bd6c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000bd70:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000bd76:	89 d0                	mov    eax,edx
c000bd78:	c1 e0 02             	shl    eax,0x2
c000bd7b:	01 d0                	add    eax,edx
c000bd7d:	c1 e0 04             	shl    eax,0x4
c000bd80:	83 ec 0c             	sub    esp,0xc
c000bd83:	50                   	push   eax
c000bd84:	e8 83 43 00 00       	call   c001010c <malloc>
c000bd89:	83 c4 10             	add    esp,0x10
c000bd8c:	89 c2                	mov    edx,eax
c000bd8e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bd92:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000bd95:	90                   	nop
c000bd96:	83 c4 18             	add    esp,0x18
c000bd99:	5b                   	pop    ebx
c000bd9a:	c3                   	ret    
c000bd9b:	90                   	nop

c000bd9c <VCache::invalidateReadBuffer()>:
c000bd9c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bda0:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000bda6:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000bdaa:	c3                   	ret    
c000bdab:	90                   	nop

c000bdac <VCache::writeWriteBuffer()>:
c000bdac:	53                   	push   ebx
c000bdad:	83 ec 08             	sub    esp,0x8
c000bdb0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bdb4:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000bdb8:	74 1e                	je     c000bdd8 <VCache::writeWriteBuffer()+0x2c>
c000bdba:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000bdbd:	83 ec 0c             	sub    esp,0xc
c000bdc0:	8b 10                	mov    edx,DWORD PTR [eax]
c000bdc2:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000bdc5:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000bdc8:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000bdcb:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bdce:	50                   	push   eax
c000bdcf:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000bdd2:	83 c4 20             	add    esp,0x20
c000bdd5:	8d 76 00             	lea    esi,[esi+0x0]
c000bdd8:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000bddf:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000bde6:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000bdea:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000bdf1:	83 c4 08             	add    esp,0x8
c000bdf4:	5b                   	pop    ebx
c000bdf5:	c3                   	ret    
c000bdf6:	66 90                	xchg   ax,ax

c000bdf8 <VCache::~VCache()>:
c000bdf8:	83 ec 0c             	sub    esp,0xc
c000bdfb:	ba 88 ae 02 c0       	mov    edx,0xc002ae88
c000be00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be04:	89 10                	mov    DWORD PTR [eax],edx
c000be06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be0a:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000be0d:	0f b6 c0             	movzx  eax,al
c000be10:	85 c0                	test   eax,eax
c000be12:	74 10                	je     c000be24 <VCache::~VCache()+0x2c>
c000be14:	83 ec 0c             	sub    esp,0xc
c000be17:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000be1b:	e8 8c ff ff ff       	call   c000bdac <VCache::writeWriteBuffer()>
c000be20:	83 c4 10             	add    esp,0x10
c000be23:	90                   	nop
c000be24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be28:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000be2b:	83 ec 0c             	sub    esp,0xc
c000be2e:	50                   	push   eax
c000be2f:	e8 e8 42 00 00       	call   c001011c <free>
c000be34:	83 c4 10             	add    esp,0x10
c000be37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be3b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000be3e:	83 ec 0c             	sub    esp,0xc
c000be41:	50                   	push   eax
c000be42:	e8 d5 42 00 00       	call   c001011c <free>
c000be47:	83 c4 10             	add    esp,0x10
c000be4a:	90                   	nop
c000be4b:	83 c4 0c             	add    esp,0xc
c000be4e:	c3                   	ret    
c000be4f:	90                   	nop

c000be50 <VCache::~VCache()>:
c000be50:	83 ec 0c             	sub    esp,0xc
c000be53:	83 ec 0c             	sub    esp,0xc
c000be56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000be5a:	e8 99 ff ff ff       	call   c000bdf8 <VCache::~VCache()>
c000be5f:	83 c4 10             	add    esp,0x10
c000be62:	83 ec 08             	sub    esp,0x8
c000be65:	6a 44                	push   0x44
c000be67:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000be6b:	e8 9c 1e 00 00       	call   c000dd0c <operator delete(void*, unsigned long)>
c000be70:	83 c4 10             	add    esp,0x10
c000be73:	83 c4 0c             	add    esp,0xc
c000be76:	c3                   	ret    
c000be77:	90                   	nop

c000be78 <VCache::write(unsigned long long, int, void*)>:
c000be78:	55                   	push   ebp
c000be79:	57                   	push   edi
c000be7a:	56                   	push   esi
c000be7b:	53                   	push   ebx
c000be7c:	83 ec 1c             	sub    esp,0x1c
c000be7f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000be83:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000be87:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000be8b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000be8f:	e8 58 af 00 00       	call   c0016dec <KeDisablePreemption()>
c000be94:	b9 00 10 00 00       	mov    ecx,0x1000
c000be99:	50                   	push   eax
c000be9a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000be9d:	0f af c3             	imul   eax,ebx
c000bea0:	05 ff 0f 00 00       	add    eax,0xfff
c000bea5:	99                   	cdq    
c000bea6:	f7 f9                	idiv   ecx
c000bea8:	50                   	push   eax
c000bea9:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000bead:	ff 35 90 62 03 c0    	push   DWORD PTR ds:0xc0036290
c000beb3:	e8 46 89 00 00       	call   c00147fe <VAS::canLockPages(unsigned long, int)>
c000beb8:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c000bebc:	83 c4 10             	add    esp,0x10
c000bebf:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000bec4:	74 2a                	je     c000bef0 <VCache::write(unsigned long long, int, void*)+0x78>
c000bec6:	50                   	push   eax
c000bec7:	b9 00 10 00 00       	mov    ecx,0x1000
c000becc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000becf:	0f af c3             	imul   eax,ebx
c000bed2:	05 ff 0f 00 00       	add    eax,0xfff
c000bed7:	99                   	cdq    
c000bed8:	f7 f9                	idiv   ecx
c000beda:	50                   	push   eax
c000bedb:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000bedf:	ff 35 90 62 03 c0    	push   DWORD PTR ds:0xc0036290
c000bee5:	e8 b2 8b 00 00       	call   c0014a9c <VAS::lockPages(unsigned long, int)>
c000beea:	83 c4 10             	add    esp,0x10
c000beed:	8d 76 00             	lea    esi,[esi+0x0]
c000bef0:	80 7d 3c 00          	cmp    BYTE PTR [ebp+0x3c],0x0
c000bef4:	74 0e                	je     c000bf04 <VCache::write(unsigned long long, int, void*)+0x8c>
c000bef6:	83 ec 0c             	sub    esp,0xc
c000bef9:	55                   	push   ebp
c000befa:	e8 9d fe ff ff       	call   c000bd9c <VCache::invalidateReadBuffer()>
c000beff:	83 c4 10             	add    esp,0x10
c000bf02:	66 90                	xchg   ax,ax
c000bf04:	80 7d 2c 00          	cmp    BYTE PTR [ebp+0x2c],0x0
c000bf08:	74 72                	je     c000bf7c <VCache::write(unsigned long long, int, void*)+0x104>
c000bf0a:	8b 4d 24             	mov    ecx,DWORD PTR [ebp+0x24]
c000bf0d:	89 c8                	mov    eax,ecx
c000bf0f:	99                   	cdq    
c000bf10:	03 45 1c             	add    eax,DWORD PTR [ebp+0x1c]
c000bf13:	13 55 20             	adc    edx,DWORD PTR [ebp+0x20]
c000bf16:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bf1a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bf1e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bf22:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bf26:	31 f0                	xor    eax,esi
c000bf28:	31 fa                	xor    edx,edi
c000bf2a:	09 d0                	or     eax,edx
c000bf2c:	75 42                	jne    c000bf70 <VCache::write(unsigned long long, int, void*)+0xf8>
c000bf2e:	83 fb 01             	cmp    ebx,0x1
c000bf31:	75 3d                	jne    c000bf70 <VCache::write(unsigned long long, int, void*)+0xf8>
c000bf33:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000bf36:	89 cf                	mov    edi,ecx
c000bf38:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000bf3c:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000bf42:	0f af f8             	imul   edi,eax
c000bf45:	89 c1                	mov    ecx,eax
c000bf47:	03 7d 28             	add    edi,DWORD PTR [ebp+0x28]
c000bf4a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000bf4c:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c000bf4f:	40                   	inc    eax
c000bf50:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c000bf53:	83 f8 50             	cmp    eax,0x50
c000bf56:	0f 85 a8 00 00 00    	jne    c000c004 <VCache::write(unsigned long long, int, void*)+0x18c>
c000bf5c:	83 ec 0c             	sub    esp,0xc
c000bf5f:	55                   	push   ebp
c000bf60:	e8 47 fe ff ff       	call   c000bdac <VCache::writeWriteBuffer()>
c000bf65:	83 c4 10             	add    esp,0x10
c000bf68:	e9 97 00 00 00       	jmp    c000c004 <VCache::write(unsigned long long, int, void*)+0x18c>
c000bf6d:	8d 76 00             	lea    esi,[esi+0x0]
c000bf70:	83 ec 0c             	sub    esp,0xc
c000bf73:	55                   	push   ebp
c000bf74:	e8 33 fe ff ff       	call   c000bdac <VCache::writeWriteBuffer()>
c000bf79:	83 c4 10             	add    esp,0x10
c000bf7c:	83 fb 4f             	cmp    ebx,0x4f
c000bf7f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000bf82:	7f 20                	jg     c000bfa4 <VCache::write(unsigned long long, int, void*)+0x12c>
c000bf84:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c000bf87:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000bf8b:	89 7d 20             	mov    DWORD PTR [ebp+0x20],edi
c000bf8e:	8b 7d 28             	mov    edi,DWORD PTR [ebp+0x28]
c000bf91:	89 5d 24             	mov    DWORD PTR [ebp+0x24],ebx
c000bf94:	c6 45 2c 01          	mov    BYTE PTR [ebp+0x2c],0x1
c000bf98:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000bf9e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000bfa0:	eb 62                	jmp    c000c004 <VCache::write(unsigned long long, int, void*)+0x18c>
c000bfa2:	66 90                	xchg   ax,ax
c000bfa4:	83 ec 0c             	sub    esp,0xc
c000bfa7:	8b 10                	mov    edx,DWORD PTR [eax]
c000bfa9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfad:	53                   	push   ebx
c000bfae:	57                   	push   edi
c000bfaf:	56                   	push   esi
c000bfb0:	50                   	push   eax
c000bfb1:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000bfb4:	83 c4 20             	add    esp,0x20
c000bfb7:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000bfbc:	89 c6                	mov    esi,eax
c000bfbe:	74 28                	je     c000bfe8 <VCache::write(unsigned long long, int, void*)+0x170>
c000bfc0:	52                   	push   edx
c000bfc1:	b9 00 10 00 00       	mov    ecx,0x1000
c000bfc6:	0f af 5d 0c          	imul   ebx,DWORD PTR [ebp+0xc]
c000bfca:	8d 83 ff 0f 00 00    	lea    eax,[ebx+0xfff]
c000bfd0:	99                   	cdq    
c000bfd1:	f7 f9                	idiv   ecx
c000bfd3:	50                   	push   eax
c000bfd4:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000bfd8:	ff 35 90 62 03 c0    	push   DWORD PTR ds:0xc0036290
c000bfde:	e8 57 88 00 00       	call   c001483a <VAS::unlockPages(unsigned long, int)>
c000bfe3:	83 c4 10             	add    esp,0x10
c000bfe6:	66 90                	xchg   ax,ax
c000bfe8:	e8 27 ae 00 00       	call   c0016e14 <KeRestorePreemption()>
c000bfed:	85 f6                	test   esi,esi
c000bfef:	74 4b                	je     c000c03c <VCache::write(unsigned long long, int, void*)+0x1c4>
c000bff1:	83 ec 0c             	sub    esp,0xc
c000bff4:	68 40 ae 02 c0       	push   0xc002ae40
c000bff9:	e8 68 af ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000bffe:	83 c4 10             	add    esp,0x10
c000c001:	eb 39                	jmp    c000c03c <VCache::write(unsigned long long, int, void*)+0x1c4>
c000c003:	90                   	nop
c000c004:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000c009:	74 29                	je     c000c034 <VCache::write(unsigned long long, int, void*)+0x1bc>
c000c00b:	50                   	push   eax
c000c00c:	b9 00 10 00 00       	mov    ecx,0x1000
c000c011:	0f af 5d 0c          	imul   ebx,DWORD PTR [ebp+0xc]
c000c015:	8d 83 ff 0f 00 00    	lea    eax,[ebx+0xfff]
c000c01b:	99                   	cdq    
c000c01c:	f7 f9                	idiv   ecx
c000c01e:	50                   	push   eax
c000c01f:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000c023:	ff 35 90 62 03 c0    	push   DWORD PTR ds:0xc0036290
c000c029:	e8 0c 88 00 00       	call   c001483a <VAS::unlockPages(unsigned long, int)>
c000c02e:	83 c4 10             	add    esp,0x10
c000c031:	8d 76 00             	lea    esi,[esi+0x0]
c000c034:	e8 db ad 00 00       	call   c0016e14 <KeRestorePreemption()>
c000c039:	31 f6                	xor    esi,esi
c000c03b:	90                   	nop
c000c03c:	83 c4 1c             	add    esp,0x1c
c000c03f:	89 f0                	mov    eax,esi
c000c041:	5b                   	pop    ebx
c000c042:	5e                   	pop    esi
c000c043:	5f                   	pop    edi
c000c044:	5d                   	pop    ebp
c000c045:	c3                   	ret    

c000c046 <VCache::read(unsigned long long, int, void*)>:
c000c046:	55                   	push   ebp
c000c047:	bd 00 10 00 00       	mov    ebp,0x1000
c000c04c:	57                   	push   edi
c000c04d:	56                   	push   esi
c000c04e:	53                   	push   ebx
c000c04f:	83 ec 2c             	sub    esp,0x2c
c000c052:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000c056:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c000c05a:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000c05e:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c000c062:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c066:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c06a:	e8 7d ad 00 00       	call   c0016dec <KeDisablePreemption()>
c000c06f:	50                   	push   eax
c000c070:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c073:	0f af c6             	imul   eax,esi
c000c076:	05 ff 0f 00 00       	add    eax,0xfff
c000c07b:	99                   	cdq    
c000c07c:	f7 fd                	idiv   ebp
c000c07e:	50                   	push   eax
c000c07f:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c000c083:	ff 35 90 62 03 c0    	push   DWORD PTR ds:0xc0036290
c000c089:	e8 70 87 00 00       	call   c00147fe <VAS::canLockPages(unsigned long, int)>
c000c08e:	83 c4 10             	add    esp,0x10
c000c091:	84 c0                	test   al,al
c000c093:	89 c7                	mov    edi,eax
c000c095:	74 25                	je     c000c0bc <VCache::read(unsigned long long, int, void*)+0x76>
c000c097:	50                   	push   eax
c000c098:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c09b:	0f af c6             	imul   eax,esi
c000c09e:	05 ff 0f 00 00       	add    eax,0xfff
c000c0a3:	99                   	cdq    
c000c0a4:	f7 fd                	idiv   ebp
c000c0a6:	50                   	push   eax
c000c0a7:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c000c0ab:	ff 35 90 62 03 c0    	push   DWORD PTR ds:0xc0036290
c000c0b1:	e8 e6 89 00 00       	call   c0014a9c <VAS::lockPages(unsigned long, int)>
c000c0b6:	83 c4 10             	add    esp,0x10
c000c0b9:	8d 76 00             	lea    esi,[esi+0x0]
c000c0bc:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000c0c0:	74 0e                	je     c000c0d0 <VCache::read(unsigned long long, int, void*)+0x8a>
c000c0c2:	83 ec 0c             	sub    esp,0xc
c000c0c5:	53                   	push   ebx
c000c0c6:	e8 e1 fc ff ff       	call   c000bdac <VCache::writeWriteBuffer()>
c000c0cb:	83 c4 10             	add    esp,0x10
c000c0ce:	66 90                	xchg   ax,ax
c000c0d0:	83 fe 01             	cmp    esi,0x1
c000c0d3:	0f 85 fb 00 00 00    	jne    c000c1d4 <VCache::read(unsigned long long, int, void*)+0x18e>
c000c0d9:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000c0dc:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c000c0e3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c0e7:	0f 85 e7 00 00 00    	jne    c000c1d4 <VCache::read(unsigned long long, int, void*)+0x18e>
c000c0ed:	8b 6b 40             	mov    ebp,DWORD PTR [ebx+0x40]
c000c0f0:	89 ee                	mov    esi,ebp
c000c0f2:	f7 de                	neg    esi
c000c0f4:	89 f0                	mov    eax,esi
c000c0f6:	c1 f8 1f             	sar    eax,0x1f
c000c0f9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000c0fd:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000c101:	23 4c 24 0c          	and    ecx,DWORD PTR [esp+0xc]
c000c105:	23 74 24 08          	and    esi,DWORD PTR [esp+0x8]
c000c109:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000c10d:	89 ca                	mov    edx,ecx
c000c10f:	89 f9                	mov    ecx,edi
c000c111:	0f b6 f9             	movzx  edi,cl
c000c114:	89 f0                	mov    eax,esi
c000c116:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000c11a:	74 0c                	je     c000c128 <VCache::read(unsigned long long, int, void*)+0xe2>
c000c11c:	39 53 34             	cmp    DWORD PTR [ebx+0x34],edx
c000c11f:	75 07                	jne    c000c128 <VCache::read(unsigned long long, int, void*)+0xe2>
c000c121:	39 73 30             	cmp    DWORD PTR [ebx+0x30],esi
c000c124:	74 56                	je     c000c17c <VCache::read(unsigned long long, int, void*)+0x136>
c000c126:	66 90                	xchg   ax,ax
c000c128:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c000c12c:	83 ec 0c             	sub    esp,0xc
c000c12f:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000c132:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000c136:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c139:	8b 37                	mov    esi,DWORD PTR [edi]
c000c13b:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000c13e:	55                   	push   ebp
c000c13f:	52                   	push   edx
c000c140:	50                   	push   eax
c000c141:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000c145:	ff 56 28             	call   DWORD PTR [esi+0x28]
c000c148:	83 c4 20             	add    esp,0x20
c000c14b:	85 c0                	test   eax,eax
c000c14d:	89 c5                	mov    ebp,eax
c000c14f:	74 2b                	je     c000c17c <VCache::read(unsigned long long, int, void*)+0x136>
c000c151:	83 ec 0c             	sub    esp,0xc
c000c154:	68 58 ae 02 c0       	push   0xc002ae58
c000c159:	e8 08 ae ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000c15e:	83 c4 10             	add    esp,0x10
c000c161:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000c166:	0f 84 bc 00 00 00    	je     c000c228 <VCache::read(unsigned long long, int, void*)+0x1e2>
c000c16c:	56                   	push   esi
c000c16d:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c170:	05 ff 0f 00 00       	add    eax,0xfff
c000c175:	e9 92 00 00 00       	jmp    c000c20c <VCache::read(unsigned long long, int, void*)+0x1c6>
c000c17a:	66 90                	xchg   ax,ax
c000c17c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000c17f:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000c183:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000c189:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000c18c:	8d 70 ff             	lea    esi,[eax-0x1]
c000c18f:	23 74 24 08          	and    esi,DWORD PTR [esp+0x8]
c000c193:	0f af f1             	imul   esi,ecx
c000c196:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c000c199:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c19b:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000c1a0:	74 26                	je     c000c1c8 <VCache::read(unsigned long long, int, void*)+0x182>
c000c1a2:	51                   	push   ecx
c000c1a3:	b9 00 10 00 00       	mov    ecx,0x1000
c000c1a8:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c1ab:	05 ff 0f 00 00       	add    eax,0xfff
c000c1b0:	99                   	cdq    
c000c1b1:	f7 f9                	idiv   ecx
c000c1b3:	50                   	push   eax
c000c1b4:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c000c1b8:	ff 35 90 62 03 c0    	push   DWORD PTR ds:0xc0036290
c000c1be:	e8 77 86 00 00       	call   c001483a <VAS::unlockPages(unsigned long, int)>
c000c1c3:	83 c4 10             	add    esp,0x10
c000c1c6:	66 90                	xchg   ax,ax
c000c1c8:	e8 47 ac 00 00       	call   c0016e14 <KeRestorePreemption()>
c000c1cd:	31 ed                	xor    ebp,ebp
c000c1cf:	eb 5f                	jmp    c000c230 <VCache::read(unsigned long long, int, void*)+0x1ea>
c000c1d1:	8d 76 00             	lea    esi,[esi+0x0]
c000c1d4:	83 ec 0c             	sub    esp,0xc
c000c1d7:	53                   	push   ebx
c000c1d8:	e8 bf fb ff ff       	call   c000bd9c <VCache::invalidateReadBuffer()>
c000c1dd:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000c1e0:	5a                   	pop    edx
c000c1e1:	8b 10                	mov    edx,DWORD PTR [eax]
c000c1e3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000c1e7:	56                   	push   esi
c000c1e8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c1ec:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c1f0:	50                   	push   eax
c000c1f1:	ff 52 28             	call   DWORD PTR [edx+0x28]
c000c1f4:	83 c4 20             	add    esp,0x20
c000c1f7:	89 c5                	mov    ebp,eax
c000c1f9:	89 f8                	mov    eax,edi
c000c1fb:	84 c0                	test   al,al
c000c1fd:	74 29                	je     c000c228 <VCache::read(unsigned long long, int, void*)+0x1e2>
c000c1ff:	50                   	push   eax
c000c200:	0f af 73 0c          	imul   esi,DWORD PTR [ebx+0xc]
c000c204:	8d 86 ff 0f 00 00    	lea    eax,[esi+0xfff]
c000c20a:	66 90                	xchg   ax,ax
c000c20c:	b9 00 10 00 00       	mov    ecx,0x1000
c000c211:	99                   	cdq    
c000c212:	f7 f9                	idiv   ecx
c000c214:	50                   	push   eax
c000c215:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c000c219:	ff 35 90 62 03 c0    	push   DWORD PTR ds:0xc0036290
c000c21f:	e8 16 86 00 00       	call   c001483a <VAS::unlockPages(unsigned long, int)>
c000c224:	83 c4 10             	add    esp,0x10
c000c227:	90                   	nop
c000c228:	e8 e7 ab 00 00       	call   c0016e14 <KeRestorePreemption()>
c000c22d:	8d 76 00             	lea    esi,[esi+0x0]
c000c230:	83 c4 2c             	add    esp,0x2c
c000c233:	89 e8                	mov    eax,ebp
c000c235:	5b                   	pop    ebx
c000c236:	5e                   	pop    esi
c000c237:	5f                   	pop    edi
c000c238:	5d                   	pop    ebp
c000c239:	c3                   	ret    

c000c23a <Video::putrect(int, int, int, int, unsigned int)>:
c000c23a:	55                   	push   ebp
c000c23b:	57                   	push   edi
c000c23c:	56                   	push   esi
c000c23d:	53                   	push   ebx
c000c23e:	83 ec 1c             	sub    esp,0x1c
c000c241:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000c245:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c249:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000c24d:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000c251:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000c255:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c259:	01 df                	add    edi,ebx
c000c25b:	39 fb                	cmp    ebx,edi
c000c25d:	7d 1f                	jge    c000c27e <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000c25f:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000c263:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000c267:	7d 12                	jge    c000c27b <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000c269:	8b 16                	mov    edx,DWORD PTR [esi]
c000c26b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c26f:	53                   	push   ebx
c000c270:	55                   	push   ebp
c000c271:	45                   	inc    ebp
c000c272:	56                   	push   esi
c000c273:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000c276:	83 c4 10             	add    esp,0x10
c000c279:	eb e8                	jmp    c000c263 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000c27b:	43                   	inc    ebx
c000c27c:	eb dd                	jmp    c000c25b <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000c27e:	83 c4 1c             	add    esp,0x1c
c000c281:	5b                   	pop    ebx
c000c282:	5e                   	pop    esi
c000c283:	5f                   	pop    edi
c000c284:	5d                   	pop    ebp
c000c285:	c3                   	ret    

c000c286 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000c286:	55                   	push   ebp
c000c287:	57                   	push   edi
c000c288:	31 ff                	xor    edi,edi
c000c28a:	56                   	push   esi
c000c28b:	53                   	push   ebx
c000c28c:	83 ec 1c             	sub    esp,0x1c
c000c28f:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000c293:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000c297:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000c29e:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000c2a3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c2a7:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000c2ab:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000c2af:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000c2b2:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000c2b6:	01 f9                	add    ecx,edi
c000c2b8:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000c2bc:	7d 2f                	jge    c000c2ed <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000c2be:	31 f6                	xor    esi,esi
c000c2c0:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000c2c4:	01 f2                	add    edx,esi
c000c2c6:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000c2ca:	7d 1a                	jge    c000c2e6 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000c2cc:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c2cf:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000c2d2:	46                   	inc    esi
c000c2d3:	51                   	push   ecx
c000c2d4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000c2d8:	52                   	push   edx
c000c2d9:	55                   	push   ebp
c000c2da:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000c2dd:	83 c4 10             	add    esp,0x10
c000c2e0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c2e4:	eb da                	jmp    c000c2c0 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000c2e6:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000c2ea:	47                   	inc    edi
c000c2eb:	eb c5                	jmp    c000c2b2 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000c2ed:	83 c4 1c             	add    esp,0x1c
c000c2f0:	5b                   	pop    ebx
c000c2f1:	5e                   	pop    esi
c000c2f2:	5f                   	pop    edi
c000c2f3:	5d                   	pop    ebp
c000c2f4:	c3                   	ret    
c000c2f5:	90                   	nop

c000c2f6 <Video::blit(unsigned int*, int, int, int, int)>:
c000c2f6:	55                   	push   ebp
c000c2f7:	ba 00 00 00 00       	mov    edx,0x0
c000c2fc:	57                   	push   edi
c000c2fd:	56                   	push   esi
c000c2fe:	53                   	push   ebx
c000c2ff:	83 ec 1c             	sub    esp,0x1c
c000c302:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c306:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000c30a:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000c30e:	85 c0                	test   eax,eax
c000c310:	0f 49 d0             	cmovns edx,eax
c000c313:	8d 1c 95 00 00 00 00 	lea    ebx,[edx*4+0x0]
c000c31a:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000c31e:	89 eb                	mov    ebx,ebp
c000c320:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000c324:	01 ea                	add    edx,ebp
c000c326:	39 da                	cmp    edx,ebx
c000c328:	7e 54                	jle    c000c37e <Video::blit(unsigned int*, int, int, int, int)+0x88>
c000c32a:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000c330:	7c 4c                	jl     c000c37e <Video::blit(unsigned int*, int, int, int, int)+0x88>
c000c332:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000c336:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000c33a:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000c33e:	01 c1                	add    ecx,eax
c000c340:	39 f9                	cmp    ecx,edi
c000c342:	7e 2f                	jle    c000c373 <Video::blit(unsigned int*, int, int, int, int)+0x7d>
c000c344:	83 c2 04             	add    edx,0x4
c000c347:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000c34d:	7c 21                	jl     c000c370 <Video::blit(unsigned int*, int, int, int, int)+0x7a>
c000c34f:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c353:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000c355:	ff 72 fc             	push   DWORD PTR [edx-0x4]
c000c358:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000c35c:	55                   	push   ebp
c000c35d:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000c361:	56                   	push   esi
c000c362:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000c365:	83 c4 10             	add    esp,0x10
c000c368:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c36c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c370:	47                   	inc    edi
c000c371:	eb c7                	jmp    c000c33a <Video::blit(unsigned int*, int, int, int, int)+0x44>
c000c373:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000c377:	43                   	inc    ebx
c000c378:	01 7c 24 34          	add    DWORD PTR [esp+0x34],edi
c000c37c:	eb a2                	jmp    c000c320 <Video::blit(unsigned int*, int, int, int, int)+0x2a>
c000c37e:	83 c4 1c             	add    esp,0x1c
c000c381:	5b                   	pop    ebx
c000c382:	5e                   	pop    esi
c000c383:	5f                   	pop    edi
c000c384:	5d                   	pop    ebp
c000c385:	c3                   	ret    

c000c386 <Video::clearScreen(unsigned int)>:
c000c386:	83 ec 14             	sub    esp,0x14
c000c389:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c38d:	8b 10                	mov    edx,DWORD PTR [eax]
c000c38f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c393:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c000c399:	ff b0 58 01 00 00    	push   DWORD PTR [eax+0x158]
c000c39f:	6a 00                	push   0x0
c000c3a1:	6a 00                	push   0x0
c000c3a3:	50                   	push   eax
c000c3a4:	ff 52 28             	call   DWORD PTR [edx+0x28]
c000c3a7:	83 c4 2c             	add    esp,0x2c
c000c3aa:	c3                   	ret    
c000c3ab:	90                   	nop

c000c3ac <Video::putpixel(int, int, unsigned int)>:
c000c3ac:	c7 44 24 04 90 ae 02 c0 	mov    DWORD PTR [esp+0x4],0xc002ae90
c000c3b4:	e9 a7 41 00 00       	jmp    c0010560 <KePanic(char const*)>
c000c3b9:	90                   	nop

c000c3ba <Video::readPixelApprox(int, int)>:
c000c3ba:	83 ec 18             	sub    esp,0x18
c000c3bd:	68 b1 ae 02 c0       	push   0xc002aeb1
c000c3c2:	e8 99 41 00 00       	call   c0010560 <KePanic(char const*)>
c000c3c7:	31 c0                	xor    eax,eax
c000c3c9:	83 c4 1c             	add    esp,0x1c
c000c3cc:	c3                   	ret    
c000c3cd:	90                   	nop

c000c3ce <Video::Video(char const*)>:
c000c3ce:	83 ec 0c             	sub    esp,0xc
c000c3d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c3d5:	83 ec 08             	sub    esp,0x8
c000c3d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3dc:	50                   	push   eax
c000c3dd:	e8 9e e1 ff ff       	call   c000a580 <Device::Device(char const*)>
c000c3e2:	83 c4 10             	add    esp,0x10
c000c3e5:	ba 54 af 02 c0       	mov    edx,0xc002af54
c000c3ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c3ee:	89 10                	mov    DWORD PTR [eax],edx
c000c3f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c3f4:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000c3fe:	90                   	nop
c000c3ff:	83 c4 0c             	add    esp,0xc
c000c402:	c3                   	ret    
c000c403:	90                   	nop

c000c404 <Video::~Video()>:
c000c404:	83 ec 0c             	sub    esp,0xc
c000c407:	ba 54 af 02 c0       	mov    edx,0xc002af54
c000c40c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c410:	89 10                	mov    DWORD PTR [eax],edx
c000c412:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c416:	83 ec 0c             	sub    esp,0xc
c000c419:	50                   	push   eax
c000c41a:	e8 01 df ff ff       	call   c000a320 <Device::~Device()>
c000c41f:	83 c4 10             	add    esp,0x10
c000c422:	90                   	nop
c000c423:	83 c4 0c             	add    esp,0xc
c000c426:	c3                   	ret    
c000c427:	90                   	nop

c000c428 <Video::~Video()>:
c000c428:	83 ec 0c             	sub    esp,0xc
c000c42b:	83 ec 0c             	sub    esp,0xc
c000c42e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c432:	e8 cd ff ff ff       	call   c000c404 <Video::~Video()>
c000c437:	83 c4 10             	add    esp,0x10
c000c43a:	83 ec 08             	sub    esp,0x8
c000c43d:	68 64 11 00 00       	push   0x1164
c000c442:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c446:	e8 c1 18 00 00       	call   c000dd0c <operator delete(void*, unsigned long)>
c000c44b:	83 c4 10             	add    esp,0x10
c000c44e:	83 c4 0c             	add    esp,0xc
c000c451:	c3                   	ret    

c000c452 <Video::isMonochrome()>:
c000c452:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c456:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000c45c:	c3                   	ret    
c000c45d:	90                   	nop

c000c45e <Video::getWidth()>:
c000c45e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c462:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000c468:	c3                   	ret    
c000c469:	90                   	nop

c000c46a <Video::getHeight()>:
c000c46a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c46e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000c474:	c3                   	ret    
c000c475:	90                   	nop

c000c476 <Video::savePixelsInSquare(int, int)>:
c000c476:	55                   	push   ebp
c000c477:	57                   	push   edi
c000c478:	56                   	push   esi
c000c479:	53                   	push   ebx
c000c47a:	83 ec 1c             	sub    esp,0x1c
c000c47d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000c481:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000c485:	8d 83 00 10 00 00    	lea    eax,[ebx+0x1000]
c000c48b:	89 de                	mov    esi,ebx
c000c48d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c491:	53                   	push   ebx
c000c492:	e8 d3 ff ff ff       	call   c000c46a <Video::getHeight()>
c000c497:	59                   	pop    ecx
c000c498:	39 c7                	cmp    edi,eax
c000c49a:	7d 36                	jge    c000c4d2 <Video::savePixelsInSquare(int, int)+0x5c>
c000c49c:	31 ed                	xor    ebp,ebp
c000c49e:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000c4a2:	53                   	push   ebx
c000c4a3:	01 e9                	add    ecx,ebp
c000c4a5:	e8 b4 ff ff ff       	call   c000c45e <Video::getWidth()>
c000c4aa:	5a                   	pop    edx
c000c4ab:	39 c8                	cmp    eax,ecx
c000c4ad:	7e 19                	jle    c000c4c8 <Video::savePixelsInSquare(int, int)+0x52>
c000c4af:	50                   	push   eax
c000c4b0:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c4b2:	57                   	push   edi
c000c4b3:	51                   	push   ecx
c000c4b4:	53                   	push   ebx
c000c4b5:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000c4b8:	83 c4 10             	add    esp,0x10
c000c4bb:	89 84 ae 64 01 00 00 	mov    DWORD PTR [esi+ebp*4+0x164],eax
c000c4c2:	45                   	inc    ebp
c000c4c3:	83 fd 20             	cmp    ebp,0x20
c000c4c6:	75 d6                	jne    c000c49e <Video::savePixelsInSquare(int, int)+0x28>
c000c4c8:	83 ee 80             	sub    esi,0xffffff80
c000c4cb:	47                   	inc    edi
c000c4cc:	3b 74 24 0c          	cmp    esi,DWORD PTR [esp+0xc]
c000c4d0:	75 bf                	jne    c000c491 <Video::savePixelsInSquare(int, int)+0x1b>
c000c4d2:	8d 83 64 01 00 00    	lea    eax,[ebx+0x164]
c000c4d8:	83 c4 1c             	add    esp,0x1c
c000c4db:	5b                   	pop    ebx
c000c4dc:	5e                   	pop    esi
c000c4dd:	5f                   	pop    edi
c000c4de:	5d                   	pop    ebp
c000c4df:	c3                   	ret    

c000c4e0 <Video::drawCursor(int, int, unsigned int*, int)>:
c000c4e0:	55                   	push   ebp
c000c4e1:	57                   	push   edi
c000c4e2:	56                   	push   esi
c000c4e3:	53                   	push   ebx
c000c4e4:	83 ec 2c             	sub    esp,0x2c
c000c4e7:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000c4eb:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000c4ef:	83 f8 01             	cmp    eax,0x1
c000c4f2:	19 c9                	sbb    ecx,ecx
c000c4f4:	31 db                	xor    ebx,ebx
c000c4f6:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000c4fa:	f7 54 24 14          	not    DWORD PTR [esp+0x14]
c000c4fe:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000c502:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000c50a:	81 64 24 14 ff ff ff 00 	and    DWORD PTR [esp+0x14],0xffffff
c000c512:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000c516:	01 d8                	add    eax,ebx
c000c518:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c51c:	56                   	push   esi
c000c51d:	e8 48 ff ff ff       	call   c000c46a <Video::getHeight()>
c000c522:	59                   	pop    ecx
c000c523:	3b 44 24 10          	cmp    eax,DWORD PTR [esp+0x10]
c000c527:	0f 8e 80 00 00 00    	jle    c000c5ad <Video::drawCursor(int, int, unsigned int*, int)+0xcd>
c000c52d:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000c531:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000c534:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c538:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000c53c:	8b ac 98 80 00 00 00 	mov    ebp,DWORD PTR [eax+ebx*4+0x80]
c000c543:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c547:	09 e8                	or     eax,ebp
c000c549:	74 47                	je     c000c592 <Video::drawCursor(int, int, unsigned int*, int)+0xb2>
c000c54b:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000c54f:	89 f8                	mov    eax,edi
c000c551:	83 c0 1f             	add    eax,0x1f
c000c554:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000c558:	56                   	push   esi
c000c559:	e8 00 ff ff ff       	call   c000c45e <Video::getWidth()>
c000c55e:	5a                   	pop    edx
c000c55f:	39 c7                	cmp    edi,eax
c000c561:	7d 2f                	jge    c000c592 <Video::drawCursor(int, int, unsigned int*, int)+0xb2>
c000c563:	f7 c5 01 00 00 00    	test   ebp,0x1
c000c569:	74 33                	je     c000c59e <Video::drawCursor(int, int, unsigned int*, int)+0xbe>
c000c56b:	8b 06                	mov    eax,DWORD PTR [esi]
c000c56d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c571:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c575:	57                   	push   edi
c000c576:	56                   	push   esi
c000c577:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000c57a:	83 c4 10             	add    esp,0x10
c000c57d:	d1 ed                	shr    ebp,1
c000c57f:	d1 6c 24 0c          	shr    DWORD PTR [esp+0xc],1
c000c583:	39 7c 24 1c          	cmp    DWORD PTR [esp+0x1c],edi
c000c587:	74 09                	je     c000c592 <Video::drawCursor(int, int, unsigned int*, int)+0xb2>
c000c589:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c58d:	47                   	inc    edi
c000c58e:	09 e8                	or     eax,ebp
c000c590:	75 c6                	jne    c000c558 <Video::drawCursor(int, int, unsigned int*, int)+0x78>
c000c592:	43                   	inc    ebx
c000c593:	83 fb 20             	cmp    ebx,0x20
c000c596:	0f 85 76 ff ff ff    	jne    c000c512 <Video::drawCursor(int, int, unsigned int*, int)+0x32>
c000c59c:	eb 0f                	jmp    c000c5ad <Video::drawCursor(int, int, unsigned int*, int)+0xcd>
c000c59e:	f6 44 24 0c 01       	test   BYTE PTR [esp+0xc],0x1
c000c5a3:	74 d8                	je     c000c57d <Video::drawCursor(int, int, unsigned int*, int)+0x9d>
c000c5a5:	8b 06                	mov    eax,DWORD PTR [esi]
c000c5a7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c5ab:	eb c4                	jmp    c000c571 <Video::drawCursor(int, int, unsigned int*, int)+0x91>
c000c5ad:	83 c4 2c             	add    esp,0x2c
c000c5b0:	5b                   	pop    ebx
c000c5b1:	5e                   	pop    esi
c000c5b2:	5f                   	pop    edi
c000c5b3:	5d                   	pop    ebp
c000c5b4:	c3                   	ret    
c000c5b5:	90                   	nop

c000c5b6 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000c5b6:	55                   	push   ebp
c000c5b7:	57                   	push   edi
c000c5b8:	56                   	push   esi
c000c5b9:	53                   	push   ebx
c000c5ba:	83 ec 48             	sub    esp,0x48
c000c5bd:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000c5c1:	0f b6 43 0d          	movzx  eax,BYTE PTR [ebx+0xd]
c000c5c5:	0f b6 53 0c          	movzx  edx,BYTE PTR [ebx+0xc]
c000c5c9:	c1 e0 08             	shl    eax,0x8
c000c5cc:	01 d0                	add    eax,edx
c000c5ce:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c000c5d2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c5d6:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c000c5da:	c1 e0 08             	shl    eax,0x8
c000c5dd:	01 d0                	add    eax,edx
c000c5df:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c5e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c5e7:	0f af 44 24 14       	imul   eax,DWORD PTR [esp+0x14]
c000c5ec:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c5f0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c5f4:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000c5fb:	50                   	push   eax
c000c5fc:	e8 0b 3b 00 00       	call   c001010c <malloc>
c000c601:	83 c4 10             	add    esp,0x10
c000c604:	85 c0                	test   eax,eax
c000c606:	89 c5                	mov    ebp,eax
c000c608:	75 10                	jne    c000c61a <Video::tgaParse(unsigned char*, int, int*, int*)+0x64>
c000c60a:	83 ec 0c             	sub    esp,0xc
c000c60d:	68 dc ae 02 c0       	push   0xc002aedc
c000c612:	e8 49 3f 00 00       	call   c0010560 <KePanic(char const*)>
c000c617:	83 c4 10             	add    esp,0x10
c000c61a:	52                   	push   edx
c000c61b:	bf 12 00 00 00       	mov    edi,0x12
c000c620:	52                   	push   edx
c000c621:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000c625:	50                   	push   eax
c000c626:	68 ec ae 02 c0       	push   0xc002aeec
c000c62b:	e8 36 a9 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000c630:	8a 43 11             	mov    al,BYTE PTR [ebx+0x11]
c000c633:	83 e0 20             	and    eax,0x20
c000c636:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c000c63a:	85 c0                	test   eax,eax
c000c63c:	59                   	pop    ecx
c000c63d:	0f 94 c0             	sete   al
c000c640:	0f b6 c0             	movzx  eax,al
c000c643:	5e                   	pop    esi
c000c644:	50                   	push   eax
c000c645:	68 f6 ae 02 c0       	push   0xc002aef6
c000c64a:	e8 17 a9 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000c64f:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000c653:	83 c4 10             	add    esp,0x10
c000c656:	85 c0                	test   eax,eax
c000c658:	89 c2                	mov    edx,eax
c000c65a:	74 11                	je     c000c66d <Video::tgaParse(unsigned char*, int, int*, int*)+0xb7>
c000c65c:	0f b6 7b 07          	movzx  edi,BYTE PTR [ebx+0x7]
c000c660:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000c664:	c1 ff 03             	sar    edi,0x3
c000c667:	0f af f9             	imul   edi,ecx
c000c66a:	83 c7 12             	add    edi,0x12
c000c66d:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c000c672:	74 07                	je     c000c67b <Video::tgaParse(unsigned char*, int, int*, int*)+0xc5>
c000c674:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000c679:	75 12                	jne    c000c68d <Video::tgaParse(unsigned char*, int, int*, int*)+0xd7>
c000c67b:	83 ec 0c             	sub    esp,0xc
c000c67e:	68 04 af 02 c0       	push   0xc002af04
c000c683:	e8 de a8 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000c688:	e9 aa 02 00 00       	jmp    c000c937 <Video::tgaParse(unsigned char*, int, int*, int*)+0x381>
c000c68d:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000c691:	83 f9 02             	cmp    ecx,0x2
c000c694:	74 0e                	je     c000c6a4 <Video::tgaParse(unsigned char*, int, int*, int*)+0xee>
c000c696:	83 f9 0a             	cmp    ecx,0xa
c000c699:	0f 84 d1 00 00 00    	je     c000c770 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1ba>
c000c69f:	e9 7e 02 00 00       	jmp    c000c922 <Video::tgaParse(unsigned char*, int, int*, int*)+0x36c>
c000c6a4:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000c6a9:	75 0e                	jne    c000c6b9 <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c000c6ab:	84 d2                	test   dl,dl
c000c6ad:	75 0a                	jne    c000c6b9 <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c000c6af:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000c6b2:	83 e8 18             	sub    eax,0x18
c000c6b5:	a8 f7                	test   al,0xf7
c000c6b7:	74 0d                	je     c000c6c6 <Video::tgaParse(unsigned char*, int, int*, int*)+0x110>
c000c6b9:	83 ec 0c             	sub    esp,0xc
c000c6bc:	68 19 af 02 c0       	push   0xc002af19
c000c6c1:	e9 64 02 00 00       	jmp    c000c92a <Video::tgaParse(unsigned char*, int, int*, int*)+0x374>
c000c6c6:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c6ce:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c000c6d3:	31 c0                	xor    eax,eax
c000c6d5:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000c6d9:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000c6e1:	89 c6                	mov    esi,eax
c000c6e3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000c6e8:	75 15                	jne    c000c6ff <Video::tgaParse(unsigned char*, int, int*, int*)+0x149>
c000c6ea:	99                   	cdq    
c000c6eb:	f7 7c 24 04          	idiv   DWORD PTR [esp+0x4]
c000c6ef:	85 d2                	test   edx,edx
c000c6f1:	75 0c                	jne    c000c6ff <Video::tgaParse(unsigned char*, int, int*, int*)+0x149>
c000c6f3:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000c6f7:	29 c6                	sub    esi,eax
c000c6f9:	4e                   	dec    esi
c000c6fa:	0f af 74 24 04       	imul   esi,DWORD PTR [esp+0x4]
c000c6ff:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000c703:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000c70b:	75 0c                	jne    c000c719 <Video::tgaParse(unsigned char*, int, int*, int*)+0x163>
c000c70d:	0f b6 54 3b 03       	movzx  edx,BYTE PTR [ebx+edi*1+0x3]
c000c712:	c1 e2 18             	shl    edx,0x18
c000c715:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c719:	0f b6 4c 3b 02       	movzx  ecx,BYTE PTR [ebx+edi*1+0x2]
c000c71e:	8d 46 01             	lea    eax,[esi+0x1]
c000c721:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c000c725:	c1 e1 10             	shl    ecx,0x10
c000c728:	89 ca                	mov    edx,ecx
c000c72a:	0f b6 4c 3b 01       	movzx  ecx,BYTE PTR [ebx+edi*1+0x1]
c000c72f:	c1 e1 08             	shl    ecx,0x8
c000c732:	09 d1                	or     ecx,edx
c000c734:	0f b6 14 3b          	movzx  edx,BYTE PTR [ebx+edi*1]
c000c738:	09 d1                	or     ecx,edx
c000c73a:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c000c73e:	89 4c b5 00          	mov    DWORD PTR [ebp+esi*4+0x0],ecx
c000c742:	0f b6 53 10          	movzx  edx,BYTE PTR [ebx+0x10]
c000c746:	c1 fa 03             	sar    edx,0x3
c000c749:	01 d7                	add    edi,edx
c000c74b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c74f:	39 54 24 04          	cmp    DWORD PTR [esp+0x4],edx
c000c753:	7e 04                	jle    c000c759 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1a3>
c000c755:	89 c6                	mov    esi,eax
c000c757:	eb 8a                	jmp    c000c6e3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x12d>
c000c759:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000c75d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c761:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c000c765:	0f 8f 6e ff ff ff    	jg     c000c6d9 <Video::tgaParse(unsigned char*, int, int*, int*)+0x123>
c000c76b:	e9 ce 01 00 00       	jmp    c000c93e <Video::tgaParse(unsigned char*, int, int*, int*)+0x388>
c000c770:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000c775:	75 0e                	jne    c000c785 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1cf>
c000c777:	85 c0                	test   eax,eax
c000c779:	75 0a                	jne    c000c785 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1cf>
c000c77b:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000c77e:	83 e8 18             	sub    eax,0x18
c000c781:	a8 f7                	test   al,0xf7
c000c783:	74 0d                	je     c000c792 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1dc>
c000c785:	83 ec 0c             	sub    esp,0xc
c000c788:	68 27 af 02 c0       	push   0xc002af27
c000c78d:	e9 98 01 00 00       	jmp    c000c92a <Video::tgaParse(unsigned char*, int, int*, int*)+0x374>
c000c792:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000c79a:	31 c9                	xor    ecx,ecx
c000c79c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000c7a4:	3b 7c 24 58          	cmp    edi,DWORD PTR [esp+0x58]
c000c7a8:	0f 8d 90 01 00 00    	jge    c000c93e <Video::tgaParse(unsigned char*, int, int*, int*)+0x388>
c000c7ae:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000c7b2:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c000c7b6:	0f 8e 82 01 00 00    	jle    c000c93e <Video::tgaParse(unsigned char*, int, int*, int*)+0x388>
c000c7bc:	0f b6 14 3b          	movzx  edx,BYTE PTR [ebx+edi*1]
c000c7c0:	8d 77 01             	lea    esi,[edi+0x1]
c000c7c3:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c7c7:	83 fa 7f             	cmp    edx,0x7f
c000c7ca:	89 d0                	mov    eax,edx
c000c7cc:	0f 8e a3 00 00 00    	jle    c000c875 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2bf>
c000c7d2:	83 e0 7f             	and    eax,0x7f
c000c7d5:	31 d2                	xor    edx,edx
c000c7d7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c7db:	40                   	inc    eax
c000c7dc:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000c7e0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000c7e4:	75 08                	jne    c000c7ee <Video::tgaParse(unsigned char*, int, int*, int*)+0x238>
c000c7e6:	0f b6 54 3b 04       	movzx  edx,BYTE PTR [ebx+edi*1+0x4]
c000c7eb:	c1 e2 18             	shl    edx,0x18
c000c7ee:	0f b6 44 3b 03       	movzx  eax,BYTE PTR [ebx+edi*1+0x3]
c000c7f3:	c1 e0 10             	shl    eax,0x10
c000c7f6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c7fa:	0f b6 44 3b 02       	movzx  eax,BYTE PTR [ebx+edi*1+0x2]
c000c7ff:	0f b6 3c 33          	movzx  edi,BYTE PTR [ebx+esi*1]
c000c803:	c1 e0 08             	shl    eax,0x8
c000c806:	0b 44 24 24          	or     eax,DWORD PTR [esp+0x24]
c000c80a:	09 f8                	or     eax,edi
c000c80c:	31 ff                	xor    edi,edi
c000c80e:	09 d0                	or     eax,edx
c000c810:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c814:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c000c819:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c81d:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000c822:	75 1d                	jne    c000c841 <Video::tgaParse(unsigned char*, int, int*, int*)+0x28b>
c000c824:	89 c8                	mov    eax,ecx
c000c826:	99                   	cdq    
c000c827:	f7 7c 24 04          	idiv   DWORD PTR [esp+0x4]
c000c82b:	85 d2                	test   edx,edx
c000c82d:	75 12                	jne    c000c841 <Video::tgaParse(unsigned char*, int, int*, int*)+0x28b>
c000c82f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c833:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c000c837:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000c83b:	49                   	dec    ecx
c000c83c:	0f af 4c 24 04       	imul   ecx,DWORD PTR [esp+0x4]
c000c841:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c845:	8d 51 01             	lea    edx,[ecx+0x1]
c000c848:	39 7c 24 18          	cmp    DWORD PTR [esp+0x18],edi
c000c84c:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c000c850:	8d 47 01             	lea    eax,[edi+0x1]
c000c853:	7e 06                	jle    c000c85b <Video::tgaParse(unsigned char*, int, int*, int*)+0x2a5>
c000c855:	89 c7                	mov    edi,eax
c000c857:	89 d1                	mov    ecx,edx
c000c859:	eb c2                	jmp    c000c81d <Video::tgaParse(unsigned char*, int, int*, int*)+0x267>
c000c85b:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000c85f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000c863:	01 7c 24 10          	add    DWORD PTR [esp+0x10],edi
c000c867:	c1 f8 03             	sar    eax,0x3
c000c86a:	01 c6                	add    esi,eax
c000c86c:	89 d1                	mov    ecx,edx
c000c86e:	89 f7                	mov    edi,esi
c000c870:	e9 2f ff ff ff       	jmp    c000c7a4 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1ee>
c000c875:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000c87d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c881:	40                   	inc    eax
c000c882:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c886:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c000c88b:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c88f:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c000c894:	75 1d                	jne    c000c8b3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2fd>
c000c896:	89 c8                	mov    eax,ecx
c000c898:	99                   	cdq    
c000c899:	f7 7c 24 04          	idiv   DWORD PTR [esp+0x4]
c000c89d:	85 d2                	test   edx,edx
c000c89f:	75 12                	jne    c000c8b3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2fd>
c000c8a1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c8a5:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c000c8a9:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000c8ad:	49                   	dec    ecx
c000c8ae:	0f af 4c 24 04       	imul   ecx,DWORD PTR [esp+0x4]
c000c8b3:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000c8b7:	c7 44 24 24 00 00 00 ff 	mov    DWORD PTR [esp+0x24],0xff000000
c000c8bf:	75 0c                	jne    c000c8cd <Video::tgaParse(unsigned char*, int, int*, int*)+0x317>
c000c8c1:	0f b6 7c 33 03       	movzx  edi,BYTE PTR [ebx+esi*1+0x3]
c000c8c6:	c1 e7 18             	shl    edi,0x18
c000c8c9:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000c8cd:	0f b6 44 33 02       	movzx  eax,BYTE PTR [ebx+esi*1+0x2]
c000c8d2:	8d 51 01             	lea    edx,[ecx+0x1]
c000c8d5:	c1 e0 10             	shl    eax,0x10
c000c8d8:	89 c7                	mov    edi,eax
c000c8da:	0f b6 44 33 01       	movzx  eax,BYTE PTR [ebx+esi*1+0x1]
c000c8df:	c1 e0 08             	shl    eax,0x8
c000c8e2:	09 f8                	or     eax,edi
c000c8e4:	0f b6 3c 33          	movzx  edi,BYTE PTR [ebx+esi*1]
c000c8e8:	09 f8                	or     eax,edi
c000c8ea:	0b 44 24 24          	or     eax,DWORD PTR [esp+0x24]
c000c8ee:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c000c8f2:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000c8f6:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000c8fa:	c1 f8 03             	sar    eax,0x3
c000c8fd:	01 c6                	add    esi,eax
c000c8ff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c903:	40                   	inc    eax
c000c904:	39 4c 24 18          	cmp    DWORD PTR [esp+0x18],ecx
c000c908:	7e 0b                	jle    c000c915 <Video::tgaParse(unsigned char*, int, int*, int*)+0x35f>
c000c90a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000c90e:	89 d1                	mov    ecx,edx
c000c910:	e9 7a ff ff ff       	jmp    c000c88f <Video::tgaParse(unsigned char*, int, int*, int*)+0x2d9>
c000c915:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000c919:	01 7c 24 10          	add    DWORD PTR [esp+0x10],edi
c000c91d:	e9 4a ff ff ff       	jmp    c000c86c <Video::tgaParse(unsigned char*, int, int*, int*)+0x2b6>
c000c922:	50                   	push   eax
c000c923:	50                   	push   eax
c000c924:	51                   	push   ecx
c000c925:	68 36 af 02 c0       	push   0xc002af36
c000c92a:	e8 37 a6 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000c92f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000c932:	e8 e5 37 00 00       	call   c001011c <free>
c000c937:	83 c4 10             	add    esp,0x10
c000c93a:	31 ed                	xor    ebp,ebp
c000c93c:	eb 14                	jmp    c000c952 <Video::tgaParse(unsigned char*, int, int*, int*)+0x39c>
c000c93e:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000c942:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c000c946:	89 18                	mov    DWORD PTR [eax],ebx
c000c948:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000c94c:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000c950:	89 18                	mov    DWORD PTR [eax],ebx
c000c952:	83 c4 3c             	add    esp,0x3c
c000c955:	89 e8                	mov    eax,ebp
c000c957:	5b                   	pop    ebx
c000c958:	5e                   	pop    esi
c000c959:	5f                   	pop    edi
c000c95a:	5d                   	pop    ebp
c000c95b:	c3                   	ret    

c000c95c <Video::putTGA(int, int, unsigned char*, int)>:
c000c95c:	55                   	push   ebp
c000c95d:	57                   	push   edi
c000c95e:	56                   	push   esi
c000c95f:	53                   	push   ebx
c000c960:	83 ec 28             	sub    esp,0x28
c000c963:	8d 44 24 18          	lea    eax,[esp+0x18]
c000c967:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000c96b:	50                   	push   eax
c000c96c:	8d 44 24 18          	lea    eax,[esp+0x18]
c000c970:	50                   	push   eax
c000c971:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000c975:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000c979:	55                   	push   ebp
c000c97a:	e8 37 fc ff ff       	call   c000c5b6 <Video::tgaParse(unsigned char*, int, int*, int*)>
c000c97f:	83 c4 20             	add    esp,0x20
c000c982:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000c986:	85 c0                	test   eax,eax
c000c988:	74 3b                	je     c000c9c5 <Video::putTGA(int, int, unsigned char*, int)+0x69>
c000c98a:	89 c6                	mov    esi,eax
c000c98c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c990:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000c994:	39 d8                	cmp    eax,ebx
c000c996:	7e 2d                	jle    c000c9c5 <Video::putTGA(int, int, unsigned char*, int)+0x69>
c000c998:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000c99c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c9a0:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000c9a4:	39 f8                	cmp    eax,edi
c000c9a6:	7e 1a                	jle    c000c9c2 <Video::putTGA(int, int, unsigned char*, int)+0x66>
c000c9a8:	83 c6 04             	add    esi,0x4
c000c9ab:	8b 46 fc             	mov    eax,DWORD PTR [esi-0x4]
c000c9ae:	85 c0                	test   eax,eax
c000c9b0:	79 0d                	jns    c000c9bf <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000c9b2:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c000c9b5:	50                   	push   eax
c000c9b6:	53                   	push   ebx
c000c9b7:	57                   	push   edi
c000c9b8:	55                   	push   ebp
c000c9b9:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000c9bc:	83 c4 10             	add    esp,0x10
c000c9bf:	47                   	inc    edi
c000c9c0:	eb da                	jmp    c000c99c <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000c9c2:	43                   	inc    ebx
c000c9c3:	eb c7                	jmp    c000c98c <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000c9c5:	83 c4 1c             	add    esp,0x1c
c000c9c8:	5b                   	pop    ebx
c000c9c9:	5e                   	pop    esi
c000c9ca:	5f                   	pop    edi
c000c9cb:	5d                   	pop    ebp
c000c9cc:	c3                   	ret    
c000c9cd:	66 90                	xchg   ax,ax
c000c9cf:	90                   	nop

c000c9d0 <ACPI::close(int, int, void*)>:
c000c9d0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000c9d5:	c3                   	ret    
c000c9d6:	66 90                	xchg   ax,ax

c000c9d8 <loadACPITables(unsigned char*)>:
c000c9d8:	57                   	push   edi
c000c9d9:	56                   	push   esi
c000c9da:	53                   	push   ebx
c000c9db:	83 ec 60             	sub    esp,0x60
c000c9de:	83 7c 24 70 00       	cmp    DWORD PTR [esp+0x70],0x0
c000c9e3:	0f 84 43 02 00 00    	je     c000cc2c <loadACPITables(unsigned char*)+0x254>
c000c9e9:	a0 80 5d 03 c0       	mov    al,ds:0xc0035d80
c000c9ee:	0f b6 c0             	movzx  eax,al
c000c9f1:	85 c0                	test   eax,eax
c000c9f3:	74 7b                	je     c000ca70 <loadACPITables(unsigned char*)+0x98>
c000c9f5:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000c9f9:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c9fd:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000ca01:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ca04:	83 e8 24             	sub    eax,0x24
c000ca07:	c1 e8 03             	shr    eax,0x3
c000ca0a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000ca0e:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000ca16:	66 90                	xchg   ax,ax
c000ca18:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000ca1c:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000ca20:	0f 8d ba 00 00 00    	jge    c000cae0 <loadACPITables(unsigned char*)+0x108>
c000ca26:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000ca2a:	83 c0 24             	add    eax,0x24
c000ca2d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000ca31:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000ca35:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000ca39:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000ca3d:	c1 e0 03             	shl    eax,0x3
c000ca40:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000ca44:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000ca48:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000ca4b:	8b 00                	mov    eax,DWORD PTR [eax]
c000ca4d:	89 c1                	mov    ecx,eax
c000ca4f:	a1 60 5b 03 c0       	mov    eax,ds:0xc0035b60
c000ca54:	8d 50 01             	lea    edx,[eax+0x1]
c000ca57:	89 15 60 5b 03 c0    	mov    DWORD PTR ds:0xc0035b60,edx
c000ca5d:	89 ca                	mov    edx,ecx
c000ca5f:	89 14 c5 84 5b 03 c0 	mov    DWORD PTR [eax*8-0x3ffca47c],edx
c000ca66:	83 44 24 5c 01       	add    DWORD PTR [esp+0x5c],0x1
c000ca6b:	eb ab                	jmp    c000ca18 <loadACPITables(unsigned char*)+0x40>
c000ca6d:	8d 76 00             	lea    esi,[esi+0x0]
c000ca70:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000ca74:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000ca78:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ca7c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ca7f:	83 e8 24             	sub    eax,0x24
c000ca82:	c1 e8 02             	shr    eax,0x2
c000ca85:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000ca89:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000ca91:	8d 76 00             	lea    esi,[esi+0x0]
c000ca94:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000ca98:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000ca9c:	7d 42                	jge    c000cae0 <loadACPITables(unsigned char*)+0x108>
c000ca9e:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000caa2:	83 c0 24             	add    eax,0x24
c000caa5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000caa9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000caad:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000cab1:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000cab5:	c1 e0 02             	shl    eax,0x2
c000cab8:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000cabc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000cac0:	8b 08                	mov    ecx,DWORD PTR [eax]
c000cac2:	a1 60 5b 03 c0       	mov    eax,ds:0xc0035b60
c000cac7:	8d 50 01             	lea    edx,[eax+0x1]
c000caca:	89 15 60 5b 03 c0    	mov    DWORD PTR ds:0xc0035b60,edx
c000cad0:	89 ca                	mov    edx,ecx
c000cad2:	89 14 c5 84 5b 03 c0 	mov    DWORD PTR [eax*8-0x3ffca47c],edx
c000cad9:	83 44 24 58 01       	add    DWORD PTR [esp+0x58],0x1
c000cade:	eb b4                	jmp    c000ca94 <loadACPITables(unsigned char*)+0xbc>
c000cae0:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000cae8:	a1 60 5b 03 c0       	mov    eax,ds:0xc0035b60
c000caed:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000caf1:	0f 8d 39 01 00 00    	jge    c000cc30 <loadACPITables(unsigned char*)+0x258>
c000caf7:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000cafb:	8b 04 c5 84 5b 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffca47c]
c000cb02:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cb06:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cb0a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cb0e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cb12:	25 ff 0f 00 00       	and    eax,0xfff
c000cb17:	89 c6                	mov    esi,eax
c000cb19:	8b 1d 90 62 03 c0    	mov    ebx,DWORD PTR ds:0xc0036290
c000cb1f:	83 ec 0c             	sub    esp,0xc
c000cb22:	6a 01                	push   0x1
c000cb24:	e8 7e 6f 00 00       	call   c0013aa7 <Virt::allocateKernelVirtualPages(int)>
c000cb29:	83 c4 10             	add    esp,0x10
c000cb2c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000cb30:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000cb36:	83 ec 0c             	sub    esp,0xc
c000cb39:	6a 01                	push   0x1
c000cb3b:	6a 01                	push   0x1
c000cb3d:	50                   	push   eax
c000cb3e:	52                   	push   edx
c000cb3f:	53                   	push   ebx
c000cb40:	e8 35 78 00 00       	call   c001437a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000cb45:	83 c4 20             	add    esp,0x20
c000cb48:	09 f0                	or     eax,esi
c000cb4a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cb4e:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000cb52:	c1 e0 03             	shl    eax,0x3
c000cb55:	05 80 5b 03 c0       	add    eax,0xc0035b80
c000cb5a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000cb5e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cb62:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cb66:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000cb6e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000cb72:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cb76:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000cb7a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000cb7e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000cb82:	89 c6                	mov    esi,eax
c000cb84:	89 d7                	mov    edi,edx
c000cb86:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000cb88:	89 c8                	mov    eax,ecx
c000cb8a:	89 fa                	mov    edx,edi
c000cb8c:	89 f3                	mov    ebx,esi
c000cb8e:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000cb92:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000cb96:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000cb9a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cb9e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000cba1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cba5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000cba9:	05 00 10 00 00       	add    eax,0x1000
c000cbae:	c1 e8 0c             	shr    eax,0xc
c000cbb1:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000cbb5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cbb9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cbbd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cbc1:	25 ff 0f 00 00       	and    eax,0xfff
c000cbc6:	89 c6                	mov    esi,eax
c000cbc8:	8b 1d 90 62 03 c0    	mov    ebx,DWORD PTR ds:0xc0036290
c000cbce:	83 ec 0c             	sub    esp,0xc
c000cbd1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000cbd5:	e8 cd 6e 00 00       	call   c0013aa7 <Virt::allocateKernelVirtualPages(int)>
c000cbda:	83 c4 10             	add    esp,0x10
c000cbdd:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000cbe1:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000cbe7:	83 ec 0c             	sub    esp,0xc
c000cbea:	6a 01                	push   0x1
c000cbec:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cbf0:	50                   	push   eax
c000cbf1:	52                   	push   edx
c000cbf2:	53                   	push   ebx
c000cbf3:	e8 82 77 00 00       	call   c001437a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000cbf8:	83 c4 20             	add    esp,0x20
c000cbfb:	09 f0                	or     eax,esi
c000cbfd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cc01:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cc05:	83 ec 0c             	sub    esp,0xc
c000cc08:	50                   	push   eax
c000cc09:	e8 97 71 00 00       	call   c0013da5 <Virt::freeKernelVirtualPages(unsigned long)>
c000cc0e:	83 c4 10             	add    esp,0x10
c000cc11:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000cc15:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000cc19:	89 14 c5 84 5b 03 c0 	mov    DWORD PTR [eax*8-0x3ffca47c],edx
c000cc20:	83 44 24 54 01       	add    DWORD PTR [esp+0x54],0x1
c000cc25:	e9 be fe ff ff       	jmp    c000cae8 <loadACPITables(unsigned char*)+0x110>
c000cc2a:	66 90                	xchg   ax,ax
c000cc2c:	90                   	nop
c000cc2d:	8d 76 00             	lea    esi,[esi+0x0]
c000cc30:	83 c4 60             	add    esp,0x60
c000cc33:	5b                   	pop    ebx
c000cc34:	5e                   	pop    esi
c000cc35:	5f                   	pop    edi
c000cc36:	c3                   	ret    
c000cc37:	90                   	nop

c000cc38 <findRSDT(unsigned char*)>:
c000cc38:	57                   	push   edi
c000cc39:	56                   	push   esi
c000cc3a:	53                   	push   ebx
c000cc3b:	83 ec 50             	sub    esp,0x50
c000cc3e:	a1 88 5d 03 c0       	mov    eax,ds:0xc0035d88
c000cc43:	85 c0                	test   eax,eax
c000cc45:	75 0d                	jne    c000cc54 <findRSDT(unsigned char*)+0x1c>
c000cc47:	b8 00 00 00 00       	mov    eax,0x0
c000cc4c:	e9 2b 01 00 00       	jmp    c000cd7c <findRSDT(unsigned char*)+0x144>
c000cc51:	8d 76 00             	lea    esi,[esi+0x0]
c000cc54:	89 e0                	mov    eax,esp
c000cc56:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000cc5a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000cc5e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cc62:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000cc6a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000cc6e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cc72:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000cc76:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000cc7a:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000cc7e:	89 c6                	mov    esi,eax
c000cc80:	89 d7                	mov    edi,edx
c000cc82:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000cc84:	89 c8                	mov    eax,ecx
c000cc86:	89 fa                	mov    edx,edi
c000cc88:	89 f3                	mov    ebx,esi
c000cc8a:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000cc8e:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000cc92:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000cc96:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000cc9a:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000cc9e:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000cca6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ccaa:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ccae:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000ccb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ccb6:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000ccba:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000ccbe:	25 ff 0f 00 00       	and    eax,0xfff
c000ccc3:	89 c6                	mov    esi,eax
c000ccc5:	8b 1d 90 62 03 c0    	mov    ebx,DWORD PTR ds:0xc0036290
c000cccb:	83 ec 0c             	sub    esp,0xc
c000ccce:	6a 02                	push   0x2
c000ccd0:	e8 d2 6d 00 00       	call   c0013aa7 <Virt::allocateKernelVirtualPages(int)>
c000ccd5:	83 c4 10             	add    esp,0x10
c000ccd8:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000ccdc:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000cce2:	83 ec 0c             	sub    esp,0xc
c000cce5:	6a 01                	push   0x1
c000cce7:	6a 02                	push   0x2
c000cce9:	50                   	push   eax
c000ccea:	52                   	push   edx
c000cceb:	53                   	push   ebx
c000ccec:	e8 89 76 00 00       	call   c001437a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ccf1:	83 c4 20             	add    esp,0x20
c000ccf4:	09 f0                	or     eax,esi
c000ccf6:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000ccfa:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ccfe:	25 ff 0f 00 00       	and    eax,0xfff
c000cd03:	89 c6                	mov    esi,eax
c000cd05:	8b 1d 90 62 03 c0    	mov    ebx,DWORD PTR ds:0xc0036290
c000cd0b:	83 ec 0c             	sub    esp,0xc
c000cd0e:	6a 02                	push   0x2
c000cd10:	e8 92 6d 00 00       	call   c0013aa7 <Virt::allocateKernelVirtualPages(int)>
c000cd15:	83 c4 10             	add    esp,0x10
c000cd18:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000cd1c:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000cd22:	83 ec 0c             	sub    esp,0xc
c000cd25:	6a 01                	push   0x1
c000cd27:	6a 02                	push   0x2
c000cd29:	50                   	push   eax
c000cd2a:	52                   	push   edx
c000cd2b:	53                   	push   ebx
c000cd2c:	e8 49 76 00 00       	call   c001437a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000cd31:	83 c4 20             	add    esp,0x20
c000cd34:	09 f0                	or     eax,esi
c000cd36:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000cd3a:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000cd3f:	85 c0                	test   eax,eax
c000cd41:	75 11                	jne    c000cd54 <findRSDT(unsigned char*)+0x11c>
c000cd43:	c6 05 80 5d 03 c0 00 	mov    BYTE PTR ds:0xc0035d80,0x0
c000cd4a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cd4e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cd52:	eb 24                	jmp    c000cd78 <findRSDT(unsigned char*)+0x140>
c000cd54:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000cd59:	83 f8 02             	cmp    eax,0x2
c000cd5c:	75 12                	jne    c000cd70 <findRSDT(unsigned char*)+0x138>
c000cd5e:	c6 05 80 5d 03 c0 01 	mov    BYTE PTR ds:0xc0035d80,0x1
c000cd65:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000cd69:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cd6d:	eb 09                	jmp    c000cd78 <findRSDT(unsigned char*)+0x140>
c000cd6f:	90                   	nop
c000cd70:	b8 00 00 00 00       	mov    eax,0x0
c000cd75:	eb 05                	jmp    c000cd7c <findRSDT(unsigned char*)+0x144>
c000cd77:	90                   	nop
c000cd78:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000cd7c:	83 c4 50             	add    esp,0x50
c000cd7f:	5b                   	pop    ebx
c000cd80:	5e                   	pop    esi
c000cd81:	5f                   	pop    edi
c000cd82:	c3                   	ret    
c000cd83:	90                   	nop

c000cd84 <findDataTable(unsigned char*, char*)>:
c000cd84:	83 ec 1c             	sub    esp,0x1c
c000cd87:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c000cd8c:	75 0a                	jne    c000cd98 <findDataTable(unsigned char*, char*)+0x14>
c000cd8e:	b8 00 00 00 00       	mov    eax,0x0
c000cd93:	eb 5f                	jmp    c000cdf4 <findDataTable(unsigned char*, char*)+0x70>
c000cd95:	8d 76 00             	lea    esi,[esi+0x0]
c000cd98:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000cda0:	a1 60 5b 03 c0       	mov    eax,ds:0xc0035b60
c000cda5:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000cda9:	7d 41                	jge    c000cdec <findDataTable(unsigned char*, char*)+0x68>
c000cdab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000cdaf:	c1 e0 03             	shl    eax,0x3
c000cdb2:	05 80 5b 03 c0       	add    eax,0xc0035b80
c000cdb7:	83 ec 04             	sub    esp,0x4
c000cdba:	6a 04                	push   0x4
c000cdbc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdc0:	50                   	push   eax
c000cdc1:	e8 ba 35 ff ff       	call   c0000380 <memcmp>
c000cdc6:	83 c4 10             	add    esp,0x10
c000cdc9:	85 c0                	test   eax,eax
c000cdcb:	0f 94 c0             	sete   al
c000cdce:	0f b6 c0             	movzx  eax,al
c000cdd1:	85 c0                	test   eax,eax
c000cdd3:	74 0f                	je     c000cde4 <findDataTable(unsigned char*, char*)+0x60>
c000cdd5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000cdd9:	8b 04 c5 84 5b 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffca47c]
c000cde0:	eb 12                	jmp    c000cdf4 <findDataTable(unsigned char*, char*)+0x70>
c000cde2:	66 90                	xchg   ax,ax
c000cde4:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c000cde9:	eb b5                	jmp    c000cda0 <findDataTable(unsigned char*, char*)+0x1c>
c000cdeb:	90                   	nop
c000cdec:	b8 00 00 00 00       	mov    eax,0x0
c000cdf1:	8d 76 00             	lea    esi,[esi+0x0]
c000cdf4:	83 c4 1c             	add    esp,0x1c
c000cdf7:	c3                   	ret    

c000cdf8 <scanMADT()>:
c000cdf8:	53                   	push   ebx
c000cdf9:	83 ec 38             	sub    esp,0x38
c000cdfc:	c7 05 88 5d 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0035d88,0x0
c000ce06:	c7 05 84 5d 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0035d84,0x0
c000ce10:	83 ec 0c             	sub    esp,0xc
c000ce13:	68 9c af 02 c0       	push   0xc002af9c
c000ce18:	e8 49 a1 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000ce1d:	83 c4 10             	add    esp,0x10
c000ce20:	e8 67 db 00 00       	call   c001a98c <HalFindRSDP()>
c000ce25:	a3 88 5d 03 c0       	mov    ds:0xc0035d88,eax
c000ce2a:	a1 88 5d 03 c0       	mov    eax,ds:0xc0035d88
c000ce2f:	85 c0                	test   eax,eax
c000ce31:	0f 84 59 04 00 00    	je     c000d290 <scanMADT()+0x498>
c000ce37:	83 ec 0c             	sub    esp,0xc
c000ce3a:	68 aa af 02 c0       	push   0xc002afaa
c000ce3f:	e8 22 a1 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000ce44:	83 c4 10             	add    esp,0x10
c000ce47:	a1 88 5d 03 c0       	mov    eax,ds:0xc0035d88
c000ce4c:	83 ec 0c             	sub    esp,0xc
c000ce4f:	50                   	push   eax
c000ce50:	e8 e3 fd ff ff       	call   c000cc38 <findRSDT(unsigned char*)>
c000ce55:	83 c4 10             	add    esp,0x10
c000ce58:	a3 84 5d 03 c0       	mov    ds:0xc0035d84,eax
c000ce5d:	a1 84 5d 03 c0       	mov    eax,ds:0xc0035d84
c000ce62:	85 c0                	test   eax,eax
c000ce64:	0f 84 2a 04 00 00    	je     c000d294 <scanMADT()+0x49c>
c000ce6a:	8b 15 84 5d 03 c0    	mov    edx,DWORD PTR ds:0xc0035d84
c000ce70:	a1 88 5d 03 c0       	mov    eax,ds:0xc0035d88
c000ce75:	83 ec 04             	sub    esp,0x4
c000ce78:	52                   	push   edx
c000ce79:	50                   	push   eax
c000ce7a:	68 50 b1 02 c0       	push   0xc002b150
c000ce7f:	e8 e2 a0 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000ce84:	83 c4 10             	add    esp,0x10
c000ce87:	a1 84 5d 03 c0       	mov    eax,ds:0xc0035d84
c000ce8c:	83 ec 0c             	sub    esp,0xc
c000ce8f:	50                   	push   eax
c000ce90:	e8 43 fb ff ff       	call   c000c9d8 <loadACPITables(unsigned char*)>
c000ce95:	83 c4 10             	add    esp,0x10
c000ce98:	a1 84 5d 03 c0       	mov    eax,ds:0xc0035d84
c000ce9d:	83 ec 08             	sub    esp,0x8
c000cea0:	68 b9 af 02 c0       	push   0xc002afb9
c000cea5:	50                   	push   eax
c000cea6:	e8 d9 fe ff ff       	call   c000cd84 <findDataTable(unsigned char*, char*)>
c000ceab:	83 c4 10             	add    esp,0x10
c000ceae:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ceb2:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000ceb7:	0f 84 db 03 00 00    	je     c000d298 <scanMADT()+0x4a0>
c000cebd:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000cec5:	8d 76 00             	lea    esi,[esi+0x0]
c000cec8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000cecc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000cecf:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000ced3:	0f 87 c7 03 00 00    	ja     c000d2a0 <scanMADT()+0x4a8>
c000ced9:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000cee1:	0f 87 b9 03 00 00    	ja     c000d2a0 <scanMADT()+0x4a8>
c000cee7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ceeb:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000ceef:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cef3:	8d 50 01             	lea    edx,[eax+0x1]
c000cef6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cefa:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000cefe:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000cf02:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000cf06:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cf0a:	8d 50 01             	lea    edx,[eax+0x1]
c000cf0d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cf11:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000cf15:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000cf19:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000cf1d:	0f b6 44 24 22       	movzx  eax,BYTE PTR [esp+0x22]
c000cf22:	83 f8 02             	cmp    eax,0x2
c000cf25:	0f 86 71 03 00 00    	jbe    c000d29c <scanMADT()+0x4a4>
c000cf2b:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000cf30:	85 c0                	test   eax,eax
c000cf32:	75 58                	jne    c000cf8c <scanMADT()+0x194>
c000cf34:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cf38:	8d 50 01             	lea    edx,[eax+0x1]
c000cf3b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cf3f:	8a 15 80 5f 03 c0    	mov    dl,BYTE PTR ds:0xc0035f80
c000cf45:	0f b6 d2             	movzx  edx,dl
c000cf48:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000cf4c:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000cf50:	88 82 c0 5f 03 c0    	mov    BYTE PTR [edx-0x3ffca040],al
c000cf56:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cf5a:	8d 50 01             	lea    edx,[eax+0x1]
c000cf5d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cf61:	8a 15 80 5f 03 c0    	mov    dl,BYTE PTR ds:0xc0035f80
c000cf67:	8d 4a 01             	lea    ecx,[edx+0x1]
c000cf6a:	88 0d 80 5f 03 c0    	mov    BYTE PTR ds:0xc0035f80,cl
c000cf70:	0f b6 d2             	movzx  edx,dl
c000cf73:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000cf77:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000cf7b:	88 82 a0 5f 03 c0    	mov    BYTE PTR [edx-0x3ffca060],al
c000cf81:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000cf86:	e9 f1 02 00 00       	jmp    c000d27c <scanMADT()+0x484>
c000cf8b:	90                   	nop
c000cf8c:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000cf91:	83 f8 01             	cmp    eax,0x1
c000cf94:	0f 85 32 01 00 00    	jne    c000d0cc <scanMADT()+0x2d4>
c000cf9a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cf9e:	8d 50 01             	lea    edx,[eax+0x1]
c000cfa1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cfa5:	8a 15 40 5e 03 c0    	mov    dl,BYTE PTR ds:0xc0035e40
c000cfab:	0f b6 d2             	movzx  edx,dl
c000cfae:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000cfb2:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000cfb6:	88 82 60 5e 03 c0    	mov    BYTE PTR [edx-0x3ffca1a0],al
c000cfbc:	83 44 24 2c 01       	add    DWORD PTR [esp+0x2c],0x1
c000cfc1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000cfc5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cfc9:	01 d0                	add    eax,edx
c000cfcb:	83 c0 2c             	add    eax,0x2c
c000cfce:	8a 00                	mov    al,BYTE PTR [eax]
c000cfd0:	0f b6 d0             	movzx  edx,al
c000cfd3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cfd7:	8d 48 01             	lea    ecx,[eax+0x1]
c000cfda:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000cfde:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000cfe2:	0f b6 c0             	movzx  eax,al
c000cfe5:	c1 e0 08             	shl    eax,0x8
c000cfe8:	89 d1                	mov    ecx,edx
c000cfea:	09 c1                	or     ecx,eax
c000cfec:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cff0:	8d 50 02             	lea    edx,[eax+0x2]
c000cff3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000cff7:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000cffb:	0f b6 c0             	movzx  eax,al
c000cffe:	c1 e0 10             	shl    eax,0x10
c000d001:	09 c1                	or     ecx,eax
c000d003:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d007:	8d 50 03             	lea    edx,[eax+0x3]
c000d00a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d00e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000d012:	0f b6 c0             	movzx  eax,al
c000d015:	c1 e0 18             	shl    eax,0x18
c000d018:	09 c1                	or     ecx,eax
c000d01a:	89 ca                	mov    edx,ecx
c000d01c:	a0 40 5e 03 c0       	mov    al,ds:0xc0035e40
c000d021:	0f b6 c0             	movzx  eax,al
c000d024:	89 14 85 80 5e 03 c0 	mov    DWORD PTR [eax*4-0x3ffca180],edx
c000d02b:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000d030:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d034:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d038:	01 d0                	add    eax,edx
c000d03a:	83 c0 2c             	add    eax,0x2c
c000d03d:	8a 00                	mov    al,BYTE PTR [eax]
c000d03f:	0f b6 d0             	movzx  edx,al
c000d042:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d046:	8d 48 01             	lea    ecx,[eax+0x1]
c000d049:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d04d:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000d051:	0f b6 c0             	movzx  eax,al
c000d054:	c1 e0 08             	shl    eax,0x8
c000d057:	89 d1                	mov    ecx,edx
c000d059:	09 c1                	or     ecx,eax
c000d05b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d05f:	8d 50 02             	lea    edx,[eax+0x2]
c000d062:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d066:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000d06a:	0f b6 c0             	movzx  eax,al
c000d06d:	c1 e0 10             	shl    eax,0x10
c000d070:	09 c1                	or     ecx,eax
c000d072:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d076:	8d 50 03             	lea    edx,[eax+0x3]
c000d079:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d07d:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000d081:	0f b6 c0             	movzx  eax,al
c000d084:	c1 e0 18             	shl    eax,0x18
c000d087:	09 c1                	or     ecx,eax
c000d089:	89 ca                	mov    edx,ecx
c000d08b:	a0 40 5e 03 c0       	mov    al,ds:0xc0035e40
c000d090:	0f b6 c0             	movzx  eax,al
c000d093:	89 14 85 00 5f 03 c0 	mov    DWORD PTR [eax*4-0x3ffca100],edx
c000d09a:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000d09f:	a0 40 5e 03 c0       	mov    al,ds:0xc0035e40
c000d0a4:	83 c0 01             	add    eax,0x1
c000d0a7:	a2 40 5e 03 c0       	mov    ds:0xc0035e40,al
c000d0ac:	a0 40 5e 03 c0       	mov    al,ds:0xc0035e40
c000d0b1:	0f b6 c0             	movzx  eax,al
c000d0b4:	83 ec 08             	sub    esp,0x8
c000d0b7:	50                   	push   eax
c000d0b8:	68 be af 02 c0       	push   0xc002afbe
c000d0bd:	e8 a4 9e ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000d0c2:	83 c4 10             	add    esp,0x10
c000d0c5:	e9 b2 01 00 00       	jmp    c000d27c <scanMADT()+0x484>
c000d0ca:	66 90                	xchg   ax,ax
c000d0cc:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000d0d1:	83 f8 02             	cmp    eax,0x2
c000d0d4:	0f 85 ea 00 00 00    	jne    c000d1c4 <scanMADT()+0x3cc>
c000d0da:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d0de:	8d 50 01             	lea    edx,[eax+0x1]
c000d0e1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d0e5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d0e9:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000d0ed:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000d0f1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d0f5:	8d 50 01             	lea    edx,[eax+0x1]
c000d0f8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d0fc:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d100:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000d104:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000d108:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d10c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d110:	01 d0                	add    eax,edx
c000d112:	83 c0 2c             	add    eax,0x2c
c000d115:	8a 00                	mov    al,BYTE PTR [eax]
c000d117:	0f b6 d0             	movzx  edx,al
c000d11a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d11e:	8d 48 01             	lea    ecx,[eax+0x1]
c000d121:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d125:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000d129:	0f b6 c0             	movzx  eax,al
c000d12c:	c1 e0 08             	shl    eax,0x8
c000d12f:	89 d1                	mov    ecx,edx
c000d131:	09 c1                	or     ecx,eax
c000d133:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d137:	8d 50 02             	lea    edx,[eax+0x2]
c000d13a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d13e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000d142:	0f b6 c0             	movzx  eax,al
c000d145:	c1 e0 10             	shl    eax,0x10
c000d148:	09 c1                	or     ecx,eax
c000d14a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d14e:	8d 50 03             	lea    edx,[eax+0x3]
c000d151:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d155:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000d159:	0f b6 c0             	movzx  eax,al
c000d15c:	c1 e0 18             	shl    eax,0x18
c000d15f:	09 c8                	or     eax,ecx
c000d161:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000d165:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000d16a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d16e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d172:	01 d0                	add    eax,edx
c000d174:	83 c0 2c             	add    eax,0x2c
c000d177:	8a 00                	mov    al,BYTE PTR [eax]
c000d179:	0f b6 d0             	movzx  edx,al
c000d17c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d180:	8d 48 01             	lea    ecx,[eax+0x1]
c000d183:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d187:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000d18b:	0f b6 c0             	movzx  eax,al
c000d18e:	c1 e0 08             	shl    eax,0x8
c000d191:	09 d0                	or     eax,edx
c000d193:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000d198:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000d19d:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000d1a2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d1a6:	88 90 48 f5 02 c0    	mov    BYTE PTR [eax-0x3ffd0ab8],dl
c000d1ac:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000d1b1:	66 8b 54 24 1a       	mov    dx,WORD PTR [esp+0x1a]
c000d1b6:	66 89 94 00 20 5e 03 c0 	mov    WORD PTR [eax+eax*1-0x3ffca1e0],dx
c000d1be:	e9 b9 00 00 00       	jmp    c000d27c <scanMADT()+0x484>
c000d1c3:	90                   	nop
c000d1c4:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000d1c9:	83 f8 04             	cmp    eax,0x4
c000d1cc:	0f 85 9a 00 00 00    	jne    c000d26c <scanMADT()+0x474>
c000d1d2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d1d6:	8d 50 01             	lea    edx,[eax+0x1]
c000d1d9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d1dd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d1e1:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000d1e5:	0f b6 c0             	movzx  eax,al
c000d1e8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d1ec:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d1f0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d1f4:	01 d0                	add    eax,edx
c000d1f6:	83 c0 2c             	add    eax,0x2c
c000d1f9:	8a 00                	mov    al,BYTE PTR [eax]
c000d1fb:	0f b6 d0             	movzx  edx,al
c000d1fe:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d202:	8d 48 01             	lea    ecx,[eax+0x1]
c000d205:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d209:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000d20d:	0f b6 c0             	movzx  eax,al
c000d210:	c1 e0 08             	shl    eax,0x8
c000d213:	09 d0                	or     eax,edx
c000d215:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d219:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000d21e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d222:	8d 50 01             	lea    edx,[eax+0x1]
c000d225:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d229:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d22d:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000d231:	0f b6 c0             	movzx  eax,al
c000d234:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d238:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d23c:	c1 e0 08             	shl    eax,0x8
c000d23f:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000d243:	89 c1                	mov    ecx,eax
c000d245:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d249:	c1 e0 18             	shl    eax,0x18
c000d24c:	89 c3                	mov    ebx,eax
c000d24e:	a1 8c 5d 03 c0       	mov    eax,ds:0xc0035d8c
c000d253:	8d 50 01             	lea    edx,[eax+0x1]
c000d256:	89 15 8c 5d 03 c0    	mov    DWORD PTR ds:0xc0035d8c,edx
c000d25c:	09 d9                	or     ecx,ebx
c000d25e:	89 ca                	mov    edx,ecx
c000d260:	89 14 85 a0 5d 03 c0 	mov    DWORD PTR [eax*4-0x3ffca260],edx
c000d267:	eb 13                	jmp    c000d27c <scanMADT()+0x484>
c000d269:	8d 76 00             	lea    esi,[esi+0x0]
c000d26c:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000d271:	83 f8 05             	cmp    eax,0x5
c000d274:	75 06                	jne    c000d27c <scanMADT()+0x484>
c000d276:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000d27b:	90                   	nop
c000d27c:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c000d281:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d285:	01 d0                	add    eax,edx
c000d287:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d28b:	e9 38 fc ff ff       	jmp    c000cec8 <scanMADT()+0xd0>
c000d290:	90                   	nop
c000d291:	eb 0d                	jmp    c000d2a0 <scanMADT()+0x4a8>
c000d293:	90                   	nop
c000d294:	90                   	nop
c000d295:	eb 09                	jmp    c000d2a0 <scanMADT()+0x4a8>
c000d297:	90                   	nop
c000d298:	90                   	nop
c000d299:	eb 05                	jmp    c000d2a0 <scanMADT()+0x4a8>
c000d29b:	90                   	nop
c000d29c:	90                   	nop
c000d29d:	8d 76 00             	lea    esi,[esi+0x0]
c000d2a0:	83 c4 38             	add    esp,0x38
c000d2a3:	5b                   	pop    ebx
c000d2a4:	c3                   	ret    
c000d2a5:	90                   	nop
c000d2a6:	66 90                	xchg   ax,ax

c000d2a8 <ACPI::ACPI()>:
c000d2a8:	83 ec 0c             	sub    esp,0xc
c000d2ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d2af:	83 ec 08             	sub    esp,0x8
c000d2b2:	68 b7 a4 02 c0       	push   0xc002a4b7
c000d2b7:	50                   	push   eax
c000d2b8:	e8 c3 d2 ff ff       	call   c000a580 <Device::Device(char const*)>
c000d2bd:	83 c4 10             	add    esp,0x10
c000d2c0:	ba f4 b1 02 c0       	mov    edx,0xc002b1f4
c000d2c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d2c9:	89 10                	mov    DWORD PTR [eax],edx
c000d2cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d2cf:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000d2d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d2da:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000d2e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d2e8:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000d2f2:	90                   	nop
c000d2f3:	83 c4 0c             	add    esp,0xc
c000d2f6:	c3                   	ret    
c000d2f7:	90                   	nop

c000d2f8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000d2f8:	83 ec 2c             	sub    esp,0x2c
c000d2fb:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000d2ff:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000d303:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c000d307:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c000d30b:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000d310:	88 c8                	mov    al,cl
c000d312:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000d316:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000d31b:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000d323:	90                   	nop
c000d324:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d328:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000d32e:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000d332:	0f 8d b0 00 00 00    	jge    c000d3e8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xf0>
c000d338:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d33c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000d340:	83 c2 2a             	add    edx,0x2a
c000d343:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000d347:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c000d34c:	0f b7 c0             	movzx  eax,ax
c000d34f:	39 c2                	cmp    edx,eax
c000d351:	0f 85 85 00 00 00    	jne    c000d3dc <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000d357:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d35b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000d35f:	83 c2 2a             	add    edx,0x2a
c000d362:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000d366:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c000d36b:	0f b6 c0             	movzx  eax,al
c000d36e:	39 c2                	cmp    edx,eax
c000d370:	75 6a                	jne    c000d3dc <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000d372:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000d377:	85 c0                	test   eax,eax
c000d379:	74 3d                	je     c000d3b8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xc0>
c000d37b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d37f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000d383:	83 c2 2a             	add    edx,0x2a
c000d386:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000d38a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d38e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d391:	39 c2                	cmp    edx,eax
c000d393:	74 13                	je     c000d3a8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xb0>
c000d395:	83 ec 0c             	sub    esp,0xc
c000d398:	68 74 b1 02 c0       	push   0xc002b174
c000d39d:	e8 be 31 00 00       	call   c0010560 <KePanic(char const*)>
c000d3a2:	83 c4 10             	add    esp,0x10
c000d3a5:	8d 76 00             	lea    esi,[esi+0x0]
c000d3a8:	83 ec 0c             	sub    esp,0xc
c000d3ab:	68 da af 02 c0       	push   0xc002afda
c000d3b0:	e8 ab 31 00 00       	call   c0010560 <KePanic(char const*)>
c000d3b5:	83 c4 10             	add    esp,0x10
c000d3b8:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000d3bc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d3c0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000d3c4:	83 c2 2a             	add    edx,0x2a
c000d3c7:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000d3cb:	8b 02                	mov    eax,DWORD PTR [edx]
c000d3cd:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000d3d0:	89 01                	mov    DWORD PTR [ecx],eax
c000d3d2:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000d3d5:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000d3da:	66 90                	xchg   ax,ax
c000d3dc:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000d3e1:	e9 3e ff ff ff       	jmp    c000d324 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000d3e6:	66 90                	xchg   ax,ax
c000d3e8:	90                   	nop
c000d3e9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d3ed:	83 c4 2c             	add    esp,0x2c
c000d3f0:	c2 04 00             	ret    0x4
c000d3f3:	90                   	nop

c000d3f4 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000d3f4:	83 ec 1c             	sub    esp,0x1c
c000d3f7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d3fb:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000d3ff:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000d403:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000d408:	88 c8                	mov    al,cl
c000d40a:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000d40e:	88 d0                	mov    al,dl
c000d410:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000d414:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d418:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000d41e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d422:	83 c2 2a             	add    edx,0x2a
c000d425:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c000d429:	88 4c d0 0f          	mov    BYTE PTR [eax+edx*8+0xf],cl
c000d42d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d431:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000d437:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d43b:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000d43e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d442:	66 89 54 c8 0c       	mov    WORD PTR [eax+ecx*8+0xc],dx
c000d447:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d44b:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000d451:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000d455:	83 c0 01             	add    eax,0x1
c000d458:	88 c1                	mov    cl,al
c000d45a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d45e:	83 c2 2a             	add    edx,0x2a
c000d461:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000d465:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d469:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000d46f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d473:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000d476:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000d47a:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000d47e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d482:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000d488:	8d 50 01             	lea    edx,[eax+0x1]
c000d48b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d48f:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000d495:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d499:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000d49f:	3d 00 02 00 00       	cmp    eax,0x200
c000d4a4:	75 12                	jne    c000d4b8 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc4>
c000d4a6:	83 ec 0c             	sub    esp,0xc
c000d4a9:	68 e9 af 02 c0       	push   0xc002afe9
c000d4ae:	e8 ad 30 00 00       	call   c0010560 <KePanic(char const*)>
c000d4b3:	83 c4 10             	add    esp,0x10
c000d4b6:	66 90                	xchg   ax,ax
c000d4b8:	90                   	nop
c000d4b9:	83 c4 1c             	add    esp,0x1c
c000d4bc:	c3                   	ret    
c000d4bd:	90                   	nop
c000d4be:	66 90                	xchg   ax,ax

c000d4c0 <ACPI::setScreenBrightnessLevel(void*, int)>:
c000d4c0:	b8 00 00 00 00       	mov    eax,0x0
c000d4c5:	c3                   	ret    
c000d4c6:	66 90                	xchg   ax,ax

c000d4c8 <ACPI::detectPCI()>:
c000d4c8:	53                   	push   ebx
c000d4c9:	83 ec 28             	sub    esp,0x28
c000d4cc:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000d4d1:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000d4d6:	a1 84 5d 03 c0       	mov    eax,ds:0xc0035d84
c000d4db:	83 ec 08             	sub    esp,0x8
c000d4de:	68 06 b0 02 c0       	push   0xc002b006
c000d4e3:	50                   	push   eax
c000d4e4:	e8 9b f8 ff ff       	call   c000cd84 <findDataTable(unsigned char*, char*)>
c000d4e9:	83 c4 10             	add    esp,0x10
c000d4ec:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d4f0:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000d4f5:	74 0d                	je     c000d504 <ACPI::detectPCI()+0x3c>
c000d4f7:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000d4fc:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000d501:	8d 76 00             	lea    esi,[esi+0x0]
c000d504:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000d50c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000d510:	8a 00                	mov    al,BYTE PTR [eax]
c000d512:	0f b6 c0             	movzx  eax,al
c000d515:	83 f8 01             	cmp    eax,0x1
c000d518:	75 0e                	jne    c000d528 <ACPI::detectPCI()+0x60>
c000d51a:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000d51f:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000d524:	eb 2e                	jmp    c000d554 <ACPI::detectPCI()+0x8c>
c000d526:	66 90                	xchg   ax,ax
c000d528:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000d52c:	8a 00                	mov    al,BYTE PTR [eax]
c000d52e:	0f b6 c0             	movzx  eax,al
c000d531:	83 f8 02             	cmp    eax,0x2
c000d534:	75 1e                	jne    c000d554 <ACPI::detectPCI()+0x8c>
c000d536:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000d53b:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000d540:	85 c0                	test   eax,eax
c000d542:	74 10                	je     c000d554 <ACPI::detectPCI()+0x8c>
c000d544:	83 ec 0c             	sub    esp,0xc
c000d547:	68 a4 b1 02 c0       	push   0xc002b1a4
c000d54c:	e8 0f 30 00 00       	call   c0010560 <KePanic(char const*)>
c000d551:	83 c4 10             	add    esp,0x10
c000d554:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000d558:	83 f0 01             	xor    eax,0x1
c000d55b:	0f b6 c0             	movzx  eax,al
c000d55e:	85 c0                	test   eax,eax
c000d560:	74 46                	je     c000d5a8 <ACPI::detectPCI()+0xe0>
c000d562:	e8 c9 2b ff ff       	call   c0000130 <manualPCIProbe>
c000d567:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d56b:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000d570:	75 0e                	jne    c000d580 <ACPI::detectPCI()+0xb8>
c000d572:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000d577:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000d57c:	eb 2a                	jmp    c000d5a8 <ACPI::detectPCI()+0xe0>
c000d57e:	66 90                	xchg   ax,ax
c000d580:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000d585:	75 21                	jne    c000d5a8 <ACPI::detectPCI()+0xe0>
c000d587:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000d58c:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000d591:	85 c0                	test   eax,eax
c000d593:	74 13                	je     c000d5a8 <ACPI::detectPCI()+0xe0>
c000d595:	83 ec 0c             	sub    esp,0xc
c000d598:	68 a4 b1 02 c0       	push   0xc002b1a4
c000d59d:	e8 be 2f 00 00       	call   c0010560 <KePanic(char const*)>
c000d5a2:	83 c4 10             	add    esp,0x10
c000d5a5:	8d 76 00             	lea    esi,[esi+0x0]
c000d5a8:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000d5ad:	85 c0                	test   eax,eax
c000d5af:	0f 84 87 00 00 00    	je     c000d63c <ACPI::detectPCI()+0x174>
c000d5b5:	83 ec 0c             	sub    esp,0xc
c000d5b8:	68 0b b0 02 c0       	push   0xc002b00b
c000d5bd:	e8 9f 06 00 00       	call   c000dc61 <KeSetBootMessage(char const*)>
c000d5c2:	83 c4 10             	add    esp,0x10
c000d5c5:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000d5cd:	83 ec 0c             	sub    esp,0xc
c000d5d0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000d5d4:	e8 33 2b 00 00       	call   c001010c <malloc>
c000d5d9:	83 c4 10             	add    esp,0x10
c000d5dc:	89 c3                	mov    ebx,eax
c000d5de:	83 ec 0c             	sub    esp,0xc
c000d5e1:	53                   	push   ebx
c000d5e2:	e8 f3 2d 01 00       	call   c00203da <PCI::PCI()>
c000d5e7:	83 c4 10             	add    esp,0x10
c000d5ea:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000d5ee:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d5f2:	83 ec 08             	sub    esp,0x8
c000d5f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d5f9:	50                   	push   eax
c000d5fa:	e8 1f ce ff ff       	call   c000a41e <Device::addChild(Device*)>
c000d5ff:	83 c4 10             	add    esp,0x10
c000d602:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d606:	8b 00                	mov    eax,DWORD PTR [eax]
c000d608:	83 c0 08             	add    eax,0x8
c000d60b:	8b 00                	mov    eax,DWORD PTR [eax]
c000d60d:	0f b6 54 24 1e       	movzx  edx,BYTE PTR [esp+0x1e]
c000d612:	85 d2                	test   edx,edx
c000d614:	74 0a                	je     c000d620 <ACPI::detectPCI()+0x158>
c000d616:	ba 01 00 00 00       	mov    edx,0x1
c000d61b:	eb 0b                	jmp    c000d628 <ACPI::detectPCI()+0x160>
c000d61d:	8d 76 00             	lea    esi,[esi+0x0]
c000d620:	ba 02 00 00 00       	mov    edx,0x2
c000d625:	8d 76 00             	lea    esi,[esi+0x0]
c000d628:	6a 00                	push   0x0
c000d62a:	6a 00                	push   0x0
c000d62c:	52                   	push   edx
c000d62d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d631:	ff d0                	call   eax
c000d633:	83 c4 10             	add    esp,0x10
c000d636:	e9 91 00 00 00       	jmp    c000d6cc <ACPI::detectPCI()+0x204>
c000d63b:	90                   	nop
c000d63c:	83 ec 0c             	sub    esp,0xc
c000d63f:	68 23 b0 02 c0       	push   0xc002b023
c000d644:	e8 18 06 00 00       	call   c000dc61 <KeSetBootMessage(char const*)>
c000d649:	83 c4 10             	add    esp,0x10
c000d64c:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000d653:	83 ec 0c             	sub    esp,0xc
c000d656:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d65a:	e8 ad 2a 00 00       	call   c001010c <malloc>
c000d65f:	83 c4 10             	add    esp,0x10
c000d662:	89 c3                	mov    ebx,eax
c000d664:	83 ec 0c             	sub    esp,0xc
c000d667:	53                   	push   ebx
c000d668:	e8 75 39 01 00       	call   c0020fe2 <IDE::IDE()>
c000d66d:	83 c4 10             	add    esp,0x10
c000d670:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000d674:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d678:	83 ec 08             	sub    esp,0x8
c000d67b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000d67f:	50                   	push   eax
c000d680:	e8 99 cd ff ff       	call   c000a41e <Device::addChild(Device*)>
c000d685:	83 c4 10             	add    esp,0x10
c000d688:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d68c:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000d696:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d69a:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000d6a3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d6a7:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000d6b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d6b4:	8b 00                	mov    eax,DWORD PTR [eax]
c000d6b6:	83 c0 08             	add    eax,0x8
c000d6b9:	8b 00                	mov    eax,DWORD PTR [eax]
c000d6bb:	6a 00                	push   0x0
c000d6bd:	6a 00                	push   0x0
c000d6bf:	6a 00                	push   0x0
c000d6c1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6c5:	ff d0                	call   eax
c000d6c7:	83 c4 10             	add    esp,0x10
c000d6ca:	66 90                	xchg   ax,ax
c000d6cc:	90                   	nop
c000d6cd:	83 c4 28             	add    esp,0x28
c000d6d0:	5b                   	pop    ebx
c000d6d1:	c3                   	ret    
c000d6d2:	66 90                	xchg   ax,ax

c000d6d4 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000d6d4:	83 ec 0c             	sub    esp,0xc
c000d6d7:	83 ec 0c             	sub    esp,0xc
c000d6da:	68 38 b0 02 c0       	push   0xc002b038
c000d6df:	e8 7c 2e 00 00       	call   c0010560 <KePanic(char const*)>
c000d6e4:	83 c4 10             	add    esp,0x10
c000d6e7:	90                   	nop
c000d6e8:	83 c4 0c             	add    esp,0xc
c000d6eb:	c3                   	ret    

c000d6ec <ACPI::open(int, int, void*)>:
c000d6ec:	55                   	push   ebp
c000d6ed:	89 e5                	mov    ebp,esp
c000d6ef:	53                   	push   ebx
c000d6f0:	81 ec 74 01 00 00    	sub    esp,0x174
c000d6f6:	83 ec 0c             	sub    esp,0xc
c000d6f9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000d6fc:	e8 c7 fd ff ff       	call   c000d4c8 <ACPI::detectPCI()>
c000d701:	83 c4 10             	add    esp,0x10
c000d704:	83 ec 0c             	sub    esp,0xc
c000d707:	68 cc b1 02 c0       	push   0xc002b1cc
c000d70c:	e8 50 05 00 00       	call   c000dc61 <KeSetBootMessage(char const*)>
c000d711:	83 c4 10             	add    esp,0x10
c000d714:	b8 4c 05 00 00       	mov    eax,0x54c
c000d719:	8a 00                	mov    al,BYTE PTR [eax]
c000d71b:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c000d71e:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
c000d722:	83 f8 01             	cmp    eax,0x1
c000d725:	75 15                	jne    c000d73c <ACPI::open(int, int, void*)+0x50>
c000d727:	83 ec 0c             	sub    esp,0xc
c000d72a:	68 49 b0 02 c0       	push   0xc002b049
c000d72f:	e8 87 88 00 00       	call   c0015fbb <Thr::loadKernelSymbolTable(char const*)>
c000d734:	83 c4 10             	add    esp,0x10
c000d737:	eb 33                	jmp    c000d76c <ACPI::open(int, int, void*)+0x80>
c000d739:	8d 76 00             	lea    esi,[esi+0x0]
c000d73c:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
c000d740:	3d bb 00 00 00       	cmp    eax,0xbb
c000d745:	75 15                	jne    c000d75c <ACPI::open(int, int, void*)+0x70>
c000d747:	83 ec 0c             	sub    esp,0xc
c000d74a:	68 67 b0 02 c0       	push   0xc002b067
c000d74f:	e8 67 88 00 00       	call   c0015fbb <Thr::loadKernelSymbolTable(char const*)>
c000d754:	83 c4 10             	add    esp,0x10
c000d757:	eb 13                	jmp    c000d76c <ACPI::open(int, int, void*)+0x80>
c000d759:	8d 76 00             	lea    esi,[esi+0x0]
c000d75c:	83 ec 0c             	sub    esp,0xc
c000d75f:	68 85 b0 02 c0       	push   0xc002b085
c000d764:	e8 f7 2d 00 00       	call   c0010560 <KePanic(char const*)>
c000d769:	83 c4 10             	add    esp,0x10
c000d76c:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000d770:	c7 45 cc 14 01 00 00 	mov    DWORD PTR [ebp-0x34],0x114
c000d777:	83 ec 0c             	sub    esp,0xc
c000d77a:	ff 75 cc             	push   DWORD PTR [ebp-0x34]
c000d77d:	e8 8a 29 00 00       	call   c001010c <malloc>
c000d782:	83 c4 10             	add    esp,0x10
c000d785:	89 c3                	mov    ebx,eax
c000d787:	a1 58 63 03 c0       	mov    eax,ds:0xc0036358
c000d78c:	83 ec 04             	sub    esp,0x4
c000d78f:	50                   	push   eax
c000d790:	68 9f b0 02 c0       	push   0xc002b09f
c000d795:	53                   	push   ebx
c000d796:	e8 17 b4 ff ff       	call   c0008bb2 <File::File(char const*, Process*)>
c000d79b:	83 c4 10             	add    esp,0x10
c000d79e:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c000d7a1:	83 ec 08             	sub    esp,0x8
c000d7a4:	6a 01                	push   0x1
c000d7a6:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000d7a9:	e8 22 b4 ff ff       	call   c0008bd0 <File::open(FileOpenMode)>
c000d7ae:	83 c4 10             	add    esp,0x10
c000d7b1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c000d7b4:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c000d7b8:	75 12                	jne    c000d7cc <ACPI::open(int, int, void*)+0xe0>
c000d7ba:	83 ec 0c             	sub    esp,0xc
c000d7bd:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000d7c0:	e8 69 b4 ff ff       	call   c0008c2e <File::close()>
c000d7c5:	83 c4 10             	add    esp,0x10
c000d7c8:	eb 06                	jmp    c000d7d0 <ACPI::open(int, int, void*)+0xe4>
c000d7ca:	66 90                	xchg   ax,ax
c000d7cc:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d7d0:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
c000d7d4:	74 16                	je     c000d7ec <ACPI::open(int, int, void*)+0x100>
c000d7d6:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000d7d9:	8b 00                	mov    eax,DWORD PTR [eax]
c000d7db:	83 c0 08             	add    eax,0x8
c000d7de:	8b 00                	mov    eax,DWORD PTR [eax]
c000d7e0:	83 ec 0c             	sub    esp,0xc
c000d7e3:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000d7e6:	ff d0                	call   eax
c000d7e8:	83 c4 10             	add    esp,0x10
c000d7eb:	90                   	nop
c000d7ec:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c000d7ef:	83 f0 01             	xor    eax,0x1
c000d7f2:	0f b6 c0             	movzx  eax,al
c000d7f5:	85 c0                	test   eax,eax
c000d7f7:	74 27                	je     c000d820 <ACPI::open(int, int, void*)+0x134>
c000d7f9:	83 ec 0c             	sub    esp,0xc
c000d7fc:	68 bd b0 02 c0       	push   0xc002b0bd
c000d801:	e8 5b 04 00 00       	call   c000dc61 <KeSetBootMessage(char const*)>
c000d806:	83 c4 10             	add    esp,0x10
c000d809:	c7 45 e8 0c 00 00 00 	mov    DWORD PTR [ebp-0x18],0xc
c000d810:	83 ec 0c             	sub    esp,0xc
c000d813:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c000d816:	e8 b1 64 00 00       	call   c0013ccc <Virt::setupPageSwapping(int)>
c000d81b:	83 c4 10             	add    esp,0x10
c000d81e:	66 90                	xchg   ax,ax
c000d820:	83 ec 0c             	sub    esp,0xc
c000d823:	68 d8 b0 02 c0       	push   0xc002b0d8
c000d828:	e8 34 04 00 00       	call   c000dc61 <KeSetBootMessage(char const*)>
c000d82d:	83 c4 10             	add    esp,0x10
c000d830:	8d 45 b8             	lea    eax,[ebp-0x48]
c000d833:	83 ec 08             	sub    esp,0x8
c000d836:	6a 13                	push   0x13
c000d838:	50                   	push   eax
c000d839:	e8 0e cf ff ff       	call   c000a74c <getDevicesOfType(DeviceType)>
c000d83e:	83 c4 0c             	add    esp,0xc
c000d841:	8d 76 00             	lea    esi,[esi+0x0]
c000d844:	83 ec 0c             	sub    esp,0xc
c000d847:	8d 45 b8             	lea    eax,[ebp-0x48]
c000d84a:	50                   	push   eax
c000d84b:	e8 e4 b7 01 00       	call   c0029034 <LinkedList<Device>::isEmpty()>
c000d850:	83 c4 10             	add    esp,0x10
c000d853:	83 f0 01             	xor    eax,0x1
c000d856:	0f b6 c0             	movzx  eax,al
c000d859:	85 c0                	test   eax,eax
c000d85b:	0f 84 13 01 00 00    	je     c000d974 <ACPI::open(int, int, void*)+0x288>
c000d861:	83 ec 0c             	sub    esp,0xc
c000d864:	8d 45 b8             	lea    eax,[ebp-0x48]
c000d867:	50                   	push   eax
c000d868:	e8 e3 b7 01 00       	call   c0029050 <LinkedList<Device>::getFirstElement()>
c000d86d:	83 c4 10             	add    esp,0x10
c000d870:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c000d873:	83 ec 0c             	sub    esp,0xc
c000d876:	8d 45 b8             	lea    eax,[ebp-0x48]
c000d879:	50                   	push   eax
c000d87a:	e8 d9 b7 01 00       	call   c0029058 <LinkedList<Device>::removeFirst()>
c000d87f:	83 c4 10             	add    esp,0x10
c000d882:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c000d885:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000d888:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c000d88b:	b8 24 00 00 00       	mov    eax,0x24
c000d890:	83 e0 fc             	and    eax,0xfffffffc
c000d893:	89 c3                	mov    ebx,eax
c000d895:	b8 00 00 00 00       	mov    eax,0x0
c000d89a:	66 90                	xchg   ax,ax
c000d89c:	8b 94 01 18 01 00 00 	mov    edx,DWORD PTR [ecx+eax*1+0x118]
c000d8a3:	89 94 05 94 fe ff ff 	mov    DWORD PTR [ebp+eax*1-0x16c],edx
c000d8aa:	83 c0 04             	add    eax,0x4
c000d8ad:	39 d8                	cmp    eax,ebx
c000d8af:	72 eb                	jb     c000d89c <ACPI::open(int, int, void*)+0x1b0>
c000d8b1:	83 ec 08             	sub    esp,0x8
c000d8b4:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
c000d8ba:	50                   	push   eax
c000d8bb:	83 ec 24             	sub    esp,0x24
c000d8be:	89 e1                	mov    ecx,esp
c000d8c0:	b8 24 00 00 00       	mov    eax,0x24
c000d8c5:	83 e0 fc             	and    eax,0xfffffffc
c000d8c8:	89 c3                	mov    ebx,eax
c000d8ca:	b8 00 00 00 00       	mov    eax,0x0
c000d8cf:	90                   	nop
c000d8d0:	8b 94 05 94 fe ff ff 	mov    edx,DWORD PTR [ebp+eax*1-0x16c]
c000d8d7:	89 14 01             	mov    DWORD PTR [ecx+eax*1],edx
c000d8da:	83 c0 04             	add    eax,0x4
c000d8dd:	39 d8                	cmp    eax,ebx
c000d8df:	72 ef                	jb     c000d8d0 <ACPI::open(int, int, void*)+0x1e4>
c000d8e1:	e8 dc 2f 01 00       	call   c00208c2 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000d8e6:	83 c4 30             	add    esp,0x30
c000d8e9:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c000d8ec:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c000d8f0:	0f 84 4e ff ff ff    	je     c000d844 <ACPI::open(int, int, void*)+0x158>
c000d8f6:	c7 45 c8 14 01 00 00 	mov    DWORD PTR [ebp-0x38],0x114
c000d8fd:	83 ec 0c             	sub    esp,0xc
c000d900:	ff 75 c8             	push   DWORD PTR [ebp-0x38]
c000d903:	e8 04 28 00 00       	call   c001010c <malloc>
c000d908:	83 c4 10             	add    esp,0x10
c000d90b:	89 c3                	mov    ebx,eax
c000d90d:	a1 58 63 03 c0       	mov    eax,ds:0xc0036358
c000d912:	83 ec 04             	sub    esp,0x4
c000d915:	50                   	push   eax
c000d916:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
c000d919:	53                   	push   ebx
c000d91a:	e8 93 b2 ff ff       	call   c0008bb2 <File::File(char const*, Process*)>
c000d91f:	83 c4 10             	add    esp,0x10
c000d922:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c000d925:	83 ec 0c             	sub    esp,0xc
c000d928:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
c000d92b:	e8 64 b5 ff ff       	call   c0008e94 <File::exists()>
c000d930:	83 c4 10             	add    esp,0x10
c000d933:	0f b6 c0             	movzx  eax,al
c000d936:	85 c0                	test   eax,eax
c000d938:	74 16                	je     c000d950 <ACPI::open(int, int, void*)+0x264>
c000d93a:	83 ec 04             	sub    esp,0x4
c000d93d:	6a 00                	push   0x0
c000d93f:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c000d942:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
c000d945:	e8 1c 8e 00 00       	call   c0016766 <KeLoadAndExecuteDriver(char const*, void*, bool)>
c000d94a:	83 c4 10             	add    esp,0x10
c000d94d:	8d 76 00             	lea    esi,[esi+0x0]
c000d950:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c000d954:	0f 84 ea fe ff ff    	je     c000d844 <ACPI::open(int, int, void*)+0x158>
c000d95a:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c000d95d:	8b 00                	mov    eax,DWORD PTR [eax]
c000d95f:	83 c0 08             	add    eax,0x8
c000d962:	8b 00                	mov    eax,DWORD PTR [eax]
c000d964:	83 ec 0c             	sub    esp,0xc
c000d967:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
c000d96a:	ff d0                	call   eax
c000d96c:	83 c4 10             	add    esp,0x10
c000d96f:	e9 d0 fe ff ff       	jmp    c000d844 <ACPI::open(int, int, void*)+0x158>
c000d974:	83 ec 0c             	sub    esp,0xc
c000d977:	8d 45 b8             	lea    eax,[ebp-0x48]
c000d97a:	50                   	push   eax
c000d97b:	e8 b0 b6 01 00       	call   c0029030 <LinkedList<Device>::~LinkedList()>
c000d980:	83 c4 10             	add    esp,0x10
c000d983:	a1 08 61 03 c0       	mov    eax,ds:0xc0036108
c000d988:	83 ec 04             	sub    esp,0x4
c000d98b:	6a 00                	push   0x0
c000d98d:	50                   	push   eax
c000d98e:	68 f2 b0 02 c0       	push   0xc002b0f2
c000d993:	e8 ce 8d 00 00       	call   c0016766 <KeLoadAndExecuteDriver(char const*, void*, bool)>
c000d998:	83 c4 10             	add    esp,0x10
c000d99b:	a1 84 5d 03 c0       	mov    eax,ds:0xc0035d84
c000d9a0:	85 c0                	test   eax,eax
c000d9a2:	0f 84 e4 00 00 00    	je     c000da8c <ACPI::open(int, int, void*)+0x3a0>
c000d9a8:	a1 88 5d 03 c0       	mov    eax,ds:0xc0035d88
c000d9ad:	85 c0                	test   eax,eax
c000d9af:	0f 84 d7 00 00 00    	je     c000da8c <ACPI::open(int, int, void*)+0x3a0>
c000d9b5:	83 ec 0c             	sub    esp,0xc
c000d9b8:	68 0f b1 02 c0       	push   0xc002b10f
c000d9bd:	e8 9f 02 00 00       	call   c000dc61 <KeSetBootMessage(char const*)>
c000d9c2:	83 c4 10             	add    esp,0x10
c000d9c5:	c7 45 c4 14 01 00 00 	mov    DWORD PTR [ebp-0x3c],0x114
c000d9cc:	83 ec 0c             	sub    esp,0xc
c000d9cf:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
c000d9d2:	e8 35 27 00 00       	call   c001010c <malloc>
c000d9d7:	83 c4 10             	add    esp,0x10
c000d9da:	89 c3                	mov    ebx,eax
c000d9dc:	a1 58 63 03 c0       	mov    eax,ds:0xc0036358
c000d9e1:	83 ec 04             	sub    esp,0x4
c000d9e4:	50                   	push   eax
c000d9e5:	68 2c b1 02 c0       	push   0xc002b12c
c000d9ea:	53                   	push   ebx
c000d9eb:	e8 c2 b1 ff ff       	call   c0008bb2 <File::File(char const*, Process*)>
c000d9f0:	83 c4 10             	add    esp,0x10
c000d9f3:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c000d9f6:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c000d9fa:	74 1c                	je     c000da18 <ACPI::open(int, int, void*)+0x32c>
c000d9fc:	83 ec 0c             	sub    esp,0xc
c000d9ff:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
c000da02:	e8 8d b4 ff ff       	call   c0008e94 <File::exists()>
c000da07:	83 c4 10             	add    esp,0x10
c000da0a:	0f b6 c0             	movzx  eax,al
c000da0d:	85 c0                	test   eax,eax
c000da0f:	74 07                	je     c000da18 <ACPI::open(int, int, void*)+0x32c>
c000da11:	b0 01                	mov    al,0x1
c000da13:	eb 07                	jmp    c000da1c <ACPI::open(int, int, void*)+0x330>
c000da15:	8d 76 00             	lea    esi,[esi+0x0]
c000da18:	b0 00                	mov    al,0x0
c000da1a:	66 90                	xchg   ax,ax
c000da1c:	0f b6 c0             	movzx  eax,al
c000da1f:	85 c0                	test   eax,eax
c000da21:	74 15                	je     c000da38 <ACPI::open(int, int, void*)+0x34c>
c000da23:	83 ec 04             	sub    esp,0x4
c000da26:	6a 00                	push   0x0
c000da28:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000da2b:	68 2c b1 02 c0       	push   0xc002b12c
c000da30:	e8 31 8d 00 00       	call   c0016766 <KeLoadAndExecuteDriver(char const*, void*, bool)>
c000da35:	83 c4 10             	add    esp,0x10
c000da38:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c000da3c:	74 1e                	je     c000da5c <ACPI::open(int, int, void*)+0x370>
c000da3e:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c000da42:	74 18                	je     c000da5c <ACPI::open(int, int, void*)+0x370>
c000da44:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c000da47:	8b 00                	mov    eax,DWORD PTR [eax]
c000da49:	83 c0 08             	add    eax,0x8
c000da4c:	8b 00                	mov    eax,DWORD PTR [eax]
c000da4e:	83 ec 0c             	sub    esp,0xc
c000da51:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
c000da54:	ff d0                	call   eax
c000da56:	83 c4 10             	add    esp,0x10
c000da59:	8d 76 00             	lea    esi,[esi+0x0]
c000da5c:	a1 84 5d 03 c0       	mov    eax,ds:0xc0035d84
c000da61:	83 ec 08             	sub    esp,0x8
c000da64:	68 49 b1 02 c0       	push   0xc002b149
c000da69:	50                   	push   eax
c000da6a:	e8 15 f3 ff ff       	call   c000cd84 <findDataTable(unsigned char*, char*)>
c000da6f:	83 c4 10             	add    esp,0x10
c000da72:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c000da75:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c000da79:	74 11                	je     c000da8c <ACPI::open(int, int, void*)+0x3a0>
c000da7b:	83 ec 08             	sub    esp,0x8
c000da7e:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c000da81:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000da84:	e8 4b fc ff ff       	call   c000d6d4 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c000da89:	83 c4 10             	add    esp,0x10
c000da8c:	b8 00 00 00 00       	mov    eax,0x0
c000da91:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000da94:	c9                   	leave  
c000da95:	c3                   	ret    
c000da96:	66 90                	xchg   ax,ax

c000da98 <KeAssertionFailed(char*, char const*, char const*, int)>:
c000da98:	81 ec 2c 02 00 00    	sub    esp,0x22c
c000da9e:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c000daa5:	89 c2                	mov    edx,eax
c000daa7:	c1 fa 1f             	sar    edx,0x1f
c000daaa:	83 ec 04             	sub    esp,0x4
c000daad:	8d 4c 24 04          	lea    ecx,[esp+0x4]
c000dab1:	51                   	push   ecx
c000dab2:	52                   	push   edx
c000dab3:	50                   	push   eax
c000dab4:	e8 4b 24 00 00       	call   c000ff04 <KeItoa(long long, char*)>
c000dab9:	83 c4 10             	add    esp,0x10
c000dabc:	83 ec 08             	sub    esp,0x8
c000dabf:	68 18 b2 02 c0       	push   0xc002b218
c000dac4:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000dac8:	50                   	push   eax
c000dac9:	e8 82 2b ff ff       	call   c0000650 <strcpy>
c000dace:	83 c4 10             	add    esp,0x10
c000dad1:	83 ec 08             	sub    esp,0x8
c000dad4:	ff b4 24 38 02 00 00 	push   DWORD PTR [esp+0x238]
c000dadb:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000dadf:	50                   	push   eax
c000dae0:	e8 8b 2d ff ff       	call   c0000870 <strcat>
c000dae5:	83 c4 10             	add    esp,0x10
c000dae8:	83 ec 08             	sub    esp,0x8
c000daeb:	68 26 b2 02 c0       	push   0xc002b226
c000daf0:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000daf4:	50                   	push   eax
c000daf5:	e8 76 2d ff ff       	call   c0000870 <strcat>
c000dafa:	83 c4 10             	add    esp,0x10
c000dafd:	83 ec 08             	sub    esp,0x8
c000db00:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000db07:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000db0b:	50                   	push   eax
c000db0c:	e8 5f 2d ff ff       	call   c0000870 <strcat>
c000db11:	83 c4 10             	add    esp,0x10
c000db14:	83 ec 08             	sub    esp,0x8
c000db17:	68 29 b2 02 c0       	push   0xc002b229
c000db1c:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000db20:	50                   	push   eax
c000db21:	e8 4a 2d ff ff       	call   c0000870 <strcat>
c000db26:	83 c4 10             	add    esp,0x10
c000db29:	83 ec 08             	sub    esp,0x8
c000db2c:	ff b4 24 40 02 00 00 	push   DWORD PTR [esp+0x240]
c000db33:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000db37:	50                   	push   eax
c000db38:	e8 33 2d ff ff       	call   c0000870 <strcat>
c000db3d:	83 c4 10             	add    esp,0x10
c000db40:	83 ec 08             	sub    esp,0x8
c000db43:	68 29 b2 02 c0       	push   0xc002b229
c000db48:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000db4c:	50                   	push   eax
c000db4d:	e8 1e 2d ff ff       	call   c0000870 <strcat>
c000db52:	83 c4 10             	add    esp,0x10
c000db55:	83 ec 08             	sub    esp,0x8
c000db58:	8d 44 24 08          	lea    eax,[esp+0x8]
c000db5c:	50                   	push   eax
c000db5d:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000db61:	50                   	push   eax
c000db62:	e8 09 2d ff ff       	call   c0000870 <strcat>
c000db67:	83 c4 10             	add    esp,0x10
c000db6a:	83 ec 0c             	sub    esp,0xc
c000db6d:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000db71:	50                   	push   eax
c000db72:	e8 e9 29 00 00       	call   c0010560 <KePanic(char const*)>
c000db77:	83 c4 10             	add    esp,0x10
c000db7a:	90                   	nop
c000db7b:	81 c4 2c 02 00 00    	add    esp,0x22c
c000db81:	c3                   	ret    

c000db82 <KeInitialiseAtexit()>:
c000db82:	83 ec 10             	sub    esp,0x10
c000db85:	68 80 00 00 00       	push   0x80
c000db8a:	6a 00                	push   0x0
c000db8c:	68 80 60 03 c0       	push   0xc0036080
c000db91:	c7 05 e0 5f 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0035fe0,0x0
c000db9b:	e8 50 29 ff ff       	call   c00004f0 <memset>
c000dba0:	83 c4 1c             	add    esp,0x1c
c000dba3:	c3                   	ret    

c000dba4 <KeRegisterAtexit(void (*)(void*), void*)>:
c000dba4:	a1 e0 5f 03 c0       	mov    eax,ds:0xc0035fe0
c000dba9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dbad:	89 14 85 80 60 03 c0 	mov    DWORD PTR [eax*4-0x3ffc9f80],edx
c000dbb4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000dbb8:	89 14 85 00 60 03 c0 	mov    DWORD PTR [eax*4-0x3ffca000],edx
c000dbbf:	40                   	inc    eax
c000dbc0:	a3 e0 5f 03 c0       	mov    ds:0xc0035fe0,eax
c000dbc5:	83 f8 1f             	cmp    eax,0x1f
c000dbc8:	7e 0d                	jle    c000dbd7 <KeRegisterAtexit(void (*)(void*), void*)+0x33>
c000dbca:	c7 44 24 04 2b b2 02 c0 	mov    DWORD PTR [esp+0x4],0xc002b22b
c000dbd2:	e9 89 29 00 00       	jmp    c0010560 <KePanic(char const*)>
c000dbd7:	c3                   	ret    

c000dbd8 <KeExecuteAtexit()>:
c000dbd8:	53                   	push   ebx
c000dbd9:	31 db                	xor    ebx,ebx
c000dbdb:	83 ec 08             	sub    esp,0x8
c000dbde:	39 1d e0 5f 03 c0    	cmp    DWORD PTR ds:0xc0035fe0,ebx
c000dbe4:	7e 28                	jle    c000dc0e <KeExecuteAtexit()+0x36>
c000dbe6:	8b 04 9d 80 60 03 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffc9f80]
c000dbed:	85 c0                	test   eax,eax
c000dbef:	74 1a                	je     c000dc0b <KeExecuteAtexit()+0x33>
c000dbf1:	83 ec 0c             	sub    esp,0xc
c000dbf4:	ff 34 9d 00 60 03 c0 	push   DWORD PTR [ebx*4-0x3ffca000]
c000dbfb:	ff d0                	call   eax
c000dbfd:	c7 04 9d 80 60 03 c0 00 00 00 00 	mov    DWORD PTR [ebx*4-0x3ffc9f80],0x0
c000dc08:	83 c4 10             	add    esp,0x10
c000dc0b:	43                   	inc    ebx
c000dc0c:	eb d0                	jmp    c000dbde <KeExecuteAtexit()+0x6>
c000dc0e:	83 c4 08             	add    esp,0x8
c000dc11:	5b                   	pop    ebx
c000dc12:	c3                   	ret    
c000dc13:	90                   	nop

c000dc14 <KeGetBootConfigurationFlag(BootConfigurationFlag)>:
c000dc14:	8b 15 00 61 03 c0    	mov    edx,DWORD PTR ds:0xc0036100
c000dc1a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dc1e:	21 d0                	and    eax,edx
c000dc20:	0f 95 c0             	setne  al
c000dc23:	c3                   	ret    

c000dc24 <KeInitialiseBootConfigurationFlags()>:
c000dc24:	b8 00 05 00 00       	mov    eax,0x500
c000dc29:	8b 00                	mov    eax,DWORD PTR [eax]
c000dc2b:	a3 00 61 03 c0       	mov    ds:0xc0036100,eax
c000dc30:	90                   	nop
c000dc31:	c3                   	ret    

c000dc32 <KeDisplaySplashScreen()>:
c000dc32:	53                   	push   ebx
c000dc33:	bb 01 00 00 00       	mov    ebx,0x1
c000dc38:	83 ec 08             	sub    esp,0x8
c000dc3b:	43                   	inc    ebx
c000dc3c:	0f be 83 42 b2 02 c0 	movsx  eax,BYTE PTR [ebx-0x3ffd4dbe]
c000dc43:	85 c0                	test   eax,eax
c000dc45:	74 15                	je     c000dc5c <KeDisplaySplashScreen()+0x2a>
c000dc47:	83 ec 0c             	sub    esp,0xc
c000dc4a:	6a 01                	push   0x1
c000dc4c:	53                   	push   ebx
c000dc4d:	6a 00                	push   0x0
c000dc4f:	6a 0f                	push   0xf
c000dc51:	50                   	push   eax
c000dc52:	e8 e9 e7 00 00       	call   c001c440 <HalConsoleWriteCharacter(char, int, int, int, int)>
c000dc57:	83 c4 20             	add    esp,0x20
c000dc5a:	eb df                	jmp    c000dc3b <KeDisplaySplashScreen()+0x9>
c000dc5c:	83 c4 08             	add    esp,0x8
c000dc5f:	5b                   	pop    ebx
c000dc60:	c3                   	ret    

c000dc61 <KeSetBootMessage(char const*)>:
c000dc61:	57                   	push   edi
c000dc62:	56                   	push   esi
c000dc63:	53                   	push   ebx
c000dc64:	31 db                	xor    ebx,ebx
c000dc66:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000dc6a:	83 ec 0c             	sub    esp,0xc
c000dc6d:	6a 14                	push   0x14
c000dc6f:	53                   	push   ebx
c000dc70:	43                   	inc    ebx
c000dc71:	6a 00                	push   0x0
c000dc73:	6a 00                	push   0x0
c000dc75:	6a 20                	push   0x20
c000dc77:	e8 c4 e7 00 00       	call   c001c440 <HalConsoleWriteCharacter(char, int, int, int, int)>
c000dc7c:	83 c4 20             	add    esp,0x20
c000dc7f:	83 fb 50             	cmp    ebx,0x50
c000dc82:	75 e6                	jne    c000dc6a <KeSetBootMessage(char const*)+0x9>
c000dc84:	83 ec 0c             	sub    esp,0xc
c000dc87:	56                   	push   esi
c000dc88:	e8 f3 28 ff ff       	call   c0000580 <strlen>
c000dc8d:	83 c4 10             	add    esp,0x10
c000dc90:	29 c3                	sub    ebx,eax
c000dc92:	d1 eb                	shr    ebx,1
c000dc94:	89 df                	mov    edi,ebx
c000dc96:	89 f0                	mov    eax,esi
c000dc98:	29 d8                	sub    eax,ebx
c000dc9a:	0f be 04 38          	movsx  eax,BYTE PTR [eax+edi*1]
c000dc9e:	85 c0                	test   eax,eax
c000dca0:	74 16                	je     c000dcb8 <KeSetBootMessage(char const*)+0x57>
c000dca2:	83 ec 0c             	sub    esp,0xc
c000dca5:	6a 14                	push   0x14
c000dca7:	57                   	push   edi
c000dca8:	47                   	inc    edi
c000dca9:	6a 00                	push   0x0
c000dcab:	6a 07                	push   0x7
c000dcad:	50                   	push   eax
c000dcae:	e8 8d e7 00 00       	call   c001c440 <HalConsoleWriteCharacter(char, int, int, int, int)>
c000dcb3:	83 c4 20             	add    esp,0x20
c000dcb6:	eb de                	jmp    c000dc96 <KeSetBootMessage(char const*)+0x35>
c000dcb8:	5b                   	pop    ebx
c000dcb9:	5e                   	pop    esi
c000dcba:	5f                   	pop    edi
c000dcbb:	c3                   	ret    

c000dcbc <__cxa_atexit>:
c000dcbc:	31 c0                	xor    eax,eax
c000dcbe:	c3                   	ret    

c000dcbf <__cxa_finalize>:
c000dcbf:	c3                   	ret    

c000dcc0 <__stack_chk_fail>:
c000dcc0:	55                   	push   ebp
c000dcc1:	89 e5                	mov    ebp,esp
c000dcc3:	83 ec 10             	sub    esp,0x10
c000dcc6:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000dcc9:	68 57 b2 02 c0       	push   0xc002b257
c000dcce:	e8 93 92 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000dcd3:	58                   	pop    eax
c000dcd4:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000dcd7:	5a                   	pop    edx
c000dcd8:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000dcdb:	68 57 b2 02 c0       	push   0xc002b257
c000dce0:	e8 81 92 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000dce5:	c7 04 24 5f b2 02 c0 	mov    DWORD PTR [esp],0xc002b25f
c000dcec:	e8 6f 28 00 00       	call   c0010560 <KePanic(char const*)>
c000dcf1:	83 c4 10             	add    esp,0x10
c000dcf4:	c9                   	leave  
c000dcf5:	c3                   	ret    

c000dcf6 <__cxa_pure_virtual>:
c000dcf6:	83 ec 18             	sub    esp,0x18
c000dcf9:	68 77 b2 02 c0       	push   0xc002b277
c000dcfe:	e8 5d 28 00 00       	call   c0010560 <KePanic(char const*)>
c000dd03:	83 c4 1c             	add    esp,0x1c
c000dd06:	c3                   	ret    

c000dd07 <operator new[](unsigned long)>:
c000dd07:	e9 00 24 00 00       	jmp    c001010c <malloc>

c000dd0c <operator delete(void*, unsigned long)>:
c000dd0c:	e9 1b 24 00 00       	jmp    c001012c <rfree>

c000dd11 <operator delete[](void*)>:
c000dd11:	e9 16 24 00 00       	jmp    c001012c <rfree>

c000dd16 <operator delete[](void*, unsigned long)>:
c000dd16:	e9 11 24 00 00       	jmp    c001012c <rfree>
c000dd1b:	90                   	nop

c000dd1c <CUnlockScheduler>:
c000dd1c:	f0 83 2d 30 63 03 c0 01 	lock sub DWORD PTR ds:0xc0036330,0x1
c000dd24:	a1 30 63 03 c0       	mov    eax,ds:0xc0036330
c000dd29:	85 c0                	test   eax,eax
c000dd2b:	75 03                	jne    c000dd30 <CUnlockScheduler+0x14>
c000dd2d:	fb                   	sti    
c000dd2e:	66 90                	xchg   ax,ax
c000dd30:	90                   	nop
c000dd31:	c3                   	ret    
c000dd32:	66 90                	xchg   ax,ax

c000dd34 <CLockScheduler>:
c000dd34:	fa                   	cli    
c000dd35:	a1 30 63 03 c0       	mov    eax,ds:0xc0036330
c000dd3a:	83 c0 01             	add    eax,0x1
c000dd3d:	a3 30 63 03 c0       	mov    ds:0xc0036330,eax
c000dd42:	90                   	nop
c000dd43:	c3                   	ret    

c000dd44 <CPrintf>:
c000dd44:	83 ec 0c             	sub    esp,0xc
c000dd47:	83 ec 08             	sub    esp,0x8
c000dd4a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000dd4e:	68 8a b2 02 c0       	push   0xc002b28a
c000dd53:	e8 0e 92 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000dd58:	83 c4 10             	add    esp,0x10
c000dd5b:	90                   	nop
c000dd5c:	83 c4 0c             	add    esp,0xc
c000dd5f:	c3                   	ret    

c000dd60 <CmOpen(char const*)>:
c000dd60:	57                   	push   edi
c000dd61:	56                   	push   esi
c000dd62:	53                   	push   ebx
c000dd63:	83 ec 1c             	sub    esp,0x1c
c000dd66:	6a 30                	push   0x30
c000dd68:	e8 9f 23 00 00       	call   c001010c <malloc>
c000dd6d:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c000dd74:	89 c3                	mov    ebx,eax
c000dd76:	e8 91 23 00 00       	call   c001010c <malloc>
c000dd7b:	83 c4 0c             	add    esp,0xc
c000dd7e:	ff 35 58 63 03 c0    	push   DWORD PTR ds:0xc0036358
c000dd84:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000dd88:	89 c6                	mov    esi,eax
c000dd8a:	50                   	push   eax
c000dd8b:	e8 22 ae ff ff       	call   c0008bb2 <File::File(char const*, Process*)>
c000dd90:	83 c4 0c             	add    esp,0xc
c000dd93:	89 33                	mov    DWORD PTR [ebx],esi
c000dd95:	8d 44 24 07          	lea    eax,[esp+0x7]
c000dd99:	50                   	push   eax
c000dd9a:	8d 44 24 10          	lea    eax,[esp+0x10]
c000dd9e:	50                   	push   eax
c000dd9f:	56                   	push   esi
c000dda0:	e8 2d b1 ff ff       	call   c0008ed2 <File::stat(unsigned long long*, bool*)>
c000dda5:	5a                   	pop    edx
c000dda6:	59                   	pop    ecx
c000dda7:	6a 01                	push   0x1
c000dda9:	ff 33                	push   DWORD PTR [ebx]
c000ddab:	e8 20 ae ff ff       	call   c0008bd0 <File::open(FileOpenMode)>
c000ddb0:	5e                   	pop    esi
c000ddb1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddb5:	e8 52 23 00 00       	call   c001010c <malloc>
c000ddba:	5a                   	pop    edx
c000ddbb:	8d 74 24 10          	lea    esi,[esp+0x10]
c000ddbf:	89 c7                	mov    edi,eax
c000ddc1:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ddc3:	8b 10                	mov    edx,DWORD PTR [eax]
c000ddc5:	56                   	push   esi
c000ddc6:	57                   	push   edi
c000ddc7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ddcb:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ddcf:	50                   	push   eax
c000ddd0:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000ddd3:	83 c4 14             	add    esp,0x14
c000ddd6:	ff 33                	push   DWORD PTR [ebx]
c000ddd8:	e8 51 ae ff ff       	call   c0008c2e <File::close()>
c000dddd:	59                   	pop    ecx
c000ddde:	58                   	pop    eax
c000dddf:	6a 13                	push   0x13
c000dde1:	ff 33                	push   DWORD PTR [ebx]
c000dde3:	e8 e8 ad ff ff       	call   c0008bd0 <File::open(FileOpenMode)>
c000dde8:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ddea:	8b 10                	mov    edx,DWORD PTR [eax]
c000ddec:	89 34 24             	mov    DWORD PTR [esp],esi
c000ddef:	57                   	push   edi
c000ddf0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ddf4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ddf8:	50                   	push   eax
c000ddf9:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000ddfc:	83 c4 14             	add    esp,0x14
c000ddff:	57                   	push   edi
c000de00:	e8 17 23 00 00       	call   c001011c <free>
c000de05:	83 c4 10             	add    esp,0x10
c000de08:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000de0b:	75 10                	jne    c000de1d <CmOpen(char const*)+0xbd>
c000de0d:	83 ec 0c             	sub    esp,0xc
c000de10:	68 8d b2 02 c0       	push   0xc002b28d
c000de15:	e8 46 27 00 00       	call   c0010560 <KePanic(char const*)>
c000de1a:	83 c4 10             	add    esp,0x10
c000de1d:	50                   	push   eax
c000de1e:	6a 00                	push   0x0
c000de20:	6a 00                	push   0x0
c000de22:	ff 33                	push   DWORD PTR [ebx]
c000de24:	8d 7b 05             	lea    edi,[ebx+0x5]
c000de27:	e8 62 ae ff ff       	call   c0008c8e <File::seek(unsigned long long)>
c000de2c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000de2e:	8b 10                	mov    edx,DWORD PTR [eax]
c000de30:	89 34 24             	mov    DWORD PTR [esp],esi
c000de33:	57                   	push   edi
c000de34:	6a 00                	push   0x0
c000de36:	6a 2b                	push   0x2b
c000de38:	50                   	push   eax
c000de39:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000de3c:	83 c4 1c             	add    esp,0x1c
c000de3f:	6a 00                	push   0x0
c000de41:	6a 00                	push   0x0
c000de43:	ff 33                	push   DWORD PTR [ebx]
c000de45:	e8 44 ae ff ff       	call   c0008c8e <File::seek(unsigned long long)>
c000de4a:	83 c4 0c             	add    esp,0xc
c000de4d:	6a 08                	push   0x8
c000de4f:	68 af b2 02 c0       	push   0xc002b2af
c000de54:	57                   	push   edi
c000de55:	e8 26 25 ff ff       	call   c0000380 <memcmp>
c000de5a:	83 c4 10             	add    esp,0x10
c000de5d:	85 c0                	test   eax,eax
c000de5f:	74 10                	je     c000de71 <CmOpen(char const*)+0x111>
c000de61:	83 ec 0c             	sub    esp,0xc
c000de64:	68 b8 b2 02 c0       	push   0xc002b2b8
c000de69:	e8 f2 26 00 00       	call   c0010560 <KePanic(char const*)>
c000de6e:	83 c4 10             	add    esp,0x10
c000de71:	c6 43 04 01          	mov    BYTE PTR [ebx+0x4],0x1
c000de75:	83 c4 10             	add    esp,0x10
c000de78:	89 d8                	mov    eax,ebx
c000de7a:	5b                   	pop    ebx
c000de7b:	5e                   	pop    esi
c000de7c:	5f                   	pop    edi
c000de7d:	c3                   	ret    

c000de7e <CmClose(Reghive_Tag*)>:
c000de7e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000de82:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c000de86:	74 0b                	je     c000de93 <CmClose(Reghive_Tag*)+0x15>
c000de88:	8b 00                	mov    eax,DWORD PTR [eax]
c000de8a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000de8e:	e9 9b ad ff ff       	jmp    c0008c2e <File::close()>
c000de93:	c3                   	ret    

c000de94 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>:
c000de94:	53                   	push   ebx
c000de95:	83 ec 18             	sub    esp,0x18
c000de98:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000de9c:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c000dea0:	74 29                	je     c000decb <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c000dea2:	50                   	push   eax
c000dea3:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c000dea8:	99                   	cdq    
c000dea9:	52                   	push   edx
c000deaa:	50                   	push   eax
c000deab:	ff 33                	push   DWORD PTR [ebx]
c000dead:	e8 dc ad ff ff       	call   c0008c8e <File::seek(unsigned long long)>
c000deb2:	8b 03                	mov    eax,DWORD PTR [ebx]
c000deb4:	5a                   	pop    edx
c000deb5:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000deb9:	8b 10                	mov    edx,DWORD PTR [eax]
c000debb:	51                   	push   ecx
c000debc:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000dec0:	6a 00                	push   0x0
c000dec2:	6a 2b                	push   0x2b
c000dec4:	50                   	push   eax
c000dec5:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000dec8:	83 c4 20             	add    esp,0x20
c000decb:	83 c4 18             	add    esp,0x18
c000dece:	5b                   	pop    ebx
c000decf:	c3                   	ret    

c000ded0 <CmGetString(Reghive_Tag*, int, char*)>:
c000ded0:	55                   	push   ebp
c000ded1:	57                   	push   edi
c000ded2:	56                   	push   esi
c000ded3:	53                   	push   ebx
c000ded4:	31 db                	xor    ebx,ebx
c000ded6:	83 ec 70             	sub    esp,0x70
c000ded9:	8d 44 24 0e          	lea    eax,[esp+0xe]
c000dedd:	8b ac 24 84 00 00 00 	mov    ebp,DWORD PTR [esp+0x84]
c000dee4:	50                   	push   eax
c000dee5:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c000deec:	55                   	push   ebp
c000deed:	e8 a2 ff ff ff       	call   c000de94 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000def2:	83 c4 10             	add    esp,0x10
c000def5:	0f b6 44 1c 22       	movzx  eax,BYTE PTR [esp+ebx*1+0x22]
c000defa:	c1 e0 08             	shl    eax,0x8
c000defd:	89 c2                	mov    edx,eax
c000deff:	0f b6 44 1c 21       	movzx  eax,BYTE PTR [esp+ebx*1+0x21]
c000df04:	09 d0                	or     eax,edx
c000df06:	0f b6 54 1c 20       	movzx  edx,BYTE PTR [esp+ebx*1+0x20]
c000df0b:	c1 e0 08             	shl    eax,0x8
c000df0e:	09 d0                	or     eax,edx
c000df10:	74 25                	je     c000df37 <CmGetString(Reghive_Tag*, int, char*)+0x67>
c000df12:	52                   	push   edx
c000df13:	8d 54 24 39          	lea    edx,[esp+0x39]
c000df17:	52                   	push   edx
c000df18:	6b fb 0d             	imul   edi,ebx,0xd
c000df1b:	50                   	push   eax
c000df1c:	55                   	push   ebp
c000df1d:	e8 72 ff ff ff       	call   c000de94 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000df22:	8d 74 24 49          	lea    esi,[esp+0x49]
c000df26:	b9 27 00 00 00       	mov    ecx,0x27
c000df2b:	03 bc 24 98 00 00 00 	add    edi,DWORD PTR [esp+0x98]
c000df32:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000df34:	83 c4 10             	add    esp,0x10
c000df37:	83 c3 03             	add    ebx,0x3
c000df3a:	83 fb 15             	cmp    ebx,0x15
c000df3d:	75 b6                	jne    c000def5 <CmGetString(Reghive_Tag*, int, char*)+0x25>
c000df3f:	83 c4 6c             	add    esp,0x6c
c000df42:	5b                   	pop    ebx
c000df43:	5e                   	pop    esi
c000df44:	5f                   	pop    edi
c000df45:	5d                   	pop    ebp
c000df46:	c3                   	ret    

c000df47 <CmEnterDirectory(Reghive_Tag*, int)>:
c000df47:	83 ec 40             	sub    esp,0x40
c000df4a:	8d 44 24 09          	lea    eax,[esp+0x9]
c000df4e:	50                   	push   eax
c000df4f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000df53:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000df57:	e8 38 ff ff ff       	call   c000de94 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000df5c:	83 c4 10             	add    esp,0x10
c000df5f:	83 c8 ff             	or     eax,0xffffffff
c000df62:	80 7c 24 05 4e       	cmp    BYTE PTR [esp+0x5],0x4e
c000df67:	75 19                	jne    c000df82 <CmEnterDirectory(Reghive_Tag*, int)+0x3b>
c000df69:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000df6e:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c000df73:	c1 e0 08             	shl    eax,0x8
c000df76:	09 c2                	or     edx,eax
c000df78:	0f b6 44 24 1d       	movzx  eax,BYTE PTR [esp+0x1d]
c000df7d:	c1 e0 10             	shl    eax,0x10
c000df80:	09 d0                	or     eax,edx
c000df82:	83 c4 3c             	add    esp,0x3c
c000df85:	c3                   	ret    

c000df86 <CmGetNext(Reghive_Tag*, int)>:
c000df86:	83 ec 40             	sub    esp,0x40
c000df89:	8d 44 24 09          	lea    eax,[esp+0x9]
c000df8d:	50                   	push   eax
c000df8e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000df92:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000df96:	e8 f9 fe ff ff       	call   c000de94 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000df9b:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c000dfa0:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c000dfa5:	c1 e0 08             	shl    eax,0x8
c000dfa8:	09 c2                	or     edx,eax
c000dfaa:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c000dfaf:	83 c4 4c             	add    esp,0x4c
c000dfb2:	c1 e0 10             	shl    eax,0x10
c000dfb5:	09 d0                	or     eax,edx
c000dfb7:	c3                   	ret    

c000dfb8 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>:
c000dfb8:	53                   	push   ebx
c000dfb9:	83 ec 18             	sub    esp,0x18
c000dfbc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000dfc0:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c000dfc4:	74 29                	je     c000dfef <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c000dfc6:	50                   	push   eax
c000dfc7:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c000dfcc:	99                   	cdq    
c000dfcd:	52                   	push   edx
c000dfce:	50                   	push   eax
c000dfcf:	ff 33                	push   DWORD PTR [ebx]
c000dfd1:	e8 b8 ac ff ff       	call   c0008c8e <File::seek(unsigned long long)>
c000dfd6:	8b 03                	mov    eax,DWORD PTR [ebx]
c000dfd8:	5a                   	pop    edx
c000dfd9:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000dfdd:	8b 10                	mov    edx,DWORD PTR [eax]
c000dfdf:	51                   	push   ecx
c000dfe0:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000dfe4:	6a 00                	push   0x0
c000dfe6:	6a 2b                	push   0x2b
c000dfe8:	50                   	push   eax
c000dfe9:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000dfec:	83 c4 20             	add    esp,0x20
c000dfef:	83 c4 18             	add    esp,0x18
c000dff2:	5b                   	pop    ebx
c000dff3:	c3                   	ret    

c000dff4 <CmFreeExtent(Reghive_Tag*, int)>:
c000dff4:	53                   	push   ebx
c000dff5:	83 ec 3c             	sub    esp,0x3c
c000dff8:	6a 2b                	push   0x2b
c000dffa:	6a 00                	push   0x0
c000dffc:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c000e000:	53                   	push   ebx
c000e001:	e8 ea 24 ff ff       	call   c00004f0 <memset>
c000e006:	83 c4 0c             	add    esp,0xc
c000e009:	53                   	push   ebx
c000e00a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000e00e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000e012:	e8 a1 ff ff ff       	call   c000dfb8 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000e017:	83 c4 48             	add    esp,0x48
c000e01a:	5b                   	pop    ebx
c000e01b:	c3                   	ret    

c000e01c <CmUpdateHeader(Reghive_Tag*)>:
c000e01c:	83 ec 0c             	sub    esp,0xc
c000e01f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e023:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c000e027:	74 10                	je     c000e039 <CmUpdateHeader(Reghive_Tag*)+0x1d>
c000e029:	52                   	push   edx
c000e02a:	8d 50 05             	lea    edx,[eax+0x5]
c000e02d:	52                   	push   edx
c000e02e:	6a 00                	push   0x0
c000e030:	50                   	push   eax
c000e031:	e8 82 ff ff ff       	call   c000dfb8 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000e036:	83 c4 10             	add    esp,0x10
c000e039:	83 c4 0c             	add    esp,0xc
c000e03c:	c3                   	ret    

c000e03d <CmExpand(Reghive_Tag*, int)>:
c000e03d:	55                   	push   ebp
c000e03e:	57                   	push   edi
c000e03f:	83 cf ff             	or     edi,0xffffffff
c000e042:	56                   	push   esi
c000e043:	53                   	push   ebx
c000e044:	83 ec 3c             	sub    esp,0x3c
c000e047:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c000e04b:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000e04f:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c000e053:	74 59                	je     c000e0ae <CmExpand(Reghive_Tag*, int)+0x71>
c000e055:	50                   	push   eax
c000e056:	31 d2                	xor    edx,edx
c000e058:	6b 43 0d 2b          	imul   eax,DWORD PTR [ebx+0xd],0x2b
c000e05c:	31 ff                	xor    edi,edi
c000e05e:	52                   	push   edx
c000e05f:	50                   	push   eax
c000e060:	ff 33                	push   DWORD PTR [ebx]
c000e062:	e8 27 ac ff ff       	call   c0008c8e <File::seek(unsigned long long)>
c000e067:	83 c4 0c             	add    esp,0xc
c000e06a:	6a 2b                	push   0x2b
c000e06c:	6a 00                	push   0x0
c000e06e:	8d 6c 24 11          	lea    ebp,[esp+0x11]
c000e072:	55                   	push   ebp
c000e073:	e8 78 24 ff ff       	call   c00004f0 <memset>
c000e078:	83 c4 10             	add    esp,0x10
c000e07b:	39 f7                	cmp    edi,esi
c000e07d:	7d 1b                	jge    c000e09a <CmExpand(Reghive_Tag*, int)+0x5d>
c000e07f:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e081:	83 ec 0c             	sub    esp,0xc
c000e084:	47                   	inc    edi
c000e085:	8d 4c 24 0c          	lea    ecx,[esp+0xc]
c000e089:	8b 10                	mov    edx,DWORD PTR [eax]
c000e08b:	51                   	push   ecx
c000e08c:	55                   	push   ebp
c000e08d:	6a 00                	push   0x0
c000e08f:	6a 2b                	push   0x2b
c000e091:	50                   	push   eax
c000e092:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000e095:	83 c4 20             	add    esp,0x20
c000e098:	eb e1                	jmp    c000e07b <CmExpand(Reghive_Tag*, int)+0x3e>
c000e09a:	8b 7b 0d             	mov    edi,DWORD PTR [ebx+0xd]
c000e09d:	83 ec 0c             	sub    esp,0xc
c000e0a0:	01 fe                	add    esi,edi
c000e0a2:	89 73 0d             	mov    DWORD PTR [ebx+0xd],esi
c000e0a5:	53                   	push   ebx
c000e0a6:	e8 71 ff ff ff       	call   c000e01c <CmUpdateHeader(Reghive_Tag*)>
c000e0ab:	83 c4 10             	add    esp,0x10
c000e0ae:	83 c4 3c             	add    esp,0x3c
c000e0b1:	89 f8                	mov    eax,edi
c000e0b3:	5b                   	pop    ebx
c000e0b4:	5e                   	pop    esi
c000e0b5:	5f                   	pop    edi
c000e0b6:	5d                   	pop    ebp
c000e0b7:	c3                   	ret    

c000e0b8 <CmFindUnusedExtent(Reghive_Tag*)>:
c000e0b8:	55                   	push   ebp
c000e0b9:	57                   	push   edi
c000e0ba:	56                   	push   esi
c000e0bb:	53                   	push   ebx
c000e0bc:	83 cb ff             	or     ebx,0xffffffff
c000e0bf:	83 ec 1c             	sub    esp,0x1c
c000e0c2:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000e0c6:	80 7d 04 00          	cmp    BYTE PTR [ebp+0x4],0x0
c000e0ca:	74 68                	je     c000e134 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c000e0cc:	51                   	push   ecx
c000e0cd:	be 2b 00 00 00       	mov    esi,0x2b
c000e0d2:	6a 00                	push   0x0
c000e0d4:	31 ff                	xor    edi,edi
c000e0d6:	6a 00                	push   0x0
c000e0d8:	31 db                	xor    ebx,ebx
c000e0da:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000e0dd:	e8 ac ab ff ff       	call   c0008c8e <File::seek(unsigned long long)>
c000e0e2:	83 c4 10             	add    esp,0x10
c000e0e5:	39 5d 0d             	cmp    DWORD PTR [ebp+0xd],ebx
c000e0e8:	76 3b                	jbe    c000e125 <CmFindUnusedExtent(Reghive_Tag*)+0x6d>
c000e0ea:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000e0ed:	83 ec 0c             	sub    esp,0xc
c000e0f0:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000e0f4:	8b 10                	mov    edx,DWORD PTR [eax]
c000e0f6:	51                   	push   ecx
c000e0f7:	8d 4c 24 1b          	lea    ecx,[esp+0x1b]
c000e0fb:	51                   	push   ecx
c000e0fc:	6a 00                	push   0x0
c000e0fe:	6a 01                	push   0x1
c000e100:	50                   	push   eax
c000e101:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000e104:	83 c4 20             	add    esp,0x20
c000e107:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000e10c:	74 26                	je     c000e134 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c000e10e:	52                   	push   edx
c000e10f:	43                   	inc    ebx
c000e110:	57                   	push   edi
c000e111:	56                   	push   esi
c000e112:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000e115:	e8 74 ab ff ff       	call   c0008c8e <File::seek(unsigned long long)>
c000e11a:	83 c6 2b             	add    esi,0x2b
c000e11d:	83 d7 00             	adc    edi,0x0
c000e120:	83 c4 10             	add    esp,0x10
c000e123:	eb c0                	jmp    c000e0e5 <CmFindUnusedExtent(Reghive_Tag*)+0x2d>
c000e125:	50                   	push   eax
c000e126:	50                   	push   eax
c000e127:	6a 40                	push   0x40
c000e129:	55                   	push   ebp
c000e12a:	e8 0e ff ff ff       	call   c000e03d <CmExpand(Reghive_Tag*, int)>
c000e12f:	83 c4 10             	add    esp,0x10
c000e132:	89 c3                	mov    ebx,eax
c000e134:	83 c4 1c             	add    esp,0x1c
c000e137:	89 d8                	mov    eax,ebx
c000e139:	5b                   	pop    ebx
c000e13a:	5e                   	pop    esi
c000e13b:	5f                   	pop    edi
c000e13c:	5d                   	pop    ebp
c000e13d:	c3                   	ret    

c000e13e <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>:
c000e13e:	55                   	push   ebp
c000e13f:	57                   	push   edi
c000e140:	56                   	push   esi
c000e141:	53                   	push   ebx
c000e142:	81 ec 88 00 00 00    	sub    esp,0x88
c000e148:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c000e14f:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000e156:	e8 5d ff ff ff       	call   c000e0b8 <CmFindUnusedExtent(Reghive_Tag*)>
c000e15b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e15f:	83 c4 0c             	add    esp,0xc
c000e162:	6a 2b                	push   0x2b
c000e164:	6a 00                	push   0x0
c000e166:	8d 6c 24 26          	lea    ebp,[esp+0x26]
c000e16a:	55                   	push   ebp
c000e16b:	e8 80 23 ff ff       	call   c00004f0 <memset>
c000e170:	83 c4 10             	add    esp,0x10
c000e173:	85 db                	test   ebx,ebx
c000e175:	74 12                	je     c000e189 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x4b>
c000e177:	51                   	push   ecx
c000e178:	55                   	push   ebp
c000e179:	53                   	push   ebx
c000e17a:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000e181:	e8 0e fd ff ff       	call   c000de94 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000e186:	83 c4 10             	add    esp,0x10
c000e189:	8d 7c 24 45          	lea    edi,[esp+0x45]
c000e18d:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c000e194:	b9 2b 00 00 00       	mov    ecx,0x2b
c000e199:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e19b:	85 db                	test   ebx,ebx
c000e19d:	74 49                	je     c000e1e8 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xaa>
c000e19f:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c000e1a4:	0f b6 4c 24 1b       	movzx  ecx,BYTE PTR [esp+0x1b]
c000e1a9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e1ad:	c1 e0 08             	shl    eax,0x8
c000e1b0:	81 e2 ff ff ff 00    	and    edx,0xffffff
c000e1b6:	09 c8                	or     eax,ecx
c000e1b8:	74 11                	je     c000e1cb <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x8d>
c000e1ba:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c000e1be:	88 64 24 47          	mov    BYTE PTR [esp+0x47],ah
c000e1c2:	c1 e8 10             	shr    eax,0x10
c000e1c5:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c000e1c9:	eb 0f                	jmp    c000e1da <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x9c>
c000e1cb:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c000e1d0:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c000e1d5:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c000e1da:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c000e1de:	c1 ea 08             	shr    edx,0x8
c000e1e1:	66 89 54 24 1c       	mov    WORD PTR [esp+0x1c],dx
c000e1e6:	eb 0f                	jmp    c000e1f7 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xb9>
c000e1e8:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c000e1ed:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c000e1f2:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c000e1f7:	52                   	push   edx
c000e1f8:	8d 44 24 49          	lea    eax,[esp+0x49]
c000e1fc:	50                   	push   eax
c000e1fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e201:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000e208:	e8 ab fd ff ff       	call   c000dfb8 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000e20d:	83 c4 10             	add    esp,0x10
c000e210:	85 db                	test   ebx,ebx
c000e212:	74 12                	je     c000e226 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xe8>
c000e214:	50                   	push   eax
c000e215:	55                   	push   ebp
c000e216:	53                   	push   ebx
c000e217:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000e21e:	e8 95 fd ff ff       	call   c000dfb8 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000e223:	83 c4 10             	add    esp,0x10
c000e226:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e22a:	83 c4 7c             	add    esp,0x7c
c000e22d:	5b                   	pop    ebx
c000e22e:	5e                   	pop    esi
c000e22f:	5f                   	pop    edi
c000e230:	5d                   	pop    ebp
c000e231:	c3                   	ret    

c000e232 <CmSetString(Reghive_Tag*, int, char const*)>:
c000e232:	55                   	push   ebp
c000e233:	57                   	push   edi
c000e234:	56                   	push   esi
c000e235:	53                   	push   ebx
c000e236:	bb 27 00 00 00       	mov    ebx,0x27
c000e23b:	81 ec 88 00 00 00    	sub    esp,0x88
c000e241:	8b bc 24 9c 00 00 00 	mov    edi,DWORD PTR [esp+0x9c]
c000e248:	ff b4 24 a4 00 00 00 	push   DWORD PTR [esp+0xa4]
c000e24f:	e8 2c 23 ff ff       	call   c0000580 <strlen>
c000e254:	8d 48 26             	lea    ecx,[eax+0x26]
c000e257:	89 c8                	mov    eax,ecx
c000e259:	99                   	cdq    
c000e25a:	f7 fb                	idiv   ebx
c000e25c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e260:	83 c4 10             	add    esp,0x10
c000e263:	81 f9 37 01 00 00    	cmp    ecx,0x137
c000e269:	7e 10                	jle    c000e27b <CmSetString(Reghive_Tag*, int, char const*)+0x49>
c000e26b:	83 ec 0c             	sub    esp,0xc
c000e26e:	68 d3 b2 02 c0       	push   0xc002b2d3
c000e273:	e8 e8 22 00 00       	call   c0010560 <KePanic(char const*)>
c000e278:	83 c4 10             	add    esp,0x10
c000e27b:	53                   	push   ebx
c000e27c:	31 ed                	xor    ebp,ebp
c000e27e:	8d 5c 24 1e          	lea    ebx,[esp+0x1e]
c000e282:	53                   	push   ebx
c000e283:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000e28a:	57                   	push   edi
c000e28b:	e8 04 fc ff ff       	call   c000de94 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000e290:	83 c4 10             	add    esp,0x10
c000e293:	0f b6 73 18          	movzx  esi,BYTE PTR [ebx+0x18]
c000e297:	89 f0                	mov    eax,esi
c000e299:	0f b6 73 17          	movzx  esi,BYTE PTR [ebx+0x17]
c000e29d:	c1 e0 08             	shl    eax,0x8
c000e2a0:	09 c6                	or     esi,eax
c000e2a2:	0f b6 43 16          	movzx  eax,BYTE PTR [ebx+0x16]
c000e2a6:	c1 e6 08             	shl    esi,0x8
c000e2a9:	09 c6                	or     esi,eax
c000e2ab:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c000e2af:	7e 72                	jle    c000e323 <CmSetString(Reghive_Tag*, int, char const*)+0xf1>
c000e2b1:	85 f6                	test   esi,esi
c000e2b3:	75 25                	jne    c000e2da <CmSetString(Reghive_Tag*, int, char const*)+0xa8>
c000e2b5:	c6 44 24 45 13       	mov    BYTE PTR [esp+0x45],0x13
c000e2ba:	8d 44 24 45          	lea    eax,[esp+0x45]
c000e2be:	50                   	push   eax
c000e2bf:	6a 00                	push   0x0
c000e2c1:	6a 00                	push   0x0
c000e2c3:	57                   	push   edi
c000e2c4:	e8 75 fe ff ff       	call   c000e13e <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000e2c9:	83 c4 10             	add    esp,0x10
c000e2cc:	88 43 16             	mov    BYTE PTR [ebx+0x16],al
c000e2cf:	89 c6                	mov    esi,eax
c000e2d1:	88 63 17             	mov    BYTE PTR [ebx+0x17],ah
c000e2d4:	c1 f8 10             	sar    eax,0x10
c000e2d7:	88 43 18             	mov    BYTE PTR [ebx+0x18],al
c000e2da:	51                   	push   ecx
c000e2db:	8d 54 24 49          	lea    edx,[esp+0x49]
c000e2df:	52                   	push   edx
c000e2e0:	56                   	push   esi
c000e2e1:	57                   	push   edi
c000e2e2:	e8 ad fb ff ff       	call   c000de94 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000e2e7:	83 c4 0c             	add    esp,0xc
c000e2ea:	6a 27                	push   0x27
c000e2ec:	6a 00                	push   0x0
c000e2ee:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c000e2f2:	51                   	push   ecx
c000e2f3:	e8 f8 21 ff ff       	call   c00004f0 <memset>
c000e2f8:	6b c5 27             	imul   eax,ebp,0x27
c000e2fb:	83 c4 0c             	add    esp,0xc
c000e2fe:	6a 27                	push   0x27
c000e300:	03 84 24 a0 00 00 00 	add    eax,DWORD PTR [esp+0xa0]
c000e307:	50                   	push   eax
c000e308:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c000e30c:	51                   	push   ecx
c000e30d:	e8 7e 23 ff ff       	call   c0000690 <strncpy>
c000e312:	83 c4 0c             	add    esp,0xc
c000e315:	8d 54 24 49          	lea    edx,[esp+0x49]
c000e319:	52                   	push   edx
c000e31a:	56                   	push   esi
c000e31b:	57                   	push   edi
c000e31c:	e8 97 fc ff ff       	call   c000dfb8 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000e321:	eb 19                	jmp    c000e33c <CmSetString(Reghive_Tag*, int, char const*)+0x10a>
c000e323:	85 f6                	test   esi,esi
c000e325:	74 18                	je     c000e33f <CmSetString(Reghive_Tag*, int, char const*)+0x10d>
c000e327:	52                   	push   edx
c000e328:	52                   	push   edx
c000e329:	56                   	push   esi
c000e32a:	57                   	push   edi
c000e32b:	e8 c4 fc ff ff       	call   c000dff4 <CmFreeExtent(Reghive_Tag*, int)>
c000e330:	c6 43 16 00          	mov    BYTE PTR [ebx+0x16],0x0
c000e334:	c6 43 17 00          	mov    BYTE PTR [ebx+0x17],0x0
c000e338:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c000e33c:	83 c4 10             	add    esp,0x10
c000e33f:	45                   	inc    ebp
c000e340:	83 c3 03             	add    ebx,0x3
c000e343:	83 fd 07             	cmp    ebp,0x7
c000e346:	0f 85 47 ff ff ff    	jne    c000e293 <CmSetString(Reghive_Tag*, int, char const*)+0x61>
c000e34c:	50                   	push   eax
c000e34d:	8d 44 24 1e          	lea    eax,[esp+0x1e]
c000e351:	50                   	push   eax
c000e352:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000e359:	57                   	push   edi
c000e35a:	e8 59 fc ff ff       	call   c000dfb8 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000e35f:	81 c4 8c 00 00 00    	add    esp,0x8c
c000e365:	5b                   	pop    ebx
c000e366:	5e                   	pop    esi
c000e367:	5f                   	pop    edi
c000e368:	5d                   	pop    ebp
c000e369:	c3                   	ret    

c000e36a <CmGetMatch(char*, char*, bool, bool*)>:
c000e36a:	56                   	push   esi
c000e36b:	53                   	push   ebx
c000e36c:	50                   	push   eax
c000e36d:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000e372:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000e376:	74 25                	je     c000e39d <CmGetMatch(char*, char*, bool, bool*)+0x33>
c000e378:	c6 06 01             	mov    BYTE PTR [esi],0x1
c000e37b:	31 db                	xor    ebx,ebx
c000e37d:	50                   	push   eax
c000e37e:	50                   	push   eax
c000e37f:	8d 04 9d 60 f5 02 c0 	lea    eax,[ebx*4-0x3ffd0aa0]
c000e386:	50                   	push   eax
c000e387:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e38b:	e8 f0 23 ff ff       	call   c0000780 <strcmp>
c000e390:	83 c4 10             	add    esp,0x10
c000e393:	85 c0                	test   eax,eax
c000e395:	74 2e                	je     c000e3c5 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c000e397:	43                   	inc    ebx
c000e398:	83 fb 3f             	cmp    ebx,0x3f
c000e39b:	75 e0                	jne    c000e37d <CmGetMatch(char*, char*, bool, bool*)+0x13>
c000e39d:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000e3a0:	31 db                	xor    ebx,ebx
c000e3a2:	51                   	push   ecx
c000e3a3:	51                   	push   ecx
c000e3a4:	8d 04 9d 60 f5 02 c0 	lea    eax,[ebx*4-0x3ffd0aa0]
c000e3ab:	50                   	push   eax
c000e3ac:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000e3b0:	e8 cb 23 ff ff       	call   c0000780 <strcmp>
c000e3b5:	83 c4 10             	add    esp,0x10
c000e3b8:	85 c0                	test   eax,eax
c000e3ba:	74 09                	je     c000e3c5 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c000e3bc:	43                   	inc    ebx
c000e3bd:	83 fb 3f             	cmp    ebx,0x3f
c000e3c0:	75 e0                	jne    c000e3a2 <CmGetMatch(char*, char*, bool, bool*)+0x38>
c000e3c2:	83 cb ff             	or     ebx,0xffffffff
c000e3c5:	5a                   	pop    edx
c000e3c6:	89 d8                	mov    eax,ebx
c000e3c8:	5b                   	pop    ebx
c000e3c9:	5e                   	pop    esi
c000e3ca:	c3                   	ret    

c000e3cb <CmAddShift(unsigned int*, int*, unsigned char, int)>:
c000e3cb:	55                   	push   ebp
c000e3cc:	31 c0                	xor    eax,eax
c000e3ce:	57                   	push   edi
c000e3cf:	56                   	push   esi
c000e3d0:	53                   	push   ebx
c000e3d1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000e3d5:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000e3d9:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000e3dd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e3e1:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c000e3e3:	8d 2c 31             	lea    ebp,[ecx+esi*1]
c000e3e6:	83 fd 1f             	cmp    ebp,0x1f
c000e3e9:	7f 0b                	jg     c000e3f6 <CmAddShift(unsigned int*, int*, unsigned char, int)+0x2b>
c000e3eb:	0f b6 c2             	movzx  eax,dl
c000e3ee:	d3 e0                	shl    eax,cl
c000e3f0:	09 07                	or     DWORD PTR [edi],eax
c000e3f2:	b0 01                	mov    al,0x1
c000e3f4:	01 33                	add    DWORD PTR [ebx],esi
c000e3f6:	5b                   	pop    ebx
c000e3f7:	5e                   	pop    esi
c000e3f8:	5f                   	pop    edi
c000e3f9:	5d                   	pop    ebp
c000e3fa:	c3                   	ret    

c000e3fb <CmGetShift(unsigned int*, int*, int, bool*)>:
c000e3fb:	57                   	push   edi
c000e3fc:	56                   	push   esi
c000e3fd:	53                   	push   ebx
c000e3fe:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000e402:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000e406:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000e40a:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000e40e:	39 0b                	cmp    DWORD PTR [ebx],ecx
c000e410:	7c 17                	jl     c000e429 <CmGetShift(unsigned int*, int*, int, bool*)+0x2e>
c000e412:	8b 17                	mov    edx,DWORD PTR [edi]
c000e414:	b8 01 00 00 00       	mov    eax,0x1
c000e419:	d3 e0                	shl    eax,cl
c000e41b:	48                   	dec    eax
c000e41c:	21 d0                	and    eax,edx
c000e41e:	d3 ea                	shr    edx,cl
c000e420:	89 17                	mov    DWORD PTR [edi],edx
c000e422:	29 0b                	sub    DWORD PTR [ebx],ecx
c000e424:	c6 06 01             	mov    BYTE PTR [esi],0x1
c000e427:	eb 05                	jmp    c000e42e <CmGetShift(unsigned int*, int*, int, bool*)+0x33>
c000e429:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000e42c:	31 c0                	xor    eax,eax
c000e42e:	5b                   	pop    ebx
c000e42f:	5e                   	pop    esi
c000e430:	5f                   	pop    edi
c000e431:	c3                   	ret    

c000e432 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>:
c000e432:	83 ec 40             	sub    esp,0x40
c000e435:	8d 44 24 09          	lea    eax,[esp+0x9]
c000e439:	50                   	push   eax
c000e43a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000e43e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000e442:	e8 4d fa ff ff       	call   c000de94 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000e447:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000e44b:	8b 54 24 2b          	mov    edx,DWORD PTR [esp+0x2b]
c000e44f:	8b 4c 24 2f          	mov    ecx,DWORD PTR [esp+0x2f]
c000e453:	89 10                	mov    DWORD PTR [eax],edx
c000e455:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000e458:	83 c4 4c             	add    esp,0x4c
c000e45b:	c3                   	ret    

c000e45c <CmSetInteger(Reghive_Tag*, int, unsigned long long)>:
c000e45c:	55                   	push   ebp
c000e45d:	57                   	push   edi
c000e45e:	56                   	push   esi
c000e45f:	53                   	push   ebx
c000e460:	83 ec 40             	sub    esp,0x40
c000e463:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c000e467:	8d 5c 24 09          	lea    ebx,[esp+0x9]
c000e46b:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c000e46f:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000e473:	53                   	push   ebx
c000e474:	56                   	push   esi
c000e475:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000e479:	e8 16 fa ff ff       	call   c000de94 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000e47e:	89 7c 24 2b          	mov    DWORD PTR [esp+0x2b],edi
c000e482:	89 6c 24 2f          	mov    DWORD PTR [esp+0x2f],ebp
c000e486:	83 c4 0c             	add    esp,0xc
c000e489:	53                   	push   ebx
c000e48a:	56                   	push   esi
c000e48b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000e48f:	e8 24 fb ff ff       	call   c000dfb8 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000e494:	83 c4 4c             	add    esp,0x4c
c000e497:	5b                   	pop    ebx
c000e498:	5e                   	pop    esi
c000e499:	5f                   	pop    edi
c000e49a:	5d                   	pop    ebp
c000e49b:	c3                   	ret    

c000e49c <CmConvertFromInternalFilename(unsigned char const*, char*)>:
c000e49c:	55                   	push   ebp
c000e49d:	57                   	push   edi
c000e49e:	56                   	push   esi
c000e49f:	31 f6                	xor    esi,esi
c000e4a1:	53                   	push   ebx
c000e4a2:	31 db                	xor    ebx,ebx
c000e4a4:	83 ec 40             	sub    esp,0x40
c000e4a7:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000e4af:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000e4b7:	6a 12                	push   0x12
c000e4b9:	68 ee 00 00 00       	push   0xee
c000e4be:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c000e4c2:	e8 29 20 ff ff       	call   c00004f0 <memset>
c000e4c7:	83 c4 10             	add    esp,0x10
c000e4ca:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000e4ce:	6a 08                	push   0x8
c000e4d0:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e4d4:	0f b6 04 18          	movzx  eax,BYTE PTR [eax+ebx*1]
c000e4d8:	50                   	push   eax
c000e4d9:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000e4dd:	55                   	push   ebp
c000e4de:	57                   	push   edi
c000e4df:	e8 e7 fe ff ff       	call   c000e3cb <CmAddShift(unsigned int*, int*, unsigned char, int)>
c000e4e4:	83 c4 10             	add    esp,0x10
c000e4e7:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000e4eb:	50                   	push   eax
c000e4ec:	6a 06                	push   0x6
c000e4ee:	55                   	push   ebp
c000e4ef:	57                   	push   edi
c000e4f0:	e8 06 ff ff ff       	call   c000e3fb <CmGetShift(unsigned int*, int*, int, bool*)>
c000e4f5:	83 c4 10             	add    esp,0x10
c000e4f8:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000e4fd:	74 07                	je     c000e506 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x6a>
c000e4ff:	46                   	inc    esi
c000e500:	88 44 34 17          	mov    BYTE PTR [esp+esi*1+0x17],al
c000e504:	eb e1                	jmp    c000e4e7 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x4b>
c000e506:	43                   	inc    ebx
c000e507:	83 fb 12             	cmp    ebx,0x12
c000e50a:	75 c2                	jne    c000e4ce <CmConvertFromInternalFilename(unsigned char const*, char*)+0x32>
c000e50c:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e510:	31 f6                	xor    esi,esi
c000e512:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000e515:	50                   	push   eax
c000e516:	50                   	push   eax
c000e517:	0f b6 44 34 20       	movzx  eax,BYTE PTR [esp+esi*1+0x20]
c000e51c:	46                   	inc    esi
c000e51d:	8d 04 85 60 f5 02 c0 	lea    eax,[eax*4-0x3ffd0aa0]
c000e524:	50                   	push   eax
c000e525:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c000e529:	e8 42 23 ff ff       	call   c0000870 <strcat>
c000e52e:	83 c4 10             	add    esp,0x10
c000e531:	83 fe 18             	cmp    esi,0x18
c000e534:	75 df                	jne    c000e515 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x79>
c000e536:	83 c4 3c             	add    esp,0x3c
c000e539:	31 c0                	xor    eax,eax
c000e53b:	5b                   	pop    ebx
c000e53c:	5e                   	pop    esi
c000e53d:	5f                   	pop    edi
c000e53e:	5d                   	pop    ebp
c000e53f:	c3                   	ret    

c000e540 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>:
c000e540:	83 ec 40             	sub    esp,0x40
c000e543:	8d 44 24 09          	lea    eax,[esp+0x9]
c000e547:	50                   	push   eax
c000e548:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000e54c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000e550:	e8 3f f9 ff ff       	call   c000de94 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000e555:	58                   	pop    eax
c000e556:	5a                   	pop    edx
c000e557:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c000e55b:	8d 44 24 15          	lea    eax,[esp+0x15]
c000e55f:	50                   	push   eax
c000e560:	e8 37 ff ff ff       	call   c000e49c <CmConvertFromInternalFilename(unsigned char const*, char*)>
c000e565:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c000e56a:	83 c4 4c             	add    esp,0x4c
c000e56d:	c3                   	ret    

c000e56e <CmConvertToInternalFilename(char const*, unsigned char*)>:
c000e56e:	55                   	push   ebp
c000e56f:	57                   	push   edi
c000e570:	56                   	push   esi
c000e571:	53                   	push   ebx
c000e572:	31 db                	xor    ebx,ebx
c000e574:	83 ec 70             	sub    esp,0x70
c000e577:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
c000e57e:	6a 30                	push   0x30
c000e580:	6a 00                	push   0x0
c000e582:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c000e586:	56                   	push   esi
c000e587:	e8 64 1f ff ff       	call   c00004f0 <memset>
c000e58c:	83 c4 10             	add    esp,0x10
c000e58f:	83 ec 0c             	sub    esp,0xc
c000e592:	57                   	push   edi
c000e593:	e8 e8 1f ff ff       	call   c0000580 <strlen>
c000e598:	83 c4 10             	add    esp,0x10
c000e59b:	39 d8                	cmp    eax,ebx
c000e59d:	76 16                	jbe    c000e5b5 <CmConvertToInternalFilename(char const*, unsigned char*)+0x47>
c000e59f:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c000e5a3:	83 ec 0c             	sub    esp,0xc
c000e5a6:	50                   	push   eax
c000e5a7:	e8 b4 23 ff ff       	call   c0000960 <toupper>
c000e5ac:	83 c4 10             	add    esp,0x10
c000e5af:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c000e5b2:	43                   	inc    ebx
c000e5b3:	eb da                	jmp    c000e58f <CmConvertToInternalFilename(char const*, unsigned char*)+0x21>
c000e5b5:	52                   	push   edx
c000e5b6:	31 db                	xor    ebx,ebx
c000e5b8:	6a 18                	push   0x18
c000e5ba:	31 ff                	xor    edi,edi
c000e5bc:	6a 3f                	push   0x3f
c000e5be:	8d 44 24 24          	lea    eax,[esp+0x24]
c000e5c2:	50                   	push   eax
c000e5c3:	e8 28 1f ff ff       	call   c00004f0 <memset>
c000e5c8:	83 c4 10             	add    esp,0x10
c000e5cb:	8a 44 1c 30          	mov    al,BYTE PTR [esp+ebx*1+0x30]
c000e5cf:	8d 74 24 10          	lea    esi,[esp+0x10]
c000e5d3:	84 c0                	test   al,al
c000e5d5:	0f 84 af 00 00 00    	je     c000e68a <CmConvertToInternalFilename(char const*, unsigned char*)+0x11c>
c000e5db:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c000e5df:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000e5e2:	83 ec 0c             	sub    esp,0xc
c000e5e5:	c6 44 24 22 00       	mov    BYTE PTR [esp+0x22],0x0
c000e5ea:	8a 54 2c 3c          	mov    dl,BYTE PTR [esp+ebp*1+0x3c]
c000e5ee:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c000e5f2:	c6 44 24 1d 00       	mov    BYTE PTR [esp+0x1d],0x0
c000e5f7:	88 54 24 21          	mov    BYTE PTR [esp+0x21],dl
c000e5fb:	56                   	push   esi
c000e5fc:	e8 7f 1f ff ff       	call   c0000580 <strlen>
c000e601:	83 c4 10             	add    esp,0x10
c000e604:	85 c0                	test   eax,eax
c000e606:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000e60a:	74 0b                	je     c000e617 <CmConvertToInternalFilename(char const*, unsigned char*)+0xa9>
c000e60c:	50                   	push   eax
c000e60d:	6a 01                	push   0x1
c000e60f:	56                   	push   esi
c000e610:	8d 44 24 20          	lea    eax,[esp+0x20]
c000e614:	50                   	push   eax
c000e615:	eb 0a                	jmp    c000e621 <CmConvertToInternalFilename(char const*, unsigned char*)+0xb3>
c000e617:	50                   	push   eax
c000e618:	6a 00                	push   0x0
c000e61a:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c000e61e:	50                   	push   eax
c000e61f:	6a 00                	push   0x0
c000e621:	e8 44 fd ff ff       	call   c000e36a <CmGetMatch(char*, char*, bool, bool*)>
c000e626:	83 c4 10             	add    esp,0x10
c000e629:	83 f8 ff             	cmp    eax,0xffffffff
c000e62c:	75 1a                	jne    c000e648 <CmConvertToInternalFilename(char const*, unsigned char*)+0xda>
c000e62e:	83 ec 0c             	sub    esp,0xc
c000e631:	68 e8 b2 02 c0       	push   0xc002b2e8
c000e636:	e8 25 1f 00 00       	call   c0010560 <KePanic(char const*)>
c000e63b:	83 c4 10             	add    esp,0x10
c000e63e:	b8 02 00 00 00       	mov    eax,0x2
c000e643:	e9 bb 00 00 00       	jmp    c000e703 <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c000e648:	83 ff 18             	cmp    edi,0x18
c000e64b:	75 1a                	jne    c000e667 <CmConvertToInternalFilename(char const*, unsigned char*)+0xf9>
c000e64d:	83 ec 0c             	sub    esp,0xc
c000e650:	68 fd b2 02 c0       	push   0xc002b2fd
c000e655:	e8 06 1f 00 00       	call   c0010560 <KePanic(char const*)>
c000e65a:	83 c4 10             	add    esp,0x10
c000e65d:	b8 01 00 00 00       	mov    eax,0x1
c000e662:	e9 9c 00 00 00       	jmp    c000e703 <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c000e667:	47                   	inc    edi
c000e668:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000e66d:	88 44 3c 17          	mov    BYTE PTR [esp+edi*1+0x17],al
c000e671:	0f 45 dd             	cmovne ebx,ebp
c000e674:	83 ec 0c             	sub    esp,0xc
c000e677:	56                   	push   esi
c000e678:	e8 03 1f ff ff       	call   c0000580 <strlen>
c000e67d:	83 c4 10             	add    esp,0x10
c000e680:	85 c0                	test   eax,eax
c000e682:	74 06                	je     c000e68a <CmConvertToInternalFilename(char const*, unsigned char*)+0x11c>
c000e684:	43                   	inc    ebx
c000e685:	e9 41 ff ff ff       	jmp    c000e5cb <CmConvertToInternalFilename(char const*, unsigned char*)+0x5d>
c000e68a:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000e692:	31 db                	xor    ebx,ebx
c000e694:	31 ff                	xor    edi,edi
c000e696:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000e69e:	50                   	push   eax
c000e69f:	6a 12                	push   0x12
c000e6a1:	68 ee 00 00 00       	push   0xee
c000e6a6:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c000e6ad:	e8 3e 1e ff ff       	call   c00004f0 <memset>
c000e6b2:	83 c4 10             	add    esp,0x10
c000e6b5:	8d 6c 24 14          	lea    ebp,[esp+0x14]
c000e6b9:	83 fb 17             	cmp    ebx,0x17
c000e6bc:	7e 26                	jle    c000e6e4 <CmConvertToInternalFilename(char const*, unsigned char*)+0x176>
c000e6be:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000e6c2:	50                   	push   eax
c000e6c3:	6a 08                	push   0x8
c000e6c5:	55                   	push   ebp
c000e6c6:	56                   	push   esi
c000e6c7:	e8 2f fd ff ff       	call   c000e3fb <CmGetShift(unsigned int*, int*, int, bool*)>
c000e6cc:	83 c4 10             	add    esp,0x10
c000e6cf:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000e6d4:	74 26                	je     c000e6fc <CmConvertToInternalFilename(char const*, unsigned char*)+0x18e>
c000e6d6:	8b 8c 24 84 00 00 00 	mov    ecx,DWORD PTR [esp+0x84]
c000e6dd:	4b                   	dec    ebx
c000e6de:	88 04 39             	mov    BYTE PTR [ecx+edi*1],al
c000e6e1:	47                   	inc    edi
c000e6e2:	eb 1c                	jmp    c000e700 <CmConvertToInternalFilename(char const*, unsigned char*)+0x192>
c000e6e4:	6a 06                	push   0x6
c000e6e6:	0f b6 44 1c 1c       	movzx  eax,BYTE PTR [esp+ebx*1+0x1c]
c000e6eb:	50                   	push   eax
c000e6ec:	55                   	push   ebp
c000e6ed:	56                   	push   esi
c000e6ee:	e8 d8 fc ff ff       	call   c000e3cb <CmAddShift(unsigned int*, int*, unsigned char, int)>
c000e6f3:	83 c4 10             	add    esp,0x10
c000e6f6:	84 c0                	test   al,al
c000e6f8:	75 06                	jne    c000e700 <CmConvertToInternalFilename(char const*, unsigned char*)+0x192>
c000e6fa:	eb c2                	jmp    c000e6be <CmConvertToInternalFilename(char const*, unsigned char*)+0x150>
c000e6fc:	31 c0                	xor    eax,eax
c000e6fe:	eb 03                	jmp    c000e703 <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c000e700:	43                   	inc    ebx
c000e701:	eb b2                	jmp    c000e6b5 <CmConvertToInternalFilename(char const*, unsigned char*)+0x147>
c000e703:	83 c4 6c             	add    esp,0x6c
c000e706:	5b                   	pop    ebx
c000e707:	5e                   	pop    esi
c000e708:	5f                   	pop    edi
c000e709:	5d                   	pop    ebp
c000e70a:	c3                   	ret    

c000e70b <CmCreateString(Reghive_Tag*, int, char const*)>:
c000e70b:	53                   	push   ebx
c000e70c:	83 ec 3c             	sub    esp,0x3c
c000e70f:	6a 2b                	push   0x2b
c000e711:	6a 00                	push   0x0
c000e713:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c000e717:	53                   	push   ebx
c000e718:	e8 d3 1d ff ff       	call   c00004f0 <memset>
c000e71d:	58                   	pop    eax
c000e71e:	5a                   	pop    edx
c000e71f:	8d 44 24 11          	lea    eax,[esp+0x11]
c000e723:	50                   	push   eax
c000e724:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000e728:	e8 41 fe ff ff       	call   c000e56e <CmConvertToInternalFilename(char const*, unsigned char*)>
c000e72d:	c6 44 24 15 c1       	mov    BYTE PTR [esp+0x15],0xc1
c000e732:	83 c4 0c             	add    esp,0xc
c000e735:	6a 15                	push   0x15
c000e737:	6a 00                	push   0x0
c000e739:	8d 44 24 27          	lea    eax,[esp+0x27]
c000e73d:	50                   	push   eax
c000e73e:	e8 ad 1d ff ff       	call   c00004f0 <memset>
c000e743:	53                   	push   ebx
c000e744:	6a 00                	push   0x0
c000e746:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000e74a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000e74e:	e8 eb f9 ff ff       	call   c000e13e <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000e753:	83 c4 58             	add    esp,0x58
c000e756:	5b                   	pop    ebx
c000e757:	c3                   	ret    

c000e758 <CmFindInDirectory(Reghive_Tag*, int, char const*)>:
c000e758:	56                   	push   esi
c000e759:	53                   	push   ebx
c000e75a:	83 ec 48             	sub    esp,0x48
c000e75d:	6a 12                	push   0x12
c000e75f:	68 ff 00 00 00       	push   0xff
c000e764:	8d 74 24 0f          	lea    esi,[esp+0xf]
c000e768:	56                   	push   esi
c000e769:	e8 82 1d ff ff       	call   c00004f0 <memset>
c000e76e:	5a                   	pop    edx
c000e76f:	59                   	pop    ecx
c000e770:	56                   	push   esi
c000e771:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000e775:	e8 f4 fd ff ff       	call   c000e56e <CmConvertToInternalFilename(char const*, unsigned char*)>
c000e77a:	83 c4 10             	add    esp,0x10
c000e77d:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c000e781:	85 db                	test   ebx,ebx
c000e783:	74 42                	je     c000e7c7 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x6f>
c000e785:	50                   	push   eax
c000e786:	8d 44 24 19          	lea    eax,[esp+0x19]
c000e78a:	50                   	push   eax
c000e78b:	53                   	push   ebx
c000e78c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000e790:	e8 ff f6 ff ff       	call   c000de94 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000e795:	83 c4 0c             	add    esp,0xc
c000e798:	6a 12                	push   0x12
c000e79a:	8d 44 24 21          	lea    eax,[esp+0x21]
c000e79e:	50                   	push   eax
c000e79f:	56                   	push   esi
c000e7a0:	e8 db 1b ff ff       	call   c0000380 <memcmp>
c000e7a5:	83 c4 10             	add    esp,0x10
c000e7a8:	85 c0                	test   eax,eax
c000e7aa:	74 1e                	je     c000e7ca <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x72>
c000e7ac:	0f b6 5c 24 17       	movzx  ebx,BYTE PTR [esp+0x17]
c000e7b1:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c000e7b6:	c1 e3 08             	shl    ebx,0x8
c000e7b9:	09 d8                	or     eax,ebx
c000e7bb:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c000e7c0:	c1 e3 10             	shl    ebx,0x10
c000e7c3:	09 c3                	or     ebx,eax
c000e7c5:	eb ba                	jmp    c000e781 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x29>
c000e7c7:	83 cb ff             	or     ebx,0xffffffff
c000e7ca:	83 c4 44             	add    esp,0x44
c000e7cd:	89 d8                	mov    eax,ebx
c000e7cf:	5b                   	pop    ebx
c000e7d0:	5e                   	pop    esi
c000e7d1:	c3                   	ret    

c000e7d2 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>:
c000e7d2:	57                   	push   edi
c000e7d3:	56                   	push   esi
c000e7d4:	53                   	push   ebx
c000e7d5:	83 ec 34             	sub    esp,0x34
c000e7d8:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000e7dc:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000e7e0:	6a 2b                	push   0x2b
c000e7e2:	6a 00                	push   0x0
c000e7e4:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c000e7e8:	53                   	push   ebx
c000e7e9:	e8 02 1d ff ff       	call   c00004f0 <memset>
c000e7ee:	58                   	pop    eax
c000e7ef:	5a                   	pop    edx
c000e7f0:	8d 44 24 11          	lea    eax,[esp+0x11]
c000e7f4:	50                   	push   eax
c000e7f5:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000e7f9:	e8 70 fd ff ff       	call   c000e56e <CmConvertToInternalFilename(char const*, unsigned char*)>
c000e7fe:	8a 44 24 64          	mov    al,BYTE PTR [esp+0x64]
c000e802:	89 74 24 2b          	mov    DWORD PTR [esp+0x2b],esi
c000e806:	89 7c 24 2f          	mov    DWORD PTR [esp+0x2f],edi
c000e80a:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c000e80e:	53                   	push   ebx
c000e80f:	6a 00                	push   0x0
c000e811:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000e815:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000e819:	e8 20 f9 ff ff       	call   c000e13e <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000e81e:	83 c4 50             	add    esp,0x50
c000e821:	5b                   	pop    ebx
c000e822:	5e                   	pop    esi
c000e823:	5f                   	pop    edi
c000e824:	c3                   	ret    

c000e825 <CmCreateDirectory(Reghive_Tag*, int, char const*)>:
c000e825:	55                   	push   ebp
c000e826:	57                   	push   edi
c000e827:	56                   	push   esi
c000e828:	53                   	push   ebx
c000e829:	83 ec 40             	sub    esp,0x40
c000e82c:	8b 6c 24 58          	mov    ebp,DWORD PTR [esp+0x58]
c000e830:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c000e834:	6a 2b                	push   0x2b
c000e836:	6a 00                	push   0x0
c000e838:	8d 74 24 11          	lea    esi,[esp+0x11]
c000e83c:	56                   	push   esi
c000e83d:	e8 ae 1c ff ff       	call   c00004f0 <memset>
c000e842:	5f                   	pop    edi
c000e843:	89 ef                	mov    edi,ebp
c000e845:	58                   	pop    eax
c000e846:	8d 44 24 11          	lea    eax,[esp+0x11]
c000e84a:	50                   	push   eax
c000e84b:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000e84f:	e8 1a fd ff ff       	call   c000e56e <CmConvertToInternalFilename(char const*, unsigned char*)>
c000e854:	c6 44 24 15 4e       	mov    BYTE PTR [esp+0x15],0x4e
c000e859:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c000e85e:	c6 44 24 2c 00       	mov    BYTE PTR [esp+0x2c],0x0
c000e863:	c6 44 24 2d 00       	mov    BYTE PTR [esp+0x2d],0x0
c000e868:	83 c4 10             	add    esp,0x10
c000e86b:	85 ed                	test   ebp,ebp
c000e86d:	74 14                	je     c000e883 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c000e86f:	51                   	push   ecx
c000e870:	51                   	push   ecx
c000e871:	57                   	push   edi
c000e872:	53                   	push   ebx
c000e873:	e8 0e f7 ff ff       	call   c000df86 <CmGetNext(Reghive_Tag*, int)>
c000e878:	83 c4 10             	add    esp,0x10
c000e87b:	85 c0                	test   eax,eax
c000e87d:	74 04                	je     c000e883 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c000e87f:	89 c7                	mov    edi,eax
c000e881:	eb e8                	jmp    c000e86b <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x46>
c000e883:	56                   	push   esi
c000e884:	6a 00                	push   0x0
c000e886:	57                   	push   edi
c000e887:	53                   	push   ebx
c000e888:	e8 b1 f8 ff ff       	call   c000e13e <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000e88d:	83 c4 0c             	add    esp,0xc
c000e890:	56                   	push   esi
c000e891:	50                   	push   eax
c000e892:	89 c7                	mov    edi,eax
c000e894:	53                   	push   ebx
c000e895:	e8 fa f5 ff ff       	call   c000de94 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000e89a:	58                   	pop    eax
c000e89b:	5a                   	pop    edx
c000e89c:	6a 6c                	push   0x6c
c000e89e:	6a 00                	push   0x0
c000e8a0:	6a 00                	push   0x0
c000e8a2:	68 0e b3 02 c0       	push   0xc002b30e
c000e8a7:	57                   	push   edi
c000e8a8:	53                   	push   ebx
c000e8a9:	e8 24 ff ff ff       	call   c000e7d2 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>
c000e8ae:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c000e8b2:	88 64 24 3c          	mov    BYTE PTR [esp+0x3c],ah
c000e8b6:	c1 e8 10             	shr    eax,0x10
c000e8b9:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c000e8bd:	83 c4 1c             	add    esp,0x1c
c000e8c0:	56                   	push   esi
c000e8c1:	57                   	push   edi
c000e8c2:	53                   	push   ebx
c000e8c3:	e8 f0 f6 ff ff       	call   c000dfb8 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000e8c8:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c000e8cd:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c000e8d2:	c1 e0 08             	shl    eax,0x8
c000e8d5:	09 c2                	or     edx,eax
c000e8d7:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c000e8dc:	83 c4 4c             	add    esp,0x4c
c000e8df:	5b                   	pop    ebx
c000e8e0:	5e                   	pop    esi
c000e8e1:	c1 e0 10             	shl    eax,0x10
c000e8e4:	09 d0                	or     eax,edx
c000e8e6:	5f                   	pop    edi
c000e8e7:	5d                   	pop    ebp
c000e8e8:	c3                   	ret    

c000e8e9 <zStrtok(char*, char const*)>:
c000e8e9:	55                   	push   ebp
c000e8ea:	57                   	push   edi
c000e8eb:	56                   	push   esi
c000e8ec:	53                   	push   ebx
c000e8ed:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000e8f1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e8f5:	85 db                	test   ebx,ebx
c000e8f7:	74 2f                	je     c000e928 <zStrtok(char*, char const*)+0x3f>
c000e8f9:	85 c0                	test   eax,eax
c000e8fb:	75 09                	jne    c000e906 <zStrtok(char*, char const*)+0x1d>
c000e8fd:	a1 04 61 03 c0       	mov    eax,ds:0xc0036104
c000e902:	85 c0                	test   eax,eax
c000e904:	74 50                	je     c000e956 <zStrtok(char*, char const*)+0x6d>
c000e906:	31 c9                	xor    ecx,ecx
c000e908:	80 3c 08 00          	cmp    BYTE PTR [eax+ecx*1],0x0
c000e90c:	74 03                	je     c000e911 <zStrtok(char*, char const*)+0x28>
c000e90e:	41                   	inc    ecx
c000e90f:	eb f7                	jmp    c000e908 <zStrtok(char*, char const*)+0x1f>
c000e911:	31 d2                	xor    edx,edx
c000e913:	39 ca                	cmp    edx,ecx
c000e915:	74 15                	je     c000e92c <zStrtok(char*, char const*)+0x43>
c000e917:	0f be 34 10          	movsx  esi,BYTE PTR [eax+edx*1]
c000e91b:	8d 3c 10             	lea    edi,[eax+edx*1]
c000e91e:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c000e921:	39 ee                	cmp    esi,ebp
c000e923:	74 13                	je     c000e938 <zStrtok(char*, char const*)+0x4f>
c000e925:	42                   	inc    edx
c000e926:	eb eb                	jmp    c000e913 <zStrtok(char*, char const*)+0x2a>
c000e928:	31 c0                	xor    eax,eax
c000e92a:	eb 2a                	jmp    c000e956 <zStrtok(char*, char const*)+0x6d>
c000e92c:	c7 05 04 61 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0036104,0x0
c000e936:	eb 1e                	jmp    c000e956 <zStrtok(char*, char const*)+0x6d>
c000e938:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c000e93b:	39 ce                	cmp    esi,ecx
c000e93d:	75 0a                	jne    c000e949 <zStrtok(char*, char const*)+0x60>
c000e93f:	40                   	inc    eax
c000e940:	a3 04 61 03 c0       	mov    ds:0xc0036104,eax
c000e945:	89 d8                	mov    eax,ebx
c000e947:	eb 0d                	jmp    c000e956 <zStrtok(char*, char const*)+0x6d>
c000e949:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000e94c:	8d 54 10 01          	lea    edx,[eax+edx*1+0x1]
c000e950:	89 15 04 61 03 c0    	mov    DWORD PTR ds:0xc0036104,edx
c000e956:	5b                   	pop    ebx
c000e957:	5e                   	pop    esi
c000e958:	5f                   	pop    edi
c000e959:	5d                   	pop    ebp
c000e95a:	c3                   	ret    

c000e95b <CmFindObjectFromPath(Reghive_Tag*, char const*)>:
c000e95b:	57                   	push   edi
c000e95c:	56                   	push   esi
c000e95d:	53                   	push   ebx
c000e95e:	81 ec 08 01 00 00    	sub    esp,0x108
c000e964:	8b bc 24 18 01 00 00 	mov    edi,DWORD PTR [esp+0x118]
c000e96b:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c000e972:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000e976:	53                   	push   ebx
c000e977:	e8 d4 1c ff ff       	call   c0000650 <strcpy>
c000e97c:	59                   	pop    ecx
c000e97d:	5e                   	pop    esi
c000e97e:	68 b6 c1 02 c0       	push   0xc002c1b6
c000e983:	53                   	push   ebx
c000e984:	bb 01 00 00 00       	mov    ebx,0x1
c000e989:	e8 5b ff ff ff       	call   c000e8e9 <zStrtok(char*, char const*)>
c000e98e:	83 c4 10             	add    esp,0x10
c000e991:	85 c0                	test   eax,eax
c000e993:	74 3b                	je     c000e9d0 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c000e995:	52                   	push   edx
c000e996:	50                   	push   eax
c000e997:	6a 01                	push   0x1
c000e999:	57                   	push   edi
c000e99a:	e8 b9 fd ff ff       	call   c000e758 <CmFindInDirectory(Reghive_Tag*, int, char const*)>
c000e99f:	59                   	pop    ecx
c000e9a0:	5e                   	pop    esi
c000e9a1:	89 c3                	mov    ebx,eax
c000e9a3:	68 b6 c1 02 c0       	push   0xc002c1b6
c000e9a8:	6a 00                	push   0x0
c000e9aa:	e8 3a ff ff ff       	call   c000e8e9 <zStrtok(char*, char const*)>
c000e9af:	83 c4 10             	add    esp,0x10
c000e9b2:	85 c0                	test   eax,eax
c000e9b4:	89 c6                	mov    esi,eax
c000e9b6:	74 18                	je     c000e9d0 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c000e9b8:	52                   	push   edx
c000e9b9:	52                   	push   edx
c000e9ba:	53                   	push   ebx
c000e9bb:	57                   	push   edi
c000e9bc:	e8 86 f5 ff ff       	call   c000df47 <CmEnterDirectory(Reghive_Tag*, int)>
c000e9c1:	83 c4 10             	add    esp,0x10
c000e9c4:	83 f8 ff             	cmp    eax,0xffffffff
c000e9c7:	89 c3                	mov    ebx,eax
c000e9c9:	74 05                	je     c000e9d0 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c000e9cb:	50                   	push   eax
c000e9cc:	56                   	push   esi
c000e9cd:	53                   	push   ebx
c000e9ce:	eb c9                	jmp    c000e999 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x3e>
c000e9d0:	81 c4 00 01 00 00    	add    esp,0x100
c000e9d6:	89 d8                	mov    eax,ebx
c000e9d8:	5b                   	pop    ebx
c000e9d9:	5e                   	pop    esi
c000e9da:	5f                   	pop    edi
c000e9db:	c3                   	ret    

c000e9dc <Computer::close(int, int, void*)>:
c000e9dc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e9e1:	c3                   	ret    

c000e9e2 <Computer::Computer()>:
c000e9e2:	83 ec 0c             	sub    esp,0xc
c000e9e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e9e9:	83 ec 08             	sub    esp,0x8
c000e9ec:	68 48 a6 02 c0       	push   0xc002a648
c000e9f1:	50                   	push   eax
c000e9f2:	e8 89 bb ff ff       	call   c000a580 <Device::Device(char const*)>
c000e9f7:	83 c4 10             	add    esp,0x10
c000e9fa:	ba 60 b3 02 c0       	mov    edx,0xc002b360
c000e9ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea03:	89 10                	mov    DWORD PTR [eax],edx
c000ea05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea09:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000ea13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea17:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000ea21:	90                   	nop
c000ea22:	83 c4 0c             	add    esp,0xc
c000ea25:	c3                   	ret    

c000ea26 <Computer::open(int, int, void*)>:
c000ea26:	56                   	push   esi
c000ea27:	53                   	push   ebx
c000ea28:	83 ec 04             	sub    esp,0x4
c000ea2b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ea2f:	39 1d 08 61 03 c0    	cmp    DWORD PTR ds:0xc0036108,ebx
c000ea35:	74 10                	je     c000ea47 <Computer::open(int, int, void*)+0x21>
c000ea37:	83 ec 0c             	sub    esp,0xc
c000ea3a:	68 2c b3 02 c0       	push   0xc002b32c
c000ea3f:	e8 1c 1b 00 00       	call   c0010560 <KePanic(char const*)>
c000ea44:	83 c4 10             	add    esp,0x10
c000ea47:	83 ec 0c             	sub    esp,0xc
c000ea4a:	68 78 11 00 00       	push   0x1178
c000ea4f:	e8 b8 16 00 00       	call   c001010c <malloc>
c000ea54:	89 04 24             	mov    DWORD PTR [esp],eax
c000ea57:	89 c6                	mov    esi,eax
c000ea59:	e8 dc c9 00 00       	call   c001b43a <CPU::CPU()>
c000ea5e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ea62:	89 b3 5c 01 00 00    	mov    DWORD PTR [ebx+0x15c],esi
c000ea68:	50                   	push   eax
c000ea69:	6a 00                	push   0x0
c000ea6b:	6a 00                	push   0x0
c000ea6d:	56                   	push   esi
c000ea6e:	e8 a9 cb 00 00       	call   c001b61c <CPU::open(int, int, void*)>
c000ea73:	83 c4 14             	add    esp,0x14
c000ea76:	68 14 b3 02 c0       	push   0xc002b314
c000ea7b:	e8 e1 f1 ff ff       	call   c000dc61 <KeSetBootMessage(char const*)>
c000ea80:	e8 5b 8d ff ff       	call   c00077e0 <KeSetupDeviceTree()>
c000ea85:	e8 83 8c ff ff       	call   c000770d <KePrintDeviceTree()>
c000ea8a:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c000ea91:	e8 76 16 00 00       	call   c001010c <malloc>
c000ea96:	89 04 24             	mov    DWORD PTR [esp],eax
c000ea99:	89 c6                	mov    esi,eax
c000ea9b:	e8 08 e8 ff ff       	call   c000d2a8 <ACPI::ACPI()>
c000eaa0:	89 b3 64 01 00 00    	mov    DWORD PTR [ebx+0x164],esi
c000eaa6:	5a                   	pop    edx
c000eaa7:	59                   	pop    ecx
c000eaa8:	56                   	push   esi
c000eaa9:	53                   	push   ebx
c000eaaa:	e8 6f b9 ff ff       	call   c000a41e <Device::addChild(Device*)>
c000eaaf:	5e                   	pop    esi
c000eab0:	58                   	pop    eax
c000eab1:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000eab7:	50                   	push   eax
c000eab8:	53                   	push   ebx
c000eab9:	e8 60 b9 ff ff       	call   c000a41e <Device::addChild(Device*)>
c000eabe:	83 c4 14             	add    esp,0x14
c000eac1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000eac6:	5b                   	pop    ebx
c000eac7:	5e                   	pop    esi
c000eac8:	c3                   	ret    

c000eac9 <KeCalculateCRC32(unsigned char*, int)>:
c000eac9:	53                   	push   ebx
c000eaca:	83 c8 ff             	or     eax,0xffffffff
c000eacd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000ead1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000ead5:	01 cb                	add    ebx,ecx
c000ead7:	39 d9                	cmp    ecx,ebx
c000ead9:	74 15                	je     c000eaf0 <KeCalculateCRC32(unsigned char*, int)+0x27>
c000eadb:	41                   	inc    ecx
c000eadc:	8a 51 ff             	mov    dl,BYTE PTR [ecx-0x1]
c000eadf:	31 c2                	xor    edx,eax
c000eae1:	c1 e8 08             	shr    eax,0x8
c000eae4:	0f b6 d2             	movzx  edx,dl
c000eae7:	33 04 95 60 f6 02 c0 	xor    eax,DWORD PTR [edx*4-0x3ffd09a0]
c000eaee:	eb e7                	jmp    c000ead7 <KeCalculateCRC32(unsigned char*, int)+0xe>
c000eaf0:	5b                   	pop    ebx
c000eaf1:	f7 d0                	not    eax
c000eaf3:	c3                   	ret    

c000eaf4 <EnvVarContainer::getEnv(char const*)>:
c000eaf4:	57                   	push   edi
c000eaf5:	56                   	push   esi
c000eaf6:	53                   	push   ebx
c000eaf7:	31 db                	xor    ebx,ebx
c000eaf9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000eafd:	39 1e                	cmp    DWORD PTR [esi],ebx
c000eaff:	7e 2b                	jle    c000eb2c <EnvVarContainer::getEnv(char const*)+0x38>
c000eb01:	50                   	push   eax
c000eb02:	50                   	push   eax
c000eb03:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000eb06:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c000eb0d:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000eb10:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000eb14:	e8 67 1c ff ff       	call   c0000780 <strcmp>
c000eb19:	83 c4 10             	add    esp,0x10
c000eb1c:	85 c0                	test   eax,eax
c000eb1e:	75 09                	jne    c000eb29 <EnvVarContainer::getEnv(char const*)+0x35>
c000eb20:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000eb23:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c000eb27:	eb 05                	jmp    c000eb2e <EnvVarContainer::getEnv(char const*)+0x3a>
c000eb29:	43                   	inc    ebx
c000eb2a:	eb d1                	jmp    c000eafd <EnvVarContainer::getEnv(char const*)+0x9>
c000eb2c:	31 c0                	xor    eax,eax
c000eb2e:	5b                   	pop    ebx
c000eb2f:	5e                   	pop    esi
c000eb30:	5f                   	pop    edi
c000eb31:	c3                   	ret    

c000eb32 <EnvVarContainer::setEnv(char const*, char const*)>:
c000eb32:	55                   	push   ebp
c000eb33:	57                   	push   edi
c000eb34:	56                   	push   esi
c000eb35:	53                   	push   ebx
c000eb36:	83 ec 28             	sub    esp,0x28
c000eb39:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000eb3d:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000eb41:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000eb45:	56                   	push   esi
c000eb46:	e8 35 1a ff ff       	call   c0000580 <strlen>
c000eb4b:	40                   	inc    eax
c000eb4c:	89 04 24             	mov    DWORD PTR [esp],eax
c000eb4f:	e8 b8 15 00 00       	call   c001010c <malloc>
c000eb54:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eb57:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000eb5b:	e8 20 1a ff ff       	call   c0000580 <strlen>
c000eb60:	40                   	inc    eax
c000eb61:	89 04 24             	mov    DWORD PTR [esp],eax
c000eb64:	e8 a3 15 00 00       	call   c001010c <malloc>
c000eb69:	89 34 24             	mov    DWORD PTR [esp],esi
c000eb6c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000eb70:	e8 0b 1a ff ff       	call   c0000580 <strlen>
c000eb75:	83 c4 0c             	add    esp,0xc
c000eb78:	40                   	inc    eax
c000eb79:	50                   	push   eax
c000eb7a:	6a 00                	push   0x0
c000eb7c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000eb80:	e8 6b 19 ff ff       	call   c00004f0 <memset>
c000eb85:	89 34 24             	mov    DWORD PTR [esp],esi
c000eb88:	e8 f3 19 ff ff       	call   c0000580 <strlen>
c000eb8d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000eb91:	8d 48 01             	lea    ecx,[eax+0x1]
c000eb94:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000eb96:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eb99:	89 de                	mov    esi,ebx
c000eb9b:	e8 e0 19 ff ff       	call   c0000580 <strlen>
c000eba0:	83 c4 0c             	add    esp,0xc
c000eba3:	40                   	inc    eax
c000eba4:	50                   	push   eax
c000eba5:	6a 00                	push   0x0
c000eba7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ebab:	e8 40 19 ff ff       	call   c00004f0 <memset>
c000ebb0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ebb3:	e8 c8 19 ff ff       	call   c0000580 <strlen>
c000ebb8:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000ebbc:	8d 48 01             	lea    ecx,[eax+0x1]
c000ebbf:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ebc1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ebc4:	40                   	inc    eax
c000ebc5:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ebc8:	c1 e0 03             	shl    eax,0x3
c000ebcb:	5a                   	pop    edx
c000ebcc:	59                   	pop    ecx
c000ebcd:	50                   	push   eax
c000ebce:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ebd1:	e8 22 15 00 00       	call   c00100f8 <realloc>
c000ebd6:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000ebd9:	8d 74 24 18          	lea    esi,[esp+0x18]
c000ebdd:	b9 08 00 00 00       	mov    ecx,0x8
c000ebe2:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000ebe5:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000ebe9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ebeb:	83 c4 2c             	add    esp,0x2c
c000ebee:	5b                   	pop    ebx
c000ebef:	5e                   	pop    esi
c000ebf0:	5f                   	pop    edi
c000ebf1:	5d                   	pop    ebp
c000ebf2:	c3                   	ret    
c000ebf3:	90                   	nop

c000ebf4 <EnvVarContainer::deleteEnv(char const*)>:
c000ebf4:	c3                   	ret    
c000ebf5:	90                   	nop

c000ebf6 <EnvVarContainer::loadFrom(char const*, char const*)>:
c000ebf6:	55                   	push   ebp
c000ebf7:	57                   	push   edi
c000ebf8:	56                   	push   esi
c000ebf9:	53                   	push   ebx
c000ebfa:	81 ec 38 01 00 00    	sub    esp,0x138
c000ec00:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c000ec07:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c000ec0e:	68 14 01 00 00       	push   0x114
c000ec13:	e8 f4 14 00 00       	call   c001010c <malloc>
c000ec18:	83 c4 0c             	add    esp,0xc
c000ec1b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000ec1e:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000ec25:	89 c3                	mov    ebx,eax
c000ec27:	50                   	push   eax
c000ec28:	e8 85 9f ff ff       	call   c0008bb2 <File::File(char const*, Process*)>
c000ec2d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ec30:	e8 5f a2 ff ff       	call   c0008e94 <File::exists()>
c000ec35:	83 c4 10             	add    esp,0x10
c000ec38:	84 c0                	test   al,al
c000ec3a:	75 31                	jne    c000ec6d <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c000ec3c:	50                   	push   eax
c000ec3d:	50                   	push   eax
c000ec3e:	6a 12                	push   0x12
c000ec40:	53                   	push   ebx
c000ec41:	e8 8a 9f ff ff       	call   c0008bd0 <File::open(FileOpenMode)>
c000ec46:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ec48:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000ec4b:	89 34 24             	mov    DWORD PTR [esp],esi
c000ec4e:	e8 2d 19 ff ff       	call   c0000580 <strlen>
c000ec53:	5a                   	pop    edx
c000ec54:	8d 54 24 20          	lea    edx,[esp+0x20]
c000ec58:	52                   	push   edx
c000ec59:	31 d2                	xor    edx,edx
c000ec5b:	56                   	push   esi
c000ec5c:	52                   	push   edx
c000ec5d:	50                   	push   eax
c000ec5e:	53                   	push   ebx
c000ec5f:	ff d7                	call   edi
c000ec61:	83 c4 14             	add    esp,0x14
c000ec64:	53                   	push   ebx
c000ec65:	e8 c4 9f ff ff       	call   c0008c2e <File::close()>
c000ec6a:	83 c4 10             	add    esp,0x10
c000ec6d:	56                   	push   esi
c000ec6e:	31 f6                	xor    esi,esi
c000ec70:	68 00 01 00 00       	push   0x100
c000ec75:	6a 00                	push   0x0
c000ec77:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000ec7b:	50                   	push   eax
c000ec7c:	e8 6f 18 ff ff       	call   c00004f0 <memset>
c000ec81:	5f                   	pop    edi
c000ec82:	58                   	pop    eax
c000ec83:	6a 01                	push   0x1
c000ec85:	53                   	push   ebx
c000ec86:	e8 45 9f ff ff       	call   c0008bd0 <File::open(FileOpenMode)>
c000ec8b:	83 c4 10             	add    esp,0x10
c000ec8e:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000ec96:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000ec9e:	83 ec 0c             	sub    esp,0xc
c000eca1:	8d 54 24 20          	lea    edx,[esp+0x20]
c000eca5:	8b 03                	mov    eax,DWORD PTR [ebx]
c000eca7:	52                   	push   edx
c000eca8:	8d 4c 24 23          	lea    ecx,[esp+0x23]
c000ecac:	51                   	push   ecx
c000ecad:	6a 00                	push   0x0
c000ecaf:	6a 01                	push   0x1
c000ecb1:	53                   	push   ebx
c000ecb2:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000ecb5:	0f be 44 24 33       	movsx  eax,BYTE PTR [esp+0x33]
c000ecba:	83 c4 20             	add    esp,0x20
c000ecbd:	85 c0                	test   eax,eax
c000ecbf:	89 c1                	mov    ecx,eax
c000ecc1:	0f 84 36 01 00 00    	je     c000edfd <EnvVarContainer::loadFrom(char const*, char const*)+0x207>
c000ecc7:	83 f8 0d             	cmp    eax,0xd
c000ecca:	0f 84 22 01 00 00    	je     c000edf2 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000ecd0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000ecd5:	0f 84 f0 00 00 00    	je     c000edcb <EnvVarContainer::loadFrom(char const*, char const*)+0x1d5>
c000ecdb:	83 f8 0a             	cmp    eax,0xa
c000ecde:	74 13                	je     c000ecf3 <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c000ece0:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000ece5:	74 0c                	je     c000ecf3 <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c000ece7:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000eced:	0f 8e f6 00 00 00    	jle    c000ede9 <EnvVarContainer::loadFrom(char const*, char const*)+0x1f3>
c000ecf3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ecf7:	83 ec 0c             	sub    esp,0xc
c000ecfa:	8d 78 01             	lea    edi,[eax+0x1]
c000ecfd:	57                   	push   edi
c000ecfe:	e8 09 14 00 00       	call   c001010c <malloc>
c000ed03:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c000ed07:	8d 56 04             	lea    edx,[esi+0x4]
c000ed0a:	89 14 24             	mov    DWORD PTR [esp],edx
c000ed0d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ed11:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ed15:	e8 f2 13 00 00       	call   c001010c <malloc>
c000ed1a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000ed1e:	83 c4 0c             	add    esp,0xc
c000ed21:	57                   	push   edi
c000ed22:	6a 00                	push   0x0
c000ed24:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ed28:	e8 c3 17 ff ff       	call   c00004f0 <memset>
c000ed2d:	8d 74 24 30          	lea    esi,[esp+0x30]
c000ed31:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000ed35:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000ed39:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ed3b:	83 c4 0c             	add    esp,0xc
c000ed3e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ed42:	52                   	push   edx
c000ed43:	6a 00                	push   0x0
c000ed45:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ed49:	e8 a2 17 ff ff       	call   c00004f0 <memset>
c000ed4e:	8d 74 24 30          	lea    esi,[esp+0x30]
c000ed52:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c000ed56:	89 34 24             	mov    DWORD PTR [esp],esi
c000ed59:	e8 22 18 ff ff       	call   c0000580 <strlen>
c000ed5e:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c000ed62:	89 c1                	mov    ecx,eax
c000ed64:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ed66:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ed69:	83 c4 10             	add    esp,0x10
c000ed6c:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000ed6f:	40                   	inc    eax
c000ed70:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ed73:	85 d2                	test   edx,edx
c000ed75:	75 0c                	jne    c000ed83 <EnvVarContainer::loadFrom(char const*, char const*)+0x18d>
c000ed77:	83 ec 0c             	sub    esp,0xc
c000ed7a:	6a 08                	push   0x8
c000ed7c:	e8 8b 13 00 00       	call   c001010c <malloc>
c000ed81:	eb 0c                	jmp    c000ed8f <EnvVarContainer::loadFrom(char const*, char const*)+0x199>
c000ed83:	51                   	push   ecx
c000ed84:	51                   	push   ecx
c000ed85:	c1 e0 03             	shl    eax,0x3
c000ed88:	50                   	push   eax
c000ed89:	52                   	push   edx
c000ed8a:	e8 69 13 00 00       	call   c00100f8 <realloc>
c000ed8f:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000ed92:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000ed95:	83 c4 10             	add    esp,0x10
c000ed98:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c000ed9b:	8d 74 24 18          	lea    esi,[esp+0x18]
c000ed9f:	b9 08 00 00 00       	mov    ecx,0x8
c000eda4:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000eda8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000edaa:	50                   	push   eax
c000edab:	31 f6                	xor    esi,esi
c000edad:	68 00 01 00 00       	push   0x100
c000edb2:	6a 00                	push   0x0
c000edb4:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000edb8:	50                   	push   eax
c000edb9:	e8 32 17 ff ff       	call   c00004f0 <memset>
c000edbe:	83 c4 10             	add    esp,0x10
c000edc1:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000edc9:	eb 27                	jmp    c000edf2 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000edcb:	83 f8 3d             	cmp    eax,0x3d
c000edce:	74 1e                	je     c000edee <EnvVarContainer::loadFrom(char const*, char const*)+0x1f8>
c000edd0:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000edd6:	7f 07                	jg     c000eddf <EnvVarContainer::loadFrom(char const*, char const*)+0x1e9>
c000edd8:	88 4c 34 20          	mov    BYTE PTR [esp+esi*1+0x20],cl
c000eddc:	46                   	inc    esi
c000eddd:	eb 13                	jmp    c000edf2 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000eddf:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c000ede7:	eb 09                	jmp    c000edf2 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000ede9:	83 f8 3d             	cmp    eax,0x3d
c000edec:	75 ea                	jne    c000edd8 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e2>
c000edee:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000edf2:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000edf7:	0f 85 99 fe ff ff    	jne    c000ec96 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c000edfd:	83 ec 0c             	sub    esp,0xc
c000ee00:	53                   	push   ebx
c000ee01:	e8 28 9e ff ff       	call   c0008c2e <File::close()>
c000ee06:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ee08:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ee0b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000ee0e:	81 c4 3c 01 00 00    	add    esp,0x13c
c000ee14:	5b                   	pop    ebx
c000ee15:	5e                   	pop    esi
c000ee16:	5f                   	pop    edi
c000ee17:	5d                   	pop    ebp
c000ee18:	c3                   	ret    
c000ee19:	90                   	nop

c000ee1a <EnvVarContainer::__loadSystem()>:
c000ee1a:	83 ec 10             	sub    esp,0x10
c000ee1d:	68 60 fa 02 c0       	push   0xc002fa60
c000ee22:	68 84 b3 02 c0       	push   0xc002b384
c000ee27:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ee2b:	e8 c6 fd ff ff       	call   c000ebf6 <EnvVarContainer::loadFrom(char const*, char const*)>
c000ee30:	83 c4 1c             	add    esp,0x1c
c000ee33:	c3                   	ret    

c000ee34 <EnvVarContainer::__loadUser()>:
c000ee34:	c3                   	ret    
c000ee35:	90                   	nop

c000ee36 <EnvVarContainer::EnvVarContainer(Process*)>:
c000ee36:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee3a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ee40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee44:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ee48:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000ee4b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee4f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000ee56:	90                   	nop
c000ee57:	c3                   	ret    

c000ee58 <EnvVarContainer::~EnvVarContainer()>:
c000ee58:	83 ec 0c             	sub    esp,0xc
c000ee5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ee5f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ee62:	85 c0                	test   eax,eax
c000ee64:	74 1d                	je     c000ee83 <EnvVarContainer::~EnvVarContainer()+0x2b>
c000ee66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ee6a:	8b 00                	mov    eax,DWORD PTR [eax]
c000ee6c:	85 c0                	test   eax,eax
c000ee6e:	74 13                	je     c000ee83 <EnvVarContainer::~EnvVarContainer()+0x2b>
c000ee70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ee74:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ee77:	83 ec 0c             	sub    esp,0xc
c000ee7a:	50                   	push   eax
c000ee7b:	e8 9c 12 00 00       	call   c001011c <free>
c000ee80:	83 c4 10             	add    esp,0x10
c000ee83:	90                   	nop
c000ee84:	83 c4 0c             	add    esp,0xc
c000ee87:	c3                   	ret    

c000ee88 <KeGetEnv(Process*, char const*)>:
c000ee88:	53                   	push   ebx
c000ee89:	83 ec 08             	sub    esp,0x8
c000ee8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ee90:	39 05 58 63 03 c0    	cmp    DWORD PTR ds:0xc0036358,eax
c000ee96:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ee9a:	74 04                	je     c000eea0 <KeGetEnv(Process*, char const*)+0x18>
c000ee9c:	85 c0                	test   eax,eax
c000ee9e:	75 0b                	jne    c000eeab <KeGetEnv(Process*, char const*)+0x23>
c000eea0:	a1 10 61 03 c0       	mov    eax,ds:0xc0036110
c000eea5:	85 c0                	test   eax,eax
c000eea7:	75 19                	jne    c000eec2 <KeGetEnv(Process*, char const*)+0x3a>
c000eea9:	eb 27                	jmp    c000eed2 <KeGetEnv(Process*, char const*)+0x4a>
c000eeab:	52                   	push   edx
c000eeac:	52                   	push   edx
c000eead:	53                   	push   ebx
c000eeae:	ff b0 ba 07 00 00    	push   DWORD PTR [eax+0x7ba]
c000eeb4:	e8 3b fc ff ff       	call   c000eaf4 <EnvVarContainer::getEnv(char const*)>
c000eeb9:	83 c4 10             	add    esp,0x10
c000eebc:	85 c0                	test   eax,eax
c000eebe:	75 28                	jne    c000eee8 <KeGetEnv(Process*, char const*)+0x60>
c000eec0:	eb de                	jmp    c000eea0 <KeGetEnv(Process*, char const*)+0x18>
c000eec2:	52                   	push   edx
c000eec3:	52                   	push   edx
c000eec4:	53                   	push   ebx
c000eec5:	50                   	push   eax
c000eec6:	e8 29 fc ff ff       	call   c000eaf4 <EnvVarContainer::getEnv(char const*)>
c000eecb:	83 c4 10             	add    esp,0x10
c000eece:	85 c0                	test   eax,eax
c000eed0:	75 16                	jne    c000eee8 <KeGetEnv(Process*, char const*)+0x60>
c000eed2:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000eed6:	a1 14 61 03 c0       	mov    eax,ds:0xc0036114
c000eedb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000eedf:	83 c4 08             	add    esp,0x8
c000eee2:	5b                   	pop    ebx
c000eee3:	e9 0c fc ff ff       	jmp    c000eaf4 <EnvVarContainer::getEnv(char const*)>
c000eee8:	83 c4 08             	add    esp,0x8
c000eeeb:	5b                   	pop    ebx
c000eeec:	c3                   	ret    

c000eeed <KeSetEnvSystem(char const*, char const*)>:
c000eeed:	83 ec 10             	sub    esp,0x10
c000eef0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000eef4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000eef8:	ff 35 14 61 03 c0    	push   DWORD PTR ds:0xc0036114
c000eefe:	e8 2f fc ff ff       	call   c000eb32 <EnvVarContainer::setEnv(char const*, char const*)>
c000ef03:	83 c4 1c             	add    esp,0x1c
c000ef06:	c3                   	ret    

c000ef07 <KeSetEnvUser(char const*, char const*)>:
c000ef07:	a1 10 61 03 c0       	mov    eax,ds:0xc0036110
c000ef0c:	85 c0                	test   eax,eax
c000ef0e:	74 15                	je     c000ef25 <KeSetEnvUser(char const*, char const*)+0x1e>
c000ef10:	83 ec 10             	sub    esp,0x10
c000ef13:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ef17:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ef1b:	50                   	push   eax
c000ef1c:	e8 11 fc ff ff       	call   c000eb32 <EnvVarContainer::setEnv(char const*, char const*)>
c000ef21:	83 c4 1c             	add    esp,0x1c
c000ef24:	c3                   	ret    
c000ef25:	c3                   	ret    

c000ef26 <KeSetEnvProcess(Process*, char const*, char const*)>:
c000ef26:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ef2a:	8b 80 ba 07 00 00    	mov    eax,DWORD PTR [eax+0x7ba]
c000ef30:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ef34:	e9 f9 fb ff ff       	jmp    c000eb32 <EnvVarContainer::setEnv(char const*, char const*)>

c000ef39 <KeDeleteEnvSystem(char const*)>:
c000ef39:	c3                   	ret    

c000ef3a <KeDeleteEnvUser(char const*)>:
c000ef3a:	c3                   	ret    

c000ef3b <KeDeleteEnvProcess(Process*, char const*)>:
c000ef3b:	c3                   	ret    

c000ef3c <KeNewProcessEnv(Process*)>:
c000ef3c:	83 ec 28             	sub    esp,0x28
c000ef3f:	6a 0c                	push   0xc
c000ef41:	e8 c6 11 00 00       	call   c001010c <malloc>
c000ef46:	5a                   	pop    edx
c000ef47:	59                   	pop    ecx
c000ef48:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ef4c:	50                   	push   eax
c000ef4d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ef51:	e8 e0 fe ff ff       	call   c000ee36 <EnvVarContainer::EnvVarContainer(Process*)>
c000ef56:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ef5a:	83 c4 2c             	add    esp,0x2c
c000ef5d:	c3                   	ret    

c000ef5e <KeCopyProcessEnv(Process*, Process*)>:
c000ef5e:	57                   	push   edi
c000ef5f:	56                   	push   esi
c000ef60:	53                   	push   ebx
c000ef61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ef65:	83 ec 0c             	sub    esp,0xc
c000ef68:	8b b8 ba 07 00 00    	mov    edi,DWORD PTR [eax+0x7ba]
c000ef6e:	6a 0c                	push   0xc
c000ef70:	e8 97 11 00 00       	call   c001010c <malloc>
c000ef75:	89 c3                	mov    ebx,eax
c000ef77:	58                   	pop    eax
c000ef78:	5a                   	pop    edx
c000ef79:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ef7d:	53                   	push   ebx
c000ef7e:	e8 b3 fe ff ff       	call   c000ee36 <EnvVarContainer::EnvVarContainer(Process*)>
c000ef83:	8b 07                	mov    eax,DWORD PTR [edi]
c000ef85:	89 03                	mov    DWORD PTR [ebx],eax
c000ef87:	c1 e0 03             	shl    eax,0x3
c000ef8a:	89 04 24             	mov    DWORD PTR [esp],eax
c000ef8d:	e8 7a 11 00 00       	call   c001010c <malloc>
c000ef92:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000ef95:	8b 0f                	mov    ecx,DWORD PTR [edi]
c000ef97:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c000ef9a:	89 c7                	mov    edi,eax
c000ef9c:	c1 e1 03             	shl    ecx,0x3
c000ef9f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000efa1:	83 c4 10             	add    esp,0x10
c000efa4:	89 d8                	mov    eax,ebx
c000efa6:	5b                   	pop    ebx
c000efa7:	5e                   	pop    esi
c000efa8:	5f                   	pop    edi
c000efa9:	c3                   	ret    

c000efaa <KeLoadSystemEnv()>:
c000efaa:	53                   	push   ebx
c000efab:	83 ec 14             	sub    esp,0x14
c000efae:	6a 0c                	push   0xc
c000efb0:	e8 57 11 00 00       	call   c001010c <malloc>
c000efb5:	89 c3                	mov    ebx,eax
c000efb7:	58                   	pop    eax
c000efb8:	5a                   	pop    edx
c000efb9:	ff 35 58 63 03 c0    	push   DWORD PTR ds:0xc0036358
c000efbf:	53                   	push   ebx
c000efc0:	e8 71 fe ff ff       	call   c000ee36 <EnvVarContainer::EnvVarContainer(Process*)>
c000efc5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000efc8:	89 1d 14 61 03 c0    	mov    DWORD PTR ds:0xc0036114,ebx
c000efce:	e8 47 fe ff ff       	call   c000ee1a <EnvVarContainer::__loadSystem()>
c000efd3:	83 c4 18             	add    esp,0x18
c000efd6:	5b                   	pop    ebx
c000efd7:	c3                   	ret    

c000efd8 <KeLoadUserEnv()>:
c000efd8:	53                   	push   ebx
c000efd9:	83 ec 14             	sub    esp,0x14
c000efdc:	6a 0c                	push   0xc
c000efde:	e8 29 11 00 00       	call   c001010c <malloc>
c000efe3:	89 c3                	mov    ebx,eax
c000efe5:	58                   	pop    eax
c000efe6:	5a                   	pop    edx
c000efe7:	ff 35 58 63 03 c0    	push   DWORD PTR ds:0xc0036358
c000efed:	53                   	push   ebx
c000efee:	e8 43 fe ff ff       	call   c000ee36 <EnvVarContainer::EnvVarContainer(Process*)>
c000eff3:	89 1d 10 61 03 c0    	mov    DWORD PTR ds:0xc0036110,ebx
c000eff9:	83 c4 18             	add    esp,0x18
c000effc:	5b                   	pop    ebx
c000effd:	c3                   	ret    

c000effe <KeFlushEnv()>:
c000effe:	c3                   	ret    

c000efff <KeGetProcessTotalEnvCount(Process*)>:
c000efff:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f003:	8b 15 10 61 03 c0    	mov    edx,DWORD PTR ds:0xc0036110
c000f009:	8b 88 ba 07 00 00    	mov    ecx,DWORD PTR [eax+0x7ba]
c000f00f:	a1 14 61 03 c0       	mov    eax,ds:0xc0036114
c000f014:	8b 00                	mov    eax,DWORD PTR [eax]
c000f016:	03 01                	add    eax,DWORD PTR [ecx]
c000f018:	85 d2                	test   edx,edx
c000f01a:	74 02                	je     c000f01e <KeGetProcessTotalEnvCount(Process*)+0x1f>
c000f01c:	03 02                	add    eax,DWORD PTR [edx]
c000f01e:	c3                   	ret    

c000f01f <KeGetProcessEnvPair(Process*, int)>:
c000f01f:	57                   	push   edi
c000f020:	56                   	push   esi
c000f021:	8b 35 10 61 03 c0    	mov    esi,DWORD PTR ds:0xc0036110
c000f027:	53                   	push   ebx
c000f028:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f02c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f030:	85 f6                	test   esi,esi
c000f032:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f036:	8b 88 ba 07 00 00    	mov    ecx,DWORD PTR [eax+0x7ba]
c000f03c:	8b 01                	mov    eax,DWORD PTR [ecx]
c000f03e:	75 16                	jne    c000f056 <KeGetProcessEnvPair(Process*, int)+0x37>
c000f040:	39 c2                	cmp    edx,eax
c000f042:	7c 16                	jl     c000f05a <KeGetProcessEnvPair(Process*, int)+0x3b>
c000f044:	8b 0d 14 61 03 c0    	mov    ecx,DWORD PTR ds:0xc0036114
c000f04a:	8b 31                	mov    esi,DWORD PTR [ecx]
c000f04c:	01 c6                	add    esi,eax
c000f04e:	39 d6                	cmp    esi,edx
c000f050:	7e 3c                	jle    c000f08e <KeGetProcessEnvPair(Process*, int)+0x6f>
c000f052:	29 c2                	sub    edx,eax
c000f054:	eb 04                	jmp    c000f05a <KeGetProcessEnvPair(Process*, int)+0x3b>
c000f056:	39 c2                	cmp    edx,eax
c000f058:	7d 05                	jge    c000f05f <KeGetProcessEnvPair(Process*, int)+0x40>
c000f05a:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c000f05d:	eb 20                	jmp    c000f07f <KeGetProcessEnvPair(Process*, int)+0x60>
c000f05f:	8b 3e                	mov    edi,DWORD PTR [esi]
c000f061:	8d 0c 07             	lea    ecx,[edi+eax*1]
c000f064:	39 d1                	cmp    ecx,edx
c000f066:	7e 04                	jle    c000f06c <KeGetProcessEnvPair(Process*, int)+0x4d>
c000f068:	29 c2                	sub    edx,eax
c000f06a:	eb 10                	jmp    c000f07c <KeGetProcessEnvPair(Process*, int)+0x5d>
c000f06c:	8b 35 14 61 03 c0    	mov    esi,DWORD PTR ds:0xc0036114
c000f072:	03 0e                	add    ecx,DWORD PTR [esi]
c000f074:	39 d1                	cmp    ecx,edx
c000f076:	7e 16                	jle    c000f08e <KeGetProcessEnvPair(Process*, int)+0x6f>
c000f078:	29 c2                	sub    edx,eax
c000f07a:	29 fa                	sub    edx,edi
c000f07c:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000f07f:	8d 14 d0             	lea    edx,[eax+edx*8]
c000f082:	8b 02                	mov    eax,DWORD PTR [edx]
c000f084:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000f087:	89 03                	mov    DWORD PTR [ebx],eax
c000f089:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000f08c:	eb 1d                	jmp    c000f0ab <KeGetProcessEnvPair(Process*, int)+0x8c>
c000f08e:	83 ec 0c             	sub    esp,0xc
c000f091:	68 a6 b3 02 c0       	push   0xc002b3a6
c000f096:	e8 c5 14 00 00       	call   c0010560 <KePanic(char const*)>
c000f09b:	83 c4 10             	add    esp,0x10
c000f09e:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000f0a4:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000f0ab:	89 d8                	mov    eax,ebx
c000f0ad:	5b                   	pop    ebx
c000f0ae:	5e                   	pop    esi
c000f0af:	5f                   	pop    edi
c000f0b0:	c2 04 00             	ret    0x4
c000f0b3:	90                   	nop

c000f0b4 <KeDisplayProgramFault(char const*)>:
c000f0b4:	83 ec 0c             	sub    esp,0xc
c000f0b7:	83 ec 0c             	sub    esp,0xc
c000f0ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f0be:	e8 a3 7e ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000f0c3:	83 c4 10             	add    esp,0x10
c000f0c6:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000f0cb:	8b 00                	mov    eax,DWORD PTR [eax]
c000f0cd:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000f0d0:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c000f0d6:	85 c0                	test   eax,eax
c000f0d8:	74 22                	je     c000f0fc <KeDisplayProgramFault(char const*)+0x48>
c000f0da:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000f0df:	8b 00                	mov    eax,DWORD PTR [eax]
c000f0e1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000f0e4:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c000f0ea:	6a 04                	push   0x4
c000f0ec:	6a 0f                	push   0xf
c000f0ee:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f0f2:	50                   	push   eax
c000f0f3:	e8 16 3e 00 00       	call   c0012f0e <VgaText::puts(char const*, VgaColour, VgaColour)>
c000f0f8:	83 c4 10             	add    esp,0x10
c000f0fb:	90                   	nop
c000f0fc:	90                   	nop
c000f0fd:	83 c4 0c             	add    esp,0xc
c000f100:	c3                   	ret    
c000f101:	8d 76 00             	lea    esi,[esi+0x0]

c000f104 <KeGeneralProtectionFault(void*, void*)>:
c000f104:	83 ec 0c             	sub    esp,0xc
c000f107:	83 ec 08             	sub    esp,0x8
c000f10a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f10e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f112:	e8 4a b8 00 00       	call   c001a961 <HalHandleGeneralProtectionFault(void*, void*)>
c000f117:	83 c4 10             	add    esp,0x10
c000f11a:	0f b6 c0             	movzx  eax,al
c000f11d:	85 c0                	test   eax,eax
c000f11f:	75 2f                	jne    c000f150 <KeGeneralProtectionFault(void*, void*)+0x4c>
c000f121:	83 ec 0c             	sub    esp,0xc
c000f124:	68 c0 b3 02 c0       	push   0xc002b3c0
c000f129:	e8 86 ff ff ff       	call   c000f0b4 <KeDisplayProgramFault(char const*)>
c000f12e:	83 c4 10             	add    esp,0x10
c000f131:	83 ec 0c             	sub    esp,0xc
c000f134:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f138:	e8 9d b9 00 00       	call   c001aada <HalDisplayDebugInfo(void*)>
c000f13d:	83 c4 10             	add    esp,0x10
c000f140:	83 ec 0c             	sub    esp,0xc
c000f143:	6a 7e                	push   0x7e
c000f145:	e8 92 87 00 00       	call   c00178dc <KeTerminateCurrentThread(int)>
c000f14a:	83 c4 10             	add    esp,0x10
c000f14d:	eb 05                	jmp    c000f154 <KeGeneralProtectionFault(void*, void*)+0x50>
c000f14f:	90                   	nop
c000f150:	90                   	nop
c000f151:	8d 76 00             	lea    esi,[esi+0x0]
c000f154:	83 c4 0c             	add    esp,0xc
c000f157:	c3                   	ret    

c000f158 <KePageFault(void*, void*)>:
c000f158:	83 ec 0c             	sub    esp,0xc
c000f15b:	83 ec 08             	sub    esp,0x8
c000f15e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f162:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f166:	e8 fe b8 00 00       	call   c001aa69 <HalHandlePageFault(void*, void*)>
c000f16b:	83 c4 10             	add    esp,0x10
c000f16e:	0f b6 c0             	movzx  eax,al
c000f171:	85 c0                	test   eax,eax
c000f173:	75 2f                	jne    c000f1a4 <KePageFault(void*, void*)+0x4c>
c000f175:	83 ec 0c             	sub    esp,0xc
c000f178:	68 d9 b3 02 c0       	push   0xc002b3d9
c000f17d:	e8 32 ff ff ff       	call   c000f0b4 <KeDisplayProgramFault(char const*)>
c000f182:	83 c4 10             	add    esp,0x10
c000f185:	83 ec 0c             	sub    esp,0xc
c000f188:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f18c:	e8 49 b9 00 00       	call   c001aada <HalDisplayDebugInfo(void*)>
c000f191:	83 c4 10             	add    esp,0x10
c000f194:	83 ec 0c             	sub    esp,0xc
c000f197:	6a 7f                	push   0x7f
c000f199:	e8 3e 87 00 00       	call   c00178dc <KeTerminateCurrentThread(int)>
c000f19e:	83 c4 10             	add    esp,0x10
c000f1a1:	eb 05                	jmp    c000f1a8 <KePageFault(void*, void*)+0x50>
c000f1a3:	90                   	nop
c000f1a4:	90                   	nop
c000f1a5:	8d 76 00             	lea    esi,[esi+0x0]
c000f1a8:	83 c4 0c             	add    esp,0xc
c000f1ab:	c3                   	ret    

c000f1ac <KeOpcodeFault(void*, void*)>:
c000f1ac:	83 ec 0c             	sub    esp,0xc
c000f1af:	83 ec 08             	sub    esp,0x8
c000f1b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f1b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f1ba:	e8 d9 b8 00 00       	call   c001aa98 <HalHandleOpcodeFault(void*, void*)>
c000f1bf:	83 c4 10             	add    esp,0x10
c000f1c2:	0f b6 c0             	movzx  eax,al
c000f1c5:	85 c0                	test   eax,eax
c000f1c7:	75 2f                	jne    c000f1f8 <KeOpcodeFault(void*, void*)+0x4c>
c000f1c9:	83 ec 0c             	sub    esp,0xc
c000f1cc:	68 e4 b3 02 c0       	push   0xc002b3e4
c000f1d1:	e8 de fe ff ff       	call   c000f0b4 <KeDisplayProgramFault(char const*)>
c000f1d6:	83 c4 10             	add    esp,0x10
c000f1d9:	83 ec 0c             	sub    esp,0xc
c000f1dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f1e0:	e8 f5 b8 00 00       	call   c001aada <HalDisplayDebugInfo(void*)>
c000f1e5:	83 c4 10             	add    esp,0x10
c000f1e8:	83 ec 0c             	sub    esp,0xc
c000f1eb:	6a 7c                	push   0x7c
c000f1ed:	e8 ea 86 00 00       	call   c00178dc <KeTerminateCurrentThread(int)>
c000f1f2:	83 c4 10             	add    esp,0x10
c000f1f5:	eb 05                	jmp    c000f1fc <KeOpcodeFault(void*, void*)+0x50>
c000f1f7:	90                   	nop
c000f1f8:	90                   	nop
c000f1f9:	8d 76 00             	lea    esi,[esi+0x0]
c000f1fc:	83 c4 0c             	add    esp,0xc
c000f1ff:	c3                   	ret    

c000f200 <KeOtherFault(void*, void*)>:
c000f200:	83 ec 0c             	sub    esp,0xc
c000f203:	83 ec 0c             	sub    esp,0xc
c000f206:	68 00 b4 02 c0       	push   0xc002b400
c000f20b:	e8 a4 fe ff ff       	call   c000f0b4 <KeDisplayProgramFault(char const*)>
c000f210:	83 c4 10             	add    esp,0x10
c000f213:	83 ec 0c             	sub    esp,0xc
c000f216:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f21a:	e8 bb b8 00 00       	call   c001aada <HalDisplayDebugInfo(void*)>
c000f21f:	83 c4 10             	add    esp,0x10
c000f222:	83 ec 0c             	sub    esp,0xc
c000f225:	6a 7d                	push   0x7d
c000f227:	e8 b0 86 00 00       	call   c00178dc <KeTerminateCurrentThread(int)>
c000f22c:	83 c4 10             	add    esp,0x10
c000f22f:	90                   	nop
c000f230:	83 c4 0c             	add    esp,0xc
c000f233:	c3                   	ret    

c000f234 <KeNonMaskableInterrupt(void*, void*)>:
c000f234:	83 ec 0c             	sub    esp,0xc
c000f237:	e8 2c bc 00 00       	call   c001ae68 <HalReceivedNMI()>
c000f23c:	90                   	nop
c000f23d:	83 c4 0c             	add    esp,0xc
c000f240:	c3                   	ret    
c000f241:	8d 76 00             	lea    esi,[esi+0x0]

c000f244 <KeDoubleFault(void*, void*)>:
c000f244:	83 ec 0c             	sub    esp,0xc
c000f247:	83 ec 0c             	sub    esp,0xc
c000f24a:	68 f1 b3 02 c0       	push   0xc002b3f1
c000f24f:	e8 0c 13 00 00       	call   c0010560 <KePanic(char const*)>
c000f254:	83 c4 10             	add    esp,0x10
c000f257:	90                   	nop
c000f258:	83 c4 0c             	add    esp,0xc
c000f25b:	c3                   	ret    

c000f25c <GDTEntry::setBase(unsigned int)>:
c000f25c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f260:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f264:	89 c1                	mov    ecx,eax
c000f266:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000f26a:	c1 e9 10             	shr    ecx,0x10
c000f26d:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000f270:	c1 e8 18             	shr    eax,0x18
c000f273:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000f276:	c3                   	ret    
c000f277:	90                   	nop

c000f278 <GDTEntry::setLimit(unsigned int)>:
c000f278:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f27c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f280:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000f283:	66 89 01             	mov    WORD PTR [ecx],ax
c000f286:	c1 e8 10             	shr    eax,0x10
c000f289:	83 e0 0f             	and    eax,0xf
c000f28c:	83 e2 f0             	and    edx,0xfffffff0
c000f28f:	09 d0                	or     eax,edx
c000f291:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000f294:	c3                   	ret    
c000f295:	90                   	nop

c000f296 <GDT::GDT()>:
c000f296:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f29a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f2a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f2a4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f2aa:	90                   	nop
c000f2ab:	c3                   	ret    

c000f2ac <GDT::addEntry(GDTEntry)>:
c000f2ac:	53                   	push   ebx
c000f2ad:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f2b1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f2b5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f2b9:	8b 02                	mov    eax,DWORD PTR [edx]
c000f2bb:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c000f2bf:	8d 48 01             	lea    ecx,[eax+0x1]
c000f2c2:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c000f2c6:	c1 e0 03             	shl    eax,0x3
c000f2c9:	89 0a                	mov    DWORD PTR [edx],ecx
c000f2cb:	5b                   	pop    ebx
c000f2cc:	c3                   	ret    
c000f2cd:	90                   	nop

c000f2ce <GDT::getNumberOfEntries()>:
c000f2ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f2d2:	8b 00                	mov    eax,DWORD PTR [eax]
c000f2d4:	c3                   	ret    
c000f2d5:	90                   	nop

c000f2d6 <GDT::flush()>:
c000f2d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f2da:	8b 10                	mov    edx,DWORD PTR [eax]
c000f2dc:	83 c0 04             	add    eax,0x4
c000f2df:	a3 1a 61 03 c0       	mov    ds:0xc003611a,eax
c000f2e4:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000f2eb:	66 89 15 18 61 03 c0 	mov    WORD PTR ds:0xc0036118,dx
c000f2f2:	e9 63 10 ff ff       	jmp    c000035a <loadGDT>
c000f2f7:	90                   	nop

c000f2f8 <GDT::setup()>:
c000f2f8:	57                   	push   edi
c000f2f9:	56                   	push   esi
c000f2fa:	53                   	push   ebx
c000f2fb:	83 ec 30             	sub    esp,0x30
c000f2fe:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000f302:	6a 00                	push   0x0
c000f304:	8d 74 24 14          	lea    esi,[esp+0x14]
c000f308:	56                   	push   esi
c000f309:	e8 4e ff ff ff       	call   c000f25c <GDTEntry::setBase(unsigned int)>
c000f30e:	6a 00                	push   0x0
c000f310:	56                   	push   esi
c000f311:	e8 62 ff ff ff       	call   c000f278 <GDTEntry::setLimit(unsigned int)>
c000f316:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c000f31e:	6a 00                	push   0x0
c000f320:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c000f324:	56                   	push   esi
c000f325:	e8 32 ff ff ff       	call   c000f25c <GDTEntry::setBase(unsigned int)>
c000f32a:	68 ff ff ff 00       	push   0xffffff
c000f32f:	56                   	push   esi
c000f330:	e8 43 ff ff ff       	call   c000f278 <GDTEntry::setLimit(unsigned int)>
c000f335:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f339:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000f33d:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f342:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000f346:	0d 00 9a c0 00       	or     eax,0xc09a00
c000f34b:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f34f:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c000f353:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000f357:	89 f8                	mov    eax,edi
c000f359:	89 fa                	mov    edx,edi
c000f35b:	80 e4 f7             	and    ah,0xf7
c000f35e:	80 ce 60             	or     dh,0x60
c000f361:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000f365:	89 c7                	mov    edi,eax
c000f367:	80 cc 60             	or     ah,0x60
c000f36a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000f36e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000f372:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000f376:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000f37a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f37e:	83 c4 20             	add    esp,0x20
c000f381:	6a 00                	push   0x0
c000f383:	8d 44 24 24          	lea    eax,[esp+0x24]
c000f387:	50                   	push   eax
c000f388:	e8 cf fe ff ff       	call   c000f25c <GDTEntry::setBase(unsigned int)>
c000f38d:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c000f391:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000f395:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000f399:	83 e0 3f             	and    eax,0x3f
c000f39c:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c000f3a0:	6a 00                	push   0x0
c000f3a2:	8d 44 24 34          	lea    eax,[esp+0x34]
c000f3a6:	50                   	push   eax
c000f3a7:	e8 b0 fe ff ff       	call   c000f25c <GDTEntry::setBase(unsigned int)>
c000f3ac:	8a 44 24 3e          	mov    al,BYTE PTR [esp+0x3e]
c000f3b0:	83 e0 3f             	and    eax,0x3f
c000f3b3:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c000f3b7:	83 c4 0c             	add    esp,0xc
c000f3ba:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f3be:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f3c2:	53                   	push   ebx
c000f3c3:	e8 e4 fe ff ff       	call   c000f2ac <GDT::addEntry(GDTEntry)>
c000f3c8:	83 c4 0c             	add    esp,0xc
c000f3cb:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f3cf:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f3d3:	53                   	push   ebx
c000f3d4:	e8 d3 fe ff ff       	call   c000f2ac <GDT::addEntry(GDTEntry)>
c000f3d9:	83 c4 0c             	add    esp,0xc
c000f3dc:	57                   	push   edi
c000f3dd:	56                   	push   esi
c000f3de:	53                   	push   ebx
c000f3df:	e8 c8 fe ff ff       	call   c000f2ac <GDT::addEntry(GDTEntry)>
c000f3e4:	83 c4 0c             	add    esp,0xc
c000f3e7:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000f3eb:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000f3ef:	53                   	push   ebx
c000f3f0:	e8 b7 fe ff ff       	call   c000f2ac <GDT::addEntry(GDTEntry)>
c000f3f5:	83 c4 0c             	add    esp,0xc
c000f3f8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000f3fc:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000f400:	53                   	push   ebx
c000f401:	e8 a6 fe ff ff       	call   c000f2ac <GDT::addEntry(GDTEntry)>
c000f406:	83 c4 0c             	add    esp,0xc
c000f409:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f40d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f411:	53                   	push   ebx
c000f412:	e8 95 fe ff ff       	call   c000f2ac <GDT::addEntry(GDTEntry)>
c000f417:	83 c4 0c             	add    esp,0xc
c000f41a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f41e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f422:	53                   	push   ebx
c000f423:	e8 84 fe ff ff       	call   c000f2ac <GDT::addEntry(GDTEntry)>
c000f428:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f42b:	e8 a6 fe ff ff       	call   c000f2d6 <GDT::flush()>
c000f430:	83 c4 40             	add    esp,0x40
c000f433:	5b                   	pop    ebx
c000f434:	5e                   	pop    esi
c000f435:	5f                   	pop    edi
c000f436:	c3                   	ret    

c000f437 <idleFunction(void*)>:
c000f437:	83 ec 0c             	sub    esp,0xc
c000f43a:	f0 ff 0d 30 63 03 c0 	lock dec DWORD PTR ds:0xc0036330
c000f441:	83 3d 30 63 03 c0 00 	cmp    DWORD PTR ds:0xc0036330,0x0
c000f448:	75 01                	jne    c000f44b <idleFunction(void*)+0x14>
c000f44a:	fb                   	sti    
c000f44b:	e8 b3 ba 00 00       	call   c001af03 <HalSystemIdle()>
c000f450:	e8 09 9d 01 00       	call   c002915e <idleCommon()>
c000f455:	eb f4                	jmp    c000f44b <idleFunction(void*)+0x14>
c000f457:	90                   	nop

c000f458 <IDTEntry::IDTEntry(bool)>:
c000f458:	53                   	push   ebx
c000f459:	83 ec 04             	sub    esp,0x4
c000f45c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f460:	88 04 24             	mov    BYTE PTR [esp],al
c000f463:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f467:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000f46d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f471:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000f475:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f479:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f47c:	83 e2 f0             	and    edx,0xfffffff0
c000f47f:	83 ca 0e             	or     edx,0xe
c000f482:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f485:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f489:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f48c:	83 e2 ef             	and    edx,0xffffffef
c000f48f:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f492:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c000f496:	85 c0                	test   eax,eax
c000f498:	74 06                	je     c000f4a0 <IDTEntry::IDTEntry(bool)+0x48>
c000f49a:	b2 03                	mov    dl,0x3
c000f49c:	eb 06                	jmp    c000f4a4 <IDTEntry::IDTEntry(bool)+0x4c>
c000f49e:	66 90                	xchg   ax,ax
c000f4a0:	b2 00                	mov    dl,0x0
c000f4a2:	66 90                	xchg   ax,ax
c000f4a4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f4a8:	83 e2 03             	and    edx,0x3
c000f4ab:	89 d3                	mov    ebx,edx
c000f4ad:	c1 e3 05             	shl    ebx,0x5
c000f4b0:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f4b3:	83 e2 9f             	and    edx,0xffffff9f
c000f4b6:	88 d1                	mov    cl,dl
c000f4b8:	88 da                	mov    dl,bl
c000f4ba:	09 ca                	or     edx,ecx
c000f4bc:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f4bf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f4c3:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f4c6:	83 ca 80             	or     edx,0xffffff80
c000f4c9:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f4cc:	90                   	nop
c000f4cd:	83 c4 04             	add    esp,0x4
c000f4d0:	5b                   	pop    ebx
c000f4d1:	c3                   	ret    

c000f4d2 <IDTEntry::setOffset(unsigned int)>:
c000f4d2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f4d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f4da:	66 89 02             	mov    WORD PTR [edx],ax
c000f4dd:	c1 e8 10             	shr    eax,0x10
c000f4e0:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000f4e4:	c3                   	ret    
c000f4e5:	90                   	nop
c000f4e6:	66 90                	xchg   ax,ax

c000f4e8 <IDT::IDT()>:
c000f4e8:	90                   	nop
c000f4e9:	c3                   	ret    

c000f4ea <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000f4ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f4ee:	83 c0 30             	add    eax,0x30
c000f4f1:	c3                   	ret    

c000f4f2 <IDT::addEntry(IDTEntry, int)>:
c000f4f2:	53                   	push   ebx
c000f4f3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f4f7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f4fb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f4ff:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f503:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000f506:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000f50a:	5b                   	pop    ebx
c000f50b:	c3                   	ret    

c000f50c <IDT::addEntry(int, void (*)(), bool)>:
c000f50c:	53                   	push   ebx
c000f50d:	83 ec 10             	sub    esp,0x10
c000f510:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f515:	50                   	push   eax
c000f516:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f51a:	53                   	push   ebx
c000f51b:	e8 38 ff ff ff       	call   c000f458 <IDTEntry::IDTEntry(bool)>
c000f520:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f524:	53                   	push   ebx
c000f525:	e8 a8 ff ff ff       	call   c000f4d2 <IDTEntry::setOffset(unsigned int)>
c000f52a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f52e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f532:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f536:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f53a:	e8 b3 ff ff ff       	call   c000f4f2 <IDT::addEntry(IDTEntry, int)>
c000f53f:	83 c4 30             	add    esp,0x30
c000f542:	5b                   	pop    ebx
c000f543:	c3                   	ret    

c000f544 <IDT::flush()>:
c000f544:	66 c7 05 20 61 03 c0 ff 07 	mov    WORD PTR ds:0xc0036120,0x7ff
c000f54d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f551:	a3 22 61 03 c0       	mov    ds:0xc0036122,eax
c000f556:	0f 01 1d 20 61 03 c0 	lidtd  ds:0xc0036120
c000f55d:	c3                   	ret    

c000f55e <IDT::setup()>:
c000f55e:	57                   	push   edi
c000f55f:	56                   	push   esi
c000f560:	53                   	push   ebx
c000f561:	83 ec 10             	sub    esp,0x10
c000f564:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f568:	6a 00                	push   0x0
c000f56a:	68 80 3c 02 c0       	push   0xc0023c80
c000f56f:	6a 00                	push   0x0
c000f571:	53                   	push   ebx
c000f572:	e8 95 ff ff ff       	call   c000f50c <IDT::addEntry(int, void (*)(), bool)>
c000f577:	6a 00                	push   0x0
c000f579:	68 90 3c 02 c0       	push   0xc0023c90
c000f57e:	6a 01                	push   0x1
c000f580:	53                   	push   ebx
c000f581:	e8 86 ff ff ff       	call   c000f50c <IDT::addEntry(int, void (*)(), bool)>
c000f586:	83 c4 20             	add    esp,0x20
c000f589:	6a 00                	push   0x0
c000f58b:	68 9a 3c 02 c0       	push   0xc0023c9a
c000f590:	6a 02                	push   0x2
c000f592:	53                   	push   ebx
c000f593:	e8 74 ff ff ff       	call   c000f50c <IDT::addEntry(int, void (*)(), bool)>
c000f598:	6a 00                	push   0x0
c000f59a:	68 a4 3c 02 c0       	push   0xc0023ca4
c000f59f:	6a 03                	push   0x3
c000f5a1:	53                   	push   ebx
c000f5a2:	e8 65 ff ff ff       	call   c000f50c <IDT::addEntry(int, void (*)(), bool)>
c000f5a7:	83 c4 20             	add    esp,0x20
c000f5aa:	6a 00                	push   0x0
c000f5ac:	68 ae 3c 02 c0       	push   0xc0023cae
c000f5b1:	6a 04                	push   0x4
c000f5b3:	53                   	push   ebx
c000f5b4:	e8 53 ff ff ff       	call   c000f50c <IDT::addEntry(int, void (*)(), bool)>
c000f5b9:	6a 00                	push   0x0
c000f5bb:	68 b8 3c 02 c0       	push   0xc0023cb8
c000f5c0:	6a 05                	push   0x5
c000f5c2:	53                   	push   ebx
c000f5c3:	e8 44 ff ff ff       	call   c000f50c <IDT::addEntry(int, void (*)(), bool)>
c000f5c8:	83 c4 20             	add    esp,0x20
c000f5cb:	6a 00                	push   0x0
c000f5cd:	68 c2 3c 02 c0       	push   0xc0023cc2
c000f5d2:	6a 06                	push   0x6
c000f5d4:	53                   	push   ebx
c000f5d5:	e8 32 ff ff ff       	call   c000f50c <IDT::addEntry(int, void (*)(), bool)>
c000f5da:	6a 00                	push   0x0
c000f5dc:	68 cc 3c 02 c0       	push   0xc0023ccc
c000f5e1:	6a 07                	push   0x7
c000f5e3:	53                   	push   ebx
c000f5e4:	e8 23 ff ff ff       	call   c000f50c <IDT::addEntry(int, void (*)(), bool)>
c000f5e9:	83 c4 20             	add    esp,0x20
c000f5ec:	6a 00                	push   0x0
c000f5ee:	68 d6 3c 02 c0       	push   0xc0023cd6
c000f5f3:	6a 08                	push   0x8
c000f5f5:	53                   	push   ebx
c000f5f6:	e8 11 ff ff ff       	call   c000f50c <IDT::addEntry(int, void (*)(), bool)>
c000f5fb:	6a 00                	push   0x0
c000f5fd:	68 de 3c 02 c0       	push   0xc0023cde
c000f602:	6a 09                	push   0x9
c000f604:	53                   	push   ebx
c000f605:	e8 02 ff ff ff       	call   c000f50c <IDT::addEntry(int, void (*)(), bool)>
c000f60a:	83 c4 20             	add    esp,0x20
c000f60d:	6a 00                	push   0x0
c000f60f:	68 e8 3c 02 c0       	push   0xc0023ce8
c000f614:	6a 0a                	push   0xa
c000f616:	53                   	push   ebx
c000f617:	e8 f0 fe ff ff       	call   c000f50c <IDT::addEntry(int, void (*)(), bool)>
c000f61c:	6a 00                	push   0x0
c000f61e:	68 f0 3c 02 c0       	push   0xc0023cf0
c000f623:	6a 0b                	push   0xb
c000f625:	53                   	push   ebx
c000f626:	e8 e1 fe ff ff       	call   c000f50c <IDT::addEntry(int, void (*)(), bool)>
c000f62b:	83 c4 20             	add    esp,0x20
c000f62e:	6a 00                	push   0x0
c000f630:	68 f8 3c 02 c0       	push   0xc0023cf8
c000f635:	6a 0c                	push   0xc
c000f637:	53                   	push   ebx
c000f638:	e8 cf fe ff ff       	call   c000f50c <IDT::addEntry(int, void (*)(), bool)>
c000f63d:	6a 00                	push   0x0
c000f63f:	68 00 3d 02 c0       	push   0xc0023d00
c000f644:	6a 0d                	push   0xd
c000f646:	53                   	push   ebx
c000f647:	e8 c0 fe ff ff       	call   c000f50c <IDT::addEntry(int, void (*)(), bool)>
c000f64c:	83 c4 20             	add    esp,0x20
c000f64f:	6a 00                	push   0x0
c000f651:	68 1a 3d 02 c0       	push   0xc0023d1a
c000f656:	6a 0e                	push   0xe
c000f658:	53                   	push   ebx
c000f659:	e8 ae fe ff ff       	call   c000f50c <IDT::addEntry(int, void (*)(), bool)>
c000f65e:	6a 00                	push   0x0
c000f660:	68 22 3d 02 c0       	push   0xc0023d22
c000f665:	6a 0f                	push   0xf
c000f667:	53                   	push   ebx
c000f668:	e8 9f fe ff ff       	call   c000f50c <IDT::addEntry(int, void (*)(), bool)>
c000f66d:	83 c4 20             	add    esp,0x20
c000f670:	6a 00                	push   0x0
c000f672:	68 2c 3d 02 c0       	push   0xc0023d2c
c000f677:	6a 10                	push   0x10
c000f679:	53                   	push   ebx
c000f67a:	e8 8d fe ff ff       	call   c000f50c <IDT::addEntry(int, void (*)(), bool)>
c000f67f:	6a 00                	push   0x0
c000f681:	68 36 3d 02 c0       	push   0xc0023d36
c000f686:	6a 11                	push   0x11
c000f688:	53                   	push   ebx
c000f689:	e8 7e fe ff ff       	call   c000f50c <IDT::addEntry(int, void (*)(), bool)>
c000f68e:	83 c4 20             	add    esp,0x20
c000f691:	6a 00                	push   0x0
c000f693:	68 40 3d 02 c0       	push   0xc0023d40
c000f698:	6a 12                	push   0x12
c000f69a:	53                   	push   ebx
c000f69b:	e8 6c fe ff ff       	call   c000f50c <IDT::addEntry(int, void (*)(), bool)>
c000f6a0:	6a 01                	push   0x1
c000f6a2:	68 da 3d 02 c0       	push   0xc0023dda
c000f6a7:	6a 60                	push   0x60
c000f6a9:	53                   	push   ebx
c000f6aa:	e8 5d fe ff ff       	call   c000f50c <IDT::addEntry(int, void (*)(), bool)>
c000f6af:	83 c4 20             	add    esp,0x20
c000f6b2:	6a 00                	push   0x0
c000f6b4:	68 e1 3d 02 c0       	push   0xc0023de1
c000f6b9:	6a 20                	push   0x20
c000f6bb:	53                   	push   ebx
c000f6bc:	e8 4b fe ff ff       	call   c000f50c <IDT::addEntry(int, void (*)(), bool)>
c000f6c1:	6a 00                	push   0x0
c000f6c3:	68 cc 3d 02 c0       	push   0xc0023dcc
c000f6c8:	6a 21                	push   0x21
c000f6ca:	53                   	push   ebx
c000f6cb:	e8 3c fe ff ff       	call   c000f50c <IDT::addEntry(int, void (*)(), bool)>
c000f6d0:	83 c4 20             	add    esp,0x20
c000f6d3:	6a 00                	push   0x0
c000f6d5:	68 d3 3d 02 c0       	push   0xc0023dd3
c000f6da:	6a 22                	push   0x22
c000f6dc:	53                   	push   ebx
c000f6dd:	e8 2a fe ff ff       	call   c000f50c <IDT::addEntry(int, void (*)(), bool)>
c000f6e2:	6a 00                	push   0x0
c000f6e4:	68 4a 3d 02 c0       	push   0xc0023d4a
c000f6e9:	6a 23                	push   0x23
c000f6eb:	53                   	push   ebx
c000f6ec:	e8 1b fe ff ff       	call   c000f50c <IDT::addEntry(int, void (*)(), bool)>
c000f6f1:	83 c4 20             	add    esp,0x20
c000f6f4:	6a 00                	push   0x0
c000f6f6:	68 54 3d 02 c0       	push   0xc0023d54
c000f6fb:	6a 24                	push   0x24
c000f6fd:	53                   	push   ebx
c000f6fe:	e8 09 fe ff ff       	call   c000f50c <IDT::addEntry(int, void (*)(), bool)>
c000f703:	6a 00                	push   0x0
c000f705:	68 5e 3d 02 c0       	push   0xc0023d5e
c000f70a:	6a 25                	push   0x25
c000f70c:	53                   	push   ebx
c000f70d:	e8 fa fd ff ff       	call   c000f50c <IDT::addEntry(int, void (*)(), bool)>
c000f712:	83 c4 20             	add    esp,0x20
c000f715:	6a 00                	push   0x0
c000f717:	68 68 3d 02 c0       	push   0xc0023d68
c000f71c:	6a 26                	push   0x26
c000f71e:	53                   	push   ebx
c000f71f:	e8 e8 fd ff ff       	call   c000f50c <IDT::addEntry(int, void (*)(), bool)>
c000f724:	6a 00                	push   0x0
c000f726:	68 72 3d 02 c0       	push   0xc0023d72
c000f72b:	6a 27                	push   0x27
c000f72d:	53                   	push   ebx
c000f72e:	e8 d9 fd ff ff       	call   c000f50c <IDT::addEntry(int, void (*)(), bool)>
c000f733:	83 c4 20             	add    esp,0x20
c000f736:	6a 00                	push   0x0
c000f738:	68 7c 3d 02 c0       	push   0xc0023d7c
c000f73d:	6a 28                	push   0x28
c000f73f:	53                   	push   ebx
c000f740:	e8 c7 fd ff ff       	call   c000f50c <IDT::addEntry(int, void (*)(), bool)>
c000f745:	6a 00                	push   0x0
c000f747:	68 86 3d 02 c0       	push   0xc0023d86
c000f74c:	6a 29                	push   0x29
c000f74e:	53                   	push   ebx
c000f74f:	e8 b8 fd ff ff       	call   c000f50c <IDT::addEntry(int, void (*)(), bool)>
c000f754:	83 c4 20             	add    esp,0x20
c000f757:	6a 00                	push   0x0
c000f759:	68 90 3d 02 c0       	push   0xc0023d90
c000f75e:	6a 2a                	push   0x2a
c000f760:	53                   	push   ebx
c000f761:	e8 a6 fd ff ff       	call   c000f50c <IDT::addEntry(int, void (*)(), bool)>
c000f766:	6a 00                	push   0x0
c000f768:	68 9a 3d 02 c0       	push   0xc0023d9a
c000f76d:	6a 2b                	push   0x2b
c000f76f:	53                   	push   ebx
c000f770:	e8 97 fd ff ff       	call   c000f50c <IDT::addEntry(int, void (*)(), bool)>
c000f775:	83 c4 20             	add    esp,0x20
c000f778:	6a 00                	push   0x0
c000f77a:	68 a4 3d 02 c0       	push   0xc0023da4
c000f77f:	6a 2c                	push   0x2c
c000f781:	53                   	push   ebx
c000f782:	e8 85 fd ff ff       	call   c000f50c <IDT::addEntry(int, void (*)(), bool)>
c000f787:	6a 00                	push   0x0
c000f789:	68 ae 3d 02 c0       	push   0xc0023dae
c000f78e:	6a 2d                	push   0x2d
c000f790:	53                   	push   ebx
c000f791:	e8 76 fd ff ff       	call   c000f50c <IDT::addEntry(int, void (*)(), bool)>
c000f796:	83 c4 20             	add    esp,0x20
c000f799:	6a 00                	push   0x0
c000f79b:	68 b8 3d 02 c0       	push   0xc0023db8
c000f7a0:	6a 2e                	push   0x2e
c000f7a2:	53                   	push   ebx
c000f7a3:	e8 64 fd ff ff       	call   c000f50c <IDT::addEntry(int, void (*)(), bool)>
c000f7a8:	6a 00                	push   0x0
c000f7aa:	68 c2 3d 02 c0       	push   0xc0023dc2
c000f7af:	6a 2f                	push   0x2f
c000f7b1:	53                   	push   ebx
c000f7b2:	e8 55 fd ff ff       	call   c000f50c <IDT::addEntry(int, void (*)(), bool)>
c000f7b7:	83 c4 20             	add    esp,0x20
c000f7ba:	6a 00                	push   0x0
c000f7bc:	68 e8 3e 02 c0       	push   0xc0023ee8
c000f7c1:	6a 30                	push   0x30
c000f7c3:	53                   	push   ebx
c000f7c4:	e8 43 fd ff ff       	call   c000f50c <IDT::addEntry(int, void (*)(), bool)>
c000f7c9:	6a 00                	push   0x0
c000f7cb:	68 f2 3e 02 c0       	push   0xc0023ef2
c000f7d0:	6a 31                	push   0x31
c000f7d2:	53                   	push   ebx
c000f7d3:	e8 34 fd ff ff       	call   c000f50c <IDT::addEntry(int, void (*)(), bool)>
c000f7d8:	83 c4 20             	add    esp,0x20
c000f7db:	6a 00                	push   0x0
c000f7dd:	68 fc 3e 02 c0       	push   0xc0023efc
c000f7e2:	6a 32                	push   0x32
c000f7e4:	53                   	push   ebx
c000f7e5:	e8 22 fd ff ff       	call   c000f50c <IDT::addEntry(int, void (*)(), bool)>
c000f7ea:	6a 00                	push   0x0
c000f7ec:	68 06 3f 02 c0       	push   0xc0023f06
c000f7f1:	6a 33                	push   0x33
c000f7f3:	53                   	push   ebx
c000f7f4:	e8 13 fd ff ff       	call   c000f50c <IDT::addEntry(int, void (*)(), bool)>
c000f7f9:	83 c4 20             	add    esp,0x20
c000f7fc:	6a 00                	push   0x0
c000f7fe:	68 10 3f 02 c0       	push   0xc0023f10
c000f803:	6a 34                	push   0x34
c000f805:	53                   	push   ebx
c000f806:	e8 01 fd ff ff       	call   c000f50c <IDT::addEntry(int, void (*)(), bool)>
c000f80b:	6a 00                	push   0x0
c000f80d:	68 1a 3f 02 c0       	push   0xc0023f1a
c000f812:	6a 35                	push   0x35
c000f814:	53                   	push   ebx
c000f815:	e8 f2 fc ff ff       	call   c000f50c <IDT::addEntry(int, void (*)(), bool)>
c000f81a:	83 c4 20             	add    esp,0x20
c000f81d:	6a 00                	push   0x0
c000f81f:	68 24 3f 02 c0       	push   0xc0023f24
c000f824:	6a 36                	push   0x36
c000f826:	53                   	push   ebx
c000f827:	e8 e0 fc ff ff       	call   c000f50c <IDT::addEntry(int, void (*)(), bool)>
c000f82c:	6a 00                	push   0x0
c000f82e:	68 2e 3f 02 c0       	push   0xc0023f2e
c000f833:	6a 37                	push   0x37
c000f835:	53                   	push   ebx
c000f836:	e8 d1 fc ff ff       	call   c000f50c <IDT::addEntry(int, void (*)(), bool)>
c000f83b:	83 c4 1c             	add    esp,0x1c
c000f83e:	6a 03                	push   0x3
c000f840:	6a 02                	push   0x2
c000f842:	ff 35 90 62 03 c0    	push   DWORD PTR ds:0xc0036290
c000f848:	e8 3b 4a 00 00       	call   c0014288 <VAS::allocatePages(int, int)>
c000f84d:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f854:	89 c6                	mov    esi,eax
c000f856:	e8 b1 08 00 00       	call   c001010c <malloc>
c000f85b:	81 c6 00 20 00 00    	add    esi,0x2000
c000f861:	89 04 24             	mov    DWORD PTR [esp],eax
c000f864:	89 c7                	mov    edi,eax
c000f866:	e8 ed 3a 00 00       	call   c0013358 <TSS::TSS()>
c000f86b:	83 c4 0c             	add    esp,0xc
c000f86e:	68 d6 3c 02 c0       	push   0xc0023cd6
c000f873:	56                   	push   esi
c000f874:	57                   	push   edi
c000f875:	e8 22 3b 00 00       	call   c001339c <TSS::setup(unsigned long, unsigned long)>
c000f87a:	89 c6                	mov    esi,eax
c000f87c:	58                   	pop    eax
c000f87d:	5a                   	pop    edx
c000f87e:	6a 00                	push   0x0
c000f880:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f884:	50                   	push   eax
c000f885:	e8 ce fb ff ff       	call   c000f458 <IDTEntry::IDTEntry(bool)>
c000f88a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f88e:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f893:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f89a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f89e:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f8a4:	80 ce 05             	or     dh,0x5
c000f8a7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f8ab:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f8ae:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f8b2:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f8b5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f8b8:	e8 87 fc ff ff       	call   c000f544 <IDT::flush()>
c000f8bd:	83 c4 20             	add    esp,0x20
c000f8c0:	5b                   	pop    ebx
c000f8c1:	5e                   	pop    esi
c000f8c2:	5f                   	pop    edi
c000f8c3:	c3                   	ret    

c000f8c4 <CPU::current()>:
c000f8c4:	a1 08 61 03 c0       	mov    eax,ds:0xc0036108
c000f8c9:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000f8cf:	c3                   	ret    

c000f8d0 <operator new(unsigned long)>:
c000f8d0:	e9 37 08 00 00       	jmp    c001010c <malloc>

c000f8d5 <operator delete(void*)>:
c000f8d5:	e9 52 08 00 00       	jmp    c001012c <rfree>

c000f8da <disableIRQs()>:
c000f8da:	fa                   	cli    
c000f8db:	c3                   	ret    

c000f8dc <enableIRQs()>:
c000f8dc:	fb                   	sti    
c000f8dd:	c3                   	ret    

c000f8de <lockScheduler()>:
c000f8de:	fa                   	cli    
c000f8df:	ff 05 30 63 03 c0    	inc    DWORD PTR ds:0xc0036330
c000f8e5:	c3                   	ret    

c000f8e6 <unlockScheduler()>:
c000f8e6:	f0 ff 0d 30 63 03 c0 	lock dec DWORD PTR ds:0xc0036330
c000f8ed:	83 3d 30 63 03 c0 00 	cmp    DWORD PTR ds:0xc0036330,0x0
c000f8f4:	75 01                	jne    c000f8f7 <unlockScheduler()+0x11>
c000f8f6:	fb                   	sti    
c000f8f7:	c3                   	ret    

c000f8f8 <lockStuff()>:
c000f8f8:	fa                   	cli    
c000f8f9:	ff 05 30 63 03 c0    	inc    DWORD PTR ds:0xc0036330
c000f8ff:	ff 05 2c 63 03 c0    	inc    DWORD PTR ds:0xc003632c
c000f905:	c3                   	ret    

c000f906 <unlockStuff()>:
c000f906:	83 ec 0c             	sub    esp,0xc
c000f909:	a1 2c 63 03 c0       	mov    eax,ds:0xc003632c
c000f90e:	48                   	dec    eax
c000f90f:	a3 2c 63 03 c0       	mov    ds:0xc003632c,eax
c000f914:	75 18                	jne    c000f92e <unlockStuff()+0x28>
c000f916:	83 3d 28 63 03 c0 00 	cmp    DWORD PTR ds:0xc0036328,0x0
c000f91d:	74 0f                	je     c000f92e <unlockStuff()+0x28>
c000f91f:	c7 05 28 63 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0036328,0x0
c000f929:	e8 ba 77 00 00       	call   c00170e8 <schedule()>
c000f92e:	f0 ff 0d 30 63 03 c0 	lock dec DWORD PTR ds:0xc0036330
c000f935:	83 3d 30 63 03 c0 00 	cmp    DWORD PTR ds:0xc0036330,0x0
c000f93c:	75 01                	jne    c000f93f <unlockStuff()+0x39>
c000f93e:	fb                   	sti    
c000f93f:	83 c4 0c             	add    esp,0xc
c000f942:	c3                   	ret    

c000f943 <Virt::getAKernelVAS()>:
c000f943:	a1 90 62 03 c0       	mov    eax,ds:0xc0036290
c000f948:	c3                   	ret    

c000f949 <__not_memcpy>:
c000f949:	57                   	push   edi
c000f94a:	56                   	push   esi
c000f94b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f94f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000f953:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000f957:	89 c7                	mov    edi,eax
c000f959:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f95b:	5e                   	pop    esi
c000f95c:	5f                   	pop    edi
c000f95d:	c3                   	ret    

c000f95e <KeFormatDate(char*, int, int, int, int, bool)>:
c000f95e:	55                   	push   ebp
c000f95f:	57                   	push   edi
c000f960:	56                   	push   esi
c000f961:	be e8 03 00 00       	mov    esi,0x3e8
c000f966:	53                   	push   ebx
c000f967:	bb 0a 00 00 00       	mov    ebx,0xa
c000f96c:	81 ec ac 00 00 00    	sub    esp,0xac
c000f972:	c6 44 24 20 00       	mov    BYTE PTR [esp+0x20],0x0
c000f977:	8b 8c 24 d0 00 00 00 	mov    ecx,DWORD PTR [esp+0xd0]
c000f97e:	89 c8                	mov    eax,ecx
c000f980:	99                   	cdq    
c000f981:	f7 fb                	idiv   ebx
c000f983:	89 d5                	mov    ebp,edx
c000f985:	99                   	cdq    
c000f986:	f7 fb                	idiv   ebx
c000f988:	8d 42 30             	lea    eax,[edx+0x30]
c000f98b:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000f98f:	8d 45 30             	lea    eax,[ebp+0x30]
c000f992:	0f b6 ac 24 d4 00 00 00 	movzx  ebp,BYTE PTR [esp+0xd4]
c000f99a:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c000f99e:	89 c8                	mov    eax,ecx
c000f9a0:	99                   	cdq    
c000f9a1:	f7 fe                	idiv   esi
c000f9a3:	be 64 00 00 00       	mov    esi,0x64
c000f9a8:	99                   	cdq    
c000f9a9:	f7 fb                	idiv   ebx
c000f9ab:	8d 42 30             	lea    eax,[edx+0x30]
c000f9ae:	88 44 24 06          	mov    BYTE PTR [esp+0x6],al
c000f9b2:	89 c8                	mov    eax,ecx
c000f9b4:	99                   	cdq    
c000f9b5:	f7 fe                	idiv   esi
c000f9b7:	99                   	cdq    
c000f9b8:	f7 fb                	idiv   ebx
c000f9ba:	31 db                	xor    ebx,ebx
c000f9bc:	8d 42 30             	lea    eax,[edx+0x30]
c000f9bf:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000f9c3:	0f be 8b 44 61 03 c0 	movsx  ecx,BYTE PTR [ebx-0x3ffc9ebc]
c000f9ca:	83 f9 59             	cmp    ecx,0x59
c000f9cd:	0f 84 1f 01 00 00    	je     c000faf2 <KeFormatDate(char*, int, int, int, int, bool)+0x194>
c000f9d3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000f9d7:	8b 94 24 c8 00 00 00 	mov    edx,DWORD PTR [esp+0xc8]
c000f9de:	83 f9 4d             	cmp    ecx,0x4d
c000f9e1:	0f 44 94 24 cc 00 00 00 	cmove  edx,DWORD PTR [esp+0xcc]
c000f9e9:	57                   	push   edi
c000f9ea:	57                   	push   edi
c000f9eb:	89 d7                	mov    edi,edx
c000f9ed:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000f9f1:	c1 ff 1f             	sar    edi,0x1f
c000f9f4:	57                   	push   edi
c000f9f5:	52                   	push   edx
c000f9f6:	e8 6d 04 00 00       	call   c000fe68 <KeGetDigitsInNumber(long long)>
c000f9fb:	83 c4 10             	add    esp,0x10
c000f9fe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fa02:	48                   	dec    eax
c000fa03:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fa07:	75 1c                	jne    c000fa25 <KeFormatDate(char*, int, int, int, int, bool)+0xc7>
c000fa09:	83 f9 44             	cmp    ecx,0x44
c000fa0c:	75 09                	jne    c000fa17 <KeFormatDate(char*, int, int, int, int, bool)+0xb9>
c000fa0e:	80 3d 60 61 03 c0 00 	cmp    BYTE PTR ds:0xc0036160,0x0
c000fa15:	eb 0c                	jmp    c000fa23 <KeFormatDate(char*, int, int, int, int, bool)+0xc5>
c000fa17:	83 f9 4d             	cmp    ecx,0x4d
c000fa1a:	75 60                	jne    c000fa7c <KeFormatDate(char*, int, int, int, int, bool)+0x11e>
c000fa1c:	80 3d 61 61 03 c0 00 	cmp    BYTE PTR ds:0xc0036161,0x0
c000fa23:	74 57                	je     c000fa7c <KeFormatDate(char*, int, int, int, int, bool)+0x11e>
c000fa25:	89 d0                	mov    eax,edx
c000fa27:	b9 0a 00 00 00       	mov    ecx,0xa
c000fa2c:	99                   	cdq    
c000fa2d:	f7 f9                	idiv   ecx
c000fa2f:	89 d6                	mov    esi,edx
c000fa31:	99                   	cdq    
c000fa32:	f7 f9                	idiv   ecx
c000fa34:	83 c2 30             	add    edx,0x30
c000fa37:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c000fa3b:	8d 56 30             	lea    edx,[esi+0x30]
c000fa3e:	88 54 24 1c          	mov    BYTE PTR [esp+0x1c],dl
c000fa42:	c6 44 24 1d 00       	mov    BYTE PTR [esp+0x1d],0x0
c000fa47:	56                   	push   esi
c000fa48:	56                   	push   esi
c000fa49:	8d 7c 24 23          	lea    edi,[esp+0x23]
c000fa4d:	57                   	push   edi
c000fa4e:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c000fa52:	56                   	push   esi
c000fa53:	e8 18 0e ff ff       	call   c0000870 <strcat>
c000fa58:	83 c4 10             	add    esp,0x10
c000fa5b:	83 fb 02             	cmp    ebx,0x2
c000fa5e:	74 34                	je     c000fa94 <KeFormatDate(char*, int, int, int, int, bool)+0x136>
c000fa60:	c6 44 24 1c 00       	mov    BYTE PTR [esp+0x1c],0x0
c000fa65:	a0 48 61 03 c0       	mov    al,ds:0xc0036148
c000fa6a:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c000fa6e:	51                   	push   ecx
c000fa6f:	51                   	push   ecx
c000fa70:	57                   	push   edi
c000fa71:	56                   	push   esi
c000fa72:	e8 f9 0d ff ff       	call   c0000870 <strcat>
c000fa77:	83 c4 10             	add    esp,0x10
c000fa7a:	eb 18                	jmp    c000fa94 <KeFormatDate(char*, int, int, int, int, bool)+0x136>
c000fa7c:	c6 44 24 1c 00       	mov    BYTE PTR [esp+0x1c],0x0
c000fa81:	89 d0                	mov    eax,edx
c000fa83:	b9 0a 00 00 00       	mov    ecx,0xa
c000fa88:	99                   	cdq    
c000fa89:	f7 f9                	idiv   ecx
c000fa8b:	83 c2 30             	add    edx,0x30
c000fa8e:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c000fa92:	eb b3                	jmp    c000fa47 <KeFormatDate(char*, int, int, int, int, bool)+0xe9>
c000fa94:	43                   	inc    ebx
c000fa95:	83 fb 03             	cmp    ebx,0x3
c000fa98:	0f 85 25 ff ff ff    	jne    c000f9c3 <KeFormatDate(char*, int, int, int, int, bool)+0x65>
c000fa9e:	52                   	push   edx
c000fa9f:	ff b4 24 c8 00 00 00 	push   DWORD PTR [esp+0xc8]
c000faa6:	6a 00                	push   0x0
c000faa8:	ff b4 24 cc 00 00 00 	push   DWORD PTR [esp+0xcc]
c000faaf:	e8 3c 0a ff ff       	call   c00004f0 <memset>
c000fab4:	89 34 24             	mov    DWORD PTR [esp],esi
c000fab7:	e8 c4 0a ff ff       	call   c0000580 <strlen>
c000fabc:	83 c4 10             	add    esp,0x10
c000fabf:	40                   	inc    eax
c000fac0:	39 84 24 c4 00 00 00 	cmp    DWORD PTR [esp+0xc4],eax
c000fac7:	72 14                	jb     c000fadd <KeFormatDate(char*, int, int, int, int, bool)+0x17f>
c000fac9:	50                   	push   eax
c000faca:	50                   	push   eax
c000facb:	56                   	push   esi
c000facc:	ff b4 24 cc 00 00 00 	push   DWORD PTR [esp+0xcc]
c000fad3:	e8 78 0b ff ff       	call   c0000650 <strcpy>
c000fad8:	83 c4 10             	add    esp,0x10
c000fadb:	eb 58                	jmp    c000fb35 <KeFormatDate(char*, int, int, int, int, bool)+0x1d7>
c000fadd:	8b 84 24 c4 00 00 00 	mov    eax,DWORD PTR [esp+0xc4]
c000fae4:	8b bc 24 c0 00 00 00 	mov    edi,DWORD PTR [esp+0xc0]
c000faeb:	8d 48 ff             	lea    ecx,[eax-0x1]
c000faee:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000faf0:	eb 43                	jmp    c000fb35 <KeFormatDate(char*, int, int, int, int, bool)+0x1d7>
c000faf2:	85 ed                	test   ebp,ebp
c000faf4:	74 2a                	je     c000fb20 <KeFormatDate(char*, int, int, int, int, bool)+0x1c2>
c000faf6:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000fafb:	8a 44 24 06          	mov    al,BYTE PTR [esp+0x6]
c000faff:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c000fb03:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000fb07:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c000fb0b:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000fb0f:	88 44 24 1d          	mov    BYTE PTR [esp+0x1d],al
c000fb13:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c000fb17:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c000fb1b:	e9 27 ff ff ff       	jmp    c000fa47 <KeFormatDate(char*, int, int, int, int, bool)+0xe9>
c000fb20:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000fb24:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c000fb28:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c000fb2c:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c000fb30:	e9 0d ff ff ff       	jmp    c000fa42 <KeFormatDate(char*, int, int, int, int, bool)+0xe4>
c000fb35:	81 c4 ac 00 00 00    	add    esp,0xac
c000fb3b:	5b                   	pop    ebx
c000fb3c:	5e                   	pop    esi
c000fb3d:	5f                   	pop    edi
c000fb3e:	5d                   	pop    ebp
c000fb3f:	c3                   	ret    

c000fb40 <KeFormatShortDate(char*, int, int, int, int)>:
c000fb40:	83 ec 14             	sub    esp,0x14
c000fb43:	6a 00                	push   0x0
c000fb45:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000fb49:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000fb4d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000fb51:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000fb55:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000fb59:	e8 00 fe ff ff       	call   c000f95e <KeFormatDate(char*, int, int, int, int, bool)>
c000fb5e:	83 c4 2c             	add    esp,0x2c
c000fb61:	c3                   	ret    

c000fb62 <KeFormatLongDate(char*, int, int, int, int)>:
c000fb62:	83 ec 14             	sub    esp,0x14
c000fb65:	6a 01                	push   0x1
c000fb67:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000fb6b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000fb6f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000fb73:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000fb77:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000fb7b:	e8 de fd ff ff       	call   c000f95e <KeFormatDate(char*, int, int, int, int, bool)>
c000fb80:	83 c4 2c             	add    esp,0x2c
c000fb83:	c3                   	ret    

c000fb84 <KeSetLocale(klocale_t)>:
c000fb84:	57                   	push   edi
c000fb85:	b9 09 00 00 00       	mov    ecx,0x9
c000fb8a:	56                   	push   esi
c000fb8b:	bf 40 61 03 c0       	mov    edi,0xc0036140
c000fb90:	fc                   	cld    
c000fb91:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000fb95:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000fb97:	5e                   	pop    esi
c000fb98:	5f                   	pop    edi
c000fb99:	c3                   	ret    

c000fb9a <KeInitialiseLocale()>:
c000fb9a:	57                   	push   edi
c000fb9b:	56                   	push   esi
c000fb9c:	83 ec 3c             	sub    esp,0x3c
c000fb9f:	c7 44 24 14 24 00 00 00 	mov    DWORD PTR [esp+0x14],0x24
c000fba7:	c7 44 24 1c 2f 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2f
c000fbaf:	c7 44 24 20 2e 00 00 00 	mov    DWORD PTR [esp+0x20],0x2e
c000fbb7:	c7 44 24 24 2c 00 00 00 	mov    DWORD PTR [esp+0x24],0x2c
c000fbbf:	66 c7 44 24 28 02 03 	mov    WORD PTR [esp+0x28],0x302
c000fbc6:	c7 44 24 2c 2d 00 00 00 	mov    DWORD PTR [esp+0x2c],0x2d
c000fbce:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c000fbd6:	66 c7 44 24 34 00 00 	mov    WORD PTR [esp+0x34],0x0
c000fbdd:	68 28 b4 02 c0       	push   0xc002b428
c000fbe2:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c000fbe6:	8d 74 24 18          	lea    esi,[esp+0x18]
c000fbea:	50                   	push   eax
c000fbeb:	e8 60 0a ff ff       	call   c0000650 <strcpy>
c000fbf0:	83 ec 20             	sub    esp,0x20
c000fbf3:	b9 09 00 00 00       	mov    ecx,0x9
c000fbf8:	fc                   	cld    
c000fbf9:	89 e7                	mov    edi,esp
c000fbfb:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000fbfd:	e8 82 ff ff ff       	call   c000fb84 <KeSetLocale(klocale_t)>
c000fc02:	83 c4 64             	add    esp,0x64
c000fc05:	5e                   	pop    esi
c000fc06:	5f                   	pop    edi
c000fc07:	c3                   	ret    

c000fc08 <KeFormatCurrency(char*, int, long long, long long)>:
c000fc08:	c3                   	ret    

c000fc09 <KeFormatCurrency(char*, int, double)>:
c000fc09:	c3                   	ret    

c000fc0a <KeFormatNumber(char*, long long, long long)>:
c000fc0a:	c3                   	ret    

c000fc0b <KeFormatNumber(char*, double)>:
c000fc0b:	c3                   	ret    

c000fc0c <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)>:
c000fc0c:	55                   	push   ebp
c000fc0d:	57                   	push   edi
c000fc0e:	56                   	push   esi
c000fc0f:	53                   	push   ebx
c000fc10:	83 ec 4c             	sub    esp,0x4c
c000fc13:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000fc17:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000fc1b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000fc1f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fc23:	c7 44 24 1f 30 31 32 33 	mov    DWORD PTR [esp+0x1f],0x33323130
c000fc2b:	c7 44 24 23 34 35 36 37 	mov    DWORD PTR [esp+0x23],0x37363534
c000fc33:	c7 44 24 27 38 39 41 42 	mov    DWORD PTR [esp+0x27],0x42413938
c000fc3b:	c7 44 24 2b 43 44 45 46 	mov    DWORD PTR [esp+0x2b],0x46454443
c000fc43:	c6 44 24 2f 00       	mov    BYTE PTR [esp+0x2f],0x0
c000fc48:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c000fc4c:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000fc50:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fc54:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000fc58:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000fc5c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000fc60:	83 44 24 3c 01       	add    DWORD PTR [esp+0x3c],0x1
c000fc65:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000fc69:	89 c2                	mov    edx,eax
c000fc6b:	c1 fa 1f             	sar    edx,0x1f
c000fc6e:	52                   	push   edx
c000fc6f:	50                   	push   eax
c000fc70:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000fc74:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000fc78:	e8 57 46 01 00       	call   c00242d4 <__udivdi3>
c000fc7d:	83 c4 10             	add    esp,0x10
c000fc80:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000fc84:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000fc88:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fc8c:	80 f4 00             	xor    ah,0x0
c000fc8f:	89 c7                	mov    edi,eax
c000fc91:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000fc95:	80 f4 00             	xor    ah,0x0
c000fc98:	89 c5                	mov    ebp,eax
c000fc9a:	89 e8                	mov    eax,ebp
c000fc9c:	09 f8                	or     eax,edi
c000fc9e:	74 04                	je     c000fca4 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0x98>
c000fca0:	eb be                	jmp    c000fc60 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0x54>
c000fca2:	66 90                	xchg   ax,ax
c000fca4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000fca8:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000fcab:	90                   	nop
c000fcac:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000fcb0:	89 c7                	mov    edi,eax
c000fcb2:	89 c5                	mov    ebp,eax
c000fcb4:	c1 fd 1f             	sar    ebp,0x1f
c000fcb7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fcbb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000fcbf:	55                   	push   ebp
c000fcc0:	57                   	push   edi
c000fcc1:	52                   	push   edx
c000fcc2:	50                   	push   eax
c000fcc3:	e8 0c 47 01 00       	call   c00243d4 <__umoddi3>
c000fcc8:	83 c4 10             	add    esp,0x10
c000fccb:	83 6c 24 3c 01       	sub    DWORD PTR [esp+0x3c],0x1
c000fcd0:	8d 4c 24 1f          	lea    ecx,[esp+0x1f]
c000fcd4:	01 c8                	add    eax,ecx
c000fcd6:	8a 10                	mov    dl,BYTE PTR [eax]
c000fcd8:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000fcdc:	88 10                	mov    BYTE PTR [eax],dl
c000fcde:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000fce2:	89 c2                	mov    edx,eax
c000fce4:	c1 fa 1f             	sar    edx,0x1f
c000fce7:	52                   	push   edx
c000fce8:	50                   	push   eax
c000fce9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fced:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fcf1:	e8 de 45 01 00       	call   c00242d4 <__udivdi3>
c000fcf6:	83 c4 10             	add    esp,0x10
c000fcf9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000fcfd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000fd01:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fd05:	80 f4 00             	xor    ah,0x0
c000fd08:	89 c3                	mov    ebx,eax
c000fd0a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fd0e:	80 f4 00             	xor    ah,0x0
c000fd11:	89 c6                	mov    esi,eax
c000fd13:	89 f0                	mov    eax,esi
c000fd15:	09 d8                	or     eax,ebx
c000fd17:	74 03                	je     c000fd1c <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0x110>
c000fd19:	eb 91                	jmp    c000fcac <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0xa0>
c000fd1b:	90                   	nop
c000fd1c:	90                   	nop
c000fd1d:	83 c4 4c             	add    esp,0x4c
c000fd20:	5b                   	pop    ebx
c000fd21:	5e                   	pop    esi
c000fd22:	5f                   	pop    edi
c000fd23:	5d                   	pop    ebp
c000fd24:	c3                   	ret    
c000fd25:	8d 76 00             	lea    esi,[esi+0x0]

c000fd28 <KeBasedSignedIntegerToString(long long, char*, int)>:
c000fd28:	55                   	push   ebp
c000fd29:	57                   	push   edi
c000fd2a:	56                   	push   esi
c000fd2b:	53                   	push   ebx
c000fd2c:	83 ec 4c             	sub    esp,0x4c
c000fd2f:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000fd33:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000fd37:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000fd3b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fd3f:	c7 44 24 1f 30 31 32 33 	mov    DWORD PTR [esp+0x1f],0x33323130
c000fd47:	c7 44 24 23 34 35 36 37 	mov    DWORD PTR [esp+0x23],0x37363534
c000fd4f:	c7 44 24 27 38 39 41 42 	mov    DWORD PTR [esp+0x27],0x42413938
c000fd57:	c7 44 24 2b 43 44 45 46 	mov    DWORD PTR [esp+0x2b],0x46454443
c000fd5f:	c6 44 24 2f 00       	mov    BYTE PTR [esp+0x2f],0x0
c000fd64:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c000fd68:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000fd6c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000fd71:	79 1d                	jns    c000fd90 <KeBasedSignedIntegerToString(long long, char*, int)+0x68>
c000fd73:	f7 5c 24 08          	neg    DWORD PTR [esp+0x8]
c000fd77:	83 54 24 0c 00       	adc    DWORD PTR [esp+0xc],0x0
c000fd7c:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c000fd80:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000fd84:	8d 50 01             	lea    edx,[eax+0x1]
c000fd87:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000fd8b:	c6 00 2d             	mov    BYTE PTR [eax],0x2d
c000fd8e:	66 90                	xchg   ax,ax
c000fd90:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fd94:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000fd98:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000fd9c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000fda0:	83 44 24 3c 01       	add    DWORD PTR [esp+0x3c],0x1
c000fda5:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000fda9:	89 c2                	mov    edx,eax
c000fdab:	c1 fa 1f             	sar    edx,0x1f
c000fdae:	52                   	push   edx
c000fdaf:	50                   	push   eax
c000fdb0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000fdb4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000fdb8:	e8 17 45 01 00       	call   c00242d4 <__udivdi3>
c000fdbd:	83 c4 10             	add    esp,0x10
c000fdc0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000fdc4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000fdc8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fdcc:	80 f4 00             	xor    ah,0x0
c000fdcf:	89 c7                	mov    edi,eax
c000fdd1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000fdd5:	80 f4 00             	xor    ah,0x0
c000fdd8:	89 c5                	mov    ebp,eax
c000fdda:	89 e8                	mov    eax,ebp
c000fddc:	09 f8                	or     eax,edi
c000fdde:	74 04                	je     c000fde4 <KeBasedSignedIntegerToString(long long, char*, int)+0xbc>
c000fde0:	eb be                	jmp    c000fda0 <KeBasedSignedIntegerToString(long long, char*, int)+0x78>
c000fde2:	66 90                	xchg   ax,ax
c000fde4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000fde8:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000fdeb:	90                   	nop
c000fdec:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000fdf0:	89 c7                	mov    edi,eax
c000fdf2:	89 c5                	mov    ebp,eax
c000fdf4:	c1 fd 1f             	sar    ebp,0x1f
c000fdf7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fdfb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000fdff:	55                   	push   ebp
c000fe00:	57                   	push   edi
c000fe01:	52                   	push   edx
c000fe02:	50                   	push   eax
c000fe03:	e8 4c 43 01 00       	call   c0024154 <__moddi3>
c000fe08:	83 c4 10             	add    esp,0x10
c000fe0b:	83 6c 24 3c 01       	sub    DWORD PTR [esp+0x3c],0x1
c000fe10:	8d 4c 24 1f          	lea    ecx,[esp+0x1f]
c000fe14:	01 c8                	add    eax,ecx
c000fe16:	8a 10                	mov    dl,BYTE PTR [eax]
c000fe18:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000fe1c:	88 10                	mov    BYTE PTR [eax],dl
c000fe1e:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000fe22:	89 c2                	mov    edx,eax
c000fe24:	c1 fa 1f             	sar    edx,0x1f
c000fe27:	52                   	push   edx
c000fe28:	50                   	push   eax
c000fe29:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fe2d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fe31:	e8 d2 41 01 00       	call   c0024008 <__divdi3>
c000fe36:	83 c4 10             	add    esp,0x10
c000fe39:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000fe3d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000fe41:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fe45:	80 f4 00             	xor    ah,0x0
c000fe48:	89 c3                	mov    ebx,eax
c000fe4a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fe4e:	80 f4 00             	xor    ah,0x0
c000fe51:	89 c6                	mov    esi,eax
c000fe53:	89 f0                	mov    eax,esi
c000fe55:	09 d8                	or     eax,ebx
c000fe57:	74 03                	je     c000fe5c <KeBasedSignedIntegerToString(long long, char*, int)+0x134>
c000fe59:	eb 91                	jmp    c000fdec <KeBasedSignedIntegerToString(long long, char*, int)+0xc4>
c000fe5b:	90                   	nop
c000fe5c:	90                   	nop
c000fe5d:	83 c4 4c             	add    esp,0x4c
c000fe60:	5b                   	pop    ebx
c000fe61:	5e                   	pop    esi
c000fe62:	5f                   	pop    edi
c000fe63:	5d                   	pop    ebp
c000fe64:	c3                   	ret    
c000fe65:	8d 76 00             	lea    esi,[esi+0x0]

c000fe68 <KeGetDigitsInNumber(long long)>:
c000fe68:	56                   	push   esi
c000fe69:	53                   	push   ebx
c000fe6a:	83 ec 24             	sub    esp,0x24
c000fe6d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fe71:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000fe75:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000fe79:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fe7d:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000fe85:	8d 76 00             	lea    esi,[esi+0x0]
c000fe88:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fe8c:	80 f4 00             	xor    ah,0x0
c000fe8f:	89 c3                	mov    ebx,eax
c000fe91:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fe95:	80 f4 00             	xor    ah,0x0
c000fe98:	89 c6                	mov    esi,eax
c000fe9a:	89 f0                	mov    eax,esi
c000fe9c:	09 d8                	or     eax,ebx
c000fe9e:	74 28                	je     c000fec8 <KeGetDigitsInNumber(long long)+0x60>
c000fea0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fea4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000fea8:	6a 00                	push   0x0
c000feaa:	6a 0a                	push   0xa
c000feac:	52                   	push   edx
c000fead:	50                   	push   eax
c000feae:	e8 55 41 01 00       	call   c0024008 <__divdi3>
c000feb3:	83 c4 10             	add    esp,0x10
c000feb6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000feba:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000febe:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000fec3:	eb c3                	jmp    c000fe88 <KeGetDigitsInNumber(long long)+0x20>
c000fec5:	8d 76 00             	lea    esi,[esi+0x0]
c000fec8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000fecc:	83 c4 24             	add    esp,0x24
c000fecf:	5b                   	pop    ebx
c000fed0:	5e                   	pop    esi
c000fed1:	c3                   	ret    
c000fed2:	66 90                	xchg   ax,ax

c000fed4 <KeItoa(unsigned long long, char*)>:
c000fed4:	83 ec 1c             	sub    esp,0x1c
c000fed7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fedb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000fedf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fee3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fee7:	6a 0a                	push   0xa
c000fee9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000feed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fef1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fef5:	e8 12 fd ff ff       	call   c000fc0c <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)>
c000fefa:	83 c4 10             	add    esp,0x10
c000fefd:	90                   	nop
c000fefe:	83 c4 1c             	add    esp,0x1c
c000ff01:	c3                   	ret    
c000ff02:	66 90                	xchg   ax,ax

c000ff04 <KeItoa(long long, char*)>:
c000ff04:	83 ec 1c             	sub    esp,0x1c
c000ff07:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ff0b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ff0f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ff13:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ff17:	6a 0a                	push   0xa
c000ff19:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ff1d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ff21:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ff25:	e8 fe fd ff ff       	call   c000fd28 <KeBasedSignedIntegerToString(long long, char*, int)>
c000ff2a:	83 c4 10             	add    esp,0x10
c000ff2d:	90                   	nop
c000ff2e:	83 c4 1c             	add    esp,0x1c
c000ff31:	c3                   	ret    
c000ff32:	66 90                	xchg   ax,ax

c000ff34 <KeXtoa(unsigned long long, char*)>:
c000ff34:	83 ec 1c             	sub    esp,0x1c
c000ff37:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ff3b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ff3f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ff43:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ff47:	6a 10                	push   0x10
c000ff49:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ff4d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ff51:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ff55:	e8 b2 fc ff ff       	call   c000fc0c <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)>
c000ff5a:	83 c4 10             	add    esp,0x10
c000ff5d:	90                   	nop
c000ff5e:	83 c4 1c             	add    esp,0x1c
c000ff61:	c3                   	ret    

c000ff62 <sbrk>:
c000ff62:	55                   	push   ebp
c000ff63:	57                   	push   edi
c000ff64:	56                   	push   esi
c000ff65:	53                   	push   ebx
c000ff66:	83 ec 1c             	sub    esp,0x1c
c000ff69:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ff6d:	85 c0                	test   eax,eax
c000ff6f:	74 66                	je     c000ffd7 <sbrk+0x75>
c000ff71:	78 6b                	js     c000ffde <sbrk+0x7c>
c000ff73:	8b 15 b0 fa 02 c0    	mov    edx,DWORD PTR ds:0xc002fab0
c000ff79:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ff7d:	8d a8 fe 1f 00 00    	lea    ebp,[eax+0x1ffe]
c000ff83:	05 ff 0f 00 00       	add    eax,0xfff
c000ff88:	0f 49 e8             	cmovns ebp,eax
c000ff8b:	c1 fd 0c             	sar    ebp,0xc
c000ff8e:	bb 00 00 00 00       	mov    ebx,0x0
c000ff93:	8b 35 90 62 03 c0    	mov    esi,DWORD PTR ds:0xc0036290
c000ff99:	8b 3d b0 fa 02 c0    	mov    edi,DWORD PTR ds:0xc002fab0
c000ff9f:	e8 b6 07 00 00       	call   c001075a <Phys::allocatePage()>
c000ffa4:	68 01 04 00 00       	push   0x401
c000ffa9:	57                   	push   edi
c000ffaa:	50                   	push   eax
c000ffab:	56                   	push   esi
c000ffac:	e8 cf 41 00 00       	call   c0014180 <VAS::mapPage(unsigned long, unsigned long, int)>
c000ffb1:	81 05 b0 fa 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002fab0,0x1000
c000ffbb:	83 c3 01             	add    ebx,0x1
c000ffbe:	83 c4 10             	add    esp,0x10
c000ffc1:	39 dd                	cmp    ebp,ebx
c000ffc3:	75 ce                	jne    c000ff93 <sbrk+0x31>
c000ffc5:	0f 20 d8             	mov    eax,cr3
c000ffc8:	0f 22 d8             	mov    cr3,eax
c000ffcb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ffcf:	83 c4 1c             	add    esp,0x1c
c000ffd2:	5b                   	pop    ebx
c000ffd3:	5e                   	pop    esi
c000ffd4:	5f                   	pop    edi
c000ffd5:	5d                   	pop    ebp
c000ffd6:	c3                   	ret    
c000ffd7:	a1 b0 fa 02 c0       	mov    eax,ds:0xc002fab0
c000ffdc:	eb f1                	jmp    c000ffcf <sbrk+0x6d>
c000ffde:	83 ec 08             	sub    esp,0x8
c000ffe1:	50                   	push   eax
c000ffe2:	68 2c b4 02 c0       	push   0xc002b42c
c000ffe7:	e8 7a 6f ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000ffec:	83 c4 10             	add    esp,0x10
c000ffef:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000fff4:	eb d9                	jmp    c000ffcf <sbrk+0x6d>

c000fff6 <sbrk_thunk>:
c000fff6:	83 ec 0c             	sub    esp,0xc
c000fff9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fffd:	3d ff bf 00 00       	cmp    eax,0xbfff
c0010002:	7f 10                	jg     c0010014 <sbrk_thunk+0x1e>
c0010004:	83 ec 0c             	sub    esp,0xc
c0010007:	50                   	push   eax
c0010008:	e8 55 ff ff ff       	call   c000ff62 <sbrk>
c001000d:	83 c4 10             	add    esp,0x10
c0010010:	83 c4 0c             	add    esp,0xc
c0010013:	c3                   	ret    
c0010014:	83 ec 08             	sub    esp,0x8
c0010017:	50                   	push   eax
c0010018:	68 5c b4 02 c0       	push   0xc002b45c
c001001d:	e8 44 6f ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0010022:	83 c4 10             	add    esp,0x10
c0010025:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001002a:	eb e4                	jmp    c0010010 <sbrk_thunk+0x1a>

c001002c <mmap>:
c001002c:	55                   	push   ebp
c001002d:	57                   	push   edi
c001002e:	56                   	push   esi
c001002f:	53                   	push   ebx
c0010030:	83 ec 18             	sub    esp,0x18
c0010033:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010037:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c001003d:	89 fb                	mov    ebx,edi
c001003f:	c1 eb 0c             	shr    ebx,0xc
c0010042:	53                   	push   ebx
c0010043:	e8 5f 3a 00 00       	call   c0013aa7 <Virt::allocateKernelVirtualPages(int)>
c0010048:	89 c5                	mov    ebp,eax
c001004a:	83 c4 10             	add    esp,0x10
c001004d:	85 db                	test   ebx,ebx
c001004f:	7e 2f                	jle    c0010080 <mmap+0x54>
c0010051:	81 e7 00 f0 ff ff    	and    edi,0xfffff000
c0010057:	01 c7                	add    edi,eax
c0010059:	89 c3                	mov    ebx,eax
c001005b:	8b 35 90 62 03 c0    	mov    esi,DWORD PTR ds:0xc0036290
c0010061:	e8 f4 06 00 00       	call   c001075a <Phys::allocatePage()>
c0010066:	68 01 04 00 00       	push   0x401
c001006b:	53                   	push   ebx
c001006c:	50                   	push   eax
c001006d:	56                   	push   esi
c001006e:	e8 0d 41 00 00       	call   c0014180 <VAS::mapPage(unsigned long, unsigned long, int)>
c0010073:	81 c3 00 10 00 00    	add    ebx,0x1000
c0010079:	83 c4 10             	add    esp,0x10
c001007c:	39 fb                	cmp    ebx,edi
c001007e:	75 db                	jne    c001005b <mmap+0x2f>
c0010080:	89 e8                	mov    eax,ebp
c0010082:	83 c4 0c             	add    esp,0xc
c0010085:	5b                   	pop    ebx
c0010086:	5e                   	pop    esi
c0010087:	5f                   	pop    edi
c0010088:	5d                   	pop    ebp
c0010089:	c3                   	ret    

c001008a <munmap>:
c001008a:	83 ec 18             	sub    esp,0x18
c001008d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010091:	e8 0f 3d 00 00       	call   c0013da5 <Virt::freeKernelVirtualPages(unsigned long)>
c0010096:	b8 00 00 00 00       	mov    eax,0x0
c001009b:	83 c4 1c             	add    esp,0x1c
c001009e:	c3                   	ret    

c001009f <liballoc_lock()>:
c001009f:	fa                   	cli    
c00100a0:	83 05 30 63 03 c0 01 	add    DWORD PTR ds:0xc0036330,0x1
c00100a7:	b8 00 00 00 00       	mov    eax,0x0
c00100ac:	c3                   	ret    

c00100ad <liballoc_unlock()>:
c00100ad:	f0 83 2d 30 63 03 c0 01 	lock sub DWORD PTR ds:0xc0036330,0x1
c00100b5:	83 3d 30 63 03 c0 00 	cmp    DWORD PTR ds:0xc0036330,0x0
c00100bc:	75 01                	jne    c00100bf <liballoc_unlock()+0x12>
c00100be:	fb                   	sti    
c00100bf:	b8 00 00 00 00       	mov    eax,0x0
c00100c4:	c3                   	ret    

c00100c5 <liballoc_alloc(int)>:
c00100c5:	83 ec 10             	sub    esp,0x10
c00100c8:	6a 01                	push   0x1
c00100ca:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00100ce:	ff 35 90 62 03 c0    	push   DWORD PTR ds:0xc0036290
c00100d4:	e8 af 41 00 00       	call   c0014288 <VAS::allocatePages(int, int)>
c00100d9:	83 c4 1c             	add    esp,0x1c
c00100dc:	c3                   	ret    

c00100dd <liballoc_free(void*, int)>:
c00100dd:	83 ec 14             	sub    esp,0x14
c00100e0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00100e4:	ff 35 90 62 03 c0    	push   DWORD PTR ds:0xc0036290
c00100ea:	e8 f3 3d 00 00       	call   c0013ee2 <VAS::freeAllocatedPages(unsigned long)>
c00100ef:	b8 00 00 00 00       	mov    eax,0x0
c00100f4:	83 c4 1c             	add    esp,0x1c
c00100f7:	c3                   	ret    

c00100f8 <realloc>:
c00100f8:	83 ec 14             	sub    esp,0x14
c00100fb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00100ff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010103:	e8 7d 16 ff ff       	call   c0001785 <dlrealloc>
c0010108:	83 c4 1c             	add    esp,0x1c
c001010b:	c3                   	ret    

c001010c <malloc>:
c001010c:	83 ec 18             	sub    esp,0x18
c001010f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010113:	e8 30 11 ff ff       	call   c0001248 <dlmalloc>
c0010118:	83 c4 1c             	add    esp,0x1c
c001011b:	c3                   	ret    

c001011c <free>:
c001011c:	83 ec 18             	sub    esp,0x18
c001011f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010123:	e8 5e 0c ff ff       	call   c0000d86 <dlfree>
c0010128:	83 c4 1c             	add    esp,0x1c
c001012b:	c3                   	ret    

c001012c <rfree>:
c001012c:	83 ec 18             	sub    esp,0x18
c001012f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010133:	e8 4e 0c ff ff       	call   c0000d86 <dlfree>
c0010138:	83 c4 1c             	add    esp,0x1c
c001013b:	c3                   	ret    

c001013c <calloc>:
c001013c:	56                   	push   esi
c001013d:	53                   	push   ebx
c001013e:	83 ec 10             	sub    esp,0x10
c0010141:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010145:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c001014a:	53                   	push   ebx
c001014b:	e8 bc ff ff ff       	call   c001010c <malloc>
c0010150:	89 c6                	mov    esi,eax
c0010152:	83 c4 0c             	add    esp,0xc
c0010155:	53                   	push   ebx
c0010156:	6a 00                	push   0x0
c0010158:	50                   	push   eax
c0010159:	e8 92 03 ff ff       	call   c00004f0 <memset>
c001015e:	89 f0                	mov    eax,esi
c0010160:	83 c4 14             	add    esp,0x14
c0010163:	5b                   	pop    ebx
c0010164:	5e                   	pop    esi
c0010165:	c3                   	ret    
c0010166:	66 90                	xchg   ax,ax

c0010168 <KeMailboxTryPost(Mailbox*, void*)>:
c0010168:	83 ec 10             	sub    esp,0x10
c001016b:	fa                   	cli    
c001016c:	a1 30 63 03 c0       	mov    eax,ds:0xc0036330
c0010171:	83 c0 01             	add    eax,0x1
c0010174:	a3 30 63 03 c0       	mov    ds:0xc0036330,eax
c0010179:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001017e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010182:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010185:	85 c0                	test   eax,eax
c0010187:	75 23                	jne    c00101ac <KeMailboxTryPost(Mailbox*, void*)+0x44>
c0010189:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001018d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010191:	89 10                	mov    DWORD PTR [eax],edx
c0010193:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010197:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001019a:	8d 50 01             	lea    edx,[eax+0x1]
c001019d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00101a1:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00101a4:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c00101a9:	8d 76 00             	lea    esi,[esi+0x0]
c00101ac:	f0 83 2d 30 63 03 c0 01 	lock sub DWORD PTR ds:0xc0036330,0x1
c00101b4:	a1 30 63 03 c0       	mov    eax,ds:0xc0036330
c00101b9:	85 c0                	test   eax,eax
c00101bb:	75 03                	jne    c00101c0 <KeMailboxTryPost(Mailbox*, void*)+0x58>
c00101bd:	fb                   	sti    
c00101be:	66 90                	xchg   ax,ax
c00101c0:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00101c4:	83 c4 10             	add    esp,0x10
c00101c7:	c3                   	ret    

c00101c8 <KeMailboxTryGet(Mailbox*, void**)>:
c00101c8:	83 ec 10             	sub    esp,0x10
c00101cb:	fa                   	cli    
c00101cc:	a1 30 63 03 c0       	mov    eax,ds:0xc0036330
c00101d1:	83 c0 01             	add    eax,0x1
c00101d4:	a3 30 63 03 c0       	mov    ds:0xc0036330,eax
c00101d9:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00101de:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00101e2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00101e5:	83 f8 01             	cmp    eax,0x1
c00101e8:	75 22                	jne    c001020c <KeMailboxTryGet(Mailbox*, void**)+0x44>
c00101ea:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00101ee:	8b 10                	mov    edx,DWORD PTR [eax]
c00101f0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00101f4:	89 10                	mov    DWORD PTR [eax],edx
c00101f6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00101fa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00101fd:	8d 50 ff             	lea    edx,[eax-0x1]
c0010200:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010204:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010207:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c001020c:	f0 83 2d 30 63 03 c0 01 	lock sub DWORD PTR ds:0xc0036330,0x1
c0010214:	a1 30 63 03 c0       	mov    eax,ds:0xc0036330
c0010219:	85 c0                	test   eax,eax
c001021b:	75 03                	jne    c0010220 <KeMailboxTryGet(Mailbox*, void**)+0x58>
c001021d:	fb                   	sti    
c001021e:	66 90                	xchg   ax,ax
c0010220:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0010224:	83 c4 10             	add    esp,0x10
c0010227:	c3                   	ret    

c0010228 <KeMailboxCreate()>:
c0010228:	83 ec 1c             	sub    esp,0x1c
c001022b:	83 ec 0c             	sub    esp,0xc
c001022e:	6a 08                	push   0x8
c0010230:	e8 d7 fe ff ff       	call   c001010c <malloc>
c0010235:	83 c4 10             	add    esp,0x10
c0010238:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001023c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010240:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010246:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001024a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010251:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010255:	83 c4 1c             	add    esp,0x1c
c0010258:	c3                   	ret    
c0010259:	8d 76 00             	lea    esi,[esi+0x0]

c001025c <KeMailboxPost(Mailbox*, void*)>:
c001025c:	83 ec 1c             	sub    esp,0x1c
c001025f:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0010264:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0010268:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001026c:	e8 f7 fe ff ff       	call   c0010168 <KeMailboxTryPost(Mailbox*, void*)>
c0010271:	83 c4 08             	add    esp,0x8
c0010274:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0010278:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001027c:	83 f0 01             	xor    eax,0x1
c001027f:	0f b6 c0             	movzx  eax,al
c0010282:	85 c0                	test   eax,eax
c0010284:	74 26                	je     c00102ac <KeMailboxPost(Mailbox*, void*)+0x50>
c0010286:	fa                   	cli    
c0010287:	a1 30 63 03 c0       	mov    eax,ds:0xc0036330
c001028c:	83 c0 01             	add    eax,0x1
c001028f:	a3 30 63 03 c0       	mov    ds:0xc0036330,eax
c0010294:	e8 4f 6e 00 00       	call   c00170e8 <schedule()>
c0010299:	f0 83 2d 30 63 03 c0 01 	lock sub DWORD PTR ds:0xc0036330,0x1
c00102a1:	a1 30 63 03 c0       	mov    eax,ds:0xc0036330
c00102a6:	85 c0                	test   eax,eax
c00102a8:	75 02                	jne    c00102ac <KeMailboxPost(Mailbox*, void*)+0x50>
c00102aa:	fb                   	sti    
c00102ab:	90                   	nop
c00102ac:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00102b1:	85 c0                	test   eax,eax
c00102b3:	75 03                	jne    c00102b8 <KeMailboxPost(Mailbox*, void*)+0x5c>
c00102b5:	eb ad                	jmp    c0010264 <KeMailboxPost(Mailbox*, void*)+0x8>
c00102b7:	90                   	nop
c00102b8:	90                   	nop
c00102b9:	83 c4 1c             	add    esp,0x1c
c00102bc:	c3                   	ret    
c00102bd:	8d 76 00             	lea    esi,[esi+0x0]

c00102c0 <KeMailboxGet(Mailbox*, void**)>:
c00102c0:	83 ec 1c             	sub    esp,0x1c
c00102c3:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00102c8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00102cc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00102d0:	e8 f3 fe ff ff       	call   c00101c8 <KeMailboxTryGet(Mailbox*, void**)>
c00102d5:	83 c4 08             	add    esp,0x8
c00102d8:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00102dc:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00102e0:	83 f0 01             	xor    eax,0x1
c00102e3:	0f b6 c0             	movzx  eax,al
c00102e6:	85 c0                	test   eax,eax
c00102e8:	74 26                	je     c0010310 <KeMailboxGet(Mailbox*, void**)+0x50>
c00102ea:	fa                   	cli    
c00102eb:	a1 30 63 03 c0       	mov    eax,ds:0xc0036330
c00102f0:	83 c0 01             	add    eax,0x1
c00102f3:	a3 30 63 03 c0       	mov    ds:0xc0036330,eax
c00102f8:	e8 eb 6d 00 00       	call   c00170e8 <schedule()>
c00102fd:	f0 83 2d 30 63 03 c0 01 	lock sub DWORD PTR ds:0xc0036330,0x1
c0010305:	a1 30 63 03 c0       	mov    eax,ds:0xc0036330
c001030a:	85 c0                	test   eax,eax
c001030c:	75 02                	jne    c0010310 <KeMailboxGet(Mailbox*, void**)+0x50>
c001030e:	fb                   	sti    
c001030f:	90                   	nop
c0010310:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0010315:	85 c0                	test   eax,eax
c0010317:	75 03                	jne    c001031c <KeMailboxGet(Mailbox*, void**)+0x5c>
c0010319:	eb ad                	jmp    c00102c8 <KeMailboxGet(Mailbox*, void**)+0x8>
c001031b:	90                   	nop
c001031c:	90                   	nop
c001031d:	83 c4 1c             	add    esp,0x1c
c0010320:	c3                   	ret    
c0010321:	8d 76 00             	lea    esi,[esi+0x0]

c0010324 <KeMailboxDestroy(Mailbox*)>:
c0010324:	83 ec 0c             	sub    esp,0xc
c0010327:	83 ec 0c             	sub    esp,0xc
c001032a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001032e:	e8 e9 fd ff ff       	call   c001011c <free>
c0010333:	83 c4 10             	add    esp,0x10
c0010336:	90                   	nop
c0010337:	83 c4 0c             	add    esp,0xc
c001033a:	c3                   	ret    

c001033b <KeFirstTask()>:
c001033b:	53                   	push   ebx
c001033c:	83 ec 08             	sub    esp,0x8
c001033f:	fb                   	sti    
c0010340:	e8 5c a5 00 00       	call   c001a8a1 <HalEnableNMI()>
c0010345:	83 ec 0c             	sub    esp,0xc
c0010348:	68 6b b4 02 c0       	push   0xc002b46b
c001034d:	e8 0f d9 ff ff       	call   c000dc61 <KeSetBootMessage(char const*)>
c0010352:	c7 04 24 c4 07 00 00 	mov    DWORD PTR [esp],0x7c4
c0010359:	e8 ae fd ff ff       	call   c001010c <malloc>
c001035e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0010365:	89 c3                	mov    ebx,eax
c0010367:	a1 58 63 03 c0       	mov    eax,ds:0xc0036358
c001036c:	50                   	push   eax
c001036d:	68 84 b4 02 c0       	push   0xc002b484
c0010372:	6a 01                	push   0x1
c0010374:	53                   	push   ebx
c0010375:	e8 7a 68 00 00       	call   c0016bf4 <Process::Process(bool, char const*, Process*, char**)>
c001037a:	83 c4 20             	add    esp,0x20
c001037d:	68 ff 00 00 00       	push   0xff
c0010382:	6a 00                	push   0x0
c0010384:	68 37 f4 00 c0       	push   0xc000f437
c0010389:	53                   	push   ebx
c001038a:	e8 a5 6a 00 00       	call   c0016e34 <Process::createThread(void (*)(void*), void*, int)>
c001038f:	8b 15 58 63 03 c0    	mov    edx,DWORD PTR ds:0xc0036358
c0010395:	6a 7a                	push   0x7a
c0010397:	6a 00                	push   0x0
c0010399:	68 c4 77 01 c0       	push   0xc00177c4
c001039e:	52                   	push   edx
c001039f:	e8 90 6a 00 00       	call   c0016e34 <Process::createThread(void (*)(void*), void*, int)>
c00103a4:	83 c4 14             	add    esp,0x14
c00103a7:	68 0c b5 02 c0       	push   0xc002b50c
c00103ac:	a3 10 63 03 c0       	mov    ds:0xc0036310,eax
c00103b1:	e8 ab d8 ff ff       	call   c000dc61 <KeSetBootMessage(char const*)>
c00103b6:	c6 05 0d 61 03 c0 01 	mov    BYTE PTR ds:0xc003610d,0x1
c00103bd:	e8 df 0b 00 00       	call   c0010fa1 <KeInitRand()>
c00103c2:	e8 83 78 00 00       	call   c0017c4a <Vm::initialise8086()>
c00103c7:	e8 90 84 ff ff       	call   c000885c <Fs::initVFS()>
c00103cc:	c7 04 24 d8 b0 02 c0 	mov    DWORD PTR [esp],0xc002b0d8
c00103d3:	e8 89 d8 ff ff       	call   c000dc61 <KeSetBootMessage(char const*)>
c00103d8:	a1 08 61 03 c0       	mov    eax,ds:0xc0036108
c00103dd:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c00103e3:	8b 10                	mov    edx,DWORD PTR [eax]
c00103e5:	6a 00                	push   0x0
c00103e7:	6a 00                	push   0x0
c00103e9:	6a 00                	push   0x0
c00103eb:	50                   	push   eax
c00103ec:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00103ef:	83 c4 14             	add    esp,0x14
c00103f2:	68 0c b5 02 c0       	push   0xc002b50c
c00103f7:	e8 65 d8 ff ff       	call   c000dc61 <KeSetBootMessage(char const*)>
c00103fc:	e8 3f 7c ff ff       	call   c0008040 <KeInitialiseSymlinks()>
c0010401:	e8 a4 eb ff ff       	call   c000efaa <KeLoadSystemEnv()>
c0010406:	e8 dd 09 00 00       	call   c0010de8 <KeSetupPowerManager()>
c001040b:	c7 04 24 91 b4 02 c0 	mov    DWORD PTR [esp],0xc002b491
c0010412:	e8 4a d8 ff ff       	call   c000dc61 <KeSetBootMessage(char const*)>
c0010417:	8b 0d 08 61 03 c0    	mov    ecx,DWORD PTR ds:0xc0036108
c001041d:	83 c4 0c             	add    esp,0xc
c0010420:	6a 00                	push   0x0
c0010422:	51                   	push   ecx
c0010423:	68 a2 b4 02 c0       	push   0xc002b4a2
c0010428:	e8 39 63 00 00       	call   c0016766 <KeLoadAndExecuteDriver(char const*, void*, bool)>
c001042d:	83 c4 10             	add    esp,0x10
c0010430:	83 ec 0c             	sub    esp,0xc
c0010433:	6a 02                	push   0x2
c0010435:	e8 6e 6d 00 00       	call   c00171a8 <blockTask(TaskState)>
c001043a:	83 c4 10             	add    esp,0x10
c001043d:	eb f1                	jmp    c0010430 <KeFirstTask()+0xf5>

c001043f <KeEntryPoint>:
c001043f:	57                   	push   edi
c0010440:	bf f9 03 00 00       	mov    edi,0x3f9
c0010445:	56                   	push   esi
c0010446:	31 f6                	xor    esi,esi
c0010448:	53                   	push   ebx
c0010449:	83 ec 20             	sub    esp,0x20
c001044c:	e8 d3 d7 ff ff       	call   c000dc24 <KeInitialiseBootConfigurationFlags()>
c0010451:	89 f0                	mov    eax,esi
c0010453:	89 fa                	mov    edx,edi
c0010455:	ee                   	out    dx,al
c0010456:	bb fb 03 00 00       	mov    ebx,0x3fb
c001045b:	b0 80                	mov    al,0x80
c001045d:	89 da                	mov    edx,ebx
c001045f:	ee                   	out    dx,al
c0010460:	b1 03                	mov    cl,0x3
c0010462:	ba f8 03 00 00       	mov    edx,0x3f8
c0010467:	88 c8                	mov    al,cl
c0010469:	ee                   	out    dx,al
c001046a:	89 f0                	mov    eax,esi
c001046c:	89 fa                	mov    edx,edi
c001046e:	ee                   	out    dx,al
c001046f:	88 c8                	mov    al,cl
c0010471:	89 da                	mov    edx,ebx
c0010473:	ee                   	out    dx,al
c0010474:	b0 c7                	mov    al,0xc7
c0010476:	ba fa 03 00 00       	mov    edx,0x3fa
c001047b:	ee                   	out    dx,al
c001047c:	b0 0b                	mov    al,0xb
c001047e:	ba fc 03 00 00       	mov    edx,0x3fc
c0010483:	ee                   	out    dx,al
c0010484:	83 ec 0c             	sub    esp,0xc
c0010487:	68 be b4 02 c0       	push   0xc002b4be
c001048c:	e8 d5 6a ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0010491:	e8 9c d7 ff ff       	call   c000dc32 <KeDisplaySplashScreen()>
c0010496:	a1 24 05 00 00       	mov    eax,ds:0x524
c001049b:	05 ff 0f 00 00       	add    eax,0xfff
c00104a0:	25 00 f0 ff ff       	and    eax,0xfffff000
c00104a5:	89 04 24             	mov    DWORD PTR [esp],eax
c00104a8:	e8 47 04 00 00       	call   c00108f4 <Phys::physicalMemorySetup(unsigned int)>
c00104ad:	e8 c9 37 00 00       	call   c0013c7b <Virt::virtualMemorySetup()>
c00104b2:	e8 cb d6 ff ff       	call   c000db82 <KeInitialiseAtexit()>
c00104b7:	58                   	pop    eax
c00104b8:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c00104bc:	53                   	push   ebx
c00104bd:	e8 a0 3a 00 00       	call   c0013f62 <VAS::VAS()>
c00104c2:	89 1d 90 62 03 c0    	mov    DWORD PTR ds:0xc0036290,ebx
c00104c8:	e8 fb 78 01 00       	call   c0027dc8 <_init>
c00104cd:	c7 04 24 d5 b4 02 c0 	mov    DWORD PTR [esp],0xc002b4d5
c00104d4:	e8 88 d7 ff ff       	call   c000dc61 <KeSetBootMessage(char const*)>
c00104d9:	c7 04 24 68 01 00 00 	mov    DWORD PTR [esp],0x168
c00104e0:	e8 27 fc ff ff       	call   c001010c <malloc>
c00104e5:	89 04 24             	mov    DWORD PTR [esp],eax
c00104e8:	89 c6                	mov    esi,eax
c00104ea:	e8 f3 e4 ff ff       	call   c000e9e2 <Computer::Computer()>
c00104ef:	8b 15 90 62 03 c0    	mov    edx,DWORD PTR ds:0xc0036290
c00104f5:	89 35 08 61 03 c0    	mov    DWORD PTR ds:0xc0036108,esi
c00104fb:	52                   	push   edx
c00104fc:	6a 00                	push   0x0
c00104fe:	6a 00                	push   0x0
c0010500:	56                   	push   esi
c0010501:	e8 20 e5 ff ff       	call   c000ea26 <Computer::open(int, int, void*)>
c0010506:	83 c4 14             	add    esp,0x14
c0010509:	68 30 b5 02 c0       	push   0xc002b530
c001050e:	e8 4e d7 ff ff       	call   c000dc61 <KeSetBootMessage(char const*)>
c0010513:	e8 0f ab 00 00       	call   c001b027 <HalInitialiseCoprocessor()>
c0010518:	c7 04 24 ef b4 02 c0 	mov    DWORD PTR [esp],0xc002b4ef
c001051f:	e8 3d d7 ff ff       	call   c000dc61 <KeSetBootMessage(char const*)>
c0010524:	c7 04 24 3b 03 01 c0 	mov    DWORD PTR [esp],0xc001033b
c001052b:	e8 70 6a 00 00       	call   c0016fa0 <setupMultitasking(void (*)())>
c0010530:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010533:	e8 e0 3a 00 00       	call   c0014018 <VAS::~VAS()>
c0010538:	83 c4 30             	add    esp,0x30
c001053b:	5b                   	pop    ebx
c001053c:	5e                   	pop    esi
c001053d:	5f                   	pop    edi
c001053e:	c3                   	ret    
c001053f:	90                   	nop

c0010540 <Mutex::Mutex()>:
c0010540:	83 ec 0c             	sub    esp,0xc
c0010543:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010547:	83 ec 08             	sub    esp,0x8
c001054a:	6a 01                	push   0x1
c001054c:	50                   	push   eax
c001054d:	e8 ee 0c 00 00       	call   c0011240 <Semaphore::Semaphore(int)>
c0010552:	83 c4 10             	add    esp,0x10
c0010555:	90                   	nop
c0010556:	83 c4 0c             	add    esp,0xc
c0010559:	c3                   	ret    

c001055a <KeIsKernelInPanic()>:
c001055a:	a0 64 61 03 c0       	mov    al,ds:0xc0036164
c001055f:	c3                   	ret    

c0010560 <KePanic(char const*)>:
c0010560:	c6 05 64 61 03 c0 01 	mov    BYTE PTR ds:0xc0036164,0x1
c0010567:	e9 59 ab 00 00       	jmp    c001b0c5 <HalPanic(char const*)>

c001056c <Phys::allocateDMA(unsigned long)>:
c001056c:	55                   	push   ebp
c001056d:	31 ed                	xor    ebp,ebp
c001056f:	57                   	push   edi
c0010570:	56                   	push   esi
c0010571:	31 f6                	xor    esi,esi
c0010573:	53                   	push   ebx
c0010574:	31 db                	xor    ebx,ebx
c0010576:	83 ec 1c             	sub    esp,0x1c
c0010579:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001057d:	05 ff 0f 00 00       	add    eax,0xfff
c0010582:	c1 e8 0c             	shr    eax,0xc
c0010585:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010589:	31 c0                	xor    eax,eax
c001058b:	eb 1b                	jmp    c00105a8 <Phys::allocateDMA(unsigned long)+0x3c>
c001058d:	8d 78 01             	lea    edi,[eax+0x1]
c0010590:	85 c0                	test   eax,eax
c0010592:	0f 44 eb             	cmove  ebp,ebx
c0010595:	0f 44 f3             	cmove  esi,ebx
c0010598:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c001059c:	74 37                	je     c00105d5 <Phys::allocateDMA(unsigned long)+0x69>
c001059e:	89 f8                	mov    eax,edi
c00105a0:	83 c3 01             	add    ebx,0x1
c00105a3:	83 fb 0f             	cmp    ebx,0xf
c00105a6:	7f 13                	jg     c00105bb <Phys::allocateDMA(unsigned long)+0x4f>
c00105a8:	80 bb 80 61 03 c0 00 	cmp    BYTE PTR [ebx-0x3ffc9e80],0x0
c00105af:	74 dc                	je     c001058d <Phys::allocateDMA(unsigned long)+0x21>
c00105b1:	31 c0                	xor    eax,eax
c00105b3:	83 c3 01             	add    ebx,0x1
c00105b6:	83 fb 0f             	cmp    ebx,0xf
c00105b9:	7e ed                	jle    c00105a8 <Phys::allocateDMA(unsigned long)+0x3c>
c00105bb:	83 ec 0c             	sub    esp,0xc
c00105be:	68 54 b5 02 c0       	push   0xc002b554
c00105c3:	e8 98 ff ff ff       	call   c0010560 <KePanic(char const*)>
c00105c8:	83 c4 10             	add    esp,0x10
c00105cb:	31 c0                	xor    eax,eax
c00105cd:	83 c4 1c             	add    esp,0x1c
c00105d0:	5b                   	pop    ebx
c00105d1:	5e                   	pop    esi
c00105d2:	5f                   	pop    edi
c00105d3:	5d                   	pop    ebp
c00105d4:	c3                   	ret    
c00105d5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00105d9:	89 f2                	mov    edx,esi
c00105db:	c1 fa 04             	sar    edx,0x4
c00105de:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00105e2:	01 f1                	add    ecx,esi
c00105e4:	8d 51 0e             	lea    edx,[ecx+0xe]
c00105e7:	83 e9 01             	sub    ecx,0x1
c00105ea:	0f 48 ca             	cmovs  ecx,edx
c00105ed:	c1 f9 04             	sar    ecx,0x4
c00105f0:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00105f4:	74 06                	je     c00105fc <Phys::allocateDMA(unsigned long)+0x90>
c00105f6:	89 eb                	mov    ebx,ebp
c00105f8:	31 c0                	xor    eax,eax
c00105fa:	eb b7                	jmp    c00105b3 <Phys::allocateDMA(unsigned long)+0x47>
c00105fc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010600:	85 d2                	test   edx,edx
c0010602:	74 17                	je     c001061b <Phys::allocateDMA(unsigned long)+0xaf>
c0010604:	8d 96 80 61 03 c0    	lea    edx,[esi-0x3ffc9e80]
c001060a:	8d 84 06 81 61 03 c0 	lea    eax,[esi+eax*1-0x3ffc9e7f]
c0010611:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0010614:	83 c2 01             	add    edx,0x1
c0010617:	39 d0                	cmp    eax,edx
c0010619:	75 f6                	jne    c0010611 <Phys::allocateDMA(unsigned long)+0xa5>
c001061b:	8b 15 78 61 03 c0    	mov    edx,DWORD PTR ds:0xc0036178
c0010621:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010625:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010629:	01 c2                	add    edx,eax
c001062b:	89 15 78 61 03 c0    	mov    DWORD PTR ds:0xc0036178,edx
c0010631:	85 c9                	test   ecx,ecx
c0010633:	74 17                	je     c001064c <Phys::allocateDMA(unsigned long)+0xe0>
c0010635:	83 ec 0c             	sub    esp,0xc
c0010638:	68 54 b5 02 c0       	push   0xc002b554
c001063d:	e8 1e ff ff ff       	call   c0010560 <KePanic(char const*)>
c0010642:	83 c4 10             	add    esp,0x10
c0010645:	89 f8                	mov    eax,edi
c0010647:	e9 54 ff ff ff       	jmp    c00105a0 <Phys::allocateDMA(unsigned long)+0x34>
c001064c:	c1 e6 0c             	shl    esi,0xc
c001064f:	8d 86 00 00 01 c2    	lea    eax,[esi-0x3dff0000]
c0010655:	e9 73 ff ff ff       	jmp    c00105cd <Phys::allocateDMA(unsigned long)+0x61>

c001065a <Phys::freeDMA(unsigned long, unsigned long)>:
c001065a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001065e:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c0010664:	a1 78 61 03 c0       	mov    eax,ds:0xc0036178
c0010669:	c1 ea 0c             	shr    edx,0xc
c001066c:	29 d0                	sub    eax,edx
c001066e:	a3 78 61 03 c0       	mov    ds:0xc0036178,eax
c0010673:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010677:	05 00 00 ff 3d       	add    eax,0x3dff0000
c001067c:	c1 e8 0c             	shr    eax,0xc
c001067f:	85 d2                	test   edx,edx
c0010681:	74 11                	je     c0010694 <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c0010683:	05 80 61 03 c0       	add    eax,0xc0036180
c0010688:	01 c2                	add    edx,eax
c001068a:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001068d:	83 c0 01             	add    eax,0x1
c0010690:	39 d0                	cmp    eax,edx
c0010692:	75 f6                	jne    c001068a <Phys::freeDMA(unsigned long, unsigned long)+0x30>
c0010694:	c3                   	ret    

c0010695 <Phys::setPageState(unsigned long, bool)>:
c0010695:	57                   	push   edi
c0010696:	56                   	push   esi
c0010697:	8b 35 18 fb 02 c0    	mov    esi,DWORD PTR ds:0xc002fb18
c001069d:	53                   	push   ebx
c001069e:	bb fe ff ff ff       	mov    ebx,0xfffffffe
c00106a3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00106a7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00106ab:	89 ca                	mov    edx,ecx
c00106ad:	83 e1 07             	and    ecx,0x7
c00106b0:	c1 ea 03             	shr    edx,0x3
c00106b3:	0f b6 c0             	movzx  eax,al
c00106b6:	d3 c3                	rol    ebx,cl
c00106b8:	01 d6                	add    esi,edx
c00106ba:	0f b6 3e             	movzx  edi,BYTE PTR [esi]
c00106bd:	d3 e0                	shl    eax,cl
c00106bf:	21 fb                	and    ebx,edi
c00106c1:	88 1e                	mov    BYTE PTR [esi],bl
c00106c3:	8b 1d 18 fb 02 c0    	mov    ebx,DWORD PTR ds:0xc002fb18
c00106c9:	01 da                	add    edx,ebx
c00106cb:	8a 0a                	mov    cl,BYTE PTR [edx]
c00106cd:	09 c8                	or     eax,ecx
c00106cf:	88 02                	mov    BYTE PTR [edx],al
c00106d1:	5b                   	pop    ebx
c00106d2:	5e                   	pop    esi
c00106d3:	5f                   	pop    edi
c00106d4:	c3                   	ret    

c00106d5 <Phys::getPageState(unsigned long)>:
c00106d5:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00106d9:	8b 15 18 fb 02 c0    	mov    edx,DWORD PTR ds:0xc002fb18
c00106df:	89 c8                	mov    eax,ecx
c00106e1:	83 e1 07             	and    ecx,0x7
c00106e4:	c1 e8 03             	shr    eax,0x3
c00106e7:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c00106eb:	d3 f8                	sar    eax,cl
c00106ed:	83 e0 01             	and    eax,0x1
c00106f0:	c3                   	ret    

c00106f1 <Phys::freePage(unsigned long)>:
c00106f1:	53                   	push   ebx
c00106f2:	83 ec 08             	sub    esp,0x8
c00106f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106f9:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c00106ff:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0010705:	76 41                	jbe    c0010748 <Phys::freePage(unsigned long)+0x57>
c0010707:	c1 e8 0c             	shr    eax,0xc
c001070a:	50                   	push   eax
c001070b:	89 c3                	mov    ebx,eax
c001070d:	e8 c3 ff ff ff       	call   c00106d5 <Phys::getPageState(unsigned long)>
c0010712:	5a                   	pop    edx
c0010713:	84 c0                	test   al,al
c0010715:	74 20                	je     c0010737 <Phys::freePage(unsigned long)+0x46>
c0010717:	a1 78 61 03 c0       	mov    eax,ds:0xc0036178
c001071c:	83 ec 08             	sub    esp,0x8
c001071f:	6a 00                	push   0x0
c0010721:	53                   	push   ebx
c0010722:	83 e8 01             	sub    eax,0x1
c0010725:	a3 78 61 03 c0       	mov    ds:0xc0036178,eax
c001072a:	e8 66 ff ff ff       	call   c0010695 <Phys::setPageState(unsigned long, bool)>
c001072f:	83 c4 10             	add    esp,0x10
c0010732:	83 c4 08             	add    esp,0x8
c0010735:	5b                   	pop    ebx
c0010736:	c3                   	ret    
c0010737:	c7 44 24 10 66 b5 02 c0 	mov    DWORD PTR [esp+0x10],0xc002b566
c001073f:	83 c4 08             	add    esp,0x8
c0010742:	5b                   	pop    ebx
c0010743:	e9 18 fe ff ff       	jmp    c0010560 <KePanic(char const*)>
c0010748:	68 00 10 00 00       	push   0x1000
c001074d:	50                   	push   eax
c001074e:	e8 07 ff ff ff       	call   c001065a <Phys::freeDMA(unsigned long, unsigned long)>
c0010753:	59                   	pop    ecx
c0010754:	5b                   	pop    ebx
c0010755:	83 c4 08             	add    esp,0x8
c0010758:	5b                   	pop    ebx
c0010759:	c3                   	ret    

c001075a <Phys::allocatePage()>:
c001075a:	56                   	push   esi
c001075b:	53                   	push   ebx
c001075c:	83 ec 14             	sub    esp,0x14
c001075f:	8b 35 6c 61 03 c0    	mov    esi,DWORD PTR ds:0xc003616c
c0010765:	89 f3                	mov    ebx,esi
c0010767:	eb 18                	jmp    c0010781 <Phys::allocatePage()+0x27>
c0010769:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c001076f:	75 0c                	jne    c001077d <Phys::allocatePage()+0x23>
c0010771:	c7 05 6c 61 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003616c,0x0
c001077b:	31 db                	xor    ebx,ebx
c001077d:	39 de                	cmp    esi,ebx
c001077f:	74 5b                	je     c00107dc <Phys::allocatePage()+0x82>
c0010781:	53                   	push   ebx
c0010782:	e8 4e ff ff ff       	call   c00106d5 <Phys::getPageState(unsigned long)>
c0010787:	59                   	pop    ecx
c0010788:	84 c0                	test   al,al
c001078a:	74 29                	je     c00107b5 <Phys::allocatePage()+0x5b>
c001078c:	83 c3 01             	add    ebx,0x1
c001078f:	89 1d 6c 61 03 c0    	mov    DWORD PTR ds:0xc003616c,ebx
c0010795:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c001079b:	76 cc                	jbe    c0010769 <Phys::allocatePage()+0xf>
c001079d:	83 ec 0c             	sub    esp,0xc
c00107a0:	68 7c b5 02 c0       	push   0xc002b57c
c00107a5:	e8 b6 fd ff ff       	call   c0010560 <KePanic(char const*)>
c00107aa:	8b 1d 6c 61 03 c0    	mov    ebx,DWORD PTR ds:0xc003616c
c00107b0:	83 c4 10             	add    esp,0x10
c00107b3:	eb b4                	jmp    c0010769 <Phys::allocatePage()+0xf>
c00107b5:	6a 01                	push   0x1
c00107b7:	53                   	push   ebx
c00107b8:	e8 d8 fe ff ff       	call   c0010695 <Phys::setPageState(unsigned long, bool)>
c00107bd:	8b 1d 78 61 03 c0    	mov    ebx,DWORD PTR ds:0xc0036178
c00107c3:	5e                   	pop    esi
c00107c4:	a1 6c 61 03 c0       	mov    eax,ds:0xc003616c
c00107c9:	5a                   	pop    edx
c00107ca:	83 c3 01             	add    ebx,0x1
c00107cd:	89 1d 78 61 03 c0    	mov    DWORD PTR ds:0xc0036178,ebx
c00107d3:	c1 e0 0c             	shl    eax,0xc
c00107d6:	83 c4 14             	add    esp,0x14
c00107d9:	5b                   	pop    ebx
c00107da:	5e                   	pop    esi
c00107db:	c3                   	ret    
c00107dc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00107e1:	83 ec 0c             	sub    esp,0xc
c00107e4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00107e7:	8b 88 b2 05 00 00    	mov    ecx,DWORD PTR [eax+0x5b2]
c00107ed:	51                   	push   ecx
c00107ee:	e8 85 43 00 00       	call   c0014b78 <VAS::scanForEviction()>
c00107f3:	83 c4 10             	add    esp,0x10
c00107f6:	85 c0                	test   eax,eax
c00107f8:	75 1b                	jne    c0010815 <Phys::allocatePage()+0xbb>
c00107fa:	83 ec 0c             	sub    esp,0xc
c00107fd:	68 c4 b5 02 c0       	push   0xc002b5c4
c0010802:	e8 59 fd ff ff       	call   c0010560 <KePanic(char const*)>
c0010807:	8b 1d 6c 61 03 c0    	mov    ebx,DWORD PTR ds:0xc003616c
c001080d:	83 c4 10             	add    esp,0x10
c0010810:	e9 6c ff ff ff       	jmp    c0010781 <Phys::allocatePage()+0x27>
c0010815:	8b 15 78 61 03 c0    	mov    edx,DWORD PTR ds:0xc0036178
c001081b:	83 ec 08             	sub    esp,0x8
c001081e:	6a 01                	push   0x1
c0010820:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010824:	83 c2 01             	add    edx,0x1
c0010827:	89 15 78 61 03 c0    	mov    DWORD PTR ds:0xc0036178,edx
c001082d:	89 c2                	mov    edx,eax
c001082f:	c1 ea 0c             	shr    edx,0xc
c0010832:	52                   	push   edx
c0010833:	e8 5d fe ff ff       	call   c0010695 <Phys::setPageState(unsigned long, bool)>
c0010838:	83 c4 10             	add    esp,0x10
c001083b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001083f:	eb 95                	jmp    c00107d6 <Phys::allocatePage()+0x7c>

c0010841 <Phys::allocateContiguousPages(int)>:
c0010841:	57                   	push   edi
c0010842:	56                   	push   esi
c0010843:	53                   	push   ebx
c0010844:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0010848:	fa                   	cli    
c0010849:	8b 15 30 63 03 c0    	mov    edx,DWORD PTR ds:0xc0036330
c001084f:	83 ec 0c             	sub    esp,0xc
c0010852:	31 db                	xor    ebx,ebx
c0010854:	68 f4 b5 02 c0       	push   0xc002b5f4
c0010859:	83 c2 01             	add    edx,0x1
c001085c:	89 15 30 63 03 c0    	mov    DWORD PTR ds:0xc0036330,edx
c0010862:	e8 ff 66 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0010867:	83 c4 10             	add    esp,0x10
c001086a:	85 db                	test   ebx,ebx
c001086c:	75 11                	jne    c001087f <Phys::allocateContiguousPages(int)+0x3e>
c001086e:	e8 e7 fe ff ff       	call   c001075a <Phys::allocatePage()>
c0010873:	83 ff 01             	cmp    edi,0x1
c0010876:	89 c6                	mov    esi,eax
c0010878:	74 21                	je     c001089b <Phys::allocateContiguousPages(int)+0x5a>
c001087a:	bb 01 00 00 00       	mov    ebx,0x1
c001087f:	e8 d6 fe ff ff       	call   c001075a <Phys::allocatePage()>
c0010884:	89 da                	mov    edx,ebx
c0010886:	c1 e2 0c             	shl    edx,0xc
c0010889:	01 f2                	add    edx,esi
c001088b:	39 c2                	cmp    edx,eax
c001088d:	74 24                	je     c00108b3 <Phys::allocateContiguousPages(int)+0x72>
c001088f:	83 ff 01             	cmp    edi,0x1
c0010892:	bb 01 00 00 00       	mov    ebx,0x1
c0010897:	89 c6                	mov    esi,eax
c0010899:	75 e4                	jne    c001087f <Phys::allocateContiguousPages(int)+0x3e>
c001089b:	f0 83 2d 30 63 03 c0 01 	lock sub DWORD PTR ds:0xc0036330,0x1
c00108a3:	a1 30 63 03 c0       	mov    eax,ds:0xc0036330
c00108a8:	85 c0                	test   eax,eax
c00108aa:	75 01                	jne    c00108ad <Phys::allocateContiguousPages(int)+0x6c>
c00108ac:	fb                   	sti    
c00108ad:	5b                   	pop    ebx
c00108ae:	89 f0                	mov    eax,esi
c00108b0:	5e                   	pop    esi
c00108b1:	5f                   	pop    edi
c00108b2:	c3                   	ret    
c00108b3:	83 c3 01             	add    ebx,0x1
c00108b6:	39 fb                	cmp    ebx,edi
c00108b8:	75 b0                	jne    c001086a <Phys::allocateContiguousPages(int)+0x29>
c00108ba:	eb df                	jmp    c001089b <Phys::allocateContiguousPages(int)+0x5a>

c00108bc <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c00108bc:	56                   	push   esi
c00108bd:	53                   	push   ebx
c00108be:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00108c2:	39 1d 70 61 03 c0    	cmp    DWORD PTR ds:0xc0036170,ebx
c00108c8:	73 06                	jae    c00108d0 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c00108ca:	89 1d 70 61 03 c0    	mov    DWORD PTR ds:0xc0036170,ebx
c00108d0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00108d4:	c1 eb 0c             	shr    ebx,0xc
c00108d7:	c1 e8 0c             	shr    eax,0xc
c00108da:	39 d8                	cmp    eax,ebx
c00108dc:	73 13                	jae    c00108f1 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c00108de:	6a 00                	push   0x0
c00108e0:	50                   	push   eax
c00108e1:	8d 70 01             	lea    esi,[eax+0x1]
c00108e4:	e8 ac fd ff ff       	call   c0010695 <Phys::setPageState(unsigned long, bool)>
c00108e9:	39 f3                	cmp    ebx,esi
c00108eb:	89 f0                	mov    eax,esi
c00108ed:	5a                   	pop    edx
c00108ee:	59                   	pop    ecx
c00108ef:	75 ed                	jne    c00108de <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c00108f1:	5b                   	pop    ebx
c00108f2:	5e                   	pop    esi
c00108f3:	c3                   	ret    

c00108f4 <Phys::physicalMemorySetup(unsigned int)>:
c00108f4:	55                   	push   ebp
c00108f5:	57                   	push   edi
c00108f6:	56                   	push   esi
c00108f7:	53                   	push   ebx
c00108f8:	83 ec 40             	sub    esp,0x40
c00108fb:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c00108ff:	6a 10                	push   0x10
c0010901:	6a 00                	push   0x0
c0010903:	68 80 61 03 c0       	push   0xc0036180
c0010908:	e8 e3 fb fe ff       	call   c00004f0 <memset>
c001090d:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0010913:	8d 83 00 10 00 00    	lea    eax,[ebx+0x1000]
c0010919:	31 db                	xor    ebx,ebx
c001091b:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001091f:	5a                   	pop    edx
c0010920:	59                   	pop    ecx
c0010921:	50                   	push   eax
c0010922:	68 81 b5 02 c0       	push   0xc002b581
c0010927:	e8 3a 66 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001092c:	83 c4 10             	add    esp,0x10
c001092f:	83 ec 08             	sub    esp,0x8
c0010932:	6a 01                	push   0x1
c0010934:	53                   	push   ebx
c0010935:	83 c3 01             	add    ebx,0x1
c0010938:	e8 58 fd ff ff       	call   c0010695 <Phys::setPageState(unsigned long, bool)>
c001093d:	83 c4 10             	add    esp,0x10
c0010940:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0010946:	75 e7                	jne    c001092f <Phys::physicalMemorySetup(unsigned int)+0x3b>
c0010948:	0f b6 05 14 05 00 c2 	movzx  eax,BYTE PTR ds:0xc2000514
c001094f:	0f b6 15 13 05 00 c2 	movzx  edx,BYTE PTR ds:0xc2000513
c0010956:	c1 e0 08             	shl    eax,0x8
c0010959:	09 c2                	or     edx,eax
c001095b:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001095f:	0f 84 ab 01 00 00    	je     c0010b10 <Phys::physicalMemorySetup(unsigned int)+0x21c>
c0010965:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001096d:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0010972:	e9 82 00 00 00       	jmp    c00109f9 <Phys::physicalMemorySetup(unsigned int)+0x105>
c0010977:	ba 00 00 08 00       	mov    edx,0x80000
c001097c:	89 c1                	mov    ecx,eax
c001097e:	39 f2                	cmp    edx,esi
c0010980:	19 f9                	sbb    ecx,edi
c0010982:	0f 82 c4 00 00 00    	jb     c0010a4c <Phys::physicalMemorySetup(unsigned int)+0x158>
c0010988:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001098c:	89 c5                	mov    ebp,eax
c001098e:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0010992:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010996:	19 cd                	sbb    ebp,ecx
c0010998:	0f 83 b3 00 00 00    	jae    c0010a51 <Phys::physicalMemorySetup(unsigned int)+0x15d>
c001099e:	89 d6                	mov    esi,edx
c00109a0:	ba 00 00 0a 00       	mov    edx,0xa0000
c00109a5:	39 f2                	cmp    edx,esi
c00109a7:	89 cf                	mov    edi,ecx
c00109a9:	19 c8                	sbb    eax,ecx
c00109ab:	73 07                	jae    c00109b4 <Phys::physicalMemorySetup(unsigned int)+0xc0>
c00109ad:	be 00 00 0a 00       	mov    esi,0xa0000
c00109b2:	31 ff                	xor    edi,edi
c00109b4:	89 f2                	mov    edx,esi
c00109b6:	b8 ff 1f 00 00       	mov    eax,0x1fff
c00109bb:	81 c2 00 00 f8 ff    	add    edx,0xfff80000
c00109c1:	89 f9                	mov    ecx,edi
c00109c3:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00109c7:	83 d1 ff             	adc    ecx,0xffffffff
c00109ca:	39 d0                	cmp    eax,edx
c00109cc:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c00109d0:	b8 00 00 00 00       	mov    eax,0x0
c00109d5:	19 c8                	sbb    eax,ecx
c00109d7:	0f 82 c8 00 00 00    	jb     c0010aa5 <Phys::physicalMemorySetup(unsigned int)+0x1b1>
c00109dd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00109e1:	83 c3 18             	add    ebx,0x18
c00109e4:	83 c0 01             	add    eax,0x1
c00109e7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00109eb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00109ef:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c00109f3:	0f 84 0f 01 00 00    	je     c0010b08 <Phys::physicalMemorySetup(unsigned int)+0x214>
c00109f9:	8b 33                	mov    esi,DWORD PTR [ebx]
c00109fb:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00109fe:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0010a01:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0010a04:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0010a08:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0010a0b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010a0f:	01 f0                	add    eax,esi
c0010a11:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0010a15:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0010a19:	55                   	push   ebp
c0010a1a:	11 fa                	adc    edx,edi
c0010a1c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010a20:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0010a24:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010a28:	50                   	push   eax
c0010a29:	56                   	push   esi
c0010a2a:	68 54 b6 02 c0       	push   0xc002b654
c0010a2f:	e8 32 65 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0010a34:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010a38:	83 c4 10             	add    esp,0x10
c0010a3b:	09 f8                	or     eax,edi
c0010a3d:	0f 85 c5 00 00 00    	jne    c0010b08 <Phys::physicalMemorySetup(unsigned int)+0x214>
c0010a43:	83 fd 01             	cmp    ebp,0x1
c0010a46:	0f 84 2b ff ff ff    	je     c0010977 <Phys::physicalMemorySetup(unsigned int)+0x83>
c0010a4c:	83 fd 01             	cmp    ebp,0x1
c0010a4f:	75 8c                	jne    c00109dd <Phys::physicalMemorySetup(unsigned int)+0xe9>
c0010a51:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0010a55:	31 d2                	xor    edx,edx
c0010a57:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c0010a5b:	89 c8                	mov    eax,ecx
c0010a5d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010a61:	19 d1                	sbb    ecx,edx
c0010a63:	0f 82 74 ff ff ff    	jb     c00109dd <Phys::physicalMemorySetup(unsigned int)+0xe9>
c0010a69:	b9 ff 1f 00 00       	mov    ecx,0x1fff
c0010a6e:	3b 4c 24 18          	cmp    ecx,DWORD PTR [esp+0x18]
c0010a72:	b9 00 00 00 00       	mov    ecx,0x0
c0010a77:	1b 4c 24 1c          	sbb    ecx,DWORD PTR [esp+0x1c]
c0010a7b:	0f 83 5c ff ff ff    	jae    c00109dd <Phys::physicalMemorySetup(unsigned int)+0xe9>
c0010a81:	39 c6                	cmp    esi,eax
c0010a83:	19 d7                	sbb    edi,edx
c0010a85:	73 2a                	jae    c0010ab1 <Phys::physicalMemorySetup(unsigned int)+0x1bd>
c0010a87:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0010a8b:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0010a8f:	29 c7                	sub    edi,eax
c0010a91:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010a95:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0010a99:	19 d5                	sbb    ebp,edx
c0010a9b:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c0010a9f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0010aa3:	eb 0c                	jmp    c0010ab1 <Phys::physicalMemorySetup(unsigned int)+0x1bd>
c0010aa5:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c0010aa9:	c7 44 24 20 00 00 08 00 	mov    DWORD PTR [esp+0x20],0x80000
c0010ab1:	83 ec 04             	sub    esp,0x4
c0010ab4:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0010ab8:	56                   	push   esi
c0010ab9:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0010abd:	57                   	push   edi
c0010abe:	68 78 b6 02 c0       	push   0xc002b678
c0010ac3:	e8 9e 64 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0010ac8:	5a                   	pop    edx
c0010ac9:	59                   	pop    ecx
c0010aca:	56                   	push   esi
c0010acb:	57                   	push   edi
c0010acc:	e8 eb fd ff ff       	call   c00108bc <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c0010ad1:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0010ad5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010ad9:	83 c4 0c             	add    esp,0xc
c0010adc:	8b 3d 7c 61 03 c0    	mov    edi,DWORD PTR ds:0xc003617c
c0010ae2:	0f ac d0 0c          	shrd   eax,edx,0xc
c0010ae6:	01 f8                	add    eax,edi
c0010ae8:	a3 7c 61 03 c0       	mov    ds:0xc003617c,eax
c0010aed:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0010af4:	52                   	push   edx
c0010af5:	50                   	push   eax
c0010af6:	68 a7 b5 02 c0       	push   0xc002b5a7
c0010afb:	e8 66 64 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0010b00:	83 c4 10             	add    esp,0x10
c0010b03:	e9 d5 fe ff ff       	jmp    c00109dd <Phys::physicalMemorySetup(unsigned int)+0xe9>
c0010b08:	83 c4 3c             	add    esp,0x3c
c0010b0b:	5b                   	pop    ebx
c0010b0c:	5e                   	pop    esi
c0010b0d:	5f                   	pop    edi
c0010b0e:	5d                   	pop    ebp
c0010b0f:	c3                   	ret    
c0010b10:	c7 44 24 50 99 b5 02 c0 	mov    DWORD PTR [esp+0x50],0xc002b599
c0010b18:	83 c4 3c             	add    esp,0x3c
c0010b1b:	5b                   	pop    ebx
c0010b1c:	5e                   	pop    esi
c0010b1d:	5f                   	pop    edi
c0010b1e:	5d                   	pop    ebp
c0010b1f:	e9 3c fa ff ff       	jmp    c0010560 <KePanic(char const*)>

c0010b24 <Pipe::isAtty()>:
c0010b24:	31 c0                	xor    eax,eax
c0010b26:	c3                   	ret    
c0010b27:	90                   	nop

c0010b28 <Pipe::~Pipe()>:
c0010b28:	83 ec 0c             	sub    esp,0xc
c0010b2b:	ba e4 b6 02 c0       	mov    edx,0xc002b6e4
c0010b30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b34:	89 10                	mov    DWORD PTR [eax],edx
c0010b36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b3a:	83 ec 0c             	sub    esp,0xc
c0010b3d:	50                   	push   eax
c0010b3e:	e8 f7 2c 00 00       	call   c001383a <UnixFile::~UnixFile()>
c0010b43:	83 c4 10             	add    esp,0x10
c0010b46:	90                   	nop
c0010b47:	83 c4 0c             	add    esp,0xc
c0010b4a:	c3                   	ret    
c0010b4b:	90                   	nop

c0010b4c <Pipe::~Pipe()>:
c0010b4c:	83 ec 0c             	sub    esp,0xc
c0010b4f:	83 ec 0c             	sub    esp,0xc
c0010b52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b56:	e8 cd ff ff ff       	call   c0010b28 <Pipe::~Pipe()>
c0010b5b:	83 c4 10             	add    esp,0x10
c0010b5e:	83 ec 08             	sub    esp,0x8
c0010b61:	6a 20                	push   0x20
c0010b63:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b67:	e8 a0 d1 ff ff       	call   c000dd0c <operator delete(void*, unsigned long)>
c0010b6c:	83 c4 10             	add    esp,0x10
c0010b6f:	83 c4 0c             	add    esp,0xc
c0010b72:	c3                   	ret    
c0010b73:	90                   	nop

c0010b74 <Pipe::write(unsigned long long, void*, int*)>:
c0010b74:	55                   	push   ebp
c0010b75:	57                   	push   edi
c0010b76:	56                   	push   esi
c0010b77:	53                   	push   ebx
c0010b78:	83 ec 1c             	sub    esp,0x1c
c0010b7b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0010b7f:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0010b83:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0010b87:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0010b8a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010b8e:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0010b91:	89 04 24             	mov    DWORD PTR [esp],eax
c0010b94:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0010b98:	89 d8                	mov    eax,ebx
c0010b9a:	89 d6                	mov    esi,edx
c0010b9c:	89 d7                	mov    edi,edx
c0010b9e:	c1 ff 1f             	sar    edi,0x1f
c0010ba1:	03 34 24             	add    esi,DWORD PTR [esp]
c0010ba4:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0010ba8:	c1 f8 1f             	sar    eax,0x1f
c0010bab:	39 f3                	cmp    ebx,esi
c0010bad:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010bb1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010bb5:	19 f8                	sbb    eax,edi
c0010bb7:	b8 01 00 00 00       	mov    eax,0x1
c0010bbc:	72 72                	jb     c0010c30 <Pipe::write(unsigned long long, void*, int*)+0xbc>
c0010bbe:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0010bc1:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0010bc5:	01 d0                	add    eax,edx
c0010bc7:	99                   	cdq    
c0010bc8:	f7 fb                	idiv   ebx
c0010bca:	89 d8                	mov    eax,ebx
c0010bcc:	29 d0                	sub    eax,edx
c0010bce:	89 d6                	mov    esi,edx
c0010bd0:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0010bd3:	89 c3                	mov    ebx,eax
c0010bd5:	c1 fb 1f             	sar    ebx,0x1f
c0010bd8:	39 c2                	cmp    edx,eax
c0010bda:	19 df                	sbb    edi,ebx
c0010bdc:	bb 00 00 00 00       	mov    ebx,0x0
c0010be1:	72 04                	jb     c0010be7 <Pipe::write(unsigned long long, void*, int*)+0x73>
c0010be3:	89 d3                	mov    ebx,edx
c0010be5:	29 c3                	sub    ebx,eax
c0010be7:	89 d0                	mov    eax,edx
c0010be9:	29 d8                	sub    eax,ebx
c0010beb:	74 0d                	je     c0010bfa <Pipe::write(unsigned long long, void*, int*)+0x86>
c0010bed:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0010bf0:	89 c1                	mov    ecx,eax
c0010bf2:	01 f7                	add    edi,esi
c0010bf4:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0010bf8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010bfa:	85 db                	test   ebx,ebx
c0010bfc:	74 0d                	je     c0010c0b <Pipe::write(unsigned long long, void*, int*)+0x97>
c0010bfe:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0010c02:	89 d9                	mov    ecx,ebx
c0010c04:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0010c07:	89 c6                	mov    esi,eax
c0010c09:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010c0b:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c0010c0e:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0010c13:	75 10                	jne    c0010c25 <Pipe::write(unsigned long long, void*, int*)+0xb1>
c0010c15:	83 ec 0c             	sub    esp,0xc
c0010c18:	68 a1 b6 02 c0       	push   0xc002b6a1
c0010c1d:	e8 3e f9 ff ff       	call   c0010560 <KePanic(char const*)>
c0010c22:	83 c4 10             	add    esp,0x10
c0010c25:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010c29:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0010c2c:	89 08                	mov    DWORD PTR [eax],ecx
c0010c2e:	31 c0                	xor    eax,eax
c0010c30:	83 c4 1c             	add    esp,0x1c
c0010c33:	5b                   	pop    ebx
c0010c34:	5e                   	pop    esi
c0010c35:	5f                   	pop    edi
c0010c36:	5d                   	pop    ebp
c0010c37:	c3                   	ret    

c0010c38 <Pipe::read(unsigned long long, void*, int*)>:
c0010c38:	55                   	push   ebp
c0010c39:	57                   	push   edi
c0010c3a:	56                   	push   esi
c0010c3b:	53                   	push   ebx
c0010c3c:	83 ec 1c             	sub    esp,0x1c
c0010c3f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0010c43:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0010c47:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0010c4b:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0010c4e:	89 c8                	mov    eax,ecx
c0010c50:	99                   	cdq    
c0010c51:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0010c55:	74 27                	je     c0010c7e <Pipe::read(unsigned long long, void*, int*)+0x46>
c0010c57:	39 f9                	cmp    ecx,edi
c0010c59:	89 d1                	mov    ecx,edx
c0010c5b:	19 f1                	sbb    ecx,esi
c0010c5d:	73 1f                	jae    c0010c7e <Pipe::read(unsigned long long, void*, int*)+0x46>
c0010c5f:	fa                   	cli    
c0010c60:	ff 05 30 63 03 c0    	inc    DWORD PTR ds:0xc0036330
c0010c66:	e8 7d 64 00 00       	call   c00170e8 <schedule()>
c0010c6b:	f0 ff 0d 30 63 03 c0 	lock dec DWORD PTR ds:0xc0036330
c0010c72:	83 3d 30 63 03 c0 00 	cmp    DWORD PTR ds:0xc0036330,0x0
c0010c79:	75 d0                	jne    c0010c4b <Pipe::read(unsigned long long, void*, int*)+0x13>
c0010c7b:	fb                   	sti    
c0010c7c:	eb cd                	jmp    c0010c4b <Pipe::read(unsigned long long, void*, int*)+0x13>
c0010c7e:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0010c82:	39 f8                	cmp    eax,edi
c0010c84:	89 d1                	mov    ecx,edx
c0010c86:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0010c8a:	19 f1                	sbb    ecx,esi
c0010c8c:	73 08                	jae    c0010c96 <Pipe::read(unsigned long long, void*, int*)+0x5e>
c0010c8e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010c92:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0010c96:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c0010c99:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c0010c9c:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0010ca0:	29 f7                	sub    edi,esi
c0010ca2:	89 f8                	mov    eax,edi
c0010ca4:	99                   	cdq    
c0010ca5:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0010ca9:	89 d0                	mov    eax,edx
c0010cab:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010caf:	19 c2                	sbb    edx,eax
c0010cb1:	89 f8                	mov    eax,edi
c0010cb3:	0f 42 44 24 08       	cmovb  eax,DWORD PTR [esp+0x8]
c0010cb8:	89 ea                	mov    edx,ebp
c0010cba:	29 c2                	sub    edx,eax
c0010cbc:	85 c0                	test   eax,eax
c0010cbe:	74 0b                	je     c0010ccb <Pipe::read(unsigned long long, void*, int*)+0x93>
c0010cc0:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010cc3:	89 c1                	mov    ecx,eax
c0010cc5:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0010cc9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010ccb:	85 d2                	test   edx,edx
c0010ccd:	74 0d                	je     c0010cdc <Pipe::read(unsigned long long, void*, int*)+0xa4>
c0010ccf:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0010cd3:	89 d1                	mov    ecx,edx
c0010cd5:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0010cd8:	89 c7                	mov    edi,eax
c0010cda:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010cdc:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0010cdf:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c0010ce2:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c0010ce5:	99                   	cdq    
c0010ce6:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0010cea:	89 f7                	mov    edi,esi
c0010cec:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0010cf0:	c1 ff 1f             	sar    edi,0x1f
c0010cf3:	57                   	push   edi
c0010cf4:	56                   	push   esi
c0010cf5:	52                   	push   edx
c0010cf6:	50                   	push   eax
c0010cf7:	e8 d8 36 01 00       	call   c00243d4 <__umoddi3>
c0010cfc:	83 c4 10             	add    esp,0x10
c0010cff:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0010d04:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0010d07:	75 10                	jne    c0010d19 <Pipe::read(unsigned long long, void*, int*)+0xe1>
c0010d09:	83 ec 0c             	sub    esp,0xc
c0010d0c:	68 be b6 02 c0       	push   0xc002b6be
c0010d11:	e8 4a f8 ff ff       	call   c0010560 <KePanic(char const*)>
c0010d16:	83 c4 10             	add    esp,0x10
c0010d19:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010d1d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010d21:	89 10                	mov    DWORD PTR [eax],edx
c0010d23:	83 c4 1c             	add    esp,0x1c
c0010d26:	31 c0                	xor    eax,eax
c0010d28:	5b                   	pop    ebx
c0010d29:	5e                   	pop    esi
c0010d2a:	5f                   	pop    edi
c0010d2b:	5d                   	pop    ebp
c0010d2c:	c3                   	ret    
c0010d2d:	90                   	nop

c0010d2e <Pipe::Pipe(int)>:
c0010d2e:	83 ec 0c             	sub    esp,0xc
c0010d31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d35:	83 ec 08             	sub    esp,0x8
c0010d38:	6a 00                	push   0x0
c0010d3a:	50                   	push   eax
c0010d3b:	e8 14 29 00 00       	call   c0013654 <UnixFile::UnixFile(int)>
c0010d40:	83 c4 10             	add    esp,0x10
c0010d43:	ba e4 b6 02 c0       	mov    edx,0xc002b6e4
c0010d48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d4c:	89 10                	mov    DWORD PTR [eax],edx
c0010d4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d52:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010d56:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0010d59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d5d:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c0010d64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d68:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0010d6f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010d73:	83 ec 0c             	sub    esp,0xc
c0010d76:	50                   	push   eax
c0010d77:	e8 90 f3 ff ff       	call   c001010c <malloc>
c0010d7c:	83 c4 10             	add    esp,0x10
c0010d7f:	89 c2                	mov    edx,eax
c0010d81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d85:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010d88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d8c:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c0010d90:	90                   	nop
c0010d91:	83 c4 0c             	add    esp,0xc
c0010d94:	c3                   	ret    

c0010d95 <KePowerThread(void*)>:
c0010d95:	83 ec 0c             	sub    esp,0xc
c0010d98:	f0 ff 0d 30 63 03 c0 	lock dec DWORD PTR ds:0xc0036330
c0010d9f:	83 3d 30 63 03 c0 00 	cmp    DWORD PTR ds:0xc0036330,0x0
c0010da6:	75 01                	jne    c0010da9 <KePowerThread(void*)+0x14>
c0010da8:	fb                   	sti    
c0010da9:	50                   	push   eax
c0010daa:	50                   	push   eax
c0010dab:	6a 00                	push   0x0
c0010dad:	6a 0a                	push   0xa
c0010daf:	c6 05 ac 61 03 c0 00 	mov    BYTE PTR ds:0xc00361ac,0x0
c0010db6:	e8 39 65 00 00       	call   c00172f4 <sleep(unsigned long long)>
c0010dbb:	83 c4 10             	add    esp,0x10
c0010dbe:	83 05 e4 61 03 c0 0a 	add    DWORD PTR ds:0xc00361e4,0xa
c0010dc5:	eb e2                	jmp    c0010da9 <KePowerThread(void*)+0x14>

c0010dc7 <KeChangePowerSettings(PowerSettings)>:
c0010dc7:	57                   	push   edi
c0010dc8:	b9 09 00 00 00       	mov    ecx,0x9
c0010dcd:	56                   	push   esi
c0010dce:	bf c0 61 03 c0       	mov    edi,0xc00361c0
c0010dd3:	fc                   	cld    
c0010dd4:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0010dd8:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010dda:	5e                   	pop    esi
c0010ddb:	5f                   	pop    edi
c0010ddc:	c3                   	ret    

c0010ddd <KeUserIOReceived()>:
c0010ddd:	c7 05 e4 61 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00361e4,0x0
c0010de7:	c3                   	ret    

c0010de8 <KeSetupPowerManager()>:
c0010de8:	83 ec 0c             	sub    esp,0xc
c0010deb:	68 f0 00 00 00       	push   0xf0
c0010df0:	6a 00                	push   0x0
c0010df2:	68 95 0d 01 c0       	push   0xc0010d95
c0010df7:	ff 35 58 63 03 c0    	push   DWORD PTR ds:0xc0036358
c0010dfd:	c7 05 e4 61 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00361e4,0x0
c0010e07:	c6 05 ac 61 03 c0 00 	mov    BYTE PTR ds:0xc00361ac,0x0
c0010e0e:	e8 21 60 00 00       	call   c0016e34 <Process::createThread(void (*)(void*), void*, int)>
c0010e13:	c7 05 c0 61 03 c0 02 00 00 00 	mov    DWORD PTR ds:0xc00361c0,0x2
c0010e1d:	c7 05 c4 61 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00361c4,0x1
c0010e27:	c7 05 c8 61 03 c0 03 00 00 00 	mov    DWORD PTR ds:0xc00361c8,0x3
c0010e31:	c7 05 cc 61 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00361cc,0x0
c0010e3b:	c7 05 d8 61 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00361d8,0x0
c0010e45:	c7 05 d0 61 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00361d0,0x0
c0010e4f:	c7 05 dc 61 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00361dc,0x0
c0010e59:	c7 05 d4 61 03 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc00361d4,0x3c
c0010e63:	c7 05 e0 61 03 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc00361e0,0x3c
c0010e6d:	83 c4 1c             	add    esp,0x1c
c0010e70:	c3                   	ret    

c0010e71 <KePrepareShutdown()>:
c0010e71:	83 ec 0c             	sub    esp,0xc
c0010e74:	e8 5f cd ff ff       	call   c000dbd8 <KeExecuteAtexit()>
c0010e79:	a1 08 61 03 c0       	mov    eax,ds:0xc0036108
c0010e7e:	83 ec 0c             	sub    esp,0xc
c0010e81:	ff b0 64 01 00 00    	push   DWORD PTR [eax+0x164]
c0010e87:	e8 fa 97 ff ff       	call   c000a686 <Device::closeAll()>
c0010e8c:	83 c4 1c             	add    esp,0x1c
c0010e8f:	c3                   	ret    

c0010e90 <KeRegisterShutdownHandler(void (*)())>:
c0010e90:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010e94:	a3 a8 61 03 c0       	mov    ds:0xc00361a8,eax
c0010e99:	c3                   	ret    

c0010e9a <KeRegisterRestartHandler(void (*)())>:
c0010e9a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010e9e:	a3 a4 61 03 c0       	mov    ds:0xc00361a4,eax
c0010ea3:	c3                   	ret    

c0010ea4 <KeRegisterSleepHandler(void (*)())>:
c0010ea4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010ea8:	a3 a0 61 03 c0       	mov    ds:0xc00361a0,eax
c0010ead:	c3                   	ret    

c0010eae <KeShutdown()>:
c0010eae:	83 ec 0c             	sub    esp,0xc
c0010eb1:	e8 bb ff ff ff       	call   c0010e71 <KePrepareShutdown()>
c0010eb6:	a1 a8 61 03 c0       	mov    eax,ds:0xc00361a8
c0010ebb:	85 c0                	test   eax,eax
c0010ebd:	74 04                	je     c0010ec3 <KeShutdown()+0x15>
c0010ebf:	ff d0                	call   eax
c0010ec1:	eb 10                	jmp    c0010ed3 <KeShutdown()+0x25>
c0010ec3:	83 ec 0c             	sub    esp,0xc
c0010ec6:	68 f8 b6 02 c0       	push   0xc002b6f8
c0010ecb:	e8 90 f6 ff ff       	call   c0010560 <KePanic(char const*)>
c0010ed0:	83 c4 10             	add    esp,0x10
c0010ed3:	83 ec 0c             	sub    esp,0xc
c0010ed6:	68 19 b7 02 c0       	push   0xc002b719
c0010edb:	e8 80 f6 ff ff       	call   c0010560 <KePanic(char const*)>
c0010ee0:	83 c4 1c             	add    esp,0x1c
c0010ee3:	c3                   	ret    

c0010ee4 <KeSleep()>:
c0010ee4:	a1 a0 61 03 c0       	mov    eax,ds:0xc00361a0
c0010ee9:	85 c0                	test   eax,eax
c0010eeb:	74 02                	je     c0010eef <KeSleep()+0xb>
c0010eed:	ff e0                	jmp    eax
c0010eef:	c3                   	ret    

c0010ef0 <KeHandlePowerButton()>:
c0010ef0:	a1 c0 61 03 c0       	mov    eax,ds:0xc00361c0
c0010ef5:	83 f8 02             	cmp    eax,0x2
c0010ef8:	75 02                	jne    c0010efc <KeHandlePowerButton()+0xc>
c0010efa:	eb b2                	jmp    c0010eae <KeShutdown()>
c0010efc:	48                   	dec    eax
c0010efd:	75 02                	jne    c0010f01 <KeHandlePowerButton()+0x11>
c0010eff:	eb e3                	jmp    c0010ee4 <KeSleep()>
c0010f01:	c3                   	ret    

c0010f02 <KeHandleSleepButton()>:
c0010f02:	a1 c4 61 03 c0       	mov    eax,ds:0xc00361c4
c0010f07:	83 f8 02             	cmp    eax,0x2
c0010f0a:	75 02                	jne    c0010f0e <KeHandleSleepButton()+0xc>
c0010f0c:	eb a0                	jmp    c0010eae <KeShutdown()>
c0010f0e:	48                   	dec    eax
c0010f0f:	75 02                	jne    c0010f13 <KeHandleSleepButton()+0x11>
c0010f11:	eb d1                	jmp    c0010ee4 <KeSleep()>
c0010f13:	c3                   	ret    

c0010f14 <KeRestart()>:
c0010f14:	83 ec 0c             	sub    esp,0xc
c0010f17:	e8 55 ff ff ff       	call   c0010e71 <KePrepareShutdown()>
c0010f1c:	a1 a4 61 03 c0       	mov    eax,ds:0xc00361a4
c0010f21:	85 c0                	test   eax,eax
c0010f23:	74 02                	je     c0010f27 <KeRestart()+0x13>
c0010f25:	ff d0                	call   eax
c0010f27:	83 ec 0c             	sub    esp,0xc
c0010f2a:	68 3d b7 02 c0       	push   0xc002b73d
c0010f2f:	e8 2c f6 ff ff       	call   c0010560 <KePanic(char const*)>
c0010f34:	83 c4 1c             	add    esp,0x1c
c0010f37:	c3                   	ret    

c0010f38 <KeRand()>:
c0010f38:	69 05 e8 61 03 c0 75 28 00 00 	imul   eax,DWORD PTR ds:0xc00361e8,0x2875
c0010f42:	69 0d ec 61 03 c0 75 b1 e7 a2 	imul   ecx,DWORD PTR ds:0xc00361ec,0xa2e7b175
c0010f4c:	53                   	push   ebx
c0010f4d:	01 c1                	add    ecx,eax
c0010f4f:	b8 75 b1 e7 a2       	mov    eax,0xa2e7b175
c0010f54:	f7 25 e8 61 03 c0    	mul    DWORD PTR ds:0xc00361e8
c0010f5a:	01 ca                	add    edx,ecx
c0010f5c:	05 ef 04 b5 00       	add    eax,0xb504ef
c0010f61:	a3 e8 61 03 c0       	mov    ds:0xc00361e8,eax
c0010f66:	83 d2 00             	adc    edx,0x0
c0010f69:	0f b7 da             	movzx  ebx,dx
c0010f6c:	89 1d ec 61 03 c0    	mov    DWORD PTR ds:0xc00361ec,ebx
c0010f72:	0f ac d8 0e          	shrd   eax,ebx,0xe
c0010f76:	5b                   	pop    ebx
c0010f77:	c3                   	ret    

c0010f78 <KeSeedRand(unsigned int)>:
c0010f78:	53                   	push   ebx
c0010f79:	83 ec 08             	sub    esp,0x8
c0010f7c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010f80:	e8 86 a4 00 00       	call   c001b40b <HalGetRand()>
c0010f85:	c7 05 ec 61 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00361ec,0x0
c0010f8f:	31 d8                	xor    eax,ebx
c0010f91:	a3 e8 61 03 c0       	mov    ds:0xc00361e8,eax
c0010f96:	e8 9d ff ff ff       	call   c0010f38 <KeRand()>
c0010f9b:	83 c4 08             	add    esp,0x8
c0010f9e:	5b                   	pop    ebx
c0010f9f:	eb 97                	jmp    c0010f38 <KeRand()>

c0010fa1 <KeInitRand()>:
c0010fa1:	83 ec 0c             	sub    esp,0xc
c0010fa4:	e8 30 a2 00 00       	call   c001b1d9 <HalQueryPerformanceCounter()>
c0010fa9:	0f 20 da             	mov    edx,cr3
c0010fac:	0f 22 da             	mov    cr3,edx
c0010faf:	0f 20 da             	mov    edx,cr3
c0010fb2:	0f 22 da             	mov    cr3,edx
c0010fb5:	0f 20 da             	mov    edx,cr3
c0010fb8:	0f 22 da             	mov    cr3,edx
c0010fbb:	0f 20 da             	mov    edx,cr3
c0010fbe:	0f 22 da             	mov    cr3,edx
c0010fc1:	83 ec 0c             	sub    esp,0xc
c0010fc4:	35 03 8a 95 38       	xor    eax,0x38958a03
c0010fc9:	50                   	push   eax
c0010fca:	e8 a9 ff ff ff       	call   c0010f78 <KeSeedRand(unsigned int)>
c0010fcf:	83 c4 1c             	add    esp,0x1c
c0010fd2:	c3                   	ret    
c0010fd3:	90                   	nop

c0010fd4 <KeResolveCompatibilitySymbol(char*)>:
c0010fd4:	83 ec 0c             	sub    esp,0xc
c0010fd7:	83 ec 08             	sub    esp,0x8
c0010fda:	68 4c b7 02 c0       	push   0xc002b74c
c0010fdf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010fe3:	e8 98 f7 fe ff       	call   c0000780 <strcmp>
c0010fe8:	83 c4 10             	add    esp,0x10
c0010feb:	85 c0                	test   eax,eax
c0010fed:	0f 94 c0             	sete   al
c0010ff0:	0f b6 c0             	movzx  eax,al
c0010ff3:	85 c0                	test   eax,eax
c0010ff5:	74 0d                	je     c0011004 <KeResolveCompatibilitySymbol(char*)+0x30>
c0010ff7:	b8 08 61 03 c0       	mov    eax,0xc0036108
c0010ffc:	e9 3b 02 00 00       	jmp    c001123c <KeResolveCompatibilitySymbol(char*)+0x268>
c0011001:	8d 76 00             	lea    esi,[esi+0x0]
c0011004:	83 ec 08             	sub    esp,0x8
c0011007:	68 55 b7 02 c0       	push   0xc002b755
c001100c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011010:	e8 6b f7 fe ff       	call   c0000780 <strcmp>
c0011015:	83 c4 10             	add    esp,0x10
c0011018:	85 c0                	test   eax,eax
c001101a:	0f 94 c0             	sete   al
c001101d:	0f b6 c0             	movzx  eax,al
c0011020:	85 c0                	test   eax,eax
c0011022:	74 0c                	je     c0011030 <KeResolveCompatibilitySymbol(char*)+0x5c>
c0011024:	b8 d4 42 02 c0       	mov    eax,0xc00242d4
c0011029:	e9 0e 02 00 00       	jmp    c001123c <KeResolveCompatibilitySymbol(char*)+0x268>
c001102e:	66 90                	xchg   ax,ax
c0011030:	83 ec 08             	sub    esp,0x8
c0011033:	68 5f b7 02 c0       	push   0xc002b75f
c0011038:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001103c:	e8 3f f7 fe ff       	call   c0000780 <strcmp>
c0011041:	83 c4 10             	add    esp,0x10
c0011044:	85 c0                	test   eax,eax
c0011046:	0f 94 c0             	sete   al
c0011049:	0f b6 c0             	movzx  eax,al
c001104c:	85 c0                	test   eax,eax
c001104e:	74 0c                	je     c001105c <KeResolveCompatibilitySymbol(char*)+0x88>
c0011050:	b8 08 61 03 c0       	mov    eax,0xc0036108
c0011055:	e9 e2 01 00 00       	jmp    c001123c <KeResolveCompatibilitySymbol(char*)+0x268>
c001105a:	66 90                	xchg   ax,ax
c001105c:	83 ec 08             	sub    esp,0x8
c001105f:	68 72 b7 02 c0       	push   0xc002b772
c0011064:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011068:	e8 13 f7 fe ff       	call   c0000780 <strcmp>
c001106d:	83 c4 10             	add    esp,0x10
c0011070:	85 c0                	test   eax,eax
c0011072:	0f 94 c0             	sete   al
c0011075:	0f b6 c0             	movzx  eax,al
c0011078:	85 c0                	test   eax,eax
c001107a:	74 0c                	je     c0011088 <KeResolveCompatibilitySymbol(char*)+0xb4>
c001107c:	b8 08 40 02 c0       	mov    eax,0xc0024008
c0011081:	e9 b6 01 00 00       	jmp    c001123c <KeResolveCompatibilitySymbol(char*)+0x268>
c0011086:	66 90                	xchg   ax,ax
c0011088:	83 ec 08             	sub    esp,0x8
c001108b:	68 7b b7 02 c0       	push   0xc002b77b
c0011090:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011094:	e8 e7 f6 fe ff       	call   c0000780 <strcmp>
c0011099:	83 c4 10             	add    esp,0x10
c001109c:	85 c0                	test   eax,eax
c001109e:	0f 94 c0             	sete   al
c00110a1:	0f b6 c0             	movzx  eax,al
c00110a4:	85 c0                	test   eax,eax
c00110a6:	74 0c                	je     c00110b4 <KeResolveCompatibilitySymbol(char*)+0xe0>
c00110a8:	b8 60 05 01 c0       	mov    eax,0xc0010560
c00110ad:	e9 8a 01 00 00       	jmp    c001123c <KeResolveCompatibilitySymbol(char*)+0x268>
c00110b2:	66 90                	xchg   ax,ax
c00110b4:	83 ec 08             	sub    esp,0x8
c00110b7:	68 8e b7 02 c0       	push   0xc002b78e
c00110bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00110c0:	e8 bb f6 fe ff       	call   c0000780 <strcmp>
c00110c5:	83 c4 10             	add    esp,0x10
c00110c8:	85 c0                	test   eax,eax
c00110ca:	0f 94 c0             	sete   al
c00110cd:	0f b6 c0             	movzx  eax,al
c00110d0:	85 c0                	test   eax,eax
c00110d2:	74 0c                	je     c00110e0 <KeResolveCompatibilitySymbol(char*)+0x10c>
c00110d4:	b8 61 dc 00 c0       	mov    eax,0xc000dc61
c00110d9:	e9 5e 01 00 00       	jmp    c001123c <KeResolveCompatibilitySymbol(char*)+0x268>
c00110de:	66 90                	xchg   ax,ax
c00110e0:	83 ec 08             	sub    esp,0x8
c00110e3:	68 ab b7 02 c0       	push   0xc002b7ab
c00110e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00110ec:	e8 8f f6 fe ff       	call   c0000780 <strcmp>
c00110f1:	83 c4 10             	add    esp,0x10
c00110f4:	85 c0                	test   eax,eax
c00110f6:	0f 94 c0             	sete   al
c00110f9:	0f b6 c0             	movzx  eax,al
c00110fc:	85 c0                	test   eax,eax
c00110fe:	74 0c                	je     c001110c <KeResolveCompatibilitySymbol(char*)+0x138>
c0011100:	b8 d4 43 02 c0       	mov    eax,0xc00243d4
c0011105:	e9 32 01 00 00       	jmp    c001123c <KeResolveCompatibilitySymbol(char*)+0x268>
c001110a:	66 90                	xchg   ax,ax
c001110c:	83 ec 08             	sub    esp,0x8
c001110f:	68 b5 b7 02 c0       	push   0xc002b7b5
c0011114:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011118:	e8 63 f6 fe ff       	call   c0000780 <strcmp>
c001111d:	83 c4 10             	add    esp,0x10
c0011120:	85 c0                	test   eax,eax
c0011122:	0f 94 c0             	sete   al
c0011125:	0f b6 c0             	movzx  eax,al
c0011128:	85 c0                	test   eax,eax
c001112a:	74 0c                	je     c0011138 <KeResolveCompatibilitySymbol(char*)+0x164>
c001112c:	b8 54 41 02 c0       	mov    eax,0xc0024154
c0011131:	e9 06 01 00 00       	jmp    c001123c <KeResolveCompatibilitySymbol(char*)+0x268>
c0011136:	66 90                	xchg   ax,ax
c0011138:	83 ec 08             	sub    esp,0x8
c001113b:	68 be b7 02 c0       	push   0xc002b7be
c0011140:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011144:	e8 37 f6 fe ff       	call   c0000780 <strcmp>
c0011149:	83 c4 10             	add    esp,0x10
c001114c:	85 c0                	test   eax,eax
c001114e:	0f 94 c0             	sete   al
c0011151:	0f b6 c0             	movzx  eax,al
c0011154:	85 c0                	test   eax,eax
c0011156:	74 0c                	je     c0011164 <KeResolveCompatibilitySymbol(char*)+0x190>
c0011158:	b8 0c 61 03 c0       	mov    eax,0xc003610c
c001115d:	e9 da 00 00 00       	jmp    c001123c <KeResolveCompatibilitySymbol(char*)+0x268>
c0011162:	66 90                	xchg   ax,ax
c0011164:	83 ec 08             	sub    esp,0x8
c0011167:	68 d6 b7 02 c0       	push   0xc002b7d6
c001116c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011170:	e8 0b f6 fe ff       	call   c0000780 <strcmp>
c0011175:	83 c4 10             	add    esp,0x10
c0011178:	85 c0                	test   eax,eax
c001117a:	0f 94 c0             	sete   al
c001117d:	0f b6 c0             	movzx  eax,al
c0011180:	85 c0                	test   eax,eax
c0011182:	74 0c                	je     c0011190 <KeResolveCompatibilitySymbol(char*)+0x1bc>
c0011184:	b8 0c 61 03 c0       	mov    eax,0xc003610c
c0011189:	e9 ae 00 00 00       	jmp    c001123c <KeResolveCompatibilitySymbol(char*)+0x268>
c001118e:	66 90                	xchg   ax,ax
c0011190:	83 ec 08             	sub    esp,0x8
c0011193:	68 e3 b7 02 c0       	push   0xc002b7e3
c0011198:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001119c:	e8 df f5 fe ff       	call   c0000780 <strcmp>
c00111a1:	83 c4 10             	add    esp,0x10
c00111a4:	85 c0                	test   eax,eax
c00111a6:	0f 94 c0             	sete   al
c00111a9:	0f b6 c0             	movzx  eax,al
c00111ac:	85 c0                	test   eax,eax
c00111ae:	74 0c                	je     c00111bc <KeResolveCompatibilitySymbol(char*)+0x1e8>
c00111b0:	b8 0d 61 03 c0       	mov    eax,0xc003610d
c00111b5:	e9 82 00 00 00       	jmp    c001123c <KeResolveCompatibilitySymbol(char*)+0x268>
c00111ba:	66 90                	xchg   ax,ax
c00111bc:	83 ec 08             	sub    esp,0x8
c00111bf:	68 f0 b7 02 c0       	push   0xc002b7f0
c00111c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00111c8:	e8 b3 f5 fe ff       	call   c0000780 <strcmp>
c00111cd:	83 c4 10             	add    esp,0x10
c00111d0:	85 c0                	test   eax,eax
c00111d2:	0f 94 c0             	sete   al
c00111d5:	0f b6 c0             	movzx  eax,al
c00111d8:	85 c0                	test   eax,eax
c00111da:	74 08                	je     c00111e4 <KeResolveCompatibilitySymbol(char*)+0x210>
c00111dc:	b8 0c 61 03 c0       	mov    eax,0xc003610c
c00111e1:	eb 59                	jmp    c001123c <KeResolveCompatibilitySymbol(char*)+0x268>
c00111e3:	90                   	nop
c00111e4:	83 ec 08             	sub    esp,0x8
c00111e7:	68 01 b8 02 c0       	push   0xc002b801
c00111ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00111f0:	e8 8b f5 fe ff       	call   c0000780 <strcmp>
c00111f5:	83 c4 10             	add    esp,0x10
c00111f8:	85 c0                	test   eax,eax
c00111fa:	0f 94 c0             	sete   al
c00111fd:	0f b6 c0             	movzx  eax,al
c0011200:	85 c0                	test   eax,eax
c0011202:	74 08                	je     c001120c <KeResolveCompatibilitySymbol(char*)+0x238>
c0011204:	b8 0d 61 03 c0       	mov    eax,0xc003610d
c0011209:	eb 31                	jmp    c001123c <KeResolveCompatibilitySymbol(char*)+0x268>
c001120b:	90                   	nop
c001120c:	83 ec 08             	sub    esp,0x8
c001120f:	68 12 b8 02 c0       	push   0xc002b812
c0011214:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011218:	e8 63 f5 fe ff       	call   c0000780 <strcmp>
c001121d:	83 c4 10             	add    esp,0x10
c0011220:	85 c0                	test   eax,eax
c0011222:	0f 94 c0             	sete   al
c0011225:	0f b6 c0             	movzx  eax,al
c0011228:	85 c0                	test   eax,eax
c001122a:	74 08                	je     c0011234 <KeResolveCompatibilitySymbol(char*)+0x260>
c001122c:	b8 dc 78 01 c0       	mov    eax,0xc00178dc
c0011231:	eb 09                	jmp    c001123c <KeResolveCompatibilitySymbol(char*)+0x268>
c0011233:	90                   	nop
c0011234:	b8 00 00 00 00       	mov    eax,0x0
c0011239:	8d 76 00             	lea    esi,[esi+0x0]
c001123c:	83 c4 0c             	add    esp,0xc
c001123f:	c3                   	ret    

c0011240 <Semaphore::Semaphore(int)>:
c0011240:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011244:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011248:	89 10                	mov    DWORD PTR [eax],edx
c001124a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001124e:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0011255:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011259:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011260:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011264:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001126b:	90                   	nop
c001126c:	c3                   	ret    
c001126d:	90                   	nop
c001126e:	66 90                	xchg   ax,ax

c0011270 <Semaphore::tryAcquire()>:
c0011270:	83 ec 0c             	sub    esp,0xc
c0011273:	fa                   	cli    
c0011274:	a1 30 63 03 c0       	mov    eax,ds:0xc0036330
c0011279:	83 c0 01             	add    eax,0x1
c001127c:	a3 30 63 03 c0       	mov    ds:0xc0036330,eax
c0011281:	a1 2c 63 03 c0       	mov    eax,ds:0xc003632c
c0011286:	83 c0 01             	add    eax,0x1
c0011289:	a3 2c 63 03 c0       	mov    ds:0xc003632c,eax
c001128e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011292:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0011295:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011299:	8b 00                	mov    eax,DWORD PTR [eax]
c001129b:	39 c2                	cmp    edx,eax
c001129d:	7d 59                	jge    c00112f8 <Semaphore::tryAcquire()+0x88>
c001129f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00112a3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00112a6:	8d 50 01             	lea    edx,[eax+0x1]
c00112a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00112ad:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00112b0:	a1 2c 63 03 c0       	mov    eax,ds:0xc003632c
c00112b5:	83 e8 01             	sub    eax,0x1
c00112b8:	a3 2c 63 03 c0       	mov    ds:0xc003632c,eax
c00112bd:	a1 2c 63 03 c0       	mov    eax,ds:0xc003632c
c00112c2:	85 c0                	test   eax,eax
c00112c4:	75 1a                	jne    c00112e0 <Semaphore::tryAcquire()+0x70>
c00112c6:	a1 28 63 03 c0       	mov    eax,ds:0xc0036328
c00112cb:	85 c0                	test   eax,eax
c00112cd:	74 11                	je     c00112e0 <Semaphore::tryAcquire()+0x70>
c00112cf:	c7 05 28 63 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0036328,0x0
c00112d9:	e8 0a 5e 00 00       	call   c00170e8 <schedule()>
c00112de:	66 90                	xchg   ax,ax
c00112e0:	f0 83 2d 30 63 03 c0 01 	lock sub DWORD PTR ds:0xc0036330,0x1
c00112e8:	a1 30 63 03 c0       	mov    eax,ds:0xc0036330
c00112ed:	85 c0                	test   eax,eax
c00112ef:	75 03                	jne    c00112f4 <Semaphore::tryAcquire()+0x84>
c00112f1:	fb                   	sti    
c00112f2:	66 90                	xchg   ax,ax
c00112f4:	b0 01                	mov    al,0x1
c00112f6:	eb 48                	jmp    c0011340 <Semaphore::tryAcquire()+0xd0>
c00112f8:	a1 2c 63 03 c0       	mov    eax,ds:0xc003632c
c00112fd:	83 e8 01             	sub    eax,0x1
c0011300:	a3 2c 63 03 c0       	mov    ds:0xc003632c,eax
c0011305:	a1 2c 63 03 c0       	mov    eax,ds:0xc003632c
c001130a:	85 c0                	test   eax,eax
c001130c:	75 1a                	jne    c0011328 <Semaphore::tryAcquire()+0xb8>
c001130e:	a1 28 63 03 c0       	mov    eax,ds:0xc0036328
c0011313:	85 c0                	test   eax,eax
c0011315:	74 11                	je     c0011328 <Semaphore::tryAcquire()+0xb8>
c0011317:	c7 05 28 63 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0036328,0x0
c0011321:	e8 c2 5d 00 00       	call   c00170e8 <schedule()>
c0011326:	66 90                	xchg   ax,ax
c0011328:	f0 83 2d 30 63 03 c0 01 	lock sub DWORD PTR ds:0xc0036330,0x1
c0011330:	a1 30 63 03 c0       	mov    eax,ds:0xc0036330
c0011335:	85 c0                	test   eax,eax
c0011337:	75 03                	jne    c001133c <Semaphore::tryAcquire()+0xcc>
c0011339:	fb                   	sti    
c001133a:	66 90                	xchg   ax,ax
c001133c:	b0 00                	mov    al,0x0
c001133e:	66 90                	xchg   ax,ax
c0011340:	83 c4 0c             	add    esp,0xc
c0011343:	c3                   	ret    

c0011344 <Semaphore::assertLocked(char const*)>:
c0011344:	83 ec 0c             	sub    esp,0xc
c0011347:	fa                   	cli    
c0011348:	a1 30 63 03 c0       	mov    eax,ds:0xc0036330
c001134d:	83 c0 01             	add    eax,0x1
c0011350:	a3 30 63 03 c0       	mov    ds:0xc0036330,eax
c0011355:	a1 2c 63 03 c0       	mov    eax,ds:0xc003632c
c001135a:	83 c0 01             	add    eax,0x1
c001135d:	a3 2c 63 03 c0       	mov    ds:0xc003632c,eax
c0011362:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011366:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0011369:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001136d:	8b 00                	mov    eax,DWORD PTR [eax]
c001136f:	39 c2                	cmp    edx,eax
c0011371:	7d 11                	jge    c0011384 <Semaphore::assertLocked(char const*)+0x40>
c0011373:	83 ec 0c             	sub    esp,0xc
c0011376:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001137a:	e8 e1 f1 ff ff       	call   c0010560 <KePanic(char const*)>
c001137f:	83 c4 10             	add    esp,0x10
c0011382:	66 90                	xchg   ax,ax
c0011384:	a1 2c 63 03 c0       	mov    eax,ds:0xc003632c
c0011389:	83 e8 01             	sub    eax,0x1
c001138c:	a3 2c 63 03 c0       	mov    ds:0xc003632c,eax
c0011391:	a1 2c 63 03 c0       	mov    eax,ds:0xc003632c
c0011396:	85 c0                	test   eax,eax
c0011398:	75 1a                	jne    c00113b4 <Semaphore::assertLocked(char const*)+0x70>
c001139a:	a1 28 63 03 c0       	mov    eax,ds:0xc0036328
c001139f:	85 c0                	test   eax,eax
c00113a1:	74 11                	je     c00113b4 <Semaphore::assertLocked(char const*)+0x70>
c00113a3:	c7 05 28 63 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0036328,0x0
c00113ad:	e8 36 5d 00 00       	call   c00170e8 <schedule()>
c00113b2:	66 90                	xchg   ax,ax
c00113b4:	f0 83 2d 30 63 03 c0 01 	lock sub DWORD PTR ds:0xc0036330,0x1
c00113bc:	a1 30 63 03 c0       	mov    eax,ds:0xc0036330
c00113c1:	85 c0                	test   eax,eax
c00113c3:	75 03                	jne    c00113c8 <Semaphore::assertLocked(char const*)+0x84>
c00113c5:	fb                   	sti    
c00113c6:	66 90                	xchg   ax,ax
c00113c8:	90                   	nop
c00113c9:	83 c4 0c             	add    esp,0xc
c00113cc:	c3                   	ret    
c00113cd:	90                   	nop
c00113ce:	66 90                	xchg   ax,ax

c00113d0 <Semaphore::acquire(int)>:
c00113d0:	83 ec 1c             	sub    esp,0x1c
c00113d3:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00113d8:	0f 84 ae 00 00 00    	je     c001148c <Semaphore::acquire(int)+0xbc>
c00113de:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00113e6:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c00113eb:	90                   	nop
c00113ec:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00113f1:	85 c0                	test   eax,eax
c00113f3:	0f 84 87 00 00 00    	je     c0011480 <Semaphore::acquire(int)+0xb0>
c00113f9:	83 ec 0c             	sub    esp,0xc
c00113fc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011400:	e8 6b fe ff ff       	call   c0011270 <Semaphore::tryAcquire()>
c0011405:	83 c4 10             	add    esp,0x10
c0011408:	83 f0 01             	xor    eax,0x1
c001140b:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001140f:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0011413:	83 f0 01             	xor    eax,0x1
c0011416:	0f b6 c0             	movzx  eax,al
c0011419:	85 c0                	test   eax,eax
c001141b:	75 5f                	jne    c001147c <Semaphore::acquire(int)+0xac>
c001141d:	83 7c 24 24 28       	cmp    DWORD PTR [esp+0x24],0x28
c0011422:	7f 34                	jg     c0011458 <Semaphore::acquire(int)+0x88>
c0011424:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0011428:	89 d0                	mov    eax,edx
c001142a:	c1 e0 02             	shl    eax,0x2
c001142d:	01 d0                	add    eax,edx
c001142f:	d1 e0                	shl    eax,1
c0011431:	89 c2                	mov    edx,eax
c0011433:	c1 fa 1f             	sar    edx,0x1f
c0011436:	83 ec 08             	sub    esp,0x8
c0011439:	52                   	push   edx
c001143a:	50                   	push   eax
c001143b:	e8 9c 5e 00 00       	call   c00172dc <milliTenthSleep(unsigned long long)>
c0011440:	83 c4 10             	add    esp,0x10
c0011443:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0011447:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c001144b:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0011453:	eb 97                	jmp    c00113ec <Semaphore::acquire(int)+0x1c>
c0011455:	8d 76 00             	lea    esi,[esi+0x0]
c0011458:	83 ec 08             	sub    esp,0x8
c001145b:	6a 00                	push   0x0
c001145d:	68 90 01 00 00       	push   0x190
c0011462:	e8 75 5e 00 00       	call   c00172dc <milliTenthSleep(unsigned long long)>
c0011467:	83 c4 10             	add    esp,0x10
c001146a:	83 44 24 0c 28       	add    DWORD PTR [esp+0xc],0x28
c001146f:	83 6c 24 24 28       	sub    DWORD PTR [esp+0x24],0x28
c0011474:	e9 73 ff ff ff       	jmp    c00113ec <Semaphore::acquire(int)+0x1c>
c0011479:	8d 76 00             	lea    esi,[esi+0x0]
c001147c:	90                   	nop
c001147d:	8d 76 00             	lea    esi,[esi+0x0]
c0011480:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011484:	e9 fb 00 00 00       	jmp    c0011584 <Semaphore::acquire(int)+0x1b4>
c0011489:	8d 76 00             	lea    esi,[esi+0x0]
c001148c:	fa                   	cli    
c001148d:	a1 30 63 03 c0       	mov    eax,ds:0xc0036330
c0011492:	83 c0 01             	add    eax,0x1
c0011495:	a3 30 63 03 c0       	mov    ds:0xc0036330,eax
c001149a:	a1 2c 63 03 c0       	mov    eax,ds:0xc003632c
c001149f:	83 c0 01             	add    eax,0x1
c00114a2:	a3 2c 63 03 c0       	mov    ds:0xc003632c,eax
c00114a7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00114ab:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00114ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00114b2:	8b 00                	mov    eax,DWORD PTR [eax]
c00114b4:	39 c2                	cmp    edx,eax
c00114b6:	7d 14                	jge    c00114cc <Semaphore::acquire(int)+0xfc>
c00114b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00114bc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00114bf:	8d 50 01             	lea    edx,[eax+0x1]
c00114c2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00114c6:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00114c9:	eb 6d                	jmp    c0011538 <Semaphore::acquire(int)+0x168>
c00114cb:	90                   	nop
c00114cc:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00114d1:	8b 00                	mov    eax,DWORD PTR [eax]
c00114d3:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00114da:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00114de:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114e1:	85 c0                	test   eax,eax
c00114e3:	75 13                	jne    c00114f8 <Semaphore::acquire(int)+0x128>
c00114e5:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00114ea:	8b 10                	mov    edx,DWORD PTR [eax]
c00114ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00114f0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00114f3:	eb 17                	jmp    c001150c <Semaphore::acquire(int)+0x13c>
c00114f5:	8d 76 00             	lea    esi,[esi+0x0]
c00114f8:	ba 00 20 00 c2       	mov    edx,0xc2002000
c00114fd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011501:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011504:	8b 12                	mov    edx,DWORD PTR [edx]
c0011506:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0011509:	8d 76 00             	lea    esi,[esi+0x0]
c001150c:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0011511:	8b 10                	mov    edx,DWORD PTR [eax]
c0011513:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011517:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001151a:	83 ec 0c             	sub    esp,0xc
c001151d:	68 28 b8 02 c0       	push   0xc002b828
c0011522:	e8 3f 5a ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0011527:	83 c4 10             	add    esp,0x10
c001152a:	83 ec 0c             	sub    esp,0xc
c001152d:	6a 05                	push   0x5
c001152f:	e8 74 5c 00 00       	call   c00171a8 <blockTask(TaskState)>
c0011534:	83 c4 10             	add    esp,0x10
c0011537:	90                   	nop
c0011538:	a1 2c 63 03 c0       	mov    eax,ds:0xc003632c
c001153d:	83 e8 01             	sub    eax,0x1
c0011540:	a3 2c 63 03 c0       	mov    ds:0xc003632c,eax
c0011545:	a1 2c 63 03 c0       	mov    eax,ds:0xc003632c
c001154a:	85 c0                	test   eax,eax
c001154c:	75 1a                	jne    c0011568 <Semaphore::acquire(int)+0x198>
c001154e:	a1 28 63 03 c0       	mov    eax,ds:0xc0036328
c0011553:	85 c0                	test   eax,eax
c0011555:	74 11                	je     c0011568 <Semaphore::acquire(int)+0x198>
c0011557:	c7 05 28 63 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0036328,0x0
c0011561:	e8 82 5b 00 00       	call   c00170e8 <schedule()>
c0011566:	66 90                	xchg   ax,ax
c0011568:	f0 83 2d 30 63 03 c0 01 	lock sub DWORD PTR ds:0xc0036330,0x1
c0011570:	a1 30 63 03 c0       	mov    eax,ds:0xc0036330
c0011575:	85 c0                	test   eax,eax
c0011577:	75 03                	jne    c001157c <Semaphore::acquire(int)+0x1ac>
c0011579:	fb                   	sti    
c001157a:	66 90                	xchg   ax,ax
c001157c:	b8 00 00 00 00       	mov    eax,0x0
c0011581:	8d 76 00             	lea    esi,[esi+0x0]
c0011584:	83 c4 1c             	add    esp,0x1c
c0011587:	c3                   	ret    

c0011588 <Semaphore::acquire()>:
c0011588:	83 ec 0c             	sub    esp,0xc
c001158b:	83 ec 08             	sub    esp,0x8
c001158e:	6a 00                	push   0x0
c0011590:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011594:	e8 37 fe ff ff       	call   c00113d0 <Semaphore::acquire(int)>
c0011599:	83 c4 10             	add    esp,0x10
c001159c:	90                   	nop
c001159d:	83 c4 0c             	add    esp,0xc
c00115a0:	c3                   	ret    
c00115a1:	90                   	nop
c00115a2:	66 90                	xchg   ax,ax

c00115a4 <Semaphore::release()>:
c00115a4:	83 ec 1c             	sub    esp,0x1c
c00115a7:	fa                   	cli    
c00115a8:	a1 30 63 03 c0       	mov    eax,ds:0xc0036330
c00115ad:	83 c0 01             	add    eax,0x1
c00115b0:	a3 30 63 03 c0       	mov    ds:0xc0036330,eax
c00115b5:	a1 2c 63 03 c0       	mov    eax,ds:0xc003632c
c00115ba:	83 c0 01             	add    eax,0x1
c00115bd:	a3 2c 63 03 c0       	mov    ds:0xc003632c,eax
c00115c2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00115c6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115c9:	85 c0                	test   eax,eax
c00115cb:	74 2b                	je     c00115f8 <Semaphore::release()+0x54>
c00115cd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00115d1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115d4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00115d8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00115dc:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00115df:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00115e3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00115e6:	83 ec 0c             	sub    esp,0xc
c00115e9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00115ed:	e8 4e 5e 00 00       	call   c0017440 <unblockTask(ThreadControlBlock*)>
c00115f2:	83 c4 10             	add    esp,0x10
c00115f5:	eb 15                	jmp    c001160c <Semaphore::release()+0x68>
c00115f7:	90                   	nop
c00115f8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00115fc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00115ff:	8d 50 ff             	lea    edx,[eax-0x1]
c0011602:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011606:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0011609:	8d 76 00             	lea    esi,[esi+0x0]
c001160c:	a1 2c 63 03 c0       	mov    eax,ds:0xc003632c
c0011611:	83 e8 01             	sub    eax,0x1
c0011614:	a3 2c 63 03 c0       	mov    ds:0xc003632c,eax
c0011619:	a1 2c 63 03 c0       	mov    eax,ds:0xc003632c
c001161e:	85 c0                	test   eax,eax
c0011620:	75 1a                	jne    c001163c <Semaphore::release()+0x98>
c0011622:	a1 28 63 03 c0       	mov    eax,ds:0xc0036328
c0011627:	85 c0                	test   eax,eax
c0011629:	74 11                	je     c001163c <Semaphore::release()+0x98>
c001162b:	c7 05 28 63 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0036328,0x0
c0011635:	e8 ae 5a 00 00       	call   c00170e8 <schedule()>
c001163a:	66 90                	xchg   ax,ax
c001163c:	f0 83 2d 30 63 03 c0 01 	lock sub DWORD PTR ds:0xc0036330,0x1
c0011644:	a1 30 63 03 c0       	mov    eax,ds:0xc0036330
c0011649:	85 c0                	test   eax,eax
c001164b:	75 03                	jne    c0011650 <Semaphore::release()+0xac>
c001164d:	fb                   	sti    
c001164e:	66 90                	xchg   ax,ax
c0011650:	90                   	nop
c0011651:	83 c4 1c             	add    esp,0x1c
c0011654:	c3                   	ret    

c0011655 <KiSigKill(int)>:
c0011655:	83 ec 0c             	sub    esp,0xc
c0011658:	6a 00                	push   0x0
c001165a:	6a 00                	push   0x0
c001165c:	6a ff                	push   0xffffffff
c001165e:	6a 01                	push   0x1
c0011660:	e8 ed f9 01 00       	call   c0031052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0011665:	83 c4 1c             	add    esp,0x1c
c0011668:	c3                   	ret    

c0011669 <KiDefaultSignalHandlerIgnore(int)>:
c0011669:	c3                   	ret    

c001166a <KiDefaultSignalHandlerPause(int)>:
c001166a:	57                   	push   edi
c001166b:	b9 07 00 00 00       	mov    ecx,0x7
c0011670:	56                   	push   esi
c0011671:	be 83 b8 02 c0       	mov    esi,0xc002b883
c0011676:	83 ec 24             	sub    esp,0x24
c0011679:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001167d:	fc                   	cld    
c001167e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0011680:	8d 44 24 04          	lea    eax,[esp+0x4]
c0011684:	50                   	push   eax
c0011685:	6a 00                	push   0x0
c0011687:	6a 00                	push   0x0
c0011689:	6a 27                	push   0x27
c001168b:	e8 c2 f9 01 00       	call   c0031052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0011690:	83 c4 34             	add    esp,0x34
c0011693:	5e                   	pop    esi
c0011694:	5f                   	pop    edi
c0011695:	c3                   	ret    

c0011696 <KiDefaultSignalHandlerResume(int)>:
c0011696:	57                   	push   edi
c0011697:	b9 1d 00 00 00       	mov    ecx,0x1d
c001169c:	56                   	push   esi
c001169d:	be 9f b8 02 c0       	mov    esi,0xc002b89f
c00116a2:	83 ec 24             	sub    esp,0x24
c00116a5:	8d 7c 24 03          	lea    edi,[esp+0x3]
c00116a9:	fc                   	cld    
c00116aa:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00116ac:	8d 44 24 03          	lea    eax,[esp+0x3]
c00116b0:	50                   	push   eax
c00116b1:	6a 00                	push   0x0
c00116b3:	6a 00                	push   0x0
c00116b5:	6a 27                	push   0x27
c00116b7:	e8 96 f9 01 00       	call   c0031052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c00116bc:	83 c4 34             	add    esp,0x34
c00116bf:	5e                   	pop    esi
c00116c0:	5f                   	pop    edi
c00116c1:	c3                   	ret    

c00116c2 <KeDeinitSignals(SigHandlerBlock*)>:
c00116c2:	e9 55 ea ff ff       	jmp    c001011c <free>

c00116c7 <KeInitSignals()>:
c00116c7:	53                   	push   ebx
c00116c8:	83 ec 14             	sub    esp,0x14
c00116cb:	68 c8 00 00 00       	push   0xc8
c00116d0:	e8 37 ea ff ff       	call   c001010c <malloc>
c00116d5:	83 c4 0c             	add    esp,0xc
c00116d8:	6a 04                	push   0x4
c00116da:	6a 00                	push   0x0
c00116dc:	50                   	push   eax
c00116dd:	89 c3                	mov    ebx,eax
c00116df:	e8 0c ee fe ff       	call   c00004f0 <memset>
c00116e4:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00116ea:	83 c4 0c             	add    esp,0xc
c00116ed:	c7 83 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xbc],0x0
c00116f7:	c7 83 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xc0],0x0
c0011701:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c0011708:	6a 20                	push   0x20
c001170a:	6a 00                	push   0x0
c001170c:	50                   	push   eax
c001170d:	e8 de ed fe ff       	call   c00004f0 <memset>
c0011712:	83 c4 0c             	add    esp,0xc
c0011715:	6a 44                	push   0x44
c0011717:	6a 00                	push   0x0
c0011719:	53                   	push   ebx
c001171a:	e8 d1 ed fe ff       	call   c00004f0 <memset>
c001171f:	8d 83 88 00 00 00    	lea    eax,[ebx+0x88]
c0011725:	83 c4 0c             	add    esp,0xc
c0011728:	6a 11                	push   0x11
c001172a:	6a 00                	push   0x0
c001172c:	50                   	push   eax
c001172d:	e8 be ed fe ff       	call   c00004f0 <memset>
c0011732:	83 c4 18             	add    esp,0x18
c0011735:	89 d8                	mov    eax,ebx
c0011737:	5b                   	pop    ebx
c0011738:	c3                   	ret    

c0011739 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c0011739:	53                   	push   ebx
c001173a:	b8 01 00 00 00       	mov    eax,0x1
c001173f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0011743:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011747:	83 f9 10             	cmp    ecx,0x10
c001174a:	7f 21                	jg     c001176d <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c001174c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011750:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c0011753:	89 03                	mov    DWORD PTR [ebx],eax
c0011755:	b8 01 00 00 00       	mov    eax,0x1
c001175a:	d3 e0                	shl    eax,cl
c001175c:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0011760:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0011763:	31 c0                	xor    eax,eax
c0011765:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c001176d:	5b                   	pop    ebx
c001176e:	c3                   	ret    

c001176f <KeRaiseSignal(SigHandlerBlock*, int)>:
c001176f:	55                   	push   ebp
c0011770:	57                   	push   edi
c0011771:	bf 08 00 00 00       	mov    edi,0x8
c0011776:	56                   	push   esi
c0011777:	53                   	push   ebx
c0011778:	83 ec 14             	sub    esp,0x14
c001177b:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001177f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011783:	68 bc b8 02 c0       	push   0xc002b8bc
c0011788:	e8 d9 57 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001178d:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c0011793:	83 c4 10             	add    esp,0x10
c0011796:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c001179d:	31 c9                	xor    ecx,ecx
c001179f:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00117a3:	99                   	cdq    
c00117a4:	f7 ff                	idiv   edi
c00117a6:	8d 42 24             	lea    eax,[edx+0x24]
c00117a9:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c00117ad:	85 f6                	test   esi,esi
c00117af:	75 1a                	jne    c00117cb <KeRaiseSignal(SigHandlerBlock*, int)+0x5c>
c00117b1:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00117b5:	89 7c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],edi
c00117b9:	50                   	push   eax
c00117ba:	50                   	push   eax
c00117bb:	52                   	push   edx
c00117bc:	68 d2 b8 02 c0       	push   0xc002b8d2
c00117c1:	e8 a0 57 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00117c6:	83 c4 10             	add    esp,0x10
c00117c9:	eb 1b                	jmp    c00117e6 <KeRaiseSignal(SigHandlerBlock*, int)+0x77>
c00117cb:	41                   	inc    ecx
c00117cc:	83 f9 08             	cmp    ecx,0x8
c00117cf:	75 ce                	jne    c001179f <KeRaiseSignal(SigHandlerBlock*, int)+0x30>
c00117d1:	83 ec 0c             	sub    esp,0xc
c00117d4:	be 01 00 00 00       	mov    esi,0x1
c00117d9:	68 f3 b8 02 c0       	push   0xc002b8f3
c00117de:	e8 83 57 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00117e3:	83 c4 10             	add    esp,0x10
c00117e6:	83 c4 0c             	add    esp,0xc
c00117e9:	89 f0                	mov    eax,esi
c00117eb:	5b                   	pop    ebx
c00117ec:	5e                   	pop    esi
c00117ed:	5f                   	pop    edi
c00117ee:	5d                   	pop    ebp
c00117ef:	c3                   	ret    

c00117f0 <KeCheckSignal(SigHandlerBlock*, int*)>:
c00117f0:	55                   	push   ebp
c00117f1:	57                   	push   edi
c00117f2:	56                   	push   esi
c00117f3:	53                   	push   ebx
c00117f4:	83 ec 1c             	sub    esp,0x1c
c00117f7:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00117fb:	85 db                	test   ebx,ebx
c00117fd:	0f 84 e0 00 00 00    	je     c00118e3 <KeCheckSignal(SigHandlerBlock*, int*)+0xf3>
c0011803:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c001180a:	0f 84 d3 00 00 00    	je     c00118e3 <KeCheckSignal(SigHandlerBlock*, int*)+0xf3>
c0011810:	31 c9                	xor    ecx,ecx
c0011812:	bf 08 00 00 00       	mov    edi,0x8
c0011817:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c001181d:	8d 04 0e             	lea    eax,[esi+ecx*1]
c0011820:	99                   	cdq    
c0011821:	f7 ff                	idiv   edi
c0011823:	8b ac 93 9c 00 00 00 	mov    ebp,DWORD PTR [ebx+edx*4+0x9c]
c001182a:	85 ed                	test   ebp,ebp
c001182c:	0f 84 d2 00 00 00    	je     c0011904 <KeCheckSignal(SigHandlerBlock*, int*)+0x114>
c0011832:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c0011838:	89 e9                	mov    ecx,ebp
c001183a:	bf 01 00 00 00       	mov    edi,0x1
c001183f:	d3 e7                	shl    edi,cl
c0011841:	31 c9                	xor    ecx,ecx
c0011843:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011847:	b8 01 00 00 00       	mov    eax,0x1
c001184c:	d3 e0                	shl    eax,cl
c001184e:	85 44 24 0c          	test   DWORD PTR [esp+0xc],eax
c0011852:	74 0a                	je     c001185e <KeCheckSignal(SigHandlerBlock*, int*)+0x6e>
c0011854:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c0011858:	0f 85 85 00 00 00    	jne    c00118e3 <KeCheckSignal(SigHandlerBlock*, int*)+0xf3>
c001185e:	41                   	inc    ecx
c001185f:	83 f9 11             	cmp    ecx,0x11
c0011862:	75 e3                	jne    c0011847 <KeCheckSignal(SigHandlerBlock*, int*)+0x57>
c0011864:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011868:	46                   	inc    esi
c0011869:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c001186f:	c7 84 93 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+edx*4+0x9c],0x0
c001187a:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c0011881:	09 f8                	or     eax,edi
c0011883:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c0011889:	31 c0                	xor    eax,eax
c001188b:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c0011893:	74 09                	je     c001189e <KeCheckSignal(SigHandlerBlock*, int*)+0xae>
c0011895:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c001189c:	eb 06                	jmp    c00118a4 <KeCheckSignal(SigHandlerBlock*, int*)+0xb4>
c001189e:	40                   	inc    eax
c001189f:	83 f8 08             	cmp    eax,0x8
c00118a2:	75 e7                	jne    c001188b <KeCheckSignal(SigHandlerBlock*, int*)+0x9b>
c00118a4:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00118a8:	83 fd 09             	cmp    ebp,0x9
c00118ab:	8b 04 ab             	mov    eax,DWORD PTR [ebx+ebp*4]
c00118ae:	89 2a                	mov    DWORD PTR [edx],ebp
c00118b0:	75 14                	jne    c00118c6 <KeCheckSignal(SigHandlerBlock*, int*)+0xd6>
c00118b2:	83 ec 0c             	sub    esp,0xc
c00118b5:	68 04 b9 02 c0       	push   0xc002b904
c00118ba:	e8 a7 56 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00118bf:	b8 55 16 01 c0       	mov    eax,0xc0011655
c00118c4:	eb 39                	jmp    c00118ff <KeCheckSignal(SigHandlerBlock*, int*)+0x10f>
c00118c6:	83 f8 01             	cmp    eax,0x1
c00118c9:	75 1c                	jne    c00118e7 <KeCheckSignal(SigHandlerBlock*, int*)+0xf7>
c00118cb:	83 ec 0c             	sub    esp,0xc
c00118ce:	f7 d7                	not    edi
c00118d0:	68 0e b9 02 c0       	push   0xc002b90e
c00118d5:	e8 8c 56 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00118da:	83 c4 10             	add    esp,0x10
c00118dd:	21 bb c0 00 00 00    	and    DWORD PTR [ebx+0xc0],edi
c00118e3:	31 c0                	xor    eax,eax
c00118e5:	eb 30                	jmp    c0011917 <KeCheckSignal(SigHandlerBlock*, int*)+0x127>
c00118e7:	85 c0                	test   eax,eax
c00118e9:	75 2c                	jne    c0011917 <KeCheckSignal(SigHandlerBlock*, int*)+0x127>
c00118eb:	83 ec 0c             	sub    esp,0xc
c00118ee:	68 1b b9 02 c0       	push   0xc002b91b
c00118f3:	e8 6e 56 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00118f8:	8b 04 ad 20 fb 02 c0 	mov    eax,DWORD PTR [ebp*4-0x3ffd04e0]
c00118ff:	83 c4 10             	add    esp,0x10
c0011902:	eb 13                	jmp    c0011917 <KeCheckSignal(SigHandlerBlock*, int*)+0x127>
c0011904:	41                   	inc    ecx
c0011905:	46                   	inc    esi
c0011906:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c001190c:	83 f9 08             	cmp    ecx,0x8
c001190f:	0f 85 02 ff ff ff    	jne    c0011817 <KeCheckSignal(SigHandlerBlock*, int*)+0x27>
c0011915:	eb cc                	jmp    c00118e3 <KeCheckSignal(SigHandlerBlock*, int*)+0xf3>
c0011917:	83 c4 1c             	add    esp,0x1c
c001191a:	5b                   	pop    ebx
c001191b:	5e                   	pop    esi
c001191c:	5f                   	pop    edi
c001191d:	5d                   	pop    ebp
c001191e:	c3                   	ret    

c001191f <KiCheckSignalZ>:
c001191f:	80 3d 0c 61 03 c0 00 	cmp    BYTE PTR ds:0xc003610c,0x0
c0011926:	74 43                	je     c001196b <KiCheckSignalZ+0x4c>
c0011928:	83 ec 24             	sub    esp,0x24
c001192b:	8d 44 24 14          	lea    eax,[esp+0x14]
c001192f:	50                   	push   eax
c0011930:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011935:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011938:	ff b0 c0 07 00 00    	push   DWORD PTR [eax+0x7c0]
c001193e:	e8 ad fe ff ff       	call   c00117f0 <KeCheckSignal(SigHandlerBlock*, int*)>
c0011943:	83 c4 10             	add    esp,0x10
c0011946:	31 d2                	xor    edx,edx
c0011948:	85 c0                	test   eax,eax
c001194a:	74 19                	je     c0011965 <KiCheckSignalZ+0x46>
c001194c:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0011952:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0011955:	89 02                	mov    DWORD PTR [edx],eax
c0011957:	c7 42 04 00 00 00 00 	mov    DWORD PTR [edx+0x4],0x0
c001195e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011962:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0011965:	89 d0                	mov    eax,edx
c0011967:	83 c4 1c             	add    esp,0x1c
c001196a:	c3                   	ret    
c001196b:	31 d2                	xor    edx,edx
c001196d:	89 d0                	mov    eax,edx
c001196f:	c3                   	ret    

c0011970 <KeCompleteSignal(SigHandlerBlock*, int)>:
c0011970:	56                   	push   esi
c0011971:	53                   	push   ebx
c0011972:	bb 01 00 00 00       	mov    ebx,0x1
c0011977:	52                   	push   edx
c0011978:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001197c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011980:	d3 e3                	shl    ebx,cl
c0011982:	83 f9 10             	cmp    ecx,0x10
c0011985:	7f 08                	jg     c001198f <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c0011987:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c001198d:	75 10                	jne    c001199f <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c001198f:	83 ec 0c             	sub    esp,0xc
c0011992:	68 3e b9 02 c0       	push   0xc002b93e
c0011997:	e8 c4 eb ff ff       	call   c0010560 <KePanic(char const*)>
c001199c:	83 c4 10             	add    esp,0x10
c001199f:	f7 d3                	not    ebx
c00119a1:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c00119a7:	58                   	pop    eax
c00119a8:	5b                   	pop    ebx
c00119a9:	5e                   	pop    esi
c00119aa:	c3                   	ret    

c00119ab <KiFinishSignalZ>:
c00119ab:	53                   	push   ebx
c00119ac:	83 ec 08             	sub    esp,0x8
c00119af:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00119b4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00119b8:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00119bb:	83 fa 08             	cmp    edx,0x8
c00119be:	75 0c                	jne    c00119cc <KiFinishSignalZ+0x21>
c00119c0:	83 ec 0c             	sub    esp,0xc
c00119c3:	50                   	push   eax
c00119c4:	e8 77 5a 00 00       	call   c0017440 <unblockTask(ThreadControlBlock*)>
c00119c9:	83 c4 10             	add    esp,0x10
c00119cc:	50                   	push   eax
c00119cd:	50                   	push   eax
c00119ce:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c00119d1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00119d6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00119d9:	ff b0 c0 07 00 00    	push   DWORD PTR [eax+0x7c0]
c00119df:	e8 8c ff ff ff       	call   c0011970 <KeCompleteSignal(SigHandlerBlock*, int)>
c00119e4:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00119ea:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00119f1:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00119f8:	83 c4 18             	add    esp,0x18
c00119fb:	5b                   	pop    ebx
c00119fc:	c3                   	ret    

c00119fd <SysSeekDir(regs*)>:
c00119fd:	31 c0                	xor    eax,eax
c00119ff:	31 d2                	xor    edx,edx
c0011a01:	c3                   	ret    

c0011a02 <SysTellDir(regs*)>:
c0011a02:	31 c0                	xor    eax,eax
c0011a04:	31 d2                	xor    edx,edx
c0011a06:	c3                   	ret    

c0011a07 <SysVerify(regs*)>:
c0011a07:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011a0b:	31 d2                	xor    edx,edx
c0011a0d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011a10:	c3                   	ret    

c0011a11 <SysGetArgc(regs*)>:
c0011a11:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011a16:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011a19:	8b 80 b6 05 00 00    	mov    eax,DWORD PTR [eax+0x5b6]
c0011a1f:	89 c2                	mov    edx,eax
c0011a21:	c1 fa 1f             	sar    edx,0x1f
c0011a24:	c3                   	ret    

c0011a25 <SysTTYName(regs*)>:
c0011a25:	b8 01 00 00 00       	mov    eax,0x1
c0011a2a:	31 d2                	xor    edx,edx
c0011a2c:	c3                   	ret    

c0011a2d <SysFormatDisk(regs*)>:
c0011a2d:	56                   	push   esi
c0011a2e:	53                   	push   ebx
c0011a2f:	83 ec 04             	sub    esp,0x4
c0011a32:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011a36:	8b 1d 04 53 03 c0    	mov    ebx,DWORD PTR ds:0xc0035304
c0011a3c:	eb 2a                	jmp    c0011a68 <SysFormatDisk(regs*)+0x3b>
c0011a3e:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c0011a41:	83 ec 0c             	sub    esp,0xc
c0011a44:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0011a47:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011a49:	51                   	push   ecx
c0011a4a:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c0011a4d:	51                   	push   ecx
c0011a4e:	50                   	push   eax
c0011a4f:	8b 04 85 e0 5a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffca520]
c0011a56:	50                   	push   eax
c0011a57:	53                   	push   ebx
c0011a58:	ff 52 4c             	call   DWORD PTR [edx+0x4c]
c0011a5b:	83 c4 20             	add    esp,0x20
c0011a5e:	83 f8 08             	cmp    eax,0x8
c0011a61:	89 c1                	mov    ecx,eax
c0011a63:	75 14                	jne    c0011a79 <SysFormatDisk(regs*)+0x4c>
c0011a65:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0011a68:	85 db                	test   ebx,ebx
c0011a6a:	75 d2                	jne    c0011a3e <SysFormatDisk(regs*)+0x11>
c0011a6c:	b8 03 00 00 00       	mov    eax,0x3
c0011a71:	31 d2                	xor    edx,edx
c0011a73:	83 c4 04             	add    esp,0x4
c0011a76:	5b                   	pop    ebx
c0011a77:	5e                   	pop    esi
c0011a78:	c3                   	ret    
c0011a79:	85 c0                	test   eax,eax
c0011a7b:	74 13                	je     c0011a90 <SysFormatDisk(regs*)+0x63>
c0011a7d:	31 d2                	xor    edx,edx
c0011a7f:	83 f9 09             	cmp    ecx,0x9
c0011a82:	b8 01 00 00 00       	mov    eax,0x1
c0011a87:	74 ea                	je     c0011a73 <SysFormatDisk(regs*)+0x46>
c0011a89:	b8 02 00 00 00       	mov    eax,0x2
c0011a8e:	eb e1                	jmp    c0011a71 <SysFormatDisk(regs*)+0x44>
c0011a90:	31 c0                	xor    eax,eax
c0011a92:	eb dd                	jmp    c0011a71 <SysFormatDisk(regs*)+0x44>

c0011a94 <SysSetDiskVolumeLabel(regs*)>:
c0011a94:	56                   	push   esi
c0011a95:	53                   	push   ebx
c0011a96:	83 ec 04             	sub    esp,0x4
c0011a99:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011a9d:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0011aa0:	83 f8 19             	cmp    eax,0x19
c0011aa3:	77 33                	ja     c0011ad8 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011aa5:	8b 0c 85 e0 5a 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffca520]
c0011aac:	85 c9                	test   ecx,ecx
c0011aae:	74 28                	je     c0011ad8 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011ab0:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c0011ab3:	85 db                	test   ebx,ebx
c0011ab5:	74 21                	je     c0011ad8 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011ab7:	8b 91 74 01 00 00    	mov    edx,DWORD PTR [ecx+0x174]
c0011abd:	85 d2                	test   edx,edx
c0011abf:	74 17                	je     c0011ad8 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011ac1:	8b 32                	mov    esi,DWORD PTR [edx]
c0011ac3:	53                   	push   ebx
c0011ac4:	50                   	push   eax
c0011ac5:	51                   	push   ecx
c0011ac6:	52                   	push   edx
c0011ac7:	ff 56 5c             	call   DWORD PTR [esi+0x5c]
c0011aca:	83 c4 10             	add    esp,0x10
c0011acd:	83 c4 04             	add    esp,0x4
c0011ad0:	5b                   	pop    ebx
c0011ad1:	5e                   	pop    esi
c0011ad2:	89 c2                	mov    edx,eax
c0011ad4:	c1 fa 1f             	sar    edx,0x1f
c0011ad7:	c3                   	ret    
c0011ad8:	83 c4 04             	add    esp,0x4
c0011adb:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011ae0:	5b                   	pop    ebx
c0011ae1:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011ae6:	5e                   	pop    esi
c0011ae7:	c3                   	ret    

c0011ae8 <SysGetDiskVolumeLabel(regs*)>:
c0011ae8:	57                   	push   edi
c0011ae9:	56                   	push   esi
c0011aea:	53                   	push   ebx
c0011aeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011aef:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0011af2:	83 fa 19             	cmp    edx,0x19
c0011af5:	77 3c                	ja     c0011b33 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011af7:	8b 0c 95 e0 5a 03 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffca520]
c0011afe:	85 c9                	test   ecx,ecx
c0011b00:	74 31                	je     c0011b33 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011b02:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0011b05:	85 db                	test   ebx,ebx
c0011b07:	74 2a                	je     c0011b33 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011b09:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0011b0c:	85 f6                	test   esi,esi
c0011b0e:	74 23                	je     c0011b33 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011b10:	8b 81 74 01 00 00    	mov    eax,DWORD PTR [ecx+0x174]
c0011b16:	85 c0                	test   eax,eax
c0011b18:	74 19                	je     c0011b33 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011b1a:	83 ec 0c             	sub    esp,0xc
c0011b1d:	8b 38                	mov    edi,DWORD PTR [eax]
c0011b1f:	56                   	push   esi
c0011b20:	53                   	push   ebx
c0011b21:	52                   	push   edx
c0011b22:	51                   	push   ecx
c0011b23:	50                   	push   eax
c0011b24:	ff 57 58             	call   DWORD PTR [edi+0x58]
c0011b27:	83 c4 20             	add    esp,0x20
c0011b2a:	5b                   	pop    ebx
c0011b2b:	5e                   	pop    esi
c0011b2c:	89 c2                	mov    edx,eax
c0011b2e:	c1 fa 1f             	sar    edx,0x1f
c0011b31:	5f                   	pop    edi
c0011b32:	c3                   	ret    
c0011b33:	5b                   	pop    ebx
c0011b34:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011b39:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011b3e:	5e                   	pop    esi
c0011b3f:	5f                   	pop    edi
c0011b40:	c3                   	ret    

c0011b41 <SysRealpath(regs*)>:
c0011b41:	53                   	push   ebx
c0011b42:	83 ec 08             	sub    esp,0x8
c0011b45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011b49:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0011b4c:	85 c9                	test   ecx,ecx
c0011b4e:	74 36                	je     c0011b86 <SysRealpath(regs*)+0x45>
c0011b50:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0011b53:	31 d2                	xor    edx,edx
c0011b55:	b8 01 00 00 00       	mov    eax,0x1
c0011b5a:	85 db                	test   ebx,ebx
c0011b5c:	75 05                	jne    c0011b63 <SysRealpath(regs*)+0x22>
c0011b5e:	83 c4 08             	add    esp,0x8
c0011b61:	5b                   	pop    ebx
c0011b62:	c3                   	ret    
c0011b63:	6a 00                	push   0x0
c0011b65:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011b6a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011b6d:	05 0c 01 00 00       	add    eax,0x10c
c0011b72:	50                   	push   eax
c0011b73:	51                   	push   ecx
c0011b74:	53                   	push   ebx
c0011b75:	e8 0c 6d ff ff       	call   c0008886 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0011b7a:	83 c4 10             	add    esp,0x10
c0011b7d:	31 c0                	xor    eax,eax
c0011b7f:	31 d2                	xor    edx,edx
c0011b81:	83 c4 08             	add    esp,0x8
c0011b84:	5b                   	pop    ebx
c0011b85:	c3                   	ret    
c0011b86:	b8 01 00 00 00       	mov    eax,0x1
c0011b8b:	31 d2                	xor    edx,edx
c0011b8d:	eb f2                	jmp    c0011b81 <SysRealpath(regs*)+0x40>

c0011b8f <SysReadDir(regs*)>:
c0011b8f:	53                   	push   ebx
c0011b90:	83 ec 18             	sub    esp,0x18
c0011b93:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011b97:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011b9a:	83 f8 02             	cmp    eax,0x2
c0011b9d:	76 4f                	jbe    c0011bee <SysReadDir(regs*)+0x5f>
c0011b9f:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c0011ba6:	77 52                	ja     c0011bfa <SysReadDir(regs*)+0x6b>
c0011ba8:	83 ec 0c             	sub    esp,0xc
c0011bab:	50                   	push   eax
c0011bac:	e8 98 1d 00 00       	call   c0013949 <KeGetFileFromDescriptor(int)>
c0011bb1:	83 c4 10             	add    esp,0x10
c0011bb4:	85 c0                	test   eax,eax
c0011bb6:	74 42                	je     c0011bfa <SysReadDir(regs*)+0x6b>
c0011bb8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011bc0:	83 ec 0c             	sub    esp,0xc
c0011bc3:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0011bc7:	8b 10                	mov    edx,DWORD PTR [eax]
c0011bc9:	51                   	push   ecx
c0011bca:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0011bcd:	51                   	push   ecx
c0011bce:	6a 00                	push   0x0
c0011bd0:	68 10 01 00 00       	push   0x110
c0011bd5:	50                   	push   eax
c0011bd6:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011bd9:	83 c4 20             	add    esp,0x20
c0011bdc:	85 c0                	test   eax,eax
c0011bde:	89 c1                	mov    ecx,eax
c0011be0:	74 27                	je     c0011c09 <SysReadDir(regs*)+0x7a>
c0011be2:	31 d2                	xor    edx,edx
c0011be4:	83 f9 07             	cmp    ecx,0x7
c0011be7:	b8 02 00 00 00       	mov    eax,0x2
c0011bec:	75 16                	jne    c0011c04 <SysReadDir(regs*)+0x75>
c0011bee:	b8 01 00 00 00       	mov    eax,0x1
c0011bf3:	31 d2                	xor    edx,edx
c0011bf5:	83 c4 18             	add    esp,0x18
c0011bf8:	5b                   	pop    ebx
c0011bf9:	c3                   	ret    
c0011bfa:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011bff:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011c04:	83 c4 18             	add    esp,0x18
c0011c07:	5b                   	pop    ebx
c0011c08:	c3                   	ret    
c0011c09:	31 c0                	xor    eax,eax
c0011c0b:	31 d2                	xor    edx,edx
c0011c0d:	eb e6                	jmp    c0011bf5 <SysReadDir(regs*)+0x66>

c0011c0f <SysIsATTY(regs*)>:
c0011c0f:	83 ec 0c             	sub    esp,0xc
c0011c12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011c16:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011c19:	83 f8 02             	cmp    eax,0x2
c0011c1c:	76 07                	jbe    c0011c25 <SysIsATTY(regs*)+0x16>
c0011c1e:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011c23:	75 26                	jne    c0011c4b <SysIsATTY(regs*)+0x3c>
c0011c25:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011c2a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011c2d:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0011c33:	85 c0                	test   eax,eax
c0011c35:	74 24                	je     c0011c5b <SysIsATTY(regs*)+0x4c>
c0011c37:	8b 10                	mov    edx,DWORD PTR [eax]
c0011c39:	83 ec 0c             	sub    esp,0xc
c0011c3c:	50                   	push   eax
c0011c3d:	ff 12                	call   DWORD PTR [edx]
c0011c3f:	83 c4 10             	add    esp,0x10
c0011c42:	31 d2                	xor    edx,edx
c0011c44:	83 c4 0c             	add    esp,0xc
c0011c47:	0f b6 c0             	movzx  eax,al
c0011c4a:	c3                   	ret    
c0011c4b:	83 ec 0c             	sub    esp,0xc
c0011c4e:	50                   	push   eax
c0011c4f:	e8 f5 1c 00 00       	call   c0013949 <KeGetFileFromDescriptor(int)>
c0011c54:	83 c4 10             	add    esp,0x10
c0011c57:	85 c0                	test   eax,eax
c0011c59:	75 dc                	jne    c0011c37 <SysIsATTY(regs*)+0x28>
c0011c5b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011c60:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011c65:	83 c4 0c             	add    esp,0xc
c0011c68:	c3                   	ret    

c0011c69 <SysSeek(regs*)>:
c0011c69:	53                   	push   ebx
c0011c6a:	83 ec 08             	sub    esp,0x8
c0011c6d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011c71:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011c74:	8d 50 fd             	lea    edx,[eax-0x3]
c0011c77:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0011c7d:	77 39                	ja     c0011cb8 <SysSeek(regs*)+0x4f>
c0011c7f:	83 ec 0c             	sub    esp,0xc
c0011c82:	50                   	push   eax
c0011c83:	e8 c1 1c 00 00       	call   c0013949 <KeGetFileFromDescriptor(int)>
c0011c88:	83 c4 10             	add    esp,0x10
c0011c8b:	85 c0                	test   eax,eax
c0011c8d:	74 29                	je     c0011cb8 <SysSeek(regs*)+0x4f>
c0011c8f:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0011c92:	83 ec 04             	sub    esp,0x4
c0011c95:	31 db                	xor    ebx,ebx
c0011c97:	53                   	push   ebx
c0011c98:	51                   	push   ecx
c0011c99:	50                   	push   eax
c0011c9a:	e8 ef 6f ff ff       	call   c0008c8e <File::seek(unsigned long long)>
c0011c9f:	83 c4 10             	add    esp,0x10
c0011ca2:	85 c0                	test   eax,eax
c0011ca4:	0f 95 c0             	setne  al
c0011ca7:	31 d2                	xor    edx,edx
c0011ca9:	0f b6 c0             	movzx  eax,al
c0011cac:	f7 d8                	neg    eax
c0011cae:	83 d2 00             	adc    edx,0x0
c0011cb1:	83 c4 08             	add    esp,0x8
c0011cb4:	5b                   	pop    ebx
c0011cb5:	f7 da                	neg    edx
c0011cb7:	c3                   	ret    
c0011cb8:	83 c4 08             	add    esp,0x8
c0011cbb:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011cc0:	5b                   	pop    ebx
c0011cc1:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011cc6:	c3                   	ret    

c0011cc7 <SysTell(regs*)>:
c0011cc7:	53                   	push   ebx
c0011cc8:	83 ec 08             	sub    esp,0x8
c0011ccb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011ccf:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011cd2:	83 f8 02             	cmp    eax,0x2
c0011cd5:	76 56                	jbe    c0011d2d <SysTell(regs*)+0x66>
c0011cd7:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011cdc:	76 19                	jbe    c0011cf7 <SysTell(regs*)+0x30>
c0011cde:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011ce1:	31 d2                	xor    edx,edx
c0011ce3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011ce9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011cf0:	83 c4 08             	add    esp,0x8
c0011cf3:	31 c0                	xor    eax,eax
c0011cf5:	5b                   	pop    ebx
c0011cf6:	c3                   	ret    
c0011cf7:	83 ec 0c             	sub    esp,0xc
c0011cfa:	50                   	push   eax
c0011cfb:	e8 49 1c 00 00       	call   c0013949 <KeGetFileFromDescriptor(int)>
c0011d00:	83 c4 10             	add    esp,0x10
c0011d03:	85 c0                	test   eax,eax
c0011d05:	74 26                	je     c0011d2d <SysTell(regs*)+0x66>
c0011d07:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011d0a:	83 ec 08             	sub    esp,0x8
c0011d0d:	52                   	push   edx
c0011d0e:	50                   	push   eax
c0011d0f:	e8 26 70 ff ff       	call   c0008d3a <File::tell(unsigned long long*)>
c0011d14:	83 c4 10             	add    esp,0x10
c0011d17:	85 c0                	test   eax,eax
c0011d19:	0f 95 c0             	setne  al
c0011d1c:	31 d2                	xor    edx,edx
c0011d1e:	0f b6 c0             	movzx  eax,al
c0011d21:	f7 d8                	neg    eax
c0011d23:	83 d2 00             	adc    edx,0x0
c0011d26:	83 c4 08             	add    esp,0x8
c0011d29:	5b                   	pop    ebx
c0011d2a:	f7 da                	neg    edx
c0011d2c:	c3                   	ret    
c0011d2d:	83 c4 08             	add    esp,0x8
c0011d30:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011d35:	5b                   	pop    ebx
c0011d36:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011d3b:	c3                   	ret    

c0011d3c <SysSize(regs*)>:
c0011d3c:	53                   	push   ebx
c0011d3d:	83 ec 18             	sub    esp,0x18
c0011d40:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011d44:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011d47:	83 f8 02             	cmp    eax,0x2
c0011d4a:	76 5b                	jbe    c0011da7 <SysSize(regs*)+0x6b>
c0011d4c:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011d51:	76 19                	jbe    c0011d6c <SysSize(regs*)+0x30>
c0011d53:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011d56:	31 d2                	xor    edx,edx
c0011d58:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011d5e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011d65:	83 c4 18             	add    esp,0x18
c0011d68:	31 c0                	xor    eax,eax
c0011d6a:	5b                   	pop    ebx
c0011d6b:	c3                   	ret    
c0011d6c:	83 ec 0c             	sub    esp,0xc
c0011d6f:	50                   	push   eax
c0011d70:	e8 d4 1b 00 00       	call   c0013949 <KeGetFileFromDescriptor(int)>
c0011d75:	83 c4 10             	add    esp,0x10
c0011d78:	85 c0                	test   eax,eax
c0011d7a:	74 2b                	je     c0011da7 <SysSize(regs*)+0x6b>
c0011d7c:	83 ec 04             	sub    esp,0x4
c0011d7f:	8d 54 24 13          	lea    edx,[esp+0x13]
c0011d83:	52                   	push   edx
c0011d84:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011d87:	52                   	push   edx
c0011d88:	50                   	push   eax
c0011d89:	e8 44 71 ff ff       	call   c0008ed2 <File::stat(unsigned long long*, bool*)>
c0011d8e:	83 c4 10             	add    esp,0x10
c0011d91:	85 c0                	test   eax,eax
c0011d93:	0f 95 c0             	setne  al
c0011d96:	31 d2                	xor    edx,edx
c0011d98:	0f b6 c0             	movzx  eax,al
c0011d9b:	f7 d8                	neg    eax
c0011d9d:	83 d2 00             	adc    edx,0x0
c0011da0:	83 c4 18             	add    esp,0x18
c0011da3:	5b                   	pop    ebx
c0011da4:	f7 da                	neg    edx
c0011da6:	c3                   	ret    
c0011da7:	83 c4 18             	add    esp,0x18
c0011daa:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011daf:	5b                   	pop    ebx
c0011db0:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011db5:	c3                   	ret    

c0011db6 <SysSizeFromFilename(regs*)>:
c0011db6:	55                   	push   ebp
c0011db7:	57                   	push   edi
c0011db8:	56                   	push   esi
c0011db9:	53                   	push   ebx
c0011dba:	81 ec 4c 02 00 00    	sub    esp,0x24c
c0011dc0:	8b 9c 24 60 02 00 00 	mov    ebx,DWORD PTR [esp+0x260]
c0011dc7:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0011dca:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0011dcd:	85 f6                	test   esi,esi
c0011dcf:	89 f8                	mov    eax,edi
c0011dd1:	74 09                	je     c0011ddc <SysSizeFromFilename(regs*)+0x26>
c0011dd3:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0011dd9:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011ddc:	83 f8 02             	cmp    eax,0x2
c0011ddf:	0f 86 c9 00 00 00    	jbe    c0011eae <SysSizeFromFilename(regs*)+0xf8>
c0011de5:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011dea:	76 1f                	jbe    c0011e0b <SysSizeFromFilename(regs*)+0x55>
c0011dec:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011def:	31 d2                	xor    edx,edx
c0011df1:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011df7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011dfe:	31 c0                	xor    eax,eax
c0011e00:	81 c4 4c 02 00 00    	add    esp,0x24c
c0011e06:	5b                   	pop    ebx
c0011e07:	5e                   	pop    esi
c0011e08:	5f                   	pop    edi
c0011e09:	5d                   	pop    ebp
c0011e0a:	c3                   	ret    
c0011e0b:	83 ec 0c             	sub    esp,0xc
c0011e0e:	68 14 01 00 00       	push   0x114
c0011e13:	e8 f4 e2 ff ff       	call   c001010c <malloc>
c0011e18:	6a 01                	push   0x1
c0011e1a:	89 c5                	mov    ebp,eax
c0011e1c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011e21:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011e24:	50                   	push   eax
c0011e25:	57                   	push   edi
c0011e26:	55                   	push   ebp
c0011e27:	e8 88 6c ff ff       	call   c0008ab4 <File::File(char const*, Process*, bool)>
c0011e2c:	83 c4 20             	add    esp,0x20
c0011e2f:	85 ed                	test   ebp,ebp
c0011e31:	74 7b                	je     c0011eae <SysSizeFromFilename(regs*)+0xf8>
c0011e33:	83 ec 04             	sub    esp,0x4
c0011e36:	8d 44 24 13          	lea    eax,[esp+0x13]
c0011e3a:	50                   	push   eax
c0011e3b:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0011e3e:	51                   	push   ecx
c0011e3f:	55                   	push   ebp
c0011e40:	e8 8d 70 ff ff       	call   c0008ed2 <File::stat(unsigned long long*, bool*)>
c0011e45:	89 c3                	mov    ebx,eax
c0011e47:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0011e4a:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0011e4d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011e50:	83 c4 10             	add    esp,0x10
c0011e53:	85 db                	test   ebx,ebx
c0011e55:	75 57                	jne    c0011eae <SysSizeFromFilename(regs*)+0xf8>
c0011e57:	6a 00                	push   0x0
c0011e59:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011e5e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011e61:	05 0c 01 00 00       	add    eax,0x10c
c0011e66:	50                   	push   eax
c0011e67:	57                   	push   edi
c0011e68:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c0011e6f:	53                   	push   ebx
c0011e70:	e8 11 6a ff ff       	call   c0008886 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0011e75:	58                   	pop    eax
c0011e76:	5a                   	pop    edx
c0011e77:	8d 44 24 18          	lea    eax,[esp+0x18]
c0011e7b:	50                   	push   eax
c0011e7c:	53                   	push   ebx
c0011e7d:	e8 8a 64 ff ff       	call   c000830c <KeDereferenceSymlink(char const*, char*)>
c0011e82:	83 c4 10             	add    esp,0x10
c0011e85:	ba 00 00 00 00       	mov    edx,0x0
c0011e8a:	83 f8 01             	cmp    eax,0x1
c0011e8d:	b8 00 00 00 00       	mov    eax,0x0
c0011e92:	74 2f                	je     c0011ec3 <SysSizeFromFilename(regs*)+0x10d>
c0011e94:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011e99:	74 3b                	je     c0011ed6 <SysSizeFromFilename(regs*)+0x120>
c0011e9b:	85 f6                	test   esi,esi
c0011e9d:	0f 84 5d ff ff ff    	je     c0011e00 <SysSizeFromFilename(regs*)+0x4a>
c0011ea3:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0011ea9:	e9 52 ff ff ff       	jmp    c0011e00 <SysSizeFromFilename(regs*)+0x4a>
c0011eae:	81 c4 4c 02 00 00    	add    esp,0x24c
c0011eb4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011eb9:	5b                   	pop    ebx
c0011eba:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011ebf:	5e                   	pop    esi
c0011ec0:	5f                   	pop    edi
c0011ec1:	5d                   	pop    ebp
c0011ec2:	c3                   	ret    
c0011ec3:	85 f6                	test   esi,esi
c0011ec5:	0f 84 35 ff ff ff    	je     c0011e00 <SysSizeFromFilename(regs*)+0x4a>
c0011ecb:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c0011ed1:	e9 2a ff ff ff       	jmp    c0011e00 <SysSizeFromFilename(regs*)+0x4a>
c0011ed6:	85 f6                	test   esi,esi
c0011ed8:	0f 84 22 ff ff ff    	je     c0011e00 <SysSizeFromFilename(regs*)+0x4a>
c0011ede:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0011ee4:	e9 17 ff ff ff       	jmp    c0011e00 <SysSizeFromFilename(regs*)+0x4a>

c0011ee9 <SysSizeFromFilenameNoSymlink(regs*)>:
c0011ee9:	55                   	push   ebp
c0011eea:	57                   	push   edi
c0011eeb:	56                   	push   esi
c0011eec:	53                   	push   ebx
c0011eed:	81 ec 4c 02 00 00    	sub    esp,0x24c
c0011ef3:	8b 9c 24 60 02 00 00 	mov    ebx,DWORD PTR [esp+0x260]
c0011efa:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0011efd:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0011f00:	85 f6                	test   esi,esi
c0011f02:	89 f8                	mov    eax,edi
c0011f04:	74 09                	je     c0011f0f <SysSizeFromFilenameNoSymlink(regs*)+0x26>
c0011f06:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0011f0c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011f0f:	83 f8 02             	cmp    eax,0x2
c0011f12:	0f 86 c9 00 00 00    	jbe    c0011fe1 <SysSizeFromFilenameNoSymlink(regs*)+0xf8>
c0011f18:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011f1d:	76 1f                	jbe    c0011f3e <SysSizeFromFilenameNoSymlink(regs*)+0x55>
c0011f1f:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011f22:	31 d2                	xor    edx,edx
c0011f24:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011f2a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011f31:	31 c0                	xor    eax,eax
c0011f33:	81 c4 4c 02 00 00    	add    esp,0x24c
c0011f39:	5b                   	pop    ebx
c0011f3a:	5e                   	pop    esi
c0011f3b:	5f                   	pop    edi
c0011f3c:	5d                   	pop    ebp
c0011f3d:	c3                   	ret    
c0011f3e:	83 ec 0c             	sub    esp,0xc
c0011f41:	68 14 01 00 00       	push   0x114
c0011f46:	e8 c1 e1 ff ff       	call   c001010c <malloc>
c0011f4b:	6a 00                	push   0x0
c0011f4d:	89 c5                	mov    ebp,eax
c0011f4f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011f54:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011f57:	50                   	push   eax
c0011f58:	57                   	push   edi
c0011f59:	55                   	push   ebp
c0011f5a:	e8 55 6b ff ff       	call   c0008ab4 <File::File(char const*, Process*, bool)>
c0011f5f:	83 c4 20             	add    esp,0x20
c0011f62:	85 ed                	test   ebp,ebp
c0011f64:	74 7b                	je     c0011fe1 <SysSizeFromFilenameNoSymlink(regs*)+0xf8>
c0011f66:	83 ec 04             	sub    esp,0x4
c0011f69:	8d 44 24 13          	lea    eax,[esp+0x13]
c0011f6d:	50                   	push   eax
c0011f6e:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0011f71:	51                   	push   ecx
c0011f72:	55                   	push   ebp
c0011f73:	e8 5a 6f ff ff       	call   c0008ed2 <File::stat(unsigned long long*, bool*)>
c0011f78:	89 c3                	mov    ebx,eax
c0011f7a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0011f7d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0011f80:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011f83:	83 c4 10             	add    esp,0x10
c0011f86:	85 db                	test   ebx,ebx
c0011f88:	75 57                	jne    c0011fe1 <SysSizeFromFilenameNoSymlink(regs*)+0xf8>
c0011f8a:	6a 00                	push   0x0
c0011f8c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011f91:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011f94:	05 0c 01 00 00       	add    eax,0x10c
c0011f99:	50                   	push   eax
c0011f9a:	57                   	push   edi
c0011f9b:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c0011fa2:	53                   	push   ebx
c0011fa3:	e8 de 68 ff ff       	call   c0008886 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0011fa8:	58                   	pop    eax
c0011fa9:	5a                   	pop    edx
c0011faa:	8d 44 24 18          	lea    eax,[esp+0x18]
c0011fae:	50                   	push   eax
c0011faf:	53                   	push   ebx
c0011fb0:	e8 57 63 ff ff       	call   c000830c <KeDereferenceSymlink(char const*, char*)>
c0011fb5:	83 c4 10             	add    esp,0x10
c0011fb8:	ba 00 00 00 00       	mov    edx,0x0
c0011fbd:	83 f8 01             	cmp    eax,0x1
c0011fc0:	b8 00 00 00 00       	mov    eax,0x0
c0011fc5:	74 2f                	je     c0011ff6 <SysSizeFromFilenameNoSymlink(regs*)+0x10d>
c0011fc7:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011fcc:	74 3b                	je     c0012009 <SysSizeFromFilenameNoSymlink(regs*)+0x120>
c0011fce:	85 f6                	test   esi,esi
c0011fd0:	0f 84 5d ff ff ff    	je     c0011f33 <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c0011fd6:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0011fdc:	e9 52 ff ff ff       	jmp    c0011f33 <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c0011fe1:	81 c4 4c 02 00 00    	add    esp,0x24c
c0011fe7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011fec:	5b                   	pop    ebx
c0011fed:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011ff2:	5e                   	pop    esi
c0011ff3:	5f                   	pop    edi
c0011ff4:	5d                   	pop    ebp
c0011ff5:	c3                   	ret    
c0011ff6:	85 f6                	test   esi,esi
c0011ff8:	0f 84 35 ff ff ff    	je     c0011f33 <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c0011ffe:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c0012004:	e9 2a ff ff ff       	jmp    c0011f33 <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c0012009:	85 f6                	test   esi,esi
c001200b:	0f 84 22 ff ff ff    	je     c0011f33 <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c0012011:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0012017:	e9 17 ff ff ff       	jmp    c0011f33 <SysSizeFromFilenameNoSymlink(regs*)+0x4a>

c001201c <SysClose(regs*)>:
c001201c:	57                   	push   edi
c001201d:	56                   	push   esi
c001201e:	53                   	push   ebx
c001201f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012023:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0012026:	83 f8 02             	cmp    eax,0x2
c0012029:	76 44                	jbe    c001206f <SysClose(regs*)+0x53>
c001202b:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c0012031:	31 f6                	xor    esi,esi
c0012033:	31 ff                	xor    edi,edi
c0012035:	83 fa 01             	cmp    edx,0x1
c0012038:	76 2d                	jbe    c0012067 <SysClose(regs*)+0x4b>
c001203a:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001203f:	77 2e                	ja     c001206f <SysClose(regs*)+0x53>
c0012041:	83 ec 0c             	sub    esp,0xc
c0012044:	50                   	push   eax
c0012045:	e8 ff 18 00 00       	call   c0013949 <KeGetFileFromDescriptor(int)>
c001204a:	83 c4 10             	add    esp,0x10
c001204d:	85 c0                	test   eax,eax
c001204f:	89 c3                	mov    ebx,eax
c0012051:	74 1c                	je     c001206f <SysClose(regs*)+0x53>
c0012053:	83 ec 0c             	sub    esp,0xc
c0012056:	50                   	push   eax
c0012057:	e8 d2 6b ff ff       	call   c0008c2e <File::close()>
c001205c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001205e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012061:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012064:	83 c4 10             	add    esp,0x10
c0012067:	5b                   	pop    ebx
c0012068:	89 f0                	mov    eax,esi
c001206a:	89 fa                	mov    edx,edi
c001206c:	5e                   	pop    esi
c001206d:	5f                   	pop    edi
c001206e:	c3                   	ret    
c001206f:	5b                   	pop    ebx
c0012070:	be ff ff ff ff       	mov    esi,0xffffffff
c0012075:	89 f0                	mov    eax,esi
c0012077:	bf ff ff ff ff       	mov    edi,0xffffffff
c001207c:	89 fa                	mov    edx,edi
c001207e:	5e                   	pop    esi
c001207f:	5f                   	pop    edi
c0012080:	c3                   	ret    

c0012081 <SysOpenDir(regs*)>:
c0012081:	56                   	push   esi
c0012082:	53                   	push   ebx
c0012083:	83 ec 04             	sub    esp,0x4
c0012086:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001208a:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001208d:	85 c9                	test   ecx,ecx
c001208f:	74 5d                	je     c00120ee <SysOpenDir(regs*)+0x6d>
c0012091:	83 ec 0c             	sub    esp,0xc
c0012094:	68 14 01 00 00       	push   0x114
c0012099:	e8 6e e0 ff ff       	call   c001010c <malloc>
c001209e:	83 c4 0c             	add    esp,0xc
c00120a1:	89 c6                	mov    esi,eax
c00120a3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00120a8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00120ab:	50                   	push   eax
c00120ac:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00120af:	52                   	push   edx
c00120b0:	56                   	push   esi
c00120b1:	e8 dc 6f ff ff       	call   c0009092 <Directory::Directory(char const*, Process*)>
c00120b6:	83 c4 10             	add    esp,0x10
c00120b9:	85 f6                	test   esi,esi
c00120bb:	74 31                	je     c00120ee <SysOpenDir(regs*)+0x6d>
c00120bd:	83 ec 0c             	sub    esp,0xc
c00120c0:	56                   	push   esi
c00120c1:	e8 94 70 ff ff       	call   c000915a <Directory::open()>
c00120c6:	83 c4 10             	add    esp,0x10
c00120c9:	85 c0                	test   eax,eax
c00120cb:	75 21                	jne    c00120ee <SysOpenDir(regs*)+0x6d>
c00120cd:	83 ec 0c             	sub    esp,0xc
c00120d0:	56                   	push   esi
c00120d1:	e8 76 15 00 00       	call   c001364c <UnixFile::getFileDescriptor()>
c00120d6:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00120d9:	83 c4 10             	add    esp,0x10
c00120dc:	89 02                	mov    DWORD PTR [edx],eax
c00120de:	c1 f8 1f             	sar    eax,0x1f
c00120e1:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00120e4:	83 c4 04             	add    esp,0x4
c00120e7:	31 c0                	xor    eax,eax
c00120e9:	5b                   	pop    ebx
c00120ea:	31 d2                	xor    edx,edx
c00120ec:	5e                   	pop    esi
c00120ed:	c3                   	ret    
c00120ee:	83 c4 04             	add    esp,0x4
c00120f1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00120f6:	5b                   	pop    ebx
c00120f7:	ba ff ff ff ff       	mov    edx,0xffffffff
c00120fc:	5e                   	pop    esi
c00120fd:	c3                   	ret    

c00120fe <SysMakeDir(regs*)>:
c00120fe:	56                   	push   esi
c00120ff:	53                   	push   ebx
c0012100:	83 ec 10             	sub    esp,0x10
c0012103:	68 14 01 00 00       	push   0x114
c0012108:	e8 ff df ff ff       	call   c001010c <malloc>
c001210d:	83 c4 0c             	add    esp,0xc
c0012110:	89 c3                	mov    ebx,eax
c0012112:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012117:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001211a:	50                   	push   eax
c001211b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001211f:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0012122:	52                   	push   edx
c0012123:	53                   	push   ebx
c0012124:	e8 69 6f ff ff       	call   c0009092 <Directory::Directory(char const*, Process*)>
c0012129:	83 c4 10             	add    esp,0x10
c001212c:	85 db                	test   ebx,ebx
c001212e:	74 2c                	je     c001215c <SysMakeDir(regs*)+0x5e>
c0012130:	83 ec 0c             	sub    esp,0xc
c0012133:	53                   	push   ebx
c0012134:	e8 01 72 ff ff       	call   c000933a <Directory::create()>
c0012139:	89 c6                	mov    esi,eax
c001213b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001213d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012140:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012143:	83 c4 10             	add    esp,0x10
c0012146:	31 c0                	xor    eax,eax
c0012148:	85 f6                	test   esi,esi
c001214a:	0f 95 c0             	setne  al
c001214d:	31 d2                	xor    edx,edx
c001214f:	f7 d8                	neg    eax
c0012151:	83 d2 00             	adc    edx,0x0
c0012154:	83 c4 04             	add    esp,0x4
c0012157:	5b                   	pop    ebx
c0012158:	f7 da                	neg    edx
c001215a:	5e                   	pop    esi
c001215b:	c3                   	ret    
c001215c:	83 c4 04             	add    esp,0x4
c001215f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012164:	5b                   	pop    ebx
c0012165:	ba ff ff ff ff       	mov    edx,0xffffffff
c001216a:	5e                   	pop    esi
c001216b:	c3                   	ret    

c001216c <SysCloseDir(regs*)>:
c001216c:	53                   	push   ebx
c001216d:	83 ec 08             	sub    esp,0x8
c0012170:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012174:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0012177:	8d 50 fd             	lea    edx,[eax-0x3]
c001217a:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0012180:	77 2f                	ja     c00121b1 <SysCloseDir(regs*)+0x45>
c0012182:	83 ec 0c             	sub    esp,0xc
c0012185:	50                   	push   eax
c0012186:	e8 be 17 00 00       	call   c0013949 <KeGetFileFromDescriptor(int)>
c001218b:	83 c4 10             	add    esp,0x10
c001218e:	85 c0                	test   eax,eax
c0012190:	89 c3                	mov    ebx,eax
c0012192:	74 1d                	je     c00121b1 <SysCloseDir(regs*)+0x45>
c0012194:	83 ec 0c             	sub    esp,0xc
c0012197:	50                   	push   eax
c0012198:	e8 19 70 ff ff       	call   c00091b6 <Directory::close()>
c001219d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001219f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00121a2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00121a5:	83 c4 10             	add    esp,0x10
c00121a8:	31 c0                	xor    eax,eax
c00121aa:	83 c4 08             	add    esp,0x8
c00121ad:	31 d2                	xor    edx,edx
c00121af:	5b                   	pop    ebx
c00121b0:	c3                   	ret    
c00121b1:	83 c4 08             	add    esp,0x8
c00121b4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00121b9:	5b                   	pop    ebx
c00121ba:	ba ff ff ff ff       	mov    edx,0xffffffff
c00121bf:	c3                   	ret    

c00121c0 <SysWait(regs*)>:
c00121c0:	83 ec 10             	sub    esp,0x10
c00121c3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00121c7:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00121ca:	52                   	push   edx
c00121cb:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c00121ce:	51                   	push   ecx
c00121cf:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00121d2:	50                   	push   eax
c00121d3:	e8 0c 50 00 00       	call   c00171e4 <waitTask(int, int*, int)>
c00121d8:	83 c4 1c             	add    esp,0x1c
c00121db:	89 c2                	mov    edx,eax
c00121dd:	c1 fa 1f             	sar    edx,0x1f
c00121e0:	c3                   	ret    

c00121e1 <SysNotImpl(regs*)>:
c00121e1:	83 ec 18             	sub    esp,0x18
c00121e4:	68 4f b9 02 c0       	push   0xc002b94f
c00121e9:	e8 72 e3 ff ff       	call   c0010560 <KePanic(char const*)>
c00121ee:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00121f3:	ba ff ff ff ff       	mov    edx,0xffffffff
c00121f8:	83 c4 1c             	add    esp,0x1c
c00121fb:	c3                   	ret    

c00121fc <SysPanic(regs*)>:
c00121fc:	83 ec 18             	sub    esp,0x18
c00121ff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012203:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0012206:	50                   	push   eax
c0012207:	e8 54 e3 ff ff       	call   c0010560 <KePanic(char const*)>
c001220c:	b8 01 00 00 00       	mov    eax,0x1
c0012211:	31 d2                	xor    edx,edx
c0012213:	83 c4 1c             	add    esp,0x1c
c0012216:	c3                   	ret    

c0012217 <SysRmdir(regs*)>:
c0012217:	56                   	push   esi
c0012218:	53                   	push   ebx
c0012219:	83 ec 10             	sub    esp,0x10
c001221c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012220:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0012223:	68 14 01 00 00       	push   0x114
c0012228:	e8 df de ff ff       	call   c001010c <malloc>
c001222d:	6a 00                	push   0x0
c001222f:	89 c3                	mov    ebx,eax
c0012231:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012236:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0012239:	50                   	push   eax
c001223a:	56                   	push   esi
c001223b:	53                   	push   ebx
c001223c:	e8 73 68 ff ff       	call   c0008ab4 <File::File(char const*, Process*, bool)>
c0012241:	83 c4 14             	add    esp,0x14
c0012244:	53                   	push   ebx
c0012245:	e8 54 6b ff ff       	call   c0008d9e <File::unlink()>
c001224a:	83 c4 10             	add    esp,0x10
c001224d:	85 db                	test   ebx,ebx
c001224f:	89 c6                	mov    esi,eax
c0012251:	74 0c                	je     c001225f <SysRmdir(regs*)+0x48>
c0012253:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012255:	83 ec 0c             	sub    esp,0xc
c0012258:	53                   	push   ebx
c0012259:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001225c:	83 c4 10             	add    esp,0x10
c001225f:	31 c0                	xor    eax,eax
c0012261:	85 f6                	test   esi,esi
c0012263:	0f 95 c0             	setne  al
c0012266:	31 d2                	xor    edx,edx
c0012268:	f7 d8                	neg    eax
c001226a:	83 d2 00             	adc    edx,0x0
c001226d:	83 c4 04             	add    esp,0x4
c0012270:	5b                   	pop    ebx
c0012271:	f7 da                	neg    edx
c0012273:	5e                   	pop    esi
c0012274:	c3                   	ret    

c0012275 <SysUnlink(regs*)>:
c0012275:	56                   	push   esi
c0012276:	53                   	push   ebx
c0012277:	83 ec 10             	sub    esp,0x10
c001227a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001227e:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0012281:	68 14 01 00 00       	push   0x114
c0012286:	e8 81 de ff ff       	call   c001010c <malloc>
c001228b:	6a 00                	push   0x0
c001228d:	89 c3                	mov    ebx,eax
c001228f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012294:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0012297:	50                   	push   eax
c0012298:	56                   	push   esi
c0012299:	53                   	push   ebx
c001229a:	e8 15 68 ff ff       	call   c0008ab4 <File::File(char const*, Process*, bool)>
c001229f:	83 c4 14             	add    esp,0x14
c00122a2:	53                   	push   ebx
c00122a3:	e8 f6 6a ff ff       	call   c0008d9e <File::unlink()>
c00122a8:	83 c4 10             	add    esp,0x10
c00122ab:	85 db                	test   ebx,ebx
c00122ad:	89 c6                	mov    esi,eax
c00122af:	74 0c                	je     c00122bd <SysUnlink(regs*)+0x48>
c00122b1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00122b3:	83 ec 0c             	sub    esp,0xc
c00122b6:	53                   	push   ebx
c00122b7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00122ba:	83 c4 10             	add    esp,0x10
c00122bd:	31 c0                	xor    eax,eax
c00122bf:	85 f6                	test   esi,esi
c00122c1:	0f 95 c0             	setne  al
c00122c4:	31 d2                	xor    edx,edx
c00122c6:	f7 d8                	neg    eax
c00122c8:	83 d2 00             	adc    edx,0x0
c00122cb:	83 c4 04             	add    esp,0x4
c00122ce:	5b                   	pop    ebx
c00122cf:	f7 da                	neg    edx
c00122d1:	5e                   	pop    esi
c00122d2:	c3                   	ret    

c00122d3 <SysGetArgv(regs*)>:
c00122d3:	83 ec 0c             	sub    esp,0xc
c00122d6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00122da:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00122dd:	85 c0                	test   eax,eax
c00122df:	78 2c                	js     c001230d <SysGetArgv(regs*)+0x3a>
c00122e1:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00122e7:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c00122ea:	3b 81 b6 05 00 00    	cmp    eax,DWORD PTR [ecx+0x5b6]
c00122f0:	7d 1b                	jge    c001230d <SysGetArgv(regs*)+0x3a>
c00122f2:	8b 84 81 ba 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x5ba]
c00122f9:	85 c0                	test   eax,eax
c00122fb:	74 18                	je     c0012315 <SysGetArgv(regs*)+0x42>
c00122fd:	83 ec 08             	sub    esp,0x8
c0012300:	50                   	push   eax
c0012301:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c0012304:	50                   	push   eax
c0012305:	e8 46 e3 fe ff       	call   c0000650 <strcpy>
c001230a:	83 c4 10             	add    esp,0x10
c001230d:	31 c0                	xor    eax,eax
c001230f:	31 d2                	xor    edx,edx
c0012311:	83 c4 0c             	add    esp,0xc
c0012314:	c3                   	ret    
c0012315:	b8 01 00 00 00       	mov    eax,0x1
c001231a:	31 d2                	xor    edx,edx
c001231c:	83 c4 0c             	add    esp,0xc
c001231f:	c3                   	ret    

c0012320 <SysUSleep(regs*)>:
c0012320:	83 ec 1c             	sub    esp,0x1c
c0012323:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0012327:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c001232a:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001232d:	6a 00                	push   0x0
c001232f:	6a 64                	push   0x64
c0012331:	52                   	push   edx
c0012332:	50                   	push   eax
c0012333:	e8 9c 1f 01 00       	call   c00242d4 <__udivdi3>
c0012338:	83 c4 18             	add    esp,0x18
c001233b:	52                   	push   edx
c001233c:	50                   	push   eax
c001233d:	e8 9a 4f 00 00       	call   c00172dc <milliTenthSleep(unsigned long long)>
c0012342:	31 c0                	xor    eax,eax
c0012344:	31 d2                	xor    edx,edx
c0012346:	83 c4 1c             	add    esp,0x1c
c0012349:	c3                   	ret    

c001234a <SysSpawn(regs*)>:
c001234a:	56                   	push   esi
c001234b:	53                   	push   ebx
c001234c:	83 ec 04             	sub    esp,0x4
c001234f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012353:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0012356:	85 f6                	test   esi,esi
c0012358:	75 0a                	jne    c0012364 <SysSpawn(regs*)+0x1a>
c001235a:	83 c4 04             	add    esp,0x4
c001235d:	31 c0                	xor    eax,eax
c001235f:	5b                   	pop    ebx
c0012360:	31 d2                	xor    edx,edx
c0012362:	5e                   	pop    esi
c0012363:	c3                   	ret    
c0012364:	83 ec 0c             	sub    esp,0xc
c0012367:	68 c4 07 00 00       	push   0x7c4
c001236c:	e8 9b dd ff ff       	call   c001010c <malloc>
c0012371:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0012374:	83 c4 10             	add    esp,0x10
c0012377:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001237a:	89 c6                	mov    esi,eax
c001237c:	31 c0                	xor    eax,eax
c001237e:	85 c9                	test   ecx,ecx
c0012380:	74 08                	je     c001238a <SysSpawn(regs*)+0x40>
c0012382:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012387:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001238a:	52                   	push   edx
c001238b:	50                   	push   eax
c001238c:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001238f:	50                   	push   eax
c0012390:	56                   	push   esi
c0012391:	e8 26 46 00 00       	call   c00169bc <Process::Process(char const*, Process*, char**)>
c0012396:	83 c4 10             	add    esp,0x10
c0012399:	80 be be 07 00 00 00 	cmp    BYTE PTR [esi+0x7be],0x0
c00123a0:	75 b8                	jne    c001235a <SysSpawn(regs*)+0x10>
c00123a2:	83 ec 0c             	sub    esp,0xc
c00123a5:	56                   	push   esi
c00123a6:	e8 d5 4b 00 00       	call   c0016f80 <Process::createUserThread()>
c00123ab:	8b 06                	mov    eax,DWORD PTR [esi]
c00123ad:	83 c4 10             	add    esp,0x10
c00123b0:	83 c4 04             	add    esp,0x4
c00123b3:	5b                   	pop    ebx
c00123b4:	89 c2                	mov    edx,eax
c00123b6:	c1 fa 1f             	sar    edx,0x1f
c00123b9:	5e                   	pop    esi
c00123ba:	c3                   	ret    

c00123bb <SysGetEnv(regs*)>:
c00123bb:	57                   	push   edi
c00123bc:	56                   	push   esi
c00123bd:	53                   	push   ebx
c00123be:	83 ec 1c             	sub    esp,0x1c
c00123c1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00123c6:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00123ca:	8b 48 40             	mov    ecx,DWORD PTR [eax+0x40]
c00123cd:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c00123d0:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00123d3:	51                   	push   ecx
c00123d4:	e8 26 cc ff ff       	call   c000efff <KeGetProcessTotalEnvCount(Process*)>
c00123d9:	83 c4 10             	add    esp,0x10
c00123dc:	39 c7                	cmp    edi,eax
c00123de:	7c 12                	jl     c00123f2 <SysGetEnv(regs*)+0x37>
c00123e0:	31 c0                	xor    eax,eax
c00123e2:	31 d2                	xor    edx,edx
c00123e4:	85 f6                	test   esi,esi
c00123e6:	74 03                	je     c00123eb <SysGetEnv(regs*)+0x30>
c00123e8:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00123eb:	83 c4 10             	add    esp,0x10
c00123ee:	5b                   	pop    ebx
c00123ef:	5e                   	pop    esi
c00123f0:	5f                   	pop    edi
c00123f1:	c3                   	ret    
c00123f2:	8d 44 24 08          	lea    eax,[esp+0x8]
c00123f6:	83 ec 04             	sub    esp,0x4
c00123f9:	57                   	push   edi
c00123fa:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0012400:	8b 7a 40             	mov    edi,DWORD PTR [edx+0x40]
c0012403:	57                   	push   edi
c0012404:	50                   	push   eax
c0012405:	e8 15 cc ff ff       	call   c000f01f <KeGetProcessEnvPair(Process*, int)>
c001240a:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001240d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012411:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0012415:	83 c4 0c             	add    esp,0xc
c0012418:	85 d2                	test   edx,edx
c001241a:	75 23                	jne    c001243f <SysGetEnv(regs*)+0x84>
c001241c:	83 ec 0c             	sub    esp,0xc
c001241f:	50                   	push   eax
c0012420:	e8 5b e1 fe ff       	call   c0000580 <strlen>
c0012425:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012428:	89 c3                	mov    ebx,eax
c001242a:	e8 51 e1 fe ff       	call   c0000580 <strlen>
c001242f:	83 c4 10             	add    esp,0x10
c0012432:	31 d2                	xor    edx,edx
c0012434:	83 c4 10             	add    esp,0x10
c0012437:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001243b:	5b                   	pop    ebx
c001243c:	5e                   	pop    esi
c001243d:	5f                   	pop    edi
c001243e:	c3                   	ret    
c001243f:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012442:	83 ec 08             	sub    esp,0x8
c0012445:	50                   	push   eax
c0012446:	56                   	push   esi
c0012447:	e8 04 e2 fe ff       	call   c0000650 <strcpy>
c001244c:	58                   	pop    eax
c001244d:	5a                   	pop    edx
c001244e:	68 69 b9 02 c0       	push   0xc002b969
c0012453:	56                   	push   esi
c0012454:	e8 17 e4 fe ff       	call   c0000870 <strcat>
c0012459:	59                   	pop    ecx
c001245a:	5b                   	pop    ebx
c001245b:	57                   	push   edi
c001245c:	56                   	push   esi
c001245d:	e8 0e e4 fe ff       	call   c0000870 <strcat>
c0012462:	83 c4 10             	add    esp,0x10
c0012465:	31 c0                	xor    eax,eax
c0012467:	83 c4 10             	add    esp,0x10
c001246a:	31 d2                	xor    edx,edx
c001246c:	5b                   	pop    ebx
c001246d:	5e                   	pop    esi
c001246e:	5f                   	pop    edi
c001246f:	c3                   	ret    

c0012470 <SysSetFatAttrib(regs*)>:
c0012470:	57                   	push   edi
c0012471:	56                   	push   esi
c0012472:	53                   	push   ebx
c0012473:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012477:	83 ec 0c             	sub    esp,0xc
c001247a:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001247d:	68 14 01 00 00       	push   0x114
c0012482:	e8 85 dc ff ff       	call   c001010c <malloc>
c0012487:	83 c4 0c             	add    esp,0xc
c001248a:	89 c3                	mov    ebx,eax
c001248c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012491:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0012494:	50                   	push   eax
c0012495:	57                   	push   edi
c0012496:	53                   	push   ebx
c0012497:	e8 16 67 ff ff       	call   c0008bb2 <File::File(char const*, Process*)>
c001249c:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001249f:	83 c4 0c             	add    esp,0xc
c00124a2:	0f b6 d4             	movzx  edx,ah
c00124a5:	0f b6 c0             	movzx  eax,al
c00124a8:	52                   	push   edx
c00124a9:	50                   	push   eax
c00124aa:	53                   	push   ebx
c00124ab:	e8 88 69 ff ff       	call   c0008e38 <File::chfatattr(unsigned char, unsigned char)>
c00124b0:	83 c4 10             	add    esp,0x10
c00124b3:	85 db                	test   ebx,ebx
c00124b5:	89 c6                	mov    esi,eax
c00124b7:	74 0c                	je     c00124c5 <SysSetFatAttrib(regs*)+0x55>
c00124b9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00124bb:	83 ec 0c             	sub    esp,0xc
c00124be:	53                   	push   ebx
c00124bf:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00124c2:	83 c4 10             	add    esp,0x10
c00124c5:	5b                   	pop    ebx
c00124c6:	31 c0                	xor    eax,eax
c00124c8:	85 f6                	test   esi,esi
c00124ca:	0f 95 c0             	setne  al
c00124cd:	31 d2                	xor    edx,edx
c00124cf:	5e                   	pop    esi
c00124d0:	f7 d8                	neg    eax
c00124d2:	83 d2 00             	adc    edx,0x0
c00124d5:	f7 da                	neg    edx
c00124d7:	5f                   	pop    edi
c00124d8:	c3                   	ret    

c00124d9 <SysShutdown(regs*)>:
c00124d9:	83 ec 1c             	sub    esp,0x1c
c00124dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00124e0:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c00124e3:	85 c9                	test   ecx,ecx
c00124e5:	74 18                	je     c00124ff <SysShutdown(regs*)+0x26>
c00124e7:	83 f9 01             	cmp    ecx,0x1
c00124ea:	74 26                	je     c0012512 <SysShutdown(regs*)+0x39>
c00124ec:	83 f9 02             	cmp    ecx,0x2
c00124ef:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00124f4:	ba ff ff ff ff       	mov    edx,0xffffffff
c00124f9:	74 24                	je     c001251f <SysShutdown(regs*)+0x46>
c00124fb:	83 c4 1c             	add    esp,0x1c
c00124fe:	c3                   	ret    
c00124ff:	e8 aa e9 ff ff       	call   c0010eae <KeShutdown()>
c0012504:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012509:	ba ff ff ff ff       	mov    edx,0xffffffff
c001250e:	83 c4 1c             	add    esp,0x1c
c0012511:	c3                   	ret    
c0012512:	e8 cd e9 ff ff       	call   c0010ee4 <KeSleep()>
c0012517:	31 c0                	xor    eax,eax
c0012519:	31 d2                	xor    edx,edx
c001251b:	83 c4 1c             	add    esp,0x1c
c001251e:	c3                   	ret    
c001251f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012523:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012527:	e8 e8 e9 ff ff       	call   c0010f14 <KeRestart()>
c001252c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012530:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012534:	eb c5                	jmp    c00124fb <SysShutdown(regs*)+0x22>

c0012536 <SysPipe(regs*)>:
c0012536:	57                   	push   edi
c0012537:	56                   	push   esi
c0012538:	53                   	push   ebx
c0012539:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001253d:	83 ec 0c             	sub    esp,0xc
c0012540:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0012543:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0012546:	6a 20                	push   0x20
c0012548:	e8 bf db ff ff       	call   c001010c <malloc>
c001254d:	89 c3                	mov    ebx,eax
c001254f:	58                   	pop    eax
c0012550:	5a                   	pop    edx
c0012551:	68 00 50 00 00       	push   0x5000
c0012556:	53                   	push   ebx
c0012557:	e8 d2 e7 ff ff       	call   c0010d2e <Pipe::Pipe(int)>
c001255c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001255f:	e8 e8 10 00 00       	call   c001364c <UnixFile::getFileDescriptor()>
c0012564:	89 07                	mov    DWORD PTR [edi],eax
c0012566:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012569:	e8 de 10 00 00       	call   c001364c <UnixFile::getFileDescriptor()>
c001256e:	83 c4 10             	add    esp,0x10
c0012571:	31 d2                	xor    edx,edx
c0012573:	89 06                	mov    DWORD PTR [esi],eax
c0012575:	31 c0                	xor    eax,eax
c0012577:	5b                   	pop    ebx
c0012578:	5e                   	pop    esi
c0012579:	5f                   	pop    edi
c001257a:	c3                   	ret    

c001257b <SysGetUnixTime(regs*)>:
c001257b:	53                   	push   ebx
c001257c:	83 ec 10             	sub    esp,0x10
c001257f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012583:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0012586:	52                   	push   edx
c0012587:	68 6b b9 02 c0       	push   0xc002b96b
c001258c:	e8 d5 49 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0012591:	83 c4 10             	add    esp,0x10
c0012594:	83 7b 20 02          	cmp    DWORD PTR [ebx+0x20],0x2
c0012598:	74 3b                	je     c00125d5 <SysGetUnixTime(regs*)+0x5a>
c001259a:	a1 08 61 03 c0       	mov    eax,ds:0xc0036108
c001259f:	83 ec 0c             	sub    esp,0xc
c00125a2:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00125a8:	50                   	push   eax
c00125a9:	e8 b4 75 ff ff       	call   c0009b62 <Clock::timeInSecondsLocal()>
c00125ae:	83 c4 0c             	add    esp,0xc
c00125b1:	52                   	push   edx
c00125b2:	50                   	push   eax
c00125b3:	68 7f b9 02 c0       	push   0xc002b97f
c00125b8:	e8 a9 49 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00125bd:	a1 08 61 03 c0       	mov    eax,ds:0xc0036108
c00125c2:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00125c8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00125cc:	83 c4 18             	add    esp,0x18
c00125cf:	5b                   	pop    ebx
c00125d0:	e9 8d 75 ff ff       	jmp    c0009b62 <Clock::timeInSecondsLocal()>
c00125d5:	6b 0d 54 5b 03 c0 64 	imul   ecx,DWORD PTR ds:0xc0035b54,0x64
c00125dc:	b8 64 00 00 00       	mov    eax,0x64
c00125e1:	f7 25 50 5b 03 c0    	mul    DWORD PTR ds:0xc0035b50
c00125e7:	83 c4 08             	add    esp,0x8
c00125ea:	5b                   	pop    ebx
c00125eb:	01 ca                	add    edx,ecx
c00125ed:	c3                   	ret    

c00125ee <string_ends_with(char const*, char const*)>:
c00125ee:	57                   	push   edi
c00125ef:	56                   	push   esi
c00125f0:	53                   	push   ebx
c00125f1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00125f5:	83 ec 0c             	sub    esp,0xc
c00125f8:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00125fc:	53                   	push   ebx
c00125fd:	e8 7e df fe ff       	call   c0000580 <strlen>
c0012602:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012605:	89 c6                	mov    esi,eax
c0012607:	e8 74 df fe ff       	call   c0000580 <strlen>
c001260c:	83 c4 10             	add    esp,0x10
c001260f:	31 d2                	xor    edx,edx
c0012611:	39 c6                	cmp    esi,eax
c0012613:	7d 06                	jge    c001261b <string_ends_with(char const*, char const*)+0x2d>
c0012615:	5b                   	pop    ebx
c0012616:	89 d0                	mov    eax,edx
c0012618:	5e                   	pop    esi
c0012619:	5f                   	pop    edi
c001261a:	c3                   	ret    
c001261b:	83 ec 08             	sub    esp,0x8
c001261e:	29 c6                	sub    esi,eax
c0012620:	57                   	push   edi
c0012621:	01 f3                	add    ebx,esi
c0012623:	53                   	push   ebx
c0012624:	e8 57 e1 fe ff       	call   c0000780 <strcmp>
c0012629:	83 c4 10             	add    esp,0x10
c001262c:	31 d2                	xor    edx,edx
c001262e:	5b                   	pop    ebx
c001262f:	5e                   	pop    esi
c0012630:	85 c0                	test   eax,eax
c0012632:	5f                   	pop    edi
c0012633:	0f 94 c2             	sete   dl
c0012636:	89 d0                	mov    eax,edx
c0012638:	c3                   	ret    

c0012639 <SysOpen(regs*)>:
c0012639:	56                   	push   esi
c001263a:	53                   	push   ebx
c001263b:	81 ec 04 01 00 00    	sub    esp,0x104
c0012641:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0012648:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001264b:	85 c0                	test   eax,eax
c001264d:	0f 84 c4 01 00 00    	je     c0012817 <SysOpen(regs*)+0x1de>
c0012653:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012656:	85 c0                	test   eax,eax
c0012658:	0f 84 b9 01 00 00    	je     c0012817 <SysOpen(regs*)+0x1de>
c001265e:	6a 00                	push   0x0
c0012660:	68 86 b9 02 c0       	push   0xc002b986
c0012665:	50                   	push   eax
c0012666:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001266a:	56                   	push   esi
c001266b:	e8 16 62 ff ff       	call   c0008886 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0012670:	89 34 24             	mov    DWORD PTR [esp],esi
c0012673:	e8 08 df fe ff       	call   c0000580 <strlen>
c0012678:	83 c4 10             	add    esp,0x10
c001267b:	83 e8 01             	sub    eax,0x1
c001267e:	74 29                	je     c00126a9 <SysOpen(regs*)+0x70>
c0012680:	0f be 14 04          	movsx  edx,BYTE PTR [esp+eax*1]
c0012684:	83 fa 2e             	cmp    edx,0x2e
c0012687:	74 1c                	je     c00126a5 <SysOpen(regs*)+0x6c>
c0012689:	83 fa 3a             	cmp    edx,0x3a
c001268c:	74 17                	je     c00126a5 <SysOpen(regs*)+0x6c>
c001268e:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0012692:	83 e8 01             	sub    eax,0x1
c0012695:	74 12                	je     c00126a9 <SysOpen(regs*)+0x70>
c0012697:	0f be 14 06          	movsx  edx,BYTE PTR [esi+eax*1]
c001269b:	83 fa 3a             	cmp    edx,0x3a
c001269e:	74 05                	je     c00126a5 <SysOpen(regs*)+0x6c>
c00126a0:	83 fa 2e             	cmp    edx,0x2e
c00126a3:	75 e9                	jne    c001268e <SysOpen(regs*)+0x55>
c00126a5:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c00126a9:	83 ec 08             	sub    esp,0x8
c00126ac:	68 8a b9 02 c0       	push   0xc002b98a
c00126b1:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00126b4:	50                   	push   eax
c00126b5:	e8 34 ff ff ff       	call   c00125ee <string_ends_with(char const*, char const*)>
c00126ba:	83 c4 10             	add    esp,0x10
c00126bd:	85 c0                	test   eax,eax
c00126bf:	74 1d                	je     c00126de <SysOpen(regs*)+0xa5>
c00126c1:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00126c4:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c00126ca:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00126d1:	81 c4 04 01 00 00    	add    esp,0x104
c00126d7:	31 c0                	xor    eax,eax
c00126d9:	5b                   	pop    ebx
c00126da:	31 d2                	xor    edx,edx
c00126dc:	5e                   	pop    esi
c00126dd:	c3                   	ret    
c00126de:	83 ec 08             	sub    esp,0x8
c00126e1:	68 8f b9 02 c0       	push   0xc002b98f
c00126e6:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00126e9:	50                   	push   eax
c00126ea:	e8 ff fe ff ff       	call   c00125ee <string_ends_with(char const*, char const*)>
c00126ef:	83 c4 10             	add    esp,0x10
c00126f2:	85 c0                	test   eax,eax
c00126f4:	75 cb                	jne    c00126c1 <SysOpen(regs*)+0x88>
c00126f6:	83 ec 08             	sub    esp,0x8
c00126f9:	68 8b b9 02 c0       	push   0xc002b98b
c00126fe:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012701:	50                   	push   eax
c0012702:	e8 79 e0 fe ff       	call   c0000780 <strcmp>
c0012707:	83 c4 10             	add    esp,0x10
c001270a:	85 c0                	test   eax,eax
c001270c:	74 b3                	je     c00126c1 <SysOpen(regs*)+0x88>
c001270e:	83 ec 08             	sub    esp,0x8
c0012711:	68 8a b9 02 c0       	push   0xc002b98a
c0012716:	56                   	push   esi
c0012717:	e8 d2 fe ff ff       	call   c00125ee <string_ends_with(char const*, char const*)>
c001271c:	83 c4 10             	add    esp,0x10
c001271f:	85 c0                	test   eax,eax
c0012721:	75 9e                	jne    c00126c1 <SysOpen(regs*)+0x88>
c0012723:	83 ec 08             	sub    esp,0x8
c0012726:	68 94 b9 02 c0       	push   0xc002b994
c001272b:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001272e:	50                   	push   eax
c001272f:	e8 ba fe ff ff       	call   c00125ee <string_ends_with(char const*, char const*)>
c0012734:	83 c4 10             	add    esp,0x10
c0012737:	85 c0                	test   eax,eax
c0012739:	0f 85 eb 00 00 00    	jne    c001282a <SysOpen(regs*)+0x1f1>
c001273f:	83 ec 08             	sub    esp,0x8
c0012742:	68 99 b9 02 c0       	push   0xc002b999
c0012747:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001274a:	50                   	push   eax
c001274b:	e8 9e fe ff ff       	call   c00125ee <string_ends_with(char const*, char const*)>
c0012750:	83 c4 10             	add    esp,0x10
c0012753:	85 c0                	test   eax,eax
c0012755:	0f 85 cf 00 00 00    	jne    c001282a <SysOpen(regs*)+0x1f1>
c001275b:	83 ec 08             	sub    esp,0x8
c001275e:	68 95 b9 02 c0       	push   0xc002b995
c0012763:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0012766:	51                   	push   ecx
c0012767:	e8 14 e0 fe ff       	call   c0000780 <strcmp>
c001276c:	83 c4 10             	add    esp,0x10
c001276f:	85 c0                	test   eax,eax
c0012771:	0f 84 b3 00 00 00    	je     c001282a <SysOpen(regs*)+0x1f1>
c0012777:	83 ec 08             	sub    esp,0x8
c001277a:	68 94 b9 02 c0       	push   0xc002b994
c001277f:	56                   	push   esi
c0012780:	e8 69 fe ff ff       	call   c00125ee <string_ends_with(char const*, char const*)>
c0012785:	83 c4 10             	add    esp,0x10
c0012788:	85 c0                	test   eax,eax
c001278a:	0f 85 9a 00 00 00    	jne    c001282a <SysOpen(regs*)+0x1f1>
c0012790:	83 ec 0c             	sub    esp,0xc
c0012793:	68 14 01 00 00       	push   0x114
c0012798:	e8 6f d9 ff ff       	call   c001010c <malloc>
c001279d:	83 c4 0c             	add    esp,0xc
c00127a0:	89 c6                	mov    esi,eax
c00127a2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00127a7:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00127aa:	50                   	push   eax
c00127ab:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00127ae:	52                   	push   edx
c00127af:	56                   	push   esi
c00127b0:	e8 fd 63 ff ff       	call   c0008bb2 <File::File(char const*, Process*)>
c00127b5:	83 c4 10             	add    esp,0x10
c00127b8:	85 f6                	test   esi,esi
c00127ba:	74 5b                	je     c0012817 <SysOpen(regs*)+0x1de>
c00127bc:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00127bf:	0f b6 c2             	movzx  eax,dl
c00127c2:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c00127c5:	89 d0                	mov    eax,edx
c00127c7:	83 e0 01             	and    eax,0x1
c00127ca:	f6 c2 02             	test   dl,0x2
c00127cd:	74 03                	je     c00127d2 <SysOpen(regs*)+0x199>
c00127cf:	83 c8 02             	or     eax,0x2
c00127d2:	f6 c2 04             	test   dl,0x4
c00127d5:	74 03                	je     c00127da <SysOpen(regs*)+0x1a1>
c00127d7:	83 c8 04             	or     eax,0x4
c00127da:	f6 c2 08             	test   dl,0x8
c00127dd:	74 03                	je     c00127e2 <SysOpen(regs*)+0x1a9>
c00127df:	83 c8 0a             	or     eax,0xa
c00127e2:	80 e2 10             	and    dl,0x10
c00127e5:	74 03                	je     c00127ea <SysOpen(regs*)+0x1b1>
c00127e7:	83 c8 12             	or     eax,0x12
c00127ea:	83 ec 08             	sub    esp,0x8
c00127ed:	50                   	push   eax
c00127ee:	56                   	push   esi
c00127ef:	e8 dc 63 ff ff       	call   c0008bd0 <File::open(FileOpenMode)>
c00127f4:	83 c4 10             	add    esp,0x10
c00127f7:	85 c0                	test   eax,eax
c00127f9:	75 1c                	jne    c0012817 <SysOpen(regs*)+0x1de>
c00127fb:	83 ec 0c             	sub    esp,0xc
c00127fe:	56                   	push   esi
c00127ff:	e8 48 0e 00 00       	call   c001364c <UnixFile::getFileDescriptor()>
c0012804:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0012807:	83 c4 10             	add    esp,0x10
c001280a:	89 02                	mov    DWORD PTR [edx],eax
c001280c:	c1 f8 1f             	sar    eax,0x1f
c001280f:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0012812:	e9 ba fe ff ff       	jmp    c00126d1 <SysOpen(regs*)+0x98>
c0012817:	81 c4 04 01 00 00    	add    esp,0x104
c001281d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012822:	5b                   	pop    ebx
c0012823:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012828:	5e                   	pop    esi
c0012829:	c3                   	ret    
c001282a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001282d:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0012833:	e9 92 fe ff ff       	jmp    c00126ca <SysOpen(regs*)+0x91>

c0012838 <KeSystemCall(regs*, void*)>:
c0012838:	53                   	push   ebx
c0012839:	83 ec 08             	sub    esp,0x8
c001283c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012840:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0012843:	83 f8 48             	cmp    eax,0x48
c0012846:	77 16                	ja     c001285e <KeSystemCall(regs*, void*)+0x26>
c0012848:	8b 14 85 80 fb 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd0480]
c001284f:	85 d2                	test   edx,edx
c0012851:	74 0b                	je     c001285e <KeSystemCall(regs*, void*)+0x26>
c0012853:	83 ec 0c             	sub    esp,0xc
c0012856:	53                   	push   ebx
c0012857:	ff d2                	call   edx
c0012859:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001285c:	eb 0d                	jmp    c001286b <KeSystemCall(regs*, void*)+0x33>
c001285e:	52                   	push   edx
c001285f:	52                   	push   edx
c0012860:	50                   	push   eax
c0012861:	68 9e b9 02 c0       	push   0xc002b99e
c0012866:	e8 fb 46 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001286b:	83 c4 10             	add    esp,0x10
c001286e:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0012873:	83 c4 08             	add    esp,0x8
c0012876:	31 d2                	xor    edx,edx
c0012878:	5b                   	pop    ebx
c0012879:	c3                   	ret    

c001287a <VgaText::isAtty()>:
c001287a:	b0 01                	mov    al,0x1
c001287c:	c3                   	ret    
c001287d:	90                   	nop

c001287e <VgaText::~VgaText()>:
c001287e:	83 ec 0c             	sub    esp,0xc
c0012881:	ba 18 ba 02 c0       	mov    edx,0xc002ba18
c0012886:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001288a:	89 10                	mov    DWORD PTR [eax],edx
c001288c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012890:	83 ec 0c             	sub    esp,0xc
c0012893:	50                   	push   eax
c0012894:	e8 a1 0f 00 00       	call   c001383a <UnixFile::~UnixFile()>
c0012899:	83 c4 10             	add    esp,0x10
c001289c:	90                   	nop
c001289d:	83 c4 0c             	add    esp,0xc
c00128a0:	c3                   	ret    
c00128a1:	90                   	nop

c00128a2 <VgaText::~VgaText()>:
c00128a2:	83 ec 0c             	sub    esp,0xc
c00128a5:	83 ec 0c             	sub    esp,0xc
c00128a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00128ac:	e8 cd ff ff ff       	call   c001287e <VgaText::~VgaText()>
c00128b1:	83 c4 10             	add    esp,0x10
c00128b4:	83 ec 08             	sub    esp,0x8
c00128b7:	68 84 01 00 00       	push   0x184
c00128bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00128c0:	e8 47 b4 ff ff       	call   c000dd0c <operator delete(void*, unsigned long)>
c00128c5:	83 c4 10             	add    esp,0x10
c00128c8:	83 c4 0c             	add    esp,0xc
c00128cb:	c3                   	ret    

c00128cc <VgaText::read(unsigned long long, void*, int*)>:
c00128cc:	83 ec 10             	sub    esp,0x10
c00128cf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00128d3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00128d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00128db:	e8 5b 86 ff ff       	call   c000af3b <readKeyboard(VgaText*, char*, unsigned long)>
c00128e0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00128e4:	89 02                	mov    DWORD PTR [edx],eax
c00128e6:	31 c0                	xor    eax,eax
c00128e8:	83 c4 1c             	add    esp,0x1c
c00128eb:	c3                   	ret    

c00128ec <setTerminalScrollLock(bool)>:
c00128ec:	c3                   	ret    

c00128ed <doTerminalCycle()>:
c00128ed:	c3                   	ret    

c00128ee <addToTerminalCycle(VgaText*)>:
c00128ee:	c3                   	ret    

c00128ef <scrollTerminalScrollLock(int)>:
c00128ef:	c3                   	ret    

c00128f0 <VgaText::updateTitle()>:
c00128f0:	c3                   	ret    
c00128f1:	90                   	nop

c00128f2 <VgaText::load()>:
c00128f2:	c3                   	ret    
c00128f3:	90                   	nop

c00128f4 <VgaText::updateCursor()>:
c00128f4:	83 ec 14             	sub    esp,0x14
c00128f7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00128fb:	ff 70 18             	push   DWORD PTR [eax+0x18]
c00128fe:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0012901:	e8 9e 9b 00 00       	call   c001c4a4 <HalConsoleCursorUpdate(int, int)>
c0012906:	83 c4 1c             	add    esp,0x1c
c0012909:	c3                   	ret    

c001290a <VgaText::doANSI_SGR(int)>:
c001290a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001290e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012912:	85 d2                	test   edx,edx
c0012914:	75 0b                	jne    c0012921 <VgaText::doANSI_SGR(int)+0x17>
c0012916:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0012919:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c001291c:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001291f:	eb 59                	jmp    c001297a <VgaText::doANSI_SGR(int)+0x70>
c0012921:	83 fa 07             	cmp    edx,0x7
c0012924:	75 0b                	jne    c0012931 <VgaText::doANSI_SGR(int)+0x27>
c0012926:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0012929:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001292c:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c001292f:	eb 49                	jmp    c001297a <VgaText::doANSI_SGR(int)+0x70>
c0012931:	83 fa 1b             	cmp    edx,0x1b
c0012934:	74 e0                	je     c0012916 <VgaText::doANSI_SGR(int)+0xc>
c0012936:	8d 4a e2             	lea    ecx,[edx-0x1e]
c0012939:	83 f9 07             	cmp    ecx,0x7
c001293c:	77 09                	ja     c0012947 <VgaText::doANSI_SGR(int)+0x3d>
c001293e:	8b 14 8d e0 fc 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd0320]
c0012945:	eb 20                	jmp    c0012967 <VgaText::doANSI_SGR(int)+0x5d>
c0012947:	8d 4a d8             	lea    ecx,[edx-0x28]
c001294a:	83 f9 07             	cmp    ecx,0x7
c001294d:	77 09                	ja     c0012958 <VgaText::doANSI_SGR(int)+0x4e>
c001294f:	8b 14 8d e0 fc 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd0320]
c0012956:	eb 22                	jmp    c001297a <VgaText::doANSI_SGR(int)+0x70>
c0012958:	8d 4a a6             	lea    ecx,[edx-0x5a]
c001295b:	83 f9 07             	cmp    ecx,0x7
c001295e:	77 0b                	ja     c001296b <VgaText::doANSI_SGR(int)+0x61>
c0012960:	8b 14 95 98 fb 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd0468]
c0012967:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c001296a:	c3                   	ret    
c001296b:	8d 4a 9c             	lea    ecx,[edx-0x64]
c001296e:	83 f9 07             	cmp    ecx,0x7
c0012971:	77 0a                	ja     c001297d <VgaText::doANSI_SGR(int)+0x73>
c0012973:	8b 14 95 70 fb 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd0490]
c001297a:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c001297d:	c3                   	ret    

c001297e <VgaText::setDefaultBgColour(VgaColour)>:
c001297e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012982:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012986:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0012989:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c001298c:	c3                   	ret    
c001298d:	90                   	nop

c001298e <VgaText::setDefaultFgColour(VgaColour)>:
c001298e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012992:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012996:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0012999:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c001299c:	c3                   	ret    
c001299d:	90                   	nop

c001299e <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c001299e:	53                   	push   ebx
c001299f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00129a3:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00129a7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00129ab:	51                   	push   ecx
c00129ac:	e8 cd ff ff ff       	call   c001297e <VgaText::setDefaultBgColour(VgaColour)>
c00129b1:	58                   	pop    eax
c00129b2:	5a                   	pop    edx
c00129b3:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00129b7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00129bb:	5b                   	pop    ebx
c00129bc:	eb d0                	jmp    c001298e <VgaText::setDefaultFgColour(VgaColour)>

c00129be <VgaText::setTitleTextColour(VgaColour)>:
c00129be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00129c2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00129c6:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c00129c9:	c3                   	ret    

c00129ca <VgaText::setTitleColour(VgaColour)>:
c00129ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00129ce:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00129d2:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00129d5:	c3                   	ret    

c00129d6 <VgaText::setTitle(char*)>:
c00129d6:	c3                   	ret    
c00129d7:	90                   	nop

c00129d8 <VgaText::combineColours(unsigned char, unsigned char)>:
c00129d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00129dc:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00129e1:	83 e0 0f             	and    eax,0xf
c00129e4:	c1 e2 04             	shl    edx,0x4
c00129e7:	09 d0                	or     eax,edx
c00129e9:	c3                   	ret    

c00129ea <VgaText::scrollScreen()>:
c00129ea:	55                   	push   ebp
c00129eb:	57                   	push   edi
c00129ec:	56                   	push   esi
c00129ed:	be 01 00 00 00       	mov    esi,0x1
c00129f2:	53                   	push   ebx
c00129f3:	83 ec 0c             	sub    esp,0xc
c00129f6:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00129fa:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c00129fd:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c0012a03:	31 ff                	xor    edi,edi
c0012a05:	01 e9                	add    ecx,ebp
c0012a07:	8a 01                	mov    al,BYTE PTR [ecx]
c0012a09:	83 fe 18             	cmp    esi,0x18
c0012a0c:	88 81 60 ff ff ff    	mov    BYTE PTR [ecx-0xa0],al
c0012a12:	75 20                	jne    c0012a34 <VgaText::scrollScreen()+0x4a>
c0012a14:	f7 c7 01 00 00 00    	test   edi,0x1
c0012a1a:	74 15                	je     c0012a31 <VgaText::scrollScreen()+0x47>
c0012a1c:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0012a20:	50                   	push   eax
c0012a21:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0012a25:	50                   	push   eax
c0012a26:	e8 ad ff ff ff       	call   c00129d8 <VgaText::combineColours(unsigned char, unsigned char)>
c0012a2b:	5a                   	pop    edx
c0012a2c:	5a                   	pop    edx
c0012a2d:	88 01                	mov    BYTE PTR [ecx],al
c0012a2f:	eb 03                	jmp    c0012a34 <VgaText::scrollScreen()+0x4a>
c0012a31:	c6 01 20             	mov    BYTE PTR [ecx],0x20
c0012a34:	47                   	inc    edi
c0012a35:	41                   	inc    ecx
c0012a36:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0012a3c:	75 c9                	jne    c0012a07 <VgaText::scrollScreen()+0x1d>
c0012a3e:	46                   	inc    esi
c0012a3f:	83 fe 19             	cmp    esi,0x19
c0012a42:	75 b9                	jne    c00129fd <VgaText::scrollScreen()+0x13>
c0012a44:	39 1d f4 61 03 c0    	cmp    DWORD PTR ds:0xc00361f4,ebx
c0012a4a:	75 1f                	jne    c0012a6b <VgaText::scrollScreen()+0x81>
c0012a4c:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0012a50:	74 05                	je     c0012a57 <VgaText::scrollScreen()+0x6d>
c0012a52:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c0012a55:	eb 14                	jmp    c0012a6b <VgaText::scrollScreen()+0x81>
c0012a57:	50                   	push   eax
c0012a58:	50                   	push   eax
c0012a59:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0012a5d:	50                   	push   eax
c0012a5e:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0012a62:	50                   	push   eax
c0012a63:	e8 d0 98 00 00       	call   c001c338 <HalConsoleScroll(int, int)>
c0012a68:	83 c4 10             	add    esp,0x10
c0012a6b:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0012a6f:	83 c4 0c             	add    esp,0xc
c0012a72:	5b                   	pop    ebx
c0012a73:	5e                   	pop    esi
c0012a74:	5f                   	pop    edi
c0012a75:	5d                   	pop    ebp
c0012a76:	e9 79 fe ff ff       	jmp    c00128f4 <VgaText::updateCursor()>
c0012a7b:	90                   	nop

c0012a7c <VgaText::combineCharAndColour(char, unsigned char)>:
c0012a7c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0012a81:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c0012a86:	c1 e0 08             	shl    eax,0x8
c0012a89:	09 d0                	or     eax,edx
c0012a8b:	c3                   	ret    

c0012a8c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c0012a8c:	55                   	push   ebp
c0012a8d:	57                   	push   edi
c0012a8e:	56                   	push   esi
c0012a8f:	53                   	push   ebx
c0012a90:	83 ec 1c             	sub    esp,0x1c
c0012a93:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012a97:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0012a9b:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0012a9f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0012aa3:	8b 6f 0c             	mov    ebp,DWORD PTR [edi+0xc]
c0012aa6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012aaa:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012aae:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0012ab2:	85 ed                	test   ebp,ebp
c0012ab4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012ab8:	75 14                	jne    c0012ace <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x42>
c0012aba:	c7 44 24 30 b2 b9 02 c0 	mov    DWORD PTR [esp+0x30],0xc002b9b2
c0012ac2:	83 c4 1c             	add    esp,0x1c
c0012ac5:	5b                   	pop    ebx
c0012ac6:	5e                   	pop    esi
c0012ac7:	5f                   	pop    edi
c0012ac8:	5d                   	pop    ebp
c0012ac9:	e9 92 da ff ff       	jmp    c0010560 <KePanic(char const*)>
c0012ace:	50                   	push   eax
c0012acf:	50                   	push   eax
c0012ad0:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0012ad5:	50                   	push   eax
c0012ad6:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0012adb:	50                   	push   eax
c0012adc:	e8 f7 fe ff ff       	call   c00129d8 <VgaText::combineColours(unsigned char, unsigned char)>
c0012ae1:	5a                   	pop    edx
c0012ae2:	5a                   	pop    edx
c0012ae3:	0f b6 c0             	movzx  eax,al
c0012ae6:	0f be c9             	movsx  ecx,cl
c0012ae9:	50                   	push   eax
c0012aea:	51                   	push   ecx
c0012aeb:	e8 8c ff ff ff       	call   c0012a7c <VgaText::combineCharAndColour(char, unsigned char)>
c0012af0:	6b d6 50             	imul   edx,esi,0x50
c0012af3:	83 c4 10             	add    esp,0x10
c0012af6:	01 da                	add    edx,ebx
c0012af8:	0f b7 d2             	movzx  edx,dx
c0012afb:	66 89 44 55 00       	mov    WORD PTR [ebp+edx*2+0x0],ax
c0012b00:	39 3d f4 61 03 c0    	cmp    DWORD PTR ds:0xc00361f4,edi
c0012b06:	75 28                	jne    c0012b30 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0xa4>
c0012b08:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0012b0c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012b10:	89 5c 24 3c          	mov    DWORD PTR [esp+0x3c],ebx
c0012b14:	89 4c 24 30          	mov    DWORD PTR [esp+0x30],ecx
c0012b18:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0012b1c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012b20:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0012b24:	83 c4 1c             	add    esp,0x1c
c0012b27:	5b                   	pop    ebx
c0012b28:	5e                   	pop    esi
c0012b29:	5f                   	pop    edi
c0012b2a:	5d                   	pop    ebp
c0012b2b:	e9 10 99 00 00       	jmp    c001c440 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0012b30:	83 c4 1c             	add    esp,0x1c
c0012b33:	5b                   	pop    ebx
c0012b34:	5e                   	pop    esi
c0012b35:	5f                   	pop    edi
c0012b36:	5d                   	pop    ebp
c0012b37:	c3                   	ret    

c0012b38 <VgaText::getCursorX()>:
c0012b38:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012b3c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0012b3f:	c3                   	ret    

c0012b40 <VgaText::getCursorY()>:
c0012b40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012b44:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0012b47:	c3                   	ret    

c0012b48 <VgaText::setCursor(int, int)>:
c0012b48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012b4c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012b50:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0012b53:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012b57:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0012b5a:	e9 95 fd ff ff       	jmp    c00128f4 <VgaText::updateCursor()>

c0012b5f <setActiveTerminal(VgaText*)>:
c0012b5f:	53                   	push   ebx
c0012b60:	83 ec 08             	sub    esp,0x8
c0012b63:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012b67:	85 db                	test   ebx,ebx
c0012b69:	75 11                	jne    c0012b7c <setActiveTerminal(VgaText*)+0x1d>
c0012b6b:	c7 44 24 10 c2 b9 02 c0 	mov    DWORD PTR [esp+0x10],0xc002b9c2
c0012b73:	83 c4 08             	add    esp,0x8
c0012b76:	5b                   	pop    ebx
c0012b77:	e9 e4 d9 ff ff       	jmp    c0010560 <KePanic(char const*)>
c0012b7c:	a1 f4 61 03 c0       	mov    eax,ds:0xc00361f4
c0012b81:	85 c0                	test   eax,eax
c0012b83:	74 0c                	je     c0012b91 <setActiveTerminal(VgaText*)+0x32>
c0012b85:	83 ec 0c             	sub    esp,0xc
c0012b88:	50                   	push   eax
c0012b89:	e8 66 fd ff ff       	call   c00128f4 <VgaText::updateCursor()>
c0012b8e:	83 c4 10             	add    esp,0x10
c0012b91:	50                   	push   eax
c0012b92:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0012b95:	89 1d f4 61 03 c0    	mov    DWORD PTR ds:0xc00361f4,ebx
c0012b9b:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0012b9e:	53                   	push   ebx
c0012b9f:	e8 a4 ff ff ff       	call   c0012b48 <VgaText::setCursor(int, int)>
c0012ba4:	83 c4 18             	add    esp,0x18
c0012ba7:	5b                   	pop    ebx
c0012ba8:	c3                   	ret    
c0012ba9:	90                   	nop

c0012baa <VgaText::clearScreen()>:
c0012baa:	57                   	push   edi
c0012bab:	56                   	push   esi
c0012bac:	31 f6                	xor    esi,esi
c0012bae:	53                   	push   ebx
c0012baf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012bb3:	52                   	push   edx
c0012bb4:	6a 00                	push   0x0
c0012bb6:	6a 00                	push   0x0
c0012bb8:	53                   	push   ebx
c0012bb9:	e8 8a ff ff ff       	call   c0012b48 <VgaText::setCursor(int, int)>
c0012bbe:	83 c4 10             	add    esp,0x10
c0012bc1:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0012bc8:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c0012bcb:	7e 20                	jle    c0012bed <VgaText::clearScreen()+0x43>
c0012bcd:	31 ff                	xor    edi,edi
c0012bcf:	50                   	push   eax
c0012bd0:	50                   	push   eax
c0012bd1:	56                   	push   esi
c0012bd2:	57                   	push   edi
c0012bd3:	47                   	inc    edi
c0012bd4:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0012bd7:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0012bda:	6a 20                	push   0x20
c0012bdc:	53                   	push   ebx
c0012bdd:	e8 aa fe ff ff       	call   c0012a8c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0012be2:	83 c4 20             	add    esp,0x20
c0012be5:	83 ff 50             	cmp    edi,0x50
c0012be8:	75 e5                	jne    c0012bcf <VgaText::clearScreen()+0x25>
c0012bea:	46                   	inc    esi
c0012beb:	eb db                	jmp    c0012bc8 <VgaText::clearScreen()+0x1e>
c0012bed:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0012bf4:	5b                   	pop    ebx
c0012bf5:	5e                   	pop    esi
c0012bf6:	5f                   	pop    edi
c0012bf7:	c3                   	ret    

c0012bf8 <VgaText::setCursorX(int)>:
c0012bf8:	83 ec 10             	sub    esp,0x10
c0012bfb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012bff:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0012c02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012c06:	50                   	push   eax
c0012c07:	e8 3c ff ff ff       	call   c0012b48 <VgaText::setCursor(int, int)>
c0012c0c:	83 c4 1c             	add    esp,0x1c
c0012c0f:	c3                   	ret    

c0012c10 <VgaText::setCursorY(int)>:
c0012c10:	83 ec 10             	sub    esp,0x10
c0012c13:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012c17:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012c1b:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0012c1e:	50                   	push   eax
c0012c1f:	e8 24 ff ff ff       	call   c0012b48 <VgaText::setCursor(int, int)>
c0012c24:	83 c4 1c             	add    esp,0x1c
c0012c27:	c3                   	ret    

c0012c28 <VgaText::incrementCursor(bool)>:
c0012c28:	56                   	push   esi
c0012c29:	53                   	push   ebx
c0012c2a:	51                   	push   ecx
c0012c2b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012c2f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0012c33:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0012c36:	40                   	inc    eax
c0012c37:	83 f8 50             	cmp    eax,0x50
c0012c3a:	74 05                	je     c0012c41 <VgaText::incrementCursor(bool)+0x19>
c0012c3c:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0012c3f:	eb 24                	jmp    c0012c65 <VgaText::incrementCursor(bool)+0x3d>
c0012c41:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0012c48:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0012c4b:	8d 50 01             	lea    edx,[eax+0x1]
c0012c4e:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0012c51:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0012c54:	75 0f                	jne    c0012c65 <VgaText::incrementCursor(bool)+0x3d>
c0012c56:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0012c59:	83 ec 0c             	sub    esp,0xc
c0012c5c:	53                   	push   ebx
c0012c5d:	e8 88 fd ff ff       	call   c00129ea <VgaText::scrollScreen()>
c0012c62:	83 c4 10             	add    esp,0x10
c0012c65:	89 f0                	mov    eax,esi
c0012c67:	84 c0                	test   al,al
c0012c69:	74 0c                	je     c0012c77 <VgaText::incrementCursor(bool)+0x4f>
c0012c6b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012c6f:	5a                   	pop    edx
c0012c70:	5b                   	pop    ebx
c0012c71:	5e                   	pop    esi
c0012c72:	e9 7d fc ff ff       	jmp    c00128f4 <VgaText::updateCursor()>
c0012c77:	58                   	pop    eax
c0012c78:	5b                   	pop    ebx
c0012c79:	5e                   	pop    esi
c0012c7a:	c3                   	ret    
c0012c7b:	90                   	nop

c0012c7c <VgaText::decrementCursor(bool)>:
c0012c7c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012c80:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0012c84:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0012c87:	85 c0                	test   eax,eax
c0012c89:	74 04                	je     c0012c8f <VgaText::decrementCursor(bool)+0x13>
c0012c8b:	48                   	dec    eax
c0012c8c:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0012c8f:	84 c9                	test   cl,cl
c0012c91:	74 09                	je     c0012c9c <VgaText::decrementCursor(bool)+0x20>
c0012c93:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012c97:	e9 58 fc ff ff       	jmp    c00128f4 <VgaText::updateCursor()>
c0012c9c:	c3                   	ret    
c0012c9d:	90                   	nop

c0012c9e <VgaText::putchar(char, VgaColour, VgaColour)>:
c0012c9e:	53                   	push   ebx
c0012c9f:	83 ec 08             	sub    esp,0x8
c0012ca2:	0f be 44 24 14       	movsx  eax,BYTE PTR [esp+0x14]
c0012ca7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012cab:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012caf:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0012cb3:	83 f8 07             	cmp    eax,0x7
c0012cb6:	75 21                	jne    c0012cd9 <VgaText::putchar(char, VgaColour, VgaColour)+0x3b>
c0012cb8:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0012cc0:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c0012cc8:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c0012cd0:	83 c4 08             	add    esp,0x8
c0012cd3:	5b                   	pop    ebx
c0012cd4:	e9 7a 67 ff ff       	jmp    c0009453 <KeBeep(int, int, bool)>
c0012cd9:	83 f8 0d             	cmp    eax,0xd
c0012cdc:	75 09                	jne    c0012ce7 <VgaText::putchar(char, VgaColour, VgaColour)+0x49>
c0012cde:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0012ce5:	eb 2d                	jmp    c0012d14 <VgaText::putchar(char, VgaColour, VgaColour)+0x76>
c0012ce7:	83 f8 0a             	cmp    eax,0xa
c0012cea:	75 31                	jne    c0012d1d <VgaText::putchar(char, VgaColour, VgaColour)+0x7f>
c0012cec:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0012cf3:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0012cf6:	8d 50 01             	lea    edx,[eax+0x1]
c0012cf9:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0012cfc:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0012cff:	75 0f                	jne    c0012d10 <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c0012d01:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0012d04:	83 ec 0c             	sub    esp,0xc
c0012d07:	53                   	push   ebx
c0012d08:	e8 dd fc ff ff       	call   c00129ea <VgaText::scrollScreen()>
c0012d0d:	83 c4 10             	add    esp,0x10
c0012d10:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012d14:	83 c4 08             	add    esp,0x8
c0012d17:	5b                   	pop    ebx
c0012d18:	e9 d7 fb ff ff       	jmp    c00128f4 <VgaText::updateCursor()>
c0012d1d:	83 f8 08             	cmp    eax,0x8
c0012d20:	75 25                	jne    c0012d47 <VgaText::putchar(char, VgaColour, VgaColour)+0xa9>
c0012d22:	50                   	push   eax
c0012d23:	50                   	push   eax
c0012d24:	6a 01                	push   0x1
c0012d26:	53                   	push   ebx
c0012d27:	e8 50 ff ff ff       	call   c0012c7c <VgaText::decrementCursor(bool)>
c0012d2c:	5a                   	pop    edx
c0012d2d:	59                   	pop    ecx
c0012d2e:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0012d31:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0012d34:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0012d37:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0012d3a:	6a 20                	push   0x20
c0012d3c:	53                   	push   ebx
c0012d3d:	e8 4a fd ff ff       	call   c0012a8c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0012d42:	83 c4 28             	add    esp,0x28
c0012d45:	5b                   	pop    ebx
c0012d46:	c3                   	ret    
c0012d47:	83 ec 08             	sub    esp,0x8
c0012d4a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0012d4d:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0012d50:	51                   	push   ecx
c0012d51:	52                   	push   edx
c0012d52:	50                   	push   eax
c0012d53:	53                   	push   ebx
c0012d54:	e8 33 fd ff ff       	call   c0012a8c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0012d59:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0012d5d:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0012d65:	83 c4 28             	add    esp,0x28
c0012d68:	5b                   	pop    ebx
c0012d69:	e9 ba fe ff ff       	jmp    c0012c28 <VgaText::incrementCursor(bool)>

c0012d6e <VgaText::putchar(char)>:
c0012d6e:	57                   	push   edi
c0012d6f:	56                   	push   esi
c0012d70:	53                   	push   ebx
c0012d71:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0012d75:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012d79:	0f be c2             	movsx  eax,dl
c0012d7c:	83 f8 5b             	cmp    eax,0x5b
c0012d7f:	75 18                	jne    c0012d99 <VgaText::putchar(char)+0x2b>
c0012d81:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0012d85:	74 20                	je     c0012da7 <VgaText::putchar(char)+0x39>
c0012d87:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c0012d8d:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c0012d94:	e9 b8 00 00 00       	jmp    c0012e51 <VgaText::putchar(char)+0xe3>
c0012d99:	83 f8 1b             	cmp    eax,0x1b
c0012d9c:	75 09                	jne    c0012da7 <VgaText::putchar(char)+0x39>
c0012d9e:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c0012da2:	e9 aa 00 00 00       	jmp    c0012e51 <VgaText::putchar(char)+0xe3>
c0012da7:	0f b6 7b 41          	movzx  edi,BYTE PTR [ebx+0x41]
c0012dab:	89 f9                	mov    ecx,edi
c0012dad:	84 c9                	test   cl,cl
c0012daf:	0f 84 8c 00 00 00    	je     c0012e41 <VgaText::putchar(char)+0xd3>
c0012db5:	8d 4a c0             	lea    ecx,[edx-0x40]
c0012db8:	80 f9 3e             	cmp    cl,0x3e
c0012dbb:	77 70                	ja     c0012e2d <VgaText::putchar(char)+0xbf>
c0012dbd:	83 f8 6d             	cmp    eax,0x6d
c0012dc0:	75 3f                	jne    c0012e01 <VgaText::putchar(char)+0x93>
c0012dc2:	31 f6                	xor    esi,esi
c0012dc4:	31 d2                	xor    edx,edx
c0012dc6:	31 c0                	xor    eax,eax
c0012dc8:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c0012dcb:	7e 25                	jle    c0012df2 <VgaText::putchar(char)+0x84>
c0012dcd:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c0012dd2:	83 fa 3b             	cmp    edx,0x3b
c0012dd5:	75 0f                	jne    c0012de6 <VgaText::putchar(char)+0x78>
c0012dd7:	50                   	push   eax
c0012dd8:	53                   	push   ebx
c0012dd9:	e8 2c fb ff ff       	call   c001290a <VgaText::doANSI_SGR(int)>
c0012dde:	31 d2                	xor    edx,edx
c0012de0:	59                   	pop    ecx
c0012de1:	58                   	pop    eax
c0012de2:	31 c0                	xor    eax,eax
c0012de4:	eb 09                	jmp    c0012def <VgaText::putchar(char)+0x81>
c0012de6:	6b c0 0a             	imul   eax,eax,0xa
c0012de9:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0012ded:	89 fa                	mov    edx,edi
c0012def:	46                   	inc    esi
c0012df0:	eb d6                	jmp    c0012dc8 <VgaText::putchar(char)+0x5a>
c0012df2:	84 d2                	test   dl,dl
c0012df4:	74 2f                	je     c0012e25 <VgaText::putchar(char)+0xb7>
c0012df6:	50                   	push   eax
c0012df7:	53                   	push   ebx
c0012df8:	e8 0d fb ff ff       	call   c001290a <VgaText::doANSI_SGR(int)>
c0012dfd:	58                   	pop    eax
c0012dfe:	5a                   	pop    edx
c0012dff:	eb 24                	jmp    c0012e25 <VgaText::putchar(char)+0xb7>
c0012e01:	83 f8 4a             	cmp    eax,0x4a
c0012e04:	75 1f                	jne    c0012e25 <VgaText::putchar(char)+0xb7>
c0012e06:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0012e0a:	75 19                	jne    c0012e25 <VgaText::putchar(char)+0xb7>
c0012e0c:	83 ec 0c             	sub    esp,0xc
c0012e0f:	53                   	push   ebx
c0012e10:	e8 95 fd ff ff       	call   c0012baa <VgaText::clearScreen()>
c0012e15:	83 c4 0c             	add    esp,0xc
c0012e18:	6a 00                	push   0x0
c0012e1a:	6a 00                	push   0x0
c0012e1c:	53                   	push   ebx
c0012e1d:	e8 26 fd ff ff       	call   c0012b48 <VgaText::setCursor(int, int)>
c0012e22:	83 c4 10             	add    esp,0x10
c0012e25:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0012e2b:	eb 24                	jmp    c0012e51 <VgaText::putchar(char)+0xe3>
c0012e2d:	8b 43 54             	mov    eax,DWORD PTR [ebx+0x54]
c0012e30:	83 f8 0e             	cmp    eax,0xe
c0012e33:	7f 1c                	jg     c0012e51 <VgaText::putchar(char)+0xe3>
c0012e35:	8d 48 01             	lea    ecx,[eax+0x1]
c0012e38:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0012e3b:	88 54 03 42          	mov    BYTE PTR [ebx+eax*1+0x42],dl
c0012e3f:	eb 10                	jmp    c0012e51 <VgaText::putchar(char)+0xe3>
c0012e41:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0012e44:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0012e47:	50                   	push   eax
c0012e48:	53                   	push   ebx
c0012e49:	e8 50 fe ff ff       	call   c0012c9e <VgaText::putchar(char, VgaColour, VgaColour)>
c0012e4e:	83 c4 10             	add    esp,0x10
c0012e51:	5b                   	pop    ebx
c0012e52:	5e                   	pop    esi
c0012e53:	5f                   	pop    edi
c0012e54:	c3                   	ret    
c0012e55:	90                   	nop

c0012e56 <VgaText::putx(unsigned int)>:
c0012e56:	57                   	push   edi
c0012e57:	b9 11 00 00 00       	mov    ecx,0x11
c0012e5c:	56                   	push   esi
c0012e5d:	be d0 b9 02 c0       	mov    esi,0xc002b9d0
c0012e62:	53                   	push   ebx
c0012e63:	83 ec 20             	sub    esp,0x20
c0012e66:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0012e6a:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0012e6e:	fc                   	cld    
c0012e6f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012e71:	be 08 00 00 00       	mov    esi,0x8
c0012e76:	50                   	push   eax
c0012e77:	50                   	push   eax
c0012e78:	89 d8                	mov    eax,ebx
c0012e7a:	c1 e8 1c             	shr    eax,0x1c
c0012e7d:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0012e82:	c1 e3 04             	shl    ebx,0x4
c0012e85:	50                   	push   eax
c0012e86:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012e8a:	e8 df fe ff ff       	call   c0012d6e <VgaText::putchar(char)>
c0012e8f:	83 c4 10             	add    esp,0x10
c0012e92:	4e                   	dec    esi
c0012e93:	75 e1                	jne    c0012e76 <VgaText::putx(unsigned int)+0x20>
c0012e95:	83 c4 20             	add    esp,0x20
c0012e98:	5b                   	pop    ebx
c0012e99:	5e                   	pop    esi
c0012e9a:	5f                   	pop    edi
c0012e9b:	c3                   	ret    

c0012e9c <VgaText::puts(char const*)>:
c0012e9c:	53                   	push   ebx
c0012e9d:	83 ec 08             	sub    esp,0x8
c0012ea0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012ea4:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012ea7:	85 c0                	test   eax,eax
c0012ea9:	74 12                	je     c0012ebd <VgaText::puts(char const*)+0x21>
c0012eab:	51                   	push   ecx
c0012eac:	43                   	inc    ebx
c0012ead:	51                   	push   ecx
c0012eae:	50                   	push   eax
c0012eaf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012eb3:	e8 b6 fe ff ff       	call   c0012d6e <VgaText::putchar(char)>
c0012eb8:	83 c4 10             	add    esp,0x10
c0012ebb:	eb e7                	jmp    c0012ea4 <VgaText::puts(char const*)+0x8>
c0012ebd:	83 c4 08             	add    esp,0x8
c0012ec0:	5b                   	pop    ebx
c0012ec1:	c3                   	ret    

c0012ec2 <VgaText::write(unsigned long long, void*, int*)>:
c0012ec2:	55                   	push   ebp
c0012ec3:	57                   	push   edi
c0012ec4:	56                   	push   esi
c0012ec5:	53                   	push   ebx
c0012ec6:	83 ec 0c             	sub    esp,0xc
c0012ec9:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012ecd:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0012ed1:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0012ed5:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0012edc:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0012edf:	39 eb                	cmp    ebx,ebp
c0012ee1:	74 13                	je     c0012ef6 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0012ee3:	50                   	push   eax
c0012ee4:	43                   	inc    ebx
c0012ee5:	50                   	push   eax
c0012ee6:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0012eea:	50                   	push   eax
c0012eeb:	56                   	push   esi
c0012eec:	e8 7d fe ff ff       	call   c0012d6e <VgaText::putchar(char)>
c0012ef1:	83 c4 10             	add    esp,0x10
c0012ef4:	eb e9                	jmp    c0012edf <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0012ef6:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0012efd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012f01:	89 38                	mov    DWORD PTR [eax],edi
c0012f03:	83 c4 0c             	add    esp,0xc
c0012f06:	31 c0                	xor    eax,eax
c0012f08:	5b                   	pop    ebx
c0012f09:	5e                   	pop    esi
c0012f0a:	5f                   	pop    edi
c0012f0b:	5d                   	pop    ebp
c0012f0c:	c3                   	ret    
c0012f0d:	90                   	nop

c0012f0e <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0012f0e:	55                   	push   ebp
c0012f0f:	57                   	push   edi
c0012f10:	56                   	push   esi
c0012f11:	53                   	push   ebx
c0012f12:	83 ec 1c             	sub    esp,0x1c
c0012f15:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012f19:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0012f1d:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0012f21:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0012f25:	8b 5f 0c             	mov    ebx,DWORD PTR [edi+0xc]
c0012f28:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012f2c:	85 db                	test   ebx,ebx
c0012f2e:	75 14                	jne    c0012f44 <VgaText::puts(char const*, VgaColour, VgaColour)+0x36>
c0012f30:	c7 44 24 30 e1 b9 02 c0 	mov    DWORD PTR [esp+0x30],0xc002b9e1
c0012f38:	83 c4 1c             	add    esp,0x1c
c0012f3b:	5b                   	pop    ebx
c0012f3c:	5e                   	pop    esi
c0012f3d:	5f                   	pop    edi
c0012f3e:	5d                   	pop    ebp
c0012f3f:	e9 1c d6 ff ff       	jmp    c0010560 <KePanic(char const*)>
c0012f44:	c6 87 81 00 00 00 01 	mov    BYTE PTR [edi+0x81],0x1
c0012f4b:	50                   	push   eax
c0012f4c:	50                   	push   eax
c0012f4d:	89 e8                	mov    eax,ebp
c0012f4f:	0f b6 c0             	movzx  eax,al
c0012f52:	50                   	push   eax
c0012f53:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0012f58:	50                   	push   eax
c0012f59:	e8 7a fa ff ff       	call   c00129d8 <VgaText::combineColours(unsigned char, unsigned char)>
c0012f5e:	83 c4 10             	add    esp,0x10
c0012f61:	6b 4f 18 50          	imul   ecx,DWORD PTR [edi+0x18],0x50
c0012f65:	03 4f 14             	add    ecx,DWORD PTR [edi+0x14]
c0012f68:	0f b6 c0             	movzx  eax,al
c0012f6b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012f6f:	0f b7 c9             	movzx  ecx,cx
c0012f72:	01 c9                	add    ecx,ecx
c0012f74:	01 cb                	add    ebx,ecx
c0012f76:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0012f79:	85 c0                	test   eax,eax
c0012f7b:	0f 84 ef 00 00 00    	je     c0013070 <VgaText::puts(char const*, VgaColour, VgaColour)+0x162>
c0012f81:	83 f8 0d             	cmp    eax,0xd
c0012f84:	75 0c                	jne    c0012f92 <VgaText::puts(char const*, VgaColour, VgaColour)+0x84>
c0012f86:	c7 47 14 00 00 00 00 	mov    DWORD PTR [edi+0x14],0x0
c0012f8d:	e9 d8 00 00 00       	jmp    c001306a <VgaText::puts(char const*, VgaColour, VgaColour)+0x15c>
c0012f92:	83 f8 0a             	cmp    eax,0xa
c0012f95:	75 44                	jne    c0012fdb <VgaText::puts(char const*, VgaColour, VgaColour)+0xcd>
c0012f97:	c7 47 14 00 00 00 00 	mov    DWORD PTR [edi+0x14],0x0
c0012f9e:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c0012fa1:	8d 48 01             	lea    ecx,[eax+0x1]
c0012fa4:	3b 4f 10             	cmp    ecx,DWORD PTR [edi+0x10]
c0012fa7:	89 4f 18             	mov    DWORD PTR [edi+0x18],ecx
c0012faa:	75 0f                	jne    c0012fbb <VgaText::puts(char const*, VgaColour, VgaColour)+0xad>
c0012fac:	89 47 18             	mov    DWORD PTR [edi+0x18],eax
c0012faf:	83 ec 0c             	sub    esp,0xc
c0012fb2:	57                   	push   edi
c0012fb3:	e8 32 fa ff ff       	call   c00129ea <VgaText::scrollScreen()>
c0012fb8:	83 c4 10             	add    esp,0x10
c0012fbb:	83 ec 0c             	sub    esp,0xc
c0012fbe:	57                   	push   edi
c0012fbf:	e8 30 f9 ff ff       	call   c00128f4 <VgaText::updateCursor()>
c0012fc4:	83 c4 10             	add    esp,0x10
c0012fc7:	6b 5f 18 50          	imul   ebx,DWORD PTR [edi+0x18],0x50
c0012fcb:	03 5f 14             	add    ebx,DWORD PTR [edi+0x14]
c0012fce:	0f b7 db             	movzx  ebx,bx
c0012fd1:	01 db                	add    ebx,ebx
c0012fd3:	03 5f 0c             	add    ebx,DWORD PTR [edi+0xc]
c0012fd6:	e9 8f 00 00 00       	jmp    c001306a <VgaText::puts(char const*, VgaColour, VgaColour)+0x15c>
c0012fdb:	83 f8 08             	cmp    eax,0x8
c0012fde:	75 34                	jne    c0013014 <VgaText::puts(char const*, VgaColour, VgaColour)+0x106>
c0012fe0:	51                   	push   ecx
c0012fe1:	51                   	push   ecx
c0012fe2:	6a 01                	push   0x1
c0012fe4:	57                   	push   edi
c0012fe5:	e8 92 fc ff ff       	call   c0012c7c <VgaText::decrementCursor(bool)>
c0012fea:	5b                   	pop    ebx
c0012feb:	58                   	pop    eax
c0012fec:	ff 77 18             	push   DWORD PTR [edi+0x18]
c0012fef:	ff 77 14             	push   DWORD PTR [edi+0x14]
c0012ff2:	ff 77 30             	push   DWORD PTR [edi+0x30]
c0012ff5:	ff 77 34             	push   DWORD PTR [edi+0x34]
c0012ff8:	6a 20                	push   0x20
c0012ffa:	57                   	push   edi
c0012ffb:	e8 8c fa ff ff       	call   c0012a8c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0013000:	83 c4 20             	add    esp,0x20
c0013003:	6b 5f 18 50          	imul   ebx,DWORD PTR [edi+0x18],0x50
c0013007:	03 5f 14             	add    ebx,DWORD PTR [edi+0x14]
c001300a:	0f b7 db             	movzx  ebx,bx
c001300d:	01 db                	add    ebx,ebx
c001300f:	03 5f 0c             	add    ebx,DWORD PTR [edi+0xc]
c0013012:	eb 56                	jmp    c001306a <VgaText::puts(char const*, VgaColour, VgaColour)+0x15c>
c0013014:	52                   	push   edx
c0013015:	52                   	push   edx
c0013016:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001301a:	50                   	push   eax
c001301b:	e8 5c fa ff ff       	call   c0012a7c <VgaText::combineCharAndColour(char, unsigned char)>
c0013020:	83 c4 10             	add    esp,0x10
c0013023:	66 89 03             	mov    WORD PTR [ebx],ax
c0013026:	39 3d f4 61 03 c0    	cmp    DWORD PTR ds:0xc00361f4,edi
c001302c:	75 1a                	jne    c0013048 <VgaText::puts(char const*, VgaColour, VgaColour)+0x13a>
c001302e:	83 ec 0c             	sub    esp,0xc
c0013031:	ff 77 18             	push   DWORD PTR [edi+0x18]
c0013034:	ff 77 14             	push   DWORD PTR [edi+0x14]
c0013037:	55                   	push   ebp
c0013038:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001303c:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001303f:	50                   	push   eax
c0013040:	e8 fb 93 00 00       	call   c001c440 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0013045:	83 c4 20             	add    esp,0x20
c0013048:	50                   	push   eax
c0013049:	83 c3 02             	add    ebx,0x2
c001304c:	50                   	push   eax
c001304d:	6a 00                	push   0x0
c001304f:	57                   	push   edi
c0013050:	e8 d3 fb ff ff       	call   c0012c28 <VgaText::incrementCursor(bool)>
c0013055:	83 c4 10             	add    esp,0x10
c0013058:	83 7f 14 00          	cmp    DWORD PTR [edi+0x14],0x0
c001305c:	75 0c                	jne    c001306a <VgaText::puts(char const*, VgaColour, VgaColour)+0x15c>
c001305e:	6b 5f 18 50          	imul   ebx,DWORD PTR [edi+0x18],0x50
c0013062:	0f b7 db             	movzx  ebx,bx
c0013065:	01 db                	add    ebx,ebx
c0013067:	03 5f 0c             	add    ebx,DWORD PTR [edi+0xc]
c001306a:	46                   	inc    esi
c001306b:	e9 06 ff ff ff       	jmp    c0012f76 <VgaText::puts(char const*, VgaColour, VgaColour)+0x68>
c0013070:	83 ec 0c             	sub    esp,0xc
c0013073:	57                   	push   edi
c0013074:	e8 7b f8 ff ff       	call   c00128f4 <VgaText::updateCursor()>
c0013079:	c6 87 81 00 00 00 00 	mov    BYTE PTR [edi+0x81],0x0
c0013080:	83 c4 2c             	add    esp,0x2c
c0013083:	5b                   	pop    ebx
c0013084:	5e                   	pop    esi
c0013085:	5f                   	pop    edi
c0013086:	5d                   	pop    ebp
c0013087:	c3                   	ret    

c0013088 <VgaText::VgaText(char const*)>:
c0013088:	56                   	push   esi
c0013089:	53                   	push   ebx
c001308a:	83 ec 04             	sub    esp,0x4
c001308d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013091:	83 ec 08             	sub    esp,0x8
c0013094:	6a 00                	push   0x0
c0013096:	50                   	push   eax
c0013097:	e8 b8 05 00 00       	call   c0013654 <UnixFile::UnixFile(int)>
c001309c:	83 c4 10             	add    esp,0x10
c001309f:	ba 18 ba 02 c0       	mov    edx,0xc002ba18
c00130a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130a8:	89 10                	mov    DWORD PTR [eax],edx
c00130aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130ae:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c00130b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130b9:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c00130c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130c4:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c00130c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130cc:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c00130d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130d4:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c00130db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130df:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c00130e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130ea:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c00130f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130f5:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c00130fc:	83 ec 0c             	sub    esp,0xc
c00130ff:	68 f1 b9 02 c0       	push   0xc002b9f1
c0013104:	e8 5d 3e ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0013109:	83 c4 10             	add    esp,0x10
c001310c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013110:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c0013117:	83 ec 0c             	sub    esp,0xc
c001311a:	6a 01                	push   0x1
c001311c:	e8 86 09 00 00       	call   c0013aa7 <Virt::allocateKernelVirtualPages(int)>
c0013121:	83 c4 10             	add    esp,0x10
c0013124:	89 c2                	mov    edx,eax
c0013126:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001312a:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001312d:	8b 1d 90 62 03 c0    	mov    ebx,DWORD PTR ds:0xc0036290
c0013133:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013137:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001313a:	89 c6                	mov    esi,eax
c001313c:	e8 19 d6 ff ff       	call   c001075a <Phys::allocatePage()>
c0013141:	68 05 0c 00 00       	push   0xc05
c0013146:	56                   	push   esi
c0013147:	50                   	push   eax
c0013148:	53                   	push   ebx
c0013149:	e8 32 10 00 00       	call   c0014180 <VAS::mapPage(unsigned long, unsigned long, int)>
c001314e:	83 c4 10             	add    esp,0x10
c0013151:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013155:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013158:	83 ec 04             	sub    esp,0x4
c001315b:	68 a0 0f 00 00       	push   0xfa0
c0013160:	6a 00                	push   0x0
c0013162:	50                   	push   eax
c0013163:	e8 88 d3 fe ff       	call   c00004f0 <memset>
c0013168:	83 c4 10             	add    esp,0x10
c001316b:	83 ec 04             	sub    esp,0x4
c001316e:	6a 00                	push   0x0
c0013170:	6a 07                	push   0x7
c0013172:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013176:	e8 23 f8 ff ff       	call   c001299e <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001317b:	83 c4 10             	add    esp,0x10
c001317e:	83 ec 04             	sub    esp,0x4
c0013181:	6a 00                	push   0x0
c0013183:	6a 00                	push   0x0
c0013185:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013189:	e8 ba f9 ff ff       	call   c0012b48 <VgaText::setCursor(int, int)>
c001318e:	83 c4 10             	add    esp,0x10
c0013191:	83 ec 0c             	sub    esp,0xc
c0013194:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013198:	e8 0d fa ff ff       	call   c0012baa <VgaText::clearScreen()>
c001319d:	83 c4 10             	add    esp,0x10
c00131a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00131a4:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c00131a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00131ac:	05 82 00 00 00       	add    eax,0x82
c00131b1:	83 ec 04             	sub    esp,0x4
c00131b4:	68 80 00 00 00       	push   0x80
c00131b9:	6a 00                	push   0x0
c00131bb:	50                   	push   eax
c00131bc:	e8 2f d3 fe ff       	call   c00004f0 <memset>
c00131c1:	83 c4 10             	add    esp,0x10
c00131c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00131c8:	05 02 01 00 00       	add    eax,0x102
c00131cd:	83 ec 04             	sub    esp,0x4
c00131d0:	68 80 00 00 00       	push   0x80
c00131d5:	6a 00                	push   0x0
c00131d7:	50                   	push   eax
c00131d8:	e8 13 d3 fe ff       	call   c00004f0 <memset>
c00131dd:	83 c4 10             	add    esp,0x10
c00131e0:	90                   	nop
c00131e1:	83 c4 04             	add    esp,0x4
c00131e4:	5b                   	pop    ebx
c00131e5:	5e                   	pop    esi
c00131e6:	c3                   	ret    
c00131e7:	90                   	nop

c00131e8 <VgaText::receiveKey(unsigned char)>:
c00131e8:	55                   	push   ebp
c00131e9:	57                   	push   edi
c00131ea:	56                   	push   esi
c00131eb:	53                   	push   ebx
c00131ec:	83 ec 2c             	sub    esp,0x2c
c00131ef:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00131f3:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00131f7:	89 fd                	mov    ebp,edi
c00131f9:	81 e5 ff 00 00 00    	and    ebp,0xff
c00131ff:	0f 84 48 01 00 00    	je     c001334d <VgaText::receiveKey(unsigned char)+0x165>
c0013205:	8d b3 82 00 00 00    	lea    esi,[ebx+0x82]
c001320b:	83 fd 08             	cmp    ebp,0x8
c001320e:	75 6a                	jne    c001327a <VgaText::receiveKey(unsigned char)+0x92>
c0013210:	83 ec 0c             	sub    esp,0xc
c0013213:	56                   	push   esi
c0013214:	e8 67 d3 fe ff       	call   c0000580 <strlen>
c0013219:	83 c4 10             	add    esp,0x10
c001321c:	85 c0                	test   eax,eax
c001321e:	0f 84 ef 00 00 00    	je     c0013313 <VgaText::receiveKey(unsigned char)+0x12b>
c0013224:	50                   	push   eax
c0013225:	50                   	push   eax
c0013226:	6a 08                	push   0x8
c0013228:	53                   	push   ebx
c0013229:	e8 40 fb ff ff       	call   c0012d6e <VgaText::putchar(char)>
c001322e:	89 34 24             	mov    DWORD PTR [esp],esi
c0013231:	e8 4a d3 fe ff       	call   c0000580 <strlen>
c0013236:	83 c4 10             	add    esp,0x10
c0013239:	0f be 94 03 81 00 00 00 	movsx  edx,BYTE PTR [ebx+eax*1+0x81]
c0013241:	83 fa 1f             	cmp    edx,0x1f
c0013244:	89 d0                	mov    eax,edx
c0013246:	7f 1c                	jg     c0013264 <VgaText::receiveKey(unsigned char)+0x7c>
c0013248:	83 e8 08             	sub    eax,0x8
c001324b:	3c 02                	cmp    al,0x2
c001324d:	76 15                	jbe    c0013264 <VgaText::receiveKey(unsigned char)+0x7c>
c001324f:	83 fa 0d             	cmp    edx,0xd
c0013252:	74 10                	je     c0013264 <VgaText::receiveKey(unsigned char)+0x7c>
c0013254:	57                   	push   edi
c0013255:	57                   	push   edi
c0013256:	68 04 ba 02 c0       	push   0xc002ba04
c001325b:	53                   	push   ebx
c001325c:	e8 3b fc ff ff       	call   c0012e9c <VgaText::puts(char const*)>
c0013261:	83 c4 10             	add    esp,0x10
c0013264:	83 ec 0c             	sub    esp,0xc
c0013267:	56                   	push   esi
c0013268:	e8 13 d3 fe ff       	call   c0000580 <strlen>
c001326d:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c0013275:	e9 96 00 00 00       	jmp    c0013310 <VgaText::receiveKey(unsigned char)+0x128>
c001327a:	8d 83 02 01 00 00    	lea    eax,[ebx+0x102]
c0013280:	83 ec 0c             	sub    esp,0xc
c0013283:	50                   	push   eax
c0013284:	e8 f7 d2 fe ff       	call   c0000580 <strlen>
c0013289:	89 34 24             	mov    DWORD PTR [esp],esi
c001328c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013290:	e8 eb d2 fe ff       	call   c0000580 <strlen>
c0013295:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013299:	83 c4 10             	add    esp,0x10
c001329c:	8d 44 02 03          	lea    eax,[edx+eax*1+0x3]
c00132a0:	3d 80 00 00 00       	cmp    eax,0x80
c00132a5:	0f 87 a2 00 00 00    	ja     c001334d <VgaText::receiveKey(unsigned char)+0x165>
c00132ab:	8d 47 ff             	lea    eax,[edi-0x1]
c00132ae:	3c 1e                	cmp    al,0x1e
c00132b0:	77 35                	ja     c00132e7 <VgaText::receiveKey(unsigned char)+0xff>
c00132b2:	8d 47 f7             	lea    eax,[edi-0x9]
c00132b5:	3c 01                	cmp    al,0x1
c00132b7:	76 2e                	jbe    c00132e7 <VgaText::receiveKey(unsigned char)+0xff>
c00132b9:	83 fd 0d             	cmp    ebp,0xd
c00132bc:	74 29                	je     c00132e7 <VgaText::receiveKey(unsigned char)+0xff>
c00132be:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00132c1:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00132c4:	68 0a ba 02 c0       	push   0xc002ba0a
c00132c9:	53                   	push   ebx
c00132ca:	e8 3f fc ff ff       	call   c0012f0e <VgaText::puts(char const*, VgaColour, VgaColour)>
c00132cf:	8d 47 40             	lea    eax,[edi+0x40]
c00132d2:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00132d5:	0f b6 c0             	movzx  eax,al
c00132d8:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00132db:	50                   	push   eax
c00132dc:	53                   	push   ebx
c00132dd:	e8 bc f9 ff ff       	call   c0012c9e <VgaText::putchar(char, VgaColour, VgaColour)>
c00132e2:	83 c4 20             	add    esp,0x20
c00132e5:	eb 11                	jmp    c00132f8 <VgaText::receiveKey(unsigned char)+0x110>
c00132e7:	51                   	push   ecx
c00132e8:	89 f8                	mov    eax,edi
c00132ea:	51                   	push   ecx
c00132eb:	0f be c0             	movsx  eax,al
c00132ee:	50                   	push   eax
c00132ef:	53                   	push   ebx
c00132f0:	e8 79 fa ff ff       	call   c0012d6e <VgaText::putchar(char)>
c00132f5:	83 c4 10             	add    esp,0x10
c00132f8:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00132fd:	89 f8                	mov    eax,edi
c00132ff:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0013303:	52                   	push   edx
c0013304:	52                   	push   edx
c0013305:	8d 44 24 26          	lea    eax,[esp+0x26]
c0013309:	50                   	push   eax
c001330a:	56                   	push   esi
c001330b:	e8 60 d5 fe ff       	call   c0000870 <strcat>
c0013310:	83 c4 10             	add    esp,0x10
c0013313:	80 bb 80 00 00 00 00 	cmp    BYTE PTR [ebx+0x80],0x0
c001331a:	75 0f                	jne    c001332b <VgaText::receiveKey(unsigned char)+0x143>
c001331c:	83 fd 1c             	cmp    ebp,0x1c
c001331f:	77 2c                	ja     c001334d <VgaText::receiveKey(unsigned char)+0x165>
c0013321:	b8 08 04 00 10       	mov    eax,0x10000408
c0013326:	0f a3 e8             	bt     eax,ebp
c0013329:	73 22                	jae    c001334d <VgaText::receiveKey(unsigned char)+0x165>
c001332b:	50                   	push   eax
c001332c:	81 c3 02 01 00 00    	add    ebx,0x102
c0013332:	50                   	push   eax
c0013333:	56                   	push   esi
c0013334:	53                   	push   ebx
c0013335:	e8 36 d5 fe ff       	call   c0000870 <strcat>
c001333a:	83 c4 0c             	add    esp,0xc
c001333d:	68 80 00 00 00       	push   0x80
c0013342:	6a 00                	push   0x0
c0013344:	56                   	push   esi
c0013345:	e8 a6 d1 fe ff       	call   c00004f0 <memset>
c001334a:	83 c4 10             	add    esp,0x10
c001334d:	83 c4 2c             	add    esp,0x2c
c0013350:	5b                   	pop    ebx
c0013351:	5e                   	pop    esi
c0013352:	5f                   	pop    edi
c0013353:	5d                   	pop    ebp
c0013354:	c3                   	ret    
c0013355:	90                   	nop

c0013356 <VgaText::doUpdate()>:
c0013356:	c3                   	ret    
c0013357:	90                   	nop

c0013358 <TSS::TSS()>:
c0013358:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001335c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013363:	90                   	nop
c0013364:	c3                   	ret    
c0013365:	90                   	nop
c0013366:	66 90                	xchg   ax,ax

c0013368 <TSS::setESP(unsigned long)>:
c0013368:	55                   	push   ebp
c0013369:	89 e5                	mov    ebp,esp
c001336b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001336e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013371:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0013374:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0013377:	90                   	nop
c0013378:	5d                   	pop    ebp
c0013379:	c3                   	ret    
c001337a:	66 90                	xchg   ax,ax

c001337c <TSS::flush()>:
c001337c:	55                   	push   ebp
c001337d:	89 e5                	mov    ebp,esp
c001337f:	83 ec 10             	sub    esp,0x10
c0013382:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0013385:	8b 00                	mov    eax,DWORD PTR [eax]
c0013387:	83 c8 03             	or     eax,0x3
c001338a:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c001338e:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0013392:	66 89 d0             	mov    ax,dx
c0013395:	0f 00 d8             	ltr    ax
c0013398:	90                   	nop
c0013399:	c9                   	leave  
c001339a:	c3                   	ret    
c001339b:	90                   	nop

c001339c <TSS::setup(unsigned long, unsigned long)>:
c001339c:	55                   	push   ebp
c001339d:	89 e5                	mov    ebp,esp
c001339f:	83 ec 18             	sub    esp,0x18
c00133a2:	83 ec 0c             	sub    esp,0xc
c00133a5:	6a 68                	push   0x68
c00133a7:	e8 60 cd ff ff       	call   c001010c <malloc>
c00133ac:	83 c4 10             	add    esp,0x10
c00133af:	89 c2                	mov    edx,eax
c00133b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00133b4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00133b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00133ba:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00133bd:	83 ec 08             	sub    esp,0x8
c00133c0:	50                   	push   eax
c00133c1:	68 2c ba 02 c0       	push   0xc002ba2c
c00133c6:	e8 9b 3b ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00133cb:	83 c4 10             	add    esp,0x10
c00133ce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00133d1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00133d4:	83 ec 04             	sub    esp,0x4
c00133d7:	6a 68                	push   0x68
c00133d9:	6a 00                	push   0x0
c00133db:	50                   	push   eax
c00133dc:	e8 0f d1 fe ff       	call   c00004f0 <memset>
c00133e1:	83 c4 10             	add    esp,0x10
c00133e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00133e7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00133ea:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c00133f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00133f3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00133f6:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c00133fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00133ff:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013402:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0013405:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0013408:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001340b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001340e:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0013414:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0013417:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001341a:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0013420:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0013423:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013426:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c001342c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001342f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013432:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0013438:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001343b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001343e:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0013444:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0013447:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001344a:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0013450:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0013453:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013456:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0013459:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001345c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001345f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013462:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0013465:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0013468:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001346b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001346e:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0013475:	83 ec 0c             	sub    esp,0xc
c0013478:	68 43 ba 02 c0       	push   0xc002ba43
c001347d:	e8 e4 3a ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0013482:	83 c4 10             	add    esp,0x10
c0013485:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0013488:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001348b:	0f 20 da             	mov    edx,cr3
c001348e:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0013491:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0013494:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0013497:	83 ec 0c             	sub    esp,0xc
c001349a:	68 46 ba 02 c0       	push   0xc002ba46
c001349f:	e8 c2 3a ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00134a4:	83 c4 10             	add    esp,0x10
c00134a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00134aa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00134ad:	83 ec 08             	sub    esp,0x8
c00134b0:	50                   	push   eax
c00134b1:	8d 45 ec             	lea    eax,[ebp-0x14]
c00134b4:	50                   	push   eax
c00134b5:	e8 a2 bd ff ff       	call   c000f25c <GDTEntry::setBase(unsigned int)>
c00134ba:	83 c4 10             	add    esp,0x10
c00134bd:	83 ec 08             	sub    esp,0x8
c00134c0:	6a 68                	push   0x68
c00134c2:	8d 45 ec             	lea    eax,[ebp-0x14]
c00134c5:	50                   	push   eax
c00134c6:	e8 ad bd ff ff       	call   c000f278 <GDTEntry::setLimit(unsigned int)>
c00134cb:	83 c4 10             	add    esp,0x10
c00134ce:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c00134d2:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c00134d5:	83 e0 0f             	and    eax,0xf
c00134d8:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c00134db:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c00134de:	83 c8 40             	or     eax,0x40
c00134e1:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c00134e4:	83 ec 0c             	sub    esp,0xc
c00134e7:	68 49 ba 02 c0       	push   0xc002ba49
c00134ec:	e8 75 3a ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00134f1:	83 c4 10             	add    esp,0x10
c00134f4:	a1 08 61 03 c0       	mov    eax,ds:0xc0036108
c00134f9:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00134ff:	83 ec 08             	sub    esp,0x8
c0013502:	50                   	push   eax
c0013503:	68 4c ba 02 c0       	push   0xc002ba4c
c0013508:	e8 59 3a ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001350d:	83 c4 10             	add    esp,0x10
c0013510:	a1 08 61 03 c0       	mov    eax,ds:0xc0036108
c0013515:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001351b:	05 64 01 00 00       	add    eax,0x164
c0013520:	83 ec 04             	sub    esp,0x4
c0013523:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0013526:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0013529:	50                   	push   eax
c001352a:	e8 7d bd ff ff       	call   c000f2ac <GDT::addEntry(GDTEntry)>
c001352f:	83 c4 10             	add    esp,0x10
c0013532:	89 c2                	mov    edx,eax
c0013534:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0013537:	89 10                	mov    DWORD PTR [eax],edx
c0013539:	83 ec 0c             	sub    esp,0xc
c001353c:	68 61 ba 02 c0       	push   0xc002ba61
c0013541:	e8 20 3a ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0013546:	83 c4 10             	add    esp,0x10
c0013549:	a1 08 61 03 c0       	mov    eax,ds:0xc0036108
c001354e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0013554:	05 64 01 00 00       	add    eax,0x164
c0013559:	83 ec 0c             	sub    esp,0xc
c001355c:	50                   	push   eax
c001355d:	e8 74 bd ff ff       	call   c000f2d6 <GDT::flush()>
c0013562:	83 c4 10             	add    esp,0x10
c0013565:	83 ec 0c             	sub    esp,0xc
c0013568:	68 64 ba 02 c0       	push   0xc002ba64
c001356d:	e8 f4 39 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0013572:	83 c4 10             	add    esp,0x10
c0013575:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0013578:	8b 00                	mov    eax,DWORD PTR [eax]
c001357a:	c9                   	leave  
c001357b:	c3                   	ret    

c001357c <ReservedFilename::read(unsigned long long, void*, int*)>:
c001357c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013580:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0013584:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013587:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c001358c:	75 08                	jne    c0013596 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c001358e:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0013594:	eb 38                	jmp    c00135ce <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0013596:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001359b:	75 17                	jne    c00135b4 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c001359d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00135a2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00135a5:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c00135ab:	8b 10                	mov    edx,DWORD PTR [eax]
c00135ad:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00135b1:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c00135b4:	89 c1                	mov    ecx,eax
c00135b6:	83 e1 fd             	and    ecx,0xfffffffd
c00135b9:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c00135bf:	74 cd                	je     c001358e <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c00135c1:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00135c6:	83 e0 ef             	and    eax,0xffffffef
c00135c9:	83 f8 08             	cmp    eax,0x8
c00135cc:	76 c0                	jbe    c001358e <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c00135ce:	31 c0                	xor    eax,eax
c00135d0:	c3                   	ret    
c00135d1:	90                   	nop

c00135d2 <ReservedFilename::isAtty()>:
c00135d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00135d6:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00135d9:	31 c0                	xor    eax,eax
c00135db:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c00135e1:	74 09                	je     c00135ec <ReservedFilename::isAtty()+0x1a>
c00135e3:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c00135e9:	0f 94 c0             	sete   al
c00135ec:	c3                   	ret    
c00135ed:	90                   	nop

c00135ee <ReservedFilename::write(unsigned long long, void*, int*)>:
c00135ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00135f2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00135f6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00135fa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00135fd:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0013602:	75 08                	jne    c001360c <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0013604:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c001360a:	eb 3d                	jmp    c0013649 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c001360c:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0013611:	75 17                	jne    c001362a <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0013613:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013618:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001361b:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0013621:	8b 10                	mov    edx,DWORD PTR [eax]
c0013623:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013627:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c001362a:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001362f:	75 04                	jne    c0013635 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0013631:	89 0a                	mov    DWORD PTR [edx],ecx
c0013633:	eb 14                	jmp    c0013649 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0013635:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c001363a:	74 c8                	je     c0013604 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c001363c:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0013641:	83 e0 ef             	and    eax,0xffffffef
c0013644:	83 f8 08             	cmp    eax,0x8
c0013647:	76 bb                	jbe    c0013604 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0013649:	31 c0                	xor    eax,eax
c001364b:	c3                   	ret    

c001364c <UnixFile::getFileDescriptor()>:
c001364c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013650:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013653:	c3                   	ret    

c0013654 <UnixFile::UnixFile(int)>:
c0013654:	53                   	push   ebx
c0013655:	83 ec 28             	sub    esp,0x28
c0013658:	ba 90 ba 02 c0       	mov    edx,0xc002ba90
c001365d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013661:	89 10                	mov    DWORD PTR [eax],edx
c0013663:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c001366b:	0f 8f 90 01 00 00    	jg     c0013801 <UnixFile::UnixFile(int)+0x1ad>
c0013671:	a1 20 fd 02 c0       	mov    eax,ds:0xc002fd20
c0013676:	8d 50 01             	lea    edx,[eax+0x1]
c0013679:	89 15 20 fd 02 c0    	mov    DWORD PTR ds:0xc002fd20,edx
c001367f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0013683:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0013686:	83 ec 08             	sub    esp,0x8
c0013689:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001368d:	68 78 62 03 c0       	push   0xc0036278
c0013692:	e8 2f 5b 01 00       	call   c00291c6 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0013697:	83 c4 10             	add    esp,0x10
c001369a:	a0 74 62 03 c0       	mov    al,ds:0xc0036274
c001369f:	83 f0 01             	xor    eax,0x1
c00136a2:	0f b6 c0             	movzx  eax,al
c00136a5:	85 c0                	test   eax,eax
c00136a7:	0f 84 55 01 00 00    	je     c0013802 <UnixFile::UnixFile(int)+0x1ae>
c00136ad:	c6 05 74 62 03 c0 01 	mov    BYTE PTR ds:0xc0036274,0x1
c00136b4:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c00136bc:	83 ec 0c             	sub    esp,0xc
c00136bf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00136c3:	e8 44 ca ff ff       	call   c001010c <malloc>
c00136c8:	83 c4 10             	add    esp,0x10
c00136cb:	89 c3                	mov    ebx,eax
c00136cd:	83 ec 08             	sub    esp,0x8
c00136d0:	68 03 ff ff 0f       	push   0xfffff03
c00136d5:	53                   	push   ebx
c00136d6:	e8 2d 01 00 00       	call   c0013808 <ReservedFilename::ReservedFilename(int)>
c00136db:	83 c4 10             	add    esp,0x10
c00136de:	89 1d 6c 62 03 c0    	mov    DWORD PTR ds:0xc003626c,ebx
c00136e4:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c00136ec:	83 ec 0c             	sub    esp,0xc
c00136ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00136f3:	e8 14 ca ff ff       	call   c001010c <malloc>
c00136f8:	83 c4 10             	add    esp,0x10
c00136fb:	89 c3                	mov    ebx,eax
c00136fd:	83 ec 08             	sub    esp,0x8
c0013700:	68 01 ff ff 0f       	push   0xfffff01
c0013705:	53                   	push   ebx
c0013706:	e8 fd 00 00 00       	call   c0013808 <ReservedFilename::ReservedFilename(int)>
c001370b:	83 c4 10             	add    esp,0x10
c001370e:	89 1d 70 62 03 c0    	mov    DWORD PTR ds:0xc0036270,ebx
c0013714:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c001371c:	83 ec 0c             	sub    esp,0xc
c001371f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013723:	e8 e4 c9 ff ff       	call   c001010c <malloc>
c0013728:	83 c4 10             	add    esp,0x10
c001372b:	89 c3                	mov    ebx,eax
c001372d:	83 ec 08             	sub    esp,0x8
c0013730:	68 00 ff ff 0f       	push   0xfffff00
c0013735:	53                   	push   ebx
c0013736:	e8 cd 00 00 00       	call   c0013808 <ReservedFilename::ReservedFilename(int)>
c001373b:	83 c4 10             	add    esp,0x10
c001373e:	89 1d 64 62 03 c0    	mov    DWORD PTR ds:0xc0036264,ebx
c0013744:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c001374c:	83 ec 0c             	sub    esp,0xc
c001374f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0013753:	e8 b4 c9 ff ff       	call   c001010c <malloc>
c0013758:	83 c4 10             	add    esp,0x10
c001375b:	89 c3                	mov    ebx,eax
c001375d:	83 ec 08             	sub    esp,0x8
c0013760:	68 02 ff ff 0f       	push   0xfffff02
c0013765:	53                   	push   ebx
c0013766:	e8 9d 00 00 00       	call   c0013808 <ReservedFilename::ReservedFilename(int)>
c001376b:	83 c4 10             	add    esp,0x10
c001376e:	89 1d 68 62 03 c0    	mov    DWORD PTR ds:0xc0036268,ebx
c0013774:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001377c:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0013781:	7f 7f                	jg     c0013802 <UnixFile::UnixFile(int)+0x1ae>
c0013783:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c001378b:	83 ec 0c             	sub    esp,0xc
c001378e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013792:	e8 75 c9 ff ff       	call   c001010c <malloc>
c0013797:	83 c4 10             	add    esp,0x10
c001379a:	89 c3                	mov    ebx,eax
c001379c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00137a0:	05 10 ff ff 0f       	add    eax,0xfffff10
c00137a5:	83 ec 08             	sub    esp,0x8
c00137a8:	50                   	push   eax
c00137a9:	53                   	push   ebx
c00137aa:	e8 59 00 00 00       	call   c0013808 <ReservedFilename::ReservedFilename(int)>
c00137af:	83 c4 10             	add    esp,0x10
c00137b2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00137b6:	89 1c 85 40 62 03 c0 	mov    DWORD PTR [eax*4-0x3ffc9dc0],ebx
c00137bd:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c00137c5:	83 ec 0c             	sub    esp,0xc
c00137c8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00137cc:	e8 3b c9 ff ff       	call   c001010c <malloc>
c00137d1:	83 c4 10             	add    esp,0x10
c00137d4:	89 c3                	mov    ebx,eax
c00137d6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00137da:	05 20 ff ff 0f       	add    eax,0xfffff20
c00137df:	83 ec 08             	sub    esp,0x8
c00137e2:	50                   	push   eax
c00137e3:	53                   	push   ebx
c00137e4:	e8 1f 00 00 00       	call   c0013808 <ReservedFilename::ReservedFilename(int)>
c00137e9:	83 c4 10             	add    esp,0x10
c00137ec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00137f0:	89 1c 85 00 62 03 c0 	mov    DWORD PTR [eax*4-0x3ffc9e00],ebx
c00137f7:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c00137fc:	e9 7b ff ff ff       	jmp    c001377c <UnixFile::UnixFile(int)+0x128>
c0013801:	90                   	nop
c0013802:	83 c4 28             	add    esp,0x28
c0013805:	5b                   	pop    ebx
c0013806:	c3                   	ret    
c0013807:	90                   	nop

c0013808 <ReservedFilename::ReservedFilename(int)>:
c0013808:	83 ec 0c             	sub    esp,0xc
c001380b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001380f:	83 ec 08             	sub    esp,0x8
c0013812:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013816:	50                   	push   eax
c0013817:	e8 38 fe ff ff       	call   c0013654 <UnixFile::UnixFile(int)>
c001381c:	83 c4 10             	add    esp,0x10
c001381f:	ba ac ba 02 c0       	mov    edx,0xc002baac
c0013824:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013828:	89 10                	mov    DWORD PTR [eax],edx
c001382a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001382e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0013832:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0013835:	90                   	nop
c0013836:	83 c4 0c             	add    esp,0xc
c0013839:	c3                   	ret    

c001383a <UnixFile::~UnixFile()>:
c001383a:	83 ec 1c             	sub    esp,0x1c
c001383d:	ba 90 ba 02 c0       	mov    edx,0xc002ba90
c0013842:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013846:	89 10                	mov    DWORD PTR [eax],edx
c0013848:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001384c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001384f:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c0013854:	7f 76                	jg     c00138cc <UnixFile::~UnixFile()+0x92>
c0013856:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001385e:	83 ec 0c             	sub    esp,0xc
c0013861:	68 78 62 03 c0       	push   0xc0036278
c0013866:	e8 2f 5a 01 00       	call   c002929a <LinkedList<UnixFile>::getFirstElement()>
c001386b:	83 c4 10             	add    esp,0x10
c001386e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013872:	83 ec 0c             	sub    esp,0xc
c0013875:	68 78 62 03 c0       	push   0xc0036278
c001387a:	e8 23 5a 01 00       	call   c00292a2 <LinkedList<UnixFile>::removeFirst()>
c001387f:	83 c4 10             	add    esp,0x10
c0013882:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013886:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c001388a:	74 43                	je     c00138cf <UnixFile::~UnixFile()+0x95>
c001388c:	83 ec 08             	sub    esp,0x8
c001388f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013893:	68 78 62 03 c0       	push   0xc0036278
c0013898:	e8 29 59 01 00       	call   c00291c6 <LinkedList<UnixFile>::addElement(UnixFile*)>
c001389d:	83 c4 10             	add    esp,0x10
c00138a0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00138a4:	8d 50 01             	lea    edx,[eax+0x1]
c00138a7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00138ab:	3d 20 a1 07 00       	cmp    eax,0x7a120
c00138b0:	0f 94 c0             	sete   al
c00138b3:	0f b6 c0             	movzx  eax,al
c00138b6:	85 c0                	test   eax,eax
c00138b8:	74 a4                	je     c001385e <UnixFile::~UnixFile()+0x24>
c00138ba:	83 ec 0c             	sub    esp,0xc
c00138bd:	68 68 ba 02 c0       	push   0xc002ba68
c00138c2:	e8 99 cc ff ff       	call   c0010560 <KePanic(char const*)>
c00138c7:	83 c4 10             	add    esp,0x10
c00138ca:	eb 92                	jmp    c001385e <UnixFile::~UnixFile()+0x24>
c00138cc:	90                   	nop
c00138cd:	eb 01                	jmp    c00138d0 <UnixFile::~UnixFile()+0x96>
c00138cf:	90                   	nop
c00138d0:	90                   	nop
c00138d1:	83 c4 1c             	add    esp,0x1c
c00138d4:	c3                   	ret    
c00138d5:	90                   	nop

c00138d6 <UnixFile::~UnixFile()>:
c00138d6:	83 ec 0c             	sub    esp,0xc
c00138d9:	83 ec 0c             	sub    esp,0xc
c00138dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00138e0:	e8 55 ff ff ff       	call   c001383a <UnixFile::~UnixFile()>
c00138e5:	83 c4 10             	add    esp,0x10
c00138e8:	83 ec 08             	sub    esp,0x8
c00138eb:	6a 0c                	push   0xc
c00138ed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00138f1:	e8 16 a4 ff ff       	call   c000dd0c <operator delete(void*, unsigned long)>
c00138f6:	83 c4 10             	add    esp,0x10
c00138f9:	83 c4 0c             	add    esp,0xc
c00138fc:	c3                   	ret    
c00138fd:	90                   	nop

c00138fe <ReservedFilename::~ReservedFilename()>:
c00138fe:	83 ec 0c             	sub    esp,0xc
c0013901:	ba ac ba 02 c0       	mov    edx,0xc002baac
c0013906:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001390a:	89 10                	mov    DWORD PTR [eax],edx
c001390c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013910:	83 ec 0c             	sub    esp,0xc
c0013913:	50                   	push   eax
c0013914:	e8 21 ff ff ff       	call   c001383a <UnixFile::~UnixFile()>
c0013919:	83 c4 10             	add    esp,0x10
c001391c:	90                   	nop
c001391d:	83 c4 0c             	add    esp,0xc
c0013920:	c3                   	ret    
c0013921:	90                   	nop

c0013922 <ReservedFilename::~ReservedFilename()>:
c0013922:	83 ec 0c             	sub    esp,0xc
c0013925:	83 ec 0c             	sub    esp,0xc
c0013928:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001392c:	e8 cd ff ff ff       	call   c00138fe <ReservedFilename::~ReservedFilename()>
c0013931:	83 c4 10             	add    esp,0x10
c0013934:	83 ec 08             	sub    esp,0x8
c0013937:	6a 0c                	push   0xc
c0013939:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001393d:	e8 ca a3 ff ff       	call   c000dd0c <operator delete(void*, unsigned long)>
c0013942:	83 c4 10             	add    esp,0x10
c0013945:	83 c4 0c             	add    esp,0xc
c0013948:	c3                   	ret    

c0013949 <KeGetFileFromDescriptor(int)>:
c0013949:	53                   	push   ebx
c001394a:	83 ec 08             	sub    esp,0x8
c001394d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013951:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c0013957:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c001395d:	7f 30                	jg     c001398f <KeGetFileFromDescriptor(int)+0x46>
c001395f:	83 ec 0c             	sub    esp,0xc
c0013962:	68 78 62 03 c0       	push   0xc0036278
c0013967:	e8 2e 59 01 00       	call   c002929a <LinkedList<UnixFile>::getFirstElement()>
c001396c:	8d 50 ff             	lea    edx,[eax-0x1]
c001396f:	83 c4 10             	add    esp,0x10
c0013972:	83 fa fd             	cmp    edx,0xfffffffd
c0013975:	76 04                	jbe    c001397b <KeGetFileFromDescriptor(int)+0x32>
c0013977:	31 c0                	xor    eax,eax
c0013979:	eb 6e                	jmp    c00139e9 <KeGetFileFromDescriptor(int)+0xa0>
c001397b:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c001397e:	74 69                	je     c00139e9 <KeGetFileFromDescriptor(int)+0xa0>
c0013980:	52                   	push   edx
c0013981:	52                   	push   edx
c0013982:	50                   	push   eax
c0013983:	68 78 62 03 c0       	push   0xc0036278
c0013988:	e8 b7 59 01 00       	call   c0029344 <LinkedList<UnixFile>::getNext(UnixFile*)>
c001398d:	eb dd                	jmp    c001396c <KeGetFileFromDescriptor(int)+0x23>
c001398f:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0013995:	a1 6c 62 03 c0       	mov    eax,ds:0xc003626c
c001399a:	74 4d                	je     c00139e9 <KeGetFileFromDescriptor(int)+0xa0>
c001399c:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c00139a2:	a1 70 62 03 c0       	mov    eax,ds:0xc0036270
c00139a7:	74 40                	je     c00139e9 <KeGetFileFromDescriptor(int)+0xa0>
c00139a9:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c00139af:	a1 68 62 03 c0       	mov    eax,ds:0xc0036268
c00139b4:	74 33                	je     c00139e9 <KeGetFileFromDescriptor(int)+0xa0>
c00139b6:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c00139bc:	a1 64 62 03 c0       	mov    eax,ds:0xc0036264
c00139c1:	74 26                	je     c00139e9 <KeGetFileFromDescriptor(int)+0xa0>
c00139c3:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c00139c9:	83 f8 08             	cmp    eax,0x8
c00139cc:	77 09                	ja     c00139d7 <KeGetFileFromDescriptor(int)+0x8e>
c00139ce:	8b 04 85 40 62 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc9dc0]
c00139d5:	eb 12                	jmp    c00139e9 <KeGetFileFromDescriptor(int)+0xa0>
c00139d7:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c00139dd:	83 fb 08             	cmp    ebx,0x8
c00139e0:	77 95                	ja     c0013977 <KeGetFileFromDescriptor(int)+0x2e>
c00139e2:	8b 04 9d 00 62 03 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffc9e00]
c00139e9:	83 c4 08             	add    esp,0x8
c00139ec:	5b                   	pop    ebx
c00139ed:	c3                   	ret    

c00139ee <__static_initialization_and_destruction_0(int, int)>:
c00139ee:	83 ec 0c             	sub    esp,0xc
c00139f1:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00139f6:	75 34                	jne    c0013a2c <__static_initialization_and_destruction_0(int, int)+0x3e>
c00139f8:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0013a00:	75 2a                	jne    c0013a2c <__static_initialization_and_destruction_0(int, int)+0x3e>
c0013a02:	83 ec 0c             	sub    esp,0xc
c0013a05:	68 78 62 03 c0       	push   0xc0036278
c0013a0a:	e8 75 57 01 00       	call   c0029184 <LinkedList<UnixFile>::LinkedList()>
c0013a0f:	83 c4 10             	add    esp,0x10
c0013a12:	83 ec 04             	sub    esp,0x4
c0013a15:	68 00 f5 02 c0       	push   0xc002f500
c0013a1a:	68 78 62 03 c0       	push   0xc0036278
c0013a1f:	68 82 91 02 c0       	push   0xc0029182
c0013a24:	e8 93 a2 ff ff       	call   c000dcbc <__cxa_atexit>
c0013a29:	83 c4 10             	add    esp,0x10
c0013a2c:	90                   	nop
c0013a2d:	83 c4 0c             	add    esp,0xc
c0013a30:	c3                   	ret    

c0013a31 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0013a31:	83 ec 0c             	sub    esp,0xc
c0013a34:	83 ec 08             	sub    esp,0x8
c0013a37:	68 ff ff 00 00       	push   0xffff
c0013a3c:	6a 01                	push   0x1
c0013a3e:	e8 ab ff ff ff       	call   c00139ee <__static_initialization_and_destruction_0(int, int)>
c0013a43:	83 c4 10             	add    esp,0x10
c0013a46:	83 c4 0c             	add    esp,0xc
c0013a49:	c3                   	ret    

c0013a4a <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0013a4a:	53                   	push   ebx
c0013a4b:	8b 15 28 fd 02 c0    	mov    edx,DWORD PTR ds:0xc002fd28
c0013a51:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013a55:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013a59:	8d 98 00 80 f3 ff    	lea    ebx,[eax-0xc8000]
c0013a5f:	89 d8                	mov    eax,ebx
c0013a61:	d1 e8                	shr    eax,1
c0013a63:	01 d0                	add    eax,edx
c0013a65:	80 e3 01             	and    bl,0x1
c0013a68:	8a 10                	mov    dl,BYTE PTR [eax]
c0013a6a:	75 09                	jne    c0013a75 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x2b>
c0013a6c:	83 e2 f0             	and    edx,0xfffffff0
c0013a6f:	09 ca                	or     edx,ecx
c0013a71:	88 10                	mov    BYTE PTR [eax],dl
c0013a73:	5b                   	pop    ebx
c0013a74:	c3                   	ret    
c0013a75:	0f b6 c9             	movzx  ecx,cl
c0013a78:	83 e2 0f             	and    edx,0xf
c0013a7b:	c1 e1 04             	shl    ecx,0x4
c0013a7e:	09 ca                	or     edx,ecx
c0013a80:	88 10                	mov    BYTE PTR [eax],dl
c0013a82:	5b                   	pop    ebx
c0013a83:	c3                   	ret    

c0013a84 <Virt::getPageState(unsigned long)>:
c0013a84:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013a88:	8b 0d 28 fd 02 c0    	mov    ecx,DWORD PTR ds:0xc002fd28
c0013a8e:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0013a94:	89 d0                	mov    eax,edx
c0013a96:	d1 e8                	shr    eax,1
c0013a98:	80 e2 01             	and    dl,0x1
c0013a9b:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0013a9e:	74 03                	je     c0013aa3 <Virt::getPageState(unsigned long)+0x1f>
c0013aa0:	c1 e8 04             	shr    eax,0x4
c0013aa3:	83 e0 0f             	and    eax,0xf
c0013aa6:	c3                   	ret    

c0013aa7 <Virt::allocateKernelVirtualPages(int)>:
c0013aa7:	55                   	push   ebp
c0013aa8:	57                   	push   edi
c0013aa9:	56                   	push   esi
c0013aaa:	31 f6                	xor    esi,esi
c0013aac:	53                   	push   ebx
c0013aad:	31 db                	xor    ebx,ebx
c0013aaf:	83 ec 1c             	sub    esp,0x1c
c0013ab2:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0013ab7:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0013abb:	8b 2d 24 fd 02 c0    	mov    ebp,DWORD PTR ds:0xc002fd24
c0013ac1:	55                   	push   ebp
c0013ac2:	e8 bd ff ff ff       	call   c0013a84 <Virt::getPageState(unsigned long)>
c0013ac7:	5a                   	pop    edx
c0013ac8:	84 c0                	test   al,al
c0013aca:	75 3d                	jne    c0013b09 <Virt::allocateKernelVirtualPages(int)+0x62>
c0013acc:	85 db                	test   ebx,ebx
c0013ace:	0f 44 f5             	cmove  esi,ebp
c0013ad1:	83 c3 01             	add    ebx,0x1
c0013ad4:	39 fb                	cmp    ebx,edi
c0013ad6:	74 5e                	je     c0013b36 <Virt::allocateKernelVirtualPages(int)+0x8f>
c0013ad8:	83 c5 01             	add    ebp,0x1
c0013adb:	81 fd ff ff 0e 00    	cmp    ebp,0xeffff
c0013ae1:	76 33                	jbe    c0013b16 <Virt::allocateKernelVirtualPages(int)+0x6f>
c0013ae3:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0013ae8:	c7 05 24 fd 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc002fd24,0xc8000
c0013af2:	75 2a                	jne    c0013b1e <Virt::allocateKernelVirtualPages(int)+0x77>
c0013af4:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0013af9:	bd 00 80 0c 00       	mov    ebp,0xc8000
c0013afe:	55                   	push   ebp
c0013aff:	e8 80 ff ff ff       	call   c0013a84 <Virt::getPageState(unsigned long)>
c0013b04:	5a                   	pop    edx
c0013b05:	84 c0                	test   al,al
c0013b07:	74 c3                	je     c0013acc <Virt::allocateKernelVirtualPages(int)+0x25>
c0013b09:	83 c5 01             	add    ebp,0x1
c0013b0c:	31 db                	xor    ebx,ebx
c0013b0e:	81 fd ff ff 0e 00    	cmp    ebp,0xeffff
c0013b14:	77 cd                	ja     c0013ae3 <Virt::allocateKernelVirtualPages(int)+0x3c>
c0013b16:	89 2d 24 fd 02 c0    	mov    DWORD PTR ds:0xc002fd24,ebp
c0013b1c:	eb a3                	jmp    c0013ac1 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0013b1e:	83 ec 0c             	sub    esp,0xc
c0013b21:	68 c0 ba 02 c0       	push   0xc002bac0
c0013b26:	e8 35 ca ff ff       	call   c0010560 <KePanic(char const*)>
c0013b2b:	8b 2d 24 fd 02 c0    	mov    ebp,DWORD PTR ds:0xc002fd24
c0013b31:	83 c4 10             	add    esp,0x10
c0013b34:	eb 8b                	jmp    c0013ac1 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0013b36:	89 35 24 fd 02 c0    	mov    DWORD PTR ds:0xc002fd24,esi
c0013b3c:	83 fb 01             	cmp    ebx,0x1
c0013b3f:	74 63                	je     c0013ba4 <Virt::allocateKernelVirtualPages(int)+0xfd>
c0013b41:	85 ff                	test   edi,edi
c0013b43:	74 41                	je     c0013b86 <Virt::allocateKernelVirtualPages(int)+0xdf>
c0013b45:	89 f0                	mov    eax,esi
c0013b47:	31 db                	xor    ebx,ebx
c0013b49:	8d 6f ff             	lea    ebp,[edi-0x1]
c0013b4c:	eb 16                	jmp    c0013b64 <Virt::allocateKernelVirtualPages(int)+0xbd>
c0013b4e:	6a 01                	push   0x1
c0013b50:	83 c3 01             	add    ebx,0x1
c0013b53:	50                   	push   eax
c0013b54:	e8 f1 fe ff ff       	call   c0013a4a <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0013b59:	39 fb                	cmp    ebx,edi
c0013b5b:	58                   	pop    eax
c0013b5c:	5a                   	pop    edx
c0013b5d:	74 27                	je     c0013b86 <Virt::allocateKernelVirtualPages(int)+0xdf>
c0013b5f:	a1 24 fd 02 c0       	mov    eax,ds:0xc002fd24
c0013b64:	8d 50 01             	lea    edx,[eax+0x1]
c0013b67:	85 db                	test   ebx,ebx
c0013b69:	89 15 24 fd 02 c0    	mov    DWORD PTR ds:0xc002fd24,edx
c0013b6f:	74 22                	je     c0013b93 <Virt::allocateKernelVirtualPages(int)+0xec>
c0013b71:	39 dd                	cmp    ebp,ebx
c0013b73:	75 d9                	jne    c0013b4e <Virt::allocateKernelVirtualPages(int)+0xa7>
c0013b75:	6a 03                	push   0x3
c0013b77:	83 c3 01             	add    ebx,0x1
c0013b7a:	50                   	push   eax
c0013b7b:	e8 ca fe ff ff       	call   c0013a4a <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0013b80:	39 fb                	cmp    ebx,edi
c0013b82:	59                   	pop    ecx
c0013b83:	58                   	pop    eax
c0013b84:	75 d9                	jne    c0013b5f <Virt::allocateKernelVirtualPages(int)+0xb8>
c0013b86:	83 c4 1c             	add    esp,0x1c
c0013b89:	89 f0                	mov    eax,esi
c0013b8b:	5b                   	pop    ebx
c0013b8c:	c1 e0 0c             	shl    eax,0xc
c0013b8f:	5e                   	pop    esi
c0013b90:	5f                   	pop    edi
c0013b91:	5d                   	pop    ebp
c0013b92:	c3                   	ret    
c0013b93:	6a 02                	push   0x2
c0013b95:	bb 01 00 00 00       	mov    ebx,0x1
c0013b9a:	50                   	push   eax
c0013b9b:	e8 aa fe ff ff       	call   c0013a4a <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0013ba0:	58                   	pop    eax
c0013ba1:	5a                   	pop    edx
c0013ba2:	eb bb                	jmp    c0013b5f <Virt::allocateKernelVirtualPages(int)+0xb8>
c0013ba4:	6a 04                	push   0x4
c0013ba6:	56                   	push   esi
c0013ba7:	8d 46 01             	lea    eax,[esi+0x1]
c0013baa:	a3 24 fd 02 c0       	mov    ds:0xc002fd24,eax
c0013baf:	e8 96 fe ff ff       	call   c0013a4a <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0013bb4:	89 f0                	mov    eax,esi
c0013bb6:	59                   	pop    ecx
c0013bb7:	c1 e0 0c             	shl    eax,0xc
c0013bba:	5b                   	pop    ebx
c0013bbb:	83 c4 1c             	add    esp,0x1c
c0013bbe:	5b                   	pop    ebx
c0013bbf:	5e                   	pop    esi
c0013bc0:	5f                   	pop    edi
c0013bc1:	5d                   	pop    ebp
c0013bc2:	c3                   	ret    

c0013bc3 <Virt::freeSwapfilePage(unsigned long)>:
c0013bc3:	53                   	push   ebx
c0013bc4:	8b 15 8c 62 03 c0    	mov    edx,DWORD PTR ds:0xc003628c
c0013bca:	b8 01 00 00 00       	mov    eax,0x1
c0013bcf:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0013bd3:	d3 e0                	shl    eax,cl
c0013bd5:	89 cb                	mov    ebx,ecx
c0013bd7:	c1 eb 05             	shr    ebx,0x5
c0013bda:	f7 d0                	not    eax
c0013bdc:	8b 0c 9a             	mov    ecx,DWORD PTR [edx+ebx*4]
c0013bdf:	21 c1                	and    ecx,eax
c0013be1:	89 0c 9a             	mov    DWORD PTR [edx+ebx*4],ecx
c0013be4:	5b                   	pop    ebx
c0013be5:	c3                   	ret    

c0013be6 <Virt::swapIDToSector(unsigned long)>:
c0013be6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013bea:	8b 15 2c fd 02 c0    	mov    edx,DWORD PTR ds:0xc002fd2c
c0013bf0:	8b 0d 34 fd 02 c0    	mov    ecx,DWORD PTR ds:0xc002fd34
c0013bf6:	0f af c2             	imul   eax,edx
c0013bf9:	01 c8                	add    eax,ecx
c0013bfb:	c3                   	ret    

c0013bfc <Virt::allocateSwapfilePage()>:
c0013bfc:	55                   	push   ebp
c0013bfd:	31 d2                	xor    edx,edx
c0013bff:	57                   	push   edi
c0013c00:	56                   	push   esi
c0013c01:	53                   	push   ebx
c0013c02:	83 ec 0c             	sub    esp,0xc
c0013c05:	8b 1d 30 fd 02 c0    	mov    ebx,DWORD PTR ds:0xc002fd30
c0013c0b:	8b 0d 2c fd 02 c0    	mov    ecx,DWORD PTR ds:0xc002fd2c
c0013c11:	89 d8                	mov    eax,ebx
c0013c13:	f7 f1                	div    ecx
c0013c15:	39 cb                	cmp    ebx,ecx
c0013c17:	72 2f                	jb     c0013c48 <Virt::allocateSwapfilePage()+0x4c>
c0013c19:	8b 35 8c 62 03 c0    	mov    esi,DWORD PTR ds:0xc003628c
c0013c1f:	8b 16                	mov    edx,DWORD PTR [esi]
c0013c21:	f6 c2 01             	test   dl,0x1
c0013c24:	74 3e                	je     c0013c64 <Virt::allocateSwapfilePage()+0x68>
c0013c26:	31 c9                	xor    ecx,ecx
c0013c28:	bf 01 00 00 00       	mov    edi,0x1
c0013c2d:	eb 12                	jmp    c0013c41 <Virt::allocateSwapfilePage()+0x45>
c0013c2f:	89 ca                	mov    edx,ecx
c0013c31:	89 fd                	mov    ebp,edi
c0013c33:	c1 ea 05             	shr    edx,0x5
c0013c36:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0013c39:	8b 13                	mov    edx,DWORD PTR [ebx]
c0013c3b:	d3 e5                	shl    ebp,cl
c0013c3d:	85 ea                	test   edx,ebp
c0013c3f:	74 2c                	je     c0013c6d <Virt::allocateSwapfilePage()+0x71>
c0013c41:	83 c1 01             	add    ecx,0x1
c0013c44:	39 c8                	cmp    eax,ecx
c0013c46:	77 e7                	ja     c0013c2f <Virt::allocateSwapfilePage()+0x33>
c0013c48:	83 ec 0c             	sub    esp,0xc
c0013c4b:	68 d3 bd 02 c0       	push   0xc002bdd3
c0013c50:	e8 0b c9 ff ff       	call   c0010560 <KePanic(char const*)>
c0013c55:	83 c4 10             	add    esp,0x10
c0013c58:	31 c9                	xor    ecx,ecx
c0013c5a:	83 c4 0c             	add    esp,0xc
c0013c5d:	89 c8                	mov    eax,ecx
c0013c5f:	5b                   	pop    ebx
c0013c60:	5e                   	pop    esi
c0013c61:	5f                   	pop    edi
c0013c62:	5d                   	pop    ebp
c0013c63:	c3                   	ret    
c0013c64:	89 f3                	mov    ebx,esi
c0013c66:	bd 01 00 00 00       	mov    ebp,0x1
c0013c6b:	31 c9                	xor    ecx,ecx
c0013c6d:	09 ea                	or     edx,ebp
c0013c6f:	89 c8                	mov    eax,ecx
c0013c71:	89 13                	mov    DWORD PTR [ebx],edx
c0013c73:	83 c4 0c             	add    esp,0xc
c0013c76:	5b                   	pop    ebx
c0013c77:	5e                   	pop    esi
c0013c78:	5f                   	pop    edi
c0013c79:	5d                   	pop    ebp
c0013c7a:	c3                   	ret    

c0013c7b <Virt::virtualMemorySetup()>:
c0013c7b:	53                   	push   ebx
c0013c7c:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0013c81:	6a 0f                	push   0xf
c0013c83:	53                   	push   ebx
c0013c84:	83 c3 01             	add    ebx,0x1
c0013c87:	e8 be fd ff ff       	call   c0013a4a <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0013c8c:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0013c92:	58                   	pop    eax
c0013c93:	5a                   	pop    edx
c0013c94:	75 eb                	jne    c0013c81 <Virt::virtualMemorySetup()+0x6>
c0013c96:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0013c9b:	6a 00                	push   0x0
c0013c9d:	53                   	push   ebx
c0013c9e:	83 c3 01             	add    ebx,0x1
c0013ca1:	e8 a4 fd ff ff       	call   c0013a4a <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0013ca6:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0013cac:	59                   	pop    ecx
c0013cad:	58                   	pop    eax
c0013cae:	75 eb                	jne    c0013c9b <Virt::virtualMemorySetup()+0x20>
c0013cb0:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0013cb5:	6a 0f                	push   0xf
c0013cb7:	53                   	push   ebx
c0013cb8:	83 c3 01             	add    ebx,0x1
c0013cbb:	e8 8a fd ff ff       	call   c0013a4a <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0013cc0:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0013cc6:	58                   	pop    eax
c0013cc7:	5a                   	pop    edx
c0013cc8:	75 eb                	jne    c0013cb5 <Virt::virtualMemorySetup()+0x3a>
c0013cca:	5b                   	pop    ebx
c0013ccb:	c3                   	ret    

c0013ccc <Virt::setupPageSwapping(int)>:
c0013ccc:	53                   	push   ebx
c0013ccd:	83 ec 0c             	sub    esp,0xc
c0013cd0:	a1 e8 5a 03 c0       	mov    eax,ds:0xc0035ae8
c0013cd5:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0013cd9:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0013cdf:	8b 10                	mov    edx,DWORD PTR [eax]
c0013ce1:	53                   	push   ebx
c0013ce2:	68 ea bd 02 c0       	push   0xc002bdea
c0013ce7:	50                   	push   eax
c0013ce8:	ff 52 60             	call   DWORD PTR [edx+0x60]
c0013ceb:	c1 e3 0b             	shl    ebx,0xb
c0013cee:	89 1d 30 fd 02 c0    	mov    DWORD PTR ds:0xc002fd30,ebx
c0013cf4:	c1 eb 08             	shr    ebx,0x8
c0013cf7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013cfa:	c6 05 38 fd 02 c0 43 	mov    BYTE PTR ds:0xc002fd38,0x43
c0013d01:	c7 05 2c fd 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002fd2c,0x8
c0013d0b:	a3 34 fd 02 c0       	mov    ds:0xc002fd34,eax
c0013d10:	e8 f7 c3 ff ff       	call   c001010c <malloc>
c0013d15:	31 d2                	xor    edx,edx
c0013d17:	83 c4 0c             	add    esp,0xc
c0013d1a:	a3 8c 62 03 c0       	mov    ds:0xc003628c,eax
c0013d1f:	89 c1                	mov    ecx,eax
c0013d21:	a1 30 fd 02 c0       	mov    eax,ds:0xc002fd30
c0013d26:	f7 35 2c fd 02 c0    	div    DWORD PTR ds:0xc002fd2c
c0013d2c:	c1 e8 05             	shr    eax,0x5
c0013d2f:	50                   	push   eax
c0013d30:	6a 00                	push   0x0
c0013d32:	51                   	push   ecx
c0013d33:	e8 b8 c7 fe ff       	call   c00004f0 <memset>
c0013d38:	83 c4 18             	add    esp,0x18
c0013d3b:	5b                   	pop    ebx
c0013d3c:	c3                   	ret    
c0013d3d:	90                   	nop

c0013d3e <VAS::setCPUSpecific(unsigned long)>:
c0013d3e:	c3                   	ret    
c0013d3f:	90                   	nop

c0013d40 <VAS::VAS(VAS*)>:
c0013d40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013d44:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013d4b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013d4f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0013d56:	90                   	nop
c0013d57:	c3                   	ret    

c0013d58 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c0013d58:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013d5c:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c0013d61:	89 c2                	mov    edx,eax
c0013d63:	c1 ea 16             	shr    edx,0x16
c0013d66:	c1 e8 0a             	shr    eax,0xa
c0013d69:	83 f9 01             	cmp    ecx,0x1
c0013d6c:	19 c9                	sbb    ecx,ecx
c0013d6e:	25 fc 0f 00 00       	and    eax,0xffc
c0013d73:	c1 e2 0c             	shl    edx,0xc
c0013d76:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0013d7c:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0013d83:	01 d0                	add    eax,edx
c0013d85:	c3                   	ret    

c0013d86 <VAS::getPageTableEntry(unsigned long)>:
c0013d86:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0013d8a:	89 ca                	mov    edx,ecx
c0013d8c:	c1 ea 16             	shr    edx,0x16
c0013d8f:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0013d95:	c1 e9 0a             	shr    ecx,0xa
c0013d98:	c1 e0 0c             	shl    eax,0xc
c0013d9b:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0013da1:	8d 04 08             	lea    eax,[eax+ecx*1]
c0013da4:	c3                   	ret    

c0013da5 <Virt::freeKernelVirtualPages(unsigned long)>:
c0013da5:	55                   	push   ebp
c0013da6:	57                   	push   edi
c0013da7:	bf 01 00 00 00       	mov    edi,0x1
c0013dac:	56                   	push   esi
c0013dad:	53                   	push   ebx
c0013dae:	83 ec 1c             	sub    esp,0x1c
c0013db1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0013db5:	c1 ee 0c             	shr    esi,0xc
c0013db8:	eb 48                	jmp    c0013e02 <Virt::freeKernelVirtualPages(unsigned long)+0x5d>
c0013dba:	a1 90 62 03 c0       	mov    eax,ds:0xc0036290
c0013dbf:	83 ec 08             	sub    esp,0x8
c0013dc2:	55                   	push   ebp
c0013dc3:	50                   	push   eax
c0013dc4:	e8 bd ff ff ff       	call   c0013d86 <VAS::getPageTableEntry(unsigned long)>
c0013dc9:	83 c4 10             	add    esp,0x10
c0013dcc:	8b 10                	mov    edx,DWORD PTR [eax]
c0013dce:	f6 c6 04             	test   dh,0x4
c0013dd1:	75 70                	jne    c0013e43 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c0013dd3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013dd9:	83 fb 04             	cmp    ebx,0x4
c0013ddc:	0f 84 8a 00 00 00    	je     c0013e6c <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0013de2:	83 fb 02             	cmp    ebx,0x2
c0013de5:	0f 84 9a 00 00 00    	je     c0013e85 <Virt::freeKernelVirtualPages(unsigned long)+0xe0>
c0013deb:	83 fb 03             	cmp    ebx,0x3
c0013dee:	0f 84 be 00 00 00    	je     c0013eb2 <Virt::freeKernelVirtualPages(unsigned long)+0x10d>
c0013df4:	83 fb 01             	cmp    ebx,0x1
c0013df7:	0f 84 a2 00 00 00    	je     c0013e9f <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c0013dfd:	83 c6 01             	add    esi,0x1
c0013e00:	31 ff                	xor    edi,edi
c0013e02:	56                   	push   esi
c0013e03:	89 f5                	mov    ebp,esi
c0013e05:	e8 7a fc ff ff       	call   c0013a84 <Virt::getPageState(unsigned long)>
c0013e0a:	c1 e5 0c             	shl    ebp,0xc
c0013e0d:	5a                   	pop    edx
c0013e0e:	0f b6 d8             	movzx  ebx,al
c0013e11:	85 db                	test   ebx,ebx
c0013e13:	75 a5                	jne    c0013dba <Virt::freeKernelVirtualPages(unsigned long)+0x15>
c0013e15:	83 ec 0c             	sub    esp,0xc
c0013e18:	68 01 be 02 c0       	push   0xc002be01
c0013e1d:	e8 3e c7 ff ff       	call   c0010560 <KePanic(char const*)>
c0013e22:	5a                   	pop    edx
c0013e23:	59                   	pop    ecx
c0013e24:	55                   	push   ebp
c0013e25:	8b 2d 90 62 03 c0    	mov    ebp,DWORD PTR ds:0xc0036290
c0013e2b:	55                   	push   ebp
c0013e2c:	e8 55 ff ff ff       	call   c0013d86 <VAS::getPageTableEntry(unsigned long)>
c0013e31:	83 c4 10             	add    esp,0x10
c0013e34:	8b 10                	mov    edx,DWORD PTR [eax]
c0013e36:	f6 c6 04             	test   dh,0x4
c0013e39:	75 08                	jne    c0013e43 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c0013e3b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013e41:	eb ba                	jmp    c0013dfd <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0013e43:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013e47:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0013e4d:	83 ec 0c             	sub    esp,0xc
c0013e50:	52                   	push   edx
c0013e51:	e8 9b c8 ff ff       	call   c00106f1 <Phys::freePage(unsigned long)>
c0013e56:	83 c4 10             	add    esp,0x10
c0013e59:	83 fb 04             	cmp    ebx,0x4
c0013e5c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013e60:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013e66:	0f 85 76 ff ff ff    	jne    c0013de2 <Virt::freeKernelVirtualPages(unsigned long)+0x3d>
c0013e6c:	83 e7 01             	and    edi,0x1
c0013e6f:	75 46                	jne    c0013eb7 <Virt::freeKernelVirtualPages(unsigned long)+0x112>
c0013e71:	c7 44 24 30 e0 ba 02 c0 	mov    DWORD PTR [esp+0x30],0xc002bae0
c0013e79:	83 c4 1c             	add    esp,0x1c
c0013e7c:	5b                   	pop    ebx
c0013e7d:	5e                   	pop    esi
c0013e7e:	5f                   	pop    edi
c0013e7f:	5d                   	pop    ebp
c0013e80:	e9 db c6 ff ff       	jmp    c0010560 <KePanic(char const*)>
c0013e85:	83 e7 01             	and    edi,0x1
c0013e88:	75 15                	jne    c0013e9f <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c0013e8a:	83 ec 0c             	sub    esp,0xc
c0013e8d:	68 1d be 02 c0       	push   0xc002be1d
c0013e92:	e8 c9 c6 ff ff       	call   c0010560 <KePanic(char const*)>
c0013e97:	83 c4 10             	add    esp,0x10
c0013e9a:	e9 5e ff ff ff       	jmp    c0013dfd <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0013e9f:	83 ec 08             	sub    esp,0x8
c0013ea2:	6a 00                	push   0x0
c0013ea4:	56                   	push   esi
c0013ea5:	e8 a0 fb ff ff       	call   c0013a4a <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0013eaa:	83 c4 10             	add    esp,0x10
c0013ead:	e9 4b ff ff ff       	jmp    c0013dfd <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0013eb2:	83 e7 01             	and    edi,0x1
c0013eb5:	75 16                	jne    c0013ecd <Virt::freeKernelVirtualPages(unsigned long)+0x128>
c0013eb7:	83 ec 08             	sub    esp,0x8
c0013eba:	6a 00                	push   0x0
c0013ebc:	56                   	push   esi
c0013ebd:	e8 88 fb ff ff       	call   c0013a4a <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0013ec2:	83 c4 10             	add    esp,0x10
c0013ec5:	83 c4 1c             	add    esp,0x1c
c0013ec8:	5b                   	pop    ebx
c0013ec9:	5e                   	pop    esi
c0013eca:	5f                   	pop    edi
c0013ecb:	5d                   	pop    ebp
c0013ecc:	c3                   	ret    
c0013ecd:	c7 44 24 30 39 be 02 c0 	mov    DWORD PTR [esp+0x30],0xc002be39
c0013ed5:	83 c4 1c             	add    esp,0x1c
c0013ed8:	5b                   	pop    ebx
c0013ed9:	5e                   	pop    esi
c0013eda:	5f                   	pop    edi
c0013edb:	5d                   	pop    ebp
c0013edc:	e9 7f c6 ff ff       	jmp    c0010560 <KePanic(char const*)>
c0013ee1:	90                   	nop

c0013ee2 <VAS::freeAllocatedPages(unsigned long)>:
c0013ee2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013ee6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013eea:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0013eee:	74 09                	je     c0013ef9 <VAS::freeAllocatedPages(unsigned long)+0x17>
c0013ef0:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0013ef4:	e9 ac fe ff ff       	jmp    c0013da5 <Virt::freeKernelVirtualPages(unsigned long)>
c0013ef9:	c7 44 24 04 04 bb 02 c0 	mov    DWORD PTR [esp+0x4],0xc002bb04
c0013f01:	e9 60 30 ff ff       	jmp    c0006f66 <Dbg::kprintf(char const*, ...)>

c0013f06 <VAS::virtualToPhysical(unsigned long)>:
c0013f06:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013f0a:	50                   	push   eax
c0013f0b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013f0f:	52                   	push   edx
c0013f10:	e8 71 fe ff ff       	call   c0013d86 <VAS::getPageTableEntry(unsigned long)>
c0013f15:	59                   	pop    ecx
c0013f16:	5a                   	pop    edx
c0013f17:	8b 00                	mov    eax,DWORD PTR [eax]
c0013f19:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013f1e:	c3                   	ret    
c0013f1f:	90                   	nop

c0013f20 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>:
c0013f20:	55                   	push   ebp
c0013f21:	57                   	push   edi
c0013f22:	56                   	push   esi
c0013f23:	53                   	push   ebx
c0013f24:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013f28:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0013f2c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0013f30:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0013f34:	85 db                	test   ebx,ebx
c0013f36:	7e 24                	jle    c0013f5c <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x3c>
c0013f38:	c1 e3 0c             	shl    ebx,0xc
c0013f3b:	01 f3                	add    ebx,esi
c0013f3d:	56                   	push   esi
c0013f3e:	81 c6 00 10 00 00    	add    esi,0x1000
c0013f44:	55                   	push   ebp
c0013f45:	e8 3c fe ff ff       	call   c0013d86 <VAS::getPageTableEntry(unsigned long)>
c0013f4a:	5a                   	pop    edx
c0013f4b:	59                   	pop    ecx
c0013f4c:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013f4e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0013f52:	21 f9                	and    ecx,edi
c0013f54:	09 d1                	or     ecx,edx
c0013f56:	39 f3                	cmp    ebx,esi
c0013f58:	89 08                	mov    DWORD PTR [eax],ecx
c0013f5a:	75 e1                	jne    c0013f3d <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x1d>
c0013f5c:	5b                   	pop    ebx
c0013f5d:	5e                   	pop    esi
c0013f5e:	5f                   	pop    edi
c0013f5f:	5d                   	pop    ebp
c0013f60:	c3                   	ret    
c0013f61:	90                   	nop

c0013f62 <VAS::VAS()>:
c0013f62:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013f66:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013f6d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013f71:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0013f78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013f7c:	a3 90 62 03 c0       	mov    ds:0xc0036290,eax
c0013f81:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013f85:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0013f89:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013f8d:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0013f90:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013f94:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0013f9b:	ba 7d 10 03 c0       	mov    edx,0xc003107d
c0013fa0:	b8 00 10 03 c0       	mov    eax,0xc0031000
c0013fa5:	29 c2                	sub    edx,eax
c0013fa7:	89 d0                	mov    eax,edx
c0013fa9:	05 ff 0f 00 00       	add    eax,0xfff
c0013fae:	c1 e8 0c             	shr    eax,0xc
c0013fb1:	89 c2                	mov    edx,eax
c0013fb3:	b8 00 10 03 c0       	mov    eax,0xc0031000
c0013fb8:	6a 04                	push   0x4
c0013fba:	6a ff                	push   0xffffffff
c0013fbc:	52                   	push   edx
c0013fbd:	50                   	push   eax
c0013fbe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013fc2:	e8 59 ff ff ff       	call   c0013f20 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0013fc7:	83 c4 14             	add    esp,0x14
c0013fca:	90                   	nop
c0013fcb:	c3                   	ret    

c0013fcc <VAS::setToWriteCombining(unsigned long, int)>:
c0013fcc:	a1 24 64 03 c0       	mov    eax,ds:0xc0036424
c0013fd1:	50                   	push   eax
c0013fd2:	6a ff                	push   0xffffffff
c0013fd4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0013fd8:	52                   	push   edx
c0013fd9:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0013fdd:	51                   	push   ecx
c0013fde:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013fe2:	50                   	push   eax
c0013fe3:	e8 38 ff ff ff       	call   c0013f20 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0013fe8:	83 c4 14             	add    esp,0x14
c0013feb:	c3                   	ret    

c0013fec <VAS::mapOtherVASIn(bool, VAS*)>:
c0013fec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013ff0:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0013ff3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013ff7:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0013ffa:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0013fff:	83 f8 01             	cmp    eax,0x1
c0014002:	19 c0                	sbb    eax,eax
c0014004:	83 ca 03             	or     edx,0x3
c0014007:	83 e0 fc             	and    eax,0xfffffffc
c001400a:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0014011:	0f 20 d8             	mov    eax,cr3
c0014014:	0f 22 d8             	mov    cr3,eax
c0014017:	c3                   	ret    

c0014018 <VAS::~VAS()>:
c0014018:	83 ec 2c             	sub    esp,0x2c
c001401b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0014023:	fa                   	cli    
c0014024:	a1 30 63 03 c0       	mov    eax,ds:0xc0036330
c0014029:	83 c0 01             	add    eax,0x1
c001402c:	a3 30 63 03 c0       	mov    ds:0xc0036330,eax
c0014031:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0014036:	8b 00                	mov    eax,DWORD PTR [eax]
c0014038:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001403b:	8b 80 b2 05 00 00    	mov    eax,DWORD PTR [eax+0x5b2]
c0014041:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0014045:	6a 01                	push   0x1
c0014047:	50                   	push   eax
c0014048:	e8 9f ff ff ff       	call   c0013fec <VAS::mapOtherVASIn(bool, VAS*)>
c001404d:	83 c4 0c             	add    esp,0xc
c0014050:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0014058:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0014060:	0f 8f d8 00 00 00    	jg     c001413e <VAS::~VAS()+0x126>
c0014066:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001406a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001406d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014071:	c1 e2 02             	shl    edx,0x2
c0014074:	01 d0                	add    eax,edx
c0014076:	8b 00                	mov    eax,DWORD PTR [eax]
c0014078:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001407c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014080:	83 e0 01             	and    eax,0x1
c0014083:	0f 84 ab 00 00 00    	je     c0014134 <VAS::~VAS()+0x11c>
c0014089:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0014091:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0014099:	7f 74                	jg     c001410f <VAS::~VAS()+0xf7>
c001409b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001409f:	c1 e0 0a             	shl    eax,0xa
c00140a2:	89 c2                	mov    edx,eax
c00140a4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00140a8:	01 d0                	add    eax,edx
c00140aa:	c1 e0 0c             	shl    eax,0xc
c00140ad:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00140b1:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00140b6:	8b 00                	mov    eax,DWORD PTR [eax]
c00140b8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00140bb:	8b 80 b2 05 00 00    	mov    eax,DWORD PTR [eax+0x5b2]
c00140c1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00140c5:	6a 01                	push   0x1
c00140c7:	50                   	push   eax
c00140c8:	e8 8b fc ff ff       	call   c0013d58 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c00140cd:	83 c4 0c             	add    esp,0xc
c00140d0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00140d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00140d8:	8b 00                	mov    eax,DWORD PTR [eax]
c00140da:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00140de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00140e2:	25 01 04 00 00       	and    eax,0x401
c00140e7:	3d 01 04 00 00       	cmp    eax,0x401
c00140ec:	75 1a                	jne    c0014108 <VAS::~VAS()+0xf0>
c00140ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00140f2:	25 00 f0 ff ff       	and    eax,0xfffff000
c00140f7:	83 ec 0c             	sub    esp,0xc
c00140fa:	50                   	push   eax
c00140fb:	e8 f1 c5 ff ff       	call   c00106f1 <Phys::freePage(unsigned long)>
c0014100:	83 c4 10             	add    esp,0x10
c0014103:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0014108:	83 44 24 14 01       	add    DWORD PTR [esp+0x14],0x1
c001410d:	eb 82                	jmp    c0014091 <VAS::~VAS()+0x79>
c001410f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014113:	25 00 04 00 00       	and    eax,0x400
c0014118:	74 1a                	je     c0014134 <VAS::~VAS()+0x11c>
c001411a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001411e:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014123:	83 ec 0c             	sub    esp,0xc
c0014126:	50                   	push   eax
c0014127:	e8 c5 c5 ff ff       	call   c00106f1 <Phys::freePage(unsigned long)>
c001412c:	83 c4 10             	add    esp,0x10
c001412f:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0014134:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c0014139:	e9 1a ff ff ff       	jmp    c0014058 <VAS::~VAS()+0x40>
c001413e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014142:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0014145:	83 ec 0c             	sub    esp,0xc
c0014148:	50                   	push   eax
c0014149:	e8 57 fc ff ff       	call   c0013da5 <Virt::freeKernelVirtualPages(unsigned long)>
c001414e:	83 c4 10             	add    esp,0x10
c0014151:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014155:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0014158:	83 ec 0c             	sub    esp,0xc
c001415b:	50                   	push   eax
c001415c:	e8 90 c5 ff ff       	call   c00106f1 <Phys::freePage(unsigned long)>
c0014161:	83 c4 10             	add    esp,0x10
c0014164:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0014169:	f0 83 2d 30 63 03 c0 01 	lock sub DWORD PTR ds:0xc0036330,0x1
c0014171:	a1 30 63 03 c0       	mov    eax,ds:0xc0036330
c0014176:	85 c0                	test   eax,eax
c0014178:	75 01                	jne    c001417b <VAS::~VAS()+0x163>
c001417a:	fb                   	sti    
c001417b:	90                   	nop
c001417c:	83 c4 2c             	add    esp,0x2c
c001417f:	c3                   	ret    

c0014180 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0014180:	55                   	push   ebp
c0014181:	57                   	push   edi
c0014182:	56                   	push   esi
c0014183:	53                   	push   ebx
c0014184:	83 ec 1c             	sub    esp,0x1c
c0014187:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001418b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001418f:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0014193:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0014199:	77 08                	ja     c00141a3 <VAS::mapPage(unsigned long, unsigned long, int)+0x23>
c001419b:	0f 20 d8             	mov    eax,cr3
c001419e:	39 45 10             	cmp    DWORD PTR [ebp+0x10],eax
c00141a1:	75 43                	jne    c00141e6 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c00141a3:	89 d8                	mov    eax,ebx
c00141a5:	09 f8                	or     eax,edi
c00141a7:	a9 ff 0f 00 00       	test   eax,0xfff
c00141ac:	75 53                	jne    c0014201 <VAS::mapPage(unsigned long, unsigned long, int)+0x81>
c00141ae:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00141b1:	89 de                	mov    esi,ebx
c00141b3:	c1 ee 16             	shr    esi,0x16
c00141b6:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c00141bd:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c00141c1:	74 50                	je     c0014213 <VAS::mapPage(unsigned long, unsigned long, int)+0x93>
c00141c3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00141c7:	c1 eb 0a             	shr    ebx,0xa
c00141ca:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c00141d0:	c1 e6 0c             	shl    esi,0xc
c00141d3:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c00141d9:	09 c7                	or     edi,eax
c00141db:	89 3c 33             	mov    DWORD PTR [ebx+esi*1],edi
c00141de:	83 c4 1c             	add    esp,0x1c
c00141e1:	5b                   	pop    ebx
c00141e2:	5e                   	pop    esi
c00141e3:	5f                   	pop    edi
c00141e4:	5d                   	pop    ebp
c00141e5:	c3                   	ret    
c00141e6:	83 ec 0c             	sub    esp,0xc
c00141e9:	68 28 bb 02 c0       	push   0xc002bb28
c00141ee:	e8 73 2d ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00141f3:	89 d8                	mov    eax,ebx
c00141f5:	83 c4 10             	add    esp,0x10
c00141f8:	09 f8                	or     eax,edi
c00141fa:	a9 ff 0f 00 00       	test   eax,0xfff
c00141ff:	74 ad                	je     c00141ae <VAS::mapPage(unsigned long, unsigned long, int)+0x2e>
c0014201:	83 ec 0c             	sub    esp,0xc
c0014204:	68 90 bb 02 c0       	push   0xc002bb90
c0014209:	e8 52 c3 ff ff       	call   c0010560 <KePanic(char const*)>
c001420e:	83 c4 10             	add    esp,0x10
c0014211:	eb 9b                	jmp    c00141ae <VAS::mapPage(unsigned long, unsigned long, int)+0x2e>
c0014213:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0014217:	e8 3e c5 ff ff       	call   c001075a <Phys::allocatePage()>
c001421c:	8b 0d 90 62 03 c0    	mov    ecx,DWORD PTR ds:0xc0036290
c0014222:	83 ec 0c             	sub    esp,0xc
c0014225:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0014229:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001422d:	6a 01                	push   0x1
c001422f:	e8 73 f8 ff ff       	call   c0013aa7 <Virt::allocateKernelVirtualPages(int)>
c0014234:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001423b:	6a 01                	push   0x1
c001423d:	50                   	push   eax
c001423e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0014242:	52                   	push   edx
c0014243:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0014247:	51                   	push   ecx
c0014248:	e8 2d 01 00 00       	call   c001437a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001424d:	83 c4 1c             	add    esp,0x1c
c0014250:	68 00 10 00 00       	push   0x1000
c0014255:	6a 00                	push   0x0
c0014257:	50                   	push   eax
c0014258:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001425c:	e8 8f c2 fe ff       	call   c00004f0 <memset>
c0014261:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0014265:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0014268:	e8 38 fb ff ff       	call   c0013da5 <Virt::freeKernelVirtualPages(unsigned long)>
c001426d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014271:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0014275:	83 c4 10             	add    esp,0x10
c0014278:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c001427b:	0d 07 04 00 00       	or     eax,0x407
c0014280:	89 04 11             	mov    DWORD PTR [ecx+edx*1],eax
c0014283:	e9 3b ff ff ff       	jmp    c00141c3 <VAS::mapPage(unsigned long, unsigned long, int)+0x43>

c0014288 <VAS::allocatePages(int, int)>:
c0014288:	55                   	push   ebp
c0014289:	57                   	push   edi
c001428a:	56                   	push   esi
c001428b:	53                   	push   ebx
c001428c:	83 ec 1c             	sub    esp,0x1c
c001428f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0014293:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0014297:	80 7e 01 00          	cmp    BYTE PTR [esi+0x1],0x0
c001429b:	75 75                	jne    c0014312 <VAS::allocatePages(int, int)+0x8a>
c001429d:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00142a0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00142a4:	85 c0                	test   eax,eax
c00142a6:	74 49                	je     c00142f1 <VAS::allocatePages(int, int)+0x69>
c00142a8:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00142ac:	89 d5                	mov    ebp,edx
c00142ae:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00142b2:	c1 e5 0c             	shl    ebp,0xc
c00142b5:	01 dd                	add    ebp,ebx
c00142b7:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00142ba:	81 cf 00 04 00 00    	or     edi,0x400
c00142c0:	85 d2                	test   edx,edx
c00142c2:	7e 1b                	jle    c00142df <VAS::allocatePages(int, int)+0x57>
c00142c4:	e8 91 c4 ff ff       	call   c001075a <Phys::allocatePage()>
c00142c9:	57                   	push   edi
c00142ca:	53                   	push   ebx
c00142cb:	81 c3 00 10 00 00    	add    ebx,0x1000
c00142d1:	50                   	push   eax
c00142d2:	56                   	push   esi
c00142d3:	e8 a8 fe ff ff       	call   c0014180 <VAS::mapPage(unsigned long, unsigned long, int)>
c00142d8:	83 c4 10             	add    esp,0x10
c00142db:	39 dd                	cmp    ebp,ebx
c00142dd:	75 e5                	jne    c00142c4 <VAS::allocatePages(int, int)+0x3c>
c00142df:	0f 20 d8             	mov    eax,cr3
c00142e2:	0f 22 d8             	mov    cr3,eax
c00142e5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00142e9:	83 c4 1c             	add    esp,0x1c
c00142ec:	5b                   	pop    ebx
c00142ed:	5e                   	pop    esi
c00142ee:	5f                   	pop    edi
c00142ef:	5d                   	pop    ebp
c00142f0:	c3                   	ret    
c00142f1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00142f5:	83 ec 0c             	sub    esp,0xc
c00142f8:	68 b4 bb 02 c0       	push   0xc002bbb4
c00142fd:	e8 5e c2 ff ff       	call   c0010560 <KePanic(char const*)>
c0014302:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0014305:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014309:	83 c4 10             	add    esp,0x10
c001430c:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0014310:	eb 96                	jmp    c00142a8 <VAS::allocatePages(int, int)+0x20>
c0014312:	83 ec 0c             	sub    esp,0xc
c0014315:	52                   	push   edx
c0014316:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c001431a:	e8 88 f7 ff ff       	call   c0013aa7 <Virt::allocateKernelVirtualPages(int)>
c001431f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014323:	83 c4 10             	add    esp,0x10
c0014326:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c001432b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001432f:	77 38                	ja     c0014369 <VAS::allocatePages(int, int)+0xe1>
c0014331:	85 d2                	test   edx,edx
c0014333:	7e aa                	jle    c00142df <VAS::allocatePages(int, int)+0x57>
c0014335:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0014339:	c1 e2 0c             	shl    edx,0xc
c001433c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0014340:	81 cf 00 04 00 00    	or     edi,0x400
c0014346:	8d 2c 1a             	lea    ebp,[edx+ebx*1]
c0014349:	e8 0c c4 ff ff       	call   c001075a <Phys::allocatePage()>
c001434e:	57                   	push   edi
c001434f:	53                   	push   ebx
c0014350:	81 c3 00 10 00 00    	add    ebx,0x1000
c0014356:	50                   	push   eax
c0014357:	56                   	push   esi
c0014358:	e8 23 fe ff ff       	call   c0014180 <VAS::mapPage(unsigned long, unsigned long, int)>
c001435d:	83 c4 10             	add    esp,0x10
c0014360:	39 dd                	cmp    ebp,ebx
c0014362:	75 e5                	jne    c0014349 <VAS::allocatePages(int, int)+0xc1>
c0014364:	e9 76 ff ff ff       	jmp    c00142df <VAS::allocatePages(int, int)+0x57>
c0014369:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001436d:	a1 28 64 03 c0       	mov    eax,ds:0xc0036428
c0014372:	09 c1                	or     ecx,eax
c0014374:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0014378:	eb b7                	jmp    c0014331 <VAS::allocatePages(int, int)+0xa9>

c001437a <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c001437a:	55                   	push   ebp
c001437b:	57                   	push   edi
c001437c:	56                   	push   esi
c001437d:	53                   	push   ebx
c001437e:	83 ec 1c             	sub    esp,0x1c
c0014381:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0014385:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0014389:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001438d:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0014391:	85 db                	test   ebx,ebx
c0014393:	7e 2c                	jle    c00143c1 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x47>
c0014395:	c1 e3 0c             	shl    ebx,0xc
c0014398:	8d 04 33             	lea    eax,[ebx+esi*1]
c001439b:	89 f3                	mov    ebx,esi
c001439d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00143a1:	55                   	push   ebp
c00143a2:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00143a6:	29 f2                	sub    edx,esi
c00143a8:	01 da                	add    edx,ebx
c00143aa:	52                   	push   edx
c00143ab:	53                   	push   ebx
c00143ac:	81 c3 00 10 00 00    	add    ebx,0x1000
c00143b2:	57                   	push   edi
c00143b3:	e8 c8 fd ff ff       	call   c0014180 <VAS::mapPage(unsigned long, unsigned long, int)>
c00143b8:	83 c4 10             	add    esp,0x10
c00143bb:	3b 5c 24 0c          	cmp    ebx,DWORD PTR [esp+0xc]
c00143bf:	75 e0                	jne    c00143a1 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x27>
c00143c1:	0f 20 d8             	mov    eax,cr3
c00143c4:	0f 22 d8             	mov    cr3,eax
c00143c7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00143cb:	83 c4 1c             	add    esp,0x1c
c00143ce:	5b                   	pop    ebx
c00143cf:	5e                   	pop    esi
c00143d0:	5f                   	pop    edi
c00143d1:	5d                   	pop    ebp
c00143d2:	c3                   	ret    
c00143d3:	90                   	nop

c00143d4 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c00143d4:	55                   	push   ebp
c00143d5:	57                   	push   edi
c00143d6:	56                   	push   esi
c00143d7:	53                   	push   ebx
c00143d8:	83 ec 1c             	sub    esp,0x1c
c00143db:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00143df:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00143e3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00143e7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00143eb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00143ef:	09 d8                	or     eax,ebx
c00143f1:	a9 ff 0f 00 00       	test   eax,0xfff
c00143f6:	75 4b                	jne    c0014443 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x6f>
c00143f8:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00143fb:	89 de                	mov    esi,ebx
c00143fd:	c1 ee 16             	shr    esi,0x16
c0014400:	8d 2c b5 00 00 00 00 	lea    ebp,[esi*4+0x0]
c0014407:	f6 04 28 01          	test   BYTE PTR [eax+ebp*1],0x1
c001440b:	74 48                	je     c0014455 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x81>
c001440d:	0f b6 7c 24 04       	movzx  edi,BYTE PTR [esp+0x4]
c0014412:	c1 eb 0a             	shr    ebx,0xa
c0014415:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0014419:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c001441d:	83 ff 01             	cmp    edi,0x1
c0014420:	19 c0                	sbb    eax,eax
c0014422:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0014428:	c1 e6 0c             	shl    esi,0xc
c001442b:	25 00 00 c0 ff       	and    eax,0xffc00000
c0014430:	01 f3                	add    ebx,esi
c0014432:	09 ca                	or     edx,ecx
c0014434:	89 94 18 00 00 c0 c2 	mov    DWORD PTR [eax+ebx*1-0x3d400000],edx
c001443b:	83 c4 1c             	add    esp,0x1c
c001443e:	5b                   	pop    ebx
c001443f:	5e                   	pop    esi
c0014440:	5f                   	pop    edi
c0014441:	5d                   	pop    ebp
c0014442:	c3                   	ret    
c0014443:	83 ec 0c             	sub    esp,0xc
c0014446:	68 e0 bb 02 c0       	push   0xc002bbe0
c001444b:	e8 10 c1 ff ff       	call   c0010560 <KePanic(char const*)>
c0014450:	83 c4 10             	add    esp,0x10
c0014453:	eb a3                	jmp    c00143f8 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x24>
c0014455:	e8 00 c3 ff ff       	call   c001075a <Phys::allocatePage()>
c001445a:	8b 0d 90 62 03 c0    	mov    ecx,DWORD PTR ds:0xc0036290
c0014460:	83 ec 0c             	sub    esp,0xc
c0014463:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0014467:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001446b:	6a 01                	push   0x1
c001446d:	e8 35 f6 ff ff       	call   c0013aa7 <Virt::allocateKernelVirtualPages(int)>
c0014472:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0014479:	6a 01                	push   0x1
c001447b:	50                   	push   eax
c001447c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014480:	50                   	push   eax
c0014481:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0014485:	51                   	push   ecx
c0014486:	e8 ef fe ff ff       	call   c001437a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001448b:	83 c4 1c             	add    esp,0x1c
c001448e:	68 00 10 00 00       	push   0x1000
c0014493:	6a 00                	push   0x0
c0014495:	50                   	push   eax
c0014496:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001449a:	e8 51 c0 fe ff       	call   c00004f0 <memset>
c001449f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00144a3:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00144a6:	e8 fa f8 ff ff       	call   c0013da5 <Virt::freeKernelVirtualPages(unsigned long)>
c00144ab:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00144af:	83 c4 10             	add    esp,0x10
c00144b2:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00144b5:	81 ca 07 04 00 00    	or     edx,0x407
c00144bb:	89 14 28             	mov    DWORD PTR [eax+ebp*1],edx
c00144be:	e9 4a ff ff ff       	jmp    c001440d <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x39>
c00144c3:	90                   	nop

c00144c4 <VAS::VAS(bool)>:
c00144c4:	53                   	push   ebx
c00144c5:	83 ec 28             	sub    esp,0x28
c00144c8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00144cc:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00144d0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00144d4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00144db:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00144df:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00144e6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00144ea:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c00144ee:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c00144f1:	e8 64 c2 ff ff       	call   c001075a <Phys::allocatePage()>
c00144f6:	89 c2                	mov    edx,eax
c00144f8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00144fc:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00144ff:	8b 1d 90 62 03 c0    	mov    ebx,DWORD PTR ds:0xc0036290
c0014505:	83 ec 0c             	sub    esp,0xc
c0014508:	6a 01                	push   0x1
c001450a:	e8 98 f5 ff ff       	call   c0013aa7 <Virt::allocateKernelVirtualPages(int)>
c001450f:	83 c4 10             	add    esp,0x10
c0014512:	89 c2                	mov    edx,eax
c0014514:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014518:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001451b:	83 ec 0c             	sub    esp,0xc
c001451e:	6a 03                	push   0x3
c0014520:	6a 01                	push   0x1
c0014522:	52                   	push   edx
c0014523:	50                   	push   eax
c0014524:	53                   	push   ebx
c0014525:	e8 50 fe ff ff       	call   c001437a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001452a:	83 c4 20             	add    esp,0x20
c001452d:	89 c2                	mov    edx,eax
c001452f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014533:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0014536:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001453e:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0014546:	7f 1d                	jg     c0014565 <VAS::VAS(bool)+0xa1>
c0014548:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001454c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001454f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0014553:	c1 e2 02             	shl    edx,0x2
c0014556:	01 d0                	add    eax,edx
c0014558:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c001455e:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0014563:	eb d9                	jmp    c001453e <VAS::VAS(bool)+0x7a>
c0014565:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c001456d:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0014575:	7f 59                	jg     c00145d0 <VAS::VAS(bool)+0x10c>
c0014577:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001457b:	2d 00 02 00 00       	sub    eax,0x200
c0014580:	c1 e0 0c             	shl    eax,0xc
c0014583:	89 c2                	mov    edx,eax
c0014585:	a1 28 64 03 c0       	mov    eax,ds:0xc0036428
c001458a:	89 d1                	mov    ecx,edx
c001458c:	09 c1                	or     ecx,eax
c001458e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014592:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0014595:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014599:	c1 e2 02             	shl    edx,0x2
c001459c:	01 d0                	add    eax,edx
c001459e:	83 c9 05             	or     ecx,0x5
c00145a1:	89 ca                	mov    edx,ecx
c00145a3:	89 10                	mov    DWORD PTR [eax],edx
c00145a5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00145a9:	2d 40 03 00 00       	sub    eax,0x340
c00145ae:	83 f8 7f             	cmp    eax,0x7f
c00145b1:	77 16                	ja     c00145c9 <VAS::VAS(bool)+0x105>
c00145b3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00145b7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00145ba:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00145be:	c1 e2 02             	shl    edx,0x2
c00145c1:	01 d0                	add    eax,edx
c00145c3:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c00145c9:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c00145ce:	eb 9d                	jmp    c001456d <VAS::VAS(bool)+0xa9>
c00145d0:	8b 15 28 64 03 c0    	mov    edx,DWORD PTR ds:0xc0036428
c00145d6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00145da:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00145dd:	05 20 0c 00 00       	add    eax,0xc20
c00145e2:	81 ca 03 40 00 00    	or     edx,0x4003
c00145e8:	89 10                	mov    DWORD PTR [eax],edx
c00145ea:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00145ee:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00145f1:	a1 28 64 03 c0       	mov    eax,ds:0xc0036428
c00145f6:	09 c2                	or     edx,eax
c00145f8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00145fc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00145ff:	05 fc 0f 00 00       	add    eax,0xffc
c0014604:	83 ca 03             	or     edx,0x3
c0014607:	89 10                	mov    DWORD PTR [eax],edx
c0014609:	a1 08 61 03 c0       	mov    eax,ds:0xc0036108
c001460e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0014614:	83 ec 0c             	sub    esp,0xc
c0014617:	50                   	push   eax
c0014618:	e8 5f 60 ff ff       	call   c000a67c <Device::getName()>
c001461d:	83 c4 10             	add    esp,0x10
c0014620:	83 ec 08             	sub    esp,0x8
c0014623:	68 53 be 02 c0       	push   0xc002be53
c0014628:	50                   	push   eax
c0014629:	e8 52 c1 fe ff       	call   c0000780 <strcmp>
c001462e:	83 c4 10             	add    esp,0x10
c0014631:	85 c0                	test   eax,eax
c0014633:	0f 94 c0             	sete   al
c0014636:	0f b6 c0             	movzx  eax,al
c0014639:	85 c0                	test   eax,eax
c001463b:	74 68                	je     c00146a5 <VAS::VAS(bool)+0x1e1>
c001463d:	fa                   	cli    
c001463e:	a1 08 61 03 c0       	mov    eax,ds:0xc0036108
c0014643:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0014649:	05 68 09 00 00       	add    eax,0x968
c001464e:	83 ec 0c             	sub    esp,0xc
c0014651:	50                   	push   eax
c0014652:	e8 93 ae ff ff       	call   c000f4ea <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0014657:	83 c4 10             	add    esp,0x10
c001465a:	25 00 f0 ff ff       	and    eax,0xfffff000
c001465f:	89 c3                	mov    ebx,eax
c0014661:	a1 08 61 03 c0       	mov    eax,ds:0xc0036108
c0014666:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001466c:	05 68 09 00 00       	add    eax,0x968
c0014671:	83 ec 0c             	sub    esp,0xc
c0014674:	50                   	push   eax
c0014675:	e8 70 ae ff ff       	call   c000f4ea <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c001467a:	83 c4 10             	add    esp,0x10
c001467d:	83 ec 08             	sub    esp,0x8
c0014680:	50                   	push   eax
c0014681:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0014685:	e8 fc f6 ff ff       	call   c0013d86 <VAS::getPageTableEntry(unsigned long)>
c001468a:	83 c4 10             	add    esp,0x10
c001468d:	8b 00                	mov    eax,DWORD PTR [eax]
c001468f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014694:	6a 11                	push   0x11
c0014696:	53                   	push   ebx
c0014697:	50                   	push   eax
c0014698:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001469c:	e8 df fa ff ff       	call   c0014180 <VAS::mapPage(unsigned long, unsigned long, int)>
c00146a1:	83 c4 10             	add    esp,0x10
c00146a4:	fb                   	sti    
c00146a5:	90                   	nop
c00146a6:	83 c4 28             	add    esp,0x28
c00146a9:	5b                   	pop    ebx
c00146aa:	c3                   	ret    
c00146ab:	90                   	nop

c00146ac <VAS::evict(unsigned long)>:
c00146ac:	55                   	push   ebp
c00146ad:	57                   	push   edi
c00146ae:	56                   	push   esi
c00146af:	53                   	push   ebx
c00146b0:	83 ec 24             	sub    esp,0x24
c00146b3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00146b7:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c00146bb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00146bf:	a1 30 63 03 c0       	mov    eax,ds:0xc0036330
c00146c4:	50                   	push   eax
c00146c5:	68 61 be 02 c0       	push   0xc002be61
c00146ca:	e8 97 28 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00146cf:	e8 28 f5 ff ff       	call   c0013bfc <Virt::allocateSwapfilePage()>
c00146d4:	83 c4 10             	add    esp,0x10
c00146d7:	89 c7                	mov    edi,eax
c00146d9:	a1 2c fd 02 c0       	mov    eax,ds:0xc002fd2c
c00146de:	85 c0                	test   eax,eax
c00146e0:	7e 40                	jle    c0014722 <VAS::evict(unsigned long)+0x76>
c00146e2:	89 ee                	mov    esi,ebp
c00146e4:	31 db                	xor    ebx,ebx
c00146e6:	83 ec 0c             	sub    esp,0xc
c00146e9:	57                   	push   edi
c00146ea:	e8 f7 f4 ff ff       	call   c0013be6 <Virt::swapIDToSector(unsigned long)>
c00146ef:	31 d2                	xor    edx,edx
c00146f1:	89 34 24             	mov    DWORD PTR [esp],esi
c00146f4:	81 c6 00 02 00 00    	add    esi,0x200
c00146fa:	6a 01                	push   0x1
c00146fc:	52                   	push   edx
c00146fd:	01 d8                	add    eax,ebx
c00146ff:	83 c3 01             	add    ebx,0x1
c0014702:	50                   	push   eax
c0014703:	0f be 05 38 fd 02 c0 	movsx  eax,BYTE PTR ds:0xc002fd38
c001470a:	8b 04 85 dc 59 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffca624]
c0014711:	50                   	push   eax
c0014712:	e8 93 6d ff ff       	call   c000b4aa <LogicalDisk::write(unsigned long long, int, void*)>
c0014717:	83 c4 20             	add    esp,0x20
c001471a:	39 1d 2c fd 02 c0    	cmp    DWORD PTR ds:0xc002fd2c,ebx
c0014720:	7f c4                	jg     c00146e6 <VAS::evict(unsigned long)+0x3a>
c0014722:	c1 e7 0c             	shl    edi,0xc
c0014725:	83 ec 08             	sub    esp,0x8
c0014728:	55                   	push   ebp
c0014729:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001472d:	50                   	push   eax
c001472e:	e8 53 f6 ff ff       	call   c0013d86 <VAS::getPageTableEntry(unsigned long)>
c0014733:	8b 10                	mov    edx,DWORD PTR [eax]
c0014735:	89 d3                	mov    ebx,edx
c0014737:	81 e2 fe 07 00 00    	and    edx,0x7fe
c001473d:	09 d7                	or     edi,edx
c001473f:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0014745:	89 38                	mov    DWORD PTR [eax],edi
c0014747:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001474a:	8b 15 88 62 03 c0    	mov    edx,DWORD PTR ds:0xc0036288
c0014750:	83 c2 01             	add    edx,0x1
c0014753:	89 15 88 62 03 c0    	mov    DWORD PTR ds:0xc0036288,edx
c0014759:	e8 93 bf ff ff       	call   c00106f1 <Phys::freePage(unsigned long)>
c001475e:	0f 20 d8             	mov    eax,cr3
c0014761:	0f 22 d8             	mov    cr3,eax
c0014764:	8b 0d 88 62 03 c0    	mov    ecx,DWORD PTR ds:0xc0036288
c001476a:	51                   	push   ecx
c001476b:	55                   	push   ebp
c001476c:	53                   	push   ebx
c001476d:	68 04 bc 02 c0       	push   0xc002bc04
c0014772:	e8 ef 27 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0014777:	a1 84 62 03 c0       	mov    eax,ds:0xc0036284
c001477c:	83 c4 18             	add    esp,0x18
c001477f:	50                   	push   eax
c0014780:	68 76 be 02 c0       	push   0xc002be76
c0014785:	8d 50 01             	lea    edx,[eax+0x1]
c0014788:	89 15 84 62 03 c0    	mov    DWORD PTR ds:0xc0036284,edx
c001478e:	e8 d3 27 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0014793:	a1 30 63 03 c0       	mov    eax,ds:0xc0036330
c0014798:	c7 44 24 40 88 be 02 c0 	mov    DWORD PTR [esp+0x40],0xc002be88
c00147a0:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00147a4:	83 c4 2c             	add    esp,0x2c
c00147a7:	5b                   	pop    ebx
c00147a8:	5e                   	pop    esi
c00147a9:	5f                   	pop    edi
c00147aa:	5d                   	pop    ebp
c00147ab:	e9 b6 27 ff ff       	jmp    c0006f66 <Dbg::kprintf(char const*, ...)>

c00147b0 <VAS::canLockPage(unsigned long)>:
c00147b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00147b4:	50                   	push   eax
c00147b5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00147b9:	52                   	push   edx
c00147ba:	e8 c7 f5 ff ff       	call   c0013d86 <VAS::getPageTableEntry(unsigned long)>
c00147bf:	59                   	pop    ecx
c00147c0:	5a                   	pop    edx
c00147c1:	8b 00                	mov    eax,DWORD PTR [eax]
c00147c3:	c1 e8 0b             	shr    eax,0xb
c00147c6:	83 e0 01             	and    eax,0x1
c00147c9:	c3                   	ret    

c00147ca <VAS::unlockPage(unsigned long)>:
c00147ca:	83 ec 0c             	sub    esp,0xc
c00147cd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00147d1:	50                   	push   eax
c00147d2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00147d6:	52                   	push   edx
c00147d7:	e8 aa f5 ff ff       	call   c0013d86 <VAS::getPageTableEntry(unsigned long)>
c00147dc:	59                   	pop    ecx
c00147dd:	5a                   	pop    edx
c00147de:	8b 10                	mov    edx,DWORD PTR [eax]
c00147e0:	f6 c6 08             	test   dh,0x8
c00147e3:	75 09                	jne    c00147ee <VAS::unlockPage(unsigned long)+0x24>
c00147e5:	80 ce 08             	or     dh,0x8
c00147e8:	89 10                	mov    DWORD PTR [eax],edx
c00147ea:	83 c4 0c             	add    esp,0xc
c00147ed:	c3                   	ret    
c00147ee:	c7 44 24 10 38 bc 02 c0 	mov    DWORD PTR [esp+0x10],0xc002bc38
c00147f6:	83 c4 0c             	add    esp,0xc
c00147f9:	e9 62 bd ff ff       	jmp    c0010560 <KePanic(char const*)>

c00147fe <VAS::canLockPages(unsigned long, int)>:
c00147fe:	55                   	push   ebp
c00147ff:	57                   	push   edi
c0014800:	56                   	push   esi
c0014801:	53                   	push   ebx
c0014802:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0014806:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001480a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001480e:	85 ff                	test   edi,edi
c0014810:	7e 23                	jle    c0014835 <VAS::canLockPages(unsigned long, int)+0x37>
c0014812:	31 f6                	xor    esi,esi
c0014814:	eb 0d                	jmp    c0014823 <VAS::canLockPages(unsigned long, int)+0x25>
c0014816:	83 c6 01             	add    esi,0x1
c0014819:	81 c3 00 10 00 00    	add    ebx,0x1000
c001481f:	39 f7                	cmp    edi,esi
c0014821:	74 0d                	je     c0014830 <VAS::canLockPages(unsigned long, int)+0x32>
c0014823:	53                   	push   ebx
c0014824:	55                   	push   ebp
c0014825:	e8 86 ff ff ff       	call   c00147b0 <VAS::canLockPage(unsigned long)>
c001482a:	5a                   	pop    edx
c001482b:	59                   	pop    ecx
c001482c:	84 c0                	test   al,al
c001482e:	75 e6                	jne    c0014816 <VAS::canLockPages(unsigned long, int)+0x18>
c0014830:	5b                   	pop    ebx
c0014831:	5e                   	pop    esi
c0014832:	5f                   	pop    edi
c0014833:	5d                   	pop    ebp
c0014834:	c3                   	ret    
c0014835:	b0 01                	mov    al,0x1
c0014837:	eb f7                	jmp    c0014830 <VAS::canLockPages(unsigned long, int)+0x32>
c0014839:	90                   	nop

c001483a <VAS::unlockPages(unsigned long, int)>:
c001483a:	55                   	push   ebp
c001483b:	57                   	push   edi
c001483c:	56                   	push   esi
c001483d:	53                   	push   ebx
c001483e:	83 ec 0c             	sub    esp,0xc
c0014841:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0014845:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0014849:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001484d:	85 ff                	test   edi,edi
c001484f:	7e 1c                	jle    c001486d <VAS::unlockPages(unsigned long, int)+0x33>
c0014851:	31 f6                	xor    esi,esi
c0014853:	83 ec 08             	sub    esp,0x8
c0014856:	83 c6 01             	add    esi,0x1
c0014859:	53                   	push   ebx
c001485a:	81 c3 00 10 00 00    	add    ebx,0x1000
c0014860:	55                   	push   ebp
c0014861:	e8 64 ff ff ff       	call   c00147ca <VAS::unlockPage(unsigned long)>
c0014866:	83 c4 10             	add    esp,0x10
c0014869:	39 f7                	cmp    edi,esi
c001486b:	75 e6                	jne    c0014853 <VAS::unlockPages(unsigned long, int)+0x19>
c001486d:	83 c4 0c             	add    esp,0xc
c0014870:	5b                   	pop    ebx
c0014871:	5e                   	pop    esi
c0014872:	5f                   	pop    edi
c0014873:	5d                   	pop    ebp
c0014874:	c3                   	ret    
c0014875:	90                   	nop

c0014876 <VAS::tryLoadBackOffDisk(unsigned long)>:
c0014876:	55                   	push   ebp
c0014877:	57                   	push   edi
c0014878:	56                   	push   esi
c0014879:	53                   	push   ebx
c001487a:	81 ec 1c 10 00 00    	sub    esp,0x101c
c0014880:	8b 9c 24 34 10 00 00 	mov    ebx,DWORD PTR [esp+0x1034]
c0014887:	81 fb ff ff bf ff    	cmp    ebx,0xffbfffff
c001488d:	77 6f                	ja     c00148fe <VAS::tryLoadBackOffDisk(unsigned long)+0x88>
c001488f:	83 ec 08             	sub    esp,0x8
c0014892:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0014898:	53                   	push   ebx
c0014899:	8b bc 24 3c 10 00 00 	mov    edi,DWORD PTR [esp+0x103c]
c00148a0:	57                   	push   edi
c00148a1:	e8 e0 f4 ff ff       	call   c0013d86 <VAS::getPageTableEntry(unsigned long)>
c00148a6:	83 c4 10             	add    esp,0x10
c00148a9:	85 c0                	test   eax,eax
c00148ab:	89 c5                	mov    ebp,eax
c00148ad:	0f 95 c0             	setne  al
c00148b0:	85 db                	test   ebx,ebx
c00148b2:	0f 95 c2             	setne  dl
c00148b5:	21 d0                	and    eax,edx
c00148b7:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00148bb:	a8 01                	test   al,0x1
c00148bd:	75 0f                	jne    c00148ce <VAS::tryLoadBackOffDisk(unsigned long)+0x58>
c00148bf:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c00148c3:	81 c4 1c 10 00 00    	add    esp,0x101c
c00148c9:	5b                   	pop    ebx
c00148ca:	5e                   	pop    esi
c00148cb:	5f                   	pop    edi
c00148cc:	5d                   	pop    ebp
c00148cd:	c3                   	ret    
c00148ce:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00148d1:	f6 c4 02             	test   ah,0x2
c00148d4:	75 3d                	jne    c0014913 <VAS::tryLoadBackOffDisk(unsigned long)+0x9d>
c00148d6:	89 c1                	mov    ecx,eax
c00148d8:	81 e1 01 04 00 00    	and    ecx,0x401
c00148de:	81 f9 00 04 00 00    	cmp    ecx,0x400
c00148e4:	0f 84 91 00 00 00    	je     c001497b <VAS::tryLoadBackOffDisk(unsigned long)+0x105>
c00148ea:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c00148ef:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c00148f3:	81 c4 1c 10 00 00    	add    esp,0x101c
c00148f9:	5b                   	pop    ebx
c00148fa:	5e                   	pop    esi
c00148fb:	5f                   	pop    edi
c00148fc:	5d                   	pop    ebp
c00148fd:	c3                   	ret    
c00148fe:	83 ec 0c             	sub    esp,0xc
c0014901:	68 9d be 02 c0       	push   0xc002be9d
c0014906:	e8 55 bc ff ff       	call   c0010560 <KePanic(char const*)>
c001490b:	83 c4 10             	add    esp,0x10
c001490e:	e9 7c ff ff ff       	jmp    c001488f <VAS::tryLoadBackOffDisk(unsigned long)+0x19>
c0014913:	83 ec 0c             	sub    esp,0xc
c0014916:	68 68 bc 02 c0       	push   0xc002bc68
c001491b:	e8 46 26 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0014920:	8b 75 00             	mov    esi,DWORD PTR [ebp+0x0]
c0014923:	e8 32 be ff ff       	call   c001075a <Phys::allocatePage()>
c0014928:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c001492e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014932:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014935:	83 c8 01             	or     eax,0x1
c0014938:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c001493b:	0f 20 d8             	mov    eax,cr3
c001493e:	0f 22 d8             	mov    cr3,eax
c0014941:	8d 54 24 20          	lea    edx,[esp+0x20]
c0014945:	b8 00 10 00 00       	mov    eax,0x1000
c001494a:	89 d7                	mov    edi,edx
c001494c:	89 c1                	mov    ecx,eax
c001494e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014950:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0014953:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0014957:	81 e1 ff 0d 00 00    	and    ecx,0xdff
c001495d:	09 f1                	or     ecx,esi
c001495f:	83 c9 02             	or     ecx,0x2
c0014962:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0014965:	0f 20 d9             	mov    ecx,cr3
c0014968:	0f 22 d9             	mov    cr3,ecx
c001496b:	89 d6                	mov    esi,edx
c001496d:	89 df                	mov    edi,ebx
c001496f:	89 c1                	mov    ecx,eax
c0014971:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014973:	83 c4 10             	add    esp,0x10
c0014976:	e9 44 ff ff ff       	jmp    c00148bf <VAS::tryLoadBackOffDisk(unsigned long)+0x49>
c001497b:	c1 e8 0c             	shr    eax,0xc
c001497e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014982:	e8 d3 bd ff ff       	call   c001075a <Phys::allocatePage()>
c0014987:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001498a:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0014990:	09 c1                	or     ecx,eax
c0014992:	81 c9 01 08 00 00    	or     ecx,0x801
c0014998:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c001499b:	a1 2c fd 02 c0       	mov    eax,ds:0xc002fd2c
c00149a0:	85 c0                	test   eax,eax
c00149a2:	7e 51                	jle    c00149f5 <VAS::tryLoadBackOffDisk(unsigned long)+0x17f>
c00149a4:	89 dd                	mov    ebp,ebx
c00149a6:	31 f6                	xor    esi,esi
c00149a8:	83 ec 08             	sub    esp,0x8
c00149ab:	55                   	push   ebp
c00149ac:	68 af be 02 c0       	push   0xc002beaf
c00149b1:	e8 b0 25 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00149b6:	59                   	pop    ecx
c00149b7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00149bb:	57                   	push   edi
c00149bc:	e8 25 f2 ff ff       	call   c0013be6 <Virt::swapIDToSector(unsigned long)>
c00149c1:	31 d2                	xor    edx,edx
c00149c3:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00149c6:	81 c5 00 02 00 00    	add    ebp,0x200
c00149cc:	6a 01                	push   0x1
c00149ce:	52                   	push   edx
c00149cf:	8d 3c 06             	lea    edi,[esi+eax*1]
c00149d2:	0f be 05 38 fd 02 c0 	movsx  eax,BYTE PTR ds:0xc002fd38
c00149d9:	83 c6 01             	add    esi,0x1
c00149dc:	57                   	push   edi
c00149dd:	8b 04 85 dc 59 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffca624]
c00149e4:	50                   	push   eax
c00149e5:	e8 54 6a ff ff       	call   c000b43e <LogicalDisk::read(unsigned long long, int, void*)>
c00149ea:	83 c4 20             	add    esp,0x20
c00149ed:	39 35 2c fd 02 c0    	cmp    DWORD PTR ds:0xc002fd2c,esi
c00149f3:	7f b3                	jg     c00149a8 <VAS::tryLoadBackOffDisk(unsigned long)+0x132>
c00149f5:	a1 88 62 03 c0       	mov    eax,ds:0xc0036288
c00149fa:	83 ec 04             	sub    esp,0x4
c00149fd:	83 e8 01             	sub    eax,0x1
c0014a00:	50                   	push   eax
c0014a01:	53                   	push   ebx
c0014a02:	68 c8 be 02 c0       	push   0xc002bec8
c0014a07:	a3 88 62 03 c0       	mov    ds:0xc0036288,eax
c0014a0c:	e8 55 25 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0014a11:	58                   	pop    eax
c0014a12:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014a16:	52                   	push   edx
c0014a17:	e8 a7 f1 ff ff       	call   c0013bc3 <Virt::freeSwapfilePage(unsigned long)>
c0014a1c:	0f 20 d8             	mov    eax,cr3
c0014a1f:	0f 22 d8             	mov    cr3,eax
c0014a22:	83 c4 10             	add    esp,0x10
c0014a25:	e9 95 fe ff ff       	jmp    c00148bf <VAS::tryLoadBackOffDisk(unsigned long)+0x49>

c0014a2a <VAS::lockPage(unsigned long)>:
c0014a2a:	56                   	push   esi
c0014a2b:	53                   	push   ebx
c0014a2c:	83 ec 04             	sub    esp,0x4
c0014a2f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014a33:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014a37:	50                   	push   eax
c0014a38:	56                   	push   esi
c0014a39:	e8 48 f3 ff ff       	call   c0013d86 <VAS::getPageTableEntry(unsigned long)>
c0014a3e:	5a                   	pop    edx
c0014a3f:	59                   	pop    ecx
c0014a40:	89 c3                	mov    ebx,eax
c0014a42:	8b 00                	mov    eax,DWORD PTR [eax]
c0014a44:	a8 01                	test   al,0x1
c0014a46:	74 10                	je     c0014a58 <VAS::lockPage(unsigned long)+0x2e>
c0014a48:	f6 c4 08             	test   ah,0x8
c0014a4b:	74 28                	je     c0014a75 <VAS::lockPage(unsigned long)+0x4b>
c0014a4d:	80 e4 f7             	and    ah,0xf7
c0014a50:	89 03                	mov    DWORD PTR [ebx],eax
c0014a52:	83 c4 04             	add    esp,0x4
c0014a55:	5b                   	pop    ebx
c0014a56:	5e                   	pop    esi
c0014a57:	c3                   	ret    
c0014a58:	83 ec 08             	sub    esp,0x8
c0014a5b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014a60:	50                   	push   eax
c0014a61:	56                   	push   esi
c0014a62:	e8 0f fe ff ff       	call   c0014876 <VAS::tryLoadBackOffDisk(unsigned long)>
c0014a67:	83 c4 10             	add    esp,0x10
c0014a6a:	84 c0                	test   al,al
c0014a6c:	74 19                	je     c0014a87 <VAS::lockPage(unsigned long)+0x5d>
c0014a6e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014a70:	f6 c4 08             	test   ah,0x8
c0014a73:	75 d8                	jne    c0014a4d <VAS::lockPage(unsigned long)+0x23>
c0014a75:	c7 44 24 10 38 bc 02 c0 	mov    DWORD PTR [esp+0x10],0xc002bc38
c0014a7d:	83 c4 04             	add    esp,0x4
c0014a80:	5b                   	pop    ebx
c0014a81:	5e                   	pop    esi
c0014a82:	e9 d9 ba ff ff       	jmp    c0010560 <KePanic(char const*)>
c0014a87:	83 ec 0c             	sub    esp,0xc
c0014a8a:	68 88 bc 02 c0       	push   0xc002bc88
c0014a8f:	e8 cc ba ff ff       	call   c0010560 <KePanic(char const*)>
c0014a94:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014a96:	83 c4 10             	add    esp,0x10
c0014a99:	eb ad                	jmp    c0014a48 <VAS::lockPage(unsigned long)+0x1e>
c0014a9b:	90                   	nop

c0014a9c <VAS::lockPages(unsigned long, int)>:
c0014a9c:	55                   	push   ebp
c0014a9d:	57                   	push   edi
c0014a9e:	56                   	push   esi
c0014a9f:	53                   	push   ebx
c0014aa0:	83 ec 0c             	sub    esp,0xc
c0014aa3:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0014aa7:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0014aab:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0014aaf:	85 ff                	test   edi,edi
c0014ab1:	7e 1c                	jle    c0014acf <VAS::lockPages(unsigned long, int)+0x33>
c0014ab3:	31 f6                	xor    esi,esi
c0014ab5:	83 ec 08             	sub    esp,0x8
c0014ab8:	83 c6 01             	add    esi,0x1
c0014abb:	53                   	push   ebx
c0014abc:	81 c3 00 10 00 00    	add    ebx,0x1000
c0014ac2:	55                   	push   ebp
c0014ac3:	e8 62 ff ff ff       	call   c0014a2a <VAS::lockPage(unsigned long)>
c0014ac8:	83 c4 10             	add    esp,0x10
c0014acb:	39 f7                	cmp    edi,esi
c0014acd:	75 e6                	jne    c0014ab5 <VAS::lockPages(unsigned long, int)+0x19>
c0014acf:	83 c4 0c             	add    esp,0xc
c0014ad2:	5b                   	pop    ebx
c0014ad3:	5e                   	pop    esi
c0014ad4:	5f                   	pop    edi
c0014ad5:	5d                   	pop    ebp
c0014ad6:	c3                   	ret    
c0014ad7:	90                   	nop

c0014ad8 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)>:
c0014ad8:	55                   	push   ebp
c0014ad9:	57                   	push   edi
c0014ada:	56                   	push   esi
c0014adb:	53                   	push   ebx
c0014adc:	83 ec 28             	sub    esp,0x28
c0014adf:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0014ae3:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0014ae7:	50                   	push   eax
c0014ae8:	e8 ba ef ff ff       	call   c0013aa7 <Virt::allocateKernelVirtualPages(int)>
c0014aed:	83 c4 0c             	add    esp,0xc
c0014af0:	6a 07                	push   0x7
c0014af2:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0014af6:	52                   	push   edx
c0014af7:	89 c5                	mov    ebp,eax
c0014af9:	53                   	push   ebx
c0014afa:	e8 89 f7 ff ff       	call   c0014288 <VAS::allocatePages(int, int)>
c0014aff:	83 c4 10             	add    esp,0x10
c0014b02:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0014b06:	89 c7                	mov    edi,eax
c0014b08:	85 c9                	test   ecx,ecx
c0014b0a:	74 2f                	je     c0014b3b <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x63>
c0014b0c:	31 f6                	xor    esi,esi
c0014b0e:	e8 47 bc ff ff       	call   c001075a <Phys::allocatePage()>
c0014b13:	83 c6 01             	add    esi,0x1
c0014b16:	6a 03                	push   0x3
c0014b18:	55                   	push   ebp
c0014b19:	50                   	push   eax
c0014b1a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014b1e:	53                   	push   ebx
c0014b1f:	e8 5c f6 ff ff       	call   c0014180 <VAS::mapPage(unsigned long, unsigned long, int)>
c0014b24:	6a 07                	push   0x7
c0014b26:	57                   	push   edi
c0014b27:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014b2b:	50                   	push   eax
c0014b2c:	53                   	push   ebx
c0014b2d:	e8 4e f6 ff ff       	call   c0014180 <VAS::mapPage(unsigned long, unsigned long, int)>
c0014b32:	83 c4 20             	add    esp,0x20
c0014b35:	39 74 24 34          	cmp    DWORD PTR [esp+0x34],esi
c0014b39:	75 d3                	jne    c0014b0e <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x36>
c0014b3b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0014b3f:	89 28                	mov    DWORD PTR [eax],ebp
c0014b41:	83 c4 1c             	add    esp,0x1c
c0014b44:	89 f8                	mov    eax,edi
c0014b46:	5b                   	pop    ebx
c0014b47:	5e                   	pop    esi
c0014b48:	5f                   	pop    edi
c0014b49:	5d                   	pop    ebp
c0014b4a:	c3                   	ret    
c0014b4b:	90                   	nop

c0014b4c <VAS::freeSharedMemoryWithKernel(unsigned long, unsigned long)>:
c0014b4c:	53                   	push   ebx
c0014b4d:	83 ec 14             	sub    esp,0x14
c0014b50:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0014b54:	68 b8 bc 02 c0       	push   0xc002bcb8
c0014b59:	e8 08 24 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0014b5e:	c7 04 24 18 bd 02 c0 	mov    DWORD PTR [esp],0xc002bd18
c0014b65:	e8 fc 23 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0014b6a:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0014b6e:	83 c4 18             	add    esp,0x18
c0014b71:	5b                   	pop    ebx
c0014b72:	e9 2e f2 ff ff       	jmp    c0013da5 <Virt::freeKernelVirtualPages(unsigned long)>
c0014b77:	90                   	nop

c0014b78 <VAS::scanForEviction()>:
c0014b78:	57                   	push   edi
c0014b79:	56                   	push   esi
c0014b7a:	31 f6                	xor    esi,esi
c0014b7c:	53                   	push   ebx
c0014b7d:	83 ec 18             	sub    esp,0x18
c0014b80:	a1 30 63 03 c0       	mov    eax,ds:0xc0036330
c0014b85:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0014b89:	50                   	push   eax
c0014b8a:	68 94 bd 02 c0       	push   0xc002bd94
c0014b8f:	e8 d2 23 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0014b94:	c7 04 24 dd be 02 c0 	mov    DWORD PTR [esp],0xc002bedd
c0014b9b:	e8 c6 23 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0014ba0:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0014ba3:	83 c4 10             	add    esp,0x10
c0014ba6:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0014bac:	75 0e                	jne    c0014bbc <VAS::scanForEviction()+0x44>
c0014bae:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0014bb1:	89 da                	mov    edx,ebx
c0014bb3:	c1 ea 16             	shr    edx,0x16
c0014bb6:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0014bba:	74 5b                	je     c0014c17 <VAS::scanForEviction()+0x9f>
c0014bbc:	83 ec 08             	sub    esp,0x8
c0014bbf:	53                   	push   ebx
c0014bc0:	57                   	push   edi
c0014bc1:	e8 c0 f1 ff ff       	call   c0013d86 <VAS::getPageTableEntry(unsigned long)>
c0014bc6:	83 c4 10             	add    esp,0x10
c0014bc9:	8b 10                	mov    edx,DWORD PTR [eax]
c0014bcb:	89 d1                	mov    ecx,edx
c0014bcd:	c1 e9 0c             	shr    ecx,0xc
c0014bd0:	74 10                	je     c0014be2 <VAS::scanForEviction()+0x6a>
c0014bd2:	89 d1                	mov    ecx,edx
c0014bd4:	81 e1 00 0c 00 00    	and    ecx,0xc00
c0014bda:	81 f9 00 0c 00 00    	cmp    ecx,0xc00
c0014be0:	74 40                	je     c0014c22 <VAS::scanForEviction()+0xaa>
c0014be2:	81 c3 00 10 00 00    	add    ebx,0x1000
c0014be8:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c0014bee:	76 2d                	jbe    c0014c1d <VAS::scanForEviction()+0xa5>
c0014bf0:	c7 47 08 00 00 00 00 	mov    DWORD PTR [edi+0x8],0x0
c0014bf7:	83 c6 01             	add    esi,0x1
c0014bfa:	83 fe 03             	cmp    esi,0x3
c0014bfd:	74 37                	je     c0014c36 <VAS::scanForEviction()+0xbe>
c0014bff:	31 db                	xor    ebx,ebx
c0014c01:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0014c07:	75 b3                	jne    c0014bbc <VAS::scanForEviction()+0x44>
c0014c09:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0014c0c:	89 da                	mov    edx,ebx
c0014c0e:	c1 ea 16             	shr    edx,0x16
c0014c11:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0014c15:	75 a5                	jne    c0014bbc <VAS::scanForEviction()+0x44>
c0014c17:	81 c3 00 00 40 00    	add    ebx,0x400000
c0014c1d:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0014c20:	eb 84                	jmp    c0014ba6 <VAS::scanForEviction()+0x2e>
c0014c22:	f6 c2 01             	test   dl,0x1
c0014c25:	74 bb                	je     c0014be2 <VAS::scanForEviction()+0x6a>
c0014c27:	f6 c2 20             	test   dl,0x20
c0014c2a:	74 13                	je     c0014c3f <VAS::scanForEviction()+0xc7>
c0014c2c:	83 e2 df             	and    edx,0xffffffdf
c0014c2f:	89 10                	mov    DWORD PTR [eax],edx
c0014c31:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0014c34:	eb ac                	jmp    c0014be2 <VAS::scanForEviction()+0x6a>
c0014c36:	83 c4 10             	add    esp,0x10
c0014c39:	31 c0                	xor    eax,eax
c0014c3b:	5b                   	pop    ebx
c0014c3c:	5e                   	pop    esi
c0014c3d:	5f                   	pop    edi
c0014c3e:	c3                   	ret    
c0014c3f:	89 d0                	mov    eax,edx
c0014c41:	83 ec 08             	sub    esp,0x8
c0014c44:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014c49:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014c4d:	53                   	push   ebx
c0014c4e:	68 f9 be 02 c0       	push   0xc002bef9
c0014c53:	e8 0e 23 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0014c58:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c0014c5b:	58                   	pop    eax
c0014c5c:	5a                   	pop    edx
c0014c5d:	51                   	push   ecx
c0014c5e:	57                   	push   edi
c0014c5f:	e8 48 fa ff ff       	call   c00146ac <VAS::evict(unsigned long)>
c0014c64:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0014c67:	5b                   	pop    ebx
c0014c68:	5e                   	pop    esi
c0014c69:	50                   	push   eax
c0014c6a:	68 0d bf 02 c0       	push   0xc002bf0d
c0014c6f:	e8 f2 22 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0014c74:	58                   	pop    eax
c0014c75:	5a                   	pop    edx
c0014c76:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014c7a:	50                   	push   eax
c0014c7b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014c7f:	68 20 bf 02 c0       	push   0xc002bf20
c0014c84:	e8 dd 22 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0014c89:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c0014c8c:	81 c1 00 10 00 00    	add    ecx,0x1000
c0014c92:	89 4f 08             	mov    DWORD PTR [edi+0x8],ecx
c0014c95:	8b 3d 30 63 03 c0    	mov    edi,DWORD PTR ds:0xc0036330
c0014c9b:	5b                   	pop    ebx
c0014c9c:	5e                   	pop    esi
c0014c9d:	57                   	push   edi
c0014c9e:	68 b4 bd 02 c0       	push   0xc002bdb4
c0014ca3:	e8 be 22 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0014ca8:	83 c4 10             	add    esp,0x10
c0014cab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014caf:	83 c4 10             	add    esp,0x10
c0014cb2:	5b                   	pop    ebx
c0014cb3:	5e                   	pop    esi
c0014cb4:	5f                   	pop    edi
c0014cb5:	c3                   	ret    

c0014cb6 <mapVASFirstTime>:
c0014cb6:	55                   	push   ebp
c0014cb7:	57                   	push   edi
c0014cb8:	56                   	push   esi
c0014cb9:	53                   	push   ebx
c0014cba:	83 ec 0c             	sub    esp,0xc
c0014cbd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014cc2:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0014cc5:	83 fa 01             	cmp    edx,0x1
c0014cc8:	0f 84 cb 00 00 00    	je     c0014d99 <mapVASFirstTime+0xe3>
c0014cce:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c0014cd1:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c0014cd6:	bf 00 90 e7 01       	mov    edi,0x1e79000
c0014cdb:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c0014cde:	8b b2 b2 05 00 00    	mov    esi,DWORD PTR [edx+0x5b2]
c0014ce4:	c1 e5 15             	shl    ebp,0x15
c0014ce7:	29 eb                	sub    ebx,ebp
c0014ce9:	29 ef                	sub    edi,ebp
c0014ceb:	e8 6a ba ff ff       	call   c001075a <Phys::allocatePage()>
c0014cf0:	83 ec 0c             	sub    esp,0xc
c0014cf3:	68 03 04 00 00       	push   0x403
c0014cf8:	6a 01                	push   0x1
c0014cfa:	53                   	push   ebx
c0014cfb:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0014d01:	50                   	push   eax
c0014d02:	56                   	push   esi
c0014d03:	e8 72 f6 ff ff       	call   c001437a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0014d08:	83 c4 20             	add    esp,0x20
c0014d0b:	39 fb                	cmp    ebx,edi
c0014d0d:	75 dc                	jne    c0014ceb <mapVASFirstTime+0x35>
c0014d0f:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c0014d14:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c0014d19:	29 eb                	sub    ebx,ebp
c0014d1b:	29 ef                	sub    edi,ebp
c0014d1d:	e8 38 ba ff ff       	call   c001075a <Phys::allocatePage()>
c0014d22:	0f b6 56 01          	movzx  edx,BYTE PTR [esi+0x1]
c0014d26:	83 fa 01             	cmp    edx,0x1
c0014d29:	19 d2                	sbb    edx,edx
c0014d2b:	83 ec 0c             	sub    esp,0xc
c0014d2e:	83 e2 04             	and    edx,0x4
c0014d31:	81 c2 03 04 00 00    	add    edx,0x403
c0014d37:	52                   	push   edx
c0014d38:	6a 01                	push   0x1
c0014d3a:	53                   	push   ebx
c0014d3b:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0014d41:	50                   	push   eax
c0014d42:	56                   	push   esi
c0014d43:	e8 32 f6 ff ff       	call   c001437a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0014d48:	83 c4 20             	add    esp,0x20
c0014d4b:	39 df                	cmp    edi,ebx
c0014d4d:	75 ce                	jne    c0014d1d <mapVASFirstTime+0x67>
c0014d4f:	83 ec 0c             	sub    esp,0xc
c0014d52:	bb 7c 20 03 c0       	mov    ebx,0xc003207c
c0014d57:	6a 04                	push   0x4
c0014d59:	81 eb 00 10 03 c0    	sub    ebx,0xc0031000
c0014d5f:	6a ff                	push   0xffffffff
c0014d61:	c1 eb 0c             	shr    ebx,0xc
c0014d64:	53                   	push   ebx
c0014d65:	68 00 10 03 c0       	push   0xc0031000
c0014d6a:	56                   	push   esi
c0014d6b:	e8 b0 f1 ff ff       	call   c0013f20 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0014d70:	83 c4 14             	add    esp,0x14
c0014d73:	a1 90 62 03 c0       	mov    eax,ds:0xc0036290
c0014d78:	6a 04                	push   0x4
c0014d7a:	6a ff                	push   0xffffffff
c0014d7c:	53                   	push   ebx
c0014d7d:	68 00 10 03 c0       	push   0xc0031000
c0014d82:	50                   	push   eax
c0014d83:	e8 98 f1 ff ff       	call   c0013f20 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0014d88:	0f 20 d8             	mov    eax,cr3
c0014d8b:	0f 22 d8             	mov    cr3,eax
c0014d8e:	83 c4 20             	add    esp,0x20
c0014d91:	83 c4 0c             	add    esp,0xc
c0014d94:	5b                   	pop    ebx
c0014d95:	5e                   	pop    esi
c0014d96:	5f                   	pop    edi
c0014d97:	5d                   	pop    ebp
c0014d98:	c3                   	ret    
c0014d99:	83 ec 0c             	sub    esp,0xc
c0014d9c:	68 2d bf 02 c0       	push   0xc002bf2d
c0014da1:	e8 c0 21 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0014da6:	83 c4 10             	add    esp,0x10
c0014da9:	83 c4 0c             	add    esp,0xc
c0014dac:	5b                   	pop    ebx
c0014dad:	5e                   	pop    esi
c0014dae:	5f                   	pop    edi
c0014daf:	5d                   	pop    ebp
c0014db0:	c3                   	ret    

c0014db1 <SysAlarm(regs*)>:
c0014db1:	53                   	push   ebx
c0014db2:	83 ec 10             	sub    esp,0x10
c0014db5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014db9:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014dbc:	68 46 bf 02 c0       	push   0xc002bf46
c0014dc1:	e8 a0 21 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0014dc6:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014dc9:	83 c4 0c             	add    esp,0xc
c0014dcc:	31 d2                	xor    edx,edx
c0014dce:	52                   	push   edx
c0014dcf:	50                   	push   eax
c0014dd0:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c0014dd6:	e8 c5 09 00 00       	call   c00157a0 <KeAlarm(ThreadControlBlock*, unsigned long long)>
c0014ddb:	83 c4 18             	add    esp,0x18
c0014dde:	5b                   	pop    ebx
c0014ddf:	c3                   	ret    

c0014de0 <SysEject(regs*)>:
c0014de0:	83 ec 0c             	sub    esp,0xc
c0014de3:	83 ca ff             	or     edx,0xffffffff
c0014de6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014dea:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0014ded:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0014df2:	83 e9 41             	sub    ecx,0x41
c0014df5:	83 f9 19             	cmp    ecx,0x19
c0014df8:	77 18                	ja     c0014e12 <SysEject(regs*)+0x32>
c0014dfa:	8b 0c 8d e0 5a 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffca520]
c0014e01:	85 c9                	test   ecx,ecx
c0014e03:	74 0d                	je     c0014e12 <SysEject(regs*)+0x32>
c0014e05:	83 ec 0c             	sub    esp,0xc
c0014e08:	51                   	push   ecx
c0014e09:	e8 c6 65 ff ff       	call   c000b3d4 <LogicalDisk::eject()>
c0014e0e:	83 c4 10             	add    esp,0x10
c0014e11:	99                   	cdq    
c0014e12:	83 c4 0c             	add    esp,0xc
c0014e15:	c3                   	ret    

c0014e16 <SysExit(regs*)>:
c0014e16:	83 ec 18             	sub    esp,0x18
c0014e19:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014e1d:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014e20:	e8 b7 2a 00 00       	call   c00178dc <KeTerminateCurrentThread(int)>
c0014e25:	83 c8 ff             	or     eax,0xffffffff
c0014e28:	83 c4 1c             	add    esp,0x1c
c0014e2b:	89 c2                	mov    edx,eax
c0014e2d:	c3                   	ret    

c0014e2e <SysGetCwd(regs*)>:
c0014e2e:	83 ec 10             	sub    esp,0x10
c0014e31:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014e35:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0014e38:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014e3b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014e40:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0014e43:	e8 ea 39 ff ff       	call   c0008832 <Fs::getcwd(Process*, char*, int)>
c0014e48:	83 c4 1c             	add    esp,0x1c
c0014e4b:	99                   	cdq    
c0014e4c:	c3                   	ret    

c0014e4d <SysGetPID(regs*)>:
c0014e4d:	83 ec 14             	sub    esp,0x14
c0014e50:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014e55:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014e58:	ff 30                	push   DWORD PTR [eax]
c0014e5a:	68 5b bf 02 c0       	push   0xc002bf5b
c0014e5f:	e8 02 21 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0014e64:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014e69:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014e6c:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e6e:	83 c4 1c             	add    esp,0x1c
c0014e71:	99                   	cdq    
c0014e72:	c3                   	ret    

c0014e73 <SysGetRAMData(regs*)>:
c0014e73:	a1 88 62 03 c0       	mov    eax,ds:0xc0036288
c0014e78:	03 05 78 61 03 c0    	add    eax,DWORD PTR ds:0xc0036178
c0014e7e:	8b 0d 7c 61 03 c0    	mov    ecx,DWORD PTR ds:0xc003617c
c0014e84:	69 c0 c8 00 00 00    	imul   eax,eax,0xc8
c0014e8a:	99                   	cdq    
c0014e8b:	f7 f9                	idiv   ecx
c0014e8d:	c1 e0 18             	shl    eax,0x18
c0014e90:	09 c8                	or     eax,ecx
c0014e92:	99                   	cdq    
c0014e93:	c3                   	ret    

c0014e94 <SysGetVGAPtr(regs*)>:
c0014e94:	55                   	push   ebp
c0014e95:	57                   	push   edi
c0014e96:	56                   	push   esi
c0014e97:	53                   	push   ebx
c0014e98:	83 ec 1c             	sub    esp,0x1c
c0014e9b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0014e9f:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0014ea2:	83 f8 ff             	cmp    eax,0xffffffff
c0014ea5:	74 23                	je     c0014eca <SysGetVGAPtr(regs*)+0x36>
c0014ea7:	83 ec 0c             	sub    esp,0xc
c0014eaa:	50                   	push   eax
c0014eab:	e8 e4 24 00 00       	call   c0017394 <KeProcessFromPID(int)>
c0014eb0:	31 d2                	xor    edx,edx
c0014eb2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014eb6:	83 c4 10             	add    esp,0x10
c0014eb9:	b8 01 00 00 00       	mov    eax,0x1
c0014ebe:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0014ec3:	75 11                	jne    c0014ed6 <SysGetVGAPtr(regs*)+0x42>
c0014ec5:	e9 80 00 00 00       	jmp    c0014f4a <SysGetVGAPtr(regs*)+0xb6>
c0014eca:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014ecf:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014ed2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014ed6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014eda:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0014ede:	8b a8 a6 05 00 00    	mov    ebp,DWORD PTR [eax+0x5a6]
c0014ee4:	74 0c                	je     c0014ef2 <SysGetVGAPtr(regs*)+0x5e>
c0014ee6:	83 ec 0c             	sub    esp,0xc
c0014ee9:	55                   	push   ebp
c0014eea:	e8 70 dc ff ff       	call   c0012b5f <setActiveTerminal(VgaText*)>
c0014eef:	83 c4 10             	add    esp,0x10
c0014ef2:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0014ef5:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0014efa:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0014efd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014eff:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0014f02:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014f05:	89 88 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],ecx
c0014f0b:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c0014f0e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014f11:	89 88 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],ecx
c0014f17:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014f1b:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0014f1e:	0f b6 80 76 02 00 00 	movzx  eax,BYTE PTR [eax+0x276]
c0014f25:	c1 e8 07             	shr    eax,0x7
c0014f28:	89 81 a8 0f 00 00    	mov    DWORD PTR [ecx+0xfa8],eax
c0014f2e:	50                   	push   eax
c0014f2f:	50                   	push   eax
c0014f30:	68 6a bf 02 c0       	push   0xc002bf6a
c0014f35:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014f38:	05 ac 0f 00 00       	add    eax,0xfac
c0014f3d:	50                   	push   eax
c0014f3e:	e8 0d b7 fe ff       	call   c0000650 <strcpy>
c0014f43:	83 c4 10             	add    esp,0x10
c0014f46:	31 c0                	xor    eax,eax
c0014f48:	31 d2                	xor    edx,edx
c0014f4a:	83 c4 1c             	add    esp,0x1c
c0014f4d:	5b                   	pop    ebx
c0014f4e:	5e                   	pop    esi
c0014f4f:	5f                   	pop    edi
c0014f50:	5d                   	pop    ebp
c0014f51:	c3                   	ret    
c0014f52:	66 90                	xchg   ax,ax

c0014f54 <SysKill(regs*)>:
c0014f54:	53                   	push   ebx
c0014f55:	83 ec 08             	sub    esp,0x8
c0014f58:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014f5c:	83 7b 28 ff          	cmp    DWORD PTR [ebx+0x28],0xffffffff
c0014f60:	75 16                	jne    c0014f78 <SysKill(regs*)+0x24>
c0014f62:	83 ec 0c             	sub    esp,0xc
c0014f65:	68 74 bf 02 c0       	push   0xc002bf74
c0014f6a:	e8 f1 b5 ff ff       	call   c0010560 <KePanic(char const*)>
c0014f6f:	83 c4 10             	add    esp,0x10
c0014f72:	e9 89 00 00 00       	jmp    c0015000 <SysKill(regs*)+0xac>
c0014f77:	90                   	nop
c0014f78:	83 ec 0c             	sub    esp,0xc
c0014f7b:	68 4c 63 03 c0       	push   0xc003634c
c0014f80:	e8 bb 3e 01 00       	call   c0028e40 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0014f85:	8d 76 00             	lea    esi,[esi+0x0]
c0014f88:	83 c4 10             	add    esp,0x10
c0014f8b:	85 c0                	test   eax,eax
c0014f8d:	74 19                	je     c0014fa8 <SysKill(regs*)+0x54>
c0014f8f:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c0014f92:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0014f95:	39 0a                	cmp    DWORD PTR [edx],ecx
c0014f97:	74 33                	je     c0014fcc <SysKill(regs*)+0x78>
c0014f99:	52                   	push   edx
c0014f9a:	52                   	push   edx
c0014f9b:	50                   	push   eax
c0014f9c:	68 4c 63 03 c0       	push   0xc003634c
c0014fa1:	e8 a6 43 01 00       	call   c002934c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0014fa6:	eb e0                	jmp    c0014f88 <SysKill(regs*)+0x34>
c0014fa8:	83 ec 0c             	sub    esp,0xc
c0014fab:	68 40 63 03 c0       	push   0xc0036340
c0014fb0:	e8 8b 3e 01 00       	call   c0028e40 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0014fb5:	8d 76 00             	lea    esi,[esi+0x0]
c0014fb8:	83 c4 10             	add    esp,0x10
c0014fbb:	85 c0                	test   eax,eax
c0014fbd:	74 41                	je     c0015000 <SysKill(regs*)+0xac>
c0014fbf:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c0014fc2:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0014fc5:	39 0a                	cmp    DWORD PTR [edx],ecx
c0014fc7:	75 27                	jne    c0014ff0 <SysKill(regs*)+0x9c>
c0014fc9:	8d 76 00             	lea    esi,[esi+0x0]
c0014fcc:	51                   	push   ecx
c0014fcd:	51                   	push   ecx
c0014fce:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014fd1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014fd6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014fd9:	ff b0 c0 07 00 00    	push   DWORD PTR [eax+0x7c0]
c0014fdf:	e8 8b c7 ff ff       	call   c001176f <KeRaiseSignal(SigHandlerBlock*, int)>
c0014fe4:	83 c4 10             	add    esp,0x10
c0014fe7:	31 c0                	xor    eax,eax
c0014fe9:	31 d2                	xor    edx,edx
c0014feb:	eb 1b                	jmp    c0015008 <SysKill(regs*)+0xb4>
c0014fed:	8d 76 00             	lea    esi,[esi+0x0]
c0014ff0:	52                   	push   edx
c0014ff1:	52                   	push   edx
c0014ff2:	50                   	push   eax
c0014ff3:	68 40 63 03 c0       	push   0xc0036340
c0014ff8:	e8 4f 43 01 00       	call   c002934c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0014ffd:	eb b9                	jmp    c0014fb8 <SysKill(regs*)+0x64>
c0014fff:	90                   	nop
c0015000:	83 c8 ff             	or     eax,0xffffffff
c0015003:	89 c2                	mov    edx,eax
c0015005:	8d 76 00             	lea    esi,[esi+0x0]
c0015008:	83 c4 08             	add    esp,0x8
c001500b:	5b                   	pop    ebx
c001500c:	c3                   	ret    

c001500d <SysLoadDLL(regs*)>:
c001500d:	56                   	push   esi
c001500e:	31 d2                	xor    edx,edx
c0015010:	53                   	push   ebx
c0015011:	b8 01 00 00 00       	mov    eax,0x1
c0015016:	53                   	push   ebx
c0015017:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001501b:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001501f:	0f 84 82 00 00 00    	je     c00150a7 <SysLoadDLL(regs*)+0x9a>
c0015025:	83 ec 0c             	sub    esp,0xc
c0015028:	68 14 01 00 00       	push   0x114
c001502d:	e8 da b0 ff ff       	call   c001010c <malloc>
c0015032:	83 c4 0c             	add    esp,0xc
c0015035:	89 c3                	mov    ebx,eax
c0015037:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001503c:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001503f:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0015042:	53                   	push   ebx
c0015043:	e8 6a 3b ff ff       	call   c0008bb2 <File::File(char const*, Process*)>
c0015048:	83 c4 10             	add    esp,0x10
c001504b:	31 d2                	xor    edx,edx
c001504d:	85 db                	test   ebx,ebx
c001504f:	b8 02 00 00 00       	mov    eax,0x2
c0015054:	74 51                	je     c00150a7 <SysLoadDLL(regs*)+0x9a>
c0015056:	83 ec 0c             	sub    esp,0xc
c0015059:	53                   	push   ebx
c001505a:	e8 35 3e ff ff       	call   c0008e94 <File::exists()>
c001505f:	83 c4 10             	add    esp,0x10
c0015062:	84 c0                	test   al,al
c0015064:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015066:	75 11                	jne    c0015079 <SysLoadDLL(regs*)+0x6c>
c0015068:	83 ec 0c             	sub    esp,0xc
c001506b:	53                   	push   ebx
c001506c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001506f:	83 c4 10             	add    esp,0x10
c0015072:	b8 03 00 00 00       	mov    eax,0x3
c0015077:	eb 2c                	jmp    c00150a5 <SysLoadDLL(regs*)+0x98>
c0015079:	83 ec 0c             	sub    esp,0xc
c001507c:	53                   	push   ebx
c001507d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015080:	83 c4 0c             	add    esp,0xc
c0015083:	6a 00                	push   0x0
c0015085:	ff 35 08 61 03 c0    	push   DWORD PTR ds:0xc0036108
c001508b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001508e:	e8 d3 16 00 00       	call   c0016766 <KeLoadAndExecuteDriver(char const*, void*, bool)>
c0015093:	83 c4 10             	add    esp,0x10
c0015096:	31 d2                	xor    edx,edx
c0015098:	88 c1                	mov    cl,al
c001509a:	31 c0                	xor    eax,eax
c001509c:	84 c9                	test   cl,cl
c001509e:	75 07                	jne    c00150a7 <SysLoadDLL(regs*)+0x9a>
c00150a0:	b8 04 00 00 00       	mov    eax,0x4
c00150a5:	31 d2                	xor    edx,edx
c00150a7:	59                   	pop    ecx
c00150a8:	5b                   	pop    ebx
c00150a9:	5e                   	pop    esi
c00150aa:	c3                   	ret    

c00150ab <SysPause(regs*)>:
c00150ab:	83 ec 18             	sub    esp,0x18
c00150ae:	6a 08                	push   0x8
c00150b0:	e8 f3 20 00 00       	call   c00171a8 <blockTask(TaskState)>
c00150b5:	31 c0                	xor    eax,eax
c00150b7:	31 d2                	xor    edx,edx
c00150b9:	83 c4 1c             	add    esp,0x1c
c00150bc:	c3                   	ret    

c00150bd <SysPthreadCreate(regs*)>:
c00150bd:	83 ec 18             	sub    esp,0x18
c00150c0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00150c5:	ff 70 40             	push   DWORD PTR [eax+0x40]
c00150c8:	e8 b3 1e 00 00       	call   c0016f80 <Process::createUserThread()>
c00150cd:	31 c0                	xor    eax,eax
c00150cf:	31 d2                	xor    edx,edx
c00150d1:	83 c4 1c             	add    esp,0x1c
c00150d4:	c3                   	ret    

c00150d5 <SysPthreadGetTID(regs*)>:
c00150d5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00150da:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00150dd:	99                   	cdq    
c00150de:	c3                   	ret    

c00150df <SysInternalPthreadGetContext(regs*)>:
c00150df:	31 c0                	xor    eax,eax
c00150e1:	31 d2                	xor    edx,edx
c00150e3:	c3                   	ret    

c00150e4 <SysInternalPthreadGetStartLocation(regs*)>:
c00150e4:	31 c0                	xor    eax,eax
c00150e6:	31 d2                	xor    edx,edx
c00150e8:	c3                   	ret    

c00150e9 <SysPthreadJoin(regs*)>:
c00150e9:	31 c0                	xor    eax,eax
c00150eb:	31 d2                	xor    edx,edx
c00150ed:	c3                   	ret    

c00150ee <SysPthreadExit(regs*)>:
c00150ee:	83 ec 18             	sub    esp,0x18
c00150f1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00150f5:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00150f8:	e8 df 27 00 00       	call   c00178dc <KeTerminateCurrentThread(int)>
c00150fd:	83 c8 ff             	or     eax,0xffffffff
c0015100:	83 c4 1c             	add    esp,0x1c
c0015103:	89 c2                	mov    edx,eax
c0015105:	c3                   	ret    

c0015106 <SysRead(regs*)>:
c0015106:	57                   	push   edi
c0015107:	56                   	push   esi
c0015108:	53                   	push   ebx
c0015109:	83 ec 10             	sub    esp,0x10
c001510c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0015110:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0015113:	83 f8 02             	cmp    eax,0x2
c0015116:	77 10                	ja     c0015128 <SysRead(regs*)+0x22>
c0015118:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001511d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015120:	8b 88 a6 05 00 00    	mov    ecx,DWORD PTR [eax+0x5a6]
c0015126:	eb 0e                	jmp    c0015136 <SysRead(regs*)+0x30>
c0015128:	83 ec 0c             	sub    esp,0xc
c001512b:	50                   	push   eax
c001512c:	e8 18 e8 ff ff       	call   c0013949 <KeGetFileFromDescriptor(int)>
c0015131:	83 c4 10             	add    esp,0x10
c0015134:	89 c1                	mov    ecx,eax
c0015136:	83 c8 ff             	or     eax,0xffffffff
c0015139:	85 c9                	test   ecx,ecx
c001513b:	89 c2                	mov    edx,eax
c001513d:	74 28                	je     c0015167 <SysRead(regs*)+0x61>
c001513f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0015147:	83 ec 0c             	sub    esp,0xc
c001514a:	31 ff                	xor    edi,edi
c001514c:	8d 54 24 18          	lea    edx,[esp+0x18]
c0015150:	8b 01                	mov    eax,DWORD PTR [ecx]
c0015152:	52                   	push   edx
c0015153:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015156:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0015159:	57                   	push   edi
c001515a:	56                   	push   esi
c001515b:	51                   	push   ecx
c001515c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001515f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015163:	83 c4 20             	add    esp,0x20
c0015166:	99                   	cdq    
c0015167:	83 c4 10             	add    esp,0x10
c001516a:	5b                   	pop    ebx
c001516b:	5e                   	pop    esi
c001516c:	5f                   	pop    edi
c001516d:	c3                   	ret    

c001516e <SysRegisterSignal(regs*)>:
c001516e:	83 ec 18             	sub    esp,0x18
c0015171:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015175:	6a 00                	push   0x0
c0015177:	6a 00                	push   0x0
c0015179:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001517c:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001517f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015184:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015187:	ff b0 c0 07 00 00    	push   DWORD PTR [eax+0x7c0]
c001518d:	e8 a7 c5 ff ff       	call   c0011739 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c0015192:	83 c4 2c             	add    esp,0x2c
c0015195:	99                   	cdq    
c0015196:	c3                   	ret    

c0015197 <SysRegistryGetTypeFromPath(regs*)>:
c0015197:	53                   	push   ebx
c0015198:	81 ec 40 01 00 00    	sub    esp,0x140
c001519e:	8b 9c 24 48 01 00 00 	mov    ebx,DWORD PTR [esp+0x148]
c00151a5:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00151a8:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00151ab:	e8 ab 97 ff ff       	call   c000e95b <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c00151b0:	83 c4 10             	add    esp,0x10
c00151b3:	85 c0                	test   eax,eax
c00151b5:	89 c1                	mov    ecx,eax
c00151b7:	74 15                	je     c00151ce <SysRegistryGetTypeFromPath(regs*)+0x37>
c00151b9:	50                   	push   eax
c00151ba:	8d 44 24 08          	lea    eax,[esp+0x8]
c00151be:	50                   	push   eax
c00151bf:	51                   	push   ecx
c00151c0:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00151c3:	e8 78 93 ff ff       	call   c000e540 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c00151c8:	83 c4 10             	add    esp,0x10
c00151cb:	99                   	cdq    
c00151cc:	eb 05                	jmp    c00151d3 <SysRegistryGetTypeFromPath(regs*)+0x3c>
c00151ce:	83 c8 ff             	or     eax,0xffffffff
c00151d1:	89 c2                	mov    edx,eax
c00151d3:	81 c4 38 01 00 00    	add    esp,0x138
c00151d9:	5b                   	pop    ebx
c00151da:	c3                   	ret    

c00151db <SysRegistryReadExtent(regs*)>:
c00151db:	83 ec 1c             	sub    esp,0x1c
c00151de:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00151e2:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c00151e5:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c00151e8:	85 c0                	test   eax,eax
c00151ea:	79 1f                	jns    c001520b <SysRegistryReadExtent(regs*)+0x30>
c00151ec:	52                   	push   edx
c00151ed:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00151f2:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00151f6:	52                   	push   edx
c00151f7:	50                   	push   eax
c00151f8:	51                   	push   ecx
c00151f9:	e8 34 92 ff ff       	call   c000e432 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c00151fe:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015202:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0015206:	83 c4 10             	add    esp,0x10
c0015209:	eb 14                	jmp    c001521f <SysRegistryReadExtent(regs*)+0x44>
c001520b:	83 ec 04             	sub    esp,0x4
c001520e:	ff 72 24             	push   DWORD PTR [edx+0x24]
c0015211:	50                   	push   eax
c0015212:	51                   	push   ecx
c0015213:	e8 b8 8c ff ff       	call   c000ded0 <CmGetString(Reghive_Tag*, int, char*)>
c0015218:	83 c4 10             	add    esp,0x10
c001521b:	31 c0                	xor    eax,eax
c001521d:	31 d2                	xor    edx,edx
c001521f:	83 c4 1c             	add    esp,0x1c
c0015222:	c3                   	ret    

c0015223 <SysRegistryPathToExtentLookup(regs*)>:
c0015223:	83 ec 14             	sub    esp,0x14
c0015226:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001522a:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001522d:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0015230:	e8 26 97 ff ff       	call   c000e95b <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0015235:	83 c4 1c             	add    esp,0x1c
c0015238:	99                   	cdq    
c0015239:	c3                   	ret    

c001523a <SysRegistryEnterDirectory(regs*)>:
c001523a:	83 ec 14             	sub    esp,0x14
c001523d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015241:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0015244:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0015247:	e8 fb 8c ff ff       	call   c000df47 <CmEnterDirectory(Reghive_Tag*, int)>
c001524c:	83 c4 1c             	add    esp,0x1c
c001524f:	99                   	cdq    
c0015250:	c3                   	ret    

c0015251 <SysRegistryGetNext(regs*)>:
c0015251:	83 ec 14             	sub    esp,0x14
c0015254:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015258:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001525b:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001525e:	e8 23 8d ff ff       	call   c000df86 <CmGetNext(Reghive_Tag*, int)>
c0015263:	83 c4 1c             	add    esp,0x1c
c0015266:	99                   	cdq    
c0015267:	c3                   	ret    

c0015268 <SysRegistryGetNameAndTypeFromExtent(regs*)>:
c0015268:	57                   	push   edi
c0015269:	56                   	push   esi
c001526a:	53                   	push   ebx
c001526b:	81 ec 34 01 00 00    	sub    esp,0x134
c0015271:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0015278:	8d 7c 24 08          	lea    edi,[esp+0x8]
c001527c:	57                   	push   edi
c001527d:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0015280:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0015283:	e8 b8 92 ff ff       	call   c000e540 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0015288:	89 c3                	mov    ebx,eax
c001528a:	58                   	pop    eax
c001528b:	5a                   	pop    edx
c001528c:	57                   	push   edi
c001528d:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0015290:	e8 bb b3 fe ff       	call   c0000650 <strcpy>
c0015295:	81 c4 40 01 00 00    	add    esp,0x140
c001529b:	89 d8                	mov    eax,ebx
c001529d:	5b                   	pop    ebx
c001529e:	99                   	cdq    
c001529f:	5e                   	pop    esi
c00152a0:	5f                   	pop    edi
c00152a1:	c3                   	ret    

c00152a2 <SysRegistryOpen(regs*)>:
c00152a2:	83 ec 18             	sub    esp,0x18
c00152a5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00152a9:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00152ac:	e8 af 8a ff ff       	call   c000dd60 <CmOpen(char const*)>
c00152b1:	83 c4 1c             	add    esp,0x1c
c00152b4:	99                   	cdq    
c00152b5:	c3                   	ret    

c00152b6 <SysRegistryClose(regs*)>:
c00152b6:	83 ec 18             	sub    esp,0x18
c00152b9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00152bd:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00152c0:	e8 b9 8b ff ff       	call   c000de7e <CmClose(Reghive_Tag*)>
c00152c5:	31 c0                	xor    eax,eax
c00152c7:	31 d2                	xor    edx,edx
c00152c9:	83 c4 1c             	add    esp,0x1c
c00152cc:	c3                   	ret    

c00152cd <SysRegistryEasyReadString(regs*)>:
c00152cd:	57                   	push   edi
c00152ce:	56                   	push   esi
c00152cf:	53                   	push   ebx
c00152d0:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00152d4:	83 ec 0c             	sub    esp,0xc
c00152d7:	ff 76 24             	push   DWORD PTR [esi+0x24]
c00152da:	e8 81 8a ff ff       	call   c000dd60 <CmOpen(char const*)>
c00152df:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c00152e2:	5a                   	pop    edx
c00152e3:	59                   	pop    ecx
c00152e4:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00152e7:	89 c3                	mov    ebx,eax
c00152e9:	50                   	push   eax
c00152ea:	e8 6c 96 ff ff       	call   c000e95b <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c00152ef:	83 c4 10             	add    esp,0x10
c00152f2:	89 c1                	mov    ecx,eax
c00152f4:	b8 01 00 00 00       	mov    eax,0x1
c00152f9:	85 c9                	test   ecx,ecx
c00152fb:	7e 16                	jle    c0015313 <SysRegistryEasyReadString(regs*)+0x46>
c00152fd:	50                   	push   eax
c00152fe:	57                   	push   edi
c00152ff:	51                   	push   ecx
c0015300:	53                   	push   ebx
c0015301:	e8 ca 8b ff ff       	call   c000ded0 <CmGetString(Reghive_Tag*, int, char*)>
c0015306:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015309:	e8 70 8b ff ff       	call   c000de7e <CmClose(Reghive_Tag*)>
c001530e:	83 c4 10             	add    esp,0x10
c0015311:	31 c0                	xor    eax,eax
c0015313:	5b                   	pop    ebx
c0015314:	31 d2                	xor    edx,edx
c0015316:	5e                   	pop    esi
c0015317:	5f                   	pop    edi
c0015318:	c3                   	ret    

c0015319 <SysRegistryEasyReadInteger(regs*)>:
c0015319:	56                   	push   esi
c001531a:	53                   	push   ebx
c001531b:	83 ec 10             	sub    esp,0x10
c001531e:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0015322:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0015325:	e8 36 8a ff ff       	call   c000dd60 <CmOpen(char const*)>
c001532a:	5a                   	pop    edx
c001532b:	59                   	pop    ecx
c001532c:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001532f:	89 c3                	mov    ebx,eax
c0015331:	50                   	push   eax
c0015332:	e8 24 96 ff ff       	call   c000e95b <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0015337:	83 c4 10             	add    esp,0x10
c001533a:	89 c1                	mov    ecx,eax
c001533c:	b8 01 00 00 00       	mov    eax,0x1
c0015341:	85 c9                	test   ecx,ecx
c0015343:	7e 18                	jle    c001535d <SysRegistryEasyReadInteger(regs*)+0x44>
c0015345:	50                   	push   eax
c0015346:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0015349:	51                   	push   ecx
c001534a:	53                   	push   ebx
c001534b:	e8 e2 90 ff ff       	call   c000e432 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c0015350:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015353:	e8 26 8b ff ff       	call   c000de7e <CmClose(Reghive_Tag*)>
c0015358:	83 c4 10             	add    esp,0x10
c001535b:	31 c0                	xor    eax,eax
c001535d:	59                   	pop    ecx
c001535e:	31 d2                	xor    edx,edx
c0015360:	5b                   	pop    ebx
c0015361:	5e                   	pop    esi
c0015362:	c3                   	ret    

c0015363 <SysSbrk(regs*)>:
c0015363:	56                   	push   esi
c0015364:	53                   	push   ebx
c0015365:	50                   	push   eax
c0015366:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001536b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001536f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015372:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c0015375:	8b 88 b2 05 00 00    	mov    ecx,DWORD PTR [eax+0x5b2]
c001537b:	85 db                	test   ebx,ebx
c001537d:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c0015380:	74 02                	je     c0015384 <SysSbrk(regs*)+0x21>
c0015382:	79 06                	jns    c001538a <SysSbrk(regs*)+0x27>
c0015384:	89 f0                	mov    eax,esi
c0015386:	31 d2                	xor    edx,edx
c0015388:	eb 2a                	jmp    c00153b4 <SysSbrk(regs*)+0x51>
c001538a:	83 c8 ff             	or     eax,0xffffffff
c001538d:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0015393:	89 c2                	mov    edx,eax
c0015395:	77 1d                	ja     c00153b4 <SysSbrk(regs*)+0x51>
c0015397:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001539d:	50                   	push   eax
c001539e:	68 07 0c 00 00       	push   0xc07
c00153a3:	c1 ea 0c             	shr    edx,0xc
c00153a6:	52                   	push   edx
c00153a7:	51                   	push   ecx
c00153a8:	e8 db ee ff ff       	call   c0014288 <VAS::allocatePages(int, int)>
c00153ad:	89 f0                	mov    eax,esi
c00153af:	31 d2                	xor    edx,edx
c00153b1:	83 c4 10             	add    esp,0x10
c00153b4:	59                   	pop    ecx
c00153b5:	5b                   	pop    ebx
c00153b6:	5e                   	pop    esi
c00153b7:	c3                   	ret    

c00153b8 <SysSetCwd(regs*)>:
c00153b8:	83 ec 14             	sub    esp,0x14
c00153bb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00153bf:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00153c2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00153c7:	ff 70 40             	push   DWORD PTR [eax+0x40]
c00153ca:	e8 64 3b ff ff       	call   c0008f33 <Fs::setcwd(Process*, char*)>
c00153cf:	83 c4 1c             	add    esp,0x1c
c00153d2:	99                   	cdq    
c00153d3:	c3                   	ret    

c00153d4 <SysSetTime(regs*)>:
c00153d4:	55                   	push   ebp
c00153d5:	31 d2                	xor    edx,edx
c00153d7:	57                   	push   edi
c00153d8:	56                   	push   esi
c00153d9:	53                   	push   ebx
c00153da:	bb 3c 00 00 00       	mov    ebx,0x3c
c00153df:	83 ec 30             	sub    esp,0x30
c00153e2:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c00153e6:	8b 71 20             	mov    esi,DWORD PTR [ecx+0x20]
c00153e9:	89 f0                	mov    eax,esi
c00153eb:	f7 f3                	div    ebx
c00153ed:	89 d7                	mov    edi,edx
c00153ef:	31 d2                	xor    edx,edx
c00153f1:	f7 f3                	div    ebx
c00153f3:	bb 10 0e 00 00       	mov    ebx,0xe10
c00153f8:	89 f0                	mov    eax,esi
c00153fa:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00153fe:	31 d2                	xor    edx,edx
c0015400:	f7 f3                	div    ebx
c0015402:	bb 18 00 00 00       	mov    ebx,0x18
c0015407:	31 d2                	xor    edx,edx
c0015409:	f7 f3                	div    ebx
c001540b:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001540e:	bb 0c 00 00 00       	mov    ebx,0xc
c0015413:	89 c6                	mov    esi,eax
c0015415:	c1 e8 05             	shr    eax,0x5
c0015418:	83 e6 1f             	and    esi,0x1f
c001541b:	46                   	inc    esi
c001541c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0015420:	31 d2                	xor    edx,edx
c0015422:	f7 f3                	div    ebx
c0015424:	31 db                	xor    ebx,ebx
c0015426:	57                   	push   edi
c0015427:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001542b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001542f:	0f b7 69 24          	movzx  ebp,WORD PTR [ecx+0x24]
c0015433:	55                   	push   ebp
c0015434:	52                   	push   edx
c0015435:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0015439:	56                   	push   esi
c001543a:	68 95 bf 02 c0       	push   0xc002bf95
c001543f:	e8 22 1b ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0015444:	83 c4 1c             	add    esp,0x1c
c0015447:	57                   	push   edi
c0015448:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001544c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015450:	55                   	push   ebp
c0015451:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015455:	52                   	push   edx
c0015456:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001545a:	56                   	push   esi
c001545b:	68 b7 bf 02 c0       	push   0xc002bfb7
c0015460:	e8 01 1b ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0015465:	a1 08 61 03 c0       	mov    eax,ds:0xc0036108
c001546a:	31 c9                	xor    ecx,ecx
c001546c:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0015470:	8a 5c 24 30          	mov    bl,BYTE PTR [esp+0x30]
c0015474:	8a 7c 24 2c          	mov    bh,BYTE PTR [esp+0x2c]
c0015478:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001547e:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0015482:	89 f0                	mov    eax,esi
c0015484:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c0015488:	88 c1                	mov    cl,al
c001548a:	89 e8                	mov    eax,ebp
c001548c:	88 d5                	mov    ch,dl
c001548e:	83 c4 1c             	add    esp,0x1c
c0015491:	c1 e0 10             	shl    eax,0x10
c0015494:	0f b7 d1             	movzx  edx,cx
c0015497:	09 c2                	or     edx,eax
c0015499:	89 f8                	mov    eax,edi
c001549b:	c1 e0 10             	shl    eax,0x10
c001549e:	89 d1                	mov    ecx,edx
c00154a0:	89 da                	mov    edx,ebx
c00154a2:	81 e2 ff ff 00 ff    	and    edx,0xff00ffff
c00154a8:	09 c2                	or     edx,eax
c00154aa:	52                   	push   edx
c00154ab:	51                   	push   ecx
c00154ac:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00154b0:	e8 c5 4a ff ff       	call   c0009f7a <Clock::setTimeInDatetimeLocal(datetime_t)>
c00154b5:	83 c4 3c             	add    esp,0x3c
c00154b8:	31 d2                	xor    edx,edx
c00154ba:	5b                   	pop    ebx
c00154bb:	5e                   	pop    esi
c00154bc:	83 f0 01             	xor    eax,0x1
c00154bf:	5f                   	pop    edi
c00154c0:	0f b6 c0             	movzx  eax,al
c00154c3:	5d                   	pop    ebp
c00154c4:	c3                   	ret    

c00154c5 <SysSymlink(regs*)>:
c00154c5:	56                   	push   esi
c00154c6:	83 c8 ff             	or     eax,0xffffffff
c00154c9:	53                   	push   ebx
c00154ca:	89 c2                	mov    edx,eax
c00154cc:	81 ec 34 02 00 00    	sub    esp,0x234
c00154d2:	8b 9c 24 40 02 00 00 	mov    ebx,DWORD PTR [esp+0x240]
c00154d9:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c00154dd:	74 50                	je     c001552f <SysSymlink(regs*)+0x6a>
c00154df:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c00154e2:	85 c9                	test   ecx,ecx
c00154e4:	74 49                	je     c001552f <SysSymlink(regs*)+0x6a>
c00154e6:	6a 01                	push   0x1
c00154e8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00154ed:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00154f0:	05 0c 01 00 00       	add    eax,0x10c
c00154f5:	50                   	push   eax
c00154f6:	51                   	push   ecx
c00154f7:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00154fb:	56                   	push   esi
c00154fc:	e8 85 33 ff ff       	call   c0008886 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0015501:	6a 01                	push   0x1
c0015503:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015508:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001550b:	05 0c 01 00 00       	add    eax,0x10c
c0015510:	50                   	push   eax
c0015511:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0015514:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c001551b:	53                   	push   ebx
c001551c:	e8 65 33 ff ff       	call   c0008886 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0015521:	83 c4 18             	add    esp,0x18
c0015524:	56                   	push   esi
c0015525:	53                   	push   ebx
c0015526:	e8 88 2f ff ff       	call   c00084b3 <KeCreateSymlink(char const*, char const*)>
c001552b:	83 c4 10             	add    esp,0x10
c001552e:	99                   	cdq    
c001552f:	81 c4 34 02 00 00    	add    esp,0x234
c0015535:	5b                   	pop    ebx
c0015536:	5e                   	pop    esi
c0015537:	c3                   	ret    

c0015538 <SysTimezone(regs*)>:
c0015538:	83 ec 0c             	sub    esp,0xc
c001553b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001553f:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c0015543:	75 17                	jne    c001555c <SysTimezone(regs*)+0x24>
c0015545:	83 ec 0c             	sub    esp,0xc
c0015548:	68 d9 bf 02 c0       	push   0xc002bfd9
c001554d:	e8 14 1a ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0015552:	83 c8 ff             	or     eax,0xffffffff
c0015555:	83 c4 10             	add    esp,0x10
c0015558:	89 c2                	mov    edx,eax
c001555a:	eb 16                	jmp    c0015572 <SysTimezone(regs*)+0x3a>
c001555c:	83 ec 0c             	sub    esp,0xc
c001555f:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0015562:	e8 ca 44 ff ff       	call   c0009a31 <KeSetTimezone(int)>
c0015567:	31 d2                	xor    edx,edx
c0015569:	83 c4 10             	add    esp,0x10
c001556c:	83 f0 01             	xor    eax,0x1
c001556f:	0f b6 c0             	movzx  eax,al
c0015572:	83 c4 0c             	add    esp,0xc
c0015575:	c3                   	ret    

c0015576 <SysTruncate(regs*)>:
c0015576:	55                   	push   ebp
c0015577:	57                   	push   edi
c0015578:	31 ff                	xor    edi,edi
c001557a:	56                   	push   esi
c001557b:	53                   	push   ebx
c001557c:	83 ec 0c             	sub    esp,0xc
c001557f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015583:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0015586:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c001558a:	8b 68 24             	mov    ebp,DWORD PTR [eax+0x24]
c001558d:	89 ce                	mov    esi,ecx
c001558f:	0f 84 9a 00 00 00    	je     c001562f <SysTruncate(regs*)+0xb9>
c0015595:	83 ec 0c             	sub    esp,0xc
c0015598:	68 14 01 00 00       	push   0x114
c001559d:	e8 6a ab ff ff       	call   c001010c <malloc>
c00155a2:	83 c4 0c             	add    esp,0xc
c00155a5:	89 c3                	mov    ebx,eax
c00155a7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00155ac:	ff 70 40             	push   DWORD PTR [eax+0x40]
c00155af:	55                   	push   ebp
c00155b0:	53                   	push   ebx
c00155b1:	e8 fc 35 ff ff       	call   c0008bb2 <File::File(char const*, Process*)>
c00155b6:	83 c4 10             	add    esp,0x10
c00155b9:	31 d2                	xor    edx,edx
c00155bb:	85 db                	test   ebx,ebx
c00155bd:	b8 03 00 00 00       	mov    eax,0x3
c00155c2:	0f 84 a2 00 00 00    	je     c001566a <SysTruncate(regs*)+0xf4>
c00155c8:	51                   	push   ecx
c00155c9:	51                   	push   ecx
c00155ca:	6a 02                	push   0x2
c00155cc:	53                   	push   ebx
c00155cd:	e8 fe 35 ff ff       	call   c0008bd0 <File::open(FileOpenMode)>
c00155d2:	83 c4 10             	add    esp,0x10
c00155d5:	85 c0                	test   eax,eax
c00155d7:	74 13                	je     c00155ec <SysTruncate(regs*)+0x76>
c00155d9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00155db:	83 ec 0c             	sub    esp,0xc
c00155de:	53                   	push   ebx
c00155df:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00155e2:	83 c4 10             	add    esp,0x10
c00155e5:	b8 04 00 00 00       	mov    eax,0x4
c00155ea:	eb 7c                	jmp    c0015668 <SysTruncate(regs*)+0xf2>
c00155ec:	52                   	push   edx
c00155ed:	57                   	push   edi
c00155ee:	56                   	push   esi
c00155ef:	53                   	push   ebx
c00155f0:	e8 ef 36 ff ff       	call   c0008ce4 <File::truncate(unsigned long long)>
c00155f5:	83 c4 10             	add    esp,0x10
c00155f8:	85 c0                	test   eax,eax
c00155fa:	74 1b                	je     c0015617 <SysTruncate(regs*)+0xa1>
c00155fc:	83 ec 0c             	sub    esp,0xc
c00155ff:	53                   	push   ebx
c0015600:	e8 29 36 ff ff       	call   c0008c2e <File::close()>
c0015605:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015607:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001560a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001560d:	83 c4 10             	add    esp,0x10
c0015610:	b8 05 00 00 00       	mov    eax,0x5
c0015615:	eb 51                	jmp    c0015668 <SysTruncate(regs*)+0xf2>
c0015617:	83 ec 0c             	sub    esp,0xc
c001561a:	53                   	push   ebx
c001561b:	e8 0e 36 ff ff       	call   c0008c2e <File::close()>
c0015620:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015622:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015625:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015628:	83 c4 10             	add    esp,0x10
c001562b:	31 c0                	xor    eax,eax
c001562d:	eb 39                	jmp    c0015668 <SysTruncate(regs*)+0xf2>
c001562f:	31 d2                	xor    edx,edx
c0015631:	83 fd 02             	cmp    ebp,0x2
c0015634:	b8 01 00 00 00       	mov    eax,0x1
c0015639:	7e 2f                	jle    c001566a <SysTruncate(regs*)+0xf4>
c001563b:	83 ec 0c             	sub    esp,0xc
c001563e:	51                   	push   ecx
c001563f:	e8 05 e3 ff ff       	call   c0013949 <KeGetFileFromDescriptor(int)>
c0015644:	83 c4 10             	add    esp,0x10
c0015647:	31 d2                	xor    edx,edx
c0015649:	89 c1                	mov    ecx,eax
c001564b:	b8 02 00 00 00       	mov    eax,0x2
c0015650:	85 c9                	test   ecx,ecx
c0015652:	74 16                	je     c001566a <SysTruncate(regs*)+0xf4>
c0015654:	50                   	push   eax
c0015655:	57                   	push   edi
c0015656:	56                   	push   esi
c0015657:	51                   	push   ecx
c0015658:	e8 87 36 ff ff       	call   c0008ce4 <File::truncate(unsigned long long)>
c001565d:	83 c4 10             	add    esp,0x10
c0015660:	85 c0                	test   eax,eax
c0015662:	0f 95 c0             	setne  al
c0015665:	0f b6 c0             	movzx  eax,al
c0015668:	31 d2                	xor    edx,edx
c001566a:	83 c4 0c             	add    esp,0xc
c001566d:	5b                   	pop    ebx
c001566e:	5e                   	pop    esi
c001566f:	5f                   	pop    edi
c0015670:	5d                   	pop    ebp
c0015671:	c3                   	ret    

c0015672 <SysWrite(regs*)>:
c0015672:	57                   	push   edi
c0015673:	56                   	push   esi
c0015674:	53                   	push   ebx
c0015675:	83 ec 10             	sub    esp,0x10
c0015678:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001567c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001567f:	83 f8 02             	cmp    eax,0x2
c0015682:	77 10                	ja     c0015694 <SysWrite(regs*)+0x22>
c0015684:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015689:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001568c:	8b 88 a6 05 00 00    	mov    ecx,DWORD PTR [eax+0x5a6]
c0015692:	eb 0e                	jmp    c00156a2 <SysWrite(regs*)+0x30>
c0015694:	83 ec 0c             	sub    esp,0xc
c0015697:	50                   	push   eax
c0015698:	e8 ac e2 ff ff       	call   c0013949 <KeGetFileFromDescriptor(int)>
c001569d:	83 c4 10             	add    esp,0x10
c00156a0:	89 c1                	mov    ecx,eax
c00156a2:	83 c8 ff             	or     eax,0xffffffff
c00156a5:	85 c9                	test   ecx,ecx
c00156a7:	89 c2                	mov    edx,eax
c00156a9:	74 28                	je     c00156d3 <SysWrite(regs*)+0x61>
c00156ab:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00156b3:	83 ec 0c             	sub    esp,0xc
c00156b6:	31 ff                	xor    edi,edi
c00156b8:	8d 54 24 18          	lea    edx,[esp+0x18]
c00156bc:	8b 01                	mov    eax,DWORD PTR [ecx]
c00156be:	52                   	push   edx
c00156bf:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00156c2:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c00156c5:	57                   	push   edi
c00156c6:	56                   	push   esi
c00156c7:	51                   	push   ecx
c00156c8:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00156cb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00156cf:	83 c4 20             	add    esp,0x20
c00156d2:	99                   	cdq    
c00156d3:	83 c4 10             	add    esp,0x10
c00156d6:	5b                   	pop    ebx
c00156d7:	5e                   	pop    esi
c00156d8:	5f                   	pop    edi
c00156d9:	c3                   	ret    

c00156da <SysWsbe(regs*)>:
c00156da:	55                   	push   ebp
c00156db:	57                   	push   edi
c00156dc:	56                   	push   esi
c00156dd:	53                   	push   ebx
c00156de:	83 ec 3c             	sub    esp,0x3c
c00156e1:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c00156e5:	81 7b 20 96 78 34 a5 	cmp    DWORD PTR [ebx+0x20],0xa5347896
c00156ec:	75 2d                	jne    c001571b <SysWsbe(regs*)+0x41>
c00156ee:	81 7b 28 f7 7f 77 4f 	cmp    DWORD PTR [ebx+0x28],0x4f777ff7
c00156f5:	75 24                	jne    c001571b <SysWsbe(regs*)+0x41>
c00156f7:	81 7b 24 55 55 23 11 	cmp    DWORD PTR [ebx+0x24],0x11235555
c00156fe:	75 1b                	jne    c001571b <SysWsbe(regs*)+0x41>
c0015700:	6a 01                	push   0x1
c0015702:	6a 00                	push   0x0
c0015704:	68 2a a9 00 c0       	push   0xc000a92a
c0015709:	ff 35 58 63 03 c0    	push   DWORD PTR ds:0xc0036358
c001570f:	e8 20 17 00 00       	call   c0016e34 <Process::createThread(void (*)(void*), void*, int)>
c0015714:	83 c4 10             	add    esp,0x10
c0015717:	31 c0                	xor    eax,eax
c0015719:	eb 52                	jmp    c001576d <SysWsbe(regs*)+0x93>
c001571b:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001571f:	be ee bf 02 c0       	mov    esi,0xc002bfee
c0015724:	b9 0b 00 00 00       	mov    ecx,0xb
c0015729:	fc                   	cld    
c001572a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001572c:	83 ec 0c             	sub    esp,0xc
c001572f:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0015733:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015738:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001573b:	8b b0 a6 05 00 00    	mov    esi,DWORD PTR [eax+0x5a6]
c0015741:	8b 06                	mov    eax,DWORD PTR [esi]
c0015743:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0015746:	57                   	push   edi
c0015747:	e8 34 ae fe ff       	call   c0000580 <strlen>
c001574c:	5a                   	pop    edx
c001574d:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0015751:	52                   	push   edx
c0015752:	31 d2                	xor    edx,edx
c0015754:	57                   	push   edi
c0015755:	52                   	push   edx
c0015756:	50                   	push   eax
c0015757:	56                   	push   esi
c0015758:	ff d5                	call   ebp
c001575a:	83 c4 14             	add    esp,0x14
c001575d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015760:	e8 77 21 00 00       	call   c00178dc <KeTerminateCurrentThread(int)>
c0015765:	83 c4 10             	add    esp,0x10
c0015768:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001576d:	83 c4 3c             	add    esp,0x3c
c0015770:	31 d2                	xor    edx,edx
c0015772:	5b                   	pop    ebx
c0015773:	5e                   	pop    esi
c0015774:	5f                   	pop    edi
c0015775:	5d                   	pop    ebp
c0015776:	c3                   	ret    

c0015777 <SysYield(regs*)>:
c0015777:	83 ec 0c             	sub    esp,0xc
c001577a:	fa                   	cli    
c001577b:	ff 05 30 63 03 c0    	inc    DWORD PTR ds:0xc0036330
c0015781:	e8 62 19 00 00       	call   c00170e8 <schedule()>
c0015786:	f0 ff 0d 30 63 03 c0 	lock dec DWORD PTR ds:0xc0036330
c001578d:	83 3d 30 63 03 c0 00 	cmp    DWORD PTR ds:0xc0036330,0x0
c0015794:	75 01                	jne    c0015797 <SysYield(regs*)+0x20>
c0015796:	fb                   	sti    
c0015797:	31 c0                	xor    eax,eax
c0015799:	31 d2                	xor    edx,edx
c001579b:	83 c4 0c             	add    esp,0xc
c001579e:	c3                   	ret    
c001579f:	90                   	nop

c00157a0 <KeAlarm(ThreadControlBlock*, unsigned long long)>:
c00157a0:	55                   	push   ebp
c00157a1:	57                   	push   edi
c00157a2:	56                   	push   esi
c00157a3:	53                   	push   ebx
c00157a4:	83 ec 2c             	sub    esp,0x2c
c00157a7:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00157ab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00157af:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00157b3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00157b7:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00157bb:	8b 7a 63             	mov    edi,DWORD PTR [edx+0x63]
c00157be:	0f b6 72 67          	movzx  esi,BYTE PTR [edx+0x67]
c00157c2:	0f b6 42 68          	movzx  eax,BYTE PTR [edx+0x68]
c00157c6:	c1 e0 08             	shl    eax,0x8
c00157c9:	09 c6                	or     esi,eax
c00157cb:	0f b6 42 69          	movzx  eax,BYTE PTR [edx+0x69]
c00157cf:	c1 e0 10             	shl    eax,0x10
c00157d2:	09 c6                	or     esi,eax
c00157d4:	0f b6 42 6a          	movzx  eax,BYTE PTR [edx+0x6a]
c00157d8:	83 e0 7f             	and    eax,0x7f
c00157db:	c1 e0 18             	shl    eax,0x18
c00157de:	09 f0                	or     eax,esi
c00157e0:	89 c5                	mov    ebp,eax
c00157e2:	89 f8                	mov    eax,edi
c00157e4:	80 f4 00             	xor    ah,0x0
c00157e7:	89 c1                	mov    ecx,eax
c00157e9:	89 e8                	mov    eax,ebp
c00157eb:	80 f4 00             	xor    ah,0x0
c00157ee:	89 c3                	mov    ebx,eax
c00157f0:	89 d8                	mov    eax,ebx
c00157f2:	09 c8                	or     eax,ecx
c00157f4:	74 42                	je     c0015838 <KeAlarm(ThreadControlBlock*, unsigned long long)+0x98>
c00157f6:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00157fa:	8b 4a 63             	mov    ecx,DWORD PTR [edx+0x63]
c00157fd:	0f b6 72 67          	movzx  esi,BYTE PTR [edx+0x67]
c0015801:	0f b6 42 68          	movzx  eax,BYTE PTR [edx+0x68]
c0015805:	c1 e0 08             	shl    eax,0x8
c0015808:	09 c6                	or     esi,eax
c001580a:	0f b6 42 69          	movzx  eax,BYTE PTR [edx+0x69]
c001580e:	c1 e0 10             	shl    eax,0x10
c0015811:	09 c6                	or     esi,eax
c0015813:	0f b6 42 6a          	movzx  eax,BYTE PTR [edx+0x6a]
c0015817:	83 e0 7f             	and    eax,0x7f
c001581a:	c1 e0 18             	shl    eax,0x18
c001581d:	09 f0                	or     eax,esi
c001581f:	89 c3                	mov    ebx,eax
c0015821:	a1 50 5b 03 c0       	mov    eax,ds:0xc0035b50
c0015826:	8b 15 54 5b 03 c0    	mov    edx,DWORD PTR ds:0xc0035b54
c001582c:	29 c1                	sub    ecx,eax
c001582e:	19 d3                	sbb    ebx,edx
c0015830:	89 c8                	mov    eax,ecx
c0015832:	89 da                	mov    edx,ebx
c0015834:	eb 0e                	jmp    c0015844 <KeAlarm(ThreadControlBlock*, unsigned long long)+0xa4>
c0015836:	66 90                	xchg   ax,ax
c0015838:	b8 00 00 00 00       	mov    eax,0x0
c001583d:	ba 00 00 00 00       	mov    edx,0x0
c0015842:	66 90                	xchg   ax,ax
c0015844:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0015848:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c001584c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015850:	80 f4 00             	xor    ah,0x0
c0015853:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015857:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001585b:	80 f4 00             	xor    ah,0x0
c001585e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015862:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0015866:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c001586a:	89 e8                	mov    eax,ebp
c001586c:	09 f8                	or     eax,edi
c001586e:	74 30                	je     c00158a0 <KeAlarm(ThreadControlBlock*, unsigned long long)+0x100>
c0015870:	8b 0d 50 5b 03 c0    	mov    ecx,DWORD PTR ds:0xc0035b50
c0015876:	8b 1d 54 5b 03 c0    	mov    ebx,DWORD PTR ds:0xc0035b54
c001587c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015880:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0015884:	01 c8                	add    eax,ecx
c0015886:	11 da                	adc    edx,ebx
c0015888:	89 c7                	mov    edi,eax
c001588a:	83 e7 ff             	and    edi,0xffffffff
c001588d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0015890:	89 d0                	mov    eax,edx
c0015892:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0015897:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001589b:	eb 13                	jmp    c00158b0 <KeAlarm(ThreadControlBlock*, unsigned long long)+0x110>
c001589d:	8d 76 00             	lea    esi,[esi+0x0]
c00158a0:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00158a7:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00158af:	90                   	nop
c00158b0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00158b4:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00158b7:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c00158bb:	89 cf                	mov    edi,ecx
c00158bd:	89 78 63             	mov    DWORD PTR [eax+0x63],edi
c00158c0:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00158c3:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c00158c7:	0f b6 5c 24 04       	movzx  ebx,BYTE PTR [esp+0x4]
c00158cc:	8a 50 67             	mov    dl,BYTE PTR [eax+0x67]
c00158cf:	83 e2 00             	and    edx,0x0
c00158d2:	88 d1                	mov    cl,dl
c00158d4:	88 da                	mov    dl,bl
c00158d6:	09 ca                	or     edx,ecx
c00158d8:	88 50 67             	mov    BYTE PTR [eax+0x67],dl
c00158db:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00158df:	c1 ea 08             	shr    edx,0x8
c00158e2:	0f b6 da             	movzx  ebx,dl
c00158e5:	8a 50 68             	mov    dl,BYTE PTR [eax+0x68]
c00158e8:	83 e2 00             	and    edx,0x0
c00158eb:	88 d1                	mov    cl,dl
c00158ed:	88 da                	mov    dl,bl
c00158ef:	09 ca                	or     edx,ecx
c00158f1:	88 50 68             	mov    BYTE PTR [eax+0x68],dl
c00158f4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00158f8:	c1 ea 10             	shr    edx,0x10
c00158fb:	0f b6 da             	movzx  ebx,dl
c00158fe:	8a 50 69             	mov    dl,BYTE PTR [eax+0x69]
c0015901:	83 e2 00             	and    edx,0x0
c0015904:	88 d1                	mov    cl,dl
c0015906:	88 da                	mov    dl,bl
c0015908:	09 ca                	or     edx,ecx
c001590a:	88 50 69             	mov    BYTE PTR [eax+0x69],dl
c001590d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015911:	c1 ea 18             	shr    edx,0x18
c0015914:	83 e2 7f             	and    edx,0x7f
c0015917:	89 d3                	mov    ebx,edx
c0015919:	83 e3 7f             	and    ebx,0x7f
c001591c:	8a 50 6a             	mov    dl,BYTE PTR [eax+0x6a]
c001591f:	83 e2 80             	and    edx,0xffffff80
c0015922:	88 d1                	mov    cl,dl
c0015924:	88 da                	mov    dl,bl
c0015926:	09 ca                	or     edx,ecx
c0015928:	88 50 6a             	mov    BYTE PTR [eax+0x6a],dl
c001592b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001592f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015933:	83 c4 2c             	add    esp,0x2c
c0015936:	5b                   	pop    ebx
c0015937:	5e                   	pop    esi
c0015938:	5f                   	pop    edi
c0015939:	5d                   	pop    ebp
c001593a:	c3                   	ret    
c001593b:	90                   	nop

c001593c <KeCheckAlarm(ThreadControlBlock*)>:
c001593c:	55                   	push   ebp
c001593d:	57                   	push   edi
c001593e:	56                   	push   esi
c001593f:	53                   	push   ebx
c0015940:	83 ec 0c             	sub    esp,0xc
c0015943:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015947:	8b 50 63             	mov    edx,DWORD PTR [eax+0x63]
c001594a:	0f b6 78 67          	movzx  edi,BYTE PTR [eax+0x67]
c001594e:	0f b6 68 68          	movzx  ebp,BYTE PTR [eax+0x68]
c0015952:	c1 e5 08             	shl    ebp,0x8
c0015955:	09 fd                	or     ebp,edi
c0015957:	0f b6 78 69          	movzx  edi,BYTE PTR [eax+0x69]
c001595b:	c1 e7 10             	shl    edi,0x10
c001595e:	09 ef                	or     edi,ebp
c0015960:	0f b6 40 6a          	movzx  eax,BYTE PTR [eax+0x6a]
c0015964:	83 e0 7f             	and    eax,0x7f
c0015967:	c1 e0 18             	shl    eax,0x18
c001596a:	09 f8                	or     eax,edi
c001596c:	89 c1                	mov    ecx,eax
c001596e:	89 d0                	mov    eax,edx
c0015970:	80 f4 00             	xor    ah,0x0
c0015973:	89 c3                	mov    ebx,eax
c0015975:	89 c8                	mov    eax,ecx
c0015977:	80 f4 00             	xor    ah,0x0
c001597a:	89 c6                	mov    esi,eax
c001597c:	89 f0                	mov    eax,esi
c001597e:	09 d8                	or     eax,ebx
c0015980:	0f 84 9e 00 00 00    	je     c0015a24 <KeCheckAlarm(ThreadControlBlock*)+0xe8>
c0015986:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001598a:	8b 50 63             	mov    edx,DWORD PTR [eax+0x63]
c001598d:	0f b6 58 67          	movzx  ebx,BYTE PTR [eax+0x67]
c0015991:	0f b6 70 68          	movzx  esi,BYTE PTR [eax+0x68]
c0015995:	c1 e6 08             	shl    esi,0x8
c0015998:	09 de                	or     esi,ebx
c001599a:	0f b6 58 69          	movzx  ebx,BYTE PTR [eax+0x69]
c001599e:	c1 e3 10             	shl    ebx,0x10
c00159a1:	09 f3                	or     ebx,esi
c00159a3:	0f b6 40 6a          	movzx  eax,BYTE PTR [eax+0x6a]
c00159a7:	83 e0 7f             	and    eax,0x7f
c00159aa:	c1 e0 18             	shl    eax,0x18
c00159ad:	09 d8                	or     eax,ebx
c00159af:	89 c1                	mov    ecx,eax
c00159b1:	89 cb                	mov    ebx,ecx
c00159b3:	89 d1                	mov    ecx,edx
c00159b5:	a1 50 5b 03 c0       	mov    eax,ds:0xc0035b50
c00159ba:	8b 15 54 5b 03 c0    	mov    edx,DWORD PTR ds:0xc0035b54
c00159c0:	39 c8                	cmp    eax,ecx
c00159c2:	89 d0                	mov    eax,edx
c00159c4:	19 d8                	sbb    eax,ebx
c00159c6:	72 5c                	jb     c0015a24 <KeCheckAlarm(ThreadControlBlock*)+0xe8>
c00159c8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00159cc:	c7 40 63 00 00 00 00 	mov    DWORD PTR [eax+0x63],0x0
c00159d3:	8a 50 67             	mov    dl,BYTE PTR [eax+0x67]
c00159d6:	83 e2 00             	and    edx,0x0
c00159d9:	88 50 67             	mov    BYTE PTR [eax+0x67],dl
c00159dc:	8a 50 68             	mov    dl,BYTE PTR [eax+0x68]
c00159df:	83 e2 00             	and    edx,0x0
c00159e2:	88 50 68             	mov    BYTE PTR [eax+0x68],dl
c00159e5:	8a 50 69             	mov    dl,BYTE PTR [eax+0x69]
c00159e8:	83 e2 00             	and    edx,0x0
c00159eb:	88 50 69             	mov    BYTE PTR [eax+0x69],dl
c00159ee:	8a 50 6a             	mov    dl,BYTE PTR [eax+0x6a]
c00159f1:	83 e2 80             	and    edx,0xffffff80
c00159f4:	88 50 6a             	mov    BYTE PTR [eax+0x6a],dl
c00159f7:	83 ec 0c             	sub    esp,0xc
c00159fa:	68 1a c0 02 c0       	push   0xc002c01a
c00159ff:	e8 62 15 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0015a04:	83 c4 10             	add    esp,0x10
c0015a07:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015a0b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015a0e:	8b 80 c0 07 00 00    	mov    eax,DWORD PTR [eax+0x7c0]
c0015a14:	83 ec 08             	sub    esp,0x8
c0015a17:	6a 0e                	push   0xe
c0015a19:	50                   	push   eax
c0015a1a:	e8 50 bd ff ff       	call   c001176f <KeRaiseSignal(SigHandlerBlock*, int)>
c0015a1f:	83 c4 10             	add    esp,0x10
c0015a22:	66 90                	xchg   ax,ax
c0015a24:	90                   	nop
c0015a25:	83 c4 0c             	add    esp,0xc
c0015a28:	5b                   	pop    ebx
c0015a29:	5e                   	pop    esi
c0015a2a:	5f                   	pop    edi
c0015a2b:	5d                   	pop    ebp
c0015a2c:	c3                   	ret    

c0015a2d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0015a2d:	55                   	push   ebp
c0015a2e:	57                   	push   edi
c0015a2f:	56                   	push   esi
c0015a30:	53                   	push   ebx
c0015a31:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0015a37:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c0015a42:	74 3b                	je     c0015a7f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c0015a44:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c0015a4c:	74 31                	je     c0015a7f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c0015a4e:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c0015a56:	75 27                	jne    c0015a7f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c0015a58:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c0015a5f:	05 00 10 00 00       	add    eax,0x1000
c0015a64:	89 c2                	mov    edx,eax
c0015a66:	25 00 f0 ff ff       	and    eax,0xfffff000
c0015a6b:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c0015a72:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c0015a78:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c0015a7f:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c0015a86:	83 ec 0c             	sub    esp,0xc
c0015a89:	6a 01                	push   0x1
c0015a8b:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0015a91:	e8 11 e0 ff ff       	call   c0013aa7 <Virt::allocateKernelVirtualPages(int)>
c0015a96:	83 c4 10             	add    esp,0x10
c0015a99:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0015a9f:	89 c3                	mov    ebx,eax
c0015aa1:	0f 86 27 01 00 00    	jbe    c0015bce <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a1>
c0015aa7:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0015aaf:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0015ab6:	c1 ee 0c             	shr    esi,0xc
c0015ab9:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0015abd:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c0015ac4:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c0015acb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015acf:	29 ef                	sub    edi,ebp
c0015ad1:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c0015ad5:	0f 83 fa 00 00 00    	jae    c0015bd5 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a8>
c0015adb:	81 ff 00 10 00 00    	cmp    edi,0x1000
c0015ae1:	b8 00 10 00 00       	mov    eax,0x1000
c0015ae6:	0f 47 f8             	cmova  edi,eax
c0015ae9:	83 ec 0c             	sub    esp,0xc
c0015aec:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0015af3:	31 d2                	xor    edx,edx
c0015af5:	8b 08                	mov    ecx,DWORD PTR [eax]
c0015af7:	8d 44 24 28          	lea    eax,[esp+0x28]
c0015afb:	50                   	push   eax
c0015afc:	8d 74 24 30          	lea    esi,[esp+0x30]
c0015b00:	56                   	push   esi
c0015b01:	52                   	push   edx
c0015b02:	57                   	push   edi
c0015b03:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c0015b0a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015b0d:	83 c4 20             	add    esp,0x20
c0015b10:	85 c0                	test   eax,eax
c0015b12:	75 06                	jne    c0015b1a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xed>
c0015b14:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0015b18:	74 13                	je     c0015b2d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x100>
c0015b1a:	83 ec 0c             	sub    esp,0xc
c0015b1d:	53                   	push   ebx
c0015b1e:	e8 82 e2 ff ff       	call   c0013da5 <Virt::freeKernelVirtualPages(unsigned long)>
c0015b23:	83 c4 10             	add    esp,0x10
c0015b26:	31 c0                	xor    eax,eax
c0015b28:	e9 80 01 00 00       	jmp    c0015cad <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x280>
c0015b2d:	fa                   	cli    
c0015b2e:	ff 05 30 63 03 c0    	inc    DWORD PTR ds:0xc0036330
c0015b34:	e8 21 ac ff ff       	call   c001075a <Phys::allocatePage()>
c0015b39:	6a 07                	push   0x7
c0015b3b:	53                   	push   ebx
c0015b3c:	50                   	push   eax
c0015b3d:	89 c7                	mov    edi,eax
c0015b3f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015b44:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015b47:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c0015b4d:	e8 2e e6 ff ff       	call   c0014180 <VAS::mapPage(unsigned long, unsigned long, int)>
c0015b52:	83 c4 0c             	add    esp,0xc
c0015b55:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0015b5c:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c0015b62:	6a 00                	push   0x0
c0015b64:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015b69:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015b6c:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c0015b72:	e8 75 e4 ff ff       	call   c0013fec <VAS::mapOtherVASIn(bool, VAS*)>
c0015b77:	58                   	pop    eax
c0015b78:	5a                   	pop    edx
c0015b79:	68 07 0c 00 00       	push   0xc07
c0015b7e:	55                   	push   ebp
c0015b7f:	57                   	push   edi
c0015b80:	89 df                	mov    edi,ebx
c0015b82:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0015b89:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c0015b8f:	6a 00                	push   0x0
c0015b91:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015b96:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015b99:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c0015b9f:	e8 30 e8 ff ff       	call   c00143d4 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0015ba4:	b9 00 10 00 00       	mov    ecx,0x1000
c0015ba9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015bab:	f0 ff 0d 30 63 03 c0 	lock dec DWORD PTR ds:0xc0036330
c0015bb2:	83 c4 20             	add    esp,0x20
c0015bb5:	83 3d 30 63 03 c0 00 	cmp    DWORD PTR ds:0xc0036330,0x0
c0015bbc:	75 01                	jne    c0015bbf <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x192>
c0015bbe:	fb                   	sti    
c0015bbf:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0015bc3:	81 c5 00 10 00 00    	add    ebp,0x1000
c0015bc9:	e9 ef fe ff ff       	jmp    c0015abd <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x90>
c0015bce:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0015bd5:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0015bdc:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0015be2:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0015be8:	0f 86 b1 00 00 00    	jbe    c0015c9f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x272>
c0015bee:	fa                   	cli    
c0015bef:	51                   	push   ecx
c0015bf0:	31 ff                	xor    edi,edi
c0015bf2:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0015bf9:	c1 ee 0c             	shr    esi,0xc
c0015bfc:	ff 05 30 63 03 c0    	inc    DWORD PTR ds:0xc0036330
c0015c02:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c0015c08:	6a 00                	push   0x0
c0015c0a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015c0f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015c12:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c0015c18:	e8 cf e3 ff ff       	call   c0013fec <VAS::mapOtherVASIn(bool, VAS*)>
c0015c1d:	83 c4 10             	add    esp,0x10
c0015c20:	e8 35 ab ff ff       	call   c001075a <Phys::allocatePage()>
c0015c25:	47                   	inc    edi
c0015c26:	6a 07                	push   0x7
c0015c28:	53                   	push   ebx
c0015c29:	50                   	push   eax
c0015c2a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0015c2e:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0015c34:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0015c37:	ff b2 b2 05 00 00    	push   DWORD PTR [edx+0x5b2]
c0015c3d:	e8 3e e5 ff ff       	call   c0014180 <VAS::mapPage(unsigned long, unsigned long, int)>
c0015c42:	58                   	pop    eax
c0015c43:	5a                   	pop    edx
c0015c44:	68 07 0c 00 00       	push   0xc07
c0015c49:	55                   	push   ebp
c0015c4a:	81 c5 00 10 00 00    	add    ebp,0x1000
c0015c50:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015c54:	50                   	push   eax
c0015c55:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0015c5c:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c0015c62:	6a 00                	push   0x0
c0015c64:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015c69:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015c6c:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c0015c72:	e8 5d e7 ff ff       	call   c00143d4 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0015c77:	83 c4 1c             	add    esp,0x1c
c0015c7a:	68 00 10 00 00       	push   0x1000
c0015c7f:	6a 00                	push   0x0
c0015c81:	53                   	push   ebx
c0015c82:	e8 69 a8 fe ff       	call   c00004f0 <memset>
c0015c87:	83 c4 10             	add    esp,0x10
c0015c8a:	39 fe                	cmp    esi,edi
c0015c8c:	77 92                	ja     c0015c20 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f3>
c0015c8e:	f0 ff 0d 30 63 03 c0 	lock dec DWORD PTR ds:0xc0036330
c0015c95:	83 3d 30 63 03 c0 00 	cmp    DWORD PTR ds:0xc0036330,0x0
c0015c9c:	75 01                	jne    c0015c9f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x272>
c0015c9e:	fb                   	sti    
c0015c9f:	83 ec 0c             	sub    esp,0xc
c0015ca2:	53                   	push   ebx
c0015ca3:	e8 fd e0 ff ff       	call   c0013da5 <Virt::freeKernelVirtualPages(unsigned long)>
c0015ca8:	83 c4 10             	add    esp,0x10
c0015cab:	b0 01                	mov    al,0x1
c0015cad:	81 c4 2c 10 00 00    	add    esp,0x102c
c0015cb3:	5b                   	pop    ebx
c0015cb4:	5e                   	pop    esi
c0015cb5:	5f                   	pop    edi
c0015cb6:	5d                   	pop    ebp
c0015cb7:	c3                   	ret    

c0015cb8 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c0015cb8:	55                   	push   ebp
c0015cb9:	57                   	push   edi
c0015cba:	56                   	push   esi
c0015cbb:	53                   	push   ebx
c0015cbc:	83 ec 68             	sub    esp,0x68
c0015cbf:	68 14 01 00 00       	push   0x114
c0015cc4:	e8 43 a4 ff ff       	call   c001010c <malloc>
c0015cc9:	83 c4 0c             	add    esp,0xc
c0015ccc:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0015cd0:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0015cd4:	89 c3                	mov    ebx,eax
c0015cd6:	50                   	push   eax
c0015cd7:	e8 d6 2e ff ff       	call   c0008bb2 <File::File(char const*, Process*)>
c0015cdc:	5e                   	pop    esi
c0015cdd:	5f                   	pop    edi
c0015cde:	6a 01                	push   0x1
c0015ce0:	53                   	push   ebx
c0015ce1:	e8 ea 2e ff ff       	call   c0008bd0 <File::open(FileOpenMode)>
c0015ce6:	83 c4 10             	add    esp,0x10
c0015ce9:	85 c0                	test   eax,eax
c0015ceb:	0f 85 cb 01 00 00    	jne    c0015ebc <Thr::loadProgramIntoMemory(Process*, char const*)+0x204>
c0015cf1:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0015cf9:	83 ec 0c             	sub    esp,0xc
c0015cfc:	6a 34                	push   0x34
c0015cfe:	e8 09 a4 ff ff       	call   c001010c <malloc>
c0015d03:	59                   	pop    ecx
c0015d04:	8d 74 24 34          	lea    esi,[esp+0x34]
c0015d08:	89 c7                	mov    edi,eax
c0015d0a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015d0c:	56                   	push   esi
c0015d0d:	57                   	push   edi
c0015d0e:	6a 00                	push   0x0
c0015d10:	6a 34                	push   0x34
c0015d12:	53                   	push   ebx
c0015d13:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015d16:	83 c4 20             	add    esp,0x20
c0015d19:	85 c0                	test   eax,eax
c0015d1b:	0f 85 9b 01 00 00    	jne    c0015ebc <Thr::loadProgramIntoMemory(Process*, char const*)+0x204>
c0015d21:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0015d27:	0f 85 8f 01 00 00    	jne    c0015ebc <Thr::loadProgramIntoMemory(Process*, char const*)+0x204>
c0015d2d:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0015d30:	85 c0                	test   eax,eax
c0015d32:	0f 84 84 01 00 00    	je     c0015ebc <Thr::loadProgramIntoMemory(Process*, char const*)+0x204>
c0015d38:	52                   	push   edx
c0015d39:	31 d2                	xor    edx,edx
c0015d3b:	52                   	push   edx
c0015d3c:	50                   	push   eax
c0015d3d:	53                   	push   ebx
c0015d3e:	e8 4b 2f ff ff       	call   c0008c8e <File::seek(unsigned long long)>
c0015d43:	83 c4 10             	add    esp,0x10
c0015d46:	85 c0                	test   eax,eax
c0015d48:	0f 85 6e 01 00 00    	jne    c0015ebc <Thr::loadProgramIntoMemory(Process*, char const*)+0x204>
c0015d4e:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c0015d51:	83 ec 0c             	sub    esp,0xc
c0015d54:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0015d58:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0015d5c:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0015d60:	0f af c2             	imul   eax,edx
c0015d63:	50                   	push   eax
c0015d64:	e8 a3 a3 ff ff       	call   c001010c <malloc>
c0015d69:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0015d6b:	89 34 24             	mov    DWORD PTR [esp],esi
c0015d6e:	31 f6                	xor    esi,esi
c0015d70:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0015d74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015d78:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0015d7c:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0015d80:	0f af c2             	imul   eax,edx
c0015d83:	99                   	cdq    
c0015d84:	52                   	push   edx
c0015d85:	50                   	push   eax
c0015d86:	53                   	push   ebx
c0015d87:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015d8a:	83 c4 20             	add    esp,0x20
c0015d8d:	66 3b 77 30          	cmp    si,WORD PTR [edi+0x30]
c0015d91:	0f b7 c6             	movzx  eax,si
c0015d94:	73 71                	jae    c0015e07 <Thr::loadProgramIntoMemory(Process*, char const*)+0x14f>
c0015d96:	55                   	push   ebp
c0015d97:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c0015d9b:	6b c0 28             	imul   eax,eax,0x28
c0015d9e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015da2:	6b d2 28             	imul   edx,edx,0x28
c0015da5:	8b 04 01             	mov    eax,DWORD PTR [ecx+eax*1]
c0015da8:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0015dac:	31 d2                	xor    edx,edx
c0015dae:	52                   	push   edx
c0015daf:	50                   	push   eax
c0015db0:	53                   	push   ebx
c0015db1:	e8 d8 2e ff ff       	call   c0008c8e <File::seek(unsigned long long)>
c0015db6:	83 c4 0c             	add    esp,0xc
c0015db9:	6a 20                	push   0x20
c0015dbb:	6a 00                	push   0x0
c0015dbd:	8d 6c 24 3c          	lea    ebp,[esp+0x3c]
c0015dc1:	55                   	push   ebp
c0015dc2:	e8 29 a7 fe ff       	call   c00004f0 <memset>
c0015dc7:	58                   	pop    eax
c0015dc8:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015dca:	8d 54 24 38          	lea    edx,[esp+0x38]
c0015dce:	52                   	push   edx
c0015dcf:	55                   	push   ebp
c0015dd0:	6a 00                	push   0x0
c0015dd2:	6a 1f                	push   0x1f
c0015dd4:	53                   	push   ebx
c0015dd5:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015dd8:	83 c4 18             	add    esp,0x18
c0015ddb:	55                   	push   ebp
c0015ddc:	68 2b c0 02 c0       	push   0xc002c02b
c0015de1:	e8 9a a9 fe ff       	call   c0000780 <strcmp>
c0015de6:	83 c4 10             	add    esp,0x10
c0015de9:	85 c0                	test   eax,eax
c0015deb:	75 17                	jne    c0015e04 <Thr::loadProgramIntoMemory(Process*, char const*)+0x14c>
c0015ded:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0015df1:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0015df5:	8a 80 76 02 00 00    	mov    al,BYTE PTR [eax+0x276]
c0015dfb:	83 c8 80             	or     eax,0xffffff80
c0015dfe:	88 82 76 02 00 00    	mov    BYTE PTR [edx+0x276],al
c0015e04:	46                   	inc    esi
c0015e05:	eb 86                	jmp    c0015d8d <Thr::loadProgramIntoMemory(Process*, char const*)+0xd5>
c0015e07:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c0015e0a:	85 c0                	test   eax,eax
c0015e0c:	0f 84 aa 00 00 00    	je     c0015ebc <Thr::loadProgramIntoMemory(Process*, char const*)+0x204>
c0015e12:	31 d2                	xor    edx,edx
c0015e14:	56                   	push   esi
c0015e15:	52                   	push   edx
c0015e16:	50                   	push   eax
c0015e17:	53                   	push   ebx
c0015e18:	e8 71 2e ff ff       	call   c0008c8e <File::seek(unsigned long long)>
c0015e1d:	83 c4 10             	add    esp,0x10
c0015e20:	85 c0                	test   eax,eax
c0015e22:	0f 85 94 00 00 00    	jne    c0015ebc <Thr::loadProgramIntoMemory(Process*, char const*)+0x204>
c0015e28:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0015e2c:	83 ec 0c             	sub    esp,0xc
c0015e2f:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0015e33:	0f af c2             	imul   eax,edx
c0015e36:	50                   	push   eax
c0015e37:	e8 d0 a2 ff ff       	call   c001010c <malloc>
c0015e3c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0015e40:	59                   	pop    ecx
c0015e41:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0015e43:	8d 44 24 34          	lea    eax,[esp+0x34]
c0015e47:	50                   	push   eax
c0015e48:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0015e4c:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0015e50:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0015e54:	0f af c2             	imul   eax,edx
c0015e57:	99                   	cdq    
c0015e58:	52                   	push   edx
c0015e59:	50                   	push   eax
c0015e5a:	53                   	push   ebx
c0015e5b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015e5e:	83 c4 20             	add    esp,0x20
c0015e61:	31 c9                	xor    ecx,ecx
c0015e63:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0015e6b:	66 3b 4f 2c          	cmp    cx,WORD PTR [edi+0x2c]
c0015e6f:	0f b7 e9             	movzx  ebp,cx
c0015e72:	0f 83 89 00 00 00    	jae    c0015f01 <Thr::loadProgramIntoMemory(Process*, char const*)+0x249>
c0015e78:	c1 e5 05             	shl    ebp,0x5
c0015e7b:	03 6c 24 10          	add    ebp,DWORD PTR [esp+0x10]
c0015e7f:	83 7d 00 01          	cmp    DWORD PTR [ebp+0x0],0x1
c0015e83:	75 76                	jne    c0015efb <Thr::loadProgramIntoMemory(Process*, char const*)+0x243>
c0015e85:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0015e89:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e8c:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
c0015e8f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0015e93:	52                   	push   edx
c0015e94:	31 d2                	xor    edx,edx
c0015e96:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0015e99:	52                   	push   edx
c0015e9a:	50                   	push   eax
c0015e9b:	53                   	push   ebx
c0015e9c:	e8 ed 2d ff ff       	call   c0008c8e <File::seek(unsigned long long)>
c0015ea1:	83 c4 10             	add    esp,0x10
c0015ea4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0015ea8:	85 c0                	test   eax,eax
c0015eaa:	74 17                	je     c0015ec3 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20b>
c0015eac:	83 ec 0c             	sub    esp,0xc
c0015eaf:	68 3a c0 02 c0       	push   0xc002c03a
c0015eb4:	e8 ad 10 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0015eb9:	83 c4 10             	add    esp,0x10
c0015ebc:	31 c0                	xor    eax,eax
c0015ebe:	e9 8e 00 00 00       	jmp    c0015f51 <Thr::loadProgramIntoMemory(Process*, char const*)+0x299>
c0015ec3:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0015ec7:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0015eca:	83 ec 0c             	sub    esp,0xc
c0015ecd:	2b 45 10             	sub    eax,DWORD PTR [ebp+0x10]
c0015ed0:	50                   	push   eax
c0015ed1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0015ed5:	56                   	push   esi
c0015ed6:	53                   	push   ebx
c0015ed7:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0015ede:	e8 4a fb ff ff       	call   c0015a2d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0015ee3:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c0015ee7:	83 c4 20             	add    esp,0x20
c0015eea:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0015eee:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0015ef2:	0f 43 74 24 08       	cmovae esi,DWORD PTR [esp+0x8]
c0015ef7:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0015efb:	41                   	inc    ecx
c0015efc:	e9 6a ff ff ff       	jmp    c0015e6b <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b3>
c0015f01:	8b 4c 24 70          	mov    ecx,DWORD PTR [esp+0x70]
c0015f05:	83 ec 0c             	sub    esp,0xc
c0015f08:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015f0c:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0015f10:	8b 91 b2 05 00 00    	mov    edx,DWORD PTR [ecx+0x5b2]
c0015f16:	25 00 f0 ff ff       	and    eax,0xfffff000
c0015f1b:	89 b1 ae 05 00 00    	mov    DWORD PTR [ecx+0x5ae],esi
c0015f21:	05 00 10 00 00       	add    eax,0x1000
c0015f26:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0015f29:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015f2d:	e8 ea a1 ff ff       	call   c001011c <free>
c0015f32:	89 3c 24             	mov    DWORD PTR [esp],edi
c0015f35:	e8 e2 a1 ff ff       	call   c001011c <free>
c0015f3a:	58                   	pop    eax
c0015f3b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015f3f:	e8 d8 a1 ff ff       	call   c001011c <free>
c0015f44:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015f47:	e8 e2 2c ff ff       	call   c0008c2e <File::close()>
c0015f4c:	83 c4 10             	add    esp,0x10
c0015f4f:	b0 01                	mov    al,0x1
c0015f51:	83 c4 5c             	add    esp,0x5c
c0015f54:	5b                   	pop    ebx
c0015f55:	5e                   	pop    esi
c0015f56:	5f                   	pop    edi
c0015f57:	5d                   	pop    ebp
c0015f58:	c3                   	ret    

c0015f59 <Thr::runtimeReferenceHelper()>:
c0015f59:	83 ec 18             	sub    esp,0x18
c0015f5c:	68 42 c0 02 c0       	push   0xc002c042
c0015f61:	e8 00 10 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0015f66:	fa                   	cli    
c0015f67:	83 c4 10             	add    esp,0x10
c0015f6a:	eb fe                	jmp    c0015f6a <Thr::runtimeReferenceHelper()+0x11>

c0015f6c <Thr::getAddressOfKernelSymbol(char const*)>:
c0015f6c:	57                   	push   edi
c0015f6d:	56                   	push   esi
c0015f6e:	53                   	push   ebx
c0015f6f:	31 db                	xor    ebx,ebx
c0015f71:	39 1d 00 63 03 c0    	cmp    DWORD PTR ds:0xc0036300,ebx
c0015f77:	7e 3c                	jle    c0015fb5 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0015f79:	8b 34 9d e0 62 03 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffc9d20]
c0015f80:	31 ff                	xor    edi,edi
c0015f82:	39 3c 9d a0 62 03 c0 	cmp    DWORD PTR [ebx*4-0x3ffc9d60],edi
c0015f89:	7e 27                	jle    c0015fb2 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0015f8b:	50                   	push   eax
c0015f8c:	50                   	push   eax
c0015f8d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015f91:	8b 06                	mov    eax,DWORD PTR [esi]
c0015f93:	03 04 9d c0 62 03 c0 	add    eax,DWORD PTR [ebx*4-0x3ffc9d40]
c0015f9a:	50                   	push   eax
c0015f9b:	e8 e0 a7 fe ff       	call   c0000780 <strcmp>
c0015fa0:	83 c4 10             	add    esp,0x10
c0015fa3:	85 c0                	test   eax,eax
c0015fa5:	75 05                	jne    c0015fac <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0015fa7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0015faa:	eb 0b                	jmp    c0015fb7 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0015fac:	83 c6 10             	add    esi,0x10
c0015faf:	47                   	inc    edi
c0015fb0:	eb d0                	jmp    c0015f82 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0015fb2:	43                   	inc    ebx
c0015fb3:	eb bc                	jmp    c0015f71 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0015fb5:	31 c0                	xor    eax,eax
c0015fb7:	5b                   	pop    ebx
c0015fb8:	5e                   	pop    esi
c0015fb9:	5f                   	pop    edi
c0015fba:	c3                   	ret    

c0015fbb <Thr::loadKernelSymbolTable(char const*)>:
c0015fbb:	55                   	push   ebp
c0015fbc:	57                   	push   edi
c0015fbd:	56                   	push   esi
c0015fbe:	53                   	push   ebx
c0015fbf:	83 ec 68             	sub    esp,0x68
c0015fc2:	68 14 01 00 00       	push   0x114
c0015fc7:	8b 35 58 63 03 c0    	mov    esi,DWORD PTR ds:0xc0036358
c0015fcd:	e8 3a a1 ff ff       	call   c001010c <malloc>
c0015fd2:	83 c4 0c             	add    esp,0xc
c0015fd5:	56                   	push   esi
c0015fd6:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0015fda:	89 c3                	mov    ebx,eax
c0015fdc:	50                   	push   eax
c0015fdd:	e8 d0 2b ff ff       	call   c0008bb2 <File::File(char const*, Process*)>
c0015fe2:	5e                   	pop    esi
c0015fe3:	5f                   	pop    edi
c0015fe4:	6a 01                	push   0x1
c0015fe6:	53                   	push   ebx
c0015fe7:	e8 e4 2b ff ff       	call   c0008bd0 <File::open(FileOpenMode)>
c0015fec:	83 c4 10             	add    esp,0x10
c0015fef:	85 c0                	test   eax,eax
c0015ff1:	74 0a                	je     c0015ffd <Thr::loadKernelSymbolTable(char const*)+0x42>
c0015ff3:	83 ec 0c             	sub    esp,0xc
c0015ff6:	68 64 c0 02 c0       	push   0xc002c064
c0015ffb:	eb 34                	jmp    c0016031 <Thr::loadKernelSymbolTable(char const*)+0x76>
c0015ffd:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0016005:	83 ec 0c             	sub    esp,0xc
c0016008:	6a 34                	push   0x34
c001600a:	e8 fd a0 ff ff       	call   c001010c <malloc>
c001600f:	59                   	pop    ecx
c0016010:	8d 74 24 34          	lea    esi,[esp+0x34]
c0016014:	89 c7                	mov    edi,eax
c0016016:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016018:	56                   	push   esi
c0016019:	57                   	push   edi
c001601a:	6a 00                	push   0x0
c001601c:	6a 34                	push   0x34
c001601e:	53                   	push   ebx
c001601f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016022:	83 c4 20             	add    esp,0x20
c0016025:	85 c0                	test   eax,eax
c0016027:	74 17                	je     c0016040 <Thr::loadKernelSymbolTable(char const*)+0x85>
c0016029:	83 ec 0c             	sub    esp,0xc
c001602c:	68 7b c0 02 c0       	push   0xc002c07b
c0016031:	e8 2a a5 ff ff       	call   c0010560 <KePanic(char const*)>
c0016036:	83 c4 10             	add    esp,0x10
c0016039:	31 c0                	xor    eax,eax
c001603b:	e9 31 02 00 00       	jmp    c0016271 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0016040:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0016046:	75 e1                	jne    c0016029 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0016048:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001604b:	85 c0                	test   eax,eax
c001604d:	74 da                	je     c0016029 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001604f:	52                   	push   edx
c0016050:	31 d2                	xor    edx,edx
c0016052:	52                   	push   edx
c0016053:	50                   	push   eax
c0016054:	53                   	push   ebx
c0016055:	e8 34 2c ff ff       	call   c0008c8e <File::seek(unsigned long long)>
c001605a:	83 c4 10             	add    esp,0x10
c001605d:	85 c0                	test   eax,eax
c001605f:	75 c8                	jne    c0016029 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0016061:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0016065:	83 ec 0c             	sub    esp,0xc
c0016068:	31 ed                	xor    ebp,ebp
c001606a:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001606e:	0f af c2             	imul   eax,edx
c0016071:	50                   	push   eax
c0016072:	e8 95 a0 ff ff       	call   c001010c <malloc>
c0016077:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0016079:	89 34 24             	mov    DWORD PTR [esp],esi
c001607c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016080:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016084:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0016088:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001608c:	0f af c2             	imul   eax,edx
c001608f:	99                   	cdq    
c0016090:	52                   	push   edx
c0016091:	50                   	push   eax
c0016092:	53                   	push   ebx
c0016093:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016096:	83 c4 20             	add    esp,0x20
c0016099:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00160a1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00160a9:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00160b1:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00160b9:	66 3b 6f 30          	cmp    bp,WORD PTR [edi+0x30]
c00160bd:	0f b7 f5             	movzx  esi,bp
c00160c0:	0f 83 a7 00 00 00    	jae    c001616d <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c00160c6:	6b f6 28             	imul   esi,esi,0x28
c00160c9:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c00160cd:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00160d0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00160d4:	50                   	push   eax
c00160d5:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c00160d9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00160dd:	8b 16                	mov    edx,DWORD PTR [esi]
c00160df:	6b c0 28             	imul   eax,eax,0x28
c00160e2:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c00160e6:	89 d0                	mov    eax,edx
c00160e8:	31 d2                	xor    edx,edx
c00160ea:	52                   	push   edx
c00160eb:	50                   	push   eax
c00160ec:	53                   	push   ebx
c00160ed:	e8 9c 2b ff ff       	call   c0008c8e <File::seek(unsigned long long)>
c00160f2:	83 c4 0c             	add    esp,0xc
c00160f5:	6a 20                	push   0x20
c00160f7:	6a 00                	push   0x0
c00160f9:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c00160fd:	52                   	push   edx
c00160fe:	e8 ed a3 fe ff       	call   c00004f0 <memset>
c0016103:	58                   	pop    eax
c0016104:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016106:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001610a:	51                   	push   ecx
c001610b:	8d 54 24 40          	lea    edx,[esp+0x40]
c001610f:	52                   	push   edx
c0016110:	6a 00                	push   0x0
c0016112:	6a 1f                	push   0x1f
c0016114:	53                   	push   ebx
c0016115:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016118:	83 c4 18             	add    esp,0x18
c001611b:	68 92 c0 02 c0       	push   0xc002c092
c0016120:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0016124:	52                   	push   edx
c0016125:	e8 56 a6 fe ff       	call   c0000780 <strcmp>
c001612a:	83 c4 10             	add    esp,0x10
c001612d:	85 c0                	test   eax,eax
c001612f:	75 0f                	jne    c0016140 <Thr::loadKernelSymbolTable(char const*)+0x185>
c0016131:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0016134:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016138:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001613c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016140:	50                   	push   eax
c0016141:	50                   	push   eax
c0016142:	68 9a c0 02 c0       	push   0xc002c09a
c0016147:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001614b:	50                   	push   eax
c001614c:	e8 2f a6 fe ff       	call   c0000780 <strcmp>
c0016151:	83 c4 10             	add    esp,0x10
c0016154:	85 c0                	test   eax,eax
c0016156:	75 0f                	jne    c0016167 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0016158:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001615b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001615f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016163:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016167:	45                   	inc    ebp
c0016168:	e9 4c ff ff ff       	jmp    c00160b9 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c001616d:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0016172:	75 10                	jne    c0016184 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c0016174:	83 ec 0c             	sub    esp,0xc
c0016177:	68 a2 c0 02 c0       	push   0xc002c0a2
c001617c:	e8 df a3 ff ff       	call   c0010560 <KePanic(char const*)>
c0016181:	83 c4 10             	add    esp,0x10
c0016184:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0016189:	75 10                	jne    c001619b <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c001618b:	83 ec 0c             	sub    esp,0xc
c001618e:	68 a2 c0 02 c0       	push   0xc002c0a2
c0016193:	e8 c8 a3 ff ff       	call   c0010560 <KePanic(char const*)>
c0016198:	83 c4 10             	add    esp,0x10
c001619b:	50                   	push   eax
c001619c:	31 d2                	xor    edx,edx
c001619e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00161a2:	52                   	push   edx
c00161a3:	50                   	push   eax
c00161a4:	53                   	push   ebx
c00161a5:	e8 e4 2a ff ff       	call   c0008c8e <File::seek(unsigned long long)>
c00161aa:	5a                   	pop    edx
c00161ab:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00161af:	e8 58 9f ff ff       	call   c001010c <malloc>
c00161b4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00161b8:	31 c9                	xor    ecx,ecx
c00161ba:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00161be:	8b 03                	mov    eax,DWORD PTR [ebx]
c00161c0:	5e                   	pop    esi
c00161c1:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c00161c5:	55                   	push   ebp
c00161c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00161ca:	51                   	push   ecx
c00161cb:	52                   	push   edx
c00161cc:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00161d0:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c00161d4:	53                   	push   ebx
c00161d5:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00161d8:	83 c4 14             	add    esp,0x14
c00161db:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00161df:	e8 28 9f ff ff       	call   c001010c <malloc>
c00161e4:	89 c6                	mov    esi,eax
c00161e6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00161e8:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00161eb:	56                   	push   esi
c00161ec:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00161f0:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00161f4:	51                   	push   ecx
c00161f5:	52                   	push   edx
c00161f6:	53                   	push   ebx
c00161f7:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00161fa:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00161fe:	83 c4 1c             	add    esp,0x1c
c0016201:	8b 15 00 63 03 c0    	mov    edx,DWORD PTR ds:0xc0036300
c0016207:	c1 e8 04             	shr    eax,0x4
c001620a:	89 04 95 a0 62 03 c0 	mov    DWORD PTR [edx*4-0x3ffc9d60],eax
c0016211:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016215:	31 d2                	xor    edx,edx
c0016217:	52                   	push   edx
c0016218:	50                   	push   eax
c0016219:	53                   	push   ebx
c001621a:	e8 6f 2a ff ff       	call   c0008c8e <File::seek(unsigned long long)>
c001621f:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0016221:	31 d2                	xor    edx,edx
c0016223:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0016226:	56                   	push   esi
c0016227:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001622b:	52                   	push   edx
c001622c:	50                   	push   eax
c001622d:	53                   	push   ebx
c001622e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016231:	83 c4 14             	add    esp,0x14
c0016234:	53                   	push   ebx
c0016235:	e8 f4 29 ff ff       	call   c0008c2e <File::close()>
c001623a:	5d                   	pop    ebp
c001623b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001623f:	e8 d8 9e ff ff       	call   c001011c <free>
c0016244:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016247:	e8 d0 9e ff ff       	call   c001011c <free>
c001624c:	a1 00 63 03 c0       	mov    eax,ds:0xc0036300
c0016251:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0016255:	83 c4 10             	add    esp,0x10
c0016258:	89 34 85 c0 62 03 c0 	mov    DWORD PTR [eax*4-0x3ffc9d40],esi
c001625f:	8d 50 01             	lea    edx,[eax+0x1]
c0016262:	89 0c 85 e0 62 03 c0 	mov    DWORD PTR [eax*4-0x3ffc9d20],ecx
c0016269:	b0 01                	mov    al,0x1
c001626b:	89 15 00 63 03 c0    	mov    DWORD PTR ds:0xc0036300,edx
c0016271:	83 c4 5c             	add    esp,0x5c
c0016274:	5b                   	pop    ebx
c0016275:	5e                   	pop    esi
c0016276:	5f                   	pop    edi
c0016277:	5d                   	pop    ebp
c0016278:	c3                   	ret    

c0016279 <KeIsELFValid(Elf32_Ehdr*)>:
c0016279:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001627d:	31 c0                	xor    eax,eax
c001627f:	80 3a 7f             	cmp    BYTE PTR [edx],0x7f
c0016282:	75 13                	jne    c0016297 <KeIsELFValid(Elf32_Ehdr*)+0x1e>
c0016284:	80 7a 01 45          	cmp    BYTE PTR [edx+0x1],0x45
c0016288:	75 0d                	jne    c0016297 <KeIsELFValid(Elf32_Ehdr*)+0x1e>
c001628a:	80 7a 02 4c          	cmp    BYTE PTR [edx+0x2],0x4c
c001628e:	75 07                	jne    c0016297 <KeIsELFValid(Elf32_Ehdr*)+0x1e>
c0016290:	80 7a 03 46          	cmp    BYTE PTR [edx+0x3],0x46
c0016294:	0f 94 c0             	sete   al
c0016297:	c3                   	ret    

c0016298 <KeGetELFSectionHeader(unsigned char*, int)>:
c0016298:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001629c:	6b 54 24 08 28       	imul   edx,DWORD PTR [esp+0x8],0x28
c00162a1:	03 50 20             	add    edx,DWORD PTR [eax+0x20]
c00162a4:	01 d0                	add    eax,edx
c00162a6:	c3                   	ret    

c00162a7 <KeGetELFProgramHeader(unsigned char*, int)>:
c00162a7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00162ab:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00162af:	c1 e0 05             	shl    eax,0x5
c00162b2:	03 42 1c             	add    eax,DWORD PTR [edx+0x1c]
c00162b5:	01 d0                	add    eax,edx
c00162b7:	c3                   	ret    

c00162b8 <KeLookupELFString(unsigned char*, int)>:
c00162b8:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00162bc:	31 c0                	xor    eax,eax
c00162be:	0f b7 51 32          	movzx  edx,WORD PTR [ecx+0x32]
c00162c2:	85 d2                	test   edx,edx
c00162c4:	74 14                	je     c00162da <KeLookupELFString(unsigned char*, int)+0x22>
c00162c6:	52                   	push   edx
c00162c7:	51                   	push   ecx
c00162c8:	e8 cb ff ff ff       	call   c0016298 <KeGetELFSectionHeader(unsigned char*, int)>
c00162cd:	5a                   	pop    edx
c00162ce:	5a                   	pop    edx
c00162cf:	03 48 10             	add    ecx,DWORD PTR [eax+0x10]
c00162d2:	89 c8                	mov    eax,ecx
c00162d4:	74 04                	je     c00162da <KeLookupELFString(unsigned char*, int)+0x22>
c00162d6:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00162da:	c3                   	ret    

c00162db <KeLoadELFProgramHeaders(unsigned char*, bool, unsigned long)>:
c00162db:	55                   	push   ebp
c00162dc:	31 ed                	xor    ebp,ebp
c00162de:	57                   	push   edi
c00162df:	56                   	push   esi
c00162e0:	53                   	push   ebx
c00162e1:	83 ec 1c             	sub    esp,0x1c
c00162e4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00162e8:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00162eb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00162ef:	89 04 24             	mov    DWORD PTR [esp],eax
c00162f2:	0f b6 44 24 34       	movzx  eax,BYTE PTR [esp+0x34]
c00162f7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00162fb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00162ff:	0f b7 40 2c          	movzx  eax,WORD PTR [eax+0x2c]
c0016303:	39 e8                	cmp    eax,ebp
c0016305:	7e 79                	jle    c0016380 <KeLoadELFProgramHeaders(unsigned char*, bool, unsigned long)+0xa5>
c0016307:	55                   	push   ebp
c0016308:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001630c:	e8 96 ff ff ff       	call   c00162a7 <KeGetELFProgramHeader(unsigned char*, int)>
c0016311:	5a                   	pop    edx
c0016312:	59                   	pop    ecx
c0016313:	83 38 01             	cmp    DWORD PTR [eax],0x1
c0016316:	75 62                	jne    c001637a <KeLoadELFProgramHeaders(unsigned char*, bool, unsigned long)+0x9f>
c0016318:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
c001631b:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0016320:	8b 70 08             	mov    esi,DWORD PTR [eax+0x8]
c0016323:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c0016326:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001632a:	75 22                	jne    c001634e <KeLoadELFProgramHeaders(unsigned char*, bool, unsigned long)+0x73>
c001632c:	83 ec 0c             	sub    esp,0xc
c001632f:	01 f3                	add    ebx,esi
c0016331:	68 bc c0 02 c0       	push   0xc002c0bc
c0016336:	e8 25 a2 ff ff       	call   c0010560 <KePanic(char const*)>
c001633b:	03 5c 24 18          	add    ebx,DWORD PTR [esp+0x18]
c001633f:	83 c4 10             	add    esp,0x10
c0016342:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c0016345:	0f 43 1c 24          	cmovae ebx,DWORD PTR [esp]
c0016349:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001634c:	eb 2c                	jmp    c001637a <KeLoadELFProgramHeaders(unsigned char*, bool, unsigned long)+0x9f>
c001634e:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0016352:	89 d9                	mov    ecx,ebx
c0016354:	2b 54 24 04          	sub    edx,DWORD PTR [esp+0x4]
c0016358:	01 f2                	add    edx,esi
c001635a:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001635e:	03 70 04             	add    esi,DWORD PTR [eax+0x4]
c0016361:	89 d7                	mov    edi,edx
c0016363:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016365:	50                   	push   eax
c0016366:	01 da                	add    edx,ebx
c0016368:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001636c:	29 d8                	sub    eax,ebx
c001636e:	50                   	push   eax
c001636f:	6a 00                	push   0x0
c0016371:	52                   	push   edx
c0016372:	e8 79 a1 fe ff       	call   c00004f0 <memset>
c0016377:	83 c4 10             	add    esp,0x10
c001637a:	45                   	inc    ebp
c001637b:	e9 7b ff ff ff       	jmp    c00162fb <KeLoadELFProgramHeaders(unsigned char*, bool, unsigned long)+0x20>
c0016380:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0016383:	83 c4 1c             	add    esp,0x1c
c0016386:	5b                   	pop    ebx
c0016387:	5e                   	pop    esi
c0016388:	5f                   	pop    edi
c0016389:	5d                   	pop    ebp
c001638a:	c3                   	ret    

c001638b <KeGetELFSymbolValue(unsigned char*, int, int, bool*, unsigned long, unsigned long)>:
c001638b:	57                   	push   edi
c001638c:	56                   	push   esi
c001638d:	53                   	push   ebx
c001638e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016392:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0016396:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001639a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001639e:	85 c0                	test   eax,eax
c00163a0:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00163a3:	74 04                	je     c00163a9 <KeGetELFSymbolValue(unsigned char*, int, int, bool*, unsigned long, unsigned long)+0x1e>
c00163a5:	85 db                	test   ebx,ebx
c00163a7:	75 05                	jne    c00163ae <KeGetELFSymbolValue(unsigned char*, int, int, bool*, unsigned long, unsigned long)+0x23>
c00163a9:	c6 06 01             	mov    BYTE PTR [esi],0x1
c00163ac:	eb 5c                	jmp    c001640a <KeGetELFSymbolValue(unsigned char*, int, int, bool*, unsigned long, unsigned long)+0x7f>
c00163ae:	50                   	push   eax
c00163af:	51                   	push   ecx
c00163b0:	e8 e3 fe ff ff       	call   c0016298 <KeGetELFSectionHeader(unsigned char*, int)>
c00163b5:	5f                   	pop    edi
c00163b6:	5a                   	pop    edx
c00163b7:	31 d2                	xor    edx,edx
c00163b9:	89 c7                	mov    edi,eax
c00163bb:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00163be:	f7 77 24             	div    DWORD PTR [edi+0x24]
c00163c1:	39 c3                	cmp    ebx,eax
c00163c3:	73 e4                	jae    c00163a9 <KeGetELFSymbolValue(unsigned char*, int, int, bool*, unsigned long, unsigned long)+0x1e>
c00163c5:	c1 e3 04             	shl    ebx,0x4
c00163c8:	03 5f 10             	add    ebx,DWORD PTR [edi+0x10]
c00163cb:	01 cb                	add    ebx,ecx
c00163cd:	0f b7 53 0e          	movzx  edx,WORD PTR [ebx+0xe]
c00163d1:	85 d2                	test   edx,edx
c00163d3:	75 39                	jne    c001640e <KeGetELFSymbolValue(unsigned char*, int, int, bool*, unsigned long, unsigned long)+0x83>
c00163d5:	ff 77 18             	push   DWORD PTR [edi+0x18]
c00163d8:	51                   	push   ecx
c00163d9:	e8 ba fe ff ff       	call   c0016298 <KeGetELFSectionHeader(unsigned char*, int)>
c00163de:	52                   	push   edx
c00163df:	03 0b                	add    ecx,DWORD PTR [ebx]
c00163e1:	03 48 10             	add    ecx,DWORD PTR [eax+0x10]
c00163e4:	51                   	push   ecx
c00163e5:	e8 82 fb ff ff       	call   c0015f6c <Thr::getAddressOfKernelSymbol(char const*)>
c00163ea:	83 c4 10             	add    esp,0x10
c00163ed:	85 c0                	test   eax,eax
c00163ef:	75 32                	jne    c0016423 <KeGetELFSymbolValue(unsigned char*, int, int, bool*, unsigned long, unsigned long)+0x98>
c00163f1:	f6 43 0c 20          	test   BYTE PTR [ebx+0xc],0x20
c00163f5:	75 03                	jne    c00163fa <KeGetELFSymbolValue(unsigned char*, int, int, bool*, unsigned long, unsigned long)+0x6f>
c00163f7:	c6 06 01             	mov    BYTE PTR [esi],0x1
c00163fa:	83 ec 0c             	sub    esp,0xc
c00163fd:	68 e5 c0 02 c0       	push   0xc002c0e5
c0016402:	e8 5f 0b ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0016407:	83 c4 10             	add    esp,0x10
c001640a:	31 c0                	xor    eax,eax
c001640c:	eb 15                	jmp    c0016423 <KeGetELFSymbolValue(unsigned char*, int, int, bool*, unsigned long, unsigned long)+0x98>
c001640e:	81 fa f1 ff 00 00    	cmp    edx,0xfff1
c0016414:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0016417:	74 0a                	je     c0016423 <KeGetELFSymbolValue(unsigned char*, int, int, bool*, unsigned long, unsigned long)+0x98>
c0016419:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001641d:	2b 54 24 24          	sub    edx,DWORD PTR [esp+0x24]
c0016421:	01 d0                	add    eax,edx
c0016423:	5b                   	pop    ebx
c0016424:	5e                   	pop    esi
c0016425:	5f                   	pop    edi
c0016426:	c3                   	ret    

c0016427 <KePerformRelocation(unsigned char*, unsigned long, Elf32_Shdr*, Elf32_Rel*)>:
c0016427:	55                   	push   ebp
c0016428:	57                   	push   edi
c0016429:	56                   	push   esi
c001642a:	53                   	push   ebx
c001642b:	83 ec 1c             	sub    esp,0x1c
c001642e:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0016432:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0016436:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001643a:	8b 69 18             	mov    ebp,DWORD PTR [ecx+0x18]
c001643d:	8b 1e                	mov    ebx,DWORD PTR [esi]
c001643f:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c0016442:	29 ef                	sub    edi,ebp
c0016444:	01 fb                	add    ebx,edi
c0016446:	c1 ea 08             	shr    edx,0x8
c0016449:	74 2d                	je     c0016478 <KePerformRelocation(unsigned char*, unsigned long, Elf32_Shdr*, Elf32_Rel*)+0x51>
c001644b:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0016450:	50                   	push   eax
c0016451:	50                   	push   eax
c0016452:	55                   	push   ebp
c0016453:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016457:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c001645b:	50                   	push   eax
c001645c:	52                   	push   edx
c001645d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016461:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0016464:	51                   	push   ecx
c0016465:	e8 21 ff ff ff       	call   c001638b <KeGetELFSymbolValue(unsigned char*, int, int, bool*, unsigned long, unsigned long)>
c001646a:	83 c4 20             	add    esp,0x20
c001646d:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0016472:	74 06                	je     c001647a <KePerformRelocation(unsigned char*, unsigned long, Elf32_Shdr*, Elf32_Rel*)+0x53>
c0016474:	31 c0                	xor    eax,eax
c0016476:	eb 27                	jmp    c001649f <KePerformRelocation(unsigned char*, unsigned long, Elf32_Shdr*, Elf32_Rel*)+0x78>
c0016478:	31 c0                	xor    eax,eax
c001647a:	0f b6 56 04          	movzx  edx,BYTE PTR [esi+0x4]
c001647e:	83 fa 01             	cmp    edx,0x1
c0016481:	75 04                	jne    c0016487 <KePerformRelocation(unsigned char*, unsigned long, Elf32_Shdr*, Elf32_Rel*)+0x60>
c0016483:	01 03                	add    DWORD PTR [ebx],eax
c0016485:	eb 16                	jmp    c001649d <KePerformRelocation(unsigned char*, unsigned long, Elf32_Shdr*, Elf32_Rel*)+0x76>
c0016487:	83 fa 02             	cmp    edx,0x2
c001648a:	75 08                	jne    c0016494 <KePerformRelocation(unsigned char*, unsigned long, Elf32_Shdr*, Elf32_Rel*)+0x6d>
c001648c:	03 03                	add    eax,DWORD PTR [ebx]
c001648e:	29 d8                	sub    eax,ebx
c0016490:	89 03                	mov    DWORD PTR [ebx],eax
c0016492:	eb 09                	jmp    c001649d <KePerformRelocation(unsigned char*, unsigned long, Elf32_Shdr*, Elf32_Rel*)+0x76>
c0016494:	31 c0                	xor    eax,eax
c0016496:	83 fa 08             	cmp    edx,0x8
c0016499:	75 04                	jne    c001649f <KePerformRelocation(unsigned char*, unsigned long, Elf32_Shdr*, Elf32_Rel*)+0x78>
c001649b:	01 3b                	add    DWORD PTR [ebx],edi
c001649d:	b0 01                	mov    al,0x1
c001649f:	83 c4 1c             	add    esp,0x1c
c00164a2:	5b                   	pop    ebx
c00164a3:	5e                   	pop    esi
c00164a4:	5f                   	pop    edi
c00164a5:	5d                   	pop    ebp
c00164a6:	c3                   	ret    

c00164a7 <KePerformRelocations(unsigned char*, unsigned long)>:
c00164a7:	55                   	push   ebp
c00164a8:	31 ed                	xor    ebp,ebp
c00164aa:	57                   	push   edi
c00164ab:	56                   	push   esi
c00164ac:	53                   	push   ebx
c00164ad:	83 ec 1c             	sub    esp,0x1c
c00164b0:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00164b4:	0f b7 46 30          	movzx  eax,WORD PTR [esi+0x30]
c00164b8:	39 e8                	cmp    eax,ebp
c00164ba:	0f 8e 92 00 00 00    	jle    c0016552 <KePerformRelocations(unsigned char*, unsigned long)+0xab>
c00164c0:	55                   	push   ebp
c00164c1:	56                   	push   esi
c00164c2:	e8 d1 fd ff ff       	call   c0016298 <KeGetELFSectionHeader(unsigned char*, int)>
c00164c7:	5a                   	pop    edx
c00164c8:	59                   	pop    ecx
c00164c9:	89 c3                	mov    ebx,eax
c00164cb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00164ce:	83 f8 09             	cmp    eax,0x9
c00164d1:	75 64                	jne    c0016537 <KePerformRelocations(unsigned char*, unsigned long)+0x90>
c00164d3:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00164d6:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c00164d9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00164dd:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00164e0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00164e4:	ff 33                	push   DWORD PTR [ebx]
c00164e6:	56                   	push   esi
c00164e7:	e8 cc fd ff ff       	call   c00162b8 <KeLookupELFString(unsigned char*, int)>
c00164ec:	68 06 c1 02 c0       	push   0xc002c106
c00164f1:	50                   	push   eax
c00164f2:	e8 89 a2 fe ff       	call   c0000780 <strcmp>
c00164f7:	83 c4 10             	add    esp,0x10
c00164fa:	85 c0                	test   eax,eax
c00164fc:	89 c1                	mov    ecx,eax
c00164fe:	75 4c                	jne    c001654c <KePerformRelocations(unsigned char*, unsigned long)+0xa5>
c0016500:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016504:	31 d2                	xor    edx,edx
c0016506:	01 f7                	add    edi,esi
c0016508:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001650c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016510:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0016514:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0016518:	7d 32                	jge    c001654c <KePerformRelocations(unsigned char*, unsigned long)+0xa5>
c001651a:	57                   	push   edi
c001651b:	83 c7 08             	add    edi,0x8
c001651e:	53                   	push   ebx
c001651f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0016523:	56                   	push   esi
c0016524:	e8 fe fe ff ff       	call   c0016427 <KePerformRelocation(unsigned char*, unsigned long, Elf32_Shdr*, Elf32_Rel*)>
c0016529:	83 c4 10             	add    esp,0x10
c001652c:	84 c0                	test   al,al
c001652e:	74 24                	je     c0016554 <KePerformRelocations(unsigned char*, unsigned long)+0xad>
c0016530:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016534:	41                   	inc    ecx
c0016535:	eb d9                	jmp    c0016510 <KePerformRelocations(unsigned char*, unsigned long)+0x69>
c0016537:	83 f8 04             	cmp    eax,0x4
c001653a:	75 10                	jne    c001654c <KePerformRelocations(unsigned char*, unsigned long)+0xa5>
c001653c:	83 ec 0c             	sub    esp,0xc
c001653f:	68 0f c1 02 c0       	push   0xc002c10f
c0016544:	e8 17 a0 ff ff       	call   c0010560 <KePanic(char const*)>
c0016549:	83 c4 10             	add    esp,0x10
c001654c:	45                   	inc    ebp
c001654d:	e9 62 ff ff ff       	jmp    c00164b4 <KePerformRelocations(unsigned char*, unsigned long)+0xd>
c0016552:	b0 01                	mov    al,0x1
c0016554:	83 c4 1c             	add    esp,0x1c
c0016557:	5b                   	pop    ebx
c0016558:	5e                   	pop    esi
c0016559:	5f                   	pop    edi
c001655a:	5d                   	pop    ebp
c001655b:	c3                   	ret    

c001655c <KeLoadELF(unsigned char*, bool, unsigned long)>:
c001655c:	57                   	push   edi
c001655d:	56                   	push   esi
c001655e:	53                   	push   ebx
c001655f:	83 ec 10             	sub    esp,0x10
c0016562:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0016566:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001656a:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001656e:	53                   	push   ebx
c001656f:	e8 05 fd ff ff       	call   c0016279 <KeIsELFValid(Elf32_Ehdr*)>
c0016574:	59                   	pop    ecx
c0016575:	84 c0                	test   al,al
c0016577:	75 04                	jne    c001657d <KeLoadELF(unsigned char*, bool, unsigned long)+0x21>
c0016579:	31 c0                	xor    eax,eax
c001657b:	eb 4d                	jmp    c00165ca <KeLoadELF(unsigned char*, bool, unsigned long)+0x6e>
c001657d:	81 e6 ff 00 00 00    	and    esi,0xff
c0016583:	74 07                	je     c001658c <KeLoadELF(unsigned char*, bool, unsigned long)+0x30>
c0016585:	66 83 7b 30 00       	cmp    WORD PTR [ebx+0x30],0x0
c001658a:	74 ed                	je     c0016579 <KeLoadELF(unsigned char*, bool, unsigned long)+0x1d>
c001658c:	66 83 7b 2c 00       	cmp    WORD PTR [ebx+0x2c],0x0
c0016591:	74 e6                	je     c0016579 <KeLoadELF(unsigned char*, bool, unsigned long)+0x1d>
c0016593:	52                   	push   edx
c0016594:	57                   	push   edi
c0016595:	56                   	push   esi
c0016596:	53                   	push   ebx
c0016597:	e8 3f fd ff ff       	call   c00162db <KeLoadELFProgramHeaders(unsigned char*, bool, unsigned long)>
c001659c:	59                   	pop    ecx
c001659d:	5a                   	pop    edx
c001659e:	50                   	push   eax
c001659f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00165a3:	68 30 c1 02 c0       	push   0xc002c130
c00165a8:	e8 b9 09 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00165ad:	83 c4 10             	add    esp,0x10
c00165b0:	85 f6                	test   esi,esi
c00165b2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00165b6:	74 12                	je     c00165ca <KeLoadELF(unsigned char*, bool, unsigned long)+0x6e>
c00165b8:	50                   	push   eax
c00165b9:	50                   	push   eax
c00165ba:	57                   	push   edi
c00165bb:	53                   	push   ebx
c00165bc:	e8 e6 fe ff ff       	call   c00164a7 <KePerformRelocations(unsigned char*, unsigned long)>
c00165c1:	83 c4 10             	add    esp,0x10
c00165c4:	84 c0                	test   al,al
c00165c6:	74 b1                	je     c0016579 <KeLoadELF(unsigned char*, bool, unsigned long)+0x1d>
c00165c8:	89 f8                	mov    eax,edi
c00165ca:	83 c4 10             	add    esp,0x10
c00165cd:	5b                   	pop    ebx
c00165ce:	5e                   	pop    esi
c00165cf:	5f                   	pop    edi
c00165d0:	c3                   	ret    

c00165d1 <KeLoadDriver(char const*)>:
c00165d1:	55                   	push   ebp
c00165d2:	57                   	push   edi
c00165d3:	56                   	push   esi
c00165d4:	53                   	push   ebx
c00165d5:	83 ec 34             	sub    esp,0x34
c00165d8:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c00165dc:	57                   	push   edi
c00165dd:	68 54 c1 02 c0       	push   0xc002c154
c00165e2:	e8 7f 09 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00165e7:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00165ee:	e8 19 9b ff ff       	call   c001010c <malloc>
c00165f3:	83 c4 0c             	add    esp,0xc
c00165f6:	ff 35 58 63 03 c0    	push   DWORD PTR ds:0xc0036358
c00165fc:	57                   	push   edi
c00165fd:	50                   	push   eax
c00165fe:	89 c6                	mov    esi,eax
c0016600:	e8 ad 25 ff ff       	call   c0008bb2 <File::File(char const*, Process*)>
c0016605:	83 c4 10             	add    esp,0x10
c0016608:	85 f6                	test   esi,esi
c001660a:	0f 84 20 01 00 00    	je     c0016730 <KeLoadDriver(char const*)+0x15f>
c0016610:	50                   	push   eax
c0016611:	8d 44 24 17          	lea    eax,[esp+0x17]
c0016615:	50                   	push   eax
c0016616:	8d 44 24 20          	lea    eax,[esp+0x20]
c001661a:	50                   	push   eax
c001661b:	56                   	push   esi
c001661c:	e8 b1 28 ff ff       	call   c0008ed2 <File::stat(unsigned long long*, bool*)>
c0016621:	83 c4 10             	add    esp,0x10
c0016624:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c0016629:	0f 85 01 01 00 00    	jne    c0016730 <KeLoadDriver(char const*)+0x15f>
c001662f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0016633:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016637:	89 d1                	mov    ecx,edx
c0016639:	09 c1                	or     ecx,eax
c001663b:	0f 84 ef 00 00 00    	je     c0016730 <KeLoadDriver(char const*)+0x15f>
c0016641:	05 ff 0f 00 00       	add    eax,0xfff
c0016646:	51                   	push   ecx
c0016647:	83 d2 00             	adc    edx,0x0
c001664a:	0f ac d0 0c          	shrd   eax,edx,0xc
c001664e:	6a 03                	push   0x3
c0016650:	50                   	push   eax
c0016651:	ff 35 90 62 03 c0    	push   DWORD PTR ds:0xc0036290
c0016657:	e8 2c dc ff ff       	call   c0014288 <VAS::allocatePages(int, int)>
c001665c:	83 c4 0c             	add    esp,0xc
c001665f:	50                   	push   eax
c0016660:	89 c3                	mov    ebx,eax
c0016662:	57                   	push   edi
c0016663:	68 6a c1 02 c0       	push   0xc002c16a
c0016668:	e8 f9 08 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001666d:	5f                   	pop    edi
c001666e:	5d                   	pop    ebp
c001666f:	6a 01                	push   0x1
c0016671:	56                   	push   esi
c0016672:	e8 59 25 ff ff       	call   c0008bd0 <File::open(FileOpenMode)>
c0016677:	83 c4 10             	add    esp,0x10
c001667a:	85 c0                	test   eax,eax
c001667c:	74 11                	je     c001668f <KeLoadDriver(char const*)+0xbe>
c001667e:	8b 06                	mov    eax,DWORD PTR [esi]
c0016680:	83 ec 0c             	sub    esp,0xc
c0016683:	56                   	push   esi
c0016684:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016687:	83 c4 10             	add    esp,0x10
c001668a:	e9 a1 00 00 00       	jmp    c0016730 <KeLoadDriver(char const*)+0x15f>
c001668f:	83 ec 0c             	sub    esp,0xc
c0016692:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0016696:	e8 71 9a ff ff       	call   c001010c <malloc>
c001669b:	5d                   	pop    ebp
c001669c:	31 ed                	xor    ebp,ebp
c001669e:	8d 54 24 20          	lea    edx,[esp+0x20]
c00166a2:	89 c7                	mov    edi,eax
c00166a4:	8b 06                	mov    eax,DWORD PTR [esi]
c00166a6:	52                   	push   edx
c00166a7:	57                   	push   edi
c00166a8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00166ac:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00166b0:	56                   	push   esi
c00166b1:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00166b4:	83 c4 14             	add    esp,0x14
c00166b7:	56                   	push   esi
c00166b8:	e8 71 25 ff ff       	call   c0008c2e <File::close()>
c00166bd:	83 c4 0c             	add    esp,0xc
c00166c0:	53                   	push   ebx
c00166c1:	6a 01                	push   0x1
c00166c3:	57                   	push   edi
c00166c4:	e8 93 fe ff ff       	call   c001655c <KeLoadELF(unsigned char*, bool, unsigned long)>
c00166c9:	83 c4 10             	add    esp,0x10
c00166cc:	89 c6                	mov    esi,eax
c00166ce:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00166d2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00166d6:	05 ff 0f 00 00       	add    eax,0xfff
c00166db:	83 d2 00             	adc    edx,0x0
c00166de:	0f ac d0 0c          	shrd   eax,edx,0xc
c00166e2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00166e6:	c1 ea 0c             	shr    edx,0xc
c00166e9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00166ed:	ba 00 00 00 00       	mov    edx,0x0
c00166f2:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00166f6:	89 d0                	mov    eax,edx
c00166f8:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00166fc:	73 34                	jae    c0016732 <KeLoadDriver(char const*)+0x161>
c00166fe:	50                   	push   eax
c00166ff:	50                   	push   eax
c0016700:	89 e8                	mov    eax,ebp
c0016702:	c1 e0 0c             	shl    eax,0xc
c0016705:	01 d8                	add    eax,ebx
c0016707:	50                   	push   eax
c0016708:	ff 35 90 62 03 c0    	push   DWORD PTR ds:0xc0036290
c001670e:	e8 73 d6 ff ff       	call   c0013d86 <VAS::getPageTableEntry(unsigned long)>
c0016713:	83 c4 10             	add    esp,0x10
c0016716:	8b 00                	mov    eax,DWORD PTR [eax]
c0016718:	a8 60                	test   al,0x60
c001671a:	75 11                	jne    c001672d <KeLoadDriver(char const*)+0x15c>
c001671c:	83 ec 0c             	sub    esp,0xc
c001671f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0016724:	50                   	push   eax
c0016725:	e8 c7 9f ff ff       	call   c00106f1 <Phys::freePage(unsigned long)>
c001672a:	83 c4 10             	add    esp,0x10
c001672d:	45                   	inc    ebp
c001672e:	eb 9e                	jmp    c00166ce <KeLoadDriver(char const*)+0xfd>
c0016730:	31 f6                	xor    esi,esi
c0016732:	83 c4 2c             	add    esp,0x2c
c0016735:	89 f0                	mov    eax,esi
c0016737:	5b                   	pop    ebx
c0016738:	5e                   	pop    esi
c0016739:	5f                   	pop    edi
c001673a:	5d                   	pop    ebp
c001673b:	c3                   	ret    

c001673c <KeExecuteDriver(unsigned long, void*)>:
c001673c:	56                   	push   esi
c001673d:	53                   	push   ebx
c001673e:	51                   	push   ecx
c001673f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016743:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0016747:	85 db                	test   ebx,ebx
c0016749:	75 10                	jne    c001675b <KeExecuteDriver(unsigned long, void*)+0x1f>
c001674b:	83 ec 0c             	sub    esp,0xc
c001674e:	68 76 c1 02 c0       	push   0xc002c176
c0016753:	e8 08 9e ff ff       	call   c0010560 <KePanic(char const*)>
c0016758:	83 c4 10             	add    esp,0x10
c001675b:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001675f:	89 d8                	mov    eax,ebx
c0016761:	5a                   	pop    edx
c0016762:	5b                   	pop    ebx
c0016763:	5e                   	pop    esi
c0016764:	ff e0                	jmp    eax

c0016766 <KeLoadAndExecuteDriver(char const*, void*, bool)>:
c0016766:	57                   	push   edi
c0016767:	56                   	push   esi
c0016768:	53                   	push   ebx
c0016769:	81 ec 0c 01 00 00    	sub    esp,0x10c
c001676f:	8b b4 24 1c 01 00 00 	mov    esi,DWORD PTR [esp+0x11c]
c0016776:	8b bc 24 24 01 00 00 	mov    edi,DWORD PTR [esp+0x124]
c001677d:	56                   	push   esi
c001677e:	e8 4e fe ff ff       	call   c00165d1 <KeLoadDriver(char const*)>
c0016783:	83 c4 10             	add    esp,0x10
c0016786:	85 c0                	test   eax,eax
c0016788:	74 16                	je     c00167a0 <KeLoadAndExecuteDriver(char const*, void*, bool)+0x3a>
c001678a:	53                   	push   ebx
c001678b:	53                   	push   ebx
c001678c:	b3 01                	mov    bl,0x1
c001678e:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c0016795:	50                   	push   eax
c0016796:	e8 a1 ff ff ff       	call   c001673c <KeExecuteDriver(unsigned long, void*)>
c001679b:	83 c4 10             	add    esp,0x10
c001679e:	eb 2d                	jmp    c00167cd <KeLoadAndExecuteDriver(char const*, void*, bool)+0x67>
c00167a0:	89 fb                	mov    ebx,edi
c00167a2:	84 db                	test   bl,bl
c00167a4:	74 27                	je     c00167cd <KeLoadAndExecuteDriver(char const*, void*, bool)+0x67>
c00167a6:	50                   	push   eax
c00167a7:	50                   	push   eax
c00167a8:	68 a0 c1 02 c0       	push   0xc002c1a0
c00167ad:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00167b1:	53                   	push   ebx
c00167b2:	e8 99 9e fe ff       	call   c0000650 <strcpy>
c00167b7:	5a                   	pop    edx
c00167b8:	59                   	pop    ecx
c00167b9:	56                   	push   esi
c00167ba:	53                   	push   ebx
c00167bb:	e8 b0 a0 fe ff       	call   c0000870 <strcat>
c00167c0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00167c3:	31 db                	xor    ebx,ebx
c00167c5:	e8 96 9d ff ff       	call   c0010560 <KePanic(char const*)>
c00167ca:	83 c4 10             	add    esp,0x10
c00167cd:	81 c4 00 01 00 00    	add    esp,0x100
c00167d3:	88 d8                	mov    al,bl
c00167d5:	5b                   	pop    ebx
c00167d6:	5e                   	pop    esi
c00167d7:	5f                   	pop    edi
c00167d8:	c3                   	ret    

c00167d9 <KeProcessExec(Process*, char const*)>:
c00167d9:	56                   	push   esi
c00167da:	53                   	push   ebx
c00167db:	83 ec 04             	sub    esp,0x4
c00167de:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00167e2:	8b b3 b2 05 00 00    	mov    esi,DWORD PTR [ebx+0x5b2]
c00167e8:	85 f6                	test   esi,esi
c00167ea:	74 16                	je     c0016802 <KeProcessExec(Process*, char const*)+0x29>
c00167ec:	83 ec 0c             	sub    esp,0xc
c00167ef:	56                   	push   esi
c00167f0:	e8 23 d8 ff ff       	call   c0014018 <VAS::~VAS()>
c00167f5:	58                   	pop    eax
c00167f6:	5a                   	pop    edx
c00167f7:	6a 14                	push   0x14
c00167f9:	56                   	push   esi
c00167fa:	e8 0d 75 ff ff       	call   c000dd0c <operator delete(void*, unsigned long)>
c00167ff:	83 c4 10             	add    esp,0x10
c0016802:	83 ec 0c             	sub    esp,0xc
c0016805:	6a 14                	push   0x14
c0016807:	e8 00 99 ff ff       	call   c001010c <malloc>
c001680c:	89 c6                	mov    esi,eax
c001680e:	58                   	pop    eax
c001680f:	5a                   	pop    edx
c0016810:	6a 00                	push   0x0
c0016812:	56                   	push   esi
c0016813:	e8 ac dc ff ff       	call   c00144c4 <VAS::VAS(bool)>
c0016818:	89 b3 b2 05 00 00    	mov    DWORD PTR [ebx+0x5b2],esi
c001681e:	59                   	pop    ecx
c001681f:	5e                   	pop    esi
c0016820:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016824:	50                   	push   eax
c0016825:	53                   	push   ebx
c0016826:	e8 8d f4 ff ff       	call   c0015cb8 <Thr::loadProgramIntoMemory(Process*, char const*)>
c001682b:	83 c4 14             	add    esp,0x14
c001682e:	31 c0                	xor    eax,eax
c0016830:	5b                   	pop    ebx
c0016831:	5e                   	pop    esi
c0016832:	c3                   	ret    
c0016833:	90                   	nop

c0016834 <userModeEntryPoint(void*)>:
c0016834:	f0 83 2d 30 63 03 c0 01 	lock sub DWORD PTR ds:0xc0036330,0x1
c001683c:	a1 30 63 03 c0       	mov    eax,ds:0xc0036330
c0016841:	85 c0                	test   eax,eax
c0016843:	75 03                	jne    c0016848 <userModeEntryPoint(void*)+0x14>
c0016845:	fb                   	sti    
c0016846:	66 90                	xchg   ax,ax
c0016848:	fb                   	sti    
c0016849:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001684e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016851:	8b 80 ae 05 00 00    	mov    eax,DWORD PTR [eax+0x5ae]
c0016857:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001685b:	e9 df 99 fe ff       	jmp    c000023f <goToUsermode>

c0016860 <changeTSS>:
c0016860:	83 ec 14             	sub    esp,0x14
c0016863:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016868:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001686b:	b8 00 00 e8 01       	mov    eax,0x1e80000
c0016870:	c1 e2 15             	shl    edx,0x15
c0016873:	29 d0                	sub    eax,edx
c0016875:	50                   	push   eax
c0016876:	a1 08 61 03 c0       	mov    eax,ds:0xc0036108
c001687b:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016881:	05 68 11 00 00       	add    eax,0x1168
c0016886:	50                   	push   eax
c0016887:	e8 dc ca ff ff       	call   c0013368 <TSS::setESP(unsigned long)>
c001688c:	83 c4 1c             	add    esp,0x1c
c001688f:	c3                   	ret    

c0016890 <switchToThread(ThreadControlBlock*)>:
c0016890:	57                   	push   edi
c0016891:	8b 0d 2c 63 03 c0    	mov    ecx,DWORD PTR ds:0xc003632c
c0016897:	56                   	push   esi
c0016898:	53                   	push   ebx
c0016899:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001689d:	85 c9                	test   ecx,ecx
c001689f:	0f 85 9b 00 00 00    	jne    c0016940 <switchToThread(ThreadControlBlock*)+0xb0>
c00168a5:	0f b6 53 44          	movzx  edx,BYTE PTR [ebx+0x44]
c00168a9:	81 fa ff 00 00 00    	cmp    edx,0xff
c00168af:	0f 84 87 00 00 00    	je     c001693c <switchToThread(ThreadControlBlock*)+0xac>
c00168b5:	b8 00 04 00 00       	mov    eax,0x400
c00168ba:	29 d0                	sub    eax,edx
c00168bc:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00168bf:	d1 f8                	sar    eax,1
c00168c1:	01 d0                	add    eax,edx
c00168c3:	90                   	nop
c00168c4:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00168c7:	e8 0d 49 00 00       	call   c001b1d9 <HalQueryPerformanceCounter()>
c00168cc:	a3 70 63 03 c0       	mov    ds:0xc0036370,eax
c00168d1:	89 c6                	mov    esi,eax
c00168d3:	89 d7                	mov    edi,edx
c00168d5:	2b 35 60 63 03 c0    	sub    esi,DWORD PTR ds:0xc0036360
c00168db:	a3 60 63 03 c0       	mov    ds:0xc0036360,eax
c00168e0:	1b 3d 64 63 03 c0    	sbb    edi,DWORD PTR ds:0xc0036364
c00168e6:	89 35 68 63 03 c0    	mov    DWORD PTR ds:0xc0036368,esi
c00168ec:	89 15 74 63 03 c0    	mov    DWORD PTR ds:0xc0036374,edx
c00168f2:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00168f8:	89 15 64 63 03 c0    	mov    DWORD PTR ds:0xc0036364,edx
c00168fe:	89 3d 6c 63 03 c0    	mov    DWORD PTR ds:0xc003636c,edi
c0016904:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c0016907:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c001690a:	01 c6                	add    esi,eax
c001690c:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c001690f:	11 d7                	adc    edi,edx
c0016911:	83 ec 0c             	sub    esp,0xc
c0016914:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c0016917:	53                   	push   ebx
c0016918:	e8 5a 99 fe ff       	call   c0000277 <switchToThreadASM>
c001691d:	0f 20 c0             	mov    eax,cr0
c0016920:	83 c8 08             	or     eax,0x8
c0016923:	0f 22 c0             	mov    cr0,eax
c0016926:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001692b:	83 c4 10             	add    esp,0x10
c001692e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016932:	5b                   	pop    ebx
c0016933:	5e                   	pop    esi
c0016934:	5f                   	pop    edi
c0016935:	e9 02 f0 ff ff       	jmp    c001593c <KeCheckAlarm(ThreadControlBlock*)>
c001693a:	66 90                	xchg   ax,ax
c001693c:	31 c0                	xor    eax,eax
c001693e:	eb 84                	jmp    c00168c4 <switchToThread(ThreadControlBlock*)+0x34>
c0016940:	5b                   	pop    ebx
c0016941:	c7 05 28 63 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0036328,0x1
c001694b:	5e                   	pop    esi
c001694c:	5f                   	pop    edi
c001694d:	c3                   	ret    
c001694e:	66 90                	xchg   ax,ax

c0016950 <Process::addArgs(char**)>:
c0016950:	57                   	push   edi
c0016951:	56                   	push   esi
c0016952:	53                   	push   ebx
c0016953:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0016957:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001695b:	85 f6                	test   esi,esi
c001695d:	c7 87 b6 05 00 00 00 00 00 00 	mov    DWORD PTR [edi+0x5b6],0x0
c0016967:	74 4f                	je     c00169b8 <Process::addArgs(char**)+0x68>
c0016969:	8b 06                	mov    eax,DWORD PTR [esi]
c001696b:	85 c0                	test   eax,eax
c001696d:	74 49                	je     c00169b8 <Process::addArgs(char**)+0x68>
c001696f:	31 db                	xor    ebx,ebx
c0016971:	8d 76 00             	lea    esi,[esi+0x0]
c0016974:	83 ec 0c             	sub    esp,0xc
c0016977:	50                   	push   eax
c0016978:	e8 03 9c fe ff       	call   c0000580 <strlen>
c001697d:	83 c0 01             	add    eax,0x1
c0016980:	89 04 24             	mov    DWORD PTR [esp],eax
c0016983:	e8 84 97 ff ff       	call   c001010c <malloc>
c0016988:	89 84 9f ba 05 00 00 	mov    DWORD PTR [edi+ebx*4+0x5ba],eax
c001698f:	5a                   	pop    edx
c0016990:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c0016993:	83 c3 01             	add    ebx,0x1
c0016996:	59                   	pop    ecx
c0016997:	52                   	push   edx
c0016998:	50                   	push   eax
c0016999:	e8 b2 9c fe ff       	call   c0000650 <strcpy>
c001699e:	8b 8f b6 05 00 00    	mov    ecx,DWORD PTR [edi+0x5b6]
c00169a4:	83 c4 10             	add    esp,0x10
c00169a7:	83 c1 01             	add    ecx,0x1
c00169aa:	89 8f b6 05 00 00    	mov    DWORD PTR [edi+0x5b6],ecx
c00169b0:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c00169b3:	85 c0                	test   eax,eax
c00169b5:	75 bd                	jne    c0016974 <Process::addArgs(char**)+0x24>
c00169b7:	90                   	nop
c00169b8:	5b                   	pop    ebx
c00169b9:	5e                   	pop    esi
c00169ba:	5f                   	pop    edi
c00169bb:	c3                   	ret    

c00169bc <Process::Process(char const*, Process*, char**)>:
c00169bc:	56                   	push   esi
c00169bd:	53                   	push   ebx
c00169be:	83 ec 14             	sub    esp,0x14
c00169c1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00169c5:	05 0c 02 00 00       	add    eax,0x20c
c00169ca:	bb 07 00 00 00       	mov    ebx,0x7
c00169cf:	89 c6                	mov    esi,eax
c00169d1:	8d 76 00             	lea    esi,[esi+0x0]
c00169d4:	85 db                	test   ebx,ebx
c00169d6:	78 14                	js     c00169ec <Process::Process(char const*, Process*, char**)+0x30>
c00169d8:	83 ec 0c             	sub    esp,0xc
c00169db:	56                   	push   esi
c00169dc:	e8 77 29 01 00       	call   c0029358 <ThreadControlBlock::ThreadControlBlock()>
c00169e1:	83 c4 10             	add    esp,0x10
c00169e4:	83 c6 73             	add    esi,0x73
c00169e7:	83 eb 01             	sub    ebx,0x1
c00169ea:	eb e8                	jmp    c00169d4 <Process::Process(char const*, Process*, char**)+0x18>
c00169ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00169f0:	c6 80 be 07 00 00 00 	mov    BYTE PTR [eax+0x7be],0x0
c00169f7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00169fb:	c6 80 bf 07 00 00 00 	mov    BYTE PTR [eax+0x7bf],0x0
c0016a02:	83 ec 0c             	sub    esp,0xc
c0016a05:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016a09:	e8 2e 85 ff ff       	call   c000ef3c <KeNewProcessEnv(Process*)>
c0016a0e:	83 c4 10             	add    esp,0x10
c0016a11:	89 c2                	mov    edx,eax
c0016a13:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a17:	89 90 ba 07 00 00    	mov    DWORD PTR [eax+0x7ba],edx
c0016a1d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a21:	66 c7 80 a4 05 00 00 00 00 	mov    WORD PTR [eax+0x5a4],0x0
c0016a2a:	a1 3c fd 02 c0       	mov    eax,ds:0xc002fd3c
c0016a2f:	8d 50 01             	lea    edx,[eax+0x1]
c0016a32:	89 15 3c fd 02 c0    	mov    DWORD PTR ds:0xc002fd3c,edx
c0016a38:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016a3c:	89 02                	mov    DWORD PTR [edx],eax
c0016a3e:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c0016a46:	83 ec 0c             	sub    esp,0xc
c0016a49:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016a4d:	e8 ba 96 ff ff       	call   c001010c <malloc>
c0016a52:	83 c4 10             	add    esp,0x10
c0016a55:	89 c3                	mov    ebx,eax
c0016a57:	83 ec 08             	sub    esp,0x8
c0016a5a:	6a 00                	push   0x0
c0016a5c:	53                   	push   ebx
c0016a5d:	e8 62 da ff ff       	call   c00144c4 <VAS::VAS(bool)>
c0016a62:	83 c4 10             	add    esp,0x10
c0016a65:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a69:	89 98 b2 05 00 00    	mov    DWORD PTR [eax+0x5b2],ebx
c0016a6f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a73:	c7 80 b6 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x5b6],0x0
c0016a7d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a81:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016a85:	89 90 aa 05 00 00    	mov    DWORD PTR [eax+0x5aa],edx
c0016a8b:	e8 37 ac ff ff       	call   c00116c7 <KeInitSignals()>
c0016a90:	89 c2                	mov    edx,eax
c0016a92:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a96:	89 90 c0 07 00 00    	mov    DWORD PTR [eax+0x7c0],edx
c0016a9c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016aa0:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c0016aa6:	85 c0                	test   eax,eax
c0016aa8:	74 42                	je     c0016aec <Process::Process(char const*, Process*, char**)+0x130>
c0016aaa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016aae:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c0016ab4:	8b 90 a6 05 00 00    	mov    edx,DWORD PTR [eax+0x5a6]
c0016aba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016abe:	89 90 a6 05 00 00    	mov    DWORD PTR [eax+0x5a6],edx
c0016ac4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ac8:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c0016ace:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0016ad4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ad8:	05 0c 01 00 00       	add    eax,0x10c
c0016add:	83 ec 08             	sub    esp,0x8
c0016ae0:	52                   	push   edx
c0016ae1:	50                   	push   eax
c0016ae2:	e8 69 9b fe ff       	call   c0000650 <strcpy>
c0016ae7:	83 c4 10             	add    esp,0x10
c0016aea:	eb 7c                	jmp    c0016b68 <Process::Process(char const*, Process*, char**)+0x1ac>
c0016aec:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c0016af4:	83 ec 0c             	sub    esp,0xc
c0016af7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016afb:	e8 0c 96 ff ff       	call   c001010c <malloc>
c0016b00:	83 c4 10             	add    esp,0x10
c0016b03:	89 c3                	mov    ebx,eax
c0016b05:	83 ec 08             	sub    esp,0x8
c0016b08:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016b0c:	53                   	push   ebx
c0016b0d:	e8 76 c5 ff ff       	call   c0013088 <VgaText::VgaText(char const*)>
c0016b12:	83 c4 10             	add    esp,0x10
c0016b15:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b19:	89 98 a6 05 00 00    	mov    DWORD PTR [eax+0x5a6],ebx
c0016b1f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b23:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0016b29:	83 ec 0c             	sub    esp,0xc
c0016b2c:	50                   	push   eax
c0016b2d:	e8 bc bd ff ff       	call   c00128ee <addToTerminalCycle(VgaText*)>
c0016b32:	83 c4 10             	add    esp,0x10
c0016b35:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b39:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0016b3f:	83 ec 0c             	sub    esp,0xc
c0016b42:	50                   	push   eax
c0016b43:	e8 17 c0 ff ff       	call   c0012b5f <setActiveTerminal(VgaText*)>
c0016b48:	83 c4 10             	add    esp,0x10
c0016b4b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b4f:	05 0c 01 00 00       	add    eax,0x10c
c0016b54:	83 ec 08             	sub    esp,0x8
c0016b57:	68 b4 c1 02 c0       	push   0xc002c1b4
c0016b5c:	50                   	push   eax
c0016b5d:	e8 ee 9a fe ff       	call   c0000650 <strcpy>
c0016b62:	83 c4 10             	add    esp,0x10
c0016b65:	8d 76 00             	lea    esi,[esi+0x0]
c0016b68:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b6c:	83 c0 0c             	add    eax,0xc
c0016b6f:	83 ec 08             	sub    esp,0x8
c0016b72:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016b76:	50                   	push   eax
c0016b77:	e8 d4 9a fe ff       	call   c0000650 <strcpy>
c0016b7c:	83 c4 10             	add    esp,0x10
c0016b7f:	83 ec 08             	sub    esp,0x8
c0016b82:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0016b86:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016b8a:	e8 c1 fd ff ff       	call   c0016950 <Process::addArgs(char**)>
c0016b8f:	83 c4 10             	add    esp,0x10
c0016b92:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b96:	8a 90 76 02 00 00    	mov    dl,BYTE PTR [eax+0x276]
c0016b9c:	83 e2 7f             	and    edx,0x7f
c0016b9f:	88 90 76 02 00 00    	mov    BYTE PTR [eax+0x276],dl
c0016ba5:	83 ec 08             	sub    esp,0x8
c0016ba8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016bac:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016bb0:	e8 03 f1 ff ff       	call   c0015cb8 <Thr::loadProgramIntoMemory(Process*, char const*)>
c0016bb5:	83 c4 10             	add    esp,0x10
c0016bb8:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0016bbc:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0016bc0:	83 f0 01             	xor    eax,0x1
c0016bc3:	88 c2                	mov    dl,al
c0016bc5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016bc9:	88 90 be 07 00 00    	mov    BYTE PTR [eax+0x7be],dl
c0016bcf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016bd3:	8b 10                	mov    edx,DWORD PTR [eax]
c0016bd5:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0016bda:	52                   	push   edx
c0016bdb:	50                   	push   eax
c0016bdc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016be0:	68 20 c2 02 c0       	push   0xc002c220
c0016be5:	e8 7c 03 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0016bea:	83 c4 10             	add    esp,0x10
c0016bed:	90                   	nop
c0016bee:	83 c4 14             	add    esp,0x14
c0016bf1:	5b                   	pop    ebx
c0016bf2:	5e                   	pop    esi
c0016bf3:	c3                   	ret    

c0016bf4 <Process::Process(bool, char const*, Process*, char**)>:
c0016bf4:	56                   	push   esi
c0016bf5:	53                   	push   ebx
c0016bf6:	83 ec 24             	sub    esp,0x24
c0016bf9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016bfd:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0016c01:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016c05:	05 0c 02 00 00       	add    eax,0x20c
c0016c0a:	bb 07 00 00 00       	mov    ebx,0x7
c0016c0f:	89 c6                	mov    esi,eax
c0016c11:	8d 76 00             	lea    esi,[esi+0x0]
c0016c14:	85 db                	test   ebx,ebx
c0016c16:	78 14                	js     c0016c2c <Process::Process(bool, char const*, Process*, char**)+0x38>
c0016c18:	83 ec 0c             	sub    esp,0xc
c0016c1b:	56                   	push   esi
c0016c1c:	e8 37 27 01 00       	call   c0029358 <ThreadControlBlock::ThreadControlBlock()>
c0016c21:	83 c4 10             	add    esp,0x10
c0016c24:	83 c6 73             	add    esi,0x73
c0016c27:	83 eb 01             	sub    ebx,0x1
c0016c2a:	eb e8                	jmp    c0016c14 <Process::Process(bool, char const*, Process*, char**)+0x20>
c0016c2c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016c30:	c6 80 be 07 00 00 00 	mov    BYTE PTR [eax+0x7be],0x0
c0016c37:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016c3b:	c6 80 bf 07 00 00 00 	mov    BYTE PTR [eax+0x7bf],0x0
c0016c42:	83 ec 0c             	sub    esp,0xc
c0016c45:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0016c49:	e8 ee 82 ff ff       	call   c000ef3c <KeNewProcessEnv(Process*)>
c0016c4e:	83 c4 10             	add    esp,0x10
c0016c51:	89 c2                	mov    edx,eax
c0016c53:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016c57:	89 90 ba 07 00 00    	mov    DWORD PTR [eax+0x7ba],edx
c0016c5d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016c61:	66 c7 80 a4 05 00 00 00 00 	mov    WORD PTR [eax+0x5a4],0x0
c0016c6a:	a1 3c fd 02 c0       	mov    eax,ds:0xc002fd3c
c0016c6f:	8d 50 01             	lea    edx,[eax+0x1]
c0016c72:	89 15 3c fd 02 c0    	mov    DWORD PTR ds:0xc002fd3c,edx
c0016c78:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0016c7c:	89 02                	mov    DWORD PTR [edx],eax
c0016c7e:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c0016c86:	83 ec 0c             	sub    esp,0xc
c0016c89:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0016c8d:	e8 7a 94 ff ff       	call   c001010c <malloc>
c0016c92:	83 c4 10             	add    esp,0x10
c0016c95:	89 c3                	mov    ebx,eax
c0016c97:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0016c9c:	83 ec 08             	sub    esp,0x8
c0016c9f:	50                   	push   eax
c0016ca0:	53                   	push   ebx
c0016ca1:	e8 1e d8 ff ff       	call   c00144c4 <VAS::VAS(bool)>
c0016ca6:	83 c4 10             	add    esp,0x10
c0016ca9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016cad:	89 98 b2 05 00 00    	mov    DWORD PTR [eax+0x5b2],ebx
c0016cb3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016cb7:	c7 80 b6 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x5b6],0x0
c0016cc1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016cc5:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0016cc9:	89 90 aa 05 00 00    	mov    DWORD PTR [eax+0x5aa],edx
c0016ccf:	e8 f3 a9 ff ff       	call   c00116c7 <KeInitSignals()>
c0016cd4:	89 c2                	mov    edx,eax
c0016cd6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016cda:	89 90 c0 07 00 00    	mov    DWORD PTR [eax+0x7c0],edx
c0016ce0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016ce4:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c0016cea:	85 c0                	test   eax,eax
c0016cec:	74 42                	je     c0016d30 <Process::Process(bool, char const*, Process*, char**)+0x13c>
c0016cee:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016cf2:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c0016cf8:	8b 90 a6 05 00 00    	mov    edx,DWORD PTR [eax+0x5a6]
c0016cfe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016d02:	89 90 a6 05 00 00    	mov    DWORD PTR [eax+0x5a6],edx
c0016d08:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016d0c:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c0016d12:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0016d18:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016d1c:	05 0c 01 00 00       	add    eax,0x10c
c0016d21:	83 ec 08             	sub    esp,0x8
c0016d24:	52                   	push   edx
c0016d25:	50                   	push   eax
c0016d26:	e8 25 99 fe ff       	call   c0000650 <strcpy>
c0016d2b:	83 c4 10             	add    esp,0x10
c0016d2e:	eb 7c                	jmp    c0016dac <Process::Process(bool, char const*, Process*, char**)+0x1b8>
c0016d30:	c7 44 24 18 84 01 00 00 	mov    DWORD PTR [esp+0x18],0x184
c0016d38:	83 ec 0c             	sub    esp,0xc
c0016d3b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0016d3f:	e8 c8 93 ff ff       	call   c001010c <malloc>
c0016d44:	83 c4 10             	add    esp,0x10
c0016d47:	89 c3                	mov    ebx,eax
c0016d49:	83 ec 08             	sub    esp,0x8
c0016d4c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016d50:	53                   	push   ebx
c0016d51:	e8 32 c3 ff ff       	call   c0013088 <VgaText::VgaText(char const*)>
c0016d56:	83 c4 10             	add    esp,0x10
c0016d59:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016d5d:	89 98 a6 05 00 00    	mov    DWORD PTR [eax+0x5a6],ebx
c0016d63:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016d67:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0016d6d:	83 ec 0c             	sub    esp,0xc
c0016d70:	50                   	push   eax
c0016d71:	e8 78 bb ff ff       	call   c00128ee <addToTerminalCycle(VgaText*)>
c0016d76:	83 c4 10             	add    esp,0x10
c0016d79:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016d7d:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0016d83:	83 ec 0c             	sub    esp,0xc
c0016d86:	50                   	push   eax
c0016d87:	e8 d3 bd ff ff       	call   c0012b5f <setActiveTerminal(VgaText*)>
c0016d8c:	83 c4 10             	add    esp,0x10
c0016d8f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016d93:	05 0c 01 00 00       	add    eax,0x10c
c0016d98:	83 ec 08             	sub    esp,0x8
c0016d9b:	68 b4 c1 02 c0       	push   0xc002c1b4
c0016da0:	50                   	push   eax
c0016da1:	e8 aa 98 fe ff       	call   c0000650 <strcpy>
c0016da6:	83 c4 10             	add    esp,0x10
c0016da9:	8d 76 00             	lea    esi,[esi+0x0]
c0016dac:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016db0:	83 c0 0c             	add    eax,0xc
c0016db3:	83 ec 08             	sub    esp,0x8
c0016db6:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016dba:	50                   	push   eax
c0016dbb:	e8 90 98 fe ff       	call   c0000650 <strcpy>
c0016dc0:	83 c4 10             	add    esp,0x10
c0016dc3:	83 ec 08             	sub    esp,0x8
c0016dc6:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016dca:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0016dce:	e8 7d fb ff ff       	call   c0016950 <Process::addArgs(char**)>
c0016dd3:	83 c4 10             	add    esp,0x10
c0016dd6:	90                   	nop
c0016dd7:	83 c4 24             	add    esp,0x24
c0016dda:	5b                   	pop    ebx
c0016ddb:	5e                   	pop    esi
c0016ddc:	c3                   	ret    
c0016ddd:	8d 76 00             	lea    esi,[esi+0x0]

c0016de0 <taskStartupFunction>:
c0016de0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016de5:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0016de8:	c3                   	ret    
c0016de9:	8d 76 00             	lea    esi,[esi+0x0]

c0016dec <KeDisablePreemption()>:
c0016dec:	a1 0c 63 03 c0       	mov    eax,ds:0xc003630c
c0016df1:	85 c0                	test   eax,eax
c0016df3:	75 13                	jne    c0016e08 <KeDisablePreemption()+0x1c>
c0016df5:	8a 15 0c 61 03 c0    	mov    dl,BYTE PTR ds:0xc003610c
c0016dfb:	c6 05 0c 61 03 c0 00 	mov    BYTE PTR ds:0xc003610c,0x0
c0016e02:	88 15 08 63 03 c0    	mov    BYTE PTR ds:0xc0036308,dl
c0016e08:	83 c0 01             	add    eax,0x1
c0016e0b:	a3 0c 63 03 c0       	mov    ds:0xc003630c,eax
c0016e10:	c3                   	ret    
c0016e11:	8d 76 00             	lea    esi,[esi+0x0]

c0016e14 <KeRestorePreemption()>:
c0016e14:	a1 0c 63 03 c0       	mov    eax,ds:0xc003630c
c0016e19:	83 e8 01             	sub    eax,0x1
c0016e1c:	a3 0c 63 03 c0       	mov    ds:0xc003630c,eax
c0016e21:	75 0d                	jne    c0016e30 <KeRestorePreemption()+0x1c>
c0016e23:	a0 08 63 03 c0       	mov    al,ds:0xc0036308
c0016e28:	a2 0c 61 03 c0       	mov    ds:0xc003610c,al
c0016e2d:	8d 76 00             	lea    esi,[esi+0x0]
c0016e30:	c3                   	ret    
c0016e31:	90                   	nop
c0016e32:	66 90                	xchg   ax,ax

c0016e34 <Process::createThread(void (*)(void*), void*, int)>:
c0016e34:	55                   	push   ebp
c0016e35:	31 c9                	xor    ecx,ecx
c0016e37:	57                   	push   edi
c0016e38:	56                   	push   esi
c0016e39:	53                   	push   ebx
c0016e3a:	83 ec 0c             	sub    esp,0xc
c0016e3d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0016e41:	66 8b b3 a4 05 00 00 	mov    si,WORD PTR [ebx+0x5a4]
c0016e48:	89 f2                	mov    edx,esi
c0016e4a:	66 90                	xchg   ax,ax
c0016e4c:	0f b7 c2             	movzx  eax,dx
c0016e4f:	80 e2 01             	and    dl,0x1
c0016e52:	74 18                	je     c0016e6c <Process::createThread(void (*)(void*), void*, int)+0x38>
c0016e54:	d1 f8                	sar    eax,1
c0016e56:	83 c1 01             	add    ecx,0x1
c0016e59:	83 f9 10             	cmp    ecx,0x10
c0016e5c:	89 c2                	mov    edx,eax
c0016e5e:	75 ec                	jne    c0016e4c <Process::createThread(void (*)(void*), void*, int)+0x18>
c0016e60:	83 c4 0c             	add    esp,0xc
c0016e63:	31 db                	xor    ebx,ebx
c0016e65:	89 d8                	mov    eax,ebx
c0016e67:	5b                   	pop    ebx
c0016e68:	5e                   	pop    esi
c0016e69:	5f                   	pop    edi
c0016e6a:	5d                   	pop    ebp
c0016e6b:	c3                   	ret    
c0016e6c:	b8 01 00 00 00       	mov    eax,0x1
c0016e71:	d3 e0                	shl    eax,cl
c0016e73:	09 c6                	or     esi,eax
c0016e75:	66 89 b3 a4 05 00 00 	mov    WORD PTR [ebx+0x5a4],si
c0016e7c:	6b c1 73             	imul   eax,ecx,0x73
c0016e7f:	01 d8                	add    eax,ebx
c0016e81:	80 b8 6e 02 00 00 00 	cmp    BYTE PTR [eax+0x26e],0x0
c0016e88:	75 0a                	jne    c0016e94 <Process::createThread(void (*)(void*), void*, int)+0x60>
c0016e8a:	c7 80 65 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x265],0x0
c0016e94:	8b 83 b2 05 00 00    	mov    eax,DWORD PTR [ebx+0x5b2]
c0016e9a:	6b f9 73             	imul   edi,ecx,0x73
c0016e9d:	83 ec 0c             	sub    esp,0xc
c0016ea0:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0016ea3:	8d 04 3b             	lea    eax,[ebx+edi*1]
c0016ea6:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c0016eac:	8d b0 00 02 00 00    	lea    esi,[eax+0x200]
c0016eb2:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c0016eb8:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c0016ebf:	c7 80 44 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x244],0x0
c0016ec9:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0016ecf:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0016ed3:	c7 80 6f 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x26f],0x0
c0016edd:	c6 80 73 02 00 00 00 	mov    BYTE PTR [eax+0x273],0x0
c0016ee4:	c6 80 74 02 00 00 00 	mov    BYTE PTR [eax+0x274],0x0
c0016eeb:	89 90 51 02 00 00    	mov    DWORD PTR [eax+0x251],edx
c0016ef1:	89 ca                	mov    edx,ecx
c0016ef3:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0016ef7:	c6 80 75 02 00 00 00 	mov    BYTE PTR [eax+0x275],0x0
c0016efe:	f7 da                	neg    edx
c0016f00:	c1 e2 15             	shl    edx,0x15
c0016f03:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0016f09:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0016f0f:	8a 54 24 38          	mov    dl,BYTE PTR [esp+0x38]
c0016f13:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0016f1d:	89 88 18 02 00 00    	mov    DWORD PTR [eax+0x218],ecx
c0016f23:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0016f2d:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c0016f33:	8a 90 76 02 00 00    	mov    dl,BYTE PTR [eax+0x276]
c0016f39:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0016f43:	83 e2 80             	and    edx,0xffffff80
c0016f46:	88 90 76 02 00 00    	mov    BYTE PTR [eax+0x276],dl
c0016f4c:	68 00 01 00 00       	push   0x100
c0016f51:	e8 b6 91 ff ff       	call   c001010c <malloc>
c0016f56:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0016f59:	58                   	pop    eax
c0016f5a:	5a                   	pop    edx
c0016f5b:	53                   	push   ebx
c0016f5c:	68 b8 c1 02 c0       	push   0xc002c1b8
c0016f61:	e8 00 00 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0016f66:	59                   	pop    ecx
c0016f67:	5e                   	pop    esi
c0016f68:	53                   	push   ebx
c0016f69:	68 4c 63 03 c0       	push   0xc003634c
c0016f6e:	e8 91 1f 01 00       	call   c0028f04 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016f73:	83 c4 10             	add    esp,0x10
c0016f76:	89 d8                	mov    eax,ebx
c0016f78:	83 c4 0c             	add    esp,0xc
c0016f7b:	5b                   	pop    ebx
c0016f7c:	5e                   	pop    esi
c0016f7d:	5f                   	pop    edi
c0016f7e:	5d                   	pop    ebp
c0016f7f:	c3                   	ret    

c0016f80 <Process::createUserThread()>:
c0016f80:	83 ec 0c             	sub    esp,0xc
c0016f83:	68 80 00 00 00       	push   0x80
c0016f88:	6a 00                	push   0x0
c0016f8a:	68 34 68 01 c0       	push   0xc0016834
c0016f8f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016f93:	50                   	push   eax
c0016f94:	e8 9b fe ff ff       	call   c0016e34 <Process::createThread(void (*)(void*), void*, int)>
c0016f99:	83 c4 1c             	add    esp,0x1c
c0016f9c:	c3                   	ret    
c0016f9d:	8d 76 00             	lea    esi,[esi+0x0]

c0016fa0 <setupMultitasking(void (*)())>:
c0016fa0:	56                   	push   esi
c0016fa1:	53                   	push   ebx
c0016fa2:	83 ec 04             	sub    esp,0x4
c0016fa5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016fa9:	eb 11                	jmp    c0016fbc <setupMultitasking(void (*)())+0x1c>
c0016fab:	90                   	nop
c0016fac:	83 ec 0c             	sub    esp,0xc
c0016faf:	68 4c 63 03 c0       	push   0xc003634c
c0016fb4:	e8 8f 1e 01 00       	call   c0028e48 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016fb9:	83 c4 10             	add    esp,0x10
c0016fbc:	83 ec 0c             	sub    esp,0xc
c0016fbf:	68 4c 63 03 c0       	push   0xc003634c
c0016fc4:	e8 5b 1e 01 00       	call   c0028e24 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016fc9:	83 c4 10             	add    esp,0x10
c0016fcc:	84 c0                	test   al,al
c0016fce:	74 dc                	je     c0016fac <setupMultitasking(void (*)())+0xc>
c0016fd0:	83 ec 0c             	sub    esp,0xc
c0016fd3:	68 c4 07 00 00       	push   0x7c4
c0016fd8:	e8 2f 91 ff ff       	call   c001010c <malloc>
c0016fdd:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0016fe4:	6a 00                	push   0x0
c0016fe6:	68 cc c1 02 c0       	push   0xc002c1cc
c0016feb:	6a 01                	push   0x1
c0016fed:	50                   	push   eax
c0016fee:	89 c3                	mov    ebx,eax
c0016ff0:	e8 ff fb ff ff       	call   c0016bf4 <Process::Process(bool, char const*, Process*, char**)>
c0016ff5:	8b 83 a6 05 00 00    	mov    eax,DWORD PTR [ebx+0x5a6]
c0016ffb:	83 c4 14             	add    esp,0x14
c0016ffe:	89 1d 58 63 03 c0    	mov    DWORD PTR ds:0xc0036358,ebx
c0017004:	50                   	push   eax
c0017005:	e8 55 bb ff ff       	call   c0012b5f <setActiveTerminal(VgaText*)>
c001700a:	66 8b 83 a4 05 00 00 	mov    ax,WORD PTR [ebx+0x5a4]
c0017011:	c7 83 65 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x265],0x0
c001701b:	83 c8 01             	or     eax,0x1
c001701e:	66 89 83 a4 05 00 00 	mov    WORD PTR [ebx+0x5a4],ax
c0017025:	8b 83 b2 05 00 00    	mov    eax,DWORD PTR [ebx+0x5b2]
c001702b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001702e:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c0017038:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001703e:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c0017048:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001704e:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0017058:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0017062:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0017068:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001706e:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0017078:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0017082:	c7 04 24 00 01 00 00 	mov    DWORD PTR [esp],0x100
c0017089:	e8 7e 90 ff ff       	call   c001010c <malloc>
c001708e:	c7 83 6f 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x26f],0x0
c0017098:	c6 83 73 02 00 00 00 	mov    BYTE PTR [ebx+0x273],0x0
c001709f:	c6 83 74 02 00 00 00 	mov    BYTE PTR [ebx+0x274],0x0
c00170a6:	c6 83 75 02 00 00 00 	mov    BYTE PTR [ebx+0x275],0x0
c00170ad:	c6 83 76 02 00 00 00 	mov    BYTE PTR [ebx+0x276],0x0
c00170b4:	89 83 14 02 00 00    	mov    DWORD PTR [ebx+0x214],eax
c00170ba:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c00170c0:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c00170c6:	5a                   	pop    edx
c00170c7:	59                   	pop    ecx
c00170c8:	68 b4 c1 02 c0       	push   0xc002c1b4
c00170cd:	50                   	push   eax
c00170ce:	e8 7d 95 fe ff       	call   c0000650 <strcpy>
c00170d3:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c00170da:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c00170de:	83 c4 14             	add    esp,0x14
c00170e1:	5b                   	pop    ebx
c00170e2:	5e                   	pop    esi
c00170e3:	e9 81 91 fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>

c00170e8 <schedule()>:
c00170e8:	8b 15 2c 63 03 c0    	mov    edx,DWORD PTR ds:0xc003632c
c00170ee:	85 d2                	test   edx,edx
c00170f0:	74 0e                	je     c0017100 <schedule()+0x18>
c00170f2:	c7 05 28 63 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0036328,0x1
c00170fc:	c3                   	ret    
c00170fd:	8d 76 00             	lea    esi,[esi+0x0]
c0017100:	53                   	push   ebx
c0017101:	83 ec 14             	sub    esp,0x14
c0017104:	68 4c 63 03 c0       	push   0xc003634c
c0017109:	e8 16 1d 01 00       	call   c0028e24 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001710e:	83 c4 10             	add    esp,0x10
c0017111:	84 c0                	test   al,al
c0017113:	75 3f                	jne    c0017154 <schedule()+0x6c>
c0017115:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001711a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001711d:	83 fa 01             	cmp    edx,0x1
c0017120:	74 3a                	je     c001715c <schedule()+0x74>
c0017122:	66 90                	xchg   ax,ax
c0017124:	83 ec 0c             	sub    esp,0xc
c0017127:	68 4c 63 03 c0       	push   0xc003634c
c001712c:	e8 0f 1d 01 00       	call   c0028e40 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0017131:	c7 04 24 4c 63 03 c0 	mov    DWORD PTR [esp],0xc003634c
c0017138:	89 c3                	mov    ebx,eax
c001713a:	e8 09 1d 01 00       	call   c0028e48 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001713f:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0017146:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017149:	e8 42 f7 ff ff       	call   c0016890 <switchToThread(ThreadControlBlock*)>
c001714e:	83 c4 10             	add    esp,0x10
c0017151:	8d 76 00             	lea    esi,[esi+0x0]
c0017154:	83 c4 08             	add    esp,0x8
c0017157:	5b                   	pop    ebx
c0017158:	c3                   	ret    
c0017159:	8d 76 00             	lea    esi,[esi+0x0]
c001715c:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0017163:	83 ec 08             	sub    esp,0x8
c0017166:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001716b:	50                   	push   eax
c001716c:	68 4c 63 03 c0       	push   0xc003634c
c0017171:	e8 8e 1d 01 00       	call   c0028f04 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0017176:	83 c4 10             	add    esp,0x10
c0017179:	eb a9                	jmp    c0017124 <schedule()+0x3c>
c001717b:	90                   	nop

c001717c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001717c:	83 ec 0c             	sub    esp,0xc
c001717f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017184:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017188:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001718b:	e8 58 ff ff ff       	call   c00170e8 <schedule()>
c0017190:	f0 83 2d 30 63 03 c0 01 	lock sub DWORD PTR ds:0xc0036330,0x1
c0017198:	a1 30 63 03 c0       	mov    eax,ds:0xc0036330
c001719d:	85 c0                	test   eax,eax
c001719f:	75 03                	jne    c00171a4 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x28>
c00171a1:	fb                   	sti    
c00171a2:	66 90                	xchg   ax,ax
c00171a4:	83 c4 0c             	add    esp,0xc
c00171a7:	c3                   	ret    

c00171a8 <blockTask(TaskState)>:
c00171a8:	83 ec 0c             	sub    esp,0xc
c00171ab:	fa                   	cli    
c00171ac:	a1 30 63 03 c0       	mov    eax,ds:0xc0036330
c00171b1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00171b5:	83 c0 01             	add    eax,0x1
c00171b8:	a3 30 63 03 c0       	mov    ds:0xc0036330,eax
c00171bd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00171c2:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00171c5:	e8 1e ff ff ff       	call   c00170e8 <schedule()>
c00171ca:	f0 83 2d 30 63 03 c0 01 	lock sub DWORD PTR ds:0xc0036330,0x1
c00171d2:	8b 15 30 63 03 c0    	mov    edx,DWORD PTR ds:0xc0036330
c00171d8:	85 d2                	test   edx,edx
c00171da:	75 04                	jne    c00171e0 <blockTask(TaskState)+0x38>
c00171dc:	fb                   	sti    
c00171dd:	8d 76 00             	lea    esi,[esi+0x0]
c00171e0:	83 c4 0c             	add    esp,0xc
c00171e3:	c3                   	ret    

c00171e4 <waitTask(int, int*, int)>:
c00171e4:	83 ec 18             	sub    esp,0x18
c00171e7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00171ec:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00171f0:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c00171f3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00171f7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00171fc:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c00171ff:	6a 07                	push   0x7
c0017201:	e8 a2 ff ff ff       	call   c00171a8 <blockTask(TaskState)>
c0017206:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001720b:	83 c4 10             	add    esp,0x10
c001720e:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c0017211:	85 d2                	test   edx,edx
c0017213:	74 0b                	je     c0017220 <waitTask(int, int*, int)+0x3c>
c0017215:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c0017218:	89 02                	mov    DWORD PTR [edx],eax
c001721a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001721f:	90                   	nop
c0017220:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c0017223:	83 c4 0c             	add    esp,0xc
c0017226:	c3                   	ret    
c0017227:	90                   	nop

c0017228 <milliTenthSleepUntil(unsigned long long)>:
c0017228:	83 ec 0c             	sub    esp,0xc
c001722b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001722f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017233:	3b 05 50 5b 03 c0    	cmp    eax,DWORD PTR ds:0xc0035b50
c0017239:	89 d1                	mov    ecx,edx
c001723b:	1b 0d 54 5b 03 c0    	sbb    ecx,DWORD PTR ds:0xc0035b54
c0017241:	73 05                	jae    c0017248 <milliTenthSleepUntil(unsigned long long)+0x20>
c0017243:	90                   	nop
c0017244:	83 c4 0c             	add    esp,0xc
c0017247:	c3                   	ret    
c0017248:	fa                   	cli    
c0017249:	8b 0d 30 63 03 c0    	mov    ecx,DWORD PTR ds:0xc0036330
c001724f:	83 ec 08             	sub    esp,0x8
c0017252:	83 c1 01             	add    ecx,0x1
c0017255:	89 0d 30 63 03 c0    	mov    DWORD PTR ds:0xc0036330,ecx
c001725b:	8b 0d 2c 63 03 c0    	mov    ecx,DWORD PTR ds:0xc003632c
c0017261:	83 c1 01             	add    ecx,0x1
c0017264:	89 0d 2c 63 03 c0    	mov    DWORD PTR ds:0xc003632c,ecx
c001726a:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0017270:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c0017273:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c0017276:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001727b:	50                   	push   eax
c001727c:	68 40 63 03 c0       	push   0xc0036340
c0017281:	e8 7e 1c 01 00       	call   c0028f04 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0017286:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001728d:	e8 16 ff ff ff       	call   c00171a8 <blockTask(TaskState)>
c0017292:	a1 2c 63 03 c0       	mov    eax,ds:0xc003632c
c0017297:	83 c4 10             	add    esp,0x10
c001729a:	83 e8 01             	sub    eax,0x1
c001729d:	a3 2c 63 03 c0       	mov    ds:0xc003632c,eax
c00172a2:	85 c0                	test   eax,eax
c00172a4:	75 0a                	jne    c00172b0 <milliTenthSleepUntil(unsigned long long)+0x88>
c00172a6:	8b 15 28 63 03 c0    	mov    edx,DWORD PTR ds:0xc0036328
c00172ac:	85 d2                	test   edx,edx
c00172ae:	75 18                	jne    c00172c8 <milliTenthSleepUntil(unsigned long long)+0xa0>
c00172b0:	f0 83 2d 30 63 03 c0 01 	lock sub DWORD PTR ds:0xc0036330,0x1
c00172b8:	a1 30 63 03 c0       	mov    eax,ds:0xc0036330
c00172bd:	85 c0                	test   eax,eax
c00172bf:	75 83                	jne    c0017244 <milliTenthSleepUntil(unsigned long long)+0x1c>
c00172c1:	fb                   	sti    
c00172c2:	83 c4 0c             	add    esp,0xc
c00172c5:	c3                   	ret    
c00172c6:	66 90                	xchg   ax,ax
c00172c8:	c7 05 28 63 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0036328,0x0
c00172d2:	e8 11 fe ff ff       	call   c00170e8 <schedule()>
c00172d7:	eb d7                	jmp    c00172b0 <milliTenthSleepUntil(unsigned long long)+0x88>
c00172d9:	8d 76 00             	lea    esi,[esi+0x0]

c00172dc <milliTenthSleep(unsigned long long)>:
c00172dc:	a1 50 5b 03 c0       	mov    eax,ds:0xc0035b50
c00172e1:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c00172e5:	8b 15 54 5b 03 c0    	mov    edx,DWORD PTR ds:0xc0035b54
c00172eb:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c00172ef:	e9 34 ff ff ff       	jmp    c0017228 <milliTenthSleepUntil(unsigned long long)>

c00172f4 <sleep(unsigned long long)>:
c00172f4:	69 4c 24 08 10 27 00 00 	imul   ecx,DWORD PTR [esp+0x8],0x2710
c00172fc:	b8 10 27 00 00       	mov    eax,0x2710
c0017301:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c0017305:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017309:	01 ca                	add    edx,ecx
c001730b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001730f:	eb cb                	jmp    c00172dc <milliTenthSleep(unsigned long long)>
c0017311:	8d 76 00             	lea    esi,[esi+0x0]

c0017314 <sleep(unsigned int)>:
c0017314:	83 ec 14             	sub    esp,0x14
c0017317:	b8 10 27 00 00       	mov    eax,0x2710
c001731c:	f7 64 24 18          	mul    DWORD PTR [esp+0x18]
c0017320:	52                   	push   edx
c0017321:	50                   	push   eax
c0017322:	e8 b5 ff ff ff       	call   c00172dc <milliTenthSleep(unsigned long long)>
c0017327:	83 c4 1c             	add    esp,0x1c
c001732a:	c3                   	ret    
c001732b:	90                   	nop

c001732c <milliTenthSleep(unsigned int)>:
c001732c:	83 ec 14             	sub    esp,0x14
c001732f:	31 d2                	xor    edx,edx
c0017331:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017335:	03 05 50 5b 03 c0    	add    eax,DWORD PTR ds:0xc0035b50
c001733b:	13 15 54 5b 03 c0    	adc    edx,DWORD PTR ds:0xc0035b54
c0017341:	52                   	push   edx
c0017342:	50                   	push   eax
c0017343:	e8 e0 fe ff ff       	call   c0017228 <milliTenthSleepUntil(unsigned long long)>
c0017348:	83 c4 1c             	add    esp,0x1c
c001734b:	c3                   	ret    

c001734c <taskReturned>:
c001734c:	83 ec 18             	sub    esp,0x18
c001734f:	68 54 c2 02 c0       	push   0xc002c254
c0017354:	e8 07 92 ff ff       	call   c0010560 <KePanic(char const*)>
c0017359:	83 c4 10             	add    esp,0x10
c001735c:	83 ec 0c             	sub    esp,0xc
c001735f:	6a 02                	push   0x2
c0017361:	e8 42 fe ff ff       	call   c00171a8 <blockTask(TaskState)>
c0017366:	fa                   	cli    
c0017367:	a1 30 63 03 c0       	mov    eax,ds:0xc0036330
c001736c:	83 c0 01             	add    eax,0x1
c001736f:	a3 30 63 03 c0       	mov    ds:0xc0036330,eax
c0017374:	e8 6f fd ff ff       	call   c00170e8 <schedule()>
c0017379:	f0 83 2d 30 63 03 c0 01 	lock sub DWORD PTR ds:0xc0036330,0x1
c0017381:	8b 15 30 63 03 c0    	mov    edx,DWORD PTR ds:0xc0036330
c0017387:	83 c4 10             	add    esp,0x10
c001738a:	85 d2                	test   edx,edx
c001738c:	75 ce                	jne    c001735c <taskReturned+0x10>
c001738e:	fb                   	sti    
c001738f:	eb cb                	jmp    c001735c <taskReturned+0x10>
c0017391:	8d 76 00             	lea    esi,[esi+0x0]

c0017394 <KeProcessFromPID(int)>:
c0017394:	57                   	push   edi
c0017395:	56                   	push   esi
c0017396:	53                   	push   ebx
c0017397:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001739b:	fa                   	cli    
c001739c:	8b 0d 30 63 03 c0    	mov    ecx,DWORD PTR ds:0xc0036330
c00173a2:	83 ec 0c             	sub    esp,0xc
c00173a5:	68 4c 63 03 c0       	push   0xc003634c
c00173aa:	83 c1 01             	add    ecx,0x1
c00173ad:	89 0d 30 63 03 c0    	mov    DWORD PTR ds:0xc0036330,ecx
c00173b3:	e8 88 1a 01 00       	call   c0028e40 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00173b8:	83 c4 10             	add    esp,0x10
c00173bb:	89 c7                	mov    edi,eax
c00173bd:	eb 15                	jmp    c00173d4 <KeProcessFromPID(int)+0x40>
c00173bf:	90                   	nop
c00173c0:	83 ec 0c             	sub    esp,0xc
c00173c3:	68 4c 63 03 c0       	push   0xc003634c
c00173c8:	e8 73 1a 01 00       	call   c0028e40 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00173cd:	83 c4 10             	add    esp,0x10
c00173d0:	39 f8                	cmp    eax,edi
c00173d2:	74 50                	je     c0017424 <KeProcessFromPID(int)+0x90>
c00173d4:	83 ec 0c             	sub    esp,0xc
c00173d7:	68 4c 63 03 c0       	push   0xc003634c
c00173dc:	e8 5f 1a 01 00       	call   c0028e40 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00173e1:	c7 04 24 4c 63 03 c0 	mov    DWORD PTR [esp],0xc003634c
c00173e8:	89 c3                	mov    ebx,eax
c00173ea:	e8 59 1a 01 00       	call   c0028e48 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00173ef:	58                   	pop    eax
c00173f0:	5a                   	pop    edx
c00173f1:	53                   	push   ebx
c00173f2:	68 4c 63 03 c0       	push   0xc003634c
c00173f7:	e8 08 1b 01 00       	call   c0028f04 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00173fc:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00173ff:	83 c4 10             	add    esp,0x10
c0017402:	39 30                	cmp    DWORD PTR [eax],esi
c0017404:	75 ba                	jne    c00173c0 <KeProcessFromPID(int)+0x2c>
c0017406:	f0 83 2d 30 63 03 c0 01 	lock sub DWORD PTR ds:0xc0036330,0x1
c001740e:	8b 0d 30 63 03 c0    	mov    ecx,DWORD PTR ds:0xc0036330
c0017414:	85 c9                	test   ecx,ecx
c0017416:	74 08                	je     c0017420 <KeProcessFromPID(int)+0x8c>
c0017418:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001741b:	90                   	nop
c001741c:	5b                   	pop    ebx
c001741d:	5e                   	pop    esi
c001741e:	5f                   	pop    edi
c001741f:	c3                   	ret    
c0017420:	fb                   	sti    
c0017421:	eb f5                	jmp    c0017418 <KeProcessFromPID(int)+0x84>
c0017423:	90                   	nop
c0017424:	f0 83 2d 30 63 03 c0 01 	lock sub DWORD PTR ds:0xc0036330,0x1
c001742c:	8b 15 30 63 03 c0    	mov    edx,DWORD PTR ds:0xc0036330
c0017432:	31 c0                	xor    eax,eax
c0017434:	85 d2                	test   edx,edx
c0017436:	75 e4                	jne    c001741c <KeProcessFromPID(int)+0x88>
c0017438:	fb                   	sti    
c0017439:	5b                   	pop    ebx
c001743a:	5e                   	pop    esi
c001743b:	5f                   	pop    edi
c001743c:	c3                   	ret    
c001743d:	8d 76 00             	lea    esi,[esi+0x0]

c0017440 <unblockTask(ThreadControlBlock*)>:
c0017440:	53                   	push   ebx
c0017441:	83 ec 08             	sub    esp,0x8
c0017444:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017448:	fa                   	cli    
c0017449:	8b 15 30 63 03 c0    	mov    edx,DWORD PTR ds:0xc0036330
c001744f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0017452:	83 c2 01             	add    edx,0x1
c0017455:	89 15 30 63 03 c0    	mov    DWORD PTR ds:0xc0036330,edx
c001745b:	85 c0                	test   eax,eax
c001745d:	74 6d                	je     c00174cc <unblockTask(ThreadControlBlock*)+0x8c>
c001745f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0017462:	83 f8 01             	cmp    eax,0x1
c0017465:	74 39                	je     c00174a0 <unblockTask(ThreadControlBlock*)+0x60>
c0017467:	83 ec 0c             	sub    esp,0xc
c001746a:	68 4c 63 03 c0       	push   0xc003634c
c001746f:	e8 cc 19 01 00       	call   c0028e40 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0017474:	83 c4 10             	add    esp,0x10
c0017477:	85 c0                	test   eax,eax
c0017479:	75 1d                	jne    c0017498 <unblockTask(ThreadControlBlock*)+0x58>
c001747b:	eb 63                	jmp    c00174e0 <unblockTask(ThreadControlBlock*)+0xa0>
c001747d:	8d 76 00             	lea    esi,[esi+0x0]
c0017480:	83 ec 08             	sub    esp,0x8
c0017483:	50                   	push   eax
c0017484:	68 4c 63 03 c0       	push   0xc003634c
c0017489:	e8 be 1e 01 00       	call   c002934c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001748e:	83 c4 10             	add    esp,0x10
c0017491:	85 c0                	test   eax,eax
c0017493:	74 4b                	je     c00174e0 <unblockTask(ThreadControlBlock*)+0xa0>
c0017495:	8d 76 00             	lea    esi,[esi+0x0]
c0017498:	39 c3                	cmp    ebx,eax
c001749a:	75 e4                	jne    c0017480 <unblockTask(ThreadControlBlock*)+0x40>
c001749c:	eb 12                	jmp    c00174b0 <unblockTask(ThreadControlBlock*)+0x70>
c001749e:	66 90                	xchg   ax,ax
c00174a0:	83 ec 0c             	sub    esp,0xc
c00174a3:	68 ea c1 02 c0       	push   0xc002c1ea
c00174a8:	e8 b9 fa fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00174ad:	83 c4 10             	add    esp,0x10
c00174b0:	f0 83 2d 30 63 03 c0 01 	lock sub DWORD PTR ds:0xc0036330,0x1
c00174b8:	a1 30 63 03 c0       	mov    eax,ds:0xc0036330
c00174bd:	85 c0                	test   eax,eax
c00174bf:	75 03                	jne    c00174c4 <unblockTask(ThreadControlBlock*)+0x84>
c00174c1:	fb                   	sti    
c00174c2:	66 90                	xchg   ax,ax
c00174c4:	83 c4 08             	add    esp,0x8
c00174c7:	5b                   	pop    ebx
c00174c8:	c3                   	ret    
c00174c9:	8d 76 00             	lea    esi,[esi+0x0]
c00174cc:	83 ec 0c             	sub    esp,0xc
c00174cf:	68 d3 c1 02 c0       	push   0xc002c1d3
c00174d4:	e8 8d fa fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00174d9:	83 c4 10             	add    esp,0x10
c00174dc:	eb d2                	jmp    c00174b0 <unblockTask(ThreadControlBlock*)+0x70>
c00174de:	66 90                	xchg   ax,ax
c00174e0:	83 ec 08             	sub    esp,0x8
c00174e3:	53                   	push   ebx
c00174e4:	68 4c 63 03 c0       	push   0xc003634c
c00174e9:	e8 16 1a 01 00       	call   c0028f04 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00174ee:	83 c4 10             	add    esp,0x10
c00174f1:	eb bd                	jmp    c00174b0 <unblockTask(ThreadControlBlock*)+0x70>
c00174f3:	90                   	nop

c00174f4 <cleanupTerminatedTask(ThreadControlBlock*)>:
c00174f4:	55                   	push   ebp
c00174f5:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00174fa:	57                   	push   edi
c00174fb:	56                   	push   esi
c00174fc:	53                   	push   ebx
c00174fd:	83 ec 1c             	sub    esp,0x1c
c0017500:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0017504:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c0017507:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001750a:	d3 c0                	rol    eax,cl
c001750c:	66 8b 8a a4 05 00 00 	mov    cx,WORD PTR [edx+0x5a4]
c0017513:	21 c8                	and    eax,ecx
c0017515:	66 89 82 a4 05 00 00 	mov    WORD PTR [edx+0x5a4],ax
c001751c:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001751f:	66 83 b8 a4 05 00 00 00 	cmp    WORD PTR [eax+0x5a4],0x0
c0017527:	0f 85 af 01 00 00    	jne    c00176dc <cleanupTerminatedTask(ThreadControlBlock*)+0x1e8>
c001752d:	8b a8 b6 05 00 00    	mov    ebp,DWORD PTR [eax+0x5b6]
c0017533:	85 ed                	test   ebp,ebp
c0017535:	7e 29                	jle    c0017560 <cleanupTerminatedTask(ThreadControlBlock*)+0x6c>
c0017537:	31 f6                	xor    esi,esi
c0017539:	8d 76 00             	lea    esi,[esi+0x0]
c001753c:	8b bc b0 ba 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x5ba]
c0017543:	83 ec 0c             	sub    esp,0xc
c0017546:	83 c6 01             	add    esi,0x1
c0017549:	57                   	push   edi
c001754a:	e8 cd 8b ff ff       	call   c001011c <free>
c001754f:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0017552:	83 c4 10             	add    esp,0x10
c0017555:	39 b0 b6 05 00 00    	cmp    DWORD PTR [eax+0x5b6],esi
c001755b:	7f df                	jg     c001753c <cleanupTerminatedTask(ThreadControlBlock*)+0x48>
c001755d:	8d 76 00             	lea    esi,[esi+0x0]
c0017560:	c7 80 b6 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x5b6],0x0
c001756a:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001756d:	8b ae ba 07 00 00    	mov    ebp,DWORD PTR [esi+0x7ba]
c0017573:	89 f7                	mov    edi,esi
c0017575:	85 ed                	test   ebp,ebp
c0017577:	74 1b                	je     c0017594 <cleanupTerminatedTask(ThreadControlBlock*)+0xa0>
c0017579:	83 ec 0c             	sub    esp,0xc
c001757c:	55                   	push   ebp
c001757d:	e8 d6 78 ff ff       	call   c000ee58 <EnvVarContainer::~EnvVarContainer()>
c0017582:	59                   	pop    ecx
c0017583:	5e                   	pop    esi
c0017584:	6a 0c                	push   0xc
c0017586:	55                   	push   ebp
c0017587:	e8 80 67 ff ff       	call   c000dd0c <operator delete(void*, unsigned long)>
c001758c:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001758f:	83 c4 10             	add    esp,0x10
c0017592:	89 f7                	mov    edi,esi
c0017594:	8b 86 aa 05 00 00    	mov    eax,DWORD PTR [esi+0x5aa]
c001759a:	85 c0                	test   eax,eax
c001759c:	0f 84 ae 00 00 00    	je     c0017650 <cleanupTerminatedTask(ThreadControlBlock*)+0x15c>
c00175a2:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c00175a5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00175a9:	31 c9                	xor    ecx,ecx
c00175ab:	eb 17                	jmp    c00175c4 <cleanupTerminatedTask(ThreadControlBlock*)+0xd0>
c00175ad:	8d 76 00             	lea    esi,[esi+0x0]
c00175b0:	83 c1 01             	add    ecx,0x1
c00175b3:	83 f9 10             	cmp    ecx,0x10
c00175b6:	0f 84 94 00 00 00    	je     c0017650 <cleanupTerminatedTask(ThreadControlBlock*)+0x15c>
c00175bc:	8b 86 aa 05 00 00    	mov    eax,DWORD PTR [esi+0x5aa]
c00175c2:	66 90                	xchg   ax,ax
c00175c4:	0f b7 90 a4 05 00 00 	movzx  edx,WORD PTR [eax+0x5a4]
c00175cb:	d3 fa                	sar    edx,cl
c00175cd:	80 e2 01             	and    dl,0x1
c00175d0:	74 de                	je     c00175b0 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00175d2:	6b d1 73             	imul   edx,ecx,0x73
c00175d5:	01 d0                	add    eax,edx
c00175d7:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c00175dd:	83 fd 07             	cmp    ebp,0x7
c00175e0:	75 ce                	jne    c00175b0 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00175e2:	05 40 02 00 00       	add    eax,0x240
c00175e7:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c00175ea:	83 fd ff             	cmp    ebp,0xffffffff
c00175ed:	0f 8c f1 00 00 00    	jl     c00176e4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f0>
c00175f3:	0f 84 af 01 00 00    	je     c00177a8 <cleanupTerminatedTask(ThreadControlBlock*)+0x2b4>
c00175f9:	85 ed                	test   ebp,ebp
c00175fb:	0f 84 93 01 00 00    	je     c0017794 <cleanupTerminatedTask(ThreadControlBlock*)+0x2a0>
c0017601:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c0017603:	75 ab                	jne    c00175b0 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0017605:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0017609:	8b 86 aa 05 00 00    	mov    eax,DWORD PTR [esi+0x5aa]
c001760f:	01 d0                	add    eax,edx
c0017611:	8d 76 00             	lea    esi,[esi+0x0]
c0017614:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0017618:	83 ec 0c             	sub    esp,0xc
c001761b:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c0017621:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0017624:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c001762a:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0017631:	50                   	push   eax
c0017632:	e8 09 fe ff ff       	call   c0017440 <unblockTask(ThreadControlBlock*)>
c0017637:	83 c4 10             	add    esp,0x10
c001763a:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001763d:	89 f7                	mov    edi,esi
c001763f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017643:	83 c1 01             	add    ecx,0x1
c0017646:	83 f9 10             	cmp    ecx,0x10
c0017649:	0f 85 6d ff ff ff    	jne    c00175bc <cleanupTerminatedTask(ThreadControlBlock*)+0xc8>
c001764f:	90                   	nop
c0017650:	8b 86 a6 05 00 00    	mov    eax,DWORD PTR [esi+0x5a6]
c0017656:	85 c0                	test   eax,eax
c0017658:	74 62                	je     c00176bc <cleanupTerminatedTask(ThreadControlBlock*)+0x1c8>
c001765a:	8b 96 aa 05 00 00    	mov    edx,DWORD PTR [esi+0x5aa]
c0017660:	3b 82 a6 05 00 00    	cmp    eax,DWORD PTR [edx+0x5a6]
c0017666:	74 54                	je     c00176bc <cleanupTerminatedTask(ThreadControlBlock*)+0x1c8>
c0017668:	83 ec 0c             	sub    esp,0xc
c001766b:	68 4c 63 03 c0       	push   0xc003634c
c0017670:	e8 cb 17 01 00       	call   c0028e40 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0017675:	c7 04 24 4c 63 03 c0 	mov    DWORD PTR [esp],0xc003634c
c001767c:	89 c7                	mov    edi,eax
c001767e:	e8 a1 17 01 00       	call   c0028e24 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0017683:	83 c4 10             	add    esp,0x10
c0017686:	84 c0                	test   al,al
c0017688:	0f 84 ce 00 00 00    	je     c001775c <cleanupTerminatedTask(ThreadControlBlock*)+0x268>
c001768e:	66 90                	xchg   ax,ax
c0017690:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0017693:	8b 90 a6 05 00 00    	mov    edx,DWORD PTR [eax+0x5a6]
c0017699:	85 d2                	test   edx,edx
c001769b:	74 0f                	je     c00176ac <cleanupTerminatedTask(ThreadControlBlock*)+0x1b8>
c001769d:	8b 02                	mov    eax,DWORD PTR [edx]
c001769f:	83 ec 0c             	sub    esp,0xc
c00176a2:	52                   	push   edx
c00176a3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00176a6:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00176a9:	83 c4 10             	add    esp,0x10
c00176ac:	c7 80 a6 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x5a6],0x0
c00176b6:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c00176b9:	8d 76 00             	lea    esi,[esi+0x0]
c00176bc:	8b 9f b2 05 00 00    	mov    ebx,DWORD PTR [edi+0x5b2]
c00176c2:	85 db                	test   ebx,ebx
c00176c4:	74 16                	je     c00176dc <cleanupTerminatedTask(ThreadControlBlock*)+0x1e8>
c00176c6:	83 ec 0c             	sub    esp,0xc
c00176c9:	53                   	push   ebx
c00176ca:	e8 49 c9 ff ff       	call   c0014018 <VAS::~VAS()>
c00176cf:	58                   	pop    eax
c00176d0:	5a                   	pop    edx
c00176d1:	6a 14                	push   0x14
c00176d3:	53                   	push   ebx
c00176d4:	e8 33 66 ff ff       	call   c000dd0c <operator delete(void*, unsigned long)>
c00176d9:	83 c4 10             	add    esp,0x10
c00176dc:	83 c4 1c             	add    esp,0x1c
c00176df:	5b                   	pop    ebx
c00176e0:	5e                   	pop    esi
c00176e1:	5f                   	pop    edi
c00176e2:	5d                   	pop    ebp
c00176e3:	c3                   	ret    
c00176e4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00176e8:	83 ec 0c             	sub    esp,0xc
c00176eb:	68 88 c2 02 c0       	push   0xc002c288
c00176f0:	e8 6b 8e ff ff       	call   c0010560 <KePanic(char const*)>
c00176f5:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c00176f8:	83 c4 10             	add    esp,0x10
c00176fb:	89 f7                	mov    edi,esi
c00176fd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017701:	e9 aa fe ff ff       	jmp    c00175b0 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0017706:	66 90                	xchg   ax,ax
c0017708:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001770e:	39 82 a6 05 00 00    	cmp    DWORD PTR [edx+0x5a6],eax
c0017714:	75 1e                	jne    c0017734 <cleanupTerminatedTask(ThreadControlBlock*)+0x240>
c0017716:	83 ec 0c             	sub    esp,0xc
c0017719:	68 f0 c2 02 c0       	push   0xc002c2f0
c001771e:	e8 43 f8 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0017723:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001772a:	e8 79 fa ff ff       	call   c00171a8 <blockTask(TaskState)>
c001772f:	83 c4 10             	add    esp,0x10
c0017732:	66 90                	xchg   ax,ax
c0017734:	83 ec 08             	sub    esp,0x8
c0017737:	56                   	push   esi
c0017738:	68 4c 63 03 c0       	push   0xc003634c
c001773d:	e8 c2 17 01 00       	call   c0028f04 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0017742:	c7 04 24 4c 63 03 c0 	mov    DWORD PTR [esp],0xc003634c
c0017749:	e8 f2 16 01 00       	call   c0028e40 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001774e:	83 c4 10             	add    esp,0x10
c0017751:	39 f8                	cmp    eax,edi
c0017753:	0f 84 37 ff ff ff    	je     c0017690 <cleanupTerminatedTask(ThreadControlBlock*)+0x19c>
c0017759:	8d 76 00             	lea    esi,[esi+0x0]
c001775c:	83 ec 0c             	sub    esp,0xc
c001775f:	68 4c 63 03 c0       	push   0xc003634c
c0017764:	e8 d7 16 01 00       	call   c0028e40 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0017769:	c7 04 24 4c 63 03 c0 	mov    DWORD PTR [esp],0xc003634c
c0017770:	89 c6                	mov    esi,eax
c0017772:	e8 d1 16 01 00       	call   c0028e48 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0017777:	83 c4 10             	add    esp,0x10
c001777a:	39 f3                	cmp    ebx,esi
c001777c:	74 b6                	je     c0017734 <cleanupTerminatedTask(ThreadControlBlock*)+0x240>
c001777e:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c0017781:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0017784:	39 82 aa 05 00 00    	cmp    DWORD PTR [edx+0x5aa],eax
c001778a:	75 a8                	jne    c0017734 <cleanupTerminatedTask(ThreadControlBlock*)+0x240>
c001778c:	e9 77 ff ff ff       	jmp    c0017708 <cleanupTerminatedTask(ThreadControlBlock*)+0x214>
c0017791:	8d 76 00             	lea    esi,[esi+0x0]
c0017794:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0017798:	83 ec 0c             	sub    esp,0xc
c001779b:	68 bc c2 02 c0       	push   0xc002c2bc
c00177a0:	e9 4b ff ff ff       	jmp    c00176f0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1fc>
c00177a5:	8d 76 00             	lea    esi,[esi+0x0]
c00177a8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00177ac:	8b 36                	mov    esi,DWORD PTR [esi]
c00177ae:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c00177b1:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00177b4:	8b b8 aa 05 00 00    	mov    edi,DWORD PTR [eax+0x5aa]
c00177ba:	01 d7                	add    edi,edx
c00177bc:	89 f8                	mov    eax,edi
c00177be:	e9 51 fe ff ff       	jmp    c0017614 <cleanupTerminatedTask(ThreadControlBlock*)+0x120>
c00177c3:	90                   	nop

c00177c4 <cleanerTaskFunction(void*)>:
c00177c4:	53                   	push   ebx
c00177c5:	83 ec 08             	sub    esp,0x8
c00177c8:	f0 83 2d 30 63 03 c0 01 	lock sub DWORD PTR ds:0xc0036330,0x1
c00177d0:	a1 30 63 03 c0       	mov    eax,ds:0xc0036330
c00177d5:	85 c0                	test   eax,eax
c00177d7:	75 03                	jne    c00177dc <cleanerTaskFunction(void*)+0x18>
c00177d9:	fb                   	sti    
c00177da:	66 90                	xchg   ax,ax
c00177dc:	fa                   	cli    
c00177dd:	a1 30 63 03 c0       	mov    eax,ds:0xc0036330
c00177e2:	83 c0 01             	add    eax,0x1
c00177e5:	80 3d 14 63 03 c0 00 	cmp    BYTE PTR ds:0xc0036314,0x0
c00177ec:	a3 30 63 03 c0       	mov    ds:0xc0036330,eax
c00177f1:	0f 85 c9 00 00 00    	jne    c00178c0 <cleanerTaskFunction(void*)+0xfc>
c00177f7:	83 ec 0c             	sub    esp,0xc
c00177fa:	6a 02                	push   0x2
c00177fc:	e8 7b f9 ff ff       	call   c001717c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0017801:	83 c4 10             	add    esp,0x10
c0017804:	c6 05 14 63 03 c0 00 	mov    BYTE PTR ds:0xc0036314,0x0
c001780b:	fa                   	cli    
c001780c:	8b 0d 30 63 03 c0    	mov    ecx,DWORD PTR ds:0xc0036330
c0017812:	8b 1d 2c 63 03 c0    	mov    ebx,DWORD PTR ds:0xc003632c
c0017818:	83 c1 01             	add    ecx,0x1
c001781b:	89 0d 30 63 03 c0    	mov    DWORD PTR ds:0xc0036330,ecx
c0017821:	83 c3 01             	add    ebx,0x1
c0017824:	89 1d 2c 63 03 c0    	mov    DWORD PTR ds:0xc003632c,ebx
c001782a:	fa                   	cli    
c001782b:	a1 30 63 03 c0       	mov    eax,ds:0xc0036330
c0017830:	83 c0 01             	add    eax,0x1
c0017833:	a3 30 63 03 c0       	mov    ds:0xc0036330,eax
c0017838:	eb 2a                	jmp    c0017864 <cleanerTaskFunction(void*)+0xa0>
c001783a:	66 90                	xchg   ax,ax
c001783c:	83 ec 0c             	sub    esp,0xc
c001783f:	68 34 63 03 c0       	push   0xc0036334
c0017844:	e8 f7 15 01 00       	call   c0028e40 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0017849:	c7 04 24 34 63 03 c0 	mov    DWORD PTR [esp],0xc0036334
c0017850:	89 c3                	mov    ebx,eax
c0017852:	e8 f1 15 01 00       	call   c0028e48 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0017857:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001785a:	e8 95 fc ff ff       	call   c00174f4 <cleanupTerminatedTask(ThreadControlBlock*)>
c001785f:	83 c4 10             	add    esp,0x10
c0017862:	66 90                	xchg   ax,ax
c0017864:	83 ec 0c             	sub    esp,0xc
c0017867:	68 34 63 03 c0       	push   0xc0036334
c001786c:	e8 b3 15 01 00       	call   c0028e24 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0017871:	83 c4 10             	add    esp,0x10
c0017874:	84 c0                	test   al,al
c0017876:	74 c4                	je     c001783c <cleanerTaskFunction(void*)+0x78>
c0017878:	f0 83 2d 30 63 03 c0 01 	lock sub DWORD PTR ds:0xc0036330,0x1
c0017880:	8b 15 30 63 03 c0    	mov    edx,DWORD PTR ds:0xc0036330
c0017886:	85 d2                	test   edx,edx
c0017888:	75 02                	jne    c001788c <cleanerTaskFunction(void*)+0xc8>
c001788a:	fb                   	sti    
c001788b:	90                   	nop
c001788c:	a1 2c 63 03 c0       	mov    eax,ds:0xc003632c
c0017891:	83 e8 01             	sub    eax,0x1
c0017894:	a3 2c 63 03 c0       	mov    ds:0xc003632c,eax
c0017899:	0f 85 29 ff ff ff    	jne    c00177c8 <cleanerTaskFunction(void*)+0x4>
c001789f:	a1 28 63 03 c0       	mov    eax,ds:0xc0036328
c00178a4:	85 c0                	test   eax,eax
c00178a6:	0f 84 1c ff ff ff    	je     c00177c8 <cleanerTaskFunction(void*)+0x4>
c00178ac:	c7 05 28 63 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0036328,0x0
c00178b6:	e8 2d f8 ff ff       	call   c00170e8 <schedule()>
c00178bb:	e9 08 ff ff ff       	jmp    c00177c8 <cleanerTaskFunction(void*)+0x4>
c00178c0:	f0 83 2d 30 63 03 c0 01 	lock sub DWORD PTR ds:0xc0036330,0x1
c00178c8:	a1 30 63 03 c0       	mov    eax,ds:0xc0036330
c00178cd:	85 c0                	test   eax,eax
c00178cf:	0f 85 2f ff ff ff    	jne    c0017804 <cleanerTaskFunction(void*)+0x40>
c00178d5:	fb                   	sti    
c00178d6:	e9 29 ff ff ff       	jmp    c0017804 <cleanerTaskFunction(void*)+0x40>
c00178db:	90                   	nop

c00178dc <KeTerminateCurrentThread(int)>:
c00178dc:	83 ec 14             	sub    esp,0x14
c00178df:	fa                   	cli    
c00178e0:	a1 30 63 03 c0       	mov    eax,ds:0xc0036330
c00178e5:	83 c0 01             	add    eax,0x1
c00178e8:	a3 30 63 03 c0       	mov    ds:0xc0036330,eax
c00178ed:	a1 2c 63 03 c0       	mov    eax,ds:0xc003632c
c00178f2:	83 c0 01             	add    eax,0x1
c00178f5:	a3 2c 63 03 c0       	mov    ds:0xc003632c,eax
c00178fa:	fa                   	cli    
c00178fb:	a1 30 63 03 c0       	mov    eax,ds:0xc0036330
c0017900:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017904:	83 c0 01             	add    eax,0x1
c0017907:	a3 30 63 03 c0       	mov    ds:0xc0036330,eax
c001790c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017911:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c0017914:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017919:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001791c:	50                   	push   eax
c001791d:	68 34 63 03 c0       	push   0xc0036334
c0017922:	e8 dd 15 01 00       	call   c0028f04 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0017927:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001792c:	83 c4 10             	add    esp,0x10
c001792f:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0017936:	a1 10 63 03 c0       	mov    eax,ds:0xc0036310
c001793b:	85 c0                	test   eax,eax
c001793d:	0f 84 81 00 00 00    	je     c00179c4 <KeTerminateCurrentThread(int)+0xe8>
c0017943:	c6 05 14 63 03 c0 01 	mov    BYTE PTR ds:0xc0036314,0x1
c001794a:	83 ec 0c             	sub    esp,0xc
c001794d:	50                   	push   eax
c001794e:	e8 ed fa ff ff       	call   c0017440 <unblockTask(ThreadControlBlock*)>
c0017953:	83 c4 10             	add    esp,0x10
c0017956:	66 90                	xchg   ax,ax
c0017958:	f0 83 2d 30 63 03 c0 01 	lock sub DWORD PTR ds:0xc0036330,0x1
c0017960:	a1 30 63 03 c0       	mov    eax,ds:0xc0036330
c0017965:	85 c0                	test   eax,eax
c0017967:	75 03                	jne    c001796c <KeTerminateCurrentThread(int)+0x90>
c0017969:	fb                   	sti    
c001796a:	66 90                	xchg   ax,ax
c001796c:	a1 2c 63 03 c0       	mov    eax,ds:0xc003632c
c0017971:	83 e8 01             	sub    eax,0x1
c0017974:	a3 2c 63 03 c0       	mov    ds:0xc003632c,eax
c0017979:	75 09                	jne    c0017984 <KeTerminateCurrentThread(int)+0xa8>
c001797b:	83 3d 28 63 03 c0 00 	cmp    DWORD PTR ds:0xc0036328,0x0
c0017982:	75 54                	jne    c00179d8 <KeTerminateCurrentThread(int)+0xfc>
c0017984:	f0 83 2d 30 63 03 c0 01 	lock sub DWORD PTR ds:0xc0036330,0x1
c001798c:	8b 0d 30 63 03 c0    	mov    ecx,DWORD PTR ds:0xc0036330
c0017992:	85 c9                	test   ecx,ecx
c0017994:	75 06                	jne    c001799c <KeTerminateCurrentThread(int)+0xc0>
c0017996:	66 90                	xchg   ax,ax
c0017998:	fb                   	sti    
c0017999:	8d 76 00             	lea    esi,[esi+0x0]
c001799c:	fa                   	cli    
c001799d:	a1 30 63 03 c0       	mov    eax,ds:0xc0036330
c00179a2:	83 c0 01             	add    eax,0x1
c00179a5:	a3 30 63 03 c0       	mov    ds:0xc0036330,eax
c00179aa:	e8 39 f7 ff ff       	call   c00170e8 <schedule()>
c00179af:	f0 83 2d 30 63 03 c0 01 	lock sub DWORD PTR ds:0xc0036330,0x1
c00179b7:	8b 15 30 63 03 c0    	mov    edx,DWORD PTR ds:0xc0036330
c00179bd:	85 d2                	test   edx,edx
c00179bf:	75 db                	jne    c001799c <KeTerminateCurrentThread(int)+0xc0>
c00179c1:	eb d5                	jmp    c0017998 <KeTerminateCurrentThread(int)+0xbc>
c00179c3:	90                   	nop
c00179c4:	83 ec 0c             	sub    esp,0xc
c00179c7:	68 01 c2 02 c0       	push   0xc002c201
c00179cc:	e8 95 f5 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00179d1:	83 c4 10             	add    esp,0x10
c00179d4:	eb 82                	jmp    c0017958 <KeTerminateCurrentThread(int)+0x7c>
c00179d6:	66 90                	xchg   ax,ax
c00179d8:	c7 05 28 63 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0036328,0x0
c00179e2:	e8 01 f7 ff ff       	call   c00170e8 <schedule()>
c00179e7:	eb 9b                	jmp    c0017984 <KeTerminateCurrentThread(int)+0xa8>
c00179e9:	8d 76 00             	lea    esi,[esi+0x0]

c00179ec <__static_initialization_and_destruction_0(int, int)>:
c00179ec:	83 ec 0c             	sub    esp,0xc
c00179ef:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00179f4:	0f 85 8e 00 00 00    	jne    c0017a88 <__static_initialization_and_destruction_0(int, int)+0x9c>
c00179fa:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0017a02:	0f 85 80 00 00 00    	jne    c0017a88 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0017a08:	83 ec 0c             	sub    esp,0xc
c0017a0b:	68 4c 63 03 c0       	push   0xc003634c
c0017a10:	e8 8f 19 01 00       	call   c00293a4 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0017a15:	83 c4 10             	add    esp,0x10
c0017a18:	83 ec 04             	sub    esp,0x4
c0017a1b:	68 00 f5 02 c0       	push   0xc002f500
c0017a20:	68 4c 63 03 c0       	push   0xc003634c
c0017a25:	68 54 93 02 c0       	push   0xc0029354
c0017a2a:	e8 8d 62 ff ff       	call   c000dcbc <__cxa_atexit>
c0017a2f:	83 c4 10             	add    esp,0x10
c0017a32:	83 ec 0c             	sub    esp,0xc
c0017a35:	68 40 63 03 c0       	push   0xc0036340
c0017a3a:	e8 65 19 01 00       	call   c00293a4 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0017a3f:	83 c4 10             	add    esp,0x10
c0017a42:	83 ec 04             	sub    esp,0x4
c0017a45:	68 00 f5 02 c0       	push   0xc002f500
c0017a4a:	68 40 63 03 c0       	push   0xc0036340
c0017a4f:	68 54 93 02 c0       	push   0xc0029354
c0017a54:	e8 63 62 ff ff       	call   c000dcbc <__cxa_atexit>
c0017a59:	83 c4 10             	add    esp,0x10
c0017a5c:	83 ec 0c             	sub    esp,0xc
c0017a5f:	68 34 63 03 c0       	push   0xc0036334
c0017a64:	e8 3b 19 01 00       	call   c00293a4 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0017a69:	83 c4 10             	add    esp,0x10
c0017a6c:	83 ec 04             	sub    esp,0x4
c0017a6f:	68 00 f5 02 c0       	push   0xc002f500
c0017a74:	68 34 63 03 c0       	push   0xc0036334
c0017a79:	68 54 93 02 c0       	push   0xc0029354
c0017a7e:	e8 39 62 ff ff       	call   c000dcbc <__cxa_atexit>
c0017a83:	83 c4 10             	add    esp,0x10
c0017a86:	66 90                	xchg   ax,ax
c0017a88:	90                   	nop
c0017a89:	83 c4 0c             	add    esp,0xc
c0017a8c:	c3                   	ret    
c0017a8d:	8d 76 00             	lea    esi,[esi+0x0]

c0017a90 <_GLOBAL__sub_I_keNextPID>:
c0017a90:	83 ec 0c             	sub    esp,0xc
c0017a93:	83 ec 08             	sub    esp,0x8
c0017a96:	68 ff ff 00 00       	push   0xffff
c0017a9b:	6a 01                	push   0x1
c0017a9d:	e8 4a ff ff ff       	call   c00179ec <__static_initialization_and_destruction_0(int, int)>
c0017aa2:	83 c4 10             	add    esp,0x10
c0017aa5:	83 c4 0c             	add    esp,0xc
c0017aa8:	c3                   	ret    

c0017aa9 <Vm::inbv(unsigned short)>:
c0017aa9:	55                   	push   ebp
c0017aaa:	89 e5                	mov    ebp,esp
c0017aac:	83 ec 14             	sub    esp,0x14
c0017aaf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017ab2:	66 89 45 ec          	mov    WORD PTR [ebp-0x14],ax
c0017ab6:	0f b7 45 ec          	movzx  eax,WORD PTR [ebp-0x14]
c0017aba:	3d fe fe 00 00       	cmp    eax,0xfefe
c0017abf:	75 07                	jne    c0017ac8 <Vm::inbv(unsigned short)+0x1f>
c0017ac1:	a1 90 63 03 c0       	mov    eax,ds:0xc0036390
c0017ac6:	eb 16                	jmp    c0017ade <Vm::inbv(unsigned short)+0x35>
c0017ac8:	0f b7 45 ec          	movzx  eax,WORD PTR [ebp-0x14]
c0017acc:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0017ad0:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c0017ad4:	89 c2                	mov    edx,eax
c0017ad6:	ec                   	in     al,dx
c0017ad7:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c0017ada:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0017add:	90                   	nop
c0017ade:	c9                   	leave  
c0017adf:	c3                   	ret    

c0017ae0 <Vm::outbv(unsigned short, unsigned char)>:
c0017ae0:	55                   	push   ebp
c0017ae1:	89 e5                	mov    ebp,esp
c0017ae3:	83 ec 18             	sub    esp,0x18
c0017ae6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017ae9:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0017aec:	66 89 45 ec          	mov    WORD PTR [ebp-0x14],ax
c0017af0:	88 d0                	mov    al,dl
c0017af2:	88 45 e8             	mov    BYTE PTR [ebp-0x18],al
c0017af5:	0f b7 45 ec          	movzx  eax,WORD PTR [ebp-0x14]
c0017af9:	3d fe fe 00 00       	cmp    eax,0xfefe
c0017afe:	75 2d                	jne    c0017b2d <Vm::outbv(unsigned short, unsigned char)+0x4d>
c0017b00:	a1 90 63 03 c0       	mov    eax,ds:0xc0036390
c0017b05:	8d 50 01             	lea    edx,[eax+0x1]
c0017b08:	89 15 90 63 03 c0    	mov    DWORD PTR ds:0xc0036390,edx
c0017b0e:	8a 55 e8             	mov    dl,BYTE PTR [ebp-0x18]
c0017b11:	88 90 a0 63 03 c0    	mov    BYTE PTR [eax-0x3ffc9c60],dl
c0017b17:	a1 90 63 03 c0       	mov    eax,ds:0xc0036390
c0017b1c:	83 f8 20             	cmp    eax,0x20
c0017b1f:	75 23                	jne    c0017b44 <Vm::outbv(unsigned short, unsigned char)+0x64>
c0017b21:	c7 05 90 63 03 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc0036390,0x1f
c0017b2b:	eb 17                	jmp    c0017b44 <Vm::outbv(unsigned short, unsigned char)+0x64>
c0017b2d:	0f b6 55 e8          	movzx  edx,BYTE PTR [ebp-0x18]
c0017b31:	0f b7 45 ec          	movzx  eax,WORD PTR [ebp-0x14]
c0017b35:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0017b39:	88 55 fd             	mov    BYTE PTR [ebp-0x3],dl
c0017b3c:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0017b3f:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0017b43:	ee                   	out    dx,al
c0017b44:	90                   	nop
c0017b45:	c9                   	leave  
c0017b46:	c3                   	ret    

c0017b47 <Vm::realToLinear(unsigned short, unsigned short)>:
c0017b47:	55                   	push   ebp
c0017b48:	89 e5                	mov    ebp,esp
c0017b4a:	83 ec 08             	sub    esp,0x8
c0017b4d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0017b50:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0017b53:	66 89 55 fc          	mov    WORD PTR [ebp-0x4],dx
c0017b57:	66 89 45 f8          	mov    WORD PTR [ebp-0x8],ax
c0017b5b:	0f b7 45 fc          	movzx  eax,WORD PTR [ebp-0x4]
c0017b5f:	c1 e0 04             	shl    eax,0x4
c0017b62:	89 c2                	mov    edx,eax
c0017b64:	0f b7 45 f8          	movzx  eax,WORD PTR [ebp-0x8]
c0017b68:	01 d0                	add    eax,edx
c0017b6a:	c9                   	leave  
c0017b6b:	c3                   	ret    

c0017b6c <Vm::getSegment(unsigned int)>:
c0017b6c:	55                   	push   ebp
c0017b6d:	89 e5                	mov    ebp,esp
c0017b6f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017b72:	c1 e8 10             	shr    eax,0x10
c0017b75:	5d                   	pop    ebp
c0017b76:	c3                   	ret    

c0017b77 <Vm::getOffset(unsigned int)>:
c0017b77:	55                   	push   ebp
c0017b78:	89 e5                	mov    ebp,esp
c0017b7a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017b7d:	5d                   	pop    ebp
c0017b7e:	c3                   	ret    

c0017b7f <Vm::mainloop2()>:
c0017b7f:	55                   	push   ebp
c0017b80:	89 e5                	mov    ebp,esp
c0017b82:	53                   	push   ebx
c0017b83:	83 ec 04             	sub    esp,0x4
c0017b86:	fa                   	cli    
c0017b87:	a1 30 63 03 c0       	mov    eax,ds:0xc0036330
c0017b8c:	83 c0 01             	add    eax,0x1
c0017b8f:	a3 30 63 03 c0       	mov    ds:0xc0036330,eax
c0017b94:	c6 05 89 63 03 c0 01 	mov    BYTE PTR ds:0xc0036389,0x1
c0017b9b:	83 ec 0c             	sub    esp,0xc
c0017b9e:	6a 02                	push   0x2
c0017ba0:	e8 d7 f5 ff ff       	call   c001717c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0017ba5:	83 c4 10             	add    esp,0x10
c0017ba8:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017bad:	8b 00                	mov    eax,DWORD PTR [eax]
c0017baf:	66 8b 40 5f          	mov    ax,WORD PTR [eax+0x5f]
c0017bb3:	0f b7 d8             	movzx  ebx,ax
c0017bb6:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017bbb:	8b 00                	mov    eax,DWORD PTR [eax]
c0017bbd:	66 8b 40 5d          	mov    ax,WORD PTR [eax+0x5d]
c0017bc1:	0f b7 c8             	movzx  ecx,ax
c0017bc4:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017bc9:	8b 00                	mov    eax,DWORD PTR [eax]
c0017bcb:	66 8b 40 5b          	mov    ax,WORD PTR [eax+0x5b]
c0017bcf:	0f b7 d0             	movzx  edx,ax
c0017bd2:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017bd7:	8b 00                	mov    eax,DWORD PTR [eax]
c0017bd9:	66 8b 40 59          	mov    ax,WORD PTR [eax+0x59]
c0017bdd:	0f b7 c0             	movzx  eax,ax
c0017be0:	53                   	push   ebx
c0017be1:	51                   	push   ecx
c0017be2:	52                   	push   edx
c0017be3:	50                   	push   eax
c0017be4:	e8 26 86 fe ff       	call   c000020f <goToVM86>
c0017be9:	83 c4 10             	add    esp,0x10
c0017bec:	90                   	nop
c0017bed:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0017bf0:	c9                   	leave  
c0017bf1:	c3                   	ret    

c0017bf2 <Vm::mainVm8086Loop(void*)>:
c0017bf2:	55                   	push   ebp
c0017bf3:	89 e5                	mov    ebp,esp
c0017bf5:	83 ec 08             	sub    esp,0x8
c0017bf8:	f0 83 2d 30 63 03 c0 01 	lock sub DWORD PTR ds:0xc0036330,0x1
c0017c00:	a1 30 63 03 c0       	mov    eax,ds:0xc0036330
c0017c05:	85 c0                	test   eax,eax
c0017c07:	75 01                	jne    c0017c0a <Vm::mainVm8086Loop(void*)+0x18>
c0017c09:	fb                   	sti    
c0017c0a:	e8 70 ff ff ff       	call   c0017b7f <Vm::mainloop2()>
c0017c0f:	90                   	nop
c0017c10:	c9                   	leave  
c0017c11:	c3                   	ret    

c0017c12 <Vm::mainloop3(unsigned long)>:
c0017c12:	55                   	push   ebp
c0017c13:	89 e5                	mov    ebp,esp
c0017c15:	83 ec 08             	sub    esp,0x8
c0017c18:	fa                   	cli    
c0017c19:	a1 30 63 03 c0       	mov    eax,ds:0xc0036330
c0017c1e:	83 c0 01             	add    eax,0x1
c0017c21:	a3 30 63 03 c0       	mov    ds:0xc0036330,eax
c0017c26:	c6 05 88 63 03 c0 01 	mov    BYTE PTR ds:0xc0036388,0x1
c0017c2d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017c30:	a3 84 63 03 c0       	mov    ds:0xc0036384,eax
c0017c35:	83 ec 0c             	sub    esp,0xc
c0017c38:	6a 02                	push   0x2
c0017c3a:	e8 3d f5 ff ff       	call   c001717c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0017c3f:	83 c4 10             	add    esp,0x10
c0017c42:	e8 38 ff ff ff       	call   c0017b7f <Vm::mainloop2()>
c0017c47:	90                   	nop
c0017c48:	c9                   	leave  
c0017c49:	c3                   	ret    

c0017c4a <Vm::initialise8086()>:
c0017c4a:	55                   	push   ebp
c0017c4b:	89 e5                	mov    ebp,esp
c0017c4d:	83 ec 08             	sub    esp,0x8
c0017c50:	a1 58 63 03 c0       	mov    eax,ds:0xc0036358
c0017c55:	68 80 00 00 00       	push   0x80
c0017c5a:	6a 00                	push   0x0
c0017c5c:	68 f2 7b 01 c0       	push   0xc0017bf2
c0017c61:	50                   	push   eax
c0017c62:	e8 cd f1 ff ff       	call   c0016e34 <Process::createThread(void (*)(void*), void*, int)>
c0017c67:	83 c4 10             	add    esp,0x10
c0017c6a:	a3 8c 63 03 c0       	mov    ds:0xc003638c,eax
c0017c6f:	a1 58 63 03 c0       	mov    eax,ds:0xc0036358
c0017c74:	8b 80 b2 05 00 00    	mov    eax,DWORD PTR [eax+0x5b2]
c0017c7a:	83 ec 0c             	sub    esp,0xc
c0017c7d:	6a 07                	push   0x7
c0017c7f:	68 10 01 00 00       	push   0x110
c0017c84:	6a 00                	push   0x0
c0017c86:	6a 00                	push   0x0
c0017c88:	50                   	push   eax
c0017c89:	e8 ec c6 ff ff       	call   c001437a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017c8e:	83 c4 20             	add    esp,0x20
c0017c91:	90                   	nop
c0017c92:	c9                   	leave  
c0017c93:	c3                   	ret    

c0017c94 <Vm::finish8086()>:
c0017c94:	55                   	push   ebp
c0017c95:	89 e5                	mov    ebp,esp
c0017c97:	83 ec 18             	sub    esp,0x18
c0017c9a:	fa                   	cli    
c0017c9b:	a1 30 63 03 c0       	mov    eax,ds:0xc0036330
c0017ca0:	83 c0 01             	add    eax,0x1
c0017ca3:	a3 30 63 03 c0       	mov    ds:0xc0036330,eax
c0017ca8:	a0 88 63 03 c0       	mov    al,ds:0xc0036388
c0017cad:	0f b6 c0             	movzx  eax,al
c0017cb0:	85 c0                	test   eax,eax
c0017cb2:	75 19                	jne    c0017ccd <Vm::finish8086()+0x39>
c0017cb4:	e8 2f f4 ff ff       	call   c00170e8 <schedule()>
c0017cb9:	f0 83 2d 30 63 03 c0 01 	lock sub DWORD PTR ds:0xc0036330,0x1
c0017cc1:	a1 30 63 03 c0       	mov    eax,ds:0xc0036330
c0017cc6:	85 c0                	test   eax,eax
c0017cc8:	75 d0                	jne    c0017c9a <Vm::finish8086()+0x6>
c0017cca:	fb                   	sti    
c0017ccb:	eb cd                	jmp    c0017c9a <Vm::finish8086()+0x6>
c0017ccd:	90                   	nop
c0017cce:	a1 84 63 03 c0       	mov    eax,ds:0xc0036384
c0017cd3:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0017cd6:	c6 05 88 63 03 c0 00 	mov    BYTE PTR ds:0xc0036388,0x0
c0017cdd:	a1 8c 63 03 c0       	mov    eax,ds:0xc003638c
c0017ce2:	83 ec 0c             	sub    esp,0xc
c0017ce5:	50                   	push   eax
c0017ce6:	e8 55 f7 ff ff       	call   c0017440 <unblockTask(ThreadControlBlock*)>
c0017ceb:	83 c4 10             	add    esp,0x10
c0017cee:	f0 83 2d 30 63 03 c0 01 	lock sub DWORD PTR ds:0xc0036330,0x1
c0017cf6:	a1 30 63 03 c0       	mov    eax,ds:0xc0036330
c0017cfb:	85 c0                	test   eax,eax
c0017cfd:	75 01                	jne    c0017d00 <Vm::finish8086()+0x6c>
c0017cff:	fb                   	sti    
c0017d00:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0017d03:	c9                   	leave  
c0017d04:	c3                   	ret    

c0017d05 <Vm::getOutput8086(unsigned char*)>:
c0017d05:	55                   	push   ebp
c0017d06:	89 e5                	mov    ebp,esp
c0017d08:	57                   	push   edi
c0017d09:	56                   	push   esi
c0017d0a:	53                   	push   ebx
c0017d0b:	83 ec 20             	sub    esp,0x20
c0017d0e:	a1 90 63 03 c0       	mov    eax,ds:0xc0036390
c0017d13:	89 c2                	mov    edx,eax
c0017d15:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017d18:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0017d1b:	c7 45 e8 a0 63 03 c0 	mov    DWORD PTR [ebp-0x18],0xc00363a0
c0017d22:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0017d25:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0017d28:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0017d2b:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0017d2e:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0017d31:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c0017d34:	89 c6                	mov    esi,eax
c0017d36:	89 d7                	mov    edi,edx
c0017d38:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017d3a:	89 c8                	mov    eax,ecx
c0017d3c:	89 fa                	mov    edx,edi
c0017d3e:	89 f3                	mov    ebx,esi
c0017d40:	89 5d dc             	mov    DWORD PTR [ebp-0x24],ebx
c0017d43:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c0017d46:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0017d49:	a1 90 63 03 c0       	mov    eax,ds:0xc0036390
c0017d4e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0017d51:	c7 05 90 63 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0036390,0x0
c0017d5b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0017d5e:	83 c4 20             	add    esp,0x20
c0017d61:	5b                   	pop    ebx
c0017d62:	5e                   	pop    esi
c0017d63:	5f                   	pop    edi
c0017d64:	5d                   	pop    ebp
c0017d65:	c3                   	ret    

c0017d66 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0017d66:	55                   	push   ebp
c0017d67:	89 e5                	mov    ebp,esp
c0017d69:	57                   	push   edi
c0017d6a:	56                   	push   esi
c0017d6b:	53                   	push   ebx
c0017d6c:	83 ec 3c             	sub    esp,0x3c
c0017d6f:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c0017d72:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0017d75:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0017d78:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
c0017d7b:	66 89 5d c4          	mov    WORD PTR [ebp-0x3c],bx
c0017d7f:	66 89 4d c0          	mov    WORD PTR [ebp-0x40],cx
c0017d83:	66 89 55 bc          	mov    WORD PTR [ebp-0x44],dx
c0017d87:	66 89 45 b8          	mov    WORD PTR [ebp-0x48],ax
c0017d8b:	a0 80 63 03 c0       	mov    al,ds:0xc0036380
c0017d90:	83 f0 01             	xor    eax,0x1
c0017d93:	0f b6 c0             	movzx  eax,al
c0017d96:	85 c0                	test   eax,eax
c0017d98:	74 07                	je     c0017da1 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3b>
c0017d9a:	c6 05 80 63 03 c0 01 	mov    BYTE PTR ds:0xc0036380,0x1
c0017da1:	fa                   	cli    
c0017da2:	a1 30 63 03 c0       	mov    eax,ds:0xc0036330
c0017da7:	83 c0 01             	add    eax,0x1
c0017daa:	a3 30 63 03 c0       	mov    ds:0xc0036330,eax
c0017daf:	a0 89 63 03 c0       	mov    al,ds:0xc0036389
c0017db4:	0f b6 c0             	movzx  eax,al
c0017db7:	85 c0                	test   eax,eax
c0017db9:	75 19                	jne    c0017dd4 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x6e>
c0017dbb:	e8 28 f3 ff ff       	call   c00170e8 <schedule()>
c0017dc0:	f0 83 2d 30 63 03 c0 01 	lock sub DWORD PTR ds:0xc0036330,0x1
c0017dc8:	a1 30 63 03 c0       	mov    eax,ds:0xc0036330
c0017dcd:	85 c0                	test   eax,eax
c0017dcf:	75 d0                	jne    c0017da1 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3b>
c0017dd1:	fb                   	sti    
c0017dd2:	eb cd                	jmp    c0017da1 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3b>
c0017dd4:	90                   	nop
c0017dd5:	a1 8c 63 03 c0       	mov    eax,ds:0xc003638c
c0017dda:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c0017ddd:	66 89 50 59          	mov    WORD PTR [eax+0x59],dx
c0017de1:	a1 8c 63 03 c0       	mov    eax,ds:0xc003638c
c0017de6:	8b 55 c0             	mov    edx,DWORD PTR [ebp-0x40]
c0017de9:	66 89 50 5b          	mov    WORD PTR [eax+0x5b],dx
c0017ded:	a1 8c 63 03 c0       	mov    eax,ds:0xc003638c
c0017df2:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c0017df5:	66 89 50 5d          	mov    WORD PTR [eax+0x5d],dx
c0017df9:	a1 8c 63 03 c0       	mov    eax,ds:0xc003638c
c0017dfe:	8b 55 b8             	mov    edx,DWORD PTR [ebp-0x48]
c0017e01:	66 89 50 5f          	mov    WORD PTR [eax+0x5f],dx
c0017e05:	a1 8c 63 03 c0       	mov    eax,ds:0xc003638c
c0017e0a:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c0017e0e:	c7 05 90 63 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0036390,0x0
c0017e18:	83 ec 04             	sub    esp,0x4
c0017e1b:	6a 20                	push   0x20
c0017e1d:	6a 00                	push   0x0
c0017e1f:	68 a0 63 03 c0       	push   0xc00363a0
c0017e24:	e8 c7 86 fe ff       	call   c00004f0 <memset>
c0017e29:	83 c4 10             	add    esp,0x10
c0017e2c:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0017e2f:	0f b7 55 c4          	movzx  edx,WORD PTR [ebp-0x3c]
c0017e33:	0f b7 45 c0          	movzx  eax,WORD PTR [ebp-0x40]
c0017e37:	83 ec 08             	sub    esp,0x8
c0017e3a:	52                   	push   edx
c0017e3b:	50                   	push   eax
c0017e3c:	e8 06 fd ff ff       	call   c0017b47 <Vm::realToLinear(unsigned short, unsigned short)>
c0017e41:	83 c4 10             	add    esp,0x10
c0017e44:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0017e47:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017e4a:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0017e4d:	89 5d dc             	mov    DWORD PTR [ebp-0x24],ebx
c0017e50:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0017e53:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0017e56:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0017e59:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0017e5c:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c0017e5f:	89 c6                	mov    esi,eax
c0017e61:	89 d7                	mov    edi,edx
c0017e63:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017e65:	89 c8                	mov    eax,ecx
c0017e67:	89 fa                	mov    edx,edi
c0017e69:	89 f3                	mov    ebx,esi
c0017e6b:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c0017e6e:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c0017e71:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0017e74:	c6 05 89 63 03 c0 00 	mov    BYTE PTR ds:0xc0036389,0x0
c0017e7b:	f0 83 2d 30 63 03 c0 01 	lock sub DWORD PTR ds:0xc0036330,0x1
c0017e83:	a1 30 63 03 c0       	mov    eax,ds:0xc0036330
c0017e88:	85 c0                	test   eax,eax
c0017e8a:	75 01                	jne    c0017e8d <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x127>
c0017e8c:	fb                   	sti    
c0017e8d:	a1 8c 63 03 c0       	mov    eax,ds:0xc003638c
c0017e92:	83 ec 0c             	sub    esp,0xc
c0017e95:	50                   	push   eax
c0017e96:	e8 a5 f5 ff ff       	call   c0017440 <unblockTask(ThreadControlBlock*)>
c0017e9b:	83 c4 10             	add    esp,0x10
c0017e9e:	b0 01                	mov    al,0x1
c0017ea0:	8d 65 f4             	lea    esp,[ebp-0xc]
c0017ea3:	5b                   	pop    ebx
c0017ea4:	5e                   	pop    esi
c0017ea5:	5f                   	pop    edi
c0017ea6:	5d                   	pop    ebp
c0017ea7:	c3                   	ret    

c0017ea8 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0017ea8:	55                   	push   ebp
c0017ea9:	89 e5                	mov    ebp,esp
c0017eab:	56                   	push   esi
c0017eac:	53                   	push   ebx
c0017ead:	83 ec 30             	sub    esp,0x30
c0017eb0:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0017eb3:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0017eb6:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0017eb9:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0017ebc:	66 89 5d d4          	mov    WORD PTR [ebp-0x2c],bx
c0017ec0:	66 89 4d d0          	mov    WORD PTR [ebp-0x30],cx
c0017ec4:	66 89 55 cc          	mov    WORD PTR [ebp-0x34],dx
c0017ec8:	66 89 45 c8          	mov    WORD PTR [ebp-0x38],ax
c0017ecc:	a0 80 63 03 c0       	mov    al,ds:0xc0036380
c0017ed1:	83 f0 01             	xor    eax,0x1
c0017ed4:	0f b6 c0             	movzx  eax,al
c0017ed7:	85 c0                	test   eax,eax
c0017ed9:	74 07                	je     c0017ee2 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x3a>
c0017edb:	c6 05 80 63 03 c0 01 	mov    BYTE PTR ds:0xc0036380,0x1
c0017ee2:	83 ec 08             	sub    esp,0x8
c0017ee5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0017ee8:	68 18 c3 02 c0       	push   0xc002c318
c0017eed:	e8 74 f0 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0017ef2:	83 c4 10             	add    esp,0x10
c0017ef5:	fa                   	cli    
c0017ef6:	a1 30 63 03 c0       	mov    eax,ds:0xc0036330
c0017efb:	83 c0 01             	add    eax,0x1
c0017efe:	a3 30 63 03 c0       	mov    ds:0xc0036330,eax
c0017f03:	a0 89 63 03 c0       	mov    al,ds:0xc0036389
c0017f08:	0f b6 c0             	movzx  eax,al
c0017f0b:	85 c0                	test   eax,eax
c0017f0d:	75 19                	jne    c0017f28 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x80>
c0017f0f:	e8 d4 f1 ff ff       	call   c00170e8 <schedule()>
c0017f14:	f0 83 2d 30 63 03 c0 01 	lock sub DWORD PTR ds:0xc0036330,0x1
c0017f1c:	a1 30 63 03 c0       	mov    eax,ds:0xc0036330
c0017f21:	85 c0                	test   eax,eax
c0017f23:	75 d0                	jne    c0017ef5 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x4d>
c0017f25:	fb                   	sti    
c0017f26:	eb cd                	jmp    c0017ef5 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x4d>
c0017f28:	90                   	nop
c0017f29:	a1 8c 63 03 c0       	mov    eax,ds:0xc003638c
c0017f2e:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0017f31:	66 89 50 59          	mov    WORD PTR [eax+0x59],dx
c0017f35:	a1 8c 63 03 c0       	mov    eax,ds:0xc003638c
c0017f3a:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0017f3d:	66 89 50 5b          	mov    WORD PTR [eax+0x5b],dx
c0017f41:	a1 8c 63 03 c0       	mov    eax,ds:0xc003638c
c0017f46:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0017f49:	66 89 50 5d          	mov    WORD PTR [eax+0x5d],dx
c0017f4d:	a1 8c 63 03 c0       	mov    eax,ds:0xc003638c
c0017f52:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c0017f55:	66 89 50 5f          	mov    WORD PTR [eax+0x5f],dx
c0017f59:	a1 8c 63 03 c0       	mov    eax,ds:0xc003638c
c0017f5e:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c0017f62:	c7 05 90 63 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0036390,0x0
c0017f6c:	83 ec 04             	sub    esp,0x4
c0017f6f:	6a 20                	push   0x20
c0017f71:	6a 00                	push   0x0
c0017f73:	68 a0 63 03 c0       	push   0xc00363a0
c0017f78:	e8 73 85 fe ff       	call   c00004f0 <memset>
c0017f7d:	83 c4 10             	add    esp,0x10
c0017f80:	c7 45 ec 14 01 00 00 	mov    DWORD PTR [ebp-0x14],0x114
c0017f87:	83 ec 0c             	sub    esp,0xc
c0017f8a:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0017f8d:	e8 7a 81 ff ff       	call   c001010c <malloc>
c0017f92:	83 c4 10             	add    esp,0x10
c0017f95:	89 c3                	mov    ebx,eax
c0017f97:	a1 58 63 03 c0       	mov    eax,ds:0xc0036358
c0017f9c:	83 ec 04             	sub    esp,0x4
c0017f9f:	50                   	push   eax
c0017fa0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0017fa3:	53                   	push   ebx
c0017fa4:	e8 09 0c ff ff       	call   c0008bb2 <File::File(char const*, Process*)>
c0017fa9:	83 c4 10             	add    esp,0x10
c0017fac:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0017faf:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0017fb3:	75 29                	jne    c0017fde <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x136>
c0017fb5:	83 ec 0c             	sub    esp,0xc
c0017fb8:	68 3a c3 02 c0       	push   0xc002c33a
c0017fbd:	e8 9e 85 ff ff       	call   c0010560 <KePanic(char const*)>
c0017fc2:	83 c4 10             	add    esp,0x10
c0017fc5:	f0 83 2d 30 63 03 c0 01 	lock sub DWORD PTR ds:0xc0036330,0x1
c0017fcd:	a1 30 63 03 c0       	mov    eax,ds:0xc0036330
c0017fd2:	85 c0                	test   eax,eax
c0017fd4:	75 01                	jne    c0017fd7 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x12f>
c0017fd6:	fb                   	sti    
c0017fd7:	b0 00                	mov    al,0x0
c0017fd9:	e9 fb 00 00 00       	jmp    c00180d9 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x231>
c0017fde:	83 ec 04             	sub    esp,0x4
c0017fe1:	8d 45 df             	lea    eax,[ebp-0x21]
c0017fe4:	50                   	push   eax
c0017fe5:	8d 45 e0             	lea    eax,[ebp-0x20]
c0017fe8:	50                   	push   eax
c0017fe9:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0017fec:	e8 e1 0e ff ff       	call   c0008ed2 <File::stat(unsigned long long*, bool*)>
c0017ff1:	83 c4 10             	add    esp,0x10
c0017ff4:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c0017ff7:	0f b6 c0             	movzx  eax,al
c0017ffa:	85 c0                	test   eax,eax
c0017ffc:	74 29                	je     c0018027 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17f>
c0017ffe:	83 ec 0c             	sub    esp,0xc
c0018001:	68 4e c3 02 c0       	push   0xc002c34e
c0018006:	e8 55 85 ff ff       	call   c0010560 <KePanic(char const*)>
c001800b:	83 c4 10             	add    esp,0x10
c001800e:	f0 83 2d 30 63 03 c0 01 	lock sub DWORD PTR ds:0xc0036330,0x1
c0018016:	a1 30 63 03 c0       	mov    eax,ds:0xc0036330
c001801b:	85 c0                	test   eax,eax
c001801d:	75 01                	jne    c0018020 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x178>
c001801f:	fb                   	sti    
c0018020:	b0 00                	mov    al,0x0
c0018022:	e9 b2 00 00 00       	jmp    c00180d9 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x231>
c0018027:	83 ec 08             	sub    esp,0x8
c001802a:	6a 01                	push   0x1
c001802c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001802f:	e8 9c 0b ff ff       	call   c0008bd0 <File::open(FileOpenMode)>
c0018034:	83 c4 10             	add    esp,0x10
c0018037:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001803a:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
c001803e:	74 26                	je     c0018066 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x1be>
c0018040:	83 ec 0c             	sub    esp,0xc
c0018043:	68 67 c3 02 c0       	push   0xc002c367
c0018048:	e8 13 85 ff ff       	call   c0010560 <KePanic(char const*)>
c001804d:	83 c4 10             	add    esp,0x10
c0018050:	f0 83 2d 30 63 03 c0 01 	lock sub DWORD PTR ds:0xc0036330,0x1
c0018058:	a1 30 63 03 c0       	mov    eax,ds:0xc0036330
c001805d:	85 c0                	test   eax,eax
c001805f:	75 01                	jne    c0018062 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x1ba>
c0018061:	fb                   	sti    
c0018062:	b0 00                	mov    al,0x0
c0018064:	eb 73                	jmp    c00180d9 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x231>
c0018066:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0018069:	8b 00                	mov    eax,DWORD PTR [eax]
c001806b:	83 c0 0c             	add    eax,0xc
c001806e:	8b 18                	mov    ebx,DWORD PTR [eax]
c0018070:	0f b7 55 d4          	movzx  edx,WORD PTR [ebp-0x2c]
c0018074:	0f b7 45 d0          	movzx  eax,WORD PTR [ebp-0x30]
c0018078:	83 ec 08             	sub    esp,0x8
c001807b:	52                   	push   edx
c001807c:	50                   	push   eax
c001807d:	e8 c5 fa ff ff       	call   c0017b47 <Vm::realToLinear(unsigned short, unsigned short)>
c0018082:	83 c4 10             	add    esp,0x10
c0018085:	89 c6                	mov    esi,eax
c0018087:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c001808a:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001808d:	83 ec 0c             	sub    esp,0xc
c0018090:	8d 4d d8             	lea    ecx,[ebp-0x28]
c0018093:	51                   	push   ecx
c0018094:	56                   	push   esi
c0018095:	52                   	push   edx
c0018096:	50                   	push   eax
c0018097:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001809a:	ff d3                	call   ebx
c001809c:	83 c4 20             	add    esp,0x20
c001809f:	83 ec 0c             	sub    esp,0xc
c00180a2:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00180a5:	e8 84 0b ff ff       	call   c0008c2e <File::close()>
c00180aa:	83 c4 10             	add    esp,0x10
c00180ad:	c6 05 89 63 03 c0 00 	mov    BYTE PTR ds:0xc0036389,0x0
c00180b4:	f0 83 2d 30 63 03 c0 01 	lock sub DWORD PTR ds:0xc0036330,0x1
c00180bc:	a1 30 63 03 c0       	mov    eax,ds:0xc0036330
c00180c1:	85 c0                	test   eax,eax
c00180c3:	75 01                	jne    c00180c6 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x21e>
c00180c5:	fb                   	sti    
c00180c6:	a1 8c 63 03 c0       	mov    eax,ds:0xc003638c
c00180cb:	83 ec 0c             	sub    esp,0xc
c00180ce:	50                   	push   eax
c00180cf:	e8 6c f3 ff ff       	call   c0017440 <unblockTask(ThreadControlBlock*)>
c00180d4:	83 c4 10             	add    esp,0x10
c00180d7:	b0 01                	mov    al,0x1
c00180d9:	8d 65 f8             	lea    esp,[ebp-0x8]
c00180dc:	5b                   	pop    ebx
c00180dd:	5e                   	pop    esi
c00180de:	5d                   	pop    ebp
c00180df:	c3                   	ret    

c00180e0 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c00180e0:	55                   	push   ebp
c00180e1:	89 e5                	mov    ebp,esp
c00180e3:	83 ec 68             	sub    esp,0x68
c00180e6:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00180e9:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c00180ec:	66 89 55 9c          	mov    WORD PTR [ebp-0x64],dx
c00180f0:	66 89 45 98          	mov    WORD PTR [ebp-0x68],ax
c00180f4:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
c00180fb:	8b 45 98             	mov    eax,DWORD PTR [ebp-0x68]
c00180fe:	83 e8 06             	sub    eax,0x6
c0018101:	66 89 45 98          	mov    WORD PTR [ebp-0x68],ax
c0018105:	0f b7 55 98          	movzx  edx,WORD PTR [ebp-0x68]
c0018109:	0f b7 45 9c          	movzx  eax,WORD PTR [ebp-0x64]
c001810d:	52                   	push   edx
c001810e:	50                   	push   eax
c001810f:	e8 33 fa ff ff       	call   c0017b47 <Vm::realToLinear(unsigned short, unsigned short)>
c0018114:	83 c4 08             	add    esp,0x8
c0018117:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
c001811a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001811d:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0018120:	83 e8 06             	sub    eax,0x6
c0018123:	0f b7 d0             	movzx  edx,ax
c0018126:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018129:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c001812c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001812f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018132:	83 c0 02             	add    eax,0x2
c0018135:	0f b7 c0             	movzx  eax,ax
c0018138:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
c001813b:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
c001813e:	66 89 45 da          	mov    WORD PTR [ebp-0x26],ax
c0018142:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0018145:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0018148:	66 8b 45 da          	mov    ax,WORD PTR [ebp-0x26]
c001814c:	88 c2                	mov    dl,al
c001814e:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c0018151:	88 10                	mov    BYTE PTR [eax],dl
c0018153:	0f b7 45 da          	movzx  eax,WORD PTR [ebp-0x26]
c0018157:	c1 e8 08             	shr    eax,0x8
c001815a:	89 c2                	mov    edx,eax
c001815c:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c001815f:	83 c0 01             	add    eax,0x1
c0018162:	88 10                	mov    BYTE PTR [eax],dl
c0018164:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018167:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001816a:	0f b7 c0             	movzx  eax,ax
c001816d:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
c0018170:	83 c2 02             	add    edx,0x2
c0018173:	89 55 e8             	mov    DWORD PTR [ebp-0x18],edx
c0018176:	66 89 45 e6          	mov    WORD PTR [ebp-0x1a],ax
c001817a:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001817d:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0018180:	66 8b 45 e6          	mov    ax,WORD PTR [ebp-0x1a]
c0018184:	88 c2                	mov    dl,al
c0018186:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0018189:	88 10                	mov    BYTE PTR [eax],dl
c001818b:	0f b7 45 e6          	movzx  eax,WORD PTR [ebp-0x1a]
c001818f:	c1 e8 08             	shr    eax,0x8
c0018192:	89 c2                	mov    edx,eax
c0018194:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0018197:	83 c0 01             	add    eax,0x1
c001819a:	88 10                	mov    BYTE PTR [eax],dl
c001819c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001819f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00181a2:	0f b7 c0             	movzx  eax,ax
c00181a5:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
c00181a8:	83 c2 04             	add    edx,0x4
c00181ab:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00181ae:	66 89 45 f2          	mov    WORD PTR [ebp-0xe],ax
c00181b2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00181b5:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00181b8:	66 8b 45 f2          	mov    ax,WORD PTR [ebp-0xe]
c00181bc:	88 c2                	mov    dl,al
c00181be:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00181c1:	88 10                	mov    BYTE PTR [eax],dl
c00181c3:	0f b7 45 f2          	movzx  eax,WORD PTR [ebp-0xe]
c00181c7:	c1 e8 08             	shr    eax,0x8
c00181ca:	89 c2                	mov    edx,eax
c00181cc:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00181cf:	83 c0 01             	add    eax,0x1
c00181d2:	88 10                	mov    BYTE PTR [eax],dl
c00181d4:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00181d9:	8b 00                	mov    eax,DWORD PTR [eax]
c00181db:	8a 40 61             	mov    al,BYTE PTR [eax+0x61]
c00181de:	0f b6 c0             	movzx  eax,al
c00181e1:	85 c0                	test   eax,eax
c00181e3:	74 5e                	je     c0018243 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x163>
c00181e5:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
c00181e8:	83 c0 04             	add    eax,0x4
c00181eb:	89 45 c4             	mov    DWORD PTR [ebp-0x3c],eax
c00181ee:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c00181f1:	89 45 c0             	mov    DWORD PTR [ebp-0x40],eax
c00181f4:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c00181f7:	8a 00                	mov    al,BYTE PTR [eax]
c00181f9:	0f b6 c0             	movzx  eax,al
c00181fc:	8b 55 c0             	mov    edx,DWORD PTR [ebp-0x40]
c00181ff:	83 c2 01             	add    edx,0x1
c0018202:	8a 12                	mov    dl,BYTE PTR [edx]
c0018204:	0f b6 d2             	movzx  edx,dl
c0018207:	c1 e2 08             	shl    edx,0x8
c001820a:	09 d0                	or     eax,edx
c001820c:	80 cc 02             	or     ah,0x2
c001820f:	0f b7 c0             	movzx  eax,ax
c0018212:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
c0018215:	83 c2 04             	add    edx,0x4
c0018218:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c001821b:	66 89 45 ce          	mov    WORD PTR [ebp-0x32],ax
c001821f:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0018222:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0018225:	66 8b 45 ce          	mov    ax,WORD PTR [ebp-0x32]
c0018229:	88 c2                	mov    dl,al
c001822b:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c001822e:	88 10                	mov    BYTE PTR [eax],dl
c0018230:	0f b7 45 ce          	movzx  eax,WORD PTR [ebp-0x32]
c0018234:	c1 e8 08             	shr    eax,0x8
c0018237:	89 c2                	mov    edx,eax
c0018239:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c001823c:	83 c0 01             	add    eax,0x1
c001823f:	88 10                	mov    BYTE PTR [eax],dl
c0018241:	eb 5e                	jmp    c00182a1 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x1c1>
c0018243:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
c0018246:	83 c0 04             	add    eax,0x4
c0018249:	89 45 b0             	mov    DWORD PTR [ebp-0x50],eax
c001824c:	8b 45 b0             	mov    eax,DWORD PTR [ebp-0x50]
c001824f:	89 45 ac             	mov    DWORD PTR [ebp-0x54],eax
c0018252:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
c0018255:	8a 00                	mov    al,BYTE PTR [eax]
c0018257:	0f b6 c0             	movzx  eax,al
c001825a:	8b 55 ac             	mov    edx,DWORD PTR [ebp-0x54]
c001825d:	83 c2 01             	add    edx,0x1
c0018260:	8a 12                	mov    dl,BYTE PTR [edx]
c0018262:	0f b6 d2             	movzx  edx,dl
c0018265:	c1 e2 08             	shl    edx,0x8
c0018268:	09 d0                	or     eax,edx
c001826a:	0f b7 c0             	movzx  eax,ax
c001826d:	25 ff fd 00 00       	and    eax,0xfdff
c0018272:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
c0018275:	83 c2 04             	add    edx,0x4
c0018278:	89 55 bc             	mov    DWORD PTR [ebp-0x44],edx
c001827b:	66 89 45 ba          	mov    WORD PTR [ebp-0x46],ax
c001827f:	8b 45 bc             	mov    eax,DWORD PTR [ebp-0x44]
c0018282:	89 45 b4             	mov    DWORD PTR [ebp-0x4c],eax
c0018285:	66 8b 45 ba          	mov    ax,WORD PTR [ebp-0x46]
c0018289:	88 c2                	mov    dl,al
c001828b:	8b 45 b4             	mov    eax,DWORD PTR [ebp-0x4c]
c001828e:	88 10                	mov    BYTE PTR [eax],dl
c0018290:	0f b7 45 ba          	movzx  eax,WORD PTR [ebp-0x46]
c0018294:	c1 e8 08             	shr    eax,0x8
c0018297:	89 c2                	mov    edx,eax
c0018299:	8b 45 b4             	mov    eax,DWORD PTR [ebp-0x4c]
c001829c:	83 c0 01             	add    eax,0x1
c001829f:	88 10                	mov    BYTE PTR [eax],dl
c00182a1:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00182a6:	8b 00                	mov    eax,DWORD PTR [eax]
c00182a8:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c00182ac:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00182af:	c1 e0 02             	shl    eax,0x2
c00182b2:	8d 50 02             	lea    edx,[eax+0x2]
c00182b5:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00182b8:	01 d0                	add    eax,edx
c00182ba:	66 8b 00             	mov    ax,WORD PTR [eax]
c00182bd:	0f b7 d0             	movzx  edx,ax
c00182c0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00182c3:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c00182c6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00182c9:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00182d0:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00182d3:	01 d0                	add    eax,edx
c00182d5:	66 8b 00             	mov    ax,WORD PTR [eax]
c00182d8:	0f b7 d0             	movzx  edx,ax
c00182db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00182de:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00182e1:	90                   	nop
c00182e2:	c9                   	leave  
c00182e3:	c3                   	ret    

c00182e4 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c00182e4:	55                   	push   ebp
c00182e5:	89 e5                	mov    ebp,esp
c00182e7:	83 ec 28             	sub    esp,0x28
c00182ea:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00182ed:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00182f0:	66 89 55 e4          	mov    WORD PTR [ebp-0x1c],dx
c00182f4:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c00182f8:	0f b7 45 e4          	movzx  eax,WORD PTR [ebp-0x1c]
c00182fc:	c1 e0 04             	shl    eax,0x4
c00182ff:	89 c2                	mov    edx,eax
c0018301:	0f b7 45 e0          	movzx  eax,WORD PTR [ebp-0x20]
c0018305:	01 d0                	add    eax,edx
c0018307:	3d ff ff 0f 00       	cmp    eax,0xfffff
c001830c:	7e 10                	jle    c001831e <Vm::readByteFromReal(unsigned short, unsigned short)+0x3a>
c001830e:	83 ec 0c             	sub    esp,0xc
c0018311:	68 80 c3 02 c0       	push   0xc002c380
c0018316:	e8 45 82 ff ff       	call   c0010560 <KePanic(char const*)>
c001831b:	83 c4 10             	add    esp,0x10
c001831e:	0f b7 45 e4          	movzx  eax,WORD PTR [ebp-0x1c]
c0018322:	c1 e0 04             	shl    eax,0x4
c0018325:	89 c2                	mov    edx,eax
c0018327:	0f b7 45 e0          	movzx  eax,WORD PTR [ebp-0x20]
c001832b:	01 d0                	add    eax,edx
c001832d:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0018330:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0018333:	8a 00                	mov    al,BYTE PTR [eax]
c0018335:	c9                   	leave  
c0018336:	c3                   	ret    

c0018337 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0018337:	55                   	push   ebp
c0018338:	89 e5                	mov    ebp,esp
c001833a:	83 ec 28             	sub    esp,0x28
c001833d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0018340:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0018343:	66 89 55 e4          	mov    WORD PTR [ebp-0x1c],dx
c0018347:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001834b:	0f b7 45 e4          	movzx  eax,WORD PTR [ebp-0x1c]
c001834f:	c1 e0 04             	shl    eax,0x4
c0018352:	89 c2                	mov    edx,eax
c0018354:	0f b7 45 e0          	movzx  eax,WORD PTR [ebp-0x20]
c0018358:	01 d0                	add    eax,edx
c001835a:	3d ff ff 0f 00       	cmp    eax,0xfffff
c001835f:	7e 10                	jle    c0018371 <Vm::readWordFromReal(unsigned short, unsigned short)+0x3a>
c0018361:	83 ec 0c             	sub    esp,0xc
c0018364:	68 80 c3 02 c0       	push   0xc002c380
c0018369:	e8 f2 81 ff ff       	call   c0010560 <KePanic(char const*)>
c001836e:	83 c4 10             	add    esp,0x10
c0018371:	0f b7 45 e4          	movzx  eax,WORD PTR [ebp-0x1c]
c0018375:	c1 e0 04             	shl    eax,0x4
c0018378:	89 c2                	mov    edx,eax
c001837a:	0f b7 45 e0          	movzx  eax,WORD PTR [ebp-0x20]
c001837e:	01 d0                	add    eax,edx
c0018380:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0018383:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0018386:	66 8b 00             	mov    ax,WORD PTR [eax]
c0018389:	c9                   	leave  
c001838a:	c3                   	ret    

c001838b <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001838b:	55                   	push   ebp
c001838c:	89 e5                	mov    ebp,esp
c001838e:	83 ec 28             	sub    esp,0x28
c0018391:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0018394:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0018397:	66 89 55 e4          	mov    WORD PTR [ebp-0x1c],dx
c001839b:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001839f:	0f b7 45 e4          	movzx  eax,WORD PTR [ebp-0x1c]
c00183a3:	c1 e0 04             	shl    eax,0x4
c00183a6:	89 c2                	mov    edx,eax
c00183a8:	0f b7 45 e0          	movzx  eax,WORD PTR [ebp-0x20]
c00183ac:	01 d0                	add    eax,edx
c00183ae:	3d ff ff 0f 00       	cmp    eax,0xfffff
c00183b3:	7e 10                	jle    c00183c5 <Vm::readDwordFromReal(unsigned short, unsigned short)+0x3a>
c00183b5:	83 ec 0c             	sub    esp,0xc
c00183b8:	68 80 c3 02 c0       	push   0xc002c380
c00183bd:	e8 9e 81 ff ff       	call   c0010560 <KePanic(char const*)>
c00183c2:	83 c4 10             	add    esp,0x10
c00183c5:	0f b7 45 e4          	movzx  eax,WORD PTR [ebp-0x1c]
c00183c9:	c1 e0 04             	shl    eax,0x4
c00183cc:	89 c2                	mov    edx,eax
c00183ce:	0f b7 45 e0          	movzx  eax,WORD PTR [ebp-0x20]
c00183d2:	01 d0                	add    eax,edx
c00183d4:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00183d7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00183da:	8b 00                	mov    eax,DWORD PTR [eax]
c00183dc:	c9                   	leave  
c00183dd:	c3                   	ret    

c00183de <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c00183de:	55                   	push   ebp
c00183df:	89 e5                	mov    ebp,esp
c00183e1:	83 ec 28             	sub    esp,0x28
c00183e4:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00183e7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00183ea:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c00183ed:	66 89 55 e4          	mov    WORD PTR [ebp-0x1c],dx
c00183f1:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c00183f5:	88 c8                	mov    al,cl
c00183f7:	88 45 dc             	mov    BYTE PTR [ebp-0x24],al
c00183fa:	0f b7 45 e4          	movzx  eax,WORD PTR [ebp-0x1c]
c00183fe:	c1 e0 04             	shl    eax,0x4
c0018401:	89 c2                	mov    edx,eax
c0018403:	0f b7 45 e0          	movzx  eax,WORD PTR [ebp-0x20]
c0018407:	01 d0                	add    eax,edx
c0018409:	3d ff ff 0f 00       	cmp    eax,0xfffff
c001840e:	7e 10                	jle    c0018420 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)+0x42>
c0018410:	83 ec 0c             	sub    esp,0xc
c0018413:	68 80 c3 02 c0       	push   0xc002c380
c0018418:	e8 43 81 ff ff       	call   c0010560 <KePanic(char const*)>
c001841d:	83 c4 10             	add    esp,0x10
c0018420:	0f b7 45 e4          	movzx  eax,WORD PTR [ebp-0x1c]
c0018424:	c1 e0 04             	shl    eax,0x4
c0018427:	89 c2                	mov    edx,eax
c0018429:	0f b7 45 e0          	movzx  eax,WORD PTR [ebp-0x20]
c001842d:	01 d0                	add    eax,edx
c001842f:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0018432:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0018435:	8a 55 dc             	mov    dl,BYTE PTR [ebp-0x24]
c0018438:	88 10                	mov    BYTE PTR [eax],dl
c001843a:	90                   	nop
c001843b:	c9                   	leave  
c001843c:	c3                   	ret    

c001843d <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001843d:	55                   	push   ebp
c001843e:	89 e5                	mov    ebp,esp
c0018440:	83 ec 28             	sub    esp,0x28
c0018443:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0018446:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0018449:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001844c:	66 89 4d e4          	mov    WORD PTR [ebp-0x1c],cx
c0018450:	66 89 55 e0          	mov    WORD PTR [ebp-0x20],dx
c0018454:	66 89 45 dc          	mov    WORD PTR [ebp-0x24],ax
c0018458:	0f b7 45 e4          	movzx  eax,WORD PTR [ebp-0x1c]
c001845c:	c1 e0 04             	shl    eax,0x4
c001845f:	89 c2                	mov    edx,eax
c0018461:	0f b7 45 e0          	movzx  eax,WORD PTR [ebp-0x20]
c0018465:	01 d0                	add    eax,edx
c0018467:	3d ff ff 0f 00       	cmp    eax,0xfffff
c001846c:	7e 10                	jle    c001847e <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)+0x41>
c001846e:	83 ec 0c             	sub    esp,0xc
c0018471:	68 80 c3 02 c0       	push   0xc002c380
c0018476:	e8 e5 80 ff ff       	call   c0010560 <KePanic(char const*)>
c001847b:	83 c4 10             	add    esp,0x10
c001847e:	0f b7 45 e4          	movzx  eax,WORD PTR [ebp-0x1c]
c0018482:	c1 e0 04             	shl    eax,0x4
c0018485:	89 c2                	mov    edx,eax
c0018487:	0f b7 45 e0          	movzx  eax,WORD PTR [ebp-0x20]
c001848b:	01 d0                	add    eax,edx
c001848d:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0018490:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0018493:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0018496:	66 89 10             	mov    WORD PTR [eax],dx
c0018499:	90                   	nop
c001849a:	c9                   	leave  
c001849b:	c3                   	ret    

c001849c <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001849c:	55                   	push   ebp
c001849d:	89 e5                	mov    ebp,esp
c001849f:	83 ec 28             	sub    esp,0x28
c00184a2:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00184a5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00184a8:	66 89 55 e4          	mov    WORD PTR [ebp-0x1c],dx
c00184ac:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c00184b0:	0f b7 45 e4          	movzx  eax,WORD PTR [ebp-0x1c]
c00184b4:	c1 e0 04             	shl    eax,0x4
c00184b7:	89 c2                	mov    edx,eax
c00184b9:	0f b7 45 e0          	movzx  eax,WORD PTR [ebp-0x20]
c00184bd:	01 d0                	add    eax,edx
c00184bf:	3d ff ff 0f 00       	cmp    eax,0xfffff
c00184c4:	7e 10                	jle    c00184d6 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)+0x3a>
c00184c6:	83 ec 0c             	sub    esp,0xc
c00184c9:	68 80 c3 02 c0       	push   0xc002c380
c00184ce:	e8 8d 80 ff ff       	call   c0010560 <KePanic(char const*)>
c00184d3:	83 c4 10             	add    esp,0x10
c00184d6:	0f b7 45 e4          	movzx  eax,WORD PTR [ebp-0x1c]
c00184da:	c1 e0 04             	shl    eax,0x4
c00184dd:	89 c2                	mov    edx,eax
c00184df:	0f b7 45 e0          	movzx  eax,WORD PTR [ebp-0x20]
c00184e3:	01 d0                	add    eax,edx
c00184e5:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00184e8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00184eb:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00184ee:	89 10                	mov    DWORD PTR [eax],edx
c00184f0:	90                   	nop
c00184f1:	c9                   	leave  
c00184f2:	c3                   	ret    

c00184f3 <Vm::faultHandler(regs*)>:
c00184f3:	55                   	push   ebp
c00184f4:	89 e5                	mov    ebp,esp
c00184f6:	57                   	push   edi
c00184f7:	56                   	push   esi
c00184f8:	53                   	push   ebx
c00184f9:	81 ec ac 00 00 00    	sub    esp,0xac
c00184ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018502:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018505:	0f b7 d0             	movzx  edx,ax
c0018508:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001850b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001850e:	0f b7 c0             	movzx  eax,ax
c0018511:	52                   	push   edx
c0018512:	50                   	push   eax
c0018513:	e8 2f f6 ff ff       	call   c0017b47 <Vm::realToLinear(unsigned short, unsigned short)>
c0018518:	83 c4 08             	add    esp,0x8
c001851b:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001851e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018521:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0018524:	0f b7 d0             	movzx  edx,ax
c0018527:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001852a:	8b 40 48             	mov    eax,DWORD PTR [eax+0x48]
c001852d:	0f b7 c0             	movzx  eax,ax
c0018530:	52                   	push   edx
c0018531:	50                   	push   eax
c0018532:	e8 10 f6 ff ff       	call   c0017b47 <Vm::realToLinear(unsigned short, unsigned short)>
c0018537:	83 c4 08             	add    esp,0x8
c001853a:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001853d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018540:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0018543:	0f b7 d0             	movzx  edx,ax
c0018546:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018549:	8b 40 48             	mov    eax,DWORD PTR [eax+0x48]
c001854c:	0f b7 c0             	movzx  eax,ax
c001854f:	52                   	push   edx
c0018550:	50                   	push   eax
c0018551:	e8 f1 f5 ff ff       	call   c0017b47 <Vm::realToLinear(unsigned short, unsigned short)>
c0018556:	83 c4 08             	add    esp,0x8
c0018559:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c001855c:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c0018563:	c6 45 e3 00          	mov    BYTE PTR [ebp-0x1d],0x0
c0018567:	c6 45 e2 00          	mov    BYTE PTR [ebp-0x1e],0x0
c001856b:	c6 45 e1 06          	mov    BYTE PTR [ebp-0x1f],0x6
c001856f:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018572:	8a 00                	mov    al,BYTE PTR [eax]
c0018574:	0f b6 c0             	movzx  eax,al
c0018577:	83 e8 26             	sub    eax,0x26
c001857a:	3d d5 00 00 00       	cmp    eax,0xd5
c001857f:	0f 87 f8 0c 00 00    	ja     c001927d <Vm::faultHandler(regs*)+0xd8a>
c0018585:	8b 04 85 00 c4 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3c00]
c001858c:	ff e0                	jmp    eax
c001858e:	c6 45 e1 02          	mov    BYTE PTR [ebp-0x1f],0x2
c0018592:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018595:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018598:	8d 50 01             	lea    edx,[eax+0x1]
c001859b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001859e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00185a1:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
c00185a5:	e9 87 0d 00 00       	jmp    c0019331 <Vm::faultHandler(regs*)+0xe3e>
c00185aa:	c6 45 e1 00          	mov    BYTE PTR [ebp-0x1f],0x0
c00185ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00185b1:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00185b4:	8d 50 01             	lea    edx,[eax+0x1]
c00185b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00185ba:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00185bd:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
c00185c1:	e9 6b 0d 00 00       	jmp    c0019331 <Vm::faultHandler(regs*)+0xe3e>
c00185c6:	c6 45 e1 01          	mov    BYTE PTR [ebp-0x1f],0x1
c00185ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00185cd:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00185d0:	8d 50 01             	lea    edx,[eax+0x1]
c00185d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00185d6:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00185d9:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
c00185dd:	e9 4f 0d 00 00       	jmp    c0019331 <Vm::faultHandler(regs*)+0xe3e>
c00185e2:	c6 45 e1 03          	mov    BYTE PTR [ebp-0x1f],0x3
c00185e6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00185e9:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00185ec:	8d 50 01             	lea    edx,[eax+0x1]
c00185ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00185f2:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00185f5:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
c00185f9:	e9 33 0d 00 00       	jmp    c0019331 <Vm::faultHandler(regs*)+0xe3e>
c00185fe:	c6 45 e1 04          	mov    BYTE PTR [ebp-0x1f],0x4
c0018602:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018605:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018608:	8d 50 01             	lea    edx,[eax+0x1]
c001860b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001860e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0018611:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
c0018615:	e9 17 0d 00 00       	jmp    c0019331 <Vm::faultHandler(regs*)+0xe3e>
c001861a:	c6 45 e1 05          	mov    BYTE PTR [ebp-0x1f],0x5
c001861e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018621:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018624:	8d 50 01             	lea    edx,[eax+0x1]
c0018627:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001862a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001862d:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
c0018631:	e9 fb 0c 00 00       	jmp    c0019331 <Vm::faultHandler(regs*)+0xe3e>
c0018636:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c001863a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001863d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018640:	8d 50 01             	lea    edx,[eax+0x1]
c0018643:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018646:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0018649:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
c001864d:	e9 df 0c 00 00       	jmp    c0019331 <Vm::faultHandler(regs*)+0xe3e>
c0018652:	c6 45 e2 01          	mov    BYTE PTR [ebp-0x1e],0x1
c0018656:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018659:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001865c:	8d 50 01             	lea    edx,[eax+0x1]
c001865f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018662:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0018665:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
c0018669:	e9 c3 0c 00 00       	jmp    c0019331 <Vm::faultHandler(regs*)+0xe3e>
c001866e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018671:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018674:	8d 50 01             	lea    edx,[eax+0x1]
c0018677:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001867a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001867d:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
c0018681:	e9 ab 0c 00 00       	jmp    c0019331 <Vm::faultHandler(regs*)+0xe3e>
c0018686:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c001868a:	85 c0                	test   eax,eax
c001868c:	74 5b                	je     c00186e9 <Vm::faultHandler(regs*)+0x1f6>
c001868e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018691:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0018694:	83 e8 04             	sub    eax,0x4
c0018697:	0f b7 d0             	movzx  edx,ax
c001869a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001869d:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c00186a0:	83 6d d0 04          	sub    DWORD PTR [ebp-0x30],0x4
c00186a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00186a7:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00186aa:	25 ff 0d 00 00       	and    eax,0xdff
c00186af:	89 c2                	mov    edx,eax
c00186b1:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00186b4:	89 10                	mov    DWORD PTR [eax],edx
c00186b6:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00186bb:	8b 00                	mov    eax,DWORD PTR [eax]
c00186bd:	8a 40 61             	mov    al,BYTE PTR [eax+0x61]
c00186c0:	0f b6 c0             	movzx  eax,al
c00186c3:	85 c0                	test   eax,eax
c00186c5:	74 11                	je     c00186d8 <Vm::faultHandler(regs*)+0x1e5>
c00186c7:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00186ca:	8b 00                	mov    eax,DWORD PTR [eax]
c00186cc:	80 cc 02             	or     ah,0x2
c00186cf:	89 c2                	mov    edx,eax
c00186d1:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00186d4:	89 10                	mov    DWORD PTR [eax],edx
c00186d6:	eb 6a                	jmp    c0018742 <Vm::faultHandler(regs*)+0x24f>
c00186d8:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00186db:	8b 00                	mov    eax,DWORD PTR [eax]
c00186dd:	80 e4 fd             	and    ah,0xfd
c00186e0:	89 c2                	mov    edx,eax
c00186e2:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00186e5:	89 10                	mov    DWORD PTR [eax],edx
c00186e7:	eb 59                	jmp    c0018742 <Vm::faultHandler(regs*)+0x24f>
c00186e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00186ec:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00186ef:	83 e8 02             	sub    eax,0x2
c00186f2:	0f b7 d0             	movzx  edx,ax
c00186f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00186f8:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c00186fb:	83 6d d4 02          	sub    DWORD PTR [ebp-0x2c],0x2
c00186ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018702:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0018705:	89 c2                	mov    edx,eax
c0018707:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c001870a:	66 89 10             	mov    WORD PTR [eax],dx
c001870d:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0018712:	8b 00                	mov    eax,DWORD PTR [eax]
c0018714:	8a 40 61             	mov    al,BYTE PTR [eax+0x61]
c0018717:	0f b6 c0             	movzx  eax,al
c001871a:	85 c0                	test   eax,eax
c001871c:	74 13                	je     c0018731 <Vm::faultHandler(regs*)+0x23e>
c001871e:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c0018721:	66 8b 00             	mov    ax,WORD PTR [eax]
c0018724:	80 cc 02             	or     ah,0x2
c0018727:	89 c2                	mov    edx,eax
c0018729:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c001872c:	66 89 10             	mov    WORD PTR [eax],dx
c001872f:	eb 11                	jmp    c0018742 <Vm::faultHandler(regs*)+0x24f>
c0018731:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c0018734:	66 8b 00             	mov    ax,WORD PTR [eax]
c0018737:	80 e4 fd             	and    ah,0xfd
c001873a:	89 c2                	mov    edx,eax
c001873c:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c001873f:	66 89 10             	mov    WORD PTR [eax],dx
c0018742:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018745:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018748:	8d 50 01             	lea    edx,[eax+0x1]
c001874b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001874e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0018751:	b0 01                	mov    al,0x1
c0018753:	e9 de 0b 00 00       	jmp    c0019336 <Vm::faultHandler(regs*)+0xe43>
c0018758:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c001875c:	85 c0                	test   eax,eax
c001875e:	74 46                	je     c00187a6 <Vm::faultHandler(regs*)+0x2b3>
c0018760:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0018763:	8b 00                	mov    eax,DWORD PTR [eax]
c0018765:	25 ff 0d 00 00       	and    eax,0xdff
c001876a:	0d 00 02 02 00       	or     eax,0x20200
c001876f:	89 c2                	mov    edx,eax
c0018771:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018774:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0018777:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c001877a:	8b 00                	mov    eax,DWORD PTR [eax]
c001877c:	25 00 02 00 00       	and    eax,0x200
c0018781:	89 c2                	mov    edx,eax
c0018783:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0018788:	8b 00                	mov    eax,DWORD PTR [eax]
c001878a:	85 d2                	test   edx,edx
c001878c:	0f 95 c2             	setne  dl
c001878f:	88 50 61             	mov    BYTE PTR [eax+0x61],dl
c0018792:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018795:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0018798:	83 c0 04             	add    eax,0x4
c001879b:	0f b7 d0             	movzx  edx,ax
c001879e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00187a1:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c00187a4:	eb 47                	jmp    c00187ed <Vm::faultHandler(regs*)+0x2fa>
c00187a6:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c00187a9:	66 8b 00             	mov    ax,WORD PTR [eax]
c00187ac:	0f b7 c0             	movzx  eax,ax
c00187af:	0d 00 02 02 00       	or     eax,0x20200
c00187b4:	89 c2                	mov    edx,eax
c00187b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00187b9:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c00187bc:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c00187bf:	66 8b 00             	mov    ax,WORD PTR [eax]
c00187c2:	0f b7 c0             	movzx  eax,ax
c00187c5:	25 00 02 00 00       	and    eax,0x200
c00187ca:	89 c2                	mov    edx,eax
c00187cc:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00187d1:	8b 00                	mov    eax,DWORD PTR [eax]
c00187d3:	85 d2                	test   edx,edx
c00187d5:	0f 95 c2             	setne  dl
c00187d8:	88 50 61             	mov    BYTE PTR [eax+0x61],dl
c00187db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00187de:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00187e1:	83 c0 02             	add    eax,0x2
c00187e4:	0f b7 d0             	movzx  edx,ax
c00187e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00187ea:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c00187ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00187f0:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00187f3:	8d 50 01             	lea    edx,[eax+0x1]
c00187f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00187f9:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00187fc:	b0 01                	mov    al,0x1
c00187fe:	e9 33 0b 00 00       	jmp    c0019336 <Vm::faultHandler(regs*)+0xe43>
c0018803:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018806:	83 c0 01             	add    eax,0x1
c0018809:	8a 00                	mov    al,BYTE PTR [eax]
c001880b:	0f b6 c0             	movzx  eax,al
c001880e:	3d ee 00 00 00       	cmp    eax,0xee
c0018813:	75 19                	jne    c001882e <Vm::faultHandler(regs*)+0x33b>
c0018815:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018818:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001881b:	83 ec 0c             	sub    esp,0xc
c001881e:	50                   	push   eax
c001881f:	e8 ee f3 ff ff       	call   c0017c12 <Vm::mainloop3(unsigned long)>
c0018824:	83 c4 10             	add    esp,0x10
c0018827:	b0 01                	mov    al,0x1
c0018829:	e9 08 0b 00 00       	jmp    c0019336 <Vm::faultHandler(regs*)+0xe43>
c001882e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018831:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0018834:	0f b7 c8             	movzx  ecx,ax
c0018837:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001883a:	8b 40 48             	mov    eax,DWORD PTR [eax+0x48]
c001883d:	0f b7 d0             	movzx  edx,ax
c0018840:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018843:	83 c0 01             	add    eax,0x1
c0018846:	8a 00                	mov    al,BYTE PTR [eax]
c0018848:	0f b6 c0             	movzx  eax,al
c001884b:	83 ec 0c             	sub    esp,0xc
c001884e:	51                   	push   ecx
c001884f:	52                   	push   edx
c0018850:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0018853:	50                   	push   eax
c0018854:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0018857:	e8 84 f8 ff ff       	call   c00180e0 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001885c:	83 c4 20             	add    esp,0x20
c001885f:	b0 01                	mov    al,0x1
c0018861:	e9 d0 0a 00 00       	jmp    c0019336 <Vm::faultHandler(regs*)+0xe43>
c0018866:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001886b:	8b 00                	mov    eax,DWORD PTR [eax]
c001886d:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0018871:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018874:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018877:	8d 50 01             	lea    edx,[eax+0x1]
c001887a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001887d:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0018880:	b0 01                	mov    al,0x1
c0018882:	e9 af 0a 00 00       	jmp    c0019336 <Vm::faultHandler(regs*)+0xe43>
c0018887:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001888c:	8b 00                	mov    eax,DWORD PTR [eax]
c001888e:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c0018892:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018895:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018898:	8d 50 01             	lea    edx,[eax+0x1]
c001889b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001889e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00188a1:	b0 01                	mov    al,0x1
c00188a3:	e9 8e 0a 00 00       	jmp    c0019336 <Vm::faultHandler(regs*)+0xe43>
c00188a8:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c00188ab:	89 45 ac             	mov    DWORD PTR [ebp-0x54],eax
c00188ae:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
c00188b1:	89 45 a8             	mov    DWORD PTR [ebp-0x58],eax
c00188b4:	8b 45 a8             	mov    eax,DWORD PTR [ebp-0x58]
c00188b7:	8a 00                	mov    al,BYTE PTR [eax]
c00188b9:	0f b6 c0             	movzx  eax,al
c00188bc:	8b 55 a8             	mov    edx,DWORD PTR [ebp-0x58]
c00188bf:	83 c2 01             	add    edx,0x1
c00188c2:	8a 12                	mov    dl,BYTE PTR [edx]
c00188c4:	0f b6 d2             	movzx  edx,dl
c00188c7:	c1 e2 08             	shl    edx,0x8
c00188ca:	09 d0                	or     eax,edx
c00188cc:	0f b7 d0             	movzx  edx,ax
c00188cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00188d2:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00188d5:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c00188d8:	83 c0 02             	add    eax,0x2
c00188db:	89 45 b4             	mov    DWORD PTR [ebp-0x4c],eax
c00188de:	8b 45 b4             	mov    eax,DWORD PTR [ebp-0x4c]
c00188e1:	89 45 b0             	mov    DWORD PTR [ebp-0x50],eax
c00188e4:	8b 45 b0             	mov    eax,DWORD PTR [ebp-0x50]
c00188e7:	8a 00                	mov    al,BYTE PTR [eax]
c00188e9:	0f b6 c0             	movzx  eax,al
c00188ec:	8b 55 b0             	mov    edx,DWORD PTR [ebp-0x50]
c00188ef:	83 c2 01             	add    edx,0x1
c00188f2:	8a 12                	mov    dl,BYTE PTR [edx]
c00188f4:	0f b6 d2             	movzx  edx,dl
c00188f7:	c1 e2 08             	shl    edx,0x8
c00188fa:	09 d0                	or     eax,edx
c00188fc:	0f b7 d0             	movzx  edx,ax
c00188ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018902:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0018905:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c0018908:	83 c0 04             	add    eax,0x4
c001890b:	89 45 bc             	mov    DWORD PTR [ebp-0x44],eax
c001890e:	8b 45 bc             	mov    eax,DWORD PTR [ebp-0x44]
c0018911:	89 45 b8             	mov    DWORD PTR [ebp-0x48],eax
c0018914:	8b 45 b8             	mov    eax,DWORD PTR [ebp-0x48]
c0018917:	8a 00                	mov    al,BYTE PTR [eax]
c0018919:	0f b6 c0             	movzx  eax,al
c001891c:	8b 55 b8             	mov    edx,DWORD PTR [ebp-0x48]
c001891f:	83 c2 01             	add    edx,0x1
c0018922:	8a 12                	mov    dl,BYTE PTR [edx]
c0018924:	0f b6 d2             	movzx  edx,dl
c0018927:	c1 e2 08             	shl    edx,0x8
c001892a:	09 d0                	or     eax,edx
c001892c:	0f b7 c0             	movzx  eax,ax
c001892f:	0d 00 02 02 00       	or     eax,0x20200
c0018934:	89 c2                	mov    edx,eax
c0018936:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018939:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c001893c:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c001893f:	83 c0 04             	add    eax,0x4
c0018942:	89 45 c4             	mov    DWORD PTR [ebp-0x3c],eax
c0018945:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c0018948:	89 45 c0             	mov    DWORD PTR [ebp-0x40],eax
c001894b:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c001894e:	8a 00                	mov    al,BYTE PTR [eax]
c0018950:	0f b6 c0             	movzx  eax,al
c0018953:	8b 55 c0             	mov    edx,DWORD PTR [ebp-0x40]
c0018956:	83 c2 01             	add    edx,0x1
c0018959:	8a 12                	mov    dl,BYTE PTR [edx]
c001895b:	0f b6 d2             	movzx  edx,dl
c001895e:	c1 e2 08             	shl    edx,0x8
c0018961:	09 d0                	or     eax,edx
c0018963:	0f b7 c0             	movzx  eax,ax
c0018966:	25 00 02 00 00       	and    eax,0x200
c001896b:	89 c2                	mov    edx,eax
c001896d:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0018972:	8b 00                	mov    eax,DWORD PTR [eax]
c0018974:	85 d2                	test   edx,edx
c0018976:	0f 95 c2             	setne  dl
c0018979:	88 50 61             	mov    BYTE PTR [eax+0x61],dl
c001897c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001897f:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0018982:	83 c0 06             	add    eax,0x6
c0018985:	0f b7 d0             	movzx  edx,ax
c0018988:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001898b:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c001898e:	b0 01                	mov    al,0x1
c0018990:	e9 a1 09 00 00       	jmp    c0019336 <Vm::faultHandler(regs*)+0xe43>
c0018995:	66 c7 45 ca 00 00    	mov    WORD PTR [ebp-0x36],0x0
c001899b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001899e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00189a1:	66 89 45 ca          	mov    WORD PTR [ebp-0x36],ax
c00189a5:	0f b6 45 e2          	movzx  eax,BYTE PTR [ebp-0x1e]
c00189a9:	85 c0                	test   eax,eax
c00189ab:	74 7a                	je     c0018a27 <Vm::faultHandler(regs*)+0x534>
c00189ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00189b0:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00189b3:	3d ff ff 00 00       	cmp    eax,0xffff
c00189b8:	76 6d                	jbe    c0018a27 <Vm::faultHandler(regs*)+0x534>
c00189ba:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00189bd:	83 c0 05             	add    eax,0x5
c00189c0:	8a 00                	mov    al,BYTE PTR [eax]
c00189c2:	0f b6 c0             	movzx  eax,al
c00189c5:	89 85 54 ff ff ff    	mov    DWORD PTR [ebp-0xac],eax
c00189cb:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00189ce:	83 c0 04             	add    eax,0x4
c00189d1:	8a 00                	mov    al,BYTE PTR [eax]
c00189d3:	0f b6 f8             	movzx  edi,al
c00189d6:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00189d9:	83 c0 03             	add    eax,0x3
c00189dc:	8a 00                	mov    al,BYTE PTR [eax]
c00189de:	0f b6 f0             	movzx  esi,al
c00189e1:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00189e4:	83 c0 02             	add    eax,0x2
c00189e7:	8a 00                	mov    al,BYTE PTR [eax]
c00189e9:	0f b6 d8             	movzx  ebx,al
c00189ec:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00189ef:	83 c0 01             	add    eax,0x1
c00189f2:	8a 00                	mov    al,BYTE PTR [eax]
c00189f4:	0f b6 c8             	movzx  ecx,al
c00189f7:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00189fa:	8a 00                	mov    al,BYTE PTR [eax]
c00189fc:	0f b6 d0             	movzx  edx,al
c00189ff:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018a02:	8a 00                	mov    al,BYTE PTR [eax]
c0018a04:	0f b6 c0             	movzx  eax,al
c0018a07:	ff b5 54 ff ff ff    	push   DWORD PTR [ebp-0xac]
c0018a0d:	57                   	push   edi
c0018a0e:	56                   	push   esi
c0018a0f:	53                   	push   ebx
c0018a10:	51                   	push   ecx
c0018a11:	52                   	push   edx
c0018a12:	50                   	push   eax
c0018a13:	68 a0 c3 02 c0       	push   0xc002c3a0
c0018a18:	e8 49 e5 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0018a1d:	83 c4 20             	add    esp,0x20
c0018a20:	b0 00                	mov    al,0x0
c0018a22:	e9 0f 09 00 00       	jmp    c0019336 <Vm::faultHandler(regs*)+0xe43>
c0018a27:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018a2a:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0018a2d:	0f b7 c0             	movzx  eax,ax
c0018a30:	83 ec 0c             	sub    esp,0xc
c0018a33:	50                   	push   eax
c0018a34:	e8 70 f0 ff ff       	call   c0017aa9 <Vm::inbv(unsigned short)>
c0018a39:	83 c4 10             	add    esp,0x10
c0018a3c:	0f b6 c8             	movzx  ecx,al
c0018a3f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018a42:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0018a45:	0f b7 d0             	movzx  edx,ax
c0018a48:	0f b7 45 ca          	movzx  eax,WORD PTR [ebp-0x36]
c0018a4c:	83 ec 04             	sub    esp,0x4
c0018a4f:	51                   	push   ecx
c0018a50:	52                   	push   edx
c0018a51:	50                   	push   eax
c0018a52:	e8 87 f9 ff ff       	call   c00183de <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0018a57:	83 c4 10             	add    esp,0x10
c0018a5a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018a5d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0018a60:	25 00 04 00 00       	and    eax,0x400
c0018a65:	85 c0                	test   eax,eax
c0018a67:	74 14                	je     c0018a7d <Vm::faultHandler(regs*)+0x58a>
c0018a69:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018a6c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0018a6f:	83 e8 01             	sub    eax,0x1
c0018a72:	0f b7 d0             	movzx  edx,ax
c0018a75:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018a78:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0018a7b:	eb 12                	jmp    c0018a8f <Vm::faultHandler(regs*)+0x59c>
c0018a7d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018a80:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0018a83:	83 c0 01             	add    eax,0x1
c0018a86:	0f b7 d0             	movzx  edx,ax
c0018a89:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018a8c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0018a8f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018a92:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018a95:	8d 50 01             	lea    edx,[eax+0x1]
c0018a98:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018a9b:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0018a9e:	b0 01                	mov    al,0x1
c0018aa0:	e9 91 08 00 00       	jmp    c0019336 <Vm::faultHandler(regs*)+0xe43>
c0018aa5:	66 c7 45 c8 00 00    	mov    WORD PTR [ebp-0x38],0x0
c0018aab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018aae:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0018ab1:	66 89 45 c8          	mov    WORD PTR [ebp-0x38],ax
c0018ab5:	0f b6 45 e2          	movzx  eax,BYTE PTR [ebp-0x1e]
c0018ab9:	85 c0                	test   eax,eax
c0018abb:	74 7a                	je     c0018b37 <Vm::faultHandler(regs*)+0x644>
c0018abd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018ac0:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0018ac3:	3d ff ff 00 00       	cmp    eax,0xffff
c0018ac8:	76 6d                	jbe    c0018b37 <Vm::faultHandler(regs*)+0x644>
c0018aca:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018acd:	83 c0 05             	add    eax,0x5
c0018ad0:	8a 00                	mov    al,BYTE PTR [eax]
c0018ad2:	0f b6 c0             	movzx  eax,al
c0018ad5:	89 85 54 ff ff ff    	mov    DWORD PTR [ebp-0xac],eax
c0018adb:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018ade:	83 c0 04             	add    eax,0x4
c0018ae1:	8a 00                	mov    al,BYTE PTR [eax]
c0018ae3:	0f b6 f8             	movzx  edi,al
c0018ae6:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018ae9:	83 c0 03             	add    eax,0x3
c0018aec:	8a 00                	mov    al,BYTE PTR [eax]
c0018aee:	0f b6 f0             	movzx  esi,al
c0018af1:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018af4:	83 c0 02             	add    eax,0x2
c0018af7:	8a 00                	mov    al,BYTE PTR [eax]
c0018af9:	0f b6 d8             	movzx  ebx,al
c0018afc:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018aff:	83 c0 01             	add    eax,0x1
c0018b02:	8a 00                	mov    al,BYTE PTR [eax]
c0018b04:	0f b6 c8             	movzx  ecx,al
c0018b07:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018b0a:	8a 00                	mov    al,BYTE PTR [eax]
c0018b0c:	0f b6 d0             	movzx  edx,al
c0018b0f:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018b12:	8a 00                	mov    al,BYTE PTR [eax]
c0018b14:	0f b6 c0             	movzx  eax,al
c0018b17:	ff b5 54 ff ff ff    	push   DWORD PTR [ebp-0xac]
c0018b1d:	57                   	push   edi
c0018b1e:	56                   	push   esi
c0018b1f:	53                   	push   ebx
c0018b20:	51                   	push   ecx
c0018b21:	52                   	push   edx
c0018b22:	50                   	push   eax
c0018b23:	68 a0 c3 02 c0       	push   0xc002c3a0
c0018b28:	e8 39 e4 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0018b2d:	83 c4 20             	add    esp,0x20
c0018b30:	b0 00                	mov    al,0x0
c0018b32:	e9 ff 07 00 00       	jmp    c0019336 <Vm::faultHandler(regs*)+0xe43>
c0018b37:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c0018b3b:	85 c0                	test   eax,eax
c0018b3d:	74 6f                	je     c0018bae <Vm::faultHandler(regs*)+0x6bb>
c0018b3f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018b42:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0018b45:	0f b7 c0             	movzx  eax,ax
c0018b48:	66 89 45 a6          	mov    WORD PTR [ebp-0x5a],ax
c0018b4c:	66 8b 45 a6          	mov    ax,WORD PTR [ebp-0x5a]
c0018b50:	89 c2                	mov    edx,eax
c0018b52:	ed                   	in     eax,dx
c0018b53:	89 45 a0             	mov    DWORD PTR [ebp-0x60],eax
c0018b56:	8b 4d a0             	mov    ecx,DWORD PTR [ebp-0x60]
c0018b59:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018b5c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0018b5f:	0f b7 d0             	movzx  edx,ax
c0018b62:	0f b7 45 c8          	movzx  eax,WORD PTR [ebp-0x38]
c0018b66:	83 ec 04             	sub    esp,0x4
c0018b69:	51                   	push   ecx
c0018b6a:	52                   	push   edx
c0018b6b:	50                   	push   eax
c0018b6c:	e8 2b f9 ff ff       	call   c001849c <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0018b71:	83 c4 10             	add    esp,0x10
c0018b74:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018b77:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0018b7a:	25 00 04 00 00       	and    eax,0x400
c0018b7f:	85 c0                	test   eax,eax
c0018b81:	74 17                	je     c0018b9a <Vm::faultHandler(regs*)+0x6a7>
c0018b83:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018b86:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0018b89:	83 e8 04             	sub    eax,0x4
c0018b8c:	0f b7 d0             	movzx  edx,ax
c0018b8f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018b92:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0018b95:	e9 83 00 00 00       	jmp    c0018c1d <Vm::faultHandler(regs*)+0x72a>
c0018b9a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018b9d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0018ba0:	83 c0 04             	add    eax,0x4
c0018ba3:	0f b7 d0             	movzx  edx,ax
c0018ba6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018ba9:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0018bac:	eb 6f                	jmp    c0018c1d <Vm::faultHandler(regs*)+0x72a>
c0018bae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018bb1:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0018bb4:	0f b7 c0             	movzx  eax,ax
c0018bb7:	66 89 45 9e          	mov    WORD PTR [ebp-0x62],ax
c0018bbb:	66 8b 45 9e          	mov    ax,WORD PTR [ebp-0x62]
c0018bbf:	89 c2                	mov    edx,eax
c0018bc1:	66 ed                	in     ax,dx
c0018bc3:	66 89 45 9c          	mov    WORD PTR [ebp-0x64],ax
c0018bc7:	8b 45 9c             	mov    eax,DWORD PTR [ebp-0x64]
c0018bca:	0f b7 c8             	movzx  ecx,ax
c0018bcd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018bd0:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0018bd3:	0f b7 d0             	movzx  edx,ax
c0018bd6:	0f b7 45 c8          	movzx  eax,WORD PTR [ebp-0x38]
c0018bda:	83 ec 04             	sub    esp,0x4
c0018bdd:	51                   	push   ecx
c0018bde:	52                   	push   edx
c0018bdf:	50                   	push   eax
c0018be0:	e8 58 f8 ff ff       	call   c001843d <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0018be5:	83 c4 10             	add    esp,0x10
c0018be8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018beb:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0018bee:	25 00 04 00 00       	and    eax,0x400
c0018bf3:	85 c0                	test   eax,eax
c0018bf5:	74 14                	je     c0018c0b <Vm::faultHandler(regs*)+0x718>
c0018bf7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018bfa:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0018bfd:	83 e8 02             	sub    eax,0x2
c0018c00:	0f b7 d0             	movzx  edx,ax
c0018c03:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018c06:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0018c09:	eb 12                	jmp    c0018c1d <Vm::faultHandler(regs*)+0x72a>
c0018c0b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018c0e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0018c11:	83 c0 02             	add    eax,0x2
c0018c14:	0f b7 d0             	movzx  edx,ax
c0018c17:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018c1a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0018c1d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018c20:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018c23:	8d 50 01             	lea    edx,[eax+0x1]
c0018c26:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018c29:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0018c2c:	b0 01                	mov    al,0x1
c0018c2e:	e9 03 07 00 00       	jmp    c0019336 <Vm::faultHandler(regs*)+0xe43>
c0018c33:	66 c7 45 de 00 00    	mov    WORD PTR [ebp-0x22],0x0
c0018c39:	0f b6 45 e1          	movzx  eax,BYTE PTR [ebp-0x1f]
c0018c3d:	83 f8 06             	cmp    eax,0x6
c0018c40:	77 4f                	ja     c0018c91 <Vm::faultHandler(regs*)+0x79e>
c0018c42:	8b 04 85 58 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd38a8]
c0018c49:	ff e0                	jmp    eax
c0018c4b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018c4e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0018c51:	66 89 45 de          	mov    WORD PTR [ebp-0x22],ax
c0018c55:	eb 3a                	jmp    c0018c91 <Vm::faultHandler(regs*)+0x79e>
c0018c57:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018c5a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018c5d:	66 89 45 de          	mov    WORD PTR [ebp-0x22],ax
c0018c61:	eb 2e                	jmp    c0018c91 <Vm::faultHandler(regs*)+0x79e>
c0018c63:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018c66:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0018c69:	66 89 45 de          	mov    WORD PTR [ebp-0x22],ax
c0018c6d:	eb 22                	jmp    c0018c91 <Vm::faultHandler(regs*)+0x79e>
c0018c6f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018c72:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0018c75:	66 89 45 de          	mov    WORD PTR [ebp-0x22],ax
c0018c79:	eb 16                	jmp    c0018c91 <Vm::faultHandler(regs*)+0x79e>
c0018c7b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018c7e:	8b 00                	mov    eax,DWORD PTR [eax]
c0018c80:	66 89 45 de          	mov    WORD PTR [ebp-0x22],ax
c0018c84:	eb 0b                	jmp    c0018c91 <Vm::faultHandler(regs*)+0x79e>
c0018c86:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018c89:	8b 40 48             	mov    eax,DWORD PTR [eax+0x48]
c0018c8c:	66 89 45 de          	mov    WORD PTR [ebp-0x22],ax
c0018c90:	90                   	nop
c0018c91:	0f b6 45 e2          	movzx  eax,BYTE PTR [ebp-0x1e]
c0018c95:	85 c0                	test   eax,eax
c0018c97:	74 7a                	je     c0018d13 <Vm::faultHandler(regs*)+0x820>
c0018c99:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018c9c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0018c9f:	3d ff ff 00 00       	cmp    eax,0xffff
c0018ca4:	76 6d                	jbe    c0018d13 <Vm::faultHandler(regs*)+0x820>
c0018ca6:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018ca9:	83 c0 05             	add    eax,0x5
c0018cac:	8a 00                	mov    al,BYTE PTR [eax]
c0018cae:	0f b6 c0             	movzx  eax,al
c0018cb1:	89 85 54 ff ff ff    	mov    DWORD PTR [ebp-0xac],eax
c0018cb7:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018cba:	83 c0 04             	add    eax,0x4
c0018cbd:	8a 00                	mov    al,BYTE PTR [eax]
c0018cbf:	0f b6 f8             	movzx  edi,al
c0018cc2:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018cc5:	83 c0 03             	add    eax,0x3
c0018cc8:	8a 00                	mov    al,BYTE PTR [eax]
c0018cca:	0f b6 f0             	movzx  esi,al
c0018ccd:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018cd0:	83 c0 02             	add    eax,0x2
c0018cd3:	8a 00                	mov    al,BYTE PTR [eax]
c0018cd5:	0f b6 d8             	movzx  ebx,al
c0018cd8:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018cdb:	83 c0 01             	add    eax,0x1
c0018cde:	8a 00                	mov    al,BYTE PTR [eax]
c0018ce0:	0f b6 c8             	movzx  ecx,al
c0018ce3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018ce6:	8a 00                	mov    al,BYTE PTR [eax]
c0018ce8:	0f b6 d0             	movzx  edx,al
c0018ceb:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018cee:	8a 00                	mov    al,BYTE PTR [eax]
c0018cf0:	0f b6 c0             	movzx  eax,al
c0018cf3:	ff b5 54 ff ff ff    	push   DWORD PTR [ebp-0xac]
c0018cf9:	57                   	push   edi
c0018cfa:	56                   	push   esi
c0018cfb:	53                   	push   ebx
c0018cfc:	51                   	push   ecx
c0018cfd:	52                   	push   edx
c0018cfe:	50                   	push   eax
c0018cff:	68 a0 c3 02 c0       	push   0xc002c3a0
c0018d04:	e8 5d e2 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0018d09:	83 c4 20             	add    esp,0x20
c0018d0c:	b0 00                	mov    al,0x0
c0018d0e:	e9 23 06 00 00       	jmp    c0019336 <Vm::faultHandler(regs*)+0xe43>
c0018d13:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018d16:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0018d19:	0f b7 d0             	movzx  edx,ax
c0018d1c:	0f b7 45 de          	movzx  eax,WORD PTR [ebp-0x22]
c0018d20:	83 ec 08             	sub    esp,0x8
c0018d23:	52                   	push   edx
c0018d24:	50                   	push   eax
c0018d25:	e8 ba f5 ff ff       	call   c00182e4 <Vm::readByteFromReal(unsigned short, unsigned short)>
c0018d2a:	83 c4 10             	add    esp,0x10
c0018d2d:	0f b6 d0             	movzx  edx,al
c0018d30:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018d33:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0018d36:	0f b7 c0             	movzx  eax,ax
c0018d39:	83 ec 08             	sub    esp,0x8
c0018d3c:	52                   	push   edx
c0018d3d:	50                   	push   eax
c0018d3e:	e8 9d ed ff ff       	call   c0017ae0 <Vm::outbv(unsigned short, unsigned char)>
c0018d43:	83 c4 10             	add    esp,0x10
c0018d46:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018d49:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0018d4c:	25 00 04 00 00       	and    eax,0x400
c0018d51:	85 c0                	test   eax,eax
c0018d53:	74 14                	je     c0018d69 <Vm::faultHandler(regs*)+0x876>
c0018d55:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018d58:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0018d5b:	83 e8 01             	sub    eax,0x1
c0018d5e:	0f b7 d0             	movzx  edx,ax
c0018d61:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018d64:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0018d67:	eb 12                	jmp    c0018d7b <Vm::faultHandler(regs*)+0x888>
c0018d69:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018d6c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0018d6f:	83 c0 01             	add    eax,0x1
c0018d72:	0f b7 d0             	movzx  edx,ax
c0018d75:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018d78:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0018d7b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018d7e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018d81:	8d 50 01             	lea    edx,[eax+0x1]
c0018d84:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018d87:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0018d8a:	b0 01                	mov    al,0x1
c0018d8c:	e9 a5 05 00 00       	jmp    c0019336 <Vm::faultHandler(regs*)+0xe43>
c0018d91:	66 c7 45 dc 00 00    	mov    WORD PTR [ebp-0x24],0x0
c0018d97:	0f b6 45 e1          	movzx  eax,BYTE PTR [ebp-0x1f]
c0018d9b:	83 f8 06             	cmp    eax,0x6
c0018d9e:	77 4f                	ja     c0018def <Vm::faultHandler(regs*)+0x8fc>
c0018da0:	8b 04 85 74 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd388c]
c0018da7:	ff e0                	jmp    eax
c0018da9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018dac:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0018daf:	66 89 45 dc          	mov    WORD PTR [ebp-0x24],ax
c0018db3:	eb 3a                	jmp    c0018def <Vm::faultHandler(regs*)+0x8fc>
c0018db5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018db8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018dbb:	66 89 45 dc          	mov    WORD PTR [ebp-0x24],ax
c0018dbf:	eb 2e                	jmp    c0018def <Vm::faultHandler(regs*)+0x8fc>
c0018dc1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018dc4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0018dc7:	66 89 45 dc          	mov    WORD PTR [ebp-0x24],ax
c0018dcb:	eb 22                	jmp    c0018def <Vm::faultHandler(regs*)+0x8fc>
c0018dcd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018dd0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0018dd3:	66 89 45 dc          	mov    WORD PTR [ebp-0x24],ax
c0018dd7:	eb 16                	jmp    c0018def <Vm::faultHandler(regs*)+0x8fc>
c0018dd9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018ddc:	8b 00                	mov    eax,DWORD PTR [eax]
c0018dde:	66 89 45 dc          	mov    WORD PTR [ebp-0x24],ax
c0018de2:	eb 0b                	jmp    c0018def <Vm::faultHandler(regs*)+0x8fc>
c0018de4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018de7:	8b 40 48             	mov    eax,DWORD PTR [eax+0x48]
c0018dea:	66 89 45 dc          	mov    WORD PTR [ebp-0x24],ax
c0018dee:	90                   	nop
c0018def:	0f b6 45 e2          	movzx  eax,BYTE PTR [ebp-0x1e]
c0018df3:	85 c0                	test   eax,eax
c0018df5:	74 7a                	je     c0018e71 <Vm::faultHandler(regs*)+0x97e>
c0018df7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018dfa:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0018dfd:	3d ff ff 00 00       	cmp    eax,0xffff
c0018e02:	76 6d                	jbe    c0018e71 <Vm::faultHandler(regs*)+0x97e>
c0018e04:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018e07:	83 c0 05             	add    eax,0x5
c0018e0a:	8a 00                	mov    al,BYTE PTR [eax]
c0018e0c:	0f b6 c0             	movzx  eax,al
c0018e0f:	89 85 54 ff ff ff    	mov    DWORD PTR [ebp-0xac],eax
c0018e15:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018e18:	83 c0 04             	add    eax,0x4
c0018e1b:	8a 00                	mov    al,BYTE PTR [eax]
c0018e1d:	0f b6 f8             	movzx  edi,al
c0018e20:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018e23:	83 c0 03             	add    eax,0x3
c0018e26:	8a 00                	mov    al,BYTE PTR [eax]
c0018e28:	0f b6 f0             	movzx  esi,al
c0018e2b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018e2e:	83 c0 02             	add    eax,0x2
c0018e31:	8a 00                	mov    al,BYTE PTR [eax]
c0018e33:	0f b6 d8             	movzx  ebx,al
c0018e36:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018e39:	83 c0 01             	add    eax,0x1
c0018e3c:	8a 00                	mov    al,BYTE PTR [eax]
c0018e3e:	0f b6 c8             	movzx  ecx,al
c0018e41:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018e44:	8a 00                	mov    al,BYTE PTR [eax]
c0018e46:	0f b6 d0             	movzx  edx,al
c0018e49:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018e4c:	8a 00                	mov    al,BYTE PTR [eax]
c0018e4e:	0f b6 c0             	movzx  eax,al
c0018e51:	ff b5 54 ff ff ff    	push   DWORD PTR [ebp-0xac]
c0018e57:	57                   	push   edi
c0018e58:	56                   	push   esi
c0018e59:	53                   	push   ebx
c0018e5a:	51                   	push   ecx
c0018e5b:	52                   	push   edx
c0018e5c:	50                   	push   eax
c0018e5d:	68 a0 c3 02 c0       	push   0xc002c3a0
c0018e62:	e8 ff e0 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0018e67:	83 c4 20             	add    esp,0x20
c0018e6a:	b0 00                	mov    al,0x0
c0018e6c:	e9 c5 04 00 00       	jmp    c0019336 <Vm::faultHandler(regs*)+0xe43>
c0018e71:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c0018e75:	85 c0                	test   eax,eax
c0018e77:	74 6c                	je     c0018ee5 <Vm::faultHandler(regs*)+0x9f2>
c0018e79:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018e7c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0018e7f:	0f b7 d0             	movzx  edx,ax
c0018e82:	0f b7 45 dc          	movzx  eax,WORD PTR [ebp-0x24]
c0018e86:	83 ec 08             	sub    esp,0x8
c0018e89:	52                   	push   edx
c0018e8a:	50                   	push   eax
c0018e8b:	e8 fb f4 ff ff       	call   c001838b <Vm::readDwordFromReal(unsigned short, unsigned short)>
c0018e90:	83 c4 10             	add    esp,0x10
c0018e93:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0018e96:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c0018e99:	0f b7 d2             	movzx  edx,dx
c0018e9c:	66 89 55 9a          	mov    WORD PTR [ebp-0x66],dx
c0018ea0:	89 45 94             	mov    DWORD PTR [ebp-0x6c],eax
c0018ea3:	8b 45 94             	mov    eax,DWORD PTR [ebp-0x6c]
c0018ea6:	66 8b 55 9a          	mov    dx,WORD PTR [ebp-0x66]
c0018eaa:	ef                   	out    dx,eax
c0018eab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018eae:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0018eb1:	25 00 04 00 00       	and    eax,0x400
c0018eb6:	85 c0                	test   eax,eax
c0018eb8:	74 17                	je     c0018ed1 <Vm::faultHandler(regs*)+0x9de>
c0018eba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018ebd:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0018ec0:	83 e8 04             	sub    eax,0x4
c0018ec3:	0f b7 d0             	movzx  edx,ax
c0018ec6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018ec9:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0018ecc:	e9 80 00 00 00       	jmp    c0018f51 <Vm::faultHandler(regs*)+0xa5e>
c0018ed1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018ed4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0018ed7:	83 c0 04             	add    eax,0x4
c0018eda:	0f b7 d0             	movzx  edx,ax
c0018edd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018ee0:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0018ee3:	eb 6c                	jmp    c0018f51 <Vm::faultHandler(regs*)+0xa5e>
c0018ee5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018ee8:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0018eeb:	0f b7 d0             	movzx  edx,ax
c0018eee:	0f b7 45 dc          	movzx  eax,WORD PTR [ebp-0x24]
c0018ef2:	83 ec 08             	sub    esp,0x8
c0018ef5:	52                   	push   edx
c0018ef6:	50                   	push   eax
c0018ef7:	e8 3b f4 ff ff       	call   c0018337 <Vm::readWordFromReal(unsigned short, unsigned short)>
c0018efc:	83 c4 10             	add    esp,0x10
c0018eff:	0f b7 c0             	movzx  eax,ax
c0018f02:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0018f05:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c0018f08:	0f b7 d2             	movzx  edx,dx
c0018f0b:	66 89 55 92          	mov    WORD PTR [ebp-0x6e],dx
c0018f0f:	66 89 45 90          	mov    WORD PTR [ebp-0x70],ax
c0018f13:	8b 45 90             	mov    eax,DWORD PTR [ebp-0x70]
c0018f16:	66 8b 55 92          	mov    dx,WORD PTR [ebp-0x6e]
c0018f1a:	66 ef                	out    dx,ax
c0018f1c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018f1f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0018f22:	25 00 04 00 00       	and    eax,0x400
c0018f27:	85 c0                	test   eax,eax
c0018f29:	74 14                	je     c0018f3f <Vm::faultHandler(regs*)+0xa4c>
c0018f2b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018f2e:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0018f31:	83 e8 02             	sub    eax,0x2
c0018f34:	0f b7 d0             	movzx  edx,ax
c0018f37:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018f3a:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0018f3d:	eb 12                	jmp    c0018f51 <Vm::faultHandler(regs*)+0xa5e>
c0018f3f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018f42:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0018f45:	83 c0 02             	add    eax,0x2
c0018f48:	0f b7 d0             	movzx  edx,ax
c0018f4b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018f4e:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0018f51:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018f54:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018f57:	8d 50 01             	lea    edx,[eax+0x1]
c0018f5a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018f5d:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0018f60:	b0 01                	mov    al,0x1
c0018f62:	e9 cf 03 00 00       	jmp    c0019336 <Vm::faultHandler(regs*)+0xe43>
c0018f67:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018f6a:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0018f6d:	b0 00                	mov    al,0x0
c0018f6f:	89 c2                	mov    edx,eax
c0018f71:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018f74:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0018f77:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018f7a:	83 c0 01             	add    eax,0x1
c0018f7d:	8a 00                	mov    al,BYTE PTR [eax]
c0018f7f:	0f b6 c0             	movzx  eax,al
c0018f82:	83 ec 0c             	sub    esp,0xc
c0018f85:	50                   	push   eax
c0018f86:	e8 1e eb ff ff       	call   c0017aa9 <Vm::inbv(unsigned short)>
c0018f8b:	83 c4 10             	add    esp,0x10
c0018f8e:	88 c1                	mov    cl,al
c0018f90:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018f93:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0018f96:	0f b6 c1             	movzx  eax,cl
c0018f99:	09 c2                	or     edx,eax
c0018f9b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018f9e:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0018fa1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018fa4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018fa7:	8d 50 02             	lea    edx,[eax+0x2]
c0018faa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018fad:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0018fb0:	b0 01                	mov    al,0x1
c0018fb2:	e9 7f 03 00 00       	jmp    c0019336 <Vm::faultHandler(regs*)+0xe43>
c0018fb7:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c0018fbb:	85 c0                	test   eax,eax
c0018fbd:	74 24                	je     c0018fe3 <Vm::faultHandler(regs*)+0xaf0>
c0018fbf:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018fc2:	83 c0 01             	add    eax,0x1
c0018fc5:	8a 00                	mov    al,BYTE PTR [eax]
c0018fc7:	0f b6 c0             	movzx  eax,al
c0018fca:	66 89 45 8e          	mov    WORD PTR [ebp-0x72],ax
c0018fce:	66 8b 45 8e          	mov    ax,WORD PTR [ebp-0x72]
c0018fd2:	89 c2                	mov    edx,eax
c0018fd4:	ed                   	in     eax,dx
c0018fd5:	89 45 88             	mov    DWORD PTR [ebp-0x78],eax
c0018fd8:	8b 55 88             	mov    edx,DWORD PTR [ebp-0x78]
c0018fdb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018fde:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0018fe1:	eb 42                	jmp    c0019025 <Vm::faultHandler(regs*)+0xb32>
c0018fe3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018fe6:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0018fe9:	25 00 00 ff ff       	and    eax,0xffff0000
c0018fee:	89 c2                	mov    edx,eax
c0018ff0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018ff3:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0018ff6:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018ff9:	83 c0 01             	add    eax,0x1
c0018ffc:	8a 00                	mov    al,BYTE PTR [eax]
c0018ffe:	0f b6 c0             	movzx  eax,al
c0019001:	66 89 45 86          	mov    WORD PTR [ebp-0x7a],ax
c0019005:	66 8b 45 86          	mov    ax,WORD PTR [ebp-0x7a]
c0019009:	89 c2                	mov    edx,eax
c001900b:	66 ed                	in     ax,dx
c001900d:	66 89 45 84          	mov    WORD PTR [ebp-0x7c],ax
c0019011:	8b 4d 84             	mov    ecx,DWORD PTR [ebp-0x7c]
c0019014:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019017:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c001901a:	0f b7 c1             	movzx  eax,cx
c001901d:	09 c2                	or     edx,eax
c001901f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019022:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0019025:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019028:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001902b:	8d 50 02             	lea    edx,[eax+0x2]
c001902e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019031:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0019034:	b0 01                	mov    al,0x1
c0019036:	e9 fb 02 00 00       	jmp    c0019336 <Vm::faultHandler(regs*)+0xe43>
c001903b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001903e:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0019041:	0f b6 d0             	movzx  edx,al
c0019044:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0019047:	83 c0 01             	add    eax,0x1
c001904a:	8a 00                	mov    al,BYTE PTR [eax]
c001904c:	0f b6 c0             	movzx  eax,al
c001904f:	83 ec 08             	sub    esp,0x8
c0019052:	52                   	push   edx
c0019053:	50                   	push   eax
c0019054:	e8 87 ea ff ff       	call   c0017ae0 <Vm::outbv(unsigned short, unsigned char)>
c0019059:	83 c4 10             	add    esp,0x10
c001905c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001905f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0019062:	8d 50 02             	lea    edx,[eax+0x2]
c0019065:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019068:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001906b:	b0 01                	mov    al,0x1
c001906d:	e9 c4 02 00 00       	jmp    c0019336 <Vm::faultHandler(regs*)+0xe43>
c0019072:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c0019076:	85 c0                	test   eax,eax
c0019078:	74 28                	je     c00190a2 <Vm::faultHandler(regs*)+0xbaf>
c001907a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001907d:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0019080:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0019083:	83 c2 01             	add    edx,0x1
c0019086:	8a 12                	mov    dl,BYTE PTR [edx]
c0019088:	0f b6 d2             	movzx  edx,dl
c001908b:	66 89 55 82          	mov    WORD PTR [ebp-0x7e],dx
c001908f:	89 85 7c ff ff ff    	mov    DWORD PTR [ebp-0x84],eax
c0019095:	8b 85 7c ff ff ff    	mov    eax,DWORD PTR [ebp-0x84]
c001909b:	66 8b 55 82          	mov    dx,WORD PTR [ebp-0x7e]
c001909f:	ef                   	out    dx,eax
c00190a0:	eb 31                	jmp    c00190d3 <Vm::faultHandler(regs*)+0xbe0>
c00190a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00190a5:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c00190a8:	0f b7 c0             	movzx  eax,ax
c00190ab:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00190ae:	83 c2 01             	add    edx,0x1
c00190b1:	8a 12                	mov    dl,BYTE PTR [edx]
c00190b3:	0f b6 d2             	movzx  edx,dl
c00190b6:	66 89 95 7a ff ff ff 	mov    WORD PTR [ebp-0x86],dx
c00190bd:	66 89 85 78 ff ff ff 	mov    WORD PTR [ebp-0x88],ax
c00190c4:	8b 85 78 ff ff ff    	mov    eax,DWORD PTR [ebp-0x88]
c00190ca:	66 8b 95 7a ff ff ff 	mov    dx,WORD PTR [ebp-0x86]
c00190d1:	66 ef                	out    dx,ax
c00190d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00190d6:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00190d9:	8d 50 02             	lea    edx,[eax+0x2]
c00190dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00190df:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00190e2:	b0 01                	mov    al,0x1
c00190e4:	e9 4d 02 00 00       	jmp    c0019336 <Vm::faultHandler(regs*)+0xe43>
c00190e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00190ec:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c00190ef:	b0 00                	mov    al,0x0
c00190f1:	89 c2                	mov    edx,eax
c00190f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00190f6:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00190f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00190fc:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00190ff:	0f b7 c0             	movzx  eax,ax
c0019102:	83 ec 0c             	sub    esp,0xc
c0019105:	50                   	push   eax
c0019106:	e8 9e e9 ff ff       	call   c0017aa9 <Vm::inbv(unsigned short)>
c001910b:	83 c4 10             	add    esp,0x10
c001910e:	88 c1                	mov    cl,al
c0019110:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019113:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0019116:	0f b6 c1             	movzx  eax,cl
c0019119:	09 c2                	or     edx,eax
c001911b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001911e:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0019121:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019124:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0019127:	8d 50 01             	lea    edx,[eax+0x1]
c001912a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001912d:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0019130:	b0 01                	mov    al,0x1
c0019132:	e9 ff 01 00 00       	jmp    c0019336 <Vm::faultHandler(regs*)+0xe43>
c0019137:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c001913b:	85 c0                	test   eax,eax
c001913d:	74 2e                	je     c001916d <Vm::faultHandler(regs*)+0xc7a>
c001913f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019142:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0019145:	0f b7 c0             	movzx  eax,ax
c0019148:	66 89 85 76 ff ff ff 	mov    WORD PTR [ebp-0x8a],ax
c001914f:	66 8b 85 76 ff ff ff 	mov    ax,WORD PTR [ebp-0x8a]
c0019156:	89 c2                	mov    edx,eax
c0019158:	ed                   	in     eax,dx
c0019159:	89 85 70 ff ff ff    	mov    DWORD PTR [ebp-0x90],eax
c001915f:	8b 95 70 ff ff ff    	mov    edx,DWORD PTR [ebp-0x90]
c0019165:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019168:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c001916b:	eb 4c                	jmp    c00191b9 <Vm::faultHandler(regs*)+0xcc6>
c001916d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019170:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0019173:	25 00 00 ff ff       	and    eax,0xffff0000
c0019178:	89 c2                	mov    edx,eax
c001917a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001917d:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0019180:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019183:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0019186:	0f b7 c0             	movzx  eax,ax
c0019189:	66 89 85 6e ff ff ff 	mov    WORD PTR [ebp-0x92],ax
c0019190:	66 8b 85 6e ff ff ff 	mov    ax,WORD PTR [ebp-0x92]
c0019197:	89 c2                	mov    edx,eax
c0019199:	66 ed                	in     ax,dx
c001919b:	66 89 85 6c ff ff ff 	mov    WORD PTR [ebp-0x94],ax
c00191a2:	8b 8d 6c ff ff ff    	mov    ecx,DWORD PTR [ebp-0x94]
c00191a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00191ab:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00191ae:	0f b7 c1             	movzx  eax,cx
c00191b1:	09 c2                	or     edx,eax
c00191b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00191b6:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00191b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00191bc:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00191bf:	8d 50 01             	lea    edx,[eax+0x1]
c00191c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00191c5:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00191c8:	b0 01                	mov    al,0x1
c00191ca:	e9 67 01 00 00       	jmp    c0019336 <Vm::faultHandler(regs*)+0xe43>
c00191cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00191d2:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c00191d5:	0f b6 d0             	movzx  edx,al
c00191d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00191db:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00191de:	0f b7 c0             	movzx  eax,ax
c00191e1:	83 ec 08             	sub    esp,0x8
c00191e4:	52                   	push   edx
c00191e5:	50                   	push   eax
c00191e6:	e8 f5 e8 ff ff       	call   c0017ae0 <Vm::outbv(unsigned short, unsigned char)>
c00191eb:	83 c4 10             	add    esp,0x10
c00191ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00191f1:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00191f4:	8d 50 01             	lea    edx,[eax+0x1]
c00191f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00191fa:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00191fd:	b0 01                	mov    al,0x1
c00191ff:	e9 32 01 00 00       	jmp    c0019336 <Vm::faultHandler(regs*)+0xe43>
c0019204:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c0019208:	85 c0                	test   eax,eax
c001920a:	74 2c                	je     c0019238 <Vm::faultHandler(regs*)+0xd45>
c001920c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001920f:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0019212:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0019215:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c0019218:	0f b7 d2             	movzx  edx,dx
c001921b:	66 89 95 6a ff ff ff 	mov    WORD PTR [ebp-0x96],dx
c0019222:	89 85 64 ff ff ff    	mov    DWORD PTR [ebp-0x9c],eax
c0019228:	8b 85 64 ff ff ff    	mov    eax,DWORD PTR [ebp-0x9c]
c001922e:	66 8b 95 6a ff ff ff 	mov    dx,WORD PTR [ebp-0x96]
c0019235:	ef                   	out    dx,eax
c0019236:	eb 2f                	jmp    c0019267 <Vm::faultHandler(regs*)+0xd74>
c0019238:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001923b:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001923e:	0f b7 c0             	movzx  eax,ax
c0019241:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0019244:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c0019247:	0f b7 d2             	movzx  edx,dx
c001924a:	66 89 95 62 ff ff ff 	mov    WORD PTR [ebp-0x9e],dx
c0019251:	66 89 85 60 ff ff ff 	mov    WORD PTR [ebp-0xa0],ax
c0019258:	8b 85 60 ff ff ff    	mov    eax,DWORD PTR [ebp-0xa0]
c001925e:	66 8b 95 62 ff ff ff 	mov    dx,WORD PTR [ebp-0x9e]
c0019265:	66 ef                	out    dx,ax
c0019267:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001926a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001926d:	8d 50 01             	lea    edx,[eax+0x1]
c0019270:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019273:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0019276:	b0 01                	mov    al,0x1
c0019278:	e9 b9 00 00 00       	jmp    c0019336 <Vm::faultHandler(regs*)+0xe43>
c001927d:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0019280:	83 c0 05             	add    eax,0x5
c0019283:	8a 00                	mov    al,BYTE PTR [eax]
c0019285:	0f b6 c0             	movzx  eax,al
c0019288:	89 85 54 ff ff ff    	mov    DWORD PTR [ebp-0xac],eax
c001928e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0019291:	83 c0 04             	add    eax,0x4
c0019294:	8a 00                	mov    al,BYTE PTR [eax]
c0019296:	0f b6 f8             	movzx  edi,al
c0019299:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001929c:	83 c0 03             	add    eax,0x3
c001929f:	8a 00                	mov    al,BYTE PTR [eax]
c00192a1:	0f b6 f0             	movzx  esi,al
c00192a4:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00192a7:	83 c0 02             	add    eax,0x2
c00192aa:	8a 00                	mov    al,BYTE PTR [eax]
c00192ac:	0f b6 d8             	movzx  ebx,al
c00192af:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00192b2:	83 c0 01             	add    eax,0x1
c00192b5:	8a 00                	mov    al,BYTE PTR [eax]
c00192b7:	0f b6 c8             	movzx  ecx,al
c00192ba:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00192bd:	8a 00                	mov    al,BYTE PTR [eax]
c00192bf:	0f b6 d0             	movzx  edx,al
c00192c2:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00192c5:	8a 00                	mov    al,BYTE PTR [eax]
c00192c7:	0f b6 c0             	movzx  eax,al
c00192ca:	ff b5 54 ff ff ff    	push   DWORD PTR [ebp-0xac]
c00192d0:	57                   	push   edi
c00192d1:	56                   	push   esi
c00192d2:	53                   	push   ebx
c00192d3:	51                   	push   ecx
c00192d4:	52                   	push   edx
c00192d5:	50                   	push   eax
c00192d6:	68 d0 c3 02 c0       	push   0xc002c3d0
c00192db:	e8 86 dc fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00192e0:	83 c4 20             	add    esp,0x20
c00192e3:	83 ec 0c             	sub    esp,0xc
c00192e6:	6a 60                	push   0x60
c00192e8:	e8 bc e7 ff ff       	call   c0017aa9 <Vm::inbv(unsigned short)>
c00192ed:	83 c4 10             	add    esp,0x10
c00192f0:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c00192f3:	0f b6 45 db          	movzx  eax,BYTE PTR [ebp-0x25]
c00192f7:	83 f8 1c             	cmp    eax,0x1c
c00192fa:	74 09                	je     c0019305 <Vm::faultHandler(regs*)+0xe12>
c00192fc:	0f b6 45 db          	movzx  eax,BYTE PTR [ebp-0x25]
c0019300:	83 f8 5a             	cmp    eax,0x5a
c0019303:	75 24                	jne    c0019329 <Vm::faultHandler(regs*)+0xe36>
c0019305:	0f b6 45 db          	movzx  eax,BYTE PTR [ebp-0x25]
c0019309:	83 f8 1c             	cmp    eax,0x1c
c001930c:	74 09                	je     c0019317 <Vm::faultHandler(regs*)+0xe24>
c001930e:	0f b6 45 db          	movzx  eax,BYTE PTR [ebp-0x25]
c0019312:	83 f8 5a             	cmp    eax,0x5a
c0019315:	75 15                	jne    c001932c <Vm::faultHandler(regs*)+0xe39>
c0019317:	83 ec 0c             	sub    esp,0xc
c001931a:	6a 60                	push   0x60
c001931c:	e8 88 e7 ff ff       	call   c0017aa9 <Vm::inbv(unsigned short)>
c0019321:	83 c4 10             	add    esp,0x10
c0019324:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c0019327:	eb dc                	jmp    c0019305 <Vm::faultHandler(regs*)+0xe12>
c0019329:	90                   	nop
c001932a:	eb b7                	jmp    c00192e3 <Vm::faultHandler(regs*)+0xdf0>
c001932c:	90                   	nop
c001932d:	b0 00                	mov    al,0x0
c001932f:	eb 05                	jmp    c0019336 <Vm::faultHandler(regs*)+0xe43>
c0019331:	e9 39 f2 ff ff       	jmp    c001856f <Vm::faultHandler(regs*)+0x7c>
c0019336:	8d 65 f4             	lea    esp,[ebp-0xc]
c0019339:	5b                   	pop    ebx
c001933a:	5e                   	pop    esi
c001933b:	5f                   	pop    edi
c001933c:	5d                   	pop    ebp
c001933d:	c3                   	ret    

c001933e <IOAPIC::close(int, int, void*)>:
c001933e:	b8 00 00 00 00       	mov    eax,0x0
c0019343:	c3                   	ret    

c0019344 <apicGetBase()>:
c0019344:	55                   	push   ebp
c0019345:	89 e5                	mov    ebp,esp
c0019347:	83 ec 18             	sub    esp,0x18
c001934a:	a0 4c 64 03 c0       	mov    al,ds:0xc003644c
c001934f:	83 e0 08             	and    eax,0x8
c0019352:	0f b6 c0             	movzx  eax,al
c0019355:	85 c0                	test   eax,eax
c0019357:	75 07                	jne    c0019360 <apicGetBase()+0x1c>
c0019359:	b8 00 00 00 00       	mov    eax,0x0
c001935e:	eb 1b                	jmp    c001937b <apicGetBase()+0x37>
c0019360:	83 ec 0c             	sub    esp,0xc
c0019363:	6a 1b                	push   0x1b
c0019365:	e8 74 15 00 00       	call   c001a8de <x86rdmsr(unsigned int)>
c001936a:	83 c4 10             	add    esp,0x10
c001936d:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0019370:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0019373:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0019376:	25 00 00 ff ff       	and    eax,0xffff0000
c001937b:	c9                   	leave  
c001937c:	c3                   	ret    
c001937d:	90                   	nop

c001937e <IOAPIC::IOAPIC()>:
c001937e:	83 ec 0c             	sub    esp,0xc
c0019381:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019385:	83 ec 08             	sub    esp,0x8
c0019388:	68 90 c7 02 c0       	push   0xc002c790
c001938d:	50                   	push   eax
c001938e:	e8 ed 11 ff ff       	call   c000a580 <Device::Device(char const*)>
c0019393:	83 c4 10             	add    esp,0x10
c0019396:	ba b0 c7 02 c0       	mov    edx,0xc002c7b0
c001939b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001939f:	89 10                	mov    DWORD PTR [eax],edx
c00193a1:	90                   	nop
c00193a2:	83 c4 0c             	add    esp,0xc
c00193a5:	c3                   	ret    

c00193a6 <apicOpen()>:
c00193a6:	55                   	push   ebp
c00193a7:	89 e5                	mov    ebp,esp
c00193a9:	53                   	push   ebx
c00193aa:	83 ec 34             	sub    esp,0x34
c00193ad:	83 ec 0c             	sub    esp,0xc
c00193b0:	68 98 c7 02 c0       	push   0xc002c798
c00193b5:	e8 ac db fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00193ba:	83 c4 10             	add    esp,0x10
c00193bd:	a0 00 64 03 c0       	mov    al,ds:0xc0036400
c00193c2:	83 f0 01             	xor    eax,0x1
c00193c5:	0f b6 c0             	movzx  eax,al
c00193c8:	85 c0                	test   eax,eax
c00193ca:	0f 84 a3 00 00 00    	je     c0019473 <apicOpen()+0xcd>
c00193d0:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c00193d4:	a0 40 5e 03 c0       	mov    al,ds:0xc0035e40
c00193d9:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c00193dd:	0f b6 c0             	movzx  eax,al
c00193e0:	39 c2                	cmp    edx,eax
c00193e2:	0f 83 84 00 00 00    	jae    c001946c <apicOpen()+0xc6>
c00193e8:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c00193ef:	83 ec 0c             	sub    esp,0xc
c00193f2:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c00193f5:	e8 12 6d ff ff       	call   c001010c <malloc>
c00193fa:	83 c4 10             	add    esp,0x10
c00193fd:	89 c3                	mov    ebx,eax
c00193ff:	83 ec 0c             	sub    esp,0xc
c0019402:	53                   	push   ebx
c0019403:	e8 76 ff ff ff       	call   c001937e <IOAPIC::IOAPIC()>
c0019408:	83 c4 10             	add    esp,0x10
c001940b:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001940e:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c0019412:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0019415:	89 14 85 e0 63 03 c0 	mov    DWORD PTR [eax*4-0x3ffc9c20],edx
c001941c:	a1 c0 63 03 c0       	mov    eax,ds:0xc00363c0
c0019421:	83 c0 01             	add    eax,0x1
c0019424:	a3 c0 63 03 c0       	mov    ds:0xc00363c0,eax
c0019429:	a1 08 61 03 c0       	mov    eax,ds:0xc0036108
c001942e:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c0019434:	83 ec 08             	sub    esp,0x8
c0019437:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001943a:	50                   	push   eax
c001943b:	e8 de 0f ff ff       	call   c000a41e <Device::addChild(Device*)>
c0019440:	83 c4 10             	add    esp,0x10
c0019443:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0019446:	8b 00                	mov    eax,DWORD PTR [eax]
c0019448:	83 c0 08             	add    eax,0x8
c001944b:	8b 00                	mov    eax,DWORD PTR [eax]
c001944d:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c0019451:	6a 00                	push   0x0
c0019453:	6a 00                	push   0x0
c0019455:	52                   	push   edx
c0019456:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0019459:	ff d0                	call   eax
c001945b:	83 c4 10             	add    esp,0x10
c001945e:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c0019461:	83 c0 01             	add    eax,0x1
c0019464:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
c0019467:	e9 68 ff ff ff       	jmp    c00193d4 <apicOpen()+0x2e>
c001946c:	c6 05 00 64 03 c0 01 	mov    BYTE PTR ds:0xc0036400,0x1
c0019473:	e8 cc fe ff ff       	call   c0019344 <apicGetBase()>
c0019478:	05 f0 00 00 00       	add    eax,0xf0
c001947d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0019480:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0019483:	8b 00                	mov    eax,DWORD PTR [eax]
c0019485:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0019488:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001948f:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c0019496:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0019499:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001949c:	89 10                	mov    DWORD PTR [eax],edx
c001949e:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c00194a5:	a1 8c 5d 03 c0       	mov    eax,ds:0xc0035d8c
c00194aa:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c00194ad:	7d 7c                	jge    c001952b <apicOpen()+0x185>
c00194af:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00194b2:	8b 04 85 a0 5d 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffca260]
c00194b9:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c00194bc:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00194bf:	8b 04 85 a0 5d 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffca260]
c00194c6:	c1 e8 08             	shr    eax,0x8
c00194c9:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c00194cd:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00194d0:	8b 04 85 a0 5d 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffca260]
c00194d7:	c1 e8 18             	shr    eax,0x18
c00194da:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c00194dd:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c00194e1:	3d ff 00 00 00       	cmp    eax,0xff
c00194e6:	75 3a                	jne    c0019522 <apicOpen()+0x17c>
c00194e8:	e8 57 fe ff ff       	call   c0019344 <apicGetBase()>
c00194ed:	0f b6 55 df          	movzx  edx,BYTE PTR [ebp-0x21]
c00194f1:	83 fa 01             	cmp    edx,0x1
c00194f4:	75 07                	jne    c00194fd <apicOpen()+0x157>
c00194f6:	ba 60 03 00 00       	mov    edx,0x360
c00194fb:	eb 05                	jmp    c0019502 <apicOpen()+0x15c>
c00194fd:	ba 50 03 00 00       	mov    edx,0x350
c0019502:	01 d0                	add    eax,edx
c0019504:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0019507:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001950a:	8b 00                	mov    eax,DWORD PTR [eax]
c001950c:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001950f:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c0019516:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c001951a:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001951d:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0019520:	89 10                	mov    DWORD PTR [eax],edx
c0019522:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c0019526:	e9 7a ff ff ff       	jmp    c00194a5 <apicOpen()+0xff>
c001952b:	90                   	nop
c001952c:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001952f:	c9                   	leave  
c0019530:	c3                   	ret    
c0019531:	90                   	nop

c0019532 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c0019532:	55                   	push   ebp
c0019533:	89 e5                	mov    ebp,esp
c0019535:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019538:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001953e:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0019541:	72 1d                	jb     c0019560 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0019543:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019546:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001954c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001954f:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c0019555:	01 d0                	add    eax,edx
c0019557:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001955a:	73 04                	jae    c0019560 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001955c:	b0 01                	mov    al,0x1
c001955e:	eb 02                	jmp    c0019562 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c0019560:	b0 00                	mov    al,0x0
c0019562:	5d                   	pop    ebp
c0019563:	c3                   	ret    

c0019564 <IOAPIC::read(int)>:
c0019564:	55                   	push   ebp
c0019565:	89 e5                	mov    ebp,esp
c0019567:	83 ec 10             	sub    esp,0x10
c001956a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001956d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0019573:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0019576:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0019579:	0f b6 d0             	movzx  edx,al
c001957c:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001957f:	89 10                	mov    DWORD PTR [eax],edx
c0019581:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0019584:	83 c0 10             	add    eax,0x10
c0019587:	8b 00                	mov    eax,DWORD PTR [eax]
c0019589:	c9                   	leave  
c001958a:	c3                   	ret    
c001958b:	90                   	nop

c001958c <IOAPIC::open(int, int, void*)>:
c001958c:	55                   	push   ebp
c001958d:	89 e5                	mov    ebp,esp
c001958f:	57                   	push   edi
c0019590:	56                   	push   esi
c0019591:	53                   	push   ebx
c0019592:	83 ec 04             	sub    esp,0x4
c0019595:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019598:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001959b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00195a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00195a4:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00195aa:	8b 14 85 80 5e 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffca180]
c00195b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00195b4:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00195ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00195bd:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00195c3:	8b 14 85 00 5f 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffca100]
c00195ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00195cd:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c00195d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00195d6:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00195dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00195df:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00195e5:	0f b6 f0             	movzx  esi,al
c00195e8:	89 d0                	mov    eax,edx
c00195ea:	ba 00 00 00 00       	mov    edx,0x0
c00195ef:	89 c7                	mov    edi,eax
c00195f1:	83 e7 ff             	and    edi,0xffffffff
c00195f4:	89 f9                	mov    ecx,edi
c00195f6:	0f b6 da             	movzx  ebx,dl
c00195f9:	89 c8                	mov    eax,ecx
c00195fb:	89 da                	mov    edx,ebx
c00195fd:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0019600:	8d 5e 08             	lea    ebx,[esi+0x8]
c0019603:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0019607:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001960b:	83 e0 00             	and    eax,0x0
c001960e:	09 d0                	or     eax,edx
c0019610:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0019614:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019617:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001961d:	8d 50 01             	lea    edx,[eax+0x1]
c0019620:	88 d1                	mov    cl,dl
c0019622:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0019625:	88 8a c5 00 00 00    	mov    BYTE PTR [edx+0xc5],cl
c001962b:	0f b6 d0             	movzx  edx,al
c001962e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019631:	83 c2 08             	add    edx,0x8
c0019634:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0019638:	0f b6 c9             	movzx  ecx,cl
c001963b:	81 c9 00 ad de 00    	or     ecx,0xdead00
c0019641:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0019645:	6a 01                	push   0x1
c0019647:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001964a:	e8 15 ff ff ff       	call   c0019564 <IOAPIC::read(int)>
c001964f:	83 c4 08             	add    esp,0x8
c0019652:	c1 f8 10             	sar    eax,0x10
c0019655:	0f b6 c0             	movzx  eax,al
c0019658:	8d 50 01             	lea    edx,[eax+0x1]
c001965b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001965e:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c0019664:	b8 00 00 00 00       	mov    eax,0x0
c0019669:	8d 65 f4             	lea    esp,[ebp-0xc]
c001966c:	5b                   	pop    ebx
c001966d:	5e                   	pop    esi
c001966e:	5f                   	pop    edi
c001966f:	5d                   	pop    ebp
c0019670:	c3                   	ret    
c0019671:	90                   	nop

c0019672 <IOAPIC::write(int, int)>:
c0019672:	55                   	push   ebp
c0019673:	89 e5                	mov    ebp,esp
c0019675:	83 ec 10             	sub    esp,0x10
c0019678:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001967b:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0019681:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0019684:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0019687:	0f b6 d0             	movzx  edx,al
c001968a:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001968d:	89 10                	mov    DWORD PTR [eax],edx
c001968f:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0019692:	8d 50 10             	lea    edx,[eax+0x10]
c0019695:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0019698:	89 02                	mov    DWORD PTR [edx],eax
c001969a:	90                   	nop
c001969b:	c9                   	leave  
c001969c:	c3                   	ret    
c001969d:	90                   	nop

c001969e <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001969e:	55                   	push   ebp
c001969f:	89 e5                	mov    ebp,esp
c00196a1:	53                   	push   ebx
c00196a2:	83 ec 2c             	sub    esp,0x2c
c00196a5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00196a8:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c00196ab:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c00196ae:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c00196b1:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c00196b4:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00196b7:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00196ba:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00196bd:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00196c0:	88 d8                	mov    al,bl
c00196c2:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c00196c5:	88 c8                	mov    al,cl
c00196c7:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c00196ca:	88 d0                	mov    al,dl
c00196cc:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c00196cf:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00196d3:	83 c0 08             	add    eax,0x8
c00196d6:	d1 e0                	shl    eax,1
c00196d8:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00196db:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00196df:	83 c0 08             	add    eax,0x8
c00196e2:	d1 e0                	shl    eax,1
c00196e4:	83 c0 01             	add    eax,0x1
c00196e7:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00196ea:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00196ed:	50                   	push   eax
c00196ee:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00196f1:	e8 6e fe ff ff       	call   c0019564 <IOAPIC::read(int)>
c00196f6:	83 c4 08             	add    esp,0x8
c00196f9:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00196fc:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c0019703:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0019706:	c1 e0 18             	shl    eax,0x18
c0019709:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001970c:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001970f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0019712:	52                   	push   edx
c0019713:	50                   	push   eax
c0019714:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0019717:	e8 56 ff ff ff       	call   c0019672 <IOAPIC::write(int, int)>
c001971c:	83 c4 0c             	add    esp,0xc
c001971f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0019722:	50                   	push   eax
c0019723:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0019726:	e8 39 fe ff ff       	call   c0019564 <IOAPIC::read(int)>
c001972b:	83 c4 08             	add    esp,0x8
c001972e:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0019731:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c0019738:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001973f:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c0019746:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
c001974a:	85 c0                	test   eax,eax
c001974c:	74 09                	je     c0019757 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb9>
c001974e:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c0019755:	eb 07                	jmp    c001975e <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc0>
c0019757:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001975e:	0f b6 45 d0          	movzx  eax,BYTE PTR [ebp-0x30]
c0019762:	85 c0                	test   eax,eax
c0019764:	74 09                	je     c001976f <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd1>
c0019766:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001976d:	eb 07                	jmp    c0019776 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd8>
c001976f:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c0019776:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001977d:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c0019781:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c0019784:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0019787:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001978a:	52                   	push   edx
c001978b:	50                   	push   eax
c001978c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001978f:	e8 de fe ff ff       	call   c0019672 <IOAPIC::write(int, int)>
c0019794:	83 c4 0c             	add    esp,0xc
c0019797:	90                   	nop
c0019798:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001979b:	c9                   	leave  
c001979c:	c3                   	ret    
c001979d:	90                   	nop

c001979e <noCopro(unsigned long)>:
c001979e:	c3                   	ret    

c001979f <HalRestart()>:
c001979f:	e4 64                	in     al,0x64
c00197a1:	a8 02                	test   al,0x2
c00197a3:	75 fa                	jne    c001979f <HalRestart()>
c00197a5:	b0 fe                	mov    al,0xfe
c00197a7:	e6 64                	out    0x64,al
c00197a9:	c3                   	ret    

c00197aa <HalShutdown()>:
c00197aa:	c3                   	ret    

c00197ab <HalSleep()>:
c00197ab:	c3                   	ret    

c00197ac <CPU::close(int, int, void*)>:
c00197ac:	31 c0                	xor    eax,eax
c00197ae:	c3                   	ret    

c00197af <x86ReadCMOS(unsigned char)>:
c00197af:	83 ec 14             	sub    esp,0x14
c00197b2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00197b6:	88 04 24             	mov    BYTE PTR [esp],al
c00197b9:	a0 2c 64 03 c0       	mov    al,ds:0xc003642c
c00197be:	0f b6 c0             	movzx  eax,al
c00197c1:	85 c0                	test   eax,eax
c00197c3:	74 04                	je     c00197c9 <x86ReadCMOS(unsigned char)+0x1a>
c00197c5:	b2 00                	mov    dl,0x0
c00197c7:	eb 02                	jmp    c00197cb <x86ReadCMOS(unsigned char)+0x1c>
c00197c9:	b2 80                	mov    dl,0x80
c00197cb:	8a 04 24             	mov    al,BYTE PTR [esp]
c00197ce:	09 d0                	or     eax,edx
c00197d0:	0f b6 c0             	movzx  eax,al
c00197d3:	66 c7 44 24 0e 70 00 	mov    WORD PTR [esp+0xe],0x70
c00197da:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00197de:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c00197e2:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c00197e7:	ee                   	out    dx,al
c00197e8:	66 c7 44 24 12 71 00 	mov    WORD PTR [esp+0x12],0x71
c00197ef:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00197f4:	89 c2                	mov    edx,eax
c00197f6:	ec                   	in     al,dx
c00197f7:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00197fb:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00197ff:	83 c4 14             	add    esp,0x14
c0019802:	c3                   	ret    

c0019803 <x86WriteCMOS(unsigned char, unsigned char)>:
c0019803:	83 ec 18             	sub    esp,0x18
c0019806:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001980a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001980e:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0019812:	88 d0                	mov    al,dl
c0019814:	88 04 24             	mov    BYTE PTR [esp],al
c0019817:	a0 2c 64 03 c0       	mov    al,ds:0xc003642c
c001981c:	0f b6 c0             	movzx  eax,al
c001981f:	85 c0                	test   eax,eax
c0019821:	74 04                	je     c0019827 <x86WriteCMOS(unsigned char, unsigned char)+0x24>
c0019823:	b2 00                	mov    dl,0x0
c0019825:	eb 02                	jmp    c0019829 <x86WriteCMOS(unsigned char, unsigned char)+0x26>
c0019827:	b2 80                	mov    dl,0x80
c0019829:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001982d:	09 d0                	or     eax,edx
c001982f:	0f b6 c0             	movzx  eax,al
c0019832:	66 c7 44 24 12 70 00 	mov    WORD PTR [esp+0x12],0x70
c0019839:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001983d:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0019841:	66 8b 54 24 12       	mov    dx,WORD PTR [esp+0x12]
c0019846:	ee                   	out    dx,al
c0019847:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c001984b:	66 c7 44 24 16 71 00 	mov    WORD PTR [esp+0x16],0x71
c0019852:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c0019856:	8a 44 24 15          	mov    al,BYTE PTR [esp+0x15]
c001985a:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c001985f:	ee                   	out    dx,al
c0019860:	90                   	nop
c0019861:	83 c4 18             	add    esp,0x18
c0019864:	c3                   	ret    

c0019865 <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>:
c0019865:	60                   	pusha  
c0019866:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001986a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001986e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0019872:	9c                   	pushf  
c0019873:	fa                   	cli    
c0019874:	0f 09                	wbinvd 
c0019876:	0f 30                	wrmsr  
c0019878:	9d                   	popf   
c0019879:	89 c2                	mov    edx,eax
c001987b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001987f:	89 10                	mov    DWORD PTR [eax],edx
c0019881:	61                   	popa   
c0019882:	90                   	nop
c0019883:	c3                   	ret    

c0019884 <AMD_K6_read_msr(unsigned int, REGS*)>:
c0019884:	60                   	pusha  
c0019885:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019889:	89 c1                	mov    ecx,eax
c001988b:	9c                   	pushf  
c001988c:	fa                   	cli    
c001988d:	0f 09                	wbinvd 
c001988f:	31 c0                	xor    eax,eax
c0019891:	31 d2                	xor    edx,edx
c0019893:	0f 32                	rdmsr  
c0019895:	9d                   	popf   
c0019896:	89 c2                	mov    edx,eax
c0019898:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001989c:	89 10                	mov    DWORD PTR [eax],edx
c001989e:	61                   	popa   
c001989f:	90                   	nop
c00198a0:	c3                   	ret    

c00198a1 <AMD_K6_writeback(int, int, int)>:
c00198a1:	83 ec 20             	sub    esp,0x20
c00198a4:	a1 70 61 03 c0       	mov    eax,ds:0xc0036170
c00198a9:	c1 e8 14             	shr    eax,0x14
c00198ac:	c1 e8 02             	shr    eax,0x2
c00198af:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00198b3:	83 7c 24 24 05       	cmp    DWORD PTR [esp+0x24],0x5
c00198b8:	0f 85 9e 00 00 00    	jne    c001995c <AMD_K6_writeback(int, int, int)+0xbb>
c00198be:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00198c2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00198c6:	83 7c 24 28 08       	cmp    DWORD PTR [esp+0x28],0x8
c00198cb:	75 19                	jne    c00198e6 <AMD_K6_writeback(int, int, int)+0x45>
c00198cd:	83 7c 24 2c 07       	cmp    DWORD PTR [esp+0x2c],0x7
c00198d2:	7f 0a                	jg     c00198de <AMD_K6_writeback(int, int, int)+0x3d>
c00198d4:	c7 44 24 1c 07 00 00 00 	mov    DWORD PTR [esp+0x1c],0x7
c00198dc:	eb 08                	jmp    c00198e6 <AMD_K6_writeback(int, int, int)+0x45>
c00198de:	c7 44 24 1c 09 00 00 00 	mov    DWORD PTR [esp+0x1c],0x9
c00198e6:	83 7c 24 1c 06       	cmp    DWORD PTR [esp+0x1c],0x6
c00198eb:	7c 6e                	jl     c001995b <AMD_K6_writeback(int, int, int)+0xba>
c00198ed:	83 7c 24 1c 07       	cmp    DWORD PTR [esp+0x1c],0x7
c00198f2:	7e 09                	jle    c00198fd <AMD_K6_writeback(int, int, int)+0x5c>
c00198f4:	83 7c 24 1c 09       	cmp    DWORD PTR [esp+0x1c],0x9
c00198f9:	74 36                	je     c0019931 <AMD_K6_writeback(int, int, int)+0x90>
c00198fb:	eb 5e                	jmp    c001995b <AMD_K6_writeback(int, int, int)+0xba>
c00198fd:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019901:	50                   	push   eax
c0019902:	68 82 00 00 c0       	push   0xc0000082
c0019907:	e8 78 ff ff ff       	call   c0019884 <AMD_K6_read_msr(unsigned int, REGS*)>
c001990c:	83 c4 08             	add    esp,0x8
c001990f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019913:	d1 e0                	shl    eax,1
c0019915:	83 e0 7f             	and    eax,0x7f
c0019918:	89 c2                	mov    edx,eax
c001991a:	8d 44 24 08          	lea    eax,[esp+0x8]
c001991e:	50                   	push   eax
c001991f:	6a 00                	push   0x0
c0019921:	52                   	push   edx
c0019922:	68 82 00 00 c0       	push   0xc0000082
c0019927:	e8 39 ff ff ff       	call   c0019865 <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>
c001992c:	83 c4 10             	add    esp,0x10
c001992f:	eb 2b                	jmp    c001995c <AMD_K6_writeback(int, int, int)+0xbb>
c0019931:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019935:	50                   	push   eax
c0019936:	68 82 00 00 c0       	push   0xc0000082
c001993b:	e8 44 ff ff ff       	call   c0019884 <AMD_K6_read_msr(unsigned int, REGS*)>
c0019940:	83 c4 08             	add    esp,0x8
c0019943:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019947:	50                   	push   eax
c0019948:	6a 00                	push   0x0
c001994a:	6a 00                	push   0x0
c001994c:	68 82 00 00 c0       	push   0xc0000082
c0019951:	e8 0f ff ff ff       	call   c0019865 <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>
c0019956:	83 c4 10             	add    esp,0x10
c0019959:	eb 01                	jmp    c001995c <AMD_K6_writeback(int, int, int)+0xbb>
c001995b:	90                   	nop
c001995c:	90                   	nop
c001995d:	83 c4 20             	add    esp,0x20
c0019960:	c3                   	ret    

c0019961 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0019961:	56                   	push   esi
c0019962:	53                   	push   ebx
c0019963:	a1 e0 ff 02 c0       	mov    eax,ds:0xc002ffe0
c0019968:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c001996c:	75 32                	jne    c00199a0 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c001996e:	8b 15 20 64 03 c0    	mov    edx,DWORD PTR ds:0xc0036420
c0019974:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019978:	89 10                	mov    DWORD PTR [eax],edx
c001997a:	8b 15 1c 64 03 c0    	mov    edx,DWORD PTR ds:0xc003641c
c0019980:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019984:	89 10                	mov    DWORD PTR [eax],edx
c0019986:	8b 15 18 64 03 c0    	mov    edx,DWORD PTR ds:0xc0036418
c001998c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019990:	89 10                	mov    DWORD PTR [eax],edx
c0019992:	8b 15 14 64 03 c0    	mov    edx,DWORD PTR ds:0xc0036414
c0019998:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001999c:	89 10                	mov    DWORD PTR [eax],edx
c001999e:	eb 5c                	jmp    c00199fc <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x9b>
c00199a0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00199a4:	ba 00 00 00 00       	mov    edx,0x0
c00199a9:	89 d1                	mov    ecx,edx
c00199ab:	0f a2                	cpuid  
c00199ad:	89 c6                	mov    esi,eax
c00199af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00199b3:	89 30                	mov    DWORD PTR [eax],esi
c00199b5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00199b9:	89 18                	mov    DWORD PTR [eax],ebx
c00199bb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00199bf:	89 08                	mov    DWORD PTR [eax],ecx
c00199c1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00199c5:	89 10                	mov    DWORD PTR [eax],edx
c00199c7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00199cb:	a3 e0 ff 02 c0       	mov    ds:0xc002ffe0,eax
c00199d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00199d4:	8b 00                	mov    eax,DWORD PTR [eax]
c00199d6:	a3 20 64 03 c0       	mov    ds:0xc0036420,eax
c00199db:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00199df:	8b 00                	mov    eax,DWORD PTR [eax]
c00199e1:	a3 1c 64 03 c0       	mov    ds:0xc003641c,eax
c00199e6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00199ea:	8b 00                	mov    eax,DWORD PTR [eax]
c00199ec:	a3 18 64 03 c0       	mov    ds:0xc0036418,eax
c00199f1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00199f5:	8b 00                	mov    eax,DWORD PTR [eax]
c00199f7:	a3 14 64 03 c0       	mov    ds:0xc0036414,eax
c00199fc:	5b                   	pop    ebx
c00199fd:	5e                   	pop    esi
c00199fe:	c3                   	ret    

c00199ff <cpuidCheckEDX(unsigned int)>:
c00199ff:	83 ec 10             	sub    esp,0x10
c0019a02:	89 e0                	mov    eax,esp
c0019a04:	50                   	push   eax
c0019a05:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019a09:	50                   	push   eax
c0019a0a:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019a0e:	50                   	push   eax
c0019a0f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019a13:	50                   	push   eax
c0019a14:	6a 01                	push   0x1
c0019a16:	e8 46 ff ff ff       	call   c0019961 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019a1b:	83 c4 14             	add    esp,0x14
c0019a1e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0019a21:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0019a25:	0f 95 c0             	setne  al
c0019a28:	83 c4 10             	add    esp,0x10
c0019a2b:	c3                   	ret    

c0019a2c <cpuidCheckECX(unsigned int)>:
c0019a2c:	83 ec 10             	sub    esp,0x10
c0019a2f:	89 e0                	mov    eax,esp
c0019a31:	50                   	push   eax
c0019a32:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019a36:	50                   	push   eax
c0019a37:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019a3b:	50                   	push   eax
c0019a3c:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019a40:	50                   	push   eax
c0019a41:	6a 01                	push   0x1
c0019a43:	e8 19 ff ff ff       	call   c0019961 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019a48:	83 c4 14             	add    esp,0x14
c0019a4b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019a4f:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0019a53:	0f 95 c0             	setne  al
c0019a56:	83 c4 10             	add    esp,0x10
c0019a59:	c3                   	ret    

c0019a5a <cpuidCheckExtendedEBX(unsigned int)>:
c0019a5a:	83 ec 10             	sub    esp,0x10
c0019a5d:	89 e0                	mov    eax,esp
c0019a5f:	50                   	push   eax
c0019a60:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019a64:	50                   	push   eax
c0019a65:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019a69:	50                   	push   eax
c0019a6a:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019a6e:	50                   	push   eax
c0019a6f:	6a 07                	push   0x7
c0019a71:	e8 eb fe ff ff       	call   c0019961 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019a76:	83 c4 14             	add    esp,0x14
c0019a79:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019a7d:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0019a81:	0f 95 c0             	setne  al
c0019a84:	83 c4 10             	add    esp,0x10
c0019a87:	c3                   	ret    

c0019a88 <cpuidCheckExtendedECX(unsigned int)>:
c0019a88:	83 ec 10             	sub    esp,0x10
c0019a8b:	89 e0                	mov    eax,esp
c0019a8d:	50                   	push   eax
c0019a8e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019a92:	50                   	push   eax
c0019a93:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019a97:	50                   	push   eax
c0019a98:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019a9c:	50                   	push   eax
c0019a9d:	6a 07                	push   0x7
c0019a9f:	e8 bd fe ff ff       	call   c0019961 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019aa4:	83 c4 14             	add    esp,0x14
c0019aa7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019aab:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0019aaf:	0f 95 c0             	setne  al
c0019ab2:	83 c4 10             	add    esp,0x10
c0019ab5:	c3                   	ret    

c0019ab6 <HalDetectFeatures()>:
c0019ab6:	57                   	push   edi
c0019ab7:	56                   	push   esi
c0019ab8:	53                   	push   ebx
c0019ab9:	81 ec 90 00 00 00    	sub    esp,0x90
c0019abf:	83 ec 04             	sub    esp,0x4
c0019ac2:	6a 08                	push   0x8
c0019ac4:	6a 00                	push   0x0
c0019ac6:	68 4c 64 03 c0       	push   0xc003644c
c0019acb:	e8 20 6a fe ff       	call   c00004f0 <memset>
c0019ad0:	83 c4 10             	add    esp,0x10
c0019ad3:	a0 4c 64 03 c0       	mov    al,ds:0xc003644c
c0019ad8:	83 c8 04             	or     eax,0x4
c0019adb:	a2 4c 64 03 c0       	mov    ds:0xc003644c,al
c0019ae0:	83 ec 0c             	sub    esp,0xc
c0019ae3:	68 d4 c7 02 c0       	push   0xc002c7d4
c0019ae8:	e8 79 d4 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0019aed:	83 c4 10             	add    esp,0x10
c0019af0:	e8 04 67 fe ff       	call   c00001f9 <detectCPUID>
c0019af5:	85 c0                	test   eax,eax
c0019af7:	0f 95 c0             	setne  al
c0019afa:	83 e0 01             	and    eax,0x1
c0019afd:	83 e0 01             	and    eax,0x1
c0019b00:	8d 0c 00             	lea    ecx,[eax+eax*1]
c0019b03:	a0 4c 64 03 c0       	mov    al,ds:0xc003644c
c0019b08:	83 e0 fd             	and    eax,0xfffffffd
c0019b0b:	88 c2                	mov    dl,al
c0019b0d:	88 c8                	mov    al,cl
c0019b0f:	09 d0                	or     eax,edx
c0019b11:	a2 4c 64 03 c0       	mov    ds:0xc003644c,al
c0019b16:	a0 4c 64 03 c0       	mov    al,ds:0xc003644c
c0019b1b:	83 e0 02             	and    eax,0x2
c0019b1e:	0f b6 c0             	movzx  eax,al
c0019b21:	85 c0                	test   eax,eax
c0019b23:	0f 84 84 02 00 00    	je     c0019dad <HalDetectFeatures()+0x2f7>
c0019b29:	83 ec 0c             	sub    esp,0xc
c0019b2c:	6a 20                	push   0x20
c0019b2e:	e8 cc fe ff ff       	call   c00199ff <cpuidCheckEDX(unsigned int)>
c0019b33:	83 c4 10             	add    esp,0x10
c0019b36:	83 e0 01             	and    eax,0x1
c0019b39:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0019b40:	a0 4c 64 03 c0       	mov    al,ds:0xc003644c
c0019b45:	83 e0 f7             	and    eax,0xfffffff7
c0019b48:	88 c2                	mov    dl,al
c0019b4a:	88 c8                	mov    al,cl
c0019b4c:	09 d0                	or     eax,edx
c0019b4e:	a2 4c 64 03 c0       	mov    ds:0xc003644c,al
c0019b53:	83 ec 0c             	sub    esp,0xc
c0019b56:	68 00 00 00 04       	push   0x4000000
c0019b5b:	e8 9f fe ff ff       	call   c00199ff <cpuidCheckEDX(unsigned int)>
c0019b60:	83 c4 10             	add    esp,0x10
c0019b63:	89 c1                	mov    ecx,eax
c0019b65:	83 e1 01             	and    ecx,0x1
c0019b68:	a0 4d 64 03 c0       	mov    al,ds:0xc003644d
c0019b6d:	83 e0 fe             	and    eax,0xfffffffe
c0019b70:	88 c2                	mov    dl,al
c0019b72:	88 c8                	mov    al,cl
c0019b74:	09 d0                	or     eax,edx
c0019b76:	a2 4d 64 03 c0       	mov    ds:0xc003644d,al
c0019b7b:	83 ec 0c             	sub    esp,0xc
c0019b7e:	68 80 00 00 00       	push   0x80
c0019b83:	e8 77 fe ff ff       	call   c00199ff <cpuidCheckEDX(unsigned int)>
c0019b88:	83 c4 10             	add    esp,0x10
c0019b8b:	89 c1                	mov    ecx,eax
c0019b8d:	c1 e1 07             	shl    ecx,0x7
c0019b90:	a0 4d 64 03 c0       	mov    al,ds:0xc003644d
c0019b95:	83 e0 7f             	and    eax,0x7f
c0019b98:	88 c2                	mov    dl,al
c0019b9a:	88 c8                	mov    al,cl
c0019b9c:	09 d0                	or     eax,edx
c0019b9e:	a2 4d 64 03 c0       	mov    ds:0xc003644d,al
c0019ba3:	83 ec 0c             	sub    esp,0xc
c0019ba6:	68 00 00 80 00       	push   0x800000
c0019bab:	e8 4f fe ff ff       	call   c00199ff <cpuidCheckEDX(unsigned int)>
c0019bb0:	83 c4 10             	add    esp,0x10
c0019bb3:	83 e0 01             	and    eax,0x1
c0019bb6:	89 c1                	mov    ecx,eax
c0019bb8:	c1 e1 05             	shl    ecx,0x5
c0019bbb:	a0 4c 64 03 c0       	mov    al,ds:0xc003644c
c0019bc0:	83 e0 df             	and    eax,0xffffffdf
c0019bc3:	88 c2                	mov    dl,al
c0019bc5:	88 c8                	mov    al,cl
c0019bc7:	09 d0                	or     eax,edx
c0019bc9:	a2 4c 64 03 c0       	mov    ds:0xc003644c,al
c0019bce:	83 ec 0c             	sub    esp,0xc
c0019bd1:	6a 01                	push   0x1
c0019bd3:	e8 3c 40 ff ff       	call   c000dc14 <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c0019bd8:	83 c4 10             	add    esp,0x10
c0019bdb:	0f b6 c0             	movzx  eax,al
c0019bde:	85 c0                	test   eax,eax
c0019be0:	75 17                	jne    c0019bf9 <HalDetectFeatures()+0x143>
c0019be2:	83 ec 0c             	sub    esp,0xc
c0019be5:	68 00 04 00 00       	push   0x400
c0019bea:	e8 25 40 ff ff       	call   c000dc14 <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c0019bef:	83 c4 10             	add    esp,0x10
c0019bf2:	0f b6 c0             	movzx  eax,al
c0019bf5:	85 c0                	test   eax,eax
c0019bf7:	74 04                	je     c0019bfd <HalDetectFeatures()+0x147>
c0019bf9:	b0 01                	mov    al,0x1
c0019bfb:	eb 02                	jmp    c0019bff <HalDetectFeatures()+0x149>
c0019bfd:	b0 00                	mov    al,0x0
c0019bff:	0f b6 c0             	movzx  eax,al
c0019c02:	85 c0                	test   eax,eax
c0019c04:	74 0f                	je     c0019c15 <HalDetectFeatures()+0x15f>
c0019c06:	a0 4c 64 03 c0       	mov    al,ds:0xc003644c
c0019c0b:	83 e0 fe             	and    eax,0xfffffffe
c0019c0e:	a2 4c 64 03 c0       	mov    ds:0xc003644c,al
c0019c13:	eb 28                	jmp    c0019c3d <HalDetectFeatures()+0x187>
c0019c15:	83 ec 0c             	sub    esp,0xc
c0019c18:	68 00 02 00 00       	push   0x200
c0019c1d:	e8 dd fd ff ff       	call   c00199ff <cpuidCheckEDX(unsigned int)>
c0019c22:	83 c4 10             	add    esp,0x10
c0019c25:	89 c1                	mov    ecx,eax
c0019c27:	83 e1 01             	and    ecx,0x1
c0019c2a:	a0 4c 64 03 c0       	mov    al,ds:0xc003644c
c0019c2f:	83 e0 fe             	and    eax,0xfffffffe
c0019c32:	88 c2                	mov    dl,al
c0019c34:	88 c8                	mov    al,cl
c0019c36:	09 d0                	or     eax,edx
c0019c38:	a2 4c 64 03 c0       	mov    ds:0xc003644c,al
c0019c3d:	a0 4c 64 03 c0       	mov    al,ds:0xc003644c
c0019c42:	83 e0 01             	and    eax,0x1
c0019c45:	0f b6 c0             	movzx  eax,al
c0019c48:	85 c0                	test   eax,eax
c0019c4a:	74 1c                	je     c0019c68 <HalDetectFeatures()+0x1b2>
c0019c4c:	a0 4c 64 03 c0       	mov    al,ds:0xc003644c
c0019c51:	83 e0 08             	and    eax,0x8
c0019c54:	0f b6 c0             	movzx  eax,al
c0019c57:	85 c0                	test   eax,eax
c0019c59:	75 0d                	jne    c0019c68 <HalDetectFeatures()+0x1b2>
c0019c5b:	a0 4c 64 03 c0       	mov    al,ds:0xc003644c
c0019c60:	83 e0 fe             	and    eax,0xfffffffe
c0019c63:	a2 4c 64 03 c0       	mov    ds:0xc003644c,al
c0019c68:	c6 84 24 8f 00 00 00 01 	mov    BYTE PTR [esp+0x8f],0x1
c0019c70:	c6 84 24 8f 00 00 00 00 	mov    BYTE PTR [esp+0x8f],0x0
c0019c78:	0f b6 84 24 8f 00 00 00 	movzx  eax,BYTE PTR [esp+0x8f]
c0019c80:	85 c0                	test   eax,eax
c0019c82:	0f 84 ab 00 00 00    	je     c0019d33 <HalDetectFeatures()+0x27d>
c0019c88:	83 ec 0c             	sub    esp,0xc
c0019c8b:	6a 01                	push   0x1
c0019c8d:	e8 9a fd ff ff       	call   c0019a2c <cpuidCheckECX(unsigned int)>
c0019c92:	83 c4 10             	add    esp,0x10
c0019c95:	83 e0 01             	and    eax,0x1
c0019c98:	8d 0c 00             	lea    ecx,[eax+eax*1]
c0019c9b:	a0 4d 64 03 c0       	mov    al,ds:0xc003644d
c0019ca0:	83 e0 fd             	and    eax,0xfffffffd
c0019ca3:	88 c2                	mov    dl,al
c0019ca5:	88 c8                	mov    al,cl
c0019ca7:	09 d0                	or     eax,edx
c0019ca9:	a2 4d 64 03 c0       	mov    ds:0xc003644d,al
c0019cae:	83 ec 0c             	sub    esp,0xc
c0019cb1:	68 00 02 00 00       	push   0x200
c0019cb6:	e8 71 fd ff ff       	call   c0019a2c <cpuidCheckECX(unsigned int)>
c0019cbb:	83 c4 10             	add    esp,0x10
c0019cbe:	83 e0 01             	and    eax,0x1
c0019cc1:	89 c1                	mov    ecx,eax
c0019cc3:	c1 e1 04             	shl    ecx,0x4
c0019cc6:	a0 4d 64 03 c0       	mov    al,ds:0xc003644d
c0019ccb:	83 e0 ef             	and    eax,0xffffffef
c0019cce:	88 c2                	mov    dl,al
c0019cd0:	88 c8                	mov    al,cl
c0019cd2:	09 d0                	or     eax,edx
c0019cd4:	a2 4d 64 03 c0       	mov    ds:0xc003644d,al
c0019cd9:	83 ec 0c             	sub    esp,0xc
c0019cdc:	68 00 00 08 00       	push   0x80000
c0019ce1:	e8 46 fd ff ff       	call   c0019a2c <cpuidCheckECX(unsigned int)>
c0019ce6:	83 c4 10             	add    esp,0x10
c0019ce9:	83 e0 01             	and    eax,0x1
c0019cec:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
c0019cf3:	a0 4d 64 03 c0       	mov    al,ds:0xc003644d
c0019cf8:	83 e0 fb             	and    eax,0xfffffffb
c0019cfb:	88 c2                	mov    dl,al
c0019cfd:	88 c8                	mov    al,cl
c0019cff:	09 d0                	or     eax,edx
c0019d01:	a2 4d 64 03 c0       	mov    ds:0xc003644d,al
c0019d06:	83 ec 0c             	sub    esp,0xc
c0019d09:	68 00 00 10 00       	push   0x100000
c0019d0e:	e8 19 fd ff ff       	call   c0019a2c <cpuidCheckECX(unsigned int)>
c0019d13:	83 c4 10             	add    esp,0x10
c0019d16:	83 e0 01             	and    eax,0x1
c0019d19:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0019d20:	a0 4d 64 03 c0       	mov    al,ds:0xc003644d
c0019d25:	83 e0 f7             	and    eax,0xfffffff7
c0019d28:	88 c2                	mov    dl,al
c0019d2a:	88 c8                	mov    al,cl
c0019d2c:	09 d0                	or     eax,edx
c0019d2e:	a2 4d 64 03 c0       	mov    ds:0xc003644d,al
c0019d33:	83 ec 0c             	sub    esp,0xc
c0019d36:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019d3a:	50                   	push   eax
c0019d3b:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0019d3f:	50                   	push   eax
c0019d40:	8d 44 24 34          	lea    eax,[esp+0x34]
c0019d44:	50                   	push   eax
c0019d45:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0019d49:	50                   	push   eax
c0019d4a:	68 00 00 00 80       	push   0x80000000
c0019d4f:	e8 0d fc ff ff       	call   c0019961 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019d54:	83 c4 20             	add    esp,0x20
c0019d57:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0019d5b:	3d 00 00 00 80       	cmp    eax,0x80000000
c0019d60:	76 4b                	jbe    c0019dad <HalDetectFeatures()+0x2f7>
c0019d62:	83 ec 0c             	sub    esp,0xc
c0019d65:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019d69:	50                   	push   eax
c0019d6a:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0019d6e:	50                   	push   eax
c0019d6f:	8d 44 24 34          	lea    eax,[esp+0x34]
c0019d73:	50                   	push   eax
c0019d74:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0019d78:	50                   	push   eax
c0019d79:	68 01 00 00 80       	push   0x80000001
c0019d7e:	e8 de fb ff ff       	call   c0019961 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019d83:	83 c4 20             	add    esp,0x20
c0019d86:	a0 4c 64 03 c0       	mov    al,ds:0xc003644c
c0019d8b:	83 e0 bf             	and    eax,0xffffffbf
c0019d8e:	a2 4c 64 03 c0       	mov    ds:0xc003644c,al
c0019d93:	a0 4e 64 03 c0       	mov    al,ds:0xc003644e
c0019d98:	83 e0 fd             	and    eax,0xfffffffd
c0019d9b:	a2 4e 64 03 c0       	mov    ds:0xc003644e,al
c0019da0:	a0 4e 64 03 c0       	mov    al,ds:0xc003644e
c0019da5:	83 e0 fe             	and    eax,0xfffffffe
c0019da8:	a2 4e 64 03 c0       	mov    ds:0xc003644e,al
c0019dad:	83 ec 0c             	sub    esp,0xc
c0019db0:	68 00 04 00 00       	push   0x400
c0019db5:	e8 5a 3e ff ff       	call   c000dc14 <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c0019dba:	83 c4 10             	add    esp,0x10
c0019dbd:	0f b6 c0             	movzx  eax,al
c0019dc0:	85 c0                	test   eax,eax
c0019dc2:	74 0d                	je     c0019dd1 <HalDetectFeatures()+0x31b>
c0019dc4:	a0 4c 64 03 c0       	mov    al,ds:0xc003644c
c0019dc9:	83 e0 fb             	and    eax,0xfffffffb
c0019dcc:	a2 4c 64 03 c0       	mov    ds:0xc003644c,al
c0019dd1:	c6 05 48 64 03 c0 01 	mov    BYTE PTR ds:0xc0036448,0x1
c0019dd8:	83 ec 04             	sub    esp,0x4
c0019ddb:	6a 0d                	push   0xd
c0019ddd:	6a 00                	push   0x0
c0019ddf:	68 30 64 03 c0       	push   0xc0036430
c0019de4:	e8 07 67 fe ff       	call   c00004f0 <memset>
c0019de9:	83 c4 10             	add    esp,0x10
c0019dec:	a0 4c 64 03 c0       	mov    al,ds:0xc003644c
c0019df1:	83 e0 02             	and    eax,0x2
c0019df4:	0f b6 c0             	movzx  eax,al
c0019df7:	85 c0                	test   eax,eax
c0019df9:	0f 84 16 08 00 00    	je     c001a615 <HalDetectFeatures()+0xb5f>
c0019dff:	83 ec 0c             	sub    esp,0xc
c0019e02:	6a 10                	push   0x10
c0019e04:	e8 f6 fb ff ff       	call   c00199ff <cpuidCheckEDX(unsigned int)>
c0019e09:	83 c4 10             	add    esp,0x10
c0019e0c:	83 e0 01             	and    eax,0x1
c0019e0f:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0019e16:	a0 4e 64 03 c0       	mov    al,ds:0xc003644e
c0019e1b:	83 e0 f7             	and    eax,0xfffffff7
c0019e1e:	88 c2                	mov    dl,al
c0019e20:	88 c8                	mov    al,cl
c0019e22:	09 d0                	or     eax,edx
c0019e24:	a2 4e 64 03 c0       	mov    ds:0xc003644e,al
c0019e29:	83 ec 0c             	sub    esp,0xc
c0019e2c:	6a 40                	push   0x40
c0019e2e:	e8 cc fb ff ff       	call   c00199ff <cpuidCheckEDX(unsigned int)>
c0019e33:	83 c4 10             	add    esp,0x10
c0019e36:	83 e0 01             	and    eax,0x1
c0019e39:	89 c1                	mov    ecx,eax
c0019e3b:	c1 e1 04             	shl    ecx,0x4
c0019e3e:	a0 4e 64 03 c0       	mov    al,ds:0xc003644e
c0019e43:	83 e0 ef             	and    eax,0xffffffef
c0019e46:	88 c2                	mov    dl,al
c0019e48:	88 c8                	mov    al,cl
c0019e4a:	09 d0                	or     eax,edx
c0019e4c:	a2 4e 64 03 c0       	mov    ds:0xc003644e,al
c0019e51:	83 ec 0c             	sub    esp,0xc
c0019e54:	6a 08                	push   0x8
c0019e56:	e8 a4 fb ff ff       	call   c00199ff <cpuidCheckEDX(unsigned int)>
c0019e5b:	83 c4 10             	add    esp,0x10
c0019e5e:	83 e0 01             	and    eax,0x1
c0019e61:	89 c1                	mov    ecx,eax
c0019e63:	c1 e1 05             	shl    ecx,0x5
c0019e66:	a0 4e 64 03 c0       	mov    al,ds:0xc003644e
c0019e6b:	83 e0 df             	and    eax,0xffffffdf
c0019e6e:	88 c2                	mov    dl,al
c0019e70:	88 c8                	mov    al,cl
c0019e72:	09 d0                	or     eax,edx
c0019e74:	a2 4e 64 03 c0       	mov    ds:0xc003644e,al
c0019e79:	83 ec 0c             	sub    esp,0xc
c0019e7c:	68 00 20 00 00       	push   0x2000
c0019e81:	e8 79 fb ff ff       	call   c00199ff <cpuidCheckEDX(unsigned int)>
c0019e86:	83 c4 10             	add    esp,0x10
c0019e89:	83 e0 01             	and    eax,0x1
c0019e8c:	89 c1                	mov    ecx,eax
c0019e8e:	c1 e1 06             	shl    ecx,0x6
c0019e91:	a0 4e 64 03 c0       	mov    al,ds:0xc003644e
c0019e96:	83 e0 bf             	and    eax,0xffffffbf
c0019e99:	88 c2                	mov    dl,al
c0019e9b:	88 c8                	mov    al,cl
c0019e9d:	09 d0                	or     eax,edx
c0019e9f:	a2 4e 64 03 c0       	mov    ds:0xc003644e,al
c0019ea4:	83 ec 0c             	sub    esp,0xc
c0019ea7:	68 00 00 01 00       	push   0x10000
c0019eac:	e8 4e fb ff ff       	call   c00199ff <cpuidCheckEDX(unsigned int)>
c0019eb1:	83 c4 10             	add    esp,0x10
c0019eb4:	89 c1                	mov    ecx,eax
c0019eb6:	c1 e1 07             	shl    ecx,0x7
c0019eb9:	a0 4e 64 03 c0       	mov    al,ds:0xc003644e
c0019ebe:	83 e0 7f             	and    eax,0x7f
c0019ec1:	88 c2                	mov    dl,al
c0019ec3:	88 c8                	mov    al,cl
c0019ec5:	09 d0                	or     eax,edx
c0019ec7:	a2 4e 64 03 c0       	mov    ds:0xc003644e,al
c0019ecc:	83 ec 0c             	sub    esp,0xc
c0019ecf:	6a 01                	push   0x1
c0019ed1:	e8 29 fb ff ff       	call   c00199ff <cpuidCheckEDX(unsigned int)>
c0019ed6:	83 c4 10             	add    esp,0x10
c0019ed9:	83 e0 01             	and    eax,0x1
c0019edc:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0019ee3:	a0 50 64 03 c0       	mov    al,ds:0xc0036450
c0019ee8:	83 e0 f7             	and    eax,0xfffffff7
c0019eeb:	88 c2                	mov    dl,al
c0019eed:	88 c8                	mov    al,cl
c0019eef:	09 d0                	or     eax,edx
c0019ef1:	a2 50 64 03 c0       	mov    ds:0xc0036450,al
c0019ef6:	83 ec 0c             	sub    esp,0xc
c0019ef9:	68 00 08 00 00       	push   0x800
c0019efe:	e8 fc fa ff ff       	call   c00199ff <cpuidCheckEDX(unsigned int)>
c0019f03:	83 c4 10             	add    esp,0x10
c0019f06:	89 c1                	mov    ecx,eax
c0019f08:	83 e1 01             	and    ecx,0x1
c0019f0b:	a0 50 64 03 c0       	mov    al,ds:0xc0036450
c0019f10:	83 e0 fe             	and    eax,0xfffffffe
c0019f13:	88 c2                	mov    dl,al
c0019f15:	88 c8                	mov    al,cl
c0019f17:	09 d0                	or     eax,edx
c0019f19:	a2 50 64 03 c0       	mov    ds:0xc0036450,al
c0019f1e:	a0 4e 64 03 c0       	mov    al,ds:0xc003644e
c0019f23:	83 e0 40             	and    eax,0x40
c0019f26:	0f b6 c0             	movzx  eax,al
c0019f29:	85 c0                	test   eax,eax
c0019f2b:	74 0a                	je     c0019f37 <HalDetectFeatures()+0x481>
c0019f2d:	c7 05 28 64 03 c0 00 01 00 00 	mov    DWORD PTR ds:0xc0036428,0x100
c0019f37:	a0 4e 64 03 c0       	mov    al,ds:0xc003644e
c0019f3c:	83 e0 80             	and    eax,0xffffff80
c0019f3f:	0f b6 c0             	movzx  eax,al
c0019f42:	85 c0                	test   eax,eax
c0019f44:	74 0a                	je     c0019f50 <HalDetectFeatures()+0x49a>
c0019f46:	c7 05 24 64 03 c0 80 00 00 00 	mov    DWORD PTR ds:0xc0036424,0x80
c0019f50:	83 ec 0c             	sub    esp,0xc
c0019f53:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019f57:	50                   	push   eax
c0019f58:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0019f5c:	50                   	push   eax
c0019f5d:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019f61:	50                   	push   eax
c0019f62:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0019f66:	50                   	push   eax
c0019f67:	6a 00                	push   0x0
c0019f69:	e8 f3 f9 ff ff       	call   c0019961 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019f6e:	83 c4 20             	add    esp,0x20
c0019f71:	c7 44 24 48 30 64 03 c0 	mov    DWORD PTR [esp+0x48],0xc0036430
c0019f79:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019f7d:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0019f81:	c7 44 24 40 04 00 00 00 	mov    DWORD PTR [esp+0x40],0x4
c0019f89:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0019f8d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0019f91:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0019f95:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0019f99:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0019f9d:	89 c6                	mov    esi,eax
c0019f9f:	89 d7                	mov    edi,edx
c0019fa1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019fa3:	89 c8                	mov    eax,ecx
c0019fa5:	89 fa                	mov    edx,edi
c0019fa7:	89 f3                	mov    ebx,esi
c0019fa9:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c0019fad:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0019fb1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0019fb5:	b8 34 64 03 c0       	mov    eax,0xc0036434
c0019fba:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0019fbe:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019fc2:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0019fc6:	c7 44 24 5c 04 00 00 00 	mov    DWORD PTR [esp+0x5c],0x4
c0019fce:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0019fd2:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0019fd6:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0019fda:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0019fde:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c0019fe2:	89 c6                	mov    esi,eax
c0019fe4:	89 d7                	mov    edi,edx
c0019fe6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019fe8:	89 c8                	mov    eax,ecx
c0019fea:	89 fa                	mov    edx,edi
c0019fec:	89 f3                	mov    ebx,esi
c0019fee:	89 5c 24 54          	mov    DWORD PTR [esp+0x54],ebx
c0019ff2:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c0019ff6:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0019ffa:	b8 38 64 03 c0       	mov    eax,0xc0036438
c0019fff:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c001a006:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001a00a:	89 44 24 7c          	mov    DWORD PTR [esp+0x7c],eax
c001a00e:	c7 44 24 78 04 00 00 00 	mov    DWORD PTR [esp+0x78],0x4
c001a016:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a01d:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c001a021:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c001a025:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c001a02c:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c001a030:	89 c6                	mov    esi,eax
c001a032:	89 d7                	mov    edi,edx
c001a034:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a036:	89 c8                	mov    eax,ecx
c001a038:	89 fa                	mov    edx,edi
c001a03a:	89 f3                	mov    ebx,esi
c001a03c:	89 5c 24 70          	mov    DWORD PTR [esp+0x70],ebx
c001a040:	89 54 24 6c          	mov    DWORD PTR [esp+0x6c],edx
c001a044:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c001a048:	83 ec 08             	sub    esp,0x8
c001a04b:	68 e9 c7 02 c0       	push   0xc002c7e9
c001a050:	68 30 64 03 c0       	push   0xc0036430
c001a055:	e8 26 67 fe ff       	call   c0000780 <strcmp>
c001a05a:	83 c4 10             	add    esp,0x10
c001a05d:	85 c0                	test   eax,eax
c001a05f:	74 19                	je     c001a07a <HalDetectFeatures()+0x5c4>
c001a061:	83 ec 08             	sub    esp,0x8
c001a064:	68 f6 c7 02 c0       	push   0xc002c7f6
c001a069:	68 30 64 03 c0       	push   0xc0036430
c001a06e:	e8 0d 67 fe ff       	call   c0000780 <strcmp>
c001a073:	83 c4 10             	add    esp,0x10
c001a076:	85 c0                	test   eax,eax
c001a078:	75 04                	jne    c001a07e <HalDetectFeatures()+0x5c8>
c001a07a:	b0 01                	mov    al,0x1
c001a07c:	eb 02                	jmp    c001a080 <HalDetectFeatures()+0x5ca>
c001a07e:	b0 00                	mov    al,0x0
c001a080:	0f b6 c0             	movzx  eax,al
c001a083:	85 c0                	test   eax,eax
c001a085:	74 0f                	je     c001a096 <HalDetectFeatures()+0x5e0>
c001a087:	c7 05 44 64 03 c0 02 00 00 00 	mov    DWORD PTR ds:0xc0036444,0x2
c001a091:	e9 0d 03 00 00       	jmp    c001a3a3 <HalDetectFeatures()+0x8ed>
c001a096:	83 ec 08             	sub    esp,0x8
c001a099:	68 03 c8 02 c0       	push   0xc002c803
c001a09e:	68 30 64 03 c0       	push   0xc0036430
c001a0a3:	e8 d8 66 fe ff       	call   c0000780 <strcmp>
c001a0a8:	83 c4 10             	add    esp,0x10
c001a0ab:	85 c0                	test   eax,eax
c001a0ad:	74 19                	je     c001a0c8 <HalDetectFeatures()+0x612>
c001a0af:	83 ec 08             	sub    esp,0x8
c001a0b2:	68 10 c8 02 c0       	push   0xc002c810
c001a0b7:	68 30 64 03 c0       	push   0xc0036430
c001a0bc:	e8 bf 66 fe ff       	call   c0000780 <strcmp>
c001a0c1:	83 c4 10             	add    esp,0x10
c001a0c4:	85 c0                	test   eax,eax
c001a0c6:	75 04                	jne    c001a0cc <HalDetectFeatures()+0x616>
c001a0c8:	b0 01                	mov    al,0x1
c001a0ca:	eb 02                	jmp    c001a0ce <HalDetectFeatures()+0x618>
c001a0cc:	b0 00                	mov    al,0x0
c001a0ce:	0f b6 c0             	movzx  eax,al
c001a0d1:	85 c0                	test   eax,eax
c001a0d3:	74 0f                	je     c001a0e4 <HalDetectFeatures()+0x62e>
c001a0d5:	c7 05 44 64 03 c0 04 00 00 00 	mov    DWORD PTR ds:0xc0036444,0x4
c001a0df:	e9 bf 02 00 00       	jmp    c001a3a3 <HalDetectFeatures()+0x8ed>
c001a0e4:	83 ec 08             	sub    esp,0x8
c001a0e7:	68 1d c8 02 c0       	push   0xc002c81d
c001a0ec:	68 30 64 03 c0       	push   0xc0036430
c001a0f1:	e8 8a 66 fe ff       	call   c0000780 <strcmp>
c001a0f6:	83 c4 10             	add    esp,0x10
c001a0f9:	85 c0                	test   eax,eax
c001a0fb:	74 19                	je     c001a116 <HalDetectFeatures()+0x660>
c001a0fd:	83 ec 08             	sub    esp,0x8
c001a100:	68 2a c8 02 c0       	push   0xc002c82a
c001a105:	68 30 64 03 c0       	push   0xc0036430
c001a10a:	e8 71 66 fe ff       	call   c0000780 <strcmp>
c001a10f:	83 c4 10             	add    esp,0x10
c001a112:	85 c0                	test   eax,eax
c001a114:	75 04                	jne    c001a11a <HalDetectFeatures()+0x664>
c001a116:	b0 01                	mov    al,0x1
c001a118:	eb 02                	jmp    c001a11c <HalDetectFeatures()+0x666>
c001a11a:	b0 00                	mov    al,0x0
c001a11c:	0f b6 c0             	movzx  eax,al
c001a11f:	85 c0                	test   eax,eax
c001a121:	74 0f                	je     c001a132 <HalDetectFeatures()+0x67c>
c001a123:	c7 05 44 64 03 c0 05 00 00 00 	mov    DWORD PTR ds:0xc0036444,0x5
c001a12d:	e9 71 02 00 00       	jmp    c001a3a3 <HalDetectFeatures()+0x8ed>
c001a132:	83 ec 08             	sub    esp,0x8
c001a135:	68 37 c8 02 c0       	push   0xc002c837
c001a13a:	68 30 64 03 c0       	push   0xc0036430
c001a13f:	e8 3c 66 fe ff       	call   c0000780 <strcmp>
c001a144:	83 c4 10             	add    esp,0x10
c001a147:	85 c0                	test   eax,eax
c001a149:	0f 94 c0             	sete   al
c001a14c:	0f b6 c0             	movzx  eax,al
c001a14f:	85 c0                	test   eax,eax
c001a151:	74 0f                	je     c001a162 <HalDetectFeatures()+0x6ac>
c001a153:	c7 05 44 64 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0036444,0x1
c001a15d:	e9 41 02 00 00       	jmp    c001a3a3 <HalDetectFeatures()+0x8ed>
c001a162:	83 ec 08             	sub    esp,0x8
c001a165:	68 44 c8 02 c0       	push   0xc002c844
c001a16a:	68 30 64 03 c0       	push   0xc0036430
c001a16f:	e8 0c 66 fe ff       	call   c0000780 <strcmp>
c001a174:	83 c4 10             	add    esp,0x10
c001a177:	85 c0                	test   eax,eax
c001a179:	0f 94 c0             	sete   al
c001a17c:	0f b6 c0             	movzx  eax,al
c001a17f:	85 c0                	test   eax,eax
c001a181:	74 0f                	je     c001a192 <HalDetectFeatures()+0x6dc>
c001a183:	c7 05 44 64 03 c0 03 00 00 00 	mov    DWORD PTR ds:0xc0036444,0x3
c001a18d:	e9 11 02 00 00       	jmp    c001a3a3 <HalDetectFeatures()+0x8ed>
c001a192:	83 ec 08             	sub    esp,0x8
c001a195:	68 03 c8 02 c0       	push   0xc002c803
c001a19a:	68 30 64 03 c0       	push   0xc0036430
c001a19f:	e8 dc 65 fe ff       	call   c0000780 <strcmp>
c001a1a4:	83 c4 10             	add    esp,0x10
c001a1a7:	85 c0                	test   eax,eax
c001a1a9:	0f 94 c0             	sete   al
c001a1ac:	0f b6 c0             	movzx  eax,al
c001a1af:	85 c0                	test   eax,eax
c001a1b1:	74 0f                	je     c001a1c2 <HalDetectFeatures()+0x70c>
c001a1b3:	c7 05 44 64 03 c0 06 00 00 00 	mov    DWORD PTR ds:0xc0036444,0x6
c001a1bd:	e9 e1 01 00 00       	jmp    c001a3a3 <HalDetectFeatures()+0x8ed>
c001a1c2:	83 ec 08             	sub    esp,0x8
c001a1c5:	68 51 c8 02 c0       	push   0xc002c851
c001a1ca:	68 30 64 03 c0       	push   0xc0036430
c001a1cf:	e8 ac 65 fe ff       	call   c0000780 <strcmp>
c001a1d4:	83 c4 10             	add    esp,0x10
c001a1d7:	85 c0                	test   eax,eax
c001a1d9:	0f 94 c0             	sete   al
c001a1dc:	0f b6 c0             	movzx  eax,al
c001a1df:	85 c0                	test   eax,eax
c001a1e1:	74 0f                	je     c001a1f2 <HalDetectFeatures()+0x73c>
c001a1e3:	c7 05 44 64 03 c0 07 00 00 00 	mov    DWORD PTR ds:0xc0036444,0x7
c001a1ed:	e9 b1 01 00 00       	jmp    c001a3a3 <HalDetectFeatures()+0x8ed>
c001a1f2:	83 ec 08             	sub    esp,0x8
c001a1f5:	68 5e c8 02 c0       	push   0xc002c85e
c001a1fa:	68 30 64 03 c0       	push   0xc0036430
c001a1ff:	e8 7c 65 fe ff       	call   c0000780 <strcmp>
c001a204:	83 c4 10             	add    esp,0x10
c001a207:	85 c0                	test   eax,eax
c001a209:	0f 94 c0             	sete   al
c001a20c:	0f b6 c0             	movzx  eax,al
c001a20f:	85 c0                	test   eax,eax
c001a211:	74 0f                	je     c001a222 <HalDetectFeatures()+0x76c>
c001a213:	c7 05 44 64 03 c0 08 00 00 00 	mov    DWORD PTR ds:0xc0036444,0x8
c001a21d:	e9 81 01 00 00       	jmp    c001a3a3 <HalDetectFeatures()+0x8ed>
c001a222:	83 ec 08             	sub    esp,0x8
c001a225:	68 6b c8 02 c0       	push   0xc002c86b
c001a22a:	68 30 64 03 c0       	push   0xc0036430
c001a22f:	e8 4c 65 fe ff       	call   c0000780 <strcmp>
c001a234:	83 c4 10             	add    esp,0x10
c001a237:	85 c0                	test   eax,eax
c001a239:	0f 94 c0             	sete   al
c001a23c:	0f b6 c0             	movzx  eax,al
c001a23f:	85 c0                	test   eax,eax
c001a241:	74 0f                	je     c001a252 <HalDetectFeatures()+0x79c>
c001a243:	c7 05 44 64 03 c0 09 00 00 00 	mov    DWORD PTR ds:0xc0036444,0x9
c001a24d:	e9 51 01 00 00       	jmp    c001a3a3 <HalDetectFeatures()+0x8ed>
c001a252:	83 ec 08             	sub    esp,0x8
c001a255:	68 78 c8 02 c0       	push   0xc002c878
c001a25a:	68 30 64 03 c0       	push   0xc0036430
c001a25f:	e8 1c 65 fe ff       	call   c0000780 <strcmp>
c001a264:	83 c4 10             	add    esp,0x10
c001a267:	85 c0                	test   eax,eax
c001a269:	0f 94 c0             	sete   al
c001a26c:	0f b6 c0             	movzx  eax,al
c001a26f:	85 c0                	test   eax,eax
c001a271:	74 0f                	je     c001a282 <HalDetectFeatures()+0x7cc>
c001a273:	c7 05 44 64 03 c0 0a 00 00 00 	mov    DWORD PTR ds:0xc0036444,0xa
c001a27d:	e9 21 01 00 00       	jmp    c001a3a3 <HalDetectFeatures()+0x8ed>
c001a282:	83 ec 08             	sub    esp,0x8
c001a285:	68 85 c8 02 c0       	push   0xc002c885
c001a28a:	68 30 64 03 c0       	push   0xc0036430
c001a28f:	e8 ec 64 fe ff       	call   c0000780 <strcmp>
c001a294:	83 c4 10             	add    esp,0x10
c001a297:	85 c0                	test   eax,eax
c001a299:	0f 94 c0             	sete   al
c001a29c:	0f b6 c0             	movzx  eax,al
c001a29f:	85 c0                	test   eax,eax
c001a2a1:	74 0f                	je     c001a2b2 <HalDetectFeatures()+0x7fc>
c001a2a3:	c7 05 44 64 03 c0 0b 00 00 00 	mov    DWORD PTR ds:0xc0036444,0xb
c001a2ad:	e9 f1 00 00 00       	jmp    c001a3a3 <HalDetectFeatures()+0x8ed>
c001a2b2:	83 ec 08             	sub    esp,0x8
c001a2b5:	68 92 c8 02 c0       	push   0xc002c892
c001a2ba:	68 30 64 03 c0       	push   0xc0036430
c001a2bf:	e8 bc 64 fe ff       	call   c0000780 <strcmp>
c001a2c4:	83 c4 10             	add    esp,0x10
c001a2c7:	85 c0                	test   eax,eax
c001a2c9:	0f 94 c0             	sete   al
c001a2cc:	0f b6 c0             	movzx  eax,al
c001a2cf:	85 c0                	test   eax,eax
c001a2d1:	74 0f                	je     c001a2e2 <HalDetectFeatures()+0x82c>
c001a2d3:	c7 05 44 64 03 c0 0c 00 00 00 	mov    DWORD PTR ds:0xc0036444,0xc
c001a2dd:	e9 c1 00 00 00       	jmp    c001a3a3 <HalDetectFeatures()+0x8ed>
c001a2e2:	83 ec 08             	sub    esp,0x8
c001a2e5:	68 9f c8 02 c0       	push   0xc002c89f
c001a2ea:	68 30 64 03 c0       	push   0xc0036430
c001a2ef:	e8 8c 64 fe ff       	call   c0000780 <strcmp>
c001a2f4:	83 c4 10             	add    esp,0x10
c001a2f7:	85 c0                	test   eax,eax
c001a2f9:	0f 94 c0             	sete   al
c001a2fc:	0f b6 c0             	movzx  eax,al
c001a2ff:	85 c0                	test   eax,eax
c001a301:	74 0f                	je     c001a312 <HalDetectFeatures()+0x85c>
c001a303:	c7 05 44 64 03 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc0036444,0xd
c001a30d:	e9 91 00 00 00       	jmp    c001a3a3 <HalDetectFeatures()+0x8ed>
c001a312:	83 ec 08             	sub    esp,0x8
c001a315:	68 ac c8 02 c0       	push   0xc002c8ac
c001a31a:	68 30 64 03 c0       	push   0xc0036430
c001a31f:	e8 5c 64 fe ff       	call   c0000780 <strcmp>
c001a324:	83 c4 10             	add    esp,0x10
c001a327:	85 c0                	test   eax,eax
c001a329:	0f 94 c0             	sete   al
c001a32c:	0f b6 c0             	movzx  eax,al
c001a32f:	85 c0                	test   eax,eax
c001a331:	74 0c                	je     c001a33f <HalDetectFeatures()+0x889>
c001a333:	c7 05 44 64 03 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc0036444,0xd
c001a33d:	eb 64                	jmp    c001a3a3 <HalDetectFeatures()+0x8ed>
c001a33f:	83 ec 08             	sub    esp,0x8
c001a342:	68 b9 c8 02 c0       	push   0xc002c8b9
c001a347:	68 30 64 03 c0       	push   0xc0036430
c001a34c:	e8 2f 64 fe ff       	call   c0000780 <strcmp>
c001a351:	83 c4 10             	add    esp,0x10
c001a354:	85 c0                	test   eax,eax
c001a356:	0f 94 c0             	sete   al
c001a359:	0f b6 c0             	movzx  eax,al
c001a35c:	85 c0                	test   eax,eax
c001a35e:	74 0c                	je     c001a36c <HalDetectFeatures()+0x8b6>
c001a360:	c7 05 44 64 03 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc0036444,0xd
c001a36a:	eb 37                	jmp    c001a3a3 <HalDetectFeatures()+0x8ed>
c001a36c:	83 ec 08             	sub    esp,0x8
c001a36f:	68 c6 c8 02 c0       	push   0xc002c8c6
c001a374:	68 30 64 03 c0       	push   0xc0036430
c001a379:	e8 02 64 fe ff       	call   c0000780 <strcmp>
c001a37e:	83 c4 10             	add    esp,0x10
c001a381:	85 c0                	test   eax,eax
c001a383:	0f 94 c0             	sete   al
c001a386:	0f b6 c0             	movzx  eax,al
c001a389:	85 c0                	test   eax,eax
c001a38b:	74 0c                	je     c001a399 <HalDetectFeatures()+0x8e3>
c001a38d:	c7 05 44 64 03 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc0036444,0xd
c001a397:	eb 0a                	jmp    c001a3a3 <HalDetectFeatures()+0x8ed>
c001a399:	c7 05 44 64 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0036444,0x0
c001a3a3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a3a7:	83 f8 06             	cmp    eax,0x6
c001a3aa:	0f 86 cc 00 00 00    	jbe    c001a47c <HalDetectFeatures()+0x9c6>
c001a3b0:	83 ec 0c             	sub    esp,0xc
c001a3b3:	68 80 00 00 00       	push   0x80
c001a3b8:	e8 9d f6 ff ff       	call   c0019a5a <cpuidCheckExtendedEBX(unsigned int)>
c001a3bd:	83 c4 10             	add    esp,0x10
c001a3c0:	89 c1                	mov    ecx,eax
c001a3c2:	83 e1 01             	and    ecx,0x1
c001a3c5:	a0 4f 64 03 c0       	mov    al,ds:0xc003644f
c001a3ca:	83 e0 fe             	and    eax,0xfffffffe
c001a3cd:	88 c2                	mov    dl,al
c001a3cf:	88 c8                	mov    al,cl
c001a3d1:	09 d0                	or     eax,edx
c001a3d3:	a2 4f 64 03 c0       	mov    ds:0xc003644f,al
c001a3d8:	83 ec 0c             	sub    esp,0xc
c001a3db:	68 00 00 10 00       	push   0x100000
c001a3e0:	e8 75 f6 ff ff       	call   c0019a5a <cpuidCheckExtendedEBX(unsigned int)>
c001a3e5:	83 c4 10             	add    esp,0x10
c001a3e8:	83 e0 01             	and    eax,0x1
c001a3eb:	89 c1                	mov    ecx,eax
c001a3ed:	c1 e1 06             	shl    ecx,0x6
c001a3f0:	a0 4f 64 03 c0       	mov    al,ds:0xc003644f
c001a3f5:	83 e0 bf             	and    eax,0xffffffbf
c001a3f8:	88 c2                	mov    dl,al
c001a3fa:	88 c8                	mov    al,cl
c001a3fc:	09 d0                	or     eax,edx
c001a3fe:	a2 4f 64 03 c0       	mov    ds:0xc003644f,al
c001a403:	83 ec 0c             	sub    esp,0xc
c001a406:	68 00 00 04 00       	push   0x40000
c001a40b:	e8 4a f6 ff ff       	call   c0019a5a <cpuidCheckExtendedEBX(unsigned int)>
c001a410:	83 c4 10             	add    esp,0x10
c001a413:	83 e0 01             	and    eax,0x1
c001a416:	8d 0c 00             	lea    ecx,[eax+eax*1]
c001a419:	a0 4f 64 03 c0       	mov    al,ds:0xc003644f
c001a41e:	83 e0 fd             	and    eax,0xfffffffd
c001a421:	88 c2                	mov    dl,al
c001a423:	88 c8                	mov    al,cl
c001a425:	09 d0                	or     eax,edx
c001a427:	a2 4f 64 03 c0       	mov    ds:0xc003644f,al
c001a42c:	83 ec 0c             	sub    esp,0xc
c001a42f:	6a 04                	push   0x4
c001a431:	e8 52 f6 ff ff       	call   c0019a88 <cpuidCheckExtendedECX(unsigned int)>
c001a436:	83 c4 10             	add    esp,0x10
c001a439:	83 e0 01             	and    eax,0x1
c001a43c:	89 c1                	mov    ecx,eax
c001a43e:	c1 e1 05             	shl    ecx,0x5
c001a441:	a0 4f 64 03 c0       	mov    al,ds:0xc003644f
c001a446:	83 e0 df             	and    eax,0xffffffdf
c001a449:	88 c2                	mov    dl,al
c001a44b:	88 c8                	mov    al,cl
c001a44d:	09 d0                	or     eax,edx
c001a44f:	a2 4f 64 03 c0       	mov    ds:0xc003644f,al
c001a454:	83 ec 0c             	sub    esp,0xc
c001a457:	6a 20                	push   0x20
c001a459:	e8 2a f6 ff ff       	call   c0019a88 <cpuidCheckExtendedECX(unsigned int)>
c001a45e:	83 c4 10             	add    esp,0x10
c001a461:	83 e0 01             	and    eax,0x1
c001a464:	89 c1                	mov    ecx,eax
c001a466:	c1 e1 04             	shl    ecx,0x4
c001a469:	a0 50 64 03 c0       	mov    al,ds:0xc0036450
c001a46e:	83 e0 ef             	and    eax,0xffffffef
c001a471:	88 c2                	mov    dl,al
c001a473:	88 c8                	mov    al,cl
c001a475:	09 d0                	or     eax,edx
c001a477:	a2 50 64 03 c0       	mov    ds:0xc0036450,al
c001a47c:	83 ec 0c             	sub    esp,0xc
c001a47f:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a483:	50                   	push   eax
c001a484:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a488:	50                   	push   eax
c001a489:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a48d:	50                   	push   eax
c001a48e:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001a492:	50                   	push   eax
c001a493:	6a 01                	push   0x1
c001a495:	e8 c7 f4 ff ff       	call   c0019961 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001a49a:	83 c4 20             	add    esp,0x20
c001a49d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a4a1:	83 e0 0f             	and    eax,0xf
c001a4a4:	a2 40 64 03 c0       	mov    ds:0xc0036440,al
c001a4a9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a4ad:	c1 e8 04             	shr    eax,0x4
c001a4b0:	83 e0 0f             	and    eax,0xf
c001a4b3:	a2 3e 64 03 c0       	mov    ds:0xc003643e,al
c001a4b8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a4bc:	c1 e8 08             	shr    eax,0x8
c001a4bf:	83 e0 0f             	and    eax,0xf
c001a4c2:	a2 3d 64 03 c0       	mov    ds:0xc003643d,al
c001a4c7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a4cb:	c1 e8 0c             	shr    eax,0xc
c001a4ce:	83 e0 03             	and    eax,0x3
c001a4d1:	a2 3f 64 03 c0       	mov    ds:0xc003643f,al
c001a4d6:	a0 3d 64 03 c0       	mov    al,ds:0xc003643d
c001a4db:	0f b6 c0             	movzx  eax,al
c001a4de:	83 f8 06             	cmp    eax,0x6
c001a4e1:	74 0d                	je     c001a4f0 <HalDetectFeatures()+0xa3a>
c001a4e3:	a0 3d 64 03 c0       	mov    al,ds:0xc003643d
c001a4e8:	0f b6 c0             	movzx  eax,al
c001a4eb:	83 f8 0f             	cmp    eax,0xf
c001a4ee:	75 18                	jne    c001a508 <HalDetectFeatures()+0xa52>
c001a4f0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a4f4:	c1 e8 10             	shr    eax,0x10
c001a4f7:	c1 e0 04             	shl    eax,0x4
c001a4fa:	88 c2                	mov    dl,al
c001a4fc:	a0 3e 64 03 c0       	mov    al,ds:0xc003643e
c001a501:	09 d0                	or     eax,edx
c001a503:	a2 3e 64 03 c0       	mov    ds:0xc003643e,al
c001a508:	a0 3d 64 03 c0       	mov    al,ds:0xc003643d
c001a50d:	0f b6 c0             	movzx  eax,al
c001a510:	83 f8 0f             	cmp    eax,0xf
c001a513:	75 15                	jne    c001a52a <HalDetectFeatures()+0xa74>
c001a515:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a519:	c1 e8 14             	shr    eax,0x14
c001a51c:	88 c2                	mov    dl,al
c001a51e:	a0 3d 64 03 c0       	mov    al,ds:0xc003643d
c001a523:	01 d0                	add    eax,edx
c001a525:	a2 3d 64 03 c0       	mov    ds:0xc003643d,al
c001a52a:	c6 84 24 8e 00 00 00 00 	mov    BYTE PTR [esp+0x8e],0x0
c001a532:	0f b6 84 24 8e 00 00 00 	movzx  eax,BYTE PTR [esp+0x8e]
c001a53a:	85 c0                	test   eax,eax
c001a53c:	74 2d                	je     c001a56b <HalDetectFeatures()+0xab5>
c001a53e:	83 ec 0c             	sub    esp,0xc
c001a541:	68 00 00 00 40       	push   0x40000000
c001a546:	e8 e1 f4 ff ff       	call   c0019a2c <cpuidCheckECX(unsigned int)>
c001a54b:	83 c4 10             	add    esp,0x10
c001a54e:	83 e0 01             	and    eax,0x1
c001a551:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
c001a558:	a0 4e 64 03 c0       	mov    al,ds:0xc003644e
c001a55d:	83 e0 fb             	and    eax,0xfffffffb
c001a560:	88 c2                	mov    dl,al
c001a562:	88 c8                	mov    al,cl
c001a564:	09 d0                	or     eax,edx
c001a566:	a2 4e 64 03 c0       	mov    ds:0xc003644e,al
c001a56b:	a0 4f 64 03 c0       	mov    al,ds:0xc003644f
c001a570:	83 c8 04             	or     eax,0x4
c001a573:	a2 4f 64 03 c0       	mov    ds:0xc003644f,al
c001a578:	a0 4f 64 03 c0       	mov    al,ds:0xc003644f
c001a57d:	83 c8 08             	or     eax,0x8
c001a580:	a2 4f 64 03 c0       	mov    ds:0xc003644f,al
c001a585:	a0 4f 64 03 c0       	mov    al,ds:0xc003644f
c001a58a:	83 c8 10             	or     eax,0x10
c001a58d:	a2 4f 64 03 c0       	mov    ds:0xc003644f,al
c001a592:	83 ec 0c             	sub    esp,0xc
c001a595:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a599:	50                   	push   eax
c001a59a:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a59e:	50                   	push   eax
c001a59f:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a5a3:	50                   	push   eax
c001a5a4:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001a5a8:	50                   	push   eax
c001a5a9:	68 00 00 00 80       	push   0x80000000
c001a5ae:	e8 ae f3 ff ff       	call   c0019961 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001a5b3:	83 c4 20             	add    esp,0x20
c001a5b6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a5ba:	3d 00 00 00 80       	cmp    eax,0x80000000
c001a5bf:	0f 86 96 01 00 00    	jbe    c001a75b <HalDetectFeatures()+0xca5>
c001a5c5:	83 ec 0c             	sub    esp,0xc
c001a5c8:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a5cc:	50                   	push   eax
c001a5cd:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a5d1:	50                   	push   eax
c001a5d2:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a5d6:	50                   	push   eax
c001a5d7:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001a5db:	50                   	push   eax
c001a5dc:	68 01 00 00 80       	push   0x80000001
c001a5e1:	e8 7b f3 ff ff       	call   c0019961 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001a5e6:	83 c4 20             	add    esp,0x20
c001a5e9:	a0 4f 64 03 c0       	mov    al,ds:0xc003644f
c001a5ee:	83 e0 7f             	and    eax,0x7f
c001a5f1:	a2 4f 64 03 c0       	mov    ds:0xc003644f,al
c001a5f6:	a0 50 64 03 c0       	mov    al,ds:0xc0036450
c001a5fb:	83 e0 fb             	and    eax,0xfffffffb
c001a5fe:	a2 50 64 03 c0       	mov    ds:0xc0036450,al
c001a603:	a0 50 64 03 c0       	mov    al,ds:0xc0036450
c001a608:	83 e0 fd             	and    eax,0xfffffffd
c001a60b:	a2 50 64 03 c0       	mov    ds:0xc0036450,al
c001a610:	e9 46 01 00 00       	jmp    c001a75b <HalDetectFeatures()+0xca5>
c001a615:	83 ec 08             	sub    esp,0x8
c001a618:	68 37 c8 02 c0       	push   0xc002c837
c001a61d:	68 30 64 03 c0       	push   0xc0036430
c001a622:	e8 29 60 fe ff       	call   c0000650 <strcpy>
c001a627:	83 c4 10             	add    esp,0x10
c001a62a:	c7 05 44 64 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0036444,0x1
c001a634:	e8 8a 5b fe ff       	call   c00001c3 <is486>
c001a639:	85 c0                	test   eax,eax
c001a63b:	0f 95 c0             	setne  al
c001a63e:	0f b6 c0             	movzx  eax,al
c001a641:	85 c0                	test   eax,eax
c001a643:	0f 84 8d 00 00 00    	je     c001a6d6 <HalDetectFeatures()+0xc20>
c001a649:	a0 4f 64 03 c0       	mov    al,ds:0xc003644f
c001a64e:	83 c8 04             	or     eax,0x4
c001a651:	a2 4f 64 03 c0       	mov    ds:0xc003644f,al
c001a656:	a0 4f 64 03 c0       	mov    al,ds:0xc003644f
c001a65b:	83 c8 08             	or     eax,0x8
c001a65e:	a2 4f 64 03 c0       	mov    ds:0xc003644f,al
c001a663:	a0 4f 64 03 c0       	mov    al,ds:0xc003644f
c001a668:	83 c8 10             	or     eax,0x10
c001a66b:	a2 4f 64 03 c0       	mov    ds:0xc003644f,al
c001a670:	0f 20 c0             	mov    eax,cr0
c001a673:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001a677:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001a67b:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
c001a682:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a689:	83 e0 04             	and    eax,0x4
c001a68c:	74 1e                	je     c001a6ac <HalDetectFeatures()+0xbf6>
c001a68e:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a695:	83 e0 10             	and    eax,0x10
c001a698:	75 12                	jne    c001a6ac <HalDetectFeatures()+0xbf6>
c001a69a:	a0 50 64 03 c0       	mov    al,ds:0xc0036450
c001a69f:	83 e0 f7             	and    eax,0xfffffff7
c001a6a2:	a2 50 64 03 c0       	mov    ds:0xc0036450,al
c001a6a7:	e9 af 00 00 00       	jmp    c001a75b <HalDetectFeatures()+0xca5>
c001a6ac:	e8 ed 5a fe ff       	call   c000019e <hasLegacyFPU>
c001a6b1:	83 e0 01             	and    eax,0x1
c001a6b4:	83 e0 01             	and    eax,0x1
c001a6b7:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c001a6be:	a0 50 64 03 c0       	mov    al,ds:0xc0036450
c001a6c3:	83 e0 f7             	and    eax,0xfffffff7
c001a6c6:	88 c2                	mov    dl,al
c001a6c8:	88 c8                	mov    al,cl
c001a6ca:	09 d0                	or     eax,edx
c001a6cc:	a2 50 64 03 c0       	mov    ds:0xc0036450,al
c001a6d1:	e9 85 00 00 00       	jmp    c001a75b <HalDetectFeatures()+0xca5>
c001a6d6:	a0 4f 64 03 c0       	mov    al,ds:0xc003644f
c001a6db:	83 e0 fb             	and    eax,0xfffffffb
c001a6de:	a2 4f 64 03 c0       	mov    ds:0xc003644f,al
c001a6e3:	a0 4f 64 03 c0       	mov    al,ds:0xc003644f
c001a6e8:	83 e0 f7             	and    eax,0xfffffff7
c001a6eb:	a2 4f 64 03 c0       	mov    ds:0xc003644f,al
c001a6f0:	a0 4f 64 03 c0       	mov    al,ds:0xc003644f
c001a6f5:	83 e0 ef             	and    eax,0xffffffef
c001a6f8:	a2 4f 64 03 c0       	mov    ds:0xc003644f,al
c001a6fd:	0f 20 c0             	mov    eax,cr0
c001a700:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a704:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a708:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c001a70f:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a716:	83 e0 04             	and    eax,0x4
c001a719:	74 1b                	je     c001a736 <HalDetectFeatures()+0xc80>
c001a71b:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a722:	83 e0 10             	and    eax,0x10
c001a725:	75 0f                	jne    c001a736 <HalDetectFeatures()+0xc80>
c001a727:	a0 50 64 03 c0       	mov    al,ds:0xc0036450
c001a72c:	83 e0 f7             	and    eax,0xfffffff7
c001a72f:	a2 50 64 03 c0       	mov    ds:0xc0036450,al
c001a734:	eb 25                	jmp    c001a75b <HalDetectFeatures()+0xca5>
c001a736:	e8 63 5a fe ff       	call   c000019e <hasLegacyFPU>
c001a73b:	83 e0 01             	and    eax,0x1
c001a73e:	83 e0 01             	and    eax,0x1
c001a741:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c001a748:	a0 50 64 03 c0       	mov    al,ds:0xc0036450
c001a74d:	83 e0 f7             	and    eax,0xfffffff7
c001a750:	88 c2                	mov    dl,al
c001a752:	88 c8                	mov    al,cl
c001a754:	09 d0                	or     eax,edx
c001a756:	a2 50 64 03 c0       	mov    ds:0xc0036450,al
c001a75b:	a0 50 64 03 c0       	mov    al,ds:0xc0036450
c001a760:	83 e0 08             	and    eax,0x8
c001a763:	0f b6 c0             	movzx  eax,al
c001a766:	85 c0                	test   eax,eax
c001a768:	75 25                	jne    c001a78f <HalDetectFeatures()+0xcd9>
c001a76a:	e8 2f 5a fe ff       	call   c000019e <hasLegacyFPU>
c001a76f:	83 e0 01             	and    eax,0x1
c001a772:	83 e0 01             	and    eax,0x1
c001a775:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c001a77c:	a0 50 64 03 c0       	mov    al,ds:0xc0036450
c001a781:	83 e0 f7             	and    eax,0xfffffff7
c001a784:	88 c2                	mov    dl,al
c001a786:	88 c8                	mov    al,cl
c001a788:	09 d0                	or     eax,edx
c001a78a:	a2 50 64 03 c0       	mov    ds:0xc0036450,al
c001a78f:	a0 50 64 03 c0       	mov    al,ds:0xc0036450
c001a794:	83 e0 08             	and    eax,0x8
c001a797:	0f b6 c0             	movzx  eax,al
c001a79a:	85 c0                	test   eax,eax
c001a79c:	74 0d                	je     c001a7ab <HalDetectFeatures()+0xcf5>
c001a79e:	a0 4c 64 03 c0       	mov    al,ds:0xc003644c
c001a7a3:	83 c8 10             	or     eax,0x10
c001a7a6:	a2 4c 64 03 c0       	mov    ds:0xc003644c,al
c001a7ab:	a0 4c 64 03 c0       	mov    al,ds:0xc003644c
c001a7b0:	83 e0 10             	and    eax,0x10
c001a7b3:	0f b6 c0             	movzx  eax,al
c001a7b6:	85 c0                	test   eax,eax
c001a7b8:	75 23                	jne    c001a7dd <HalDetectFeatures()+0xd27>
c001a7ba:	e8 d7 97 00 00       	call   c0023f96 <x87Detect>
c001a7bf:	83 e0 01             	and    eax,0x1
c001a7c2:	83 e0 01             	and    eax,0x1
c001a7c5:	89 c1                	mov    ecx,eax
c001a7c7:	c1 e1 04             	shl    ecx,0x4
c001a7ca:	a0 4c 64 03 c0       	mov    al,ds:0xc003644c
c001a7cf:	83 e0 ef             	and    eax,0xffffffef
c001a7d2:	88 c2                	mov    dl,al
c001a7d4:	88 c8                	mov    al,cl
c001a7d6:	09 d0                	or     eax,edx
c001a7d8:	a2 4c 64 03 c0       	mov    ds:0xc003644c,al
c001a7dd:	a0 4d 64 03 c0       	mov    al,ds:0xc003644d
c001a7e2:	83 e0 01             	and    eax,0x1
c001a7e5:	0f b6 c0             	movzx  eax,al
c001a7e8:	85 c0                	test   eax,eax
c001a7ea:	75 2d                	jne    c001a819 <HalDetectFeatures()+0xd63>
c001a7ec:	a0 4d 64 03 c0       	mov    al,ds:0xc003644d
c001a7f1:	83 e0 02             	and    eax,0x2
c001a7f4:	0f b6 c0             	movzx  eax,al
c001a7f7:	85 c0                	test   eax,eax
c001a7f9:	75 1e                	jne    c001a819 <HalDetectFeatures()+0xd63>
c001a7fb:	a0 4d 64 03 c0       	mov    al,ds:0xc003644d
c001a800:	83 e0 04             	and    eax,0x4
c001a803:	0f b6 c0             	movzx  eax,al
c001a806:	85 c0                	test   eax,eax
c001a808:	75 0f                	jne    c001a819 <HalDetectFeatures()+0xd63>
c001a80a:	a0 4d 64 03 c0       	mov    al,ds:0xc003644d
c001a80f:	83 e0 08             	and    eax,0x8
c001a812:	0f b6 c0             	movzx  eax,al
c001a815:	85 c0                	test   eax,eax
c001a817:	74 0d                	je     c001a826 <HalDetectFeatures()+0xd70>
c001a819:	a0 4c 64 03 c0       	mov    al,ds:0xc003644c
c001a81e:	83 c8 80             	or     eax,0xffffff80
c001a821:	a2 4c 64 03 c0       	mov    ds:0xc003644c,al
c001a826:	a0 4c 64 03 c0       	mov    al,ds:0xc003644c
c001a82b:	83 e0 10             	and    eax,0x10
c001a82e:	0f b6 c0             	movzx  eax,al
c001a831:	85 c0                	test   eax,eax
c001a833:	74 2f                	je     c001a864 <HalDetectFeatures()+0xdae>
c001a835:	a0 4c 64 03 c0       	mov    al,ds:0xc003644c
c001a83a:	83 e0 80             	and    eax,0xffffff80
c001a83d:	0f b6 c0             	movzx  eax,al
c001a840:	85 c0                	test   eax,eax
c001a842:	75 20                	jne    c001a864 <HalDetectFeatures()+0xdae>
c001a844:	e8 07 97 00 00       	call   c0023f50 <sseDetect>
c001a849:	83 e0 01             	and    eax,0x1
c001a84c:	89 c1                	mov    ecx,eax
c001a84e:	c1 e1 07             	shl    ecx,0x7
c001a851:	a0 4c 64 03 c0       	mov    al,ds:0xc003644c
c001a856:	83 e0 7f             	and    eax,0x7f
c001a859:	88 c2                	mov    dl,al
c001a85b:	88 c8                	mov    al,cl
c001a85d:	09 d0                	or     eax,edx
c001a85f:	a2 4c 64 03 c0       	mov    ds:0xc003644c,al
c001a864:	a0 4c 64 03 c0       	mov    al,ds:0xc003644c
c001a869:	83 e0 80             	and    eax,0xffffff80
c001a86c:	0f b6 c0             	movzx  eax,al
c001a86f:	85 c0                	test   eax,eax
c001a871:	74 1c                	je     c001a88f <HalDetectFeatures()+0xdd9>
c001a873:	a0 4d 64 03 c0       	mov    al,ds:0xc003644d
c001a878:	83 e0 20             	and    eax,0x20
c001a87b:	0f b6 c0             	movzx  eax,al
c001a87e:	85 c0                	test   eax,eax
c001a880:	75 0d                	jne    c001a88f <HalDetectFeatures()+0xdd9>
c001a882:	a0 4d 64 03 c0       	mov    al,ds:0xc003644d
c001a887:	83 e0 df             	and    eax,0xffffffdf
c001a88a:	a2 4d 64 03 c0       	mov    ds:0xc003644d,al
c001a88f:	c6 05 48 64 03 c0 00 	mov    BYTE PTR ds:0xc0036448,0x0
c001a896:	90                   	nop
c001a897:	81 c4 90 00 00 00    	add    esp,0x90
c001a89d:	5b                   	pop    ebx
c001a89e:	5e                   	pop    esi
c001a89f:	5f                   	pop    edi
c001a8a0:	c3                   	ret    

c001a8a1 <HalEnableNMI()>:
c001a8a1:	c6 05 2c 64 03 c0 01 	mov    BYTE PTR ds:0xc003642c,0x1
c001a8a8:	6a 10                	push   0x10
c001a8aa:	e8 00 ef ff ff       	call   c00197af <x86ReadCMOS(unsigned char)>
c001a8af:	83 c4 04             	add    esp,0x4
c001a8b2:	90                   	nop
c001a8b3:	c3                   	ret    

c001a8b4 <HalDisableNMI()>:
c001a8b4:	c6 05 2c 64 03 c0 00 	mov    BYTE PTR ds:0xc003642c,0x0
c001a8bb:	6a 10                	push   0x10
c001a8bd:	e8 ed ee ff ff       	call   c00197af <x86ReadCMOS(unsigned char)>
c001a8c2:	83 c4 04             	add    esp,0x4
c001a8c5:	90                   	nop
c001a8c6:	c3                   	ret    

c001a8c7 <HalGetNMIState()>:
c001a8c7:	a0 2c 64 03 c0       	mov    al,ds:0xc003642c
c001a8cc:	c3                   	ret    

c001a8cd <HalIsAPICEnabled()>:
c001a8cd:	a0 4c 64 03 c0       	mov    al,ds:0xc003644c
c001a8d2:	83 e0 01             	and    eax,0x1
c001a8d5:	0f b6 c0             	movzx  eax,al
c001a8d8:	85 c0                	test   eax,eax
c001a8da:	0f 95 c0             	setne  al
c001a8dd:	c3                   	ret    

c001a8de <x86rdmsr(unsigned int)>:
c001a8de:	83 ec 1c             	sub    esp,0x1c
c001a8e1:	a0 4c 64 03 c0       	mov    al,ds:0xc003644c
c001a8e6:	83 e0 08             	and    eax,0x8
c001a8e9:	0f b6 c0             	movzx  eax,al
c001a8ec:	85 c0                	test   eax,eax
c001a8ee:	75 10                	jne    c001a900 <x86rdmsr(unsigned int)+0x22>
c001a8f0:	83 ec 0c             	sub    esp,0xc
c001a8f3:	68 d2 c8 02 c0       	push   0xc002c8d2
c001a8f8:	e8 63 5c ff ff       	call   c0010560 <KePanic(char const*)>
c001a8fd:	83 c4 10             	add    esp,0x10
c001a900:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a904:	89 c1                	mov    ecx,eax
c001a906:	0f 32                	rdmsr  
c001a908:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a90c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001a910:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a914:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a918:	83 c4 1c             	add    esp,0x1c
c001a91b:	c3                   	ret    

c001a91c <x86wrmsr(unsigned int, unsigned long long)>:
c001a91c:	83 ec 1c             	sub    esp,0x1c
c001a91f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001a923:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a927:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a92b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a92f:	a0 4c 64 03 c0       	mov    al,ds:0xc003644c
c001a934:	83 e0 08             	and    eax,0x8
c001a937:	0f b6 c0             	movzx  eax,al
c001a93a:	85 c0                	test   eax,eax
c001a93c:	75 10                	jne    c001a94e <x86wrmsr(unsigned int, unsigned long long)+0x32>
c001a93e:	83 ec 0c             	sub    esp,0xc
c001a941:	68 d8 c8 02 c0       	push   0xc002c8d8
c001a946:	e8 15 5c ff ff       	call   c0010560 <KePanic(char const*)>
c001a94b:	83 c4 10             	add    esp,0x10
c001a94e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001a952:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a956:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a95a:	0f 30                	wrmsr  
c001a95c:	90                   	nop
c001a95d:	83 c4 1c             	add    esp,0x1c
c001a960:	c3                   	ret    

c001a961 <HalHandleGeneralProtectionFault(void*, void*)>:
c001a961:	83 ec 0c             	sub    esp,0xc
c001a964:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001a969:	8b 00                	mov    eax,DWORD PTR [eax]
c001a96b:	8a 40 62             	mov    al,BYTE PTR [eax+0x62]
c001a96e:	0f b6 c0             	movzx  eax,al
c001a971:	85 c0                	test   eax,eax
c001a973:	74 11                	je     c001a986 <HalHandleGeneralProtectionFault(void*, void*)+0x25>
c001a975:	83 ec 0c             	sub    esp,0xc
c001a978:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a97c:	e8 72 db ff ff       	call   c00184f3 <Vm::faultHandler(regs*)>
c001a981:	83 c4 10             	add    esp,0x10
c001a984:	eb 02                	jmp    c001a988 <HalHandleGeneralProtectionFault(void*, void*)+0x27>
c001a986:	b0 00                	mov    al,0x0
c001a988:	83 c4 0c             	add    esp,0xc
c001a98b:	c3                   	ret    

c001a98c <HalFindRSDP()>:
c001a98c:	83 ec 1c             	sub    esp,0x1c
c001a98f:	a1 7c 61 03 c0       	mov    eax,ds:0xc003617c
c001a994:	3d ff 07 00 00       	cmp    eax,0x7ff
c001a999:	7e 17                	jle    c001a9b2 <HalFindRSDP()+0x26>
c001a99b:	83 ec 0c             	sub    esp,0xc
c001a99e:	68 00 04 00 00       	push   0x400
c001a9a3:	e8 6c 32 ff ff       	call   c000dc14 <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c001a9a8:	83 c4 10             	add    esp,0x10
c001a9ab:	0f b6 c0             	movzx  eax,al
c001a9ae:	85 c0                	test   eax,eax
c001a9b0:	74 04                	je     c001a9b6 <HalFindRSDP()+0x2a>
c001a9b2:	b0 01                	mov    al,0x1
c001a9b4:	eb 02                	jmp    c001a9b8 <HalFindRSDP()+0x2c>
c001a9b6:	b0 00                	mov    al,0x0
c001a9b8:	0f b6 c0             	movzx  eax,al
c001a9bb:	85 c0                	test   eax,eax
c001a9bd:	74 1d                	je     c001a9dc <HalFindRSDP()+0x50>
c001a9bf:	a0 4c 64 03 c0       	mov    al,ds:0xc003644c
c001a9c4:	83 e0 fb             	and    eax,0xfffffffb
c001a9c7:	a2 4c 64 03 c0       	mov    ds:0xc003644c,al
c001a9cc:	83 ec 0c             	sub    esp,0xc
c001a9cf:	68 de c8 02 c0       	push   0xc002c8de
c001a9d4:	e8 8d c5 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001a9d9:	83 c4 10             	add    esp,0x10
c001a9dc:	a0 4c 64 03 c0       	mov    al,ds:0xc003644c
c001a9e1:	83 e0 04             	and    eax,0x4
c001a9e4:	0f b6 c0             	movzx  eax,al
c001a9e7:	85 c0                	test   eax,eax
c001a9e9:	75 17                	jne    c001aa02 <HalFindRSDP()+0x76>
c001a9eb:	83 ec 0c             	sub    esp,0xc
c001a9ee:	68 ed c8 02 c0       	push   0xc002c8ed
c001a9f3:	e8 6e c5 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001a9f8:	83 c4 10             	add    esp,0x10
c001a9fb:	b8 00 00 00 00       	mov    eax,0x0
c001aa00:	eb 63                	jmp    c001aa65 <HalFindRSDP()+0xd9>
c001aa02:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c001aa0a:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c001aa12:	77 2f                	ja     c001aa43 <HalFindRSDP()+0xb7>
c001aa14:	83 ec 04             	sub    esp,0x4
c001aa17:	6a 08                	push   0x8
c001aa19:	68 f7 c8 02 c0       	push   0xc002c8f7
c001aa1e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001aa22:	e8 59 59 fe ff       	call   c0000380 <memcmp>
c001aa27:	83 c4 10             	add    esp,0x10
c001aa2a:	85 c0                	test   eax,eax
c001aa2c:	0f 94 c0             	sete   al
c001aa2f:	0f b6 c0             	movzx  eax,al
c001aa32:	85 c0                	test   eax,eax
c001aa34:	74 06                	je     c001aa3c <HalFindRSDP()+0xb0>
c001aa36:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001aa3a:	eb 29                	jmp    c001aa65 <HalFindRSDP()+0xd9>
c001aa3c:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c001aa41:	eb c7                	jmp    c001aa0a <HalFindRSDP()+0x7e>
c001aa43:	83 ec 0c             	sub    esp,0xc
c001aa46:	68 00 c9 02 c0       	push   0xc002c900
c001aa4b:	e8 16 c5 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001aa50:	83 c4 10             	add    esp,0x10
c001aa53:	a0 4c 64 03 c0       	mov    al,ds:0xc003644c
c001aa58:	83 e0 fb             	and    eax,0xfffffffb
c001aa5b:	a2 4c 64 03 c0       	mov    ds:0xc003644c,al
c001aa60:	b8 00 00 00 00       	mov    eax,0x0
c001aa65:	83 c4 1c             	add    esp,0x1c
c001aa68:	c3                   	ret    

c001aa69 <HalHandlePageFault(void*, void*)>:
c001aa69:	83 ec 1c             	sub    esp,0x1c
c001aa6c:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001aa71:	8b 00                	mov    eax,DWORD PTR [eax]
c001aa73:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001aa76:	8b 80 b2 05 00 00    	mov    eax,DWORD PTR [eax+0x5b2]
c001aa7c:	0f 20 d2             	mov    edx,cr2
c001aa7f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001aa83:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001aa87:	83 ec 08             	sub    esp,0x8
c001aa8a:	52                   	push   edx
c001aa8b:	50                   	push   eax
c001aa8c:	e8 e5 9d ff ff       	call   c0014876 <VAS::tryLoadBackOffDisk(unsigned long)>
c001aa91:	83 c4 10             	add    esp,0x10
c001aa94:	83 c4 1c             	add    esp,0x1c
c001aa97:	c3                   	ret    

c001aa98 <HalHandleOpcodeFault(void*, void*)>:
c001aa98:	83 ec 1c             	sub    esp,0x1c
c001aa9b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001aa9f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001aaa3:	a0 48 64 03 c0       	mov    al,ds:0xc0036448
c001aaa8:	0f b6 c0             	movzx  eax,al
c001aaab:	85 c0                	test   eax,eax
c001aaad:	74 25                	je     c001aad4 <HalHandleOpcodeFault(void*, void*)+0x3c>
c001aaaf:	83 ec 0c             	sub    esp,0xc
c001aab2:	68 0c cb 02 c0       	push   0xc002cb0c
c001aab7:	e8 aa c4 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001aabc:	83 c4 10             	add    esp,0x10
c001aabf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001aac3:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001aac6:	8d 50 19             	lea    edx,[eax+0x19]
c001aac9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001aacd:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001aad0:	b0 01                	mov    al,0x1
c001aad2:	eb 02                	jmp    c001aad6 <HalHandleOpcodeFault(void*, void*)+0x3e>
c001aad4:	b0 00                	mov    al,0x0
c001aad6:	83 c4 1c             	add    esp,0x1c
c001aad9:	c3                   	ret    

c001aada <HalDisplayDebugInfo(void*)>:
c001aada:	83 ec 2c             	sub    esp,0x2c
c001aadd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001aae1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001aae5:	0f 20 c0             	mov    eax,cr0
c001aae8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001aaec:	0f 20 d0             	mov    eax,cr2
c001aaef:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001aaf3:	0f 20 d8             	mov    eax,cr3
c001aaf6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001aafa:	0f 20 e0             	mov    eax,cr4
c001aafd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ab01:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ab05:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c001ab08:	83 ec 08             	sub    esp,0x8
c001ab0b:	50                   	push   eax
c001ab0c:	68 1a c9 02 c0       	push   0xc002c91a
c001ab11:	e8 50 c4 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001ab16:	83 c4 10             	add    esp,0x10
c001ab19:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ab1d:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c001ab20:	83 ec 08             	sub    esp,0x8
c001ab23:	50                   	push   eax
c001ab24:	68 0b c9 02 c0       	push   0xc002c90b
c001ab29:	e8 38 c4 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001ab2e:	83 c4 10             	add    esp,0x10
c001ab31:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ab35:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c001ab38:	83 ec 08             	sub    esp,0x8
c001ab3b:	50                   	push   eax
c001ab3c:	68 16 c9 02 c0       	push   0xc002c916
c001ab41:	e8 20 c4 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001ab46:	83 c4 10             	add    esp,0x10
c001ab49:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ab4d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001ab50:	83 ec 08             	sub    esp,0x8
c001ab53:	50                   	push   eax
c001ab54:	68 25 c9 02 c0       	push   0xc002c925
c001ab59:	e8 08 c4 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001ab5e:	83 c4 10             	add    esp,0x10
c001ab61:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ab65:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c001ab68:	83 ec 08             	sub    esp,0x8
c001ab6b:	50                   	push   eax
c001ab6c:	68 30 c9 02 c0       	push   0xc002c930
c001ab71:	e8 f0 c3 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001ab76:	83 c4 10             	add    esp,0x10
c001ab79:	83 ec 08             	sub    esp,0x8
c001ab7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ab80:	68 3b c9 02 c0       	push   0xc002c93b
c001ab85:	e8 dc c3 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001ab8a:	83 c4 10             	add    esp,0x10
c001ab8d:	83 ec 08             	sub    esp,0x8
c001ab90:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ab94:	68 46 c9 02 c0       	push   0xc002c946
c001ab99:	e8 c8 c3 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001ab9e:	83 c4 10             	add    esp,0x10
c001aba1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001aba5:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c001aba8:	c1 e0 05             	shl    eax,0x5
c001abab:	8d 90 40 fd 02 c0    	lea    edx,[eax-0x3ffd02c0]
c001abb1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001abb5:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c001abb8:	83 ec 04             	sub    esp,0x4
c001abbb:	52                   	push   edx
c001abbc:	50                   	push   eax
c001abbd:	68 51 c9 02 c0       	push   0xc002c951
c001abc2:	e8 9f c3 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001abc7:	83 c4 10             	add    esp,0x10
c001abca:	a1 58 63 03 c0       	mov    eax,ds:0xc0036358
c001abcf:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001abd5:	83 ec 0c             	sub    esp,0xc
c001abd8:	50                   	push   eax
c001abd9:	e8 81 7f ff ff       	call   c0012b5f <setActiveTerminal(VgaText*)>
c001abde:	83 c4 10             	add    esp,0x10
c001abe1:	a1 58 63 03 c0       	mov    eax,ds:0xc0036358
c001abe6:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001abec:	83 ec 08             	sub    esp,0x8
c001abef:	68 60 c9 02 c0       	push   0xc002c960
c001abf4:	50                   	push   eax
c001abf5:	e8 a2 82 ff ff       	call   c0012e9c <VgaText::puts(char const*)>
c001abfa:	83 c4 10             	add    esp,0x10
c001abfd:	a1 58 63 03 c0       	mov    eax,ds:0xc0036358
c001ac02:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001ac08:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ac0c:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
c001ac0f:	83 ec 08             	sub    esp,0x8
c001ac12:	52                   	push   edx
c001ac13:	50                   	push   eax
c001ac14:	e8 3d 82 ff ff       	call   c0012e56 <VgaText::putx(unsigned int)>
c001ac19:	83 c4 10             	add    esp,0x10
c001ac1c:	a1 58 63 03 c0       	mov    eax,ds:0xc0036358
c001ac21:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001ac27:	83 ec 08             	sub    esp,0x8
c001ac2a:	68 6e c9 02 c0       	push   0xc002c96e
c001ac2f:	50                   	push   eax
c001ac30:	e8 67 82 ff ff       	call   c0012e9c <VgaText::puts(char const*)>
c001ac35:	83 c4 10             	add    esp,0x10
c001ac38:	a1 58 63 03 c0       	mov    eax,ds:0xc0036358
c001ac3d:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001ac43:	ba 00 20 00 c2       	mov    edx,0xc2002000
c001ac48:	8b 12                	mov    edx,DWORD PTR [edx]
c001ac4a:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001ac4d:	83 c2 0c             	add    edx,0xc
c001ac50:	83 ec 08             	sub    esp,0x8
c001ac53:	52                   	push   edx
c001ac54:	50                   	push   eax
c001ac55:	e8 42 82 ff ff       	call   c0012e9c <VgaText::puts(char const*)>
c001ac5a:	83 c4 10             	add    esp,0x10
c001ac5d:	a1 58 63 03 c0       	mov    eax,ds:0xc0036358
c001ac62:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001ac68:	83 ec 08             	sub    esp,0x8
c001ac6b:	68 77 c9 02 c0       	push   0xc002c977
c001ac70:	50                   	push   eax
c001ac71:	e8 26 82 ff ff       	call   c0012e9c <VgaText::puts(char const*)>
c001ac76:	83 c4 10             	add    esp,0x10
c001ac79:	a1 58 63 03 c0       	mov    eax,ds:0xc0036358
c001ac7e:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001ac84:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ac88:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c001ac8b:	83 ec 08             	sub    esp,0x8
c001ac8e:	52                   	push   edx
c001ac8f:	50                   	push   eax
c001ac90:	e8 c1 81 ff ff       	call   c0012e56 <VgaText::putx(unsigned int)>
c001ac95:	83 c4 10             	add    esp,0x10
c001ac98:	a1 58 63 03 c0       	mov    eax,ds:0xc0036358
c001ac9d:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001aca3:	83 ec 08             	sub    esp,0x8
c001aca6:	68 7f c9 02 c0       	push   0xc002c97f
c001acab:	50                   	push   eax
c001acac:	e8 eb 81 ff ff       	call   c0012e9c <VgaText::puts(char const*)>
c001acb1:	83 c4 10             	add    esp,0x10
c001acb4:	a1 58 63 03 c0       	mov    eax,ds:0xc0036358
c001acb9:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001acbf:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001acc3:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c001acc6:	83 ec 08             	sub    esp,0x8
c001acc9:	52                   	push   edx
c001acca:	50                   	push   eax
c001accb:	e8 86 81 ff ff       	call   c0012e56 <VgaText::putx(unsigned int)>
c001acd0:	83 c4 10             	add    esp,0x10
c001acd3:	a1 58 63 03 c0       	mov    eax,ds:0xc0036358
c001acd8:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001acde:	83 ec 08             	sub    esp,0x8
c001ace1:	68 87 c9 02 c0       	push   0xc002c987
c001ace6:	50                   	push   eax
c001ace7:	e8 b0 81 ff ff       	call   c0012e9c <VgaText::puts(char const*)>
c001acec:	83 c4 10             	add    esp,0x10
c001acef:	a1 58 63 03 c0       	mov    eax,ds:0xc0036358
c001acf4:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001acfa:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001acfe:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c001ad01:	83 ec 08             	sub    esp,0x8
c001ad04:	52                   	push   edx
c001ad05:	50                   	push   eax
c001ad06:	e8 4b 81 ff ff       	call   c0012e56 <VgaText::putx(unsigned int)>
c001ad0b:	83 c4 10             	add    esp,0x10
c001ad0e:	a1 58 63 03 c0       	mov    eax,ds:0xc0036358
c001ad13:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001ad19:	83 ec 08             	sub    esp,0x8
c001ad1c:	68 8f c9 02 c0       	push   0xc002c98f
c001ad21:	50                   	push   eax
c001ad22:	e8 75 81 ff ff       	call   c0012e9c <VgaText::puts(char const*)>
c001ad27:	83 c4 10             	add    esp,0x10
c001ad2a:	a1 58 63 03 c0       	mov    eax,ds:0xc0036358
c001ad2f:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001ad35:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ad39:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c001ad3c:	83 ec 08             	sub    esp,0x8
c001ad3f:	52                   	push   edx
c001ad40:	50                   	push   eax
c001ad41:	e8 10 81 ff ff       	call   c0012e56 <VgaText::putx(unsigned int)>
c001ad46:	83 c4 10             	add    esp,0x10
c001ad49:	a1 58 63 03 c0       	mov    eax,ds:0xc0036358
c001ad4e:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001ad54:	83 ec 08             	sub    esp,0x8
c001ad57:	68 97 c9 02 c0       	push   0xc002c997
c001ad5c:	50                   	push   eax
c001ad5d:	e8 3a 81 ff ff       	call   c0012e9c <VgaText::puts(char const*)>
c001ad62:	83 c4 10             	add    esp,0x10
c001ad65:	a1 58 63 03 c0       	mov    eax,ds:0xc0036358
c001ad6a:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001ad70:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ad74:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c001ad77:	83 ec 08             	sub    esp,0x8
c001ad7a:	52                   	push   edx
c001ad7b:	50                   	push   eax
c001ad7c:	e8 d5 80 ff ff       	call   c0012e56 <VgaText::putx(unsigned int)>
c001ad81:	83 c4 10             	add    esp,0x10
c001ad84:	a1 58 63 03 c0       	mov    eax,ds:0xc0036358
c001ad89:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001ad8f:	83 ec 08             	sub    esp,0x8
c001ad92:	68 9f c9 02 c0       	push   0xc002c99f
c001ad97:	50                   	push   eax
c001ad98:	e8 ff 80 ff ff       	call   c0012e9c <VgaText::puts(char const*)>
c001ad9d:	83 c4 10             	add    esp,0x10
c001ada0:	a1 58 63 03 c0       	mov    eax,ds:0xc0036358
c001ada5:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001adab:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001adaf:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001adb2:	83 ec 08             	sub    esp,0x8
c001adb5:	52                   	push   edx
c001adb6:	50                   	push   eax
c001adb7:	e8 9a 80 ff ff       	call   c0012e56 <VgaText::putx(unsigned int)>
c001adbc:	83 c4 10             	add    esp,0x10
c001adbf:	a1 58 63 03 c0       	mov    eax,ds:0xc0036358
c001adc4:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001adca:	83 ec 08             	sub    esp,0x8
c001adcd:	68 a7 c9 02 c0       	push   0xc002c9a7
c001add2:	50                   	push   eax
c001add3:	e8 c4 80 ff ff       	call   c0012e9c <VgaText::puts(char const*)>
c001add8:	83 c4 10             	add    esp,0x10
c001addb:	a1 58 63 03 c0       	mov    eax,ds:0xc0036358
c001ade0:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001ade6:	83 ec 08             	sub    esp,0x8
c001ade9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001aded:	50                   	push   eax
c001adee:	e8 63 80 ff ff       	call   c0012e56 <VgaText::putx(unsigned int)>
c001adf3:	83 c4 10             	add    esp,0x10
c001adf6:	a1 58 63 03 c0       	mov    eax,ds:0xc0036358
c001adfb:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001ae01:	83 ec 08             	sub    esp,0x8
c001ae04:	68 b0 c9 02 c0       	push   0xc002c9b0
c001ae09:	50                   	push   eax
c001ae0a:	e8 8d 80 ff ff       	call   c0012e9c <VgaText::puts(char const*)>
c001ae0f:	83 c4 10             	add    esp,0x10
c001ae12:	a1 58 63 03 c0       	mov    eax,ds:0xc0036358
c001ae17:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001ae1d:	83 ec 08             	sub    esp,0x8
c001ae20:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ae24:	50                   	push   eax
c001ae25:	e8 2c 80 ff ff       	call   c0012e56 <VgaText::putx(unsigned int)>
c001ae2a:	83 c4 10             	add    esp,0x10
c001ae2d:	a1 58 63 03 c0       	mov    eax,ds:0xc0036358
c001ae32:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001ae38:	83 ec 08             	sub    esp,0x8
c001ae3b:	68 b8 c9 02 c0       	push   0xc002c9b8
c001ae40:	50                   	push   eax
c001ae41:	e8 56 80 ff ff       	call   c0012e9c <VgaText::puts(char const*)>
c001ae46:	83 c4 10             	add    esp,0x10
c001ae49:	a1 58 63 03 c0       	mov    eax,ds:0xc0036358
c001ae4e:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001ae54:	83 ec 08             	sub    esp,0x8
c001ae57:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ae5b:	50                   	push   eax
c001ae5c:	e8 f5 7f ff ff       	call   c0012e56 <VgaText::putx(unsigned int)>
c001ae61:	83 c4 10             	add    esp,0x10
c001ae64:	fa                   	cli    
c001ae65:	f4                   	hlt    
c001ae66:	eb fe                	jmp    c001ae66 <HalDisplayDebugInfo(void*)+0x38c>

c001ae68 <HalReceivedNMI()>:
c001ae68:	83 ec 1c             	sub    esp,0x1c
c001ae6b:	66 c7 44 24 08 92 00 	mov    WORD PTR [esp+0x8],0x92
c001ae72:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ae76:	89 c2                	mov    edx,eax
c001ae78:	ec                   	in     al,dx
c001ae79:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c001ae7d:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c001ae81:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001ae85:	66 c7 44 24 0c 61 00 	mov    WORD PTR [esp+0xc],0x61
c001ae8c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ae90:	89 c2                	mov    edx,eax
c001ae92:	ec                   	in     al,dx
c001ae93:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001ae97:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c001ae9b:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001ae9f:	83 ec 0c             	sub    esp,0xc
c001aea2:	68 c0 c9 02 c0       	push   0xc002c9c0
c001aea7:	e8 ba c0 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001aeac:	83 c4 10             	add    esp,0x10
c001aeaf:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001aeb4:	83 e0 10             	and    eax,0x10
c001aeb7:	74 10                	je     c001aec9 <HalReceivedNMI()+0x61>
c001aeb9:	83 ec 0c             	sub    esp,0xc
c001aebc:	68 d1 c9 02 c0       	push   0xc002c9d1
c001aec1:	e8 9a 56 ff ff       	call   c0010560 <KePanic(char const*)>
c001aec6:	83 c4 10             	add    esp,0x10
c001aec9:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c001aece:	83 e0 40             	and    eax,0x40
c001aed1:	74 10                	je     c001aee3 <HalReceivedNMI()+0x7b>
c001aed3:	83 ec 0c             	sub    esp,0xc
c001aed6:	68 de c9 02 c0       	push   0xc002c9de
c001aedb:	e8 80 56 ff ff       	call   c0010560 <KePanic(char const*)>
c001aee0:	83 c4 10             	add    esp,0x10
c001aee3:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c001aee7:	0f be c0             	movsx  eax,al
c001aeea:	85 c0                	test   eax,eax
c001aeec:	79 10                	jns    c001aefe <HalReceivedNMI()+0x96>
c001aeee:	83 ec 0c             	sub    esp,0xc
c001aef1:	68 e8 c9 02 c0       	push   0xc002c9e8
c001aef6:	e8 65 56 ff ff       	call   c0010560 <KePanic(char const*)>
c001aefb:	83 c4 10             	add    esp,0x10
c001aefe:	90                   	nop
c001aeff:	83 c4 1c             	add    esp,0x1c
c001af02:	c3                   	ret    

c001af03 <HalSystemIdle()>:
c001af03:	56                   	push   esi
c001af04:	53                   	push   ebx
c001af05:	83 ec 14             	sub    esp,0x14
c001af08:	a0 50 64 03 c0       	mov    al,ds:0xc0036450
c001af0d:	83 e0 10             	and    eax,0x10
c001af10:	0f b6 c0             	movzx  eax,al
c001af13:	85 c0                	test   eax,eax
c001af15:	74 43                	je     c001af5a <HalSystemIdle()+0x57>
c001af17:	83 ec 0c             	sub    esp,0xc
c001af1a:	68 e1 00 00 00       	push   0xe1
c001af1f:	e8 ba f9 ff ff       	call   c001a8de <x86rdmsr(unsigned int)>
c001af24:	83 c4 10             	add    esp,0x10
c001af27:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001af2b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001af2f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001af33:	83 e0 02             	and    eax,0x2
c001af36:	89 c3                	mov    ebx,eax
c001af38:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001af3c:	83 e0 00             	and    eax,0x0
c001af3f:	89 c6                	mov    esi,eax
c001af41:	83 ec 04             	sub    esp,0x4
c001af44:	56                   	push   esi
c001af45:	53                   	push   ebx
c001af46:	68 e1 00 00 00       	push   0xe1
c001af4b:	e8 cc f9 ff ff       	call   c001a91c <x86wrmsr(unsigned int, unsigned long long)>
c001af50:	83 c4 10             	add    esp,0x10
c001af53:	e8 3c 52 fe ff       	call   c0000194 <doTPAUSE>
c001af58:	eb 01                	jmp    c001af5b <HalSystemIdle()+0x58>
c001af5a:	f4                   	hlt    
c001af5b:	90                   	nop
c001af5c:	83 c4 14             	add    esp,0x14
c001af5f:	5b                   	pop    ebx
c001af60:	5e                   	pop    esi
c001af61:	c3                   	ret    

c001af62 <i386SaveCoprocessor(void*)>:
c001af62:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001af66:	83 c0 3f             	add    eax,0x3f
c001af69:	83 e0 c0             	and    eax,0xffffffc0
c001af6c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001af70:	ff 25 10 64 03 c0    	jmp    DWORD PTR ds:0xc0036410

c001af76 <i386LoadCoprocessor(void*)>:
c001af76:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001af7a:	83 c0 3f             	add    eax,0x3f
c001af7d:	83 e0 c0             	and    eax,0xffffffc0
c001af80:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001af84:	ff 25 0c 64 03 c0    	jmp    DWORD PTR ds:0xc003640c

c001af8a <x87EmulHandler(regs*, void*)>:
c001af8a:	53                   	push   ebx
c001af8b:	83 ec 08             	sub    esp,0x8
c001af8e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001af93:	80 78 62 00          	cmp    BYTE PTR [eax+0x62],0x0
c001af97:	74 10                	je     c001afa9 <x87EmulHandler(regs*, void*)+0x1f>
c001af99:	83 ec 0c             	sub    esp,0xc
c001af9c:	68 f5 c9 02 c0       	push   0xc002c9f5
c001afa1:	e8 ba 55 ff ff       	call   c0010560 <KePanic(char const*)>
c001afa6:	83 c4 10             	add    esp,0x10
c001afa9:	0f 20 c0             	mov    eax,cr0
c001afac:	a8 08                	test   al,0x8
c001afae:	74 59                	je     c001b009 <x87EmulHandler(regs*, void*)+0x7f>
c001afb0:	0f 06                	clts   
c001afb2:	a1 08 64 03 c0       	mov    eax,ds:0xc0036408
c001afb7:	85 c0                	test   eax,eax
c001afb9:	74 0e                	je     c001afc9 <x87EmulHandler(regs*, void*)+0x3f>
c001afbb:	83 ec 0c             	sub    esp,0xc
c001afbe:	ff 70 59             	push   DWORD PTR [eax+0x59]
c001afc1:	e8 9c ff ff ff       	call   c001af62 <i386SaveCoprocessor(void*)>
c001afc6:	83 c4 10             	add    esp,0x10
c001afc9:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c001afcf:	83 7b 59 00          	cmp    DWORD PTR [ebx+0x59],0x0
c001afd3:	75 12                	jne    c001afe7 <x87EmulHandler(regs*, void*)+0x5d>
c001afd5:	83 ec 0c             	sub    esp,0xc
c001afd8:	68 40 02 00 00       	push   0x240
c001afdd:	e8 2a 51 ff ff       	call   c001010c <malloc>
c001afe2:	89 43 59             	mov    DWORD PTR [ebx+0x59],eax
c001afe5:	eb 10                	jmp    c001aff7 <x87EmulHandler(regs*, void*)+0x6d>
c001afe7:	a1 08 64 03 c0       	mov    eax,ds:0xc0036408
c001afec:	83 ec 0c             	sub    esp,0xc
c001afef:	ff 70 59             	push   DWORD PTR [eax+0x59]
c001aff2:	e8 7f ff ff ff       	call   c001af76 <i386LoadCoprocessor(void*)>
c001aff7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001affc:	83 c4 10             	add    esp,0x10
c001afff:	a3 08 64 03 c0       	mov    ds:0xc0036408,eax
c001b004:	83 c4 08             	add    esp,0x8
c001b007:	5b                   	pop    ebx
c001b008:	c3                   	ret    
c001b009:	83 ec 0c             	sub    esp,0xc
c001b00c:	68 09 ca 02 c0       	push   0xc002ca09
c001b011:	e8 50 bf fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001b016:	c7 44 24 20 01 00 00 00 	mov    DWORD PTR [esp+0x20],0x1
c001b01e:	83 c4 18             	add    esp,0x18
c001b021:	5b                   	pop    ebx
c001b022:	e9 b5 c8 ff ff       	jmp    c00178dc <KeTerminateCurrentThread(int)>

c001b027 <HalInitialiseCoprocessor()>:
c001b027:	83 ec 10             	sub    esp,0x10
c001b02a:	6a 00                	push   0x0
c001b02c:	68 8a af 01 c0       	push   0xc001af8a
c001b031:	6a 07                	push   0x7
c001b033:	c7 05 08 64 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0036408,0x0
c001b03d:	e8 fb 07 00 00       	call   c001b83d <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001b042:	a0 4c 64 03 c0       	mov    al,ds:0xc003644c
c001b047:	83 c4 10             	add    esp,0x10
c001b04a:	a8 80                	test   al,0x80
c001b04c:	74 29                	je     c001b077 <HalInitialiseCoprocessor()+0x50>
c001b04e:	83 ec 0c             	sub    esp,0xc
c001b051:	68 1f ca 02 c0       	push   0xc002ca1f
c001b056:	e8 0b bf fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001b05b:	c7 05 10 64 03 c0 68 3f 02 c0 	mov    DWORD PTR ds:0xc0036410,0xc0023f68
c001b065:	c7 05 0c 64 03 c0 70 3f 02 c0 	mov    DWORD PTR ds:0xc003640c,0xc0023f70
c001b06f:	83 c4 1c             	add    esp,0x1c
c001b072:	e9 01 8f 00 00       	jmp    c0023f78 <sseInit>
c001b077:	a8 10                	test   al,0x10
c001b079:	74 29                	je     c001b0a4 <HalInitialiseCoprocessor()+0x7d>
c001b07b:	83 ec 0c             	sub    esp,0xc
c001b07e:	68 2a ca 02 c0       	push   0xc002ca2a
c001b083:	e8 de be fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001b088:	c7 05 10 64 03 c0 b7 3f 02 c0 	mov    DWORD PTR ds:0xc0036410,0xc0023fb7
c001b092:	c7 05 0c 64 03 c0 be 3f 02 c0 	mov    DWORD PTR ds:0xc003640c,0xc0023fbe
c001b09c:	83 c4 1c             	add    esp,0x1c
c001b09f:	e9 21 8f 00 00       	jmp    c0023fc5 <x87Init>
c001b0a4:	c7 05 10 64 03 c0 9e 97 01 c0 	mov    DWORD PTR ds:0xc0036410,0xc001979e
c001b0ae:	c7 05 0c 64 03 c0 9e 97 01 c0 	mov    DWORD PTR ds:0xc003640c,0xc001979e
c001b0b8:	0f 20 c0             	mov    eax,cr0
c001b0bb:	83 c8 04             	or     eax,0x4
c001b0be:	0f 22 c0             	mov    cr0,eax
c001b0c1:	83 c4 0c             	add    esp,0xc
c001b0c4:	c3                   	ret    

c001b0c5 <HalPanic(char const*)>:
c001b0c5:	53                   	push   ebx
c001b0c6:	83 ec 10             	sub    esp,0x10
c001b0c9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001b0cd:	fa                   	cli    
c001b0ce:	53                   	push   ebx
c001b0cf:	68 35 ca 02 c0       	push   0xc002ca35
c001b0d4:	e8 8d be fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001b0d9:	a1 04 64 03 c0       	mov    eax,ds:0xc0036404
c001b0de:	83 c4 10             	add    esp,0x10
c001b0e1:	85 c0                	test   eax,eax
c001b0e3:	74 09                	je     c001b0ee <HalPanic(char const*)+0x29>
c001b0e5:	83 ec 0c             	sub    esp,0xc
c001b0e8:	53                   	push   ebx
c001b0e9:	ff d0                	call   eax
c001b0eb:	83 c4 10             	add    esp,0x10
c001b0ee:	a1 f4 61 03 c0       	mov    eax,ds:0xc00361f4
c001b0f3:	85 c0                	test   eax,eax
c001b0f5:	0f 84 dc 00 00 00    	je     c001b1d7 <HalPanic(char const*)+0x112>
c001b0fb:	52                   	push   edx
c001b0fc:	6a 01                	push   0x1
c001b0fe:	6a 0f                	push   0xf
c001b100:	50                   	push   eax
c001b101:	e8 98 78 ff ff       	call   c001299e <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001b106:	59                   	pop    ecx
c001b107:	ff 35 f4 61 03 c0    	push   DWORD PTR ds:0xc00361f4
c001b10d:	e8 98 7a ff ff       	call   c0012baa <VgaText::clearScreen()>
c001b112:	58                   	pop    eax
c001b113:	5a                   	pop    edx
c001b114:	68 09 ba 02 c0       	push   0xc002ba09
c001b119:	ff 35 f4 61 03 c0    	push   DWORD PTR ds:0xc00361f4
c001b11f:	e8 b2 78 ff ff       	call   c00129d6 <VgaText::setTitle(char*)>
c001b124:	83 c4 0c             	add    esp,0xc
c001b127:	6a 01                	push   0x1
c001b129:	6a 0f                	push   0xf
c001b12b:	ff 35 f4 61 03 c0    	push   DWORD PTR ds:0xc00361f4
c001b131:	e8 68 78 ff ff       	call   c001299e <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001b136:	59                   	pop    ecx
c001b137:	58                   	pop    eax
c001b138:	68 4e ca 02 c0       	push   0xc002ca4e
c001b13d:	ff 35 f4 61 03 c0    	push   DWORD PTR ds:0xc00361f4
c001b143:	e8 54 7d ff ff       	call   c0012e9c <VgaText::puts(char const*)>
c001b148:	83 c4 0c             	add    esp,0xc
c001b14b:	6a 0f                	push   0xf
c001b14d:	6a 01                	push   0x1
c001b14f:	ff 35 f4 61 03 c0    	push   DWORD PTR ds:0xc00361f4
c001b155:	e8 44 78 ff ff       	call   c001299e <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001b15a:	58                   	pop    eax
c001b15b:	5a                   	pop    edx
c001b15c:	68 57 ca 02 c0       	push   0xc002ca57
c001b161:	ff 35 f4 61 03 c0    	push   DWORD PTR ds:0xc00361f4
c001b167:	e8 30 7d ff ff       	call   c0012e9c <VgaText::puts(char const*)>
c001b16c:	83 c4 0c             	add    esp,0xc
c001b16f:	6a 01                	push   0x1
c001b171:	6a 0f                	push   0xf
c001b173:	ff 35 f4 61 03 c0    	push   DWORD PTR ds:0xc00361f4
c001b179:	e8 20 78 ff ff       	call   c001299e <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001b17e:	59                   	pop    ecx
c001b17f:	58                   	pop    eax
c001b180:	68 46 a5 02 c0       	push   0xc002a546
c001b185:	ff 35 f4 61 03 c0    	push   DWORD PTR ds:0xc00361f4
c001b18b:	e8 0c 7d ff ff       	call   c0012e9c <VgaText::puts(char const*)>
c001b190:	58                   	pop    eax
c001b191:	5a                   	pop    edx
c001b192:	68 64 ca 02 c0       	push   0xc002ca64
c001b197:	ff 35 f4 61 03 c0    	push   DWORD PTR ds:0xc00361f4
c001b19d:	e8 fa 7c ff ff       	call   c0012e9c <VgaText::puts(char const*)>
c001b1a2:	59                   	pop    ecx
c001b1a3:	58                   	pop    eax
c001b1a4:	68 9e ca 02 c0       	push   0xc002ca9e
c001b1a9:	ff 35 f4 61 03 c0    	push   DWORD PTR ds:0xc00361f4
c001b1af:	e8 e8 7c ff ff       	call   c0012e9c <VgaText::puts(char const*)>
c001b1b4:	58                   	pop    eax
c001b1b5:	5a                   	pop    edx
c001b1b6:	53                   	push   ebx
c001b1b7:	ff 35 f4 61 03 c0    	push   DWORD PTR ds:0xc00361f4
c001b1bd:	e8 da 7c ff ff       	call   c0012e9c <VgaText::puts(char const*)>
c001b1c2:	59                   	pop    ecx
c001b1c3:	5b                   	pop    ebx
c001b1c4:	68 46 a5 02 c0       	push   0xc002a546
c001b1c9:	ff 35 f4 61 03 c0    	push   DWORD PTR ds:0xc00361f4
c001b1cf:	e8 c8 7c ff ff       	call   c0012e9c <VgaText::puts(char const*)>
c001b1d4:	83 c4 10             	add    esp,0x10
c001b1d7:	eb fe                	jmp    c001b1d7 <HalPanic(char const*)+0x112>

c001b1d9 <HalQueryPerformanceCounter()>:
c001b1d9:	31 c0                	xor    eax,eax
c001b1db:	31 d2                	xor    edx,edx
c001b1dd:	f6 05 4e 64 03 c0 08 	test   BYTE PTR ds:0xc003644e,0x8
c001b1e4:	75 02                	jne    c001b1e8 <HalQueryPerformanceCounter()+0xf>
c001b1e6:	0f 31                	rdtsc  
c001b1e8:	c3                   	ret    

c001b1e9 <HalInitialise()>:
c001b1e9:	53                   	push   ebx
c001b1ea:	83 ec 08             	sub    esp,0x8
c001b1ed:	e8 c4 e8 ff ff       	call   c0019ab6 <HalDetectFeatures()>
c001b1f2:	83 ec 0c             	sub    esp,0xc
c001b1f5:	68 9f 97 01 c0       	push   0xc001979f
c001b1fa:	e8 9b 5c ff ff       	call   c0010e9a <KeRegisterRestartHandler(void (*)())>
c001b1ff:	c7 04 24 aa 97 01 c0 	mov    DWORD PTR [esp],0xc00197aa
c001b206:	e8 85 5c ff ff       	call   c0010e90 <KeRegisterShutdownHandler(void (*)())>
c001b20b:	c7 04 24 ab 97 01 c0 	mov    DWORD PTR [esp],0xc00197ab
c001b212:	e8 8d 5c ff ff       	call   c0010ea4 <KeRegisterSleepHandler(void (*)())>
c001b217:	e8 dc 1b ff ff       	call   c000cdf8 <scanMADT()>
c001b21c:	83 c4 10             	add    esp,0x10
c001b21f:	80 3d 40 5e 03 c0 00 	cmp    BYTE PTR ds:0xc0035e40,0x0
c001b226:	75 0d                	jne    c001b235 <HalInitialise()+0x4c>
c001b228:	a0 4c 64 03 c0       	mov    al,ds:0xc003644c
c001b22d:	83 e0 fe             	and    eax,0xfffffffe
c001b230:	a2 4c 64 03 c0       	mov    ds:0xc003644c,al
c001b235:	e8 ea 08 00 00       	call   c001bb24 <picOpen()>
c001b23a:	f6 05 4c 64 03 c0 01 	test   BYTE PTR ds:0xc003644c,0x1
c001b241:	74 0a                	je     c001b24d <HalInitialise()+0x64>
c001b243:	e8 2c 08 00 00       	call   c001ba74 <picDisable()>
c001b248:	e8 59 e1 ff ff       	call   c00193a6 <apicOpen()>
c001b24d:	50                   	push   eax
c001b24e:	bb 0f 00 00 00       	mov    ebx,0xf
c001b253:	6a 00                	push   0x0
c001b255:	68 34 f2 00 c0       	push   0xc000f234
c001b25a:	6a 02                	push   0x2
c001b25c:	e8 dc 05 00 00       	call   c001b83d <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001b261:	83 c4 0c             	add    esp,0xc
c001b264:	6a 00                	push   0x0
c001b266:	68 ac f1 00 c0       	push   0xc000f1ac
c001b26b:	6a 06                	push   0x6
c001b26d:	e8 cb 05 00 00       	call   c001b83d <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001b272:	83 c4 0c             	add    esp,0xc
c001b275:	6a 00                	push   0x0
c001b277:	68 44 f2 00 c0       	push   0xc000f244
c001b27c:	6a 08                	push   0x8
c001b27e:	e8 ba 05 00 00       	call   c001b83d <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001b283:	83 c4 0c             	add    esp,0xc
c001b286:	6a 00                	push   0x0
c001b288:	68 04 f1 00 c0       	push   0xc000f104
c001b28d:	6a 0d                	push   0xd
c001b28f:	e8 a9 05 00 00       	call   c001b83d <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001b294:	83 c4 0c             	add    esp,0xc
c001b297:	6a 00                	push   0x0
c001b299:	68 58 f1 00 c0       	push   0xc000f158
c001b29e:	6a 0e                	push   0xe
c001b2a0:	e8 98 05 00 00       	call   c001b83d <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001b2a5:	83 c4 0c             	add    esp,0xc
c001b2a8:	6a 00                	push   0x0
c001b2aa:	68 00 f2 00 c0       	push   0xc000f200
c001b2af:	6a 00                	push   0x0
c001b2b1:	e8 87 05 00 00       	call   c001b83d <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001b2b6:	83 c4 0c             	add    esp,0xc
c001b2b9:	6a 00                	push   0x0
c001b2bb:	68 00 f2 00 c0       	push   0xc000f200
c001b2c0:	6a 01                	push   0x1
c001b2c2:	e8 76 05 00 00       	call   c001b83d <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001b2c7:	83 c4 0c             	add    esp,0xc
c001b2ca:	6a 00                	push   0x0
c001b2cc:	68 00 f2 00 c0       	push   0xc000f200
c001b2d1:	6a 03                	push   0x3
c001b2d3:	e8 65 05 00 00       	call   c001b83d <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001b2d8:	83 c4 0c             	add    esp,0xc
c001b2db:	6a 00                	push   0x0
c001b2dd:	68 00 f2 00 c0       	push   0xc000f200
c001b2e2:	6a 04                	push   0x4
c001b2e4:	e8 54 05 00 00       	call   c001b83d <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001b2e9:	83 c4 0c             	add    esp,0xc
c001b2ec:	6a 00                	push   0x0
c001b2ee:	68 00 f2 00 c0       	push   0xc000f200
c001b2f3:	6a 05                	push   0x5
c001b2f5:	e8 43 05 00 00       	call   c001b83d <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001b2fa:	83 c4 0c             	add    esp,0xc
c001b2fd:	6a 00                	push   0x0
c001b2ff:	68 00 f2 00 c0       	push   0xc000f200
c001b304:	6a 00                	push   0x0
c001b306:	e8 32 05 00 00       	call   c001b83d <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001b30b:	83 c4 0c             	add    esp,0xc
c001b30e:	6a 00                	push   0x0
c001b310:	68 00 f2 00 c0       	push   0xc000f200
c001b315:	6a 01                	push   0x1
c001b317:	e8 21 05 00 00       	call   c001b83d <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001b31c:	83 c4 0c             	add    esp,0xc
c001b31f:	6a 00                	push   0x0
c001b321:	68 00 f2 00 c0       	push   0xc000f200
c001b326:	6a 09                	push   0x9
c001b328:	e8 10 05 00 00       	call   c001b83d <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001b32d:	83 c4 0c             	add    esp,0xc
c001b330:	6a 00                	push   0x0
c001b332:	68 00 f2 00 c0       	push   0xc000f200
c001b337:	6a 0a                	push   0xa
c001b339:	e8 ff 04 00 00       	call   c001b83d <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001b33e:	83 c4 0c             	add    esp,0xc
c001b341:	6a 00                	push   0x0
c001b343:	68 00 f2 00 c0       	push   0xc000f200
c001b348:	6a 0b                	push   0xb
c001b34a:	e8 ee 04 00 00       	call   c001b83d <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001b34f:	83 c4 10             	add    esp,0x10
c001b352:	50                   	push   eax
c001b353:	6a 00                	push   0x0
c001b355:	68 00 f2 00 c0       	push   0xc000f200
c001b35a:	53                   	push   ebx
c001b35b:	43                   	inc    ebx
c001b35c:	e8 dc 04 00 00       	call   c001b83d <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001b361:	83 c4 10             	add    esp,0x10
c001b364:	83 fb 1e             	cmp    ebx,0x1e
c001b367:	75 e9                	jne    c001b352 <HalInitialise()+0x169>
c001b369:	50                   	push   eax
c001b36a:	6a 00                	push   0x0
c001b36c:	68 38 28 01 c0       	push   0xc0012838
c001b371:	6a 60                	push   0x60
c001b373:	e8 c5 04 00 00       	call   c001b83d <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001b378:	a1 08 61 03 c0       	mov    eax,ds:0xc0036108
c001b37d:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001b387:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c001b38e:	e8 79 4d ff ff       	call   c001010c <malloc>
c001b393:	89 04 24             	mov    DWORD PTR [esp],eax
c001b396:	89 c3                	mov    ebx,eax
c001b398:	e8 ef 0e 00 00       	call   c001c28c <RTC::RTC()>
c001b39d:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c001b3a7:	5a                   	pop    edx
c001b3a8:	59                   	pop    ecx
c001b3a9:	53                   	push   ebx
c001b3aa:	ff 35 08 61 03 c0    	push   DWORD PTR ds:0xc0036108
c001b3b0:	e8 69 f0 fe ff       	call   c000a41e <Device::addChild(Device*)>
c001b3b5:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b3b7:	6a 00                	push   0x0
c001b3b9:	6a 00                	push   0x0
c001b3bb:	6a 00                	push   0x0
c001b3bd:	53                   	push   ebx
c001b3be:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b3c1:	a1 08 61 03 c0       	mov    eax,ds:0xc0036108
c001b3c6:	89 98 58 01 00 00    	mov    DWORD PTR [eax+0x158],ebx
c001b3cc:	83 c4 28             	add    esp,0x28
c001b3cf:	5b                   	pop    ebx
c001b3d0:	c3                   	ret    

c001b3d1 <HalMakeBeep(int)>:
c001b3d1:	53                   	push   ebx
c001b3d2:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001b3d6:	85 db                	test   ebx,ebx
c001b3d8:	75 07                	jne    c001b3e1 <HalMakeBeep(int)+0x10>
c001b3da:	e4 61                	in     al,0x61
c001b3dc:	83 e0 fc             	and    eax,0xfffffffc
c001b3df:	eb 26                	jmp    c001b407 <HalMakeBeep(int)+0x36>
c001b3e1:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001b3e6:	99                   	cdq    
c001b3e7:	f7 fb                	idiv   ebx
c001b3e9:	89 c1                	mov    ecx,eax
c001b3eb:	b0 b6                	mov    al,0xb6
c001b3ed:	e6 43                	out    0x43,al
c001b3ef:	88 c8                	mov    al,cl
c001b3f1:	e6 42                	out    0x42,al
c001b3f3:	89 c8                	mov    eax,ecx
c001b3f5:	c1 e8 08             	shr    eax,0x8
c001b3f8:	e6 42                	out    0x42,al
c001b3fa:	e4 61                	in     al,0x61
c001b3fc:	89 c2                	mov    edx,eax
c001b3fe:	83 ca 03             	or     edx,0x3
c001b401:	38 d0                	cmp    al,dl
c001b403:	74 04                	je     c001b409 <HalMakeBeep(int)+0x38>
c001b405:	88 d0                	mov    al,dl
c001b407:	e6 61                	out    0x61,al
c001b409:	5b                   	pop    ebx
c001b40a:	c3                   	ret    

c001b40b <HalGetRand()>:
c001b40b:	31 c0                	xor    eax,eax
c001b40d:	c3                   	ret    

c001b40e <HalEndOfInterrupt(int)>:
c001b40e:	f6 05 4c 64 03 c0 01 	test   BYTE PTR ds:0xc003644c,0x1
c001b415:	74 1d                	je     c001b434 <HalEndOfInterrupt(int)+0x26>
c001b417:	83 ec 18             	sub    esp,0x18
c001b41a:	6a 1b                	push   0x1b
c001b41c:	e8 bd f4 ff ff       	call   c001a8de <x86rdmsr(unsigned int)>
c001b421:	25 00 f0 ff ff       	and    eax,0xfffff000
c001b426:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c001b430:	83 c4 1c             	add    esp,0x1c
c001b433:	c3                   	ret    
c001b434:	e9 6f 08 00 00       	jmp    c001bca8 <picEOI(int)>
c001b439:	90                   	nop

c001b43a <CPU::CPU()>:
c001b43a:	83 ec 0c             	sub    esp,0xc
c001b43d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b441:	83 ec 08             	sub    esp,0x8
c001b444:	68 26 c8 02 c0       	push   0xc002c826
c001b449:	50                   	push   eax
c001b44a:	e8 31 f1 fe ff       	call   c000a580 <Device::Device(char const*)>
c001b44f:	83 c4 10             	add    esp,0x10
c001b452:	ba 38 cb 02 c0       	mov    edx,0xc002cb38
c001b457:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b45b:	89 10                	mov    DWORD PTR [eax],edx
c001b45d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b461:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001b46b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b46f:	05 64 01 00 00       	add    eax,0x164
c001b474:	83 ec 0c             	sub    esp,0xc
c001b477:	50                   	push   eax
c001b478:	e8 19 3e ff ff       	call   c000f296 <GDT::GDT()>
c001b47d:	83 c4 10             	add    esp,0x10
c001b480:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b484:	05 68 09 00 00       	add    eax,0x968
c001b489:	83 ec 0c             	sub    esp,0xc
c001b48c:	50                   	push   eax
c001b48d:	e8 56 40 ff ff       	call   c000f4e8 <IDT::IDT()>
c001b492:	83 c4 10             	add    esp,0x10
c001b495:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b499:	05 68 11 00 00       	add    eax,0x1168
c001b49e:	83 ec 0c             	sub    esp,0xc
c001b4a1:	50                   	push   eax
c001b4a2:	e8 b1 7e ff ff       	call   c0013358 <TSS::TSS()>
c001b4a7:	83 c4 10             	add    esp,0x10
c001b4aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b4ae:	c7 80 10 01 00 00 11 00 00 00 	mov    DWORD PTR [eax+0x110],0x11
c001b4b8:	90                   	nop
c001b4b9:	83 c4 0c             	add    esp,0xc
c001b4bc:	c3                   	ret    
c001b4bd:	90                   	nop

c001b4be <CPU::setupSMEP()>:
c001b4be:	0f 20 e0             	mov    eax,cr4
c001b4c1:	0d 00 00 10 00       	or     eax,0x100000
c001b4c6:	0f 22 e0             	mov    cr4,eax
c001b4c9:	c3                   	ret    

c001b4ca <CPU::setupUMIP()>:
c001b4ca:	0f 20 e0             	mov    eax,cr4
c001b4cd:	80 cc 08             	or     ah,0x8
c001b4d0:	0f 22 e0             	mov    cr4,eax
c001b4d3:	c3                   	ret    

c001b4d4 <CPU::setupTSC()>:
c001b4d4:	0f 20 e0             	mov    eax,cr4
c001b4d7:	83 c8 04             	or     eax,0x4
c001b4da:	0f 22 e0             	mov    cr4,eax
c001b4dd:	c3                   	ret    

c001b4de <CPU::setupLargePages()>:
c001b4de:	0f 20 e0             	mov    eax,cr4
c001b4e1:	83 c8 10             	or     eax,0x10
c001b4e4:	0f 22 e0             	mov    cr4,eax
c001b4e7:	c3                   	ret    

c001b4e8 <CPU::setupPAT()>:
c001b4e8:	f6 05 4c 64 03 c0 08 	test   BYTE PTR ds:0xc003644c,0x8
c001b4ef:	74 28                	je     c001b519 <CPU::setupPAT()+0x31>
c001b4f1:	53                   	push   ebx
c001b4f2:	83 ec 14             	sub    esp,0x14
c001b4f5:	68 77 02 00 00       	push   0x277
c001b4fa:	e8 df f3 ff ff       	call   c001a8de <x86rdmsr(unsigned int)>
c001b4ff:	83 c4 0c             	add    esp,0xc
c001b502:	83 e2 f8             	and    edx,0xfffffff8
c001b505:	83 ca 01             	or     edx,0x1
c001b508:	52                   	push   edx
c001b509:	50                   	push   eax
c001b50a:	68 77 02 00 00       	push   0x277
c001b50f:	e8 08 f4 ff ff       	call   c001a91c <x86wrmsr(unsigned int, unsigned long long)>
c001b514:	83 c4 18             	add    esp,0x18
c001b517:	5b                   	pop    ebx
c001b518:	c3                   	ret    
c001b519:	c3                   	ret    

c001b51a <CPU::setupMTRR()>:
c001b51a:	c3                   	ret    
c001b51b:	90                   	nop

c001b51c <CPU::setupGlobalPages()>:
c001b51c:	0f 20 e0             	mov    eax,cr4
c001b51f:	0c 80                	or     al,0x80
c001b521:	0f 22 e0             	mov    cr4,eax
c001b524:	c3                   	ret    
c001b525:	90                   	nop

c001b526 <CPU::allowUsermodeDataAccess()>:
c001b526:	f6 05 4f 64 03 c0 40 	test   BYTE PTR ds:0xc003644f,0x40
c001b52d:	74 03                	je     c001b532 <CPU::allowUsermodeDataAccess()+0xc>
c001b52f:	0f 01 cb             	stac   
c001b532:	c3                   	ret    
c001b533:	90                   	nop

c001b534 <CPU::prohibitUsermodeDataAccess()>:
c001b534:	f6 05 4f 64 03 c0 40 	test   BYTE PTR ds:0xc003644f,0x40
c001b53b:	74 03                	je     c001b540 <CPU::prohibitUsermodeDataAccess()+0xc>
c001b53d:	0f 01 ca             	clac   
c001b540:	c3                   	ret    
c001b541:	90                   	nop

c001b542 <CPU::setupSMAP()>:
c001b542:	0f 20 e0             	mov    eax,cr4
c001b545:	0d 00 00 20 00       	or     eax,0x200000
c001b54a:	0f 22 e0             	mov    cr4,eax
c001b54d:	eb e5                	jmp    c001b534 <CPU::prohibitUsermodeDataAccess()>
c001b54f:	90                   	nop

c001b550 <CPU::setupFeatures()>:
c001b550:	53                   	push   ebx
c001b551:	83 ec 08             	sub    esp,0x8
c001b554:	f6 05 4f 64 03 c0 20 	test   BYTE PTR ds:0xc003644f,0x20
c001b55b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b55f:	74 18                	je     c001b579 <CPU::setupFeatures()+0x29>
c001b561:	83 ec 0c             	sub    esp,0xc
c001b564:	68 a9 ca 02 c0       	push   0xc002caa9
c001b569:	e8 f8 b9 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001b56e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b571:	e8 54 ff ff ff       	call   c001b4ca <CPU::setupUMIP()>
c001b576:	83 c4 10             	add    esp,0x10
c001b579:	f6 05 4e 64 03 c0 08 	test   BYTE PTR ds:0xc003644e,0x8
c001b580:	74 18                	je     c001b59a <CPU::setupFeatures()+0x4a>
c001b582:	83 ec 0c             	sub    esp,0xc
c001b585:	68 b3 ca 02 c0       	push   0xc002cab3
c001b58a:	e8 d7 b9 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001b58f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b592:	e8 3d ff ff ff       	call   c001b4d4 <CPU::setupTSC()>
c001b597:	83 c4 10             	add    esp,0x10
c001b59a:	f6 05 4e 64 03 c0 20 	test   BYTE PTR ds:0xc003644e,0x20
c001b5a1:	74 18                	je     c001b5bb <CPU::setupFeatures()+0x6b>
c001b5a3:	83 ec 0c             	sub    esp,0xc
c001b5a6:	68 bc ca 02 c0       	push   0xc002cabc
c001b5ab:	e8 b6 b9 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001b5b0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b5b3:	e8 26 ff ff ff       	call   c001b4de <CPU::setupLargePages()>
c001b5b8:	83 c4 10             	add    esp,0x10
c001b5bb:	f6 05 4e 64 03 c0 40 	test   BYTE PTR ds:0xc003644e,0x40
c001b5c2:	74 18                	je     c001b5dc <CPU::setupFeatures()+0x8c>
c001b5c4:	83 ec 0c             	sub    esp,0xc
c001b5c7:	68 c5 ca 02 c0       	push   0xc002cac5
c001b5cc:	e8 95 b9 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001b5d1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b5d4:	e8 43 ff ff ff       	call   c001b51c <CPU::setupGlobalPages()>
c001b5d9:	83 c4 10             	add    esp,0x10
c001b5dc:	f6 05 4e 64 03 c0 80 	test   BYTE PTR ds:0xc003644e,0x80
c001b5e3:	74 18                	je     c001b5fd <CPU::setupFeatures()+0xad>
c001b5e5:	83 ec 0c             	sub    esp,0xc
c001b5e8:	68 d7 ca 02 c0       	push   0xc002cad7
c001b5ed:	e8 74 b9 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001b5f2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b5f5:	e8 ee fe ff ff       	call   c001b4e8 <CPU::setupPAT()>
c001b5fa:	83 c4 10             	add    esp,0x10
c001b5fd:	f6 05 50 64 03 c0 04 	test   BYTE PTR ds:0xc0036450,0x4
c001b604:	74 11                	je     c001b617 <CPU::setupFeatures()+0xc7>
c001b606:	c7 44 24 10 e0 ca 02 c0 	mov    DWORD PTR [esp+0x10],0xc002cae0
c001b60e:	83 c4 08             	add    esp,0x8
c001b611:	5b                   	pop    ebx
c001b612:	e9 4f b9 fe ff       	jmp    c0006f66 <Dbg::kprintf(char const*, ...)>
c001b617:	83 c4 08             	add    esp,0x8
c001b61a:	5b                   	pop    ebx
c001b61b:	c3                   	ret    

c001b61c <CPU::open(int, int, void*)>:
c001b61c:	55                   	push   ebp
c001b61d:	57                   	push   edi
c001b61e:	56                   	push   esi
c001b61f:	53                   	push   ebx
c001b620:	83 ec 18             	sub    esp,0x18
c001b623:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001b627:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001b62b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001b62f:	8d 83 64 01 00 00    	lea    eax,[ebx+0x164]
c001b635:	89 bb 60 01 00 00    	mov    DWORD PTR [ebx+0x160],edi
c001b63b:	8d ab 68 11 00 00    	lea    ebp,[ebx+0x1168]
c001b641:	50                   	push   eax
c001b642:	e8 b1 3c ff ff       	call   c000f2f8 <GDT::setup()>
c001b647:	83 c4 0c             	add    esp,0xc
c001b64a:	6a 00                	push   0x0
c001b64c:	68 ef be ad de       	push   0xdeadbeef
c001b651:	55                   	push   ebp
c001b652:	e8 45 7d ff ff       	call   c001339c <TSS::setup(unsigned long, unsigned long)>
c001b657:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001b65a:	e8 1d 7d ff ff       	call   c001337c <TSS::flush()>
c001b65f:	8d 83 68 09 00 00    	lea    eax,[ebx+0x968]
c001b665:	89 04 24             	mov    DWORD PTR [esp],eax
c001b668:	e8 f1 3e ff ff       	call   c000f55e <IDT::setup()>
c001b66d:	b8 00 04 00 00       	mov    eax,0x400
c001b672:	0f 23 f8             	mov    dr7,eax
c001b675:	c7 83 5c 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x15c],0xc2400000
c001b67f:	e8 d6 50 ff ff       	call   c001075a <Phys::allocatePage()>
c001b684:	83 c4 10             	add    esp,0x10
c001b687:	85 f6                	test   esi,esi
c001b689:	89 83 58 01 00 00    	mov    DWORD PTR [ebx+0x158],eax
c001b68f:	89 38                	mov    DWORD PTR [eax],edi
c001b691:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001b697:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c001b69a:	74 10                	je     c001b6ac <CPU::open(int, int, void*)+0x90>
c001b69c:	50                   	push   eax
c001b69d:	50                   	push   eax
c001b69e:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001b6a4:	56                   	push   esi
c001b6a5:	e8 94 86 ff ff       	call   c0013d3e <VAS::setCPUSpecific(unsigned long)>
c001b6aa:	eb 0d                	jmp    c001b6b9 <CPU::open(int, int, void*)+0x9d>
c001b6ac:	83 ec 0c             	sub    esp,0xc
c001b6af:	68 ea ca 02 c0       	push   0xc002caea
c001b6b4:	e8 a7 4e ff ff       	call   c0010560 <KePanic(char const*)>
c001b6b9:	83 c4 10             	add    esp,0x10
c001b6bc:	83 ec 0c             	sub    esp,0xc
c001b6bf:	68 f8 ca 02 c0       	push   0xc002caf8
c001b6c4:	e8 98 25 ff ff       	call   c000dc61 <KeSetBootMessage(char const*)>
c001b6c9:	e8 1b fb ff ff       	call   c001b1e9 <HalInitialise()>
c001b6ce:	c7 04 24 10 00 00 00 	mov    DWORD PTR [esp],0x10
c001b6d5:	e8 3a 25 ff ff       	call   c000dc14 <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c001b6da:	0f b6 c0             	movzx  eax,al
c001b6dd:	83 f8 01             	cmp    eax,0x1
c001b6e0:	19 c0                	sbb    eax,eax
c001b6e2:	25 aa 00 00 00       	and    eax,0xaa
c001b6e7:	83 c0 1e             	add    eax,0x1e
c001b6ea:	89 04 24             	mov    DWORD PTR [esp],eax
c001b6ed:	e8 93 03 ff ff       	call   c000ba85 <setupTimer(int)>
c001b6f2:	89 83 74 11 00 00    	mov    DWORD PTR [ebx+0x1174],eax
c001b6f8:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c001b6ff:	e8 10 25 ff ff       	call   c000dc14 <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c001b704:	83 c4 10             	add    esp,0x10
c001b707:	84 c0                	test   al,al
c001b709:	74 0c                	je     c001b717 <CPU::open(int, int, void*)+0xfb>
c001b70b:	83 ec 0c             	sub    esp,0xc
c001b70e:	53                   	push   ebx
c001b70f:	e8 3c fe ff ff       	call   c001b550 <CPU::setupFeatures()>
c001b714:	83 c4 10             	add    esp,0x10
c001b717:	83 c4 0c             	add    esp,0xc
c001b71a:	31 c0                	xor    eax,eax
c001b71c:	5b                   	pop    ebx
c001b71d:	5e                   	pop    esi
c001b71e:	5f                   	pop    edi
c001b71f:	5d                   	pop    ebp
c001b720:	c3                   	ret    

c001b721 <convertLegacyIRQNumber(int)>:
c001b721:	83 ec 0c             	sub    esp,0xc
c001b724:	f6 05 4c 64 03 c0 01 	test   BYTE PTR ds:0xc003644c,0x1
c001b72b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b72f:	74 0c                	je     c001b73d <convertLegacyIRQNumber(int)+0x1c>
c001b731:	83 f8 0f             	cmp    eax,0xf
c001b734:	7f 0b                	jg     c001b741 <convertLegacyIRQNumber(int)+0x20>
c001b736:	0f b6 80 48 f5 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd0ab8]
c001b73d:	83 c4 0c             	add    esp,0xc
c001b740:	c3                   	ret    
c001b741:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001b745:	83 ec 0c             	sub    esp,0xc
c001b748:	68 5c cb 02 c0       	push   0xc002cb5c
c001b74d:	e8 0e 4e ff ff       	call   c0010560 <KePanic(char const*)>
c001b752:	83 c4 10             	add    esp,0x10
c001b755:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b759:	83 c4 0c             	add    esp,0xc
c001b75c:	c3                   	ret    

c001b75d <KeSetupInterrupts()>:
c001b75d:	31 c0                	xor    eax,eax
c001b75f:	c7 80 60 74 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc8ba0],0x0
c001b769:	83 c0 10             	add    eax,0x10
c001b76c:	c7 80 50 64 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc9bb0],0x0
c001b776:	c7 80 54 74 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc8bac],0x0
c001b780:	c7 80 54 64 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc9bac],0x0
c001b78a:	c7 80 58 74 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc8ba8],0x0
c001b794:	c7 80 58 64 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc9ba8],0x0
c001b79e:	c7 80 5c 74 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc8ba4],0x0
c001b7a8:	c7 80 5c 64 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc9ba4],0x0
c001b7b2:	3d 00 10 00 00       	cmp    eax,0x1000
c001b7b7:	75 a6                	jne    c001b75f <KeSetupInterrupts()+0x2>
c001b7b9:	c3                   	ret    

c001b7ba <int_handler>:
c001b7ba:	55                   	push   ebp
c001b7bb:	57                   	push   edi
c001b7bc:	56                   	push   esi
c001b7bd:	53                   	push   ebx
c001b7be:	83 ec 0c             	sub    esp,0xc
c001b7c1:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001b7c5:	eb 02                	jmp    c001b7c9 <int_handler+0xf>
c001b7c7:	fa                   	cli    
c001b7c8:	f4                   	hlt    
c001b7c9:	e8 8c 4d ff ff       	call   c001055a <KeIsKernelInPanic()>
c001b7ce:	84 c0                	test   al,al
c001b7d0:	75 f5                	jne    c001b7c7 <int_handler+0xd>
c001b7d2:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c001b7d5:	8d 46 e0             	lea    eax,[esi-0x20]
c001b7d8:	83 f8 17             	cmp    eax,0x17
c001b7db:	76 40                	jbe    c001b81d <int_handler+0x63>
c001b7dd:	c1 e6 04             	shl    esi,0x4
c001b7e0:	31 db                	xor    ebx,ebx
c001b7e2:	8d ae 60 74 03 c0    	lea    ebp,[esi-0x3ffc8ba0]
c001b7e8:	81 c6 60 64 03 c0    	add    esi,0xc0036460
c001b7ee:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c001b7f2:	85 c0                	test   eax,eax
c001b7f4:	74 13                	je     c001b809 <int_handler+0x4f>
c001b7f6:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c001b7fa:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c001b7fd:	74 2c                	je     c001b82b <int_handler+0x71>
c001b7ff:	83 ec 08             	sub    esp,0x8
c001b802:	52                   	push   edx
c001b803:	57                   	push   edi
c001b804:	ff d0                	call   eax
c001b806:	83 c4 10             	add    esp,0x10
c001b809:	83 c3 01             	add    ebx,0x1
c001b80c:	83 fb 04             	cmp    ebx,0x4
c001b80f:	75 dd                	jne    c001b7ee <int_handler+0x34>
c001b811:	83 c4 0c             	add    esp,0xc
c001b814:	31 c0                	xor    eax,eax
c001b816:	5b                   	pop    ebx
c001b817:	31 d2                	xor    edx,edx
c001b819:	5e                   	pop    esi
c001b81a:	5f                   	pop    edi
c001b81b:	5d                   	pop    ebp
c001b81c:	c3                   	ret    
c001b81d:	83 ec 0c             	sub    esp,0xc
c001b820:	50                   	push   eax
c001b821:	e8 e8 fb ff ff       	call   c001b40e <HalEndOfInterrupt(int)>
c001b826:	83 c4 10             	add    esp,0x10
c001b829:	eb b2                	jmp    c001b7dd <int_handler+0x23>
c001b82b:	83 ec 08             	sub    esp,0x8
c001b82e:	52                   	push   edx
c001b82f:	57                   	push   edi
c001b830:	ff d0                	call   eax
c001b832:	83 c4 10             	add    esp,0x10
c001b835:	83 c4 0c             	add    esp,0xc
c001b838:	5b                   	pop    ebx
c001b839:	5e                   	pop    esi
c001b83a:	5f                   	pop    edi
c001b83b:	5d                   	pop    ebp
c001b83c:	c3                   	ret    

c001b83d <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>:
c001b83d:	56                   	push   esi
c001b83e:	31 c0                	xor    eax,eax
c001b840:	53                   	push   ebx
c001b841:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001b845:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b849:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001b84d:	89 ca                	mov    edx,ecx
c001b84f:	c1 e2 04             	shl    edx,0x4
c001b852:	83 bc 82 60 74 03 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffc8ba0],0x0
c001b85a:	74 17                	je     c001b873 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)+0x36>
c001b85c:	83 c0 01             	add    eax,0x1
c001b85f:	83 f8 04             	cmp    eax,0x4
c001b862:	75 ee                	jne    c001b852 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c001b864:	c7 44 24 0c bd cb 02 c0 	mov    DWORD PTR [esp+0xc],0xc002cbbd
c001b86c:	5b                   	pop    ebx
c001b86d:	5e                   	pop    esi
c001b86e:	e9 ed 4c ff ff       	jmp    c0010560 <KePanic(char const*)>
c001b873:	8d 04 88             	lea    eax,[eax+ecx*4]
c001b876:	89 1c 85 60 74 03 c0 	mov    DWORD PTR [eax*4-0x3ffc8ba0],ebx
c001b87d:	5b                   	pop    ebx
c001b87e:	89 34 85 60 64 03 c0 	mov    DWORD PTR [eax*4-0x3ffc9ba0],esi
c001b885:	5e                   	pop    esi
c001b886:	c3                   	ret    

c001b887 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001b887:	55                   	push   ebp
c001b888:	57                   	push   edi
c001b889:	56                   	push   esi
c001b88a:	53                   	push   ebx
c001b88b:	83 ec 0c             	sub    esp,0xc
c001b88e:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001b892:	f6 05 4c 64 03 c0 01 	test   BYTE PTR ds:0xc003644c,0x1
c001b899:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b89d:	8d 6e 20             	lea    ebp,[esi+0x20]
c001b8a0:	74 57                	je     c001b8f9 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x72>
c001b8a2:	84 c0                	test   al,al
c001b8a4:	89 c7                	mov    edi,eax
c001b8a6:	74 1d                	je     c001b8c5 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3e>
c001b8a8:	83 fe 0f             	cmp    esi,0xf
c001b8ab:	0f 8f d9 00 00 00    	jg     c001b98a <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x103>
c001b8b1:	0f b6 b6 48 f5 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd0ab8]
c001b8b8:	0f b7 bc 36 20 5e 03 c0 	movzx  edi,WORD PTR [esi+esi*1-0x3ffca1e0]
c001b8c0:	d1 ef                	shr    edi,1
c001b8c2:	83 e7 01             	and    edi,0x1
c001b8c5:	a1 c0 63 03 c0       	mov    eax,ds:0xc00363c0
c001b8ca:	83 ec 08             	sub    esp,0x8
c001b8cd:	31 db                	xor    ebx,ebx
c001b8cf:	50                   	push   eax
c001b8d0:	68 ca cb 02 c0       	push   0xc002cbca
c001b8d5:	e8 8c b6 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001b8da:	a1 c0 63 03 c0       	mov    eax,ds:0xc00363c0
c001b8df:	83 c4 10             	add    esp,0x10
c001b8e2:	85 c0                	test   eax,eax
c001b8e4:	7f 59                	jg     c001b93f <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb8>
c001b8e6:	8d 6e 20             	lea    ebp,[esi+0x20]
c001b8e9:	83 ec 0c             	sub    esp,0xc
c001b8ec:	68 e1 cb 02 c0       	push   0xc002cbe1
c001b8f1:	e8 6a 4c ff ff       	call   c0010560 <KePanic(char const*)>
c001b8f6:	83 c4 10             	add    esp,0x10
c001b8f9:	89 e8                	mov    eax,ebp
c001b8fb:	31 d2                	xor    edx,edx
c001b8fd:	c1 e0 04             	shl    eax,0x4
c001b900:	8b 8c 90 60 74 03 c0 	mov    ecx,DWORD PTR [eax+edx*4-0x3ffc8ba0]
c001b907:	85 c9                	test   ecx,ecx
c001b909:	0f 84 92 00 00 00    	je     c001b9a1 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x11a>
c001b90f:	83 c2 01             	add    edx,0x1
c001b912:	83 fa 04             	cmp    edx,0x4
c001b915:	75 e9                	jne    c001b900 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x79>
c001b917:	83 ec 0c             	sub    esp,0xc
c001b91a:	68 98 cb 02 c0       	push   0xc002cb98
c001b91f:	e8 3c 4c ff ff       	call   c0010560 <KePanic(char const*)>
c001b924:	83 c4 10             	add    esp,0x10
c001b927:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b92c:	83 c4 0c             	add    esp,0xc
c001b92f:	5b                   	pop    ebx
c001b930:	5e                   	pop    esi
c001b931:	5f                   	pop    edi
c001b932:	5d                   	pop    ebp
c001b933:	c3                   	ret    
c001b934:	83 c3 01             	add    ebx,0x1
c001b937:	39 1d c0 63 03 c0    	cmp    DWORD PTR ds:0xc00363c0,ebx
c001b93d:	7e a7                	jle    c001b8e6 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x5f>
c001b93f:	8b 2c 9d e0 63 03 c0 	mov    ebp,DWORD PTR [ebx*4-0x3ffc9c20]
c001b946:	83 ec 08             	sub    esp,0x8
c001b949:	56                   	push   esi
c001b94a:	55                   	push   ebp
c001b94b:	e8 e2 db ff ff       	call   c0019532 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c001b950:	83 c4 10             	add    esp,0x10
c001b953:	84 c0                	test   al,al
c001b955:	74 dd                	je     c001b934 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xad>
c001b957:	89 f8                	mov    eax,edi
c001b959:	83 ec 04             	sub    esp,0x4
c001b95c:	8b 1c 9d e0 63 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffc9c20]
c001b963:	8d 6e 20             	lea    ebp,[esi+0x20]
c001b966:	0f b6 f8             	movzx  edi,al
c001b969:	57                   	push   edi
c001b96a:	89 e8                	mov    eax,ebp
c001b96c:	6a 00                	push   0x0
c001b96e:	0f b6 c0             	movzx  eax,al
c001b971:	50                   	push   eax
c001b972:	89 f0                	mov    eax,esi
c001b974:	6a 00                	push   0x0
c001b976:	0f b6 c0             	movzx  eax,al
c001b979:	6a 00                	push   0x0
c001b97b:	50                   	push   eax
c001b97c:	53                   	push   ebx
c001b97d:	e8 1c dd ff ff       	call   c001969e <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c001b982:	83 c4 20             	add    esp,0x20
c001b985:	e9 6f ff ff ff       	jmp    c001b8f9 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x72>
c001b98a:	83 ec 0c             	sub    esp,0xc
c001b98d:	31 ff                	xor    edi,edi
c001b98f:	68 5c cb 02 c0       	push   0xc002cb5c
c001b994:	e8 c7 4b ff ff       	call   c0010560 <KePanic(char const*)>
c001b999:	83 c4 10             	add    esp,0x10
c001b99c:	e9 24 ff ff ff       	jmp    c001b8c5 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3e>
c001b9a1:	8d 04 aa             	lea    eax,[edx+ebp*4]
c001b9a4:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001b9a8:	89 14 85 60 74 03 c0 	mov    DWORD PTR [eax*4-0x3ffc8ba0],edx
c001b9af:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001b9b3:	89 14 85 60 64 03 c0 	mov    DWORD PTR [eax*4-0x3ffc9ba0],edx
c001b9ba:	83 c4 0c             	add    esp,0xc
c001b9bd:	89 f0                	mov    eax,esi
c001b9bf:	5b                   	pop    ebx
c001b9c0:	5e                   	pop    esi
c001b9c1:	5f                   	pop    edi
c001b9c2:	5d                   	pop    ebp
c001b9c3:	c3                   	ret    

c001b9c4 <HalUninstallISRHandler(int, void (*)(regs*, void*))>:
c001b9c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b9c8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001b9cc:	c1 e0 04             	shl    eax,0x4
c001b9cf:	8d 50 10             	lea    edx,[eax+0x10]
c001b9d2:	39 88 60 74 03 c0    	cmp    DWORD PTR [eax-0x3ffc8ba0],ecx
c001b9d8:	74 08                	je     c001b9e2 <HalUninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c001b9da:	83 c0 04             	add    eax,0x4
c001b9dd:	39 d0                	cmp    eax,edx
c001b9df:	75 f1                	jne    c001b9d2 <HalUninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c001b9e1:	c3                   	ret    
c001b9e2:	c7 80 60 74 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc8ba0],0x0
c001b9ec:	c7 80 60 64 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc9ba0],0x0
c001b9f6:	eb e2                	jmp    c001b9da <HalUninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c001b9f8 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c001b9f8:	56                   	push   esi
c001b9f9:	53                   	push   ebx
c001b9fa:	83 ec 04             	sub    esp,0x4
c001b9fd:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001ba02:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ba06:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001ba0a:	74 09                	je     c001ba15 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c001ba0c:	f6 05 4c 64 03 c0 01 	test   BYTE PTR ds:0xc003644c,0x1
c001ba13:	75 34                	jne    c001ba49 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x51>
c001ba15:	8d 43 20             	lea    eax,[ebx+0x20]
c001ba18:	c1 e0 04             	shl    eax,0x4
c001ba1b:	8d 50 10             	lea    edx,[eax+0x10]
c001ba1e:	39 b0 60 74 03 c0    	cmp    DWORD PTR [eax-0x3ffc8ba0],esi
c001ba24:	74 0d                	je     c001ba33 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c001ba26:	83 c0 04             	add    eax,0x4
c001ba29:	39 d0                	cmp    eax,edx
c001ba2b:	75 f1                	jne    c001ba1e <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x26>
c001ba2d:	83 c4 04             	add    esp,0x4
c001ba30:	5b                   	pop    ebx
c001ba31:	5e                   	pop    esi
c001ba32:	c3                   	ret    
c001ba33:	c7 80 60 74 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc8ba0],0x0
c001ba3d:	c7 80 60 64 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc9ba0],0x0
c001ba47:	eb dd                	jmp    c001ba26 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2e>
c001ba49:	83 fb 0f             	cmp    ebx,0xf
c001ba4c:	7f 09                	jg     c001ba57 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x5f>
c001ba4e:	0f b6 9b 48 f5 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd0ab8]
c001ba55:	eb be                	jmp    c001ba15 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c001ba57:	83 ec 0c             	sub    esp,0xc
c001ba5a:	68 ee cb 02 c0       	push   0xc002cbee
c001ba5f:	e8 fc 4a ff ff       	call   c0010560 <KePanic(char const*)>
c001ba64:	83 c4 10             	add    esp,0x10
c001ba67:	eb ac                	jmp    c001ba15 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c001ba69:	66 90                	xchg   ax,ax
c001ba6b:	90                   	nop

c001ba6c <picIoWait()>:
c001ba6c:	eb 00                	jmp    c001ba6e <picIoWait()+0x2>
c001ba6e:	eb 00                	jmp    c001ba70 <picIoWait()+0x4>
c001ba70:	90                   	nop
c001ba71:	c3                   	ret    
c001ba72:	66 90                	xchg   ax,ax

c001ba74 <picDisable()>:
c001ba74:	83 ec 10             	sub    esp,0x10
c001ba77:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c001ba7e:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c001ba83:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001ba87:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001ba8c:	ee                   	out    dx,al
c001ba8d:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c001ba94:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c001ba99:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c001ba9d:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c001baa2:	ee                   	out    dx,al
c001baa3:	90                   	nop
c001baa4:	83 c4 10             	add    esp,0x10
c001baa7:	c3                   	ret    

c001baa8 <picGetIRQReg(int)>:
c001baa8:	83 ec 10             	sub    esp,0x10
c001baab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001baaf:	0f b6 c0             	movzx  eax,al
c001bab2:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c001bab9:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c001babd:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001bac1:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001bac6:	ee                   	out    dx,al
c001bac7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001bacb:	0f b6 c0             	movzx  eax,al
c001bace:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c001bad5:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001bad9:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001badd:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001bae2:	ee                   	out    dx,al
c001bae3:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c001baea:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c001baef:	89 c2                	mov    edx,eax
c001baf1:	ec                   	in     al,dx
c001baf2:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001baf6:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001bafa:	0f b6 c0             	movzx  eax,al
c001bafd:	c1 e0 08             	shl    eax,0x8
c001bb00:	89 c1                	mov    ecx,eax
c001bb02:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c001bb09:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c001bb0e:	89 c2                	mov    edx,eax
c001bb10:	ec                   	in     al,dx
c001bb11:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001bb15:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c001bb19:	0f b6 c0             	movzx  eax,al
c001bb1c:	09 c8                	or     eax,ecx
c001bb1e:	83 c4 10             	add    esp,0x10
c001bb21:	c3                   	ret    
c001bb22:	66 90                	xchg   ax,ax

c001bb24 <picOpen()>:
c001bb24:	83 ec 50             	sub    esp,0x50
c001bb27:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c001bb2e:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001bb33:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001bb37:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001bb3b:	ee                   	out    dx,al
c001bb3c:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c001bb43:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001bb48:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c001bb4c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001bb50:	ee                   	out    dx,al
c001bb51:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c001bb59:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c001bb61:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c001bb68:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bb6c:	89 c2                	mov    edx,eax
c001bb6e:	ec                   	in     al,dx
c001bb6f:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c001bb73:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c001bb77:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c001bb7b:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c001bb82:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001bb86:	89 c2                	mov    edx,eax
c001bb88:	ec                   	in     al,dx
c001bb89:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001bb8d:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c001bb91:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c001bb95:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c001bb9c:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c001bba1:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001bba5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001bba9:	ee                   	out    dx,al
c001bbaa:	e8 bd fe ff ff       	call   c001ba6c <picIoWait()>
c001bbaf:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c001bbb6:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c001bbbb:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c001bbbf:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001bbc3:	ee                   	out    dx,al
c001bbc4:	e8 a3 fe ff ff       	call   c001ba6c <picIoWait()>
c001bbc9:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001bbcd:	0f b6 c0             	movzx  eax,al
c001bbd0:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c001bbd7:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c001bbdb:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c001bbdf:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001bbe3:	ee                   	out    dx,al
c001bbe4:	e8 83 fe ff ff       	call   c001ba6c <picIoWait()>
c001bbe9:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001bbed:	0f b6 c0             	movzx  eax,al
c001bbf0:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c001bbf7:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001bbfb:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001bbff:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001bc03:	ee                   	out    dx,al
c001bc04:	e8 63 fe ff ff       	call   c001ba6c <picIoWait()>
c001bc09:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c001bc10:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c001bc15:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c001bc19:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001bc1d:	ee                   	out    dx,al
c001bc1e:	e8 49 fe ff ff       	call   c001ba6c <picIoWait()>
c001bc23:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c001bc2a:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c001bc2f:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001bc33:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001bc37:	ee                   	out    dx,al
c001bc38:	e8 2f fe ff ff       	call   c001ba6c <picIoWait()>
c001bc3d:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c001bc44:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c001bc49:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c001bc4d:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001bc51:	ee                   	out    dx,al
c001bc52:	e8 15 fe ff ff       	call   c001ba6c <picIoWait()>
c001bc57:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c001bc5e:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c001bc63:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c001bc67:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001bc6b:	ee                   	out    dx,al
c001bc6c:	e8 fb fd ff ff       	call   c001ba6c <picIoWait()>
c001bc71:	0f b6 44 24 47       	movzx  eax,BYTE PTR [esp+0x47]
c001bc76:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c001bc7d:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c001bc81:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c001bc85:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001bc89:	ee                   	out    dx,al
c001bc8a:	0f b6 44 24 46       	movzx  eax,BYTE PTR [esp+0x46]
c001bc8f:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c001bc96:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001bc9a:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c001bc9e:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001bca2:	ee                   	out    dx,al
c001bca3:	90                   	nop
c001bca4:	83 c4 50             	add    esp,0x50
c001bca7:	c3                   	ret    

c001bca8 <picEOI(int)>:
c001bca8:	83 ec 10             	sub    esp,0x10
c001bcab:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c001bcb0:	75 1e                	jne    c001bcd0 <picEOI(int)+0x28>
c001bcb2:	6a 0b                	push   0xb
c001bcb4:	e8 ef fd ff ff       	call   c001baa8 <picGetIRQReg(int)>
c001bcb9:	83 c4 04             	add    esp,0x4
c001bcbc:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c001bcc1:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c001bcc6:	25 80 00 00 00       	and    eax,0x80
c001bccb:	74 73                	je     c001bd40 <picEOI(int)+0x98>
c001bccd:	8d 76 00             	lea    esi,[esi+0x0]
c001bcd0:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c001bcd5:	75 31                	jne    c001bd08 <picEOI(int)+0x60>
c001bcd7:	6a 0b                	push   0xb
c001bcd9:	e8 ca fd ff ff       	call   c001baa8 <picGetIRQReg(int)>
c001bcde:	83 c4 04             	add    esp,0x4
c001bce1:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c001bce6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bcea:	98                   	cwde   
c001bceb:	85 c0                	test   eax,eax
c001bced:	78 19                	js     c001bd08 <picEOI(int)+0x60>
c001bcef:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c001bcf6:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c001bcfb:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001bcff:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001bd04:	ee                   	out    dx,al
c001bd05:	eb 3d                	jmp    c001bd44 <picEOI(int)+0x9c>
c001bd07:	90                   	nop
c001bd08:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c001bd0d:	7e 19                	jle    c001bd28 <picEOI(int)+0x80>
c001bd0f:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c001bd16:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c001bd1b:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001bd1f:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001bd24:	ee                   	out    dx,al
c001bd25:	8d 76 00             	lea    esi,[esi+0x0]
c001bd28:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c001bd2f:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c001bd34:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001bd38:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001bd3d:	ee                   	out    dx,al
c001bd3e:	eb 04                	jmp    c001bd44 <picEOI(int)+0x9c>
c001bd40:	90                   	nop
c001bd41:	8d 76 00             	lea    esi,[esi+0x0]
c001bd44:	83 c4 10             	add    esp,0x10
c001bd47:	c3                   	ret    

c001bd48 <RTC::open(int, int, void*)>:
c001bd48:	31 c0                	xor    eax,eax
c001bd4a:	c3                   	ret    
c001bd4b:	90                   	nop

c001bd4c <RTC::close(int, int, void*)>:
c001bd4c:	31 c0                	xor    eax,eax
c001bd4e:	c3                   	ret    
c001bd4f:	90                   	nop

c001bd50 <RTC::timeInSecondsUTC()>:
c001bd50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bd54:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001bd5a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001bd60:	c3                   	ret    
c001bd61:	90                   	nop

c001bd62 <RTC::timeInDatetimeUTC()>:
c001bd62:	53                   	push   ebx
c001bd63:	83 ec 14             	sub    esp,0x14
c001bd66:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bd6a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001bd6e:	8b 10                	mov    edx,DWORD PTR [eax]
c001bd70:	50                   	push   eax
c001bd71:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001bd74:	83 c4 0c             	add    esp,0xc
c001bd77:	52                   	push   edx
c001bd78:	50                   	push   eax
c001bd79:	53                   	push   ebx
c001bd7a:	e8 bd e2 fe ff       	call   c000a03c <KeSecondsToDatetime(unsigned long long)>
c001bd7f:	89 d8                	mov    eax,ebx
c001bd81:	83 c4 14             	add    esp,0x14
c001bd84:	5b                   	pop    ebx
c001bd85:	c2 04 00             	ret    0x4

c001bd88 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c001bd88:	56                   	push   esi
c001bd89:	53                   	push   ebx
c001bd8a:	83 ec 14             	sub    esp,0x14
c001bd8d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001bd91:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bd93:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c001bd96:	8d 44 24 08          	lea    eax,[esp+0x8]
c001bd9a:	52                   	push   edx
c001bd9b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bd9f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bda3:	50                   	push   eax
c001bda4:	e8 93 e2 fe ff       	call   c000a03c <KeSecondsToDatetime(unsigned long long)>
c001bda9:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c001bdad:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001bdb1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001bdb5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001bdb9:	89 f0                	mov    eax,esi
c001bdbb:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001bdbf:	83 c4 20             	add    esp,0x20
c001bdc2:	5b                   	pop    ebx
c001bdc3:	5e                   	pop    esi
c001bdc4:	ff e0                	jmp    eax

c001bdc6 <RTC::~RTC()>:
c001bdc6:	83 ec 0c             	sub    esp,0xc
c001bdc9:	ba 18 cc 02 c0       	mov    edx,0xc002cc18
c001bdce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bdd2:	89 10                	mov    DWORD PTR [eax],edx
c001bdd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bdd8:	83 ec 0c             	sub    esp,0xc
c001bddb:	50                   	push   eax
c001bddc:	e8 33 dd fe ff       	call   c0009b14 <Clock::~Clock()>
c001bde1:	83 c4 10             	add    esp,0x10
c001bde4:	90                   	nop
c001bde5:	83 c4 0c             	add    esp,0xc
c001bde8:	c3                   	ret    
c001bde9:	90                   	nop

c001bdea <RTC::~RTC()>:
c001bdea:	83 ec 0c             	sub    esp,0xc
c001bded:	83 ec 0c             	sub    esp,0xc
c001bdf0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bdf4:	e8 cd ff ff ff       	call   c001bdc6 <RTC::~RTC()>
c001bdf9:	83 c4 10             	add    esp,0x10
c001bdfc:	83 ec 08             	sub    esp,0x8
c001bdff:	68 60 01 00 00       	push   0x160
c001be04:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001be08:	e8 ff 1e ff ff       	call   c000dd0c <operator delete(void*, unsigned long)>
c001be0d:	83 c4 10             	add    esp,0x10
c001be10:	83 c4 0c             	add    esp,0xc
c001be13:	c3                   	ret    

c001be14 <RTC::get_update_in_progress_flag()>:
c001be14:	83 ec 18             	sub    esp,0x18
c001be17:	6a 0a                	push   0xa
c001be19:	e8 91 d9 ff ff       	call   c00197af <x86ReadCMOS(unsigned char)>
c001be1e:	83 c4 1c             	add    esp,0x1c
c001be21:	0f b6 c0             	movzx  eax,al
c001be24:	c1 e8 07             	shr    eax,0x7
c001be27:	c3                   	ret    

c001be28 <RTC::completeRTCRefresh()>:
c001be28:	55                   	push   ebp
c001be29:	57                   	push   edi
c001be2a:	56                   	push   esi
c001be2b:	53                   	push   ebx
c001be2c:	83 ec 3c             	sub    esp,0x3c
c001be2f:	8b 1d 50 5b 03 c0    	mov    ebx,DWORD PTR ds:0xc0035b50
c001be35:	83 ec 0c             	sub    esp,0xc
c001be38:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001be3c:	e8 d3 ff ff ff       	call   c001be14 <RTC::get_update_in_progress_flag()>
c001be41:	83 c4 10             	add    esp,0x10
c001be44:	84 c0                	test   al,al
c001be46:	74 0e                	je     c001be56 <RTC::completeRTCRefresh()+0x2e>
c001be48:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c001be4e:	3b 05 50 5b 03 c0    	cmp    eax,DWORD PTR ds:0xc0035b50
c001be54:	73 df                	jae    c001be35 <RTC::completeRTCRefresh()+0xd>
c001be56:	83 ec 0c             	sub    esp,0xc
c001be59:	6a 00                	push   0x0
c001be5b:	e8 4f d9 ff ff       	call   c00197af <x86ReadCMOS(unsigned char)>
c001be60:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c001be67:	89 c7                	mov    edi,eax
c001be69:	e8 41 d9 ff ff       	call   c00197af <x86ReadCMOS(unsigned char)>
c001be6e:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001be75:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c001be79:	e8 31 d9 ff ff       	call   c00197af <x86ReadCMOS(unsigned char)>
c001be7e:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001be85:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c001be89:	e8 21 d9 ff ff       	call   c00197af <x86ReadCMOS(unsigned char)>
c001be8e:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001be95:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c001be99:	e8 11 d9 ff ff       	call   c00197af <x86ReadCMOS(unsigned char)>
c001be9e:	c7 04 24 09 00 00 00 	mov    DWORD PTR [esp],0x9
c001bea5:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001bea9:	e8 01 d9 ff ff       	call   c00197af <x86ReadCMOS(unsigned char)>
c001beae:	0f b6 c0             	movzx  eax,al
c001beb1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001beb5:	83 c4 10             	add    esp,0x10
c001beb8:	8b 1d 50 5b 03 c0    	mov    ebx,DWORD PTR ds:0xc0035b50
c001bebe:	83 ec 0c             	sub    esp,0xc
c001bec1:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001bec5:	e8 4a ff ff ff       	call   c001be14 <RTC::get_update_in_progress_flag()>
c001beca:	83 c4 10             	add    esp,0x10
c001becd:	84 c0                	test   al,al
c001becf:	74 0e                	je     c001bedf <RTC::completeRTCRefresh()+0xb7>
c001bed1:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c001bed7:	3b 05 50 5b 03 c0    	cmp    eax,DWORD PTR ds:0xc0035b50
c001bedd:	73 df                	jae    c001bebe <RTC::completeRTCRefresh()+0x96>
c001bedf:	83 ec 0c             	sub    esp,0xc
c001bee2:	6a 00                	push   0x0
c001bee4:	e8 c6 d8 ff ff       	call   c00197af <x86ReadCMOS(unsigned char)>
c001bee9:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c001bef0:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001bef4:	e8 b6 d8 ff ff       	call   c00197af <x86ReadCMOS(unsigned char)>
c001bef9:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001bf00:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001bf04:	e8 a6 d8 ff ff       	call   c00197af <x86ReadCMOS(unsigned char)>
c001bf09:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001bf10:	88 c3                	mov    bl,al
c001bf12:	e8 98 d8 ff ff       	call   c00197af <x86ReadCMOS(unsigned char)>
c001bf17:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001bf1e:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001bf22:	e8 88 d8 ff ff       	call   c00197af <x86ReadCMOS(unsigned char)>
c001bf27:	c7 04 24 09 00 00 00 	mov    DWORD PTR [esp],0x9
c001bf2e:	89 c6                	mov    esi,eax
c001bf30:	e8 7a d8 ff ff       	call   c00197af <x86ReadCMOS(unsigned char)>
c001bf35:	89 f9                	mov    ecx,edi
c001bf37:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001bf3b:	83 c4 10             	add    esp,0x10
c001bf3e:	0f b6 e8             	movzx  ebp,al
c001bf41:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001bf46:	38 4c 24 08          	cmp    BYTE PTR [esp+0x8],cl
c001bf4a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001bf4e:	74 27                	je     c001bf77 <RTC::completeRTCRefresh()+0x14f>
c001bf50:	89 6c 24 24          	mov    DWORD PTR [esp+0x24],ebp
c001bf54:	89 f0                	mov    eax,esi
c001bf56:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001bf5a:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c001bf5e:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001bf62:	88 5c 24 1c          	mov    BYTE PTR [esp+0x1c],bl
c001bf66:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c001bf6a:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001bf6e:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001bf72:	e9 41 ff ff ff       	jmp    c001beb8 <RTC::completeRTCRefresh()+0x90>
c001bf77:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001bf7c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001bf80:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001bf84:	3a 44 24 18          	cmp    al,BYTE PTR [esp+0x18]
c001bf88:	75 c6                	jne    c001bf50 <RTC::completeRTCRefresh()+0x128>
c001bf8a:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001bf8f:	89 f1                	mov    ecx,esi
c001bf91:	0f b6 fb             	movzx  edi,bl
c001bf94:	3a 5c 24 1c          	cmp    bl,BYTE PTR [esp+0x1c]
c001bf98:	0f b6 c9             	movzx  ecx,cl
c001bf9b:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c001bf9f:	89 f1                	mov    ecx,esi
c001bfa1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001bfa5:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001bfa9:	0f 94 c2             	sete   dl
c001bfac:	3a 44 24 22          	cmp    al,BYTE PTR [esp+0x22]
c001bfb0:	0f 94 c0             	sete   al
c001bfb3:	21 d0                	and    eax,edx
c001bfb5:	31 d2                	xor    edx,edx
c001bfb7:	3a 4c 24 23          	cmp    cl,BYTE PTR [esp+0x23]
c001bfbb:	0f 94 c2             	sete   dl
c001bfbe:	85 c2                	test   edx,eax
c001bfc0:	74 8e                	je     c001bf50 <RTC::completeRTCRefresh()+0x128>
c001bfc2:	39 6c 24 24          	cmp    DWORD PTR [esp+0x24],ebp
c001bfc6:	75 88                	jne    c001bf50 <RTC::completeRTCRefresh()+0x128>
c001bfc8:	83 ec 0c             	sub    esp,0xc
c001bfcb:	6a 0b                	push   0xb
c001bfcd:	e8 dd d7 ff ff       	call   c00197af <x86ReadCMOS(unsigned char)>
c001bfd2:	83 c4 10             	add    esp,0x10
c001bfd5:	a8 04                	test   al,0x4
c001bfd7:	75 7a                	jne    c001c053 <RTC::completeRTCRefresh()+0x22b>
c001bfd9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001bfdd:	c1 ef 04             	shr    edi,0x4
c001bfe0:	83 e6 0f             	and    esi,0xf
c001bfe3:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001bfe7:	c1 ed 04             	shr    ebp,0x4
c001bfea:	6b ed 0a             	imul   ebp,ebp,0xa
c001bfed:	c1 ea 04             	shr    edx,0x4
c001bff0:	6b d2 0a             	imul   edx,edx,0xa
c001bff3:	83 e1 0f             	and    ecx,0xf
c001bff6:	01 d1                	add    ecx,edx
c001bff8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001bffc:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c001c000:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001c004:	c1 ea 04             	shr    edx,0x4
c001c007:	6b d2 0a             	imul   edx,edx,0xa
c001c00a:	83 e1 0f             	and    ecx,0xf
c001c00d:	01 d1                	add    ecx,edx
c001c00f:	89 fa                	mov    edx,edi
c001c011:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c001c015:	83 e2 07             	and    edx,0x7
c001c018:	89 d9                	mov    ecx,ebx
c001c01a:	6b d2 0a             	imul   edx,edx,0xa
c001c01d:	83 e1 0f             	and    ecx,0xf
c001c020:	83 e3 80             	and    ebx,0xffffff80
c001c023:	01 d1                	add    ecx,edx
c001c025:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001c029:	09 cb                	or     ebx,ecx
c001c02b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001c02f:	c1 ea 04             	shr    edx,0x4
c001c032:	6b d2 0a             	imul   edx,edx,0xa
c001c035:	83 e1 0f             	and    ecx,0xf
c001c038:	01 d1                	add    ecx,edx
c001c03a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c03e:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c001c042:	c1 ea 04             	shr    edx,0x4
c001c045:	6b d2 0a             	imul   edx,edx,0xa
c001c048:	01 d6                	add    esi,edx
c001c04a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c04e:	83 e2 0f             	and    edx,0xf
c001c051:	01 d5                	add    ebp,edx
c001c053:	a8 02                	test   al,0x2
c001c055:	75 15                	jne    c001c06c <RTC::completeRTCRefresh()+0x244>
c001c057:	f6 c3 80             	test   bl,0x80
c001c05a:	74 10                	je     c001c06c <RTC::completeRTCRefresh()+0x244>
c001c05c:	83 e3 7f             	and    ebx,0x7f
c001c05f:	b9 18 00 00 00       	mov    ecx,0x18
c001c064:	8d 43 0c             	lea    eax,[ebx+0xc]
c001c067:	99                   	cdq    
c001c068:	f7 f9                	idiv   ecx
c001c06a:	88 d3                	mov    bl,dl
c001c06c:	8d bd 6c 07 00 00    	lea    edi,[ebp+0x76c]
c001c072:	81 ff b1 07 00 00    	cmp    edi,0x7b1
c001c078:	77 06                	ja     c001c080 <RTC::completeRTCRefresh()+0x258>
c001c07a:	8d bd d0 07 00 00    	lea    edi,[ebp+0x7d0]
c001c080:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c085:	31 c9                	xor    ecx,ecx
c001c087:	31 d2                	xor    edx,edx
c001c089:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c001c08d:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c001c091:	89 cd                	mov    ebp,ecx
c001c093:	8a 74 24 08          	mov    dh,BYTE PTR [esp+0x8]
c001c097:	c1 e7 10             	shl    edi,0x10
c001c09a:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c001c0a0:	c1 e0 10             	shl    eax,0x10
c001c0a3:	09 c5                	or     ebp,eax
c001c0a5:	89 e9                	mov    ecx,ebp
c001c0a7:	0f b7 c2             	movzx  eax,dx
c001c0aa:	8a 6c 24 0c          	mov    ch,BYTE PTR [esp+0xc]
c001c0ae:	09 f8                	or     eax,edi
c001c0b0:	89 c2                	mov    edx,eax
c001c0b2:	50                   	push   eax
c001c0b3:	50                   	push   eax
c001c0b4:	88 d9                	mov    cl,bl
c001c0b6:	51                   	push   ecx
c001c0b7:	52                   	push   edx
c001c0b8:	e8 8f db fe ff       	call   c0009c4c <KeDatetimeToSeconds(datetime_t)>
c001c0bd:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c001c0c1:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c001c0c7:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c001c0cd:	83 c4 4c             	add    esp,0x4c
c001c0d0:	5b                   	pop    ebx
c001c0d1:	5e                   	pop    esi
c001c0d2:	5f                   	pop    edi
c001c0d3:	5d                   	pop    ebp
c001c0d4:	c3                   	ret    
c001c0d5:	90                   	nop

c001c0d6 <RTC::setTimeInDatetimeUTC(datetime_t)>:
c001c0d6:	55                   	push   ebp
c001c0d7:	57                   	push   edi
c001c0d8:	56                   	push   esi
c001c0d9:	53                   	push   ebx
c001c0da:	83 ec 34             	sub    esp,0x34
c001c0dd:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c001c0e1:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001c0e5:	6a 00                	push   0x0
c001c0e7:	6a 00                	push   0x0
c001c0e9:	e8 15 d7 ff ff       	call   c0019803 <x86WriteCMOS(unsigned char, unsigned char)>
c001c0ee:	5d                   	pop    ebp
c001c0ef:	89 fb                	mov    ebx,edi
c001c0f1:	58                   	pop    eax
c001c0f2:	6a 00                	push   0x0
c001c0f4:	6a 02                	push   0x2
c001c0f6:	e8 08 d7 ff ff       	call   c0019803 <x86WriteCMOS(unsigned char, unsigned char)>
c001c0fb:	89 f8                	mov    eax,edi
c001c0fd:	89 f9                	mov    ecx,edi
c001c0ff:	0f b6 c4             	movzx  eax,ah
c001c102:	31 d2                	xor    edx,edx
c001c104:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c108:	c1 e9 10             	shr    ecx,0x10
c001c10b:	89 f0                	mov    eax,esi
c001c10d:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001c111:	89 f0                	mov    eax,esi
c001c113:	88 4c 24 1c          	mov    BYTE PTR [esp+0x1c],cl
c001c117:	0f b6 c4             	movzx  eax,ah
c001c11a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c11e:	89 f0                	mov    eax,esi
c001c120:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c001c124:	c1 e8 10             	shr    eax,0x10
c001c127:	b9 64 00 00 00       	mov    ecx,0x64
c001c12c:	f7 f1                	div    ecx
c001c12e:	c7 04 24 0b 00 00 00 	mov    DWORD PTR [esp],0xb
c001c135:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001c139:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001c13d:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001c141:	e8 69 d6 ff ff       	call   c00197af <x86ReadCMOS(unsigned char)>
c001c146:	83 c4 10             	add    esp,0x10
c001c149:	a8 04                	test   al,0x4
c001c14b:	89 c5                	mov    ebp,eax
c001c14d:	75 6e                	jne    c001c1bd <RTC::setTimeInDatetimeUTC(datetime_t)+0xe7>
c001c14f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001c153:	31 d2                	xor    edx,edx
c001c155:	0f b6 c1             	movzx  eax,cl
c001c158:	b9 0a 00 00 00       	mov    ecx,0xa
c001c15d:	f7 f1                	div    ecx
c001c15f:	c1 e0 04             	shl    eax,0x4
c001c162:	09 d0                	or     eax,edx
c001c164:	31 d2                	xor    edx,edx
c001c166:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c16a:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001c16f:	f7 f1                	div    ecx
c001c171:	c1 e0 04             	shl    eax,0x4
c001c174:	09 d0                	or     eax,edx
c001c176:	31 d2                	xor    edx,edx
c001c178:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c17c:	0f b6 c3             	movzx  eax,bl
c001c17f:	f7 f1                	div    ecx
c001c181:	c1 e0 04             	shl    eax,0x4
c001c184:	09 d0                	or     eax,edx
c001c186:	31 d2                	xor    edx,edx
c001c188:	89 c3                	mov    ebx,eax
c001c18a:	89 f0                	mov    eax,esi
c001c18c:	0f b6 c0             	movzx  eax,al
c001c18f:	f7 f1                	div    ecx
c001c191:	c1 e0 04             	shl    eax,0x4
c001c194:	09 d0                	or     eax,edx
c001c196:	31 d2                	xor    edx,edx
c001c198:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c19c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c1a1:	f7 f1                	div    ecx
c001c1a3:	c1 e0 04             	shl    eax,0x4
c001c1a6:	09 d0                	or     eax,edx
c001c1a8:	31 d2                	xor    edx,edx
c001c1aa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c1ae:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c1b2:	f7 f1                	div    ecx
c001c1b4:	c1 e0 04             	shl    eax,0x4
c001c1b7:	09 d0                	or     eax,edx
c001c1b9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c1bd:	83 e5 02             	and    ebp,0x2
c001c1c0:	75 1e                	jne    c001c1e0 <RTC::setTimeInDatetimeUTC(datetime_t)+0x10a>
c001c1c2:	0f b6 c3             	movzx  eax,bl
c001c1c5:	83 f8 0b             	cmp    eax,0xb
c001c1c8:	76 10                	jbe    c001c1da <RTC::setTimeInDatetimeUTC(datetime_t)+0x104>
c001c1ca:	8d 53 f4             	lea    edx,[ebx-0xc]
c001c1cd:	84 d2                	test   dl,dl
c001c1cf:	88 d3                	mov    bl,dl
c001c1d1:	75 02                	jne    c001c1d5 <RTC::setTimeInDatetimeUTC(datetime_t)+0xff>
c001c1d3:	b3 0c                	mov    bl,0xc
c001c1d5:	83 cb 80             	or     ebx,0xffffff80
c001c1d8:	eb 06                	jmp    c001c1e0 <RTC::setTimeInDatetimeUTC(datetime_t)+0x10a>
c001c1da:	85 c0                	test   eax,eax
c001c1dc:	75 02                	jne    c001c1e0 <RTC::setTimeInDatetimeUTC(datetime_t)+0x10a>
c001c1de:	b3 0c                	mov    bl,0xc
c001c1e0:	50                   	push   eax
c001c1e1:	0f b6 db             	movzx  ebx,bl
c001c1e4:	50                   	push   eax
c001c1e5:	0f b6 54 24 14       	movzx  edx,BYTE PTR [esp+0x14]
c001c1ea:	52                   	push   edx
c001c1eb:	6a 00                	push   0x0
c001c1ed:	e8 11 d6 ff ff       	call   c0019803 <x86WriteCMOS(unsigned char, unsigned char)>
c001c1f2:	5a                   	pop    edx
c001c1f3:	59                   	pop    ecx
c001c1f4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c1f9:	50                   	push   eax
c001c1fa:	6a 02                	push   0x2
c001c1fc:	e8 02 d6 ff ff       	call   c0019803 <x86WriteCMOS(unsigned char, unsigned char)>
c001c201:	5e                   	pop    esi
c001c202:	5f                   	pop    edi
c001c203:	53                   	push   ebx
c001c204:	6a 04                	push   0x4
c001c206:	e8 f8 d5 ff ff       	call   c0019803 <x86WriteCMOS(unsigned char, unsigned char)>
c001c20b:	5d                   	pop    ebp
c001c20c:	58                   	pop    eax
c001c20d:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c001c212:	52                   	push   edx
c001c213:	6a 07                	push   0x7
c001c215:	e8 e9 d5 ff ff       	call   c0019803 <x86WriteCMOS(unsigned char, unsigned char)>
c001c21a:	58                   	pop    eax
c001c21b:	5a                   	pop    edx
c001c21c:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001c221:	50                   	push   eax
c001c222:	6a 08                	push   0x8
c001c224:	e8 da d5 ff ff       	call   c0019803 <x86WriteCMOS(unsigned char, unsigned char)>
c001c229:	59                   	pop    ecx
c001c22a:	5b                   	pop    ebx
c001c22b:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c001c230:	55                   	push   ebp
c001c231:	6a 09                	push   0x9
c001c233:	e8 cb d5 ff ff       	call   c0019803 <x86WriteCMOS(unsigned char, unsigned char)>
c001c238:	5e                   	pop    esi
c001c239:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001c23d:	e8 e6 fb ff ff       	call   c001be28 <RTC::completeRTCRefresh()>
c001c242:	83 c4 3c             	add    esp,0x3c
c001c245:	b0 01                	mov    al,0x1
c001c247:	5b                   	pop    ebx
c001c248:	5e                   	pop    esi
c001c249:	5f                   	pop    edi
c001c24a:	5d                   	pop    ebp
c001c24b:	c3                   	ret    

c001c24c <rtcIRQHandler(regs*, void*)>:
c001c24c:	53                   	push   ebx
c001c24d:	83 ec 14             	sub    esp,0x14
c001c250:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001c254:	6a 0c                	push   0xc
c001c256:	e8 54 d5 ff ff       	call   c00197af <x86ReadCMOS(unsigned char)>
c001c25b:	83 c4 10             	add    esp,0x10
c001c25e:	a8 80                	test   al,0x80
c001c260:	74 24                	je     c001c286 <rtcIRQHandler(regs*, void*)+0x3a>
c001c262:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c001c269:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c001c270:	66 ff 05 60 84 03 c0 	inc    WORD PTR ds:0xc0038460
c001c277:	75 0d                	jne    c001c286 <rtcIRQHandler(regs*, void*)+0x3a>
c001c279:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001c27d:	83 c4 08             	add    esp,0x8
c001c280:	5b                   	pop    ebx
c001c281:	e9 a2 fb ff ff       	jmp    c001be28 <RTC::completeRTCRefresh()>
c001c286:	83 c4 08             	add    esp,0x8
c001c289:	5b                   	pop    ebx
c001c28a:	c3                   	ret    
c001c28b:	90                   	nop

c001c28c <RTC::RTC()>:
c001c28c:	83 ec 1c             	sub    esp,0x1c
c001c28f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c293:	83 ec 08             	sub    esp,0x8
c001c296:	68 fb cb 02 c0       	push   0xc002cbfb
c001c29b:	50                   	push   eax
c001c29c:	e8 3d d8 fe ff       	call   c0009ade <Clock::Clock(char const*)>
c001c2a1:	83 c4 10             	add    esp,0x10
c001c2a4:	ba 18 cc 02 c0       	mov    edx,0xc002cc18
c001c2a9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c2ad:	89 10                	mov    DWORD PTR [eax],edx
c001c2af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c2b3:	83 ec 0c             	sub    esp,0xc
c001c2b6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c2ba:	6a 01                	push   0x1
c001c2bc:	68 4c c2 01 c0       	push   0xc001c24c
c001c2c1:	6a 08                	push   0x8
c001c2c3:	50                   	push   eax
c001c2c4:	e8 01 e1 fe ff       	call   c000a3ca <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c2c9:	83 c4 20             	add    esp,0x20
c001c2cc:	89 c2                	mov    edx,eax
c001c2ce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c2d2:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001c2d8:	fa                   	cli    
c001c2d9:	a1 30 63 03 c0       	mov    eax,ds:0xc0036330
c001c2de:	83 c0 01             	add    eax,0x1
c001c2e1:	a3 30 63 03 c0       	mov    ds:0xc0036330,eax
c001c2e6:	83 ec 0c             	sub    esp,0xc
c001c2e9:	6a 0b                	push   0xb
c001c2eb:	e8 bf d4 ff ff       	call   c00197af <x86ReadCMOS(unsigned char)>
c001c2f0:	83 c4 10             	add    esp,0x10
c001c2f3:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001c2f7:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001c2fb:	83 c8 10             	or     eax,0x10
c001c2fe:	0f b6 c0             	movzx  eax,al
c001c301:	83 ec 08             	sub    esp,0x8
c001c304:	50                   	push   eax
c001c305:	6a 0b                	push   0xb
c001c307:	e8 f7 d4 ff ff       	call   c0019803 <x86WriteCMOS(unsigned char, unsigned char)>
c001c30c:	83 c4 10             	add    esp,0x10
c001c30f:	83 ec 0c             	sub    esp,0xc
c001c312:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c316:	e8 0d fb ff ff       	call   c001be28 <RTC::completeRTCRefresh()>
c001c31b:	83 c4 10             	add    esp,0x10
c001c31e:	f0 83 2d 30 63 03 c0 01 	lock sub DWORD PTR ds:0xc0036330,0x1
c001c326:	a1 30 63 03 c0       	mov    eax,ds:0xc0036330
c001c32b:	85 c0                	test   eax,eax
c001c32d:	75 01                	jne    c001c330 <RTC::RTC()+0xa4>
c001c32f:	fb                   	sti    
c001c330:	90                   	nop
c001c331:	83 c4 1c             	add    esp,0x1c
c001c334:	c3                   	ret    
c001c335:	66 90                	xchg   ax,ax
c001c337:	90                   	nop

c001c338 <HalConsoleScroll(int, int)>:
c001c338:	83 ec 10             	sub    esp,0x10
c001c33b:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c001c343:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c001c34b:	90                   	nop
c001c34c:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c001c351:	0f 8f e1 00 00 00    	jg     c001c438 <HalConsoleScroll(int, int)+0x100>
c001c357:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001c35f:	90                   	nop
c001c360:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c001c368:	0f 8f be 00 00 00    	jg     c001c42c <HalConsoleScroll(int, int)+0xf4>
c001c36e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c372:	89 d0                	mov    eax,edx
c001c374:	c1 e0 02             	shl    eax,0x2
c001c377:	01 d0                	add    eax,edx
c001c379:	c1 e0 05             	shl    eax,0x5
c001c37c:	89 c2                	mov    edx,eax
c001c37e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c382:	01 d0                	add    eax,edx
c001c384:	89 c2                	mov    edx,eax
c001c386:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c38a:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001c38d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c391:	89 d0                	mov    eax,edx
c001c393:	c1 e0 02             	shl    eax,0x2
c001c396:	01 d0                	add    eax,edx
c001c398:	c1 e0 05             	shl    eax,0x5
c001c39b:	89 c2                	mov    edx,eax
c001c39d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c3a1:	01 d0                	add    eax,edx
c001c3a3:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c001c3a9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c3ad:	01 d0                	add    eax,edx
c001c3af:	8a 11                	mov    dl,BYTE PTR [ecx]
c001c3b1:	88 10                	mov    BYTE PTR [eax],dl
c001c3b3:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c001c3b8:	75 66                	jne    c001c420 <HalConsoleScroll(int, int)+0xe8>
c001c3ba:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c3be:	83 e0 01             	and    eax,0x1
c001c3c1:	74 39                	je     c001c3fc <HalConsoleScroll(int, int)+0xc4>
c001c3c3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c3c7:	83 e0 0f             	and    eax,0xf
c001c3ca:	88 c2                	mov    dl,al
c001c3cc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c3d0:	c1 e0 04             	shl    eax,0x4
c001c3d3:	09 d0                	or     eax,edx
c001c3d5:	88 c1                	mov    cl,al
c001c3d7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c3db:	89 d0                	mov    eax,edx
c001c3dd:	c1 e0 02             	shl    eax,0x2
c001c3e0:	01 d0                	add    eax,edx
c001c3e2:	c1 e0 05             	shl    eax,0x5
c001c3e5:	89 c2                	mov    edx,eax
c001c3e7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c3eb:	01 d0                	add    eax,edx
c001c3ed:	89 c2                	mov    edx,eax
c001c3ef:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c3f3:	01 d0                	add    eax,edx
c001c3f5:	88 ca                	mov    dl,cl
c001c3f7:	88 10                	mov    BYTE PTR [eax],dl
c001c3f9:	eb 25                	jmp    c001c420 <HalConsoleScroll(int, int)+0xe8>
c001c3fb:	90                   	nop
c001c3fc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c400:	89 d0                	mov    eax,edx
c001c402:	c1 e0 02             	shl    eax,0x2
c001c405:	01 d0                	add    eax,edx
c001c407:	c1 e0 05             	shl    eax,0x5
c001c40a:	89 c2                	mov    edx,eax
c001c40c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c410:	01 d0                	add    eax,edx
c001c412:	89 c2                	mov    edx,eax
c001c414:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c418:	01 d0                	add    eax,edx
c001c41a:	c6 00 20             	mov    BYTE PTR [eax],0x20
c001c41d:	8d 76 00             	lea    esi,[esi+0x0]
c001c420:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c001c425:	e9 36 ff ff ff       	jmp    c001c360 <HalConsoleScroll(int, int)+0x28>
c001c42a:	66 90                	xchg   ax,ax
c001c42c:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001c431:	e9 16 ff ff ff       	jmp    c001c34c <HalConsoleScroll(int, int)+0x14>
c001c436:	66 90                	xchg   ax,ax
c001c438:	90                   	nop
c001c439:	83 c4 10             	add    esp,0x10
c001c43c:	c3                   	ret    
c001c43d:	8d 76 00             	lea    esi,[esi+0x0]

c001c440 <HalConsoleWriteCharacter(char, int, int, int, int)>:
c001c440:	83 ec 14             	sub    esp,0x14
c001c443:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c447:	88 04 24             	mov    BYTE PTR [esp],al
c001c44a:	8a 04 24             	mov    al,BYTE PTR [esp]
c001c44d:	0f b6 c0             	movzx  eax,al
c001c450:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c454:	89 d1                	mov    ecx,edx
c001c456:	83 e1 0f             	and    ecx,0xf
c001c459:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001c45d:	c1 e2 04             	shl    edx,0x4
c001c460:	0f b6 d2             	movzx  edx,dl
c001c463:	09 ca                	or     edx,ecx
c001c465:	c1 e2 08             	shl    edx,0x8
c001c468:	09 d0                	or     eax,edx
c001c46a:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c001c46f:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c001c477:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001c47b:	89 d0                	mov    eax,edx
c001c47d:	c1 e0 02             	shl    eax,0x2
c001c480:	01 d0                	add    eax,edx
c001c482:	c1 e0 04             	shl    eax,0x4
c001c485:	89 c2                	mov    edx,eax
c001c487:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c48b:	01 d0                	add    eax,edx
c001c48d:	d1 e0                	shl    eax,1
c001c48f:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c001c493:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c497:	66 8b 54 24 12       	mov    dx,WORD PTR [esp+0x12]
c001c49c:	66 89 10             	mov    WORD PTR [eax],dx
c001c49f:	90                   	nop
c001c4a0:	83 c4 14             	add    esp,0x14
c001c4a3:	c3                   	ret    

c001c4a4 <HalConsoleCursorUpdate(int, int)>:
c001c4a4:	83 ec 20             	sub    esp,0x20
c001c4a7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c4ab:	89 c2                	mov    edx,eax
c001c4ad:	c1 e2 02             	shl    edx,0x2
c001c4b0:	01 d0                	add    eax,edx
c001c4b2:	c1 e0 04             	shl    eax,0x4
c001c4b5:	89 c2                	mov    edx,eax
c001c4b7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c4bb:	01 d0                	add    eax,edx
c001c4bd:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c001c4c2:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c001c4c9:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c001c4ce:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001c4d2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c4d6:	ee                   	out    dx,al
c001c4d7:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001c4dc:	0f b6 c0             	movzx  eax,al
c001c4df:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c001c4e6:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c001c4ea:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c001c4ee:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c4f2:	ee                   	out    dx,al
c001c4f3:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c001c4fa:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c001c4ff:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c001c503:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001c507:	ee                   	out    dx,al
c001c508:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c001c50d:	c1 e8 08             	shr    eax,0x8
c001c510:	0f b6 c0             	movzx  eax,al
c001c513:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c001c51a:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001c51e:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c001c522:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c526:	ee                   	out    dx,al
c001c527:	90                   	nop
c001c528:	83 c4 20             	add    esp,0x20
c001c52b:	c3                   	ret    

c001c52c <ACPIDriver::initialise()>:
c001c52c:	90                   	nop
c001c52d:	c3                   	ret    
c001c52e:	66 90                	xchg   ax,ax

c001c530 <ACPIDriver::detect()>:
c001c530:	90                   	nop
c001c531:	c3                   	ret    
c001c532:	66 90                	xchg   ax,ax

c001c534 <ACPIDriver::deinitialise()>:
c001c534:	90                   	nop
c001c535:	c3                   	ret    
c001c536:	66 90                	xchg   ax,ax

c001c538 <ACPIDriver::setPowerState(DevicePowerState)>:
c001c538:	90                   	nop
c001c539:	c3                   	ret    
c001c53a:	66 90                	xchg   ax,ax

c001c53c <ACPIDriver::getHumanReadableName()>:
c001c53c:	b8 b7 a4 02 c0       	mov    eax,0xc002a4b7
c001c541:	c3                   	ret    
c001c542:	66 90                	xchg   ax,ax

c001c544 <ISADriver::initialise()>:
c001c544:	90                   	nop
c001c545:	c3                   	ret    
c001c546:	66 90                	xchg   ax,ax

c001c548 <ISADriver::detect()>:
c001c548:	90                   	nop
c001c549:	c3                   	ret    
c001c54a:	66 90                	xchg   ax,ax

c001c54c <ISADriver::deinitialise()>:
c001c54c:	90                   	nop
c001c54d:	c3                   	ret    
c001c54e:	66 90                	xchg   ax,ax

c001c550 <ISADriver::setPowerState(DevicePowerState)>:
c001c550:	90                   	nop
c001c551:	c3                   	ret    
c001c552:	66 90                	xchg   ax,ax

c001c554 <ISADriver::getHumanReadableName()>:
c001c554:	b8 d2 a4 02 c0       	mov    eax,0xc002a4d2
c001c559:	c3                   	ret    
c001c55a:	66 90                	xchg   ax,ax

c001c55c <ISAPnPDriver::detect()>:
c001c55c:	90                   	nop
c001c55d:	c3                   	ret    
c001c55e:	66 90                	xchg   ax,ax

c001c560 <ISAPnPDriver::deinitialise()>:
c001c560:	90                   	nop
c001c561:	c3                   	ret    
c001c562:	66 90                	xchg   ax,ax

c001c564 <ISAPnPDriver::setPowerState(DevicePowerState)>:
c001c564:	90                   	nop
c001c565:	c3                   	ret    
c001c566:	66 90                	xchg   ax,ax

c001c568 <ISAPnPDriver::getHumanReadableName()>:
c001c568:	b8 bc a4 02 c0       	mov    eax,0xc002a4bc
c001c56d:	c3                   	ret    
c001c56e:	66 90                	xchg   ax,ax

c001c570 <ISAPnPDriver::sendInitiationKey()>:
c001c570:	57                   	push   edi
c001c571:	56                   	push   esi
c001c572:	53                   	push   ebx
c001c573:	83 ec 40             	sub    esp,0x40
c001c576:	8d 44 24 0d          	lea    eax,[esp+0xd]
c001c57a:	ba c0 cc 02 c0       	mov    edx,0xc002ccc0
c001c57f:	bb 20 00 00 00       	mov    ebx,0x20
c001c584:	89 c1                	mov    ecx,eax
c001c586:	83 e1 01             	and    ecx,0x1
c001c589:	74 0d                	je     c001c598 <ISAPnPDriver::sendInitiationKey()+0x28>
c001c58b:	8a 0a                	mov    cl,BYTE PTR [edx]
c001c58d:	88 08                	mov    BYTE PTR [eax],cl
c001c58f:	8d 40 01             	lea    eax,[eax+0x1]
c001c592:	8d 52 01             	lea    edx,[edx+0x1]
c001c595:	83 eb 01             	sub    ebx,0x1
c001c598:	89 c1                	mov    ecx,eax
c001c59a:	83 e1 02             	and    ecx,0x2
c001c59d:	74 11                	je     c001c5b0 <ISAPnPDriver::sendInitiationKey()+0x40>
c001c59f:	66 8b 0a             	mov    cx,WORD PTR [edx]
c001c5a2:	66 89 08             	mov    WORD PTR [eax],cx
c001c5a5:	8d 40 02             	lea    eax,[eax+0x2]
c001c5a8:	8d 52 02             	lea    edx,[edx+0x2]
c001c5ab:	83 eb 02             	sub    ebx,0x2
c001c5ae:	66 90                	xchg   ax,ax
c001c5b0:	89 df                	mov    edi,ebx
c001c5b2:	83 e7 fc             	and    edi,0xfffffffc
c001c5b5:	b9 00 00 00 00       	mov    ecx,0x0
c001c5ba:	66 90                	xchg   ax,ax
c001c5bc:	8b 34 0a             	mov    esi,DWORD PTR [edx+ecx*1]
c001c5bf:	89 34 08             	mov    DWORD PTR [eax+ecx*1],esi
c001c5c2:	83 c1 04             	add    ecx,0x4
c001c5c5:	39 f9                	cmp    ecx,edi
c001c5c7:	72 f3                	jb     c001c5bc <ISAPnPDriver::sendInitiationKey()+0x4c>
c001c5c9:	01 c8                	add    eax,ecx
c001c5cb:	01 ca                	add    edx,ecx
c001c5cd:	b9 00 00 00 00       	mov    ecx,0x0
c001c5d2:	89 de                	mov    esi,ebx
c001c5d4:	83 e6 02             	and    esi,0x2
c001c5d7:	74 0b                	je     c001c5e4 <ISAPnPDriver::sendInitiationKey()+0x74>
c001c5d9:	66 8b 34 0a          	mov    si,WORD PTR [edx+ecx*1]
c001c5dd:	66 89 34 08          	mov    WORD PTR [eax+ecx*1],si
c001c5e1:	83 c1 02             	add    ecx,0x2
c001c5e4:	83 e3 01             	and    ebx,0x1
c001c5e7:	74 07                	je     c001c5f0 <ISAPnPDriver::sendInitiationKey()+0x80>
c001c5e9:	8a 14 0a             	mov    dl,BYTE PTR [edx+ecx*1]
c001c5ec:	88 14 08             	mov    BYTE PTR [eax+ecx*1],dl
c001c5ef:	90                   	nop
c001c5f0:	fa                   	cli    
c001c5f1:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c001c5f9:	8d 76 00             	lea    esi,[esi+0x0]
c001c5fc:	83 7c 24 3c 01       	cmp    DWORD PTR [esp+0x3c],0x1
c001c601:	0f 8f 8d 00 00 00    	jg     c001c694 <ISAPnPDriver::sendInitiationKey()+0x124>
c001c607:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001c60b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c60e:	0f b7 c0             	movzx  eax,ax
c001c611:	66 89 44 24 32       	mov    WORD PTR [esp+0x32],ax
c001c616:	c6 44 24 31 00       	mov    BYTE PTR [esp+0x31],0x0
c001c61b:	8a 44 24 31          	mov    al,BYTE PTR [esp+0x31]
c001c61f:	66 8b 54 24 32       	mov    dx,WORD PTR [esp+0x32]
c001c624:	ee                   	out    dx,al
c001c625:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001c629:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c62c:	0f b7 c0             	movzx  eax,ax
c001c62f:	66 89 44 24 36       	mov    WORD PTR [esp+0x36],ax
c001c634:	c6 44 24 35 00       	mov    BYTE PTR [esp+0x35],0x0
c001c639:	8a 44 24 35          	mov    al,BYTE PTR [esp+0x35]
c001c63d:	66 8b 54 24 36       	mov    dx,WORD PTR [esp+0x36]
c001c642:	ee                   	out    dx,al
c001c643:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c001c64b:	90                   	nop
c001c64c:	83 7c 24 38 1f       	cmp    DWORD PTR [esp+0x38],0x1f
c001c651:	7f 35                	jg     c001c688 <ISAPnPDriver::sendInitiationKey()+0x118>
c001c653:	8d 54 24 0d          	lea    edx,[esp+0xd]
c001c657:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c65b:	01 d0                	add    eax,edx
c001c65d:	8a 00                	mov    al,BYTE PTR [eax]
c001c65f:	0f b6 d0             	movzx  edx,al
c001c662:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001c666:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c669:	0f b7 c0             	movzx  eax,ax
c001c66c:	66 89 44 24 2e       	mov    WORD PTR [esp+0x2e],ax
c001c671:	88 54 24 2d          	mov    BYTE PTR [esp+0x2d],dl
c001c675:	8a 44 24 2d          	mov    al,BYTE PTR [esp+0x2d]
c001c679:	66 8b 54 24 2e       	mov    dx,WORD PTR [esp+0x2e]
c001c67e:	ee                   	out    dx,al
c001c67f:	83 44 24 38 01       	add    DWORD PTR [esp+0x38],0x1
c001c684:	eb c6                	jmp    c001c64c <ISAPnPDriver::sendInitiationKey()+0xdc>
c001c686:	66 90                	xchg   ax,ax
c001c688:	83 44 24 3c 01       	add    DWORD PTR [esp+0x3c],0x1
c001c68d:	e9 6a ff ff ff       	jmp    c001c5fc <ISAPnPDriver::sendInitiationKey()+0x8c>
c001c692:	66 90                	xchg   ax,ax
c001c694:	fb                   	sti    
c001c695:	90                   	nop
c001c696:	83 c4 40             	add    esp,0x40
c001c699:	5b                   	pop    ebx
c001c69a:	5e                   	pop    esi
c001c69b:	5f                   	pop    edi
c001c69c:	c3                   	ret    
c001c69d:	90                   	nop
c001c69e:	66 90                	xchg   ax,ax

c001c6a0 <ISAPnPDriver::isolateCard()>:
c001c6a0:	53                   	push   ebx
c001c6a1:	83 ec 38             	sub    esp,0x38
c001c6a4:	83 ec 0c             	sub    esp,0xc
c001c6a7:	68 e0 cc 02 c0       	push   0xc002cce0
c001c6ac:	e8 b5 a8 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001c6b1:	83 c4 10             	add    esp,0x10
c001c6b4:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001c6bc:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001c6c4:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c001c6cc:	83 7c 24 24 3f       	cmp    DWORD PTR [esp+0x24],0x3f
c001c6d1:	0f 8f a5 00 00 00    	jg     c001c77c <ISAPnPDriver::isolateCard()+0xdc>
c001c6d7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001c6db:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001c6de:	0f b7 c0             	movzx  eax,ax
c001c6e1:	66 89 44 24 10       	mov    WORD PTR [esp+0x10],ax
c001c6e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6ea:	89 c2                	mov    edx,eax
c001c6ec:	ec                   	in     al,dx
c001c6ed:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001c6f1:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001c6f5:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001c6f9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001c6fd:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001c700:	0f b7 c0             	movzx  eax,ax
c001c703:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c001c708:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c70c:	89 c2                	mov    edx,eax
c001c70e:	ec                   	in     al,dx
c001c70f:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c001c713:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c001c717:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001c71b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c71f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001c723:	0f a4 c2 01          	shld   edx,eax,0x1
c001c727:	01 c0                	add    eax,eax
c001c729:	89 c1                	mov    ecx,eax
c001c72b:	89 d3                	mov    ebx,edx
c001c72d:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c001c731:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c001c735:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001c73a:	83 f8 55             	cmp    eax,0x55
c001c73d:	75 0d                	jne    c001c74c <ISAPnPDriver::isolateCard()+0xac>
c001c73f:	0f b6 44 24 1a       	movzx  eax,BYTE PTR [esp+0x1a]
c001c744:	3d aa 00 00 00       	cmp    eax,0xaa
c001c749:	74 19                	je     c001c764 <ISAPnPDriver::isolateCard()+0xc4>
c001c74b:	90                   	nop
c001c74c:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001c751:	3d aa 00 00 00       	cmp    eax,0xaa
c001c756:	75 18                	jne    c001c770 <ISAPnPDriver::isolateCard()+0xd0>
c001c758:	0f b6 44 24 1a       	movzx  eax,BYTE PTR [esp+0x1a]
c001c75d:	83 f8 55             	cmp    eax,0x55
c001c760:	75 0e                	jne    c001c770 <ISAPnPDriver::isolateCard()+0xd0>
c001c762:	66 90                	xchg   ax,ax
c001c764:	83 4c 24 28 01       	or     DWORD PTR [esp+0x28],0x1
c001c769:	83 4c 24 2c 00       	or     DWORD PTR [esp+0x2c],0x0
c001c76e:	66 90                	xchg   ax,ax
c001c770:	83 44 24 24 01       	add    DWORD PTR [esp+0x24],0x1
c001c775:	e9 52 ff ff ff       	jmp    c001c6cc <ISAPnPDriver::isolateCard()+0x2c>
c001c77a:	66 90                	xchg   ax,ax
c001c77c:	c6 44 24 19 00       	mov    BYTE PTR [esp+0x19],0x0
c001c781:	c6 44 24 23 00       	mov    BYTE PTR [esp+0x23],0x0
c001c786:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001c78e:	66 90                	xchg   ax,ax
c001c790:	83 7c 24 1c 07       	cmp    DWORD PTR [esp+0x1c],0x7
c001c795:	0f 8f 95 00 00 00    	jg     c001c830 <ISAPnPDriver::isolateCard()+0x190>
c001c79b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001c79f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001c7a2:	0f b7 c0             	movzx  eax,ax
c001c7a5:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c001c7aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c7ae:	89 c2                	mov    edx,eax
c001c7b0:	ec                   	in     al,dx
c001c7b1:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c001c7b5:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c001c7b9:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001c7bd:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001c7c1:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001c7c4:	0f b7 c0             	movzx  eax,ax
c001c7c7:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c001c7cc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c7d0:	89 c2                	mov    edx,eax
c001c7d2:	ec                   	in     al,dx
c001c7d3:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001c7d7:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c001c7db:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c001c7df:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c001c7e3:	d1 e0                	shl    eax,1
c001c7e5:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c001c7e9:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c001c7ee:	83 f8 55             	cmp    eax,0x55
c001c7f1:	75 0d                	jne    c001c800 <ISAPnPDriver::isolateCard()+0x160>
c001c7f3:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c001c7f8:	3d aa 00 00 00       	cmp    eax,0xaa
c001c7fd:	74 19                	je     c001c818 <ISAPnPDriver::isolateCard()+0x178>
c001c7ff:	90                   	nop
c001c800:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c001c805:	3d aa 00 00 00       	cmp    eax,0xaa
c001c80a:	75 18                	jne    c001c824 <ISAPnPDriver::isolateCard()+0x184>
c001c80c:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c001c811:	83 f8 55             	cmp    eax,0x55
c001c814:	75 0e                	jne    c001c824 <ISAPnPDriver::isolateCard()+0x184>
c001c816:	66 90                	xchg   ax,ax
c001c818:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c001c81c:	83 c8 01             	or     eax,0x1
c001c81f:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c001c823:	90                   	nop
c001c824:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c001c829:	e9 62 ff ff ff       	jmp    c001c790 <ISAPnPDriver::isolateCard()+0xf0>
c001c82e:	66 90                	xchg   ax,ax
c001c830:	83 ec 0c             	sub    esp,0xc
c001c833:	68 80 cd 02 c0       	push   0xc002cd80
c001c838:	e8 29 a7 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001c83d:	83 c4 10             	add    esp,0x10
c001c840:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c844:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001c848:	83 c4 38             	add    esp,0x38
c001c84b:	5b                   	pop    ebx
c001c84c:	c3                   	ret    
c001c84d:	90                   	nop
c001c84e:	66 90                	xchg   ax,ax

c001c850 <ISAPnPDriver::writeRegister(unsigned char, unsigned char)>:
c001c850:	83 ec 18             	sub    esp,0x18
c001c853:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c857:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001c85b:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001c85f:	88 d0                	mov    al,dl
c001c861:	88 04 24             	mov    BYTE PTR [esp],al
c001c864:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c001c869:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c86d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c870:	0f b7 c0             	movzx  eax,ax
c001c873:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c001c878:	88 54 24 11          	mov    BYTE PTR [esp+0x11],dl
c001c87c:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001c880:	66 8b 54 24 12       	mov    dx,WORD PTR [esp+0x12]
c001c885:	ee                   	out    dx,al
c001c886:	0f b6 14 24          	movzx  edx,BYTE PTR [esp]
c001c88a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c88e:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c001c892:	0f b7 c0             	movzx  eax,ax
c001c895:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c001c89a:	88 54 24 15          	mov    BYTE PTR [esp+0x15],dl
c001c89e:	8a 44 24 15          	mov    al,BYTE PTR [esp+0x15]
c001c8a2:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c001c8a7:	ee                   	out    dx,al
c001c8a8:	90                   	nop
c001c8a9:	83 c4 18             	add    esp,0x18
c001c8ac:	c3                   	ret    
c001c8ad:	90                   	nop
c001c8ae:	66 90                	xchg   ax,ax

c001c8b0 <ISAPnPDriver::changeReadPortBase()>:
c001c8b0:	83 ec 1c             	sub    esp,0x1c
c001c8b3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c8b7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001c8ba:	0f b7 c0             	movzx  eax,ax
c001c8bd:	83 c0 04             	add    eax,0x4
c001c8c0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c8c4:	81 7c 24 0c f2 03 00 00 	cmp    DWORD PTR [esp+0xc],0x3f2
c001c8cc:	7f 76                	jg     c001c944 <ISAPnPDriver::changeReadPortBase()+0x94>
c001c8ce:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c8d2:	0f b7 c0             	movzx  eax,ax
c001c8d5:	83 ec 08             	sub    esp,0x8
c001c8d8:	6a 01                	push   0x1
c001c8da:	50                   	push   eax
c001c8db:	e8 fd aa fe ff       	call   c00073dd <KeIsPortInUse(unsigned short, int)>
c001c8e0:	83 c4 10             	add    esp,0x10
c001c8e3:	83 f0 01             	xor    eax,0x1
c001c8e6:	0f b6 c0             	movzx  eax,al
c001c8e9:	85 c0                	test   eax,eax
c001c8eb:	74 4f                	je     c001c93c <ISAPnPDriver::changeReadPortBase()+0x8c>
c001c8ed:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c8f1:	89 c2                	mov    edx,eax
c001c8f3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c8f7:	66 89 50 0c          	mov    WORD PTR [eax+0xc],dx
c001c8fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c8ff:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001c902:	0f b7 c0             	movzx  eax,ax
c001c905:	83 ec 08             	sub    esp,0x8
c001c908:	50                   	push   eax
c001c909:	68 a4 cd 02 c0       	push   0xc002cda4
c001c90e:	e8 53 a6 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001c913:	83 c4 10             	add    esp,0x10
c001c916:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c91a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001c91d:	0f b7 c0             	movzx  eax,ax
c001c920:	c1 f8 03             	sar    eax,0x3
c001c923:	0f b6 c0             	movzx  eax,al
c001c926:	83 ec 04             	sub    esp,0x4
c001c929:	50                   	push   eax
c001c92a:	6a 00                	push   0x0
c001c92c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c930:	e8 1b ff ff ff       	call   c001c850 <ISAPnPDriver::writeRegister(unsigned char, unsigned char)>
c001c935:	83 c4 10             	add    esp,0x10
c001c938:	eb 0a                	jmp    c001c944 <ISAPnPDriver::changeReadPortBase()+0x94>
c001c93a:	66 90                	xchg   ax,ax
c001c93c:	83 44 24 0c 04       	add    DWORD PTR [esp+0xc],0x4
c001c941:	eb 81                	jmp    c001c8c4 <ISAPnPDriver::changeReadPortBase()+0x14>
c001c943:	90                   	nop
c001c944:	83 c4 1c             	add    esp,0x1c
c001c947:	c3                   	ret    

c001c948 <ISAPnPDriver::resetAllCards()>:
c001c948:	6a 05                	push   0x5
c001c94a:	6a 02                	push   0x2
c001c94c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001c950:	e8 fb fe ff ff       	call   c001c850 <ISAPnPDriver::writeRegister(unsigned char, unsigned char)>
c001c955:	83 c4 0c             	add    esp,0xc
c001c958:	90                   	nop
c001c959:	c3                   	ret    
c001c95a:	66 90                	xchg   ax,ax

c001c95c <ISAPnPDriver::readRegister(unsigned char)>:
c001c95c:	83 ec 14             	sub    esp,0x14
c001c95f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c963:	88 04 24             	mov    BYTE PTR [esp],al
c001c966:	0f b6 14 24          	movzx  edx,BYTE PTR [esp]
c001c96a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c96e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c971:	0f b7 c0             	movzx  eax,ax
c001c974:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c001c979:	88 54 24 0d          	mov    BYTE PTR [esp+0xd],dl
c001c97d:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c001c981:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c001c986:	ee                   	out    dx,al
c001c987:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c98b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001c98e:	0f b7 c0             	movzx  eax,ax
c001c991:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c001c996:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c001c99b:	89 c2                	mov    edx,eax
c001c99d:	ec                   	in     al,dx
c001c99e:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001c9a2:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001c9a6:	90                   	nop
c001c9a7:	83 c4 14             	add    esp,0x14
c001c9aa:	c3                   	ret    
c001c9ab:	90                   	nop

c001c9ac <ISAPnPDriver::initialise()>:
c001c9ac:	55                   	push   ebp
c001c9ad:	57                   	push   edi
c001c9ae:	56                   	push   esi
c001c9af:	53                   	push   ebx
c001c9b0:	83 ec 2c             	sub    esp,0x2c
c001c9b3:	83 ec 0c             	sub    esp,0xc
c001c9b6:	68 84 cc 02 c0       	push   0xc002cc84
c001c9bb:	e8 a6 a5 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001c9c0:	83 c4 10             	add    esp,0x10
c001c9c3:	83 ec 0c             	sub    esp,0xc
c001c9c6:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001c9ca:	e8 79 ff ff ff       	call   c001c948 <ISAPnPDriver::resetAllCards()>
c001c9cf:	83 c4 10             	add    esp,0x10
c001c9d2:	83 ec 0c             	sub    esp,0xc
c001c9d5:	68 87 cc 02 c0       	push   0xc002cc87
c001c9da:	e8 87 a5 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001c9df:	83 c4 10             	add    esp,0x10
c001c9e2:	83 ec 0c             	sub    esp,0xc
c001c9e5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001c9e9:	e8 82 fb ff ff       	call   c001c570 <ISAPnPDriver::sendInitiationKey()>
c001c9ee:	83 c4 10             	add    esp,0x10
c001c9f1:	83 ec 0c             	sub    esp,0xc
c001c9f4:	68 c0 b5 02 c0       	push   0xc002b5c0
c001c9f9:	e8 68 a5 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001c9fe:	83 c4 10             	add    esp,0x10
c001ca01:	83 ec 04             	sub    esp,0x4
c001ca04:	6a 00                	push   0x0
c001ca06:	6a 03                	push   0x3
c001ca08:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001ca0c:	e8 3f fe ff ff       	call   c001c850 <ISAPnPDriver::writeRegister(unsigned char, unsigned char)>
c001ca11:	83 c4 10             	add    esp,0x10
c001ca14:	83 ec 0c             	sub    esp,0xc
c001ca17:	68 01 b9 02 c0       	push   0xc002b901
c001ca1c:	e8 45 a5 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001ca21:	83 c4 10             	add    esp,0x10
c001ca24:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001ca28:	66 c7 40 0c 03 02    	mov    WORD PTR [eax+0xc],0x203
c001ca2e:	83 ec 0c             	sub    esp,0xc
c001ca31:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001ca35:	e8 76 fe ff ff       	call   c001c8b0 <ISAPnPDriver::changeReadPortBase()>
c001ca3a:	83 c4 10             	add    esp,0x10
c001ca3d:	83 ec 0c             	sub    esp,0xc
c001ca40:	68 ac a4 02 c0       	push   0xc002a4ac
c001ca45:	e8 1c a5 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001ca4a:	83 c4 10             	add    esp,0x10
c001ca4d:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001ca55:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001ca5d:	8d 76 00             	lea    esi,[esi+0x0]
c001ca60:	83 ec 0c             	sub    esp,0xc
c001ca63:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001ca67:	e8 34 fc ff ff       	call   c001c6a0 <ISAPnPDriver::isolateCard()>
c001ca6c:	83 c4 10             	add    esp,0x10
c001ca6f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ca73:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001ca77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca7b:	80 f4 00             	xor    ah,0x0
c001ca7e:	89 c3                	mov    ebx,eax
c001ca80:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ca84:	80 f4 00             	xor    ah,0x0
c001ca87:	89 c6                	mov    esi,eax
c001ca89:	89 f0                	mov    eax,esi
c001ca8b:	09 d8                	or     eax,ebx
c001ca8d:	75 3d                	jne    c001cacc <ISAPnPDriver::initialise()+0x120>
c001ca8f:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001ca94:	0f 85 fe 00 00 00    	jne    c001cb98 <ISAPnPDriver::initialise()+0x1ec>
c001ca9a:	83 ec 0c             	sub    esp,0xc
c001ca9d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001caa1:	e8 0a fe ff ff       	call   c001c8b0 <ISAPnPDriver::changeReadPortBase()>
c001caa6:	83 c4 10             	add    esp,0x10
c001caa9:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c001caae:	83 7c 24 18 13       	cmp    DWORD PTR [esp+0x18],0x13
c001cab3:	7e ab                	jle    c001ca60 <ISAPnPDriver::initialise()+0xb4>
c001cab5:	83 ec 0c             	sub    esp,0xc
c001cab8:	68 8a cc 02 c0       	push   0xc002cc8a
c001cabd:	e8 a4 a4 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001cac2:	83 c4 10             	add    esp,0x10
c001cac5:	e9 2e 01 00 00       	jmp    c001cbf8 <ISAPnPDriver::initialise()+0x24c>
c001caca:	66 90                	xchg   ax,ax
c001cacc:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c001cad1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001cad5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cad9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001cadd:	89 d0                	mov    eax,edx
c001cadf:	31 d2                	xor    edx,edx
c001cae1:	89 c7                	mov    edi,eax
c001cae3:	89 d5                	mov    ebp,edx
c001cae5:	89 f8                	mov    eax,edi
c001cae7:	83 ec 04             	sub    esp,0x4
c001caea:	51                   	push   ecx
c001caeb:	50                   	push   eax
c001caec:	68 c8 cd 02 c0       	push   0xc002cdc8
c001caf1:	e8 70 a4 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001caf6:	83 c4 10             	add    esp,0x10
c001caf9:	83 ec 08             	sub    esp,0x8
c001cafc:	6a 06                	push   0x6
c001cafe:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001cb02:	e8 55 fe ff ff       	call   c001c95c <ISAPnPDriver::readRegister(unsigned char)>
c001cb07:	83 c4 10             	add    esp,0x10
c001cb0a:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001cb0e:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001cb13:	83 ec 08             	sub    esp,0x8
c001cb16:	50                   	push   eax
c001cb17:	68 9d cc 02 c0       	push   0xc002cc9d
c001cb1c:	e8 45 a4 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001cb21:	83 c4 10             	add    esp,0x10
c001cb24:	c7 44 24 04 88 01 00 00 	mov    DWORD PTR [esp+0x4],0x188
c001cb2c:	83 ec 0c             	sub    esp,0xc
c001cb2f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001cb33:	e8 d4 35 ff ff       	call   c001010c <malloc>
c001cb38:	83 c4 10             	add    esp,0x10
c001cb3b:	89 c7                	mov    edi,eax
c001cb3d:	83 ec 0c             	sub    esp,0xc
c001cb40:	57                   	push   edi
c001cb41:	e8 9e c9 00 00       	call   c00294e4 <UnknownHardware::UnknownHardware()>
c001cb46:	83 c4 10             	add    esp,0x10
c001cb49:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c001cb4d:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001cb52:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cb56:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cb5a:	50                   	push   eax
c001cb5b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cb5f:	e8 b0 c9 00 00       	call   c0029514 <UnknownHardware::setISAPnPDetection(unsigned char, unsigned long long)>
c001cb64:	83 c4 10             	add    esp,0x10
c001cb67:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001cb6b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001cb6e:	83 ec 08             	sub    esp,0x8
c001cb71:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001cb75:	50                   	push   eax
c001cb76:	e8 ed ad fe ff       	call   c0007968 <Hardware::addChild(Hardware*)>
c001cb7b:	83 c4 10             	add    esp,0x10
c001cb7e:	83 ec 04             	sub    esp,0x4
c001cb81:	6a 00                	push   0x0
c001cb83:	6a 03                	push   0x3
c001cb85:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001cb89:	e8 c2 fc ff ff       	call   c001c850 <ISAPnPDriver::writeRegister(unsigned char, unsigned char)>
c001cb8e:	83 c4 10             	add    esp,0x10
c001cb91:	e9 ca fe ff ff       	jmp    c001ca60 <ISAPnPDriver::initialise()+0xb4>
c001cb96:	66 90                	xchg   ax,ax
c001cb98:	90                   	nop
c001cb99:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001cb9d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001cba0:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001cba4:	66 8b 52 0a          	mov    dx,WORD PTR [edx+0xa]
c001cba8:	0f b7 d2             	movzx  edx,dx
c001cbab:	6a 01                	push   0x1
c001cbad:	6a 01                	push   0x1
c001cbaf:	52                   	push   edx
c001cbb0:	50                   	push   eax
c001cbb1:	e8 64 af fe ff       	call   c0007b1a <Hardware::registerPortRange(unsigned short, unsigned char, int)>
c001cbb6:	83 c4 10             	add    esp,0x10
c001cbb9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001cbbd:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001cbc0:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001cbc4:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c001cbc7:	0f b7 d2             	movzx  edx,dx
c001cbca:	6a 01                	push   0x1
c001cbcc:	6a 01                	push   0x1
c001cbce:	52                   	push   edx
c001cbcf:	50                   	push   eax
c001cbd0:	e8 45 af fe ff       	call   c0007b1a <Hardware::registerPortRange(unsigned short, unsigned char, int)>
c001cbd5:	83 c4 10             	add    esp,0x10
c001cbd8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001cbdc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001cbdf:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001cbe3:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c001cbe6:	0f b7 d2             	movzx  edx,dx
c001cbe9:	6a 01                	push   0x1
c001cbeb:	6a 01                	push   0x1
c001cbed:	52                   	push   edx
c001cbee:	50                   	push   eax
c001cbef:	e8 26 af fe ff       	call   c0007b1a <Hardware::registerPortRange(unsigned short, unsigned char, int)>
c001cbf4:	83 c4 10             	add    esp,0x10
c001cbf7:	90                   	nop
c001cbf8:	83 c4 2c             	add    esp,0x2c
c001cbfb:	5b                   	pop    ebx
c001cbfc:	5e                   	pop    esi
c001cbfd:	5f                   	pop    edi
c001cbfe:	5d                   	pop    ebp
c001cbff:	c3                   	ret    

c001cc00 <PCIDriver::deinitialise()>:
c001cc00:	90                   	nop
c001cc01:	c3                   	ret    
c001cc02:	66 90                	xchg   ax,ax

c001cc04 <PCIDriver::setPowerState(DevicePowerState)>:
c001cc04:	90                   	nop
c001cc05:	c3                   	ret    
c001cc06:	66 90                	xchg   ax,ax

c001cc08 <PCIDriver::getHumanReadableName()>:
c001cc08:	b8 af a4 02 c0       	mov    eax,0xc002a4af
c001cc0d:	c3                   	ret    
c001cc0e:	66 90                	xchg   ax,ax

c001cc10 <PCIDriver::readBAR8(unsigned int, int)>:
c001cc10:	83 ec 10             	sub    esp,0x10
c001cc13:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cc17:	83 e0 01             	and    eax,0x1
c001cc1a:	74 2c                	je     c001cc48 <PCIDriver::readBAR8(unsigned int, int)+0x38>
c001cc1c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cc20:	83 e0 fc             	and    eax,0xfffffffc
c001cc23:	89 c2                	mov    edx,eax
c001cc25:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001cc29:	01 d0                	add    eax,edx
c001cc2b:	0f b7 c0             	movzx  eax,ax
c001cc2e:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c001cc33:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c001cc38:	89 c2                	mov    edx,eax
c001cc3a:	ec                   	in     al,dx
c001cc3b:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001cc3f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001cc43:	eb 1f                	jmp    c001cc64 <PCIDriver::readBAR8(unsigned int, int)+0x54>
c001cc45:	8d 76 00             	lea    esi,[esi+0x0]
c001cc48:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cc4c:	83 e0 f0             	and    eax,0xfffffff0
c001cc4f:	89 c2                	mov    edx,eax
c001cc51:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001cc55:	01 d0                	add    eax,edx
c001cc57:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cc5b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cc5f:	8a 00                	mov    al,BYTE PTR [eax]
c001cc61:	8d 76 00             	lea    esi,[esi+0x0]
c001cc64:	83 c4 10             	add    esp,0x10
c001cc67:	c3                   	ret    

c001cc68 <PCIDriver::readBAR16(unsigned int, int)>:
c001cc68:	83 ec 10             	sub    esp,0x10
c001cc6b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cc6f:	83 e0 01             	and    eax,0x1
c001cc72:	74 2c                	je     c001cca0 <PCIDriver::readBAR16(unsigned int, int)+0x38>
c001cc74:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cc78:	83 e0 fc             	and    eax,0xfffffffc
c001cc7b:	89 c2                	mov    edx,eax
c001cc7d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001cc81:	01 d0                	add    eax,edx
c001cc83:	0f b7 c0             	movzx  eax,ax
c001cc86:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c001cc8b:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c001cc90:	89 c2                	mov    edx,eax
c001cc92:	66 ed                	in     ax,dx
c001cc94:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c001cc99:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cc9d:	eb 1d                	jmp    c001ccbc <PCIDriver::readBAR16(unsigned int, int)+0x54>
c001cc9f:	90                   	nop
c001cca0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cca4:	83 e0 f0             	and    eax,0xfffffff0
c001cca7:	89 c2                	mov    edx,eax
c001cca9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ccad:	01 d0                	add    eax,edx
c001ccaf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ccb3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ccb7:	66 8b 00             	mov    ax,WORD PTR [eax]
c001ccba:	66 90                	xchg   ax,ax
c001ccbc:	83 c4 10             	add    esp,0x10
c001ccbf:	c3                   	ret    

c001ccc0 <PCIDriver::readBAR32(unsigned int, int)>:
c001ccc0:	83 ec 10             	sub    esp,0x10
c001ccc3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ccc7:	83 e0 01             	and    eax,0x1
c001ccca:	74 2c                	je     c001ccf8 <PCIDriver::readBAR32(unsigned int, int)+0x38>
c001cccc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ccd0:	83 e0 fc             	and    eax,0xfffffffc
c001ccd3:	89 c2                	mov    edx,eax
c001ccd5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ccd9:	01 d0                	add    eax,edx
c001ccdb:	0f b7 c0             	movzx  eax,ax
c001ccde:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c001cce3:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c001cce8:	89 c2                	mov    edx,eax
c001ccea:	ed                   	in     eax,dx
c001cceb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ccef:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ccf3:	eb 1f                	jmp    c001cd14 <PCIDriver::readBAR32(unsigned int, int)+0x54>
c001ccf5:	8d 76 00             	lea    esi,[esi+0x0]
c001ccf8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ccfc:	83 e0 f0             	and    eax,0xfffffff0
c001ccff:	89 c2                	mov    edx,eax
c001cd01:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001cd05:	01 d0                	add    eax,edx
c001cd07:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cd0b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cd0f:	8b 00                	mov    eax,DWORD PTR [eax]
c001cd11:	8d 76 00             	lea    esi,[esi+0x0]
c001cd14:	83 c4 10             	add    esp,0x10
c001cd17:	c3                   	ret    

c001cd18 <PCIDriver::writeBAR8(unsigned int, unsigned char, int)>:
c001cd18:	83 ec 14             	sub    esp,0x14
c001cd1b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cd1f:	88 04 24             	mov    BYTE PTR [esp],al
c001cd22:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001cd26:	83 e0 01             	and    eax,0x1
c001cd29:	74 2d                	je     c001cd58 <PCIDriver::writeBAR8(unsigned int, unsigned char, int)+0x40>
c001cd2b:	0f b6 14 24          	movzx  edx,BYTE PTR [esp]
c001cd2f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001cd33:	83 e0 fc             	and    eax,0xfffffffc
c001cd36:	89 c1                	mov    ecx,eax
c001cd38:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cd3c:	01 c8                	add    eax,ecx
c001cd3e:	0f b7 c0             	movzx  eax,ax
c001cd41:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c001cd46:	88 54 24 0d          	mov    BYTE PTR [esp+0xd],dl
c001cd4a:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c001cd4e:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c001cd53:	ee                   	out    dx,al
c001cd54:	eb 1e                	jmp    c001cd74 <PCIDriver::writeBAR8(unsigned int, unsigned char, int)+0x5c>
c001cd56:	66 90                	xchg   ax,ax
c001cd58:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001cd5c:	83 e0 f0             	and    eax,0xfffffff0
c001cd5f:	89 c2                	mov    edx,eax
c001cd61:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cd65:	01 d0                	add    eax,edx
c001cd67:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001cd6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd6f:	8a 14 24             	mov    dl,BYTE PTR [esp]
c001cd72:	88 10                	mov    BYTE PTR [eax],dl
c001cd74:	90                   	nop
c001cd75:	83 c4 14             	add    esp,0x14
c001cd78:	c3                   	ret    
c001cd79:	90                   	nop
c001cd7a:	66 90                	xchg   ax,ax

c001cd7c <PCIDriver::writeBAR16(unsigned int, unsigned short, int)>:
c001cd7c:	83 ec 14             	sub    esp,0x14
c001cd7f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cd83:	66 89 04 24          	mov    WORD PTR [esp],ax
c001cd87:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001cd8b:	83 e0 01             	and    eax,0x1
c001cd8e:	74 30                	je     c001cdc0 <PCIDriver::writeBAR16(unsigned int, unsigned short, int)+0x44>
c001cd90:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001cd94:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001cd98:	83 e2 fc             	and    edx,0xfffffffc
c001cd9b:	89 d1                	mov    ecx,edx
c001cd9d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001cda1:	01 ca                	add    edx,ecx
c001cda3:	0f b7 d2             	movzx  edx,dx
c001cda6:	66 89 54 24 0e       	mov    WORD PTR [esp+0xe],dx
c001cdab:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c001cdb0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cdb4:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c001cdb9:	66 ef                	out    dx,ax
c001cdbb:	eb 23                	jmp    c001cde0 <PCIDriver::writeBAR16(unsigned int, unsigned short, int)+0x64>
c001cdbd:	8d 76 00             	lea    esi,[esi+0x0]
c001cdc0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001cdc4:	83 e0 f0             	and    eax,0xfffffff0
c001cdc7:	89 c2                	mov    edx,eax
c001cdc9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cdcd:	01 d0                	add    eax,edx
c001cdcf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001cdd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cdd7:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001cdda:	66 89 10             	mov    WORD PTR [eax],dx
c001cddd:	8d 76 00             	lea    esi,[esi+0x0]
c001cde0:	90                   	nop
c001cde1:	83 c4 14             	add    esp,0x14
c001cde4:	c3                   	ret    
c001cde5:	90                   	nop
c001cde6:	66 90                	xchg   ax,ax

c001cde8 <PCIDriver::writeBAR32(unsigned int, unsigned int, int)>:
c001cde8:	83 ec 10             	sub    esp,0x10
c001cdeb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cdef:	83 e0 01             	and    eax,0x1
c001cdf2:	74 2c                	je     c001ce20 <PCIDriver::writeBAR32(unsigned int, unsigned int, int)+0x38>
c001cdf4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cdf8:	83 e0 fc             	and    eax,0xfffffffc
c001cdfb:	89 c2                	mov    edx,eax
c001cdfd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ce01:	01 d0                	add    eax,edx
c001ce03:	0f b7 c0             	movzx  eax,ax
c001ce06:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c001ce0b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ce0f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ce13:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ce17:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001ce1c:	ef                   	out    dx,eax
c001ce1d:	eb 21                	jmp    c001ce40 <PCIDriver::writeBAR32(unsigned int, unsigned int, int)+0x58>
c001ce1f:	90                   	nop
c001ce20:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ce24:	83 e0 f0             	and    eax,0xfffffff0
c001ce27:	89 c2                	mov    edx,eax
c001ce29:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ce2d:	01 d0                	add    eax,edx
c001ce2f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ce33:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ce37:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ce3b:	89 10                	mov    DWORD PTR [eax],edx
c001ce3d:	8d 76 00             	lea    esi,[esi+0x0]
c001ce40:	90                   	nop
c001ce41:	83 c4 10             	add    esp,0x10
c001ce44:	c3                   	ret    
c001ce45:	90                   	nop
c001ce46:	66 90                	xchg   ax,ax

c001ce48 <PCIDriver::readWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001ce48:	53                   	push   ebx
c001ce49:	83 ec 30             	sub    esp,0x30
c001ce4c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001ce50:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001ce54:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c001ce58:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c001ce5c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001ce60:	88 d8                	mov    al,bl
c001ce62:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001ce66:	88 c8                	mov    al,cl
c001ce68:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001ce6c:	88 d0                	mov    al,dl
c001ce6e:	88 04 24             	mov    BYTE PTR [esp],al
c001ce71:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001ce76:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001ce7a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001ce7f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001ce83:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001ce88:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001ce8c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001ce90:	c1 e0 10             	shl    eax,0x10
c001ce93:	89 c2                	mov    edx,eax
c001ce95:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ce99:	c1 e0 0b             	shl    eax,0xb
c001ce9c:	09 c2                	or     edx,eax
c001ce9e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cea2:	c1 e0 08             	shl    eax,0x8
c001cea5:	09 c2                	or     edx,eax
c001cea7:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c001ceab:	25 fc 00 00 00       	and    eax,0xfc
c001ceb0:	09 d0                	or     eax,edx
c001ceb2:	0d 00 00 00 80       	or     eax,0x80000000
c001ceb7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001cebb:	66 c7 44 24 16 f8 0c 	mov    WORD PTR [esp+0x16],0xcf8
c001cec2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cec6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ceca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cece:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c001ced3:	ef                   	out    dx,eax
c001ced4:	66 c7 44 24 1e fc 0c 	mov    WORD PTR [esp+0x1e],0xcfc
c001cedb:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001cee0:	89 c2                	mov    edx,eax
c001cee2:	ed                   	in     eax,dx
c001cee3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cee7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ceeb:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c001ceef:	83 e0 02             	and    eax,0x2
c001cef2:	c1 e0 03             	shl    eax,0x3
c001cef5:	88 c1                	mov    cl,al
c001cef7:	d3 ea                	shr    edx,cl
c001cef9:	89 d0                	mov    eax,edx
c001cefb:	83 c4 30             	add    esp,0x30
c001cefe:	5b                   	pop    ebx
c001ceff:	c3                   	ret    

c001cf00 <PCIDriver::writeWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001cf00:	56                   	push   esi
c001cf01:	53                   	push   ebx
c001cf02:	83 ec 54             	sub    esp,0x54
c001cf05:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c001cf09:	8b 74 24 68          	mov    esi,DWORD PTR [esp+0x68]
c001cf0d:	8b 5c 24 6c          	mov    ebx,DWORD PTR [esp+0x6c]
c001cf11:	8b 4c 24 70          	mov    ecx,DWORD PTR [esp+0x70]
c001cf15:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001cf19:	88 54 24 10          	mov    BYTE PTR [esp+0x10],dl
c001cf1d:	89 f2                	mov    edx,esi
c001cf1f:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001cf23:	88 da                	mov    dl,bl
c001cf25:	88 54 24 08          	mov    BYTE PTR [esp+0x8],dl
c001cf29:	88 ca                	mov    dl,cl
c001cf2b:	88 54 24 04          	mov    BYTE PTR [esp+0x4],dl
c001cf2f:	66 89 04 24          	mov    WORD PTR [esp],ax
c001cf33:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001cf38:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001cf3c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001cf41:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c001cf45:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001cf4a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001cf4e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001cf52:	c1 e0 10             	shl    eax,0x10
c001cf55:	89 c2                	mov    edx,eax
c001cf57:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001cf5b:	c1 e0 0b             	shl    eax,0xb
c001cf5e:	09 c2                	or     edx,eax
c001cf60:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001cf64:	c1 e0 08             	shl    eax,0x8
c001cf67:	09 c2                	or     edx,eax
c001cf69:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001cf6e:	25 fc 00 00 00       	and    eax,0xfc
c001cf73:	09 d0                	or     eax,edx
c001cf75:	0d 00 00 00 80       	or     eax,0x80000000
c001cf7a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c001cf7e:	66 c7 44 24 36 f8 0c 	mov    WORD PTR [esp+0x36],0xcf8
c001cf85:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001cf89:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001cf8d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cf91:	66 8b 54 24 36       	mov    dx,WORD PTR [esp+0x36]
c001cf96:	ef                   	out    dx,eax
c001cf97:	66 c7 44 24 3e fc 0c 	mov    WORD PTR [esp+0x3e],0xcfc
c001cf9e:	66 8b 44 24 3e       	mov    ax,WORD PTR [esp+0x3e]
c001cfa3:	89 c2                	mov    edx,eax
c001cfa5:	ed                   	in     eax,dx
c001cfa6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001cfaa:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001cfae:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c001cfb2:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001cfb7:	83 e0 02             	and    eax,0x2
c001cfba:	74 18                	je     c001cfd4 <PCIDriver::writeWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd4>
c001cfbc:	81 64 24 50 ff ff 00 00 	and    DWORD PTR [esp+0x50],0xffff
c001cfc4:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001cfc8:	c1 e0 10             	shl    eax,0x10
c001cfcb:	09 44 24 50          	or     DWORD PTR [esp+0x50],eax
c001cfcf:	eb 13                	jmp    c001cfe4 <PCIDriver::writeWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xe4>
c001cfd1:	8d 76 00             	lea    esi,[esi+0x0]
c001cfd4:	81 64 24 50 00 00 ff ff 	and    DWORD PTR [esp+0x50],0xffff0000
c001cfdc:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001cfe0:	09 44 24 50          	or     DWORD PTR [esp+0x50],eax
c001cfe4:	66 c7 44 24 26 f8 0c 	mov    WORD PTR [esp+0x26],0xcf8
c001cfeb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001cfef:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001cff3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cff7:	66 8b 54 24 26       	mov    dx,WORD PTR [esp+0x26]
c001cffc:	ef                   	out    dx,eax
c001cffd:	66 c7 44 24 2e fc 0c 	mov    WORD PTR [esp+0x2e],0xcfc
c001d004:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001d008:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001d00c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d010:	66 8b 54 24 2e       	mov    dx,WORD PTR [esp+0x2e]
c001d015:	ef                   	out    dx,eax
c001d016:	90                   	nop
c001d017:	83 c4 54             	add    esp,0x54
c001d01a:	5b                   	pop    ebx
c001d01b:	5e                   	pop    esi
c001d01c:	c3                   	ret    
c001d01d:	90                   	nop
c001d01e:	66 90                	xchg   ax,ax

c001d020 <PCIDriver::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001d020:	83 ec 0c             	sub    esp,0xc
c001d023:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d027:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001d02b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d02f:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001d033:	88 c8                	mov    al,cl
c001d035:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001d039:	88 d0                	mov    al,dl
c001d03b:	88 04 24             	mov    BYTE PTR [esp],al
c001d03e:	0f b6 0c 24          	movzx  ecx,BYTE PTR [esp]
c001d042:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c001d047:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001d04c:	6a 00                	push   0x0
c001d04e:	51                   	push   ecx
c001d04f:	52                   	push   edx
c001d050:	50                   	push   eax
c001d051:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d055:	e8 ee fd ff ff       	call   c001ce48 <PCIDriver::readWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d05a:	83 c4 14             	add    esp,0x14
c001d05d:	83 c4 0c             	add    esp,0xc
c001d060:	c3                   	ret    
c001d061:	90                   	nop
c001d062:	66 90                	xchg   ax,ax

c001d064 <PCIDriver::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001d064:	83 ec 0c             	sub    esp,0xc
c001d067:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d06b:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001d06f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d073:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001d077:	88 c8                	mov    al,cl
c001d079:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001d07d:	88 d0                	mov    al,dl
c001d07f:	88 04 24             	mov    BYTE PTR [esp],al
c001d082:	0f b6 0c 24          	movzx  ecx,BYTE PTR [esp]
c001d086:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c001d08b:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001d090:	6a 0e                	push   0xe
c001d092:	51                   	push   ecx
c001d093:	52                   	push   edx
c001d094:	50                   	push   eax
c001d095:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d099:	e8 aa fd ff ff       	call   c001ce48 <PCIDriver::readWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d09e:	83 c4 14             	add    esp,0x14
c001d0a1:	0f b6 c0             	movzx  eax,al
c001d0a4:	83 c4 0c             	add    esp,0xc
c001d0a7:	c3                   	ret    

c001d0a8 <PCIDriver::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001d0a8:	83 ec 1c             	sub    esp,0x1c
c001d0ab:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d0af:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001d0b3:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001d0b7:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001d0bb:	88 c8                	mov    al,cl
c001d0bd:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001d0c1:	88 d0                	mov    al,dl
c001d0c3:	88 04 24             	mov    BYTE PTR [esp],al
c001d0c6:	0f b6 0c 24          	movzx  ecx,BYTE PTR [esp]
c001d0ca:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c001d0cf:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001d0d4:	6a 0a                	push   0xa
c001d0d6:	51                   	push   ecx
c001d0d7:	52                   	push   edx
c001d0d8:	50                   	push   eax
c001d0d9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001d0dd:	e8 66 fd ff ff       	call   c001ce48 <PCIDriver::readWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d0e2:	83 c4 14             	add    esp,0x14
c001d0e5:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001d0e9:	0f b6 0c 24          	movzx  ecx,BYTE PTR [esp]
c001d0ed:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c001d0f2:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001d0f7:	6a 0a                	push   0xa
c001d0f9:	51                   	push   ecx
c001d0fa:	52                   	push   edx
c001d0fb:	50                   	push   eax
c001d0fc:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001d100:	e8 43 fd ff ff       	call   c001ce48 <PCIDriver::readWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d105:	83 c4 14             	add    esp,0x14
c001d108:	0f b7 c0             	movzx  eax,ax
c001d10b:	c1 f8 08             	sar    eax,0x8
c001d10e:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001d112:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001d117:	0f b6 54 24 1a       	movzx  edx,BYTE PTR [esp+0x1a]
c001d11c:	c1 e2 08             	shl    edx,0x8
c001d11f:	09 d0                	or     eax,edx
c001d121:	83 c4 1c             	add    esp,0x1c
c001d124:	c3                   	ret    
c001d125:	90                   	nop
c001d126:	66 90                	xchg   ax,ax

c001d128 <PCIDriver::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001d128:	83 ec 0c             	sub    esp,0xc
c001d12b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d12f:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001d133:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d137:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001d13b:	88 c8                	mov    al,cl
c001d13d:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001d141:	88 d0                	mov    al,dl
c001d143:	88 04 24             	mov    BYTE PTR [esp],al
c001d146:	0f b6 0c 24          	movzx  ecx,BYTE PTR [esp]
c001d14a:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c001d14f:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001d154:	6a 08                	push   0x8
c001d156:	51                   	push   ecx
c001d157:	52                   	push   edx
c001d158:	50                   	push   eax
c001d159:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d15d:	e8 e6 fc ff ff       	call   c001ce48 <PCIDriver::readWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d162:	83 c4 14             	add    esp,0x14
c001d165:	0f b7 c0             	movzx  eax,ax
c001d168:	c1 f8 08             	sar    eax,0x8
c001d16b:	83 c4 0c             	add    esp,0xc
c001d16e:	c3                   	ret    
c001d16f:	90                   	nop

c001d170 <PCIDriver::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001d170:	83 ec 0c             	sub    esp,0xc
c001d173:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d177:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001d17b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d17f:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001d183:	88 c8                	mov    al,cl
c001d185:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001d189:	88 d0                	mov    al,dl
c001d18b:	88 04 24             	mov    BYTE PTR [esp],al
c001d18e:	0f b6 0c 24          	movzx  ecx,BYTE PTR [esp]
c001d192:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c001d197:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001d19c:	6a 08                	push   0x8
c001d19e:	51                   	push   ecx
c001d19f:	52                   	push   edx
c001d1a0:	50                   	push   eax
c001d1a1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d1a5:	e8 9e fc ff ff       	call   c001ce48 <PCIDriver::readWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d1aa:	83 c4 14             	add    esp,0x14
c001d1ad:	83 c4 0c             	add    esp,0xc
c001d1b0:	c3                   	ret    
c001d1b1:	90                   	nop
c001d1b2:	66 90                	xchg   ax,ax

c001d1b4 <PCIDriver::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001d1b4:	83 ec 0c             	sub    esp,0xc
c001d1b7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d1bb:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001d1bf:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d1c3:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001d1c7:	88 c8                	mov    al,cl
c001d1c9:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001d1cd:	88 d0                	mov    al,dl
c001d1cf:	88 04 24             	mov    BYTE PTR [esp],al
c001d1d2:	0f b6 0c 24          	movzx  ecx,BYTE PTR [esp]
c001d1d6:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c001d1db:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001d1e0:	6a 3c                	push   0x3c
c001d1e2:	51                   	push   ecx
c001d1e3:	52                   	push   edx
c001d1e4:	50                   	push   eax
c001d1e5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d1e9:	e8 5a fc ff ff       	call   c001ce48 <PCIDriver::readWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d1ee:	83 c4 14             	add    esp,0x14
c001d1f1:	83 c4 0c             	add    esp,0xc
c001d1f4:	c3                   	ret    
c001d1f5:	90                   	nop
c001d1f6:	66 90                	xchg   ax,ax

c001d1f8 <PCIDriver::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001d1f8:	83 ec 0c             	sub    esp,0xc
c001d1fb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d1ff:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001d203:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d207:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001d20b:	88 c8                	mov    al,cl
c001d20d:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001d211:	88 d0                	mov    al,dl
c001d213:	88 04 24             	mov    BYTE PTR [esp],al
c001d216:	0f b6 0c 24          	movzx  ecx,BYTE PTR [esp]
c001d21a:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c001d21f:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001d224:	6a 18                	push   0x18
c001d226:	51                   	push   ecx
c001d227:	52                   	push   edx
c001d228:	50                   	push   eax
c001d229:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d22d:	e8 16 fc ff ff       	call   c001ce48 <PCIDriver::readWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d232:	83 c4 14             	add    esp,0x14
c001d235:	0f b7 c0             	movzx  eax,ax
c001d238:	c1 f8 08             	sar    eax,0x8
c001d23b:	83 c4 0c             	add    esp,0xc
c001d23e:	c3                   	ret    
c001d23f:	90                   	nop

c001d240 <PCIDriver::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001d240:	56                   	push   esi
c001d241:	53                   	push   ebx
c001d242:	83 ec 10             	sub    esp,0x10
c001d245:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d249:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001d24d:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001d251:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001d255:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001d259:	88 d8                	mov    al,bl
c001d25b:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001d25f:	88 c8                	mov    al,cl
c001d261:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001d265:	88 d0                	mov    al,dl
c001d267:	88 04 24             	mov    BYTE PTR [esp],al
c001d26a:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001d26e:	c1 e0 02             	shl    eax,0x2
c001d271:	83 c0 12             	add    eax,0x12
c001d274:	0f b6 d8             	movzx  ebx,al
c001d277:	0f b6 0c 24          	movzx  ecx,BYTE PTR [esp]
c001d27b:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c001d280:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001d285:	53                   	push   ebx
c001d286:	51                   	push   ecx
c001d287:	52                   	push   edx
c001d288:	50                   	push   eax
c001d289:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d28d:	e8 b6 fb ff ff       	call   c001ce48 <PCIDriver::readWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d292:	83 c4 14             	add    esp,0x14
c001d295:	0f b7 c0             	movzx  eax,ax
c001d298:	c1 e0 10             	shl    eax,0x10
c001d29b:	89 c6                	mov    esi,eax
c001d29d:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001d2a1:	83 c0 04             	add    eax,0x4
c001d2a4:	c1 e0 02             	shl    eax,0x2
c001d2a7:	0f b6 d8             	movzx  ebx,al
c001d2aa:	0f b6 0c 24          	movzx  ecx,BYTE PTR [esp]
c001d2ae:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c001d2b3:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001d2b8:	53                   	push   ebx
c001d2b9:	51                   	push   ecx
c001d2ba:	52                   	push   edx
c001d2bb:	50                   	push   eax
c001d2bc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d2c0:	e8 83 fb ff ff       	call   c001ce48 <PCIDriver::readWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d2c5:	83 c4 14             	add    esp,0x14
c001d2c8:	0f b7 c0             	movzx  eax,ax
c001d2cb:	09 f0                	or     eax,esi
c001d2cd:	83 c4 10             	add    esp,0x10
c001d2d0:	5b                   	pop    ebx
c001d2d1:	5e                   	pop    esi
c001d2d2:	c3                   	ret    
c001d2d3:	90                   	nop

c001d2d4 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)>:
c001d2d4:	83 ec 0c             	sub    esp,0xc
c001d2d7:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001d2db:	0f b6 c0             	movzx  eax,al
c001d2de:	83 f8 40             	cmp    eax,0x40
c001d2e1:	0f 87 65 05 00 00    	ja     c001d84c <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x578>
c001d2e7:	8b 04 85 70 d6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2990]
c001d2ee:	ff e0                	jmp    eax
c001d2f0:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001d2f4:	0f b6 c0             	movzx  eax,al
c001d2f7:	83 f8 01             	cmp    eax,0x1
c001d2fa:	75 0c                	jne    c001d308 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x34>
c001d2fc:	b8 b0 d4 02 c0       	mov    eax,0xc002d4b0
c001d301:	e9 72 05 00 00       	jmp    c001d878 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d306:	66 90                	xchg   ax,ax
c001d308:	b8 58 ce 02 c0       	mov    eax,0xc002ce58
c001d30d:	e9 66 05 00 00       	jmp    c001d878 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d312:	66 90                	xchg   ax,ax
c001d314:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001d318:	0f b6 c0             	movzx  eax,al
c001d31b:	83 f8 08             	cmp    eax,0x8
c001d31e:	77 6c                	ja     c001d38c <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0xb8>
c001d320:	8b 04 85 74 d7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd288c]
c001d327:	ff e0                	jmp    eax
c001d329:	8d 76 00             	lea    esi,[esi+0x0]
c001d32c:	b8 69 ce 02 c0       	mov    eax,0xc002ce69
c001d331:	e9 42 05 00 00       	jmp    c001d878 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d336:	66 90                	xchg   ax,ax
c001d338:	b8 7d ce 02 c0       	mov    eax,0xc002ce7d
c001d33d:	e9 36 05 00 00       	jmp    c001d878 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d342:	66 90                	xchg   ax,ax
c001d344:	b8 90 ce 02 c0       	mov    eax,0xc002ce90
c001d349:	e9 2a 05 00 00       	jmp    c001d878 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d34e:	66 90                	xchg   ax,ax
c001d350:	b8 ab ce 02 c0       	mov    eax,0xc002ceab
c001d355:	e9 1e 05 00 00       	jmp    c001d878 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d35a:	66 90                	xchg   ax,ax
c001d35c:	b8 c2 ce 02 c0       	mov    eax,0xc002cec2
c001d361:	e9 12 05 00 00       	jmp    c001d878 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d366:	66 90                	xchg   ax,ax
c001d368:	b8 d6 ce 02 c0       	mov    eax,0xc002ced6
c001d36d:	e9 06 05 00 00       	jmp    c001d878 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d372:	66 90                	xchg   ax,ax
c001d374:	b8 e9 ce 02 c0       	mov    eax,0xc002cee9
c001d379:	e9 fa 04 00 00       	jmp    c001d878 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d37e:	66 90                	xchg   ax,ax
c001d380:	b8 d0 d4 02 c0       	mov    eax,0xc002d4d0
c001d385:	e9 ee 04 00 00       	jmp    c001d878 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d38a:	66 90                	xchg   ax,ax
c001d38c:	b8 fd ce 02 c0       	mov    eax,0xc002cefd
c001d391:	e9 e2 04 00 00       	jmp    c001d878 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d396:	66 90                	xchg   ax,ax
c001d398:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001d39c:	0f b6 c0             	movzx  eax,al
c001d39f:	85 c0                	test   eax,eax
c001d3a1:	75 0d                	jne    c001d3b0 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0xdc>
c001d3a3:	b8 15 cf 02 c0       	mov    eax,0xc002cf15
c001d3a8:	e9 cb 04 00 00       	jmp    c001d878 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d3ad:	8d 76 00             	lea    esi,[esi+0x0]
c001d3b0:	b8 2d cf 02 c0       	mov    eax,0xc002cf2d
c001d3b5:	e9 be 04 00 00       	jmp    c001d878 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d3ba:	66 90                	xchg   ax,ax
c001d3bc:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001d3c0:	0f b6 c0             	movzx  eax,al
c001d3c3:	83 f8 01             	cmp    eax,0x1
c001d3c6:	74 14                	je     c001d3dc <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x108>
c001d3c8:	83 f8 02             	cmp    eax,0x2
c001d3cb:	74 1b                	je     c001d3e8 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x114>
c001d3cd:	85 c0                	test   eax,eax
c001d3cf:	75 23                	jne    c001d3f4 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x120>
c001d3d1:	b8 f4 d4 02 c0       	mov    eax,0xc002d4f4
c001d3d6:	e9 9d 04 00 00       	jmp    c001d878 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d3db:	90                   	nop
c001d3dc:	b8 44 cf 02 c0       	mov    eax,0xc002cf44
c001d3e1:	e9 92 04 00 00       	jmp    c001d878 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d3e6:	66 90                	xchg   ax,ax
c001d3e8:	b8 57 cf 02 c0       	mov    eax,0xc002cf57
c001d3ed:	e9 86 04 00 00       	jmp    c001d878 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d3f2:	66 90                	xchg   ax,ax
c001d3f4:	b8 69 cf 02 c0       	mov    eax,0xc002cf69
c001d3f9:	e9 7a 04 00 00       	jmp    c001d878 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d3fe:	66 90                	xchg   ax,ax
c001d400:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001d404:	0f b6 c0             	movzx  eax,al
c001d407:	83 f8 01             	cmp    eax,0x1
c001d40a:	74 24                	je     c001d430 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x15c>
c001d40c:	83 f8 01             	cmp    eax,0x1
c001d40f:	7f 07                	jg     c001d418 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x144>
c001d411:	85 c0                	test   eax,eax
c001d413:	74 0f                	je     c001d424 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x150>
c001d415:	eb 3d                	jmp    c001d454 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x180>
c001d417:	90                   	nop
c001d418:	83 f8 02             	cmp    eax,0x2
c001d41b:	74 1f                	je     c001d43c <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x168>
c001d41d:	83 f8 03             	cmp    eax,0x3
c001d420:	74 26                	je     c001d448 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x174>
c001d422:	eb 30                	jmp    c001d454 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x180>
c001d424:	b8 80 cf 02 c0       	mov    eax,0xc002cf80
c001d429:	e9 4a 04 00 00       	jmp    c001d878 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d42e:	66 90                	xchg   ax,ax
c001d430:	b8 95 cf 02 c0       	mov    eax,0xc002cf95
c001d435:	e9 3e 04 00 00       	jmp    c001d878 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d43a:	66 90                	xchg   ax,ax
c001d43c:	b8 aa cf 02 c0       	mov    eax,0xc002cfaa
c001d441:	e9 32 04 00 00       	jmp    c001d878 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d446:	66 90                	xchg   ax,ax
c001d448:	b8 bf cf 02 c0       	mov    eax,0xc002cfbf
c001d44d:	e9 26 04 00 00       	jmp    c001d878 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d452:	66 90                	xchg   ax,ax
c001d454:	b8 d0 cf 02 c0       	mov    eax,0xc002cfd0
c001d459:	e9 1a 04 00 00       	jmp    c001d878 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d45e:	66 90                	xchg   ax,ax
c001d460:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001d464:	0f b6 c0             	movzx  eax,al
c001d467:	85 c0                	test   eax,eax
c001d469:	74 09                	je     c001d474 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x1a0>
c001d46b:	83 f8 01             	cmp    eax,0x1
c001d46e:	74 10                	je     c001d480 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x1ac>
c001d470:	eb 1a                	jmp    c001d48c <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x1b8>
c001d472:	66 90                	xchg   ax,ax
c001d474:	b8 ea cf 02 c0       	mov    eax,0xc002cfea
c001d479:	e9 fa 03 00 00       	jmp    c001d878 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d47e:	66 90                	xchg   ax,ax
c001d480:	b8 fd cf 02 c0       	mov    eax,0xc002cffd
c001d485:	e9 ee 03 00 00       	jmp    c001d878 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d48a:	66 90                	xchg   ax,ax
c001d48c:	b8 19 d0 02 c0       	mov    eax,0xc002d019
c001d491:	e9 e2 03 00 00       	jmp    c001d878 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d496:	66 90                	xchg   ax,ax
c001d498:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001d49c:	0f b6 c0             	movzx  eax,al
c001d49f:	83 f8 0a             	cmp    eax,0xa
c001d4a2:	0f 87 84 00 00 00    	ja     c001d52c <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x258>
c001d4a8:	8b 04 85 98 d7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2868]
c001d4af:	ff e0                	jmp    eax
c001d4b1:	8d 76 00             	lea    esi,[esi+0x0]
c001d4b4:	b8 b6 d0 02 c0       	mov    eax,0xc002d0b6
c001d4b9:	e9 ba 03 00 00       	jmp    c001d878 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d4be:	66 90                	xchg   ax,ax
c001d4c0:	b8 2f d0 02 c0       	mov    eax,0xc002d02f
c001d4c5:	e9 ae 03 00 00       	jmp    c001d878 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d4ca:	66 90                	xchg   ax,ax
c001d4cc:	b8 3e d0 02 c0       	mov    eax,0xc002d03e
c001d4d1:	e9 a2 03 00 00       	jmp    c001d878 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d4d6:	66 90                	xchg   ax,ax
c001d4d8:	b8 4e d0 02 c0       	mov    eax,0xc002d04e
c001d4dd:	e9 96 03 00 00       	jmp    c001d878 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d4e2:	66 90                	xchg   ax,ax
c001d4e4:	b8 5d d0 02 c0       	mov    eax,0xc002d05d
c001d4e9:	e9 8a 03 00 00       	jmp    c001d878 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d4ee:	66 90                	xchg   ax,ax
c001d4f0:	b8 6f d0 02 c0       	mov    eax,0xc002d06f
c001d4f5:	e9 7e 03 00 00       	jmp    c001d878 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d4fa:	66 90                	xchg   ax,ax
c001d4fc:	b8 7d d0 02 c0       	mov    eax,0xc002d07d
c001d501:	e9 72 03 00 00       	jmp    c001d878 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d506:	66 90                	xchg   ax,ax
c001d508:	b8 8a d0 02 c0       	mov    eax,0xc002d08a
c001d50d:	e9 66 03 00 00       	jmp    c001d878 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d512:	66 90                	xchg   ax,ax
c001d514:	b8 99 d0 02 c0       	mov    eax,0xc002d099
c001d519:	e9 5a 03 00 00       	jmp    c001d878 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d51e:	66 90                	xchg   ax,ax
c001d520:	b8 a8 d0 02 c0       	mov    eax,0xc002d0a8
c001d525:	e9 4e 03 00 00       	jmp    c001d878 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d52a:	66 90                	xchg   ax,ax
c001d52c:	b8 c6 d0 02 c0       	mov    eax,0xc002d0c6
c001d531:	e9 42 03 00 00       	jmp    c001d878 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d536:	66 90                	xchg   ax,ax
c001d538:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001d53c:	0f b6 c0             	movzx  eax,al
c001d53f:	83 f8 05             	cmp    eax,0x5
c001d542:	77 54                	ja     c001d598 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x2c4>
c001d544:	8b 04 85 c4 d7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd283c]
c001d54b:	ff e0                	jmp    eax
c001d54d:	8d 76 00             	lea    esi,[esi+0x0]
c001d550:	b8 d7 d0 02 c0       	mov    eax,0xc002d0d7
c001d555:	e9 1e 03 00 00       	jmp    c001d878 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d55a:	66 90                	xchg   ax,ax
c001d55c:	b8 ed d0 02 c0       	mov    eax,0xc002d0ed
c001d561:	e9 12 03 00 00       	jmp    c001d878 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d566:	66 90                	xchg   ax,ax
c001d568:	b8 18 d5 02 c0       	mov    eax,0xc002d518
c001d56d:	e9 06 03 00 00       	jmp    c001d878 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d572:	66 90                	xchg   ax,ax
c001d574:	b8 05 d1 02 c0       	mov    eax,0xc002d105
c001d579:	e9 fa 02 00 00       	jmp    c001d878 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d57e:	66 90                	xchg   ax,ax
c001d580:	b8 0f d1 02 c0       	mov    eax,0xc002d10f
c001d585:	e9 ee 02 00 00       	jmp    c001d878 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d58a:	66 90                	xchg   ax,ax
c001d58c:	b8 27 d1 02 c0       	mov    eax,0xc002d127
c001d591:	e9 e2 02 00 00       	jmp    c001d878 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d596:	66 90                	xchg   ax,ax
c001d598:	b8 41 d1 02 c0       	mov    eax,0xc002d141
c001d59d:	e9 d6 02 00 00       	jmp    c001d878 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d5a2:	66 90                	xchg   ax,ax
c001d5a4:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001d5a8:	0f b6 c0             	movzx  eax,al
c001d5ab:	83 f8 06             	cmp    eax,0x6
c001d5ae:	77 60                	ja     c001d610 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x33c>
c001d5b0:	8b 04 85 dc d7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2824]
c001d5b7:	ff e0                	jmp    eax
c001d5b9:	8d 76 00             	lea    esi,[esi+0x0]
c001d5bc:	b8 38 d5 02 c0       	mov    eax,0xc002d538
c001d5c1:	e9 b2 02 00 00       	jmp    c001d878 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d5c6:	66 90                	xchg   ax,ax
c001d5c8:	b8 5e d1 02 c0       	mov    eax,0xc002d15e
c001d5cd:	e9 a6 02 00 00       	jmp    c001d878 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d5d2:	66 90                	xchg   ax,ax
c001d5d4:	b8 71 d1 02 c0       	mov    eax,0xc002d171
c001d5d9:	e9 9a 02 00 00       	jmp    c001d878 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d5de:	66 90                	xchg   ax,ax
c001d5e0:	b8 60 d5 02 c0       	mov    eax,0xc002d560
c001d5e5:	e9 8e 02 00 00       	jmp    c001d878 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d5ea:	66 90                	xchg   ax,ax
c001d5ec:	b8 7b d1 02 c0       	mov    eax,0xc002d17b
c001d5f1:	e9 82 02 00 00       	jmp    c001d878 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d5f6:	66 90                	xchg   ax,ax
c001d5f8:	b8 93 d1 02 c0       	mov    eax,0xc002d193
c001d5fd:	e9 76 02 00 00       	jmp    c001d878 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d602:	66 90                	xchg   ax,ax
c001d604:	b8 aa d1 02 c0       	mov    eax,0xc002d1aa
c001d609:	e9 6a 02 00 00       	jmp    c001d878 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d60e:	66 90                	xchg   ax,ax
c001d610:	b8 b4 d1 02 c0       	mov    eax,0xc002d1b4
c001d615:	e9 5e 02 00 00       	jmp    c001d878 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d61a:	66 90                	xchg   ax,ax
c001d61c:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001d620:	0f b6 c0             	movzx  eax,al
c001d623:	83 f8 04             	cmp    eax,0x4
c001d626:	77 48                	ja     c001d670 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x39c>
c001d628:	8b 04 85 f8 d7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2808]
c001d62f:	ff e0                	jmp    eax
c001d631:	8d 76 00             	lea    esi,[esi+0x0]
c001d634:	b8 ca d1 02 c0       	mov    eax,0xc002d1ca
c001d639:	e9 3a 02 00 00       	jmp    c001d878 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d63e:	66 90                	xchg   ax,ax
c001d640:	b8 e2 d1 02 c0       	mov    eax,0xc002d1e2
c001d645:	e9 2e 02 00 00       	jmp    c001d878 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d64a:	66 90                	xchg   ax,ax
c001d64c:	b8 f4 d1 02 c0       	mov    eax,0xc002d1f4
c001d651:	e9 22 02 00 00       	jmp    c001d878 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d656:	66 90                	xchg   ax,ax
c001d658:	b8 09 d2 02 c0       	mov    eax,0xc002d209
c001d65d:	e9 16 02 00 00       	jmp    c001d878 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d662:	66 90                	xchg   ax,ax
c001d664:	b8 21 d2 02 c0       	mov    eax,0xc002d221
c001d669:	e9 0a 02 00 00       	jmp    c001d878 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d66e:	66 90                	xchg   ax,ax
c001d670:	b8 3a d2 02 c0       	mov    eax,0xc002d23a
c001d675:	e9 fe 01 00 00       	jmp    c001d878 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d67a:	66 90                	xchg   ax,ax
c001d67c:	b8 56 d2 02 c0       	mov    eax,0xc002d256
c001d681:	e9 f2 01 00 00       	jmp    c001d878 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d686:	66 90                	xchg   ax,ax
c001d688:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001d68c:	0f b6 c0             	movzx  eax,al
c001d68f:	83 f8 40             	cmp    eax,0x40
c001d692:	77 6c                	ja     c001d700 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x42c>
c001d694:	8b 04 85 0c d8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd27f4]
c001d69b:	ff e0                	jmp    eax
c001d69d:	8d 76 00             	lea    esi,[esi+0x0]
c001d6a0:	b8 6a d2 02 c0       	mov    eax,0xc002d26a
c001d6a5:	e9 ce 01 00 00       	jmp    c001d878 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d6aa:	66 90                	xchg   ax,ax
c001d6ac:	b8 79 d2 02 c0       	mov    eax,0xc002d279
c001d6b1:	e9 c2 01 00 00       	jmp    c001d878 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d6b6:	66 90                	xchg   ax,ax
c001d6b8:	b8 88 d2 02 c0       	mov    eax,0xc002d288
c001d6bd:	e9 b6 01 00 00       	jmp    c001d878 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d6c2:	66 90                	xchg   ax,ax
c001d6c4:	b8 9a d2 02 c0       	mov    eax,0xc002d29a
c001d6c9:	e9 aa 01 00 00       	jmp    c001d878 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d6ce:	66 90                	xchg   ax,ax
c001d6d0:	b8 b0 d2 02 c0       	mov    eax,0xc002d2b0
c001d6d5:	e9 9e 01 00 00       	jmp    c001d878 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d6da:	66 90                	xchg   ax,ax
c001d6dc:	b8 c0 d2 02 c0       	mov    eax,0xc002d2c0
c001d6e1:	e9 92 01 00 00       	jmp    c001d878 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d6e6:	66 90                	xchg   ax,ax
c001d6e8:	b8 d2 d2 02 c0       	mov    eax,0xc002d2d2
c001d6ed:	e9 86 01 00 00       	jmp    c001d878 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d6f2:	66 90                	xchg   ax,ax
c001d6f4:	b8 e1 d2 02 c0       	mov    eax,0xc002d2e1
c001d6f9:	e9 7a 01 00 00       	jmp    c001d878 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d6fe:	66 90                	xchg   ax,ax
c001d700:	b8 ee d2 02 c0       	mov    eax,0xc002d2ee
c001d705:	e9 6e 01 00 00       	jmp    c001d878 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d70a:	66 90                	xchg   ax,ax
c001d70c:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001d710:	0f b6 c0             	movzx  eax,al
c001d713:	83 f8 09             	cmp    eax,0x9
c001d716:	0f 87 84 00 00 00    	ja     c001d7a0 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x4cc>
c001d71c:	8b 04 85 10 d9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd26f0]
c001d723:	ff e0                	jmp    eax
c001d725:	8d 76 00             	lea    esi,[esi+0x0]
c001d728:	b8 fe d2 02 c0       	mov    eax,0xc002d2fe
c001d72d:	e9 46 01 00 00       	jmp    c001d878 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d732:	66 90                	xchg   ax,ax
c001d734:	b8 16 d3 02 c0       	mov    eax,0xc002d316
c001d739:	e9 3a 01 00 00       	jmp    c001d878 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d73e:	66 90                	xchg   ax,ax
c001d740:	b8 30 d3 02 c0       	mov    eax,0xc002d330
c001d745:	e9 2e 01 00 00       	jmp    c001d878 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d74a:	66 90                	xchg   ax,ax
c001d74c:	b8 38 d3 02 c0       	mov    eax,0xc002d338
c001d751:	e9 22 01 00 00       	jmp    c001d878 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d756:	66 90                	xchg   ax,ax
c001d758:	b8 4b d3 02 c0       	mov    eax,0xc002d34b
c001d75d:	e9 16 01 00 00       	jmp    c001d878 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d762:	66 90                	xchg   ax,ax
c001d764:	b8 60 d3 02 c0       	mov    eax,0xc002d360
c001d769:	e9 0a 01 00 00       	jmp    c001d878 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d76e:	66 90                	xchg   ax,ax
c001d770:	b8 75 d3 02 c0       	mov    eax,0xc002d375
c001d775:	e9 fe 00 00 00       	jmp    c001d878 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d77a:	66 90                	xchg   ax,ax
c001d77c:	b8 8f d3 02 c0       	mov    eax,0xc002d38f
c001d781:	e9 f2 00 00 00       	jmp    c001d878 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d786:	66 90                	xchg   ax,ax
c001d788:	b8 a2 d3 02 c0       	mov    eax,0xc002d3a2
c001d78d:	e9 e6 00 00 00       	jmp    c001d878 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d792:	66 90                	xchg   ax,ax
c001d794:	b8 b7 d3 02 c0       	mov    eax,0xc002d3b7
c001d799:	e9 da 00 00 00       	jmp    c001d878 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d79e:	66 90                	xchg   ax,ax
c001d7a0:	b8 cc d3 02 c0       	mov    eax,0xc002d3cc
c001d7a5:	e9 ce 00 00 00       	jmp    c001d878 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d7aa:	66 90                	xchg   ax,ax
c001d7ac:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001d7b0:	0f b6 c0             	movzx  eax,al
c001d7b3:	83 f8 21             	cmp    eax,0x21
c001d7b6:	77 54                	ja     c001d80c <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x538>
c001d7b8:	8b 04 85 38 d9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd26c8]
c001d7bf:	ff e0                	jmp    eax
c001d7c1:	8d 76 00             	lea    esi,[esi+0x0]
c001d7c4:	b8 80 d5 02 c0       	mov    eax,0xc002d580
c001d7c9:	e9 aa 00 00 00       	jmp    c001d878 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d7ce:	66 90                	xchg   ax,ax
c001d7d0:	b8 e6 d3 02 c0       	mov    eax,0xc002d3e6
c001d7d5:	e9 9e 00 00 00       	jmp    c001d878 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d7da:	66 90                	xchg   ax,ax
c001d7dc:	b8 f8 d3 02 c0       	mov    eax,0xc002d3f8
c001d7e1:	e9 92 00 00 00       	jmp    c001d878 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d7e6:	66 90                	xchg   ax,ax
c001d7e8:	b8 0a d4 02 c0       	mov    eax,0xc002d40a
c001d7ed:	e9 86 00 00 00       	jmp    c001d878 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d7f2:	66 90                	xchg   ax,ax
c001d7f4:	b8 23 d4 02 c0       	mov    eax,0xc002d423
c001d7f9:	eb 7d                	jmp    c001d878 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d7fb:	90                   	nop
c001d7fc:	b8 a0 d5 02 c0       	mov    eax,0xc002d5a0
c001d801:	eb 75                	jmp    c001d878 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d803:	90                   	nop
c001d804:	b8 c0 d5 02 c0       	mov    eax,0xc002d5c0
c001d809:	eb 6d                	jmp    c001d878 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d80b:	90                   	nop
c001d80c:	b8 3c d4 02 c0       	mov    eax,0xc002d43c
c001d811:	eb 65                	jmp    c001d878 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d813:	90                   	nop
c001d814:	b8 54 d4 02 c0       	mov    eax,0xc002d454
c001d819:	eb 5d                	jmp    c001d878 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d81b:	90                   	nop
c001d81c:	b8 e0 d5 02 c0       	mov    eax,0xc002d5e0
c001d821:	eb 55                	jmp    c001d878 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d823:	90                   	nop
c001d824:	b8 6f d4 02 c0       	mov    eax,0xc002d46f
c001d829:	eb 4d                	jmp    c001d878 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d82b:	90                   	nop
c001d82c:	b8 08 d6 02 c0       	mov    eax,0xc002d608
c001d831:	eb 45                	jmp    c001d878 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d833:	90                   	nop
c001d834:	b8 89 d4 02 c0       	mov    eax,0xc002d489
c001d839:	eb 3d                	jmp    c001d878 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d83b:	90                   	nop
c001d83c:	b8 2c d6 02 c0       	mov    eax,0xc002d62c
c001d841:	eb 35                	jmp    c001d878 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d843:	90                   	nop
c001d844:	b8 e1 d2 02 c0       	mov    eax,0xc002d2e1
c001d849:	eb 2d                	jmp    c001d878 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d84b:	90                   	nop
c001d84c:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c001d850:	0f b6 c8             	movzx  ecx,al
c001d853:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001d857:	0f b6 d0             	movzx  edx,al
c001d85a:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001d85e:	0f b6 c0             	movzx  eax,al
c001d861:	51                   	push   ecx
c001d862:	52                   	push   edx
c001d863:	50                   	push   eax
c001d864:	68 50 d6 02 c0       	push   0xc002d650
c001d869:	e8 f8 96 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001d86e:	83 c4 10             	add    esp,0x10
c001d871:	b8 a4 d4 02 c0       	mov    eax,0xc002d4a4
c001d876:	66 90                	xchg   ax,ax
c001d878:	83 c4 0c             	add    esp,0xc
c001d87b:	c3                   	ret    

c001d87c <PCIDriver::registerDevice(unsigned char, unsigned char, unsigned char)>:
c001d87c:	55                   	push   ebp
c001d87d:	89 e5                	mov    ebp,esp
c001d87f:	56                   	push   esi
c001d880:	53                   	push   ebx
c001d881:	83 c4 80             	add    esp,0xffffff80
c001d884:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d887:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c001d88a:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c001d88d:	88 45 84             	mov    BYTE PTR [ebp-0x7c],al
c001d890:	88 c8                	mov    al,cl
c001d892:	88 45 80             	mov    BYTE PTR [ebp-0x80],al
c001d895:	88 d0                	mov    al,dl
c001d897:	88 85 7c ff ff ff    	mov    BYTE PTR [ebp-0x84],al
c001d89d:	0f b6 8d 7c ff ff ff 	movzx  ecx,BYTE PTR [ebp-0x84]
c001d8a4:	0f b6 55 80          	movzx  edx,BYTE PTR [ebp-0x80]
c001d8a8:	0f b6 45 84          	movzx  eax,BYTE PTR [ebp-0x7c]
c001d8ac:	6a 0c                	push   0xc
c001d8ae:	51                   	push   ecx
c001d8af:	52                   	push   edx
c001d8b0:	50                   	push   eax
c001d8b1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d8b4:	e8 8f f5 ff ff       	call   c001ce48 <PCIDriver::readWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d8b9:	83 c4 14             	add    esp,0x14
c001d8bc:	0f b7 c0             	movzx  eax,ax
c001d8bf:	c1 f8 10             	sar    eax,0x10
c001d8c2:	25 ff 00 00 00       	and    eax,0xff
c001d8c7:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001d8ca:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c001d8ce:	0f 85 7c 02 00 00    	jne    c001db50 <PCIDriver::registerDevice(unsigned char, unsigned char, unsigned char)+0x2d4>
c001d8d4:	0f b6 8d 7c ff ff ff 	movzx  ecx,BYTE PTR [ebp-0x84]
c001d8db:	0f b6 55 80          	movzx  edx,BYTE PTR [ebp-0x80]
c001d8df:	0f b6 45 84          	movzx  eax,BYTE PTR [ebp-0x7c]
c001d8e3:	51                   	push   ecx
c001d8e4:	52                   	push   edx
c001d8e5:	50                   	push   eax
c001d8e6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d8e9:	e8 32 f7 ff ff       	call   c001d020 <PCIDriver::getVendorID(unsigned char, unsigned char, unsigned char)>
c001d8ee:	83 c4 10             	add    esp,0x10
c001d8f1:	66 89 45 e6          	mov    WORD PTR [ebp-0x1a],ax
c001d8f5:	0f b7 45 e6          	movzx  eax,WORD PTR [ebp-0x1a]
c001d8f9:	3d ff ff 00 00       	cmp    eax,0xffff
c001d8fe:	0f 84 50 02 00 00    	je     c001db54 <PCIDriver::registerDevice(unsigned char, unsigned char, unsigned char)+0x2d8>
c001d904:	0f b6 8d 7c ff ff ff 	movzx  ecx,BYTE PTR [ebp-0x84]
c001d90b:	0f b6 55 80          	movzx  edx,BYTE PTR [ebp-0x80]
c001d90f:	0f b6 45 84          	movzx  eax,BYTE PTR [ebp-0x7c]
c001d913:	51                   	push   ecx
c001d914:	52                   	push   edx
c001d915:	50                   	push   eax
c001d916:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d919:	e8 8a f7 ff ff       	call   c001d0a8 <PCIDriver::getClassCode(unsigned char, unsigned char, unsigned char)>
c001d91e:	83 c4 10             	add    esp,0x10
c001d921:	66 89 45 e4          	mov    WORD PTR [ebp-0x1c],ax
c001d925:	0f b6 8d 7c ff ff ff 	movzx  ecx,BYTE PTR [ebp-0x84]
c001d92c:	0f b6 55 80          	movzx  edx,BYTE PTR [ebp-0x80]
c001d930:	0f b6 45 84          	movzx  eax,BYTE PTR [ebp-0x7c]
c001d934:	51                   	push   ecx
c001d935:	52                   	push   edx
c001d936:	50                   	push   eax
c001d937:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d93a:	e8 75 f8 ff ff       	call   c001d1b4 <PCIDriver::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001d93f:	83 c4 10             	add    esp,0x10
c001d942:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
c001d945:	0f b6 8d 7c ff ff ff 	movzx  ecx,BYTE PTR [ebp-0x84]
c001d94c:	0f b6 55 80          	movzx  edx,BYTE PTR [ebp-0x80]
c001d950:	0f b6 45 84          	movzx  eax,BYTE PTR [ebp-0x7c]
c001d954:	6a 3c                	push   0x3c
c001d956:	51                   	push   ecx
c001d957:	52                   	push   edx
c001d958:	50                   	push   eax
c001d959:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d95c:	e8 e7 f4 ff ff       	call   c001ce48 <PCIDriver::readWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d961:	83 c4 14             	add    esp,0x14
c001d964:	0f b7 c0             	movzx  eax,ax
c001d967:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c001d96a:	c1 6d e0 08          	shr    DWORD PTR [ebp-0x20],0x8
c001d96e:	81 65 e0 ff 00 00 00 	and    DWORD PTR [ebp-0x20],0xff
c001d975:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c001d978:	88 45 b1             	mov    BYTE PTR [ebp-0x4f],al
c001d97b:	a1 08 61 03 c0       	mov    eax,ds:0xc0036108
c001d980:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001d986:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001d98c:	85 c0                	test   eax,eax
c001d98e:	74 7c                	je     c001da0c <PCIDriver::registerDevice(unsigned char, unsigned char, unsigned char)+0x190>
c001d990:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001d997:	90                   	nop
c001d998:	a1 08 61 03 c0       	mov    eax,ds:0xc0036108
c001d99d:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001d9a3:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001d9a9:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001d9ac:	7d 5e                	jge    c001da0c <PCIDriver::registerDevice(unsigned char, unsigned char, unsigned char)+0x190>
c001d9ae:	0f b6 55 80          	movzx  edx,BYTE PTR [ebp-0x80]
c001d9b2:	a1 08 61 03 c0       	mov    eax,ds:0xc0036108
c001d9b7:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001d9bd:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c001d9c0:	83 c1 2a             	add    ecx,0x2a
c001d9c3:	8b 44 c8 0c          	mov    eax,DWORD PTR [eax+ecx*8+0xc]
c001d9c7:	0f b7 c0             	movzx  eax,ax
c001d9ca:	39 c2                	cmp    edx,eax
c001d9cc:	75 36                	jne    c001da04 <PCIDriver::registerDevice(unsigned char, unsigned char, unsigned char)+0x188>
c001d9ce:	a1 08 61 03 c0       	mov    eax,ds:0xc0036108
c001d9d3:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001d9d9:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c001d9dc:	83 c2 2a             	add    edx,0x2a
c001d9df:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c001d9e3:	0f b6 c0             	movzx  eax,al
c001d9e6:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c001d9e9:	75 19                	jne    c001da04 <PCIDriver::registerDevice(unsigned char, unsigned char, unsigned char)+0x188>
c001d9eb:	a1 08 61 03 c0       	mov    eax,ds:0xc0036108
c001d9f0:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001d9f6:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c001d9f9:	83 c2 2a             	add    edx,0x2a
c001d9fc:	8a 44 d0 0f          	mov    al,BYTE PTR [eax+edx*8+0xf]
c001da00:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
c001da03:	90                   	nop
c001da04:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c001da08:	eb 8e                	jmp    c001d998 <PCIDriver::registerDevice(unsigned char, unsigned char, unsigned char)+0x11c>
c001da0a:	66 90                	xchg   ax,ax
c001da0c:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001da13:	90                   	nop
c001da14:	83 7d ec 05          	cmp    DWORD PTR [ebp-0x14],0x5
c001da18:	7f 36                	jg     c001da50 <PCIDriver::registerDevice(unsigned char, unsigned char, unsigned char)+0x1d4>
c001da1a:	0f b6 9d 7c ff ff ff 	movzx  ebx,BYTE PTR [ebp-0x84]
c001da21:	0f b6 4d 80          	movzx  ecx,BYTE PTR [ebp-0x80]
c001da25:	0f b6 55 84          	movzx  edx,BYTE PTR [ebp-0x7c]
c001da29:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001da2c:	0f b6 c0             	movzx  eax,al
c001da2f:	53                   	push   ebx
c001da30:	51                   	push   ecx
c001da31:	52                   	push   edx
c001da32:	50                   	push   eax
c001da33:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001da36:	e8 05 f8 ff ff       	call   c001d240 <PCIDriver::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001da3b:	83 c4 14             	add    esp,0x14
c001da3e:	89 c2                	mov    edx,eax
c001da40:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001da43:	89 54 85 98          	mov    DWORD PTR [ebp+eax*4-0x68],edx
c001da47:	83 45 ec 01          	add    DWORD PTR [ebp-0x14],0x1
c001da4b:	eb c7                	jmp    c001da14 <PCIDriver::registerDevice(unsigned char, unsigned char, unsigned char)+0x198>
c001da4d:	8d 76 00             	lea    esi,[esi+0x0]
c001da50:	8a 45 84             	mov    al,BYTE PTR [ebp-0x7c]
c001da53:	88 45 94             	mov    BYTE PTR [ebp-0x6c],al
c001da56:	8a 45 80             	mov    al,BYTE PTR [ebp-0x80]
c001da59:	88 45 95             	mov    BYTE PTR [ebp-0x6b],al
c001da5c:	8a 85 7c ff ff ff    	mov    al,BYTE PTR [ebp-0x84]
c001da62:	88 45 96             	mov    BYTE PTR [ebp-0x6a],al
c001da65:	0f b7 45 e4          	movzx  eax,WORD PTR [ebp-0x1c]
c001da69:	c1 f8 08             	sar    eax,0x8
c001da6c:	88 45 90             	mov    BYTE PTR [ebp-0x70],al
c001da6f:	66 8b 45 e4          	mov    ax,WORD PTR [ebp-0x1c]
c001da73:	88 45 91             	mov    BYTE PTR [ebp-0x6f],al
c001da76:	8a 45 96             	mov    al,BYTE PTR [ebp-0x6a]
c001da79:	0f b6 c8             	movzx  ecx,al
c001da7c:	8a 45 95             	mov    al,BYTE PTR [ebp-0x6b]
c001da7f:	0f b6 d0             	movzx  edx,al
c001da82:	8a 45 94             	mov    al,BYTE PTR [ebp-0x6c]
c001da85:	0f b6 c0             	movzx  eax,al
c001da88:	6a 02                	push   0x2
c001da8a:	51                   	push   ecx
c001da8b:	52                   	push   edx
c001da8c:	50                   	push   eax
c001da8d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001da90:	e8 b3 f3 ff ff       	call   c001ce48 <PCIDriver::readWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001da95:	83 c4 14             	add    esp,0x14
c001da98:	66 89 45 b2          	mov    WORD PTR [ebp-0x4e],ax
c001da9c:	0f b6 8d 7c ff ff ff 	movzx  ecx,BYTE PTR [ebp-0x84]
c001daa3:	0f b6 55 80          	movzx  edx,BYTE PTR [ebp-0x80]
c001daa7:	0f b6 45 84          	movzx  eax,BYTE PTR [ebp-0x7c]
c001daab:	51                   	push   ecx
c001daac:	52                   	push   edx
c001daad:	50                   	push   eax
c001daae:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001dab1:	e8 72 f6 ff ff       	call   c001d128 <PCIDriver::getProgIF(unsigned char, unsigned char, unsigned char)>
c001dab6:	83 c4 10             	add    esp,0x10
c001dab9:	88 45 97             	mov    BYTE PTR [ebp-0x69],al
c001dabc:	66 8b 45 e6          	mov    ax,WORD PTR [ebp-0x1a]
c001dac0:	66 89 45 92          	mov    WORD PTR [ebp-0x6e],ax
c001dac4:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001dac7:	88 45 b0             	mov    BYTE PTR [ebp-0x50],al
c001daca:	b8 24 00 00 00       	mov    eax,0x24
c001dacf:	83 e0 fc             	and    eax,0xfffffffc
c001dad2:	89 c1                	mov    ecx,eax
c001dad4:	b8 00 00 00 00       	mov    eax,0x0
c001dad9:	8d 76 00             	lea    esi,[esi+0x0]
c001dadc:	8b 54 05 90          	mov    edx,DWORD PTR [ebp+eax*1-0x70]
c001dae0:	89 54 05 b4          	mov    DWORD PTR [ebp+eax*1-0x4c],edx
c001dae4:	83 c0 04             	add    eax,0x4
c001dae7:	39 c8                	cmp    eax,ecx
c001dae9:	72 f1                	jb     c001dadc <PCIDriver::registerDevice(unsigned char, unsigned char, unsigned char)+0x260>
c001daeb:	c7 45 d8 88 01 00 00 	mov    DWORD PTR [ebp-0x28],0x188
c001daf2:	83 ec 0c             	sub    esp,0xc
c001daf5:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
c001daf8:	e8 0f 26 ff ff       	call   c001010c <malloc>
c001dafd:	83 c4 10             	add    esp,0x10
c001db00:	89 c3                	mov    ebx,eax
c001db02:	83 ec 08             	sub    esp,0x8
c001db05:	83 ec 24             	sub    esp,0x24
c001db08:	89 e1                	mov    ecx,esp
c001db0a:	b8 24 00 00 00       	mov    eax,0x24
c001db0f:	83 e0 fc             	and    eax,0xfffffffc
c001db12:	89 c6                	mov    esi,eax
c001db14:	b8 00 00 00 00       	mov    eax,0x0
c001db19:	8d 76 00             	lea    esi,[esi+0x0]
c001db1c:	8b 54 05 b4          	mov    edx,DWORD PTR [ebp+eax*1-0x4c]
c001db20:	89 14 01             	mov    DWORD PTR [ecx+eax*1],edx
c001db23:	83 c0 04             	add    eax,0x4
c001db26:	39 f0                	cmp    eax,esi
c001db28:	72 f2                	jb     c001db1c <PCIDriver::registerDevice(unsigned char, unsigned char, unsigned char)+0x2a0>
c001db2a:	53                   	push   ebx
c001db2b:	e8 88 ba 00 00       	call   c00295b8 <UnknownHardware::UnknownHardware(DevicePCIConnectionInfo)>
c001db30:	83 c4 30             	add    esp,0x30
c001db33:	89 5d dc             	mov    DWORD PTR [ebp-0x24],ebx
c001db36:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001db39:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001db3c:	83 ec 08             	sub    esp,0x8
c001db3f:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
c001db42:	50                   	push   eax
c001db43:	e8 20 9e fe ff       	call   c0007968 <Hardware::addChild(Hardware*)>
c001db48:	83 c4 10             	add    esp,0x10
c001db4b:	eb 0b                	jmp    c001db58 <PCIDriver::registerDevice(unsigned char, unsigned char, unsigned char)+0x2dc>
c001db4d:	8d 76 00             	lea    esi,[esi+0x0]
c001db50:	90                   	nop
c001db51:	eb 05                	jmp    c001db58 <PCIDriver::registerDevice(unsigned char, unsigned char, unsigned char)+0x2dc>
c001db53:	90                   	nop
c001db54:	90                   	nop
c001db55:	8d 76 00             	lea    esi,[esi+0x0]
c001db58:	8d 65 f8             	lea    esp,[ebp-0x8]
c001db5b:	5b                   	pop    ebx
c001db5c:	5e                   	pop    esi
c001db5d:	5d                   	pop    ebp
c001db5e:	c3                   	ret    
c001db5f:	90                   	nop

c001db60 <PCIDriver::checkDevice(unsigned char, unsigned char)>:
c001db60:	83 ec 2c             	sub    esp,0x2c
c001db63:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001db67:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001db6b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001db6f:	88 d0                	mov    al,dl
c001db71:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001db75:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001db7a:	0f b6 4c 24 1f       	movzx  ecx,BYTE PTR [esp+0x1f]
c001db7f:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001db84:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001db89:	51                   	push   ecx
c001db8a:	52                   	push   edx
c001db8b:	50                   	push   eax
c001db8c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001db90:	e8 8b f4 ff ff       	call   c001d020 <PCIDriver::getVendorID(unsigned char, unsigned char, unsigned char)>
c001db95:	83 c4 10             	add    esp,0x10
c001db98:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c001db9d:	0f b6 4c 24 1f       	movzx  ecx,BYTE PTR [esp+0x1f]
c001dba2:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001dba7:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001dbac:	51                   	push   ecx
c001dbad:	52                   	push   edx
c001dbae:	50                   	push   eax
c001dbaf:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001dbb3:	e8 c4 fc ff ff       	call   c001d87c <PCIDriver::registerDevice(unsigned char, unsigned char, unsigned char)>
c001dbb8:	83 c4 10             	add    esp,0x10
c001dbbb:	0f b6 4c 24 1f       	movzx  ecx,BYTE PTR [esp+0x1f]
c001dbc0:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001dbc5:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001dbca:	51                   	push   ecx
c001dbcb:	52                   	push   edx
c001dbcc:	50                   	push   eax
c001dbcd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001dbd1:	e8 8e f4 ff ff       	call   c001d064 <PCIDriver::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001dbd6:	83 c4 10             	add    esp,0x10
c001dbd9:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001dbdd:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c001dbe1:	0f be c0             	movsx  eax,al
c001dbe4:	85 c0                	test   eax,eax
c001dbe6:	0f 89 70 00 00 00    	jns    c001dc5c <PCIDriver::checkDevice(unsigned char, unsigned char)+0xfc>
c001dbec:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001dbf1:	8d 76 00             	lea    esi,[esi+0x0]
c001dbf4:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c001dbf9:	83 f8 07             	cmp    eax,0x7
c001dbfc:	77 5e                	ja     c001dc5c <PCIDriver::checkDevice(unsigned char, unsigned char)+0xfc>
c001dbfe:	0f b6 4c 24 1f       	movzx  ecx,BYTE PTR [esp+0x1f]
c001dc03:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001dc08:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001dc0d:	51                   	push   ecx
c001dc0e:	52                   	push   edx
c001dc0f:	50                   	push   eax
c001dc10:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001dc14:	e8 07 f4 ff ff       	call   c001d020 <PCIDriver::getVendorID(unsigned char, unsigned char, unsigned char)>
c001dc19:	83 c4 10             	add    esp,0x10
c001dc1c:	0f b7 c0             	movzx  eax,ax
c001dc1f:	3d ff ff 00 00       	cmp    eax,0xffff
c001dc24:	0f 95 c0             	setne  al
c001dc27:	0f b6 c0             	movzx  eax,al
c001dc2a:	85 c0                	test   eax,eax
c001dc2c:	74 1e                	je     c001dc4c <PCIDriver::checkDevice(unsigned char, unsigned char)+0xec>
c001dc2e:	0f b6 4c 24 1f       	movzx  ecx,BYTE PTR [esp+0x1f]
c001dc33:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001dc38:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001dc3d:	51                   	push   ecx
c001dc3e:	52                   	push   edx
c001dc3f:	50                   	push   eax
c001dc40:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001dc44:	e8 33 fc ff ff       	call   c001d87c <PCIDriver::registerDevice(unsigned char, unsigned char, unsigned char)>
c001dc49:	83 c4 10             	add    esp,0x10
c001dc4c:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001dc50:	83 c0 01             	add    eax,0x1
c001dc53:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001dc57:	eb 9b                	jmp    c001dbf4 <PCIDriver::checkDevice(unsigned char, unsigned char)+0x94>
c001dc59:	8d 76 00             	lea    esi,[esi+0x0]
c001dc5c:	90                   	nop
c001dc5d:	83 c4 2c             	add    esp,0x2c
c001dc60:	c3                   	ret    
c001dc61:	90                   	nop
c001dc62:	66 90                	xchg   ax,ax

c001dc64 <PCIDriver::checkBus(unsigned char)>:
c001dc64:	83 ec 2c             	sub    esp,0x2c
c001dc67:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001dc6b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001dc6f:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001dc74:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c001dc79:	83 f8 1f             	cmp    eax,0x1f
c001dc7c:	77 2a                	ja     c001dca8 <PCIDriver::checkBus(unsigned char)+0x44>
c001dc7e:	0f b6 54 24 1f       	movzx  edx,BYTE PTR [esp+0x1f]
c001dc83:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001dc88:	83 ec 04             	sub    esp,0x4
c001dc8b:	52                   	push   edx
c001dc8c:	50                   	push   eax
c001dc8d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001dc91:	e8 ca fe ff ff       	call   c001db60 <PCIDriver::checkDevice(unsigned char, unsigned char)>
c001dc96:	83 c4 10             	add    esp,0x10
c001dc99:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001dc9d:	83 c0 01             	add    eax,0x1
c001dca0:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001dca4:	eb ce                	jmp    c001dc74 <PCIDriver::checkBus(unsigned char)+0x10>
c001dca6:	66 90                	xchg   ax,ax
c001dca8:	90                   	nop
c001dca9:	83 c4 2c             	add    esp,0x2c
c001dcac:	c3                   	ret    
c001dcad:	90                   	nop
c001dcae:	66 90                	xchg   ax,ax

c001dcb0 <PCIDriver::enumerateDevices()>:
c001dcb0:	83 ec 1c             	sub    esp,0x1c
c001dcb3:	6a 00                	push   0x0
c001dcb5:	6a 00                	push   0x0
c001dcb7:	6a 00                	push   0x0
c001dcb9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dcbd:	e8 a2 f3 ff ff       	call   c001d064 <PCIDriver::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001dcc2:	83 c4 10             	add    esp,0x10
c001dcc5:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c001dcca:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c001dccf:	25 80 00 00 00       	and    eax,0x80
c001dcd4:	75 16                	jne    c001dcec <PCIDriver::enumerateDevices()+0x3c>
c001dcd6:	83 ec 08             	sub    esp,0x8
c001dcd9:	6a 00                	push   0x0
c001dcdb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dcdf:	e8 80 ff ff ff       	call   c001dc64 <PCIDriver::checkBus(unsigned char)>
c001dce4:	83 c4 10             	add    esp,0x10
c001dce7:	eb 63                	jmp    c001dd4c <PCIDriver::enumerateDevices()+0x9c>
c001dce9:	8d 76 00             	lea    esi,[esi+0x0]
c001dcec:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001dcf1:	8d 76 00             	lea    esi,[esi+0x0]
c001dcf4:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001dcf9:	83 f8 07             	cmp    eax,0x7
c001dcfc:	77 4e                	ja     c001dd4c <PCIDriver::enumerateDevices()+0x9c>
c001dcfe:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001dd03:	50                   	push   eax
c001dd04:	6a 00                	push   0x0
c001dd06:	6a 00                	push   0x0
c001dd08:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dd0c:	e8 0f f3 ff ff       	call   c001d020 <PCIDriver::getVendorID(unsigned char, unsigned char, unsigned char)>
c001dd11:	83 c4 10             	add    esp,0x10
c001dd14:	0f b7 c0             	movzx  eax,ax
c001dd17:	3d ff ff 00 00       	cmp    eax,0xffff
c001dd1c:	0f 95 c0             	setne  al
c001dd1f:	0f b6 c0             	movzx  eax,al
c001dd22:	85 c0                	test   eax,eax
c001dd24:	75 22                	jne    c001dd48 <PCIDriver::enumerateDevices()+0x98>
c001dd26:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001dd2b:	83 ec 08             	sub    esp,0x8
c001dd2e:	50                   	push   eax
c001dd2f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dd33:	e8 2c ff ff ff       	call   c001dc64 <PCIDriver::checkBus(unsigned char)>
c001dd38:	83 c4 10             	add    esp,0x10
c001dd3b:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001dd3f:	83 c0 01             	add    eax,0x1
c001dd42:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001dd46:	eb ac                	jmp    c001dcf4 <PCIDriver::enumerateDevices()+0x44>
c001dd48:	90                   	nop
c001dd49:	8d 76 00             	lea    esi,[esi+0x0]
c001dd4c:	90                   	nop
c001dd4d:	83 c4 1c             	add    esp,0x1c
c001dd50:	c3                   	ret    
c001dd51:	90                   	nop
c001dd52:	66 90                	xchg   ax,ax

c001dd54 <PCIDriver::initialise()>:
c001dd54:	83 ec 0c             	sub    esp,0xc
c001dd57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd5b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001dd5e:	6a 04                	push   0x4
c001dd60:	6a 08                	push   0x8
c001dd62:	68 f8 0c 00 00       	push   0xcf8
c001dd67:	50                   	push   eax
c001dd68:	e8 ad 9d fe ff       	call   c0007b1a <Hardware::registerPortRange(unsigned short, unsigned char, int)>
c001dd6d:	83 c4 10             	add    esp,0x10
c001dd70:	83 ec 0c             	sub    esp,0xc
c001dd73:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dd77:	e8 34 ff ff ff       	call   c001dcb0 <PCIDriver::enumerateDevices()>
c001dd7c:	83 c4 10             	add    esp,0x10
c001dd7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd83:	8b 00                	mov    eax,DWORD PTR [eax]
c001dd85:	83 c0 08             	add    eax,0x8
c001dd88:	8b 00                	mov    eax,DWORD PTR [eax]
c001dd8a:	83 ec 0c             	sub    esp,0xc
c001dd8d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dd91:	ff d0                	call   eax
c001dd93:	83 c4 10             	add    esp,0x10
c001dd96:	90                   	nop
c001dd97:	83 c4 0c             	add    esp,0xc
c001dd9a:	c3                   	ret    
c001dd9b:	90                   	nop

c001dd9c <PCIDriver::detect()>:
c001dd9c:	83 ec 2c             	sub    esp,0x2c
c001dd9f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dda3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001dda6:	83 c0 74             	add    eax,0x74
c001dda9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ddad:	8d 44 24 10          	lea    eax,[esp+0x10]
c001ddb1:	83 ec 08             	sub    esp,0x8
c001ddb4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001ddb8:	50                   	push   eax
c001ddb9:	e8 a2 a3 00 00       	call   c0028160 <std::vector<Hardware*>::begin()>
c001ddbe:	83 c4 0c             	add    esp,0xc
c001ddc1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001ddc5:	83 ec 08             	sub    esp,0x8
c001ddc8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001ddcc:	50                   	push   eax
c001ddcd:	e8 b2 a3 00 00       	call   c0028184 <std::vector<Hardware*>::end()>
c001ddd2:	83 c4 0c             	add    esp,0xc
c001ddd5:	8d 76 00             	lea    esi,[esi+0x0]
c001ddd8:	83 ec 08             	sub    esp,0x8
c001dddb:	8d 44 24 14          	lea    eax,[esp+0x14]
c001dddf:	50                   	push   eax
c001dde0:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001dde4:	50                   	push   eax
c001dde5:	e8 56 a0 00 00       	call   c0027e40 <std::vector<Hardware*>::iterator::operator!=(std::vector<Hardware*>::iterator const&) const>
c001ddea:	83 c4 10             	add    esp,0x10
c001dded:	0f b6 c0             	movzx  eax,al
c001ddf0:	85 c0                	test   eax,eax
c001ddf2:	74 3c                	je     c001de30 <PCIDriver::detect()+0x94>
c001ddf4:	83 ec 0c             	sub    esp,0xc
c001ddf7:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001ddfb:	50                   	push   eax
c001ddfc:	e8 53 a0 00 00       	call   c0027e54 <std::vector<Hardware*>::iterator::operator*() const>
c001de01:	83 c4 10             	add    esp,0x10
c001de04:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001de08:	8d 44 24 14          	lea    eax,[esp+0x14]
c001de0c:	83 ec 08             	sub    esp,0x8
c001de0f:	8d 54 24 18          	lea    edx,[esp+0x18]
c001de13:	52                   	push   edx
c001de14:	50                   	push   eax
c001de15:	e8 8e a3 00 00       	call   c00281a8 <std::vector<Hardware*>::iterator::operator++()>
c001de1a:	83 c4 0c             	add    esp,0xc
c001de1d:	83 ec 0c             	sub    esp,0xc
c001de20:	8d 44 24 20          	lea    eax,[esp+0x20]
c001de24:	50                   	push   eax
c001de25:	e8 02 a0 00 00       	call   c0027e2c <std::vector<Hardware*>::iterator::~iterator()>
c001de2a:	83 c4 10             	add    esp,0x10
c001de2d:	eb a9                	jmp    c001ddd8 <PCIDriver::detect()+0x3c>
c001de2f:	90                   	nop
c001de30:	83 ec 0c             	sub    esp,0xc
c001de33:	8d 44 24 18          	lea    eax,[esp+0x18]
c001de37:	50                   	push   eax
c001de38:	e8 ef 9f 00 00       	call   c0027e2c <std::vector<Hardware*>::iterator::~iterator()>
c001de3d:	83 c4 10             	add    esp,0x10
c001de40:	83 ec 0c             	sub    esp,0xc
c001de43:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001de47:	50                   	push   eax
c001de48:	e8 df 9f 00 00       	call   c0027e2c <std::vector<Hardware*>::iterator::~iterator()>
c001de4d:	83 c4 10             	add    esp,0x10
c001de50:	90                   	nop
c001de51:	83 c4 2c             	add    esp,0x2c
c001de54:	c3                   	ret    
c001de55:	90                   	nop

c001de56 <RS232Serial::detect()>:
c001de56:	c3                   	ret    
c001de57:	90                   	nop

c001de58 <RS232Serial::deinitialise()>:
c001de58:	c3                   	ret    
c001de59:	90                   	nop

c001de5a <RS232Serial::setPowerState(DevicePowerState)>:
c001de5a:	c3                   	ret    
c001de5b:	90                   	nop

c001de5c <RS232Serial::getHumanReadableName()>:
c001de5c:	b8 e8 d9 02 c0       	mov    eax,0xc002d9e8
c001de61:	c3                   	ret    

c001de62 <RS232Serial::areInterruptsSupported()>:
c001de62:	b0 01                	mov    al,0x1
c001de64:	c3                   	ret    
c001de65:	90                   	nop

c001de66 <RS232Serial::areInterruptsEnabled()>:
c001de66:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001de6a:	8a 40 1c             	mov    al,BYTE PTR [eax+0x1c]
c001de6d:	c3                   	ret    

c001de6e <RS232Serial::getBaud()>:
c001de6e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001de72:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c001de75:	c3                   	ret    

c001de76 <RS232Serial::getNumberBytesInIRQBuffer()>:
c001de76:	31 c0                	xor    eax,eax
c001de78:	c3                   	ret    
c001de79:	90                   	nop

c001de7a <RS232Serial::getMaximumBytesInIRQBuffer()>:
c001de7a:	31 c0                	xor    eax,eax
c001de7c:	c3                   	ret    
c001de7d:	90                   	nop

c001de7e <RS232Serial::emptyBuffer()>:
c001de7e:	c3                   	ret    
c001de7f:	90                   	nop

c001de80 <RS232Serial::waitForData()>:
c001de80:	53                   	push   ebx
c001de81:	83 ec 08             	sub    esp,0x8
c001de84:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001de88:	8b 03                	mov    eax,DWORD PTR [ebx]
c001de8a:	83 ec 0c             	sub    esp,0xc
c001de8d:	53                   	push   ebx
c001de8e:	ff 50 48             	call   DWORD PTR [eax+0x48]
c001de91:	83 c4 10             	add    esp,0x10
c001de94:	84 c0                	test   al,al
c001de96:	74 f0                	je     c001de88 <RS232Serial::waitForData()+0x8>
c001de98:	83 c4 08             	add    esp,0x8
c001de9b:	5b                   	pop    ebx
c001de9c:	c3                   	ret    
c001de9d:	90                   	nop

c001de9e <RS232Serial::isParityModeSupported(SerialParityMode)>:
c001de9e:	83 7c 24 08 04       	cmp    DWORD PTR [esp+0x8],0x4
c001dea3:	0f 96 c0             	setbe  al
c001dea6:	c3                   	ret    
c001dea7:	90                   	nop

c001dea8 <RS232Serial::getPartityMode()>:
c001dea8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001deac:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001deaf:	c3                   	ret    

c001deb0 <RS232Serial::isTransmissionSizeValid(int)>:
c001deb0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001deb4:	83 e8 05             	sub    eax,0x5
c001deb7:	83 f8 03             	cmp    eax,0x3
c001deba:	0f 96 c0             	setbe  al
c001debd:	c3                   	ret    

c001debe <RS232Serial::getTransmissionSize()>:
c001debe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dec2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001dec5:	c3                   	ret    

c001dec6 <RS232Serial::isNumberOfStopBitsValid(int)>:
c001dec6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001deca:	48                   	dec    eax
c001decb:	83 f8 01             	cmp    eax,0x1
c001dece:	0f 96 c0             	setbe  al
c001ded1:	c3                   	ret    

c001ded2 <RS232Serial::getNumberOfStopBits()>:
c001ded2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ded6:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001ded9:	c3                   	ret    

c001deda <RS232Serial::supportsHardwareStopBits()>:
c001deda:	b0 01                	mov    al,0x1
c001dedc:	c3                   	ret    
c001dedd:	90                   	nop

c001dede <RS232Serial::supportsHardwareParity()>:
c001dede:	b0 01                	mov    al,0x1
c001dee0:	c3                   	ret    
c001dee1:	90                   	nop

c001dee2 <RS232Serial::initialise()>:
c001dee2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dee6:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001dee9:	83 7a 70 00          	cmp    DWORD PTR [edx+0x70],0x0
c001deed:	75 08                	jne    c001def7 <RS232Serial::initialise()+0x15>
c001deef:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001def2:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c001def6:	c3                   	ret    
c001def7:	c7 44 24 04 06 da 02 c0 	mov    DWORD PTR [esp+0x4],0xc002da06
c001deff:	e9 5c 26 ff ff       	jmp    c0010560 <KePanic(char const*)>

c001df04 <RS232Serial::enableInterrupts(bool)>:
c001df04:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001df08:	8a 54 24 08          	mov    dl,BYTE PTR [esp+0x8]
c001df0c:	88 50 1c             	mov    BYTE PTR [eax+0x1c],dl
c001df0f:	c7 44 24 04 28 da 02 c0 	mov    DWORD PTR [esp+0x4],0xc002da28
c001df17:	e9 44 26 ff ff       	jmp    c0010560 <KePanic(char const*)>

c001df1c <RS232Serial::setBaud(int)>:
c001df1c:	53                   	push   ebx
c001df1d:	83 ec 10             	sub    esp,0x10
c001df20:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001df24:	8b 03                	mov    eax,DWORD PTR [ebx]
c001df26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001df2a:	53                   	push   ebx
c001df2b:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001df2e:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c001df31:	c7 44 24 20 3b da 02 c0 	mov    DWORD PTR [esp+0x20],0xc002da3b
c001df39:	83 c4 18             	add    esp,0x18
c001df3c:	5b                   	pop    ebx
c001df3d:	e9 1e 26 ff ff       	jmp    c0010560 <KePanic(char const*)>

c001df42 <RS232Serial::getClosestSupportedBaud(int)>:
c001df42:	83 ec 18             	sub    esp,0x18
c001df45:	68 4a da 02 c0       	push   0xc002da4a
c001df4a:	e8 11 26 ff ff       	call   c0010560 <KePanic(char const*)>
c001df4f:	31 c0                	xor    eax,eax
c001df51:	83 c4 1c             	add    esp,0x1c
c001df54:	c3                   	ret    
c001df55:	90                   	nop

c001df56 <RS232Serial::write(unsigned char)>:
c001df56:	c7 44 24 04 68 da 02 c0 	mov    DWORD PTR [esp+0x4],0xc002da68
c001df5e:	e9 fd 25 ff ff       	jmp    c0010560 <KePanic(char const*)>
c001df63:	90                   	nop

c001df64 <RS232Serial::getHardwareBufferSize()>:
c001df64:	83 ec 18             	sub    esp,0x18
c001df67:	68 7f da 02 c0       	push   0xc002da7f
c001df6c:	e8 ef 25 ff ff       	call   c0010560 <KePanic(char const*)>
c001df71:	31 c0                	xor    eax,eax
c001df73:	83 c4 1c             	add    esp,0x1c
c001df76:	c3                   	ret    
c001df77:	90                   	nop

c001df78 <RS232Serial::isDataReady()>:
c001df78:	83 ec 18             	sub    esp,0x18
c001df7b:	68 a2 da 02 c0       	push   0xc002daa2
c001df80:	e8 db 25 ff ff       	call   c0010560 <KePanic(char const*)>
c001df85:	31 c0                	xor    eax,eax
c001df87:	83 c4 1c             	add    esp,0x1c
c001df8a:	c3                   	ret    
c001df8b:	90                   	nop

c001df8c <RS232Serial::setParityMode(SerialParityMode)>:
c001df8c:	56                   	push   esi
c001df8d:	53                   	push   ebx
c001df8e:	83 ec 0c             	sub    esp,0xc
c001df91:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001df95:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001df99:	8b 03                	mov    eax,DWORD PTR [ebx]
c001df9b:	56                   	push   esi
c001df9c:	53                   	push   ebx
c001df9d:	ff 50 50             	call   DWORD PTR [eax+0x50]
c001dfa0:	83 c4 10             	add    esp,0x10
c001dfa3:	84 c0                	test   al,al
c001dfa5:	74 13                	je     c001dfba <RS232Serial::setParityMode(SerialParityMode)+0x2e>
c001dfa7:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c001dfaa:	c7 44 24 10 bb da 02 c0 	mov    DWORD PTR [esp+0x10],0xc002dabb
c001dfb2:	5a                   	pop    edx
c001dfb3:	5b                   	pop    ebx
c001dfb4:	5e                   	pop    esi
c001dfb5:	e9 a6 25 ff ff       	jmp    c0010560 <KePanic(char const*)>
c001dfba:	58                   	pop    eax
c001dfbb:	5b                   	pop    ebx
c001dfbc:	5e                   	pop    esi
c001dfbd:	c3                   	ret    

c001dfbe <RS232Serial::setTransmissionSize(int)>:
c001dfbe:	56                   	push   esi
c001dfbf:	53                   	push   ebx
c001dfc0:	83 ec 0c             	sub    esp,0xc
c001dfc3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001dfc7:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001dfcb:	8b 03                	mov    eax,DWORD PTR [ebx]
c001dfcd:	56                   	push   esi
c001dfce:	53                   	push   ebx
c001dfcf:	ff 50 5c             	call   DWORD PTR [eax+0x5c]
c001dfd2:	83 c4 10             	add    esp,0x10
c001dfd5:	84 c0                	test   al,al
c001dfd7:	74 13                	je     c001dfec <RS232Serial::setTransmissionSize(int)+0x2e>
c001dfd9:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c001dfdc:	c7 44 24 10 d6 da 02 c0 	mov    DWORD PTR [esp+0x10],0xc002dad6
c001dfe4:	5a                   	pop    edx
c001dfe5:	5b                   	pop    ebx
c001dfe6:	5e                   	pop    esi
c001dfe7:	e9 74 25 ff ff       	jmp    c0010560 <KePanic(char const*)>
c001dfec:	58                   	pop    eax
c001dfed:	5b                   	pop    ebx
c001dfee:	5e                   	pop    esi
c001dfef:	c3                   	ret    

c001dff0 <RS232Serial::setNumberOfStopBits(int)>:
c001dff0:	56                   	push   esi
c001dff1:	53                   	push   ebx
c001dff2:	83 ec 0c             	sub    esp,0xc
c001dff5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001dff9:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001dffd:	8b 03                	mov    eax,DWORD PTR [ebx]
c001dfff:	56                   	push   esi
c001e000:	53                   	push   ebx
c001e001:	ff 50 68             	call   DWORD PTR [eax+0x68]
c001e004:	83 c4 10             	add    esp,0x10
c001e007:	84 c0                	test   al,al
c001e009:	74 13                	je     c001e01e <RS232Serial::setNumberOfStopBits(int)+0x2e>
c001e00b:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c001e00e:	c7 44 24 10 f7 da 02 c0 	mov    DWORD PTR [esp+0x10],0xc002daf7
c001e016:	5a                   	pop    edx
c001e017:	5b                   	pop    ebx
c001e018:	5e                   	pop    esi
c001e019:	e9 42 25 ff ff       	jmp    c0010560 <KePanic(char const*)>
c001e01e:	58                   	pop    eax
c001e01f:	5b                   	pop    ebx
c001e020:	5e                   	pop    esi
c001e021:	c3                   	ret    

c001e022 <RS232Serial::didAnyErrorsOccur()>:
c001e022:	83 ec 18             	sub    esp,0x18
c001e025:	68 18 db 02 c0       	push   0xc002db18
c001e02a:	e8 31 25 ff ff       	call   c0010560 <KePanic(char const*)>
c001e02f:	31 c0                	xor    eax,eax
c001e031:	83 c4 1c             	add    esp,0x1c
c001e034:	c3                   	ret    
c001e035:	90                   	nop

c001e036 <RS232Serial::clearAllErrors()>:
c001e036:	c7 44 24 04 37 db 02 c0 	mov    DWORD PTR [esp+0x4],0xc002db37
c001e03e:	e9 1d 25 ff ff       	jmp    c0010560 <KePanic(char const*)>
c001e043:	90                   	nop

c001e044 <RS232Serial::clearFirstError()>:
c001e044:	c7 44 24 04 53 db 02 c0 	mov    DWORD PTR [esp+0x4],0xc002db53
c001e04c:	e9 0f 25 ff ff       	jmp    c0010560 <KePanic(char const*)>
c001e051:	90                   	nop

c001e052 <RS232Serial::getFirstError()>:
c001e052:	83 ec 18             	sub    esp,0x18
c001e055:	68 70 db 02 c0       	push   0xc002db70
c001e05a:	e8 01 25 ff ff       	call   c0010560 <KePanic(char const*)>
c001e05f:	b8 01 00 00 00       	mov    eax,0x1
c001e064:	83 c4 1c             	add    esp,0x1c
c001e067:	c3                   	ret    

c001e068 <RS232Serial::read()>:
c001e068:	83 ec 18             	sub    esp,0x18
c001e06b:	68 8b db 02 c0       	push   0xc002db8b
c001e070:	e8 eb 24 ff ff       	call   c0010560 <KePanic(char const*)>
c001e075:	66 90                	xchg   ax,ax
c001e077:	90                   	nop

c001e078 <FAT::getName()>:
c001e078:	b8 30 dc 02 c0       	mov    eax,0xc002dc30
c001e07d:	c3                   	ret    
c001e07e:	66 90                	xchg   ax,ax

c001e080 <FAT::tell(void*, unsigned long long*)>:
c001e080:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001e085:	75 09                	jne    c001e090 <FAT::tell(void*, unsigned long long*)+0x10>
c001e087:	b8 04 00 00 00       	mov    eax,0x4
c001e08c:	c3                   	ret    
c001e08d:	8d 76 00             	lea    esi,[esi+0x0]
c001e090:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001e095:	75 09                	jne    c001e0a0 <FAT::tell(void*, unsigned long long*)+0x20>
c001e097:	b8 04 00 00 00       	mov    eax,0x4
c001e09c:	c3                   	ret    
c001e09d:	8d 76 00             	lea    esi,[esi+0x0]
c001e0a0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e0a4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001e0a7:	ba 00 00 00 00       	mov    edx,0x0
c001e0ac:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e0b0:	89 01                	mov    DWORD PTR [ecx],eax
c001e0b2:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001e0b5:	b8 00 00 00 00       	mov    eax,0x0
c001e0ba:	c3                   	ret    
c001e0bb:	90                   	nop

c001e0bc <FAT::stat(void*, unsigned long long*)>:
c001e0bc:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001e0c1:	75 09                	jne    c001e0cc <FAT::stat(void*, unsigned long long*)+0x10>
c001e0c3:	b8 04 00 00 00       	mov    eax,0x4
c001e0c8:	c3                   	ret    
c001e0c9:	8d 76 00             	lea    esi,[esi+0x0]
c001e0cc:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001e0d1:	75 09                	jne    c001e0dc <FAT::stat(void*, unsigned long long*)+0x20>
c001e0d3:	b8 04 00 00 00       	mov    eax,0x4
c001e0d8:	c3                   	ret    
c001e0d9:	8d 76 00             	lea    esi,[esi+0x0]
c001e0dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e0e0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001e0e3:	ba 00 00 00 00       	mov    edx,0x0
c001e0e8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e0ec:	89 01                	mov    DWORD PTR [ecx],eax
c001e0ee:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001e0f1:	b8 00 00 00 00       	mov    eax,0x0
c001e0f6:	c3                   	ret    
c001e0f7:	90                   	nop

c001e0f8 <FAT::~FAT()>:
c001e0f8:	83 ec 0c             	sub    esp,0xc
c001e0fb:	ba 7c dc 02 c0       	mov    edx,0xc002dc7c
c001e100:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e104:	89 10                	mov    DWORD PTR [eax],edx
c001e106:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e10a:	83 ec 0c             	sub    esp,0xc
c001e10d:	50                   	push   eax
c001e10e:	e8 ed a6 fe ff       	call   c0008800 <Filesystem::~Filesystem()>
c001e113:	83 c4 10             	add    esp,0x10
c001e116:	90                   	nop
c001e117:	83 c4 0c             	add    esp,0xc
c001e11a:	c3                   	ret    
c001e11b:	90                   	nop

c001e11c <FAT::~FAT()>:
c001e11c:	83 ec 0c             	sub    esp,0xc
c001e11f:	83 ec 0c             	sub    esp,0xc
c001e122:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e126:	e8 cd ff ff ff       	call   c001e0f8 <FAT::~FAT()>
c001e12b:	83 c4 10             	add    esp,0x10
c001e12e:	83 ec 08             	sub    esp,0x8
c001e131:	6a 08                	push   0x8
c001e133:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e137:	e8 d0 fb fe ff       	call   c000dd0c <operator delete(void*, unsigned long)>
c001e13c:	83 c4 10             	add    esp,0x10
c001e13f:	83 c4 0c             	add    esp,0xc
c001e142:	c3                   	ret    
c001e143:	90                   	nop

c001e144 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001e144:	83 ec 1c             	sub    esp,0x1c
c001e147:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001e14e:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001e153:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e157:	8b 04 85 a0 84 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc7b60]
c001e15e:	83 f8 ff             	cmp    eax,0xffffffff
c001e161:	75 35                	jne    c001e198 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c001e163:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001e167:	88 c2                	mov    dl,al
c001e169:	a1 80 84 03 c0       	mov    eax,ds:0xc0038480
c001e16e:	01 d0                	add    eax,edx
c001e170:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001e174:	8b 15 80 84 03 c0    	mov    edx,DWORD PTR ds:0xc0038480
c001e17a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e17e:	89 14 85 a0 84 03 c0 	mov    DWORD PTR [eax*4-0x3ffc7b60],edx
c001e185:	a1 80 84 03 c0       	mov    eax,ds:0xc0038480
c001e18a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e18e:	89 14 85 20 85 03 c0 	mov    DWORD PTR [eax*4-0x3ffc7ae0],edx
c001e195:	eb 19                	jmp    c001e1b0 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c001e197:	90                   	nop
c001e198:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001e19c:	88 c2                	mov    dl,al
c001e19e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e1a2:	8b 04 85 a0 84 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc7b60]
c001e1a9:	01 d0                	add    eax,edx
c001e1ab:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001e1af:	90                   	nop
c001e1b0:	83 ec 04             	sub    esp,0x4
c001e1b3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001e1b7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001e1bb:	8d 44 24 15          	lea    eax,[esp+0x15]
c001e1bf:	50                   	push   eax
c001e1c0:	e8 0f 70 fe ff       	call   c00051d4 <f_getlabel>
c001e1c5:	83 c4 10             	add    esp,0x10
c001e1c8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e1cc:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001e1d1:	75 09                	jne    c001e1dc <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c001e1d3:	b8 00 00 00 00       	mov    eax,0x0
c001e1d8:	eb 0a                	jmp    c001e1e4 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c001e1da:	66 90                	xchg   ax,ax
c001e1dc:	b8 01 00 00 00       	mov    eax,0x1
c001e1e1:	8d 76 00             	lea    esi,[esi+0x0]
c001e1e4:	83 c4 1c             	add    esp,0x1c
c001e1e7:	c3                   	ret    

c001e1e8 <FAT::setlabel(LogicalDisk*, int, char*)>:
c001e1e8:	53                   	push   ebx
c001e1e9:	83 ec 58             	sub    esp,0x58
c001e1ec:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001e1f4:	8d 54 24 10          	lea    edx,[esp+0x10]
c001e1f8:	b9 00 00 00 00       	mov    ecx,0x0
c001e1fd:	b8 3c 00 00 00       	mov    eax,0x3c
c001e202:	83 e0 f8             	and    eax,0xfffffff8
c001e205:	89 c3                	mov    ebx,eax
c001e207:	b8 00 00 00 00       	mov    eax,0x0
c001e20c:	89 4c 04 10          	mov    DWORD PTR [esp+eax*1+0x10],ecx
c001e210:	89 4c 04 14          	mov    DWORD PTR [esp+eax*1+0x14],ecx
c001e214:	83 c0 08             	add    eax,0x8
c001e217:	39 d8                	cmp    eax,ebx
c001e219:	72 f1                	jb     c001e20c <FAT::setlabel(LogicalDisk*, int, char*)+0x24>
c001e21b:	01 c2                	add    edx,eax
c001e21d:	89 0a                	mov    DWORD PTR [edx],ecx
c001e21f:	83 c2 04             	add    edx,0x4
c001e222:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001e226:	8b 04 85 a0 84 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc7b60]
c001e22d:	83 f8 ff             	cmp    eax,0xffffffff
c001e230:	75 36                	jne    c001e268 <FAT::setlabel(LogicalDisk*, int, char*)+0x80>
c001e232:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001e236:	88 c2                	mov    dl,al
c001e238:	a1 80 84 03 c0       	mov    eax,ds:0xc0038480
c001e23d:	01 d0                	add    eax,edx
c001e23f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001e243:	8b 15 80 84 03 c0    	mov    edx,DWORD PTR ds:0xc0038480
c001e249:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001e24d:	89 14 85 a0 84 03 c0 	mov    DWORD PTR [eax*4-0x3ffc7b60],edx
c001e254:	a1 80 84 03 c0       	mov    eax,ds:0xc0038480
c001e259:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001e25d:	89 14 85 20 85 03 c0 	mov    DWORD PTR [eax*4-0x3ffc7ae0],edx
c001e264:	eb 1a                	jmp    c001e280 <FAT::setlabel(LogicalDisk*, int, char*)+0x98>
c001e266:	66 90                	xchg   ax,ax
c001e268:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001e26c:	88 c2                	mov    dl,al
c001e26e:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001e272:	8b 04 85 a0 84 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc7b60]
c001e279:	01 d0                	add    eax,edx
c001e27b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001e27f:	90                   	nop
c001e280:	83 ec 08             	sub    esp,0x8
c001e283:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001e287:	8d 44 24 18          	lea    eax,[esp+0x18]
c001e28b:	50                   	push   eax
c001e28c:	e8 df 25 fe ff       	call   c0000870 <strcat>
c001e291:	83 c4 10             	add    esp,0x10
c001e294:	83 ec 0c             	sub    esp,0xc
c001e297:	8d 44 24 18          	lea    eax,[esp+0x18]
c001e29b:	50                   	push   eax
c001e29c:	e8 87 70 fe ff       	call   c0005328 <f_setlabel>
c001e2a1:	83 c4 10             	add    esp,0x10
c001e2a4:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001e2a8:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c001e2ad:	75 09                	jne    c001e2b8 <FAT::setlabel(LogicalDisk*, int, char*)+0xd0>
c001e2af:	b8 00 00 00 00       	mov    eax,0x0
c001e2b4:	eb 0a                	jmp    c001e2c0 <FAT::setlabel(LogicalDisk*, int, char*)+0xd8>
c001e2b6:	66 90                	xchg   ax,ax
c001e2b8:	b8 01 00 00 00       	mov    eax,0x1
c001e2bd:	8d 76 00             	lea    esi,[esi+0x0]
c001e2c0:	83 c4 58             	add    esp,0x58
c001e2c3:	5b                   	pop    ebx
c001e2c4:	c3                   	ret    
c001e2c5:	90                   	nop
c001e2c6:	66 90                	xchg   ax,ax

c001e2c8 <FAT::format(LogicalDisk*, int, char const*, int)>:
c001e2c8:	83 ec 2c             	sub    esp,0x2c
c001e2cb:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001e2d3:	83 ec 08             	sub    esp,0x8
c001e2d6:	68 54 dc 02 c0       	push   0xc002dc54
c001e2db:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001e2df:	e8 9c 24 fe ff       	call   c0000780 <strcmp>
c001e2e4:	83 c4 10             	add    esp,0x10
c001e2e7:	85 c0                	test   eax,eax
c001e2e9:	0f 94 c0             	sete   al
c001e2ec:	0f b6 c0             	movzx  eax,al
c001e2ef:	85 c0                	test   eax,eax
c001e2f1:	74 0d                	je     c001e300 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c001e2f3:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001e2fb:	e9 c0 00 00 00       	jmp    c001e3c0 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001e300:	83 ec 08             	sub    esp,0x8
c001e303:	68 46 dc 02 c0       	push   0xc002dc46
c001e308:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001e30c:	e8 6f 24 fe ff       	call   c0000780 <strcmp>
c001e311:	83 c4 10             	add    esp,0x10
c001e314:	85 c0                	test   eax,eax
c001e316:	0f 94 c0             	sete   al
c001e319:	0f b6 c0             	movzx  eax,al
c001e31c:	85 c0                	test   eax,eax
c001e31e:	74 10                	je     c001e330 <FAT::format(LogicalDisk*, int, char const*, int)+0x68>
c001e320:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001e328:	e9 93 00 00 00       	jmp    c001e3c0 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001e32d:	8d 76 00             	lea    esi,[esi+0x0]
c001e330:	83 ec 08             	sub    esp,0x8
c001e333:	68 4c dc 02 c0       	push   0xc002dc4c
c001e338:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001e33c:	e8 3f 24 fe ff       	call   c0000780 <strcmp>
c001e341:	83 c4 10             	add    esp,0x10
c001e344:	85 c0                	test   eax,eax
c001e346:	0f 94 c0             	sete   al
c001e349:	0f b6 c0             	movzx  eax,al
c001e34c:	85 c0                	test   eax,eax
c001e34e:	74 0c                	je     c001e35c <FAT::format(LogicalDisk*, int, char const*, int)+0x94>
c001e350:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001e358:	eb 66                	jmp    c001e3c0 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001e35a:	66 90                	xchg   ax,ax
c001e35c:	83 ec 08             	sub    esp,0x8
c001e35f:	68 7c 9a 02 c0       	push   0xc0029a7c
c001e364:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001e368:	e8 13 24 fe ff       	call   c0000780 <strcmp>
c001e36d:	83 c4 10             	add    esp,0x10
c001e370:	85 c0                	test   eax,eax
c001e372:	0f 94 c0             	sete   al
c001e375:	0f b6 c0             	movzx  eax,al
c001e378:	85 c0                	test   eax,eax
c001e37a:	74 0c                	je     c001e388 <FAT::format(LogicalDisk*, int, char const*, int)+0xc0>
c001e37c:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c001e384:	eb 3a                	jmp    c001e3c0 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001e386:	66 90                	xchg   ax,ax
c001e388:	83 ec 08             	sub    esp,0x8
c001e38b:	68 52 dc 02 c0       	push   0xc002dc52
c001e390:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001e394:	e8 e7 23 fe ff       	call   c0000780 <strcmp>
c001e399:	83 c4 10             	add    esp,0x10
c001e39c:	85 c0                	test   eax,eax
c001e39e:	0f 94 c0             	sete   al
c001e3a1:	0f b6 c0             	movzx  eax,al
c001e3a4:	85 c0                	test   eax,eax
c001e3a6:	74 0c                	je     c001e3b4 <FAT::format(LogicalDisk*, int, char const*, int)+0xec>
c001e3a8:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c001e3b0:	eb 0e                	jmp    c001e3c0 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001e3b2:	66 90                	xchg   ax,ax
c001e3b4:	b8 08 00 00 00       	mov    eax,0x8
c001e3b9:	e9 ea 00 00 00       	jmp    c001e4a8 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c001e3be:	66 90                	xchg   ax,ax
c001e3c0:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001e3c7:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001e3cc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001e3d0:	8b 04 85 a0 84 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc7b60]
c001e3d7:	83 f8 ff             	cmp    eax,0xffffffff
c001e3da:	75 34                	jne    c001e410 <FAT::format(LogicalDisk*, int, char const*, int)+0x148>
c001e3dc:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001e3e0:	88 c2                	mov    dl,al
c001e3e2:	a1 80 84 03 c0       	mov    eax,ds:0xc0038480
c001e3e7:	01 d0                	add    eax,edx
c001e3e9:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001e3ed:	8b 15 80 84 03 c0    	mov    edx,DWORD PTR ds:0xc0038480
c001e3f3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001e3f7:	89 14 85 a0 84 03 c0 	mov    DWORD PTR [eax*4-0x3ffc7b60],edx
c001e3fe:	a1 80 84 03 c0       	mov    eax,ds:0xc0038480
c001e403:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001e407:	89 14 85 20 85 03 c0 	mov    DWORD PTR [eax*4-0x3ffc7ae0],edx
c001e40e:	eb 18                	jmp    c001e428 <FAT::format(LogicalDisk*, int, char const*, int)+0x160>
c001e410:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001e414:	88 c2                	mov    dl,al
c001e416:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001e41a:	8b 04 85 a0 84 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc7b60]
c001e421:	01 d0                	add    eax,edx
c001e423:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001e427:	90                   	nop
c001e428:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e42c:	88 04 24             	mov    BYTE PTR [esp],al
c001e42f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001e433:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e437:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001e43f:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c001e444:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001e44c:	83 ec 0c             	sub    esp,0xc
c001e44f:	68 00 20 00 00       	push   0x2000
c001e454:	e8 b3 1c ff ff       	call   c001010c <malloc>
c001e459:	83 c4 10             	add    esp,0x10
c001e45c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001e460:	68 00 20 00 00       	push   0x2000
c001e465:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e469:	8d 44 24 08          	lea    eax,[esp+0x8]
c001e46d:	50                   	push   eax
c001e46e:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001e472:	50                   	push   eax
c001e473:	e8 ad 71 fe ff       	call   c0005625 <f_mkfs>
c001e478:	83 c4 10             	add    esp,0x10
c001e47b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001e47f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001e484:	75 0a                	jne    c001e490 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c001e486:	b8 00 00 00 00       	mov    eax,0x0
c001e48b:	eb 1b                	jmp    c001e4a8 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c001e48d:	8d 76 00             	lea    esi,[esi+0x0]
c001e490:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c001e495:	75 09                	jne    c001e4a0 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d8>
c001e497:	b8 09 00 00 00       	mov    eax,0x9
c001e49c:	eb 0a                	jmp    c001e4a8 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c001e49e:	66 90                	xchg   ax,ax
c001e4a0:	b8 01 00 00 00       	mov    eax,0x1
c001e4a5:	8d 76 00             	lea    esi,[esi+0x0]
c001e4a8:	83 c4 2c             	add    esp,0x2c
c001e4ab:	c3                   	ret    

c001e4ac <FAT::tryMount(LogicalDisk*, int)>:
c001e4ac:	81 ec 4c 03 00 00    	sub    esp,0x34c
c001e4b2:	a1 80 84 03 c0       	mov    eax,ds:0xc0038480
c001e4b7:	83 f8 14             	cmp    eax,0x14
c001e4ba:	75 18                	jne    c001e4d4 <FAT::tryMount(LogicalDisk*, int)+0x28>
c001e4bc:	83 ec 0c             	sub    esp,0xc
c001e4bf:	68 58 dc 02 c0       	push   0xc002dc58
c001e4c4:	e8 97 20 ff ff       	call   c0010560 <KePanic(char const*)>
c001e4c9:	83 c4 10             	add    esp,0x10
c001e4cc:	b0 00                	mov    al,0x0
c001e4ce:	e9 ed 01 00 00       	jmp    c001e6c0 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001e4d3:	90                   	nop
c001e4d4:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001e4db:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001e4e1:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001e4e7:	3d 00 02 00 00       	cmp    eax,0x200
c001e4ec:	74 0a                	je     c001e4f8 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c001e4ee:	b0 00                	mov    al,0x0
c001e4f0:	e9 cb 01 00 00       	jmp    c001e6c0 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001e4f5:	8d 76 00             	lea    esi,[esi+0x0]
c001e4f8:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c001e500:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c001e507:	8b 04 85 a0 84 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc7b60]
c001e50e:	83 f8 ff             	cmp    eax,0xffffffff
c001e511:	74 09                	je     c001e51c <FAT::tryMount(LogicalDisk*, int)+0x70>
c001e513:	b0 01                	mov    al,0x1
c001e515:	e9 a6 01 00 00       	jmp    c001e6c0 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001e51a:	66 90                	xchg   ax,ax
c001e51c:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c001e526:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c001e52e:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c001e535:	88 c2                	mov    dl,al
c001e537:	a1 80 84 03 c0       	mov    eax,ds:0xc0038480
c001e53c:	01 d0                	add    eax,edx
c001e53e:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c001e545:	8b 15 80 84 03 c0    	mov    edx,DWORD PTR ds:0xc0038480
c001e54b:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c001e552:	89 14 85 a0 84 03 c0 	mov    DWORD PTR [eax*4-0x3ffc7b60],edx
c001e559:	a1 80 84 03 c0       	mov    eax,ds:0xc0038480
c001e55e:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c001e565:	89 14 85 20 85 03 c0 	mov    DWORD PTR [eax*4-0x3ffc7ae0],edx
c001e56c:	83 ec 0c             	sub    esp,0xc
c001e56f:	68 34 02 00 00       	push   0x234
c001e574:	e8 93 1b ff ff       	call   c001010c <malloc>
c001e579:	83 c4 10             	add    esp,0x10
c001e57c:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c001e583:	83 ec 04             	sub    esp,0x4
c001e586:	6a 00                	push   0x0
c001e588:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001e58f:	50                   	push   eax
c001e590:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001e597:	e8 83 58 fe ff       	call   c0003e1f <f_mount>
c001e59c:	83 c4 10             	add    esp,0x10
c001e59f:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c001e5a6:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c001e5ae:	74 1c                	je     c001e5cc <FAT::tryMount(LogicalDisk*, int)+0x120>
c001e5b0:	83 ec 0c             	sub    esp,0xc
c001e5b3:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001e5ba:	e8 6d 1b ff ff       	call   c001012c <rfree>
c001e5bf:	83 c4 10             	add    esp,0x10
c001e5c2:	b0 00                	mov    al,0x0
c001e5c4:	e9 f7 00 00 00       	jmp    c001e6c0 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001e5c9:	8d 76 00             	lea    esi,[esi+0x0]
c001e5cc:	83 ec 04             	sub    esp,0x4
c001e5cf:	68 00 01 00 00       	push   0x100
c001e5d4:	6a 00                	push   0x0
c001e5d6:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c001e5dd:	50                   	push   eax
c001e5de:	e8 0d 1f fe ff       	call   c00004f0 <memset>
c001e5e3:	83 c4 10             	add    esp,0x10
c001e5e6:	83 ec 08             	sub    esp,0x8
c001e5e9:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001e5f0:	50                   	push   eax
c001e5f1:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c001e5f8:	50                   	push   eax
c001e5f9:	e8 72 22 fe ff       	call   c0000870 <strcat>
c001e5fe:	83 c4 10             	add    esp,0x10
c001e601:	83 ec 08             	sub    esp,0x8
c001e604:	68 66 dc 02 c0       	push   0xc002dc66
c001e609:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c001e610:	50                   	push   eax
c001e611:	e8 5a 22 fe ff       	call   c0000870 <strcat>
c001e616:	83 c4 10             	add    esp,0x10
c001e619:	83 ec 04             	sub    esp,0x4
c001e61c:	6a 01                	push   0x1
c001e61e:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c001e625:	50                   	push   eax
c001e626:	8d 44 24 14          	lea    eax,[esp+0x14]
c001e62a:	50                   	push   eax
c001e62b:	e8 51 58 fe ff       	call   c0003e81 <f_open>
c001e630:	83 c4 10             	add    esp,0x10
c001e633:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c001e63a:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c001e641:	85 c0                	test   eax,eax
c001e643:	74 0b                	je     c001e650 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c001e645:	78 31                	js     c001e678 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001e647:	83 e8 04             	sub    eax,0x4
c001e64a:	83 f8 01             	cmp    eax,0x1
c001e64d:	77 29                	ja     c001e678 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001e64f:	90                   	nop
c001e650:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c001e658:	83 ec 0c             	sub    esp,0xc
c001e65b:	8d 44 24 14          	lea    eax,[esp+0x14]
c001e65f:	50                   	push   eax
c001e660:	e8 cc 5f fe ff       	call   c0004631 <f_close>
c001e665:	83 c4 10             	add    esp,0x10
c001e668:	90                   	nop
c001e669:	0f b6 84 24 3f 03 00 00 	movzx  eax,BYTE PTR [esp+0x33f]
c001e671:	85 c0                	test   eax,eax
c001e673:	74 43                	je     c001e6b8 <FAT::tryMount(LogicalDisk*, int)+0x20c>
c001e675:	eb 31                	jmp    c001e6a8 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c001e677:	90                   	nop
c001e678:	83 ec 0c             	sub    esp,0xc
c001e67b:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001e682:	e8 a5 1a ff ff       	call   c001012c <rfree>
c001e687:	83 c4 10             	add    esp,0x10
c001e68a:	83 ec 04             	sub    esp,0x4
c001e68d:	6a 00                	push   0x0
c001e68f:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001e696:	50                   	push   eax
c001e697:	6a 00                	push   0x0
c001e699:	e8 81 57 fe ff       	call   c0003e1f <f_mount>
c001e69e:	83 c4 10             	add    esp,0x10
c001e6a1:	b0 00                	mov    al,0x0
c001e6a3:	eb 1b                	jmp    c001e6c0 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001e6a5:	8d 76 00             	lea    esi,[esi+0x0]
c001e6a8:	a1 80 84 03 c0       	mov    eax,ds:0xc0038480
c001e6ad:	83 c0 01             	add    eax,0x1
c001e6b0:	a3 80 84 03 c0       	mov    ds:0xc0038480,eax
c001e6b5:	8d 76 00             	lea    esi,[esi+0x0]
c001e6b8:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c001e6bf:	90                   	nop
c001e6c0:	81 c4 4c 03 00 00    	add    esp,0x34c
c001e6c6:	c3                   	ret    
c001e6c7:	90                   	nop

c001e6c8 <FAT::allocateSwapfile(char const*, int)>:
c001e6c8:	55                   	push   ebp
c001e6c9:	57                   	push   edi
c001e6ca:	56                   	push   esi
c001e6cb:	53                   	push   ebx
c001e6cc:	81 ec 3c 04 00 00    	sub    esp,0x43c
c001e6d2:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c001e6dd:	83 ec 0c             	sub    esp,0xc
c001e6e0:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c001e6e7:	e8 20 1a ff ff       	call   c001010c <malloc>
c001e6ec:	83 c4 10             	add    esp,0x10
c001e6ef:	89 c7                	mov    edi,eax
c001e6f1:	a1 58 63 03 c0       	mov    eax,ds:0xc0036358
c001e6f6:	83 ec 04             	sub    esp,0x4
c001e6f9:	50                   	push   eax
c001e6fa:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c001e701:	57                   	push   edi
c001e702:	e8 ab a4 fe ff       	call   c0008bb2 <File::File(char const*, Process*)>
c001e707:	83 c4 10             	add    esp,0x10
c001e70a:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c001e711:	83 ec 04             	sub    esp,0x4
c001e714:	8d 44 24 13          	lea    eax,[esp+0x13]
c001e718:	50                   	push   eax
c001e719:	8d 44 24 18          	lea    eax,[esp+0x18]
c001e71d:	50                   	push   eax
c001e71e:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001e725:	e8 a8 a7 fe ff       	call   c0008ed2 <File::stat(unsigned long long*, bool*)>
c001e72a:	83 c4 10             	add    esp,0x10
c001e72d:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001e734:	c1 e0 14             	shl    eax,0x14
c001e737:	89 c7                	mov    edi,eax
c001e739:	89 c5                	mov    ebp,eax
c001e73b:	c1 fd 1f             	sar    ebp,0x1f
c001e73e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e742:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e746:	89 f9                	mov    ecx,edi
c001e748:	31 c1                	xor    ecx,eax
c001e74a:	89 cb                	mov    ebx,ecx
c001e74c:	89 e9                	mov    ecx,ebp
c001e74e:	31 d1                	xor    ecx,edx
c001e750:	89 ce                	mov    esi,ecx
c001e752:	89 f0                	mov    eax,esi
c001e754:	09 d8                	or     eax,ebx
c001e756:	0f 84 9c 00 00 00    	je     c001e7f8 <FAT::allocateSwapfile(char const*, int)+0x130>
c001e75c:	83 ec 0c             	sub    esp,0xc
c001e75f:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001e766:	e8 33 a6 fe ff       	call   c0008d9e <File::unlink()>
c001e76b:	83 c4 10             	add    esp,0x10
c001e76e:	83 ec 08             	sub    esp,0x8
c001e771:	6a 12                	push   0x12
c001e773:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001e77a:	e8 51 a4 fe ff       	call   c0008bd0 <File::open(FileOpenMode)>
c001e77f:	83 c4 10             	add    esp,0x10
c001e782:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001e789:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001e78f:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001e796:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001e79d:	c1 e0 14             	shl    eax,0x14
c001e7a0:	83 ec 04             	sub    esp,0x4
c001e7a3:	6a 01                	push   0x1
c001e7a5:	50                   	push   eax
c001e7a6:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c001e7ad:	e8 06 6d fe ff       	call   c00054b8 <f_expand>
c001e7b2:	83 c4 10             	add    esp,0x10
c001e7b5:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001e7bc:	8b 00                	mov    eax,DWORD PTR [eax]
c001e7be:	83 c0 10             	add    eax,0x10
c001e7c1:	8b 00                	mov    eax,DWORD PTR [eax]
c001e7c3:	83 ec 0c             	sub    esp,0xc
c001e7c6:	8d 54 24 24          	lea    edx,[esp+0x24]
c001e7ca:	52                   	push   edx
c001e7cb:	8d 54 24 30          	lea    edx,[esp+0x30]
c001e7cf:	52                   	push   edx
c001e7d0:	6a 00                	push   0x0
c001e7d2:	68 00 04 00 00       	push   0x400
c001e7d7:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001e7de:	ff d0                	call   eax
c001e7e0:	83 c4 20             	add    esp,0x20
c001e7e3:	83 ec 0c             	sub    esp,0xc
c001e7e6:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001e7ed:	e8 3c a4 fe ff       	call   c0008c2e <File::close()>
c001e7f2:	83 c4 10             	add    esp,0x10
c001e7f5:	8d 76 00             	lea    esi,[esi+0x0]
c001e7f8:	83 ec 08             	sub    esp,0x8
c001e7fb:	6a 01                	push   0x1
c001e7fd:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001e804:	e8 c7 a3 fe ff       	call   c0008bd0 <File::open(FileOpenMode)>
c001e809:	83 c4 10             	add    esp,0x10
c001e80c:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001e813:	8b 00                	mov    eax,DWORD PTR [eax]
c001e815:	83 c0 0c             	add    eax,0xc
c001e818:	8b 00                	mov    eax,DWORD PTR [eax]
c001e81a:	83 ec 0c             	sub    esp,0xc
c001e81d:	8d 54 24 24          	lea    edx,[esp+0x24]
c001e821:	52                   	push   edx
c001e822:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c001e826:	52                   	push   edx
c001e827:	6a 00                	push   0x0
c001e829:	6a 04                	push   0x4
c001e82b:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001e832:	ff d0                	call   eax
c001e834:	83 c4 20             	add    esp,0x20
c001e837:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001e83e:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001e844:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001e84b:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c001e852:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c001e855:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c001e85c:	83 ec 0c             	sub    esp,0xc
c001e85f:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001e866:	e8 c3 a3 fe ff       	call   c0008c2e <File::close()>
c001e86b:	83 c4 10             	add    esp,0x10
c001e86e:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c001e875:	ba 00 00 00 00       	mov    edx,0x0
c001e87a:	81 c4 3c 04 00 00    	add    esp,0x43c
c001e880:	5b                   	pop    ebx
c001e881:	5e                   	pop    esi
c001e882:	5f                   	pop    edi
c001e883:	5d                   	pop    ebp
c001e884:	c3                   	ret    
c001e885:	90                   	nop
c001e886:	66 90                	xchg   ax,ax

c001e888 <FAT::readDir(void*, unsigned long, void*, int*)>:
c001e888:	57                   	push   edi
c001e889:	56                   	push   esi
c001e88a:	53                   	push   ebx
c001e88b:	81 ec 50 02 00 00    	sub    esp,0x250
c001e891:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c001e899:	74 0d                	je     c001e8a8 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c001e89b:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c001e8a3:	75 0f                	jne    c001e8b4 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c001e8a5:	8d 76 00             	lea    esi,[esi+0x0]
c001e8a8:	b8 04 00 00 00       	mov    eax,0x4
c001e8ad:	e9 3a 01 00 00       	jmp    c001e9ec <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001e8b2:	66 90                	xchg   ax,ax
c001e8b4:	83 ec 08             	sub    esp,0x8
c001e8b7:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001e8be:	50                   	push   eax
c001e8bf:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c001e8c6:	e8 32 60 fe ff       	call   c00048fd <f_readdir>
c001e8cb:	83 c4 10             	add    esp,0x10
c001e8ce:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c001e8d5:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c001e8dc:	83 ec 0c             	sub    esp,0xc
c001e8df:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001e8e6:	83 c0 16             	add    eax,0x16
c001e8e9:	50                   	push   eax
c001e8ea:	e8 91 1c fe ff       	call   c0000580 <strlen>
c001e8ef:	83 c4 10             	add    esp,0x10
c001e8f2:	ba 00 00 00 00       	mov    edx,0x0
c001e8f7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e8fb:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001e8ff:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c001e906:	0f b6 c0             	movzx  eax,al
c001e909:	83 e0 10             	and    eax,0x10
c001e90c:	74 0a                	je     c001e918 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c001e90e:	b8 02 00 00 00       	mov    eax,0x2
c001e913:	eb 0b                	jmp    c001e920 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c001e915:	8d 76 00             	lea    esi,[esi+0x0]
c001e918:	b8 01 00 00 00       	mov    eax,0x1
c001e91d:	8d 76 00             	lea    esi,[esi+0x0]
c001e920:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001e924:	83 ec 08             	sub    esp,0x8
c001e927:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001e92e:	83 c0 16             	add    eax,0x16
c001e931:	50                   	push   eax
c001e932:	8d 44 24 14          	lea    eax,[esp+0x14]
c001e936:	83 c0 10             	add    eax,0x10
c001e939:	50                   	push   eax
c001e93a:	e8 11 1d fe ff       	call   c0000650 <strcpy>
c001e93f:	83 c4 10             	add    esp,0x10
c001e942:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c001e949:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c001e950:	8d 44 24 08          	lea    eax,[esp+0x8]
c001e954:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c001e95b:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c001e962:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c001e969:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c001e970:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c001e977:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c001e97e:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c001e985:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c001e98c:	89 c6                	mov    esi,eax
c001e98e:	89 d7                	mov    edi,edx
c001e990:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e992:	89 c8                	mov    eax,ecx
c001e994:	89 fa                	mov    edx,edi
c001e996:	89 f3                	mov    ebx,esi
c001e998:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c001e99f:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c001e9a6:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c001e9ad:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c001e9b4:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001e9ba:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c001e9c1:	0f be c0             	movsx  eax,al
c001e9c4:	85 c0                	test   eax,eax
c001e9c6:	75 08                	jne    c001e9d0 <FAT::readDir(void*, unsigned long, void*, int*)+0x148>
c001e9c8:	b8 07 00 00 00       	mov    eax,0x7
c001e9cd:	eb 1d                	jmp    c001e9ec <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001e9cf:	90                   	nop
c001e9d0:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c001e9d7:	85 c0                	test   eax,eax
c001e9d9:	75 09                	jne    c001e9e4 <FAT::readDir(void*, unsigned long, void*, int*)+0x15c>
c001e9db:	b8 00 00 00 00       	mov    eax,0x0
c001e9e0:	eb 0a                	jmp    c001e9ec <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001e9e2:	66 90                	xchg   ax,ax
c001e9e4:	b8 01 00 00 00       	mov    eax,0x1
c001e9e9:	8d 76 00             	lea    esi,[esi+0x0]
c001e9ec:	81 c4 50 02 00 00    	add    esp,0x250
c001e9f2:	5b                   	pop    ebx
c001e9f3:	5e                   	pop    esi
c001e9f4:	5f                   	pop    edi
c001e9f5:	c3                   	ret    
c001e9f6:	66 90                	xchg   ax,ax

c001e9f8 <FAT::read(void*, unsigned long, void*, int*)>:
c001e9f8:	83 ec 1c             	sub    esp,0x1c
c001e9fb:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001ea00:	74 0a                	je     c001ea0c <FAT::read(void*, unsigned long, void*, int*)+0x14>
c001ea02:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001ea07:	75 0b                	jne    c001ea14 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c001ea09:	8d 76 00             	lea    esi,[esi+0x0]
c001ea0c:	b8 04 00 00 00       	mov    eax,0x4
c001ea11:	eb 41                	jmp    c001ea54 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001ea13:	90                   	nop
c001ea14:	8d 44 24 08          	lea    eax,[esp+0x8]
c001ea18:	50                   	push   eax
c001ea19:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ea1d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001ea21:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ea25:	e8 1a 57 fe ff       	call   c0004144 <f_read>
c001ea2a:	83 c4 10             	add    esp,0x10
c001ea2d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ea31:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ea35:	89 c2                	mov    edx,eax
c001ea37:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ea3b:	89 10                	mov    DWORD PTR [eax],edx
c001ea3d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ea41:	85 c0                	test   eax,eax
c001ea43:	75 07                	jne    c001ea4c <FAT::read(void*, unsigned long, void*, int*)+0x54>
c001ea45:	b8 00 00 00 00       	mov    eax,0x0
c001ea4a:	eb 08                	jmp    c001ea54 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001ea4c:	b8 01 00 00 00       	mov    eax,0x1
c001ea51:	8d 76 00             	lea    esi,[esi+0x0]
c001ea54:	83 c4 1c             	add    esp,0x1c
c001ea57:	c3                   	ret    

c001ea58 <FAT::write(void*, unsigned long, void*, int*)>:
c001ea58:	83 ec 1c             	sub    esp,0x1c
c001ea5b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001ea60:	74 0a                	je     c001ea6c <FAT::write(void*, unsigned long, void*, int*)+0x14>
c001ea62:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001ea67:	75 0b                	jne    c001ea74 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c001ea69:	8d 76 00             	lea    esi,[esi+0x0]
c001ea6c:	b8 04 00 00 00       	mov    eax,0x4
c001ea71:	eb 41                	jmp    c001eab4 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001ea73:	90                   	nop
c001ea74:	8d 44 24 08          	lea    eax,[esp+0x8]
c001ea78:	50                   	push   eax
c001ea79:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ea7d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001ea81:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ea85:	e8 9b 58 fe ff       	call   c0004325 <f_write>
c001ea8a:	83 c4 10             	add    esp,0x10
c001ea8d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ea91:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ea95:	89 c2                	mov    edx,eax
c001ea97:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ea9b:	89 10                	mov    DWORD PTR [eax],edx
c001ea9d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001eaa1:	85 c0                	test   eax,eax
c001eaa3:	75 07                	jne    c001eaac <FAT::write(void*, unsigned long, void*, int*)+0x54>
c001eaa5:	b8 00 00 00 00       	mov    eax,0x0
c001eaaa:	eb 08                	jmp    c001eab4 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001eaac:	b8 01 00 00 00       	mov    eax,0x1
c001eab1:	8d 76 00             	lea    esi,[esi+0x0]
c001eab4:	83 c4 1c             	add    esp,0x1c
c001eab7:	c3                   	ret    

c001eab8 <FAT::close(void*)>:
c001eab8:	83 ec 1c             	sub    esp,0x1c
c001eabb:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001eac0:	75 0a                	jne    c001eacc <FAT::close(void*)+0x14>
c001eac2:	b8 04 00 00 00       	mov    eax,0x4
c001eac7:	eb 3f                	jmp    c001eb08 <FAT::close(void*)+0x50>
c001eac9:	8d 76 00             	lea    esi,[esi+0x0]
c001eacc:	83 ec 0c             	sub    esp,0xc
c001eacf:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ead3:	e8 59 5b fe ff       	call   c0004631 <f_close>
c001ead8:	83 c4 10             	add    esp,0x10
c001eadb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001eadf:	83 ec 0c             	sub    esp,0xc
c001eae2:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001eae6:	e8 31 16 ff ff       	call   c001011c <free>
c001eaeb:	83 c4 10             	add    esp,0x10
c001eaee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001eaf2:	85 c0                	test   eax,eax
c001eaf4:	75 0a                	jne    c001eb00 <FAT::close(void*)+0x48>
c001eaf6:	b8 00 00 00 00       	mov    eax,0x0
c001eafb:	eb 0b                	jmp    c001eb08 <FAT::close(void*)+0x50>
c001eafd:	8d 76 00             	lea    esi,[esi+0x0]
c001eb00:	b8 01 00 00 00       	mov    eax,0x1
c001eb05:	8d 76 00             	lea    esi,[esi+0x0]
c001eb08:	83 c4 1c             	add    esp,0x1c
c001eb0b:	c3                   	ret    

c001eb0c <FAT::closeDir(void*)>:
c001eb0c:	83 ec 1c             	sub    esp,0x1c
c001eb0f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001eb14:	75 0a                	jne    c001eb20 <FAT::closeDir(void*)+0x14>
c001eb16:	b8 04 00 00 00       	mov    eax,0x4
c001eb1b:	eb 3f                	jmp    c001eb5c <FAT::closeDir(void*)+0x50>
c001eb1d:	8d 76 00             	lea    esi,[esi+0x0]
c001eb20:	83 ec 0c             	sub    esp,0xc
c001eb23:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001eb27:	e8 af 5d fe ff       	call   c00048db <f_closedir>
c001eb2c:	83 c4 10             	add    esp,0x10
c001eb2f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001eb33:	83 ec 0c             	sub    esp,0xc
c001eb36:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001eb3a:	e8 dd 15 ff ff       	call   c001011c <free>
c001eb3f:	83 c4 10             	add    esp,0x10
c001eb42:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001eb46:	85 c0                	test   eax,eax
c001eb48:	75 0a                	jne    c001eb54 <FAT::closeDir(void*)+0x48>
c001eb4a:	b8 00 00 00 00       	mov    eax,0x0
c001eb4f:	eb 0b                	jmp    c001eb5c <FAT::closeDir(void*)+0x50>
c001eb51:	8d 76 00             	lea    esi,[esi+0x0]
c001eb54:	b8 01 00 00 00       	mov    eax,0x1
c001eb59:	8d 76 00             	lea    esi,[esi+0x0]
c001eb5c:	83 c4 1c             	add    esp,0x1c
c001eb5f:	c3                   	ret    

c001eb60 <FAT::truncate(void*, unsigned long long)>:
c001eb60:	83 ec 2c             	sub    esp,0x2c
c001eb63:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001eb67:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001eb6b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001eb6f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001eb73:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001eb78:	75 0a                	jne    c001eb84 <FAT::truncate(void*, unsigned long long)+0x24>
c001eb7a:	b8 04 00 00 00       	mov    eax,0x4
c001eb7f:	eb 47                	jmp    c001ebc8 <FAT::truncate(void*, unsigned long long)+0x68>
c001eb81:	8d 76 00             	lea    esi,[esi+0x0]
c001eb84:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001eb88:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001eb8b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001eb8f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001eb97:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001eb9b:	83 ec 08             	sub    esp,0x8
c001eb9e:	50                   	push   eax
c001eb9f:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001eba3:	e8 b8 5a fe ff       	call   c0004660 <f_lseek>
c001eba8:	83 c4 10             	add    esp,0x10
c001ebab:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ebaf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ebb3:	85 c0                	test   eax,eax
c001ebb5:	75 09                	jne    c001ebc0 <FAT::truncate(void*, unsigned long long)+0x60>
c001ebb7:	b8 00 00 00 00       	mov    eax,0x0
c001ebbc:	eb 0a                	jmp    c001ebc8 <FAT::truncate(void*, unsigned long long)+0x68>
c001ebbe:	66 90                	xchg   ax,ax
c001ebc0:	b8 01 00 00 00       	mov    eax,0x1
c001ebc5:	8d 76 00             	lea    esi,[esi+0x0]
c001ebc8:	83 c4 2c             	add    esp,0x2c
c001ebcb:	c3                   	ret    

c001ebcc <FAT::seek(void*, unsigned long long)>:
c001ebcc:	83 ec 2c             	sub    esp,0x2c
c001ebcf:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ebd3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ebd7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001ebdb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ebdf:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001ebe4:	75 0a                	jne    c001ebf0 <FAT::seek(void*, unsigned long long)+0x24>
c001ebe6:	b8 04 00 00 00       	mov    eax,0x4
c001ebeb:	eb 33                	jmp    c001ec20 <FAT::seek(void*, unsigned long long)+0x54>
c001ebed:	8d 76 00             	lea    esi,[esi+0x0]
c001ebf0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ebf4:	83 ec 08             	sub    esp,0x8
c001ebf7:	50                   	push   eax
c001ebf8:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001ebfc:	e8 5f 5a fe ff       	call   c0004660 <f_lseek>
c001ec01:	83 c4 10             	add    esp,0x10
c001ec04:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ec08:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ec0c:	85 c0                	test   eax,eax
c001ec0e:	75 08                	jne    c001ec18 <FAT::seek(void*, unsigned long long)+0x4c>
c001ec10:	b8 00 00 00 00       	mov    eax,0x0
c001ec15:	eb 09                	jmp    c001ec20 <FAT::seek(void*, unsigned long long)+0x54>
c001ec17:	90                   	nop
c001ec18:	b8 01 00 00 00       	mov    eax,0x1
c001ec1d:	8d 76 00             	lea    esi,[esi+0x0]
c001ec20:	83 c4 2c             	add    esp,0x2c
c001ec23:	c3                   	ret    

c001ec24 <fatWrapperReadDisk>:
c001ec24:	53                   	push   ebx
c001ec25:	83 ec 18             	sub    esp,0x18
c001ec28:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ec2c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001ec30:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001ec35:	8b 0c 85 e0 5a 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffca520]
c001ec3c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001ec40:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ec44:	ba 00 00 00 00       	mov    edx,0x0
c001ec49:	83 ec 0c             	sub    esp,0xc
c001ec4c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ec50:	53                   	push   ebx
c001ec51:	52                   	push   edx
c001ec52:	50                   	push   eax
c001ec53:	51                   	push   ecx
c001ec54:	e8 e5 c7 fe ff       	call   c000b43e <LogicalDisk::read(unsigned long long, int, void*)>
c001ec59:	83 c4 20             	add    esp,0x20
c001ec5c:	83 c4 18             	add    esp,0x18
c001ec5f:	5b                   	pop    ebx
c001ec60:	c3                   	ret    
c001ec61:	8d 76 00             	lea    esi,[esi+0x0]

c001ec64 <fatWrapperWriteDisk>:
c001ec64:	53                   	push   ebx
c001ec65:	83 ec 18             	sub    esp,0x18
c001ec68:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ec6c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001ec70:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001ec75:	8b 0c 85 e0 5a 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffca520]
c001ec7c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001ec80:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ec84:	ba 00 00 00 00       	mov    edx,0x0
c001ec89:	83 ec 0c             	sub    esp,0xc
c001ec8c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ec90:	53                   	push   ebx
c001ec91:	52                   	push   edx
c001ec92:	50                   	push   eax
c001ec93:	51                   	push   ecx
c001ec94:	e8 11 c8 fe ff       	call   c000b4aa <LogicalDisk::write(unsigned long long, int, void*)>
c001ec99:	83 c4 20             	add    esp,0x20
c001ec9c:	83 c4 18             	add    esp,0x18
c001ec9f:	5b                   	pop    ebx
c001eca0:	c3                   	ret    
c001eca1:	8d 76 00             	lea    esi,[esi+0x0]

c001eca4 <fatWrapperIoctl>:
c001eca4:	53                   	push   ebx
c001eca5:	83 ec 28             	sub    esp,0x28
c001eca8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ecac:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001ecb0:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001ecb4:	88 d0                	mov    al,dl
c001ecb6:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001ecba:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001ecbf:	83 f8 02             	cmp    eax,0x2
c001ecc2:	75 34                	jne    c001ecf8 <fatWrapperIoctl+0x54>
c001ecc4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ecc8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001eccc:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001ecd1:	8b 04 85 e0 5a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffca520]
c001ecd8:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001ecde:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001ece4:	89 c2                	mov    edx,eax
c001ece6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ecea:	66 89 10             	mov    WORD PTR [eax],dx
c001eced:	b8 00 00 00 00       	mov    eax,0x0
c001ecf2:	e9 c5 00 00 00       	jmp    c001edbc <fatWrapperIoctl+0x118>
c001ecf7:	90                   	nop
c001ecf8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001ecfd:	83 f8 01             	cmp    eax,0x1
c001ed00:	75 6a                	jne    c001ed6c <fatWrapperIoctl+0xc8>
c001ed02:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ed06:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ed0a:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001ed0f:	8b 04 85 e0 5a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffca520]
c001ed16:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001ed1c:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001ed22:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c001ed28:	89 c8                	mov    eax,ecx
c001ed2a:	89 da                	mov    edx,ebx
c001ed2c:	0f a4 c2 0a          	shld   edx,eax,0xa
c001ed30:	c1 e0 0a             	shl    eax,0xa
c001ed33:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001ed38:	8b 0c 8d e0 5a 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffca520]
c001ed3f:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c001ed45:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001ed4b:	89 cb                	mov    ebx,ecx
c001ed4d:	c1 fb 1f             	sar    ebx,0x1f
c001ed50:	53                   	push   ebx
c001ed51:	51                   	push   ecx
c001ed52:	52                   	push   edx
c001ed53:	50                   	push   eax
c001ed54:	e8 7b 55 00 00       	call   c00242d4 <__udivdi3>
c001ed59:	83 c4 10             	add    esp,0x10
c001ed5c:	89 c2                	mov    edx,eax
c001ed5e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ed62:	89 10                	mov    DWORD PTR [eax],edx
c001ed64:	b8 00 00 00 00       	mov    eax,0x0
c001ed69:	eb 51                	jmp    c001edbc <fatWrapperIoctl+0x118>
c001ed6b:	90                   	nop
c001ed6c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001ed71:	85 c0                	test   eax,eax
c001ed73:	75 07                	jne    c001ed7c <fatWrapperIoctl+0xd8>
c001ed75:	b8 00 00 00 00       	mov    eax,0x0
c001ed7a:	eb 40                	jmp    c001edbc <fatWrapperIoctl+0x118>
c001ed7c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001ed81:	83 f8 03             	cmp    eax,0x3
c001ed84:	75 1a                	jne    c001eda0 <fatWrapperIoctl+0xfc>
c001ed86:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ed8a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ed8e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ed92:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001ed98:	b8 00 00 00 00       	mov    eax,0x0
c001ed9d:	eb 1d                	jmp    c001edbc <fatWrapperIoctl+0x118>
c001ed9f:	90                   	nop
c001eda0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001eda5:	83 f8 04             	cmp    eax,0x4
c001eda8:	75 0a                	jne    c001edb4 <fatWrapperIoctl+0x110>
c001edaa:	b8 00 00 00 00       	mov    eax,0x0
c001edaf:	eb 0b                	jmp    c001edbc <fatWrapperIoctl+0x118>
c001edb1:	8d 76 00             	lea    esi,[esi+0x0]
c001edb4:	b8 04 00 00 00       	mov    eax,0x4
c001edb9:	8d 76 00             	lea    esi,[esi+0x0]
c001edbc:	83 c4 28             	add    esp,0x28
c001edbf:	5b                   	pop    ebx
c001edc0:	c3                   	ret    
c001edc1:	90                   	nop
c001edc2:	66 90                	xchg   ax,ax

c001edc4 <FAT::FAT()>:
c001edc4:	83 ec 1c             	sub    esp,0x1c
c001edc7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001edcb:	83 ec 0c             	sub    esp,0xc
c001edce:	50                   	push   eax
c001edcf:	e8 08 9a fe ff       	call   c00087dc <Filesystem::Filesystem()>
c001edd4:	83 c4 10             	add    esp,0x10
c001edd7:	ba 7c dc 02 c0       	mov    edx,0xc002dc7c
c001eddc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ede0:	89 10                	mov    DWORD PTR [eax],edx
c001ede2:	c7 05 80 84 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0038480,0x0
c001edec:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001edf4:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c001edf9:	7f 19                	jg     c001ee14 <FAT::FAT()+0x50>
c001edfb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001edff:	c7 04 85 a0 84 03 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffc7b60],0xffffffff
c001ee0a:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001ee0f:	eb e3                	jmp    c001edf4 <FAT::FAT()+0x30>
c001ee11:	8d 76 00             	lea    esi,[esi+0x0]
c001ee14:	90                   	nop
c001ee15:	83 c4 1c             	add    esp,0x1c
c001ee18:	c3                   	ret    
c001ee19:	90                   	nop
c001ee1a:	66 90                	xchg   ax,ax

c001ee1c <FAT::fixFilepath(char*)>:
c001ee1c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ee20:	8a 00                	mov    al,BYTE PTR [eax]
c001ee22:	0f be c0             	movsx  eax,al
c001ee25:	83 f8 40             	cmp    eax,0x40
c001ee28:	7e 2e                	jle    c001ee58 <FAT::fixFilepath(char*)+0x3c>
c001ee2a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ee2e:	8a 00                	mov    al,BYTE PTR [eax]
c001ee30:	83 e8 41             	sub    eax,0x41
c001ee33:	88 c2                	mov    dl,al
c001ee35:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ee39:	88 10                	mov    BYTE PTR [eax],dl
c001ee3b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ee3f:	8a 00                	mov    al,BYTE PTR [eax]
c001ee41:	0f be c0             	movsx  eax,al
c001ee44:	8b 04 85 a0 84 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc7b60]
c001ee4b:	83 c0 30             	add    eax,0x30
c001ee4e:	88 c2                	mov    dl,al
c001ee50:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ee54:	88 10                	mov    BYTE PTR [eax],dl
c001ee56:	66 90                	xchg   ax,ax
c001ee58:	90                   	nop
c001ee59:	c3                   	ret    
c001ee5a:	66 90                	xchg   ax,ax

c001ee5c <FAT::open(char const*, void**, FileOpenMode)>:
c001ee5c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001ee62:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001ee6a:	74 0c                	je     c001ee78 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c001ee6c:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001ee74:	75 0e                	jne    c001ee84 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c001ee76:	66 90                	xchg   ax,ax
c001ee78:	b8 04 00 00 00       	mov    eax,0x4
c001ee7d:	e9 46 01 00 00       	jmp    c001efc8 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c001ee82:	66 90                	xchg   ax,ax
c001ee84:	83 ec 08             	sub    esp,0x8
c001ee87:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001ee8e:	8d 44 24 14          	lea    eax,[esp+0x14]
c001ee92:	50                   	push   eax
c001ee93:	e8 b8 17 fe ff       	call   c0000650 <strcpy>
c001ee98:	83 c4 10             	add    esp,0x10
c001ee9b:	83 ec 08             	sub    esp,0x8
c001ee9e:	8d 44 24 10          	lea    eax,[esp+0x10]
c001eea2:	50                   	push   eax
c001eea3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001eeaa:	e8 6d ff ff ff       	call   c001ee1c <FAT::fixFilepath(char*)>
c001eeaf:	83 c4 10             	add    esp,0x10
c001eeb2:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001eeba:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001eec1:	83 e0 01             	and    eax,0x1
c001eec4:	74 12                	je     c001eed8 <FAT::open(char const*, void**, FileOpenMode)+0x7c>
c001eec6:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001eecd:	83 c8 01             	or     eax,0x1
c001eed0:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001eed7:	90                   	nop
c001eed8:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001eedf:	83 e0 04             	and    eax,0x4
c001eee2:	74 24                	je     c001ef08 <FAT::open(char const*, void**, FileOpenMode)+0xac>
c001eee4:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001eeeb:	83 c8 30             	or     eax,0x30
c001eeee:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001eef5:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001eefc:	83 c8 02             	or     eax,0x2
c001eeff:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001ef06:	66 90                	xchg   ax,ax
c001ef08:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001ef0f:	83 e0 02             	and    eax,0x2
c001ef12:	74 14                	je     c001ef28 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c001ef14:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001ef1b:	83 c8 02             	or     eax,0x2
c001ef1e:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001ef25:	8d 76 00             	lea    esi,[esi+0x0]
c001ef28:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001ef2f:	83 e0 08             	and    eax,0x8
c001ef32:	74 14                	je     c001ef48 <FAT::open(char const*, void**, FileOpenMode)+0xec>
c001ef34:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001ef3b:	83 c8 04             	or     eax,0x4
c001ef3e:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001ef45:	8d 76 00             	lea    esi,[esi+0x0]
c001ef48:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001ef4f:	83 e0 10             	and    eax,0x10
c001ef52:	74 14                	je     c001ef68 <FAT::open(char const*, void**, FileOpenMode)+0x10c>
c001ef54:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001ef5b:	83 c8 08             	or     eax,0x8
c001ef5e:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001ef65:	8d 76 00             	lea    esi,[esi+0x0]
c001ef68:	83 ec 0c             	sub    esp,0xc
c001ef6b:	68 28 02 00 00       	push   0x228
c001ef70:	e8 97 11 ff ff       	call   c001010c <malloc>
c001ef75:	83 c4 10             	add    esp,0x10
c001ef78:	89 c2                	mov    edx,eax
c001ef7a:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001ef81:	89 10                	mov    DWORD PTR [eax],edx
c001ef83:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c001ef8b:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001ef92:	8b 00                	mov    eax,DWORD PTR [eax]
c001ef94:	83 ec 04             	sub    esp,0x4
c001ef97:	52                   	push   edx
c001ef98:	8d 54 24 10          	lea    edx,[esp+0x10]
c001ef9c:	52                   	push   edx
c001ef9d:	50                   	push   eax
c001ef9e:	e8 de 4e fe ff       	call   c0003e81 <f_open>
c001efa3:	83 c4 10             	add    esp,0x10
c001efa6:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c001efad:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c001efb5:	74 09                	je     c001efc0 <FAT::open(char const*, void**, FileOpenMode)+0x164>
c001efb7:	b8 01 00 00 00       	mov    eax,0x1
c001efbc:	eb 0a                	jmp    c001efc8 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c001efbe:	66 90                	xchg   ax,ax
c001efc0:	b8 00 00 00 00       	mov    eax,0x0
c001efc5:	8d 76 00             	lea    esi,[esi+0x0]
c001efc8:	81 c4 1c 01 00 00    	add    esp,0x11c
c001efce:	c3                   	ret    
c001efcf:	90                   	nop

c001efd0 <FAT::openDir(char const*, void**)>:
c001efd0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001efd6:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001efde:	74 0c                	je     c001efec <FAT::openDir(char const*, void**)+0x1c>
c001efe0:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001efe8:	75 0e                	jne    c001eff8 <FAT::openDir(char const*, void**)+0x28>
c001efea:	66 90                	xchg   ax,ax
c001efec:	b8 04 00 00 00       	mov    eax,0x4
c001eff1:	e9 82 00 00 00       	jmp    c001f078 <FAT::openDir(char const*, void**)+0xa8>
c001eff6:	66 90                	xchg   ax,ax
c001eff8:	83 ec 08             	sub    esp,0x8
c001effb:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001f002:	8d 44 24 18          	lea    eax,[esp+0x18]
c001f006:	50                   	push   eax
c001f007:	e8 44 16 fe ff       	call   c0000650 <strcpy>
c001f00c:	83 c4 10             	add    esp,0x10
c001f00f:	83 ec 08             	sub    esp,0x8
c001f012:	8d 44 24 14          	lea    eax,[esp+0x14]
c001f016:	50                   	push   eax
c001f017:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001f01e:	e8 f9 fd ff ff       	call   c001ee1c <FAT::fixFilepath(char*)>
c001f023:	83 c4 10             	add    esp,0x10
c001f026:	83 ec 0c             	sub    esp,0xc
c001f029:	6a 30                	push   0x30
c001f02b:	e8 dc 10 ff ff       	call   c001010c <malloc>
c001f030:	83 c4 10             	add    esp,0x10
c001f033:	89 c2                	mov    edx,eax
c001f035:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001f03c:	89 10                	mov    DWORD PTR [eax],edx
c001f03e:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001f045:	8b 00                	mov    eax,DWORD PTR [eax]
c001f047:	83 ec 08             	sub    esp,0x8
c001f04a:	8d 54 24 14          	lea    edx,[esp+0x14]
c001f04e:	52                   	push   edx
c001f04f:	50                   	push   eax
c001f050:	e8 bb 57 fe ff       	call   c0004810 <f_opendir>
c001f055:	83 c4 10             	add    esp,0x10
c001f058:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001f05f:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c001f067:	74 07                	je     c001f070 <FAT::openDir(char const*, void**)+0xa0>
c001f069:	b8 01 00 00 00       	mov    eax,0x1
c001f06e:	eb 08                	jmp    c001f078 <FAT::openDir(char const*, void**)+0xa8>
c001f070:	b8 00 00 00 00       	mov    eax,0x0
c001f075:	8d 76 00             	lea    esi,[esi+0x0]
c001f078:	81 c4 1c 01 00 00    	add    esp,0x11c
c001f07e:	c3                   	ret    
c001f07f:	90                   	nop

c001f080 <FAT::stat(char const*, unsigned long long*, bool*)>:
c001f080:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001f086:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c001f08e:	75 0c                	jne    c001f09c <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c001f090:	b8 04 00 00 00       	mov    eax,0x4
c001f095:	e9 d6 00 00 00       	jmp    c001f170 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001f09a:	66 90                	xchg   ax,ax
c001f09c:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c001f0a4:	75 0a                	jne    c001f0b0 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c001f0a6:	b8 04 00 00 00       	mov    eax,0x4
c001f0ab:	e9 c0 00 00 00       	jmp    c001f170 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001f0b0:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c001f0b8:	75 0a                	jne    c001f0c4 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c001f0ba:	b8 04 00 00 00       	mov    eax,0x4
c001f0bf:	e9 ac 00 00 00       	jmp    c001f170 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001f0c4:	83 ec 08             	sub    esp,0x8
c001f0c7:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001f0ce:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001f0d5:	50                   	push   eax
c001f0d6:	e8 75 15 fe ff       	call   c0000650 <strcpy>
c001f0db:	83 c4 10             	add    esp,0x10
c001f0de:	83 ec 08             	sub    esp,0x8
c001f0e1:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001f0e8:	50                   	push   eax
c001f0e9:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001f0f0:	e8 27 fd ff ff       	call   c001ee1c <FAT::fixFilepath(char*)>
c001f0f5:	83 c4 10             	add    esp,0x10
c001f0f8:	83 ec 08             	sub    esp,0x8
c001f0fb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001f0ff:	50                   	push   eax
c001f100:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001f107:	50                   	push   eax
c001f108:	e8 82 58 fe ff       	call   c000498f <f_stat>
c001f10d:	83 c4 10             	add    esp,0x10
c001f110:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001f117:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001f11e:	85 c0                	test   eax,eax
c001f120:	74 0a                	je     c001f12c <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c001f122:	83 f8 04             	cmp    eax,0x4
c001f125:	74 39                	je     c001f160 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c001f127:	eb 3f                	jmp    c001f168 <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c001f129:	8d 76 00             	lea    esi,[esi+0x0]
c001f12c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001f130:	0f b6 c0             	movzx  eax,al
c001f133:	83 e0 10             	and    eax,0x10
c001f136:	0f 95 c2             	setne  dl
c001f139:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c001f140:	88 10                	mov    BYTE PTR [eax],dl
c001f142:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f146:	ba 00 00 00 00       	mov    edx,0x0
c001f14b:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c001f152:	89 01                	mov    DWORD PTR [ecx],eax
c001f154:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001f157:	b8 00 00 00 00       	mov    eax,0x0
c001f15c:	eb 12                	jmp    c001f170 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001f15e:	66 90                	xchg   ax,ax
c001f160:	b8 02 00 00 00       	mov    eax,0x2
c001f165:	eb 09                	jmp    c001f170 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001f167:	90                   	nop
c001f168:	b8 01 00 00 00       	mov    eax,0x1
c001f16d:	8d 76 00             	lea    esi,[esi+0x0]
c001f170:	81 c4 2c 02 00 00    	add    esp,0x22c
c001f176:	c3                   	ret    
c001f177:	90                   	nop

c001f178 <FAT::unlink(char const*)>:
c001f178:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001f17e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001f186:	75 08                	jne    c001f190 <FAT::unlink(char const*)+0x18>
c001f188:	b8 04 00 00 00       	mov    eax,0x4
c001f18d:	eb 61                	jmp    c001f1f0 <FAT::unlink(char const*)+0x78>
c001f18f:	90                   	nop
c001f190:	83 ec 08             	sub    esp,0x8
c001f193:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001f19a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001f19e:	50                   	push   eax
c001f19f:	e8 ac 14 fe ff       	call   c0000650 <strcpy>
c001f1a4:	83 c4 10             	add    esp,0x10
c001f1a7:	83 ec 08             	sub    esp,0x8
c001f1aa:	8d 44 24 14          	lea    eax,[esp+0x14]
c001f1ae:	50                   	push   eax
c001f1af:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001f1b6:	e8 61 fc ff ff       	call   c001ee1c <FAT::fixFilepath(char*)>
c001f1bb:	83 c4 10             	add    esp,0x10
c001f1be:	83 ec 0c             	sub    esp,0xc
c001f1c1:	8d 44 24 18          	lea    eax,[esp+0x18]
c001f1c5:	50                   	push   eax
c001f1c6:	e8 36 5a fe ff       	call   c0004c01 <f_unlink>
c001f1cb:	83 c4 10             	add    esp,0x10
c001f1ce:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001f1d5:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001f1dc:	85 c0                	test   eax,eax
c001f1de:	75 08                	jne    c001f1e8 <FAT::unlink(char const*)+0x70>
c001f1e0:	b8 00 00 00 00       	mov    eax,0x0
c001f1e5:	eb 09                	jmp    c001f1f0 <FAT::unlink(char const*)+0x78>
c001f1e7:	90                   	nop
c001f1e8:	b8 01 00 00 00       	mov    eax,0x1
c001f1ed:	8d 76 00             	lea    esi,[esi+0x0]
c001f1f0:	81 c4 1c 01 00 00    	add    esp,0x11c
c001f1f6:	c3                   	ret    
c001f1f7:	90                   	nop

c001f1f8 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001f1f8:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001f1fe:	8b 84 24 38 01 00 00 	mov    eax,DWORD PTR [esp+0x138]
c001f205:	8b 94 24 3c 01 00 00 	mov    edx,DWORD PTR [esp+0x13c]
c001f20c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001f210:	88 d0                	mov    al,dl
c001f212:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001f216:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001f21e:	75 0c                	jne    c001f22c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x34>
c001f220:	b8 04 00 00 00       	mov    eax,0x4
c001f225:	e9 7e 01 00 00       	jmp    c001f3a8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1b0>
c001f22a:	66 90                	xchg   ax,ax
c001f22c:	83 ec 08             	sub    esp,0x8
c001f22f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001f236:	8d 44 24 24          	lea    eax,[esp+0x24]
c001f23a:	50                   	push   eax
c001f23b:	e8 10 14 fe ff       	call   c0000650 <strcpy>
c001f240:	83 c4 10             	add    esp,0x10
c001f243:	83 ec 08             	sub    esp,0x8
c001f246:	8d 44 24 20          	lea    eax,[esp+0x20]
c001f24a:	50                   	push   eax
c001f24b:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001f252:	e8 c5 fb ff ff       	call   c001ee1c <FAT::fixFilepath(char*)>
c001f257:	83 c4 10             	add    esp,0x10
c001f25a:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001f262:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001f26a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001f26f:	83 e0 01             	and    eax,0x1
c001f272:	74 14                	je     c001f288 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x90>
c001f274:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001f27b:	83 c8 01             	or     eax,0x1
c001f27e:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001f285:	8d 76 00             	lea    esi,[esi+0x0]
c001f288:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001f28d:	83 e0 02             	and    eax,0x2
c001f290:	74 12                	je     c001f2a4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xac>
c001f292:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001f299:	83 c8 20             	or     eax,0x20
c001f29c:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001f2a3:	90                   	nop
c001f2a4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001f2a9:	83 e0 04             	and    eax,0x4
c001f2ac:	74 12                	je     c001f2c0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c001f2ae:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001f2b5:	83 c8 04             	or     eax,0x4
c001f2b8:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001f2bf:	90                   	nop
c001f2c0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001f2c5:	83 e0 08             	and    eax,0x8
c001f2c8:	74 12                	je     c001f2dc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c001f2ca:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001f2d1:	83 c8 02             	or     eax,0x2
c001f2d4:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001f2db:	90                   	nop
c001f2dc:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001f2e1:	83 e0 01             	and    eax,0x1
c001f2e4:	74 12                	je     c001f2f8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x100>
c001f2e6:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001f2ed:	83 c8 01             	or     eax,0x1
c001f2f0:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001f2f7:	90                   	nop
c001f2f8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001f2fd:	83 e0 02             	and    eax,0x2
c001f300:	74 12                	je     c001f314 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x11c>
c001f302:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001f309:	83 c8 20             	or     eax,0x20
c001f30c:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001f313:	90                   	nop
c001f314:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001f319:	83 e0 04             	and    eax,0x4
c001f31c:	74 12                	je     c001f330 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x138>
c001f31e:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001f325:	83 c8 04             	or     eax,0x4
c001f328:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001f32f:	90                   	nop
c001f330:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001f335:	83 e0 08             	and    eax,0x8
c001f338:	74 12                	je     c001f34c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x154>
c001f33a:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001f341:	83 c8 02             	or     eax,0x2
c001f344:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001f34b:	90                   	nop
c001f34c:	8a 94 24 1e 01 00 00 	mov    dl,BYTE PTR [esp+0x11e]
c001f353:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001f35a:	09 d0                	or     eax,edx
c001f35c:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001f363:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c001f36b:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c001f373:	83 ec 04             	sub    esp,0x4
c001f376:	52                   	push   edx
c001f377:	50                   	push   eax
c001f378:	8d 44 24 24          	lea    eax,[esp+0x24]
c001f37c:	50                   	push   eax
c001f37d:	e8 f2 5c fe ff       	call   c0005074 <f_chmod>
c001f382:	83 c4 10             	add    esp,0x10
c001f385:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001f38c:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001f393:	85 c0                	test   eax,eax
c001f395:	75 09                	jne    c001f3a0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1a8>
c001f397:	b8 00 00 00 00       	mov    eax,0x0
c001f39c:	eb 0a                	jmp    c001f3a8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1b0>
c001f39e:	66 90                	xchg   ax,ax
c001f3a0:	b8 01 00 00 00       	mov    eax,0x1
c001f3a5:	8d 76 00             	lea    esi,[esi+0x0]
c001f3a8:	81 c4 2c 01 00 00    	add    esp,0x12c
c001f3ae:	c3                   	ret    
c001f3af:	90                   	nop

c001f3b0 <FAT::rename(char const*, char const*)>:
c001f3b0:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001f3b6:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001f3be:	74 0c                	je     c001f3cc <FAT::rename(char const*, char const*)+0x1c>
c001f3c0:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001f3c8:	75 0e                	jne    c001f3d8 <FAT::rename(char const*, char const*)+0x28>
c001f3ca:	66 90                	xchg   ax,ax
c001f3cc:	b8 04 00 00 00       	mov    eax,0x4
c001f3d1:	e9 9e 00 00 00       	jmp    c001f474 <FAT::rename(char const*, char const*)+0xc4>
c001f3d6:	66 90                	xchg   ax,ax
c001f3d8:	83 ec 08             	sub    esp,0x8
c001f3db:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001f3e2:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001f3e9:	50                   	push   eax
c001f3ea:	e8 61 12 fe ff       	call   c0000650 <strcpy>
c001f3ef:	83 c4 10             	add    esp,0x10
c001f3f2:	83 ec 08             	sub    esp,0x8
c001f3f5:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001f3fc:	50                   	push   eax
c001f3fd:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001f404:	e8 13 fa ff ff       	call   c001ee1c <FAT::fixFilepath(char*)>
c001f409:	83 c4 10             	add    esp,0x10
c001f40c:	83 ec 08             	sub    esp,0x8
c001f40f:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001f416:	8d 44 24 18          	lea    eax,[esp+0x18]
c001f41a:	50                   	push   eax
c001f41b:	e8 30 12 fe ff       	call   c0000650 <strcpy>
c001f420:	83 c4 10             	add    esp,0x10
c001f423:	83 ec 08             	sub    esp,0x8
c001f426:	8d 44 24 14          	lea    eax,[esp+0x14]
c001f42a:	50                   	push   eax
c001f42b:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001f432:	e8 e5 f9 ff ff       	call   c001ee1c <FAT::fixFilepath(char*)>
c001f437:	83 c4 10             	add    esp,0x10
c001f43a:	83 ec 08             	sub    esp,0x8
c001f43d:	8d 44 24 14          	lea    eax,[esp+0x14]
c001f441:	50                   	push   eax
c001f442:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001f449:	50                   	push   eax
c001f44a:	e8 6d 5a fe ff       	call   c0004ebc <f_rename>
c001f44f:	83 c4 10             	add    esp,0x10
c001f452:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001f459:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001f460:	85 c0                	test   eax,eax
c001f462:	75 08                	jne    c001f46c <FAT::rename(char const*, char const*)+0xbc>
c001f464:	b8 00 00 00 00       	mov    eax,0x0
c001f469:	eb 09                	jmp    c001f474 <FAT::rename(char const*, char const*)+0xc4>
c001f46b:	90                   	nop
c001f46c:	b8 01 00 00 00       	mov    eax,0x1
c001f471:	8d 76 00             	lea    esi,[esi+0x0]
c001f474:	81 c4 1c 02 00 00    	add    esp,0x21c
c001f47a:	c3                   	ret    
c001f47b:	90                   	nop

c001f47c <FAT::mkdir(char const*)>:
c001f47c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001f482:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001f48a:	75 08                	jne    c001f494 <FAT::mkdir(char const*)+0x18>
c001f48c:	b8 04 00 00 00       	mov    eax,0x4
c001f491:	eb 61                	jmp    c001f4f4 <FAT::mkdir(char const*)+0x78>
c001f493:	90                   	nop
c001f494:	83 ec 08             	sub    esp,0x8
c001f497:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001f49e:	8d 44 24 18          	lea    eax,[esp+0x18]
c001f4a2:	50                   	push   eax
c001f4a3:	e8 a8 11 fe ff       	call   c0000650 <strcpy>
c001f4a8:	83 c4 10             	add    esp,0x10
c001f4ab:	83 ec 08             	sub    esp,0x8
c001f4ae:	8d 44 24 14          	lea    eax,[esp+0x14]
c001f4b2:	50                   	push   eax
c001f4b3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001f4ba:	e8 5d f9 ff ff       	call   c001ee1c <FAT::fixFilepath(char*)>
c001f4bf:	83 c4 10             	add    esp,0x10
c001f4c2:	83 ec 0c             	sub    esp,0xc
c001f4c5:	8d 44 24 18          	lea    eax,[esp+0x18]
c001f4c9:	50                   	push   eax
c001f4ca:	e8 52 58 fe ff       	call   c0004d21 <f_mkdir>
c001f4cf:	83 c4 10             	add    esp,0x10
c001f4d2:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001f4d9:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001f4e0:	85 c0                	test   eax,eax
c001f4e2:	75 08                	jne    c001f4ec <FAT::mkdir(char const*)+0x70>
c001f4e4:	b8 00 00 00 00       	mov    eax,0x0
c001f4e9:	eb 09                	jmp    c001f4f4 <FAT::mkdir(char const*)+0x78>
c001f4eb:	90                   	nop
c001f4ec:	b8 01 00 00 00       	mov    eax,0x1
c001f4f1:	8d 76 00             	lea    esi,[esi+0x0]
c001f4f4:	81 c4 1c 01 00 00    	add    esp,0x11c
c001f4fa:	c3                   	ret    
c001f4fb:	90                   	nop

c001f4fc <FAT::exists(char const*)>:
c001f4fc:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001f502:	83 ec 08             	sub    esp,0x8
c001f505:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001f50c:	8d 44 24 10          	lea    eax,[esp+0x10]
c001f510:	50                   	push   eax
c001f511:	e8 3a 11 fe ff       	call   c0000650 <strcpy>
c001f516:	83 c4 10             	add    esp,0x10
c001f519:	83 ec 08             	sub    esp,0x8
c001f51c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001f520:	50                   	push   eax
c001f521:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001f528:	e8 ef f8 ff ff       	call   c001ee1c <FAT::fixFilepath(char*)>
c001f52d:	83 c4 10             	add    esp,0x10
c001f530:	83 ec 08             	sub    esp,0x8
c001f533:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c001f53a:	50                   	push   eax
c001f53b:	8d 44 24 10          	lea    eax,[esp+0x10]
c001f53f:	50                   	push   eax
c001f540:	e8 4a 54 fe ff       	call   c000498f <f_stat>
c001f545:	83 c4 10             	add    esp,0x10
c001f548:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001f54f:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001f556:	85 c0                	test   eax,eax
c001f558:	75 06                	jne    c001f560 <FAT::exists(char const*)+0x64>
c001f55a:	b0 01                	mov    al,0x1
c001f55c:	eb 06                	jmp    c001f564 <FAT::exists(char const*)+0x68>
c001f55e:	66 90                	xchg   ax,ax
c001f560:	b0 00                	mov    al,0x0
c001f562:	66 90                	xchg   ax,ax
c001f564:	81 c4 2c 02 00 00    	add    esp,0x22c
c001f56a:	c3                   	ret    
c001f56b:	90                   	nop

c001f56c <isoReadDiscSectorHelper>:
c001f56c:	83 ec 2c             	sub    esp,0x2c
c001f56f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001f573:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001f577:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001f57c:	83 e8 41             	sub    eax,0x41
c001f57f:	8b 0c 85 e0 5a 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffca520]
c001f586:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001f58a:	ba 00 00 00 00       	mov    edx,0x0
c001f58f:	83 ec 0c             	sub    esp,0xc
c001f592:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001f596:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001f59a:	52                   	push   edx
c001f59b:	50                   	push   eax
c001f59c:	51                   	push   ecx
c001f59d:	e8 9c be fe ff       	call   c000b43e <LogicalDisk::read(unsigned long long, int, void*)>
c001f5a2:	83 c4 20             	add    esp,0x20
c001f5a5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001f5a9:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001f5ae:	74 0c                	je     c001f5bc <isoReadDiscSectorHelper+0x50>
c001f5b0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001f5b4:	c1 e0 0b             	shl    eax,0xb
c001f5b7:	eb 0b                	jmp    c001f5c4 <isoReadDiscSectorHelper+0x58>
c001f5b9:	8d 76 00             	lea    esi,[esi+0x0]
c001f5bc:	b8 00 00 00 00       	mov    eax,0x0
c001f5c1:	8d 76 00             	lea    esi,[esi+0x0]
c001f5c4:	83 c4 2c             	add    esp,0x2c
c001f5c7:	c3                   	ret    

c001f5c8 <iso_kprintf>:
c001f5c8:	83 ec 0c             	sub    esp,0xc
c001f5cb:	83 ec 08             	sub    esp,0x8
c001f5ce:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001f5d2:	68 5c c9 02 c0       	push   0xc002c95c
c001f5d7:	e8 8a 79 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001f5dc:	83 c4 10             	add    esp,0x10
c001f5df:	90                   	nop
c001f5e0:	83 c4 0c             	add    esp,0xc
c001f5e3:	c3                   	ret    

c001f5e4 <iso_kprintfd>:
c001f5e4:	83 ec 0c             	sub    esp,0xc
c001f5e7:	83 ec 08             	sub    esp,0x8
c001f5ea:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001f5ee:	68 1a bf 02 c0       	push   0xc002bf1a
c001f5f3:	e8 6e 79 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001f5f8:	83 c4 10             	add    esp,0x10
c001f5fb:	90                   	nop
c001f5fc:	83 c4 0c             	add    esp,0xc
c001f5ff:	c3                   	ret    

c001f600 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001f600:	b8 08 00 00 00       	mov    eax,0x8
c001f605:	c3                   	ret    

c001f606 <ISO9660::truncate(void*, unsigned long long)>:
c001f606:	b8 01 00 00 00       	mov    eax,0x1
c001f60b:	c3                   	ret    

c001f60c <ISO9660::getName()>:
c001f60c:	b8 e0 dc 02 c0       	mov    eax,0xc002dce0
c001f611:	c3                   	ret    

c001f612 <ISO9660::closeDir(void*)>:
c001f612:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f616:	8b 00                	mov    eax,DWORD PTR [eax]
c001f618:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c001f61b:	90                   	nop

c001f61c <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001f61c:	b8 01 00 00 00       	mov    eax,0x1
c001f621:	c3                   	ret    

c001f622 <ISO9660::unlink(char const*)>:
c001f622:	b8 01 00 00 00       	mov    eax,0x1
c001f627:	c3                   	ret    

c001f628 <ISO9660::write(void*, unsigned long, void*, int*)>:
c001f628:	b8 03 00 00 00       	mov    eax,0x3
c001f62d:	c3                   	ret    

c001f62e <ISO9660::rename(char const*, char const*)>:
c001f62e:	b8 01 00 00 00       	mov    eax,0x1
c001f633:	c3                   	ret    

c001f634 <ISO9660::mkdir(char const*)>:
c001f634:	b8 01 00 00 00       	mov    eax,0x1
c001f639:	c3                   	ret    

c001f63a <ISO9660::~ISO9660()>:
c001f63a:	83 ec 0c             	sub    esp,0xc
c001f63d:	ba 20 de 02 c0       	mov    edx,0xc002de20
c001f642:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f646:	89 10                	mov    DWORD PTR [eax],edx
c001f648:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f64c:	83 ec 0c             	sub    esp,0xc
c001f64f:	50                   	push   eax
c001f650:	e8 ab 91 fe ff       	call   c0008800 <Filesystem::~Filesystem()>
c001f655:	83 c4 10             	add    esp,0x10
c001f658:	90                   	nop
c001f659:	83 c4 0c             	add    esp,0xc
c001f65c:	c3                   	ret    
c001f65d:	90                   	nop

c001f65e <ISO9660::~ISO9660()>:
c001f65e:	83 ec 0c             	sub    esp,0xc
c001f661:	83 ec 0c             	sub    esp,0xc
c001f664:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f668:	e8 cd ff ff ff       	call   c001f63a <ISO9660::~ISO9660()>
c001f66d:	83 c4 10             	add    esp,0x10
c001f670:	83 ec 08             	sub    esp,0x8
c001f673:	6a 08                	push   0x8
c001f675:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f679:	e8 8e e6 fe ff       	call   c000dd0c <operator delete(void*, unsigned long)>
c001f67e:	83 c4 10             	add    esp,0x10
c001f681:	83 c4 0c             	add    esp,0xc
c001f684:	c3                   	ret    
c001f685:	90                   	nop

c001f686 <ISO9660::exists(char const*)>:
c001f686:	83 ec 18             	sub    esp,0x18
c001f689:	68 fb dc 02 c0       	push   0xc002dcfb
c001f68e:	e8 cd 0e ff ff       	call   c0010560 <KePanic(char const*)>
c001f693:	31 c0                	xor    eax,eax
c001f695:	83 c4 1c             	add    esp,0x1c
c001f698:	c3                   	ret    
c001f699:	90                   	nop

c001f69a <ISO9660::open(char const*, void**, FileOpenMode)>:
c001f69a:	56                   	push   esi
c001f69b:	53                   	push   ebx
c001f69c:	53                   	push   ebx
c001f69d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f6a1:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001f6a5:	85 db                	test   ebx,ebx
c001f6a7:	0f 84 ca 00 00 00    	je     c001f777 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001f6ad:	85 f6                	test   esi,esi
c001f6af:	0f 84 c2 00 00 00    	je     c001f777 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001f6b5:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c001f6ba:	b8 03 00 00 00       	mov    eax,0x3
c001f6bf:	0f 85 b7 00 00 00    	jne    c001f77c <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001f6c5:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001f6c7:	38 0d 80 85 03 c0    	cmp    BYTE PTR ds:0xc0038580,cl
c001f6cd:	0f be 05 80 85 03 c0 	movsx  eax,BYTE PTR ds:0xc0038580
c001f6d4:	74 1b                	je     c001f6f1 <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c001f6d6:	85 c0                	test   eax,eax
c001f6d8:	74 10                	je     c001f6ea <ISO9660::open(char const*, void**, FileOpenMode)+0x50>
c001f6da:	83 ec 0c             	sub    esp,0xc
c001f6dd:	68 19 dd 02 c0       	push   0xc002dd19
c001f6e2:	e8 79 0e ff ff       	call   c0010560 <KePanic(char const*)>
c001f6e7:	83 c4 10             	add    esp,0x10
c001f6ea:	8a 03                	mov    al,BYTE PTR [ebx]
c001f6ec:	a2 80 85 03 c0       	mov    ds:0xc0038580,al
c001f6f1:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001f6f4:	8b 04 85 dc 59 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffca624]
c001f6fb:	85 c0                	test   eax,eax
c001f6fd:	74 09                	je     c001f708 <ISO9660::open(char const*, void**, FileOpenMode)+0x6e>
c001f6ff:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001f706:	74 48                	je     c001f750 <ISO9660::open(char const*, void**, FileOpenMode)+0xb6>
c001f708:	83 ec 0c             	sub    esp,0xc
c001f70b:	68 29 dd 02 c0       	push   0xc002dd29
c001f710:	e8 51 78 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001f715:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001f718:	83 c4 10             	add    esp,0x10
c001f71b:	8b 04 85 dc 59 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffca624]
c001f722:	85 c0                	test   eax,eax
c001f724:	74 17                	je     c001f73d <ISO9660::open(char const*, void**, FileOpenMode)+0xa3>
c001f726:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001f72d:	83 ec 0c             	sub    esp,0xc
c001f730:	68 49 dd 02 c0       	push   0xc002dd49
c001f735:	e8 2c 78 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001f73a:	83 c4 10             	add    esp,0x10
c001f73d:	0f be 05 80 85 03 c0 	movsx  eax,BYTE PTR ds:0xc0038580
c001f744:	83 ec 0c             	sub    esp,0xc
c001f747:	50                   	push   eax
c001f748:	e8 fa 74 fe ff       	call   c0006c47 <init_percd>
c001f74d:	83 c4 10             	add    esp,0x10
c001f750:	51                   	push   ecx
c001f751:	83 c3 03             	add    ebx,0x3
c001f754:	51                   	push   ecx
c001f755:	6a 00                	push   0x0
c001f757:	53                   	push   ebx
c001f758:	e8 ad 6f fe ff       	call   c000670a <iso_open>
c001f75d:	83 c4 10             	add    esp,0x10
c001f760:	89 c2                	mov    edx,eax
c001f762:	b8 01 00 00 00       	mov    eax,0x1
c001f767:	83 fa ff             	cmp    edx,0xffffffff
c001f76a:	74 10                	je     c001f77c <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001f76c:	83 c2 32             	add    edx,0x32
c001f76f:	31 c0                	xor    eax,eax
c001f771:	01 d2                	add    edx,edx
c001f773:	89 16                	mov    DWORD PTR [esi],edx
c001f775:	eb 05                	jmp    c001f77c <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001f777:	b8 04 00 00 00       	mov    eax,0x4
c001f77c:	5a                   	pop    edx
c001f77d:	5b                   	pop    ebx
c001f77e:	5e                   	pop    esi
c001f77f:	c3                   	ret    

c001f780 <ISO9660::read(void*, unsigned long, void*, int*)>:
c001f780:	53                   	push   ebx
c001f781:	83 ec 08             	sub    esp,0x8
c001f784:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f788:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001f78c:	85 c0                	test   eax,eax
c001f78e:	74 2d                	je     c001f7bd <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001f790:	85 db                	test   ebx,ebx
c001f792:	74 29                	je     c001f7bd <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001f794:	52                   	push   edx
c001f795:	b9 02 00 00 00       	mov    ecx,0x2
c001f79a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f79e:	99                   	cdq    
c001f79f:	f7 f9                	idiv   ecx
c001f7a1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001f7a5:	83 e8 32             	sub    eax,0x32
c001f7a8:	50                   	push   eax
c001f7a9:	e8 04 70 fe ff       	call   c00067b2 <iso_read>
c001f7ae:	83 c4 10             	add    esp,0x10
c001f7b1:	89 03                	mov    DWORD PTR [ebx],eax
c001f7b3:	09 d0                	or     eax,edx
c001f7b5:	0f 94 c0             	sete   al
c001f7b8:	0f b6 c0             	movzx  eax,al
c001f7bb:	eb 05                	jmp    c001f7c2 <ISO9660::read(void*, unsigned long, void*, int*)+0x42>
c001f7bd:	b8 04 00 00 00       	mov    eax,0x4
c001f7c2:	83 c4 08             	add    esp,0x8
c001f7c5:	5b                   	pop    ebx
c001f7c6:	c3                   	ret    
c001f7c7:	90                   	nop

c001f7c8 <ISO9660::seek(void*, unsigned long long)>:
c001f7c8:	57                   	push   edi
c001f7c9:	b8 04 00 00 00       	mov    eax,0x4
c001f7ce:	56                   	push   esi
c001f7cf:	51                   	push   ecx
c001f7d0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f7d4:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001f7d8:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001f7dc:	85 d2                	test   edx,edx
c001f7de:	74 26                	je     c001f806 <ISO9660::seek(void*, unsigned long long)+0x3e>
c001f7e0:	89 d0                	mov    eax,edx
c001f7e2:	b9 02 00 00 00       	mov    ecx,0x2
c001f7e7:	6a 00                	push   0x0
c001f7e9:	99                   	cdq    
c001f7ea:	f7 f9                	idiv   ecx
c001f7ec:	57                   	push   edi
c001f7ed:	56                   	push   esi
c001f7ee:	83 e8 32             	sub    eax,0x32
c001f7f1:	50                   	push   eax
c001f7f2:	e8 d1 70 fe ff       	call   c00068c8 <iso_seek>
c001f7f7:	83 c4 10             	add    esp,0x10
c001f7fa:	31 f0                	xor    eax,esi
c001f7fc:	31 fa                	xor    edx,edi
c001f7fe:	09 d0                	or     eax,edx
c001f800:	0f 95 c0             	setne  al
c001f803:	0f b6 c0             	movzx  eax,al
c001f806:	5a                   	pop    edx
c001f807:	5e                   	pop    esi
c001f808:	5f                   	pop    edi
c001f809:	c3                   	ret    

c001f80a <ISO9660::tell(void*, unsigned long long*)>:
c001f80a:	53                   	push   ebx
c001f80b:	83 ec 08             	sub    esp,0x8
c001f80e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f812:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001f816:	85 c0                	test   eax,eax
c001f818:	74 24                	je     c001f83e <ISO9660::tell(void*, unsigned long long*)+0x34>
c001f81a:	85 db                	test   ebx,ebx
c001f81c:	74 20                	je     c001f83e <ISO9660::tell(void*, unsigned long long*)+0x34>
c001f81e:	b9 02 00 00 00       	mov    ecx,0x2
c001f823:	99                   	cdq    
c001f824:	f7 f9                	idiv   ecx
c001f826:	83 ec 0c             	sub    esp,0xc
c001f829:	83 e8 32             	sub    eax,0x32
c001f82c:	50                   	push   eax
c001f82d:	e8 1a 71 fe ff       	call   c000694c <iso_tell>
c001f832:	83 c4 10             	add    esp,0x10
c001f835:	89 03                	mov    DWORD PTR [ebx],eax
c001f837:	31 c0                	xor    eax,eax
c001f839:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c001f83c:	eb 05                	jmp    c001f843 <ISO9660::tell(void*, unsigned long long*)+0x39>
c001f83e:	b8 04 00 00 00       	mov    eax,0x4
c001f843:	83 c4 08             	add    esp,0x8
c001f846:	5b                   	pop    ebx
c001f847:	c3                   	ret    

c001f848 <ISO9660::stat(void*, unsigned long long*)>:
c001f848:	56                   	push   esi
c001f849:	53                   	push   ebx
c001f84a:	83 ec 10             	sub    esp,0x10
c001f84d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001f851:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001f855:	68 6d dd 02 c0       	push   0xc002dd6d
c001f85a:	e8 07 77 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001f85f:	83 c4 10             	add    esp,0x10
c001f862:	85 db                	test   ebx,ebx
c001f864:	74 2a                	je     c001f890 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001f866:	85 f6                	test   esi,esi
c001f868:	74 26                	je     c001f890 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001f86a:	89 d8                	mov    eax,ebx
c001f86c:	b9 02 00 00 00       	mov    ecx,0x2
c001f871:	99                   	cdq    
c001f872:	83 ec 0c             	sub    esp,0xc
c001f875:	f7 f9                	idiv   ecx
c001f877:	83 e8 32             	sub    eax,0x32
c001f87a:	50                   	push   eax
c001f87b:	e8 fd 70 fe ff       	call   c000697d <iso_total>
c001f880:	83 c4 10             	add    esp,0x10
c001f883:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c001f88a:	89 06                	mov    DWORD PTR [esi],eax
c001f88c:	31 c0                	xor    eax,eax
c001f88e:	eb 05                	jmp    c001f895 <ISO9660::stat(void*, unsigned long long*)+0x4d>
c001f890:	b8 04 00 00 00       	mov    eax,0x4
c001f895:	5a                   	pop    edx
c001f896:	5b                   	pop    ebx
c001f897:	5e                   	pop    esi
c001f898:	c3                   	ret    
c001f899:	90                   	nop

c001f89a <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001f89a:	55                   	push   ebp
c001f89b:	57                   	push   edi
c001f89c:	56                   	push   esi
c001f89d:	53                   	push   ebx
c001f89e:	83 ec 18             	sub    esp,0x18
c001f8a1:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001f8a5:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001f8a9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001f8ad:	68 75 dd 02 c0       	push   0xc002dd75
c001f8b2:	e8 af 76 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001f8b7:	83 c4 10             	add    esp,0x10
c001f8ba:	85 ff                	test   edi,edi
c001f8bc:	0f 94 c0             	sete   al
c001f8bf:	85 f6                	test   esi,esi
c001f8c1:	0f 94 c2             	sete   dl
c001f8c4:	09 d0                	or     eax,edx
c001f8c6:	a8 01                	test   al,0x1
c001f8c8:	0f 85 dd 00 00 00    	jne    c001f9ab <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001f8ce:	85 db                	test   ebx,ebx
c001f8d0:	0f 84 d5 00 00 00    	je     c001f9ab <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001f8d6:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001f8d9:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c001f8df:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001f8e6:	0f be 05 80 85 03 c0 	movsx  eax,BYTE PTR ds:0xc0038580
c001f8ed:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001f8ef:	38 0d 80 85 03 c0    	cmp    BYTE PTR ds:0xc0038580,cl
c001f8f5:	74 1b                	je     c001f912 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x78>
c001f8f7:	85 c0                	test   eax,eax
c001f8f9:	74 10                	je     c001f90b <ISO9660::stat(char const*, unsigned long long*, bool*)+0x71>
c001f8fb:	83 ec 0c             	sub    esp,0xc
c001f8fe:	68 19 dd 02 c0       	push   0xc002dd19
c001f903:	e8 58 0c ff ff       	call   c0010560 <KePanic(char const*)>
c001f908:	83 c4 10             	add    esp,0x10
c001f90b:	8a 03                	mov    al,BYTE PTR [ebx]
c001f90d:	a2 80 85 03 c0       	mov    ds:0xc0038580,al
c001f912:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001f915:	8b 04 85 dc 59 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffca624]
c001f91c:	85 c0                	test   eax,eax
c001f91e:	74 09                	je     c001f929 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8f>
c001f920:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001f927:	74 51                	je     c001f97a <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe0>
c001f929:	83 ec 0c             	sub    esp,0xc
c001f92c:	68 7d dd 02 c0       	push   0xc002dd7d
c001f931:	e8 30 76 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001f936:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001f939:	83 c4 10             	add    esp,0x10
c001f93c:	83 3c 85 dc 59 03 c0 00 	cmp    DWORD PTR [eax*4-0x3ffca624],0x0
c001f944:	74 21                	je     c001f967 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xcd>
c001f946:	83 ec 0c             	sub    esp,0xc
c001f949:	68 9d dd 02 c0       	push   0xc002dd9d
c001f94e:	e8 13 76 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001f953:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001f956:	83 c4 10             	add    esp,0x10
c001f959:	8b 04 85 dc 59 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffca624]
c001f960:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001f967:	0f be 05 80 85 03 c0 	movsx  eax,BYTE PTR ds:0xc0038580
c001f96e:	83 ec 0c             	sub    esp,0xc
c001f971:	50                   	push   eax
c001f972:	e8 d0 72 fe ff       	call   c0006c47 <init_percd>
c001f977:	83 c4 10             	add    esp,0x10
c001f97a:	52                   	push   edx
c001f97b:	83 c3 03             	add    ebx,0x3
c001f97e:	52                   	push   edx
c001f97f:	6a 00                	push   0x0
c001f981:	53                   	push   ebx
c001f982:	e8 83 6d fe ff       	call   c000670a <iso_open>
c001f987:	83 c4 10             	add    esp,0x10
c001f98a:	83 f8 ff             	cmp    eax,0xffffffff
c001f98d:	89 c5                	mov    ebp,eax
c001f98f:	75 21                	jne    c001f9b2 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x118>
c001f991:	50                   	push   eax
c001f992:	50                   	push   eax
c001f993:	6a 01                	push   0x1
c001f995:	53                   	push   ebx
c001f996:	e8 6f 6d fe ff       	call   c000670a <iso_open>
c001f99b:	83 c4 10             	add    esp,0x10
c001f99e:	ba 02 00 00 00       	mov    edx,0x2
c001f9a3:	40                   	inc    eax
c001f9a4:	74 2b                	je     c001f9d1 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001f9a6:	c6 06 01             	mov    BYTE PTR [esi],0x1
c001f9a9:	eb 24                	jmp    c001f9cf <ISO9660::stat(char const*, unsigned long long*, bool*)+0x135>
c001f9ab:	ba 04 00 00 00       	mov    edx,0x4
c001f9b0:	eb 1f                	jmp    c001f9d1 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001f9b2:	83 ec 0c             	sub    esp,0xc
c001f9b5:	50                   	push   eax
c001f9b6:	e8 c2 6f fe ff       	call   c000697d <iso_total>
c001f9bb:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001f9c2:	89 07                	mov    DWORD PTR [edi],eax
c001f9c4:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001f9c7:	e8 c8 6d fe ff       	call   c0006794 <iso_close>
c001f9cc:	83 c4 10             	add    esp,0x10
c001f9cf:	31 d2                	xor    edx,edx
c001f9d1:	83 c4 0c             	add    esp,0xc
c001f9d4:	89 d0                	mov    eax,edx
c001f9d6:	5b                   	pop    ebx
c001f9d7:	5e                   	pop    esi
c001f9d8:	5f                   	pop    edi
c001f9d9:	5d                   	pop    ebp
c001f9da:	c3                   	ret    
c001f9db:	90                   	nop

c001f9dc <ISO9660::close(void*)>:
c001f9dc:	83 ec 0c             	sub    esp,0xc
c001f9df:	b8 04 00 00 00       	mov    eax,0x4
c001f9e4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f9e8:	85 d2                	test   edx,edx
c001f9ea:	74 1b                	je     c001fa07 <ISO9660::close(void*)+0x2b>
c001f9ec:	89 d0                	mov    eax,edx
c001f9ee:	b9 02 00 00 00       	mov    ecx,0x2
c001f9f3:	99                   	cdq    
c001f9f4:	83 ec 0c             	sub    esp,0xc
c001f9f7:	f7 f9                	idiv   ecx
c001f9f9:	83 e8 32             	sub    eax,0x32
c001f9fc:	50                   	push   eax
c001f9fd:	e8 92 6d fe ff       	call   c0006794 <iso_close>
c001fa02:	83 c4 10             	add    esp,0x10
c001fa05:	31 c0                	xor    eax,eax
c001fa07:	83 c4 0c             	add    esp,0xc
c001fa0a:	c3                   	ret    
c001fa0b:	90                   	nop

c001fa0c <ISO9660::openDir(char const*, void**)>:
c001fa0c:	56                   	push   esi
c001fa0d:	53                   	push   ebx
c001fa0e:	50                   	push   eax
c001fa0f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001fa13:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001fa17:	85 db                	test   ebx,ebx
c001fa19:	0f 84 bd 00 00 00    	je     c001fadc <ISO9660::openDir(char const*, void**)+0xd0>
c001fa1f:	85 f6                	test   esi,esi
c001fa21:	0f 84 b5 00 00 00    	je     c001fadc <ISO9660::openDir(char const*, void**)+0xd0>
c001fa27:	8a 13                	mov    dl,BYTE PTR [ebx]
c001fa29:	38 15 80 85 03 c0    	cmp    BYTE PTR ds:0xc0038580,dl
c001fa2f:	0f be 05 80 85 03 c0 	movsx  eax,BYTE PTR ds:0xc0038580
c001fa36:	74 1b                	je     c001fa53 <ISO9660::openDir(char const*, void**)+0x47>
c001fa38:	85 c0                	test   eax,eax
c001fa3a:	74 10                	je     c001fa4c <ISO9660::openDir(char const*, void**)+0x40>
c001fa3c:	83 ec 0c             	sub    esp,0xc
c001fa3f:	68 19 dd 02 c0       	push   0xc002dd19
c001fa44:	e8 17 0b ff ff       	call   c0010560 <KePanic(char const*)>
c001fa49:	83 c4 10             	add    esp,0x10
c001fa4c:	8a 03                	mov    al,BYTE PTR [ebx]
c001fa4e:	a2 80 85 03 c0       	mov    ds:0xc0038580,al
c001fa53:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001fa56:	8b 04 85 dc 59 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffca624]
c001fa5d:	85 c0                	test   eax,eax
c001fa5f:	74 10                	je     c001fa71 <ISO9660::openDir(char const*, void**)+0x65>
c001fa61:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001fa68:	74 1a                	je     c001fa84 <ISO9660::openDir(char const*, void**)+0x78>
c001fa6a:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001fa71:	0f be 05 80 85 03 c0 	movsx  eax,BYTE PTR ds:0xc0038580
c001fa78:	83 ec 0c             	sub    esp,0xc
c001fa7b:	50                   	push   eax
c001fa7c:	e8 c6 71 fe ff       	call   c0006c47 <init_percd>
c001fa81:	83 c4 10             	add    esp,0x10
c001fa84:	50                   	push   eax
c001fa85:	83 c3 03             	add    ebx,0x3
c001fa88:	50                   	push   eax
c001fa89:	6a 01                	push   0x1
c001fa8b:	53                   	push   ebx
c001fa8c:	e8 79 6c fe ff       	call   c000670a <iso_open>
c001fa91:	83 c4 10             	add    esp,0x10
c001fa94:	83 f8 ff             	cmp    eax,0xffffffff
c001fa97:	89 c3                	mov    ebx,eax
c001fa99:	a1 58 63 03 c0       	mov    eax,ds:0xc0036358
c001fa9e:	75 1c                	jne    c001fabc <ISO9660::openDir(char const*, void**)+0xb0>
c001faa0:	53                   	push   ebx
c001faa1:	53                   	push   ebx
c001faa2:	68 c1 dd 02 c0       	push   0xc002ddc1
c001faa7:	ff b0 a6 05 00 00    	push   DWORD PTR [eax+0x5a6]
c001faad:	e8 ea 33 ff ff       	call   c0012e9c <VgaText::puts(char const*)>
c001fab2:	83 c4 10             	add    esp,0x10
c001fab5:	b8 01 00 00 00       	mov    eax,0x1
c001faba:	eb 25                	jmp    c001fae1 <ISO9660::openDir(char const*, void**)+0xd5>
c001fabc:	51                   	push   ecx
c001fabd:	01 db                	add    ebx,ebx
c001fabf:	51                   	push   ecx
c001fac0:	83 c3 65             	add    ebx,0x65
c001fac3:	68 d4 dd 02 c0       	push   0xc002ddd4
c001fac8:	ff b0 a6 05 00 00    	push   DWORD PTR [eax+0x5a6]
c001face:	e8 c9 33 ff ff       	call   c0012e9c <VgaText::puts(char const*)>
c001fad3:	83 c4 10             	add    esp,0x10
c001fad6:	31 c0                	xor    eax,eax
c001fad8:	89 1e                	mov    DWORD PTR [esi],ebx
c001fada:	eb 05                	jmp    c001fae1 <ISO9660::openDir(char const*, void**)+0xd5>
c001fadc:	b8 04 00 00 00       	mov    eax,0x4
c001fae1:	5a                   	pop    edx
c001fae2:	5b                   	pop    ebx
c001fae3:	5e                   	pop    esi
c001fae4:	c3                   	ret    
c001fae5:	90                   	nop

c001fae6 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001fae6:	55                   	push   ebp
c001fae7:	57                   	push   edi
c001fae8:	56                   	push   esi
c001fae9:	53                   	push   ebx
c001faea:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001faf0:	8b 9c 24 34 01 00 00 	mov    ebx,DWORD PTR [esp+0x134]
c001faf7:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c001fafe:	8b ac 24 40 01 00 00 	mov    ebp,DWORD PTR [esp+0x140]
c001fb05:	85 db                	test   ebx,ebx
c001fb07:	0f 84 e4 00 00 00    	je     c001fbf1 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10b>
c001fb0d:	85 ed                	test   ebp,ebp
c001fb0f:	0f 84 dc 00 00 00    	je     c001fbf1 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10b>
c001fb15:	83 ec 0c             	sub    esp,0xc
c001fb18:	68 e7 dd 02 c0       	push   0xc002dde7
c001fb1d:	e8 44 74 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001fb22:	89 d8                	mov    eax,ebx
c001fb24:	b9 02 00 00 00       	mov    ecx,0x2
c001fb29:	99                   	cdq    
c001fb2a:	f7 f9                	idiv   ecx
c001fb2c:	83 e8 32             	sub    eax,0x32
c001fb2f:	89 04 24             	mov    DWORD PTR [esp],eax
c001fb32:	e8 98 6e fe ff       	call   c00069cf <iso_readdir>
c001fb37:	83 c4 10             	add    esp,0x10
c001fb3a:	85 c0                	test   eax,eax
c001fb3c:	89 c3                	mov    ebx,eax
c001fb3e:	75 38                	jne    c001fb78 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x92>
c001fb40:	a1 58 63 03 c0       	mov    eax,ds:0xc0036358
c001fb45:	53                   	push   ebx
c001fb46:	53                   	push   ebx
c001fb47:	68 f2 dd 02 c0       	push   0xc002ddf2
c001fb4c:	ff b0 a6 05 00 00    	push   DWORD PTR [eax+0x5a6]
c001fb52:	e8 45 33 ff ff       	call   c0012e9c <VgaText::puts(char const*)>
c001fb57:	83 c4 0c             	add    esp,0xc
c001fb5a:	68 10 01 00 00       	push   0x110
c001fb5f:	6a 00                	push   0x0
c001fb61:	57                   	push   edi
c001fb62:	e8 89 09 fe ff       	call   c00004f0 <memset>
c001fb67:	83 c4 10             	add    esp,0x10
c001fb6a:	b8 01 00 00 00       	mov    eax,0x1
c001fb6f:	c7 45 00 00 00 00 00 	mov    DWORD PTR [ebp+0x0],0x0
c001fb76:	eb 7e                	jmp    c001fbf6 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x110>
c001fb78:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001fb7e:	8d 70 08             	lea    esi,[eax+0x8]
c001fb81:	83 ec 0c             	sub    esp,0xc
c001fb84:	56                   	push   esi
c001fb85:	e8 f6 09 fe ff       	call   c0000580 <strlen>
c001fb8a:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001fb92:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001fb96:	83 c4 10             	add    esp,0x10
c001fb99:	83 7b 04 ff          	cmp    DWORD PTR [ebx+0x4],0xffffffff
c001fb9d:	75 0a                	jne    c001fba9 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc3>
c001fb9f:	83 3b ff             	cmp    DWORD PTR [ebx],0xffffffff
c001fba2:	b8 02 00 00 00       	mov    eax,0x2
c001fba7:	74 05                	je     c001fbae <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc8>
c001fba9:	b8 01 00 00 00       	mov    eax,0x1
c001fbae:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fbb2:	50                   	push   eax
c001fbb3:	50                   	push   eax
c001fbb4:	56                   	push   esi
c001fbb5:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001fbb9:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001fbbd:	50                   	push   eax
c001fbbe:	e8 8d 0a fe ff       	call   c0000650 <strcpy>
c001fbc3:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001fbca:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001fbcc:	c7 45 00 10 01 00 00 	mov    DWORD PTR [ebp+0x0],0x110
c001fbd3:	5a                   	pop    edx
c001fbd4:	a1 58 63 03 c0       	mov    eax,ds:0xc0036358
c001fbd9:	59                   	pop    ecx
c001fbda:	68 05 de 02 c0       	push   0xc002de05
c001fbdf:	ff b0 a6 05 00 00    	push   DWORD PTR [eax+0x5a6]
c001fbe5:	e8 b2 32 ff ff       	call   c0012e9c <VgaText::puts(char const*)>
c001fbea:	83 c4 10             	add    esp,0x10
c001fbed:	31 c0                	xor    eax,eax
c001fbef:	eb 05                	jmp    c001fbf6 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x110>
c001fbf1:	b8 04 00 00 00       	mov    eax,0x4
c001fbf6:	81 c4 1c 01 00 00    	add    esp,0x11c
c001fbfc:	5b                   	pop    ebx
c001fbfd:	5e                   	pop    esi
c001fbfe:	5f                   	pop    edi
c001fbff:	5d                   	pop    ebp
c001fc00:	c3                   	ret    

c001fc01 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001fc01:	57                   	push   edi
c001fc02:	56                   	push   esi
c001fc03:	53                   	push   ebx
c001fc04:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001fc08:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001fc0c:	39 35 84 85 03 c0    	cmp    DWORD PTR ds:0xc0038584,esi
c001fc12:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001fc16:	0f be cb             	movsx  ecx,bl
c001fc19:	75 0b                	jne    c001fc26 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x25>
c001fc1b:	0f be 05 e4 ff 02 c0 	movsx  eax,BYTE PTR ds:0xc002ffe4
c001fc22:	39 c8                	cmp    eax,ecx
c001fc24:	74 47                	je     c001fc6d <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001fc26:	83 ec 0c             	sub    esp,0xc
c001fc29:	31 d2                	xor    edx,edx
c001fc2b:	68 a0 85 03 c0       	push   0xc00385a0
c001fc30:	6a 01                	push   0x1
c001fc32:	52                   	push   edx
c001fc33:	56                   	push   esi
c001fc34:	ff 34 8d dc 59 03 c0 	push   DWORD PTR [ecx*4-0x3ffca624]
c001fc3b:	e8 fe b7 fe ff       	call   c000b43e <LogicalDisk::read(unsigned long long, int, void*)>
c001fc40:	83 c4 20             	add    esp,0x20
c001fc43:	85 c0                	test   eax,eax
c001fc45:	75 0e                	jne    c001fc55 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x54>
c001fc47:	89 35 84 85 03 c0    	mov    DWORD PTR ds:0xc0038584,esi
c001fc4d:	88 1d e4 ff 02 c0    	mov    BYTE PTR ds:0xc002ffe4,bl
c001fc53:	eb 18                	jmp    c001fc6d <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001fc55:	50                   	push   eax
c001fc56:	68 00 08 00 00       	push   0x800
c001fc5b:	6a 00                	push   0x0
c001fc5d:	57                   	push   edi
c001fc5e:	e8 8d 08 fe ff       	call   c00004f0 <memset>
c001fc63:	83 c4 10             	add    esp,0x10
c001fc66:	b8 01 00 00 00       	mov    eax,0x1
c001fc6b:	eb 0e                	jmp    c001fc7b <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x7a>
c001fc6d:	be a0 85 03 c0       	mov    esi,0xc00385a0
c001fc72:	b9 00 08 00 00       	mov    ecx,0x800
c001fc77:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001fc79:	31 c0                	xor    eax,eax
c001fc7b:	5b                   	pop    ebx
c001fc7c:	5e                   	pop    esi
c001fc7d:	5f                   	pop    edi
c001fc7e:	c3                   	ret    
c001fc7f:	90                   	nop

c001fc80 <ISO9660::tryMount(LogicalDisk*, int)>:
c001fc80:	53                   	push   ebx
c001fc81:	81 ec 0c 08 00 00    	sub    esp,0x80c
c001fc87:	c7 05 84 85 03 c0 ef be ad de 	mov    DWORD PTR ds:0xc0038584,0xdeadbeef
c001fc91:	8b 84 24 1c 08 00 00 	mov    eax,DWORD PTR [esp+0x81c]
c001fc98:	8d 58 41             	lea    ebx,[eax+0x41]
c001fc9b:	0f be db             	movsx  ebx,bl
c001fc9e:	53                   	push   ebx
c001fc9f:	8d 44 24 08          	lea    eax,[esp+0x8]
c001fca3:	50                   	push   eax
c001fca4:	6a 10                	push   0x10
c001fca6:	e8 56 ff ff ff       	call   c001fc01 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001fcab:	83 c4 10             	add    esp,0x10
c001fcae:	31 d2                	xor    edx,edx
c001fcb0:	85 c0                	test   eax,eax
c001fcb2:	75 33                	jne    c001fce7 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001fcb4:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001fcb9:	75 2c                	jne    c001fce7 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001fcbb:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001fcc0:	75 25                	jne    c001fce7 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001fcc2:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001fcc7:	75 1e                	jne    c001fce7 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001fcc9:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001fcce:	75 17                	jne    c001fce7 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001fcd0:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001fcd5:	75 10                	jne    c001fce7 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001fcd7:	83 ec 0c             	sub    esp,0xc
c001fcda:	53                   	push   ebx
c001fcdb:	e8 67 6f fe ff       	call   c0006c47 <init_percd>
c001fce0:	83 c4 10             	add    esp,0x10
c001fce3:	40                   	inc    eax
c001fce4:	0f 95 c2             	setne  dl
c001fce7:	81 c4 08 08 00 00    	add    esp,0x808
c001fced:	88 d0                	mov    al,dl
c001fcef:	5b                   	pop    ebx
c001fcf0:	c3                   	ret    
c001fcf1:	90                   	nop

c001fcf2 <ISO9660::ISO9660()>:
c001fcf2:	83 ec 0c             	sub    esp,0xc
c001fcf5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcf9:	83 ec 0c             	sub    esp,0xc
c001fcfc:	50                   	push   eax
c001fcfd:	e8 da 8a fe ff       	call   c00087dc <Filesystem::Filesystem()>
c001fd02:	83 c4 10             	add    esp,0x10
c001fd05:	ba 20 de 02 c0       	mov    edx,0xc002de20
c001fd0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd0e:	89 10                	mov    DWORD PTR [eax],edx
c001fd10:	e8 44 70 fe ff       	call   c0006d59 <fs_iso9660_init>
c001fd15:	90                   	nop
c001fd16:	83 c4 0c             	add    esp,0xc
c001fd19:	c3                   	ret    

c001fd1a <SoundCard::beginPlayback()>:
c001fd1a:	c7 44 24 04 84 de 02 c0 	mov    DWORD PTR [esp+0x4],0xc002de84
c001fd22:	e9 39 08 ff ff       	jmp    c0010560 <KePanic(char const*)>
c001fd27:	90                   	nop

c001fd28 <SoundCard::stopPlayback()>:
c001fd28:	c7 44 24 04 84 de 02 c0 	mov    DWORD PTR [esp+0x4],0xc002de84
c001fd30:	e9 2b 08 ff ff       	jmp    c0010560 <KePanic(char const*)>
c001fd35:	90                   	nop

c001fd36 <SoundCard::SoundCard(char const*)>:
c001fd36:	83 ec 1c             	sub    esp,0x1c
c001fd39:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fd3d:	83 ec 08             	sub    esp,0x8
c001fd40:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001fd44:	50                   	push   eax
c001fd45:	e8 36 a8 fe ff       	call   c000a580 <Device::Device(char const*)>
c001fd4a:	83 c4 10             	add    esp,0x10
c001fd4d:	ba d0 de 02 c0       	mov    edx,0xc002ded0
c001fd52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fd56:	89 10                	mov    DWORD PTR [eax],edx
c001fd58:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fd5c:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001fd63:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fd67:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c001fd71:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fd75:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c001fd7f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fd83:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c001fd8d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fd91:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001fd9b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001fda3:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001fda8:	7f 1a                	jg     c001fdc4 <SoundCard::SoundCard(char const*)+0x8e>
c001fdaa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fdae:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001fdb2:	83 c2 54             	add    edx,0x54
c001fdb5:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001fdbd:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001fdc2:	eb df                	jmp    c001fda3 <SoundCard::SoundCard(char const*)+0x6d>
c001fdc4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fdc8:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001fdcf:	90                   	nop
c001fdd0:	83 c4 1c             	add    esp,0x1c
c001fdd3:	c3                   	ret    

c001fdd4 <SoundCard::~SoundCard()>:
c001fdd4:	83 ec 0c             	sub    esp,0xc
c001fdd7:	ba d0 de 02 c0       	mov    edx,0xc002ded0
c001fddc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fde0:	89 10                	mov    DWORD PTR [eax],edx
c001fde2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fde6:	83 ec 0c             	sub    esp,0xc
c001fde9:	50                   	push   eax
c001fdea:	e8 31 a5 fe ff       	call   c000a320 <Device::~Device()>
c001fdef:	83 c4 10             	add    esp,0x10
c001fdf2:	90                   	nop
c001fdf3:	83 c4 0c             	add    esp,0xc
c001fdf6:	c3                   	ret    
c001fdf7:	90                   	nop

c001fdf8 <SoundCard::~SoundCard()>:
c001fdf8:	83 ec 0c             	sub    esp,0xc
c001fdfb:	83 ec 0c             	sub    esp,0xc
c001fdfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fe02:	e8 cd ff ff ff       	call   c001fdd4 <SoundCard::~SoundCard()>
c001fe07:	83 c4 10             	add    esp,0x10
c001fe0a:	83 ec 08             	sub    esp,0x8
c001fe0d:	68 e8 01 00 00       	push   0x1e8
c001fe12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fe16:	e8 f1 de fe ff       	call   c000dd0c <operator delete(void*, unsigned long)>
c001fe1b:	83 c4 10             	add    esp,0x10
c001fe1e:	83 c4 0c             	add    esp,0xc
c001fe21:	c3                   	ret    

c001fe22 <SoundCard::configureRates(int, int, int)>:
c001fe22:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001fe26:	31 c0                	xor    eax,eax
c001fe28:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c001fe2f:	75 20                	jne    c001fe51 <SoundCard::configureRates(int, int, int)+0x2f>
c001fe31:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fe35:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c001fe3b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fe3f:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c001fe45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe49:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c001fe4f:	b0 01                	mov    al,0x1
c001fe51:	c3                   	ret    

c001fe52 <SoundCard::getSamples16(int, short*)>:
c001fe52:	55                   	push   ebp
c001fe53:	57                   	push   edi
c001fe54:	31 ff                	xor    edi,edi
c001fe56:	56                   	push   esi
c001fe57:	53                   	push   ebx
c001fe58:	31 db                	xor    ebx,ebx
c001fe5a:	83 ec 10             	sub    esp,0x10
c001fe5d:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001fe61:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001fe65:	8d 04 36             	lea    eax,[esi+esi*1]
c001fe68:	50                   	push   eax
c001fe69:	6a 00                	push   0x0
c001fe6b:	55                   	push   ebp
c001fe6c:	e8 7f 06 fe ff       	call   c00004f0 <memset>
c001fe71:	83 c4 10             	add    esp,0x10
c001fe74:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fe78:	8b 84 b8 58 01 00 00 	mov    eax,DWORD PTR [eax+edi*4+0x158]
c001fe7f:	85 c0                	test   eax,eax
c001fe81:	74 1a                	je     c001fe9d <SoundCard::getSamples16(int, short*)+0x4b>
c001fe83:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001fe87:	75 14                	jne    c001fe9d <SoundCard::getSamples16(int, short*)+0x4b>
c001fe89:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001fe8d:	55                   	push   ebp
c001fe8e:	56                   	push   esi
c001fe8f:	50                   	push   eax
c001fe90:	e8 8f 03 00 00       	call   c0020224 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c001fe95:	83 c4 10             	add    esp,0x10
c001fe98:	39 c3                	cmp    ebx,eax
c001fe9a:	0f 4c d8             	cmovl  ebx,eax
c001fe9d:	47                   	inc    edi
c001fe9e:	83 ff 20             	cmp    edi,0x20
c001fea1:	75 d1                	jne    c001fe74 <SoundCard::getSamples16(int, short*)+0x22>
c001fea3:	83 c4 0c             	add    esp,0xc
c001fea6:	89 d8                	mov    eax,ebx
c001fea8:	5b                   	pop    ebx
c001fea9:	5e                   	pop    esi
c001feaa:	5f                   	pop    edi
c001feab:	5d                   	pop    ebp
c001feac:	c3                   	ret    
c001fead:	90                   	nop

c001feae <SoundCard::getSamples32(int, int*)>:
c001feae:	55                   	push   ebp
c001feaf:	57                   	push   edi
c001feb0:	31 ff                	xor    edi,edi
c001feb2:	56                   	push   esi
c001feb3:	31 f6                	xor    esi,esi
c001feb5:	53                   	push   ebx
c001feb6:	83 ec 10             	sub    esp,0x10
c001feb9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001febd:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001fec1:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001fec5:	c1 e0 02             	shl    eax,0x2
c001fec8:	50                   	push   eax
c001fec9:	6a 00                	push   0x0
c001fecb:	55                   	push   ebp
c001fecc:	e8 1f 06 fe ff       	call   c00004f0 <memset>
c001fed1:	83 c4 10             	add    esp,0x10
c001fed4:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c001fedb:	85 c0                	test   eax,eax
c001fedd:	74 1a                	je     c001fef9 <SoundCard::getSamples32(int, int*)+0x4b>
c001fedf:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001fee3:	75 14                	jne    c001fef9 <SoundCard::getSamples32(int, int*)+0x4b>
c001fee5:	53                   	push   ebx
c001fee6:	55                   	push   ebp
c001fee7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001feeb:	50                   	push   eax
c001feec:	e8 03 04 00 00       	call   c00202f4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001fef1:	83 c4 10             	add    esp,0x10
c001fef4:	39 c6                	cmp    esi,eax
c001fef6:	0f 4c f0             	cmovl  esi,eax
c001fef9:	47                   	inc    edi
c001fefa:	83 ff 20             	cmp    edi,0x20
c001fefd:	75 d5                	jne    c001fed4 <SoundCard::getSamples32(int, int*)+0x26>
c001feff:	85 f6                	test   esi,esi
c001ff01:	0f b6 83 d8 01 00 00 	movzx  eax,BYTE PTR [ebx+0x1d8]
c001ff08:	75 0f                	jne    c001ff19 <SoundCard::getSamples32(int, int*)+0x6b>
c001ff0a:	85 c0                	test   eax,eax
c001ff0c:	74 1b                	je     c001ff29 <SoundCard::getSamples32(int, int*)+0x7b>
c001ff0e:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ff10:	83 ec 0c             	sub    esp,0xc
c001ff13:	53                   	push   ebx
c001ff14:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001ff17:	eb 0d                	jmp    c001ff26 <SoundCard::getSamples32(int, int*)+0x78>
c001ff19:	85 c0                	test   eax,eax
c001ff1b:	75 0c                	jne    c001ff29 <SoundCard::getSamples32(int, int*)+0x7b>
c001ff1d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ff1f:	83 ec 0c             	sub    esp,0xc
c001ff22:	53                   	push   ebx
c001ff23:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001ff26:	83 c4 10             	add    esp,0x10
c001ff29:	83 c4 0c             	add    esp,0xc
c001ff2c:	89 f0                	mov    eax,esi
c001ff2e:	5b                   	pop    ebx
c001ff2f:	5e                   	pop    esi
c001ff30:	5f                   	pop    edi
c001ff31:	5d                   	pop    ebp
c001ff32:	c3                   	ret    
c001ff33:	90                   	nop

c001ff34 <SoundCard::addChannel(SoundPort*)>:
c001ff34:	83 ec 0c             	sub    esp,0xc
c001ff37:	31 c0                	xor    eax,eax
c001ff39:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ff3d:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c001ff45:	74 1b                	je     c001ff62 <SoundCard::addChannel(SoundPort*)+0x2e>
c001ff47:	40                   	inc    eax
c001ff48:	83 f8 20             	cmp    eax,0x20
c001ff4b:	75 f0                	jne    c001ff3d <SoundCard::addChannel(SoundPort*)+0x9>
c001ff4d:	83 ec 0c             	sub    esp,0xc
c001ff50:	68 a9 de 02 c0       	push   0xc002dea9
c001ff55:	e8 06 06 ff ff       	call   c0010560 <KePanic(char const*)>
c001ff5a:	83 c4 10             	add    esp,0x10
c001ff5d:	83 c8 ff             	or     eax,0xffffffff
c001ff60:	eb 0b                	jmp    c001ff6d <SoundCard::addChannel(SoundPort*)+0x39>
c001ff62:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001ff66:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c001ff6d:	83 c4 0c             	add    esp,0xc
c001ff70:	c3                   	ret    
c001ff71:	90                   	nop

c001ff72 <SoundCard::removeChannel(int)>:
c001ff72:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ff76:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ff7a:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001ff85:	c3                   	ret    
c001ff86:	66 90                	xchg   ax,ax

c001ff88 <SoundPort::SoundPort(int, int, int, int)>:
c001ff88:	83 ec 0c             	sub    esp,0xc
c001ff8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff8f:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001ff96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff9a:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001ff9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffa2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ffa6:	89 10                	mov    DWORD PTR [eax],edx
c001ffa8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffac:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ffb0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ffb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffb7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ffbb:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ffbe:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001ffc3:	75 13                	jne    c001ffd8 <SoundPort::SoundPort(int, int, int, int)+0x50>
c001ffc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffc9:	8b 00                	mov    eax,DWORD PTR [eax]
c001ffcb:	05 a0 0f 00 00       	add    eax,0xfa0
c001ffd0:	d1 e0                	shl    eax,1
c001ffd2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001ffd6:	66 90                	xchg   ax,ax
c001ffd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffdc:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001ffe0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001ffe3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffe7:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001ffee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fff2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001fff5:	c1 e0 02             	shl    eax,0x2
c001fff8:	83 ec 0c             	sub    esp,0xc
c001fffb:	50                   	push   eax
c001fffc:	e8 0b 01 ff ff       	call   c001010c <malloc>
c0020001:	83 c4 10             	add    esp,0x10
c0020004:	89 c2                	mov    edx,eax
c0020006:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002000a:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c002000d:	90                   	nop
c002000e:	83 c4 0c             	add    esp,0xc
c0020011:	c3                   	ret    
c0020012:	66 90                	xchg   ax,ax

c0020014 <SoundPort::~SoundPort()>:
c0020014:	83 ec 0c             	sub    esp,0xc
c0020017:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002001b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c002001e:	85 c0                	test   eax,eax
c0020020:	74 1e                	je     c0020040 <SoundPort::~SoundPort()+0x2c>
c0020022:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020026:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0020029:	83 ec 0c             	sub    esp,0xc
c002002c:	50                   	push   eax
c002002d:	e8 ea 00 ff ff       	call   c001011c <free>
c0020032:	83 c4 10             	add    esp,0x10
c0020035:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020039:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0020040:	90                   	nop
c0020041:	83 c4 0c             	add    esp,0xc
c0020044:	c3                   	ret    
c0020045:	90                   	nop
c0020046:	66 90                	xchg   ax,ax

c0020048 <SoundPort::unpause()>:
c0020048:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002004c:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c0020050:	c3                   	ret    
c0020051:	90                   	nop
c0020052:	66 90                	xchg   ax,ax

c0020054 <SoundPort::pause()>:
c0020054:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020058:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c002005c:	c3                   	ret    
c002005d:	90                   	nop
c002005e:	66 90                	xchg   ax,ax

c0020060 <SoundPort::getBufferUsed()>:
c0020060:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020064:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0020067:	c3                   	ret    

c0020068 <SoundPort::getBufferSize()>:
c0020068:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002006c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c002006f:	c3                   	ret    

c0020070 <SoundPort::buffer8(signed char*, int)>:
c0020070:	55                   	push   ebp
c0020071:	57                   	push   edi
c0020072:	56                   	push   esi
c0020073:	53                   	push   ebx
c0020074:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020078:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c002007c:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c002007f:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c0020082:	74 70                	je     c00200f4 <SoundPort::buffer8(signed char*, int)+0x84>
c0020084:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0020088:	85 c9                	test   ecx,ecx
c002008a:	7e 68                	jle    c00200f4 <SoundPort::buffer8(signed char*, int)+0x84>
c002008c:	0f be 75 00          	movsx  esi,BYTE PTR [ebp+0x0]
c0020090:	8d 48 01             	lea    ecx,[eax+0x1]
c0020093:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c0020096:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0020099:	89 f1                	mov    ecx,esi
c002009b:	c1 e1 18             	shl    ecx,0x18
c002009e:	29 f1                	sub    ecx,esi
c00200a0:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c00200a3:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c00200a6:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c00200a9:	74 51                	je     c00200fc <SoundPort::buffer8(signed char*, int)+0x8c>
c00200ab:	31 ff                	xor    edi,edi
c00200ad:	eb 25                	jmp    c00200d4 <SoundPort::buffer8(signed char*, int)+0x64>
c00200af:	90                   	nop
c00200b0:	0f be 74 05 00       	movsx  esi,BYTE PTR [ebp+eax*1+0x0]
c00200b5:	8d 59 01             	lea    ebx,[ecx+0x1]
c00200b8:	89 5a 14             	mov    DWORD PTR [edx+0x14],ebx
c00200bb:	89 f3                	mov    ebx,esi
c00200bd:	c1 e3 18             	shl    ebx,0x18
c00200c0:	29 f3                	sub    ebx,esi
c00200c2:	8b 72 0c             	mov    esi,DWORD PTR [edx+0xc]
c00200c5:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c00200c8:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c00200cb:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c00200ce:	74 1c                	je     c00200ec <SoundPort::buffer8(signed char*, int)+0x7c>
c00200d0:	89 c7                	mov    edi,eax
c00200d2:	66 90                	xchg   ax,ax
c00200d4:	8d 47 01             	lea    eax,[edi+0x1]
c00200d7:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c00200db:	75 d3                	jne    c00200b0 <SoundPort::buffer8(signed char*, int)+0x40>
c00200dd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00200e1:	8d 76 00             	lea    esi,[esi+0x0]
c00200e4:	5b                   	pop    ebx
c00200e5:	5e                   	pop    esi
c00200e6:	5f                   	pop    edi
c00200e7:	5d                   	pop    ebp
c00200e8:	c3                   	ret    
c00200e9:	8d 76 00             	lea    esi,[esi+0x0]
c00200ec:	5b                   	pop    ebx
c00200ed:	8d 47 02             	lea    eax,[edi+0x2]
c00200f0:	5e                   	pop    esi
c00200f1:	5f                   	pop    edi
c00200f2:	5d                   	pop    ebp
c00200f3:	c3                   	ret    
c00200f4:	5b                   	pop    ebx
c00200f5:	31 c0                	xor    eax,eax
c00200f7:	5e                   	pop    esi
c00200f8:	5f                   	pop    edi
c00200f9:	5d                   	pop    ebp
c00200fa:	c3                   	ret    
c00200fb:	90                   	nop
c00200fc:	b8 01 00 00 00       	mov    eax,0x1
c0020101:	eb e1                	jmp    c00200e4 <SoundPort::buffer8(signed char*, int)+0x74>
c0020103:	90                   	nop

c0020104 <SoundPort::buffer16(short*, int)>:
c0020104:	55                   	push   ebp
c0020105:	57                   	push   edi
c0020106:	56                   	push   esi
c0020107:	53                   	push   ebx
c0020108:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002010c:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0020110:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0020113:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c0020116:	74 70                	je     c0020188 <SoundPort::buffer16(short*, int)+0x84>
c0020118:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002011c:	85 c9                	test   ecx,ecx
c002011e:	7e 68                	jle    c0020188 <SoundPort::buffer16(short*, int)+0x84>
c0020120:	0f bf 75 00          	movsx  esi,WORD PTR [ebp+0x0]
c0020124:	8d 48 01             	lea    ecx,[eax+0x1]
c0020127:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c002012a:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c002012d:	89 f1                	mov    ecx,esi
c002012f:	c1 e1 10             	shl    ecx,0x10
c0020132:	29 f1                	sub    ecx,esi
c0020134:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c0020137:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c002013a:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c002013d:	74 51                	je     c0020190 <SoundPort::buffer16(short*, int)+0x8c>
c002013f:	31 ff                	xor    edi,edi
c0020141:	eb 25                	jmp    c0020168 <SoundPort::buffer16(short*, int)+0x64>
c0020143:	90                   	nop
c0020144:	0f bf 74 45 00       	movsx  esi,WORD PTR [ebp+eax*2+0x0]
c0020149:	8d 59 01             	lea    ebx,[ecx+0x1]
c002014c:	89 5a 14             	mov    DWORD PTR [edx+0x14],ebx
c002014f:	89 f3                	mov    ebx,esi
c0020151:	c1 e3 10             	shl    ebx,0x10
c0020154:	29 f3                	sub    ebx,esi
c0020156:	8b 72 0c             	mov    esi,DWORD PTR [edx+0xc]
c0020159:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c002015c:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c002015f:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0020162:	74 1c                	je     c0020180 <SoundPort::buffer16(short*, int)+0x7c>
c0020164:	89 c7                	mov    edi,eax
c0020166:	66 90                	xchg   ax,ax
c0020168:	8d 47 01             	lea    eax,[edi+0x1]
c002016b:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c002016f:	75 d3                	jne    c0020144 <SoundPort::buffer16(short*, int)+0x40>
c0020171:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020175:	8d 76 00             	lea    esi,[esi+0x0]
c0020178:	5b                   	pop    ebx
c0020179:	5e                   	pop    esi
c002017a:	5f                   	pop    edi
c002017b:	5d                   	pop    ebp
c002017c:	c3                   	ret    
c002017d:	8d 76 00             	lea    esi,[esi+0x0]
c0020180:	5b                   	pop    ebx
c0020181:	8d 47 02             	lea    eax,[edi+0x2]
c0020184:	5e                   	pop    esi
c0020185:	5f                   	pop    edi
c0020186:	5d                   	pop    ebp
c0020187:	c3                   	ret    
c0020188:	5b                   	pop    ebx
c0020189:	31 c0                	xor    eax,eax
c002018b:	5e                   	pop    esi
c002018c:	5f                   	pop    edi
c002018d:	5d                   	pop    ebp
c002018e:	c3                   	ret    
c002018f:	90                   	nop
c0020190:	b8 01 00 00 00       	mov    eax,0x1
c0020195:	eb e1                	jmp    c0020178 <SoundPort::buffer16(short*, int)+0x74>
c0020197:	90                   	nop

c0020198 <SoundPort::buffer32(int*, int)>:
c0020198:	55                   	push   ebp
c0020199:	57                   	push   edi
c002019a:	56                   	push   esi
c002019b:	53                   	push   ebx
c002019c:	83 ec 04             	sub    esp,0x4
c002019f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00201a3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00201a7:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00201ab:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c00201ae:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c00201b1:	89 04 24             	mov    DWORD PTR [esp],eax
c00201b4:	74 5a                	je     c0020210 <SoundPort::buffer32(int*, int)+0x78>
c00201b6:	85 c0                	test   eax,eax
c00201b8:	7e 56                	jle    c0020210 <SoundPort::buffer32(int*, int)+0x78>
c00201ba:	8d 71 01             	lea    esi,[ecx+0x1]
c00201bd:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c00201c0:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c00201c3:	8b 37                	mov    esi,DWORD PTR [edi]
c00201c5:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c00201c8:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c00201cb:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c00201ce:	74 4c                	je     c002021c <SoundPort::buffer32(int*, int)+0x84>
c00201d0:	31 f6                	xor    esi,esi
c00201d2:	eb 1c                	jmp    c00201f0 <SoundPort::buffer32(int*, int)+0x58>
c00201d4:	8d 69 01             	lea    ebp,[ecx+0x1]
c00201d7:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c00201da:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00201dd:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c00201e0:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c00201e4:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c00201e7:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c00201ea:	74 18                	je     c0020204 <SoundPort::buffer32(int*, int)+0x6c>
c00201ec:	89 de                	mov    esi,ebx
c00201ee:	66 90                	xchg   ax,ax
c00201f0:	8d 5e 01             	lea    ebx,[esi+0x1]
c00201f3:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c00201f6:	75 dc                	jne    c00201d4 <SoundPort::buffer32(int*, int)+0x3c>
c00201f8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00201fb:	90                   	nop
c00201fc:	83 c4 04             	add    esp,0x4
c00201ff:	5b                   	pop    ebx
c0020200:	5e                   	pop    esi
c0020201:	5f                   	pop    edi
c0020202:	5d                   	pop    ebp
c0020203:	c3                   	ret    
c0020204:	8d 46 02             	lea    eax,[esi+0x2]
c0020207:	83 c4 04             	add    esp,0x4
c002020a:	5b                   	pop    ebx
c002020b:	5e                   	pop    esi
c002020c:	5f                   	pop    edi
c002020d:	5d                   	pop    ebp
c002020e:	c3                   	ret    
c002020f:	90                   	nop
c0020210:	83 c4 04             	add    esp,0x4
c0020213:	31 c0                	xor    eax,eax
c0020215:	5b                   	pop    ebx
c0020216:	5e                   	pop    esi
c0020217:	5f                   	pop    edi
c0020218:	5d                   	pop    ebp
c0020219:	c3                   	ret    
c002021a:	66 90                	xchg   ax,ax
c002021c:	b8 01 00 00 00       	mov    eax,0x1
c0020221:	eb d9                	jmp    c00201fc <SoundPort::buffer32(int*, int)+0x64>
c0020223:	90                   	nop

c0020224 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c0020224:	55                   	push   ebp
c0020225:	57                   	push   edi
c0020226:	56                   	push   esi
c0020227:	53                   	push   ebx
c0020228:	83 ec 0c             	sub    esp,0xc
c002022b:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c002022f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0020233:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0020237:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c002023b:	8b 85 e0 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e0]
c0020241:	39 03                	cmp    DWORD PTR [ebx],eax
c0020243:	74 13                	je     c0020258 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x34>
c0020245:	83 ec 0c             	sub    esp,0xc
c0020248:	68 fc de 02 c0       	push   0xc002defc
c002024d:	e8 0e 03 ff ff       	call   c0010560 <KePanic(char const*)>
c0020252:	83 c4 10             	add    esp,0x10
c0020255:	8d 76 00             	lea    esi,[esi+0x0]
c0020258:	8b 85 dc 01 00 00    	mov    eax,DWORD PTR [ebp+0x1dc]
c002025e:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c0020261:	74 11                	je     c0020274 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x50>
c0020263:	83 ec 0c             	sub    esp,0xc
c0020266:	68 3b df 02 c0       	push   0xc002df3b
c002026b:	e8 f0 02 ff ff       	call   c0010560 <KePanic(char const*)>
c0020270:	83 c4 10             	add    esp,0x10
c0020273:	90                   	nop
c0020274:	8b 85 e4 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e4]
c002027a:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c002027d:	74 11                	je     c0020290 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x6c>
c002027f:	83 ec 0c             	sub    esp,0xc
c0020282:	68 3b df 02 c0       	push   0xc002df3b
c0020287:	e8 d4 02 ff ff       	call   c0010560 <KePanic(char const*)>
c002028c:	83 c4 10             	add    esp,0x10
c002028f:	90                   	nop
c0020290:	39 73 14             	cmp    DWORD PTR [ebx+0x14],esi
c0020293:	0f 4e 73 14          	cmovle esi,DWORD PTR [ebx+0x14]
c0020297:	85 f6                	test   esi,esi
c0020299:	7e 2d                	jle    c00202c8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa4>
c002029b:	31 c0                	xor    eax,eax
c002029d:	8d 76 00             	lea    esi,[esi+0x0]
c00202a0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00202a3:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00202a6:	8d 91 ff 7f 00 00    	lea    edx,[ecx+0x7fff]
c00202ac:	85 c9                	test   ecx,ecx
c00202ae:	0f 49 d1             	cmovns edx,ecx
c00202b1:	66 8b 0c 47          	mov    cx,WORD PTR [edi+eax*2]
c00202b5:	c1 fa 0f             	sar    edx,0xf
c00202b8:	01 d1                	add    ecx,edx
c00202ba:	66 89 0c 47          	mov    WORD PTR [edi+eax*2],cx
c00202be:	83 c0 01             	add    eax,0x1
c00202c1:	39 f0                	cmp    eax,esi
c00202c3:	75 db                	jne    c00202a0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x7c>
c00202c5:	8d 76 00             	lea    esi,[esi+0x0]
c00202c8:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00202cb:	83 ec 04             	sub    esp,0x4
c00202ce:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00202d1:	29 f0                	sub    eax,esi
c00202d3:	c1 e0 02             	shl    eax,0x2
c00202d6:	50                   	push   eax
c00202d7:	8d 04 b2             	lea    eax,[edx+esi*4]
c00202da:	50                   	push   eax
c00202db:	52                   	push   edx
c00202dc:	e8 ef 00 fe ff       	call   c00003d0 <memmove>
c00202e1:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00202e4:	29 f0                	sub    eax,esi
c00202e6:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00202e9:	83 c4 1c             	add    esp,0x1c
c00202ec:	89 f0                	mov    eax,esi
c00202ee:	5b                   	pop    ebx
c00202ef:	5e                   	pop    esi
c00202f0:	5f                   	pop    edi
c00202f1:	5d                   	pop    ebp
c00202f2:	c3                   	ret    
c00202f3:	90                   	nop

c00202f4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c00202f4:	55                   	push   ebp
c00202f5:	57                   	push   edi
c00202f6:	56                   	push   esi
c00202f7:	53                   	push   ebx
c00202f8:	83 ec 0c             	sub    esp,0xc
c00202fb:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c00202ff:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0020303:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0020307:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c002030b:	8b 85 e0 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e0]
c0020311:	39 03                	cmp    DWORD PTR [ebx],eax
c0020313:	74 13                	je     c0020328 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x34>
c0020315:	83 ec 0c             	sub    esp,0xc
c0020318:	68 1c df 02 c0       	push   0xc002df1c
c002031d:	e8 3e 02 ff ff       	call   c0010560 <KePanic(char const*)>
c0020322:	83 c4 10             	add    esp,0x10
c0020325:	8d 76 00             	lea    esi,[esi+0x0]
c0020328:	8b 85 dc 01 00 00    	mov    eax,DWORD PTR [ebp+0x1dc]
c002032e:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c0020331:	74 11                	je     c0020344 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x50>
c0020333:	83 ec 0c             	sub    esp,0xc
c0020336:	68 57 df 02 c0       	push   0xc002df57
c002033b:	e8 20 02 ff ff       	call   c0010560 <KePanic(char const*)>
c0020340:	83 c4 10             	add    esp,0x10
c0020343:	90                   	nop
c0020344:	8b 85 e4 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e4]
c002034a:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c002034d:	74 11                	je     c0020360 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x6c>
c002034f:	83 ec 0c             	sub    esp,0xc
c0020352:	68 57 df 02 c0       	push   0xc002df57
c0020357:	e8 04 02 ff ff       	call   c0010560 <KePanic(char const*)>
c002035c:	83 c4 10             	add    esp,0x10
c002035f:	90                   	nop
c0020360:	39 7b 14             	cmp    DWORD PTR [ebx+0x14],edi
c0020363:	0f 4e 7b 14          	cmovle edi,DWORD PTR [ebx+0x14]
c0020367:	85 ff                	test   edi,edi
c0020369:	7e 21                	jle    c002038c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x98>
c002036b:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c0020372:	31 c0                	xor    eax,eax
c0020374:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0020377:	8b 2c 06             	mov    ebp,DWORD PTR [esi+eax*1]
c002037a:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c002037d:	01 d5                	add    ebp,edx
c002037f:	89 2c 06             	mov    DWORD PTR [esi+eax*1],ebp
c0020382:	83 c0 04             	add    eax,0x4
c0020385:	39 c1                	cmp    ecx,eax
c0020387:	75 eb                	jne    c0020374 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x80>
c0020389:	8d 76 00             	lea    esi,[esi+0x0]
c002038c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c002038f:	83 ec 04             	sub    esp,0x4
c0020392:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0020395:	29 f8                	sub    eax,edi
c0020397:	c1 e0 02             	shl    eax,0x2
c002039a:	50                   	push   eax
c002039b:	8d 04 ba             	lea    eax,[edx+edi*4]
c002039e:	50                   	push   eax
c002039f:	52                   	push   edx
c00203a0:	e8 2b 00 fe ff       	call   c00003d0 <memmove>
c00203a5:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00203a8:	29 f8                	sub    eax,edi
c00203aa:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00203ad:	83 c4 1c             	add    esp,0x1c
c00203b0:	89 f8                	mov    eax,edi
c00203b2:	5b                   	pop    ebx
c00203b3:	5e                   	pop    esi
c00203b4:	5f                   	pop    edi
c00203b5:	5d                   	pop    ebp
c00203b6:	c3                   	ret    
c00203b7:	90                   	nop

c00203b8 <PCI::open(int, int, void*)>:
c00203b8:	83 ec 18             	sub    esp,0x18
c00203bb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00203bf:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00203c3:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00203c9:	8b 10                	mov    edx,DWORD PTR [eax]
c00203cb:	50                   	push   eax
c00203cc:	ff 52 18             	call   DWORD PTR [edx+0x18]
c00203cf:	31 c0                	xor    eax,eax
c00203d1:	83 c4 1c             	add    esp,0x1c
c00203d4:	c3                   	ret    
c00203d5:	90                   	nop

c00203d6 <PCI::close(int, int, void*)>:
c00203d6:	31 c0                	xor    eax,eax
c00203d8:	c3                   	ret    
c00203d9:	90                   	nop

c00203da <PCI::PCI()>:
c00203da:	83 ec 0c             	sub    esp,0xc
c00203dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00203e1:	83 ec 08             	sub    esp,0x8
c00203e4:	68 af a4 02 c0       	push   0xc002a4af
c00203e9:	50                   	push   eax
c00203ea:	e8 9d 8f fe ff       	call   c000938c <Bus::Bus(char const*)>
c00203ef:	83 c4 10             	add    esp,0x10
c00203f2:	ba 78 e0 02 c0       	mov    edx,0xc002e078
c00203f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00203fb:	89 10                	mov    DWORD PTR [eax],edx
c00203fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020401:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c002040b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002040f:	a3 a0 8d 03 c0       	mov    ds:0xc0038da0,eax
c0020414:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020418:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002041e:	0f b6 d0             	movzx  edx,al
c0020421:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020425:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c002042c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020430:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0020436:	0f b6 d0             	movzx  edx,al
c0020439:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002043d:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c0020442:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020446:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002044c:	8d 50 01             	lea    edx,[eax+0x1]
c002044f:	88 d1                	mov    cl,dl
c0020451:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0020455:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c002045b:	0f b6 d0             	movzx  edx,al
c002045e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020462:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0020466:	83 c9 c0             	or     ecx,0xffffffc0
c0020469:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c002046d:	90                   	nop
c002046e:	83 c4 0c             	add    esp,0xc
c0020471:	c3                   	ret    

c0020472 <PCI::readBAR8(unsigned int, int)>:
c0020472:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0020476:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002047a:	f6 c2 01             	test   dl,0x1
c002047d:	74 07                	je     c0020486 <PCI::readBAR8(unsigned int, int)+0x14>
c002047f:	83 e2 fc             	and    edx,0xfffffffc
c0020482:	01 c2                	add    edx,eax
c0020484:	ec                   	in     al,dx
c0020485:	c3                   	ret    
c0020486:	83 e2 f0             	and    edx,0xfffffff0
c0020489:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c002048c:	c3                   	ret    
c002048d:	90                   	nop

c002048e <PCI::readBAR16(unsigned int, int)>:
c002048e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0020492:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020496:	f6 c2 01             	test   dl,0x1
c0020499:	74 08                	je     c00204a3 <PCI::readBAR16(unsigned int, int)+0x15>
c002049b:	83 e2 fc             	and    edx,0xfffffffc
c002049e:	01 c2                	add    edx,eax
c00204a0:	66 ed                	in     ax,dx
c00204a2:	c3                   	ret    
c00204a3:	83 e2 f0             	and    edx,0xfffffff0
c00204a6:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c00204aa:	c3                   	ret    
c00204ab:	90                   	nop

c00204ac <PCI::readBAR32(unsigned int, int)>:
c00204ac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00204b0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00204b4:	f6 c2 01             	test   dl,0x1
c00204b7:	74 07                	je     c00204c0 <PCI::readBAR32(unsigned int, int)+0x14>
c00204b9:	83 e2 fc             	and    edx,0xfffffffc
c00204bc:	01 c2                	add    edx,eax
c00204be:	ed                   	in     eax,dx
c00204bf:	c3                   	ret    
c00204c0:	83 e2 f0             	and    edx,0xfffffff0
c00204c3:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c00204c6:	c3                   	ret    
c00204c7:	90                   	nop

c00204c8 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c00204c8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00204cc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00204d0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00204d4:	f6 c2 01             	test   dl,0x1
c00204d7:	74 07                	je     c00204e0 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c00204d9:	83 e2 fc             	and    edx,0xfffffffc
c00204dc:	01 ca                	add    edx,ecx
c00204de:	ee                   	out    dx,al
c00204df:	c3                   	ret    
c00204e0:	83 e2 f0             	and    edx,0xfffffff0
c00204e3:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c00204e6:	c3                   	ret    
c00204e7:	90                   	nop

c00204e8 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c00204e8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00204ec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00204f0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00204f4:	f6 c2 01             	test   dl,0x1
c00204f7:	74 08                	je     c0020501 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c00204f9:	83 e2 fc             	and    edx,0xfffffffc
c00204fc:	01 ca                	add    edx,ecx
c00204fe:	66 ef                	out    dx,ax
c0020500:	c3                   	ret    
c0020501:	83 e2 f0             	and    edx,0xfffffff0
c0020504:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c0020508:	c3                   	ret    
c0020509:	90                   	nop

c002050a <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c002050a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002050e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020512:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0020516:	f6 c2 01             	test   dl,0x1
c0020519:	74 07                	je     c0020522 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c002051b:	83 e2 fc             	and    edx,0xfffffffc
c002051e:	01 ca                	add    edx,ecx
c0020520:	ef                   	out    dx,eax
c0020521:	c3                   	ret    
c0020522:	83 e2 f0             	and    edx,0xfffffff0
c0020525:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c0020528:	c3                   	ret    
c0020529:	90                   	nop

c002052a <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c002052a:	55                   	push   ebp
c002052b:	57                   	push   edi
c002052c:	56                   	push   esi
c002052d:	53                   	push   ebx
c002052e:	83 ec 0c             	sub    esp,0xc
c0020531:	0f b6 74 24 2c       	movzx  esi,BYTE PTR [esp+0x2c]
c0020536:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c002053a:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c002053e:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0020542:	83 fe 07             	cmp    esi,0x7
c0020545:	76 10                	jbe    c0020557 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c0020547:	83 ec 0c             	sub    esp,0xc
c002054a:	68 73 df 02 c0       	push   0xc002df73
c002054f:	e8 0c 00 ff ff       	call   c0010560 <KePanic(char const*)>
c0020554:	83 c4 10             	add    esp,0x10
c0020557:	0f b6 db             	movzx  ebx,bl
c002055a:	83 fb 0f             	cmp    ebx,0xf
c002055d:	76 10                	jbe    c002056f <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x45>
c002055f:	83 ec 0c             	sub    esp,0xc
c0020562:	68 a3 df 02 c0       	push   0xc002dfa3
c0020567:	e8 f4 ff fe ff       	call   c0010560 <KePanic(char const*)>
c002056c:	83 c4 10             	add    esp,0x10
c002056f:	8d 04 36             	lea    eax,[esi+esi*1]
c0020572:	ba f8 0c 00 00       	mov    edx,0xcf8
c0020577:	83 c8 f0             	or     eax,0xfffffff0
c002057a:	ee                   	out    dx,al
c002057b:	ba fa 0c 00 00       	mov    edx,0xcfa
c0020580:	89 e8                	mov    eax,ebp
c0020582:	ee                   	out    dx,al
c0020583:	89 f9                	mov    ecx,edi
c0020585:	89 d8                	mov    eax,ebx
c0020587:	0f b6 d9             	movzx  ebx,cl
c002058a:	83 c4 0c             	add    esp,0xc
c002058d:	c1 e0 08             	shl    eax,0x8
c0020590:	83 e3 fc             	and    ebx,0xfffffffc
c0020593:	09 d8                	or     eax,ebx
c0020595:	5b                   	pop    ebx
c0020596:	0d 00 c0 ff ff       	or     eax,0xffffc000
c002059b:	5e                   	pop    esi
c002059c:	5f                   	pop    edi
c002059d:	5d                   	pop    ebp
c002059e:	c3                   	ret    
c002059f:	90                   	nop

c00205a0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c00205a0:	57                   	push   edi
c00205a1:	56                   	push   esi
c00205a2:	53                   	push   ebx
c00205a3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00205a7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00205ab:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00205af:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00205b3:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c00205b9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00205bd:	83 ff 01             	cmp    edi,0x1
c00205c0:	75 3f                	jne    c0020601 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x61>
c00205c2:	89 de                	mov    esi,ebx
c00205c4:	0f b6 c0             	movzx  eax,al
c00205c7:	c1 e0 10             	shl    eax,0x10
c00205ca:	81 e6 fc 00 00 00    	and    esi,0xfc
c00205d0:	0f b6 c9             	movzx  ecx,cl
c00205d3:	09 f0                	or     eax,esi
c00205d5:	c1 e1 08             	shl    ecx,0x8
c00205d8:	0f b6 d2             	movzx  edx,dl
c00205db:	c1 e2 0b             	shl    edx,0xb
c00205de:	09 c8                	or     eax,ecx
c00205e0:	09 d0                	or     eax,edx
c00205e2:	ba f8 0c 00 00       	mov    edx,0xcf8
c00205e7:	0d 00 00 00 80       	or     eax,0x80000000
c00205ec:	ef                   	out    dx,eax
c00205ed:	ba fc 0c 00 00       	mov    edx,0xcfc
c00205f2:	ed                   	in     eax,dx
c00205f3:	83 e3 02             	and    ebx,0x2
c00205f6:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c00205fd:	d3 e8                	shr    eax,cl
c00205ff:	eb 44                	jmp    c0020645 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c0020601:	83 ff 02             	cmp    edi,0x2
c0020604:	75 2d                	jne    c0020633 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x93>
c0020606:	83 ec 0c             	sub    esp,0xc
c0020609:	0f b6 fb             	movzx  edi,bl
c002060c:	57                   	push   edi
c002060d:	0f b6 c9             	movzx  ecx,cl
c0020610:	51                   	push   ecx
c0020611:	0f b6 d2             	movzx  edx,dl
c0020614:	52                   	push   edx
c0020615:	0f b6 c0             	movzx  eax,al
c0020618:	50                   	push   eax
c0020619:	56                   	push   esi
c002061a:	e8 0b ff ff ff       	call   c002052a <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c002061f:	89 c2                	mov    edx,eax
c0020621:	ed                   	in     eax,dx
c0020622:	83 e3 02             	and    ebx,0x2
c0020625:	83 c4 20             	add    esp,0x20
c0020628:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c002062f:	d3 e8                	shr    eax,cl
c0020631:	eb 12                	jmp    c0020645 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c0020633:	83 ec 0c             	sub    esp,0xc
c0020636:	68 d3 df 02 c0       	push   0xc002dfd3
c002063b:	e8 20 ff fe ff       	call   c0010560 <KePanic(char const*)>
c0020640:	83 c4 10             	add    esp,0x10
c0020643:	31 c0                	xor    eax,eax
c0020645:	5b                   	pop    ebx
c0020646:	5e                   	pop    esi
c0020647:	5f                   	pop    edi
c0020648:	c3                   	ret    
c0020649:	90                   	nop

c002064a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c002064a:	83 ec 18             	sub    esp,0x18
c002064d:	6a 00                	push   0x0
c002064f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0020654:	50                   	push   eax
c0020655:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002065a:	50                   	push   eax
c002065b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0020660:	50                   	push   eax
c0020661:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020665:	e8 36 ff ff ff       	call   c00205a0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002066a:	83 c4 2c             	add    esp,0x2c
c002066d:	c3                   	ret    

c002066e <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c002066e:	83 ec 18             	sub    esp,0x18
c0020671:	6a 0e                	push   0xe
c0020673:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0020678:	50                   	push   eax
c0020679:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002067e:	50                   	push   eax
c002067f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0020684:	50                   	push   eax
c0020685:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020689:	e8 12 ff ff ff       	call   c00205a0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002068e:	83 c4 2c             	add    esp,0x2c
c0020691:	0f b6 c0             	movzx  eax,al
c0020694:	c3                   	ret    
c0020695:	90                   	nop

c0020696 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c0020696:	55                   	push   ebp
c0020697:	57                   	push   edi
c0020698:	56                   	push   esi
c0020699:	53                   	push   ebx
c002069a:	83 ec 18             	sub    esp,0x18
c002069d:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c00206a2:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c00206a7:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c00206ac:	6a 0a                	push   0xa
c00206ae:	56                   	push   esi
c00206af:	55                   	push   ebp
c00206b0:	57                   	push   edi
c00206b1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00206b5:	e8 e6 fe ff ff       	call   c00205a0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00206ba:	83 c4 14             	add    esp,0x14
c00206bd:	6a 0a                	push   0xa
c00206bf:	56                   	push   esi
c00206c0:	55                   	push   ebp
c00206c1:	57                   	push   edi
c00206c2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00206c6:	89 c3                	mov    ebx,eax
c00206c8:	0f b6 db             	movzx  ebx,bl
c00206cb:	e8 d0 fe ff ff       	call   c00205a0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00206d0:	83 c4 2c             	add    esp,0x2c
c00206d3:	25 00 ff 00 00       	and    eax,0xff00
c00206d8:	09 d8                	or     eax,ebx
c00206da:	5b                   	pop    ebx
c00206db:	5e                   	pop    esi
c00206dc:	5f                   	pop    edi
c00206dd:	5d                   	pop    ebp
c00206de:	c3                   	ret    
c00206df:	90                   	nop

c00206e0 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c00206e0:	83 ec 18             	sub    esp,0x18
c00206e3:	6a 08                	push   0x8
c00206e5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00206ea:	50                   	push   eax
c00206eb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00206f0:	50                   	push   eax
c00206f1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00206f6:	50                   	push   eax
c00206f7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00206fb:	e8 a0 fe ff ff       	call   c00205a0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0020700:	83 c4 2c             	add    esp,0x2c
c0020703:	0f b6 c4             	movzx  eax,ah
c0020706:	c3                   	ret    
c0020707:	90                   	nop

c0020708 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c0020708:	83 ec 18             	sub    esp,0x18
c002070b:	6a 08                	push   0x8
c002070d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0020712:	50                   	push   eax
c0020713:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0020718:	50                   	push   eax
c0020719:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002071e:	50                   	push   eax
c002071f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020723:	e8 78 fe ff ff       	call   c00205a0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0020728:	83 c4 2c             	add    esp,0x2c
c002072b:	c3                   	ret    

c002072c <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c002072c:	83 ec 18             	sub    esp,0x18
c002072f:	6a 3c                	push   0x3c
c0020731:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0020736:	50                   	push   eax
c0020737:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002073c:	50                   	push   eax
c002073d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0020742:	50                   	push   eax
c0020743:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020747:	e8 54 fe ff ff       	call   c00205a0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002074c:	83 c4 2c             	add    esp,0x2c
c002074f:	c3                   	ret    

c0020750 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c0020750:	83 ec 18             	sub    esp,0x18
c0020753:	6a 18                	push   0x18
c0020755:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002075a:	50                   	push   eax
c002075b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0020760:	50                   	push   eax
c0020761:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0020766:	50                   	push   eax
c0020767:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002076b:	e8 30 fe ff ff       	call   c00205a0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0020770:	83 c4 2c             	add    esp,0x2c
c0020773:	0f b6 c4             	movzx  eax,ah
c0020776:	c3                   	ret    
c0020777:	90                   	nop

c0020778 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0020778:	55                   	push   ebp
c0020779:	57                   	push   edi
c002077a:	56                   	push   esi
c002077b:	53                   	push   ebx
c002077c:	83 ec 28             	sub    esp,0x28
c002077f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0020783:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c0020788:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c002078d:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c0020792:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c0020799:	8d 43 12             	lea    eax,[ebx+0x12]
c002079c:	83 c3 10             	add    ebx,0x10
c002079f:	0f b6 c0             	movzx  eax,al
c00207a2:	0f b6 db             	movzx  ebx,bl
c00207a5:	50                   	push   eax
c00207a6:	51                   	push   ecx
c00207a7:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c00207ab:	57                   	push   edi
c00207ac:	55                   	push   ebp
c00207ad:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00207b1:	e8 ea fd ff ff       	call   c00205a0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00207b6:	83 c4 14             	add    esp,0x14
c00207b9:	53                   	push   ebx
c00207ba:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00207be:	51                   	push   ecx
c00207bf:	89 c6                	mov    esi,eax
c00207c1:	57                   	push   edi
c00207c2:	55                   	push   ebp
c00207c3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00207c7:	c1 e6 10             	shl    esi,0x10
c00207ca:	e8 d1 fd ff ff       	call   c00205a0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00207cf:	83 c4 3c             	add    esp,0x3c
c00207d2:	5b                   	pop    ebx
c00207d3:	0f b7 c0             	movzx  eax,ax
c00207d6:	09 f0                	or     eax,esi
c00207d8:	5e                   	pop    esi
c00207d9:	5f                   	pop    edi
c00207da:	5d                   	pop    ebp
c00207db:	c3                   	ret    

c00207dc <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c00207dc:	55                   	push   ebp
c00207dd:	57                   	push   edi
c00207de:	56                   	push   esi
c00207df:	53                   	push   ebx
c00207e0:	83 ec 0c             	sub    esp,0xc
c00207e3:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00207e7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00207eb:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00207ef:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c00207f3:	8b 8d 58 01 00 00    	mov    ecx,DWORD PTR [ebp+0x158]
c00207f9:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00207fd:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0020801:	83 f9 01             	cmp    ecx,0x1
c0020804:	75 5d                	jne    c0020863 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x87>
c0020806:	0f b6 c8             	movzx  ecx,al
c0020809:	89 f0                	mov    eax,esi
c002080b:	25 fc 00 00 00       	and    eax,0xfc
c0020810:	0f b6 d2             	movzx  edx,dl
c0020813:	c1 e1 10             	shl    ecx,0x10
c0020816:	c1 e2 0b             	shl    edx,0xb
c0020819:	09 c1                	or     ecx,eax
c002081b:	89 f8                	mov    eax,edi
c002081d:	0f b6 f8             	movzx  edi,al
c0020820:	c1 e7 08             	shl    edi,0x8
c0020823:	09 f9                	or     ecx,edi
c0020825:	09 d1                	or     ecx,edx
c0020827:	ba f8 0c 00 00       	mov    edx,0xcf8
c002082c:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0020832:	89 c8                	mov    eax,ecx
c0020834:	ef                   	out    dx,eax
c0020835:	ba fc 0c 00 00       	mov    edx,0xcfc
c002083a:	ed                   	in     eax,dx
c002083b:	83 e6 02             	and    esi,0x2
c002083e:	0f b7 db             	movzx  ebx,bx
c0020841:	74 0a                	je     c002084d <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x71>
c0020843:	c1 e3 10             	shl    ebx,0x10
c0020846:	0f b7 d0             	movzx  edx,ax
c0020849:	09 d3                	or     ebx,edx
c002084b:	eb 05                	jmp    c0020852 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x76>
c002084d:	66 31 c0             	xor    ax,ax
c0020850:	09 c3                	or     ebx,eax
c0020852:	ba f8 0c 00 00       	mov    edx,0xcf8
c0020857:	89 c8                	mov    eax,ecx
c0020859:	ef                   	out    dx,eax
c002085a:	ba fc 0c 00 00       	mov    edx,0xcfc
c002085f:	89 d8                	mov    eax,ebx
c0020861:	eb 41                	jmp    c00208a4 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc8>
c0020863:	83 f9 02             	cmp    ecx,0x2
c0020866:	75 45                	jne    c00208ad <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd1>
c0020868:	89 f1                	mov    ecx,esi
c002086a:	83 ec 0c             	sub    esp,0xc
c002086d:	0f b6 f1             	movzx  esi,cl
c0020870:	89 f9                	mov    ecx,edi
c0020872:	56                   	push   esi
c0020873:	0f b6 f9             	movzx  edi,cl
c0020876:	57                   	push   edi
c0020877:	0f b6 d2             	movzx  edx,dl
c002087a:	52                   	push   edx
c002087b:	0f b6 c0             	movzx  eax,al
c002087e:	50                   	push   eax
c002087f:	55                   	push   ebp
c0020880:	e8 a5 fc ff ff       	call   c002052a <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c0020885:	89 c2                	mov    edx,eax
c0020887:	ed                   	in     eax,dx
c0020888:	83 c4 20             	add    esp,0x20
c002088b:	f6 c2 02             	test   dl,0x2
c002088e:	0f b7 db             	movzx  ebx,bx
c0020891:	74 0c                	je     c002089f <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc3>
c0020893:	0f b7 c8             	movzx  ecx,ax
c0020896:	89 d8                	mov    eax,ebx
c0020898:	c1 e0 10             	shl    eax,0x10
c002089b:	09 c8                	or     eax,ecx
c002089d:	eb 05                	jmp    c00208a4 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc8>
c002089f:	66 31 c0             	xor    ax,ax
c00208a2:	09 d8                	or     eax,ebx
c00208a4:	ef                   	out    dx,eax
c00208a5:	83 c4 0c             	add    esp,0xc
c00208a8:	5b                   	pop    ebx
c00208a9:	5e                   	pop    esi
c00208aa:	5f                   	pop    edi
c00208ab:	5d                   	pop    ebp
c00208ac:	c3                   	ret    
c00208ad:	c7 44 24 20 d3 df 02 c0 	mov    DWORD PTR [esp+0x20],0xc002dfd3
c00208b5:	83 c4 0c             	add    esp,0xc
c00208b8:	5b                   	pop    ebx
c00208b9:	5e                   	pop    esi
c00208ba:	5f                   	pop    edi
c00208bb:	5d                   	pop    ebp
c00208bc:	e9 9f fc fe ff       	jmp    c0010560 <KePanic(char const*)>
c00208c1:	90                   	nop

c00208c2 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c00208c2:	55                   	push   ebp
c00208c3:	57                   	push   edi
c00208c4:	56                   	push   esi
c00208c5:	53                   	push   ebx
c00208c6:	81 ec 4c 01 00 00    	sub    esp,0x14c
c00208cc:	80 3d ac 8d 03 c0 00 	cmp    BYTE PTR ds:0xc0038dac,0x0
c00208d3:	8b b4 24 84 01 00 00 	mov    esi,DWORD PTR [esp+0x184]
c00208da:	0f 85 bd 00 00 00    	jne    c002099d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdb>
c00208e0:	83 ec 0c             	sub    esp,0xc
c00208e3:	68 14 01 00 00       	push   0x114
c00208e8:	e8 1f f8 fe ff       	call   c001010c <malloc>
c00208ed:	83 c4 0c             	add    esp,0xc
c00208f0:	ff 35 58 63 03 c0    	push   DWORD PTR ds:0xc0036358
c00208f6:	68 d9 df 02 c0       	push   0xc002dfd9
c00208fb:	50                   	push   eax
c00208fc:	89 c3                	mov    ebx,eax
c00208fe:	e8 af 82 fe ff       	call   c0008bb2 <File::File(char const*, Process*)>
c0020903:	83 c4 10             	add    esp,0x10
c0020906:	85 db                	test   ebx,ebx
c0020908:	0f 84 6b 02 00 00    	je     c0020b79 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c002090e:	57                   	push   edi
c002090f:	57                   	push   edi
c0020910:	6a 01                	push   0x1
c0020912:	53                   	push   ebx
c0020913:	e8 b8 82 fe ff       	call   c0008bd0 <File::open(FileOpenMode)>
c0020918:	83 c4 10             	add    esp,0x10
c002091b:	85 c0                	test   eax,eax
c002091d:	0f 85 56 02 00 00    	jne    c0020b79 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c0020923:	52                   	push   edx
c0020924:	8d 44 24 3f          	lea    eax,[esp+0x3f]
c0020928:	50                   	push   eax
c0020929:	8d 44 24 48          	lea    eax,[esp+0x48]
c002092d:	50                   	push   eax
c002092e:	53                   	push   ebx
c002092f:	e8 9e 85 fe ff       	call   c0008ed2 <File::stat(unsigned long long*, bool*)>
c0020934:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0020938:	40                   	inc    eax
c0020939:	89 04 24             	mov    DWORD PTR [esp],eax
c002093c:	e8 cb f7 fe ff       	call   c001010c <malloc>
c0020941:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c0020945:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c0020949:	59                   	pop    ecx
c002094a:	a3 a8 8d 03 c0       	mov    ds:0xc0038da8,eax
c002094f:	8b 13                	mov    edx,DWORD PTR [ebx]
c0020951:	8d 4c 24 48          	lea    ecx,[esp+0x48]
c0020955:	51                   	push   ecx
c0020956:	50                   	push   eax
c0020957:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c002095b:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c002095f:	53                   	push   ebx
c0020960:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0020963:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c0020967:	83 c4 20             	add    esp,0x20
c002096a:	89 c8                	mov    eax,ecx
c002096c:	99                   	cdq    
c002096d:	3b 54 24 44          	cmp    edx,DWORD PTR [esp+0x44]
c0020971:	0f 85 02 02 00 00    	jne    c0020b79 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c0020977:	3b 4c 24 40          	cmp    ecx,DWORD PTR [esp+0x40]
c002097b:	0f 85 f8 01 00 00    	jne    c0020b79 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c0020981:	83 ec 0c             	sub    esp,0xc
c0020984:	53                   	push   ebx
c0020985:	e8 a4 82 fe ff       	call   c0008c2e <File::close()>
c002098a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c002098e:	83 c4 10             	add    esp,0x10
c0020991:	c6 05 ac 8d 03 c0 01 	mov    BYTE PTR ds:0xc0038dac,0x1
c0020998:	a3 a4 8d 03 c0       	mov    ds:0xc0038da4,eax
c002099d:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c00209a5:	31 c9                	xor    ecx,ecx
c00209a7:	66 c7 44 24 10 00 00 	mov    WORD PTR [esp+0x10],0x0
c00209ae:	8b 2d a4 8d 03 c0    	mov    ebp,DWORD PTR ds:0xc0038da4
c00209b4:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c00209bb:	8b 15 a8 8d 03 c0    	mov    edx,DWORD PTR ds:0xc0038da8
c00209c1:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c00209c6:	66 8b 84 24 82 01 00 00 	mov    ax,WORD PTR [esp+0x182]
c00209ce:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00209d3:	0f b6 84 24 60 01 00 00 	movzx  eax,BYTE PTR [esp+0x160]
c00209db:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00209df:	0f b6 84 24 61 01 00 00 	movzx  eax,BYTE PTR [esp+0x161]
c00209e7:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00209eb:	39 cd                	cmp    ebp,ecx
c00209ed:	0f 8e 86 01 00 00    	jle    c0020b79 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c00209f3:	8a 04 0a             	mov    al,BYTE PTR [edx+ecx*1]
c00209f6:	d4 40                	aam    0x40
c00209f8:	d5 39                	aad    0x39
c00209fa:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c00209fe:	8a 44 0a 01          	mov    al,BYTE PTR [edx+ecx*1+0x1]
c0020a02:	d4 40                	aam    0x40
c0020a04:	d5 39                	aad    0x39
c0020a06:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0020a0a:	8a 44 0a 03          	mov    al,BYTE PTR [edx+ecx*1+0x3]
c0020a0e:	d4 40                	aam    0x40
c0020a10:	d5 39                	aad    0x39
c0020a12:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0020a16:	8a 44 0a 04          	mov    al,BYTE PTR [edx+ecx*1+0x4]
c0020a1a:	d4 40                	aam    0x40
c0020a1c:	d5 39                	aad    0x39
c0020a1e:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0020a22:	8a 44 0a 06          	mov    al,BYTE PTR [edx+ecx*1+0x6]
c0020a26:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c0020a2a:	3c 56                	cmp    al,0x56
c0020a2c:	74 47                	je     c0020a75 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b3>
c0020a2e:	d4 40                	aam    0x40
c0020a30:	d5 39                	aad    0x39
c0020a32:	8d 58 d0             	lea    ebx,[eax-0x30]
c0020a35:	8a 44 0a 07          	mov    al,BYTE PTR [edx+ecx*1+0x7]
c0020a39:	0f b6 db             	movzx  ebx,bl
c0020a3c:	c1 e3 04             	shl    ebx,0x4
c0020a3f:	d4 40                	aam    0x40
c0020a41:	d5 39                	aad    0x39
c0020a43:	83 e8 30             	sub    eax,0x30
c0020a46:	0f b6 c0             	movzx  eax,al
c0020a49:	09 c3                	or     ebx,eax
c0020a4b:	8a 44 0a 08          	mov    al,BYTE PTR [edx+ecx*1+0x8]
c0020a4f:	c1 e3 04             	shl    ebx,0x4
c0020a52:	d4 40                	aam    0x40
c0020a54:	d5 39                	aad    0x39
c0020a56:	83 e8 30             	sub    eax,0x30
c0020a59:	0f b6 c0             	movzx  eax,al
c0020a5c:	09 c3                	or     ebx,eax
c0020a5e:	8a 44 0a 09          	mov    al,BYTE PTR [edx+ecx*1+0x9]
c0020a62:	c1 e3 04             	shl    ebx,0x4
c0020a65:	d4 40                	aam    0x40
c0020a67:	d5 39                	aad    0x39
c0020a69:	83 e8 30             	sub    eax,0x30
c0020a6c:	0f b6 c0             	movzx  eax,al
c0020a6f:	09 c3                	or     ebx,eax
c0020a71:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0020a75:	8a 5c 0a 0b          	mov    bl,BYTE PTR [edx+ecx*1+0xb]
c0020a79:	80 fb 58             	cmp    bl,0x58
c0020a7c:	74 49                	je     c0020ac7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x205>
c0020a7e:	88 d8                	mov    al,bl
c0020a80:	d4 40                	aam    0x40
c0020a82:	d5 39                	aad    0x39
c0020a84:	83 e8 30             	sub    eax,0x30
c0020a87:	0f b6 f8             	movzx  edi,al
c0020a8a:	8a 44 0a 0c          	mov    al,BYTE PTR [edx+ecx*1+0xc]
c0020a8e:	c1 e7 04             	shl    edi,0x4
c0020a91:	d4 40                	aam    0x40
c0020a93:	d5 39                	aad    0x39
c0020a95:	83 e8 30             	sub    eax,0x30
c0020a98:	0f b6 c0             	movzx  eax,al
c0020a9b:	09 c7                	or     edi,eax
c0020a9d:	8a 44 0a 0d          	mov    al,BYTE PTR [edx+ecx*1+0xd]
c0020aa1:	c1 e7 04             	shl    edi,0x4
c0020aa4:	d4 40                	aam    0x40
c0020aa6:	d5 39                	aad    0x39
c0020aa8:	83 e8 30             	sub    eax,0x30
c0020aab:	0f b6 c0             	movzx  eax,al
c0020aae:	09 c7                	or     edi,eax
c0020ab0:	8a 44 0a 0e          	mov    al,BYTE PTR [edx+ecx*1+0xe]
c0020ab4:	c1 e7 04             	shl    edi,0x4
c0020ab7:	d4 40                	aam    0x40
c0020ab9:	d5 39                	aad    0x39
c0020abb:	83 e8 30             	sub    eax,0x30
c0020abe:	0f b6 c0             	movzx  eax,al
c0020ac1:	09 c7                	or     edi,eax
c0020ac3:	89 7c 24 10          	mov    DWORD PTR [esp+0x10],edi
c0020ac7:	8d 41 10             	lea    eax,[ecx+0x10]
c0020aca:	8d 7c 24 40          	lea    edi,[esp+0x40]
c0020ace:	0f be 0c 02          	movsx  ecx,BYTE PTR [edx+eax*1]
c0020ad2:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0020ad6:	83 f9 0a             	cmp    ecx,0xa
c0020ad9:	74 07                	je     c0020ae2 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x220>
c0020adb:	47                   	inc    edi
c0020adc:	39 c5                	cmp    ebp,eax
c0020ade:	75 16                	jne    c0020af6 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x234>
c0020ae0:	89 e8                	mov    eax,ebp
c0020ae2:	83 f9 0a             	cmp    ecx,0xa
c0020ae5:	0f 94 c1             	sete   cl
c0020ae8:	0f b6 c9             	movzx  ecx,cl
c0020aeb:	01 c1                	add    ecx,eax
c0020aed:	80 7c 24 0a 56       	cmp    BYTE PTR [esp+0xa],0x56
c0020af2:	75 0f                	jne    c0020b03 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x241>
c0020af4:	eb 1c                	jmp    c0020b12 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x250>
c0020af6:	c6 07 00             	mov    BYTE PTR [edi],0x0
c0020af9:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0020afd:	40                   	inc    eax
c0020afe:	88 4f ff             	mov    BYTE PTR [edi-0x1],cl
c0020b01:	eb cb                	jmp    c0020ace <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x20c>
c0020b03:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0020b07:	66 39 7c 24 0c       	cmp    WORD PTR [esp+0xc],di
c0020b0c:	0f 85 d9 fe ff ff    	jne    c00209eb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c0020b12:	80 fb 58             	cmp    bl,0x58
c0020b15:	74 10                	je     c0020b27 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x265>
c0020b17:	66 8b 7c 24 16       	mov    di,WORD PTR [esp+0x16]
c0020b1c:	66 39 7c 24 10       	cmp    WORD PTR [esp+0x10],di
c0020b21:	0f 85 c4 fe ff ff    	jne    c00209eb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c0020b27:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0020b2b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0020b2f:	83 e8 30             	sub    eax,0x30
c0020b32:	c1 e0 04             	shl    eax,0x4
c0020b35:	83 eb 30             	sub    ebx,0x30
c0020b38:	09 d8                	or     eax,ebx
c0020b3a:	0f b6 c0             	movzx  eax,al
c0020b3d:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c0020b41:	0f 85 a4 fe ff ff    	jne    c00209eb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c0020b47:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020b4b:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0020b4f:	83 e8 30             	sub    eax,0x30
c0020b52:	c1 e0 04             	shl    eax,0x4
c0020b55:	83 eb 30             	sub    ebx,0x30
c0020b58:	09 d8                	or     eax,ebx
c0020b5a:	0f b6 c0             	movzx  eax,al
c0020b5d:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0020b61:	0f 85 84 fe ff ff    	jne    c00209eb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c0020b67:	50                   	push   eax
c0020b68:	50                   	push   eax
c0020b69:	8d 44 24 48          	lea    eax,[esp+0x48]
c0020b6d:	50                   	push   eax
c0020b6e:	56                   	push   esi
c0020b6f:	e8 dc fa fd ff       	call   c0000650 <strcpy>
c0020b74:	83 c4 10             	add    esp,0x10
c0020b77:	eb 05                	jmp    c0020b7e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2bc>
c0020b79:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0020b7c:	31 f6                	xor    esi,esi
c0020b7e:	81 c4 4c 01 00 00    	add    esp,0x14c
c0020b84:	89 f0                	mov    eax,esi
c0020b86:	5b                   	pop    ebx
c0020b87:	5e                   	pop    esi
c0020b88:	5f                   	pop    edi
c0020b89:	5d                   	pop    ebp
c0020b8a:	c3                   	ret    
c0020b8b:	90                   	nop

c0020b8c <PCI::checkBus(unsigned char)>:
c0020b8c:	56                   	push   esi
c0020b8d:	53                   	push   ebx
c0020b8e:	31 db                	xor    ebx,ebx
c0020b90:	51                   	push   ecx
c0020b91:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0020b96:	52                   	push   edx
c0020b97:	53                   	push   ebx
c0020b98:	43                   	inc    ebx
c0020b99:	56                   	push   esi
c0020b9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020b9e:	e8 6f 03 00 00       	call   c0020f12 <PCI::checkDevice(unsigned char, unsigned char)>
c0020ba3:	83 c4 10             	add    esp,0x10
c0020ba6:	83 fb 20             	cmp    ebx,0x20
c0020ba9:	75 eb                	jne    c0020b96 <PCI::checkBus(unsigned char)+0xa>
c0020bab:	58                   	pop    eax
c0020bac:	5b                   	pop    ebx
c0020bad:	5e                   	pop    esi
c0020bae:	c3                   	ret    
c0020baf:	90                   	nop

c0020bb0 <PCI::foundDevice(PCIDeviceInfo)>:
c0020bb0:	55                   	push   ebp
c0020bb1:	57                   	push   edi
c0020bb2:	56                   	push   esi
c0020bb3:	53                   	push   ebx
c0020bb4:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0020bba:	0f b7 84 24 a6 00 00 00 	movzx  eax,WORD PTR [esp+0xa6]
c0020bc2:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c0020bc9:	3d ff ff 00 00       	cmp    eax,0xffff
c0020bce:	0f 84 b6 01 00 00    	je     c0020d8a <PCI::foundDevice(PCIDeviceInfo)+0x1da>
c0020bd4:	0f b7 ac 24 a4 00 00 00 	movzx  ebp,WORD PTR [esp+0xa4]
c0020bdc:	66 81 fd 06 04       	cmp    bp,0x406
c0020be1:	75 32                	jne    c0020c15 <PCI::foundDevice(PCIDeviceInfo)+0x65>
c0020be3:	0f b6 84 24 aa 00 00 00 	movzx  eax,BYTE PTR [esp+0xaa]
c0020beb:	50                   	push   eax
c0020bec:	0f b6 84 24 ad 00 00 00 	movzx  eax,BYTE PTR [esp+0xad]
c0020bf4:	50                   	push   eax
c0020bf5:	0f b6 84 24 b0 00 00 00 	movzx  eax,BYTE PTR [esp+0xb0]
c0020bfd:	50                   	push   eax
c0020bfe:	53                   	push   ebx
c0020bff:	e8 4c fb ff ff       	call   c0020750 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c0020c04:	59                   	pop    ecx
c0020c05:	5e                   	pop    esi
c0020c06:	0f b6 c0             	movzx  eax,al
c0020c09:	50                   	push   eax
c0020c0a:	53                   	push   ebx
c0020c0b:	e8 7c ff ff ff       	call   c0020b8c <PCI::checkBus(unsigned char)>
c0020c10:	e9 15 01 00 00       	jmp    c0020d2a <PCI::foundDevice(PCIDeviceInfo)+0x17a>
c0020c15:	0f b6 94 24 c4 00 00 00 	movzx  edx,BYTE PTR [esp+0xc4]
c0020c1d:	8b 83 cc 00 00 00    	mov    eax,DWORD PTR [ebx+0xcc]
c0020c23:	8b 8c 24 a4 00 00 00 	mov    ecx,DWORD PTR [esp+0xa4]
c0020c2a:	8b b4 24 ac 00 00 00 	mov    esi,DWORD PTR [esp+0xac]
c0020c31:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0020c35:	85 c0                	test   eax,eax
c0020c37:	74 34                	je     c0020c6d <PCI::foundDevice(PCIDeviceInfo)+0xbd>
c0020c39:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0020c3c:	85 d2                	test   edx,edx
c0020c3e:	74 29                	je     c0020c69 <PCI::foundDevice(PCIDeviceInfo)+0xb9>
c0020c40:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c0020c46:	31 cf                	xor    edi,ecx
c0020c48:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c0020c4e:	75 19                	jne    c0020c69 <PCI::foundDevice(PCIDeviceInfo)+0xb9>
c0020c50:	39 b2 20 01 00 00    	cmp    DWORD PTR [edx+0x120],esi
c0020c56:	75 11                	jne    c0020c69 <PCI::foundDevice(PCIDeviceInfo)+0xb9>
c0020c58:	0f b6 92 38 01 00 00 	movzx  edx,BYTE PTR [edx+0x138]
c0020c5f:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c0020c63:	0f 84 21 01 00 00    	je     c0020d8a <PCI::foundDevice(PCIDeviceInfo)+0x1da>
c0020c69:	8b 00                	mov    eax,DWORD PTR [eax]
c0020c6b:	eb c8                	jmp    c0020c35 <PCI::foundDevice(PCIDeviceInfo)+0x85>
c0020c6d:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0020c71:	be 0c e0 02 c0       	mov    esi,0xc002e00c
c0020c76:	b9 07 00 00 00       	mov    ecx,0x7
c0020c7b:	fc                   	cld    
c0020c7c:	31 d2                	xor    edx,edx
c0020c7e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0020c80:	b9 12 00 00 00       	mov    ecx,0x12
c0020c85:	66 c7 44 24 35 30 30 	mov    WORD PTR [esp+0x35],0x3030
c0020c8c:	8d 7c 24 38          	lea    edi,[esp+0x38]
c0020c90:	83 ec 0c             	sub    esp,0xc
c0020c93:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0020c95:	0f b6 84 24 b0 00 00 00 	movzx  eax,BYTE PTR [esp+0xb0]
c0020c9d:	b9 0a 00 00 00       	mov    ecx,0xa
c0020ca2:	f7 f1                	div    ecx
c0020ca4:	83 c0 30             	add    eax,0x30
c0020ca7:	83 c2 30             	add    edx,0x30
c0020caa:	88 44 24 39          	mov    BYTE PTR [esp+0x39],al
c0020cae:	0f b6 84 24 b1 00 00 00 	movzx  eax,BYTE PTR [esp+0xb1]
c0020cb6:	88 54 24 3a          	mov    BYTE PTR [esp+0x3a],dl
c0020cba:	31 d2                	xor    edx,edx
c0020cbc:	f7 f1                	div    ecx
c0020cbe:	83 c0 30             	add    eax,0x30
c0020cc1:	83 c2 30             	add    edx,0x30
c0020cc4:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c0020cc8:	88 54 24 3e          	mov    BYTE PTR [esp+0x3e],dl
c0020ccc:	8d 44 24 28          	lea    eax,[esp+0x28]
c0020cd0:	50                   	push   eax
c0020cd1:	e8 8b cf fe ff       	call   c000dc61 <KeSetBootMessage(char const*)>
c0020cd6:	83 c4 10             	add    esp,0x10
c0020cd9:	81 fd 01 06 00 00    	cmp    ebp,0x601
c0020cdf:	8d b4 24 a4 00 00 00 	lea    esi,[esp+0xa4]
c0020ce6:	75 47                	jne    c0020d2f <PCI::foundDevice(PCIDeviceInfo)+0x17f>
c0020ce8:	83 ec 0c             	sub    esp,0xc
c0020ceb:	68 64 01 00 00       	push   0x164
c0020cf0:	e8 17 f4 fe ff       	call   c001010c <malloc>
c0020cf5:	89 04 24             	mov    DWORD PTR [esp],eax
c0020cf8:	89 c5                	mov    ebp,eax
c0020cfa:	e8 37 11 00 00       	call   c0021e36 <SATABus::SATABus()>
c0020cff:	58                   	pop    eax
c0020d00:	5a                   	pop    edx
c0020d01:	55                   	push   ebp
c0020d02:	53                   	push   ebx
c0020d03:	e8 16 97 fe ff       	call   c000a41e <Device::addChild(Device*)>
c0020d08:	83 ec 1c             	sub    esp,0x1c
c0020d0b:	b9 09 00 00 00       	mov    ecx,0x9
c0020d10:	89 e7                	mov    edi,esp
c0020d12:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0020d14:	55                   	push   ebp
c0020d15:	e8 4a 96 fe ff       	call   c000a364 <Device::preOpenPCI(PCIDeviceInfo)>
c0020d1a:	83 c4 30             	add    esp,0x30
c0020d1d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0020d20:	6a 00                	push   0x0
c0020d22:	6a 00                	push   0x0
c0020d24:	6a 00                	push   0x0
c0020d26:	55                   	push   ebp
c0020d27:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0020d2a:	83 c4 10             	add    esp,0x10
c0020d2d:	eb 5b                	jmp    c0020d8a <PCI::foundDevice(PCIDeviceInfo)+0x1da>
c0020d2f:	81 fd 01 01 00 00    	cmp    ebp,0x101
c0020d35:	75 19                	jne    c0020d50 <PCI::foundDevice(PCIDeviceInfo)+0x1a0>
c0020d37:	83 ec 0c             	sub    esp,0xc
c0020d3a:	68 70 02 00 00       	push   0x270
c0020d3f:	e8 c8 f3 fe ff       	call   c001010c <malloc>
c0020d44:	89 04 24             	mov    DWORD PTR [esp],eax
c0020d47:	89 c5                	mov    ebp,eax
c0020d49:	e8 94 02 00 00       	call   c0020fe2 <IDE::IDE()>
c0020d4e:	eb af                	jmp    c0020cff <PCI::foundDevice(PCIDeviceInfo)+0x14f>
c0020d50:	83 ec 0c             	sub    esp,0xc
c0020d53:	68 58 01 00 00       	push   0x158
c0020d58:	e8 af f3 fe ff       	call   c001010c <malloc>
c0020d5d:	89 c5                	mov    ebp,eax
c0020d5f:	58                   	pop    eax
c0020d60:	5a                   	pop    edx
c0020d61:	68 f2 df 02 c0       	push   0xc002dff2
c0020d66:	55                   	push   ebp
c0020d67:	e8 66 99 fe ff       	call   c000a6d2 <DriverlessDevice::DriverlessDevice(char const*)>
c0020d6c:	59                   	pop    ecx
c0020d6d:	5f                   	pop    edi
c0020d6e:	55                   	push   ebp
c0020d6f:	53                   	push   ebx
c0020d70:	e8 a9 96 fe ff       	call   c000a41e <Device::addChild(Device*)>
c0020d75:	83 ec 1c             	sub    esp,0x1c
c0020d78:	b9 09 00 00 00       	mov    ecx,0x9
c0020d7d:	89 e7                	mov    edi,esp
c0020d7f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0020d81:	55                   	push   ebp
c0020d82:	e8 dd 95 fe ff       	call   c000a364 <Device::preOpenPCI(PCIDeviceInfo)>
c0020d87:	83 c4 30             	add    esp,0x30
c0020d8a:	81 c4 8c 00 00 00    	add    esp,0x8c
c0020d90:	5b                   	pop    ebx
c0020d91:	5e                   	pop    esi
c0020d92:	5f                   	pop    edi
c0020d93:	5d                   	pop    ebp
c0020d94:	c3                   	ret    
c0020d95:	90                   	nop

c0020d96 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c0020d96:	55                   	push   ebp
c0020d97:	57                   	push   edi
c0020d98:	56                   	push   esi
c0020d99:	53                   	push   ebx
c0020d9a:	83 ec 68             	sub    esp,0x68
c0020d9d:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0020da4:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c0020da8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0020dac:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0020db3:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c0020db8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0020dbc:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0020dc3:	0f b6 5c 24 24       	movzx  ebx,BYTE PTR [esp+0x24]
c0020dc8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0020dcc:	0f b6 7c 24 28       	movzx  edi,BYTE PTR [esp+0x28]
c0020dd1:	6a 0c                	push   0xc
c0020dd3:	57                   	push   edi
c0020dd4:	53                   	push   ebx
c0020dd5:	56                   	push   esi
c0020dd6:	55                   	push   ebp
c0020dd7:	e8 c4 f7 ff ff       	call   c00205a0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0020ddc:	83 c4 20             	add    esp,0x20
c0020ddf:	57                   	push   edi
c0020de0:	53                   	push   ebx
c0020de1:	56                   	push   esi
c0020de2:	55                   	push   ebp
c0020de3:	e8 ae f8 ff ff       	call   c0020696 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0020de8:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c0020ded:	57                   	push   edi
c0020dee:	53                   	push   ebx
c0020def:	56                   	push   esi
c0020df0:	55                   	push   ebp
c0020df1:	e8 36 f9 ff ff       	call   c002072c <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c0020df6:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0020dfa:	83 c4 14             	add    esp,0x14
c0020dfd:	6a 3c                	push   0x3c
c0020dff:	57                   	push   edi
c0020e00:	53                   	push   ebx
c0020e01:	56                   	push   esi
c0020e02:	55                   	push   ebp
c0020e03:	e8 98 f7 ff ff       	call   c00205a0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0020e08:	0f b6 c4             	movzx  eax,ah
c0020e0b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0020e0f:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0020e13:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c0020e17:	a1 08 61 03 c0       	mov    eax,ds:0xc0036108
c0020e1c:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c0020e22:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c0020e28:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0020e2c:	83 c4 20             	add    esp,0x20
c0020e2f:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0020e34:	74 30                	je     c0020e66 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c0020e36:	31 c0                	xor    eax,eax
c0020e38:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0020e3c:	7e 28                	jle    c0020e66 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c0020e3e:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c0020e46:	39 cb                	cmp    ebx,ecx
c0020e48:	75 19                	jne    c0020e63 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c0020e4a:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c0020e52:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c0020e56:	75 0b                	jne    c0020e63 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c0020e58:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c0020e5f:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0020e63:	40                   	inc    eax
c0020e64:	eb d2                	jmp    c0020e38 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c0020e66:	31 d2                	xor    edx,edx
c0020e68:	83 ec 0c             	sub    esp,0xc
c0020e6b:	57                   	push   edi
c0020e6c:	53                   	push   ebx
c0020e6d:	56                   	push   esi
c0020e6e:	52                   	push   edx
c0020e6f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0020e73:	55                   	push   ebp
c0020e74:	e8 ff f8 ff ff       	call   c0020778 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0020e79:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0020e7d:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c0020e81:	42                   	inc    edx
c0020e82:	83 c4 20             	add    esp,0x20
c0020e85:	83 fa 06             	cmp    edx,0x6
c0020e88:	75 de                	jne    c0020e68 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c0020e8a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0020e8e:	83 ec 0c             	sub    esp,0xc
c0020e91:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0020e95:	c1 e2 08             	shl    edx,0x8
c0020e98:	0f b6 c4             	movzx  eax,ah
c0020e9b:	09 d0                	or     eax,edx
c0020e9d:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c0020ea2:	6a 02                	push   0x2
c0020ea4:	57                   	push   edi
c0020ea5:	53                   	push   ebx
c0020ea6:	56                   	push   esi
c0020ea7:	55                   	push   ebp
c0020ea8:	e8 f3 f6 ff ff       	call   c00205a0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0020ead:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c0020eb2:	83 c4 20             	add    esp,0x20
c0020eb5:	57                   	push   edi
c0020eb6:	53                   	push   ebx
c0020eb7:	56                   	push   esi
c0020eb8:	55                   	push   ebp
c0020eb9:	e8 22 f8 ff ff       	call   c00206e0 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0020ebe:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0020ec2:	57                   	push   edi
c0020ec3:	53                   	push   ebx
c0020ec4:	56                   	push   esi
c0020ec5:	55                   	push   ebp
c0020ec6:	e8 7f f7 ff ff       	call   c002064a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0020ecb:	b9 09 00 00 00       	mov    ecx,0x9
c0020ed0:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c0020ed5:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0020ed9:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c0020edd:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c0020ee1:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c0020ee5:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c0020ee9:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c0020eed:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c0020ef1:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c0020ef5:	83 ec 0c             	sub    esp,0xc
c0020ef8:	fc                   	cld    
c0020ef9:	8d 74 24 58          	lea    esi,[esp+0x58]
c0020efd:	89 e7                	mov    edi,esp
c0020eff:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0020f01:	55                   	push   ebp
c0020f02:	e8 a9 fc ff ff       	call   c0020bb0 <PCI::foundDevice(PCIDeviceInfo)>
c0020f07:	81 c4 8c 00 00 00    	add    esp,0x8c
c0020f0d:	5b                   	pop    ebx
c0020f0e:	5e                   	pop    esi
c0020f0f:	5f                   	pop    edi
c0020f10:	5d                   	pop    ebp
c0020f11:	c3                   	ret    

c0020f12 <PCI::checkDevice(unsigned char, unsigned char)>:
c0020f12:	55                   	push   ebp
c0020f13:	57                   	push   edi
c0020f14:	56                   	push   esi
c0020f15:	53                   	push   ebx
c0020f16:	83 ec 0c             	sub    esp,0xc
c0020f19:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c0020f1e:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0020f23:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0020f27:	6a 00                	push   0x0
c0020f29:	56                   	push   esi
c0020f2a:	57                   	push   edi
c0020f2b:	55                   	push   ebp
c0020f2c:	e8 19 f7 ff ff       	call   c002064a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0020f31:	6a 00                	push   0x0
c0020f33:	56                   	push   esi
c0020f34:	57                   	push   edi
c0020f35:	55                   	push   ebp
c0020f36:	e8 5b fe ff ff       	call   c0020d96 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0020f3b:	83 c4 20             	add    esp,0x20
c0020f3e:	6a 00                	push   0x0
c0020f40:	56                   	push   esi
c0020f41:	57                   	push   edi
c0020f42:	55                   	push   ebp
c0020f43:	e8 26 f7 ff ff       	call   c002066e <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0020f48:	83 c4 10             	add    esp,0x10
c0020f4b:	a8 80                	test   al,0x80
c0020f4d:	74 2d                	je     c0020f7c <PCI::checkDevice(unsigned char, unsigned char)+0x6a>
c0020f4f:	bb 01 00 00 00       	mov    ebx,0x1
c0020f54:	53                   	push   ebx
c0020f55:	56                   	push   esi
c0020f56:	57                   	push   edi
c0020f57:	55                   	push   ebp
c0020f58:	e8 ed f6 ff ff       	call   c002064a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0020f5d:	83 c4 10             	add    esp,0x10
c0020f60:	0f b7 c0             	movzx  eax,ax
c0020f63:	3d ff ff 00 00       	cmp    eax,0xffff
c0020f68:	74 0c                	je     c0020f76 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c0020f6a:	53                   	push   ebx
c0020f6b:	56                   	push   esi
c0020f6c:	57                   	push   edi
c0020f6d:	55                   	push   ebp
c0020f6e:	e8 23 fe ff ff       	call   c0020d96 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0020f73:	83 c4 10             	add    esp,0x10
c0020f76:	43                   	inc    ebx
c0020f77:	83 fb 08             	cmp    ebx,0x8
c0020f7a:	75 d8                	jne    c0020f54 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c0020f7c:	83 c4 0c             	add    esp,0xc
c0020f7f:	5b                   	pop    ebx
c0020f80:	5e                   	pop    esi
c0020f81:	5f                   	pop    edi
c0020f82:	5d                   	pop    ebp
c0020f83:	c3                   	ret    

c0020f84 <PCI::detect()>:
c0020f84:	56                   	push   esi
c0020f85:	53                   	push   ebx
c0020f86:	53                   	push   ebx
c0020f87:	31 db                	xor    ebx,ebx
c0020f89:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0020f8d:	6a 00                	push   0x0
c0020f8f:	6a 00                	push   0x0
c0020f91:	6a 00                	push   0x0
c0020f93:	56                   	push   esi
c0020f94:	e8 d5 f6 ff ff       	call   c002066e <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0020f99:	83 c4 10             	add    esp,0x10
c0020f9c:	a8 80                	test   al,0x80
c0020f9e:	75 21                	jne    c0020fc1 <PCI::detect()+0x3d>
c0020fa0:	51                   	push   ecx
c0020fa1:	51                   	push   ecx
c0020fa2:	6a 00                	push   0x0
c0020fa4:	56                   	push   esi
c0020fa5:	e8 e2 fb ff ff       	call   c0020b8c <PCI::checkBus(unsigned char)>
c0020faa:	83 c4 10             	add    esp,0x10
c0020fad:	eb 2a                	jmp    c0020fd9 <PCI::detect()+0x55>
c0020faf:	52                   	push   edx
c0020fb0:	52                   	push   edx
c0020fb1:	53                   	push   ebx
c0020fb2:	43                   	inc    ebx
c0020fb3:	56                   	push   esi
c0020fb4:	e8 d3 fb ff ff       	call   c0020b8c <PCI::checkBus(unsigned char)>
c0020fb9:	83 c4 10             	add    esp,0x10
c0020fbc:	83 fb 08             	cmp    ebx,0x8
c0020fbf:	74 18                	je     c0020fd9 <PCI::detect()+0x55>
c0020fc1:	53                   	push   ebx
c0020fc2:	6a 00                	push   0x0
c0020fc4:	6a 00                	push   0x0
c0020fc6:	56                   	push   esi
c0020fc7:	e8 7e f6 ff ff       	call   c002064a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0020fcc:	83 c4 10             	add    esp,0x10
c0020fcf:	0f b7 c0             	movzx  eax,ax
c0020fd2:	3d ff ff 00 00       	cmp    eax,0xffff
c0020fd7:	74 d6                	je     c0020faf <PCI::detect()+0x2b>
c0020fd9:	58                   	pop    eax
c0020fda:	5b                   	pop    ebx
c0020fdb:	5e                   	pop    esi
c0020fdc:	c3                   	ret    
c0020fdd:	90                   	nop

c0020fde <IDE::close(int, int, void*)>:
c0020fde:	83 c8 ff             	or     eax,0xffffffff
c0020fe1:	c3                   	ret    

c0020fe2 <IDE::IDE()>:
c0020fe2:	83 ec 0c             	sub    esp,0xc
c0020fe5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020fe9:	83 ec 08             	sub    esp,0x8
c0020fec:	68 9c e0 02 c0       	push   0xc002e09c
c0020ff1:	50                   	push   eax
c0020ff2:	e8 81 97 fe ff       	call   c000a778 <HardDiskController::HardDiskController(char const*)>
c0020ff7:	83 c4 10             	add    esp,0x10
c0020ffa:	ba c8 e1 02 c0       	mov    edx,0xc002e1c8
c0020fff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021003:	89 10                	mov    DWORD PTR [eax],edx
c0021005:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021009:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0021010:	90                   	nop
c0021011:	83 c4 0c             	add    esp,0xc
c0021014:	c3                   	ret    
c0021015:	90                   	nop

c0021016 <IDE::prepareInterrupt(unsigned char)>:
c0021016:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002101b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002101f:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c0021027:	c3                   	ret    

c0021028 <selectDrive(unsigned char, unsigned char)>:
c0021028:	c3                   	ret    
c0021029:	90                   	nop

c002102a <IDE::getBase(unsigned char)>:
c002102a:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c002102f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021033:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c002103b:	c3                   	ret    

c002103c <IDE::write(unsigned char, unsigned char, unsigned char)>:
c002103c:	55                   	push   ebp
c002103d:	57                   	push   edi
c002103e:	56                   	push   esi
c002103f:	53                   	push   ebx
c0021040:	83 ec 1c             	sub    esp,0x1c
c0021043:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0021047:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c002104b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c002104f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0021053:	8d 4b f8             	lea    ecx,[ebx-0x8]
c0021056:	80 f9 03             	cmp    cl,0x3
c0021059:	77 4f                	ja     c00210aa <IDE::write(unsigned char, unsigned char, unsigned char)+0x6e>
c002105b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002105f:	0f b6 f2             	movzx  esi,dl
c0021062:	0f b6 db             	movzx  ebx,bl
c0021065:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0021068:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c002106d:	80 ca 80             	or     dl,0x80
c0021070:	52                   	push   edx
c0021071:	6a 0c                	push   0xc
c0021073:	56                   	push   esi
c0021074:	57                   	push   edi
c0021075:	e8 c2 ff ff ff       	call   c002103c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002107a:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c002107f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021083:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c0021087:	ee                   	out    dx,al
c0021088:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c002108d:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c0021091:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0021095:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c002109d:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00210a1:	83 c4 2c             	add    esp,0x2c
c00210a4:	5b                   	pop    ebx
c00210a5:	5e                   	pop    esi
c00210a6:	5f                   	pop    edi
c00210a7:	5d                   	pop    ebp
c00210a8:	eb 92                	jmp    c002103c <IDE::write(unsigned char, unsigned char, unsigned char)>
c00210aa:	0f b6 cb             	movzx  ecx,bl
c00210ad:	83 f9 07             	cmp    ecx,0x7
c00210b0:	77 12                	ja     c00210c4 <IDE::write(unsigned char, unsigned char, unsigned char)+0x88>
c00210b2:	0f b6 d2             	movzx  edx,dl
c00210b5:	0f b6 db             	movzx  ebx,bl
c00210b8:	66 8b 94 d7 5a 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15a]
c00210c0:	01 da                	add    edx,ebx
c00210c2:	eb 2f                	jmp    c00210f3 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c00210c4:	83 f9 0d             	cmp    ecx,0xd
c00210c7:	77 13                	ja     c00210dc <IDE::write(unsigned char, unsigned char, unsigned char)+0xa0>
c00210c9:	0f b6 d2             	movzx  edx,dl
c00210cc:	0f b6 db             	movzx  ebx,bl
c00210cf:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c00210d6:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c00210da:	eb 17                	jmp    c00210f3 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c00210dc:	83 f9 15             	cmp    ecx,0x15
c00210df:	77 13                	ja     c00210f4 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb8>
c00210e1:	0f b6 d2             	movzx  edx,dl
c00210e4:	0f b6 db             	movzx  ebx,bl
c00210e7:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c00210ef:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c00210f3:	ee                   	out    dx,al
c00210f4:	83 c4 1c             	add    esp,0x1c
c00210f7:	5b                   	pop    ebx
c00210f8:	5e                   	pop    esi
c00210f9:	5f                   	pop    edi
c00210fa:	5d                   	pop    ebp
c00210fb:	c3                   	ret    

c00210fc <IDE::read(unsigned char, unsigned char)>:
c00210fc:	57                   	push   edi
c00210fd:	56                   	push   esi
c00210fe:	53                   	push   ebx
c00210ff:	83 ec 10             	sub    esp,0x10
c0021102:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0021106:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c002110a:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c002110e:	8d 42 f8             	lea    eax,[edx-0x8]
c0021111:	3c 03                	cmp    al,0x3
c0021113:	77 48                	ja     c002115d <IDE::read(unsigned char, unsigned char)+0x61>
c0021115:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021119:	0f b6 f1             	movzx  esi,cl
c002111c:	8d 7e 2a             	lea    edi,[esi+0x2a]
c002111f:	0f b6 44 fb 10       	movzx  eax,BYTE PTR [ebx+edi*8+0x10]
c0021124:	0c 80                	or     al,0x80
c0021126:	50                   	push   eax
c0021127:	6a 0c                	push   0xc
c0021129:	56                   	push   esi
c002112a:	53                   	push   ebx
c002112b:	e8 0c ff ff ff       	call   c002103c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021130:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0021134:	66 8b 44 fb 0a       	mov    ax,WORD PTR [ebx+edi*8+0xa]
c0021139:	0f b6 d2             	movzx  edx,dl
c002113c:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c0021140:	ec                   	in     al,dx
c0021141:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0021145:	0f b6 54 fb 10       	movzx  edx,BYTE PTR [ebx+edi*8+0x10]
c002114a:	52                   	push   edx
c002114b:	6a 0c                	push   0xc
c002114d:	56                   	push   esi
c002114e:	53                   	push   ebx
c002114f:	e8 e8 fe ff ff       	call   c002103c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021154:	83 c4 20             	add    esp,0x20
c0021157:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c002115b:	eb 4c                	jmp    c00211a9 <IDE::read(unsigned char, unsigned char)+0xad>
c002115d:	0f b6 f2             	movzx  esi,dl
c0021160:	83 fe 07             	cmp    esi,0x7
c0021163:	77 12                	ja     c0021177 <IDE::read(unsigned char, unsigned char)+0x7b>
c0021165:	0f b6 c9             	movzx  ecx,cl
c0021168:	0f b6 d2             	movzx  edx,dl
c002116b:	66 8b 84 cb 5a 01 00 00 	mov    ax,WORD PTR [ebx+ecx*8+0x15a]
c0021173:	01 c2                	add    edx,eax
c0021175:	eb 31                	jmp    c00211a8 <IDE::read(unsigned char, unsigned char)+0xac>
c0021177:	83 fe 0d             	cmp    esi,0xd
c002117a:	77 13                	ja     c002118f <IDE::read(unsigned char, unsigned char)+0x93>
c002117c:	0f b6 c9             	movzx  ecx,cl
c002117f:	0f b6 d2             	movzx  edx,dl
c0021182:	8b 84 cb 5c 01 00 00 	mov    eax,DWORD PTR [ebx+ecx*8+0x15c]
c0021189:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c002118d:	eb 19                	jmp    c00211a8 <IDE::read(unsigned char, unsigned char)+0xac>
c002118f:	31 c0                	xor    eax,eax
c0021191:	83 fe 15             	cmp    esi,0x15
c0021194:	77 13                	ja     c00211a9 <IDE::read(unsigned char, unsigned char)+0xad>
c0021196:	0f b6 c9             	movzx  ecx,cl
c0021199:	0f b6 d2             	movzx  edx,dl
c002119c:	66 8b 84 cb 5e 01 00 00 	mov    ax,WORD PTR [ebx+ecx*8+0x15e]
c00211a4:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c00211a8:	ec                   	in     al,dx
c00211a9:	83 c4 10             	add    esp,0x10
c00211ac:	5b                   	pop    ebx
c00211ad:	5e                   	pop    esi
c00211ae:	5f                   	pop    edi
c00211af:	c3                   	ret    

c00211b0 <IDE::waitInterrupt(unsigned char)>:
c00211b0:	55                   	push   ebp
c00211b1:	57                   	push   edi
c00211b2:	56                   	push   esi
c00211b3:	53                   	push   ebx
c00211b4:	31 db                	xor    ebx,ebx
c00211b6:	83 ec 0c             	sub    esp,0xc
c00211b9:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00211bd:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c00211c2:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c00211ca:	89 e8                	mov    eax,ebp
c00211cc:	84 c0                	test   al,al
c00211ce:	75 31                	jne    c0021201 <IDE::waitInterrupt(unsigned char)+0x51>
c00211d0:	52                   	push   edx
c00211d1:	6a 0c                	push   0xc
c00211d3:	56                   	push   esi
c00211d4:	57                   	push   edi
c00211d5:	e8 22 ff ff ff       	call   c00210fc <IDE::read(unsigned char, unsigned char)>
c00211da:	83 c4 10             	add    esp,0x10
c00211dd:	a8 01                	test   al,0x1
c00211df:	75 28                	jne    c0021209 <IDE::waitInterrupt(unsigned char)+0x59>
c00211e1:	f6 c3 04             	test   bl,0x4
c00211e4:	75 13                	jne    c00211f9 <IDE::waitInterrupt(unsigned char)+0x49>
c00211e6:	83 fb 32             	cmp    ebx,0x32
c00211e9:	7e 0e                	jle    c00211f9 <IDE::waitInterrupt(unsigned char)+0x49>
c00211eb:	50                   	push   eax
c00211ec:	50                   	push   eax
c00211ed:	6a 00                	push   0x0
c00211ef:	6a 64                	push   0x64
c00211f1:	e8 e6 60 ff ff       	call   c00172dc <milliTenthSleep(unsigned long long)>
c00211f6:	83 c4 10             	add    esp,0x10
c00211f9:	83 fb 3c             	cmp    ebx,0x3c
c00211fc:	74 0b                	je     c0021209 <IDE::waitInterrupt(unsigned char)+0x59>
c00211fe:	43                   	inc    ebx
c00211ff:	eb c1                	jmp    c00211c2 <IDE::waitInterrupt(unsigned char)+0x12>
c0021201:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c0021209:	83 c4 0c             	add    esp,0xc
c002120c:	89 e8                	mov    eax,ebp
c002120e:	5b                   	pop    ebx
c002120f:	5e                   	pop    esi
c0021210:	5f                   	pop    edi
c0021211:	5d                   	pop    ebp
c0021212:	c3                   	ret    

c0021213 <ideChannel0IRQHandler(regs*, void*)>:
c0021213:	83 ec 10             	sub    esp,0x10
c0021216:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002121a:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c0021221:	6a 07                	push   0x7
c0021223:	6a 00                	push   0x0
c0021225:	50                   	push   eax
c0021226:	e8 d1 fe ff ff       	call   c00210fc <IDE::read(unsigned char, unsigned char)>
c002122b:	83 c4 1c             	add    esp,0x1c
c002122e:	c3                   	ret    

c002122f <ideChannel1IRQHandler(regs*, void*)>:
c002122f:	83 ec 10             	sub    esp,0x10
c0021232:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0021236:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c002123d:	6a 07                	push   0x7
c002123f:	6a 01                	push   0x1
c0021241:	50                   	push   eax
c0021242:	e8 b5 fe ff ff       	call   c00210fc <IDE::read(unsigned char, unsigned char)>
c0021247:	83 c4 1c             	add    esp,0x1c
c002124a:	c3                   	ret    
c002124b:	90                   	nop

c002124c <IDE::enableIRQs(unsigned char, bool)>:
c002124c:	57                   	push   edi
c002124d:	b8 02 00 00 00       	mov    eax,0x2
c0021252:	56                   	push   esi
c0021253:	53                   	push   ebx
c0021254:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0021259:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002125d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0021261:	74 02                	je     c0021265 <IDE::enableIRQs(unsigned char, bool)+0x19>
c0021263:	31 c0                	xor    eax,eax
c0021265:	0f b6 db             	movzx  ebx,bl
c0021268:	bf 04 00 00 00       	mov    edi,0x4
c002126d:	88 84 de 60 01 00 00 	mov    BYTE PTR [esi+ebx*8+0x160],al
c0021274:	50                   	push   eax
c0021275:	6a 0c                	push   0xc
c0021277:	53                   	push   ebx
c0021278:	56                   	push   esi
c0021279:	e8 be fd ff ff       	call   c002103c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002127e:	83 c4 10             	add    esp,0x10
c0021281:	50                   	push   eax
c0021282:	6a 0c                	push   0xc
c0021284:	53                   	push   ebx
c0021285:	56                   	push   esi
c0021286:	e8 71 fe ff ff       	call   c00210fc <IDE::read(unsigned char, unsigned char)>
c002128b:	83 c4 10             	add    esp,0x10
c002128e:	4f                   	dec    edi
c002128f:	75 f0                	jne    c0021281 <IDE::enableIRQs(unsigned char, bool)+0x35>
c0021291:	5b                   	pop    ebx
c0021292:	5e                   	pop    esi
c0021293:	5f                   	pop    edi
c0021294:	c3                   	ret    
c0021295:	90                   	nop

c0021296 <IDE::open(int, int, void*)>:
c0021296:	55                   	push   ebp
c0021297:	57                   	push   edi
c0021298:	56                   	push   esi
c0021299:	53                   	push   ebx
c002129a:	83 ec 1c             	sub    esp,0x1c
c002129d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00212a1:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c00212a8:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c00212b1:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c00212ba:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c00212c1:	0f 85 80 02 00 00    	jne    c0021547 <IDE::open(int, int, void*)+0x2b1>
c00212c7:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c00212cd:	a8 70                	test   al,0x70
c00212cf:	75 44                	jne    c0021315 <IDE::open(int, int, void*)+0x7f>
c00212d1:	ba 20 84 00 00       	mov    edx,0x8420
c00212d6:	0f a3 c2             	bt     edx,eax
c00212d9:	73 3a                	jae    c0021315 <IDE::open(int, int, void*)+0x7f>
c00212db:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c00212e1:	83 ec 0c             	sub    esp,0xc
c00212e4:	83 e0 fc             	and    eax,0xfffffffc
c00212e7:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c00212ee:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c00212f4:	83 e0 fc             	and    eax,0xfffffffc
c00212f7:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c00212fe:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c0021304:	83 e0 fc             	and    eax,0xfffffffc
c0021307:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c002130e:	68 8a a7 02 c0       	push   0xc002a78a
c0021313:	eb 60                	jmp    c0021375 <IDE::open(int, int, void*)+0xdf>
c0021315:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c002131f:	be 64 00 00 00       	mov    esi,0x64
c0021324:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c002132e:	57                   	push   edi
c002132f:	57                   	push   edi
c0021330:	68 b4 e0 02 c0       	push   0xc002e0b4
c0021335:	8d 7c 24 12          	lea    edi,[esp+0x12]
c0021339:	57                   	push   edi
c002133a:	e8 11 f3 fd ff       	call   c0000650 <strcpy>
c002133f:	0f b6 8b 1f 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11f]
c0021346:	31 d2                	xor    edx,edx
c0021348:	89 3c 24             	mov    DWORD PTR [esp],edi
c002134b:	89 c8                	mov    eax,ecx
c002134d:	f7 f6                	div    esi
c002134f:	be 0a 00 00 00       	mov    esi,0xa
c0021354:	31 d2                	xor    edx,edx
c0021356:	83 c0 30             	add    eax,0x30
c0021359:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c002135d:	89 c8                	mov    eax,ecx
c002135f:	f7 f6                	div    esi
c0021361:	89 d1                	mov    ecx,edx
c0021363:	31 d2                	xor    edx,edx
c0021365:	f7 f6                	div    esi
c0021367:	83 c1 30             	add    ecx,0x30
c002136a:	88 4c 24 1a          	mov    BYTE PTR [esp+0x1a],cl
c002136e:	83 c2 30             	add    edx,0x30
c0021371:	88 54 24 19          	mov    BYTE PTR [esp+0x19],dl
c0021375:	e8 e7 c8 fe ff       	call   c000dc61 <KeSetBootMessage(char const*)>
c002137a:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c0021381:	bf f8 0c 00 00       	mov    edi,0xcf8
c0021386:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c002138d:	83 c4 10             	add    esp,0x10
c0021390:	89 fa                	mov    edx,edi
c0021392:	c1 e1 10             	shl    ecx,0x10
c0021395:	c1 e0 0b             	shl    eax,0xb
c0021398:	09 c1                	or     ecx,eax
c002139a:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c00213a1:	c1 e0 08             	shl    eax,0x8
c00213a4:	09 c1                	or     ecx,eax
c00213a6:	89 c8                	mov    eax,ecx
c00213a8:	0d 08 00 00 80       	or     eax,0x80000008
c00213ad:	ef                   	out    dx,eax
c00213ae:	be fc 0c 00 00       	mov    esi,0xcfc
c00213b3:	89 f2                	mov    edx,esi
c00213b5:	ed                   	in     eax,dx
c00213b6:	c1 e8 10             	shr    eax,0x10
c00213b9:	3d ff ff 00 00       	cmp    eax,0xffff
c00213be:	0f 84 e1 00 00 00    	je     c00214a5 <IDE::open(int, int, void*)+0x20f>
c00213c4:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c00213ca:	89 fa                	mov    edx,edi
c00213cc:	89 c8                	mov    eax,ecx
c00213ce:	ef                   	out    dx,eax
c00213cf:	b0 fe                	mov    al,0xfe
c00213d1:	89 f2                	mov    edx,esi
c00213d3:	ee                   	out    dx,al
c00213d4:	89 c8                	mov    eax,ecx
c00213d6:	89 fa                	mov    edx,edi
c00213d8:	ef                   	out    dx,eax
c00213d9:	89 f2                	mov    edx,esi
c00213db:	ed                   	in     eax,dx
c00213dc:	3c fe                	cmp    al,0xfe
c00213de:	0f 85 83 00 00 00    	jne    c0021467 <IDE::open(int, int, void*)+0x1d1>
c00213e4:	83 ec 0c             	sub    esp,0xc
c00213e7:	68 c0 a7 02 c0       	push   0xc002a7c0
c00213ec:	e8 70 c8 fe ff       	call   c000dc61 <KeSetBootMessage(char const*)>
c00213f1:	c7 04 24 ba e0 02 c0 	mov    DWORD PTR [esp],0xc002e0ba
c00213f8:	e8 69 5b fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00213fd:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c0021407:	c7 04 24 a8 aa 02 c0 	mov    DWORD PTR [esp],0xc002aaa8
c002140e:	e8 4e c8 fe ff       	call   c000dc61 <KeSetBootMessage(char const*)>
c0021413:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c002141a:	89 fa                	mov    edx,edi
c002141c:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c0021423:	c1 e1 10             	shl    ecx,0x10
c0021426:	c1 e0 08             	shl    eax,0x8
c0021429:	09 c1                	or     ecx,eax
c002142b:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c0021432:	c1 e0 0b             	shl    eax,0xb
c0021435:	09 c1                	or     ecx,eax
c0021437:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c002143d:	89 c8                	mov    eax,ecx
c002143f:	ef                   	out    dx,eax
c0021440:	8b ab 50 01 00 00    	mov    ebp,DWORD PTR [ebx+0x150]
c0021446:	89 f2                	mov    edx,esi
c0021448:	89 e8                	mov    eax,ebp
c002144a:	ee                   	out    dx,al
c002144b:	89 c8                	mov    eax,ecx
c002144d:	89 fa                	mov    edx,edi
c002144f:	ef                   	out    dx,eax
c0021450:	89 f2                	mov    edx,esi
c0021452:	ed                   	in     eax,dx
c0021453:	0f b6 c0             	movzx  eax,al
c0021456:	83 c4 10             	add    esp,0x10
c0021459:	39 e8                	cmp    eax,ebp
c002145b:	74 58                	je     c00214b5 <IDE::open(int, int, void*)+0x21f>
c002145d:	83 ec 0c             	sub    esp,0xc
c0021460:	68 cf e0 02 c0       	push   0xc002e0cf
c0021465:	eb 46                	jmp    c00214ad <IDE::open(int, int, void*)+0x217>
c0021467:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c0021470:	75 29                	jne    c002149b <IDE::open(int, int, void*)+0x205>
c0021472:	0f b6 83 1f 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11f]
c0021479:	3d 8a 00 00 00       	cmp    eax,0x8a
c002147e:	74 05                	je     c0021485 <IDE::open(int, int, void*)+0x1ef>
c0021480:	83 c0 80             	add    eax,0xffffff80
c0021483:	75 16                	jne    c002149b <IDE::open(int, int, void*)+0x205>
c0021485:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c002148c:	83 ec 0c             	sub    esp,0xc
c002148f:	68 df b9 02 c0       	push   0xc002b9df
c0021494:	e8 c8 c7 fe ff       	call   c000dc61 <KeSetBootMessage(char const*)>
c0021499:	eb 17                	jmp    c00214b2 <IDE::open(int, int, void*)+0x21c>
c002149b:	83 ec 0c             	sub    esp,0xc
c002149e:	68 d7 e0 02 c0       	push   0xc002e0d7
c00214a3:	eb 08                	jmp    c00214ad <IDE::open(int, int, void*)+0x217>
c00214a5:	83 ec 0c             	sub    esp,0xc
c00214a8:	68 08 e1 02 c0       	push   0xc002e108
c00214ad:	e8 ae f0 fe ff       	call   c0010560 <KePanic(char const*)>
c00214b2:	83 c4 10             	add    esp,0x10
c00214b5:	f6 83 1f 01 00 00 80 	test   BYTE PTR [ebx+0x11f],0x80
c00214bc:	0f 84 bf 00 00 00    	je     c0021581 <IDE::open(int, int, void*)+0x2eb>
c00214c2:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c00214c8:	83 ec 0c             	sub    esp,0xc
c00214cb:	83 e0 fc             	and    eax,0xfffffffc
c00214ce:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c00214d5:	83 c0 08             	add    eax,0x8
c00214d8:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c00214df:	68 32 e1 02 c0       	push   0xc002e132
c00214e4:	e8 7d 5a fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00214e9:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00214f0:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c00214f7:	50                   	push   eax
c00214f8:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c00214ff:	50                   	push   eax
c0021500:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c0021507:	50                   	push   eax
c0021508:	ff 35 a0 8d 03 c0    	push   DWORD PTR ds:0xc0038da0
c002150e:	e8 8d f0 ff ff       	call   c00205a0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021513:	83 c4 18             	add    esp,0x18
c0021516:	83 c8 07             	or     eax,0x7
c0021519:	0f b7 c0             	movzx  eax,ax
c002151c:	50                   	push   eax
c002151d:	6a 04                	push   0x4
c002151f:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c0021526:	50                   	push   eax
c0021527:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c002152e:	50                   	push   eax
c002152f:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c0021536:	50                   	push   eax
c0021537:	ff 35 a0 8d 03 c0    	push   DWORD PTR ds:0xc0038da0
c002153d:	e8 9a f2 ff ff       	call   c00207dc <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>
c0021542:	83 c4 20             	add    esp,0x20
c0021545:	eb 3a                	jmp    c0021581 <IDE::open(int, int, void*)+0x2eb>
c0021547:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c002154e:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c0021554:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c002155b:	05 06 02 00 00       	add    eax,0x206
c0021560:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0021567:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c002156e:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c0021575:	05 06 02 00 00       	add    eax,0x206
c002157a:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0021581:	83 ec 0c             	sub    esp,0xc
c0021584:	68 47 b0 02 c0       	push   0xc002b047
c0021589:	e8 d3 c6 fe ff       	call   c000dc61 <KeSetBootMessage(char const*)>
c002158e:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0021594:	83 c4 10             	add    esp,0x10
c0021597:	89 c2                	mov    edx,eax
c0021599:	83 e2 0f             	and    edx,0xf
c002159c:	83 fa 08             	cmp    edx,0x8
c002159f:	75 0a                	jne    c00215ab <IDE::open(int, int, void*)+0x315>
c00215a1:	83 e8 02             	sub    eax,0x2
c00215a4:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00215ab:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c00215b1:	89 c2                	mov    edx,eax
c00215b3:	83 e2 0f             	and    edx,0xf
c00215b6:	83 fa 08             	cmp    edx,0x8
c00215b9:	75 0a                	jne    c00215c5 <IDE::open(int, int, void*)+0x32f>
c00215bb:	83 e8 02             	sub    eax,0x2
c00215be:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c00215c5:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c00215cc:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c00215d3:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00215d6:	89 d0                	mov    eax,edx
c00215d8:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00215dc:	8d 7a 01             	lea    edi,[edx+0x1]
c00215df:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c00215e3:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c00215e7:	83 e1 3f             	and    ecx,0x3f
c00215ea:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c00215ee:	89 f9                	mov    ecx,edi
c00215f0:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c00215f7:	8d 78 02             	lea    edi,[eax+0x2]
c00215fa:	0f b6 c9             	movzx  ecx,cl
c00215fd:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0021600:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c0021604:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0021608:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c002160c:	83 e2 3f             	and    edx,0x3f
c002160f:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c0021613:	89 f9                	mov    ecx,edi
c0021615:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c002161b:	8d 78 03             	lea    edi,[eax+0x3]
c002161e:	0f b6 d1             	movzx  edx,cl
c0021621:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0021624:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c0021628:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c002162c:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c0021630:	83 e1 3f             	and    ecx,0x3f
c0021633:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c0021637:	89 fa                	mov    edx,edi
c0021639:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c002163f:	8d 78 04             	lea    edi,[eax+0x4]
c0021642:	0f b6 ca             	movzx  ecx,dl
c0021645:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0021648:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c002164c:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0021650:	89 fa                	mov    edx,edi
c0021652:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c0021658:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c002165c:	83 e2 3f             	and    edx,0x3f
c002165f:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c0021663:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c002166a:	66 85 f6             	test   si,si
c002166d:	74 24                	je     c0021693 <IDE::open(int, int, void*)+0x3fd>
c002166f:	89 f9                	mov    ecx,edi
c0021671:	83 c0 05             	add    eax,0x5
c0021674:	0f b6 d1             	movzx  edx,cl
c0021677:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c002167a:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c002167e:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c0021682:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0021688:	8a 44 93 07          	mov    al,BYTE PTR [ebx+edx*4+0x7]
c002168c:	83 e0 3f             	and    eax,0x3f
c002168f:	88 44 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],al
c0021693:	83 ec 0c             	sub    esp,0xc
c0021696:	68 90 a5 02 c0       	push   0xc002a590
c002169b:	e8 c1 c5 fe ff       	call   c000dc61 <KeSetBootMessage(char const*)>
c00216a0:	58                   	pop    eax
c00216a1:	5a                   	pop    edx
c00216a2:	6a 00                	push   0x0
c00216a4:	53                   	push   ebx
c00216a5:	e8 6c f9 ff ff       	call   c0021016 <IDE::prepareInterrupt(unsigned char)>
c00216aa:	59                   	pop    ecx
c00216ab:	5e                   	pop    esi
c00216ac:	6a 01                	push   0x1
c00216ae:	53                   	push   ebx
c00216af:	e8 62 f9 ff ff       	call   c0021016 <IDE::prepareInterrupt(unsigned char)>
c00216b4:	c7 04 24 dc c9 02 c0 	mov    DWORD PTR [esp],0xc002c9dc
c00216bb:	e8 a1 c5 fe ff       	call   c000dc61 <KeSetBootMessage(char const*)>
c00216c0:	83 c4 0c             	add    esp,0xc
c00216c3:	6a 00                	push   0x0
c00216c5:	6a 00                	push   0x0
c00216c7:	53                   	push   ebx
c00216c8:	e8 7f fb ff ff       	call   c002124c <IDE::enableIRQs(unsigned char, bool)>
c00216cd:	83 c4 0c             	add    esp,0xc
c00216d0:	6a 00                	push   0x0
c00216d2:	6a 01                	push   0x1
c00216d4:	53                   	push   ebx
c00216d5:	e8 72 fb ff ff       	call   c002124c <IDE::enableIRQs(unsigned char, bool)>
c00216da:	c7 04 24 4a e1 02 c0 	mov    DWORD PTR [esp],0xc002e14a
c00216e1:	e8 7b c5 fe ff       	call   c000dc61 <KeSetBootMessage(char const*)>
c00216e6:	83 c4 10             	add    esp,0x10
c00216e9:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c00216f0:	74 3c                	je     c002172e <IDE::open(int, int, void*)+0x498>
c00216f2:	83 ec 0c             	sub    esp,0xc
c00216f5:	53                   	push   ebx
c00216f6:	6a 01                	push   0x1
c00216f8:	68 13 12 02 c0       	push   0xc0021213
c00216fd:	6a 0e                	push   0xe
c00216ff:	53                   	push   ebx
c0021700:	e8 c5 8c fe ff       	call   c000a3ca <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0021705:	83 c4 14             	add    esp,0x14
c0021708:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c002170e:	53                   	push   ebx
c002170f:	6a 01                	push   0x1
c0021711:	68 2f 12 02 c0       	push   0xc002122f
c0021716:	6a 0f                	push   0xf
c0021718:	53                   	push   ebx
c0021719:	e8 ac 8c fe ff       	call   c000a3ca <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002171e:	83 c4 14             	add    esp,0x14
c0021721:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c0021727:	68 ae ac 02 c0       	push   0xc002acae
c002172c:	eb 40                	jmp    c002176e <IDE::open(int, int, void*)+0x4d8>
c002172e:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c0021738:	83 ec 0c             	sub    esp,0xc
c002173b:	53                   	push   ebx
c002173c:	6a 00                	push   0x0
c002173e:	68 13 12 02 c0       	push   0xc0021213
c0021743:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0021749:	53                   	push   ebx
c002174a:	e8 7b 8c fe ff       	call   c000a3ca <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002174f:	83 c4 14             	add    esp,0x14
c0021752:	53                   	push   ebx
c0021753:	6a 00                	push   0x0
c0021755:	68 2f 12 02 c0       	push   0xc002122f
c002175a:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c0021760:	53                   	push   ebx
c0021761:	e8 64 8c fe ff       	call   c000a3ca <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0021766:	83 c4 14             	add    esp,0x14
c0021769:	68 ce b9 02 c0       	push   0xc002b9ce
c002176e:	e8 ee c4 fe ff       	call   c000dc61 <KeSetBootMessage(char const*)>
c0021773:	83 c4 10             	add    esp,0x10
c0021776:	83 ec 0c             	sub    esp,0xc
c0021779:	68 4c e1 02 c0       	push   0xc002e14c
c002177e:	e8 de c4 fe ff       	call   c000dc61 <KeSetBootMessage(char const*)>
c0021783:	8b 03                	mov    eax,DWORD PTR [ebx]
c0021785:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0021788:	ff 50 18             	call   DWORD PTR [eax+0x18]
c002178b:	c7 04 24 51 be 02 c0 	mov    DWORD PTR [esp],0xc002be51
c0021792:	e8 ca c4 fe ff       	call   c000dc61 <KeSetBootMessage(char const*)>
c0021797:	83 c4 0c             	add    esp,0xc
c002179a:	6a 07                	push   0x7
c002179c:	6a 00                	push   0x0
c002179e:	53                   	push   ebx
c002179f:	e8 58 f9 ff ff       	call   c00210fc <IDE::read(unsigned char, unsigned char)>
c00217a4:	83 c4 0c             	add    esp,0xc
c00217a7:	6a 07                	push   0x7
c00217a9:	6a 01                	push   0x1
c00217ab:	53                   	push   ebx
c00217ac:	e8 4b f9 ff ff       	call   c00210fc <IDE::read(unsigned char, unsigned char)>
c00217b1:	c7 04 24 d8 b6 02 c0 	mov    DWORD PTR [esp],0xc002b6d8
c00217b8:	e8 a4 c4 fe ff       	call   c000dc61 <KeSetBootMessage(char const*)>
c00217bd:	83 c4 0c             	add    esp,0xc
c00217c0:	6a 01                	push   0x1
c00217c2:	6a 00                	push   0x0
c00217c4:	53                   	push   ebx
c00217c5:	e8 82 fa ff ff       	call   c002124c <IDE::enableIRQs(unsigned char, bool)>
c00217ca:	83 c4 0c             	add    esp,0xc
c00217cd:	6a 01                	push   0x1
c00217cf:	6a 01                	push   0x1
c00217d1:	53                   	push   ebx
c00217d2:	e8 75 fa ff ff       	call   c002124c <IDE::enableIRQs(unsigned char, bool)>
c00217d7:	c7 04 24 4f e1 02 c0 	mov    DWORD PTR [esp],0xc002e14f
c00217de:	e8 7e c4 fe ff       	call   c000dc61 <KeSetBootMessage(char const*)>
c00217e3:	83 c4 2c             	add    esp,0x2c
c00217e6:	31 c0                	xor    eax,eax
c00217e8:	5b                   	pop    ebx
c00217e9:	5e                   	pop    esi
c00217ea:	5f                   	pop    edi
c00217eb:	5d                   	pop    ebp
c00217ec:	c3                   	ret    
c00217ed:	90                   	nop

c00217ee <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c00217ee:	55                   	push   ebp
c00217ef:	57                   	push   edi
c00217f0:	56                   	push   esi
c00217f1:	53                   	push   ebx
c00217f2:	83 ec 1c             	sub    esp,0x1c
c00217f5:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00217f9:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00217fd:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0021801:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0021805:	8d 42 f8             	lea    eax,[edx-0x8]
c0021808:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c002180c:	3c 03                	cmp    al,0x3
c002180e:	77 5a                	ja     c002186a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x7c>
c0021810:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0021814:	0f b6 db             	movzx  ebx,bl
c0021817:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c002181b:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c002181e:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c0021823:	0c 80                	or     al,0x80
c0021825:	50                   	push   eax
c0021826:	6a 0c                	push   0xc
c0021828:	53                   	push   ebx
c0021829:	56                   	push   esi
c002182a:	e8 0d f8 ff ff       	call   c002103c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002182f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0021833:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c0021838:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002183c:	0f b6 d2             	movzx  edx,dl
c002183f:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c0021843:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0021845:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c002184a:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c002184e:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0021852:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c002185a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c002185e:	83 c4 2c             	add    esp,0x2c
c0021861:	5b                   	pop    ebx
c0021862:	5e                   	pop    esi
c0021863:	5f                   	pop    edi
c0021864:	5d                   	pop    ebp
c0021865:	e9 d2 f7 ff ff       	jmp    c002103c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002186a:	0f b6 c2             	movzx  eax,dl
c002186d:	83 f8 07             	cmp    eax,0x7
c0021870:	77 12                	ja     c0021884 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x96>
c0021872:	0f b6 db             	movzx  ebx,bl
c0021875:	0f b6 c2             	movzx  eax,dl
c0021878:	66 8b 94 de 5a 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15a]
c0021880:	01 c2                	add    edx,eax
c0021882:	eb 2f                	jmp    c00218b3 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c0021884:	83 f8 0d             	cmp    eax,0xd
c0021887:	77 13                	ja     c002189c <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xae>
c0021889:	0f b6 db             	movzx  ebx,bl
c002188c:	0f b6 d2             	movzx  edx,dl
c002188f:	8b 84 de 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*8+0x15c]
c0021896:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c002189a:	eb 17                	jmp    c00218b3 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c002189c:	83 f8 15             	cmp    eax,0x15
c002189f:	77 14                	ja     c00218b5 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc7>
c00218a1:	0f b6 db             	movzx  ebx,bl
c00218a4:	0f b6 d2             	movzx  edx,dl
c00218a7:	66 8b 84 de 5e 01 00 00 	mov    ax,WORD PTR [esi+ebx*8+0x15e]
c00218af:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c00218b3:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c00218b5:	83 c4 1c             	add    esp,0x1c
c00218b8:	5b                   	pop    ebx
c00218b9:	5e                   	pop    esi
c00218ba:	5f                   	pop    edi
c00218bb:	5d                   	pop    ebp
c00218bc:	c3                   	ret    
c00218bd:	90                   	nop

c00218be <IDE::detect()>:
c00218be:	55                   	push   ebp
c00218bf:	57                   	push   edi
c00218c0:	56                   	push   esi
c00218c1:	53                   	push   ebx
c00218c2:	81 ec 28 02 00 00    	sub    esp,0x228
c00218c8:	8b 9c 24 3c 02 00 00 	mov    ebx,DWORD PTR [esp+0x23c]
c00218cf:	68 51 e1 02 c0       	push   0xc002e151
c00218d4:	e8 88 c3 fe ff       	call   c000dc61 <KeSetBootMessage(char const*)>
c00218d9:	8a 83 58 01 00 00    	mov    al,BYTE PTR [ebx+0x158]
c00218df:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c00218e3:	83 c4 10             	add    esp,0x10
c00218e6:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c00218eb:	0f 85 26 04 00 00    	jne    c0021d17 <IDE::detect()+0x459>
c00218f1:	83 ec 0c             	sub    esp,0xc
c00218f4:	31 f6                	xor    esi,esi
c00218f6:	68 54 e1 02 c0       	push   0xc002e154
c00218fb:	31 ff                	xor    edi,edi
c00218fd:	e8 5f c3 fe ff       	call   c000dc61 <KeSetBootMessage(char const*)>
c0021902:	83 c4 10             	add    esp,0x10
c0021905:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c002190c:	83 ec 0c             	sub    esp,0xc
c002190f:	68 57 e1 02 c0       	push   0xc002e157
c0021914:	e8 48 c3 fe ff       	call   c000dc61 <KeSetBootMessage(char const*)>
c0021919:	83 c4 10             	add    esp,0x10
c002191c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0021923:	83 ec 0c             	sub    esp,0xc
c0021926:	31 ed                	xor    ebp,ebp
c0021928:	68 5a e1 02 c0       	push   0xc002e15a
c002192d:	e8 2f c3 fe ff       	call   c000dc61 <KeSetBootMessage(char const*)>
c0021932:	89 f8                	mov    eax,edi
c0021934:	c1 e0 06             	shl    eax,0x6
c0021937:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c002193f:	c7 04 24 5d e1 02 c0 	mov    DWORD PTR [esp],0xc002e15d
c0021946:	e8 16 c3 fe ff       	call   c000dc61 <KeSetBootMessage(char const*)>
c002194b:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c002194f:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0021953:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021957:	c1 e0 04             	shl    eax,0x4
c002195a:	83 c8 a0             	or     eax,0xffffffa0
c002195d:	0f b6 c0             	movzx  eax,al
c0021960:	50                   	push   eax
c0021961:	6a 06                	push   0x6
c0021963:	56                   	push   esi
c0021964:	53                   	push   ebx
c0021965:	e8 d2 f6 ff ff       	call   c002103c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002196a:	83 c4 1c             	add    esp,0x1c
c002196d:	6a 0c                	push   0xc
c002196f:	56                   	push   esi
c0021970:	53                   	push   ebx
c0021971:	e8 86 f7 ff ff       	call   c00210fc <IDE::read(unsigned char, unsigned char)>
c0021976:	83 c4 0c             	add    esp,0xc
c0021979:	6a 0c                	push   0xc
c002197b:	56                   	push   esi
c002197c:	53                   	push   ebx
c002197d:	e8 7a f7 ff ff       	call   c00210fc <IDE::read(unsigned char, unsigned char)>
c0021982:	83 c4 0c             	add    esp,0xc
c0021985:	6a 0c                	push   0xc
c0021987:	56                   	push   esi
c0021988:	53                   	push   ebx
c0021989:	e8 6e f7 ff ff       	call   c00210fc <IDE::read(unsigned char, unsigned char)>
c002198e:	83 c4 0c             	add    esp,0xc
c0021991:	6a 0c                	push   0xc
c0021993:	56                   	push   esi
c0021994:	53                   	push   ebx
c0021995:	e8 62 f7 ff ff       	call   c00210fc <IDE::read(unsigned char, unsigned char)>
c002199a:	c7 04 24 60 e1 02 c0 	mov    DWORD PTR [esp],0xc002e160
c00219a1:	e8 bb c2 fe ff       	call   c000dc61 <KeSetBootMessage(char const*)>
c00219a6:	68 ec 00 00 00       	push   0xec
c00219ab:	6a 07                	push   0x7
c00219ad:	56                   	push   esi
c00219ae:	53                   	push   ebx
c00219af:	e8 88 f6 ff ff       	call   c002103c <IDE::write(unsigned char, unsigned char, unsigned char)>
c00219b4:	83 c4 1c             	add    esp,0x1c
c00219b7:	6a 0c                	push   0xc
c00219b9:	56                   	push   esi
c00219ba:	53                   	push   ebx
c00219bb:	e8 3c f7 ff ff       	call   c00210fc <IDE::read(unsigned char, unsigned char)>
c00219c0:	83 c4 0c             	add    esp,0xc
c00219c3:	6a 0c                	push   0xc
c00219c5:	56                   	push   esi
c00219c6:	53                   	push   ebx
c00219c7:	e8 30 f7 ff ff       	call   c00210fc <IDE::read(unsigned char, unsigned char)>
c00219cc:	83 c4 0c             	add    esp,0xc
c00219cf:	6a 0c                	push   0xc
c00219d1:	56                   	push   esi
c00219d2:	53                   	push   ebx
c00219d3:	e8 24 f7 ff ff       	call   c00210fc <IDE::read(unsigned char, unsigned char)>
c00219d8:	83 c4 0c             	add    esp,0xc
c00219db:	6a 0c                	push   0xc
c00219dd:	56                   	push   esi
c00219de:	53                   	push   ebx
c00219df:	e8 18 f7 ff ff       	call   c00210fc <IDE::read(unsigned char, unsigned char)>
c00219e4:	c7 04 24 63 e1 02 c0 	mov    DWORD PTR [esp],0xc002e163
c00219eb:	e8 71 c2 fe ff       	call   c000dc61 <KeSetBootMessage(char const*)>
c00219f0:	83 c4 0c             	add    esp,0xc
c00219f3:	6a 0c                	push   0xc
c00219f5:	56                   	push   esi
c00219f6:	53                   	push   ebx
c00219f7:	e8 00 f7 ff ff       	call   c00210fc <IDE::read(unsigned char, unsigned char)>
c00219fc:	83 c4 10             	add    esp,0x10
c00219ff:	84 c0                	test   al,al
c0021a01:	75 1f                	jne    c0021a22 <IDE::detect()+0x164>
c0021a03:	83 ec 0c             	sub    esp,0xc
c0021a06:	68 66 e1 02 c0       	push   0xc002e166
c0021a0b:	e8 51 c2 fe ff       	call   c000dc61 <KeSetBootMessage(char const*)>
c0021a10:	e9 e0 02 00 00       	jmp    c0021cf5 <IDE::detect()+0x437>
c0021a15:	a8 80                	test   al,0x80
c0021a17:	74 21                	je     c0021a3a <IDE::detect()+0x17c>
c0021a19:	45                   	inc    ebp
c0021a1a:	81 fd 17 01 00 00    	cmp    ebp,0x117
c0021a20:	7f 1e                	jg     c0021a40 <IDE::detect()+0x182>
c0021a22:	50                   	push   eax
c0021a23:	6a 0c                	push   0xc
c0021a25:	56                   	push   esi
c0021a26:	53                   	push   ebx
c0021a27:	e8 d0 f6 ff ff       	call   c00210fc <IDE::read(unsigned char, unsigned char)>
c0021a2c:	83 c4 10             	add    esp,0x10
c0021a2f:	a8 01                	test   al,0x1
c0021a31:	74 e2                	je     c0021a15 <IDE::detect()+0x157>
c0021a33:	c6 44 24 06 01       	mov    BYTE PTR [esp+0x6],0x1
c0021a38:	eb 23                	jmp    c0021a5d <IDE::detect()+0x19f>
c0021a3a:	a8 08                	test   al,0x8
c0021a3c:	74 db                	je     c0021a19 <IDE::detect()+0x15b>
c0021a3e:	eb 18                	jmp    c0021a58 <IDE::detect()+0x19a>
c0021a40:	50                   	push   eax
c0021a41:	50                   	push   eax
c0021a42:	6a 00                	push   0x0
c0021a44:	6a 32                	push   0x32
c0021a46:	e8 91 58 ff ff       	call   c00172dc <milliTenthSleep(unsigned long long)>
c0021a4b:	83 c4 10             	add    esp,0x10
c0021a4e:	81 fd 2c 01 00 00    	cmp    ebp,0x12c
c0021a54:	75 cc                	jne    c0021a22 <IDE::detect()+0x164>
c0021a56:	eb db                	jmp    c0021a33 <IDE::detect()+0x175>
c0021a58:	c6 44 24 06 00       	mov    BYTE PTR [esp+0x6],0x0
c0021a5d:	83 ec 0c             	sub    esp,0xc
c0021a60:	68 69 e1 02 c0       	push   0xc002e169
c0021a65:	e8 f7 c1 fe ff       	call   c000dc61 <KeSetBootMessage(char const*)>
c0021a6a:	83 c4 10             	add    esp,0x10
c0021a6d:	f6 44 24 06 01       	test   BYTE PTR [esp+0x6],0x1
c0021a72:	74 56                	je     c0021aca <IDE::detect()+0x20c>
c0021a74:	51                   	push   ecx
c0021a75:	6a 04                	push   0x4
c0021a77:	56                   	push   esi
c0021a78:	53                   	push   ebx
c0021a79:	e8 7e f6 ff ff       	call   c00210fc <IDE::read(unsigned char, unsigned char)>
c0021a7e:	83 c4 0c             	add    esp,0xc
c0021a81:	6a 05                	push   0x5
c0021a83:	56                   	push   esi
c0021a84:	53                   	push   ebx
c0021a85:	89 c5                	mov    ebp,eax
c0021a87:	e8 70 f6 ff ff       	call   c00210fc <IDE::read(unsigned char, unsigned char)>
c0021a8c:	89 e9                	mov    ecx,ebp
c0021a8e:	83 c4 10             	add    esp,0x10
c0021a91:	0f b6 e9             	movzx  ebp,cl
c0021a94:	83 fd 14             	cmp    ebp,0x14
c0021a97:	75 04                	jne    c0021a9d <IDE::detect()+0x1df>
c0021a99:	3c eb                	cmp    al,0xeb
c0021a9b:	74 11                	je     c0021aae <IDE::detect()+0x1f0>
c0021a9d:	83 fd 69             	cmp    ebp,0x69
c0021aa0:	0f 85 52 02 00 00    	jne    c0021cf8 <IDE::detect()+0x43a>
c0021aa6:	3c 96                	cmp    al,0x96
c0021aa8:	0f 85 4a 02 00 00    	jne    c0021cf8 <IDE::detect()+0x43a>
c0021aae:	68 a1 00 00 00       	push   0xa1
c0021ab3:	6a 07                	push   0x7
c0021ab5:	56                   	push   esi
c0021ab6:	53                   	push   ebx
c0021ab7:	e8 80 f5 ff ff       	call   c002103c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021abc:	58                   	pop    eax
c0021abd:	5a                   	pop    edx
c0021abe:	6a 00                	push   0x0
c0021ac0:	6a 0a                	push   0xa
c0021ac2:	e8 15 58 ff ff       	call   c00172dc <milliTenthSleep(unsigned long long)>
c0021ac7:	83 c4 10             	add    esp,0x10
c0021aca:	83 ec 0c             	sub    esp,0xc
c0021acd:	89 fd                	mov    ebp,edi
c0021acf:	68 6c e1 02 c0       	push   0xc002e16c
c0021ad4:	e8 88 c1 fe ff       	call   c000dc61 <KeSetBootMessage(char const*)>
c0021ad9:	8d 54 24 20          	lea    edx,[esp+0x20]
c0021add:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0021ae4:	c1 e5 06             	shl    ebp,0x6
c0021ae7:	52                   	push   edx
c0021ae8:	01 dd                	add    ebp,ebx
c0021aea:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0021aee:	6a 00                	push   0x0
c0021af0:	56                   	push   esi
c0021af1:	53                   	push   ebx
c0021af2:	e8 f7 fc ff ff       	call   c00217ee <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c0021af7:	83 c4 14             	add    esp,0x14
c0021afa:	68 70 e1 02 c0       	push   0xc002e170
c0021aff:	e8 5d c1 fe ff       	call   c000dc61 <KeSetBootMessage(char const*)>
c0021b04:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c0021b09:	c6 85 6c 01 00 00 01 	mov    BYTE PTR [ebp+0x16c],0x1
c0021b10:	66 89 85 70 01 00 00 	mov    WORD PTR [ebp+0x170],ax
c0021b17:	89 f0                	mov    eax,esi
c0021b19:	88 85 6d 01 00 00    	mov    BYTE PTR [ebp+0x16d],al
c0021b1f:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0021b23:	88 85 6e 01 00 00    	mov    BYTE PTR [ebp+0x16e],al
c0021b29:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021b2d:	66 89 85 72 01 00 00 	mov    WORD PTR [ebp+0x172],ax
c0021b34:	66 8b 84 24 82 00 00 00 	mov    ax,WORD PTR [esp+0x82]
c0021b3c:	66 89 85 74 01 00 00 	mov    WORD PTR [ebp+0x174],ax
c0021b43:	0f b6 84 24 c4 00 00 00 	movzx  eax,BYTE PTR [esp+0xc4]
c0021b4b:	89 85 78 01 00 00    	mov    DWORD PTR [ebp+0x178],eax
c0021b51:	c7 04 24 74 e1 02 c0 	mov    DWORD PTR [esp],0xc002e174
c0021b58:	e8 04 c1 fe ff       	call   c000dc61 <KeSetBootMessage(char const*)>
c0021b5d:	83 c4 10             	add    esp,0x10
c0021b60:	f6 85 7b 01 00 00 04 	test   BYTE PTR [ebp+0x17b],0x4
c0021b67:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021b6b:	74 09                	je     c0021b76 <IDE::detect()+0x2b8>
c0021b6d:	8b 8c 24 d8 00 00 00 	mov    ecx,DWORD PTR [esp+0xd8]
c0021b74:	eb 07                	jmp    c0021b7d <IDE::detect()+0x2bf>
c0021b76:	8b 8c 24 88 00 00 00 	mov    ecx,DWORD PTR [esp+0x88]
c0021b7d:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0021b81:	89 f8                	mov    eax,edi
c0021b83:	83 ec 0c             	sub    esp,0xc
c0021b86:	c1 e0 06             	shl    eax,0x6
c0021b89:	8d 2c 03             	lea    ebp,[ebx+eax*1]
c0021b8c:	89 8d 7c 01 00 00    	mov    DWORD PTR [ebp+0x17c],ecx
c0021b92:	68 78 e1 02 c0       	push   0xc002e178
c0021b97:	e8 c5 c0 fe ff       	call   c000dc61 <KeSetBootMessage(char const*)>
c0021b9c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0021ba0:	89 e8                	mov    eax,ebp
c0021ba2:	83 c4 10             	add    esp,0x10
c0021ba5:	8d 6a 28             	lea    ebp,[edx+0x28]
c0021ba8:	8a 4a 37             	mov    cl,BYTE PTR [edx+0x37]
c0021bab:	83 c2 02             	add    edx,0x2
c0021bae:	83 c0 02             	add    eax,0x2
c0021bb1:	88 88 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],cl
c0021bb7:	8a 4a 34             	mov    cl,BYTE PTR [edx+0x34]
c0021bba:	88 88 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],cl
c0021bc0:	39 d5                	cmp    ebp,edx
c0021bc2:	75 e4                	jne    c0021ba8 <IDE::detect()+0x2ea>
c0021bc4:	89 f8                	mov    eax,edi
c0021bc6:	c1 e0 06             	shl    eax,0x6
c0021bc9:	01 d8                	add    eax,ebx
c0021bcb:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c0021bd2:	0f b7 90 74 01 00 00 	movzx  edx,WORD PTR [eax+0x174]
c0021bd9:	c1 ea 09             	shr    edx,0x9
c0021bdc:	83 e2 01             	and    edx,0x1
c0021bdf:	f6 80 75 01 00 00 01 	test   BYTE PTR [eax+0x175],0x1
c0021be6:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c0021bec:	8a 54 24 07          	mov    dl,BYTE PTR [esp+0x7]
c0021bf0:	74 0c                	je     c0021bfe <IDE::detect()+0x340>
c0021bf2:	66 83 bc f3 5e 01 00 00 00 	cmp    WORD PTR [ebx+esi*8+0x15e],0x0
c0021bfb:	0f 95 c2             	setne  dl
c0021bfe:	89 fd                	mov    ebp,edi
c0021c00:	83 ec 0c             	sub    esp,0xc
c0021c03:	c1 e5 06             	shl    ebp,0x6
c0021c06:	01 dd                	add    ebp,ebx
c0021c08:	88 95 ab 01 00 00    	mov    BYTE PTR [ebp+0x1ab],dl
c0021c0e:	68 7c e1 02 c0       	push   0xc002e17c
c0021c13:	e8 49 c0 fe ff       	call   c000dc61 <KeSetBootMessage(char const*)>
c0021c18:	83 c4 10             	add    esp,0x10
c0021c1b:	f6 44 24 06 01       	test   BYTE PTR [esp+0x6],0x1
c0021c20:	75 66                	jne    c0021c88 <IDE::detect()+0x3ca>
c0021c22:	83 bd 7c 01 00 00 00 	cmp    DWORD PTR [ebp+0x17c],0x0
c0021c29:	0f 84 b8 00 00 00    	je     c0021ce7 <IDE::detect()+0x429>
c0021c2f:	83 ec 0c             	sub    esp,0xc
c0021c32:	68 80 e1 02 c0       	push   0xc002e180
c0021c37:	e8 25 c0 fe ff       	call   c000dc61 <KeSetBootMessage(char const*)>
c0021c3c:	c7 04 24 8c 01 00 00 	mov    DWORD PTR [esp],0x18c
c0021c43:	e8 c4 e4 fe ff       	call   c001010c <malloc>
c0021c48:	89 04 24             	mov    DWORD PTR [esp],eax
c0021c4b:	89 c5                	mov    ebp,eax
c0021c4d:	e8 44 05 00 00       	call   c0022196 <ATA::ATA()>
c0021c52:	c7 04 24 84 e1 02 c0 	mov    DWORD PTR [esp],0xc002e184
c0021c59:	e8 03 c0 fe ff       	call   c000dc61 <KeSetBootMessage(char const*)>
c0021c5e:	59                   	pop    ecx
c0021c5f:	58                   	pop    eax
c0021c60:	55                   	push   ebp
c0021c61:	53                   	push   ebx
c0021c62:	e8 b7 87 fe ff       	call   c000a41e <Device::addChild(Device*)>
c0021c67:	c7 04 24 89 e1 02 c0 	mov    DWORD PTR [esp],0xc002e189
c0021c6e:	e8 ee bf fe ff       	call   c000dc61 <KeSetBootMessage(char const*)>
c0021c73:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0021c76:	53                   	push   ebx
c0021c77:	57                   	push   edi
c0021c78:	6a 00                	push   0x0
c0021c7a:	55                   	push   ebp
c0021c7b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0021c7e:	83 c4 14             	add    esp,0x14
c0021c81:	68 8e e1 02 c0       	push   0xc002e18e
c0021c86:	eb 57                	jmp    c0021cdf <IDE::detect()+0x421>
c0021c88:	83 ec 0c             	sub    esp,0xc
c0021c8b:	68 93 e1 02 c0       	push   0xc002e193
c0021c90:	e8 cc bf fe ff       	call   c000dc61 <KeSetBootMessage(char const*)>
c0021c95:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c0021c9c:	e8 6b e4 fe ff       	call   c001010c <malloc>
c0021ca1:	89 04 24             	mov    DWORD PTR [esp],eax
c0021ca4:	89 c5                	mov    ebp,eax
c0021ca6:	e8 b1 0c 00 00       	call   c002295c <ATAPI::ATAPI()>
c0021cab:	c7 04 24 99 e1 02 c0 	mov    DWORD PTR [esp],0xc002e199
c0021cb2:	e8 aa bf fe ff       	call   c000dc61 <KeSetBootMessage(char const*)>
c0021cb7:	58                   	pop    eax
c0021cb8:	5a                   	pop    edx
c0021cb9:	55                   	push   ebp
c0021cba:	53                   	push   ebx
c0021cbb:	e8 5e 87 fe ff       	call   c000a41e <Device::addChild(Device*)>
c0021cc0:	c7 04 24 a0 e1 02 c0 	mov    DWORD PTR [esp],0xc002e1a0
c0021cc7:	e8 95 bf fe ff       	call   c000dc61 <KeSetBootMessage(char const*)>
c0021ccc:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0021ccf:	53                   	push   ebx
c0021cd0:	57                   	push   edi
c0021cd1:	6a 00                	push   0x0
c0021cd3:	55                   	push   ebp
c0021cd4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0021cd7:	83 c4 14             	add    esp,0x14
c0021cda:	68 a7 e1 02 c0       	push   0xc002e1a7
c0021cdf:	e8 7d bf fe ff       	call   c000dc61 <KeSetBootMessage(char const*)>
c0021ce4:	83 c4 10             	add    esp,0x10
c0021ce7:	83 ec 0c             	sub    esp,0xc
c0021cea:	47                   	inc    edi
c0021ceb:	68 ae e1 02 c0       	push   0xc002e1ae
c0021cf0:	e8 6c bf fe ff       	call   c000dc61 <KeSetBootMessage(char const*)>
c0021cf5:	83 c4 10             	add    esp,0x10
c0021cf8:	83 3c 24 01          	cmp    DWORD PTR [esp],0x1
c0021cfc:	74 0c                	je     c0021d0a <IDE::detect()+0x44c>
c0021cfe:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0021d05:	e9 19 fc ff ff       	jmp    c0021923 <IDE::detect()+0x65>
c0021d0a:	4e                   	dec    esi
c0021d0b:	74 0a                	je     c0021d17 <IDE::detect()+0x459>
c0021d0d:	be 01 00 00 00       	mov    esi,0x1
c0021d12:	e9 f5 fb ff ff       	jmp    c002190c <IDE::detect()+0x4e>
c0021d17:	81 c4 1c 02 00 00    	add    esp,0x21c
c0021d1d:	5b                   	pop    ebx
c0021d1e:	5e                   	pop    esi
c0021d1f:	5f                   	pop    edi
c0021d20:	5d                   	pop    ebp
c0021d21:	c3                   	ret    

c0021d22 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c0021d22:	55                   	push   ebp
c0021d23:	57                   	push   edi
c0021d24:	56                   	push   esi
c0021d25:	53                   	push   ebx
c0021d26:	83 ec 1c             	sub    esp,0x1c
c0021d29:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0021d2d:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0021d31:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0021d35:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021d39:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0021d3d:	88 c3                	mov    bl,al
c0021d3f:	25 ff 00 00 00       	and    eax,0xff
c0021d44:	0f 84 88 00 00 00    	je     c0021dd2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c0021d4a:	83 ec 0c             	sub    esp,0xc
c0021d4d:	89 c7                	mov    edi,eax
c0021d4f:	68 b2 e1 02 c0       	push   0xc002e1b2
c0021d54:	e8 0d 52 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0021d59:	83 c4 10             	add    esp,0x10
c0021d5c:	83 ff 01             	cmp    edi,0x1
c0021d5f:	74 6b                	je     c0021dcc <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaa>
c0021d61:	83 ff 02             	cmp    edi,0x2
c0021d64:	75 58                	jne    c0021dbe <IDE::printError(unsigned char, unsigned char, unsigned char)+0x9c>
c0021d66:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c0021d6b:	50                   	push   eax
c0021d6c:	6a 01                	push   0x1
c0021d6e:	01 ff                	add    edi,edi
c0021d70:	09 fe                	or     esi,edi
c0021d72:	89 f0                	mov    eax,esi
c0021d74:	0f b6 f0             	movzx  esi,al
c0021d77:	c1 e6 06             	shl    esi,0x6
c0021d7a:	0f b6 84 35 6d 01 00 00 	movzx  eax,BYTE PTR [ebp+esi*1+0x16d]
c0021d82:	50                   	push   eax
c0021d83:	55                   	push   ebp
c0021d84:	e8 73 f3 ff ff       	call   c00210fc <IDE::read(unsigned char, unsigned char)>
c0021d89:	83 c4 10             	add    esp,0x10
c0021d8c:	a8 01                	test   al,0x1
c0021d8e:	74 02                	je     c0021d92 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x70>
c0021d90:	b3 07                	mov    bl,0x7
c0021d92:	a8 02                	test   al,0x2
c0021d94:	74 02                	je     c0021d98 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x76>
c0021d96:	b3 03                	mov    bl,0x3
c0021d98:	a8 04                	test   al,0x4
c0021d9a:	74 02                	je     c0021d9e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7c>
c0021d9c:	b3 14                	mov    bl,0x14
c0021d9e:	a8 08                	test   al,0x8
c0021da0:	74 02                	je     c0021da4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x82>
c0021da2:	b3 03                	mov    bl,0x3
c0021da4:	a8 10                	test   al,0x10
c0021da6:	74 02                	je     c0021daa <IDE::printError(unsigned char, unsigned char, unsigned char)+0x88>
c0021da8:	b3 15                	mov    bl,0x15
c0021daa:	a8 20                	test   al,0x20
c0021dac:	74 02                	je     c0021db0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8e>
c0021dae:	b3 03                	mov    bl,0x3
c0021db0:	a8 40                	test   al,0x40
c0021db2:	74 02                	je     c0021db6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c0021db4:	b3 16                	mov    bl,0x16
c0021db6:	a8 80                	test   al,0x80
c0021db8:	74 18                	je     c0021dd2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c0021dba:	b3 0d                	mov    bl,0xd
c0021dbc:	eb 14                	jmp    c0021dd2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c0021dbe:	83 ff 03             	cmp    edi,0x3
c0021dc1:	74 0d                	je     c0021dd0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xae>
c0021dc3:	83 ff 04             	cmp    edi,0x4
c0021dc6:	75 0a                	jne    c0021dd2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c0021dc8:	b3 08                	mov    bl,0x8
c0021dca:	eb 06                	jmp    c0021dd2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c0021dcc:	b3 13                	mov    bl,0x13
c0021dce:	eb 02                	jmp    c0021dd2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c0021dd0:	b3 17                	mov    bl,0x17
c0021dd2:	83 c4 1c             	add    esp,0x1c
c0021dd5:	88 d8                	mov    al,bl
c0021dd7:	5b                   	pop    ebx
c0021dd8:	5e                   	pop    esi
c0021dd9:	5f                   	pop    edi
c0021dda:	5d                   	pop    ebp
c0021ddb:	c3                   	ret    

c0021ddc <IDE::polling(unsigned char, unsigned int)>:
c0021ddc:	57                   	push   edi
c0021ddd:	56                   	push   esi
c0021dde:	53                   	push   ebx
c0021ddf:	bb 04 00 00 00       	mov    ebx,0x4
c0021de4:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0021de8:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0021ded:	52                   	push   edx
c0021dee:	6a 0c                	push   0xc
c0021df0:	56                   	push   esi
c0021df1:	57                   	push   edi
c0021df2:	e8 05 f3 ff ff       	call   c00210fc <IDE::read(unsigned char, unsigned char)>
c0021df7:	83 c4 10             	add    esp,0x10
c0021dfa:	4b                   	dec    ebx
c0021dfb:	75 f0                	jne    c0021ded <IDE::polling(unsigned char, unsigned int)+0x11>
c0021dfd:	bb a0 86 01 00       	mov    ebx,0x186a0
c0021e02:	50                   	push   eax
c0021e03:	6a 0c                	push   0xc
c0021e05:	56                   	push   esi
c0021e06:	57                   	push   edi
c0021e07:	e8 f0 f2 ff ff       	call   c00210fc <IDE::read(unsigned char, unsigned char)>
c0021e0c:	83 c4 10             	add    esp,0x10
c0021e0f:	a8 01                	test   al,0x1
c0021e11:	75 17                	jne    c0021e2a <IDE::polling(unsigned char, unsigned int)+0x4e>
c0021e13:	a8 20                	test   al,0x20
c0021e15:	75 0f                	jne    c0021e26 <IDE::polling(unsigned char, unsigned int)+0x4a>
c0021e17:	4b                   	dec    ebx
c0021e18:	74 10                	je     c0021e2a <IDE::polling(unsigned char, unsigned int)+0x4e>
c0021e1a:	a8 80                	test   al,0x80
c0021e1c:	75 e4                	jne    c0021e02 <IDE::polling(unsigned char, unsigned int)+0x26>
c0021e1e:	a8 08                	test   al,0x8
c0021e20:	74 e0                	je     c0021e02 <IDE::polling(unsigned char, unsigned int)+0x26>
c0021e22:	31 c0                	xor    eax,eax
c0021e24:	eb 06                	jmp    c0021e2c <IDE::polling(unsigned char, unsigned int)+0x50>
c0021e26:	b0 01                	mov    al,0x1
c0021e28:	eb 02                	jmp    c0021e2c <IDE::polling(unsigned char, unsigned int)+0x50>
c0021e2a:	b0 02                	mov    al,0x2
c0021e2c:	5b                   	pop    ebx
c0021e2d:	5e                   	pop    esi
c0021e2e:	5f                   	pop    edi
c0021e2f:	c3                   	ret    

c0021e30 <SATABus::close(int, int, void*)>:
c0021e30:	31 c0                	xor    eax,eax
c0021e32:	c3                   	ret    
c0021e33:	90                   	nop

c0021e34 <SATABus::detect()>:
c0021e34:	c3                   	ret    
c0021e35:	90                   	nop

c0021e36 <SATABus::SATABus()>:
c0021e36:	83 ec 0c             	sub    esp,0xc
c0021e39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021e3d:	83 ec 08             	sub    esp,0x8
c0021e40:	68 ec e1 02 c0       	push   0xc002e1ec
c0021e45:	50                   	push   eax
c0021e46:	e8 2d 89 fe ff       	call   c000a778 <HardDiskController::HardDiskController(char const*)>
c0021e4b:	83 c4 10             	add    esp,0x10
c0021e4e:	ba 18 e2 02 c0       	mov    edx,0xc002e218
c0021e53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021e57:	89 10                	mov    DWORD PTR [eax],edx
c0021e59:	83 ec 0c             	sub    esp,0xc
c0021e5c:	6a 50                	push   0x50
c0021e5e:	e8 de e9 fe ff       	call   c0010841 <Phys::allocateContiguousPages(int)>
c0021e63:	83 c4 10             	add    esp,0x10
c0021e66:	89 c2                	mov    edx,eax
c0021e68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021e6c:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0021e72:	83 ec 0c             	sub    esp,0xc
c0021e75:	6a 50                	push   0x50
c0021e77:	e8 2b 1c ff ff       	call   c0013aa7 <Virt::allocateKernelVirtualPages(int)>
c0021e7c:	83 c4 10             	add    esp,0x10
c0021e7f:	89 c2                	mov    edx,eax
c0021e81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021e85:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0021e8b:	a1 90 62 03 c0       	mov    eax,ds:0xc0036290
c0021e90:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0021e94:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c0021e9a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0021e9e:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0021ea4:	83 ec 0c             	sub    esp,0xc
c0021ea7:	6a 03                	push   0x3
c0021ea9:	6a 50                	push   0x50
c0021eab:	51                   	push   ecx
c0021eac:	52                   	push   edx
c0021ead:	50                   	push   eax
c0021eae:	e8 c7 24 ff ff       	call   c001437a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0021eb3:	83 c4 20             	add    esp,0x20
c0021eb6:	90                   	nop
c0021eb7:	83 c4 0c             	add    esp,0xc
c0021eba:	c3                   	ret    
c0021ebb:	90                   	nop

c0021ebc <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c0021ebc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021ec0:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0021ec3:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0021ec6:	09 c2                	or     edx,eax
c0021ec8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021ecc:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0021ed2:	8b 08                	mov    ecx,DWORD PTR [eax]
c0021ed4:	31 c0                	xor    eax,eax
c0021ed6:	c1 e9 08             	shr    ecx,0x8
c0021ed9:	83 e1 0f             	and    ecx,0xf
c0021edc:	39 c8                	cmp    eax,ecx
c0021ede:	74 0a                	je     c0021eea <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c0021ee0:	f6 c2 01             	test   dl,0x1
c0021ee3:	74 08                	je     c0021eed <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c0021ee5:	d1 ea                	shr    edx,1
c0021ee7:	40                   	inc    eax
c0021ee8:	eb f2                	jmp    c0021edc <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c0021eea:	83 c8 ff             	or     eax,0xffffffff
c0021eed:	c3                   	ret    

c0021eee <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c0021eee:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0021ef2:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0021ef5:	89 c2                	mov    edx,eax
c0021ef7:	c1 ea 08             	shr    edx,0x8
c0021efa:	83 e2 0f             	and    edx,0xf
c0021efd:	4a                   	dec    edx
c0021efe:	75 32                	jne    c0021f32 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0021f00:	83 e0 0f             	and    eax,0xf
c0021f03:	83 f8 03             	cmp    eax,0x3
c0021f06:	75 2a                	jne    c0021f32 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0021f08:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c0021f0b:	b8 02 00 00 00       	mov    eax,0x2
c0021f10:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c0021f16:	74 1c                	je     c0021f34 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0021f18:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c0021f1e:	b8 04 00 00 00       	mov    eax,0x4
c0021f23:	74 0f                	je     c0021f34 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0021f25:	31 c0                	xor    eax,eax
c0021f27:	83 fa 03             	cmp    edx,0x3
c0021f2a:	0f 94 c0             	sete   al
c0021f2d:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c0021f31:	c3                   	ret    
c0021f32:	31 c0                	xor    eax,eax
c0021f34:	c3                   	ret    
c0021f35:	90                   	nop

c0021f36 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c0021f36:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021f3a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0021f3d:	0f ba e2 0f          	bt     edx,0xf
c0021f41:	72 f7                	jb     c0021f3a <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c0021f43:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0021f46:	83 ca 10             	or     edx,0x10
c0021f49:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0021f4c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0021f4f:	83 ca 01             	or     edx,0x1
c0021f52:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0021f55:	c3                   	ret    

c0021f56 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c0021f56:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021f5a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0021f5d:	83 e2 fe             	and    edx,0xfffffffe
c0021f60:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0021f63:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0021f66:	83 e2 ef             	and    edx,0xffffffef
c0021f69:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0021f6c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0021f6f:	0f ba e2 0e          	bt     edx,0xe
c0021f73:	72 f7                	jb     c0021f6c <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0021f75:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0021f78:	0f ba e2 0f          	bt     edx,0xf
c0021f7c:	72 ee                	jb     c0021f6c <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0021f7e:	c3                   	ret    
c0021f7f:	90                   	nop

c0021f80 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c0021f80:	55                   	push   ebp
c0021f81:	57                   	push   edi
c0021f82:	56                   	push   esi
c0021f83:	53                   	push   ebx
c0021f84:	83 ec 1c             	sub    esp,0x1c
c0021f87:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0021f8b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0021f8f:	53                   	push   ebx
c0021f90:	57                   	push   edi
c0021f91:	e8 c0 ff ff ff       	call   c0021f56 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0021f96:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0021f9a:	83 ec 0c             	sub    esp,0xc
c0021f9d:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c0021fa3:	c1 e5 0a             	shl    ebp,0xa
c0021fa6:	01 e8                	add    eax,ebp
c0021fa8:	89 03                	mov    DWORD PTR [ebx],eax
c0021faa:	8b 03                	mov    eax,DWORD PTR [ebx]
c0021fac:	68 00 04 00 00       	push   0x400
c0021fb1:	6a 00                	push   0x0
c0021fb3:	50                   	push   eax
c0021fb4:	e8 37 e5 fd ff       	call   c00004f0 <memset>
c0021fb9:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c0021fbf:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c0021fc3:	83 c4 1c             	add    esp,0x1c
c0021fc6:	01 e8                	add    eax,ebp
c0021fc8:	89 03                	mov    DWORD PTR [ebx],eax
c0021fca:	c1 e6 08             	shl    esi,0x8
c0021fcd:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021fd4:	81 c6 00 80 00 00    	add    esi,0x8000
c0021fda:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c0021fe0:	01 f0                	add    eax,esi
c0021fe2:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0021fe5:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0021fe8:	68 00 01 00 00       	push   0x100
c0021fed:	6a 00                	push   0x0
c0021fef:	50                   	push   eax
c0021ff0:	e8 fb e4 fd ff       	call   c00004f0 <memset>
c0021ff5:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c0021ffb:	31 d2                	xor    edx,edx
c0021ffd:	01 f0                	add    eax,esi
c0021fff:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0022002:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0022009:	8b b7 58 01 00 00    	mov    esi,DWORD PTR [edi+0x158]
c002200f:	01 ee                	add    esi,ebp
c0022011:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0022015:	83 c4 10             	add    esp,0x10
c0022018:	c1 e5 0d             	shl    ebp,0xd
c002201b:	81 c5 00 a0 00 00    	add    ebp,0xa000
c0022021:	66 c7 46 02 08 00    	mov    WORD PTR [esi+0x2],0x8
c0022027:	83 c6 20             	add    esi,0x20
c002202a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002202e:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c0022034:	01 e8                	add    eax,ebp
c0022036:	01 d0                	add    eax,edx
c0022038:	89 46 e8             	mov    DWORD PTR [esi-0x18],eax
c002203b:	52                   	push   edx
c002203c:	68 00 01 00 00       	push   0x100
c0022041:	6a 00                	push   0x0
c0022043:	50                   	push   eax
c0022044:	e8 a7 e4 fd ff       	call   c00004f0 <memset>
c0022049:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c002204f:	c7 46 ec 00 00 00 00 	mov    DWORD PTR [esi-0x14],0x0
c0022056:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002205a:	83 c4 10             	add    esp,0x10
c002205d:	01 e8                	add    eax,ebp
c002205f:	01 d0                	add    eax,edx
c0022061:	81 c2 00 01 00 00    	add    edx,0x100
c0022067:	89 46 e8             	mov    DWORD PTR [esi-0x18],eax
c002206a:	81 fa 00 20 00 00    	cmp    edx,0x2000
c0022070:	75 af                	jne    c0022021 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa1>
c0022072:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c0022079:	50                   	push   eax
c002207a:	50                   	push   eax
c002207b:	53                   	push   ebx
c002207c:	57                   	push   edi
c002207d:	e8 b4 fe ff ff       	call   c0021f36 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c0022082:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c0022089:	83 c4 2c             	add    esp,0x2c
c002208c:	5b                   	pop    ebx
c002208d:	5e                   	pop    esi
c002208e:	5f                   	pop    edi
c002208f:	5d                   	pop    ebp
c0022090:	c3                   	ret    
c0022091:	90                   	nop

c0022092 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c0022092:	55                   	push   ebp
c0022093:	57                   	push   edi
c0022094:	56                   	push   esi
c0022095:	53                   	push   ebx
c0022096:	31 db                	xor    ebx,ebx
c0022098:	83 ec 0c             	sub    esp,0xc
c002209b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002209f:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00220a3:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c00220a6:	f7 c7 01 00 00 00    	test   edi,0x1
c00220ac:	74 7a                	je     c0022128 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c00220ae:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00220b2:	89 d8                	mov    eax,ebx
c00220b4:	c1 e0 07             	shl    eax,0x7
c00220b7:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c00220be:	55                   	push   ebp
c00220bf:	56                   	push   esi
c00220c0:	e8 29 fe ff ff       	call   c0021eee <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c00220c5:	5a                   	pop    edx
c00220c6:	59                   	pop    ecx
c00220c7:	83 f8 01             	cmp    eax,0x1
c00220ca:	75 21                	jne    c00220ed <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c00220cc:	50                   	push   eax
c00220cd:	53                   	push   ebx
c00220ce:	55                   	push   ebp
c00220cf:	56                   	push   esi
c00220d0:	e8 ab fe ff ff       	call   c0021f80 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c00220d5:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c00220dc:	e8 2b e0 fe ff       	call   c001010c <malloc>
c00220e1:	89 04 24             	mov    DWORD PTR [esp],eax
c00220e4:	89 c5                	mov    ebp,eax
c00220e6:	e8 37 0f 00 00       	call   c0023022 <SATA::SATA()>
c00220eb:	eb 24                	jmp    c0022111 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c00220ed:	83 f8 04             	cmp    eax,0x4
c00220f0:	75 36                	jne    c0022128 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c00220f2:	51                   	push   ecx
c00220f3:	53                   	push   ebx
c00220f4:	55                   	push   ebp
c00220f5:	56                   	push   esi
c00220f6:	e8 85 fe ff ff       	call   c0021f80 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c00220fb:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c0022102:	e8 05 e0 fe ff       	call   c001010c <malloc>
c0022107:	89 04 24             	mov    DWORD PTR [esp],eax
c002210a:	89 c5                	mov    ebp,eax
c002210c:	e8 a7 12 00 00       	call   c00233b8 <SATAPI::SATAPI()>
c0022111:	58                   	pop    eax
c0022112:	5a                   	pop    edx
c0022113:	55                   	push   ebp
c0022114:	56                   	push   esi
c0022115:	e8 04 83 fe ff       	call   c000a41e <Device::addChild(Device*)>
c002211a:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c002211d:	56                   	push   esi
c002211e:	6a 00                	push   0x0
c0022120:	53                   	push   ebx
c0022121:	55                   	push   ebp
c0022122:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0022125:	83 c4 20             	add    esp,0x20
c0022128:	d1 ef                	shr    edi,1
c002212a:	43                   	inc    ebx
c002212b:	83 fb 20             	cmp    ebx,0x20
c002212e:	0f 85 72 ff ff ff    	jne    c00220a6 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c0022134:	83 c4 0c             	add    esp,0xc
c0022137:	5b                   	pop    ebx
c0022138:	5e                   	pop    esi
c0022139:	5f                   	pop    edi
c002213a:	5d                   	pop    ebp
c002213b:	c3                   	ret    

c002213c <SATABus::open(int, int, void*)>:
c002213c:	53                   	push   ebx
c002213d:	83 ec 08             	sub    esp,0x8
c0022140:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0022144:	8b 83 34 01 00 00    	mov    eax,DWORD PTR [ebx+0x134]
c002214a:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c0022150:	e8 97 4c ff ff       	call   c0016dec <KeDisablePreemption()>
c0022155:	52                   	push   edx
c0022156:	52                   	push   edx
c0022157:	ff b3 60 01 00 00    	push   DWORD PTR [ebx+0x160]
c002215d:	53                   	push   ebx
c002215e:	e8 2f ff ff ff       	call   c0022092 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c0022163:	e8 ac 4c ff ff       	call   c0016e14 <KeRestorePreemption()>
c0022168:	83 c4 18             	add    esp,0x18
c002216b:	31 c0                	xor    eax,eax
c002216d:	5b                   	pop    ebx
c002216e:	c3                   	ret    
c002216f:	90                   	nop

c0022170 <ATA::close(int, int, void*)>:
c0022170:	83 ec 0c             	sub    esp,0xc
c0022173:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022177:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002217d:	85 c0                	test   eax,eax
c002217f:	74 0c                	je     c002218d <ATA::close(int, int, void*)+0x1d>
c0022181:	8b 10                	mov    edx,DWORD PTR [eax]
c0022183:	83 ec 0c             	sub    esp,0xc
c0022186:	50                   	push   eax
c0022187:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002218a:	83 c4 10             	add    esp,0x10
c002218d:	31 c0                	xor    eax,eax
c002218f:	83 c4 0c             	add    esp,0xc
c0022192:	c3                   	ret    
c0022193:	90                   	nop

c0022194 <ATA::powerSaving(PowerSavingLevel)>:
c0022194:	c3                   	ret    
c0022195:	90                   	nop

c0022196 <ATA::ATA()>:
c0022196:	83 ec 0c             	sub    esp,0xc
c0022199:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002219d:	83 ec 04             	sub    esp,0x4
c00221a0:	68 00 02 00 00       	push   0x200
c00221a5:	68 99 e3 02 c0       	push   0xc002e399
c00221aa:	50                   	push   eax
c00221ab:	e8 52 86 fe ff       	call   c000a802 <PhysicalDisk::PhysicalDisk(char const*, int)>
c00221b0:	83 c4 10             	add    esp,0x10
c00221b3:	ba 00 e3 02 c0       	mov    edx,0xc002e300
c00221b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221bc:	89 10                	mov    DWORD PTR [eax],edx
c00221be:	90                   	nop
c00221bf:	83 c4 0c             	add    esp,0xc
c00221c2:	c3                   	ret    
c00221c3:	90                   	nop

c00221c4 <ATA::flush(bool)>:
c00221c4:	53                   	push   ebx
c00221c5:	83 ec 08             	sub    esp,0x8
c00221c8:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00221cd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00221d1:	83 f8 01             	cmp    eax,0x1
c00221d4:	19 c0                	sbb    eax,eax
c00221d6:	83 e0 fd             	and    eax,0xfffffffd
c00221d9:	05 ea 00 00 00       	add    eax,0xea
c00221de:	50                   	push   eax
c00221df:	6a 07                	push   0x7
c00221e1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00221e8:	50                   	push   eax
c00221e9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00221ef:	e8 48 ee ff ff       	call   c002103c <IDE::write(unsigned char, unsigned char, unsigned char)>
c00221f4:	83 c4 0c             	add    esp,0xc
c00221f7:	6a 00                	push   0x0
c00221f9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0022200:	50                   	push   eax
c0022201:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0022207:	e8 d0 fb ff ff       	call   c0021ddc <IDE::polling(unsigned char, unsigned int)>
c002220c:	83 c4 18             	add    esp,0x18
c002220f:	5b                   	pop    ebx
c0022210:	c3                   	ret    
c0022211:	90                   	nop

c0022212 <ATA::readyForCommand()>:
c0022212:	56                   	push   esi
c0022213:	53                   	push   ebx
c0022214:	31 db                	xor    ebx,ebx
c0022216:	50                   	push   eax
c0022217:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002221b:	50                   	push   eax
c002221c:	6a 0c                	push   0xc
c002221e:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0022225:	50                   	push   eax
c0022226:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c002222c:	e8 cb ee ff ff       	call   c00210fc <IDE::read(unsigned char, unsigned char)>
c0022231:	83 c4 10             	add    esp,0x10
c0022234:	a8 88                	test   al,0x88
c0022236:	74 20                	je     c0022258 <ATA::readyForCommand()+0x46>
c0022238:	43                   	inc    ebx
c0022239:	83 fb 63             	cmp    ebx,0x63
c002223c:	7e dd                	jle    c002221b <ATA::readyForCommand()+0x9>
c002223e:	51                   	push   ecx
c002223f:	51                   	push   ecx
c0022240:	6a 00                	push   0x0
c0022242:	6a 0a                	push   0xa
c0022244:	e8 93 50 ff ff       	call   c00172dc <milliTenthSleep(unsigned long long)>
c0022249:	83 c4 10             	add    esp,0x10
c002224c:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0022252:	75 c7                	jne    c002221b <ATA::readyForCommand()+0x9>
c0022254:	31 c0                	xor    eax,eax
c0022256:	eb 02                	jmp    c002225a <ATA::readyForCommand()+0x48>
c0022258:	b0 01                	mov    al,0x1
c002225a:	5a                   	pop    edx
c002225b:	5b                   	pop    ebx
c002225c:	5e                   	pop    esi
c002225d:	c3                   	ret    

c002225e <ATA::access(unsigned long long, int, void*, bool)>:
c002225e:	55                   	push   ebp
c002225f:	57                   	push   edi
c0022260:	56                   	push   esi
c0022261:	53                   	push   ebx
c0022262:	83 ec 2c             	sub    esp,0x2c
c0022265:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0022269:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c002226d:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0022271:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0022275:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0022279:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c002227d:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0022281:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0022287:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002228b:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0022291:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0022295:	c1 e0 06             	shl    eax,0x6
c0022298:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c00222a0:	74 5b                	je     c00222fd <ATA::access(unsigned long long, int, void*, bool)+0x9f>
c00222a2:	89 fa                	mov    edx,edi
c00222a4:	89 f0                	mov    eax,esi
c00222a6:	c1 ea 1c             	shr    edx,0x1c
c00222a9:	0f ac f8 1c          	shrd   eax,edi,0x1c
c00222ad:	89 d1                	mov    ecx,edx
c00222af:	09 c1                	or     ecx,eax
c00222b1:	74 25                	je     c00222d8 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c00222b3:	31 ed                	xor    ebp,ebp
c00222b5:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c00222bc:	89 fa                	mov    edx,edi
c00222be:	89 f0                	mov    eax,esi
c00222c0:	0f ad d0             	shrd   eax,edx,cl
c00222c3:	d3 ea                	shr    edx,cl
c00222c5:	f6 c1 20             	test   cl,0x20
c00222c8:	74 02                	je     c00222cc <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c00222ca:	89 d0                	mov    eax,edx
c00222cc:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c00222d0:	45                   	inc    ebp
c00222d1:	83 fd 06             	cmp    ebp,0x6
c00222d4:	75 df                	jne    c00222b5 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c00222d6:	eb 71                	jmp    c0022349 <ATA::access(unsigned long long, int, void*, bool)+0xeb>
c00222d8:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c00222dd:	89 f0                	mov    eax,esi
c00222df:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c00222e6:	0f ac f8 10          	shrd   eax,edi,0x10
c00222ea:	bf 01 00 00 00       	mov    edi,0x1
c00222ef:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c00222f3:	c1 ee 18             	shr    esi,0x18
c00222f6:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00222fb:	eb 53                	jmp    c0022350 <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c00222fd:	6a 00                	push   0x0
c00222ff:	6a 3f                	push   0x3f
c0022301:	57                   	push   edi
c0022302:	56                   	push   esi
c0022303:	e8 cc 20 00 00       	call   c00243d4 <__umoddi3>
c0022308:	83 c4 10             	add    esp,0x10
c002230b:	40                   	inc    eax
c002230c:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0022310:	6a 00                	push   0x0
c0022312:	68 f0 03 00 00       	push   0x3f0
c0022317:	57                   	push   edi
c0022318:	56                   	push   esi
c0022319:	e8 b6 1f 00 00       	call   c00242d4 <__udivdi3>
c002231e:	83 c4 10             	add    esp,0x10
c0022321:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c0022326:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c002232d:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0022332:	6a 00                	push   0x0
c0022334:	6a 3f                	push   0x3f
c0022336:	57                   	push   edi
c0022337:	31 ff                	xor    edi,edi
c0022339:	56                   	push   esi
c002233a:	e8 95 1f 00 00       	call   c00242d4 <__udivdi3>
c002233f:	83 c4 10             	add    esp,0x10
c0022342:	83 e0 0f             	and    eax,0xf
c0022345:	89 c6                	mov    esi,eax
c0022347:	eb 07                	jmp    c0022350 <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c0022349:	31 f6                	xor    esi,esi
c002234b:	bf 02 00 00 00       	mov    edi,0x2
c0022350:	55                   	push   ebp
c0022351:	6a 00                	push   0x0
c0022353:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002235a:	50                   	push   eax
c002235b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002235f:	e8 e8 ee ff ff       	call   c002124c <IDE::enableIRQs(unsigned char, bool)>
c0022364:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0022367:	e8 a6 fe ff ff       	call   c0022212 <ATA::readyForCommand()>
c002236c:	83 c4 10             	add    esp,0x10
c002236f:	84 c0                	test   al,al
c0022371:	75 0a                	jne    c002237d <ATA::access(unsigned long long, int, void*, bool)+0x11f>
c0022373:	be 01 00 00 00       	mov    esi,0x1
c0022378:	e9 df 02 00 00       	jmp    c002265c <ATA::access(unsigned long long, int, void*, bool)+0x3fe>
c002237d:	fa                   	cli    
c002237e:	ff 05 30 63 03 c0    	inc    DWORD PTR ds:0xc0036330
c0022384:	f7 c7 03 00 00 00    	test   edi,0x3
c002238a:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c0022390:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0022396:	75 0a                	jne    c00223a2 <ATA::access(unsigned long long, int, void*, bool)+0x144>
c0022398:	c1 e0 04             	shl    eax,0x4
c002239b:	09 c6                	or     esi,eax
c002239d:	83 ce a0             	or     esi,0xffffffa0
c00223a0:	eb 08                	jmp    c00223aa <ATA::access(unsigned long long, int, void*, bool)+0x14c>
c00223a2:	c1 e0 04             	shl    eax,0x4
c00223a5:	09 c6                	or     esi,eax
c00223a7:	83 ce e0             	or     esi,0xffffffe0
c00223aa:	89 f0                	mov    eax,esi
c00223ac:	0f b6 d2             	movzx  edx,dl
c00223af:	0f b6 f0             	movzx  esi,al
c00223b2:	56                   	push   esi
c00223b3:	6a 06                	push   0x6
c00223b5:	52                   	push   edx
c00223b6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00223bc:	e8 7b ec ff ff       	call   c002103c <IDE::write(unsigned char, unsigned char, unsigned char)>
c00223c1:	83 c4 10             	add    esp,0x10
c00223c4:	6a 00                	push   0x0
c00223c6:	6a 01                	push   0x1
c00223c8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00223cf:	50                   	push   eax
c00223d0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00223d6:	e8 61 ec ff ff       	call   c002103c <IDE::write(unsigned char, unsigned char, unsigned char)>
c00223db:	89 f8                	mov    eax,edi
c00223dd:	83 c4 10             	add    esp,0x10
c00223e0:	0f b6 f0             	movzx  esi,al
c00223e3:	83 fe 02             	cmp    esi,0x2
c00223e6:	75 6e                	jne    c0022456 <ATA::access(unsigned long long, int, void*, bool)+0x1f8>
c00223e8:	6a 00                	push   0x0
c00223ea:	6a 08                	push   0x8
c00223ec:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00223f3:	50                   	push   eax
c00223f4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00223fa:	e8 3d ec ff ff       	call   c002103c <IDE::write(unsigned char, unsigned char, unsigned char)>
c00223ff:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0022404:	50                   	push   eax
c0022405:	6a 09                	push   0x9
c0022407:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002240e:	50                   	push   eax
c002240f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0022415:	e8 22 ec ff ff       	call   c002103c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002241a:	83 c4 20             	add    esp,0x20
c002241d:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c0022422:	50                   	push   eax
c0022423:	6a 0a                	push   0xa
c0022425:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002242c:	50                   	push   eax
c002242d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0022433:	e8 04 ec ff ff       	call   c002103c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022438:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c002243d:	50                   	push   eax
c002243e:	6a 0b                	push   0xb
c0022440:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0022447:	50                   	push   eax
c0022448:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002244e:	e8 e9 eb ff ff       	call   c002103c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022453:	83 c4 20             	add    esp,0x20
c0022456:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c002245b:	50                   	push   eax
c002245c:	6a 02                	push   0x2
c002245e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0022465:	50                   	push   eax
c0022466:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002246c:	e8 cb eb ff ff       	call   c002103c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022471:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c0022476:	50                   	push   eax
c0022477:	6a 03                	push   0x3
c0022479:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0022480:	50                   	push   eax
c0022481:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0022487:	e8 b0 eb ff ff       	call   c002103c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002248c:	83 c4 20             	add    esp,0x20
c002248f:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0022494:	50                   	push   eax
c0022495:	6a 04                	push   0x4
c0022497:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002249e:	50                   	push   eax
c002249f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00224a5:	e8 92 eb ff ff       	call   c002103c <IDE::write(unsigned char, unsigned char, unsigned char)>
c00224aa:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00224af:	50                   	push   eax
c00224b0:	6a 05                	push   0x5
c00224b2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00224b9:	50                   	push   eax
c00224ba:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00224c0:	e8 77 eb ff ff       	call   c002103c <IDE::write(unsigned char, unsigned char, unsigned char)>
c00224c5:	83 c4 20             	add    esp,0x20
c00224c8:	83 fe 02             	cmp    esi,0x2
c00224cb:	0f 94 44 24 08       	sete   BYTE PTR [esp+0x8]
c00224d0:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c00224d5:	85 c9                	test   ecx,ecx
c00224d7:	74 07                	je     c00224e0 <ATA::access(unsigned long long, int, void*, bool)+0x282>
c00224d9:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c00224de:	75 45                	jne    c0022525 <ATA::access(unsigned long long, int, void*, bool)+0x2c7>
c00224e0:	89 f8                	mov    eax,edi
c00224e2:	0f b6 f8             	movzx  edi,al
c00224e5:	31 c0                	xor    eax,eax
c00224e7:	4f                   	dec    edi
c00224e8:	0f 94 c0             	sete   al
c00224eb:	89 c6                	mov    esi,eax
c00224ed:	75 0c                	jne    c00224fb <ATA::access(unsigned long long, int, void*, bool)+0x29d>
c00224ef:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c00224f4:	b8 30 00 00 00       	mov    eax,0x30
c00224f9:	75 2f                	jne    c002252a <ATA::access(unsigned long long, int, void*, bool)+0x2cc>
c00224fb:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00224ff:	83 f2 01             	xor    edx,0x1
c0022502:	85 c9                	test   ecx,ecx
c0022504:	74 09                	je     c002250f <ATA::access(unsigned long long, int, void*, bool)+0x2b1>
c0022506:	84 d2                	test   dl,dl
c0022508:	b8 24 00 00 00       	mov    eax,0x24
c002250d:	75 1b                	jne    c002252a <ATA::access(unsigned long long, int, void*, bool)+0x2cc>
c002250f:	85 f6                	test   esi,esi
c0022511:	0f 84 5c fe ff ff    	je     c0022373 <ATA::access(unsigned long long, int, void*, bool)+0x115>
c0022517:	84 d2                	test   dl,dl
c0022519:	b8 20 00 00 00       	mov    eax,0x20
c002251e:	75 0a                	jne    c002252a <ATA::access(unsigned long long, int, void*, bool)+0x2cc>
c0022520:	e9 4e fe ff ff       	jmp    c0022373 <ATA::access(unsigned long long, int, void*, bool)+0x115>
c0022525:	b8 34 00 00 00       	mov    eax,0x34
c002252a:	50                   	push   eax
c002252b:	6a 07                	push   0x7
c002252d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0022534:	50                   	push   eax
c0022535:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002253b:	e8 fc ea ff ff       	call   c002103c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022540:	f0 ff 0d 30 63 03 c0 	lock dec DWORD PTR ds:0xc0036330
c0022547:	83 c4 10             	add    esp,0x10
c002254a:	83 3d 30 63 03 c0 00 	cmp    DWORD PTR ds:0xc0036330,0x0
c0022551:	75 01                	jne    c0022554 <ATA::access(unsigned long long, int, void*, bool)+0x2f6>
c0022553:	fb                   	sti    
c0022554:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c0022558:	0f b6 6c 24 0e       	movzx  ebp,BYTE PTR [esp+0xe]
c002255d:	85 f6                	test   esi,esi
c002255f:	0f 84 dd 00 00 00    	je     c0022642 <ATA::access(unsigned long long, int, void*, bool)+0x3e4>
c0022565:	57                   	push   edi
c0022566:	6a 01                	push   0x1
c0022568:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002256f:	50                   	push   eax
c0022570:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0022576:	e8 61 f8 ff ff       	call   c0021ddc <IDE::polling(unsigned char, unsigned int)>
c002257b:	83 c4 10             	add    esp,0x10
c002257e:	0f b6 c0             	movzx  eax,al
c0022581:	85 c0                	test   eax,eax
c0022583:	74 23                	je     c00225a8 <ATA::access(unsigned long long, int, void*, bool)+0x34a>
c0022585:	50                   	push   eax
c0022586:	89 c6                	mov    esi,eax
c0022588:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c002258f:	50                   	push   eax
c0022590:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0022597:	50                   	push   eax
c0022598:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002259e:	e8 7f f7 ff ff       	call   c0021d22 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c00225a3:	e9 b1 00 00 00       	jmp    c0022659 <ATA::access(unsigned long long, int, void*, bool)+0x3fb>
c00225a8:	85 ed                	test   ebp,ebp
c00225aa:	74 49                	je     c00225f5 <ATA::access(unsigned long long, int, void*, bool)+0x397>
c00225ac:	fa                   	cli    
c00225ad:	ff 05 30 63 03 c0    	inc    DWORD PTR ds:0xc0036330
c00225b3:	31 ff                	xor    edi,edi
c00225b5:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00225b9:	66 8b 04 78          	mov    ax,WORD PTR [eax+edi*2]
c00225bd:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c00225c2:	51                   	push   ecx
c00225c3:	51                   	push   ecx
c00225c4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00225cb:	50                   	push   eax
c00225cc:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00225d2:	e8 53 ea ff ff       	call   c002102a <IDE::getBase(unsigned char)>
c00225d7:	89 c2                	mov    edx,eax
c00225d9:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c00225de:	66 ef                	out    dx,ax
c00225e0:	47                   	inc    edi
c00225e1:	83 c4 10             	add    esp,0x10
c00225e4:	81 ff 00 01 00 00    	cmp    edi,0x100
c00225ea:	75 c9                	jne    c00225b5 <ATA::access(unsigned long long, int, void*, bool)+0x357>
c00225ec:	f0 ff 0d 30 63 03 c0 	lock dec DWORD PTR ds:0xc0036330
c00225f3:	eb 35                	jmp    c002262a <ATA::access(unsigned long long, int, void*, bool)+0x3cc>
c00225f5:	fa                   	cli    
c00225f6:	52                   	push   edx
c00225f7:	52                   	push   edx
c00225f8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00225ff:	ff 05 30 63 03 c0    	inc    DWORD PTR ds:0xc0036330
c0022605:	50                   	push   eax
c0022606:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002260c:	e8 19 ea ff ff       	call   c002102a <IDE::getBase(unsigned char)>
c0022611:	b9 00 01 00 00       	mov    ecx,0x100
c0022616:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c002261a:	89 c2                	mov    edx,eax
c002261c:	fc                   	cld    
c002261d:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c0022620:	f0 ff 0d 30 63 03 c0 	lock dec DWORD PTR ds:0xc0036330
c0022627:	83 c4 10             	add    esp,0x10
c002262a:	83 3d 30 63 03 c0 00 	cmp    DWORD PTR ds:0xc0036330,0x0
c0022631:	75 01                	jne    c0022634 <ATA::access(unsigned long long, int, void*, bool)+0x3d6>
c0022633:	fb                   	sti    
c0022634:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c002263c:	4e                   	dec    esi
c002263d:	e9 1b ff ff ff       	jmp    c002255d <ATA::access(unsigned long long, int, void*, bool)+0x2ff>
c0022642:	31 f6                	xor    esi,esi
c0022644:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0022649:	74 11                	je     c002265c <ATA::access(unsigned long long, int, void*, bool)+0x3fe>
c002264b:	50                   	push   eax
c002264c:	50                   	push   eax
c002264d:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0022652:	50                   	push   eax
c0022653:	53                   	push   ebx
c0022654:	e8 6b fb ff ff       	call   c00221c4 <ATA::flush(bool)>
c0022659:	83 c4 10             	add    esp,0x10
c002265c:	83 c4 2c             	add    esp,0x2c
c002265f:	89 f0                	mov    eax,esi
c0022661:	5b                   	pop    ebx
c0022662:	5e                   	pop    esi
c0022663:	5f                   	pop    edi
c0022664:	5d                   	pop    ebp
c0022665:	c3                   	ret    

c0022666 <ATA::read(unsigned long long, int, void*)>:
c0022666:	57                   	push   edi
c0022667:	b8 04 00 00 00       	mov    eax,0x4
c002266c:	56                   	push   esi
c002266d:	53                   	push   ebx
c002266e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0022672:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0022676:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c002267a:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c002267e:	8d 7a ff             	lea    edi,[edx-0x1]
c0022681:	81 ff fe 00 00 00    	cmp    edi,0xfe
c0022687:	77 25                	ja     c00226ae <ATA::read(unsigned long long, int, void*)+0x48>
c0022689:	85 f6                	test   esi,esi
c002268b:	b8 06 00 00 00       	mov    eax,0x6
c0022690:	74 1c                	je     c00226ae <ATA::read(unsigned long long, int, void*)+0x48>
c0022692:	50                   	push   eax
c0022693:	50                   	push   eax
c0022694:	6a 00                	push   0x0
c0022696:	56                   	push   esi
c0022697:	52                   	push   edx
c0022698:	53                   	push   ebx
c0022699:	51                   	push   ecx
c002269a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002269e:	e8 bb fb ff ff       	call   c002225e <ATA::access(unsigned long long, int, void*, bool)>
c00226a3:	83 c4 20             	add    esp,0x20
c00226a6:	85 c0                	test   eax,eax
c00226a8:	0f 95 c0             	setne  al
c00226ab:	0f b6 c0             	movzx  eax,al
c00226ae:	5b                   	pop    ebx
c00226af:	5e                   	pop    esi
c00226b0:	5f                   	pop    edi
c00226b1:	c3                   	ret    

c00226b2 <ATA::write(unsigned long long, int, void*)>:
c00226b2:	57                   	push   edi
c00226b3:	b8 04 00 00 00       	mov    eax,0x4
c00226b8:	56                   	push   esi
c00226b9:	53                   	push   ebx
c00226ba:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00226be:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00226c2:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00226c6:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00226ca:	8d 7a ff             	lea    edi,[edx-0x1]
c00226cd:	81 ff fe 00 00 00    	cmp    edi,0xfe
c00226d3:	77 25                	ja     c00226fa <ATA::write(unsigned long long, int, void*)+0x48>
c00226d5:	85 f6                	test   esi,esi
c00226d7:	b8 06 00 00 00       	mov    eax,0x6
c00226dc:	74 1c                	je     c00226fa <ATA::write(unsigned long long, int, void*)+0x48>
c00226de:	50                   	push   eax
c00226df:	50                   	push   eax
c00226e0:	6a 01                	push   0x1
c00226e2:	56                   	push   esi
c00226e3:	52                   	push   edx
c00226e4:	53                   	push   ebx
c00226e5:	51                   	push   ecx
c00226e6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00226ea:	e8 6f fb ff ff       	call   c002225e <ATA::access(unsigned long long, int, void*, bool)>
c00226ef:	83 c4 20             	add    esp,0x20
c00226f2:	85 c0                	test   eax,eax
c00226f4:	0f 95 c0             	setne  al
c00226f7:	0f b6 c0             	movzx  eax,al
c00226fa:	5b                   	pop    ebx
c00226fb:	5e                   	pop    esi
c00226fc:	5f                   	pop    edi
c00226fd:	c3                   	ret    

c00226fe <ATA::detectCHS()>:
c00226fe:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0022702:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c0022708:	c1 e0 06             	shl    eax,0x6
c002270b:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c0022711:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c002271b:	c7 44 24 04 3c e2 02 c0 	mov    DWORD PTR [esp+0x4],0xc002e23c
c0022723:	e9 38 de fe ff       	jmp    c0010560 <KePanic(char const*)>

c0022728 <ATA::open(int, int, void*)>:
c0022728:	53                   	push   ebx
c0022729:	83 ec 08             	sub    esp,0x8
c002272c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0022730:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0022734:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0022738:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c002273e:	c1 e0 06             	shl    eax,0x6
c0022741:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0022747:	01 d0                	add    eax,edx
c0022749:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c0022750:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c0022756:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c002275d:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0022767:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c002276e:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c0022774:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c002277b:	75 0c                	jne    c0022789 <ATA::open(int, int, void*)+0x61>
c002277d:	83 ec 0c             	sub    esp,0xc
c0022780:	53                   	push   ebx
c0022781:	e8 78 ff ff ff       	call   c00226fe <ATA::detectCHS()>
c0022786:	83 c4 10             	add    esp,0x10
c0022789:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c002278f:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0022795:	c1 e0 06             	shl    eax,0x6
c0022798:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c002279f:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c00227a9:	d1 e8                	shr    eax,1
c00227ab:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c00227b1:	6a 04                	push   0x4
c00227b3:	6a 0c                	push   0xc
c00227b5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00227bc:	50                   	push   eax
c00227bd:	52                   	push   edx
c00227be:	e8 79 e8 ff ff       	call   c002103c <IDE::write(unsigned char, unsigned char, unsigned char)>
c00227c3:	90                   	nop
c00227c4:	90                   	nop
c00227c5:	6a 00                	push   0x0
c00227c7:	6a 0c                	push   0xc
c00227c9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00227d0:	50                   	push   eax
c00227d1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00227d7:	e8 60 e8 ff ff       	call   c002103c <IDE::write(unsigned char, unsigned char, unsigned char)>
c00227dc:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c00227e2:	83 c4 20             	add    esp,0x20
c00227e5:	c1 e0 06             	shl    eax,0x6
c00227e8:	03 83 6c 01 00 00    	add    eax,DWORD PTR [ebx+0x16c]
c00227ee:	80 b8 ab 01 00 00 00 	cmp    BYTE PTR [eax+0x1ab],0x0
c00227f5:	0f 84 00 01 00 00    	je     c00228fb <ATA::open(int, int, void*)+0x1d3>
c00227fb:	83 ec 0c             	sub    esp,0xc
c00227fe:	6a 08                	push   0x8
c0022800:	e8 3c e0 fe ff       	call   c0010841 <Phys::allocateContiguousPages(int)>
c0022805:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c002280b:	c7 04 24 4e e2 02 c0 	mov    DWORD PTR [esp],0xc002e24e
c0022812:	e8 4f 47 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0022817:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c002281e:	e8 84 12 ff ff       	call   c0013aa7 <Virt::allocateKernelVirtualPages(int)>
c0022823:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c0022829:	6a 03                	push   0x3
c002282b:	50                   	push   eax
c002282c:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c0022832:	ff 35 90 62 03 c0    	push   DWORD PTR ds:0xc0036290
c0022838:	e8 43 19 ff ff       	call   c0014180 <VAS::mapPage(unsigned long, unsigned long, int)>
c002283d:	83 c4 20             	add    esp,0x20
c0022840:	e8 15 df fe ff       	call   c001075a <Phys::allocatePage()>
c0022845:	83 ec 0c             	sub    esp,0xc
c0022848:	89 83 84 01 00 00    	mov    DWORD PTR [ebx+0x184],eax
c002284e:	6a 01                	push   0x1
c0022850:	e8 52 12 ff ff       	call   c0013aa7 <Virt::allocateKernelVirtualPages(int)>
c0022855:	89 83 88 01 00 00    	mov    DWORD PTR [ebx+0x188],eax
c002285b:	6a 03                	push   0x3
c002285d:	50                   	push   eax
c002285e:	ff b3 84 01 00 00    	push   DWORD PTR [ebx+0x184]
c0022864:	ff 35 90 62 03 c0    	push   DWORD PTR ds:0xc0036290
c002286a:	e8 11 19 ff ff       	call   c0014180 <VAS::mapPage(unsigned long, unsigned long, int)>
c002286f:	83 c4 14             	add    esp,0x14
c0022872:	68 87 e2 02 c0       	push   0xc002e287
c0022877:	e8 ea 46 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c002287c:	0f b6 83 84 01 00 00 	movzx  eax,BYTE PTR [ebx+0x184]
c0022883:	50                   	push   eax
c0022884:	6a 12                	push   0x12
c0022886:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002288d:	50                   	push   eax
c002288e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0022894:	e8 a3 e7 ff ff       	call   c002103c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022899:	8b 83 84 01 00 00    	mov    eax,DWORD PTR [ebx+0x184]
c002289f:	83 c4 20             	add    esp,0x20
c00228a2:	0f b6 c4             	movzx  eax,ah
c00228a5:	50                   	push   eax
c00228a6:	6a 13                	push   0x13
c00228a8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00228af:	50                   	push   eax
c00228b0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00228b6:	e8 81 e7 ff ff       	call   c002103c <IDE::write(unsigned char, unsigned char, unsigned char)>
c00228bb:	0f b6 83 86 01 00 00 	movzx  eax,BYTE PTR [ebx+0x186]
c00228c2:	50                   	push   eax
c00228c3:	6a 14                	push   0x14
c00228c5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00228cc:	50                   	push   eax
c00228cd:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00228d3:	e8 64 e7 ff ff       	call   c002103c <IDE::write(unsigned char, unsigned char, unsigned char)>
c00228d8:	0f b6 83 87 01 00 00 	movzx  eax,BYTE PTR [ebx+0x187]
c00228df:	83 c4 20             	add    esp,0x20
c00228e2:	50                   	push   eax
c00228e3:	6a 15                	push   0x15
c00228e5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00228ec:	50                   	push   eax
c00228ed:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00228f3:	e8 44 e7 ff ff       	call   c002103c <IDE::write(unsigned char, unsigned char, unsigned char)>
c00228f8:	83 c4 10             	add    esp,0x10
c00228fb:	83 ec 0c             	sub    esp,0xc
c00228fe:	53                   	push   ebx
c00228ff:	e8 66 7f fe ff       	call   c000a86a <PhysicalDisk::startCache()>
c0022904:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0022907:	e8 ca 8d fe ff       	call   c000b6d6 <createPartitionsForDisk(PhysicalDisk*)>
c002290c:	83 c4 18             	add    esp,0x18
c002290f:	31 c0                	xor    eax,eax
c0022911:	5b                   	pop    ebx
c0022912:	c3                   	ret    

c0022913 <combineCharAndColour(char, unsigned char)>:
c0022913:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0022918:	66 0f be 54 24 04    	movsx  dx,BYTE PTR [esp+0x4]
c002291e:	c1 e0 08             	shl    eax,0x8
c0022921:	09 d0                	or     eax,edx
c0022923:	c3                   	ret    

c0022924 <combineColours(unsigned char, unsigned char)>:
c0022924:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0022929:	c1 e0 04             	shl    eax,0x4
c002292c:	0b 44 24 04          	or     eax,DWORD PTR [esp+0x4]
c0022930:	c3                   	ret    
c0022931:	90                   	nop

c0022932 <ATAPI::write(unsigned long long, int, void*)>:
c0022932:	b8 03 00 00 00       	mov    eax,0x3
c0022937:	c3                   	ret    

c0022938 <ATAPI::close(int, int, void*)>:
c0022938:	83 ec 0c             	sub    esp,0xc
c002293b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002293f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0022945:	85 c0                	test   eax,eax
c0022947:	74 0c                	je     c0022955 <ATAPI::close(int, int, void*)+0x1d>
c0022949:	8b 10                	mov    edx,DWORD PTR [eax]
c002294b:	83 ec 0c             	sub    esp,0xc
c002294e:	50                   	push   eax
c002294f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0022952:	83 c4 10             	add    esp,0x10
c0022955:	31 c0                	xor    eax,eax
c0022957:	83 c4 0c             	add    esp,0xc
c002295a:	c3                   	ret    
c002295b:	90                   	nop

c002295c <ATAPI::ATAPI()>:
c002295c:	83 ec 0c             	sub    esp,0xc
c002295f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022963:	83 ec 04             	sub    esp,0x4
c0022966:	68 00 08 00 00       	push   0x800
c002296b:	68 39 e4 02 c0       	push   0xc002e439
c0022970:	50                   	push   eax
c0022971:	e8 8c 7e fe ff       	call   c000a802 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0022976:	83 c4 10             	add    esp,0x10
c0022979:	ba 48 e3 02 c0       	mov    edx,0xc002e348
c002297e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022982:	89 10                	mov    DWORD PTR [eax],edx
c0022984:	90                   	nop
c0022985:	83 c4 0c             	add    esp,0xc
c0022988:	c3                   	ret    
c0022989:	90                   	nop

c002298a <ATAPI::readyForCommand()>:
c002298a:	56                   	push   esi
c002298b:	53                   	push   ebx
c002298c:	31 db                	xor    ebx,ebx
c002298e:	50                   	push   eax
c002298f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0022993:	50                   	push   eax
c0022994:	6a 0c                	push   0xc
c0022996:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c002299d:	50                   	push   eax
c002299e:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c00229a4:	e8 53 e7 ff ff       	call   c00210fc <IDE::read(unsigned char, unsigned char)>
c00229a9:	83 c4 10             	add    esp,0x10
c00229ac:	a8 88                	test   al,0x88
c00229ae:	74 26                	je     c00229d6 <ATAPI::readyForCommand()+0x4c>
c00229b0:	43                   	inc    ebx
c00229b1:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c00229b7:	7e da                	jle    c0022993 <ATAPI::readyForCommand()+0x9>
c00229b9:	51                   	push   ecx
c00229ba:	51                   	push   ecx
c00229bb:	6a 00                	push   0x0
c00229bd:	68 5e 01 00 00       	push   0x15e
c00229c2:	e8 15 49 ff ff       	call   c00172dc <milliTenthSleep(unsigned long long)>
c00229c7:	83 c4 10             	add    esp,0x10
c00229ca:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c00229d0:	75 c1                	jne    c0022993 <ATAPI::readyForCommand()+0x9>
c00229d2:	31 c0                	xor    eax,eax
c00229d4:	eb 02                	jmp    c00229d8 <ATAPI::readyForCommand()+0x4e>
c00229d6:	b0 01                	mov    al,0x1
c00229d8:	5a                   	pop    edx
c00229d9:	5b                   	pop    ebx
c00229da:	5e                   	pop    esi
c00229db:	c3                   	ret    

c00229dc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c00229dc:	55                   	push   ebp
c00229dd:	57                   	push   edi
c00229de:	56                   	push   esi
c00229df:	53                   	push   ebx
c00229e0:	83 ec 20             	sub    esp,0x20
c00229e3:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00229e7:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00229eb:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c00229ef:	6a 01                	push   0x1
c00229f1:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00229f8:	50                   	push   eax
c00229f9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00229ff:	e8 48 e8 ff ff       	call   c002124c <IDE::enableIRQs(unsigned char, bool)>
c0022a04:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0022a0b:	59                   	pop    ecx
c0022a0c:	5e                   	pop    esi
c0022a0d:	50                   	push   eax
c0022a0e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0022a14:	e8 fd e5 ff ff       	call   c0021016 <IDE::prepareInterrupt(unsigned char)>
c0022a19:	89 3c 24             	mov    DWORD PTR [esp],edi
c0022a1c:	e8 69 ff ff ff       	call   c002298a <ATAPI::readyForCommand()>
c0022a21:	83 c4 10             	add    esp,0x10
c0022a24:	84 c0                	test   al,al
c0022a26:	75 0a                	jne    c0022a32 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x56>
c0022a28:	bb 01 00 00 00       	mov    ebx,0x1
c0022a2d:	e9 5f 02 00 00       	jmp    c0022c91 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0022a32:	8b 87 74 01 00 00    	mov    eax,DWORD PTR [edi+0x174]
c0022a38:	c1 e0 04             	shl    eax,0x4
c0022a3b:	0f b6 c0             	movzx  eax,al
c0022a3e:	50                   	push   eax
c0022a3f:	6a 06                	push   0x6
c0022a41:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0022a48:	50                   	push   eax
c0022a49:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0022a4f:	e8 e8 e5 ff ff       	call   c002103c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022a54:	6a 00                	push   0x0
c0022a56:	6a 01                	push   0x1
c0022a58:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0022a5f:	50                   	push   eax
c0022a60:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0022a66:	e8 d1 e5 ff ff       	call   c002103c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022a6b:	83 c4 20             	add    esp,0x20
c0022a6e:	0f b6 c3             	movzx  eax,bl
c0022a71:	50                   	push   eax
c0022a72:	0f b6 df             	movzx  ebx,bh
c0022a75:	6a 04                	push   0x4
c0022a77:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0022a7e:	50                   	push   eax
c0022a7f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0022a85:	e8 b2 e5 ff ff       	call   c002103c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022a8a:	53                   	push   ebx
c0022a8b:	6a 05                	push   0x5
c0022a8d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0022a94:	50                   	push   eax
c0022a95:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0022a9b:	e8 9c e5 ff ff       	call   c002103c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022aa0:	83 c4 20             	add    esp,0x20
c0022aa3:	68 a0 00 00 00       	push   0xa0
c0022aa8:	6a 07                	push   0x7
c0022aaa:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0022ab1:	50                   	push   eax
c0022ab2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0022ab8:	e8 7f e5 ff ff       	call   c002103c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022abd:	83 c4 0c             	add    esp,0xc
c0022ac0:	6a 01                	push   0x1
c0022ac2:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0022ac9:	50                   	push   eax
c0022aca:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0022ad0:	e8 07 f3 ff ff       	call   c0021ddc <IDE::polling(unsigned char, unsigned int)>
c0022ad5:	83 c4 10             	add    esp,0x10
c0022ad8:	0f b6 d8             	movzx  ebx,al
c0022adb:	8b 87 70 01 00 00    	mov    eax,DWORD PTR [edi+0x170]
c0022ae1:	85 db                	test   ebx,ebx
c0022ae3:	74 20                	je     c0022b05 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x129>
c0022ae5:	53                   	push   ebx
c0022ae6:	0f b6 c0             	movzx  eax,al
c0022ae9:	0f b6 97 74 01 00 00 	movzx  edx,BYTE PTR [edi+0x174]
c0022af0:	52                   	push   edx
c0022af1:	50                   	push   eax
c0022af2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0022af8:	e8 25 f2 ff ff       	call   c0021d22 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0022afd:	83 c4 10             	add    esp,0x10
c0022b00:	e9 8c 01 00 00       	jmp    c0022c91 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0022b05:	52                   	push   edx
c0022b06:	0f b6 c0             	movzx  eax,al
c0022b09:	52                   	push   edx
c0022b0a:	50                   	push   eax
c0022b0b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0022b11:	e8 14 e5 ff ff       	call   c002102a <IDE::getBase(unsigned char)>
c0022b16:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0022b1a:	b9 06 00 00 00       	mov    ecx,0x6
c0022b1f:	89 c2                	mov    edx,eax
c0022b21:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c0022b24:	89 e8                	mov    eax,ebp
c0022b26:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0022b2a:	83 c4 10             	add    esp,0x10
c0022b2d:	0f b6 c0             	movzx  eax,al
c0022b30:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0022b34:	85 db                	test   ebx,ebx
c0022b36:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0022b3c:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0022b43:	0f 84 eb 00 00 00    	je     c0022c34 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c0022b49:	55                   	push   ebp
c0022b4a:	55                   	push   ebp
c0022b4b:	52                   	push   edx
c0022b4c:	50                   	push   eax
c0022b4d:	e8 5e e6 ff ff       	call   c00211b0 <IDE::waitInterrupt(unsigned char)>
c0022b52:	83 c4 10             	add    esp,0x10
c0022b55:	84 c0                	test   al,al
c0022b57:	0f 84 cb fe ff ff    	je     c0022a28 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x4c>
c0022b5d:	56                   	push   esi
c0022b5e:	56                   	push   esi
c0022b5f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0022b66:	50                   	push   eax
c0022b67:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0022b6d:	e8 a4 e4 ff ff       	call   c0021016 <IDE::prepareInterrupt(unsigned char)>
c0022b72:	83 c4 0c             	add    esp,0xc
c0022b75:	6a 04                	push   0x4
c0022b77:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0022b7e:	50                   	push   eax
c0022b7f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0022b85:	e8 72 e5 ff ff       	call   c00210fc <IDE::read(unsigned char, unsigned char)>
c0022b8a:	83 c4 0c             	add    esp,0xc
c0022b8d:	6a 05                	push   0x5
c0022b8f:	89 c6                	mov    esi,eax
c0022b91:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0022b98:	50                   	push   eax
c0022b99:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0022b9f:	e8 58 e5 ff ff       	call   c00210fc <IDE::read(unsigned char, unsigned char)>
c0022ba4:	83 c4 10             	add    esp,0x10
c0022ba7:	0f b6 e8             	movzx  ebp,al
c0022baa:	89 f0                	mov    eax,esi
c0022bac:	c1 e5 08             	shl    ebp,0x8
c0022baf:	0f b6 f0             	movzx  esi,al
c0022bb2:	09 f5                	or     ebp,esi
c0022bb4:	31 f6                	xor    esi,esi
c0022bb6:	d1 fd                	sar    ebp,1
c0022bb8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0022bbd:	74 5c                	je     c0022c1b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x23f>
c0022bbf:	39 ee                	cmp    esi,ebp
c0022bc1:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0022bc7:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0022bce:	75 0d                	jne    c0022bdd <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x201>
c0022bd0:	8d 0c 36             	lea    ecx,[esi+esi*1]
c0022bd3:	01 4c 24 40          	add    DWORD PTR [esp+0x40],ecx
c0022bd7:	4b                   	dec    ebx
c0022bd8:	e9 57 ff ff ff       	jmp    c0022b34 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x158>
c0022bdd:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0022be1:	66 8b 0c 71          	mov    cx,WORD PTR [ecx+esi*2]
c0022be5:	66 89 4c 24 0a       	mov    WORD PTR [esp+0xa],cx
c0022bea:	51                   	push   ecx
c0022beb:	51                   	push   ecx
c0022bec:	52                   	push   edx
c0022bed:	50                   	push   eax
c0022bee:	e8 37 e4 ff ff       	call   c002102a <IDE::getBase(unsigned char)>
c0022bf3:	89 c2                	mov    edx,eax
c0022bf5:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0022bfa:	66 ef                	out    dx,ax
c0022bfc:	46                   	inc    esi
c0022bfd:	83 c4 10             	add    esp,0x10
c0022c00:	eb bd                	jmp    c0022bbf <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e3>
c0022c02:	51                   	push   ecx
c0022c03:	51                   	push   ecx
c0022c04:	52                   	push   edx
c0022c05:	50                   	push   eax
c0022c06:	e8 1f e4 ff ff       	call   c002102a <IDE::getBase(unsigned char)>
c0022c0b:	89 c2                	mov    edx,eax
c0022c0d:	66 ed                	in     ax,dx
c0022c0f:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0022c13:	83 c4 10             	add    esp,0x10
c0022c16:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0022c1a:	46                   	inc    esi
c0022c1b:	39 ee                	cmp    esi,ebp
c0022c1d:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0022c23:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0022c2a:	75 d6                	jne    c0022c02 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x226>
c0022c2c:	01 f6                	add    esi,esi
c0022c2e:	01 74 24 40          	add    DWORD PTR [esp+0x40],esi
c0022c32:	eb a3                	jmp    c0022bd7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fb>
c0022c34:	51                   	push   ecx
c0022c35:	51                   	push   ecx
c0022c36:	52                   	push   edx
c0022c37:	50                   	push   eax
c0022c38:	e8 73 e5 ff ff       	call   c00211b0 <IDE::waitInterrupt(unsigned char)>
c0022c3d:	83 c4 10             	add    esp,0x10
c0022c40:	84 c0                	test   al,al
c0022c42:	0f 84 e0 fd ff ff    	je     c0022a28 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x4c>
c0022c48:	52                   	push   edx
c0022c49:	bb a0 86 01 00       	mov    ebx,0x186a0
c0022c4e:	52                   	push   edx
c0022c4f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0022c56:	50                   	push   eax
c0022c57:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0022c5d:	e8 b4 e3 ff ff       	call   c0021016 <IDE::prepareInterrupt(unsigned char)>
c0022c62:	83 c4 10             	add    esp,0x10
c0022c65:	50                   	push   eax
c0022c66:	50                   	push   eax
c0022c67:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0022c6e:	50                   	push   eax
c0022c6f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0022c75:	e8 b0 e3 ff ff       	call   c002102a <IDE::getBase(unsigned char)>
c0022c7a:	8d 50 07             	lea    edx,[eax+0x7]
c0022c7d:	ec                   	in     al,dx
c0022c7e:	83 c4 10             	add    esp,0x10
c0022c81:	a8 88                	test   al,0x88
c0022c83:	74 0a                	je     c0022c8f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c0022c85:	4b                   	dec    ebx
c0022c86:	75 dd                	jne    c0022c65 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c0022c88:	bb 02 00 00 00       	mov    ebx,0x2
c0022c8d:	eb 02                	jmp    c0022c91 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0022c8f:	31 db                	xor    ebx,ebx
c0022c91:	83 c4 1c             	add    esp,0x1c
c0022c94:	89 d8                	mov    eax,ebx
c0022c96:	5b                   	pop    ebx
c0022c97:	5e                   	pop    esi
c0022c98:	5f                   	pop    edi
c0022c99:	5d                   	pop    ebp
c0022c9a:	c3                   	ret    
c0022c9b:	90                   	nop

c0022c9c <ATAPI::diskRemoved()>:
c0022c9c:	53                   	push   ebx
c0022c9d:	83 ec 14             	sub    esp,0x14
c0022ca0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0022ca4:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0022cab:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c0022cb1:	e8 0e 87 fe ff       	call   c000b3c4 <LogicalDisk::unmount()>
c0022cb6:	58                   	pop    eax
c0022cb7:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c0022cbd:	e8 ea 90 fe ff       	call   c000bdac <VCache::writeWriteBuffer()>
c0022cc2:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0022cc8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0022ccc:	83 c4 18             	add    esp,0x18
c0022ccf:	5b                   	pop    ebx
c0022cd0:	e9 c7 90 fe ff       	jmp    c000bd9c <VCache::invalidateReadBuffer()>
c0022cd5:	90                   	nop

c0022cd6 <ATAPI::eject()>:
c0022cd6:	57                   	push   edi
c0022cd7:	b9 03 00 00 00       	mov    ecx,0x3
c0022cdc:	53                   	push   ebx
c0022cdd:	83 ec 14             	sub    esp,0x14
c0022ce0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0022ce4:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0022ce8:	fc                   	cld    
c0022ce9:	31 c0                	xor    eax,eax
c0022ceb:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0022ced:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0022cf2:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0022cf7:	50                   	push   eax
c0022cf8:	50                   	push   eax
c0022cf9:	6a 00                	push   0x0
c0022cfb:	6a 00                	push   0x0
c0022cfd:	6a 00                	push   0x0
c0022cff:	6a 02                	push   0x2
c0022d01:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022d05:	50                   	push   eax
c0022d06:	53                   	push   ebx
c0022d07:	e8 d0 fc ff ff       	call   c00229dc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0022d0c:	83 c4 14             	add    esp,0x14
c0022d0f:	53                   	push   ebx
c0022d10:	e8 87 ff ff ff       	call   c0022c9c <ATAPI::diskRemoved()>
c0022d15:	83 c4 24             	add    esp,0x24
c0022d18:	31 c0                	xor    eax,eax
c0022d1a:	5b                   	pop    ebx
c0022d1b:	5f                   	pop    edi
c0022d1c:	c3                   	ret    
c0022d1d:	90                   	nop

c0022d1e <ATAPI::diskInserted()>:
c0022d1e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022d22:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c0022d29:	c3                   	ret    

c0022d2a <ATAPI::detectMedia()>:
c0022d2a:	56                   	push   esi
c0022d2b:	53                   	push   ebx
c0022d2c:	83 ec 28             	sub    esp,0x28
c0022d2f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0022d33:	6a 0c                	push   0xc
c0022d35:	6a 00                	push   0x0
c0022d37:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0022d3b:	56                   	push   esi
c0022d3c:	e8 af d7 fd ff       	call   c00004f0 <memset>
c0022d41:	58                   	pop    eax
c0022d42:	5a                   	pop    edx
c0022d43:	6a 00                	push   0x0
c0022d45:	6a 00                	push   0x0
c0022d47:	6a 00                	push   0x0
c0022d49:	6a 00                	push   0x0
c0022d4b:	56                   	push   esi
c0022d4c:	53                   	push   ebx
c0022d4d:	e8 8a fc ff ff       	call   c00229dc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0022d52:	83 c4 1c             	add    esp,0x1c
c0022d55:	6a 0c                	push   0xc
c0022d57:	6a 00                	push   0x0
c0022d59:	56                   	push   esi
c0022d5a:	e8 91 d7 fd ff       	call   c00004f0 <memset>
c0022d5f:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0022d64:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0022d69:	59                   	pop    ecx
c0022d6a:	58                   	pop    eax
c0022d6b:	6a 01                	push   0x1
c0022d6d:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0022d71:	50                   	push   eax
c0022d72:	6a 00                	push   0x0
c0022d74:	6a 12                	push   0x12
c0022d76:	56                   	push   esi
c0022d77:	53                   	push   ebx
c0022d78:	e8 5f fc ff ff       	call   c00229dc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0022d7d:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0022d81:	83 c4 20             	add    esp,0x20
c0022d84:	83 e0 7f             	and    eax,0x7f
c0022d87:	83 f8 70             	cmp    eax,0x70
c0022d8a:	74 15                	je     c0022da1 <ATAPI::detectMedia()+0x77>
c0022d8c:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0022d93:	75 0c                	jne    c0022da1 <ATAPI::detectMedia()+0x77>
c0022d95:	83 ec 0c             	sub    esp,0xc
c0022d98:	53                   	push   ebx
c0022d99:	e8 80 ff ff ff       	call   c0022d1e <ATAPI::diskInserted()>
c0022d9e:	83 c4 10             	add    esp,0x10
c0022da1:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0022da5:	83 e0 0f             	and    eax,0xf
c0022da8:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0022dad:	0f b6 c0             	movzx  eax,al
c0022db0:	75 19                	jne    c0022dcb <ATAPI::detectMedia()+0xa1>
c0022db2:	83 f8 02             	cmp    eax,0x2
c0022db5:	75 14                	jne    c0022dcb <ATAPI::detectMedia()+0xa1>
c0022db7:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0022dbe:	74 24                	je     c0022de4 <ATAPI::detectMedia()+0xba>
c0022dc0:	83 ec 0c             	sub    esp,0xc
c0022dc3:	53                   	push   ebx
c0022dc4:	e8 d3 fe ff ff       	call   c0022c9c <ATAPI::diskRemoved()>
c0022dc9:	eb 16                	jmp    c0022de1 <ATAPI::detectMedia()+0xb7>
c0022dcb:	85 c0                	test   eax,eax
c0022dcd:	75 15                	jne    c0022de4 <ATAPI::detectMedia()+0xba>
c0022dcf:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0022dd6:	75 0c                	jne    c0022de4 <ATAPI::detectMedia()+0xba>
c0022dd8:	83 ec 0c             	sub    esp,0xc
c0022ddb:	53                   	push   ebx
c0022ddc:	e8 3d ff ff ff       	call   c0022d1e <ATAPI::diskInserted()>
c0022de1:	83 c4 10             	add    esp,0x10
c0022de4:	83 c4 24             	add    esp,0x24
c0022de7:	5b                   	pop    ebx
c0022de8:	5e                   	pop    esi
c0022de9:	c3                   	ret    

c0022dea <ATAPI::open(int, int, void*)>:
c0022dea:	56                   	push   esi
c0022deb:	53                   	push   ebx
c0022dec:	50                   	push   eax
c0022ded:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0022df1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0022df5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0022df9:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0022dff:	c1 e0 06             	shl    eax,0x6
c0022e02:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0022e08:	01 d0                	add    eax,edx
c0022e0a:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c0022e11:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c0022e17:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c0022e1e:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0022e28:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0022e2f:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0022e35:	6a 04                	push   0x4
c0022e37:	6a 0c                	push   0xc
c0022e39:	51                   	push   ecx
c0022e3a:	52                   	push   edx
c0022e3b:	e8 fc e1 ff ff       	call   c002103c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022e40:	90                   	nop
c0022e41:	90                   	nop
c0022e42:	6a 00                	push   0x0
c0022e44:	6a 0c                	push   0xc
c0022e46:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0022e4d:	50                   	push   eax
c0022e4e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0022e54:	e8 e3 e1 ff ff       	call   c002103c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022e59:	83 c4 14             	add    esp,0x14
c0022e5c:	68 78 01 00 00       	push   0x178
c0022e61:	e8 a6 d2 fe ff       	call   c001010c <malloc>
c0022e66:	83 c4 0c             	add    esp,0xc
c0022e69:	6a 00                	push   0x0
c0022e6b:	68 ff ff ff 7f       	push   0x7fffffff
c0022e70:	6a 00                	push   0x0
c0022e72:	6a 00                	push   0x0
c0022e74:	53                   	push   ebx
c0022e75:	68 eb e4 02 c0       	push   0xc002e4eb
c0022e7a:	89 c6                	mov    esi,eax
c0022e7c:	50                   	push   eax
c0022e7d:	e8 80 83 fe ff       	call   c000b202 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0022e82:	83 c4 14             	add    esp,0x14
c0022e85:	56                   	push   esi
c0022e86:	e8 37 84 fe ff       	call   c000b2c2 <LogicalDisk::assignDriveLetter()>
c0022e8b:	5a                   	pop    edx
c0022e8c:	59                   	pop    ecx
c0022e8d:	0f be c0             	movsx  eax,al
c0022e90:	50                   	push   eax
c0022e91:	68 30 e3 02 c0       	push   0xc002e330
c0022e96:	e8 cb 40 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0022e9b:	58                   	pop    eax
c0022e9c:	5a                   	pop    edx
c0022e9d:	56                   	push   esi
c0022e9e:	53                   	push   ebx
c0022e9f:	e8 7a 75 fe ff       	call   c000a41e <Device::addChild(Device*)>
c0022ea4:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c0022eaa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0022ead:	e8 b8 79 fe ff       	call   c000a86a <PhysicalDisk::startCache()>
c0022eb2:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0022eb9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0022ebc:	e8 69 fe ff ff       	call   c0022d2a <ATAPI::detectMedia()>
c0022ec1:	83 c4 14             	add    esp,0x14
c0022ec4:	31 c0                	xor    eax,eax
c0022ec6:	5b                   	pop    ebx
c0022ec7:	5e                   	pop    esi
c0022ec8:	c3                   	ret    
c0022ec9:	90                   	nop

c0022eca <ATAPI::read(unsigned long long, int, void*)>:
c0022eca:	55                   	push   ebp
c0022ecb:	57                   	push   edi
c0022ecc:	56                   	push   esi
c0022ecd:	53                   	push   ebx
c0022ece:	83 ec 1c             	sub    esp,0x1c
c0022ed1:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0022ed5:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0022ed9:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0022edd:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0022ee4:	74 3c                	je     c0022f22 <ATAPI::read(unsigned long long, int, void*)+0x58>
c0022ee6:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0022eea:	b9 03 00 00 00       	mov    ecx,0x3
c0022eef:	fc                   	cld    
c0022ef0:	31 c0                	xor    eax,eax
c0022ef2:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0022ef4:	89 e8                	mov    eax,ebp
c0022ef6:	0f ce                	bswap  esi
c0022ef8:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0022efc:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0022f01:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c0022f05:	50                   	push   eax
c0022f06:	50                   	push   eax
c0022f07:	55                   	push   ebp
c0022f08:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0022f0c:	c1 e5 0b             	shl    ebp,0xb
c0022f0f:	6a 00                	push   0x0
c0022f11:	55                   	push   ebp
c0022f12:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022f16:	50                   	push   eax
c0022f17:	53                   	push   ebx
c0022f18:	e8 bf fa ff ff       	call   c00229dc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0022f1d:	83 c4 20             	add    esp,0x20
c0022f20:	eb 1a                	jmp    c0022f3c <ATAPI::read(unsigned long long, int, void*)+0x72>
c0022f22:	83 ec 0c             	sub    esp,0xc
c0022f25:	53                   	push   ebx
c0022f26:	e8 ff fd ff ff       	call   c0022d2a <ATAPI::detectMedia()>
c0022f2b:	83 c4 10             	add    esp,0x10
c0022f2e:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0022f35:	75 af                	jne    c0022ee6 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c0022f37:	b8 02 00 00 00       	mov    eax,0x2
c0022f3c:	83 c4 1c             	add    esp,0x1c
c0022f3f:	5b                   	pop    ebx
c0022f40:	5e                   	pop    esi
c0022f41:	5f                   	pop    edi
c0022f42:	5d                   	pop    ebp
c0022f43:	c3                   	ret    

c0022f44 <SATA::close(int, int, void*)>:
c0022f44:	83 ec 0c             	sub    esp,0xc
c0022f47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f4b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0022f51:	85 c0                	test   eax,eax
c0022f53:	74 0c                	je     c0022f61 <SATA::close(int, int, void*)+0x1d>
c0022f55:	8b 10                	mov    edx,DWORD PTR [eax]
c0022f57:	83 ec 0c             	sub    esp,0xc
c0022f5a:	50                   	push   eax
c0022f5b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0022f5e:	83 c4 10             	add    esp,0x10
c0022f61:	31 c0                	xor    eax,eax
c0022f63:	83 c4 0c             	add    esp,0xc
c0022f66:	c3                   	ret    
c0022f67:	90                   	nop

c0022f68 <SATA::powerSaving(PowerSavingLevel)>:
c0022f68:	c3                   	ret    
c0022f69:	90                   	nop

c0022f6a <SATA::open(int, int, void*)>:
c0022f6a:	56                   	push   esi
c0022f6b:	53                   	push   ebx
c0022f6c:	83 ec 10             	sub    esp,0x10
c0022f6f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0022f73:	68 78 e3 02 c0       	push   0xc002e378
c0022f78:	e8 e9 3f fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0022f7d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0022f81:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0022f8b:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0022f95:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0022f9b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0022f9f:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0022fa9:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0022fb0:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0022fb6:	e8 9f d7 fe ff       	call   c001075a <Phys::allocatePage()>
c0022fbb:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0022fc1:	89 c6                	mov    esi,eax
c0022fc3:	e8 92 d7 fe ff       	call   c001075a <Phys::allocatePage()>
c0022fc8:	81 c6 00 10 00 00    	add    esi,0x1000
c0022fce:	83 c4 10             	add    esp,0x10
c0022fd1:	39 c6                	cmp    esi,eax
c0022fd3:	74 10                	je     c0022fe5 <SATA::open(int, int, void*)+0x7b>
c0022fd5:	83 ec 0c             	sub    esp,0xc
c0022fd8:	68 84 e3 02 c0       	push   0xc002e384
c0022fdd:	e8 7e d5 fe ff       	call   c0010560 <KePanic(char const*)>
c0022fe2:	83 c4 10             	add    esp,0x10
c0022fe5:	83 ec 0c             	sub    esp,0xc
c0022fe8:	6a 02                	push   0x2
c0022fea:	e8 b8 0a ff ff       	call   c0013aa7 <Virt::allocateKernelVirtualPages(int)>
c0022fef:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0022ff5:	6a 03                	push   0x3
c0022ff7:	50                   	push   eax
c0022ff8:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0022ffe:	ff 35 90 62 03 c0    	push   DWORD PTR ds:0xc0036290
c0023004:	e8 77 11 ff ff       	call   c0014180 <VAS::mapPage(unsigned long, unsigned long, int)>
c0023009:	83 c4 14             	add    esp,0x14
c002300c:	53                   	push   ebx
c002300d:	e8 58 78 fe ff       	call   c000a86a <PhysicalDisk::startCache()>
c0023012:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023015:	e8 bc 86 fe ff       	call   c000b6d6 <createPartitionsForDisk(PhysicalDisk*)>
c002301a:	83 c4 14             	add    esp,0x14
c002301d:	31 c0                	xor    eax,eax
c002301f:	5b                   	pop    ebx
c0023020:	5e                   	pop    esi
c0023021:	c3                   	ret    

c0023022 <SATA::SATA()>:
c0023022:	83 ec 0c             	sub    esp,0xc
c0023025:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023029:	83 ec 04             	sub    esp,0x4
c002302c:	68 00 02 00 00       	push   0x200
c0023031:	68 98 e3 02 c0       	push   0xc002e398
c0023036:	50                   	push   eax
c0023037:	e8 c6 77 fe ff       	call   c000a802 <PhysicalDisk::PhysicalDisk(char const*, int)>
c002303c:	83 c4 10             	add    esp,0x10
c002303f:	ba 08 e4 02 c0       	mov    edx,0xc002e408
c0023044:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023048:	89 10                	mov    DWORD PTR [eax],edx
c002304a:	90                   	nop
c002304b:	83 c4 0c             	add    esp,0xc
c002304e:	c3                   	ret    
c002304f:	90                   	nop

c0023050 <SATA::access(unsigned long long, int, void*, bool)>:
c0023050:	55                   	push   ebp
c0023051:	57                   	push   edi
c0023052:	56                   	push   esi
c0023053:	53                   	push   ebx
c0023054:	83 ec 2c             	sub    esp,0x2c
c0023057:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c002305b:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c002305f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0023063:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0023067:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002306b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c002306f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023073:	fa                   	cli    
c0023074:	ff 05 30 63 03 c0    	inc    DWORD PTR ds:0xc0036330
c002307a:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c002307f:	7e 10                	jle    c0023091 <SATA::access(unsigned long long, int, void*, bool)+0x41>
c0023081:	83 ec 0c             	sub    esp,0xc
c0023084:	68 a8 e3 02 c0       	push   0xc002e3a8
c0023089:	e8 d2 d4 fe ff       	call   c0010560 <KePanic(char const*)>
c002308e:	83 c4 10             	add    esp,0x10
c0023091:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c0023097:	8b ab 6c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x16c]
c002309d:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c00230a3:	89 e8                	mov    eax,ebp
c00230a5:	c1 e0 07             	shl    eax,0x7
c00230a8:	01 d0                	add    eax,edx
c00230aa:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c00230b4:	8d 45 02             	lea    eax,[ebp+0x2]
c00230b7:	51                   	push   ecx
c00230b8:	c1 e0 07             	shl    eax,0x7
c00230bb:	51                   	push   ecx
c00230bc:	01 d0                	add    eax,edx
c00230be:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00230c2:	50                   	push   eax
c00230c3:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c00230c9:	e8 ee ed ff ff       	call   c0021ebc <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c00230ce:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00230d2:	83 c4 10             	add    esp,0x10
c00230d5:	83 7c 24 0c ff       	cmp    DWORD PTR [esp+0xc],0xffffffff
c00230da:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00230de:	0f 84 a6 01 00 00    	je     c002328a <SATA::access(unsigned long long, int, void*, bool)+0x23a>
c00230e4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00230e8:	c1 e0 09             	shl    eax,0x9
c00230eb:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00230f0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00230f4:	74 0e                	je     c0023104 <SATA::access(unsigned long long, int, void*, bool)+0xb4>
c00230f6:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c00230fc:	89 c1                	mov    ecx,eax
c00230fe:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0023102:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0023104:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0023108:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c002310e:	8d 45 02             	lea    eax,[ebp+0x2]
c0023111:	c1 e0 07             	shl    eax,0x7
c0023114:	01 d0                	add    eax,edx
c0023116:	8b 00                	mov    eax,DWORD PTR [eax]
c0023118:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c002311e:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0023124:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0023128:	c1 e1 05             	shl    ecx,0x5
c002312b:	01 c8                	add    eax,ecx
c002312d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023131:	83 e1 01             	and    ecx,0x1
c0023134:	89 ce                	mov    esi,ecx
c0023136:	8a 08                	mov    cl,BYTE PTR [eax]
c0023138:	c1 e6 06             	shl    esi,0x6
c002313b:	83 e1 bf             	and    ecx,0xffffffbf
c002313e:	09 f1                	or     ecx,esi
c0023140:	88 08                	mov    BYTE PTR [eax],cl
c0023142:	8b 08                	mov    ecx,DWORD PTR [eax]
c0023144:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c002314a:	81 c9 05 00 01 00    	or     ecx,0x10005
c0023150:	89 08                	mov    DWORD PTR [eax],ecx
c0023152:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c0023158:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c002315e:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c0023164:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c0023167:	50                   	push   eax
c0023168:	68 90 00 00 00       	push   0x90
c002316d:	6a 00                	push   0x0
c002316f:	56                   	push   esi
c0023170:	e8 7b d3 fd ff       	call   c00004f0 <memset>
c0023175:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c002317b:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c0023181:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0023185:	83 c4 10             	add    esp,0x10
c0023188:	48                   	dec    eax
c0023189:	25 ff ff 3f 00       	and    eax,0x3fffff
c002318e:	89 c1                	mov    ecx,eax
c0023190:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c0023196:	25 00 00 c0 ff       	and    eax,0xffc00000
c002319b:	09 c8                	or     eax,ecx
c002319d:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c00231a3:	8a 86 8f 00 00 00    	mov    al,BYTE PTR [esi+0x8f]
c00231a9:	83 c8 80             	or     eax,0xffffff80
c00231ac:	88 86 8f 00 00 00    	mov    BYTE PTR [esi+0x8f],al
c00231b2:	66 8b 06             	mov    ax,WORD PTR [esi]
c00231b5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00231b9:	25 00 7f 00 00       	and    eax,0x7f00
c00231be:	0d 27 80 ff ff       	or     eax,0xffff8027
c00231c3:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00231c8:	66 89 06             	mov    WORD PTR [esi],ax
c00231cb:	b0 35                	mov    al,0x35
c00231cd:	75 02                	jne    c00231d1 <SATA::access(unsigned long long, int, void*, bool)+0x181>
c00231cf:	b0 25                	mov    al,0x25
c00231d1:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00231d4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00231d8:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c00231dc:	66 89 46 04          	mov    WORD PTR [esi+0x4],ax
c00231e0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00231e4:	c1 e8 10             	shr    eax,0x10
c00231e7:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c00231ea:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00231ee:	c1 e8 18             	shr    eax,0x18
c00231f1:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c00231f4:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c00231f8:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c00231fb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00231ff:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c0023202:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0023206:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c002320a:	89 ee                	mov    esi,ebp
c002320c:	31 c0                	xor    eax,eax
c002320e:	c1 e6 07             	shl    esi,0x7
c0023211:	01 d6                	add    esi,edx
c0023213:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c0023219:	80 e1 88             	and    cl,0x88
c002321c:	74 0a                	je     c0023228 <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c002321e:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0023223:	74 0a                	je     c002322f <SATA::access(unsigned long long, int, void*, bool)+0x1df>
c0023225:	40                   	inc    eax
c0023226:	eb eb                	jmp    c0023213 <SATA::access(unsigned long long, int, void*, bool)+0x1c3>
c0023228:	3d 40 42 0f 00       	cmp    eax,0xf4240
c002322d:	75 0a                	jne    c0023239 <SATA::access(unsigned long long, int, void*, bool)+0x1e9>
c002322f:	83 ec 0c             	sub    esp,0xc
c0023232:	68 e1 e3 02 c0       	push   0xc002e3e1
c0023237:	eb 34                	jmp    c002326d <SATA::access(unsigned long long, int, void*, bool)+0x21d>
c0023239:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c002323d:	c1 e5 07             	shl    ebp,0x7
c0023240:	b8 01 00 00 00       	mov    eax,0x1
c0023245:	01 ea                	add    edx,ebp
c0023247:	d3 e0                	shl    eax,cl
c0023249:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c002324f:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c0023255:	85 c8                	test   eax,ecx
c0023257:	74 25                	je     c002327e <SATA::access(unsigned long long, int, void*, bool)+0x22e>
c0023259:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c002325f:	0f ba e1 1e          	bt     ecx,0x1e
c0023263:	73 ea                	jae    c002324f <SATA::access(unsigned long long, int, void*, bool)+0x1ff>
c0023265:	83 ec 0c             	sub    esp,0xc
c0023268:	68 ef e3 02 c0       	push   0xc002e3ef
c002326d:	e8 f4 3c fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0023272:	f0 ff 0d 30 63 03 c0 	lock dec DWORD PTR ds:0xc0036330
c0023279:	83 c4 10             	add    esp,0x10
c002327c:	eb 13                	jmp    c0023291 <SATA::access(unsigned long long, int, void*, bool)+0x241>
c002327e:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c0023284:	0f ba e0 1e          	bt     eax,0x1e
c0023288:	73 18                	jae    c00232a2 <SATA::access(unsigned long long, int, void*, bool)+0x252>
c002328a:	f0 ff 0d 30 63 03 c0 	lock dec DWORD PTR ds:0xc0036330
c0023291:	83 3d 30 63 03 c0 00 	cmp    DWORD PTR ds:0xc0036330,0x0
c0023298:	75 01                	jne    c002329b <SATA::access(unsigned long long, int, void*, bool)+0x24b>
c002329a:	fb                   	sti    
c002329b:	b8 01 00 00 00       	mov    eax,0x1
c00232a0:	eb 2c                	jmp    c00232ce <SATA::access(unsigned long long, int, void*, bool)+0x27e>
c00232a2:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00232a7:	75 10                	jne    c00232b9 <SATA::access(unsigned long long, int, void*, bool)+0x269>
c00232a9:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c00232af:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c00232b3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00232b7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00232b9:	f0 ff 0d 30 63 03 c0 	lock dec DWORD PTR ds:0xc0036330
c00232c0:	a1 30 63 03 c0       	mov    eax,ds:0xc0036330
c00232c5:	85 c0                	test   eax,eax
c00232c7:	75 03                	jne    c00232cc <SATA::access(unsigned long long, int, void*, bool)+0x27c>
c00232c9:	fb                   	sti    
c00232ca:	eb 02                	jmp    c00232ce <SATA::access(unsigned long long, int, void*, bool)+0x27e>
c00232cc:	31 c0                	xor    eax,eax
c00232ce:	83 c4 2c             	add    esp,0x2c
c00232d1:	5b                   	pop    ebx
c00232d2:	5e                   	pop    esi
c00232d3:	5f                   	pop    edi
c00232d4:	5d                   	pop    ebp
c00232d5:	c3                   	ret    

c00232d6 <SATA::read(unsigned long long, int, void*)>:
c00232d6:	57                   	push   edi
c00232d7:	b8 04 00 00 00       	mov    eax,0x4
c00232dc:	56                   	push   esi
c00232dd:	53                   	push   ebx
c00232de:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00232e2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00232e6:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00232ea:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00232ee:	8d 7a ff             	lea    edi,[edx-0x1]
c00232f1:	81 ff fe 00 00 00    	cmp    edi,0xfe
c00232f7:	77 25                	ja     c002331e <SATA::read(unsigned long long, int, void*)+0x48>
c00232f9:	85 f6                	test   esi,esi
c00232fb:	b8 06 00 00 00       	mov    eax,0x6
c0023300:	74 1c                	je     c002331e <SATA::read(unsigned long long, int, void*)+0x48>
c0023302:	50                   	push   eax
c0023303:	50                   	push   eax
c0023304:	6a 00                	push   0x0
c0023306:	56                   	push   esi
c0023307:	52                   	push   edx
c0023308:	53                   	push   ebx
c0023309:	51                   	push   ecx
c002330a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002330e:	e8 3d fd ff ff       	call   c0023050 <SATA::access(unsigned long long, int, void*, bool)>
c0023313:	83 c4 20             	add    esp,0x20
c0023316:	85 c0                	test   eax,eax
c0023318:	0f 95 c0             	setne  al
c002331b:	0f b6 c0             	movzx  eax,al
c002331e:	5b                   	pop    ebx
c002331f:	5e                   	pop    esi
c0023320:	5f                   	pop    edi
c0023321:	c3                   	ret    

c0023322 <SATA::write(unsigned long long, int, void*)>:
c0023322:	55                   	push   ebp
c0023323:	b8 04 00 00 00       	mov    eax,0x4
c0023328:	57                   	push   edi
c0023329:	56                   	push   esi
c002332a:	53                   	push   ebx
c002332b:	83 ec 0c             	sub    esp,0xc
c002332e:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0023332:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0023336:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c002333a:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c002333e:	8d 73 ff             	lea    esi,[ebx-0x1]
c0023341:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0023347:	77 3d                	ja     c0023386 <SATA::write(unsigned long long, int, void*)+0x64>
c0023349:	85 ed                	test   ebp,ebp
c002334b:	b8 06 00 00 00       	mov    eax,0x6
c0023350:	74 34                	je     c0023386 <SATA::write(unsigned long long, int, void*)+0x64>
c0023352:	c1 e3 09             	shl    ebx,0x9
c0023355:	01 eb                	add    ebx,ebp
c0023357:	50                   	push   eax
c0023358:	89 d6                	mov    esi,edx
c002335a:	50                   	push   eax
c002335b:	83 c6 01             	add    esi,0x1
c002335e:	6a 01                	push   0x1
c0023360:	89 cf                	mov    edi,ecx
c0023362:	55                   	push   ebp
c0023363:	83 d7 00             	adc    edi,0x0
c0023366:	6a 01                	push   0x1
c0023368:	81 c5 00 02 00 00    	add    ebp,0x200
c002336e:	51                   	push   ecx
c002336f:	52                   	push   edx
c0023370:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0023374:	e8 d7 fc ff ff       	call   c0023050 <SATA::access(unsigned long long, int, void*, bool)>
c0023379:	83 c4 20             	add    esp,0x20
c002337c:	39 dd                	cmp    ebp,ebx
c002337e:	89 f2                	mov    edx,esi
c0023380:	89 f9                	mov    ecx,edi
c0023382:	75 d3                	jne    c0023357 <SATA::write(unsigned long long, int, void*)+0x35>
c0023384:	31 c0                	xor    eax,eax
c0023386:	83 c4 0c             	add    esp,0xc
c0023389:	5b                   	pop    ebx
c002338a:	5e                   	pop    esi
c002338b:	5f                   	pop    edi
c002338c:	5d                   	pop    ebp
c002338d:	c3                   	ret    

c002338e <SATAPI::write(unsigned long long, int, void*)>:
c002338e:	b8 03 00 00 00       	mov    eax,0x3
c0023393:	c3                   	ret    

c0023394 <SATAPI::close(int, int, void*)>:
c0023394:	83 ec 0c             	sub    esp,0xc
c0023397:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002339b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00233a1:	85 c0                	test   eax,eax
c00233a3:	74 0c                	je     c00233b1 <SATAPI::close(int, int, void*)+0x1d>
c00233a5:	8b 10                	mov    edx,DWORD PTR [eax]
c00233a7:	83 ec 0c             	sub    esp,0xc
c00233aa:	50                   	push   eax
c00233ab:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00233ae:	83 c4 10             	add    esp,0x10
c00233b1:	31 c0                	xor    eax,eax
c00233b3:	83 c4 0c             	add    esp,0xc
c00233b6:	c3                   	ret    
c00233b7:	90                   	nop

c00233b8 <SATAPI::SATAPI()>:
c00233b8:	83 ec 0c             	sub    esp,0xc
c00233bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00233bf:	83 ec 04             	sub    esp,0x4
c00233c2:	68 00 08 00 00       	push   0x800
c00233c7:	68 38 e4 02 c0       	push   0xc002e438
c00233cc:	50                   	push   eax
c00233cd:	e8 30 74 fe ff       	call   c000a802 <PhysicalDisk::PhysicalDisk(char const*, int)>
c00233d2:	83 c4 10             	add    esp,0x10
c00233d5:	ba 2c e5 02 c0       	mov    edx,0xc002e52c
c00233da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00233de:	89 10                	mov    DWORD PTR [eax],edx
c00233e0:	90                   	nop
c00233e1:	83 c4 0c             	add    esp,0xc
c00233e4:	c3                   	ret    
c00233e5:	90                   	nop

c00233e6 <SATAPI::diskRemoved()>:
c00233e6:	c3                   	ret    
c00233e7:	90                   	nop

c00233e8 <SATAPI::diskInserted()>:
c00233e8:	83 ec 18             	sub    esp,0x18
c00233eb:	68 44 e4 02 c0       	push   0xc002e444
c00233f0:	e8 71 3b fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00233f5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00233f9:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c0023400:	83 c4 1c             	add    esp,0x1c
c0023403:	c3                   	ret    

c0023404 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c0023404:	55                   	push   ebp
c0023405:	57                   	push   edi
c0023406:	56                   	push   esi
c0023407:	53                   	push   ebx
c0023408:	83 ec 34             	sub    esp,0x34
c002340b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c002340f:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0023413:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0023417:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c002341b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c002341f:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c0023425:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002342b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002342f:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c0023435:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0023439:	83 c0 02             	add    eax,0x2
c002343c:	c1 e0 07             	shl    eax,0x7
c002343f:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0023443:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023447:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002344b:	c1 e0 07             	shl    eax,0x7
c002344e:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0023452:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0023456:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0023460:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0023464:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c002346a:	e8 4d ea ff ff       	call   c0021ebc <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c002346f:	83 c4 10             	add    esp,0x10
c0023472:	89 c2                	mov    edx,eax
c0023474:	b8 01 00 00 00       	mov    eax,0x1
c0023479:	83 fa ff             	cmp    edx,0xffffffff
c002347c:	0f 84 63 02 00 00    	je     c00236e5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2e1>
c0023482:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0023486:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002348a:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0023490:	8b 00                	mov    eax,DWORD PTR [eax]
c0023492:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0023498:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c002349e:	89 d1                	mov    ecx,edx
c00234a0:	c1 e1 05             	shl    ecx,0x5
c00234a3:	01 c8                	add    eax,ecx
c00234a5:	8b 08                	mov    ecx,DWORD PTR [eax]
c00234a7:	81 e1 80 ff 00 00    	and    ecx,0xff80
c00234ad:	81 c9 25 00 01 00    	or     ecx,0x10025
c00234b3:	89 08                	mov    DWORD PTR [eax],ecx
c00234b5:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c00234bb:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c00234c1:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c00234c7:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c00234ca:	50                   	push   eax
c00234cb:	68 90 00 00 00       	push   0x90
c00234d0:	6a 00                	push   0x0
c00234d2:	53                   	push   ebx
c00234d3:	e8 18 d0 fd ff       	call   c00004f0 <memset>
c00234d8:	8d 7b 40             	lea    edi,[ebx+0x40]
c00234db:	b9 0c 00 00 00       	mov    ecx,0xc
c00234e0:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c00234e4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00234e6:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c00234ec:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c00234f0:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c00234f4:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c00234fa:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00234fe:	48                   	dec    eax
c00234ff:	25 ff ff 3f 00       	and    eax,0x3fffff
c0023504:	89 c1                	mov    ecx,eax
c0023506:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c002350c:	25 00 00 c0 ff       	and    eax,0xffc00000
c0023511:	09 c8                	or     eax,ecx
c0023513:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0023519:	8a 83 8f 00 00 00    	mov    al,BYTE PTR [ebx+0x8f]
c002351f:	83 c8 80             	or     eax,0xffffff80
c0023522:	88 83 8f 00 00 00    	mov    BYTE PTR [ebx+0x8f],al
c0023528:	66 8b 03             	mov    ax,WORD PTR [ebx]
c002352b:	25 00 7f 00 00       	and    eax,0x7f00
c0023530:	0d 27 80 ff ff       	or     eax,0xffff8027
c0023535:	66 89 03             	mov    WORD PTR [ebx],ax
c0023538:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002353c:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0023540:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0023544:	c1 e8 10             	shr    eax,0x10
c0023547:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c002354a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002354e:	c1 e8 18             	shr    eax,0x18
c0023551:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0023554:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0023558:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c002355b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c002355f:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0023562:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0023566:	83 c4 10             	add    esp,0x10
c0023569:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002356d:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0023571:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0023575:	31 c0                	xor    eax,eax
c0023577:	8b 8b 20 01 00 00    	mov    ecx,DWORD PTR [ebx+0x120]
c002357d:	80 e1 88             	and    cl,0x88
c0023580:	74 0a                	je     c002358c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x188>
c0023582:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0023587:	74 0a                	je     c0023593 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x18f>
c0023589:	40                   	inc    eax
c002358a:	eb eb                	jmp    c0023577 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x173>
c002358c:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0023591:	75 43                	jne    c00235d6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d2>
c0023593:	83 ec 0c             	sub    esp,0xc
c0023596:	68 5c e4 02 c0       	push   0xc002e45c
c002359b:	e8 c6 39 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00235a0:	58                   	pop    eax
c00235a1:	5a                   	pop    edx
c00235a2:	68 71 e4 02 c0       	push   0xc002e471
c00235a7:	ff 35 f4 61 03 c0    	push   DWORD PTR ds:0xc00361f4
c00235ad:	e8 ea f8 fe ff       	call   c0012e9c <VgaText::puts(char const*)>
c00235b2:	59                   	pop    ecx
c00235b3:	5b                   	pop    ebx
c00235b4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00235b8:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c00235be:	e8 93 e9 ff ff       	call   c0021f56 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c00235c3:	5e                   	pop    esi
c00235c4:	5f                   	pop    edi
c00235c5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00235c9:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c00235cf:	e8 62 e9 ff ff       	call   c0021f36 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c00235d4:	eb 48                	jmp    c002361e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21a>
c00235d6:	b8 01 00 00 00       	mov    eax,0x1
c00235db:	88 d1                	mov    cl,dl
c00235dd:	d3 e0                	shl    eax,cl
c00235df:	be a8 e4 ff ff       	mov    esi,0xffffe4a8
c00235e4:	89 83 38 01 00 00    	mov    DWORD PTR [ebx+0x138],eax
c00235ea:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00235ee:	89 c7                	mov    edi,eax
c00235f0:	c1 e3 07             	shl    ebx,0x7
c00235f3:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c00235f7:	8b 83 38 01 00 00    	mov    eax,DWORD PTR [ebx+0x138]
c00235fd:	85 c7                	test   edi,eax
c00235ff:	8b 83 10 01 00 00    	mov    eax,DWORD PTR [ebx+0x110]
c0023605:	0f 84 a7 00 00 00    	je     c00236b2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2ae>
c002360b:	0f ba e0 1e          	bt     eax,0x1e
c002360f:	73 1a                	jae    c002362b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x227>
c0023611:	83 ec 0c             	sub    esp,0xc
c0023614:	68 83 e4 02 c0       	push   0xc002e483
c0023619:	e8 48 39 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c002361e:	83 c4 10             	add    esp,0x10
c0023621:	b8 01 00 00 00       	mov    eax,0x1
c0023626:	e9 ba 00 00 00       	jmp    c00236e5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2e1>
c002362b:	8d 86 70 17 00 00    	lea    eax,[esi+0x1770]
c0023631:	83 f8 0d             	cmp    eax,0xd
c0023634:	77 0b                	ja     c0023641 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x23d>
c0023636:	50                   	push   eax
c0023637:	50                   	push   eax
c0023638:	6a 00                	push   0x0
c002363a:	68 c8 00 00 00       	push   0xc8
c002363f:	eb 2a                	jmp    c002366b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x267>
c0023641:	8d 86 88 13 00 00    	lea    eax,[esi+0x1388]
c0023647:	83 f8 0d             	cmp    eax,0xd
c002364a:	77 0b                	ja     c0023657 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x253>
c002364c:	51                   	push   ecx
c002364d:	51                   	push   ecx
c002364e:	6a 00                	push   0x0
c0023650:	68 58 02 00 00       	push   0x258
c0023655:	eb 14                	jmp    c002366b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x267>
c0023657:	8d 86 a0 0f 00 00    	lea    eax,[esi+0xfa0]
c002365d:	83 f8 06             	cmp    eax,0x6
c0023660:	77 11                	ja     c0023673 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x26f>
c0023662:	52                   	push   edx
c0023663:	52                   	push   edx
c0023664:	6a 00                	push   0x0
c0023666:	68 dc 05 00 00       	push   0x5dc
c002366b:	e8 6c 3c ff ff       	call   c00172dc <milliTenthSleep(unsigned long long)>
c0023670:	83 c4 10             	add    esp,0x10
c0023673:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0023677:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c002367a:	75 06                	jne    c0023682 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x27e>
c002367c:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c0023680:	74 16                	je     c0023698 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x294>
c0023682:	83 fe 06             	cmp    esi,0x6
c0023685:	77 11                	ja     c0023698 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x294>
c0023687:	50                   	push   eax
c0023688:	50                   	push   eax
c0023689:	6a 00                	push   0x0
c002368b:	68 c4 09 00 00       	push   0x9c4
c0023690:	e8 47 3c ff ff       	call   c00172dc <milliTenthSleep(unsigned long long)>
c0023695:	83 c4 10             	add    esp,0x10
c0023698:	46                   	inc    esi
c0023699:	81 fe b9 0b 00 00    	cmp    esi,0xbb9
c002369f:	0f 85 52 ff ff ff    	jne    c00235f7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f3>
c00236a5:	83 ec 0c             	sub    esp,0xc
c00236a8:	68 96 e4 02 c0       	push   0xc002e496
c00236ad:	e9 67 ff ff ff       	jmp    c0023619 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x215>
c00236b2:	0f ba e0 1e          	bt     eax,0x1e
c00236b6:	73 0d                	jae    c00236c5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2c1>
c00236b8:	83 ec 0c             	sub    esp,0xc
c00236bb:	68 aa e4 02 c0       	push   0xc002e4aa
c00236c0:	e9 54 ff ff ff       	jmp    c0023619 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x215>
c00236c5:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00236ca:	74 17                	je     c00236e3 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2df>
c00236cc:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c00236d1:	74 10                	je     c00236e3 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2df>
c00236d3:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c00236d9:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c00236dd:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c00236e1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00236e3:	31 c0                	xor    eax,eax
c00236e5:	83 c4 2c             	add    esp,0x2c
c00236e8:	5b                   	pop    ebx
c00236e9:	5e                   	pop    esi
c00236ea:	5f                   	pop    edi
c00236eb:	5d                   	pop    ebp
c00236ec:	c3                   	ret    
c00236ed:	90                   	nop

c00236ee <SATAPI::eject()>:
c00236ee:	57                   	push   edi
c00236ef:	b9 03 00 00 00       	mov    ecx,0x3
c00236f4:	83 ec 18             	sub    esp,0x18
c00236f7:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00236fb:	fc                   	cld    
c00236fc:	31 c0                	xor    eax,eax
c00236fe:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0023700:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0023705:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c002370a:	50                   	push   eax
c002370b:	6a 00                	push   0x0
c002370d:	6a 00                	push   0x0
c002370f:	6a 00                	push   0x0
c0023711:	6a 00                	push   0x0
c0023713:	6a 02                	push   0x2
c0023715:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0023719:	50                   	push   eax
c002371a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002371e:	e8 e1 fc ff ff       	call   c0023404 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0023723:	83 c4 38             	add    esp,0x38
c0023726:	31 c0                	xor    eax,eax
c0023728:	5f                   	pop    edi
c0023729:	c3                   	ret    

c002372a <SATAPI::detectMedia()>:
c002372a:	53                   	push   ebx
c002372b:	83 ec 14             	sub    esp,0x14
c002372e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0023732:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c0023738:	e8 6f 86 fe ff       	call   c000bdac <VCache::writeWriteBuffer()>
c002373d:	59                   	pop    ecx
c002373e:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c0023744:	e8 53 86 fe ff       	call   c000bd9c <VCache::invalidateReadBuffer()>
c0023749:	c7 04 24 bf e4 02 c0 	mov    DWORD PTR [esp],0xc002e4bf
c0023750:	e8 11 38 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0023755:	83 c4 10             	add    esp,0x10
c0023758:	31 c0                	xor    eax,eax
c002375a:	8b 14 85 e0 5a 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffca520]
c0023761:	85 d2                	test   edx,edx
c0023763:	74 0f                	je     c0023774 <SATAPI::detectMedia()+0x4a>
c0023765:	39 9a 6c 01 00 00    	cmp    DWORD PTR [edx+0x16c],ebx
c002376b:	75 07                	jne    c0023774 <SATAPI::detectMedia()+0x4a>
c002376d:	c6 82 70 01 00 00 01 	mov    BYTE PTR [edx+0x170],0x1
c0023774:	40                   	inc    eax
c0023775:	83 f8 1a             	cmp    eax,0x1a
c0023778:	75 e0                	jne    c002375a <SATAPI::detectMedia()+0x30>
c002377a:	83 c4 08             	add    esp,0x8
c002377d:	5b                   	pop    ebx
c002377e:	c3                   	ret    
c002377f:	90                   	nop

c0023780 <SATAPI::open(int, int, void*)>:
c0023780:	56                   	push   esi
c0023781:	53                   	push   ebx
c0023782:	51                   	push   ecx
c0023783:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023787:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002378b:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0023795:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c002379b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002379f:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c00237a9:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c00237b3:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c00237ba:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c00237c0:	e8 95 cf fe ff       	call   c001075a <Phys::allocatePage()>
c00237c5:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c00237cb:	89 c6                	mov    esi,eax
c00237cd:	e8 88 cf fe ff       	call   c001075a <Phys::allocatePage()>
c00237d2:	81 c6 00 10 00 00    	add    esi,0x1000
c00237d8:	39 c6                	cmp    esi,eax
c00237da:	74 10                	je     c00237ec <SATAPI::open(int, int, void*)+0x6c>
c00237dc:	83 ec 0c             	sub    esp,0xc
c00237df:	68 d4 e4 02 c0       	push   0xc002e4d4
c00237e4:	e8 77 cd fe ff       	call   c0010560 <KePanic(char const*)>
c00237e9:	83 c4 10             	add    esp,0x10
c00237ec:	83 ec 0c             	sub    esp,0xc
c00237ef:	6a 02                	push   0x2
c00237f1:	e8 b1 02 ff ff       	call   c0013aa7 <Virt::allocateKernelVirtualPages(int)>
c00237f6:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c00237fc:	6a 03                	push   0x3
c00237fe:	50                   	push   eax
c00237ff:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c0023805:	ff 35 90 62 03 c0    	push   DWORD PTR ds:0xc0036290
c002380b:	e8 70 09 ff ff       	call   c0014180 <VAS::mapPage(unsigned long, unsigned long, int)>
c0023810:	83 c4 14             	add    esp,0x14
c0023813:	68 78 01 00 00       	push   0x178
c0023818:	e8 ef c8 fe ff       	call   c001010c <malloc>
c002381d:	83 c4 0c             	add    esp,0xc
c0023820:	6a 00                	push   0x0
c0023822:	68 ff ff ff 7f       	push   0x7fffffff
c0023827:	6a 00                	push   0x0
c0023829:	6a 00                	push   0x0
c002382b:	53                   	push   ebx
c002382c:	68 ea e4 02 c0       	push   0xc002e4ea
c0023831:	89 c6                	mov    esi,eax
c0023833:	50                   	push   eax
c0023834:	e8 c9 79 fe ff       	call   c000b202 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0023839:	83 c4 14             	add    esp,0x14
c002383c:	56                   	push   esi
c002383d:	e8 80 7a fe ff       	call   c000b2c2 <LogicalDisk::assignDriveLetter()>
c0023842:	5a                   	pop    edx
c0023843:	59                   	pop    ecx
c0023844:	0f be c0             	movsx  eax,al
c0023847:	50                   	push   eax
c0023848:	68 30 e3 02 c0       	push   0xc002e330
c002384d:	e8 14 37 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0023852:	58                   	pop    eax
c0023853:	5a                   	pop    edx
c0023854:	56                   	push   esi
c0023855:	53                   	push   ebx
c0023856:	e8 c3 6b fe ff       	call   c000a41e <Device::addChild(Device*)>
c002385b:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c0023861:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023864:	e8 01 70 fe ff       	call   c000a86a <PhysicalDisk::startCache()>
c0023869:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c0023870:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023873:	e8 b2 fe ff ff       	call   c002372a <SATAPI::detectMedia()>
c0023878:	83 c4 14             	add    esp,0x14
c002387b:	31 c0                	xor    eax,eax
c002387d:	5b                   	pop    ebx
c002387e:	5e                   	pop    esi
c002387f:	c3                   	ret    

c0023880 <SATAPI::read(unsigned long long, int, void*)>:
c0023880:	55                   	push   ebp
c0023881:	57                   	push   edi
c0023882:	56                   	push   esi
c0023883:	53                   	push   ebx
c0023884:	83 ec 3c             	sub    esp,0x3c
c0023887:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c002388b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c002388f:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0023893:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0023897:	83 fd 04             	cmp    ebp,0x4
c002389a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002389e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00238a2:	7e 10                	jle    c00238b4 <SATAPI::read(unsigned long long, int, void*)+0x34>
c00238a4:	83 ec 0c             	sub    esp,0xc
c00238a7:	68 f8 e4 02 c0       	push   0xc002e4f8
c00238ac:	e8 af cc fe ff       	call   c0010560 <KePanic(char const*)>
c00238b1:	83 c4 10             	add    esp,0x10
c00238b4:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c00238ba:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c00238c0:	51                   	push   ecx
c00238c1:	50                   	push   eax
c00238c2:	83 c0 02             	add    eax,0x2
c00238c5:	c1 e0 07             	shl    eax,0x7
c00238c8:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c00238ce:	50                   	push   eax
c00238cf:	52                   	push   edx
c00238d0:	e8 ab e6 ff ff       	call   c0021f80 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c00238d5:	8d 7c 24 28          	lea    edi,[esp+0x28]
c00238d9:	b9 03 00 00 00       	mov    ecx,0x3
c00238de:	fc                   	cld    
c00238df:	31 c0                	xor    eax,eax
c00238e1:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00238e3:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c00238e8:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c00238ed:	83 c4 0c             	add    esp,0xc
c00238f0:	6a 00                	push   0x0
c00238f2:	6a 00                	push   0x0
c00238f4:	6a 00                	push   0x0
c00238f6:	6a 00                	push   0x0
c00238f8:	6a 02                	push   0x2
c00238fa:	8d 44 24 30          	lea    eax,[esp+0x30]
c00238fe:	50                   	push   eax
c00238ff:	53                   	push   ebx
c0023900:	e8 ff fa ff ff       	call   c0023404 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0023905:	83 c4 20             	add    esp,0x20
c0023908:	85 c0                	test   eax,eax
c002390a:	89 c6                	mov    esi,eax
c002390c:	75 46                	jne    c0023954 <SATAPI::read(unsigned long long, int, void*)+0xd4>
c002390e:	8d 7c 24 24          	lea    edi,[esp+0x24]
c0023912:	b9 03 00 00 00       	mov    ecx,0x3
c0023917:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0023919:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002391d:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c0023922:	0f c8                	bswap  eax
c0023924:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c0023928:	89 e8                	mov    eax,ebp
c002392a:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c002392e:	50                   	push   eax
c002392f:	55                   	push   ebp
c0023930:	ff 74 24 68          	push   DWORD PTR [esp+0x68]
c0023934:	c1 e5 0b             	shl    ebp,0xb
c0023937:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002393b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002393f:	55                   	push   ebp
c0023940:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0023944:	50                   	push   eax
c0023945:	53                   	push   ebx
c0023946:	e8 b9 fa ff ff       	call   c0023404 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c002394b:	83 c4 20             	add    esp,0x20
c002394e:	85 c0                	test   eax,eax
c0023950:	89 c6                	mov    esi,eax
c0023952:	74 0c                	je     c0023960 <SATAPI::read(unsigned long long, int, void*)+0xe0>
c0023954:	83 ec 0c             	sub    esp,0xc
c0023957:	53                   	push   ebx
c0023958:	e8 cd fd ff ff       	call   c002372a <SATAPI::detectMedia()>
c002395d:	83 c4 10             	add    esp,0x10
c0023960:	83 c4 3c             	add    esp,0x3c
c0023963:	89 f0                	mov    eax,esi
c0023965:	5b                   	pop    ebx
c0023966:	5e                   	pop    esi
c0023967:	5f                   	pop    edi
c0023968:	5d                   	pop    ebp
c0023969:	c3                   	ret    
c002396a:	66 90                	xchg   ax,ax

c002396c <APICTimer::close(int, int, void*)>:
c002396c:	b8 00 00 00 00       	mov    eax,0x0
c0023971:	c3                   	ret    
c0023972:	66 90                	xchg   ax,ax

c0023974 <apicTimerHandler(regs*, void*)>:
c0023974:	83 ec 0c             	sub    esp,0xc
c0023977:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002397b:	8b 08                	mov    ecx,DWORD PTR [eax]
c002397d:	b8 10 27 00 00       	mov    eax,0x2710
c0023982:	ba 00 00 00 00       	mov    edx,0x0
c0023987:	f7 f1                	div    ecx
c0023989:	83 ec 0c             	sub    esp,0xc
c002398c:	50                   	push   eax
c002398d:	e8 2e 81 fe ff       	call   c000bac0 <timerHandler(unsigned int)>
c0023992:	83 c4 10             	add    esp,0x10
c0023995:	90                   	nop
c0023996:	83 c4 0c             	add    esp,0xc
c0023999:	c3                   	ret    
c002399a:	66 90                	xchg   ax,ax

c002399c <APICTimer::open(int, int, void*)>:
c002399c:	83 ec 0c             	sub    esp,0xc
c002399f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00239a3:	8b 00                	mov    eax,DWORD PTR [eax]
c00239a5:	83 c0 24             	add    eax,0x24
c00239a8:	8b 00                	mov    eax,DWORD PTR [eax]
c00239aa:	83 ec 08             	sub    esp,0x8
c00239ad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00239b1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00239b5:	ff d0                	call   eax
c00239b7:	83 c4 10             	add    esp,0x10
c00239ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00239be:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00239c2:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00239c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00239cc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00239d0:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c00239d6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00239da:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c00239e0:	83 ec 0c             	sub    esp,0xc
c00239e3:	51                   	push   ecx
c00239e4:	6a 01                	push   0x1
c00239e6:	68 74 39 02 c0       	push   0xc0023974
c00239eb:	52                   	push   edx
c00239ec:	50                   	push   eax
c00239ed:	e8 d8 69 fe ff       	call   c000a3ca <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00239f2:	83 c4 20             	add    esp,0x20
c00239f5:	89 c2                	mov    edx,eax
c00239f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00239fb:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0023a01:	b8 00 00 00 00       	mov    eax,0x0
c0023a06:	83 c4 0c             	add    esp,0xc
c0023a09:	c3                   	ret    
c0023a0a:	66 90                	xchg   ax,ax

c0023a0c <APICTimer::write(int)>:
c0023a0c:	83 ec 0c             	sub    esp,0xc
c0023a0f:	83 ec 0c             	sub    esp,0xc
c0023a12:	68 5c e5 02 c0       	push   0xc002e55c
c0023a17:	e8 44 cb fe ff       	call   c0010560 <KePanic(char const*)>
c0023a1c:	83 c4 10             	add    esp,0x10
c0023a1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023a23:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0023a27:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0023a2d:	90                   	nop
c0023a2e:	83 c4 0c             	add    esp,0xc
c0023a31:	c3                   	ret    
c0023a32:	66 90                	xchg   ax,ax

c0023a34 <APICTimer::APICTimer()>:
c0023a34:	83 ec 0c             	sub    esp,0xc
c0023a37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023a3b:	83 ec 08             	sub    esp,0x8
c0023a3e:	68 6c e5 02 c0       	push   0xc002e56c
c0023a43:	50                   	push   eax
c0023a44:	e8 ab 7f fe ff       	call   c000b9f4 <Timer::Timer(char const*)>
c0023a49:	83 c4 10             	add    esp,0x10
c0023a4c:	ba 80 e5 02 c0       	mov    edx,0xc002e580
c0023a51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023a55:	89 10                	mov    DWORD PTR [eax],edx
c0023a57:	90                   	nop
c0023a58:	83 c4 0c             	add    esp,0xc
c0023a5b:	c3                   	ret    

c0023a5c <PIT::write(int)>:
c0023a5c:	83 ec 10             	sub    esp,0x10
c0023a5f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023a63:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0023a67:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0023a6d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023a71:	a3 b8 8d 03 c0       	mov    ds:0xc0038db8,eax
c0023a76:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0023a7b:	89 c2                	mov    edx,eax
c0023a7d:	c1 fa 1f             	sar    edx,0x1f
c0023a80:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c0023a84:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023a88:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c0023a8f:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c0023a94:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0023a98:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0023a9d:	ee                   	out    dx,al
c0023a9e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023aa2:	0f b6 c0             	movzx  eax,al
c0023aa5:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c0023aac:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0023ab0:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0023ab4:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0023ab9:	ee                   	out    dx,al
c0023aba:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023abe:	c1 f8 08             	sar    eax,0x8
c0023ac1:	0f b6 c0             	movzx  eax,al
c0023ac4:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c0023acb:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0023acf:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0023ad3:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0023ad8:	ee                   	out    dx,al
c0023ad9:	90                   	nop
c0023ada:	83 c4 10             	add    esp,0x10
c0023add:	c3                   	ret    
c0023ade:	66 90                	xchg   ax,ax

c0023ae0 <pitHandler(regs*, void*)>:
c0023ae0:	83 ec 0c             	sub    esp,0xc
c0023ae3:	8b 0d b8 8d 03 c0    	mov    ecx,DWORD PTR ds:0xc0038db8
c0023ae9:	b8 10 27 00 00       	mov    eax,0x2710
c0023aee:	89 c2                	mov    edx,eax
c0023af0:	c1 fa 1f             	sar    edx,0x1f
c0023af3:	f7 f9                	idiv   ecx
c0023af5:	83 ec 0c             	sub    esp,0xc
c0023af8:	50                   	push   eax
c0023af9:	e8 c2 7f fe ff       	call   c000bac0 <timerHandler(unsigned int)>
c0023afe:	83 c4 10             	add    esp,0x10
c0023b01:	90                   	nop
c0023b02:	83 c4 0c             	add    esp,0xc
c0023b05:	c3                   	ret    
c0023b06:	66 90                	xchg   ax,ax

c0023b08 <PIT::open(int, int, void*)>:
c0023b08:	83 ec 0c             	sub    esp,0xc
c0023b0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023b0f:	8b 00                	mov    eax,DWORD PTR [eax]
c0023b11:	83 c0 24             	add    eax,0x24
c0023b14:	8b 00                	mov    eax,DWORD PTR [eax]
c0023b16:	83 ec 08             	sub    esp,0x8
c0023b19:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023b1d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023b21:	ff d0                	call   eax
c0023b23:	83 c4 10             	add    esp,0x10
c0023b26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023b2a:	83 ec 0c             	sub    esp,0xc
c0023b2d:	6a 00                	push   0x0
c0023b2f:	6a 01                	push   0x1
c0023b31:	68 e0 3a 02 c0       	push   0xc0023ae0
c0023b36:	6a 00                	push   0x0
c0023b38:	50                   	push   eax
c0023b39:	e8 8c 68 fe ff       	call   c000a3ca <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023b3e:	83 c4 20             	add    esp,0x20
c0023b41:	89 c2                	mov    edx,eax
c0023b43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023b47:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0023b4d:	b8 00 00 00 00       	mov    eax,0x0
c0023b52:	83 c4 0c             	add    esp,0xc
c0023b55:	c3                   	ret    
c0023b56:	66 90                	xchg   ax,ax

c0023b58 <PIT::close(int, int, void*)>:
c0023b58:	83 ec 0c             	sub    esp,0xc
c0023b5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023b5f:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0023b69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023b6d:	6a 01                	push   0x1
c0023b6f:	68 e0 3a 02 c0       	push   0xc0023ae0
c0023b74:	6a 00                	push   0x0
c0023b76:	50                   	push   eax
c0023b77:	e8 84 68 fe ff       	call   c000a400 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c0023b7c:	83 c4 10             	add    esp,0x10
c0023b7f:	b8 00 00 00 00       	mov    eax,0x0
c0023b84:	83 c4 0c             	add    esp,0xc
c0023b87:	c3                   	ret    

c0023b88 <PIT::PIT()>:
c0023b88:	83 ec 0c             	sub    esp,0xc
c0023b8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023b8f:	83 ec 08             	sub    esp,0x8
c0023b92:	68 a8 e5 02 c0       	push   0xc002e5a8
c0023b97:	50                   	push   eax
c0023b98:	e8 57 7e fe ff       	call   c000b9f4 <Timer::Timer(char const*)>
c0023b9d:	83 c4 10             	add    esp,0x10
c0023ba0:	ba d0 e5 02 c0       	mov    edx,0xc002e5d0
c0023ba5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023ba9:	89 10                	mov    DWORD PTR [eax],edx
c0023bab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023baf:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0023bb5:	0f b6 d0             	movzx  edx,al
c0023bb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023bbc:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c0023bc3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023bc7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0023bcd:	0f b6 d0             	movzx  edx,al
c0023bd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023bd4:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c0023bd9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023bdd:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0023be3:	8d 50 01             	lea    edx,[eax+0x1]
c0023be6:	88 d1                	mov    cl,dl
c0023be8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023bec:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c0023bf2:	0f b6 d0             	movzx  edx,al
c0023bf5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023bf9:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0023bfd:	83 e1 3f             	and    ecx,0x3f
c0023c00:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0023c04:	90                   	nop
c0023c05:	83 c4 0c             	add    esp,0xc
c0023c08:	c3                   	ret    
c0023c09:	66 90                	xchg   ax,ax
c0023c0b:	66 90                	xchg   ax,ax
c0023c0d:	66 90                	xchg   ax,ax
c0023c0f:	90                   	nop

c0023c10 <avxDetect>:
c0023c10:	b8 01 00 00 00       	mov    eax,0x1
c0023c15:	0f a2                	cpuid  
c0023c17:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c0023c1d:	74 15                	je     c0023c34 <avxDetect.noAVX>
c0023c1f:	b8 01 00 00 00       	mov    eax,0x1
c0023c24:	0f a2                	cpuid  
c0023c26:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c0023c2c:	74 06                	je     c0023c34 <avxDetect.noAVX>
c0023c2e:	b8 01 00 00 00       	mov    eax,0x1
c0023c33:	c3                   	ret    

c0023c34 <avxDetect.noAVX>:
c0023c34:	b8 00 00 00 00       	mov    eax,0x0
c0023c39:	c3                   	ret    

c0023c3a <avxSave>:
c0023c3a:	53                   	push   ebx
c0023c3b:	52                   	push   edx
c0023c3c:	31 c0                	xor    eax,eax
c0023c3e:	48                   	dec    eax
c0023c3f:	89 c2                	mov    edx,eax
c0023c41:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0023c45:	0f ae 23             	xsave  [ebx]
c0023c48:	5a                   	pop    edx
c0023c49:	5b                   	pop    ebx
c0023c4a:	c3                   	ret    

c0023c4b <avxLoad>:
c0023c4b:	53                   	push   ebx
c0023c4c:	52                   	push   edx
c0023c4d:	31 c0                	xor    eax,eax
c0023c4f:	48                   	dec    eax
c0023c50:	89 c2                	mov    edx,eax
c0023c52:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0023c56:	0f ae 2b             	xrstor [ebx]
c0023c59:	5a                   	pop    edx
c0023c5a:	5b                   	pop    ebx
c0023c5b:	c3                   	ret    

c0023c5c <avxInit>:
c0023c5c:	e8 17 03 00 00       	call   c0023f78 <sseInit>
c0023c61:	50                   	push   eax
c0023c62:	51                   	push   ecx
c0023c63:	0f 20 e0             	mov    eax,cr4
c0023c66:	0d 00 00 04 00       	or     eax,0x40000
c0023c6b:	0f 22 e0             	mov    cr4,eax
c0023c6e:	31 c9                	xor    ecx,ecx
c0023c70:	0f 01 d0             	xgetbv 
c0023c73:	0d 07 00 00 00       	or     eax,0x7
c0023c78:	0f 01 d1             	xsetbv 
c0023c7b:	59                   	pop    ecx
c0023c7c:	58                   	pop    eax
c0023c7d:	c3                   	ret    

c0023c7e <avxClose>:
c0023c7e:	c3                   	ret    
c0023c7f:	90                   	nop

c0023c80 <isr0>:
c0023c80:	fa                   	cli    
c0023c81:	68 00 00 00 00       	push   0x0
c0023c86:	68 00 00 00 00       	push   0x0
c0023c8b:	e9 56 01 00 00       	jmp    c0023de6 <int_common_stub>

c0023c90 <isr1>:
c0023c90:	fa                   	cli    
c0023c91:	6a 00                	push   0x0
c0023c93:	6a 01                	push   0x1
c0023c95:	e9 4c 01 00 00       	jmp    c0023de6 <int_common_stub>

c0023c9a <isr2>:
c0023c9a:	fa                   	cli    
c0023c9b:	6a 00                	push   0x0
c0023c9d:	6a 02                	push   0x2
c0023c9f:	e9 42 01 00 00       	jmp    c0023de6 <int_common_stub>

c0023ca4 <isr3>:
c0023ca4:	fa                   	cli    
c0023ca5:	6a 00                	push   0x0
c0023ca7:	6a 03                	push   0x3
c0023ca9:	e9 38 01 00 00       	jmp    c0023de6 <int_common_stub>

c0023cae <isr4>:
c0023cae:	fa                   	cli    
c0023caf:	6a 00                	push   0x0
c0023cb1:	6a 04                	push   0x4
c0023cb3:	e9 2e 01 00 00       	jmp    c0023de6 <int_common_stub>

c0023cb8 <isr5>:
c0023cb8:	fa                   	cli    
c0023cb9:	6a 00                	push   0x0
c0023cbb:	6a 05                	push   0x5
c0023cbd:	e9 24 01 00 00       	jmp    c0023de6 <int_common_stub>

c0023cc2 <isr6>:
c0023cc2:	fa                   	cli    
c0023cc3:	6a 00                	push   0x0
c0023cc5:	6a 06                	push   0x6
c0023cc7:	e9 1a 01 00 00       	jmp    c0023de6 <int_common_stub>

c0023ccc <isr7>:
c0023ccc:	fa                   	cli    
c0023ccd:	6a 00                	push   0x0
c0023ccf:	6a 07                	push   0x7
c0023cd1:	e9 10 01 00 00       	jmp    c0023de6 <int_common_stub>

c0023cd6 <isr8>:
c0023cd6:	fa                   	cli    
c0023cd7:	6a 08                	push   0x8
c0023cd9:	e9 08 01 00 00       	jmp    c0023de6 <int_common_stub>

c0023cde <isr9>:
c0023cde:	fa                   	cli    
c0023cdf:	6a 00                	push   0x0
c0023ce1:	6a 09                	push   0x9
c0023ce3:	e9 fe 00 00 00       	jmp    c0023de6 <int_common_stub>

c0023ce8 <isr10>:
c0023ce8:	fa                   	cli    
c0023ce9:	6a 0a                	push   0xa
c0023ceb:	e9 f6 00 00 00       	jmp    c0023de6 <int_common_stub>

c0023cf0 <isr11>:
c0023cf0:	fa                   	cli    
c0023cf1:	6a 0b                	push   0xb
c0023cf3:	e9 ee 00 00 00       	jmp    c0023de6 <int_common_stub>

c0023cf8 <isr12>:
c0023cf8:	fa                   	cli    
c0023cf9:	6a 0c                	push   0xc
c0023cfb:	e9 e6 00 00 00       	jmp    c0023de6 <int_common_stub>

c0023d00 <isr13>:
c0023d00:	fa                   	cli    
c0023d01:	6a 0d                	push   0xd
c0023d03:	53                   	push   ebx
c0023d04:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0023d08:	81 fb ab 3e 02 c0    	cmp    ebx,0xc0023eab
c0023d0e:	5b                   	pop    ebx
c0023d0f:	0f 84 98 01 00 00    	je     c0023ead <finishSignal2>
c0023d15:	e9 cc 00 00 00       	jmp    c0023de6 <int_common_stub>

c0023d1a <isr14>:
c0023d1a:	fa                   	cli    
c0023d1b:	6a 0e                	push   0xe
c0023d1d:	e9 c4 00 00 00       	jmp    c0023de6 <int_common_stub>

c0023d22 <isr15>:
c0023d22:	fa                   	cli    
c0023d23:	6a 00                	push   0x0
c0023d25:	6a 0f                	push   0xf
c0023d27:	e9 ba 00 00 00       	jmp    c0023de6 <int_common_stub>

c0023d2c <isr16>:
c0023d2c:	fa                   	cli    
c0023d2d:	6a 00                	push   0x0
c0023d2f:	6a 10                	push   0x10
c0023d31:	e9 b0 00 00 00       	jmp    c0023de6 <int_common_stub>

c0023d36 <isr17>:
c0023d36:	fa                   	cli    
c0023d37:	6a 00                	push   0x0
c0023d39:	6a 11                	push   0x11
c0023d3b:	e9 a6 00 00 00       	jmp    c0023de6 <int_common_stub>

c0023d40 <isr18>:
c0023d40:	fa                   	cli    
c0023d41:	6a 00                	push   0x0
c0023d43:	6a 12                	push   0x12
c0023d45:	e9 9c 00 00 00       	jmp    c0023de6 <int_common_stub>

c0023d4a <irq3>:
c0023d4a:	fa                   	cli    
c0023d4b:	6a 00                	push   0x0
c0023d4d:	6a 23                	push   0x23
c0023d4f:	e9 92 00 00 00       	jmp    c0023de6 <int_common_stub>

c0023d54 <irq4>:
c0023d54:	fa                   	cli    
c0023d55:	6a 00                	push   0x0
c0023d57:	6a 24                	push   0x24
c0023d59:	e9 88 00 00 00       	jmp    c0023de6 <int_common_stub>

c0023d5e <irq5>:
c0023d5e:	fa                   	cli    
c0023d5f:	6a 00                	push   0x0
c0023d61:	6a 25                	push   0x25
c0023d63:	e9 7e 00 00 00       	jmp    c0023de6 <int_common_stub>

c0023d68 <irq6>:
c0023d68:	fa                   	cli    
c0023d69:	6a 00                	push   0x0
c0023d6b:	6a 26                	push   0x26
c0023d6d:	e9 74 00 00 00       	jmp    c0023de6 <int_common_stub>

c0023d72 <irq7>:
c0023d72:	fa                   	cli    
c0023d73:	6a 00                	push   0x0
c0023d75:	6a 27                	push   0x27
c0023d77:	e9 6a 00 00 00       	jmp    c0023de6 <int_common_stub>

c0023d7c <irq8>:
c0023d7c:	fa                   	cli    
c0023d7d:	6a 00                	push   0x0
c0023d7f:	6a 28                	push   0x28
c0023d81:	e9 60 00 00 00       	jmp    c0023de6 <int_common_stub>

c0023d86 <irq9>:
c0023d86:	fa                   	cli    
c0023d87:	6a 00                	push   0x0
c0023d89:	6a 29                	push   0x29
c0023d8b:	e9 56 00 00 00       	jmp    c0023de6 <int_common_stub>

c0023d90 <irq10>:
c0023d90:	fa                   	cli    
c0023d91:	6a 00                	push   0x0
c0023d93:	6a 2a                	push   0x2a
c0023d95:	e9 4c 00 00 00       	jmp    c0023de6 <int_common_stub>

c0023d9a <irq11>:
c0023d9a:	fa                   	cli    
c0023d9b:	6a 00                	push   0x0
c0023d9d:	6a 2b                	push   0x2b
c0023d9f:	e9 42 00 00 00       	jmp    c0023de6 <int_common_stub>

c0023da4 <irq12>:
c0023da4:	fa                   	cli    
c0023da5:	6a 00                	push   0x0
c0023da7:	6a 2c                	push   0x2c
c0023da9:	e9 38 00 00 00       	jmp    c0023de6 <int_common_stub>

c0023dae <irq13>:
c0023dae:	fa                   	cli    
c0023daf:	6a 00                	push   0x0
c0023db1:	6a 2d                	push   0x2d
c0023db3:	e9 2e 00 00 00       	jmp    c0023de6 <int_common_stub>

c0023db8 <irq14>:
c0023db8:	fa                   	cli    
c0023db9:	6a 00                	push   0x0
c0023dbb:	6a 2e                	push   0x2e
c0023dbd:	e9 24 00 00 00       	jmp    c0023de6 <int_common_stub>

c0023dc2 <irq15>:
c0023dc2:	fa                   	cli    
c0023dc3:	6a 00                	push   0x0
c0023dc5:	6a 2f                	push   0x2f
c0023dc7:	e9 1a 00 00 00       	jmp    c0023de6 <int_common_stub>

c0023dcc <irq1>:
c0023dcc:	fa                   	cli    
c0023dcd:	6a 00                	push   0x0
c0023dcf:	6a 21                	push   0x21
c0023dd1:	eb 13                	jmp    c0023de6 <int_common_stub>

c0023dd3 <irq2>:
c0023dd3:	fa                   	cli    
c0023dd4:	6a 00                	push   0x0
c0023dd6:	6a 22                	push   0x22
c0023dd8:	eb 0c                	jmp    c0023de6 <int_common_stub>

c0023dda <isr96>:
c0023dda:	6a 00                	push   0x0
c0023ddc:	6a 60                	push   0x60
c0023dde:	fb                   	sti    
c0023ddf:	eb 05                	jmp    c0023de6 <int_common_stub>

c0023de1 <irq0>:
c0023de1:	fa                   	cli    
c0023de2:	6a 00                	push   0x0
c0023de4:	6a 20                	push   0x20

c0023de6 <int_common_stub>:
c0023de6:	60                   	pusha  
c0023de7:	1e                   	push   ds
c0023de8:	06                   	push   es
c0023de9:	0f a0                	push   fs
c0023deb:	0f a8                	push   gs
c0023ded:	66 b8 10 00          	mov    ax,0x10
c0023df1:	66 8e d8             	mov    ds,ax
c0023df4:	66 8e c0             	mov    es,ax
c0023df7:	66 8e e0             	mov    fs,ax
c0023dfa:	66 8e e8             	mov    gs,ax
c0023dfd:	54                   	push   esp
c0023dfe:	fc                   	cld    
c0023dff:	e8 b6 79 ff ff       	call   c001b7ba <int_handler>
c0023e04:	81 c4 04 00 00 00    	add    esp,0x4
c0023e0a:	e8 10 db fe ff       	call   c001191f <KiCheckSignalZ>
c0023e0f:	85 c0                	test   eax,eax
c0023e11:	75 0e                	jne    c0023e21 <doSignals>
c0023e13:	0f a9                	pop    gs
c0023e15:	0f a1                	pop    fs
c0023e17:	07                   	pop    es
c0023e18:	1f                   	pop    ds
c0023e19:	61                   	popa   
c0023e1a:	81 c4 08 00 00 00    	add    esp,0x8
c0023e20:	cf                   	iret   

c0023e21 <doSignals>:
c0023e21:	0f a9                	pop    gs
c0023e23:	0f a1                	pop    fs
c0023e25:	07                   	pop    es
c0023e26:	1f                   	pop    ds
c0023e27:	a3 08 20 00 c2       	mov    ds:0xc2002008,eax
c0023e2c:	61                   	popa   
c0023e2d:	53                   	push   ebx
c0023e2e:	8b 1d 08 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002008
c0023e34:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0023e37:	5b                   	pop    ebx
c0023e38:	a1 08 20 00 c2       	mov    eax,ds:0xc2002008
c0023e3d:	89 58 10             	mov    DWORD PTR [eax+0x10],ebx
c0023e40:	89 48 14             	mov    DWORD PTR [eax+0x14],ecx
c0023e43:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023e46:	89 70 1c             	mov    DWORD PTR [eax+0x1c],esi
c0023e49:	89 78 20             	mov    DWORD PTR [eax+0x20],edi
c0023e4c:	89 68 24             	mov    DWORD PTR [eax+0x24],ebp
c0023e4f:	81 c4 08 00 00 00    	add    esp,0x8
c0023e55:	5e                   	pop    esi
c0023e56:	5b                   	pop    ebx
c0023e57:	59                   	pop    ecx
c0023e58:	5a                   	pop    edx
c0023e59:	89 70 2c             	mov    DWORD PTR [eax+0x2c],esi
c0023e5c:	89 48 30             	mov    DWORD PTR [eax+0x30],ecx
c0023e5f:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0023e62:	52                   	push   edx
c0023e63:	51                   	push   ecx
c0023e64:	53                   	push   ebx
c0023e65:	56                   	push   esi
c0023e66:	81 ec 08 00 00 00    	sub    esp,0x8
c0023e6c:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c0023e6f:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c0023e72:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
c0023e75:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023e78:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0023e7b:	60                   	pusha  
c0023e7c:	8b 35 08 20 00 c2    	mov    esi,DWORD PTR ds:0xc2002008
c0023e82:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0023e85:	89 e3                	mov    ebx,esp
c0023e87:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c0023e8a:	52                   	push   edx
c0023e8b:	68 ab 3e 02 c0       	push   0xc0023eab
c0023e90:	89 63 34             	mov    DWORD PTR [ebx+0x34],esp
c0023e93:	89 dc                	mov    esp,ebx
c0023e95:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0023e98:	68 23 00 00 00       	push   0x23
c0023e9d:	51                   	push   ecx
c0023e9e:	68 02 02 00 00       	push   0x202
c0023ea3:	68 1b 00 00 00       	push   0x1b
c0023ea8:	ff 36                	push   DWORD PTR [esi]
c0023eaa:	cf                   	iret   

c0023eab <finishSignal>:
c0023eab:	cd 0f                	int    0xf

c0023ead <finishSignal2>:
c0023ead:	ff 35 08 20 00 c2    	push   DWORD PTR ds:0xc2002008
c0023eb3:	e8 f3 da fe ff       	call   c00119ab <KiFinishSignalZ>
c0023eb8:	8b 2d 08 20 00 c2    	mov    ebp,DWORD PTR ds:0xc2002008
c0023ebe:	68 23 00 00 00       	push   0x23
c0023ec3:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c0023ec6:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c0023ec9:	68 1b 00 00 00       	push   0x1b
c0023ece:	ff 75 2c             	push   DWORD PTR [ebp+0x2c]
c0023ed1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0023ed4:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c0023ed7:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0023eda:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0023edd:	8b 75 1c             	mov    esi,DWORD PTR [ebp+0x1c]
c0023ee0:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c0023ee3:	8b 6d 24             	mov    ebp,DWORD PTR [ebp+0x24]
c0023ee6:	cf                   	iret   
c0023ee7:	90                   	nop

c0023ee8 <irq16>:
c0023ee8:	fa                   	cli    
c0023ee9:	6a 00                	push   0x0
c0023eeb:	6a 30                	push   0x30
c0023eed:	e9 f4 fe ff ff       	jmp    c0023de6 <int_common_stub>

c0023ef2 <irq17>:
c0023ef2:	fa                   	cli    
c0023ef3:	6a 00                	push   0x0
c0023ef5:	6a 31                	push   0x31
c0023ef7:	e9 ea fe ff ff       	jmp    c0023de6 <int_common_stub>

c0023efc <irq18>:
c0023efc:	fa                   	cli    
c0023efd:	6a 00                	push   0x0
c0023eff:	6a 32                	push   0x32
c0023f01:	e9 e0 fe ff ff       	jmp    c0023de6 <int_common_stub>

c0023f06 <irq19>:
c0023f06:	fa                   	cli    
c0023f07:	6a 00                	push   0x0
c0023f09:	6a 33                	push   0x33
c0023f0b:	e9 d6 fe ff ff       	jmp    c0023de6 <int_common_stub>

c0023f10 <irq20>:
c0023f10:	fa                   	cli    
c0023f11:	6a 00                	push   0x0
c0023f13:	6a 34                	push   0x34
c0023f15:	e9 cc fe ff ff       	jmp    c0023de6 <int_common_stub>

c0023f1a <irq21>:
c0023f1a:	fa                   	cli    
c0023f1b:	6a 00                	push   0x0
c0023f1d:	6a 35                	push   0x35
c0023f1f:	e9 c2 fe ff ff       	jmp    c0023de6 <int_common_stub>

c0023f24 <irq22>:
c0023f24:	fa                   	cli    
c0023f25:	6a 00                	push   0x0
c0023f27:	6a 36                	push   0x36
c0023f29:	e9 b8 fe ff ff       	jmp    c0023de6 <int_common_stub>

c0023f2e <irq23>:
c0023f2e:	fa                   	cli    
c0023f2f:	6a 00                	push   0x0
c0023f31:	6a 37                	push   0x37
c0023f33:	e9 ae fe ff ff       	jmp    c0023de6 <int_common_stub>
c0023f38:	66 90                	xchg   ax,ax
c0023f3a:	66 90                	xchg   ax,ax
c0023f3c:	66 90                	xchg   ax,ax
c0023f3e:	66 90                	xchg   ax,ax

c0023f40 <i386GetRDRAND>:
c0023f40:	b9 64 00 00 00       	mov    ecx,0x64

c0023f45 <retry>:
c0023f45:	0f c7 f0             	rdrand eax
c0023f48:	72 05                	jb     c0023f4f <retry.done>
c0023f4a:	e2 f9                	loop   c0023f45 <retry>

c0023f4c <retry.fail>:
c0023f4c:	31 c0                	xor    eax,eax
c0023f4e:	c3                   	ret    

c0023f4f <retry.done>:
c0023f4f:	c3                   	ret    

c0023f50 <sseDetect>:
c0023f50:	b8 01 00 00 00       	mov    eax,0x1
c0023f55:	0f a2                	cpuid  
c0023f57:	f7 c2 00 00 00 02    	test   edx,0x2000000
c0023f5d:	74 06                	je     c0023f65 <sseDetect.noSSE>
c0023f5f:	b8 01 00 00 00       	mov    eax,0x1
c0023f64:	c3                   	ret    

c0023f65 <sseDetect.noSSE>:
c0023f65:	31 c0                	xor    eax,eax
c0023f67:	c3                   	ret    

c0023f68 <sseSave>:
c0023f68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023f6c:	0f ae 00             	fxsave [eax]
c0023f6f:	c3                   	ret    

c0023f70 <sseLoad>:
c0023f70:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023f74:	0f ae 08             	fxrstor [eax]
c0023f77:	c3                   	ret    

c0023f78 <sseInit>:
c0023f78:	e8 48 00 00 00       	call   c0023fc5 <x87Init>
c0023f7d:	0f 20 e0             	mov    eax,cr4
c0023f80:	66 0d 00 06          	or     ax,0x600
c0023f84:	0f 22 e0             	mov    cr4,eax
c0023f87:	c3                   	ret    

c0023f88 <sseClose>:
c0023f88:	c3                   	ret    
c0023f89:	66 90                	xchg   ax,ax
c0023f8b:	66 90                	xchg   ax,ax
c0023f8d:	66 90                	xchg   ax,ax
c0023f8f:	90                   	nop

c0023f90 <value_37F>:
c0023f90:	7f 03                	jg     c0023f95 <value_37A+0x1>

c0023f92 <value_37E>:
c0023f92:	7e 03                	jle    c0023f97 <x87Detect+0x1>

c0023f94 <value_37A>:
c0023f94:	7a 03                	jp     c0023f99 <x87Detect+0x3>

c0023f96 <x87Detect>:
c0023f96:	53                   	push   ebx
c0023f97:	51                   	push   ecx
c0023f98:	52                   	push   edx
c0023f99:	b8 01 00 00 00       	mov    eax,0x1
c0023f9e:	0f a2                	cpuid  
c0023fa0:	f7 c2 01 00 00 00    	test   edx,0x1
c0023fa6:	74 06                	je     c0023fae <x87Detect.nox87>
c0023fa8:	b8 01 00 00 00       	mov    eax,0x1
c0023fad:	c3                   	ret    

c0023fae <x87Detect.nox87>:
c0023fae:	b8 00 00 00 00       	mov    eax,0x0
c0023fb3:	5a                   	pop    edx
c0023fb4:	59                   	pop    ecx
c0023fb5:	5b                   	pop    ebx
c0023fb6:	c3                   	ret    

c0023fb7 <x87Save>:
c0023fb7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023fbb:	dd 30                	fnsave [eax]
c0023fbd:	c3                   	ret    

c0023fbe <x87Load>:
c0023fbe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023fc2:	dd 20                	frstor [eax]
c0023fc4:	c3                   	ret    

c0023fc5 <x87Init>:
c0023fc5:	0f 20 c0             	mov    eax,cr0
c0023fc8:	66 25 fb ff          	and    ax,0xfffb
c0023fcc:	66 0d 22 00          	or     ax,0x22
c0023fd0:	0f 22 c0             	mov    cr0,eax
c0023fd3:	db e3                	fninit 
c0023fd5:	0f 06                	clts   
c0023fd7:	d9 2d 94 3f 02 c0    	fldcw  WORD PTR ds:0xc0023f94
c0023fdd:	c3                   	ret    

c0023fde <x87Close>:
c0023fde:	c3                   	ret    
c0023fdf:	90                   	nop

c0023fe0 <__do_global_ctors_aux>:
c0023fe0:	a1 38 99 02 c0       	mov    eax,ds:0xc0029938
c0023fe5:	83 f8 ff             	cmp    eax,0xffffffff
c0023fe8:	74 1a                	je     c0024004 <__do_global_ctors_aux+0x24>
c0023fea:	55                   	push   ebp
c0023feb:	89 e5                	mov    ebp,esp
c0023fed:	53                   	push   ebx
c0023fee:	52                   	push   edx
c0023fef:	bb 38 99 02 c0       	mov    ebx,0xc0029938
c0023ff4:	ff d0                	call   eax
c0023ff6:	83 eb 04             	sub    ebx,0x4
c0023ff9:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023ffb:	83 f8 ff             	cmp    eax,0xffffffff
c0023ffe:	75 f4                	jne    c0023ff4 <__do_global_ctors_aux+0x14>
c0024000:	58                   	pop    eax
c0024001:	5b                   	pop    ebx
c0024002:	5d                   	pop    ebp
c0024003:	c3                   	ret    
c0024004:	c3                   	ret    
c0024005:	66 90                	xchg   ax,ax
c0024007:	90                   	nop

c0024008 <__divdi3>:
c0024008:	55                   	push   ebp
c0024009:	57                   	push   edi
c002400a:	56                   	push   esi
c002400b:	53                   	push   ebx
c002400c:	83 ec 1c             	sub    esp,0x1c
c002400f:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0024013:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024017:	89 0c 24             	mov    DWORD PTR [esp],ecx
c002401a:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c002401e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0024022:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0024026:	85 db                	test   ebx,ebx
c0024028:	0f 88 8e 00 00 00    	js     c00240bc <__divdi3+0xb4>
c002402e:	89 dd                	mov    ebp,ebx
c0024030:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0024038:	89 d3                	mov    ebx,edx
c002403a:	85 d2                	test   edx,edx
c002403c:	79 0d                	jns    c002404b <__divdi3+0x43>
c002403e:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c0024042:	f7 d8                	neg    eax
c0024044:	83 d2 00             	adc    edx,0x0
c0024047:	f7 da                	neg    edx
c0024049:	89 d3                	mov    ebx,edx
c002404b:	89 c7                	mov    edi,eax
c002404d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0024050:	85 db                	test   ebx,ebx
c0024052:	75 48                	jne    c002409c <__divdi3+0x94>
c0024054:	39 ef                	cmp    edi,ebp
c0024056:	76 24                	jbe    c002407c <__divdi3+0x74>
c0024058:	89 ea                	mov    edx,ebp
c002405a:	f7 f7                	div    edi
c002405c:	89 c1                	mov    ecx,eax
c002405e:	31 f6                	xor    esi,esi
c0024060:	89 c8                	mov    eax,ecx
c0024062:	89 f2                	mov    edx,esi
c0024064:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0024068:	85 c9                	test   ecx,ecx
c002406a:	74 07                	je     c0024073 <__divdi3+0x6b>
c002406c:	f7 d8                	neg    eax
c002406e:	83 d2 00             	adc    edx,0x0
c0024071:	f7 da                	neg    edx
c0024073:	83 c4 1c             	add    esp,0x1c
c0024076:	5b                   	pop    ebx
c0024077:	5e                   	pop    esi
c0024078:	5f                   	pop    edi
c0024079:	5d                   	pop    ebp
c002407a:	c3                   	ret    
c002407b:	90                   	nop
c002407c:	85 ff                	test   edi,edi
c002407e:	75 0b                	jne    c002408b <__divdi3+0x83>
c0024080:	b8 01 00 00 00       	mov    eax,0x1
c0024085:	31 d2                	xor    edx,edx
c0024087:	f7 f3                	div    ebx
c0024089:	89 c7                	mov    edi,eax
c002408b:	31 d2                	xor    edx,edx
c002408d:	89 e8                	mov    eax,ebp
c002408f:	f7 f7                	div    edi
c0024091:	89 c6                	mov    esi,eax
c0024093:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0024096:	f7 f7                	div    edi
c0024098:	89 c1                	mov    ecx,eax
c002409a:	eb c4                	jmp    c0024060 <__divdi3+0x58>
c002409c:	39 eb                	cmp    ebx,ebp
c002409e:	77 3c                	ja     c00240dc <__divdi3+0xd4>
c00240a0:	0f bd f3             	bsr    esi,ebx
c00240a3:	83 f6 1f             	xor    esi,0x1f
c00240a6:	75 40                	jne    c00240e8 <__divdi3+0xe0>
c00240a8:	39 eb                	cmp    ebx,ebp
c00240aa:	72 09                	jb     c00240b5 <__divdi3+0xad>
c00240ac:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c00240af:	0f 87 97 00 00 00    	ja     c002414c <__divdi3+0x144>
c00240b5:	b9 01 00 00 00       	mov    ecx,0x1
c00240ba:	eb a4                	jmp    c0024060 <__divdi3+0x58>
c00240bc:	f7 d9                	neg    ecx
c00240be:	83 d3 00             	adc    ebx,0x0
c00240c1:	f7 db                	neg    ebx
c00240c3:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00240c6:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c00240ca:	89 dd                	mov    ebp,ebx
c00240cc:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c00240d4:	e9 5f ff ff ff       	jmp    c0024038 <__divdi3+0x30>
c00240d9:	8d 76 00             	lea    esi,[esi+0x0]
c00240dc:	31 f6                	xor    esi,esi
c00240de:	31 c9                	xor    ecx,ecx
c00240e0:	e9 7b ff ff ff       	jmp    c0024060 <__divdi3+0x58>
c00240e5:	8d 76 00             	lea    esi,[esi+0x0]
c00240e8:	b8 20 00 00 00       	mov    eax,0x20
c00240ed:	29 f0                	sub    eax,esi
c00240ef:	89 f1                	mov    ecx,esi
c00240f1:	d3 e3                	shl    ebx,cl
c00240f3:	89 fa                	mov    edx,edi
c00240f5:	88 c1                	mov    cl,al
c00240f7:	d3 ea                	shr    edx,cl
c00240f9:	09 da                	or     edx,ebx
c00240fb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00240ff:	89 f1                	mov    ecx,esi
c0024101:	d3 e7                	shl    edi,cl
c0024103:	89 eb                	mov    ebx,ebp
c0024105:	88 c1                	mov    cl,al
c0024107:	d3 eb                	shr    ebx,cl
c0024109:	89 f1                	mov    ecx,esi
c002410b:	d3 e5                	shl    ebp,cl
c002410d:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0024110:	88 c1                	mov    cl,al
c0024112:	d3 ea                	shr    edx,cl
c0024114:	09 d5                	or     ebp,edx
c0024116:	89 e8                	mov    eax,ebp
c0024118:	89 da                	mov    edx,ebx
c002411a:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c002411e:	89 d3                	mov    ebx,edx
c0024120:	89 c5                	mov    ebp,eax
c0024122:	f7 e7                	mul    edi
c0024124:	39 d3                	cmp    ebx,edx
c0024126:	72 18                	jb     c0024140 <__divdi3+0x138>
c0024128:	74 0a                	je     c0024134 <__divdi3+0x12c>
c002412a:	89 e9                	mov    ecx,ebp
c002412c:	31 f6                	xor    esi,esi
c002412e:	e9 2d ff ff ff       	jmp    c0024060 <__divdi3+0x58>
c0024133:	90                   	nop
c0024134:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0024137:	89 f1                	mov    ecx,esi
c0024139:	d3 e7                	shl    edi,cl
c002413b:	39 c7                	cmp    edi,eax
c002413d:	73 eb                	jae    c002412a <__divdi3+0x122>
c002413f:	90                   	nop
c0024140:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0024143:	31 f6                	xor    esi,esi
c0024145:	e9 16 ff ff ff       	jmp    c0024060 <__divdi3+0x58>
c002414a:	66 90                	xchg   ax,ax
c002414c:	31 c9                	xor    ecx,ecx
c002414e:	e9 0d ff ff ff       	jmp    c0024060 <__divdi3+0x58>
c0024153:	90                   	nop

c0024154 <__moddi3>:
c0024154:	55                   	push   ebp
c0024155:	57                   	push   edi
c0024156:	56                   	push   esi
c0024157:	53                   	push   ebx
c0024158:	83 ec 2c             	sub    esp,0x2c
c002415b:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c002415f:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0024163:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0024167:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c002416b:	85 db                	test   ebx,ebx
c002416d:	0f 88 85 00 00 00    	js     c00241f8 <__moddi3+0xa4>
c0024173:	89 de                	mov    esi,ebx
c0024175:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c002417d:	89 d7                	mov    edi,edx
c002417f:	85 d2                	test   edx,edx
c0024181:	79 09                	jns    c002418c <__moddi3+0x38>
c0024183:	f7 d8                	neg    eax
c0024185:	83 d2 00             	adc    edx,0x0
c0024188:	f7 da                	neg    edx
c002418a:	89 d7                	mov    edi,edx
c002418c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024190:	89 cd                	mov    ebp,ecx
c0024192:	85 ff                	test   edi,edi
c0024194:	75 52                	jne    c00241e8 <__moddi3+0x94>
c0024196:	89 c3                	mov    ebx,eax
c0024198:	39 f0                	cmp    eax,esi
c002419a:	76 24                	jbe    c00241c0 <__moddi3+0x6c>
c002419c:	89 c8                	mov    eax,ecx
c002419e:	89 f2                	mov    edx,esi
c00241a0:	f7 f3                	div    ebx
c00241a2:	89 d6                	mov    esi,edx
c00241a4:	89 f0                	mov    eax,esi
c00241a6:	31 d2                	xor    edx,edx
c00241a8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00241ac:	85 c9                	test   ecx,ecx
c00241ae:	74 07                	je     c00241b7 <__moddi3+0x63>
c00241b0:	f7 d8                	neg    eax
c00241b2:	83 d2 00             	adc    edx,0x0
c00241b5:	f7 da                	neg    edx
c00241b7:	83 c4 2c             	add    esp,0x2c
c00241ba:	5b                   	pop    ebx
c00241bb:	5e                   	pop    esi
c00241bc:	5f                   	pop    edi
c00241bd:	5d                   	pop    ebp
c00241be:	c3                   	ret    
c00241bf:	90                   	nop
c00241c0:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00241c4:	85 db                	test   ebx,ebx
c00241c6:	75 0d                	jne    c00241d5 <__moddi3+0x81>
c00241c8:	b8 01 00 00 00       	mov    eax,0x1
c00241cd:	31 d2                	xor    edx,edx
c00241cf:	f7 f7                	div    edi
c00241d1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00241d5:	89 f0                	mov    eax,esi
c00241d7:	31 d2                	xor    edx,edx
c00241d9:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00241dd:	f7 f7                	div    edi
c00241df:	89 e8                	mov    eax,ebp
c00241e1:	f7 f7                	div    edi
c00241e3:	89 d6                	mov    esi,edx
c00241e5:	eb bd                	jmp    c00241a4 <__moddi3+0x50>
c00241e7:	90                   	nop
c00241e8:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00241ec:	39 f7                	cmp    edi,esi
c00241ee:	76 20                	jbe    c0024210 <__moddi3+0xbc>
c00241f0:	89 c8                	mov    eax,ecx
c00241f2:	89 f2                	mov    edx,esi
c00241f4:	eb b2                	jmp    c00241a8 <__moddi3+0x54>
c00241f6:	66 90                	xchg   ax,ax
c00241f8:	f7 d9                	neg    ecx
c00241fa:	83 d3 00             	adc    ebx,0x0
c00241fd:	f7 db                	neg    ebx
c00241ff:	89 de                	mov    esi,ebx
c0024201:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0024209:	e9 6f ff ff ff       	jmp    c002417d <__moddi3+0x29>
c002420e:	66 90                	xchg   ax,ax
c0024210:	0f bd c7             	bsr    eax,edi
c0024213:	83 f0 1f             	xor    eax,0x1f
c0024216:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002421a:	75 24                	jne    c0024240 <__moddi3+0xec>
c002421c:	39 f7                	cmp    edi,esi
c002421e:	72 06                	jb     c0024226 <__moddi3+0xd2>
c0024220:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0024224:	77 0c                	ja     c0024232 <__moddi3+0xde>
c0024226:	89 e9                	mov    ecx,ebp
c0024228:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c002422c:	19 fe                	sbb    esi,edi
c002422e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0024232:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024236:	89 f2                	mov    edx,esi
c0024238:	e9 6b ff ff ff       	jmp    c00241a8 <__moddi3+0x54>
c002423d:	8d 76 00             	lea    esi,[esi+0x0]
c0024240:	b8 20 00 00 00       	mov    eax,0x20
c0024245:	89 c2                	mov    edx,eax
c0024247:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c002424b:	29 da                	sub    edx,ebx
c002424d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0024251:	88 d9                	mov    cl,bl
c0024253:	d3 e7                	shl    edi,cl
c0024255:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024259:	88 d1                	mov    cl,dl
c002425b:	d3 e8                	shr    eax,cl
c002425d:	09 c7                	or     edi,eax
c002425f:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0024263:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0024267:	89 d8                	mov    eax,ebx
c0024269:	88 d9                	mov    cl,bl
c002426b:	d3 e7                	shl    edi,cl
c002426d:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0024271:	89 f3                	mov    ebx,esi
c0024273:	88 d1                	mov    cl,dl
c0024275:	d3 eb                	shr    ebx,cl
c0024277:	89 c7                	mov    edi,eax
c0024279:	88 c1                	mov    cl,al
c002427b:	d3 e6                	shl    esi,cl
c002427d:	89 e8                	mov    eax,ebp
c002427f:	88 d1                	mov    cl,dl
c0024281:	d3 e8                	shr    eax,cl
c0024283:	09 f0                	or     eax,esi
c0024285:	89 f9                	mov    ecx,edi
c0024287:	d3 e5                	shl    ebp,cl
c0024289:	89 da                	mov    edx,ebx
c002428b:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c002428f:	89 d3                	mov    ebx,edx
c0024291:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0024295:	89 c6                	mov    esi,eax
c0024297:	89 d1                	mov    ecx,edx
c0024299:	39 d3                	cmp    ebx,edx
c002429b:	72 27                	jb     c00242c4 <__moddi3+0x170>
c002429d:	74 21                	je     c00242c0 <__moddi3+0x16c>
c002429f:	29 f5                	sub    ebp,esi
c00242a1:	19 cb                	sbb    ebx,ecx
c00242a3:	89 de                	mov    esi,ebx
c00242a5:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c00242a9:	d3 e6                	shl    esi,cl
c00242ab:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00242af:	89 f9                	mov    ecx,edi
c00242b1:	d3 ed                	shr    ebp,cl
c00242b3:	09 ee                	or     esi,ebp
c00242b5:	89 f0                	mov    eax,esi
c00242b7:	d3 eb                	shr    ebx,cl
c00242b9:	89 da                	mov    edx,ebx
c00242bb:	e9 e8 fe ff ff       	jmp    c00241a8 <__moddi3+0x54>
c00242c0:	39 c5                	cmp    ebp,eax
c00242c2:	73 db                	jae    c002429f <__moddi3+0x14b>
c00242c4:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00242c8:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c00242cc:	89 d1                	mov    ecx,edx
c00242ce:	89 c6                	mov    esi,eax
c00242d0:	eb cd                	jmp    c002429f <__moddi3+0x14b>
c00242d2:	66 90                	xchg   ax,ax

c00242d4 <__udivdi3>:
c00242d4:	55                   	push   ebp
c00242d5:	57                   	push   edi
c00242d6:	56                   	push   esi
c00242d7:	53                   	push   ebx
c00242d8:	83 ec 1c             	sub    esp,0x1c
c00242db:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00242df:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00242e3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00242e7:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00242eb:	85 d2                	test   edx,edx
c00242ed:	75 41                	jne    c0024330 <__udivdi3+0x5c>
c00242ef:	39 f7                	cmp    edi,esi
c00242f1:	76 15                	jbe    c0024308 <__udivdi3+0x34>
c00242f3:	89 e8                	mov    eax,ebp
c00242f5:	89 f2                	mov    edx,esi
c00242f7:	f7 f7                	div    edi
c00242f9:	31 db                	xor    ebx,ebx
c00242fb:	89 da                	mov    edx,ebx
c00242fd:	83 c4 1c             	add    esp,0x1c
c0024300:	5b                   	pop    ebx
c0024301:	5e                   	pop    esi
c0024302:	5f                   	pop    edi
c0024303:	5d                   	pop    ebp
c0024304:	c3                   	ret    
c0024305:	8d 76 00             	lea    esi,[esi+0x0]
c0024308:	89 f9                	mov    ecx,edi
c002430a:	85 ff                	test   edi,edi
c002430c:	75 0b                	jne    c0024319 <__udivdi3+0x45>
c002430e:	b8 01 00 00 00       	mov    eax,0x1
c0024313:	31 d2                	xor    edx,edx
c0024315:	f7 f7                	div    edi
c0024317:	89 c1                	mov    ecx,eax
c0024319:	31 d2                	xor    edx,edx
c002431b:	89 f0                	mov    eax,esi
c002431d:	f7 f1                	div    ecx
c002431f:	89 c3                	mov    ebx,eax
c0024321:	89 e8                	mov    eax,ebp
c0024323:	f7 f1                	div    ecx
c0024325:	89 da                	mov    edx,ebx
c0024327:	83 c4 1c             	add    esp,0x1c
c002432a:	5b                   	pop    ebx
c002432b:	5e                   	pop    esi
c002432c:	5f                   	pop    edi
c002432d:	5d                   	pop    ebp
c002432e:	c3                   	ret    
c002432f:	90                   	nop
c0024330:	39 f2                	cmp    edx,esi
c0024332:	77 1c                	ja     c0024350 <__udivdi3+0x7c>
c0024334:	0f bd da             	bsr    ebx,edx
c0024337:	83 f3 1f             	xor    ebx,0x1f
c002433a:	75 24                	jne    c0024360 <__udivdi3+0x8c>
c002433c:	39 f2                	cmp    edx,esi
c002433e:	72 08                	jb     c0024348 <__udivdi3+0x74>
c0024340:	39 ef                	cmp    edi,ebp
c0024342:	0f 87 84 00 00 00    	ja     c00243cc <__udivdi3+0xf8>
c0024348:	b8 01 00 00 00       	mov    eax,0x1
c002434d:	eb ac                	jmp    c00242fb <__udivdi3+0x27>
c002434f:	90                   	nop
c0024350:	31 db                	xor    ebx,ebx
c0024352:	31 c0                	xor    eax,eax
c0024354:	89 da                	mov    edx,ebx
c0024356:	83 c4 1c             	add    esp,0x1c
c0024359:	5b                   	pop    ebx
c002435a:	5e                   	pop    esi
c002435b:	5f                   	pop    edi
c002435c:	5d                   	pop    ebp
c002435d:	c3                   	ret    
c002435e:	66 90                	xchg   ax,ax
c0024360:	b8 20 00 00 00       	mov    eax,0x20
c0024365:	29 d8                	sub    eax,ebx
c0024367:	88 d9                	mov    cl,bl
c0024369:	d3 e2                	shl    edx,cl
c002436b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c002436f:	89 fa                	mov    edx,edi
c0024371:	88 c1                	mov    cl,al
c0024373:	d3 ea                	shr    edx,cl
c0024375:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0024379:	09 d1                	or     ecx,edx
c002437b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002437f:	88 d9                	mov    cl,bl
c0024381:	d3 e7                	shl    edi,cl
c0024383:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0024387:	89 f7                	mov    edi,esi
c0024389:	88 c1                	mov    cl,al
c002438b:	d3 ef                	shr    edi,cl
c002438d:	88 d9                	mov    cl,bl
c002438f:	d3 e6                	shl    esi,cl
c0024391:	89 ea                	mov    edx,ebp
c0024393:	88 c1                	mov    cl,al
c0024395:	d3 ea                	shr    edx,cl
c0024397:	09 d6                	or     esi,edx
c0024399:	89 f0                	mov    eax,esi
c002439b:	89 fa                	mov    edx,edi
c002439d:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00243a1:	89 d7                	mov    edi,edx
c00243a3:	89 c6                	mov    esi,eax
c00243a5:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00243a9:	39 d7                	cmp    edi,edx
c00243ab:	72 13                	jb     c00243c0 <__udivdi3+0xec>
c00243ad:	74 09                	je     c00243b8 <__udivdi3+0xe4>
c00243af:	89 f0                	mov    eax,esi
c00243b1:	31 db                	xor    ebx,ebx
c00243b3:	e9 43 ff ff ff       	jmp    c00242fb <__udivdi3+0x27>
c00243b8:	88 d9                	mov    cl,bl
c00243ba:	d3 e5                	shl    ebp,cl
c00243bc:	39 c5                	cmp    ebp,eax
c00243be:	73 ef                	jae    c00243af <__udivdi3+0xdb>
c00243c0:	8d 46 ff             	lea    eax,[esi-0x1]
c00243c3:	31 db                	xor    ebx,ebx
c00243c5:	e9 31 ff ff ff       	jmp    c00242fb <__udivdi3+0x27>
c00243ca:	66 90                	xchg   ax,ax
c00243cc:	31 c0                	xor    eax,eax
c00243ce:	e9 28 ff ff ff       	jmp    c00242fb <__udivdi3+0x27>
c00243d3:	90                   	nop

c00243d4 <__umoddi3>:
c00243d4:	55                   	push   ebp
c00243d5:	57                   	push   edi
c00243d6:	56                   	push   esi
c00243d7:	53                   	push   ebx
c00243d8:	83 ec 1c             	sub    esp,0x1c
c00243db:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00243df:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00243e3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00243e7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00243eb:	89 da                	mov    edx,ebx
c00243ed:	85 c0                	test   eax,eax
c00243ef:	75 37                	jne    c0024428 <__umoddi3+0x54>
c00243f1:	39 df                	cmp    edi,ebx
c00243f3:	76 13                	jbe    c0024408 <__umoddi3+0x34>
c00243f5:	89 f0                	mov    eax,esi
c00243f7:	f7 f7                	div    edi
c00243f9:	89 d0                	mov    eax,edx
c00243fb:	31 d2                	xor    edx,edx
c00243fd:	83 c4 1c             	add    esp,0x1c
c0024400:	5b                   	pop    ebx
c0024401:	5e                   	pop    esi
c0024402:	5f                   	pop    edi
c0024403:	5d                   	pop    ebp
c0024404:	c3                   	ret    
c0024405:	8d 76 00             	lea    esi,[esi+0x0]
c0024408:	89 fd                	mov    ebp,edi
c002440a:	85 ff                	test   edi,edi
c002440c:	75 0b                	jne    c0024419 <__umoddi3+0x45>
c002440e:	b8 01 00 00 00       	mov    eax,0x1
c0024413:	31 d2                	xor    edx,edx
c0024415:	f7 f7                	div    edi
c0024417:	89 c5                	mov    ebp,eax
c0024419:	89 d8                	mov    eax,ebx
c002441b:	31 d2                	xor    edx,edx
c002441d:	f7 f5                	div    ebp
c002441f:	89 f0                	mov    eax,esi
c0024421:	f7 f5                	div    ebp
c0024423:	89 d0                	mov    eax,edx
c0024425:	eb d4                	jmp    c00243fb <__umoddi3+0x27>
c0024427:	90                   	nop
c0024428:	89 f1                	mov    ecx,esi
c002442a:	39 d8                	cmp    eax,ebx
c002442c:	76 0a                	jbe    c0024438 <__umoddi3+0x64>
c002442e:	89 f0                	mov    eax,esi
c0024430:	83 c4 1c             	add    esp,0x1c
c0024433:	5b                   	pop    ebx
c0024434:	5e                   	pop    esi
c0024435:	5f                   	pop    edi
c0024436:	5d                   	pop    ebp
c0024437:	c3                   	ret    
c0024438:	0f bd e8             	bsr    ebp,eax
c002443b:	83 f5 1f             	xor    ebp,0x1f
c002443e:	75 1c                	jne    c002445c <__umoddi3+0x88>
c0024440:	39 d8                	cmp    eax,ebx
c0024442:	72 04                	jb     c0024448 <__umoddi3+0x74>
c0024444:	39 f7                	cmp    edi,esi
c0024446:	77 08                	ja     c0024450 <__umoddi3+0x7c>
c0024448:	89 da                	mov    edx,ebx
c002444a:	29 fe                	sub    esi,edi
c002444c:	19 c2                	sbb    edx,eax
c002444e:	89 f1                	mov    ecx,esi
c0024450:	89 c8                	mov    eax,ecx
c0024452:	83 c4 1c             	add    esp,0x1c
c0024455:	5b                   	pop    ebx
c0024456:	5e                   	pop    esi
c0024457:	5f                   	pop    edi
c0024458:	5d                   	pop    ebp
c0024459:	c3                   	ret    
c002445a:	66 90                	xchg   ax,ax
c002445c:	ba 20 00 00 00       	mov    edx,0x20
c0024461:	29 ea                	sub    edx,ebp
c0024463:	89 e9                	mov    ecx,ebp
c0024465:	d3 e0                	shl    eax,cl
c0024467:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002446b:	89 f8                	mov    eax,edi
c002446d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0024471:	88 d1                	mov    cl,dl
c0024473:	d3 e8                	shr    eax,cl
c0024475:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0024479:	09 c1                	or     ecx,eax
c002447b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002447f:	89 e9                	mov    ecx,ebp
c0024481:	d3 e7                	shl    edi,cl
c0024483:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0024487:	89 d8                	mov    eax,ebx
c0024489:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002448d:	88 d1                	mov    cl,dl
c002448f:	d3 e8                	shr    eax,cl
c0024491:	89 c7                	mov    edi,eax
c0024493:	89 e9                	mov    ecx,ebp
c0024495:	d3 e3                	shl    ebx,cl
c0024497:	89 f0                	mov    eax,esi
c0024499:	88 d1                	mov    cl,dl
c002449b:	d3 e8                	shr    eax,cl
c002449d:	09 d8                	or     eax,ebx
c002449f:	89 e9                	mov    ecx,ebp
c00244a1:	d3 e6                	shl    esi,cl
c00244a3:	89 f3                	mov    ebx,esi
c00244a5:	89 fa                	mov    edx,edi
c00244a7:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00244ab:	89 d1                	mov    ecx,edx
c00244ad:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00244b1:	89 c6                	mov    esi,eax
c00244b3:	89 d7                	mov    edi,edx
c00244b5:	39 d1                	cmp    ecx,edx
c00244b7:	72 27                	jb     c00244e0 <__umoddi3+0x10c>
c00244b9:	74 21                	je     c00244dc <__umoddi3+0x108>
c00244bb:	89 ca                	mov    edx,ecx
c00244bd:	29 f3                	sub    ebx,esi
c00244bf:	19 fa                	sbb    edx,edi
c00244c1:	89 d0                	mov    eax,edx
c00244c3:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c00244c7:	d3 e0                	shl    eax,cl
c00244c9:	89 e9                	mov    ecx,ebp
c00244cb:	d3 eb                	shr    ebx,cl
c00244cd:	09 d8                	or     eax,ebx
c00244cf:	d3 ea                	shr    edx,cl
c00244d1:	83 c4 1c             	add    esp,0x1c
c00244d4:	5b                   	pop    ebx
c00244d5:	5e                   	pop    esi
c00244d6:	5f                   	pop    edi
c00244d7:	5d                   	pop    ebp
c00244d8:	c3                   	ret    
c00244d9:	8d 76 00             	lea    esi,[esi+0x0]
c00244dc:	39 c3                	cmp    ebx,eax
c00244de:	73 db                	jae    c00244bb <__umoddi3+0xe7>
c00244e0:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00244e4:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c00244e8:	89 d7                	mov    edi,edx
c00244ea:	89 c6                	mov    esi,eax
c00244ec:	eb cd                	jmp    c00244bb <__umoddi3+0xe7>
c00244ee:	66 90                	xchg   ax,ax

c00244f0 <acos>:
c00244f0:	83 ec 4c             	sub    esp,0x4c
c00244f3:	dd 44 24 50          	fld    QWORD PTR [esp+0x50]
c00244f7:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c00244fb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00244ff:	89 d0                	mov    eax,edx
c0024501:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0024506:	3d ff ff ef 3f       	cmp    eax,0x3fefffff
c002450b:	7e 23                	jle    c0024530 <acos+0x40>
c002450d:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0024511:	2d 00 00 f0 3f       	sub    eax,0x3ff00000
c0024516:	09 c8                	or     eax,ecx
c0024518:	0f 85 32 01 00 00    	jne    c0024650 <acos+0x160>
c002451e:	85 d2                	test   edx,edx
c0024520:	0f 8e 4a 01 00 00    	jle    c0024670 <acos+0x180>
c0024526:	d9 ee                	fldz   
c0024528:	83 c4 4c             	add    esp,0x4c
c002452b:	c3                   	ret    
c002452c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0024530:	3d ff ff df 3f       	cmp    eax,0x3fdfffff
c0024535:	7f 29                	jg     c0024560 <acos+0x70>
c0024537:	3d 00 00 60 3c       	cmp    eax,0x3c600000
c002453c:	0f 8f 4e 01 00 00    	jg     c0024690 <acos+0x1a0>
c0024542:	dd 05 e8 ff 02 c0    	fld    QWORD PTR ds:0xc002ffe8
c0024548:	dc 05 00 e6 02 c0    	fadd   QWORD PTR ds:0xc002e600
c002454e:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0024552:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0024556:	83 c4 4c             	add    esp,0x4c
c0024559:	c3                   	ret    
c002455a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0024560:	85 d2                	test   edx,edx
c0024562:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0024566:	0f 88 d4 01 00 00    	js     c0024740 <acos+0x250>
c002456c:	d9 e8                	fld1   
c002456e:	de e1                	fsubrp st(1),st
c0024570:	d8 0d 5c e6 02 c0    	fmul   DWORD PTR ds:0xc002e65c
c0024576:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c002457a:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c002457e:	dd 54 24 30          	fst    QWORD PTR [esp+0x30]
c0024582:	dd 1c 24             	fstp   QWORD PTR [esp]
c0024585:	e8 36 27 00 00       	call   c0026cc0 <sqrt>
c002458a:	31 c0                	xor    eax,eax
c002458c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0024590:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0024594:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024598:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c002459c:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c00245a0:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c00245a4:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00245a8:	d9 c1                	fld    st(1)
c00245aa:	dc 0d 08 e6 02 c0    	fmul   QWORD PTR ds:0xc002e608
c00245b0:	dc 05 10 e6 02 c0    	fadd   QWORD PTR ds:0xc002e610
c00245b6:	d8 ca                	fmul   st,st(2)
c00245b8:	dc 25 18 e6 02 c0    	fsub   QWORD PTR ds:0xc002e618
c00245be:	d8 ca                	fmul   st,st(2)
c00245c0:	dc 05 20 e6 02 c0    	fadd   QWORD PTR ds:0xc002e620
c00245c6:	d8 ca                	fmul   st,st(2)
c00245c8:	dc 25 28 e6 02 c0    	fsub   QWORD PTR ds:0xc002e628
c00245ce:	d8 ca                	fmul   st,st(2)
c00245d0:	dc 05 30 e6 02 c0    	fadd   QWORD PTR ds:0xc002e630
c00245d6:	d8 ca                	fmul   st,st(2)
c00245d8:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00245dc:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00245e0:	d9 c2                	fld    st(2)
c00245e2:	dc 0d 38 e6 02 c0    	fmul   QWORD PTR ds:0xc002e638
c00245e8:	dc 25 40 e6 02 c0    	fsub   QWORD PTR ds:0xc002e640
c00245ee:	d8 cb                	fmul   st,st(3)
c00245f0:	dc 05 48 e6 02 c0    	fadd   QWORD PTR ds:0xc002e648
c00245f6:	d8 cb                	fmul   st,st(3)
c00245f8:	dc 25 50 e6 02 c0    	fsub   QWORD PTR ds:0xc002e650
c00245fe:	d8 cb                	fmul   st,st(3)
c0024600:	d9 e8                	fld1   
c0024602:	de c1                	faddp  st(1),st
c0024604:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0024608:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c002460c:	de f9                	fdivp  st(1),st
c002460e:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0024612:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0024616:	d8 c9                	fmul   st,st(1)
c0024618:	d9 c3                	fld    st(3)
c002461a:	d8 cc                	fmul   st,st(4)
c002461c:	de eb                	fsubp  st(3),st
c002461e:	d9 c9                	fxch   st(1)
c0024620:	d8 c3                	fadd   st,st(3)
c0024622:	de fa                	fdivp  st(2),st
c0024624:	d9 c9                	fxch   st(1)
c0024626:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c002462a:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c002462e:	de c1                	faddp  st(1),st
c0024630:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0024634:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0024638:	de c1                	faddp  st(1),st
c002463a:	d8 c0                	fadd   st,st(0)
c002463c:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0024640:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0024644:	83 c4 4c             	add    esp,0x4c
c0024647:	c3                   	ret    
c0024648:	90                   	nop
c0024649:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0024650:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0024654:	d8 e0                	fsub   st,st(0)
c0024656:	d8 f0                	fdiv   st,st(0)
c0024658:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c002465c:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0024660:	83 c4 4c             	add    esp,0x4c
c0024663:	c3                   	ret    
c0024664:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c002466a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0024670:	dd 05 e8 ff 02 c0    	fld    QWORD PTR ds:0xc002ffe8
c0024676:	d8 c0                	fadd   st,st(0)
c0024678:	dc 05 f8 e5 02 c0    	fadd   QWORD PTR ds:0xc002e5f8
c002467e:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0024682:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0024686:	83 c4 4c             	add    esp,0x4c
c0024689:	c3                   	ret    
c002468a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0024690:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0024694:	d9 c0                	fld    st(0)
c0024696:	d8 c9                	fmul   st,st(1)
c0024698:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c002469c:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00246a0:	dd 05 e8 ff 02 c0    	fld    QWORD PTR ds:0xc002ffe8
c00246a6:	d9 c1                	fld    st(1)
c00246a8:	dc 0d 08 e6 02 c0    	fmul   QWORD PTR ds:0xc002e608
c00246ae:	dc 05 10 e6 02 c0    	fadd   QWORD PTR ds:0xc002e610
c00246b4:	d8 ca                	fmul   st,st(2)
c00246b6:	dc 25 18 e6 02 c0    	fsub   QWORD PTR ds:0xc002e618
c00246bc:	d8 ca                	fmul   st,st(2)
c00246be:	dc 05 20 e6 02 c0    	fadd   QWORD PTR ds:0xc002e620
c00246c4:	d8 ca                	fmul   st,st(2)
c00246c6:	dc 25 28 e6 02 c0    	fsub   QWORD PTR ds:0xc002e628
c00246cc:	d8 ca                	fmul   st,st(2)
c00246ce:	dc 05 30 e6 02 c0    	fadd   QWORD PTR ds:0xc002e630
c00246d4:	d8 ca                	fmul   st,st(2)
c00246d6:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00246da:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00246de:	d9 c2                	fld    st(2)
c00246e0:	dc 0d 38 e6 02 c0    	fmul   QWORD PTR ds:0xc002e638
c00246e6:	dc 25 40 e6 02 c0    	fsub   QWORD PTR ds:0xc002e640
c00246ec:	d8 cb                	fmul   st,st(3)
c00246ee:	dc 05 48 e6 02 c0    	fadd   QWORD PTR ds:0xc002e648
c00246f4:	d8 cb                	fmul   st,st(3)
c00246f6:	dc 25 50 e6 02 c0    	fsub   QWORD PTR ds:0xc002e650
c00246fc:	de cb                	fmulp  st(3),st
c00246fe:	d9 ca                	fxch   st(2)
c0024700:	d8 05 58 e6 02 c0    	fadd   DWORD PTR ds:0xc002e658
c0024706:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c002470a:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c002470e:	de fa                	fdivp  st(2),st
c0024710:	d9 c9                	fxch   st(1)
c0024712:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0024716:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c002471a:	d8 ca                	fmul   st,st(2)
c002471c:	de e9                	fsubp  st(1),st
c002471e:	de e9                	fsubp  st(1),st
c0024720:	dc 2d 00 e6 02 c0    	fsubr  QWORD PTR ds:0xc002e600
c0024726:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c002472a:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c002472e:	83 c4 4c             	add    esp,0x4c
c0024731:	c3                   	ret    
c0024732:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0024739:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0024740:	d9 e8                	fld1   
c0024742:	de c1                	faddp  st(1),st
c0024744:	d8 0d 5c e6 02 c0    	fmul   DWORD PTR ds:0xc002e65c
c002474a:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c002474e:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0024752:	d9 c0                	fld    st(0)
c0024754:	db 7c 24 18          	fstp   TBYTE PTR [esp+0x18]
c0024758:	dd 1c 24             	fstp   QWORD PTR [esp]
c002475b:	e8 60 25 00 00       	call   c0026cc0 <sqrt>
c0024760:	dd 05 e8 ff 02 c0    	fld    QWORD PTR ds:0xc002ffe8
c0024766:	db 6c 24 18          	fld    TBYTE PTR [esp+0x18]
c002476a:	d9 c0                	fld    st(0)
c002476c:	dc 0d 08 e6 02 c0    	fmul   QWORD PTR ds:0xc002e608
c0024772:	dc 05 10 e6 02 c0    	fadd   QWORD PTR ds:0xc002e610
c0024778:	d8 c9                	fmul   st,st(1)
c002477a:	dc 25 18 e6 02 c0    	fsub   QWORD PTR ds:0xc002e618
c0024780:	d8 c9                	fmul   st,st(1)
c0024782:	dc 05 20 e6 02 c0    	fadd   QWORD PTR ds:0xc002e620
c0024788:	d8 c9                	fmul   st,st(1)
c002478a:	dc 25 28 e6 02 c0    	fsub   QWORD PTR ds:0xc002e628
c0024790:	d8 c9                	fmul   st,st(1)
c0024792:	dc 05 30 e6 02 c0    	fadd   QWORD PTR ds:0xc002e630
c0024798:	d8 c9                	fmul   st,st(1)
c002479a:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c002479e:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00247a2:	d9 c1                	fld    st(1)
c00247a4:	dc 0d 38 e6 02 c0    	fmul   QWORD PTR ds:0xc002e638
c00247aa:	dc 25 40 e6 02 c0    	fsub   QWORD PTR ds:0xc002e640
c00247b0:	d8 ca                	fmul   st,st(2)
c00247b2:	dc 05 48 e6 02 c0    	fadd   QWORD PTR ds:0xc002e648
c00247b8:	d8 ca                	fmul   st,st(2)
c00247ba:	dc 25 50 e6 02 c0    	fsub   QWORD PTR ds:0xc002e650
c00247c0:	de ca                	fmulp  st(2),st
c00247c2:	d9 e8                	fld1   
c00247c4:	de c2                	faddp  st(2),st
c00247c6:	d9 c9                	fxch   st(1)
c00247c8:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00247cc:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00247d0:	de f9                	fdivp  st(1),st
c00247d2:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00247d6:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00247da:	d8 ca                	fmul   st,st(2)
c00247dc:	de e1                	fsubrp st(1),st
c00247de:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00247e2:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00247e6:	de c1                	faddp  st(1),st
c00247e8:	d8 c0                	fadd   st,st(0)
c00247ea:	dc 2d f8 e5 02 c0    	fsubr  QWORD PTR ds:0xc002e5f8
c00247f0:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00247f4:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00247f8:	83 c4 4c             	add    esp,0x4c
c00247fb:	c3                   	ret    
c00247fc:	66 90                	xchg   ax,ax
c00247fe:	66 90                	xchg   ax,ax

c0024800 <asin>:
c0024800:	56                   	push   esi
c0024801:	53                   	push   ebx
c0024802:	83 ec 44             	sub    esp,0x44
c0024805:	dd 44 24 50          	fld    QWORD PTR [esp+0x50]
c0024809:	dd 54 24 10          	fst    QWORD PTR [esp+0x10]
c002480d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0024811:	89 f3                	mov    ebx,esi
c0024813:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0024819:	81 fb ff ff ef 3f    	cmp    ebx,0x3fefffff
c002481f:	7e 4f                	jle    c0024870 <asin+0x70>
c0024821:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024825:	81 eb 00 00 f0 3f    	sub    ebx,0x3ff00000
c002482b:	09 c3                	or     ebx,eax
c002482d:	74 21                	je     c0024850 <asin+0x50>
c002482f:	d8 e0                	fsub   st,st(0)
c0024831:	d8 f0                	fdiv   st,st(0)
c0024833:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0024837:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c002483b:	eb 05                	jmp    c0024842 <asin+0x42>
c002483d:	8d 76 00             	lea    esi,[esi+0x0]
c0024840:	dd d9                	fstp   st(1)
c0024842:	83 c4 44             	add    esp,0x44
c0024845:	5b                   	pop    ebx
c0024846:	5e                   	pop    esi
c0024847:	c3                   	ret    
c0024848:	90                   	nop
c0024849:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0024850:	d9 c0                	fld    st(0)
c0024852:	dc 0d 00 e6 02 c0    	fmul   QWORD PTR ds:0xc002e600
c0024858:	d9 c9                	fxch   st(1)
c002485a:	dc 0d 60 e6 02 c0    	fmul   QWORD PTR ds:0xc002e660
c0024860:	de c1                	faddp  st(1),st
c0024862:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0024866:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c002486a:	83 c4 44             	add    esp,0x44
c002486d:	5b                   	pop    ebx
c002486e:	5e                   	pop    esi
c002486f:	c3                   	ret    
c0024870:	dd d8                	fstp   st(0)
c0024872:	81 fb ff ff df 3f    	cmp    ebx,0x3fdfffff
c0024878:	0f 8f b2 00 00 00    	jg     c0024930 <asin+0x130>
c002487e:	81 fb ff ff 4f 3e    	cmp    ebx,0x3e4fffff
c0024884:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0024888:	7f 16                	jg     c00248a0 <asin+0xa0>
c002488a:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c002488e:	d9 e8                	fld1   
c0024890:	d9 c2                	fld    st(2)
c0024892:	dc 05 68 e6 02 c0    	fadd   QWORD PTR ds:0xc002e668
c0024898:	df f1                	fcomip st,st(1)
c002489a:	dd d8                	fstp   st(0)
c002489c:	77 a2                	ja     c0024840 <asin+0x40>
c002489e:	dd d8                	fstp   st(0)
c00248a0:	d9 c0                	fld    st(0)
c00248a2:	d8 c9                	fmul   st,st(1)
c00248a4:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00248a8:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00248ac:	d9 c0                	fld    st(0)
c00248ae:	dc 0d 08 e6 02 c0    	fmul   QWORD PTR ds:0xc002e608
c00248b4:	dc 05 10 e6 02 c0    	fadd   QWORD PTR ds:0xc002e610
c00248ba:	d8 c9                	fmul   st,st(1)
c00248bc:	dc 25 18 e6 02 c0    	fsub   QWORD PTR ds:0xc002e618
c00248c2:	d8 c9                	fmul   st,st(1)
c00248c4:	dc 05 20 e6 02 c0    	fadd   QWORD PTR ds:0xc002e620
c00248ca:	d8 c9                	fmul   st,st(1)
c00248cc:	dc 25 28 e6 02 c0    	fsub   QWORD PTR ds:0xc002e628
c00248d2:	d8 c9                	fmul   st,st(1)
c00248d4:	dc 05 30 e6 02 c0    	fadd   QWORD PTR ds:0xc002e630
c00248da:	d8 c9                	fmul   st,st(1)
c00248dc:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00248e0:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00248e4:	d9 c1                	fld    st(1)
c00248e6:	dc 0d 38 e6 02 c0    	fmul   QWORD PTR ds:0xc002e638
c00248ec:	dc 25 40 e6 02 c0    	fsub   QWORD PTR ds:0xc002e640
c00248f2:	d8 ca                	fmul   st,st(2)
c00248f4:	dc 05 48 e6 02 c0    	fadd   QWORD PTR ds:0xc002e648
c00248fa:	d8 ca                	fmul   st,st(2)
c00248fc:	dc 25 50 e6 02 c0    	fsub   QWORD PTR ds:0xc002e650
c0024902:	de ca                	fmulp  st(2),st
c0024904:	d9 c9                	fxch   st(1)
c0024906:	d8 05 58 e6 02 c0    	fadd   DWORD PTR ds:0xc002e658
c002490c:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0024910:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0024914:	de f9                	fdivp  st(1),st
c0024916:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c002491a:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c002491e:	d8 c9                	fmul   st,st(1)
c0024920:	de c1                	faddp  st(1),st
c0024922:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0024926:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c002492a:	83 c4 44             	add    esp,0x44
c002492d:	5b                   	pop    ebx
c002492e:	5e                   	pop    esi
c002492f:	c3                   	ret    
c0024930:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0024934:	dd 1c 24             	fstp   QWORD PTR [esp]
c0024937:	e8 34 1d 00 00       	call   c0026670 <fabs>
c002493c:	d9 e8                	fld1   
c002493e:	dc e1                	fsubr  st(1),st
c0024940:	d9 c9                	fxch   st(1)
c0024942:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0024946:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c002494a:	d9 05 5c e6 02 c0    	fld    DWORD PTR ds:0xc002e65c
c0024950:	de c9                	fmulp  st(1),st
c0024952:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0024956:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c002495a:	d9 c0                	fld    st(0)
c002495c:	d9 c0                	fld    st(0)
c002495e:	dc 0d 08 e6 02 c0    	fmul   QWORD PTR ds:0xc002e608
c0024964:	dc 05 10 e6 02 c0    	fadd   QWORD PTR ds:0xc002e610
c002496a:	d8 c9                	fmul   st,st(1)
c002496c:	dc 25 18 e6 02 c0    	fsub   QWORD PTR ds:0xc002e618
c0024972:	d8 c9                	fmul   st,st(1)
c0024974:	dc 05 20 e6 02 c0    	fadd   QWORD PTR ds:0xc002e620
c002497a:	d8 c9                	fmul   st,st(1)
c002497c:	dc 25 28 e6 02 c0    	fsub   QWORD PTR ds:0xc002e628
c0024982:	d8 c9                	fmul   st,st(1)
c0024984:	dc 05 30 e6 02 c0    	fadd   QWORD PTR ds:0xc002e630
c002498a:	d8 c9                	fmul   st,st(1)
c002498c:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0024990:	d9 c0                	fld    st(0)
c0024992:	dc 0d 38 e6 02 c0    	fmul   QWORD PTR ds:0xc002e638
c0024998:	dc 25 40 e6 02 c0    	fsub   QWORD PTR ds:0xc002e640
c002499e:	d8 c9                	fmul   st,st(1)
c00249a0:	dc 05 48 e6 02 c0    	fadd   QWORD PTR ds:0xc002e648
c00249a6:	d8 c9                	fmul   st,st(1)
c00249a8:	dc 25 50 e6 02 c0    	fsub   QWORD PTR ds:0xc002e650
c00249ae:	d8 c9                	fmul   st,st(1)
c00249b0:	d9 c9                	fxch   st(1)
c00249b2:	db 7c 24 18          	fstp   TBYTE PTR [esp+0x18]
c00249b6:	de c2                	faddp  st(2),st
c00249b8:	d9 c9                	fxch   st(1)
c00249ba:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c00249be:	dd 1c 24             	fstp   QWORD PTR [esp]
c00249c1:	e8 fa 22 00 00       	call   c0026cc0 <sqrt>
c00249c6:	81 fb 32 33 ef 3f    	cmp    ebx,0x3fef3332
c00249cc:	dd 54 24 10          	fst    QWORD PTR [esp+0x10]
c00249d0:	db 6c 24 18          	fld    TBYTE PTR [esp+0x18]
c00249d4:	7e 4a                	jle    c0024a20 <asin+0x220>
c00249d6:	dd d8                	fstp   st(0)
c00249d8:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c00249dc:	dc 74 24 30          	fdiv   QWORD PTR [esp+0x30]
c00249e0:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00249e4:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00249e8:	d8 c9                	fmul   st,st(1)
c00249ea:	de c1                	faddp  st(1),st
c00249ec:	d8 c0                	fadd   st,st(0)
c00249ee:	dc 25 60 e6 02 c0    	fsub   QWORD PTR ds:0xc002e660
c00249f4:	dc 2d 00 e6 02 c0    	fsubr  QWORD PTR ds:0xc002e600
c00249fa:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00249fe:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0024a02:	85 f6                	test   esi,esi
c0024a04:	0f 8f 38 fe ff ff    	jg     c0024842 <asin+0x42>
c0024a0a:	d9 e0                	fchs   
c0024a0c:	e9 31 fe ff ff       	jmp    c0024842 <asin+0x42>
c0024a11:	eb 0d                	jmp    c0024a20 <asin+0x220>
c0024a13:	90                   	nop
c0024a14:	90                   	nop
c0024a15:	90                   	nop
c0024a16:	90                   	nop
c0024a17:	90                   	nop
c0024a18:	90                   	nop
c0024a19:	90                   	nop
c0024a1a:	90                   	nop
c0024a1b:	90                   	nop
c0024a1c:	90                   	nop
c0024a1d:	90                   	nop
c0024a1e:	90                   	nop
c0024a1f:	90                   	nop
c0024a20:	dd d9                	fstp   st(1)
c0024a22:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0024a26:	31 c0                	xor    eax,eax
c0024a28:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0024a2c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0024a30:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0024a34:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0024a38:	d9 c0                	fld    st(0)
c0024a3a:	d8 c1                	fadd   st,st(1)
c0024a3c:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0024a40:	dc 74 24 30          	fdiv   QWORD PTR [esp+0x30]
c0024a44:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0024a48:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0024a4c:	de c9                	fmulp  st(1),st
c0024a4e:	d9 c2                	fld    st(2)
c0024a50:	d8 cb                	fmul   st,st(3)
c0024a52:	de ec                	fsubp  st(4),st
c0024a54:	d9 c9                	fxch   st(1)
c0024a56:	d8 c2                	fadd   st,st(2)
c0024a58:	de fb                	fdivp  st(3),st
c0024a5a:	d9 ca                	fxch   st(2)
c0024a5c:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0024a60:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0024a64:	d8 c0                	fadd   st,st(0)
c0024a66:	dc 2d 60 e6 02 c0    	fsubr  QWORD PTR ds:0xc002e660
c0024a6c:	de ea                	fsubp  st(2),st
c0024a6e:	d9 c9                	fxch   st(1)
c0024a70:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0024a74:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0024a78:	d9 c9                	fxch   st(1)
c0024a7a:	d8 c0                	fadd   st,st(0)
c0024a7c:	dd 05 70 e6 02 c0    	fld    QWORD PTR ds:0xc002e670
c0024a82:	dc e1                	fsubr  st(1),st
c0024a84:	d9 c9                	fxch   st(1)
c0024a86:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0024a8a:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0024a8e:	de ea                	fsubp  st(2),st
c0024a90:	de e1                	fsubrp st(1),st
c0024a92:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0024a96:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0024a9a:	e9 63 ff ff ff       	jmp    c0024a02 <asin+0x202>
c0024a9f:	90                   	nop

c0024aa0 <atan2>:
c0024aa0:	83 ec 4c             	sub    esp,0x4c
c0024aa3:	89 5c 24 3c          	mov    DWORD PTR [esp+0x3c],ebx
c0024aa7:	dd 44 24 50          	fld    QWORD PTR [esp+0x50]
c0024aab:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0024aaf:	89 7c 24 44          	mov    DWORD PTR [esp+0x44],edi
c0024ab3:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0024ab7:	89 6c 24 48          	mov    DWORD PTR [esp+0x48],ebp
c0024abb:	dd 44 24 58          	fld    QWORD PTR [esp+0x58]
c0024abf:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0024ac3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024ac7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0024acb:	89 c1                	mov    ecx,eax
c0024acd:	f7 d9                	neg    ecx
c0024acf:	89 d3                	mov    ebx,edx
c0024ad1:	09 c1                	or     ecx,eax
c0024ad3:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0024ad9:	c1 e9 1f             	shr    ecx,0x1f
c0024adc:	09 d9                	or     ecx,ebx
c0024ade:	81 f9 00 00 f0 7f    	cmp    ecx,0x7ff00000
c0024ae4:	77 7a                	ja     c0024b60 <atan2+0xc0>
c0024ae6:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0024aea:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0024aee:	89 f1                	mov    ecx,esi
c0024af0:	f7 d9                	neg    ecx
c0024af2:	89 ef                	mov    edi,ebp
c0024af4:	09 f1                	or     ecx,esi
c0024af6:	81 e7 ff ff ff 7f    	and    edi,0x7fffffff
c0024afc:	c1 e9 1f             	shr    ecx,0x1f
c0024aff:	09 f9                	or     ecx,edi
c0024b01:	81 f9 00 00 f0 7f    	cmp    ecx,0x7ff00000
c0024b07:	77 57                	ja     c0024b60 <atan2+0xc0>
c0024b09:	81 fa 00 00 f0 3f    	cmp    edx,0x3ff00000
c0024b0f:	75 08                	jne    c0024b19 <atan2+0x79>
c0024b11:	85 c0                	test   eax,eax
c0024b13:	0f 84 f7 00 00 00    	je     c0024c10 <atan2+0x170>
c0024b19:	89 d1                	mov    ecx,edx
c0024b1b:	c1 f9 1e             	sar    ecx,0x1e
c0024b1e:	83 e1 02             	and    ecx,0x2
c0024b21:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0024b25:	89 e9                	mov    ecx,ebp
c0024b27:	c1 e9 1f             	shr    ecx,0x1f
c0024b2a:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c0024b2e:	09 fe                	or     esi,edi
c0024b30:	75 5e                	jne    c0024b90 <atan2+0xf0>
c0024b32:	83 f9 02             	cmp    ecx,0x2
c0024b35:	0f 84 65 01 00 00    	je     c0024ca0 <atan2+0x200>
c0024b3b:	83 f9 03             	cmp    ecx,0x3
c0024b3e:	0f 85 1c 01 00 00    	jne    c0024c60 <atan2+0x1c0>
c0024b44:	dd 05 f8 ff 02 c0    	fld    QWORD PTR ds:0xc002fff8
c0024b4a:	dd 05 78 e6 02 c0    	fld    QWORD PTR ds:0xc002e678
c0024b50:	de e1                	fsubrp st(1),st
c0024b52:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0024b56:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0024b5a:	eb 14                	jmp    c0024b70 <atan2+0xd0>
c0024b5c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0024b60:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0024b64:	dc 44 24 18          	fadd   QWORD PTR [esp+0x18]
c0024b68:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0024b6c:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0024b70:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0024b74:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0024b78:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0024b7c:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0024b80:	83 c4 4c             	add    esp,0x4c
c0024b83:	c3                   	ret    
c0024b84:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0024b8a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0024b90:	09 d8                	or     eax,ebx
c0024b92:	0f 84 98 00 00 00    	je     c0024c30 <atan2+0x190>
c0024b98:	81 fb 00 00 f0 7f    	cmp    ebx,0x7ff00000
c0024b9e:	0f 84 1c 01 00 00    	je     c0024cc0 <atan2+0x220>
c0024ba4:	81 ff 00 00 f0 7f    	cmp    edi,0x7ff00000
c0024baa:	0f 84 80 00 00 00    	je     c0024c30 <atan2+0x190>
c0024bb0:	29 df                	sub    edi,ebx
c0024bb2:	c1 ff 14             	sar    edi,0x14
c0024bb5:	83 ff 3c             	cmp    edi,0x3c
c0024bb8:	0f 8f b2 00 00 00    	jg     c0024c70 <atan2+0x1d0>
c0024bbe:	c1 ea 1f             	shr    edx,0x1f
c0024bc1:	84 d2                	test   dl,dl
c0024bc3:	0f 84 97 01 00 00    	je     c0024d60 <atan2+0x2c0>
c0024bc9:	83 ff c4             	cmp    edi,0xffffffc4
c0024bcc:	0f 8d 8e 01 00 00    	jge    c0024d60 <atan2+0x2c0>
c0024bd2:	d9 ee                	fldz   
c0024bd4:	83 f9 01             	cmp    ecx,0x1
c0024bd7:	0f 84 02 01 00 00    	je     c0024cdf <atan2+0x23f>
c0024bdd:	83 f9 02             	cmp    ecx,0x2
c0024be0:	0f 84 2a 01 00 00    	je     c0024d10 <atan2+0x270>
c0024be6:	85 c9                	test   ecx,ecx
c0024be8:	74 86                	je     c0024b70 <atan2+0xd0>
c0024bea:	dd 05 f0 ff 02 c0    	fld    QWORD PTR ds:0xc002fff0
c0024bf0:	de e9                	fsubp  st(1),st
c0024bf2:	dc 25 f8 e5 02 c0    	fsub   QWORD PTR ds:0xc002e5f8
c0024bf8:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0024bfc:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0024c00:	e9 6b ff ff ff       	jmp    c0024b70 <atan2+0xd0>
c0024c05:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0024c09:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0024c10:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0024c14:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0024c18:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0024c1c:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0024c20:	83 c4 4c             	add    esp,0x4c
c0024c23:	e9 a8 11 00 00       	jmp    c0025dd0 <atan>
c0024c28:	90                   	nop
c0024c29:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0024c30:	85 ed                	test   ebp,ebp
c0024c32:	0f 88 b8 00 00 00    	js     c0024cf0 <atan2+0x250>
c0024c38:	dd 05 f8 ff 02 c0    	fld    QWORD PTR ds:0xc002fff8
c0024c3e:	dc 05 00 e6 02 c0    	fadd   QWORD PTR ds:0xc002e600
c0024c44:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0024c48:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0024c4c:	e9 1f ff ff ff       	jmp    c0024b70 <atan2+0xd0>
c0024c51:	eb 0d                	jmp    c0024c60 <atan2+0x1c0>
c0024c53:	90                   	nop
c0024c54:	90                   	nop
c0024c55:	90                   	nop
c0024c56:	90                   	nop
c0024c57:	90                   	nop
c0024c58:	90                   	nop
c0024c59:	90                   	nop
c0024c5a:	90                   	nop
c0024c5b:	90                   	nop
c0024c5c:	90                   	nop
c0024c5d:	90                   	nop
c0024c5e:	90                   	nop
c0024c5f:	90                   	nop
c0024c60:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0024c64:	e9 07 ff ff ff       	jmp    c0024b70 <atan2+0xd0>
c0024c69:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0024c70:	dd 05 f0 ff 02 c0    	fld    QWORD PTR ds:0xc002fff0
c0024c76:	83 e1 01             	and    ecx,0x1
c0024c79:	d9 05 5c e6 02 c0    	fld    DWORD PTR ds:0xc002e65c
c0024c7f:	de c9                	fmulp  st(1),st
c0024c81:	dc 05 00 e6 02 c0    	fadd   QWORD PTR ds:0xc002e600
c0024c87:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0024c8b:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0024c8f:	e9 40 ff ff ff       	jmp    c0024bd4 <atan2+0x134>
c0024c94:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0024c9a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0024ca0:	dd 05 f8 ff 02 c0    	fld    QWORD PTR ds:0xc002fff8
c0024ca6:	dc 05 f8 e5 02 c0    	fadd   QWORD PTR ds:0xc002e5f8
c0024cac:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0024cb0:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0024cb4:	e9 b7 fe ff ff       	jmp    c0024b70 <atan2+0xd0>
c0024cb9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0024cc0:	81 ff 00 00 f0 7f    	cmp    edi,0x7ff00000
c0024cc6:	74 68                	je     c0024d30 <atan2+0x290>
c0024cc8:	83 f9 02             	cmp    ecx,0x2
c0024ccb:	74 d3                	je     c0024ca0 <atan2+0x200>
c0024ccd:	83 f9 03             	cmp    ecx,0x3
c0024cd0:	0f 84 6e fe ff ff    	je     c0024b44 <atan2+0xa4>
c0024cd6:	d9 ee                	fldz   
c0024cd8:	49                   	dec    ecx
c0024cd9:	0f 85 91 fe ff ff    	jne    c0024b70 <atan2+0xd0>
c0024cdf:	d9 e0                	fchs   
c0024ce1:	e9 8a fe ff ff       	jmp    c0024b70 <atan2+0xd0>
c0024ce6:	8d 76 00             	lea    esi,[esi+0x0]
c0024ce9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0024cf0:	dd 05 f8 ff 02 c0    	fld    QWORD PTR ds:0xc002fff8
c0024cf6:	dd 05 80 e6 02 c0    	fld    QWORD PTR ds:0xc002e680
c0024cfc:	de e1                	fsubrp st(1),st
c0024cfe:	e9 41 ff ff ff       	jmp    c0024c44 <atan2+0x1a4>
c0024d03:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0024d09:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0024d10:	dd 05 f0 ff 02 c0    	fld    QWORD PTR ds:0xc002fff0
c0024d16:	de e9                	fsubp  st(1),st
c0024d18:	dc 2d f8 e5 02 c0    	fsubr  QWORD PTR ds:0xc002e5f8
c0024d1e:	e9 21 ff ff ff       	jmp    c0024c44 <atan2+0x1a4>
c0024d23:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0024d29:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0024d30:	83 f9 02             	cmp    ecx,0x2
c0024d33:	0f 84 82 00 00 00    	je     c0024dbb <atan2+0x31b>
c0024d39:	83 f9 03             	cmp    ecx,0x3
c0024d3c:	74 62                	je     c0024da0 <atan2+0x300>
c0024d3e:	49                   	dec    ecx
c0024d3f:	90                   	nop
c0024d40:	74 43                	je     c0024d85 <atan2+0x2e5>
c0024d42:	dd 05 f8 ff 02 c0    	fld    QWORD PTR ds:0xc002fff8
c0024d48:	dc 05 70 e6 02 c0    	fadd   QWORD PTR ds:0xc002e670
c0024d4e:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0024d52:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0024d56:	e9 15 fe ff ff       	jmp    c0024b70 <atan2+0xd0>
c0024d5b:	90                   	nop
c0024d5c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0024d60:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0024d64:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0024d68:	dc 74 24 10          	fdiv   QWORD PTR [esp+0x10]
c0024d6c:	dd 1c 24             	fstp   QWORD PTR [esp]
c0024d6f:	e8 fc 18 00 00       	call   c0026670 <fabs>
c0024d74:	dd 1c 24             	fstp   QWORD PTR [esp]
c0024d77:	e8 54 10 00 00       	call   c0025dd0 <atan>
c0024d7c:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0024d80:	e9 4f fe ff ff       	jmp    c0024bd4 <atan2+0x134>
c0024d85:	dd 05 f8 ff 02 c0    	fld    QWORD PTR ds:0xc002fff8
c0024d8b:	dd 05 88 e6 02 c0    	fld    QWORD PTR ds:0xc002e688
c0024d91:	de e1                	fsubrp st(1),st
c0024d93:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0024d97:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0024d9b:	e9 d0 fd ff ff       	jmp    c0024b70 <atan2+0xd0>
c0024da0:	dd 05 f8 ff 02 c0    	fld    QWORD PTR ds:0xc002fff8
c0024da6:	dd 05 98 e6 02 c0    	fld    QWORD PTR ds:0xc002e698
c0024dac:	de e1                	fsubrp st(1),st
c0024dae:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0024db2:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0024db6:	e9 b5 fd ff ff       	jmp    c0024b70 <atan2+0xd0>
c0024dbb:	dd 05 f8 ff 02 c0    	fld    QWORD PTR ds:0xc002fff8
c0024dc1:	dc 05 90 e6 02 c0    	fadd   QWORD PTR ds:0xc002e690
c0024dc7:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0024dcb:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0024dcf:	e9 9c fd ff ff       	jmp    c0024b70 <atan2+0xd0>
c0024dd4:	66 90                	xchg   ax,ax
c0024dd6:	66 90                	xchg   ax,ax
c0024dd8:	66 90                	xchg   ax,ax
c0024dda:	66 90                	xchg   ax,ax
c0024ddc:	66 90                	xchg   ax,ax
c0024dde:	66 90                	xchg   ax,ax

c0024de0 <cosh>:
c0024de0:	53                   	push   ebx
c0024de1:	83 ec 28             	sub    esp,0x28
c0024de4:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c0024de8:	dd 54 24 10          	fst    QWORD PTR [esp+0x10]
c0024dec:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0024df0:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0024df6:	81 fb ff ff ef 7f    	cmp    ebx,0x7fefffff
c0024dfc:	0f 8f 9e 00 00 00    	jg     c0024ea0 <cosh+0xc0>
c0024e02:	dd d8                	fstp   st(0)
c0024e04:	81 fb 42 2e d6 3f    	cmp    ebx,0x3fd62e42
c0024e0a:	7e 44                	jle    c0024e50 <cosh+0x70>
c0024e0c:	81 fb ff ff 35 40    	cmp    ebx,0x4035ffff
c0024e12:	0f 8e a8 00 00 00    	jle    c0024ec0 <cosh+0xe0>
c0024e18:	81 fb 41 2e 86 40    	cmp    ebx,0x40862e41
c0024e1e:	0f 8e dc 00 00 00    	jle    c0024f00 <cosh+0x120>
c0024e24:	81 fb ce 33 86 40    	cmp    ebx,0x408633ce
c0024e2a:	0f 8e 00 01 00 00    	jle    c0024f30 <cosh+0x150>
c0024e30:	d9 05 a0 e6 02 c0    	fld    DWORD PTR ds:0xc002e6a0
c0024e36:	eb 0c                	jmp    c0024e44 <cosh+0x64>
c0024e38:	90                   	nop
c0024e39:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0024e40:	dd d9                	fstp   st(1)
c0024e42:	dd d9                	fstp   st(1)
c0024e44:	83 c4 28             	add    esp,0x28
c0024e47:	5b                   	pop    ebx
c0024e48:	c3                   	ret    
c0024e49:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0024e50:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0024e54:	dd 1c 24             	fstp   QWORD PTR [esp]
c0024e57:	e8 14 18 00 00       	call   c0026670 <fabs>
c0024e5c:	dd 1c 24             	fstp   QWORD PTR [esp]
c0024e5f:	e8 7c 13 00 00       	call   c00261e0 <expm1>
c0024e64:	81 fb ff ff 7f 3c    	cmp    ebx,0x3c7fffff
c0024e6a:	d9 e8                	fld1   
c0024e6c:	d9 c1                	fld    st(1)
c0024e6e:	d8 c1                	fadd   st,st(1)
c0024e70:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0024e74:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0024e78:	7e c6                	jle    c0024e40 <cosh+0x60>
c0024e7a:	d9 ca                	fxch   st(2)
c0024e7c:	d8 c8                	fmul   st,st(0)
c0024e7e:	d9 ca                	fxch   st(2)
c0024e80:	d8 c0                	fadd   st,st(0)
c0024e82:	de fa                	fdivp  st(2),st
c0024e84:	de c1                	faddp  st(1),st
c0024e86:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0024e8a:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0024e8e:	83 c4 28             	add    esp,0x28
c0024e91:	5b                   	pop    ebx
c0024e92:	c3                   	ret    
c0024e93:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0024e99:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0024ea0:	d9 c0                	fld    st(0)
c0024ea2:	de c9                	fmulp  st(1),st
c0024ea4:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0024ea8:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0024eac:	83 c4 28             	add    esp,0x28
c0024eaf:	5b                   	pop    ebx
c0024eb0:	c3                   	ret    
c0024eb1:	eb 0d                	jmp    c0024ec0 <cosh+0xe0>
c0024eb3:	90                   	nop
c0024eb4:	90                   	nop
c0024eb5:	90                   	nop
c0024eb6:	90                   	nop
c0024eb7:	90                   	nop
c0024eb8:	90                   	nop
c0024eb9:	90                   	nop
c0024eba:	90                   	nop
c0024ebb:	90                   	nop
c0024ebc:	90                   	nop
c0024ebd:	90                   	nop
c0024ebe:	90                   	nop
c0024ebf:	90                   	nop
c0024ec0:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0024ec4:	dd 1c 24             	fstp   QWORD PTR [esp]
c0024ec7:	e8 a4 17 00 00       	call   c0026670 <fabs>
c0024ecc:	dd 1c 24             	fstp   QWORD PTR [esp]
c0024ecf:	e8 54 1d 00 00       	call   c0026c28 <exp>
c0024ed4:	d9 05 5c e6 02 c0    	fld    DWORD PTR ds:0xc002e65c
c0024eda:	d9 c1                	fld    st(1)
c0024edc:	d8 c9                	fmul   st,st(1)
c0024ede:	d9 c9                	fxch   st(1)
c0024ee0:	de f2                	fdivrp st(2),st
c0024ee2:	de c1                	faddp  st(1),st
c0024ee4:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0024ee8:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0024eec:	e9 53 ff ff ff       	jmp    c0024e44 <cosh+0x64>
c0024ef1:	eb 0d                	jmp    c0024f00 <cosh+0x120>
c0024ef3:	90                   	nop
c0024ef4:	90                   	nop
c0024ef5:	90                   	nop
c0024ef6:	90                   	nop
c0024ef7:	90                   	nop
c0024ef8:	90                   	nop
c0024ef9:	90                   	nop
c0024efa:	90                   	nop
c0024efb:	90                   	nop
c0024efc:	90                   	nop
c0024efd:	90                   	nop
c0024efe:	90                   	nop
c0024eff:	90                   	nop
c0024f00:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0024f04:	dd 1c 24             	fstp   QWORD PTR [esp]
c0024f07:	e8 64 17 00 00       	call   c0026670 <fabs>
c0024f0c:	dd 1c 24             	fstp   QWORD PTR [esp]
c0024f0f:	e8 14 1d 00 00       	call   c0026c28 <exp>
c0024f14:	d9 05 5c e6 02 c0    	fld    DWORD PTR ds:0xc002e65c
c0024f1a:	de c9                	fmulp  st(1),st
c0024f1c:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0024f20:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0024f24:	e9 1b ff ff ff       	jmp    c0024e44 <cosh+0x64>
c0024f29:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0024f30:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0024f34:	dd 1c 24             	fstp   QWORD PTR [esp]
c0024f37:	e8 34 17 00 00       	call   c0026670 <fabs>
c0024f3c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0024f41:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024f45:	dd 1c 24             	fstp   QWORD PTR [esp]
c0024f48:	e8 d3 0c 00 00       	call   c0025c20 <__ldexp_exp>
c0024f4d:	e9 f2 fe ff ff       	jmp    c0024e44 <cosh+0x64>
c0024f52:	66 90                	xchg   ax,ax
c0024f54:	66 90                	xchg   ax,ax
c0024f56:	66 90                	xchg   ax,ax
c0024f58:	66 90                	xchg   ax,ax
c0024f5a:	66 90                	xchg   ax,ax
c0024f5c:	66 90                	xchg   ax,ax
c0024f5e:	66 90                	xchg   ax,ax

c0024f60 <pow>:
c0024f60:	81 ec 9c 00 00 00    	sub    esp,0x9c
c0024f66:	89 b4 24 90 00 00 00 	mov    DWORD PTR [esp+0x90],esi
c0024f6d:	dd 84 24 a0 00 00 00 	fld    QWORD PTR [esp+0xa0]
c0024f74:	89 9c 24 8c 00 00 00 	mov    DWORD PTR [esp+0x8c],ebx
c0024f7b:	89 bc 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],edi
c0024f82:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0024f86:	89 ac 24 98 00 00 00 	mov    DWORD PTR [esp+0x98],ebp
c0024f8d:	dd 84 24 a8 00 00 00 	fld    QWORD PTR [esp+0xa8]
c0024f94:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0024f98:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0024f9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024fa0:	89 f3                	mov    ebx,esi
c0024fa2:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0024fa8:	89 d9                	mov    ecx,ebx
c0024faa:	09 c1                	or     ecx,eax
c0024fac:	0f 84 9e 00 00 00    	je     c0025050 <pow+0xf0>
c0024fb2:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0024fb6:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0024fba:	81 ff 00 00 f0 3f    	cmp    edi,0x3ff00000
c0024fc0:	75 3e                	jne    c0025000 <pow+0xa0>
c0024fc2:	85 ed                	test   ebp,ebp
c0024fc4:	75 3a                	jne    c0025000 <pow+0xa0>
c0024fc6:	d9 e8                	fld1   
c0024fc8:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0024fcc:	eb 02                	jmp    c0024fd0 <pow+0x70>
c0024fce:	dd d8                	fstp   st(0)
c0024fd0:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0024fd4:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0024fdb:	8b b4 24 90 00 00 00 	mov    esi,DWORD PTR [esp+0x90]
c0024fe2:	8b bc 24 94 00 00 00 	mov    edi,DWORD PTR [esp+0x94]
c0024fe9:	8b ac 24 98 00 00 00 	mov    ebp,DWORD PTR [esp+0x98]
c0024ff0:	81 c4 9c 00 00 00    	add    esp,0x9c
c0024ff6:	c3                   	ret    
c0024ff7:	89 f6                	mov    esi,esi
c0024ff9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0025000:	89 fa                	mov    edx,edi
c0025002:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0025008:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c002500c:	81 fa 00 00 f0 7f    	cmp    edx,0x7ff00000
c0025012:	7f 1c                	jg     c0025030 <pow+0xd0>
c0025014:	0f 94 c1             	sete   cl
c0025017:	85 ed                	test   ebp,ebp
c0025019:	0f 95 c2             	setne  dl
c002501c:	84 ca                	test   dl,cl
c002501e:	75 10                	jne    c0025030 <pow+0xd0>
c0025020:	81 fb 00 00 f0 7f    	cmp    ebx,0x7ff00000
c0025026:	7f 08                	jg     c0025030 <pow+0xd0>
c0025028:	75 36                	jne    c0025060 <pow+0x100>
c002502a:	85 c0                	test   eax,eax
c002502c:	74 32                	je     c0025060 <pow+0x100>
c002502e:	66 90                	xchg   ax,ax
c0025030:	d9 ee                	fldz   
c0025032:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0025036:	d8 c1                	fadd   st,st(1)
c0025038:	d9 c9                	fxch   st(1)
c002503a:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c002503e:	de c1                	faddp  st(1),st
c0025040:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0025044:	eb 8a                	jmp    c0024fd0 <pow+0x70>
c0025046:	8d 76 00             	lea    esi,[esi+0x0]
c0025049:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0025050:	d9 e8                	fld1   
c0025052:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0025056:	e9 75 ff ff ff       	jmp    c0024fd0 <pow+0x70>
c002505b:	90                   	nop
c002505c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0025060:	31 c9                	xor    ecx,ecx
c0025062:	85 ff                	test   edi,edi
c0025064:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0025068:	0f 88 22 01 00 00    	js     c0025190 <pow+0x230>
c002506e:	85 c0                	test   eax,eax
c0025070:	75 5e                	jne    c00250d0 <pow+0x170>
c0025072:	81 fb 00 00 f0 7f    	cmp    ebx,0x7ff00000
c0025078:	0f 84 72 01 00 00    	je     c00251f0 <pow+0x290>
c002507e:	81 fb 00 00 f0 3f    	cmp    ebx,0x3ff00000
c0025084:	0f 84 b6 01 00 00    	je     c0025240 <pow+0x2e0>
c002508a:	81 fe 00 00 00 40    	cmp    esi,0x40000000
c0025090:	0f 84 38 07 00 00    	je     c00257ce <pow+0x86e>
c0025096:	81 fe 00 00 08 40    	cmp    esi,0x40080000
c002509c:	0f 84 33 08 00 00    	je     c00258d5 <pow+0x975>
c00250a2:	81 fe 00 00 10 40    	cmp    esi,0x40100000
c00250a8:	0f 84 4f 08 00 00    	je     c00258fd <pow+0x99d>
c00250ae:	81 fe 00 00 e0 3f    	cmp    esi,0x3fe00000
c00250b4:	75 1a                	jne    c00250d0 <pow+0x170>
c00250b6:	89 f8                	mov    eax,edi
c00250b8:	f7 d0                	not    eax
c00250ba:	c1 e8 1f             	shr    eax,0x1f
c00250bd:	84 c0                	test   al,al
c00250bf:	0f 85 f1 08 00 00    	jne    c00259b6 <pow+0xa56>
c00250c5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00250c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00250d0:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00250d4:	dd 1c 24             	fstp   QWORD PTR [esp]
c00250d7:	e8 94 15 00 00       	call   c0026670 <fabs>
c00250dc:	85 ed                	test   ebp,ebp
c00250de:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00250e2:	75 1e                	jne    c0025102 <pow+0x1a2>
c00250e4:	89 f8                	mov    eax,edi
c00250e6:	25 ff ff ff 3f       	and    eax,0x3fffffff
c00250eb:	3d 00 00 f0 3f       	cmp    eax,0x3ff00000
c00250f0:	0f 84 33 06 00 00    	je     c0025729 <pow+0x7c9>
c00250f6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00250fa:	85 c0                	test   eax,eax
c00250fc:	0f 84 27 06 00 00    	je     c0025729 <pow+0x7c9>
c0025102:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0025106:	89 f8                	mov    eax,edi
c0025108:	c1 e8 1f             	shr    eax,0x1f
c002510b:	48                   	dec    eax
c002510c:	09 c1                	or     ecx,eax
c002510e:	0f 84 49 01 00 00    	je     c002525d <pow+0x2fd>
c0025114:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0025118:	d9 ee                	fldz   
c002511a:	49                   	dec    ecx
c002511b:	09 c1                	or     ecx,eax
c002511d:	0f 85 4b 01 00 00    	jne    c002526e <pow+0x30e>
c0025123:	d9 e0                	fchs   
c0025125:	dd 5c 24 50          	fstp   QWORD PTR [esp+0x50]
c0025129:	d9 05 a4 e6 02 c0    	fld    DWORD PTR ds:0xc002e6a4
c002512f:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0025133:	db 2d f0 e6 02 c0    	fld    TBYTE PTR ds:0xc002e6f0
c0025139:	db 2d 00 e7 02 c0    	fld    TBYTE PTR ds:0xc002e700
c002513f:	d9 e8                	fld1   
c0025141:	d9 e0                	fchs   
c0025143:	db 7c 24 38          	fstp   TBYTE PTR [esp+0x38]
c0025147:	81 fb 00 00 e0 41    	cmp    ebx,0x41e00000
c002514d:	0f 8e 40 01 00 00    	jle    c0025293 <pow+0x333>
c0025153:	81 fb 00 00 f0 43    	cmp    ebx,0x43f00000
c0025159:	0f 8e 93 06 00 00    	jle    c00257f2 <pow+0x892>
c002515f:	dd d8                	fstp   st(0)
c0025161:	dd d8                	fstp   st(0)
c0025163:	81 7c 24 30 ff ff ef 3f 	cmp    DWORD PTR [esp+0x30],0x3fefffff
c002516b:	0f 8f c9 07 00 00    	jg     c002593a <pow+0x9da>
c0025171:	85 f6                	test   esi,esi
c0025173:	0f 88 94 08 00 00    	js     c0025a0d <pow+0xaad>
c0025179:	d9 ee                	fldz   
c002517b:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c002517f:	e9 4c fe ff ff       	jmp    c0024fd0 <pow+0x70>
c0025184:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c002518a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0025190:	81 fb ff ff 3f 43    	cmp    ebx,0x433fffff
c0025196:	0f 8f 94 00 00 00    	jg     c0025230 <pow+0x2d0>
c002519c:	81 fb ff ff ef 3f    	cmp    ebx,0x3fefffff
c00251a2:	0f 8e c6 fe ff ff    	jle    c002506e <pow+0x10e>
c00251a8:	89 d9                	mov    ecx,ebx
c00251aa:	c1 f9 14             	sar    ecx,0x14
c00251ad:	81 e9 ff 03 00 00    	sub    ecx,0x3ff
c00251b3:	83 f9 14             	cmp    ecx,0x14
c00251b6:	0f 8e e5 06 00 00    	jle    c00258a1 <pow+0x941>
c00251bc:	ba 34 00 00 00       	mov    edx,0x34
c00251c1:	29 ca                	sub    edx,ecx
c00251c3:	89 d1                	mov    ecx,edx
c00251c5:	89 c2                	mov    edx,eax
c00251c7:	d3 ea                	shr    edx,cl
c00251c9:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00251cd:	d3 e2                	shl    edx,cl
c00251cf:	39 c2                	cmp    edx,eax
c00251d1:	0f 85 97 fe ff ff    	jne    c002506e <pow+0x10e>
c00251d7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00251db:	b9 02 00 00 00       	mov    ecx,0x2
c00251e0:	83 e2 01             	and    edx,0x1
c00251e3:	29 d1                	sub    ecx,edx
c00251e5:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c00251e9:	e9 80 fe ff ff       	jmp    c002506e <pow+0x10e>
c00251ee:	66 90                	xchg   ax,ax
c00251f0:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00251f4:	8d 87 00 00 10 c0    	lea    eax,[edi-0x3ff00000]
c00251fa:	09 e8                	or     eax,ebp
c00251fc:	0f 84 61 05 00 00    	je     c0025763 <pow+0x803>
c0025202:	81 ff ff ff ef 3f    	cmp    edi,0x3fefffff
c0025208:	0f 8e 60 05 00 00    	jle    c002576e <pow+0x80e>
c002520e:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0025212:	85 f6                	test   esi,esi
c0025214:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0025218:	0f 89 b2 fd ff ff    	jns    c0024fd0 <pow+0x70>
c002521e:	e9 56 ff ff ff       	jmp    c0025179 <pow+0x219>
c0025223:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0025229:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0025230:	ba 02 00 00 00       	mov    edx,0x2
c0025235:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0025239:	e9 30 fe ff ff       	jmp    c002506e <pow+0x10e>
c002523e:	66 90                	xchg   ax,ax
c0025240:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0025244:	85 f6                	test   esi,esi
c0025246:	dd 54 24 28          	fst    QWORD PTR [esp+0x28]
c002524a:	0f 89 7e fd ff ff    	jns    c0024fce <pow+0x6e>
c0025250:	d9 e8                	fld1   
c0025252:	de f1                	fdivrp st(1),st
c0025254:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0025258:	e9 73 fd ff ff       	jmp    c0024fd0 <pow+0x70>
c002525d:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0025261:	d8 e0                	fsub   st,st(0)
c0025263:	d8 f0                	fdiv   st,st(0)
c0025265:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0025269:	e9 62 fd ff ff       	jmp    c0024fd0 <pow+0x70>
c002526e:	dd 5c 24 50          	fstp   QWORD PTR [esp+0x50]
c0025272:	d9 05 a0 e6 02 c0    	fld    DWORD PTR ds:0xc002e6a0
c0025278:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c002527c:	db 2d d0 e6 02 c0    	fld    TBYTE PTR ds:0xc002e6d0
c0025282:	db 2d e0 e6 02 c0    	fld    TBYTE PTR ds:0xc002e6e0
c0025288:	d9 e8                	fld1   
c002528a:	db 7c 24 38          	fstp   TBYTE PTR [esp+0x38]
c002528e:	e9 b4 fe ff ff       	jmp    c0025147 <pow+0x1e7>
c0025293:	dd d8                	fstp   st(0)
c0025295:	dd d8                	fstp   st(0)
c0025297:	31 c0                	xor    eax,eax
c0025299:	81 e7 00 00 f0 7f    	and    edi,0x7ff00000
c002529f:	75 1b                	jne    c00252bc <pow+0x35c>
c00252a1:	d9 05 b8 e6 02 c0    	fld    DWORD PTR ds:0xc002e6b8
c00252a7:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c00252ab:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00252af:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00252b3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00252b7:	b8 cb ff ff ff       	mov    eax,0xffffffcb
c00252bc:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00252c0:	89 f9                	mov    ecx,edi
c00252c2:	81 e7 ff ff 0f 00    	and    edi,0xfffff
c00252c8:	c1 f9 14             	sar    ecx,0x14
c00252cb:	8d 8c 08 01 fc ff ff 	lea    ecx,[eax+ecx*1-0x3ff]
c00252d2:	89 f8                	mov    eax,edi
c00252d4:	0d 00 00 f0 3f       	or     eax,0x3ff00000
c00252d9:	81 ff 8e 98 03 00    	cmp    edi,0x3988e
c00252df:	0f 8e f8 04 00 00    	jle    c00257dd <pow+0x87d>
c00252e5:	81 ff 79 b6 0b 00    	cmp    edi,0xbb679
c00252eb:	0f 8e 25 06 00 00    	jle    c0025916 <pow+0x9b6>
c00252f1:	d9 ee                	fldz   
c00252f3:	41                   	inc    ecx
c00252f4:	db 7c 24 68          	fstp   TBYTE PTR [esp+0x68]
c00252f8:	2d 00 00 10 00       	sub    eax,0x100000
c00252fd:	31 d2                	xor    edx,edx
c00252ff:	d9 ee                	fldz   
c0025301:	db 7c 24 58          	fstp   TBYTE PTR [esp+0x58]
c0025305:	d9 e8                	fld1   
c0025307:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002530b:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c002530f:	d1 f8                	sar    eax,1
c0025311:	31 f6                	xor    esi,esi
c0025313:	0d 00 00 00 20       	or     eax,0x20000000
c0025318:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c002531c:	8d 84 02 00 00 08 00 	lea    eax,[edx+eax*1+0x80000]
c0025323:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0025327:	31 ff                	xor    edi,edi
c0025329:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c002532d:	d9 c0                	fld    st(0)
c002532f:	d8 e2                	fsub   st,st(2)
c0025331:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0025335:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0025339:	d9 c1                	fld    st(1)
c002533b:	d8 c3                	fadd   st,st(3)
c002533d:	d8 3d 58 e6 02 c0    	fdivr  DWORD PTR ds:0xc002e658
c0025343:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0025347:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c002534b:	db 7c 24 18          	fstp   TBYTE PTR [esp+0x18]
c002534f:	d9 c0                	fld    st(0)
c0025351:	db 6c 24 18          	fld    TBYTE PTR [esp+0x18]
c0025355:	de ca                	fmulp  st(2),st
c0025357:	d9 c9                	fxch   st(1)
c0025359:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c002535d:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0025361:	89 6c 24 34          	mov    DWORD PTR [esp+0x34],ebp
c0025365:	31 ed                	xor    ebp,ebp
c0025367:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c002536b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c002536f:	31 c0                	xor    eax,eax
c0025371:	89 7c 24 30          	mov    DWORD PTR [esp+0x30],edi
c0025375:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c0025379:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c002537d:	d9 c0                	fld    st(0)
c002537f:	d8 c9                	fmul   st,st(1)
c0025381:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0025385:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0025389:	d9 c2                	fld    st(2)
c002538b:	d8 cc                	fmul   st,st(4)
c002538d:	de ed                	fsubp  st(5),st
c002538f:	d9 ca                	fxch   st(2)
c0025391:	de e6                	fsubrp st(6),st
c0025393:	d9 cc                	fxch   st(4)
c0025395:	de e5                	fsubrp st(5),st
c0025397:	d9 cc                	fxch   st(4)
c0025399:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c002539d:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c00253a1:	d8 c9                	fmul   st,st(1)
c00253a3:	de ea                	fsubp  st(2),st
c00253a5:	db 6c 24 18          	fld    TBYTE PTR [esp+0x18]
c00253a9:	de ca                	fmulp  st(2),st
c00253ab:	d9 c9                	fxch   st(1)
c00253ad:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c00253b1:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c00253b5:	d9 c3                	fld    st(3)
c00253b7:	dc 0d 38 e7 02 c0    	fmul   QWORD PTR ds:0xc002e738
c00253bd:	dc 05 40 e7 02 c0    	fadd   QWORD PTR ds:0xc002e740
c00253c3:	d8 cc                	fmul   st,st(4)
c00253c5:	dc 05 48 e7 02 c0    	fadd   QWORD PTR ds:0xc002e748
c00253cb:	d8 cc                	fmul   st,st(4)
c00253cd:	dc 05 50 e7 02 c0    	fadd   QWORD PTR ds:0xc002e750
c00253d3:	d8 cc                	fmul   st,st(4)
c00253d5:	dc 05 58 e7 02 c0    	fadd   QWORD PTR ds:0xc002e758
c00253db:	d8 cc                	fmul   st,st(4)
c00253dd:	dc 05 60 e7 02 c0    	fadd   QWORD PTR ds:0xc002e760
c00253e3:	d9 cc                	fxch   st(4)
c00253e5:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c00253e9:	d8 c8                	fmul   st,st(0)
c00253eb:	de cc                	fmulp  st(4),st
c00253ed:	d9 cb                	fxch   st(3)
c00253ef:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c00253f3:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c00253f7:	d9 c1                	fld    st(1)
c00253f9:	d8 c3                	fadd   st,st(3)
c00253fb:	d8 cc                	fmul   st,st(4)
c00253fd:	de c1                	faddp  st(1),st
c00253ff:	d9 c1                	fld    st(1)
c0025401:	d8 ca                	fmul   st,st(2)
c0025403:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0025407:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c002540b:	d9 c9                	fxch   st(1)
c002540d:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0025411:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0025415:	d9 05 bc e6 02 c0    	fld    DWORD PTR ds:0xc002e6bc
c002541b:	d9 c2                	fld    st(2)
c002541d:	d8 c1                	fadd   st,st(1)
c002541f:	d8 c2                	fadd   st,st(2)
c0025421:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0025425:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0025429:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c002542d:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0025431:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0025435:	31 c0                	xor    eax,eax
c0025437:	dc cc                	fmul   st(4),st
c0025439:	d9 cc                	fxch   st(4)
c002543b:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c002543f:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0025443:	d9 c9                	fxch   st(1)
c0025445:	d8 ec                	fsubr  st,st(4)
c0025447:	de e3                	fsubrp st(3),st
c0025449:	d9 c9                	fxch   st(1)
c002544b:	de e2                	fsubrp st(2),st
c002544d:	d9 c9                	fxch   st(1)
c002544f:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0025453:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0025457:	de cb                	fmulp  st(3),st
c0025459:	d9 cb                	fxch   st(3)
c002545b:	de c9                	fmulp  st(1),st
c002545d:	de c1                	faddp  st(1),st
c002545f:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0025463:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0025467:	d9 c1                	fld    st(1)
c0025469:	d8 c1                	fadd   st,st(1)
c002546b:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c002546f:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0025473:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0025477:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c002547b:	d9 c0                	fld    st(0)
c002547d:	d8 0d c0 e6 02 c0    	fmul   DWORD PTR ds:0xc002e6c0
c0025483:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0025487:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c002548b:	d9 cb                	fxch   st(3)
c002548d:	d8 e9                	fsubr  st,st(1)
c002548f:	de ea                	fsubp  st(2),st
c0025491:	d9 c9                	fxch   st(1)
c0025493:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0025497:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c002549b:	dc 0d 68 e7 02 c0    	fmul   QWORD PTR ds:0xc002e768
c00254a1:	d9 c9                	fxch   st(1)
c00254a3:	dc 0d 70 e7 02 c0    	fmul   QWORD PTR ds:0xc002e770
c00254a9:	de c1                	faddp  st(1),st
c00254ab:	db 6c 24 58          	fld    TBYTE PTR [esp+0x58]
c00254af:	de c1                	faddp  st(1),st
c00254b1:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c00254b5:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00254b9:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c00254bd:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c00254c1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00254c5:	d9 c2                	fld    st(2)
c00254c7:	d8 c2                	fadd   st,st(2)
c00254c9:	db 6c 24 68          	fld    TBYTE PTR [esp+0x68]
c00254cd:	dc c1                	fadd   st(1),st
c00254cf:	d9 c9                	fxch   st(1)
c00254d1:	d8 c2                	fadd   st,st(2)
c00254d3:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c00254d7:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00254db:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00254df:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00254e3:	dc e2                	fsubr  st(2),st
c00254e5:	d9 ca                	fxch   st(2)
c00254e7:	de e1                	fsubrp st(1),st
c00254e9:	de e3                	fsubrp st(3),st
c00254eb:	d9 ca                	fxch   st(2)
c00254ed:	de e9                	fsubp  st(1),st
c00254ef:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c00254f3:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c00254f7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00254fb:	31 db                	xor    ebx,ebx
c00254fd:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0025501:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0025505:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0025509:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c002550d:	d9 c0                	fld    st(0)
c002550f:	d8 e2                	fsub   st,st(2)
c0025511:	d8 cc                	fmul   st,st(4)
c0025513:	d9 c9                	fxch   st(1)
c0025515:	de cb                	fmulp  st(3),st
c0025517:	de c2                	faddp  st(2),st
c0025519:	d9 c9                	fxch   st(1)
c002551b:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c002551f:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0025523:	d9 ca                	fxch   st(2)
c0025525:	de c9                	fmulp  st(1),st
c0025527:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c002552b:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c002552f:	d9 c1                	fld    st(1)
c0025531:	d8 c1                	fadd   st,st(1)
c0025533:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0025537:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c002553b:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c002553f:	81 fa ff ff 8f 40    	cmp    edx,0x408fffff
c0025545:	89 d3                	mov    ebx,edx
c0025547:	0f 8e 38 02 00 00    	jle    c0025785 <pow+0x825>
c002554d:	8d 8a 00 00 70 bf    	lea    ecx,[edx-0x40900000]
c0025553:	09 c1                	or     ecx,eax
c0025555:	0f 85 f6 03 00 00    	jne    c0025951 <pow+0x9f1>
c002555b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002555f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0025563:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0025567:	d8 e1                	fsub   st,st(1)
c0025569:	d9 c2                	fld    st(2)
c002556b:	dc 05 78 e7 02 c0    	fadd   QWORD PTR ds:0xc002e778
c0025571:	df f1                	fcomip st,st(1)
c0025573:	dd d8                	fstp   st(0)
c0025575:	0f 87 2a 04 00 00    	ja     c00259a5 <pow+0xa45>
c002557b:	89 d9                	mov    ecx,ebx
c002557d:	c1 f9 14             	sar    ecx,0x14
c0025580:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0025586:	81 e9 fe 03 00 00    	sub    ecx,0x3fe
c002558c:	b8 00 00 10 00       	mov    eax,0x100000
c0025591:	d3 f8                	sar    eax,cl
c0025593:	31 c9                	xor    ecx,ecx
c0025595:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0025599:	01 d8                	add    eax,ebx
c002559b:	be ff ff 0f 00       	mov    esi,0xfffff
c00255a0:	89 c2                	mov    edx,eax
c00255a2:	c1 fa 14             	sar    edx,0x14
c00255a5:	81 e2 ff 07 00 00    	and    edx,0x7ff
c00255ab:	81 ea ff 03 00 00    	sub    edx,0x3ff
c00255b1:	88 d1                	mov    cl,dl
c00255b3:	d3 fe                	sar    esi,cl
c00255b5:	b9 14 00 00 00       	mov    ecx,0x14
c00255ba:	f7 d6                	not    esi
c00255bc:	29 d1                	sub    ecx,edx
c00255be:	21 c6                	and    esi,eax
c00255c0:	25 ff ff 0f 00       	and    eax,0xfffff
c00255c5:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c00255c9:	0d 00 00 10 00       	or     eax,0x100000
c00255ce:	d3 f8                	sar    eax,cl
c00255d0:	85 db                	test   ebx,ebx
c00255d2:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c00255d6:	89 c1                	mov    ecx,eax
c00255d8:	79 02                	jns    c00255dc <pow+0x67c>
c00255da:	f7 d9                	neg    ecx
c00255dc:	de e9                	fsubp  st(1),st
c00255de:	89 ce                	mov    esi,ecx
c00255e0:	c1 e6 14             	shl    esi,0x14
c00255e3:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c00255e7:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c00255eb:	d9 c1                	fld    st(1)
c00255ed:	d8 c1                	fadd   st,st(1)
c00255ef:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c00255f3:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00255f7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00255fb:	31 c0                	xor    eax,eax
c00255fd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0025601:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0025605:	d9 c0                	fld    st(0)
c0025607:	d8 0d c4 e6 02 c0    	fmul   DWORD PTR ds:0xc002e6c4
c002560d:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0025611:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0025615:	d9 ca                	fxch   st(2)
c0025617:	d8 e9                	fsubr  st,st(1)
c0025619:	de eb                	fsubp  st(3),st
c002561b:	d9 ca                	fxch   st(2)
c002561d:	dc 0d 80 e7 02 c0    	fmul   QWORD PTR ds:0xc002e780
c0025623:	d9 ca                	fxch   st(2)
c0025625:	dc 0d 88 e7 02 c0    	fmul   QWORD PTR ds:0xc002e788
c002562b:	de c2                	faddp  st(2),st
c002562d:	d9 c9                	fxch   st(1)
c002562f:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0025633:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0025637:	d9 c1                	fld    st(1)
c0025639:	d8 c1                	fadd   st,st(1)
c002563b:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c002563f:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0025643:	d9 c0                	fld    st(0)
c0025645:	d8 c9                	fmul   st,st(1)
c0025647:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c002564b:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c002564f:	d9 c0                	fld    st(0)
c0025651:	dc 0d 90 e7 02 c0    	fmul   QWORD PTR ds:0xc002e790
c0025657:	dc 25 98 e7 02 c0    	fsub   QWORD PTR ds:0xc002e798
c002565d:	d8 c9                	fmul   st,st(1)
c002565f:	dc 05 a0 e7 02 c0    	fadd   QWORD PTR ds:0xc002e7a0
c0025665:	d8 c9                	fmul   st,st(1)
c0025667:	dc 25 a8 e7 02 c0    	fsub   QWORD PTR ds:0xc002e7a8
c002566d:	d8 c9                	fmul   st,st(1)
c002566f:	dc 05 b0 e7 02 c0    	fadd   QWORD PTR ds:0xc002e7b0
c0025675:	de c9                	fmulp  st(1),st
c0025677:	d8 e9                	fsubr  st,st(1)
c0025679:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c002567d:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0025681:	d9 cb                	fxch   st(3)
c0025683:	d8 e9                	fsubr  st,st(1)
c0025685:	de ea                	fsubp  st(2),st
c0025687:	d9 c9                	fxch   st(1)
c0025689:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c002568d:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0025691:	d9 c1                	fld    st(1)
c0025693:	d8 cb                	fmul   st,st(3)
c0025695:	d9 cb                	fxch   st(3)
c0025697:	d8 25 c8 e6 02 c0    	fsub   DWORD PTR ds:0xc002e6c8
c002569d:	de fb                	fdivp  st(3),st
c002569f:	d9 c1                	fld    st(1)
c00256a1:	d8 c9                	fmul   st,st(1)
c00256a3:	de c1                	faddp  st(1),st
c00256a5:	de ea                	fsubp  st(2),st
c00256a7:	d9 c9                	fxch   st(1)
c00256a9:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c00256ad:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c00256b1:	de e1                	fsubrp st(1),st
c00256b3:	d8 2d 58 e6 02 c0    	fsubr  DWORD PTR ds:0xc002e658
c00256b9:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c00256bd:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00256c1:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00256c5:	89 d3                	mov    ebx,edx
c00256c7:	01 f3                	add    ebx,esi
c00256c9:	81 fb ff ff 0f 00    	cmp    ebx,0xfffff
c00256cf:	0f 8e a7 02 00 00    	jle    c002597c <pow+0xa1c>
c00256d5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00256d9:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00256dd:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c00256e1:	db 6c 24 38          	fld    TBYTE PTR [esp+0x38]
c00256e5:	de c9                	fmulp  st(1),st
c00256e7:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00256eb:	e9 e0 f8 ff ff       	jmp    c0024fd0 <pow+0x70>
c00256f0:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00256f4:	dd 1c 24             	fstp   QWORD PTR [esp]
c00256f7:	e8 74 0f 00 00       	call   c0026670 <fabs>
c00256fc:	85 ed                	test   ebp,ebp
c00256fe:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0025702:	0f 85 55 fb ff ff    	jne    c002525d <pow+0x2fd>
c0025708:	89 f8                	mov    eax,edi
c002570a:	25 ff ff ff 3f       	and    eax,0x3fffffff
c002570f:	3d 00 00 f0 3f       	cmp    eax,0x3ff00000
c0025714:	74 0b                	je     c0025721 <pow+0x7c1>
c0025716:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c002571b:	0f 85 3c fb ff ff    	jne    c002525d <pow+0x2fd>
c0025721:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c0025729:	85 f6                	test   esi,esi
c002572b:	79 0a                	jns    c0025737 <pow+0x7d7>
c002572d:	d9 e8                	fld1   
c002572f:	dc 74 24 28          	fdiv   QWORD PTR [esp+0x28]
c0025733:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0025737:	85 ff                	test   edi,edi
c0025739:	0f 89 91 f8 ff ff    	jns    c0024fd0 <pow+0x70>
c002573f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0025743:	2d 00 00 f0 3f       	sub    eax,0x3ff00000
c0025748:	0b 44 24 38          	or     eax,DWORD PTR [esp+0x38]
c002574c:	0f 85 10 02 00 00    	jne    c0025962 <pow+0xa02>
c0025752:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0025756:	d8 e0                	fsub   st,st(0)
c0025758:	d8 f0                	fdiv   st,st(0)
c002575a:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c002575e:	e9 6d f8 ff ff       	jmp    c0024fd0 <pow+0x70>
c0025763:	d9 e8                	fld1   
c0025765:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0025769:	e9 62 f8 ff ff       	jmp    c0024fd0 <pow+0x70>
c002576e:	85 f6                	test   esi,esi
c0025770:	0f 89 03 fa ff ff    	jns    c0025179 <pow+0x219>
c0025776:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c002577a:	d9 e0                	fchs   
c002577c:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0025780:	e9 4b f8 ff ff       	jmp    c0024fd0 <pow+0x70>
c0025785:	89 d1                	mov    ecx,edx
c0025787:	81 e1 ff ff ff 7f    	and    ecx,0x7fffffff
c002578d:	81 f9 ff cb 90 40    	cmp    ecx,0x4090cbff
c0025793:	0f 8e 4f 01 00 00    	jle    c00258e8 <pow+0x988>
c0025799:	8d 8a 00 34 6f 3f    	lea    ecx,[edx+0x3f6f3400]
c002579f:	09 c1                	or     ecx,eax
c00257a1:	0f 85 55 02 00 00    	jne    c00259fc <pow+0xa9c>
c00257a7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00257ab:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00257af:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c00257b3:	d8 e1                	fsub   st,st(1)
c00257b5:	df f2                	fcomip st,st(2)
c00257b7:	0f 82 be fd ff ff    	jb     c002557b <pow+0x61b>
c00257bd:	dd d8                	fstp   st(0)
c00257bf:	dd d8                	fstp   st(0)
c00257c1:	dd 44 24 50          	fld    QWORD PTR [esp+0x50]
c00257c5:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00257c9:	e9 02 f8 ff ff       	jmp    c0024fd0 <pow+0x70>
c00257ce:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00257d2:	d8 c8                	fmul   st,st(0)
c00257d4:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00257d8:	e9 f3 f7 ff ff       	jmp    c0024fd0 <pow+0x70>
c00257dd:	d9 ee                	fldz   
c00257df:	31 d2                	xor    edx,edx
c00257e1:	db 7c 24 68          	fstp   TBYTE PTR [esp+0x68]
c00257e5:	d9 ee                	fldz   
c00257e7:	db 7c 24 58          	fstp   TBYTE PTR [esp+0x58]
c00257eb:	d9 e8                	fld1   
c00257ed:	e9 15 fb ff ff       	jmp    c0025307 <pow+0x3a7>
c00257f2:	81 7c 24 30 fe ff ef 3f 	cmp    DWORD PTR [esp+0x30],0x3feffffe
c00257fa:	0f 8e 91 01 00 00    	jle    c0025991 <pow+0xa31>
c0025800:	81 7c 24 30 00 00 f0 3f 	cmp    DWORD PTR [esp+0x30],0x3ff00000
c0025808:	0f 8f da 01 00 00    	jg     c00259e8 <pow+0xa88>
c002580e:	dd d8                	fstp   st(0)
c0025810:	dd d8                	fstp   st(0)
c0025812:	d9 e8                	fld1   
c0025814:	31 c0                	xor    eax,eax
c0025816:	dc 6c 24 28          	fsubr  QWORD PTR [esp+0x28]
c002581a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002581e:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0025822:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0025826:	d9 c0                	fld    st(0)
c0025828:	d8 0d b0 e6 02 c0    	fmul   DWORD PTR ds:0xc002e6b0
c002582e:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0025832:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0025836:	d9 c1                	fld    st(1)
c0025838:	dc 0d 28 e7 02 c0    	fmul   QWORD PTR ds:0xc002e728
c002583e:	d9 c2                	fld    st(2)
c0025840:	d8 0d b4 e6 02 c0    	fmul   DWORD PTR ds:0xc002e6b4
c0025846:	db 2d 10 e7 02 c0    	fld    TBYTE PTR ds:0xc002e710
c002584c:	de e1                	fsubrp st(1),st
c002584e:	d8 cb                	fmul   st,st(3)
c0025850:	d8 2d 5c e6 02 c0    	fsubr  DWORD PTR ds:0xc002e65c
c0025856:	d9 cb                	fxch   st(3)
c0025858:	d8 c8                	fmul   st,st(0)
c002585a:	de cb                	fmulp  st(3),st
c002585c:	d9 ca                	fxch   st(2)
c002585e:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0025862:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0025866:	dc 0d 30 e7 02 c0    	fmul   QWORD PTR ds:0xc002e730
c002586c:	de ea                	fsubp  st(2),st
c002586e:	d9 c9                	fxch   st(1)
c0025870:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0025874:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0025878:	d9 c1                	fld    st(1)
c002587a:	d8 c1                	fadd   st,st(1)
c002587c:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0025880:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0025884:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0025888:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c002588c:	dc e2                	fsubr  st(2),st
c002588e:	d9 c9                	fxch   st(1)
c0025890:	de e2                	fsubrp st(2),st
c0025892:	d9 c9                	fxch   st(1)
c0025894:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0025898:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c002589c:	e9 56 fc ff ff       	jmp    c00254f7 <pow+0x597>
c00258a1:	85 c0                	test   eax,eax
c00258a3:	0f 85 47 fe ff ff    	jne    c00256f0 <pow+0x790>
c00258a9:	b8 14 00 00 00       	mov    eax,0x14
c00258ae:	29 c8                	sub    eax,ecx
c00258b0:	89 c1                	mov    ecx,eax
c00258b2:	89 d8                	mov    eax,ebx
c00258b4:	d3 f8                	sar    eax,cl
c00258b6:	89 c2                	mov    edx,eax
c00258b8:	d3 e2                	shl    edx,cl
c00258ba:	39 da                	cmp    edx,ebx
c00258bc:	0f 85 bc f7 ff ff    	jne    c002507e <pow+0x11e>
c00258c2:	83 e0 01             	and    eax,0x1
c00258c5:	b9 02 00 00 00       	mov    ecx,0x2
c00258ca:	29 c1                	sub    ecx,eax
c00258cc:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c00258d0:	e9 a9 f7 ff ff       	jmp    c002507e <pow+0x11e>
c00258d5:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00258d9:	d9 c0                	fld    st(0)
c00258db:	d8 c9                	fmul   st,st(1)
c00258dd:	de c9                	fmulp  st(1),st
c00258df:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00258e3:	e9 e8 f6 ff ff       	jmp    c0024fd0 <pow+0x70>
c00258e8:	81 f9 00 00 e0 3f    	cmp    ecx,0x3fe00000
c00258ee:	0f 8f 28 01 00 00    	jg     c0025a1c <pow+0xabc>
c00258f4:	31 f6                	xor    esi,esi
c00258f6:	31 c9                	xor    ecx,ecx
c00258f8:	e9 fa fc ff ff       	jmp    c00255f7 <pow+0x697>
c00258fd:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0025901:	d8 c8                	fmul   st,st(0)
c0025903:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0025907:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c002590b:	d8 c8                	fmul   st,st(0)
c002590d:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0025911:	e9 ba f6 ff ff       	jmp    c0024fd0 <pow+0x70>
c0025916:	d9 05 a8 e6 02 c0    	fld    DWORD PTR ds:0xc002e6a8
c002591c:	ba 00 00 04 00       	mov    edx,0x40000
c0025921:	db 7c 24 68          	fstp   TBYTE PTR [esp+0x68]
c0025925:	dd 05 20 e7 02 c0    	fld    QWORD PTR ds:0xc002e720
c002592b:	db 7c 24 58          	fstp   TBYTE PTR [esp+0x58]
c002592f:	d9 05 ac e6 02 c0    	fld    DWORD PTR ds:0xc002e6ac
c0025935:	e9 cd f9 ff ff       	jmp    c0025307 <pow+0x3a7>
c002593a:	85 f6                	test   esi,esi
c002593c:	0f 8e 37 f8 ff ff    	jle    c0025179 <pow+0x219>
c0025942:	d9 05 a0 e6 02 c0    	fld    DWORD PTR ds:0xc002e6a0
c0025948:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c002594c:	e9 7f f6 ff ff       	jmp    c0024fd0 <pow+0x70>
c0025951:	dd d8                	fstp   st(0)
c0025953:	dd d8                	fstp   st(0)
c0025955:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0025959:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c002595d:	e9 6e f6 ff ff       	jmp    c0024fd0 <pow+0x70>
c0025962:	83 7c 24 38 01       	cmp    DWORD PTR [esp+0x38],0x1
c0025967:	0f 85 63 f6 ff ff    	jne    c0024fd0 <pow+0x70>
c002596d:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0025971:	d9 e0                	fchs   
c0025973:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0025977:	e9 54 f6 ff ff       	jmp    c0024fd0 <pow+0x70>
c002597c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0025980:	89 04 24             	mov    DWORD PTR [esp],eax
c0025983:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0025987:	e8 c0 13 00 00       	call   c0026d4c <ldexp>
c002598c:	e9 50 fd ff ff       	jmp    c00256e1 <pow+0x781>
c0025991:	85 f6                	test   esi,esi
c0025993:	0f 99 c0             	setns  al
c0025996:	84 c0                	test   al,al
c0025998:	db c9                	fcmovne st,st(1)
c002599a:	dd d9                	fstp   st(1)
c002599c:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00259a0:	e9 2b f6 ff ff       	jmp    c0024fd0 <pow+0x70>
c00259a5:	dd d8                	fstp   st(0)
c00259a7:	dd d8                	fstp   st(0)
c00259a9:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c00259ad:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00259b1:	e9 1a f6 ff ff       	jmp    c0024fd0 <pow+0x70>
c00259b6:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c00259bd:	8b b4 24 90 00 00 00 	mov    esi,DWORD PTR [esp+0x90]
c00259c4:	8b bc 24 94 00 00 00 	mov    edi,DWORD PTR [esp+0x94]
c00259cb:	8b ac 24 98 00 00 00 	mov    ebp,DWORD PTR [esp+0x98]
c00259d2:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00259d6:	dd 9c 24 a0 00 00 00 	fstp   QWORD PTR [esp+0xa0]
c00259dd:	81 c4 9c 00 00 00    	add    esp,0x9c
c00259e3:	e9 d8 12 00 00       	jmp    c0026cc0 <sqrt>
c00259e8:	85 f6                	test   esi,esi
c00259ea:	0f 9e c0             	setle  al
c00259ed:	84 c0                	test   al,al
c00259ef:	db c9                	fcmovne st,st(1)
c00259f1:	dd d9                	fstp   st(1)
c00259f3:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00259f7:	e9 d4 f5 ff ff       	jmp    c0024fd0 <pow+0x70>
c00259fc:	dd d8                	fstp   st(0)
c00259fe:	dd d8                	fstp   st(0)
c0025a00:	dd 44 24 50          	fld    QWORD PTR [esp+0x50]
c0025a04:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0025a08:	e9 c3 f5 ff ff       	jmp    c0024fd0 <pow+0x70>
c0025a0d:	d9 05 a0 e6 02 c0    	fld    DWORD PTR ds:0xc002e6a0
c0025a13:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0025a17:	e9 b4 f5 ff ff       	jmp    c0024fd0 <pow+0x70>
c0025a1c:	c1 f9 14             	sar    ecx,0x14
c0025a1f:	e9 62 fb ff ff       	jmp    c0025586 <pow+0x626>
c0025a24:	66 90                	xchg   ax,ax
c0025a26:	66 90                	xchg   ax,ax
c0025a28:	66 90                	xchg   ax,ax
c0025a2a:	66 90                	xchg   ax,ax
c0025a2c:	66 90                	xchg   ax,ax
c0025a2e:	66 90                	xchg   ax,ax

c0025a30 <sinh>:
c0025a30:	53                   	push   ebx
c0025a31:	83 ec 38             	sub    esp,0x38
c0025a34:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c0025a38:	dd 54 24 10          	fst    QWORD PTR [esp+0x10]
c0025a3c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025a40:	89 c3                	mov    ebx,eax
c0025a42:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0025a48:	81 fb ff ff ef 7f    	cmp    ebx,0x7fefffff
c0025a4e:	0f 8f ec 00 00 00    	jg     c0025b40 <sinh+0x110>
c0025a54:	dd d8                	fstp   st(0)
c0025a56:	d9 e8                	fld1   
c0025a58:	85 c0                	test   eax,eax
c0025a5a:	0f 88 90 00 00 00    	js     c0025af0 <sinh+0xc0>
c0025a60:	81 fb ff ff 35 40    	cmp    ebx,0x4035ffff
c0025a66:	d9 05 5c e6 02 c0    	fld    DWORD PTR ds:0xc002e65c
c0025a6c:	0f 8f 8e 00 00 00    	jg     c0025b00 <sinh+0xd0>
c0025a72:	dd d9                	fstp   st(1)
c0025a74:	eb 0c                	jmp    c0025a82 <sinh+0x52>
c0025a76:	8d 76 00             	lea    esi,[esi+0x0]
c0025a79:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0025a80:	dd d9                	fstp   st(1)
c0025a82:	81 fb ff ff 2f 3e    	cmp    ebx,0x3e2fffff
c0025a88:	0f 8f d2 00 00 00    	jg     c0025b60 <sinh+0x130>
c0025a8e:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0025a92:	d9 e8                	fld1   
c0025a94:	d9 c1                	fld    st(1)
c0025a96:	dc 05 c0 e7 02 c0    	fadd   QWORD PTR ds:0xc002e7c0
c0025a9c:	df f1                	fcomip st,st(1)
c0025a9e:	dd d8                	fstp   st(0)
c0025aa0:	77 3e                	ja     c0025ae0 <sinh+0xb0>
c0025aa2:	dd d8                	fstp   st(0)
c0025aa4:	db 7c 24 18          	fstp   TBYTE PTR [esp+0x18]
c0025aa8:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0025aac:	dd 1c 24             	fstp   QWORD PTR [esp]
c0025aaf:	e8 bc 0b 00 00       	call   c0026670 <fabs>
c0025ab4:	dd 1c 24             	fstp   QWORD PTR [esp]
c0025ab7:	e8 24 07 00 00       	call   c00261e0 <expm1>
c0025abc:	db 6c 24 18          	fld    TBYTE PTR [esp+0x18]
c0025ac0:	d9 c1                	fld    st(1)
c0025ac2:	d8 c2                	fadd   st,st(2)
c0025ac4:	d9 c2                	fld    st(2)
c0025ac6:	d8 cb                	fmul   st,st(3)
c0025ac8:	d9 cb                	fxch   st(3)
c0025aca:	d8 05 58 e6 02 c0    	fadd   DWORD PTR ds:0xc002e658
c0025ad0:	de fb                	fdivp  st(3),st
c0025ad2:	de e2                	fsubrp st(2),st
c0025ad4:	de c9                	fmulp  st(1),st
c0025ad6:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0025ada:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0025ade:	eb 02                	jmp    c0025ae2 <sinh+0xb2>
c0025ae0:	dd d9                	fstp   st(1)
c0025ae2:	83 c4 38             	add    esp,0x38
c0025ae5:	5b                   	pop    ebx
c0025ae6:	c3                   	ret    
c0025ae7:	89 f6                	mov    esi,esi
c0025ae9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0025af0:	d9 e0                	fchs   
c0025af2:	81 fb ff ff 35 40    	cmp    ebx,0x4035ffff
c0025af8:	d9 05 b8 e7 02 c0    	fld    DWORD PTR ds:0xc002e7b8
c0025afe:	7e 80                	jle    c0025a80 <sinh+0x50>
c0025b00:	81 fb 41 2e 86 40    	cmp    ebx,0x40862e41
c0025b06:	0f 8e a4 00 00 00    	jle    c0025bb0 <sinh+0x180>
c0025b0c:	dd d8                	fstp   st(0)
c0025b0e:	81 fb ce 33 86 40    	cmp    ebx,0x408633ce
c0025b14:	0f 8e c6 00 00 00    	jle    c0025be0 <sinh+0x1b0>
c0025b1a:	dd d8                	fstp   st(0)
c0025b1c:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0025b20:	dc 0d c0 e7 02 c0    	fmul   QWORD PTR ds:0xc002e7c0
c0025b26:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0025b2a:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0025b2e:	83 c4 38             	add    esp,0x38
c0025b31:	5b                   	pop    ebx
c0025b32:	c3                   	ret    
c0025b33:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0025b39:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0025b40:	d9 c0                	fld    st(0)
c0025b42:	de c1                	faddp  st(1),st
c0025b44:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0025b48:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0025b4c:	83 c4 38             	add    esp,0x38
c0025b4f:	5b                   	pop    ebx
c0025b50:	c3                   	ret    
c0025b51:	eb 0d                	jmp    c0025b60 <sinh+0x130>
c0025b53:	90                   	nop
c0025b54:	90                   	nop
c0025b55:	90                   	nop
c0025b56:	90                   	nop
c0025b57:	90                   	nop
c0025b58:	90                   	nop
c0025b59:	90                   	nop
c0025b5a:	90                   	nop
c0025b5b:	90                   	nop
c0025b5c:	90                   	nop
c0025b5d:	90                   	nop
c0025b5e:	90                   	nop
c0025b5f:	90                   	nop
c0025b60:	db 7c 24 18          	fstp   TBYTE PTR [esp+0x18]
c0025b64:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0025b68:	dd 1c 24             	fstp   QWORD PTR [esp]
c0025b6b:	e8 00 0b 00 00       	call   c0026670 <fabs>
c0025b70:	dd 1c 24             	fstp   QWORD PTR [esp]
c0025b73:	e8 68 06 00 00       	call   c00261e0 <expm1>
c0025b78:	81 fb ff ff ef 3f    	cmp    ebx,0x3fefffff
c0025b7e:	db 6c 24 18          	fld    TBYTE PTR [esp+0x18]
c0025b82:	0f 8e 38 ff ff ff    	jle    c0025ac0 <sinh+0x90>
c0025b88:	d9 c1                	fld    st(1)
c0025b8a:	d8 05 58 e6 02 c0    	fadd   DWORD PTR ds:0xc002e658
c0025b90:	d8 fa                	fdivr  st,st(2)
c0025b92:	de c2                	faddp  st(2),st
c0025b94:	de c9                	fmulp  st(1),st
c0025b96:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0025b9a:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0025b9e:	83 c4 38             	add    esp,0x38
c0025ba1:	5b                   	pop    ebx
c0025ba2:	c3                   	ret    
c0025ba3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0025ba9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0025bb0:	dd d9                	fstp   st(1)
c0025bb2:	db 7c 24 18          	fstp   TBYTE PTR [esp+0x18]
c0025bb6:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0025bba:	dd 1c 24             	fstp   QWORD PTR [esp]
c0025bbd:	e8 ae 0a 00 00       	call   c0026670 <fabs>
c0025bc2:	dd 1c 24             	fstp   QWORD PTR [esp]
c0025bc5:	e8 5e 10 00 00       	call   c0026c28 <exp>
c0025bca:	db 6c 24 18          	fld    TBYTE PTR [esp+0x18]
c0025bce:	de c9                	fmulp  st(1),st
c0025bd0:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0025bd4:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0025bd8:	e9 05 ff ff ff       	jmp    c0025ae2 <sinh+0xb2>
c0025bdd:	8d 76 00             	lea    esi,[esi+0x0]
c0025be0:	db 7c 24 18          	fstp   TBYTE PTR [esp+0x18]
c0025be4:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0025be8:	dd 1c 24             	fstp   QWORD PTR [esp]
c0025beb:	e8 80 0a 00 00       	call   c0026670 <fabs>
c0025bf0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0025bf5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0025bf9:	dd 1c 24             	fstp   QWORD PTR [esp]
c0025bfc:	e8 1f 00 00 00       	call   c0025c20 <__ldexp_exp>
c0025c01:	db 6c 24 18          	fld    TBYTE PTR [esp+0x18]
c0025c05:	de c9                	fmulp  st(1),st
c0025c07:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0025c0b:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0025c0f:	e9 ce fe ff ff       	jmp    c0025ae2 <sinh+0xb2>
c0025c14:	66 90                	xchg   ax,ax
c0025c16:	66 90                	xchg   ax,ax
c0025c18:	66 90                	xchg   ax,ax
c0025c1a:	66 90                	xchg   ax,ax
c0025c1c:	66 90                	xchg   ax,ax
c0025c1e:	66 90                	xchg   ax,ax

c0025c20 <__ldexp_exp>:
c0025c20:	53                   	push   ebx
c0025c21:	83 ec 28             	sub    esp,0x28
c0025c24:	dd 05 c8 e7 02 c0    	fld    QWORD PTR ds:0xc002e7c8
c0025c2a:	dc 6c 24 30          	fsubr  QWORD PTR [esp+0x30]
c0025c2e:	dd 1c 24             	fstp   QWORD PTR [esp]
c0025c31:	e8 f2 0f 00 00       	call   c0026c28 <exp>
c0025c36:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0025c3a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0025c3e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025c42:	89 da                	mov    edx,ebx
c0025c44:	89 d8                	mov    eax,ebx
c0025c46:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0025c4a:	c1 e8 14             	shr    eax,0x14
c0025c4d:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c0025c53:	81 ca 00 00 e0 7f    	or     edx,0x7fe00000
c0025c59:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0025c5d:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0025c61:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0025c65:	8d 84 02 08 03 00 00 	lea    eax,[edx+eax*1+0x308]
c0025c6c:	c1 e0 14             	shl    eax,0x14
c0025c6f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0025c73:	31 c0                	xor    eax,eax
c0025c75:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0025c79:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0025c7d:	de c9                	fmulp  st(1),st
c0025c7f:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0025c83:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0025c87:	83 c4 28             	add    esp,0x28
c0025c8a:	5b                   	pop    ebx
c0025c8b:	c3                   	ret    
c0025c8c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]

c0025c90 <__ldexp_cexp>:
c0025c90:	57                   	push   edi
c0025c91:	56                   	push   esi
c0025c92:	53                   	push   ebx
c0025c93:	83 ec 60             	sub    esp,0x60
c0025c96:	dd 44 24 7c          	fld    QWORD PTR [esp+0x7c]
c0025c9a:	dd 44 24 74          	fld    QWORD PTR [esp+0x74]
c0025c9e:	dd 14 24             	fst    QWORD PTR [esp]
c0025ca1:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0025ca5:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0025ca9:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c0025cad:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0025cb1:	e8 6a 0f 00 00       	call   c0026c20 <creal>
c0025cb6:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0025cba:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c0025cbe:	dd 1c 24             	fstp   QWORD PTR [esp]
c0025cc1:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0025cc5:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0025cc9:	e8 42 0f 00 00       	call   c0026c10 <cimag>
c0025cce:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0025cd2:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0025cd6:	dc 25 c8 e7 02 c0    	fsub   QWORD PTR ds:0xc002e7c8
c0025cdc:	dd 1c 24             	fstp   QWORD PTR [esp]
c0025cdf:	e8 44 0f 00 00       	call   c0026c28 <exp>
c0025ce4:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0025ce8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0025cec:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0025cf0:	89 fa                	mov    edx,edi
c0025cf2:	89 f8                	mov    eax,edi
c0025cf4:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0025cf8:	c1 e8 14             	shr    eax,0x14
c0025cfb:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c0025d01:	81 ca 00 00 e0 7f    	or     edx,0x7fe00000
c0025d07:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0025d0b:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0025d12:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0025d16:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0025d1a:	8d 94 02 09 ff ff ff 	lea    edx,[edx+eax*1-0xf7]
c0025d21:	89 d1                	mov    ecx,edx
c0025d23:	c1 e9 1f             	shr    ecx,0x1f
c0025d26:	01 d1                	add    ecx,edx
c0025d28:	d1 f9                	sar    ecx,1
c0025d2a:	8d 81 ff 03 00 00    	lea    eax,[ecx+0x3ff]
c0025d30:	29 ca                	sub    edx,ecx
c0025d32:	c1 e0 14             	shl    eax,0x14
c0025d35:	81 c2 ff 03 00 00    	add    edx,0x3ff
c0025d3b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0025d3f:	c1 e2 14             	shl    edx,0x14
c0025d42:	31 c0                	xor    eax,eax
c0025d44:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0025d48:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0025d4c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0025d50:	31 d2                	xor    edx,edx
c0025d52:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0025d56:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0025d5a:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0025d5e:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0025d62:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0025d66:	dd 1c 24             	fstp   QWORD PTR [esp]
c0025d69:	e8 12 03 00 00       	call   c0026080 <cos>
c0025d6e:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0025d72:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0025d76:	db 7c 24 48          	fstp   TBYTE PTR [esp+0x48]
c0025d7a:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c0025d7e:	db 7c 24 38          	fstp   TBYTE PTR [esp+0x38]
c0025d82:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c0025d86:	db 7c 24 20          	fstp   TBYTE PTR [esp+0x20]
c0025d8a:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0025d8e:	dd 1c 24             	fstp   QWORD PTR [esp]
c0025d91:	e8 fa 0b 00 00       	call   c0026990 <sin>
c0025d96:	89 d8                	mov    eax,ebx
c0025d98:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0025d9c:	db 6c 24 48          	fld    TBYTE PTR [esp+0x48]
c0025da0:	dc c9                	fmul   st(1),st
c0025da2:	db 6c 24 38          	fld    TBYTE PTR [esp+0x38]
c0025da6:	dc ca                	fmul   st(2),st
c0025da8:	db 6c 24 20          	fld    TBYTE PTR [esp+0x20]
c0025dac:	dc cb                	fmul   st(3),st
c0025dae:	d9 cb                	fxch   st(3)
c0025db0:	dd 1b                	fstp   QWORD PTR [ebx]
c0025db2:	d9 cb                	fxch   st(3)
c0025db4:	de c9                	fmulp  st(1),st
c0025db6:	de ca                	fmulp  st(2),st
c0025db8:	de c9                	fmulp  st(1),st
c0025dba:	dd 5b 08             	fstp   QWORD PTR [ebx+0x8]
c0025dbd:	83 c4 60             	add    esp,0x60
c0025dc0:	5b                   	pop    ebx
c0025dc1:	5e                   	pop    esi
c0025dc2:	5f                   	pop    edi
c0025dc3:	c2 04 00             	ret    0x4
c0025dc6:	66 90                	xchg   ax,ax
c0025dc8:	66 90                	xchg   ax,ax
c0025dca:	66 90                	xchg   ax,ax
c0025dcc:	66 90                	xchg   ax,ax
c0025dce:	66 90                	xchg   ax,ax

c0025dd0 <atan>:
c0025dd0:	56                   	push   esi
c0025dd1:	53                   	push   ebx
c0025dd2:	83 ec 24             	sub    esp,0x24
c0025dd5:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c0025dd9:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0025ddd:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0025de1:	89 f3                	mov    ebx,esi
c0025de3:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0025de9:	81 fb ff ff 0f 44    	cmp    ebx,0x440fffff
c0025def:	7e 5f                	jle    c0025e50 <atan+0x80>
c0025df1:	81 fb 00 00 f0 7f    	cmp    ebx,0x7ff00000
c0025df7:	7f 0a                	jg     c0025e03 <atan+0x33>
c0025df9:	75 25                	jne    c0025e20 <atan+0x50>
c0025dfb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025dff:	85 c0                	test   eax,eax
c0025e01:	74 1d                	je     c0025e20 <atan+0x50>
c0025e03:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0025e07:	d8 c0                	fadd   st,st(0)
c0025e09:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0025e0d:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0025e11:	83 c4 24             	add    esp,0x24
c0025e14:	5b                   	pop    ebx
c0025e15:	5e                   	pop    esi
c0025e16:	c3                   	ret    
c0025e17:	89 f6                	mov    esi,esi
c0025e19:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0025e20:	85 f6                	test   esi,esi
c0025e22:	dd 05 f8 e7 02 c0    	fld    QWORD PTR ds:0xc002e7f8
c0025e28:	0f 8e 22 01 00 00    	jle    c0025f50 <atan+0x180>
c0025e2e:	dc 05 00 e6 02 c0    	fadd   QWORD PTR ds:0xc002e600
c0025e34:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0025e38:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0025e3c:	83 c4 24             	add    esp,0x24
c0025e3f:	5b                   	pop    ebx
c0025e40:	5e                   	pop    esi
c0025e41:	c3                   	ret    
c0025e42:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0025e49:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0025e50:	81 fb ff ff db 3f    	cmp    ebx,0x3fdbffff
c0025e56:	0f 8f 34 01 00 00    	jg     c0025f90 <atan+0x1c0>
c0025e5c:	81 fb ff ff 3f 3e    	cmp    ebx,0x3e3fffff
c0025e62:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0025e66:	0f 8e c4 00 00 00    	jle    c0025f30 <atan+0x160>
c0025e6c:	eb 04                	jmp    c0025e72 <atan+0xa2>
c0025e6e:	66 90                	xchg   ax,ax
c0025e70:	dd d8                	fstp   st(0)
c0025e72:	d9 ee                	fldz   
c0025e74:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0025e79:	d9 ee                	fldz   
c0025e7b:	d9 c2                	fld    st(2)
c0025e7d:	40                   	inc    eax
c0025e7e:	d8 cb                	fmul   st,st(3)
c0025e80:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0025e84:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0025e88:	d9 c0                	fld    st(0)
c0025e8a:	d8 c9                	fmul   st,st(1)
c0025e8c:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0025e90:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0025e94:	d9 c0                	fld    st(0)
c0025e96:	dc 0d 28 e8 02 c0    	fmul   QWORD PTR ds:0xc002e828
c0025e9c:	dc 05 30 e8 02 c0    	fadd   QWORD PTR ds:0xc002e830
c0025ea2:	d8 c9                	fmul   st,st(1)
c0025ea4:	dc 05 38 e8 02 c0    	fadd   QWORD PTR ds:0xc002e838
c0025eaa:	d8 c9                	fmul   st,st(1)
c0025eac:	dc 05 40 e8 02 c0    	fadd   QWORD PTR ds:0xc002e840
c0025eb2:	d8 c9                	fmul   st,st(1)
c0025eb4:	dc 05 48 e8 02 c0    	fadd   QWORD PTR ds:0xc002e848
c0025eba:	d8 c9                	fmul   st,st(1)
c0025ebc:	dc 05 50 e8 02 c0    	fadd   QWORD PTR ds:0xc002e850
c0025ec2:	de ca                	fmulp  st(2),st
c0025ec4:	d9 c9                	fxch   st(1)
c0025ec6:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0025eca:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0025ece:	d9 c1                	fld    st(1)
c0025ed0:	dc 0d 58 e8 02 c0    	fmul   QWORD PTR ds:0xc002e858
c0025ed6:	dc 25 60 e8 02 c0    	fsub   QWORD PTR ds:0xc002e860
c0025edc:	d8 ca                	fmul   st,st(2)
c0025ede:	dc 25 68 e8 02 c0    	fsub   QWORD PTR ds:0xc002e868
c0025ee4:	d8 ca                	fmul   st,st(2)
c0025ee6:	dc 25 70 e8 02 c0    	fsub   QWORD PTR ds:0xc002e870
c0025eec:	d8 ca                	fmul   st,st(2)
c0025eee:	dc 25 78 e8 02 c0    	fsub   QWORD PTR ds:0xc002e878
c0025ef4:	de ca                	fmulp  st(2),st
c0025ef6:	d9 c9                	fxch   st(1)
c0025ef8:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0025efc:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0025f00:	de c1                	faddp  st(1),st
c0025f02:	d8 cb                	fmul   st,st(3)
c0025f04:	74 6a                	je     c0025f70 <atan+0x1a0>
c0025f06:	85 f6                	test   esi,esi
c0025f08:	de e2                	fsubrp st(2),st
c0025f0a:	d9 c9                	fxch   st(1)
c0025f0c:	de e2                	fsubrp st(2),st
c0025f0e:	de e1                	fsubrp st(1),st
c0025f10:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0025f14:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0025f18:	0f 89 f3 fe ff ff    	jns    c0025e11 <atan+0x41>
c0025f1e:	d9 e0                	fchs   
c0025f20:	83 c4 24             	add    esp,0x24
c0025f23:	5b                   	pop    ebx
c0025f24:	5e                   	pop    esi
c0025f25:	c3                   	ret    
c0025f26:	8d 76 00             	lea    esi,[esi+0x0]
c0025f29:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0025f30:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0025f34:	d9 e8                	fld1   
c0025f36:	d9 c2                	fld    st(2)
c0025f38:	dc 05 68 e6 02 c0    	fadd   QWORD PTR ds:0xc002e668
c0025f3e:	df f1                	fcomip st,st(1)
c0025f40:	dd d8                	fstp   st(0)
c0025f42:	0f 86 28 ff ff ff    	jbe    c0025e70 <atan+0xa0>
c0025f48:	dd d9                	fstp   st(1)
c0025f4a:	e9 c2 fe ff ff       	jmp    c0025e11 <atan+0x41>
c0025f4f:	90                   	nop
c0025f50:	dd 05 80 e6 02 c0    	fld    QWORD PTR ds:0xc002e680
c0025f56:	de e1                	fsubrp st(1),st
c0025f58:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0025f5c:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0025f60:	e9 ac fe ff ff       	jmp    c0025e11 <atan+0x41>
c0025f65:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0025f69:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0025f70:	dd da                	fstp   st(2)
c0025f72:	dd d8                	fstp   st(0)
c0025f74:	de e9                	fsubp  st(1),st
c0025f76:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0025f7a:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0025f7e:	83 c4 24             	add    esp,0x24
c0025f81:	5b                   	pop    ebx
c0025f82:	5e                   	pop    esi
c0025f83:	c3                   	ret    
c0025f84:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0025f8a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0025f90:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0025f94:	dd 1c 24             	fstp   QWORD PTR [esp]
c0025f97:	e8 d4 06 00 00       	call   c0026670 <fabs>
c0025f9c:	81 fb ff ff f2 3f    	cmp    ebx,0x3ff2ffff
c0025fa2:	7f 3c                	jg     c0025fe0 <atan+0x210>
c0025fa4:	81 fb ff ff e5 3f    	cmp    ebx,0x3fe5ffff
c0025faa:	0f 8f a0 00 00 00    	jg     c0026050 <atan+0x280>
c0025fb0:	d9 c0                	fld    st(0)
c0025fb2:	31 c0                	xor    eax,eax
c0025fb4:	d8 c1                	fadd   st,st(1)
c0025fb6:	d8 25 58 e6 02 c0    	fsub   DWORD PTR ds:0xc002e658
c0025fbc:	d9 c9                	fxch   st(1)
c0025fbe:	d8 05 c8 e6 02 c0    	fadd   DWORD PTR ds:0xc002e6c8
c0025fc4:	de f9                	fdivp  st(1),st
c0025fc6:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0025fca:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0025fce:	dd 05 18 e8 02 c0    	fld    QWORD PTR ds:0xc002e818
c0025fd4:	dd 05 20 e8 02 c0    	fld    QWORD PTR ds:0xc002e820
c0025fda:	e9 9c fe ff ff       	jmp    c0025e7b <atan+0xab>
c0025fdf:	90                   	nop
c0025fe0:	81 fb ff 7f 03 40    	cmp    ebx,0x40037fff
c0025fe6:	7f 38                	jg     c0026020 <atan+0x250>
c0025fe8:	d9 05 ac e6 02 c0    	fld    DWORD PTR ds:0xc002e6ac
c0025fee:	b8 02 00 00 00       	mov    eax,0x2
c0025ff3:	d9 c1                	fld    st(1)
c0025ff5:	d8 e1                	fsub   st,st(1)
c0025ff7:	d9 ca                	fxch   st(2)
c0025ff9:	de c9                	fmulp  st(1),st
c0025ffb:	d8 05 58 e6 02 c0    	fadd   DWORD PTR ds:0xc002e658
c0026001:	de f9                	fdivp  st(1),st
c0026003:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0026007:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c002600b:	dd 05 08 e8 02 c0    	fld    QWORD PTR ds:0xc002e808
c0026011:	dd 05 10 e8 02 c0    	fld    QWORD PTR ds:0xc002e810
c0026017:	e9 5f fe ff ff       	jmp    c0025e7b <atan+0xab>
c002601c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0026020:	d8 3d 80 e8 02 c0    	fdivr  DWORD PTR ds:0xc002e880
c0026026:	b8 03 00 00 00       	mov    eax,0x3
c002602b:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c002602f:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0026033:	dd 05 60 e6 02 c0    	fld    QWORD PTR ds:0xc002e660
c0026039:	dd 05 00 e6 02 c0    	fld    QWORD PTR ds:0xc002e600
c002603f:	e9 37 fe ff ff       	jmp    c0025e7b <atan+0xab>
c0026044:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c002604a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0026050:	d9 e8                	fld1   
c0026052:	b8 01 00 00 00       	mov    eax,0x1
c0026057:	d9 c1                	fld    st(1)
c0026059:	d8 e1                	fsub   st,st(1)
c002605b:	d9 ca                	fxch   st(2)
c002605d:	de c1                	faddp  st(1),st
c002605f:	de f9                	fdivp  st(1),st
c0026061:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0026065:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0026069:	dd 05 00 e8 02 c0    	fld    QWORD PTR ds:0xc002e800
c002606f:	dd 05 70 e6 02 c0    	fld    QWORD PTR ds:0xc002e670
c0026075:	e9 01 fe ff ff       	jmp    c0025e7b <atan+0xab>
c002607a:	66 90                	xchg   ax,ax
c002607c:	66 90                	xchg   ax,ax
c002607e:	66 90                	xchg   ax,ax

c0026080 <cos>:
c0026080:	83 ec 5c             	sub    esp,0x5c
c0026083:	dd 44 24 60          	fld    QWORD PTR [esp+0x60]
c0026087:	dd 54 24 28          	fst    QWORD PTR [esp+0x28]
c002608b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c002608f:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026094:	3d fb 21 e9 3f       	cmp    eax,0x3fe921fb
c0026099:	7f 55                	jg     c00260f0 <cos+0x70>
c002609b:	3d 9d a0 46 3e       	cmp    eax,0x3e46a09d
c00260a0:	7f 2e                	jg     c00260d0 <cos+0x50>
c00260a2:	d9 7c 24 36          	fnstcw WORD PTR [esp+0x36]
c00260a6:	0f b7 44 24 36       	movzx  eax,WORD PTR [esp+0x36]
c00260ab:	66 0d 00 0c          	or     ax,0xc00
c00260af:	66 89 44 24 34       	mov    WORD PTR [esp+0x34],ax
c00260b4:	d9 6c 24 34          	fldcw  WORD PTR [esp+0x34]
c00260b8:	db 5c 24 30          	fistp  DWORD PTR [esp+0x30]
c00260bc:	d9 6c 24 36          	fldcw  WORD PTR [esp+0x36]
c00260c0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00260c4:	85 c0                	test   eax,eax
c00260c6:	0f 84 94 00 00 00    	je     c0026160 <cos+0xe0>
c00260cc:	eb 04                	jmp    c00260d2 <cos+0x52>
c00260ce:	66 90                	xchg   ax,ax
c00260d0:	dd d8                	fstp   st(0)
c00260d2:	d9 ee                	fldz   
c00260d4:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c00260d8:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c00260dc:	dd 1c 24             	fstp   QWORD PTR [esp]
c00260df:	e8 ac 11 00 00       	call   c0027290 <__kernel_cos>
c00260e4:	83 c4 5c             	add    esp,0x5c
c00260e7:	c3                   	ret    
c00260e8:	90                   	nop
c00260e9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00260f0:	dd d8                	fstp   st(0)
c00260f2:	3d ff ff ef 7f       	cmp    eax,0x7fefffff
c00260f7:	7e 17                	jle    c0026110 <cos+0x90>
c00260f9:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c00260fd:	d8 e0                	fsub   st,st(0)
c00260ff:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0026103:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0026107:	83 c4 5c             	add    esp,0x5c
c002610a:	c3                   	ret    
c002610b:	90                   	nop
c002610c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0026110:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0026114:	8d 44 24 40          	lea    eax,[esp+0x40]
c0026118:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002611c:	dd 1c 24             	fstp   QWORD PTR [esp]
c002611f:	e8 3c 0c 00 00       	call   c0026d60 <__ieee754_rem_pio2>
c0026124:	83 e0 03             	and    eax,0x3
c0026127:	83 f8 01             	cmp    eax,0x1
c002612a:	0f 84 80 00 00 00    	je     c00261b0 <cos+0x130>
c0026130:	83 f8 02             	cmp    eax,0x2
c0026133:	74 5b                	je     c0026190 <cos+0x110>
c0026135:	85 c0                	test   eax,eax
c0026137:	74 37                	je     c0026170 <cos+0xf0>
c0026139:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c002613d:	b8 01 00 00 00       	mov    eax,0x1
c0026142:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0026146:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c002614a:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c002614e:	dd 1c 24             	fstp   QWORD PTR [esp]
c0026151:	e8 ba 1b 00 00       	call   c0027d10 <__kernel_sin>
c0026156:	eb 8c                	jmp    c00260e4 <cos+0x64>
c0026158:	90                   	nop
c0026159:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0026160:	d9 e8                	fld1   
c0026162:	83 c4 5c             	add    esp,0x5c
c0026165:	c3                   	ret    
c0026166:	8d 76 00             	lea    esi,[esi+0x0]
c0026169:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0026170:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0026174:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0026178:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c002617c:	dd 1c 24             	fstp   QWORD PTR [esp]
c002617f:	e8 0c 11 00 00       	call   c0027290 <__kernel_cos>
c0026184:	e9 5b ff ff ff       	jmp    c00260e4 <cos+0x64>
c0026189:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0026190:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0026194:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0026198:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c002619c:	dd 1c 24             	fstp   QWORD PTR [esp]
c002619f:	e8 ec 10 00 00       	call   c0027290 <__kernel_cos>
c00261a4:	d9 e0                	fchs   
c00261a6:	e9 39 ff ff ff       	jmp    c00260e4 <cos+0x64>
c00261ab:	90                   	nop
c00261ac:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00261b0:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c00261b4:	ba 01 00 00 00       	mov    edx,0x1
c00261b9:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00261bd:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c00261c1:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c00261c5:	dd 1c 24             	fstp   QWORD PTR [esp]
c00261c8:	e8 43 1b 00 00       	call   c0027d10 <__kernel_sin>
c00261cd:	d9 e0                	fchs   
c00261cf:	e9 10 ff ff ff       	jmp    c00260e4 <cos+0x64>
c00261d4:	66 90                	xchg   ax,ax
c00261d6:	66 90                	xchg   ax,ax
c00261d8:	66 90                	xchg   ax,ax
c00261da:	66 90                	xchg   ax,ax
c00261dc:	66 90                	xchg   ax,ax
c00261de:	66 90                	xchg   ax,ax

c00261e0 <expm1>:
c00261e0:	d9 05 90 e8 02 c0    	fld    DWORD PTR ds:0xc002e890
c00261e6:	83 ec 24             	sub    esp,0x24
c00261e9:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c00261ed:	dd 14 24             	fst    QWORD PTR [esp]
c00261f0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00261f4:	89 d0                	mov    eax,edx
c00261f6:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00261fb:	3d 79 68 43 40       	cmp    eax,0x40436879
c0026200:	0f 86 ea 00 00 00    	jbe    c00262f0 <expm1+0x110>
c0026206:	dd d9                	fstp   st(1)
c0026208:	3d 41 2e 86 40       	cmp    eax,0x40862e41
c002620d:	76 51                	jbe    c0026260 <expm1+0x80>
c002620f:	3d ff ff ef 7f       	cmp    eax,0x7fefffff
c0026214:	76 2a                	jbe    c0026240 <expm1+0x60>
c0026216:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0026219:	89 d1                	mov    ecx,edx
c002621b:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c0026221:	09 c1                	or     ecx,eax
c0026223:	0f 84 b7 03 00 00    	je     c00265e0 <expm1+0x400>
c0026229:	d9 c0                	fld    st(0)
c002622b:	de c1                	faddp  st(1),st
c002622d:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0026231:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0026235:	e9 0a 02 00 00       	jmp    c0026444 <expm1+0x264>
c002623a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0026240:	dd d8                	fstp   st(0)
c0026242:	dd 05 a8 e8 02 c0    	fld    QWORD PTR ds:0xc002e8a8
c0026248:	dd 04 24             	fld    QWORD PTR [esp]
c002624b:	df f1                	fcomip st,st(1)
c002624d:	dd d8                	fstp   st(0)
c002624f:	0f 87 cb 03 00 00    	ja     c0026620 <expm1+0x440>
c0026255:	eb 0b                	jmp    c0026262 <expm1+0x82>
c0026257:	89 f6                	mov    esi,esi
c0026259:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0026260:	dd d8                	fstp   st(0)
c0026262:	85 d2                	test   edx,edx
c0026264:	dd 04 24             	fld    QWORD PTR [esp]
c0026267:	0f 88 e3 01 00 00    	js     c0026450 <expm1+0x270>
c002626d:	d9 c0                	fld    st(0)
c002626f:	dc 0d 30 e7 02 c0    	fmul   QWORD PTR ds:0xc002e730
c0026275:	d9 05 5c e6 02 c0    	fld    DWORD PTR ds:0xc002e65c
c002627b:	d9 7c 24 16          	fnstcw WORD PTR [esp+0x16]
c002627f:	de c1                	faddp  st(1),st
c0026281:	0f b7 44 24 16       	movzx  eax,WORD PTR [esp+0x16]
c0026286:	66 0d 00 0c          	or     ax,0xc00
c002628a:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c002628f:	d9 6c 24 14          	fldcw  WORD PTR [esp+0x14]
c0026293:	db 5c 24 10          	fistp  DWORD PTR [esp+0x10]
c0026297:	d9 6c 24 16          	fldcw  WORD PTR [esp+0x16]
c002629b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002629f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00262a2:	db 04 24             	fild   DWORD PTR [esp]
c00262a5:	d9 c0                	fld    st(0)
c00262a7:	dc 0d b8 e8 02 c0    	fmul   QWORD PTR ds:0xc002e8b8
c00262ad:	de ea                	fsubp  st(2),st
c00262af:	d9 c9                	fxch   st(1)
c00262b1:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c00262b5:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00262b9:	d9 c9                	fxch   st(1)
c00262bb:	dc 0d a0 e8 02 c0    	fmul   QWORD PTR ds:0xc002e8a0
c00262c1:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c00262c5:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00262c9:	d9 c1                	fld    st(1)
c00262cb:	d8 e1                	fsub   st,st(1)
c00262cd:	dd 1c 24             	fstp   QWORD PTR [esp]
c00262d0:	dd 04 24             	fld    QWORD PTR [esp]
c00262d3:	dc ea                	fsub   st(2),st
c00262d5:	d9 ca                	fxch   st(2)
c00262d7:	de e1                	fsubrp st(1),st
c00262d9:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c00262dd:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00262e1:	eb 2c                	jmp    c002630f <expm1+0x12f>
c00262e3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00262e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00262f0:	dd d8                	fstp   st(0)
c00262f2:	3d 42 2e d6 3f       	cmp    eax,0x3fd62e42
c00262f7:	dd 04 24             	fld    QWORD PTR [esp]
c00262fa:	0f 87 c0 01 00 00    	ja     c00264c0 <expm1+0x2e0>
c0026300:	31 c9                	xor    ecx,ecx
c0026302:	3d ff ff 8f 3c       	cmp    eax,0x3c8fffff
c0026307:	0f 86 f3 01 00 00    	jbe    c0026500 <expm1+0x320>
c002630d:	d9 c9                	fxch   st(1)
c002630f:	d9 05 5c e6 02 c0    	fld    DWORD PTR ds:0xc002e65c
c0026315:	85 c9                	test   ecx,ecx
c0026317:	d9 c2                	fld    st(2)
c0026319:	d8 c9                	fmul   st,st(1)
c002631b:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c002631f:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0026323:	d9 c0                	fld    st(0)
c0026325:	d8 cc                	fmul   st,st(4)
c0026327:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c002632b:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c002632f:	d9 c0                	fld    st(0)
c0026331:	dc 0d c0 e8 02 c0    	fmul   QWORD PTR ds:0xc002e8c0
c0026337:	dc 05 c8 e8 02 c0    	fadd   QWORD PTR ds:0xc002e8c8
c002633d:	d8 c9                	fmul   st,st(1)
c002633f:	dc 25 d0 e8 02 c0    	fsub   QWORD PTR ds:0xc002e8d0
c0026345:	d8 c9                	fmul   st,st(1)
c0026347:	dc 05 d8 e8 02 c0    	fadd   QWORD PTR ds:0xc002e8d8
c002634d:	d8 c9                	fmul   st,st(1)
c002634f:	dc 25 e0 e8 02 c0    	fsub   QWORD PTR ds:0xc002e8e0
c0026355:	d8 c9                	fmul   st,st(1)
c0026357:	d9 e8                	fld1   
c0026359:	dc c1                	fadd   st(1),st
c002635b:	d9 c9                	fxch   st(1)
c002635d:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0026361:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0026365:	dc cb                	fmul   st(3),st
c0026367:	d9 cb                	fxch   st(3)
c0026369:	d8 2d bc e6 02 c0    	fsubr  DWORD PTR ds:0xc002e6bc
c002636f:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0026373:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0026377:	dc eb                	fsub   st(3),st
c0026379:	d8 ce                	fmul   st,st(6)
c002637b:	d8 2d 84 e8 02 c0    	fsubr  DWORD PTR ds:0xc002e884
c0026381:	de fb                	fdivp  st(3),st
c0026383:	d9 ca                	fxch   st(2)
c0026385:	d8 c9                	fmul   st,st(1)
c0026387:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c002638b:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c002638f:	0f 84 9b 00 00 00    	je     c0026430 <expm1+0x250>
c0026395:	89 c8                	mov    eax,ecx
c0026397:	c1 e0 14             	shl    eax,0x14
c002639a:	05 00 00 f0 3f       	add    eax,0x3ff00000
c002639f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00263a3:	31 c0                	xor    eax,eax
c00263a5:	83 f9 ff             	cmp    ecx,0xffffffff
c00263a8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00263ac:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c00263b0:	d9 c9                	fxch   st(1)
c00263b2:	d8 e5                	fsub   st,st(5)
c00263b4:	d8 ce                	fmul   st,st(6)
c00263b6:	de e5                	fsubrp st(5),st
c00263b8:	d9 cc                	fxch   st(4)
c00263ba:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c00263be:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00263c2:	de e1                	fsubrp st(1),st
c00263c4:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c00263c8:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00263cc:	0f 84 9e 01 00 00    	je     c0026570 <expm1+0x390>
c00263d2:	83 f9 01             	cmp    ecx,0x1
c00263d5:	0f 84 55 01 00 00    	je     c0026530 <expm1+0x350>
c00263db:	dd da                	fstp   st(2)
c00263dd:	d9 c9                	fxch   st(1)
c00263df:	8d 41 01             	lea    eax,[ecx+0x1]
c00263e2:	83 f8 39             	cmp    eax,0x39
c00263e5:	0f 87 95 00 00 00    	ja     c0026480 <expm1+0x2a0>
c00263eb:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00263f2:	83 f9 13             	cmp    ecx,0x13
c00263f5:	0f 8f b5 01 00 00    	jg     c00265b0 <expm1+0x3d0>
c00263fb:	dd d9                	fstp   st(1)
c00263fd:	b8 00 00 20 00       	mov    eax,0x200000
c0026402:	ba 00 00 f0 3f       	mov    edx,0x3ff00000
c0026407:	d3 f8                	sar    eax,cl
c0026409:	29 c2                	sub    edx,eax
c002640b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c002640f:	dd 04 24             	fld    QWORD PTR [esp]
c0026412:	d9 cb                	fxch   st(3)
c0026414:	de e9                	fsubp  st(1),st
c0026416:	de ea                	fsubp  st(2),st
c0026418:	d9 c9                	fxch   st(1)
c002641a:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c002641e:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0026422:	de c9                	fmulp  st(1),st
c0026424:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0026428:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c002642c:	83 c4 24             	add    esp,0x24
c002642f:	c3                   	ret    
c0026430:	dd db                	fstp   st(3)
c0026432:	dd db                	fstp   st(3)
c0026434:	dd d8                	fstp   st(0)
c0026436:	d8 ca                	fmul   st,st(2)
c0026438:	de e1                	fsubrp st(1),st
c002643a:	de e9                	fsubp  st(1),st
c002643c:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0026440:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0026444:	83 c4 24             	add    esp,0x24
c0026447:	c3                   	ret    
c0026448:	90                   	nop
c0026449:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0026450:	d9 ee                	fldz   
c0026452:	d9 c1                	fld    st(1)
c0026454:	dc 05 b0 e8 02 c0    	fadd   QWORD PTR ds:0xc002e8b0
c002645a:	d9 c9                	fxch   st(1)
c002645c:	df f1                	fcomip st,st(1)
c002645e:	dd d8                	fstp   st(0)
c0026460:	0f 87 8a 01 00 00    	ja     c00265f0 <expm1+0x410>
c0026466:	d9 c0                	fld    st(0)
c0026468:	dc 0d 30 e7 02 c0    	fmul   QWORD PTR ds:0xc002e730
c002646e:	d9 05 b8 e7 02 c0    	fld    DWORD PTR ds:0xc002e7b8
c0026474:	e9 02 fe ff ff       	jmp    c002627b <expm1+0x9b>
c0026479:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0026480:	de e3                	fsubrp st(3),st
c0026482:	81 f9 00 04 00 00    	cmp    ecx,0x400
c0026488:	de e2                	fsubrp st(2),st
c002648a:	d9 c9                	fxch   st(1)
c002648c:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0026490:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0026494:	0f 84 96 01 00 00    	je     c0026630 <expm1+0x450>
c002649a:	de c9                	fmulp  st(1),st
c002649c:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c00264a0:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00264a4:	d9 e8                	fld1   
c00264a6:	de e9                	fsubp  st(1),st
c00264a8:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c00264ac:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00264b0:	eb 92                	jmp    c0026444 <expm1+0x264>
c00264b2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00264b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00264c0:	dd d9                	fstp   st(1)
c00264c2:	3d b1 a2 f0 3f       	cmp    eax,0x3ff0a2b1
c00264c7:	0f 87 7a 01 00 00    	ja     c0026647 <expm1+0x467>
c00264cd:	85 d2                	test   edx,edx
c00264cf:	0f 88 bb 00 00 00    	js     c0026590 <expm1+0x3b0>
c00264d5:	dc 25 b8 e8 02 c0    	fsub   QWORD PTR ds:0xc002e8b8
c00264db:	b9 01 00 00 00       	mov    ecx,0x1
c00264e0:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c00264e4:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00264e8:	dd 05 a0 e8 02 c0    	fld    QWORD PTR ds:0xc002e8a0
c00264ee:	e9 d6 fd ff ff       	jmp    c00262c9 <expm1+0xe9>
c00264f3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00264f9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0026500:	dd d9                	fstp   st(1)
c0026502:	d9 c0                	fld    st(0)
c0026504:	dc 05 68 e6 02 c0    	fadd   QWORD PTR ds:0xc002e668
c002650a:	dd 54 24 18          	fst    QWORD PTR [esp+0x18]
c002650e:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0026512:	de e1                	fsubrp st(1),st
c0026514:	de e9                	fsubp  st(1),st
c0026516:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c002651a:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c002651e:	83 c4 24             	add    esp,0x24
c0026521:	c3                   	ret    
c0026522:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0026529:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0026530:	dd db                	fstp   st(3)
c0026532:	d9 c9                	fxch   st(1)
c0026534:	d9 ca                	fxch   st(2)
c0026536:	dd 04 24             	fld    QWORD PTR [esp]
c0026539:	d9 05 88 e8 02 c0    	fld    DWORD PTR ds:0xc002e888
c002653f:	df f1                	fcomip st,st(1)
c0026541:	dd d8                	fstp   st(0)
c0026543:	0f 86 b7 00 00 00    	jbe    c0026600 <expm1+0x420>
c0026549:	dd d9                	fstp   st(1)
c002654b:	d9 ca                	fxch   st(2)
c002654d:	de c1                	faddp  st(1),st
c002654f:	de e9                	fsubp  st(1),st
c0026551:	d8 0d 8c e8 02 c0    	fmul   DWORD PTR ds:0xc002e88c
c0026557:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c002655b:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c002655f:	e9 e0 fe ff ff       	jmp    c0026444 <expm1+0x264>
c0026564:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c002656a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0026570:	dd db                	fstp   st(3)
c0026572:	dd d8                	fstp   st(0)
c0026574:	d9 c9                	fxch   st(1)
c0026576:	de ea                	fsubp  st(2),st
c0026578:	dc c9                	fmul   st(1),st
c002657a:	de e9                	fsubp  st(1),st
c002657c:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0026580:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0026584:	e9 bb fe ff ff       	jmp    c0026444 <expm1+0x264>
c0026589:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0026590:	dc 05 b8 e8 02 c0    	fadd   QWORD PTR ds:0xc002e8b8
c0026596:	b9 ff ff ff ff       	mov    ecx,0xffffffff
c002659b:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c002659f:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00265a3:	dd 05 98 e8 02 c0    	fld    QWORD PTR ds:0xc002e898
c00265a9:	e9 1b fd ff ff       	jmp    c00262c9 <expm1+0xe9>
c00265ae:	66 90                	xchg   ax,ax
c00265b0:	b8 ff 03 00 00       	mov    eax,0x3ff
c00265b5:	29 c8                	sub    eax,ecx
c00265b7:	c1 e0 14             	shl    eax,0x14
c00265ba:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00265be:	dd 04 24             	fld    QWORD PTR [esp]
c00265c1:	de c1                	faddp  st(1),st
c00265c3:	de eb                	fsubp  st(3),st
c00265c5:	d9 ca                	fxch   st(2)
c00265c7:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c00265cb:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00265cf:	de c2                	faddp  st(2),st
c00265d1:	d9 c9                	fxch   st(1)
c00265d3:	e9 42 fe ff ff       	jmp    c002641a <expm1+0x23a>
c00265d8:	90                   	nop
c00265d9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00265e0:	dd d8                	fstp   st(0)
c00265e2:	85 d2                	test   edx,edx
c00265e4:	78 0c                	js     c00265f2 <expm1+0x412>
c00265e6:	dd 04 24             	fld    QWORD PTR [esp]
c00265e9:	e9 56 fe ff ff       	jmp    c0026444 <expm1+0x264>
c00265ee:	66 90                	xchg   ax,ax
c00265f0:	dd d8                	fstp   st(0)
c00265f2:	d9 e8                	fld1   
c00265f4:	d9 e0                	fchs   
c00265f6:	e9 49 fe ff ff       	jmp    c0026444 <expm1+0x264>
c00265fb:	90                   	nop
c00265fc:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0026600:	dd da                	fstp   st(2)
c0026602:	d9 c9                	fxch   st(1)
c0026604:	de ea                	fsubp  st(2),st
c0026606:	d9 c9                	fxch   st(1)
c0026608:	d8 c0                	fadd   st,st(0)
c002660a:	de c1                	faddp  st(1),st
c002660c:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0026610:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0026614:	e9 2b fe ff ff       	jmp    c0026444 <expm1+0x264>
c0026619:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0026620:	d9 05 a0 e6 02 c0    	fld    DWORD PTR ds:0xc002e6a0
c0026626:	e9 19 fe ff ff       	jmp    c0026444 <expm1+0x264>
c002662b:	90                   	nop
c002662c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0026630:	dd d9                	fstp   st(1)
c0026632:	d8 c0                	fadd   st,st(0)
c0026634:	dc 0d e8 e8 02 c0    	fmul   QWORD PTR ds:0xc002e8e8
c002663a:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c002663e:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0026642:	e9 5d fe ff ff       	jmp    c00264a4 <expm1+0x2c4>
c0026647:	d9 c0                	fld    st(0)
c0026649:	85 d2                	test   edx,edx
c002664b:	dc 0d 30 e7 02 c0    	fmul   QWORD PTR ds:0xc002e730
c0026651:	0f 88 17 fe ff ff    	js     c002646e <expm1+0x28e>
c0026657:	d9 05 5c e6 02 c0    	fld    DWORD PTR ds:0xc002e65c
c002665d:	e9 19 fc ff ff       	jmp    c002627b <expm1+0x9b>
c0026662:	66 90                	xchg   ax,ax
c0026664:	66 90                	xchg   ax,ax
c0026666:	66 90                	xchg   ax,ax
c0026668:	66 90                	xchg   ax,ax
c002666a:	66 90                	xchg   ax,ax
c002666c:	66 90                	xchg   ax,ax
c002666e:	66 90                	xchg   ax,ax

c0026670 <fabs>:
c0026670:	83 ec 0c             	sub    esp,0xc
c0026673:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026677:	89 04 24             	mov    DWORD PTR [esp],eax
c002667a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002667e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026683:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0026687:	dd 04 24             	fld    QWORD PTR [esp]
c002668a:	83 c4 0c             	add    esp,0xc
c002668d:	c3                   	ret    
c002668e:	66 90                	xchg   ax,ax

c0026690 <frexp>:
c0026690:	53                   	push   ebx
c0026691:	83 ec 10             	sub    esp,0x10
c0026694:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0026698:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c002669c:	dd 14 24             	fst    QWORD PTR [esp]
c002669f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00266a3:	c7 01 00 00 00 00    	mov    DWORD PTR [ecx],0x0
c00266a9:	89 d0                	mov    eax,edx
c00266ab:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00266b0:	3d ff ff ef 7f       	cmp    eax,0x7fefffff
c00266b5:	7f 59                	jg     c0026710 <frexp+0x80>
c00266b7:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c00266ba:	09 c3                	or     ebx,eax
c00266bc:	74 62                	je     c0026720 <frexp+0x90>
c00266be:	31 db                	xor    ebx,ebx
c00266c0:	f7 c2 00 00 f0 7f    	test   edx,0x7ff00000
c00266c6:	75 28                	jne    c00266f0 <frexp+0x60>
c00266c8:	d9 05 f0 e8 02 c0    	fld    DWORD PTR ds:0xc002e8f0
c00266ce:	bb ca ff ff ff       	mov    ebx,0xffffffca
c00266d3:	de c9                	fmulp  st(1),st
c00266d5:	dd 1c 24             	fstp   QWORD PTR [esp]
c00266d8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00266dc:	89 d0                	mov    eax,edx
c00266de:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00266e3:	eb 0d                	jmp    c00266f2 <frexp+0x62>
c00266e5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00266e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00266f0:	dd d8                	fstp   st(0)
c00266f2:	c1 f8 14             	sar    eax,0x14
c00266f5:	81 e2 ff ff 0f 80    	and    edx,0x800fffff
c00266fb:	8d 84 03 02 fc ff ff 	lea    eax,[ebx+eax*1-0x3fe]
c0026702:	81 ca 00 00 e0 3f    	or     edx,0x3fe00000
c0026708:	89 01                	mov    DWORD PTR [ecx],eax
c002670a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c002670e:	eb 12                	jmp    c0026722 <frexp+0x92>
c0026710:	dd d8                	fstp   st(0)
c0026712:	eb 0e                	jmp    c0026722 <frexp+0x92>
c0026714:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c002671a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0026720:	dd d8                	fstp   st(0)
c0026722:	dd 04 24             	fld    QWORD PTR [esp]
c0026725:	83 c4 10             	add    esp,0x10
c0026728:	5b                   	pop    ebx
c0026729:	c3                   	ret    
c002672a:	66 90                	xchg   ax,ax
c002672c:	66 90                	xchg   ax,ax
c002672e:	66 90                	xchg   ax,ax

c0026730 <modf>:
c0026730:	53                   	push   ebx
c0026731:	83 ec 18             	sub    esp,0x18
c0026734:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c0026738:	dd 14 24             	fst    QWORD PTR [esp]
c002673b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002673f:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0026742:	89 d0                	mov    eax,edx
c0026744:	c1 f8 14             	sar    eax,0x14
c0026747:	25 ff 07 00 00       	and    eax,0x7ff
c002674c:	8d 88 01 fc ff ff    	lea    ecx,[eax-0x3ff]
c0026752:	83 f9 13             	cmp    ecx,0x13
c0026755:	7f 49                	jg     c00267a0 <modf+0x70>
c0026757:	85 c9                	test   ecx,ecx
c0026759:	0f 88 f1 00 00 00    	js     c0026850 <modf+0x120>
c002675f:	dd d8                	fstp   st(0)
c0026761:	b8 ff ff 0f 00       	mov    eax,0xfffff
c0026766:	d3 f8                	sar    eax,cl
c0026768:	89 d1                	mov    ecx,edx
c002676a:	21 c1                	and    ecx,eax
c002676c:	09 d9                	or     ecx,ebx
c002676e:	0f 84 ac 00 00 00    	je     c0026820 <modf+0xf0>
c0026774:	f7 d0                	not    eax
c0026776:	21 d0                	and    eax,edx
c0026778:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002677c:	31 c0                	xor    eax,eax
c002677e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026782:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0026786:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c002678a:	dd 10                	fst    QWORD PTR [eax]
c002678c:	dd 04 24             	fld    QWORD PTR [esp]
c002678f:	de e1                	fsubrp st(1),st
c0026791:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0026795:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0026799:	83 c4 18             	add    esp,0x18
c002679c:	5b                   	pop    ebx
c002679d:	c3                   	ret    
c002679e:	66 90                	xchg   ax,ax
c00267a0:	dd d8                	fstp   st(0)
c00267a2:	83 f9 33             	cmp    ecx,0x33
c00267a5:	7e 39                	jle    c00267e0 <modf+0xb0>
c00267a7:	81 f9 00 04 00 00    	cmp    ecx,0x400
c00267ad:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00267b1:	0f 84 e9 00 00 00    	je     c00268a0 <modf+0x170>
c00267b7:	dd 04 24             	fld    QWORD PTR [esp]
c00267ba:	81 e2 00 00 00 80    	and    edx,0x80000000
c00267c0:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00267c7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00267cb:	dd 18                	fstp   QWORD PTR [eax]
c00267cd:	dd 04 24             	fld    QWORD PTR [esp]
c00267d0:	83 c4 18             	add    esp,0x18
c00267d3:	5b                   	pop    ebx
c00267d4:	c3                   	ret    
c00267d5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00267d9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00267e0:	8d 88 ed fb ff ff    	lea    ecx,[eax-0x413]
c00267e6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00267eb:	d3 e8                	shr    eax,cl
c00267ed:	85 d8                	test   eax,ebx
c00267ef:	75 7f                	jne    c0026870 <modf+0x140>
c00267f1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00267f5:	81 e2 00 00 00 80    	and    edx,0x80000000
c00267fb:	dd 04 24             	fld    QWORD PTR [esp]
c00267fe:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0026805:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0026809:	dd 18                	fstp   QWORD PTR [eax]
c002680b:	dd 04 24             	fld    QWORD PTR [esp]
c002680e:	83 c4 18             	add    esp,0x18
c0026811:	5b                   	pop    ebx
c0026812:	c3                   	ret    
c0026813:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0026819:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0026820:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0026824:	81 e2 00 00 00 80    	and    edx,0x80000000
c002682a:	dd 04 24             	fld    QWORD PTR [esp]
c002682d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0026834:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0026838:	dd 18                	fstp   QWORD PTR [eax]
c002683a:	dd 04 24             	fld    QWORD PTR [esp]
c002683d:	83 c4 18             	add    esp,0x18
c0026840:	5b                   	pop    ebx
c0026841:	c3                   	ret    
c0026842:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0026849:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0026850:	81 e2 00 00 00 80    	and    edx,0x80000000
c0026856:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c002685a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002685e:	31 d2                	xor    edx,edx
c0026860:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0026864:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0026868:	dd 18                	fstp   QWORD PTR [eax]
c002686a:	83 c4 18             	add    esp,0x18
c002686d:	5b                   	pop    ebx
c002686e:	c3                   	ret    
c002686f:	90                   	nop
c0026870:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0026874:	f7 d0                	not    eax
c0026876:	21 d8                	and    eax,ebx
c0026878:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002687c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0026880:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0026884:	dd 10                	fst    QWORD PTR [eax]
c0026886:	dd 04 24             	fld    QWORD PTR [esp]
c0026889:	de e1                	fsubrp st(1),st
c002688b:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c002688f:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0026893:	83 c4 18             	add    esp,0x18
c0026896:	5b                   	pop    ebx
c0026897:	c3                   	ret    
c0026898:	90                   	nop
c0026899:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00268a0:	dd 04 24             	fld    QWORD PTR [esp]
c00268a3:	dd 10                	fst    QWORD PTR [eax]
c00268a5:	d9 ee                	fldz   
c00268a7:	de f1                	fdivrp st(1),st
c00268a9:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c00268ad:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c00268b1:	e9 e3 fe ff ff       	jmp    c0026799 <modf+0x69>
c00268b6:	66 90                	xchg   ax,ax
c00268b8:	66 90                	xchg   ax,ax
c00268ba:	66 90                	xchg   ax,ax
c00268bc:	66 90                	xchg   ax,ax
c00268be:	66 90                	xchg   ax,ax

c00268c0 <round>:
c00268c0:	83 ec 2c             	sub    esp,0x2c
c00268c3:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c00268c7:	dd 54 24 10          	fst    QWORD PTR [esp+0x10]
c00268cb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00268cf:	89 c2                	mov    edx,eax
c00268d1:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c00268d7:	81 fa 00 00 f0 7f    	cmp    edx,0x7ff00000
c00268dd:	0f 84 9d 00 00 00    	je     c0026980 <round+0xc0>
c00268e3:	dd d8                	fstp   st(0)
c00268e5:	85 c0                	test   eax,eax
c00268e7:	78 47                	js     c0026930 <round+0x70>
c00268e9:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c00268ed:	dd 1c 24             	fstp   QWORD PTR [esp]
c00268f0:	e8 ff 03 00 00       	call   c0026cf4 <floor>
c00268f5:	d9 c0                	fld    st(0)
c00268f7:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c00268fb:	d8 e9                	fsubr  st,st(1)
c00268fd:	d9 05 b8 e7 02 c0    	fld    DWORD PTR ds:0xc002e7b8
c0026903:	df f1                	fcomip st,st(1)
c0026905:	dd d8                	fstp   st(0)
c0026907:	72 17                	jb     c0026920 <round+0x60>
c0026909:	dd d9                	fstp   st(1)
c002690b:	d8 05 58 e6 02 c0    	fadd   DWORD PTR ds:0xc002e658
c0026911:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0026915:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0026919:	eb 07                	jmp    c0026922 <round+0x62>
c002691b:	90                   	nop
c002691c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0026920:	dd d8                	fstp   st(0)
c0026922:	83 c4 2c             	add    esp,0x2c
c0026925:	c3                   	ret    
c0026926:	8d 76 00             	lea    esi,[esi+0x0]
c0026929:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0026930:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0026934:	d9 e0                	fchs   
c0026936:	dd 1c 24             	fstp   QWORD PTR [esp]
c0026939:	e8 b6 03 00 00       	call   c0026cf4 <floor>
c002693e:	d9 c0                	fld    st(0)
c0026940:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0026944:	d8 c1                	fadd   st,st(1)
c0026946:	d9 05 b8 e7 02 c0    	fld    DWORD PTR ds:0xc002e7b8
c002694c:	df f1                	fcomip st,st(1)
c002694e:	dd d8                	fstp   st(0)
c0026950:	72 1e                	jb     c0026970 <round+0xb0>
c0026952:	dd d9                	fstp   st(1)
c0026954:	d8 05 58 e6 02 c0    	fadd   DWORD PTR ds:0xc002e658
c002695a:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c002695e:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0026962:	eb 0e                	jmp    c0026972 <round+0xb2>
c0026964:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c002696a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0026970:	dd d8                	fstp   st(0)
c0026972:	d9 e0                	fchs   
c0026974:	83 c4 2c             	add    esp,0x2c
c0026977:	c3                   	ret    
c0026978:	90                   	nop
c0026979:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0026980:	d9 c0                	fld    st(0)
c0026982:	de c1                	faddp  st(1),st
c0026984:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0026988:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c002698c:	83 c4 2c             	add    esp,0x2c
c002698f:	c3                   	ret    

c0026990 <sin>:
c0026990:	83 ec 5c             	sub    esp,0x5c
c0026993:	dd 44 24 60          	fld    QWORD PTR [esp+0x60]
c0026997:	dd 54 24 28          	fst    QWORD PTR [esp+0x28]
c002699b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c002699f:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00269a4:	3d fb 21 e9 3f       	cmp    eax,0x3fe921fb
c00269a9:	7f 65                	jg     c0026a10 <sin+0x80>
c00269ab:	3d ff ff 4f 3e       	cmp    eax,0x3e4fffff
c00269b0:	7f 2e                	jg     c00269e0 <sin+0x50>
c00269b2:	d9 7c 24 36          	fnstcw WORD PTR [esp+0x36]
c00269b6:	0f b7 44 24 36       	movzx  eax,WORD PTR [esp+0x36]
c00269bb:	66 0d 00 0c          	or     ax,0xc00
c00269bf:	66 89 44 24 34       	mov    WORD PTR [esp+0x34],ax
c00269c4:	d9 6c 24 34          	fldcw  WORD PTR [esp+0x34]
c00269c8:	db 54 24 30          	fist   DWORD PTR [esp+0x30]
c00269cc:	d9 6c 24 36          	fldcw  WORD PTR [esp+0x36]
c00269d0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00269d4:	85 c0                	test   eax,eax
c00269d6:	75 18                	jne    c00269f0 <sin+0x60>
c00269d8:	83 c4 5c             	add    esp,0x5c
c00269db:	c3                   	ret    
c00269dc:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00269e0:	dd d8                	fstp   st(0)
c00269e2:	eb 0e                	jmp    c00269f2 <sin+0x62>
c00269e4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00269ea:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00269f0:	dd d8                	fstp   st(0)
c00269f2:	d9 ee                	fldz   
c00269f4:	31 c9                	xor    ecx,ecx
c00269f6:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00269fa:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c00269fe:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0026a02:	dd 1c 24             	fstp   QWORD PTR [esp]
c0026a05:	e8 06 13 00 00       	call   c0027d10 <__kernel_sin>
c0026a0a:	83 c4 5c             	add    esp,0x5c
c0026a0d:	c3                   	ret    
c0026a0e:	66 90                	xchg   ax,ax
c0026a10:	dd d8                	fstp   st(0)
c0026a12:	3d ff ff ef 7f       	cmp    eax,0x7fefffff
c0026a17:	7e 17                	jle    c0026a30 <sin+0xa0>
c0026a19:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0026a1d:	d8 e0                	fsub   st,st(0)
c0026a1f:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0026a23:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0026a27:	83 c4 5c             	add    esp,0x5c
c0026a2a:	c3                   	ret    
c0026a2b:	90                   	nop
c0026a2c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0026a30:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0026a34:	8d 44 24 40          	lea    eax,[esp+0x40]
c0026a38:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026a3c:	dd 1c 24             	fstp   QWORD PTR [esp]
c0026a3f:	e8 1c 03 00 00       	call   c0026d60 <__ieee754_rem_pio2>
c0026a44:	83 e0 03             	and    eax,0x3
c0026a47:	83 f8 01             	cmp    eax,0x1
c0026a4a:	0f 84 90 00 00 00    	je     c0026ae0 <sin+0x150>
c0026a50:	83 f8 02             	cmp    eax,0x2
c0026a53:	74 2b                	je     c0026a80 <sin+0xf0>
c0026a55:	85 c0                	test   eax,eax
c0026a57:	74 57                	je     c0026ab0 <sin+0x120>
c0026a59:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0026a5d:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0026a61:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c0026a65:	dd 1c 24             	fstp   QWORD PTR [esp]
c0026a68:	e8 23 08 00 00       	call   c0027290 <__kernel_cos>
c0026a6d:	d9 e0                	fchs   
c0026a6f:	e9 64 ff ff ff       	jmp    c00269d8 <sin+0x48>
c0026a74:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0026a7a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0026a80:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0026a84:	b8 01 00 00 00       	mov    eax,0x1
c0026a89:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0026a8d:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0026a91:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c0026a95:	dd 1c 24             	fstp   QWORD PTR [esp]
c0026a98:	e8 73 12 00 00       	call   c0027d10 <__kernel_sin>
c0026a9d:	d9 e0                	fchs   
c0026a9f:	e9 34 ff ff ff       	jmp    c00269d8 <sin+0x48>
c0026aa4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0026aaa:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0026ab0:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0026ab4:	ba 01 00 00 00       	mov    edx,0x1
c0026ab9:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0026abd:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0026ac1:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c0026ac5:	dd 1c 24             	fstp   QWORD PTR [esp]
c0026ac8:	e8 43 12 00 00       	call   c0027d10 <__kernel_sin>
c0026acd:	e9 06 ff ff ff       	jmp    c00269d8 <sin+0x48>
c0026ad2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0026ad9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0026ae0:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0026ae4:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0026ae8:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c0026aec:	dd 1c 24             	fstp   QWORD PTR [esp]
c0026aef:	e8 9c 07 00 00       	call   c0027290 <__kernel_cos>
c0026af4:	e9 df fe ff ff       	jmp    c00269d8 <sin+0x48>
c0026af9:	66 90                	xchg   ax,ax
c0026afb:	66 90                	xchg   ax,ax
c0026afd:	66 90                	xchg   ax,ax
c0026aff:	90                   	nop

c0026b00 <tanh>:
c0026b00:	53                   	push   ebx
c0026b01:	83 ec 28             	sub    esp,0x28
c0026b04:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c0026b08:	dd 54 24 10          	fst    QWORD PTR [esp+0x10]
c0026b0c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0026b10:	89 d8                	mov    eax,ebx
c0026b12:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026b17:	3d ff ff ef 7f       	cmp    eax,0x7fefffff
c0026b1c:	7e 32                	jle    c0026b50 <tanh+0x50>
c0026b1e:	d9 e8                	fld1   
c0026b20:	85 db                	test   ebx,ebx
c0026b22:	dc f1                	fdivr  st(1),st
c0026b24:	78 1a                	js     c0026b40 <tanh+0x40>
c0026b26:	de c1                	faddp  st(1),st
c0026b28:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0026b2c:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0026b30:	83 c4 28             	add    esp,0x28
c0026b33:	5b                   	pop    ebx
c0026b34:	c3                   	ret    
c0026b35:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0026b39:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0026b40:	de e9                	fsubp  st(1),st
c0026b42:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0026b46:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0026b4a:	83 c4 28             	add    esp,0x28
c0026b4d:	5b                   	pop    ebx
c0026b4e:	c3                   	ret    
c0026b4f:	90                   	nop
c0026b50:	dd d8                	fstp   st(0)
c0026b52:	3d ff ff 35 40       	cmp    eax,0x4035ffff
c0026b57:	7f 57                	jg     c0026bb0 <tanh+0xb0>
c0026b59:	3d ff ff 2f 3e       	cmp    eax,0x3e2fffff
c0026b5e:	7f 70                	jg     c0026bd0 <tanh+0xd0>
c0026b60:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0026b64:	d9 e8                	fld1   
c0026b66:	d9 c1                	fld    st(1)
c0026b68:	dc 05 68 e6 02 c0    	fadd   QWORD PTR ds:0xc002e668
c0026b6e:	df f1                	fcomip st,st(1)
c0026b70:	dd d8                	fstp   st(0)
c0026b72:	77 bc                	ja     c0026b30 <tanh+0x30>
c0026b74:	dd d8                	fstp   st(0)
c0026b76:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0026b7a:	dd 1c 24             	fstp   QWORD PTR [esp]
c0026b7d:	e8 ee fa ff ff       	call   c0026670 <fabs>
c0026b82:	d9 05 8c e8 02 c0    	fld    DWORD PTR ds:0xc002e88c
c0026b88:	de c9                	fmulp  st(1),st
c0026b8a:	dd 1c 24             	fstp   QWORD PTR [esp]
c0026b8d:	e8 4e f6 ff ff       	call   c00261e0 <expm1>
c0026b92:	d9 c0                	fld    st(0)
c0026b94:	d9 e0                	fchs   
c0026b96:	d9 05 c8 e6 02 c0    	fld    DWORD PTR ds:0xc002e6c8
c0026b9c:	de c2                	faddp  st(2),st
c0026b9e:	de f1                	fdivrp st(1),st
c0026ba0:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0026ba4:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0026ba8:	eb 08                	jmp    c0026bb2 <tanh+0xb2>
c0026baa:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0026bb0:	d9 e8                	fld1   
c0026bb2:	85 db                	test   ebx,ebx
c0026bb4:	0f 89 76 ff ff ff    	jns    c0026b30 <tanh+0x30>
c0026bba:	d9 e0                	fchs   
c0026bbc:	83 c4 28             	add    esp,0x28
c0026bbf:	5b                   	pop    ebx
c0026bc0:	c3                   	ret    
c0026bc1:	eb 0d                	jmp    c0026bd0 <tanh+0xd0>
c0026bc3:	90                   	nop
c0026bc4:	90                   	nop
c0026bc5:	90                   	nop
c0026bc6:	90                   	nop
c0026bc7:	90                   	nop
c0026bc8:	90                   	nop
c0026bc9:	90                   	nop
c0026bca:	90                   	nop
c0026bcb:	90                   	nop
c0026bcc:	90                   	nop
c0026bcd:	90                   	nop
c0026bce:	90                   	nop
c0026bcf:	90                   	nop
c0026bd0:	3d ff ff ef 3f       	cmp    eax,0x3fefffff
c0026bd5:	7e 9f                	jle    c0026b76 <tanh+0x76>
c0026bd7:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0026bdb:	dd 1c 24             	fstp   QWORD PTR [esp]
c0026bde:	e8 8d fa ff ff       	call   c0026670 <fabs>
c0026be3:	d8 c0                	fadd   st,st(0)
c0026be5:	dd 1c 24             	fstp   QWORD PTR [esp]
c0026be8:	e8 f3 f5 ff ff       	call   c00261e0 <expm1>
c0026bed:	d9 05 c8 e6 02 c0    	fld    DWORD PTR ds:0xc002e6c8
c0026bf3:	dc c1                	fadd   st(1),st
c0026bf5:	de f1                	fdivrp st(1),st
c0026bf7:	d8 2d 58 e6 02 c0    	fsubr  DWORD PTR ds:0xc002e658
c0026bfd:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0026c01:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0026c05:	eb ab                	jmp    c0026bb2 <tanh+0xb2>
c0026c07:	66 90                	xchg   ax,ax
c0026c09:	66 90                	xchg   ax,ax
c0026c0b:	66 90                	xchg   ax,ax
c0026c0d:	66 90                	xchg   ax,ax
c0026c0f:	90                   	nop

c0026c10 <cimag>:
c0026c10:	dd 44 24 0c          	fld    QWORD PTR [esp+0xc]
c0026c14:	c3                   	ret    
c0026c15:	66 90                	xchg   ax,ax
c0026c17:	66 90                	xchg   ax,ax
c0026c19:	66 90                	xchg   ax,ax
c0026c1b:	66 90                	xchg   ax,ax
c0026c1d:	66 90                	xchg   ax,ax
c0026c1f:	90                   	nop

c0026c20 <creal>:
c0026c20:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0026c24:	c3                   	ret    
c0026c25:	66 90                	xchg   ax,ax
c0026c27:	90                   	nop

c0026c28 <exp>:
c0026c28:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0026c2c:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026c31:	3d 00 00 f0 7f       	cmp    eax,0x7ff00000
c0026c36:	73 42                	jae    c0026c7a <x_Inf_or_NaN>
c0026c38:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0026c3c:	9b d9 7c 24 04       	fstcw  WORD PTR [esp+0x4]
c0026c41:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0026c45:	25 00 03 00 00       	and    eax,0x300
c0026c4a:	3d 00 03 00 00       	cmp    eax,0x300
c0026c4f:	74 0c                	je     c0026c5d <exp+0x35>
c0026c51:	c7 44 24 08 7f 13 00 00 	mov    DWORD PTR [esp+0x8],0x137f
c0026c59:	d9 6c 24 08          	fldcw  WORD PTR [esp+0x8]
c0026c5d:	d9 ea                	fldl2e 
c0026c5f:	de c9                	fmulp  st(1),st
c0026c61:	dd d1                	fst    st(1)
c0026c63:	d9 fc                	frndint 
c0026c65:	dd d2                	fst    st(2)
c0026c67:	de e9                	fsubp  st(1),st
c0026c69:	d9 f0                	f2xm1  
c0026c6b:	d9 e8                	fld1   
c0026c6d:	de c1                	faddp  st(1),st
c0026c6f:	d9 fd                	fscale 
c0026c71:	dd d9                	fstp   st(1)
c0026c73:	74 04                	je     c0026c79 <exp+0x51>
c0026c75:	d9 6c 24 04          	fldcw  WORD PTR [esp+0x4]
c0026c79:	c3                   	ret    

c0026c7a <x_Inf_or_NaN>:
c0026c7a:	81 7c 24 08 00 00 f0 ff 	cmp    DWORD PTR [esp+0x8],0xfff00000
c0026c82:	75 0a                	jne    c0026c8e <x_not_minus_Inf>
c0026c84:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0026c89:	75 03                	jne    c0026c8e <x_not_minus_Inf>
c0026c8b:	d9 ee                	fldz   
c0026c8d:	c3                   	ret    

c0026c8e <x_not_minus_Inf>:
c0026c8e:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0026c92:	c3                   	ret    
c0026c93:	90                   	nop

c0026c94 <fmod>:
c0026c94:	dd 44 24 0c          	fld    QWORD PTR [esp+0xc]
c0026c98:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0026c9c:	d9 f8                	fprem  
c0026c9e:	9b df e0             	fstsw  ax
c0026ca1:	9e                   	sahf   
c0026ca2:	7a f8                	jp     c0026c9c <fmod+0x8>
c0026ca4:	dd d9                	fstp   st(1)
c0026ca6:	c3                   	ret    
c0026ca7:	90                   	nop

c0026ca8 <log>:
c0026ca8:	d9 ed                	fldln2 
c0026caa:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0026cae:	d9 f1                	fyl2x  
c0026cb0:	c3                   	ret    
c0026cb1:	66 90                	xchg   ax,ax
c0026cb3:	90                   	nop

c0026cb4 <log10>:
c0026cb4:	d9 ec                	fldlg2 
c0026cb6:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0026cba:	d9 f1                	fyl2x  
c0026cbc:	c3                   	ret    
c0026cbd:	66 90                	xchg   ax,ax
c0026cbf:	90                   	nop

c0026cc0 <sqrt>:
c0026cc0:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0026cc4:	d9 fa                	fsqrt  
c0026cc6:	c3                   	ret    
c0026cc7:	90                   	nop

c0026cc8 <ceil>:
c0026cc8:	55                   	push   ebp
c0026cc9:	89 e5                	mov    ebp,esp
c0026ccb:	83 ec 08             	sub    esp,0x8
c0026cce:	9b d9 7d fc          	fstcw  WORD PTR [ebp-0x4]
c0026cd2:	66 8b 55 fc          	mov    dx,WORD PTR [ebp-0x4]
c0026cd6:	66 81 ca 00 08       	or     dx,0x800
c0026cdb:	66 81 e2 ff fb       	and    dx,0xfbff
c0026ce0:	66 89 55 f8          	mov    WORD PTR [ebp-0x8],dx
c0026ce4:	d9 6d f8             	fldcw  WORD PTR [ebp-0x8]
c0026ce7:	dd 45 08             	fld    QWORD PTR [ebp+0x8]
c0026cea:	d9 fc                	frndint 
c0026cec:	d9 6d fc             	fldcw  WORD PTR [ebp-0x4]
c0026cef:	c9                   	leave  
c0026cf0:	c3                   	ret    
c0026cf1:	66 90                	xchg   ax,ax
c0026cf3:	90                   	nop

c0026cf4 <floor>:
c0026cf4:	55                   	push   ebp
c0026cf5:	89 e5                	mov    ebp,esp
c0026cf7:	83 ec 08             	sub    esp,0x8
c0026cfa:	9b d9 7d fc          	fstcw  WORD PTR [ebp-0x4]
c0026cfe:	66 8b 55 fc          	mov    dx,WORD PTR [ebp-0x4]
c0026d02:	66 81 ca 00 04       	or     dx,0x400
c0026d07:	66 81 e2 ff f7       	and    dx,0xf7ff
c0026d0c:	66 89 55 f8          	mov    WORD PTR [ebp-0x8],dx
c0026d10:	d9 6d f8             	fldcw  WORD PTR [ebp-0x8]
c0026d13:	dd 45 08             	fld    QWORD PTR [ebp+0x8]
c0026d16:	d9 fc                	frndint 
c0026d18:	d9 6d fc             	fldcw  WORD PTR [ebp-0x4]
c0026d1b:	c9                   	leave  
c0026d1c:	c3                   	ret    
c0026d1d:	66 90                	xchg   ax,ax
c0026d1f:	90                   	nop

c0026d20 <tan>:
c0026d20:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0026d24:	d9 f2                	fptan  
c0026d26:	df e0                	fnstsw ax
c0026d28:	66 25 00 04          	and    ax,0x400
c0026d2c:	75 03                	jne    c0026d31 <tan+0x11>
c0026d2e:	dd d8                	fstp   st(0)
c0026d30:	c3                   	ret    
c0026d31:	d9 eb                	fldpi  
c0026d33:	d8 c0                	fadd   st,st(0)
c0026d35:	d9 c9                	fxch   st(1)
c0026d37:	d9 f5                	fprem1 
c0026d39:	9b df e0             	fstsw  ax
c0026d3c:	66 25 00 04          	and    ax,0x400
c0026d40:	75 f5                	jne    c0026d37 <tan+0x17>
c0026d42:	dd d9                	fstp   st(1)
c0026d44:	d9 f2                	fptan  
c0026d46:	dd d8                	fstp   st(0)
c0026d48:	c3                   	ret    
c0026d49:	66 90                	xchg   ax,ax
c0026d4b:	90                   	nop

c0026d4c <ldexp>:
c0026d4c:	db 44 24 0c          	fild   DWORD PTR [esp+0xc]
c0026d50:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0026d54:	d9 fd                	fscale 
c0026d56:	dd d9                	fstp   st(1)
c0026d58:	c3                   	ret    
c0026d59:	66 90                	xchg   ax,ax
c0026d5b:	66 90                	xchg   ax,ax
c0026d5d:	66 90                	xchg   ax,ax
c0026d5f:	90                   	nop

c0026d60 <__ieee754_rem_pio2>:
c0026d60:	56                   	push   esi
c0026d61:	53                   	push   ebx
c0026d62:	83 ec 74             	sub    esp,0x74
c0026d65:	dd 84 24 80 00 00 00 	fld    QWORD PTR [esp+0x80]
c0026d6c:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c0026d73:	dd 54 24 20          	fst    QWORD PTR [esp+0x20]
c0026d77:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0026d7b:	89 f2                	mov    edx,esi
c0026d7d:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0026d83:	81 fa 7a 6a 0f 40    	cmp    edx,0x400f6a7a
c0026d89:	7f 65                	jg     c0026df0 <__ieee754_rem_pio2+0x90>
c0026d8b:	89 f0                	mov    eax,esi
c0026d8d:	25 ff ff 0f 00       	and    eax,0xfffff
c0026d92:	3d fb 21 09 00       	cmp    eax,0x921fb
c0026d97:	0f 84 57 02 00 00    	je     c0026ff4 <__ieee754_rem_pio2+0x294>
c0026d9d:	81 fa 7c d9 02 40    	cmp    edx,0x4002d97c
c0026da3:	0f 8f b7 01 00 00    	jg     c0026f60 <__ieee754_rem_pio2+0x200>
c0026da9:	85 f6                	test   esi,esi
c0026dab:	0f 8e 3a 04 00 00    	jle    c00271eb <__ieee754_rem_pio2+0x48b>
c0026db1:	dc 25 f8 e8 02 c0    	fsub   QWORD PTR ds:0xc002e8f8
c0026db7:	b8 01 00 00 00       	mov    eax,0x1
c0026dbc:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0026dc0:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0026dc4:	dd 05 00 e9 02 c0    	fld    QWORD PTR ds:0xc002e900
c0026dca:	d9 c1                	fld    st(1)
c0026dcc:	d8 e1                	fsub   st,st(1)
c0026dce:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0026dd2:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0026dd6:	dd 13                	fst    QWORD PTR [ebx]
c0026dd8:	de ea                	fsubp  st(2),st
c0026dda:	de e9                	fsubp  st(1),st
c0026ddc:	dd 5b 08             	fstp   QWORD PTR [ebx+0x8]
c0026ddf:	83 c4 74             	add    esp,0x74
c0026de2:	5b                   	pop    ebx
c0026de3:	5e                   	pop    esi
c0026de4:	c3                   	ret    
c0026de5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0026de9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0026df0:	dd d8                	fstp   st(0)
c0026df2:	81 fa 3b 46 1c 40    	cmp    edx,0x401c463b
c0026df8:	7f 66                	jg     c0026e60 <__ieee754_rem_pio2+0x100>
c0026dfa:	81 fa bc fd 15 40    	cmp    edx,0x4015fdbc
c0026e00:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c0026e04:	0f 8f 96 01 00 00    	jg     c0026fa0 <__ieee754_rem_pio2+0x240>
c0026e0a:	81 fa 7c d9 12 40    	cmp    edx,0x4012d97c
c0026e10:	0f 84 de 01 00 00    	je     c0026ff4 <__ieee754_rem_pio2+0x294>
c0026e16:	85 f6                	test   esi,esi
c0026e18:	0f 8e 00 04 00 00    	jle    c002721e <__ieee754_rem_pio2+0x4be>
c0026e1e:	dc 25 18 e9 02 c0    	fsub   QWORD PTR ds:0xc002e918
c0026e24:	b8 03 00 00 00       	mov    eax,0x3
c0026e29:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0026e2d:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0026e31:	db 2d 60 e9 02 c0    	fld    TBYTE PTR ds:0xc002e960
c0026e37:	d9 c1                	fld    st(1)
c0026e39:	d8 e1                	fsub   st,st(1)
c0026e3b:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0026e3f:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0026e43:	dd 13                	fst    QWORD PTR [ebx]
c0026e45:	de ea                	fsubp  st(2),st
c0026e47:	de e9                	fsubp  st(1),st
c0026e49:	dd 5b 08             	fstp   QWORD PTR [ebx+0x8]
c0026e4c:	83 c4 74             	add    esp,0x74
c0026e4f:	5b                   	pop    ebx
c0026e50:	5e                   	pop    esi
c0026e51:	c3                   	ret    
c0026e52:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0026e59:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0026e60:	81 fa fa 21 39 41    	cmp    edx,0x413921fa
c0026e66:	0f 8e 84 01 00 00    	jle    c0026ff0 <__ieee754_rem_pio2+0x290>
c0026e6c:	81 fa ff ff ef 7f    	cmp    edx,0x7fefffff
c0026e72:	0f 8f d8 02 00 00    	jg     c0027150 <__ieee754_rem_pio2+0x3f0>
c0026e78:	d9 7c 24 36          	fnstcw WORD PTR [esp+0x36]
c0026e7c:	89 d1                	mov    ecx,edx
c0026e7e:	c1 f9 14             	sar    ecx,0x14
c0026e81:	81 e9 16 04 00 00    	sub    ecx,0x416
c0026e87:	89 c8                	mov    eax,ecx
c0026e89:	c1 e0 14             	shl    eax,0x14
c0026e8c:	29 c2                	sub    edx,eax
c0026e8e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026e92:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0026e96:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0026e9a:	0f b7 44 24 36       	movzx  eax,WORD PTR [esp+0x36]
c0026e9f:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0026ea3:	66 0d 00 0c          	or     ax,0xc00
c0026ea7:	66 89 44 24 34       	mov    WORD PTR [esp+0x34],ax
c0026eac:	d9 6c 24 34          	fldcw  WORD PTR [esp+0x34]
c0026eb0:	db 54 24 20          	fist   DWORD PTR [esp+0x20]
c0026eb4:	d9 6c 24 36          	fldcw  WORD PTR [esp+0x36]
c0026eb8:	db 44 24 20          	fild   DWORD PTR [esp+0x20]
c0026ebc:	dd 54 24 58          	fst    QWORD PTR [esp+0x58]
c0026ec0:	de e9                	fsubp  st(1),st
c0026ec2:	d9 05 74 e9 02 c0    	fld    DWORD PTR ds:0xc002e974
c0026ec8:	dc c9                	fmul   st(1),st
c0026eca:	d9 c9                	fxch   st(1)
c0026ecc:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0026ed0:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0026ed4:	d9 6c 24 34          	fldcw  WORD PTR [esp+0x34]
c0026ed8:	db 54 24 20          	fist   DWORD PTR [esp+0x20]
c0026edc:	d9 6c 24 36          	fldcw  WORD PTR [esp+0x36]
c0026ee0:	db 44 24 20          	fild   DWORD PTR [esp+0x20]
c0026ee4:	dd 54 24 60          	fst    QWORD PTR [esp+0x60]
c0026ee8:	de e9                	fsubp  st(1),st
c0026eea:	de c9                	fmulp  st(1),st
c0026eec:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0026ef0:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0026ef4:	dd 54 24 68          	fst    QWORD PTR [esp+0x68]
c0026ef8:	d9 ee                	fldz   
c0026efa:	d9 c9                	fxch   st(1)
c0026efc:	df e9                	fucomip st,st(1)
c0026efe:	dd d8                	fstp   st(0)
c0026f00:	0f 8a 8a 02 00 00    	jp     c0027190 <__ieee754_rem_pio2+0x430>
c0026f06:	0f 85 84 02 00 00    	jne    c0027190 <__ieee754_rem_pio2+0x430>
c0026f0c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0026f10:	31 c0                	xor    eax,eax
c0026f12:	85 d2                	test   edx,edx
c0026f14:	0f 95 c0             	setne  al
c0026f17:	40                   	inc    eax
c0026f18:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026f1c:	8d 44 24 48          	lea    eax,[esp+0x48]
c0026f20:	ba 01 00 00 00       	mov    edx,0x1
c0026f25:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0026f29:	8d 44 24 58          	lea    eax,[esp+0x58]
c0026f2d:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0026f31:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0026f35:	89 04 24             	mov    DWORD PTR [esp],eax
c0026f38:	e8 f3 03 00 00       	call   c0027330 <__kernel_rem_pio2>
c0026f3d:	85 f6                	test   esi,esi
c0026f3f:	0f 88 5b 02 00 00    	js     c00271a0 <__ieee754_rem_pio2+0x440>
c0026f45:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0026f49:	dd 1b                	fstp   QWORD PTR [ebx]
c0026f4b:	dd 44 24 50          	fld    QWORD PTR [esp+0x50]
c0026f4f:	dd 5b 08             	fstp   QWORD PTR [ebx+0x8]
c0026f52:	e9 88 fe ff ff       	jmp    c0026ddf <__ieee754_rem_pio2+0x7f>
c0026f57:	89 f6                	mov    esi,esi
c0026f59:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0026f60:	85 f6                	test   esi,esi
c0026f62:	0f 8e 50 02 00 00    	jle    c00271b8 <__ieee754_rem_pio2+0x458>
c0026f68:	dc 25 08 e9 02 c0    	fsub   QWORD PTR ds:0xc002e908
c0026f6e:	b8 02 00 00 00       	mov    eax,0x2
c0026f73:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0026f77:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0026f7b:	dd 05 10 e9 02 c0    	fld    QWORD PTR ds:0xc002e910
c0026f81:	d9 c1                	fld    st(1)
c0026f83:	d8 e1                	fsub   st,st(1)
c0026f85:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0026f89:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0026f8d:	dd 13                	fst    QWORD PTR [ebx]
c0026f8f:	de ea                	fsubp  st(2),st
c0026f91:	de e9                	fsubp  st(1),st
c0026f93:	dd 5b 08             	fstp   QWORD PTR [ebx+0x8]
c0026f96:	83 c4 74             	add    esp,0x74
c0026f99:	5b                   	pop    ebx
c0026f9a:	5e                   	pop    esi
c0026f9b:	c3                   	ret    
c0026f9c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0026fa0:	81 fa fb 21 19 40    	cmp    edx,0x401921fb
c0026fa6:	74 4c                	je     c0026ff4 <__ieee754_rem_pio2+0x294>
c0026fa8:	85 f6                	test   esi,esi
c0026faa:	0f 8e a1 02 00 00    	jle    c0027251 <__ieee754_rem_pio2+0x4f1>
c0026fb0:	dc 25 20 e9 02 c0    	fsub   QWORD PTR ds:0xc002e920
c0026fb6:	b8 04 00 00 00       	mov    eax,0x4
c0026fbb:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0026fbf:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0026fc3:	dd 05 28 e9 02 c0    	fld    QWORD PTR ds:0xc002e928
c0026fc9:	d9 c1                	fld    st(1)
c0026fcb:	d8 e1                	fsub   st,st(1)
c0026fcd:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0026fd1:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0026fd5:	dd 13                	fst    QWORD PTR [ebx]
c0026fd7:	de ea                	fsubp  st(2),st
c0026fd9:	de e9                	fsubp  st(1),st
c0026fdb:	dd 5b 08             	fstp   QWORD PTR [ebx+0x8]
c0026fde:	83 c4 74             	add    esp,0x74
c0026fe1:	5b                   	pop    ebx
c0026fe2:	5e                   	pop    esi
c0026fe3:	c3                   	ret    
c0026fe4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0026fea:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0026ff0:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c0026ff4:	d9 7c 24 36          	fnstcw WORD PTR [esp+0x36]
c0026ff8:	d9 c0                	fld    st(0)
c0026ffa:	dc 0d 30 e9 02 c0    	fmul   QWORD PTR ds:0xc002e930
c0027000:	c1 fa 14             	sar    edx,0x14
c0027003:	89 d6                	mov    esi,edx
c0027005:	0f b7 44 24 36       	movzx  eax,WORD PTR [esp+0x36]
c002700a:	d9 05 70 e9 02 c0    	fld    DWORD PTR ds:0xc002e970
c0027010:	dc c1                	fadd   st(1),st
c0027012:	d9 c9                	fxch   st(1)
c0027014:	66 0d 00 0c          	or     ax,0xc00
c0027018:	66 89 44 24 34       	mov    WORD PTR [esp+0x34],ax
c002701d:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0027021:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0027025:	de e1                	fsubrp st(1),st
c0027027:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c002702b:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c002702f:	d9 6c 24 34          	fldcw  WORD PTR [esp+0x34]
c0027033:	db 54 24 30          	fist   DWORD PTR [esp+0x30]
c0027037:	d9 6c 24 36          	fldcw  WORD PTR [esp+0x36]
c002703b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002703f:	d9 c0                	fld    st(0)
c0027041:	dc 0d f8 e8 02 c0    	fmul   QWORD PTR ds:0xc002e8f8
c0027047:	de ea                	fsubp  st(2),st
c0027049:	d9 c9                	fxch   st(1)
c002704b:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c002704f:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0027053:	d9 c1                	fld    st(1)
c0027055:	dc 0d 00 e9 02 c0    	fmul   QWORD PTR ds:0xc002e900
c002705b:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c002705f:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0027063:	d9 c1                	fld    st(1)
c0027065:	d8 e1                	fsub   st,st(1)
c0027067:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c002706b:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c002706f:	c1 e9 14             	shr    ecx,0x14
c0027072:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0027078:	29 ce                	sub    esi,ecx
c002707a:	83 fe 10             	cmp    esi,0x10
c002707d:	7f 21                	jg     c00270a0 <__ieee754_rem_pio2+0x340>
c002707f:	dd da                	fstp   st(2)
c0027081:	d9 c9                	fxch   st(1)
c0027083:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c0027087:	dd 1b                	fstp   QWORD PTR [ebx]
c0027089:	d9 c9                	fxch   st(1)
c002708b:	dc 64 24 20          	fsub   QWORD PTR [esp+0x20]
c002708f:	de e1                	fsubrp st(1),st
c0027091:	dd 5b 08             	fstp   QWORD PTR [ebx+0x8]
c0027094:	83 c4 74             	add    esp,0x74
c0027097:	5b                   	pop    ebx
c0027098:	5e                   	pop    esi
c0027099:	c3                   	ret    
c002709a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00270a0:	dd d8                	fstp   st(0)
c00270a2:	d9 c1                	fld    st(1)
c00270a4:	dc 0d 38 e9 02 c0    	fmul   QWORD PTR ds:0xc002e938
c00270aa:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00270ae:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00270b2:	d9 c1                	fld    st(1)
c00270b4:	d8 e1                	fsub   st,st(1)
c00270b6:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00270ba:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00270be:	d9 c0                	fld    st(0)
c00270c0:	dc eb                	fsub   st(3),st
c00270c2:	d9 cb                	fxch   st(3)
c00270c4:	de e2                	fsubrp st(2),st
c00270c6:	d9 c3                	fld    st(3)
c00270c8:	dc 0d 40 e9 02 c0    	fmul   QWORD PTR ds:0xc002e940
c00270ce:	de e2                	fsubrp st(2),st
c00270d0:	d9 c9                	fxch   st(1)
c00270d2:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00270d6:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00270da:	d9 c2                	fld    st(2)
c00270dc:	d8 e1                	fsub   st,st(1)
c00270de:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c00270e2:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00270e6:	c1 e9 14             	shr    ecx,0x14
c00270e9:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00270ef:	29 ca                	sub    edx,ecx
c00270f1:	83 fa 31             	cmp    edx,0x31
c00270f4:	7e 7a                	jle    c0027170 <__ieee754_rem_pio2+0x410>
c00270f6:	dd d8                	fstp   st(0)
c00270f8:	dd d8                	fstp   st(0)
c00270fa:	d9 c1                	fld    st(1)
c00270fc:	dc 0d 48 e9 02 c0    	fmul   QWORD PTR ds:0xc002e948
c0027102:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0027106:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c002710a:	d9 c1                	fld    st(1)
c002710c:	d8 e1                	fsub   st,st(1)
c002710e:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0027112:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0027116:	d9 cb                	fxch   st(3)
c0027118:	dc 0d 50 e9 02 c0    	fmul   QWORD PTR ds:0xc002e950
c002711e:	d9 ca                	fxch   st(2)
c0027120:	d8 e3                	fsub   st,st(3)
c0027122:	de e1                	fsubrp st(1),st
c0027124:	de e9                	fsubp  st(1),st
c0027126:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c002712a:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c002712e:	d9 c1                	fld    st(1)
c0027130:	d8 e1                	fsub   st,st(1)
c0027132:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0027136:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c002713a:	dd 1b                	fstp   QWORD PTR [ebx]
c002713c:	d9 c9                	fxch   st(1)
c002713e:	e9 48 ff ff ff       	jmp    c002708b <__ieee754_rem_pio2+0x32b>
c0027143:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0027149:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0027150:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c0027154:	31 c0                	xor    eax,eax
c0027156:	d8 e0                	fsub   st,st(0)
c0027158:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c002715c:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0027160:	dd 53 08             	fst    QWORD PTR [ebx+0x8]
c0027163:	dd 1b                	fstp   QWORD PTR [ebx]
c0027165:	e9 75 fc ff ff       	jmp    c0026ddf <__ieee754_rem_pio2+0x7f>
c002716a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0027170:	dd da                	fstp   st(2)
c0027172:	dd da                	fstp   st(2)
c0027174:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c0027178:	dd 1b                	fstp   QWORD PTR [ebx]
c002717a:	d9 c9                	fxch   st(1)
c002717c:	e9 0a ff ff ff       	jmp    c002708b <__ieee754_rem_pio2+0x32b>
c0027181:	eb 0d                	jmp    c0027190 <__ieee754_rem_pio2+0x430>
c0027183:	90                   	nop
c0027184:	90                   	nop
c0027185:	90                   	nop
c0027186:	90                   	nop
c0027187:	90                   	nop
c0027188:	90                   	nop
c0027189:	90                   	nop
c002718a:	90                   	nop
c002718b:	90                   	nop
c002718c:	90                   	nop
c002718d:	90                   	nop
c002718e:	90                   	nop
c002718f:	90                   	nop
c0027190:	b8 03 00 00 00       	mov    eax,0x3
c0027195:	e9 7e fd ff ff       	jmp    c0026f18 <__ieee754_rem_pio2+0x1b8>
c002719a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00271a0:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c00271a4:	f7 d8                	neg    eax
c00271a6:	d9 e0                	fchs   
c00271a8:	dd 1b                	fstp   QWORD PTR [ebx]
c00271aa:	dd 44 24 50          	fld    QWORD PTR [esp+0x50]
c00271ae:	d9 e0                	fchs   
c00271b0:	dd 5b 08             	fstp   QWORD PTR [ebx+0x8]
c00271b3:	e9 27 fc ff ff       	jmp    c0026ddf <__ieee754_rem_pio2+0x7f>
c00271b8:	dc 05 08 e9 02 c0    	fadd   QWORD PTR ds:0xc002e908
c00271be:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00271c3:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00271c7:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00271cb:	dd 05 10 e9 02 c0    	fld    QWORD PTR ds:0xc002e910
c00271d1:	d9 c1                	fld    st(1)
c00271d3:	d8 c1                	fadd   st,st(1)
c00271d5:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00271d9:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00271dd:	dd 13                	fst    QWORD PTR [ebx]
c00271df:	de ea                	fsubp  st(2),st
c00271e1:	de c1                	faddp  st(1),st
c00271e3:	dd 5b 08             	fstp   QWORD PTR [ebx+0x8]
c00271e6:	e9 f4 fb ff ff       	jmp    c0026ddf <__ieee754_rem_pio2+0x7f>
c00271eb:	dc 05 f8 e8 02 c0    	fadd   QWORD PTR ds:0xc002e8f8
c00271f1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00271f6:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00271fa:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00271fe:	dd 05 00 e9 02 c0    	fld    QWORD PTR ds:0xc002e900
c0027204:	d9 c1                	fld    st(1)
c0027206:	d8 c1                	fadd   st,st(1)
c0027208:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c002720c:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0027210:	dd 13                	fst    QWORD PTR [ebx]
c0027212:	de ea                	fsubp  st(2),st
c0027214:	de c1                	faddp  st(1),st
c0027216:	dd 5b 08             	fstp   QWORD PTR [ebx+0x8]
c0027219:	e9 c1 fb ff ff       	jmp    c0026ddf <__ieee754_rem_pio2+0x7f>
c002721e:	dc 05 18 e9 02 c0    	fadd   QWORD PTR ds:0xc002e918
c0027224:	b8 fd ff ff ff       	mov    eax,0xfffffffd
c0027229:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c002722d:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0027231:	db 2d 60 e9 02 c0    	fld    TBYTE PTR ds:0xc002e960
c0027237:	d9 c1                	fld    st(1)
c0027239:	d8 c1                	fadd   st,st(1)
c002723b:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c002723f:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0027243:	dd 13                	fst    QWORD PTR [ebx]
c0027245:	de ea                	fsubp  st(2),st
c0027247:	de c1                	faddp  st(1),st
c0027249:	dd 5b 08             	fstp   QWORD PTR [ebx+0x8]
c002724c:	e9 8e fb ff ff       	jmp    c0026ddf <__ieee754_rem_pio2+0x7f>
c0027251:	dc 05 20 e9 02 c0    	fadd   QWORD PTR ds:0xc002e920
c0027257:	b8 fc ff ff ff       	mov    eax,0xfffffffc
c002725c:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0027260:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0027264:	dd 05 28 e9 02 c0    	fld    QWORD PTR ds:0xc002e928
c002726a:	d9 c1                	fld    st(1)
c002726c:	d8 c1                	fadd   st,st(1)
c002726e:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0027272:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0027276:	dd 13                	fst    QWORD PTR [ebx]
c0027278:	de ea                	fsubp  st(2),st
c002727a:	de c1                	faddp  st(1),st
c002727c:	dd 5b 08             	fstp   QWORD PTR [ebx+0x8]
c002727f:	e9 5b fb ff ff       	jmp    c0026ddf <__ieee754_rem_pio2+0x7f>
c0027284:	66 90                	xchg   ax,ax
c0027286:	66 90                	xchg   ax,ax
c0027288:	66 90                	xchg   ax,ax
c002728a:	66 90                	xchg   ax,ax
c002728c:	66 90                	xchg   ax,ax
c002728e:	66 90                	xchg   ax,ax

c0027290 <__kernel_cos>:
c0027290:	83 ec 0c             	sub    esp,0xc
c0027293:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0027297:	d9 c0                	fld    st(0)
c0027299:	d8 c9                	fmul   st,st(1)
c002729b:	dd 1c 24             	fstp   QWORD PTR [esp]
c002729e:	dd 04 24             	fld    QWORD PTR [esp]
c00272a1:	d9 c0                	fld    st(0)
c00272a3:	d8 c9                	fmul   st,st(1)
c00272a5:	dd 1c 24             	fstp   QWORD PTR [esp]
c00272a8:	dd 04 24             	fld    QWORD PTR [esp]
c00272ab:	d9 c1                	fld    st(1)
c00272ad:	d8 0d 5c e6 02 c0    	fmul   DWORD PTR ds:0xc002e65c
c00272b3:	dd 1c 24             	fstp   QWORD PTR [esp]
c00272b6:	dd 04 24             	fld    QWORD PTR [esp]
c00272b9:	d9 e8                	fld1   
c00272bb:	d9 c0                	fld    st(0)
c00272bd:	d8 e2                	fsub   st,st(2)
c00272bf:	dd 1c 24             	fstp   QWORD PTR [esp]
c00272c2:	dd 04 24             	fld    QWORD PTR [esp]
c00272c5:	d9 c4                	fld    st(4)
c00272c7:	dc 0d 78 e9 02 c0    	fmul   QWORD PTR ds:0xc002e978
c00272cd:	dc 05 80 e9 02 c0    	fadd   QWORD PTR ds:0xc002e980
c00272d3:	d8 cd                	fmul   st,st(5)
c00272d5:	dc 25 88 e9 02 c0    	fsub   QWORD PTR ds:0xc002e988
c00272db:	d9 cc                	fxch   st(4)
c00272dd:	d8 c8                	fmul   st,st(0)
c00272df:	de cc                	fmulp  st(4),st
c00272e1:	d9 c4                	fld    st(4)
c00272e3:	dc 0d 90 e9 02 c0    	fmul   QWORD PTR ds:0xc002e990
c00272e9:	dc 25 98 e9 02 c0    	fsub   QWORD PTR ds:0xc002e998
c00272ef:	d8 cd                	fmul   st,st(5)
c00272f1:	dc 05 a0 e9 02 c0    	fadd   QWORD PTR ds:0xc002e9a0
c00272f7:	d8 cd                	fmul   st,st(5)
c00272f9:	de c4                	faddp  st(4),st
c00272fb:	d9 cb                	fxch   st(3)
c00272fd:	dd 1c 24             	fstp   QWORD PTR [esp]
c0027300:	dd 04 24             	fld    QWORD PTR [esp]
c0027303:	de cc                	fmulp  st(4),st
c0027305:	d9 cc                	fxch   st(4)
c0027307:	dc 4c 24 18          	fmul   QWORD PTR [esp+0x18]
c002730b:	de eb                	fsubp  st(3),st
c002730d:	d9 cb                	fxch   st(3)
c002730f:	d8 e1                	fsub   st,st(1)
c0027311:	de e3                	fsubrp st(3),st
c0027313:	d9 c9                	fxch   st(1)
c0027315:	de c2                	faddp  st(2),st
c0027317:	de c1                	faddp  st(1),st
c0027319:	dd 1c 24             	fstp   QWORD PTR [esp]
c002731c:	dd 04 24             	fld    QWORD PTR [esp]
c002731f:	83 c4 0c             	add    esp,0xc
c0027322:	c3                   	ret    
c0027323:	66 90                	xchg   ax,ax
c0027325:	66 90                	xchg   ax,ax
c0027327:	66 90                	xchg   ax,ax
c0027329:	66 90                	xchg   ax,ax
c002732b:	66 90                	xchg   ax,ax
c002732d:	66 90                	xchg   ax,ax
c002732f:	90                   	nop

c0027330 <__kernel_rem_pio2>:
c0027330:	55                   	push   ebp
c0027331:	57                   	push   edi
c0027332:	56                   	push   esi
c0027333:	53                   	push   ebx
c0027334:	81 ec 8c 02 00 00    	sub    esp,0x28c
c002733a:	8b 84 24 b0 02 00 00 	mov    eax,DWORD PTR [esp+0x2b0]
c0027341:	8b 9c 24 a8 02 00 00 	mov    ebx,DWORD PTR [esp+0x2a8]
c0027348:	8b 04 85 88 f4 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0b78]
c002734f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0027353:	8b 84 24 ac 02 00 00 	mov    eax,DWORD PTR [esp+0x2ac]
c002735a:	48                   	dec    eax
c002735b:	83 fb ec             	cmp    ebx,0xffffffec
c002735e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0027362:	0f 8c 44 08 00 00    	jl     c0027bac <__kernel_rem_pio2+0x87c>
c0027368:	8d 4b fd             	lea    ecx,[ebx-0x3]
c002736b:	ba ab aa aa 2a       	mov    edx,0x2aaaaaab
c0027370:	89 c8                	mov    eax,ecx
c0027372:	f7 ea                	imul   edx
c0027374:	c1 f9 1f             	sar    ecx,0x1f
c0027377:	c1 fa 02             	sar    edx,0x2
c002737a:	29 ca                	sub    edx,ecx
c002737c:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0027380:	8d 42 01             	lea    eax,[edx+0x1]
c0027383:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c002738a:	29 d0                	sub    eax,edx
c002738c:	c1 e0 03             	shl    eax,0x3
c002738f:	01 d8                	add    eax,ebx
c0027391:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0027395:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0027399:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c002739d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00273a1:	29 c2                	sub    edx,eax
c00273a3:	01 c6                	add    esi,eax
c00273a5:	78 58                	js     c00273ff <__kernel_rem_pio2+0xcf>
c00273a7:	85 d2                	test   edx,edx
c00273a9:	0f 89 f4 04 00 00    	jns    c00278a3 <__kernel_rem_pio2+0x573>
c00273af:	8d 5c 16 01          	lea    ebx,[esi+edx*1+0x1]
c00273b3:	b8 00 00 00 00       	mov    eax,0x0
c00273b8:	8d 8c 24 a0 00 00 00 	lea    ecx,[esp+0xa0]
c00273bf:	85 db                	test   ebx,ebx
c00273c1:	0f 4f d8             	cmovg  ebx,eax
c00273c4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00273ca:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00273d0:	d9 ee                	fldz   
c00273d2:	42                   	inc    edx
c00273d3:	dd 1c c1             	fstp   QWORD PTR [ecx+eax*8]
c00273d6:	40                   	inc    eax
c00273d7:	39 da                	cmp    edx,ebx
c00273d9:	7c f5                	jl     c00273d0 <__kernel_rem_pio2+0xa0>
c00273db:	39 c6                	cmp    esi,eax
c00273dd:	7c 20                	jl     c00273ff <__kernel_rem_pio2+0xcf>
c00273df:	29 c2                	sub    edx,eax
c00273e1:	c1 e2 02             	shl    edx,0x2
c00273e4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00273ea:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00273f0:	db 84 82 c0 e9 02 c0 	fild   DWORD PTR [edx+eax*4-0x3ffd1640]
c00273f7:	dd 1c c1             	fstp   QWORD PTR [ecx+eax*8]
c00273fa:	40                   	inc    eax
c00273fb:	39 c6                	cmp    esi,eax
c00273fd:	7d f1                	jge    c00273f0 <__kernel_rem_pio2+0xc0>
c00273ff:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0027403:	85 c0                	test   eax,eax
c0027405:	78 7c                	js     c0027483 <__kernel_rem_pio2+0x153>
c0027407:	8d 2c c5 08 00 00 00 	lea    ebp,[eax*8+0x8]
c002740e:	8b 84 24 ac 02 00 00 	mov    eax,DWORD PTR [esp+0x2ac]
c0027415:	31 db                	xor    ebx,ebx
c0027417:	8b 8c 24 a0 02 00 00 	mov    ecx,DWORD PTR [esp+0x2a0]
c002741e:	8d b4 24 e0 01 00 00 	lea    esi,[esp+0x1e0]
c0027425:	c1 e0 03             	shl    eax,0x3
c0027428:	8d bc 04 98 00 00 00 	lea    edi,[esp+eax*1+0x98]
c002742f:	01 c1                	add    ecx,eax
c0027431:	eb 0d                	jmp    c0027440 <__kernel_rem_pio2+0x110>
c0027433:	90                   	nop
c0027434:	90                   	nop
c0027435:	90                   	nop
c0027436:	90                   	nop
c0027437:	90                   	nop
c0027438:	90                   	nop
c0027439:	90                   	nop
c002743a:	90                   	nop
c002743b:	90                   	nop
c002743c:	90                   	nop
c002743d:	90                   	nop
c002743e:	90                   	nop
c002743f:	90                   	nop
c0027440:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0027444:	85 c0                	test   eax,eax
c0027446:	0f 88 65 04 00 00    	js     c00278b1 <__kernel_rem_pio2+0x581>
c002744c:	8b 84 24 a0 02 00 00 	mov    eax,DWORD PTR [esp+0x2a0]
c0027453:	8d 14 1f             	lea    edx,[edi+ebx*1]
c0027456:	d9 ee                	fldz   
c0027458:	90                   	nop
c0027459:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0027460:	dd 02                	fld    QWORD PTR [edx]
c0027462:	83 c0 08             	add    eax,0x8
c0027465:	83 ea 08             	sub    edx,0x8
c0027468:	dc 48 f8             	fmul   QWORD PTR [eax-0x8]
c002746b:	39 c1                	cmp    ecx,eax
c002746d:	de c1                	faddp  st(1),st
c002746f:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0027473:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0027477:	75 e7                	jne    c0027460 <__kernel_rem_pio2+0x130>
c0027479:	dd 1c 1e             	fstp   QWORD PTR [esi+ebx*1]
c002747c:	83 c3 08             	add    ebx,0x8
c002747f:	39 dd                	cmp    ebp,ebx
c0027481:	75 bd                	jne    c0027440 <__kernel_rem_pio2+0x110>
c0027483:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0027487:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c002748b:	8d 04 b5 00 00 00 00 	lea    eax,[esi*4+0x0]
c0027492:	8d 7c 04 4c          	lea    edi,[esp+eax*1+0x4c]
c0027496:	89 7c 24 30          	mov    DWORD PTR [esp+0x30],edi
c002749a:	8d 44 04 48          	lea    eax,[esp+eax*1+0x48]
c002749e:	8b bc 24 ac 02 00 00 	mov    edi,DWORD PTR [esp+0x2ac]
c00274a5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00274a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00274ad:	c1 e0 02             	shl    eax,0x2
c00274b0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00274b4:	8b 84 24 a0 02 00 00 	mov    eax,DWORD PTR [esp+0x2a0]
c00274bb:	8d 1c f8             	lea    ebx,[eax+edi*8]
c00274be:	b8 18 00 00 00       	mov    eax,0x18
c00274c3:	29 e8                	sub    eax,ebp
c00274c5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00274c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00274d0:	85 f6                	test   esi,esi
c00274d2:	dd 84 f4 e0 01 00 00 	fld    QWORD PTR [esp+esi*8+0x1e0]
c00274d9:	7e 6a                	jle    c0027545 <__kernel_rem_pio2+0x215>
c00274db:	d9 7c 24 46          	fnstcw WORD PTR [esp+0x46]
c00274df:	8d ac 24 e0 01 00 00 	lea    ebp,[esp+0x1e0]
c00274e6:	8d 44 f5 f8          	lea    eax,[ebp+esi*8-0x8]
c00274ea:	8d 54 24 50          	lea    edx,[esp+0x50]
c00274ee:	0f b7 4c 24 46       	movzx  ecx,WORD PTR [esp+0x46]
c00274f3:	66 81 c9 00 0c       	or     cx,0xc00
c00274f8:	66 89 4c 24 44       	mov    WORD PTR [esp+0x44],cx
c00274fd:	eb 03                	jmp    c0027502 <__kernel_rem_pio2+0x1d2>
c00274ff:	90                   	nop
c0027500:	89 c8                	mov    eax,ecx
c0027502:	83 c2 04             	add    edx,0x4
c0027505:	d9 c0                	fld    st(0)
c0027507:	d8 0d 9c f4 02 c0    	fmul   DWORD PTR ds:0xc002f49c
c002750d:	8d 48 f8             	lea    ecx,[eax-0x8]
c0027510:	d9 6c 24 44          	fldcw  WORD PTR [esp+0x44]
c0027514:	db 5c 24 10          	fistp  DWORD PTR [esp+0x10]
c0027518:	d9 6c 24 46          	fldcw  WORD PTR [esp+0x46]
c002751c:	db 44 24 10          	fild   DWORD PTR [esp+0x10]
c0027520:	d9 c0                	fld    st(0)
c0027522:	d8 0d 74 e9 02 c0    	fmul   DWORD PTR ds:0xc002e974
c0027528:	de ea                	fsubp  st(2),st
c002752a:	d9 c9                	fxch   st(1)
c002752c:	d9 6c 24 44          	fldcw  WORD PTR [esp+0x44]
c0027530:	db 5a fc             	fistp  DWORD PTR [edx-0x4]
c0027533:	d9 6c 24 46          	fldcw  WORD PTR [esp+0x46]
c0027537:	39 c5                	cmp    ebp,eax
c0027539:	dc 00                	fadd   QWORD PTR [eax]
c002753b:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c002753f:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0027543:	75 bb                	jne    c0027500 <__kernel_rem_pio2+0x1d0>
c0027545:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0027549:	dd 1c 24             	fstp   QWORD PTR [esp]
c002754c:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0027550:	e8 f7 f7 ff ff       	call   c0026d4c <ldexp>
c0027555:	d9 c0                	fld    st(0)
c0027557:	db 7c 24 10          	fstp   TBYTE PTR [esp+0x10]
c002755b:	d8 0d a0 f4 02 c0    	fmul   DWORD PTR ds:0xc002f4a0
c0027561:	dd 1c 24             	fstp   QWORD PTR [esp]
c0027564:	e8 8b f7 ff ff       	call   c0026cf4 <floor>
c0027569:	d9 05 a4 f4 02 c0    	fld    DWORD PTR ds:0xc002f4a4
c002756f:	de c9                	fmulp  st(1),st
c0027571:	d9 7c 24 46          	fnstcw WORD PTR [esp+0x46]
c0027575:	db 6c 24 10          	fld    TBYTE PTR [esp+0x10]
c0027579:	0f b7 44 24 46       	movzx  eax,WORD PTR [esp+0x46]
c002757e:	de e1                	fsubrp st(1),st
c0027580:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0027584:	66 0d 00 0c          	or     ax,0xc00
c0027588:	66 89 44 24 44       	mov    WORD PTR [esp+0x44],ax
c002758d:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0027591:	85 ff                	test   edi,edi
c0027593:	d9 6c 24 44          	fldcw  WORD PTR [esp+0x44]
c0027597:	db 54 24 40          	fist   DWORD PTR [esp+0x40]
c002759b:	d9 6c 24 46          	fldcw  WORD PTR [esp+0x46]
c002759f:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c00275a3:	89 6c 24 24          	mov    DWORD PTR [esp+0x24],ebp
c00275a7:	db 44 24 24          	fild   DWORD PTR [esp+0x24]
c00275ab:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c00275af:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c00275b3:	de e9                	fsubp  st(1),st
c00275b5:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c00275b9:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c00275bd:	0f 8e 2d 01 00 00    	jle    c00276f0 <__kernel_rem_pio2+0x3c0>
c00275c3:	8d 7e ff             	lea    edi,[esi-0x1]
c00275c6:	0f b6 4c 24 2c       	movzx  ecx,BYTE PTR [esp+0x2c]
c00275cb:	8b 44 bc 50          	mov    eax,DWORD PTR [esp+edi*4+0x50]
c00275cf:	89 c2                	mov    edx,eax
c00275d1:	d3 fa                	sar    edx,cl
c00275d3:	01 d5                	add    ebp,edx
c00275d5:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c00275d9:	d3 e2                	shl    edx,cl
c00275db:	b9 17 00 00 00       	mov    ecx,0x17
c00275e0:	29 d0                	sub    eax,edx
c00275e2:	89 44 bc 50          	mov    DWORD PTR [esp+edi*4+0x50],eax
c00275e6:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00275ea:	29 f9                	sub    ecx,edi
c00275ec:	d3 f8                	sar    eax,cl
c00275ee:	89 c5                	mov    ebp,eax
c00275f0:	85 ed                	test   ebp,ebp
c00275f2:	0f 8f 0e 01 00 00    	jg     c0027706 <__kernel_rem_pio2+0x3d6>
c00275f8:	d9 ee                	fldz   
c00275fa:	d9 c9                	fxch   st(1)
c00275fc:	db e9                	fucomi st,st(1)
c00275fe:	dd d9                	fstp   st(1)
c0027600:	0f 8a a2 01 00 00    	jp     c00277a8 <__kernel_rem_pio2+0x478>
c0027606:	0f 85 9c 01 00 00    	jne    c00277a8 <__kernel_rem_pio2+0x478>
c002760c:	dd d8                	fstp   st(0)
c002760e:	8d 7e ff             	lea    edi,[esi-0x1]
c0027611:	39 7c 24 28          	cmp    DWORD PTR [esp+0x28],edi
c0027615:	7f 2a                	jg     c0027641 <__kernel_rem_pio2+0x311>
c0027617:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c002761b:	8d 44 b4 4c          	lea    eax,[esp+esi*4+0x4c]
c002761f:	31 d2                	xor    edx,edx
c0027621:	eb 0d                	jmp    c0027630 <__kernel_rem_pio2+0x300>
c0027623:	90                   	nop
c0027624:	90                   	nop
c0027625:	90                   	nop
c0027626:	90                   	nop
c0027627:	90                   	nop
c0027628:	90                   	nop
c0027629:	90                   	nop
c002762a:	90                   	nop
c002762b:	90                   	nop
c002762c:	90                   	nop
c002762d:	90                   	nop
c002762e:	90                   	nop
c002762f:	90                   	nop
c0027630:	0b 10                	or     edx,DWORD PTR [eax]
c0027632:	83 e8 04             	sub    eax,0x4
c0027635:	39 c1                	cmp    ecx,eax
c0027637:	75 f7                	jne    c0027630 <__kernel_rem_pio2+0x300>
c0027639:	85 d2                	test   edx,edx
c002763b:	0f 85 85 02 00 00    	jne    c00278c6 <__kernel_rem_pio2+0x596>
c0027641:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0027645:	8b 4c 84 4c          	mov    ecx,DWORD PTR [esp+eax*4+0x4c]
c0027649:	85 c9                	test   ecx,ecx
c002764b:	0f 85 48 02 00 00    	jne    c0027899 <__kernel_rem_pio2+0x569>
c0027651:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0027655:	bf 01 00 00 00       	mov    edi,0x1
c002765a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0027660:	83 e8 04             	sub    eax,0x4
c0027663:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0027666:	47                   	inc    edi
c0027667:	85 d2                	test   edx,edx
c0027669:	74 f5                	je     c0027660 <__kernel_rem_pio2+0x330>
c002766b:	8d 4e 01             	lea    ecx,[esi+0x1]
c002766e:	01 f7                	add    edi,esi
c0027670:	8b 84 24 ac 02 00 00 	mov    eax,DWORD PTR [esp+0x2ac]
c0027677:	8d ac 24 e0 01 00 00 	lea    ebp,[esp+0x1e0]
c002767e:	01 c6                	add    esi,eax
c0027680:	8d b4 f4 a0 00 00 00 	lea    esi,[esp+esi*8+0xa0]
c0027687:	89 f6                	mov    esi,esi
c0027689:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0027690:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0027694:	db 84 88 c0 e9 02 c0 	fild   DWORD PTR [eax+ecx*4-0x3ffd1640]
c002769b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002769f:	85 c0                	test   eax,eax
c00276a1:	dd 1e                	fstp   QWORD PTR [esi]
c00276a3:	78 3b                	js     c00276e0 <__kernel_rem_pio2+0x3b0>
c00276a5:	8b 84 24 a0 02 00 00 	mov    eax,DWORD PTR [esp+0x2a0]
c00276ac:	d9 ee                	fldz   
c00276ae:	89 f2                	mov    edx,esi
c00276b0:	dd 02                	fld    QWORD PTR [edx]
c00276b2:	83 c0 08             	add    eax,0x8
c00276b5:	83 ea 08             	sub    edx,0x8
c00276b8:	dc 48 f8             	fmul   QWORD PTR [eax-0x8]
c00276bb:	39 c3                	cmp    ebx,eax
c00276bd:	de c1                	faddp  st(1),st
c00276bf:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c00276c3:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c00276c7:	75 e7                	jne    c00276b0 <__kernel_rem_pio2+0x380>
c00276c9:	dd 5c cd 00          	fstp   QWORD PTR [ebp+ecx*8+0x0]
c00276cd:	41                   	inc    ecx
c00276ce:	83 c6 08             	add    esi,0x8
c00276d1:	39 cf                	cmp    edi,ecx
c00276d3:	7d bb                	jge    c0027690 <__kernel_rem_pio2+0x360>
c00276d5:	89 fe                	mov    esi,edi
c00276d7:	e9 f4 fd ff ff       	jmp    c00274d0 <__kernel_rem_pio2+0x1a0>
c00276dc:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00276e0:	d9 ee                	fldz   
c00276e2:	83 c6 08             	add    esi,0x8
c00276e5:	dd 5c cd 00          	fstp   QWORD PTR [ebp+ecx*8+0x0]
c00276e9:	41                   	inc    ecx
c00276ea:	39 cf                	cmp    edi,ecx
c00276ec:	7d a2                	jge    c0027690 <__kernel_rem_pio2+0x360>
c00276ee:	eb e5                	jmp    c00276d5 <__kernel_rem_pio2+0x3a5>
c00276f0:	0f 85 8a 01 00 00    	jne    c0027880 <__kernel_rem_pio2+0x550>
c00276f6:	8b 6c b4 4c          	mov    ebp,DWORD PTR [esp+esi*4+0x4c]
c00276fa:	c1 fd 17             	sar    ebp,0x17
c00276fd:	85 ed                	test   ebp,ebp
c00276ff:	90                   	nop
c0027700:	0f 8e f2 fe ff ff    	jle    c00275f8 <__kernel_rem_pio2+0x2c8>
c0027706:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c002770a:	85 f6                	test   esi,esi
c002770c:	0f 8e d3 04 00 00    	jle    c0027be5 <__kernel_rem_pio2+0x8b5>
c0027712:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c0027716:	85 d2                	test   edx,edx
c0027718:	0f 85 12 01 00 00    	jne    c0027830 <__kernel_rem_pio2+0x500>
c002771e:	83 fe 01             	cmp    esi,0x1
c0027721:	b9 01 00 00 00       	mov    ecx,0x1
c0027726:	74 15                	je     c002773d <__kernel_rem_pio2+0x40d>
c0027728:	8b 54 8c 50          	mov    edx,DWORD PTR [esp+ecx*4+0x50]
c002772c:	8d 41 01             	lea    eax,[ecx+0x1]
c002772f:	85 d2                	test   edx,edx
c0027731:	0f 85 00 01 00 00    	jne    c0027837 <__kernel_rem_pio2+0x507>
c0027737:	39 c6                	cmp    esi,eax
c0027739:	89 c1                	mov    ecx,eax
c002773b:	75 eb                	jne    c0027728 <__kernel_rem_pio2+0x3f8>
c002773d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0027741:	85 c0                	test   eax,eax
c0027743:	7e 16                	jle    c002775b <__kernel_rem_pio2+0x42b>
c0027745:	83 f8 01             	cmp    eax,0x1
c0027748:	0f 84 51 04 00 00    	je     c0027b9f <__kernel_rem_pio2+0x86f>
c002774e:	83 f8 02             	cmp    eax,0x2
c0027751:	75 08                	jne    c002775b <__kernel_rem_pio2+0x42b>
c0027753:	81 64 b4 4c ff ff 3f 00 	and    DWORD PTR [esp+esi*4+0x4c],0x3fffff
c002775b:	83 fd 02             	cmp    ebp,0x2
c002775e:	0f 85 94 fe ff ff    	jne    c00275f8 <__kernel_rem_pio2+0x2c8>
c0027764:	d9 e8                	fld1   
c0027766:	85 d2                	test   edx,edx
c0027768:	de e1                	fsubrp st(1),st
c002776a:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c002776e:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0027772:	0f 84 80 fe ff ff    	je     c00275f8 <__kernel_rem_pio2+0x2c8>
c0027778:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c002777c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0027780:	d9 e8                	fld1   
c0027782:	dd 1c 24             	fstp   QWORD PTR [esp]
c0027785:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0027789:	e8 be f5 ff ff       	call   c0026d4c <ldexp>
c002778e:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0027792:	de e1                	fsubrp st(1),st
c0027794:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0027798:	d9 ee                	fldz   
c002779a:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c002779e:	db e9                	fucomi st,st(1)
c00277a0:	dd d9                	fstp   st(1)
c00277a2:	0f 8b 5e fe ff ff    	jnp    c0027606 <__kernel_rem_pio2+0x2d6>
c00277a8:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c00277ac:	dd 1c 24             	fstp   QWORD PTR [esp]
c00277af:	89 d8                	mov    eax,ebx
c00277b1:	f7 d8                	neg    eax
c00277b3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00277b7:	e8 90 f5 ff ff       	call   c0026d4c <ldexp>
c00277bc:	d9 05 74 e9 02 c0    	fld    DWORD PTR ds:0xc002e974
c00277c2:	d9 c9                	fxch   st(1)
c00277c4:	db f1                	fcomi  st,st(1)
c00277c6:	dd d9                	fstp   st(1)
c00277c8:	0f 82 94 04 00 00    	jb     c0027c62 <__kernel_rem_pio2+0x932>
c00277ce:	d9 7c 24 46          	fnstcw WORD PTR [esp+0x46]
c00277d2:	83 c3 18             	add    ebx,0x18
c00277d5:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c00277d9:	d9 c0                	fld    st(0)
c00277db:	d8 0d 9c f4 02 c0    	fmul   DWORD PTR ds:0xc002f49c
c00277e1:	8d 7e 01             	lea    edi,[esi+0x1]
c00277e4:	0f b7 44 24 46       	movzx  eax,WORD PTR [esp+0x46]
c00277e9:	66 0d 00 0c          	or     ax,0xc00
c00277ed:	66 89 44 24 44       	mov    WORD PTR [esp+0x44],ax
c00277f2:	d9 6c 24 44          	fldcw  WORD PTR [esp+0x44]
c00277f6:	db 5c 24 40          	fistp  DWORD PTR [esp+0x40]
c00277fa:	d9 6c 24 46          	fldcw  WORD PTR [esp+0x46]
c00277fe:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0027802:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0027806:	db 44 24 1c          	fild   DWORD PTR [esp+0x1c]
c002780a:	d8 0d 74 e9 02 c0    	fmul   DWORD PTR ds:0xc002e974
c0027810:	de e9                	fsubp  st(1),st
c0027812:	d9 6c 24 44          	fldcw  WORD PTR [esp+0x44]
c0027816:	db 5c b4 50          	fistp  DWORD PTR [esp+esi*4+0x50]
c002781a:	d9 6c 24 46          	fldcw  WORD PTR [esp+0x46]
c002781e:	89 44 bc 50          	mov    DWORD PTR [esp+edi*4+0x50],eax
c0027822:	89 d8                	mov    eax,ebx
c0027824:	e9 be 00 00 00       	jmp    c00278e7 <__kernel_rem_pio2+0x5b7>
c0027829:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0027830:	b8 01 00 00 00       	mov    eax,0x1
c0027835:	31 c9                	xor    ecx,ecx
c0027837:	bf 00 00 00 01       	mov    edi,0x1000000
c002783c:	29 d7                	sub    edi,edx
c002783e:	39 c6                	cmp    esi,eax
c0027840:	89 7c 8c 50          	mov    DWORD PTR [esp+ecx*4+0x50],edi
c0027844:	7e 30                	jle    c0027876 <__kernel_rem_pio2+0x546>
c0027846:	8b 4c 84 50          	mov    ecx,DWORD PTR [esp+eax*4+0x50]
c002784a:	ba ff ff ff 00       	mov    edx,0xffffff
c002784f:	29 ca                	sub    edx,ecx
c0027851:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0027855:	40                   	inc    eax
c0027856:	39 c6                	cmp    esi,eax
c0027858:	7e 1c                	jle    c0027876 <__kernel_rem_pio2+0x546>
c002785a:	8d 44 84 50          	lea    eax,[esp+eax*4+0x50]
c002785e:	b9 ff ff ff 00       	mov    ecx,0xffffff
c0027863:	8d 7c b4 50          	lea    edi,[esp+esi*4+0x50]
c0027867:	89 ca                	mov    edx,ecx
c0027869:	83 c0 04             	add    eax,0x4
c002786c:	2b 50 fc             	sub    edx,DWORD PTR [eax-0x4]
c002786f:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0027872:	39 c7                	cmp    edi,eax
c0027874:	75 f1                	jne    c0027867 <__kernel_rem_pio2+0x537>
c0027876:	ba 01 00 00 00       	mov    edx,0x1
c002787b:	e9 bd fe ff ff       	jmp    c002773d <__kernel_rem_pio2+0x40d>
c0027880:	d9 05 5c e6 02 c0    	fld    DWORD PTR ds:0xc002e65c
c0027886:	d9 c9                	fxch   st(1)
c0027888:	db f1                	fcomi  st,st(1)
c002788a:	dd d9                	fstp   st(1)
c002788c:	0f 83 2a 03 00 00    	jae    c0027bbc <__kernel_rem_pio2+0x88c>
c0027892:	31 ed                	xor    ebp,ebp
c0027894:	e9 5f fd ff ff       	jmp    c00275f8 <__kernel_rem_pio2+0x2c8>
c0027899:	8d 4e 01             	lea    ecx,[esi+0x1]
c002789c:	89 cf                	mov    edi,ecx
c002789e:	e9 cd fd ff ff       	jmp    c0027670 <__kernel_rem_pio2+0x340>
c00278a3:	8d 8c 24 a0 00 00 00 	lea    ecx,[esp+0xa0]
c00278aa:	31 c0                	xor    eax,eax
c00278ac:	e9 2e fb ff ff       	jmp    c00273df <__kernel_rem_pio2+0xaf>
c00278b1:	d9 ee                	fldz   
c00278b3:	dd 1c 1e             	fstp   QWORD PTR [esi+ebx*1]
c00278b6:	83 c3 08             	add    ebx,0x8
c00278b9:	39 dd                	cmp    ebp,ebx
c00278bb:	0f 85 7f fb ff ff    	jne    c0027440 <__kernel_rem_pio2+0x110>
c00278c1:	e9 bd fb ff ff       	jmp    c0027483 <__kernel_rem_pio2+0x153>
c00278c6:	8b 5c bc 50          	mov    ebx,DWORD PTR [esp+edi*4+0x50]
c00278ca:	83 6c 24 24 18       	sub    DWORD PTR [esp+0x24],0x18
c00278cf:	85 db                	test   ebx,ebx
c00278d1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00278d5:	75 10                	jne    c00278e7 <__kernel_rem_pio2+0x5b7>
c00278d7:	4f                   	dec    edi
c00278d8:	83 e8 18             	sub    eax,0x18
c00278db:	8b 4c bc 50          	mov    ecx,DWORD PTR [esp+edi*4+0x50]
c00278df:	85 c9                	test   ecx,ecx
c00278e1:	74 f4                	je     c00278d7 <__kernel_rem_pio2+0x5a7>
c00278e3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00278e7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00278eb:	d9 e8                	fld1   
c00278ed:	dd 1c 24             	fstp   QWORD PTR [esp]
c00278f0:	e8 57 f4 ff ff       	call   c0026d4c <ldexp>
c00278f5:	85 ff                	test   edi,edi
c00278f7:	0f 88 d2 03 00 00    	js     c0027ccf <__kernel_rem_pio2+0x99f>
c00278fd:	8d b4 24 e0 01 00 00 	lea    esi,[esp+0x1e0]
c0027904:	89 f8                	mov    eax,edi
c0027906:	8d 76 00             	lea    esi,[esi+0x0]
c0027909:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0027910:	db 44 84 50          	fild   DWORD PTR [esp+eax*4+0x50]
c0027914:	d8 c9                	fmul   st,st(1)
c0027916:	dd 1c c6             	fstp   QWORD PTR [esi+eax*8]
c0027919:	48                   	dec    eax
c002791a:	d8 0d 9c f4 02 c0    	fmul   DWORD PTR ds:0xc002f49c
c0027920:	83 f8 ff             	cmp    eax,0xffffffff
c0027923:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0027927:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c002792b:	75 e3                	jne    c0027910 <__kernel_rem_pio2+0x5e0>
c002792d:	dd d8                	fstp   st(0)
c002792f:	8d 04 fd 00 00 00 00 	lea    eax,[edi*8+0x0]
c0027936:	31 d2                	xor    edx,edx
c0027938:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c002793c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0027940:	8d 8c 24 40 01 00 00 	lea    ecx,[esp+0x140]
c0027947:	01 f0                	add    eax,esi
c0027949:	89 6c 24 20          	mov    DWORD PTR [esp+0x20],ebp
c002794d:	eb 03                	jmp    c0027952 <__kernel_rem_pio2+0x622>
c002794f:	90                   	nop
c0027950:	89 e8                	mov    eax,ebp
c0027952:	85 db                	test   ebx,ebx
c0027954:	0f 88 84 02 00 00    	js     c0027bde <__kernel_rem_pio2+0x8ae>
c002795a:	d9 05 bc f4 02 c0    	fld    DWORD PTR ds:0xc002f4bc
c0027960:	dc 08                	fmul   QWORD PTR [eax]
c0027962:	d8 05 98 f4 02 c0    	fadd   DWORD PTR ds:0xc002f498
c0027968:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c002796c:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0027970:	0f 84 d9 00 00 00    	je     c0027a4f <__kernel_rem_pio2+0x71f>
c0027976:	85 d2                	test   edx,edx
c0027978:	0f 84 d1 00 00 00    	je     c0027a4f <__kernel_rem_pio2+0x71f>
c002797e:	d9 05 a8 f4 02 c0    	fld    DWORD PTR ds:0xc002f4a8
c0027984:	83 fb 01             	cmp    ebx,0x1
c0027987:	dc 48 08             	fmul   QWORD PTR [eax+0x8]
c002798a:	de c1                	faddp  st(1),st
c002798c:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0027990:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0027994:	0f 84 b5 00 00 00    	je     c0027a4f <__kernel_rem_pio2+0x71f>
c002799a:	83 fa 01             	cmp    edx,0x1
c002799d:	0f 84 ac 00 00 00    	je     c0027a4f <__kernel_rem_pio2+0x71f>
c00279a3:	d9 05 ac f4 02 c0    	fld    DWORD PTR ds:0xc002f4ac
c00279a9:	83 fb 02             	cmp    ebx,0x2
c00279ac:	dc 48 10             	fmul   QWORD PTR [eax+0x10]
c00279af:	de c1                	faddp  st(1),st
c00279b1:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c00279b5:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c00279b9:	0f 84 90 00 00 00    	je     c0027a4f <__kernel_rem_pio2+0x71f>
c00279bf:	83 fa 02             	cmp    edx,0x2
c00279c2:	0f 84 87 00 00 00    	je     c0027a4f <__kernel_rem_pio2+0x71f>
c00279c8:	d9 05 b0 f4 02 c0    	fld    DWORD PTR ds:0xc002f4b0
c00279ce:	83 fb 03             	cmp    ebx,0x3
c00279d1:	dc 48 18             	fmul   QWORD PTR [eax+0x18]
c00279d4:	de c1                	faddp  st(1),st
c00279d6:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c00279da:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c00279de:	74 6f                	je     c0027a4f <__kernel_rem_pio2+0x71f>
c00279e0:	83 fa 03             	cmp    edx,0x3
c00279e3:	74 6a                	je     c0027a4f <__kernel_rem_pio2+0x71f>
c00279e5:	d9 05 b4 f4 02 c0    	fld    DWORD PTR ds:0xc002f4b4
c00279eb:	83 fb 04             	cmp    ebx,0x4
c00279ee:	dc 48 20             	fmul   QWORD PTR [eax+0x20]
c00279f1:	de c1                	faddp  st(1),st
c00279f3:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c00279f7:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c00279fb:	74 52                	je     c0027a4f <__kernel_rem_pio2+0x71f>
c00279fd:	83 fa 04             	cmp    edx,0x4
c0027a00:	74 4d                	je     c0027a4f <__kernel_rem_pio2+0x71f>
c0027a02:	d9 05 b8 f4 02 c0    	fld    DWORD PTR ds:0xc002f4b8
c0027a08:	83 fb 05             	cmp    ebx,0x5
c0027a0b:	dc 48 28             	fmul   QWORD PTR [eax+0x28]
c0027a0e:	de c1                	faddp  st(1),st
c0027a10:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0027a14:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0027a18:	74 35                	je     c0027a4f <__kernel_rem_pio2+0x71f>
c0027a1a:	83 fa 05             	cmp    edx,0x5
c0027a1d:	74 30                	je     c0027a4f <__kernel_rem_pio2+0x71f>
c0027a1f:	dd 05 c0 f4 02 c0    	fld    QWORD PTR ds:0xc002f4c0
c0027a25:	83 fb 06             	cmp    ebx,0x6
c0027a28:	dc 48 30             	fmul   QWORD PTR [eax+0x30]
c0027a2b:	de c1                	faddp  st(1),st
c0027a2d:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0027a31:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0027a35:	74 18                	je     c0027a4f <__kernel_rem_pio2+0x71f>
c0027a37:	83 fa 06             	cmp    edx,0x6
c0027a3a:	74 13                	je     c0027a4f <__kernel_rem_pio2+0x71f>
c0027a3c:	dd 05 c8 f4 02 c0    	fld    QWORD PTR ds:0xc002f4c8
c0027a42:	dc 48 38             	fmul   QWORD PTR [eax+0x38]
c0027a45:	de c1                	faddp  st(1),st
c0027a47:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0027a4b:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0027a4f:	dd 1c d1             	fstp   QWORD PTR [ecx+edx*8]
c0027a52:	42                   	inc    edx
c0027a53:	8d 68 f8             	lea    ebp,[eax-0x8]
c0027a56:	39 c6                	cmp    esi,eax
c0027a58:	0f 85 f2 fe ff ff    	jne    c0027950 <__kernel_rem_pio2+0x620>
c0027a5e:	83 bc 24 b0 02 00 00 02 	cmp    DWORD PTR [esp+0x2b0],0x2
c0027a66:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0027a6a:	7f 4f                	jg     c0027abb <__kernel_rem_pio2+0x78b>
c0027a6c:	8b 84 24 b0 02 00 00 	mov    eax,DWORD PTR [esp+0x2b0]
c0027a73:	85 c0                	test   eax,eax
c0027a75:	0f 8f 71 01 00 00    	jg     c0027bec <__kernel_rem_pio2+0x8bc>
c0027a7b:	75 2c                	jne    c0027aa9 <__kernel_rem_pio2+0x779>
c0027a7d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0027a81:	d9 ee                	fldz   
c0027a83:	01 c8                	add    eax,ecx
c0027a85:	eb 02                	jmp    c0027a89 <__kernel_rem_pio2+0x759>
c0027a87:	89 d0                	mov    eax,edx
c0027a89:	39 c8                	cmp    eax,ecx
c0027a8b:	dc 00                	fadd   QWORD PTR [eax]
c0027a8d:	8d 50 f8             	lea    edx,[eax-0x8]
c0027a90:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0027a94:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0027a98:	75 ed                	jne    c0027a87 <__kernel_rem_pio2+0x757>
c0027a9a:	85 ed                	test   ebp,ebp
c0027a9c:	74 02                	je     c0027aa0 <__kernel_rem_pio2+0x770>
c0027a9e:	d9 e0                	fchs   
c0027aa0:	8b 84 24 a4 02 00 00 	mov    eax,DWORD PTR [esp+0x2a4]
c0027aa7:	dd 18                	fstp   QWORD PTR [eax]
c0027aa9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027aad:	81 c4 8c 02 00 00    	add    esp,0x28c
c0027ab3:	5b                   	pop    ebx
c0027ab4:	5e                   	pop    esi
c0027ab5:	83 e0 07             	and    eax,0x7
c0027ab8:	5f                   	pop    edi
c0027ab9:	5d                   	pop    ebp
c0027aba:	c3                   	ret    
c0027abb:	83 bc 24 b0 02 00 00 03 	cmp    DWORD PTR [esp+0x2b0],0x3
c0027ac3:	75 e4                	jne    c0027aa9 <__kernel_rem_pio2+0x779>
c0027ac5:	85 ff                	test   edi,edi
c0027ac7:	0f 8e 38 02 00 00    	jle    c0027d05 <__kernel_rem_pio2+0x9d5>
c0027acd:	8d 14 fd 00 00 00 00 	lea    edx,[edi*8+0x0]
c0027ad4:	8d 8c 24 40 01 00 00 	lea    ecx,[esp+0x140]
c0027adb:	dd 84 14 40 01 00 00 	fld    QWORD PTR [esp+edx*1+0x140]
c0027ae2:	8d 44 11 f8          	lea    eax,[ecx+edx*1-0x8]
c0027ae6:	eb 02                	jmp    c0027aea <__kernel_rem_pio2+0x7ba>
c0027ae8:	89 d0                	mov    eax,edx
c0027aea:	dd 00                	fld    QWORD PTR [eax]
c0027aec:	8d 50 f8             	lea    edx,[eax-0x8]
c0027aef:	39 c1                	cmp    ecx,eax
c0027af1:	d9 c1                	fld    st(1)
c0027af3:	d9 c1                	fld    st(1)
c0027af5:	de c3                	faddp  st(3),st
c0027af7:	d9 ca                	fxch   st(2)
c0027af9:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0027afd:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0027b01:	d9 c0                	fld    st(0)
c0027b03:	dc ea                	fsub   st(2),st
c0027b05:	d9 ca                	fxch   st(2)
c0027b07:	de c3                	faddp  st(3),st
c0027b09:	d9 ca                	fxch   st(2)
c0027b0b:	dd 58 08             	fstp   QWORD PTR [eax+0x8]
c0027b0e:	d9 c9                	fxch   st(1)
c0027b10:	dd 18                	fstp   QWORD PTR [eax]
c0027b12:	75 d4                	jne    c0027ae8 <__kernel_rem_pio2+0x7b8>
c0027b14:	dd d8                	fstp   st(0)
c0027b16:	83 ff 01             	cmp    edi,0x1
c0027b19:	0f 8e e6 01 00 00    	jle    c0027d05 <__kernel_rem_pio2+0x9d5>
c0027b1f:	c1 e7 03             	shl    edi,0x3
c0027b22:	8d 44 39 f8          	lea    eax,[ecx+edi*1-0x8]
c0027b26:	dd 84 3c 40 01 00 00 	fld    QWORD PTR [esp+edi*1+0x140]
c0027b2d:	eb 02                	jmp    c0027b31 <__kernel_rem_pio2+0x801>
c0027b2f:	89 d0                	mov    eax,edx
c0027b31:	dd 00                	fld    QWORD PTR [eax]
c0027b33:	8d 50 f8             	lea    edx,[eax-0x8]
c0027b36:	d9 c1                	fld    st(1)
c0027b38:	39 d1                	cmp    ecx,edx
c0027b3a:	d9 c1                	fld    st(1)
c0027b3c:	de c3                	faddp  st(3),st
c0027b3e:	d9 ca                	fxch   st(2)
c0027b40:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0027b44:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0027b48:	d9 c0                	fld    st(0)
c0027b4a:	dc ea                	fsub   st(2),st
c0027b4c:	d9 ca                	fxch   st(2)
c0027b4e:	de c3                	faddp  st(3),st
c0027b50:	d9 ca                	fxch   st(2)
c0027b52:	dd 58 08             	fstp   QWORD PTR [eax+0x8]
c0027b55:	d9 c9                	fxch   st(1)
c0027b57:	dd 18                	fstp   QWORD PTR [eax]
c0027b59:	75 d4                	jne    c0027b2f <__kernel_rem_pio2+0x7ff>
c0027b5b:	dd d8                	fstp   st(0)
c0027b5d:	d9 ee                	fldz   
c0027b5f:	01 f9                	add    ecx,edi
c0027b61:	83 e9 08             	sub    ecx,0x8
c0027b64:	dc 41 08             	fadd   QWORD PTR [ecx+0x8]
c0027b67:	39 c8                	cmp    eax,ecx
c0027b69:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0027b6d:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0027b71:	75 ee                	jne    c0027b61 <__kernel_rem_pio2+0x831>
c0027b73:	dd 84 24 40 01 00 00 	fld    QWORD PTR [esp+0x140]
c0027b7a:	85 ed                	test   ebp,ebp
c0027b7c:	dd 84 24 48 01 00 00 	fld    QWORD PTR [esp+0x148]
c0027b83:	0f 85 02 01 00 00    	jne    c0027c8b <__kernel_rem_pio2+0x95b>
c0027b89:	d9 c9                	fxch   st(1)
c0027b8b:	8b 84 24 a4 02 00 00 	mov    eax,DWORD PTR [esp+0x2a4]
c0027b92:	dd 18                	fstp   QWORD PTR [eax]
c0027b94:	dd 58 08             	fstp   QWORD PTR [eax+0x8]
c0027b97:	dd 58 10             	fstp   QWORD PTR [eax+0x10]
c0027b9a:	e9 0a ff ff ff       	jmp    c0027aa9 <__kernel_rem_pio2+0x779>
c0027b9f:	81 64 b4 4c ff ff 7f 00 	and    DWORD PTR [esp+esi*4+0x4c],0x7fffff
c0027ba7:	e9 af fb ff ff       	jmp    c002775b <__kernel_rem_pio2+0x42b>
c0027bac:	31 d2                	xor    edx,edx
c0027bae:	b8 e8 ff ff ff       	mov    eax,0xffffffe8
c0027bb3:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0027bb7:	e9 d3 f7 ff ff       	jmp    c002738f <__kernel_rem_pio2+0x5f>
c0027bbc:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0027bc0:	85 f6                	test   esi,esi
c0027bc2:	bd 02 00 00 00       	mov    ebp,0x2
c0027bc7:	0f 8f 45 fb ff ff    	jg     c0027712 <__kernel_rem_pio2+0x3e2>
c0027bcd:	d9 e8                	fld1   
c0027bcf:	de e1                	fsubrp st(1),st
c0027bd1:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0027bd5:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0027bd9:	e9 1a fa ff ff       	jmp    c00275f8 <__kernel_rem_pio2+0x2c8>
c0027bde:	d9 ee                	fldz   
c0027be0:	e9 6a fe ff ff       	jmp    c0027a4f <__kernel_rem_pio2+0x71f>
c0027be5:	31 d2                	xor    edx,edx
c0027be7:	e9 51 fb ff ff       	jmp    c002773d <__kernel_rem_pio2+0x40d>
c0027bec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0027bf0:	d9 ee                	fldz   
c0027bf2:	01 c8                	add    eax,ecx
c0027bf4:	eb 02                	jmp    c0027bf8 <__kernel_rem_pio2+0x8c8>
c0027bf6:	89 d0                	mov    eax,edx
c0027bf8:	39 c8                	cmp    eax,ecx
c0027bfa:	dc 00                	fadd   QWORD PTR [eax]
c0027bfc:	8d 50 f8             	lea    edx,[eax-0x8]
c0027bff:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0027c03:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0027c07:	75 ed                	jne    c0027bf6 <__kernel_rem_pio2+0x8c6>
c0027c09:	d9 c0                	fld    st(0)
c0027c0b:	85 ed                	test   ebp,ebp
c0027c0d:	0f 85 94 00 00 00    	jne    c0027ca7 <__kernel_rem_pio2+0x977>
c0027c13:	d9 c9                	fxch   st(1)
c0027c15:	8b 84 24 a4 02 00 00 	mov    eax,DWORD PTR [esp+0x2a4]
c0027c1c:	85 ff                	test   edi,edi
c0027c1e:	dd 18                	fstp   QWORD PTR [eax]
c0027c20:	dc ac 24 40 01 00 00 	fsubr  QWORD PTR [esp+0x140]
c0027c27:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0027c2b:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0027c2f:	7e 22                	jle    c0027c53 <__kernel_rem_pio2+0x923>
c0027c31:	8d 84 24 48 01 00 00 	lea    eax,[esp+0x148]
c0027c38:	8d 14 f8             	lea    edx,[eax+edi*8]
c0027c3b:	83 c0 08             	add    eax,0x8
c0027c3e:	dc 40 f8             	fadd   QWORD PTR [eax-0x8]
c0027c41:	39 d0                	cmp    eax,edx
c0027c43:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0027c47:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0027c4b:	75 ee                	jne    c0027c3b <__kernel_rem_pio2+0x90b>
c0027c4d:	85 ed                	test   ebp,ebp
c0027c4f:	74 02                	je     c0027c53 <__kernel_rem_pio2+0x923>
c0027c51:	d9 e0                	fchs   
c0027c53:	8b 84 24 a4 02 00 00 	mov    eax,DWORD PTR [esp+0x2a4]
c0027c5a:	dd 58 08             	fstp   QWORD PTR [eax+0x8]
c0027c5d:	e9 47 fe ff ff       	jmp    c0027aa9 <__kernel_rem_pio2+0x779>
c0027c62:	d9 7c 24 46          	fnstcw WORD PTR [esp+0x46]
c0027c66:	89 f7                	mov    edi,esi
c0027c68:	0f b7 44 24 46       	movzx  eax,WORD PTR [esp+0x46]
c0027c6d:	66 0d 00 0c          	or     ax,0xc00
c0027c71:	66 89 44 24 44       	mov    WORD PTR [esp+0x44],ax
c0027c76:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0027c7a:	d9 6c 24 44          	fldcw  WORD PTR [esp+0x44]
c0027c7e:	db 5c b4 50          	fistp  DWORD PTR [esp+esi*4+0x50]
c0027c82:	d9 6c 24 46          	fldcw  WORD PTR [esp+0x46]
c0027c86:	e9 5c fc ff ff       	jmp    c00278e7 <__kernel_rem_pio2+0x5b7>
c0027c8b:	d9 c9                	fxch   st(1)
c0027c8d:	8b 84 24 a4 02 00 00 	mov    eax,DWORD PTR [esp+0x2a4]
c0027c94:	d9 e0                	fchs   
c0027c96:	dd 18                	fstp   QWORD PTR [eax]
c0027c98:	d9 e0                	fchs   
c0027c9a:	dd 58 08             	fstp   QWORD PTR [eax+0x8]
c0027c9d:	d9 e0                	fchs   
c0027c9f:	dd 58 10             	fstp   QWORD PTR [eax+0x10]
c0027ca2:	e9 02 fe ff ff       	jmp    c0027aa9 <__kernel_rem_pio2+0x779>
c0027ca7:	d9 c9                	fxch   st(1)
c0027ca9:	8b 84 24 a4 02 00 00 	mov    eax,DWORD PTR [esp+0x2a4]
c0027cb0:	d9 e0                	fchs   
c0027cb2:	85 ff                	test   edi,edi
c0027cb4:	dd 18                	fstp   QWORD PTR [eax]
c0027cb6:	dc ac 24 40 01 00 00 	fsubr  QWORD PTR [esp+0x140]
c0027cbd:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0027cc1:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0027cc5:	0f 8f 66 ff ff ff    	jg     c0027c31 <__kernel_rem_pio2+0x901>
c0027ccb:	d9 e0                	fchs   
c0027ccd:	eb 84                	jmp    c0027c53 <__kernel_rem_pio2+0x923>
c0027ccf:	dd d8                	fstp   st(0)
c0027cd1:	83 bc 24 b0 02 00 00 02 	cmp    DWORD PTR [esp+0x2b0],0x2
c0027cd9:	0f 8f dc fd ff ff    	jg     c0027abb <__kernel_rem_pio2+0x78b>
c0027cdf:	8b 94 24 b0 02 00 00 	mov    edx,DWORD PTR [esp+0x2b0]
c0027ce6:	85 d2                	test   edx,edx
c0027ce8:	7f 0d                	jg     c0027cf7 <__kernel_rem_pio2+0x9c7>
c0027cea:	0f 85 b9 fd ff ff    	jne    c0027aa9 <__kernel_rem_pio2+0x779>
c0027cf0:	d9 ee                	fldz   
c0027cf2:	e9 a3 fd ff ff       	jmp    c0027a9a <__kernel_rem_pio2+0x76a>
c0027cf7:	d9 ee                	fldz   
c0027cf9:	d9 ee                	fldz   
c0027cfb:	90                   	nop
c0027cfc:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0027d00:	e9 06 ff ff ff       	jmp    c0027c0b <__kernel_rem_pio2+0x8db>
c0027d05:	d9 ee                	fldz   
c0027d07:	e9 67 fe ff ff       	jmp    c0027b73 <__kernel_rem_pio2+0x843>
c0027d0c:	66 90                	xchg   ax,ax
c0027d0e:	66 90                	xchg   ax,ax

c0027d10 <__kernel_sin>:
c0027d10:	83 ec 0c             	sub    esp,0xc
c0027d13:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0027d17:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0027d1b:	d9 c0                	fld    st(0)
c0027d1d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0027d21:	d8 c9                	fmul   st,st(1)
c0027d23:	85 c0                	test   eax,eax
c0027d25:	dd 1c 24             	fstp   QWORD PTR [esp]
c0027d28:	dd 04 24             	fld    QWORD PTR [esp]
c0027d2b:	d9 c1                	fld    st(1)
c0027d2d:	d8 c9                	fmul   st,st(1)
c0027d2f:	dd 1c 24             	fstp   QWORD PTR [esp]
c0027d32:	dd 04 24             	fld    QWORD PTR [esp]
c0027d35:	d9 c1                	fld    st(1)
c0027d37:	d8 ca                	fmul   st,st(2)
c0027d39:	dd 1c 24             	fstp   QWORD PTR [esp]
c0027d3c:	dd 04 24             	fld    QWORD PTR [esp]
c0027d3f:	d8 ca                	fmul   st,st(2)
c0027d41:	d9 c2                	fld    st(2)
c0027d43:	dc 0d d0 f4 02 c0    	fmul   QWORD PTR ds:0xc002f4d0
c0027d49:	dc 25 d8 f4 02 c0    	fsub   QWORD PTR ds:0xc002f4d8
c0027d4f:	de c9                	fmulp  st(1),st
c0027d51:	d9 c2                	fld    st(2)
c0027d53:	dc 0d e0 f4 02 c0    	fmul   QWORD PTR ds:0xc002f4e0
c0027d59:	dc 25 e8 f4 02 c0    	fsub   QWORD PTR ds:0xc002f4e8
c0027d5f:	d8 cb                	fmul   st,st(3)
c0027d61:	dc 05 f0 f4 02 c0    	fadd   QWORD PTR ds:0xc002f4f0
c0027d67:	de c1                	faddp  st(1),st
c0027d69:	dd 1c 24             	fstp   QWORD PTR [esp]
c0027d6c:	dd 04 24             	fld    QWORD PTR [esp]
c0027d6f:	75 2f                	jne    c0027da0 <__kernel_sin+0x90>
c0027d71:	dd dc                	fstp   st(4)
c0027d73:	d9 c9                	fxch   st(1)
c0027d75:	d9 ca                	fxch   st(2)
c0027d77:	d9 cb                	fxch   st(3)
c0027d79:	de ca                	fmulp  st(2),st
c0027d7b:	d9 c9                	fxch   st(1)
c0027d7d:	dc 25 f8 f4 02 c0    	fsub   QWORD PTR ds:0xc002f4f8
c0027d83:	de c9                	fmulp  st(1),st
c0027d85:	de c1                	faddp  st(1),st
c0027d87:	dd 1c 24             	fstp   QWORD PTR [esp]
c0027d8a:	dd 04 24             	fld    QWORD PTR [esp]
c0027d8d:	83 c4 0c             	add    esp,0xc
c0027d90:	c3                   	ret    
c0027d91:	eb 0d                	jmp    c0027da0 <__kernel_sin+0x90>
c0027d93:	90                   	nop
c0027d94:	90                   	nop
c0027d95:	90                   	nop
c0027d96:	90                   	nop
c0027d97:	90                   	nop
c0027d98:	90                   	nop
c0027d99:	90                   	nop
c0027d9a:	90                   	nop
c0027d9b:	90                   	nop
c0027d9c:	90                   	nop
c0027d9d:	90                   	nop
c0027d9e:	90                   	nop
c0027d9f:	90                   	nop
c0027da0:	d9 c4                	fld    st(4)
c0027da2:	d8 0d 5c e6 02 c0    	fmul   DWORD PTR ds:0xc002e65c
c0027da8:	d9 c9                	fxch   st(1)
c0027daa:	d8 ca                	fmul   st,st(2)
c0027dac:	de e9                	fsubp  st(1),st
c0027dae:	de ca                	fmulp  st(2),st
c0027db0:	d9 c9                	fxch   st(1)
c0027db2:	de e3                	fsubrp st(3),st
c0027db4:	dc 0d f8 f4 02 c0    	fmul   QWORD PTR ds:0xc002f4f8
c0027dba:	de c2                	faddp  st(2),st
c0027dbc:	de e1                	fsubrp st(1),st
c0027dbe:	dd 1c 24             	fstp   QWORD PTR [esp]
c0027dc1:	dd 04 24             	fld    QWORD PTR [esp]
c0027dc4:	83 c4 0c             	add    esp,0xc
c0027dc7:	c3                   	ret    

Disassembly of section .init:

c0027dc8 <_init>:
c0027dc8:	55                   	push   ebp
c0027dc9:	89 e5                	mov    ebp,esp
c0027dcb:	e8 24 83 fd ff       	call   c00000f4 <frame_dummy>
c0027dd0:	e8 0b c2 ff ff       	call   c0023fe0 <__do_global_ctors_aux>
c0027dd5:	5d                   	pop    ebp
c0027dd6:	c3                   	ret    

Disassembly of section .fini:

c0027dd7 <_fini>:
c0027dd7:	55                   	push   ebp
c0027dd8:	89 e5                	mov    ebp,esp
c0027dda:	e8 a5 82 fd ff       	call   c0000084 <__do_global_dtors_aux>
c0027ddf:	5d                   	pop    ebp
c0027de0:	c3                   	ret    

Disassembly of section .text._ZN12RootHardware10_getDriverEv:

c0027de4 <RootHardware::_getDriver()>:
c0027de4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027de8:	8b 80 88 00 00 00    	mov    eax,DWORD PTR [eax+0x88]
c0027dee:	c3                   	ret    

Disassembly of section .text._ZN12RootHardware7getTypeEv:

c0027df0 <RootHardware::getType()>:
c0027df0:	b8 04 00 00 00       	mov    eax,0x4
c0027df5:	c3                   	ret    

Disassembly of section .text._ZN6DriverC2Ev:

c0027df8 <Driver::Driver()>:
c0027df8:	ba fc a5 02 c0       	mov    edx,0xc002a5fc
c0027dfd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027e01:	89 10                	mov    DWORD PTR [eax],edx
c0027e03:	90                   	nop
c0027e04:	c3                   	ret    

Disassembly of section .text._ZN10RootDriverC2Ev:

c0027e08 <RootDriver::RootDriver()>:
c0027e08:	83 ec 0c             	sub    esp,0xc
c0027e0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027e0f:	83 ec 0c             	sub    esp,0xc
c0027e12:	50                   	push   eax
c0027e13:	e8 e0 ff ff ff       	call   c0027df8 <Driver::Driver()>
c0027e18:	83 c4 10             	add    esp,0x10
c0027e1b:	ba 94 a6 02 c0       	mov    edx,0xc002a694
c0027e20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027e24:	89 10                	mov    DWORD PTR [eax],edx
c0027e26:	90                   	nop
c0027e27:	83 c4 0c             	add    esp,0xc
c0027e2a:	c3                   	ret    

Disassembly of section .text._ZNSt6vectorIP8HardwareE8iteratorD2Ev:

c0027e2c <std::vector<Hardware*>::iterator::~iterator()>:
c0027e2c:	90                   	nop
c0027e2d:	c3                   	ret    

Disassembly of section .text._ZNSt6vectorIP8HardwareE8iteratorC2ERKS3_:

c0027e30 <std::vector<Hardware*>::iterator::iterator(std::vector<Hardware*>::iterator const&)>:
c0027e30:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0027e34:	8b 10                	mov    edx,DWORD PTR [eax]
c0027e36:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027e3a:	89 10                	mov    DWORD PTR [eax],edx
c0027e3c:	90                   	nop
c0027e3d:	c3                   	ret    

Disassembly of section .text._ZNKSt6vectorIP8HardwareE8iteratorneERKS3_:

c0027e40 <std::vector<Hardware*>::iterator::operator!=(std::vector<Hardware*>::iterator const&) const>:
c0027e40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027e44:	8b 10                	mov    edx,DWORD PTR [eax]
c0027e46:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0027e4a:	8b 00                	mov    eax,DWORD PTR [eax]
c0027e4c:	39 c2                	cmp    edx,eax
c0027e4e:	0f 95 c0             	setne  al
c0027e51:	c3                   	ret    

Disassembly of section .text._ZNKSt6vectorIP8HardwareE8iteratordeEv:

c0027e54 <std::vector<Hardware*>::iterator::operator*() const>:
c0027e54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027e58:	8b 00                	mov    eax,DWORD PTR [eax]
c0027e5a:	c3                   	ret    

Disassembly of section .text._ZNSt6vectorI17DeviceMemoryRangeED2Ev:

c0027e5c <std::vector<DeviceMemoryRange>::~vector()>:
c0027e5c:	83 ec 0c             	sub    esp,0xc
c0027e5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027e63:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027e66:	85 c0                	test   eax,eax
c0027e68:	74 1e                	je     c0027e88 <std::vector<DeviceMemoryRange>::~vector()+0x2c>
c0027e6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027e6e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027e71:	85 c0                	test   eax,eax
c0027e73:	74 13                	je     c0027e88 <std::vector<DeviceMemoryRange>::~vector()+0x2c>
c0027e75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027e79:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027e7c:	83 ec 0c             	sub    esp,0xc
c0027e7f:	50                   	push   eax
c0027e80:	e8 8c 5e fe ff       	call   c000dd11 <operator delete[](void*)>
c0027e85:	83 c4 10             	add    esp,0x10
c0027e88:	90                   	nop
c0027e89:	83 c4 0c             	add    esp,0xc
c0027e8c:	c3                   	ret    

Disassembly of section .text._ZNSt6vectorI15DevicePortRangeED2Ev:

c0027e90 <std::vector<DevicePortRange>::~vector()>:
c0027e90:	83 ec 0c             	sub    esp,0xc
c0027e93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027e97:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027e9a:	85 c0                	test   eax,eax
c0027e9c:	74 1e                	je     c0027ebc <std::vector<DevicePortRange>::~vector()+0x2c>
c0027e9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027ea2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027ea5:	85 c0                	test   eax,eax
c0027ea7:	74 13                	je     c0027ebc <std::vector<DevicePortRange>::~vector()+0x2c>
c0027ea9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027ead:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027eb0:	83 ec 0c             	sub    esp,0xc
c0027eb3:	50                   	push   eax
c0027eb4:	e8 58 5e fe ff       	call   c000dd11 <operator delete[](void*)>
c0027eb9:	83 c4 10             	add    esp,0x10
c0027ebc:	90                   	nop
c0027ebd:	83 c4 0c             	add    esp,0xc
c0027ec0:	c3                   	ret    

Disassembly of section .text._ZNSt6vectorIP8HardwareED2Ev:

c0027ec4 <std::vector<Hardware*>::~vector()>:
c0027ec4:	83 ec 0c             	sub    esp,0xc
c0027ec7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027ecb:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027ece:	85 c0                	test   eax,eax
c0027ed0:	74 1e                	je     c0027ef0 <std::vector<Hardware*>::~vector()+0x2c>
c0027ed2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027ed6:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027ed9:	85 c0                	test   eax,eax
c0027edb:	74 13                	je     c0027ef0 <std::vector<Hardware*>::~vector()+0x2c>
c0027edd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027ee1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027ee4:	83 ec 0c             	sub    esp,0xc
c0027ee7:	50                   	push   eax
c0027ee8:	e8 24 5e fe ff       	call   c000dd11 <operator delete[](void*)>
c0027eed:	83 c4 10             	add    esp,0x10
c0027ef0:	90                   	nop
c0027ef1:	83 c4 0c             	add    esp,0xc
c0027ef4:	c3                   	ret    

Disassembly of section .text._ZN12RootHardwareD2Ev:

c0027ef8 <RootHardware::~RootHardware()>:
c0027ef8:	83 ec 0c             	sub    esp,0xc
c0027efb:	ba 18 a6 02 c0       	mov    edx,0xc002a618
c0027f00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027f04:	89 10                	mov    DWORD PTR [eax],edx
c0027f06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027f0a:	83 ec 0c             	sub    esp,0xc
c0027f0d:	50                   	push   eax
c0027f0e:	e8 49 f5 fd ff       	call   c000745c <Hardware::~Hardware()>
c0027f13:	83 c4 10             	add    esp,0x10
c0027f16:	90                   	nop
c0027f17:	83 c4 0c             	add    esp,0xc
c0027f1a:	c3                   	ret    

Disassembly of section .text._ZN12RootHardwareD0Ev:

c0027f1c <RootHardware::~RootHardware()>:
c0027f1c:	83 ec 0c             	sub    esp,0xc
c0027f1f:	83 ec 0c             	sub    esp,0xc
c0027f22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027f26:	e8 cd ff ff ff       	call   c0027ef8 <RootHardware::~RootHardware()>
c0027f2b:	83 c4 10             	add    esp,0x10
c0027f2e:	83 ec 08             	sub    esp,0x8
c0027f31:	68 8c 00 00 00       	push   0x8c
c0027f36:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027f3a:	e8 cd 5d fe ff       	call   c000dd0c <operator delete(void*, unsigned long)>
c0027f3f:	83 c4 10             	add    esp,0x10
c0027f42:	83 c4 0c             	add    esp,0xc
c0027f45:	c3                   	ret    

Disassembly of section .text._ZNSt6vectorI17DeviceMemoryRangeEC2Ev:

c0027f48 <std::vector<DeviceMemoryRange>::vector()>:
c0027f48:	83 ec 1c             	sub    esp,0x1c
c0027f4b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0027f4f:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0027f56:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c0027f5e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0027f62:	3d ff ff ff 0f       	cmp    eax,0xfffffff
c0027f67:	77 07                	ja     c0027f70 <std::vector<DeviceMemoryRange>::vector()+0x28>
c0027f69:	c1 e0 03             	shl    eax,0x3
c0027f6c:	eb 0a                	jmp    c0027f78 <std::vector<DeviceMemoryRange>::vector()+0x30>
c0027f6e:	66 90                	xchg   ax,ax
c0027f70:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0027f75:	8d 76 00             	lea    esi,[esi+0x0]
c0027f78:	83 ec 0c             	sub    esp,0xc
c0027f7b:	50                   	push   eax
c0027f7c:	e8 86 5d fe ff       	call   c000dd07 <operator new[](unsigned long)>
c0027f81:	83 c4 10             	add    esp,0x10
c0027f84:	89 c2                	mov    edx,eax
c0027f86:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0027f8a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0027f8d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0027f91:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0027f94:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0027f98:	89 10                	mov    DWORD PTR [eax],edx
c0027f9a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0027f9e:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0027fa1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0027fa5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0027fa8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0027fac:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0027fb3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0027fb7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0027fbb:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0027fbe:	90                   	nop
c0027fbf:	83 c4 1c             	add    esp,0x1c
c0027fc2:	c3                   	ret    

Disassembly of section .text._ZNSt6vectorI15DevicePortRangeEC2Ev:

c0027fc4 <std::vector<DevicePortRange>::vector()>:
c0027fc4:	83 ec 1c             	sub    esp,0x1c
c0027fc7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0027fcb:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0027fd2:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c0027fda:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0027fde:	3d ff ff ff 1f       	cmp    eax,0x1fffffff
c0027fe3:	77 07                	ja     c0027fec <std::vector<DevicePortRange>::vector()+0x28>
c0027fe5:	c1 e0 02             	shl    eax,0x2
c0027fe8:	eb 0a                	jmp    c0027ff4 <std::vector<DevicePortRange>::vector()+0x30>
c0027fea:	66 90                	xchg   ax,ax
c0027fec:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0027ff1:	8d 76 00             	lea    esi,[esi+0x0]
c0027ff4:	83 ec 0c             	sub    esp,0xc
c0027ff7:	50                   	push   eax
c0027ff8:	e8 0a 5d fe ff       	call   c000dd07 <operator new[](unsigned long)>
c0027ffd:	83 c4 10             	add    esp,0x10
c0028000:	89 c2                	mov    edx,eax
c0028002:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028006:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028009:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002800d:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0028010:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028014:	89 10                	mov    DWORD PTR [eax],edx
c0028016:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002801a:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c002801d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028021:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028024:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028028:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c002802f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0028033:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028037:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c002803a:	90                   	nop
c002803b:	83 c4 1c             	add    esp,0x1c
c002803e:	c3                   	ret    

Disassembly of section .text._ZNSt6vectorIP8HardwareEC2Ev:

c0028040 <std::vector<Hardware*>::vector()>:
c0028040:	83 ec 1c             	sub    esp,0x1c
c0028043:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028047:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c002804e:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c0028056:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002805a:	3d ff ff ff 1f       	cmp    eax,0x1fffffff
c002805f:	77 07                	ja     c0028068 <std::vector<Hardware*>::vector()+0x28>
c0028061:	c1 e0 02             	shl    eax,0x2
c0028064:	eb 0a                	jmp    c0028070 <std::vector<Hardware*>::vector()+0x30>
c0028066:	66 90                	xchg   ax,ax
c0028068:	b8 ff ff ff ff       	mov    eax,0xffffffff
c002806d:	8d 76 00             	lea    esi,[esi+0x0]
c0028070:	83 ec 0c             	sub    esp,0xc
c0028073:	50                   	push   eax
c0028074:	e8 8e 5c fe ff       	call   c000dd07 <operator new[](unsigned long)>
c0028079:	83 c4 10             	add    esp,0x10
c002807c:	89 c2                	mov    edx,eax
c002807e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028082:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028085:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028089:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c002808c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028090:	89 10                	mov    DWORD PTR [eax],edx
c0028092:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028096:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0028099:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002809d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00280a0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00280a4:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c00280ab:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00280af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00280b3:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00280b6:	90                   	nop
c00280b7:	83 c4 1c             	add    esp,0x1c
c00280ba:	c3                   	ret    

Disassembly of section .text._ZN12RootHardwareC2Ev:

c00280bc <RootHardware::RootHardware()>:
c00280bc:	53                   	push   ebx
c00280bd:	83 ec 18             	sub    esp,0x18
c00280c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00280c4:	83 ec 0c             	sub    esp,0xc
c00280c7:	50                   	push   eax
c00280c8:	e8 07 f4 fd ff       	call   c00074d4 <Hardware::Hardware()>
c00280cd:	83 c4 10             	add    esp,0x10
c00280d0:	ba 18 a6 02 c0       	mov    edx,0xc002a618
c00280d5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00280d9:	89 10                	mov    DWORD PTR [eax],edx
c00280db:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c00280e3:	83 ec 0c             	sub    esp,0xc
c00280e6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00280ea:	e8 1d 80 fe ff       	call   c001010c <malloc>
c00280ef:	83 c4 10             	add    esp,0x10
c00280f2:	89 c3                	mov    ebx,eax
c00280f4:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00280fa:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0028101:	83 ec 0c             	sub    esp,0xc
c0028104:	53                   	push   ebx
c0028105:	e8 fe fc ff ff       	call   c0027e08 <RootDriver::RootDriver()>
c002810a:	83 c4 10             	add    esp,0x10
c002810d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028111:	89 98 88 00 00 00    	mov    DWORD PTR [eax+0x88],ebx
c0028117:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002811b:	8b 80 88 00 00 00    	mov    eax,DWORD PTR [eax+0x88]
c0028121:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0028125:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028128:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002812c:	8b 90 88 00 00 00    	mov    edx,DWORD PTR [eax+0x88]
c0028132:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028136:	8b 80 88 00 00 00    	mov    eax,DWORD PTR [eax+0x88]
c002813c:	8b 00                	mov    eax,DWORD PTR [eax]
c002813e:	83 c0 04             	add    eax,0x4
c0028141:	8b 00                	mov    eax,DWORD PTR [eax]
c0028143:	83 ec 0c             	sub    esp,0xc
c0028146:	52                   	push   edx
c0028147:	ff d0                	call   eax
c0028149:	83 c4 10             	add    esp,0x10
c002814c:	90                   	nop
c002814d:	83 c4 18             	add    esp,0x18
c0028150:	5b                   	pop    ebx
c0028151:	c3                   	ret    

Disassembly of section .text._ZNSt6vectorIP8HardwareE8iteratorC2EPS1_:

c0028154 <std::vector<Hardware*>::iterator::iterator(Hardware**)>:
c0028154:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028158:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002815c:	89 10                	mov    DWORD PTR [eax],edx
c002815e:	90                   	nop
c002815f:	c3                   	ret    

Disassembly of section .text._ZNSt6vectorIP8HardwareE5beginEv:

c0028160 <std::vector<Hardware*>::begin()>:
c0028160:	83 ec 0c             	sub    esp,0xc
c0028163:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0028167:	8b 00                	mov    eax,DWORD PTR [eax]
c0028169:	83 ec 08             	sub    esp,0x8
c002816c:	50                   	push   eax
c002816d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028171:	e8 de ff ff ff       	call   c0028154 <std::vector<Hardware*>::iterator::iterator(Hardware**)>
c0028176:	83 c4 10             	add    esp,0x10
c0028179:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002817d:	83 c4 0c             	add    esp,0xc
c0028180:	c2 04 00             	ret    0x4

Disassembly of section .text._ZNSt6vectorIP8HardwareE3endEv:

c0028184 <std::vector<Hardware*>::end()>:
c0028184:	83 ec 0c             	sub    esp,0xc
c0028187:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002818b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002818e:	83 ec 08             	sub    esp,0x8
c0028191:	50                   	push   eax
c0028192:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028196:	e8 b9 ff ff ff       	call   c0028154 <std::vector<Hardware*>::iterator::iterator(Hardware**)>
c002819b:	83 c4 10             	add    esp,0x10
c002819e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00281a2:	83 c4 0c             	add    esp,0xc
c00281a5:	c2 04 00             	ret    0x4

Disassembly of section .text._ZNSt6vectorIP8HardwareE8iteratorppEv:

c00281a8 <std::vector<Hardware*>::iterator::operator++()>:
c00281a8:	83 ec 0c             	sub    esp,0xc
c00281ab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00281af:	8b 00                	mov    eax,DWORD PTR [eax]
c00281b1:	8d 50 04             	lea    edx,[eax+0x4]
c00281b4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00281b8:	89 10                	mov    DWORD PTR [eax],edx
c00281ba:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00281be:	8b 00                	mov    eax,DWORD PTR [eax]
c00281c0:	83 ec 08             	sub    esp,0x8
c00281c3:	50                   	push   eax
c00281c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00281c8:	e8 87 ff ff ff       	call   c0028154 <std::vector<Hardware*>::iterator::iterator(Hardware**)>
c00281cd:	83 c4 10             	add    esp,0x10
c00281d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00281d4:	83 c4 0c             	add    esp,0xc
c00281d7:	c2 04 00             	ret    0x4

Disassembly of section .text._ZSt4findINSt6vectorIP8HardwareE8iteratorES2_ET_S5_S5_RKT0_:

c00281dc <std::vector<Hardware*>::iterator std::find<std::vector<Hardware*>::iterator, Hardware*>(std::vector<Hardware*>::iterator, std::vector<Hardware*>::iterator, Hardware* const&)>:
c00281dc:	83 ec 1c             	sub    esp,0x1c
c00281df:	90                   	nop
c00281e0:	83 ec 08             	sub    esp,0x8
c00281e3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00281e7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00281eb:	e8 50 fc ff ff       	call   c0027e40 <std::vector<Hardware*>::iterator::operator!=(std::vector<Hardware*>::iterator const&) const>
c00281f0:	83 c4 10             	add    esp,0x10
c00281f3:	0f b6 c0             	movzx  eax,al
c00281f6:	85 c0                	test   eax,eax
c00281f8:	74 62                	je     c002825c <std::vector<Hardware*>::iterator std::find<std::vector<Hardware*>::iterator, Hardware*>(std::vector<Hardware*>::iterator, std::vector<Hardware*>::iterator, Hardware* const&)+0x80>
c00281fa:	83 ec 0c             	sub    esp,0xc
c00281fd:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0028201:	e8 4e fc ff ff       	call   c0027e54 <std::vector<Hardware*>::iterator::operator*() const>
c0028206:	83 c4 10             	add    esp,0x10
c0028209:	8b 10                	mov    edx,DWORD PTR [eax]
c002820b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c002820f:	8b 00                	mov    eax,DWORD PTR [eax]
c0028211:	39 c2                	cmp    edx,eax
c0028213:	0f 94 c0             	sete   al
c0028216:	0f b6 c0             	movzx  eax,al
c0028219:	85 c0                	test   eax,eax
c002821b:	74 17                	je     c0028234 <std::vector<Hardware*>::iterator std::find<std::vector<Hardware*>::iterator, Hardware*>(std::vector<Hardware*>::iterator, std::vector<Hardware*>::iterator, Hardware* const&)+0x58>
c002821d:	83 ec 08             	sub    esp,0x8
c0028220:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0028224:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0028228:	e8 03 fc ff ff       	call   c0027e30 <std::vector<Hardware*>::iterator::iterator(std::vector<Hardware*>::iterator const&)>
c002822d:	83 c4 10             	add    esp,0x10
c0028230:	eb 3e                	jmp    c0028270 <std::vector<Hardware*>::iterator std::find<std::vector<Hardware*>::iterator, Hardware*>(std::vector<Hardware*>::iterator, std::vector<Hardware*>::iterator, Hardware* const&)+0x94>
c0028232:	66 90                	xchg   ax,ax
c0028234:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0028238:	83 ec 08             	sub    esp,0x8
c002823b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002823f:	50                   	push   eax
c0028240:	e8 63 ff ff ff       	call   c00281a8 <std::vector<Hardware*>::iterator::operator++()>
c0028245:	83 c4 0c             	add    esp,0xc
c0028248:	83 ec 0c             	sub    esp,0xc
c002824b:	8d 44 24 18          	lea    eax,[esp+0x18]
c002824f:	50                   	push   eax
c0028250:	e8 d7 fb ff ff       	call   c0027e2c <std::vector<Hardware*>::iterator::~iterator()>
c0028255:	83 c4 10             	add    esp,0x10
c0028258:	eb 86                	jmp    c00281e0 <std::vector<Hardware*>::iterator std::find<std::vector<Hardware*>::iterator, Hardware*>(std::vector<Hardware*>::iterator, std::vector<Hardware*>::iterator, Hardware* const&)+0x4>
c002825a:	66 90                	xchg   ax,ax
c002825c:	83 ec 08             	sub    esp,0x8
c002825f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0028263:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0028267:	e8 c4 fb ff ff       	call   c0027e30 <std::vector<Hardware*>::iterator::iterator(std::vector<Hardware*>::iterator const&)>
c002826c:	83 c4 10             	add    esp,0x10
c002826f:	90                   	nop
c0028270:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028274:	83 c4 1c             	add    esp,0x1c
c0028277:	c2 04 00             	ret    0x4

Disassembly of section .text._ZNSt6vectorIP8HardwareE8iteratoraSERKS3_:

c002827c <std::vector<Hardware*>::iterator::operator=(std::vector<Hardware*>::iterator const&)>:
c002827c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028280:	8b 10                	mov    edx,DWORD PTR [eax]
c0028282:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028286:	89 10                	mov    DWORD PTR [eax],edx
c0028288:	90                   	nop
c0028289:	c3                   	ret    

Disassembly of section .text._ZNSt6vectorIP8HardwareE8iteratorppEi:

c002828c <std::vector<Hardware*>::iterator::operator++(int)>:
c002828c:	83 ec 0c             	sub    esp,0xc
c002828f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0028293:	8b 00                	mov    eax,DWORD PTR [eax]
c0028295:	8d 48 04             	lea    ecx,[eax+0x4]
c0028298:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002829c:	89 0a                	mov    DWORD PTR [edx],ecx
c002829e:	83 ec 08             	sub    esp,0x8
c00282a1:	50                   	push   eax
c00282a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00282a6:	e8 a9 fe ff ff       	call   c0028154 <std::vector<Hardware*>::iterator::iterator(Hardware**)>
c00282ab:	83 c4 10             	add    esp,0x10
c00282ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00282b2:	83 c4 0c             	add    esp,0xc
c00282b5:	c2 04 00             	ret    0x4

Disassembly of section .text._ZSt4moveIRP8HardwareEONSt16remove_referenceIT_E4typeEOS4_:

c00282b8 <std::remove_reference<Hardware*&>::type&& std::move<Hardware*&>(Hardware*&)>:
c00282b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00282bc:	c3                   	ret    

Disassembly of section .text._ZSt6removeINSt6vectorIP8HardwareE8iteratorES2_ET_S5_S5_RKT0_:

c00282c0 <std::vector<Hardware*>::iterator std::remove<std::vector<Hardware*>::iterator, Hardware*>(std::vector<Hardware*>::iterator, std::vector<Hardware*>::iterator, Hardware* const&)>:
c00282c0:	53                   	push   ebx
c00282c1:	83 ec 28             	sub    esp,0x28
c00282c4:	83 ec 08             	sub    esp,0x8
c00282c7:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00282cb:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00282cf:	50                   	push   eax
c00282d0:	e8 5b fb ff ff       	call   c0027e30 <std::vector<Hardware*>::iterator::iterator(std::vector<Hardware*>::iterator const&)>
c00282d5:	83 c4 10             	add    esp,0x10
c00282d8:	83 ec 08             	sub    esp,0x8
c00282db:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00282df:	8d 44 24 20          	lea    eax,[esp+0x20]
c00282e3:	50                   	push   eax
c00282e4:	e8 47 fb ff ff       	call   c0027e30 <std::vector<Hardware*>::iterator::iterator(std::vector<Hardware*>::iterator const&)>
c00282e9:	83 c4 10             	add    esp,0x10
c00282ec:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00282f0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00282f4:	8d 54 24 14          	lea    edx,[esp+0x14]
c00282f8:	52                   	push   edx
c00282f9:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00282fd:	52                   	push   edx
c00282fe:	50                   	push   eax
c00282ff:	e8 d8 fe ff ff       	call   c00281dc <std::vector<Hardware*>::iterator std::find<std::vector<Hardware*>::iterator, Hardware*>(std::vector<Hardware*>::iterator, std::vector<Hardware*>::iterator, Hardware* const&)>
c0028304:	83 c4 0c             	add    esp,0xc
c0028307:	83 ec 08             	sub    esp,0x8
c002830a:	8d 44 24 14          	lea    eax,[esp+0x14]
c002830e:	50                   	push   eax
c002830f:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0028313:	e8 64 ff ff ff       	call   c002827c <std::vector<Hardware*>::iterator::operator=(std::vector<Hardware*>::iterator const&)>
c0028318:	83 c4 10             	add    esp,0x10
c002831b:	83 ec 0c             	sub    esp,0xc
c002831e:	8d 44 24 18          	lea    eax,[esp+0x18]
c0028322:	50                   	push   eax
c0028323:	e8 04 fb ff ff       	call   c0027e2c <std::vector<Hardware*>::iterator::~iterator()>
c0028328:	83 c4 10             	add    esp,0x10
c002832b:	83 ec 0c             	sub    esp,0xc
c002832e:	8d 44 24 20          	lea    eax,[esp+0x20]
c0028332:	50                   	push   eax
c0028333:	e8 f4 fa ff ff       	call   c0027e2c <std::vector<Hardware*>::iterator::~iterator()>
c0028338:	83 c4 10             	add    esp,0x10
c002833b:	83 ec 0c             	sub    esp,0xc
c002833e:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0028342:	50                   	push   eax
c0028343:	e8 e4 fa ff ff       	call   c0027e2c <std::vector<Hardware*>::iterator::~iterator()>
c0028348:	83 c4 10             	add    esp,0x10
c002834b:	83 ec 08             	sub    esp,0x8
c002834e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0028352:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0028356:	e8 e5 fa ff ff       	call   c0027e40 <std::vector<Hardware*>::iterator::operator!=(std::vector<Hardware*>::iterator const&) const>
c002835b:	83 c4 10             	add    esp,0x10
c002835e:	0f b6 c0             	movzx  eax,al
c0028361:	85 c0                	test   eax,eax
c0028363:	0f 84 ef 00 00 00    	je     c0028458 <std::vector<Hardware*>::iterator std::remove<std::vector<Hardware*>::iterator, Hardware*>(std::vector<Hardware*>::iterator, std::vector<Hardware*>::iterator, Hardware* const&)+0x198>
c0028369:	83 ec 08             	sub    esp,0x8
c002836c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0028370:	8d 44 24 14          	lea    eax,[esp+0x14]
c0028374:	50                   	push   eax
c0028375:	e8 b6 fa ff ff       	call   c0027e30 <std::vector<Hardware*>::iterator::iterator(std::vector<Hardware*>::iterator const&)>
c002837a:	83 c4 10             	add    esp,0x10
c002837d:	8d 76 00             	lea    esi,[esi+0x0]
c0028380:	8d 44 24 18          	lea    eax,[esp+0x18]
c0028384:	83 ec 08             	sub    esp,0x8
c0028387:	8d 54 24 10          	lea    edx,[esp+0x10]
c002838b:	52                   	push   edx
c002838c:	50                   	push   eax
c002838d:	e8 16 fe ff ff       	call   c00281a8 <std::vector<Hardware*>::iterator::operator++()>
c0028392:	83 c4 0c             	add    esp,0xc
c0028395:	83 ec 08             	sub    esp,0x8
c0028398:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c002839c:	8d 44 24 24          	lea    eax,[esp+0x24]
c00283a0:	50                   	push   eax
c00283a1:	e8 9a fa ff ff       	call   c0027e40 <std::vector<Hardware*>::iterator::operator!=(std::vector<Hardware*>::iterator const&) const>
c00283a6:	83 c4 10             	add    esp,0x10
c00283a9:	88 c3                	mov    bl,al
c00283ab:	83 ec 0c             	sub    esp,0xc
c00283ae:	8d 44 24 24          	lea    eax,[esp+0x24]
c00283b2:	50                   	push   eax
c00283b3:	e8 74 fa ff ff       	call   c0027e2c <std::vector<Hardware*>::iterator::~iterator()>
c00283b8:	83 c4 10             	add    esp,0x10
c00283bb:	0f b6 c3             	movzx  eax,bl
c00283be:	85 c0                	test   eax,eax
c00283c0:	0f 84 82 00 00 00    	je     c0028448 <std::vector<Hardware*>::iterator std::remove<std::vector<Hardware*>::iterator, Hardware*>(std::vector<Hardware*>::iterator, std::vector<Hardware*>::iterator, Hardware* const&)+0x188>
c00283c6:	83 ec 0c             	sub    esp,0xc
c00283c9:	8d 44 24 14          	lea    eax,[esp+0x14]
c00283cd:	50                   	push   eax
c00283ce:	e8 81 fa ff ff       	call   c0027e54 <std::vector<Hardware*>::iterator::operator*() const>
c00283d3:	83 c4 10             	add    esp,0x10
c00283d6:	8b 10                	mov    edx,DWORD PTR [eax]
c00283d8:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00283dc:	8b 00                	mov    eax,DWORD PTR [eax]
c00283de:	39 c2                	cmp    edx,eax
c00283e0:	0f 95 c0             	setne  al
c00283e3:	0f b6 c0             	movzx  eax,al
c00283e6:	85 c0                	test   eax,eax
c00283e8:	74 96                	je     c0028380 <std::vector<Hardware*>::iterator std::remove<std::vector<Hardware*>::iterator, Hardware*>(std::vector<Hardware*>::iterator, std::vector<Hardware*>::iterator, Hardware* const&)+0xc0>
c00283ea:	83 ec 0c             	sub    esp,0xc
c00283ed:	8d 44 24 14          	lea    eax,[esp+0x14]
c00283f1:	50                   	push   eax
c00283f2:	e8 5d fa ff ff       	call   c0027e54 <std::vector<Hardware*>::iterator::operator*() const>
c00283f7:	83 c4 10             	add    esp,0x10
c00283fa:	83 ec 0c             	sub    esp,0xc
c00283fd:	50                   	push   eax
c00283fe:	e8 b5 fe ff ff       	call   c00282b8 <std::remove_reference<Hardware*&>::type&& std::move<Hardware*&>(Hardware*&)>
c0028403:	83 c4 10             	add    esp,0x10
c0028406:	89 c3                	mov    ebx,eax
c0028408:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002840c:	83 ec 04             	sub    esp,0x4
c002840f:	6a 00                	push   0x0
c0028411:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0028415:	50                   	push   eax
c0028416:	e8 71 fe ff ff       	call   c002828c <std::vector<Hardware*>::iterator::operator++(int)>
c002841b:	83 c4 0c             	add    esp,0xc
c002841e:	83 ec 0c             	sub    esp,0xc
c0028421:	8d 44 24 28          	lea    eax,[esp+0x28]
c0028425:	50                   	push   eax
c0028426:	e8 29 fa ff ff       	call   c0027e54 <std::vector<Hardware*>::iterator::operator*() const>
c002842b:	83 c4 10             	add    esp,0x10
c002842e:	8b 13                	mov    edx,DWORD PTR [ebx]
c0028430:	89 10                	mov    DWORD PTR [eax],edx
c0028432:	83 ec 0c             	sub    esp,0xc
c0028435:	8d 44 24 28          	lea    eax,[esp+0x28]
c0028439:	50                   	push   eax
c002843a:	e8 ed f9 ff ff       	call   c0027e2c <std::vector<Hardware*>::iterator::~iterator()>
c002843f:	83 c4 10             	add    esp,0x10
c0028442:	e9 39 ff ff ff       	jmp    c0028380 <std::vector<Hardware*>::iterator std::remove<std::vector<Hardware*>::iterator, Hardware*>(std::vector<Hardware*>::iterator, std::vector<Hardware*>::iterator, Hardware* const&)+0xc0>
c0028447:	90                   	nop
c0028448:	83 ec 0c             	sub    esp,0xc
c002844b:	8d 44 24 14          	lea    eax,[esp+0x14]
c002844f:	50                   	push   eax
c0028450:	e8 d7 f9 ff ff       	call   c0027e2c <std::vector<Hardware*>::iterator::~iterator()>
c0028455:	83 c4 10             	add    esp,0x10
c0028458:	83 ec 08             	sub    esp,0x8
c002845b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002845f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0028463:	e8 c8 f9 ff ff       	call   c0027e30 <std::vector<Hardware*>::iterator::iterator(std::vector<Hardware*>::iterator const&)>
c0028468:	83 c4 10             	add    esp,0x10
c002846b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002846f:	83 c4 28             	add    esp,0x28
c0028472:	5b                   	pop    ebx
c0028473:	c2 04 00             	ret    0x4

Disassembly of section .text._ZNSt6vectorIP8HardwareE8iteratormiES3_:

c0028478 <std::vector<Hardware*>::iterator::operator-(std::vector<Hardware*>::iterator)>:
c0028478:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002847c:	8b 10                	mov    edx,DWORD PTR [eax]
c002847e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028482:	8b 00                	mov    eax,DWORD PTR [eax]
c0028484:	29 c2                	sub    edx,eax
c0028486:	89 d0                	mov    eax,edx
c0028488:	c1 f8 02             	sar    eax,0x2
c002848b:	c3                   	ret    

Disassembly of section .text._ZSt4copyIPP8HardwareS2_ET0_T_S4_S3_:

c002848c <Hardware** std::copy<Hardware**, Hardware**>(Hardware**, Hardware**, Hardware**)>:
c002848c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028490:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0028494:	74 1a                	je     c00284b0 <Hardware** std::copy<Hardware**, Hardware**>(Hardware**, Hardware**, Hardware**)+0x24>
c0028496:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002849a:	8b 10                	mov    edx,DWORD PTR [eax]
c002849c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00284a0:	89 10                	mov    DWORD PTR [eax],edx
c00284a2:	83 44 24 04 04       	add    DWORD PTR [esp+0x4],0x4
c00284a7:	83 44 24 0c 04       	add    DWORD PTR [esp+0xc],0x4
c00284ac:	eb de                	jmp    c002848c <Hardware** std::copy<Hardware**, Hardware**>(Hardware**, Hardware**, Hardware**)>
c00284ae:	66 90                	xchg   ax,ax
c00284b0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00284b4:	c3                   	ret    

Disassembly of section .text._ZNSt6vectorIP8HardwareE7reserveEm:

c00284b8 <std::vector<Hardware*>::reserve(unsigned long)>:
c00284b8:	83 ec 1c             	sub    esp,0x1c
c00284bb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00284bf:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00284c2:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c00284c6:	0f 86 d0 00 00 00    	jbe    c002859c <std::vector<Hardware*>::reserve(unsigned long)+0xe4>
c00284cc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00284d0:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00284d3:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c00284d7:	76 13                	jbe    c00284ec <std::vector<Hardware*>::reserve(unsigned long)+0x34>
c00284d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00284dd:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00284e0:	8d 14 00             	lea    edx,[eax+eax*1]
c00284e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00284e7:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00284ea:	eb e0                	jmp    c00284cc <std::vector<Hardware*>::reserve(unsigned long)+0x14>
c00284ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00284f0:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00284f3:	3d ff ff ff 1f       	cmp    eax,0x1fffffff
c00284f8:	77 06                	ja     c0028500 <std::vector<Hardware*>::reserve(unsigned long)+0x48>
c00284fa:	c1 e0 02             	shl    eax,0x2
c00284fd:	eb 09                	jmp    c0028508 <std::vector<Hardware*>::reserve(unsigned long)+0x50>
c00284ff:	90                   	nop
c0028500:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0028505:	8d 76 00             	lea    esi,[esi+0x0]
c0028508:	83 ec 0c             	sub    esp,0xc
c002850b:	50                   	push   eax
c002850c:	e8 f6 57 fe ff       	call   c000dd07 <operator new[](unsigned long)>
c0028511:	83 c4 10             	add    esp,0x10
c0028514:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0028518:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002851c:	8b 10                	mov    edx,DWORD PTR [eax]
c002851e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028522:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028525:	39 c2                	cmp    edx,eax
c0028527:	74 1f                	je     c0028548 <std::vector<Hardware*>::reserve(unsigned long)+0x90>
c0028529:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002852d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0028530:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028534:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028537:	83 ec 04             	sub    esp,0x4
c002853a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c002853e:	52                   	push   edx
c002853f:	50                   	push   eax
c0028540:	e8 47 ff ff ff       	call   c002848c <Hardware** std::copy<Hardware**, Hardware**>(Hardware**, Hardware**, Hardware**)>
c0028545:	83 c4 10             	add    esp,0x10
c0028548:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002854c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002854f:	85 c0                	test   eax,eax
c0028551:	74 15                	je     c0028568 <std::vector<Hardware*>::reserve(unsigned long)+0xb0>
c0028553:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028557:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002855a:	83 ec 0c             	sub    esp,0xc
c002855d:	50                   	push   eax
c002855e:	e8 ae 57 fe ff       	call   c000dd11 <operator delete[](void*)>
c0028563:	83 c4 10             	add    esp,0x10
c0028566:	66 90                	xchg   ax,ax
c0028568:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002856c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0028570:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028573:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028577:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c002857a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002857e:	89 10                	mov    DWORD PTR [eax],edx
c0028580:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028584:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0028587:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002858b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c002858e:	c1 e0 02             	shl    eax,0x2
c0028591:	01 c2                	add    edx,eax
c0028593:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028597:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002859a:	66 90                	xchg   ax,ax
c002859c:	90                   	nop
c002859d:	83 c4 1c             	add    esp,0x1c
c00285a0:	c3                   	ret    

Disassembly of section .text._ZNSt6vectorIP8HardwareE9push_backERKS1_:

c00285a4 <std::vector<Hardware*>::push_back(Hardware* const&)>:
c00285a4:	83 ec 0c             	sub    esp,0xc
c00285a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285ab:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00285ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285b2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00285b5:	39 c2                	cmp    edx,eax
c00285b7:	73 2f                	jae    c00285e8 <std::vector<Hardware*>::push_back(Hardware* const&)+0x44>
c00285b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285bd:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00285c0:	8d 48 04             	lea    ecx,[eax+0x4]
c00285c3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00285c7:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00285ca:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00285ce:	8b 12                	mov    edx,DWORD PTR [edx]
c00285d0:	89 10                	mov    DWORD PTR [eax],edx
c00285d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285d6:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00285d9:	8d 50 01             	lea    edx,[eax+0x1]
c00285dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285e0:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00285e3:	eb 47                	jmp    c002862c <std::vector<Hardware*>::push_back(Hardware* const&)+0x88>
c00285e5:	8d 76 00             	lea    esi,[esi+0x0]
c00285e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285ec:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00285ef:	d1 e0                	shl    eax,1
c00285f1:	83 ec 08             	sub    esp,0x8
c00285f4:	50                   	push   eax
c00285f5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00285f9:	e8 ba fe ff ff       	call   c00284b8 <std::vector<Hardware*>::reserve(unsigned long)>
c00285fe:	83 c4 10             	add    esp,0x10
c0028601:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028605:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0028608:	8d 50 01             	lea    edx,[eax+0x1]
c002860b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002860f:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0028612:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028616:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028619:	8d 48 04             	lea    ecx,[eax+0x4]
c002861c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0028620:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0028623:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028627:	8b 12                	mov    edx,DWORD PTR [edx]
c0028629:	89 10                	mov    DWORD PTR [eax],edx
c002862b:	90                   	nop
c002862c:	90                   	nop
c002862d:	83 c4 0c             	add    esp,0xc
c0028630:	c3                   	ret    

Disassembly of section .text._ZNSt6vectorIP8HardwareE5eraseENS2_8iteratorES3_:

c0028634 <std::vector<Hardware*>::erase(std::vector<Hardware*>::iterator, std::vector<Hardware*>::iterator)>:
c0028634:	53                   	push   ebx
c0028635:	83 ec 28             	sub    esp,0x28
c0028638:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c002863c:	8b 00                	mov    eax,DWORD PTR [eax]
c002863e:	83 ec 08             	sub    esp,0x8
c0028641:	50                   	push   eax
c0028642:	8d 44 24 14          	lea    eax,[esp+0x14]
c0028646:	50                   	push   eax
c0028647:	e8 08 fb ff ff       	call   c0028154 <std::vector<Hardware*>::iterator::iterator(Hardware**)>
c002864c:	83 c4 10             	add    esp,0x10
c002864f:	83 ec 08             	sub    esp,0x8
c0028652:	8d 44 24 10          	lea    eax,[esp+0x10]
c0028656:	50                   	push   eax
c0028657:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c002865b:	e8 18 fe ff ff       	call   c0028478 <std::vector<Hardware*>::iterator::operator-(std::vector<Hardware*>::iterator)>
c0028660:	83 c4 10             	add    esp,0x10
c0028663:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0028667:	83 ec 0c             	sub    esp,0xc
c002866a:	8d 44 24 14          	lea    eax,[esp+0x14]
c002866e:	50                   	push   eax
c002866f:	e8 b8 f7 ff ff       	call   c0027e2c <std::vector<Hardware*>::iterator::~iterator()>
c0028674:	83 c4 10             	add    esp,0x10
c0028677:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c002867b:	8b 00                	mov    eax,DWORD PTR [eax]
c002867d:	83 ec 08             	sub    esp,0x8
c0028680:	50                   	push   eax
c0028681:	8d 44 24 18          	lea    eax,[esp+0x18]
c0028685:	50                   	push   eax
c0028686:	e8 c9 fa ff ff       	call   c0028154 <std::vector<Hardware*>::iterator::iterator(Hardware**)>
c002868b:	83 c4 10             	add    esp,0x10
c002868e:	83 ec 08             	sub    esp,0x8
c0028691:	8d 44 24 14          	lea    eax,[esp+0x14]
c0028695:	50                   	push   eax
c0028696:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002869a:	e8 d9 fd ff ff       	call   c0028478 <std::vector<Hardware*>::iterator::operator-(std::vector<Hardware*>::iterator)>
c002869f:	83 c4 10             	add    esp,0x10
c00286a2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00286a6:	83 ec 0c             	sub    esp,0xc
c00286a9:	8d 44 24 18          	lea    eax,[esp+0x18]
c00286ad:	50                   	push   eax
c00286ae:	e8 79 f7 ff ff       	call   c0027e2c <std::vector<Hardware*>::iterator::~iterator()>
c00286b3:	83 c4 10             	add    esp,0x10
c00286b6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00286ba:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00286bd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00286c1:	c1 e2 02             	shl    edx,0x2
c00286c4:	8d 0c 10             	lea    ecx,[eax+edx*1]
c00286c7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00286cb:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c00286ce:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00286d2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00286d5:	c1 e0 02             	shl    eax,0x2
c00286d8:	01 c2                	add    edx,eax
c00286da:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00286de:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00286e1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00286e5:	c1 e3 02             	shl    ebx,0x2
c00286e8:	01 d8                	add    eax,ebx
c00286ea:	83 ec 04             	sub    esp,0x4
c00286ed:	51                   	push   ecx
c00286ee:	52                   	push   edx
c00286ef:	50                   	push   eax
c00286f0:	e8 97 fd ff ff       	call   c002848c <Hardware** std::copy<Hardware**, Hardware**>(Hardware**, Hardware**, Hardware**)>
c00286f5:	83 c4 10             	add    esp,0x10
c00286f8:	83 ec 08             	sub    esp,0x8
c00286fb:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00286ff:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0028703:	50                   	push   eax
c0028704:	e8 27 f7 ff ff       	call   c0027e30 <std::vector<Hardware*>::iterator::iterator(std::vector<Hardware*>::iterator const&)>
c0028709:	83 c4 10             	add    esp,0x10
c002870c:	83 ec 08             	sub    esp,0x8
c002870f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0028713:	50                   	push   eax
c0028714:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0028718:	e8 5b fd ff ff       	call   c0028478 <std::vector<Hardware*>::iterator::operator-(std::vector<Hardware*>::iterator)>
c002871d:	83 c4 10             	add    esp,0x10
c0028720:	89 c2                	mov    edx,eax
c0028722:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0028726:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0028729:	29 d0                	sub    eax,edx
c002872b:	89 c2                	mov    edx,eax
c002872d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0028731:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0028734:	83 ec 0c             	sub    esp,0xc
c0028737:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002873b:	50                   	push   eax
c002873c:	e8 eb f6 ff ff       	call   c0027e2c <std::vector<Hardware*>::iterator::~iterator()>
c0028741:	83 c4 10             	add    esp,0x10
c0028744:	83 ec 08             	sub    esp,0x8
c0028747:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c002874b:	8d 44 24 20          	lea    eax,[esp+0x20]
c002874f:	50                   	push   eax
c0028750:	e8 db f6 ff ff       	call   c0027e30 <std::vector<Hardware*>::iterator::iterator(std::vector<Hardware*>::iterator const&)>
c0028755:	83 c4 10             	add    esp,0x10
c0028758:	83 ec 08             	sub    esp,0x8
c002875b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002875f:	50                   	push   eax
c0028760:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0028764:	e8 0f fd ff ff       	call   c0028478 <std::vector<Hardware*>::iterator::operator-(std::vector<Hardware*>::iterator)>
c0028769:	83 c4 10             	add    esp,0x10
c002876c:	89 c2                	mov    edx,eax
c002876e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0028772:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028775:	c1 e2 02             	shl    edx,0x2
c0028778:	f7 da                	neg    edx
c002877a:	01 c2                	add    edx,eax
c002877c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0028780:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028783:	83 ec 0c             	sub    esp,0xc
c0028786:	8d 44 24 20          	lea    eax,[esp+0x20]
c002878a:	50                   	push   eax
c002878b:	e8 9c f6 ff ff       	call   c0027e2c <std::vector<Hardware*>::iterator::~iterator()>
c0028790:	83 c4 10             	add    esp,0x10
c0028793:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0028797:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002879a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002879e:	c1 e2 02             	shl    edx,0x2
c00287a1:	01 d0                	add    eax,edx
c00287a3:	83 ec 08             	sub    esp,0x8
c00287a6:	50                   	push   eax
c00287a7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00287ab:	e8 a4 f9 ff ff       	call   c0028154 <std::vector<Hardware*>::iterator::iterator(Hardware**)>
c00287b0:	83 c4 10             	add    esp,0x10
c00287b3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00287b7:	83 c4 28             	add    esp,0x28
c00287ba:	5b                   	pop    ebx
c00287bb:	c2 04 00             	ret    0x4

Disassembly of section .text._ZSt4copyIP17DeviceMemoryRangeS1_ET0_T_S3_S2_:

c00287c0 <DeviceMemoryRange* std::copy<DeviceMemoryRange*, DeviceMemoryRange*>(DeviceMemoryRange*, DeviceMemoryRange*, DeviceMemoryRange*)>:
c00287c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00287c4:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00287c8:	74 1e                	je     c00287e8 <DeviceMemoryRange* std::copy<DeviceMemoryRange*, DeviceMemoryRange*>(DeviceMemoryRange*, DeviceMemoryRange*, DeviceMemoryRange*)+0x28>
c00287ca:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00287ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00287d2:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00287d5:	8b 00                	mov    eax,DWORD PTR [eax]
c00287d7:	89 01                	mov    DWORD PTR [ecx],eax
c00287d9:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00287dc:	83 44 24 04 08       	add    DWORD PTR [esp+0x4],0x8
c00287e1:	83 44 24 0c 08       	add    DWORD PTR [esp+0xc],0x8
c00287e6:	eb d8                	jmp    c00287c0 <DeviceMemoryRange* std::copy<DeviceMemoryRange*, DeviceMemoryRange*>(DeviceMemoryRange*, DeviceMemoryRange*, DeviceMemoryRange*)>
c00287e8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00287ec:	c3                   	ret    

Disassembly of section .text._ZNSt6vectorI17DeviceMemoryRangeE7reserveEm:

c00287f0 <std::vector<DeviceMemoryRange>::reserve(unsigned long)>:
c00287f0:	83 ec 1c             	sub    esp,0x1c
c00287f3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00287f7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00287fa:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c00287fe:	0f 86 d0 00 00 00    	jbe    c00288d4 <std::vector<DeviceMemoryRange>::reserve(unsigned long)+0xe4>
c0028804:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028808:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c002880b:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c002880f:	76 13                	jbe    c0028824 <std::vector<DeviceMemoryRange>::reserve(unsigned long)+0x34>
c0028811:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028815:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0028818:	8d 14 00             	lea    edx,[eax+eax*1]
c002881b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002881f:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0028822:	eb e0                	jmp    c0028804 <std::vector<DeviceMemoryRange>::reserve(unsigned long)+0x14>
c0028824:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028828:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c002882b:	3d ff ff ff 0f       	cmp    eax,0xfffffff
c0028830:	77 06                	ja     c0028838 <std::vector<DeviceMemoryRange>::reserve(unsigned long)+0x48>
c0028832:	c1 e0 03             	shl    eax,0x3
c0028835:	eb 09                	jmp    c0028840 <std::vector<DeviceMemoryRange>::reserve(unsigned long)+0x50>
c0028837:	90                   	nop
c0028838:	b8 ff ff ff ff       	mov    eax,0xffffffff
c002883d:	8d 76 00             	lea    esi,[esi+0x0]
c0028840:	83 ec 0c             	sub    esp,0xc
c0028843:	50                   	push   eax
c0028844:	e8 be 54 fe ff       	call   c000dd07 <operator new[](unsigned long)>
c0028849:	83 c4 10             	add    esp,0x10
c002884c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0028850:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028854:	8b 10                	mov    edx,DWORD PTR [eax]
c0028856:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002885a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002885d:	39 c2                	cmp    edx,eax
c002885f:	74 1f                	je     c0028880 <std::vector<DeviceMemoryRange>::reserve(unsigned long)+0x90>
c0028861:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028865:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0028868:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002886c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002886f:	83 ec 04             	sub    esp,0x4
c0028872:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0028876:	52                   	push   edx
c0028877:	50                   	push   eax
c0028878:	e8 43 ff ff ff       	call   c00287c0 <DeviceMemoryRange* std::copy<DeviceMemoryRange*, DeviceMemoryRange*>(DeviceMemoryRange*, DeviceMemoryRange*, DeviceMemoryRange*)>
c002887d:	83 c4 10             	add    esp,0x10
c0028880:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028884:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028887:	85 c0                	test   eax,eax
c0028889:	74 15                	je     c00288a0 <std::vector<DeviceMemoryRange>::reserve(unsigned long)+0xb0>
c002888b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002888f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028892:	83 ec 0c             	sub    esp,0xc
c0028895:	50                   	push   eax
c0028896:	e8 76 54 fe ff       	call   c000dd11 <operator delete[](void*)>
c002889b:	83 c4 10             	add    esp,0x10
c002889e:	66 90                	xchg   ax,ax
c00288a0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00288a4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00288a8:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00288ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00288af:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c00288b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00288b6:	89 10                	mov    DWORD PTR [eax],edx
c00288b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00288bc:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c00288bf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00288c3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00288c6:	c1 e0 03             	shl    eax,0x3
c00288c9:	01 c2                	add    edx,eax
c00288cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00288cf:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00288d2:	66 90                	xchg   ax,ax
c00288d4:	90                   	nop
c00288d5:	83 c4 1c             	add    esp,0x1c
c00288d8:	c3                   	ret    

Disassembly of section .text._ZNSt6vectorI17DeviceMemoryRangeE9push_backERKS0_:

c00288dc <std::vector<DeviceMemoryRange>::push_back(DeviceMemoryRange const&)>:
c00288dc:	83 ec 0c             	sub    esp,0xc
c00288df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288e3:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00288e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288ea:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00288ed:	39 c2                	cmp    edx,eax
c00288ef:	73 33                	jae    c0028924 <std::vector<DeviceMemoryRange>::push_back(DeviceMemoryRange const&)+0x48>
c00288f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288f5:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c00288f8:	8d 51 08             	lea    edx,[ecx+0x8]
c00288fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288ff:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028902:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0028906:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0028909:	8b 00                	mov    eax,DWORD PTR [eax]
c002890b:	89 01                	mov    DWORD PTR [ecx],eax
c002890d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0028910:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028914:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0028917:	8d 50 01             	lea    edx,[eax+0x1]
c002891a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002891e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0028921:	eb 4d                	jmp    c0028970 <std::vector<DeviceMemoryRange>::push_back(DeviceMemoryRange const&)+0x94>
c0028923:	90                   	nop
c0028924:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028928:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c002892b:	d1 e0                	shl    eax,1
c002892d:	83 ec 08             	sub    esp,0x8
c0028930:	50                   	push   eax
c0028931:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028935:	e8 b6 fe ff ff       	call   c00287f0 <std::vector<DeviceMemoryRange>::reserve(unsigned long)>
c002893a:	83 c4 10             	add    esp,0x10
c002893d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028941:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0028944:	8d 50 01             	lea    edx,[eax+0x1]
c0028947:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002894b:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c002894e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028952:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0028955:	8d 51 08             	lea    edx,[ecx+0x8]
c0028958:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002895c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002895f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0028963:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0028966:	8b 00                	mov    eax,DWORD PTR [eax]
c0028968:	89 01                	mov    DWORD PTR [ecx],eax
c002896a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c002896d:	8d 76 00             	lea    esi,[esi+0x0]
c0028970:	90                   	nop
c0028971:	83 c4 0c             	add    esp,0xc
c0028974:	c3                   	ret    

Disassembly of section .text._ZSt4copyIP15DevicePortRangeS1_ET0_T_S3_S2_:

c0028978 <DevicePortRange* std::copy<DevicePortRange*, DevicePortRange*>(DevicePortRange*, DevicePortRange*, DevicePortRange*)>:
c0028978:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002897c:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0028980:	74 1a                	je     c002899c <DevicePortRange* std::copy<DevicePortRange*, DevicePortRange*>(DevicePortRange*, DevicePortRange*, DevicePortRange*)+0x24>
c0028982:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0028986:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002898a:	8b 12                	mov    edx,DWORD PTR [edx]
c002898c:	89 10                	mov    DWORD PTR [eax],edx
c002898e:	83 44 24 04 04       	add    DWORD PTR [esp+0x4],0x4
c0028993:	83 44 24 0c 04       	add    DWORD PTR [esp+0xc],0x4
c0028998:	eb de                	jmp    c0028978 <DevicePortRange* std::copy<DevicePortRange*, DevicePortRange*>(DevicePortRange*, DevicePortRange*, DevicePortRange*)>
c002899a:	66 90                	xchg   ax,ax
c002899c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00289a0:	c3                   	ret    

Disassembly of section .text._ZNSt6vectorI15DevicePortRangeE7reserveEm:

c00289a4 <std::vector<DevicePortRange>::reserve(unsigned long)>:
c00289a4:	83 ec 1c             	sub    esp,0x1c
c00289a7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00289ab:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00289ae:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c00289b2:	0f 86 d0 00 00 00    	jbe    c0028a88 <std::vector<DevicePortRange>::reserve(unsigned long)+0xe4>
c00289b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00289bc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00289bf:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c00289c3:	76 13                	jbe    c00289d8 <std::vector<DevicePortRange>::reserve(unsigned long)+0x34>
c00289c5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00289c9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00289cc:	8d 14 00             	lea    edx,[eax+eax*1]
c00289cf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00289d3:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00289d6:	eb e0                	jmp    c00289b8 <std::vector<DevicePortRange>::reserve(unsigned long)+0x14>
c00289d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00289dc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00289df:	3d ff ff ff 1f       	cmp    eax,0x1fffffff
c00289e4:	77 06                	ja     c00289ec <std::vector<DevicePortRange>::reserve(unsigned long)+0x48>
c00289e6:	c1 e0 02             	shl    eax,0x2
c00289e9:	eb 09                	jmp    c00289f4 <std::vector<DevicePortRange>::reserve(unsigned long)+0x50>
c00289eb:	90                   	nop
c00289ec:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00289f1:	8d 76 00             	lea    esi,[esi+0x0]
c00289f4:	83 ec 0c             	sub    esp,0xc
c00289f7:	50                   	push   eax
c00289f8:	e8 0a 53 fe ff       	call   c000dd07 <operator new[](unsigned long)>
c00289fd:	83 c4 10             	add    esp,0x10
c0028a00:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0028a04:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028a08:	8b 10                	mov    edx,DWORD PTR [eax]
c0028a0a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028a0e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028a11:	39 c2                	cmp    edx,eax
c0028a13:	74 1f                	je     c0028a34 <std::vector<DevicePortRange>::reserve(unsigned long)+0x90>
c0028a15:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028a19:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0028a1c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028a20:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028a23:	83 ec 04             	sub    esp,0x4
c0028a26:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0028a2a:	52                   	push   edx
c0028a2b:	50                   	push   eax
c0028a2c:	e8 47 ff ff ff       	call   c0028978 <DevicePortRange* std::copy<DevicePortRange*, DevicePortRange*>(DevicePortRange*, DevicePortRange*, DevicePortRange*)>
c0028a31:	83 c4 10             	add    esp,0x10
c0028a34:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028a38:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028a3b:	85 c0                	test   eax,eax
c0028a3d:	74 15                	je     c0028a54 <std::vector<DevicePortRange>::reserve(unsigned long)+0xb0>
c0028a3f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028a43:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028a46:	83 ec 0c             	sub    esp,0xc
c0028a49:	50                   	push   eax
c0028a4a:	e8 c2 52 fe ff       	call   c000dd11 <operator delete[](void*)>
c0028a4f:	83 c4 10             	add    esp,0x10
c0028a52:	66 90                	xchg   ax,ax
c0028a54:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028a58:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0028a5c:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028a5f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028a63:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0028a66:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028a6a:	89 10                	mov    DWORD PTR [eax],edx
c0028a6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028a70:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0028a73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028a77:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0028a7a:	c1 e0 02             	shl    eax,0x2
c0028a7d:	01 c2                	add    edx,eax
c0028a7f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028a83:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028a86:	66 90                	xchg   ax,ax
c0028a88:	90                   	nop
c0028a89:	83 c4 1c             	add    esp,0x1c
c0028a8c:	c3                   	ret    

Disassembly of section .text._ZNSt6vectorI15DevicePortRangeE9push_backERKS0_:

c0028a90 <std::vector<DevicePortRange>::push_back(DevicePortRange const&)>:
c0028a90:	83 ec 0c             	sub    esp,0xc
c0028a93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a97:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0028a9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a9e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0028aa1:	39 c2                	cmp    edx,eax
c0028aa3:	73 2f                	jae    c0028ad4 <std::vector<DevicePortRange>::push_back(DevicePortRange const&)+0x44>
c0028aa5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028aa9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028aac:	8d 48 04             	lea    ecx,[eax+0x4]
c0028aaf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0028ab3:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0028ab6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028aba:	8b 12                	mov    edx,DWORD PTR [edx]
c0028abc:	89 10                	mov    DWORD PTR [eax],edx
c0028abe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ac2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0028ac5:	8d 50 01             	lea    edx,[eax+0x1]
c0028ac8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028acc:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0028acf:	eb 47                	jmp    c0028b18 <std::vector<DevicePortRange>::push_back(DevicePortRange const&)+0x88>
c0028ad1:	8d 76 00             	lea    esi,[esi+0x0]
c0028ad4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ad8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0028adb:	d1 e0                	shl    eax,1
c0028add:	83 ec 08             	sub    esp,0x8
c0028ae0:	50                   	push   eax
c0028ae1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ae5:	e8 ba fe ff ff       	call   c00289a4 <std::vector<DevicePortRange>::reserve(unsigned long)>
c0028aea:	83 c4 10             	add    esp,0x10
c0028aed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028af1:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0028af4:	8d 50 01             	lea    edx,[eax+0x1]
c0028af7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028afb:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0028afe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b02:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028b05:	8d 48 04             	lea    ecx,[eax+0x4]
c0028b08:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0028b0c:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0028b0f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028b13:	8b 12                	mov    edx,DWORD PTR [edx]
c0028b15:	89 10                	mov    DWORD PTR [eax],edx
c0028b17:	90                   	nop
c0028b18:	90                   	nop
c0028b19:	83 c4 0c             	add    esp,0xc
c0028b1c:	c3                   	ret    

Disassembly of section .text._ZN11BusHardware10_getDriverEv:

c0028b20 <BusHardware::_getDriver()>:
c0028b20:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028b24:	8b 80 88 00 00 00    	mov    eax,DWORD PTR [eax+0x88]
c0028b2a:	c3                   	ret    

Disassembly of section .text._ZN11BusHardware7getTypeEv:

c0028b2c <BusHardware::getType()>:
c0028b2c:	b8 01 00 00 00       	mov    eax,0x1
c0028b31:	c3                   	ret    

Disassembly of section .text._ZN11BusHardwareD2Ev:

c0028b34 <BusHardware::~BusHardware()>:
c0028b34:	83 ec 0c             	sub    esp,0xc
c0028b37:	ba 78 a6 02 c0       	mov    edx,0xc002a678
c0028b3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b40:	89 10                	mov    DWORD PTR [eax],edx
c0028b42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b46:	83 ec 0c             	sub    esp,0xc
c0028b49:	50                   	push   eax
c0028b4a:	e8 0d e9 fd ff       	call   c000745c <Hardware::~Hardware()>
c0028b4f:	83 c4 10             	add    esp,0x10
c0028b52:	90                   	nop
c0028b53:	83 c4 0c             	add    esp,0xc
c0028b56:	c3                   	ret    

Disassembly of section .text._ZN11BusHardwareD0Ev:

c0028b58 <BusHardware::~BusHardware()>:
c0028b58:	83 ec 0c             	sub    esp,0xc
c0028b5b:	83 ec 0c             	sub    esp,0xc
c0028b5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028b62:	e8 cd ff ff ff       	call   c0028b34 <BusHardware::~BusHardware()>
c0028b67:	83 c4 10             	add    esp,0x10
c0028b6a:	83 ec 08             	sub    esp,0x8
c0028b6d:	68 8c 00 00 00       	push   0x8c
c0028b72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028b76:	e8 91 51 fe ff       	call   c000dd0c <operator delete(void*, unsigned long)>
c0028b7b:	83 c4 10             	add    esp,0x10
c0028b7e:	83 c4 0c             	add    esp,0xc
c0028b81:	c3                   	ret    

Disassembly of section .text._ZN9BusDriverC2Ev:

c0028b84 <BusDriver::BusDriver()>:
c0028b84:	83 ec 0c             	sub    esp,0xc
c0028b87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b8b:	83 ec 0c             	sub    esp,0xc
c0028b8e:	50                   	push   eax
c0028b8f:	e8 64 f2 ff ff       	call   c0027df8 <Driver::Driver()>
c0028b94:	83 c4 10             	add    esp,0x10
c0028b97:	ba 5c a6 02 c0       	mov    edx,0xc002a65c
c0028b9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ba0:	89 10                	mov    DWORD PTR [eax],edx
c0028ba2:	90                   	nop
c0028ba3:	83 c4 0c             	add    esp,0xc
c0028ba6:	c3                   	ret    

Disassembly of section .text._ZN11BusHardwareC2EP9BusDriver:

c0028ba8 <BusHardware::BusHardware(BusDriver*)>:
c0028ba8:	83 ec 0c             	sub    esp,0xc
c0028bab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028baf:	83 ec 0c             	sub    esp,0xc
c0028bb2:	50                   	push   eax
c0028bb3:	e8 1c e9 fd ff       	call   c00074d4 <Hardware::Hardware()>
c0028bb8:	83 c4 10             	add    esp,0x10
c0028bbb:	ba 78 a6 02 c0       	mov    edx,0xc002a678
c0028bc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bc4:	89 10                	mov    DWORD PTR [eax],edx
c0028bc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bca:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028bce:	89 90 88 00 00 00    	mov    DWORD PTR [eax+0x88],edx
c0028bd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bd8:	8b 80 88 00 00 00    	mov    eax,DWORD PTR [eax+0x88]
c0028bde:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0028be2:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028be5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028be9:	8b 80 88 00 00 00    	mov    eax,DWORD PTR [eax+0x88]
c0028bef:	89 c2                	mov    edx,eax
c0028bf1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bf5:	8b 80 88 00 00 00    	mov    eax,DWORD PTR [eax+0x88]
c0028bfb:	8b 00                	mov    eax,DWORD PTR [eax]
c0028bfd:	83 c0 04             	add    eax,0x4
c0028c00:	8b 00                	mov    eax,DWORD PTR [eax]
c0028c02:	83 ec 0c             	sub    esp,0xc
c0028c05:	52                   	push   edx
c0028c06:	ff d0                	call   eax
c0028c08:	83 c4 10             	add    esp,0x10
c0028c0b:	90                   	nop
c0028c0c:	83 c4 0c             	add    esp,0xc
c0028c0f:	c3                   	ret    

Disassembly of section .text._ZN12ISAPnPDriverC2Ev:

c0028c10 <ISAPnPDriver::ISAPnPDriver()>:
c0028c10:	83 ec 0c             	sub    esp,0xc
c0028c13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c17:	83 ec 0c             	sub    esp,0xc
c0028c1a:	50                   	push   eax
c0028c1b:	e8 64 ff ff ff       	call   c0028b84 <BusDriver::BusDriver()>
c0028c20:	83 c4 10             	add    esp,0x10
c0028c23:	ba 44 ce 02 c0       	mov    edx,0xc002ce44
c0028c28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c2c:	89 10                	mov    DWORD PTR [eax],edx
c0028c2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c32:	66 c7 40 08 79 02    	mov    WORD PTR [eax+0x8],0x279
c0028c38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c3c:	66 c7 40 0a 79 0a    	mov    WORD PTR [eax+0xa],0xa79
c0028c42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c46:	66 c7 40 0c 03 02    	mov    WORD PTR [eax+0xc],0x203
c0028c4c:	90                   	nop
c0028c4d:	83 c4 0c             	add    esp,0xc
c0028c50:	c3                   	ret    

Disassembly of section .text._ZN10ACPIDriverC2Ev:

c0028c54 <ACPIDriver::ACPIDriver()>:
c0028c54:	83 ec 0c             	sub    esp,0xc
c0028c57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c5b:	83 ec 0c             	sub    esp,0xc
c0028c5e:	50                   	push   eax
c0028c5f:	e8 20 ff ff ff       	call   c0028b84 <BusDriver::BusDriver()>
c0028c64:	83 c4 10             	add    esp,0x10
c0028c67:	ba 54 cc 02 c0       	mov    edx,0xc002cc54
c0028c6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c70:	89 10                	mov    DWORD PTR [eax],edx
c0028c72:	90                   	nop
c0028c73:	83 c4 0c             	add    esp,0xc
c0028c76:	c3                   	ret    

Disassembly of section .text._ZN9PCIDriverC2Ev:

c0028c78 <PCIDriver::PCIDriver()>:
c0028c78:	83 ec 0c             	sub    esp,0xc
c0028c7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c7f:	83 ec 0c             	sub    esp,0xc
c0028c82:	50                   	push   eax
c0028c83:	e8 fc fe ff ff       	call   c0028b84 <BusDriver::BusDriver()>
c0028c88:	83 c4 10             	add    esp,0x10
c0028c8b:	ba d4 d9 02 c0       	mov    edx,0xc002d9d4
c0028c90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c94:	89 10                	mov    DWORD PTR [eax],edx
c0028c96:	90                   	nop
c0028c97:	83 c4 0c             	add    esp,0xc
c0028c9a:	c3                   	ret    

Disassembly of section .text._ZN9ISADriverC2Ev:

c0028c9c <ISADriver::ISADriver()>:
c0028c9c:	83 ec 0c             	sub    esp,0xc
c0028c9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ca3:	83 ec 0c             	sub    esp,0xc
c0028ca6:	50                   	push   eax
c0028ca7:	e8 4c f1 ff ff       	call   c0027df8 <Driver::Driver()>
c0028cac:	83 c4 10             	add    esp,0x10
c0028caf:	ba 70 cc 02 c0       	mov    edx,0xc002cc70
c0028cb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cb8:	89 10                	mov    DWORD PTR [eax],edx
c0028cba:	90                   	nop
c0028cbb:	83 c4 0c             	add    esp,0xc
c0028cbe:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c0028cc0 <DriverlessDevice::~DriverlessDevice()>:
c0028cc0:	ba 5c ab 02 c0       	mov    edx,0xc002ab5c
c0028cc5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028cc9:	89 10                	mov    DWORD PTR [eax],edx
c0028ccb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028ccf:	50                   	push   eax
c0028cd0:	e8 4b 16 fe ff       	call   c000a320 <Device::~Device()>
c0028cd5:	83 c4 04             	add    esp,0x4
c0028cd8:	90                   	nop
c0028cd9:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c0028cda <DriverlessDevice::~DriverlessDevice()>:
c0028cda:	83 ec 0c             	sub    esp,0xc
c0028cdd:	83 ec 0c             	sub    esp,0xc
c0028ce0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ce4:	e8 d7 ff ff ff       	call   c0028cc0 <DriverlessDevice::~DriverlessDevice()>
c0028ce9:	83 c4 10             	add    esp,0x10
c0028cec:	83 ec 08             	sub    esp,0x8
c0028cef:	68 58 01 00 00       	push   0x158
c0028cf4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028cf8:	e8 0f 50 fe ff       	call   c000dd0c <operator delete(void*, unsigned long)>
c0028cfd:	83 c4 10             	add    esp,0x10
c0028d00:	83 c4 0c             	add    esp,0xc
c0028d03:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c0028d04 <LinkedList<Device>::addElement(Device*)>:
c0028d04:	83 ec 0c             	sub    esp,0xc
c0028d07:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028d0c:	75 10                	jne    c0028d1e <LinkedList<Device>::addElement(Device*)+0x1a>
c0028d0e:	83 ec 0c             	sub    esp,0xc
c0028d11:	68 f0 aa 02 c0       	push   0xc002aaf0
c0028d16:	e8 45 78 fe ff       	call   c0010560 <KePanic(char const*)>
c0028d1b:	83 c4 10             	add    esp,0x10
c0028d1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d22:	8b 00                	mov    eax,DWORD PTR [eax]
c0028d24:	85 c0                	test   eax,eax
c0028d26:	74 3a                	je     c0028d62 <LinkedList<Device>::addElement(Device*)+0x5e>
c0028d28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d2c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028d2f:	85 c0                	test   eax,eax
c0028d31:	74 2f                	je     c0028d62 <LinkedList<Device>::addElement(Device*)+0x5e>
c0028d33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d37:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028d3a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028d3e:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c0028d44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d48:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028d4c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028d4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d53:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028d56:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0028d60:	eb 68                	jmp    c0028dca <LinkedList<Device>::addElement(Device*)+0xc6>
c0028d62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d66:	8b 00                	mov    eax,DWORD PTR [eax]
c0028d68:	85 c0                	test   eax,eax
c0028d6a:	75 4e                	jne    c0028dba <LinkedList<Device>::addElement(Device*)+0xb6>
c0028d6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d70:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028d73:	85 c0                	test   eax,eax
c0028d75:	75 43                	jne    c0028dba <LinkedList<Device>::addElement(Device*)+0xb6>
c0028d77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d7b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028d7f:	89 10                	mov    DWORD PTR [eax],edx
c0028d81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d85:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028d89:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028d8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d90:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028d93:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0028d9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028da1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028da4:	85 c0                	test   eax,eax
c0028da6:	74 22                	je     c0028dca <LinkedList<Device>::addElement(Device*)+0xc6>
c0028da8:	83 ec 0c             	sub    esp,0xc
c0028dab:	68 12 ab 02 c0       	push   0xc002ab12
c0028db0:	e8 ab 77 fe ff       	call   c0010560 <KePanic(char const*)>
c0028db5:	83 c4 10             	add    esp,0x10
c0028db8:	eb 10                	jmp    c0028dca <LinkedList<Device>::addElement(Device*)+0xc6>
c0028dba:	83 ec 0c             	sub    esp,0xc
c0028dbd:	68 1c ab 02 c0       	push   0xc002ab1c
c0028dc2:	e8 99 77 fe ff       	call   c0010560 <KePanic(char const*)>
c0028dc7:	83 c4 10             	add    esp,0x10
c0028dca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028dce:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028dd1:	8d 50 01             	lea    edx,[eax+0x1]
c0028dd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028dd8:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028ddb:	90                   	nop
c0028ddc:	83 c4 0c             	add    esp,0xc
c0028ddf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c0028de0 <LinkedList<Device>::LinkedList()>:
c0028de0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028de4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028dea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028dee:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028df5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028df9:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028e00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028e04:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028e0a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028e0e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028e15:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028e19:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028e20:	90                   	nop
c0028e21:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c0028e24 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c0028e24:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028e28:	8b 00                	mov    eax,DWORD PTR [eax]
c0028e2a:	85 c0                	test   eax,eax
c0028e2c:	75 0e                	jne    c0028e3c <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0028e2e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028e32:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028e35:	85 c0                	test   eax,eax
c0028e37:	75 03                	jne    c0028e3c <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0028e39:	b0 01                	mov    al,0x1
c0028e3b:	c3                   	ret    
c0028e3c:	b0 00                	mov    al,0x0
c0028e3e:	90                   	nop
c0028e3f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c0028e40 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c0028e40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028e44:	8b 00                	mov    eax,DWORD PTR [eax]
c0028e46:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0028e48 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0028e48:	83 ec 0c             	sub    esp,0xc
c0028e4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e4f:	8b 00                	mov    eax,DWORD PTR [eax]
c0028e51:	85 c0                	test   eax,eax
c0028e53:	75 17                	jne    c0028e6c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c0028e55:	83 ec 0c             	sub    esp,0xc
c0028e58:	68 8c ad 02 c0       	push   0xc002ad8c
c0028e5d:	e8 fe 76 fe ff       	call   c0010560 <KePanic(char const*)>
c0028e62:	83 c4 10             	add    esp,0x10
c0028e65:	e9 96 00 00 00       	jmp    c0028f00 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb8>
c0028e6a:	66 90                	xchg   ax,ax
c0028e6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e70:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028e73:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028e76:	85 c0                	test   eax,eax
c0028e78:	0f 95 c0             	setne  al
c0028e7b:	0f b6 c0             	movzx  eax,al
c0028e7e:	85 c0                	test   eax,eax
c0028e80:	74 12                	je     c0028e94 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x4c>
c0028e82:	83 ec 0c             	sub    esp,0xc
c0028e85:	68 d7 ad 02 c0       	push   0xc002add7
c0028e8a:	e8 d1 76 fe ff       	call   c0010560 <KePanic(char const*)>
c0028e8f:	83 c4 10             	add    esp,0x10
c0028e92:	66 90                	xchg   ax,ax
c0028e94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e98:	8b 00                	mov    eax,DWORD PTR [eax]
c0028e9a:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028e9d:	85 c0                	test   eax,eax
c0028e9f:	0f 94 c0             	sete   al
c0028ea2:	0f b6 c0             	movzx  eax,al
c0028ea5:	85 c0                	test   eax,eax
c0028ea7:	74 33                	je     c0028edc <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x94>
c0028ea9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ead:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028eb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028eb7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028ebe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ec2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028ec5:	83 f8 01             	cmp    eax,0x1
c0028ec8:	74 22                	je     c0028eec <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c0028eca:	83 ec 0c             	sub    esp,0xc
c0028ecd:	68 b0 ad 02 c0       	push   0xc002adb0
c0028ed2:	e8 89 76 fe ff       	call   c0010560 <KePanic(char const*)>
c0028ed7:	83 c4 10             	add    esp,0x10
c0028eda:	eb 10                	jmp    c0028eec <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c0028edc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ee0:	8b 00                	mov    eax,DWORD PTR [eax]
c0028ee2:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0028ee5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ee9:	89 10                	mov    DWORD PTR [eax],edx
c0028eeb:	90                   	nop
c0028eec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ef0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028ef3:	8d 50 ff             	lea    edx,[eax-0x1]
c0028ef6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028efa:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028efd:	8d 76 00             	lea    esi,[esi+0x0]
c0028f00:	83 c4 0c             	add    esp,0xc
c0028f03:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c0028f04 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c0028f04:	83 ec 0c             	sub    esp,0xc
c0028f07:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028f0c:	75 12                	jne    c0028f20 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c0028f0e:	83 ec 0c             	sub    esp,0xc
c0028f11:	68 f0 aa 02 c0       	push   0xc002aaf0
c0028f16:	e8 45 76 fe ff       	call   c0010560 <KePanic(char const*)>
c0028f1b:	83 c4 10             	add    esp,0x10
c0028f1e:	66 90                	xchg   ax,ax
c0028f20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f24:	8b 00                	mov    eax,DWORD PTR [eax]
c0028f26:	85 c0                	test   eax,eax
c0028f28:	74 36                	je     c0028f60 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c0028f2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f2e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028f31:	85 c0                	test   eax,eax
c0028f33:	74 2b                	je     c0028f60 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c0028f35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f39:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028f3c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028f40:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0028f43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f47:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028f4b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028f4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f52:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028f55:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028f5c:	eb 6a                	jmp    c0028fc8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c0028f5e:	66 90                	xchg   ax,ax
c0028f60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f64:	8b 00                	mov    eax,DWORD PTR [eax]
c0028f66:	85 c0                	test   eax,eax
c0028f68:	75 4e                	jne    c0028fb8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c0028f6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f6e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028f71:	85 c0                	test   eax,eax
c0028f73:	75 43                	jne    c0028fb8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c0028f75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f79:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028f7d:	89 10                	mov    DWORD PTR [eax],edx
c0028f7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f83:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028f87:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028f8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f8e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028f91:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028f98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f9c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028f9f:	85 c0                	test   eax,eax
c0028fa1:	74 25                	je     c0028fc8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c0028fa3:	83 ec 0c             	sub    esp,0xc
c0028fa6:	68 12 ab 02 c0       	push   0xc002ab12
c0028fab:	e8 b0 75 fe ff       	call   c0010560 <KePanic(char const*)>
c0028fb0:	83 c4 10             	add    esp,0x10
c0028fb3:	eb 13                	jmp    c0028fc8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c0028fb5:	8d 76 00             	lea    esi,[esi+0x0]
c0028fb8:	83 ec 0c             	sub    esp,0xc
c0028fbb:	68 1c ab 02 c0       	push   0xc002ab1c
c0028fc0:	e8 9b 75 fe ff       	call   c0010560 <KePanic(char const*)>
c0028fc5:	83 c4 10             	add    esp,0x10
c0028fc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fcc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028fcf:	8d 50 01             	lea    edx,[eax+0x1]
c0028fd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fd6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028fd9:	90                   	nop
c0028fda:	83 c4 0c             	add    esp,0xc
c0028fdd:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0028fe0 <ACPI::~ACPI()>:
c0028fe0:	83 ec 0c             	sub    esp,0xc
c0028fe3:	ba f4 b1 02 c0       	mov    edx,0xc002b1f4
c0028fe8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fec:	89 10                	mov    DWORD PTR [eax],edx
c0028fee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ff2:	83 ec 0c             	sub    esp,0xc
c0028ff5:	50                   	push   eax
c0028ff6:	e8 25 13 fe ff       	call   c000a320 <Device::~Device()>
c0028ffb:	83 c4 10             	add    esp,0x10
c0028ffe:	90                   	nop
c0028fff:	83 c4 0c             	add    esp,0xc
c0029002:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0029004 <ACPI::~ACPI()>:
c0029004:	83 ec 0c             	sub    esp,0xc
c0029007:	83 ec 0c             	sub    esp,0xc
c002900a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002900e:	e8 cd ff ff ff       	call   c0028fe0 <ACPI::~ACPI()>
c0029013:	83 c4 10             	add    esp,0x10
c0029016:	83 ec 08             	sub    esp,0x8
c0029019:	68 64 12 00 00       	push   0x1264
c002901e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029022:	e8 e5 4c fe ff       	call   c000dd0c <operator delete(void*, unsigned long)>
c0029027:	83 c4 10             	add    esp,0x10
c002902a:	83 c4 0c             	add    esp,0xc
c002902d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c0029030 <LinkedList<Device>::~LinkedList()>:
c0029030:	90                   	nop
c0029031:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c0029034 <LinkedList<Device>::isEmpty()>:
c0029034:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029038:	8b 00                	mov    eax,DWORD PTR [eax]
c002903a:	85 c0                	test   eax,eax
c002903c:	75 0e                	jne    c002904c <LinkedList<Device>::isEmpty()+0x18>
c002903e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029042:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029045:	85 c0                	test   eax,eax
c0029047:	75 03                	jne    c002904c <LinkedList<Device>::isEmpty()+0x18>
c0029049:	b0 01                	mov    al,0x1
c002904b:	c3                   	ret    
c002904c:	b0 00                	mov    al,0x0
c002904e:	90                   	nop
c002904f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c0029050 <LinkedList<Device>::getFirstElement()>:
c0029050:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029054:	8b 00                	mov    eax,DWORD PTR [eax]
c0029056:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c0029058 <LinkedList<Device>::removeFirst()>:
c0029058:	83 ec 0c             	sub    esp,0xc
c002905b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002905f:	8b 00                	mov    eax,DWORD PTR [eax]
c0029061:	85 c0                	test   eax,eax
c0029063:	75 17                	jne    c002907c <LinkedList<Device>::removeFirst()+0x24>
c0029065:	83 ec 0c             	sub    esp,0xc
c0029068:	68 8c ad 02 c0       	push   0xc002ad8c
c002906d:	e8 ee 74 fe ff       	call   c0010560 <KePanic(char const*)>
c0029072:	83 c4 10             	add    esp,0x10
c0029075:	e9 92 00 00 00       	jmp    c002910c <LinkedList<Device>::removeFirst()+0xb4>
c002907a:	66 90                	xchg   ax,ax
c002907c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029080:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029083:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0029089:	85 c0                	test   eax,eax
c002908b:	74 13                	je     c00290a0 <LinkedList<Device>::removeFirst()+0x48>
c002908d:	83 ec 0c             	sub    esp,0xc
c0029090:	68 d7 ad 02 c0       	push   0xc002add7
c0029095:	e8 c6 74 fe ff       	call   c0010560 <KePanic(char const*)>
c002909a:	83 c4 10             	add    esp,0x10
c002909d:	8d 76 00             	lea    esi,[esi+0x0]
c00290a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290a4:	8b 00                	mov    eax,DWORD PTR [eax]
c00290a6:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c00290ac:	85 c0                	test   eax,eax
c00290ae:	75 34                	jne    c00290e4 <LinkedList<Device>::removeFirst()+0x8c>
c00290b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290b4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00290ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290be:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00290c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290c9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00290cc:	83 f8 01             	cmp    eax,0x1
c00290cf:	74 27                	je     c00290f8 <LinkedList<Device>::removeFirst()+0xa0>
c00290d1:	83 ec 0c             	sub    esp,0xc
c00290d4:	68 b0 ad 02 c0       	push   0xc002adb0
c00290d9:	e8 82 74 fe ff       	call   c0010560 <KePanic(char const*)>
c00290de:	83 c4 10             	add    esp,0x10
c00290e1:	eb 15                	jmp    c00290f8 <LinkedList<Device>::removeFirst()+0xa0>
c00290e3:	90                   	nop
c00290e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290e8:	8b 00                	mov    eax,DWORD PTR [eax]
c00290ea:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c00290f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290f4:	89 10                	mov    DWORD PTR [eax],edx
c00290f6:	66 90                	xchg   ax,ax
c00290f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290fc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00290ff:	8d 50 ff             	lea    edx,[eax-0x1]
c0029102:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029106:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0029109:	8d 76 00             	lea    esi,[esi+0x0]
c002910c:	83 c4 0c             	add    esp,0xc
c002910f:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0029110 <Computer::~Computer()>:
c0029110:	83 ec 0c             	sub    esp,0xc
c0029113:	ba 60 b3 02 c0       	mov    edx,0xc002b360
c0029118:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002911c:	89 10                	mov    DWORD PTR [eax],edx
c002911e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029122:	83 ec 0c             	sub    esp,0xc
c0029125:	50                   	push   eax
c0029126:	e8 f5 11 fe ff       	call   c000a320 <Device::~Device()>
c002912b:	83 c4 10             	add    esp,0x10
c002912e:	90                   	nop
c002912f:	83 c4 0c             	add    esp,0xc
c0029132:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c0029134 <Computer::~Computer()>:
c0029134:	83 ec 0c             	sub    esp,0xc
c0029137:	83 ec 0c             	sub    esp,0xc
c002913a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002913e:	e8 cd ff ff ff       	call   c0029110 <Computer::~Computer()>
c0029143:	83 c4 10             	add    esp,0x10
c0029146:	83 ec 08             	sub    esp,0x8
c0029149:	68 68 01 00 00       	push   0x168
c002914e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029152:	e8 b5 4b fe ff       	call   c000dd0c <operator delete(void*, unsigned long)>
c0029157:	83 c4 10             	add    esp,0x10
c002915a:	83 c4 0c             	add    esp,0xc
c002915d:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c002915e <idleCommon()>:
c002915e:	83 ec 0c             	sub    esp,0xc
c0029161:	fa                   	cli    
c0029162:	ff 05 30 63 03 c0    	inc    DWORD PTR ds:0xc0036330
c0029168:	e8 7b df fe ff       	call   c00170e8 <schedule()>
c002916d:	f0 ff 0d 30 63 03 c0 	lock dec DWORD PTR ds:0xc0036330
c0029174:	83 3d 30 63 03 c0 00 	cmp    DWORD PTR ds:0xc0036330,0x0
c002917b:	75 01                	jne    c002917e <idleCommon()+0x20>
c002917d:	fb                   	sti    
c002917e:	83 c4 0c             	add    esp,0xc
c0029181:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0029182 <LinkedList<UnixFile>::~LinkedList()>:
c0029182:	90                   	nop
c0029183:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c0029184 <LinkedList<UnixFile>::LinkedList()>:
c0029184:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029188:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002918e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029192:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0029199:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002919d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00291a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00291a8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00291ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00291b2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00291b9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00291bd:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00291c4:	90                   	nop
c00291c5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c00291c6 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c00291c6:	83 ec 0c             	sub    esp,0xc
c00291c9:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00291ce:	75 10                	jne    c00291e0 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c00291d0:	83 ec 0c             	sub    esp,0xc
c00291d3:	68 f0 aa 02 c0       	push   0xc002aaf0
c00291d8:	e8 83 73 fe ff       	call   c0010560 <KePanic(char const*)>
c00291dd:	83 c4 10             	add    esp,0x10
c00291e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291e4:	8b 00                	mov    eax,DWORD PTR [eax]
c00291e6:	85 c0                	test   eax,eax
c00291e8:	74 34                	je     c002921e <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c00291ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291ee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00291f1:	85 c0                	test   eax,eax
c00291f3:	74 29                	je     c002921e <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c00291f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291f9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00291fc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029200:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0029203:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029207:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002920b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002920e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029212:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029215:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002921c:	eb 65                	jmp    c0029283 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002921e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029222:	8b 00                	mov    eax,DWORD PTR [eax]
c0029224:	85 c0                	test   eax,eax
c0029226:	75 4b                	jne    c0029273 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0029228:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002922c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002922f:	85 c0                	test   eax,eax
c0029231:	75 40                	jne    c0029273 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0029233:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029237:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002923b:	89 10                	mov    DWORD PTR [eax],edx
c002923d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029241:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029245:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0029248:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002924c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002924f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0029256:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002925a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002925d:	85 c0                	test   eax,eax
c002925f:	74 22                	je     c0029283 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0029261:	83 ec 0c             	sub    esp,0xc
c0029264:	68 12 ab 02 c0       	push   0xc002ab12
c0029269:	e8 f2 72 fe ff       	call   c0010560 <KePanic(char const*)>
c002926e:	83 c4 10             	add    esp,0x10
c0029271:	eb 10                	jmp    c0029283 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0029273:	83 ec 0c             	sub    esp,0xc
c0029276:	68 1c ab 02 c0       	push   0xc002ab1c
c002927b:	e8 e0 72 fe ff       	call   c0010560 <KePanic(char const*)>
c0029280:	83 c4 10             	add    esp,0x10
c0029283:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029287:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002928a:	8d 50 01             	lea    edx,[eax+0x1]
c002928d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029291:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0029294:	90                   	nop
c0029295:	83 c4 0c             	add    esp,0xc
c0029298:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c002929a <LinkedList<UnixFile>::getFirstElement()>:
c002929a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002929e:	8b 00                	mov    eax,DWORD PTR [eax]
c00292a0:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c00292a2 <LinkedList<UnixFile>::removeFirst()>:
c00292a2:	83 ec 0c             	sub    esp,0xc
c00292a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292a9:	8b 00                	mov    eax,DWORD PTR [eax]
c00292ab:	85 c0                	test   eax,eax
c00292ad:	75 12                	jne    c00292c1 <LinkedList<UnixFile>::removeFirst()+0x1f>
c00292af:	83 ec 0c             	sub    esp,0xc
c00292b2:	68 8c ad 02 c0       	push   0xc002ad8c
c00292b7:	e8 a4 72 fe ff       	call   c0010560 <KePanic(char const*)>
c00292bc:	83 c4 10             	add    esp,0x10
c00292bf:	eb 7e                	jmp    c002933f <LinkedList<UnixFile>::removeFirst()+0x9d>
c00292c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292c5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00292c8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00292cb:	85 c0                	test   eax,eax
c00292cd:	74 10                	je     c00292df <LinkedList<UnixFile>::removeFirst()+0x3d>
c00292cf:	83 ec 0c             	sub    esp,0xc
c00292d2:	68 d7 ad 02 c0       	push   0xc002add7
c00292d7:	e8 84 72 fe ff       	call   c0010560 <KePanic(char const*)>
c00292dc:	83 c4 10             	add    esp,0x10
c00292df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292e3:	8b 00                	mov    eax,DWORD PTR [eax]
c00292e5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00292e8:	85 c0                	test   eax,eax
c00292ea:	75 33                	jne    c002931f <LinkedList<UnixFile>::removeFirst()+0x7d>
c00292ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292f0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00292f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292fa:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0029301:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029305:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029308:	83 f8 01             	cmp    eax,0x1
c002930b:	74 21                	je     c002932e <LinkedList<UnixFile>::removeFirst()+0x8c>
c002930d:	83 ec 0c             	sub    esp,0xc
c0029310:	68 b0 ad 02 c0       	push   0xc002adb0
c0029315:	e8 46 72 fe ff       	call   c0010560 <KePanic(char const*)>
c002931a:	83 c4 10             	add    esp,0x10
c002931d:	eb 0f                	jmp    c002932e <LinkedList<UnixFile>::removeFirst()+0x8c>
c002931f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029323:	8b 00                	mov    eax,DWORD PTR [eax]
c0029325:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0029328:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002932c:	89 10                	mov    DWORD PTR [eax],edx
c002932e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029332:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029335:	8d 50 ff             	lea    edx,[eax-0x1]
c0029338:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002933c:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002933f:	83 c4 0c             	add    esp,0xc
c0029342:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c0029344 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c0029344:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0029348:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002934b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c002934c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c002934c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0029350:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0029353:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0029354 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0029354:	90                   	nop
c0029355:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0029358 <ThreadControlBlock::ThreadControlBlock()>:
c0029358:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002935c:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0029363:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029367:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c002936e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029372:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0029379:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002937d:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c0029384:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029388:	c7 40 59 00 00 00 00 	mov    DWORD PTR [eax+0x59],0x0
c002938f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029393:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0029397:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002939b:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c002939f:	90                   	nop
c00293a0:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c00293a4 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c00293a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00293a8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00293ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00293b2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00293b9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00293bd:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00293c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00293c8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00293ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00293d2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00293d9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00293dd:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00293e4:	90                   	nop
c00293e5:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c00293e6 <IOAPIC::~IOAPIC()>:
c00293e6:	83 ec 0c             	sub    esp,0xc
c00293e9:	ba b0 c7 02 c0       	mov    edx,0xc002c7b0
c00293ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293f2:	89 10                	mov    DWORD PTR [eax],edx
c00293f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293f8:	83 ec 0c             	sub    esp,0xc
c00293fb:	50                   	push   eax
c00293fc:	e8 1f 0f fe ff       	call   c000a320 <Device::~Device()>
c0029401:	83 c4 10             	add    esp,0x10
c0029404:	90                   	nop
c0029405:	83 c4 0c             	add    esp,0xc
c0029408:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c002940a <IOAPIC::~IOAPIC()>:
c002940a:	83 ec 0c             	sub    esp,0xc
c002940d:	83 ec 0c             	sub    esp,0xc
c0029410:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029414:	e8 cd ff ff ff       	call   c00293e6 <IOAPIC::~IOAPIC()>
c0029419:	83 c4 10             	add    esp,0x10
c002941c:	83 ec 08             	sub    esp,0x8
c002941f:	68 68 01 00 00       	push   0x168
c0029424:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029428:	e8 df 48 fe ff       	call   c000dd0c <operator delete(void*, unsigned long)>
c002942d:	83 c4 10             	add    esp,0x10
c0029430:	83 c4 0c             	add    esp,0xc
c0029433:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0029434 <CPU::~CPU()>:
c0029434:	83 ec 0c             	sub    esp,0xc
c0029437:	ba 38 cb 02 c0       	mov    edx,0xc002cb38
c002943c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029440:	89 10                	mov    DWORD PTR [eax],edx
c0029442:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029446:	83 ec 0c             	sub    esp,0xc
c0029449:	50                   	push   eax
c002944a:	e8 d1 0e fe ff       	call   c000a320 <Device::~Device()>
c002944f:	83 c4 10             	add    esp,0x10
c0029452:	90                   	nop
c0029453:	83 c4 0c             	add    esp,0xc
c0029456:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0029458 <CPU::~CPU()>:
c0029458:	83 ec 0c             	sub    esp,0xc
c002945b:	83 ec 0c             	sub    esp,0xc
c002945e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029462:	e8 cd ff ff ff       	call   c0029434 <CPU::~CPU()>
c0029467:	83 c4 10             	add    esp,0x10
c002946a:	83 ec 08             	sub    esp,0x8
c002946d:	68 78 11 00 00       	push   0x1178
c0029472:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029476:	e8 91 48 fe ff       	call   c000dd0c <operator delete(void*, unsigned long)>
c002947b:	83 c4 10             	add    esp,0x10
c002947e:	83 c4 0c             	add    esp,0xc
c0029481:	c3                   	ret    

Disassembly of section .text._ZN15UnknownHardware10_getDriverEv:

c0029484 <UnknownHardware::_getDriver()>:
c0029484:	b8 00 00 00 00       	mov    eax,0x0
c0029489:	c3                   	ret    

Disassembly of section .text._ZN15UnknownHardware7getTypeEv:

c002948c <UnknownHardware::getType()>:
c002948c:	b8 00 00 00 00       	mov    eax,0x0
c0029491:	c3                   	ret    

Disassembly of section .text._ZN15UnknownHardwareD2Ev:

c0029494 <UnknownHardware::~UnknownHardware()>:
c0029494:	83 ec 0c             	sub    esp,0xc
c0029497:	ba 28 ce 02 c0       	mov    edx,0xc002ce28
c002949c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294a0:	89 10                	mov    DWORD PTR [eax],edx
c00294a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294a6:	83 ec 0c             	sub    esp,0xc
c00294a9:	50                   	push   eax
c00294aa:	e8 ad df fd ff       	call   c000745c <Hardware::~Hardware()>
c00294af:	83 c4 10             	add    esp,0x10
c00294b2:	90                   	nop
c00294b3:	83 c4 0c             	add    esp,0xc
c00294b6:	c3                   	ret    

Disassembly of section .text._ZN15UnknownHardwareD0Ev:

c00294b8 <UnknownHardware::~UnknownHardware()>:
c00294b8:	83 ec 0c             	sub    esp,0xc
c00294bb:	83 ec 0c             	sub    esp,0xc
c00294be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00294c2:	e8 cd ff ff ff       	call   c0029494 <UnknownHardware::~UnknownHardware()>
c00294c7:	83 c4 10             	add    esp,0x10
c00294ca:	83 ec 08             	sub    esp,0x8
c00294cd:	68 88 01 00 00       	push   0x188
c00294d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00294d6:	e8 31 48 fe ff       	call   c000dd0c <operator delete(void*, unsigned long)>
c00294db:	83 c4 10             	add    esp,0x10
c00294de:	83 c4 0c             	add    esp,0xc
c00294e1:	c3                   	ret    

Disassembly of section .text._ZN15UnknownHardwareC2Ev:

c00294e4 <UnknownHardware::UnknownHardware()>:
c00294e4:	83 ec 0c             	sub    esp,0xc
c00294e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294eb:	83 ec 0c             	sub    esp,0xc
c00294ee:	50                   	push   eax
c00294ef:	e8 e0 df fd ff       	call   c00074d4 <Hardware::Hardware()>
c00294f4:	83 c4 10             	add    esp,0x10
c00294f7:	ba 28 ce 02 c0       	mov    edx,0xc002ce28
c00294fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029500:	89 10                	mov    DWORD PTR [eax],edx
c0029502:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029506:	c7 40 70 04 00 00 00 	mov    DWORD PTR [eax+0x70],0x4
c002950d:	90                   	nop
c002950e:	83 c4 0c             	add    esp,0xc
c0029511:	c3                   	ret    

Disassembly of section .text._ZN15UnknownHardware18setISAPnPDetectionEhy:

c0029514 <UnknownHardware::setISAPnPDetection(unsigned char, unsigned long long)>:
c0029514:	53                   	push   ebx
c0029515:	83 ec 10             	sub    esp,0x10
c0029518:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002951c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0029520:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029524:	89 04 24             	mov    DWORD PTR [esp],eax
c0029527:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002952b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002952f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0029533:	c7 40 70 01 00 00 00 	mov    DWORD PTR [eax+0x70],0x1
c002953a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002953e:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0029542:	88 50 40             	mov    BYTE PTR [eax+0x40],dl
c0029545:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0029548:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002954c:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c002954f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0029552:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0029556:	89 d0                	mov    eax,edx
c0029558:	31 d2                	xor    edx,edx
c002955a:	89 c1                	mov    ecx,eax
c002955c:	89 d3                	mov    ebx,edx
c002955e:	89 ca                	mov    edx,ecx
c0029560:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0029564:	89 50 48             	mov    DWORD PTR [eax+0x48],edx
c0029567:	90                   	nop
c0029568:	83 c4 10             	add    esp,0x10
c002956b:	5b                   	pop    ebx
c002956c:	c3                   	ret    

Disassembly of section .text._ZN15UnknownHardware20getHumanReadableNameEv:

c0029570 <UnknownHardware::getHumanReadableName()>:
c0029570:	83 ec 0c             	sub    esp,0xc
c0029573:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029577:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c002957a:	83 f8 02             	cmp    eax,0x2
c002957d:	75 0d                	jne    c002958c <UnknownHardware::getHumanReadableName()+0x1c>
c002957f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029583:	05 88 00 00 00       	add    eax,0x88
c0029588:	eb 2a                	jmp    c00295b4 <UnknownHardware::getHumanReadableName()+0x44>
c002958a:	66 90                	xchg   ax,ax
c002958c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029590:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c0029593:	83 f8 01             	cmp    eax,0x1
c0029596:	75 08                	jne    c00295a0 <UnknownHardware::getHumanReadableName()+0x30>
c0029598:	b8 00 ce 02 c0       	mov    eax,0xc002ce00
c002959d:	eb 15                	jmp    c00295b4 <UnknownHardware::getHumanReadableName()+0x44>
c002959f:	90                   	nop
c00295a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00295a4:	83 ec 0c             	sub    esp,0xc
c00295a7:	50                   	push   eax
c00295a8:	e8 07 de fd ff       	call   c00073b4 <Hardware::getHumanReadableName()>
c00295ad:	83 c4 10             	add    esp,0x10
c00295b0:	90                   	nop
c00295b1:	8d 76 00             	lea    esi,[esi+0x0]
c00295b4:	83 c4 0c             	add    esp,0xc
c00295b7:	c3                   	ret    

Disassembly of section .text._ZN15UnknownHardwareC2E23DevicePCIConnectionInfo:

c00295b8 <UnknownHardware::UnknownHardware(DevicePCIConnectionInfo)>:
c00295b8:	55                   	push   ebp
c00295b9:	89 e5                	mov    ebp,esp
c00295bb:	56                   	push   esi
c00295bc:	53                   	push   ebx
c00295bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00295c0:	83 ec 0c             	sub    esp,0xc
c00295c3:	50                   	push   eax
c00295c4:	e8 0b df fd ff       	call   c00074d4 <Hardware::Hardware()>
c00295c9:	83 c4 10             	add    esp,0x10
c00295cc:	ba 28 ce 02 c0       	mov    edx,0xc002ce28
c00295d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00295d4:	89 10                	mov    DWORD PTR [eax],edx
c00295d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00295d9:	c7 40 70 02 00 00 00 	mov    DWORD PTR [eax+0x70],0x2
c00295e0:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00295e3:	b8 24 00 00 00       	mov    eax,0x24
c00295e8:	83 e0 fc             	and    eax,0xfffffffc
c00295eb:	89 c3                	mov    ebx,eax
c00295ed:	b8 00 00 00 00       	mov    eax,0x0
c00295f2:	66 90                	xchg   ax,ax
c00295f4:	8b 4c 05 0c          	mov    ecx,DWORD PTR [ebp+eax*1+0xc]
c00295f8:	89 4c 02 40          	mov    DWORD PTR [edx+eax*1+0x40],ecx
c00295fc:	83 c0 04             	add    eax,0x4
c00295ff:	39 d8                	cmp    eax,ebx
c0029601:	72 f1                	jb     c00295f4 <UnknownHardware::UnknownHardware(DevicePCIConnectionInfo)+0x3c>
c0029603:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0029606:	05 88 00 00 00       	add    eax,0x88
c002960b:	83 ec 08             	sub    esp,0x8
c002960e:	68 c0 d9 02 c0       	push   0xc002d9c0
c0029613:	50                   	push   eax
c0029614:	e8 37 70 fd ff       	call   c0000650 <strcpy>
c0029619:	83 c4 10             	add    esp,0x10
c002961c:	83 ec 0c             	sub    esp,0xc
c002961f:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0029622:	83 ec 24             	sub    esp,0x24
c0029625:	89 e3                	mov    ebx,esp
c0029627:	b8 24 00 00 00       	mov    eax,0x24
c002962c:	83 e0 fc             	and    eax,0xfffffffc
c002962f:	89 c6                	mov    esi,eax
c0029631:	b8 00 00 00 00       	mov    eax,0x0
c0029636:	66 90                	xchg   ax,ax
c0029638:	8b 54 01 40          	mov    edx,DWORD PTR [ecx+eax*1+0x40]
c002963c:	89 14 03             	mov    DWORD PTR [ebx+eax*1],edx
c002963f:	83 c0 04             	add    eax,0x4
c0029642:	39 f0                	cmp    eax,esi
c0029644:	72 f2                	jb     c0029638 <UnknownHardware::UnknownHardware(DevicePCIConnectionInfo)+0x80>
c0029646:	e8 89 3c ff ff       	call   c001d2d4 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)>
c002964b:	83 c4 30             	add    esp,0x30
c002964e:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0029651:	81 c2 88 00 00 00    	add    edx,0x88
c0029657:	83 ec 08             	sub    esp,0x8
c002965a:	50                   	push   eax
c002965b:	52                   	push   edx
c002965c:	e8 0f 72 fd ff       	call   c0000870 <strcat>
c0029661:	83 c4 10             	add    esp,0x10
c0029664:	90                   	nop
c0029665:	8d 65 f8             	lea    esp,[ebp-0x8]
c0029668:	5b                   	pop    ebx
c0029669:	5e                   	pop    esi
c002966a:	5d                   	pop    ebp
c002966b:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c002966c <PCI::~PCI()>:
c002966c:	83 ec 0c             	sub    esp,0xc
c002966f:	ba 78 e0 02 c0       	mov    edx,0xc002e078
c0029674:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029678:	89 10                	mov    DWORD PTR [eax],edx
c002967a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002967e:	83 ec 0c             	sub    esp,0xc
c0029681:	50                   	push   eax
c0029682:	e8 3d fd fd ff       	call   c00093c4 <Bus::~Bus()>
c0029687:	83 c4 10             	add    esp,0x10
c002968a:	90                   	nop
c002968b:	83 c4 0c             	add    esp,0xc
c002968e:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c0029690 <PCI::~PCI()>:
c0029690:	83 ec 0c             	sub    esp,0xc
c0029693:	83 ec 0c             	sub    esp,0xc
c0029696:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002969a:	e8 cd ff ff ff       	call   c002966c <PCI::~PCI()>
c002969f:	83 c4 10             	add    esp,0x10
c00296a2:	83 ec 08             	sub    esp,0x8
c00296a5:	68 5c 01 00 00       	push   0x15c
c00296aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00296ae:	e8 59 46 fe ff       	call   c000dd0c <operator delete(void*, unsigned long)>
c00296b3:	83 c4 10             	add    esp,0x10
c00296b6:	83 c4 0c             	add    esp,0xc
c00296b9:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c00296ba <IDE::~IDE()>:
c00296ba:	83 ec 0c             	sub    esp,0xc
c00296bd:	ba c8 e1 02 c0       	mov    edx,0xc002e1c8
c00296c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00296c6:	89 10                	mov    DWORD PTR [eax],edx
c00296c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00296cc:	83 ec 0c             	sub    esp,0xc
c00296cf:	50                   	push   eax
c00296d0:	e8 db 10 fe ff       	call   c000a7b0 <HardDiskController::~HardDiskController()>
c00296d5:	83 c4 10             	add    esp,0x10
c00296d8:	90                   	nop
c00296d9:	83 c4 0c             	add    esp,0xc
c00296dc:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c00296de <IDE::~IDE()>:
c00296de:	83 ec 0c             	sub    esp,0xc
c00296e1:	83 ec 0c             	sub    esp,0xc
c00296e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00296e8:	e8 cd ff ff ff       	call   c00296ba <IDE::~IDE()>
c00296ed:	83 c4 10             	add    esp,0x10
c00296f0:	83 ec 08             	sub    esp,0x8
c00296f3:	68 70 02 00 00       	push   0x270
c00296f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00296fc:	e8 0b 46 fe ff       	call   c000dd0c <operator delete(void*, unsigned long)>
c0029701:	83 c4 10             	add    esp,0x10
c0029704:	83 c4 0c             	add    esp,0xc
c0029707:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0029708 <SATABus::~SATABus()>:
c0029708:	83 ec 0c             	sub    esp,0xc
c002970b:	ba 18 e2 02 c0       	mov    edx,0xc002e218
c0029710:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029714:	89 10                	mov    DWORD PTR [eax],edx
c0029716:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002971a:	83 ec 0c             	sub    esp,0xc
c002971d:	50                   	push   eax
c002971e:	e8 8d 10 fe ff       	call   c000a7b0 <HardDiskController::~HardDiskController()>
c0029723:	83 c4 10             	add    esp,0x10
c0029726:	90                   	nop
c0029727:	83 c4 0c             	add    esp,0xc
c002972a:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c002972c <SATABus::~SATABus()>:
c002972c:	83 ec 0c             	sub    esp,0xc
c002972f:	83 ec 0c             	sub    esp,0xc
c0029732:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029736:	e8 cd ff ff ff       	call   c0029708 <SATABus::~SATABus()>
c002973b:	83 c4 10             	add    esp,0x10
c002973e:	83 ec 08             	sub    esp,0x8
c0029741:	68 64 01 00 00       	push   0x164
c0029746:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002974a:	e8 bd 45 fe ff       	call   c000dd0c <operator delete(void*, unsigned long)>
c002974f:	83 c4 10             	add    esp,0x10
c0029752:	83 c4 0c             	add    esp,0xc
c0029755:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0029756 <ATA::~ATA()>:
c0029756:	83 ec 0c             	sub    esp,0xc
c0029759:	ba 00 e3 02 c0       	mov    edx,0xc002e300
c002975e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029762:	89 10                	mov    DWORD PTR [eax],edx
c0029764:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029768:	83 ec 0c             	sub    esp,0xc
c002976b:	50                   	push   eax
c002976c:	e8 21 11 fe ff       	call   c000a892 <PhysicalDisk::~PhysicalDisk()>
c0029771:	83 c4 10             	add    esp,0x10
c0029774:	90                   	nop
c0029775:	83 c4 0c             	add    esp,0xc
c0029778:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c002977a <ATA::~ATA()>:
c002977a:	83 ec 0c             	sub    esp,0xc
c002977d:	83 ec 0c             	sub    esp,0xc
c0029780:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029784:	e8 cd ff ff ff       	call   c0029756 <ATA::~ATA()>
c0029789:	83 c4 10             	add    esp,0x10
c002978c:	83 ec 08             	sub    esp,0x8
c002978f:	68 8c 01 00 00       	push   0x18c
c0029794:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029798:	e8 6f 45 fe ff       	call   c000dd0c <operator delete(void*, unsigned long)>
c002979d:	83 c4 10             	add    esp,0x10
c00297a0:	83 c4 0c             	add    esp,0xc
c00297a3:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c00297a4 <ATAPI::~ATAPI()>:
c00297a4:	83 ec 0c             	sub    esp,0xc
c00297a7:	ba 48 e3 02 c0       	mov    edx,0xc002e348
c00297ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00297b0:	89 10                	mov    DWORD PTR [eax],edx
c00297b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00297b6:	83 ec 0c             	sub    esp,0xc
c00297b9:	50                   	push   eax
c00297ba:	e8 d3 10 fe ff       	call   c000a892 <PhysicalDisk::~PhysicalDisk()>
c00297bf:	83 c4 10             	add    esp,0x10
c00297c2:	90                   	nop
c00297c3:	83 c4 0c             	add    esp,0xc
c00297c6:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c00297c8 <ATAPI::~ATAPI()>:
c00297c8:	83 ec 0c             	sub    esp,0xc
c00297cb:	83 ec 0c             	sub    esp,0xc
c00297ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00297d2:	e8 cd ff ff ff       	call   c00297a4 <ATAPI::~ATAPI()>
c00297d7:	83 c4 10             	add    esp,0x10
c00297da:	83 ec 08             	sub    esp,0x8
c00297dd:	68 84 01 00 00       	push   0x184
c00297e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00297e6:	e8 21 45 fe ff       	call   c000dd0c <operator delete(void*, unsigned long)>
c00297eb:	83 c4 10             	add    esp,0x10
c00297ee:	83 c4 0c             	add    esp,0xc
c00297f1:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c00297f2 <SATA::~SATA()>:
c00297f2:	83 ec 0c             	sub    esp,0xc
c00297f5:	ba 08 e4 02 c0       	mov    edx,0xc002e408
c00297fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00297fe:	89 10                	mov    DWORD PTR [eax],edx
c0029800:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029804:	83 ec 0c             	sub    esp,0xc
c0029807:	50                   	push   eax
c0029808:	e8 85 10 fe ff       	call   c000a892 <PhysicalDisk::~PhysicalDisk()>
c002980d:	83 c4 10             	add    esp,0x10
c0029810:	90                   	nop
c0029811:	83 c4 0c             	add    esp,0xc
c0029814:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0029816 <SATA::~SATA()>:
c0029816:	83 ec 0c             	sub    esp,0xc
c0029819:	83 ec 0c             	sub    esp,0xc
c002981c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029820:	e8 cd ff ff ff       	call   c00297f2 <SATA::~SATA()>
c0029825:	83 c4 10             	add    esp,0x10
c0029828:	83 ec 08             	sub    esp,0x8
c002982b:	68 7c 01 00 00       	push   0x17c
c0029830:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029834:	e8 d3 44 fe ff       	call   c000dd0c <operator delete(void*, unsigned long)>
c0029839:	83 c4 10             	add    esp,0x10
c002983c:	83 c4 0c             	add    esp,0xc
c002983f:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c0029840 <SATAPI::~SATAPI()>:
c0029840:	83 ec 0c             	sub    esp,0xc
c0029843:	ba 2c e5 02 c0       	mov    edx,0xc002e52c
c0029848:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002984c:	89 10                	mov    DWORD PTR [eax],edx
c002984e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029852:	83 ec 0c             	sub    esp,0xc
c0029855:	50                   	push   eax
c0029856:	e8 37 10 fe ff       	call   c000a892 <PhysicalDisk::~PhysicalDisk()>
c002985b:	83 c4 10             	add    esp,0x10
c002985e:	90                   	nop
c002985f:	83 c4 0c             	add    esp,0xc
c0029862:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c0029864 <SATAPI::~SATAPI()>:
c0029864:	83 ec 0c             	sub    esp,0xc
c0029867:	83 ec 0c             	sub    esp,0xc
c002986a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002986e:	e8 cd ff ff ff       	call   c0029840 <SATAPI::~SATAPI()>
c0029873:	83 c4 10             	add    esp,0x10
c0029876:	83 ec 08             	sub    esp,0x8
c0029879:	68 84 01 00 00       	push   0x184
c002987e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029882:	e8 85 44 fe ff       	call   c000dd0c <operator delete(void*, unsigned long)>
c0029887:	83 c4 10             	add    esp,0x10
c002988a:	83 c4 0c             	add    esp,0xc
c002988d:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0029890 <APICTimer::~APICTimer()>:
c0029890:	83 ec 0c             	sub    esp,0xc
c0029893:	ba 80 e5 02 c0       	mov    edx,0xc002e580
c0029898:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002989c:	89 10                	mov    DWORD PTR [eax],edx
c002989e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00298a2:	83 ec 0c             	sub    esp,0xc
c00298a5:	50                   	push   eax
c00298a6:	e8 81 21 fe ff       	call   c000ba2c <Timer::~Timer()>
c00298ab:	83 c4 10             	add    esp,0x10
c00298ae:	90                   	nop
c00298af:	83 c4 0c             	add    esp,0xc
c00298b2:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c00298b4 <APICTimer::~APICTimer()>:
c00298b4:	83 ec 0c             	sub    esp,0xc
c00298b7:	83 ec 0c             	sub    esp,0xc
c00298ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00298be:	e8 cd ff ff ff       	call   c0029890 <APICTimer::~APICTimer()>
c00298c3:	83 c4 10             	add    esp,0x10
c00298c6:	83 ec 08             	sub    esp,0x8
c00298c9:	68 60 01 00 00       	push   0x160
c00298ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00298d2:	e8 35 44 fe ff       	call   c000dd0c <operator delete(void*, unsigned long)>
c00298d7:	83 c4 10             	add    esp,0x10
c00298da:	83 c4 0c             	add    esp,0xc
c00298dd:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c00298e0 <PIT::~PIT()>:
c00298e0:	83 ec 0c             	sub    esp,0xc
c00298e3:	ba d0 e5 02 c0       	mov    edx,0xc002e5d0
c00298e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00298ec:	89 10                	mov    DWORD PTR [eax],edx
c00298ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00298f2:	83 ec 0c             	sub    esp,0xc
c00298f5:	50                   	push   eax
c00298f6:	e8 31 21 fe ff       	call   c000ba2c <Timer::~Timer()>
c00298fb:	83 c4 10             	add    esp,0x10
c00298fe:	90                   	nop
c00298ff:	83 c4 0c             	add    esp,0xc
c0029902:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0029904 <PIT::~PIT()>:
c0029904:	83 ec 0c             	sub    esp,0xc
c0029907:	83 ec 0c             	sub    esp,0xc
c002990a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002990e:	e8 cd ff ff ff       	call   c00298e0 <PIT::~PIT()>
c0029913:	83 c4 10             	add    esp,0x10
c0029916:	83 ec 08             	sub    esp,0x8
c0029919:	68 5c 01 00 00       	push   0x15c
c002991e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029922:	e8 e5 43 fe ff       	call   c000dd0c <operator delete(void*, unsigned long)>
c0029927:	83 c4 10             	add    esp,0x10
c002992a:	83 c4 0c             	add    esp,0xc
c002992d:	c3                   	ret    

Disassembly of section userkernel:

c0031000 <KiDefaultSignalHandlerAbort(int)>:
c0031000:	57                   	push   edi
c0031001:	b9 07 00 00 00       	mov    ecx,0x7
c0031006:	56                   	push   esi
c0031007:	be 47 b8 02 c0       	mov    esi,0xc002b847
c003100c:	83 ec 24             	sub    esp,0x24
c003100f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0031013:	fc                   	cld    
c0031014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0031016:	8d 44 24 04          	lea    eax,[esp+0x4]
c003101a:	50                   	push   eax
c003101b:	6a 00                	push   0x0
c003101d:	6a 38                	push   0x38
c003101f:	6a 01                	push   0x1
c0031021:	e8 2c 00 00 00       	call   c0031052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0031026:	83 c4 34             	add    esp,0x34
c0031029:	5e                   	pop    esi
c003102a:	5f                   	pop    edi
c003102b:	c3                   	ret    

c003102c <KiDefaultSignalHandlerTerminate(int)>:
c003102c:	57                   	push   edi
c003102d:	b9 08 00 00 00       	mov    ecx,0x8
c0031032:	56                   	push   esi
c0031033:	be 63 b8 02 c0       	mov    esi,0xc002b863
c0031038:	83 ec 24             	sub    esp,0x24
c003103b:	89 e7                	mov    edi,esp
c003103d:	fc                   	cld    
c003103e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0031040:	54                   	push   esp
c0031041:	6a 00                	push   0x0
c0031043:	6a 37                	push   0x37
c0031045:	6a 01                	push   0x1
c0031047:	e8 06 00 00 00       	call   c0031052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c003104c:	83 c4 34             	add    esp,0x34
c003104f:	5e                   	pop    esi
c0031050:	5f                   	pop    edi
c0031051:	c3                   	ret    

c0031052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0031052:	53                   	push   ebx
c0031053:	83 ec 10             	sub    esp,0x10
c0031056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c003105a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c003105e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0031062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0031066:	cd 60                	int    0x60
c0031068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c003106c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0031070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0031074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0031078:	83 c4 10             	add    esp,0x10
c003107b:	5b                   	pop    ebx
c003107c:	c3                   	ret    

Disassembly of section align_previous:

c0032000 <DO_NOT_DELETE()>:
c0032000:	c3                   	ret    
